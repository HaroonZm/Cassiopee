================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:45:13
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def main():
    """
    Fonction principale qui exécute le programme :
    Demande à l'utilisateur d'entrer un entier, puis affiche son cube.
    """
    # Demander à l'utilisateur de saisir un entier
    a = get_user_input()
    
    # Calculer le cube et afficher le résultat
    result = cube(a)
    print(result)

def get_user_input():
    """
    Demande à l'utilisateur d'entrer un nombre entier via la fonction input.

    Returns:
        int: Le nombre entier saisi par l'utilisateur.
    """
    # Utilisation de input() pour lire une chaîne depuis le terminal,
    # puis conversion explicite de la chaîne en entier avec int().
    return int(input("Entrez un nombre entier : "))

def cube(n):
    """
    Calcule le cube d'un nombre entier donné.

    Args:
        n (int): Le nombre à mettre au cube.

    Returns:
        int: Le résultat de n élevé à la puissance 3.
    """
    return n * n * n

# Exécution du script si appelé directement
if __name__ == "__main__":
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' main' (ID: 2758)
  → Token d'amorce (pas de prédiction)

Token 2: '():
' (ID: 8595)
  → Token d'amorce (pas de prédiction)

Token 3: '   ' (ID: 271)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\' → logprob: -0.27238088846206665
    2. '\n' → logprob: -1.6473808288574219
    3. '   ' → logprob: -3.897380828857422
    4. '    
' → logprob: -4.897380828857422
    5. '    ' → logprob: -5.647380828857422
    6. ''' → logprob: -5.897380828857422
    7. '```' → logprob: -6.147380828857422
    8. '(' → logprob: -6.397380828857422
    9. ' 
' → logprob: -6.397380828857422
    10. '\r' → logprob: -6.897380828857422

Token 4: ' """
' (ID: 7037)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.4218117594718933
    2. '   ' → logprob: -1.671811819076538
    3. 'pass' → logprob: -2.421811819076538
    4. 'p' → logprob: -3.671811819076538
    5. 'return' → logprob: -4.171811580657959
    6. 'r' → logprob: -4.421811580657959
    7. '#' → logprob: -5.171811580657959
    8. '    ' → logprob: -6.171811580657959
    9. 'a' → logprob: -6.296811580657959
    10. 'n' → logprob: -6.796811580657959

Token 5: '   ' (ID: 271)
  Prédit: '"""'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"""' → logprob: -0.9647759795188904
    2. 'This' → logprob: -1.7147760391235352
    3. 'Calculate' → logprob: -2.089776039123535
    4. 'Initialize' → logprob: -2.464776039123535
    5. 'Returns' → logprob: -3.339776039123535
    6. 'Run' → logprob: -3.839776039123535
    7. '   ' → logprob: -4.214776039123535
    8. 'Show' → logprob: -4.339776039123535
    9. 'Runs' → logprob: -4.339776039123535
    10. 'Starts' → logprob: -4.464776039123535

Token 6: ' Fonction' (ID: 189149)
  Prédit: 'This'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'This' → logprob: -1.2672419548034668
    2. 'Run' → logprob: -1.2672419548034668
    3. 'Calculate' → logprob: -2.142241954803467
    4. 'Initialize' → logprob: -2.892241954803467
    5. 'Print' → logprob: -3.017241954803467
    6. 'Main' → logprob: -3.767241954803467
    7. 'Initial' → logprob: -4.017241954803467
    8. '   ' → logprob: -4.017241954803467
    9. 'Parse' → logprob: -4.017241954803467
    10. 'Process' → logprob: -4.267241954803467

Token 7: ' principale' (ID: 68926)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3475503921508789
    2. ' de' → logprob: -1.972550392150879
    3. ' ' → logprob: -2.597550392150879
    4. '```' → logprob: -4.222550392150879
    5. '  ' → logprob: -4.597550392150879
    6. '    ' → logprob: -4.597550392150879
    7. ' d' → logprob: -4.847550392150879
    8. 'naire' → logprob: -4.972550392150879
    9. ' continuation' → logprob: -5.347550392150879
    10. '()' → logprob: -6.222550392150879

Token 8: ' qui' (ID: 2780)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07823221385478973
    2. '\n' → logprob: -3.4532322883605957
    3. '```' → logprob: -4.453232288360596
    4. '    ' → logprob: -4.703232288360596
    5. ' ' → logprob: -5.078232288360596
    6. '\' → logprob: -5.328232288360596
    7. 'n' → logprob: -5.953232288360596
    8. '    
' → logprob: -6.453232288360596
    9. '"""' → logprob: -6.703232288360596
    10. '  ' → logprob: -6.703232288360596

Token 9: ' ex' (ID: 513)
  Prédit: ' g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' g' → logprob: -0.9299823045730591
    2. ' lance' → logprob: -1.804982304573059
    3. '   ' → logprob: -2.0549821853637695
    4. ' appelle' → logprob: -2.4299821853637695
    5. 'g' → logprob: -3.1799821853637695
    6. ' initialise' → logprob: -3.3049821853637695
    7. ' démar' → logprob: -3.4299821853637695
    8. ' ex' → logprob: -3.8049821853637695
    9. ' execute' → logprob: -4.4299821853637695
    10. ' retourne' → logprob: -4.5549821853637695

Token 10: 'éc' (ID: 5675)
  Prédit: 'ecute'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ecute' → logprob: -0.5486374497413635
    2. 'éc' → logprob: -1.0486373901367188
    3. 'cute' → logprob: -3.1736373901367188
    4. 'é' → logprob: -3.7986373901367188
    5. 'ec' → logprob: -5.798637390136719
    6. 'c' → logprob: -7.048637390136719
    7. 'écut' → logprob: -7.173637390136719
    8. 'e' → logprob: -7.173637390136719
    9. 'p' → logprob: -7.798637390136719
    10. 'è' → logprob: -8.173637390136719

Token 11: 'ute' (ID: 1331)
  Prédit: 'ute'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ute' → logprob: -0.18335136771202087
    2. 'cute' → logprob: -1.8083513975143433
    3. 'ecute' → logprob: -6.183351516723633
    4. '```' → logprob: -8.308351516723633
    5. 'c' → logprob: -8.433351516723633
    6. '\' → logprob: -8.433351516723633
    7. 'é' → logprob: -9.058351516723633
    8. 'e' → logprob: -9.183351516723633
    9. '   ' → logprob: -9.808351516723633
    10. '#' → logprob: -10.308351516723633

Token 12: ' le' (ID: 505)
  Prédit: ' le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.1809719055891037
    2. '   ' → logprob: -2.55597186088562
    3. ' la' → logprob: -2.80597186088562
    4. 'le' → logprob: -4.055972099304199
    5. 'l' → logprob: -5.180972099304199
    6. ' l' → logprob: -5.680972099304199
    7. ' ' → logprob: -7.180972099304199
    8. ' the' → logprob: -9.6809720993042
    9. 'la' → logprob: -9.9309720993042
    10. ' une' → logprob: -10.0559720993042

Token 13: ' programme' (ID: 18190)
  Prédit: 'programme'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'programme' → logprob: -0.18438200652599335
    2. ' programme' → logprob: -2.1843819618225098
    3. 'code' → logprob: -4.05938196182251
    4. '   ' → logprob: -4.05938196182251
    5. ' code' → logprob: -5.05938196182251
    6. 'jeu' → logprob: -5.80938196182251
    7. 'script' → logprob: -5.93438196182251
    8. ' script' → logprob: -6.18438196182251
    9. 'program' → logprob: -6.43438196182251
    10. 'flux' → logprob: -6.80938196182251

Token 14: ' :
' (ID: 10039)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009846985340118408
    2. '\n' → logprob: -5.259847164154053
    3. '.' → logprob: -6.509847164154053
    4. '"""
' → logprob: -6.884847164154053
    5. '"""' → logprob: -7.009847164154053
    6. '    
' → logprob: -7.759847164154053
    7. '\' → logprob: -8.259846687316895
    8. '
' → logprob: -9.009846687316895
    9. '```' → logprob: -9.259846687316895
    10. '"' → logprob: -9.884846687316895

Token 15: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04155237600207329
    2. '    ' → logprob: -3.9165523052215576
    3. '       ' → logprob: -4.916552543640137
    4. '"""
' → logprob: -5.541552543640137
    5. '"""' → logprob: -6.166552543640137
    6. ' """
' → logprob: -6.416552543640137
    7. 'def' → logprob: -6.791552543640137
    8. '    
' → logprob: -6.916552543640137
    9. ' pass' → logprob: -7.416552543640137
    10. ' ' → logprob: -7.791552543640137

Token 16: ' Dem' (ID: 9458)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.026965433731675148
    2. '"""' → logprob: -4.026965618133545
    3. '    ' → logprob: -5.276965618133545
    4. '"""
' → logprob: -6.401965618133545
    5. '       ' → logprob: -7.026965618133545
    6. '\n' → logprob: -7.901965618133545
    7. '```' → logprob: -8.526965141296387
    8. 'Ex' → logprob: -9.901965141296387
    9. '    
' → logprob: -10.026965141296387
    10. ' ' → logprob: -10.026965141296387

Token 17: 'ande' (ID: 4102)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.3195033669471741
    2. 'arre' → logprob: -1.9445033073425293
    3. 'ar' → logprob: -3.3195033073425293
    4. 'ande' → logprob: -3.4445033073425293
    5. 'e' → logprob: -3.6945033073425293
    6. 'arr' → logprob: -4.194503307342529
    7. 'an' → logprob: -4.569503307342529
    8. 'arrer' → logprob: -4.944503307342529
    9. 'arque' → logprob: -7.069503307342529
    10. 'are' → logprob: -7.944503307342529

Token 18: ' à' (ID: 1221)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.3555608987808228
    2. ' de' → logprob: -1.4805608987808228
    3. ' à' → logprob: -1.7305608987808228
    4. ' au' → logprob: -2.230560779571533
    5. ' la' → logprob: -2.730560779571533
    6. ' une' → logprob: -2.855560779571533
    7. ' ' → logprob: -3.605560779571533
    8. 'l' → logprob: -3.605560779571533
    9. ' un' → logprob: -4.855560779571533
    10. ' des' → logprob: -4.980560779571533

Token 19: ' l' (ID: 305)
  Prédit: ' l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.0206513199955225
    2. 'l' → logprob: -3.895651340484619
    3. '   ' → logprob: -9.770650863647461
    4. '	l' → logprob: -11.145650863647461
    5. ' ' → logprob: -11.395650863647461
    6. ' user' → logprob: -11.895650863647461
    7. ' utilisateur' → logprob: -12.145650863647461
    8. ' la' → logprob: -12.770650863647461
    9. ' ' → logprob: -12.895650863647461
    10. '  ' → logprob: -13.020650863647461

Token 20: ''utilisateur' (ID: 140803)
  Prédit: ''utilisateur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''utilisateur' → logprob: -0.4528883695602417
    2. ''' → logprob: -1.9528883695602417
    3. 'u' → logprob: -2.0778884887695312
    4. 'a' → logprob: -2.4528884887695312
    5. '’utilisateur' → logprob: -5.452888488769531
    6. 'e' → logprob: -5.952888488769531
    7. '_' → logprob: -6.202888488769531
    8. ' utilisateur' → logprob: -7.327888488769531
    9. ''util' → logprob: -7.327888488769531
    10. ''espace' → logprob: -8.452888488769531

Token 21: ' d' (ID: 272)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.16736683249473572
    2. '   ' → logprob: -2.2923667430877686
    3. ' de' → logprob: -4.042366981506348
    4. ' d' → logprob: -4.417366981506348
    5. '    ' → logprob: -5.292366981506348
    6. ' à' → logprob: -5.667366981506348
    7. '  ' → logprob: -5.792366981506348
    8. ' a' → logprob: -6.042366981506348
    9. 'l' → logprob: -6.667366981506348
    10. ' )' → logprob: -6.792366981506348

Token 22: ''' (ID: 6)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.07133037596940994
    2. ''' → logprob: -2.6963303089141846
    3. 'a' → logprob: -7.696330547332764
    4. 'u' → logprob: -8.321330070495605
    5. ' e' → logprob: -8.946330070495605
    6. ''ent' → logprob: -9.071330070495605
    7. ''entrée' → logprob: -9.071330070495605
    8. ''e' → logprob: -9.321330070495605
    9. ' ' → logprob: -9.446330070495605
    10. ' '' → logprob: -10.446330070495605

Token 23: 'entr' (ID: 12792)
  Prédit: 'entr'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'entr' → logprob: -0.00904527585953474
    2. 'entrée' → logprob: -5.634045124053955
    3. 'ent' → logprob: -6.259045124053955
    4. 's' → logprob: -7.009045124053955
    5. 'e' → logprob: -7.134045124053955
    6. ' entrer' → logprob: -7.634045124053955
    7. ' saisir' → logprob: -8.009045600891113
    8. 'a' → logprob: -8.384045600891113
    9. 'enter' → logprob: -9.009045600891113
    10. ' entr' → logprob: -9.134045600891113

Token 24: 'er' (ID: 259)
  Prédit: 'er'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.016304850578308105
    2. 'e' → logprob: -4.141304969787598
    3. 'é' → logprob: -8.266304969787598
    4. 'ée' → logprob: -12.266304969787598
    5. 'er's' → logprob: -13.266304969787598
    6. 'éer' → logprob: -13.516304969787598
    7. 'erer' → logprob: -13.641304969787598
    8. 'eer' → logprob: -13.766304969787598
    9. 'a' → logprob: -13.891304969787598
    10. 'es' → logprob: -15.016304969787598

Token 25: ' un' (ID: 537)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.56328284740448
    2. ' un' → logprob: -1.68828284740448
    3. ' l' → logprob: -2.3132829666137695
    4. ''' → logprob: -3.3132829666137695
    5. ' une' → logprob: -3.8132829666137695
    6. 'l' → logprob: -4.0632829666137695
    7. 's' → logprob: -4.9382829666137695
    8. ' a' → logprob: -4.9382829666137695
    9. '_' → logprob: -4.9382829666137695
    10. '   ' → logprob: -5.4382829666137695

Token 26: ' entier' (ID: 80473)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.13902008533477783
    2. ' ' → logprob: -2.1390199661254883
    3. ' e' → logprob: -5.639019966125488
    4. ' mot' → logprob: -6.139019966125488
    5. ' nombre' → logprob: -6.639019966125488
    6. 'a' → logprob: -6.764019966125488
    7. ' espace' → logprob: -7.514019966125488
    8. 'n' → logprob: -7.639019966125488
    9. '  ' → logprob: -7.889019966125488
    10. ' nom' → logprob: -8.014019966125488

Token 27: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.6932063698768616
    2. '   ' → logprob: -1.0682063102722168
    3. ' ,' → logprob: -2.568206310272217
    4. ' ' → logprob: -3.193206310272217
    5. 'e' → logprob: -4.318206310272217
    6. 'n' → logprob: -5.443206310272217
    7. '.' → logprob: -5.443206310272217
    8. ',
' → logprob: -5.693206310272217
    9. ' )' → logprob: -5.943206310272217
    10. ')' → logprob: -6.318206310272217

Token 28: ' puis' (ID: 18766)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.23264385759830475
    2. ' puis' → logprob: -1.7326438426971436
    3. 'p' → logprob: -4.857644081115723
    4. ',' → logprob: -5.232644081115723
    5. ' ' → logprob: -5.607644081115723
    6. '    ' → logprob: -5.857644081115723
    7. '    
' → logprob: -5.982644081115723
    8. ' et' → logprob: -6.607644081115723
    9. 'et' → logprob: -6.982644081115723
    10. '       ' → logprob: -7.607644081115723

Token 29: ' affiche' (ID: 127479)
  Prédit: ' retourne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' retourne' → logprob: -0.7804989814758301
    2. ' affiche' → logprob: -2.03049898147583
    3. ' calc' → logprob: -2.40549898147583
    4. ' appelle' → logprob: -2.40549898147583
    5. ' return' → logprob: -3.28049898147583
    6. '   ' → logprob: -3.53049898147583
    7. ' effect' → logprob: -4.03049898147583
    8. ' vér' → logprob: -4.15549898147583
    9. ' le' → logprob: -4.15549898147583
    10. ' calcul' → logprob: -4.40549898147583

Token 30: ' son' (ID: 2391)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.027593687176704407
    2. ' l' → logprob: -3.7775936126708984
    3. 's' → logprob: -7.027593612670898
    4. ' la' → logprob: -7.277593612670898
    5. '  ' → logprob: -7.402593612670898
    6. ' le' → logprob: -7.777593612670898
    7. '   ' → logprob: -8.152593612670898
    8. 'l' → logprob: -8.152593612670898
    9. ' un' → logprob: -8.527593612670898
    10. '(' → logprob: -8.652593612670898

Token 31: ' cube' (ID: 46822)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0256195068359375
    2. 's' → logprob: -4.4006195068359375
    3. ' résultat' → logprob: -5.1506195068359375
    4. ' carré' → logprob: -6.2756195068359375
    5. 'e' → logprob: -6.9006195068359375
    6. ' entier' → logprob: -7.6506195068359375
    7. '  ' → logprob: -7.7756195068359375
    8. '   ' → logprob: -7.7756195068359375
    9. ' valeur' → logprob: -8.025619506835938
    10. ' nombre' → logprob: -8.150619506835938

Token 32: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14289291203022003
    2. ')' → logprob: -3.267892837524414
    3. '\n' → logprob: -3.392892837524414
    4. '.' → logprob: -3.642892837524414
    5. '"""
' → logprob: -4.767892837524414
    6. '"' → logprob: -5.142892837524414
    7. ' ' → logprob: -5.142892837524414
    8. '"""' → logprob: -5.642892837524414
    9. '\' → logprob: -6.392892837524414
    10. '```' → logprob: -6.392892837524414

Token 33: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5303688049316406
    2. '"""' → logprob: -0.9053688049316406
    3. '```' → logprob: -6.030368804931641
    4. '"' → logprob: -6.030368804931641
    5. '"""
' → logprob: -6.780368804931641
    6. '""' → logprob: -6.905368804931641
    7. '`' → logprob: -9.03036880493164
    8. '\n' → logprob: -10.15536880493164
    9. ' """' → logprob: -10.65536880493164
    10. '  ' → logprob: -11.40536880493164

Token 34: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08515557646751404
    2. '"""' → logprob: -2.585155487060547
    3. '"' → logprob: -6.085155487060547
    4. '```' → logprob: -6.585155487060547
    5. '"""
' (adapté à ' """
') → logprob: -7.085155487060547
    6. '\n' → logprob: -7.835155487060547
    7. '""' → logprob: -7.960155487060547
    8. '`' → logprob: -8.085155487060547
    9. 'n' → logprob: -9.085155487060547
    10. '    
' → logprob: -9.085155487060547

Token 35: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.002072586677968502
    2. 'n' → logprob: -6.877072811126709
    3. '    
' → logprob: -7.627072811126709
    4. '\n' → logprob: -8.50207233428955
    5. '
' → logprob: -8.62707233428955
    6. '```' → logprob: -9.75207233428955
    7. '\' → logprob: -10.75207233428955
    8. '       ' → logprob: -11.12707233428955
    9. 'a' → logprob: -11.12707233428955
    10. '    ' → logprob: -11.37707233428955

Token 36: ' #' (ID: 1069)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.6580159068107605
    2. '   ' → logprob: -0.7830159068107605
    3. 'try' → logprob: -4.533015727996826
    4. 'number' → logprob: -4.783015727996826
    5. 'ent' → logprob: -6.408015727996826
    6. 'x' → logprob: -6.533015727996826
    7. 'num' → logprob: -6.908015727996826
    8. 'user' → logprob: -7.033015727996826
    9. '```' → logprob: -9.033016204833984
    10. '#' (adapté à ' #') → logprob: -9.033016204833984

Token 37: ' Dem' (ID: 9458)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.07279849797487259
    2. '   ' → logprob: -2.947798490524292
    3. 'x' → logprob: -5.572798728942871
    4. 'number' → logprob: -5.822798728942871
    5. 'i' → logprob: -5.947798728942871
    6. 'ent' → logprob: -6.072798728942871
    7. '#' → logprob: -6.572798728942871
    8. ' ' → logprob: -6.947798728942871
    9. 'num' → logprob: -7.572798728942871
    10. ' number' → logprob: -7.697798728942871

Token 38: 'ander' (ID: 9330)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.6080371141433716
    2. 'ande' → logprob: -0.9830371141433716
    3. 'an' → logprob: -2.858036994934082
    4. '   ' → logprob: -4.233036994934082
    5. 'ander' → logprob: -5.858036994934082
    6. 'and' → logprob: -6.358036994934082
    7. '       ' → logprob: -7.358036994934082
    8. 'e' → logprob: -7.358036994934082
    9. ' ' → logprob: -7.483036994934082
    10. 'andez' → logprob: -7.483036994934082

Token 39: ' à' (ID: 1221)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.051481474190950394
    2. '   ' → logprob: -3.3014814853668213
    3. '    ' → logprob: -5.301481246948242
    4. '  ' → logprob: -5.551481246948242
    5. ' à' → logprob: -6.176481246948242
    6. ' ' → logprob: -7.426481246948242
    7. ' a' → logprob: -7.551481246948242
    8. ' )' → logprob: -8.051481246948242
    9. ' l' → logprob: -8.801481246948242
    10. 'a' → logprob: -8.926481246948242

Token 40: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.2643214464187622
    2. ' l' → logprob: -1.7643214464187622
    3. ' ' → logprob: -3.5143213272094727
    4. 'u' → logprob: -5.139321327209473
    5. 'n' → logprob: -5.514321327209473
    6. ' utilisateur' → logprob: -5.514321327209473
    7. 'user' → logprob: -5.764321327209473
    8. 'a' → logprob: -6.014321327209473
    9. ' ' → logprob: -6.014321327209473
    10. ' u' → logprob: -6.514321327209473

Token 41: ''utilisateur' (ID: 140803)
  Prédit: ''utilisateur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''utilisateur' → logprob: -0.7574661374092102
    2. 'u' → logprob: -0.8824661374092102
    3. ''' → logprob: -2.5074660778045654
    4. 'e' → logprob: -4.0074663162231445
    5. ''u' → logprob: -5.1324663162231445
    6. ''util' → logprob: -5.7574663162231445
    7. 'a' → logprob: -5.7574663162231445
    8. ''us' → logprob: -6.0074663162231445
    9. 'util' → logprob: -7.0074663162231445
    10. ''user' → logprob: -7.2574663162231445

Token 42: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1122145801782608
    2. ' ' → logprob: -2.6122145652770996
    3. '    ' → logprob: -4.9872145652771
    4. 'n' → logprob: -5.1122145652771
    5. '  ' → logprob: -5.1122145652771
    6. ' à' → logprob: -5.9872145652771
    7. 's' → logprob: -6.1122145652771
    8. ' )' → logprob: -6.6122145652771
    9. ' d' → logprob: -6.8622145652771
    10. ' =' → logprob: -7.1122145652771

Token 43: ' saisir' (ID: 152120)
  Prédit: ' entrer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' entrer' → logprob: -0.8206267952919006
    2. ' saisir' → logprob: -1.3206267356872559
    3. ' entr' → logprob: -1.9456267356872559
    4. 'entr' → logprob: -3.195626735687256
    5. ' input' → logprob: -3.320626735687256
    6. ' ' → logprob: -3.695626735687256
    7. 'r' → logprob: -3.820626735687256
    8. 'n' → logprob: -4.945626735687256
    9. 's' → logprob: -5.070626735687256
    10. 'input' → logprob: -5.820626735687256

Token 44: ' un' (ID: 537)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.009454774670302868
    2. ' un' → logprob: -5.509454727172852
    3. '  ' → logprob: -6.509454727172852
    4. '   ' → logprob: -6.634454727172852
    5. 'l' → logprob: -7.134454727172852
    6. ' l' → logprob: -7.759454727172852
    7. 'un' → logprob: -8.134454727172852
    8. ' ' → logprob: -8.509454727172852
    9. 'n' → logprob: -8.759454727172852
    10. '    ' → logprob: -9.009454727172852

Token 45: ' entier' (ID: 80473)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.05878744646906853
    2. ' entier' → logprob: -3.5587873458862305
    3. ' nombre' → logprob: -4.0587873458862305
    4. 'ent' → logprob: -5.4337873458862305
    5. 'n' → logprob: -5.5587873458862305
    6. 'nombre' → logprob: -6.6837873458862305
    7. 'e' → logprob: -7.4337873458862305
    8. ' espace' → logprob: -8.18378734588623
    9. ' ent' → logprob: -8.55878734588623
    10. '  ' → logprob: -9.18378734588623

Token 46: '
' (ID: 198)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.042078156024217606
    2. '\n' → logprob: -3.9170782566070557
    3. '   ' → logprob: -4.667078018188477
    4. '\' → logprob: -5.542078018188477
    5. '    
' → logprob: -5.917078018188477
    6. '
' → logprob: -6.167078018188477
    7. '  
' → logprob: -7.167078018188477
    8. 'u' → logprob: -7.667078018188477
    9. ' 
' → logprob: -7.792078018188477
    10. ' ' → logprob: -8.042078018188477

Token 47: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18236258625984192
    2. 'n' → logprob: -1.8073625564575195
    3. '    
' → logprob: -6.9323625564575195
    4. ' n' → logprob: -7.1823625564575195
    5. 'user' → logprob: -8.68236255645752
    6. ' ' → logprob: -9.30736255645752
    7. 'x' → logprob: -9.43236255645752
    8. 'ent' → logprob: -9.80736255645752
    9. '  ' → logprob: -10.05736255645752
    10. '    ' → logprob: -10.18236255645752

Token 48: ' a' (ID: 261)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.04343530535697937
    2. '   ' → logprob: -4.043435096740723
    3. ' n' → logprob: -4.918435096740723
    4. 'ent' → logprob: -5.293435096740723
    5. 'number' → logprob: -5.668435096740723
    6. 'x' → logprob: -6.168435096740723
    7. 'user' → logprob: -6.293435096740723
    8. 'nombre' → logprob: -6.543435096740723
    9. 'num' → logprob: -7.293435096740723
    10. ' number' → logprob: -7.293435096740723

Token 49: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.027339685708284378
    2. '=' → logprob: -3.7773396968841553
    3. ' ' → logprob: -5.652339458465576
    4. '=int' → logprob: -8.277339935302734
    5. '=input' → logprob: -9.402339935302734
    6. 'n' → logprob: -9.402339935302734
    7. '   ' → logprob: -10.027339935302734
    8. '  ' → logprob: -10.902339935302734
    9. 's' → logprob: -11.152339935302734
    10. 'i' → logprob: -11.277339935302734

Token 50: ' get' (ID: 717)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.006568295415490866
    2. 'int' → logprob: -5.631568431854248
    3. ' input' → logprob: -5.881568431854248
    4. ' ' → logprob: -9.13156795501709
    5. ' in' → logprob: -10.38156795501709
    6. 'input' → logprob: -10.88156795501709
    7. ' ' → logprob: -11.50656795501709
    8. '=int' → logprob: -13.25656795501709
    9. '	int' → logprob: -13.75656795501709
    10. ' i' → logprob: -14.38156795501709

Token 51: '_user' (ID: 7146)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.3920215964317322
    2. '_int' → logprob: -2.017021656036377
    3. '_' → logprob: -2.142021656036377
    4. '_input' → logprob: -2.892021656036377
    5. 't' → logprob: -5.642021656036377
    6. '_integer' → logprob: -5.767021656036377
    7. 'input' → logprob: -6.017021656036377
    8. 's' → logprob: -6.142021656036377
    9. '(' → logprob: -6.392021656036377
    10. 'ter' → logprob: -6.517021656036377

Token 52: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.02724851481616497
    2. '_' → logprob: -3.6522486209869385
    3. '_int' → logprob: -7.652248382568359
    4. '_in' → logprob: -9.27724838256836
    5. '_integer' → logprob: -9.27724838256836
    6. 'input' → logprob: -9.77724838256836
    7. '_value' → logprob: -9.90224838256836
    8. '(' → logprob: -10.65224838256836
    9. '_n' → logprob: -10.90224838256836
    10. '_number' → logprob: -10.90224838256836

Token 53: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01704460382461548
    2. '("("' → logprob: -4.142044544219971
    3. '()' → logprob: -7.517044544219971
    4. '("' → logprob: -8.642045021057129
    5. '('' → logprob: -8.767045021057129
    6. '("")' → logprob: -10.517045021057129
    7. '("(' → logprob: -10.517045021057129
    8. '(
' → logprob: -10.892045021057129
    9. '("""' → logprob: -11.142045021057129
    10. '(`' → logprob: -11.767045021057129

Token 54: '    
' (ID: 1944)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.23675106465816498
    2. '    
' → logprob: -2.861751079559326
    3. ' ' → logprob: -3.361751079559326
    4. '
' → logprob: -3.611751079559326
    5. '()' → logprob: -3.861751079559326
    6. '(' → logprob: -4.111751079559326
    7. 'def' → logprob: -4.611751079559326
    8. '  
' → logprob: -4.986751079559326
    9. ')' → logprob: -5.111751079559326
    10. '```' → logprob: -5.361751079559326

Token 55: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10908587276935577
    2. '    
' → logprob: -3.10908579826355
    3. 'c' → logprob: -3.85908579826355
    4. '
' → logprob: -4.234086036682129
    5. '  
' → logprob: -5.609086036682129
    6. ' 
' → logprob: -5.734086036682129
    7. '#' → logprob: -5.859086036682129
    8. 'cube' → logprob: -6.109086036682129
    9. '   
' → logprob: -6.359086036682129
    10. '```' → logprob: -6.359086036682129

Token 56: ' #' (ID: 1069)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' (adapté à ' #') → logprob: -0.9820263981819153
    2. 'cube' → logprob: -1.3570263385772705
    3. 'c' → logprob: -1.6070263385772705
    4. 'result' → logprob: -2.3570263385772705
    5. '   ' → logprob: -3.2320263385772705
    6. ' cube' → logprob: -4.60702657699585
    7. ' #' → logprob: -5.35702657699585
    8. '    
' → logprob: -5.85702657699585
    9. 'r' → logprob: -5.85702657699585
    10. 'a' → logprob: -6.10702657699585

Token 57: ' Calcul' (ID: 57243)
  Prédit: ' cube'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' cube' → logprob: -0.5635206699371338
    2. 'cube' → logprob: -1.4385206699371338
    3. 'result' → logprob: -2.188520669937134
    4. ' result' → logprob: -2.938520669937134
    5. 'print' → logprob: -4.438520431518555
    6. ' print' → logprob: -5.063520431518555
    7. 'c' → logprob: -6.188520431518555
    8. 'def' → logprob: -6.813520431518555
    9. 'a' → logprob: -6.938520431518555
    10. 'b' → logprob: -7.063520431518555

Token 58: 'er' (ID: 259)
  Prédit: 'er'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.0024556764401495457
    2. '   ' → logprob: -6.502455711364746
    3. ' =' → logprob: -8.002455711364746
    4. '_' → logprob: -8.877455711364746
    5. 'e' → logprob: -9.002455711364746
    6. '=' → logprob: -9.752455711364746
    7. 'a' → logprob: -10.127455711364746
    8. ' a' → logprob: -10.377455711364746
    9. 'uler' → logprob: -10.377455711364746
    10. '  ' → logprob: -10.627455711364746

Token 59: ' le' (ID: 505)
  Prédit: ' le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.4437312185764313
    2. ' a' → logprob: -1.4437311887741089
    3. 'a' → logprob: -2.6937313079833984
    4. ' l' → logprob: -3.3187313079833984
    5. 'le' → logprob: -4.818731307983398
    6. ' ' → logprob: -5.318731307983398
    7. 'l' → logprob: -6.068731307983398
    8. '   ' → logprob: -6.818731307983398
    9. ' la' → logprob: -7.568731307983398
    10. '    ' → logprob: -7.818731307983398

Token 60: ' cube' (ID: 46822)
  Prédit: ' cube'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cube' → logprob: -0.16659845411777496
    2. ' ' → logprob: -2.4165985584259033
    3. 'cube' → logprob: -3.0415985584259033
    4. '_' → logprob: -5.041598320007324
    5. ' a' → logprob: -5.791598320007324
    6. 'a' → logprob: -6.416598320007324
    7. '_cube' → logprob: -6.666598320007324
    8. 'c' → logprob: -6.916598320007324
    9. ' c' → logprob: -7.291598320007324
    10. ' _' → logprob: -7.416598320007324

Token 61: ' et' (ID: 859)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.699324905872345
    2. '   ' → logprob: -0.824324905872345
    3. '(' → logprob: -3.9493248462677
    4. '_' → logprob: -4.199325084686279
    5. ' a' → logprob: -5.199325084686279
    6. ' (' → logprob: -5.574325084686279
    7. '    
' → logprob: -5.824325084686279
    8. '    ' → logprob: -5.949325084686279
    9. 'b' → logprob: -5.949325084686279
    10. ' ' → logprob: -6.324325084686279

Token 62: ' afficher' (ID: 146524)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.23265822231769562
    2. ' afficher' → logprob: -1.6076582670211792
    3. 'l' → logprob: -5.982658386230469
    4. 'aff' → logprob: -6.482658386230469
    5. ' print' → logprob: -6.607658386230469
    6. '   ' → logprob: -7.732658386230469
    7. ' aff' → logprob: -8.232658386230469
    8. ' display' → logprob: -8.357658386230469
    9. ' affich' → logprob: -8.482658386230469
    10. 'print' → logprob: -8.857658386230469

Token 63: ' le' (ID: 505)
  Prédit: '(a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.7684207558631897
    2. ' le' → logprob: -1.393420696258545
    3. '(' → logprob: -1.768420696258545
    4. 'a' → logprob: -2.893420696258545
    5. ' (' → logprob: -3.393420696258545
    6. 'le' → logprob: -4.643420696258545
    7. ' la' → logprob: -5.643420696258545
    8. '   ' → logprob: -5.643420696258545
    9. ' a' → logprob: -5.893420696258545
    10. 'result' → logprob: -6.018420696258545

Token 64: ' résultat' (ID: 62556)
  Prédit: ' résultat'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' résultat' → logprob: -0.15158769488334656
    2. ' cube' → logprob: -2.776587724685669
    3. ' resultat' → logprob: -3.276587724685669
    4. ' result' → logprob: -3.776587724685669
    5. ' a' → logprob: -5.15158748626709
    6. 'rés' → logprob: -5.77658748626709
    7. 'result' → logprob: -6.90158748626709
    8. 'a' → logprob: -6.90158748626709
    9. '_result' → logprob: -7.02658748626709
    10. ' ' → logprob: -7.15158748626709

Token 65: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5640546679496765
    2. '    
' → logprob: -1.1890547275543213
    3. '
' → logprob: -2.9390547275543213
    4. 'result' → logprob: -3.8140547275543213
    5. 'a' → logprob: -4.314054489135742
    6. '   
' → logprob: -4.314054489135742
    7. '```' → logprob: -5.564054489135742
    8. ' 
' → logprob: -5.564054489135742
    9. '  
' → logprob: -5.689054489135742
    10. 'n' → logprob: -5.939054489135742

Token 66: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20899462699890137
    2. '    
' → logprob: -1.9589946269989014
    3. 'a' → logprob: -4.2089948654174805
    4. '
' → logprob: -4.8339948654174805
    5. '   
' → logprob: -4.9589948654174805
    6. 'n' → logprob: -5.7089948654174805
    7. ' 
' → logprob: -5.7089948654174805
    8. '  
' → logprob: -5.8339948654174805
    9. 'result' → logprob: -6.2089948654174805
    10. '```' → logprob: -6.9589948654174805

Token 67: ' result' (ID: 1534)
  Prédit: ' result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' result' → logprob: -0.7816372513771057
    2. 'result' (adapté à ' result') → logprob: -1.781637191772461
    3. ' print' → logprob: -2.031637191772461
    4. ' cube' → logprob: -2.156637191772461
    5. '   ' → logprob: -2.781637191772461
    6. 'print' → logprob: -3.281637191772461
    7. 'c' → logprob: -4.781637191772461
    8. 'cube' → logprob: -4.906637191772461
    9. ' c' → logprob: -5.656637191772461
    10. ' resultat' → logprob: -6.406637191772461

Token 68: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.012554984539747238
    2. '=' → logprob: -4.387555122375488
    3. '_' → logprob: -10.262555122375488
    4. ' ' → logprob: -12.137555122375488
    5. 's' → logprob: -13.262555122375488
    6. ' ' → logprob: -13.887555122375488
    7. '.' → logprob: -14.012555122375488
    8. '  ' → logprob: -14.887555122375488
    9. 'a' → logprob: -15.387555122375488
    10. '   ' → logprob: -15.512555122375488

Token 69: ' cube' (ID: 46822)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.026324685662984848
    2. 'a' → logprob: -3.65132474899292
    3. ' ' → logprob: -11.026324272155762
    4. '  ' → logprob: -12.651324272155762
    5. '   ' → logprob: -13.026324272155762
    6. ' cube' → logprob: -13.276324272155762
    7. '	a' → logprob: -14.776324272155762
    8. ' ' → logprob: -15.151324272155762
    9. '    ' → logprob: -16.151325225830078
    10. ' pow' → logprob: -16.276325225830078

Token 70: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3868856430053711
    2. '(a' → logprob: -1.136885643005371
    3. '(
' → logprob: -11.386885643005371
    4. 'a' → logprob: -13.761885643005371
    5. ' (' → logprob: -14.386885643005371
    6. '(

' → logprob: -14.761885643005371
    7. '(s' → logprob: -15.136885643005371
    8. '('' → logprob: -15.261885643005371
    9. 's' → logprob: -16.011886596679688
    10. '(ai' → logprob: -16.136886596679688

Token 71: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.935296834039036e-06
    2. ')
' → logprob: -13.12500286102295
    3. ' )' → logprob: -14.25000286102295
    4. ')

' → logprob: -16.125003814697266
    5. ')
' → logprob: -17.250003814697266
    6. '))' → logprob: -17.375003814697266
    7. ')`' → logprob: -17.625003814697266
    8. '*' → logprob: -17.875003814697266
    9. '   ' → logprob: -18.000003814697266
    10. ' ' → logprob: -18.125003814697266

Token 72: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11120039224624634
    2. '    
' → logprob: -2.4862003326416016
    3. 'print' → logprob: -3.8612003326416016
    4. '
' → logprob: -7.111200332641602
    5. ' print' → logprob: -9.861200332641602
    6. '  
' → logprob: -10.361200332641602
    7. '   
' → logprob: -10.486200332641602
    8. ' 
' → logprob: -11.361200332641602
    9. '```' → logprob: -11.486200332641602
    10. '    
    
' → logprob: -11.986200332641602

Token 73: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3544708788394928
    2. 'print' (adapté à ' print') → logprob: -1.7294708490371704
    3. ' print' → logprob: -2.22947096824646
    4. '    
' → logprob: -4.479470729827881
    5. '
' → logprob: -6.479470729827881
    6. ' 
' → logprob: -8.104471206665039
    7. '```' → logprob: -8.604471206665039
    8. '   
' → logprob: -10.354471206665039
    9. '  
' → logprob: -10.479471206665039
    10. '	print' → logprob: -10.729471206665039

Token 74: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.023261435329914093
    2. '(result' → logprob: -3.773261547088623
    3. '()' → logprob: -12.398261070251465
    4. '(f' → logprob: -12.773261070251465
    5. ' (' → logprob: -12.898261070251465
    6. '("("' → logprob: -13.273261070251465
    7. '('' → logprob: -13.773261070251465
    8. '(res' → logprob: -13.898261070251465
    9. '((' → logprob: -14.648261070251465
    10. '(
' → logprob: -14.773261070251465

Token 75: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -9.088346359931165e-07
    2. ' )' → logprob: -14.125000953674316
    3. '))' → logprob: -17.75
    4. ')`' → logprob: -17.875
    5. ')
' → logprob: -18.0
    6. '')' → logprob: -19.125
    7. '`)' → logprob: -19.375
    8. '()' → logprob: -19.375
    9. '）' → logprob: -19.5
    10. '   ' → logprob: -20.125

Token 76: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.16692323982715607
    2. '
' → logprob: -2.0419232845306396
    3. '#' → logprob: -5.4169230461120605
    4. '\' → logprob: -5.4169230461120605
    5. '_' → logprob: -5.4169230461120605
    6. '

' → logprob: -5.4169230461120605
    7. 'a' → logprob: -6.6669230461120605
    8. '<|end|>' → logprob: -6.7919230461120605
    9. '```' → logprob: -6.7919230461120605
    10. '(' → logprob: -7.6669230461120605

Token 77: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.43682342767715454
    2. ' cube' → logprob: -1.0618233680725098
    3. ' ' → logprob: -6.06182336807251
    4. ' ' → logprob: -6.31182336807251
    5. ' user' → logprob: -6.56182336807251
    6. '_' → logprob: -7.31182336807251
    7. ' def' → logprob: -7.43682336807251
    8. ' space' → logprob: -7.68682336807251
    9. ' _' → logprob: -9.436823844909668
    10. '_get' → logprob: -9.436823844909668

Token 78: '_user' (ID: 7146)
  Prédit: '_user'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_user' → logprob: -0.0026395104359835386
    2. '_' → logprob: -6.002639293670654
    3. ' _' → logprob: -9.002639770507812
    4. '_User' → logprob: -11.877639770507812
    5. 'User' → logprob: -12.127639770507812
    6. '_use' → logprob: -12.127639770507812
    7. '_us' → logprob: -12.252639770507812
    8. '_USER' → logprob: -12.252639770507812
    9. '_u' → logprob: -12.752639770507812
    10. ' User' → logprob: -13.002639770507812

Token 79: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.0004046938265673816
    2. '_' → logprob: -8.000404357910156
    3. ' _' → logprob: -11.000404357910156
    4. '_inputs' → logprob: -11.250404357910156
    5. '_user' → logprob: -11.375404357910156
    6. '_s' → logprob: -11.375404357910156
    7. '_a' → logprob: -12.375404357910156
    8. '_in' → logprob: -13.125404357910156
    9. '```' → logprob: -14.125404357910156
    10. '_token' → logprob: -14.375404357910156

Token 80: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.00019734179659280926
    2. '()' → logprob: -9.125197410583496
    3. ' ():' → logprob: -9.500197410583496
    4. '(' → logprob: -11.625197410583496
    5. '():
' → logprob: -13.000197410583496
    6. ' ()' → logprob: -13.750197410583496
    7. '(prompt' → logprob: -14.875197410583496
    8. '()>' → logprob: -15.875197410583496
    9. '()(' → logprob: -16.00019645690918
    10. ':' → logprob: -16.37519645690918

Token 81: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.021316934376955032
    2. '():' → logprob: -4.146317005157471
    3. '()' → logprob: -5.521317005157471
    4. '(' → logprob: -7.521317005157471
    5. ':' → logprob: -8.396316528320312
    6. '    
' → logprob: -9.021316528320312
    7. '():
' → logprob: -9.521316528320312
    8. ' ' → logprob: -10.021316528320312
    9. '
' → logprob: -10.021316528320312
    10. '(
' → logprob: -10.646316528320312

Token 82: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.035714879631996155
    2. ' try' → logprob: -3.910714864730835
    3. '    
' → logprob: -5.285715103149414
    4. ' while' → logprob: -5.410715103149414
    5. 'try' → logprob: -5.660715103149414
    6. ' user' → logprob: -7.785715103149414
    7. ' return' → logprob: -7.910715103149414
    8. '    ' → logprob: -8.285715103149414
    9. 'while' → logprob: -8.285715103149414
    10. ' input' → logprob: -9.285715103149414

Token 83: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03686760365962982
    2. '"' → logprob: -3.911867618560791
    3. '"""' → logprob: -4.286867618560791
    4. '"""
' → logprob: -6.286867618560791
    5. '""' → logprob: -8.786867141723633
    6. '  ' → logprob: -9.286867141723633
    7. '"S' → logprob: -9.786867141723633
    8. ' ' → logprob: -10.286867141723633
    9. 's' → logprob: -10.536867141723633
    10. 'str' → logprob: -10.661867141723633

Token 84: ' Dem' (ID: 9458)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00015050210640765727
    2. '    ' → logprob: -9.250150680541992
    3. '  ' → logprob: -10.750150680541992
    4. '    
' → logprob: -11.500150680541992
    5. ' ' → logprob: -11.875150680541992
    6. ' """' → logprob: -12.000150680541992
    7. '#' → logprob: -13.500150680541992
    8. '"""' → logprob: -13.500150680541992
    9. '   ' → logprob: -13.625150680541992
    10. ' ' → logprob: -13.875150680541992

Token 85: 'ande' (ID: 4102)
  Prédit: 'ande'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ande' → logprob: -0.06540852785110474
    2. 'e' → logprob: -3.81540846824646
    3. '   ' → logprob: -3.81540846824646
    4. 'ander' → logprob: -5.065408706665039
    5. 'andez' → logprob: -5.190408706665039
    6. 'an' → logprob: -5.565408706665039
    7. 'and' → logprob: -6.315408706665039
    8. 'a' → logprob: -7.690408706665039
    9. 'ane' → logprob: -7.940408706665039
    10. 'def' → logprob: -9.315408706665039

Token 86: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.04861791059374809
    2. ' ' → logprob: -3.4236178398132324
    3. '   ' → logprob: -4.673617839813232
    4. 'à' → logprob: -5.923617839813232
    5. '  ' → logprob: -6.673617839813232
    6. ' a' → logprob: -7.423617839813232
    7. ' un' → logprob: -8.04861831665039
    8. ''à' → logprob: -8.67361831665039
    9. '    ' → logprob: -8.92361831665039
    10. '_' → logprob: -9.54861831665039

Token 87: ' l' (ID: 305)
  Prédit: ' l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.09532370418310165
    2. 'l' → logprob: -2.4703238010406494
    3. ' ' → logprob: -5.22032356262207
    4. '	l' → logprob: -8.09532356262207
    5. ' user' → logprob: -8.84532356262207
    6. ' utilisateur' → logprob: -8.97032356262207
    7. ' un' → logprob: -9.34532356262207
    8. ' ' → logprob: -9.34532356262207
    9. '   ' → logprob: -9.47032356262207
    10. ' int' → logprob: -9.97032356262207

Token 88: ''utilisateur' (ID: 140803)
  Prédit: ''utilisateur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''utilisateur' → logprob: -0.020336788147687912
    2. ''' → logprob: -4.020336627960205
    3. ''ent' → logprob: -7.395336627960205
    4. '’utilisateur' → logprob: -7.895336627960205
    5. ''util' → logprob: -8.020337104797363
    6. 'e' → logprob: -8.895337104797363
    7. 'a' → logprob: -9.020337104797363
    8. ' utilisateur' → logprob: -9.145337104797363
    9. ''entrée' → logprob: -9.145337104797363
    10. ' '' → logprob: -9.270337104797363

Token 89: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.03146658465266228
    2. ' à' → logprob: -4.781466484069824
    3. ' ' → logprob: -4.906466484069824
    4. ' de' → logprob: -5.031466484069824
    5. 'd' → logprob: -5.406466484069824
    6. '   ' → logprob: -6.156466484069824
    7. '  ' → logprob: -6.906466484069824
    8. ' ' → logprob: -8.281466484069824
    9. 'de' → logprob: -9.031466484069824
    10. '    ' → logprob: -9.281466484069824

Token 90: ''' (ID: 6)
  Prédit: '''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.030043551698327065
    2. ''entrée' → logprob: -4.405043601989746
    3. ''ent' → logprob: -5.155043601989746
    4. 'e' → logprob: -5.155043601989746
    5. ' entrer' → logprob: -5.530043601989746
    6. ' '' → logprob: -7.905043601989746
    7. '   ' → logprob: -8.030043601989746
    8. 'entr' → logprob: -8.405043601989746
    9. ' saisir' → logprob: -8.405043601989746
    10. ' entr' → logprob: -9.030043601989746

Token 91: 'entr' (ID: 12792)
  Prédit: 'entr'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'entr' → logprob: -0.023024633526802063
    2. ''' → logprob: -4.023024559020996
    3. ' entrer' → logprob: -6.398024559020996
    4. 'entrée' → logprob: -6.648024559020996
    5. ' entr' → logprob: -7.648024559020996
    6. 'ent' → logprob: -7.773024559020996
    7. 'e' → logprob: -9.023024559020996
    8. 'enter' → logprob: -9.023024559020996
    9. ''ent' → logprob: -9.273024559020996
    10. ' ' → logprob: -9.398024559020996

Token 92: 'er' (ID: 259)
  Prédit: 'er'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.1009165495634079
    2. 't' → logprob: -3.225916624069214
    3. 'ter' → logprob: -3.225916624069214
    4. 'trer' → logprob: -4.600916385650635
    5. 'e' → logprob: -5.475916385650635
    6. 'tre' → logprob: -7.100916385650635
    7. 're' → logprob: -7.725916385650635
    8. 'te' → logprob: -7.975916385650635
    9. ' er' → logprob: -8.725916862487793
    10. 'tr' → logprob: -8.975916862487793

Token 93: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.0010247125755995512
    2. 'un' → logprob: -7.2510247230529785
    3. ' ' → logprob: -9.25102424621582
    4. ' a' → logprob: -9.50102424621582
    5. ''un' → logprob: -9.87602424621582
    6. ' an' → logprob: -10.37602424621582
    7. 'a' → logprob: -11.00102424621582
    8. 'n' → logprob: -11.12602424621582
    9. ' ' → logprob: -11.37602424621582
    10. ' une' → logprob: -12.50102424621582

Token 94: ' nombre' (ID: 9733)
  Prédit: ' entier'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' entier' → logprob: -0.016689451411366463
    2. ' ' → logprob: -4.766689300537109
    3. 'ent' → logprob: -5.516689300537109
    4. ' nombre' → logprob: -5.766689300537109
    5. 'e' → logprob: -8.14168930053711
    6. ' ent' → logprob: -8.76668930053711
    7. 'n' → logprob: -9.51668930053711
    8. ' entière' → logprob: -9.51668930053711
    9. ' ' → logprob: -9.89168930053711
    10. 'nombre' → logprob: -10.01668930053711

Token 95: ' entier' (ID: 80473)
  Prédit: ' entier'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' entier' → logprob: -0.006402950268238783
    2. '   ' → logprob: -6.256402969360352
    3. ' ent' → logprob: -6.506402969360352
    4. 'ent' → logprob: -6.506402969360352
    5. ' 
' → logprob: -7.756402969360352
    6. ' ' → logprob: -8.006402969360352
    7. ' entière' → logprob: -8.381402969360352
    8. 'e' → logprob: -9.256402969360352
    9. '    
' → logprob: -9.381402969360352
    10. ' ' → logprob: -9.756402969360352

Token 96: ' via' (ID: 4493)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012859120033681393
    2. ' :' → logprob: -4.887859344482422
    3. ':' → logprob: -5.762859344482422
    4. ' ' → logprob: -7.512859344482422
    5. '):' → logprob: -7.637859344482422
    6. '():' → logprob: -7.762859344482422
    7. ')' → logprob: -8.762859344482422
    8. '    
' → logprob: -9.387859344482422
    9. '  ' → logprob: -9.637859344482422
    10. 'def' → logprob: -9.762859344482422

Token 97: ' la' (ID: 557)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.09772266447544098
    2. ' l' → logprob: -2.7227227687835693
    3. 'input' → logprob: -3.7227227687835693
    4. 'l' → logprob: -6.34772253036499
    5. ' une' → logprob: -7.97272253036499
    6. ' la' → logprob: -8.222723007202148
    7. '   ' → logprob: -8.472723007202148
    8. '(input' → logprob: -8.722723007202148
    9. ' ' → logprob: -8.847723007202148
    10. '=input' → logprob: -9.597723007202148

Token 98: ' fonction' (ID: 17610)
  Prédit: ' console'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' console' → logprob: -0.9107992649078369
    2. 'console' → logprob: -1.785799264907837
    3. 's' → logprob: -1.910799264907837
    4. 'fonction' → logprob: -2.410799264907837
    5. ' fonction' → logprob: -2.660799264907837
    6. ' sais' → logprob: -3.035799264907837
    7. ' input' → logprob: -3.285799264907837
    8. 'entrée' → logprob: -3.910799264907837
    9. 'input' → logprob: -5.160799026489258
    10. ' ' → logprob: -5.160799026489258

Token 99: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.0016181691316887736
    2. 'input' → logprob: -6.501618385314941
    3. ' ' → logprob: -10.001618385314941
    4. ' `' → logprob: -10.251618385314941
    5. '(input' → logprob: -11.251618385314941
    6. '=input' → logprob: -11.876618385314941
    7. ' ' → logprob: -12.001618385314941
    8. ' built' → logprob: -12.501618385314941
    9. '	input' → logprob: -13.501618385314941
    10. ' builtin' → logprob: -14.126618385314941

Token 100: '.

' (ID: 364)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.17267043888568878
    2. '()' → logprob: -2.172670364379883
    3. '()
' → logprob: -3.922670364379883
    4. 'def' → logprob: -4.922670364379883
    5. '(' → logprob: -5.422670364379883
    6. ' ' → logprob: -5.797670364379883
    7. '(
' → logprob: -6.172670364379883
    8. '("' → logprob: -6.547670364379883
    9. ',' → logprob: -7.422670364379883
    10. '
' → logprob: -7.422670364379883

Token 101: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0289306677877903
    2. ')' → logprob: -4.1539306640625
    3. '"""' → logprob: -4.9039306640625
    4. '"' → logprob: -5.9039306640625
    5. ' )' → logprob: -7.4039306640625
    6. ' ' → logprob: -7.7789306640625
    7. '    
' → logprob: -7.9039306640625
    8. '"""
' → logprob: -7.9039306640625
    9. '    ' → logprob: -8.1539306640625
    10. ' 
' → logprob: -8.6539306640625

Token 102: ' Returns' (ID: 9609)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0012561841867864132
    2. ' ' → logprob: -8.376255989074707
    3. '"""' → logprob: -8.501255989074707
    4. ')' → logprob: -8.751255989074707
    5. '    
' → logprob: -9.376255989074707
    6. '    ' → logprob: -9.501255989074707
    7. ' try' → logprob: -9.751255989074707
    8. '
' → logprob: -9.751255989074707
    9. 'try' → logprob: -9.876255989074707
    10. ' while' → logprob: -9.876255989074707

Token 103: ':
' (ID: 734)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.35275357961654663
    2. ' :' → logprob: -2.3527536392211914
    3. ' int' → logprob: -2.7277536392211914
    4. ' a' → logprob: -2.8527536392211914
    5. ':' → logprob: -3.8527536392211914
    6. '    ' → logprob: -3.9777536392211914
    7. ' )' → logprob: -4.602753639221191
    8. ' ' → logprob: -4.977753639221191
    9. 'int' → logprob: -4.977753639221191
    10. ' ):' → logprob: -5.852753639221191

Token 104: '       ' (ID: 309)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.536564826965332
    2. '   ' → logprob: -0.911564826965332
    3. 'int' → logprob: -4.411564826965332
    4. '    ' → logprob: -7.161564826965332
    5. ' an' → logprob: -8.661564826965332
    6. ' n' → logprob: -9.911564826965332
    7. ' entier' → logprob: -10.161564826965332
    8. ' ent' → logprob: -10.661564826965332
    9. ' ' → logprob: -10.661564826965332
    10. ' a' → logprob: -10.661564826965332

Token 105: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' (adapté à ' int') → logprob: -0.25197237730026245
    2. ' int' → logprob: -1.5019724369049072
    3. '   ' → logprob: -10.126972198486328
    4. '(int' → logprob: -14.501972198486328
    5. ' entier' → logprob: -15.126972198486328
    6. '	int' → logprob: -15.251972198486328
    7. ' 
' → logprob: -15.251972198486328
    8. ' str' → logprob: -15.376972198486328
    9. '    ' → logprob: -15.376972198486328
    10. 'ent' → logprob: -15.751972198486328

Token 106: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.04643319174647331
    2. '):' → logprob: -3.546433210372925
    3. ' :' → logprob: -4.421432971954346
    4. ')' → logprob: -6.171432971954346
    5. ' ):' → logprob: -7.171432971954346
    6. '<|end|>' → logprob: -7.671432971954346
    7. ':
' → logprob: -8.796433448791504
    8. '
' → logprob: -9.171433448791504
    9. '   ' → logprob: -9.296433448791504
    10. '():' → logprob: -9.421433448791504

Token 107: ' Le' (ID: 2018)
  Prédit: ' L'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' L' → logprob: -0.02344416081905365
    2. ' l' → logprob: -4.523444175720215
    3. 'L' → logprob: -5.148444175720215
    4. ' Ent' → logprob: -6.773444175720215
    5. ' La' → logprob: -7.023444175720215
    6. '   ' → logprob: -7.023444175720215
    7. ' Un' → logprob: -7.148444175720215
    8. ' Le' → logprob: -7.398444175720215
    9. ' un' → logprob: -7.648444175720215
    10. ' The' → logprob: -7.898444175720215

Token 108: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.03869345784187317
    2. ' entier' → logprob: -3.913693428039551
    3. 'nombre' → logprob: -4.413693428039551
    4. 'ent' → logprob: -5.288693428039551
    5. ' ' → logprob: -7.413693428039551
    6. ' numéro' → logprob: -9.78869342803955
    7. ' number' → logprob: -10.28869342803955
    8. 'n' → logprob: -10.53869342803955
    9. '   ' → logprob: -10.78869342803955
    10. ' valeur' → logprob: -10.78869342803955

Token 109: ' entier' (ID: 80473)
  Prédit: ' entr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' entr' → logprob: -0.5909250378608704
    2. ' entier' → logprob: -1.2159249782562256
    3. ' ' → logprob: -2.7159249782562256
    4. ' sa' → logprob: -2.9659249782562256
    5. 'ent' → logprob: -4.340925216674805
    6. 'entr' → logprob: -4.840925216674805
    7. '<|end|>' → logprob: -5.590925216674805
    8. 'entrée' → logprob: -6.090925216674805
    9. 'entered' → logprob: -7.340925216674805
    10. ' demandé' → logprob: -7.340925216674805

Token 110: ' sa' (ID: 880)
  Prédit: ' sa'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sa' → logprob: -0.14774282276630402
    2. ' entr' → logprob: -2.022742748260498
    3. 'entr' → logprob: -5.522742748260498
    4. ' ' → logprob: -8.147743225097656
    5. '   ' → logprob: -8.522743225097656
    6. ' sais' → logprob: -8.522743225097656
    7. ' demandé' → logprob: -9.397743225097656
    8. 'sa' → logprob: -9.647743225097656
    9. '"""' → logprob: -10.397743225097656
    10. 'Entr' → logprob: -10.522743225097656

Token 111: 'isi' (ID: 4496)
  Prédit: 'isi'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'isi' → logprob: -5.300083648762666e-05
    2. 'si' → logprob: -11.000053405761719
    3. 'i' → logprob: -11.125053405761719
    4. 'isis' → logprob: -11.250053405761719
    5. 'aisi' → logprob: -12.375053405761719
    6. 'issi' → logprob: -13.375053405761719
    7. ' isi' → logprob: -14.125053405761719
    8. 'is' → logprob: -14.875053405761719
    9. 'ISI' → logprob: -15.000053405761719
    10. 'Isi' → logprob: -15.125053405761719

Token 112: ' par' (ID: 686)
  Prédit: ' par'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' par' → logprob: -1.4355039596557617
    2. 'par' → logprob: -2.0605039596557617
    3. ' entr' → logprob: -2.1855039596557617
    4. '   ' → logprob: -2.3105039596557617
    5. '.' → logprob: -2.6855039596557617
    6. '"""' → logprob: -2.8105039596557617
    7. '
' → logprob: -3.0605039596557617
    8. 'entr' → logprob: -3.1855039596557617
    9. ' ' → logprob: -3.3105039596557617
    10. '"""
' → logprob: -3.4355039596557617

Token 113: ' l' (ID: 305)
  Prédit: ' l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.16038548946380615
    2. 'l' → logprob: -1.9103854894638062
    3. ' ' → logprob: -9.910385131835938
    4. ' ' → logprob: -10.160385131835938
    5. '	l' → logprob: -10.160385131835938
    6. '   ' → logprob: -11.285385131835938
    7. ' utilisateur' → logprob: -11.535385131835938
    8. ''utilisateur' → logprob: -12.910385131835938
    9. 'util' → logprob: -13.285385131835938
    10. '  ' → logprob: -13.660385131835938

Token 114: ''utilisateur' (ID: 140803)
  Prédit: ''utilisateur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''utilisateur' → logprob: -0.019818957895040512
    2. ''' → logprob: -4.0198187828063965
    3. ''us' → logprob: -7.0198187828063965
    4. ''util' → logprob: -8.019819259643555
    5. '’utilisateur' → logprob: -8.644819259643555
    6. ''user' → logprob: -9.394819259643555
    7. 'a' → logprob: -9.394819259643555
    8. 'u' → logprob: -10.019819259643555
    9. ''u' → logprob: -10.769819259643555
    10. ''a' → logprob: -11.144819259643555

Token 115: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5688989162445068
    2. '
' → logprob: -1.0688989162445068
    3. '    
' → logprob: -2.943898916244507
    4. ')' → logprob: -3.818898916244507
    5. ' 
' → logprob: -5.693899154663086
    6. '   
' → logprob: -5.943899154663086
    7. '\n' → logprob: -5.943899154663086
    8. '  
' → logprob: -6.193899154663086
    9. '    ' → logprob: -6.943899154663086
    10. ')
' → logprob: -7.568899154663086

Token 116: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08777456730604172
    2. ' 
' → logprob: -3.7127745151519775
    3. '    
' → logprob: -3.8377745151519775
    4. '"""
' → logprob: -4.337774753570557
    5. '"""' → logprob: -4.712774753570557
    6. '"' → logprob: -5.337774753570557
    7. ' """
' → logprob: -5.837774753570557
    8. '
' → logprob: -6.337774753570557
    9. '  
' → logprob: -6.462774753570557
    10. '    ' → logprob: -6.837774753570557

Token 117: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13378779590129852
    2. ' 
' → logprob: -3.0087878704071045
    3. '
' → logprob: -3.2587878704071045
    4. '    
' → logprob: -4.258787631988525
    5. '"""
' (adapté à ' """
') → logprob: -4.883787631988525
    6. ' """
' → logprob: -5.133787631988525
    7. '"""' → logprob: -5.508787631988525
    8. '   
' → logprob: -6.633787631988525
    9. '     
' → logprob: -6.633787631988525
    10. ')' → logprob: -7.258787631988525

Token 118: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.002243035240098834
    2. 'try' → logprob: -7.2522430419921875
    3. ' try' → logprob: -7.5022430419921875
    4. '    
' → logprob: -7.7522430419921875
    5. ' while' → logprob: -8.002243041992188
    6. 'while' → logprob: -9.502243041992188
    7. ' 
' → logprob: -10.752243041992188
    8. '    ' → logprob: -10.877243041992188
    9. '
' → logprob: -11.002243041992188
    10. 'return' → logprob: -11.252243041992188

Token 119: ' #' (ID: 1069)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -1.003360390663147
    2. 'try' → logprob: -1.378360390663147
    3. 'return' → logprob: -1.503360390663147
    4. 'user' → logprob: -2.2533602714538574
    5. 'value' → logprob: -3.6283602714538574
    6. '   ' → logprob: -4.253360271453857
    7. 'val' → logprob: -5.503360271453857
    8. 'n' → logprob: -6.378360271453857
    9. ' while' → logprob: -6.378360271453857
    10. 'a' → logprob: -6.628360271453857

Token 120: ' Util' (ID: 13564)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.32857516407966614
    2. ' while' → logprob: -1.3285751342773438
    3. 'user' → logprob: -5.078575134277344
    4. 'value' → logprob: -6.203575134277344
    5. '   ' → logprob: -6.328575134277344
    6. ' user' → logprob: -6.578575134277344
    7. 'return' → logprob: -6.703575134277344
    8. 'try' → logprob: -6.953575134277344
    9. 'val' → logprob: -7.703575134277344
    10. ' value' → logprob: -7.953575134277344

Token 121: 'isation' (ID: 6993)
  Prédit: 'iser'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iser' → logprob: -0.01702737808227539
    2. 'isateur' → logprob: -4.142027378082275
    3. 'ise' → logprob: -7.767027378082275
    4. 'is' → logprob: -8.142026901245117
    5. 'er' → logprob: -8.767026901245117
    6. '   ' → logprob: -10.142026901245117
    7. 'isation' → logprob: -10.517026901245117
    8. 'izer' → logprob: -11.142026901245117
    9. 'isez' → logprob: -12.142026901245117
    10. 'user' → logprob: -12.267026901245117

Token 122: ' de' (ID: 334)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.18197260797023773
    2. 'input' → logprob: -2.6819725036621094
    3. '   ' → logprob: -2.8069725036621094
    4. '(
' → logprob: -4.306972503662109
    5. ' input' → logprob: -4.806972503662109
    6. '()' → logprob: -5.681972503662109
    7. ' de' → logprob: -5.681972503662109
    8. 'int' → logprob: -5.681972503662109
    9. '(input' → logprob: -6.431972503662109
    10. 'de' → logprob: -6.431972503662109

Token 123: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.14109580218791962
    2. ' int' → logprob: -2.3910958766937256
    3. 'input' → logprob: -3.3910958766937256
    4. 'int' → logprob: -5.1410956382751465
    5. ' ' → logprob: -8.141096115112305
    6. ' l' → logprob: -8.891096115112305
    7. ' la' → logprob: -10.266096115112305
    8. ' in' → logprob: -10.766096115112305
    9. ' ' → logprob: -11.516096115112305
    10. 'l' → logprob: -11.641096115112305

Token 124: '()' (ID: 416)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.040669944137334824
    2. '("' → logprob: -3.5406699180603027
    3. '()' → logprob: -5.790669918060303
    4. '(
' → logprob: -5.915669918060303
    5. '("")' → logprob: -6.165669918060303
    6. '("("' → logprob: -6.290669918060303
    7. '('' → logprob: -7.165669918060303
    8. '(""' → logprob: -9.290670394897461
    9. '(">' → logprob: -9.415670394897461
    10. '("""' → logprob: -9.790670394897461

Token 125: ' pour' (ID: 1930)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07924192398786545
    2. '()' → logprob: -3.454241991043091
    3. '("' → logprob: -4.079241752624512
    4. '(
' → logprob: -4.204241752624512
    5. '("")' → logprob: -4.704241752624512
    6. 'user' → logprob: -7.454241752624512
    7. '('' → logprob: -7.454241752624512
    8. '   ' → logprob: -7.454241752624512
    9. '("("' → logprob: -8.079241752624512
    10. ',' → logprob: -8.579241752624512

Token 126: ' lire' (ID: 46082)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.2097427248954773
    2. ' saisir' → logprob: -2.959742784500122
    3. 'input' → logprob: -3.084742784500122
    4. ' int' → logprob: -3.084742784500122
    5. ' entr' → logprob: -4.584742546081543
    6. ' entrer' → logprob: -4.834742546081543
    7. ' récupérer' → logprob: -5.209742546081543
    8. ' return' → logprob: -5.459742546081543
    9. 'int' → logprob: -5.959742546081543
    10. ' ' → logprob: -6.084742546081543

Token 127: ' une' (ID: 2463)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.4203741252422333
    2. '(' → logprob: -1.9203741550445557
    3. '()' → logprob: -3.0453741550445557
    4. '("' → logprob: -3.0453741550445557
    5. ' ' → logprob: -3.1703741550445557
    6. ' (' → logprob: -3.7953741550445557
    7. 'l' → logprob: -5.295373916625977
    8. '  ' → logprob: -5.420373916625977
    9. '"' → logprob: -5.545373916625977
    10. ' une' → logprob: -5.670373916625977

Token 128: ' chaîne' (ID: 89288)
  Prédit: ' chaîne'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaîne' → logprob: -0.34383946657180786
    2. ' valeur' → logprob: -1.843839406967163
    3. ' entrée' → logprob: -3.218839406967163
    4. ' ' → logprob: -3.468839406967163
    5. 'entrée' → logprob: -3.468839406967163
    6. ' chaine' → logprob: -4.343839645385742
    7. ' ligne' → logprob: -5.343839645385742
    8. 'chaine' → logprob: -6.218839645385742
    9. 'val' → logprob: -6.343839645385742
    10. 's' → logprob: -6.593839645385742

Token 129: ' depuis' (ID: 16277)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.15455198287963867
    2. '(' → logprob: -3.2795519828796387
    3. ' de' → logprob: -3.4045519828796387
    4. '(
' → logprob: -3.5295519828796387
    5. ' (' → logprob: -5.029551982879639
    6. '("")' → logprob: -5.529551982879639
    7. '   ' → logprob: -5.654551982879639
    8. ',' → logprob: -5.654551982879639
    9. '("' → logprob: -5.779551982879639
    10. ' et' → logprob: -5.904551982879639

Token 130: ' le' (ID: 505)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.06474559009075165
    2. 'l' → logprob: -2.8147456645965576
    3. ' ' → logprob: -6.6897454261779785
    4. '	l' → logprob: -7.6897454261779785
    5. ' input' → logprob: -7.8147454261779785
    6. ' la' → logprob: -8.189745903015137
    7. '   ' → logprob: -9.189745903015137
    8. 'input' → logprob: -9.314745903015137
    9. ' utilisateur' → logprob: -10.439745903015137
    10. ' le' → logprob: -10.814745903015137

Token 131: ' terminal' (ID: 21801)
  Prédit: ' clavier'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' clavier' → logprob: -0.12335751950740814
    2. 'cl' → logprob: -2.9983575344085693
    3. ' terminal' → logprob: -3.8733575344085693
    4. 'console' → logprob: -4.62335729598999
    5. 'terminal' → logprob: -4.74835729598999
    6. ' ' → logprob: -4.87335729598999
    7. ' console' → logprob: -5.37335729598999
    8. ' utilisateur' → logprob: -5.62335729598999
    9. '   ' → logprob: -5.87335729598999
    10. 'user' → logprob: -6.87335729598999

Token 132: ',
' (ID: 412)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11909861117601395
    2. '(' → logprob: -2.369098663330078
    3. '    
' → logprob: -5.244098663330078
    4. '()' → logprob: -5.494098663330078
    5. '(
' → logprob: -5.744098663330078
    6. '    ' → logprob: -6.619098663330078
    7. ',' → logprob: -7.244098663330078
    8. '("\' → logprob: -7.244098663330078
    9. '("' → logprob: -7.369098663330078
    10. 'n' → logprob: -7.744098663330078

Token 133: '   ' (ID: 271)
  Prédit: ' puis'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' puis' → logprob: -0.5848766565322876
    2. ' convert' → logprob: -1.2098766565322876
    3. ' ' → logprob: -2.709876537322998
    4. ' convertir' → logprob: -3.209876537322998
    5. 'convert' → logprob: -4.709876537322998
    6. '   ' → logprob: -4.834876537322998
    7. '    ' → logprob: -5.834876537322998
    8. ' a' → logprob: -5.959876537322998
    9. ' return' → logprob: -6.209876537322998
    10. ' cast' → logprob: -6.334876537322998

Token 134: ' #' (ID: 1069)
  Prédit: ' puis'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' puis' → logprob: -0.24939149618148804
    2. '   ' → logprob: -1.8743915557861328
    3. ' user' → logprob: -4.749391555786133
    4. ' return' → logprob: -4.874391555786133
    5. 'user' → logprob: -5.624391555786133
    6. 'val' → logprob: -5.874391555786133
    7. ' a' → logprob: -5.874391555786133
    8. ' ' → logprob: -5.874391555786133
    9. 'try' → logprob: -5.999391555786133
    10. 'return' → logprob: -5.999391555786133

Token 135: ' puis' (ID: 18766)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.084999680519104
    2. ' while' → logprob: -2.0849995613098145
    3. 'try' → logprob: -2.0849995613098145
    4. ' try' → logprob: -2.3349995613098145
    5. 'while' → logprob: -2.7099995613098145
    6. 'user' → logprob: -2.8349995613098145
    7. ' user' → logprob: -3.2099995613098145
    8. 'value' → logprob: -3.2099995613098145
    9. 'return' → logprob: -3.5849995613098145
    10. ' return' → logprob: -3.8349995613098145

Token 136: ' conversion' (ID: 22165)
  Prédit: ' convertir'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' convertir' → logprob: -0.22084489464759827
    2. ' int' → logprob: -1.8458448648452759
    3. 'int' → logprob: -3.3458449840545654
    4. ' convert' → logprob: -6.220844745635986
    5. ' conversion' → logprob: -7.345844745635986
    6. '   ' → logprob: -7.470844745635986
    7. 'convert' → logprob: -7.470844745635986
    8. ' la' → logprob: -8.095845222473145
    9. ' return' → logprob: -8.595845222473145
    10. ' converting' → logprob: -8.845845222473145

Token 137: ' explic' (ID: 20781)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.610048770904541
    2. ' en' → logprob: -0.985048770904541
    3. ' ' → logprob: -3.110048770904541
    4. 'de' → logprob: -4.860048770904541
    5. '   ' → logprob: -5.485048770904541
    6. ' (' → logprob: -5.735048770904541
    7. '()' → logprob: -5.860048770904541
    8. ' à' → logprob: -5.860048770904541
    9. ' a' → logprob: -5.985048770904541
    10. ' int' → logprob: -6.360048770904541

Token 138: 'ite' (ID: 651)
  Prédit: 'ite'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ite' → logprob: -0.0009431460639461875
    2. 'i' → logprob: -7.875943183898926
    3. 'it' → logprob: -8.250943183898926
    4. ' ite' → logprob: -8.750943183898926
    5. 'ic' → logprob: -9.625943183898926
    6. '```' → logprob: -11.750943183898926
    7. 'itamente' → logprob: -11.875943183898926
    8. '
' → logprob: -12.125943183898926
    9. '   ' → logprob: -12.375943183898926
    10. 'itte' → logprob: -12.375943183898926

Token 139: ' de' (ID: 334)
  Prédit: ' en'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.2796292304992676
    2. ' ' → logprob: -1.5296292304992676
    3. '(' → logprob: -4.529629230499268
    4. '   ' → logprob: -5.529629230499268
    5. ' int' → logprob: -6.529629230499268
    6. ' (' → logprob: -6.529629230499268
    7. ' a' → logprob: -6.529629230499268
    8. '()' → logprob: -6.654629230499268
    9. ' de' → logprob: -6.779629230499268
    10. ' to' → logprob: -6.779629230499268

Token 140: ' la' (ID: 557)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.8967522382736206
    2. ' int' → logprob: -1.2717522382736206
    3. ' ' → logprob: -1.5217522382736206
    4. 'int' → logprob: -2.89675235748291
    5. ' str' → logprob: -4.14675235748291
    6. ' input' → logprob: -4.89675235748291
    7. 'l' → logprob: -5.02175235748291
    8. ' ' → logprob: -6.02175235748291
    9. 'str' → logprob: -6.14675235748291
    10. ' la' → logprob: -6.52175235748291

Token 141: ' chaîne' (ID: 89288)
  Prédit: ' chaîne'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaîne' → logprob: -0.030849432572722435
    2. ' valeur' → logprob: -4.655849456787109
    3. ' chaine' → logprob: -5.155849456787109
    4. 'entrée' → logprob: -5.280849456787109
    5. 'chaine' → logprob: -5.405849456787109
    6. ' ' → logprob: -6.780849456787109
    7. ' sais' → logprob: -6.780849456787109
    8. ' entrée' → logprob: -7.155849456787109
    9. 'int' → logprob: -7.280849456787109
    10. 's' → logprob: -7.405849456787109

Token 142: ' en' (ID: 469)
  Prédit: ' en'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.0036123052705079317
    2. 'en' → logprob: -6.253612518310547
    3. ' ' → logprob: -6.503612518310547
    4. ' a' → logprob: -9.503612518310547
    5. ' to' → logprob: -10.503612518310547
    6. ' in' → logprob: -10.878612518310547
    7. ' into' → logprob: -11.628612518310547
    8. ' à' → logprob: -11.628612518310547
    9. '   ' → logprob: -12.128612518310547
    10. ' via' → logprob: -12.503612518310547

Token 143: ' entier' (ID: 80473)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.009713485836982727
    2. 'int' → logprob: -5.384713649749756
    3. ' ' → logprob: -6.259713649749756
    4. ' entier' → logprob: -6.384713649749756
    5. ' un' → logprob: -6.759713649749756
    6. ' ' → logprob: -9.009713172912598
    7. ' integer' → logprob: -9.259713172912598
    8. ' ent' → logprob: -10.509713172912598
    9. 'ent' → logprob: -10.509713172912598
    10. '=int' → logprob: -11.634713172912598

Token 144: ' avec' (ID: 3937)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.010003386065363884
    2. '    
' → logprob: -5.760003566741943
    3. '(' → logprob: -6.260003566741943
    4. '
' → logprob: -7.510003566741943
    5. '(
' → logprob: -7.510003566741943
    6. '    ' → logprob: -7.510003566741943
    7. 'a' → logprob: -7.510003566741943
    8. ',' → logprob: -7.635003566741943
    9. ')' → logprob: -7.635003566741943
    10. ' ' → logprob: -8.010003089904785

Token 145: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.16026708483695984
    2. 'int' → logprob: -1.9102671146392822
    3. '=int' → logprob: -11.535266876220703
    4. '<int' → logprob: -12.035266876220703
    5. '```' → logprob: -12.285266876220703
    6. '	int' → logprob: -12.535266876220703
    7. '(int' → logprob: -12.660266876220703
    8. '   ' → logprob: -13.160266876220703
    9. ' intval' → logprob: -13.160266876220703
    10. ' ' → logprob: -13.410266876220703

Token 146: '().
' (ID: 58434)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03429662063717842
    2. '(
' → logprob: -3.5342965126037598
    3. '   ' → logprob: -6.28429651260376
    4. '()' → logprob: -7.15929651260376
    5. '("")' → logprob: -7.15929651260376
    6. '('' → logprob: -7.90929651260376
    7. '("' → logprob: -7.90929651260376
    8. '(input' → logprob: -8.784296989440918
    9. '("("' → logprob: -9.534296989440918
    10. '(a' → logprob: -10.534296989440918

Token 147: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.013135059736669064
    2. '    
' → logprob: -4.763134956359863
    3. '
' → logprob: -6.638134956359863
    4. ' return' → logprob: -6.888134956359863
    5. 'return' → logprob: -7.388134956359863
    6. ' 
' → logprob: -7.513134956359863
    7. '  
' → logprob: -7.888134956359863
    8. '   
' → logprob: -8.263134956359863
    9. '       ' → logprob: -9.638134956359863
    10. '    ' → logprob: -9.888134956359863

Token 148: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5016770362854004
    2. 'return' (adapté à ' return') → logprob: -1.6266770362854004
    3. ' return' → logprob: -2.3766770362854004
    4. 'user' → logprob: -2.7516770362854004
    5. ' user' → logprob: -3.7516770362854004
    6. 'value' → logprob: -4.8766770362854
    7. ' value' → logprob: -6.1266770362854
    8. 'try' → logprob: -6.3766770362854
    9. '    
' → logprob: -7.0016770362854
    10. 'while' → logprob: -7.3766770362854

Token 149: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.00047869363334029913
    2. 'int' → logprob: -8.250478744506836
    3. ' ' → logprob: -8.500478744506836
    4. ' ' → logprob: -11.375478744506836
    5. '	int' → logprob: -14.250478744506836
    6. '(int' → logprob: -14.375478744506836
    7. ' input' → logprob: -14.625478744506836
    8. '  ' → logprob: -14.750478744506836
    9. ' in' → logprob: -15.500478744506836
    10. '<int' → logprob: -16.750478744506836

Token 150: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.5759543180465698
    2. '(' → logprob: -0.8259543180465698
    3. 'input' → logprob: -12.07595443725586
    4. '(
' → logprob: -12.32595443725586
    5. ' (' → logprob: -12.57595443725586
    6. '()' → logprob: -15.32595443725586
    7. '('' → logprob: -15.32595443725586
    8. '(

' → logprob: -15.32595443725586
    9. '(in' → logprob: -16.07595443725586
    10. '("' → logprob: -16.32595443725586

Token 151: '("' (ID: 568)
  Prédit: '("("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("("' → logprob: -0.31105393171310425
    2. '(' → logprob: -2.186053991317749
    3. '("' → logprob: -2.686053991317749
    4. '()' → logprob: -2.811053991317749
    5. '('' → logprob: -4.18605375289917
    6. '())' → logprob: -4.68605375289917
    7. '("(' → logprob: -7.06105375289917
    8. '(">' → logprob: -7.81105375289917
    9. '(
' → logprob: -7.93605375289917
    10. '(""))' → logprob: -8.561054229736328

Token 152: 'Ent' (ID: 3263)
  Prédit: 'Ent'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Ent' → logprob: -0.01947704516351223
    2. 'Veuillez' → logprob: -4.144476890563965
    3. '"' → logprob: -6.144476890563965
    4. 'Entr' → logprob: -6.894476890563965
    5. 'Enter' → logprob: -8.894476890563965
    6. 'S' → logprob: -10.394476890563965
    7. '"S' → logprob: -10.894476890563965
    8. 'Please' → logprob: -11.019476890563965
    9. '")' → logprob: -11.019476890563965
    10. ' Ent' → logprob: -11.144476890563965

Token 153: 'rez' (ID: 13676)
  Prédit: 'rez'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'rez' → logprob: -0.05885038897395134
    2. 'ier' → logprob: -3.5588502883911133
    3. 'er' → logprob: -4.308850288391113
    4. 're' → logprob: -4.933850288391113
    5. 'r' → logprob: -5.558850288391113
    6. 'rer' → logprob: -5.683850288391113
    7. 'ré' → logprob: -7.558850288391113
    8. 'rée' → logprob: -8.683850288391113
    9. ' ier' → logprob: -11.058850288391113
    10. 'rier' → logprob: -11.308850288391113

Token 154: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.0022316172253340483
    2. ' ' → logprob: -6.502231597900391
    3. '(' → logprob: -8.50223159790039
    4. '("' → logprob: -9.12723159790039
    5. ' "' → logprob: -9.37723159790039
    6. ' votre' → logprob: -9.62723159790039
    7. ' ' → logprob: -9.75223159790039
    8. ' )' → logprob: -9.75223159790039
    9. 'un' → logprob: -10.12723159790039
    10. ' "))' → logprob: -10.12723159790039

Token 155: ' nombre' (ID: 9733)
  Prédit: ' entier'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' entier' → logprob: -0.052511781454086304
    2. ' nombre' → logprob: -3.052511692047119
    3. ' ' → logprob: -5.927511692047119
    4. 'ent' → logprob: -7.427511692047119
    5. 'nombre' → logprob: -7.427511692047119
    6. '   ' → logprob: -11.177512168884277
    7. ' entière' → logprob: -11.177512168884277
    8. ' ent' → logprob: -11.427512168884277
    9. '  ' → logprob: -12.052512168884277
    10. ' ' → logprob: -12.177512168884277

Token 156: ' entier' (ID: 80473)
  Prédit: ' entier'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' entier' → logprob: -0.08092360198497772
    2. ' :' → logprob: -2.955923557281494
    3. ' ' → logprob: -4.455923557281494
    4. ':' → logprob: -4.580923557281494
    5. ' ' → logprob: -6.330923557281494
    6. ' "))' → logprob: -6.955923557281494
    7. ' entière' → logprob: -7.330923557281494
    8. ' ent' → logprob: -8.455924034118652
    9. 'ent' → logprob: -9.580924034118652
    10. ' "' → logprob: -9.955924034118652

Token 157: ' :' (ID: 712)
  Prédit: ' :'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' :' → logprob: -0.12702155113220215
    2. ':' → logprob: -2.127021551132202
    3. ' ' → logprob: -9.377021789550781
    4. '"))' → logprob: -12.627021789550781
    5. ' ' → logprob: -13.252021789550781
    6. '")' → logprob: -13.627021789550781
    7. ' "))' → logprob: -14.377021789550781
    8. '"' → logprob: -14.502021789550781
    9. '>' → logprob: -14.627021789550781
    10. ')' → logprob: -15.002021789550781

Token 158: ' "' (ID: 392)
  Prédit: '"))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"))' → logprob: -0.20146606862545013
    2. ' "))' → logprob: -1.7014660835266113
    3. '"' → logprob: -10.451465606689453
    4. ' "' → logprob: -12.076465606689453
    5. '"))
' → logprob: -12.451465606689453
    6. '))' → logprob: -12.451465606689453
    7. ' "))
' → logprob: -12.701465606689453
    8. '")))' → logprob: -12.951465606689453
    9. ''))' → logprob: -13.576465606689453
    10. ' ' → logprob: -13.826465606689453

Token 159: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.03633733093738556
    2. '"))' → logprob: -3.536337375640869
    3. ')' → logprob: -5.036337375640869
    4. ''))' → logprob: -10.661336898803711
    5. '))
' → logprob: -11.161336898803711
    6. ' ))' → logprob: -11.411336898803711
    7. '")' → logprob: -11.786336898803711
    8. '"' → logprob: -12.661336898803711
    9. ')")' → logprob: -12.786336898803711
    10. ')))' → logprob: -13.161336898803711

Token 160: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.042903728783130646
    2. '
' → logprob: -3.5429036617279053
    3. '

' → logprob: -4.542903900146484
    4. 'd' → logprob: -6.042903900146484
    5. 'de' → logprob: -10.917903900146484
    6. '```' → logprob: -11.917903900146484
    7. '\' → logprob: -12.042903900146484
    8. '


' → logprob: -12.167903900146484
    9. ' def' → logprob: -12.417903900146484
    10. '



' → logprob: -13.042903900146484

Token 161: ' cube' (ID: 46822)
  Prédit: ' cube'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cube' → logprob: -0.00038479414070025086
    2. ' ' → logprob: -8.500384330749512
    3. 'cube' → logprob: -9.375384330749512
    4. ' ' → logprob: -9.500384330749512
    5. ' space' → logprob: -11.125384330749512
    6. '_' → logprob: -12.875384330749512
    7. ' cub' → logprob: -13.250384330749512
    8. ' cubic' → logprob: -13.875384330749512
    9. '_cube' → logprob: -14.500384330749512
    10. 'space' → logprob: -15.500384330749512

Token 162: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004427863284945488
    2. '(a' → logprob: -5.754427909851074
    3. '(n' → logprob: -7.129427909851074
    4. '(x' → logprob: -8.129427909851074
    5. '(num' → logprob: -9.504427909851074
    6. '(value' → logprob: -10.129427909851074
    7. '(number' → logprob: -10.504427909851074
    8. '(
' → logprob: -12.879427909851074
    9. '(numero' → logprob: -13.254427909851074
    10. '(user' → logprob: -14.004427909851074

Token 163: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.10096019506454468
    2. ')' → logprob: -2.3509602546691895
    3. '):
' → logprob: -7.4759602546691895
    4. ' ):' → logprob: -8.850959777832031
    5. ' )' → logprob: -10.850959777832031
    6. ':' → logprob: -11.725959777832031
    7. '   ' → logprob: -12.725959777832031
    8. ' ' → logprob: -13.225959777832031
    9. '**' → logprob: -13.225959777832031
    10. ')
' → logprob: -13.350959777832031

Token 164: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.013539467006921768
    2. 'n' → logprob: -4.8885393142700195
    3. ' return' → logprob: -5.6385393142700195
    4. ' n' → logprob: -6.6385393142700195
    5. 'return' → logprob: -8.26353931427002
    6. '
' → logprob: -8.51353931427002
    7. '    
' → logprob: -9.01353931427002
    8. '  ' → logprob: -9.13853931427002
    9. ' 
' → logprob: -9.13853931427002
    10. '    ' → logprob: -9.26353931427002

Token 165: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05690983310341835
    2. ' return' → logprob: -3.6819097995758057
    3. 'return' → logprob: -3.8069097995758057
    4. ' 
' → logprob: -5.556910037994385
    5. '    
' → logprob: -6.431910037994385
    6. '
' → logprob: -7.056910037994385
    7. '    ' → logprob: -7.306910037994385
    8. '   
' → logprob: -8.056909561157227
    9. '  ' → logprob: -8.556909561157227
    10. 'n' → logprob: -8.556909561157227

Token 166: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004429524298757315
    2. '"""
' → logprob: -5.879429340362549
    3. '"""' → logprob: -7.254429340362549
    4. '"' → logprob: -7.504429340362549
    5. 'Calcul' → logprob: -8.379429817199707
    6. ' """
' → logprob: -9.754429817199707
    7. 'Retour' → logprob: -10.629429817199707
    8. ' """' → logprob: -11.254429817199707
    9. '    ' → logprob: -11.754429817199707
    10. '  ' → logprob: -11.754429817199707

Token 167: ' Cal' (ID: 4453)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00966577883809805
    2. ' return' → logprob: -5.3846659660339355
    3. 'return' → logprob: -5.6346659660339355
    4. 'Calcul' → logprob: -6.7596659660339355
    5. 'Retour' → logprob: -9.134665489196777
    6. '"""' → logprob: -10.384665489196777
    7. '"""
' → logprob: -10.384665489196777
    8. ' """
' → logprob: -10.509665489196777
    9. 'Return' → logprob: -11.009665489196777
    10. '    ' → logprob: -11.509665489196777

Token 168: 'cule' (ID: 45017)
  Prédit: 'cul'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cul' → logprob: -0.06597951799631119
    2. 'cule' → logprob: -2.815979480743408
    3. 'c' → logprob: -5.690979480743408
    4. 'culate' → logprob: -7.565979480743408
    5. '
' → logprob: -10.565979957580566
    6. '   ' → logprob: -10.940979957580566
    7. 'cular' → logprob: -10.940979957580566
    8. 'culator' → logprob: -11.315979957580566
    9. 'cula' → logprob: -11.440979957580566
    10. 'cu' → logprob: -12.440979957580566

Token 169: ' le' (ID: 505)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.016913697123527527
    2. 'n' → logprob: -4.266913890838623
    3. ' le' → logprob: -6.391913890838623
    4. '   ' → logprob: -7.141913890838623
    5. ' ' → logprob: -9.016913414001465
    6. ' la' → logprob: -9.766913414001465
    7. '  ' → logprob: -10.641913414001465
    8. ' l' → logprob: -10.766913414001465
    9. '	n' → logprob: -11.266913414001465
    10. '    ' → logprob: -11.641913414001465

Token 170: ' cube' (ID: 46822)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.7141329646110535
    2. ' n' → logprob: -0.9641329646110535
    3. ' cube' → logprob: -2.0891330242156982
    4. 'cube' → logprob: -5.339132785797119
    5. 'c' → logprob: -8.589133262634277
    6. ' ' → logprob: -9.589133262634277
    7. ' nombre' → logprob: -10.089133262634277
    8. 'nombre' → logprob: -10.839133262634277
    9. '_cube' → logprob: -10.839133262634277
    10. '³' → logprob: -11.089133262634277

Token 171: ' d' (ID: 272)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.3936719596385956
    2. ' de' → logprob: -1.518671989440918
    3. ' d' → logprob: -2.518671989440918
    4. ' n' → logprob: -4.893671989440918
    5. ' of' → logprob: -5.518671989440918
    6. ' (' → logprob: -5.643671989440918
    7. 'n' → logprob: -5.768671989440918
    8. 'd' → logprob: -5.893671989440918
    9. '(' → logprob: -6.018671989440918
    10. ' ' → logprob: -7.268671989440918

Token 172: ''un' (ID: 9788)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.1706901639699936
    2. 'n' → logprob: -2.1706900596618652
    3. '(n' → logprob: -3.9206900596618652
    4. ' un' → logprob: -4.420690059661865
    5. '<|end|>' → logprob: -5.045690059661865
    6. ' ' → logprob: -6.795690059661865
    7. ' ' → logprob: -7.295690059661865
    8. ' a' → logprob: -7.670690059661865
    9. ' l' → logprob: -7.670690059661865
    10. 'a' → logprob: -7.920690059661865

Token 173: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.20688939094543457
    2. 'nombre' → logprob: -1.7068893909454346
    3. 'n' → logprob: -5.3318891525268555
    4. ' entier' → logprob: -8.331889152526855
    5. ' n' → logprob: -8.456889152526855
    6. ' ' → logprob: -9.331889152526855
    7. ' nombres' → logprob: -10.206889152526855
    8. '   ' → logprob: -11.081889152526855
    9. '_nombre' → logprob: -11.706889152526855
    10. 'Nombre' → logprob: -12.206889152526855

Token 174: ' entier' (ID: 80473)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.089678406715393
    2. ' (' → logprob: -1.214678406715393
    3. ' n' → logprob: -2.2146782875061035
    4. '(n' → logprob: -2.5896782875061035
    5. ' entier' → logprob: -2.5896782875061035
    6. '  ' → logprob: -4.0896782875061035
    7. ' ' → logprob: -4.4646782875061035
    8. '.' → logprob: -4.4646782875061035
    9. ' ' → logprob: -4.8396782875061035
    10. ' ,' → logprob: -4.8396782875061035

Token 175: ' donné' (ID: 52079)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07074376940727234
    2. '(n' → logprob: -2.9457437992095947
    3. '.' → logprob: -5.320743560791016
    4. ' (' → logprob: -5.695743560791016
    5. ' :' → logprob: -6.320743560791016
    6. ':' → logprob: -6.445743560791016
    7. 'n' → logprob: -6.820743560791016
    8. '  ' → logprob: -7.570743560791016
    9. ' n' → logprob: -7.695743560791016
    10. '
' → logprob: -7.945743560791016

Token 176: '.

' (ID: 364)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06243850290775299
    2. '.' → logprob: -3.062438488006592
    3. '.
' → logprob: -5.062438488006592
    4. '
' → logprob: -5.937438488006592
    5. '(n' → logprob: -6.437438488006592
    6. ':' → logprob: -7.312438488006592
    7. ' :' → logprob: -7.437438488006592
    8. '    
' → logprob: -8.06243896484375
    9. ' (' → logprob: -8.56243896484375
    10. '  ' → logprob: -8.56243896484375

Token 177: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0004473540757317096
    2. '    
' → logprob: -8.625447273254395
    3. ' 
' → logprob: -9.375447273254395
    4. 'n' → logprob: -9.500447273254395
    5. '    ' → logprob: -10.250447273254395
    6. '
' → logprob: -10.625447273254395
    7. '   
' → logprob: -11.625447273254395
    8. '\n' → logprob: -11.750447273254395
    9. ')' → logprob: -11.875447273254395
    10. '  ' → logprob: -12.000447273254395

Token 178: ' Args' (ID: 39185)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00033153212280012667
    2. ' return' → logprob: -8.62533187866211
    3. 'return' → logprob: -9.00033187866211
    4. '    ' → logprob: -11.75033187866211
    5. '    
' → logprob: -11.87533187866211
    6. '
' → logprob: -12.37533187866211
    7. '  ' → logprob: -12.37533187866211
    8. '"""' → logprob: -13.25033187866211
    9. ' ' → logprob: -13.62533187866211
    10. '```' → logprob: -14.25033187866211

Token 179: ':
' (ID: 734)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.459250271320343
    2. ' (' → logprob: -1.0842502117156982
    3. '   ' → logprob: -3.9592502117156982
    4. ':' → logprob: -4.834250450134277
    5. '(' → logprob: -7.084250450134277
    6. ')' → logprob: -7.584250450134277
    7. ' :' → logprob: -7.584250450134277
    8. ' n' → logprob: -8.584250450134277
    9. 'n' → logprob: -8.584250450134277
    10. ',' → logprob: -8.834250450134277

Token 180: '       ' (ID: 309)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.7437975406646729
    2. '   ' → logprob: -0.9937975406646729
    3. 'n' → logprob: -1.8687975406646729
    4. '    ' → logprob: -9.118797302246094
    5. '	n' → logprob: -9.618797302246094
    6. '       ' → logprob: -10.993797302246094
    7. '  ' → logprob: -11.993797302246094
    8. 'int' → logprob: -12.368797302246094
    9. '    
' → logprob: -12.618797302246094
    10. '(n' → logprob: -12.993797302246094

Token 181: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.006136276293545961
    2. 'int' → logprob: -5.631136417388916
    3. '   ' → logprob: -6.506136417388916
    4. ' n' → logprob: -6.881136417388916
    5. ' int' → logprob: -11.756135940551758
    6. '       ' → logprob: -13.631135940551758
    7. '	n' → logprob: -13.881135940551758
    8. '
' → logprob: -14.381135940551758
    9. '  ' → logprob: -15.006135940551758
    10. '    
' → logprob: -15.506135940551758

Token 182: ' (' (ID: 350)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.03852783888578415
    2. ':int' → logprob: -3.663527727127075
    3. '):' → logprob: -4.538527965545654
    4. ' :' → logprob: -7.038527965545654
    5. ')' → logprob: -8.163527488708496
    6. '[int' → logprob: -9.163527488708496
    7. '(int' → logprob: -9.788527488708496
    8. ' ):' → logprob: -10.038527488708496
    9. 'int' → logprob: -10.413527488708496
    10. '):
' → logprob: -10.663527488708496

Token 183: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0031901898328214884
    2. ' int' → logprob: -5.753190040588379
    3. '   ' → logprob: -11.378190040588379
    4. ':int' → logprob: -14.378190040588379
    5. ')' → logprob: -15.003190040588379
    6. '    ' → logprob: -16.378190994262695
    7. '):' → logprob: -17.003190994262695
    8. '  ' → logprob: -17.253190994262695
    9. '       ' → logprob: -17.628190994262695
    10. '[int' → logprob: -17.628190994262695

Token 184: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.38947004079818726
    2. ')' → logprob: -1.139470100402832
    3. '<|end|>' → logprob: -7.014470100402832
    4. '):
' → logprob: -7.139470100402832
    5. '   ' → logprob: -7.889470100402832
    6. ' ):' → logprob: -8.264470100402832
    7. ' ' → logprob: -10.014470100402832
    8. 'int' → logprob: -10.014470100402832
    9. ':' → logprob: -10.014470100402832
    10. '  ' → logprob: -10.514470100402832

Token 185: ' Le' (ID: 2018)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.0729934349656105
    2. 'int' → logprob: -2.697993516921997
    3. '    ' → logprob: -6.322993278503418
    4. '   ' → logprob: -6.947993278503418
    5. ' ' → logprob: -9.197993278503418
    6. '[int' → logprob: -9.572993278503418
    7. '       ' → logprob: -10.447993278503418
    8. '	int' → logprob: -10.947993278503418
    9. ')' → logprob: -11.447993278503418
    10. ' 
' → logprob: -11.697993278503418

Token 186: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.004434389993548393
    2. ' entier' → logprob: -6.129434585571289
    3. 'nombre' → logprob: -6.379434585571289
    4. ' ' → logprob: -8.379434585571289
    5. ' n' → logprob: -9.254434585571289
    6. ' int' → logprob: -9.379434585571289
    7. 'n' → logprob: -9.879434585571289
    8. ' number' → logprob: -9.879434585571289
    9. '   ' → logprob: -11.754434585571289
    10. ' integer' → logprob: -12.129434585571289

Token 187: ' à' (ID: 1221)
  Prédit: ' entier'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' entier' → logprob: -0.5970150828361511
    2. ' ' → logprob: -1.597015142440796
    3. '<|end|>' → logprob: -1.972015142440796
    4. ' à' → logprob: -2.597015142440796
    5. '   ' → logprob: -4.597014904022217
    6. ')' → logprob: -5.222014904022217
    7. '  ' → logprob: -5.472014904022217
    8. ' integer' → logprob: -6.222014904022217
    9. ' int' → logprob: -6.722014904022217
    10. ' )' → logprob: -6.722014904022217

Token 188: ' mettre' (ID: 25339)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -1.1088169813156128
    2. ' é' → logprob: -1.2338169813156128
    3. ' cub' → logprob: -2.1088171005249023
    4. '	c' → logprob: -2.9838171005249023
    5. 'cube' → logprob: -3.3588171005249023
    6. 'cub' → logprob: -3.3588171005249023
    7. 'é' → logprob: -3.4838171005249023
    8. '```' → logprob: -3.6088171005249023
    9. '   ' → logprob: -4.358817100524902
    10. '  ' → logprob: -4.483817100524902

Token 189: ' au' (ID: 2791)
  Prédit: 'au'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'au' → logprob: -0.05630704015493393
    2. ' au' → logprob: -2.931307077407837
    3. '  ' → logprob: -7.306306838989258
    4. 'à' → logprob: -8.431306838989258
    5. '   ' → logprob: -8.431306838989258
    6. ' ' → logprob: -9.181306838989258
    7. 'c' → logprob: -10.181306838989258
    8. ''au' → logprob: -10.306306838989258
    9. '```' → logprob: -10.431306838989258
    10. '    ' → logprob: -10.431306838989258

Token 190: ' cube' (ID: 46822)
  Prédit: 'cube'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cube' → logprob: -0.011596144177019596
    2. 'c' → logprob: -4.511596202850342
    3. ' cube' → logprob: -7.761596202850342
    4. '   ' → logprob: -10.011595726013184
    5. 'cub' → logprob: -10.886595726013184
    6. ' ' → logprob: -11.136595726013184
    7. '```' → logprob: -11.136595726013184
    8. '_cube' → logprob: -11.136595726013184
    9. '  ' → logprob: -12.636595726013184
    10. '3' → logprob: -12.636595726013184

Token 191: '.

' (ID: 364)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.10368137061595917
    2. '   ' → logprob: -2.7286813259124756
    3. ')
' → logprob: -4.353681564331055
    4. '):' → logprob: -4.353681564331055
    5. '):
' → logprob: -4.978681564331055
    6. ')

' → logprob: -9.228681564331055
    7. '):

' → logprob: -9.353681564331055
    8. '
' → logprob: -9.603681564331055
    9. ')**' → logprob: -9.728681564331055
    10. ' )' → logprob: -9.853681564331055

Token 192: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01263266522437334
    2. '    
' → logprob: -4.512632846832275
    3. '
' → logprob: -7.512632846832275
    4. ' 
' → logprob: -8.137632369995117
    5. ')' → logprob: -8.512632369995117
    6. '   
' → logprob: -8.887632369995117
    7. '  
' → logprob: -8.887632369995117
    8. '        
' → logprob: -9.262632369995117
    9. 'return' → logprob: -10.012632369995117
    10. 'Returns' → logprob: -10.637632369995117

Token 193: ' Returns' (ID: 9609)
  Prédit: 'Returns'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Returns' (adapté à ' Returns') → logprob: -0.23514266312122345
    2. '   ' → logprob: -1.735142707824707
    3. '
' → logprob: -4.110142707824707
    4. 'return' → logprob: -4.985142707824707
    5. '    
' → logprob: -4.985142707824707
    6. 'returns' → logprob: -7.110142707824707
    7. '"""
' → logprob: -7.235142707824707
    8. ' Returns' → logprob: -7.360142707824707
    9. '```' → logprob: -8.485142707824707
    10. '  
' → logprob: -8.610142707824707

Token 194: ':
' (ID: 734)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5531656742095947
    2. ' (' → logprob: -1.5531656742095947
    3. ' int' → logprob: -2.1781656742095947
    4. '(int' → logprob: -2.6781656742095947
    5. 'int' → logprob: -4.303165435791016
    6. ':' → logprob: -5.428165435791016
    7. ':int' → logprob: -5.928165435791016
    8. '[int' → logprob: -5.928165435791016
    9. '<|end|>' → logprob: -6.428165435791016
    10. '       ' → logprob: -6.553165435791016

Token 195: '       ' (ID: 309)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.7632118463516235
    2. '   ' → logprob: -1.2632118463516235
    3. ' int' → logprob: -1.6382118463516235
    4. 'n' → logprob: -3.763211727142334
    5. '       ' → logprob: -3.888211727142334
    6. 'int' → logprob: -4.638211727142334
    7. '    ' → logprob: -5.763211727142334
    8. '        ' → logprob: -9.888212203979492
    9. '  ' → logprob: -10.013212203979492
    10. ' ' → logprob: -10.138212203979492

Token 196: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' (adapté à ' int') → logprob: -0.004080420359969139
    2. ' int' → logprob: -5.504080295562744
    3. '   ' → logprob: -13.254080772399902
    4. 'n' → logprob: -15.754080772399902
    5. '(int' → logprob: -16.879079818725586
    6. '	int' → logprob: -17.254079818725586
    7. ' ' → logprob: -17.629079818725586
    8. ' 
' → logprob: -17.754079818725586
    9. '  ' → logprob: -17.879079818725586
    10. '[int' → logprob: -18.004079818725586

Token 197: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.4340357184410095
    2. ' :' → logprob: -1.3090357780456543
    3. '   ' → logprob: -2.9340357780456543
    4. ' n' → logprob: -3.8090357780456543
    5. '    ' → logprob: -5.559035778045654
    6. '  ' → logprob: -7.684035778045654
    7. 'n' → logprob: -7.809035778045654
    8. ' ' → logprob: -7.934035778045654
    9. ')' → logprob: -8.059035301208496
    10. ' return' → logprob: -8.309035301208496

Token 198: ' Le' (ID: 2018)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.014968263916671276
    2. 'n' → logprob: -4.264968395233154
    3. '    ' → logprob: -8.139967918395996
    4. ' Le' → logprob: -8.389967918395996
    5. '   ' → logprob: -8.639967918395996
    6. 'Le' → logprob: -9.889967918395996
    7. ' le' → logprob: -10.639967918395996
    8. ' ' → logprob: -10.764967918395996
    9. '(n' → logprob: -12.764967918395996
    10. ' (' → logprob: -12.764967918395996

Token 199: ' résultat' (ID: 62556)
  Prédit: ' cube'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cube' → logprob: -0.08394796401262283
    2. 'n' → logprob: -3.0839478969573975
    3. ' n' → logprob: -3.8339478969573975
    4. ' nombre' → logprob: -5.083948135375977
    5. ' résultat' → logprob: -5.583948135375977
    6. 'cube' → logprob: -6.083948135375977
    7. ' ' → logprob: -8.208948135375977
    8. 'nombre' → logprob: -8.458948135375977
    9. ' entier' → logprob: -8.708948135375977
    10. ' result' → logprob: -10.708948135375977

Token 200: ' de' (ID: 334)
  Prédit: ' du'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' du' → logprob: -0.585200846195221
    2. ' de' → logprob: -1.3352007865905762
    3. ' n' → logprob: -1.8352007865905762
    4. '   ' → logprob: -4.960200786590576
    5. 'n' → logprob: -5.085200786590576
    6. ' ' → logprob: -5.710200786590576
    7. ' des' → logprob: -7.210200786590576
    8. '(n' → logprob: -7.585200786590576
    9. ' 
' → logprob: -8.335201263427734
    10. ',' → logprob: -8.460201263427734

Token 201: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.008650383912026882
    2. 'n' → logprob: -4.758650302886963
    3. ' ' → logprob: -10.633650779724121
    4. '   ' → logprob: -12.383650779724121
    5. ' l' → logprob: -13.133650779724121
    6. '	n' → logprob: -13.258650779724121
    7. '```' → logprob: -14.383650779724121
    8. ' `' → logprob: -14.508650779724121
    9. ' le' → logprob: -14.883650779724121
    10. ' la' → logprob: -15.008650779724121

Token 202: ' élevé' (ID: 95488)
  Prédit: ' **'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' **' → logprob: -0.01863306760787964
    2. '**' → logprob: -4.018632888793945
    3. ' ' → logprob: -8.518632888793945
    4. ' *' → logprob: -8.643632888793945
    5. ' ***' → logprob: -10.393632888793945
    6. '  ' → logprob: -10.518632888793945
    7. '   ' → logprob: -11.518632888793945
    8. ' au' → logprob: -11.768632888793945
    9. '    ' → logprob: -11.893632888793945
    10. ' ' → logprob: -12.143632888793945

Token 203: ' à' (ID: 1221)
  Prédit: ' au'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' au' → logprob: -0.09787184000015259
    2. ' à' → logprob: -2.472871780395508
    3. ' ' → logprob: -5.097871780395508
    4. '³' → logprob: -7.472871780395508
    5. '**' → logprob: -7.597871780395508
    6. 'au' → logprob: -7.722871780395508
    7. '  ' → logprob: -7.847871780395508
    8. ' **' → logprob: -8.222871780395508
    9. '3' → logprob: -8.347871780395508
    10. ' n' → logprob: -9.472871780395508

Token 204: ' la' (ID: 557)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.01603882573544979
    2. ' ' → logprob: -4.14103889465332
    3. ' trois' → logprob: -12.76603889465332
    4. '  ' → logprob: -14.39103889465332
    5. '```' → logprob: -14.76603889465332
    6. ' la' → logprob: -15.51603889465332
    7. '   ' → logprob: -15.64103889465332
    8. '³' → logprob: -15.76603889465332
    9. ' Trois' → logprob: -15.89103889465332
    10. ' ' → logprob: -17.14103889465332

Token 205: ' puissance' (ID: 63494)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '3' → logprob: -0.0059304554015398026
    2. ' ' → logprob: -5.130930423736572
    3. '```' → logprob: -14.38093090057373
    4. '³' → logprob: -15.13093090057373
    5. '  ' → logprob: -15.25593090057373
    6. ' troisième' → logprob: -15.50593090057373
    7. ' trois' → logprob: -15.88093090057373
    8. '   ' → logprob: -15.88093090057373
    9. '
' → logprob: -16.630929946899414
    10. 'tro' → logprob: -16.755929946899414

Token 206: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.0486162044107914
    2. ' ' → logprob: -3.0486161708831787
    3. ' trois' → logprob: -10.923616409301758
    4. ' Trois' → logprob: -13.048616409301758
    5. '```' → logprob: -13.298616409301758
    6. ' ' → logprob: -13.673616409301758
    7. '  ' → logprob: -13.798616409301758
    8. ' )' → logprob: -14.298616409301758
    9. ' tres' → logprob: -14.298616409301758
    10. ' three' → logprob: -14.298616409301758

Token 207: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -3.6312321753939614e-05
    2. ' ' → logprob: -10.250036239624023
    3. '   ' → logprob: -14.375036239624023
    4. '```' → logprob: -15.500036239624023
    5. '  ' → logprob: -17.000036239624023
    6. '
' → logprob: -17.375036239624023
    7. '`' → logprob: -18.125036239624023
    8. ' trois' → logprob: -18.250036239624023
    9. '³' → logprob: -18.500036239624023
    10. '' → logprob: -18.750036239624023

Token 208: '.
' (ID: 558)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.11277107894420624
    2. '.
' → logprob: -3.2377710342407227
    3. '   ' → logprob: -3.4877710342407227
    4. '\n' → logprob: -4.237771034240723
    5. '
' → logprob: -4.862771034240723
    6. '**' → logprob: -5.112771034240723
    7. ')' → logprob: -6.362771034240723
    8. 'n' → logprob: -6.487771034240723
    9. '    
' → logprob: -6.612771034240723
    10. '```' → logprob: -6.862771034240723

Token 209: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0042646583169698715
    2. '
' → logprob: -5.754264831542969
    3. '    
' → logprob: -7.004264831542969
    4. ' return' → logprob: -9.254264831542969
    5. 'return' → logprob: -9.629264831542969
    6. ' 
' → logprob: -12.254264831542969
    7. '	return' → logprob: -12.504264831542969
    8. '   
' → logprob: -12.754264831542969
    9. '  
' → logprob: -13.754264831542969
    10. '    ' → logprob: -14.004264831542969

Token 210: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.021987956017255783
    2. '
' → logprob: -4.5219879150390625
    3. '    
' → logprob: -4.7719879150390625
    4. ' 
' → logprob: -6.6469879150390625
    5. '   
' → logprob: -7.6469879150390625
    6. '  
' → logprob: -8.271987915039062
    7. ' return' → logprob: -9.146987915039062
    8. ')' → logprob: -9.771987915039062
    9. '"""
' (adapté à ' """
') → logprob: -10.146987915039062
    10. '"""' → logprob: -10.271987915039062

Token 211: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.002146335318684578
    2. ' return' → logprob: -6.502146244049072
    3. 'return' → logprob: -7.377146244049072
    4. '
' → logprob: -11.75214672088623
    5. '    
' → logprob: -12.12714672088623
    6. '   ' → logprob: -13.12714672088623
    7. ' 
' → logprob: -13.75214672088623
    8. '	return' → logprob: -14.37714672088623
    9. '    ' → logprob: -14.50214672088623
    10. '  ' → logprob: -14.75214672088623

Token 212: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.011916598305106163
    2. '   ' → logprob: -5.011916637420654
    3. ' return' → logprob: -5.261916637420654
    4. 'ret' → logprob: -13.636916160583496
    5. '	return' → logprob: -15.011916160583496
    6. '
' → logprob: -15.136916160583496
    7. '    
' → logprob: -16.136917114257812
    8. ' ' → logprob: -16.136917114257812
    9. 're' → logprob: -16.636917114257812
    10. '```' → logprob: -16.636917114257812

Token 213: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.018150296062231064
    2. 'n' → logprob: -4.018150329589844
    3. ' ' → logprob: -15.018150329589844
    4. ' ' → logprob: -16.143150329589844
    5. '	n' → logprob: -17.143150329589844
    6. ' ' → logprob: -19.643150329589844
    7. 'pow' → logprob: -20.018150329589844
    8. ' pow' → logprob: -20.393150329589844
    9. '   ' → logprob: -20.518150329589844
    10. ' (' → logprob: -21.143150329589844

Token 214: ' *' (ID: 425)
  Prédit: '**'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '**' → logprob: -0.22583824396133423
    2. ' **' → logprob: -1.6008381843566895
    3. '*' → logprob: -8.225838661193848
    4. ' *' → logprob: -8.975838661193848
    5. ' ' → logprob: -11.350838661193848
    6. ' ' → logprob: -12.100838661193848
    7. '***' → logprob: -12.475838661193848
    8. ' ***' → logprob: -12.475838661193848
    9. '3' → logprob: -13.350838661193848
    10. '```' → logprob: -13.600838661193848

Token 215: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.1602267622947693
    2. ' n' → logprob: -1.910226821899414
    3. '	n' → logprob: -13.035226821899414
    4. ' ' → logprob: -15.535226821899414
    5. ' ' → logprob: -16.785226821899414
    6. '<|end|>' → logprob: -16.785226821899414
    7. '3' → logprob: -17.160226821899414
    8. '   ' → logprob: -18.035226821899414
    9. ')n' → logprob: -18.785226821899414
    10. '  ' → logprob: -19.035226821899414

Token 216: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.07910789549350739
    2. '*' → logprob: -2.5791079998016357
    3. '*n' → logprob: -8.454108238220215
    4. ' ' → logprob: -12.329108238220215
    5. 'n' → logprob: -15.204108238220215
    6. ' ' → logprob: -15.954108238220215
    7. '<|end|>' → logprob: -16.7041072845459
    8. ' n' → logprob: -17.2041072845459
    9. '**' → logprob: -17.5791072845459
    10. ' *
' → logprob: -17.7041072845459

Token 217: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -4.5491004129871726e-05
    2. ' n' → logprob: -10.000045776367188
    3. '<|end|>' → logprob: -17.875045776367188
    4. '	n' → logprob: -20.000045776367188
    5. '*n' → logprob: -21.250045776367188
    6. ' ' → logprob: -21.875045776367188
    7. ')n' → logprob: -21.875045776367188
    8. '_n' → logprob: -22.750045776367188
    9. '<|end|>' → logprob: -23.250045776367188
    10. '(n' → logprob: -23.625045776367188

Token 218: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.007086522877216339
    2. '

' → logprob: -5.632086753845215
    3. '<|end|>' → logprob: -6.257086753845215
    4. 'if' → logprob: -7.382086753845215
    5. '\n' → logprob: -7.507086753845215
    6. '```' → logprob: -8.507086753845215
    7. '#' → logprob: -9.507086753845215
    8. ' if' → logprob: -10.632086753845215
    9. '  
' → logprob: -10.757086753845215
    10. '
' → logprob: -10.757086753845215

Token 219: '#' (ID: 2)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.32062262296676636
    2. 'if' → logprob: -1.3206226825714111
    3. '

' → logprob: -4.945622444152832
    4. ' if' → logprob: -9.320622444152832
    5. '\n' → logprob: -9.320622444152832
    6. '```' → logprob: -11.195622444152832
    7. '
' → logprob: -11.445622444152832
    8. '  
' → logprob: -12.320622444152832
    9. '
    
' → logprob: -12.820622444152832
    10. '#' → logprob: -13.070622444152832

Token 220: ' Ex' (ID: 1771)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -4.246537173457909e-06
    2. ' if' → logprob: -12.875003814697266
    3. 'main' → logprob: -13.375003814697266
    4. '```' → logprob: -18.250003814697266
    5. 'If' → logprob: -18.625003814697266
    6. '
' → logprob: -18.750003814697266
    7. '#' → logprob: -20.875003814697266
    8. 'i' → logprob: -21.000003814697266
    9. '

' → logprob: -21.875003814697266
    10. ' main' → logprob: -22.500003814697266

Token 221: 'écution' (ID: 122423)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.20159713923931122
    2. 'ecute' → logprob: -1.9515970945358276
    3. 'éc' → logprob: -3.826597213745117
    4. 'ec' → logprob: -4.326597213745117
    5. 'e' → logprob: -5.701597213745117
    6. 'ecut' → logprob: -7.076597213745117
    7. 'ecution' → logprob: -7.201597213745117
    8. 'é' → logprob: -8.076597213745117
    9. 'ecu' → logprob: -8.826597213745117
    10. 'écution' → logprob: -9.951597213745117

Token 222: ' du' (ID: 1462)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0009064606274478137
    2. '
' → logprob: -7.375906467437744
    3. ' if' → logprob: -8.375905990600586
    4. '

' → logprob: -10.750905990600586
    5. 'main' → logprob: -10.750905990600586
    6. '\n' → logprob: -13.500905990600586
    7. '\' → logprob: -13.625905990600586
    8. '_' → logprob: -13.875905990600586
    9. '_main' → logprob: -14.125905990600586
    10. ' main' → logprob: -14.750905990600586

Token 223: ' script' (ID: 11713)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.9081605076789856
    2. 'main' → logprob: -0.9081605076789856
    3. ' main' → logprob: -2.408160448074341
    4. ' __' → logprob: -2.908160448074341
    5. 'if' → logprob: -3.033160448074341
    6. '_main' → logprob: -8.158160209655762
    7. '_' → logprob: -8.283160209655762
    8. ' if' → logprob: -8.908160209655762
    9. 'program' → logprob: -11.158160209655762
    10. 'script' → logprob: -11.408160209655762

Token 224: ' si' (ID: 1784)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.205808624625206
    2. 'if' → logprob: -1.7058086395263672
    3. '

' → logprob: -5.455808639526367
    4. ' if' → logprob: -9.205808639526367
    5. '
' → logprob: -11.955808639526367
    6. ' 
' → logprob: -12.955808639526367
    7. '  
' → logprob: -13.580808639526367
    8. '


' → logprob: -13.955808639526367
    9. '\n' → logprob: -14.080808639526367
    10. '```' → logprob: -14.205808639526367

Token 225: ' appelé' (ID: 101427)
  Prédit: ' __'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.014169861562550068
    2. '__' → logprob: -4.264169692993164
    3. ' ' → logprob: -12.014169692993164
    4. '_' → logprob: -16.014169692993164
    5. 'name' → logprob: -16.764169692993164
    6. ' "__' → logprob: -16.889169692993164
    7. ' ' → logprob: -17.139169692993164
    8. '_name' → logprob: -17.639169692993164
    9. ' ' → logprob: -18.264169692993164
    10. ' _' → logprob: -18.389169692993164

Token 226: ' directement' (ID: 52317)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.6993362903594971
    2. '__' → logprob: -2.199336290359497
    3. ' __' → logprob: -2.324336290359497
    4. ' en' → logprob: -2.449336290359497
    5. ' if' → logprob: -2.699336290359497
    6. ' par' → logprob: -3.699336290359497
    7. 'en' → logprob: -3.824336290359497
    8. '```' → logprob: -3.824336290359497
    9. 'par' → logprob: -4.074336051940918
    10. 'direct' → logprob: -4.324336051940918

Token 227: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.32142138481140137
    2. 'if' → logprob: -1.3214213848114014
    3. '

' → logprob: -4.8214216232299805
    4. ' if' → logprob: -10.57142162322998
    5. '```' → logprob: -11.32142162322998
    6. '
' → logprob: -11.44642162322998
    7. '\n' → logprob: -11.57142162322998
    8. '  
' → logprob: -12.07142162322998
    9. ' 
' → logprob: -12.69642162322998
    10. '    
' → logprob: -13.82142162322998

Token 228: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.00020592445798683912
    2. '
' → logprob: -8.500205993652344
    3. ' if' → logprob: -13.250205993652344
    4. '

' → logprob: -14.875205993652344
    5. '```' → logprob: -15.500205993652344
    6. ' 
' → logprob: -18.000205993652344
    7. '    
' → logprob: -18.125205993652344
    8. '  
' → logprob: -18.250205993652344
    9. '\
' → logprob: -19.500205993652344
    10. '\' → logprob: -19.625205993652344

Token 229: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.0015031944494694471
    2. '__' → logprob: -6.501502990722656
    3. ' ' → logprob: -14.376502990722656
    4. ' ' → logprob: -15.876502990722656
    5. ' _' → logprob: -16.501502990722656
    6. '_' → logprob: -16.626502990722656
    7. ' ___' → logprob: -18.001502990722656
    8. ' ' → logprob: -18.126502990722656
    9. ' "__' → logprob: -19.376502990722656
    10. '___' → logprob: -19.501502990722656

Token 230: 'name' (ID: 897)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.05012951418757439
    2. '==' → logprob: -3.3001294136047363
    3. '__' → logprob: -4.550129413604736
    4. ' __' → logprob: -7.300129413604736
    5. '=="' → logprob: -8.675129890441895
    6. '=='' → logprob: -8.800129890441895
    7. '_' → logprob: -9.175129890441895
    8. 'name' → logprob: -9.175129890441895
    9. ' =' → logprob: -9.800129890441895
    10. ' =="' → logprob: -10.050129890441895

Token 231: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.0037769312039017677
    2. '==' → logprob: -5.753777027130127
    3. ' ==' → logprob: -8.003776550292969
    4. '_' → logprob: -8.503776550292969
    5. '=="' → logprob: -10.628776550292969
    6. '=' → logprob: -10.628776550292969
    7. '"' → logprob: -11.878776550292969
    8. '___' → logprob: -13.253776550292969
    9. ' __' → logprob: -13.503776550292969
    10. '____' → logprob: -14.003776550292969

Token 232: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.5374963879585266
    2. '==' → logprob: -1.1624963283538818
    3. ' ==' → logprob: -2.287496328353882
    4. '=' → logprob: -6.912496566772461
    5. '=="' → logprob: -8.037496566772461
    6. '"' → logprob: -8.912496566772461
    7. '_' → logprob: -9.787496566772461
    8. ' =' → logprob: -10.787496566772461
    9. '=='' → logprob: -11.162496566772461
    10. '==
' → logprob: -12.537496566772461

Token 233: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.018248865380883217
    2. ''' → logprob: -4.268249034881592
    3. ' "__' → logprob: -5.518249034881592
    4. ' '__' → logprob: -10.143248558044434
    5. '__' → logprob: -10.643248558044434
    6. '("__' → logprob: -14.768248558044434
    7. '"user' → logprob: -15.893248558044434
    8. '"_' → logprob: -16.14324951171875
    9. ' "' → logprob: -16.26824951171875
    10. '"name' → logprob: -16.51824951171875

Token 234: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -6.704273118884885e-07
    2. 'name' → logprob: -14.500000953674316
    3. ' main' → logprob: -16.5
    4. '_main' → logprob: -18.5
    5. '	main' → logprob: -20.75
    6. 'ma' → logprob: -21.875
    7. 'mai' → logprob: -22.75
    8. '"' → logprob: -23.0
    9. '-main' → logprob: -23.125
    10. 'maine' → logprob: -23.25

Token 235: '__":
' (ID: 49892)
  Prédit: '__":
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__":
' → logprob: -0.12693870067596436
    2. '__' → logprob: -2.126938819885254
    3. '_' → logprob: -11.876938819885254
    4. '__':
' → logprob: -12.751938819885254
    5. '"' → logprob: -14.251938819885254
    6. '_"' → logprob: -15.876938819885254
    7. '__["' → logprob: -18.001937866210938
    8. '___' → logprob: -18.001937866210938
    9. '__
' → logprob: -18.501937866210938
    10. '__("' → logprob: -18.751937866210938

Token 236: '   ' (ID: 271)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.16625608503818512
    2. '   ' → logprob: -1.916256070137024
    3. 'main' → logprob: -6.291255950927734
    4. '	main' → logprob: -6.291255950927734
    5. '    
' → logprob: -7.166255950927734
    6. ' 
' → logprob: -8.166255950927734
    7. ' ' → logprob: -8.291255950927734
    8. ' ' → logprob: -8.291255950927734
    9. '_main' → logprob: -8.916255950927734
    10. ':' → logprob: -9.041255950927734

Token 237: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.3132990002632141
    2. 'main' (adapté à ' main') → logprob: -1.3132989406585693
    3. '	main' → logprob: -10.313299179077148
    4. '   ' → logprob: -12.938299179077148
    5. '(main' → logprob: -14.188299179077148
    6. '_main' → logprob: -14.813299179077148
    7. ' ' → logprob: -15.688299179077148
    8. ' 
' → logprob: -15.938299179077148
    9. '.main' → logprob: -16.06329917907715
    10. '    
' → logprob: -16.31329917907715

Token 238: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -3.1424973713001236e-05
    2. '()
' → logprob: -10.625031471252441
    3. '(' → logprob: -12.000031471252441
    4. ' ()' → logprob: -14.625031471252441
    5. '()`' → logprob: -16.000030517578125
    6. '()

' → logprob: -16.250030517578125
    7. '()"' → logprob: -16.750030517578125
    8. '(
' → logprob: -17.000030517578125
    9. '()<' → logprob: -17.500030517578125
    10. '()
' → logprob: -18.000030517578125


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 236
Tokens correctement prédits (1ère position, stricte): 89
Tokens correctement prédits (1ère position, avec adaptation): 95
Tokens correctement prédits (top 10): 177
Précision stricte (1ère position): 37.71%
Précision adaptée (1ère position): 40.25%
Précision (top 10): 75.00%
================================================================================
