================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:41:21
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys

def set_recursion_limit():
    sys.setrecursionlimit(10 ** 6)

def get_input():
    return sys.stdin.readline

def parse_first_line(input_func):
    n_k = input_func().split()
    return int(n_k[0]), int(n_k[1])

def parse_next_line_as_int_list(input_func):
    return list(map(int, input_func().split()))

def sort_descending(lst):
    return sorted(lst, reverse=True)

def sort_ascending(lst):
    return sorted(lst)

def initialize_binary_search_bounds(aa, ff):
    l = -1
    r = aa[0] * ff[-1]
    return l, r

def calculate_excess(a, f, m):
    b = m // f
    return max(a - b, 0)

def check_mid(aa, ff, m, k):
    s = 0
    for a, f in zip(aa, ff):
        excess = calculate_excess(a, f, m)
        s += excess
        if s > k:
            return False
    return True

def binary_search(aa, ff, k):
    l, r = initialize_binary_search_bounds(aa, ff)
    while l + 1 < r:
        m = (l + r) // 2
        if check_mid(aa, ff, m, k):
            r = m
        else:
            l = m
    return r

def main():
    set_recursion_limit()
    input_func = get_input()
    n, k = parse_first_line(input_func)
    aa = parse_next_line_as_int_list(input_func)
    ff = parse_next_line_as_int_list(input_func)
    aa = sort_descending(aa)
    ff = sort_ascending(ff)
    result = binary_search(aa, ff, k)
    print(result)

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '

' (ID: 279)
  → Token d'amorce (pas de prédiction)

Token 3: 'def' (ID: 1314)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.042949914932251
    2. '.' → logprob: -1.167949914932251
    3. '<|end|>' → logprob: -2.292949914932251
    4. 'import' → logprob: -2.542949914932251
    5. '' → logprob: -2.542949914932251
    6. '#' → logprob: -3.792949914932251
    7. '\' → logprob: -4.417949676513672
    8. '
' → logprob: -4.792949676513672
    9. 'print' → logprob: -5.042949676513672
    10. ';' → logprob: -5.667949676513672

Token 4: ' set' (ID: 920)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.021233972162008286
    2. ' main' → logprob: -5.646234035491943
    3. ' ' → logprob: -5.771234035491943
    4. ' space' → logprob: -6.021234035491943
    5. ' process' → logprob: -6.396234035491943
    6. ' sys' → logprob: -6.896234035491943
    7. '  ' → logprob: -7.021234035491943
    8. '_' → logprob: -7.271234035491943
    9. '<|end|>' → logprob: -7.396234035491943
    10. ' a' → logprob: -7.521234035491943

Token 5: '_rec' (ID: 35314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.05292319506406784
    2. ' _' → logprob: -3.3029232025146484
    3. 'attr' → logprob: -6.427923202514648
    4. '_up' → logprob: -6.677923202514648
    5. '_attr' → logprob: -7.177923202514648
    6. '_target' → logprob: -7.177923202514648
    7. '_space' → logprob: -7.177923202514648
    8. 'uptools' → logprob: -7.177923202514648
    9. '_name' → logprob: -7.302923202514648
    10. '_default' → logprob: -7.427923202514648

Token 6: 'ursion' (ID: 41658)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.525607168674469
    2. 'ursion' → logprob: -0.900607168674469
    3. 'ursive' → logprob: -6.525607109069824
    4. '```' → logprob: -8.275607109069824
    5. '__' → logprob: -8.400607109069824
    6. 'urs' → logprob: -8.525607109069824
    7. 'u' → logprob: -10.150607109069824
    8. '`' → logprob: -10.150607109069824
    9. 'ursor' → logprob: -10.275607109069824
    10. 'ur' → logprob: -10.650607109069824

Token 7: '_limit' (ID: 34361)
  Prédit: '_limit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_limit' → logprob: -0.017143629491329193
    2. '_depth' → logprob: -4.767143726348877
    3. '_' → logprob: -5.142143726348877
    4. '_limits' → logprob: -6.642143726348877
    5. '_lim' → logprob: -7.267143726348877
    6. '_l' → logprob: -8.267143249511719
    7. ' _' → logprob: -9.267143249511719
    8. 'al' → logprob: -9.267143249511719
    9. '_max' → logprob: -9.517143249511719
    10. '_stack' → logprob: -10.267143249511719

Token 8: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0019896593876183033
    2. '_' → logprob: -6.376989841461182
    3. '(_' → logprob: -9.376989364624023
    4. ' (' → logprob: -9.751989364624023
    5. ':' → logprob: -10.001989364624023
    6. '```' → logprob: -11.251989364624023
    7. '(:' → logprob: -11.251989364624023
    8. '_(' → logprob: -12.251989364624023
    9. '(_:' → logprob: -12.251989364624023
    10. '():' → logprob: -12.251989364624023

Token 9: '   ' (ID: 271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6439293026924133
    2. '   ' → logprob: -0.7689293026924133
    3. ':' → logprob: -5.268929481506348
    4. '(sys' → logprob: -5.893929481506348
    5. '():' → logprob: -6.893929481506348
    6. '    ' → logprob: -7.768929481506348
    7. '(
' → logprob: -8.143929481506348
    8. ' (' → logprob: -8.143929481506348
    9. '```' → logprob: -8.143929481506348
    10. ' ' → logprob: -8.268929481506348

Token 10: ' sys' (ID: 12228)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13026754558086395
    2. ' sys' → logprob: -2.25526762008667
    3. 'sys' (adapté à ' sys') → logprob: -4.25526762008667
    4. 'import' → logprob: -6.13026762008667
    5. '```' → logprob: -8.255267143249512
    6. ' ' → logprob: -8.505267143249512
    7. ' import' → logprob: -8.630267143249512
    8. '    ' → logprob: -9.380267143249512
    9. '  ' → logprob: -9.755267143249512
    10. 'pass' → logprob: -10.380267143249512

Token 11: '.set' (ID: 1230)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.005040321499109268
    2. '.set' → logprob: -6.005040168762207
    3. '.setdefault' → logprob: -6.005040168762207
    4. ' .' → logprob: -10.630040168762207
    5. '.argv' → logprob: -11.005040168762207
    6. '.exit' → logprob: -11.130040168762207
    7. '.stdout' → logprob: -11.880040168762207
    8. '.stdin' → logprob: -12.005040168762207
    9. '.max' → logprob: -12.130040168762207
    10. '.stderr' → logprob: -12.380040168762207

Token 12: 'rec' (ID: 9285)
  Prédit: '._'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '._' → logprob: -0.5261992812156677
    2. '_rec' → logprob: -1.2761993408203125
    3. '.set' → logprob: -3.7761993408203125
    4. '_' → logprob: -3.7761993408203125
    5. '_limit' → logprob: -3.7761993408203125
    6. 'rec' → logprob: -4.0261993408203125
    7. ' _' → logprob: -4.4011993408203125
    8. '_.' → logprob: -4.6511993408203125
    9. '_set' → logprob: -5.4011993408203125
    10. '.' → logprob: -5.4011993408203125

Token 13: 'ursion' (ID: 41658)
  Prédit: 'ursion'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ursion' → logprob: -0.00010473522706888616
    2. 'urs' → logprob: -9.500104904174805
    3. 'ur' → logprob: -11.000104904174805
    4. 'ursive' → logprob: -12.500104904174805
    5. 'limit' → logprob: -12.625104904174805
    6. '_limit' → logprob: -13.000104904174805
    7. '_' → logprob: -13.875104904174805
    8. 'usion' → logprob: -13.875104904174805
    9. 'urse' → logprob: -15.000104904174805
    10. 'ursor' → logprob: -15.125104904174805

Token 14: 'limit' (ID: 19698)
  Prédit: '_limit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_limit' → logprob: -0.0012499965960159898
    2. 'limit' → logprob: -6.75124979019165
    3. '_' → logprob: -9.876250267028809
    4. '_depth' → logprob: -11.501250267028809
    5. '_lim' → logprob: -11.626250267028809
    6. '_li' → logprob: -12.001250267028809
    7. 'lim' → logprob: -14.126250267028809
    8. 'al' → logprob: -14.251250267028809
    9. ' _' → logprob: -15.001250267028809
    10. ' limit' → logprob: -15.251250267028809

Token 15: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.6286106983898208e-05
    2. '(
' → logprob: -12.500016212463379
    3. '(

' → logprob: -12.875016212463379
    4. '("("' → logprob: -13.125016212463379
    5. '((' → logprob: -13.250016212463379
    6. '('' → logprob: -13.375016212463379
    7. ' (' → logprob: -13.375016212463379
    8. '(`' → logprob: -14.625016212463379
    9. '()' → logprob: -14.875016212463379
    10. '40' → logprob: -15.000016212463379

Token 16: '10' (ID: 702)
  Prédit: '100'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '100' → logprob: -0.06259605288505554
    2. '10' → logprob: -2.812596082687378
    3. '300' → logprob: -8.187596321105957
    4. '150' → logprob: -8.562596321105957
    5. '500' → logprob: -9.187596321105957
    6. '250' → logprob: -10.187596321105957
    7. '200' → logprob: -11.312596321105957
    8. ' ' → logprob: -13.062596321105957
    9. '   ' → logprob: -13.437596321105957
    10. '(' → logprob: -13.937596321105957

Token 17: ' **' (ID: 6240)
  Prédit: '000'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '000' → logprob: -0.2178293615579605
    2. '0' → logprob: -2.217829465866089
    3. '00' → logprob: -2.467829465866089
    4. '6' → logprob: -6.71782922744751
    5. '**' → logprob: -7.71782922744751
    6. '5' → logprob: -8.217829704284668
    7. '4' → logprob: -8.842829704284668
    8. ')' → logprob: -10.592829704284668
    9. '7' → logprob: -11.217829704284668
    10. '007' → logprob: -12.717829704284668

Token 18: ' ' (ID: 220)
  Prédit: '7'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -0.012691168114542961
    2. '6' → logprob: -4.512691020965576
    3. '8' → logprob: -6.762691020965576
    4. '9' → logprob: -7.637691020965576
    5. ' ' → logprob: -13.137691497802734
    6. '5' → logprob: -13.512691497802734
    7. '4' → logprob: -14.512691497802734
    8. '```' → logprob: -16.637691497802734
    9. ')' → logprob: -18.137691497802734
    10. '  ' → logprob: -19.012691497802734

Token 19: '6' (ID: 21)
  Prédit: '7'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -0.08455777168273926
    2. '6' → logprob: -2.5845577716827393
    3. '9' → logprob: -5.20955753326416
    4. '8' → logprob: -8.58455753326416
    5. '5' → logprob: -15.33455753326416
    6. '4' → logprob: -15.70955753326416
    7. '**' → logprob: -15.70955753326416
    8. '```' → logprob: -15.70955753326416
    9. '{' → logprob: -17.709558486938477
    10. '(' → logprob: -17.834558486938477

Token 20: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -3.7697225252486533e-06
    2. ' )' → logprob: -12.875003814697266
    3. ')
' → logprob: -14.500003814697266
    4. '))' → logprob: -14.750003814697266
    5. '   ' → logprob: -16.500003814697266
    6. '`)' → logprob: -16.625003814697266
    7. '')' → logprob: -16.750003814697266
    8. '```' → logprob: -17.250003814697266
    9. ')))' → logprob: -17.375003814697266
    10. ' ' → logprob: -17.500003814697266

Token 21: 'def' (ID: 1314)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5035234093666077
    2. '<|end|>' → logprob: -2.003523349761963
    3. '(' → logprob: -2.628523349761963
    4. '#' → logprob: -3.003523349761963
    5. ')' → logprob: -3.128523349761963
    6. '\n' → logprob: -3.753523349761963
    7. '```' → logprob: -3.753523349761963
    8. '' → logprob: -4.253523349761963
    9. '()' → logprob: -4.878523349761963
    10. 'newline' → logprob: -5.378523349761963

Token 22: ' get' (ID: 717)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.06799919158220291
    2. ' my' → logprob: -3.9429991245269775
    3. ' calculate' → logprob: -4.067999362945557
    4. ' space' → logprob: -4.442999362945557
    5. ' test' → logprob: -5.692999362945557
    6. ' compute' → logprob: -6.067999362945557
    7. ' set' → logprob: -6.317999362945557
    8. ' ' → logprob: -6.942999362945557
    9. ' new' → logprob: -7.192999362945557
    10. '_' → logprob: -7.192999362945557

Token 23: '_input' (ID: 12507)
  Prédit: '_rec'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_rec' → logprob: -0.5199007391929626
    2. '_max' → logprob: -1.2699007987976074
    3. '_' → logprob: -2.2699007987976074
    4. '_depth' → logprob: -5.144900798797607
    5. '_recursive' → logprob: -6.144900798797607
    6. '_user' → logprob: -6.644900798797607
    7. '_re' → logprob: -6.894900798797607
    8. '_stack' → logprob: -6.894900798797607
    9. '_limit' → logprob: -7.269900798797607
    10. '_system' → logprob: -7.269900798797607

Token 24: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.39316001534461975
    2. '():' → logprob: -1.3931599855422974
    3. '()' → logprob: -2.643160104751587
    4. '_' → logprob: -6.268159866333008
    5. '_parent' → logprob: -6.768159866333008
    6. '```' → logprob: -7.893159866333008
    7. '("("' → logprob: -8.643159866333008
    8. '(_' → logprob: -8.768159866333008
    9. '(prompt' → logprob: -8.768159866333008
    10. '_line' → logprob: -9.018159866333008

Token 25: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004865007475018501
    2. ' return' → logprob: -6.0048651695251465
    3. '()' → logprob: -7.0048651695251465
    4. 'return' → logprob: -7.3798651695251465
    5. '    
' → logprob: -7.5048651695251465
    6. '\n' → logprob: -10.129864692687988
    7. '\' → logprob: -10.379864692687988
    8. '(' → logprob: -10.504864692687988
    9. '```' → logprob: -10.754864692687988
    10. '    ' → logprob: -10.754864692687988

Token 26: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.6626889109611511
    2. '   ' → logprob: -0.7876889109611511
    3. ' return' → logprob: -3.537688970565796
    4. 'try' → logprob: -8.162689208984375
    5. 'input' → logprob: -8.912689208984375
    6. 'n' → logprob: -10.912689208984375
    7. 'user' → logprob: -11.037689208984375
    8. 'data' → logprob: -11.287689208984375
    9. 'line' → logprob: -11.287689208984375
    10. ' try' → logprob: -11.412689208984375

Token 27: ' sys' (ID: 12228)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.5049612522125244
    2. ' sys' → logprob: -1.0049612522125244
    3. ' int' → logprob: -3.6299612522125244
    4. 'input' → logprob: -5.754961013793945
    5. 'sys' → logprob: -7.629961013793945
    6. 'int' → logprob: -8.504961013793945
    7. ' list' → logprob: -10.379961013793945
    8. ' ' → logprob: -12.379961013793945
    9. '(sys' → logprob: -14.129961013793945
    10. '   ' → logprob: -14.254961013793945

Token 28: '.stdin' (ID: 93480)
  Prédit: '.stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdin' → logprob: -0.00011963568249484524
    2. '.' → logprob: -10.00011920928955
    3. '.stdout' → logprob: -10.00011920928955
    4. '.argv' → logprob: -11.00011920928955
    5. '.std' → logprob: -11.62511920928955
    6. ' .' → logprob: -13.50011920928955
    7. 'stdin' → logprob: -14.50011920928955
    8. '.stderr' → logprob: -14.87511920928955
    9. '.readline' → logprob: -15.12511920928955
    10. '.st' → logprob: -15.50011920928955

Token 29: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.00472761457785964
    2. '.' → logprob: -6.004727840423584
    3. '.read' → logprob: -6.129727840423584
    4. '.readlines' → logprob: -9.629727363586426
    5. '.Read' → logprob: -13.379727363586426
    6. 'read' → logprob: -13.629727363586426
    7. '.buffer' → logprob: -13.879727363586426
    8. '().' → logprob: -14.129727363586426
    9. '.get' → logprob: -15.129727363586426
    10. '```' → logprob: -15.254727363586426

Token 30: '

' (ID: 279)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00426572747528553
    2. '().' → logprob: -5.504265785217285
    3. '()
' → logprob: -9.254265785217285
    4. '()(' → logprob: -10.254265785217285
    5. '()

' → logprob: -11.254265785217285
    6. '(' → logprob: -11.504265785217285
    7. ' ()' → logprob: -11.879265785217285
    8. '()\' → logprob: -11.879265785217285
    9. '()]' → logprob: -12.754265785217285
    10. '()<' → logprob: -12.879265785217285

Token 31: 'def' (ID: 1314)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00044056313345208764
    2. '().' → logprob: -7.75044059753418
    3. '()
' → logprob: -12.75044059753418
    4. '()(' → logprob: -13.00044059753418
    5. '()

' → logprob: -13.62544059753418
    6. '()]' → logprob: -14.25044059753418
    7. '()<' → logprob: -14.50044059753418
    8. '(' → logprob: -14.87544059753418
    9. '())' → logprob: -15.00044059753418
    10. '()\' → logprob: -15.50044059753418

Token 32: ' parse' (ID: 8420)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.14707212150096893
    2. '_main' → logprob: -2.8970720767974854
    3. 'main' → logprob: -3.3970720767974854
    4. '_input' → logprob: -3.7720720767974854
    5. '()' → logprob: -4.3970723152160645
    6. '(' → logprob: -6.2720723152160645
    7. ' ()' → logprob: -6.6470723152160645
    8. ' solve' → logprob: -6.7720723152160645
    9. ' input' → logprob: -7.3970723152160645
    10. '_validate' → logprob: -7.3970723152160645

Token 33: '_first' (ID: 29347)
  Prédit: '_input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.4527493119239807
    2. '_line' → logprob: -1.077749252319336
    3. '(' → logprob: -4.077749252319336
    4. '(line' → logprob: -5.827749252319336
    5. '_' → logprob: -6.452749252319336
    6. '()' → logprob: -7.952749252319336
    7. '_data' → logprob: -8.202749252319336
    8. '(input' → logprob: -8.202749252319336
    9. '_int' → logprob: -8.327749252319336
    10. '(_' → logprob: -8.827749252319336

Token 34: '_line' (ID: 14418)
  Prédit: '_line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_line' → logprob: -0.00040660108788870275
    2. '_' → logprob: -8.000406265258789
    3. '()' → logprob: -10.125406265258789
    4. '_token' → logprob: -11.125406265258789
    5. '_input' → logprob: -11.625406265258789
    6. 'line' → logprob: -12.875406265258789
    7. '_word' → logprob: -14.125406265258789
    8. ' _' → logprob: -14.500406265258789
    9. '_value' → logprob: -14.500406265258789
    10. '(' → logprob: -14.625406265258789

Token 35: '(input' (ID: 10054)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.10260474681854248
    2. '()' → logprob: -2.352604866027832
    3. '(' → logprob: -6.227604866027832
    4. ' ()' → logprob: -8.852604866027832
    5. ' ():' → logprob: -8.977604866027832
    6. '():
' → logprob: -9.602604866027832
    7. ':' → logprob: -11.102604866027832
    8. '_' → logprob: -11.727604866027832
    9. '_line' → logprob: -12.102604866027832
    10. '():

' → logprob: -12.102604866027832

Token 36: '_func' (ID: 22252)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.7268350124359131
    2. ')' → logprob: -0.9768350124359131
    3. '()' → logprob: -2.226835012435913
    4. '_line' → logprob: -3.476835012435913
    5. '_' → logprob: -7.351835250854492
    6. ' )' → logprob: -8.851835250854492
    7. '_)' → logprob: -9.101835250854492
    8. '(' → logprob: -9.226835250854492
    9. ' ())' → logprob: -9.601835250854492
    10. '();)' → logprob: -10.226835250854492

Token 37: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.4213479161262512
    2. '()' → logprob: -1.6713478565216064
    3. '():' → logprob: -2.0463478565216064
    4. ')' → logprob: -3.6713478565216064
    5. '())' → logprob: -7.0463480949401855
    6. '()):
' → logprob: -9.421347618103027
    7. '):
' → logprob: -9.796347618103027
    8. '():
' → logprob: -9.796347618103027
    9. ' ):' → logprob: -9.921347618103027
    10. '(' → logprob: -10.296347618103027

Token 38: '   ' (ID: 271)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.021120410412549973
    2. '()' → logprob: -4.771120548248291
    3. ' ():' → logprob: -4.896120548248291
    4. '   ' → logprob: -5.771120548248291
    5. '():
' → logprob: -7.271120548248291
    6. '(' → logprob: -7.771120548248291
    7. ' ()' → logprob: -8.021120071411133
    8. '):' → logprob: -8.396120071411133
    9. ':' → logprob: -10.146120071411133
    10. ' (' → logprob: -10.396120071411133

Token 39: ' n' (ID: 297)
  Prédit: ' line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' line' → logprob: -0.0744662806391716
    2. '   ' → logprob: -3.1994662284851074
    3. 'line' → logprob: -4.199466228485107
    4. ' input' → logprob: -4.449466228485107
    5. 'input' → logprob: -6.574466228485107
    6. ' =' → logprob: -7.574466228485107
    7. ' return' → logprob: -7.824466228485107
    8. '():' → logprob: -7.949466228485107
    9. '(line' → logprob: -8.074466705322266
    10. ' ' → logprob: -8.449466705322266

Token 40: '_k' (ID: 11637)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.2082778364419937
    2. ' =' → logprob: -1.8332778215408325
    3. '=' → logprob: -4.208277702331543
    4. ' ,' → logprob: -4.333277702331543
    5. '=int' → logprob: -9.958277702331543
    6. ' ' → logprob: -10.083277702331543
    7. ',int' → logprob: -11.083277702331543
    8. ')' → logprob: -12.333277702331543
    9. '_' → logprob: -12.458277702331543
    10. '  ' → logprob: -12.583277702331543

Token 41: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.103965625166893
    2. '=' → logprob: -2.4789655208587646
    3. ',' → logprob: -4.228965759277344
    4. ' ' → logprob: -8.853965759277344
    5. '_' → logprob: -9.728965759277344
    6. ' ,' → logprob: -10.228965759277344
    7. ')' → logprob: -10.353965759277344
    8. '  ' → logprob: -10.603965759277344
    9. '   ' → logprob: -10.978965759277344
    10. '_str' → logprob: -11.853965759277344

Token 42: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.5999111533164978
    2. ' input' → logprob: -0.8499111533164978
    3. 'list' → logprob: -4.224911212921143
    4. ' list' → logprob: -4.724911212921143
    5. 'int' → logprob: -8.974910736083984
    6. ' int' → logprob: -10.849910736083984
    7. 'map' → logprob: -11.224910736083984
    8. ' ' → logprob: -11.724910736083984
    9. ' map' → logprob: -12.224910736083984
    10. ' tuple' → logprob: -12.724910736083984

Token 43: '_func' (ID: 22252)
  Prédit: '_func'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_func' → logprob: -0.0003202114312443882
    2. '()' → logprob: -8.750320434570312
    3. 'func' → logprob: -9.875320434570312
    4. '```' → logprob: -10.750320434570312
    5. '()(' → logprob: -10.875320434570312
    6. '_' → logprob: -11.000320434570312
    7. '_funcs' → logprob: -11.375320434570312
    8. '(' → logprob: -11.875320434570312
    9. '=' → logprob: -12.375320434570312
    10. '().' → logprob: -12.750320434570312

Token 44: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.006716079078614712
    2. '()' → logprob: -5.006716251373291
    3. ' ().' → logprob: -14.756715774536133
    4. '(' → logprob: -15.881715774536133
    5. '()
' → logprob: -16.256715774536133
    6. '()

' → logprob: -17.131715774536133
    7. '()).' → logprob: -17.631715774536133
    8. '.strip' → logprob: -18.131715774536133
    9. '())' → logprob: -18.381715774536133
    10. '()\' → logprob: -18.506715774536133

Token 45: 'split' (ID: 13627)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.09198594838380814
    2. 'split' → logprob: -2.5919859409332275
    3. 'rstrip' → logprob: -4.341986179351807
    4. 'read' → logprob: -16.46698570251465
    5. 'rs' → logprob: -16.84198570251465
    6. ' strip' → logprob: -17.34198570251465
    7. ' split' → logprob: -18.21698570251465
    8. '```' → logprob: -18.71698570251465
    9. 'rst' → logprob: -18.84198570251465
    10. 'str' → logprob: -18.96698570251465

Token 46: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.1100478544831276
    2. '(' → logprob: -2.4850478172302246
    3. '('' → logprob: -3.9850478172302246
    4. '("("' → logprob: -6.110047817230225
    5. '("' → logprob: -10.485048294067383
    6. '())' → logprob: -11.860048294067383
    7. '()]' → logprob: -12.235048294067383
    8. '`()' → logprob: -12.610048294067383
    9. '```' → logprob: -12.985048294067383
    10. '();' → logprob: -13.360048294067383

Token 47: '   ' (ID: 271)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.477956622838974
    2. '   ' → logprob: -1.8529566526412964
    3. '<|end|>' → logprob: -2.852956533432007
    4. '(' → logprob: -3.352956533432007
    5. '()' → logprob: -3.602956533432007
    6. ' ' → logprob: -3.727956533432007
    7. '(n' → logprob: -3.727956533432007
    8. '[n' → logprob: -4.227956771850586
    9. '    
' → logprob: -5.102956771850586
    10. '  ' → logprob: -5.477956771850586

Token 48: ' return' (ID: 622)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.082467220723629
    2. '   ' → logprob: -3.0824673175811768
    3. ' n' → logprob: -3.4574673175811768
    4. '[' → logprob: -7.207467079162598
    5. '[n' → logprob: -7.832467079162598
    6. ' return' → logprob: -8.707467079162598
    7. 'return' (adapté à ' return') → logprob: -8.832467079162598
    8. ' ' → logprob: -9.332467079162598
    9. '    
' → logprob: -9.457467079162598
    10. '	n' → logprob: -10.707467079162598

Token 49: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.2109425663948059
    2. ' int' → logprob: -1.7109425067901611
    3. '[int' → logprob: -4.71094274520874
    4. '(int' → logprob: -7.83594274520874
    5. ' list' → logprob: -10.585942268371582
    6. 'list' → logprob: -10.710942268371582
    7. ' map' → logprob: -11.210942268371582
    8. ' [' → logprob: -11.460942268371582
    9. 'map' → logprob: -11.710942268371582
    10. '   ' → logprob: -12.085942268371582

Token 50: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.1602267622947693
    2. '(' → logprob: -1.910226821899414
    3. '(

' → logprob: -13.910226821899414
    4. '(
' → logprob: -14.285226821899414
    5. ' (' → logprob: -15.160226821899414
    6. '('' → logprob: -15.160226821899414
    7. '((' → logprob: -16.035226821899414
    8. '(k' → logprob: -16.660226821899414
    9. '()' → logprob: -16.660226821899414
    10. '(`' → logprob: -17.035226821899414

Token 51: '_k' (ID: 11637)
  Prédit: '_k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_k' → logprob: -0.020671749487519264
    2. '(n' → logprob: -4.395671844482422
    3. '_n' → logprob: -4.895671844482422
    4. 'n' → logprob: -8.645671844482422
    5. 'k' → logprob: -9.145671844482422
    6. ' n' → logprob: -9.395671844482422
    7. '(' → logprob: -9.770671844482422
    8. ')' → logprob: -10.270671844482422
    9. ' _' → logprob: -10.270671844482422
    10. '[n' → logprob: -10.645671844482422

Token 52: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.1472419600977446e-06
    2. '0' → logprob: -14.125000953674316
    3. ' [' → logprob: -15.000000953674316
    4. ')' → logprob: -17.500001907348633
    5. '[
' → logprob: -18.125001907348633
    6. '```' → logprob: -18.500001907348633
    7. ' ' → logprob: -18.625001907348633
    8. '   ' → logprob: -18.750001907348633
    9. '\[' → logprob: -19.375001907348633
    10. '(' → logprob: -20.750001907348633

Token 53: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -6.704273118884885e-07
    2. ' ' → logprob: -14.375000953674316
    3. '1' → logprob: -17.25
    4. ')' → logprob: -17.75
    5. '   ' → logprob: -18.0
    6. '[' → logprob: -19.125
    7. '  ' → logprob: -20.0
    8. '`' → logprob: -20.0625
    9. ']' → logprob: -20.25
    10. '"' → logprob: -20.9375

Token 54: ']),' (ID: 19560)
  Prédit: '),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.08901253342628479
    2. ')' → logprob: -2.464012622833252
    3. ' ),' → logprob: -10.214012145996094
    4. ',' → logprob: -10.839012145996094
    5. '],' → logprob: -11.964012145996094
    6. '),(' → logprob: -12.464012145996094
    7. ')],' → logprob: -13.589012145996094
    8. ' )' → logprob: -13.839012145996094
    9. ']),' → logprob: -13.964012145996094
    10. ' ' → logprob: -14.339012145996094

Token 55: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.018150413408875465
    2. 'int' → logprob: -4.018150329589844
    3. '(int' → logprob: -15.643150329589844
    4. '	int' → logprob: -16.143150329589844
    5. ' ' → logprob: -16.643150329589844
    6. '    ' → logprob: -16.768150329589844
    7. '[int' → logprob: -17.018150329589844
    8. '   ' → logprob: -17.393150329589844
    9. ',int' → logprob: -17.518150329589844
    10. ' ' → logprob: -18.018150329589844

Token 56: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.054891426116228104
    2. '(' → logprob: -2.929891347885132
    3. ' (' → logprob: -12.679891586303711
    4. '(k' → logprob: -13.304891586303711
    5. 'n' → logprob: -13.679891586303711
    6. ')(' → logprob: -14.429891586303711
    7. '(
' → logprob: -14.554891586303711
    8. '("("' → logprob: -14.554891586303711
    9. '"' → logprob: -15.054891586303711
    10. '((' → logprob: -15.304891586303711

Token 57: '_k' (ID: 11637)
  Prédit: '_k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_k' → logprob: -2.1008713702030946e-06
    2. '_n' → logprob: -14.000001907348633
    3. 'k' → logprob: -14.125001907348633
    4. '-k' → logprob: -15.375001907348633
    5. '_' → logprob: -16.500001907348633
    6. '[' → logprob: -17.000001907348633
    7. ' ' → logprob: -17.125001907348633
    8. ')' → logprob: -17.750001907348633
    9. ' _' → logprob: -18.000001907348633
    10. ' k' → logprob: -18.375001907348633

Token 58: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.9504606825648807e-05
    2. '1' → logprob: -11.000019073486328
    3. ')' → logprob: -13.875019073486328
    4. ' [' → logprob: -14.250019073486328
    5. ')[' → logprob: -15.000019073486328
    6. '-' → logprob: -15.625019073486328
    7. '[-' → logprob: -15.875019073486328
    8. '   ' → logprob: -16.000019073486328
    9. '```' → logprob: -16.250019073486328
    10. '(' → logprob: -16.625019073486328

Token 59: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: 0.0
    2. '0' → logprob: -17.375
    3. '   ' → logprob: -17.625
    4. ' ' → logprob: -18.25
    5. '```' → logprob: -18.75
    6. '[' → logprob: -19.0
    7. ')' → logprob: -20.0
    8. '2' → logprob: -20.0
    9. '4' → logprob: -20.0
    10. '-' → logprob: -20.125

Token 60: '])

' (ID: 21045)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '])' → logprob: -0.004127792082726955
    2. ')' → logprob: -5.5041279792785645
    3. ')])' → logprob: -11.004127502441406
    4. ']' → logprob: -12.004127502441406
    5. ''])' → logprob: -12.004127502441406
    6. ' ])' → logprob: -12.129127502441406
    7. ')]' → logprob: -12.254127502441406
    8. '])]' → logprob: -12.629127502441406
    9. '))' → logprob: -12.879127502441406
    10. ']))' → logprob: -13.629127502441406

Token 61: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.24016627669334412
    2. '

' → logprob: -1.7401663064956665
    3. '
' → logprob: -3.615166187286377
    4. '<|end|>' → logprob: -4.990166187286377
    5. '```' → logprob: -6.240166187286377
    6. '<|end|>' → logprob: -6.990166187286377
    7. '\n' → logprob: -7.740166187286377
    8. ' def' → logprob: -7.865166187286377
    9. '\' → logprob: -8.115166664123535
    10. 'newline' → logprob: -9.365166664123535

Token 62: ' parse' (ID: 8420)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.3148423135280609
    2. ' solve' → logprob: -2.1898422241210938
    3. ' parse' → logprob: -2.4398422241210938
    4. ' calculate' → logprob: -4.064842224121094
    5. ' process' → logprob: -4.689842224121094
    6. ' read' → logprob: -5.064842224121094
    7. 'main' → logprob: -5.189842224121094
    8. ' compute' → logprob: -5.314842224121094
    9. ' factorial' → logprob: -5.314842224121094
    10. ' max' → logprob: -5.439842224121094

Token 63: '_next' (ID: 25436)
  Prédit: '_second'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_second' → logprob: -0.003352140076458454
    2. '_input' → logprob: -6.628352165222168
    3. '_th' → logprob: -7.628352165222168
    4. '_array' → logprob: -8.253352165222168
    5. '_remaining' → logprob: -8.253352165222168
    6. '_next' → logprob: -8.378352165222168
    7. '_rest' → logprob: -8.753352165222168
    8. '_list' → logprob: -8.878352165222168
    9. '_first' → logprob: -9.253352165222168
    10. '_line' → logprob: -9.378352165222168

Token 64: '_line' (ID: 14418)
  Prédit: '_line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_line' → logprob: -0.0024780353996902704
    2. '_lines' → logprob: -6.002478122711182
    3. '_token' → logprob: -14.377477645874023
    4. 'line' → logprob: -14.502477645874023
    5. '_' → logprob: -15.252477645874023
    6. '_n' → logprob: -15.377477645874023
    7. '_input' → logprob: -15.627477645874023
    8. '_LINE' → logprob: -15.752477645874023
    9. '```' → logprob: -16.502477645874023
    10. '_word' → logprob: -16.752477645874023

Token 65: '_as' (ID: 25206)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -4.1318875446449965e-05
    2. '(' → logprob: -10.125041007995605
    3. '(line' → logprob: -14.250041007995605
    4. ' (' → logprob: -14.875041007995605
    5. '():' → logprob: -16.750041961669922
    6. '(inp' → logprob: -17.250041961669922
    7. '(s' → logprob: -17.750041961669922
    8. 'input' → logprob: -18.000041961669922
    9. '(import' → logprob: -18.000041961669922
    10. '(output' → logprob: -18.375041961669922

Token 66: '_int' (ID: 12285)
  Prédit: '_list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -0.47692784667015076
    2. '_int' → logprob: -0.9769278764724731
    3. 'list' → logprob: -6.726927757263184
    4. 'int' → logprob: -7.226927757263184
    5. '_tuple' → logprob: -7.976927757263184
    6. '_set' → logprob: -8.101927757263184
    7. '_array' → logprob: -9.226927757263184
    8. 'ints' → logprob: -9.976927757263184
    9. '_in' → logprob: -10.101927757263184
    10. 'List' → logprob: -10.726927757263184

Token 67: '_list' (ID: 4162)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.05575542524456978
    2. '():' → logprob: -3.305755376815796
    3. '(' → logprob: -4.430755615234375
    4. 's' → logprob: -5.305755615234375
    5. 'def' → logprob: -8.555755615234375
    6. '()' → logprob: -8.805755615234375
    7. '():
' → logprob: -9.555755615234375
    8. 'input' → logprob: -9.680755615234375
    9. '(s' → logprob: -9.930755615234375
    10. '()(' → logprob: -9.930755615234375

Token 68: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0015761636896058917
    2. '(' → logprob: -6.501575946807861
    3. '():' → logprob: -9.62657642364502
    4. ' (' → logprob: -12.75157642364502
    5. '(line' → logprob: -12.87657642364502
    6. ':' → logprob: -14.50157642364502
    7. '   ' → logprob: -14.87657642364502
    8. '():
' → logprob: -15.25157642364502
    9. '(
' → logprob: -15.50157642364502
    10. '(import' → logprob: -15.50157642364502

Token 69: '_func' (ID: 22252)
  Prédit: '_func'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_func' → logprob: -2.117345684382599e-05
    2. ')_' → logprob: -11.625020980834961
    3. ')' → logprob: -13.000020980834961
    4. 'func' → logprob: -13.000020980834961
    5. '_FUNC' → logprob: -13.000020980834961
    6. ')(_' → logprob: -13.250020980834961
    7. '_' → logprob: -13.625020980834961
    8. '_funcs' → logprob: -13.750020980834961
    9. '_fun' → logprob: -14.500020980834961
    10. '```' → logprob: -15.250020980834961

Token 70: '):
' (ID: 1883)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.3752404749393463
    2. '()' → logprob: -1.750240445137024
    3. '):' → logprob: -2.0002405643463135
    4. ')' → logprob: -5.750240325927734
    5. '():
' → logprob: -8.500240325927734
    6. '()):
' → logprob: -9.250240325927734
    7. '(' → logprob: -9.250240325927734
    8. ' ):' → logprob: -9.500240325927734
    9. ' ():' → logprob: -9.500240325927734
    10. '())' → logprob: -9.875240325927734

Token 71: '   ' (ID: 271)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0008617922430858016
    2. ' ():' → logprob: -7.625861644744873
    3. '()' → logprob: -8.750862121582031
    4. '():
' → logprob: -9.125862121582031
    5. ':' → logprob: -9.750862121582031
    6. '   ' → logprob: -10.250862121582031
    7. '(' → logprob: -11.625862121582031
    8. ' ()' → logprob: -13.500862121582031
    9. '):' → logprob: -13.750862121582031
    10. ' :' → logprob: -14.250862121582031

Token 72: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.062064483761787415
    2. ' return' → logprob: -3.3120644092559814
    3. 'return' (adapté à ' return') → logprob: -3.9370644092559814
    4. ' list' → logprob: -6.0620646476745605
    5. 'list' → logprob: -6.8120646476745605
    6. 'input' → logprob: -8.062064170837402
    7. ' input' → logprob: -8.812064170837402
    8. 'int' → logprob: -8.812064170837402
    9. ' map' → logprob: -9.562064170837402
    10. 'map' → logprob: -10.187064170837402

Token 73: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.16040031611919403
    2. ' list' → logprob: -1.9104002714157104
    3. '[list' → logprob: -8.660400390625
    4. '[' → logprob: -13.285400390625
    5. ' [' → logprob: -14.535400390625
    6. '(list' → logprob: -14.785400390625
    7. '	list' → logprob: -15.660400390625
    8. ' ' → logprob: -17.160400390625
    9. '=list' → logprob: -17.410400390625
    10. '   ' → logprob: -17.660400390625

Token 74: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.0015478298300877213
    2. '(' → logprob: -6.501547813415527
    3. '(int' → logprob: -10.126547813415527
    4. '()' → logprob: -13.376547813415527
    5. 'map' → logprob: -13.501547813415527
    6. '_map' → logprob: -14.251547813415527
    7. '(
' → logprob: -14.751547813415527
    8. ' map' → logprob: -15.001547813415527
    9. '(

' → logprob: -15.251547813415527
    10. '	map' → logprob: -15.501547813415527

Token 75: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0007642415002919734
    2. 'int' → logprob: -7.2507643699646
    3. '(' → logprob: -10.250763893127441
    4. ',int' → logprob: -11.625763893127441
    5. ' int' → logprob: -13.000763893127441
    6. '```' → logprob: -13.000763893127441
    7. '<int' → logprob: -13.125763893127441
    8. '   ' → logprob: -13.500763893127441
    9. ')' → logprob: -14.375763893127441
    10. '=int' → logprob: -14.750763893127441

Token 76: ',' (ID: 11)
  Prédit: ',input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',input' → logprob: -0.3195069134235382
    2. ',' → logprob: -1.3195068836212158
    3. '(input' → logprob: -5.194507122039795
    4. ',(' → logprob: -8.194506645202637
    5. '(' → logprob: -8.569506645202637
    6. ' ,' → logprob: -8.819506645202637
    7. 'input' → logprob: -10.569506645202637
    8. ',int' → logprob: -11.319506645202637
    9. '(),' → logprob: -11.944506645202637
    10. ' (' → logprob: -12.194506645202637

Token 77: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.005241225939244032
    2. ' input' → logprob: -5.255241394042969
    3. ',input' → logprob: -12.630241394042969
    4. '(input' → logprob: -12.880241394042969
    5. '	input' → logprob: -14.005241394042969
    6. '   ' → logprob: -14.880241394042969
    7. '<input' → logprob: -16.25524139404297
    8. ')' → logprob: -16.63024139404297
    9. '))' → logprob: -17.13024139404297
    10. '
' → logprob: -17.13024139404297

Token 78: '_func' (ID: 22252)
  Prédit: '_func'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_func' → logprob: -4.4849443838757e-06
    2. 'func' → logprob: -12.375004768371582
    3. '_function' → logprob: -15.875004768371582
    4. '_FUNC' → logprob: -16.500003814697266
    5. '(_' → logprob: -17.750003814697266
    6. ')' → logprob: -18.250003814697266
    7. 'Func' → logprob: -18.625003814697266
    8. '```' → logprob: -18.625003814697266
    9. '(func' → logprob: -18.750003814697266
    10. '_.' → logprob: -18.875003814697266

Token 79: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.04623550549149513
    2. '()' → logprob: -3.4212355613708496
    3. '()))' → logprob: -4.42123556137085
    4. '())))' → logprob: -7.79623556137085
    5. '()));' → logprob: -10.171235084533691
    6. '())' → logprob: -11.546235084533691
    7. '))' → logprob: -11.921235084533691
    8. '   ' → logprob: -12.921235084533691
    9. '`()' → logprob: -13.046235084533691
    10. ' ' → logprob: -13.171235084533691

Token 80: 'split' (ID: 13627)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.20406655967235565
    2. 'split' → logprob: -1.704066514968872
    3. 'rstrip' → logprob: -5.954066753387451
    4. ')' → logprob: -9.954066276550293
    5. 'read' → logprob: -12.579066276550293
    6. ' strip' → logprob: -12.954066276550293
    7. ' split' → logprob: -14.829066276550293
    8. '))' → logprob: -15.829066276550293
    9. '```' → logprob: -15.829066276550293
    10. '(strip' → logprob: -16.07906723022461

Token 81: '()))

' (ID: 125972)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.10376077890396118
    2. '))' → logprob: -2.3537607192993164
    3. '()' → logprob: -5.978760719299316
    4. '())' → logprob: -7.103760719299316
    5. '(' → logprob: -8.728760719299316
    6. ')' → logprob: -10.978760719299316
    7. '()))
' → logprob: -11.978760719299316
    8. '()));' → logprob: -12.978760719299316
    9. '()))

' → logprob: -13.603760719299316
    10. '   ' → logprob: -13.728760719299316

Token 82: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.06972365826368332
    2. '
' → logprob: -3.069723606109619
    3. '

' → logprob: -5.069723606109619
    4. '<|end|>' → logprob: -5.319723606109619
    5. '#' → logprob: -5.819723606109619
    6. '\n' → logprob: -5.944723606109619
    7. '\' → logprob: -6.319723606109619
    8. '```' → logprob: -6.944723606109619
    9. '<|end|>' → logprob: -7.569723606109619
    10. 'n' → logprob: -8.319724082946777

Token 83: ' sort' (ID: 4506)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.06529707461595535
    2. ' solve' → logprob: -3.1902971267700195
    3. 'main' → logprob: -5.5652971267700195
    4. ' max' → logprob: -5.6902971267700195
    5. ' calculate' → logprob: -5.8152971267700195
    6. ' factorial' → logprob: -6.3152971267700195
    7. 'solve' → logprob: -6.4402971267700195
    8. ' compute' → logprob: -6.4402971267700195
    9. ' count' → logprob: -6.8152971267700195
    10. ' process' → logprob: -6.9402971267700195

Token 84: '_desc' (ID: 26683)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.6714822053909302
    2. '(' → logprob: -0.7964822053909302
    3. '_list' → logprob: -4.296482086181641
    4. 'ed' → logprob: -5.421482086181641
    5. '_items' → logprob: -5.421482086181641
    6. '_(' → logprob: -5.671482086181641
    7. '_data' → logprob: -6.296482086181641
    8. '(_' → logprob: -6.421482086181641
    9. '_array' → logprob: -6.671482086181641
    10. '(_)' → logprob: -7.046482086181641

Token 85: 'ending' (ID: 3258)
  Prédit: 'ending'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ending' → logprob: -0.16456574201583862
    2. '()' → logprob: -2.9145658016204834
    3. 'end' → logprob: -2.9145658016204834
    4. '_' → logprob: -4.039565563201904
    5. '```' → logprob: -4.539565563201904
    6. '(' → logprob: -4.789565563201904
    7. '_end' → logprob: -5.914565563201904
    8. '(_' → logprob: -7.039565563201904
    9. '():' → logprob: -7.289565563201904
    10. '(_)' → logprob: -7.289565563201904

Token 86: '(lst' (ID: 95688)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.019773725420236588
    2. '(lst' → logprob: -4.769773960113525
    3. '(list' → logprob: -5.394773960113525
    4. '(input' → logprob: -6.019773960113525
    5. '(ls' → logprob: -7.144773960113525
    6. '(line' → logprob: -7.519773960113525
    7. '(items' → logprob: -7.894773960113525
    8. '(def' → logprob: -8.019773483276367
    9. '(l' → logprob: -8.019773483276367
    10. '(data' → logprob: -8.519773483276367

Token 87: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.015075122006237507
    2. ')' → logprob: -4.265075206756592
    3. '(lst' → logprob: -7.515075206756592
    4. '(' → logprob: -8.890074729919434
    5. '):
' → logprob: -9.140074729919434
    6. ',' → logprob: -9.890074729919434
    7. ' ):' → logprob: -10.765074729919434
    8. '   ' → logprob: -11.390074729919434
    9. ')):' → logprob: -11.890074729919434
    10. '=' → logprob: -12.390074729919434

Token 88: '   ' (ID: 271)
  Prédit: '(lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lst' → logprob: -0.262558251619339
    2. 'lst' → logprob: -2.3875582218170166
    3. '(' → logprob: -2.6375582218170166
    4. '(sorted' → logprob: -3.7625582218170166
    5. 'sorted' → logprob: -4.012558460235596
    6. '   ' → logprob: -4.262558460235596
    7. ' lst' → logprob: -5.012558460235596
    8. '(
' → logprob: -5.887558460235596
    9. 'return' → logprob: -7.137558460235596
    10. ' sorted' → logprob: -7.637558460235596

Token 89: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.5140093564987183
    2. ' return' → logprob: -1.3890093564987183
    3. '   ' → logprob: -2.014009475708008
    4. 'sorted' → logprob: -4.264009475708008
    5. ' sorted' → logprob: -5.514009475708008
    6. 'lst' → logprob: -7.389009475708008
    7. ' lst' → logprob: -8.514009475708008
    8. ' ' → logprob: -8.639009475708008
    9. '```' → logprob: -11.139009475708008
    10. '  ' → logprob: -11.139009475708008

Token 90: ' sorted' (ID: 20099)
  Prédit: 'sorted'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sorted' → logprob: -0.2519318461418152
    2. ' sorted' → logprob: -1.50193190574646
    3. ' ' → logprob: -13.626932144165039
    4. '(sorted' → logprob: -13.751932144165039
    5. 's' → logprob: -15.626932144165039
    6. '   ' → logprob: -16.00193214416504
    7. '.sorted' → logprob: -16.50193214416504
    8. 'sort' → logprob: -16.75193214416504
    9. '[' → logprob: -17.50193214416504
    10. 'list' → logprob: -18.62693214416504

Token 91: '(lst' (ID: 95688)
  Prédit: '(lst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lst' → logprob: -0.16026687622070312
    2. '(' → logprob: -1.9102668762207031
    3. '(
' → logprob: -10.160266876220703
    4. '(ls' → logprob: -13.785266876220703
    5. '(

' → logprob: -14.160266876220703
    6. 'lst' → logprob: -14.660266876220703
    7. '(lista' → logprob: -14.910266876220703
    8. '(list' → logprob: -15.035266876220703
    9. ' (' → logprob: -15.410266876220703
    10. '(lhs' → logprob: -15.660266876220703

Token 92: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -4.000763510703109e-05
    2. ' ,' → logprob: -10.250040054321289
    3. 'lst' → logprob: -12.875040054321289
    4. ',l' → logprob: -14.750040054321289
    5. '(),' → logprob: -15.000040054321289
    6. ')' → logprob: -15.500040054321289
    7. 'reverse' → logprob: -15.500040054321289
    8. ',
' → logprob: -15.750040054321289
    9. ',ll' → logprob: -16.25004005432129
    10. '[::-' → logprob: -16.50004005432129

Token 93: ' reverse' (ID: 18199)
  Prédit: 'reverse'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'reverse' → logprob: -0.002476135268807411
    2. ' reverse' → logprob: -6.002476215362549
    3. '(reverse' → logprob: -15.00247573852539
    4. '   ' → logprob: -16.12747573852539
    5. '_reverse' → logprob: -18.12747573852539
    6. 're' → logprob: -18.12747573852539
    7. '.reverse' → logprob: -18.62747573852539
    8. '```' → logprob: -18.75247573852539
    9. 'rev' → logprob: -19.62747573852539
    10. ' ' → logprob: -19.87747573852539

Token 94: '=True' (ID: 7827)
  Prédit: '=True'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=True' → logprob: -0.029752571135759354
    2. '=' → logprob: -3.529752492904663
    3. '=
' → logprob: -14.404752731323242
    4. ')=' → logprob: -14.654752731323242
    5. 'True' → logprob: -14.904752731323242
    6. ')' → logprob: -14.904752731323242
    7. '=

' → logprob: -15.654752731323242
    8. '=T' → logprob: -16.779752731323242
    9. ' =' → logprob: -17.029752731323242
    10. '=False' → logprob: -17.154752731323242

Token 95: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9361264946837764e-07
    2. ')
' → logprob: -16.25
    3. '))' → logprob: -18.75
    4. ' )' → logprob: -19.625
    5. ')return' → logprob: -19.875
    6. ')

' → logprob: -20.0
    7. '),' → logprob: -20.125
    8. ')#' → logprob: -20.625
    9. ')`' → logprob: -20.625
    10. '<|end|>' → logprob: -21.5

Token 96: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.01975642517209053
    2. '
' → logprob: -4.769756317138672
    3. '

' → logprob: -4.894756317138672
    4. '<|end|>' → logprob: -6.144756317138672
    5. '\n' → logprob: -7.519756317138672
    6. '```' → logprob: -7.644756317138672
    7. '\' → logprob: -8.894756317138672
    8. '<|end|>' → logprob: -9.394756317138672
    9. '#' → logprob: -9.894756317138672
    10. 'import' → logprob: -10.519756317138672

Token 97: ' sort' (ID: 4506)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.005504811182618141
    2. ' max' → logprob: -6.255504608154297
    3. 'main' → logprob: -6.380504608154297
    4. ' solve' → logprob: -7.255504608154297
    5. ' calculate' → logprob: -7.755504608154297
    6. ' count' → logprob: -9.380504608154297
    7. '_main' → logprob: -9.505504608154297
    8. ' compute' → logprob: -9.630504608154297
    9. ' find' → logprob: -9.755504608154297
    10. ' process' → logprob: -9.880504608154297

Token 98: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.05068787932395935
    2. '_desc' → logprob: -3.050687789916992
    3. '<|end|>' → logprob: -8.675687789916992
    4. '_in' → logprob: -8.925687789916992
    5. '('_' → logprob: -9.175687789916992
    6. '(_' → logprob: -9.300687789916992
    7. '```' → logprob: -9.550687789916992
    8. '_reverse' → logprob: -9.550687789916992
    9. '_des' → logprob: -9.675687789916992
    10. '_less' → logprob: -9.800687789916992

Token 99: 'ascending' (ID: 163444)
  Prédit: 'ascending'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ascending' → logprob: -0.3133203387260437
    2. 'descending' → logprob: -1.3133203983306885
    3. 'asc' → logprob: -10.06332015991211
    4. 'by' → logprob: -11.93832015991211
    5. 'desc' → logprob: -12.18832015991211
    6. ' ascending' → logprob: -13.56332015991211
    7. 'list' → logprob: -14.18832015991211
    8. '```' → logprob: -14.56332015991211
    9. 'Ascending' → logprob: -14.81332015991211
    10. 'def' → logprob: -14.93832015991211

Token 100: '(lst' (ID: 95688)
  Prédit: '(lst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lst' → logprob: -0.00023298001906368881
    2. '(' → logprob: -8.375232696533203
    3. ' (' → logprob: -13.500232696533203
    4. '(list' → logprob: -15.375232696533203
    5. '(lista' → logprob: -15.375232696533203
    6. '(ls' → logprob: -15.375232696533203
    7. '(lhs' → logprob: -16.250232696533203
    8. '(
' → logprob: -16.750232696533203
    9. '(l' → logprob: -16.750232696533203
    10. '(lbl' → logprob: -17.750232696533203

Token 101: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0005574395763687789
    2. '):
' → logprob: -8.125557899475098
    3. ')' → logprob: -8.875557899475098
    4. '(lst' → logprob: -9.250557899475098
    5. ' ):' → logprob: -11.000557899475098
    6. '   ' → logprob: -12.125557899475098
    7. '):
' → logprob: -13.625557899475098
    8. ',' → logprob: -14.125557899475098
    9. 'lst' → logprob: -14.750557899475098
    10. ' ' → logprob: -14.750557899475098

Token 102: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.027484437450766563
    2. '(lst' → logprob: -3.65248441696167
    3. 'return' → logprob: -7.65248441696167
    4. ' return' → logprob: -7.90248441696167
    5. '(sorted' → logprob: -8.902484893798828
    6. ' lst' → logprob: -9.527484893798828
    7. ' sorted' → logprob: -10.402484893798828
    8. 'sorted' → logprob: -10.527484893798828
    9. 'lst' → logprob: -10.527484893798828
    10. ' ' → logprob: -10.652484893798828

Token 103: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.21381138265132904
    2. ' return' → logprob: -1.9638113975524902
    3. '   ' → logprob: -2.9638113975524902
    4. 'sorted' → logprob: -7.71381139755249
    5. ' sorted' → logprob: -9.713810920715332
    6. ' ' → logprob: -10.213810920715332
    7. '	return' → logprob: -11.963810920715332
    8. '  ' → logprob: -13.713810920715332
    9. 'def' → logprob: -14.338810920715332
    10. '(sorted' → logprob: -14.463810920715332

Token 104: ' sorted' (ID: 20099)
  Prédit: 'sorted'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sorted' → logprob: -1.688212614681106e-05
    2. ' sorted' → logprob: -11.000017166137695
    3. '(sorted' → logprob: -16.250017166137695
    4. '   ' → logprob: -16.875017166137695
    5. '.sorted' → logprob: -17.875017166137695
    6. 'lst' → logprob: -18.250017166137695
    7. 'sort' → logprob: -18.750017166137695
    8. '```' → logprob: -19.250017166137695
    9. 's' → logprob: -19.875017166137695
    10. '  ' → logprob: -20.750017166137695

Token 105: '(lst' (ID: 95688)
  Prédit: '(lst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lst' → logprob: -0.4744049310684204
    2. '(' → logprob: -0.9744049310684204
    3. '(list' → logprob: -8.724405288696289
    4. '(ls' → logprob: -9.224405288696289
    5. '(
' → logprob: -10.849405288696289
    6. 'lst' → logprob: -11.474405288696289
    7. '(l' → logprob: -11.474405288696289
    8. '(lista' → logprob: -12.099405288696289
    9. '(sorted' → logprob: -12.974405288696289
    10. '(ll' → logprob: -13.099405288696289

Token 106: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002310719108209014
    2. '(lst' → logprob: -6.127310752868652
    3. 'lst' → logprob: -9.127310752868652
    4. '))' → logprob: -12.627310752868652
    5. ' lst' → logprob: -12.877310752868652
    6. '   ' → logprob: -13.002310752868652
    7. '[' → logprob: -13.502310752868652
    8. ')(' → logprob: -13.752310752868652
    9. '_lst' → logprob: -13.752310752868652
    10. ',' → logprob: -14.252310752868652

Token 107: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0020983952563256025
    2. '
' → logprob: -6.877098560333252
    3. '<|end|>' → logprob: -7.127098560333252
    4. '

' → logprob: -8.502098083496094
    5. '```' → logprob: -10.252098083496094
    6. 'import' → logprob: -11.627098083496094
    7. '<|end|>' → logprob: -12.627098083496094
    8. '#' → logprob: -12.752098083496094
    9. ' def' → logprob: -13.377098083496094
    10. '  
' → logprob: -14.127098083496094

Token 108: ' initialize' (ID: 18400)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.31613364815711975
    2. 'main' → logprob: -1.4411336183547974
    3. 'binary' → logprob: -4.441133499145508
    4. ' binary' → logprob: -5.191133499145508
    5. 'max' → logprob: -5.566133499145508
    6. ' max' → logprob: -5.816133499145508
    7. ' find' → logprob: -6.441133499145508
    8. 'calculate' → logprob: -6.566133499145508
    9. 'merge' → logprob: -7.316133499145508
    10. ' calculate' → logprob: -7.316133499145508

Token 109: '_binary' (ID: 77551)
  Prédit: '_array'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_array' → logprob: -0.4259325861930847
    2. '_list' → logprob: -2.1759326457977295
    3. '(' → logprob: -3.0509326457977295
    4. '_' → logprob: -3.4259326457977295
    5. '_counts' → logprob: -3.4259326457977295
    6. '_data' → logprob: -3.8009326457977295
    7. '_result' → logprob: -4.05093240737915
    8. '_counter' → logprob: -4.17593240737915
    9. '_results' → logprob: -4.92593240737915
    10. '_arrays' → logprob: -5.05093240737915

Token 110: '_search' (ID: 23642)
  Prédit: '_search'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_search' → logprob: -0.00015050210640765727
    2. 'search' → logprob: -9.125150680541992
    3. '_array' → logprob: -11.000150680541992
    4. '_counter' → logprob: -12.625150680541992
    5. '_tree' → logprob: -12.750150680541992
    6. '_index' → logprob: -12.875150680541992
    7. '_values' → logprob: -13.375150680541992
    8. '_stack' → logprob: -14.000150680541992
    9. '_answer' → logprob: -14.000150680541992
    10. '_vector' → logprob: -14.250150680541992

Token 111: '_bounds' (ID: 90408)
  Prédit: '(low'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(low' → logprob: -0.2157737761735916
    2. '_bounds' → logprob: -2.590773820877075
    3. '(lower' → logprob: -3.090773820877075
    4. '(' → logprob: -3.590773820877075
    5. '(start' → logprob: -3.965773820877075
    6. '(range' → logprob: -5.340773582458496
    7. '_range' → logprob: -5.465773582458496
    8. '(left' → logprob: -5.590773582458496
    9. '():' → logprob: -6.090773582458496
    10. '_params' → logprob: -6.215773582458496

Token 112: '(' (ID: 7)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.6883093118667603
    2. '(lst' → logprob: -1.5633093118667603
    3. '(n' → logprob: -2.1883091926574707
    4. '(low' → logprob: -2.1883091926574707
    5. '(min' → logprob: -4.063309192657471
    6. '(start' → logprob: -4.563309192657471
    7. '(lower' → logprob: -4.938309192657471
    8. '(target' → logprob: -5.063309192657471
    9. '(' → logprob: -5.438309192657471
    10. '(arr' → logprob: -5.688309192657471

Token 113: 'aa' (ID: 3545)
  Prédit: 'lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'lst' → logprob: -0.3897639811038971
    2. 'arr' → logprob: -1.5147639513015747
    3. 'low' → logprob: -4.264763832092285
    4. 'lo' → logprob: -4.264763832092285
    5. '):' → logprob: -4.639763832092285
    6. 'n' → logprob: -4.639763832092285
    7. ')' → logprob: -4.764763832092285
    8. 'left' → logprob: -4.764763832092285
    9. '):
' → logprob: -5.264763832092285
    10. 'values' → logprob: -5.264763832092285

Token 114: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.25156328082084656
    2. '):
' → logprob: -2.001563310623169
    3. ',' → logprob: -2.626563310623169
    4. ')' → logprob: -4.75156307220459
    5. 'a' → logprob: -6.12656307220459
    6. 'lst' → logprob: -7.12656307220459
    7. '):

' → logprob: -7.25156307220459
    8. 'st' → logprob: -7.50156307220459
    9. ')):' → logprob: -7.75156307220459
    10. '[]):' → logprob: -8.87656307220459

Token 115: ' ff' (ID: 35384)
  Prédit: 'bb'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bb' → logprob: -0.2437509447336197
    2. ' bb' → logprob: -1.8687509298324585
    3. 'k' → logprob: -4.368751049041748
    4. ' n' → logprob: -4.743751049041748
    5. 'n' → logprob: -4.743751049041748
    6. 'kk' → logprob: -5.743751049041748
    7. 'target' → logprob: -5.868751049041748
    8. ' k' → logprob: -5.868751049041748
    9. 'key' → logprob: -6.118751049041748
    10. 'mm' → logprob: -6.368751049041748

Token 116: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.09072080254554749
    2. ',' → logprob: -2.5907208919525146
    3. '):
' → logprob: -4.7157206535339355
    4. ')' → logprob: -5.9657206535339355
    5. ' ):' → logprob: -9.715721130371094
    6. '):
' → logprob: -10.090721130371094
    7. ',a' → logprob: -10.590721130371094
    8. 'def' → logprob: -11.215721130371094
    9. ' ,' → logprob: -11.590721130371094
    10. '):

' → logprob: -11.715721130371094

Token 117: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3754698932170868
    2. '():
' → logprob: -1.5004699230194092
    3. 'max' → logprob: -3.875469923019409
    4. '):
' → logprob: -4.00046968460083
    5. '():' → logprob: -4.00046968460083
    6. 'min' → logprob: -4.75046968460083
    7. 'def' → logprob: -5.50046968460083
    8. ':
' → logprob: -5.62546968460083
    9. '(max' → logprob: -5.62546968460083
    10. '(min' → logprob: -5.75046968460083

Token 118: ' l' (ID: 305)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9821265339851379
    2. 'low' → logprob: -1.3571264743804932
    3. 'left' → logprob: -1.4821264743804932
    4. 'max' → logprob: -2.607126474380493
    5. 'l' (adapté à ' l') → logprob: -3.982126474380493
    6. 'return' → logprob: -4.107126712799072
    7. 'min' → logprob: -4.232126712799072
    8. 'n' → logprob: -5.107126712799072
    9. 'lower' → logprob: -5.357126712799072
    10. ' left' → logprob: -6.357126712799072

Token 119: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.23220865428447723
    2. '=' → logprob: -2.732208728790283
    3. 'ow' → logprob: -2.857208728790283
    4. 'eft' → logprob: -3.107208728790283
    5. ',' → logprob: -3.357208728790283
    6. 'ower' → logprob: -5.357208728790283
    7. 'o' → logprob: -8.232208251953125
    8. 'e' → logprob: -9.607208251953125
    9. 'ef' → logprob: -9.982208251953125
    10. '```' → logprob: -11.357208251953125

Token 120: ' -' (ID: 533)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.10180456191301346
    2. '1' → logprob: -2.351804494857788
    3. ' ' → logprob: -6.726804733276367
    4. '-' → logprob: -8.101804733276367
    5. 'min' → logprob: -9.976804733276367
    6. ' -' → logprob: -10.351804733276367
    7. 'max' → logprob: -12.101804733276367
    8. '   ' → logprob: -12.476804733276367
    9. '(' → logprob: -13.101804733276367
    10. '  ' → logprob: -13.976804733276367

Token 121: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.000386105413781479
    2. '10' → logprob: -8.000386238098145
    3. '(' → logprob: -10.625386238098145
    4. ' ' → logprob: -11.625386238098145
    5. '-' → logprob: -12.000386238098145
    6. 'float' → logprob: -12.125386238098145
    7. '100' → logprob: -12.750386238098145
    8. 'max' → logprob: -14.250386238098145
    9. '(-' → logprob: -14.375386238098145
    10. '2' → logprob: -15.000386238098145

Token 122: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6271014213562012
    2. ' 
' → logprob: -1.3771014213562012
    3. 'r' → logprob: -3.252101421356201
    4. ' ' → logprob: -3.252101421356201
    5. '  
' → logprob: -3.252101421356201
    6. '<|end|>' → logprob: -3.627101421356201
    7. 'n' → logprob: -3.752101421356201
    8. 'l' → logprob: -4.002101421356201
    9. ',' → logprob: -4.877101421356201
    10. '    
' → logprob: -5.002101421356201

Token 123: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.07457659393548965
    2. 'r' → logprob: -2.8245766162872314
    3. ' 
' → logprob: -4.824576377868652
    4. '<|end|>' → logprob: -6.574576377868652
    5. '  
' → logprob: -6.824576377868652
    6. '    
' → logprob: -7.699576377868652
    7. 'n' → logprob: -8.199576377868652
    8. 'h' → logprob: -8.324576377868652
    9. 'l' → logprob: -8.324576377868652
    10. '   
' → logprob: -8.699576377868652

Token 124: ' r' (ID: 428)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' (adapté à ' r') → logprob: -0.10565395653247833
    2. ' r' → logprob: -3.355654001235962
    3. '=' → logprob: -3.605654001235962
    4. 'max' → logprob: -3.855654001235962
    5. ' =' → logprob: -4.230653762817383
    6. ' max' → logprob: -7.480653762817383
    7. '
' → logprob: -7.730653762817383
    8. '=max' → logprob: -8.230653762817383
    9. '10' → logprob: -8.355653762817383
    10. '```' → logprob: -8.480653762817383

Token 125: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.02055741846561432
    2. '=' → logprob: -3.895557403564453
    3. ' ' → logprob: -11.145557403564453
    4. ',' → logprob: -14.770557403564453
    5. 's' → logprob: -15.895557403564453
    6. '=max' → logprob: -16.020557403564453
    7. 'max' → logprob: -16.270557403564453
    8. '=int' → logprob: -16.895557403564453
    9. '=len' → logprob: -17.083057403564453
    10. ')' → logprob: -17.333057403564453

Token 126: ' aa' (ID: 40260)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '10' → logprob: -0.0517059825360775
    2. ' ' → logprob: -3.426706075668335
    3. 'max' → logprob: -4.426705837249756
    4. ' max' → logprob: -5.801705837249756
    5. '1' → logprob: -6.551705837249756
    6. 'int' → logprob: -7.176705837249756
    7. 'sum' → logprob: -8.176706314086914
    8. '(' → logprob: -8.926706314086914
    9. 'ff' → logprob: -10.051706314086914
    10. '2' → logprob: -10.051706314086914

Token 127: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.06160851567983627
    2. '[-' → logprob: -3.1866085529327393
    3. 'x' → logprob: -4.06160831451416
    4. 'n' → logprob: -8.56160831451416
    5. 'len' → logprob: -8.68660831451416
    6. 'r' → logprob: -9.06160831451416
    7. 'max' → logprob: -9.18660831451416
    8. '[len' → logprob: -9.31160831451416
    9. '.__' → logprob: -9.43660831451416
    10. '0' → logprob: -9.56160831451416

Token 128: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.01423320360481739
    2. '-' → logprob: -4.264233112335205
    3. ' ' → logprob: -10.139233589172363
    4. ' -' → logprob: -11.139233589172363
    5. '
' → logprob: -11.889233589172363
    6. ':' → logprob: -13.514233589172363
    7. ']' → logprob: -13.764233589172363
    8. '[' → logprob: -13.889233589172363
    9. 'len' → logprob: -13.889233589172363
    10. 'index' → logprob: -14.139233589172363

Token 129: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.002059023128822446
    2. ']*' → logprob: -6.252058982849121
    3. ' ]' → logprob: -9.502058982849121
    4. ']+' → logprob: -10.252058982849121
    5. '[' → logprob: -11.627058982849121
    6. ']*(' → logprob: -13.627058982849121
    7. '//' → logprob: -13.627058982849121
    8. ']
' → logprob: -13.752058982849121
    9. '*' → logprob: -14.439558982849121
    10. ']]' → logprob: -14.689558982849121

Token 130: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.31346970796585083
    2. '*' → logprob: -1.313469648361206
    3. '+' → logprob: -10.188469886779785
    4. '//' → logprob: -10.563469886779785
    5. '*f' → logprob: -10.563469886779785
    6. ' ' → logprob: -10.688469886779785
    7. ' //' → logprob: -10.688469886779785
    8. ' +' → logprob: -10.813469886779785
    9. '**' → logprob: -11.438469886779785
    10. '*num' → logprob: -12.188469886779785

Token 131: ' ff' (ID: 35384)
  Prédit: ' ff'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ff' → logprob: -0.35074302554130554
    2. 'ff' → logprob: -1.225743055343628
    3. '	ff' → logprob: -6.475742816925049
    4. 'max' → logprob: -8.100743293762207
    5. ' max' → logprob: -8.600743293762207
    6. '(ff' → logprob: -8.850743293762207
    7. 'f' → logprob: -10.475743293762207
    8. '100' → logprob: -10.600743293762207
    9. ' ' → logprob: -10.850743293762207
    10. '_ff' → logprob: -11.225743293762207

Token 132: '[-' (ID: 17503)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.00010270876373397186
    2. '0' → logprob: -9.375102996826172
    3. '[-' → logprob: -11.750102996826172
    4. 'max' → logprob: -12.000102996826172
    5. ' [' → logprob: -13.875102996826172
    6. '[max' → logprob: -14.625102996826172
    7. '```' → logprob: -14.750102996826172
    8. ']' → logprob: -14.875102996826172
    9. '1' → logprob: -15.000102996826172
    10. '][' → logprob: -15.500102996826172

Token 133: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.1756367712223437e-05
    2. ' ' → logprob: -12.000011444091797
    3. '<|end|>' → logprob: -12.750011444091797
    4. ']' → logprob: -13.875011444091797
    5. '```' → logprob: -14.812511444091797
    6. '(' → logprob: -15.937511444091797
    7. '-' → logprob: -16.187511444091797
    8. '   ' → logprob: -16.250011444091797
    9. '<|end|>' → logprob: -16.312511444091797
    10. ')' → logprob: -16.437511444091797

Token 134: ']
' (ID: 1592)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 135: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004612049553543329
    2. '
' → logprob: -5.879611968994141
    3. ' return' → logprob: -7.379611968994141
    4. 'return' → logprob: -7.504611968994141
    5. '    
' → logprob: -8.25461196899414
    6. '<|end|>' → logprob: -8.62961196899414
    7. '	return' → logprob: -8.87961196899414
    8. ' ' → logprob: -11.12961196899414
    9. '  
' → logprob: -11.75461196899414
    10. '  ' → logprob: -12.25461196899414

Token 136: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014462228864431381
    2. '
' → logprob: -4.514461994171143
    3. ' return' → logprob: -7.264461994171143
    4. ' ' → logprob: -7.389461994171143
    5. '    
' → logprob: -7.514461994171143
    6. '<|end|>' → logprob: -7.514461994171143
    7. 'return' (adapté à ' return') → logprob: -8.3894624710083
    8. '	return' → logprob: -8.3894624710083
    9. '\n' → logprob: -8.5144624710083
    10. '  ' → logprob: -9.1394624710083

Token 137: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.0010374527191743255
    2. ' l' → logprob: -6.87603759765625
    3. '(l' → logprob: -12.62603759765625
    4. '	l' → logprob: -14.25103759765625
    5. ' (' → logprob: -14.62603759765625
    6. '   ' → logprob: -15.87603759765625
    7. ',' → logprob: -16.25103759765625
    8. ',l' → logprob: -16.87603759765625
    9. ' ' → logprob: -17.37603759765625
    10. ' ' → logprob: -18.12603759765625

Token 138: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.01281098835170269
    2. ',r' → logprob: -4.512811183929443
    3. ' ,' → logprob: -6.387811183929443
    4. 'r' → logprob: -10.137810707092285
    5. ' r' → logprob: -11.387810707092285
    6. ' ' → logprob: -11.512810707092285
    7. ',
' → logprob: -11.887810707092285
    8. ',l' → logprob: -12.387810707092285
    9. '+' → logprob: -12.512810707092285
    10. ' +' → logprob: -13.762810707092285

Token 139: ' r' (ID: 428)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.014163628220558167
    2. ' r' → logprob: -4.264163494110107
    3. ' ' → logprob: -15.639163970947266
    4. '	r' → logprob: -17.389163970947266
    5. ' ' → logprob: -18.889163970947266
    6. '   ' → logprob: -19.389163970947266
    7. '<|end|>' → logprob: -19.764163970947266
    8. '    ' → logprob: -20.014163970947266
    9. '  ' → logprob: -20.514163970947266
    10. '(r' → logprob: -20.639163970947266

Token 140: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.448182612657547
    2. '<|end|>' → logprob: -1.3231825828552246
    3. '
' → logprob: -2.4481825828552246
    4. '

' → logprob: -5.698182582855225
    5. '<|end|>' → logprob: -6.073182582855225
    6. '#' → logprob: -7.198182582855225
    7. '\n' → logprob: -7.698182582855225
    8. '```' → logprob: -7.698182582855225
    9. '  
' → logprob: -8.573183059692383
    10. '[' → logprob: -8.823183059692383

Token 141: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.3168189823627472
    2. '<|end|>' → logprob: -1.3168189525604248
    3. '
' → logprob: -6.691819190979004
    4. '#' → logprob: -6.691819190979004
    5. '<|end|>' → logprob: -7.316819190979004
    6. '```' → logprob: -8.816819190979004
    7. ':' → logprob: -9.941819190979004
    8. ' def' → logprob: -10.191819190979004
    9. '.' → logprob: -10.566819190979004
    10. '  
' → logprob: -10.566819190979004

Token 142: ' calculate' (ID: 17950)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.8631616830825806
    2. ' binary' → logprob: -1.7381616830825806
    3. 'main' → logprob: -2.488161563873291
    4. ' calculate' → logprob: -2.988161563873291
    5. ' minimize' → logprob: -3.113161563873291
    6. ' can' → logprob: -3.488161563873291
    7. ' solve' → logprob: -3.488161563873291
    8. 'binary' → logprob: -3.488161563873291
    9. ' check' → logprob: -3.613161563873291
    10. ' compute' → logprob: -3.738161563873291

Token 143: '_ex' (ID: 5724)
  Prédit: '_mid'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_mid' → logprob: -1.421096682548523
    2. '_cost' → logprob: -1.671096682548523
    3. '_required' → logprob: -1.671096682548523
    4. '_needed' → logprob: -2.5460968017578125
    5. '_total' → logprob: -2.9210968017578125
    6. '_min' → logprob: -2.9210968017578125
    7. '_max' → logprob: -2.9210968017578125
    8. '_possible' → logprob: -4.0460968017578125
    9. '_pen' → logprob: -4.1710968017578125
    10. '(' → logprob: -4.4210968017578125

Token 144: 'cess' (ID: 1185)
  Prédit: 'pected'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pected' → logprob: -0.1482279896736145
    2. 'haust' → logprob: -2.7732279300689697
    3. 'p' → logprob: -3.1482279300689697
    4. 'penditure' → logprob: -4.773228168487549
    5. 'pen' → logprob: -5.398228168487549
    6. 'ponent' → logprob: -5.773228168487549
    7. 'pens' → logprob: -5.773228168487549
    8. 'pression' → logprob: -6.773228168487549
    9. '_pen' → logprob: -6.898228168487549
    10. 'pect' → logprob: -7.023228168487549

Token 145: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.27581658959388733
    2. '(a' → logprob: -1.900816559791565
    3. '(l' → logprob: -3.6508166790008545
    4. '(amount' → logprob: -3.7758166790008545
    5. '(def' → logprob: -5.400816440582275
    6. '_amount' → logprob: -5.650816440582275
    7. '(n' → logprob: -5.650816440582275
    8. '(sum' → logprob: -5.775816440582275
    9. '(h' → logprob: -6.275816440582275
    10. '(ff' → logprob: -6.525816440582275

Token 146: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.010309021919965744
    2. 'a' → logprob: -6.635309219360352
    3. '_i' → logprob: -6.635309219360352
    4. 'i' → logprob: -6.760309219360352
    5. '_amount' → logprob: -6.760309219360352
    6. ',i' → logprob: -6.885309219360352
    7. ',a' → logprob: -7.010309219360352
    8. ' ,' → logprob: -7.510309219360352
    9. '_,' → logprob: -7.635309219360352
    10. '_value' → logprob: -7.760309219360352

Token 147: ' f' (ID: 285)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.5913646221160889
    2. 'b' → logprob: -0.9663646221160889
    3. ' f' → logprob: -3.966364622116089
    4. 'k' → logprob: -4.466364860534668
    5. 'mid' → logprob: -4.591364860534668
    6. 'm' → logprob: -4.966364860534668
    7. ' b' → logprob: -5.091364860534668
    8. 'aa' → logprob: -6.216364860534668
    9. ' mid' → logprob: -6.341364860534668
    10. 'ff' → logprob: -6.466364860534668

Token 148: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.01240887027233839
    2. '):
' → logprob: -5.13740873336792
    3. '):' → logprob: -5.26240873336792
    4. ',a' → logprob: -8.262409210205078
    5. '):

' → logprob: -8.762409210205078
    6. ',i' → logprob: -9.012409210205078
    7. 'or' → logprob: -9.137409210205078
    8. '[' → logprob: -9.262409210205078
    9. 'a' → logprob: -9.387409210205078
    10. ')' → logprob: -9.512409210205078

Token 149: ' m' (ID: 284)
  Prédit: 'mid'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'mid' → logprob: -0.34456753730773926
    2. 'x' → logprob: -1.8445675373077393
    3. 'm' → logprob: -2.5945675373077393
    4. ' mid' → logprob: -3.2195675373077393
    5. ' x' → logprob: -4.96956729888916
    6. ' ' → logprob: -6.21956729888916
    7. '   ' → logprob: -6.46956729888916
    8. ' m' → logprob: -6.46956729888916
    9. 'max' → logprob: -6.84456729888916
    10. 'k' → logprob: -7.34456729888916

Token 150: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.015979943796992302
    2. ',' → logprob: -5.015979766845703
    3. '):
' → logprob: -5.390979766845703
    4. 'ax' → logprob: -5.640979766845703
    5. ')' → logprob: -7.765979766845703
    6. 'a' → logprob: -8.640979766845703
    7. ' ):' → logprob: -8.640979766845703
    8. 'e' → logprob: -9.640979766845703
    9. '):
' → logprob: -9.765979766845703
    10. 'x' → logprob: -9.765979766845703

Token 151: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00043674863991327584
    2. ':
' → logprob: -9.250436782836914
    3. 'total' → logprob: -9.250436782836914
    4. 'ex' → logprob: -9.625436782836914
    5. ' excess' → logprob: -10.125436782836914
    6. ':' → logprob: -10.375436782836914
    7. ' total' → logprob: -10.375436782836914
    8. '):
' → logprob: -10.875436782836914
    9. ',' → logprob: -11.250436782836914
    10. '    
' → logprob: -11.250436782836914

Token 152: ' b' (ID: 287)
  Prédit: 'ex'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ex' → logprob: -0.7060315012931824
    2. 'total' → logprob: -0.7060315012931824
    3. '   ' → logprob: -4.956031322479248
    4. ' total' → logprob: -5.956031322479248
    5. 'res' → logprob: -6.331031322479248
    6. ' excess' → logprob: -7.956031322479248
    7. 'sum' → logprob: -8.456031799316406
    8. 'result' → logprob: -8.456031799316406
    9. 'n' → logprob: -8.956031799316406
    10. 'return' → logprob: -9.081031799316406

Token 153: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6050769090652466
    2. ' =' → logprob: -0.9800769090652466
    3. 'ex' → logprob: -3.230076789855957
    4. ',' → logprob: -4.480076789855957
    5. 'a' → logprob: -5.480076789855957
    6. '=a' → logprob: -5.855076789855957
    7. '=[]' → logprob: -6.105076789855957
    8. 'sum' → logprob: -6.105076789855957
    9. 'e' → logprob: -6.230076789855957
    10. '=len' → logprob: -6.230076789855957

Token 154: ' m' (ID: 284)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.4141760766506195
    2. '[a' → logprob: -1.539176106452942
    3. 'max' → logprob: -3.4141759872436523
    4. '[]' → logprob: -3.5391759872436523
    5. 'a' → logprob: -3.9141759872436523
    6. '[max' → logprob: -4.164175987243652
    7. '[(' → logprob: -4.664175987243652
    8. '[' → logprob: -4.664175987243652
    9. '[i' → logprob: -6.414175987243652
    10. '[]
' → logprob: -6.539175987243652

Token 155: ' //' (ID: 602)
  Prédit: ' //'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.12057819962501526
    2. '//' → logprob: -2.2455782890319824
    3. ' -' → logprob: -5.870578289031982
    4. '-' → logprob: -6.245578289031982
    5. '
' → logprob: -6.495578289031982
    6. ' ' → logprob: -7.495578289031982
    7. '#' → logprob: -8.370577812194824
    8. '[' → logprob: -8.745577812194824
    9. ' #' → logprob: -9.120577812194824
    10. ' //
' → logprob: -9.245577812194824

Token 156: ' f' (ID: 285)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.11284402757883072
    2. 'a' → logprob: -2.2378439903259277
    3. ' f' → logprob: -11.237844467163086
    4. ' a' → logprob: -12.987844467163086
    5. '   ' → logprob: -13.237844467163086
    6. '1' → logprob: -13.862844467163086
    7. ' ' → logprob: -14.925344467163086
    8. '  ' → logprob: -14.925344467163086
    9. 'm' → logprob: -15.050344467163086
    10. '	f' → logprob: -15.300344467163086

Token 157: '
' (ID: 198)
  Prédit: ' -'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.1812998205423355
    2. '<|end|>' → logprob: -2.681299924850464
    3. '-' → logprob: -3.056299924850464
    4. '
' → logprob: -3.556299924850464
    5. ' if' → logprob: -4.931299686431885
    6. 'def' → logprob: -5.556299686431885
    7. '   ' → logprob: -5.931299686431885
    8. ' for' → logprob: -6.056299686431885
    9. '-a' → logprob: -6.431299686431885
    10. 'if' → logprob: -6.931299686431885

Token 158: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.058266788721084595
    2. ' for' → logprob: -3.3082668781280518
    3. ' if' → logprob: -5.308266639709473
    4. ' excess' → logprob: -5.433266639709473
    5. '
' → logprob: -5.808266639709473
    6. '    
' → logprob: -6.308266639709473
    7. 'for' → logprob: -6.433266639709473
    8. 'ex' → logprob: -6.933266639709473
    9. ' total' → logprob: -7.433266639709473
    10. ',' → logprob: -7.808266639709473

Token 159: ' return' (ID: 622)
  Prédit: 'ex'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ex' → logprob: -0.7269464135169983
    2. '   ' → logprob: -1.8519463539123535
    3. 'return' (adapté à ' return') → logprob: -2.1019463539123535
    4. 'if' → logprob: -2.7269463539123535
    5. 'max' → logprob: -2.9769463539123535
    6. 'sum' → logprob: -2.9769463539123535
    7. 'total' → logprob: -3.6019463539123535
    8. 'a' → logprob: -4.2269463539123535
    9. ' excess' → logprob: -5.3519463539123535
    10. 'res' → logprob: -5.8519463539123535

Token 160: ' max' (ID: 2999)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.14208292961120605
    2. 'max' → logprob: -2.142082929611206
    3. '[max' → logprob: -4.767083168029785
    4. '[a' → logprob: -5.517083168029785
    5. 'a' → logprob: -6.517083168029785
    6. '[' → logprob: -7.392083168029785
    7. ' sum' → logprob: -8.642083168029785
    8. ' max' → logprob: -9.642083168029785
    9. '[b' → logprob: -10.017083168029785
    10. '[(' → logprob: -10.017083168029785

Token 161: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.009657168760895729
    2. '(a' → logprob: -4.759657382965088
    3. '((' → logprob: -7.384657382965088
    4. '(max' → logprob: -8.00965690612793
    5. '0' → logprob: -10.63465690612793
    6. '([' → logprob: -10.75965690612793
    7. '(x' → logprob: -10.75965690612793
    8. 'a' → logprob: -11.63465690612793
    9. 'max' → logprob: -12.13465690612793
    10. '(sum' → logprob: -13.13465690612793

Token 162: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.6495775580406189
    2. '-' → logprob: -0.7745775580406189
    3. '[i' → logprob: -4.274577617645264
    4. '0' → logprob: -7.399577617645264
    5. '-b' → logprob: -7.524577617645264
    6. 'b' → logprob: -7.899577617645264
    7. '   ' → logprob: -8.024577140808105
    8. '[' → logprob: -8.149577140808105
    9. '_i' → logprob: -8.399577140808105
    10. 'i' → logprob: -8.524577140808105

Token 163: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.01814994215965271
    2. ' b' → logprob: -4.0181498527526855
    3. ' ' → logprob: -17.518150329589844
    4. '	b' → logprob: -19.518150329589844
    5. ')b' → logprob: -20.643150329589844
    6. '   ' → logprob: -21.268150329589844
    7. '>b' → logprob: -21.768150329589844
    8. ',b' → logprob: -22.393150329589844
    9. ' б' → logprob: -22.393150329589844
    10. ' ' → logprob: -22.518150329589844

Token 164: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0010454319417476654
    2. '0' → logprob: -7.001045227050781
    3. ' ,' → logprob: -9.001045227050781
    4. ' if' → logprob: -12.376045227050781
    5. '),' → logprob: -12.876045227050781
    6. 'if' → logprob: -13.501045227050781
    7. ')' → logprob: -13.751045227050781
    8. ' ' → logprob: -14.001045227050781
    9. '[' → logprob: -15.751045227050781
    10. '1' → logprob: -16.37604522705078

Token 165: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.001702675479464233
    2. ' ' → logprob: -6.376702785491943
    3. ')' → logprob: -15.751702308654785
    4. '   ' → logprob: -16.2517032623291
    5. '
' → logprob: -16.4392032623291
    6. '  ' → logprob: -16.7517032623291
    7. '```' → logprob: -17.8142032623291
    8. '1' → logprob: -17.8767032623291
    9. '[' → logprob: -18.0642032623291
    10. '

' → logprob: -18.4392032623291

Token 166: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00012356207298580557
    2. ' ' → logprob: -9.000123977661133
    3. ')' → logprob: -16.000123977661133
    4. '
' → logprob: -18.375123977661133
    5. '   ' → logprob: -18.750123977661133
    6. '1' → logprob: -19.000123977661133
    7. '```' → logprob: -19.125123977661133
    8. '  ' → logprob: -19.250123977661133
    9. '00' → logprob: -20.312623977661133
    10. '  
' → logprob: -20.375123977661133

Token 167: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -8.41866585687967e-06
    2. ' )' → logprob: -11.750008583068848
    3. ')
' → logprob: -15.000008583068848
    4. ')return' → logprob: -16.87500762939453
    5. '<|end|>' → logprob: -17.50000762939453
    6. '))' → logprob: -18.12500762939453
    7. '}' → logprob: -18.12500762939453
    8. '),' → logprob: -18.37500762939453
    9. ' ' → logprob: -18.62500762939453
    10. '   ' → logprob: -18.75000762939453

Token 168: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0003013809327967465
    2. '<|end|>' → logprob: -8.375301361083984
    3. ')' → logprob: -10.875301361083984
    4. 'for' → logprob: -11.125301361083984
    5. '```' → logprob: -11.625301361083984
    6. '<|end|>' → logprob: -11.750301361083984
    7. '#' → logprob: -12.125301361083984
    8. ' def' → logprob: -12.625301361083984
    9. 'from' → logprob: -12.750301361083984
    10. '[' → logprob: -13.500301361083984

Token 169: ' check' (ID: 2371)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -1.664244532585144
    2. 'main' → logprob: -1.664244532585144
    3. ' minimize' → logprob: -2.1642446517944336
    4. 'def' → logprob: -2.1642446517944336
    5. 'can' → logprob: -2.4142446517944336
    6. ' main' → logprob: -3.0392446517944336
    7. 'solve' → logprob: -3.0392446517944336
    8. 'calculate' → logprob: -3.2892446517944336
    9. 'minimum' → logprob: -3.2892446517944336
    10. 'binary' → logprob: -3.6642446517944336

Token 170: '_mid' (ID: 105824)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5199114680290222
    2. '(m' → logprob: -1.644911527633667
    3. '(a' → logprob: -2.019911527633667
    4. 'def' → logprob: -3.769911527633667
    5. ' (' → logprob: -3.769911527633667
    6. '(n' → logprob: -5.519911289215088
    7. '(max' → logprob: -5.644911289215088
    8. '(amount' → logprob: -5.644911289215088
    9. '(mid' → logprob: -5.644911289215088
    10. '(len' → logprob: -6.144911289215088

Token 171: '(' (ID: 7)
  Prédit: '(a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.7170841693878174
    2. '(' → logprob: -1.0920841693878174
    3. '(mid' → logprob: -2.4670841693878174
    4. '(input' → logprob: -3.0920841693878174
    5. '(l' → logprob: -3.7170841693878174
    6. 'point' → logprob: -5.217083930969238
    7. '_point' → logprob: -5.217083930969238
    8. '(m' → logprob: -5.592083930969238
    9. '(point' → logprob: -5.842083930969238
    10. '_value' → logprob: -6.967083930969238

Token 172: 'aa' (ID: 3545)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.40229758620262146
    2. 'aa' → logprob: -1.9022976160049438
    3. 'mid' → logprob: -2.1522974967956543
    4. 'a' → logprob: -3.1522974967956543
    5. ',' → logprob: -4.402297496795654
    6. ' aa' → logprob: -5.527297496795654
    7. ')' → logprob: -5.902297496795654
    8. ' m' → logprob: -7.027297496795654
    9. 'mm' → logprob: -7.027297496795654
    10. ' mid' → logprob: -7.527297496795654

Token 173: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0005303950165398419
    2. ' ,' → logprob: -7.625530242919922
    3. ',m' → logprob: -11.375530242919922
    4. ',a' → logprob: -11.750530242919922
    5. ',l' → logprob: -12.375530242919922
    6. '):' → logprob: -12.875530242919922
    7. ',n' → logprob: -12.875530242919922
    8. '   ' → logprob: -13.250530242919922
    9. ',
' → logprob: -13.375530242919922
    10. ',r' → logprob: -13.500530242919922

Token 174: ' ff' (ID: 35384)
  Prédit: 'ff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ff' → logprob: -0.04301871359348297
    2. ' ff' → logprob: -3.1680188179016113
    3. '	ff' → logprob: -12.043018341064453
    4. ' ' → logprob: -12.668018341064453
    5. 'bb' → logprob: -13.168018341064453
    6. '(ff' → logprob: -13.293018341064453
    7. '_ff' → logprob: -13.418018341064453
    8. '   ' → logprob: -13.668018341064453
    9. 'f' → logprob: -13.793018341064453
    10. '```' → logprob: -14.168018341064453

Token 175: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00021915239631198347
    2. ' ,' → logprob: -8.625219345092773
    3. ',m' → logprob: -11.000219345092773
    4. 'm' → logprob: -11.375219345092773
    5. ',
' → logprob: -12.250219345092773
    6. '   ' → logprob: -13.500219345092773
    7. '‌,' → logprob: -13.500219345092773
    8. '_,' → logprob: -14.250219345092773
    9. ',n' → logprob: -14.500219345092773
    10. '),' → logprob: -15.125219345092773

Token 176: ' m' (ID: 284)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.22153392434120178
    2. 'mid' → logprob: -1.9715338945388794
    3. ' m' → logprob: -3.846534013748169
    4. ' mid' → logprob: -3.971534013748169
    5. 'mm' → logprob: -4.09653377532959
    6. ' mm' → logprob: -7.09653377532959
    7. 'x' → logprob: -7.22153377532959
    8. 'bb' → logprob: -8.47153377532959
    9. 'a' → logprob: -9.47153377532959
    10. 'mi' → logprob: -9.59653377532959

Token 177: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.10063523799180984
    2. '):' → logprob: -2.350635290145874
    3. '):
' → logprob: -8.225635528564453
    4. ' ,' → logprob: -9.725635528564453
    5. '   ' → logprob: -10.350635528564453
    6. ')' → logprob: -10.350635528564453
    7. ' ):' → logprob: -11.350635528564453
    8. '):
' → logprob: -12.475635528564453
    9. ':' → logprob: -12.913135528564453
    10. ',n' → logprob: -13.163135528564453

Token 178: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.2810802459716797
    2. ' k' → logprob: -1.9060802459716797
    3. 'n' → logprob: -3.2810802459716797
    4. ' n' → logprob: -3.9060802459716797
    5. 'K' → logprob: -4.15608024597168
    6. ' ' → logprob: -4.90608024597168
    7. ' K' → logprob: -5.15608024597168
    8. ')' → logprob: -6.15608024597168
    9. '   ' → logprob: -6.71858024597168
    10. '):
' → logprob: -6.84358024597168

Token 179: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0007774694240652025
    2. '):
' → logprob: -7.375777244567871
    3. ')' → logprob: -9.000777244567871
    4. ',' → logprob: -11.000777244567871
    5. ' ):' → logprob: -12.000777244567871
    6. '):
' → logprob: -12.750777244567871
    7. ':' → logprob: -14.625777244567871
    8. '):

' → logprob: -15.000777244567871
    9. '   ' → logprob: -15.750777244567871
    10. '[]):' → logprob: -16.375778198242188

Token 180: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -5.0020742492051795e-05
    2. '    
' → logprob: -10.750049591064453
    3. ' total' → logprob: -11.750049591064453
    4. '
' → logprob: -12.125049591064453
    5. '```' → logprob: -12.500049591064453
    6. ' count' → logprob: -12.750049591064453
    7. 'total' → logprob: -13.000049591064453
    8. 'count' → logprob: -13.375049591064453
    9. 'ex' → logprob: -13.625049591064453
    10. ' excess' → logprob: -14.000049591064453

Token 181: ' s' (ID: 265)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5121933221817017
    2. 'ex' → logprob: -1.6371933221817017
    3. 'total' → logprob: -2.887193202972412
    4. ' excess' → logprob: -3.512193202972412
    5. 'count' → logprob: -3.637193202972412
    6. ' total' → logprob: -3.762193202972412
    7. ' count' → logprob: -3.887193202972412
    8. '
' → logprob: -4.012193202972412
    9. '    
' → logprob: -4.262193202972412
    10. 'cnt' → logprob: -5.387193202972412

Token 182: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.09453921020030975
    2. '=' → logprob: -2.719539165496826
    3. 'um' → logprob: -3.719539165496826
    4. 'u' → logprob: -11.469539642333984
    5. '_' → logprob: -11.594539642333984
    6. ' ' → logprob: -11.719539642333984
    7. '=sum' → logprob: -11.844539642333984
    8. 'ums' → logprob: -12.344539642333984
    9. 'umm' → logprob: -12.594539642333984
    10. '_=' → logprob: -12.594539642333984

Token 183: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.01815064437687397
    2. ' ' → logprob: -4.018150806427002
    3. '   ' → logprob: -14.893150329589844
    4. ' ' → logprob: -15.643150329589844
    5. 'um' → logprob: -16.455650329589844
    6. '  ' → logprob: -16.518150329589844
    7. 'sum' → logprob: -16.705650329589844
    8. '
' → logprob: -17.830650329589844
    9. '۰' → logprob: -18.018150329589844
    10. '	' → logprob: -18.268150329589844

Token 184: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -2.451116051815916e-05
    2. ' ' → logprob: -10.625024795532227
    3. 'um' → logprob: -16.000024795532227
    4. 'sum' → logprob: -16.750024795532227
    5. '   ' → logprob: -18.125024795532227
    6. '۰' → logprob: -19.312524795532227
    7. '000' → logprob: -19.375024795532227
    8. 'm' → logprob: -19.562524795532227
    9. ' ' → logprob: -19.687524795532227
    10. '00' → logprob: -19.750024795532227

Token 185: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.08096098899841309
    2. '   ' → logprob: -2.580960988998413
    3. '<|end|>' → logprob: -6.830961227416992
    4. '    
' → logprob: -7.705961227416992
    5. ' for' → logprob: -8.705961227416992
    6. '  
' → logprob: -9.205961227416992
    7. '
' → logprob: -9.455961227416992
    8. ',' → logprob: -10.330961227416992
    9. '<|end|>' → logprob: -10.330961227416992
    10. '	for' → logprob: -10.330961227416992

Token 186: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0578940287232399
    2. '
' → logprob: -2.932893991470337
    3. ' for' → logprob: -6.557894229888916
    4. '	for' → logprob: -7.182894229888916
    5. '    
' → logprob: -8.182893753051758
    6. '<|end|>' → logprob: -8.182893753051758
    7. 'for' → logprob: -8.807893753051758
    8. '<|end|>' → logprob: -10.807893753051758
    9. ',' → logprob: -10.932893753051758
    10. '
' → logprob: -11.182893753051758

Token 187: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.14749835431575775
    2. '   ' → logprob: -2.147498369216919
    3. ' for' → logprob: -3.897498369216919
    4. 'n' → logprob: -10.39749813079834
    5. '	for' → logprob: -10.89749813079834
    6. '
' → logprob: -11.27249813079834
    7. ' ' → logprob: -13.14749813079834
    8. '    
' → logprob: -13.27249813079834
    9. '  ' → logprob: -13.77249813079834
    10. ' n' → logprob: -14.14749813079834

Token 188: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.029269123449921608
    2. ' a' → logprob: -4.154269218444824
    3. 'i' → logprob: -4.404269218444824
    4. ' i' → logprob: -7.029269218444824
    5. '(a' → logprob: -11.029269218444824
    6. ' ' → logprob: -12.529269218444824
    7. 'aa' → logprob: -12.654269218444824
    8. '	a' → logprob: -13.029269218444824
    9. '(i' → logprob: -13.279269218444824
    10. ' (' → logprob: -13.404269218444824

Token 189: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.005196166690438986
    2. ',a' → logprob: -5.8801960945129395
    3. ',f' → logprob: -6.1301960945129395
    4. ',i' → logprob: -9.005196571350098
    5. ' ,' → logprob: -10.255196571350098
    6. 'a' → logprob: -10.630196571350098
    7. 'f' → logprob: -11.630196571350098
    8. 'i' → logprob: -12.005196571350098
    9. '_,' → logprob: -12.130196571350098
    10. ',b' → logprob: -13.255196571350098

Token 190: ' f' (ID: 285)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.0005580356228165329
    2. ' f' → logprob: -7.500557899475098
    3. 'b' → logprob: -12.750557899475098
    4. 'ff' → logprob: -13.750557899475098
    5. '   ' → logprob: -14.750557899475098
    6. '	f' → logprob: -15.000557899475098
    7. ' ' → logprob: -16.000558853149414
    8. '```' → logprob: -16.375558853149414
    9. 'fi' → logprob: -16.875558853149414
    10. '_f' → logprob: -17.625558853149414

Token 191: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.08407905697822571
    2. 'in' → logprob: -2.8340790271759033
    3. ',' → logprob: -3.8340790271759033
    4. ' ,' → logprob: -8.584078788757324
    5. 's' → logprob: -10.584078788757324
    6. ' ' → logprob: -11.459078788757324
    7. 'a' → logprob: -12.459078788757324
    8. '   ' → logprob: -13.209078788757324
    9. ',in' → logprob: -13.334078788757324
    10. '	in' → logprob: -13.459078788757324

Token 192: ' zip' (ID: 16216)
  Prédit: 'zip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'zip' → logprob: -0.008616935461759567
    2. ' zip' → logprob: -4.758616924285889
    3. '(zip' → logprob: -13.008617401123047
    4. '_zip' → logprob: -16.633617401123047
    5. 'z' → logprob: -16.883617401123047
    6. '   ' → logprob: -16.883617401123047
    7. '
' → logprob: -17.008617401123047
    8. '.zip' → logprob: -17.383617401123047
    9. ' ' → logprob: -19.008617401123047
    10. 'Zip' → logprob: -19.758617401123047

Token 193: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -3.128163257315464e-07
    2. '(sorted' → logprob: -15.5
    3. ' (' → logprob: -17.875
    4. 'sorted' → logprob: -18.375
    5. '((' → logprob: -18.625
    6. '(
' → logprob: -19.25
    7. '
' → logprob: -20.5
    8. '(range' → logprob: -20.5
    9. '(ff' → logprob: -21.0
    10. '   ' → logprob: -21.625

Token 194: 'aa' (ID: 3545)
  Prédit: 'aa'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aa' → logprob: -0.008664678782224655
    2. '(' → logprob: -4.758664608001709
    3. 'AA' → logprob: -10.633665084838867
    4. ' aa' → logprob: -11.008665084838867
    5. '   ' → logprob: -12.008665084838867
    6. ')' → logprob: -13.508665084838867
    7. '
' → logprob: -14.008665084838867
    8. 'aaa' → logprob: -14.883665084838867
    9. '#aa' → logprob: -15.383665084838867
    10. '  ' → logprob: -15.758665084838867

Token 195: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0003582263889256865
    2. ' ,' → logprob: -8.000358581542969
    3. ',f' → logprob: -10.875358581542969
    4. ',
' → logprob: -13.750358581542969
    5. '   ' → logprob: -14.250358581542969
    6. '(ff' → logprob: -14.625358581542969
    7. 'ff' → logprob: -15.000358581542969
    8. '[' → logprob: -15.500358581542969
    9. ',,' → logprob: -15.625358581542969
    10. '‌,' → logprob: -15.750358581542969

Token 196: ' ff' (ID: 35384)
  Prédit: 'ff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ff' → logprob: -5.598092684522271e-05
    2. ' ff' → logprob: -10.000056266784668
    3. 'f' → logprob: -11.500056266784668
    4. '(ff' → logprob: -15.750056266784668
    5. '	ff' → logprob: -16.12505531311035
    6. '_ff' → logprob: -16.87505531311035
    7. 'fff' → logprob: -18.37505531311035
    8. '.ff' → logprob: -19.00005531311035
    9. 'ft' → logprob: -19.62505531311035
    10. 'ffs' → logprob: -19.62505531311035

Token 197: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.22559671103954315
    2. '):
' → logprob: -1.6005966663360596
    3. ')' → logprob: -9.47559642791748
    4. '):
' → logprob: -10.47559642791748
    5. ',' → logprob: -11.10059642791748
    6. ':' → logprob: -11.10059642791748
    7. '   ' → logprob: -11.47559642791748
    8. '):

' → logprob: -11.60059642791748
    9. '():' → logprob: -11.60059642791748
    10. '()):
' → logprob: -12.22559642791748

Token 198: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.009015973657369614
    2. '
' → logprob: -5.509016036987305
    3. ' s' → logprob: -6.009016036987305
    4. ',' → logprob: -7.634016036987305
    5. '<|end|>' → logprob: -7.759016036987305
    6. '        
' → logprob: -8.009016036987305
    7. ':' → logprob: -8.134016036987305
    8. ':
' → logprob: -8.884016036987305
    9. '   ' → logprob: -9.009016036987305
    10. '  
' → logprob: -9.259016036987305

Token 199: ' excess' (ID: 16968)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.9897046089172363
    2. '       ' → logprob: -1.1147046089172363
    3. ' s' → logprob: -1.8647046089172363
    4. '   ' → logprob: -2.3647046089172363
    5. '
' → logprob: -2.9897046089172363
    6. '           ' → logprob: -7.364704608917236
    7. '
' → logprob: -9.239704132080078
    8. ' ' → logprob: -9.989704132080078
    9. '        
' → logprob: -9.989704132080078
    10. '  ' → logprob: -10.239704132080078

Token 200: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.21662433445453644
    2. '=' → logprob: -1.71662437915802
    3. ' +=' → logprob: -4.2166242599487305
    4. '+=' → logprob: -8.34162425994873
    5. '   ' → logprob: -9.34162425994873
    6. ' ' → logprob: -11.71662425994873
    7. '    ' → logprob: -12.34162425994873
    8. '  ' → logprob: -12.59162425994873
    9. 's' → logprob: -13.84162425994873
    10. ')' → logprob: -14.09162425994873

Token 201: ' calculate' (ID: 17950)
  Prédit: 'calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'calculate' → logprob: -0.04866946488618851
    2. ' calculate' → logprob: -3.0486695766448975
    3. ' max' → logprob: -10.048669815063477
    4. 'max' → logprob: -10.298669815063477
    5. '   ' → logprob: -12.298669815063477
    6. 'calc' → logprob: -15.673669815063477
    7. '.calculate' → logprob: -16.173669815063477
    8. ' ' → logprob: -16.423669815063477
    9. 'alculate' → logprob: -16.673669815063477
    10. 'cal' → logprob: -17.298669815063477

Token 202: '_ex' (ID: 5724)
  Prédit: '_ex'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_ex' → logprob: -0.0003488129877950996
    2. 'ex' → logprob: -8.000349044799805
    3. '(a' → logprob: -11.375349044799805
    4. 'a' → logprob: -14.625349044799805
    5. 's' → logprob: -14.625349044799805
    6. '(ex' → logprob: -15.125349044799805
    7. '_' → logprob: -15.125349044799805
    8. '	ex' → logprob: -16.500349044799805
    9. 'Ex' → logprob: -16.875349044799805
    10. '(' → logprob: -17.125349044799805

Token 203: 'cess' (ID: 1185)
  Prédit: 'cess'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cess' → logprob: -0.4313165843486786
    2. 'ess' → logprob: -1.056316614151001
    3. '(a' → logprob: -6.306316375732422
    4. 'c' → logprob: -7.431316375732422
    5. 'a' → logprob: -9.681316375732422
    6. 'ccess' → logprob: -10.306316375732422
    7. 'e' → logprob: -10.306316375732422
    8. '(' → logprob: -11.306316375732422
    9. 'ec' → logprob: -11.556316375732422
    10. '
' → logprob: -12.056316375732422

Token 204: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -3.128163257315464e-07
    2. '(' → logprob: -15.75
    3. 'a' → logprob: -15.75
    4. '(
' → logprob: -18.375
    5. '(A' → logprob: -19.125
    6. ' (' → logprob: -19.75
    7. 'def' → logprob: -21.0
    8. '   ' → logprob: -21.5
    9. '(ai' → logprob: -21.75
    10. '(abs' → logprob: -22.125

Token 205: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.012553802691400051
    2. ',f' → logprob: -4.387553691864014
    3. ' ,' → logprob: -10.387554168701172
    4. 'f' → logprob: -11.887554168701172
    5. ',
' → logprob: -12.387554168701172
    6. ',s' → logprob: -14.137554168701172
    7. ',

' → logprob: -15.262554168701172
    8. ',b' → logprob: -15.637554168701172
    9. ' f' → logprob: -15.887554168701172
    10. ',m' → logprob: -16.387554168701172

Token 206: ' f' (ID: 285)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -5.157039049663581e-05
    2. ' f' → logprob: -9.875051498413086
    3. '	f' → logprob: -17.625051498413086
    4. '   ' → logprob: -18.625051498413086
    5. '_f' → logprob: -18.750051498413086
    6. '<|end|>' → logprob: -18.750051498413086
    7. ' ' → logprob: -19.625051498413086
    8. 'ф' → logprob: -19.875051498413086
    9. '(f' → logprob: -20.125051498413086
    10. ',f' → logprob: -20.250051498413086

Token 207: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0022538607008755207
    2. ',m' → logprob: -6.127254009246826
    3. 'm' → logprob: -9.752253532409668
    4. ' ,' → logprob: -11.502253532409668
    5. ' m' → logprob: -15.002253532409668
    6. '[m' → logprob: -16.627254486083984
    7. ')' → logprob: -17.502254486083984
    8. ',
' → logprob: -17.502254486083984
    9. '(m' → logprob: -17.752254486083984
    10. 's' → logprob: -18.002254486083984

Token 208: ' m' (ID: 284)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.000488110730657354
    2. ' m' → logprob: -7.62548828125
    3. '<|end|>' → logprob: -17.12548828125
    4. ')' → logprob: -18.50048828125
    5. '	m' → logprob: -18.75048828125
    6. ')m' → logprob: -19.37548828125
    7. ' ' → logprob: -20.62548828125
    8. 'м' → logprob: -20.87548828125
    9. '_m' → logprob: -21.37548828125
    10. '<|end|>' → logprob: -21.50048828125

Token 209: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3875114321708679
    2. ')
' → logprob: -1.1375114917755127
    3. '       ' → logprob: -7.637511253356934
    4. ')
' → logprob: -8.762511253356934
    5. ')

' → logprob: -13.887511253356934
    6. ' )' → logprob: -15.512511253356934
    7. ' )
' → logprob: -15.762511253356934
    8. '   ' → logprob: -16.88751220703125
    9. ')`
' → logprob: -17.13751220703125
    10. ')return' → logprob: -17.26251220703125

Token 210: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.002183449687436223
    2. '
' → logprob: -6.377183437347412
    3. '<|end|>' → logprob: -8.75218391418457
    4. 's' → logprob: -8.87718391418457
    5. '+' → logprob: -9.87718391418457
    6. '        
' → logprob: -10.00218391418457
    7. ' s' → logprob: -11.00218391418457
    8. ',' → logprob: -11.25218391418457
    9. '
' → logprob: -11.62718391418457
    10. ')' → logprob: -12.00218391418457

Token 211: ' s' (ID: 265)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.011004671454429626
    2. 's' (adapté à ' s') → logprob: -4.636004447937012
    3. ' s' → logprob: -6.761004447937012
    4. '   ' → logprob: -9.386004447937012
    5. '
' → logprob: -12.761004447937012
    6. ' ' → logprob: -14.261004447937012
    7. '<|end|>' → logprob: -14.886004447937012
    8. '           ' → logprob: -15.011004447937012
    9. '        
' → logprob: -15.136004447937012
    10. 't' → logprob: -15.511004447937012

Token 212: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.5765583515167236
    2. '+=' → logprob: -0.8265583515167236
    3. '+' → logprob: -7.4515581130981445
    4. '=' → logprob: -11.451558113098145
    5. '    ' → logprob: -11.451558113098145
    6. '   ' → logprob: -11.701558113098145
    7. ']+=' → logprob: -12.576558113098145
    8. ' +' → logprob: -13.576558113098145
    9. '+=(' → logprob: -13.826558113098145
    10. '	' → logprob: -14.076558113098145

Token 213: ' excess' (ID: 16968)
  Prédit: 'ex'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ex' → logprob: -0.0017042214749380946
    2. ' excess' → logprob: -6.376704216003418
    3. ' ex' → logprob: -13.376704216003418
    4. '	ex' → logprob: -15.376704216003418
    5. 'calculate' → logprob: -17.126705169677734
    6. 'exc' → logprob: -17.251705169677734
    7. ' ' → logprob: -17.376705169677734
    8. ' exces' → logprob: -17.501705169677734
    9. 'max' → logprob: -17.876705169677734
    10. 'min' → logprob: -18.001705169677734

Token 214: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00038693982060067356
    2. '   ' → logprob: -8.000387191772461
    3. '
' → logprob: -10.125387191772461
    4. ',' → logprob: -12.625387191772461
    5. ' if' → logprob: -13.125387191772461
    6. '           ' → logprob: -13.750387191772461
    7. 'def' → logprob: -13.875387191772461
    8. ' ' → logprob: -14.250387191772461
    9. 'if' → logprob: -14.375387191772461
    10. '	' → logprob: -14.500387191772461

Token 215: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0008403576212003827
    2. '   ' → logprob: -7.125840187072754
    3. 'def' → logprob: -11.000840187072754
    4. 'if' → logprob: -11.750840187072754
    5. ' if' → logprob: -12.000840187072754
    6. '	' → logprob: -13.750840187072754
    7. ',' → logprob: -14.000840187072754
    8. '```' → logprob: -14.000840187072754
    9. '           ' → logprob: -14.500840187072754
    10. '
' → logprob: -14.625840187072754

Token 216: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.004008710850030184
    2. '       ' → logprob: -5.754008769989014
    3. ' if' → logprob: -7.254008769989014
    4. '   ' → logprob: -9.004008293151855
    5. '	if' → logprob: -15.379008293151855
    6. ' ' → logprob: -16.129009246826172
    7. '           ' → logprob: -16.504009246826172
    8. '  ' → logprob: -17.504009246826172
    9. '    ' → logprob: -18.004009246826172
    10. '     ' → logprob: -18.254009246826172

Token 217: ' s' (ID: 265)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.0067201098427176476
    2. ' s' → logprob: -5.006720066070557
    3. '   ' → logprob: -12.631720542907715
    4. '	s' → logprob: -14.381720542907715
    5. '  ' → logprob: -15.006720542907715
    6. ' ' → logprob: -15.881720542907715
    7. '           ' → logprob: -16.0067195892334
    8. '       ' → logprob: -16.2567195892334
    9. '>s' → logprob: -16.2567195892334
    10. '    ' → logprob: -16.6317195892334

Token 218: ' >' (ID: 1424)
  Prédit: ' >'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.12693093717098236
    2. '>' → logprob: -2.1269309520721436
    3. '>s' → logprob: -13.626931190490723
    4. ' ' → logprob: -14.876931190490723
    5. '()>' → logprob: -15.251931190490723
    6. '>b' → logprob: -15.876931190490723
    7. ' ' → logprob: -16.126930236816406
    8. '">' → logprob: -16.251930236816406
    9. ' >
' → logprob: -16.376930236816406
    10. '   ' → logprob: -16.376930236816406

Token 219: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.0024758970830589533
    2. ' k' → logprob: -6.002475738525391
    3. '	k' → logprob: -15.25247573852539
    4. '
' → logprob: -17.37747573852539
    5. '   ' → logprob: -19.87747573852539
    6. '=k' → logprob: -20.75247573852539
    7. ' ' → logprob: -21.75247573852539
    8. '*k' → logprob: -21.75247573852539
    9. '{k' → logprob: -21.87747573852539
    10. ',k' → logprob: -22.25247573852539

Token 220: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.09133290499448776
    2. ':
' → logprob: -2.4663329124450684
    3. '       ' → logprob: -6.466332912445068
    4. ':return' → logprob: -7.466332912445068
    5. '           ' → logprob: -8.46633243560791
    6. '   ' → logprob: -10.34133243560791
    7. ':
' → logprob: -11.96633243560791
    8. ',' → logprob: -12.84133243560791
    9. ':

' → logprob: -12.84133243560791
    10. ' :' → logprob: -13.59133243560791

Token 221: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -3.5597102396423e-05
    2. 'return' → logprob: -11.125035285949707
    3. '               ' → logprob: -11.750035285949707
    4. '
' → logprob: -12.000035285949707
    5. ' return' → logprob: -12.750035285949707
    6. '            
' → logprob: -13.500035285949707
    7. '       ' → logprob: -13.875035285949707
    8. 'break' → logprob: -15.000035285949707
    9. '```' → logprob: -15.250035285949707
    10. ' break' → logprob: -15.500035285949707

Token 222: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.13507764041423798
    2. '           ' → logprob: -2.135077714920044
    3. ' return' → logprob: -4.885077476501465
    4. '               ' → logprob: -7.635077476501465
    5. '
' → logprob: -10.010077476501465
    6. '       ' → logprob: -11.135077476501465
    7. '	return' → logprob: -12.135077476501465
    8. 'break' → logprob: -12.385077476501465
    9. '   ' → logprob: -13.385077476501465
    10. ':return' → logprob: -14.010077476501465

Token 223: ' False' (ID: 7983)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -1.8624639324116288e-06
    2. ' False' → logprob: -13.250001907348633
    3. 'True' → logprob: -18.250001907348633
    4. '(False' → logprob: -21.000001907348633
    5. '=False' → logprob: -22.875001907348633
    6. '```' → logprob: -24.375001907348633
    7. 'false' → logprob: -25.000001907348633
    8. '
' → logprob: -25.625001907348633
    9. '   ' → logprob: -25.750001907348633
    10. '0' → logprob: -26.000001907348633

Token 224: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0003461905289441347
    2. 'return' → logprob: -8.375346183776855
    3. ' return' → logprob: -9.375346183776855
    4. '
' → logprob: -10.500346183776855
    5. '  ' → logprob: -13.750346183776855
    6. '	return' → logprob: -14.000346183776855
    7. '       ' → logprob: -14.500346183776855
    8. '    
' → logprob: -15.625346183776855
    9. ' ' → logprob: -15.750346183776855
    10. '   ' → logprob: -16.000347137451172

Token 225: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00032867121626622975
    2. 'return' → logprob: -8.12532901763916
    3. ' return' → logprob: -10.37532901763916
    4. '
' → logprob: -14.25032901763916
    5. '	return' → logprob: -15.50032901763916
    6. '       ' → logprob: -16.000328063964844
    7. '0' → logprob: -16.125328063964844
    8. 'def' → logprob: -16.625328063964844
    9. '   ' → logprob: -16.750328063964844
    10. '  ' → logprob: -16.875328063964844

Token 226: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.5783291459083557
    2. '   ' → logprob: -0.8283291459083557
    3. ' return' → logprob: -6.078329086303711
    4. 'True' → logprob: -9.578329086303711
    5. '
' → logprob: -11.703329086303711
    6. '  ' → logprob: -12.078329086303711
    7. '	return' → logprob: -12.578329086303711
    8. ' ' → logprob: -12.703329086303711
    9. 'true' → logprob: -13.328329086303711
    10. '       ' → logprob: -13.453329086303711

Token 227: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.0004306692280806601
    2. ' True' → logprob: -7.750430583953857
    3. '(True' → logprob: -20.500431060791016
    4. 'Tr' → logprob: -20.875431060791016
    5. ' ' → logprob: -21.125431060791016
    6. 'true' → logprob: -21.250431060791016
    7. 'False' → logprob: -22.375431060791016
    8. '=True' → logprob: -22.375431060791016
    9. ' ' → logprob: -22.500431060791016
    10. 's' → logprob: -23.250431060791016

Token 228: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.001139146275818348
    2. '
' → logprob: -6.876139163970947
    3. '<|end|>' → logprob: -9.251138687133789
    4. '  
' → logprob: -12.376138687133789
    5. '```' → logprob: -13.001138687133789
    6. '    
' → logprob: -13.126138687133789
    7. ' def' → logprob: -14.876138687133789
    8. '

' → logprob: -15.251138687133789
    9. ' 
' → logprob: -15.251138687133789
    10. 'import' → logprob: -15.501138687133789

Token 229: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.6240566083070007e-06
    2. 'if' → logprob: -13.500001907348633
    3. 'import' → logprob: -16.625001907348633
    4. ' def' → logprob: -18.500001907348633
    5. '```' → logprob: -21.000001907348633
    6. '#' → logprob: -21.125001907348633
    7. '    
' → logprob: -21.875001907348633
    8. '
' → logprob: -22.375001907348633
    9. 'from' → logprob: -22.500001907348633
    10. 'print' → logprob: -23.500001907348633

Token 230: ' binary' (ID: 15600)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.15987256169319153
    2. ' main' → logprob: -2.534872531890869
    3. 'min' → logprob: -3.784872531890869
    4. ' minimize' → logprob: -4.159872531890869
    5. 'binary' → logprob: -4.409872531890869
    6. 'solve' → logprob: -4.784872531890869
    7. 'find' → logprob: -5.409872531890869
    8. ' binary' → logprob: -6.659872531890869
    9. ' find' → logprob: -6.784872531890869
    10. 'minimum' → logprob: -7.034872531890869

Token 231: '_search' (ID: 23642)
  Prédit: '_search'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_search' → logprob: -7.076218025758862e-05
    2. '_' → logprob: -9.625070571899414
    3. 'search' → logprob: -13.125070571899414
    4. '_find' → logprob: -13.625070571899414
    5. ' _' → logprob: -15.375070571899414
    6. '_step' → logprob: -15.750070571899414
    7. '```' → logprob: -16.125070571899414
    8. '_def' → logprob: -16.250070571899414
    9. '_Search' → logprob: -16.625070571899414
    10. '_method' → logprob: -16.625070571899414

Token 232: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0001507405104348436
    2. ' (' → logprob: -9.250150680541992
    3. '(l' → logprob: -10.000150680541992
    4. '_' → logprob: -13.125150680541992
    5. '(ll' → logprob: -13.375150680541992
    6. '(a' → logprob: -13.750150680541992
    7. '_l' → logprob: -14.125150680541992
    8. '(_' → logprob: -14.250150680541992
    9. '():' → logprob: -14.250150680541992
    10. '_(' → logprob: -14.375150680541992

Token 233: 'aa' (ID: 3545)
  Prédit: 'aa'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aa' → logprob: -7.266944157890975e-05
    2. ' aa' → logprob: -10.375072479248047
    3. ')' → logprob: -10.750072479248047
    4. 'l' → logprob: -11.500072479248047
    5. '(' → logprob: -12.875072479248047
    6. '):' → logprob: -13.250072479248047
    7. 'll' → logprob: -13.375072479248047
    8. 'aaa' → logprob: -13.500072479248047
    9. ',' → logprob: -14.500072479248047
    10. '):
' → logprob: -14.875072479248047

Token 234: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.4378848391061183e-05
    2. ' ,' → logprob: -11.500014305114746
    3. ',
' → logprob: -12.500014305114746
    4. ',

' → logprob: -15.875014305114746
    5. ',
' → logprob: -15.875014305114746
    6. '   ' → logprob: -16.250015258789062
    7. '‌,' → logprob: -17.000015258789062
    8. '，' → logprob: -17.875015258789062
    9. ',,' → logprob: -18.125015258789062
    10. '
' → logprob: -18.250015258789062

Token 235: ' ff' (ID: 35384)
  Prédit: 'ff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ff' → logprob: -0.005235887598246336
    2. ' ff' → logprob: -5.25523567199707
    3. '	ff' → logprob: -13.75523567199707
    4. 'f' → logprob: -14.75523567199707
    5. '_ff' → logprob: -15.13023567199707
    6. '(ff' → logprob: -15.63023567199707
    7. 'fff' → logprob: -16.75523567199707
    8. '.ff' → logprob: -16.88023567199707
    9. 'ffi' → logprob: -17.50523567199707
    10. ' ' → logprob: -17.88023567199707

Token 236: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -8.061054359131958e-06
    2. ' ,' → logprob: -12.250007629394531
    3. ',m' → logprob: -12.875007629394531
    4. '   ' → logprob: -14.750007629394531
    5. ',
' → logprob: -15.875007629394531
    6. ',k' → logprob: -15.875007629394531
    7. 'm' → logprob: -16.75000762939453
    8. '‌,' → logprob: -17.87500762939453
    9. ',int' → logprob: -18.87500762939453
    10. ',n' → logprob: -19.00000762939453

Token 237: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.000553151941858232
    2. ' k' → logprob: -7.500553131103516
    3. '   ' → logprob: -16.625553131103516
    4. '	k' → logprob: -16.750553131103516
    5. ' ' → logprob: -17.500553131103516
    6. 'kk' → logprob: -17.750553131103516
    7. '```' → logprob: -18.125553131103516
    8. 'l' → logprob: -18.750553131103516
    9. 'kf' → logprob: -18.875553131103516
    10. '  ' → logprob: -19.500553131103516

Token 238: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -3.8889261304575484e-06
    2. ',m' → logprob: -13.000003814697266
    3. ' ,' → logprob: -13.625003814697266
    4. '   ' → logprob: -15.125003814697266
    5. ',
' → logprob: -16.125003814697266
    6. 'm' → logprob: -17.125003814697266
    7. '):' → logprob: -17.125003814697266
    8. '‌,' → logprob: -19.500003814697266
    9. ',n' → logprob: -20.000003814697266
    10. ':' → logprob: -20.125003814697266

Token 239: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014637275598943233
    2. ' l' → logprob: -4.514637470245361
    3. 'l' → logprob: -5.639637470245361
    4. '	l' → logprob: -11.389636993408203
    5. '   ' → logprob: -12.014636993408203
    6. '```' → logprob: -12.014636993408203
    7. '
' → logprob: -13.264636993408203
    8. '    ' → logprob: -13.389636993408203
    9. '    
' → logprob: -14.764636993408203
    10. ',' → logprob: -15.014636993408203

Token 240: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' (adapté à ' l') → logprob: -0.06420072913169861
    2. '   ' → logprob: -2.9392006397247314
    3. ' l' → logprob: -4.6892008781433105
    4. 'import' → logprob: -10.564200401306152
    5. '	l' → logprob: -10.939200401306152
    6. '
' → logprob: -11.439200401306152
    7. ',l' → logprob: -12.689200401306152
    8. ',' → logprob: -12.689200401306152
    9. '_l' → logprob: -12.939200401306152
    10. 'left' → logprob: -12.939200401306152

Token 241: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0006970656104385853
    2. ' ,' → logprob: -7.750697135925293
    3. '=' → logprob: -8.625697135925293
    4. ' =' → logprob: -9.750697135925293
    5. ',r' → logprob: -10.500697135925293
    6. 'r' → logprob: -14.375697135925293
    7. ' ' → logprob: -15.375697135925293
    8. ' r' → logprob: -15.375697135925293
    9. ',
' → logprob: -17.000696182250977
    10. '‌,' → logprob: -18.125696182250977

Token 242: ' r' (ID: 428)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.6931568384170532
    2. ' r' → logprob: -0.6931568384170532
    3. '<|end|>' → logprob: -12.193157196044922
    4. ' ' → logprob: -13.693157196044922
    5. ',r' → logprob: -14.068157196044922
    6. '   ' → logprob: -14.068157196044922
    7. '    ' → logprob: -14.193157196044922
    8. '  ' → logprob: -15.568157196044922
    9. ' =' → logprob: -15.568157196044922
    10. '=' → logprob: -15.568157196044922

Token 243: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.12693199515342712
    2. '=' → logprob: -2.12693190574646
    3. ',' → logprob: -12.501932144165039
    4. ' ' → logprob: -16.25193214416504
    5. ' =
' → logprob: -17.00193214416504
    6. ')' → logprob: -17.12693214416504
    7. '＝' → logprob: -18.12693214416504
    8. '   ' → logprob: -18.50193214416504
    9. ' =
' → logprob: -19.00193214416504
    10. '  ' → logprob: -19.50193214416504

Token 244: ' initialize' (ID: 18400)
  Prédit: 'initialize'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'initialize' → logprob: -0.10560804605484009
    2. ' initialize' → logprob: -2.3556079864501953
    3. '0' → logprob: -5.730607986450195
    4. '-' → logprob: -6.605607986450195
    5. ' -' → logprob: -7.855607986450195
    6. ' ' → logprob: -7.980607986450195
    7. 'l' → logprob: -11.105607986450195
    8. '	initialize' → logprob: -11.355607986450195
    9. ' l' → logprob: -11.980607986450195
    10. '_initialize' → logprob: -12.230607986450195

Token 245: '_binary' (ID: 77551)
  Prédit: '_binary'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_binary' → logprob: -0.018928825855255127
    2. 'binary' → logprob: -4.0189290046691895
    3. '(' → logprob: -7.3939290046691895
    4. '_' → logprob: -8.893928527832031
    5. '_bounds' → logprob: -11.018928527832031
    6. ' binary' → logprob: -12.393928527832031
    7. '(binary' → logprob: -12.768928527832031
    8. 'Binary' → logprob: -14.393928527832031
    9. 'bounds' → logprob: -14.518928527832031
    10. '```' → logprob: -14.893928527832031

Token 246: '_search' (ID: 23642)
  Prédit: '_search'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_search' → logprob: -9.949026571121067e-05
    2. 'search' → logprob: -9.375099182128906
    3. '_' → logprob: -11.625099182128906
    4. '_bounds' → logprob: -12.375099182128906
    5. '(' → logprob: -14.750099182128906
    6. '(_' → logprob: -15.000099182128906
    7. '```' → logprob: -15.250099182128906
    8. ' _' → logprob: -16.125099182128906
    9. '_s' → logprob: -16.500099182128906
    10. 'r' → logprob: -16.875099182128906

Token 247: '_bounds' (ID: 90408)
  Prédit: '_bounds'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_bounds' → logprob: -0.0006316631333902478
    2. 'bounds' → logprob: -7.375631809234619
    3. '_bound' → logprob: -13.500631332397461
    4. '(bounds' → logprob: -13.500631332397461
    5. ' bounds' → logprob: -14.625631332397461
    6. '```' → logprob: -14.750631332397461
    7. '_limits' → logprob: -15.125631332397461
    8. '   ' → logprob: -15.250631332397461
    9. 's' → logprob: -15.500631332397461
    10. '_' → logprob: -15.500631332397461

Token 248: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: 0.0
    2. ' (' → logprob: -16.875
    3. '(
' → logprob: -17.75
    4. '   ' → logprob: -20.125
    5. '((' → logprob: -20.75
    6. '```' → logprob: -21.5
    7. ' ' → logprob: -22.125
    8. ',' → logprob: -22.375
    9. '(`' → logprob: -22.5
    10. '
' → logprob: -22.625

Token 249: 'aa' (ID: 3545)
  Prédit: 'aa'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aa' → logprob: -7.719917630311102e-05
    2. ' aa' → logprob: -9.500077247619629
    3. '(' → logprob: -13.750077247619629
    4. '   ' → logprob: -13.750077247619629
    5. ')' → logprob: -17.000076293945312
    6. 'aaa' → logprob: -17.250076293945312
    7. ' ' → logprob: -17.875076293945312
    8. 'AA' → logprob: -17.875076293945312
    9. '       ' → logprob: -18.500076293945312
    10. 'a' → logprob: -18.625076293945312

Token 250: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -9.591415437171236e-05
    2. ' ,' → logprob: -9.625096321105957
    3. ',
' → logprob: -10.500096321105957
    4. ')' → logprob: -14.500096321105957
    5. ',f' → logprob: -14.875096321105957
    6. '),' → logprob: -15.000096321105957
    7. ',

' → logprob: -15.375096321105957
    8. ',,' → logprob: -15.500096321105957
    9. ',
' → logprob: -15.750096321105957
    10. '   ' → logprob: -15.750096321105957

Token 251: ' ff' (ID: 35384)
  Prédit: 'ff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ff' → logprob: -0.0019299437990412116
    2. ' ff' → logprob: -6.251929759979248
    3. '	ff' → logprob: -14.251930236816406
    4. '(ff' → logprob: -14.876930236816406
    5. 'f' → logprob: -15.751930236816406
    6. ')' → logprob: -16.751930236816406
    7. 'fff' → logprob: -17.126930236816406
    8. 'xff' → logprob: -17.626930236816406
    9. '_ff' → logprob: -17.876930236816406
    10. ' ' → logprob: -18.376930236816406

Token 252: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.000527534110005945
    2. '   ' → logprob: -8.000527381896973
    3. ')
' → logprob: -8.625527381896973
    4. ' )' → logprob: -11.500527381896973
    5. ' ' → logprob: -14.000527381896973
    6. ',' → logprob: -14.125527381896973
    7. ')

' → logprob: -15.875527381896973
    8. 'def' → logprob: -16.00052833557129
    9. ')`' → logprob: -16.25052833557129
    10. ')
' → logprob: -16.37552833557129

Token 253: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2554882764816284
    2. '
' → logprob: -1.6304882764816284
    3. ' while' → logprob: -3.755488395690918
    4. '    
' → logprob: -5.755488395690918
    5. 'while' → logprob: -6.130488395690918
    6. '	while' → logprob: -7.880488395690918
    7. ' 
' → logprob: -8.005488395690918
    8. '```' → logprob: -9.505488395690918
    9. '  
' → logprob: -10.255488395690918
    10. '
' → logprob: -10.755488395690918

Token 254: ' while' (ID: 2049)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' (adapté à ' while') → logprob: -0.39957961440086365
    2. ' while' → logprob: -1.149579644203186
    3. '   ' → logprob: -4.3995795249938965
    4. '
' → logprob: -8.024580001831055
    5. '```' → logprob: -11.899580001831055
    6. '	while' → logprob: -12.399580001831055
    7. '    
' → logprob: -12.524580001831055
    8. ' 
' → logprob: -12.774580001831055
    9. ' ' → logprob: -14.774580001831055
    10. '    ' → logprob: -15.399580001831055

Token 255: ' l' (ID: 305)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.028482744470238686
    2. ' r' → logprob: -3.903482675552368
    3. 'l' → logprob: -4.903482913970947
    4. ' l' → logprob: -7.653482913970947
    5. '(r' → logprob: -11.528482437133789
    6. '   ' → logprob: -13.403482437133789
    7. '	r' → logprob: -13.778482437133789
    8. ' ' → logprob: -14.528482437133789
    9. ' (' → logprob: -14.903482437133789
    10. '(l' → logprob: -15.028482437133789

Token 256: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.004299084190279245
    2. ' +' → logprob: -5.504299163818359
    3. '<' → logprob: -8.62929916381836
    4. '+r' → logprob: -10.50429916381836
    5. ' <' → logprob: -11.75429916381836
    6. '+l' → logprob: -13.75429916381836
    7. '1' → logprob: -14.12929916381836
    8. ' ' → logprob: -14.25429916381836
    9. '<len' → logprob: -14.37929916381836
    10. '+k' → logprob: -14.50429916381836

Token 257: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.157039049663581e-05
    2. ' ' → logprob: -9.875051498413086
    3. '   ' → logprob: -18.000051498413086
    4. '>' → logprob: -18.000051498413086
    5. '2' → logprob: -20.625051498413086
    6. ' >' → logprob: -20.750051498413086
    7. '```' → logprob: -20.875051498413086
    8. '=' → logprob: -21.125051498413086
    9. '  ' → logprob: -21.500051498413086
    10. 'r' → logprob: -21.875051498413086

Token 258: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.935296834039036e-06
    2. ' ' → logprob: -12.75000286102295
    3. '   ' → logprob: -17.250003814697266
    4. '```' → logprob: -18.625003814697266
    5. '
' → logprob: -19.125003814697266
    6. '=' → logprob: -19.750003814697266
    7. '2' → logprob: -19.875003814697266
    8. '>' → logprob: -20.250003814697266
    9. 'r' → logprob: -20.750003814697266
    10. '  ' → logprob: -21.375003814697266

Token 259: ' <' (ID: 464)
  Prédit: '<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<' → logprob: -0.06197093799710274
    2. ' <' → logprob: -2.8119709491729736
    3. '<n' → logprob: -13.811970710754395
    4. '<int' → logprob: -14.311970710754395
    5. ' ' → logprob: -14.811970710754395
    6. '<R' → logprob: -15.561970710754395
    7. '<len' → logprob: -15.561970710754395
    8. '<th' → logprob: -16.31197166442871
    9. '<class' → logprob: -16.43697166442871
    10. '<m' → logprob: -16.56197166442871

Token 260: ' r' (ID: 428)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -3.547789674485102e-05
    2. ' r' → logprob: -10.250035285949707
    3. '   ' → logprob: -17.875036239624023
    4. '	r' → logprob: -18.125036239624023
    5. '_r' → logprob: -19.500036239624023
    6. '
' → logprob: -19.750036239624023
    7. ' ' → logprob: -19.875036239624023
    8. '```' → logprob: -22.000036239624023
    9. '  ' → logprob: -22.250036239624023
    10. '=r' → logprob: -22.500036239624023

Token 261: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.020959079265594482
    2. ':
' → logprob: -3.8959591388702393
    3. '       ' → logprob: -8.02095890045166
    4. '   ' → logprob: -9.77095890045166
    5. ' :' → logprob: -11.14595890045166
    6. ':

' → logprob: -12.64595890045166
    7. ',' → logprob: -12.77095890045166
    8. '<|end|>' → logprob: -12.77095890045166
    9. ' :
' → logprob: -12.77095890045166
    10. '):
' → logprob: -12.89595890045166

Token 262: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.002265636110678315
    2. '   ' → logprob: -6.877265453338623
    3. ' mid' → logprob: -6.877265453338623
    4. ' m' → logprob: -8.877265930175781
    5. 'mid' → logprob: -10.502265930175781
    6. 'm' → logprob: -10.752265930175781
    7. '```' → logprob: -12.252265930175781
    8. '    ' → logprob: -12.752265930175781
    9. '	   ' → logprob: -13.627265930175781
    10. '	m' → logprob: -14.252265930175781

Token 263: ' m' (ID: 284)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' (adapté à ' m') → logprob: -0.0020016769412904978
    2. 'mid' → logprob: -7.002001762390137
    3. ' m' → logprob: -7.502001762390137
    4. '   ' → logprob: -8.002001762390137
    5. ' mid' → logprob: -8.877001762390137
    6. '       ' → logprob: -9.752001762390137
    7. '	m' → logprob: -12.502001762390137
    8. 'c' → logprob: -14.502001762390137
    9. '           ' → logprob: -15.252001762390137
    10. 'mi' → logprob: -15.377001762390137

Token 264: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2519303858280182
    2. '=' → logprob: -1.5019303560256958
    3. '=(' → logprob: -14.501930236816406
    4. ' =(' → logprob: -15.126930236816406
    5. '=int' → logprob: -15.126930236816406
    6. ',' → logprob: -16.126930236816406
    7. ')' → logprob: -17.001930236816406
    8. ' ' → logprob: -17.376930236816406
    9. '.' → logprob: -17.626930236816406
    10. '```' → logprob: -17.626930236816406

Token 265: ' (' (ID: 350)
  Prédit: '(l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(l' → logprob: -0.0007130279554985464
    2. ' (' → logprob: -7.250712871551514
    3. '(r' → logprob: -13.250713348388672
    4. '(' → logprob: -14.750713348388672
    5. '   ' → logprob: -14.875713348388672
    6. '(L' → logprob: -15.125713348388672
    7. '(ll' → logprob: -17.000713348388672
    8. ' ' → logprob: -17.000713348388672
    9. '(ls' → logprob: -17.000713348388672
    10. '(left' → logprob: -17.625713348388672

Token 266: 'l' (ID: 75)
  Prédit: 'l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -9.865583706414327e-05
    2. ' l' → logprob: -9.25009822845459
    3. 'r' → logprob: -13.62509822845459
    4. '	l' → logprob: -13.75009822845459
    5. '(l' → logprob: -16.250099182128906
    6. '   ' → logprob: -17.125099182128906
    7. '```' → logprob: -17.375099182128906
    8. '_l' → logprob: -17.625099182128906
    9. ')' → logprob: -18.500099182128906
    10. '[l' → logprob: -18.750099182128906

Token 267: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.1757088303565979
    2. ' +' → logprob: -1.9257087707519531
    3. '+r' → logprob: -4.175708770751953
    4. 'r' → logprob: -14.675708770751953
    5. '+l' → logprob: -15.300708770751953
    6. '+
' → logprob: -15.550708770751953
    7. ' r' → logprob: -16.050708770751953
    8. ' +
' → logprob: -16.925708770751953
    9. '＋' → logprob: -17.425708770751953
    10. ' ' → logprob: -17.425708770751953

Token 268: ' r' (ID: 428)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.01815006136894226
    2. ' r' → logprob: -4.0181498527526855
    3. '1' → logprob: -16.143150329589844
    4. '   ' → logprob: -17.018150329589844
    5. '	r' → logprob: -17.643150329589844
    6. ' ' → logprob: -18.393150329589844
    7. '+r' → logprob: -19.393150329589844
    8. '  ' → logprob: -20.143150329589844
    9. '_r' → logprob: -20.268150329589844
    10. '
' → logprob: -20.268150329589844

Token 269: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.955703818472102e-05
    2. ')//' → logprob: -9.750059127807617
    3. ' )' → logprob: -13.875059127807617
    4. ')>>' → logprob: -15.500059127807617
    5. '   ' → logprob: -16.875059127807617
    6. ')
' → logprob: -17.250059127807617
    7. '）' → logprob: -18.125059127807617
    8. '0' → logprob: -18.625059127807617
    9. '//' → logprob: -18.625059127807617
    10. '1' → logprob: -19.125059127807617

Token 270: ' //' (ID: 602)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2139057219028473
    2. '//' → logprob: -1.963905692100525
    3. ' //' → logprob: -3.3389058113098145
    4. '>>' → logprob: -4.2139058113098145
    5. ')//' → logprob: -7.4639058113098145
    6. ']' → logprob: -7.9639058113098145
    7. '2' → logprob: -8.463905334472656
    8. '   ' → logprob: -8.463905334472656
    9. '```' → logprob: -8.588905334472656
    10. '1' → logprob: -9.088905334472656

Token 271: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -9.615255839889869e-05
    2. ' ' → logprob: -9.250096321105957
    3. '   ' → logprob: -18.00009536743164
    4. '```' → logprob: -20.50009536743164
    5. '２' → logprob: -20.62509536743164
    6. '۲' → logprob: -21.00009536743164
    7. '  ' → logprob: -21.37509536743164
    8. '    ' → logprob: -22.12509536743164
    9. '
' → logprob: -22.25009536743164
    10. '२' → logprob: -22.68759536743164

Token 272: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -3.128163257315464e-07
    2. ' ' → logprob: -15.125
    3. '   ' → logprob: -22.25
    4. '```' → logprob: -23.0
    5. '２' → logprob: -23.5
    6. '۲' → logprob: -24.125
    7. '२' → logprob: -25.0
    8. '  ' → logprob: -25.25
    9. '
' → logprob: -25.75
    10. '২' → logprob: -25.875

Token 273: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00118546886369586
    2. '
' → logprob: -7.376185417175293
    3. '<|end|>' → logprob: -7.626185417175293
    4. '        
' → logprob: -10.501185417175293
    5. ' if' → logprob: -11.501185417175293
    6. ')' → logprob: -12.126185417175293
    7. '
' → logprob: -12.376185417175293
    8. '<|end|>' → logprob: -12.626185417175293
    9. '```' → logprob: -12.751185417175293
    10. ',' → logprob: -12.876185417175293

Token 274: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.004618222359567881
    2. ' if' → logprob: -5.629618167877197
    3. 'if' → logprob: -7.004618167877197
    4. '<|end|>' → logprob: -9.254618644714355
    5. '   ' → logprob: -12.629618644714355
    6. ',' → logprob: -13.004618644714355
    7. ')' → logprob: -13.629618644714355
    8. '        
' → logprob: -13.879618644714355
    9. '	' → logprob: -14.004618644714355
    10. 'If' → logprob: -14.129618644714355

Token 275: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.1366749256849289
    2. '       ' → logprob: -2.1366748809814453
    3. ' if' → logprob: -4.636674880981445
    4. '   ' → logprob: -12.011674880981445
    5. '	if' → logprob: -13.011674880981445
    6. '
' → logprob: -14.011674880981445
    7. '	' → logprob: -15.511674880981445
    8. 'If' → logprob: -15.636674880981445
    9. '        
' → logprob: -16.386674880981445
    10. '```' → logprob: -16.761674880981445

Token 276: ' check' (ID: 2371)
  Prédit: 'check'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'check' → logprob: -0.0019286326132714748
    2. ' check' → logprob: -6.251928806304932
    3. '   ' → logprob: -17.751928329467773
    4. '(check' → logprob: -17.876928329467773
    5. '	check' → logprob: -18.501928329467773
    6. ' ' → logprob: -21.001928329467773
    7. 'not' → logprob: -21.251928329467773
    8. '.check' → logprob: -21.876928329467773
    9. 'chec' → logprob: -22.126928329467773
    10. '           ' → logprob: -22.376928329467773

Token 277: '_mid' (ID: 105824)
  Prédit: '_mid'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_mid' → logprob: -2.5776860184123507e-06
    2. 'mid' → logprob: -13.00000286102295
    3. '_' → logprob: -16.125001907348633
    4. '(mid' → logprob: -16.125001907348633
    5. '_middle' → logprob: -17.375001907348633
    6. '_m' → logprob: -18.125001907348633
    7. '[mid' → logprob: -18.125001907348633
    8. '
' → logprob: -18.125001907348633
    9. 'Mid' → logprob: -18.375001907348633
    10. '(' → logprob: -18.625001907348633

Token 278: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: 0.0
    2. ' (' → logprob: -17.375
    3. '(
' → logprob: -20.5
    4. '((' → logprob: -20.875
    5. '

' → logprob: -22.625
    6. '(sorted' → logprob: -22.625
    7. '
' → logprob: -22.875
    8. 'aa' → logprob: -22.875
    9. '(

' → logprob: -23.0
    10. '(len' → logprob: -23.5

Token 279: 'aa' (ID: 3545)
  Prédit: 'aa'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aa' → logprob: -0.00019972586596850306
    2. '(' → logprob: -8.875199317932129
    3. ' aa' → logprob: -9.750199317932129
    4. ')' → logprob: -14.000199317932129
    5. 'a' → logprob: -15.375199317932129
    6. '#aa' → logprob: -16.125200271606445
    7. '   ' → logprob: -16.375200271606445
    8. 'AA' → logprob: -16.750200271606445
    9. '
' → logprob: -17.125200271606445
    10. ',' → logprob: -17.375200271606445

Token 280: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00014561474381480366
    2. ' ,' → logprob: -9.62514591217041
    3. '[' → logprob: -9.87514591217041
    4. ')' → logprob: -11.50014591217041
    5. ',
' → logprob: -11.62514591217041
    6. '       ' → logprob: -13.50014591217041
    7. '   ' → logprob: -13.50014591217041
    8. '<|end|>' → logprob: -13.50014591217041
    9. ',[' → logprob: -14.12514591217041
    10. '=' → logprob: -14.87514591217041

Token 281: ' ff' (ID: 35384)
  Prédit: 'ff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ff' → logprob: -9.198043699143454e-05
    2. ' ff' → logprob: -9.875091552734375
    3. 'aa' → logprob: -10.125091552734375
    4. '
' → logprob: -16.375091552734375
    5. '(ff' → logprob: -16.375091552734375
    6. '	ff' → logprob: -16.625091552734375
    7. 'af' → logprob: -17.125091552734375
    8. 'f' → logprob: -17.750091552734375
    9. '_ff' → logprob: -18.000091552734375
    10. '
' → logprob: -18.125091552734375

Token 282: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.002217584289610386
    2. ' ,' → logprob: -6.127217769622803
    3. 'm' → logprob: -10.752217292785645
    4. '   ' → logprob: -12.252217292785645
    5. ')' → logprob: -13.252217292785645
    6. '(' → logprob: -14.252217292785645
    7. ',
' → logprob: -14.377217292785645
    8. '```' → logprob: -14.752217292785645
    9. 'aa' → logprob: -14.939717292785645
    10. ' ' → logprob: -14.939717292785645

Token 283: ' m' (ID: 284)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.0001549089647596702
    2. 'aa' → logprob: -9.000154495239258
    3. ' m' → logprob: -10.375154495239258
    4. ' aa' → logprob: -16.375154495239258
    5. '   ' → logprob: -16.875154495239258
    6. '	m' → logprob: -17.125154495239258
    7. ' ' → logprob: -17.750154495239258
    8. ')' → logprob: -18.000154495239258
    9. 'a' → logprob: -18.250154495239258
    10. '  ' → logprob: -19.500154495239258

Token 284: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.11353406310081482
    2. '):
' → logprob: -2.2385339736938477
    3. ':' → logprob: -7.738533973693848
    4. ' ):' → logprob: -8.863533973693848
    5. ',' → logprob: -9.113533973693848
    6. ' ):
' → logprob: -11.613533973693848
    7. '):
' → logprob: -12.363533973693848
    8. ')' → logprob: -12.613533973693848
    9. '       ' → logprob: -12.988533973693848
    10. ':
' → logprob: -13.238533973693848

Token 285: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -8.494741632603109e-05
    2. ' k' → logprob: -9.37508487701416
    3. '	k' → logprob: -17.125085830688477
    4. '   ' → logprob: -17.375085830688477
    5. '
' → logprob: -18.750085830688477
    6. ')' → logprob: -19.125085830688477
    7. ' ' → logprob: -20.750085830688477
    8. '  ' → logprob: -21.000085830688477
    9. '    ' → logprob: -21.000085830688477
    10. '```' → logprob: -21.000085830688477

Token 286: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.3163796365261078
    2. '):
' → logprob: -1.3163796663284302
    3. ':' → logprob: -5.816379547119141
    4. ':
' → logprob: -9.81637954711914
    5. '       ' → logprob: -10.31637954711914
    6. '):
' → logprob: -10.94137954711914
    7. ' ):' → logprob: -11.44137954711914
    8. ')' → logprob: -11.94137954711914
    9. '   ' → logprob: -11.94137954711914
    10. ' ):
' → logprob: -13.06637954711914

Token 287: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0008702484192326665
    2. 'r' → logprob: -7.125870227813721
    3. ' r' → logprob: -9.875870704650879
    4. '
' → logprob: -12.000870704650879
    5. '            
' → logprob: -13.250870704650879
    6. 'n' → logprob: -13.375870704650879
    7. '          ' → logprob: -13.625870704650879
    8. ':
' → logprob: -14.500870704650879
    9. ':' → logprob: -14.750870704650879
    10. '	       ' → logprob: -14.875870704650879

Token 288: ' r' (ID: 428)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' (adapté à ' r') → logprob: -2.546478935983032e-05
    2. ' r' → logprob: -10.875025749206543
    3. '           ' → logprob: -12.000025749206543
    4. '	r' → logprob: -15.875025749206543
    5. '   ' → logprob: -16.000024795532227
    6. '       ' → logprob: -17.875024795532227
    7. '_r' → logprob: -18.750024795532227
    8. '               ' → logprob: -18.750024795532227
    9. '
' → logprob: -18.875024795532227
    10. '          ' → logprob: -20.125024795532227

Token 289: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1269291490316391
    2. '=' → logprob: -2.1269290447235107
    3. '=m' → logprob: -13.87692928314209
    4. ',' → logprob: -17.001928329467773
    5. 'm' → logprob: -17.001928329467773
    6. ')' → logprob: -17.251928329467773
    7. 's' → logprob: -17.626928329467773
    8. ' =
' → logprob: -18.001928329467773
    9. '<|end|>' → logprob: -18.126928329467773
    10. ' ' → logprob: -18.251928329467773

Token 290: ' m' (ID: 284)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.0011709370883181691
    2. ' m' → logprob: -6.751171112060547
    3. '	m' → logprob: -14.251171112060547
    4. 'м' → logprob: -20.001171112060547
    5. '   ' → logprob: -20.001171112060547
    6. ' м' → logprob: -20.376171112060547
    7. '_m' → logprob: -20.876171112060547
    8. ' ' → logprob: -21.001171112060547
    9. '<m' → logprob: -22.126171112060547
    10. '<|end|>' → logprob: -22.126171112060547

Token 291: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0018652143189683557
    2. 'else' → logprob: -6.376865386962891
    3. ' else' → logprob: -8.75186538696289
    4. '	' → logprob: -13.25186538696289
    5. '	else' → logprob: -13.37686538696289
    6. '   ' → logprob: -14.00186538696289
    7. 'l' → logprob: -15.25186538696289
    8. '      ' → logprob: -16.37686538696289
    9. 'm' → logprob: -16.50186538696289
    10. '	   ' → logprob: -16.62686538696289

Token 292: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.015193828381597996
    2. 'else' → logprob: -4.265193939208984
    3. ' else' → logprob: -6.890193939208984
    4. '	' → logprob: -11.890193939208984
    5. '	else' → logprob: -12.390193939208984
    6. '```' → logprob: -14.390193939208984
    7. '   ' → logprob: -15.015193939208984
    8. 'l' → logprob: -17.140193939208984
    9. '      ' → logprob: -17.515193939208984
    10. '	   ' → logprob: -17.640193939208984

Token 293: ' else' (ID: 1203)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.34205907583236694
    2. 'else' (adapté à ' else') → logprob: -1.3420591354370117
    3. ' else' → logprob: -3.5920591354370117
    4. '   ' → logprob: -7.092059135437012
    5. '	else' → logprob: -11.342059135437012
    6. '	' → logprob: -14.092059135437012
    7. '    ' → logprob: -15.467059135437012
    8. '```' → logprob: -15.842059135437012
    9. '           ' → logprob: -16.092058181762695
    10. '
' → logprob: -16.092058181762695

Token 294: ':
' (ID: 734)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -6.778209353797138e-05
    2. ' l' → logprob: -9.750067710876465
    3. 'l' → logprob: -12.500067710876465
    4. '		' → logprob: -13.500067710876465
    5. ',' → logprob: -14.000067710876465
    6. '	       ' → logprob: -14.000067710876465
    7. ':' → logprob: -14.250067710876465
    8. '       ' → logprob: -14.375067710876465
    9. '               ' → logprob: -14.750067710876465
    10. '   ' → logprob: -15.125067710876465

Token 295: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.6737115383148193
    2. 'l' → logprob: -0.7987115383148193
    3. ' l' → logprob: -3.2987115383148193
    4. '       ' → logprob: -6.423711776733398
    5. '	l' → logprob: -7.048711776733398
    6. '   ' → logprob: -7.298711776733398
    7. '	       ' → logprob: -9.423711776733398
    8. '		' → logprob: -10.173711776733398
    9. '               ' → logprob: -11.298711776733398
    10. '	   ' → logprob: -11.423711776733398

Token 296: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' (adapté à ' l') → logprob: -5.633853652398102e-05
    2. ' l' → logprob: -10.000056266784668
    3. '	l' → logprob: -12.000056266784668
    4. '           ' → logprob: -12.375056266784668
    5. '       ' → logprob: -15.250056266784668
    6. '   ' → logprob: -15.500056266784668
    7. '_l' → logprob: -18.250057220458984
    8. ',l' → logprob: -18.500057220458984
    9. '```' → logprob: -18.875057220458984
    10. '[l' → logprob: -19.250057220458984

Token 297: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.023370331153273582
    2. '=' → logprob: -3.7733702659606934
    3. ' +=' → logprob: -9.398370742797852
    4. ' ' → logprob: -10.148370742797852
    5. '+=' → logprob: -13.398370742797852
    6. ',' → logprob: -15.148370742797852
    7. '    ' → logprob: -15.398370742797852
    8. ' ,' → logprob: -15.773370742797852
    9. ' ' → logprob: -15.773370742797852
    10. ' <<=' → logprob: -16.39837074279785

Token 298: ' m' (ID: 284)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.0005530327325686812
    2. ' m' → logprob: -7.500553131103516
    3. '	m' → logprob: -16.125553131103516
    4. '<|end|>' → logprob: -20.375553131103516
    5. ' м' → logprob: -21.125553131103516
    6. '
' → logprob: -21.250553131103516
    7. '_m' → logprob: -21.500553131103516
    8. 'м' → logprob: -21.875553131103516
    9. ' ' → logprob: -22.000553131103516
    10. 'ｍ' → logprob: -22.250553131103516

Token 299: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009260852821171284
    2. '<|end|>' → logprob: -5.259260654449463
    3. '       ' → logprob: -6.009260654449463
    4. '    
' → logprob: -7.634260654449463
    5. '	return' → logprob: -8.259261131286621
    6. 'return' → logprob: -9.009261131286621
    7. ' return' → logprob: -9.134261131286621
    8. ' ' → logprob: -9.259261131286621
    9. '  
' → logprob: -9.259261131286621
    10. '
' → logprob: -9.509261131286621

Token 300: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008635726757347584
    2. 'return' → logprob: -4.758635520935059
    3. ' return' → logprob: -10.883635520935059
    4. '```' → logprob: -13.258635520935059
    5. '       ' → logprob: -14.883635520935059
    6. '	return' → logprob: -16.008636474609375
    7. '    
' → logprob: -17.008636474609375
    8. '  ' → logprob: -17.258636474609375
    9. ':return' → logprob: -17.383636474609375
    10. '<|end|>' → logprob: -17.633636474609375

Token 301: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.0006079599261283875
    2. '   ' → logprob: -7.750607967376709
    3. ' return' → logprob: -8.75060749053955
    4. 'r' → logprob: -11.25060749053955
    5. '```' → logprob: -12.62560749053955
    6. '	return' → logprob: -13.37560749053955
    7. '
' → logprob: -15.00060749053955
    8. ' ' → logprob: -15.62560749053955
    9. '    
' → logprob: -16.000608444213867
    10. ':return' → logprob: -16.250608444213867

Token 302: ' r' (ID: 428)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -3.547789674485102e-05
    2. ' r' → logprob: -10.250035285949707
    3. '_r' → logprob: -20.250036239624023
    4. '   ' → logprob: -21.000036239624023
    5. '	r' → logprob: -21.625036239624023
    6. ' ' → logprob: -22.625036239624023
    7. '[r' → logprob: -24.375036239624023
    8. ' ' → logprob: -24.500036239624023
    9. '­r' → logprob: -24.625036239624023
    10. '(r' → logprob: -25.000036239624023

Token 303: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.2538694739341736
    2. 'if' → logprob: -1.5038695335388184
    3. '```' → logprob: -7.628869533538818
    4. 'import' → logprob: -7.878869533538818
    5. '<|end|>' → logprob: -8.12886905670166
    6. ' if' → logprob: -8.25386905670166
    7. 'n' → logprob: -8.37886905670166
    8. 'for' → logprob: -8.75386905670166
    9. '#' → logprob: -10.25386905670166
    10. 'print' → logprob: -10.75386905670166

Token 304: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.02979503758251667
    2. 'if' → logprob: -3.529794931411743
    3. 'import' → logprob: -10.029794692993164
    4. '```' → logprob: -15.404794692993164
    5. ' def' → logprob: -16.154794692993164
    6. ' if' → logprob: -16.154794692993164
    7. '#' → logprob: -17.904794692993164
    8. 'print' → logprob: -18.529794692993164
    9. 'for' → logprob: -19.279794692993164
    10. 'n' → logprob: -19.529794692993164

Token 305: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.01814994215965271
    2. ' main' → logprob: -4.0181498527526855
    3. 'solve' → logprob: -17.268150329589844
    4. '	main' → logprob: -18.018150329589844
    5. 'def' → logprob: -18.143150329589844
    6. '_main' → logprob: -20.018150329589844
    7. 'process' → logprob: -20.393150329589844
    8. ' solve' → logprob: -20.643150329589844
    9. 'input' → logprob: -21.268150329589844
    10. 'run' → logprob: -21.518150329589844

Token 306: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -2.2200749754119897e-06
    2. ' ():' → logprob: -13.250001907348633
    3. '():
' → logprob: -14.750001907348633
    4. '()' → logprob: -17.000001907348633
    5. '():
' → logprob: -18.875001907348633
    6. '(' → logprob: -20.125001907348633
    7. '():

' → logprob: -21.000001907348633
    8. '(":' → logprob: -21.625001907348633
    9. '().' → logprob: -21.750001907348633
    10. '()>' → logprob: -22.250001907348633

Token 307: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01762266457080841
    2. 'input' → logprob: -4.142622470855713
    3. 'n' → logprob: -6.892622470855713
    4. ' input' → logprob: -7.517622470855713
    5. 'k' → logprob: -11.767622947692871
    6. 'import' → logprob: -11.892622947692871
    7. ' n' → logprob: -12.392622947692871
    8. '()' → logprob: -12.767622947692871
    9. '(input' → logprob: -13.267622947692871
    10. '_input' → logprob: -13.767622947692871

Token 308: ' set' (ID: 920)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.01629863679409027
    2. 'set' (adapté à ' set') → logprob: -4.266298770904541
    3. '   ' → logprob: -6.391298770904541
    4. ' input' → logprob: -7.766298770904541
    5. 'import' → logprob: -10.391298294067383
    6. ' set' → logprob: -13.891298294067383
    7. 'n' → logprob: -14.516298294067383
    8. '(input' → logprob: -15.516298294067383
    9. '_input' → logprob: -15.766298294067383
    10. 'if' → logprob: -16.516298294067383

Token 309: '_rec' (ID: 35314)
  Prédit: '_rec'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_rec' → logprob: -7.822646693966817e-06
    2. '_' → logprob: -11.875007629394531
    3. 'rec' → logprob: -14.500007629394531
    4. '_recursive' → logprob: -16.25000762939453
    5. '_rep' → logprob: -17.12500762939453
    6. '(' → logprob: -17.12500762939453
    7. '(rec' → logprob: -17.62500762939453
    8. '_res' → logprob: -17.87500762939453
    9. ' _' → logprob: -18.75000762939453
    10. '_pres' → logprob: -18.87500762939453

Token 310: 'ursion' (ID: 41658)
  Prédit: 'ursion'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ursion' → logprob: -1.0683535037969705e-05
    2. 'urs' → logprob: -11.75001049041748
    3. '_' → logprob: -13.87501049041748
    4. 'ursive' → logprob: -14.62501049041748
    5. '   ' → logprob: -15.00001049041748
    6. '(' → logprob: -15.25001049041748
    7. '[' → logprob: -16.500011444091797
    8. '**' → logprob: -16.625011444091797
    9. 'ersion' → logprob: -16.625011444091797
    10. '`' → logprob: -16.750011444091797

Token 311: '_limit' (ID: 34361)
  Prédit: '_limit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_limit' → logprob: -0.00015860427811276168
    2. 'limit' → logprob: -8.750158309936523
    3. '_LIMIT' → logprob: -17.375158309936523
    4. '_limits' → logprob: -17.500158309936523
    5. ' limit' → logprob: -18.625158309936523
    6. 'Limit' → logprob: -18.625158309936523
    7. '_lim' → logprob: -19.500158309936523
    8. '_' → logprob: -21.125158309936523
    9. 'imit' → logprob: -21.125158309936523
    10. 'LIMIT' → logprob: -21.750158309936523

Token 312: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00043162284418940544
    2. '()
' → logprob: -7.750431537628174
    3. '()`' → logprob: -15.125432014465332
    4. '()

' → logprob: -15.250432014465332
    5. '()
' → logprob: -15.875432014465332
    6. ' ()' → logprob: -16.000431060791016
    7. '()\' → logprob: -16.250431060791016
    8. '();' → logprob: -17.250431060791016
    9. '()<' → logprob: -17.625431060791016
    10. '()>' → logprob: -18.625431060791016

Token 313: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2751796245574951
    2. 'input' → logprob: -1.5251796245574951
    3. ' input' → logprob: -3.775179624557495
    4. '
' → logprob: -10.900179862976074
    5. '	input' → logprob: -11.525179862976074
    6. 'get' → logprob: -12.025179862976074
    7. '    
' → logprob: -12.400179862976074
    8. ',input' → logprob: -12.775179862976074
    9. '```' → logprob: -12.900179862976074
    10. '(input' → logprob: -13.275179862976074

Token 314: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' (adapté à ' input') → logprob: -1.7432603272027336e-06
    2. ' input' → logprob: -13.500001907348633
    3. '   ' → logprob: -14.875001907348633
    4. 'import' → logprob: -16.875001907348633
    5. '    
' → logprob: -19.375001907348633
    6. '
' → logprob: -20.375001907348633
    7. 'get' → logprob: -20.875001907348633
    8. '_input' → logprob: -21.000001907348633
    9. 'Input' → logprob: -21.125001907348633
    10. '	input' → logprob: -21.250001907348633

Token 315: '_func' (ID: 22252)
  Prédit: '_func'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_func' → logprob: -0.0011345010716468096
    2. '_' → logprob: -6.876134395599365
    3. 'func' → logprob: -10.251134872436523
    4. '()' → logprob: -10.376134872436523
    5. '_=' → logprob: -11.126134872436523
    6. '=' → logprob: -11.501134872436523
    7. '_fn' → logprob: -12.251134872436523
    8. '_f' → logprob: -12.751134872436523
    9. 'Func' → logprob: -14.126134872436523
    10. '_function' → logprob: -14.376134872436523

Token 316: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.31329622864723206
    2. ' =' → logprob: -1.3132961988449097
    3. '()' → logprob: -10.3132963180542
    4. '=sys' → logprob: -14.1882963180542
    5. '＝' → logprob: -14.8132963180542
    6. '   ' → logprob: -15.6882963180542
    7. ' ' → logprob: -17.188295364379883
    8. ')' → logprob: -17.688295364379883
    9. '=input' → logprob: -17.813295364379883
    10. '=get' → logprob: -17.938295364379883

Token 317: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.014194305054843426
    2. ' get' → logprob: -4.264194488525391
    3. 'sys' → logprob: -10.51419448852539
    4. ' sys' → logprob: -12.51419448852539
    5. '(get' → logprob: -18.38919448852539
    6. '	get' → logprob: -18.51419448852539
    7. '=get' → logprob: -18.76419448852539
    8. 'input' → logprob: -19.88919448852539
    9. '_get' → logprob: -21.01419448852539
    10. '   ' → logprob: -21.38919448852539

Token 318: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -5.438573680294212e-06
    2. 'input' → logprob: -12.250005722045898
    3. '_' → logprob: -14.875005722045898
    4. '_line' → logprob: -16.8750057220459
    5. '(input' → logprob: -17.2500057220459
    6. '_func' → logprob: -17.3750057220459
    7. '_output' → logprob: -17.5000057220459
    8. '```' → logprob: -17.5000057220459
    9. ' _' → logprob: -18.0000057220459
    10. '(_' → logprob: -18.0000057220459

Token 319: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.3132709264755249
    2. '()
' → logprob: -1.313270926475525
    3. '()
' → logprob: -11.938270568847656
    4. '()

' → logprob: -13.063270568847656
    5. '()`' → logprob: -15.938270568847656
    6. '   ' → logprob: -16.063270568847656
    7. 'func' → logprob: -16.813270568847656
    8. '()\' → logprob: -17.313270568847656
    9. '())' → logprob: -17.438270568847656
    10. ' ()' → logprob: -17.563270568847656

Token 320: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5759626030921936
    2. 'n' → logprob: -0.8259626030921936
    3. ' n' → logprob: -10.700963020324707
    4. '	n' → logprob: -14.950963020324707
    5. '```' → logprob: -15.575963020324707
    6. '(n' → logprob: -17.32596206665039
    7. 'N' → logprob: -17.32596206665039
    8. '  ' → logprob: -17.70096206665039
    9. '   ' → logprob: -17.95096206665039
    10. '_n' → logprob: -18.20096206665039

Token 321: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -9.729906196298543e-06
    2. '   ' → logprob: -11.625009536743164
    3. 'N' → logprob: -14.500009536743164
    4. ' n' → logprob: -15.375009536743164
    5. '    
' → logprob: -17.625009536743164
    6. '	n' → logprob: -17.750009536743164
    7. '
' → logprob: -18.500009536743164
    8. '_n' → logprob: -18.875009536743164
    9. '```' → logprob: -19.250009536743164
    10. '(n' → logprob: -19.500009536743164

Token 322: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0006658526253886521
    2. ',k' → logprob: -7.375665664672852
    3. ' ,' → logprob: -10.500665664672852
    4. 'k' → logprob: -11.750665664672852
    5. ',
' → logprob: -13.750665664672852
    6. ' k' → logprob: -14.250665664672852
    7. '‌,' → logprob: -14.500665664672852
    8. '_k' → logprob: -15.000665664672852
    9. ',n' → logprob: -15.125665664672852
    10. '_,' → logprob: -15.813165664672852

Token 323: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.029751179739832878
    2. ' k' → logprob: -3.5297510623931885
    3. '   ' → logprob: -14.27975082397461
    4. ' ' → logprob: -17.02975082397461
    5. '  ' → logprob: -17.15475082397461
    6. '	k' → logprob: -17.90475082397461
    7. ',k' → logprob: -17.90475082397461
    8. 'K' → logprob: -18.15475082397461
    9. '    ' → logprob: -18.27975082397461
    10. '_k' → logprob: -19.15475082397461

Token 324: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.386874258518219
    2. '=' → logprob: -1.1368741989135742
    3. ',' → logprob: -13.261874198913574
    4. '   ' → logprob: -13.636874198913574
    5. '＝' → logprob: -16.26187515258789
    6. '=int' → logprob: -16.63687515258789
    7. '=n' → logprob: -17.26187515258789
    8. ' ' → logprob: -17.63687515258789
    9. ')' → logprob: -18.13687515258789
    10. '    ' → logprob: -18.38687515258789

Token 325: ' parse' (ID: 8420)
  Prédit: 'parse'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'parse' → logprob: -0.20141352713108063
    2. ' parse' → logprob: -1.7014135122299194
    3. '   ' → logprob: -15.57641315460205
    4. '	parse' → logprob: -16.951414108276367
    5. '=parse' → logprob: -17.576414108276367
    6. '(parse' → logprob: -18.076414108276367
    7. 'map' → logprob: -18.326414108276367
    8. '.parse' → logprob: -19.326414108276367
    9. '_parse' → logprob: -19.326414108276367
    10. ' map' → logprob: -19.451414108276367

Token 326: '_first' (ID: 29347)
  Prédit: '_first'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_first' → logprob: -0.0036182431504130363
    2. 'first' → logprob: -5.628618240356445
    3. '(n' → logprob: -11.753618240356445
    4. '_next' → logprob: -12.878618240356445
    5. 'First' → logprob: -13.253618240356445
    6. '(' → logprob: -13.878618240356445
    7. 'input' → logprob: -13.878618240356445
    8. 'n' → logprob: -14.128618240356445
    9. '(first' → logprob: -14.378618240356445
    10. '_FIRST' → logprob: -14.503618240356445

Token 327: '_line' (ID: 14418)
  Prédit: '_line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_line' → logprob: -0.0005535095697268844
    2. 'line' → logprob: -7.500553607940674
    3. 'Line' → logprob: -15.250553131103516
    4. ' line' → logprob: -16.000553131103516
    5. '(line' → logprob: -16.500553131103516
    6. '_LINE' → logprob: -18.250553131103516
    7. '(input' → logprob: -18.500553131103516
    8. 'input' → logprob: -18.875553131103516
    9. '```' → logprob: -19.125553131103516
    10. 'lin' → logprob: -19.500553131103516

Token 328: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -4.842555426876061e-06
    2. '(' → logprob: -12.250004768371582
    3. ' (' → logprob: -17.1250057220459
    4. 'input' → logprob: -17.2500057220459
    5. ',input' → logprob: -20.1250057220459
    6. '=input' → logprob: -20.2500057220459
    7. '(
' → logprob: -20.7500057220459
    8. '<input' → logprob: -20.8750057220459
    9. '[input' → logprob: -21.5000057220459
    10. '```' → logprob: -21.5000057220459

Token 329: '_func' (ID: 22252)
  Prédit: '_func'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_func' → logprob: -0.00012368128227535635
    2. 'func' → logprob: -9.000123977661133
    3. ')' → logprob: -16.250123977661133
    4. 'Func' → logprob: -17.125123977661133
    5. '_FUNC' → logprob: -18.375123977661133
    6. '```' → logprob: -18.625123977661133
    7. ')_' → logprob: -19.875123977661133
    8. ' func' → logprob: -20.250123977661133
    9. '	func' → logprob: -20.375123977661133
    10. '_function' → logprob: -20.375123977661133

Token 330: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.632542913896032e-05
    2. ')
' → logprob: -10.000046730041504
    3. '())' → logprob: -14.875046730041504
    4. '   ' → logprob: -15.000046730041504
    5. '()' → logprob: -16.500045776367188
    6. ' )' → logprob: -16.875045776367188
    7. ')#' → logprob: -17.125045776367188
    8. '))' → logprob: -17.500045776367188
    9. '),' → logprob: -17.625045776367188
    10. ')`' → logprob: -17.625045776367188

Token 331: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0004291195946279913
    2. 'aa' → logprob: -8.000429153442383
    3. '```' → logprob: -9.500429153442383
    4. ' aa' → logprob: -11.875429153442383
    5. '   ' → logprob: -12.125429153442383
    6. 'a' → logprob: -13.500429153442383
    7. '  ' → logprob: -13.500429153442383
    8. '#aa' → logprob: -14.000429153442383
    9. '       ' → logprob: -14.500429153442383
    10. '    
' → logprob: -14.625429153442383

Token 332: ' aa' (ID: 40260)
  Prédit: 'aa'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aa' (adapté à ' aa') → logprob: -0.00081963452976197
    2. 'a' → logprob: -7.625819683074951
    3. '   ' → logprob: -8.125819206237793
    4. ' aa' → logprob: -10.500819206237793
    5. 'AA' → logprob: -12.875819206237793
    6. '    
' → logprob: -13.125819206237793
    7. 'aaa' → logprob: -13.375819206237793
    8. '  ' → logprob: -14.625819206237793
    9. '```' → logprob: -15.125819206237793
    10. 'ai' → logprob: -15.500819206237793

Token 333: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.2519412040710449
    2. ' =' → logprob: -1.501941204071045
    3. ',' → logprob: -11.376941680908203
    4. '   ' → logprob: -14.626941680908203
    5. ')' → logprob: -16.376941680908203
    6. '=[]' → logprob: -17.376941680908203
    7. '＝' → logprob: -17.626941680908203
    8. ' ' → logprob: -17.626941680908203
    9. 's' → logprob: -17.751941680908203
    10. ' ' → logprob: -17.876941680908203

Token 334: ' parse' (ID: 8420)
  Prédit: 'parse'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'parse' → logprob: -0.02390449494123459
    2. 'sort' → logprob: -3.77390456199646
    3. ' parse' → logprob: -7.398904323577881
    4. ' sort' → logprob: -10.023904800415039
    5. 'list' → logprob: -13.648904800415039
    6. 'sorted' → logprob: -13.773904800415039
    7. '	parse' → logprob: -16.14890480041504
    8. '   ' → logprob: -16.52390480041504
    9. '(parse' → logprob: -17.14890480041504
    10. '=parse' → logprob: -17.14890480041504

Token 335: '_next' (ID: 25436)
  Prédit: '_next'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_next' → logprob: -0.0019308974733576179
    2. 'next' → logprob: -6.2519307136535645
    3. '_first' → logprob: -13.376931190490723
    4. '```' → logprob: -15.001931190490723
    5. 'Next' → logprob: -15.376931190490723
    6. '
' → logprob: -17.126930236816406
    7. 'def' → logprob: -17.251930236816406
    8. ' next' → logprob: -17.626930236816406
    9. '下一' → logprob: -17.751930236816406
    10. '_' → logprob: -17.876930236816406

Token 336: '_line' (ID: 14418)
  Prédit: '_line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_line' → logprob: -0.0005535095697268844
    2. 'line' → logprob: -7.500553607940674
    3. 'int' → logprob: -16.000553131103516
    4. '_list' → logprob: -16.250553131103516
    5. '```' → logprob: -16.250553131103516
    6. '(line' → logprob: -16.625553131103516
    7. '_LINE' → logprob: -16.750553131103516
    8. 'input' → logprob: -17.875553131103516
    9. ' line' → logprob: -18.125553131103516
    10. 'Line' → logprob: -18.875553131103516

Token 337: '_as' (ID: 25206)
  Prédit: '_as'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_as' → logprob: -0.005280722863972187
    2. 'as' → logprob: -5.255280494689941
    3. 'As' → logprob: -10.505280494689941
    4. '(input' → logprob: -11.630280494689941
    5. '(as' → logprob: -13.255280494689941
    6. '```' → logprob: -13.255280494689941
    7. 'input' → logprob: -13.380280494689941
    8. 'a' → logprob: -13.630280494689941
    9. ' as' → logprob: -14.130280494689941
    10. 'def' → logprob: -14.630280494689941

Token 338: '_int' (ID: 12285)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.693182110786438
    2. '_int' → logprob: -0.693182110786438
    3. 'list' → logprob: -10.943181991577148
    4. ' int' → logprob: -12.193181991577148
    5. 'Int' → logprob: -12.443181991577148
    6. '(int' → logprob: -12.443181991577148
    7. '_list' → logprob: -13.693181991577148
    8. '[int' → logprob: -14.568181991577148
    9. '<int' → logprob: -14.693181991577148
    10. 'nt' → logprob: -14.693181991577148

Token 339: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -0.00021641071361955255
    2. 'list' → logprob: -8.500216484069824
    3. '_func' → logprob: -11.875216484069824
    4. 'List' → logprob: -12.750216484069824
    5. 'ist' → logprob: -13.625216484069824
    6. 'func' → logprob: -13.625216484069824
    7. '(input' → logprob: -14.875216484069824
    8. 'input' → logprob: -15.875216484069824
    9. '_LIST' → logprob: -17.125215530395508
    10. '_lists' → logprob: -17.125215530395508

Token 340: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -4.084206375409849e-05
    2. '(' → logprob: -10.125041007995605
    3. '(
' → logprob: -15.250041007995605
    4. 'input' → logprob: -15.875041007995605
    5. ' (' → logprob: -16.00004005432129
    6. '=input' → logprob: -16.62504005432129
    7. ',input' → logprob: -17.25004005432129
    8. '[input' → logprob: -17.75004005432129
    9. '```' → logprob: -17.87504005432129
    10. '(i' → logprob: -18.12504005432129

Token 341: '_func' (ID: 22252)
  Prédit: '_func'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_func' → logprob: -5.228561349213123e-05
    2. 'func' → logprob: -9.875052452087402
    3. ')' → logprob: -14.500052452087402
    4. '```' → logprob: -15.875052452087402
    5. '(_' → logprob: -16.750051498413086
    6. 'Func' → logprob: -17.625051498413086
    7. '(func' → logprob: -18.000051498413086
    8. '()' → logprob: -18.250051498413086
    9. ')(' → logprob: -18.375051498413086
    10. '(' → logprob: -18.375051498413086

Token 342: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.15856745839118958
    2. '())' → logprob: -2.158567428588867
    3. '()' → logprob: -4.033567428588867
    4. ')
' → logprob: -5.033567428588867
    5. '())
' → logprob: -5.533567428588867
    6. '   ' → logprob: -6.408567428588867
    7. '()
' → logprob: -6.658567428588867
    8. '(' → logprob: -11.408567428588867
    9. ' )' → logprob: -11.658567428588867
    10. ' ())' → logprob: -12.658567428588867

Token 343: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.21878287196159363
    2. 'ff' → logprob: -2.218782901763916
    3. ' ff' → logprob: -2.468782901763916
    4. '	ff' → logprob: -5.843782901763916
    5. '(ff' → logprob: -10.343782424926758
    6. '.ff' → logprob: -10.468782424926758
    7. '_ff' → logprob: -10.468782424926758
    8. '   ' → logprob: -10.718782424926758
    9. ' ' → logprob: -11.343782424926758
    10. '    
' → logprob: -11.468782424926758

Token 344: ' ff' (ID: 35384)
  Prédit: 'ff'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ff' (adapté à ' ff') → logprob: -0.00041732576210051775
    2. '   ' → logprob: -8.250417709350586
    3. ' ff' → logprob: -9.125417709350586
    4. '	ff' → logprob: -10.000417709350586
    5. 'aa' → logprob: -14.375417709350586
    6. '_ff' → logprob: -15.125417709350586
    7. '(ff' → logprob: -15.500417709350586
    8. '.ff' → logprob: -15.750417709350586
    9. ' ' → logprob: -16.000417709350586
    10. '    
' → logprob: -16.125417709350586

Token 345: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.07889176905155182
    2. ' =' → logprob: -2.5788917541503906
    3. '   ' → logprob: -14.32889175415039
    4. '.' → logprob: -15.20389175415039
    5. '_' → logprob: -15.45389175415039
    6. ')' → logprob: -15.45389175415039
    7. '()' → logprob: -15.82889175415039
    8. ',' → logprob: -16.20389175415039
    9. '.sort' → logprob: -16.20389175415039
    10. ' ' → logprob: -16.57889175415039

Token 346: ' parse' (ID: 8420)
  Prédit: 'parse'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'parse' → logprob: -0.002477200934663415
    2. ' parse' → logprob: -6.002477169036865
    3. '(parse' → logprob: -14.002477645874023
    4. '	parse' → logprob: -15.252477645874023
    5. '.parse' → logprob: -15.377477645874023
    6. '=parse' → logprob: -15.752477645874023
    7. 'sort' → logprob: -16.252477645874023
    8. '_parse' → logprob: -17.877477645874023
    9. 'parsed' → logprob: -18.627477645874023
    10. '   ' → logprob: -20.252477645874023

Token 347: '_next' (ID: 25436)
  Prédit: '_next'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_next' → logprob: -0.005246918182820082
    2. 'next' → logprob: -5.255247116088867
    3. '_first' → logprob: -11.380247116088867
    4. 'Next' → logprob: -13.880247116088867
    5. ' next' → logprob: -15.630247116088867
    6. '(next' → logprob: -15.755247116088867
    7. '下一' → logprob: -16.005247116088867
    8. '_' → logprob: -16.380247116088867
    9. '_second' → logprob: -16.755247116088867
    10. 'func' → logprob: -17.005247116088867

Token 348: '_line' (ID: 14418)
  Prédit: '_line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_line' → logprob: -0.0035889027640223503
    2. '_func' → logprob: -6.253588676452637
    3. 'func' → logprob: -7.128588676452637
    4. 'line' → logprob: -7.628588676452637
    5. '_list' → logprob: -8.253588676452637
    6. 'Line' → logprob: -9.378588676452637
    7. 'as' → logprob: -11.753588676452637
    8. '_as' → logprob: -11.878588676452637
    9. '_LINE' → logprob: -12.628588676452637
    10. 'LINE' → logprob: -13.128588676452637

Token 349: '_as' (ID: 25206)
  Prédit: '_as'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_as' → logprob: -0.5761193037033081
    2. 'as' → logprob: -0.8261193037033081
    3. 'As' → logprob: -9.201119422912598
    4. ' as' → logprob: -10.826119422912598
    5. '(input' → logprob: -10.951119422912598
    6. '```' → logprob: -10.951119422912598
    7. '(as' → logprob: -11.076119422912598
    8. '.as' → logprob: -13.451119422912598
    9. '   ' → logprob: -13.576119422912598
    10. '-as' → logprob: -13.576119422912598

Token 350: '_int' (ID: 12285)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0003765727742575109
    2. '_int' → logprob: -8.00037670135498
    3. 'input' → logprob: -10.37537670135498
    4. 'list' → logprob: -11.87537670135498
    5. 'parse' → logprob: -13.12537670135498
    6. 'Int' → logprob: -14.75037670135498
    7. ' int' → logprob: -15.25037670135498
    8. '(int' → logprob: -15.75037670135498
    9. 'nt' → logprob: -16.625375747680664
    10. 'sort' → logprob: -16.750375747680664

Token 351: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -0.0014409461291506886
    2. 'List' → logprob: -6.87644100189209
    3. 'list' → logprob: -8.12644100189209
    4. 'func' → logprob: -9.37644100189209
    5. '_func' → logprob: -10.87644100189209
    6. 'input' → logprob: -12.12644100189209
    7. '(input' → logprob: -13.00144100189209
    8. 'import' → logprob: -14.87644100189209
    9. 'int' → logprob: -15.00144100189209
    10. '```' → logprob: -15.37644100189209

Token 352: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -7.896309739408025e-07
    2. 'input' → logprob: -14.500000953674316
    3. '(' → logprob: -15.875000953674316
    4. ',input' → logprob: -17.5
    5. '<input' → logprob: -17.75
    6. '=input' → logprob: -18.375
    7. '(import' → logprob: -18.75
    8. '[input' → logprob: -18.875
    9. ' (' → logprob: -19.0
    10. '```' → logprob: -19.25

Token 353: '_func' (ID: 22252)
  Prédit: '_func'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_func' → logprob: -0.0004901225329376757
    2. 'func' → logprob: -7.625490188598633
    3. ')' → logprob: -13.375490188598633
    4. 'Func' → logprob: -15.125490188598633
    5. '(func' → logprob: -16.125490188598633
    6. '```' → logprob: -16.250490188598633
    7. '_FUNC' → logprob: -17.125490188598633
    8. '   ' → logprob: -17.500490188598633
    9. '_function' → logprob: -18.250490188598633
    10. 'f' → logprob: -18.375490188598633

Token 354: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.024151219055056572
    2. ')
' → logprob: -3.77415132522583
    3. '   ' → logprob: -7.02415132522583
    4. ')

' → logprob: -11.524150848388672
    5. ')
' → logprob: -12.649150848388672
    6. '())' → logprob: -14.524150848388672
    7. ' )' → logprob: -14.899150848388672
    8. ')`' → logprob: -15.399150848388672
    9. '))' → logprob: -16.024150848388672
    10. '
' → logprob: -16.024150848388672

Token 355: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0002856497303582728
    2. 'aa' → logprob: -8.250286102294922
    3. '    
' → logprob: -11.125286102294922
    4. ' aa' → logprob: -12.250286102294922
    5. '```' → logprob: -14.000286102294922
    6. 'ff' → logprob: -14.000286102294922
    7. '<|end|>' → logprob: -14.250286102294922
    8. '#aa' → logprob: -14.375286102294922
    9. '
' → logprob: -14.500286102294922
    10. '  ' → logprob: -14.500286102294922

Token 356: ' aa' (ID: 40260)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.31410661339759827
    2. 'aa' (adapté à ' aa') → logprob: -1.3141065835952759
    3. ' aa' → logprob: -7.439106464385986
    4. 'ff' → logprob: -8.439106941223145
    5. '    
' → logprob: -10.814106941223145
    6. 'aaa' → logprob: -12.439106941223145
    7. '
' → logprob: -12.939106941223145
    8. 'fa' → logprob: -13.064106941223145
    9. '#aa' → logprob: -13.064106941223145
    10. '```' → logprob: -13.189106941223145

Token 357: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.20195810496807098
    2. ' =' → logprob: -1.7019580602645874
    3. '.sort' → logprob: -7.701958179473877
    4. ',' → logprob: -9.576957702636719
    5. 'sorted' → logprob: -11.451957702636719
    6. '_sorted' → logprob: -11.826957702636719
    7. 'sort' → logprob: -12.951957702636719
    8. '.' → logprob: -13.826957702636719
    9. ' sorted' → logprob: -14.326957702636719
    10. '＝' → logprob: -14.451957702636719

Token 358: ' sort' (ID: 4506)
  Prédit: 'sort'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sort' → logprob: -0.00042102107545360923
    2. ' sort' → logprob: -8.125420570373535
    3. 'sorted' → logprob: -9.000420570373535
    4. 'reverse' → logprob: -14.125420570373535
    5. '	sort' → logprob: -15.125420570373535
    6. ' sorted' → logprob: -15.250420570373535
    7. 'list' → logprob: -16.37542152404785
    8. '(sort' → logprob: -16.50042152404785
    9. 's' → logprob: -16.75042152404785
    10. '.sort' → logprob: -17.00042152404785

Token 359: '_desc' (ID: 26683)
  Prédit: '_desc'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_desc' → logprob: -0.0025286951567977667
    2. '_' → logprob: -6.002528667449951
    3. 'descending' → logprob: -9.87752914428711
    4. 'desc' → logprob: -14.50252914428711
    5. 'Descending' → logprob: -14.62752914428711
    6. '_des' → logprob: -14.87752914428711
    7. '_reverse' → logprob: -16.62752914428711
    8. '_DESC' → logprob: -17.25252914428711
    9. ' descending' → logprob: -17.75252914428711
    10. '_decl' → logprob: -17.87752914428711

Token 360: 'ending' (ID: 3258)
  Prédit: 'ending'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ending' → logprob: -0.0008592926897108555
    2. '(' → logprob: -7.625859260559082
    3. 'ing' → logprob: -8.250859260559082
    4. 'descending' → logprob: -10.000859260559082
    5. 'ening' → logprob: -11.000859260559082
    6. 'anding' → logprob: -11.750859260559082
    7. 'a' → logprob: -12.000859260559082
    8. 'ng' → logprob: -12.375859260559082
    9. 'inding' → logprob: -12.500859260559082
    10. 'inging' → logprob: -12.625859260559082

Token 361: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.9361264946837764e-07
    2. ' (' → logprob: -17.25
    3. '(lst' → logprob: -18.5
    4. '(ff' → logprob: -18.625
    5. '((' → logprob: -19.0
    6. 'aa' → logprob: -19.125
    7. '(a' → logprob: -19.25
    8. '(
' → logprob: -19.875
    9. '```' → logprob: -19.875
    10. '(ai' → logprob: -20.25

Token 362: 'aa' (ID: 3545)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0008844300173223019
    2. 'aa' → logprob: -7.875884532928467
    3. ')' → logprob: -8.125884056091309
    4. ')(' → logprob: -8.500884056091309
    5. 'AA' → logprob: -13.375884056091309
    6. '#aa' → logprob: -14.000884056091309
    7. 'lst' → logprob: -14.375884056091309
    8. ' aa' → logprob: -14.500884056091309
    9. '(lst' → logprob: -14.875884056091309
    10. ' (' → logprob: -15.250884056091309

Token 363: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.062328629195690155
    2. ')
' → logprob: -2.812328577041626
    3. '   ' → logprob: -7.937328815460205
    4. ')
' → logprob: -13.562328338623047
    5. ' )' → logprob: -14.062328338623047
    6. '()' → logprob: -14.687328338623047
    7. ' )
' → logprob: -15.437328338623047
    8. '())' → logprob: -15.562328338623047
    9. '())
' → logprob: -15.937328338623047
    10. '()
' → logprob: -16.187328338623047

Token 364: '   ' (ID: 271)
  Prédit: 'ff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ff' → logprob: -0.12788838148117065
    2. '   ' → logprob: -2.1278884410858154
    3. ' ff' → logprob: -7.002888202667236
    4. '	ff' → logprob: -10.002888679504395
    5. '(ff' → logprob: -13.627888679504395
    6. '_ff' → logprob: -13.627888679504395
    7. ' ' → logprob: -14.627888679504395
    8. 'fa' → logprob: -14.877888679504395
    9. '.ff' → logprob: -14.877888679504395
    10. 'ffi' → logprob: -15.502888679504395

Token 365: ' ff' (ID: 35384)
  Prédit: 'ff'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ff' (adapté à ' ff') → logprob: -0.0001029471677611582
    2. '   ' → logprob: -9.250102996826172
    3. ' ff' → logprob: -12.125102996826172
    4. '	ff' → logprob: -13.500102996826172
    5. 'fff' → logprob: -17.125102996826172
    6. ' ' → logprob: -17.125102996826172
    7. '  ' → logprob: -17.625102996826172
    8. '_ff' → logprob: -17.875102996826172
    9. '(ff' → logprob: -18.500102996826172
    10. 'ffff' → logprob: -19.125102996826172

Token 366: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6931476593017578
    2. ' =' → logprob: -0.6931476593017578
    3. ' ' → logprob: -16.193147659301758
    4. '＝' → logprob: -16.818147659301758
    5. '.sort' → logprob: -17.068147659301758
    6. '   ' → logprob: -17.068147659301758
    7. ')' → logprob: -17.318147659301758
    8. '(' → logprob: -17.693147659301758
    9. '  ' → logprob: -18.193147659301758
    10. ',' → logprob: -18.318147659301758

Token 367: ' sort' (ID: 4506)
  Prédit: 'sort'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sort' → logprob: -0.0019295861711725593
    2. ' sort' → logprob: -6.251929759979248
    3. 'sorted' → logprob: -14.12692928314209
    4. '(sort' → logprob: -15.75192928314209
    5. '	sort' → logprob: -16.376930236816406
    6. '.sort' → logprob: -18.626930236816406
    7. ' sorted' → logprob: -18.751930236816406
    8. ' ' → logprob: -20.001930236816406
    9. '>' → logprob: -21.626930236816406
    10. 'scroll' → logprob: -21.626930236816406

Token 368: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -6.630610641877865e-06
    2. 'ascending' → logprob: -12.500006675720215
    3. '_desc' → logprob: -13.000006675720215
    4. 'Ascending' → logprob: -14.625006675720215
    5. '(' → logprob: -16.0000057220459
    6. ' ascending' → logprob: -16.7500057220459
    7. '_ASC' → logprob: -18.0000057220459
    8. '_as' → logprob: -19.1250057220459
    9. ' Asc' → logprob: -19.3750057220459
    10. '(desc' → logprob: -19.6250057220459

Token 369: 'ascending' (ID: 163444)
  Prédit: 'ascending'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ascending' → logprob: -0.0010705619351938367
    2. 'descending' → logprob: -6.876070499420166
    3. ' ascending' → logprob: -11.376070976257324
    4. 'asc' → logprob: -11.626070976257324
    5. 'sorted' → logprob: -12.001070976257324
    6. 'sort' → logprob: -12.126070976257324
    7. 'Ascending' → logprob: -12.251070976257324
    8. 'sorting' → logprob: -14.376070976257324
    9. 'as' → logprob: -17.001070022583008
    10. '```' → logprob: -17.188570022583008

Token 370: '(ff' (ID: 187888)
  Prédit: '(ff'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ff' → logprob: -2.6895233531831764e-05
    2. '(' → logprob: -11.25002670288086
    3. '(f' → logprob: -11.50002670288086
    4. ' (' → logprob: -13.50002670288086
    5. '(fi' → logprob: -13.62502670288086
    6. '(fe' → logprob: -14.62502670288086
    7. '(fd' → logprob: -15.75002670288086
    8. '(fp' → logprob: -15.75002670288086
    9. '(fc' → logprob: -16.00002670288086
    10. '(ft' → logprob: -16.25002670288086

Token 371: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.505351095460355e-05
    2. '   ' → logprob: -9.875075340270996
    3. ')
' → logprob: -10.750075340270996
    4. '())' → logprob: -13.875075340270996
    5. ' )' → logprob: -14.000075340270996
    6. '()' → logprob: -15.875075340270996
    7. '))' → logprob: -16.12507438659668
    8. ')

' → logprob: -17.37507438659668
    9. '')' → logprob: -17.50007438659668
    10. ')
' → logprob: -17.62507438659668

Token 372: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0017376589821651578
    2. 'result' → logprob: -6.626737594604492
    3. ' result' → logprob: -8.126737594604492
    4. '```' → logprob: -10.751737594604492
    5. '    
' → logprob: -10.876737594604492
    6. 'm' → logprob: -10.876737594604492
    7. '
' → logprob: -11.001737594604492
    8. 'print' → logprob: -11.876737594604492
    9. 'res' → logprob: -11.876737594604492
    10. 'ans' → logprob: -12.376737594604492

Token 373: ' result' (ID: 1534)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' (adapté à ' result') → logprob: -0.11490438133478165
    2. 'print' → logprob: -2.8649044036865234
    3. 'ans' → logprob: -3.8649044036865234
    4. '   ' → logprob: -4.364904403686523
    5. 'res' → logprob: -4.614904403686523
    6. 'answer' → logprob: -4.864904403686523
    7. 'm' → logprob: -8.364904403686523
    8. ' result' → logprob: -11.364904403686523
    9. 'r' → logprob: -11.364904403686523
    10. '    
' → logprob: -13.364904403686523

Token 374: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.02975071594119072
    2. '=' → logprob: -3.5297508239746094
    3. '   ' → logprob: -16.27975082397461
    4. ' ' → logprob: -16.52975082397461
    5. '  ' → logprob: -16.90475082397461
    6. ' ' → logprob: -17.52975082397461
    7. '＝' → logprob: -17.65475082397461
    8. ' =
' → logprob: -18.15475082397461
    9. ' =)' → logprob: -18.40475082397461
    10. '	' → logprob: -18.52975082397461

Token 375: ' binary' (ID: 15600)
  Prédit: 'binary'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'binary' → logprob: -0.023245595395565033
    2. ' binary' → logprob: -3.7732455730438232
    3. '(binary' → logprob: -16.398244857788086
    4. 'Binary' → logprob: -18.148244857788086
    5. 'b' → logprob: -18.398244857788086
    6. '.binary' → logprob: -18.773244857788086
    7. '   ' → logprob: -18.773244857788086
    8. '_binary' → logprob: -18.898244857788086
    9. 'bin' → logprob: -20.023244857788086
    10. ' ' → logprob: -21.523244857788086

Token 376: '_search' (ID: 23642)
  Prédit: '_search'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_search' → logprob: -7.584239938296378e-06
    2. '_' → logprob: -12.375007629394531
    3. 'search' → logprob: -12.625007629394531
    4. '_
' → logprob: -17.62500762939453
    5. ' _' → logprob: -17.75000762939453
    6. '```' → logprob: -18.75000762939453
    7. '_SEARCH' → logprob: -18.87500762939453
    8. '_result' → logprob: -19.00000762939453
    9. 'Search' → logprob: -19.12500762939453
    10. '\' → logprob: -19.25000762939453

Token 377: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -3.128163257315464e-07
    2. ' (' → logprob: -15.875
    3. '```' → logprob: -16.125
    4. '(
' → logprob: -17.25
    5. '((' → logprob: -18.125
    6. '   ' → logprob: -19.25
    7. 'aa' → logprob: -19.875
    8. '(None' → logprob: -20.375
    9. '#aa' → logprob: -20.625
    10. ' ' → logprob: -20.875

Token 378: 'aa' (ID: 3545)
  Prédit: 'aa'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aa' → logprob: -0.0009631502907723188
    2. '(' → logprob: -7.00096321105957
    3. ' aa' → logprob: -10.50096321105957
    4. ')' → logprob: -10.75096321105957
    5. ')(' → logprob: -13.25096321105957
    6. 'AA' → logprob: -14.12596321105957
    7. '#aa' → logprob: -16.25096321105957
    8. 'aaa' → logprob: -16.50096321105957
    9. '-aa' → logprob: -18.25096321105957
    10. '   ' → logprob: -18.87596321105957

Token 379: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -6.869017852295656e-06
    2. ' ,' → logprob: -12.000006675720215
    3. ',
' → logprob: -14.250006675720215
    4. '   ' → logprob: -18.25000762939453
    5. '(ff' → logprob: -19.62500762939453
    6. ',
' → logprob: -20.25000762939453
    7. ',

' → logprob: -20.50000762939453
    8. '=' → logprob: -20.62500762939453
    9. '‌,' → logprob: -20.62500762939453
    10. ')' → logprob: -20.75000762939453

Token 380: ' ff' (ID: 35384)
  Prédit: 'ff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ff' → logprob: -0.003178071230649948
    2. ' ff' → logprob: -5.753178119659424
    3. '(ff' → logprob: -16.003177642822266
    4. 'f' → logprob: -16.753177642822266
    5. '	ff' → logprob: -17.003177642822266
    6. '_ff' → logprob: -17.753177642822266
    7. 'FF' → logprob: -18.628177642822266
    8. '.ff' → logprob: -19.378177642822266
    9. 'ffi' → logprob: -20.503177642822266
    10. 'fff' → logprob: -20.753177642822266

Token 381: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -7.32654589228332e-05
    2. ',k' → logprob: -9.750073432922363
    3. ' ,' → logprob: -11.125073432922363
    4. '   ' → logprob: -15.625073432922363
    5. '(' → logprob: -17.625072479248047
    6. ',
' → logprob: -17.875072479248047
    7. '(k' → logprob: -18.500072479248047
    8. ',n' → logprob: -18.625072479248047
    9. 'k' → logprob: -18.750072479248047
    10. ')' → logprob: -18.750072479248047

Token 382: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -2.15310683415737e-05
    2. ' k' → logprob: -10.750021934509277
    3. '   ' → logprob: -17.00002098083496
    4. '	k' → logprob: -18.62502098083496
    5. ')' → logprob: -20.62502098083496
    6. '
' → logprob: -21.12502098083496
    7. ' ' → logprob: -22.37502098083496
    8. '=k' → logprob: -23.12502098083496
    9. '{k' → logprob: -23.37502098083496
    10. '"k' → logprob: -23.62502098083496

Token 383: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.04860270395874977
    2. ')
' → logprob: -3.048602819442749
    3. '   ' → logprob: -11.423603057861328
    4. ')
' → logprob: -12.423603057861328
    5. ' )' → logprob: -15.798603057861328
    6. ')

' → logprob: -16.298603057861328
    7. '
' → logprob: -16.798603057861328
    8. ' )
' → logprob: -17.048603057861328
    9. ' ' → logprob: -17.423603057861328
    10. ')return' → logprob: -17.548603057861328

Token 384: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.018158841878175735
    2. 'print' → logprob: -4.018158912658691
    3. ' print' → logprob: -12.143158912658691
    4. '```' → logprob: -12.893158912658691
    5. '	print' → logprob: -14.518158912658691
    6. '    
' → logprob: -14.768158912658691
    7. '
' → logprob: -15.643158912658691
    8. '_print' → logprob: -18.518157958984375
    9. '(print' → logprob: -19.018157958984375
    10. '   ' → logprob: -19.018157958984375

Token 385: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.16040091216564178
    2. '   ' → logprob: -1.9104008674621582
    3. ' print' → logprob: -8.660401344299316
    4. '```' → logprob: -12.785401344299316
    5. '	print' → logprob: -14.285401344299316
    6. '
' → logprob: -16.660400390625
    7. '_print' → logprob: -18.285400390625
    8. '`' → logprob: -19.160400390625
    9. '``' → logprob: -19.535400390625
    10. '    
' → logprob: -19.535400390625

Token 386: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.00033677343162707984
    2. '(' → logprob: -8.000336647033691
    3. 'result' → logprob: -13.625336647033691
    4. '(
' → logprob: -16.750337600708008
    5. '(results' → logprob: -17.375337600708008
    6. '()' → logprob: -18.000337600708008
    7. '=result' → logprob: -18.125337600708008
    8. ' (' → logprob: -18.500337600708008
    9. '(res' → logprob: -18.625337600708008
    10. '(resultado' → logprob: -18.750337600708008

Token 387: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: 0.0
    2. ')
' → logprob: -17.5
    3. ' )' → logprob: -18.625
    4. ')`' → logprob: -19.625
    5. '   ' → logprob: -20.75
    6. '()' → logprob: -21.125
    7. '')' → logprob: -21.25
    8. '`)' → logprob: -21.5
    9. '))' → logprob: -21.75
    10. '}' → logprob: -21.875

Token 388: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.1756367712223437e-05
    2. ' if' → logprob: -11.625011444091797
    3. '```' → logprob: -12.875011444091797
    4. '
' → logprob: -15.500011444091797
    5. '<|end|>' → logprob: -17.000011444091797
    6. 'main' → logprob: -17.250011444091797
    7. '#' → logprob: -17.375011444091797
    8. '    
' → logprob: -17.875011444091797
    9. '  
' → logprob: -18.250011444091797
    10. 'If' → logprob: -19.000011444091797

Token 389: '()' (ID: 416)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 387
Tokens correctement prédits (1ère position, stricte): 168
Tokens correctement prédits (1ère position, avec adaptation): 190
Tokens correctement prédits (top 10): 338
Précision stricte (1ère position): 43.41%
Précision adaptée (1ère position): 49.10%
Précision (top 10): 87.34%
================================================================================
