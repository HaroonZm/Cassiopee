================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:08:28
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def read_input():
    return input().split()

def parse_integers(values):
    return list(map(int, values))

def get_n_x():
    n_x = read_input()
    return parse_integers(n_x)

def get_a():
    a = read_input()
    return parse_integers(a)

def sort_list(l):
    return sorted(l)

def update_x(x, a_i):
    return x - a_i

def increment_ans(ans):
    return ans + 1

def decrement_ans(ans):
    return ans - 1

def should_break(x):
    return x < 0

def check_final(x):
    return x <= 0

def compute_ans(N, x, a):
    ans = 0
    sorted_a = sort_list(a)
    for i in range(len(sorted_a)):
        x = update_x(x, sorted_a[i])
        ans = increment_ans(ans)
        if should_break(x):
            ans = decrement_ans(ans)
            break
    return ans, x

def print_result(ans, x):
    if check_final(x):
        print(ans)
    else:
        print(decrement_ans(ans))

def main():
    N, x = get_n_x()
    a = get_a()
    ans, new_x = compute_ans(N, x, a)
    print_result(ans, new_x)

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' read' (ID: 1729)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002494683489203453
    2. '_' → logprob: -6.877494812011719
    3. '():' → logprob: -7.127494812011719
    4. '(:' → logprob: -8.252494812011719
    5. '```' → logprob: -8.877494812011719
    6. '(_:' → logprob: -9.377494812011719
    7. ':' → logprob: -9.752494812011719
    8. ' (' → logprob: -10.002494812011719
    9. '(_' → logprob: -10.877494812011719
    10. '()' → logprob: -12.502494812011719

Token 4: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.988785445690155
    2. '\' → logprob: -1.2387855052947998
    3. '\n' → logprob: -1.3637855052947998
    4. '   ' → logprob: -3.1137855052948
    5. '    
' → logprob: -4.863785266876221
    6. '
' → logprob: -5.113785266876221
    7. ' 
' → logprob: -5.613785266876221
    8. '``' → logprob: -5.863785266876221
    9. ':' → logprob: -6.113785266876221
    10. ''\' → logprob: -6.613785266876221

Token 5: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.44253385066986084
    2. '```' → logprob: -2.0675339698791504
    3. 'return' (adapté à ' return') → logprob: -2.6925339698791504
    4. '    ' → logprob: -3.3175339698791504
    5. 'input' → logprob: -3.5675339698791504
    6. 'r' → logprob: -3.5675339698791504
    7. '\' → logprob: -4.19253396987915
    8. 'x' → logprob: -4.31753396987915
    9. '       ' → logprob: -4.69253396987915
    10. '`' → logprob: -5.19253396987915

Token 6: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.16390419006347656
    2. ' input' → logprob: -2.5389041900634766
    3. 'input' → logprob: -3.2889041900634766
    4. '"' → logprob: -3.5389041900634766
    5. ''' → logprob: -5.538904190063477
    6. '  ' → logprob: -7.038904190063477
    7. ' "' → logprob: -8.413904190063477
    8. ' []' → logprob: -8.913904190063477
    9. '(input' → logprob: -9.163904190063477
    10. '(' → logprob: -9.163904190063477

Token 7: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0013410773826763034
    2. '()' → logprob: -7.376340866088867
    3. ''' → logprob: -8.376340866088867
    4. '"' → logprob: -9.126340866088867
    5. '('' → logprob: -9.376340866088867
    6. '("("' → logprob: -9.501340866088867
    7. '```' → logprob: -9.751340866088867
    8. '(
' → logprob: -10.126340866088867
    9. ')' → logprob: -11.126340866088867
    10. '`' → logprob: -11.251340866088867

Token 8: 'split' (ID: 13627)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.001170460251159966
    2. 'rstrip' → logprob: -7.001170635223389
    3. 'split' → logprob: -8.37617015838623
    4. 'replace' → logprob: -11.37617015838623
    5. '()' → logprob: -12.25117015838623
    6. '-strip' → logprob: -12.87617015838623
    7. '_strip' → logprob: -12.87617015838623
    8. 'lower' → logprob: -13.25117015838623
    9. '```' → logprob: -13.62617015838623
    10. '\n' → logprob: -13.75117015838623

Token 9: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.013130461797118187
    2. '()' → logprob: -4.3881306648254395
    3. '('' → logprob: -8.388130187988281
    4. '("("' → logprob: -9.263130187988281
    5. '(`' → logprob: -10.013130187988281
    6. '`' → logprob: -10.138130187988281
    7. '`()' → logprob: -10.388130187988281
    8. ' (' → logprob: -10.388130187988281
    9. '"' → logprob: -10.513130187988281
    10. '```' → logprob: -10.513130187988281

Token 10: 'def' (ID: 1314)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.8710305690765381
    2. '<|end|>' → logprob: -1.121030569076538
    3. 'def' → logprob: -2.746030569076538
    4. '(' → logprob: -2.871030569076538
    5. '[' → logprob: -3.371030569076538
    6. '```' → logprob: -3.621030569076538
    7. '\n' → logprob: -4.246030807495117
    8. 'a' → logprob: -4.621030807495117
    9. '\' → logprob: -4.996030807495117
    10. 'r' → logprob: -5.121030807495117

Token 11: ' parse' (ID: 8420)
  Prédit: ' process'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' process' → logprob: -0.9769185781478882
    2. ' main' → logprob: -1.2269185781478882
    3. ' calculate' → logprob: -1.4769185781478882
    4. ' write' → logprob: -3.2269186973571777
    5. ' read' → logprob: -3.3519186973571777
    6. ' compute' → logprob: -4.226918697357178
    7. ' parse' → logprob: -5.851918697357178
    8. ' solve' → logprob: -6.601918697357178
    9. '_' → logprob: -6.726918697357178
    10. ' print' → logprob: -7.101918697357178

Token 12: '_in' (ID: 2267)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0661911889910698
    2. '_input' → logprob: -2.9411911964416504
    3. '(' → logprob: -5.44119119644165
    4. '_parameters' → logprob: -6.19119119644165
    5. '_line' → logprob: -6.81619119644165
    6. '_command' → logprob: -7.81619119644165
    7. '_data' → logprob: -7.94119119644165
    8. '_arguments' → logprob: -7.94119119644165
    9. '_name' → logprob: -8.316190719604492
    10. '_code' → logprob: -8.441190719604492

Token 13: 'te' (ID: 411)
  Prédit: 'put'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'put' → logprob: -0.13016007840633392
    2. 't' → logprob: -2.255160093307495
    3. 'te' → logprob: -5.005159854888916
    4. 'puts' → logprob: -5.380159854888916
    5. 'teger' → logprob: -5.630159854888916
    6. 'structions' → logprob: -6.380159854888916
    7. 'struction' → logprob: -8.255160331726074
    8. 'tent' → logprob: -8.755160331726074
    9. 'it' → logprob: -10.130160331726074
    10. 'ter' → logprob: -10.630160331726074

Token 14: 'gers' (ID: 13027)
  Prédit: 'gers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'gers' → logprob: -0.5841723680496216
    2. 'ger' → logprob: -0.8341723680496216
    3. 'r' → logprob: -5.209172248840332
    4. 'gr' → logprob: -6.709172248840332
    5. 'rs' → logprob: -6.834172248840332
    6. 'g' → logprob: -7.959172248840332
    7. '```' → logprob: -10.584172248840332
    8. 't' → logprob: -11.709172248840332
    9. '()' → logprob: -12.084172248840332
    10. 'get' → logprob: -12.334172248840332

Token 15: '(values' (ID: 40883)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0011830847943201661
    2. ' (' → logprob: -7.626183032989502
    3. '()' → logprob: -8.00118350982666
    4. '("("' → logprob: -8.87618350982666
    5. '_' → logprob: -9.37618350982666
    6. '('' → logprob: -10.25118350982666
    7. '<|end|>' → logprob: -11.25118350982666
    8. '   ' → logprob: -11.62618350982666
    9. '():' → logprob: -11.87618350982666
    10. '[' → logprob: -12.25118350982666

Token 16: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0021068404894322157
    2. ')' → logprob: -6.752106666564941
    3. '):
' → logprob: -8.127106666564941
    4. '(' → logprob: -9.252106666564941
    5. '   ' → logprob: -9.252106666564941
    6. '():' → logprob: -9.252106666564941
    7. ' ):' → logprob: -9.377106666564941
    8. ':' → logprob: -9.752106666564941
    9. '[]):' → logprob: -9.877106666564941
    10. ',' → logprob: -10.002106666564941

Token 17: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.17983853816986084
    2. '[int' → logprob: -2.3048386573791504
    3. '[' → logprob: -3.4298386573791504
    4. ' return' → logprob: -3.9298386573791504
    5. 'return' → logprob: -5.17983865737915
    6. ' list' → logprob: -5.80483865737915
    7. 'int' → logprob: -6.42983865737915
    8. ' [' → logprob: -7.30483865737915
    9. 'list' → logprob: -7.67983865737915
    10. ' integers' → logprob: -8.054838180541992

Token 18: ' return' (ID: 622)
  Prédit: '[int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[int' → logprob: -0.7917501926422119
    2. '[' → logprob: -1.291750192642212
    3. ' [' → logprob: -2.041750192642212
    4. ' return' → logprob: -3.041750192642212
    5. ' list' → logprob: -3.291750192642212
    6. 'return' (adapté à ' return') → logprob: -3.666750192642212
    7. '   ' → logprob: -3.791750192642212
    8. '[i' → logprob: -5.791749954223633
    9. 'list' → logprob: -5.791749954223633
    10. '[list' → logprob: -6.541749954223633

Token 19: ' list' (ID: 1562)
  Prédit: ' ['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.3136438727378845
    2. ' list' → logprob: -1.5636439323425293
    3. '[' → logprob: -3.3136439323425293
    4. '[list' → logprob: -3.9386439323425293
    5. 'list' → logprob: -6.063643932342529
    6. '[int' → logprob: -6.438643932342529
    7. ' map' → logprob: -10.563643455505371
    8. '[List' → logprob: -11.438643455505371
    9. '[len' → logprob: -11.563643455505371
    10. '   ' → logprob: -12.813643455505371

Token 20: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.5790489912033081
    2. '(' → logprob: -0.8290489912033081
    3. '(values' → logprob: -5.829049110412598
    4. '(int' → logprob: -9.204049110412598
    5. '(

' → logprob: -10.829049110412598
    6. '_map' → logprob: -11.579049110412598
    7. 'map' → logprob: -11.829049110412598
    8. '(
' → logprob: -12.079049110412598
    9. '(filter' → logprob: -12.454049110412598
    10. '(range' → logprob: -12.704049110412598

Token 21: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.002243631286546588
    2. 'int' → logprob: -6.627243518829346
    3. '(' → logprob: -7.127243518829346
    4. ' int' → logprob: -10.252243995666504
    5. '<int' → logprob: -10.502243995666504
    6. '=int' → logprob: -10.877243995666504
    7. ',int' → logprob: -11.002243995666504
    8. '   ' → logprob: -11.877243995666504
    9. ')' → logprob: -12.502243995666504
    10. '[int' → logprob: -13.377243995666504

Token 22: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.11456404626369476
    2. '(values' → logprob: -2.2395639419555664
    3. ' ,' → logprob: -6.989563941955566
    4. 'values' → logprob: -7.364563941955566
    5. ' values' → logprob: -9.989563941955566
    6. '	values' → logprob: -10.114563941955566
    7. '(' → logprob: -10.364563941955566
    8. '.values' → logprob: -11.364563941955566
    9. '<|end|>' → logprob: -11.364563941955566
    10. '   ' → logprob: -11.739563941955566

Token 23: ' values' (ID: 4824)
  Prédit: ' values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' values' → logprob: -0.04860677942633629
    2. 'values' → logprob: -3.0486068725585938
    3. '(values' → logprob: -11.798606872558594
    4. '	values' → logprob: -11.798606872558594
    5. '.values' → logprob: -12.923606872558594
    6. '_values' → logprob: -13.548606872558594
    7. 'Values' → logprob: -15.548606872558594
    8. '-values' → logprob: -15.673606872558594
    9. ' Values' → logprob: -16.798606872558594
    10. ')' → logprob: -16.798606872558594

Token 24: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -9.436450636712834e-05
    2. ')))' → logprob: -9.625094413757324
    3. ')' → logprob: -10.750094413757324
    4. ' ))' → logprob: -12.500094413757324
    5. '))
' → logprob: -13.500094413757324
    6. '   ' → logprob: -13.625094413757324
    7. '()))' → logprob: -14.875094413757324
    8. ' ' → logprob: -16.750093460083008
    9. '));' → logprob: -17.125093460083008
    10. '),' → logprob: -17.500093460083008

Token 25: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0025710216723382473
    2. '
' → logprob: -6.752571105957031
    3. '

' → logprob: -7.252571105957031
    4. '\' → logprob: -7.877571105957031
    5. '<|end|>' → logprob: -8.877571105957031
    6. '```' → logprob: -9.627571105957031
    7. '\n' → logprob: -10.127571105957031
    8. '<|end|>' → logprob: -10.752571105957031
    9. 'd' → logprob: -11.377571105957031
    10. '#' → logprob: -11.877571105957031

Token 26: ' get' (ID: 717)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -1.0567058324813843
    2. ' main' → logprob: -1.3067058324813843
    3. ' compute' → logprob: -2.056705951690674
    4. ' solve' → logprob: -2.181705951690674
    5. ' process' → logprob: -2.306705951690674
    6. ' sum' → logprob: -4.181705951690674
    7. ' factorial' → logprob: -4.931705951690674
    8. 'calculate' → logprob: -5.681705951690674
    9. ' count' → logprob: -5.931705951690674
    10. ' find' → logprob: -5.931705951690674

Token 27: '_n' (ID: 2170)
  Prédit: '_max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_max' → logprob: -0.49041470885276794
    2. '_' → logprob: -1.1154147386550903
    3. '_sum' → logprob: -3.240414619445801
    4. '_user' → logprob: -5.615414619445801
    5. '_unique' → logprob: -5.740414619445801
    6. '_average' → logprob: -5.865414619445801
    7. '_input' → logprob: -6.240414619445801
    8. ' _' → logprob: -6.490414619445801
    9. '_total' → logprob: -6.740414619445801
    10. '_data' → logprob: -6.990414619445801

Token 28: '_x' (ID: 7054)
  Prédit: 'ext'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ext' → logprob: -0.07373760640621185
    2. 'umber' → logprob: -3.573737621307373
    3. '_' → logprob: -3.948737621307373
    4. '_ext' → logprob: -4.448737621307373
    5. 'um' → logprob: -4.948737621307373
    6. 'ame' → logprob: -6.073737621307373
    7. 'umbers' → logprob: -6.948737621307373
    8. 'e' → logprob: -8.073737144470215
    9. '_e' → logprob: -8.698737144470215
    10. '_items' → logprob: -8.823737144470215

Token 29: '():
' (ID: 8595)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -1.1323868036270142
    2. '_values' → logprob: -1.3823868036270142
    3. '():' → logprob: -1.8823868036270142
    4. '_' → logprob: -2.3823866844177246
    5. '(' → logprob: -3.0073866844177246
    6. '_value' → logprob: -3.1323866844177246
    7. '_and' → logprob: -3.7573866844177246
    8. '_range' → logprob: -5.507386684417725
    9. 'or' → logprob: -5.757386684417725
    10. 't' → logprob: -5.882386684417725

Token 30: '   ' (ID: 271)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.6320963501930237
    2. '():' → logprob: -1.007096290588379
    3. '   ' → logprob: -2.757096290588379
    4. ' ()' → logprob: -3.632096290588379
    5. '():
' → logprob: -5.257096290588379
    6. ' ():' → logprob: -5.382096290588379
    7. '(' → logprob: -7.132096290588379
    8. ':' → logprob: -7.507096290588379
    9. '()
' → logprob: -7.632096290588379
    10. ' return' → logprob: -8.507096290588379

Token 31: ' n' (ID: 297)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.5217541456222534
    2. '   ' → logprob: -1.2717541456222534
    3. ' return' → logprob: -2.146754264831543
    4. 'n' (adapté à ' n') → logprob: -4.896754264831543
    5. ' n' → logprob: -6.521754264831543
    6. 'x' → logprob: -8.896754264831543
    7. '    
' → logprob: -9.396754264831543
    8. 'value' → logprob: -10.521754264831543
    9. 'values' → logprob: -10.646754264831543
    10. ' ' → logprob: -11.021754264831543

Token 32: '_x' (ID: 7054)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0005299181793816388
    2. ' ,' → logprob: -7.875529766082764
    3. '_,' → logprob: -10.000530242919922
    4. ' ' → logprob: -10.250530242919922
    5. ',x' → logprob: -10.750530242919922
    6. ',_' → logprob: -10.750530242919922
    7. '_' → logprob: -10.875530242919922
    8. '_x' → logprob: -12.375530242919922
    9. 'x' → logprob: -14.000530242919922
    10. '=' → logprob: -14.125530242919922

Token 33: ' =' (ID: 314)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.29223164916038513
    2. ' =' → logprob: -1.5422316789627075
    3. '=' → logprob: -3.292231559753418
    4. '(' → logprob: -7.167231559753418
    5. ' ()' → logprob: -7.542231559753418
    6. ',' → logprob: -7.667231559753418
    7. ')' → logprob: -9.042231559753418
    8. '_' → logprob: -9.417231559753418
    9. '.' → logprob: -9.667231559753418
    10. '().' → logprob: -9.917231559753418

Token 34: ' read' (ID: 1729)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.5011472105979919
    2. ' read' → logprob: -1.2511472702026367
    3. 'input' → logprob: -2.7511472702026367
    4. 'read' → logprob: -3.1261472702026367
    5. ' list' → logprob: -8.751147270202637
    6. 'list' → logprob: -10.251147270202637
    7. ' ' → logprob: -11.126147270202637
    8. ' readline' → logprob: -11.501147270202637
    9. ' tuple' → logprob: -12.251147270202637
    10. ' int' → logprob: -12.501147270202637

Token 35: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.002035584067925811
    2. '_' → logprob: -6.377035617828369
    3. '_inputs' → logprob: -9.377035140991211
    4. ')' → logprob: -9.877035140991211
    5. '()' → logprob: -10.252035140991211
    6. '```' → logprob: -10.627035140991211
    7. '('_' → logprob: -10.752035140991211
    8. '(' → logprob: -10.877035140991211
    9. '("_' → logprob: -11.252035140991211
    10. 'input' → logprob: -11.502035140991211

Token 36: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0005753128207288682
    2. '())' → logprob: -7.500575542449951
    3. '()[' → logprob: -12.125575065612793
    4. '(' → logprob: -12.250575065612793
    5. ')' → logprob: -12.500575065612793
    6. '()]' → logprob: -13.000575065612793
    7. '()
' → logprob: -13.750575065612793
    8. ' ()' → logprob: -14.000575065612793
    9. '()`' → logprob: -14.250575065612793
    10. '()

' → logprob: -14.375575065612793

Token 37: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.35441648960113525
    2. '   ' → logprob: -1.6044164896011353
    3. '()
' → logprob: -3.4794163703918457
    4. '[' → logprob: -3.8544163703918457
    5. '    
' → logprob: -4.229416370391846
    6. '()' → logprob: -4.354416370391846
    7. 'return' → logprob: -4.979416370391846
    8. '```' → logprob: -6.604416370391846
    9. '<|end|>' → logprob: -6.729416370391846
    10. ' return' → logprob: -6.979416370391846

Token 38: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2791014611721039
    2. 'return' (adapté à ' return') → logprob: -2.2791013717651367
    3. '
' → logprob: -2.9041013717651367
    4. ' return' → logprob: -3.0291013717651367
    5. ' n' → logprob: -3.6541013717651367
    6. 'n' → logprob: -4.904101371765137
    7. '    
' → logprob: -5.904101371765137
    8. ' ' → logprob: -7.654101371765137
    9. ' 
' → logprob: -7.654101371765137
    10. '[' → logprob: -8.654101371765137

Token 39: ' parse' (ID: 8420)
  Prédit: ' parse'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' parse' → logprob: -0.1510641723871231
    2. 'parse' → logprob: -2.526064157485962
    3. ' int' → logprob: -3.276064157485962
    4. ' list' → logprob: -5.151064395904541
    5. ' n' → logprob: -5.276064395904541
    6. 'int' → logprob: -5.776064395904541
    7. ' [' → logprob: -6.151064395904541
    8. ' (' → logprob: -6.276064395904541
    9. ' tuple' → logprob: -6.276064395904541
    10. 'list' → logprob: -7.276064395904541

Token 40: '_in' (ID: 2267)
  Prédit: '_in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_in' → logprob: -3.9888433093437925e-05
    2. '_int' → logprob: -10.250040054321289
    3. '_integer' → logprob: -12.875040054321289
    4. 'inte' → logprob: -14.375040054321289
    5. '_' → logprob: -14.500040054321289
    6. 'int' → logprob: -14.750040054321289
    7. '_n' → logprob: -16.00004005432129
    8. '_IN' → logprob: -17.25004005432129
    9. '_integr' → logprob: -17.37504005432129
    10. '_i' → logprob: -17.37504005432129

Token 41: 'te' (ID: 411)
  Prédit: 'te'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'te' → logprob: -0.20586316287517548
    2. 't' → logprob: -1.705863118171692
    3. 'gers' → logprob: -5.705862998962402
    4. '_te' → logprob: -7.955862998962402
    5. '_t' → logprob: -8.580862998962402
    6. 'eg' → logprob: -8.955862998962402
    7. 'teg' → logprob: -8.955862998962402
    8. '_' → logprob: -9.455862998962402
    9. 'g' → logprob: -9.955862998962402
    10. '```' → logprob: -10.205862998962402

Token 42: 'gers' (ID: 13027)
  Prédit: 'gers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'gers' → logprob: -0.000400521676056087
    2. 'gr' → logprob: -8.62540054321289
    3. 'ger' → logprob: -8.62540054321289
    4. 'g' → logprob: -11.25040054321289
    5. 'ers' → logprob: -11.75040054321289
    6. 'rs' → logprob: -12.00040054321289
    7. 'ge' → logprob: -12.87540054321289
    8. '```' → logprob: -13.00040054321289
    9. '_' → logprob: -13.25040054321289
    10. 'get' → logprob: -13.75040054321289

Token 43: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.018162818625569344
    2. '(' → logprob: -4.018162727355957
    3. ' (' → logprob: -11.768162727355957
    4. '((' → logprob: -13.768162727355957
    5. '("("' → logprob: -14.018162727355957
    6. '(
' → logprob: -14.143162727355957
    7. ')(' → logprob: -14.518162727355957
    8. '(noun' → logprob: -15.268162727355957
    9. '(read' → logprob: -15.393162727355957
    10. '(

' → logprob: -15.518162727355957

Token 44: '_x' (ID: 7054)
  Prédit: '_x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_x' → logprob: -1.1875571544806007e-05
    2. '_' → logprob: -11.375011444091797
    3. '_n' → logprob: -16.125011444091797
    4. ')_' → logprob: -16.500011444091797
    5. ' _' → logprob: -16.875011444091797
    6. ')' → logprob: -16.875011444091797
    7. 'x' → logprob: -17.125011444091797
    8. '_)' → logprob: -17.250011444091797
    9. '_X' → logprob: -18.500011444091797
    10. '```' → logprob: -20.000011444091797

Token 45: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00020115631923545152
    2. '))' → logprob: -8.750201225280762
    3. '())' → logprob: -10.875201225280762
    4. '()' → logprob: -12.250201225280762
    5. '[' → logprob: -12.250201225280762
    6. ' )' → logprob: -12.500201225280762
    7. '   ' → logprob: -12.625201225280762
    8. ')))' → logprob: -13.375201225280762
    9. ')`' → logprob: -13.625201225280762
    10. '(' → logprob: -13.750201225280762

Token 46: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.08457683026790619
    2. 'n' → logprob: -3.4595768451690674
    3. '```' → logprob: -3.8345768451690674
    4. '(n' → logprob: -4.959576606750488
    5. '(' → logprob: -5.084576606750488
    6. '()' → logprob: -5.209576606750488
    7. '\' → logprob: -6.209576606750488
    8. '(
' → logprob: -6.334576606750488
    9. '[' → logprob: -6.334576606750488
    10. 'x' → logprob: -6.959576606750488

Token 47: ' get' (ID: 717)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.7100769281387329
    2. ' get' → logprob: -1.335076928138733
    3. ' solve' → logprob: -1.835076928138733
    4. ' calculate' → logprob: -2.8350768089294434
    5. ' find' → logprob: -4.960076808929443
    6. ' compute' → logprob: -4.960076808929443
    7. ' process' → logprob: -5.210076808929443
    8. ' parse' → logprob: -6.460076808929443
    9. ' read' → logprob: -7.335076808929443
    10. ' space' → logprob: -7.460076808929443

Token 48: '_a' (ID: 10852)
  Prédit: '_n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_n' → logprob: -1.0323940515518188
    2. '_input' → logprob: -1.4073940515518188
    3. '_max' → logprob: -2.4073939323425293
    4. '_values' → logprob: -2.9073939323425293
    5. '_' → logprob: -3.1573939323425293
    6. '_user' → logprob: -3.4073939323425293
    7. '_array' → logprob: -3.6573939323425293
    8. '_s' → logprob: -4.157393932342529
    9. '_output' → logprob: -4.407393932342529
    10. '_data' → logprob: -4.657393932342529

Token 49: '():
' (ID: 8595)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.20457035303115845
    2. '_' → logprob: -1.9545702934265137
    3. '_values' → logprob: -3.9545702934265137
    4. '():' → logprob: -4.079570293426514
    5. 'rray' → logprob: -5.829570293426514
    6. '_list' → logprob: -6.704570293426514
    7. '(' → logprob: -7.079570293426514
    8. '_r' → logprob: -8.079570770263672
    9. '_input' → logprob: -8.204570770263672
    10. '_elements' → logprob: -8.329570770263672

Token 50: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0003022153687197715
    2. ' return' → logprob: -8.7503023147583
    3. 'a' → logprob: -9.6253023147583
    4. ' a' → logprob: -10.1253023147583
    5. 'return' → logprob: -10.7503023147583
    6. '    
' → logprob: -12.5003023147583
    7. '  ' → logprob: -12.7503023147583
    8. ' ' → logprob: -12.7503023147583
    9. '    ' → logprob: -12.8753023147583
    10. '_a' → logprob: -13.5003023147583

Token 51: ' a' (ID: 261)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004547846503555775
    2. 'return' → logprob: -5.504548072814941
    3. ' return' → logprob: -8.379548072814941
    4. 'a' (adapté à ' a') → logprob: -8.379548072814941
    5. 'read' → logprob: -12.629548072814941
    6. ' a' → logprob: -12.754548072814941
    7. '   ' → logprob: -13.254548072814941
    8. '  ' → logprob: -14.379548072814941
    9. '```' → logprob: -14.879548072814941
    10. '    ' → logprob: -15.504548072814941

Token 52: ' =' (ID: 314)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.1703680157661438
    2. '():' → logprob: -2.045367956161499
    3. ' =' → logprob: -4.170368194580078
    4. '_' → logprob: -4.795368194580078
    5. ' ()' → logprob: -6.295368194580078
    6. '=' → logprob: -7.045368194580078
    7. '(' → logprob: -7.795368194580078
    8. '[]' → logprob: -9.170368194580078
    9. '().' → logprob: -9.920368194580078
    10. ' ():' → logprob: -9.920368194580078

Token 53: ' read' (ID: 1729)
  Prédit: ' read'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.06994632631540298
    2. 'read' → logprob: -2.6949462890625
    3. '	read' → logprob: -12.4449462890625
    4. ' input' → logprob: -13.4449462890625
    5. '[]' → logprob: -13.6949462890625
    6. ' ' → logprob: -14.1949462890625
    7. ' get' → logprob: -14.3199462890625
    8. ' parse' → logprob: -14.5699462890625
    9. ' []' → logprob: -15.1949462890625
    10. '(read' → logprob: -15.3199462890625

Token 54: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.0008283290662802756
    2. '_a' → logprob: -8.000828742980957
    3. '_' → logprob: -8.125828742980957
    4. '_line' → logprob: -8.875828742980957
    5. '()' → logprob: -10.750828742980957
    6. '_output' → logprob: -11.250828742980957
    7. '```' → logprob: -11.750828742980957
    8. ')_' → logprob: -12.750828742980957
    9. '_in' → logprob: -13.125828742980957
    10. ')' → logprob: -13.625828742980957

Token 55: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0001584850688232109
    2. '())' → logprob: -9.125158309936523
    3. '()
' → logprob: -10.875158309936523
    4. '().' → logprob: -11.500158309936523
    5. ')' → logprob: -11.750158309936523
    6. '()

' → logprob: -12.750158309936523
    7. '()<' → logprob: -13.250158309936523
    8. '()]' → logprob: -13.500158309936523
    9. ' ()' → logprob: -13.875158309936523
    10. '(' → logprob: -14.125158309936523

Token 56: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.000688486616127193
    2. 'return' → logprob: -7.750688552856445
    3. ' return' → logprob: -9.250688552856445
    4. '	return' → logprob: -10.125688552856445
    5. '<|end|>' → logprob: -10.125688552856445
    6. '    
' → logprob: -10.500688552856445
    7. '
' → logprob: -11.250688552856445
    8. '```' → logprob: -11.375688552856445
    9. '       ' → logprob: -11.625688552856445
    10. '    ' → logprob: -12.375688552856445

Token 57: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.010138398967683315
    2. ' return' → logprob: -4.885138511657715
    3. 'return' (adapté à ' return') → logprob: -6.010138511657715
    4. '	return' → logprob: -9.885138511657715
    5. '       ' → logprob: -11.510138511657715
    6. '    ' → logprob: -12.510138511657715
    7. ')' → logprob: -12.885138511657715
    8. ' ' → logprob: -13.010138511657715
    9. '<|end|>' → logprob: -13.635138511657715
    10. '  ' → logprob: -13.760138511657715

Token 58: ' parse' (ID: 8420)
  Prédit: ' parse'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' parse' → logprob: -0.3494799733161926
    2. 'parse' → logprob: -1.2244799137115479
    3. ' a' → logprob: -7.474480152130127
    4. 'a' → logprob: -7.724480152130127
    5. ' list' → logprob: -12.099479675292969
    6. '(parse' → logprob: -12.099479675292969
    7. '	parse' → logprob: -12.224479675292969
    8. ' ' → logprob: -12.724479675292969
    9. 'list' → logprob: -12.849479675292969
    10. '=parse' → logprob: -14.599479675292969

Token 59: '_in' (ID: 2267)
  Prédit: '_in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_in' → logprob: -0.0004936986370012164
    2. '_int' → logprob: -7.62549352645874
    3. 'inte' → logprob: -13.375494003295898
    4. '_' → logprob: -13.375494003295898
    5. 'int' → logprob: -13.750494003295898
    6. '_integer' → logprob: -14.875494003295898
    7. '<int' → logprob: -15.375494003295898
    8. '_integr' → logprob: -15.750494003295898
    9. '_i' → logprob: -15.750494003295898
    10. '(_' → logprob: -16.2504940032959

Token 60: 'te' (ID: 411)
  Prédit: 'te'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'te' → logprob: -0.0010401944164186716
    2. 't' → logprob: -7.501039981842041
    3. '_te' → logprob: -8.5010404586792
    4. 'eg' → logprob: -9.2510404586792
    5. 'gers' → logprob: -9.7510404586792
    6. 'teg' → logprob: -10.0010404586792
    7. '_' → logprob: -10.1260404586792
    8. '```' → logprob: -10.8760404586792
    9. '_t' → logprob: -11.8760404586792
    10. 'teger' → logprob: -12.6260404586792

Token 61: 'gers' (ID: 13027)
  Prédit: 'gers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'gers' → logprob: -0.00010020548506872728
    2. 'gr' → logprob: -9.500100135803223
    3. 'g' → logprob: -11.250100135803223
    4. 'ger' → logprob: -11.500100135803223
    5. 'get' → logprob: -14.500100135803223
    6. '```' → logprob: -15.000100135803223
    7. 'gres' → logprob: -15.500100135803223
    8. '   ' → logprob: -15.625100135803223
    9. '_g' → logprob: -15.875100135803223
    10. 'ers' → logprob: -16.62510108947754

Token 62: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.00033903829171322286
    2. '(' → logprob: -8.00033950805664
    3. ' (' → logprob: -13.00033950805664
    4. '(A' → logprob: -14.75033950805664
    5. '(o' → logprob: -15.87533950805664
    6. '```' → logprob: -16.12533950805664
    7. '("("' → logprob: -16.50033950805664
    8. '(ab' → logprob: -16.75033950805664
    9. '(os' → logprob: -16.75033950805664
    10. '(ai' → logprob: -16.87533950805664

Token 63: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0009912493405863643
    2. '())' → logprob: -7.000991344451904
    3. '()' → logprob: -9.625990867614746
    4. '))' → logprob: -11.500990867614746
    5. ' )' → logprob: -13.875990867614746
    6. '[])' → logprob: -14.250990867614746
    7. '`)' → logprob: -14.500990867614746
    8. '   ' → logprob: -14.875990867614746
    9. '[' → logprob: -15.250990867614746
    10. ')`' → logprob: -16.000991821289062

Token 64: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.000518482003826648
    2. '```' → logprob: -8.000518798828125
    3. 'n' → logprob: -8.875518798828125
    4. '\' → logprob: -10.625518798828125
    5. '\n' → logprob: -12.375518798828125
    6. '
' → logprob: -12.750518798828125
    7. '``' → logprob: -12.750518798828125
    8. '#' → logprob: -13.125518798828125
    9. 'ndef' → logprob: -13.625518798828125
    10. '<|end|>' → logprob: -13.750518798828125

Token 65: ' sort' (ID: 4506)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.21811321377754211
    2. ' solve' → logprob: -1.9681131839752197
    3. ' calculate' → logprob: -3.5931131839752197
    4. ' process' → logprob: -4.343113422393799
    5. ' def' → logprob: -5.468113422393799
    6. ' compute' → logprob: -5.468113422393799
    7. ' get' → logprob: -6.718113422393799
    8. ' max' → logprob: -6.968113422393799
    9. ' find' → logprob: -7.218113422393799
    10. 'solve' → logprob: -7.468113422393799

Token 66: '_list' (ID: 4162)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -1.291526436805725
    2. '(' → logprob: -1.416526436805725
    3. '(a' → logprob: -1.416526436805725
    4. '_a' → logprob: -1.541526436805725
    5. '_(' → logprob: -3.9165263175964355
    6. '_list' → logprob: -6.4165263175964355
    7. '(_' → logprob: -6.7915263175964355
    8. '_array' → logprob: -7.0415263175964355
    9. 'a' → logprob: -7.6665263175964355
    10. '```' → logprob: -7.9165263175964355

Token 67: '(l' (ID: 4179)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.14586815237998962
    2. '(a' → logprob: -2.0208680629730225
    3. '_' → logprob: -6.895868301391602
    4. '(_' → logprob: -7.770868301391602
    5. '_(' → logprob: -8.020868301391602
    6. '(lst' → logprob: -8.145868301391602
    7. '_list' → logprob: -8.645868301391602
    8. '(_)' → logprob: -8.645868301391602
    9. '_a' → logprob: -9.270868301391602
    10. '_by' → logprob: -9.395868301391602

Token 68: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.05976260080933571
    2. ')' → logprob: -3.184762716293335
    3. 'ist' → logprob: -4.309762477874756
    4. '):
' → logprob: -6.684762477874756
    5. ' ):' → logprob: -7.184762477874756
    6. '(' → logprob: -7.934762477874756
    7. '   ' → logprob: -8.934762954711914
    8. 'u' → logprob: -9.059762954711914
    9. '[]):' → logprob: -9.059762954711914
    10. '_' → logprob: -9.559762954711914

Token 69: '   ' (ID: 271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1822553128004074
    2. '(l' → logprob: -2.432255268096924
    3. '   ' → logprob: -2.932255268096924
    4. '(
' → logprob: -4.432255268096924
    5. '(sorted' → logprob: -5.432255268096924
    6. '[' → logprob: -6.682255268096924
    7. '.sort' → logprob: -7.057255268096924
    8. '(lst' → logprob: -7.182255268096924
    9. ' l' → logprob: -7.307255268096924
    10. ' (' → logprob: -7.307255268096924

Token 70: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.8923317193984985
    2. 'sorted' → logprob: -1.3923317193984985
    3. ' return' → logprob: -1.5173317193984985
    4. '   ' → logprob: -2.767331600189209
    5. ' sorted' → logprob: -2.892331600189209
    6. ' l' → logprob: -5.892331600189209
    7. 'l' → logprob: -6.767331600189209
    8. '```' → logprob: -8.517332077026367
    9. ' ' → logprob: -10.017332077026367
    10. '    
' → logprob: -10.767332077026367

Token 71: ' sorted' (ID: 20099)
  Prédit: ' sorted'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sorted' → logprob: -0.12693829834461212
    2. 'sorted' → logprob: -2.1269383430480957
    3. '(sorted' → logprob: -12.001937866210938
    4. ' ' → logprob: -12.876937866210938
    5. '   ' → logprob: -14.751937866210938
    6. '.sorted' → logprob: -15.126937866210938
    7. ' l' → logprob: -15.376937866210938
    8. '```' → logprob: -15.376937866210938
    9. ' ' → logprob: -16.376937866210938
    10. ' []' → logprob: -16.376937866210938

Token 72: '(l' (ID: 4179)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3869149088859558
    2. '(l' → logprob: -1.1369149684906006
    3. '(list' → logprob: -10.51191520690918
    4. '(
' → logprob: -12.76191520690918
    5. '(ll' → logprob: -12.76191520690918
    6. '(

' → logprob: -13.13691520690918
    7. '(lst' → logprob: -13.26191520690918
    8. '((' → logprob: -13.51191520690918
    9. '(ls' → logprob: -13.51191520690918
    10. '(s' → logprob: -13.88691520690918

Token 73: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -3.8889261304575484e-06
    2. '   ' → logprob: -13.625003814697266
    3. '))' → logprob: -14.125003814697266
    4. ' )' → logprob: -14.125003814697266
    5. '[' → logprob: -14.875003814697266
    6. ')
' → logprob: -15.750003814697266
    7. '(' → logprob: -15.750003814697266
    8. ')))' → logprob: -16.125003814697266
    9. '())' → logprob: -16.250003814697266
    10. '()' → logprob: -16.375003814697266

Token 74: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.002879999577999115
    2. '<|end|>' → logprob: -6.627880096435547
    3. '```' → logprob: -7.377880096435547
    4. '

' → logprob: -8.252880096435547
    5. '\' → logprob: -8.877880096435547
    6. 'n' → logprob: -9.502880096435547
    7. '(' → logprob: -9.627880096435547
    8. '<|end|>' → logprob: -9.627880096435547
    9. '
' → logprob: -10.002880096435547
    10. '()' → logprob: -10.252880096435547

Token 75: ' update' (ID: 4027)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.01401035487651825
    2. ' max' → logprob: -5.764010429382324
    3. ' sum' → logprob: -5.889010429382324
    4. ' find' → logprob: -6.389010429382324
    5. ' reverse' → logprob: -6.639010429382324
    6. ' binary' → logprob: -7.264010429382324
    7. ' calculate' → logprob: -7.264010429382324
    8. 'main' → logprob: -7.264010429382324
    9. ' sort' → logprob: -7.389010429382324
    10. ' solve' → logprob: -7.514010429382324

Token 76: '_x' (ID: 7054)
  Prédit: '_list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_list' → logprob: -0.510751485824585
    2. '_' → logprob: -1.260751485824585
    3. '_a' → logprob: -3.010751485824585
    4. '_(' → logprob: -3.260751485824585
    5. '_value' → logprob: -5.510751724243164
    6. '(' → logprob: -5.510751724243164
    7. '_array' → logprob: -5.635751724243164
    8. '_values' → logprob: -5.885751724243164
    9. '(_' → logprob: -6.385751724243164
    10. '(a' → logprob: -6.635751724243164

Token 77: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.5998889207839966
    2. '(' → logprob: -0.8498889207839966
    3. '_' → logprob: -4.224888801574707
    4. '(_' → logprob: -5.474888801574707
    5. '_x' → logprob: -6.474888801574707
    6. '(s' → logprob: -6.724888801574707
    7. '(_)' → logprob: -7.974888801574707
    8. '(n' → logprob: -8.224888801574707
    9. '(a' → logprob: -8.349888801574707
    10. '(X' → logprob: -8.599888801574707

Token 78: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0007528089336119592
    2. ',x' → logprob: -7.375752925872803
    3. ',n' → logprob: -10.125752449035645
    4. ',y' → logprob: -10.500752449035645
    5. '):' → logprob: -10.750752449035645
    6. ' ,' → logprob: -11.125752449035645
    7. ',a' → logprob: -12.500752449035645
    8. ',int' → logprob: -13.125752449035645
    9. ',i' → logprob: -13.500752449035645
    10. ',k' → logprob: -13.625752449035645

Token 79: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.20903903245925903
    2. 'a' → logprob: -2.3340389728546143
    3. ' value' → logprob: -3.8340389728546143
    4. ' val' → logprob: -4.209039211273193
    5. ' delta' → logprob: -4.709039211273193
    6. ' update' → logprob: -4.834039211273193
    7. ' y' → logprob: -5.084039211273193
    8. ' increment' → logprob: -5.334039211273193
    9. 'value' → logprob: -5.959039211273193
    10. ' updates' → logprob: -5.959039211273193

Token 80: '_i' (ID: 10853)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.34380656480789185
    2. '[i' → logprob: -1.718806505203247
    3. '):' → logprob: -2.343806505203247
    4. ',i' → logprob: -4.968806743621826
    5. '_i' → logprob: -5.468806743621826
    6. '[' → logprob: -6.593806743621826
    7. 'i' → logprob: -7.093806743621826
    8. '_list' → logprob: -7.093806743621826
    9. '):
' → logprob: -7.843806743621826
    10. ' ,' → logprob: -8.968806266784668

Token 81: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.03173926845192909
    2. '):
' → logprob: -3.5317392349243164
    3. ',' → logprob: -6.531739234924316
    4. ' ):' → logprob: -8.281739234924316
    5. ')' → logprob: -8.906739234924316
    6. '):
' → logprob: -10.031739234924316
    7. '_' → logprob: -11.406739234924316
    8. '   ' → logprob: -11.406739234924316
    9. '[i' → logprob: -11.906739234924316
    10. 's' → logprob: -11.906739234924316

Token 82: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5760592818260193
    2. ',' → logprob: -1.076059341430664
    3. ' ' → logprob: -3.201059341430664
    4. ' x' → logprob: -3.576059341430664
    5. '   ' → logprob: -4.201059341430664
    6. ':
' → logprob: -5.951059341430664
    7. ' if' → logprob: -6.076059341430664
    8. ' ,' → logprob: -6.326059341430664
    9. ' :' → logprob: -6.951059341430664
    10. '[' → logprob: -7.076059341430664

Token 83: ' return' (ID: 622)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.5547811985015869
    2. ' return' → logprob: -1.054781198501587
    3. ' if' → logprob: -3.054781198501587
    4. 'x' → logprob: -4.179780960083008
    5. 'return' (adapté à ' return') → logprob: -4.429780960083008
    6. '   ' → logprob: -6.304780960083008
    7. 'if' → logprob: -6.804780960083008
    8. ' ' → logprob: -9.304780960083008
    9. '    ' → logprob: -10.054780960083008
    10. ' max' → logprob: -10.554780960083008

Token 84: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.16098259389400482
    2. 'x' → logprob: -1.910982608795166
    3. ' max' → logprob: -7.535982608795166
    4. 'max' → logprob: -8.785982131958008
    5. ' ' → logprob: -10.910982131958008
    6. '(x' → logprob: -11.035982131958008
    7. ' (' → logprob: -11.410982131958008
    8. ' min' → logprob: -12.285982131958008
    9. '(' → logprob: -12.660982131958008
    10. '0' → logprob: -12.910982131958008

Token 85: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.0587335005402565
    2. '-' → logprob: -3.6837334632873535
    3. ' +' → logprob: -3.8087334632873535
    4. '+' → logprob: -4.8087334632873535
    5. ' *' → logprob: -7.3087334632873535
    6. ' ' → logprob: -7.6837334632873535
    7. '*' → logprob: -8.308733940124512
    8. '_' → logprob: -9.433733940124512
    9. '>' → logprob: -10.683733940124512
    10. ' -=' → logprob: -11.183733940124512

Token 86: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.07889220863580704
    2. ' a' → logprob: -2.578892230987549
    3. ' ' → logprob: -14.20389175415039
    4. '1' → logprob: -14.32889175415039
    5. '	a' → logprob: -14.57889175415039
    6. '   ' → logprob: -15.32889175415039
    7. 'ai' → logprob: -16.07889175415039
    8. ' ' → logprob: -16.45389175415039
    9. '(a' → logprob: -16.70389175415039
    10. '_a' → logprob: -17.20389175415039

Token 87: '_i' (ID: 10853)
  Prédit: '_i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_i' → logprob: -0.004292795900255442
    2. '_' → logprob: -5.504292964935303
    3. 'i' → logprob: -8.879292488098145
    4. '[' → logprob: -10.629292488098145
    5. '[_' → logprob: -11.254292488098145
    6. '[i' → logprob: -11.754292488098145
    7. ' _' → logprob: -12.129292488098145
    8. '```' → logprob: -12.754292488098145
    9. 'underscore' → logprob: -12.879292488098145
    10. 'a' → logprob: -12.879292488098145

Token 88: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0666695088148117
    2. '

' → logprob: -3.816669464111328
    3. '
' → logprob: -4.316669464111328
    4. '```' → logprob: -4.816669464111328
    5. '\n' → logprob: -5.691669464111328
    6. '_

' → logprob: -5.816669464111328
    7. '\' → logprob: -6.066669464111328
    8. '(' → logprob: -6.066669464111328
    9. '<|end|>' → logprob: -6.316669464111328
    10. '*' → logprob: -6.441669464111328

Token 89: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0010872321436181664
    2. '\' → logprob: -7.626087188720703
    3. '```' → logprob: -8.626087188720703
    4. '

' → logprob: -8.876087188720703
    5. '\n' → logprob: -9.126087188720703
    6. '<|end|>' → logprob: -9.626087188720703
    7. '
' → logprob: -10.501087188720703
    8. ' def' → logprob: -11.251087188720703
    9. '<|end|>' → logprob: -11.876087188720703
    10. ' 

' → logprob: -12.001087188720703

Token 90: ' increment' (ID: 24032)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.11677613109350204
    2. ' solve' → logprob: -3.36677622795105
    3. ' calculate' → logprob: -3.99177622795105
    4. ' sort' → logprob: -3.99177622795105
    5. ' process' → logprob: -4.991775989532471
    6. ' max' → logprob: -5.241775989532471
    7. ' def' → logprob: -5.366775989532471
    8. ' check' → logprob: -5.491775989532471
    9. ' update' → logprob: -5.741775989532471
    10. ' get' → logprob: -5.741775989532471

Token 91: '_ans' (ID: 146254)
  Prédit: '_x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_x' → logprob: -0.6399044990539551
    2. '(' → logprob: -1.264904499053955
    3. '_' → logprob: -1.889904499053955
    4. '(x' → logprob: -4.514904499053955
    5. '_counter' → logprob: -4.889904499053955
    6. '_count' → logprob: -5.264904499053955
    7. '_value' → logprob: -5.389904499053955
    8. '(_' → logprob: -6.389904499053955
    9. ' (' → logprob: -6.639904499053955
    10. '_amount' → logprob: -6.764904499053955

Token 92: '(ans' (ID: 70054)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.3936617970466614
    2. '(' → logprob: -1.5186617374420166
    3. '()' → logprob: -2.2686617374420166
    4. '(ans' → logprob: -6.268661975860596
    5. '()(' → logprob: -8.018661499023438
    6. '():
' → logprob: -8.768661499023438
    7. ' ()' → logprob: -8.768661499023438
    8. ' ():' → logprob: -9.518661499023438
    9. '()+' → logprob: -10.143661499023438
    10. ' (' → logprob: -10.393661499023438

Token 93: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.008047337643802166
    2. '+' → logprob: -5.883047103881836
    3. ',' → logprob: -6.008047103881836
    4. ')' → logprob: -6.383047103881836
    5. ' ):' → logprob: -7.758047103881836
    6. '):
' → logprob: -8.008047103881836
    7. ' +' → logprob: -8.383047103881836
    8. ' ' → logprob: -10.883047103881836
    9. ')+' → logprob: -10.883047103881836
    10. ' ,' → logprob: -11.008047103881836

Token 94: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5829198360443115
    2. ' return' → logprob: -1.0829198360443115
    3. ' ans' → logprob: -2.3329198360443115
    4. 'return' → logprob: -5.707920074462891
    5. '1' → logprob: -6.332920074462891
    6. '(ans' → logprob: -7.832920074462891
    7. 'ans' → logprob: -8.45792007446289
    8. '    ' → logprob: -8.95792007446289
    9. '+' → logprob: -9.45792007446289
    10. ' +' → logprob: -9.58292007446289

Token 95: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.4722122848033905
    2. 'return' (adapté à ' return') → logprob: -1.472212314605713
    3. '   ' → logprob: -2.222212314605713
    4. ' ans' → logprob: -3.347212314605713
    5. 'ans' → logprob: -5.722212314605713
    6. '(ans' → logprob: -9.722211837768555
    7. '1' → logprob: -9.847211837768555
    8. 'def' → logprob: -11.597211837768555
    9. '    ' → logprob: -12.722211837768555
    10. '	ans' → logprob: -12.972211837768555

Token 96: ' ans' (ID: 3345)
  Prédit: ' ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ans' → logprob: -0.048660267144441605
    2. 'ans' → logprob: -3.0486602783203125
    3. '(ans' → logprob: -9.548660278320312
    4. '	ans' → logprob: -13.798660278320312
    5. '_ans' → logprob: -15.298660278320312
    6. '1' → logprob: -15.298660278320312
    7. '   ' → logprob: -17.048660278320312
    8. ' Ans' → logprob: -18.423660278320312
    9. ' ' → logprob: -18.548660278320312
    10. 'Ans' → logprob: -18.548660278320312

Token 97: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.2020399272441864
    2. ' +' → logprob: -1.7020399570465088
    3. '+
' → logprob: -8.07703971862793
    4. ' +
' → logprob: -8.45203971862793
    5. '<|end|>' → logprob: -9.57703971862793
    6. 'def' → logprob: -11.95203971862793
    7. '()+' → logprob: -12.32703971862793
    8. ' ' → logprob: -12.70203971862793
    9. '[' → logprob: -13.20203971862793
    10. '(' → logprob: -13.32703971862793

Token 98: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -8.876193169271573e-05
    2. ' ' → logprob: -9.375088691711426
    3. '   ' → logprob: -12.500088691711426
    4. '  ' → logprob: -17.875089645385742
    5. '```' → logprob: -18.250089645385742
    6. 'int' → logprob: -19.312589645385742
    7. '[' → logprob: -19.312589645385742
    8. '    ' → logprob: -19.437589645385742
    9. '...' → logprob: -19.500089645385742
    10. '.' → logprob: -20.000089645385742

Token 99: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.8889261304575484e-06
    2. ' ' → logprob: -12.500003814697266
    3. '   ' → logprob: -16.875003814697266
    4. '```' → logprob: -19.500003814697266
    5. '  ' → logprob: -19.687503814697266
    6. 'int' → logprob: -19.812503814697266
    7. '[' → logprob: -19.812503814697266
    8. '2' → logprob: -20.250003814697266
    9. 'def' → logprob: -20.625003814697266
    10. '0' → logprob: -21.312503814697266

Token 100: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.002902824431657791
    2. '```' → logprob: -6.252902984619141
    3. '

' → logprob: -8.00290298461914
    4. '\n' → logprob: -8.50290298461914
    5. '\' → logprob: -8.62790298461914
    6. '
' → logprob: -9.00290298461914
    7. '<|end|>' → logprob: -9.37790298461914
    8. '#' → logprob: -11.75290298461914
    9. 'n' → logprob: -12.25290298461914
    10. '<|end|>' → logprob: -12.37790298461914

Token 101: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.9027791495318525e-05
    2. 'n' → logprob: -11.375019073486328
    3. '```' → logprob: -12.500019073486328
    4. 'if' → logprob: -13.500019073486328
    5. 'for' → logprob: -14.375019073486328
    6. 'x' → logprob: -14.500019073486328
    7. '#' → logprob: -15.000019073486328
    8. '\' → logprob: -15.125019073486328
    9. ' def' → logprob: -15.500019073486328
    10. 'ndef' → logprob: -15.875019073486328

Token 102: ' decrement' (ID: 121877)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.4984717071056366
    2. ' main' → logprob: -0.998471736907959
    3. 'solve' → logprob: -4.373471736907959
    4. ' solve' → logprob: -5.498471736907959
    5. 'max' → logprob: -5.873471736907959
    6. 'count' → logprob: -6.248471736907959
    7. 'calculate' → logprob: -6.873471736907959
    8. ' count' → logprob: -7.748471736907959
    9. ' max' → logprob: -7.998471736907959
    10. 'process' → logprob: -8.4984712600708

Token 103: '_ans' (ID: 146254)
  Prédit: '_x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_x' → logprob: -0.18034511804580688
    2. '_ans' → logprob: -1.805345058441162
    3. '_answer' → logprob: -8.80534553527832
    4. '_' → logprob: -9.30534553527832
    5. '(x' → logprob: -9.93034553527832
    6. '(ans' → logprob: -10.05534553527832
    7. '_an' → logprob: -10.05534553527832
    8. 'x' → logprob: -10.55534553527832
    9. '_s' → logprob: -10.68034553527832
    10. '```' → logprob: -10.80534553527832

Token 104: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -0.0006121210753917694
    2. '(' → logprob: -7.500612258911133
    3. ' (' → logprob: -10.000612258911133
    4. '(answer' → logprob: -11.250612258911133
    5. '(def' → logprob: -14.750612258911133
    6. '```' → logprob: -15.625612258911133
    7. '   ' → logprob: -16.875612258911133
    8. '(abs' → logprob: -17.125612258911133
    9. '(an' → logprob: -17.500612258911133
    10. '(ord' → logprob: -17.625612258911133

Token 105: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0013016649754717946
    2. '):
' → logprob: -6.7513017654418945
    3. ')' → logprob: -9.001301765441895
    4. '   ' → logprob: -12.126301765441895
    5. '):
' → logprob: -13.626301765441895
    6. ' ):' → logprob: -14.501301765441895
    7. '):

' → logprob: -14.751301765441895
    8. ',' → logprob: -15.501301765441895
    9. ':' → logprob: -15.876301765441895
    10. '(ans' → logprob: -16.001300811767578

Token 106: '   ' (ID: 271)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.21808090806007385
    2. '   ' → logprob: -2.218080997467041
    3. 'return' → logprob: -2.468080997467041
    4. ' ans' → logprob: -6.093080997467041
    5. 'ans' → logprob: -9.218080520629883
    6. '(ans' → logprob: -11.468080520629883
    7. '    ' → logprob: -13.093080520629883
    8. 'def' → logprob: -13.218080520629883
    9. '	return' → logprob: -14.343080520629883
    10. ' def' → logprob: -14.468080520629883

Token 107: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.30388396978378296
    2. ' ans' → logprob: -2.1788840293884277
    3. 'return' (adapté à ' return') → logprob: -2.4288840293884277
    4. '   ' → logprob: -2.9288840293884277
    5. 'ans' → logprob: -4.928884029388428
    6. '    ' → logprob: -10.30388355255127
    7. '(ans' → logprob: -11.17888355255127
    8. '	ans' → logprob: -12.67888355255127
    9. 'def' → logprob: -13.05388355255127
    10. ' ' → logprob: -13.05388355255127

Token 108: ' ans' (ID: 3345)
  Prédit: ' ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ans' → logprob: -0.04863926023244858
    2. 'ans' → logprob: -3.0486392974853516
    3. '(ans' → logprob: -9.923639297485352
    4. '	ans' → logprob: -13.048639297485352
    5. '_ans' → logprob: -14.423639297485352
    6. ' ' → logprob: -17.92363929748535
    7. '   ' → logprob: -18.92363929748535
    8. '1' → logprob: -19.04863929748535
    9. '-' → logprob: -19.04863929748535
    10. 'Ans' → logprob: -19.17363929748535

Token 109: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.42928633093833923
    2. ' -' → logprob: -1.0542863607406616
    3. ' ' → logprob: -8.554286003112793
    4. 'def' → logprob: -9.054286003112793
    5. '   ' → logprob: -9.304286003112793
    6. ' -
' → logprob: -9.554286003112793
    7. '-
' → logprob: -10.429286003112793
    8. '```' → logprob: -10.804286003112793
    9. '  ' → logprob: -11.679286003112793
    10. '<|end|>' → logprob: -11.804286003112793

Token 110: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00317783304490149
    2. ' ' → logprob: -5.753177642822266
    3. '   ' → logprob: -16.253177642822266
    4. '<|end|>' → logprob: -17.378177642822266
    5. '```' → logprob: -18.253177642822266
    6. ' ' → logprob: -18.378177642822266
    7. '0' → logprob: -18.503177642822266
    8. 'def' → logprob: -19.378177642822266
    9. '2' → logprob: -19.753177642822266
    10. '  ' → logprob: -19.878177642822266

Token 111: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: 0.0
    2. ' ' → logprob: -17.625
    3. '<|end|>' → logprob: -19.375
    4. '```' → logprob: -20.5
    5. 'def' → logprob: -20.875
    6. '   ' → logprob: -22.875
    7. '0' → logprob: -23.125
    8. '۱' → logprob: -23.5
    9. '2' → logprob: -23.5
    10. '<|end|>' → logprob: -23.625

Token 112: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.17258818447589874
    2. '

' → logprob: -1.9225882291793823
    3. '
' → logprob: -4.547588348388672
    4. '\n' → logprob: -7.922588348388672
    5. '```' → logprob: -8.047588348388672
    6. '<|end|>' → logprob: -8.422588348388672
    7. '\' → logprob: -9.047588348388672
    8. '[' → logprob: -9.547588348388672
    9. '
' → logprob: -9.672588348388672
    10. 'n' → logprob: -9.672588348388672

Token 113: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -2.935296834039036e-06
    2. 'if' → logprob: -13.25000286102295
    3. 'n' → logprob: -14.37500286102295
    4. ' def' → logprob: -15.87500286102295
    5. 'ndef' → logprob: -16.125003814697266
    6. '```' → logprob: -16.250003814697266
    7. '    
' → logprob: -17.750003814697266
    8. 'x' → logprob: -17.750003814697266
    9. '
' → logprob: -18.000003814697266
    10. '(def' → logprob: -18.125003814697266

Token 114: ' should' (ID: 1757)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.04889460280537605
    2. ' solve' → logprob: -3.2988946437835693
    3. ' max' → logprob: -5.54889440536499
    4. 'main' → logprob: -6.29889440536499
    5. ' count' → logprob: -6.54889440536499
    6. ' process' → logprob: -6.79889440536499
    7. 'solve' → logprob: -7.67389440536499
    8. ' find' → logprob: -7.92389440536499
    9. ' calculate' → logprob: -8.048894882202148
    10. ' solution' → logprob: -8.298894882202148

Token 115: '_break' (ID: 98301)
  Prédit: '_continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_continue' → logprob: -0.047428328543901443
    2. '_increment' → logprob: -3.5474283695220947
    3. '_update' → logprob: -4.547428131103516
    4. '_stop' → logprob: -5.922428131103516
    5. '_include' → logprob: -6.547428131103516
    6. '_keep' → logprob: -7.047428131103516
    7. '_add' → logprob: -7.922428131103516
    8. '_take' → logprob: -8.172428131103516
    9. '_in' → logprob: -8.797428131103516
    10. '_de' → logprob: -9.047428131103516

Token 116: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.1806183159351349
    2. '(' → logprob: -2.3056182861328125
    3. ' (' → logprob: -3.0556182861328125
    4. '(ans' → logprob: -4.1806182861328125
    5. '(s' → logprob: -6.5556182861328125
    6. '(a' → logprob: -7.1806182861328125
    7. '(n' → logprob: -8.180618286132812
    8. '(condition' → logprob: -9.180618286132812
    9. '():' → logprob: -9.305618286132812
    10. '(answer' → logprob: -9.680618286132812

Token 117: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.06289554387331009
    2. '):' → logprob: -2.8128955364227295
    3. ',x' → logprob: -8.187895774841309
    4. ' ,' → logprob: -8.687895774841309
    5. '):
' → logprob: -8.812895774841309
    6. ')' → logprob: -8.812895774841309
    7. '   ' → logprob: -9.687895774841309
    8. ' ):' → logprob: -10.062895774841309
    9. '>=' → logprob: -10.937895774841309
    10. ',
' → logprob: -11.812895774841309

Token 118: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.032123178243637085
    2. ' x' → logprob: -4.03212308883667
    3. ' return' → logprob: -4.28212308883667
    4. 'x' → logprob: -10.407123565673828
    5. 'return' → logprob: -10.657123565673828
    6. '    ' → logprob: -11.782123565673828
    7. '	return' → logprob: -15.032123565673828
    8. ' ' → logprob: -15.157123565673828
    9. ' if' → logprob: -15.407123565673828
    10. '  ' → logprob: -15.532123565673828

Token 119: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.18181400001049042
    2. '   ' → logprob: -2.181813955307007
    3. ' return' → logprob: -2.931813955307007
    4. 'x' → logprob: -9.306814193725586
    5. ' x' → logprob: -11.181814193725586
    6. ' ' → logprob: -14.056814193725586
    7. '	return' → logprob: -14.556814193725586
    8. '  ' → logprob: -14.931814193725586
    9. '    ' → logprob: -16.306814193725586
    10. '
' → logprob: -16.806814193725586

Token 120: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.3868870735168457
    2. 'x' → logprob: -1.1368870735168457
    3. ' ' → logprob: -11.636886596679688
    4. '   ' → logprob: -12.386886596679688
    5. '(x' → logprob: -13.761886596679688
    6. '	x' → logprob: -14.136886596679688
    7. ' ' → logprob: -14.761886596679688
    8. 'True' → logprob: -15.011886596679688
    9. '  ' → logprob: -15.261886596679688
    10. '0' → logprob: -15.761886596679688

Token 121: ' <' (ID: 464)
  Prédit: ' <='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.694195568561554
    2. '<=' → logprob: -0.694195568561554
    3. '<' → logprob: -7.444195747375488
    4. ' <' → logprob: -7.694195747375488
    5. ' ' → logprob: -12.444195747375488
    6. '[' → logprob: -13.069195747375488
    7. '>' → logprob: -14.569195747375488
    8. '   ' → logprob: -15.194195747375488
    9. '==' → logprob: -15.694195747375488
    10. ')<=' → logprob: -16.444194793701172

Token 122: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.002535355743020773
    2. ' ' → logprob: -6.252535343170166
    3. '=' → logprob: -7.502535343170166
    4. '1' → logprob: -9.877535820007324
    5. '```' → logprob: -13.127535820007324
    6. '   ' → logprob: -15.002535820007324
    7. ' =' → logprob: -15.252535820007324
    8. ':' → logprob: -15.502535820007324
    9. '2' → logprob: -15.877535820007324
    10. '``' → logprob: -16.127534866333008

Token 123: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00010735770774772391
    2. '1' → logprob: -9.625107765197754
    3. ' ' → logprob: -10.250107765197754
    4. '=' → logprob: -12.125107765197754
    5. '```' → logprob: -15.750107765197754
    6. '2' → logprob: -16.375106811523438
    7. '10' → logprob: -16.625106811523438
    8. '100' → logprob: -17.312606811523438
    9. '   ' → logprob: -17.500106811523438
    10. ':' → logprob: -17.875106811523438

Token 124: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0005543439765460789
    2. '\n' → logprob: -8.625554084777832
    3. '

' → logprob: -9.125554084777832
    4. '
' → logprob: -9.625554084777832
    5. '\' → logprob: -9.875554084777832
    6. '```' → logprob: -10.125554084777832
    7. '#' → logprob: -10.500554084777832
    8. 'n' → logprob: -10.750554084777832
    9. '<|end|>' → logprob: -10.750554084777832
    10. 'ndef' → logprob: -11.875554084777832

Token 125: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -6.575563020305708e-05
    2. '
' → logprob: -10.250065803527832
    3. '

' → logprob: -11.125065803527832
    4. '```' → logprob: -12.125065803527832
    5. '\' → logprob: -13.000065803527832
    6. '\n' → logprob: -13.250065803527832
    7. ' def' → logprob: -13.500065803527832
    8. 'if' → logprob: -13.625065803527832
    9. 'ndef' → logprob: -14.000065803527832
    10. 'n' → logprob: -14.625065803527832

Token 126: ' check' (ID: 2371)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0002831464516930282
    2. ' def' → logprob: -8.375283241271973
    3. 'main' → logprob: -10.000283241271973
    4. '
' → logprob: -12.500283241271973
    5. ' main' → logprob: -14.375283241271973
    6. 'int' → logprob: -14.375283241271973
    7. '__' → logprob: -14.375283241271973
    8. '```' → logprob: -14.375283241271973
    9. 'if' → logprob: -15.625283241271973
    10. '0' → logprob: -15.875283241271973

Token 127: '_final' (ID: 46468)
  Prédit: '_x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_x' → logprob: -0.4900612533092499
    2. '_condition' → logprob: -2.2400612831115723
    3. '(x' → logprob: -2.3650612831115723
    4. '_break' → logprob: -3.1150612831115723
    5. '_sum' → logprob: -3.2400612831115723
    6. '_answer' → logprob: -4.490061283111572
    7. '_value' → logprob: -4.615061283111572
    8. '_conditions' → logprob: -4.990061283111572
    9. '_input' → logprob: -5.240061283111572
    10. '_and' → logprob: -5.240061283111572

Token 128: '(x' (ID: 4061)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.7118457555770874
    2. '_answer' → logprob: -1.4618457555770874
    3. '_value' → logprob: -2.336845874786377
    4. '_x' → logprob: -2.711845874786377
    5. '(x' → logprob: -2.961845874786377
    6. '_result' → logprob: -4.086845874786377
    7. '_condition' → logprob: -4.336845874786377
    8. '(' → logprob: -4.461845874786377
    9. 'ize' → logprob: -5.086845874786377
    10. '_(' → logprob: -5.586845874786377

Token 129: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.006771856918931007
    2. '):
' → logprob: -5.256772041320801
    3. ')' → logprob: -7.631772041320801
    4. ' ):' → logprob: -8.0067720413208
    5. ',' → logprob: -8.1317720413208
    6. '==' → logprob: -8.2567720413208
    7. ' ==' → logprob: -9.8817720413208
    8. '   ' → logprob: -9.8817720413208
    9. ')==' → logprob: -10.2567720413208
    10. '):

' → logprob: -12.1317720413208

Token 130: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5899223685264587
    2. ' return' → logprob: -0.8399223685264587
    3. 'return' → logprob: -4.3399224281311035
    4. ' x' → logprob: -7.2149224281311035
    5. 'x' → logprob: -9.964921951293945
    6. ' if' → logprob: -11.089921951293945
    7. 'def' → logprob: -11.214921951293945
    8. '    ' → logprob: -12.214921951293945
    9. ' ==' → logprob: -12.214921951293945
    10. ':return' → logprob: -12.339921951293945

Token 131: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.16111348569393158
    2. ' return' → logprob: -1.9111135005950928
    3. '   ' → logprob: -7.036113262176514
    4. 'if' → logprob: -12.036113739013672
    5. 'x' → logprob: -13.536113739013672
    6. ' ' → logprob: -14.036113739013672
    7. ' if' → logprob: -14.411113739013672
    8. ' x' → logprob: -14.911113739013672
    9. 'def' → logprob: -15.661113739013672
    10. '
' → logprob: -15.786113739013672

Token 132: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.4288259744644165
    2. ' x' → logprob: -1.0538259744644165
    3. '0' → logprob: -9.553826332092285
    4. ' ' → logprob: -11.053826332092285
    5. '(x' → logprob: -11.428826332092285
    6. 'False' → logprob: -11.428826332092285
    7. 'True' → logprob: -11.678826332092285
    8. ' True' → logprob: -12.803826332092285
    9. ' False' → logprob: -13.053826332092285
    10. '	x' → logprob: -14.428826332092285

Token 133: ' <=' (ID: 5017)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.27629029750823975
    2. ' ==' → logprob: -2.0262904167175293
    3. ' >=' → logprob: -3.0262904167175293
    4. '>' → logprob: -3.6512904167175293
    5. ' <=' → logprob: -3.9012904167175293
    6. ' <' → logprob: -5.151290416717529
    7. '==' → logprob: -5.526290416717529
    8. ' !=' → logprob: -5.651290416717529
    9. '>=' → logprob: -7.651290416717529
    10. 'def' → logprob: -7.901290416717529

Token 134: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0019286326132714748
    2. ' ' → logprob: -6.251928806304932
    3. '-' → logprob: -17.376928329467773
    4. '  ' → logprob: -17.751928329467773
    5. '   ' → logprob: -18.001928329467773
    6. '1' → logprob: -18.126928329467773
    7. '00' → logprob: -18.876928329467773
    8. '9' → logprob: -18.876928329467773
    9. '100' → logprob: -19.376928329467773
    10. '000' → logprob: -19.501928329467773

Token 135: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00014013137842994183
    2. ' ' → logprob: -8.875140190124512
    3. '-' → logprob: -16.250139236450195
    4. '1' → logprob: -16.875139236450195
    5. '00' → logprob: -17.250139236450195
    6. '  ' → logprob: -17.375139236450195
    7. '   ' → logprob: -17.375139236450195
    8. '000' → logprob: -17.625139236450195
    9. '10' → logprob: -18.000139236450195
    10. '9' → logprob: -18.000139236450195

Token 136: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0010987765854224563
    2. '
' → logprob: -7.8760986328125
    3. '<|end|>' → logprob: -8.0010986328125
    4. '

' → logprob: -8.6260986328125
    5. '\n' → logprob: -9.8760986328125
    6. '#' → logprob: -10.1260986328125
    7. 'n' → logprob: -10.2510986328125
    8. '```' → logprob: -10.6260986328125
    9. 'x' → logprob: -11.5010986328125
    10. ' def' → logprob: -11.7510986328125

Token 137: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0002882721892092377
    2. '
' → logprob: -8.875288009643555
    3. '<|end|>' → logprob: -10.000288009643555
    4. 'ndef' → logprob: -10.750288009643555
    5. '\' → logprob: -10.875288009643555
    6. '\n' → logprob: -11.000288009643555
    7. '```' → logprob: -11.750288009643555
    8. '#' → logprob: -11.750288009643555
    9. ' def' → logprob: -12.000288009643555
    10. '

' → logprob: -12.375288009643555

Token 138: ' compute' (ID: 23864)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.16410785913467407
    2. ' main' → logprob: -2.0391077995300293
    3. 'def' → logprob: -3.9141077995300293
    4. 'solve' → logprob: -7.289107799530029
    5. ' def' → logprob: -8.039108276367188
    6. ' solve' → logprob: -9.414108276367188
    7. 'process' → logprob: -9.539108276367188
    8. 'calculate' → logprob: -10.164108276367188
    9. 'count' → logprob: -11.539108276367188
    10. ' process' → logprob: -11.664108276367188

Token 139: '_ans' (ID: 146254)
  Prédit: '_ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_ans' → logprob: -0.6250038743019104
    2. '_answer' → logprob: -1.8750038146972656
    3. '_sum' → logprob: -2.7500038146972656
    4. '(' → logprob: -2.8750038146972656
    5. '_' → logprob: -2.8750038146972656
    6. '_max' → logprob: -3.0000038146972656
    7. '_result' → logprob: -3.6250038146972656
    8. '(ans' → logprob: -3.7500038146972656
    9. '_score' → logprob: -5.250003814697266
    10. '_final' → logprob: -5.500003814697266

Token 140: '(N' (ID: 10564)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.12711749970912933
    2. '(' → logprob: -2.502117395401001
    3. '():' → logprob: -4.25211763381958
    4. '(x' → logprob: -4.37711763381958
    5. '(a' → logprob: -5.00211763381958
    6. ' (' → logprob: -6.62711763381958
    7. '(l' → logprob: -7.25211763381958
    8. '(lst' → logprob: -7.50211763381958
    9. '(s' → logprob: -8.377117156982422
    10. '(nums' → logprob: -8.502117156982422

Token 141: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0007797269499860704
    2. ' ,' → logprob: -7.375779628753662
    3. ',x' → logprob: -9.50078010559082
    4. ',a' → logprob: -10.25078010559082
    5. ',
' → logprob: -11.12578010559082
    6. 'x' → logprob: -12.12578010559082
    7. ' x' → logprob: -12.37578010559082
    8. '_,' → logprob: -12.62578010559082
    9. ')' → logprob: -12.62578010559082
    10. ' ' → logprob: -13.00078010559082

Token 142: ' x' (ID: 1215)
  Prédit: 'X'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'X' → logprob: -0.2714954912662506
    2. 'x' → logprob: -2.0214955806732178
    3. ' X' → logprob: -2.6464955806732178
    4. ' x' → logprob: -4.271495342254639
    5. 'a' → logprob: -4.271495342254639
    6. 'A' → logprob: -5.396495342254639
    7. ' a' → logprob: -6.771495342254639
    8. ' A' → logprob: -7.771495342254639
    9. '   ' → logprob: -8.896495819091797
    10. 'K' → logprob: -10.271495819091797

Token 143: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -4.35837464465294e-05
    2. ' ,' → logprob: -10.750043869018555
    3. ',
' → logprob: -11.000043869018555
    4. ',a' → logprob: -13.375043869018555
    5. ',

' → logprob: -14.125043869018555
    6. '_,' → logprob: -14.125043869018555
    7. '):' → logprob: -14.375043869018555
    8. 's' → logprob: -14.625043869018555
    9. 'a' → logprob: -15.625043869018555
    10. '
' → logprob: -16.250043869018555

Token 144: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.23059464991092682
    2. ' a' → logprob: -1.6055946350097656
    3. 'A' → logprob: -5.605594635009766
    4. ' A' → logprob: -6.605594635009766
    5. '   ' → logprob: -9.855594635009766
    6. 'arr' → logprob: -10.855594635009766
    7. ' ' → logprob: -11.605594635009766
    8. 'lst' → logprob: -12.293094635009766
    9. ' lst' → logprob: -12.418094635009766
    10. 'l' → logprob: -12.418094635009766

Token 145: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.04642750322818756
    2. '_i' → logprob: -3.4214274883270264
    3. '):
' → logprob: -5.0464277267456055
    4. '_' → logprob: -5.9214277267456055
    5. '_list' → logprob: -6.2964277267456055
    6. 's' → logprob: -6.6714277267456055
    7. ',' → logprob: -9.171427726745605
    8. 'i' → logprob: -9.546427726745605
    9. '[i' → logprob: -9.671427726745605
    10. '):
' → logprob: -9.796427726745605

Token 146: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.014580762945115566
    2. ':
' → logprob: -4.639580726623535
    3. '   ' → logprob: -5.639580726623535
    4. '):' → logprob: -7.139580726623535
    5. ',' → logprob: -8.639580726623535
    6. '(ans' → logprob: -9.389580726623535
    7. '):
' → logprob: -9.889580726623535
    8. '():' → logprob: -9.889580726623535
    9. ':def' → logprob: -11.014580726623535
    10. 'def' → logprob: -11.014580726623535

Token 147: ' ans' (ID: 3345)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' (adapté à ' ans') → logprob: -0.45483171939849854
    2. '   ' → logprob: -1.7048317193984985
    3. ' ans' → logprob: -1.7048317193984985
    4. '
' → logprob: -6.704831600189209
    5. '	ans' → logprob: -8.079832077026367
    6. '```' → logprob: -8.954832077026367
    7. '(ans' → logprob: -9.829832077026367
    8. '_ans' → logprob: -9.954832077026367
    9. 'answer' → logprob: -10.329832077026367
    10. '    
' → logprob: -11.454832077026367

Token 148: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.014167269691824913
    2. '=' → logprob: -4.264167308807373
    3. ',' → logprob: -12.639166831970215
    4. '   ' → logprob: -15.139166831970215
    5. ' =
' → logprob: -15.764166831970215
    6. ' ' → logprob: -16.38916778564453
    7. ' ,' → logprob: -17.63916778564453
    8. ' =)' → logprob: -18.51416778564453
    9. '  ' → logprob: -19.01416778564453
    10. 'def' → logprob: -19.38916778564453

Token 149: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0028836876153945923
    2. ' ' → logprob: -5.8778839111328125
    3. 'len' → logprob: -9.752883911132812
    4. 'N' → logprob: -11.502883911132812
    5. ' N' → logprob: -12.377883911132812
    6. ' len' → logprob: -13.502883911132812
    7. '   ' → logprob: -14.002883911132812
    8. '1' → logprob: -14.315383911132812
    9. 'sum' → logprob: -14.315383911132812
    10. 'n' → logprob: -15.065383911132812

Token 150: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -8.840432565193623e-05
    2. ' ' → logprob: -9.500088691711426
    3. 'len' → logprob: -11.750088691711426
    4. 'N' → logprob: -12.375088691711426
    5. 'x' → logprob: -15.500088691711426
    6. '-' → logprob: -15.625088691711426
    7. '1' → logprob: -16.18758773803711
    8. '   ' → logprob: -16.25008773803711
    9. '(' → logprob: -16.31258773803711
    10. 'sum' → logprob: -16.31258773803711

Token 151: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.004281872883439064
    2. ' for' → logprob: -6.129281997680664
    3. ' 
' → logprob: -7.504281997680664
    4. '  
' → logprob: -7.879281997680664
    5. '    
' → logprob: -8.129281997680664
    6. '
' → logprob: -8.379281997680664
    7. '   ' → logprob: -8.504281997680664
    8. '\n' → logprob: -9.004281997680664
    9. '<|end|>' → logprob: -9.379281997680664
    10. '' → logprob: -9.379281997680664

Token 152: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.732243537902832
    2. '   ' → logprob: -1.232243537902832
    3. ' for' → logprob: -1.607243537902832
    4. '    
' → logprob: -4.107243537902832
    5. 'for' → logprob: -5.732243537902832
    6. '<|end|>' → logprob: -5.732243537902832
    7. '```' → logprob: -6.607243537902832
    8. '	for' → logprob: -6.857243537902832
    9. ' 
' → logprob: -8.357243537902832
    10. 'x' → logprob: -8.357243537902832

Token 153: ' sorted' (ID: 20099)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.015338470228016376
    2. ' for' → logprob: -4.26533842086792
    3. '   ' → logprob: -6.76533842086792
    4. 'i' → logprob: -11.640338897705078
    5. 'x' → logprob: -11.640338897705078
    6. '	for' → logprob: -13.390338897705078
    7. 'a' → logprob: -14.390338897705078
    8. ' i' → logprob: -14.640338897705078
    9. ' ' → logprob: -14.765338897705078
    10. '  ' → logprob: -15.515338897705078

Token 154: '_a' (ID: 10852)
  Prédit: '_a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_a' → logprob: -0.015140054747462273
    2. 'a' → logprob: -4.515140056610107
    3. '_list' → logprob: -5.640140056610107
    4. '(a' → logprob: -7.890140056610107
    5. '_l' → logprob: -9.26513957977295
    6. 'list' → logprob: -10.51513957977295
    7. 'A' → logprob: -11.01513957977295
    8. '=' → logprob: -12.39013957977295
    9. 'List' → logprob: -13.01513957977295
    10. '_lst' → logprob: -13.14013957977295

Token 155: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3485049307346344
    2. '=' → logprob: -1.223504900932312
    3. ',' → logprob: -10.973505020141602
    4. '(' → logprob: -11.098505020141602
    5. '   ' → logprob: -11.723505020141602
    6. ')' → logprob: -11.973505020141602
    7. '[' → logprob: -12.598505020141602
    8. '_' → logprob: -12.848505020141602
    9. ' ' → logprob: -13.348505020141602
    10. '[:]' → logprob: -13.473505020141602

Token 156: ' sort' (ID: 4506)
  Prédit: 'sort'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sort' → logprob: -0.062417224049568176
    2. ' sort' → logprob: -2.8124172687530518
    3. 'sorted' → logprob: -7.937417030334473
    4. ' sorted' → logprob: -9.312417030334473
    5. '	sort' → logprob: -14.312417030334473
    6. '(sort' → logprob: -14.437417030334473
    7. ' ' → logprob: -15.062417030334473
    8. '   ' → logprob: -15.312417030334473
    9. '.sort' → logprob: -16.68741798400879
    10. '
' → logprob: -16.93741798400879

Token 157: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -0.16942080855369568
    2. '(a' → logprob: -1.919420838356018
    3. '_a' → logprob: -4.7944207191467285
    4. 'list' → logprob: -7.7944207191467285
    5. 'a' → logprob: -8.044421195983887
    6. 'ist' → logprob: -9.794421195983887
    7. 'List' → logprob: -10.294421195983887
    8. '_l' → logprob: -10.669421195983887
    9. '(' → logprob: -11.669421195983887
    10. 'l' → logprob: -11.794421195983887

Token 158: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -2.7729658540920354e-05
    2. '(' → logprob: -10.500027656555176
    3. 'a' → logprob: -16.625028610229492
    4. ' (' → logprob: -18.375028610229492
    5. '(
' → logprob: -18.875028610229492
    6. '((' → logprob: -20.750028610229492
    7. '(A' → logprob: -20.750028610229492
    8. '(list' → logprob: -21.125028610229492
    9. '(s' → logprob: -21.250028610229492
    10. '```' → logprob: -21.500028610229492

Token 159: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4743558168411255
    2. ')
' → logprob: -0.9743558168411255
    3. ')
' → logprob: -8.474355697631836
    4. ')

' → logprob: -9.974355697631836
    5. '   ' → logprob: -10.974355697631836
    6. ' )
' → logprob: -13.224355697631836
    7. ' ' → logprob: -13.349355697631836
    8. ' )' → logprob: -13.974355697631836
    9. ')a' → logprob: -14.599355697631836
    10. '
' → logprob: -15.224355697631836

Token 160: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.24847112596035004
    2. '   ' → logprob: -1.8734711408615112
    3. ' for' → logprob: -2.8734710216522217
    4. '    
' → logprob: -4.748471260070801
    5. 'for' → logprob: -7.498471260070801
    6. ' 
' → logprob: -8.6234712600708
    7. '	for' → logprob: -9.1234712600708
    8. '  
' → logprob: -9.4984712600708
    9. '<|end|>' → logprob: -9.6234712600708
    10. '```' → logprob: -9.7484712600708

Token 161: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.20769235491752625
    2. ' for' → logprob: -1.7076923847198486
    3. '   ' → logprob: -5.0826921463012695
    4. '	for' → logprob: -10.58269214630127
    5. '
' → logprob: -10.95769214630127
    6. ' ' → logprob: -12.20769214630127
    7. '    
' → logprob: -12.58269214630127
    8. 'x' → logprob: -13.70769214630127
    9. ' 
' → logprob: -13.83269214630127
    10. '  ' → logprob: -14.08269214630127

Token 162: ' i' (ID: 575)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.8218828439712524
    2. 'a' → logprob: -1.5718828439712524
    3. 'i' → logprob: -1.5718828439712524
    4. ' i' → logprob: -1.9468828439712524
    5. ' ai' → logprob: -6.946882724761963
    6. '_i' → logprob: -7.821882724761963
    7. 'ai' → logprob: -7.946882724761963
    8. ' ' → logprob: -8.821883201599121
    9. '   ' → logprob: -9.071883201599121
    10. '_a' → logprob: -9.946883201599121

Token 163: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.01154971681535244
    2. 'in' → logprob: -4.511549949645996
    3. ' ' → logprob: -7.886549949645996
    4. ',' → logprob: -9.761549949645996
    5. '  ' → logprob: -11.011549949645996
    6. '_' → logprob: -11.261549949645996
    7. 'n' → logprob: -11.386549949645996
    8. ' ,' → logprob: -12.511549949645996
    9. ' i' → logprob: -12.511549949645996
    10. '   ' → logprob: -12.511549949645996

Token 164: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.20266981422901154
    2. 'range' → logprob: -1.7026698589324951
    3. ' sorted' → logprob: -7.452669620513916
    4. 'sorted' → logprob: -8.077670097351074
    5. '   ' → logprob: -8.952670097351074
    6. ' ' → logprob: -8.952670097351074
    7. '  ' → logprob: -10.077670097351074
    8. '	range' → logprob: -11.202670097351074
    9. ' xrange' → logprob: -11.452670097351074
    10. 'ange' → logprob: -11.577670097351074

Token 165: '(len' (ID: 14990)
  Prédit: '(N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.04397936910390854
    2. '(' → logprob: -3.7939794063568115
    3. '(len' → logprob: -3.9189794063568115
    4. ' (' → logprob: -7.418979167938232
    5. ' N' → logprob: -11.04397964477539
    6. '(n' → logprob: -11.16897964477539
    7. '   ' → logprob: -11.29397964477539
    8. '(
' → logprob: -11.79397964477539
    9. 'len' → logprob: -12.79397964477539
    10. 'N' → logprob: -13.41897964477539

Token 166: '(sorted' (ID: 92488)
  Prédit: '(sorted'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(sorted' → logprob: -0.00019209683523513377
    2. '(' → logprob: -9.000191688537598
    3. '(s' → logprob: -10.125191688537598
    4. '(a' → logprob: -10.500191688537598
    5. 'sorted' → logprob: -14.625191688537598
    6. ' (' → logprob: -15.250191688537598
    7. ' sorted' → logprob: -15.625191688537598
    8. '(
' → logprob: -16.750192642211914
    9. '(sort' → logprob: -17.625192642211914
    10. '(N' → logprob: -18.000192642211914

Token 167: '_a' (ID: 10852)
  Prédit: '_a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_a' → logprob: -8.180258191714529e-06
    2. '_sorted' → logprob: -12.500008583068848
    3. '(sorted' → logprob: -13.875008583068848
    4. '(a' → logprob: -13.875008583068848
    5. '(_' → logprob: -14.250008583068848
    6. 'a' → logprob: -14.375008583068848
    7. '(' → logprob: -15.000008583068848
    8. '_' → logprob: -15.125008583068848
    9. '_s' → logprob: -15.500008583068848
    10. ' _' → logprob: -15.750008583068848

Token 168: ')):
' (ID: 22530)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00136678502894938
    2. '):
' → logprob: -7.50136661529541
    3. ')):' → logprob: -7.75136661529541
    4. ' ):' → logprob: -8.00136661529541
    5. ')' → logprob: -10.12636661529541
    6. '))' → logprob: -12.87636661529541
    7. ':' → logprob: -13.50136661529541
    8. '   ' → logprob: -13.50136661529541
    9. ')):
' → logprob: -13.75136661529541
    10. '():' → logprob: -14.62636661529541

Token 169: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.009642988443374634
    2. ' x' → logprob: -5.509643077850342
    3. '
' → logprob: -6.384643077850342
    4. '        
' → logprob: -7.009643077850342
    5. '   ' → logprob: -7.384643077850342
    6. ' if' → logprob: -7.384643077850342
    7. ' 
' → logprob: -8.009642601013184
    8. '    ' → logprob: -8.259642601013184
    9. '    
' → logprob: -8.384642601013184
    10. '  
' → logprob: -8.634642601013184

Token 170: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' (adapté à ' x') → logprob: -0.5586450099945068
    2. ' x' → logprob: -0.9336450099945068
    3. ' if' → logprob: -3.683645009994507
    4. 'if' → logprob: -5.183645248413086
    5. '   ' → logprob: -6.183645248413086
    6. '       ' → logprob: -6.933645248413086
    7. 'a' → logprob: -8.058645248413086
    8. ' a' → logprob: -8.683645248413086
    9. ' new' → logprob: -8.808645248413086
    10. ' updated' → logprob: -9.183645248413086

Token 171: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1430157572031021
    2. '=' → logprob: -2.0180158615112305
    3. ' -=' → logprob: -8.01801586151123
    4. '-=' → logprob: -11.89301586151123
    5. '-' → logprob: -13.51801586151123
    6. ',' → logprob: -14.26801586151123
    7. ' ' → logprob: -14.64301586151123
    8. ' -' → logprob: -14.64301586151123
    9. '   ' → logprob: -15.01801586151123
    10. '    ' → logprob: -15.14301586151123

Token 172: ' update' (ID: 4027)
  Prédit: ' update'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' update' → logprob: -0.06197541579604149
    2. 'update' → logprob: -2.8119754791259766
    3. ' decrement' → logprob: -13.186975479125977
    4. '(update' → logprob: -13.936975479125977
    5. 'increment' → logprob: -13.936975479125977
    6. ' increment' → logprob: -14.186975479125977
    7. 'x' → logprob: -14.311975479125977
    8. '	update' → logprob: -14.436975479125977
    9. '.update' → logprob: -14.436975479125977
    10. '       ' → logprob: -14.436975479125977

Token 173: '_x' (ID: 7054)
  Prédit: '_x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_x' → logprob: -0.0005159787251614034
    2. '(x' → logprob: -8.250515937805176
    3. '_' → logprob: -8.375515937805176
    4. 'x' → logprob: -11.000515937805176
    5. '(' → logprob: -12.000515937805176
    6. '_(' → logprob: -14.250515937805176
    7. '(_' → logprob: -15.125515937805176
    8. '(
' → logprob: -15.750515937805176
    9. ' x' → logprob: -16.250516891479492
    10. ' _' → logprob: -16.375516891479492

Token 174: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.38692447543144226
    2. '(' → logprob: -1.1369245052337646
    3. '(
' → logprob: -9.886924743652344
    4. 'x' → logprob: -13.636924743652344
    5. '(

' → logprob: -14.261924743652344
    6. ' (' → logprob: -14.511924743652344
    7. '```' → logprob: -16.761924743652344
    8. '(
' → logprob: -17.011924743652344
    9. ')' → logprob: -17.136924743652344
    10. ' ' → logprob: -17.261924743652344

Token 175: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00027849749312736094
    2. ' ,' → logprob: -8.50027847290039
    3. 'sorted' → logprob: -9.87527847290039
    4. ' sorted' → logprob: -11.12527847290039
    5. '(sorted' → logprob: -12.50027847290039
    6. ',
' → logprob: -13.25027847290039
    7. '   ' → logprob: -13.37527847290039
    8. '_sorted' → logprob: -14.62527847290039
    9. 'a' → logprob: -15.37527847290039
    10. ')' → logprob: -15.50027847290039

Token 176: ' sorted' (ID: 20099)
  Prédit: ' sorted'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sorted' → logprob: -0.061980683356523514
    2. 'sorted' → logprob: -2.811980724334717
    3. ')' → logprob: -12.311980247497559
    4. '(sorted' → logprob: -12.436980247497559
    5. ' ' → logprob: -13.311980247497559
    6. ' ' → logprob: -13.436980247497559
    7. '_sorted' → logprob: -14.686980247497559
    8. '   ' → logprob: -15.436980247497559
    9. ' )' → logprob: -15.686980247497559
    10. '.sorted' → logprob: -15.936980247497559

Token 177: '_a' (ID: 10852)
  Prédit: '_a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_a' → logprob: -6.704273118884885e-07
    2. 'a' → logprob: -15.125000953674316
    3. ''_' → logprob: -16.375
    4. '_i' → logprob: -16.5
    5. '_' → logprob: -16.75
    6. '"_' → logprob: -18.0
    7. ')_' → logprob: -18.25
    8. '[_' → logprob: -18.625
    9. '(a' → logprob: -18.75
    10. '[a' → logprob: -18.875

Token 178: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.10489226877689362
    2. '[' → logprob: -2.3548922538757324
    3. '[a' → logprob: -6.229892253875732
    4. ' [' → logprob: -7.604892253875732
    5. '[_' → logprob: -7.729892253875732
    6. ')[' → logprob: -7.729892253875732
    7. '_[' → logprob: -8.22989273071289
    8. ')' → logprob: -8.22989273071289
    9. '[
' → logprob: -8.85489273071289
    10. '_' → logprob: -9.35489273071289

Token 179: '])
' (ID: 5169)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0013747569173574448
    2. ')
' → logprob: -6.6263747215271
    3. '))' → logprob: -10.251375198364258
    4. '       ' → logprob: -11.876375198364258
    5. ' )' → logprob: -12.626375198364258
    6. '   ' → logprob: -13.376375198364258
    7. ')

' → logprob: -14.126375198364258
    8. '])' → logprob: -15.126375198364258
    9. ')`' → logprob: -15.501375198364258
    10. '[i' → logprob: -16.626375198364258

Token 180: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.1975860297679901
    2. '
' → logprob: -1.8225860595703125
    3. '        
' → logprob: -4.4475860595703125
    4. '  
' → logprob: -5.8225860595703125
    5. '   ' → logprob: -7.0725860595703125
    6. '    
' → logprob: -8.322586059570312
    7. ' if' → logprob: -8.322586059570312
    8. ' 
' → logprob: -8.447586059570312
    9. '<|end|>' → logprob: -8.447586059570312
    10. '
' → logprob: -8.572586059570312

Token 181: ' ans' (ID: 3345)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.09222393482923508
    2. '       ' → logprob: -2.967223882675171
    3. 'ans' (adapté à ' ans') → logprob: -3.967223882675171
    4. ' if' → logprob: -4.46722412109375
    5. '   ' → logprob: -5.09222412109375
    6. ' ans' → logprob: -9.84222412109375
    7. 'answer' → logprob: -11.21722412109375
    8. '```' → logprob: -11.71722412109375
    9. ' ' → logprob: -11.96722412109375
    10. '	ans' → logprob: -12.46722412109375

Token 182: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.04858953505754471
    2. '=' → logprob: -3.0485894680023193
    3. ' +=' → logprob: -13.298589706420898
    4. '+=' → logprob: -15.298589706420898
    5. ' ' → logprob: -16.0485897064209
    6. ')' → logprob: -17.0485897064209
    7. '＝' → logprob: -17.4235897064209
    8. ',' → logprob: -19.0485897064209
    9. '    ' → logprob: -19.1735897064209
    10. ' =)' → logprob: -19.1735897064209

Token 183: ' increment' (ID: 24032)
  Prédit: 'increment'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'increment' → logprob: -0.006715370807796717
    2. ' increment' → logprob: -5.006715297698975
    3. '.increment' → logprob: -18.756715774536133
    4. '   ' → logprob: -19.631715774536133
    5. '_increment' → logprob: -20.006715774536133
    6. ' ' → logprob: -20.256715774536133
    7. 'Increment' → logprob: -20.381715774536133
    8. 'increments' → logprob: -20.381715774536133
    9. ' incrementar' → logprob: -20.756715774536133
    10. ' incremental' → logprob: -21.256715774536133

Token 184: '_ans' (ID: 146254)
  Prédit: '_ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_ans' → logprob: -1.1756367712223437e-05
    2. 'ans' → logprob: -11.875011444091797
    3. '(ans' → logprob: -12.750011444091797
    4. '_answer' → logprob: -13.875011444091797
    5. '	ans' → logprob: -15.625011444091797
    6. '_' → logprob: -15.625011444091797
    7. ' _' → logprob: -15.750011444091797
    8. '(_' → logprob: -16.250011444091797
    9. '```' → logprob: -17.000011444091797
    10. '_an' → logprob: -17.125011444091797

Token 185: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -5.288163083605468e-05
    2. '(' → logprob: -9.875052452087402
    3. ' (' → logprob: -14.375052452087402
    4. '(answer' → logprob: -14.625052452087402
    5. '(
' → logprob: -15.125052452087402
    6. 'ans' → logprob: -16.87505340576172
    7. '	ans' → logprob: -18.12505340576172
    8. '(an' → logprob: -19.00005340576172
    9. '```' → logprob: -19.00005340576172
    10. '(

' → logprob: -19.12505340576172

Token 186: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.005240514408797026
    2. ')
' → logprob: -5.255240440368652
    3. ' )' → logprob: -12.755240440368652
    4. '       ' → logprob: -13.630240440368652
    5. ')

' → logprob: -13.755240440368652
    6. '   ' → logprob: -14.130240440368652
    7. ')
' → logprob: -15.630240440368652
    8. ')\
' → logprob: -16.13024139404297
    9. ' )
' → logprob: -16.38024139404297
    10. '))' → logprob: -16.88024139404297

Token 187: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.005693776533007622
    2. '   ' → logprob: -5.7556939125061035
    3. '
' → logprob: -6.6306939125061035
    4. ' if' → logprob: -7.2556939125061035
    5. '        
' → logprob: -8.255693435668945
    6. '  
' → logprob: -9.505693435668945
    7. 'if' → logprob: -10.005693435668945
    8. '           ' → logprob: -10.505693435668945
    9. '    
' → logprob: -10.880693435668945
    10. '     ' → logprob: -11.505693435668945

Token 188: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.04974076896905899
    2. ' if' → logprob: -3.549740791320801
    3. '       ' → logprob: -4.049740791320801
    4. '   ' → logprob: -6.049740791320801
    5. ' ' → logprob: -12.4247407913208
    6. '	if' → logprob: -13.2997407913208
    7. '  ' → logprob: -15.4247407913208
    8. '
' → logprob: -15.5497407913208
    9. '        
' → logprob: -16.174739837646484
    10. '    ' → logprob: -16.299739837646484

Token 189: ' should' (ID: 1757)
  Prédit: ' should'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' should' → logprob: -0.00038074489566497505
    2. 'should' → logprob: -7.875380516052246
    3. ' (' → logprob: -15.000380516052246
    4. '_should' → logprob: -16.000381469726562
    5. '(' → logprob: -16.500381469726562
    6. ' ' → logprob: -17.000381469726562
    7. '   ' → logprob: -17.125381469726562
    8. ' space' → logprob: -18.000381469726562
    9. '    ' → logprob: -18.125381469726562
    10. '.should' → logprob: -18.375381469726562

Token 190: '_break' (ID: 98301)
  Prédit: '_break'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_break' → logprob: -1.1472419600977446e-06
    2. 'break' → logprob: -14.125000953674316
    3. '_b' → logprob: -15.375000953674316
    4. '_' → logprob: -15.875000953674316
    5. ' _' → logprob: -17.250001907348633
    6. '_BREAK' → logprob: -17.500001907348633
    7. ' break' → logprob: -18.250001907348633
    8. '_continue' → logprob: -18.250001907348633
    9. '_should' → logprob: -19.375001907348633
    10. '_br' → logprob: -19.625001907348633

Token 191: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.1270097941160202
    2. '(' → logprob: -2.127009868621826
    3. ' (' → logprob: -9.502009391784668
    4. '(
' → logprob: -12.127009391784668
    5. '(

' → logprob: -14.002009391784668
    6. '(i' → logprob: -15.377009391784668
    7. '(X' → logprob: -16.002010345458984
    8. '((' → logprob: -16.252010345458984
    9. '(s' → logprob: -16.502010345458984
    10. ' ' → logprob: -17.002010345458984

Token 192: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.007734985090792179
    2. '):
' → logprob: -4.882734775543213
    3. ' ):' → logprob: -9.632735252380371
    4. ':' → logprob: -10.507735252380371
    5. ')' → logprob: -10.757735252380371
    6. '   ' → logprob: -12.007735252380371
    7. '():' → logprob: -12.132735252380371
    8. '):

' → logprob: -14.382735252380371
    9. ' ' → logprob: -14.507735252380371
    10. ' ):
' → logprob: -14.507735252380371

Token 193: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.00018101456225849688
    2. 'break' → logprob: -9.125181198120117
    3. ' break' → logprob: -10.625181198120117
    4. '            
' → logprob: -11.250181198120117
    5. '               ' → logprob: -11.375181198120117
    6. '       ' → logprob: -11.625181198120117
    7. '
' → logprob: -11.875181198120117
    8. '          ' → logprob: -13.375181198120117
    9. '		' → logprob: -13.500181198120117
    10. '	       ' → logprob: -13.875181198120117

Token 194: ' ans' (ID: 3345)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'break' → logprob: -0.32126036286354065
    2. ' break' → logprob: -1.8212603330612183
    3. '       ' → logprob: -2.196260452270508
    4. '           ' → logprob: -6.946260452270508
    5. '   ' → logprob: -7.571260452270508
    6. '	break' → logprob: -9.071260452270508
    7. 'return' → logprob: -9.821260452270508
    8. '               ' → logprob: -10.571260452270508
    9. ' ' → logprob: -10.821260452270508
    10. '
' → logprob: -11.946260452270508

Token 195: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.038118261843919754
    2. '=' → logprob: -3.288118362426758
    3. ' ' → logprob: -10.163118362426758
    4. ' -=' → logprob: -11.413118362426758
    5. '    ' → logprob: -11.913118362426758
    6. '   ' → logprob: -12.288118362426758
    7. ':' → logprob: -12.538118362426758
    8. ' =
' → logprob: -12.913118362426758
    9. 'break' → logprob: -13.413118362426758
    10. 'eturn' → logprob: -13.913118362426758

Token 196: ' decrement' (ID: 121877)
  Prédit: 'de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'de' → logprob: -0.0040835049003362656
    2. ' decrement' → logprob: -5.504083633422852
    3. '   ' → logprob: -13.129083633422852
    4. '	de' → logprob: -13.379083633422852
    5. ' decre' → logprob: -14.629083633422852
    6. '           ' → logprob: -15.004083633422852
    7. ' de' → logprob: -15.504083633422852
    8. 'increment' → logprob: -16.62908363342285
    9. '  ' → logprob: -16.75408363342285
    10. ',de' → logprob: -17.12908363342285

Token 197: '_ans' (ID: 146254)
  Prédit: '_ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_ans' → logprob: -5.5027299822540954e-05
    2. 'ans' → logprob: -10.125055313110352
    3. '(ans' → logprob: -11.750055313110352
    4. '_answer' → logprob: -13.250055313110352
    5. '_' → logprob: -13.375055313110352
    6. ''_' → logprob: -13.875055313110352
    7. ' _' → logprob: -14.625055313110352
    8. '(_' → logprob: -14.625055313110352
    9. '```' → logprob: -14.875055313110352
    10. '"_' → logprob: -15.750055313110352

Token 198: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -2.1008713702030946e-06
    2. 'ans' → logprob: -13.250001907348633
    3. '(' → logprob: -15.875001907348633
    4. '(answer' → logprob: -16.250001907348633
    5. '(
' → logprob: -16.750001907348633
    6. '	ans' → logprob: -18.250001907348633
    7. ' ans' → logprob: -18.375001907348633
    8. '_ans' → logprob: -19.750001907348633
    9. ' (' → logprob: -20.125001907348633
    10. '(an' → logprob: -20.625001907348633

Token 199: ')
' (ID: 446)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.002559137996286154
    2. ')
' → logprob: -6.502559185028076
    3. ')' → logprob: -7.002559185028076
    4. '       ' → logprob: -9.252558708190918
    5. '
' → logprob: -10.752558708190918
    6. 'break' → logprob: -11.252558708190918
    7. '            
' → logprob: -12.377558708190918
    8. '               ' → logprob: -12.627558708190918
    9. ',' → logprob: -13.127558708190918
    10. '   ' → logprob: -13.877558708190918

Token 200: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0007980733062140644
    2. 'break' → logprob: -7.250798225402832
    3. '       ' → logprob: -10.125798225402832
    4. '            
' → logprob: -11.125798225402832
    5. '               ' → logprob: -11.500798225402832
    6. '		' → logprob: -11.750798225402832
    7. ' break' → logprob: -12.500798225402832
    8. '
' → logprob: -12.500798225402832
    9. 'return' → logprob: -12.750798225402832
    10. '   ' → logprob: -13.750798225402832

Token 201: ' break' (ID: 2338)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' (adapté à ' break') → logprob: -0.24047955870628357
    2. '           ' → logprob: -1.615479588508606
    3. ' break' → logprob: -4.240479469299316
    4. 'return' → logprob: -7.740479469299316
    5. '
' → logprob: -9.740479469299316
    6. '	break' → logprob: -10.490479469299316
    7. '       ' → logprob: -11.615479469299316
    8. '               ' → logprob: -12.240479469299316
    9. '_break' → logprob: -12.365479469299316
    10. '		' → logprob: -12.615479469299316

Token 202: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0008937132079154253
    2. '    
' → logprob: -8.000893592834473
    3. ' return' → logprob: -8.750893592834473
    4. '
' → logprob: -8.750893592834473
    5. 'return' → logprob: -9.250893592834473
    6. '       ' → logprob: -9.625893592834473
    7. '	return' → logprob: -10.375893592834473
    8. '  
' → logprob: -11.750893592834473
    9. '        
' → logprob: -12.125893592834473
    10. '<|end|>' → logprob: -12.125893592834473

Token 203: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0012541614705696702
    2. ' return' → logprob: -7.126254081726074
    3. 'return' → logprob: -8.126254081726074
    4. '       ' → logprob: -9.876254081726074
    5. '
' → logprob: -10.001254081726074
    6. '    
' → logprob: -10.126254081726074
    7. '	return' → logprob: -12.501254081726074
    8. '```' → logprob: -12.751254081726074
    9. ')' → logprob: -13.376254081726074
    10. ',' → logprob: -13.376254081726074

Token 204: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5515099763870239
    2. ' return' → logprob: -1.551509976387024
    3. 'return' (adapté à ' return') → logprob: -1.551509976387024
    4. ' ' → logprob: -10.426509857177734
    5. '	return' → logprob: -10.801509857177734
    6. '```' → logprob: -12.051509857177734
    7. '       ' → logprob: -13.301509857177734
    8. '    
' → logprob: -13.426509857177734
    9. '
' → logprob: -13.801509857177734
    10. '  ' → logprob: -13.801509857177734

Token 205: ' ans' (ID: 3345)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.014166681095957756
    2. ' ans' → logprob: -4.264166831970215
    3. '(ans' → logprob: -12.764166831970215
    4. '	ans' → logprob: -15.139166831970215
    5. '_ans' → logprob: -17.3891658782959
    6. '   ' → logprob: -18.2641658782959
    7. 'answer' → logprob: -19.0141658782959
    8. 'Ans' → logprob: -19.3891658782959
    9. ' ' → logprob: -19.6391658782959
    10. '  ' → logprob: -21.0141658782959

Token 206: ',' (ID: 11)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.30894625186920166
    2. '<|end|>' → logprob: -1.5589462518692017
    3. '
' → logprob: -3.058946132659912
    4. '(
' → logprob: -6.183946132659912
    5. '

' → logprob: -6.558946132659912
    6. '(' → logprob: -6.808946132659912
    7. '```' → logprob: -6.933946132659912
    8. '<|end|>' → logprob: -7.183946132659912
    9. '(n' → logprob: -7.808946132659912
    10. '()' → logprob: -8.05894660949707

Token 207: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.6334635615348816
    2. 'x' → logprob: -0.7584635615348816
    3. ' sorted' → logprob: -7.758463382720947
    4. 'sorted' → logprob: -8.258463859558105
    5. 'False' → logprob: -10.133463859558105
    6. 'None' → logprob: -10.508463859558105
    7. ' ' → logprob: -10.633463859558105
    8. ' None' → logprob: -11.133463859558105
    9. ' False' → logprob: -11.258463859558105
    10. '(x' → logprob: -11.258463859558105

Token 208: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.2820209860801697
    2. '
' → logprob: -1.7820210456848145
    3. '<|end|>' → logprob: -2.7820210456848145
    4. '

' → logprob: -4.5320210456848145
    5. '(
' → logprob: -6.6570210456848145
    6. '(' → logprob: -7.1570210456848145
    7. '```' → logprob: -7.4070210456848145
    8. '<|end|>' → logprob: -7.9070210456848145
    9. ' def' → logprob: -8.782020568847656
    10. '  
' → logprob: -8.782020568847656

Token 209: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -4.4894986785948277e-05
    2. 'if' → logprob: -10.375044822692871
    3. '```' → logprob: -11.750044822692871
    4. '#' → logprob: -12.875044822692871
    5. 'n' → logprob: -13.375044822692871
    6. 'print' → logprob: -14.375044822692871
    7. 'ndef' → logprob: -15.250044822692871
    8. 'for' → logprob: -15.500044822692871
    9. ' def' → logprob: -16.000045776367188
    10. '<|end|>' → logprob: -16.125045776367188

Token 210: ' print' (ID: 2123)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.010813875123858452
    2. 'main' → logprob: -4.6358137130737305
    3. 'def' → logprob: -7.3858137130737305
    4. ' def' → logprob: -7.7608137130737305
    5. '_main' → logprob: -11.63581371307373
    6. '
' → logprob: -14.01081371307373
    7. ' run' → logprob: -14.38581371307373
    8. ' ' → logprob: -14.88581371307373
    9. ' solve' → logprob: -15.13581371307373
    10. ' process' → logprob: -16.260814666748047

Token 211: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -0.5420972108840942
    2. '(' → logprob: -1.1670972108840942
    3. '_' → logprob: -3.4170970916748047
    4. '_ans' → logprob: -3.7920970916748047
    5. '_results' → logprob: -3.9170970916748047
    6. '_answer' → logprob: -4.417097091674805
    7. '_output' → logprob: -4.542097091674805
    8. '("_' → logprob: -5.792097091674805
    9. '_final' → logprob: -5.917097091674805
    10. '_(' → logprob: -7.042097091674805

Token 212: '(ans' (ID: 70054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.18164919316768646
    2. '():' → logprob: -2.1816492080688477
    3. '(result' → logprob: -3.0566492080688477
    4. '(ans' → logprob: -5.806649208068848
    5. '(def' → logprob: -7.556649208068848
    6. '()' → logprob: -7.556649208068848
    7. '(output' → logprob: -8.056649208068848
    8. '(results' → logprob: -8.431649208068848
    9. '(data' → logprob: -8.931649208068848
    10. '(_' → logprob: -8.931649208068848

Token 213: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.000273136975010857
    2. '):' → logprob: -8.250272750854492
    3. '):
' → logprob: -12.250272750854492
    4. ' ,' → logprob: -12.625272750854492
    5. ')' → logprob: -13.125272750854492
    6. ',
' → logprob: -13.625272750854492
    7. '   ' → logprob: -14.875272750854492
    8. '_,' → logprob: -16.750272750854492
    9. '):

' → logprob: -17.625272750854492
    10. ':' → logprob: -17.750272750854492

Token 214: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.5231439471244812
    2. ' x' → logprob: -0.8981439471244812
    3. ')' → logprob: -11.773143768310547
    4. ' ' → logprob: -12.148143768310547
    5. '   ' → logprob: -13.773143768310547
    6. ' remaining' → logprob: -13.898143768310547
    7. 'remaining' → logprob: -14.273143768310547
    8. '
' → logprob: -14.523143768310547
    9. 'result' → logprob: -14.773143768310547
    10. '    ' → logprob: -14.773143768310547

Token 215: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0007173155900090933
    2. '):
' → logprob: -7.2507171630859375
    3. ')' → logprob: -12.250717163085938
    4. '):
' → logprob: -14.000717163085938
    5. '():' → logprob: -14.250717163085938
    6. ' ):' → logprob: -14.250717163085938
    7. ':' → logprob: -15.125717163085938
    8. '   ' → logprob: -15.875717163085938
    9. '):

' → logprob: -17.500717163085938
    10. '）：' → logprob: -18.250717163085938

Token 216: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0005582740413956344
    2. ' print' → logprob: -7.500558376312256
    3. 'print' → logprob: -12.375557899475098
    4. '```' → logprob: -14.875557899475098
    5. '   ' → logprob: -14.875557899475098
    6. '    ' → logprob: -16.250558853149414
    7. '    
' → logprob: -17.125558853149414
    8. ' if' → logprob: -17.500558853149414
    9. '	print' → logprob: -17.500558853149414
    10. 'def' → logprob: -17.625558853149414

Token 217: ' if' (ID: 538)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.10071435570716858
    2. ' print' → logprob: -2.3507144451141357
    3. '   ' → logprob: -7.600714206695557
    4. 'if' (adapté à ' if') → logprob: -12.350714683532715
    5. ' if' → logprob: -12.725714683532715
    6. '```' → logprob: -16.2257137298584
    7. 'pr' → logprob: -18.3507137298584
    8. 'def' → logprob: -18.4757137298584
    9. '	print' → logprob: -18.9757137298584
    10. '.print' → logprob: -19.9757137298584

Token 218: ' check' (ID: 2371)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.8204331994056702
    2. 'x' → logprob: -1.3204331398010254
    3. ' check' → logprob: -1.6954331398010254
    4. 'check' → logprob: -2.5704331398010254
    5. ' ans' → logprob: -3.5704331398010254
    6. 'ans' → logprob: -5.445433139801025
    7. ' ' → logprob: -8.945433616638184
    8. '(ans' → logprob: -10.445433616638184
    9. '   ' → logprob: -10.570433616638184
    10. ' not' → logprob: -11.320433616638184

Token 219: '_final' (ID: 46468)
  Prédit: '_final'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_final' → logprob: -0.00019471932318992913
    2. '_' → logprob: -8.875194549560547
    3. 'final' → logprob: -9.875194549560547
    4. '_result' → logprob: -14.125194549560547
    5. ' _' → logprob: -14.375194549560547
    6. 'Final' → logprob: -14.500194549560547
    7. '_FINAL' → logprob: -14.875194549560547
    8. '_f' → logprob: -15.500194549560547
    9. '_Final' → logprob: -15.625194549560547
    10. '_finalize' → logprob: -15.875194549560547

Token 220: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.07079818844795227
    2. '(' → logprob: -2.69579815864563
    3. ' (' → logprob: -7.070798397064209
    4. '((' → logprob: -12.44579792022705
    5. ')' → logprob: -12.69579792022705
    6. '   ' → logprob: -13.82079792022705
    7. ' ' → logprob: -14.19579792022705
    8. '(
' → logprob: -14.44579792022705
    9. '(abs' → logprob: -14.94579792022705
    10. '(s' → logprob: -15.32079792022705

Token 221: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.027297237887978554
    2. '):
' → logprob: -3.652297258377075
    3. ' ):' → logprob: -7.402297019958496
    4. '==' → logprob: -8.277297019958496
    5. '<=' → logprob: -9.902297019958496
    6. ')' → logprob: -11.027297019958496
    7. ' ==' → logprob: -11.152297019958496
    8. ':' → logprob: -11.402297019958496
    9. ' ):
' → logprob: -11.527297019958496
    10. '):
' → logprob: -11.652297019958496

Token 222: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.01786871999502182
    2. '   ' → logprob: -4.142868518829346
    3. ':' → logprob: -6.642868518829346
    4. ' print' → logprob: -8.392868995666504
    5. ':
' → logprob: -8.517868995666504
    6. 'print' → logprob: -10.517868995666504
    7. '():
' → logprob: -11.267868995666504
    8. '):
' → logprob: -11.642868995666504
    9. ',' → logprob: -11.767868995666504
    10. '()' → logprob: -11.892868995666504

Token 223: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.015383908525109291
    2. ' print' → logprob: -4.765383720397949
    3. '   ' → logprob: -5.015383720397949
    4. '       ' → logprob: -9.26538372039795
    5. '```' → logprob: -11.51538372039795
    6. '
' → logprob: -13.01538372039795
    7. '	print' → logprob: -13.64038372039795
    8. ' ' → logprob: -14.64038372039795
    9. 'return' → logprob: -14.89038372039795
    10. '           ' → logprob: -15.01538372039795

Token 224: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -0.004660099744796753
    2. '("' → logprob: -6.004660129547119
    3. 'ans' → logprob: -6.254660129547119
    4. '(' → logprob: -8.629659652709961
    5. '('' → logprob: -9.879659652709961
    6. '(f' → logprob: -11.129659652709961
    7. '"' → logprob: -12.379659652709961
    8. '1' → logprob: -13.754659652709961
    9. '()' → logprob: -13.754659652709961
    10. ' (' → logprob: -13.879659652709961

Token 225: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1713530719280243
    2. ')
' → logprob: -1.9213531017303467
    3. ',' → logprob: -4.671352863311768
    4. '   ' → logprob: -6.421352863311768
    5. ' )' → logprob: -10.546353340148926
    6. '       ' → logprob: -11.546353340148926
    7. ' )
' → logprob: -11.921353340148926
    8. ',)' → logprob: -11.921353340148926
    9. ')

' → logprob: -12.546353340148926
    10. ' ' → logprob: -13.046353340148926

Token 226: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2837223708629608
    2. 'else' → logprob: -1.4087224006652832
    3. ' else' → logprob: -6.033722400665283
    4. 'def' → logprob: -9.158721923828125
    5. '<|end|>' → logprob: -11.033721923828125
    6. '	else' → logprob: -11.283721923828125
    7. '       ' → logprob: -11.283721923828125
    8. '```' → logprob: -12.158721923828125
    9. 'elif' → logprob: -12.408721923828125
    10. '(' → logprob: -12.783721923828125

Token 227: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.07926978915929794
    2. ' else' → logprob: -2.5792698860168457
    3. '   ' → logprob: -7.954269886016846
    4. 'elif' → logprob: -11.454269409179688
    5. ' ' → logprob: -12.079269409179688
    6. 'def' → logprob: -12.954269409179688
    7. '	else' → logprob: -13.329269409179688
    8. '    ' → logprob: -13.579269409179688
    9. ' elif' → logprob: -13.579269409179688
    10. '
' → logprob: -13.954269409179688

Token 228: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.012736949138343334
    2. ':
' → logprob: -4.387736797332764
    3. '       ' → logprob: -9.387737274169922
    4. ' :' → logprob: -9.512737274169922
    5. ' :
' → logprob: -10.637737274169922
    6. '   ' → logprob: -10.762737274169922
    7. '    ' → logprob: -11.012737274169922
    8. '(' → logprob: -12.262737274169922
    9. ',' → logprob: -14.137737274169922
    10. '():' → logprob: -14.512737274169922

Token 229: '       ' (ID: 309)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.16153936088085175
    2. '       ' → logprob: -2.661539316177368
    3. ' print' → logprob: -2.661539316177368
    4. '   ' → logprob: -4.661539554595947
    5. '    ' → logprob: -10.536539077758789
    6. '(print' → logprob: -13.161539077758789
    7. '     ' → logprob: -13.536539077758789
    8. '	print' → logprob: -13.911539077758789
    9. '(' → logprob: -14.286539077758789
    10. ' ' → logprob: -14.661539077758789

Token 230: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0028166472911834717
    2. ' print' → logprob: -5.877816677093506
    3. '   ' → logprob: -11.377816200256348
    4. 'pass' → logprob: -16.377817153930664
    5. '       ' → logprob: -17.002817153930664
    6. '	print' → logprob: -17.127817153930664
    7. '```' → logprob: -17.127817153930664
    8. '    ' → logprob: -17.502817153930664
    9. 'def' → logprob: -17.627817153930664
    10. 'pr' → logprob: -17.752817153930664

Token 231: '(de' (ID: 20586)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2869540750980377
    2. '(x' → logprob: -1.6619540452957153
    3. '("' → logprob: -3.161954164505005
    4. '(-' → logprob: -5.036953926086426
    5. '0' → logprob: -5.161953926086426
    6. '(ans' → logprob: -5.661953926086426
    7. '('' → logprob: -7.161953926086426
    8. '()' → logprob: -7.786953926086426
    9. 'ans' → logprob: -9.161953926086426
    10. '("?' → logprob: -9.411953926086426

Token 232: 'crement' (ID: 20288)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.010849024169147015
    2. 'fault' → logprob: -5.3858489990234375
    3. 'crement' → logprob: -5.8858489990234375
    4. 'x' → logprob: -7.1358489990234375
    5. 'fect' → logprob: -7.7608489990234375
    6. 'fic' → logprob: -8.010848999023438
    7. 'n' → logprob: -8.135848999023438
    8. 'fc' → logprob: -8.385848999023438
    9. 'fa' → logprob: -8.635848999023438
    10. 'c' → logprob: -8.885848999023438

Token 233: '_ans' (ID: 146254)
  Prédit: '_ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_ans' → logprob: -0.00021331508469302207
    2. '(ans' → logprob: -8.500213623046875
    3. 'ans' → logprob: -12.000213623046875
    4. 's' → logprob: -13.500213623046875
    5. '	ans' → logprob: -14.000213623046875
    6. '_answer' → logprob: -14.500213623046875
    7. 'Ans' → logprob: -15.250213623046875
    8. 'd' → logprob: -15.750213623046875
    9. 'a' → logprob: -15.875213623046875
    10. ')' → logprob: -16.000213623046875

Token 234: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -5.512236498361744e-07
    2. '(' → logprob: -15.250000953674316
    3. 'ans' → logprob: -15.625000953674316
    4. '(x' → logprob: -17.375
    5. '(answer' → logprob: -17.75
    6. '(
' → logprob: -18.625
    7. ' (' → logprob: -18.875
    8. '	ans' → logprob: -19.75
    9. '(abs' → logprob: -20.375
    10. '(err' → logprob: -20.75

Token 235: '))

' (ID: 9746)
  Prédit: '(ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(ans' → logprob: -0.00959009863436222
    2. '))' → logprob: -5.009590148925781
    3. ')' → logprob: -5.884590148925781
    4. '(' → logprob: -10.134590148925781
    5. '(x' → logprob: -10.884590148925781
    6. 'ans' → logprob: -11.134590148925781
    7. ',' → logprob: -12.259590148925781
    8. ')))' → logprob: -13.009590148925781
    9. '))
' → logprob: -13.134590148925781
    10. '),' → logprob: -13.634590148925781

Token 236: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.13969312608242035
    2. 'n' → logprob: -2.389693021774292
    3. 'if' → logprob: -3.264693021774292
    4. 'ndef' → logprob: -8.389693260192871
    5. 'N' → logprob: -9.139693260192871
    6. '#' → logprob: -9.639693260192871
    7. '
' → logprob: -10.264693260192871
    8. '```' → logprob: -10.389693260192871
    9. 'x' → logprob: -11.014693260192871
    10. ' if' → logprob: -12.139693260192871

Token 237: ' main' (ID: 2758)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.6640846133232117
    2. 'if' → logprob: -1.6640846729278564
    3. ' def' → logprob: -2.0390846729278564
    4. ' __' → logprob: -2.4140846729278564
    5. ' if' → logprob: -2.9140846729278564
    6. '__' → logprob: -3.9140846729278564
    7. ' main' → logprob: -6.789084434509277
    8. ' ' → logprob: -7.914084434509277
    9. '_' → logprob: -8.664084434509277
    10. 'main' → logprob: -8.664084434509277

Token 238: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -6.034592388459714e-06
    2. ' ():' → logprob: -12.875005722045898
    3. '():
' → logprob: -13.000005722045898
    4. '()' → logprob: -14.000005722045898
    5. '(' → logprob: -15.625005722045898
    6. '()>' → logprob: -17.2500057220459
    7. '():
' → logprob: -17.5000057220459
    8. ':' → logprob: -18.1250057220459
    9. '(:' → logprob: -19.2500057220459
    10. '():

' → logprob: -19.3750057220459

Token 239: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.019651930779218674
    2. 'n' → logprob: -4.519651889801025
    3. 'N' → logprob: -5.019651889801025
    4. ' n' → logprob: -6.769651889801025
    5. ' N' → logprob: -7.394651889801025
    6. '(n' → logprob: -8.769652366638184
    7. '(N' → logprob: -11.019652366638184
    8. ' ' → logprob: -12.019652366638184
    9. '	n' → logprob: -12.019652366638184
    10. ' (' → logprob: -12.519652366638184

Token 240: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' (adapté à ' N') → logprob: -0.050354551523923874
    2. 'n' → logprob: -3.050354480743408
    3. '   ' → logprob: -6.425354480743408
    4. ' N' → logprob: -8.925354957580566
    5. ' n' → logprob: -11.550354957580566
    6. ' ' → logprob: -13.175354957580566
    7. '  ' → logprob: -14.925354957580566
    8. '	n' → logprob: -15.550354957580566
    9. '	N' → logprob: -15.675354957580566
    10. '_n' → logprob: -16.05035400390625

Token 241: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0002571673830971122
    2. ',x' → logprob: -8.37525749206543
    3. ' ,' → logprob: -10.87525749206543
    4. 'x' → logprob: -12.12525749206543
    5. ',
' → logprob: -14.25025749206543
    6. ' x' → logprob: -15.12525749206543
    7. '   ' → logprob: -15.25025749206543
    8. '‌,' → logprob: -15.75025749206543
    9. ')' → logprob: -16.25025749206543
    10. ',n' → logprob: -16.50025749206543

Token 242: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.5760420560836792
    2. 'x' → logprob: -0.8260420560836792
    3. ' ' → logprob: -9.326042175292969
    4. '<|end|>' → logprob: -11.451042175292969
    5. ',x' → logprob: -13.451042175292969
    6. ')' → logprob: -15.326042175292969
    7. '*' → logprob: -15.701042175292969
    8. '	x' → logprob: -15.701042175292969
    9. '*x' → logprob: -15.826042175292969
    10. ',' → logprob: -15.951042175292969

Token 243: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.16150924563407898
    2. '=' → logprob: -1.9115092754364014
    3. ',' → logprob: -6.661509037017822
    4. '   ' → logprob: -12.78650951385498
    5. ' ' → logprob: -14.41150951385498
    6. ')' → logprob: -14.78650951385498
    7. ' ,' → logprob: -15.28650951385498
    8. ' =)' → logprob: -15.53650951385498
    9. ')=' → logprob: -16.161508560180664
    10. 'x' → logprob: -16.286508560180664

Token 244: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.16022443771362305
    2. 'get' → logprob: -1.910224437713623
    3. '(get' → logprob: -16.41022491455078
    4. '	get' → logprob: -16.41022491455078
    5. '=get' → logprob: -16.91022491455078
    6. '_get' → logprob: -17.66022491455078
    7. ')get' → logprob: -19.16022491455078
    8. ' ' → logprob: -19.53522491455078
    9. '   ' → logprob: -19.53522491455078
    10. '[get' → logprob: -19.53522491455078

Token 245: '_n' (ID: 2170)
  Prédit: '_n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: -2.339278580620885e-06
    2. 'n' → logprob: -13.875001907348633
    3. '(n' → logprob: -14.500001907348633
    4. '(_' → logprob: -15.125001907348633
    5. '_x' → logprob: -16.500001907348633
    6. ' ' → logprob: -16.500001907348633
    7. '```' → logprob: -16.500001907348633
    8. '_' → logprob: -16.625001907348633
    9. '('_' → logprob: -16.625001907348633
    10. '"_' → logprob: -16.875001907348633

Token 246: '_x' (ID: 7054)
  Prédit: '_x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_x' → logprob: -5.717296517104842e-05
    2. '_' → logprob: -10.125057220458984
    3. 'x' → logprob: -11.000057220458984
    4. '()' → logprob: -15.750057220458984
    5. ' _' → logprob: -16.875057220458984
    6. '(' → logprob: -17.625057220458984
    7. '('_' → logprob: -17.625057220458984
    8. ''_' → logprob: -17.875057220458984
    9. '(x' → logprob: -18.250057220458984
    10. '   ' → logprob: -18.375057220458984

Token 247: '()
' (ID: 1234)
  Prédit: '()
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()
' → logprob: -0.4782954454421997
    2. '()' → logprob: -0.9782954454421997
    3. '
' → logprob: -5.72829532623291
    4. '   ' → logprob: -7.22829532623291
    5. '()\' → logprob: -8.97829532623291
    6. 'a' → logprob: -10.85329532623291
    7. '()
' → logprob: -10.97829532623291
    8. '()[' → logprob: -11.60329532623291
    9. 'def' → logprob: -11.72829532623291
    10. ')' → logprob: -12.22829532623291

Token 248: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2782957851886749
    2. '
' → logprob: -1.9032957553863525
    3. 'a' → logprob: -2.4032957553863525
    4. '    
' → logprob: -6.278295993804932
    5. '	a' → logprob: -7.278295993804932
    6. '```' → logprob: -8.153295516967773
    7. '<|end|>' → logprob: -8.903295516967773
    8. 'def' → logprob: -9.528295516967773
    9. ' a' → logprob: -9.528295516967773
    10. '
' → logprob: -9.778295516967773

Token 249: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' (adapté à ' a') → logprob: -0.0007344625773839653
    2. '   ' → logprob: -7.250734329223633
    3. ' a' → logprob: -10.625734329223633
    4. '	a' → logprob: -15.750734329223633
    5. '  ' → logprob: -17.250734329223633
    6. ' ' → logprob: -17.625734329223633
    7. 'A' → logprob: -18.625734329223633
    8. '
' → logprob: -18.875734329223633
    9. '    
' → logprob: -18.875734329223633
    10. '```' → logprob: -19.250734329223633

Token 250: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.07889033854007721
    2. ' =' → logprob: -2.578890323638916
    3. '   ' → logprob: -15.578890800476074
    4. '_' → logprob: -15.578890800476074
    5. ' ' → logprob: -16.578889846801758
    6. 's' → logprob: -17.203889846801758
    7. ')' → logprob: -17.203889846801758
    8. ',' → logprob: -17.453889846801758
    9. 'a' → logprob: -17.953889846801758
    10. '=get' → logprob: -18.078889846801758

Token 251: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.0003360582049936056
    2. ' get' → logprob: -8.000335693359375
    3. '(get' → logprob: -14.250335693359375
    4. '=get' → logprob: -19.625335693359375
    5. '   ' → logprob: -19.750335693359375
    6. '_get' → logprob: -21.000335693359375
    7. '[get' → logprob: -21.375335693359375
    8. '	get' → logprob: -21.500335693359375
    9. '.get' → logprob: -21.625335693359375
    10. ' ' → logprob: -22.500335693359375

Token 252: '_a' (ID: 10852)
  Prédit: '_a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_a' → logprob: -0.00014001218369230628
    2. 'a' → logprob: -8.875140190124512
    3. '(a' → logprob: -16.750139236450195
    4. '_x' → logprob: -17.375139236450195
    5. ' a' → logprob: -18.250139236450195
    6. '(' → logprob: -18.625139236450195
    7. '```' → logprob: -18.750139236450195
    8. '(_' → logprob: -19.125139236450195
    9. ' _' → logprob: -19.375139236450195
    10. '_' → logprob: -19.625139236450195

Token 253: '()
' (ID: 1234)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.34933361411094666
    2. '
' → logprob: -1.224333643913269
    3. '    
' → logprob: -8.224333763122559
    4. '<|end|>' → logprob: -8.599333763122559
    5. 'ans' → logprob: -8.974333763122559
    6. '(ans' → logprob: -9.224333763122559
    7. '  
' → logprob: -10.099333763122559
    8. '	ans' → logprob: -10.349333763122559
    9. '```' → logprob: -10.474333763122559
    10. '  ' → logprob: -10.849333763122559

Token 254: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04253867641091347
    2. 'ans' → logprob: -3.917538642883301
    3. ' ans' → logprob: -4.167538642883301
    4. '(ans' → logprob: -5.917538642883301
    5. '
' → logprob: -6.292538642883301
    6. '	ans' → logprob: -6.542538642883301
    7. '    
' → logprob: -9.4175386428833
    8. '  ' → logprob: -9.9175386428833
    9. '_ans' → logprob: -10.2925386428833
    10. '<|end|>' → logprob: -10.4175386428833

Token 255: ' ans' (ID: 3345)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' (adapté à ' ans') → logprob: -0.009006763808429241
    2. ' ans' → logprob: -4.759006977081299
    3. '(ans' → logprob: -8.25900650024414
    4. '	ans' → logprob: -9.63400650024414
    5. '   ' → logprob: -9.75900650024414
    6. '_ans' → logprob: -11.88400650024414
    7. 'answer' → logprob: -13.88400650024414
    8. 'anst' → logprob: -14.00900650024414
    9. '```' → logprob: -14.88400650024414
    10. 'result' → logprob: -15.13400650024414

Token 256: ',' (ID: 11)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6003082394599915
    2. ' =' → logprob: -0.9753082394599915
    3. ',' → logprob: -2.6003081798553467
    4. ' ,' → logprob: -11.100308418273926
    5. '(' → logprob: -12.350308418273926
    6. '   ' → logprob: -12.350308418273926
    7. ')' → logprob: -12.725308418273926
    8. ' ' → logprob: -13.975308418273926
    9. '  ' → logprob: -14.975308418273926
    10. '＝' → logprob: -15.162808418273926

Token 257: ' new' (ID: 620)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.47407910227775574
    2. ' x' → logprob: -0.9740791320800781
    3. ' ' → logprob: -13.974079132080078
    4. '<|end|>' → logprob: -13.974079132080078
    5. '	x' → logprob: -15.724079132080078
    6. '    ' → logprob: -16.724079132080078
    7. '   ' → logprob: -16.974079132080078
    8. '  ' → logprob: -17.474079132080078
    9. ' updated' → logprob: -18.099079132080078
    10. 'updated' → logprob: -18.474079132080078

Token 258: '_x' (ID: 7054)
  Prédit: '_x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_x' → logprob: -0.0010325727052986622
    2. 'x' → logprob: -7.37603235244751
    3. '_' → logprob: -8.251032829284668
    4. ' _' → logprob: -8.876032829284668
    5. ' x' → logprob: -12.501032829284668
    6. '   ' → logprob: -13.876032829284668
    7. '_a' → logprob: -15.501032829284668
    8. ' =' → logprob: -16.00103187561035
    9. '=' → logprob: -16.37603187561035
    10. ' ' → logprob: -16.75103187561035

Token 259: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2519293427467346
    2. '=' → logprob: -1.5019292831420898
    3. ' ' → logprob: -16.251930236816406
    4. '   ' → logprob: -16.751930236816406
    5. 'x' → logprob: -17.501930236816406
    6. ' ' → logprob: -17.876930236816406
    7. ',' → logprob: -18.001930236816406
    8. ')' → logprob: -18.376930236816406
    9. '	' → logprob: -18.626930236816406
    10. '```' → logprob: -18.876930236816406

Token 260: ' compute' (ID: 23864)
  Prédit: 'compute'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'compute' → logprob: -0.03804149478673935
    2. ' compute' → logprob: -3.288041591644287
    3. '   ' → logprob: -17.913042068481445
    4. '_compute' → logprob: -19.038042068481445
    5. 'computer' → logprob: -19.538042068481445
    6. '.compute' → logprob: -19.913042068481445
    7. ' ' → logprob: -20.913042068481445
    8. 'comput' → logprob: -21.163042068481445
    9. 'computed' → logprob: -22.163042068481445
    10. 'calculate' → logprob: -23.038042068481445

Token 261: '_ans' (ID: 146254)
  Prédit: '_ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_ans' → logprob: -2.0339031834737398e-05
    2. '(_' → logprob: -12.125020027160645
    3. '_answer' → logprob: -12.375020027160645
    4. '(N' → logprob: -13.125020027160645
    5. '(ans' → logprob: -13.250020027160645
    6. ' _' → logprob: -13.250020027160645
    7. 'ans' → logprob: -13.750020027160645
    8. '_' → logprob: -14.125020027160645
    9. 'Ans' → logprob: -14.375020027160645
    10. '```' → logprob: -14.750020027160645

Token 262: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -1.3306015716807451e-05
    2. '(' → logprob: -11.25001335144043
    3. 'N' → logprob: -15.62501335144043
    4. ' (' → logprob: -17.25001335144043
    5. '((' → logprob: -18.25001335144043
    6. '(n' → logprob: -18.37501335144043
    7. '```' → logprob: -19.12501335144043
    8. '(
' → logprob: -19.87501335144043
    9. '(int' → logprob: -20.25001335144043
    10. '(len' → logprob: -20.25001335144043

Token 263: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00018422940047457814
    2. ',x' → logprob: -8.625184059143066
    3. ' ,' → logprob: -13.000184059143066
    4. '(' → logprob: -13.625184059143066
    5. '(x' → logprob: -14.500184059143066
    6. ',
' → logprob: -15.000184059143066
    7. 'x' → logprob: -15.500184059143066
    8. '   ' → logprob: -16.375185012817383
    9. ')' → logprob: -17.875185012817383
    10. '‌,' → logprob: -17.875185012817383

Token 264: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.0380416102707386
    2. ' x' → logprob: -3.288041591644287
    3. '   ' → logprob: -16.163042068481445
    4. '	x' → logprob: -17.663042068481445
    5. '
' → logprob: -18.663042068481445
    6. ' ' → logprob: -18.913042068481445
    7. ')x' → logprob: -19.038042068481445
    8. '(x' → logprob: -20.163042068481445
    9. ',x' → logprob: -20.538042068481445
    10. ')' → logprob: -20.663042068481445

Token 265: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -6.134509021649137e-05
    2. ',a' → logprob: -10.00006103515625
    3. ' ,' → logprob: -11.62506103515625
    4. 'a' → logprob: -12.37506103515625
    5. ',
' → logprob: -13.12506103515625
    6. ')' → logprob: -14.87506103515625
    7. '   ' → logprob: -15.25006103515625
    8. '```' → logprob: -16.50006103515625
    9. ' a' → logprob: -16.62506103515625
    10. '[' → logprob: -17.12506103515625

Token 266: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.006715728435665369
    2. ' a' → logprob: -5.006715774536133
    3. '   ' → logprob: -15.131715774536133
    4. ')' → logprob: -17.006715774536133
    5. ')a' → logprob: -17.131715774536133
    6. '	a' → logprob: -17.506715774536133
    7. ' ' → logprob: -17.756715774536133
    8. '[a' → logprob: -18.256715774536133
    9. ',a' → logprob: -19.006715774536133
    10. '    ' → logprob: -19.006715774536133

Token 267: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.8087270038668066e-05
    2. ')
' → logprob: -10.500027656555176
    3. ' )' → logprob: -15.000027656555176
    4. '   ' → logprob: -16.500028610229492
    5. ')

' → logprob: -17.375028610229492
    6. ')
' → logprob: -18.250028610229492
    7. '<|end|>' → logprob: -18.375028610229492
    8. '))' → logprob: -18.625028610229492
    9. ')new' → logprob: -19.000028610229492
    10. '()' → logprob: -19.125028610229492

Token 268: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.001021970878355205
    2. 'print' → logprob: -7.001021862030029
    3. ' print' → logprob: -9.376022338867188
    4. '
' → logprob: -10.751022338867188
    5. '    
' → logprob: -13.126022338867188
    6. '```' → logprob: -13.376022338867188
    7. '	print' → logprob: -15.251022338867188
    8. '(print' → logprob: -15.251022338867188
    9. '<|end|>' → logprob: -16.626022338867188
    10. '   ' → logprob: -16.751022338867188

Token 269: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.24621930718421936
    2. '   ' → logprob: -1.996219277381897
    3. ' print' → logprob: -2.4962193965911865
    4. '	print' → logprob: -13.621219635009766
    5. '```' → logprob: -13.996219635009766
    6. '(print' → logprob: -14.246219635009766
    7. '#print' → logprob: -14.496219635009766
    8. '  ' → logprob: -14.496219635009766
    9. ' ' → logprob: -14.746219635009766
    10. '.print' → logprob: -14.746219635009766

Token 270: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -2.3915141355246305e-05
    2. '_' → logprob: -11.00002384185791
    3. '_results' → logprob: -12.25002384185791
    4. '(' → logprob: -13.75002384185791
    5. ' _' → logprob: -15.12502384185791
    6. '```' → logprob: -15.12502384185791
    7. '(_' → logprob: -15.87502384185791
    8. '_res' → logprob: -16.125024795532227
    9. '_final' → logprob: -16.250024795532227
    10. '_Result' → logprob: -16.500024795532227

Token 271: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -0.0016253103967756033
    2. '(new' → logprob: -6.5016255378723145
    3. '(' → logprob: -9.126625061035156
    4. ' (' → logprob: -11.251625061035156
    5. '(answer' → logprob: -14.251625061035156
    6. '(an' → logprob: -15.626625061035156
    7. 'ans' → logprob: -15.876625061035156
    8. 'new' → logprob: -16.376625061035156
    9. '(
' → logprob: -16.876625061035156
    10. '```' → logprob: -17.251625061035156

Token 272: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -4.584861744660884e-05
    2. ',new' → logprob: -10.000045776367188
    3. ' ,' → logprob: -15.625045776367188
    4. 'new' → logprob: -15.750045776367188
    5. ',
' → logprob: -16.875045776367188
    6. '   ' → logprob: -17.250045776367188
    7. ')' → logprob: -18.250045776367188
    8. ' new' → logprob: -19.125045776367188
    9. '',' → logprob: -20.500045776367188
    10. ',

' → logprob: -20.625045776367188

Token 273: ' new' (ID: 620)
  Prédit: 'new'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'new' → logprob: -0.018150413408875465
    2. ' new' → logprob: -4.018150329589844
    3. 'x' → logprob: -14.518150329589844
    4. ' x' → logprob: -17.643150329589844
    5. ')new' → logprob: -18.143150329589844
    6. '   ' → logprob: -18.768150329589844
    7. '	new' → logprob: -18.768150329589844
    8. 'New' → logprob: -19.643150329589844
    9. '(new' → logprob: -19.893150329589844
    10. ' ' → logprob: -20.143150329589844

Token 274: '_x' (ID: 7054)
  Prédit: '_x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_x' → logprob: -0.0002489423204679042
    2. '_' → logprob: -8.625248908996582
    3. 'x' → logprob: -9.625248908996582
    4. '_w' → logprob: -13.500248908996582
    5. '_)' → logprob: -14.375248908996582
    6. 'w' → logprob: -15.000248908996582
    7. ' _' → logprob: -15.125248908996582
    8. 'new' → logprob: -15.375248908996582
    9. '_
' → logprob: -16.2502498626709
    10. 'ew' → logprob: -16.5002498626709

Token 275: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.3458322731312364e-06
    2. ')
' → logprob: -11.875007629394531
    3. ' )' → logprob: -15.750007629394531
    4. '())' → logprob: -16.50000762939453
    5. '()' → logprob: -16.87500762939453
    6. '))' → logprob: -17.37500762939453
    7. ')

' → logprob: -17.87500762939453
    8. ')`' → logprob: -18.25000762939453
    9. '   ' → logprob: -18.50000762939453
    10. ')#' → logprob: -19.00000762939453

Token 276: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0022192494943737984
    2. 'main' → logprob: -6.127219200134277
    3. '```' → logprob: -11.502219200134277
    4. '
' → logprob: -11.752219200134277
    5. ' if' → logprob: -11.752219200134277
    6. '\n' → logprob: -12.752219200134277
    7. '\' → logprob: -13.377219200134277
    8. '#' → logprob: -13.377219200134277
    9. '(main' → logprob: -14.002219200134277
    10. '<|end|>' → logprob: -14.627219200134277

Token 277: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.004907346796244383
    2. '(' → logprob: -6.004907131195068
    3. '()
' → logprob: -7.004907131195068
    4. '<|end|>' → logprob: -7.129907131195068
    5. '
' → logprob: -8.004907608032227
    6. '\n' → logprob: -9.254907608032227
    7. '```' → logprob: -9.254907608032227
    8. '#' → logprob: -9.754907608032227
    9. '(
' → logprob: -10.004907608032227
    10. '()\' → logprob: -10.504907608032227


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 275
Tokens correctement prédits (1ère position, stricte): 125
Tokens correctement prédits (1ère position, avec adaptation): 140
Tokens correctement prédits (top 10): 238
Précision stricte (1ère position): 45.45%
Précision adaptée (1ère position): 50.91%
Précision (top 10): 86.55%
================================================================================
