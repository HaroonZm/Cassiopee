================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:44:36
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n, k, q = map(int, input().split())
l = [0] * n
i = 0
while i < q:
    a = int(input())
    l[a - 1] += 1
    i += 1
i = 0
while i < n:
    if l[i] > q - k:
        print("Yes")
    else:
        print("No")
    i += 1
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' k' (ID: 372)
  → Token d'amorce (pas de prédiction)

Token 3: ',' (ID: 11)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.025784850120544434
    2. ' =' → logprob: -3.775784969329834
    3. ',' → logprob: -6.025784969329834
    4. ' ' → logprob: -10.775784492492676
    5. '=
' → logprob: -10.775784492492676
    6. ')' → logprob: -11.150784492492676
    7. ''' → logprob: -11.525784492492676
    8. '=

' → logprob: -11.900784492492676
    9. '```' → logprob: -11.900784492492676
    10. ';' → logprob: -12.025784492492676

Token 4: ' q' (ID: 2335)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3142908215522766
    2. ' =' → logprob: -1.3142907619476318
    3. ',' → logprob: -6.939291000366211
    4. ')' → logprob: -10.439291000366211
    5. ' ' → logprob: -11.314291000366211
    6. '.' → logprob: -12.064291000366211
    7. ';' → logprob: -13.064291000366211
    8. '=input' → logprob: -13.189291000366211
    9. ' ,' → logprob: -14.064291000366211
    10. 'for' → logprob: -14.439291000366211

Token 5: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.015843022614717484
    2. ' =' → logprob: -4.265842914581299
    3. ',' → logprob: -6.515842914581299
    4. '.' → logprob: -9.765843391418457
    5. ';' → logprob: -10.140843391418457
    6. '```' → logprob: -10.640843391418457
    7. ')' → logprob: -10.765843391418457
    8. ' ' → logprob: -10.765843391418457
    9. '[' → logprob: -11.140843391418457
    10. '_' → logprob: -12.515843391418457

Token 6: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.3019670844078064
    2. 'map' → logprob: -1.4269671440124512
    3. ' input' → logprob: -4.551967144012451
    4. 'input' → logprob: -4.676967144012451
    5. ' list' → logprob: -7.926967144012451
    6. 'list' → logprob: -8.551966667175293
    7. ' n' → logprob: -9.426966667175293
    8. ' ' → logprob: -10.176966667175293
    9. '0' → logprob: -10.301966667175293
    10. 'n' → logprob: -11.926966667175293

Token 7: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.05421312153339386
    2. '<|end|>' → logprob: -3.554213047027588
    3. '```' → logprob: -4.429213047027588
    4. '(lambda' → logprob: -5.054213047027588
    5. '(int' → logprob: -6.554213047027588
    6. '<|end|>' → logprob: -7.429213047027588
    7. ')' → logprob: -7.429213047027588
    8. '(token' → logprob: -7.679213047027588
    9. '(str' → logprob: -8.054213523864746
    10. '(user' → logprob: -8.304213523864746

Token 8: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.259747713804245
    2. ')' → logprob: -2.0097477436065674
    3. 'input' → logprob: -3.1347477436065674
    4. '(' → logprob: -3.1347477436065674
    5. '(int' → logprob: -6.259747505187988
    6. ' input' → logprob: -6.884747505187988
    7. '```' → logprob: -7.009747505187988
    8. '(str' → logprob: -7.134747505187988
    9. '(ord' → logprob: -7.509747505187988
    10. ',input' → logprob: -7.884747505187988

Token 9: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.002492183819413185
    2. ' input' → logprob: -6.0024919509887695
    3. '(input' → logprob: -11.12749195098877
    4. ')' → logprob: -13.25249195098877
    5. ',input' → logprob: -16.877492904663086
    6. '=input' → logprob: -17.752492904663086
    7. '```' → logprob: -18.127492904663086
    8. '<input' → logprob: -18.127492904663086
    9. '[input' → logprob: -19.127492904663086
    10. '	input' → logprob: -20.252492904663086

Token 10: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.628741443157196
    2. ')' → logprob: -1.2537415027618408
    3. '())' → logprob: -2.003741502761841
    4. '('' → logprob: -3.628741502761841
    5. '().' → logprob: -4.503741264343262
    6. '(' → logprob: -5.253741264343262
    7. '("")' → logprob: -7.503741264343262
    8. '`()' → logprob: -7.753741264343262
    9. '`)' → logprob: -8.003741264343262
    10. '();)' → logprob: -8.378741264343262

Token 11: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -8.006006828509271e-05
    2. 'strip' → logprob: -9.625080108642578
    3. 'rstrip' → logprob: -11.625080108642578
    4. ' split' → logprob: -12.875080108642578
    5. '(split' → logprob: -13.250080108642578
    6. 'spl' → logprob: -15.000080108642578
    7. ')' → logprob: -15.375080108642578
    8. 'read' → logprob: -16.375080108642578
    9. '```' → logprob: -17.375080108642578
    10. 'startswith' → logprob: -18.250080108642578

Token 12: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.041935864835977554
    2. '())' → logprob: -3.666935920715332
    3. '))' → logprob: -4.541935920715332
    4. '('' → logprob: -5.791935920715332
    5. '()' → logprob: -7.041935920715332
    6. '(' → logprob: -8.041935920715332
    7. '`)' → logprob: -8.416935920715332
    8. '()))' → logprob: -8.541935920715332
    9. '')' → logprob: -9.916935920715332
    10. '```' → logprob: -10.291935920715332

Token 13: 'l' (ID: 75)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.20938222110271454
    2. '\n' → logprob: -2.5843822956085205
    3. 'arr' → logprob: -2.8343822956085205
    4. 's' → logprob: -3.9593822956085205
    5. 'array' → logprob: -4.584382057189941
    6. 'data' → logprob: -5.209382057189941
    7. 'for' → logprob: -5.584382057189941
    8. '
' → logprob: -5.834382057189941
    9. '```' → logprob: -6.209382057189941
    10. 'd' → logprob: -6.709382057189941

Token 14: ' =' (ID: 314)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.5946013331413269
    2. ' =' → logprob: -2.0946013927459717
    3. 'ist' → logprob: -2.7196013927459717
    4. 's' → logprob: -2.7196013927459717
    5. 'e' → logprob: -2.8446013927459717
    6. '=' → logprob: -3.2196013927459717
    7. 'o' → logprob: -4.219601154327393
    8. 'is' → logprob: -4.344601154327393
    9. '[i' → logprob: -4.594601154327393
    10. 'ine' → logprob: -4.594601154327393

Token 15: ' [' (ID: 723)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.131656527519226
    2. '[]' → logprob: -1.256656527519226
    3. 'list' → logprob: -1.256656527519226
    4. '[int' → logprob: -2.3816566467285156
    5. ' []' → logprob: -5.881656646728516
    6. '[list' → logprob: -5.881656646728516
    7. ' [' → logprob: -6.131656646728516
    8. ' list' → logprob: -6.256656646728516
    9. '[input' → logprob: -6.381656646728516
    10. 'ist' → logprob: -6.381656646728516

Token 16: '0' (ID: 15)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.01451815478503704
    2. '0' → logprob: -4.2645182609558105
    3. 'map' → logprob: -8.389517784118652
    4. ' int' → logprob: -10.639517784118652
    5. ']' → logprob: -10.764517784118652
    6. '(int' → logprob: -10.889517784118652
    7. '*' → logprob: -11.139517784118652
    8. '1' → logprob: -11.264517784118652
    9. ']int' → logprob: -11.264517784118652
    10. 'i' → logprob: -11.639517784118652

Token 17: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.009571440517902374
    2. ']*' → logprob: -5.259571552276611
    3. ',' → logprob: -5.884571552276611
    4. ' for' → logprob: -7.259571552276611
    5. ' ]' → logprob: -7.634571552276611
    6. ']*(' → logprob: -8.634571075439453
    7. ')' → logprob: -9.384571075439453
    8. 'for' → logprob: -10.009571075439453
    9. ')]' → logprob: -10.259571075439453
    10. ',
' → logprob: -12.884571075439453

Token 18: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.09888192266225815
    2. ',' → logprob: -3.098881959915161
    3. '+' → logprob: -4.598881721496582
    4. ' *' → logprob: -4.598881721496582
    5. ' for' → logprob: -4.598881721496582
    6. '*(' → logprob: -4.848881721496582
    7. '[' → logprob: -5.348881721496582
    8. ']' → logprob: -5.723881721496582
    9. 'for' → logprob: -6.848881721496582
    10. ')' → logprob: -7.848881721496582

Token 19: ' n' (ID: 297)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.2723485827445984
    2. 'n' → logprob: -2.272348642349243
    3. '(k' → logprob: -2.522348642349243
    4. '100' → logprob: -3.772348642349243
    5. '(' → logprob: -3.897348642349243
    6. ' (' → logprob: -4.897348403930664
    7. 'k' → logprob: -6.647348403930664
    8. '10' → logprob: -6.772348403930664
    9. ' n' → logprob: -7.522348403930664
    10. '101' → logprob: -7.647348403930664

Token 20: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.36956921219825745
    2. ' for' → logprob: -2.3695693016052246
    3. '
' → logprob: -2.4945693016052246
    4. ' 
' → logprob: -3.1195693016052246
    5. '<|end|>' → logprob: -3.1195693016052246
    6. 'l' → logprob: -4.119569301605225
    7. 'n' → logprob: -4.994569301605225
    8. '[' → logprob: -5.369569301605225
    9. 's' → logprob: -6.119569301605225
    10. 'a' → logprob: -6.119569301605225

Token 21: 'i' (ID: 72)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.4726666212081909
    2. '
' → logprob: -1.347666621208191
    3. '<|end|>' → logprob: -2.8476667404174805
    4. ' for' → logprob: -3.4726667404174805
    5. ' 
' → logprob: -4.0976667404174805
    6. ' ' → logprob: -5.3476667404174805
    7. '\n' → logprob: -6.9726667404174805
    8. '[' → logprob: -7.0976667404174805
    9. 'n' → logprob: -7.2226667404174805
    10. '```' → logprob: -7.5976667404174805

Token 22: ' =' (ID: 314)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.7276033163070679
    2. 'f' → logprob: -1.6026033163070679
    3. '=' → logprob: -2.1026034355163574
    4. '+' → logprob: -2.1026034355163574
    5. ' =' → logprob: -3.2276034355163574
    6. 'nd' → logprob: -4.477603435516357
    7. ' +=' → logprob: -4.727603435516357
    8. ' ' → logprob: -5.602603435516357
    9. ' +' → logprob: -6.602603435516357
    10. ' n' → logprob: -6.727603435516357

Token 23: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.28196245431900024
    2. ' ' → logprob: -1.4069623947143555
    3. '1' → logprob: -7.2819623947143555
    4. ' n' → logprob: -9.281962394714355
    5. 'n' → logprob: -11.406962394714355
    6. ' k' → logprob: -12.156962394714355
    7. '`' → logprob: -12.906962394714355
    8. ''' → logprob: -13.531962394714355
    9. '[' → logprob: -13.656962394714355
    10. '2' → logprob: -13.781962394714355

Token 24: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00391727639362216
    2. '1' → logprob: -6.003917217254639
    3. ' ' → logprob: -7.003917217254639
    4. 'k' → logprob: -8.003917694091797
    5. 'n' → logprob: -8.753917694091797
    6. '2' → logprob: -10.628917694091797
    7. ' k' → logprob: -12.378917694091797
    8. ' n' → logprob: -13.128917694091797
    9. '-' → logprob: -13.503917694091797
    10. '4' → logprob: -13.753917694091797

Token 25: '
' (ID: 198)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.8599547147750854
    2. '<|end|>' → logprob: -1.3599547147750854
    3. ' while' → logprob: -1.6099547147750854
    4. '```' → logprob: -3.359954833984375
    5. ' ' → logprob: -3.859954833984375
    6. 'n' → logprob: -4.734954833984375
    7. '\n' → logprob: -4.734954833984375
    8. '\' → logprob: -4.734954833984375
    9. ')' → logprob: -5.359954833984375
    10. '+' → logprob: -5.484954833984375

Token 26: 'while' (ID: 7032)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.39582884311676025
    2. 'w' → logprob: -1.3958288431167603
    3. 'while' → logprob: -3.8958287239074707
    4. ')' → logprob: -4.645828723907471
    5. '```' → logprob: -4.895828723907471
    6. ',' → logprob: -5.520828723907471
    7. 'n' → logprob: -5.645828723907471
    8. '<|end|>' → logprob: -5.770828723907471
    9. '#' → logprob: -5.895828723907471
    10. ''' → logprob: -5.895828723907471

Token 27: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.0034663097467273474
    2. 'i' → logprob: -6.0034661293029785
    3. ' ' → logprob: -7.2534661293029785
    4. ' n' → logprob: -8.503466606140137
    5. ' k' → logprob: -9.753466606140137
    6. '(i' → logprob: -12.378466606140137
    7. ' True' → logprob: -12.378466606140137
    8. '  ' → logprob: -12.753466606140137
    9. 'n' → logprob: -13.253466606140137
    10. ' l' → logprob: -13.378466606140137

Token 28: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.05528302490711212
    2. '<' → logprob: -2.9302830696105957
    3. '<n' → logprob: -8.555282592773438
    4. ' ' → logprob: -9.305282592773438
    5. ' <=' → logprob: -9.555282592773438
    6. '<len' → logprob: -10.805282592773438
    7. '<=' → logprob: -12.180282592773438
    8. '<size' → logprob: -12.805282592773438
    9. '<|end|>' → logprob: -12.930282592773438
    10. ' <
' → logprob: -13.180282592773438

Token 29: ' q' (ID: 2335)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.8161739706993103
    2. 'k' → logprob: -1.441174030303955
    3. 'n' → logprob: -1.566174030303955
    4. ' k' → logprob: -2.191174030303955
    5. ' ' → logprob: -7.441174030303955
    6. 'q' → logprob: -12.066173553466797
    7. ' q' → logprob: -13.066173553466797
    8. ' ' → logprob: -13.316173553466797
    9. '	n' → logprob: -13.691173553466797
    10. '  ' → logprob: -13.941173553466797

Token 30: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.008779428899288177
    2. ' :' → logprob: -4.758779525756836
    3. ':
' → logprob: -9.008779525756836
    4. ' :
' → logprob: -11.133779525756836
    5. '+:' → logprob: -11.633779525756836
    6. '+' → logprob: -12.133779525756836
    7. ':**' → logprob: -12.383779525756836
    8. ' ' → logprob: -13.758779525756836
    9. '):' → logprob: -13.758779525756836
    10. ',' → logprob: -14.258779525756836

Token 31: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.08209173381328583
    2. '   ' → logprob: -3.957091808319092
    3. '    ' → logprob: -4.207091808319092
    4. ' l' → logprob: -4.457091808319092
    5. ' n' → logprob: -4.832091808319092
    6. 'n' → logprob: -5.082091808319092
    7. '<|end|>' → logprob: -5.082091808319092
    8. ' ,' → logprob: -5.707091808319092
    9. ' 
' → logprob: -5.707091808319092
    10. '  ' → logprob: -6.707091808319092

Token 32: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -1.4734872579574585
    2. ' l' → logprob: -1.8484872579574585
    3. ' ' → logprob: -2.098487377166748
    4. ' s' → logprob: -2.098487377166748
    5. ' n' → logprob: -2.598487377166748
    6. 'n' → logprob: -3.348487377166748
    7. ' t' → logprob: -3.348487377166748
    8. 'a' (adapté à ' a') → logprob: -3.473487377166748
    9. '   ' → logprob: -3.473487377166748
    10. ' i' → logprob: -3.598487377166748

Token 33: ' =' (ID: 314)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.16012875735759735
    2. '=' → logprob: -2.7851288318634033
    3. ' =' → logprob: -2.7851288318634033
    4. ' ,' → logprob: -3.7851288318634033
    5. ' ' → logprob: -7.285128593444824
    6. 'i' → logprob: -7.910128593444824
    7. '[' → logprob: -8.910128593444824
    8. ',b' → logprob: -9.285128593444824
    9. 'input' → logprob: -9.785128593444824
    10. 'r' → logprob: -9.910128593444824

Token 34: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.3528633117675781
    2. ' int' → logprob: -1.2278633117675781
    3. ' input' → logprob: -6.727863311767578
    4. '[int' → logprob: -6.852863311767578
    5. 'input' → logprob: -6.977863311767578
    6. 'list' → logprob: -7.602863311767578
    7. ' list' → logprob: -7.727863311767578
    8. ' [' → logprob: -10.352863311767578
    9. ' i' → logprob: -10.352863311767578
    10. 'i' → logprob: -10.602863311767578

Token 35: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.02976345270872116
    2. '(' → logprob: -3.5297634601593018
    3. 'input' → logprob: -11.529763221740723
    4. '(in' → logprob: -14.029763221740723
    5. '(
' → logprob: -14.404763221740723
    6. '()' → logprob: -14.529763221740723
    7. ' (' → logprob: -14.904763221740723
    8. ' input' → logprob: -16.02976417541504
    9. '(

' → logprob: -16.02976417541504
    10. '('' → logprob: -16.15476417541504

Token 36: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.001080206478945911
    2. '()' → logprob: -6.87608003616333
    3. ')' → logprob: -10.376080513000488
    4. '())
' → logprob: -12.126080513000488
    5. '().' → logprob: -12.251080513000488
    6. '()))' → logprob: -13.251080513000488
    7. '())

' → logprob: -13.626080513000488
    8. '();)' → logprob: -13.876080513000488
    9. ' ())' → logprob: -14.126080513000488
    10. '()>' → logprob: -14.876080513000488

Token 37: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 38: ' l' (ID: 305)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8805843591690063
    2. '<|end|>' → logprob: -0.8805843591690063
    3. '   ' → logprob: -2.630584239959717
    4. '[' → logprob: -3.380584239959717
    5. ' l' → logprob: -4.255584239959717
    6. '  ' → logprob: -4.380584239959717
    7. '    ' → logprob: -5.130584239959717
    8. ' if' → logprob: -5.380584239959717
    9. 'if' → logprob: -5.380584239959717
    10. '[i' → logprob: -5.380584239959717

Token 39: '[a' (ID: 32035)
  Prédit: '[a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[a' → logprob: -0.0009864849271252751
    2. '[' → logprob: -7.250986576080322
    3. '[l' → logprob: -8.500986099243164
    4. 'a' → logprob: -10.375986099243164
    5. '[i' → logprob: -11.250986099243164
    6. ' [' → logprob: -11.500986099243164
    7. '```' → logprob: -12.375986099243164
    8. '[:]' → logprob: -13.250986099243164
    9. ' a' → logprob: -13.500986099243164
    10. '[k' → logprob: -14.125986099243164

Token 40: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.35877183079719543
    2. ']' → logprob: -1.233771800994873
    3. ' -' → logprob: -4.983771800994873
    4. '[' → logprob: -6.483771800994873
    5. ')' → logprob: -7.358771800994873
    6. '1' → logprob: -8.108772277832031
    7. ' ]' → logprob: -8.108772277832031
    8. ']+=' → logprob: -8.358772277832031
    9. '])' → logprob: -9.358772277832031
    10. ' ' → logprob: -10.233772277832031

Token 41: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0025315487291663885
    2. ' ' → logprob: -6.0025315284729
    3. '<|end|>' → logprob: -10.627532005310059
    4. '   ' → logprob: -11.502532005310059
    5. '>' → logprob: -12.502532005310059
    6. '=' → logprob: -12.752532005310059
    7. ']' → logprob: -12.815032005310059
    8. ')' → logprob: -13.190032005310059
    9. '<|end|>' → logprob: -13.190032005310059
    10. '2' → logprob: -13.502532005310059

Token 42: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.097437315271236e-05
    2. ' ' → logprob: -10.00005054473877
    3. '2' → logprob: -13.00005054473877
    4. ']' → logprob: -14.12505054473877
    5. '=' → logprob: -14.56255054473877
    6. ')' → logprob: -14.68755054473877
    7. '<|end|>' → logprob: -15.43755054473877
    8. '   ' → logprob: -15.62505054473877
    9. '0' → logprob: -16.125051498413086
    10. '`' → logprob: -16.375051498413086

Token 43: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.017705468460917473
    2. ']+=' → logprob: -4.14270544052124
    3. ')' → logprob: -6.89270544052124
    4. ' ]' → logprob: -7.89270544052124
    5. ']=' → logprob: -9.142705917358398
    6. '+=' → logprob: -9.642705917358398
    7. ' +=' → logprob: -10.017705917358398
    8. '=' → logprob: -10.267705917358398
    9. ')]' → logprob: -11.767705917358398
    10. '])' → logprob: -12.642705917358398

Token 44: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.22137095034122467
    2. '+=' → logprob: -1.8463709354400635
    3. ' =' → logprob: -3.8463709354400635
    4. '=' → logprob: -3.9713709354400635
    5. ' ^=' → logprob: -7.846371173858643
    6. ']+=' → logprob: -9.471370697021484
    7. ' ' → logprob: -10.346370697021484
    8. ' |=' → logprob: -10.971370697021484
    9. ' -=' → logprob: -11.221370697021484
    10. '+' → logprob: -11.221370697021484

Token 45: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.004344786982983351
    2. ' ' → logprob: -5.629344940185547
    3. 'k' → logprob: -7.254344940185547
    4. ' k' → logprob: -10.254344940185547
    5. '   ' → logprob: -14.316844940185547
    6. '+' → logprob: -15.316844940185547
    7. '2' → logprob: -15.379344940185547
    8. 'l' → logprob: -15.629344940185547
    9. '  ' → logprob: -15.754344940185547
    10. 'a' → logprob: -16.441844940185547

Token 46: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0002497767563909292
    2. ' ' → logprob: -8.500249862670898
    3. 'k' → logprob: -10.000249862670898
    4. ' k' → logprob: -15.000249862670898
    5. '   ' → logprob: -15.500249862670898
    6. 'a' → logprob: -16.3127498626709
    7. '  ' → logprob: -16.4377498626709
    8. '+' → logprob: -16.7502498626709
    9. '2' → logprob: -16.7502498626709
    10. 'l' → logprob: -16.8752498626709

Token 47: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4065464437007904
    2. '
' → logprob: -1.7815464735031128
    3. 'i' → logprob: -2.1565463542938232
    4. '\n' → logprob: -3.1565463542938232
    5. '\' → logprob: -6.156546592712402
    6. '```' → logprob: -6.281546592712402
    7. ' i' → logprob: -6.531546592712402
    8. '    
' → logprob: -7.406546592712402
    9. 'n' → logprob: -7.906546592712402
    10. 'a' → logprob: -8.656546592712402

Token 48: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5010613799095154
    2. 'i' → logprob: -1.1260614395141602
    3. '
' → logprob: -3.12606143951416
    4. '\n' → logprob: -4.00106143951416
    5. '```' → logprob: -5.62606143951416
    6. '\' → logprob: -6.50106143951416
    7. ' i' → logprob: -6.75106143951416
    8. '	i' → logprob: -7.75106143951416
    9. '``' → logprob: -8.12606143951416
    10. '    
' → logprob: -8.25106143951416

Token 49: ' i' (ID: 575)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.029960600659251213
    2. 'i' (adapté à ' i') → logprob: -3.5299606323242188
    3. ' i' → logprob: -8.654960632324219
    4. '	i' → logprob: -11.279960632324219
    5. '```' → logprob: -11.529960632324219
    6. '
' → logprob: -12.029960632324219
    7. 'n' → logprob: -12.654960632324219
    8. '    
' → logprob: -13.904960632324219
    9. '\' → logprob: -14.029960632324219
    10. '\n' → logprob: -14.154960632324219

Token 50: ' +=' (ID: 2757)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.0037708666641265154
    2. ' +=' → logprob: -5.87877082824707
    3. '+=' → logprob: -7.12877082824707
    4. ' +' → logprob: -8.87877082824707
    5. '++' → logprob: -11.37877082824707
    6. ' ' → logprob: -11.62877082824707
    7. '<|end|>' → logprob: -13.25377082824707
    8. '+++' → logprob: -13.62877082824707
    9. '+='' → logprob: -14.87877082824707
    10. '=' → logprob: -15.75377082824707

Token 51: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.029750484973192215
    2. ' ' → logprob: -3.5297505855560303
    3. ' ' → logprob: -17.27975082397461
    4. '```' → logprob: -18.02975082397461
    5. '   ' → logprob: -18.27975082397461
    6. '<|end|>' → logprob: -18.40475082397461
    7. '１' → logprob: -20.15475082397461
    8. '    ' → logprob: -20.40475082397461
    9. '۱' → logprob: -20.52975082397461
    10. '  ' → logprob: -21.15475082397461

Token 52: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.0206720617134124e-05
    2. ' ' → logprob: -11.50001049041748
    3. '   ' → logprob: -17.250009536743164
    4. '```' → logprob: -18.625009536743164
    5. '  ' → logprob: -19.125009536743164
    6. '<|end|>' → logprob: -19.625009536743164
    7. '+' → logprob: -20.500009536743164
    8. '    ' → logprob: -20.750009536743164
    9. '۱' → logprob: -21.125009536743164
    10. '१' → logprob: -21.625009536743164

Token 53: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.27601858973503113
    2. '
' → logprob: -1.7760186195373535
    3. 'n' → logprob: -4.2760186195373535
    4. '\n' → logprob: -4.4010186195373535
    5. 'l' → logprob: -4.5260186195373535
    6. '```' → logprob: -4.7760186195373535
    7. 'if' → logprob: -4.9010186195373535
    8. '<|end|>' → logprob: -5.1510186195373535
    9. 'i' → logprob: -6.0260186195373535
    10. 's' → logprob: -6.4010186195373535

Token 54: 'i' (ID: 72)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.06718293577432632
    2. '
' → logprob: -3.942183017730713
    3. 'i' → logprob: -4.067183017730713
    4. 'l' → logprob: -4.692183017730713
    5. '```' → logprob: -5.192183017730713
    6. 'n' → logprob: -5.317183017730713
    7. '<|end|>' → logprob: -6.442183017730713
    8. 'if' → logprob: -6.442183017730713
    9. ' for' → logprob: -6.942183017730713
    10. 'j' → logprob: -7.192183017730713

Token 55: ' =' (ID: 314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 56: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.004144526552408934
    2. ' ' → logprob: -5.629144668579102
    3. 'k' → logprob: -8.004144668579102
    4. '1' → logprob: -8.629144668579102
    5. ' k' → logprob: -10.629144668579102
    6. 'n' → logprob: -12.629144668579102
    7. ' n' → logprob: -14.879144668579102
    8. 'q' → logprob: -14.941644668579102
    9. '```' → logprob: -15.191644668579102
    10. '2' → logprob: -15.254144668579102

Token 57: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.005187151022255421
    2. 'k' → logprob: -5.380187034606934
    3. '1' → logprob: -7.630187034606934
    4. ' ' → logprob: -9.880187034606934
    5. 'n' → logprob: -11.005187034606934
    6. ' k' → logprob: -12.005187034606934
    7. 'q' → logprob: -12.505187034606934
    8. 'l' → logprob: -13.505187034606934
    9. 'i' → logprob: -15.317687034606934
    10. '2' → logprob: -15.317687034606934

Token 58: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.07498764246702194
    2. '<|end|>' → logprob: -3.1999876499176025
    3. 'while' → logprob: -3.5749876499176025
    4. ' while' → logprob: -5.824987411499023
    5. '<|end|>' → logprob: -8.574987411499023
    6. ' 
' → logprob: -8.949987411499023
    7. '\n' → logprob: -9.324987411499023
    8. '
' → logprob: -10.824987411499023
    9. '```' → logprob: -10.824987411499023
    10. '  
' → logprob: -11.074987411499023

Token 59: 'while' (ID: 7032)
  Prédit: 'while'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.004811730235815048
    2. ' while' → logprob: -5.629811763763428
    3. '
' → logprob: -7.129811763763428
    4. '```' → logprob: -8.75481128692627
    5. '\n' → logprob: -9.62981128692627
    6. 'w' → logprob: -10.00481128692627
    7. 'b' → logprob: -10.12981128692627
    8. 'wh' → logprob: -10.75481128692627
    9. 's' → logprob: -11.62981128692627
    10. '<|end|>' → logprob: -11.75481128692627

Token 60: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.31793802976608276
    2. 'i' → logprob: -1.3179380893707275
    3. ' k' → logprob: -6.192937850952148
    4. 'k' → logprob: -6.942937850952148
    5. ' n' → logprob: -6.942937850952148
    6. 'n' → logprob: -8.067937850952148
    7. ' l' → logprob: -8.942937850952148
    8. ' ' → logprob: -9.067937850952148
    9. 'l' → logprob: -9.442937850952148
    10. '(i' → logprob: -11.692937850952148

Token 61: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.004283061716705561
    2. '<' → logprob: -5.5042829513549805
    3. '<n' → logprob: -8.87928295135498
    4. ' <=' → logprob: -10.25428295135498
    5. ' ' → logprob: -10.75428295135498
    6. ' n' → logprob: -12.62928295135498
    7. ' k' → logprob: -12.62928295135498
    8. '<len' → logprob: -14.25428295135498
    9. 'k' → logprob: -14.75428295135498
    10. '<=' → logprob: -15.25428295135498

Token 62: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.49083074927330017
    2. 'k' → logprob: -0.9908307790756226
    3. ' n' → logprob: -4.365830898284912
    4. ' k' → logprob: -5.615830898284912
    5. 'q' → logprob: -8.490830421447754
    6. ' ' → logprob: -10.615830421447754
    7. 'len' → logprob: -10.865830421447754
    8. ' len' → logprob: -12.615830421447754
    9. '	n' → logprob: -12.865830421447754
    10. '  ' → logprob: -12.990830421447754

Token 63: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.16870617866516113
    2. ' :' → logprob: -2.043706178665161
    3. ' :
' → logprob: -4.418705940246582
    4. '   ' → logprob: -5.043705940246582
    5. ':
' → logprob: -5.043705940246582
    6. ' ' → logprob: -7.918705940246582
    7. '    ' → logprob: -8.293705940246582
    8. ' and' → logprob: -10.543705940246582
    9. '  ' → logprob: -10.918705940246582
    10. ' :
' → logprob: -11.418705940246582

Token 64: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8686431646347046
    2. '   ' → logprob: -0.9936431646347046
    3. '
' → logprob: -2.243643283843994
    4. '    ' → logprob: -2.993643283843994
    5. ' 
' → logprob: -3.743643283843994
    6. '    
' → logprob: -4.493643283843994
    7. ' if' → logprob: -5.368643283843994
    8. '<|end|>' → logprob: -5.868643283843994
    9. '  ' → logprob: -6.118643283843994
    10. '\' → logprob: -6.368643283843994

Token 65: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.461691677570343
    2. ' if' → logprob: -1.0866916179656982
    3. 'print' → logprob: -4.211691856384277
    4. '   ' → logprob: -4.336691856384277
    5. ' print' → logprob: -5.711691856384277
    6. ' ' → logprob: -8.086691856384277
    7. '```' → logprob: -8.711691856384277
    8. '    ' → logprob: -8.711691856384277
    9. 'l' → logprob: -8.961691856384277
    10. '	if' → logprob: -9.086691856384277

Token 66: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.35133108496665955
    2. ' l' → logprob: -1.226331114768982
    3. '   ' → logprob: -6.1013312339782715
    4. 'k' → logprob: -7.9763312339782715
    5. ' k' → logprob: -9.351330757141113
    6. ' ' → logprob: -9.351330757141113
    7. '	l' → logprob: -9.976330757141113
    8. 'i' → logprob: -11.226330757141113
    9. '(l' → logprob: -11.351330757141113
    10. '    ' → logprob: -11.851330757141113

Token 67: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -4.954393079970032e-05
    2. '[' → logprob: -10.000049591064453
    3. '[l' → logprob: -13.625049591064453
    4. 'i' → logprob: -13.875049591064453
    5. 'l' → logprob: -14.500049591064453
    6. ' [' → logprob: -14.750049591064453
    7. '[a' → logprob: -14.750049591064453
    8. '[n' → logprob: -15.500049591064453
    9. '```' → logprob: -16.500049591064453
    10. ' ' → logprob: -16.875049591064453

Token 68: ']' (ID: 60)
  Prédit: ' >='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.17155852913856506
    2. '>=' → logprob: -2.1715586185455322
    3. ' <' → logprob: -3.5465586185455322
    4. '>' → logprob: -5.671558380126953
    5. '%' → logprob: -5.921558380126953
    6. '<' → logprob: -6.046558380126953
    7. ' ' → logprob: -6.296558380126953
    8. ' >' → logprob: -6.296558380126953
    9. ' %' → logprob: -6.421558380126953
    10. ']>=' → logprob: -8.421558380126953

Token 69: ' >' (ID: 1424)
  Prédit: '>='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '>=' → logprob: -0.451442688703537
    2. ' >=' → logprob: -1.0764427185058594
    3. '<' → logprob: -4.326442718505859
    4. ' <' → logprob: -4.951442718505859
    5. ' ' → logprob: -7.326442718505859
    6. '+' → logprob: -7.326442718505859
    7. '>' → logprob: -7.576442718505859
    8. ' +' → logprob: -8.70144271850586
    9. '	' → logprob: -10.63894271850586
    10. '+k' → logprob: -10.70144271850586

Token 70: ' q' (ID: 2335)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.3207643926143646
    2. ' q' → logprob: -1.320764422416687
    3. '=' → logprob: -5.445764541625977
    4. '=q' → logprob: -6.195764541625977
    5. ' ' → logprob: -7.445764541625977
    6. ' (' → logprob: -8.945764541625977
    7. '0' → logprob: -9.320764541625977
    8. 'k' → logprob: -9.570764541625977
    9. '=(' → logprob: -9.695764541625977
    10. '(' → logprob: -9.820764541625977

Token 71: ' -' (ID: 533)
  Prédit: '/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '/' → logprob: -0.8536674380302429
    2. '//' → logprob: -1.1036674976348877
    3. ' //' → logprob: -1.8536674976348877
    4. '/k' → logprob: -2.8536674976348877
    5. ' /' → logprob: -3.7286674976348877
    6. ' ' → logprob: -6.103667259216309
    7. '2' → logprob: -7.353667259216309
    8. 'k' → logprob: -7.853667259216309
    9. ' ' → logprob: -8.103667259216309
    10. '   ' → logprob: -9.103667259216309

Token 72: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.0008846574346534908
    2. ' k' → logprob: -7.125884532928467
    3. ' ' → logprob: -9.875885009765625
    4. '   ' → logprob: -11.250885009765625
    5. '  ' → logprob: -12.500885009765625
    6. '(k' → logprob: -12.500885009765625
    7. 'l' → logprob: -12.625885009765625
    8. '	k' → logprob: -12.750885009765625
    9. '    ' → logprob: -13.875885009765625
    10. ' ' → logprob: -15.500885009765625

Token 73: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.07117150723934174
    2. ' :' → logprob: -2.696171522140503
    3. ':
' → logprob: -7.196171283721924
    4. ' :
' → logprob: -8.446171760559082
    5. ' ' → logprob: -9.321171760559082
    6. '):' → logprob: -9.321171760559082
    7. ')' → logprob: -9.946171760559082
    8. ':return' → logprob: -12.071171760559082
    9. '+' → logprob: -12.321171760559082
    10. ' ):' → logprob: -12.571171760559082

Token 74: '       ' (ID: 309)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.5767000317573547
    2. '   ' → logprob: -1.20169997215271
    3. '       ' → logprob: -2.70169997215271
    4. 'print' → logprob: -2.70169997215271
    5. '    ' → logprob: -6.951700210571289
    6. ' ' → logprob: -7.201700210571289
    7. ' ' → logprob: -8.326700210571289
    8. ' 
' → logprob: -8.451700210571289
    9. '\n' → logprob: -8.451700210571289
    10. '	print' → logprob: -8.576700210571289

Token 75: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.31397372484207153
    2. 'print' (adapté à ' print') → logprob: -1.3139736652374268
    3. '   ' → logprob: -7.438973903656006
    4. ' ' → logprob: -10.188973426818848
    5. ' prin' → logprob: -10.688973426818848
    6. '       ' → logprob: -10.938973426818848
    7. '	print' → logprob: -11.313973426818848
    8. ''' → logprob: -12.188973426818848
    9. ' p' → logprob: -12.313973426818848
    10. '    ' → logprob: -12.688973426818848

Token 76: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.05616110563278198
    2. '('' → logprob: -3.5561611652374268
    3. '(' → logprob: -3.6811611652374268
    4. '"' → logprob: -7.431160926818848
    5. ' ("' → logprob: -8.931160926818848
    6. ''' → logprob: -9.806160926818848
    7. '(i' → logprob: -10.056160926818848
    8. ' "' → logprob: -11.056160926818848
    9. '()' → logprob: -11.556160926818848
    10. '(
' → logprob: -12.806160926818848

Token 77: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.18751879036426544
    2. '"' → logprob: -1.937518835067749
    3. 'YES' → logprob: -4.06251859664917
    4. '"No' → logprob: -5.68751859664917
    5. 'OK' → logprob: -7.06251859664917
    6. 'No' → logprob: -7.18751859664917
    7. '"D' → logprob: -7.56251859664917
    8. '"A' → logprob: -7.68751859664917
    9. '1' → logprob: -7.81251859664917
    10. '"N' → logprob: -7.93751859664917

Token 78: '")
' (ID: 1896)
  Prédit: '")
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")
' → logprob: -0.5308879017829895
    2. '")' → logprob: -0.9058879017829895
    3. '   ' → logprob: -5.530888080596924
    4. ')
' → logprob: -6.155888080596924
    5. ')' → logprob: -7.155888080596924
    6. '")
' → logprob: -8.155887603759766
    7. 'else' → logprob: -8.155887603759766
    8. '')
' → logprob: -9.155887603759766
    9. '"' → logprob: -9.405887603759766
    10. '```' → logprob: -10.405887603759766

Token 79: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.010834753513336182
    2. 'else' → logprob: -4.635834693908691
    3. ' else' → logprob: -7.010834693908691
    4. '```' → logprob: -9.760834693908691
    5. '<|end|>' → logprob: -10.135834693908691
    6. '	else' → logprob: -10.135834693908691
    7. ' ' → logprob: -10.635834693908691
    8. '
' → logprob: -13.010834693908691
    9. '   ' → logprob: -13.260834693908691
    10. '``' → logprob: -13.510834693908691

Token 80: ' else' (ID: 1203)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.840759813785553
    2. 'else' (adapté à ' else') → logprob: -1.0907597541809082
    3. ' else' → logprob: -1.4657597541809082
    4. ' ' → logprob: -7.090759754180908
    5. '	else' → logprob: -7.215759754180908
    6. '  ' → logprob: -9.715760231018066
    7. '<|end|>' → logprob: -9.840760231018066
    8. '```' → logprob: -10.590760231018066
    9. ' 
' → logprob: -12.215760231018066
    10. '_else' → logprob: -12.340760231018066

Token 81: ':
' (ID: 734)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.046101074665784836
    2. ':' → logprob: -3.1711010932922363
    3. ':
' → logprob: -5.921101093292236
    4. '   ' → logprob: -8.171100616455078
    5. ' print' → logprob: -10.546100616455078
    6. '    ' → logprob: -10.671100616455078
    7. ' :' → logprob: -10.921100616455078
    8. ' :
' → logprob: -11.171100616455078
    9. '     ' → logprob: -11.796100616455078
    10. '        
' → logprob: -12.171100616455078

Token 82: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.015340578742325306
    2. '   ' → logprob: -5.015340805053711
    3. 'print' → logprob: -5.265340805053711
    4. ' print' → logprob: -5.765340805053711
    5. '    ' → logprob: -9.265340805053711
    6. '	print' → logprob: -9.640340805053711
    7. '	   ' → logprob: -9.890340805053711
    8. '	' → logprob: -10.765340805053711
    9. ' ' → logprob: -11.390340805053711
    10. '    ' → logprob: -11.640340805053711

Token 83: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.08343079686164856
    2. ' print' → logprob: -3.083430767059326
    3. '   ' → logprob: -3.958430767059326
    4. '       ' → logprob: -4.208430767059326
    5. '	print' → logprob: -8.583431243896484
    6. ' ' → logprob: -10.083431243896484
    7. '    ' → logprob: -10.958431243896484
    8. '  ' → logprob: -11.333431243896484
    9. '           ' → logprob: -11.958431243896484
    10. '     ' → logprob: -12.333431243896484

Token 84: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.02976079285144806
    2. '(' → logprob: -3.5297608375549316
    3. '(
' → logprob: -11.904760360717773
    4. '("("' → logprob: -13.154760360717773
    5. '('' → logprob: -14.154760360717773
    6. '("""' → logprob: -15.529760360717773
    7. '"' → logprob: -15.779760360717773
    8. ' ("' → logprob: -16.154760360717773
    9. '("(' → logprob: -16.154760360717773
    10. '("")' → logprob: -16.279760360717773

Token 85: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.3132787048816681
    2. '"No' → logprob: -1.3132786750793457
    3. '"' → logprob: -11.813279151916504
    4. '“No' → logprob: -11.938279151916504
    5. ' No' → logprob: -12.938279151916504
    6. 'NO' → logprob: -15.563279151916504
    7. '_No' → logprob: -15.938279151916504
    8. '(No' → logprob: -16.813278198242188
    9. '>No' → logprob: -16.938278198242188
    10. '   ' → logprob: -16.938278198242188

Token 86: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.07920679450035095
    2. ')' → logprob: -2.829206705093384
    3. '")
' → logprob: -4.454206943511963
    4. '   ' → logprob: -5.704206943511963
    5. ')
' → logprob: -6.204206943511963
    6. ')")' → logprob: -10.204206466674805
    7. '`)' → logprob: -10.829206466674805
    8. ')")
' → logprob: -11.079206466674805
    9. ')i' → logprob: -11.704206466674805
    10. '')' → logprob: -11.829206466674805

Token 87: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0008714404539205134
    2. '
' → logprob: -7.250871658325195
    3. 'i' → logprob: -9.250871658325195
    4. '	i' → logprob: -10.875871658325195
    5. '    
' → logprob: -11.000871658325195
    6. '```' → logprob: -11.500871658325195
    7. ' i' → logprob: -11.625871658325195
    8. ',i' → logprob: -12.750871658325195
    9. '  
' → logprob: -13.375871658325195
    10. '[i' → logprob: -13.500871658325195

Token 88: ' i' (ID: 575)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09540585428476334
    2. '
' → logprob: -2.5954058170318604
    3. 'i' (adapté à ' i') → logprob: -4.2204060554504395
    4. ' i' → logprob: -6.9704060554504395
    5. '    
' → logprob: -8.095405578613281
    6. '\n' → logprob: -8.720405578613281
    7. '	i' → logprob: -8.845405578613281
    8. '```' → logprob: -10.095405578613281
    9. ',i' → logprob: -10.595405578613281
    10. '[i' → logprob: -10.595405578613281

Token 89: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.1763906180858612
    2. '+' → logprob: -2.1763906478881836
    3. '+=' → logprob: -3.1763906478881836
    4. ' +' → logprob: -5.676390647888184
    5. ' ' → logprob: -6.051390647888184
    6. '++' → logprob: -7.926390647888184
    7. '   ' → logprob: -9.176390647888184
    8. ')' → logprob: -10.051390647888184
    9. '=' → logprob: -10.051390647888184
    10. '<|end|>' → logprob: -10.051390647888184

Token 90: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.04299965873360634
    2. ' ' → logprob: -3.167999744415283
    3. '```' → logprob: -14.917999267578125
    4. '   ' → logprob: -16.667999267578125
    5. ' ' → logprob: -16.917999267578125
    6. '	' → logprob: -19.167999267578125
    7. 's' → logprob: -19.230499267578125
    8. '１' → logprob: -19.292999267578125
    9. '  ' → logprob: -19.292999267578125
    10. '`' → logprob: -19.292999267578125

Token 91: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.512236498361744e-07
    2. ' ' → logprob: -14.500000953674316
    3. '```' → logprob: -17.75
    4. '   ' → logprob: -19.625
    5. '１' → logprob: -20.125
    6. '`' → logprob: -20.75
    7. '  ' → logprob: -21.75
    8. '2' → logprob: -22.0
    9. '``' → logprob: -22.0
    10. '۱' → logprob: -22.0625


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 89
Tokens correctement prédits (1ère position, stricte): 32
Tokens correctement prédits (1ère position, avec adaptation): 34
Tokens correctement prédits (top 10): 78
Précision stricte (1ère position): 35.96%
Précision adaptée (1ère position): 38.20%
Précision (top 10): 87.64%
================================================================================
