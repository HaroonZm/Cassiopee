================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:49:10
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from collections import Counter
from sys import stdin

s = [line.rstrip() for line in stdin.readlines()[1:]]
counter = Counter(map(lambda x: ''.join(sorted(x)), s))
print(sum(v * (v - 1) // 2 for v in counter.values()))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' collections' (ID: 22690)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' Counter' (ID: 32251)
  Prédit: 'abc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'abc' → logprob: -0.41044583916664124
    2. ' abc' → logprob: -1.9104458093643188
    3. 'deque' → logprob: -2.4104459285736084
    4. ' defaultdict' → logprob: -2.5354459285736084
    5. 'default' → logprob: -4.660445690155029
    6. ' deque' → logprob: -6.035445690155029
    7. 'Counter' → logprob: -6.160445690155029
    8. '```' → logprob: -6.160445690155029
    9. ' Counter' → logprob: -6.660445690155029
    10. ' named' → logprob: -7.035445690155029

Token 4: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00022272850037552416
    2. '\(' → logprob: -9.875223159790039
    3. '(
' → logprob: -10.250223159790039
    4. '.' → logprob: -10.500223159790039
    5. '```' → logprob: -10.625223159790039
    6. 'newline' → logprob: -11.125223159790039
    7. '()' → logprob: -11.125223159790039
    8. '`' → logprob: -11.250223159790039
    9. '\' → logprob: -11.750223159790039
    10. 'import' → logprob: -11.875223159790039

Token 5: 'from' (ID: 2845)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004678849596530199
    2. '(
' → logprob: -6.754678726196289
    3. '.' → logprob: -7.129678726196289
    4. 'a' → logprob: -7.629678726196289
    5. 'newline' → logprob: -7.629678726196289
    6. '\n' → logprob: -8.379678726196289
    7. 'C' → logprob: -8.379678726196289
    8. '\' → logprob: -8.629678726196289
    9. '```' → logprob: -8.879678726196289
    10. '\(' → logprob: -9.004678726196289

Token 6: ' sys' (ID: 12228)
  Prédit: ' itertools'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' itertools' → logprob: -0.2576664090156555
    2. ' collections' → logprob: -1.8826663494110107
    3. ' typing' → logprob: -3.6326663494110107
    4. ' math' → logprob: -3.8826663494110107
    5. ' os' → logprob: -4.25766658782959
    6. ' ' → logprob: -5.75766658782959
    7. ' sys' → logprob: -6.13266658782959
    8. ' re' → logprob: -6.25766658782959
    9. ' functools' → logprob: -6.63266658782959
    10. ' nltk' → logprob: -7.00766658782959

Token 7: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.011757446452975273
    2. 'import' → logprob: -4.5117573738098145
    3. '.' → logprob: -7.6367573738098145
    4. ' ' → logprob: -8.761757850646973
    5. '<|end|>' → logprob: -10.886757850646973
    6. '	import' → logprob: -11.261757850646973
    7. ' .' → logprob: -11.886757850646973
    8. ' im' → logprob: -12.261757850646973
    9. '<|end|>' → logprob: -12.636757850646973
    10. '```' → logprob: -12.886757850646973

Token 8: ' stdin' (ID: 75143)
  Prédit: 'argv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'argv' → logprob: -0.16491617262363434
    2. ' argv' → logprob: -2.1649162769317627
    3. 'stdin' → logprob: -3.7899162769317627
    4. ' stdin' → logprob: -4.664916038513184
    5. 'exit' → logprob: -6.164916038513184
    6. ' exit' → logprob: -6.414916038513184
    7. 'stdout' → logprob: -7.289916038513184
    8. 'stderr' → logprob: -7.539916038513184
    9. 'import' → logprob: -9.039916038513184
    10. '.argv' → logprob: -9.164916038513184

Token 9: '

' (ID: 279)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.17330744862556458
    2. 'for' → logprob: -2.798307418823242
    3. '\' → logprob: -3.173307418823242
    4. '.' → logprob: -3.923307418823242
    5. '
' → logprob: -4.298307418823242
    6. '```' → logprob: -4.548307418823242
    7. '`' → logprob: -5.673307418823242
    8. 'newline' → logprob: -6.298307418823242
    9. '' → logprob: -6.548307418823242
    10. 'data' → logprob: -6.923307418823242

Token 10: 's' (ID: 82)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.411268949508667
    2. 'data' → logprob: -1.536268949508667
    3. '\n' → logprob: -3.161268949508667
    4. 'f' → logprob: -4.161269187927246
    5. '\' → logprob: -4.536269187927246
    6. 'd' → logprob: -4.661269187927246
    7. 'c' → logprob: -4.661269187927246
    8. '`' → logprob: -5.286269187927246
    9. 'n' → logprob: -5.286269187927246
    10. '.' → logprob: -5.536269187927246

Token 11: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.4946432113647461
    2. '=' → logprob: -1.994643211364746
    3. ' =' → logprob: -1.994643211364746
    4. 't' → logprob: -2.619643211364746
    5. 'tr' → logprob: -4.244643211364746
    6. '[' → logprob: -4.244643211364746
    7. 'tring' → logprob: -4.619643211364746
    8. 'trip' → logprob: -6.619643211364746
    9. 'entence' → logprob: -7.619643211364746
    10. '```' → logprob: -7.619643211364746

Token 12: ' [' (ID: 723)
  Prédit: ' stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' stdin' → logprob: -0.634274423122406
    2. 'stdin' → logprob: -0.759274423122406
    3. '(stdin' → logprob: -7.509274482727051
    4. 'input' → logprob: -7.634274482727051
    5. ' input' → logprob: -7.759274482727051
    6. ' ' → logprob: -9.50927448272705
    7. '.stdin' → logprob: -9.63427448272705
    8. '"' → logprob: -10.75927448272705
    9. ' "' → logprob: -11.88427448272705
    10. ' std' → logprob: -11.88427448272705

Token 13: 'line' (ID: 1137)
  Prédit: 'line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.0061616357415914536
    2. 'x' → logprob: -6.006161689758301
    3. 'c' → logprob: -6.631161689758301
    4. 'l' → logprob: -7.256161689758301
    5. 'word' → logprob: -7.506161689758301
    6. 'stdin' → logprob: -7.631161689758301
    7. 'char' → logprob: -8.6311616897583
    8. 'next' → logprob: -8.7561616897583
    9. 'i' → logprob: -9.5061616897583
    10. 'lin' → logprob: -9.7561616897583

Token 14: '.rstrip' (ID: 161629)
  Prédit: '.strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.strip' → logprob: -0.5330090522766113
    2. '.rstrip' → logprob: -0.9080090522766113
    3. ' for' → logprob: -5.408009052276611
    4. '.' → logprob: -5.908009052276611
    5. '.readline' → logprob: -6.908009052276611
    6. 'rstrip' → logprob: -7.158009052276611
    7. ')' → logprob: -7.783009052276611
    8. 'strip' → logprob: -8.908008575439453
    9. 'for' → logprob: -9.158008575439453
    10. '[:-' → logprob: -9.908008575439453

Token 15: '()' (ID: 416)
  Prédit: '('\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('\' → logprob: -0.2611435353755951
    2. '()' → logprob: -1.5111435651779175
    3. '('' → logprob: -5.011143684387207
    4. '("\' → logprob: -6.636143684387207
    5. '()\' → logprob: -7.386143684387207
    6. '(' → logprob: -8.136143684387207
    7. '())' → logprob: -8.761143684387207
    8. ''\' → logprob: -10.011143684387207
    9. '()]' → logprob: -10.886143684387207
    10. '("' → logprob: -11.011143684387207

Token 16: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.32587212324142456
    2. 'for' → logprob: -1.7008721828460693
    3. ')' → logprob: -2.4508721828460693
    4. '()' → logprob: -4.82587194442749
    5. ']' → logprob: -8.200872421264648
    6. '	for' → logprob: -8.325872421264648
    7. '('\' → logprob: -8.700872421264648
    8. '   ' → logprob: -9.325872421264648
    9. ' )' → logprob: -9.575872421264648
    10. ')\' → logprob: -9.575872421264648

Token 17: ' line' (ID: 2543)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.8028948903083801
    2. ' line' → logprob: -1.3028948307037354
    3. ' stdin' → logprob: -1.3028948307037354
    4. 'line' → logprob: -5.0528950691223145
    5. '_' → logprob: -7.1778950691223145
    6. '(stdin' → logprob: -7.3028950691223145
    7. ' ' → logprob: -7.9278950691223145
    8. ' _' → logprob: -9.427894592285156
    9. '.stdin' → logprob: -9.677894592285156
    10. ' readline' → logprob: -10.552894592285156

Token 18: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.007615509908646345
    2. 'in' → logprob: -4.882615566253662
    3. '	in' → logprob: -13.007615089416504
    4. 's' → logprob: -13.257615089416504
    5. ' ' → logprob: -13.507615089416504
    6. 'import' → logprob: -13.632615089416504
    7. 'stdin' → logprob: -13.882615089416504
    8. ' ' → logprob: -14.882615089416504
    9. '<|end|>' → logprob: -14.882615089416504
    10. '<|end|>' → logprob: -15.945115089416504

Token 19: ' stdin' (ID: 75143)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.0036155125126242638
    2. ' stdin' → logprob: -5.628615379333496
    3. '(stdin' → logprob: -11.128615379333496
    4. '.stdin' → logprob: -14.378615379333496
    5. 'stdout' → logprob: -16.503616333007812
    6. 'st' → logprob: -18.003616333007812
    7. 'std' → logprob: -18.378616333007812
    8. 'sys' → logprob: -18.378616333007812
    9. ' ' → logprob: -18.378616333007812
    10. 'stderr' → logprob: -19.003616333007812

Token 20: '.readlines' (ID: 92237)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.001013876055367291
    2. ')]' → logprob: -7.00101375579834
    3. '])' → logprob: -9.87601375579834
    4. '()]' → logprob: -10.87601375579834
    5. ')' → logprob: -11.87601375579834
    6. ' ]' → logprob: -12.12601375579834
    7. '])]' → logprob: -12.12601375579834
    8. '>]' → logprob: -12.50101375579834
    9. '`]' → logprob: -12.75101375579834
    10. ']]' → logprob: -13.50101375579834

Token 21: '()[' (ID: 20778)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.0030006428714841604
    2. '()' → logprob: -6.253000736236572
    3. '())' → logprob: -7.003000736236572
    4. '(' → logprob: -8.878000259399414
    5. ']' → logprob: -11.253000259399414
    6. ']()' → logprob: -12.378000259399414
    7. ')]' → logprob: -13.253000259399414
    8. '()][' → logprob: -13.878000259399414
    9. ' ()' → logprob: -14.003000259399414
    10. ' ())' → logprob: -14.628000259399414

Token 22: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.057628829032182693
    2. '-' → logprob: -3.807628870010376
    3. ':' → logprob: -3.932628870010376
    4. ':-' → logprob: -5.182628631591797
    5. '2' → logprob: -5.682628631591797
    6. ':]' → logprob: -6.182628631591797
    7. '0' → logprob: -6.307628631591797
    8. '3' → logprob: -7.557628631591797
    9. '::-' → logprob: -8.307628631591797
    10. '::' → logprob: -8.432628631591797

Token 23: ':' (ID: 25)
  Prédit: ':]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':]' → logprob: -0.5761985778808594
    2. ':' → logprob: -0.8261985778808594
    3. ':].' → logprob: -8.95119857788086
    4. ':],' → logprob: -9.20119857788086
    5. ':]

' → logprob: -11.32619857788086
    6. ':-' → logprob: -11.82619857788086
    7. '：' → logprob: -12.95119857788086
    8. ']:' → logprob: -12.95119857788086
    9. ' :]' → logprob: -13.70119857788086
    10. '1' → logprob: -14.45119857788086

Token 24: ']]
' (ID: 29446)
  Prédit: ']]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']]' → logprob: -0.3874751031398773
    2. ']' → logprob: -1.1374751329421997
    3. ')]' → logprob: -8.13747501373291
    4. '])]' → logprob: -9.13747501373291
    5. '])' → logprob: -9.38747501373291
    6. ']]]' → logprob: -10.51247501373291
    7. ']}' → logprob: -10.63747501373291
    8. ' ]]' → logprob: -10.88747501373291
    9. '],' → logprob: -11.26247501373291
    10. ']>' → logprob: -11.76247501373291

Token 25: 'counter' (ID: 32128)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5785771608352661
    2. 'c' → logprob: -1.8285771608352661
    3. 'counter' → logprob: -1.8285771608352661
    4. 'count' → logprob: -3.7035770416259766
    5. 'counts' → logprob: -3.8285770416259766
    6. 'word' → logprob: -4.203577041625977
    7. '\n' → logprob: -4.828577041625977
    8. 'tokens' → logprob: -5.203577041625977
    9. 'result' → logprob: -5.203577041625977
    10. 'a' → logprob: -5.453577041625977

Token 26: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.05239175632596016
    2. '.' → logprob: -3.052391767501831
    3. 's' → logprob: -5.802391529083252
    4. '=' → logprob: -8.42739200592041
    5. ' (' → logprob: -9.05239200592041
    6. '(s' → logprob: -9.05239200592041
    7. '(.)' → logprob: -9.67739200592041
    8. '[' → logprob: -9.92739200592041
    9. '.(' → logprob: -10.30239200592041
    10. '(
' → logprob: -10.30239200592041

Token 27: ' Counter' (ID: 32251)
  Prédit: 'Counter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Counter' → logprob: -0.5759487152099609
    2. ' Counter' → logprob: -0.8259487152099609
    3. '.Counter' → logprob: -12.200948715209961
    4. ' counter' → logprob: -12.700948715209961
    5. 'counter' → logprob: -14.450948715209961
    6. ' ' → logprob: -15.325948715209961
    7. '_counter' → logprob: -15.575948715209961
    8. 'Counters' → logprob: -16.20094871520996
    9. 'C' → logprob: -16.57594871520996
    10. ' ' → logprob: -16.70094871520996

Token 28: '(map' (ID: 16946)
  Prédit: '(s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.12695781886577606
    2. '(' → logprob: -2.126957893371582
    3. 's' → logprob: -10.751957893371582
    4. '(
' → logprob: -12.751957893371582
    5. '((' → logprob: -13.501957893371582
    6. '()' → logprob: -14.251957893371582
    7. '('' → logprob: -14.376957893371582
    8. ' (' → logprob: -14.376957893371582
    9. '("("' → logprob: -15.126957893371582
    10. '(`' → logprob: -15.626957893371582

Token 29: '(lambda' (ID: 43341)
  Prédit: '(str'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(str' → logprob: -0.048738833516836166
    2. '(tuple' → logprob: -4.173738956451416
    3. '(lambda' → logprob: -4.673738956451416
    4. '(' → logprob: -4.673738956451416
    5. '(int' → logprob: -5.048738956451416
    6. '(len' → logprob: -5.173738956451416
    7. '(ord' → logprob: -6.923738956451416
    8. '(s' → logprob: -8.798738479614258
    9. 'str' → logprob: -9.298738479614258
    10. '(eval' → logprob: -9.423738479614258

Token 30: ' x' (ID: 1215)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.8466566801071167
    2. ' s' → logprob: -1.3466566801071167
    3. ' word' → logprob: -1.9716566801071167
    4. ' len' → logprob: -2.9716567993164062
    5. ' x' → logprob: -3.3466567993164062
    6. ' lambda' → logprob: -3.8466567993164062
    7. 'len' → logprob: -3.9716567993164062
    8. 'lambda' → logprob: -4.596656799316406
    9. 'x' → logprob: -4.721656799316406
    10. 'word' → logprob: -5.096656799316406

Token 31: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0010948538547381759
    2. ' :' → logprob: -7.251094818115234
    3. 's' → logprob: -8.501094818115234
    4. ':s' → logprob: -9.501094818115234
    5. ':int' → logprob: -9.501094818115234
    6. ':x' → logprob: -11.001094818115234
    7. ':list' → logprob: -12.751094818115234
    8. 'len' → logprob: -12.876094818115234
    9. ':str' → logprob: -13.376094818115234
    10. ':
' → logprob: -13.751094818115234

Token 32: ' ''.' (ID: 105941)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.7108266353607178
    2. ' x' → logprob: -1.0858266353607178
    3. ' tuple' → logprob: -2.8358266353607178
    4. 'len' → logprob: -2.9608266353607178
    5. 'tuple' → logprob: -3.4608266353607178
    6. ' len' → logprob: -4.460826873779297
    7. 'int' → logprob: -5.335826873779297
    8. '(x' → logprob: -5.585826873779297
    9. ' int' → logprob: -5.835826873779297
    10. 's' → logprob: -6.585826873779297

Token 33: 'join' (ID: 10891)
  Prédit: 'join'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'join' → logprob: -0.0975445955991745
    2. 'split' → logprob: -3.0975446701049805
    3. 'lower' → logprob: -3.4725446701049805
    4. 'strip' → logprob: -4.5975446701049805
    5. 'replace' → logprob: -5.9725446701049805
    6. 'upper' → logprob: -6.3475446701049805
    7. 'rstrip' → logprob: -6.8475446701049805
    8. 'count' → logprob: -7.2225446701049805
    9. 'startswith' → logprob: -9.09754467010498
    10. 'translate' → logprob: -9.22254467010498

Token 34: '(sorted' (ID: 92488)
  Prédit: '(sorted'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(sorted' → logprob: -0.4472522437572479
    2. '(x' → logprob: -1.4472522735595703
    3. 'sorted' → logprob: -2.3222522735595703
    4. 'x' → logprob: -3.9472522735595703
    5. '(re' → logprob: -5.94725227355957
    6. '(' → logprob: -6.32225227355957
    7. '(filter' → logprob: -6.82225227355957
    8. 'filter' → logprob: -7.19725227355957
    9. '([' → logprob: -7.82225227355957
    10. '(['' → logprob: -8.19725227355957

Token 35: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.0004213786742184311
    2. 'x' → logprob: -8.375421524047852
    3. '(' → logprob: -8.625421524047852
    4. '(list' → logprob: -11.875421524047852
    5. '(s' → logprob: -12.625421524047852
    6. 'list' → logprob: -15.375421524047852
    7. '(str' → logprob: -15.625421524047852
    8. '((' → logprob: -16.12542152404785
    9. ' x' → logprob: -16.50042152404785
    10. '(
' → logprob: -16.75042152404785

Token 36: ')),' (ID: 12098)
  Prédit: ')),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')),' → logprob: -0.002443550620228052
    2. ' ' → logprob: -6.627443313598633
    3. '))' → logprob: -7.377443313598633
    4. '),' → logprob: -8.752443313598633
    5. ')' → logprob: -9.252443313598633
    6. '))),' → logprob: -9.252443313598633
    7. '()' → logprob: -9.877443313598633
    8. '.split' → logprob: -11.377443313598633
    9. '[' → logprob: -11.377443313598633
    10. '')),' → logprob: -11.502443313598633

Token 37: ' s' (ID: 265)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.006715370807796717
    2. ' s' → logprob: -5.006715297698975
    3. '_s' → logprob: -17.631715774536133
    4. '	s' → logprob: -17.756715774536133
    5. ''s' → logprob: -18.631715774536133
    6. '(s' → logprob: -18.756715774536133
    7. ' ' → logprob: -18.881715774536133
    8. ')' → logprob: -18.881715774536133
    9. '`s' → logprob: -19.131715774536133
    10. '[s' → logprob: -19.756715774536133

Token 38: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0012617830652743578
    2. ')' → logprob: -6.7512617111206055
    3. ')))' → logprob: -9.376261711120605
    4. '))
' → logprob: -12.626261711120605
    5. ' ))' → logprob: -13.376261711120605
    6. '),' → logprob: -13.626261711120605
    7. ')).' → logprob: -16.251262664794922
    8. ').' → logprob: -16.501262664794922
    9. '))

' → logprob: -16.501262664794922
    10. ' ' → logprob: -16.626262664794922

Token 39: 'print' (ID: 1598)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.19267287850379944
    2. '
' → logprob: -1.942672848701477
    3. 'print' → logprob: -4.1926727294921875
    4. ')' → logprob: -5.0676727294921875
    5. ' for' → logprob: -5.1926727294921875
    6. '\n' → logprob: -5.9426727294921875
    7. '<|end|>' → logprob: -7.0676727294921875
    8. ')
' → logprob: -8.067672729492188
    9. '(
' → logprob: -8.692672729492188
    10. '[' → logprob: -8.942672729492188

Token 40: '(sum' (ID: 45528)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6935946345329285
    2. '(counter' → logprob: -0.6935946345329285
    3. '(max' → logprob: -8.193594932556152
    4. '(sum' → logprob: -10.193594932556152
    5. '('' → logprob: -10.318594932556152
    6. '((' → logprob: -10.943594932556152
    7. '(list' → logprob: -11.068594932556152
    8. '(C' → logprob: -11.193594932556152
    9. '(len' → logprob: -11.318594932556152
    10. '("("' → logprob: -11.693594932556152

Token 41: '(v' (ID: 6932)
  Prédit: '(counter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(counter' → logprob: -0.5158374905586243
    2. '(' → logprob: -1.0158374309539795
    3. '(v' → logprob: -4.265837669372559
    4. '(c' → logprob: -4.515837669372559
    5. '(value' → logprob: -5.390837669372559
    6. '(x' → logprob: -5.765837669372559
    7. '(i' → logprob: -5.890837669372559
    8. '((' → logprob: -6.265837669372559
    9. '([' → logprob: -6.640837669372559
    10. '(map' → logprob: -7.765837669372559

Token 42: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.49628525972366333
    2. '*(' → logprob: -0.9962852597236633
    3. '*' → logprob: -4.121285438537598
    4. '*v' → logprob: -6.121285438537598
    5. '-' → logprob: -7.246285438537598
    6. '(v' → logprob: -7.371285438537598
    7. '**' → logprob: -7.496285438537598
    8. ' for' → logprob: -7.746285438537598
    9. ' -' → logprob: -7.871285438537598
    10. ' *(' → logprob: -8.371285438537598

Token 43: ' (' (ID: 350)
  Prédit: '(v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(v' → logprob: -0.004619645420461893
    2. ' (' → logprob: -5.629619598388672
    3. '(' → logprob: -7.379619598388672
    4. 'v' → logprob: -8.254619598388672
    5. '*(' → logprob: -9.254619598388672
    6. '(k' → logprob: -11.004619598388672
    7. '(n' → logprob: -11.629619598388672
    8. '2' → logprob: -13.129619598388672
    9. ' v' → logprob: -13.629619598388672
    10. '*v' → logprob: -13.879619598388672

Token 44: 'v' (ID: 85)
  Prédit: '(v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(v' → logprob: -0.6328391432762146
    2. 'v' → logprob: -0.7578391432762146
    3. ' v' → logprob: -8.63283920288086
    4. ' (' → logprob: -10.50783920288086
    5. '	v' → logprob: -11.13283920288086
    6. '(' → logprob: -12.00783920288086
    7. '-' → logprob: -12.63283920288086
    8. '[v' → logprob: -13.00783920288086
    9. ' ' → logprob: -13.25783920288086
    10. 'k' → logprob: -13.63283920288086

Token 45: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.28116828203201294
    2. ' -' → logprob: -1.4061682224273682
    3. ' ' → logprob: -11.156167984008789
    4. '1' → logprob: -13.531167984008789
    5. '–' → logprob: -14.656167984008789
    6. '−' → logprob: -15.031167984008789
    7. '```' → logprob: -15.281167984008789
    8. ' ' → logprob: -15.406167984008789
    9. ' v' → logprob: -15.781167984008789
    10. '<|end|>' → logprob: -15.906167984008789

Token 46: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.002808798337355256
    2. ' ' → logprob: -5.877808570861816
    3. ')' → logprob: -14.315308570861816
    4. '<|end|>' → logprob: -14.377808570861816
    5. '2' → logprob: -14.940308570861816
    6. '```' → logprob: -15.315308570861816
    7. '  ' → logprob: -15.440308570861816
    8. '１' → logprob: -15.752808570861816
    9. '   ' → logprob: -15.752808570861816
    10. '۱' → logprob: -16.065309524536133

Token 47: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.6047699318733066e-05
    2. ' ' → logprob: -11.125016212463379
    3. '2' → logprob: -15.062516212463379
    4. ')' → logprob: -15.937516212463379
    5. '```' → logprob: -16.375015258789062
    6. '１' → logprob: -16.687515258789062
    7. '<|end|>' → logprob: -16.687515258789062
    8. 'from' → logprob: -16.812515258789062
    9. 'v' → logprob: -16.937515258789062
    10. '0' → logprob: -17.375015258789062

Token 48: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.29809340834617615
    2. '//' → logprob: -2.173093318939209
    3. ' //' → logprob: -2.173093318939209
    4. ')//' → logprob: -3.548093318939209
    5. ' )' → logprob: -6.673093318939209
    6. '))' → logprob: -10.423093795776367
    7. ' ' → logprob: -10.798093795776367
    8. '```' → logprob: -11.923093795776367
    9. ')))' → logprob: -12.298093795776367
    10. ']' → logprob: -13.548093795776367

Token 49: ' //' (ID: 602)
  Prédit: ' //'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.14343497157096863
    2. '//' → logprob: -2.018435001373291
    3. ')' → logprob: -7.393435001373291
    4. ')//' → logprob: -9.018434524536133
    5. ' ' → logprob: -11.393434524536133
    6. ' )' → logprob: -12.268434524536133
    7. '```' → logprob: -13.018434524536133
    8. '))' → logprob: -13.768434524536133
    9. '/' → logprob: -14.143434524536133
    10. '`' → logprob: -14.393434524536133

Token 50: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.00038074489566497505
    2. ' ' → logprob: -7.875380516052246
    3. ')' → logprob: -15.625380516052246
    4. '1' → logprob: -16.125381469726562
    5. '```' → logprob: -16.187881469726562
    6. '4' → logprob: -16.500381469726562
    7. '   ' → logprob: -16.875381469726562
    8. '.' → logprob: -17.437881469726562
    9. '۲' → logprob: -17.875381469726562
    10. '  ' → logprob: -17.937881469726562

Token 51: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -3.7697225252486533e-06
    2. ' ' → logprob: -12.500003814697266
    3. '1' → logprob: -17.625003814697266
    4. '```' → logprob: -17.625003814697266
    5. ')' → logprob: -18.437503814697266
    6. '۲' → logprob: -18.687503814697266
    7. '   ' → logprob: -18.937503814697266
    8. '4' → logprob: -19.312503814697266
    9. '२' → logprob: -19.562503814697266
    10. '٢' → logprob: -19.625003814697266

Token 52: ' for' (ID: 395)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.07894530892372131
    2. ')' → logprob: -2.5789453983306885
    3. ')))' → logprob: -10.45394515991211
    4. ' ))' → logprob: -11.07894515991211
    5. 'for' → logprob: -12.32894515991211
    6. ' for' → logprob: -13.20394515991211
    7. '))
' → logprob: -13.82894515991211
    8. ' ' → logprob: -14.20394515991211
    9. ' )' → logprob: -14.45394515991211
    10. '),' → logprob: -14.57894515991211

Token 53: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.4742669463157654
    2. ' v' → logprob: -0.9742669463157654
    3. 'counter' → logprob: -9.22426700592041
    4. ' counter' → logprob: -9.47426700592041
    5. '	v' → logprob: -11.97426700592041
    6. ')v' → logprob: -12.59926700592041
    7. '_v' → logprob: -13.47426700592041
    8. 'value' → logprob: -13.59926700592041
    9. ',v' → logprob: -14.59926700592041
    10. ')' → logprob: -14.84926700592041

Token 54: ' in' (ID: 306)
  Prédit: ' counter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' counter' → logprob: -0.0059836627915501595
    2. 'counter' → logprob: -5.130983829498291
    3. '(counter' → logprob: -11.005983352661133
    4. ' values' → logprob: -11.005983352661133
    5. '<|end|>' → logprob: -12.005983352661133
    6. '[counter' → logprob: -12.380983352661133
    7. '	counter' → logprob: -12.380983352661133
    8. ' in' → logprob: -13.130983352661133
    9. ')' → logprob: -13.380983352661133
    10. '_counter' → logprob: -13.755983352661133

Token 55: ' counter' (ID: 9446)
  Prédit: ' counter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' counter' → logprob: -0.02324594371020794
    2. 'counter' → logprob: -3.7732460498809814
    3. '	counter' → logprob: -15.273245811462402
    4. '[counter' → logprob: -15.898245811462402
    5. '_counter' → logprob: -16.52324676513672
    6. '(counter' → logprob: -16.89824676513672
    7. '.counter' → logprob: -17.64824676513672
    8. ' Counter' → logprob: -18.77324676513672
    9. 'Counter' → logprob: -19.27324676513672
    10. 'ounter' → logprob: -20.02324676513672

Token 56: '.values' (ID: 20422)
  Prédit: '.values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.values' → logprob: -0.00029232146334834397
    2. '.' → logprob: -8.250292778015137
    3. 'values' → logprob: -11.375292778015137
    4. ' .' → logprob: -11.625292778015137
    5. '.value' → logprob: -12.250292778015137
    6. ')' → logprob: -12.875292778015137
    7. '.Values' → logprob: -13.625292778015137
    8. ' values' → logprob: -13.625292778015137
    9. ').' → logprob: -14.375292778015137
    10. '))' → logprob: -16.87529182434082

Token 57: '()))' (ID: 16829)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.011377893388271332
    2. '()))' → logprob: -4.636377811431885
    3. ')' → logprob: -6.511377811431885
    4. '()' → logprob: -9.386378288269043
    5. '())' → logprob: -10.011378288269043
    6. ')))' → logprob: -12.761378288269043
    7. '))
' → logprob: -14.261378288269043
    8. ' ))' → logprob: -14.261378288269043
    9. '(' → logprob: -15.261378288269043
    10. '   ' → logprob: -15.636378288269043


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 55
Tokens correctement prédits (1ère position, stricte): 17
Tokens correctement prédits (1ère position, avec adaptation): 17
Tokens correctement prédits (top 10): 44
Précision stricte (1ère position): 30.91%
Précision adaptée (1ère position): 30.91%
Précision (top 10): 80.00%
================================================================================
