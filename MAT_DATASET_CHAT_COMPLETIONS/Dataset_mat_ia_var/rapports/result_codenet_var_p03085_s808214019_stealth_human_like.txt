================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:04:45
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def lire_input():
    # Tiens, on va juste lire ce qui vient... rien de plus
    userinput = input()
    return userinput

def cherche(b):
    # Juste une map bidon
    d = {'A':'T',  'T':'A', 'G':'C','C':'G'}
    if b in d:
        return d[b]
    # Hmmm, faudrait gérer l'erreur mais bon...
    return None

if __name__ == "__main__":
    val = lire_input()
    # c'est parti
    resultat = cherche(val)
    print(resultat)  # À voir si c'est None si la lettre est mauvaise mais bon...
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' lire' (ID: 46082)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0005622077151201665
    2. '_' → logprob: -7.8755621910095215
    3. ''' → logprob: -9.87556266784668
    4. ' (' → logprob: -10.37556266784668
    5. '"' → logprob: -10.50056266784668
    6. '():' → logprob: -11.00056266784668
    7. '(_' → logprob: -11.87556266784668
    8. '()' → logprob: -12.12556266784668
    9. '```' → logprob: -12.12556266784668
    10. '(
' → logprob: -12.12556266784668

Token 4: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.27894726395606995
    2. '\' → logprob: -2.153947353363037
    3. '(' → logprob: -3.278947353363037
    4. '\n' → logprob: -3.903947353363037
    5. '()' → logprob: -4.153947353363037
    6. '   ' → logprob: -4.278947353363037
    7. ':' → logprob: -4.778947353363037
    8. '    
' → logprob: -5.278947353363037
    9. '``' → logprob: -5.403947353363037
    10. ' 
' → logprob: -5.653947353363037

Token 5: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -1.4026647806167603
    2. 'r' → logprob: -1.7776647806167603
    3. 'user' → logprob: -1.7776647806167603
    4. 'n' → logprob: -2.4026646614074707
    5. 'i' → logprob: -2.6526646614074707
    6. 'x' → logprob: -2.7776646614074707
    7. 'input' → logprob: -3.0276646614074707
    8. 'u' → logprob: -3.2776646614074707
    9. 'v' → logprob: -3.9026646614074707
    10. 't' → logprob: -4.152664661407471

Token 6: ' Ti' (ID: 21833)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6967505812644958
    2. ' ' → logprob: -1.1967506408691406
    3. 'pass' → logprob: -2.5717506408691406
    4. ' pass' → logprob: -3.5717506408691406
    5. 'input' → logprob: -3.9467506408691406
    6. 'return' → logprob: -4.071750640869141
    7. '    ' → logprob: -4.446750640869141
    8. '  ' → logprob: -4.571750640869141
    9. ' input' → logprob: -4.571750640869141
    10. ' return' → logprob: -4.821750640869141

Token 7: 'ens' (ID: 696)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'm' → logprob: -1.1016936302185059
    2. '   ' → logprob: -1.1016936302185059
    3. 'mp' → logprob: -2.101693630218506
    4. 'p' → logprob: -3.101693630218506
    5. 'l' → logprob: -3.601693630218506
    6. '       ' → logprob: -3.851693630218506
    7. 'r' → logprob: -4.101693630218506
    8. 'me' → logprob: -4.226693630218506
    9. 'er' → logprob: -4.476693630218506
    10. '.py' → logprob: -4.976693630218506

Token 8: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4599742591381073
    2. ' ' → logprob: -1.3349742889404297
    3. '  ' → logprob: -3.4599742889404297
    4. '    ' → logprob: -4.33497428894043
    5. ',' → logprob: -4.70997428894043
    6. '(' → logprob: -5.08497428894043
    7. ' ' → logprob: -5.08497428894043
    8. 'return' → logprob: -5.20997428894043
    9. ' return' → logprob: -5.45997428894043
    10. ':' → logprob: -5.70997428894043

Token 9: ' on' (ID: 402)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5067453384399414
    2. '   ' → logprob: -1.7567453384399414
    3. '  ' → logprob: -2.8817453384399414
    4. ' ' → logprob: -3.0067453384399414
    5. 'return' → logprob: -3.8817453384399414
    6. ' une' → logprob: -3.8817453384399414
    7. ' un' → logprob: -4.381745338439941
    8. ' return' → logprob: -4.381745338439941
    9. '    ' → logprob: -4.506745338439941
    10. 'une' → logprob: -4.881745338439941

Token 10: ' va' (ID: 3423)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7236317992210388
    2. '   ' → logprob: -1.5986318588256836
    3. ' n' → logprob: -2.4736318588256836
    4. 's' → logprob: -3.2236318588256836
    5. ' a' → logprob: -3.8486318588256836
    6. 'r' → logprob: -4.098631858825684
    7. '  ' → logprob: -4.098631858825684
    8. 'n' → logprob: -4.223631858825684
    9. ' return' → logprob: -4.223631858825684
    10. ' s' → logprob: -4.348631858825684

Token 11: ' juste' (ID: 31553)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.7417557835578918
    2. '   ' → logprob: -0.8667557835578918
    3. ' ' → logprob: -3.741755723953247
    4. 'return' → logprob: -3.866755723953247
    5. ' lire' → logprob: -4.366755962371826
    6. ' retourner' → logprob: -5.366755962371826
    7. ' récupérer' → logprob: -5.491755962371826
    8. 'r' → logprob: -5.741755962371826
    9. ' recuper' → logprob: -5.741755962371826
    10. ' utiliser' → logprob: -5.866755962371826

Token 12: ' lire' (ID: 46082)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.8337653279304504
    2. '   ' → logprob: -1.2087652683258057
    3. ' retourner' → logprob: -2.3337652683258057
    4. ' lire' → logprob: -3.2087652683258057
    5. 'return' → logprob: -3.5837652683258057
    6. ' ' → logprob: -3.8337652683258057
    7. 'r' → logprob: -4.083765506744385
    8. ' faire' → logprob: -4.333765506744385
    9. ' récupérer' → logprob: -4.333765506744385
    10. ' recop' → logprob: -5.083765506744385

Token 13: ' ce' (ID: 2357)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8275893330574036
    2. ' une' → logprob: -2.077589273452759
    3. '()' → logprob: -2.327589273452759
    4. '(' → logprob: -2.452589273452759
    5. '   ' → logprob: -2.827589273452759
    6. ' un' → logprob: -3.077589273452759
    7. '_' → logprob: -3.452589273452759
    8. ' la' → logprob: -3.577589273452759
    9. 'une' → logprob: -3.827589273452759
    10. 'l' → logprob: -3.952589273452759

Token 14: ' qui' (ID: 2780)
  Prédit: ' que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.41626936197280884
    2. ' ' → logprob: -2.166269302368164
    3. '_' → logprob: -2.666269302368164
    4. ' qui' → logprob: -2.916269302368164
    5. '   ' → logprob: -3.666269302368164
    6. ' input' → logprob: -3.791269302368164
    7. 'qui' → logprob: -4.291269302368164
    8. 'n' → logprob: -4.666269302368164
    9. 'input' → logprob: -5.041269302368164
    10. 'que' → logprob: -5.166269302368164

Token 15: ' vient' (ID: 40370)
  Prédit: ' est'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' est' → logprob: -1.042240023612976
    2. ' ' → logprob: -1.542240023612976
    3. '   ' → logprob: -1.667240023612976
    4. '_' → logprob: -2.2922401428222656
    5. 'est' → logprob: -2.5422401428222656
    6. 's' → logprob: -3.2922401428222656
    7. ' se' → logprob: -5.167240142822266
    8. ' s' → logprob: -5.667240142822266
    9. 'se' → logprob: -5.667240142822266
    10. '  ' → logprob: -6.292240142822266

Token 16: '...' (ID: 1008)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2439626306295395
    2. ' de' → logprob: -2.868962526321411
    3. ' ' → logprob: -3.243962526321411
    4. ',' → logprob: -4.11896276473999
    5. ':' → logprob: -4.24396276473999
    6. '    ' → logprob: -4.49396276473999
    7. ' du' → logprob: -4.49396276473999
    8. '.' → logprob: -4.61896276473999
    9. ' en' → logprob: -4.74396276473999
    10. '\' → logprob: -4.86896276473999

Token 17: ' rien' (ID: 23082)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.43019410967826843
    2. ' ' → logprob: -1.5551941394805908
    3. ' return' → logprob: -3.305194139480591
    4. '\n' → logprob: -3.555194139480591
    5. 'return' → logprob: -3.555194139480591
    6. '\' → logprob: -4.430193901062012
    7. '    ' → logprob: -5.305193901062012
    8. 'input' → logprob: -5.305193901062012
    9. '    
' → logprob: -5.430193901062012
    10. '  ' → logprob: -5.805193901062012

Token 18: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06935223937034607
    2. 'def' → logprob: -3.569352149963379
    3. '.' → logprob: -4.319352149963379
    4. ' ' → logprob: -5.444352149963379
    5. 'return' → logprob: -5.694352149963379
    6. '()' → logprob: -6.069352149963379
    7. ')' → logprob: -6.069352149963379
    8. ' return' → logprob: -6.069352149963379
    9. ',' → logprob: -6.319352149963379
    10. '...' → logprob: -6.569352149963379

Token 19: ' plus' (ID: 2932)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.5695008039474487
    2. 'sp' → logprob: -1.4445008039474487
    3. ' ' → logprob: -2.5695009231567383
    4. '```' → logprob: -3.0695009231567383
    5. ' rien' → logprob: -3.9445009231567383
    6. 'l' → logprob: -4.694500923156738
    7. 'bien' → logprob: -4.694500923156738
    8. 's' → logprob: -5.069500923156738
    9. ' sp' → logprob: -5.319500923156738
    10. 'special' → logprob: -5.569500923156738

Token 20: '
' (ID: 198)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.31427472829818726
    2. '   ' → logprob: -1.439274787902832
    3. '\' → logprob: -3.689274787902832
    4. ' ' → logprob: -6.564274787902832
    5. '    
' → logprob: -6.689274787902832
    6. '
' → logprob: -6.814274787902832
    7. '\r' → logprob: -7.439274787902832
    8. 'return' → logprob: -7.814274787902832
    9. '```' → logprob: -7.814274787902832
    10. '    ' → logprob: -7.939274787902832

Token 21: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03279976546764374
    2. ' ' → logprob: -4.40779972076416
    3. '\n' → logprob: -4.65779972076416
    4. 'return' → logprob: -5.78279972076416
    5. '    
' → logprob: -6.40779972076416
    6. '\' → logprob: -6.65779972076416
    7. ' return' → logprob: -6.90779972076416
    8. '    ' → logprob: -7.15779972076416
    9. '  ' → logprob: -7.53279972076416
    10. '```' → logprob: -7.53279972076416

Token 22: ' user' (ID: 1825)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.037240367382764816
    2. 'return' → logprob: -4.162240505218506
    3. ' ' → logprob: -4.412240505218506
    4. 'r' → logprob: -6.412240505218506
    5. ' return' → logprob: -6.662240505218506
    6. '    ' → logprob: -6.787240505218506
    7. '\n' → logprob: -7.162240505218506
    8. 'input' → logprob: -7.412240505218506
    9. '  ' → logprob: -7.537240505218506
    10. '```' → logprob: -7.537240505218506

Token 23: 'input' (ID: 2586)
  Prédit: '_input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.6038503646850586
    2. '_' → logprob: -0.9788503646850586
    3. ' =' → logprob: -3.4788503646850586
    4. 'input' → logprob: -4.353850364685059
    5. '   ' → logprob: -4.728850364685059
    6. '()' → logprob: -4.978850364685059
    7. '=' → logprob: -5.353850364685059
    8. 's' → logprob: -5.978850364685059
    9. '(' → logprob: -6.103850364685059
    10. ' ' → logprob: -6.228850364685059

Token 24: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.4017470180988312
    2. '=' → logprob: -1.2767469882965088
    3. ' =' → logprob: -3.401746988296509
    4. '(' → logprob: -5.151747226715088
    5. '.' → logprob: -5.276747226715088
    6. '()' → logprob: -5.401747226715088
    7. ',' → logprob: -7.026747226715088
    8. ')' → logprob: -7.026747226715088
    9. '[' → logprob: -8.15174674987793
    10. ' ' → logprob: -8.52674674987793

Token 25: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.04859157279133797
    2. 'input' → logprob: -3.0485916137695312
    3. '=input' → logprob: -13.298591613769531
    4. ' ' → logprob: -13.548591613769531
    5. ' raw' → logprob: -14.923591613769531
    6. '	input' → logprob: -15.173591613769531
    7. '(input' → logprob: -15.298591613769531
    8. ' ' → logprob: -16.04859161376953
    9. '<input' → logprob: -16.29859161376953
    10. '   ' → logprob: -17.17359161376953

Token 26: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.008138987235724926
    2. '()' → logprob: -4.883139133453369
    3. '("("' → logprob: -8.508138656616211
    4. '('' → logprob: -8.758138656616211
    5. '```' → logprob: -9.883138656616211
    6. '("")' → logprob: -10.508138656616211
    7. ' ' → logprob: -10.758138656616211
    8. '(`' → logprob: -11.133138656616211
    9. ' (' → logprob: -11.133138656616211
    10. '(
' → logprob: -11.758138656616211

Token 27: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.049214232712984085
    2. '    
' → logprob: -4.0492143630981445
    3. 'return' → logprob: -4.1742143630981445
    4. ' ' → logprob: -5.1742143630981445
    5. '\n' → logprob: -6.1742143630981445
    6. ' return' → logprob: -6.5492143630981445
    7. '\' → logprob: -6.6742143630981445
    8. '    ' → logprob: -6.9242143630981445
    9. '  
' → logprob: -7.1742143630981445
    10. ')' → logprob: -7.2992143630981445

Token 28: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.21609239280223846
    2. 'return' (adapté à ' return') → logprob: -2.091092348098755
    3. ' ' → logprob: -3.341092348098755
    4. ' return' → logprob: -3.966092348098755
    5. '    
' → logprob: -5.091092586517334
    6. '    ' → logprob: -6.341092586517334
    7. '  ' → logprob: -6.591092586517334
    8. '<|end|>' → logprob: -6.591092586517334
    9. '	return' → logprob: -6.716092586517334
    10. '\n' → logprob: -6.841092586517334

Token 29: ' user' (ID: 1825)
  Prédit: ' user'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' user' → logprob: -0.1289588063955307
    2. 'user' → logprob: -2.5039587020874023
    3. ' ' → logprob: -3.2539587020874023
    4. ' ' → logprob: -8.378958702087402
    5. '"user' → logprob: -8.753958702087402
    6. '  ' → logprob: -9.253958702087402
    7. ''user' → logprob: -10.503958702087402
    8. 'space' → logprob: -10.753958702087402
    9. '    ' → logprob: -10.878958702087402
    10. '	user' → logprob: -11.253958702087402

Token 30: 'input' (ID: 2586)
  Prédit: 'input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.7272809743881226
    2. 'put' → logprob: -0.9772809743881226
    3. 'p' → logprob: -1.9772809743881226
    4. 'i' → logprob: -6.477281093597412
    5. 'in' → logprob: -8.852280616760254
    6. 'n' → logprob: -9.477280616760254
    7. 'inp' → logprob: -9.852280616760254
    8. 'pu' → logprob: -10.227280616760254
    9. 'u' → logprob: -10.727280616760254
    10. 't' → logprob: -10.977280616760254

Token 31: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -1.538719654083252
    2. '\n' → logprob: -1.538719654083252
    3. ' ' → logprob: -1.663719654083252
    4. '.' → logprob: -2.538719654083252
    5. '<|end|>' → logprob: -2.663719654083252
    6. '
' → logprob: -2.913719654083252
    7. '\' → logprob: -3.288719654083252
    8. '' → logprob: -3.288719654083252
    9. '```' → logprob: -3.788719654083252
    10. 'newline' → logprob: -4.038719654083252

Token 32: 'def' (ID: 1314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -1.424129843711853
    2. ' ' → logprob: -1.549129843711853
    3. '#' → logprob: -2.0491299629211426
    4. '<|end|>' → logprob: -2.0491299629211426
    5. '\n' → logprob: -2.4241299629211426
    6. '\' → logprob: -3.0491299629211426
    7. '.' → logprob: -3.5491299629211426
    8. '```' → logprob: -3.6741299629211426
    9. '' → logprob: -4.174129962921143
    10. ')' → logprob: -4.424129962921143

Token 33: ' cherche' (ID: 52345)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.930062472820282
    2. ' lire' → logprob: -1.9300625324249268
    3. ' ' → logprob: -2.3050625324249268
    4. ' e' → logprob: -3.0550625324249268
    5. ' space' → logprob: -3.0550625324249268
    6. ' ' → logprob: -3.0550625324249268
    7. ' espace' → logprob: -3.5550625324249268
    8. ' l' → logprob: -3.5550625324249268
    9. ' test' → logprob: -4.055062294006348
    10. ' read' → logprob: -4.180062294006348

Token 34: '(b' (ID: 3229)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0008915711659938097
    2. '_m' → logprob: -8.00089168548584
    3. '(' → logprob: -8.25089168548584
    4. '_input' → logprob: -9.50089168548584
    5. '_a' → logprob: -10.25089168548584
    6. '_l' → logprob: -10.87589168548584
    7. 's' → logprob: -11.00089168548584
    8. '_c' → logprob: -11.37589168548584
    9. '_parent' → logprob: -11.37589168548584
    10. '_(' → logprob: -12.12589168548584

Token 35: '):
' (ID: 1883)
  Prédit: 'o'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'o' → logprob: -0.8144921660423279
    2. 'ase' → logprob: -1.6894922256469727
    3. 'er' → logprob: -2.5644922256469727
    4. 'r' → logprob: -3.3144922256469727
    5. 'ibl' → logprob: -3.4394922256469727
    6. 'a' → logprob: -3.5644922256469727
    7. 'e' → logprob: -3.6894922256469727
    8. 'ien' → logprob: -3.6894922256469727
    9. 'on' → logprob: -4.189492225646973
    10. 'ibli' → logprob: -4.189492225646973

Token 36: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.19913050532341003
    2. '[' → logprob: -3.3241305351257324
    3. 'b' → logprob: -3.3241305351257324
    4. ')' → logprob: -3.6991305351257324
    5. '(' → logprob: -4.199130535125732
    6. '       ' → logprob: -4.449130535125732
    7. '    ' → logprob: -4.574130535125732
    8. ' ' → logprob: -4.574130535125732
    9. 'r' → logprob: -5.074130535125732
    10. 'u' → logprob: -5.449130535125732

Token 37: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2564758360385895
    2. ' for' → logprob: -1.881475806236267
    3. 'for' → logprob: -3.3814759254455566
    4. ' if' → logprob: -4.631475925445557
    5. 'b' → logprob: -5.756475925445557
    6. '[' → logprob: -5.756475925445557
    7. 'a' → logprob: -5.881475925445557
    8. '    ' → logprob: -6.006475925445557
    9. 'r' → logprob: -6.131475925445557
    10. ' ' → logprob: -6.631475925445557

Token 38: ' Just' (ID: 6214)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6422795057296753
    2. '   ' → logprob: -1.3922795057296753
    3. 'i' → logprob: -2.767279624938965
    4. 'r' → logprob: -3.017279624938965
    5. 'e' → logprob: -4.767279624938965
    6. ' for' → logprob: -4.892279624938965
    7. 'a' → logprob: -4.892279624938965
    8. ''' → logprob: -5.017279624938965
    9. 'u' → logprob: -5.142279624938965
    10. 'for' → logprob: -5.142279624938965

Token 39: 'e' (ID: 68)
  Prédit: 'e'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.2630225121974945
    2. 'if' → logprob: -2.0130224227905273
    3. '   ' → logprob: -3.0130224227905273
    4. ' if' → logprob: -4.263022422790527
    5. 'def' → logprob: -4.513022422790527
    6. 'r' → logprob: -5.138022422790527
    7. 're' → logprob: -5.638022422790527
    8. 'a' → logprob: -6.513022422790527
    9. ' b' → logprob: -6.763022422790527
    10. 'b' → logprob: -6.763022422790527

Token 40: ' une' (ID: 2463)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.33314526081085205
    2. ' for' → logprob: -2.3331451416015625
    3. ' if' → logprob: -2.4581451416015625
    4. 'for' → logprob: -3.8331451416015625
    5. ' return' → logprob: -4.2081451416015625
    6. ' ' → logprob: -4.3331451416015625
    7. 'if' → logprob: -4.4581451416015625
    8. 'b' → logprob: -5.2081451416015625
    9. '  ' → logprob: -5.5831451416015625
    10. ' a' → logprob: -5.7081451416015625

Token 41: ' map' (ID: 4014)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.969280481338501
    2. '   ' → logprob: -1.094280481338501
    3. ' ' → logprob: -2.344280481338501
    4. ' if' → logprob: -3.594280481338501
    5. ' return' → logprob: -3.594280481338501
    6. 'for' → logprob: -3.719280481338501
    7. ' ligne' → logprob: -4.344280242919922
    8. ' chaine' → logprob: -4.344280242919922
    9. 'r' → logprob: -5.094280242919922
    10. ' b' → logprob: -5.344280242919922

Token 42: ' bid' (ID: 16023)
  Prédit: '{'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '{' → logprob: -0.639536440372467
    2. ' =' → logprob: -1.1395363807678223
    3. '   ' → logprob: -2.7645363807678223
    4. ' {' → logprob: -3.5145363807678223
    5. 'def' → logprob: -4.389536380767822
    6. '(' → logprob: -4.389536380767822
    7. '[' → logprob: -5.389536380767822
    8. '(
' → logprob: -5.389536380767822
    9. 'a' → logprob: -5.764536380767822
    10. ' ' → logprob: -6.139536380767822

Token 43: 'on' (ID: 263)
  Prédit: 'irection'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'irection' → logprob: -1.1055307388305664
    2. '{' → logprob: -1.4805307388305664
    3. 'irectional' → logprob: -1.8555307388305664
    4. 'e' → logprob: -2.3555307388305664
    5. 'rection' → logprob: -2.3555307388305664
    6. 'ection' → logprob: -4.355530738830566
    7. 'ef' → logprob: -4.480530738830566
    8. 'def' → logprob: -4.605530738830566
    9. '{}' → logprob: -4.730530738830566
    10. '{'' → logprob: -4.855530738830566

Token 44: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7060829997062683
    2. ':' → logprob: -1.081083059310913
    3. ' :' → logprob: -2.956083059310913
    4. '{' → logprob: -3.581083059310913
    5. '[' → logprob: -3.581083059310913
    6. '(' → logprob: -4.206082820892334
    7. 'def' → logprob: -4.581082820892334
    8. ' ' → logprob: -4.956082820892334
    9. ' =' → logprob: -5.706082820892334
    10. ',' → logprob: -5.831082820892334

Token 45: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.2295074462890625
    2. ' =' → logprob: -1.4795074462890625
    3. '{' → logprob: -1.8545074462890625
    4. ':' → logprob: -2.2295074462890625
    5. '[' → logprob: -2.2295074462890625
    6. ' ' → logprob: -2.9795074462890625
    7. 'def' → logprob: -4.4795074462890625
    8. ' {' → logprob: -4.7295074462890625
    9. '=' → logprob: -5.2295074462890625
    10. 'd' → logprob: -5.3545074462890625

Token 46: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.9073712229728699
    2. 'd' (adapté à ' d') → logprob: -1.2823712825775146
    3. 'map' → logprob: -2.9073712825775146
    4. 'mapping' → logprob: -2.9073712825775146
    5. ' return' → logprob: -3.1573712825775146
    6. 'm' → logprob: -3.2823712825775146
    7. ' mapping' → logprob: -3.5323712825775146
    8. ' map' → logprob: -4.0323710441589355
    9. 'data' → logprob: -4.6573710441589355
    10. 'return' → logprob: -4.9073710441589355

Token 47: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5608170032501221
    2. 'e' → logprob: -1.435817003250122
    3. 'i' → logprob: -1.935817003250122
    4. '=' → logprob: -3.310817003250122
    5. 'iction' → logprob: -6.435816764831543
    6. 'o' → logprob: -6.560816764831543
    7. 'é' → logprob: -6.685816764831543
    8. 'ic' → logprob: -6.685816764831543
    9. 'a' → logprob: -6.935816764831543
    10. 'ict' → logprob: -7.310816764831543

Token 48: ' {'' (ID: 11881)
  Prédit: ' {'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' {' → logprob: -0.08603637665510178
    2. '{' → logprob: -2.711036443710327
    3. ' {'' → logprob: -4.836036205291748
    4. ' {"' → logprob: -5.836036205291748
    5. ' {}' → logprob: -6.086036205291748
    6. '{}' → logprob: -6.711036205291748
    7. '{"' → logprob: -7.211036205291748
    8. '{'' → logprob: -7.461036205291748
    9. ' {
' → logprob: -8.461036682128906
    10. ' ' → logprob: -10.336036682128906

Token 49: 'A' (ID: 32)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.08781005442142487
    2. 'p' → logprob: -4.212810039520264
    3. 'apple' → logprob: -4.212810039520264
    4. 'b' → logprob: -4.962810039520264
    5. 'bonjour' → logprob: -5.087810039520264
    6. 'foo' → logprob: -5.462810039520264
    7. 'chat' → logprob: -5.837810039520264
    8. '1' → logprob: -6.087810039520264
    9. 'c' → logprob: -6.087810039520264
    10. 'python' → logprob: -6.212810039520264

Token 50: '':'' (ID: 22947)
  Prédit: '':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.05659356340765953
    2. ''' → logprob: -3.306593656539917
    3. 'B' → logprob: -5.431593418121338
    4. '1' → logprob: -5.931593418121338
    5. 'r' → logprob: -6.056593418121338
    6. 'l' → logprob: -6.806593418121338
    7. '':'' → logprob: -7.181593418121338
    8. ' ':' → logprob: -7.306593418121338
    9. 'A' → logprob: -7.431593418121338
    10. 'BC' → logprob: -7.431593418121338

Token 51: 'T' (ID: 51)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.9901599884033203
    2. 'a' → logprob: -1.3651599884033203
    3. 'B' → logprob: -2.4901599884033203
    4. '4' → logprob: -2.8651599884033203
    5. '0' → logprob: -3.1151599884033203
    6. 'A' → logprob: -3.2401599884033203
    7. 'Z' → logprob: -3.4901599884033203
    8. 'T' → logprob: -3.7401599884033203
    9. 'apple' → logprob: -4.49015998840332
    10. 'Apple' → logprob: -4.61515998840332

Token 52: '',' (ID: 787)
  Prédit: '','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '',' → logprob: -0.13290686905384064
    2. '','' → logprob: -2.132906913757324
    3. ''' → logprob: -5.632906913757324
    4. ''}' → logprob: -6.382906913757324
    5. '',
' → logprob: -8.132906913757324
    6. 'G' → logprob: -8.882906913757324
    7. '',"' → logprob: -9.257906913757324
    8. 'A' → logprob: -10.007906913757324
    9. 'C' → logprob: -10.632906913757324
    10. '',
' → logprob: -11.007906913757324

Token 53: ' ' (ID: 220)
  Prédit: ' ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' '' → logprob: -0.7500858306884766
    2. ''' → logprob: -0.8750858306884766
    3. ''T' → logprob: -2.5000858306884766
    4. ''C' → logprob: -3.6250858306884766
    5. '   ' → logprob: -7.125085830688477
    6. '    ' → logprob: -8.000085830688477
    7. ' ' → logprob: -8.250085830688477
    8. ''GC' → logprob: -9.000085830688477
    9. '       ' → logprob: -9.125085830688477
    10. ''U' → logprob: -9.125085830688477

Token 54: ' '' (ID: 461)
  Prédit: ''T'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''T' → logprob: -0.23398174345493317
    2. ''' → logprob: -2.1089818477630615
    3. ''C' → logprob: -2.4839818477630615
    4. ' '' → logprob: -5.733981609344482
    5. ''U' → logprob: -8.35898208618164
    6. '   ' → logprob: -9.10898208618164
    7. ''A' → logprob: -9.10898208618164
    8. ' ' → logprob: -9.85898208618164
    9. ''D' → logprob: -10.85898208618164
    10. 'T' → logprob: -11.23398208618164

Token 55: 'T' (ID: 51)
  Prédit: 'T'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'T' → logprob: -0.04858703166246414
    2. 'C' → logprob: -3.6735870838165283
    3. 'G' → logprob: -4.423586845397949
    4. 'B' → logprob: -4.923586845397949
    5. 'a' → logprob: -6.548586845397949
    6. 'U' → logprob: -7.173586845397949
    7. 'Z' → logprob: -8.54858684539795
    8. 'E' → logprob: -9.79858684539795
    9. ''' → logprob: -9.79858684539795
    10. ' T' → logprob: -10.42358684539795

Token 56: '':'' (ID: 22947)
  Prédit: '':''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':'' → logprob: -0.3412339389324188
    2. '':' → logprob: -1.3412339687347412
    3. ''' → logprob: -3.591233968734741
    4. ''A' → logprob: -11.34123420715332
    5. ' ':' → logprob: -13.21623420715332
    6. ':' → logprob: -13.46623420715332
    7. '':''' → logprob: -13.46623420715332
    8. ''>' → logprob: -14.21623420715332
    9. ' '' → logprob: -14.21623420715332
    10. ' ':'' → logprob: -14.59123420715332

Token 57: 'A' (ID: 32)
  Prédit: 'A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.0007575734634883702
    2. ''A' → logprob: -7.250757694244385
    3. ' A' → logprob: -10.750757217407227
    4. 'a' → logprob: -11.250757217407227
    5. ''' → logprob: -12.125757217407227
    6. ' ' → logprob: -13.125757217407227
    7. '"A' → logprob: -13.875757217407227
    8. '	A' → logprob: -14.000757217407227
    9. ''a' → logprob: -14.625757217407227
    10. '   ' → logprob: -14.875757217407227

Token 58: '',' (ID: 787)
  Prédit: '','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '',' → logprob: -0.285808801651001
    2. ',' → logprob: -1.410808801651001
    3. ','' → logprob: -6.410808563232422
    4. '','' → logprob: -6.660808563232422
    5. '}' → logprob: -7.535808563232422
    6. ',
' → logprob: -7.785808563232422
    7. ''' → logprob: -8.035808563232422
    8. ''}' → logprob: -8.535808563232422
    9. '',
' → logprob: -9.035808563232422
    10. ' ,' → logprob: -9.535808563232422

Token 59: ' '' (ID: 461)
  Prédit: ' ''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' '' → logprob: -0.62505042552948
    2. ''' → logprob: -1.25005042552948
    3. ''C' → logprob: -1.87505042552948
    4. '   ' → logprob: -4.7500505447387695
    5. '       ' → logprob: -5.5000505447387695
    6. ' ' → logprob: -5.5000505447387695
    7. ',' → logprob: -6.1250505447387695
    8. '    ' → logprob: -7.0000505447387695
    9. ''S' → logprob: -7.1250505447387695
    10. '',' → logprob: -7.5000505447387695

Token 60: 'G' (ID: 38)
  Prédit: 'C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.6932209134101868
    2. 'G' → logprob: -0.6932209134101868
    3. ' C' → logprob: -11.068221092224121
    4. ''C' → logprob: -11.068221092224121
    5. ' G' → logprob: -11.443221092224121
    6. 'U' → logprob: -11.943221092224121
    7. 'A' → logprob: -12.068221092224121
    8. ''' → logprob: -12.693221092224121
    9. ' ' → logprob: -12.943221092224121
    10. 'E' → logprob: -13.630721092224121

Token 61: '':'' (ID: 22947)
  Prédit: '':''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':'' → logprob: -0.0020318960305303335
    2. '':' → logprob: -6.2520318031311035
    3. ''' → logprob: -9.252032279968262
    4. ''C' → logprob: -12.627032279968262
    5. ' ':'' → logprob: -13.502032279968262
    6. 'C' → logprob: -13.752032279968262
    7. '':''' → logprob: -14.127032279968262
    8. ':'' → logprob: -14.502032279968262
    9. ':' → logprob: -15.252032279968262
    10. ' ':' → logprob: -16.877031326293945

Token 62: 'C' (ID: 34)
  Prédit: 'C'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.20157501101493835
    2. ''C' → logprob: -1.7015750408172607
    3. ''' → logprob: -8.82657527923584
    4. ' C' → logprob: -11.45157527923584
    5. ' '' → logprob: -13.20157527923584
    6. '"C' → logprob: -13.45157527923584
    7. '	C' → logprob: -15.20157527923584
    8. ''GC' → logprob: -15.70157527923584
    9. '>C' → logprob: -16.201574325561523
    10. '')' → logprob: -16.326574325561523

Token 63: '','' (ID: 4074)
  Prédit: '','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '',' → logprob: -0.006067444570362568
    2. ''' → logprob: -5.506067276000977
    3. ''}' → logprob: -6.756067276000977
    4. '','' → logprob: -7.881067276000977
    5. '}' → logprob: -8.631067276000977
    6. ',' → logprob: -8.631067276000977
    7. '',
' → logprob: -10.131067276000977
    8. ' ',' → logprob: -11.131067276000977
    9. ','' → logprob: -11.506067276000977
    10. ' '' → logprob: -12.381067276000977

Token 64: 'C' (ID: 34)
  Prédit: 'C'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.00016325322212651372
    2. ''C' → logprob: -9.000163078308105
    3. ' C' → logprob: -10.750163078308105
    4. ''' → logprob: -11.250163078308105
    5. 'G' → logprob: -12.500163078308105
    6. ' '' → logprob: -15.125163078308105
    7. ' ' → logprob: -15.500163078308105
    8. '"C' → logprob: -15.750163078308105
    9. 'c' → logprob: -16.250164031982422
    10. ')' → logprob: -16.250164031982422

Token 65: '':'' (ID: 22947)
  Prédit: '':''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':'' → logprob: -0.018673550337553024
    2. '':' → logprob: -4.018673419952393
    3. ''' → logprob: -7.643673419952393
    4. ':'' → logprob: -10.76867389678955
    5. '':''' → logprob: -10.89367389678955
    6. ':' → logprob: -13.14367389678955
    7. ' ':'' → logprob: -13.26867389678955
    8. ' ':' → logprob: -14.89367389678955
    9. ''}' → logprob: -15.01867389678955
    10. '":"' → logprob: -15.89367389678955

Token 66: 'G' (ID: 38)
  Prédit: 'G'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'G' → logprob: -0.0006307095172815025
    2. ''' → logprob: -7.375630855560303
    3. ' G' → logprob: -13.000630378723145
    4. ''g' → logprob: -14.000630378723145
    5. 'g' → logprob: -14.750630378723145
    6. ''}' → logprob: -15.125630378723145
    7. '')' → logprob: -16.12563133239746
    8. '"G' → logprob: -16.37563133239746
    9. ''GC' → logprob: -16.75063133239746
    10. ')' → logprob: -16.87563133239746

Token 67: ''}
' (ID: 32701)
  Prédit: ''}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''}' → logprob: -0.06306881457567215
    2. '}' → logprob: -2.8130688667297363
    3. ''' → logprob: -6.938068866729736
    4. '',' → logprob: -9.313068389892578
    5. ' }' → logprob: -11.313068389892578
    6. '']' → logprob: -11.563068389892578
    7. ''}
' → logprob: -12.063068389892578
    8. ' '}' → logprob: -12.313068389892578
    9. '}'' → logprob: -12.438068389892578
    10. '"}' → logprob: -14.188068389892578

Token 68: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.021920781582593918
    2. ' ' → logprob: -5.146920680999756
    3. '
' → logprob: -5.521920680999756
    4. 'return' → logprob: -6.271920680999756
    5. ' return' → logprob: -6.396920680999756
    6. '  
' → logprob: -6.646920680999756
    7. '    
' → logprob: -6.896920680999756
    8. ',' → logprob: -6.896920680999756
    9. '[' → logprob: -7.396920680999756
    10. '  ' → logprob: -7.396920680999756

Token 69: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06970053166151047
    2. 'return' → logprob: -3.5697004795074463
    3. 'r' → logprob: -4.569700717926025
    4. ' ' → logprob: -4.694700717926025
    5. ' return' → logprob: -4.819700717926025
    6. ')' → logprob: -5.694700717926025
    7. '.' → logprob: -6.569700717926025
    8. 'if' (adapté à ' if') → logprob: -6.694700717926025
    9. '  ' → logprob: -6.819700717926025
    10. ' if' → logprob: -7.444700717926025

Token 70: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.001034714630804956
    2. 'b' → logprob: -6.876034736633301
    3. ' ' → logprob: -13.2510347366333
    4. ' ' → logprob: -16.501033782958984
    5. '	b' → logprob: -16.501033782958984
    6. '_b' → logprob: -18.626033782958984
    7. ' б' → logprob: -19.001033782958984
    8. ' ' → logprob: -20.751033782958984
    9. ' a' → logprob: -20.876033782958984
    10. ' isinstance' → logprob: -21.126033782958984

Token 71: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.004194979090243578
    2. 'in' → logprob: -5.504195213317871
    3. ' ' → logprob: -9.379195213317871
    4. ' not' → logprob: -11.254195213317871
    5. ' i' → logprob: -11.879195213317871
    6. '  ' → logprob: -13.004195213317871
    7. '	in' → logprob: -13.254195213317871
    8. '<|end|>' → logprob: -13.254195213317871
    9. ' a' → logprob: -13.629195213317871
    10. ' is' → logprob: -14.129195213317871

Token 72: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.38687169551849365
    2. 'd' → logprob: -1.1368716955184937
    3. '	d' → logprob: -14.761871337890625
    4. ' ' → logprob: -16.136871337890625
    5. 'b' → logprob: -16.636871337890625
    6. '_d' → logprob: -17.136871337890625
    7. ' д' → logprob: -17.761871337890625
    8. ')d' → logprob: -18.511871337890625
    9. '   ' → logprob: -18.636871337890625
    10. '[d' → logprob: -18.761871337890625

Token 73: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0005170515505596995
    2. ' :' → logprob: -8.000516891479492
    3. '):' → logprob: -9.250516891479492
    4. ':return' → logprob: -10.000516891479492
    5. '.keys' → logprob: -11.375516891479492
    6. ')' → logprob: -11.375516891479492
    7. ':**' → logprob: -12.500516891479492
    8. '<|end|>' → logprob: -12.500516891479492
    9. ':
' → logprob: -13.250516891479492
    10. '.' → logprob: -13.625516891479492

Token 74: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.026839865371584892
    2. ':' → logprob: -3.9018399715423584
    3. ' return' → logprob: -5.651839733123779
    4. '<|end|>' → logprob: -6.776839733123779
    5. ':return' → logprob: -7.651839733123779
    6. 'return' → logprob: -7.776839733123779
    7. ' :' → logprob: -8.276840209960938
    8. '    ' → logprob: -9.526840209960938
    9. '   ' → logprob: -9.526840209960938
    10. '        
' → logprob: -9.651840209960938

Token 75: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.5793509483337402
    2. '       ' → logprob: -1.0793509483337402
    3. 'return' (adapté à ' return') → logprob: -2.3293509483337402
    4. '   ' → logprob: -6.45435094833374
    5. ' ' → logprob: -7.70435094833374
    6. '	return' → logprob: -8.829351425170898
    7. ':return' → logprob: -9.079351425170898
    8. '    ' → logprob: -9.829351425170898
    9. '<|end|>' → logprob: -10.204351425170898
    10. ' ' → logprob: -10.579351425170898

Token 76: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.07889056205749512
    2. 'd' → logprob: -2.578890562057495
    3. ' ' → logprob: -14.953890800476074
    4. ' ' → logprob: -15.078890800476074
    5. '	d' → logprob: -17.078889846801758
    6. '"d' → logprob: -17.953889846801758
    7. '(d' → logprob: -18.203889846801758
    8. ')d' → logprob: -18.578889846801758
    9. 'b' → logprob: -18.703889846801758
    10. ''d' → logprob: -18.703889846801758

Token 77: '[b' (ID: 40800)
  Prédit: '[b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[b' → logprob: -1.1160349458805285e-05
    2. '[' → logprob: -11.750011444091797
    3. 'b' → logprob: -13.125011444091797
    4. ' b' → logprob: -14.125011444091797
    5. ' [' → logprob: -14.625011444091797
    6. ' ' → logprob: -17.625011444091797
    7. '[d' → logprob: -17.625011444091797
    8. '	b' → logprob: -17.875011444091797
    9. '[
' → logprob: -18.375011444091797
    10. '```' → logprob: -18.750011444091797

Token 78: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -1.8193366486229934e-05
    2. ']
' → logprob: -11.625018119812012
    3. ' ]' → logprob: -12.125018119812012
    4. '']' → logprob: -12.750018119812012
    5. '}' → logprob: -14.625018119812012
    6. ')' → logprob: -15.625018119812012
    7. '   ' → logprob: -16.625019073486328
    8. '"]' → logprob: -17.125019073486328
    9. ']

' → logprob: -17.250019073486328
    10. ']
' → logprob: -17.750019073486328

Token 79: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.28924277424812317
    2. ' else' → logprob: -1.5392427444458008
    3. 'else' → logprob: -3.539242744445801
    4. ''' → logprob: -6.039242744445801
    5. ' ' → logprob: -6.664242744445801
    6. '    
' → logprob: -7.039242744445801
    7. '    ' → logprob: -7.539242744445801
    8. ' return' → logprob: -7.664242744445801
    9. ' None' → logprob: -8.0392427444458
    10. 'return' → logprob: -8.0392427444458

Token 80: ' #' (ID: 1069)
  Prédit: ' else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.12118412554264069
    2. 'else' → logprob: -2.3711841106414795
    3. '   ' → logprob: -3.9961841106414795
    4. 'e' → logprob: -6.746184349060059
    5. ' ' → logprob: -7.746184349060059
    6. '	else' → logprob: -8.246184349060059
    7. 'return' → logprob: -8.871184349060059
    8. ' return' → logprob: -8.996184349060059
    9. '  ' → logprob: -9.746184349060059
    10. ' None' → logprob: -10.371184349060059

Token 81: ' H' (ID: 487)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.84599769115448
    2. 'return' → logprob: -1.47099769115448
    3. ' else' → logprob: -1.59599769115448
    4. 'else' → logprob: -2.8459978103637695
    5. ' None' → logprob: -3.5959978103637695
    6. 'None' → logprob: -3.9709978103637695
    7. '   ' → logprob: -4.4709978103637695
    8. ''' → logprob: -4.5959978103637695
    9. ' ' → logprob: -5.2209978103637695
    10. ' '' → logprob: -7.3459978103637695

Token 82: 'mmm' (ID: 66800)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.8719556331634521
    2. ' else' → logprob: -1.7469556331634521
    3. 'else' → logprob: -1.8719556331634521
    4. '   ' → logprob: -2.121955633163452
    5. 'a' → logprob: -2.496955633163452
    6. 't' → logprob: -5.121955871582031
    7. ' ' → logprob: -5.246955871582031
    8. 'él' → logprob: -5.496955871582031
    9. 'el' → logprob: -5.746955871582031
    10. ' a' → logprob: -5.746955871582031

Token 83: ',' (ID: 11)
  Prédit: ' None'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' None' → logprob: -1.037434697151184
    2. '   ' → logprob: -1.537434697151184
    3. ' ' → logprob: -1.787434697151184
    4. ' return' → logprob: -2.2874345779418945
    5. ' else' → logprob: -2.7874345779418945
    6. ''' → logprob: -3.1624345779418945
    7. 'return' → logprob: -3.9124345779418945
    8. ' '' → logprob: -4.7874345779418945
    9. 'None' → logprob: -4.9124345779418945
    10. '  ' → logprob: -5.1624345779418945

Token 84: ' faudrait' (ID: 128958)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.3639441132545471
    2. ' else' → logprob: -1.7389440536499023
    3. 'return' → logprob: -2.9889440536499023
    4. ' None' → logprob: -3.1139440536499023
    5. ''' → logprob: -4.363944053649902
    6. ' '' → logprob: -4.613944053649902
    7. 'else' → logprob: -5.613944053649902
    8. ' ' → logprob: -6.488944053649902
    9. '   ' → logprob: -6.488944053649902
    10. 'None' → logprob: -6.488944053649902

Token 85: ' gérer' (ID: 86786)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.7376163005828857
    2. ' gérer' → logprob: -2.2376163005828857
    3. ' return' → logprob: -3.1126163005828857
    4. 'pe' → logprob: -3.4876163005828857
    5. ' peut' → logprob: -3.4876163005828857
    6. ' ' → logprob: -3.6126163005828857
    7. 'ret' → logprob: -3.7376163005828857
    8. 'raise' → logprob: -3.7376163005828857
    9. ' maybe' → logprob: -3.8626163005828857
    10. '   ' → logprob: -3.9876163005828857

Token 86: ' l' (ID: 305)
  Prédit: ' else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.31494611501693726
    2. ' autrement' → logprob: -2.314946174621582
    3. ' autre' → logprob: -3.439946174621582
    4. ' None' → logprob: -3.439946174621582
    5. ' ' → logprob: -3.689946174621582
    6. ' l' → logprob: -3.939946174621582
    7. 'else' → logprob: -3.939946174621582
    8. ' return' → logprob: -4.314946174621582
    9. ' le' → logprob: -5.064946174621582
    10. ' un' → logprob: -5.314946174621582

Token 87: ''er' (ID: 88929)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.8699923157691956
    2. 'e' → logprob: -1.2449922561645508
    3. 'a' → logprob: -1.8699922561645508
    4. 'es' → logprob: -2.869992256164551
    5. ''autre' → logprob: -4.369992256164551
    6. ''utilisateur' → logprob: -4.369992256164551
    7. ''a' → logprob: -4.869992256164551
    8. ''er' → logprob: -5.119992256164551
    9. ''espace' → logprob: -5.244992256164551
    10. ''ex' → logprob: -5.244992256164551

Token 88: 'reur' (ID: 56784)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.045735396444797516
    2. 'eur' → logprob: -3.1707353591918945
    3. 'reur' → logprob: -6.2957353591918945
    4. 'eu' → logprob: -7.6707353591918945
    5. 'eurs' → logprob: -9.170735359191895
    6. '```' → logprob: -9.545735359191895
    7. 'eux' → logprob: -10.045735359191895
    8. '#' → logprob: -10.920735359191895
    9. 'r' → logprob: -11.295735359191895
    10. 'u' → logprob: -11.295735359191895

Token 89: ' mais' (ID: 2899)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.646609365940094
    2. ' None' → logprob: -1.0216093063354492
    3. '   ' → logprob: -2.771609306335449
    4. 'None' → logprob: -3.271609306335449
    5. ' 
' → logprob: -5.271609306335449
    6. 'r' → logprob: -5.521609306335449
    7. ' return' → logprob: -7.021609306335449
    8. ' \' → logprob: -7.146609306335449
    9. '  ' → logprob: -7.271609306335449
    10. '    ' → logprob: -7.396609306335449

Token 90: ' bon' (ID: 4846)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.9524247050285339
    2. ' ' → logprob: -2.0774247646331787
    3. ' r' → logprob: -2.0774247646331787
    4. 'r' → logprob: -2.2024247646331787
    5. ' None' → logprob: -2.2024247646331787
    6. '   ' → logprob: -2.7024247646331787
    7. '    ' → logprob: -3.7024247646331787
    8. 'return' → logprob: -3.9524247646331787
    9. 'None' → logprob: -5.3274245262146
    10. ' a' → logprob: -5.8274245262146

Token 91: '...
' (ID: 4908)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2025299370288849
    2. ' ' → logprob: -1.9525299072265625
    3. ' return' → logprob: -4.2025299072265625
    4. '    ' → logprob: -5.2025299072265625
    5. ' 
' → logprob: -5.5775299072265625
    6. '    
' → logprob: -5.5775299072265625
    7. ' None' → logprob: -5.8275299072265625
    8. 'return' → logprob: -6.0775299072265625
    9. 'r' → logprob: -6.3275299072265625
    10. '  ' → logprob: -6.7025299072265625

Token 92: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7675805687904358
    2. '   ' → logprob: -1.392580509185791
    3. 'r' → logprob: -1.642580509185791
    4. ' None' → logprob: -3.267580509185791
    5. ' return' → logprob: -4.517580509185791
    6. ' r' → logprob: -4.517580509185791
    7. 'None' → logprob: -4.767580509185791
    8. 'return' → logprob: -5.017580509185791
    9. '    ' → logprob: -5.517580509185791
    10. 'n' → logprob: -5.517580509185791

Token 93: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.5102505683898926
    2. ' return' → logprob: -1.8852505683898926
    3. 'r' → logprob: -2.6352505683898926
    4. '   ' → logprob: -2.8852505683898926
    5. ' ' → logprob: -3.1352505683898926
    6. ' None' → logprob: -3.2602505683898926
    7. 'None' → logprob: -4.385250568389893
    8. '    ' → logprob: -4.385250568389893
    9. ' r' → logprob: -5.010250568389893
    10. 're' → logprob: -6.635250568389893

Token 94: ' None' (ID: 4662)
  Prédit: 'None'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'None' → logprob: -0.4844231903553009
    2. ' None' → logprob: -0.9844231605529785
    3. ''' → logprob: -5.3594231605529785
    4. '''' → logprob: -5.7344231605529785
    5. '"' → logprob: -7.4844231605529785
    6. 'b' → logprob: -7.7344231605529785
    7. ' ''' → logprob: -7.7344231605529785
    8. ' ' → logprob: -7.8594231605529785
    9. 'N' → logprob: -8.484423637390137
    10. '""' → logprob: -8.734423637390137

Token 95: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.08383549749851227
    2. '
' → logprob: -2.9588356018066406
    3. '

' → logprob: -3.7088356018066406
    4. '<|end|>' → logprob: -6.708835601806641
    5. '```' → logprob: -6.708835601806641
    6. '#' → logprob: -8.20883560180664
    7. '\n' → logprob: -8.70883560180664
    8. '\' → logprob: -8.70883560180664
    9. '[' → logprob: -8.83383560180664
    10. ' def' → logprob: -8.95883560180664

Token 96: 'if' (ID: 366)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.04775511845946312
    2. '#' → logprob: -3.797755002975464
    3. 'd' → logprob: -4.047755241394043
    4. '```' → logprob: -5.922755241394043
    5. 'a' → logprob: -6.422755241394043
    6. 'b' → logprob: -6.672755241394043
    7. 'A' → logprob: -7.547755241394043
    8. '\' → logprob: -8.172755241394043
    9. 'e' → logprob: -9.922755241394043
    10. '<|end|>' → logprob: -10.172755241394043

Token 97: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.0015031944494694471
    2. ' ' → logprob: -7.376502990722656
    3. ' ' → logprob: -7.626502990722656
    4. '__' → logprob: -8.376502990722656
    5. ' True' → logprob: -9.876502990722656
    6. ' _' → logprob: -9.876502990722656
    7. '_' → logprob: -11.001502990722656
    8. ' user' → logprob: -11.251502990722656
    9. '  ' → logprob: -12.001502990722656
    10. ' isinstance' → logprob: -12.001502990722656

Token 98: 'name' (ID: 897)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.5506296157836914
    2. '__' → logprob: -1.1756296157836914
    3. '<|end|>' → logprob: -3.4256296157836914
    4. '.__' → logprob: -3.9256296157836914
    5. '_' → logprob: -3.9256296157836914
    6. ' ==' → logprob: -4.050629615783691
    7. '```' → logprob: -5.300629615783691
    8. '==' → logprob: -5.300629615783691
    9. '>' → logprob: -5.925629615783691
    10. ' __' → logprob: -6.175629615783691

Token 99: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.0002624086628202349
    2. '_' → logprob: -9.500262260437012
    3. '==' → logprob: -9.625262260437012
    4. '__.' → logprob: -10.250262260437012
    5. '__
' → logprob: -11.125262260437012
    6. '__["' → logprob: -11.250262260437012
    7. '__.__' → logprob: -11.250262260437012
    8. '___' → logprob: -11.500262260437012
    9. '__

' → logprob: -12.375262260437012
    10. 'f' → logprob: -12.625262260437012

Token 100: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.30598723888397217
    2. '__' → logprob: -1.5559872388839722
    3. '==' → logprob: -3.0559873580932617
    4. '=="' → logprob: -5.430987358093262
    5. '=='' → logprob: -7.930987358093262
    6. ' =="' → logprob: -8.305987358093262
    7. '"' → logprob: -8.805987358093262
    8. '_' → logprob: -8.930987358093262
    9. ' ' → logprob: -10.055987358093262
    10. '[' → logprob: -10.055987358093262

Token 101: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.5825273990631104
    2. ''' → logprob: -0.8325273990631104
    3. ' "' → logprob: -5.332527160644531
    4. ' '' → logprob: -6.457527160644531
    5. ' "__' → logprob: -8.957527160644531
    6. ' '__' → logprob: -10.707527160644531
    7. ' ' → logprob: -12.582527160644531
    8. ' ' → logprob: -12.707527160644531
    9. '"user' → logprob: -13.207527160644531
    10. '__' → logprob: -13.207527160644531

Token 102: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -2.236549335066229e-05
    2. 'name' → logprob: -10.750021934509277
    3. 'ma' → logprob: -14.500021934509277
    4. 'mai' → logprob: -15.625021934509277
    5. ' main' → logprob: -16.000022888183594
    6. '_main' → logprob: -17.250022888183594
    7. 'm' → logprob: -18.375022888183594
    8. 'maine' → logprob: -18.625022888183594
    9. '	main' → logprob: -18.750022888183594
    10. '__' → logprob: -20.000022888183594

Token 103: '__":
' (ID: 49892)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.1269523650407791
    2. '__":
' → logprob: -2.1269524097442627
    3. '_' → logprob: -11.001952171325684
    4. '__':
' → logprob: -12.251952171325684
    5. '__:' → logprob: -13.626952171325684
    6. '__["' → logprob: -14.001952171325684
    7. '"' → logprob: -15.126952171325684
    8. '__("' → logprob: -15.626952171325684
    9. '__",' → logprob: -15.876952171325684
    10. '___' → logprob: -16.376953125

Token 104: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06442809104919434
    2. '    
' → logprob: -3.8144280910491943
    3. ' b' → logprob: -4.814428329467773
    4. ' n' → logprob: -5.064428329467773
    5. ' s' → logprob: -5.189428329467773
    6. ' 
' → logprob: -5.689428329467773
    7. ' user' → logprob: -5.689428329467773
    8. ' input' → logprob: -6.314428329467773
    9. 'n' → logprob: -6.439428329467773
    10. 'b' → logprob: -7.314428329467773

Token 105: ' val' (ID: 1459)
  Prédit: 'seq'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'seq' → logprob: -0.322127103805542
    2. 'sequence' → logprob: -2.822127103805542
    3. ' seq' → logprob: -3.197127103805542
    4. 's' → logprob: -3.197127103805542
    5. '   ' → logprob: -3.197127103805542
    6. 'b' → logprob: -3.947127103805542
    7. ' sequence' → logprob: -3.947127103805542
    8. 'chaine' → logprob: -4.072127342224121
    9. 'print' → logprob: -4.822127342224121
    10. 'user' → logprob: -5.822127342224121

Token 106: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.9453041553497314
    2. '   ' → logprob: -1.4453041553497314
    3. 'ut' → logprob: -2.0703041553497314
    4. '_input' → logprob: -3.0703041553497314
    5. 'input' → logprob: -3.1953041553497314
    6. 'u' → logprob: -3.3203041553497314
    7. '_' → logprob: -3.5703041553497314
    8. '=' → logprob: -3.6953041553497314
    9. '__' → logprob: -3.9453041553497314
    10. 'ue' → logprob: -4.570303916931152

Token 107: ' lire' (ID: 46082)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.08621400594711304
    2. ' lire' → logprob: -3.211214065551758
    3. 'input' → logprob: -3.711214065551758
    4. ' input' → logprob: -4.086214065551758
    5. ' l' → logprob: -7.336214065551758
    6. ' ' → logprob: -8.586214065551758
    7. '	l' → logprob: -9.336214065551758
    8. '  ' → logprob: -10.836214065551758
    9. '   ' → logprob: -11.211214065551758
    10. 'int' → logprob: -11.836214065551758

Token 108: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.0015100972959771752
    2. '_' → logprob: -6.501510143280029
    3. '_in' → logprob: -12.501509666442871
    4. ' _' → logprob: -13.251509666442871
    5. '_user' → logprob: -14.001509666442871
    6. '_i' → logprob: -14.626509666442871
    7. 'input' → logprob: -15.001509666442871
    8. '__' → logprob: -15.126509666442871
    9. '_val' → logprob: -16.251510620117188
    10. '_output' → logprob: -16.501510620117188

Token 109: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -7.803360495017841e-05
    2. '(' → logprob: -9.625078201293945
    3. '()
' → logprob: -12.125078201293945
    4. ' ()' → logprob: -12.750078201293945
    5. '()(' → logprob: -13.625078201293945
    6. '()

' → logprob: -14.375078201293945
    7. '()`' → logprob: -14.875078201293945
    8. '();' → logprob: -15.125078201293945
    9. '().' → logprob: -15.500078201293945
    10. '_' → logprob: -15.750078201293945

Token 110: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.3033835887908936
    2. ' for' → logprob: -1.4283835887908936
    3. 'result' → logprob: -2.0533835887908936
    4. 'res' → logprob: -2.4283835887908936
    5. 'for' → logprob: -2.4283835887908936
    6. 'output' → logprob: -3.4283835887908936
    7. 'print' → logprob: -3.4283835887908936
    8. 'com' → logprob: -3.6783835887908936
    9. ' result' → logprob: -4.803383827209473
    10. 'rev' → logprob: -5.178383827209473

Token 111: ' #' (ID: 1069)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.9725044369697571
    2. 'res' → logprob: -1.3475043773651123
    3. 'result' → logprob: -1.8475043773651123
    4. 'com' → logprob: -2.9725043773651123
    5. 'comp' → logprob: -2.9725043773651123
    6. 'compl' → logprob: -3.7225043773651123
    7. 'print' → logprob: -3.8475043773651123
    8. 'r' → logprob: -4.472504615783691
    9. 'out' → logprob: -4.472504615783691
    10. 'val' → logprob: -4.597504615783691

Token 112: ' c' (ID: 274)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5275436639785767
    2. ' for' → logprob: -2.402543544769287
    3. 'res' → logprob: -2.527543544769287
    4. 'com' → logprob: -2.902543544769287
    5. 'result' → logprob: -3.152543544769287
    6. 'compl' → logprob: -3.402543544769287
    7. ' res' → logprob: -3.902543544769287
    8. 'comp' → logprob: -4.027543544769287
    9. 'rc' → logprob: -4.277543544769287
    10. 'rev' → logprob: -4.402543544769287

Token 113: ''est' (ID: 6616)
  Prédit: 'ode'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ode' → logprob: -1.1213818788528442
    2. 'ho' → logprob: -1.9963818788528442
    3. 'har' → logprob: -2.2463817596435547
    4. 'h' → logprob: -2.3713817596435547
    5. 'urrent' → logprob: -2.9963817596435547
    6. 'omp' → logprob: -3.1213817596435547
    7. 'for' → logprob: -3.2463817596435547
    8. ' =' → logprob: -3.6213817596435547
    9. 'heck' → logprob: -3.7463817596435547
    10. '#' → logprob: -3.8713817596435547

Token 114: ' parti' (ID: 37271)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.6502766013145447
    2. ' la' → logprob: -2.1502766609191895
    3. '"' → logprob: -2.7752766609191895
    4. ' ' → logprob: -3.5252766609191895
    5. ' le' → logprob: -3.6502766609191895
    6. ' []' → logprob: -3.6502766609191895
    7. ' "' → logprob: -3.7752766609191895
    8. '   ' → logprob: -3.9002766609191895
    9. ' val' → logprob: -4.1502766609191895
    10. ' une' → logprob: -4.1502766609191895

Token 115: '
' (ID: 198)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -1.0613377094268799
    2. 'result' → logprob: -1.0613377094268799
    3. '   ' → logprob: -2.31133770942688
    4. 'for' → logprob: -2.68633770942688
    5. ':' → logprob: -2.81133770942688
    6. ' result' → logprob: -3.81133770942688
    7. ',' → logprob: -4.561337471008301
    8. 'output' → logprob: -4.936337471008301
    9. 'res' → logprob: -5.061337471008301
    10. '    
' → logprob: -5.311337471008301

Token 116: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6280845403671265
    2. ' for' → logprob: -1.7530845403671265
    3. 'com' → logprob: -2.378084659576416
    4. 'for' → logprob: -2.753084659576416
    5. 'r' → logprob: -3.128084659576416
    6. 'result' → logprob: -4.003084659576416
    7. 's' → logprob: -4.378084659576416
    8. 'dna' → logprob: -4.503084659576416
    9. '    
' → logprob: -5.128084659576416
    10. ':' → logprob: -5.503084659576416

Token 117: ' resultat' (ID: 67404)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.8188000917434692
    2. 'result' → logprob: -1.1938000917434692
    3. 'com' → logprob: -2.4437999725341797
    4. 'comp' → logprob: -2.9437999725341797
    5. 'for' → logprob: -3.1937999725341797
    6. 'compl' → logprob: -3.9437999725341797
    7. 'rc' → logprob: -3.9437999725341797
    8. 'out' → logprob: -5.06879997253418
    9. 'print' → logprob: -5.06879997253418
    10. 'r' → logprob: -5.44379997253418

Token 118: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.007764681242406368
    2. '=' → logprob: -4.88276481628418
    3. '_' → logprob: -9.38276481628418
    4. ' ' → logprob: -10.00776481628418
    5. '=[]' → logprob: -12.13276481628418
    6. 's' → logprob: -12.25776481628418
    7. ' =[' → logprob: -12.63276481628418
    8. ',' → logprob: -12.63276481628418
    9. '[' → logprob: -13.25776481628418
    10. ' =
' → logprob: -13.63276481628418

Token 119: ' cherche' (ID: 52345)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.07607485353946686
    2. '""' → logprob: -2.8260748386383057
    3. '''' → logprob: -4.576075077056885
    4. '''.' → logprob: -5.701075077056885
    5. '''
' → logprob: -8.701074600219727
    6. '[' → logprob: -8.826074600219727
    7. ''' → logprob: -9.826074600219727
    8. '"",' → logprob: -14.576074600219727
    9. ' "".' → logprob: -14.576074600219727
    10. '[]' → logprob: -14.576074600219727

Token 120: '(val' (ID: 17391)
  Prédit: '(val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(val' → logprob: -0.251948744058609
    2. '(' → logprob: -1.5019487142562866
    3. ' (' → logprob: -11.876948356628418
    4. '('' → logprob: -12.251948356628418
    5. '(
' → logprob: -12.251948356628418
    6. '(user' → logprob: -14.251948356628418
    7. '(value' → logprob: -14.876948356628418
    8. '(valor' → logprob: -14.876948356628418
    9. '("("' → logprob: -15.001948356628418
    10. '(ord' → logprob: -15.376948356628418

Token 121: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.018207302317023277
    2. '[' → logprob: -4.01820707321167
    3. ' )' → logprob: -10.393207550048828
    4. '))' → logprob: -11.018207550048828
    5. '   ' → logprob: -13.143207550048828
    6. ')
' → logprob: -13.643207550048828
    7. '')' → logprob: -13.893207550048828
    8. ')`' → logprob: -14.018207550048828
    9. '(' → logprob: -14.268207550048828
    10. '[-' → logprob: -14.393207550048828

Token 122: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.10218789428472519
    2. '   ' → logprob: -2.3521878719329834
    3. ' print' → logprob: -7.2271881103515625
    4. 'if' → logprob: -7.6021881103515625
    5. '<|end|>' → logprob: -8.102188110351562
    6. ')' → logprob: -9.352188110351562
    7. '(print' → logprob: -9.602188110351562
    8. '    
' → logprob: -9.602188110351562
    9. ' if' → logprob: -9.727188110351562
    10. '
' → logprob: -10.227188110351562

Token 123: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.003077886998653412
    2. 'if' → logprob: -6.503077983856201
    3. '   ' → logprob: -7.003077983856201
    4. ' print' → logprob: -7.503077983856201
    5. ' if' → logprob: -9.503077507019043
    6. '
' → logprob: -11.503077507019043
    7. '(print' → logprob: -11.753077507019043
    8. 'prin' → logprob: -12.753077507019043
    9. '.print' → logprob: -13.003077507019043
    10. '    
' → logprob: -13.128077507019043

Token 124: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.062022022902965546
    2. '(result' → logprob: -2.8120219707489014
    3. '("("' → logprob: -10.43702220916748
    4. '('' → logprob: -11.68702220916748
    5. '(resultado' → logprob: -12.31202220916748
    6. '(
' → logprob: -12.31202220916748
    7. '()' → logprob: -13.18702220916748
    8. '(

' → logprob: -13.56202220916748
    9. '(results' → logprob: -14.18702220916748
    10. ' (' → logprob: -14.18702220916748

Token 125: 'at' (ID: 266)
  Prédit: 'at'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'at' → logprob: -6.2729995988775045e-06
    2. 't' → logprob: -12.875006675720215
    3. 'al' → logprob: -13.500006675720215
    4. ')' → logprob: -13.625006675720215
    5. 'val' → logprob: -15.375006675720215
    6. 'a' → logprob: -15.625006675720215
    7. 'ats' → logprob: -15.875006675720215
    8. '))' → logprob: -16.3750057220459
    9. 'ut' → logprob: -16.5000057220459
    10. '_at' → logprob: -16.5000057220459

Token 126: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.981667537620524e-06
    2. ' )' → logprob: -13.625001907348633
    3. '()' → logprob: -15.125001907348633
    4. '))' → logprob: -16.375001907348633
    5. '(' → logprob: -16.500001907348633
    6. ')
' → logprob: -16.625001907348633
    7. '')' → logprob: -16.750001907348633
    8. ')`' → logprob: -16.875001907348633
    9. '())' → logprob: -17.000001907348633
    10. '`)' → logprob: -18.000001907348633

Token 127: ' ' (ID: 220)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.105488657951355
    2. '
' → logprob: -1.730488657951355
    3. '<|end|>' → logprob: -1.855488657951355
    4. ')' → logprob: -2.4804887771606445
    5. ' ' → logprob: -2.4804887771606445
    6. '(' → logprob: -2.9804887771606445
    7. '```' → logprob: -3.6054887771606445
    8. '#' → logprob: -3.8554887771606445
    9. '\' → logprob: -4.1054887771606445
    10. 'newline' → logprob: -4.2304887771606445

Token 128: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 129: ' À' (ID: 27643)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 130: ' voir' (ID: 20611)
  Prédit: ' None'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' None' → logprob: -0.9046826362609863
    2. 'None' → logprob: -1.4046826362609863
    3. ' la' → logprob: -2.5296826362609863
    4. ' ' → logprob: -2.9046826362609863
    5. 'ucune' → logprob: -3.5296826362609863
    6. 'ucun' → logprob: -4.154682636260986
    7. ' fin' → logprob: -4.279682636260986
    8. ' ' → logprob: -4.404682636260986
    9. 'l' → logprob: -4.654682636260986
    10. ' continuer' → logprob: -4.654682636260986

Token 131: ' si' (ID: 1784)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 132: ' c' (ID: 274)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.7527046799659729
    2. 'result' → logprob: -1.0027046203613281
    3. ' val' → logprob: -2.752704620361328
    4. 'None' → logprob: -3.627704620361328
    5. ' resultat' → logprob: -3.627704620361328
    6. ' result' → logprob: -3.752704620361328
    7. ' résultat' → logprob: -4.752704620361328
    8. ' None' → logprob: -5.627704620361328
    9. ' ' → logprob: -6.127704620361328
    10. ' on' → logprob: -6.502704620361328

Token 133: ''est' (ID: 6616)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.1103079617023468
    2. 'e' → logprob: -2.4853079319000244
    3. ''a' → logprob: -4.7353081703186035
    4. ''est' → logprob: -5.6103081703186035
    5. ''' → logprob: -5.8603081703186035
    6. 'ela' → logprob: -6.1103081703186035
    7. 'o' → logprob: -6.6103081703186035
    8. ''e' → logprob: -7.4853081703186035
    9. 'est' → logprob: -8.360307693481445
    10. 'à' → logprob: -8.610307693481445

Token 134: ' None' (ID: 4662)
  Prédit: ' None'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' None' → logprob: -0.11535326391458511
    2. 'None' → logprob: -2.3653533458709717
    3. ' bien' → logprob: -5.115353107452393
    4. ' ce' → logprob: -5.990353107452393
    5. 'bien' → logprob: -6.365353107452393
    6. ' une' → logprob: -7.365353107452393
    7. ' correct' → logprob: -7.615353107452393
    8. ' utile' → logprob: -7.740353107452393
    9. 'utile' → logprob: -7.740353107452393
    10. 'le' → logprob: -7.990353107452393

Token 135: ' si' (ID: 1784)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 136: ' la' (ID: 557)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.5757479667663574
    2. ' val' → logprob: -0.9507479667663574
    3. ' on' → logprob: -3.3257479667663574
    4. 'on' → logprob: -6.075747966766357
    5. ' ce' → logprob: -6.200747966766357
    6. ' le' → logprob: -6.825747966766357
    7. ' pas' → logprob: -7.200747966766357
    8. ' not' → logprob: -7.325747966766357
    9. 'len' → logprob: -7.325747966766357
    10. 'None' → logprob: -7.325747966766357

Token 137: ' lettre' (ID: 68013)
  Prédit: ' valeur'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' valeur' → logprob: -0.8014439940452576
    2. ' val' → logprob: -1.0514440536499023
    3. 'val' → logprob: -2.0514440536499023
    4. ' lettre' → logprob: -3.9264440536499023
    5. ' ' → logprob: -4.301444053649902
    6. ' chaine' → logprob: -5.551444053649902
    7. ' donnée' → logprob: -5.676444053649902
    8. ' chaîne' → logprob: -5.801444053649902
    9. ' input' → logprob: -5.926444053649902
    10. 'entrée' → logprob: -5.926444053649902

Token 138: ' est' (ID: 893)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.05457518249750137
    2. 'n' → logprob: -4.179574966430664
    3. ' est' → logprob: -4.679574966430664
    4. 'entrée' → logprob: -4.804574966430664
    5. ' ne' → logprob: -5.054574966430664
    6. 'import' → logprob: -7.054574966430664
    7. 'val' → logprob: -7.179574966430664
    8. ' ' → logprob: -7.429574966430664
    9. ' sais' → logprob: -7.429574966430664
    10. 'est' → logprob: -7.429574966430664

Token 139: ' mauvaise' (ID: 102856)
  Prédit: 'incorrect'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'incorrect' → logprob: -0.7590254545211792
    2. 'pas' → logprob: -2.1340255737304688
    3. 'abs' → logprob: -2.3840255737304688
    4. 'in' → logprob: -2.7590255737304688
    5. 'mal' → logprob: -3.2590255737304688
    6. 'une' → logprob: -3.5090255737304688
    7. ' inconn' → logprob: -3.6340255737304688
    8. 'invalid' → logprob: -3.7590255737304688
    9. ' incorrect' → logprob: -4.009025573730469
    10. ' inval' → logprob: -4.759025573730469

Token 140: ' mais' (ID: 2899)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 141: ' bon' (ID: 4846)
  Prédit: ' rien'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' rien' → logprob: -1.4390848875045776
    2. ' oui' → logprob: -1.6890848875045776
    3. 'None' → logprob: -1.9390848875045776
    4. ' ' → logprob: -2.439085006713867
    5. ''' → logprob: -3.189085006713867
    6. '"' → logprob: -3.189085006713867
    7. ' None' → logprob: -3.814085006713867
    8. ' pas' → logprob: -3.939085006713867
    9. '""' → logprob: -4.064085006713867
    10. ' ok' → logprob: -4.064085006713867

Token 142: '...' (ID: 1008)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 140
Tokens correctement prédits (1ère position, stricte): 44
Tokens correctement prédits (1ère position, avec adaptation): 46
Tokens correctement prédits (top 10): 83
Précision stricte (1ère position): 31.43%
Précision adaptée (1ère position): 32.86%
Précision (top 10): 59.29%
================================================================================
