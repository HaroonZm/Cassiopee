================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:17:03
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from sys import stdin

def digit_sum(x):
    return sum(map(int, str(x)))

n = int(stdin.readline())

minsum = min(digit_sum(a) + digit_sum(n - a) for a in range(1, n))

print(minsum)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' stdin' (ID: 75143)
  Prédit: 'argv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'argv' → logprob: -0.05142802372574806
    2. ' argv' → logprob: -3.4264280796051025
    3. 'exit' → logprob: -4.176427841186523
    4. ' exit' → logprob: -6.801427841186523
    5. 'stdout' → logprob: -7.301427841186523
    6. 'stdin' → logprob: -8.426427841186523
    7. 'path' → logprob: -8.801427841186523
    8. 'import' → logprob: -10.176427841186523
    9. 'stderr' → logprob: -10.426427841186523
    10. 'version' → logprob: -10.676427841186523

Token 4: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0006454797694459558
    2. '.readline' → logprob: -8.250645637512207
    3. '\n' → logprob: -8.500645637512207
    4. '.
' → logprob: -10.125645637512207
    5. 'import' → logprob: -10.250645637512207
    6. '\' → logprob: -10.375645637512207
    7. '```' → logprob: -10.875645637512207
    8. '.read' → logprob: -10.875645637512207
    9. '' → logprob: -12.000645637512207
    10. ',' → logprob: -12.125645637512207

Token 5: 'def' (ID: 1314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.026680389419198036
    2. '.readline' → logprob: -3.9016804695129395
    3. '.read' → logprob: -6.2766804695129395
    4. '\n' → logprob: -7.0266804695129395
    5. ',' → logprob: -7.4016804695129395
    6. 'for' → logprob: -7.5266804695129395
    7. 'print' → logprob: -7.7766804695129395
    8. 'import' → logprob: -7.9016804695129395
    9. '
' → logprob: -8.151679992675781
    10. '```' → logprob: -8.276679992675781

Token 6: ' digit' (ID: 19181)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0812530517578125
    2. ' read' → logprob: -2.7062530517578125
    3. ' process' → logprob: -5.4562530517578125
    4. '_read' → logprob: -6.5812530517578125
    5. ' readline' → logprob: -6.9562530517578125
    6. ' ' → logprob: -7.0812530517578125
    7. ' space' → logprob: -7.0812530517578125
    8. ' parse' → logprob: -7.3312530517578125
    9. 'read' → logprob: -8.081253051757812
    10. ' main' → logprob: -8.331253051757812

Token 7: '_sum' (ID: 29859)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.1572057157754898
    2. '(' → logprob: -2.782205820083618
    3. '_' → logprob: -2.782205820083618
    4. '_count' → logprob: -4.532205581665039
    5. '(s' → logprob: -6.032205581665039
    6. '):' → logprob: -6.032205581665039
    7. ')' → logprob: -6.532205581665039
    8. '_s' → logprob: -6.657205581665039
    9. ')_' → logprob: -6.907205581665039
    10. ':' → logprob: -7.907205581665039

Token 8: '(x' (ID: 4061)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0007089786231517792
    2. 's' → logprob: -8.87570858001709
    3. '(n' → logprob: -9.00070858001709
    4. '(x' → logprob: -9.25070858001709
    5. '(user' → logprob: -9.87570858001709
    6. ')' → logprob: -10.25070858001709
    7. '_' → logprob: -10.50070858001709
    8. '(d' → logprob: -10.62570858001709
    9. '(number' → logprob: -10.62570858001709
    10. '(a' → logprob: -10.75070858001709

Token 9: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.004668880254030228
    2. ')' → logprob: -5.379668712615967
    3. ':' → logprob: -10.254669189453125
    4. '):
' → logprob: -12.129669189453125
    5. ' ):' → logprob: -12.754669189453125
    6. '=' → logprob: -14.504669189453125
    7. ',' → logprob: -14.629669189453125
    8. '+' → logprob: -14.754669189453125
    9. '(x' → logprob: -15.004669189453125
    10. '*' → logprob: -15.004669189453125

Token 10: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10361666977405548
    2. ':' → logprob: -2.353616714477539
    3. '(' → logprob: -5.978616714477539
    4. ':return' → logprob: -8.853616714477539
    5. ' return' → logprob: -8.978616714477539
    6. '():' → logprob: -9.103616714477539
    7. ' :' → logprob: -9.478616714477539
    8. '):' → logprob: -9.853616714477539
    9. ' ' → logprob: -9.853616714477539
    10. '    ' → logprob: -10.103616714477539

Token 11: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3820537328720093
    2. ' return' → logprob: -1.6320537328720093
    3. 'return' (adapté à ' return') → logprob: -2.382053852081299
    4. 's' → logprob: -4.757053852081299
    5. ' total' → logprob: -4.757053852081299
    6. ' s' → logprob: -5.632053852081299
    7. 'r' → logprob: -5.882053852081299
    8. 'total' → logprob: -5.882053852081299
    9. ' ' → logprob: -7.007053852081299
    10. '    ' → logprob: -7.632053852081299

Token 12: ' sum' (ID: 4215)
  Prédit: ' sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sum' → logprob: -0.017029836773872375
    2. 'sum' → logprob: -4.392029762268066
    3. ' x' → logprob: -5.892029762268066
    4. ' ' → logprob: -6.392029762268066
    5. ' int' → logprob: -10.142029762268066
    6. 'x' → logprob: -10.642029762268066
    7. '  ' → logprob: -12.517029762268066
    8. '   ' → logprob: -12.892029762268066
    9. '(sum' → logprob: -12.892029762268066
    10. 'int' → logprob: -14.392029762268066

Token 13: '(map' (ID: 16946)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.6639538407325745
    2. '(' → logprob: -0.7889538407325745
    3. '(x' → logprob: -3.9139537811279297
    4. '(ord' → logprob: -5.03895378112793
    5. '(map' → logprob: -6.41395378112793
    6. '((' → logprob: -7.03895378112793
    7. '(abs' → logprob: -7.41395378112793
    8. '(chr' → logprob: -7.53895378112793
    9. '([' → logprob: -8.28895378112793
    10. '(str' → logprob: -8.78895378112793

Token 14: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.001848081941716373
    2. '(str' → logprob: -7.001848220825195
    3. 'int' → logprob: -7.251848220825195
    4. 'str' → logprob: -8.876848220825195
    5. '(' → logprob: -10.126848220825195
    6. '(ord' → logprob: -10.626848220825195
    7. '(lambda' → logprob: -11.501848220825195
    8. '<int' → logprob: -12.626848220825195
    9. ' int' → logprob: -12.751848220825195
    10. '=int' → logprob: -13.251848220825195

Token 15: ',' (ID: 11)
  Prédit: '(str'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(str' → logprob: -0.01959722489118576
    2. 'str' → logprob: -4.394597053527832
    3. ',' → logprob: -5.769597053527832
    4. ',str' → logprob: -6.269597053527832
    5. 'list' → logprob: -7.269597053527832
    6. ' str' → logprob: -7.394597053527832
    7. '(' → logprob: -7.644597053527832
    8. '(x' → logprob: -9.144597053527832
    9. '(list' → logprob: -9.394597053527832
    10. '))' → logprob: -11.394597053527832

Token 16: ' str' (ID: 989)
  Prédit: 'str'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'str' → logprob: -0.20296131074428558
    2. ' str' → logprob: -1.7029613256454468
    3. 'list' → logprob: -7.202961444854736
    4. 'x' → logprob: -7.327961444854736
    5. ' list' → logprob: -9.452960968017578
    6. ' x' → logprob: -10.077960968017578
    7. '(str' → logprob: -11.327960968017578
    8. '   ' → logprob: -12.202960968017578
    9. ' ' → logprob: -12.452960968017578
    10. ')' → logprob: -13.327960968017578

Token 17: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.0010361451422795653
    2. '(' → logprob: -6.876036167144775
    3. 'x' → logprob: -12.876035690307617
    4. ' (' → logprob: -14.126035690307617
    5. '(
' → logprob: -16.751035690307617
    6. '```' → logprob: -18.126035690307617
    7. ')x' → logprob: -18.126035690307617
    8. ')' → logprob: -18.251035690307617
    9. '(abs' → logprob: -18.376035690307617
    10. '((' → logprob: -19.001035690307617

Token 18: ')))

' (ID: 46526)
  Prédit: ')))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.020044492557644844
    2. ')' → logprob: -4.270044326782227
    3. '))))' → logprob: -5.145044326782227
    4. '')))' → logprob: -11.145044326782227
    5. ')));' → logprob: -12.020044326782227
    6. '))' → logprob: -12.520044326782227
    7. ')+' → logprob: -13.020044326782227
    8. ' ' → logprob: -13.645044326782227
    9. '())))' → logprob: -13.770044326782227
    10. '[' → logprob: -14.145044326782227

Token 19: 'n' (ID: 77)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.1843530386686325
    2. '
' → logprob: -2.1843531131744385
    3. '

' → logprob: -3.8093531131744385
    4. '\n' → logprob: -4.309352874755859
    5. '<|end|>' → logprob: -4.934352874755859
    6. 'for' → logprob: -5.559352874755859
    7. '\' → logprob: -5.684352874755859
    8. 'n' → logprob: -6.434352874755859
    9. 'newline' → logprob: -6.934352874755859
    10. '```' → logprob: -7.309352874755859

Token 20: ' =' (ID: 314)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7331609129905701
    2. ' ' → logprob: -1.6081609725952148
    3. ' )' → logprob: -1.8581609725952148
    4. ' =' → logprob: -2.608160972595215
    5. '=' → logprob: -2.733160972595215
    6. '_' → logprob: -5.233160972595215
    7. '.' → logprob: -5.733160972595215
    8. '  ' → logprob: -5.733160972595215
    9. '>' → logprob: -6.108160972595215
    10. '[' → logprob: -6.358160972595215

Token 21: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.2519397437572479
    2. 'int' → logprob: -1.5019397735595703
    3. ' ' → logprob: -11.87693977355957
    4. '10' → logprob: -13.75193977355957
    5. '0' → logprob: -14.87693977355957
    6. ' stdin' → logprob: -14.87693977355957
    7. '<int' → logprob: -15.12693977355957
    8. 'stdin' → logprob: -15.50193977355957
    9. '1' → logprob: -15.75193977355957
    10. '[int' → logprob: -15.75193977355957

Token 22: '(stdin' (ID: 176594)
  Prédit: '(stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(stdin' → logprob: -0.1817767173051834
    2. '(' → logprob: -2.181776762008667
    3. '(input' → logprob: -2.931776762008667
    4. '(st' → logprob: -10.306777000427246
    5. '(std' → logprob: -10.681777000427246
    6. ' (' → logprob: -12.431777000427246
    7. 'stdin' → logprob: -13.556777000427246
    8. '()' → logprob: -13.806777000427246
    9. '(ST' → logprob: -14.056777000427246
    10. '('' → logprob: -14.056777000427246

Token 23: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.0029306337237358093
    2. '.read' → logprob: -5.877930641174316
    3. '.' → logprob: -9.002930641174316
    4. '().' → logprob: -13.627930641174316
    5. '.readlines' → logprob: -14.127930641174316
    6. '.Read' → logprob: -15.127930641174316
    7. 'read' → logprob: -15.502930641174316
    8. ' .' → logprob: -16.6279296875
    9. ' readline' → logprob: -16.6279296875
    10. '.write' → logprob: -16.7529296875

Token 24: '())

' (ID: 27654)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.34764328598976135
    2. '())' → logprob: -1.347643256187439
    3. '()' → logprob: -3.5976433753967285
    4. '().' → logprob: -5.0976433753967285
    5. '(' → logprob: -9.59764289855957
    6. '()));' → logprob: -9.84764289855957
    7. '())))' → logprob: -10.22264289855957
    8. '()),' → logprob: -10.59764289855957
    9. ')' → logprob: -10.84764289855957
    10. ' ())' → logprob: -11.09764289855957

Token 25: 'min' (ID: 1493)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.3200024962425232
    2. 'result' → logprob: -2.320002555847168
    3. 'arr' → logprob: -2.695002555847168
    4. 'a' → logprob: -3.195002555847168
    5. 'numbers' → logprob: -3.320002555847168
    6. 'nums' → logprob: -5.070002555847168
    7. 'while' → logprob: -5.195002555847168
    8. 'lst' → logprob: -5.320002555847168
    9. 'results' → logprob: -5.445002555847168
    10. 'res' → logprob: -6.070002555847168

Token 26: 'sum' (ID: 12298)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.5062557458877563
    2. '_val' → logprob: -1.0062557458877563
    3. '_sum' → logprob: -4.256255626678467
    4. '_value' → logprob: -4.506255626678467
    5. '_num' → logprob: -5.881255626678467
    6. '_digit' → logprob: -7.006255626678467
    7. '_number' → logprob: -7.506255626678467
    8. '(' → logprob: -8.006256103515625
    9. '_diff' → logprob: -8.131256103515625
    10. '_x' → logprob: -8.506256103515625

Token 27: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.11801642179489136
    2. '_val' → logprob: -2.368016481399536
    3. ' =' → logprob: -4.368016242980957
    4. '_=' → logprob: -6.618016242980957
    5. '_value' → logprob: -6.868016242980957
    6. '=' → logprob: -6.868016242980957
    7. '_idx' → logprob: -7.368016242980957
    8. '_sum' → logprob: -8.743016242980957
    9. 'val' → logprob: -8.868016242980957
    10. '_x' → logprob: -8.993016242980957

Token 28: ' min' (ID: 1349)
  Prédit: 'float'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'float' → logprob: -0.635435938835144
    2. '10' → logprob: -1.385435938835144
    3. ' float' → logprob: -1.635435938835144
    4. ' ' → logprob: -4.010436058044434
    5. ' None' → logprob: -6.135436058044434
    6. '999' → logprob: -6.260436058044434
    7. '100' → logprob: -6.885436058044434
    8. 'None' → logprob: -7.385436058044434
    9. '1' → logprob: -7.760436058044434
    10. 'digit' → logprob: -8.010436058044434

Token 29: '(d' (ID: 2572)
  Prédit: '(range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(range' → logprob: -0.7055684924125671
    2. '(' → logprob: -1.330568552017212
    3. '(d' → logprob: -2.455568552017212
    4. '(n' → logprob: -2.705568552017212
    5. '([' → logprob: -3.330568552017212
    6. '(int' → logprob: -4.455568313598633
    7. '(min' → logprob: -4.705568313598633
    8. '((' → logprob: -4.830568313598633
    9. '(sum' → logprob: -5.080568313598633
    10. '(map' → logprob: -5.705568313598633

Token 30: 'igit' (ID: 16673)
  Prédit: 'igit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'igit' → logprob: -0.12392860651016235
    2. 'igits' → logprob: -2.9989285469055176
    3. 'range' → logprob: -4.623928546905518
    4. '(n' → logprob: -4.748928546905518
    5. '(range' → logprob: -4.748928546905518
    6. 'ig' → logprob: -5.123928546905518
    7. '[n' → logprob: -5.373928546905518
    8. '(min' → logprob: -5.623928546905518
    9. '[' → logprob: -5.623928546905518
    10. ')' → logprob: -5.873928546905518

Token 31: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.0002712297427933663
    2. 'sum' → logprob: -8.50027084350586
    3. '_' → logprob: -10.75027084350586
    4. '_s' → logprob: -10.75027084350586
    5. 's' → logprob: -12.12527084350586
    6. '(sum' → logprob: -12.25027084350586
    7. '_map' → logprob: -13.00027084350586
    8. ')' → logprob: -13.12527084350586
    9. '_range' → logprob: -13.62527084350586
    10. ',sum' → logprob: -14.25027084350586

Token 32: '(a' (ID: 6271)
  Prédit: '(i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -0.5800451040267944
    2. '(n' → logprob: -1.2050451040267944
    3. '(x' → logprob: -2.080045223236084
    4. '(' → logprob: -4.955045223236084
    5. '(range' → logprob: -5.455045223236084
    6. '(a' → logprob: -6.705045223236084
    7. '((' → logprob: -6.955045223236084
    8. '(k' → logprob: -7.205045223236084
    9. ')' → logprob: -8.580044746398926
    10. '(s' → logprob: -8.705044746398926

Token 33: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7325194478034973
    2. '),' → logprob: -0.8575194478034973
    3. ' -' → logprob: -3.2325193881988525
    4. ' +' → logprob: -4.107519626617432
    5. ' for' → logprob: -4.732519626617432
    6. ',' → logprob: -4.732519626617432
    7. '-' → logprob: -5.232519626617432
    8. '+b' → logprob: -5.357519626617432
    9. '+' → logprob: -6.107519626617432
    10. ' ),' → logprob: -6.857519626617432

Token 34: ' +' (ID: 659)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.24307258427143097
    2. ',' → logprob: -1.8680726289749146
    3. 'for' → logprob: -2.993072509765625
    4. ')' → logprob: -5.368072509765625
    5. ' +' → logprob: -5.868072509765625
    6. ' ,' → logprob: -7.243072509765625
    7. 'a' → logprob: -7.493072509765625
    8. ',a' → logprob: -7.493072509765625
    9. '+' → logprob: -7.743072509765625
    10. ' ' → logprob: -7.868072509765625

Token 35: ' digit' (ID: 19181)
  Prédit: ' digit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' digit' → logprob: -0.024508168920874596
    2. 'digit' → logprob: -3.899508237838745
    3. ' ' → logprob: -5.649507999420166
    4. '  ' → logprob: -8.649508476257324
    5. '   ' → logprob: -9.399508476257324
    6. ' d' → logprob: -9.774508476257324
    7. 'd' → logprob: -10.899508476257324
    8. ')' → logprob: -11.274508476257324
    9. '-digit' → logprob: -11.274508476257324
    10. ' a' → logprob: -11.399508476257324

Token 36: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.0005363515811040998
    2. 'sum' → logprob: -8.62553596496582
    3. 'b' → logprob: -8.75053596496582
    4. ')' → logprob: -10.00053596496582
    5. '_s' → logprob: -10.12553596496582
    6. '_' → logprob: -10.62553596496582
    7. '(b' → logprob: -11.50053596496582
    8. 'ent' → logprob: -11.75053596496582
    9. '(sum' → logprob: -11.75053596496582
    10. '(' → logprob: -12.00053596496582

Token 37: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.007911570370197296
    2. '(' → logprob: -4.882911682128906
    3. '(b' → logprob: -8.257911682128906
    4. '((' → logprob: -10.507911682128906
    5. ')(' → logprob: -12.257911682128906
    6. '(a' → logprob: -12.257911682128906
    7. ')' → logprob: -12.757911682128906
    8. '(i' → logprob: -13.257911682128906
    9. '(int' → logprob: -13.632911682128906
    10. ' (' → logprob: -14.007911682128906

Token 38: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.20345154404640198
    2. '-' → logprob: -1.7034515142440796
    3. '-a' → logprob: -6.203451633453369
    4. ')' → logprob: -11.453451156616211
    5. ' ' → logprob: -14.203451156616211
    6. '-а' → logprob: -14.328451156616211
    7. 'a' → logprob: -14.578451156616211
    8. ' )' → logprob: -14.703451156616211
    9. '-b' → logprob: -15.328451156616211
    10. '-)' → logprob: -16.07845115661621

Token 39: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.029763219878077507
    2. ' a' → logprob: -3.5297632217407227
    3. '	a' → logprob: -12.029763221740723
    4. ' ' → logprob: -12.779763221740723
    5. '1' → logprob: -13.404763221740723
    6. '   ' → logprob: -13.529763221740723
    7. ')a' → logprob: -14.904763221740723
    8. '  ' → logprob: -15.279763221740723
    9. ')' → logprob: -15.404763221740723
    10. ''a' → logprob: -15.779763221740723

Token 40: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0008273754501715302
    2. '))' → logprob: -7.250827312469482
    3. ' )' → logprob: -9.12582778930664
    4. ')))' → logprob: -13.62582778930664
    5. ')
' → logprob: -13.75082778930664
    6. 'a' → logprob: -13.87582778930664
    7. ')`' → logprob: -13.87582778930664
    8. ' ' → logprob: -14.25082778930664
    9. '')' → logprob: -14.37582778930664
    10. ' for' → logprob: -14.75082778930664

Token 41: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.7628188729286194
    2. 'for' → logprob: -1.2628188133239746
    3. ')' → logprob: -1.3878188133239746
    4. '(a' → logprob: -7.637818813323975
    5. ',' → logprob: -8.637819290161133
    6. '(' → logprob: -8.637819290161133
    7. ' ' → logprob: -8.887819290161133
    8. ' )' → logprob: -9.012819290161133
    9. 'a' → logprob: -10.262819290161133
    10. '   ' → logprob: -10.887819290161133

Token 42: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.023350531235337257
    2. 'a' → logprob: -3.773350477218628
    3. ' ' → logprob: -9.648350715637207
    4. ')' → logprob: -10.773350715637207
    5. '_a' → logprob: -12.023350715637207
    6. ' )' → logprob: -12.148350715637207
    7. '	a' → logprob: -12.898350715637207
    8. ')a' → logprob: -13.273350715637207
    9. '  ' → logprob: -13.898350715637207
    10. ' ' → logprob: -14.273350715637207

Token 43: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.000527534110005945
    2. 'in' → logprob: -7.875527381896973
    3. ' ' → logprob: -8.875527381896973
    4. ' a' → logprob: -12.500527381896973
    5. 'a' → logprob: -13.500527381896973
    6. ')' → logprob: -14.250527381896973
    7. '  ' → logprob: -14.375527381896973
    8. ' i' → logprob: -14.625527381896973
    9. ' )' → logprob: -14.750527381896973
    10. 'range' → logprob: -15.375527381896973

Token 44: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.048621658235788345
    2. 'range' → logprob: -3.048621654510498
    3. '(range' → logprob: -10.923622131347656
    4. ' xrange' → logprob: -11.423622131347656
    5. '	range' → logprob: -12.673622131347656
    6. ' ' → logprob: -13.173622131347656
    7. ')' → logprob: -16.798622131347656
    8. '[' → logprob: -17.173622131347656
    9. ' ' → logprob: -17.423622131347656
    10. '  ' → logprob: -17.423622131347656

Token 45: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00026217024424113333
    2. '(n' → logprob: -8.250262260437012
    3. ' (' → logprob: -14.250262260437012
    4. '((' → logprob: -15.875262260437012
    5. '1' → logprob: -16.625261306762695
    6. '(
' → logprob: -17.750261306762695
    7. ')' → logprob: -18.500261306762695
    8. '(i' → logprob: -18.875261306762695
    9. '(a' → logprob: -19.125261306762695
    10. '()' → logprob: -19.250261306762695

Token 46: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.017985457554459572
    2. 'n' → logprob: -4.2679853439331055
    3. '(' → logprob: -6.2679853439331055
    4. '(n' → logprob: -6.2679853439331055
    5. ' n' → logprob: -11.767985343933105
    6. ' ' → logprob: -11.892985343933105
    7. '0' → logprob: -13.517985343933105
    8. '   ' → logprob: -13.517985343933105
    9. '	n' → logprob: -13.642985343933105
    10. '2' → logprob: -14.142985343933105

Token 47: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.024176359176635742
    2. ',n' → logprob: -4.274176597595215
    3. '(n' → logprob: -4.899176597595215
    4. ' ,' → logprob: -6.149176597595215
    5. 'n' → logprob: -8.274176597595215
    6. '(' → logprob: -9.274176597595215
    7. ' n' → logprob: -11.774176597595215
    8. ' ' → logprob: -11.774176597595215
    9. '1' → logprob: -12.149176597595215
    10. ' (' → logprob: -12.899176597595215

Token 48: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.007608040235936642
    2. ' n' → logprob: -4.882607936859131
    3. '(n' → logprob: -13.882608413696289
    4. '	n' → logprob: -14.507608413696289
    5. '   ' → logprob: -15.757608413696289
    6. ' ' → logprob: -16.38260841369629
    7. ')n' → logprob: -16.38260841369629
    8. '    ' → logprob: -17.88260841369629
    9. '<n' → logprob: -18.13260841369629
    10. ')' → logprob: -18.13260841369629

Token 49: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.3520834147930145
    2. ')' → logprob: -1.227083444595337
    3. ' ))' → logprob: -6.227083206176758
    4. ' )' → logprob: -7.477083206176758
    5. ')))' → logprob: -7.602083206176758
    6. '+' → logprob: -8.102083206176758
    7. ' ' → logprob: -8.727083206176758
    8. '));' → logprob: -10.977083206176758
    9. '0' → logprob: -11.727083206176758
    10. ')}' → logprob: -11.852083206176758

Token 50: 'print' (ID: 1598)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.36592334508895874
    2. 'print' → logprob: -1.3659234046936035
    3. '<|end|>' → logprob: -3.4909234046936035
    4. '\n' → logprob: -4.9909234046936035
    5. '
' → logprob: -5.7409234046936035
    6. ' print' → logprob: -5.8659234046936035
    7. ' ' → logprob: -6.2409234046936035
    8. '  
' → logprob: -6.4909234046936035
    9. ')
' → logprob: -6.4909234046936035
    10. ' )' → logprob: -7.7409234046936035

Token 51: '(min' (ID: 26035)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0005715019651688635
    2. '(min' → logprob: -7.7505717277526855
    3. '('' → logprob: -9.625571250915527
    4. '("("' → logprob: -10.125571250915527
    5. '(n' → logprob: -11.000571250915527
    6. '(a' → logprob: -12.625571250915527
    7. '()' → logprob: -13.125571250915527
    8. '(sum' → logprob: -13.250571250915527
    9. '((' → logprob: -13.500571250915527
    10. ' (' → logprob: -13.500571250915527

Token 52: 'sum' (ID: 12298)
  Prédit: 'sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sum' → logprob: -4.143808109802194e-05
    2. ')' → logprob: -10.250041007995605
    3. 'min' → logprob: -12.375041007995605
    4. '(sum' → logprob: -14.625041007995605
    5. 'su' → logprob: -15.000041007995605
    6. 's' → logprob: -15.250041007995605
    7. 'a' → logprob: -15.750041007995605
    8. '))' → logprob: -16.375041961669922
    9. ',' → logprob: -16.375041961669922
    10. ' )' → logprob: -16.625041961669922

Token 53: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -9.984787902794778e-05
    2. '))' → logprob: -9.625100135803223
    3. ' )' → logprob: -10.500100135803223
    4. '`)' → logprob: -13.000100135803223
    5. ')
' → logprob: -13.500100135803223
    6. ')`' → logprob: -14.625100135803223
    7. '')' → logprob: -14.750100135803223
    8. ')))' → logprob: -14.750100135803223
    9. '[' → logprob: -16.125099182128906
    10. '*)' → logprob: -16.125099182128906


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 51
Tokens correctement prédits (1ère position, stricte): 24
Tokens correctement prédits (1ère position, avec adaptation): 24
Tokens correctement prédits (top 10): 40
Précision stricte (1ère position): 47.06%
Précision adaptée (1ère position): 47.06%
Précision (top 10): 78.43%
================================================================================
