================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:03:56
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
# Bon, je commence par lire la ligne d'entrée
valeurs = input().split()

# Je vais tout mettre en entiers, c'est plus simple
x = int(valeurs[0])
y = int(valeurs[1])
z = int(valeurs[2]) # hmm, j'aurais pu utiliser une boucle mais bon

# On vérifie si tous sont pareils, sinon tant pis
if (x == y) and (y == z):
    print("Yes")
else:
    print("Nope")  # j'aime mieux ce message, mais c'est pas grave si c'est un peu différent
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '#' (ID: 2)
  → Token d'amorce (pas de prédiction)

Token 1: ' Bon' (ID: 12658)
  → Token d'amorce (pas de prédiction)

Token 2: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 3: ' je' (ID: 1264)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.16662125289440155
    2. ' je' → logprob: -3.166621208190918
    3. '```' → logprob: -3.291621208190918
    4. '  ' → logprob: -3.416621208190918
    5. ' e' → logprob: -5.291621208190918
    6. ' t' → logprob: -5.291621208190918
    7. 'jour' → logprob: -5.541621208190918
    8. '`' → logprob: -5.666621208190918
    9. 'e' → logprob: -6.041621208190918
    10. ' ```' → logprob: -6.291621208190918

Token 4: ' commence' (ID: 44755)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.003975342959165573
    2. 's' → logprob: -6.2539753913879395
    3. '_' → logprob: -7.6289753913879395
    4. ' suis' → logprob: -7.6289753913879395
    5. ' vais' → logprob: -8.003974914550781
    6. ' ```' → logprob: -8.878974914550781
    7. ' continue' → logprob: -9.003974914550781
    8. '  ' → logprob: -9.253974914550781
    9. 'n' → logprob: -9.753974914550781
    10. ' veux' → logprob: -10.253974914550781

Token 5: ' par' (ID: 686)
  Prédit: '!'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '!' → logprob: -1.2336400747299194
    2. '#' → logprob: -1.3586400747299194
    3. '.' → logprob: -1.6086400747299194
    4. ' ' → logprob: -2.358640193939209
    5. ',' → logprob: -2.483640193939209
    6. '```' → logprob: -3.858640193939209
    7. ':' → logprob: -4.608640193939209
    8. '\' → logprob: -4.733640193939209
    9. '\n' → logprob: -4.983640193939209
    10. '...' → logprob: -5.358640193939209

Token 6: ' lire' (ID: 46082)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.536954402923584
    2. ' #' → logprob: -1.786954402923584
    3. '#' → logprob: -2.286954402923584
    4. '`' → logprob: -2.411954402923584
    5. '_' → logprob: -2.786954402923584
    6. ' ' → logprob: -2.911954402923584
    7. 'une' → logprob: -3.036954402923584
    8. 'l' → logprob: -3.161954402923584
    9. ' un' → logprob: -3.536954402923584
    10. ' une' → logprob: -3.661954402923584

Token 7: ' la' (ID: 557)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.22356805205345154
    2. 'le' → logprob: -2.8485679626464844
    3. ' le' → logprob: -3.3485679626464844
    4. '.' → logprob: -3.3485679626464844
    5. '```' → logprob: -4.098567962646484
    6. '_' → logprob: -4.223567962646484
    7. ',' → logprob: -4.973567962646484
    8. 'l' → logprob: -5.223567962646484
    9. ' la' → logprob: -5.223567962646484
    10. ' #' → logprob: -5.598567962646484

Token 8: ' ligne' (ID: 19583)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.04396875575184822
    2. ' ' → logprob: -3.918968677520752
    3. 'suite' → logprob: -5.418968677520752
    4. 'ligne' → logprob: -5.668968677520752
    5. 'l' → logprob: -5.918968677520752
    6. 'd' → logprob: -6.168968677520752
    7. 'file' → logprob: -6.543968677520752
    8. 'data' → logprob: -6.543968677520752
    9. '#' → logprob: -7.168968677520752
    10. 'prem' → logprob: -7.293968677520752

Token 9: ' d' (ID: 272)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.9659887552261353
    2. '\n' → logprob: -1.3409887552261353
    3. 's' → logprob: -2.3409886360168457
    4. '.' → logprob: -2.4659886360168457
    5. ' ' → logprob: -2.4659886360168457
    6. '\' → logprob: -3.8409886360168457
    7. '_' → logprob: -3.9659886360168457
    8. ' #' → logprob: -4.715988636016846
    9. '```' → logprob: -4.965988636016846
    10. '`' → logprob: -5.090988636016846

Token 10: ''entrée' (ID: 115820)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.01358590554445982
    2. ''entrée' → logprob: -4.763586044311523
    3. 'é' → logprob: -5.763586044311523
    4. 'entrée' → logprob: -7.263586044311523
    5. 'u' → logprob: -8.263586044311523
    6. ''' → logprob: -8.513586044311523
    7. 'es' → logprob: -9.013586044311523
    8. 'a' → logprob: -9.013586044311523
    9. ''é' → logprob: -9.263586044311523
    10. 'ex' → logprob: -9.763586044311523

Token 11: '
' (ID: 198)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -1.2677414417266846
    2. '#' → logprob: -1.6427414417266846
    3. '.' → logprob: -2.0177414417266846
    4. 'input' → logprob: -2.5177414417266846
    5. 's' → logprob: -3.0177414417266846
    6. '`' → logprob: -3.0177414417266846
    7. ',' → logprob: -3.2677414417266846
    8. 'e' → logprob: -3.5177414417266846
    9. ' ' → logprob: -3.6427414417266846
    10. 'i' → logprob: -3.8927414417266846

Token 12: 'val' (ID: 1105)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.5722875595092773
    2. 'input' → logprob: -2.1972875595092773
    3. 'l' → logprob: -2.3222875595092773
    4. 'i' → logprob: -2.6972875595092773
    5. '```' → logprob: -3.4472875595092773
    6. '`' → logprob: -3.8222875595092773
    7. 'e' → logprob: -4.072287559509277
    8. '.' → logprob: -4.322287559509277
    9. 's' → logprob: -4.322287559509277
    10. ' ' → logprob: -4.322287559509277

Token 13: 'eurs' (ID: 17634)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.01898123323917389
    2. ' ' → logprob: -4.893981456756592
    3. 'input' → logprob: -5.768981456756592
    4. ' line' → logprob: -6.018981456756592
    5. ' val' → logprob: -7.143981456756592
    6. 'ue' → logprob: -7.393981456756592
    7. ' e' → logprob: -7.393981456756592
    8. 'e' → logprob: -7.518981456756592
    9. 'u' → logprob: -7.768981456756592
    10. ' u' → logprob: -8.018980979919434

Token 14: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.31191083788871765
    2. ' =' → logprob: -1.81191086769104
    3. '[' → logprob: -3.31191086769104
    4. '_input' → logprob: -3.43691086769104
    5. '.' → logprob: -4.686910629272461
    6. '_ent' → logprob: -4.686910629272461
    7. 's' → logprob: -5.686910629272461
    8. '_l' → logprob: -5.936910629272461
    9. ' ' → logprob: -6.686910629272461
    10. '[]' → logprob: -7.061910629272461

Token 15: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.22552375495433807
    2. 'input' → logprob: -1.6005237102508545
    3. ' ' → logprob: -10.225523948669434
    4. '	input' → logprob: -11.600523948669434
    5. ' ' → logprob: -11.850523948669434
    6. 'f' → logprob: -12.100523948669434
    7. '=input' → logprob: -12.225523948669434
    8. '[]' → logprob: -12.225523948669434
    9. ' list' → logprob: -12.350523948669434
    10. ' f' → logprob: -12.600523948669434

Token 16: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.001272258348762989
    2. '()' → logprob: -7.376272201538086
    3. '("("' → logprob: -7.751272201538086
    4. '('' → logprob: -9.501272201538086
    5. '(
' → logprob: -10.001272201538086
    6. '("")' → logprob: -11.126272201538086
    7. ' (' → logprob: -11.251272201538086
    8. '(

' → logprob: -11.376272201538086
    9. ' ' → logprob: -11.626272201538086
    10. '```' → logprob: -12.001272201538086

Token 17: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.018172185868024826
    2. 'strip' → logprob: -4.018172264099121
    3. ' split' → logprob: -11.018172264099121
    4. 'rstrip' → logprob: -12.143172264099121
    5. 's' → logprob: -15.268172264099121
    6. 'spl' → logprob: -15.768172264099121
    7. ' strip' → logprob: -17.268171310424805
    8. 'replace' → logprob: -17.268171310424805
    9. '(split' → logprob: -18.268171310424805
    10. '```' → logprob: -18.393171310424805

Token 18: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01186276413500309
    2. '('' → logprob: -4.636862754821777
    3. '("("' → logprob: -6.261862754821777
    4. '()' → logprob: -9.636862754821777
    5. '(`' → logprob: -10.386862754821777
    6. '(
' → logprob: -10.636862754821777
    7. '(

' → logprob: -10.761862754821777
    8. '((' → logprob: -11.136862754821777
    9. ' (' → logprob: -11.886862754821777
    10. ''' → logprob: -11.886862754821777

Token 19: '#' (ID: 2)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.05374111235141754
    2. '#' → logprob: -3.053741216659546
    3. '.' → logprob: -6.928740978240967
    4. '=' → logprob: -7.428740978240967
    5. 'v' → logprob: -7.803740978240967
    6. ',' → logprob: -8.178741455078125
    7. 'a' → logprob: -8.178741455078125
    8. '(' → logprob: -8.303741455078125
    9. 'print' → logprob: -8.428741455078125
    10. 'for' → logprob: -8.678741455078125

Token 20: ' Je' (ID: 4678)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.6474014520645142
    2. 'for' → logprob: -2.3974013328552246
    3. ' a' → logprob: -2.8974013328552246
    4. 'nombre' → logprob: -2.8974013328552246
    5. 'n' → logprob: -3.1474013328552246
    6. 'val' → logprob: -3.2724013328552246
    7. '#' → logprob: -3.2724013328552246
    8. 'total' → logprob: -3.6474013328552246
    9. ' somme' → logprob: -4.022401332855225
    10. 'x' → logprob: -4.147401332855225

Token 21: ' vais' (ID: 42975)
  Prédit: 'veux'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'veux' → logprob: -0.8269838094711304
    2. ' veux' → logprob: -2.07698392868042
    3. 'convert' → logprob: -2.32698392868042
    4. 'voud' → logprob: -3.20198392868042
    5. 'r' → logprob: -3.70198392868042
    6. ' vais' → logprob: -3.70198392868042
    7. 'val' → logprob: -3.82698392868042
    8. 'vou' → logprob: -4.07698392868042
    9. '#' → logprob: -4.20198392868042
    10. 'for' → logprob: -4.20198392868042

Token 22: ' tout' (ID: 5501)
  Prédit: ' parcour'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' parcour' → logprob: -0.38206666707992554
    2. 'tr' → logprob: -3.1320667266845703
    3. ' ' → logprob: -3.6320667266845703
    4. ' les' → logprob: -3.8820667266845703
    5. 'les' → logprob: -4.00706672668457
    6. 'r' → logprob: -4.25706672668457
    7. 'chercher' → logprob: -4.25706672668457
    8. ' convertir' → logprob: -4.38206672668457
    9. 'par' → logprob: -4.50706672668457
    10. ' compter' → logprob: -4.63206672668457

Token 23: ' mettre' (ID: 25339)
  Prédit: ' convertir'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' convertir' → logprob: -1.6461632251739502
    2. ' continuer' → logprob: -2.39616322517395
    3. 'contin' → logprob: -2.64616322517395
    4. ' essayer' → logprob: -2.89616322517395
    5. 'tr' → logprob: -3.02116322517395
    6. 'mettre' → logprob: -3.14616322517395
    7. ' ' → logprob: -3.27116322517395
    8. '```' → logprob: -3.39616322517395
    9. 'les' → logprob: -3.52116322517395
    10. 'r' → logprob: -3.64616322517395

Token 24: ' en' (ID: 469)
  Prédit: ' en'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.7766023874282837
    2. 'en' → logprob: -1.1516023874282837
    3. 'dans' → logprob: -1.9016023874282837
    4. ' dans' → logprob: -4.026602268218994
    5. 'ensemble' → logprob: -4.276602268218994
    6. 'au' → logprob: -4.776602268218994
    7. '_en' → logprob: -5.151602268218994
    8. 's' → logprob: -5.151602268218994
    9. 'sur' → logprob: -5.776602268218994
    10. 'les' → logprob: -5.776602268218994

Token 25: ' ent' (ID: 1121)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -1.3830339908599854
    2. 'liste' → logprob: -1.3830339908599854
    3. 'ma' → logprob: -1.5080339908599854
    4. 'minus' → logprob: -2.3830339908599854
    5. 'maj' → logprob: -2.5080339908599854
    6. 'int' → logprob: -3.1330339908599854
    7. '```' → logprob: -3.6330339908599854
    8. 'chaine' → logprob: -4.508033752441406
    9. 'une' → logprob: -5.008033752441406
    10. 'uppercase' → logprob: -6.133033752441406

Token 26: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.16002759337425232
    2. 'ier' → logprob: -2.410027503967285
    3. 'i' → logprob: -3.410027503967285
    4. 'ières' → logprob: -4.160027503967285
    5. 'ière' → logprob: -5.535027503967285
    6. '```' → logprob: -6.035027503967285
    7. '   ' → logprob: -7.847527503967285
    8. 'ié' → logprob: -8.035027503967285
    9. '#' → logprob: -8.222527503967285
    10. 'er' → logprob: -8.597527503967285

Token 27: ',' (ID: 11)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.7434875965118408
    2. ' ' → logprob: -0.8684875965118408
    3. ' valeurs' → logprob: -3.118487596511841
    4. ' val' → logprob: -3.868487596511841
    5. 'values' → logprob: -4.493487358093262
    6. ' 
' → logprob: -5.243487358093262
    7. ',' → logprob: -5.243487358093262
    8. 's' → logprob: -5.618487358093262
    9. 'v' → logprob: -6.118487358093262
    10. '[' → logprob: -6.118487358093262

Token 28: ' c' (ID: 274)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.07719863951206207
    2. ' valeurs' → logprob: -3.3271987438201904
    3. ' val' → logprob: -4.452198505401611
    4. 'for' → logprob: -4.952198505401611
    5. ' for' → logprob: -5.077198505401611
    6. 'ent' → logprob: -5.452198505401611
    7. 'values' → logprob: -5.827198505401611
    8. '[' → logprob: -6.702198505401611
    9. 'int' → logprob: -7.327198505401611
    10. '[val' → logprob: -7.452198505401611

Token 29: ''est' (ID: 6616)
  Prédit: 'ar'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ar' → logprob: -0.25307345390319824
    2. 'omme' → logprob: -1.6280734539031982
    3. 'omm' → logprob: -5.128073692321777
    4. 'on' → logprob: -5.503073692321777
    5. 'e' → logprob: -5.753073692321777
    6. 'om' → logprob: -5.753073692321777
    7. 'ont' → logprob: -6.378073692321777
    8. ''' → logprob: -6.378073692321777
    9. ''est' → logprob: -6.628073692321777
    10. '#' → logprob: -7.003073692321777

Token 30: ' plus' (ID: 2932)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.3675975799560547
    2. ' a' → logprob: -1.9925975799560547
    3. ' plus' → logprob: -2.1175975799560547
    4. ' mieux' → logprob: -2.4925975799560547
    5. ' simple' → logprob: -3.1175975799560547
    6. ' bien' → logprob: -3.1175975799560547
    7. 'bien' → logprob: -3.6175975799560547
    8. ' à' → logprob: -3.7425975799560547
    9. ' un' → logprob: -3.8675975799560547
    10. ' =' → logprob: -3.9925975799560547

Token 31: ' simple' (ID: 4705)
  Prédit: 'pr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pr' → logprob: -0.679166853427887
    2. ' simple' → logprob: -1.0541667938232422
    3. ' sûr' → logprob: -3.554166793823242
    4. 'simple' → logprob: -3.679166793823242
    5. ' pratique' → logprob: -4.554166793823242
    6. ' safe' → logprob: -4.554166793823242
    7. 'com' → logprob: -4.679166793823242
    8. 'pro' → logprob: -4.679166793823242
    9. ' facile' → logprob: -4.679166793823242
    10. 'comm' → logprob: -4.929166793823242

Token 32: '
' (ID: 198)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.6690918207168579
    2. ' ' → logprob: -1.419091820716858
    3. ' valeurs' → logprob: -2.1690917015075684
    4. 'values' → logprob: -3.2940917015075684
    5. ' 
' → logprob: -3.6690917015075684
    6. ' val' → logprob: -4.294091701507568
    7. '<|end|>' → logprob: -4.544091701507568
    8. ',' → logprob: -4.919091701507568
    9. ' for' → logprob: -5.169091701507568
    10. ' values' → logprob: -5.169091701507568

Token 33: 'x' (ID: 87)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.005795358680188656
    2. 'ent' → logprob: -6.130795478820801
    3. 'n' → logprob: -6.630795478820801
    4. 'values' → logprob: -7.130795478820801
    5. ' valeurs' → logprob: -7.630795478820801
    6. 'vals' → logprob: -8.2557954788208
    7. ' val' → logprob: -8.6307954788208
    8. 'numbers' → logprob: -8.7557954788208
    9. 'nums' → logprob: -9.1307954788208
    10. 'for' → logprob: -9.1307954788208

Token 34: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.021748971194028854
    2. '=' → logprob: -4.271749019622803
    3. 's' → logprob: -5.896749019622803
    4. '_' → logprob: -6.146749019622803
    5. '=int' → logprob: -6.896749019622803
    6. '_val' → logprob: -7.271749019622803
    7. '_values' → logprob: -7.771749019622803
    8. '_vals' → logprob: -8.021748542785645
    9. ' ' → logprob: -9.646748542785645
    10. ',' → logprob: -10.396748542785645

Token 35: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.01816398836672306
    2. 'int' → logprob: -4.018164157867432
    3. ' ' → logprob: -12.143163681030273
    4. '[int' → logprob: -12.268163681030273
    5. ' ' → logprob: -13.643163681030273
    6. ' in' → logprob: -13.893163681030273
    7. '  ' → logprob: -14.643163681030273
    8. '=int' → logprob: -14.893163681030273
    9. '	int' → logprob: -15.018163681030273
    10. '<int' → logprob: -15.518163681030273

Token 36: '(val' (ID: 17391)
  Prédit: '(val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(val' → logprob: -0.006716555915772915
    2. '(' → logprob: -5.006716728210449
    3. '(x' → logprob: -15.00671672821045
    4. ' (' → logprob: -15.38171672821045
    5. '(
' → logprob: -16.131715774536133
    6. '(vals' → logprob: -16.131715774536133
    7. '(valor' → logprob: -16.381715774536133
    8. '(var' → logprob: -16.506715774536133
    9. '()' → logprob: -16.631715774536133
    10. '(s' → logprob: -16.881715774536133

Token 37: 'eurs' (ID: 17634)
  Prédit: 'eurs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'eurs' → logprob: -0.004031737335026264
    2. 'e' → logprob: -5.879031658172607
    3. 'eur' → logprob: -7.129031658172607
    4. 'ue' → logprob: -9.379032135009766
    5. 'uers' → logprob: -9.629032135009766
    6. 'ers' → logprob: -9.879032135009766
    7. 'eu' → logprob: -10.129032135009766
    8. 'reurs' → logprob: -10.254032135009766
    9. 'eux' → logprob: -10.379032135009766
    10. '(' → logprob: -10.754032135009766

Token 38: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.9361264946837764e-07
    2. ' [' → logprob: -15.875
    3. '0' → logprob: -19.5
    4. '[
' → logprob: -19.75
    5. '(' → logprob: -20.5
    6. ')' → logprob: -20.625
    7. ' ' → logprob: -21.375
    8. '[i' → logprob: -21.375
    9. '[x' → logprob: -21.875
    10. '\[' → logprob: -22.25

Token 39: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.664371848164592e-05
    2. ' ' → logprob: -11.125016212463379
    3. '1' → logprob: -13.250016212463379
    4. ')' → logprob: -17.375017166137695
    5. '2' → logprob: -19.500017166137695
    6. '۰' → logprob: -20.000017166137695
    7. '  ' → logprob: -20.562517166137695
    8. '   ' → logprob: -20.625017166137695
    9. ']' → logprob: -20.687517166137695
    10. ''' → logprob: -20.937517166137695

Token 40: '])
' (ID: 5169)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.02096235193312168
    2. ')' → logprob: -3.8959622383117676
    3. ']' → logprob: -8.145962715148926
    4. ' ])' → logprob: -9.145962715148926
    5. '])
' → logprob: -12.145962715148926
    6. ' )' → logprob: -12.270962715148926
    7. ''])' → logprob: -12.645962715148926
    8. ')]' → logprob: -12.770962715148926
    9. ')])' → logprob: -13.145962715148926
    10. '))' → logprob: -13.145962715148926

Token 41: 'y' (ID: 88)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1926051378250122
    2. '<|end|>' → logprob: -2.0676050186157227
    3. '
' → logprob: -3.6926050186157227
    4. '+' → logprob: -5.192605018615723
    5. ' ' → logprob: -5.317605018615723
    6. '```' → logprob: -6.067605018615723
    7. ' 
' → logprob: -6.192605018615723
    8. 'x' → logprob: -6.567605018615723
    9. ' )' → logprob: -6.942605018615723
    10. '#' → logprob: -7.067605018615723

Token 42: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.014225211925804615
    2. '=' → logprob: -4.264225006103516
    3. ' ' → logprob: -10.514225006103516
    4. ')' → logprob: -10.764225006103516
    5. '=int' → logprob: -12.139225006103516
    6. '[' → logprob: -12.889225006103516
    7. ',' → logprob: -13.889225006103516
    8. '_' → logprob: -14.139225006103516
    9. 's' → logprob: -14.389225006103516
    10. ' )' → logprob: -14.639225006103516

Token 43: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.12693145871162415
    2. 'int' → logprob: -2.1269314289093018
    3. ' ' → logprob: -13.501931190490723
    4. '(int' → logprob: -14.001931190490723
    5. '=int' → logprob: -14.626931190490723
    6. 'x' → logprob: -15.376931190490723
    7. ' x' → logprob: -15.501931190490723
    8. ' ' → logprob: -16.00193214416504
    9. '[int' → logprob: -16.12693214416504
    10. '<int' → logprob: -16.75193214416504

Token 44: '(val' (ID: 17391)
  Prédit: '(val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(val' → logprob: -0.0017044597771018744
    2. '(' → logprob: -6.376704692840576
    3. ' (' → logprob: -14.251704216003418
    4. '[val' → logprob: -14.751704216003418
    5. '(x' → logprob: -15.001704216003418
    6. '(valor' → logprob: -15.501704216003418
    7. 'val' → logprob: -15.626704216003418
    8. '(var' → logprob: -15.626704216003418
    9. '(
' → logprob: -16.001705169677734
    10. '```' → logprob: -16.876705169677734

Token 45: 'eurs' (ID: 17634)
  Prédit: '(val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(val' → logprob: -0.41148677468299866
    2. 'val' → logprob: -1.2864867448806763
    3. '[val' → logprob: -3.911486864089966
    4. 'ur' → logprob: -4.286486625671387
    5. 'eurs' → logprob: -4.411486625671387
    6. '(' → logprob: -4.786486625671387
    7. 'eur' → logprob: -6.161486625671387
    8. '[' → logprob: -7.411486625671387
    9. 'uer' → logprob: -7.536486625671387
    10. 'ures' → logprob: -8.036486625671387

Token 46: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -2.069664333248511e-05
    2. '][' → logprob: -11.750020980834961
    3. ')' → logprob: -12.750020980834961
    4. '[
' → logprob: -12.750020980834961
    5. ']' → logprob: -13.125020980834961
    6. '])' → logprob: -13.250020980834961
    7. ' [' → logprob: -13.625020980834961
    8. '1' → logprob: -14.000020980834961
    9. '```' → logprob: -15.000020980834961
    10. '2' → logprob: -15.750020980834961

Token 47: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.0280383548888494e-06
    2. ' ' → logprob: -14.375000953674316
    3. '0' → logprob: -15.500000953674316
    4. '])' → logprob: -16.625001907348633
    5. ')' → logprob: -17.125001907348633
    6. ']' → logprob: -18.375001907348633
    7. '2' → logprob: -18.375001907348633
    8. '```' → logprob: -18.500001907348633
    9. '   ' → logprob: -19.875001907348633
    10. '-' → logprob: -20.312501907348633

Token 48: '])
' (ID: 5169)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00024239711638074368
    2. '])' → logprob: -8.375242233276367
    3. '))' → logprob: -11.875242233276367
    4. ']' → logprob: -13.125242233276367
    5. ' )' → logprob: -14.375242233276367
    6. '）' → logprob: -14.375242233276367
    7. ')])' → logprob: -14.625242233276367
    8. ')]' → logprob: -15.125242233276367
    9. '`)' → logprob: -15.125242233276367
    10. ')
' → logprob: -15.500242233276367

Token 49: 'z' (ID: 89)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.8639745116233826
    2. '#' → logprob: -1.1139745712280273
    3. '\n' → logprob: -2.8639745712280273
    4. 'if' → logprob: -2.9889745712280273
    5. '<|end|>' → logprob: -3.1139745712280273
    6. ' 
' → logprob: -3.2389745712280273
    7. ' ' → logprob: -4.488974571228027
    8. '  
' → logprob: -4.863974571228027
    9. ')' → logprob: -5.113974571228027
    10. ' if' → logprob: -5.613974571228027

Token 50: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.04862279072403908
    2. '=' → logprob: -3.0486228466033936
    3. ')' → logprob: -10.798623085021973
    4. '=int' → logprob: -11.673623085021973
    5. 's' → logprob: -13.423623085021973
    6. ' ' → logprob: -14.048623085021973
    7. ',' → logprob: -14.298623085021973
    8. 'space' → logprob: -14.673623085021973
    9. ' ' → logprob: -14.923623085021973
    10. ']' → logprob: -15.173623085021973

Token 51: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.07889463007450104
    2. 'int' → logprob: -2.57889461517334
    3. '(int' → logprob: -12.95389461517334
    4. '=int' → logprob: -13.82889461517334
    5. ' ' → logprob: -14.70389461517334
    6. ' ' → logprob: -14.82889461517334
    7. '0' → logprob: -15.20389461517334
    8. '[int' → logprob: -15.45389461517334
    9. '<int' → logprob: -16.078895568847656
    10. '	int' → logprob: -16.078895568847656

Token 52: '(val' (ID: 17391)
  Prédit: '(val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(val' → logprob: -0.03805388882756233
    2. '(' → logprob: -3.2880539894104004
    3. '(x' → logprob: -12.288053512573242
    4. '(valor' → logprob: -13.538053512573242
    5. 'val' → logprob: -13.663053512573242
    6. ' (' → logprob: -13.663053512573242
    7. '(var' → logprob: -13.913053512573242
    8. '(
' → logprob: -14.038053512573242
    9. '(vals' → logprob: -15.038053512573242
    10. '[val' → logprob: -15.163053512573242

Token 53: 'eurs' (ID: 17634)
  Prédit: '(val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(val' → logprob: -0.0069210343062877655
    2. 'val' → logprob: -5.00692081451416
    3. '[val' → logprob: -8.75692081451416
    4. ')' → logprob: -10.88192081451416
    5. '(' → logprob: -11.13192081451416
    6. '```' → logprob: -13.25692081451416
    7. ',val' → logprob: -13.38192081451416
    8. 'eur' → logprob: -13.75692081451416
    9. '	val' → logprob: -14.00692081451416
    10. ')(' → logprob: -14.00692081451416

Token 54: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -3.7697225252486533e-06
    2. '3' → logprob: -13.375003814697266
    3. ')' → logprob: -14.250003814697266
    4. '[
' → logprob: -14.375003814697266
    5. '(' → logprob: -14.625003814697266
    6. '2' → logprob: -15.875003814697266
    7. '```' → logprob: -16.250003814697266
    8. '0' → logprob: -16.250003814697266
    9. '   ' → logprob: -16.750003814697266
    10. ' [' → logprob: -17.375003814697266

Token 55: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -2.696889623621246e-06
    2. '0' → logprob: -14.00000286102295
    3. ' ' → logprob: -14.00000286102295
    4. '```' → logprob: -15.12500286102295
    5. '   ' → logprob: -15.93750286102295
    6. '1' → logprob: -16.437501907348633
    7. '])' → logprob: -16.687501907348633
    8. ']' → logprob: -16.875001907348633
    9. '  ' → logprob: -16.937501907348633
    10. '

' → logprob: -17.125001907348633

Token 56: '])' (ID: 4636)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0003613256849348545
    2. '])' → logprob: -8.125361442565918
    3. ']' → logprob: -9.875361442565918
    4. ' )' → logprob: -12.625361442565918
    5. ')
' → logprob: -12.750361442565918
    6. '）' → logprob: -13.250361442565918
    7. '))' → logprob: -13.500361442565918
    8. '`)' → logprob: -13.875361442565918
    9. ')]' → logprob: -14.000361442565918
    10. ')])' → logprob: -14.125361442565918

Token 57: ' #' (ID: 1069)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.09236709028482437
    2. 'if' → logprob: -2.592367172241211
    3. '<|end|>' → logprob: -5.842367172241211
    4. '#' → logprob: -6.092367172241211
    5. ' if' → logprob: -6.342367172241211
    6. '' → logprob: -6.842367172241211
    7. '\n' → logprob: -6.842367172241211
    8. '```' → logprob: -6.967367172241211
    9. ' 
' → logprob: -7.217367172241211
    10. 'i' → logprob: -7.467367172241211

Token 58: ' hmm' (ID: 186402)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.32135966420173645
    2. '#' → logprob: -2.696359634399414
    3. 'if' → logprob: -2.821359634399414
    4. ' 
' → logprob: -3.071359634399414
    5. ' ' → logprob: -3.446359634399414
    6. '<|end|>' → logprob: -3.571359634399414
    7. ' if' → logprob: -4.696359634399414
    8. '\n' → logprob: -5.446359634399414
    9. '' → logprob: -5.571359634399414
    10. 'i' → logprob: -5.696359634399414

Token 59: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 60: ' j' (ID: 441)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3361271619796753
    2. ' z' → logprob: -2.836127281188965
    3. ' x' → logprob: -3.211127281188965
    4. 'z' → logprob: -3.211127281188965
    5. ' if' → logprob: -3.586127281188965
    6. 'x' → logprob: -3.961127281188965
    7. ' max' → logprob: -4.211127281188965
    8. ' a' → logprob: -4.711127281188965
    9. ' je' → logprob: -4.961127281188965
    10. ' y' → logprob: -5.336127281188965

Token 61: ''aurais' (ID: 149917)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.4119828939437866
    2. ''ai' → logprob: -1.9119828939437866
    3. ''' → logprob: -3.036983013153076
    4. ''espère' → logprob: -3.036983013153076
    5. ''aime' → logprob: -3.536983013153076
    6. 'a' → logprob: -3.661983013153076
    7. '<|end|>' → logprob: -4.661983013153076
    8. ''oubl' → logprob: -5.286983013153076
    9. '’espère' → logprob: -5.661983013153076
    10. ''aurais' → logprob: -6.036983013153076

Token 62: ' pu' (ID: 2923)
  Prédit: 'pu'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pu' → logprob: -0.5027416944503784
    2. 'pe' → logprob: -1.5027416944503784
    3. 'd' → logprob: -2.752741813659668
    4. 'm' → logprob: -3.502741813659668
    5. 'pré' → logprob: -4.502741813659668
    6. 'bien' → logprob: -4.627741813659668
    7. 'du' → logprob: -4.752741813659668
    8. 'sans' → logprob: -5.127741813659668
    9. ' préféré' → logprob: -5.377741813659668
    10. 'put' → logprob: -5.502741813659668

Token 63: ' utiliser' (ID: 43227)
  Prédit: 'prendre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prendre' → logprob: -1.2523117065429688
    2. 'range' → logprob: -1.8773117065429688
    3. 'int' → logprob: -2.3773117065429688
    4. 'mettre' → logprob: -2.7523117065429688
    5. ' utiliser' → logprob: -2.7523117065429688
    6. 'x' → logprob: -3.0023117065429688
    7. ' prendre' → logprob: -3.1273117065429688
    8. 'split' → logprob: -3.3773117065429688
    9. 'faire' → logprob: -3.6273117065429688
    10. 'just' → logprob: -4.252311706542969

Token 64: ' une' (ID: 2463)
  Prédit: ' map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -1.1270750761032104
    2. 'map' → logprob: -2.0020751953125
    3. '_' → logprob: -2.2520751953125
    4. ' x' → logprob: -2.6270751953125
    5. 'val' → logprob: -2.7520751953125
    6. ' une' → logprob: -3.0020751953125
    7. 'x' → logprob: -3.3770751953125
    8. ' val' → logprob: -3.8770751953125
    9. 'int' → logprob: -4.0020751953125
    10. ' un' → logprob: -4.2520751953125

Token 65: ' boucle' (ID: 174211)
  Prédit: ' boucle'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' boucle' → logprob: -1.1501846313476562
    2. 'tuple' → logprob: -1.6501846313476562
    3. 'liste' → logprob: -1.7751846313476562
    4. 'for' → logprob: -2.2751846313476562
    5. ' liste' → logprob: -2.4001846313476562
    6. 'list' → logprob: -3.5251846313476562
    7. ' tuple' → logprob: -3.5251846313476562
    8. 'range' → logprob: -4.775184631347656
    9. ' for' → logprob: -4.900184631347656
    10. '[]' → logprob: -5.025184631347656

Token 66: ' mais' (ID: 2899)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.39826682209968567
    2. '#' → logprob: -2.5232667922973633
    3. ' 
' → logprob: -3.3982667922973633
    4. '<|end|>' → logprob: -3.5232667922973633
    5. ' ' → logprob: -3.6482667922973633
    6. 'x' → logprob: -3.6482667922973633
    7. '\n' → logprob: -3.6482667922973633
    8. '.' → logprob: -4.023266792297363
    9. 'if' → logprob: -4.023266792297363
    10. '' → logprob: -4.273266792297363

Token 67: ' bon' (ID: 4846)
  Prédit: ' je'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' je' → logprob: -0.6503724455833435
    2. ' j' → logprob: -2.2753725051879883
    3. ' c' → logprob: -2.5253725051879883
    4. ' comme' → logprob: -2.5253725051879883
    5. ' bon' → logprob: -2.9003725051879883
    6. ' ça' → logprob: -3.5253725051879883
    7. ' vu' → logprob: -3.9003725051879883
    8. '```' → logprob: -4.150372505187988
    9. ' la' → logprob: -4.525372505187988
    10. ' ' → logprob: -4.650372505187988

Token 68: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.21714667975902557
    2. ' 
' → logprob: -2.842146635055542
    3. 'i' → logprob: -3.342146635055542
    4. '#' → logprob: -3.592146635055542
    5. 'if' → logprob: -3.717146635055542
    6. '' → logprob: -4.842146873474121
    7. 'x' → logprob: -5.092146873474121
    8. '\n' → logprob: -5.092146873474121
    9. '  
' → logprob: -5.217146873474121
    10. '<|end|>' → logprob: -5.842146873474121

Token 69: '#' (ID: 2)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.41282689571380615
    2. 'i' → logprob: -1.6628268957138062
    3. 'if' → logprob: -2.2878270149230957
    4. '#' → logprob: -4.287827014923096
    5. '\n' → logprob: -4.412827014923096
    6. ' 
' → logprob: -5.412827014923096
    7. ' if' → logprob: -5.537827014923096
    8. '' → logprob: -6.037827014923096
    9. 'x' → logprob: -6.037827014923096
    10. 'n' → logprob: -6.537827014923096

Token 70: ' On' (ID: 2160)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.2574636936187744
    2. 'i' → logprob: -2.2574636936187744
    3. ' if' → logprob: -2.8824636936187744
    4. 'result' → logprob: -4.007463455200195
    5. '#' → logprob: -4.257463455200195
    6. 'max' → logprob: -4.382463455200195
    7. ' i' → logprob: -4.507463455200195
    8. 'a' → logprob: -6.257463455200195
    9. ' max' → logprob: -6.382463455200195
    10. ' result' → logprob: -6.507463455200195

Token 71: ' vér' (ID: 42524)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.5167055130004883
    2. 'if' → logprob: -1.2667055130004883
    3. ' if' → logprob: -3.7667055130004883
    4. ' #' → logprob: -3.7667055130004883
    5. ' va' → logprob: -3.8917055130004883
    6. ' veut' → logprob: -4.016705513000488
    7. 'print' → logprob: -5.266705513000488
    8. ' peut' → logprob: -5.516705513000488
    9. ' calc' → logprob: -5.641705513000488
    10. ' continue' → logprob: -5.766705513000488

Token 72: 'ifie' (ID: 46409)
  Prédit: 'ifie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifie' → logprob: -0.0035899756476283073
    2. 'if' → logprob: -5.878590106964111
    3. 'ifi' → logprob: -7.503590106964111
    4. 'ifier' → logprob: -9.253589630126953
    5. 'ifié' → logprob: -10.003589630126953
    6. 'i' → logprob: -10.003589630126953
    7. 'ifiez' → logprob: -10.378589630126953
    8. 'ify' → logprob: -12.253589630126953
    9. 'ife' → logprob: -12.503589630126953
    10. '#' → logprob: -13.128589630126953

Token 73: ' si' (ID: 1784)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -1.2833974361419678
    2. 'if' → logprob: -1.5333974361419678
    3. '<|end|>' → logprob: -1.5333974361419678
    4. ' ' → logprob: -1.7833974361419678
    5. ':' → logprob: -3.1583974361419678
    6. 'i' → logprob: -3.6583974361419678
    7. ',' → logprob: -4.533397674560547
    8. 's' → logprob: -4.533397674560547
    9. ' i' → logprob: -4.783397674560547
    10. 'e' → logprob: -5.033397674560547

Token 74: ' tous' (ID: 10688)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.5785027742385864
    2. 'x' → logprob: -0.9535027742385864
    3. ' (' → logprob: -3.078502655029297
    4. '(x' → logprob: -5.328502655029297
    5. '(' → logprob: -5.828502655029297
    6. ' ' → logprob: -10.953502655029297
    7. 'z' → logprob: -11.828502655029297
    8. '((' → logprob: -12.078502655029297
    9. ' z' → logprob: -12.203502655029297
    10. ' ((' → logprob: -12.453502655029297

Token 75: ' sont' (ID: 5242)
  Prédit: ' les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.3360045850276947
    2. '(' → logprob: -1.961004614830017
    3. 'les' → logprob: -2.2110044956207275
    4. 's' → logprob: -4.586004734039307
    5. '(x' → logprob: -4.836004734039307
    6. ' trois' → logprob: -5.086004734039307
    7. ' ' → logprob: -5.586004734039307
    8. ' le' → logprob: -6.461004734039307
    9. 'le' → logprob: -6.961004734039307
    10. ' (' → logprob: -7.711004734039307

Token 76: ' pare' (ID: 9160)
  Prédit: ' différents'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' différents' → logprob: -1.2128549814224243
    2. ' posit' → logprob: -1.5878549814224243
    3. ' des' → logprob: -2.2128548622131348
    4. ' ég' → logprob: -2.4628548622131348
    5. 'strict' → logprob: -2.5878548622131348
    6. 'posit' → logprob: -2.8378548622131348
    7. '>' → logprob: -2.9628548622131348
    8. 'sup' → logprob: -3.7128548622131348
    9. ' strict' → logprob: -4.087854862213135
    10. ' positive' → logprob: -4.837854862213135

Token 77: 'ils' (ID: 5879)
  Prédit: 'ils'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ils' → logprob: -0.0016268600011244416
    2. 's' → logprob: -7.126626968383789
    3. 'illes' → logprob: -7.626626968383789
    4. 'il' → logprob: -9.126626968383789
    5. 'ts' → logprob: -9.501626968383789
    6. 'ls' → logprob: -9.876626968383789
    7. 'ills' → logprob: -10.626626968383789
    8. 'ille' → logprob: -11.251626968383789
    9. 'ns' → logprob: -11.376626968383789
    10. 'ds' → logprob: -11.501626968383789

Token 78: ',' (ID: 11)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.8206399083137512
    2. 'i' → logprob: -1.0706398487091064
    3. ' 
' → logprob: -2.8206398487091064
    4. ' if' → logprob: -3.1956398487091064
    5. '
' → logprob: -3.3206398487091064
    6. '\' → logprob: -4.0706400871276855
    7. ':' → logprob: -4.1956400871276855
    8. '  
' → logprob: -4.4456400871276855
    9. '```' → logprob: -4.5706400871276855
    10. '<|end|>' → logprob: -4.8206400871276855

Token 79: ' sinon' (ID: 52915)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.6199663281440735
    2. ' or' → logprob: -1.2449662685394287
    3. 'if' → logprob: -2.1199662685394287
    4. ' ou' → logprob: -3.6199662685394287
    5. ' then' → logprob: -4.744966506958008
    6. ' ' → logprob: -5.244966506958008
    7. ' elif' → logprob: -5.744966506958008
    8. ' and' → logprob: -6.619966506958008
    9. ' puis' → logprob: -6.744966506958008
    10. ' et' → logprob: -6.869966506958008

Token 80: ' tant' (ID: 16235)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.24211741983890533
    2. 'if' → logprob: -2.242117404937744
    3. ' if' → logprob: -2.617117404937744
    4. ' :' → logprob: -3.742117404937744
    5. ' ' → logprob: -4.867117404937744
    6. ',' → logprob: -6.742117404937744
    7. '```' → logprob: -6.867117404937744
    8. ' ' → logprob: -7.992117404937744
    9. '<|end|>' → logprob: -7.992117404937744
    10. 'i' → logprob: -8.242117881774902

Token 81: ' pis' (ID: 19525)
  Prédit: 'qu'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'qu' → logprob: -1.1679904460906982
    2. ' qu' → logprob: -1.2929904460906982
    3. ' que' → logprob: -2.0429904460906982
    4. 'que' → logprob: -2.5429904460906982
    5. 's' → logprob: -2.6679904460906982
    6. 'p' → logprob: -3.2929904460906982
    7. '_' → logprob: -3.9179904460906982
    8. '```' → logprob: -4.167990684509277
    9. '#' → logprob: -4.542990684509277
    10. ' mieux' → logprob: -4.792990684509277

Token 82: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6458429098129272
    2. 'if' → logprob: -0.8958429098129272
    3. 'i' → logprob: -3.770843029022217
    4. ' if' → logprob: -4.395843029022217
    5. ' 
' → logprob: -4.645843029022217
    6. '  
' → logprob: -4.770843029022217
    7. '```' → logprob: -5.895843029022217
    8. '\n' → logprob: -5.895843029022217
    9. ',' → logprob: -6.520843029022217
    10. '\' → logprob: -6.520843029022217

Token 83: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.41457030177116394
    2. '
' → logprob: -1.2895703315734863
    3. 'i' → logprob: -3.5395703315734863
    4. ' if' → logprob: -4.539570331573486
    5. '```' → logprob: -4.789570331573486
    6. ' 
' → logprob: -5.039570331573486
    7. '\n' → logprob: -5.164570331573486
    8. '  
' → logprob: -7.164570331573486
    9. '\' → logprob: -7.414570331573486
    10. '<|end|>' → logprob: -7.414570331573486

Token 84: ' (' (ID: 350)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.0033951562363654375
    2. 'x' → logprob: -6.128395080566406
    3. ' ' → logprob: -6.753395080566406
    4. ' ' → logprob: -10.878395080566406
    5. ' (' → logprob: -10.878395080566406
    6. '  ' → logprob: -13.253395080566406
    7. '	x' → logprob: -14.128395080566406
    8. ' ' → logprob: -14.503395080566406
    9. ')' → logprob: -15.128395080566406
    10. '```' → logprob: -15.253395080566406

Token 85: 'x' (ID: 87)
  Prédit: 'x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.023246990516781807
    2. ' x' → logprob: -3.773247003555298
    3. '(x' → logprob: -13.648246765136719
    4. ' (' → logprob: -15.648246765136719
    5. '	x' → logprob: -16.77324676513672
    6. ')' → logprob: -16.89824676513672
    7. ')x' → logprob: -17.64824676513672
    8. ' ' → logprob: -17.89824676513672
    9. '"x' → logprob: -18.52324676513672
    10. ' ' → logprob: -18.52324676513672

Token 86: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.055148787796497345
    2. '==' → logprob: -2.9301488399505615
    3. ' !=' → logprob: -8.43014907836914
    4. '!=' → logprob: -11.18014907836914
    5. '=' → logprob: -11.30514907836914
    6. ' ' → logprob: -11.93014907836914
    7. ')' → logprob: -12.05514907836914
    8. ' ' → logprob: -12.55514907836914
    9. ' =' → logprob: -12.68014907836914
    10. ' )' → logprob: -14.43014907836914

Token 87: ' y' (ID: 342)
  Prédit: ' y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.25194039940834045
    2. 'y' → logprob: -1.501940369606018
    3. ' ' → logprob: -11.751940727233887
    4. '<|end|>' → logprob: -13.376940727233887
    5. ')' → logprob: -14.251940727233887
    6. '	y' → logprob: -14.751940727233887
    7. ')y' → logprob: -15.126940727233887
    8. ' )' → logprob: -15.626940727233887
    9. ''y' → logprob: -16.00193977355957
    10. ' ' → logprob: -16.00193977355957

Token 88: ')' (ID: 8)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.5331275463104248
    2. ' ==' → logprob: -1.0331275463104248
    3. ')' → logprob: -3.533127546310425
    4. '==' → logprob: -4.033127784729004
    5. 'and' → logprob: -4.658127784729004
    6. ' ' → logprob: -7.283127784729004
    7. ' )' → logprob: -8.533127784729004
    8. ')==' → logprob: -10.783127784729004
    9. ' ' → logprob: -12.033127784729004
    10. '=' → logprob: -13.283127784729004

Token 89: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.07770845293998718
    2. 'and' → logprob: -3.0777084827423096
    3. '==' → logprob: -4.0777082443237305
    4. ' ==' → logprob: -4.4527082443237305
    5. ')' → logprob: -9.32770824432373
    6. ' ' → logprob: -11.82770824432373
    7. ' ' → logprob: -12.57770824432373
    8. '=' → logprob: -13.20270824432373
    9. ')==' → logprob: -13.32770824432373
    10. ' a' → logprob: -14.20270824432373

Token 90: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.013490771874785423
    2. '(x' → logprob: -4.888490676879883
    3. '(z' → logprob: -5.513490676879883
    4. ' z' → logprob: -7.263490676879883
    5. '(' → logprob: -7.513490676879883
    6. ' ' → logprob: -7.888490676879883
    7. ' x' → logprob: -9.263490676879883
    8. 'z' → logprob: -10.013490676879883
    9. '<|end|>' → logprob: -10.638490676879883
    10. ')' → logprob: -11.138490676879883

Token 91: 'y' (ID: 88)
  Prédit: ' y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.31833842396736145
    2. ' z' → logprob: -1.693338394165039
    3. 'y' → logprob: -2.943338394165039
    4. 'z' → logprob: -3.443338394165039
    5. ' x' → logprob: -5.943338394165039
    6. 'x' → logprob: -6.568338394165039
    7. ' ' → logprob: -10.443338394165039
    8. ' (' → logprob: -11.318338394165039
    9. ')' → logprob: -11.568338394165039
    10. ' ' → logprob: -12.693338394165039

Token 92: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.4742606282234192
    2. ' ==' → logprob: -0.9742606282234192
    3. ')' → logprob: -8.849260330200195
    4. ')==' → logprob: -10.974260330200195
    5. '==
' → logprob: -11.099260330200195
    6. '=' → logprob: -12.349260330200195
    7. ' ' → logprob: -14.224260330200195
    8. ']==' → logprob: -14.224260330200195
    9. '<|end|>' → logprob: -14.224260330200195
    10. ' ' → logprob: -14.849260330200195

Token 93: ' z' (ID: 579)
  Prédit: 'z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'z' → logprob: -0.033650193363428116
    2. ' z' → logprob: -3.4086501598358154
    3. ')' → logprob: -13.408650398254395
    4. 'x' → logprob: -13.533650398254395
    5. '	z' → logprob: -14.158650398254395
    6. ''z' → logprob: -15.408650398254395
    7. ' ' → logprob: -15.533650398254395
    8. '<|end|>' → logprob: -16.283649444580078
    9. '   ' → logprob: -16.408649444580078
    10. ' ' → logprob: -17.283649444580078

Token 94: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.005327435676008463
    2. ')' → logprob: -5.255327224731445
    3. ':' → logprob: -9.380327224731445
    4. '):
' → logprob: -12.255327224731445
    5. ' ):' → logprob: -12.630327224731445
    6. '):

' → logprob: -13.880327224731445
    7. ').' → logprob: -16.880327224731445
    8. ' and' → logprob: -17.255327224731445
    9. ':)' → logprob: -17.255327224731445
    10. ')：' → logprob: -17.255327224731445

Token 95: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0011141392169520259
    2. ' :' → logprob: -7.376114368438721
    3. ':
' → logprob: -8.251113891601562
    4. 'print' → logprob: -9.751113891601562
    5. '):' → logprob: -10.001113891601562
    6. ')' → logprob: -10.251113891601562
    7. '   ' → logprob: -10.251113891601562
    8. ' print' → logprob: -10.751113891601562
    9. ',' → logprob: -11.626113891601562
    10. ' ' → logprob: -11.751113891601562

Token 96: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.48495396971702576
    2. 'print' (adapté à ' print') → logprob: -1.3599539995193481
    3. ' print' → logprob: -2.3599538803100586
    4. '
' → logprob: -4.359953880310059
    5. ':' → logprob: -4.734953880310059
    6. '\n' → logprob: -5.109953880310059
    7. '    
' → logprob: -6.984953880310059
    8. ' 
' → logprob: -7.109953880310059
    9. ' ' → logprob: -7.234953880310059
    10. ':
' → logprob: -7.359953880310059

Token 97: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.22750204801559448
    2. '("("' → logprob: -1.8525021076202393
    3. '("' → logprob: -3.2275021076202393
    4. '(x' → logprob: -5.10250186920166
    5. '('' → logprob: -7.60250186920166
    6. '("="' → logprob: -9.35250186920166
    7. '(True' → logprob: -9.47750186920166
    8. '("(' → logprob: -9.47750186920166
    9. '("#' → logprob: -10.35250186920166
    10. '("")' → logprob: -10.60250186920166

Token 98: 'Yes' (ID: 13022)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.6440857648849487
    2. 'É' → logprob: -1.6440857648849487
    3. 'O' → logprob: -2.5190858840942383
    4. 'E' → logprob: -2.6440858840942383
    5. 'Equal' → logprob: -3.7690858840942383
    6. 'égalité' → logprob: -4.019085884094238
    7. 'Triangle' → logprob: -4.519085884094238
    8. 'Oui' → logprob: -4.769085884094238
    9. '"E' → logprob: -5.144085884094238
    10. '3' → logprob: -5.144085884094238

Token 99: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.0003670364967547357
    2. '!")' → logprob: -8.250367164611816
    3. ')")' → logprob: -10.125367164611816
    4. '")
' → logprob: -10.125367164611816
    5. ')' → logprob: -10.875367164611816
    6. ' ")' → logprob: -12.875367164611816
    7. '"' → logprob: -13.250367164611816
    8. ',' → logprob: -14.750367164611816
    9. '")
' → logprob: -15.125367164611816
    10. '!' → logprob: -15.375367164611816

Token 100: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.007367260754108429
    2. ' else' → logprob: -5.257367134094238
    3. '<|end|>' → logprob: -6.382367134094238
    4. 'elif' → logprob: -8.632367134094238
    5. ')' → logprob: -9.382367134094238
    6. '
' → logprob: -9.632367134094238
    7. '```' → logprob: -9.757367134094238
    8. '   ' → logprob: -11.132367134094238
    9. '<|end|>' → logprob: -11.382367134094238
    10. '	else' → logprob: -12.632367134094238

Token 101: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00048191213863901794
    2. ':
' → logprob: -8.250481605529785
    3. ' :' → logprob: -8.875481605529785
    4. '   ' → logprob: -9.875481605529785
    5. '):' → logprob: -11.125481605529785
    6. '():' → logprob: -11.625481605529785
    7. ')' → logprob: -13.250481605529785
    8. ' :
' → logprob: -14.250481605529785
    9. ':**' → logprob: -14.500481605529785
    10. '(":' → logprob: -14.875481605529785

Token 102: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0007110013975761831
    2. 'print' → logprob: -7.375710964202881
    3. ' print' → logprob: -10.250711441040039
    4. '    
' → logprob: -11.500711441040039
    5. '    ' → logprob: -11.625711441040039
    6. '       ' → logprob: -11.750711441040039
    7. '  ' → logprob: -12.250711441040039
    8. ' ' → logprob: -12.625711441040039
    9. '"' → logprob: -13.000711441040039
    10. '```' → logprob: -13.000711441040039

Token 103: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.05845165625214577
    2. '   ' → logprob: -2.9334516525268555
    3. ' print' → logprob: -5.6834516525268555
    4. ' ' → logprob: -9.308451652526855
    5. '  ' → logprob: -10.308451652526855
    6. '	print' → logprob: -10.683451652526855
    7. '    ' → logprob: -12.683451652526855
    8. '    
' → logprob: -12.933451652526855
    9. '<|end|>' → logprob: -13.308451652526855
    10. '(print' → logprob: -13.683451652526855

Token 104: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.39265045523643494
    2. '("' → logprob: -1.1426504850387573
    3. '("("' → logprob: -5.267650604248047
    4. '("")' → logprob: -7.517650604248047
    5. '(""' → logprob: -11.267650604248047
    6. '('' → logprob: -11.267650604248047
    7. '("(' → logprob: -11.517650604248047
    8. '()' → logprob: -11.642650604248047
    9. '("""' → logprob: -12.017650604248047
    10. '(False' → logprob: -12.392650604248047

Token 105: 'No' (ID: 3160)
  Prédit: '"No'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"No' → logprob: -0.0012402292340993881
    2. 'No' → logprob: -6.876240253448486
    3. '"' → logprob: -8.626239776611328
    4. '"N' → logprob: -10.751239776611328
    5. '")' → logprob: -12.626239776611328
    6. '("' → logprob: -13.501239776611328
    7. ''' → logprob: -15.001239776611328
    8. '“No' → logprob: -15.001239776611328
    9. ' "' → logprob: -15.126239776611328
    10. ')' → logprob: -15.126239776611328

Token 106: 'pe' (ID: 424)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -0.3137839436531067
    2. ')' → logprob: -1.313783884048462
    3. ')")' → logprob: -7.563784122467041
    4. ')"' → logprob: -13.938783645629883
    5. '")
' → logprob: -14.438783645629883
    6. '')' → logprob: -14.438783645629883
    7. '"' → logprob: -14.563783645629883
    8. ')
' → logprob: -15.438783645629883
    9. ' )' → logprob: -15.688783645629883
    10. '}")' → logprob: -16.313783645629883

Token 107: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.0007685328018851578
    2. ')' → logprob: -7.250768661499023
    3. ')")' → logprob: -9.750768661499023
    4. '")
' → logprob: -15.250768661499023
    5. '')' → logprob: -16.625768661499023
    6. '!")' → logprob: -17.875768661499023
    7. '"' → logprob: -18.375768661499023
    8. '”)' → logprob: -18.375768661499023
    9. '}")' → logprob: -18.625768661499023
    10. ' ")' → logprob: -18.875768661499023

Token 108: ' ' (ID: 220)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.17549310624599457
    2. '\n' → logprob: -2.425493001937866
    3. '<|end|>' → logprob: -3.175493001937866
    4. ')' → logprob: -4.050493240356445
    5. '#' → logprob: -5.425493240356445
    6. '```' → logprob: -6.050493240356445
    7. ' ' → logprob: -6.425493240356445
    8. 'newline' → logprob: -6.925493240356445
    9. '\' → logprob: -7.300493240356445
    10. '  
' → logprob: -7.300493240356445

Token 109: ' #' (ID: 1069)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.16387301683425903
    2. '\n' → logprob: -2.6638729572296143
    3. '<|end|>' → logprob: -2.7888729572296143
    4. ')' → logprob: -4.413873195648193
    5. ' ' → logprob: -5.913873195648193
    6. '#' → logprob: -6.163873195648193
    7. '```' → logprob: -7.163873195648193
    8. 'newline' → logprob: -7.288873195648193
    9. '  
' → logprob: -8.038872718811035
    10. '\' → logprob: -8.413872718811035

Token 110: ' j' (ID: 441)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 111: ''aime' (ID: 57963)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.014277624897658825
    2. 'uste' → logprob: -4.639277458190918
    3. 'ust' → logprob: -7.139277458190918
    4. '#' → logprob: -7.264277458190918
    5. ''ai' → logprob: -7.264277458190918
    6. ''' → logprob: -7.389277458190918
    7. ''espère' → logprob: -7.639277458190918
    8. ''aime' → logprob: -8.264277458190918
    9. 'a' → logprob: -9.139277458190918
    10. '')' → logprob: -9.264277458190918

Token 112: ' mieux' (ID: 26345)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 113: ' ce' (ID: 2357)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 114: ' message' (ID: 3176)
  Prédit: ' style'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' style' → logprob: -0.998526930809021
    2. 'style' → logprob: -1.748526930809021
    3. '"' → logprob: -2.3735270500183105
    4. 'code' → logprob: -2.4985270500183105
    5. ' code' → logprob: -2.7485270500183105
    6. 'lang' → logprob: -3.8735270500183105
    7. 's' → logprob: -4.1235270500183105
    8. ' langage' → logprob: -4.3735270500183105
    9. 'ton' → logprob: -4.4985270500183105
    10. 'else' → logprob: -4.7485270500183105

Token 115: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 116: ' mais' (ID: 2899)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.24552851915359497
    2. ' car' → logprob: -2.12052845954895
    3. ' parce' → logprob: -3.99552845954895
    4. ' )' → logprob: -4.120528697967529
    5. ' même' → logprob: -4.495528697967529
    6. ' on' → logprob: -4.745528697967529
    7. ' mais' → logprob: -4.745528697967529
    8. 'car' → logprob: -4.870528697967529
    9. ' je' → logprob: -5.620528697967529
    10. ' c' → logprob: -5.745528697967529

Token 117: ' c' (ID: 274)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.1518286019563675
    2. '#' → logprob: -2.4018285274505615
    3. ' on' → logprob: -3.9018285274505615
    4. 'on' → logprob: -5.651828765869141
    5. ' "' → logprob: -6.026828765869141
    6. ':' → logprob: -6.026828765869141
    7. ' je' → logprob: -6.026828765869141
    8. ''' → logprob: -6.526828765869141
    9. '"""' → logprob: -6.776828765869141
    10. '#"' → logprob: -6.776828765869141

Token 118: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.08989556133747101
    2. 'e' → logprob: -3.339895486831665
    3. 'est' → logprob: -4.214895725250244
    4. 'a' → logprob: -4.589895725250244
    5. ''' → logprob: -5.339895725250244
    6. '#' → logprob: -5.339895725250244
    7. ''#' → logprob: -5.464895725250244
    8. ''a' → logprob: -6.089895725250244
    9. ''était' → logprob: -6.089895725250244
    10. 'ela' → logprob: -6.589895725250244

Token 119: ' pas' (ID: 2173)
  Prédit: 'moins'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'moins' → logprob: -1.65221107006073
    2. 'tout' → logprob: -1.77721107006073
    3. 'pas' → logprob: -2.1522111892700195
    4. 'plus' → logprob: -2.1522111892700195
    5. 'exact' → logprob: -3.1522111892700195
    6. 'un' → logprob: -3.4022111892700195
    7. 'diff' → logprob: -3.5272111892700195
    8. 'ce' → logprob: -3.6522111892700195
    9. '"' → logprob: -3.7772111892700195
    10. 'comme' → logprob: -3.9022111892700195

Token 120: ' grave' (ID: 30607)
  Prédit: 'tr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tr' → logprob: -1.8437193632125854
    2. 'cel' → logprob: -1.8437193632125854
    3. 'le' → logprob: -1.9687193632125854
    4. 'tout' → logprob: -2.093719482421875
    5. 'grave' → logprob: -2.468719482421875
    6. 'ce' → logprob: -3.093719482421875
    7. 'f' → logprob: -3.218719482421875
    8. '"' → logprob: -3.343719482421875
    9. 'standard' → logprob: -3.593719482421875
    10. 'con' → logprob: -3.593719482421875

Token 121: ' si' (ID: 1784)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 122: ' c' (ID: 274)
  Prédit: ' on'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' on' → logprob: -1.9075255393981934
    2. ' you' → logprob: -1.9075255393981934
    3. ' vous' → logprob: -1.9075255393981934
    4. 'vous' → logprob: -2.1575255393981934
    5. 'you' → logprob: -2.2825255393981934
    6. ' tu' → logprob: -2.5325255393981934
    7. ' not' → logprob: -3.1575255393981934
    8. 'tu' → logprob: -3.4075255393981934
    9. '"' → logprob: -3.5325255393981934
    10. 'on' → logprob: -3.5325255393981934

Token 123: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.10431989282369614
    2. 'est' → logprob: -2.6043198108673096
    3. 'ont' → logprob: -5.354320049285889
    4. '<|end|>' → logprob: -5.479320049285889
    5. ''était' → logprob: -6.104320049285889
    6. ''' → logprob: -6.479320049285889
    7. 'op' → logprob: -6.604320049285889
    8. 'orrect' → logprob: -6.979320049285889
    9. 'a' → logprob: -7.354320049285889
    10. '"' → logprob: -7.354320049285889

Token 124: ' un' (ID: 537)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.9682407975196838
    2. 'different' → logprob: -0.9682407975196838
    3. ' différent' → logprob: -2.593240737915039
    4. 'diff' → logprob: -2.843240737915039
    5. 'No' → logprob: -3.343240737915039
    6. 'Yes' → logprob: -4.093240737915039
    7. '"No' → logprob: -4.218240737915039
    8. 'pas' → logprob: -4.468240737915039
    9. ' different' → logprob: -4.968240737915039
    10. 'Different' → logprob: -5.968240737915039

Token 125: ' peu' (ID: 9235)
  Prédit: 'pe'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pe' → logprob: -0.23377399146556854
    2. ' peu' → logprob: -1.858773946762085
    3. 'aut' → logprob: -4.108774185180664
    4. '```' → logprob: -5.358774185180664
    5. 's' → logprob: -5.733774185180664
    6. ' problème' → logprob: -5.858774185180664
    7. ' autre' → logprob: -5.858774185180664
    8. 'message' → logprob: -6.233774185180664
    9. '"' → logprob: -6.483774185180664
    10. 'jeu' → logprob: -6.608774185180664

Token 126: ' différent' (ID: 114823)
  Prédit: 'diff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'diff' → logprob: -0.43777257204055786
    2. 'different' → logprob: -1.687772512435913
    3. 'moins' → logprob: -2.562772512435913
    4. ' différent' → logprob: -2.812772512435913
    5. 'plus' → logprob: -3.937772512435913
    6. 'd' → logprob: -5.562772750854492
    7. 'b' → logprob: -6.437772750854492
    8. 'conf' → logprob: -6.687772750854492
    9. ' different' → logprob: -6.812772750854492
    10. 'dif' → logprob: -7.437772750854492


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 124
Tokens correctement prédits (1ère position, stricte): 35
Tokens correctement prédits (1ère position, avec adaptation): 36
Tokens correctement prédits (top 10): 72
Précision stricte (1ère position): 28.23%
Précision adaptée (1ère position): 29.03%
Précision (top 10): 58.06%
================================================================================
