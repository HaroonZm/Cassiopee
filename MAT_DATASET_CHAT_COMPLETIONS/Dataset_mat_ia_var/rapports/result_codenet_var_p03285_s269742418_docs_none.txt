================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:11:35
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
a = int(input())
for i in range(25):
    for j in range(15):
        if a - (4 * i + 7 * j) == 0:
            print("Yes")
            exit()
print("No")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'a' (ID: 64)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0007972388411872089
    2. 'a' → logprob: -8.375797271728516
    3. '(a' → logprob: -8.750797271728516
    4. ')' → logprob: -9.625797271728516
    5. '('' → logprob: -9.625797271728516
    6. ''' → logprob: -9.750797271728516
    7. '[' → logprob: -9.750797271728516
    8. ' (' → logprob: -10.000797271728516
    9. '```' → logprob: -10.000797271728516
    10. '32' → logprob: -11.250797271728516

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.11533945053815842
    2. ')' → logprob: -2.240339517593384
    3. '()' → logprob: -6.865339279174805
    4. '())' → logprob: -7.990339279174805
    5. '(
' → logprob: -8.865339279174805
    6. '))' → logprob: -9.115339279174805
    7. '```' → logprob: -9.115339279174805
    8. '(a' → logprob: -9.240339279174805
    9. 'a' → logprob: -9.740339279174805
    10. '`' → logprob: -9.865339279174805

Token 5: 'for' (ID: 1938)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.03134123980998993
    2. '*' → logprob: -3.656341314315796
    3. '%' → logprob: -6.406341075897217
    4. '\n' → logprob: -6.656341075897217
    5. '#' → logprob: -7.531341075897217
    6. '+
' → logprob: -8.156341552734375
    7. 'a' → logprob: -8.406341552734375
    8. '\' → logprob: -8.531341552734375
    9. '**' → logprob: -8.656341552734375
    10. ')' → logprob: -8.906341552734375

Token 6: ' i' (ID: 575)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.022658411413431168
    2. '  ' → logprob: -4.647658348083496
    3. ' i' → logprob: -4.647658348083496
    4. ' a' → logprob: -5.772658348083496
    5. ' ' → logprob: -10.397658348083496
    6. 'a' → logprob: -10.522658348083496
    7. 'i' → logprob: -10.647658348083496
    8. '_' → logprob: -11.897658348083496
    9. ' ‌' → logprob: -12.147658348083496
    10. ' n' → logprob: -12.522658348083496

Token 7: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.05088990926742554
    2. ' ' → logprob: -3.3008899688720703
    3. 'in' → logprob: -4.55088996887207
    4. ')' → logprob: -7.67588996887207
    5. ' n' → logprob: -7.67588996887207
    6. '  ' → logprob: -7.92588996887207
    7. 'n' → logprob: -7.92588996887207
    8. ' range' → logprob: -9.05088996887207
    9. '_' → logprob: -9.17588996887207
    10. ' i' → logprob: -9.42588996887207

Token 8: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.06107912212610245
    2. 'range' → logprob: -2.9360790252685547
    3. ' ' → logprob: -5.186079025268555
    4. ' a' → logprob: -7.561079025268555
    5. 'a' → logprob: -10.061079025268555
    6. '	range' → logprob: -12.186079025268555
    7. '  ' → logprob: -12.311079025268555
    8. '(range' → logprob: -12.936079025268555
    9. '_range' → logprob: -13.186079025268555
    10. ''' → logprob: -13.686079025268555

Token 9: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014312644489109516
    2. '(a' → logprob: -4.264312744140625
    3. '(i' → logprob: -8.889312744140625
    4. ' (' → logprob: -12.889312744140625
    5. '((' → logprob: -13.014312744140625
    6. '(n' → logprob: -13.139312744140625
    7. '(len' → logprob: -13.264312744140625
    8. '(`' → logprob: -13.639312744140625
    9. 'a' → logprob: -14.514312744140625
    10. '(:' → logprob: -15.889312744140625

Token 10: '25' (ID: 1161)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.0001931696751853451
    2. '1' → logprob: -9.25019359588623
    3. ' a' → logprob: -9.62519359588623
    4. '0' → logprob: -10.50019359588623
    5. '10' → logprob: -13.25019359588623
    6. '(a' → logprob: -13.75019359588623
    7. ' ' → logprob: -15.37519359588623
    8. '100' → logprob: -15.50019359588623
    9. ')' → logprob: -16.625192642211914
    10. '5' → logprob: -16.875192642211914

Token 11: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.4305512309074402
    2. ')' → logprob: -1.055551290512085
    3. '+' → logprob: -7.430551052093506
    4. '*' → logprob: -8.180551528930664
    5. '**' → logprob: -8.305551528930664
    6. ':' → logprob: -8.430551528930664
    7. ',' → logprob: -9.180551528930664
    8. '0' → logprob: -9.430551528930664
    9. '-' → logprob: -9.555551528930664
    10. ' ):' → logprob: -9.930551528930664

Token 12: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.19464203715324402
    2. '   ' → logprob: -2.0696420669555664
    3. '    ' → logprob: -3.6946420669555664
    4. ' :' → logprob: -4.444642066955566
    5. ' ' → logprob: -4.944642066955566
    6. 'a' → logprob: -5.944642066955566
    7. '```' → logprob: -7.694642066955566
    8. ''' → logprob: -7.819642066955566
    9. ')' → logprob: -8.194642066955566
    10. '(' → logprob: -8.444642066955566

Token 13: ' for' (ID: 395)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.857267439365387
    2. 'a' → logprob: -0.982267439365387
    3. '    ' → logprob: -2.357267379760742
    4. 'i' → logprob: -3.357267379760742
    5. ' ' → logprob: -3.607267379760742
    6. ' a' → logprob: -3.732267379760742
    7. ''' → logprob: -4.732267379760742
    8. ' i' → logprob: -5.732267379760742
    9. '```' → logprob: -6.107267379760742
    10. 'if' → logprob: -6.982267379760742

Token 14: ' j' (ID: 441)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.16223937273025513
    2. ' j' → logprob: -2.0372393131256104
    3. '  ' → logprob: -4.9122395515441895
    4. ' i' → logprob: -5.4122395515441895
    5. ' ' → logprob: -6.7872395515441895
    6. ' a' → logprob: -6.9122395515441895
    7. ' range' → logprob: -7.1622395515441895
    8. '_' → logprob: -7.4122395515441895
    9. '    ' → logprob: -7.7872395515441895
    10. 'j' → logprob: -8.037239074707031

Token 15: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.14291046559810638
    2. 'in' → logprob: -2.0179104804992676
    3. ' ' → logprob: -8.64291000366211
    4. '  ' → logprob: -10.39291000366211
    5. ')' → logprob: -12.01791000366211
    6. '    ' → logprob: -12.14291000366211
    7. '```' → logprob: -12.64291000366211
    8. 'n' → logprob: -13.14291000366211
    9. '   ' → logprob: -13.26791000366211
    10. '<|end|>' → logprob: -13.39291000366211

Token 16: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.7124219536781311
    2. ' ' → logprob: -1.4624218940734863
    3. 'range' → logprob: -1.8374218940734863
    4. '25' → logprob: -2.8374218940734863
    5. 'a' → logprob: -3.7124218940734863
    6. ' a' → logprob: -3.8374218940734863
    7. '10' → logprob: -5.462421894073486
    8. '(a' → logprob: -6.337421894073486
    9. '20' → logprob: -6.462421894073486
    10. ' (' → logprob: -6.587421894073486

Token 17: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.009927378036081791
    2. '(a' → logprob: -4.634927272796631
    3. ' (' → logprob: -8.884927749633789
    4. '((' → logprob: -11.509927749633789
    5. '(i' → logprob: -11.509927749633789
    6. '(n' → logprob: -12.134927749633789
    7. '(s' → logprob: -12.884927749633789
    8. 'a' → logprob: -14.509927749633789
    9. '(int' → logprob: -14.759927749633789
    10. ' ' → logprob: -14.759927749633789

Token 18: '15' (ID: 1055)
  Prédit: '25'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '25' → logprob: -0.07674279063940048
    2. 'a' → logprob: -3.7017428874969482
    3. '10' → logprob: -4.576742649078369
    4. '5' → logprob: -4.701742649078369
    5. '26' → logprob: -4.701742649078369
    6. '100' → logprob: -5.076742649078369
    7. ' ' → logprob: -5.576742649078369
    8. '50' → logprob: -5.826742649078369
    9. 'i' → logprob: -5.951742649078369
    10. '20' → logprob: -6.576742649078369

Token 19: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0007136239437386394
    2. ':' → logprob: -7.62571382522583
    3. ')' → logprob: -8.500713348388672
    4. ' ):' → logprob: -12.000713348388672
    5. '):
' → logprob: -12.000713348388672
    6. '+' → logprob: -12.625713348388672
    7. '   ' → logprob: -12.750713348388672
    8. '():' → logprob: -14.125713348388672
    9. ',' → logprob: -15.375713348388672
    10. '0' → logprob: -15.375713348388672

Token 20: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.013621186837553978
    2. '    ' → logprob: -4.8886213302612305
    3. '   ' → logprob: -6.0136213302612305
    4. '        ' → logprob: -7.2636213302612305
    5. ' ' → logprob: -7.5136213302612305
    6. '#' → logprob: -7.7636213302612305
    7. ':' → logprob: -8.01362133026123
    8. 'print' → logprob: -8.38862133026123
    9. '(' → logprob: -8.76362133026123
    10. '     ' → logprob: -8.76362133026123

Token 21: ' if' (ID: 538)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.2697542905807495
    2. '           ' → logprob: -1.3947542905807495
    3. '#' → logprob: -1.8947542905807495
    4. ' ' → logprob: -1.8947542905807495
    5. '       ' → logprob: -3.269754409790039
    6. '        ' → logprob: -3.769754409790039
    7. ' print' → logprob: -3.769754409790039
    8. '    ' → logprob: -4.019754409790039
    9. ' if' → logprob: -4.269754409790039
    10. '(' → logprob: -4.644754409790039

Token 22: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.09261618554592133
    2. ' (' → logprob: -2.717616081237793
    3. 'a' → logprob: -4.592616081237793
    4. ' ' → logprob: -5.092616081237793
    5. ' i' → logprob: -5.592616081237793
    6. '(' → logprob: -6.717616081237793
    7. ' j' → logprob: -7.967616081237793
    8. '(a' → logprob: -8.092616081237793
    9. '    ' → logprob: -8.592616081237793
    10. 'j' → logprob: -9.217616081237793

Token 23: ' -' (ID: 533)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.7728068232536316
    2. ' ==' → logprob: -1.1478068828582764
    3. ' %' → logprob: -2.7728068828582764
    4. '==' → logprob: -3.0228068828582764
    5. '%' → logprob: -3.2728068828582764
    6. '>' → logprob: -3.5228068828582764
    7. ' >=' → logprob: -3.5228068828582764
    8. ' ' → logprob: -5.272806644439697
    9. ' <=' → logprob: -6.022806644439697
    10. '>=' → logprob: -6.647806644439697

Token 24: ' (' (ID: 350)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.45292574167251587
    2. ' ' → logprob: -1.327925682067871
    3. ' (' → logprob: -2.702925682067871
    4. 'i' → logprob: -4.827925682067871
    5. '25' → logprob: -5.202925682067871
    6. '1' → logprob: -5.202925682067871
    7. ' j' → logprob: -5.702925682067871
    8. '10' → logprob: -5.827925682067871
    9. 'j' → logprob: -6.452925682067871
    10. '(i' → logprob: -6.827925682067871

Token 25: '4' (ID: 19)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.32108715176582336
    2. ' i' → logprob: -1.321087121963501
    3. '25' → logprob: -5.82108736038208
    4. ' (' → logprob: -6.32108736038208
    5. ' ' → logprob: -6.94608736038208
    6. '(i' → logprob: -7.07108736038208
    7. '10' → logprob: -7.57108736038208
    8. '(' → logprob: -8.321086883544922
    9. 'j' → logprob: -8.571086883544922
    10. '5' → logprob: -10.071086883544922

Token 26: ' *' (ID: 425)
  Prédit: '*i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*i' → logprob: -0.13241277635097504
    2. '*' → logprob: -2.7574126720428467
    3. ' *' → logprob: -2.8824126720428467
    4. '*j' → logprob: -5.882412910461426
    5. '**' → logprob: -7.757412910461426
    6. '*(' → logprob: -7.882412910461426
    7. 'i' → logprob: -8.007412910461426
    8. ')' → logprob: -8.882412910461426
    9. ' ' → logprob: -9.007412910461426
    10. ' i' → logprob: -9.632412910461426

Token 27: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.13316860795021057
    2. ' i' → logprob: -2.1331686973571777
    3. 'j' → logprob: -5.258168697357178
    4. ' j' → logprob: -7.633168697357178
    5. '(i' → logprob: -9.00816822052002
    6. ' (' → logprob: -9.13316822052002
    7. ')' → logprob: -9.38316822052002
    8. '(' → logprob: -9.63316822052002
    9. ')i' → logprob: -9.63316822052002
    10. ' ' → logprob: -10.25816822052002

Token 28: ' +' (ID: 659)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.13186074793338776
    2. ' -' → logprob: -3.0068607330322266
    3. ' +' → logprob: -4.131860733032227
    4. '+' → logprob: -4.256860733032227
    5. ' )' → logprob: -4.631860733032227
    6. '-' → logprob: -4.756860733032227
    7. '>' → logprob: -5.131860733032227
    8. ' >=' → logprob: -5.381860733032227
    9. ')>=' → logprob: -5.381860733032227
    10. '>=' → logprob: -6.006860733032227

Token 29: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.4029957056045532
    2. ' ' → logprob: -1.9029957056045532
    3. ' j' → logprob: -2.6529955863952637
    4. 'j' → logprob: -2.6529955863952637
    5. '5' → logprob: -3.5279955863952637
    6. '7' → logprob: -4.902995586395264
    7. '2' → logprob: -6.152995586395264
    8. '1' → logprob: -6.777995586395264
    9. '4' → logprob: -7.152995586395264
    10. '6' → logprob: -7.902995586395264

Token 30: '7' (ID: 22)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.5727638006210327
    2. '7' → logprob: -1.6977638006210327
    3. 'j' → logprob: -1.6977638006210327
    4. '2' → logprob: -3.4477639198303223
    5. ' ' → logprob: -4.197763919830322
    6. '5' → logprob: -4.322763919830322
    7. ' j' → logprob: -4.822763919830322
    8. '1' → logprob: -7.447763919830322
    9. '6' → logprob: -7.822763919830322
    10. '4' → logprob: -8.697763442993164

Token 31: ' *' (ID: 425)
  Prédit: '*j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*j' → logprob: -0.3382487893104553
    2. '*' → logprob: -1.3382487297058105
    3. ' *' → logprob: -3.7132487297058105
    4. ')' → logprob: -8.338249206542969
    5. 'j' → logprob: -10.963249206542969
    6. '*)' → logprob: -12.463249206542969
    7. '*i' → logprob: -12.838249206542969
    8. ' ' → logprob: -13.088249206542969
    9. ')*' → logprob: -13.213249206542969
    10. '*b' → logprob: -13.338249206542969

Token 32: ' j' (ID: 441)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.0015031944494694471
    2. ' j' → logprob: -6.501502990722656
    3. ' ' → logprob: -14.626502990722656
    4. '   ' → logprob: -15.626502990722656
    5. '	j' → logprob: -15.751502990722656
    6. '_j' → logprob: -16.876502990722656
    7. '  ' → logprob: -17.501502990722656
    8. ')' → logprob: -17.876502990722656
    9. '    ' → logprob: -17.876502990722656
    10. '7' → logprob: -18.001502990722656

Token 33: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.01037426758557558
    2. ' )' → logprob: -4.760374069213867
    3. ' <=' → logprob: -7.635374069213867
    4. ' ==' → logprob: -7.760374069213867
    5. '==' → logprob: -8.010374069213867
    6. ')==' → logprob: -8.635374069213867
    7. '<=' → logprob: -8.885374069213867
    8. ')<=' → logprob: -9.010374069213867
    9. '')' → logprob: -10.385374069213867
    10. ')>=' → logprob: -11.385374069213867

Token 34: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.12872815132141113
    2. '==' → logprob: -2.753728151321411
    3. ' >=' → logprob: -3.003728151321411
    4. '>=' → logprob: -5.003727912902832
    5. ' <=' → logprob: -7.628727912902832
    6. '=' → logprob: -9.503727912902832
    7. '<=' → logprob: -9.503727912902832
    8. ' >' → logprob: -9.878727912902832
    9. ' =' → logprob: -10.378727912902832
    10. '>' → logprob: -10.628727912902832

Token 35: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.575939953327179
    2. '0' → logprob: -0.825939953327179
    3. '  ' → logprob: -15.325940132141113
    4. ' ' → logprob: -16.575939178466797
    5. ' a' → logprob: -17.200939178466797
    6. '   ' → logprob: -17.200939178466797
    7. '    ' → logprob: -17.825939178466797
    8. ')' → logprob: -17.950939178466797
    9. 'a' → logprob: -18.200939178466797
    10. '1' → logprob: -18.388439178466797

Token 36: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.011048170737922192
    2. ' ' → logprob: -4.511048316955566
    3. '  ' → logprob: -15.886048316955566
    4. ')' → logprob: -16.38604736328125
    5. '   ' → logprob: -17.01104736328125
    6. '    ' → logprob: -17.38604736328125
    7. 'a' → logprob: -17.38604736328125
    8. '-' → logprob: -17.51104736328125
    9. '```' → logprob: -18.26104736328125
    10. '1' → logprob: -18.38604736328125

Token 37: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00010640407708706334
    2. ' :' → logprob: -9.250106811523438
    3. ':
' → logprob: -12.250106811523438
    4. ':return' → logprob: -13.500106811523438
    5. ':**' → logprob: -13.750106811523438
    6. '):' → logprob: -13.750106811523438
    7. '   ' → logprob: -14.500106811523438
    8. ' and' → logprob: -14.750106811523438
    9. '       ' → logprob: -15.250106811523438
    10. ' or' → logprob: -16.250106811523438

Token 38: '           ' (ID: 352)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.7888425588607788
    2. '           ' → logprob: -0.7888425588607788
    3. '       ' → logprob: -2.5388426780700684
    4. ' :' → logprob: -5.413842678070068
    5. ':
' → logprob: -5.663842678070068
    6. ' print' → logprob: -6.788842678070068
    7. 'print' → logprob: -7.288842678070068
    8. '<|end|>' → logprob: -7.663842678070068
    9. ' or' → logprob: -8.28884220123291
    10. '   ' → logprob: -8.28884220123291

Token 39: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.71275395154953
    2. ' print' → logprob: -0.71275395154953
    3. '           ' → logprob: -4.587753772735596
    4. '               ' → logprob: -4.962753772735596
    5. '       ' → logprob: -6.337753772735596
    6. ' break' → logprob: -8.712754249572754
    7. '   ' → logprob: -8.837754249572754
    8. '            ' → logprob: -9.962754249572754
    9. ' True' → logprob: -10.337754249572754
    10. 'break' → logprob: -10.837754249572754

Token 40: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.23971350491046906
    2. '(' → logprob: -1.7397135496139526
    3. '(i' → logprob: -3.739713430404663
    4. '('' → logprob: -4.489713668823242
    5. '(True' → logprob: -6.739713668823242
    6. '(a' → logprob: -6.739713668823242
    7. '("("' → logprob: -9.489713668823242
    8. '()' → logprob: -9.989713668823242
    9. '(":' → logprob: -10.739713668823242
    10. '"' → logprob: -10.739713668823242

Token 41: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.0056066494435071945
    2. 'YES' → logprob: -5.255606651306152
    3. 'yes' → logprob: -8.755606651306152
    4. ' Yes' → logprob: -8.880606651306152
    5. 'Y' → logprob: -10.880606651306152
    6. 'True' → logprob: -11.130606651306152
    7. '"' → logprob: -11.505606651306152
    8. '4' → logprob: -11.630606651306152
    9. ' yes' → logprob: -12.505606651306152
    10. 's' → logprob: -12.505606651306152

Token 42: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.05090135335922241
    2. ')' → logprob: -3.050901412963867
    3. '")
' → logprob: -6.300901412963867
    4. '           ' → logprob: -8.675901412963867
    5. ')
' → logprob: -9.175901412963867
    6. ')")' → logprob: -9.425901412963867
    7. '       ' → logprob: -9.550901412963867
    8. '"' → logprob: -11.050901412963867
    9. '               ' → logprob: -11.550901412963867
    10. '   ' → logprob: -11.800901412963867

Token 43: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0003806257154792547
    2. '               ' → logprob: -8.250380516052246
    3. '       ' → logprob: -10.250380516052246
    4. '<|end|>' → logprob: -10.250380516052246
    5. '            
' → logprob: -11.000380516052246
    6. '```' → logprob: -12.125380516052246
    7. '		' → logprob: -12.250380516052246
    8. '            ' → logprob: -12.500380516052246
    9. '          ' → logprob: -12.750380516052246
    10. '                       ' → logprob: -13.000380516052246

Token 44: ' exit' (ID: 10654)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -6.384836888173595e-05
    2. '		' → logprob: -10.8750638961792
    3. '               ' → logprob: -11.5000638961792
    4. '```' → logprob: -11.6250638961792
    5. 'exit' (adapté à ' exit') → logprob: -11.8750638961792
    6. '       ' → logprob: -11.8750638961792
    7. 'return' → logprob: -12.1250638961792
    8. 'break' → logprob: -13.3750638961792
    9. '   ' → logprob: -13.8750638961792
    10. '            
' → logprob: -14.3750638961792

Token 45: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.281360000371933
    2. '(' → logprob: -1.4063600301742554
    3. '()
' → logprob: -9.656359672546387
    4. '(
' → logprob: -9.656359672546387
    5. '("("' → logprob: -11.156359672546387
    6. '(

' → logprob: -11.406359672546387
    7. '()

' → logprob: -11.656359672546387
    8. '('' → logprob: -11.781359672546387
    9. '()`' → logprob: -11.906359672546387
    10. ')' → logprob: -11.906359672546387

Token 46: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0006235609762370586
    2. 'else' → logprob: -7.50062370300293
    3. '```' → logprob: -9.62562370300293
    4. ' print' → logprob: -13.62562370300293
    5. 'No' → logprob: -14.00062370300293
    6. '   ' → logprob: -14.00062370300293
    7. '    
' → logprob: -14.50062370300293
    8. 'Print' → logprob: -15.25062370300293
    9. '``' → logprob: -15.25062370300293
    10. '
' → logprob: -15.87562370300293

Token 47: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.49536141753196716
    2. '("' → logprob: -0.9953614473342896
    3. '()' → logprob: -3.870361328125
    4. '(False' → logprob: -9.745361328125
    5. '("")' → logprob: -9.870361328125
    6. '("("' → logprob: -9.870361328125
    7. '('' → logprob: -10.245361328125
    8. '"' → logprob: -12.245361328125
    9. '("""' → logprob: -13.620361328125
    10. '(None' → logprob: -13.745361328125

Token 48: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -3.7697225252486533e-06
    2. '"No' → logprob: -12.625003814697266
    3. 'NO' → logprob: -15.125003814697266
    4. ' No' → logprob: -16.375003814697266
    5. '"' → logprob: -17.875003814697266
    6. '“No' → logprob: -18.375003814697266
    7. 'Impossible' → logprob: -18.625003814697266
    8. '.No' → logprob: -19.125003814697266
    9. '(No' → logprob: -19.500003814697266
    10. 'Yes' → logprob: -19.625003814697266

Token 49: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -2.2961512513575144e-05
    2. ')' → logprob: -10.750022888183594
    3. ')")' → logprob: -13.875022888183594
    4. '")
' → logprob: -15.000022888183594
    5. '()' → logprob: -16.625022888183594
    6. '"' → logprob: -16.875022888183594
    7. '')' → logprob: -18.000022888183594
    8. '`)' → logprob: -18.875022888183594
    9. '")

' → logprob: -19.125022888183594
    10. '”)' → logprob: -19.125022888183594


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 47
Tokens correctement prédits (1ère position, stricte): 18
Tokens correctement prédits (1ère position, avec adaptation): 19
Tokens correctement prédits (top 10): 38
Précision stricte (1ère position): 38.30%
Précision adaptée (1ère position): 40.43%
Précision (top 10): 80.85%
================================================================================
