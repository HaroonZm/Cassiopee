================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:02:52
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def get_input():
    return input()

def split_input(s):
    return s.split()

def convert_to_int_list(str_list):
    return list(map(int, str_list))

def parse_input():
    s = get_input()
    str_list = split_input(s)
    int_list = convert_to_int_list(str_list)
    return int_list

def is_between(a, b, c):
    return a <= c and c <= b

def is_between_reversed(a, b, c):
    return b <= c and c <= a

def print_yes():
    print('Yes')

def print_no():
    print('No')

def decide_and_print(l):
    if is_between(l[0], l[1], l[2]):
        print_yes()
    elif is_between_reversed(l[0], l[1], l[2]):
        print_yes()
    else:
        print_no()

def main():
    l = parse_input()
    decide_and_print(l)

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' get' (ID: 717)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002158825984224677
    2. '_' → logprob: -6.2521586418151855
    3. '():' → logprob: -9.252159118652344
    4. ' (' → logprob: -10.252159118652344
    5. '()' → logprob: -10.627159118652344
    6. '```' → logprob: -10.627159118652344
    7. '(_' → logprob: -11.502159118652344
    8. '(:' → logprob: -11.627159118652344
    9. '(_:' → logprob: -12.127159118652344
    10. ':' → logprob: -12.502159118652344

Token 4: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.5172414183616638
    2. '\' → logprob: -1.3922414779663086
    3. '\n' → logprob: -3.3922414779663086
    4. '   ' → logprob: -3.5172414779663086
    5. '(' → logprob: -3.7672414779663086
    6. '    
' → logprob: -4.517241477966309
    7. ':' → logprob: -4.642241477966309
    8. ''' → logprob: -5.392241477966309
    9. '()' → logprob: -5.392241477966309
    10. ''\' → logprob: -5.517241477966309

Token 5: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.359432190656662
    2. 'user' → logprob: -2.4844322204589844
    3. 'input' → logprob: -2.8594322204589844
    4. 'x' → logprob: -2.9844322204589844
    5. 'i' → logprob: -3.2344322204589844
    6. '   ' → logprob: -3.9844322204589844
    7. 'r' → logprob: -3.9844322204589844
    8. ' ' → logprob: -4.234432220458984
    9. 'u' → logprob: -5.359432220458984
    10. 'a' → logprob: -5.734432220458984

Token 6: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5008310079574585
    2. ' input' → logprob: -1.1258310079574585
    3. 'input' → logprob: -3.000831127166748
    4. '"' → logprob: -4.375831127166748
    5. ''' → logprob: -5.750831127166748
    6. ' "' → logprob: -6.375831127166748
    7. '  ' → logprob: -7.000831127166748
    8. ' '' → logprob: -7.750831127166748
    9. ' None' → logprob: -8.37583065032959
    10. '(input' → logprob: -8.62583065032959

Token 7: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0015279557555913925
    2. '()' → logprob: -6.876527786254883
    3. '('' → logprob: -8.251527786254883
    4. '("("' → logprob: -9.126527786254883
    5. ' (' → logprob: -10.376527786254883
    6. '(
' → logprob: -10.626527786254883
    7. ''' → logprob: -10.751527786254883
    8. '("")' → logprob: -11.376527786254883
    9. ' ' → logprob: -11.501527786254883
    10. '"' → logprob: -12.001527786254883

Token 8: 'def' (ID: 1314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5307904481887817
    2. '\n' → logprob: -2.155790328979492
    3. 'def' → logprob: -2.905790328979492
    4. '()' → logprob: -3.155790328979492
    5. '```' → logprob: -3.405790328979492
    6. '#' → logprob: -3.780790328979492
    7. '
' → logprob: -3.905790328979492
    8. '(
' → logprob: -3.905790328979492
    9. '.' → logprob: -3.905790328979492
    10. '\' → logprob: -4.280790328979492

Token 9: ' split' (ID: 12648)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.6985287070274353
    2. ' get' → logprob: -1.19852876663208
    3. ' process' → logprob: -2.82352876663208
    4. ' space' → logprob: -2.94852876663208
    5. ' user' → logprob: -3.57352876663208
    6. ' main' → logprob: -4.82352876663208
    7. ' add' → logprob: -4.94852876663208
    8. ' compute' → logprob: -5.07352876663208
    9. ' my' → logprob: -5.19852876663208
    10. '_' → logprob: -5.44852876663208

Token 10: '_input' (ID: 12507)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.23984068632125854
    2. '(' → logprob: -1.6148407459259033
    3. '_text' → logprob: -5.114840507507324
    4. '_line' → logprob: -6.489840507507324
    5. '_string' → logprob: -6.489840507507324
    6. '_words' → logprob: -6.614840507507324
    7. '('_' → logprob: -7.239840507507324
    8. '_word' → logprob: -7.489840507507324
    9. '_s' → logprob: -7.989840507507324
    10. '_input' → logprob: -8.364840507507324

Token 11: '(s' (ID: 1858)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.013506771065294743
    2. '_' → logprob: -4.513506889343262
    3. '('_' → logprob: -6.638506889343262
    4. '("("' → logprob: -8.388506889343262
    5. '('' → logprob: -9.013506889343262
    6. '("_' → logprob: -9.013506889343262
    7. '(_)' → logprob: -9.013506889343262
    8. '```' → logprob: -9.263506889343262
    9. '_text' → logprob: -9.763506889343262
    10. '   ' → logprob: -10.388506889343262

Token 12: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.06477798521518707
    2. ')' → logprob: -2.9397780895233154
    3. ',' → logprob: -5.064777851104736
    4. ':' → logprob: -6.939777851104736
    5. '):
' → logprob: -7.314777851104736
    6. ' ):' → logprob: -7.564777851104736
    7. '[' → logprob: -8.189778327941895
    8. '_' → logprob: -8.689778327941895
    9. 'u' → logprob: -9.189778327941895
    10. '.split' → logprob: -9.314778327941895

Token 13: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7451736330986023
    2. 's' → logprob: -1.745173692703247
    3. ' s' → logprob: -1.745173692703247
    4. ' return' → logprob: -1.995173692703247
    5. '(s' → logprob: -3.620173692703247
    6. 'return' → logprob: -4.745173454284668
    7. '(' → logprob: -6.245173454284668
    8. ' (' → logprob: -7.245173454284668
    9. '    ' → logprob: -7.995173454284668
    10. ''s' → logprob: -8.120173454284668

Token 14: ' return' (ID: 622)
  Prédit: ' s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.16754993796348572
    2. 's' → logprob: -1.917549967765808
    3. ' return' → logprob: -5.292550086975098
    4. '   ' → logprob: -6.167550086975098
    5. 'return' (adapté à ' return') → logprob: -8.792550086975098
    6. '(s' → logprob: -11.917550086975098
    7. '    ' → logprob: -12.042550086975098
    8. '[]' → logprob: -13.667550086975098
    9. ''s' → logprob: -13.667550086975098
    10. '```' → logprob: -13.917550086975098

Token 15: ' s' (ID: 265)
  Prédit: ' s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.014164102263748646
    2. 's' → logprob: -4.264163970947266
    3. '(s' → logprob: -14.639163970947266
    4. ' ' → logprob: -16.764163970947266
    5. '[' → logprob: -17.889163970947266
    6. '   ' → logprob: -18.139163970947266
    7. '`' → logprob: -18.264163970947266
    8. ')' → logprob: -18.264163970947266
    9. '```' → logprob: -18.514163970947266
    10. '	s' → logprob: -18.764163970947266

Token 16: '.split' (ID: 10347)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.6933512091636658
    2. '.split' → logprob: -0.6933512091636658
    3. '.strip' → logprob: -8.568350791931152
    4. ' .' → logprob: -11.693350791931152
    5. 'split' → logprob: -12.943350791931152
    6. '.replace' → logprob: -13.818350791931152
    7. '.rstrip' → logprob: -14.693350791931152
    8. '.s' → logprob: -14.818350791931152
    9. '().' → logprob: -15.068350791931152
    10. '.Split' → logprob: -15.318350791931152

Token 17: '()

' (ID: 5874)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '('' → logprob: -0.10642322897911072
    2. '()' → logprob: -2.8564231395721436
    3. '(' → logprob: -3.2314231395721436
    4. '("("' → logprob: -5.606423377990723
    5. ''' → logprob: -8.856423377990723
    6. '("' → logprob: -9.106423377990723
    7. '('.')' → logprob: -10.981423377990723
    8. '(',' → logprob: -11.481423377990723
    9. '(None' → logprob: -11.731423377990723
    10. '(('' → logprob: -13.106423377990723

Token 18: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.001341792638413608
    2. 'd' → logprob: -6.751341819763184
    3. '```' → logprob: -9.751341819763184
    4. 'de' → logprob: -10.126341819763184
    5. '#' → logprob: -10.251341819763184
    6. '\' → logprob: -10.876341819763184
    7. '[' → logprob: -11.501341819763184
    8. ' def' → logprob: -13.376341819763184
    9. '(' → logprob: -13.626341819763184
    10. ')' → logprob: -14.126341819763184

Token 19: ' convert' (ID: 8452)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.3625735342502594
    2. 'main' → logprob: -2.3625736236572266
    3. ' join' → logprob: -2.7375736236572266
    4. ' process' → logprob: -2.7375736236572266
    5. 'process' → logprob: -3.3625736236572266
    6. 'join' → logprob: -3.7375736236572266
    7. 'parse' → logprob: -6.112573623657227
    8. ' parse' → logprob: -6.112573623657227
    9. 'calculate' → logprob: -6.237573623657227
    10. ' is' → logprob: -6.362573623657227

Token 20: '_to' (ID: 5089)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.7028547525405884
    2. '_to' → logprob: -0.7028547525405884
    3. '(' → logprob: -5.827854633331299
    4. '_token' → logprob: -6.077854633331299
    5. '_(' → logprob: -6.452854633331299
    6. '(_' → logprob: -7.452854633331299
    7. '_tokens' → logprob: -7.827854633331299
    8. '_input' → logprob: -7.827854633331299
    9. '_string' → logprob: -8.077855110168457
    10. '```' → logprob: -8.577855110168457

Token 21: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.0007867562817409635
    2. '_' → logprob: -7.625786781311035
    3. '_integer' → logprob: -8.625786781311035
    4. 'int' → logprob: -9.750786781311035
    5. '_tokens' → logprob: -10.875786781311035
    6. '_number' → logprob: -11.375786781311035
    7. '_float' → logprob: -11.750786781311035
    8. '_list' → logprob: -12.250786781311035
    9. '_string' → logprob: -12.250786781311035
    10. '_token' → logprob: -12.750786781311035

Token 22: '_list' (ID: 4162)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.39760133624076843
    2. '(s' → logprob: -1.3976013660430908
    3. 's' → logprob: -2.522601366043091
    4. ' (' → logprob: -7.897601127624512
    5. '(n' → logprob: -9.897601127624512
    6. '("("' → logprob: -9.897601127624512
    7. '(token' → logprob: -10.522601127624512
    8. '(x' → logprob: -10.647601127624512
    9. '```' → logprob: -11.397601127624512
    10. '(t' → logprob: -11.522601127624512

Token 23: '(str' (ID: 7946)
  Prédit: '(s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.0622045174241066
    2. '(' → logprob: -2.812204599380493
    3. ' (' → logprob: -9.187204360961914
    4. '(lst' → logprob: -9.687204360961914
    5. '("("' → logprob: -11.312204360961914
    6. '(ls' → logprob: -11.812204360961914
    7. '(strings' → logprob: -12.062204360961914
    8. '(n' → logprob: -12.312204360961914
    9. '(l' → logprob: -12.312204360961914
    10. '(ss' → logprob: -12.437204360961914

Token 24: '_list' (ID: 4162)
  Prédit: 'ings'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ings' → logprob: -1.1317510604858398
    2. '_list' → logprob: -1.2567510604858398
    3. 'ing' → logprob: -1.6317510604858398
    4. 's' → logprob: -1.6317510604858398
    5. '_lst' → logprob: -7.25675106048584
    6. '_' → logprob: -7.38175106048584
    7. 'List' → logprob: -9.00675106048584
    8. ')' → logprob: -9.63175106048584
    9. '_lists' → logprob: -9.88175106048584
    10. '_arr' → logprob: -10.25675106048584

Token 25: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0029696188867092133
    2. ')' → logprob: -6.002969741821289
    3. ' ):' → logprob: -7.877969741821289
    4. '):
' → logprob: -9.252969741821289
    5. '):

' → logprob: -12.627969741821289
    6. ' )' → logprob: -12.877969741821289
    7. '[]):' → logprob: -12.877969741821289
    8. ',' → logprob: -13.127969741821289
    9. '):
' → logprob: -13.252969741821289
    10. '   ' → logprob: -13.877969741821289

Token 26: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.19976164400577545
    2. '[int' → logprob: -2.1997616291046143
    3. '[' → logprob: -2.6997616291046143
    4. ' [' → logprob: -6.074761867523193
    5. ' return' → logprob: -8.449761390686035
    6. '[
' → logprob: -8.949761390686035
    7. 'int' → logprob: -9.199761390686035
    8. '[]' → logprob: -9.699761390686035
    9. '[i' → logprob: -9.824761390686035
    10. 'return' → logprob: -10.199761390686035

Token 27: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07134557515382767
    2. ' return' → logprob: -2.696345567703247
    3. 'return' (adapté à ' return') → logprob: -6.696345806121826
    4. '[int' → logprob: -9.321345329284668
    5. '[' → logprob: -10.196345329284668
    6. ' [' → logprob: -10.821345329284668
    7. ' int' → logprob: -11.821345329284668
    8. 'int' → logprob: -12.071345329284668
    9. '    ' → logprob: -12.071345329284668
    10. '	return' → logprob: -13.446345329284668

Token 28: ' list' (ID: 1562)
  Prédit: ' ['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.03752928599715233
    2. ' list' → logprob: -3.412529230117798
    3. '[' → logprob: -5.912529468536377
    4. '[list' → logprob: -6.912529468536377
    5. 'list' → logprob: -8.787528991699219
    6. '[int' → logprob: -11.162528991699219
    7. '[List' → logprob: -12.412528991699219
    8. ' ' → logprob: -13.412528991699219
    9. ' ' → logprob: -13.412528991699219
    10. '[len' → logprob: -15.037528991699219

Token 29: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.004079112783074379
    2. '(' → logprob: -5.504079341888428
    3. '(int' → logprob: -15.00407886505127
    4. '(
' → logprob: -15.62907886505127
    5. 'map' → logprob: -16.629079818725586
    6. '(

' → logprob: -17.129079818725586
    7. '_map' → logprob: -17.629079818725586
    8. '	map' → logprob: -17.754079818725586
    9. ',map' → logprob: -17.754079818725586
    10. '(m' → logprob: -18.129079818725586

Token 30: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0007775885751470923
    2. '(' → logprob: -7.375777721405029
    3. 'int' → logprob: -9.000777244567871
    4. ' int' → logprob: -10.875777244567871
    5. '<int' → logprob: -12.625777244567871
    6. '[int' → logprob: -13.500777244567871
    7. ',int' → logprob: -13.750777244567871
    8. ' (' → logprob: -14.250777244567871
    9. '=int' → logprob: -14.500777244567871
    10. '   ' → logprob: -14.625777244567871

Token 31: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.01750166527926922
    2. ',str' → logprob: -4.2675018310546875
    3. '(str' → logprob: -5.8925018310546875
    4. ' ,' → logprob: -7.7675018310546875
    5. '(' → logprob: -9.267501831054688
    6. ')' → logprob: -11.767501831054688
    7. '(s' → logprob: -11.892501831054688
    8. ' str' → logprob: -11.892501831054688
    9. ',
' → logprob: -12.142501831054688
    10. '   ' → logprob: -12.142501831054688

Token 32: ' str' (ID: 989)
  Prédit: 'str'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'str' → logprob: -0.5759434103965759
    2. ' str' → logprob: -0.8259434103965759
    3. '(str' → logprob: -13.950942993164062
    4. '	str' → logprob: -14.200942993164062
    5. ')' → logprob: -14.450942993164062
    6. 's' → logprob: -14.450942993164062
    7. ' ' → logprob: -15.075942993164062
    8. '_str' → logprob: -15.200942993164062
    9. '   ' → logprob: -15.450942993164062
    10. '))' → logprob: -15.700942993164062

Token 33: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -6.704273118884885e-07
    2. '_' → logprob: -15.125000953674316
    3. '_lst' → logprob: -16.375
    4. ')_' → logprob: -16.375
    5. '_l' → logprob: -17.125
    6. 'list' → logprob: -17.25
    7. ')' → logprob: -17.375
    8. ' _' → logprob: -18.5
    9. '_li' → logprob: -18.75
    10. 'ist' → logprob: -19.0

Token 34: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -9.849109119386412e-06
    2. ')))' → logprob: -12.250009536743164
    3. ')' → logprob: -12.875009536743164
    4. ' ))' → logprob: -13.500009536743164
    5. '))
' → logprob: -14.000009536743164
    6. '()))' → logprob: -16.875009536743164
    7. '   ' → logprob: -17.000009536743164
    8. '));' → logprob: -17.625009536743164
    9. ' ' → logprob: -18.375009536743164
    10. '))

' → logprob: -18.750009536743164

Token 35: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -8.280175097752362e-05
    2. 'if' → logprob: -9.875082969665527
    3. '#' → logprob: -10.875082969665527
    4. '```' → logprob: -12.875082969665527
    5. 'print' → logprob: -13.375082969665527
    6. ' def' → logprob: -13.500082969665527
    7. '\' → logprob: -13.500082969665527
    8. 'for' → logprob: -13.875082969665527
    9. '<|end|>' → logprob: -13.875082969665527
    10. '<|end|>' → logprob: -14.500082969665527

Token 36: ' parse' (ID: 8420)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.03762631118297577
    2. ' calculate' → logprob: -4.287626266479492
    3. ' find' → logprob: -5.162626266479492
    4. ' process' → logprob: -5.412626266479492
    5. ' solve' → logprob: -5.662626266479492
    6. ' sum' → logprob: -5.787626266479492
    7. ' count' → logprob: -6.537626266479492
    8. ' reverse' → logprob: -7.162626266479492
    9. 'main' → logprob: -7.287626266479492
    10. ' factorial' → logprob: -7.287626266479492

Token 37: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.0011208108626306057
    2. '_line' → logprob: -8.251120567321777
    3. '_data' → logprob: -9.001120567321777
    4. '_' → logprob: -9.251120567321777
    5. '_command' → logprob: -9.626120567321777
    6. '_output' → logprob: -9.751120567321777
    7. '(' → logprob: -9.876120567321777
    8. '_user' → logprob: -10.001120567321777
    9. '_parameters' → logprob: -10.126120567321777
    10. '_inputs' → logprob: -10.251120567321777

Token 38: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.021257536485791206
    2. '(' → logprob: -4.146257400512695
    3. '(s' → logprob: -5.521257400512695
    4. '()(' → logprob: -7.271257400512695
    5. '()' → logprob: -8.396257400512695
    6. '():
' → logprob: -9.646257400512695
    7. '(line' → logprob: -9.646257400512695
    8. '_line' → logprob: -10.146257400512695
    9. ' ():' → logprob: -10.646257400512695
    10. '(()' → logprob: -11.021257400512695

Token 39: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -9.496052371105179e-05
    2. 's' → logprob: -9.87509536743164
    3. 'input' → logprob: -10.87509536743164
    4. '()' → logprob: -12.50009536743164
    5. 'return' → logprob: -12.50009536743164
    6. '    
' → logprob: -12.75009536743164
    7. ' s' → logprob: -13.25009536743164
    8. '(' → logprob: -13.25009536743164
    9. ' return' → logprob: -13.50009536743164
    10. ' input' → logprob: -13.50009536743164

Token 40: ' s' (ID: 265)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' (adapté à ' s') → logprob: -0.780095636844635
    2. '   ' → logprob: -1.2800955772399902
    3. ' s' → logprob: -1.5300955772399902
    4. ' user' → logprob: -4.03009557723999
    5. ' line' → logprob: -4.28009557723999
    6. ' input' → logprob: -5.40509557723999
    7. 'line' → logprob: -5.78009557723999
    8. 'user' → logprob: -5.78009557723999
    9. 'input' → logprob: -6.15509557723999
    10. ' raw' → logprob: -6.53009557723999

Token 41: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.061970822513103485
    2. '=' → logprob: -2.8119707107543945
    3. ' ' → logprob: -12.936970710754395
    4. '=input' → logprob: -14.936970710754395
    5. ' =)' → logprob: -16.43697166442871
    6. '   ' → logprob: -16.56197166442871
    7. ' =
' → logprob: -16.68697166442871
    8. ',' → logprob: -17.06197166442871
    9. ' ' → logprob: -17.18697166442871
    10. '  ' → logprob: -17.68697166442871

Token 42: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.12763145565986633
    2. 'get' → logprob: -2.127631425857544
    3. ' input' → logprob: -7.377631664276123
    4. 'input' → logprob: -9.502631187438965
    5. ' ' → logprob: -13.252631187438965
    6. '	get' → logprob: -13.752631187438965
    7. '(get' → logprob: -15.502631187438965
    8. '_get' → logprob: -15.752631187438965
    9. ' getchar' → logprob: -16.87763214111328
    10. '=get' → logprob: -17.00263214111328

Token 43: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -4.060365608893335e-05
    2. '_' → logprob: -10.125041007995605
    3. ' _' → logprob: -15.000041007995605
    4. '_output' → logprob: -17.12504005432129
    5. '_in' → logprob: -17.37504005432129
    6. '_inputs' → logprob: -17.62504005432129
    7. '_Input' → logprob: -17.75004005432129
    8. '_user' → logprob: -18.00004005432129
    9. '_INPUT' → logprob: -18.50004005432129
    10. '_put' → logprob: -18.62504005432129

Token 44: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00014978687977418303
    2. '())' → logprob: -8.875149726867676
    3. ' ()' → logprob: -12.625149726867676
    4. '(' → logprob: -13.000149726867676
    5. ')' → logprob: -13.500149726867676
    6. '()
' → logprob: -14.000149726867676
    7. '()`' → logprob: -14.875149726867676
    8. '()

' → logprob: -15.500149726867676
    9. '()>' → logprob: -15.500149726867676
    10. '()<' → logprob: -15.750149726867676

Token 45: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05677242577075958
    2. 'tokens' → logprob: -3.306772470474243
    3. ' tokens' → logprob: -5.056772232055664
    4. 'str' → logprob: -5.931772232055664
    5. 'split' → logprob: -6.056772232055664
    6. 's' → logprob: -6.931772232055664
    7. ' ' → logprob: -6.931772232055664
    8. ' parts' → logprob: -7.056772232055664
    9. '_tokens' → logprob: -7.306772232055664
    10. '    
' → logprob: -7.556772232055664

Token 46: ' str' (ID: 989)
  Prédit: 'tokens'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tokens' → logprob: -0.45162785053253174
    2. 'str' (adapté à ' str') → logprob: -1.4516278505325317
    3. 'parts' → logprob: -2.701627731323242
    4. 'words' → logprob: -3.326627731323242
    5. 'lst' → logprob: -4.201627731323242
    6. 'split' → logprob: -5.201627731323242
    7. ' tokens' → logprob: -6.576627731323242
    8. 'items' → logprob: -6.701627731323242
    9. ' parts' → logprob: -7.201627731323242
    10. 'token' → logprob: -7.201627731323242

Token 47: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -0.0003054301778320223
    2. '_lst' → logprob: -8.50030517578125
    3. 's' → logprob: -9.62530517578125
    4. '_' → logprob: -10.87530517578125
    5. '_lists' → logprob: -11.62530517578125
    6. '_l' → logprob: -13.12530517578125
    7. 'list' → logprob: -13.25030517578125
    8. '_tokens' → logprob: -13.75030517578125
    9. '_li' → logprob: -14.12530517578125
    10. 'ing' → logprob: -14.37530517578125

Token 48: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.28122657537460327
    2. '=' → logprob: -1.406226634979248
    3. '(' → logprob: -10.28122615814209
    4. 's' → logprob: -10.65622615814209
    5. ')' → logprob: -11.65622615814209
    6. ' ' → logprob: -12.40622615814209
    7. '(s' → logprob: -13.03122615814209
    8. '()' → logprob: -14.28122615814209
    9. ' =)' → logprob: -14.53122615814209
    10. ',' → logprob: -14.65622615814209

Token 49: ' split' (ID: 12648)
  Prédit: ' split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' split' → logprob: -0.008619185537099838
    2. 'split' → logprob: -4.75861930847168
    3. ' s' → logprob: -12.63361930847168
    4. '(split' → logprob: -13.75861930847168
    5. 's' → logprob: -15.38361930847168
    6. ' splits' → logprob: -17.63361930847168
    7. ' ' → logprob: -17.75861930847168
    8. '_split' → logprob: -18.25861930847168
    9. '.split' → logprob: -19.38361930847168
    10. 'spl' → logprob: -19.75861930847168

Token 50: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -1.5048530030981055e-06
    2. '_' → logprob: -13.875001907348633
    3. '(s' → logprob: -16.250001907348633
    4. '_in' → logprob: -16.500001907348633
    5. 'input' → logprob: -17.125001907348633
    6. '_s' → logprob: -17.125001907348633
    7. '_output' → logprob: -17.250001907348633
    8. '_inputs' → logprob: -17.250001907348633
    9. '_string' → logprob: -17.750001907348633
    10. '```' → logprob: -18.000001907348633

Token 51: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.0001434690784662962
    2. '(' → logprob: -8.875143051147461
    3. ' (' → logprob: -12.625143051147461
    4. 's' → logprob: -15.875143051147461
    5. ')' → logprob: -16.62514305114746
    6. ' ' → logprob: -17.50014305114746
    7. '```' → logprob: -18.37514305114746
    8. ')(' → logprob: -18.50014305114746
    9. '(
' → logprob: -18.87514305114746
    10. '(S' → logprob: -19.87514305114746

Token 52: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00011021859245374799
    2. ')
' → logprob: -9.125110626220703
    3. ' )' → logprob: -13.750110626220703
    4. ')return' → logprob: -16.750110626220703
    5. '   ' → logprob: -17.000110626220703
    6. '))' → logprob: -17.500110626220703
    7. ')
' → logprob: -17.625110626220703
    8. ')

' → logprob: -17.875110626220703
    9. '),' → logprob: -18.625110626220703
    10. ')s' → logprob: -19.125110626220703

Token 53: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.023408522829413414
    2. 'return' → logprob: -4.02340841293335
    3. ' return' → logprob: -5.89840841293335
    4. 'int' → logprob: -6.02340841293335
    5. ' int' → logprob: -10.898408889770508
    6. '```' → logprob: -11.023408889770508
    7. 'ints' → logprob: -11.148408889770508
    8. '  ' → logprob: -12.023408889770508
    9. ' ' → logprob: -12.523408889770508
    10. ' ints' → logprob: -12.898408889770508

Token 54: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' (adapté à ' int') → logprob: -0.19746510684490204
    2. ' int' → logprob: -2.447465181350708
    3. 'return' → logprob: -2.572465181350708
    4. ' return' → logprob: -4.197464942932129
    5. '   ' → logprob: -7.447464942932129
    6. 'num' → logprob: -7.447464942932129
    7. 'ints' → logprob: -10.447464942932129
    8. ' num' → logprob: -10.447464942932129
    9. ' ints' → logprob: -11.072464942932129
    10. ' ' → logprob: -11.197464942932129

Token 55: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -3.2378600735682994e-05
    2. '_' → logprob: -11.625032424926758
    3. 's' → logprob: -11.750032424926758
    4. '_lists' → logprob: -11.875032424926758
    5. '_lst' → logprob: -12.250032424926758
    6. '_li' → logprob: -13.500032424926758
    7. '_l' → logprob: -14.125032424926758
    8. '_lista' → logprob: -14.625032424926758
    9. ' _' → logprob: -15.500032424926758
    10. '_s' → logprob: -15.625032424926758

Token 56: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.2014302909374237
    2. ' =' → logprob: -1.701430320739746
    3. '(' → logprob: -11.076430320739746
    4. '(s' → logprob: -14.701430320739746
    5. '＝' → logprob: -14.826430320739746
    6. 's' → logprob: -15.201430320739746
    7. ')' → logprob: -15.826430320739746
    8. ' ' → logprob: -16.70142936706543
    9. '()' → logprob: -16.95142936706543
    10. '=}' → logprob: -17.57642936706543

Token 57: ' convert' (ID: 8452)
  Prédit: ' convert'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' convert' → logprob: -0.0008046258008107543
    2. 'convert' → logprob: -7.125804424285889
    3. '(convert' → logprob: -16.375804901123047
    4. ' ' → logprob: -17.750804901123047
    5. ' ' → logprob: -18.125804901123047
    6. '_convert' → logprob: -18.375804901123047
    7. '.convert' → logprob: -18.500804901123047
    8. ' covert' → logprob: -18.750804901123047
    9. '   ' → logprob: -19.500804901123047
    10. ' convertir' → logprob: -19.875804901123047

Token 58: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: 0.0
    2. '```' → logprob: -18.25
    3. '_of' → logprob: -19.125
    4. '_' → logprob: -19.125
    5. ' _' → logprob: -20.0
    6. '_for' → logprob: -20.25
    7. '##_' → logprob: -20.25
    8. '   ' → logprob: -20.375
    9. '_from' → logprob: -20.75
    10. '_t' → logprob: -20.75

Token 59: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.02981008030474186
    2. 'int' → logprob: -3.5298101902008057
    3. 'nt' → logprob: -9.904809951782227
    4. 't' → logprob: -11.779809951782227
    5. '_list' → logprob: -13.904809951782227
    6. '<int' → logprob: -14.904809951782227
    7. '_t' → logprob: -15.029809951782227
    8. '_' → logprob: -15.904809951782227
    9. '_str' → logprob: -16.529809951782227
    10. ' int' → logprob: -16.529809951782227

Token 60: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -2.1008713702030946e-06
    2. '_' → logprob: -13.500001907348633
    3. 'List' → logprob: -15.250001907348633
    4. '_lists' → logprob: -15.625001907348633
    5. '_lst' → logprob: -16.375001907348633
    6. '_LIST' → logprob: -17.250001907348633
    7. '_List' → logprob: -17.375001907348633
    8. 'list' → logprob: -17.625001907348633
    9. ')_' → logprob: -17.875001907348633
    10. ' _' → logprob: -18.000001907348633

Token 61: '(str' (ID: 7946)
  Prédit: '(str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(str' → logprob: -0.0007113590254448354
    2. '(' → logprob: -7.250711441040039
    3. ' (' → logprob: -13.875711441040039
    4. '(s' → logprob: -16.50071144104004
    5. '(int' → logprob: -16.75071144104004
    6. '(
' → logprob: -16.87571144104004
    7. '("("' → logprob: -16.87571144104004
    8. '(Str' → logprob: -17.37571144104004
    9. 'str' → logprob: -18.00071144104004
    10. ' ' → logprob: -18.12571144104004

Token 62: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -6.749814019713085e-06
    2. ')_' → logprob: -12.750006675720215
    3. ')' → logprob: -13.000006675720215
    4. '_' → logprob: -13.875006675720215
    5. '_)' → logprob: -15.875006675720215
    6. '_l' → logprob: -16.25000762939453
    7. 'list' → logprob: -16.75000762939453
    8. '_lists' → logprob: -16.87500762939453
    9. 'List' → logprob: -17.00000762939453
    10. '_List' → logprob: -17.50000762939453

Token 63: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0011796315666288137
    2. ')
' → logprob: -6.7511796951293945
    3. '   ' → logprob: -11.876179695129395
    4. ' )' → logprob: -13.626179695129395
    5. ')return' → logprob: -13.876179695129395
    6. ')
' → logprob: -15.126179695129395
    7. ')

' → logprob: -17.251178741455078
    8. '))' → logprob: -17.501178741455078
    9. '()' → logprob: -17.751178741455078
    10. ' ' → logprob: -18.126178741455078

Token 64: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0003566767554730177
    2. 'return' → logprob: -8.375356674194336
    3. ' return' → logprob: -9.125356674194336
    4. '
' → logprob: -12.000356674194336
    5. '	return' → logprob: -12.250356674194336
    6. '    
' → logprob: -12.375356674194336
    7. '```' → logprob: -14.000356674194336
    8. ':return' → logprob: -14.750356674194336
    9. '   ' → logprob: -15.875356674194336
    10. '<|end|>' → logprob: -16.250356674194336

Token 65: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.26638394594192505
    2. 'return' (adapté à ' return') → logprob: -1.7663838863372803
    3. ' return' → logprob: -2.7663838863372803
    4. ' ' → logprob: -11.76638412475586
    5. '    
' → logprob: -13.26638412475586
    6. '	return' → logprob: -13.51638412475586
    7. 'r' → logprob: -13.64138412475586
    8. '    ' → logprob: -14.14138412475586
    9. ':return' → logprob: -14.26638412475586
    10. '```' → logprob: -14.39138412475586

Token 66: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.0008054602658376098
    2. 'int' → logprob: -7.125805377960205
    3. '(int' → logprob: -14.375805854797363
    4. ' ' → logprob: -16.125804901123047
    5. '[int' → logprob: -16.250804901123047
    6. '<int' → logprob: -17.000804901123047
    7. ',int' → logprob: -17.250804901123047
    8. ' in' → logprob: -17.500804901123047
    9. '	int' → logprob: -18.000804901123047
    10. ':int' → logprob: -18.625804901123047

Token 67: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -0.0002728985855355859
    2. '_' → logprob: -8.250272750854492
    3. 'List' → logprob: -12.625272750854492
    4. '_l' → logprob: -13.000272750854492
    5. '(_' → logprob: -13.375272750854492
    6. '_lst' → logprob: -13.625272750854492
    7. '_li' → logprob: -14.125272750854492
    8. '```' → logprob: -14.875272750854492
    9. '_lista' → logprob: -15.000272750854492
    10. '(' → logprob: -15.250272750854492

Token 68: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.6889566779136658
    2. '[' → logprob: -1.4389567375183105
    3. '
' → logprob: -1.9389567375183105
    4. '<|end|>' → logprob: -2.8139567375183105
    5. '#' → logprob: -3.6889567375183105
    6. '[
' → logprob: -4.9389567375183105
    7. '```' → logprob: -5.4389567375183105
    8. '()' → logprob: -5.8139567375183105
    9. '\n' → logprob: -5.9389567375183105
    10. 'newline' → logprob: -5.9389567375183105

Token 69: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.7668425440788269
    2. '#' → logprob: -1.3918426036834717
    3. '[' → logprob: -2.0168426036834717
    4. 'n' → logprob: -2.7668426036834717
    5. 'a' → logprob: -3.7668426036834717
    6. 'print' → logprob: -4.266842365264893
    7. 'data' → logprob: -4.516842365264893
    8. '<|end|>' → logprob: -4.766842365264893
    9. '```' → logprob: -4.766842365264893
    10. '\' → logprob: -5.766842365264893

Token 70: ' is' (ID: 382)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.10089252144098282
    2. ' calculate' → logprob: -3.3508925437927246
    3. ' factorial' → logprob: -3.9758925437927246
    4. ' solve' → logprob: -4.350892543792725
    5. ' sum' → logprob: -4.475892543792725
    6. ' compute' → logprob: -5.350892543792725
    7. ' process' → logprob: -5.475892543792725
    8. ' find' → logprob: -6.100892543792725
    9. ' fibonacci' → logprob: -6.600892543792725
    10. '_' → logprob: -6.975892543792725

Token 71: '_between' (ID: 124874)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.9732535481452942
    2. '_pal' → logprob: -0.9732535481452942
    3. '_prime' → logprob: -1.4732534885406494
    4. '_even' → logprob: -5.2232537269592285
    5. '_sorted' → logprob: -5.4732537269592285
    6. '_valid' → logprob: -5.9732537269592285
    7. ' _' → logprob: -6.5982537269592285
    8. '_div' → logprob: -7.9732537269592285
    9. '_space' → logprob: -8.84825325012207
    10. '_equal' → logprob: -8.97325325012207

Token 72: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.035974688827991486
    2. '(a' → logprob: -3.4109747409820557
    3. '(x' → logprob: -7.035974502563477
    4. ' (' → logprob: -8.035974502563477
    5. '(_' → logprob: -8.035974502563477
    6. '(_,' → logprob: -8.660974502563477
    7. '(value' → logprob: -8.660974502563477
    8. '(s' → logprob: -9.285974502563477
    9. '_' → logprob: -9.785974502563477
    10. '(lower' → logprob: -10.285974502563477

Token 73: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.16958554089069366
    2. '_,' → logprob: -2.4195854663848877
    3. '(' → logprob: -3.9195854663848877
    4. ')' → logprob: -4.294585704803467
    5. ',_' → logprob: -4.419585704803467
    6. ',)' → logprob: -4.919585704803467
    7. '(a' → logprob: -5.419585704803467
    8. '_' → logprob: -5.669585704803467
    9. ',b' → logprob: -6.044585704803467
    10. ',a' → logprob: -6.544585704803467

Token 74: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.07178913801908493
    2. ' b' → logprob: -2.696789026260376
    3. 'low' → logprob: -7.196789264678955
    4. 'lower' → logprob: -7.821789264678955
    5. ' low' → logprob: -8.196788787841797
    6. 'min' → logprob: -8.821788787841797
    7. ' lower' → logprob: -9.321788787841797
    8. 'l' → logprob: -9.946788787841797
    9. ' min' → logprob: -10.946788787841797
    10. 'x' → logprob: -11.321788787841797

Token 75: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0005151443183422089
    2. ')' → logprob: -8.87551498413086
    3. '):' → logprob: -9.50051498413086
    4. '_,' → logprob: -9.50051498413086
    5. ',a' → logprob: -9.62551498413086
    6. ',)' → logprob: -9.87551498413086
    7. ',_' → logprob: -10.37551498413086
    8. ',c' → logprob: -11.00051498413086
    9. ' ,' → logprob: -11.25051498413086
    10. ',b' → logprob: -11.37551498413086

Token 76: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.010778740979731083
    2. 'x' → logprob: -5.260778903961182
    3. ' c' → logprob: -5.260778903961182
    4. 'value' → logprob: -8.635778427124023
    5. ' x' → logprob: -9.510778427124023
    6. 'n' → logprob: -10.510778427124023
    7. ' ' → logprob: -11.385778427124023
    8. 'val' → logprob: -11.760778427124023
    9. 'num' → logprob: -12.135778427124023
    10. 'target' → logprob: -12.135778427124023

Token 77: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00044032474397681653
    2. ')' → logprob: -7.7504401206970215
    3. '):
' → logprob: -12.37544059753418
    4. ':' → logprob: -12.50044059753418
    5. ' ):' → logprob: -14.00044059753418
    6. '=' → logprob: -15.25044059753418
    7. ',' → logprob: -15.62544059753418
    8. '(' → logprob: -16.75044059753418
    9. '):
' → logprob: -16.75044059753418
    10. '():' → logprob: -17.25044059753418

Token 78: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5238032937049866
    2. ' return' → logprob: -1.3988032341003418
    3. ' (' → logprob: -2.273803234100342
    4. ' a' → logprob: -3.898803234100342
    5. 'return' → logprob: -4.023803234100342
    6. '(' → logprob: -4.898803234100342
    7. ':' → logprob: -5.273803234100342
    8. '    ' → logprob: -6.148803234100342
    9. ' ' → logprob: -6.523803234100342
    10. 'a' → logprob: -6.898803234100342

Token 79: ' return' (ID: 622)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.16631877422332764
    2. ' return' → logprob: -2.416318893432617
    3. ' a' → logprob: -3.666318893432617
    4. '   ' → logprob: -4.041318893432617
    5. 'a' → logprob: -5.166318893432617
    6. '(' → logprob: -5.166318893432617
    7. 'return' (adapté à ' return') → logprob: -5.291318893432617
    8. ' ' → logprob: -6.416318893432617
    9. 'b' → logprob: -7.166318893432617
    10. '    ' → logprob: -7.416318893432617

Token 80: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.36973124742507935
    2. ' a' → logprob: -1.2447311878204346
    3. ' b' → logprob: -4.619731426239014
    4. 'b' → logprob: -4.994731426239014
    5. ' (' → logprob: -5.869731426239014
    6. '(a' → logprob: -6.744731426239014
    7. '(' → logprob: -7.994731426239014
    8. '(b' → logprob: -9.869730949401855
    9. ' ' → logprob: -10.994730949401855
    10. '   ' → logprob: -11.869730949401855

Token 81: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.20384521782398224
    2. '<=' → logprob: -1.7038452625274658
    3. ' >=' → logprob: -6.578845024108887
    4. '>=' → logprob: -7.203845024108887
    5. ' <' → logprob: -8.828845024108887
    6. '<' → logprob: -8.953845024108887
    7. '>' → logprob: -11.828845024108887
    8. ' ' → logprob: -12.703845024108887
    9. '==' → logprob: -13.078845024108887
    10. ' ==' → logprob: -13.203845024108887

Token 82: ' c' (ID: 274)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.0119955288246274
    2. 'c' → logprob: -4.511995315551758
    3. ' b' → logprob: -7.011995315551758
    4. ' c' → logprob: -10.011995315551758
    5. '	b' → logprob: -14.261995315551758
    6. 'a' → logprob: -15.449495315551758
    7. '	c' → logprob: -16.136995315551758
    8. ' ' → logprob: -16.449495315551758
    9. '   ' → logprob: -17.324495315551758
    10. '```' → logprob: -17.386995315551758

Token 83: ' and' (ID: 326)
  Prédit: 'and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'and' → logprob: -0.7093152403831482
    2. ' and' → logprob: -0.9593152403831482
    3. '<=' → logprob: -2.084315299987793
    4. ' <=' → logprob: -7.709315299987793
    5. '<' → logprob: -11.709315299987793
    6. 'a' → logprob: -12.459315299987793
    7. ' ' → logprob: -12.459315299987793
    8. 'b' → logprob: -12.834315299987793
    9. '≤' → logprob: -14.709315299987793
    10. '0' → logprob: -14.834315299987793

Token 84: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.0028362537268549204
    2. 'b' → logprob: -6.127836227416992
    3. ' c' → logprob: -7.377836227416992
    4. '	c' → logprob: -11.002836227416992
    5. '<|end|>' → logprob: -12.377836227416992
    6. ' b' → logprob: -13.377836227416992
    7. '<|end|>' → logprob: -13.627836227416992
    8. ' ' → logprob: -14.752836227416992
    9. ')c' → logprob: -14.877836227416992
    10. ' ' → logprob: -15.002836227416992

Token 85: ' <=' (ID: 5017)
  Prédit: '<='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<=' → logprob: -0.07891049981117249
    2. ' <=' → logprob: -2.5789105892181396
    3. '<' → logprob: -11.328910827636719
    4. ' ' → logprob: -13.078910827636719
    5. ' <' → logprob: -13.078910827636719
    6. '<|end|>' → logprob: -13.578910827636719
    7. 'and' → logprob: -13.828910827636719
    8. '>=' → logprob: -14.703910827636719
    9. ')<=' → logprob: -14.828910827636719
    10. ' <=",' → logprob: -14.828910827636719

Token 86: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -9.615255839889869e-05
    2. ' b' → logprob: -9.250096321105957
    3. ')b' → logprob: -20.25009536743164
    4. '<|end|>' → logprob: -20.50009536743164
    5. '	b' → logprob: -22.25009536743164
    6. '   ' → logprob: -22.50009536743164
    7. '>b' → logprob: -22.62509536743164
    8. '*b' → logprob: -22.75009536743164
    9. '_b' → logprob: -22.87509536743164
    10. ' ' → logprob: -23.12509536743164

Token 87: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.4500473141670227
    2. 'def' → logprob: -1.325047254562378
    3. '

' → logprob: -3.075047254562378
    4. '<|end|>' → logprob: -3.075047254562378
    5. '\n' → logprob: -6.075047492980957
    6. '\' → logprob: -7.950047492980957
    7. '
' → logprob: -8.075047492980957
    8. 'newline' → logprob: -8.575047492980957
    9. '<|end|>' → logprob: -8.575047492980957
    10. '' → logprob: -8.825047492980957

Token 88: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.17115558683872223
    2. '
' → logprob: -2.4211556911468506
    3. '<|end|>' → logprob: -2.7961556911468506
    4. '\n' → logprob: -5.7961554527282715
    5. '#' → logprob: -6.5461554527282715
    6. '```' → logprob: -7.0461554527282715
    7. '

' → logprob: -7.4211554527282715
    8. ':' → logprob: -8.29615592956543
    9. '\' → logprob: -8.29615592956543
    10. '<|end|>' → logprob: -8.67115592956543

Token 89: ' is' (ID: 382)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -1.0966976881027222
    2. ' is' → logprob: -1.5966976881027222
    3. ' check' → logprob: -1.9716976881027222
    4. ' find' → logprob: -2.5966978073120117
    5. ' clamp' → logprob: -3.3466978073120117
    6. ' count' → logprob: -3.5966978073120117
    7. ' calculate' → logprob: -3.7216978073120117
    8. ' max' → logprob: -3.9716978073120117
    9. ' point' → logprob: -4.096697807312012
    10. ' get' → logprob: -4.596697807312012

Token 90: '_between' (ID: 124874)
  Prédit: '_between'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_between' → logprob: -0.08501391112804413
    2. '_' → logprob: -2.7100138664245605
    3. ' _' → logprob: -4.9600138664245605
    4. '_b' → logprob: -5.4600138664245605
    5. '_in' → logprob: -6.7100138664245605
    6. ' between' → logprob: -7.7100138664245605
    7. '_inside' → logprob: -7.7100138664245605
    8. '_lower' → logprob: -8.710014343261719
    9. '_sorted' → logprob: -8.835014343261719
    10. 'between' → logprob: -9.335014343261719

Token 91: '_re' (ID: 3067)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.272964209318161
    2. '(a' → logprob: -1.5229642391204834
    3. '(_' → logprob: -4.397964000701904
    4. '_' → logprob: -5.897964000701904
    5. '_(' → logprob: -6.022964000701904
    6. '(_)' → logprob: -7.397964000701904
    7. '_or' → logprob: -8.022964477539062
    8. '(b' → logprob: -8.147964477539062
    9. '_a' → logprob: -8.897964477539062
    10. '((' → logprob: -8.897964477539062

Token 92: 'versed' (ID: 76479)
  Prédit: 'verse'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'verse' → logprob: -0.2727634012699127
    2. 'versed' → logprob: -2.14776349067688
    3. 'l' → logprob: -2.89776349067688
    4. 'v' → logprob: -3.77276349067688
    5. 'versible' → logprob: -4.272763252258301
    6. 'f' → logprob: -4.522763252258301
    7. 'write' → logprob: -6.022763252258301
    8. 'g' → logprob: -6.272763252258301
    9. 'lated' → logprob: -6.522763252258301
    10. 'flex' → logprob: -6.772763252258301

Token 93: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.10099154710769653
    2. '(' → logprob: -2.3509914875030518
    3. ' (' → logprob: -7.225991725921631
    4. '(b' → logprob: -10.475991249084473
    5. '((' → logprob: -11.600991249084473
    6. ' ' → logprob: -12.850991249084473
    7. 'a' → logprob: -12.975991249084473
    8. '_(' → logprob: -13.600991249084473
    9. '('' → logprob: -13.850991249084473
    10. 's' → logprob: -13.850991249084473

Token 94: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0004260276327840984
    2. ',b' → logprob: -8.000426292419434
    3. ' ,' → logprob: -9.375426292419434
    4. '<|end|>' → logprob: -12.500426292419434
    5. ',a' → logprob: -14.500426292419434
    6. 'b' → logprob: -14.625426292419434
    7. ',c' → logprob: -15.625426292419434
    8. '_,' → logprob: -15.875426292419434
    9. ',
' → logprob: -16.125425338745117
    10. '‌,' → logprob: -16.125425338745117

Token 95: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.5759944915771484
    2. ' b' → logprob: -0.8259944915771484
    3. ' c' → logprob: -11.200994491577148
    4. ' ' → logprob: -11.325994491577148
    5. 'c' → logprob: -11.325994491577148
    6. '<|end|>' → logprob: -11.325994491577148
    7. ',b' → logprob: -13.450994491577148
    8. ')b' → logprob: -13.825994491577148
    9. ',' → logprob: -14.450994491577148
    10. '	b' → logprob: -14.700994491577148

Token 96: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.1637164789135568e-05
    2. ' ,' → logprob: -11.750011444091797
    3. ',c' → logprob: -13.000011444091797
    4. ',
' → logprob: -14.250011444091797
    5. ',

' → logprob: -15.125011444091797
    6. '<|end|>' → logprob: -15.125011444091797
    7. ',a' → logprob: -16.750011444091797
    8. ')' → logprob: -16.750011444091797
    9. '‌,' → logprob: -17.125011444091797
    10. ',b' → logprob: -17.750011444091797

Token 97: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.05491432547569275
    2. 'c' → logprob: -2.9299142360687256
    3. ' ' → logprob: -11.304914474487305
    4. ')' → logprob: -12.179914474487305
    5. ')c' → logprob: -12.554914474487305
    6. '   ' → logprob: -13.179914474487305
    7. '  ' → logprob: -13.679914474487305
    8. ' b' → logprob: -13.804914474487305
    9. ' )' → logprob: -13.929914474487305
    10. ' and' → logprob: -14.054914474487305

Token 98: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00016516048344783485
    2. '):
' → logprob: -9.375164985656738
    3. ':' → logprob: -9.625164985656738
    4. ')' → logprob: -11.750164985656738
    5. ' ):' → logprob: -12.750164985656738
    6. ',' → logprob: -12.875164985656738
    7. '():' → logprob: -15.250164985656738
    8. '   ' → logprob: -16.250165939331055
    9. '):
' → logprob: -16.500165939331055
    10. '}:' → logprob: -16.625165939331055

Token 99: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004915416240692139
    2. ' return' → logprob: -5.504915237426758
    3. 'return' → logprob: -7.379915237426758
    4. ' a' → logprob: -9.504915237426758
    5. 'def' → logprob: -10.129915237426758
    6. '    ' → logprob: -10.379915237426758
    7. ' (' → logprob: -11.129915237426758
    8. 'a' → logprob: -11.254915237426758
    9. '  ' → logprob: -11.629915237426758
    10. ' def' → logprob: -12.254915237426758

Token 100: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.5091918110847473
    2. ' return' → logprob: -1.0091917514801025
    3. '   ' → logprob: -3.3841917514801025
    4. 'a' → logprob: -8.259191513061523
    5. ' a' → logprob: -8.634191513061523
    6. 'b' → logprob: -9.134191513061523
    7. 'c' → logprob: -11.384191513061523
    8. ' ' → logprob: -11.634191513061523
    9. '    ' → logprob: -11.884191513061523
    10. '  ' → logprob: -11.884191513061523

Token 101: ' b' (ID: 287)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.6748319864273071
    2. 'a' → logprob: -1.4248319864273071
    3. ' b' → logprob: -1.6748319864273071
    4. 'b' → logprob: -3.0498318672180176
    5. ' (' → logprob: -5.049831867218018
    6. ' c' → logprob: -5.174831867218018
    7. '(a' → logprob: -6.549831867218018
    8. 'c' → logprob: -6.924831867218018
    9. '(b' → logprob: -7.424831867218018
    10. ' ' → logprob: -8.424832344055176

Token 102: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.10038156807422638
    2. '<=' → logprob: -2.35038161277771
    3. ' >=' → logprob: -8.975381851196289
    4. '>=' → logprob: -9.975381851196289
    5. ' ' → logprob: -13.600381851196289
    6. '<' → logprob: -15.975381851196289
    7. ' ≤' → logprob: -15.975381851196289
    8. '   ' → logprob: -16.60038185119629
    9. '<|end|>' → logprob: -16.72538185119629
    10. ' <=",' → logprob: -16.97538185119629

Token 103: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.11390282213687897
    2. ' c' → logprob: -2.2389028072357178
    3. 'a' → logprob: -6.988903045654297
    4. ' a' → logprob: -8.863903045654297
    5. ' ' → logprob: -11.863903045654297
    6. '<|end|>' → logprob: -11.863903045654297
    7. '	c' → logprob: -13.488903045654297
    8. '_c' → logprob: -15.613903045654297
    9. ')c' → logprob: -15.738903045654297
    10. '   ' → logprob: -15.738903045654297

Token 104: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.2522567808628082
    2. 'and' → logprob: -1.5022567510604858
    3. 'a' → logprob: -8.752256393432617
    4. ' a' → logprob: -9.252256393432617
    5. '<|end|>' → logprob: -10.002256393432617
    6. ' ' → logprob: -10.752256393432617
    7. '```' → logprob: -14.002256393432617
    8. ' an' → logprob: -14.002256393432617
    9. ' ' → logprob: -14.377256393432617
    10. '  ' → logprob: -14.752256393432617

Token 105: ' c' (ID: 274)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.5820416212081909
    2. 'c' → logprob: -0.8320416212081909
    3. ' c' → logprob: -5.5820417404174805
    4. ' a' → logprob: -6.0820417404174805
    5. '<|end|>' → logprob: -11.20704174041748
    6. '   ' → logprob: -11.70704174041748
    7. ' ' → logprob: -12.33204174041748
    8. '	c' → logprob: -12.83204174041748
    9. '	a' → logprob: -13.95704174041748
    10. 'b' → logprob: -13.95704174041748

Token 106: ' <=' (ID: 5017)
  Prédit: '<='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<=' → logprob: -0.38692107796669006
    2. ' <=' → logprob: -1.1369210481643677
    3. ')<=' → logprob: -10.761920928955078
    4. '<|end|>' → logprob: -11.261920928955078
    5. '>=' → logprob: -12.386920928955078
    6. 'a' → logprob: -12.886920928955078
    7. ']<=' → logprob: -13.136920928955078
    8. ' ' → logprob: -13.261920928955078
    9. '   ' → logprob: -13.511920928955078
    10. ' <=",' → logprob: -14.011920928955078

Token 107: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -4.6087021473795176e-05
    2. ' a' → logprob: -10.000045776367188
    3. '<|end|>' → logprob: -14.875045776367188
    4. '	a' → logprob: -16.375045776367188
    5. '   ' → logprob: -16.500045776367188
    6. ')a' → logprob: -17.875045776367188
    7. '_a' → logprob: -18.500045776367188
    8. '>a' → logprob: -18.875045776367188
    9. ' ' → logprob: -19.250045776367188
    10. '.a' → logprob: -19.625045776367188

Token 108: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.11203789710998535
    2. '
' → logprob: -2.6120378971099854
    3. '<|end|>' → logprob: -3.8620378971099854
    4. '

' → logprob: -5.237037658691406
    5. '\' → logprob: -5.362037658691406
    6. '\n' → logprob: -7.862037658691406
    7. '```' → logprob: -7.862037658691406
    8. 'newline' → logprob: -8.487037658691406
    9. '(' → logprob: -9.362037658691406
    10. '_' → logprob: -9.487037658691406

Token 109: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -8.232493564719334e-05
    2. 'class' → logprob: -10.375082015991211
    3. '<|end|>' → logprob: -11.250082015991211
    4. '#' → logprob: -11.625082015991211
    5. '```' → logprob: -11.750082015991211
    6. 'de' → logprob: -12.750082015991211
    7. 'for' → logprob: -12.750082015991211
    8. '\' → logprob: -12.875082015991211
    9. 'd' → logprob: -13.375082015991211
    10. 'a' → logprob: -13.500082015991211

Token 110: ' print' (ID: 2123)
  Prédit: ' is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.4928304851055145
    2. ' find' → logprob: -2.242830514907837
    3. ' check' → logprob: -2.492830514907837
    4. ' main' → logprob: -3.367830514907837
    5. 'is' → logprob: -3.992830514907837
    6. ' get' → logprob: -4.242830276489258
    7. ' calculate' → logprob: -4.617830276489258
    8. ' can' → logprob: -4.742830276489258
    9. ' merge' → logprob: -4.992830276489258
    10. ' point' → logprob: -5.117830276489258

Token 111: '_yes' (ID: 151898)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.030702928081154823
    2. '_' → logprob: -4.530703067779541
    3. '()' → logprob: -5.655703067779541
    4. '_result' → logprob: -5.905703067779541
    5. '_line' → logprob: -6.655703067779541
    6. '_input' → logprob: -6.905703067779541
    7. '("' → logprob: -6.905703067779541
    8. '_list' → logprob: -6.905703067779541
    9. '("")' → logprob: -7.280703067779541
    10. '_s' → logprob: -7.280703067779541

Token 112: '():
' (ID: 8595)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.062218185514211655
    2. '():' → logprob: -2.812218189239502
    3. '():
' → logprob: -8.812217712402344
    4. ' ()' → logprob: -10.312217712402344
    5. '()
' → logprob: -10.562217712402344
    6. '("' → logprob: -11.812217712402344
    7. '()"' → logprob: -12.187217712402344
    8. '():

' → logprob: -12.187217712402344
    9. '()">' → logprob: -12.312217712402344
    10. '()

' → logprob: -12.937217712402344

Token 113: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -9.73446003627032e-05
    2. 'print' → logprob: -9.500097274780273
    3. ' print' → logprob: -10.750097274780273
    4. '(' → logprob: -14.750097274780273
    5. '   ' → logprob: -15.375097274780273
    6. '	print' → logprob: -15.625097274780273
    7. '()' → logprob: -16.125097274780273
    8. '    
' → logprob: -17.000097274780273
    9. '```' → logprob: -17.250097274780273
    10. '    ' → logprob: -17.250097274780273

Token 114: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -5.5577775128767826e-06
    2. ' print' → logprob: -12.500005722045898
    3. '   ' → logprob: -13.250005722045898
    4. '```' → logprob: -17.0000057220459
    5. 'pr' → logprob: -19.1250057220459
    6. 'prin' → logprob: -19.6250057220459
    7. '`' → logprob: -22.1250057220459
    8. 'prit' → logprob: -22.1250057220459
    9. 'printf' → logprob: -22.7500057220459
    10. '	print' → logprob: -22.8750057220459

Token 115: '('' (ID: 706)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.00456624198704958
    2. '(' → logprob: -5.504566192626953
    3. '('' → logprob: -7.629566192626953
    4. '("("' → logprob: -13.879566192626953
    5. ' ("' → logprob: -15.379566192626953
    6. '(
' → logprob: -15.504566192626953
    7. '()' → logprob: -15.879566192626953
    8. '"' → logprob: -16.504566192626953
    9. '(("' → logprob: -16.629566192626953
    10. '(

' → logprob: -17.004566192626953

Token 116: 'Yes' (ID: 13022)
  Prédit: 'YES'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'YES' → logprob: -0.6348468661308289
    2. 'Yes' → logprob: -0.7598468661308289
    3. 'yes' → logprob: -6.1348466873168945
    4. 'Y' → logprob: -10.509846687316895
    5. ' Yes' → logprob: -11.384846687316895
    6. '"' → logprob: -12.134846687316895
    7. '_yes' → logprob: -12.259846687316895
    8. 'OK' → logprob: -12.509846687316895
    9. ' yes' → logprob: -12.509846687316895
    10. ''' → logprob: -12.759846687316895

Token 117: '')

' (ID: 9735)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -2.0100624169572257e-05
    2. ')' → logprob: -11.000020027160645
    3. '')
' → logprob: -13.000020027160645
    4. ''' → logprob: -14.750020027160645
    5. '')

' → logprob: -15.125020027160645
    6. '")' → logprob: -15.250020027160645
    7. '()' → logprob: -16.62502098083496
    8. '!' → logprob: -18.00002098083496
    9. ' ')' → logprob: -19.00002098083496
    10. '')"' → logprob: -19.00002098083496

Token 118: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -3.128163257315464e-07
    2. ' def' → logprob: -16.25
    3. '<|end|>' → logprob: -16.875
    4. 'ndef' → logprob: -17.25
    5. '```' → logprob: -17.25
    6. '\' → logprob: -17.375
    7. '
' → logprob: -17.625
    8. '	def' → logprob: -18.375
    9. '  
' → logprob: -18.375
    10. '_def' → logprob: -18.5

Token 119: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.06212979927659035
    2. ' print' → logprob: -2.8121297359466553
    3. 'def' → logprob: -8.812129974365234
    4. '_print' → logprob: -11.437129974365234
    5. ' def' → logprob: -13.562129974365234
    6. '
' → logprob: -14.562129974365234
    7. '.print' → logprob: -14.562129974365234
    8. '	print' → logprob: -15.937129974365234
    9. ' ' → logprob: -16.812129974365234
    10. '(print' → logprob: -17.687129974365234

Token 120: '_no' (ID: 13575)
  Prédit: '_no'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_no' → logprob: -0.0026244083419442177
    2. '('_' → logprob: -6.12762451171875
    3. '('' → logprob: -8.25262451171875
    4. '_No' → logprob: -9.62762451171875
    5. 'No' → logprob: -9.75262451171875
    6. '_NO' → logprob: -11.12762451171875
    7. '_n' → logprob: -11.25262451171875
    8. '_' → logprob: -11.62762451171875
    9. '_error' → logprob: -12.37762451171875
    10. '()' → logprob: -12.87762451171875

Token 121: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -6.2729995988775045e-06
    2. ' ():' → logprob: -12.750006675720215
    3. '():
' → logprob: -13.000006675720215
    4. '()' → logprob: -13.875006675720215
    5. ':' → logprob: -16.5000057220459
    6. '():
' → logprob: -18.6250057220459
    7. '(' → logprob: -18.7500057220459
    8. '():

' → logprob: -20.2500057220459
    9. '):' → logprob: -20.7500057220459
    10. ' ()' → logprob: -21.0000057220459

Token 122: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0304438266903162
    2. 'print' → logprob: -3.5304439067840576
    3. ' print' → logprob: -7.2804436683654785
    4. '	print' → logprob: -13.155444145202637
    5. '```' → logprob: -13.905444145202637
    6. '(print' → logprob: -14.280444145202637
    7. '(' → logprob: -15.155444145202637
    8. ' ' → logprob: -16.03044319152832
    9. '       ' → logprob: -16.40544319152832
    10. '()' → logprob: -16.65544319152832

Token 123: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.00027849749312736094
    2. ' print' → logprob: -8.50027847290039
    3. '   ' → logprob: -9.50027847290039
    4. '	print' → logprob: -17.00027847290039
    5. '(print' → logprob: -17.50027847290039
    6. ' ' → logprob: -18.00027847290039
    7. '```' → logprob: -18.12527847290039
    8. 'pr' → logprob: -20.25027847290039
    9. '  ' → logprob: -20.37527847290039
    10. '.print' → logprob: -20.75027847290039

Token 124: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.0002338144404347986
    2. '(' → logprob: -8.37523365020752
    3. '(No' → logprob: -13.12523365020752
    4. '("' → logprob: -14.25023365020752
    5. ''' → logprob: -15.25023365020752
    6. ' ('' → logprob: -15.87523365020752
    7. '()' → logprob: -16.125234603881836
    8. 'No' → logprob: -17.125234603881836
    9. '(False' → logprob: -17.250234603881836
    10. '(None' → logprob: -17.500234603881836

Token 125: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -1.9361264946837764e-07
    2. ''' → logprob: -16.25
    3. ' No' → logprob: -17.875
    4. '')' → logprob: -19.0
    5. 'NO' → logprob: -19.375
    6. 'Yes' → logprob: -19.375
    7. '"No' → logprob: -19.5
    8. 'None' → logprob: -20.25
    9. 'N' → logprob: -21.25
    10. 'Not' → logprob: -21.5

Token 126: '')

' (ID: 9735)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -3.531315314830863e-06
    2. ')' → logprob: -12.750003814697266
    3. '')
' → logprob: -14.625003814697266
    4. '()' → logprob: -16.625003814697266
    5. '')

' → logprob: -17.000003814697266
    6. ''' → logprob: -17.625003814697266
    7. '")' → logprob: -17.625003814697266
    8. ''))' → logprob: -20.500003814697266
    9. '')"' → logprob: -20.500003814697266
    10. '')
' → logprob: -21.625003814697266

Token 127: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -8.756989700486884e-05
    2. 'n' → logprob: -9.50008773803711
    3. 'N' → logprob: -12.50008773803711
    4. 't' → logprob: -12.62508773803711
    5. 'd' → logprob: -13.25008773803711
    6. 's' → logprob: -13.62508773803711
    7. 'a' → logprob: -14.00008773803711
    8. 'if' → logprob: -14.37508773803711
    9. 'T' → logprob: -14.62508773803711
    10. '#' → logprob: -15.50008773803711

Token 128: ' decide' (ID: 13001)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.07173953950405121
    2. ' check' → logprob: -3.321739435195923
    3. ' is' → logprob: -3.946739435195923
    4. ' solve' → logprob: -5.071739673614502
    5. 'main' → logprob: -6.196739673614502
    6. ' find' → logprob: -6.571739673614502
    7. ' can' → logprob: -6.821739673614502
    8. ' def' → logprob: -7.196739673614502
    9. ' compare' → logprob: -7.696739673614502
    10. ' process' → logprob: -8.321739196777344

Token 129: '_and' (ID: 18645)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.5362753868103027
    2. '(a' → logprob: -1.6612753868103027
    3. '(' → logprob: -2.2862753868103027
    4. '(x' → logprob: -4.036275386810303
    5. '()' → logprob: -4.411275386810303
    6. '(s' → logprob: -4.911275386810303
    7. '_' → logprob: -5.036275386810303
    8. '(A' → logprob: -5.036275386810303
    9. '(arr' → logprob: -5.286275386810303
    10. '():
' → logprob: -5.536275386810303

Token 130: '_print' (ID: 31509)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0002843384863808751
    2. 'run' → logprob: -9.125284194946289
    3. 'execute' → logprob: -9.250284194946289
    4. '_print' → logprob: -10.250284194946289
    5. 'output' → logprob: -11.875284194946289
    6. 'call' → logprob: -11.875284194946289
    7. 'act' → logprob: -12.250284194946289
    8. ' print' → logprob: -12.375284194946289
    9. 't' → logprob: -12.375284194946289
    10. '(print' → logprob: -13.000284194946289

Token 131: '(l' (ID: 4179)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.26083657145500183
    2. '(' → logprob: -1.6358366012573242
    3. '(a' → logprob: -3.885836601257324
    4. '()' → logprob: -4.885836601257324
    5. '((' → logprob: -6.510836601257324
    6. '(x' → logprob: -6.760836601257324
    7. '(()' → logprob: -7.010836601257324
    8. '():
' → logprob: -7.510836601257324
    9. '(_' → logprob: -7.885836601257324
    10. '(s' → logprob: -8.135836601257324

Token 132: '):
' (ID: 1883)
  Prédit: 'ist'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ist' → logprob: -0.5032449960708618
    2. '):' → logprob: -1.0032449960708618
    3. '):
' → logprob: -4.003244876861572
    4. ',' → logprob: -5.003244876861572
    5. 'st' → logprob: -6.753244876861572
    6. 'ine' → logprob: -7.378244876861572
    7. '   ' → logprob: -8.37824535369873
    8. '):

' → logprob: -8.50324535369873
    9. 'is' → logprob: -8.62824535369873
    10. 'a' → logprob: -8.62824535369873

Token 133: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2165002077817917
    2. ':' → logprob: -1.716500163078308
    3. ':
' → logprob: -4.841500282287598
    4. 'if' → logprob: -5.591500282287598
    5. ' if' → logprob: -6.216500282287598
    6. 'a' → logprob: -8.091500282287598
    7. '():' → logprob: -8.341500282287598
    8. 'x' → logprob: -8.716500282287598
    9. '(a' → logprob: -8.966500282287598
    10. '[' → logprob: -9.216500282287598

Token 134: ' if' (ID: 538)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.28090834617614746
    2. 'if' (adapté à ' if') → logprob: -1.6559083461761475
    3. 'x' → logprob: -3.5309083461761475
    4. 'for' → logprob: -4.780908584594727
    5. '   ' → logprob: -4.905908584594727
    6. 'n' → logprob: -5.905908584594727
    7. ' a' → logprob: -6.655908584594727
    8. 'l' → logprob: -7.030908584594727
    9. ' if' → logprob: -7.030908584594727
    10. 'start' → logprob: -7.155908584594727

Token 135: ' is' (ID: 382)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.6015792489051819
    2. ' len' → logprob: -1.476579189300537
    3. 'is' → logprob: -2.351579189300537
    4. ' is' → logprob: -3.101579189300537
    5. 'l' → logprob: -3.101579189300537
    6. ' l' → logprob: -3.476579189300537
    7. '(len' → logprob: -5.476579189300537
    8. ' (' → logprob: -7.101579189300537
    9. ' all' → logprob: -7.226579189300537
    10. '(' → logprob: -7.476579189300537

Token 136: '_between' (ID: 124874)
  Prédit: '_between'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_between' → logprob: -7.941850526549388e-06
    2. '_b' → logprob: -12.500007629394531
    3. '_' → logprob: -12.875007629394531
    4. 'between' → logprob: -14.000007629394531
    5. '_be' → logprob: -16.37500762939453
    6. '_based' → logprob: -16.50000762939453
    7. '_in' → logprob: -16.75000762939453
    8. ' between' → logprob: -17.12500762939453
    9. '```' → logprob: -17.50000762939453
    10. '_inside' → logprob: -17.50000762939453

Token 137: '(l' (ID: 4179)
  Prédit: '(l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(l' → logprob: -0.16031186282634735
    2. '(' → logprob: -1.9103118181228638
    3. '(*' → logprob: -10.410311698913574
    4. ' (' → logprob: -10.910311698913574
    5. '(re' → logprob: -12.285311698913574
    6. '_l' → logprob: -12.660311698913574
    7. '(
' → logprob: -12.785311698913574
    8. 'l' → logprob: -12.910311698913574
    9. '_re' → logprob: -12.910311698913574
    10. '(len' → logprob: -13.035311698913574

Token 138: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0007974773179739714
    2. '(' → logprob: -7.875797271728516
    3. '0' → logprob: -8.875797271728516
    4. ' [' → logprob: -9.125797271728516
    5. ' ' → logprob: -9.875797271728516
    6. '
' → logprob: -10.625797271728516
    7. '   ' → logprob: -11.125797271728516
    8. '1' → logprob: -11.125797271728516
    9. '[-' → logprob: -11.125797271728516
    10. '[
' → logprob: -11.875797271728516

Token 139: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.12708212435245514
    2. '1' → logprob: -2.252082109451294
    3. '2' → logprob: -4.377082347869873
    4. ' ' → logprob: -7.127082347869873
    5. '-' → logprob: -8.002081871032715
    6. '3' → logprob: -8.127081871032715
    7. '   ' → logprob: -10.064581871032715
    8. '
' → logprob: -10.377081871032715
    9. '4' → logprob: -10.689581871032715
    10. '[' → logprob: -10.752081871032715

Token 140: '],' (ID: 2155)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.2906295657157898
    2. '],' → logprob: -1.4156296253204346
    3. ' ,' → logprob: -4.9156293869018555
    4. '[' → logprob: -7.1656293869018555
    5. '),' → logprob: -8.165629386901855
    6. ']' → logprob: -8.540629386901855
    7. ' ],' → logprob: -8.540629386901855
    8. 'l' → logprob: -8.915629386901855
    9. ',l' → logprob: -8.915629386901855
    10. ' ' → logprob: -9.290629386901855

Token 141: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.1269364058971405
    2. ' l' → logprob: -2.126936435699463
    3. ' ' → logprob: -12.626935958862305
    4. '<|end|>' → logprob: -13.126935958862305
    5. '	l' → logprob: -13.751935958862305
    6. '   ' → logprob: -14.501935958862305
    7. ')' → logprob: -14.626935958862305
    8. ' л' → logprob: -15.501935958862305
    9. '<|end|>' → logprob: -15.501935958862305
    10. '    ' → logprob: -15.876935958862305

Token 142: '[' (ID: 58)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.5804628133773804
    2. '[' → logprob: -0.9554628133773804
    3. ' ' → logprob: -2.95546293258667
    4. '2' → logprob: -6.20546293258667
    5. '-' → logprob: -7.70546293258667
    6. ' [' → logprob: -7.83046293258667
    7. '3' → logprob: -8.455462455749512
    8. '   ' → logprob: -8.455462455749512
    9. ',' → logprob: -9.330462455749512
    10. 'l' → logprob: -9.705462455749512

Token 143: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.024382881820201874
    2. '2' → logprob: -3.7743828296661377
    3. '3' → logprob: -6.899383068084717
    4. '-' → logprob: -9.649382591247559
    5. ' ' → logprob: -10.274382591247559
    6. '4' → logprob: -11.274382591247559
    7. '0' → logprob: -12.149382591247559
    8. '
' → logprob: -12.649382591247559
    9. '   ' → logprob: -13.336882591247559
    10. '[' → logprob: -13.649382591247559

Token 144: '],' (ID: 2155)
  Prédit: '],'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '],' → logprob: -0.00884064007550478
    2. ',' → logprob: -4.758840560913086
    3. '),' → logprob: -9.008840560913086
    4. ']' → logprob: -10.383840560913086
    5. '>,' → logprob: -11.133840560913086
    6. '},' → logprob: -11.258840560913086
    7. ' ],' → logprob: -11.508840560913086
    8. ''],' → logprob: -11.758840560913086
    9. 'l' → logprob: -12.008840560913086
    10. ' ,' → logprob: -12.633840560913086

Token 145: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.5760656595230103
    2. ' l' → logprob: -0.8260656595230103
    3. ')' → logprob: -9.326066017150879
    4. ' ' → logprob: -11.326066017150879
    5. ' ' → logprob: -12.076066017150879
    6. '    ' → logprob: -12.701066017150879
    7. '   ' → logprob: -12.763566017150879
    8. '	l' → logprob: -12.826066017150879
    9. ' )' → logprob: -13.138566017150879
    10. '2' → logprob: -14.263566017150879

Token 146: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0028122442308813334
    2. '2' → logprob: -5.877812385559082
    3. '[
' → logprob: -13.502812385559082
    4. '0' → logprob: -13.627812385559082
    5. ' ' → logprob: -13.752812385559082
    6. '3' → logprob: -14.002812385559082
    7. '(' → logprob: -14.690312385559082
    8. '1' → logprob: -14.877812385559082
    9. ' [' → logprob: -14.940312385559082
    10. '-' → logprob: -15.065312385559082

Token 147: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0019134038593620062
    2. '3' → logprob: -6.751913547515869
    3. ' ' → logprob: -7.501913547515869
    4. '[' → logprob: -9.126913070678711
    5. '0' → logprob: -10.001913070678711
    6. '1' → logprob: -10.751913070678711
    7. '4' → logprob: -12.314413070678711
    8. '   ' → logprob: -12.626913070678711
    9. '5' → logprob: -13.064413070678711
    10. '-' → logprob: -14.126913070678711

Token 148: ']):
' (ID: 51989)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0035973370540887117
    2. ')' → logprob: -5.753597259521484
    3. '):
' → logprob: -8.378597259521484
    4. ' ):' → logprob: -9.503597259521484
    5. ')):' → logprob: -9.628597259521484
    6. ':' → logprob: -10.878597259521484
    7. ']):' → logprob: -11.003597259521484
    8. ''):' → logprob: -13.128597259521484
    9. '   ' → logprob: -13.253597259521484
    10. ']:' → logprob: -13.628597259521484

Token 149: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0013890431728214025
    2. ':' → logprob: -7.001389026641846
    3. 'print' → logprob: -8.001389503479004
    4. ' or' → logprob: -10.001389503479004
    5. '   ' → logprob: -10.376389503479004
    6. ' print' → logprob: -11.626389503479004
    7. ' and' → logprob: -11.626389503479004
    8. '):' → logprob: -11.626389503479004
    9. ':
' → logprob: -11.876389503479004
    10. '()' → logprob: -11.876389503479004

Token 150: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.04457375779747963
    2. ' print' → logprob: -3.2945737838745117
    3. '   ' → logprob: -5.044573783874512
    4. '
' → logprob: -9.919573783874512
    5. '	print' → logprob: -11.294573783874512
    6. '    
' → logprob: -13.669573783874512
    7. '(print' → logprob: -13.669573783874512
    8. '.print' → logprob: -13.919573783874512
    9. '       ' → logprob: -14.044573783874512
    10. ' ' → logprob: -14.669573783874512

Token 151: '_yes' (ID: 151898)
  Prédit: '_yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_yes' → logprob: -1.3663626305060461e-05
    2. '_no' → logprob: -11.37501335144043
    3. '_' → logprob: -13.25001335144043
    4. '('_' → logprob: -15.75001335144043
    5. 'yes' → logprob: -16.87501335144043
    6. 'Yes' → logprob: -17.00001335144043
    7. '(' → logprob: -17.00001335144043
    8. '(_' → logprob: -18.75001335144043
    9. '```' → logprob: -18.75001335144043
    10. ' Yes' → logprob: -19.00001335144043

Token 152: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.06200220435857773
    2. '()
' → logprob: -2.812002182006836
    3. '   ' → logprob: -10.437002182006836
    4. '()

' → logprob: -12.937002182006836
    5. '())' → logprob: -13.812002182006836
    6. '()
' → logprob: -14.562002182006836
    7. ' ()' → logprob: -14.937002182006836
    8. '())
' → logprob: -15.312002182006836
    9. ')' → logprob: -15.437002182006836
    10. '(' → logprob: -15.437002182006836

Token 153: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0005211008246988058
    2. 'elif' → logprob: -8.625520706176758
    3. '()' → logprob: -8.750520706176758
    4. 'else' → logprob: -9.750520706176758
    5. '<|end|>' → logprob: -10.000520706176758
    6. '       ' → logprob: -10.500520706176758
    7. ' else' → logprob: -11.125520706176758
    8. ' elif' → logprob: -11.500520706176758
    9. '()
' → logprob: -11.750520706176758
    10. '
' → logprob: -12.375520706176758

Token 154: ' elif' (ID: 9497)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' (adapté à ' elif') → logprob: -0.15341176092624664
    2. '   ' → logprob: -2.028411865234375
    3. ' elif' → logprob: -4.778411865234375
    4. 'else' → logprob: -6.153411865234375
    5. ' else' → logprob: -9.278411865234375
    6. '	elif' → logprob: -11.028411865234375
    7. ' ' → logprob: -11.528411865234375
    8. '  ' → logprob: -11.903411865234375
    9. 'el' → logprob: -12.028411865234375
    10. '<|end|>' → logprob: -12.653411865234375

Token 155: ' is' (ID: 382)
  Prédit: ' is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.25201416015625
    2. 'is' → logprob: -1.50201416015625
    3. '(is' → logprob: -10.37701416015625
    4. ' ' → logprob: -11.37701416015625
    5. '   ' → logprob: -11.37701416015625
    6. 'not' → logprob: -12.00201416015625
    7. 'l' → logprob: -12.12701416015625
    8. '(' → logprob: -12.12701416015625
    9. ' not' → logprob: -12.37701416015625
    10. ' ' → logprob: -13.00201416015625

Token 156: '_between' (ID: 124874)
  Prédit: '_between'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_between' → logprob: -2.2200749754119897e-06
    2. 'between' → logprob: -13.625001907348633
    3. '_' → logprob: -14.250001907348633
    4. '_based' → logprob: -15.875001907348633
    5. ' between' → logprob: -16.500001907348633
    6. '_b' → logprob: -17.625001907348633
    7. '```' → logprob: -18.125001907348633
    8. ' _' → logprob: -18.250001907348633
    9. '_and' → logprob: -19.125001907348633
    10. '_to' → logprob: -19.250001907348633

Token 157: '_re' (ID: 3067)
  Prédit: '_re'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_re' → logprob: -2.2842308680992573e-05
    2. '(l' → logprob: -10.875022888183594
    3. 're' → logprob: -12.625022888183594
    4. '_reverse' → logprob: -15.500022888183594
    5. '_' → logprob: -16.125022888183594
    6. '_l' → logprob: -16.250022888183594
    7. '(re' → logprob: -17.000022888183594
    8. '(' → logprob: -17.000022888183594
    9. 'l' → logprob: -17.750022888183594
    10. '_r' → logprob: -18.000022888183594

Token 158: 'versed' (ID: 76479)
  Prédit: 'versed'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'versed' → logprob: -2.7014437364414334e-05
    2. 'v' → logprob: -11.12502670288086
    3. 'vers' → logprob: -12.62502670288086
    4. 'verse' → logprob: -13.12502670288086
    5. 'ver' → logprob: -13.12502670288086
    6. '(l' → logprob: -14.00002670288086
    7. 'r' → logprob: -14.00002670288086
    8. 've' → logprob: -14.12502670288086
    9. 'd' → logprob: -14.62502670288086
    10. '(' → logprob: -14.75002670288086

Token 159: '(l' (ID: 4179)
  Prédit: '(l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(l' → logprob: -6.511406809295295e-06
    2. '(' → logprob: -12.000006675720215
    3. ' (' → logprob: -15.125006675720215
    4. '(
' → logprob: -18.3750057220459
    5. '(L' → logprob: -18.7500057220459
    6. '(line' → logprob: -19.6250057220459
    7. ',l' → logprob: -19.7500057220459
    8. '/l' → logprob: -20.0000057220459
    9. '(len' → logprob: -20.5000057220459
    10. '((' → logprob: -20.5000057220459

Token 160: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.22620472311973572
    2. '(' → logprob: -1.601204752922058
    3. '([' → logprob: -7.226204872131348
    4. '(
' → logprob: -10.976204872131348
    5. ' (' → logprob: -11.351204872131348
    6. ')' → logprob: -12.101204872131348
    7. '[
' → logprob: -12.476204872131348
    8. '0' → logprob: -12.726204872131348
    9. ' [' → logprob: -12.851204872131348
    10. '()[' → logprob: -13.351204872131348

Token 161: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0005495758377946913
    2. '1' → logprob: -7.875549793243408
    3. '[' → logprob: -9.50054931640625
    4. '2' → logprob: -9.87554931640625
    5. ' ' → logprob: -10.50054931640625
    6. '(' → logprob: -12.00054931640625
    7. '   ' → logprob: -12.37554931640625
    8. '```' → logprob: -13.87554931640625
    9. '3' → logprob: -14.18804931640625
    10. ']' → logprob: -14.75054931640625

Token 162: '],' (ID: 2155)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00755740562453866
    2. '],' → logprob: -5.007557392120361
    3. '),' → logprob: -7.257557392120361
    4. ' ,' → logprob: -9.75755786895752
    5. ',l' → logprob: -10.25755786895752
    6. '},' → logprob: -11.75755786895752
    7. '‌,' → logprob: -12.00755786895752
    8. '>,' → logprob: -12.25755786895752
    9. ']' → logprob: -12.25755786895752
    10. ')' → logprob: -12.25755786895752

Token 163: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.033732835203409195
    2. ' l' → logprob: -3.4087328910827637
    3. '<|end|>' → logprob: -9.408732414245605
    4. '<|end|>' → logprob: -13.533732414245605
    5. '   ' → logprob: -13.783732414245605
    6. ')' → logprob: -14.158732414245605
    7. '    ' → logprob: -14.658732414245605
    8. ' ' → logprob: -14.783732414245605
    9. '	l' → logprob: -14.783732414245605
    10. ' л' → logprob: -15.908732414245605

Token 164: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.054915234446525574
    2. '1' → logprob: -2.929915189743042
    3. '   ' → logprob: -11.679915428161621
    4. ' [' → logprob: -12.054915428161621
    5. '[
' → logprob: -12.304915428161621
    6. '```' → logprob: -12.679915428161621
    7. '(' → logprob: -13.242415428161621
    8. ',' → logprob: -13.492415428161621
    9. ' ' → logprob: -14.054915428161621
    10. '][' → logprob: -14.117415428161621

Token 165: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.810037742368877e-05
    2. '2' → logprob: -11.000038146972656
    3. '[' → logprob: -11.625038146972656
    4. ' ' → logprob: -11.625038146972656
    5. '   ' → logprob: -14.000038146972656
    6. ']' → logprob: -14.812538146972656
    7. '(' → logprob: -15.187538146972656
    8. '```' → logprob: -15.375038146972656
    9. ')' → logprob: -15.500038146972656
    10. '<|end|>' → logprob: -15.625038146972656

Token 166: '],' (ID: 2155)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0025880273897200823
    2. '],' → logprob: -6.502587795257568
    3. ' ,' → logprob: -7.127587795257568
    4. ',l' → logprob: -8.502588272094727
    5. '),' → logprob: -9.627588272094727
    6. '   ' → logprob: -13.252588272094727
    7. '‌,' → logprob: -13.627588272094727
    8. '},' → logprob: -13.627588272094727
    9. '>,' → logprob: -13.752588272094727
    10. ' ' → logprob: -13.877588272094727

Token 167: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.023270288482308388
    2. ' l' → logprob: -3.77327036857605
    3. '   ' → logprob: -10.898270606994629
    4. ' ' → logprob: -13.398270606994629
    5. '    ' → logprob: -13.398270606994629
    6. '       ' → logprob: -14.148270606994629
    7. '	l' → logprob: -14.398270606994629
    8. ')' → logprob: -14.523270606994629
    9. '  ' → logprob: -14.523270606994629
    10. '     ' → logprob: -15.648270606994629

Token 168: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.006004163529723883
    2. '2' → logprob: -5.131004333496094
    3. '][' → logprob: -10.881004333496094
    4. ']' → logprob: -11.381004333496094
    5. ')' → logprob: -11.506004333496094
    6. '(' → logprob: -11.756004333496094
    7. '[
' → logprob: -12.006004333496094
    8. ' [' → logprob: -12.631004333496094
    9. '```' → logprob: -12.756004333496094
    10. ' ' → logprob: -13.256004333496094

Token 169: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -1.6047699318733066e-05
    2. ' ' → logprob: -11.375016212463379
    3. '[' → logprob: -13.375016212463379
    4. '   ' → logprob: -13.500016212463379
    5. '
' → logprob: -14.875016212463379
    6. '۲' → logprob: -15.187516212463379
    7. '```' → logprob: -15.437516212463379
    8. '-' → logprob: -16.312515258789062
    9. '3' → logprob: -16.375015258789062
    10. ']' → logprob: -16.437515258789062

Token 170: ']):
' (ID: 51989)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.31346526741981506
    2. '):
' → logprob: -1.3134652376174927
    3. ')' → logprob: -8.688465118408203
    4. ':' → logprob: -10.813465118408203
    5. '):

' → logprob: -12.188465118408203
    6. '   ' → logprob: -12.938465118408203
    7. ' ):' → logprob: -12.938465118408203
    8. ')):' → logprob: -13.688465118408203
    9. '):
' → logprob: -13.938465118408203
    10. ' ):
' → logprob: -14.438465118408203

Token 171: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00045902872807346284
    2. 'print' → logprob: -7.75045919418335
    3. ' print' → logprob: -10.625458717346191
    4. '   ' → logprob: -12.625458717346191
    5. '           ' → logprob: -15.375458717346191
    6. '
' → logprob: -16.375459671020508
    7. ':' → logprob: -16.500459671020508
    8. '(print' → logprob: -16.500459671020508
    9. '      ' → logprob: -16.625459671020508
    10. ',' → logprob: -16.875459671020508

Token 172: ' print' (ID: 2123)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0355423167347908
    2. 'print' (adapté à ' print') → logprob: -3.5355422496795654
    3. ' print' → logprob: -5.1605424880981445
    4. '   ' → logprob: -10.410542488098145
    5. ' ' → logprob: -13.660542488098145
    6. '```' → logprob: -13.910542488098145
    7. '
' → logprob: -14.285542488098145
    8. '	print' → logprob: -14.410542488098145
    9. '      ' → logprob: -14.410542488098145
    10. '           ' → logprob: -14.410542488098145

Token 173: '_yes' (ID: 151898)
  Prédit: '_yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_yes' → logprob: -0.20141518115997314
    2. '_no' → logprob: -1.7014151811599731
    3. '_' → logprob: -13.701415061950684
    4. 'yes' → logprob: -14.701415061950684
    5. 'Yes' → logprob: -15.076415061950684
    6. 'no' → logprob: -18.451416015625
    7. '```' → logprob: -18.826416015625
    8. ' yes' → logprob: -19.076416015625
    9. 'No' → logprob: -19.076416015625
    10. '_not' → logprob: -19.201416015625

Token 174: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00671809446066618
    2. '()
' → logprob: -5.006718158721924
    3. '()

' → logprob: -13.756717681884766
    4. '(' → logprob: -14.631717681884766
    5. ' ()' → logprob: -15.006717681884766
    6. '   ' → logprob: -15.256717681884766
    7. '())' → logprob: -15.756717681884766
    8. '()\' → logprob: -16.006717681884766
    9. ')' → logprob: -16.131717681884766
    10. '()
' → logprob: -16.506717681884766

Token 175: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.019303658977150917
    2. 'else' → logprob: -4.019303798675537
    3. ' else' → logprob: -6.769303798675537
    4. '	else' → logprob: -12.894303321838379
    5. '<|end|>' → logprob: -13.519303321838379
    6. 'elif' → logprob: -15.144303321838379
    7. 'def' → logprob: -16.019304275512695
    8. 'elser' → logprob: -16.519304275512695
    9. '<|end|>' → logprob: -16.644304275512695
    10. '_else' → logprob: -16.894304275512695

Token 176: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.014304649084806442
    2. ' else' → logprob: -4.2643046379089355
    3. '   ' → logprob: -8.889305114746094
    4. '	else' → logprob: -13.139305114746094
    5. '_else' → logprob: -14.764305114746094
    6. 'elser' → logprob: -15.139305114746094
    7. 'elses' → logprob: -15.389305114746094
    8. 'els' → logprob: -15.889305114746094
    9. 'el' → logprob: -16.389305114746094
    10. 'elif' → logprob: -16.389305114746094

Token 177: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0032330902758985758
    2. ':
' → logprob: -5.878232955932617
    3. '   ' → logprob: -8.753232955932617
    4. '():' → logprob: -8.878232955932617
    5. ' :' → logprob: -10.003232955932617
    6. '():
' → logprob: -10.628232955932617
    7. '_' → logprob: -10.878232955932617
    8. '       ' → logprob: -11.128232955932617
    9. ' :
' → logprob: -11.753232955932617
    10. '_:' → logprob: -12.128232955932617

Token 178: '       ' (ID: 309)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.24661947786808014
    2. ' print' → logprob: -1.746619462966919
    3. '       ' → logprob: -3.246619462966919
    4. '   ' → logprob: -5.246619701385498
    5. '	print' → logprob: -11.12161922454834
    6. '(print' → logprob: -11.62161922454834
    7. ' ' → logprob: -13.37161922454834
    8. ' ' → logprob: -14.12161922454834
    9. '.print' → logprob: -14.12161922454834
    10. '_print' → logprob: -14.49661922454834

Token 179: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0009117019944824278
    2. ' print' → logprob: -7.000911712646484
    3. '   ' → logprob: -15.375911712646484
    4. '	print' → logprob: -18.625911712646484
    5. '.print' → logprob: -19.000911712646484
    6. '(print' → logprob: -19.500911712646484
    7. '       ' → logprob: -20.750911712646484
    8. '_print' → logprob: -20.750911712646484
    9. ' ' → logprob: -21.125911712646484
    10. '  ' → logprob: -22.375911712646484

Token 180: '_no' (ID: 13575)
  Prédit: '_no'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_no' → logprob: -1.1398757123970427e-05
    2. '_n' → logprob: -12.125011444091797
    3. '_' → logprob: -12.250011444091797
    4. '('_' → logprob: -14.750011444091797
    5. '_No' → logprob: -15.625011444091797
    6. 'No' → logprob: -16.125011444091797
    7. 'no' → logprob: -16.250011444091797
    8. '```' → logprob: -16.250011444091797
    9. '("_' → logprob: -16.750011444091797
    10. '_NO' → logprob: -16.750011444091797

Token 181: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.014244131743907928
    2. '()
' → logprob: -4.264244079589844
    3. '()

' → logprob: -9.889244079589844
    4. '()\' → logprob: -10.764244079589844
    5. '(' → logprob: -12.014244079589844
    6. '(
' → logprob: -13.639244079589844
    7. '()`' → logprob: -14.889244079589844
    8. '()
' → logprob: -15.014244079589844
    9. '```' → logprob: -15.014244079589844
    10. '
' → logprob: -16.014244079589844

Token 182: 'def' (ID: 1314)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.037361305207014084
    2. 'if' → logprob: -3.5373613834381104
    3. 'def' → logprob: -4.912361145019531
    4. 'list' → logprob: -9.287361145019531
    5. 'input' → logprob: -10.287361145019531
    6. 'n' → logprob: -10.412361145019531
    7. 'dec' → logprob: -11.287361145019531
    8. 'print' → logprob: -11.537361145019531
    9. '#' → logprob: -11.662361145019531
    10. 'lst' → logprob: -11.912361145019531

Token 183: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.02975071594119072
    2. ' main' → logprob: -3.5297508239746094
    3. '_main' → logprob: -15.40475082397461
    4. 'run' → logprob: -16.77975082397461
    5. '__' → logprob: -18.15475082397461
    6. 'process' → logprob: -18.65475082397461
    7. 'def' → logprob: -18.90475082397461
    8. '	main' → logprob: -19.15475082397461
    9. ' run' → logprob: -19.65475082397461
    10. 'Main' → logprob: -20.02975082397461

Token 184: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -6.988221684878226e-06
    2. ' ():' → logprob: -12.000006675720215
    3. '():
' → logprob: -14.125006675720215
    4. '()' → logprob: -16.37500762939453
    5. '(' → logprob: -18.37500762939453
    6. '(":' → logprob: -18.87500762939453
    7. '():
' → logprob: -19.12500762939453
    8. '(:' → logprob: -19.25000762939453
    9. ':' → logprob: -20.25000762939453
    10. '():

' → logprob: -20.62500762939453

Token 185: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08493529260158539
    2. ' l' → logprob: -2.584935188293457
    3. 'l' → logprob: -5.209935188293457
    4. ' lst' → logprob: -7.709935188293457
    5. 'lst' → logprob: -9.959935188293457
    6. '	l' → logprob: -10.834935188293457
    7. 'input' → logprob: -10.959935188293457
    8. ' input' → logprob: -10.959935188293457
    9. ' inputs' → logprob: -12.334935188293457
    10. 'int' → logprob: -13.459935188293457

Token 186: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' (adapté à ' l') → logprob: -0.04577422887086868
    2. 'lst' → logprob: -3.670774221420288
    3. ' l' → logprob: -4.420774459838867
    4. '   ' → logprob: -5.295774459838867
    5. ' lst' → logprob: -6.795774459838867
    6. 'int' → logprob: -7.795774459838867
    7. 'input' → logprob: -7.920774459838867
    8. 'data' → logprob: -9.420774459838867
    9. 'ints' → logprob: -9.920774459838867
    10. 'inputs' → logprob: -10.420774459838867

Token 187: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.1602301150560379
    2. ' =' → logprob: -1.9102301597595215
    3. '=[]' → logprob: -12.410229682922363
    4. '=parse' → logprob: -14.160229682922363
    5. 'ist' → logprob: -15.410229682922363
    6. '=int' → logprob: -15.785229682922363
    7. ')' → logprob: -15.910229682922363
    8. '=
' → logprob: -16.28523063659668
    9. '=create' → logprob: -16.66023063659668
    10. '=[]
' → logprob: -16.91023063659668

Token 188: ' parse' (ID: 8420)
  Prédit: 'parse'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'parse' → logprob: -0.0380416102707386
    2. ' parse' → logprob: -3.288041591644287
    3. '(parse' → logprob: -16.288042068481445
    4. '	parse' → logprob: -17.538042068481445
    5. '   ' → logprob: -18.288042068481445
    6. '=parse' → logprob: -19.788042068481445
    7. '.parse' → logprob: -20.038042068481445
    8. '_parse' → logprob: -20.538042068481445
    9. ' ' → logprob: -21.038042068481445
    10. 'par' → logprob: -22.038042068481445

Token 189: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: 0.0
    2. '_' → logprob: -17.5
    3. 'input' → logprob: -19.0
    4. '(input' → logprob: -19.875
    5. '_INPUT' → logprob: -20.5
    6. '_Input' → logprob: -20.5
    7. '_inputs' → logprob: -20.75
    8. 'Input' → logprob: -20.75
    9. '_in' → logprob: -20.875
    10. '```' → logprob: -21.5

Token 190: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -1.0683535037969705e-05
    2. '()
' → logprob: -11.50001049041748
    3. '()

' → logprob: -15.12501049041748
    4. ' ()' → logprob: -16.500011444091797
    5. '()\' → logprob: -17.500011444091797
    6. '()<' → logprob: -17.625011444091797
    7. '()"' → logprob: -18.125011444091797
    8. '()
' → logprob: -18.125011444091797
    9. '()`' → logprob: -18.125011444091797
    10. '()]' → logprob: -18.375011444091797

Token 191: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.023453475907444954
    2. 'dec' → logprob: -3.7734534740448
    3. ' decide' → logprob: -8.648453712463379
    4. ' dec' → logprob: -10.648453712463379
    5. 'def' → logprob: -12.773453712463379
    6. '
' → logprob: -13.273453712463379
    7. '(dec' → logprob: -13.648453712463379
    8. '   ' → logprob: -13.898453712463379
    9. '    
' → logprob: -14.398453712463379
    10. '_dec' → logprob: -15.023453712463379

Token 192: ' decide' (ID: 13001)
  Prédit: 'dec'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dec' → logprob: -1.0564331205387134e-05
    2. '   ' → logprob: -11.50001049041748
    3. ' decide' → logprob: -15.00001049041748
    4. '    
' → logprob: -21.000011444091797
    5. '  ' → logprob: -21.375011444091797
    6. 'decode' → logprob: -21.500011444091797
    7. '```' → logprob: -21.875011444091797
    8. 'Dec' → logprob: -22.000011444091797
    9. '_dec' → logprob: -22.125011444091797
    10. 'def' → logprob: -22.250011444091797

Token 193: '_and' (ID: 18645)
  Prédit: '_and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_and' → logprob: -1.9361264946837764e-07
    2. '_' → logprob: -15.75
    3. 'and' → logprob: -18.75
    4. '_AND' → logprob: -19.125
    5. ' and' → logprob: -20.5
    6. '_an' → logprob: -20.875
    7. '_then' → logprob: -21.375
    8. '   ' → logprob: -21.5
    9. '_to' → logprob: -21.75
    10. ' _' → logprob: -21.875

Token 194: '_print' (ID: 31509)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5759442448616028
    2. '_print' → logprob: -0.8259442448616028
    3. ' print' → logprob: -13.075943946838379
    4. 'l' → logprob: -13.200943946838379
    5. '(print' → logprob: -14.950943946838379
    6. 'Print' → logprob: -15.950943946838379
    7. '	print' → logprob: -16.075944900512695
    8. '(l' → logprob: -17.200944900512695
    9. '.print' → logprob: -17.325944900512695
    10. '_PRINT' → logprob: -17.450944900512695

Token 195: '(l' (ID: 4179)
  Prédit: '(l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(l' → logprob: -4.842555426876061e-06
    2. '(' → logprob: -12.250004768371582
    3. ' (' → logprob: -19.0000057220459
    4. '(
' → logprob: -20.1250057220459
    5. '(ll' → logprob: -20.1250057220459
    6. '(ls' → logprob: -20.1250057220459
    7. '(li' → logprob: -20.3750057220459
    8. '(line' → logprob: -20.5000057220459
    9. '(lst' → logprob: -21.1250057220459
    10. '(L' → logprob: -21.1250057220459

Token 196: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.11666317284107208
    2. '())' → logprob: -2.3666632175445557
    3. '()' → logprob: -4.116662979125977
    4. '()
' → logprob: -11.741662979125977
    5. ')
' → logprob: -11.991662979125977
    6. ' )' → logprob: -12.866662979125977
    7. '))' → logprob: -13.241662979125977
    8. '())
' → logprob: -13.366662979125977
    9. '[])' → logprob: -13.741662979125977
    10. ')`' → logprob: -14.741662979125977

Token 197: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.00020950057660229504
    2. 'main' → logprob: -8.62520980834961
    3. '\n' → logprob: -11.37520980834961
    4. '
' → logprob: -11.87520980834961
    5. ' if' → logprob: -12.62520980834961
    6. 'print' → logprob: -12.75020980834961
    7. '```' → logprob: -13.12520980834961
    8. '#' → logprob: -13.62520980834961
    9. '\' → logprob: -14.00020980834961
    10. '\
' → logprob: -14.87520980834961

Token 198: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -7.886803359724581e-05
    2. '()
' → logprob: -9.750079154968262
    3. '(' → logprob: -10.875079154968262
    4. ' ()' → logprob: -14.250079154968262
    5. '()

' → logprob: -15.000079154968262
    6. '()`' → logprob: -15.375079154968262
    7. '();' → logprob: -16.000078201293945
    8. '()"' → logprob: -16.500078201293945
    9. '(
' → logprob: -16.625078201293945
    10. '()\' → logprob: -17.125078201293945


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 196
Tokens correctement prédits (1ère position, stricte): 87
Tokens correctement prédits (1ère position, avec adaptation): 98
Tokens correctement prédits (top 10): 175
Précision stricte (1ère position): 44.39%
Précision adaptée (1ère position): 50.00%
Précision (top 10): 89.29%
================================================================================
