================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:34:43
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys
import math
from bisect import bisect_right, bisect_left
sys.setrecursionlimit(1000000)
from heapq import heappush, heappop
from collections import defaultdict, Counter, deque
from operator import itemgetter
from itertools import accumulate, permutations

MODULO = 10**9+7 # probablement inutile ici mais on sait jamais
INF = float('inf')
def readint():
    return int(sys.stdin.readline())

def readlist():
    return [int(x) for x in sys.stdin.readline().split()]

n = readint()

if n < 10:  # cas évident
    print(0)
    exit()

if n%2 == 1:
    print(0)
    sys.exit()  # oui j'utilise exit et sys.exit dans le même fichier

else:
    answer = n//10
    t = 10
    while n//t > 0:
        t = t*5
        answer += n//t
    print(answer)
# fin... j'espère que c'était ça l'algorithme
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '
' (ID: 198)
  → Token d'amorce (pas de prédiction)

Token 3: 'import' (ID: 561)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.6975938677787781
    2. '\n' → logprob: -0.8225938677787781
    3. '<|end|>' → logprob: -3.572593927383423
    4. '\' → logprob: -4.322593688964844
    5. 'newline' → logprob: -5.072593688964844
    6. 'import' → logprob: -5.322593688964844
    7. '<|end|>' → logprob: -5.947593688964844
    8. '```' → logprob: -6.572593688964844
    9. '' → logprob: -6.697593688964844
    10. '
' → logprob: -6.947593688964844

Token 4: ' math' (ID: 13324)
  Prédit: ' os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' os' → logprob: -0.00020497082732617855
    2. 'os' → logprob: -8.500205039978027
    3. '"os' → logprob: -14.875205039978027
    4. ' math' → logprob: -15.000205039978027
    5. ' re' → logprob: -15.125205039978027
    6. '_os' → logprob: -15.750205039978027
    7. ' json' → logprob: -16.12520408630371
    8. '	os' → logprob: -16.37520408630371
    9. ' ' → logprob: -17.50020408630371
    10. ' ' → logprob: -17.50020408630371

Token 5: '
' (ID: 198)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.4576877951622009
    2. '\n' → logprob: -1.8326878547668457
    3. '\' → logprob: -2.3326878547668457
    4. 'import' → logprob: -3.0826878547668457
    5. '```' → logprob: -3.8326878547668457
    6. '
' → logprob: -4.207687854766846
    7. '<|end|>' → logprob: -4.207687854766846
    8. ',' → logprob: -5.582687854766846
    9. '

' → logprob: -5.832687854766846
    10. '<|end|>' → logprob: -6.582687854766846

Token 6: 'from' (ID: 2845)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'import' → logprob: -1.1315985918045044
    2. '\n' → logprob: -1.6315985918045044
    3. '.' → logprob: -2.006598472595215
    4. '
' → logprob: -2.006598472595215
    5. '```' → logprob: -2.506598472595215
    6. '\' → logprob: -3.131598472595215
    7. '<|end|>' → logprob: -3.381598472595215
    8. '

' → logprob: -3.631598472595215
    9. ',' → logprob: -4.381598472595215
    10. '<|end|>' → logprob: -5.631598472595215

Token 7: ' bis' (ID: 7204)
  Prédit: ' collections'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' collections' → logprob: -0.21678166091442108
    2. ' os' → logprob: -1.8417816162109375
    3. 'collections' → logprob: -3.9667816162109375
    4. 'os' → logprob: -4.8417816162109375
    5. ' datetime' → logprob: -5.7167816162109375
    6. ' random' → logprob: -6.4667816162109375
    7. ' itertools' → logprob: -6.4667816162109375
    8. ' typing' → logprob: -7.2167816162109375
    9. ' statistics' → logprob: -7.5917816162109375
    10. ' ' → logprob: -8.091781616210938

Token 8: 'ect' (ID: 534)
  Prédit: 'ect'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ect' → logprob: -8.840432565193623e-05
    2. 't' → logprob: -9.875088691711426
    3. 'e' → logprob: -10.750088691711426
    4. 'ectl' → logprob: -12.625088691711426
    5. '>' → logprob: -12.750088691711426
    6. 'ected' → logprob: -13.250088691711426
    7. '```' → logprob: -13.500088691711426
    8. 'ector' → logprob: -13.625088691711426
    9. 'ec' → logprob: -13.750088691711426
    10. 'import' → logprob: -14.125088691711426

Token 9: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.018237974494695663
    2. 'import' → logprob: -4.018238067626953
    3. ' ' → logprob: -9.643238067626953
    4. '	import' → logprob: -11.018238067626953
    5. '_import' → logprob: -12.393238067626953
    6. ' ' → logprob: -13.768238067626953
    7. ' importar' → logprob: -15.393238067626953
    8. 'ort' → logprob: -15.768238067626953
    9. '_' → logprob: -15.830738067626953
    10. '.' → logprob: -16.268238067626953

Token 10: ' bis' (ID: 7204)
  Prédit: ' bis'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' bis' → logprob: -0.21785122156143188
    2. 'bis' → logprob: -1.717851161956787
    3. 'ins' → logprob: -4.342851161956787
    4. ' ins' → logprob: -5.717851161956787
    5. '```' → logprob: -11.592851638793945
    6. '*' → logprob: -13.342851638793945
    7. ' ' → logprob: -13.342851638793945
    8. '_ins' → logprob: -13.842851638793945
    9. 'b' → logprob: -14.217851638793945
    10. '`' → logprob: -14.342851638793945

Token 11: 'ect' (ID: 534)
  Prédit: 'ect'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ect' → logprob: -0.00034476007567718625
    2. 'e' → logprob: -8.000345230102539
    3. 'ec' → logprob: -11.875345230102539
    4. 'ectl' → logprob: -14.125345230102539
    5. 'ected' → logprob: -14.500345230102539
    6. '```' → logprob: -15.750345230102539
    7. 'ecta' → logprob: -15.875345230102539
    8. 'sect' → logprob: -16.12534523010254
    9. 'ects' → logprob: -16.25034523010254
    10. 'ection' → logprob: -16.37534523010254

Token 12: '_right' (ID: 24402)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.07452194392681122
    2. '(' → logprob: -3.449522018432617
    3. '.' → logprob: -3.449522018432617
    4. '_left' → logprob: -5.574522018432617
    5. '._' → logprob: -6.824522018432617
    6. 'import' → logprob: -7.699522018432617
    7. '_right' → logprob: -7.824522018432617
    8. ' (' → logprob: -7.824522018432617
    9. '```' → logprob: -8.199522018432617
    10. '_space' → logprob: -8.949522018432617

Token 13: ',' (ID: 11)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.4356802701950073
    2. '\' → logprob: -1.8106802701950073
    3. '```' → logprob: -1.8106802701950073
    4. '(' → logprob: -1.9356802701950073
    5. 'import' → logprob: -2.185680389404297
    6. '
' → logprob: -3.060680389404297
    7. '

' → logprob: -3.310680389404297
    8. 'def' → logprob: -3.935680389404297
    9. ',' → logprob: -4.060680389404297
    10. '' → logprob: -4.560680389404297

Token 14: ' bis' (ID: 7204)
  Prédit: 'bis'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bis' → logprob: -0.07939884811639786
    2. ' bis' → logprob: -2.8293988704681396
    3. 'ins' → logprob: -4.0793986320495605
    4. ' ins' → logprob: -7.9543986320495605
    5. '```' → logprob: -11.954399108886719
    6. 'import' → logprob: -13.454399108886719
    7. 'in' → logprob: -14.454399108886719
    8. 'b' → logprob: -14.704399108886719
    9. '	b' → logprob: -15.079399108886719
    10. 'he' → logprob: -15.579399108886719

Token 15: 'ect' (ID: 534)
  Prédit: 'ect'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ect' → logprob: -7.896309739408025e-07
    2. 'e' → logprob: -14.375000953674316
    3. 'ec' → logprob: -16.375
    4. 'ext' → logprob: -17.75
    5. 'ected' → logprob: -17.875
    6. 'ection' → logprob: -19.0
    7. 'elect' → logprob: -19.75
    8. 'ectl' → logprob: -19.75
    9. 'ex' → logprob: -19.875
    10. 'sect' → logprob: -20.0

Token 16: '_left' (ID: 22189)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.8264936208724976
    2. '_

' → logprob: -0.8264936208724976
    3. '_
' → logprob: -3.201493740081787
    4. '
' → logprob: -3.826493740081787
    5. '\' → logprob: -4.201493740081787
    6. '(' → logprob: -4.701493740081787
    7. '

' → logprob: -4.826493740081787
    8. '\n' → logprob: -4.951493740081787
    9. '```' → logprob: -5.701493740081787
    10. 'import' → logprob: -5.951493740081787

Token 17: '
' (ID: 198)
  Prédit: '

'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '

' → logprob: -0.04021097347140312
    2. '
' → logprob: -3.6652109622955322
    3. '```' → logprob: -5.165211200714111
    4. '\n' → logprob: -5.665211200714111
    5. 'import' → logprob: -6.790211200714111
    6. '\' → logprob: -7.540211200714111
    7. '


' → logprob: -7.665211200714111
    8. '

' → logprob: -8.290210723876953
    9. '
' → logprob: -8.290210723876953
    10. '' → logprob: -8.415210723876953

Token 18: 'sys' (ID: 17324)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7388179302215576
    2. '

' → logprob: -0.8638179302215576
    3. '\n' → logprob: -2.7388179302215576
    4. 'import' → logprob: -4.113818168640137
    5. '```' → logprob: -5.363818168640137
    6. '<|end|>' → logprob: -5.488818168640137
    7. 'def' → logprob: -5.613818168640137
    8. '\' → logprob: -6.363818168640137
    9. '' → logprob: -6.988818168640137
    10. '
' → logprob: -7.238818168640137

Token 19: '.set' (ID: 1230)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -6.32523515378125e-05
    2. ' .' → logprob: -10.500062942504883
    3. '.exit' → logprob: -12.250062942504883
    4. '.stdout' → logprob: -12.250062942504883
    5. '.import' → logprob: -12.375062942504883
    6. '.readline' → logprob: -12.875062942504883
    7. '.argv' → logprob: -13.000062942504883
    8. '.stdin' → logprob: -13.250062942504883
    9. '.setdefault' → logprob: -13.375062942504883
    10. '.​' → logprob: -13.500062942504883

Token 20: 'rec' (ID: 9285)
  Prédit: 'rec'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'rec' → logprob: -0.07962971925735474
    2. '_rec' → logprob: -3.20462965965271
    3. '_limit' → logprob: -3.70462965965271
    4. '_version' → logprob: -5.954629898071289
    5. '_trace' → logprob: -6.579629898071289
    6. '_stack' → logprob: -6.704629898071289
    7. '_' → logprob: -7.204629898071289
    8. '_max' → logprob: -7.204629898071289
    9. '_sys' → logprob: -7.579629898071289
    10. '_int' → logprob: -7.829629898071289

Token 21: 'ursion' (ID: 41658)
  Prédit: 'ursion'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ursion' → logprob: -0.0005898483213968575
    2. 'urs' → logprob: -7.875589847564697
    3. 'ursive' → logprob: -9.000590324401855
    4. 'ur' → logprob: -10.500590324401855
    5. 'limit' → logprob: -10.625590324401855
    6. 'ursor' → logprob: -11.375590324401855
    7. 'u' → logprob: -12.500590324401855
    8. 'usr' → logprob: -12.625590324401855
    9. 'urst' → logprob: -12.750590324401855
    10. '_' → logprob: -13.125590324401855

Token 22: 'limit' (ID: 19698)
  Prédit: '_limit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_limit' → logprob: -0.07033296674489975
    2. 'limit' → logprob: -2.6953330039978027
    3. '_depth' → logprob: -8.070332527160645
    4. '_lim' → logprob: -10.570332527160645
    5. ' limit' → logprob: -11.195332527160645
    6. 'al' → logprob: -11.320332527160645
    7. '_LIMIT' → logprob: -11.445332527160645
    8. 'lim' → logprob: -11.820332527160645
    9. '-limit' → logprob: -12.445332527160645
    10. '_limits' → logprob: -13.070332527160645

Token 23: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -4.008129963040119e-06
    2. '(
' → logprob: -13.500003814697266
    3. '(

' → logprob: -13.875003814697266
    4. '((' → logprob: -14.375003814697266
    5. ' (' → logprob: -14.750003814697266
    6. '```' → logprob: -15.375003814697266
    7. '("("' → logprob: -16.000003814697266
    8. '()' → logprob: -16.250003814697266
    9. '(.' → logprob: -17.125003814697266
    10. '(()' → logprob: -17.375003814697266

Token 24: '100' (ID: 1353)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.0015072436071932316
    2. '100' → logprob: -6.50150728225708
    3. '1' → logprob: -12.501506805419922
    4. '300' → logprob: -14.876506805419922
    5. '500' → logprob: -14.876506805419922
    6. ' ' → logprob: -15.126506805419922
    7. '200' → logprob: -15.751506805419922
    8. '999' → logprob: -16.626506805419922
    9. '400' → logprob: -17.501506805419922
    10. 'pow' → logprob: -17.626506805419922

Token 25: '000' (ID: 1302)
  Prédit: '000'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '000' → logprob: -0.020062830299139023
    2. '00' → logprob: -4.1450629234313965
    3. '0' → logprob: -5.5200629234313965
    4. '_' → logprob: -12.395062446594238
    5. '500' → logprob: -12.395062446594238
    6. '072' → logprob: -14.020062446594238
    7. '007' → logprob: -14.270062446594238
    8. '50' → logprob: -14.270062446594238
    9. '48' → logprob: -14.395062446594238
    10. '003' → logprob: -14.520062446594238

Token 26: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.018166683614253998
    2. ')' → logprob: -4.018166542053223
    3. '```' → logprob: -11.768166542053223
    4. ')
' → logprob: -11.893166542053223
    5. '))' → logprob: -13.768166542053223
    6. '`)' → logprob: -15.143166542053223
    7. '``' → logprob: -15.393166542053223
    8. '1' → logprob: -15.768166542053223
    9. ' )' → logprob: -15.893166542053223
    10. ')`' → logprob: -16.39316749572754

Token 27: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.1008713702030946e-06
    2. ')
' → logprob: -13.250001907348633
    3. ' )' → logprob: -16.000001907348633
    4. '))' → logprob: -16.375001907348633
    5. '```' → logprob: -17.750001907348633
    6. ')
' → logprob: -17.875001907348633
    7. ')

' → logprob: -18.000001907348633
    8. '),' → logprob: -18.000001907348633
    9. '
' → logprob: -18.750001907348633
    10. '}' → logprob: -19.125001907348633

Token 28: 'from' (ID: 2845)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.16220936179161072
    2. 'def' → logprob: -2.4122092723846436
    3. '

' → logprob: -3.1622092723846436
    4. 'class' → logprob: -5.287209510803223
    5. '\n' → logprob: -5.412209510803223
    6. '```' → logprob: -5.662209510803223
    7. '
' → logprob: -6.037209510803223
    8. 'n' → logprob: -7.162209510803223
    9. '\' → logprob: -7.537209510803223
    10. 'import' → logprob: -8.037209510803223

Token 29: ' heap' (ID: 37237)
  Prédit: ' collections'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' collections' → logprob: -0.019879955798387527
    2. 'collections' → logprob: -4.0198798179626465
    3. ' itertools' → logprob: -7.0198798179626465
    4. ' functools' → logprob: -7.1448798179626465
    5. ' heap' → logprob: -10.519880294799805
    6. ' typing' → logprob: -11.519880294799805
    7. ' ' → logprob: -12.894880294799805
    8. ' threading' → logprob: -13.519880294799805
    9. ' queue' → logprob: -13.644880294799805
    10. ' math' → logprob: -14.144880294799805

Token 30: 'q' (ID: 80)
  Prédit: 'q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -4.842555426876061e-06
    2. 'import' → logprob: -12.375004768371582
    3. ' import' → logprob: -15.125004768371582
    4. 'queue' → logprob: -15.250004768371582
    5. ' queue' → logprob: -17.5000057220459
    6. 'i' → logprob: -18.5000057220459
    7. 'n' → logprob: -19.1250057220459
    8. '_' → logprob: -19.2500057220459
    9. '  ' → logprob: -19.6250057220459
    10. 'e' → logprob: -19.8750057220459

Token 31: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.0067934091202914715
    2. 'import' → logprob: -5.00679349899292
    3. ' ' → logprob: -9.631793022155762
    4. '	import' → logprob: -12.006793022155762
    5. '<|end|>' → logprob: -12.756793022155762
    6. '_import' → logprob: -13.881793022155762
    7. ' Import' → logprob: -15.131793022155762
    8. ' ‌' → logprob: -15.131793022155762
    9. ' space' → logprob: -15.131793022155762
    10. 'space' → logprob: -15.381793022155762

Token 32: ' he' (ID: 501)
  Prédit: ' he'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' he' → logprob: -0.017049061134457588
    2. 'he' → logprob: -4.1420488357543945
    3. ' heap' → logprob: -7.1420488357543945
    4. 'heap' → logprob: -8.642048835754395
    5. ' n' → logprob: -10.642048835754395
    6. ' ' → logprob: -11.767048835754395
    7. ' merge' → logprob: -12.142048835754395
    8. ' hea' → logprob: -13.017048835754395
    9. 'merge' → logprob: -13.517048835754395
    10. 'n' → logprob: -13.892048835754395

Token 33: 'app' (ID: 903)
  Prédit: 'app'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'app' → logprob: -0.061980459839105606
    2. 'ap' → logprob: -2.8119804859161377
    3. 'a' → logprob: -11.311980247497559
    4. 'ап' → logprob: -15.061980247497559
    5. '```' → logprob: -16.811981201171875
    6. 'appen' → logprob: -17.561981201171875
    7. '[' → logprob: -17.686981201171875
    8. 'aq' → logprob: -17.811981201171875
    9. 'apput' → logprob: -17.936981201171875
    10. 'apl' → logprob: -18.061981201171875

Token 34: 'ush' (ID: 1776)
  Prédit: 'ush'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ush' → logprob: -0.00248909555375576
    2. 'op' → logprob: -6.00248908996582
    3. 'us' → logprob: -11.75248908996582
    4. 'u' → logprob: -12.25248908996582
    5. 'o' → logprob: -14.62748908996582
    6. '```' → logprob: -15.62748908996582
    7. '[' → logprob: -17.50248908996582
    8. 'ut' → logprob: -17.87748908996582
    9. 'opleft' → logprob: -18.37748908996582
    10. '

' → logprob: -18.62748908996582

Token 35: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.2944144010543823
    2. 'he' → logprob: -1.7944144010543823
    3. ' he' → logprob: -2.669414520263672
    4. ' ' → logprob: -4.294414520263672
    5. ' ,' → logprob: -5.294414520263672
    6. '<|end|>' → logprob: -7.419414520263672
    7. '_he' → logprob: -9.794414520263672
    8. ' and' → logprob: -9.919414520263672
    9. '  ' → logprob: -10.294414520263672
    10. 'import' → logprob: -10.544414520263672

Token 36: ' he' (ID: 501)
  Prédit: ' he'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' he' → logprob: -0.07027784734964371
    2. 'he' → logprob: -2.6952779293060303
    3. 'heap' → logprob: -8.57027816772461
    4. ' heap' → logprob: -8.94527816772461
    5. ' ' → logprob: -11.57027816772461
    6. ' heaps' → logprob: -13.32027816772461
    7. '.he' → logprob: -13.44527816772461
    8. '```' → logprob: -13.63277816772461
    9. '_he' → logprob: -13.69527816772461
    10. ' hea' → logprob: -14.13277816772461

Token 37: 'app' (ID: 903)
  Prédit: 'app'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'app' → logprob: -0.00012415809032972902
    2. 'ap' → logprob: -9.000123977661133
    3. 'a' → logprob: -14.875123977661133
    4. 'appen' → logprob: -16.125123977661133
    5. 'appt' → logprob: -17.750123977661133
    6. '	app' → logprob: -17.875123977661133
    7. '(app' → logprob: -18.000123977661133
    8. 'appa' → logprob: -18.125123977661133
    9. ' app' → logprob: -18.125123977661133
    10. 'appe' → logprob: -18.250123977661133

Token 38: 'op' (ID: 467)
  Prédit: 'op'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'op' → logprob: -0.02326749451458454
    2. 'ush' → logprob: -3.7732675075531006
    3. 'o' → logprob: -10.77326774597168
    4. '   ' → logprob: -15.39826774597168
    5. 'opleft' → logprob: -15.64826774597168
    6. 'osh' → logprob: -16.02326774597168
    7. '```' → logprob: -16.14826774597168
    8. 'opp' → logprob: -16.64826774597168
    9. '  ' → logprob: -17.14826774597168
    10. 'opl' → logprob: -17.27326774597168

Token 39: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.21563619375228882
    2. '

' → logprob: -1.7156362533569336
    3. '' → logprob: -5.215636253356934
    4. '
' → logprob: -5.465636253356934
    5. 'def' → logprob: -6.215636253356934
    6. '\n' → logprob: -7.090636253356934
    7. '```' → logprob: -7.965636253356934
    8. '


' → logprob: -8.465636253356934
    9. '

' → logprob: -8.715636253356934
    10. '\' → logprob: -8.840636253356934

Token 40: 'from' (ID: 2845)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.17712095379829407
    2. '

' → logprob: -2.3021209239959717
    3. 'def' → logprob: -3.4271209239959717
    4. '' → logprob: -4.052121162414551
    5. '```' → logprob: -5.802121162414551
    6. '#' → logprob: -6.177121162414551
    7. 'd' → logprob: -6.302121162414551
    8. '
' → logprob: -6.927121162414551
    9. '\n' → logprob: -7.052121162414551
    10. '\' → logprob: -7.052121162414551

Token 41: ' collections' (ID: 22690)
  Prédit: 'collections'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'collections' → logprob: -0.0408669151365757
    2. ' collections' → logprob: -3.2908668518066406
    3. ' itertools' → logprob: -5.915866851806641
    4. 'it' → logprob: -9.79086685180664
    5. 'math' → logprob: -10.16586685180664
    6. ' functools' → logprob: -12.04086685180664
    7. ' math' → logprob: -12.16586685180664
    8. 'queue' → logprob: -12.29086685180664
    9. 'random' → logprob: -12.66586685180664
    10. '_' → logprob: -12.79086685180664

Token 42: ' import' (ID: 1588)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.08613109588623047
    2. ' import' → logprob: -3.2111310958862305
    3. 'abc' → logprob: -3.2111310958862305
    4. 'ections' → logprob: -8.21113109588623
    5. 'collections' → logprob: -8.33613109588623
    6. '.' → logprob: -8.83613109588623
    7. '.Counter' → logprob: -9.21113109588623
    8. 'ion' → logprob: -9.33613109588623
    9. 'deque' → logprob: -9.33613109588623
    10. '	import' → logprob: -9.46113109588623

Token 43: ' defaultdict' (ID: 107098)
  Prédit: ' deque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' deque' → logprob: -0.39275968074798584
    2. ' defaultdict' → logprob: -1.1427596807479858
    3. 'deque' → logprob: -5.142759799957275
    4. 'default' → logprob: -10.642759323120117
    5. 'de' → logprob: -12.517759323120117
    6. ' de' → logprob: -14.017759323120117
    7. ' default' → logprob: -14.142759323120117
    8. ' Counter' → logprob: -14.392759323120117
    9. ' ' → logprob: -16.642759323120117
    10. 'Deque' → logprob: -17.392759323120117

Token 44: ',' (ID: 11)
  Prédit: '

'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '

' → logprob: -0.5771138072013855
    2. '
' → logprob: -0.9521138072013855
    3. 'import' → logprob: -3.8271138668060303
    4. 'def' → logprob: -4.827113628387451
    5. '' → logprob: -4.952113628387451
    6. '
' → logprob: -5.202113628387451
    7. 'class' → logprob: -6.327113628387451
    8. ' 

' → logprob: -6.452113628387451
    9. '\n' → logprob: -6.952113628387451
    10. '<|end|>' → logprob: -7.327113628387451

Token 45: ' Counter' (ID: 32251)
  Prédit: 'deque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'deque' → logprob: -0.20147453248500824
    2. ' deque' → logprob: -1.7014745473861694
    3. 'Counter' → logprob: -10.2014741897583
    4. 'de' → logprob: -11.0764741897583
    5. 'Deque' → logprob: -12.3264741897583
    6. ' Counter' → logprob: -12.4514741897583
    7. 'Ordered' → logprob: -15.9514741897583
    8. ' de' → logprob: -16.951475143432617
    9. '.de' → logprob: -17.076475143432617
    10. 'counter' → logprob: -17.701475143432617

Token 46: ',' (ID: 11)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.22892306745052338
    2. '

' → logprob: -2.1039230823516846
    3. 'def' → logprob: -3.1039230823516846
    4. '' → logprob: -4.3539228439331055
    5. 'import' → logprob: -4.8539228439331055
    6. '\n' → logprob: -5.4789228439331055
    7. '\' → logprob: -5.8539228439331055
    8. 'class' → logprob: -6.3539228439331055
    9. '```' → logprob: -6.3539228439331055
    10. 'n' → logprob: -6.4789228439331055

Token 47: ' deque' (ID: 90347)
  Prédit: 'deque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'deque' → logprob: -0.1269339919090271
    2. ' deque' → logprob: -2.126934051513672
    3. 'de' → logprob: -12.626934051513672
    4. 'Deque' → logprob: -13.251934051513672
    5. 'Ordered' → logprob: -14.251934051513672
    6. ' Ordered' → logprob: -16.126934051513672
    7. 'named' → logprob: -16.751934051513672
    8. ' de' → logprob: -18.751934051513672
    9. ' named' → logprob: -19.001934051513672
    10. '.de' → logprob: -19.251934051513672

Token 48: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3100779354572296
    2. '

' → logprob: -2.3100779056549072
    3. 'def' → logprob: -2.5600779056549072
    4. '' → logprob: -3.6850779056549072
    5. '\' → logprob: -4.560078144073486
    6. 'import' → logprob: -4.685078144073486
    7. 'class' → logprob: -4.810078144073486
    8. '#' → logprob: -4.935078144073486
    9. '```' → logprob: -5.060078144073486
    10. 'n' → logprob: -5.185078144073486

Token 49: 'from' (ID: 2845)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5299100279808044
    2. '

' → logprob: -0.9049100279808044
    3. '
' → logprob: -6.404910087585449
    4. '<|end|>' → logprob: -6.654910087585449
    5. 'import' → logprob: -7.029910087585449
    6. 'def' → logprob: -7.029910087585449
    7. '' → logprob: -7.654910087585449
    8. '#' → logprob: -8.02991008758545
    9. '```' → logprob: -8.02991008758545
    10. '


' → logprob: -8.52991008758545

Token 50: ' operator' (ID: 11019)
  Prédit: ' itertools'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' itertools' → logprob: -0.0013314292300492525
    2. ' typing' → logprob: -7.126331329345703
    3. ' functools' → logprob: -7.751331329345703
    4. ' operator' → logprob: -9.876331329345703
    5. ' fractions' → logprob: -10.251331329345703
    6. 'it' → logprob: -12.876331329345703
    7. ' math' → logprob: -13.251331329345703
    8. ' bis' → logprob: -14.126331329345703
    9. ' queue' → logprob: -14.251331329345703
    10. ' threading' → logprob: -14.251331329345703

Token 51: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.024953726679086685
    2. 'import' → logprob: -3.774953842163086
    3. '<|end|>' → logprob: -6.774953842163086
    4. ' ' → logprob: -7.649953842163086
    5. '	import' → logprob: -10.274953842163086
    6. ' as' → logprob: -11.149953842163086
    7. '<|end|>' → logprob: -11.149953842163086
    8. '.' → logprob: -12.149953842163086
    9. '_import' → logprob: -12.649953842163086
    10. ' ' → logprob: -12.899953842163086

Token 52: ' item' (ID: 2169)
  Prédit: ' item'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' item' → logprob: -0.5810880064964294
    2. 'item' → logprob: -0.8310880064964294
    3. ' attr' → logprob: -5.956088066101074
    4. 'attr' → logprob: -6.581088066101074
    5. '	item' → logprob: -7.956088066101074
    6. '.item' → logprob: -8.456088066101074
    7. ' ' → logprob: -8.581088066101074
    8. 'getitem' → logprob: -8.581088066101074
    9. '=item' → logprob: -9.706088066101074
    10. 'mul' → logprob: -10.706088066101074

Token 53: 'getter' (ID: 132812)
  Prédit: 'getter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'getter' → logprob: -0.00016206118743866682
    2. 'get' → logprob: -8.750162124633789
    3. 'gett' → logprob: -13.000162124633789
    4. 'getitem' → logprob: -13.750162124633789
    5. 'g' → logprob: -15.875162124633789
    6. 'attr' → logprob: -16.25016212463379
    7. 'Getter' → logprob: -17.75016212463379
    8. 'gets' → logprob: -18.25016212463379
    9. 'setter' → logprob: -18.25016212463379
    10. 'gt' → logprob: -18.50016212463379

Token 54: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 55: 'from' (ID: 2845)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3415096700191498
    2. '

' → logprob: -1.8415096998214722
    3. 'import' → logprob: -2.7165095806121826
    4. '\n' → logprob: -3.5915095806121826
    5. '#' → logprob: -5.216509819030762
    6. 'def' → logprob: -5.341509819030762
    7. '<|end|>' → logprob: -5.466509819030762
    8. '\' → logprob: -5.716509819030762
    9. '' → logprob: -5.716509819030762
    10. '```' → logprob: -5.841509819030762

Token 56: ' itertools' (ID: 103178)
  Prédit: ' itertools'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' itertools' → logprob: -0.03412370756268501
    2. ' functools' → logprob: -3.409123659133911
    3. 'it' → logprob: -8.159123420715332
    4. ' math' → logprob: -9.409123420715332
    5. 'math' → logprob: -10.159123420715332
    6. 'fun' → logprob: -10.534123420715332
    7. '_it' → logprob: -11.784123420715332
    8. 'operator' → logprob: -11.909123420715332
    9. ' operator' → logprob: -12.034123420715332
    10. ' heap' → logprob: -12.034123420715332

Token 57: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.03632479906082153
    2. 'import' → logprob: -3.7863247394561768
    3. '.' → logprob: -4.536324977874756
    4. ' ' → logprob: -6.786324977874756
    5. ' .' → logprob: -7.161324977874756
    6. '<|end|>' → logprob: -8.536324501037598
    7. '.import' → logprob: -9.786324501037598
    8. '.im' → logprob: -10.286324501037598
    9. '	import' → logprob: -10.536324501037598
    10. '<|end|>' → logprob: -11.411324501037598

Token 58: ' accumulate' (ID: 74226)
  Prédit: ' permutations'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' permutations' → logprob: -0.687481164932251
    2. ' accumulate' → logprob: -1.312481164932251
    3. ' combinations' → logprob: -1.937481164932251
    4. 'com' → logprob: -3.062481164932251
    5. 'acc' → logprob: -3.937481164932251
    6. ' product' → logprob: -5.187480926513672
    7. ' group' → logprob: -5.812480926513672
    8. 'product' → logprob: -5.812480926513672
    9. 'per' → logprob: -5.937480926513672
    10. ' chain' → logprob: -6.187480926513672

Token 59: ',' (ID: 11)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.9892663955688477
    2. '
' → logprob: -1.3642663955688477
    3. 'import' → logprob: -2.4892663955688477
    4. '<|end|>' → logprob: -2.6142663955688477
    5. 'def' → logprob: -2.8642663955688477
    6. '

' → logprob: -2.8642663955688477
    7. '\' → logprob: -3.1142663955688477
    8. '' → logprob: -4.614266395568848
    9. ',' → logprob: -4.614266395568848
    10. '#' → logprob: -4.739266395568848

Token 60: ' permutations' (ID: 174595)
  Prédit: 'product'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'product' → logprob: -0.7685052156448364
    2. 'group' → logprob: -1.5185052156448364
    3. 'com' → logprob: -1.8935052156448364
    4. ' group' → logprob: -3.018505096435547
    5. ' product' → logprob: -3.518505096435547
    6. 'per' → logprob: -3.768505096435547
    7. 'chain' → logprob: -3.768505096435547
    8. ' permutations' → logprob: -3.768505096435547
    9. 'count' → logprob: -4.768505096435547
    10. ' chain' → logprob: -5.143505096435547

Token 61: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5356504321098328
    2. ',' → logprob: -1.6606504917144775
    3. '\n' → logprob: -2.4106504917144775
    4. 'import' → logprob: -2.7856504917144775
    5. '<|end|>' → logprob: -3.0356504917144775
    6. '

' → logprob: -5.285650253295898
    7. '' → logprob: -5.660650253295898
    8. '<|end|>' → logprob: -5.785650253295898
    9. ' 
' → logprob: -5.910650253295898
    10. ',
' → logprob: -6.160650253295898

Token 62: 'MOD' (ID: 52135)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5903087258338928
    2. '#' → logprob: -1.840308666229248
    3. 'import' → logprob: -2.340308666229248
    4. '
' → logprob: -2.965308666229248
    5. '\n' → logprob: -3.215308666229248
    6. '\' → logprob: -3.465308666229248
    7. 'd' → logprob: -3.590308666229248
    8. 'a' → logprob: -4.465308666229248
    9. 'n' → logprob: -4.465308666229248
    10. '' → logprob: -5.715308666229248

Token 63: 'ULO' (ID: 63916)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5232670903205872
    2. '=' → logprob: -0.8982670903205872
    3. ' ' → logprob: -9.148266792297363
    4. ' =
' → logprob: -11.023266792297363
    5. ' =)' → logprob: -11.898266792297363
    6. '_' → logprob: -12.523266792297363
    7. '<|end|>' → logprob: -12.523266792297363
    8. ')' → logprob: -13.773266792297363
    9. '=

' → logprob: -14.023266792297363
    10. '=
' → logprob: -14.148266792297363

Token 64: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.4368157982826233
    2. ' =' → logprob: -1.0618157386779785
    3. '_' → logprob: -4.9368157386779785
    4. ' ' → logprob: -7.4368157386779785
    5. ')' → logprob: -9.311816215515137
    6. ',' → logprob: -9.436816215515137
    7. '.' → logprob: -10.561816215515137
    8. '<|end|>' → logprob: -10.561816215515137
    9. '(' → logprob: -11.061816215515137
    10. ':' → logprob: -11.186816215515137

Token 65: ' ' (ID: 220)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.48694783449172974
    2. ' ' → logprob: -0.9869478344917297
    3. '100' → logprob: -4.361948013305664
    4. '998' → logprob: -10.361948013305664
    5. '1' → logprob: -13.361948013305664
    6. 'int' → logprob: -14.486948013305664
    7. ' ' → logprob: -15.361948013305664
    8. ' (' → logprob: -15.486948013305664
    9. '(' → logprob: -15.986948013305664
    10. 'pow' → logprob: -16.236948013305664

Token 66: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.01819911040365696
    2. '100' → logprob: -4.0181989669799805
    3. '998' → logprob: -10.01819896697998
    4. '1' → logprob: -12.89319896697998
    5. 'int' → logprob: -13.51819896697998
    6. ' ' → logprob: -14.76819896697998
    7. '(' → logprob: -15.26819896697998
    8. 'pow' → logprob: -17.518199920654297
    9. '123' → logprob: -17.768199920654297
    10. '2' → logprob: -18.143199920654297

Token 67: '**' (ID: 410)
  Prédit: '9'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -0.165565624833107
    2. '**' → logprob: -2.6655657291412354
    3. '0' → logprob: -3.0405657291412354
    4. '000' → logprob: -3.9155657291412354
    5. '7' → logprob: -5.040565490722656
    6. '00' → logprob: -5.040565490722656
    7. '09' → logprob: -7.040565490722656
    8. '6' → logprob: -7.165565490722656
    9. '8' → logprob: -8.415565490722656
    10. '24' → logprob: -8.665565490722656

Token 68: '9' (ID: 24)
  Prédit: '9'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -4.320199877838604e-07
    2. '09' → logprob: -14.75
    3. '```' → logprob: -17.875
    4. '+' → logprob: -18.875
    5. '10' → logprob: -19.0
    6. ' ' → logprob: -19.625
    7. '18' → logprob: -20.75
    8. '９' → logprob: -20.875
    9. '19' → logprob: -21.5
    10. '   ' → logprob: -21.875

Token 69: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.0007237526006065309
    2. '7' → logprob: -7.875723838806152
    3. ' +' → logprob: -8.000723838806152
    4. '+
' → logprob: -13.000723838806152
    5. '+

' → logprob: -14.125723838806152
    6. ' ' → logprob: -14.375723838806152
    7. '19' → logprob: -14.500723838806152
    8. '＋' → logprob: -14.500723838806152
    9. 'plus' → logprob: -14.500723838806152
    10. ' plus' → logprob: -14.625723838806152

Token 70: '7' (ID: 22)
  Prédit: '7'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -1.7432603272027336e-06
    2. '+' → logprob: -13.375001907348633
    3. '9' → logprob: -16.375001907348633
    4. '07' → logprob: -17.250001907348633
    5. ' ' → logprob: -18.000001907348633
    6. '```' → logprob: -18.125001907348633
    7. '87' → logprob: -19.625001907348633
    8. '

' → logprob: -20.062501907348633
    9. '79' → logprob: -20.062501907348633
    10. '' → logprob: -20.687501907348633

Token 71: ' #' (ID: 1069)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.17234599590301514
    2. '

' → logprob: -1.9223459959030151
    3. '' → logprob: -5.547346115112305
    4. '
' → logprob: -5.797346115112305
    5. 'def' → logprob: -5.922346115112305
    6. '<|end|>' → logprob: -6.672346115112305
    7. '\n' → logprob: -7.297346115112305
    8. '```' → logprob: -9.672346115112305
    9. '<|end|>' → logprob: -9.672346115112305
    10. '#' → logprob: -9.922346115112305

Token 72: ' probablement' (ID: 87740)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0014132121577858925
    2. ' \' → logprob: -8.001413345336914
    3. '\n' → logprob: -8.876413345336914
    4. '<|end|>' → logprob: -8.876413345336914
    5. ' None' → logprob: -9.126413345336914
    6. '  ' → logprob: -9.376413345336914
    7. ' 
' → logprob: -9.501413345336914
    8. ' 

' → logprob: -9.501413345336914
    9. ' ' → logprob: -9.626413345336914
    10. '  
' → logprob: -10.251413345336914

Token 73: ' inutile' (ID: 157748)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5819178223609924
    2. '<|end|>' → logprob: -1.3319177627563477
    3. '
' → logprob: -2.4569177627563477
    4. '#' → logprob: -2.9569177627563477
    5. '<|end|>' → logprob: -4.581917762756348
    6. ',' → logprob: -4.706917762756348
    7. ')' → logprob: -5.206917762756348
    8. ' 
' → logprob: -5.331917762756348
    9. '\n' → logprob: -5.831917762756348
    10. '' → logprob: -6.706917762756348

Token 74: ' ici' (ID: 27994)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.07549481093883514
    2. '

' → logprob: -3.3254947662353516
    3. '' → logprob: -4.450494766235352
    4. '#' → logprob: -4.950494766235352
    5. '<|end|>' → logprob: -5.075494766235352
    6. '
' → logprob: -5.200494766235352
    7. '\n' → logprob: -5.825494766235352
    8. 'newline' → logprob: -6.700494766235352
    9. '<|end|>' → logprob: -7.575494766235352
    10. ',' → logprob: -8.075494766235352

Token 75: ' mais' (ID: 2899)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.15563030540943146
    2. '

' → logprob: -2.030630350112915
    3. '' → logprob: -5.280630111694336
    4. '
' → logprob: -5.530630111694336
    5. '#' → logprob: -6.280630111694336
    6. '\n' → logprob: -6.780630111694336
    7. '


' → logprob: -8.155630111694336
    8. ',' → logprob: -9.280630111694336
    9. '<|end|>' → logprob: -9.655630111694336
    10. 'newline' → logprob: -9.905630111694336

Token 76: ' on' (ID: 402)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.07993659377098083
    2. ' ' → logprob: -3.5799365043640137
    3. '...' → logprob: -3.9549365043640137
    4. ' #' → logprob: -5.454936504364014
    5. ' c' → logprob: -5.954936504364014
    6. ' je' → logprob: -6.079936504364014
    7. '#' → logprob: -6.204936504364014
    8. ''' → logprob: -6.579936504364014
    9. ' ...' → logprob: -6.579936504364014
    10. ',' → logprob: -6.579936504364014

Token 77: ' sait' (ID: 52101)
  Prédit: ' garde'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' garde' → logprob: -0.8271703124046326
    2. ' laisse' → logprob: -2.0771703720092773
    3. ' continue' → logprob: -2.4521703720092773
    4. 'le' → logprob: -2.9521703720092773
    5. ' le' → logprob: -3.2021703720092773
    6. 'g' → logprob: -3.2021703720092773
    7. 'l' → logprob: -3.3271703720092773
    8. ' met' → logprob: -3.7021703720092773
    9. '```' → logprob: -3.9521703720092773
    10. ' préfère' → logprob: -4.077170372009277

Token 78: ' jamais' (ID: 23077)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7004700899124146
    2. ' jamais' → logprob: -0.8254700899124146
    3. '  ' → logprob: -3.075469970703125
    4. '```' → logprob: -4.950469970703125
    5. ' never' → logprob: -5.200469970703125
    6. ' mieux' → logprob: -6.325469970703125
    7. ' pas' → logprob: -6.575469970703125
    8. ' toujours' → logprob: -7.325469970703125
    9. '<|end|>' → logprob: -7.950469970703125
    10. '.' → logprob: -8.450469970703125

Token 79: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.1343374103307724
    2. '

' → logprob: -2.1343374252319336
    3. '' → logprob: -6.009337425231934
    4. '
' → logprob: -6.259337425231934
    5. '\n' → logprob: -6.509337425231934
    6. ' 
' → logprob: -8.134337425231934
    7. '


' → logprob: -8.259337425231934
    8. ' 

' → logprob: -8.384337425231934
    9. '\' → logprob: -8.884337425231934
    10. '#' → logprob: -9.134337425231934

Token 80: 'INF' (ID: 64358)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7015116214752197
    2. '

' → logprob: -0.7015116214752197
    3. '
' → logprob: -5.076511383056641
    4. '


' → logprob: -7.201511383056641
    5. '' → logprob: -7.326511383056641
    6. '

' → logprob: -8.82651138305664
    7. '\n' → logprob: -8.82651138305664
    8. 'def' → logprob: -9.70151138305664
    9. '#' → logprob: -9.82651138305664
    10. '\' → logprob: -10.32651138305664

Token 81: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.016235534101724625
    2. '=' → logprob: -4.1412353515625
    3. '=int' → logprob: -8.6412353515625
    4. '=float' → logprob: -10.8912353515625
    5. ')' → logprob: -13.7662353515625
    6. ' ' → logprob: -14.1412353515625
    7. ' =)' → logprob: -14.1412353515625
    8. '＝' → logprob: -14.7662353515625
    9. '_' → logprob: -14.8912353515625
    10. '=np' → logprob: -15.0162353515625

Token 82: ' float' (ID: 4428)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.34779947996139526
    2. ' float' → logprob: -1.59779953956604
    3. '10' → logprob: -2.59779953956604
    4. 'float' → logprob: -4.097799301147461
    5. ' int' → logprob: -8.722799301147461
    6. '1' → logprob: -8.972799301147461
    7. 'int' → logprob: -9.847799301147461
    8. ' math' → logprob: -11.722799301147461
    9. '100' → logprob: -11.847799301147461
    10. '(float' → logprob: -12.972799301147461

Token 83: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.00023727134976070374
    2. ''' → logprob: -8.875237464904785
    3. '(' → logprob: -9.750237464904785
    4. ''in' → logprob: -11.000237464904785
    5. '("' → logprob: -11.125237464904785
    6. ''a' → logprob: -13.875237464904785
    7. ''s' → logprob: -14.125237464904785
    8. '32' → logprob: -14.500237464904785
    9. '"' → logprob: -14.625237464904785
    10. ''t' → logprob: -14.625237464904785

Token 84: 'inf' (ID: 22226)
  Prédit: ''in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''in' → logprob: -0.1034277155995369
    2. ''' → logprob: -2.4784276485443115
    3. 'inf' → logprob: -4.603427886962891
    4. ''ins' → logprob: -7.103427886962891
    5. ''information' → logprob: -7.228427886962891
    6. ''ex' → logprob: -7.478427886962891
    7. '"' → logprob: -8.10342788696289
    8. ''i' → logprob: -8.35342788696289
    9. ''inc' → logprob: -8.85342788696289
    10. ''im' → logprob: -8.97842788696289

Token 85: '')
' (ID: 2515)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5760053992271423
    2. '')' → logprob: -0.8260053992271423
    3. '")' → logprob: -9.951004981994629
    4. ' )' → logprob: -11.951004981994629
    5. '')
' → logprob: -12.576004981994629
    6. '()' → logprob: -13.701004981994629
    7. ''' → logprob: -13.826004981994629
    8. ' ')' → logprob: -13.951004981994629
    9. '('' → logprob: -14.076004981994629
    10. ')
' → logprob: -14.576004981994629

Token 86: 'def' (ID: 1314)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3096528649330139
    2. 'def' → logprob: -1.5596528053283691
    3. '

' → logprob: -3.434652805328369
    4. '#' → logprob: -4.934652805328369
    5. '
' → logprob: -5.184652805328369
    6. '' → logprob: -5.559652805328369
    7. 'class' → logprob: -6.059652805328369
    8. '\n' → logprob: -6.434652805328369
    9. '\' → logprob: -6.934652805328369
    10. 'n' → logprob: -8.059653282165527

Token 87: ' read' (ID: 1729)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.8623411059379578
    2. ' dfs' → logprob: -0.8623411059379578
    3. ' main' → logprob: -2.4873411655426025
    4. ' ' → logprob: -3.4873411655426025
    5. ' solve' → logprob: -4.237340927124023
    6. ' _' → logprob: -4.487340927124023
    7. ' bfs' → logprob: -4.987340927124023
    8. ' dp' → logprob: -6.237340927124023
    9. ' space' → logprob: -6.487340927124023
    10. ' s' → logprob: -6.987340927124023

Token 88: 'int' (ID: 491)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.7692633867263794
    2. '_line' → logprob: -0.7692633867263794
    3. '():' → logprob: -3.01926326751709
    4. '_' → logprob: -4.51926326751709
    5. '(' → logprob: -4.76926326751709
    6. 'line' → logprob: -6.39426326751709
    7. '_input' → logprob: -6.64426326751709
    8. '```' → logprob: -8.14426326751709
    9. ' ()' → logprob: -8.39426326751709
    10. '_LINE' → logprob: -8.51926326751709

Token 89: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0002128382766386494
    2. '()' → logprob: -8.750212669372559
    3. ' ():' → logprob: -9.875212669372559
    4. '():
' → logprob: -13.250212669372559
    5. '(' → logprob: -14.625212669372559
    6. ' ()' → logprob: -14.750212669372559
    7. '()*' → logprob: -15.250212669372559
    8. 's' → logprob: -16.625213623046875
    9. '().' → logprob: -17.375213623046875
    10. '()>' → logprob: -17.500213623046875

Token 90: '   ' (ID: 271)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.015856515616178513
    2. '():' → logprob: -4.265856742858887
    3. ' ()' → logprob: -6.515856742858887
    4. '(' → logprob: -8.890856742858887
    5. '():
' → logprob: -10.890856742858887
    6. '()*' → logprob: -11.140856742858887
    7. '()
' → logprob: -11.640856742858887
    8. ' ():' → logprob: -11.765856742858887
    9. '()>' → logprob: -12.265856742858887
    10. '())' → logprob: -12.765856742858887

Token 91: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.04986950010061264
    2. ' int' → logprob: -3.6748695373535156
    3. 'return' (adapté à ' return') → logprob: -4.174869537353516
    4. 'int' → logprob: -4.924869537353516
    5. ' ' → logprob: -7.549869537353516
    6. '()' → logprob: -10.174869537353516
    7. '   ' → logprob: -10.799869537353516
    8. '(int' → logprob: -10.924869537353516
    9. '    ' → logprob: -11.299869537353516
    10. '=int' → logprob: -11.674869537353516

Token 92: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.16023235023021698
    2. ' int' → logprob: -1.9102323055267334
    3. '(int' → logprob: -12.285232543945312
    4. ' ' → logprob: -13.285232543945312
    5. '	int' → logprob: -13.910232543945312
    6. '<int' → logprob: -15.410232543945312
    7. '   ' → logprob: -15.410232543945312
    8. '  ' → logprob: -15.785232543945312
    9. 'ints' → logprob: -16.160232543945312
    10. '[int' → logprob: -16.285232543945312

Token 93: '(sys' (ID: 41042)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.5951524376869202
    2. '(' → logprob: -0.8451524376869202
    3. '(sys' → logprob: -3.9701523780822754
    4. 'input' → logprob: -9.220152854919434
    5. '()' → logprob: -10.845152854919434
    6. '(stdin' → logprob: -11.345152854919434
    7. '(

' → logprob: -11.720152854919434
    8. ' (' → logprob: -11.720152854919434
    9. '(
' → logprob: -11.970152854919434
    10. '(open' → logprob: -13.845152854919434

Token 94: '.stdin' (ID: 93480)
  Prédit: '.stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdin' → logprob: -0.00418061763048172
    2. '.readline' → logprob: -5.504180431365967
    3. '.' → logprob: -9.504180908203125
    4. '(stdin' → logprob: -11.129180908203125
    5. 'stdin' → logprob: -11.629180908203125
    6. '.argv' → logprob: -13.504180908203125
    7. '.stdout' → logprob: -13.754180908203125
    8. '().' → logprob: -14.504180908203125
    9. '.read' → logprob: -14.629180908203125
    10. ' .' → logprob: -15.129180908203125

Token 95: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -3.8889261304575484e-06
    2. '.' → logprob: -13.125003814697266
    3. '.read' → logprob: -13.375003814697266
    4. '.stdin' → logprob: -15.375003814697266
    5. ' readline' → logprob: -17.750003814697266
    6. '.buffer' → logprob: -18.750003814697266
    7. '.readlines' → logprob: -19.750003814697266
    8. '().' → logprob: -20.375003814697266
    9. ' .' → logprob: -20.750003814697266
    10. ').' → logprob: -21.375003814697266

Token 96: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.38743430376052856
    2. '().' → logprob: -1.1374342441558838
    3. '()' → logprob: -7.512434482574463
    4. ' ())' → logprob: -11.262434005737305
    5. '(' → logprob: -13.887434005737305
    6. ')' → logprob: -13.887434005737305
    7. '())
' → logprob: -14.262434005737305
    8. '()[' → logprob: -15.137434005737305
    9. '()
' → logprob: -15.262434005737305
    10. '()]' → logprob: -15.262434005737305

Token 97: 'def' (ID: 1314)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.4314627945423126
    2. 'def' → logprob: -1.0564627647399902
    3. '\n' → logprob: -6.93146276473999
    4. '
' → logprob: -8.056463241577148
    5. '()
' → logprob: -8.056463241577148
    6. ' def' → logprob: -8.056463241577148
    7. '\' → logprob: -8.556463241577148
    8. ' 
' → logprob: -8.931463241577148
    9. '()' → logprob: -9.056463241577148
    10. '

' → logprob: -9.931463241577148

Token 98: ' read' (ID: 1729)
  Prédit: ' read'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.034982115030288696
    2. 'read' → logprob: -3.534982204437256
    3. ' reads' → logprob: -5.784982204437256
    4. ' readline' → logprob: -6.409982204437256
    5. '_read' → logprob: -7.784982204437256
    6. '_reads' → logprob: -10.534981727600098
    7. 'reads' → logprob: -10.659981727600098
    8. 're' → logprob: -11.909981727600098
    9. ' main' → logprob: -12.034981727600098
    10. '	read' → logprob: -12.159981727600098

Token 99: 'list' (ID: 2641)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.0005862758844159544
    2. 'int' → logprob: -7.87558650970459
    3. 'lin' → logprob: -8.87558650970459
    4. 'list' → logprob: -10.87558650970459
    5. 'ln' → logprob: -10.87558650970459
    6. '_line' → logprob: -11.12558650970459
    7. 'str' → logprob: -12.00058650970459
    8. 'ine' → logprob: -13.12558650970459
    9. '()' → logprob: -13.25058650970459
    10. 'lines' → logprob: -13.37558650970459

Token 100: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.2266051024198532
    2. '()' → logprob: -1.6016050577163696
    3. '().' → logprob: -8.351605415344238
    4. '():
' → logprob: -8.476605415344238
    5. '()>' → logprob: -8.476605415344238
    6. '()[' → logprob: -8.851605415344238
    7. '()">' → logprob: -9.476605415344238
    8. '():

' → logprob: -9.976605415344238
    9. ' ()' → logprob: -9.976605415344238
    10. '()]' → logprob: -10.101605415344238

Token 101: '   ' (ID: 271)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.01293290313333273
    2. '().' → logprob: -4.887932777404785
    3. '():' → logprob: -5.512932777404785
    4. ' ()' → logprob: -7.887932777404785
    5. '():
' → logprob: -8.012932777404785
    6. '()[' → logprob: -8.387932777404785
    7. '(' → logprob: -9.512932777404785
    8. '()]' → logprob: -10.012932777404785
    9. '()>' → logprob: -10.262932777404785
    10. '():

' → logprob: -10.762932777404785

Token 102: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.3928455114364624
    2. 'map' → logprob: -1.3928455114364624
    3. 'list' → logprob: -2.767845630645752
    4. '   ' → logprob: -4.767845630645752
    5. ' return' → logprob: -5.642845630645752
    6. ' map' → logprob: -7.142845630645752
    7. 'sys' → logprob: -7.517845630645752
    8. ' list' → logprob: -8.517845153808594
    9. '()' → logprob: -9.892845153808594
    10. ' ' → logprob: -10.642845153808594

Token 103: ' [' (ID: 723)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.0015134313143789768
    2. ' list' → logprob: -6.501513481140137
    3. 'map' → logprob: -11.501513481140137
    4. 'sys' → logprob: -14.376513481140137
    5. '[list' → logprob: -15.126513481140137
    6. '(list' → logprob: -16.50151252746582
    7. '	list' → logprob: -17.00151252746582
    8. '[' → logprob: -18.62651252746582
    9. '=list' → logprob: -19.50151252746582
    10. ':list' → logprob: -19.50151252746582

Token 104: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -1.1472419600977446e-06
    2. ' int' → logprob: -14.250000953674316
    3. 'map' → logprob: -15.625000953674316
    4. '(int' → logprob: -16.500001907348633
    5. '	int' → logprob: -16.875001907348633
    6. ']int' → logprob: -17.375001907348633
    7. '*' → logprob: -18.625001907348633
    8. '<int' → logprob: -18.750001907348633
    9. 'ints' → logprob: -18.750001907348633
    10. '   ' → logprob: -18.875001907348633

Token 105: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.023267842829227448
    2. '(i' → logprob: -3.7732677459716797
    3. '(s' → logprob: -12.27326774597168
    4. '(ii' → logprob: -12.27326774597168
    5. '(' → logprob: -12.64826774597168
    6. ']' → logprob: -12.77326774597168
    7. '()]' → logprob: -12.89826774597168
    8. '](' → logprob: -13.39826774597168
    9. '	x' → logprob: -15.27326774597168
    10. '(token' → logprob: -15.27326774597168

Token 106: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0007048065308481455
    2. ' for' → logprob: -8.250704765319824
    3. 'for' → logprob: -8.625704765319824
    4. ' )' → logprob: -9.250704765319824
    5. '()' → logprob: -10.125704765319824
    6. '(x' → logprob: -10.250704765319824
    7. 'sys' → logprob: -10.625704765319824
    8. ' in' → logprob: -10.875704765319824
    9. ' sys' → logprob: -11.500704765319824
    10. '(sys' → logprob: -11.750704765319824

Token 107: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.5666018128395081
    2. 'for' → logprob: -0.9416018128395081
    3. '(sys' → logprob: -3.6916017532348633
    4. 'sys' → logprob: -4.691601753234863
    5. ')' → logprob: -5.441601753234863
    6. ' sys' → logprob: -5.816601753234863
    7. '=sys' → logprob: -7.566601753234863
    8. '(x' → logprob: -8.691601753234863
    9. 'in' → logprob: -9.066601753234863
    10. '()' → logprob: -9.566601753234863

Token 108: ' x' (ID: 1215)
  Prédit: ' sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.5761586427688599
    2. 'sys' → logprob: -0.8261586427688599
    3. '=sys' → logprob: -9.20115852355957
    4. '(sys' → logprob: -9.45115852355957
    5. '	sys' → logprob: -10.70115852355957
    6. ' x' → logprob: -12.32615852355957
    7. 'input' → logprob: -12.57615852355957
    8. 'x' → logprob: -12.70115852355957
    9. ' ' → logprob: -13.07615852355957
    10. ' input' → logprob: -13.70115852355957

Token 109: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0015788980526849627
    2. 'in' → logprob: -6.5015788078308105
    3. ' sys' → logprob: -10.376579284667969
    4. 'sys' → logprob: -10.751579284667969
    5. '=sys' → logprob: -11.376579284667969
    6. '(sys' → logprob: -12.126579284667969
    7. ' ' → logprob: -12.626579284667969
    8. 'import' → logprob: -13.251579284667969
    9. '.' → logprob: -14.626579284667969
    10. 'input' → logprob: -14.751579284667969

Token 110: ' sys' (ID: 12228)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.008615872822701931
    2. ' sys' → logprob: -4.758615970611572
    3. '(sys' → logprob: -14.508615493774414
    4. '=sys' → logprob: -14.758615493774414
    5. 'input' → logprob: -15.383615493774414
    6. '	sys' → logprob: -15.633615493774414
    7. '.sys' → logprob: -18.258615493774414
    8. '   ' → logprob: -18.508615493774414
    9. ' ' → logprob: -18.633615493774414
    10. '
' → logprob: -18.883615493774414

Token 111: '.stdin' (ID: 93480)
  Prédit: '.stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdin' → logprob: -0.00042864278657361865
    2. '.stdout' → logprob: -8.125428199768066
    3. '.readline' → logprob: -9.500428199768066
    4. '.' → logprob: -10.625428199768066
    5. 'stdin' → logprob: -10.750428199768066
    6. '.argv' → logprob: -12.625428199768066
    7. '.std' → logprob: -12.750428199768066
    8. '(stdin' → logprob: -13.000428199768066
    9. 'sys' → logprob: -14.000428199768066
    10. '.sys' → logprob: -14.125428199768066

Token 112: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -3.128163257315464e-07
    2. '.' → logprob: -16.25
    3. '().' → logprob: -16.375
    4. '.readlines' → logprob: -16.75
    5. '.stdin' → logprob: -18.125
    6. '.read' → logprob: -18.25
    7. ' readline' → logprob: -18.625
    8. ' .' → logprob: -20.75
    9. '].' → logprob: -21.625
    10. ').' → logprob: -21.75

Token 113: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -1.0325924449716695e-05
    2. '()' → logprob: -11.50001049041748
    3. ' ().' → logprob: -15.87501049041748
    4. '.strip' → logprob: -18.500009536743164
    5. '(' → logprob: -19.125009536743164
    6. '())' → logprob: -19.625009536743164
    7. '()).' → logprob: -20.125009536743164
    8. '()]' → logprob: -20.375009536743164
    9. '()].' → logprob: -20.375009536743164
    10. '.split' → logprob: -21.000009536743164

Token 114: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.47662070393562317
    2. 'strip' → logprob: -0.9766206741333008
    3. 'rstrip' → logprob: -5.976620674133301
    4. ' split' → logprob: -13.3516206741333
    5. ' strip' → logprob: -13.7266206741333
    6. 'spl' → logprob: -15.2266206741333
    7. '(split' → logprob: -16.601621627807617
    8. 'read' → logprob: -16.851621627807617
    9. 'decode' → logprob: -18.601621627807617
    10. 'rs' → logprob: -19.101621627807617

Token 115: '()' (ID: 416)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -4.246537173457909e-06
    2. '()' → logprob: -12.500003814697266
    3. '())' → logprob: -14.875003814697266
    4. ']' → logprob: -16.000003814697266
    5. '()]
' → logprob: -17.250003814697266
    6. '(' → logprob: -18.000003814697266
    7. ')]' → logprob: -18.250003814697266
    8. ']()' → logprob: -18.375003814697266
    9. '()][' → logprob: -19.125003814697266
    10. '()],' → logprob: -19.625003814697266

Token 116: ']

' (ID: 3144)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.00035250463406555355
    2. ']' → logprob: -8.00035285949707
    3. ')]' → logprob: -11.25035285949707
    4. ']()' → logprob: -13.00035285949707
    5. '()' → logprob: -13.37535285949707
    6. '()]
' → logprob: -15.62535285949707
    7. '())' → logprob: -16.00035285949707
    8. '(' → logprob: -18.37535285949707
    9. ' ]' → logprob: -19.25035285949707
    10. '])' → logprob: -19.62535285949707

Token 117: 'n' (ID: 77)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.011339820921421051
    2. 'class' → logprob: -4.5113396644592285
    3. 'n' → logprob: -8.261340141296387
    4. '\' → logprob: -11.011340141296387
    5. '#' → logprob: -12.261340141296387
    6. 'N' → logprob: -12.261340141296387
    7. 'ndef' → logprob: -13.261340141296387
    8. '
' → logprob: -13.386340141296387
    9. 'd' → logprob: -13.511340141296387
    10. '```' → logprob: -14.511340141296387

Token 118: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.09880697727203369
    2. '=' → logprob: -2.848806858062744
    3. ',' → logprob: -3.723806858062744
    4. ' ' → logprob: -4.598806858062744
    5. '<|end|>' → logprob: -7.098806858062744
    6. '  ' → logprob: -8.223807334899902
    7. ')' → logprob: -8.223807334899902
    8. '.' → logprob: -8.473807334899902
    9. ' ,' → logprob: -8.848807334899902
    10. '>' → logprob: -10.223807334899902

Token 119: ' read' (ID: 1729)
  Prédit: 'read'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'read' → logprob: -0.16263164579868317
    2. ' read' → logprob: -1.912631630897522
    3. 'int' → logprob: -6.287631511688232
    4. ' int' → logprob: -7.537631511688232
    5. '10' → logprob: -12.28763198852539
    6. ' ' → logprob: -12.66263198852539
    7. '0' → logprob: -12.91263198852539
    8. '	read' → logprob: -14.53763198852539
    9. '(read' → logprob: -14.53763198852539
    10. '5' → logprob: -15.28763198852539

Token 120: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -7.896309739408025e-07
    2. '()' → logprob: -14.875000953674316
    3. 'list' → logprob: -15.250000953674316
    4. 't' → logprob: -16.375
    5. 'nt' → logprob: -16.75
    6. ')' → logprob: -17.625
    7. '())' → logprob: -18.375
    8. '(int' → logprob: -18.375
    9. '(' → logprob: -19.0
    10. 'i' → logprob: -19.5

Token 121: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -9.014684110297821e-06
    2. '()
' → logprob: -11.875008583068848
    3. '(' → logprob: -14.000008583068848
    4. '()

' → logprob: -15.000008583068848
    5. ' ()' → logprob: -15.125008583068848
    6. '()`' → logprob: -16.125009536743164
    7. '()]' → logprob: -16.250009536743164
    8. '()\' → logprob: -16.500009536743164
    9. '()>' → logprob: -17.125009536743164
    10. '()<' → logprob: -17.375009536743164

Token 122: 'if' (ID: 366)
  Prédit: 'arr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'arr' → logprob: -0.6466959118843079
    2. 'a' → logprob: -1.396695852279663
    3. 'A' → logprob: -3.021695852279663
    4. 'lst' → logprob: -3.271695852279663
    5. 'data' → logprob: -3.771695852279663
    6. 'graph' → logprob: -3.896695852279663
    7. 'dp' → logprob: -4.021696090698242
    8. 'points' → logprob: -4.146696090698242
    9. 'edges' → logprob: -4.646696090698242
    10. 'numbers' → logprob: -5.146696090698242

Token 123: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.0010424555512145162
    2. 'n' → logprob: -6.876042366027832
    3. ' ' → logprob: -12.001042366027832
    4. ' ' → logprob: -13.001042366027832
    5. ' not' → logprob: -13.751042366027832
    6. '	n' → logprob: -15.626042366027832
    7. '  ' → logprob: -17.50104331970215
    8. '_n' → logprob: -18.00104331970215
    9. '_' → logprob: -18.25104331970215
    10. 'not' → logprob: -18.25104331970215

Token 124: ' <' (ID: 464)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.7570563554763794
    2. ' ==' → logprob: -1.2570563554763794
    3. ' <' → logprob: -1.7570563554763794
    4. ' <=' → logprob: -3.25705623626709
    5. ' ' → logprob: -4.25705623626709
    6. '>' → logprob: -5.13205623626709
    7. '==' → logprob: -5.25705623626709
    8. ' >=' → logprob: -5.38205623626709
    9. ' %' → logprob: -5.75705623626709
    10. '<' → logprob: -7.00705623626709

Token 125: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.13309639692306519
    2. '2' → logprob: -3.13309645652771
    3. '=' → logprob: -3.25809645652771
    4. '3' → logprob: -3.88309645652771
    5. '0' → logprob: -4.383096218109131
    6. '1' → logprob: -5.883096218109131
    7. '10' → logprob: -6.008096218109131
    8. '5' → logprob: -7.008096218109131
    9. ' =' → logprob: -7.508096218109131
    10. '4' → logprob: -7.508096218109131

Token 126: '10' (ID: 702)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.1082499623298645
    2. '3' → logprob: -2.6082499027252197
    3. '10' → logprob: -4.233250141143799
    4. '0' → logprob: -5.483250141143799
    5. '5' → logprob: -5.983250141143799
    6. '4' → logprob: -6.233250141143799
    7. '20' → logprob: -6.608250141143799
    8. '1' → logprob: -6.608250141143799
    9. '100' → logprob: -6.733250141143799
    10. ' ' → logprob: -7.483250141143799

Token 127: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -8.923874702304602e-05
    2. ':
' → logprob: -9.500089645385742
    3. ' :' → logprob: -11.875089645385742
    4. '0' → logprob: -12.500089645385742
    5. '():' → logprob: -14.125089645385742
    6. ':return' → logprob: -14.125089645385742
    7. '):' → logprob: -14.750089645385742
    8. ':**' → logprob: -15.125089645385742
    9. '**' → logprob: -15.375089645385742
    10. '[' → logprob: -15.750089645385742

Token 128: ' ' (ID: 220)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.29959940910339355
    2. '\n' → logprob: -1.7995994091033936
    3. ' print' → logprob: -3.6745994091033936
    4. 'print' → logprob: -4.049599647521973
    5. ' 
' → logprob: -4.299599647521973
    6. '
' → logprob: -4.424599647521973
    7. '    
' → logprob: -4.799599647521973
    8. '	print' → logprob: -4.799599647521973
    9. ' ' → logprob: -6.299599647521973
    10. '  
' → logprob: -6.799599647521973

Token 129: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.25001323223114014
    2. '   ' → logprob: -1.6250132322311401
    3. ' print' → logprob: -3.7500133514404297
    4. '
' → logprob: -8.12501335144043
    5. '	print' → logprob: -8.75001335144043
    6. '    
' → logprob: -9.50001335144043
    7. '  ' → logprob: -9.87501335144043
    8. ' ' → logprob: -9.87501335144043
    9. '\n' → logprob: -10.25001335144043
    10. 'n' → logprob: -10.87501335144043

Token 130: ' cas' (ID: 2108)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.1211894080042839
    2. 'print' → logprob: -2.2461893558502197
    3. '   ' → logprob: -5.121189594268799
    4. ' ' → logprob: -6.496189594268799
    5. '    ' → logprob: -8.37118911743164
    6. '  ' → logprob: -8.37118911743164
    7. '
' → logprob: -9.24618911743164
    8. '	print' → logprob: -9.49618911743164
    9. ' 
' → logprob: -10.12118911743164
    10. ' for' → logprob: -10.49618911743164

Token 131: ' évident' (ID: 153030)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' d' → logprob: -1.4043149948120117
    2. ' simple' → logprob: -1.4043149948120117
    3. ' spécial' → logprob: -2.6543149948120117
    4. 'special' → logprob: -2.6543149948120117
    5. ' particulier' → logprob: -2.7793149948120117
    6. ' special' → logprob: -2.9043149948120117
    7. ' ' → logprob: -3.1543149948120117
    8. 'simple' → logprob: -3.4043149948120117
    9. ' de' → logprob: -3.6543149948120117
    10. ' trivial' → logprob: -3.6543149948120117

Token 132: '
' (ID: 198)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.10532581061124802
    2. '   ' → logprob: -2.480325698852539
    3. ' :' → logprob: -4.980325698852539
    4. ':
' → logprob: -5.105325698852539
    5. 'print' → logprob: -6.855325698852539
    6. ',' → logprob: -7.230325698852539
    7. ' :
' → logprob: -7.605325698852539
    8. ' print' → logprob: -8.230325698852539
    9. '    ' → logprob: -8.605325698852539
    10. ':return' → logprob: -8.855325698852539

Token 133: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08225028961896896
    2. 'print' → logprob: -3.3322503566741943
    3. ' print' → logprob: -3.9572503566741943
    4. '
' → logprob: -3.9572503566741943
    5. '	print' → logprob: -6.207250118255615
    6. '    
' → logprob: -6.332250118255615
    7. '\n' → logprob: -7.957250118255615
    8. ' 
' → logprob: -8.082250595092773
    9. '  
' → logprob: -9.082250595092773
    10. ' ' → logprob: -9.207250595092773

Token 134: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.6955384612083435
    2. ' print' → logprob: -0.6955384612083435
    3. '   ' → logprob: -6.195538520812988
    4. ' for' → logprob: -8.945538520812988
    5. 'for' → logprob: -9.820538520812988
    6. '    ' → logprob: -9.945538520812988
    7. '
' → logprob: -10.445538520812988
    8. ' ' → logprob: -10.820538520812988
    9. 'pr' → logprob: -11.320538520812988
    10. '	print' → logprob: -11.570538520812988

Token 135: '(' (ID: 7)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.008651564829051495
    2. '(' → logprob: -4.7586517333984375
    3. 'n' → logprob: -10.883651733398438
    4. '('' → logprob: -12.258651733398438
    5. ' (' → logprob: -12.383651733398438
    6. '(
' → logprob: -12.758651733398438
    7. '()' → logprob: -13.133651733398438
    8. '((' → logprob: -13.883651733398438
    9. '("' → logprob: -14.133651733398438
    10. '(s' → logprob: -14.133651733398438

Token 136: '0' (ID: 15)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.0006015266408212483
    2. '1' → logprob: -7.875601291656494
    3. ' n' → logprob: -9.500601768493652
    4. '0' → logprob: -10.125601768493652
    5. '10' → logprob: -10.375601768493652
    6. '9' → logprob: -10.500601768493652
    7. '(n' → logprob: -10.875601768493652
    8. '(' → logprob: -12.375601768493652
    9. ''n' → logprob: -12.500601768493652
    10. '"' → logprob: -12.500601768493652

Token 137: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0002694416616577655
    2. ')
' → logprob: -8.375269889831543
    3. ' )' → logprob: -10.250269889831543
    4. ')
' → logprob: -13.750269889831543
    5. '))' → logprob: -14.375269889831543
    6. '*' → logprob: -14.750269889831543
    7. '')' → logprob: -14.875269889831543
    8. ')

' → logprob: -15.875269889831543
    9. '
' → logprob: -16.250268936157227
    10. '**' → logprob: -16.375268936157227

Token 138: '   ' (ID: 271)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.24299030005931854
    2. '   ' → logprob: -1.617990255355835
    3. 'elif' → logprob: -4.867990493774414
    4. ' else' → logprob: -5.242990493774414
    5. '
' → logprob: -6.492990493774414
    6. '    
' → logprob: -6.492990493774414
    7. ')' → logprob: -7.492990493774414
    8. '\n' → logprob: -8.117990493774414
    9. 'n' → logprob: -9.492990493774414
    10. '  
' → logprob: -9.492990493774414

Token 139: ' exit' (ID: 10654)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.25443652272224426
    2. '   ' → logprob: -1.7544364929199219
    3. ' else' → logprob: -3.129436492919922
    4. 'elif' → logprob: -5.879436492919922
    5. ' exit' → logprob: -6.254436492919922
    6. 'exit' (adapté à ' exit') → logprob: -6.379436492919922
    7. '\n' → logprob: -7.504436492919922
    8. '    
' → logprob: -8.129436492919922
    9. '	exit' → logprob: -8.629436492919922
    10. '_exit' → logprob: -9.754436492919922

Token 140: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0009974405402317643
    2. '(' → logprob: -7.500997543334961
    3. '()
' → logprob: -7.750997543334961
    4. '0' → logprob: -11.625997543334961
    5. ' ()' → logprob: -13.000997543334961
    6. '()\' → logprob: -13.875997543334961
    7. '(
' → logprob: -14.125997543334961
    8. '()

' → logprob: -14.250997543334961
    9. '()`' → logprob: -15.625997543334961
    10. '())' → logprob: -16.50099754333496

Token 141: 'if' (ID: 366)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.4048820734024048
    2. 'dp' → logprob: -1.7798820734024048
    3. 'digits' → logprob: -2.2798819541931152
    4. 'ans' → logprob: -2.4048819541931152
    5. 'd' → logprob: -3.1548819541931152
    6. 's' → logprob: -3.4048819541931152
    7. 'count' → logprob: -3.4048819541931152
    8. '#' → logprob: -3.5298819541931152
    9. 'max' → logprob: -3.6548819541931152
    10. 'result' → logprob: -3.7798819541931152

Token 142: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.01807338185608387
    2. 'n' → logprob: -4.143073558807373
    3. ' (' → logprob: -7.018073558807373
    4. ' ' → logprob: -7.393073558807373
    5. ' __' → logprob: -8.268073081970215
    6. '__' → logprob: -10.143073081970215
    7. ' len' → logprob: -10.205573081970215
    8. '(n' → logprob: -10.455573081970215
    9. '(' → logprob: -10.768073081970215
    10. ' not' → logprob: -10.768073081970215

Token 143: '%' (ID: 4)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.29951077699661255
    2. ' ==' → logprob: -2.6745107173919678
    3. ' >=' → logprob: -2.9245107173919678
    4. '<' → logprob: -3.0495107173919678
    5. ' %' → logprob: -3.5495107173919678
    6. '%' → logprob: -3.7995107173919678
    7. ' <=' → logprob: -4.174510955810547
    8. '==' → logprob: -4.299510955810547
    9. '>=' → logprob: -5.674510955810547
    10. ' >' → logprob: -6.049510955810547

Token 144: '2' (ID: 17)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.18432480096817017
    2. '2' → logprob: -2.1843247413635254
    3. '9' → logprob: -3.1843247413635254
    4. '3' → logprob: -4.809324741363525
    5. '5' → logprob: -5.809324741363525
    6. ' ' → logprob: -6.809324741363525
    7. '100' → logprob: -7.559324741363525
    8. '4' → logprob: -7.684324741363525
    9. '6' → logprob: -8.559325218200684
    10. '7' → logprob: -8.809325218200684

Token 145: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.2651647627353668
    2. ' ==' → logprob: -1.5151647329330444
    3. '!=' → logprob: -4.890164852142334
    4. ' !=' → logprob: -5.390164852142334
    5. ':' → logprob: -7.265164852142334
    6. ' :' → logprob: -8.890164375305176
    7. '0' → logprob: -9.015164375305176
    8. '=' → logprob: -9.390164375305176
    9. ' ' → logprob: -12.140164375305176
    10. ' =' → logprob: -12.640164375305176

Token 146: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.44591620564460754
    2. '0' → logprob: -1.0709161758422852
    3. '1' → logprob: -4.070916175842285
    4. '=' → logprob: -13.570916175842285
    5. ':' → logprob: -13.820916175842285
    6. '==' → logprob: -13.820916175842285
    7. ' ==' → logprob: -14.133416175842285
    8. '  ' → logprob: -14.883416175842285
    9. ' =' → logprob: -15.008416175842285
    10. ' ' → logprob: -15.070916175842285

Token 147: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.006133553106337786
    2. '1' → logprob: -5.131133556365967
    3. ' ' → logprob: -8.506133079528809
    4. '=' → logprob: -13.756133079528809
    5. '2' → logprob: -14.381133079528809
    6. '==' → logprob: -15.006133079528809
    7. '!' → logprob: -15.881133079528809
    8. ':' → logprob: -16.256134033203125
    9. '```' → logprob: -16.256134033203125
    10. ')' → logprob: -16.568634033203125

Token 148: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0016237606760114431
    2. ' :' → logprob: -6.501623630523682
    3. ':
' → logprob: -9.12662410736084
    4. ' ==' → logprob: -12.50162410736084
    5. ' and' → logprob: -13.00162410736084
    6. '):' → logprob: -13.12662410736084
    7. ' or' → logprob: -13.62662410736084
    8. ' :
' → logprob: -14.12662410736084
    9. '==' → logprob: -14.25162410736084
    10. '=' → logprob: -14.25162410736084

Token 149: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00755350524559617
    2. ' print' → logprob: -6.007553577423096
    3. 'print' → logprob: -6.382553577423096
    4. ':' → logprob: -6.632553577423096
    5. '
' → logprob: -6.632553577423096
    6. ':
' → logprob: -7.882553577423096
    7. ' ' → logprob: -9.257553100585938
    8. ' :' → logprob: -10.382553100585938
    9. '    
' → logprob: -10.507553100585938
    10. ')' → logprob: -10.632553100585938

Token 150: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.3358449339866638
    2. 'print' (adapté à ' print') → logprob: -1.4608449935913086
    3. '   ' → logprob: -2.9608449935913086
    4. 'n' → logprob: -7.710844993591309
    5. ' ' → logprob: -8.460844993591309
    6. '0' → logprob: -8.585844993591309
    7. ' n' → logprob: -8.585844993591309
    8. '	print' → logprob: -9.648344993591309
    9. '    ' → logprob: -10.335844993591309
    10. '  ' → logprob: -10.335844993591309

Token 151: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.013219872489571571
    2. '0' → logprob: -4.513219833374023
    3. '()' → logprob: -7.513219833374023
    4. ' (' → logprob: -7.638219833374023
    5. '('' → logprob: -8.013219833374023
    6. '((' → logprob: -8.138219833374023
    7. '(n' → logprob: -8.388219833374023
    8. '("' → logprob: -9.263219833374023
    9. '(-' → logprob: -9.513219833374023
    10. ' ' → logprob: -9.638219833374023

Token 152: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00632548937574029
    2. '1' → logprob: -6.506325721740723
    3. 'n' → logprob: -6.881325721740723
    4. '(' → logprob: -7.131325721740723
    5. ' ' → logprob: -7.256325721740723
    6. '9' → logprob: -7.256325721740723
    7. '(n' → logprob: -7.256325721740723
    8. '-' → logprob: -7.506325721740723
    9. ')' → logprob: -9.631325721740723
    10. '"' → logprob: -10.256325721740723

Token 153: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0006288022268563509
    2. ')
' → logprob: -7.37562894821167
    3. ' )' → logprob: -14.250628471374512
    4. ')
' → logprob: -14.500628471374512
    5. '   ' → logprob: -14.625628471374512
    6. '*' → logprob: -15.250628471374512
    7. ')return' → logprob: -15.375628471374512
    8. '()' → logprob: -17.125629425048828
    9. '')' → logprob: -17.250629425048828
    10. ')

' → logprob: -17.500629425048828

Token 154: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06086825951933861
    2. 'else' → logprob: -3.685868263244629
    3. ')' → logprob: -3.810868263244629
    4. '
' → logprob: -5.060868263244629
    5. 'elif' → logprob: -6.560868263244629
    6. '<|end|>' → logprob: -6.560868263244629
    7. '    
' → logprob: -6.935868263244629
    8. 'exit' → logprob: -8.435868263244629
    9. ' else' → logprob: -8.435868263244629
    10. '  
' → logprob: -8.435868263244629

Token 155: ' sys' (ID: 12228)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4747842252254486
    2. 'exit' → logprob: -0.974784255027771
    3. '	exit' → logprob: -7.5997843742370605
    4. ' exit' → logprob: -9.099783897399902
    5. 'else' → logprob: -10.224783897399902
    6. '.exit' → logprob: -11.224783897399902
    7. '_exit' → logprob: -11.349783897399902
    8. 'import' → logprob: -11.474783897399902
    9. '\n' → logprob: -12.599783897399902
    10. '(exit' → logprob: -12.724783897399902

Token 156: '.exit' (ID: 27076)
  Prédit: '.exit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.exit' → logprob: -9.233804303221405e-05
    2. 'exit' → logprob: -9.500092506408691
    3. '.stdout' → logprob: -11.875092506408691
    4. '	exit' → logprob: -12.500092506408691
    5. '.' → logprob: -12.750092506408691
    6. '_exit' → logprob: -13.125092506408691
    7. 'Exit' → logprob: -14.875092506408691
    8. '.stderr' → logprob: -15.125092506408691
    9. '.Exit' → logprob: -15.375092506408691
    10. '.ex' → logprob: -15.375092506408691

Token 157: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0007357738213613629
    2. '(' → logprob: -7.250735759735107
    3. '()
' → logprob: -11.250736236572266
    4. '()`' → logprob: -12.750736236572266
    5. ' ()' → logprob: -12.875736236572266
    6. '()

' → logprob: -13.875736236572266
    7. '()]' → logprob: -14.000736236572266
    8. '_' → logprob: -14.125736236572266
    9. '()\' → logprob: -14.125736236572266
    10. '();' → logprob: -14.500736236572266

Token 158: ' ' (ID: 220)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7540997266769409
    2. 'n' → logprob: -1.254099726676941
    3. 'even' → logprob: -2.8790998458862305
    4. 'if' → logprob: -3.1290998458862305
    5. 'def' → logprob: -4.0040998458862305
    6. '0' → logprob: -4.0040998458862305
    7. '#' → logprob: -4.3790998458862305
    8. '\n' → logprob: -4.3790998458862305
    9. 's' → logprob: -4.6290998458862305
    10. ' 
' → logprob: -4.8790998458862305

Token 159: ' #' (ID: 1069)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.4056546688079834
    2. 'n' → logprob: -1.4056546688079834
    3. '
' → logprob: -2.0306546688079834
    4. 'if' → logprob: -2.9056546688079834
    5. 'def' → logprob: -3.0306546688079834
    6. 'even' → logprob: -3.0306546688079834
    7. 'else' → logprob: -3.6556546688079834
    8. 's' → logprob: -3.7806546688079834
    9. 'count' → logprob: -3.9056546688079834
    10. '2' → logprob: -3.9056546688079834

Token 160: ' oui' (ID: 50908)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.8375309109687805
    2. 'even' → logprob: -1.4625308513641357
    3. 'n' → logprob: -2.0875308513641357
    4. 'else' → logprob: -3.5875308513641357
    5. 'rest' → logprob: -4.462531089782715
    6. 'start' → logprob: -4.462531089782715
    7. 'if' → logprob: -4.462531089782715
    8. 'count' → logprob: -4.837531089782715
    9. 'half' → logprob: -4.962531089782715
    10. '0' → logprob: -4.962531089782715

Token 161: ' j' (ID: 441)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 162: ''util' (ID: 37761)
  Prédit: ''ai'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''ai' → logprob: -0.8146767020225525
    2. 'exit' → logprob: -1.9396767616271973
    3. ''aime' → logprob: -2.6896767616271973
    4. 'n' → logprob: -2.6896767616271973
    5. 'gnore' → logprob: -3.3146767616271973
    6. ''adore' → logprob: -3.6896767616271973
    7. 'am' → logprob: -3.8146767616271973
    8. ''espère' → logprob: -3.9396767616271973
    9. 'continue' → logprob: -4.189676761627197
    10. ''avais' → logprob: -4.439676761627197

Token 163: 'ise' (ID: 1096)
  Prédit: 'se'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'se' → logprob: -0.06970242410898209
    2. 'ser' → logprob: -2.944702386856079
    3. 'ze' → logprob: -4.694702625274658
    4. '```' → logprob: -6.694702625274658
    5. 's' → logprob: -7.069702625274658
    6. '()' → logprob: -7.694702625274658
    7. 'e' → logprob: -7.694702625274658
    8. 'f' → logprob: -7.694702625274658
    9. 'ses' → logprob: -8.3197021484375
    10. '(' → logprob: -8.4447021484375

Token 164: ' exit' (ID: 10654)
  Prédit: 'exit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'exit' → logprob: -0.11073586344718933
    2. 'sys' → logprob: -2.4857358932495117
    3. 'import' → logprob: -3.9857358932495117
    4. ' exit' → logprob: -6.360735893249512
    5. 'os' → logprob: -8.235735893249512
    6. 'print' → logprob: -8.235735893249512
    7. ' sys' → logprob: -8.360735893249512
    8. ' ' → logprob: -9.610735893249512
    9. 'l' → logprob: -9.860735893249512
    10. '(sys' → logprob: -9.860735893249512

Token 165: ' et' (ID: 859)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7484086155891418
    2. '\n' → logprob: -0.8734086155891418
    3. 'n' → logprob: -3.748408555984497
    4. '()' → logprob: -4.373408794403076
    5. '(' → logprob: -4.748408794403076
    6. '0' → logprob: -4.873408794403076
    7. '

' → logprob: -4.998408794403076
    8. '(n' → logprob: -4.998408794403076
    9. '  
' → logprob: -5.248408794403076
    10. '(
' → logprob: -5.373408794403076

Token 166: ' sys' (ID: 12228)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.0037648091092705727
    2. 'import' → logprob: -6.878764629364014
    3. 'quit' → logprob: -6.878764629364014
    4. 'exit' → logprob: -7.003764629364014
    5. ' sys' → logprob: -8.128765106201172
    6. '0' → logprob: -8.503765106201172
    7. 'return' → logprob: -10.003765106201172
    8. 'print' → logprob: -10.253765106201172
    9. 'os' → logprob: -10.503765106201172
    10. 'raise' → logprob: -10.628765106201172

Token 167: '.exit' (ID: 27076)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.053300872445106506
    2. '()
' → logprob: -3.8033008575439453
    3. '(' → logprob: -4.303300857543945
    4. '()

' → logprob: -5.428300857543945
    5. '0' → logprob: -5.678300857543945
    6. '()\' → logprob: -6.678300857543945
    7. 'else' → logprob: -7.053300857543945
    8. '(
' → logprob: -7.053300857543945
    9. '.exit' → logprob: -7.053300857543945
    10. 'exit' → logprob: -7.178300857543945

Token 168: ' dans' (ID: 2671)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.6087889671325684
    2. '(' → logprob: -1.4837889671325684
    3. '\n' → logprob: -2.6087889671325684
    4. 'n' → logprob: -3.7337889671325684
    5. '(
' → logprob: -3.8587889671325684
    6. '(n' → logprob: -3.8587889671325684
    7. 'if' → logprob: -4.108788967132568
    8. ')' → logprob: -4.358788967132568
    9. 'else' → logprob: -4.358788967132568
    10. '
' → logprob: -4.858788967132568

Token 169: ' le' (ID: 505)
  Prédit: 'diff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'diff' → logprob: -0.18443988263607025
    2. 'different' → logprob: -2.3094398975372314
    3. ' des' → logprob: -3.9344398975372314
    4. 'le' → logprob: -4.559439659118652
    5. 'des' → logprob: -4.809439659118652
    6. ' different' → logprob: -5.559439659118652
    7. '2' → logprob: -5.809439659118652
    8. ' diff' → logprob: -5.809439659118652
    9. 'les' → logprob: -6.184439659118652
    10. 'la' → logprob: -6.184439659118652

Token 170: ' même' (ID: 9679)
  Prédit: ' même'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' même' → logprob: -0.5385112166404724
    2. 'm' → logprob: -1.9135112762451172
    3. ' code' → logprob: -1.9135112762451172
    4. 'code' → logprob: -2.288511276245117
    5. 'same' → logprob: -4.913511276245117
    6. 'even' → logprob: -5.288511276245117
    7. ' same' → logprob: -6.163511276245117
    8. ' meme' → logprob: -6.413511276245117
    9. ' even' → logprob: -6.913511276245117
    10. 's' → logprob: -7.913511276245117

Token 171: ' fichier' (ID: 69637)
  Prédit: ' code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' code' → logprob: -0.8169861435890198
    2. '()' → logprob: -1.316986083984375
    3. 'code' → logprob: -1.941986083984375
    4. '()
' → logprob: -2.316986083984375
    5. '(' → logprob: -4.441986083984375
    6. '```' → logprob: -4.441986083984375
    7. '(
' → logprob: -4.691986083984375
    8. '
' → logprob: -5.691986083984375
    9. '_code' → logprob: -5.691986083984375
    10. ' line' → logprob: -6.941986083984375

Token 172: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.45282047986984253
    2. '\n' → logprob: -1.8278205394744873
    3. 'n' → logprob: -2.2028205394744873
    4. '

' → logprob: -3.8278205394744873
    5. ' 
' → logprob: -4.577820301055908
    6. '0' → logprob: -4.952820301055908
    7. '#' → logprob: -5.202820301055908
    8. 'def' → logprob: -5.202820301055908
    9. 'else' → logprob: -5.202820301055908
    10. '  
' → logprob: -5.202820301055908

Token 173: 'else' (ID: 2807)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'count' → logprob: -1.0071346759796143
    2. 'even' → logprob: -2.0071346759796143
    3. 'n' → logprob: -2.3821346759796143
    4. '#' → logprob: -2.6321346759796143
    5. 'else' → logprob: -3.2571346759796143
    6. 'cnt' → logprob: -3.2571346759796143
    7. 'half' → logprob: -3.5071346759796143
    8. 'result' → logprob: -3.7571346759796143
    9. 'res' → logprob: -3.8821346759796143
    10. 'def' → logprob: -3.8821346759796143

Token 174: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -3.392824874026701e-05
    2. ':
' → logprob: -10.50003433227539
    3. ' :' → logprob: -12.00003433227539
    4. ':

' → logprob: -16.37503433227539
    5. ':def' → logprob: -18.00003433227539
    6. ':
' → logprob: -18.37503433227539
    7. ',' → logprob: -18.87503433227539
    8. '{' → logprob: -19.37503433227539
    9. '   ' → logprob: -19.37503433227539
    10. ':block' → logprob: -19.50003433227539

Token 175: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0005673298146575689
    2. ' n' → logprob: -9.250567436218262
    3. '    
' → logprob: -9.375567436218262
    4. 'n' → logprob: -9.875567436218262
    5. '    ' → logprob: -10.000567436218262
    6. ':' → logprob: -10.000567436218262
    7. 'def' → logprob: -10.250567436218262
    8. '   ' → logprob: -10.500567436218262
    9. ' ' → logprob: -10.875567436218262
    10. '  ' → logprob: -11.625567436218262

Token 176: ' answer' (ID: 6052)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.37176668643951416
    2. '   ' → logprob: -3.6217665672302246
    3. 'cnt' → logprob: -3.6217665672302246
    4. 'half' → logprob: -3.6217665672302246
    5. 'count' → logprob: -3.7467665672302246
    6. 'res' → logprob: -4.121766567230225
    7. 'a' → logprob: -4.246766567230225
    8. 'pairs' → logprob: -4.371766567230225
    9. 'arr' → logprob: -4.496766567230225
    10. 'max' → logprob: -4.496766567230225

Token 177: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.14268207550048828
    2. '=' → logprob: -2.0176820755004883
    3. ' ' → logprob: -13.267682075500488
    4. '   ' → logprob: -13.892682075500488
    5. ' ' → logprob: -14.142682075500488
    6. '=int' → logprob: -14.267682075500488
    7. 's' → logprob: -14.392682075500488
    8. ',' → logprob: -14.517682075500488
    9. ':' → logprob: -14.642682075500488
    10. ' +=' → logprob: -15.392682075500488

Token 178: ' n' (ID: 297)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.10958395898342133
    2. ' ' → logprob: -2.359583854675293
    3. ' n' → logprob: -5.734583854675293
    4. '1' → logprob: -5.984583854675293
    5. 'n' → logprob: -6.234583854675293
    6. ' (' → logprob: -8.234583854675293
    7. '(' → logprob: -8.359583854675293
    8. '(n' → logprob: -8.484583854675293
    9. '[]' → logprob: -8.734583854675293
    10. '[n' → logprob: -8.984583854675293

Token 179: '//' (ID: 393)
  Prédit: '//'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '//' → logprob: -0.5281714200973511
    2. ' //' → logprob: -1.153171420097351
    3. '   ' → logprob: -2.9031715393066406
    4. '-' → logprob: -3.4031715393066406
    5. ' ' → logprob: -6.403171539306641
    6. ' -' → logprob: -6.653171539306641
    7. '>>' → logprob: -6.653171539306641
    8. '#' → logprob: -7.528171539306641
    9. '
' → logprob: -7.778171539306641
    10. '  ' → logprob: -8.40317153930664

Token 180: '10' (ID: 702)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0025776787661015987
    2. '10' → logprob: -6.377577781677246
    3. '4' → logprob: -7.252577781677246
    4. '6' → logprob: -9.127577781677246
    5. '26' → logprob: -10.252577781677246
    6. ' ' → logprob: -12.002577781677246
    7. '20' → logprob: -12.252577781677246
    8. '8' → logprob: -13.127577781677246
    9. '202' → logprob: -13.377577781677246
    10. '3' → logprob: -13.627577781677246

Token 181: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.29459965229034424
    2. '
' → logprob: -1.9195996522903442
    3. '+' → logprob: -3.6695995330810547
    4. 'print' → logprob: -3.6695995330810547
    5. '*' → logprob: -4.169599533081055
    6. '-' → logprob: -4.294599533081055
    7. '<|end|>' → logprob: -5.294599533081055
    8. ' +' → logprob: -5.669599533081055
    9. ')' → logprob: -5.919599533081055
    10. ' -' → logprob: -6.169599533081055

Token 182: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13449998199939728
    2. 'print' → logprob: -2.134500026702881
    3. '
' → logprob: -5.259500026702881
    4. ' print' → logprob: -6.884500026702881
    5. ')' → logprob: -8.259499549865723
    6. '+' → logprob: -8.634499549865723
    7. '-' → logprob: -9.009499549865723
    8. '*' → logprob: -9.009499549865723
    9. '    
' → logprob: -9.259499549865723
    10. '%' → logprob: -9.259499549865723

Token 183: ' t' (ID: 260)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.07311044633388519
    2. 'answer' → logprob: -3.198110342025757
    3. 'if' → logprob: -3.823110342025757
    4. '   ' → logprob: -6.073110580444336
    5. 'for' → logprob: -6.198110580444336
    6. ' print' → logprob: -6.448110580444336
    7. 'while' → logprob: -7.073110580444336
    8. ' if' → logprob: -8.323110580444336
    9. ' answer' → logprob: -8.823110580444336
    10. 'n' → logprob: -9.323110580444336

Token 184: ' =' (ID: 314)
  Prédit: 'emp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'emp' → logprob: -0.49344122409820557
    2. 'mp' → logprob: -2.368441104888916
    3. ' =' → logprob: -2.743441104888916
    4. 'ens' → logprob: -2.993441104888916
    5. 'r' → logprob: -3.618441104888916
    6. '=' → logprob: -3.618441104888916
    7. 'en' → logprob: -3.868441104888916
    8. 'otal' → logprob: -4.118441104888916
    9. 'est' → logprob: -4.493441104888916
    10. 'o' → logprob: -4.868441104888916

Token 185: ' ' (ID: 220)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.17225268483161926
    2. 'answer' → logprob: -2.547252655029297
    3. '10' → logprob: -4.047252655029297
    4. '(n' → logprob: -4.422252655029297
    5. ' n' → logprob: -4.672252655029297
    6. '(' → logprob: -4.672252655029297
    7. '1' → logprob: -4.922252655029297
    8. '0' → logprob: -4.922252655029297
    9. '2' → logprob: -5.047252655029297
    10. '5' → logprob: -6.547252655029297

Token 186: '10' (ID: 702)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.328984797000885
    2. 'answer' → logprob: -1.9539847373962402
    3. '10' → logprob: -3.2039847373962402
    4. '(n' → logprob: -3.5789847373962402
    5. '(' → logprob: -3.8289847373962402
    6. '2' → logprob: -4.07898473739624
    7. '1' → logprob: -5.20398473739624
    8. '5' → logprob: -5.32898473739624
    9. '0' → logprob: -5.57898473739624
    10. '20' → logprob: -5.70398473739624

Token 187: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3473702669143677
    2. '**' → logprob: -2.097370147705078
    3. '*' → logprob: -2.972370147705078
    4. '0' → logprob: -3.347370147705078
    5. ':' → logprob: -3.972370147705078
    6. 'while' → logprob: -4.097370147705078
    7. ' ' → logprob: -4.972370147705078
    8. ' 
' → logprob: -5.097370147705078
    9. '#' → logprob: -5.347370147705078
    10. ')' → logprob: -5.597370147705078

Token 188: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.24174004793167114
    2. 'while' → logprob: -1.8667399883270264
    3. ' while' → logprob: -2.8667399883270264
    4. '	while' → logprob: -6.1167402267456055
    5. '  ' → logprob: -8.241740226745605
    6. ' ' → logprob: -8.616740226745605
    7. '    ' → logprob: -8.866740226745605
    8. '<|end|>' → logprob: -9.241740226745605
    9. '    
' → logprob: -9.616740226745605
    10. ',' → logprob: -9.741740226745605

Token 189: ' while' (ID: 2049)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' (adapté à ' while') → logprob: -0.003222749102860689
    2. ' while' → logprob: -5.753222942352295
    3. 'for' → logprob: -10.878222465515137
    4. 'answer' → logprob: -11.628222465515137
    5. 't' → logprob: -12.003222465515137
    6. '
' → logprob: -12.753222465515137
    7. '*' → logprob: -13.128222465515137
    8. '   ' → logprob: -13.128222465515137
    9. 'While' → logprob: -14.503222465515137
    10. 'wh' → logprob: -14.628222465515137

Token 190: ' n' (ID: 297)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.0037547098472714424
    2. ' t' → logprob: -5.628754615783691
    3. 'n' → logprob: -9.753754615783691
    4. 'answer' → logprob: -10.253754615783691
    5. '   ' → logprob: -10.503754615783691
    6. '(t' → logprob: -10.753754615783691
    7. 'True' → logprob: -12.253754615783691
    8. '10' → logprob: -12.878754615783691
    9. '2' → logprob: -13.253754615783691
    10. ' n' → logprob: -14.503754615783691

Token 191: '//' (ID: 393)
  Prédit: ' >='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.6412307024002075
    2. '>=' → logprob: -0.7662307024002075
    3. '%' → logprob: -5.516230583190918
    4. '//' → logprob: -6.391230583190918
    5. ' //' → logprob: -6.766230583190918
    6. ' %' → logprob: -7.016230583190918
    7. '>' → logprob: -7.516230583190918
    8. ' >' → logprob: -9.016230583190918
    9. ' ' → logprob: -9.516230583190918
    10. '   ' → logprob: -10.141230583190918

Token 192: 't' (ID: 83)
  Prédit: 't'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.07956664264202118
    2. '(t' → logprob: -2.829566717147827
    3. '(' → logprob: -4.079566478729248
    4. '10' → logprob: -7.829566478729248
    5. '20' → logprob: -9.829566955566406
    6. ' t' → logprob: -10.204566955566406
    7. ' (' → logprob: -11.204566955566406
    8. '   ' → logprob: -11.329566955566406
    9. '100' → logprob: -11.579566955566406
    10. ' ' → logprob: -13.829566955566406

Token 193: ' >' (ID: 1424)
  Prédit: '>='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>=' → logprob: -0.10243497788906097
    2. ' >=' → logprob: -2.7274348735809326
    3. '>' → logprob: -3.4774348735809326
    4. ' >' → logprob: -6.852435111999512
    5. ':' → logprob: -11.227435111999512
    6. '   ' → logprob: -12.352435111999512
    7. '≥' → logprob: -12.477435111999512
    8. 'and' → logprob: -12.727435111999512
    9. ')>=' → logprob: -13.102435111999512
    10. ' and' → logprob: -13.477435111999512

Token 194: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.23880210518836975
    2. '9' → logprob: -1.6138020753860474
    3. '1' → logprob: -4.738801956176758
    4. ' ' → logprob: -6.363801956176758
    5. 'answer' → logprob: -6.988801956176758
    6. '99' → logprob: -7.113801956176758
    7. 't' → logprob: -7.613801956176758
    8. '   ' → logprob: -8.113801956176758
    9. '10' → logprob: -8.738801956176758
    10. '  ' → logprob: -10.738801956176758

Token 195: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.03668639063835144
    2. '9' → logprob: -3.411686420440674
    3. '1' → logprob: -6.286686420440674
    4. ' ' → logprob: -7.036686420440674
    5. '   ' → logprob: -9.411685943603516
    6. '99' → logprob: -9.411685943603516
    7. 'answer' → logprob: -9.911685943603516
    8. '10' → logprob: -10.286685943603516
    9. '  ' → logprob: -10.911685943603516
    10. '=' → logprob: -11.911685943603516

Token 196: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5628897547721863
    2. ' and' → logprob: -1.437889814376831
    3. ':
' → logprob: -1.687889814376831
    4. 'and' → logprob: -5.437889575958252
    5. '   ' → logprob: -6.562889575958252
    6. ' :
' → logprob: -6.562889575958252
    7. ' :' → logprob: -7.062889575958252
    8. ' ' → logprob: -10.81289005279541
    9. '       ' → logprob: -11.18789005279541
    10. '	and' → logprob: -11.81289005279541

Token 197: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.003447899129241705
    2. '   ' → logprob: -5.878448009490967
    3. '<|end|>' → logprob: -8.003447532653809
    4. '    ' → logprob: -9.878447532653809
    5. ' t' → logprob: -9.878447532653809
    6. ' ' → logprob: -10.128447532653809
    7. '        
' → logprob: -10.378447532653809
    8. '<|end|>' → logprob: -10.628447532653809
    9. 't' → logprob: -11.128447532653809
    10. '    
' → logprob: -11.253447532653809

Token 198: ' t' (ID: 260)
  Prédit: 'answer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'answer' → logprob: -0.5096324682235718
    2. 't' (adapté à ' t') → logprob: -1.8846324682235718
    3. '       ' → logprob: -2.0096325874328613
    4. ' answer' → logprob: -2.8846325874328613
    5. '   ' → logprob: -3.6346325874328613
    6. ' t' → logprob: -4.384632587432861
    7. 'if' → logprob: -4.384632587432861
    8. ' if' → logprob: -6.134632587432861
    9. 'count' → logprob: -6.634632587432861
    10. '	answer' → logprob: -7.134632587432861

Token 199: ' =' (ID: 314)
  Prédit: '*='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '*=' → logprob: -0.005272891838103533
    2. ' *=' → logprob: -5.25527286529541
    3. ' <<=' → logprob: -11.00527286529541
    4. '=' → logprob: -11.00527286529541
    5. '   ' → logprob: -13.00527286529541
    6. '```' → logprob: -13.38027286529541
    7. '<<' → logprob: -14.38027286529541
    8. '//=' → logprob: -14.63027286529541
    9. ' ' → logprob: -14.88027286529541
    10. '*' → logprob: -15.13027286529541

Token 200: ' t' (ID: 260)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.004928223788738251
    2. ' t' → logprob: -5.379928112030029
    3. '10' → logprob: -8.254928588867188
    4. '   ' → logprob: -10.754928588867188
    5. ' ' → logprob: -11.504928588867188
    6. '	t' → logprob: -11.754928588867188
    7. '20' → logprob: -12.504928588867188
    8. '  ' → logprob: -13.629928588867188
    9. '(t' → logprob: -14.004928588867188
    10. '`t' → logprob: -14.254928588867188

Token 201: '*' (ID: 9)
  Prédit: '*'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.0007121934904716909
    2. ' *' → logprob: -7.2507123947143555
    3. '*t' → logprob: -14.000712394714355
    4. '10' → logprob: -14.875712394714355
    5. '*=' → logprob: -15.000712394714355
    6. '**' → logprob: -15.750712394714355
    7. '*object' → logprob: -16.00071144104004
    8. ' ' → logprob: -16.37571144104004
    9. '0' → logprob: -16.50071144104004
    10. '*p' → logprob: -16.87571144104004

Token 202: '5' (ID: 20)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.004323541186749935
    2. '5' → logprob: -5.504323482513428
    3. '2' → logprob: -8.879323959350586
    4. '1' → logprob: -9.629323959350586
    5. '100' → logprob: -11.004323959350586
    6. ' ' → logprob: -11.754323959350586
    7. '20' → logprob: -12.004323959350586
    8. '   ' → logprob: -13.004323959350586
    9. '50' → logprob: -13.379323959350586
    10. '11' → logprob: -13.754323959350586

Token 203: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.03371923789381981
    2. '   ' → logprob: -3.533719301223755
    3. '
' → logprob: -6.533719062805176
    4. 'print' → logprob: -7.158719062805176
    5. '<|end|>' → logprob: -7.283719062805176
    6. ',' → logprob: -8.408719062805176
    7. 'answer' → logprob: -9.158719062805176
    8. ' ' → logprob: -9.283719062805176
    9. 't' → logprob: -9.408719062805176
    10. '    ' → logprob: -9.658719062805176

Token 204: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.1430979073047638
    2. '   ' → logprob: -2.0180978775024414
    3. 'print' → logprob: -9.393097877502441
    4. 'answer' → logprob: -9.393097877502441
    5. ',' → logprob: -10.018097877502441
    6. '
' → logprob: -10.393097877502441
    7. ' answer' → logprob: -10.643097877502441
    8. ' ' → logprob: -10.643097877502441
    9. '    
' → logprob: -11.268097877502441
    10. '<|end|>' → logprob: -11.268097877502441

Token 205: ' answer' (ID: 6052)
  Prédit: 'answer'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'answer' (adapté à ' answer') → logprob: -0.01237708143889904
    2. '   ' → logprob: -4.8873772621154785
    3. '       ' → logprob: -5.7623772621154785
    4. ' answer' → logprob: -6.7623772621154785
    5. 'if' → logprob: -8.13737678527832
    6. '	answer' → logprob: -9.63737678527832
    7. 'n' → logprob: -10.26237678527832
    8. 't' → logprob: -11.01237678527832
    9. 'factor' → logprob: -11.63737678527832
    10. 'print' → logprob: -12.01237678527832

Token 206: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.009875076822936535
    2. ' +=' → logprob: -4.634875297546387
    3. '+=(' → logprob: -9.884875297546387
    4. '=' → logprob: -10.134875297546387
    5. '+' → logprob: -11.009875297546387
    6. '-=' → logprob: -11.509875297546387
    7. ' -=' → logprob: -15.134875297546387
    8. '*=' → logprob: -15.384875297546387
    9. '//=' → logprob: -15.384875297546387
    10. ']+=' → logprob: -15.509875297546387

Token 207: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.004598041996359825
    2. ' n' → logprob: -5.504598140716553
    3. '(n' → logprob: -7.629598140716553
    4. '   ' → logprob: -11.129597663879395
    5. ' (' → logprob: -11.629597663879395
    6. ' ' → logprob: -13.004597663879395
    7. '	n' → logprob: -13.004597663879395
    8. '1' → logprob: -13.254597663879395
    9. '(' → logprob: -13.379597663879395
    10. 'int' → logprob: -14.254597663879395

Token 208: '//' (ID: 393)
  Prédit: '//'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '//' → logprob: -0.00023178798437584192
    2. ' //' → logprob: -8.375231742858887
    3. '//=' → logprob: -14.375231742858887
    4. '#' → logprob: -15.000231742858887
    5. '```' → logprob: -15.625231742858887
    6. '/t' → logprob: -16.750232696533203
    7. ' ' → logprob: -17.125232696533203
    8. '//#' → logprob: -17.375232696533203
    9. 't' → logprob: -17.500232696533203
    10. '`t' → logprob: -17.875232696533203

Token 209: 't' (ID: 83)
  Prédit: 't'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -2.696889623621246e-06
    2. ' t' → logprob: -13.00000286102295
    3. '10' → logprob: -16.000001907348633
    4. '5' → logprob: -16.500001907348633
    5. '   ' → logprob: -16.875001907348633
    6. '<|end|>' → logprob: -18.000001907348633
    7. '`t' → logprob: -18.250001907348633
    8. '(t' → logprob: -18.375001907348633
    9. '  ' → logprob: -18.750001907348633
    10. '	t' → logprob: -19.000001907348633

Token 210: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.011699476279318333
    2. '
' → logprob: -4.511699676513672
    3. '   ' → logprob: -7.636699676513672
    4. ' print' → logprob: -9.511699676513672
    5. '    
' → logprob: -9.886699676513672
    6. '\n' → logprob: -11.261699676513672
    7. '  
' → logprob: -11.636699676513672
    8. ')
' → logprob: -11.886699676513672
    9. '```' → logprob: -12.636699676513672
    10. ')' → logprob: -12.761699676513672

Token 211: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00016420685278717428
    2. '   ' → logprob: -8.750164031982422
    3. ' print' → logprob: -12.125164031982422
    4. '    
' → logprob: -16.000164031982422
    5. '
' → logprob: -18.000164031982422
    6. '```' → logprob: -18.125164031982422
    7. '	print' → logprob: -18.250164031982422
    8. '#print' → logprob: -18.875164031982422
    9. '  
' → logprob: -19.625164031982422
    10. '.print' → logprob: -19.750164031982422

Token 212: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0031893588602542877
    2. '   ' → logprob: -5.753189563751221
    3. ' print' → logprob: -11.378189086914062
    4. '```' → logprob: -15.878189086914062
    5. '	print' → logprob: -17.378189086914062
    6. '    
' → logprob: -17.628189086914062
    7. ' ' → logprob: -18.878189086914062
    8. '
' → logprob: -19.378189086914062
    9. '       ' → logprob: -19.503189086914062
    10. '.print' → logprob: -19.753189086914062

Token 213: '(answer' (ID: 78433)
  Prédit: '(answer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(answer' → logprob: -2.5776860184123507e-06
    2. 'answer' → logprob: -13.75000286102295
    3. '(' → logprob: -14.00000286102295
    4. '(ans' → logprob: -14.50000286102295
    5. ' (' → logprob: -17.875001907348633
    6. '(question' → logprob: -18.750001907348633
    7. '()' → logprob: -19.125001907348633
    8. '(address' → logprob: -19.750001907348633
    9. '((' → logprob: -19.750001907348633
    10. '(a' → logprob: -20.000001907348633

Token 214: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.8624639324116288e-06
    2. ' )' → logprob: -13.375001907348633
    3. ')
' → logprob: -16.000001907348633
    4. '())' → logprob: -17.000001907348633
    5. '))' → logprob: -17.500001907348633
    6. '')' → logprob: -18.250001907348633
    7. ')`' → logprob: -18.250001907348633
    8. '*)' → logprob: -19.000001907348633
    9. '`)' → logprob: -19.125001907348633
    10. '()' → logprob: -19.375001907348633

Token 215: '#' (ID: 2)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 216: ' fin' (ID: 2131)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 217: '...' (ID: 1008)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 218: ' j' (ID: 441)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 219: ''espère' (ID: 116557)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 220: ' que' (ID: 661)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 221: ' c' (ID: 274)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 222: ''était' (ID: 40609)
  Prédit: ''est'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.29118505120277405
    2. 'est' → logprob: -2.416185140609741
    3. 'a' → logprob: -2.541185140609741
    4. ''était' → logprob: -3.416185140609741
    5. 'e' → logprob: -3.916185140609741
    6. ''a' → logprob: -4.041184902191162
    7. ''#' → logprob: -5.041184902191162
    8. ''' → logprob: -5.916184902191162
    9. '#' → logprob: -7.041184902191162
    10. ''''' → logprob: -7.166184902191162

Token 223: ' ça' (ID: 13590)
  Prédit: 'tout'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tout' → logprob: -0.030539676547050476
    2. 'correct' → logprob: -3.9055397510528564
    3. 'utile' → logprob: -6.530539512634277
    4. 'exact' → logprob: -6.530539512634277
    5. '#' → logprob: -6.655539512634277
    6. 'just' → logprob: -6.655539512634277
    7. 'clair' → logprob: -7.155539512634277
    8. 'cela' → logprob: -7.155539512634277
    9. 'bien' → logprob: -7.155539512634277
    10. 'bon' → logprob: -7.655539512634277

Token 224: ' l' (ID: 305)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 225: ''' (ID: 6)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.6801761388778687
    2. 'e' → logprob: -1.5551761388778687
    3. ''ess' → logprob: -2.555176258087158
    4. 'es' → logprob: -2.805176258087158
    5. ''ex' → logprob: -2.930176258087158
    6. ''' → logprob: -3.055176258087158
    7. ''idée' → logprob: -4.305176258087158
    8. ''histoire' → logprob: -5.180176258087158
    9. ''exp' → logprob: -6.055176258087158
    10. 'ess' → logprob: -6.430176258087158

Token 226: 'alg' (ID: 15258)
  Prédit: 'ex'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ex' → logprob: -0.09736908227205276
    2. ''ex' → logprob: -3.4723691940307617
    3. 'factor' → logprob: -4.597369194030762
    4. 'exercise' → logprob: -4.972369194030762
    5. 'exo' → logprob: -5.472369194030762
    6. 'end' → logprob: -5.847369194030762
    7. 'é' → logprob: -6.097369194030762
    8. 'nombre' → logprob: -6.097369194030762
    9. 'question' → logprob: -6.097369194030762
    10. 'exp' → logprob: -6.097369194030762

Token 227: 'orith' (ID: 9996)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 228: 'me' (ID: 1047)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 226
Tokens correctement prédits (1ère position, stricte): 76
Tokens correctement prédits (1ère position, avec adaptation): 81
Tokens correctement prédits (top 10): 164
Précision stricte (1ère position): 33.63%
Précision adaptée (1ère position): 35.84%
Précision (top 10): 72.57%
================================================================================
