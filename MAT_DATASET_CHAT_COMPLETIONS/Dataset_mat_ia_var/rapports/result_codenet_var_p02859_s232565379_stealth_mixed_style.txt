================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:38:02
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def carré(n): return n**2
class Calcul:
 pass
Calcul.valeur = (lambda: int(input()))()
def afficher_res(res):
    print(res)
afficher_res(carré(Calcul.valeur))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' carré' (ID: 191546)
  → Token d'amorce (pas de prédiction)

Token 2: '(n' (ID: 2406)
  → Token d'amorce (pas de prédiction)

Token 3: '):' (ID: 3127)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6935067176818848
    2. '):' → logprob: -0.6935067176818848
    3. 's' → logprob: -9.068506240844727
    4. 'e' → logprob: -9.318506240844727
    5. 'a' → logprob: -10.568506240844727
    6. '*' → logprob: -10.943506240844727
    7. ':' → logprob: -11.568506240844727
    8. ',' → logprob: -11.568506240844727
    9. 'é' → logprob: -11.818506240844727
    10. ')n' → logprob: -11.818506240844727

Token 4: ' return' (ID: 622)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4411994218826294
    2. '   ' → logprob: -1.9411994218826294
    3. ':' → logprob: -2.31619930267334
    4. ''' → logprob: -3.06619930267334
    5. ' ' → logprob: -3.81619930267334
    6. '**' → logprob: -4.69119930267334
    7. '"' → logprob: -5.06619930267334
    8. '```' → logprob: -5.31619930267334
    9. '_' → logprob: -5.44119930267334
    10. ' (' → logprob: -6.06619930267334

Token 5: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.1199522390961647
    2. 'n' → logprob: -2.4949522018432617
    3. ' ' → logprob: -3.4949522018432617
    4. ' ' → logprob: -9.494952201843262
    5. '(n' → logprob: -10.369952201843262
    6. 's' → logprob: -10.869952201843262
    7. ''' → logprob: -11.244952201843262
    8. '  ' → logprob: -11.369952201843262
    9. '"' → logprob: -11.744952201843262
    10. ' (' → logprob: -12.369952201843262

Token 6: '**' (ID: 410)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.754707396030426
    2. '**' → logprob: -0.754707396030426
    3. ' *' → logprob: -3.3797073364257812
    4. ' **' → logprob: -4.379707336425781
    5. '²' → logprob: -4.379707336425781
    6. ' ' → logprob: -8.879707336425781
    7. '[' → logprob: -9.004707336425781
    8. '+' → logprob: -9.629707336425781
    9. '*n' → logprob: -9.754707336425781
    10. '^' → logprob: -10.129707336425781

Token 7: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -1.4974866644479334e-05
    2. '²' → logprob: -11.250015258789062
    3. ' ' → logprob: -13.375015258789062
    4. '0' → logprob: -15.750015258789062
    5. '２' → logprob: -17.125015258789062
    6. '₂' → logprob: -17.375015258789062
    7. '٢' → logprob: -17.750015258789062
    8. '```' → logprob: -17.750015258789062
    9. ' ' → logprob: -18.000015258789062
    10. '۲' → logprob: -18.500015258789062

Token 8: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.012839115224778652
    2. '(
' → logprob: -5.262839317321777
    3. '\n' → logprob: -6.012839317321777
    4. '\' → logprob: -6.137839317321777
    5. ''' → logprob: -7.137839317321777
    6. '\(' → logprob: -7.262839317321777
    7. '
' → logprob: -7.387839317321777
    8. '()' → logprob: -9.387839317321777
    9. '```' → logprob: -9.512839317321777
    10. ' (' → logprob: -9.512839317321777

Token 9: 'class' (ID: 1444)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.013646948151290417
    2. '(
' → logprob: -4.763647079467773
    3. '
' → logprob: -6.763647079467773
    4. '\' → logprob: -7.013647079467773
    5. '\n' → logprob: -7.263647079467773
    6. '#' → logprob: -8.013647079467773
    7. ''' → logprob: -8.013647079467773
    8. '\(' → logprob: -8.263647079467773
    9. '```' → logprob: -8.513647079467773
    10. '*' → logprob: -8.763647079467773

Token 10: ' Calcul' (ID: 57243)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.002135152230039239
    2. ' ' → logprob: -7.752135276794434
    3. ' C' → logprob: -7.752135276794434
    4. ' My' → logprob: -8.502135276794434
    5. '_' → logprob: -8.752135276794434
    6. '`' → logprob: -9.127135276794434
    7. ' Car' → logprob: -9.252135276794434
    8. '  ' → logprob: -9.252135276794434
    9. ' Calculator' → logprob: -9.252135276794434
    10. ' Cube' → logprob: -9.377135276794434

Token 11: ':
' (ID: 734)
  Prédit: 'atrice'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'atrice' → logprob: -0.013615426607429981
    2. 'ateur' → logprob: -4.638615608215332
    3. 'ator' → logprob: -6.263615608215332
    4. 'ate' → logprob: -7.138615608215332
    5. '```' → logprob: -8.388615608215332
    6. 'atrix' → logprob: -8.388615608215332
    7. '(' → logprob: -8.638615608215332
    8. 'culator' → logprob: -9.513615608215332
    9. '():' → logprob: -9.763615608215332
    10. 'atrices' → logprob: -9.888615608215332

Token 12: ' pass' (ID: 1853)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.812178909778595
    2. '.' → logprob: -1.4371788501739502
    3. ':' → logprob: -2.31217885017395
    4. '   ' → logprob: -2.68717885017395
    5. '    ' → logprob: -2.81217885017395
    6. ' ' → logprob: -2.81217885017395
    7. ''' → logprob: -5.187179088592529
    8. ' :' → logprob: -5.562179088592529
    9. ' (' → logprob: -5.687179088592529
    10. ' .' → logprob: -5.937179088592529

Token 13: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.43105456233024597
    2. '.' → logprob: -1.8060545921325684
    3. '(' → logprob: -2.4310545921325684
    4. '(
' → logprob: -3.0560545921325684
    5. '

' → logprob: -4.431054592132568
    6. '\' → logprob: -4.556054592132568
    7. ' ' → logprob: -4.931054592132568
    8. '' → logprob: -5.556054592132568
    9. '()' → logprob: -6.056054592132568
    10. 'def' → logprob: -6.181054592132568

Token 14: 'Calcul' (ID: 66787)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.8573758602142334
    2. '(' → logprob: -1.1073758602142334
    3. '(
' → logprob: -2.6073758602142334
    4. 'class' → logprob: -3.8573758602142334
    5. '\' → logprob: -3.9823758602142334
    6. ':' → logprob: -3.9823758602142334
    7. '.' → logprob: -4.1073760986328125
    8. '#' → logprob: -4.4823760986328125
    9. ' ' → logprob: -4.4823760986328125
    10. 'd' → logprob: -4.6073760986328125

Token 15: '.val' (ID: 20368)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.08958445489406586
    2. '(' → logprob: -2.4645843505859375
    3. '()' → logprob: -7.9645843505859375
    4. '().' → logprob: -8.589584350585938
    5. '.(' → logprob: -10.089584350585938
    6. ' (' → logprob: -10.339584350585938
    7. ' .' → logprob: -11.214584350585938
    8. '(.)' → logprob: -11.714584350585938
    9. '.​' → logprob: -13.089584350585938
    10. '('.')' → logprob: -13.214584350585938

Token 16: 'eur' (ID: 8671)
  Prédit: 'ue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ue' → logprob: -0.02854936011135578
    2. '_' → logprob: -4.2785491943359375
    3. '=' → logprob: -4.9035491943359375
    4. ' =' → logprob: -6.5285491943359375
    5. ' ' → logprob: -7.0285491943359375
    6. 'ues' → logprob: -7.2785491943359375
    7. '__' → logprob: -7.2785491943359375
    8. 'u' → logprob: -7.5285491943359375
    9. 's' → logprob: -7.6535491943359375
    10. '_val' → logprob: -7.7785491943359375

Token 17: ' =' (ID: 314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 18: ' (' (ID: 350)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5085451602935791
    2. '0' → logprob: -1.383545160293579
    3. '10' → logprob: -3.258545160293579
    4. '5' → logprob: -3.383545160293579
    5. ' carré' → logprob: -3.508545160293579
    6. '1' → logprob: -4.383544921875
    7. 'c' → logprob: -4.508544921875
    8. 'car' → logprob: -4.883544921875
    9. '42' → logprob: -4.883544921875
    10. '4' → logprob: -5.883544921875

Token 19: 'lambda' (ID: 35280)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '5' → logprob: -0.873440146446228
    2. ' ' → logprob: -0.998440146446228
    3. '10' → logprob: -2.2484402656555176
    4. '2' → logprob: -3.3734402656555176
    5. '4' → logprob: -3.8734402656555176
    6. ' carré' → logprob: -4.123440265655518
    7. '3' → logprob: -4.248440265655518
    8. '42' → logprob: -4.998440265655518
    9. 'c' → logprob: -4.998440265655518
    10. 'car' → logprob: -5.748440265655518

Token 20: ':' (ID: 25)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.8402900695800781
    2. ' n' → logprob: -1.3402900695800781
    3. 'x' → logprob: -1.4652900695800781
    4. 'n' → logprob: -2.590290069580078
    5. ' ' → logprob: -7.965290069580078
    6. 'lambda' → logprob: -9.715290069580078
    7. 'a' → logprob: -10.215290069580078
    8. ' a' → logprob: -10.340290069580078
    9. ' lambda' → logprob: -10.715290069580078
    10. ' y' → logprob: -11.215290069580078

Token 21: ' int' (ID: 677)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.25545787811279297
    2. ' carré' → logprob: -2.380457878112793
    3. '42' → logprob: -2.630457878112793
    4. '2' → logprob: -4.380457878112793
    5. '5' → logprob: -4.505457878112793
    6. '3' → logprob: -5.130457878112793
    7. ' carre' → logprob: -5.255457878112793
    8. '10' → logprob: -5.255457878112793
    9. 'Calcul' → logprob: -5.255457878112793
    10. ' Calcul' → logprob: -6.130457878112793

Token 22: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.032294586300849915
    2. '(' → logprob: -3.532294511795044
    3. '('' → logprob: -6.032294750213623
    4. '("' → logprob: -9.532294273376465
    5. 'input' → logprob: -10.657294273376465
    6. ' (' → logprob: -10.657294273376465
    7. '(
' → logprob: -12.407294273376465
    8. ')' → logprob: -12.532294273376465
    9. '())' → logprob: -12.907294273376465
    10. ' input' → logprob: -13.282294273376465

Token 23: '()))' (ID: 16829)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.21039876341819763
    2. '('' → logprob: -2.0853986740112305
    3. '("("' → logprob: -2.9603986740112305
    4. '("' → logprob: -5.0853986740112305
    5. '(""))' → logprob: -5.4603986740112305
    6. '()))' → logprob: -6.3353986740112305
    7. '()' → logprob: -7.9603986740112305
    8. '(">' → logprob: -8.58539867401123
    9. '())' → logprob: -8.71039867401123
    10. '(
' → logprob: -8.83539867401123

Token 24: '()
' (ID: 1234)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.4390840232372284
    2. '(' → logprob: -1.0640840530395508
    3. '()' → logprob: -5.564084053039551
    4. '(
' → logprob: -5.689084053039551
    5. '\' → logprob: -7.439084053039551
    6. '(

' → logprob: -7.689084053039551
    7. '.
' → logprob: -7.814084053039551
    8. ')' → logprob: -7.939084053039551
    9. '<|end|>' → logprob: -8.93908405303955
    10. '[' → logprob: -9.31408405303955

Token 25: 'def' (ID: 1314)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.11625201255083084
    2. '+
' → logprob: -3.4912519454956055
    3. '.' → logprob: -3.7412519454956055
    4. 'Calcul' → logprob: -4.4912519454956055
    5. ' ' → logprob: -4.8662519454956055
    6. '\' → logprob: -4.9912519454956055
    7. '<|end|>' → logprob: -4.9912519454956055
    8. '*' → logprob: -5.3662519454956055
    9. ' 
' → logprob: -5.4912519454956055
    10. ' +' → logprob: -5.7412519454956055

Token 26: ' afficher' (ID: 146524)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6464525461196899
    2. ' carré' → logprob: -1.27145254611969
    3. '_' → logprob: -2.0214524269104004
    4. ' carre' → logprob: -3.8964524269104004
    5. ' __' → logprob: -4.6464524269104
    6. '_c' → logprob: -4.6464524269104
    7. ' ' → logprob: -4.8964524269104
    8. '__' → logprob: -6.0214524269104
    9. ' square' → logprob: -6.2714524269104
    10. ' _' → logprob: -6.5214524269104

Token 27: '_res' (ID: 10626)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014268462546169758
    2. '_' → logprob: -4.389268398284912
    3. '()' → logprob: -7.014268398284912
    4. '(c' → logprob: -8.26426887512207
    5. '(val' → logprob: -9.01426887512207
    6. '(n' → logprob: -9.26426887512207
    7. '(_' → logprob: -9.63926887512207
    8. '_(' → logprob: -9.88926887512207
    9. '_c' → logprob: -10.13926887512207
    10. '(_)' → logprob: -10.38926887512207

Token 28: '(res' (ID: 8331)
  Prédit: 'ultat'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ultat' → logprob: -0.006008787080645561
    2. 'ult' → logprob: -5.131008625030518
    3. '(' → logprob: -10.256009101867676
    4. ' ult' → logprob: -10.506009101867676
    5. 'ulat' → logprob: -11.506009101867676
    6. 'utat' → logprob: -13.256009101867676
    7. '()' → logprob: -13.506009101867676
    8. '(u' → logprob: -13.881009101867676
    9. '('' → logprob: -14.131009101867676
    10. 'ults' → logprob: -14.881009101867676

Token 29: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.04287905991077423
    2. ')' → logprob: -3.667879104614258
    3. 's' → logprob: -4.917879104614258
    4. 'ultat' → logprob: -5.542879104614258
    5. 'ult' → logprob: -6.042879104614258
    6. '):
' → logprob: -6.417879104614258
    7. ' ):' → logprob: -7.917879104614258
    8. 'umer' → logprob: -8.667879104614258
    9. '):

' → logprob: -9.167879104614258
    10. '):
' → logprob: -9.417879104614258

Token 30: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.1261451244354248
    2. ' print' → logprob: -2.376145124435425
    3. ' :' → logprob: -4.501145362854004
    4. 'print' → logprob: -5.001145362854004
    5. '   ' → logprob: -5.251145362854004
    6. '():' → logprob: -7.376145362854004
    7. '(' → logprob: -7.626145362854004
    8. ' ' → logprob: -7.876145362854004
    9. '(print' → logprob: -8.126145362854004
    10. ':return' → logprob: -9.001145362854004

Token 31: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.18433600664138794
    2. 'print' (adapté à ' print') → logprob: -2.184335947036743
    3. '   ' → logprob: -2.934335947036743
    4. '    ' → logprob: -6.934336185455322
    5. ' ' → logprob: -7.434336185455322
    6. ' p' → logprob: -8.434335708618164
    7. ' prin' → logprob: -8.684335708618164
    8. 'p' → logprob: -9.059335708618164
    9. 'pr' → logprob: -9.059335708618164
    10. ' ' → logprob: -9.309335708618164

Token 32: '(res' (ID: 8331)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.34918951988220215
    2. '(res' → logprob: -1.2241895198822021
    3. '(f' → logprob: -7.724189758300781
    4. '("("' → logprob: -9.099189758300781
    5. '('' → logprob: -9.599189758300781
    6. '()' → logprob: -10.224189758300781
    7. '("' → logprob: -10.849189758300781
    8. ' (' → logprob: -10.849189758300781
    9. '("")' → logprob: -11.474189758300781
    10. 'res' → logprob: -11.599189758300781

Token 33: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.749814019713085e-06
    2. '))' → logprob: -12.250006675720215
    3. ' )' → logprob: -13.750006675720215
    4. ')
' → logprob: -15.750006675720215
    5. ')))' → logprob: -15.750006675720215
    6. ')`' → logprob: -16.00000762939453
    7. ')}' → logprob: -16.37500762939453
    8. '')' → logprob: -17.00000762939453
    9. ')")' → logprob: -17.00000762939453
    10. ')}}' → logprob: -17.25000762939453

Token 34: 'aff' (ID: 2857)
  Prédit: 'Calcul'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Calcul' → logprob: -0.765363872051239
    2. 'res' → logprob: -1.7653639316558838
    3. '
' → logprob: -2.140363931655884
    4. 'def' → logprob: -2.265363931655884
    5. '\' → logprob: -3.015363931655884
    6. '+' → logprob: -4.015363693237305
    7. '+
' → logprob: -4.390363693237305
    8. 'c' → logprob: -4.640363693237305
    9. '<|end|>' → logprob: -4.765363693237305
    10. 'calcul' → logprob: -5.015363693237305

Token 35: 'icher' (ID: 13617)
  Prédit: 'icher'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'icher' → logprob: -2.2200749754119897e-06
    2. 'ichier' → logprob: -14.250001907348633
    3. 'cher' → logprob: -14.375001907348633
    4. 'ich' → logprob: -14.375001907348633
    5. 'iche' → logprob: -15.375001907348633
    6. 'icer' → logprob: -16.625001907348633
    7. 'ichert' → logprob: -16.875001907348633
    8. 'ichage' → logprob: -17.500001907348633
    9. 'ichern' → logprob: -17.625001907348633
    10. 'acher' → logprob: -17.750001907348633

Token 36: '_res' (ID: 10626)
  Prédit: '_res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_res' → logprob: -0.023836519569158554
    2. '_r' → logprob: -4.398836612701416
    3. '_er' → logprob: -5.023836612701416
    4. '_' → logprob: -5.523836612701416
    5. 'er' → logprob: -7.898836612701416
    6. ' _' → logprob: -9.898836135864258
    7. '_re' → logprob: -9.898836135864258
    8. 'res' → logprob: -10.148836135864258
    9. '_aff' → logprob: -10.398836135864258
    10. '_e' → logprob: -10.898836135864258

Token 37: '(c' (ID: 2410)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.05828355252742767
    2. '(c' → logprob: -2.933283567428589
    3. '(C' → logprob: -5.93328332901001
    4. '(cal' → logprob: -7.55828332901001
    5. '()' → logprob: -9.433283805847168
    6. '(calc' → logprob: -10.308283805847168
    7. '((' → logprob: -10.433283805847168
    8. '(`' → logprob: -10.558283805847168
    9. '(
' → logprob: -10.933283805847168
    10. '(car' → logprob: -11.183283805847168

Token 38: 'arr' (ID: 1614)
  Prédit: 'arr'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'arr' → logprob: -0.22876109182834625
    2. 'al' → logprob: -1.603761076927185
    3. 'alc' → logprob: -6.228761196136475
    4. 'ar' → logprob: -6.978761196136475
    5. 'aré' → logprob: -8.103760719299316
    6. '(arr' → logprob: -10.478760719299316
    7. 'a' → logprob: -10.603760719299316
    8. 'arry' → logprob: -10.978760719299316
    9. 'arri' → logprob: -11.603760719299316
    10. 'Calcul' → logprob: -11.728760719299316

Token 39: 'é' (ID: 377)
  Prédit: 'é'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'é' → logprob: 0.0
    2. 'e' → logprob: -17.5
    3. '&eacute' → logprob: -19.75
    4. '2' → logprob: -20.0
    5. 'É' → logprob: -20.375
    6. 'ré' → logprob: -20.875
    7. ' é' → logprob: -20.875
    8. 'és' → logprob: -21.0
    9. 'ié' → logprob: -21.0
    10. '(' → logprob: -21.125

Token 40: '(C' (ID: 5559)
  Prédit: '(C'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(C' → logprob: -0.47548243403434753
    2. '(' → logprob: -0.9754824638366699
    3. '(cal' → logprob: -7.22548246383667
    4. ')' → logprob: -7.85048246383667
    5. '(c' → logprob: -10.100481986999512
    6. '(
' → logprob: -10.225481986999512
    7. ' (' → logprob: -10.350481986999512
    8. '((' → logprob: -10.350481986999512
    9. '))' → logprob: -10.600481986999512
    10. '(`' → logprob: -10.975481986999512

Token 41: 'al' (ID: 280)
  Prédit: 'al'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'al' → logprob: -0.00020520923135336488
    2. 'alc' → logprob: -9.125205039978027
    3. 'Calcul' → logprob: -9.625205039978027
    4. 'calcul' → logprob: -10.625205039978027
    5. 'val' → logprob: -13.250205039978027
    6. 'alu' → logprob: -14.000205039978027
    7. 'alculate' → logprob: -14.125205039978027
    8. ' al' → logprob: -14.750205039978027
    9. 'acul' → logprob: -15.250205039978027
    10. '#' → logprob: -15.375205039978027

Token 42: 'cul' (ID: 2885)
  Prédit: 'cul'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cul' → logprob: -0.000568998686503619
    2. 'ul' → logprob: -7.750568866729736
    3. 'c' → logprob: -9.125569343566895
    4. 'cule' → logprob: -11.500569343566895
    5. '```' → logprob: -12.625569343566895
    6. 'culation' → logprob: -13.125569343566895
    7. 'val' → logprob: -13.375569343566895
    8. 'Calcul' → logprob: -13.625569343566895
    9. '``' → logprob: -13.750569343566895
    10. ' cul' → logprob: -13.750569343566895

Token 43: '.val' (ID: 20368)
  Prédit: '.val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.val' → logprob: -0.0014978413237258792
    2. '.' → logprob: -6.626497745513916
    3. ' .' → logprob: -9.126498222351074
    4. 'val' → logprob: -10.001498222351074
    5. ').' → logprob: -11.376498222351074
    6. ' ' → logprob: -12.876498222351074
    7. '.valor' → logprob: -14.376498222351074
    8. ')' → logprob: -14.876498222351074
    9. '```' → logprob: -14.876498222351074
    10. '.value' → logprob: -15.251498222351074

Token 44: 'eur' (ID: 8671)
  Prédit: 'eur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'eur' → logprob: -1.5690089639974758e-05
    2. 'e' → logprob: -11.625015258789062
    3. 'eurs' → logprob: -12.625015258789062
    4. 'leur' → logprob: -12.875015258789062
    5. ' eur' → logprob: -15.250015258789062
    6. 'ueur' → logprob: -15.625015258789062
    7. 'ieur' → logprob: -16.625015258789062
    8. 'er' → logprob: -17.000015258789062
    9. 'EUR' → logprob: -17.500015258789062
    10. 'eu' → logprob: -17.625015258789062

Token 45: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0001843485952122137
    2. ')' → logprob: -9.250184059143066
    3. ')))' → logprob: -9.875184059143066
    4. ' ))' → logprob: -10.375184059143066
    5. '))
' → logprob: -12.250184059143066
    6. '))

' → logprob: -15.750184059143066
    7. '()))' → logprob: -15.750184059143066
    8. ' ' → logprob: -16.500185012817383
    9. ' )' → logprob: -16.625185012817383
    10. '+' → logprob: -16.875185012817383


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 43
Tokens correctement prédits (1ère position, stricte): 15
Tokens correctement prédits (1ère position, avec adaptation): 15
Tokens correctement prédits (top 10): 24
Précision stricte (1ère position): 34.88%
Précision adaptée (1ère position): 34.88%
Précision (top 10): 55.81%
================================================================================
