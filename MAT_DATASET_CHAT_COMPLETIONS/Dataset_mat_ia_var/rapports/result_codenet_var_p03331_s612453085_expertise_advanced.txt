================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:17:00
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from sys import stdin

x = int(stdin.readline())
print(min(sum(map(int, str(a))) + sum(map(int, str(x - a))) for a in range(1, x)))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' stdin' (ID: 75143)
  Prédit: 'argv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'argv' → logprob: -0.051410701125860214
    2. ' argv' → logprob: -3.426410675048828
    3. 'exit' → logprob: -4.176410675048828
    4. ' exit' → logprob: -6.801410675048828
    5. 'stdout' → logprob: -7.301410675048828
    6. 'stdin' → logprob: -8.426410675048828
    7. 'path' → logprob: -8.926410675048828
    8. 'import' → logprob: -10.176410675048828
    9. 'stderr' → logprob: -10.426410675048828
    10. 'version' → logprob: -10.676410675048828

Token 4: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0006422612932510674
    2. '.readline' → logprob: -8.250641822814941
    3. '\n' → logprob: -8.500641822814941
    4. '.
' → logprob: -10.125641822814941
    5. 'import' → logprob: -10.250641822814941
    6. '\' → logprob: -10.500641822814941
    7. '```' → logprob: -10.875641822814941
    8. '.read' → logprob: -10.875641822814941
    9. '' → logprob: -12.000641822814941
    10. ',' → logprob: -12.125641822814941

Token 5: 'x' (ID: 87)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0316447988152504
    2. '.readline' → logprob: -3.781644821166992
    3. '.read' → logprob: -6.031644821166992
    4. '\n' → logprob: -6.781644821166992
    5. 'for' → logprob: -6.781644821166992
    6. 'print' → logprob: -7.156644821166992
    7. 'import' → logprob: -7.406644821166992
    8. ',' → logprob: -7.531644821166992
    9. '
' → logprob: -7.781644821166992
    10. '```' → logprob: -8.156644821166992

Token 6: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.37991905212402344
    2. '.' → logprob: -1.5049190521240234
    3. ' =' → logprob: -2.5049190521240234
    4. ' ' → logprob: -5.504919052124023
    5. '[' → logprob: -5.754919052124023
    6. '+' → logprob: -6.504919052124023
    7. '_' → logprob: -6.754919052124023
    8. ')' → logprob: -6.879919052124023
    9. ',' → logprob: -7.629919052124023
    10. 'x' → logprob: -8.004919052124023

Token 7: ' int' (ID: 677)
  Prédit: ' stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stdin' → logprob: -0.5706821084022522
    2. ' int' → logprob: -1.6956820487976074
    3. 'stdin' → logprob: -1.6956820487976074
    4. 'int' → logprob: -2.8206820487976074
    5. '(stdin' → logprob: -5.695682048797607
    6. ' ' → logprob: -5.695682048797607
    7. '.stdin' → logprob: -6.820682048797607
    8. ' input' → logprob: -9.195682525634766
    9. ' std' → logprob: -9.445682525634766
    10. 'input' → logprob: -9.945682525634766

Token 8: '(stdin' (ID: 176594)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00024311232846230268
    2. '(stdin' → logprob: -8.750243186950684
    3. '(x' → logprob: -10.250243186950684
    4. ' (' → logprob: -10.750243186950684
    5. '('' → logprob: -11.500243186950684
    6. '(input' → logprob: -11.875243186950684
    7. '(
' → logprob: -12.750243186950684
    8. '("("' → logprob: -13.000243186950684
    9. '(`' → logprob: -13.750243186950684
    10. '()' → logprob: -14.125243186950684

Token 9: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.09521760046482086
    2. '.read' → logprob: -2.470217704772949
    3. '.' → logprob: -5.095217704772949
    4. ')' → logprob: -9.84521770477295
    5. '.)' → logprob: -10.47021770477295
    6. '.Read' → logprob: -10.97021770477295
    7. '.readlines' → logprob: -11.34521770477295
    8. ').' → logprob: -12.47021770477295
    9. ' .' → logprob: -12.47021770477295
    10. '[' → logprob: -12.72021770477295

Token 10: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.12953171133995056
    2. '()' → logprob: -2.1295316219329834
    3. ')' → logprob: -6.3795318603515625
    4. '()))' → logprob: -7.8795318603515625
    5. '(' → logprob: -8.254531860351562
    6. '().' → logprob: -9.379531860351562
    7. ' ())' → logprob: -9.379531860351562
    8. '()[' → logprob: -10.129531860351562
    9. '()]' → logprob: -11.504531860351562
    10. '();)' → logprob: -11.629531860351562

Token 11: 'print' (ID: 1598)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.7311519384384155
    2. '\n' → logprob: -1.1061519384384155
    3. '*' → logprob: -2.606152057647705
    4. '\' → logprob: -3.606152057647705
    5. '
' → logprob: -3.981152057647705
    6. '+
' → logprob: -4.481152057647705
    7. ' ' → logprob: -4.606152057647705
    8. '%' → logprob: -4.731152057647705
    9. '```' → logprob: -4.731152057647705
    10. 'for' → logprob: -5.231152057647705

Token 12: '(min' (ID: 26035)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0009918416617438197
    2. '(x' → logprob: -7.3759918212890625
    3. '('' → logprob: -8.375991821289062
    4. '("("' → logprob: -9.000991821289062
    5. '()' → logprob: -12.250991821289062
    6. '((' → logprob: -13.625991821289062
    7. '(`' → logprob: -14.000991821289062
    8. '("")' → logprob: -14.000991821289062
    9. '(
' → logprob: -14.125991821289062
    10. '("""' → logprob: -14.875991821289062

Token 13: '(sum' (ID: 45528)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.050988804548978806
    2. '()' → logprob: -3.1759889125823975
    3. '(x' → logprob: -4.925988674163818
    4. '(()' → logprob: -8.050989151000977
    5. '())' → logprob: -8.800989151000977
    6. '((' → logprob: -9.550989151000977
    7. '(range' → logprob: -10.050989151000977
    8. '(
' → logprob: -11.175989151000977
    9. '(max' → logprob: -11.425989151000977
    10. ')' → logprob: -11.425989151000977

Token 14: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.26966843008995056
    2. '([' → logprob: -2.3946683406829834
    3. '(range' → logprob: -2.6446683406829834
    4. '(abs' → logprob: -3.1446683406829834
    5. '(x' → logprob: -3.8946683406829834
    6. '((' → logprob: -5.7696685791015625
    7. '(i' → logprob: -6.0196685791015625
    8. '(int' → logprob: -6.2696685791015625
    9. '(a' → logprob: -7.0196685791015625
    10. '(map' → logprob: -7.8946685791015625

Token 15: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.22442589700222015
    2. '(abs' → logprob: -2.224425792694092
    3. '(' → logprob: -3.099425792694092
    4. '(lambda' → logprob: -3.224425792694092
    5. '(ord' → logprob: -5.349425792694092
    6. ')' → logprob: -6.849425792694092
    7. '(len' → logprob: -7.349425792694092
    8. '(str' → logprob: -8.34942626953125
    9. '<|end|>' → logprob: -8.34942626953125
    10. '(list' → logprob: -8.47442626953125

Token 16: ',' (ID: 11)
  Prédit: '(stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(stdin' → logprob: -0.012747544795274734
    2. ',' → logprob: -4.512747764587402
    3. '(' → logprob: -6.637747764587402
    4. '(),' → logprob: -9.012747764587402
    5. '(x' → logprob: -10.012747764587402
    6. '(input' → logprob: -10.262747764587402
    7. 'stdin' → logprob: -10.262747764587402
    8. ',input' → logprob: -10.387747764587402
    9. '(st' → logprob: -10.887747764587402
    10. ' ,' → logprob: -11.012747764587402

Token 17: ' str' (ID: 989)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.09526453167200089
    2. '(stdin' → logprob: -2.470264434814453
    3. ' stdin' → logprob: -5.095264434814453
    4. '.stdin' → logprob: -8.970264434814453
    5. 'std' → logprob: -10.720264434814453
    6. 'stdout' → logprob: -11.595264434814453
    7. ')' → logprob: -12.720264434814453
    8. '(' → logprob: -12.845264434814453
    9. 'st' → logprob: -13.095264434814453
    10. 'input' → logprob: -13.345264434814453

Token 18: '(a' (ID: 6271)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.006304634734988213
    2. '(' → logprob: -5.256304740905762
    3. 'x' → logprob: -6.881304740905762
    4. ' (' → logprob: -11.131304740905762
    5. '(str' → logprob: -12.506304740905762
    6. '((' → logprob: -12.631304740905762
    7. ' x' → logprob: -12.631304740905762
    8. '(abs' → logprob: -13.131304740905762
    9. '(n' → logprob: -13.381304740905762
    10. ' ' → logprob: -13.381304740905762

Token 19: ')))' (ID: 15975)
  Prédit: ')))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.7246074080467224
    2. 'x' → logprob: -1.7246074676513672
    3. '(x' → logprob: -2.224607467651367
    4. '(i' → logprob: -3.099607467651367
    5. '**' → logprob: -3.474607467651367
    6. '))))' → logprob: -3.599607467651367
    7. '[i' → logprob: -4.099607467651367
    8. '))' → logprob: -4.349607467651367
    9. '[x' → logprob: -4.349607467651367
    10. '(n' → logprob: -4.349607467651367

Token 20: ' +' (ID: 659)
  Prédit: '(a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.0648665800690651
    2. '(' → logprob: -2.814866542816162
    3. '(x' → logprob: -6.439866542816162
    4. 'a' → logprob: -7.064866542816162
    5. '))' → logprob: -9.06486701965332
    6. ')' → logprob: -9.56486701965332
    7. 'x' → logprob: -10.06486701965332
    8. '(abs' → logprob: -10.06486701965332
    9. '((' → logprob: -10.43986701965332
    10. '(str' → logprob: -10.56486701965332

Token 21: ' sum' (ID: 4215)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -1.4609203338623047
    2. ' sum' → logprob: -1.4609203338623047
    3. 'x' → logprob: -1.7109203338623047
    4. 'sum' → logprob: -1.8359203338623047
    5. '1' → logprob: -2.9609203338623047
    6. ' (' → logprob: -3.4609203338623047
    7. ' ' → logprob: -4.085920333862305
    8. 'a' → logprob: -4.210920333862305
    9. 'int' → logprob: -4.460920333862305
    10. ' a' → logprob: -4.460920333862305

Token 22: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.003323865123093128
    2. '(' → logprob: -5.753324031829834
    3. '(range' → logprob: -9.628323554992676
    4. '(int' → logprob: -9.753323554992676
    5. '(list' → logprob: -11.628323554992676
    6. '([' → logprob: -12.503323554992676
    7. '(abs' → logprob: -13.253323554992676
    8. '((' → logprob: -13.253323554992676
    9. '(x' → logprob: -14.378323554992676
    10. '(a' → logprob: -14.503323554992676

Token 23: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0031865055207163095
    2. '(' → logprob: -5.7531867027282715
    3. '(lambda' → logprob: -12.753186225891113
    4. ' (' → logprob: -13.003186225891113
    5. '<int' → logprob: -13.378186225891113
    6. '(in' → logprob: -14.753186225891113
    7. 'int' → logprob: -15.128186225891113
    8. '=int' → logprob: -15.253186225891113
    9. '[int' → logprob: -15.378186225891113
    10. ',int' → logprob: -15.878186225891113

Token 24: ',' (ID: 11)
  Prédit: '(str'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(str' → logprob: -0.39352959394454956
    2. '(' → logprob: -1.1435296535491943
    3. ',' → logprob: -5.143529415130615
    4. ' (' → logprob: -8.143529891967773
    5. '(stdin' → logprob: -9.143529891967773
    6. ',(' → logprob: -9.268529891967773
    7. ',str' → logprob: -9.768529891967773
    8. '(x' → logprob: -10.768529891967773
    9. '(st' → logprob: -10.768529891967773
    10. 'str' → logprob: -10.768529891967773

Token 25: ' str' (ID: 989)
  Prédit: ' str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' str' → logprob: -0.6331733465194702
    2. 'str' → logprob: -0.7581733465194702
    3. ' ' → logprob: -8.633172988891602
    4. '(str' → logprob: -8.758172988891602
    5. '[str' → logprob: -9.758172988891602
    6. 'list' → logprob: -10.008172988891602
    7. ' list' → logprob: -10.633172988891602
    8. ')' → logprob: -11.008172988891602
    9. ' [' → logprob: -11.258172988891602
    10. ' range' → logprob: -11.758172988891602

Token 26: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.03063599206507206
    2. '(' → logprob: -3.9056360721588135
    3. '(a' → logprob: -5.030635833740234
    4. '(b' → logprob: -6.280635833740234
    5. '((' → logprob: -7.405635833740234
    6. 'x' → logprob: -7.780635833740234
    7. '(abs' → logprob: -8.280635833740234
    8. '(n' → logprob: -8.780635833740234
    9. 'a' → logprob: -10.155635833740234
    10. ')(' → logprob: -10.405635833740234

Token 27: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.7388677000999451
    2. ' -' → logprob: -0.9888677000999451
    3. '-a' → logprob: -2.23886775970459
    4. ')))' → logprob: -4.11386775970459
    5. '-x' → logprob: -4.11386775970459
    6. '+' → logprob: -4.86386775970459
    7. '))))' → logprob: -6.86386775970459
    8. 'a' → logprob: -7.23886775970459
    9. '))' → logprob: -8.11386775970459
    10. '+a' → logprob: -8.48886775970459

Token 28: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.000488811288960278
    2. ' a' → logprob: -7.625488758087158
    3. '1' → logprob: -15.250489234924316
    4. '	a' → logprob: -15.875489234924316
    5. 'x' → logprob: -16.00048828125
    6. ' ' → logprob: -16.12548828125
    7. ''a' → logprob: -16.50048828125
    8. ')a' → logprob: -17.12548828125
    9. '   ' → logprob: -17.62548828125
    10. '>a' → logprob: -17.75048828125

Token 29: ')))' (ID: 15975)
  Prédit: ')))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.07343193143606186
    2. '))))' → logprob: -2.948431968688965
    3. '))' → logprob: -4.073431968688965
    4. ')' → logprob: -6.823431968688965
    5. ' ' → logprob: -9.823431968688965
    6. ')))
' → logprob: -10.073431968688965
    7. ')))))
' → logprob: -10.198431968688965
    8. '1' → logprob: -10.573431968688965
    9. '))))
' → logprob: -10.698431968688965
    10. ')))),' → logprob: -11.073431968688965

Token 30: ' for' (ID: 395)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.18079839646816254
    2. '))' → logprob: -1.8057984113693237
    3. '(' → logprob: -8.430798530578613
    4. ' ' → logprob: -8.555798530578613
    5. '-' → logprob: -8.805798530578613
    6. 'a' → logprob: -9.055798530578613
    7. ')))' → logprob: -9.180798530578613
    8. '(a' → logprob: -9.805798530578613
    9. ',' → logprob: -10.055798530578613
    10. ' )' → logprob: -10.930798530578613

Token 31: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.016367241740226746
    2. 'a' → logprob: -4.141367435455322
    3. ' range' → logprob: -8.141366958618164
    4. '<|end|>' → logprob: -11.516366958618164
    5. '_a' → logprob: -11.766366958618164
    6. 'range' → logprob: -11.891366958618164
    7. '	a' → logprob: -12.391366958618164
    8. ' ' → logprob: -12.641366958618164
    9. ' in' → logprob: -13.016366958618164
    10. ' xrange' → logprob: -13.141366958618164

Token 32: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.004263126756995916
    2. 'in' → logprob: -5.504262924194336
    3. 'range' → logprob: -9.254262924194336
    4. ' range' → logprob: -9.379262924194336
    5. '<|end|>' → logprob: -13.254262924194336
    6. ' ' → logprob: -13.504262924194336
    7. ')' → logprob: -14.879262924194336
    8. ' xrange' → logprob: -14.879262924194336
    9. '	in' → logprob: -15.754262924194336
    10. '	range' → logprob: -16.004262924194336

Token 33: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.02328380011022091
    2. 'range' → logprob: -3.7732837200164795
    3. ' xrange' → logprob: -10.648283958435059
    4. '(range' → logprob: -11.398283958435059
    5. '	range' → logprob: -12.648283958435059
    6. ' ' → logprob: -16.148283004760742
    7. '.range' → logprob: -17.523283004760742
    8. '_range' → logprob: -18.398283004760742
    9. '[' → logprob: -18.898283004760742
    10. 'x' → logprob: -19.023283004760742

Token 34: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1269306242465973
    2. '(x' → logprob: -2.1269307136535645
    3. '(a' → logprob: -14.751930236816406
    4. ' (' → logprob: -14.751930236816406
    5. '1' → logprob: -14.876930236816406
    6. 'x' → logprob: -15.126930236816406
    7. '(n' → logprob: -15.251930236816406
    8. '(
' → logprob: -15.376930236816406
    9. '((' → logprob: -15.501930236816406
    10. '(i' → logprob: -16.126930236816406

Token 35: '1' (ID: 16)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.38866981863975525
    2. '1' → logprob: -1.1386698484420776
    3. '(x' → logprob: -6.513669967651367
    4. ' x' → logprob: -8.263669967651367
    5. '(' → logprob: -10.013669967651367
    6. ' ' → logprob: -11.888669967651367
    7. '	x' → logprob: -13.513669967651367
    8. '0' → logprob: -14.263669967651367
    9. ')x' → logprob: -14.388669967651367
    10. ')' → logprob: -14.513669967651367

Token 36: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.1147795021533966
    2. '(x' → logprob: -2.489779472351074
    3. '(' → logprob: -4.239779472351074
    4. ' ,' → logprob: -4.739779472351074
    5. ',x' → logprob: -6.489779472351074
    6. 'x' → logprob: -7.364779472351074
    7. ' (' → logprob: -9.239779472351074
    8. ' x' → logprob: -9.239779472351074
    9. '1' → logprob: -12.489779472351074
    10. ')' → logprob: -12.864779472351074

Token 37: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.5759400725364685
    2. 'x' → logprob: -0.8259400725364685
    3. '(x' → logprob: -15.075940132141113
    4. ' ' → logprob: -15.700940132141113
    5. '	x' → logprob: -15.700940132141113
    6. ')x' → logprob: -17.450939178466797
    7. ' ' → logprob: -18.075939178466797
    8. ' (' → logprob: -18.450939178466797
    9. '```' → logprob: -18.700939178466797
    10. '1' → logprob: -18.825939178466797

Token 38: ')))' (ID: 15975)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.8922309279441833
    2. ')))' → logprob: -1.2672309875488281
    3. '+' → logprob: -1.3922309875488281
    4. ')' → logprob: -2.892230987548828
    5. ' +' → logprob: -5.517230987548828
    6. ' ))' → logprob: -8.767230987548828
    7. '))))' → logprob: -9.142230987548828
    8. ')+' → logprob: -9.392230987548828
    9. ')));' → logprob: -9.767230987548828
    10. '))+' → logprob: -9.892230987548828


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 36
Tokens correctement prédits (1ère position, stricte): 14
Tokens correctement prédits (1ère position, avec adaptation): 14
Tokens correctement prédits (top 10): 25
Précision stricte (1ère position): 38.89%
Précision adaptée (1ère position): 38.89%
Précision (top 10): 69.44%
================================================================================
