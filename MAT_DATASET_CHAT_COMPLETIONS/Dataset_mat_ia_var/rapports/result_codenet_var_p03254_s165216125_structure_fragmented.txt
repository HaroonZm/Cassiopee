================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:08:16
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def read_input():
    return input().split()

def parse_ints(strs):
    return list(map(int, strs))

def get_n_and_x():
    vals = read_input()
    return parse_ints(vals)

def get_A():
    vals = read_input()
    return parse_ints(vals)

def sort_list(lst):
    return sorted(lst)

def get_prefix_sum(lst, end_index):
    return sum(lst[:end_index + 1])

def check_sum_exceeds(prefix_sum, x):
    return prefix_sum > x

def check_sum_equals(prefix_sum, x):
    return prefix_sum == x

def print_and_exit(val):
    print(val)
    exit()

def process(n, x, A):
    for i in range(n):
        prefix_sum = get_prefix_sum(A, i)
        if check_sum_exceeds(prefix_sum, x):
            print_and_exit(i)
        if check_sum_equals(prefix_sum, x):
            print_and_exit(i + 1)
    print(i)

def main():
    n_and_x = get_n_and_x()
    n = n_and_x[0]
    x = n_and_x[1]
    A = get_A()
    A = sort_list(A)
    process(n, x, A)

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' read' (ID: 1729)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003679528832435608
    2. '_' → logprob: -6.5036797523498535
    3. '():' → logprob: -6.5036797523498535
    4. '(:' → logprob: -7.7536797523498535
    5. '(_:' → logprob: -9.128679275512695
    6. '```' → logprob: -10.128679275512695
    7. ' (' → logprob: -10.753679275512695
    8. '(_' → logprob: -10.878679275512695
    9. ':' → logprob: -10.878679275512695
    10. '_:' → logprob: -12.253679275512695

Token 4: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.988785445690155
    2. '\' → logprob: -1.2387855052947998
    3. '\n' → logprob: -1.3637855052947998
    4. '   ' → logprob: -3.1137855052948
    5. '    
' → logprob: -4.863785266876221
    6. '
' → logprob: -5.113785266876221
    7. ' 
' → logprob: -5.613785266876221
    8. '``' → logprob: -5.863785266876221
    9. ':' → logprob: -6.113785266876221
    10. ''\' → logprob: -6.613785266876221

Token 5: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.44253385066986084
    2. '```' → logprob: -2.0675339698791504
    3. 'return' (adapté à ' return') → logprob: -2.6925339698791504
    4. '    ' → logprob: -3.3175339698791504
    5. 'input' → logprob: -3.5675339698791504
    6. 'r' → logprob: -3.5675339698791504
    7. '\' → logprob: -4.19253396987915
    8. 'x' → logprob: -4.31753396987915
    9. '       ' → logprob: -4.69253396987915
    10. '`' → logprob: -5.19253396987915

Token 6: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.21319261193275452
    2. ' input' → logprob: -2.2131927013397217
    3. 'input' → logprob: -3.0881927013397217
    4. '"' → logprob: -3.4631927013397217
    5. ''' → logprob: -5.588192462921143
    6. ' []' → logprob: -7.588192462921143
    7. '  ' → logprob: -7.963192462921143
    8. ' "' → logprob: -8.5881929397583
    9. ' None' → logprob: -9.0881929397583
    10. '(input' → logprob: -9.2131929397583

Token 7: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0013410773826763034
    2. '()' → logprob: -7.376340866088867
    3. ''' → logprob: -8.376340866088867
    4. '"' → logprob: -9.126340866088867
    5. '('' → logprob: -9.376340866088867
    6. '("("' → logprob: -9.501340866088867
    7. '```' → logprob: -9.751340866088867
    8. '(
' → logprob: -10.126340866088867
    9. ')' → logprob: -11.126340866088867
    10. '`' → logprob: -11.251340866088867

Token 8: 'split' (ID: 13627)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.001170460251159966
    2. 'rstrip' → logprob: -7.001170635223389
    3. 'split' → logprob: -8.37617015838623
    4. 'replace' → logprob: -11.37617015838623
    5. '()' → logprob: -12.25117015838623
    6. '-strip' → logprob: -12.87617015838623
    7. '_strip' → logprob: -12.87617015838623
    8. 'lower' → logprob: -13.25117015838623
    9. '```' → logprob: -13.62617015838623
    10. '\n' → logprob: -13.75117015838623

Token 9: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.013130461797118187
    2. '()' → logprob: -4.3881306648254395
    3. '('' → logprob: -8.388130187988281
    4. '("("' → logprob: -9.263130187988281
    5. '(`' → logprob: -10.013130187988281
    6. '`' → logprob: -10.138130187988281
    7. '`()' → logprob: -10.388130187988281
    8. ' (' → logprob: -10.388130187988281
    9. '"' → logprob: -10.513130187988281
    10. '```' → logprob: -10.513130187988281

Token 10: 'def' (ID: 1314)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.8710305690765381
    2. '<|end|>' → logprob: -1.121030569076538
    3. 'def' → logprob: -2.746030569076538
    4. '(' → logprob: -2.871030569076538
    5. '[' → logprob: -3.371030569076538
    6. '```' → logprob: -3.621030569076538
    7. '\n' → logprob: -4.246030807495117
    8. 'a' → logprob: -4.621030807495117
    9. '\' → logprob: -4.996030807495117
    10. 'r' → logprob: -5.121030807495117

Token 11: ' parse' (ID: 8420)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.6134803295135498
    2. ' process' → logprob: -1.7384803295135498
    3. ' calculate' → logprob: -1.7384803295135498
    4. ' write' → logprob: -2.61348032951355
    5. ' read' → logprob: -4.238480567932129
    6. ' compute' → logprob: -4.613480567932129
    7. ' parse' → logprob: -6.113480567932129
    8. ' print' → logprob: -6.863480567932129
    9. ' solve' → logprob: -7.363480567932129
    10. ' user' → logprob: -7.738480567932129

Token 12: '_int' (ID: 12285)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.06617914140224457
    2. '_input' → logprob: -2.941179037094116
    3. '(' → logprob: -5.441179275512695
    4. '_parameters' → logprob: -6.191179275512695
    5. '_line' → logprob: -6.816179275512695
    6. '_command' → logprob: -7.816179275512695
    7. '_data' → logprob: -7.941179275512695
    8. '_arguments' → logprob: -7.941179275512695
    9. '_name' → logprob: -8.316179275512695
    10. '_code' → logprob: -8.441179275512695

Token 13: 's' (ID: 82)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.011815408244729042
    2. '()' → logprob: -5.511815547943115
    3. '("("' → logprob: -6.136815547943115
    4. 's' → logprob: -6.386815547943115
    5. '```' → logprob: -6.511815547943115
    6. '_' → logprob: -8.511815071105957
    7. '('' → logprob: -8.636815071105957
    8. ' (' → logprob: -9.136815071105957
    9. 'def' → logprob: -9.136815071105957
    10. '():' → logprob: -9.511815071105957

Token 14: '(str' (ID: 7946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0012307076249271631
    2. ' (' → logprob: -7.751230716705322
    3. '("("' → logprob: -7.876230716705322
    4. '()' → logprob: -9.501230239868164
    5. '```' → logprob: -10.126230239868164
    6. '(line' → logprob: -10.501230239868164
    7. '():' → logprob: -10.501230239868164
    8. '(()' → logprob: -11.001230239868164
    9. '<|end|>' → logprob: -11.001230239868164
    10. '_' → logprob: -11.251230239868164

Token 15: 's' (ID: 82)
  Prédit: 'ing'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ing' → logprob: -0.21201622486114502
    2. '):' → logprob: -2.4620161056518555
    3. 'ings' → logprob: -3.0870161056518555
    4. ')' → logprob: -4.0870161056518555
    5. 'eg' → logprob: -4.2120161056518555
    6. 's' → logprob: -4.4620161056518555
    7. 'eam' → logprob: -5.0870161056518555
    8. 'eger' → logprob: -6.0870161056518555
    9. '():' → logprob: -6.4620161056518555
    10. 'ect' → logprob: -6.7120161056518555

Token 16: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0022558800410479307
    2. ')' → logprob: -6.252255916595459
    3. '):
' → logprob: -8.7522554397583
    4. ' ):' → logprob: -9.6272554397583
    5. '   ' → logprob: -10.1272554397583
    6. '[]):' → logprob: -10.6272554397583
    7. ':' → logprob: -11.3772554397583
    8. '():' → logprob: -11.7522554397583
    9. '[' → logprob: -12.7522554397583
    10. '):

' → logprob: -13.3772554397583

Token 17: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.048434969037771225
    2. ' return' → logprob: -3.5484349727630615
    3. '[' → logprob: -4.798434734344482
    4. 'return' → logprob: -5.048434734344482
    5. '[int' → logprob: -5.798434734344482
    6. 'def' → logprob: -8.42343521118164
    7. '    ' → logprob: -9.17343521118164
    8. ' list' → logprob: -9.29843521118164
    9. ' map' → logprob: -9.29843521118164
    10. '[]' → logprob: -9.42343521118164

Token 18: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4934738278388977
    2. ' return' → logprob: -1.243473768234253
    3. 'return' (adapté à ' return') → logprob: -2.368473768234253
    4. '[int' → logprob: -5.368474006652832
    5. '[' → logprob: -6.368474006652832
    6. ' [' → logprob: -6.993474006652832
    7. ' list' → logprob: -9.868474006652832
    8. ' map' → logprob: -10.118474006652832
    9. '    ' → logprob: -10.618474006652832
    10. '[]' → logprob: -11.243474006652832

Token 19: ' list' (ID: 1562)
  Prédit: ' ['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.5266650319099426
    2. ' list' → logprob: -1.0266649723052979
    3. '[int' → logprob: -3.651664972305298
    4. '[list' → logprob: -4.026665210723877
    5. '[' → logprob: -5.276665210723877
    6. 'list' → logprob: -6.151665210723877
    7. ' map' → logprob: -8.776664733886719
    8. '[i' → logprob: -11.526664733886719
    9. '[List' → logprob: -11.526664733886719
    10. '[len' → logprob: -11.526664733886719

Token 20: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.0019297054968774319
    2. '(' → logprob: -6.251929759979248
    3. '(int' → logprob: -14.37692928314209
    4. '(
' → logprob: -15.25192928314209
    5. '(

' → logprob: -16.251930236816406
    6. '	map' → logprob: -16.626930236816406
    7. ',map' → logprob: -17.251930236816406
    8. ' map' → logprob: -17.251930236816406
    9. '.map' → logprob: -17.626930236816406
    10. 'map' → logprob: -18.126930236816406

Token 21: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0009002620354294777
    2. 'int' → logprob: -7.2509002685546875
    3. ' int' → logprob: -9.625900268554688
    4. '   ' → logprob: -9.875900268554688
    5. ',int' → logprob: -10.625900268554688
    6. '(' → logprob: -10.750900268554688
    7. '=int' → logprob: -11.250900268554688
    8. '<int' → logprob: -11.750900268554688
    9. ')' → logprob: -12.750900268554688
    10. '	int' → logprob: -13.875900268554688

Token 22: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.09622257202863693
    2. ',str' → logprob: -2.8462226390838623
    3. '(str' → logprob: -3.5962226390838623
    4. '(' → logprob: -5.846222400665283
    5. ' ,' → logprob: -5.971222400665283
    6. ')' → logprob: -7.971222400665283
    7. ' ' → logprob: -8.471222877502441
    8. ' (' → logprob: -9.971222877502441
    9. 'str' → logprob: -10.221222877502441
    10. ' str' → logprob: -10.846222877502441

Token 23: ' strs' (ID: 125079)
  Prédit: ' strs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' strs' → logprob: -0.005976435262709856
    2. 'str' → logprob: -5.13097620010376
    3. ' str' → logprob: -10.005976676940918
    4. '	str' → logprob: -14.005976676940918
    5. ' strata' → logprob: -14.005976676940918
    6. '(str' → logprob: -15.380976676940918
    7. ' ' → logprob: -15.505976676940918
    8. ',str' → logprob: -15.630976676940918
    9. '_str' → logprob: -15.880976676940918
    10. ':str' → logprob: -16.1309757232666

Token 24: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.00010688089241739362
    2. ')' → logprob: -9.750106811523438
    3. ')))' → logprob: -10.000106811523438
    4. '))
' → logprob: -13.625106811523438
    5. ' ))' → logprob: -13.625106811523438
    6. '   ' → logprob: -15.250106811523438
    7. '()))' → logprob: -15.375106811523438
    8. ' ' → logprob: -15.750106811523438
    9. '))

' → logprob: -18.125106811523438
    10. '),' → logprob: -18.125106811523438

Token 25: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0005234848940744996
    2. 'd' → logprob: -8.750523567199707
    3. '
' → logprob: -8.750523567199707
    4. '\' → logprob: -9.375523567199707
    5. '

' → logprob: -10.000523567199707
    6. '```' → logprob: -10.500523567199707
    7. '#' → logprob: -11.250523567199707
    8. 'de' → logprob: -11.500523567199707
    9. '<|end|>' → logprob: -11.625523567199707
    10. 'n' → logprob: -12.125523567199707

Token 26: ' get' (ID: 717)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.2266223132610321
    2. ' solve' → logprob: -2.4766223430633545
    3. ' calculate' → logprob: -2.8516223430633545
    4. ' compute' → logprob: -3.8516223430633545
    5. ' process' → logprob: -4.726622104644775
    6. ' factorial' → logprob: -4.976622104644775
    7. ' sum' → logprob: -5.351622104644775
    8. ' find' → logprob: -5.726622104644775
    9. 'solve' → logprob: -5.726622104644775
    10. ' count' → logprob: -5.976622104644775

Token 27: '_n' (ID: 2170)
  Prédit: '_max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_max' → logprob: -0.43864360451698303
    2. '_sum' → logprob: -2.18864369392395
    3. '_input' → logprob: -2.56364369392395
    4. '_' → logprob: -2.81364369392395
    5. '_data' → logprob: -3.31364369392395
    6. '_user' → logprob: -4.188643455505371
    7. '_numbers' → logprob: -4.813643455505371
    8. '_next' → logprob: -5.188643455505371
    9. '_unique' → logprob: -5.688643455505371
    10. '_total' → logprob: -5.938643455505371

Token 28: '_and' (ID: 18645)
  Prédit: 'ext'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ext' → logprob: -0.23604008555412292
    2. 'umber' → logprob: -2.4860401153564453
    3. 'ame' → logprob: -2.7360401153564453
    4. 'um' → logprob: -3.1110401153564453
    5. '_' → logprob: -4.861040115356445
    6. '_ext' → logprob: -5.236040115356445
    7. 'umbers' → logprob: -6.236040115356445
    8. 'ames' → logprob: -6.986040115356445
    9. 'ums' → logprob: -7.736040115356445
    10. 'e' → logprob: -8.236040115356445

Token 29: '_x' (ID: 7054)
  Prédit: '_k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_k' → logprob: -0.7425388693809509
    2. '_m' → logprob: -0.9925388693809509
    3. '_values' → logprob: -2.6175389289855957
    4. '_data' → logprob: -3.8675389289855957
    5. '_arr' → logprob: -4.617538928985596
    6. '_rest' → logprob: -5.492538928985596
    7. '_list' → logprob: -5.492538928985596
    8. '_array' → logprob: -5.742538928985596
    9. '_items' → logprob: -5.742538928985596
    10. '_strings' → logprob: -5.742538928985596

Token 30: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0024223909713327885
    2. '()' → logprob: -6.252422332763672
    3. '(' → logprob: -7.877422332763672
    4. '_' → logprob: -10.752422332763672
    5. '```' → logprob: -11.002422332763672
    6. ' ():' → logprob: -11.252422332763672
    7. '("("' → logprob: -11.502422332763672
    8. '():
' → logprob: -12.002422332763672
    9. '()(' → logprob: -12.127422332763672
    10. 's' → logprob: -12.502422332763672

Token 31: '   ' (ID: 271)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.24668580293655396
    2. '()' → logprob: -2.121685743331909
    3. '   ' → logprob: -2.621685743331909
    4. ' ():' → logprob: -4.246685981750488
    5. ' ()' → logprob: -5.121685981750488
    6. ' return' → logprob: -6.496685981750488
    7. ':' → logprob: -6.746685981750488
    8. '():
' → logprob: -6.871685981750488
    9. '(' → logprob: -6.996685981750488
    10. '    ' → logprob: -7.996685981750488

Token 32: ' vals' (ID: 58985)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8337288498878479
    2. 'return' → logprob: -0.9587288498878479
    3. ' return' → logprob: -1.7087287902832031
    4. 'n' → logprob: -7.583728790283203
    5. 'input' → logprob: -8.583728790283203
    6. '    
' → logprob: -8.958728790283203
    7. ' n' → logprob: -9.208728790283203
    8. 'str' → logprob: -10.208728790283203
    9. '    ' → logprob: -10.333728790283203
    10. 's' → logprob: -10.958728790283203

Token 33: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.023262716829776764
    2. '=' → logprob: -3.7732627391815186
    3. ')' → logprob: -11.773262977600098
    4. '(' → logprob: -13.273262977600098
    5. ',' → logprob: -13.523262977600098
    6. '_' → logprob: -13.648262977600098
    7. '   ' → logprob: -14.023262977600098
    8. ' ' → logprob: -14.273262977600098
    9. '()' → logprob: -14.398262977600098
    10. '[' → logprob: -14.398262977600098

Token 34: ' read' (ID: 1729)
  Prédit: ' read'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.004293153528124094
    2. 'read' → logprob: -6.254292964935303
    3. ' parse' → logprob: -6.504292964935303
    4. ' input' → logprob: -7.129292964935303
    5. ' ' → logprob: -10.254293441772461
    6. 'parse' → logprob: -11.504293441772461
    7. 'input' → logprob: -12.004293441772461
    8. ' list' → logprob: -12.629293441772461
    9. '	read' → logprob: -12.754293441772461
    10. ' readline' → logprob: -13.254293441772461

Token 35: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -7.44574936106801e-05
    2. '_' → logprob: -9.62507438659668
    3. '_line' → logprob: -12.50007438659668
    4. '_output' → logprob: -13.87507438659668
    5. '_in' → logprob: -14.12507438659668
    6. '_inputs' → logprob: -14.12507438659668
    7. '()' → logprob: -14.25007438659668
    8. '```' → logprob: -14.87507438659668
    9. ' _' → logprob: -15.50007438659668
    10. '__' → logprob: -15.50007438659668

Token 36: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0010619866661727428
    2. '())' → logprob: -6.876061916351318
    3. ')' → logprob: -10.876062393188477
    4. '()[' → logprob: -13.376062393188477
    5. '()
' → logprob: -13.501062393188477
    6. '(' → logprob: -13.626062393188477
    7. '()]' → logprob: -13.626062393188477
    8. ' ()' → logprob: -13.876062393188477
    9. '()`' → logprob: -14.251062393188477
    10. '`()' → logprob: -14.626062393188477

Token 37: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5805461406707764
    2. '()' → logprob: -1.5805461406707764
    3. '[' → logprob: -2.0805461406707764
    4. '
' → logprob: -3.2055461406707764
    5. '()
' → logprob: -4.3305463790893555
    6. 'return' → logprob: -4.3305463790893555
    7. '    
' → logprob: -4.4555463790893555
    8. ' ' → logprob: -5.2055463790893555
    9. '<|end|>' → logprob: -5.2055463790893555
    10. ' return' → logprob: -5.4555463790893555

Token 38: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.47814032435417175
    2. ' return' → logprob: -1.7281403541564941
    3. 'return' (adapté à ' return') → logprob: -2.103140354156494
    4. 'n' → logprob: -2.853140354156494
    5. ' n' → logprob: -3.853140354156494
    6. '    ' → logprob: -7.478140354156494
    7. ' ' → logprob: -8.353139877319336
    8. '    
' → logprob: -8.978139877319336
    9. 'x' → logprob: -9.103139877319336
    10. '
' → logprob: -9.228139877319336

Token 39: ' parse' (ID: 8420)
  Prédit: ' parse'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' parse' → logprob: -0.07278896123170853
    2. 'parse' → logprob: -3.197788953781128
    3. ' int' → logprob: -3.822788953781128
    4. ' vals' → logprob: -5.572789192199707
    5. 'int' → logprob: -6.322789192199707
    6. ' tuple' → logprob: -6.947789192199707
    7. 'vals' → logprob: -8.322789192199707
    8. '(parse' → logprob: -8.447789192199707
    9. ' (' → logprob: -8.697789192199707
    10. ' ' → logprob: -10.072789192199707

Token 40: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -1.3663626305060461e-05
    2. '_in' → logprob: -11.25001335144043
    3. '_t' → logprob: -14.87501335144043
    4. '_' → logprob: -15.62501335144043
    5. 'Ints' → logprob: -16.87501335144043
    6. '_uint' → logprob: -17.00001335144043
    7. 'ints' → logprob: -17.12501335144043
    8. 'int' → logprob: -17.37501335144043
    9. '_nt' → logprob: -17.75001335144043
    10. ' _' → logprob: -18.00001335144043

Token 41: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -4.000763510703109e-05
    2. '_s' → logprob: -10.875040054321289
    3. '_int' → logprob: -11.000040054321289
    4. '_ts' → logprob: -13.875040054321289
    5. '_vals' → logprob: -14.000040054321289
    6. '_' → logprob: -14.500040054321289
    7. 'ts' → logprob: -14.625040054321289
    8. '(s' → logprob: -14.625040054321289
    9. '```' → logprob: -15.750040054321289
    10. 'ints' → logprob: -15.875040054321289

Token 42: '(vals' (ID: 167053)
  Prédit: '(vals'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(vals' → logprob: -0.025673771277070045
    2. '(' → logprob: -3.7756738662719727
    3. '(val' → logprob: -6.025673866271973
    4. ' (' → logprob: -12.150673866271973
    5. '(vars' → logprob: -14.525673866271973
    6. '(ids' → logprob: -14.650673866271973
    7. '(values' → logprob: -14.650673866271973
    8. '((' → logprob: -14.900673866271973
    9. '```' → logprob: -15.150673866271973
    10. '(v' → logprob: -15.275673866271973

Token 43: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0010748496279120445
    2. '))' → logprob: -7.25107479095459
    3. '())' → logprob: -8.00107479095459
    4. '()' → logprob: -10.75107479095459
    5. ' )' → logprob: -12.87607479095459
    6. '   ' → logprob: -13.12607479095459
    7. '[' → logprob: -13.50107479095459
    8. ')))' → logprob: -14.37607479095459
    9. ' ' → logprob: -14.87607479095459
    10. '])' → logprob: -15.00107479095459

Token 44: 'def' (ID: 1314)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.1212483644485474
    2. '

' → logprob: -1.1212483644485474
    3. 'def' → logprob: -1.1212483644485474
    4. '```' → logprob: -4.496248245239258
    5. '[' → logprob: -5.246248245239258
    6. '<|end|>' → logprob: -5.871248245239258
    7. '\n' → logprob: -7.371248245239258
    8. '\' → logprob: -8.121248245239258
    9. '<|end|>' → logprob: -8.246248245239258
    10. 'n' → logprob: -8.371248245239258

Token 45: ' get' (ID: 717)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.14502687752246857
    2. ' solve' → logprob: -2.270026922225952
    3. ' get' → logprob: -4.270026683807373
    4. ' find' → logprob: -4.395026683807373
    5. ' calculate' → logprob: -6.270026683807373
    6. '_' → logprob: -6.895026683807373
    7. ' process' → logprob: -7.770026683807373
    8. ' test' → logprob: -8.020027160644531
    9. ' compute' → logprob: -8.020027160644531
    10. ' run' → logprob: -8.145027160644531

Token 46: '_A' (ID: 6829)
  Prédit: '_list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_list' → logprob: -1.613847255706787
    2. '_array' → logprob: -2.113847255706787
    3. '_input' → logprob: -2.363847255706787
    4. '_data' → logprob: -2.363847255706787
    5. '_a' → logprob: -2.488847255706787
    6. '_s' → logprob: -3.238847255706787
    7. '_arr' → logprob: -3.363847255706787
    8. '_items' → logprob: -3.363847255706787
    9. '_values' → logprob: -3.738847255706787
    10. '_n' → logprob: -3.738847255706787

Token 47: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.00030066570616327226
    2. '_' → logprob: -9.250300407409668
    3. '_and' → logprob: -10.000300407409668
    4. '_values' → logprob: -10.125300407409668
    5. '()' → logprob: -10.250300407409668
    6. '_list' → logprob: -10.750300407409668
    7. '():
' → logprob: -10.875300407409668
    8. '(' → logprob: -11.250300407409668
    9. ' ():' → logprob: -11.750300407409668
    10. 's' → logprob: -12.500300407409668

Token 48: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -5.676981345459353e-06
    2. 'return' → logprob: -13.750005722045898
    3. ' return' → logprob: -13.750005722045898
    4. '    
' → logprob: -14.125005722045898
    5. 'A' → logprob: -14.750005722045898
    6. '    ' → logprob: -14.875005722045898
    7. '   ' → logprob: -15.000005722045898
    8. 'vals' → logprob: -15.125005722045898
    9. '()' → logprob: -15.250005722045898
    10. '  ' → logprob: -15.625005722045898

Token 49: ' vals' (ID: 58985)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009675227105617523
    2. ' return' → logprob: -5.009675025939941
    3. 'return' → logprob: -6.009675025939941
    4. 'vals' (adapté à ' vals') → logprob: -7.884675025939941
    5. ' vals' → logprob: -9.259675025939941
    6. 'A' → logprob: -11.509675025939941
    7. 'values' → logprob: -13.009675025939941
    8. ' A' → logprob: -13.134675025939941
    9. 'val' → logprob: -13.134675025939941
    10. '   ' → logprob: -13.259675025939941

Token 50: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.06197687238454819
    2. '=' → logprob: -2.811976909637451
    3. '   ' → logprob: -12.061976432800293
    4. ' ' → logprob: -12.811976432800293
    5. 's' → logprob: -15.061976432800293
    6. '_' → logprob: -16.06197738647461
    7. '  ' → logprob: -16.06197738647461
    8. '    ' → logprob: -17.31197738647461
    9. ' ' → logprob: -17.31197738647461
    10. ' =
' → logprob: -17.31197738647461

Token 51: ' read' (ID: 1729)
  Prédit: 'read'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'read' → logprob: -0.3868733048439026
    2. ' read' → logprob: -1.1368732452392578
    3. '	read' → logprob: -13.511873245239258
    4. '   ' → logprob: -15.761873245239258
    5. '_read' → logprob: -15.886873245239258
    6. 'input' → logprob: -16.011873245239258
    7. '(read' → logprob: -16.011873245239258
    8. '.read' → logprob: -16.011873245239258
    9. ' input' → logprob: -16.386873245239258
    10. ' ' → logprob: -16.386873245239258

Token 52: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: 0.0
    2. 'input' → logprob: -17.25
    3. '_put' → logprob: -17.75
    4. '_' → logprob: -18.25
    5. '_output' → logprob: -18.875
    6. '_inputs' → logprob: -18.875
    7. '_INPUT' → logprob: -19.125
    8. '_line' → logprob: -19.375
    9. 'put' → logprob: -19.5
    10. 'Input' → logprob: -19.5

Token 53: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -2.534558552724775e-05
    2. '())' → logprob: -11.125025749206543
    3. '()
' → logprob: -12.000025749206543
    4. ')' → logprob: -13.250025749206543
    5. '()]' → logprob: -14.250025749206543
    6. '()

' → logprob: -14.625025749206543
    7. ' ()' → logprob: -15.125025749206543
    8. '()<' → logprob: -15.375025749206543
    9. '()`' → logprob: -15.375025749206543
    10. '`()' → logprob: -15.750025749206543

Token 54: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.002057119505479932
    2. 'return' → logprob: -6.252057075500488
    3. ' return' → logprob: -9.002057075500488
    4. '	return' → logprob: -13.127057075500488
    5. '<|end|>' → logprob: -13.127057075500488
    6. '  ' → logprob: -15.127057075500488
    7. '       ' → logprob: -15.252057075500488
    8. ' ' → logprob: -15.252057075500488
    9. '    ' → logprob: -15.377057075500488
    10. ')' → logprob: -15.627057075500488

Token 55: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.04098935425281525
    2. ' return' → logprob: -3.790989398956299
    3. '   ' → logprob: -4.040989398956299
    4. ' ' → logprob: -12.41598892211914
    5. '	return' → logprob: -13.29098892211914
    6. '  ' → logprob: -13.91598892211914
    7. 'eturn' → logprob: -15.79098892211914
    8. '```' → logprob: -15.91598892211914
    9. ':return' → logprob: -16.29098892211914
    10. ')return' → logprob: -16.29098892211914

Token 56: ' parse' (ID: 8420)
  Prédit: ' parse'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' parse' → logprob: -0.313264399766922
    2. 'parse' → logprob: -1.3132643699645996
    3. '(parse' → logprob: -13.813264846801758
    4. '	parse' → logprob: -13.938264846801758
    5. 'list' → logprob: -15.313264846801758
    6. ' list' → logprob: -15.563264846801758
    7. '.parse' → logprob: -15.688264846801758
    8. ' ' → logprob: -16.688264846801758
    9. '=parse' → logprob: -16.688264846801758
    10. 'vals' → logprob: -17.063264846801758

Token 57: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -2.7014437364414334e-05
    2. '_in' → logprob: -10.87502670288086
    3. '_' → logprob: -12.12502670288086
    4. '_t' → logprob: -13.75002670288086
    5. '_i' → logprob: -15.00002670288086
    6. 'Ints' → logprob: -15.00002670288086
    7. ' _' → logprob: -15.50002670288086
    8. 'ints' → logprob: -15.62502670288086
    9. '_str' → logprob: -16.00002670288086
    10. 'int' → logprob: -16.50002670288086

Token 58: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: 0.0
    2. '_s' → logprob: -18.25
    3. 'ts' → logprob: -18.625
    4. '(vals' → logprob: -18.75
    5. 'vals' → logprob: -20.125
    6. 'S' → logprob: -20.25
    7. 'sts' → logprob: -20.75
    8. '```' → logprob: -21.5
    9. ' s' → logprob: -21.875
    10. 'с' → logprob: -21.875

Token 59: '(vals' (ID: 167053)
  Prédit: '(vals'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(vals' → logprob: -0.025725826621055603
    2. '(' → logprob: -3.775725841522217
    3. '(val' → logprob: -6.025725841522217
    4. '(values' → logprob: -10.025725364685059
    5. '("("' → logprob: -12.650725364685059
    6. '(vars' → logprob: -13.150725364685059
    7. '(len' → logprob: -13.400725364685059
    8. '(ids' → logprob: -13.650725364685059
    9. '('' → logprob: -13.775725364685059
    10. ' (' → logprob: -13.900725364685059

Token 60: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -9.253090865968261e-06
    2. '())' → logprob: -11.875009536743164
    3. '()' → logprob: -13.375009536743164
    4. '))' → logprob: -15.125009536743164
    5. ')
' → logprob: -16.125009536743164
    6. ' )' → logprob: -16.250009536743164
    7. ')return' → logprob: -16.500009536743164
    8. '')' → logprob: -17.500009536743164
    9. '`)' → logprob: -17.750009536743164
    10. '   ' → logprob: -17.875009536743164

Token 61: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0005728095420636237
    2. '```' → logprob: -7.875572681427002
    3. 'n' → logprob: -9.50057315826416
    4. '<|end|>' → logprob: -10.25057315826416
    5. '#' → logprob: -10.87557315826416
    6. '\' → logprob: -11.12557315826416
    7. 'data' → logprob: -11.25057315826416
    8. '
' → logprob: -11.50057315826416
    9. '``' → logprob: -12.37557315826416
    10. 'x' → logprob: -12.62557315826416

Token 62: ' sort' (ID: 4506)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.5427565574645996
    2. ' solve' → logprob: -0.9177565574645996
    3. ' calculate' → logprob: -4.6677565574646
    4. ' compute' → logprob: -5.5427565574646
    5. ' find' → logprob: -6.5427565574646
    6. ' def' → logprob: -6.6677565574646
    7. ' process' → logprob: -7.0427565574646
    8. ' solution' → logprob: -7.2927565574646
    9. 'solve' → logprob: -7.5427565574646
    10. ' run' → logprob: -8.292757034301758

Token 63: '_list' (ID: 4162)
  Prédit: '_A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_A' → logprob: -0.6701955795288086
    2. '_' → logprob: -0.9201955795288086
    3. '_(' → logprob: -2.7951955795288086
    4. '(' → logprob: -4.420195579528809
    5. '(A' → logprob: -4.670195579528809
    6. '_array' → logprob: -5.920195579528809
    7. '_list' → logprob: -6.420195579528809
    8. 'ed' → logprob: -7.045195579528809
    9. '(_' → logprob: -7.545195579528809
    10. 'A' → logprob: -7.795195579528809

Token 64: '(lst' (ID: 95688)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.007723391056060791
    2. '_' → logprob: -5.507723331451416
    3. '_list' → logprob: -6.757723331451416
    4. '(_' → logprob: -7.757723331451416
    5. 's' → logprob: -7.882723331451416
    6. '_(' → logprob: -8.007723808288574
    7. '(lst' → logprob: -8.132723808288574
    8. '_by' → logprob: -9.007723808288574
    9. '(ls' → logprob: -9.132723808288574
    10. '(l' → logprob: -9.632723808288574

Token 65: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.004226678051054478
    2. ')' → logprob: -5.5042266845703125
    3. '(lst' → logprob: -10.129226684570312
    4. ' ):' → logprob: -10.379226684570312
    5. '):
' → logprob: -10.379226684570312
    6. ':' → logprob: -11.504226684570312
    7. '(' → logprob: -11.504226684570312
    8. ',' → logprob: -11.629226684570312
    9. '[]):' → logprob: -13.129226684570312
    10. '_list' → logprob: -13.129226684570312

Token 66: '   ' (ID: 271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.8583124279975891
    2. '(lst' → logprob: -0.9833124279975891
    3. 'lst' → logprob: -2.2333123683929443
    4. '(sorted' → logprob: -3.1083123683929443
    5. '   ' → logprob: -4.233312606811523
    6. 'sorted' → logprob: -4.358312606811523
    7. '(
' → logprob: -4.608312606811523
    8. ' lst' → logprob: -5.358312606811523
    9. '[:]' → logprob: -5.608312606811523
    10. ' sorted' → logprob: -7.233312606811523

Token 67: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -1.2835142612457275
    2. 'return' (adapté à ' return') → logprob: -1.2835142612457275
    3. '   ' → logprob: -1.5335142612457275
    4. 'lst' → logprob: -1.7835142612457275
    5. ' lst' → logprob: -2.7835142612457275
    6. '```' → logprob: -9.908514022827148
    7. 'sorted' → logprob: -10.033514022827148
    8. ' ' → logprob: -10.158514022827148
    9. '    
' → logprob: -10.783514022827148
    10. '	return' → logprob: -10.783514022827148

Token 68: ' sorted' (ID: 20099)
  Prédit: ' sorted'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sorted' → logprob: -0.11284158378839493
    2. 'sorted' → logprob: -2.2378416061401367
    3. '(sorted' → logprob: -11.237841606140137
    4. ' ' → logprob: -12.737841606140137
    5. ' lst' → logprob: -13.487841606140137
    6. ' list' → logprob: -14.487841606140137
    7. '.sorted' → logprob: -15.237841606140137
    8. '[]' → logprob: -15.737841606140137
    9. 'lst' → logprob: -15.987841606140137
    10. '   ' → logprob: -16.11284065246582

Token 69: '(lst' (ID: 95688)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10036410391330719
    2. '(lst' → logprob: -2.3503642082214355
    3. '(list' → logprob: -9.100363731384277
    4. '(ls' → logprob: -10.850363731384277
    5. '(

' → logprob: -11.850363731384277
    6. '(
' → logprob: -11.850363731384277
    7. '(l' → logprob: -12.600363731384277
    8. '((' → logprob: -13.600363731384277
    9. '(ll' → logprob: -13.975363731384277
    10. '(lista' → logprob: -14.100363731384277

Token 70: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -7.896309739408025e-07
    2. '))' → logprob: -14.375000953674316
    3. ' )' → logprob: -16.0
    4. ')))' → logprob: -17.625
    5. '())' → logprob: -17.75
    6. ')
' → logprob: -18.125
    7. '[' → logprob: -18.375
    8. '(' → logprob: -18.625
    9. ' ' → logprob: -18.875
    10. '()' → logprob: -19.0

Token 71: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0012654747115448117
    2. '<|end|>' → logprob: -8.126265525817871
    3. '```' → logprob: -8.126265525817871
    4. '()' → logprob: -8.876265525817871
    5. 'n' → logprob: -9.251265525817871
    6. '(' → logprob: -9.376265525817871
    7. '\' → logprob: -9.751265525817871
    8. '

' → logprob: -9.876265525817871
    9. '#' → logprob: -10.126265525817871
    10. '(def' → logprob: -10.626265525817871

Token 72: ' get' (ID: 717)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.0019300628919154406
    2. 'main' → logprob: -7.626930236816406
    3. ' calculate' → logprob: -7.751930236816406
    4. ' max' → logprob: -8.876930236816406
    5. ' process' → logprob: -8.876930236816406
    6. ' solve' → logprob: -8.876930236816406
    7. ' reverse' → logprob: -9.001930236816406
    8. ' def' → logprob: -9.251930236816406
    9. ' find' → logprob: -9.751930236816406
    10. ' sum' → logprob: -9.876930236816406

Token 73: '_prefix' (ID: 33197)
  Prédit: '_n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_n' → logprob: -0.5371811985969543
    2. '_sum' → logprob: -2.7871811389923096
    3. '_max' → logprob: -2.9121811389923096
    4. '_sorted' → logprob: -3.2871811389923096
    5. '_B' → logprob: -3.4121811389923096
    6. '_input' → logprob: -3.6621811389923096
    7. '_result' → logprob: -3.6621811389923096
    8. '_N' → logprob: -3.9121811389923096
    9. '_m' → logprob: -3.9121811389923096
    10. '_total' → logprob: -4.287181377410889

Token 74: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.5773196220397949
    2. '_s' → logprob: -0.8273196220397949
    3. '_array' → logprob: -7.327319622039795
    4. '_' → logprob: -7.577319622039795
    5. '_max' → logprob: -9.077320098876953
    6. '_list' → logprob: -10.827320098876953
    7. '_len' → logprob: -11.202320098876953
    8. 's' → logprob: -11.702320098876953
    9. 'sum' → logprob: -11.702320098876953
    10. '_lengths' → logprob: -11.827320098876953

Token 75: '(lst' (ID: 95688)
  Prédit: '(lst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lst' → logprob: -0.044803570955991745
    2. '(' → logprob: -3.7948036193847656
    3. 's' → logprob: -4.044803619384766
    4. '(s' → logprob: -6.544803619384766
    5. '(arr' → logprob: -6.794803619384766
    6. '_list' → logprob: -7.544803619384766
    7. '_lst' → logprob: -8.294803619384766
    8. '(list' → logprob: -8.669803619384766
    9. '(ls' → logprob: -9.669803619384766
    10. ' (' → logprob: -9.794803619384766

Token 76: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0001645644661039114
    2. '):
' → logprob: -9.250164985656738
    3. ')' → logprob: -10.000164985656738
    4. ' ):' → logprob: -11.500164985656738
    5. 's' → logprob: -12.375164985656738
    6. '):
' → logprob: -12.500164985656738
    7. '_list' → logprob: -12.875164985656738
    8. '[]):' → logprob: -14.500164985656738
    9. ':' → logprob: -15.250164985656738
    10. ',' → logprob: -15.375164985656738

Token 77: ' end' (ID: 1268)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.12280552089214325
    2. ' n' → logprob: -3.122805595397949
    3. ')' → logprob: -4.372805595397949
    4. 'length' → logprob: -4.622805595397949
    5. 'mod' → logprob: -4.747805595397949
    6. 'reverse' → logprob: -4.872805595397949
    7. 'lst' → logprob: -5.372805595397949
    8. 'include' → logprob: -5.497805595397949
    9. '   ' → logprob: -5.747805595397949
    10. '):
' → logprob: -5.747805595397949

Token 78: '_index' (ID: 7748)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.010167429223656654
    2. '):
' → logprob: -5.135167598724365
    3. '=' → logprob: -6.010167598724365
    4. '_index' → logprob: -7.135167598724365
    5. '_idx' → logprob: -7.510167598724365
    6. ')' → logprob: -8.635167121887207
    7. '_' → logprob: -8.885167121887207
    8. ' ):' → logprob: -10.385167121887207
    9. '):

' → logprob: -10.885167121887207
    10. '=None' → logprob: -10.885167121887207

Token 79: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00015633940347470343
    2. '):
' → logprob: -9.37515640258789
    3. ' ):' → logprob: -10.12515640258789
    4. ')' → logprob: -10.62515640258789
    5. '=' → logprob: -12.75015640258789
    6. 's' → logprob: -14.00015640258789
    7. '   ' → logprob: -14.00015640258789
    8. ':' → logprob: -14.50015640258789
    9. '):
' → logprob: -14.75015640258789
    10. ' ' → logprob: -15.00015640258789

Token 80: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07191206514835358
    2. ':' → logprob: -2.6969120502471924
    3. '(lst' → logprob: -7.6969122886657715
    4. 'lst' → logprob: -7.9469122886657715
    5. ':
' → logprob: -8.196911811828613
    6. ',' → logprob: -9.196911811828613
    7. ' :' → logprob: -9.196911811828613
    8. ' lst' → logprob: -9.321911811828613
    9. '[' → logprob: -9.321911811828613
    10. '):' → logprob: -9.446911811828613

Token 81: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007160988170653582
    2. ' return' → logprob: -5.2571611404418945
    3. 'return' (adapté à ' return') → logprob: -7.1321611404418945
    4. 'sum' → logprob: -7.5071611404418945
    5. ' sum' → logprob: -8.507161140441895
    6. '    ' → logprob: -9.257161140441895
    7. ' prefix' → logprob: -9.507161140441895
    8. 'prefix' → logprob: -9.632161140441895
    9. '  ' → logprob: -10.257161140441895
    10. '0' → logprob: -10.757161140441895

Token 82: ' sum' (ID: 4215)
  Prédit: ' sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sum' → logprob: -0.14723561704158783
    2. 'sum' → logprob: -2.022235631942749
    3. ' lst' → logprob: -5.64723539352417
    4. 'lst' → logprob: -7.14723539352417
    5. '   ' → logprob: -9.397235870361328
    6. ' ' → logprob: -9.772235870361328
    7. '	sum' → logprob: -10.147235870361328
    8. '(sum' → logprob: -10.897235870361328
    9. '  ' → logprob: -11.397235870361328
    10. ' [' → logprob: -11.897235870361328

Token 83: '(lst' (ID: 95688)
  Prédit: '(lst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lst' → logprob: -0.04859543219208717
    2. '(' → logprob: -3.048595428466797
    3. '(l' → logprob: -12.298595428466797
    4. '(
' → logprob: -13.923595428466797
    5. '(list' → logprob: -14.173595428466797
    6. '(ls' → logprob: -14.673595428466797
    7. '(

' → logprob: -14.923595428466797
    8. 'lst' → logprob: -15.173595428466797
    9. ' lst' → logprob: -15.423595428466797
    10. ' (' → logprob: -15.548595428466797

Token 84: '[:' (ID: 7808)
  Prédit: '[:'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[:' → logprob: -0.00019328886992298067
    2. '[' → logprob: -8.62519359588623
    3. '   ' → logprob: -11.75019359588623
    4. '[end' → logprob: -12.25019359588623
    5. ')' → logprob: -15.25019359588623
    6. ':end' → logprob: -15.37519359588623
    7. ' ' → logprob: -16.000192642211914
    8. ' [:' → logprob: -16.125192642211914
    9. '0' → logprob: -16.125192642211914
    10. ':' → logprob: -16.250192642211914

Token 85: 'end' (ID: 419)
  Prédit: 'end'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'end' → logprob: -0.038048259913921356
    2. ' end' → logprob: -3.288048267364502
    3. '(end' → logprob: -12.163047790527344
    4. '   ' → logprob: -14.163047790527344
    5. ' ' → logprob: -14.663047790527344
    6. ':end' → logprob: -15.663047790527344
    7. '	end' → logprob: -15.913047790527344
    8. '=end' → logprob: -16.538047790527344
    9. '.end' → logprob: -17.413047790527344
    10. '_end' → logprob: -17.413047790527344

Token 86: '_index' (ID: 7748)
  Prédit: '_index'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_index' → logprob: -2.2007883671903983e-05
    2. '_' → logprob: -11.250021934509277
    3. 'index' → logprob: -13.000021934509277
    4. '_ind' → logprob: -13.250021934509277
    5. '+' → logprob: -13.875021934509277
    6. 'Index' → logprob: -14.625021934509277
    7. '_i' → logprob: -14.750021934509277
    8. ')' → logprob: -15.000021934509277
    9. '   ' → logprob: -15.250021934509277
    10. ' _' → logprob: -15.625021934509277

Token 87: ' +' (ID: 659)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4516834616661072
    2. '+' → logprob: -1.326683521270752
    3. '])' → logprob: -2.326683521270752
    4. ' +' → logprob: -8.701683044433594
    5. '))' → logprob: -9.076683044433594
    6. ' )' → logprob: -9.701683044433594
    7. '+)' → logprob: -10.701683044433594
    8. ')+' → logprob: -11.076683044433594
    9. ')])' → logprob: -11.076683044433594
    10. ')
' → logprob: -11.326683044433594

Token 88: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00029637437546625733
    2. ' ' → logprob: -8.125296592712402
    3. '])' → logprob: -15.250296592712402
    4. '```' → logprob: -17.500295639038086
    5. ')' → logprob: -17.625295639038086
    6. '<|end|>' → logprob: -17.875295639038086
    7. '   ' → logprob: -18.187795639038086
    8. '0' → logprob: -18.812795639038086
    9. '  ' → logprob: -19.000295639038086
    10. ' ' → logprob: -19.312795639038086

Token 89: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -6.153795766294934e-06
    2. ' ' → logprob: -12.125005722045898
    3. '])' → logprob: -14.250005722045898
    4. ']' → logprob: -17.2500057220459
    5. '```' → logprob: -18.0000057220459
    6. '   ' → logprob: -18.2500057220459
    7. '0' → logprob: -18.3750057220459
    8. '  ' → logprob: -19.3750057220459
    9. ')' → logprob: -19.8750057220459
    10. 'def' → logprob: -20.2500057220459

Token 90: '])

' (ID: 21045)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -5.512236498361744e-07
    2. ')
' → logprob: -16.0
    3. ' )' → logprob: -16.25
    4. '))' → logprob: -16.5
    5. ')return' → logprob: -16.5
    6. '）' → logprob: -16.875
    7. '])' → logprob: -17.125
    8. ')`' → logprob: -17.125
    9. '`)' → logprob: -17.875
    10. '})' → logprob: -18.0

Token 91: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0006153396097943187
    2. '
' → logprob: -8.250615119934082
    3. '<|end|>' → logprob: -8.375615119934082
    4. '

' → logprob: -9.875615119934082
    5. '```' → logprob: -10.625615119934082
    6. '\' → logprob: -10.625615119934082
    7. '<|end|>' → logprob: -11.500615119934082
    8. '\n' → logprob: -12.750615119934082
    9. ' def' → logprob: -13.375615119934082
    10. '#' → logprob: -13.750615119934082

Token 92: ' check' (ID: 2371)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.700506329536438
    2. 'main' → logprob: -0.825506329536438
    3. 'max' → logprob: -3.4505062103271484
    4. ' max' → logprob: -3.9505062103271484
    5. 'count' → logprob: -6.075506210327148
    6. 'solve' → logprob: -6.200506210327148
    7. ' solve' → logprob: -6.575506210327148
    8. 'def' → logprob: -6.700506210327148
    9. ' count' → logprob: -6.950506210327148
    10. 'calculate' → logprob: -6.950506210327148

Token 93: '_sum' (ID: 29859)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.43174290657043457
    2. '(' → logprob: -1.1817429065704346
    3. '_s' → logprob: -4.5567426681518555
    4. '_x' → logprob: -5.0567426681518555
    5. '_sum' → logprob: -5.1817426681518555
    6. '(x' → logprob: -6.1817426681518555
    7. '_(' → logprob: -6.8067426681518555
    8. '_parent' → logprob: -6.9317426681518555
    9. '_max' → logprob: -7.0567426681518555
    10. '_n' → logprob: -7.1817426681518555

Token 94: '_ex' (ID: 5724)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4932698905467987
    2. '(lst' → logprob: -0.9932699203491211
    3. '(s' → logprob: -4.743269920349121
    4. 's' → logprob: -6.493269920349121
    5. '(a' → logprob: -6.993269920349121
    6. '(nums' → logprob: -7.118269920349121
    7. '(n' → logprob: -7.118269920349121
    8. '(sum' → logprob: -7.243269920349121
    9. '(ls' → logprob: -7.243269920349121
    10. '(end' → logprob: -7.618269920349121

Token 95: 'ceeds' (ID: 28245)
  Prédit: 'ceeds'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ceeds' → logprob: -0.16529496014118195
    2. 'ceed' → logprob: -2.415294885635376
    3. 'ceeded' → logprob: -3.040294885635376
    4. 'ists' → logprob: -4.290295124053955
    5. '(' → logprob: -7.665295124053955
    6. 'cess' → logprob: -8.040294647216797
    7. '```' → logprob: -8.540294647216797
    8. 'istence' → logprob: -8.665294647216797
    9. '_' → logprob: -10.415294647216797
    10. 't' → logprob: -10.540294647216797

Token 96: '(prefix' (ID: 59324)
  Prédit: '(lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(lst' → logprob: -0.016607964411377907
    2. '(' → logprob: -5.016607761383057
    3. '(x' → logprob: -5.766607761383057
    4. '_x' → logprob: -6.266607761383057
    5. '(s' → logprob: -6.391607761383057
    6. '(list' → logprob: -7.266607761383057
    7. '(nums' → logprob: -7.766607761383057
    8. '(sum' → logprob: -8.141608238220215
    9. '(arr' → logprob: -8.141608238220215
    10. '_' → logprob: -8.391608238220215

Token 97: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.013813448138535023
    2. 'sum' → logprob: -4.888813495635986
    3. ',' → logprob: -5.638813495635986
    4. ')' → logprob: -6.513813495635986
    5. '_s' → logprob: -7.513813495635986
    6. 's' → logprob: -9.138813018798828
    7. '   ' → logprob: -9.513813018798828
    8. '_index' → logprob: -10.013813018798828
    9. 'es' → logprob: -10.388813018798828
    10. 'def' → logprob: -10.513813018798828

Token 98: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.011642816476523876
    2. 's' → logprob: -4.761642932891846
    3. ' ,' → logprob: -6.636642932891846
    4. '_,' → logprob: -7.136642932891846
    5. ',target' → logprob: -8.261642456054688
    6. '_sum' → logprob: -9.511642456054688
    7. '_target' → logprob: -9.511642456054688
    8. '_value' → logprob: -9.761642456054688
    9. ',s' → logprob: -10.011642456054688
    10. '_threshold' → logprob: -10.011642456054688

Token 99: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.721907913684845
    2. ' x' → logprob: -0.846907913684845
    3. 'X' → logprob: -3.4719078540802
    4. ' X' → logprob: -4.221908092498779
    5. ' target' → logprob: -4.596908092498779
    6. 'threshold' → logprob: -4.971908092498779
    7. ' threshold' → logprob: -5.096908092498779
    8. ' limit' → logprob: -5.221908092498779
    9. 'limit' → logprob: -5.596908092498779
    10. 'target' → logprob: -5.971908092498779

Token 100: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0010952114826068282
    2. ' ):' → logprob: -7.751095294952393
    3. ',' → logprob: -7.876095294952393
    4. ')' → logprob: -8.876094818115234
    5. '):
' → logprob: -9.376094818115234
    6. 's' → logprob: -10.876094818115234
    7. '_' → logprob: -11.001094818115234
    8. ':' → logprob: -11.251094818115234
    9. ' ' → logprob: -12.876094818115234
    10. '=' → logprob: -13.751094818115234

Token 101: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004263946786522865
    2. ' return' → logprob: -6.004263877868652
    3. '(prefix' → logprob: -7.504263877868652
    4. ':' → logprob: -7.629263877868652
    5. ' prefix' → logprob: -8.004263877868652
    6. ':
' → logprob: -9.129263877868652
    7. ' if' → logprob: -9.504263877868652
    8. ' :' → logprob: -10.129263877868652
    9. 'def' → logprob: -10.254263877868652
    10. '    ' → logprob: -10.379263877868652

Token 102: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.7867240905761719
    2. ' return' → logprob: -1.0367240905761719
    3. '   ' → logprob: -1.6617240905761719
    4. '    ' → logprob: -9.536724090576172
    5. '
' → logprob: -9.786724090576172
    6. 'prefix' → logprob: -10.536724090576172
    7. ' prefix' → logprob: -10.661724090576172
    8. 'def' → logprob: -10.786724090576172
    9. '	return' → logprob: -11.536724090576172
    10. '    
' → logprob: -11.661724090576172

Token 103: ' prefix' (ID: 18633)
  Prédit: ' prefix'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' prefix' → logprob: -0.011059491895139217
    2. 'prefix' → logprob: -4.511059284210205
    3. '(prefix' → logprob: -11.511059761047363
    4. '   ' → logprob: -13.886059761047363
    5. ' ' → logprob: -14.636059761047363
    6. ' ' → logprob: -16.511058807373047
    7. '_prefix' → logprob: -16.511058807373047
    8. ' (' → logprob: -16.761058807373047
    9. 'Prefix' → logprob: -17.636058807373047
    10. '  ' → logprob: -17.636058807373047

Token 104: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.0002880337997339666
    2. 'sum' → logprob: -8.375288009643555
    3. 'ex' → logprob: -9.875288009643555
    4. 's' → logprob: -13.375288009643555
    5. 'd' → logprob: -13.750288009643555
    6. '_s' → logprob: -13.750288009643555
    7. '_ex' → logprob: -14.125288009643555
    8. 'x' → logprob: -15.250288009643555
    9. ' sum' → logprob: -15.500288009643555
    10. '   ' → logprob: -15.750288009643555

Token 105: ' >' (ID: 1424)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.09146356582641602
    2. ' >' → logprob: -2.466463565826416
    3. '>=' → logprob: -6.091463565826416
    4. ' >=' → logprob: -8.841463088989258
    5. '<=' → logprob: -9.341463088989258
    6. ' <=' → logprob: -11.091463088989258
    7. ' ' → logprob: -12.341463088989258
    8. '()>' → logprob: -12.966463088989258
    9. '   ' → logprob: -13.466463088989258
    10. ' ' → logprob: -13.966463088989258

Token 106: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.02975141443312168
    2. 'x' → logprob: -3.5297513008117676
    3. ' ' → logprob: -14.404751777648926
    4. ' ' → logprob: -15.904751777648926
    5. '0' → logprob: -16.15475082397461
    6. '	x' → logprob: -16.27975082397461
    7. '(x' → logprob: -17.65475082397461
    8. '1' → logprob: -18.15475082397461
    9. '```' → logprob: -18.52975082397461
    10. '   ' → logprob: -18.65475082397461

Token 107: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.014584410935640335
    2. '<|end|>' → logprob: -4.764584541320801
    3. '()' → logprob: -6.014584541320801
    4. '(' → logprob: -7.014584541320801
    5. '

' → logprob: -7.139584541320801
    6. '
' → logprob: -7.889584541320801
    7. '<|end|>' → logprob: -8.5145845413208
    8. '_' → logprob: -9.0145845413208
    9. '(
' → logprob: -9.0145845413208
    10. '```' → logprob: -9.2645845413208

Token 108: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -7.941850526549388e-06
    2. '<|end|>' → logprob: -12.375007629394531
    3. '```' → logprob: -13.000007629394531
    4. ' def' → logprob: -14.750007629394531
    5. ':def' → logprob: -15.625007629394531
    6. '<|end|>' → logprob: -16.00000762939453
    7. 'if' → logprob: -16.00000762939453
    8. '#' → logprob: -16.25000762939453
    9. 'ndef' → logprob: -16.25000762939453
    10. 'for' → logprob: -16.37500762939453

Token 109: ' check' (ID: 2371)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.6405144333839417
    2. ' main' → logprob: -0.7655144333839417
    3. 'max' → logprob: -6.015514373779297
    4. 'solve' → logprob: -6.265514373779297
    5. ' max' → logprob: -7.140514373779297
    6. ' solve' → logprob: -7.265514373779297
    7. 'def' → logprob: -7.765514373779297
    8. ' find' → logprob: -8.390514373779297
    9. 'calculate' → logprob: -8.390514373779297
    10. 'can' → logprob: -8.640514373779297

Token 110: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.0009918416617438197
    2. '_list' → logprob: -8.750991821289062
    3. 'sum' → logprob: -8.875991821289062
    4. '_x' → logprob: -9.125991821289062
    5. '_ex' → logprob: -9.250991821289062
    6. '_s' → logprob: -9.250991821289062
    7. '_prefix' → logprob: -9.375991821289062
    8. '_length' → logprob: -9.875991821289062
    9. '_len' → logprob: -10.125991821289062
    10. 'def' → logprob: -10.125991821289062

Token 111: '_equals' (ID: 165870)
  Prédit: '_ex'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_ex' → logprob: -0.040153030306100845
    2. '_equals' → logprob: -4.6651530265808105
    3. '_less' → logprob: -4.7901530265808105
    4. 's' → logprob: -5.1651530265808105
    5. '(prefix' → logprob: -6.0401530265808105
    6. '_equal' → logprob: -6.1651530265808105
    7. '_not' → logprob: -6.5401530265808105
    8. '_le' → logprob: -6.7901530265808105
    9. '_' → logprob: -7.0401530265808105
    10. '(lst' → logprob: -7.0401530265808105

Token 112: '(prefix' (ID: 59324)
  Prédit: '(prefix'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(prefix' → logprob: -0.0002929174806922674
    2. '(sum' → logprob: -9.000292778015137
    3. '(x' → logprob: -10.000292778015137
    4. '(' → logprob: -10.375292778015137
    5. ' (' → logprob: -10.375292778015137
    6. '(s' → logprob: -10.625292778015137
    7. 'prefix' → logprob: -11.000292778015137
    8. ' prefix' → logprob: -11.875292778015137
    9. '_prefix' → logprob: -12.125292778015137
    10. '_sum' → logprob: -13.125292778015137

Token 113: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -5.228561349213123e-05
    2. 'sum' → logprob: -10.375052452087402
    3. '_s' → logprob: -10.875052452087402
    4. '_' → logprob: -14.625052452087402
    5. 'def' → logprob: -14.625052452087402
    6. 's' → logprob: -14.625052452087402
    7. '_ex' → logprob: -15.500052452087402
    8. ' _' → logprob: -15.750052452087402
    9. 'ex' → logprob: -16.250051498413086
    10. ' sum' → logprob: -16.500051498413086

Token 114: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.007751675322651863
    2. ' ,' → logprob: -4.88275146484375
    3. 'prefix' → logprob: -10.13275146484375
    4. '(prefix' → logprob: -10.25775146484375
    5. ',p' → logprob: -10.38275146484375
    6. ' prefix' → logprob: -10.63275146484375
    7. ',x' → logprob: -11.50775146484375
    8. '_,' → logprob: -13.50775146484375
    9. ',parent' → logprob: -14.50775146484375
    10. '   ' → logprob: -14.63275146484375

Token 115: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.2022055983543396
    2. 'x' → logprob: -1.7022056579589844
    3. ' prefix' → logprob: -7.327205657958984
    4. 'prefix' → logprob: -9.077205657958984
    5. ' ' → logprob: -11.702205657958984
    6. '   ' → logprob: -12.702205657958984
    7. ')' → logprob: -13.702205657958984
    8. '    ' → logprob: -13.827205657958984
    9. '_x' → logprob: -14.014705657958984
    10. ',' → logprob: -14.452205657958984

Token 116: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.12905384600162506
    2. ',' → logprob: -2.879053831100464
    3. '):
' → logprob: -3.504053831100464
    4. ':' → logprob: -3.504053831100464
    5. '   ' → logprob: -5.504054069519043
    6. ')' → logprob: -8.629054069519043
    7. ' ):' → logprob: -9.504054069519043
    8. 'def' → logprob: -9.754054069519043
    9. '(prefix' → logprob: -9.879054069519043
    10. ':return' → logprob: -10.254054069519043

Token 117: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014710106886923313
    2. ' return' → logprob: -4.264709949493408
    3. 'return' → logprob: -7.514709949493408
    4. '    ' → logprob: -14.264710426330566
    5. '   ' → logprob: -15.264710426330566
    6. '	return' → logprob: -15.639710426330566
    7. '       ' → logprob: -16.13970947265625
    8. '  ' → logprob: -16.38970947265625
    9. ' ' → logprob: -16.38970947265625
    10. ' prefix' → logprob: -16.88970947265625

Token 118: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.5839970111846924
    2. 'return' (adapté à ' return') → logprob: -0.8339970111846924
    3. '   ' → logprob: -4.833996772766113
    4. ' prefix' → logprob: -10.208996772766113
    5. 'prefix' → logprob: -10.333996772766113
    6. 'def' → logprob: -14.958996772766113
    7. '
' → logprob: -15.333996772766113
    8. '	return' → logprob: -15.458996772766113
    9. '(prefix' → logprob: -16.20899772644043
    10. ' ' → logprob: -16.33399772644043

Token 119: ' prefix' (ID: 18633)
  Prédit: ' prefix'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' prefix' → logprob: -0.014164448715746403
    2. 'prefix' → logprob: -4.264164447784424
    3. '(prefix' → logprob: -13.889164924621582
    4. ' ' → logprob: -17.764163970947266
    5. '   ' → logprob: -18.014163970947266
    6. ' ' → logprob: -19.139163970947266
    7. ' pref' → logprob: -19.764163970947266
    8. '_prefix' → logprob: -20.014163970947266
    9. ' (' → logprob: -20.139163970947266
    10. ' True' → logprob: -20.639163970947266

Token 120: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -5.598092684522271e-05
    2. 'sum' → logprob: -9.875056266784668
    3. '_' → logprob: -12.625056266784668
    4. '_s' → logprob: -14.500056266784668
    5. '==' → logprob: -15.125056266784668
    6. ' _' → logprob: -16.12505531311035
    7. '```' → logprob: -16.75005531311035
    8. '	sum' → logprob: -17.00005531311035
    9. 's' → logprob: -17.25005531311035
    10. ' ==' → logprob: -17.37505531311035

Token 121: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.005939821247011423
    2. '==' → logprob: -5.130939960479736
    3. ' ' → logprob: -12.255939483642578
    4. ' ' → logprob: -12.630939483642578
    5. '=' → logprob: -13.005939483642578
    6. ' =' → logprob: -15.255939483642578
    7. 'def' → logprob: -15.380939483642578
    8. '_' → logprob: -16.130939483642578
    9. ')' → logprob: -16.255939483642578
    10. 's' → logprob: -16.755939483642578

Token 122: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.38687121868133545
    2. 'x' → logprob: -1.1368712186813354
    3. '	x' → logprob: -16.136871337890625
    4. '(x' → logprob: -17.386871337890625
    5. ' ' → logprob: -17.386871337890625
    6. ' ' → logprob: -17.386871337890625
    7. '0' → logprob: -18.261871337890625
    8. '```' → logprob: -18.761871337890625
    9. '_x' → logprob: -18.886871337890625
    10. ')x' → logprob: -19.761871337890625

Token 123: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.014613194391131401
    2. '

' → logprob: -4.389613151550293
    3. '
' → logprob: -6.514613151550293
    4. '<|end|>' → logprob: -8.014613151550293
    5. '\n' → logprob: -9.389613151550293
    6. '\' → logprob: -9.389613151550293
    7. ' def' → logprob: -10.514613151550293
    8. '(def' → logprob: -11.264613151550293
    9. '#' → logprob: -11.389613151550293
    10. 'newline' → logprob: -11.514613151550293

Token 124: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -2.8325677703833207e-05
    2. '

' → logprob: -11.250028610229492
    3. '\' → logprob: -12.000028610229492
    4. '
' → logprob: -13.125028610229492
    5. '```' → logprob: -13.250028610229492
    6. '\n' → logprob: -13.625028610229492
    7. '#' → logprob: -13.875028610229492
    8. '<|end|>' → logprob: -14.000028610229492
    9. ' def' → logprob: -14.750028610229492
    10. 'ndef' → logprob: -15.125028610229492

Token 125: ' print' (ID: 2123)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.32154181599617004
    2. 'main' → logprob: -1.6965417861938477
    3. 'def' → logprob: -2.9465417861938477
    4. ' def' → logprob: -4.196541786193848
    5. ' find' → logprob: -4.946541786193848
    6. ' solve' → logprob: -5.196541786193848
    7. 'solve' → logprob: -5.571541786193848
    8. ' check' → logprob: -6.071541786193848
    9. 'find' → logprob: -7.321541786193848
    10. 'max' → logprob: -7.446541786193848

Token 126: '_and' (ID: 18645)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0020423675887286663
    2. '()' → logprob: -7.002042293548584
    3. '("")' → logprob: -8.627042770385742
    4. '_' → logprob: -8.752042770385742
    5. '("' → logprob: -8.877042770385742
    6. '('' → logprob: -8.877042770385742
    7. '("("' → logprob: -8.877042770385742
    8. '_result' → logprob: -9.377042770385742
    9. '(""' → logprob: -10.377042770385742
    10. '_sum' → logprob: -10.377042770385742

Token 127: '_exit' (ID: 41242)
  Prédit: 'exit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'exit' → logprob: -0.5540714263916016
    2. 'return' → logprob: -1.0540714263916016
    3. '_exit' → logprob: -2.6790714263916016
    4. '_return' → logprob: -4.929071426391602
    5. 'break' → logprob: -7.179071426391602
    6. 'continue' → logprob: -9.804071426391602
    7. ' exit' → logprob: -9.929071426391602
    8. 'stop' → logprob: -10.304071426391602
    9. ' return' → logprob: -10.429071426391602
    10. '_break' → logprob: -10.554071426391602

Token 128: '(val' (ID: 17391)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004745298996567726
    2. '()' → logprob: -6.0047454833984375
    3. ' (' → logprob: -7.2547454833984375
    4. '('' → logprob: -7.7547454833984375
    5. '(message' → logprob: -8.004745483398438
    6. '("' → logprob: -8.879745483398438
    7. '("("' → logprob: -8.879745483398438
    8. '(value' → logprob: -9.629745483398438
    9. '(s' → logprob: -9.629745483398438
    10. '(msg' → logprob: -9.754745483398438

Token 129: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3906238377094269
    2. '(' → logprob: -1.2656238079071045
    3. '):' → logprob: -3.8906238079071045
    4. '(val' → logprob: -5.265624046325684
    5. '(value' → logprob: -5.265624046325684
    6. 'ue' → logprob: -5.640624046325684
    7. '):
' → logprob: -6.265624046325684
    8. 'a' → logprob: -6.765624046325684
    9. 's' → logprob: -7.390624046325684
    10. 'uate' → logprob: -8.015624046325684

Token 130: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00467291846871376
    2. ' print' → logprob: -6.129673004150391
    3. ':' → logprob: -7.004673004150391
    4. '(' → logprob: -7.129673004150391
    5. ' import' → logprob: -8.75467300415039
    6. 'import' → logprob: -8.87967300415039
    7. '```' → logprob: -9.37967300415039
    8. ' return' → logprob: -9.50467300415039
    9. '    
' → logprob: -9.62967300415039
    10. '    ' → logprob: -10.25467300415039

Token 131: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -5.764977686339989e-05
    2. '   ' → logprob: -10.000057220458984
    3. ' print' → logprob: -11.500057220458984
    4. '```' → logprob: -13.500057220458984
    5. 'import' → logprob: -14.125057220458984
    6. '``' → logprob: -18.875057220458984
    7. 'exit' → logprob: -19.125057220458984
    8. '
' → logprob: -19.250057220458984
    9. '	print' → logprob: -20.375057220458984
    10. ' ' → logprob: -21.375057220458984

Token 132: '(val' (ID: 17391)
  Prédit: '(val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(val' → logprob: -0.0005579164135269821
    2. 'val' → logprob: -7.500557899475098
    3. '(' → logprob: -12.250557899475098
    4. ' val' → logprob: -16.375558853149414
    5. ',val' → logprob: -17.375558853149414
    6. '[val' → logprob: -18.625558853149414
    7. '	val' → logprob: -19.000558853149414
    8. ' (' → logprob: -19.500558853149414
    9. '()' → logprob: -19.625558853149414
    10. '```' → logprob: -19.750558853149414

Token 133: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.048601794987916946
    2. ')' → logprob: -3.0486018657684326
    3. ')
' → logprob: -11.173602104187012
    4. ')

' → logprob: -15.923602104187012
    5. ' )
' → logprob: -16.048601150512695
    6. '())
' → logprob: -16.673601150512695
    7. ')`
' → logprob: -17.548601150512695
    8. '()
' → logprob: -18.173601150512695
    9. '   ' → logprob: -18.173601150512695
    10. '")
' → logprob: -18.673601150512695

Token 134: '   ' (ID: 271)
  Prédit: 'exit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'exit' → logprob: -0.18155595660209656
    2. 'import' → logprob: -1.931555986404419
    3. '   ' → logprob: -3.931555986404419
    4. 'return' → logprob: -6.68155574798584
    5. ' exit' → logprob: -9.05655574798584
    6. '	exit' → logprob: -9.80655574798584
    7. '
' → logprob: -9.93155574798584
    8. '    
' → logprob: -11.68155574798584
    9. 'raise' → logprob: -13.18155574798584
    10. '_exit' → logprob: -13.18155574798584

Token 135: ' exit' (ID: 10654)
  Prédit: 'exit'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'exit' (adapté à ' exit') → logprob: -3.845798710244708e-05
    2. 'import' → logprob: -10.750038146972656
    3. 'return' → logprob: -11.000038146972656
    4. 'quit' → logprob: -16.250038146972656
    5. ' exit' → logprob: -16.375038146972656
    6. '   ' → logprob: -17.125038146972656
    7. 'raise' → logprob: -19.125038146972656
    8. '	exit' → logprob: -19.500038146972656
    9. '```' → logprob: -20.875038146972656
    10. 'Exit' → logprob: -21.375038146972656

Token 136: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -7.791440293658525e-05
    2. '(' → logprob: -9.500078201293945
    3. ' ()' → logprob: -13.875078201293945
    4. '()<' → logprob: -15.000078201293945
    5. '()
' → logprob: -15.125078201293945
    6. '()\' → logprob: -15.125078201293945
    7. '()(' → logprob: -15.375078201293945
    8. '();' → logprob: -15.625078201293945
    9. '()

' → logprob: -15.625078201293945
    10. '()`' → logprob: -15.875078201293945

Token 137: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -8.2994620242971e-06
    2. '
' → logprob: -12.125008583068848
    3. '```' → logprob: -14.250008583068848
    4. ' def' → logprob: -14.875008583068848
    5. '\' → logprob: -14.875008583068848
    6. '    
' → logprob: -15.000008583068848
    7. '

' → logprob: -15.125008583068848
    8. '  
' → logprob: -15.125008583068848
    9. '(def' → logprob: -15.750008583068848
    10. 'if' → logprob: -16.12500762939453

Token 138: ' process' (ID: 2273)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.32000795006752014
    2. 'main' → logprob: -1.3200079202651978
    3. ' solve' → logprob: -5.695007801055908
    4. 'solve' → logprob: -5.820007801055908
    5. ' process' → logprob: -9.445008277893066
    6. 'process' → logprob: -9.570008277893066
    7. ' find' → logprob: -9.695008277893066
    8. 'def' → logprob: -9.695008277893066
    9. ' solution' → logprob: -10.820008277893066
    10. 'solution' → logprob: -10.945008277893066

Token 139: '(n' (ID: 2406)
  Prédit: '_list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -0.3848462998867035
    2. '()' → logprob: -1.8848463296890259
    3. '():' → logprob: -2.2598462104797363
    4. '_lists' → logprob: -4.134846210479736
    5. '_input' → logprob: -4.384846210479736
    6. '_' → logprob: -4.634846210479736
    7. '(' → logprob: -5.384846210479736
    8. '_sum' → logprob: -5.884846210479736
    9. '_array' → logprob: -6.009846210479736
    10. '(n' → logprob: -6.134846210479736

Token 140: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -4.644463479053229e-05
    2. '_,' → logprob: -10.500046730041504
    3. ' ,' → logprob: -12.125046730041504
    4. ',_' → logprob: -12.125046730041504
    5. '):' → logprob: -12.750046730041504
    6. ',
' → logprob: -13.750046730041504
    7. ',n' → logprob: -14.000046730041504
    8. ',x' → logprob: -14.125046730041504
    9. '_' → logprob: -14.875046730041504
    10. ')' → logprob: -15.375046730041504

Token 141: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.004668526351451874
    2. 'A' → logprob: -5.879668712615967
    3. ' x' → logprob: -6.379668712615967
    4. 'lst' → logprob: -9.629668235778809
    5. 'X' → logprob: -10.129668235778809
    6. ' A' → logprob: -10.379668235778809
    7. 'a' → logprob: -10.879668235778809
    8. 'xs' → logprob: -12.504668235778809
    9. 'arr' → logprob: -12.879668235778809
    10. '   ' → logprob: -13.754668235778809

Token 142: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.8193366486229934e-05
    2. '):' → logprob: -11.125018119812012
    3. ',
' → logprob: -13.875018119812012
    4. ' ,' → logprob: -14.250018119812012
    5. '_,' → logprob: -15.125018119812012
    6. ',a' → logprob: -15.250018119812012
    7. ',n' → logprob: -15.625018119812012
    8. 's' → logprob: -16.500019073486328
    9. '),' → logprob: -16.625019073486328
    10. ',A' → logprob: -16.625019073486328

Token 143: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.024698583409190178
    2. 'lst' → logprob: -3.899698495864868
    3. ' A' → logprob: -5.899698734283447
    4. 'a' → logprob: -7.024698734283447
    5. 'arr' → logprob: -7.899698734283447
    6. ' lst' → logprob: -9.024698257446289
    7. '   ' → logprob: -12.149698257446289
    8. 'values' → logprob: -12.524698257446289
    9. 'l' → logprob: -13.024698257446289
    10. 'list' → logprob: -13.649698257446289

Token 144: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.020575523376464844
    2. '):
' → logprob: -3.895575523376465
    3. ',' → logprob: -11.270575523376465
    4. '):
' → logprob: -11.270575523376465
    5. ' ):' → logprob: -12.520575523376465
    6. ')' → logprob: -13.270575523376465
    7. '):

' → logprob: -14.145575523376465
    8. ':' → logprob: -14.270575523376465
    9. '_list' → logprob: -14.395575523376465
    10. 's' → logprob: -15.145575523376465

Token 145: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0034587064292281866
    2. ':
' → logprob: -5.878458499908447
    3. '   ' → logprob: -7.628458499908447
    4. '):' → logprob: -9.628458976745605
    5. '():' → logprob: -9.753458976745605
    6. ':list' → logprob: -11.503458976745605
    7. ',' → logprob: -11.753458976745605
    8. '():
' → logprob: -12.003458976745605
    9. '):
' → logprob: -12.003458976745605
    10. ':def' → logprob: -13.003458976745605

Token 146: ' for' (ID: 395)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.03354807198047638
    2. ' A' → logprob: -4.408547878265381
    3. 'prefix' → logprob: -4.908547878265381
    4. 'sorted' → logprob: -5.033547878265381
    5. '   ' → logprob: -6.158547878265381
    6. 'for' (adapté à ' for') → logprob: -6.533547878265381
    7. 'count' → logprob: -7.283547878265381
    8. 'sum' → logprob: -7.533547878265381
    9. 'total' → logprob: -7.783547878265381
    10. 's' → logprob: -8.158548355102539

Token 147: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.4288749694824219
    2. ' i' → logprob: -1.0538749694824219
    3. 'k' → logprob: -10.053874969482422
    4. '   ' → logprob: -10.678874969482422
    5. ' idx' → logprob: -10.678874969482422
    6. 'idx' → logprob: -10.928874969482422
    7. 'index' → logprob: -11.303874969482422
    8. 'length' → logprob: -11.803874969482422
    9. ' length' → logprob: -12.053874969482422
    10. ' k' → logprob: -12.053874969482422

Token 148: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.009811338037252426
    2. 'in' → logprob: -4.6348114013671875
    3. ' ' → logprob: -10.509811401367188
    4. ',' → logprob: -11.384811401367188
    5. 'n' → logprob: -12.134811401367188
    6. '0' → logprob: -12.759811401367188
    7. 's' → logprob: -13.009811401367188
    8. '   ' → logprob: -13.884811401367188
    9. 'i' → logprob: -14.134811401367188
    10. '  ' → logprob: -14.384811401367188

Token 149: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.008615399710834026
    2. ' range' → logprob: -4.758615493774414
    3. '(range' → logprob: -14.883615493774414
    4. '   ' → logprob: -15.258615493774414
    5. ' ' → logprob: -15.883615493774414
    6. '  ' → logprob: -17.133615493774414
    7. '	range' → logprob: -17.258615493774414
    8. ')' → logprob: -17.508615493774414
    9. 'ange' → logprob: -18.383615493774414
    10. 'in' → logprob: -18.383615493774414

Token 150: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.012569339945912361
    2. '(' → logprob: -4.387569427490234
    3. ' (' → logprob: -10.262569427490234
    4. 'n' → logprob: -10.887569427490234
    5. '(len' → logprob: -12.637569427490234
    6. ' n' → logprob: -12.887569427490234
    7. ')' → logprob: -16.262569427490234
    8. ' ' → logprob: -16.762569427490234
    9. '(
' → logprob: -16.762569427490234
    10. '((' → logprob: -17.512569427490234

Token 151: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0022113965824246407
    2. '):
' → logprob: -6.127211570739746
    3. ' ):' → logprob: -10.877211570739746
    4. '+' → logprob: -12.127211570739746
    5. ':' → logprob: -14.127211570739746
    6. '):
' → logprob: -14.627211570739746
    7. '   ' → logprob: -15.127211570739746
    8. ',' → logprob: -16.12721061706543
    9. '():' → logprob: -16.25221061706543
    10. ')' → logprob: -16.37721061706543

Token 152: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.013686569407582283
    2. '   ' → logprob: -4.513686656951904
    3. ' prefix' → logprob: -6.638686656951904
    4. 'prefix' → logprob: -7.013686656951904
    5. ',' → logprob: -9.013686180114746
    6. ' if' → logprob: -9.888686180114746
    7. '(prefix' → logprob: -10.013686180114746
    8. '_prefix' → logprob: -10.388686180114746
    9. ' cumulative' → logprob: -11.138686180114746
    10. 'a' → logprob: -11.263686180114746

Token 153: ' prefix' (ID: 18633)
  Prédit: 'prefix'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prefix' (adapté à ' prefix') → logprob: -0.7667304873466492
    2. ' prefix' → logprob: -1.266730546951294
    3. '   ' → logprob: -1.391730546951294
    4. ' current' → logprob: -6.391730308532715
    5. 'current' → logprob: -6.766730308532715
    6. '       ' → logprob: -7.391730308532715
    7. 'psum' → logprob: -7.391730308532715
    8. ' curr' → logprob: -8.641730308532715
    9. 'curr' → logprob: -8.766730308532715
    10. 'sum' → logprob: -9.391730308532715

Token 154: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.00021474185632541776
    2. 'sum' → logprob: -8.875214576721191
    3. '_' → logprob: -10.000214576721191
    4. '_s' → logprob: -11.125214576721191
    5. ' =' → logprob: -11.375214576721191
    6. '=_' → logprob: -14.375214576721191
    7. '=sum' → logprob: -14.625214576721191
    8. '=' → logprob: -15.000214576721191
    9. 's' → logprob: -15.125214576721191
    10. '_len' → logprob: -15.500214576721191

Token 155: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1269380897283554
    2. '=' → logprob: -2.1269381046295166
    3. '   ' → logprob: -11.751937866210938
    4. ' ' → logprob: -14.001937866210938
    5. ' +=' → logprob: -15.001937866210938
    6. '    ' → logprob: -15.376937866210938
    7. ',' → logprob: -15.376937866210938
    8. ')' → logprob: -15.876937866210938
    9. '=sum' → logprob: -16.126937866210938
    10. '  ' → logprob: -16.501937866210938

Token 156: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.03401275351643562
    2. ' get' → logprob: -3.409012794494629
    3. 'A' → logprob: -8.659012794494629
    4. '0' → logprob: -9.284012794494629
    5. 'sum' → logprob: -9.409012794494629
    6. ' A' → logprob: -11.409012794494629
    7. ' sum' → logprob: -12.534012794494629
    8. ' ' → logprob: -13.534012794494629
    9. '   ' → logprob: -14.159012794494629
    10. '(get' → logprob: -14.284012794494629

Token 157: '_prefix' (ID: 33197)
  Prédit: '_prefix'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_prefix' → logprob: -0.00020795092859771103
    2. 'prefix' → logprob: -8.500207901000977
    3. '_' → logprob: -12.875207901000977
    4. 'A' → logprob: -14.500207901000977
    5. '_suffix' → logprob: -14.500207901000977
    6. '_A' → logprob: -14.875207901000977
    7. '```' → logprob: -16.000207901000977
    8. ' prefix' → logprob: -16.500207901000977
    9. '_PREFIX' → logprob: -17.250207901000977
    10. '_pref' → logprob: -17.250207901000977

Token 158: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -1.7120533811976202e-05
    2. 'sum' → logprob: -11.000017166137695
    3. 's' → logprob: -15.750017166137695
    4. '_s' → logprob: -16.250017166137695
    5. '_list' → logprob: -17.000017166137695
    6. ' sum' → logprob: -17.875017166137695
    7. '_' → logprob: -18.875017166137695
    8. '   ' → logprob: -19.000017166137695
    9. 'def' → logprob: -19.500017166137695
    10. '_len' → logprob: -19.625017166137695

Token 159: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -4.723352049040841e-06
    2. '(' → logprob: -12.375004768371582
    3. '(
' → logprob: -15.500004768371582
    4. ',' → logprob: -16.750003814697266
    5. '(I' → logprob: -17.125003814697266
    6. ' (' → logprob: -17.250003814697266
    7. 'A' → logprob: -17.875003814697266
    8. ',A' → logprob: -18.125003814697266
    9. ')' → logprob: -18.375003814697266
    10. '```' → logprob: -19.250003814697266

Token 160: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0019426802173256874
    2. ',i' → logprob: -6.2519426345825195
    3. ' ,' → logprob: -11.75194263458252
    4. 'i' → logprob: -12.25194263458252
    5. '(i' → logprob: -14.62694263458252
    6. '[i' → logprob: -15.12694263458252
    7. '   ' → logprob: -15.87694263458252
    8. ',
' → logprob: -16.376943588256836
    9. ' i' → logprob: -16.501943588256836
    10. 's' → logprob: -16.626943588256836

Token 161: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.00033593899570405483
    2. ' i' → logprob: -8.000335693359375
    3. ')i' → logprob: -15.750335693359375
    4. '   ' → logprob: -15.875335693359375
    5. ')' → logprob: -16.000335693359375
    6. '	i' → logprob: -16.500335693359375
    7. ' ' → logprob: -17.125335693359375
    8. '[i' → logprob: -18.000335693359375
    9. '<|end|>' → logprob: -18.750335693359375
    10. '0' → logprob: -18.750335693359375

Token 162: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02325642853975296
    2. ')
' → logprob: -3.773256540298462
    3. '       ' → logprob: -12.023256301879883
    4. ')

' → logprob: -12.898256301879883
    5. ')
' → logprob: -13.648256301879883
    6. '   ' → logprob: -14.398256301879883
    7. ' )' → logprob: -14.648256301879883
    8. ')`' → logprob: -17.023256301879883
    9. ' )
' → logprob: -17.148256301879883
    10. '))' → logprob: -17.273256301879883

Token 163: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.000377645599655807
    2. '<|end|>' → logprob: -8.250377655029297
    3. '
' → logprob: -10.250377655029297
    4. ' if' → logprob: -10.375377655029297
    5. '        
' → logprob: -10.875377655029297
    6. ')' → logprob: -11.375377655029297
    7. 'if' → logprob: -12.250377655029297
    8. '   ' → logprob: -12.375377655029297
    9. '<|end|>' → logprob: -12.625377655029297
    10. ',' → logprob: -13.125377655029297

Token 164: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.0004013561410829425
    2. ' if' → logprob: -8.125401496887207
    3. '       ' → logprob: -9.250401496887207
    4. '   ' → logprob: -11.625401496887207
    5. '           ' → logprob: -16.62540054321289
    6. ' ' → logprob: -16.62540054321289
    7. '	if' → logprob: -16.87540054321289
    8. '
' → logprob: -17.37540054321289
    9. 'If' → logprob: -17.37540054321289
    10. 'x' → logprob: -18.25040054321289

Token 165: ' check' (ID: 2371)
  Prédit: ' check'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' check' → logprob: -0.25194668769836426
    2. 'check' → logprob: -1.5019466876983643
    3. '           ' → logprob: -11.876946449279785
    4. '   ' → logprob: -12.626946449279785
    5. '(check' → logprob: -12.626946449279785
    6. '    ' → logprob: -13.626946449279785
    7. ' not' → logprob: -13.876946449279785
    8. '	check' → logprob: -14.251946449279785
    9. '       ' → logprob: -14.501946449279785
    10. ' ' → logprob: -15.876946449279785

Token 166: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -1.9361264946837764e-07
    2. '_' → logprob: -15.875
    3. '_s' → logprob: -17.625
    4. '_and' → logprob: -18.625
    5. 'sum' → logprob: -18.625
    6. '```' → logprob: -18.75
    7. '_ex' → logprob: -19.375
    8. '_max' → logprob: -19.75
    9. 's' → logprob: -19.875
    10. ' _' → logprob: -20.125

Token 167: '_ex' (ID: 5724)
  Prédit: '_ex'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_ex' → logprob: -0.043097734451293945
    2. '_equals' → logprob: -3.168097734451294
    3. 'ex' → logprob: -10.168097496032715
    4. '(ex' → logprob: -10.418097496032715
    5. 'equals' → logprob: -11.793097496032715
    6. '_exc' → logprob: -12.418097496032715
    7. '_' → logprob: -12.543097496032715
    8. '_eq' → logprob: -13.043097496032715
    9. '_equal' → logprob: -13.043097496032715
    10. '_equ' → logprob: -13.168097496032715

Token 168: 'ceeds' (ID: 28245)
  Prédit: 'ceeds'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ceeds' → logprob: -0.0009277798235416412
    2. 'e' → logprob: -7.500927925109863
    3. 'ce' → logprob: -8.375927925109863
    4. 'ceed' → logprob: -9.125927925109863
    5. '```' → logprob: -12.000927925109863
    6. 'c' → logprob: -12.000927925109863
    7. '>' → logprob: -12.125927925109863
    8. 'cedes' → logprob: -12.250927925109863
    9. '(' → logprob: -12.375927925109863
    10. '<' → logprob: -13.750927925109863

Token 169: '(prefix' (ID: 59324)
  Prédit: '(prefix'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(prefix' → logprob: -1.6047699318733066e-05
    2. '(' → logprob: -11.500016212463379
    3. ' (' → logprob: -12.250016212463379
    4. 'prefix' → logprob: -14.125016212463379
    5. '(pref' → logprob: -15.000016212463379
    6. ' prefix' → logprob: -17.125015258789062
    7. '(pre' → logprob: -19.000015258789062
    8. '(parent' → logprob: -19.125015258789062
    9. '(predicate' → logprob: -19.125015258789062
    10. '_prefix' → logprob: -19.375015258789062

Token 170: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.0019307781476527452
    2. 'sum' → logprob: -6.2519307136535645
    3. 'prefix' → logprob: -14.501931190490723
    4. 's' → logprob: -14.876931190490723
    5. '_prefix' → logprob: -15.501931190490723
    6. 'ix' → logprob: -15.501931190490723
    7. 'fix' → logprob: -15.626931190490723
    8. 'x' → logprob: -15.751931190490723
    9. '_s' → logprob: -16.376930236816406
    10. ')' → logprob: -16.501930236816406

Token 171: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0010677010286599398
    2. ' ,' → logprob: -7.251067638397217
    3. ',x' → logprob: -8.626068115234375
    4. '(x' → logprob: -10.001068115234375
    5. ',A' → logprob: -10.126068115234375
    6. ',n' → logprob: -10.626068115234375
    7. '(' → logprob: -10.751068115234375
    8. ',p' → logprob: -12.001068115234375
    9. '(prefix' → logprob: -12.126068115234375
    10. ',i' → logprob: -12.376068115234375

Token 172: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.1426781415939331
    2. ' x' → logprob: -2.0176782608032227
    3. ')x' → logprob: -13.767678260803223
    4. ')' → logprob: -14.392678260803223
    5. '	x' → logprob: -14.517678260803223
    6. '   ' → logprob: -15.142678260803223
    7. '(x' → logprob: -15.517678260803223
    8. ' ' → logprob: -15.517678260803223
    9. '
' → logprob: -15.767678260803223
    10. '>x' → logprob: -16.892677307128906

Token 173: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.002744246507063508
    2. '):
' → logprob: -6.127744197845459
    3. ':' → logprob: -8.127744674682617
    4. ' ):' → logprob: -8.502744674682617
    5. ')' → logprob: -10.127744674682617
    6. ' or' → logprob: -11.627744674682617
    7. '   ' → logprob: -12.877744674682617
    8. '():' → logprob: -13.127744674682617
    9. '):
' → logprob: -13.502744674682617
    10. ',' → logprob: -13.752744674682617

Token 174: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.002022497123107314
    2. 'print' → logprob: -6.3770222663879395
    3. ' print' → logprob: -8.252022743225098
    4. '       ' → logprob: -10.502022743225098
    5. 'break' → logprob: -11.377022743225098
    6. '          ' → logprob: -12.252022743225098
    7. ':' → logprob: -12.377022743225098
    8. 'continue' → logprob: -12.752022743225098
    9. '               ' → logprob: -13.377022743225098
    10. ' break' → logprob: -13.502022743225098

Token 175: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.08383812755346298
    2. '           ' → logprob: -2.5838382244110107
    3. 'break' → logprob: -5.958837985992432
    4. 'return' → logprob: -6.583837985992432
    5. 'continue' → logprob: -8.20883846282959
    6. '       ' → logprob: -8.33383846282959
    7. '               ' → logprob: -8.58383846282959
    8. '   ' → logprob: -8.95883846282959
    9. ' print' → logprob: -9.08383846282959
    10. 'for' → logprob: -12.33383846282959

Token 176: '_and' (ID: 18645)
  Prédit: '_and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_and' → logprob: -0.11634869128465652
    2. '(i' → logprob: -2.2413487434387207
    3. '(-' → logprob: -6.241348743438721
    4. '(' → logprob: -7.116348743438721
    5. 'and' → logprob: -7.991348743438721
    6. '_i' → logprob: -9.741348266601562
    7. '0' → logprob: -9.991348266601562
    8. 'And' → logprob: -10.116348266601562
    9. 'i' → logprob: -10.241348266601562
    10. '("-' → logprob: -10.491348266601562

Token 177: '_exit' (ID: 41242)
  Prédit: 'exit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'exit' → logprob: -0.0010456704767420888
    2. '_exit' → logprob: -6.8760457038879395
    3. 'xit' → logprob: -11.751045227050781
    4. 'print' → logprob: -13.501045227050781
    5. ' exit' → logprob: -13.501045227050781
    6. 'x' → logprob: -14.001045227050781
    7. 'continue' → logprob: -15.001045227050781
    8. 'Exit' → logprob: -15.001045227050781
    9. 'return' → logprob: -15.376045227050781
    10. 'break' → logprob: -15.876045227050781

Token 178: '(i' (ID: 3649)
  Prédit: '(i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -0.0013433275744318962
    2. 'i' → logprob: -6.626343250274658
    3. '(' → logprob: -11.126343727111816
    4. ' i' → logprob: -13.751343727111816
    5. '(A' → logprob: -15.001343727111816
    6. '(len' → logprob: -15.501343727111816
    7. '((' → logprob: -15.626343727111816
    8. 's' → logprob: -15.876343727111816
    9. '   ' → logprob: -16.5013427734375
    10. '()' → logprob: -16.5013427734375

Token 179: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08334316313266754
    2. '+' → logprob: -2.583343267440796
    3. ')
' → logprob: -5.708343029022217
    4. ' +' → logprob: -7.083343029022217
    5. ' )' → logprob: -9.083343505859375
    6. '-' → logprob: -9.083343505859375
    7. '+)' → logprob: -10.708343505859375
    8. ')

' → logprob: -11.458343505859375
    9. '```' → logprob: -12.583343505859375
    10. '0' → logprob: -12.833343505859375

Token 180: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3908880352973938
    2. '       ' → logprob: -1.140887975692749
    3. 'if' → logprob: -6.015888214111328
    4. 'print' → logprob: -6.515888214111328
    5. ' if' → logprob: -9.890888214111328
    6. '           ' → logprob: -11.140888214111328
    7. '    ' → logprob: -12.015888214111328
    8. 'def' → logprob: -12.515888214111328
    9. '  ' → logprob: -13.015888214111328
    10. '
' → logprob: -13.265888214111328

Token 181: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.015686368569731712
    2. '   ' → logprob: -4.515686511993408
    3. 'elif' → logprob: -5.890686511993408
    4. '       ' → logprob: -6.515686511993408
    5. ' if' → logprob: -7.890686511993408
    6. '
' → logprob: -12.51568603515625
    7. ' elif' → logprob: -14.01568603515625
    8. '```' → logprob: -14.14068603515625
    9. 'return' → logprob: -14.39068603515625
    10. '    
' → logprob: -14.51568603515625

Token 182: ' check' (ID: 2371)
  Prédit: ' check'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' check' → logprob: -0.47408124804496765
    2. 'check' → logprob: -0.97408127784729
    3. '(check' → logprob: -12.849081039428711
    4. ' ' → logprob: -14.349081039428711
    5. '	check' → logprob: -15.099081039428711
    6. '   ' → logprob: -15.349081039428711
    7. 'prefix' → logprob: -15.849081039428711
    8. 'not' → logprob: -16.34908103942871
    9. ' ' → logprob: -16.72408103942871
    10. ' not' → logprob: -16.84908103942871

Token 183: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -1.5048530030981055e-06
    2. 'sum' → logprob: -14.000001907348633
    3. '(_' → logprob: -15.250001907348633
    4. 'and' → logprob: -15.375001907348633
    5. '_' → logprob: -16.625001907348633
    6. '_s' → logprob: -17.375001907348633
    7. '_and' → logprob: -17.500001907348633
    8. '_SUM' → logprob: -17.500001907348633
    9. '__' → logprob: -17.625001907348633
    10. '\' → logprob: -18.000001907348633

Token 184: '_equals' (ID: 165870)
  Prédit: '_equals'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_equals' → logprob: -0.005976554471999407
    2. '_ex' → logprob: -5.130976676940918
    3. 'equals' → logprob: -10.255976676940918
    4. '_EQUALS' → logprob: -12.130976676940918
    5. 'ex' → logprob: -13.380976676940918
    6. 'Equals' → logprob: -13.630976676940918
    7. '_exact' → logprob: -13.755976676940918
    8. '_eq' → logprob: -14.130976676940918
    9. '_equ' → logprob: -14.505976676940918
    10. '_equal' → logprob: -14.630976676940918

Token 185: '(prefix' (ID: 59324)
  Prédit: '(prefix'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(prefix' → logprob: -1.2664456789934775e-06
    2. 'prefix' → logprob: -14.375000953674316
    3. '(' → logprob: -14.500000953674316
    4. '(pref' → logprob: -16.125001907348633
    5. ' (' → logprob: -17.375001907348633
    6. '(predicate' → logprob: -18.000001907348633
    7. ' prefix' → logprob: -18.500001907348633
    8. '(pre' → logprob: -18.625001907348633
    9. '
' → logprob: -19.500001907348633
    10. '(parent' → logprob: -20.125001907348633

Token 186: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.3926749527454376
    2. 'sum' → logprob: -1.1426749229431152
    3. '(prefix' → logprob: -5.767674922943115
    4. 'prefix' → logprob: -6.017674922943115
    5. 'um' → logprob: -9.017675399780273
    6. 's' → logprob: -9.892675399780273
    7. 'Sum' → logprob: -10.892675399780273
    8. 'refix' → logprob: -12.017675399780273
    9. '(sum' → logprob: -12.392675399780273
    10. 'e' → logprob: -12.642675399780273

Token 187: ',' (ID: 11)
  Prédit: '(prefix'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(prefix' → logprob: -0.00016420685278717428
    2. '(' → logprob: -8.750164031982422
    3. '(pref' → logprob: -12.750164031982422
    4. ',' → logprob: -13.500164031982422
    5. ' (' → logprob: -14.125164031982422
    6. '(pre' → logprob: -15.875164031982422
    7. 'prefix' → logprob: -16.375164031982422
    8. '(parent' → logprob: -16.500164031982422
    9. ')' → logprob: -16.625164031982422
    10. ' ,' → logprob: -17.125164031982422

Token 188: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.004094427917152643
    2. ' x' → logprob: -5.50409460067749
    3. 'prefix' → logprob: -11.379094123840332
    4. '(x' → logprob: -12.504094123840332
    5. ',x' → logprob: -15.379094123840332
    6. ')x' → logprob: -15.379094123840332
    7. ' prefix' → logprob: -15.879094123840332
    8. '	x' → logprob: -16.37909507751465
    9. ')' → logprob: -16.37909507751465
    10. '   ' → logprob: -16.75409507751465

Token 189: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.000775442982558161
    2. '):
' → logprob: -7.625775337219238
    3. ':' → logprob: -9.000775337219238
    4. ',' → logprob: -9.125775337219238
    5. ' ):' → logprob: -10.625775337219238
    6. '(i' → logprob: -11.125775337219238
    7. ')' → logprob: -12.125775337219238
    8. '(' → logprob: -12.250775337219238
    9. '():' → logprob: -13.250775337219238
    10. '   ' → logprob: -13.875775337219238

Token 190: '           ' (ID: 352)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.02263917773962021
    2. '           ' → logprob: -3.897639274597168
    3. '   ' → logprob: -6.647639274597168
    4. '       ' → logprob: -7.522639274597168
    5. ' print' → logprob: -9.147639274597168
    6. 'continue' → logprob: -9.772639274597168
    7. 'i' → logprob: -10.397639274597168
    8. '(print' → logprob: -10.522639274597168
    9. '```' → logprob: -11.897639274597168
    10. '	print' → logprob: -11.897639274597168

Token 191: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -2.3915141355246305e-05
    2. 'continue' → logprob: -11.37502384185791
    3. ' print' → logprob: -12.12502384185791
    4. '   ' → logprob: -13.12502384185791
    5. 'prin' → logprob: -13.12502384185791
    6. '
' → logprob: -14.75002384185791
    7. 'break' → logprob: -15.00002384185791
    8. 'pr' → logprob: -15.12502384185791
    9. 'i' → logprob: -15.25002384185791
    10. 'pass' → logprob: -15.37502384185791

Token 192: '_and' (ID: 18645)
  Prédit: '(i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(i' → logprob: -0.0036311924923211336
    2. '(' → logprob: -5.628631114959717
    3. 'i' → logprob: -10.628631591796875
    4. '(int' → logprob: -13.003631591796875
    5. '(
' → logprob: -13.003631591796875
    6. '()' → logprob: -14.503631591796875
    7. '(ii' → logprob: -14.753631591796875
    8. ' (' → logprob: -15.128631591796875
    9. '{i' → logprob: -15.878631591796875
    10. '((' → logprob: -16.128631591796875

Token 193: '_exit' (ID: 41242)
  Prédit: '(i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -0.12367402017116547
    2. 'i' → logprob: -2.373673915863037
    3. 'exit' → logprob: -4.248673915863037
    4. '_exit' → logprob: -5.248673915863037
    5. '_and' → logprob: -6.748673915863037
    6. '(' → logprob: -7.373673915863037
    7. '0' → logprob: -7.873673915863037
    8. 'end' → logprob: -8.123674392700195
    9. 'and' → logprob: -8.248674392700195
    10. ' (' → logprob: -8.748674392700195

Token 194: '(i' (ID: 3649)
  Prédit: '(i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -0.00011331788846291602
    2. '(' → logprob: -9.125113487243652
    3. 'i' → logprob: -12.375113487243652
    4. '(
' → logprob: -16.375112533569336
    5. '()' → logprob: -17.375112533569336
    6. '(ii' → logprob: -18.625112533569336
    7. ' (' → logprob: -18.750112533569336
    8. '((' → logprob: -18.750112533569336
    9. '(I' → logprob: -19.000112533569336
    10. '('' → logprob: -19.000112533569336

Token 195: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.06827603280544281
    2. ')' → logprob: -3.0682759284973145
    3. ' +' → logprob: -3.9432759284973145
    4. '+)' → logprob: -9.443276405334473
    5. ')
' → logprob: -11.193276405334473
    6. '-' → logprob: -12.193276405334473
    7. ' )' → logprob: -12.193276405334473
    8. '+
' → logprob: -12.568276405334473
    9. '   ' → logprob: -13.943276405334473
    10. '+')' → logprob: -14.068276405334473

Token 196: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0001831565605243668
    2. ' ' → logprob: -8.62518310546875
    3. '
' → logprob: -12.62518310546875
    4. '```' → logprob: -16.62518310546875
    5. '<|end|>' → logprob: -16.75018310546875
    6. '   ' → logprob: -17.25018310546875
    7. ' 
' → logprob: -17.50018310546875
    8. ' ' → logprob: -18.12518310546875
    9. '0' → logprob: -18.25018310546875
    10. '`' → logprob: -18.37518310546875

Token 197: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.0280383548888494e-06
    2. ' ' → logprob: -14.000000953674316
    3. '```' → logprob: -16.875001907348633
    4. '   ' → logprob: -17.125001907348633
    5. '2' → logprob: -18.000001907348633
    6. '0' → logprob: -18.250001907348633
    7. '
' → logprob: -18.500001907348633
    8. '`' → logprob: -20.000001907348633
    9. '１' → logprob: -20.187501907348633
    10. '``' → logprob: -20.312501907348633

Token 198: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.000945172505453229
    2. ')
' → logprob: -7.250945091247559
    3. '())' → logprob: -8.750945091247559
    4. '<|end|>' → logprob: -9.875945091247559
    5. '()' → logprob: -11.375945091247559
    6. '')' → logprob: -12.875945091247559
    7. '")' → logprob: -13.250945091247559
    8. ')return' → logprob: -13.500945091247559
    9. '```' → logprob: -13.750945091247559
    10. '
' → logprob: -13.750945091247559

Token 199: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.025870345532894135
    2. '<|end|>' → logprob: -4.900870323181152
    3. '   ' → logprob: -5.025870323181152
    4. '
' → logprob: -5.650870323181152
    5. 'for' → logprob: -5.775870323181152
    6. 'def' → logprob: -6.150870323181152
    7. 'n' → logprob: -6.900870323181152
    8. '#' → logprob: -7.650870323181152
    9. 'return' → logprob: -8.150870323181152
    10. 'i' → logprob: -8.150870323181152

Token 200: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -2.2200749754119897e-06
    2. '   ' → logprob: -13.500001907348633
    3. ' print' → logprob: -14.625001907348633
    4. '#' → logprob: -16.000001907348633
    5. '```' → logprob: -16.125001907348633
    6. 'def' → logprob: -16.250001907348633
    7. 'return' → logprob: -16.500001907348633
    8. '#print' → logprob: -17.375001907348633
    9. 'else' → logprob: -18.000001907348633
    10. '
' → logprob: -18.500001907348633

Token 201: '(i' (ID: 3649)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.14979907870292664
    2. '(-' → logprob: -2.024799108505249
    3. '(' → logprob: -5.39979887008667
    4. 'n' → logprob: -6.52479887008667
    5. '(len' → logprob: -7.27479887008667
    6. '()' → logprob: -8.899799346923828
    7. '-' → logprob: -9.899799346923828
    8. '_and' → logprob: -10.024799346923828
    9. 'and' → logprob: -10.149799346923828
    10. '((' → logprob: -10.649799346923828

Token 202: ')

' (ID: 1029)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.016058770939707756
    2. ' +' → logprob: -4.141058921813965
    3. ')' → logprob: -10.766058921813965
    4. '+)' → logprob: -13.266058921813965
    5. ')+' → logprob: -14.391058921813965
    6. '+
' → logprob: -14.391058921813965
    7. '()+' → logprob: -15.141058921813965
    8. '1' → logprob: -16.39105796813965
    9. '＋' → logprob: -17.26605796813965
    10. '+

' → logprob: -17.26605796813965

Token 203: 'def' (ID: 1314)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.03472146391868591
    2. '#' → logprob: -3.9097213745117188
    3. '<|end|>' → logprob: -5.284721374511719
    4. '
' → logprob: -5.659721374511719
    5. 'def' → logprob: -6.034721374511719
    6. 'x' → logprob: -7.034721374511719
    7. 'if' → logprob: -7.534721374511719
    8. 'i' → logprob: -7.534721374511719
    9. '\n' → logprob: -8.034721374511719
    10. ')' → logprob: -9.034721374511719

Token 204: ' main' (ID: 2758)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.2892719507217407
    2. 'main' → logprob: -1.6642719507217407
    3. '__' → logprob: -3.164271831512451
    4. 'if' → logprob: -4.039271831512451
    5. 'get' → logprob: -6.414271831512451
    6. ' main' → logprob: -8.66427230834961
    7. 'lambda' → logprob: -9.78927230834961
    8. ' def' → logprob: -10.03927230834961
    9. '```' → logprob: -10.41427230834961
    10. ' __' → logprob: -10.78927230834961

Token 205: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -3.292907877039397e-06
    2. ' ():' → logprob: -12.87500286102295
    3. '():
' → logprob: -14.37500286102295
    4. '()' → logprob: -16.625003814697266
    5. '():
' → logprob: -19.000003814697266
    6. '(' → logprob: -20.500003814697266
    7. '()>' → logprob: -20.875003814697266
    8. '():

' → logprob: -21.125003814697266
    9. ':' → logprob: -22.125003814697266
    10. '().' → logprob: -22.125003814697266

Token 206: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5086225867271423
    2. 'n' → logprob: -1.008622646331787
    3. ' n' → logprob: -3.383622646331787
    4. '	n' → logprob: -10.633622169494629
    5. '(n' → logprob: -12.883622169494629
    6. ',n' → logprob: -13.258622169494629
    7. '_n' → logprob: -13.883622169494629
    8. ' ' → logprob: -14.133622169494629
    9. '```' → logprob: -14.508622169494629
    10. '  ' → logprob: -14.883622169494629

Token 207: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -3.7385154428193346e-05
    2. '   ' → logprob: -10.25003719329834
    3. ' n' → logprob: -13.25003719329834
    4. '	n' → logprob: -16.000038146972656
    5. '(n' → logprob: -16.500038146972656
    6. 'def' → logprob: -18.250038146972656
    7. '_n' → logprob: -18.625038146972656
    8. '
' → logprob: -19.125038146972656
    9. ' ' → logprob: -19.625038146972656
    10. ',n' → logprob: -20.000038146972656

Token 208: '_and' (ID: 18645)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0003079334564972669
    2. ',x' → logprob: -8.5003080368042
    3. 'x' → logprob: -9.5003080368042
    4. ' ,' → logprob: -10.5003080368042
    5. ' x' → logprob: -14.2503080368042
    6. '_,' → logprob: -14.5003080368042
    7. '_x' → logprob: -15.3753080368042
    8. ' ' → logprob: -16.000307083129883
    9. '   ' → logprob: -16.125307083129883
    10. '‌,' → logprob: -16.187807083129883

Token 209: '_x' (ID: 7054)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.002498490735888481
    2. '_x' → logprob: -6.002498626708984
    3. ' x' → logprob: -10.752498626708984
    4. '=' → logprob: -14.877498626708984
    5. 'xs' → logprob: -15.127498626708984
    6. ' =' → logprob: -15.377498626708984
    7. '_' → logprob: -15.502498626708984
    8. 'X' → logprob: -16.252498626708984
    9. '	x' → logprob: -16.752498626708984
    10. ',x' → logprob: -17.252498626708984

Token 210: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6932031512260437
    2. ' =' → logprob: -0.6932031512260437
    3. '()' → logprob: -9.81820297241211
    4. ')' → logprob: -14.81820297241211
    5. '(' → logprob: -15.19320297241211
    6. ',' → logprob: -15.31820297241211
    7. '   ' → logprob: -16.06820297241211
    8. '=[]' → logprob: -16.06820297241211
    9. 's' → logprob: -16.44320297241211
    10. '＝' → logprob: -16.44320297241211

Token 211: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -1.0206720617134124e-05
    2. ' get' → logprob: -11.50001049041748
    3. '(get' → logprob: -20.500009536743164
    4. '	get' → logprob: -22.000009536743164
    5. '   ' → logprob: -23.500009536743164
    6. '.get' → logprob: -23.750009536743164
    7. '_get' → logprob: -24.000009536743164
    8. '[get' → logprob: -24.375009536743164
    9. '=get' → logprob: -24.750009536743164
    10. 'read' → logprob: -25.125009536743164

Token 212: '_n' (ID: 2170)
  Prédit: '_n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: -1.3856492842023727e-06
    2. 'n' → logprob: -13.750000953674316
    3. '_and' → logprob: -15.625000953674316
    4. '```' → logprob: -16.875001907348633
    5. '(n' → logprob: -17.250001907348633
    6. 'def' → logprob: -18.750001907348633
    7. '()' → logprob: -19.125001907348633
    8. '_' → logprob: -19.375001907348633
    9. '_x' → logprob: -19.625001907348633
    10. 'and' → logprob: -19.625001907348633

Token 213: '_and' (ID: 18645)
  Prédit: '_and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_and' → logprob: -9.088346359931165e-07
    2. 'and' → logprob: -14.000000953674316
    3. '_n' → logprob: -17.125
    4. '()' → logprob: -18.0
    5. ' and' → logprob: -18.5
    6. '_' → logprob: -18.5
    7. '```' → logprob: -18.5
    8. '_AND' → logprob: -19.0
    9. '_or' → logprob: -19.125
    10. '_an' → logprob: -20.25

Token 214: '_x' (ID: 7054)
  Prédit: 'put'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'put' → logprob: -0.0305181834846735
    2. 'x' → logprob: -3.5305182933807373
    3. '_x' → logprob: -8.405518531799316
    4. 'input' → logprob: -8.530518531799316
    5. 'puts' → logprob: -9.530518531799316
    6. '_input' → logprob: -9.655518531799316
    7. 'get' → logprob: -10.030518531799316
    8. 'ut' → logprob: -10.155518531799316
    9. '_put' → logprob: -10.280518531799316
    10. 'n' → logprob: -10.405518531799316

Token 215: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.31996285915374756
    2. '()
' → logprob: -1.3199628591537476
    3. '   ' → logprob: -5.069962978363037
    4. '
' → logprob: -8.319962501525879
    5. 'def' → logprob: -10.444962501525879
    6. '()\' → logprob: -10.694962501525879
    7. '(n' → logprob: -11.069962501525879
    8. '()
' → logprob: -11.194962501525879
    9. '<|end|>' → logprob: -11.319962501525879
    10. '()[' → logprob: -11.694962501525879

Token 216: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.025613464415073395
    2. '
' → logprob: -4.275613307952881
    3. 'A' → logprob: -4.775613307952881
    4. 'n' → logprob: -6.775613307952881
    5. '    
' → logprob: -7.150613307952881
    6. ' A' → logprob: -7.775613307952881
    7. 'x' → logprob: -8.400613784790039
    8. '[' → logprob: -9.150613784790039
    9. '<|end|>' → logprob: -9.650613784790039
    10. '```' → logprob: -10.400613784790039

Token 217: ' n' (ID: 297)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.006204526871442795
    2. ' A' → logprob: -5.631204605102539
    3. '   ' → logprob: -6.006204605102539
    4. 'a' → logprob: -9.131204605102539
    5. 'n' (adapté à ' n') → logprob: -11.631204605102539
    6. 'x' → logprob: -11.881204605102539
    7. ' ' → logprob: -12.006204605102539
    8. '  ' → logprob: -13.381204605102539
    9. '	A' → logprob: -13.506204605102539
    10. '
' → logprob: -13.881204605102539

Token 218: ' =' (ID: 314)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -2.4868770196917467e-05
    2. ' ,' → logprob: -11.250024795532227
    3. ' =' → logprob: -12.125024795532227
    4. ',x' → logprob: -12.500024795532227
    5. '=' → logprob: -13.125024795532227
    6. ',n' → logprob: -15.500024795532227
    7. ',
' → logprob: -16.000024795532227
    8. '_,' → logprob: -16.250024795532227
    9. '   ' → logprob: -16.250024795532227
    10. ',

' → logprob: -16.750024795532227

Token 219: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.029750604182481766
    2. ' n' → logprob: -3.5297505855560303
    3. 'int' → logprob: -16.02975082397461
    4. '	n' → logprob: -18.52975082397461
    5. ' int' → logprob: -19.02975082397461
    6. '   ' → logprob: -20.40475082397461
    7. '_n' → logprob: -20.77975082397461
    8. ' н' → logprob: -20.90475082397461
    9. '(n' → logprob: -21.65475082397461
    10. ',n' → logprob: -21.77975082397461

Token 220: '_and' (ID: 18645)
  Prédit: '_and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_and' → logprob: -1.6240566083070007e-06
    2. 'and' → logprob: -14.125001907348633
    3. '[' → logprob: -14.250001907348633
    4. '_AND' → logprob: -16.625001907348633
    5. '_' → logprob: -19.375001907348633
    6. '_not' → logprob: -19.625001907348633
    7. 'andr' → logprob: -19.625001907348633
    8. '_n' → logprob: -19.750001907348633
    9. '   ' → logprob: -19.750001907348633
    10. ' and' → logprob: -19.875001907348633

Token 221: '_x' (ID: 7054)
  Prédit: '_x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_x' → logprob: -0.008487391285598278
    2. '_and' → logprob: -5.258487224578857
    3. 'x' → logprob: -5.758487224578857
    4. 'and' → logprob: -9.383487701416016
    5. '_n' → logprob: -13.508487701416016
    6. 'n' → logprob: -13.508487701416016
    7. '(x' → logprob: -13.758487701416016
    8. '[x' → logprob: -14.258487701416016
    9. ',x' → logprob: -15.008487701416016
    10. '[' → logprob: -15.383487701416016

Token 222: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.5048530030981055e-06
    2. ' [' → logprob: -13.625001907348633
    3. '0' → logprob: -15.875001907348633
    4. '```' → logprob: -16.750001907348633
    5. '[
' → logprob: -17.750001907348633
    6. '\[' → logprob: -18.500001907348633
    7. ' ' → logprob: -18.625001907348633
    8. 'def' → logprob: -18.750001907348633
    9. '   ' → logprob: -19.000001907348633
    10. '
' → logprob: -20.000001907348633

Token 223: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -5.5577775128767826e-06
    2. ' ' → logprob: -12.125005722045898
    3. '   ' → logprob: -18.5000057220459
    4. '
' → logprob: -19.3750057220459
    5. '[' → logprob: -19.5000057220459
    6. '۰' → logprob: -20.1250057220459
    7. '1' → logprob: -20.3750057220459
    8. ']' → logprob: -20.5625057220459
    9. ')' → logprob: -20.6250057220459
    10. '０' → logprob: -20.7500057220459

Token 224: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.05854610726237297
    2. ')' → logprob: -3.4335460662841797
    3. '<|end|>' → logprob: -3.8085460662841797
    4. ' ]' → logprob: -6.80854606628418
    5. '<|end|>' → logprob: -8.18354606628418
    6. ',' → logprob: -8.18354606628418
    7. ']
' → logprob: -8.30854606628418
    8. '
' → logprob: -8.30854606628418
    9. ' ' → logprob: -9.18354606628418
    10. '```' → logprob: -10.05854606628418

Token 225: '   ' (ID: 271)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.764167308807373
    2. '   ' → logprob: -1.014167308807373
    3. 'x' → logprob: -1.764167308807373
    4. ' ' → logprob: -8.764167785644531
    5. '
' → logprob: -10.139167785644531
    6. ',x' → logprob: -11.264167785644531
    7. '	x' → logprob: -11.264167785644531
    8. ',' → logprob: -11.514167785644531
    9. '_' → logprob: -13.139167785644531
    10. ' n' → logprob: -13.139167785644531

Token 226: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' (adapté à ' x') → logprob: -5.512236498361744e-07
    2. ' x' → logprob: -14.875000953674316
    3. '   ' → logprob: -16.375
    4. '
' → logprob: -18.375
    5. '_x' → logprob: -19.625
    6. '```' → logprob: -21.0
    7. '	x' → logprob: -21.375
    8. '_' → logprob: -21.625
    9. '    
' → logprob: -21.875
    10. ' ' → logprob: -22.375

Token 227: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.47409194707870483
    2. '=' → logprob: -0.9740919470787048
    3. ',' → logprob: -11.224091529846191
    4. '=int' → logprob: -14.974091529846191
    5. ' ' → logprob: -15.224091529846191
    6. ')' → logprob: -15.349091529846191
    7. '=n' → logprob: -15.974091529846191
    8. '<|end|>' → logprob: -15.974091529846191
    9. '   ' → logprob: -16.474092483520508
    10. '_' → logprob: -16.849092483520508

Token 228: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.5759397745132446
    2. ' n' → logprob: -0.8259397745132446
    3. '	n' → logprob: -15.200940132141113
    4. 'int' → logprob: -17.200939178466797
    5. '   ' → logprob: -17.450939178466797
    6. '(n' → logprob: -19.450939178466797
    7. ' н' → logprob: -19.825939178466797
    8. ')n' → logprob: -20.200939178466797
    9. ' int' → logprob: -20.325939178466797
    10. '.n' → logprob: -20.575939178466797

Token 229: '_and' (ID: 18645)
  Prédit: '_and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_and' → logprob: -6.027225754223764e-05
    2. 'and' → logprob: -10.250060081481934
    3. '_n' → logprob: -11.500060081481934
    4. 'n' → logprob: -12.500060081481934
    5. '   ' → logprob: -12.625060081481934
    6. '_AND' → logprob: -13.125060081481934
    7. 'And' → logprob: -13.250060081481934
    8. '_or' → logprob: -13.250060081481934
    9. ' and' → logprob: -14.875060081481934
    10. '  ' → logprob: -14.875060081481934

Token 230: '_x' (ID: 7054)
  Prédit: '_and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_and' → logprob: -0.3052670359611511
    2. '_x' → logprob: -1.555267095565796
    3. 'x' → logprob: -3.055267095565796
    4. 'and' → logprob: -5.430266857147217
    5. '_n' → logprob: -8.305267333984375
    6. 'n' → logprob: -8.805267333984375
    7. '_' → logprob: -11.930267333984375
    8. ' x' → logprob: -12.180267333984375
    9. '   ' → logprob: -12.555267333984375
    10. 'And' → logprob: -12.680267333984375

Token 231: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -3.531315314830863e-06
    2. '1' → logprob: -12.625003814697266
    3. ' [' → logprob: -16.375003814697266
    4. '```' → logprob: -16.875003814697266
    5. '[-' → logprob: -18.750003814697266
    6. '(' → logprob: -20.125003814697266
    7. '\[' → logprob: -20.250003814697266
    8. '#' → logprob: -20.375003814697266
    9. '[
' → logprob: -20.500003814697266
    10. '`' → logprob: -20.875003814697266

Token 232: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.5776860184123507e-06
    2. ' ' → logprob: -13.12500286102295
    3. ']' → logprob: -14.87500286102295
    4. '   ' → logprob: -16.625001907348633
    5. '-' → logprob: -17.375001907348633
    6. '```' → logprob: -17.625001907348633
    7. '[' → logprob: -18.062501907348633
    8. '１' → logprob: -18.937501907348633
    9. '  ' → logprob: -19.500001907348633
    10. '' → logprob: -19.750001907348633

Token 233: ']
' (ID: 1592)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.001178916310891509
    2. ']' → logprob: -7.501178741455078
    3. ')
' → logprob: -7.626178741455078
    4. '<|end|>' → logprob: -9.501178741455078
    5. '   ' → logprob: -10.251178741455078
    6. '
' → logprob: -11.751178741455078
    7. '}' → logprob: -11.876178741455078
    8. 'def' → logprob: -12.876178741455078
    9. ' )' → logprob: -13.376178741455078
    10. '#' → logprob: -13.501178741455078

Token 234: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16549138724803925
    2. 'A' → logprob: -1.9154913425445557
    3. ' A' → logprob: -5.290491580963135
    4. 'a' → logprob: -9.040491104125977
    5. '	A' → logprob: -9.540491104125977
    6. '    
' → logprob: -12.540491104125977
    7. ' ' → logprob: -12.540491104125977
    8. '```' → logprob: -12.540491104125977
    9. '
' → logprob: -12.915491104125977
    10. '  ' → logprob: -13.415491104125977

Token 235: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' (adapté à ' A') → logprob: -0.0006579888286069036
    2. ' A' → logprob: -8.12565803527832
    3. '   ' → logprob: -8.25065803527832
    4. 'a' → logprob: -9.25065803527832
    5. '	A' → logprob: -13.12565803527832
    6. ' ' → logprob: -14.00065803527832
    7. '  ' → logprob: -14.37565803527832
    8. '```' → logprob: -14.50065803527832
    9. '
' → logprob: -15.87565803527832
    10. '_A' → logprob: -16.00065803527832

Token 236: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.10020710527896881
    2. ' =' → logprob: -2.3502070903778076
    3. '=get' → logprob: -15.100207328796387
    4. '=A' → logprob: -17.72520637512207
    5. '_=' → logprob: -18.10020637512207
    6. '=[]' → logprob: -18.10020637512207
    7. '=}' → logprob: -18.47520637512207
    8. '=create' → logprob: -18.47520637512207
    9. '＝' → logprob: -18.60020637512207
    10. '.' → logprob: -19.10020637512207

Token 237: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.0402437224984169
    2. ' get' → logprob: -3.540243625640869
    3. 'sort' → logprob: -4.665243625640869
    4. 'parse' → logprob: -7.040243625640869
    5. ' sort' → logprob: -9.040244102478027
    6. ' parse' → logprob: -11.415244102478027
    7. 'read' → logprob: -11.790244102478027
    8. 'sorted' → logprob: -12.540244102478027
    9. '(get' → logprob: -13.165244102478027
    10. '	get' → logprob: -14.415244102478027

Token 238: '_A' (ID: 6829)
  Prédit: '_A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_A' → logprob: 0.0
    2. 'A' → logprob: -17.0
    3. '_' → logprob: -20.5
    4. '```' → logprob: -20.5
    5. '_X' → logprob: -21.5
    6. '"A' → logprob: -22.25
    7. '(A' → logprob: -22.25
    8. '_B' → logprob: -22.75
    9. '"_' → logprob: -23.0
    10. '[A' → logprob: -23.75

Token 239: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.2014733850955963
    2. '()
' → logprob: -1.701473355293274
    3. '   ' → logprob: -11.201473236083984
    4. '()
' → logprob: -11.201473236083984
    5. '(' → logprob: -11.701473236083984
    6. '()

' → logprob: -12.201473236083984
    7. 'sorted' → logprob: -12.326473236083984
    8. 'A' → logprob: -12.826473236083984
    9. ' ()' → logprob: -13.201473236083984
    10. 'def' → logprob: -13.326473236083984

Token 240: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.45338505506515503
    2. 'process' → logprob: -1.2033851146697998
    3. ' process' → logprob: -2.9533851146698
    4. 'A' → logprob: -5.078384876251221
    5. 'sort' → logprob: -5.328384876251221
    6. ' A' → logprob: -7.578384876251221
    7. 'sorted' → logprob: -8.578385353088379
    8. ' sort' → logprob: -8.828385353088379
    9. '	process' → logprob: -9.703385353088379
    10. ' sorted' → logprob: -9.828385353088379

Token 241: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' (adapté à ' A') → logprob: -0.030689513310790062
    2. 'process' → logprob: -3.6556894779205322
    3. '   ' → logprob: -5.905689716339111
    4. 'sort' → logprob: -7.155689716339111
    5. 'sorted' → logprob: -7.780689716339111
    6. ' A' → logprob: -7.905689716339111
    7. ' process' → logprob: -10.030689239501953
    8. '
' → logprob: -12.030689239501953
    9. 'processed' → logprob: -12.280689239501953
    10. ' ' → logprob: -12.530689239501953

Token 242: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.12705610692501068
    2. ' =' → logprob: -2.127056121826172
    3. '.sort' → logprob: -9.127056121826172
    4. '_sorted' → logprob: -11.752056121826172
    5. ')' → logprob: -12.377056121826172
    6. 'sorted' → logprob: -12.752056121826172
    7. 'sort' → logprob: -13.252056121826172
    8. '.' → logprob: -13.627056121826172
    9. ' ' → logprob: -15.377056121826172
    10. ',' → logprob: -15.502056121826172

Token 243: ' sort' (ID: 4506)
  Prédit: 'sort'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sort' → logprob: -0.034011367708444595
    2. ' sort' → logprob: -3.4090113639831543
    3. 'sorted' → logprob: -8.034011840820312
    4. ' sorted' → logprob: -10.159011840820312
    5. '   ' → logprob: -13.909011840820312
    6. '	sort' → logprob: -14.409011840820312
    7. 'list' → logprob: -15.284011840820312
    8. '.sort' → logprob: -15.534011840820312
    9. '(sort' → logprob: -15.659011840820312
    10. 'reverse' → logprob: -15.784011840820312

Token 244: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -0.012734489515423775
    2. '(A' → logprob: -4.387734413146973
    3. '_' → logprob: -8.762734413146973
    4. '(_' → logprob: -10.512734413146973
    5. '_A' → logprob: -10.762734413146973
    6. '(' → logprob: -12.512734413146973
    7. 'ed' → logprob: -12.512734413146973
    8. '_List' → logprob: -12.512734413146973
    9. '_(' → logprob: -12.637734413146973
    10. 'A' → logprob: -13.762734413146973

Token 245: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -1.318681188422488e-05
    2. '(' → logprob: -11.25001335144043
    3. 'A' → logprob: -16.75001335144043
    4. '(
' → logprob: -17.75001335144043
    5. ' (' → logprob: -18.00001335144043
    6. '()' → logprob: -19.75001335144043
    7. '```' → logprob: -20.12501335144043
    8. '((' → logprob: -20.62501335144043
    9. '(

' → logprob: -21.50001335144043
    10. '(B' → logprob: -21.62501335144043

Token 246: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0005029928870499134
    2. ')
' → logprob: -7.625503063201904
    3. '()' → logprob: -11.750502586364746
    4. '())' → logprob: -12.750502586364746
    5. '   ' → logprob: -13.375502586364746
    6. ' )' → logprob: -13.750502586364746
    7. ')

' → logprob: -14.125502586364746
    8. '(A' → logprob: -16.000503540039062
    9. '()
' → logprob: -16.250503540039062
    10. ' ' → logprob: -16.375503540039062

Token 247: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7330394387245178
    2. '   ' → logprob: -1.233039379119873
    3. 'process' → logprob: -1.733039379119873
    4. ' process' → logprob: -2.983039379119873
    5. '(process' → logprob: -8.108039855957031
    6. '	process' → logprob: -8.608039855957031
    7. '    
' → logprob: -8.858039855957031
    8. '```' → logprob: -9.358039855957031
    9. '  
' → logprob: -11.358039855957031
    10. '_process' → logprob: -11.608039855957031

Token 248: ' process' (ID: 2273)
  Prédit: 'process'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'process' (adapté à ' process') → logprob: -5.200166469876422e-06
    2. '   ' → logprob: -12.750004768371582
    3. ' process' → logprob: -13.000004768371582
    4. '	process' → logprob: -19.1250057220459
    5. '
' → logprob: -21.1250057220459
    6. '(process' → logprob: -21.3750057220459
    7. 'proces' → logprob: -21.8750057220459
    8. '.process' → logprob: -21.8750057220459
    9. '  ' → logprob: -22.5000057220459
    10. '_process' → logprob: -22.8750057220459

Token 249: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0014010717859491706
    2. '(' → logprob: -6.626400947570801
    3. ' (' → logprob: -9.5014009475708
    4. '(
' → logprob: -15.2514009475708
    5. '(

' → logprob: -17.251401901245117
    6. '(noun' → logprob: -17.251401901245117
    7. '(N' → logprob: -18.376401901245117
    8. '```' → logprob: -18.376401901245117
    9. '(not' → logprob: -18.501401901245117
    10. '
' → logprob: -18.626401901245117

Token 250: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -2.47495681833243e-05
    2. ' ,' → logprob: -11.250024795532227
    3. ',x' → logprob: -11.375024795532227
    4. ',
' → logprob: -15.625024795532227
    5. '   ' → logprob: -18.875024795532227
    6. 'x' → logprob: -20.000024795532227
    7. ')' → logprob: -20.000024795532227
    8. '(x' → logprob: -20.125024795532227
    9. '‌,' → logprob: -20.125024795532227
    10. '=' → logprob: -20.250024795532227

Token 251: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.02324547804892063
    2. ' x' → logprob: -3.7732455730438232
    3. '	x' → logprob: -19.023244857788086
    4. ' ' → logprob: -19.648244857788086
    5. '   ' → logprob: -19.773244857788086
    6. ')x' → logprob: -20.148244857788086
    7. '(x' → logprob: -21.023244857788086
    8. ')' → logprob: -21.273244857788086
    9. '
' → logprob: -21.773244857788086
    10. '```' → logprob: -22.023244857788086

Token 252: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -2.1054253011243418e-05
    2. ',A' → logprob: -11.500020980834961
    3. ' ,' → logprob: -12.125020980834961
    4. 'A' → logprob: -12.250020980834961
    5. ',
' → logprob: -14.625020980834961
    6. ')' → logprob: -15.875020980834961
    7. '```' → logprob: -16.50002098083496
    8. '   ' → logprob: -17.00002098083496
    9. ' A' → logprob: -17.75002098083496
    10. '`,' → logprob: -18.25002098083496

Token 253: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.03804149478673935
    2. ' A' → logprob: -3.288041591644287
    3. '   ' → logprob: -16.913042068481445
    4. ' ' → logprob: -17.038042068481445
    5. '	A' → logprob: -17.038042068481445
    6. ')' → logprob: -18.288042068481445
    7. '
' → logprob: -18.538042068481445
    8. '_A' → logprob: -19.663042068481445
    9. ' ' → logprob: -20.038042068481445
    10. '  ' → logprob: -20.288042068481445

Token 254: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.6537622034084052e-05
    2. ')
' → logprob: -10.75002670288086
    3. ')

' → logprob: -12.25002670288086
    4. ' )' → logprob: -15.37502670288086
    5. '())' → logprob: -18.00002670288086
    6. ')`' → logprob: -18.00002670288086
    7. '))' → logprob: -18.37502670288086
    8. '
' → logprob: -19.12502670288086
    9. ')


' → logprob: -19.37502670288086
    10. ')#' → logprob: -19.37502670288086

Token 255: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.014170913025736809
    2. 'main' → logprob: -4.264171123504639
    3. ' if' → logprob: -12.26417064666748
    4. '```' → logprob: -13.63917064666748
    5. 'print' → logprob: -14.76417064666748
    6. '
' → logprob: -14.88917064666748
    7. '(main' → logprob: -15.26417064666748
    8. '\' → logprob: -15.76417064666748
    9. ' main' → logprob: -15.76417064666748
    10. '\n' → logprob: -15.88917064666748

Token 256: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0011803467059507966
    2. '(' → logprob: -6.876180171966553
    3. '()
' → logprob: -9.501180648803711
    4. '#' → logprob: -10.876180648803711
    5. '```' → logprob: -11.126180648803711
    6. '();' → logprob: -11.751180648803711
    7. '<|end|>' → logprob: -11.751180648803711
    8. '()

' → logprob: -12.626180648803711
    9. '()<' → logprob: -12.751180648803711
    10. '()\' → logprob: -13.001180648803711


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 254
Tokens correctement prédits (1ère position, stricte): 110
Tokens correctement prédits (1ère position, avec adaptation): 125
Tokens correctement prédits (top 10): 223
Précision stricte (1ère position): 43.31%
Précision adaptée (1ère position): 49.21%
Précision (top 10): 87.80%
================================================================================
