================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:34:58
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def get_input():
    return input()

def parse_input(input_str):
    return list(map(int, input_str.split()))

def get_a(numbers):
    return numbers[0]

def get_b(numbers):
    return numbers[1]

def get_c(numbers):
    return numbers[2]

def sum_values(a, b, c):
    return a + b + c

def is_bust(total):
    return total >= 22

def print_result(result):
    print(result)

def main():
    inp = get_input()
    nums = parse_input(inp)
    a = get_a(nums)
    b = get_b(nums)
    c = get_c(nums)
    total = sum_values(a, b, c)
    if is_bust(total):
        print_result("bust")
    else:
        print_result("win")

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' get' (ID: 717)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004974370822310448
    2. '():' → logprob: -5.629974365234375
    3. '_' → logprob: -6.879974365234375
    4. '()' → logprob: -8.629974365234375
    5. '```' → logprob: -10.004974365234375
    6. '(:' → logprob: -10.629974365234375
    7. '(_' → logprob: -10.754974365234375
    8. '(_:' → logprob: -10.879974365234375
    9. ' (' → logprob: -11.379974365234375
    10. '("("' → logprob: -12.004974365234375

Token 4: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.05937580764293671
    2. '():' → logprob: -3.684375762939453
    3. ':' → logprob: -4.559375762939453
    4. '   ' → logprob: -4.684375762939453
    5. '\' → logprob: -5.809375762939453
    6. '\n' → logprob: -5.934375762939453
    7. '``' → logprob: -5.934375762939453
    8. '    
' → logprob: -7.059375762939453
    9. '()' → logprob: -7.934375762939453
    10. '(' → logprob: -7.934375762939453

Token 5: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.21803174912929535
    2. 'input' → logprob: -2.468031644821167
    3. 'user' → logprob: -3.218031644821167
    4. '   ' → logprob: -3.343031644821167
    5. '```' → logprob: -4.593031883239746
    6. 'x' → logprob: -4.843031883239746
    7. ' ' → logprob: -4.968031883239746
    8. ' return' → logprob: -5.843031883239746
    9. 'text' → logprob: -6.343031883239746
    10. 'i' → logprob: -6.593031883239746

Token 6: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.7442995309829712
    2. ' ' → logprob: -1.2442995309829712
    3. 'input' → logprob: -1.4942995309829712
    4. '"' → logprob: -4.994299411773682
    5. ''' → logprob: -5.619299411773682
    6. '  ' → logprob: -7.619299411773682
    7. '(input' → logprob: -8.11929988861084
    8. ' None' → logprob: -8.24429988861084
    9. ' "' → logprob: -8.61929988861084
    10. ' '' → logprob: -8.61929988861084

Token 7: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0015529518714174628
    2. '()' → logprob: -6.626553058624268
    3. '('' → logprob: -9.25155258178711
    4. '("("' → logprob: -9.62655258178711
    5. '(
' → logprob: -11.25155258178711
    6. ' (' → logprob: -11.25155258178711
    7. '```' → logprob: -11.62655258178711
    8. '("")' → logprob: -11.87655258178711
    9. ' ' → logprob: -12.12655258178711
    10. ''' → logprob: -12.62655258178711

Token 8: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.9562095403671265
    2. '(' → logprob: -1.3312095403671265
    3. '()' → logprob: -2.456209659576416
    4. '\n' → logprob: -2.581209659576416
    5. '```' → logprob: -3.206209659576416
    6. '(
' → logprob: -3.456209659576416
    7. '#' → logprob: -3.706209659576416
    8. '<|end|>' → logprob: -3.831209659576416
    9. '\' → logprob: -4.331209659576416
    10. '
' → logprob: -4.706209659576416

Token 9: ' parse' (ID: 8420)
  Prédit: ' get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.6110988855361938
    2. ' calculate' → logprob: -1.4860988855361938
    3. ' process' → logprob: -2.6110987663269043
    4. ' space' → logprob: -2.9860987663269043
    5. ' main' → logprob: -3.8610987663269043
    6. ' user' → logprob: -3.8610987663269043
    7. ' add' → logprob: -4.361098766326904
    8. ' ' → logprob: -4.736098766326904
    9. ' my' → logprob: -4.986098766326904
    10. ' validate' → logprob: -5.111098766326904

Token 10: '_input' (ID: 12507)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.4831930100917816
    2. '(' → logprob: -0.983193039894104
    3. '_input' → logprob: -4.8581929206848145
    4. '_token' → logprob: -8.358193397521973
    5. '_line' → logprob: -8.733193397521973
    6. '(_' → logprob: -9.233193397521973
    7. '(_)' → logprob: -9.233193397521973
    8. '_user' → logprob: -9.608193397521973
    9. '_data' → logprob: -9.858193397521973
    10. ' _' → logprob: -10.108193397521973

Token 11: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.016542190685868263
    2. '_' → logprob: -4.141541957855225
    3. '("("' → logprob: -9.016542434692383
    4. '(_)' → logprob: -9.891542434692383
    5. '_(' → logprob: -10.266542434692383
    6. '('_' → logprob: -10.391542434692383
    7. '(_' → logprob: -10.391542434692383
    8. ' (' → logprob: -10.641542434692383
    9. '_parent' → logprob: -10.766542434692383
    10. '('' → logprob: -10.891542434692383

Token 12: '_str' (ID: 6182)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1877845823764801
    2. '):' → logprob: -1.9377845525741577
    3. '_' → logprob: -3.8127846717834473
    4. ')_' → logprob: -6.812784671783447
    5. '_)' → logprob: -6.937784671783447
    6. '_string' → logprob: -7.312784671783447
    7. '(' → logprob: -7.812784671783447
    8. '_data' → logprob: -7.812784671783447
    9. '_input' → logprob: -8.187784194946289
    10. '_text' → logprob: -8.312784194946289

Token 13: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0018749780720099807
    2. ')' → logprob: -6.626874923706055
    3. '):
' → logprob: -8.376874923706055
    4. ':' → logprob: -8.376874923706055
    5. ',' → logprob: -10.626874923706055
    6. ' ):' → logprob: -10.626874923706055
    7. '[' → logprob: -12.251874923706055
    8. '   ' → logprob: -12.501874923706055
    9. ':str' → logprob: -12.876874923706055
    10. '(' → logprob: -13.251874923706055

Token 14: '   ' (ID: 271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6748087406158447
    2. '   ' → logprob: -0.7998087406158447
    3. '    ' → logprob: -4.674808502197266
    4. ' return' → logprob: -4.924808502197266
    5. '_' → logprob: -5.674808502197266
    6. '[' → logprob: -5.924808502197266
    7. ' (' → logprob: -5.924808502197266
    8. ' input' → logprob: -6.049808502197266
    9. '(
' → logprob: -6.174808502197266
    10. '(input' → logprob: -6.299808502197266

Token 15: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4400026500225067
    2. ' input' → logprob: -1.190002679824829
    3. ' return' → logprob: -4.19000244140625
    4. 'input' → logprob: -4.44000244140625
    5. '    ' → logprob: -4.94000244140625
    6. ' tokens' → logprob: -5.56500244140625
    7. ' token' → logprob: -5.81500244140625
    8. ' ' → logprob: -5.94000244140625
    9. ' int' → logprob: -6.81500244140625
    10. ' if' → logprob: -6.94000244140625

Token 16: ' list' (ID: 1562)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.07153204083442688
    2. 'input' → logprob: -3.3215320110321045
    3. ' int' → logprob: -3.6965320110321045
    4. ' list' → logprob: -5.071532249450684
    5. 'int' → logprob: -6.696532249450684
    6. 'list' → logprob: -7.821532249450684
    7. ' ' → logprob: -9.571532249450684
    8. ' [' → logprob: -10.196532249450684
    9. '[input' → logprob: -10.446532249450684
    10. '[' → logprob: -10.696532249450684

Token 17: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.054996587336063385
    2. '(input' → logprob: -2.9299964904785156
    3. '(map' → logprob: -10.429996490478516
    4. '(eval' → logprob: -10.679996490478516
    5. '(int' → logprob: -11.554996490478516
    6. '(parse' → logprob: -11.679996490478516
    7. '(str' → logprob: -12.054996490478516
    8. '(token' → logprob: -12.054996490478516
    9. '("("' → logprob: -12.179996490478516
    10. '('' → logprob: -12.429996490478516

Token 18: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.29370397329330444
    2. '(' → logprob: -1.4187040328979492
    3. '(str' → logprob: -4.418704032897949
    4. 'int' → logprob: -8.54370403289795
    5. '(lambda' → logprob: -9.91870403289795
    6. ' (' → logprob: -10.04370403289795
    7. ')' → logprob: -10.29370403289795
    8. 'str' → logprob: -10.41870403289795
    9. '(
' → logprob: -10.41870403289795
    10. ' int' → logprob: -11.41870403289795

Token 19: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.5322310328483582
    2. ',input' → logprob: -1.532231092453003
    3. ',' → logprob: -1.782231092453003
    4. '(' → logprob: -3.657231092453003
    5. 'input' → logprob: -6.407230854034424
    6. ' ,' → logprob: -7.782230854034424
    7. ' (' → logprob: -8.532231330871582
    8. ' input' → logprob: -8.782231330871582
    9. ')' → logprob: -10.157231330871582
    10. '(
' → logprob: -10.407231330871582

Token 20: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.06994020938873291
    2. 'input' → logprob: -2.6949400901794434
    3. '(input' → logprob: -12.944940567016602
    4. ',input' → logprob: -14.569940567016602
    5. '	input' → logprob: -14.694940567016602
    6. '=input' → logprob: -15.444940567016602
    7. '_input' → logprob: -15.944940567016602
    8. ' ' → logprob: -16.3199405670166
    9. '   ' → logprob: -16.5699405670166
    10. ')' → logprob: -16.9449405670166

Token 21: '_str' (ID: 6182)
  Prédit: '_str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_str' → logprob: -2.6895233531831764e-05
    2. '(' → logprob: -11.75002670288086
    3. '(_' → logprob: -12.37502670288086
    4. 'str' → logprob: -13.00002670288086
    5. '_string' → logprob: -13.50002670288086
    6. '_s' → logprob: -13.50002670288086
    7. '(str' → logprob: -13.62502670288086
    8. '_STR' → logprob: -13.75002670288086
    9. '_split' → logprob: -13.87502670288086
    10. '   ' → logprob: -14.00002670288086

Token 22: '.split' (ID: 10347)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.48761555552482605
    2. '.split' → logprob: -0.9876155853271484
    3. '.strip' → logprob: -4.862615585327148
    4. ' .' → logprob: -5.362615585327148
    5. '().' → logprob: -7.862615585327148
    6. 'split' → logprob: -7.987615585327148
    7. '   ' → logprob: -8.487615585327148
    8. '('.' → logprob: -9.987615585327148
    9. '(split' → logprob: -11.237615585327148
    10. ' split' → logprob: -11.737615585327148

Token 23: '()))

' (ID: 125972)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '('' → logprob: -0.13209936022758484
    2. '()))' → logprob: -2.1320993900299072
    3. '()' → logprob: -5.507099151611328
    4. '())' → logprob: -7.132099151611328
    5. '())))' → logprob: -9.007099151611328
    6. '("' → logprob: -9.507099151611328
    7. '(','' → logprob: -10.132099151611328
    8. '(' → logprob: -10.257099151611328
    9. '()))
' → logprob: -11.882099151611328
    10. '("("' → logprob: -12.132099151611328

Token 24: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.1193208247423172
    2. '

' → logprob: -2.619320869445801
    3. '
' → logprob: -3.744320869445801
    4. '\' → logprob: -4.619320869445801
    5. 'd' → logprob: -5.494320869445801
    6. '\n' → logprob: -7.119320869445801
    7. '```' → logprob: -7.994320869445801
    8. ' 

' → logprob: -8.7443208694458
    9. '<|end|>' → logprob: -8.7443208694458
    10. '#' → logprob: -9.2443208694458

Token 25: ' get' (ID: 717)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.0460372157394886
    2. ' solve' → logprob: -3.796037197113037
    3. ' sum' → logprob: -4.921037197113037
    4. 'main' → logprob: -5.046037197113037
    5. ' process' → logprob: -5.921037197113037
    6. ' calculate' → logprob: -6.046037197113037
    7. 'solve' → logprob: -6.921037197113037
    8. ' find' → logprob: -7.546037197113037
    9. 'sum' → logprob: -7.546037197113037
    10. ' factorial' → logprob: -7.921037197113037

Token 26: '_a' (ID: 10852)
  Prédit: '_max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_max' → logprob: -0.9407302141189575
    2. '_sum' → logprob: -0.9407302141189575
    3. '_output' → logprob: -2.565730094909668
    4. '_input' → logprob: -2.815730094909668
    5. '_data' → logprob: -4.190730094909668
    6. '_total' → logprob: -4.440730094909668
    7. '_result' → logprob: -4.565730094909668
    8. '_numbers' → logprob: -4.815730094909668
    9. '_' → logprob: -4.940730094909668
    10. '_array' → logprob: -5.440730094909668

Token 27: '(numbers' (ID: 98592)
  Prédit: 'rray'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'rray' → logprob: -0.2764265537261963
    2. '_' → logprob: -3.1514265537261963
    3. 'dd' → logprob: -3.1514265537261963
    4. '()' → logprob: -3.6514265537261963
    5. '_value' → logprob: -3.6514265537261963
    6. 'rr' → logprob: -4.151426315307617
    7. '_b' → logprob: -4.526426315307617
    8. 'dv' → logprob: -4.776426315307617
    9. '_input' → logprob: -4.901426315307617
    10. 'verage' → logprob: -5.026426315307617

Token 28: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.059091001749038696
    2. '[' → logprob: -2.934091091156006
    3. ')' → logprob: -5.559091091156006
    4. '[]):' → logprob: -9.059090614318848
    5. ' ):' → logprob: -10.059090614318848
    6. '):
' → logprob: -10.184090614318848
    7. '   ' → logprob: -10.434090614318848
    8. ',' → logprob: -10.559090614318848
    9. ':' → logprob: -10.934090614318848
    10. '[i' → logprob: -11.184090614318848

Token 29: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0016749451169744134
    2. ' return' → logprob: -7.376675128936768
    3. '(numbers' → logprob: -7.376675128936768
    4. ' numbers' → logprob: -8.75167465209961
    5. 'return' → logprob: -9.00167465209961
    6. 'numbers' → logprob: -9.25167465209961
    7. '[' → logprob: -11.12667465209961
    8. '    
' → logprob: -11.75167465209961
    9. 'a' → logprob: -12.25167465209961
    10. '(' → logprob: -13.00167465209961

Token 30: ' return' (ID: 622)
  Prédit: ' numbers'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' numbers' → logprob: -0.3458334505558014
    2. ' return' → logprob: -1.470833420753479
    3. 'numbers' → logprob: -2.9708335399627686
    4. 'return' (adapté à ' return') → logprob: -4.8458333015441895
    5. '   ' → logprob: -5.7208333015441895
    6. 'a' → logprob: -9.470833778381348
    7. ' a' → logprob: -9.845833778381348
    8. '(numbers' → logprob: -9.970833778381348
    9. ' n' → logprob: -11.220833778381348
    10. 'n' → logprob: -11.845833778381348

Token 31: ' numbers' (ID: 8663)
  Prédit: ' numbers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' numbers' → logprob: -0.25183260440826416
    2. 'numbers' → logprob: -2.1268324851989746
    3. ' max' → logprob: -2.7518324851989746
    4. ' sum' → logprob: -3.7518324851989746
    5. ' min' → logprob: -5.126832485198975
    6. 'max' → logprob: -5.251832485198975
    7. 'sum' → logprob: -6.001832485198975
    8. ' int' → logprob: -7.376832485198975
    9. 'min' → logprob: -8.001832962036133
    10. ' ' → logprob: -8.001832962036133

Token 32: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0005639957962557673
    2. '[-' → logprob: -7.625564098358154
    3. '[len' → logprob: -10.750563621520996
    4. '0' → logprob: -11.000563621520996
    5. ' [' → logprob: -11.500563621520996
    6. 'def' → logprob: -11.750563621520996
    7. '```' → logprob: -12.375563621520996
    8. '\[' → logprob: -12.750563621520996
    9. '[:]' → logprob: -13.500563621520996
    10. '[int' → logprob: -13.500563621520996

Token 33: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00022952310973778367
    2. ' ' → logprob: -9.125229835510254
    3. '1' → logprob: -9.250229835510254
    4. '-' → logprob: -11.375229835510254
    5. '2' → logprob: -11.750229835510254
    6. '3' → logprob: -13.062729835510254
    7. '4' → logprob: -13.812729835510254
    8. '5' → logprob: -15.312729835510254
    9. ' -' → logprob: -15.687729835510254
    10. ':' → logprob: -15.812729835510254

Token 34: ']

' (ID: 3144)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.08978769183158875
    2. ')' → logprob: -2.464787721633911
    3. ' ]' → logprob: -7.464787483215332
    4. '])' → logprob: -8.964787483215332
    5. ')]' → logprob: -9.464787483215332
    6. ' )' → logprob: -10.339787483215332
    7. '<|end|>' → logprob: -11.089787483215332
    8. '}' → logprob: -12.089787483215332
    9. ')])' → logprob: -12.964787483215332
    10. '']' → logprob: -13.089787483215332

Token 35: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.08373299986124039
    2. '<|end|>' → logprob: -2.583733081817627
    3. '
' → logprob: -5.708733081817627
    4. ' def' → logprob: -6.958733081817627
    5. '<|end|>' → logprob: -7.708733081817627
    6. '```' → logprob: -9.958732604980469
    7. '

' → logprob: -10.208732604980469
    8. '\n' → logprob: -11.583732604980469
    9. 'newline' → logprob: -12.083732604980469
    10. '\' → logprob: -13.208732604980469

Token 36: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.004358790814876556
    2. 'get' → logprob: -5.504358768463135
    3. '_get' → logprob: -8.379359245300293
    4. ' def' → logprob: -10.504359245300293
    5. ' ' → logprob: -11.754359245300293
    6. '_' → logprob: -12.254359245300293
    7. ' ' → logprob: -12.879359245300293
    8. 'def' → logprob: -12.879359245300293
    9. ' _' → logprob: -13.004359245300293
    10. '(get' → logprob: -14.379359245300293

Token 37: '_b' (ID: 1535)
  Prédit: '_b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_b' → logprob: -0.0014731991104781628
    2. '_' → logprob: -6.876473426818848
    3. 'b' → logprob: -9.501473426818848
    4. '_a' → logprob: -9.626473426818848
    5. '_n' → logprob: -9.751473426818848
    6. '_m' → logprob: -10.001473426818848
    7. '_c' → logprob: -10.876473426818848
    8. '_sum' → logprob: -10.876473426818848
    9. '_s' → logprob: -11.376473426818848
    10. ' ' → logprob: -11.376473426818848

Token 38: '(numbers' (ID: 98592)
  Prédit: '(numbers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(numbers' → logprob: -0.2821827232837677
    2. '(' → logprob: -1.4071826934814453
    3. '(n' → logprob: -7.407182693481445
    4. ' (' → logprob: -8.032182693481445
    5. '<|end|>' → logprob: -9.907182693481445
    6. ' ' → logprob: -11.782182693481445
    7. '(nums' → logprob: -12.282182693481445
    8. ')' → logprob: -12.282182693481445
    9. '(s' → logprob: -12.657182693481445
    10. 's' → logprob: -12.657182693481445

Token 39: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.046524111181497574
    2. ')' → logprob: -3.1715240478515625
    3. '[' → logprob: -6.0465240478515625
    4. '):
' → logprob: -6.7965240478515625
    5. '   ' → logprob: -11.546524047851562
    6. '[]):' → logprob: -11.546524047851562
    7. ')[' → logprob: -12.046524047851562
    8. '):

' → logprob: -12.796524047851562
    9. ':' → logprob: -13.546524047851562
    10. '):
' → logprob: -13.671524047851562

Token 40: '   ' (ID: 271)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.5139321088790894
    2. '   ' → logprob: -1.0139321088790894
    3. ' numbers' → logprob: -3.388932228088379
    4. 'return' → logprob: -5.388932228088379
    5. 'numbers' → logprob: -8.013932228088379
    6. '    ' → logprob: -8.388932228088379
    7. '(numbers' → logprob: -9.013932228088379
    8. ' ' → logprob: -10.513932228088379
    9. ' returns' → logprob: -11.388932228088379
    10. '[' → logprob: -11.763932228088379

Token 41: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.034133151173591614
    2. 'return' (adapté à ' return') → logprob: -3.784133195877075
    3. '   ' → logprob: -4.534132957458496
    4. ' numbers' → logprob: -9.659132957458496
    5. ' ' → logprob: -11.159132957458496
    6. '    ' → logprob: -11.659132957458496
    7. '  ' → logprob: -13.409132957458496
    8. 'numbers' → logprob: -13.534132957458496
    9. '	return' → logprob: -13.784132957458496
    10. ' ' → logprob: -14.784132957458496

Token 42: ' numbers' (ID: 8663)
  Prédit: ' numbers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' numbers' → logprob: -0.05490056052803993
    2. 'numbers' → logprob: -2.929900646209717
    3. '(numbers' → logprob: -11.304900169372559
    4. ' ' → logprob: -12.679900169372559
    5. '   ' → logprob: -14.429900169372559
    6. 'b' → logprob: -14.679900169372559
    7. 'umbers' → logprob: -14.804900169372559
    8. 'number' → logprob: -15.179900169372559
    9. ' b' → logprob: -15.304900169372559
    10. ' number' → logprob: -15.304900169372559

Token 43: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -6.0391463193809614e-05
    2. '1' → logprob: -9.750060081481934
    3. '[-' → logprob: -14.125060081481934
    4. ' [' → logprob: -14.375060081481934
    5. '```' → logprob: -15.500060081481934
    6. '[
' → logprob: -15.625060081481934
    7. '[len' → logprob: -16.00006103515625
    8. '\[' → logprob: -16.37506103515625
    9. '2' → logprob: -17.00006103515625
    10. '   ' → logprob: -17.50006103515625

Token 44: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -9.949026571121067e-05
    2. '0' → logprob: -9.250099182128906
    3. '-' → logprob: -13.250099182128906
    4. ' ' → logprob: -14.500099182128906
    5. '])' → logprob: -15.000099182128906
    6. ']' → logprob: -15.125099182128906
    7. ')' → logprob: -16.000099182128906
    8. '   ' → logprob: -16.000099182128906
    9. '```' → logprob: -16.687599182128906
    10. '2' → logprob: -17.062599182128906

Token 45: ']

' (ID: 3144)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. '}' → logprob: -15.625
    3. ']' → logprob: -17.0
    4. ')
' → logprob: -18.125
    5. '))' → logprob: -18.375
    6. ' )' → logprob: -18.75
    7. '),' → logprob: -18.875
    8. '()' → logprob: -19.0
    9. ')}' → logprob: -19.125
    10. '）' → logprob: -19.25

Token 46: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.001463692169636488
    2. '<|end|>' → logprob: -7.126463890075684
    3. '```' → logprob: -8.501463890075684
    4. '
' → logprob: -8.501463890075684
    5. '<|end|>' → logprob: -9.251463890075684
    6. '\' → logprob: -9.376463890075684
    7. '\n' → logprob: -10.376463890075684
    8. '#' → logprob: -11.626463890075684
    9. '

' → logprob: -12.001463890075684
    10. '``' → logprob: -12.251463890075684

Token 47: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.035937316715717316
    2. ' calculate' → logprob: -4.285937309265137
    3. ' main' → logprob: -4.410937309265137
    4. 'get' → logprob: -5.660937309265137
    5. ' solve' → logprob: -6.035937309265137
    6. ' compute' → logprob: -6.910937309265137
    7. ' process' → logprob: -7.910937309265137
    8. ' g' → logprob: -8.410937309265137
    9. ' find' → logprob: -8.410937309265137
    10. ' is' → logprob: -8.535937309265137

Token 48: '_c' (ID: 1303)
  Prédit: '_c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_c' → logprob: -0.014407116919755936
    2. '_sum' → logprob: -4.889407157897949
    3. '_' → logprob: -5.889407157897949
    4. '_n' → logprob: -7.139407157897949
    5. '_a' → logprob: -7.264407157897949
    6. '_result' → logprob: -7.389407157897949
    7. '_s' → logprob: -7.639407157897949
    8. '_max' → logprob: -7.764407157897949
    9. '_total' → logprob: -8.88940715789795
    10. '_b' → logprob: -8.88940715789795

Token 49: '(numbers' (ID: 98592)
  Prédit: '(numbers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(numbers' → logprob: -0.03418879956007004
    2. '(' → logprob: -3.409188747406006
    3. '(n' → logprob: -7.784188747406006
    4. '<|end|>' → logprob: -9.909189224243164
    5. '_numbers' → logprob: -10.159189224243164
    6. 'numbers' → logprob: -11.909189224243164
    7. '(nums' → logprob: -12.409189224243164
    8. '(number' → logprob: -13.034189224243164
    9. '_' → logprob: -13.034189224243164
    10. ' (' → logprob: -13.284189224243164

Token 50: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0003832445072475821
    2. '(numbers' → logprob: -8.125383377075195
    3. '):
' → logprob: -9.625383377075195
    4. ')' → logprob: -11.250383377075195
    5. '[]):' → logprob: -13.375383377075195
    6. '[' → logprob: -13.500383377075195
    7. ' ):' → logprob: -13.500383377075195
    8. '(n' → logprob: -14.000383377075195
    9. 'numbers' → logprob: -14.375383377075195
    10. '_numbers' → logprob: -14.750383377075195

Token 51: '   ' (ID: 271)
  Prédit: ' numbers'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' numbers' → logprob: -0.18344801664352417
    2. 'numbers' → logprob: -2.183448076248169
    3. '(numbers' → logprob: -3.558448076248169
    4. '   ' → logprob: -4.43344783782959
    5. ' return' → logprob: -4.43344783782959
    6. 'return' → logprob: -5.93344783782959
    7. ' ' → logprob: -10.55844783782959
    8. '_numbers' → logprob: -11.68344783782959
    9. '(' → logprob: -11.80844783782959
    10. '    ' → logprob: -12.18344783782959

Token 52: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.317304790019989
    2. 'return' (adapté à ' return') → logprob: -1.3173048496246338
    3. '   ' → logprob: -5.692304611206055
    4. ' numbers' → logprob: -7.567304611206055
    5. 'numbers' → logprob: -8.942304611206055
    6. ' ' → logprob: -12.067304611206055
    7. '(numbers' → logprob: -12.192304611206055
    8. '    ' → logprob: -13.442304611206055
    9. '```' → logprob: -14.192304611206055
    10. '  ' → logprob: -14.442304611206055

Token 53: ' numbers' (ID: 8663)
  Prédit: ' numbers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' numbers' → logprob: -0.048770856112241745
    2. 'numbers' → logprob: -3.0487709045410156
    3. '(numbers' → logprob: -9.423770904541016
    4. ' ' → logprob: -10.048770904541016
    5. 'int' → logprob: -10.798770904541016
    6. ' int' → logprob: -11.548770904541016
    7. 'c' → logprob: -12.048770904541016
    8. '0' → logprob: -12.423770904541016
    9. ' ' → logprob: -12.611270904541016
    10. 'number' → logprob: -13.923770904541016

Token 54: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.006091846618801355
    2. '2' → logprob: -5.131092071533203
    3. '[-' → logprob: -8.881092071533203
    4. '```' → logprob: -11.131092071533203
    5. '(' → logprob: -12.756092071533203
    6. '0' → logprob: -13.756092071533203
    7. '3' → logprob: -14.006092071533203
    8. '.' → logprob: -14.006092071533203
    9. '1' → logprob: -14.381092071533203
    10. '[len' → logprob: -14.631092071533203

Token 55: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -7.896309739408025e-07
    2. '1' → logprob: -15.375000953674316
    3. '-' → logprob: -16.0
    4. '```' → logprob: -16.0
    5. '3' → logprob: -16.125
    6. '0' → logprob: -16.5
    7. ' ' → logprob: -16.5
    8. '   ' → logprob: -18.0
    9. ']' → logprob: -18.375
    10. '۲' → logprob: -19.25

Token 56: ']

' (ID: 3144)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0280383548888494e-06
    2. ')
' → logprob: -14.250000953674316
    3. '()' → logprob: -16.500001907348633
    4. '}' → logprob: -17.000001907348633
    5. '))' → logprob: -17.375001907348633
    6. ')return' → logprob: -17.375001907348633
    7. ' )' → logprob: -17.375001907348633
    8. ']' → logprob: -17.625001907348633
    9. '')' → logprob: -18.000001907348633
    10. '）' → logprob: -18.125001907348633

Token 57: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -9.412610233994201e-05
    2. '<|end|>' → logprob: -10.375094413757324
    3. '```' → logprob: -11.500094413757324
    4. '<|end|>' → logprob: -11.500094413757324
    5. '
' → logprob: -11.625094413757324
    6. '\' → logprob: -12.000094413757324
    7. '

' → logprob: -12.500094413757324
    8. '\n' → logprob: -12.625094413757324
    9. 'a' → logprob: -12.625094413757324
    10. 'd' → logprob: -13.125094413757324

Token 58: ' sum' (ID: 4215)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.6737844944000244
    2. ' calculate' → logprob: -1.2987844944000244
    3. ' solve' → logprob: -2.4237844944000244
    4. 'calculate' → logprob: -3.1737844944000244
    5. ' compute' → logprob: -3.6737844944000244
    6. ' get' → logprob: -4.048784255981445
    7. 'solve' → logprob: -4.423784255981445
    8. 'main' → logprob: -5.048784255981445
    9. ' is' → logprob: -5.548784255981445
    10. ' sum' → logprob: -5.548784255981445

Token 59: '_values' (ID: 20393)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.08073359727859497
    2. '_(' → logprob: -3.33073353767395
    3. '(' → logprob: -3.45573353767395
    4. '_numbers' → logprob: -5.455733776092529
    5. '_a' → logprob: -6.205733776092529
    6. '_values' → logprob: -6.455733776092529
    7. '(a' → logprob: -7.205733776092529
    8. '_elements' → logprob: -7.955733776092529
    9. '_s' → logprob: -8.080733299255371
    10. '_of' → logprob: -8.330733299255371

Token 60: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.010674129240214825
    2. '(a' → logprob: -4.885673999786377
    3. '(numbers' → logprob: -6.010673999786377
    4. ' (' → logprob: -8.135674476623535
    5. '(values' → logprob: -9.635674476623535
    6. '(def' → logprob: -9.885674476623535
    7. '():' → logprob: -10.260674476623535
    8. '(n' → logprob: -10.385674476623535
    9. '()' → logprob: -10.510674476623535
    10. '(nums' → logprob: -10.635674476623535

Token 61: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.002295728772878647
    2. ',b' → logprob: -6.12729549407959
    3. ' ,' → logprob: -9.12729549407959
    4. ',a' → logprob: -13.87729549407959
    5. ',c' → logprob: -14.62729549407959
    6. ')' → logprob: -15.87729549407959
    7. '):' → logprob: -16.127296447753906
    8. 'b' → logprob: -16.877296447753906
    9. ',d' → logprob: -16.877296447753906
    10. ',s' → logprob: -17.252296447753906

Token 62: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.3868713676929474
    2. 'b' → logprob: -1.136871337890625
    3. ' ' → logprob: -15.761871337890625
    4. ',b' → logprob: -16.511871337890625
    5. '	b' → logprob: -16.636871337890625
    6. ' б' → logprob: -17.136871337890625
    7. ' ' → logprob: -17.886871337890625
    8. ')b' → logprob: -17.886871337890625
    9. '_b' → logprob: -18.261871337890625
    10. ',' → logprob: -18.386871337890625

Token 63: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -5.7053759519476444e-05
    2. ' ,' → logprob: -10.000057220458984
    3. ',c' → logprob: -11.625057220458984
    4. '):' → logprob: -13.500057220458984
    5. ',b' → logprob: -14.625057220458984
    6. ',
' → logprob: -14.875057220458984
    7. ')' → logprob: -15.500057220458984
    8. 'c' → logprob: -15.750057220458984
    9. '_,' → logprob: -17.500057220458984
    10. ' ' → logprob: -17.875057220458984

Token 64: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.01106515247374773
    2. 'c' → logprob: -4.5110650062561035
    3. ' ' → logprob: -11.761065483093262
    4. ')' → logprob: -12.886065483093262
    5. ')c' → logprob: -13.386065483093262
    6. ' )' → logprob: -13.511065483093262
    7. ' ' → logprob: -13.636065483093262
    8. ' and' → logprob: -14.511065483093262
    9. '	c' → logprob: -14.886065483093262
    10. ',c' → logprob: -14.886065483093262

Token 65: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -6.921253225300461e-05
    2. ')' → logprob: -9.750069618225098
    3. '):
' → logprob: -11.750069618225098
    4. ':' → logprob: -13.125069618225098
    5. ' ):' → logprob: -14.750069618225098
    6. '   ' → logprob: -16.00006866455078
    7. ''):' → logprob: -16.25006866455078
    8. ',' → logprob: -16.50006866455078
    9. '():' → logprob: -16.75006866455078
    10. '}:' → logprob: -16.87506866455078

Token 66: '   ' (ID: 271)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.45040494203567505
    2. 'a' → logprob: -1.2004048824310303
    3. '   ' → logprob: -2.8254048824310303
    4. ' return' → logprob: -6.200405120849609
    5. 'return' → logprob: -9.32540512084961
    6. '(a' → logprob: -9.57540512084961
    7. '    
' → logprob: -10.57540512084961
    8. '    ' → logprob: -10.95040512084961
    9. '	a' → logprob: -11.57540512084961
    10. ' ' → logprob: -11.82540512084961

Token 67: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.3266296684741974
    2. ' a' → logprob: -1.701629638671875
    3. 'a' → logprob: -2.951629638671875
    4. 'return' (adapté à ' return') → logprob: -3.326629638671875
    5. '   ' → logprob: -4.826629638671875
    6. '    ' → logprob: -10.451629638671875
    7. ' ' → logprob: -10.826629638671875
    8. '    
' → logprob: -11.576629638671875
    9. ' 
' → logprob: -12.076629638671875
    10. '	return' → logprob: -12.451629638671875

Token 68: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.6931493282318115
    2. ' a' → logprob: -0.6931493282318115
    3. ' ' → logprob: -14.19314956665039
    4. ' ' → logprob: -14.56814956665039
    5. '	a' → logprob: -14.69314956665039
    6. '(a' → logprob: -15.44314956665039
    7. '   ' → logprob: -15.56814956665039
    8. '_a' → logprob: -16.56814956665039
    9. ' (' → logprob: -17.44314956665039
    10. '  ' → logprob: -17.56814956665039

Token 69: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.5759482979774475
    2. '+' → logprob: -0.8259482979774475
    3. ' +
' → logprob: -12.825948715209961
    4. '+b' → logprob: -13.450948715209961
    5. ' ' → logprob: -13.575948715209961
    6. ' ' → logprob: -13.825948715209961
    7. '_' → logprob: -14.950948715209961
    8. ' plus' → logprob: -15.075948715209961
    9. '+
' → logprob: -15.325948715209961
    10. ')' → logprob: -15.825948715209961

Token 70: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.6931478977203369
    2. ' b' → logprob: -0.6931478977203369
    3. '	b' → logprob: -15.193147659301758
    4. ' ' → logprob: -15.193147659301758
    5. ' ' → logprob: -15.818147659301758
    6. 'c' → logprob: -16.568147659301758
    7. ' c' → logprob: -16.818147659301758
    8. ' б' → logprob: -18.818147659301758
    9. '   ' → logprob: -18.943147659301758
    10. '_b' → logprob: -19.068147659301758

Token 71: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.012777911499142647
    2. '+' → logprob: -4.387777805328369
    3. ' ' → logprob: -8.512778282165527
    4. '+c' → logprob: -10.387778282165527
    5. 'c' → logprob: -11.387778282165527
    6. ' c' → logprob: -11.637778282165527
    7. ' +
' → logprob: -12.387778282165527
    8. '<|end|>' → logprob: -13.262778282165527
    9. ')' → logprob: -13.512778282165527
    10. '_' → logprob: -13.637778282165527

Token 72: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.5759401917457581
    2. ' c' → logprob: -0.8259401917457581
    3. ' ' → logprob: -14.950940132141113
    4. '	c' → logprob: -15.200940132141113
    5. 'b' → logprob: -16.32594108581543
    6. ')c' → logprob: -16.95094108581543
    7. '_c' → logprob: -17.45094108581543
    8. ' ' → logprob: -17.45094108581543
    9. '(c' → logprob: -17.70094108581543
    10. '   ' → logprob: -17.95094108581543

Token 73: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.09548040479421616
    2. '

' → logprob: -2.720480442047119
    3. '
' → logprob: -3.845480442047119
    4. '<|end|>' → logprob: -6.095480442047119
    5. '```' → logprob: -6.845480442047119
    6. '\n' → logprob: -8.470479965209961
    7. '\' → logprob: -9.970479965209961
    8. 'newline' → logprob: -9.970479965209961
    9. '<|end|>' → logprob: -10.220479965209961
    10. '#' → logprob: -10.470479965209961

Token 74: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.1860300600528717
    2. 'a' → logprob: -2.436030149459839
    3. 'print' → logprob: -3.311030149459839
    4. 'result' → logprob: -3.811030149459839
    5. '#' → logprob: -4.18602991104126
    6. 'n' → logprob: -5.43602991104126
    7. '```' → logprob: -7.18602991104126
    8. '\' → logprob: -7.43602991104126
    9. 'output' → logprob: -7.56102991104126
    10. 'input' → logprob: -8.061030387878418

Token 75: ' is' (ID: 382)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.002231736434623599
    2. 'main' → logprob: -6.502231597900391
    3. ' calculate' → logprob: -8.25223159790039
    4. ' multiply' → logprob: -8.37723159790039
    5. ' product' → logprob: -9.00223159790039
    6. ' compute' → logprob: -10.50223159790039
    7. ' print' → logprob: -10.87723159790039
    8. ' average' → logprob: -11.25223159790039
    9. ' sum' → logprob: -11.50223159790039
    10. ' get' → logprob: -12.00223159790039

Token 76: '_b' (ID: 1535)
  Prédit: '_even'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_even' → logprob: -0.5142533779144287
    2. '_sum' → logprob: -1.7642533779144287
    3. '_prime' → logprob: -2.7642533779144287
    4. '_positive' → logprob: -2.8892533779144287
    5. '_valid' → logprob: -3.1392533779144287
    6. '_div' → logprob: -3.7642533779144287
    7. '_' → logprob: -4.014253616333008
    8. '_pal' → logprob: -4.889253616333008
    9. '_multiple' → logprob: -5.014253616333008
    10. '_equal' → logprob: -5.514253616333008

Token 77: 'ust' (ID: 570)
  Prédit: '_g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_g' → logprob: -1.2237766981124878
    2. 'etween' → logprob: -1.2237766981124878
    3. '_' → logprob: -1.9737766981124878
    4. '_even' → logprob: -2.3487768173217773
    5. 'igger' → logprob: -2.5987768173217773
    6. '_equal' → logprob: -3.7237768173217773
    7. '_less' → logprob: -3.7237768173217773
    8. '_div' → logprob: -4.098776817321777
    9. '_prime' → logprob: -4.848776817321777
    10. '_multiple' → logprob: -5.098776817321777

Token 78: '(total' (ID: 39744)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.13017535209655762
    2. '(a' → logprob: -2.1301753520965576
    3. '(b' → logprob: -6.005175590515137
    4. '(n' → logprob: -9.255175590515137
    5. '_(' → logprob: -9.380175590515137
    6. '(num' → logprob: -9.380175590515137
    7. '_' → logprob: -9.505175590515137
    8. '(amount' → logprob: -9.755175590515137
    9. '((' → logprob: -9.880175590515137
    10. '(value' → logprob: -10.005175590515137

Token 79: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.011657057330012321
    2. ')' → logprob: -5.136657238006592
    3. ',' → logprob: -5.386657238006592
    4. ' ):' → logprob: -8.011656761169434
    5. '_total' → logprob: -8.886656761169434
    6. ',total' → logprob: -8.886656761169434
    7. '(total' → logprob: -9.136656761169434
    8. 'total' → logprob: -9.261656761169434
    9. '>' → logprob: -9.886656761169434
    10. '>):' → logprob: -9.886656761169434

Token 80: '   ' (ID: 271)
  Prédit: ' total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' total' → logprob: -0.45350590348243713
    2. '   ' → logprob: -1.0785058736801147
    3. ' return' → logprob: -4.203505992889404
    4. 'total' → logprob: -4.703505992889404
    5. '(total' → logprob: -8.078505516052246
    6. 'return' → logprob: -9.703505516052246
    7. '	total' → logprob: -9.828505516052246
    8. '    ' → logprob: -10.328505516052246
    9. ' (' → logprob: -11.453505516052246
    10. ' ' → logprob: -12.078505516052246

Token 81: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.49153080582618713
    2. '   ' → logprob: -0.9915307760238647
    3. 'return' (adapté à ' return') → logprob: -4.116530895233154
    4. ' total' → logprob: -6.991530895233154
    5. 'total' → logprob: -10.241530418395996
    6. ' if' → logprob: -10.491530418395996
    7. '	return' → logprob: -11.616530418395996
    8. '    ' → logprob: -12.741530418395996
    9. '   ' → logprob: -12.991530418395996
    10. 'if' → logprob: -13.991530418395996

Token 82: ' total' (ID: 3609)
  Prédit: ' total'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' total' → logprob: -0.5759401917457581
    2. 'total' → logprob: -0.8259401917457581
    3. '(total' → logprob: -14.325940132141113
    4. '	total' → logprob: -16.20094108581543
    5. ' ' → logprob: -17.57594108581543
    6. '   ' → logprob: -17.82594108581543
    7. 'b' → logprob: -17.82594108581543
    8. '$total' → logprob: -18.95094108581543
    9. '>' → logprob: -19.20094108581543
    10. 't' → logprob: -19.20094108581543

Token 83: ' >=' (ID: 5064)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.6329463720321655
    2. '>' → logprob: -0.7579463720321655
    3. ' >=' → logprob: -8.382946014404297
    4. '>=' → logprob: -9.257946014404297
    5. '()>' → logprob: -11.632946014404297
    6. ' ' → logprob: -12.132946014404297
    7. ' ' → logprob: -13.257946014404297
    8. '<' → logprob: -14.007946014404297
    9. ' <' → logprob: -14.382946014404297
    10. '1' → logprob: -14.632946014404297

Token 84: ' ' (ID: 220)
  Prédit: '22'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '22' → logprob: -0.0017162315780296922
    2. '100' → logprob: -7.126716136932373
    3. '21' → logprob: -7.376716136932373
    4. ' ' → logprob: -9.251716613769531
    5. '2' → logprob: -10.751716613769531
    6. 's' → logprob: -11.126716613769531
    7. '50' → logprob: -11.251716613769531
    8. '23' → logprob: -11.376716613769531
    9. '122' → logprob: -11.376716613769531
    10. '200' → logprob: -11.501716613769531

Token 85: '22' (ID: 1709)
  Prédit: '22'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '22' → logprob: -0.0009887460619211197
    2. '21' → logprob: -7.625988960266113
    3. '100' → logprob: -8.125988960266113
    4. '2' → logprob: -9.125988960266113
    5. ' ' → logprob: -11.250988960266113
    6. '10' → logprob: -11.750988960266113
    7. '200' → logprob: -11.750988960266113
    8. '50' → logprob: -12.000988960266113
    9. '122' → logprob: -12.125988960266113
    10. '23' → logprob: -12.250988960266113

Token 86: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.1027764305472374
    2. '<|end|>' → logprob: -2.852776527404785
    3. '
' → logprob: -3.852776527404785
    4. '

' → logprob: -4.227776527404785
    5. '```' → logprob: -6.227776527404785
    6. '<|end|>' → logprob: -6.602776527404785
    7. '\n' → logprob: -8.227776527404785
    8. '#' → logprob: -8.602776527404785
    9. '\' → logprob: -8.977776527404785
    10. 'newline' → logprob: -9.227776527404785

Token 87: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00021831797494087368
    2. 'print' → logprob: -9.875218391418457
    3. '```' → logprob: -10.000218391418457
    4. '
' → logprob: -10.375218391418457
    5. '<|end|>' → logprob: -10.625218391418457
    6. '#' → logprob: -11.000218391418457
    7. 'if' → logprob: -11.625218391418457
    8. '

' → logprob: -11.625218391418457
    9. 'for' → logprob: -11.750218391418457
    10. '\' → logprob: -11.875218391418457

Token 88: ' print' (ID: 2123)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.25062429904937744
    2. ' blackjack' → logprob: -1.8756242990493774
    3. ' calculate' → logprob: -3.875624179840088
    4. ' is' → logprob: -4.625624179840088
    5. ' play' → logprob: -5.000624179840088
    6. ' check' → logprob: -5.000624179840088
    7. ' evaluate' → logprob: -5.250624179840088
    8. ' black' → logprob: -5.375624179840088
    9. ' get' → logprob: -5.875624179840088
    10. 'main' → logprob: -6.125624179840088

Token 89: '_result' (ID: 11623)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03252851963043213
    2. '_result' → logprob: -4.282528400421143
    3. '_total' → logprob: -4.657528400421143
    4. '_' → logprob: -5.282528400421143
    5. '()' → logprob: -7.407528400421143
    6. '_results' → logprob: -7.907528400421143
    7. '_output' → logprob: -7.907528400421143
    8. '("")' → logprob: -8.1575288772583
    9. '_final' → logprob: -8.2825288772583
    10. '(total' → logprob: -8.6575288772583

Token 90: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -5.145118848304264e-05
    2. '("("' → logprob: -10.750051498413086
    3. '('' → logprob: -11.500051498413086
    4. '()' → logprob: -11.750051498413086
    5. ' (' → logprob: -13.250051498413086
    6. '(def' → logprob: -13.375051498413086
    7. '(result' → logprob: -13.750051498413086
    8. '(total' → logprob: -14.000051498413086
    9. '("")' → logprob: -14.250051498413086
    10. '(line' → logprob: -14.500051498413086

Token 91: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.004138953052461147
    2. ')' → logprob: -5.504138946533203
    3. '):
' → logprob: -10.129138946533203
    4. ':' → logprob: -11.629138946533203
    5. ',' → logprob: -11.754138946533203
    6. ' ):' → logprob: -12.754138946533203
    7. '   ' → logprob: -15.629138946533203
    8. '):

' → logprob: -16.379138946533203
    9. '():' → logprob: -16.379138946533203
    10. ' ' → logprob: -16.504138946533203

Token 92: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0001005630983854644
    2. ' print' → logprob: -9.500100135803223
    3. 'print' → logprob: -11.375100135803223
    4. ' if' → logprob: -12.125100135803223
    5. '(' → logprob: -12.875100135803223
    6. '    
' → logprob: -13.125100135803223
    7. '   ' → logprob: -13.500100135803223
    8. '```' → logprob: -14.125100135803223
    9. '()' → logprob: -14.250100135803223
    10. 'if' → logprob: -15.625100135803223

Token 93: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.6491448283195496
    2. 'print' (adapté à ' print') → logprob: -1.2741448879241943
    3. '   ' → logprob: -1.7741448879241943
    4. ' if' → logprob: -3.7741448879241943
    5. 'if' → logprob: -5.274144649505615
    6. '```' → logprob: -10.149145126342773
    7. '    ' → logprob: -10.524145126342773
    8. 'def' → logprob: -11.274145126342773
    9. ' for' → logprob: -11.399145126342773
    10. ' pass' → logprob: -11.524145126342773

Token 94: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.07895521819591522
    2. '(' → logprob: -2.5789551734924316
    3. '(f' → logprob: -10.57895565032959
    4. 'result' → logprob: -11.07895565032959
    5. '('' → logprob: -11.32895565032959
    6. '()' → logprob: -12.20395565032959
    7. ' (' → logprob: -12.45395565032959
    8. '((' → logprob: -13.57895565032959
    9. '(str' → logprob: -14.45395565032959
    10. '(
' → logprob: -14.95395565032959

Token 95: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: 0.0
    2. ' )' → logprob: -17.25
    3. ')
' → logprob: -17.5
    4. '))' → logprob: -18.25
    5. ')`' → logprob: -19.375
    6. '')' → logprob: -19.75
    7. '())' → logprob: -20.375
    8. ')}' → logprob: -20.5
    9. ')#' → logprob: -20.625
    10. ')))' → logprob: -20.75

Token 96: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00034297199454158545
    2. 'if' → logprob: -8.000343322753906
    3. 'a' → logprob: -12.750343322753906
    4. 'numbers' → logprob: -13.250343322753906
    5. '```' → logprob: -13.875343322753906
    6. 'for' → logprob: -14.000343322753906
    7. 'while' → logprob: -15.375343322753906
    8. 'input' → logprob: -15.500343322753906
    9. 'n' → logprob: -16.125343322753906
    10. 'print' → logprob: -16.500343322753906

Token 97: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.38693028688430786
    2. 'main' → logprob: -1.136930227279663
    3. ' blackjack' → logprob: -10.136930465698242
    4. 'def' → logprob: -12.261930465698242
    5. 'solve' → logprob: -13.136930465698242
    6. ' solve' → logprob: -13.136930465698242
    7. 'process' → logprob: -13.511930465698242
    8. ' process' → logprob: -13.761930465698242
    9. ' run' → logprob: -13.761930465698242
    10. 'calculate' → logprob: -13.761930465698242

Token 98: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -1.5690089639974758e-05
    2. ' ():' → logprob: -11.125015258789062
    3. '()' → logprob: -14.875015258789062
    4. '(' → logprob: -15.125015258789062
    5. '():
' → logprob: -15.625015258789062
    6. '_' → logprob: -16.375015258789062
    7. ':' → logprob: -17.875015258789062
    8. '(:' → logprob: -18.000015258789062
    9. '(":' → logprob: -18.125015258789062
    10. '().' → logprob: -19.500015258789062

Token 99: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6204217672348022
    2. ' input' → logprob: -1.1204217672348022
    3. 'input' → logprob: -1.9954217672348022
    4. ' numbers' → logprob: -9.370421409606934
    5. '	input' → logprob: -10.745421409606934
    6. 'numbers' → logprob: -10.745421409606934
    7. ' inputs' → logprob: -11.245421409606934
    8. 'inputs' → logprob: -11.870421409606934
    9. ' user' → logprob: -12.120421409606934
    10. ' ' → logprob: -12.120421409606934

Token 100: ' inp' (ID: 64450)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.11368727684020996
    2. ' input' → logprob: -2.23868727684021
    3. '   ' → logprob: -7.363687515258789
    4. 'numbers' → logprob: -9.488687515258789
    5. ' numbers' → logprob: -9.863687515258789
    6. 'user' → logprob: -10.363687515258789
    7. 'inputs' → logprob: -10.613687515258789
    8. 'nums' → logprob: -11.738687515258789
    9. ' raw' → logprob: -11.863687515258789
    10. ' user' → logprob: -11.863687515258789

Token 101: ' =' (ID: 314)
  Prédit: 'ut'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ut' → logprob: -0.00024429336190223694
    2. ' =' → logprob: -8.500244140625
    3. '=' → logprob: -10.500244140625
    4. '_ut' → logprob: -11.875244140625
    5. '_' → logprob: -13.000244140625
    6. 'ут' → logprob: -13.375244140625
    7. '=input' → logprob: -14.125244140625
    8. '   ' → logprob: -14.250244140625
    9. ' ut' → logprob: -15.500244140625
    10. 'u' → logprob: -15.875244140625

Token 102: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.06196858361363411
    2. ' get' → logprob: -2.8119685649871826
    3. '(get' → logprob: -14.561968803405762
    4. 'input' → logprob: -15.561968803405762
    5. '	get' → logprob: -15.686968803405762
    6. '_get' → logprob: -17.686967849731445
    7. ' input' → logprob: -17.936967849731445
    8. ' ' → logprob: -18.061967849731445
    9. '   ' → logprob: -18.311967849731445
    10. '=get' → logprob: -18.436967849731445

Token 103: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -1.9361264946837764e-07
    2. '_' → logprob: -16.375
    3. '_output' → logprob: -17.0
    4. '_in' → logprob: -18.375
    5. 'input' → logprob: -18.5
    6. ' _' → logprob: -19.125
    7. '_value' → logprob: -19.125
    8. '_a' → logprob: -19.25
    9. '_line' → logprob: -19.5
    10. '_inputs' → logprob: -19.625

Token 104: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -3.531315314830863e-06
    2. '()
' → logprob: -13.000003814697266
    3. '()

' → logprob: -14.750003814697266
    4. ' ()' → logprob: -15.500003814697266
    5. '()`' → logprob: -15.625003814697266
    6. '()<' → logprob: -16.375003814697266
    7. '(' → logprob: -16.375003814697266
    8. '())' → logprob: -16.750003814697266
    9. '().' → logprob: -17.125003814697266
    10. '()]' → logprob: -17.250003814697266

Token 105: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006964235566556454
    2. ' numbers' → logprob: -5.881964206695557
    3. 'numbers' → logprob: -6.006964206695557
    4. '
' → logprob: -6.881964206695557
    5. '    
' → logprob: -8.131964683532715
    6. '<|end|>' → logprob: -9.006964683532715
    7. '(numbers' → logprob: -9.506964683532715
    8. 'parsed' → logprob: -10.381964683532715
    9. '  ' → logprob: -10.631964683532715
    10. '_numbers' → logprob: -10.881964683532715

Token 106: ' nums' (ID: 18117)
  Prédit: ' numbers'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' numbers' → logprob: -0.9251063466072083
    2. 'numbers' → logprob: -0.9251063466072083
    3. 'nums' (adapté à ' nums') → logprob: -1.8001062870025635
    4. ' nums' → logprob: -3.6751062870025635
    5. '   ' → logprob: -4.175106525421143
    6. 'parsed' → logprob: -8.050106048583984
    7. 'num' → logprob: -8.300106048583984
    8. ' parsed' → logprob: -8.550106048583984
    9. 'n' → logprob: -9.925106048583984
    10. 'values' → logprob: -10.175106048583984

Token 107: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.05009833723306656
    2. '=' → logprob: -3.050098419189453
    3. '   ' → logprob: -7.300098419189453
    4. 'bers' → logprob: -7.425098419189453
    5. 'umbers' → logprob: -9.050098419189453
    6. 'ers' → logprob: -10.050098419189453
    7. '_numbers' → logprob: -11.800098419189453
    8. 'numbers' → logprob: -11.800098419189453
    9. '```' → logprob: -11.925098419189453
    10. '_' → logprob: -12.175098419189453

Token 108: ' parse' (ID: 8420)
  Prédit: ' parse'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' parse' → logprob: -0.0788973867893219
    2. 'parse' → logprob: -2.578897476196289
    3. '(parse' → logprob: -11.953897476196289
    4. '	parse' → logprob: -14.453897476196289
    5. '=parse' → logprob: -14.703897476196289
    6. '.parse' → logprob: -16.32889747619629
    7. '_parse' → logprob: -16.82889747619629
    8. ' ' → logprob: -18.07889747619629
    9. '   ' → logprob: -18.07889747619629
    10. ' parses' → logprob: -18.32889747619629

Token 109: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -2.165027217415627e-05
    2. '_' → logprob: -11.000021934509277
    3. 'input' → logprob: -12.875021934509277
    4. '_inputs' → logprob: -14.375021934509277
    5. '_in' → logprob: -14.875021934509277
    6. '(input' → logprob: -15.000021934509277
    7. '_output' → logprob: -15.375021934509277
    8. '_str' → logprob: -15.625021934509277
    9. 'inp' → logprob: -15.750021934509277
    10. '```' → logprob: -16.75002098083496

Token 110: '(inp' (ID: 141645)
  Prédit: '(inp'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(inp' → logprob: -0.002889159834012389
    2. '(' → logprob: -5.877889156341553
    3. '(input' → logprob: -9.502889633178711
    4. '(inv' → logprob: -12.127889633178711
    5. '(instr' → logprob: -13.377889633178711
    6. '_(' → logprob: -13.877889633178711
    7. '(str' → logprob: -15.127889633178711
    8. ' (' → logprob: -15.252889633178711
    9. '(i' → logprob: -16.00288963317871
    10. '(_' → logprob: -16.12788963317871

Token 111: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.38698437809944153
    2. ')
' → logprob: -1.1369843482971191
    3. ')
' → logprob: -9.136984825134277
    4. ')

' → logprob: -12.886984825134277
    5. ' )
' → logprob: -13.761984825134277
    6. ' )' → logprob: -14.136984825134277
    7. '()' → logprob: -14.511984825134277
    8. '())
' → logprob: -14.761984825134277
    9. '   ' → logprob: -15.386984825134277
    10. '()
' → logprob: -15.761984825134277

Token 112: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2663934528827667
    2. 'a' → logprob: -1.7663934230804443
    3. ' a' → logprob: -2.7663934230804443
    4. '    
' → logprob: -11.516393661499023
    5. '	a' → logprob: -12.391393661499023
    6. ' ' → logprob: -12.891393661499023
    7. '    ' → logprob: -13.516393661499023
    8. ',a' → logprob: -13.516393661499023
    9. '
' → logprob: -13.641393661499023
    10. '   ' → logprob: -13.766393661499023

Token 113: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' (adapté à ' a') → logprob: -0.08911918848752975
    2. ' a' → logprob: -2.4641191959381104
    3. '   ' → logprob: -8.714118957519531
    4. ' ' → logprob: -11.839118957519531
    5. '	a' → logprob: -12.714118957519531
    6. '```' → logprob: -13.214118957519531
    7. '  ' → logprob: -13.714118957519531
    8. '_a' → logprob: -14.464118957519531
    9. 'A' → logprob: -14.589118957519531
    10. '    
' → logprob: -15.214118957519531

Token 114: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0007862794445827603
    2. '=' → logprob: -7.250786304473877
    3. ',' → logprob: -9.500785827636719
    4. ' ' → logprob: -13.500785827636719
    5. ' ,' → logprob: -16.12578582763672
    6. 's' → logprob: -17.50078582763672
    7. '_' → logprob: -17.62578582763672
    8. '  ' → logprob: -17.62578582763672
    9. '   ' → logprob: -18.25078582763672
    10. ')' → logprob: -18.37578582763672

Token 115: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.10021411627531052
    2. ' get' → logprob: -2.3502140045166016
    3. 'nums' → logprob: -12.225214004516602
    4. ' nums' → logprob: -13.600214004516602
    5. '(get' → logprob: -14.350214004516602
    6. 'numbers' → logprob: -15.600214004516602
    7. '	get' → logprob: -16.4752140045166
    8. ' ' → logprob: -16.7252140045166
    9. '=get' → logprob: -16.7252140045166
    10. ' numbers' → logprob: -16.8502140045166

Token 116: '_a' (ID: 10852)
  Prédit: '_a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_a' → logprob: -5.796184723294573e-06
    2. '_b' → logprob: -12.125005722045898
    3. 'a' → logprob: -15.875005722045898
    4. '_' → logprob: -16.5000057220459
    5. '_c' → logprob: -17.8750057220459
    6. '"_' → logprob: -18.8750057220459
    7. '(a' → logprob: -19.5000057220459
    8. ''_' → logprob: -20.2500057220459
    9. ' _' → logprob: -20.6250057220459
    10. '```' → logprob: -20.8750057220459

Token 117: '(nums' (ID: 40372)
  Prédit: '(nums'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(nums' → logprob: -0.0007135047344490886
    2. '(numbers' → logprob: -7.250713348388672
    3. '(' → logprob: -12.750713348388672
    4. ' (' → logprob: -14.250713348388672
    5. '(n' → logprob: -16.750713348388672
    6. 'nums' → logprob: -18.125713348388672
    7. '(num' → logprob: -18.500713348388672
    8. ' nums' → logprob: -19.375713348388672
    9. '(scores' → logprob: -20.375713348388672
    10. '(names' → logprob: -20.500713348388672

Token 118: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.20151644945144653
    2. ')' → logprob: -1.7015163898468018
    3. ')
' → logprob: -9.201516151428223
    4. ')

' → logprob: -13.576516151428223
    5. ' )
' → logprob: -14.451516151428223
    6. '   ' → logprob: -14.826516151428223
    7. ')`
' → logprob: -17.20151710510254
    8. '())
' → logprob: -17.45151710510254
    9. ' )' → logprob: -17.45151710510254
    10. ')a' → logprob: -17.45151710510254

Token 119: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10440848767757416
    2. 'b' → logprob: -2.3544085025787354
    3. ' b' → logprob: -5.479408264160156
    4. ' ' → logprob: -12.229408264160156
    5. '
' → logprob: -12.354408264160156
    6. '    
' → logprob: -12.604408264160156
    7. '	b' → logprob: -12.604408264160156
    8. '    ' → logprob: -12.729408264160156
    9. '  ' → logprob: -14.104408264160156
    10. '```' → logprob: -14.979408264160156

Token 120: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' (adapté à ' b') → logprob: -0.0011783202644437551
    2. ' b' → logprob: -6.75117826461792
    3. '   ' → logprob: -11.751178741455078
    4. ' ' → logprob: -16.126178741455078
    5. '  ' → logprob: -16.626178741455078
    6. '	b' → logprob: -17.751178741455078
    7. '    ' → logprob: -19.501178741455078
    8. '    
' → logprob: -21.001178741455078
    9. '
' → logprob: -21.251178741455078
    10. '<|end|>' → logprob: -21.626178741455078

Token 121: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.018150994554162025
    2. '=' → logprob: -4.018150806427002
    3. ' ' → logprob: -14.76815128326416
    4. '   ' → logprob: -15.14315128326416
    5. ' =)' → logprob: -15.64315128326416
    6. ' =
' → logprob: -16.143150329589844
    7. ')' → logprob: -16.768150329589844
    8. '    ' → logprob: -16.893150329589844
    9. ',' → logprob: -17.143150329589844
    10. '(nums' → logprob: -17.393150329589844

Token 122: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.5762811899185181
    2. ' get' → logprob: -0.8262811899185181
    3. ' nums' → logprob: -8.576281547546387
    4. 'nums' → logprob: -8.951281547546387
    5. '(get' → logprob: -11.326281547546387
    6. '(nums' → logprob: -12.701281547546387
    7. '_get' → logprob: -13.076281547546387
    8. '.get' → logprob: -13.076281547546387
    9. '	get' → logprob: -13.451281547546387
    10. '=get' → logprob: -14.326281547546387

Token 123: '_b' (ID: 1535)
  Prédit: '_b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_b' → logprob: -0.0013166663702577353
    2. '(nums' → logprob: -7.126316547393799
    3. '_a' → logprob: -7.626316547393799
    4. 'b' → logprob: -10.876317024230957
    5. '(numbers' → logprob: -13.876317024230957
    6. 'nums' → logprob: -14.001317024230957
    7. '(get' → logprob: -14.126317024230957
    8. '_(' → logprob: -14.751317024230957
    9. '_value' → logprob: -14.751317024230957
    10. '(b' → logprob: -14.876317024230957

Token 124: '(nums' (ID: 40372)
  Prédit: '(nums'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(nums' → logprob: -4.008129963040119e-06
    2. '(' → logprob: -13.000003814697266
    3. 'nums' → logprob: -13.500003814697266
    4. '(numbers' → logprob: -15.500003814697266
    5. ' (' → logprob: -18.250003814697266
    6. ' nums' → logprob: -18.500003814697266
    7. '(n' → logprob: -19.250003814697266
    8. '(chars' → logprob: -19.625003814697266
    9. '(
' → logprob: -19.750003814697266
    10. '(vals' → logprob: -20.125003814697266

Token 125: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.20143282413482666
    2. ')
' → logprob: -1.7014328241348267
    3. ')
' → logprob: -11.576433181762695
    4. '   ' → logprob: -11.701433181762695
    5. ')

' → logprob: -14.576433181762695
    6. ')`
' → logprob: -15.326433181762695
    7. ' )
' → logprob: -15.326433181762695
    8. '),' → logprob: -15.451433181762695
    9. ' )' → logprob: -15.701433181762695
    10. '(nums' → logprob: -16.826433181762695

Token 126: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.48029014468193054
    2. 'c' → logprob: -0.9802901744842529
    3. ' c' → logprob: -5.105289936065674
    4. ' ' → logprob: -9.605290412902832
    5. '	c' → logprob: -9.980290412902832
    6. '  ' → logprob: -11.980290412902832
    7. '    
' → logprob: -12.605290412902832
    8. '
' → logprob: -12.730290412902832
    9. '    ' → logprob: -13.855290412902832
    10. '```' → logprob: -13.980290412902832

Token 127: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' (adapté à ' c') → logprob: -0.12700380384922028
    2. ' c' → logprob: -2.1270039081573486
    3. '   ' → logprob: -9.50200366973877
    4. ' ' → logprob: -14.25200366973877
    5. '	c' → logprob: -15.12700366973877
    6. '```' → logprob: -17.002004623413086
    7. '  ' → logprob: -17.127004623413086
    8. '
' → logprob: -18.127004623413086
    9. '       ' → logprob: -18.752004623413086
    10. '    ' → logprob: -19.127004623413086

Token 128: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2519311308860779
    2. '=' → logprob: -1.5019311904907227
    3. '(nums' → logprob: -13.751931190490723
    4. '(' → logprob: -14.751931190490723
    5. ')' → logprob: -15.626931190490723
    6. ' ' → logprob: -15.626931190490723
    7. '=get' → logprob: -16.501930236816406
    8. '   ' → logprob: -16.626930236816406
    9. '  ' → logprob: -17.376930236816406
    10. ' =)' → logprob: -17.626930236816406

Token 129: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.38690438866615295
    2. ' get' → logprob: -1.1369043588638306
    3. '(get' → logprob: -10.3869047164917
    4. '[get' → logprob: -14.1369047164917
    5. '.get' → logprob: -14.3869047164917
    6. '_get' → logprob: -14.6369047164917
    7. '	get' → logprob: -15.0119047164917
    8. '=get' → logprob: -15.5119047164917
    9. ')get' → logprob: -16.886903762817383
    10. 'nums' → logprob: -16.886903762817383

Token 130: '_c' (ID: 1303)
  Prédit: '_c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_c' → logprob: -3.690834273584187e-05
    2. '(nums' → logprob: -10.50003719329834
    3. '_a' → logprob: -11.75003719329834
    4. 'c' → logprob: -14.50003719329834
    5. '_(' → logprob: -15.37503719329834
    6. '_' → logprob: -16.000036239624023
    7. '(numbers' → logprob: -16.250036239624023
    8. '_nums' → logprob: -16.250036239624023
    9. '_b' → logprob: -16.625036239624023
    10. '_value' → logprob: -16.875036239624023

Token 131: '(nums' (ID: 40372)
  Prédit: '(nums'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(nums' → logprob: -1.6166903151315637e-05
    2. '(numbers' → logprob: -11.750016212463379
    3. '(' → logprob: -11.875016212463379
    4. 'nums' → logprob: -14.000016212463379
    5. '(num' → logprob: -15.500016212463379
    6. ' (' → logprob: -16.375015258789062
    7. ' nums' → logprob: -16.500015258789062
    8. '(vals' → logprob: -17.875015258789062
    9. '```' → logprob: -18.250015258789062
    10. '(tokens' → logprob: -18.375015258789062

Token 132: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.014168089255690575
    2. ')
' → logprob: -4.2641682624816895
    3. '   ' → logprob: -13.139167785644531
    4. ')
' → logprob: -13.264167785644531
    5. ')

' → logprob: -14.639167785644531
    6. ' )' → logprob: -15.639167785644531
    7. ')`' → logprob: -16.76416778564453
    8. '),' → logprob: -16.88916778564453
    9. '))' → logprob: -17.26416778564453
    10. ')`
' → logprob: -17.38916778564453

Token 133: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05567210912704468
    2. 'total' → logprob: -3.8056721687316895
    3. ' total' → logprob: -4.0556721687316895
    4. '
' → logprob: -4.3056721687316895
    5. '    
' → logprob: -7.6806721687316895
    6. '	total' → logprob: -7.8056721687316895
    7. '```' → logprob: -10.180671691894531
    8. ' ' → logprob: -10.180671691894531
    9. 't' → logprob: -10.430671691894531
    10. '  
' → logprob: -10.680671691894531

Token 134: ' total' (ID: 3609)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'total' (adapté à ' total') → logprob: -0.3152928054332733
    2. ' total' → logprob: -1.3152928352355957
    3. 'result' → logprob: -6.690292835235596
    4. ' result' → logprob: -7.940292835235596
    5. 's' → logprob: -9.065292358398438
    6. 'sum' → logprob: -9.065292358398438
    7. '   ' → logprob: -9.315292358398438
    8. ' s' → logprob: -9.690292358398438
    9. ' sum' → logprob: -11.315292358398438
    10. 't' → logprob: -11.565292358398438

Token 135: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0040799472481012344
    2. '=' → logprob: -5.504079818725586
    3. '_' → logprob: -13.879079818725586
    4. ')' → logprob: -14.879079818725586
    5. ' ' → logprob: -16.754079818725586
    6. '(' → logprob: -17.379079818725586
    7. ' ' → logprob: -17.504079818725586
    8. ' =)' → logprob: -17.879079818725586
    9. '	' → logprob: -18.379079818725586
    10. ',' → logprob: -18.504079818725586

Token 136: ' sum' (ID: 4215)
  Prédit: ' sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sum' → logprob: -0.3132634460926056
    2. 'sum' → logprob: -1.3132634162902832
    3. 'a' → logprob: -13.563263893127441
    4. ' a' → logprob: -14.688263893127441
    5. '(sum' → logprob: -17.188262939453125
    6. '	sum' → logprob: -17.813262939453125
    7. ' ' → logprob: -18.313262939453125
    8. '   ' → logprob: -18.563262939453125
    9. ' suma' → logprob: -19.938262939453125
    10. ' ' → logprob: -19.938262939453125

Token 137: '_values' (ID: 20393)
  Prédit: '_values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_values' → logprob: -1.5213274309644476e-05
    2. '_' → logprob: -11.125015258789062
    3. '_value' → logprob: -15.625015258789062
    4. '_vals' → logprob: -16.500015258789062
    5. '_val' → logprob: -16.750015258789062
    6. '_VALUES' → logprob: -17.125015258789062
    7. '_total' → logprob: -18.000015258789062
    8. ' _' → logprob: -18.625015258789062
    9. '_results' → logprob: -19.250015258789062
    10. '(' → logprob: -19.250015258789062

Token 138: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.0015029559144750237
    2. '(' → logprob: -6.501502990722656
    3. ' (' → logprob: -14.376502990722656
    4. '(
' → logprob: -17.251502990722656
    5. '(b' → logprob: -18.751502990722656
    6. '(i' → logprob: -19.126502990722656
    7. '(A' → logprob: -19.626502990722656
    8. '(ai' → logprob: -19.626502990722656
    9. '(s' → logprob: -20.251502990722656
    10. '(o' → logprob: -20.626502990722656

Token 139: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -6.301394023466855e-05
    2. ',b' → logprob: -10.000062942504883
    3. ' ,' → logprob: -11.000062942504883
    4. 'b' → logprob: -14.375062942504883
    5. ')' → logprob: -16.250062942504883
    6. ',
' → logprob: -16.375062942504883
    7. ',c' → logprob: -17.625062942504883
    8. ' b' → logprob: -18.000062942504883
    9. ',

' → logprob: -18.500062942504883
    10. 'a' → logprob: -19.000062942504883

Token 140: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.1602250337600708
    2. 'b' → logprob: -1.9102250337600708
    3. ' ' → logprob: -14.410224914550781
    4. ')' → logprob: -16.03522491455078
    5. 'c' → logprob: -16.28522491455078
    6. ' c' → logprob: -16.91022491455078
    7. ')b' → logprob: -17.28522491455078
    8. ',' → logprob: -17.66022491455078
    9. '	b' → logprob: -17.66022491455078
    10. ',b' → logprob: -18.03522491455078

Token 141: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -5.717296517104842e-05
    2. ' ,' → logprob: -10.125057220458984
    3. ',c' → logprob: -11.125057220458984
    4. 'c' → logprob: -14.375057220458984
    5. ',
' → logprob: -14.500057220458984
    6. ')' → logprob: -15.000057220458984
    7. ',b' → logprob: -15.500057220458984
    8. '),' → logprob: -15.750057220458984
    9. '`,' → logprob: -16.125057220458984
    10. '   ' → logprob: -16.500057220458984

Token 142: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.2519562244415283
    2. 'c' → logprob: -1.5019562244415283
    3. ')' → logprob: -10.87695598602295
    4. ' ' → logprob: -12.50195598602295
    5. ')c' → logprob: -13.50195598602295
    6. ' ' → logprob: -14.50195598602295
    7. '	c' → logprob: -14.62695598602295
    8. '"' → logprob: -15.25195598602295
    9. '_c' → logprob: -15.37695598602295
    10. '    ' → logprob: -15.50195598602295

Token 143: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.31332600116729736
    2. ')
' → logprob: -1.3133260011672974
    3. '   ' → logprob: -10.563325881958008
    4. ')

' → logprob: -10.563325881958008
    5. ')
' → logprob: -11.563325881958008
    6. ' )' → logprob: -13.813325881958008
    7. ' )
' → logprob: -13.938325881958008
    8. ' ' → logprob: -14.938325881958008
    9. '
' → logprob: -15.438325881958008
    10. 'if' → logprob: -15.813325881958008

Token 144: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09595433622598648
    2. 'if' → logprob: -2.970954418182373
    3. ' if' → logprob: -3.220954418182373
    4. 'result' → logprob: -8.470953941345215
    5. ' result' → logprob: -9.720953941345215
    6. 'print' → logprob: -10.845953941345215
    7. '    
' → logprob: -10.970953941345215
    8. ' print' → logprob: -12.720953941345215
    9. '```' → logprob: -12.720953941345215
    10. '
' → logprob: -12.845953941345215

Token 145: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.02101150155067444
    2. ' if' → logprob: -4.2710113525390625
    3. '   ' → logprob: -5.5210113525390625
    4. 'result' → logprob: -6.2710113525390625
    5. 'print' → logprob: -7.0210113525390625
    6. ' result' → logprob: -10.521011352539062
    7. ' print' → logprob: -11.646011352539062
    8. ' ' → logprob: -12.896011352539062
    9. '```' → logprob: -14.896011352539062
    10. 'b' → logprob: -15.271011352539062

Token 146: ' is' (ID: 382)
  Prédit: ' is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.025509702041745186
    2. 'is' → logprob: -3.7755095958709717
    3. ' not' → logprob: -6.275509834289551
    4. 'not' → logprob: -7.900509834289551
    5. 'b' → logprob: -13.15050983428955
    6. ' ' → logprob: -13.40050983428955
    7. 'total' → logprob: -13.52550983428955
    8. '(is' → logprob: -13.77550983428955
    9. ' ' → logprob: -13.90050983428955
    10. ' total' → logprob: -14.27550983428955

Token 147: '_b' (ID: 1535)
  Prédit: '_b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_b' → logprob: -2.696889623621246e-06
    2. 'b' → logprob: -12.87500286102295
    3. '_' → logprob: -18.250001907348633
    4. 'Bust' → logprob: -18.750001907348633
    5. '_a' → logprob: -19.625001907348633
    6. '(b' → logprob: -19.750001907348633
    7. 'B' → logprob: -20.500001907348633
    8. ' bust' → logprob: -20.625001907348633
    9. 'a' → logprob: -20.750001907348633
    10. '\' → logprob: -20.875001907348633

Token 148: 'ust' (ID: 570)
  Prédit: 'ust'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ust' → logprob: -0.00022999993234407157
    2. '_b' → logprob: -8.750229835510254
    3. 'b' → logprob: -9.875229835510254
    4. 'u' → logprob: -12.000229835510254
    5. '_' → logprob: -12.375229835510254
    6. 'Bust' → logprob: -13.000229835510254
    7. 'st' → logprob: -13.625229835510254
    8. 'уст' → logprob: -13.750229835510254
    9. 'urst' → logprob: -14.500229835510254
    10. 'a' → logprob: -14.625229835510254

Token 149: '(total' (ID: 39744)
  Prédit: '(total'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(total' → logprob: -0.0002833848411682993
    2. '(' → logprob: -8.250283241271973
    3. ' (' → logprob: -10.750283241271973
    4. 'total' → logprob: -14.500283241271973
    5. '(not' → logprob: -15.500283241271973
    6. '(target' → logprob: -18.12528419494629
    7. ' total' → logprob: -18.37528419494629
    8. '((' → logprob: -18.50028419494629
    9. '(t' → logprob: -18.62528419494629
    10. '(sum' → logprob: -19.75028419494629

Token 150: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.013447606936097145
    2. '):
' → logprob: -4.3884477615356445
    3. ' ):' → logprob: -7.1384477615356445
    4. ')' → logprob: -9.263447761535645
    5. '():' → logprob: -10.638447761535645
    6. ':' → logprob: -12.013447761535645
    7. ' ):
' → logprob: -12.263447761535645
    8. '   ' → logprob: -12.763447761535645
    9. '):

' → logprob: -12.888447761535645
    10. '):
' → logprob: -13.013447761535645

Token 151: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0016850552055984735
    2. 'print' → logprob: -7.12668514251709
    3. '   ' → logprob: -7.87668514251709
    4. ' print' → logprob: -8.00168514251709
    5. '
' → logprob: -9.50168514251709
    6. '        
' → logprob: -10.75168514251709
    7. '    
' → logprob: -11.25168514251709
    8. ':' → logprob: -11.87668514251709
    9. 'result' → logprob: -12.00168514251709
    10. ':
' → logprob: -12.37668514251709

Token 152: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.26691415905952454
    2. '       ' → logprob: -1.8919141292572021
    3. ' print' → logprob: -2.516914129257202
    4. '   ' → logprob: -6.641914367675781
    5. 'result' → logprob: -6.766914367675781
    6. ' result' → logprob: -8.891914367675781
    7. '	print' → logprob: -9.641914367675781
    8. '
' → logprob: -10.641914367675781
    9. 'return' → logprob: -11.266914367675781
    10. '"' → logprob: -11.266914367675781

Token 153: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -0.07581796497106552
    2. '("_' → logprob: -3.0758180618286133
    3. '("' → logprob: -3.8258180618286133
    4. '(' → logprob: -6.075818061828613
    5. '('_' → logprob: -6.450818061828613
    6. '_' → logprob: -8.450818061828613
    7. 'Result' → logprob: -8.700818061828613
    8. '('' → logprob: -8.700818061828613
    9. '_("' → logprob: -8.950818061828613
    10. 'result' → logprob: -9.325818061828613

Token 154: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.038304947316646576
    2. '('' → logprob: -3.4133050441741943
    3. '(' → logprob: -5.663304805755615
    4. '("("' → logprob: -7.413304805755615
    5. ' ("' → logprob: -8.538305282592773
    6. '("")' → logprob: -8.913305282592773
    7. '("(' → logprob: -9.288305282592773
    8. '(":' → logprob: -10.663305282592773
    9. '"' → logprob: -11.163305282592773
    10. '   ' → logprob: -11.413305282592773

Token 155: 'b' (ID: 65)
  Prédit: 'b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.16515348851680756
    2. 'Bust' → logprob: -1.9151535034179688
    3. 'B' → logprob: -5.790153503417969
    4. '"' → logprob: -6.540153503417969
    5. ' bust' → logprob: -9.165153503417969
    6. ''b' → logprob: -9.540153503417969
    7. '"B' → logprob: -9.540153503417969
    8. 'バ' → logprob: -10.165153503417969
    9. ':b' → logprob: -10.790153503417969
    10. ''' → logprob: -11.165153503417969

Token 156: 'ust' (ID: 570)
  Prédit: 'ust'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ust' → logprob: -7.028536492725834e-05
    2. 'u' → logprob: -10.000070571899414
    3. 'usted' → logprob: -11.625070571899414
    4. 'us' → logprob: -11.875070571899414
    5. 'urst' → logprob: -12.000070571899414
    6. 'UST' → logprob: -13.750070571899414
    7. '"' → logprob: -14.875070571899414
    8. 'usta' → logprob: -15.500070571899414
    9. 'ush' → logprob: -15.750070571899414
    10. '
' → logprob: -16.375070571899414

Token 157: '")
' (ID: 1896)
  Prédit: '")
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")
' → logprob: -0.388542115688324
    2. '")' → logprob: -1.1385421752929688
    3. 'else' → logprob: -6.888542175292969
    4. '")
' → logprob: -8.513542175292969
    5. '"' → logprob: -8.763542175292969
    6. ')
' → logprob: -9.638542175292969
    7. '   ' → logprob: -9.888542175292969
    8. ' else' → logprob: -10.013542175292969
    9. ')' → logprob: -10.513542175292969
    10. 'b' → logprob: -10.638542175292969

Token 158: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.018728552386164665
    2. 'else' → logprob: -4.268728733062744
    3. ' else' → logprob: -5.393728733062744
    4. '<|end|>' → logprob: -12.393728256225586
    5. '	else' → logprob: -13.268728256225586
    6. ' ' → logprob: -14.518728256225586
    7. '```' → logprob: -14.518728256225586
    8. '
' → logprob: -14.643728256225586
    9. ')' → logprob: -14.893728256225586
    10. '  ' → logprob: -14.893728256225586

Token 159: ' else' (ID: 1203)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6158723831176758
    2. 'else' (adapté à ' else') → logprob: -0.8658723831176758
    3. ' else' → logprob: -3.240872383117676
    4. 'elif' → logprob: -11.365872383117676
    5. ' ' → logprob: -12.865872383117676
    6. '	else' → logprob: -14.240872383117676
    7. '  ' → logprob: -14.365872383117676
    8. ' elif' → logprob: -14.615872383117676
    9. '```' → logprob: -15.740872383117676
    10. '
' → logprob: -16.11587142944336

Token 160: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.4606853425502777
    2. '       ' → logprob: -1.0856853723526
    3. ':
' → logprob: -3.4606852531433105
    4. '   ' → logprob: -10.585685729980469
    5. 'print' → logprob: -11.710685729980469
    6. ' :' → logprob: -12.335685729980469
    7. ':

' → logprob: -12.335685729980469
    8. '(' → logprob: -12.335685729980469
    9. ' :
' → logprob: -12.585685729980469
    10. '      ' → logprob: -12.710685729980469

Token 161: '       ' (ID: 309)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5892381072044373
    2. '       ' → logprob: -0.8392381072044373
    3. '   ' → logprob: -4.714238166809082
    4. ' print' → logprob: -5.464238166809082
    5. ' ' → logprob: -13.339238166809082
    6. '	print' → logprob: -13.464238166809082
    7. '(print' → logprob: -13.589238166809082
    8. '  ' → logprob: -14.464238166809082
    9. '.print' → logprob: -14.464238166809082
    10. '           ' → logprob: -14.714238166809082

Token 162: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0013325021136552095
    2. ' print' → logprob: -6.6263322830200195
    3. '   ' → logprob: -12.00133228302002
    4. '	print' → logprob: -16.376333236694336
    5. ' ' → logprob: -16.501333236694336
    6. '(print' → logprob: -17.126333236694336
    7. '  ' → logprob: -17.251333236694336
    8. '.print' → logprob: -17.376333236694336
    9. '       ' → logprob: -18.126333236694336
    10. 'printf' → logprob: -18.376333236694336

Token 163: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -1.6240566083070007e-06
    2. 'result' → logprob: -13.500001907348633
    3. '_' → logprob: -17.000001907348633
    4. '_value' → logprob: -17.250001907348633
    5. '(result' → logprob: -17.625001907348633
    6. '(' → logprob: -18.500001907348633
    7. '_results' → logprob: -18.750001907348633
    8. 'Result' → logprob: -19.000001907348633
    9. '_RESULT' → logprob: -19.125001907348633
    10. '(_' → logprob: -19.750001907348633

Token 164: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.412533164024353
    2. '(total' → logprob: -1.162533164024353
    3. '(' → logprob: -3.9125332832336426
    4. '(str' → logprob: -6.037533283233643
    5. '("("' → logprob: -6.037533283233643
    6. '("")' → logprob: -8.662532806396484
    7. '("(' → logprob: -8.912532806396484
    8. '(f' → logprob: -9.662532806396484
    9. '(""' → logprob: -9.662532806396484
    10. '('' → logprob: -10.787532806396484

Token 165: 'win' (ID: 11668)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'total' → logprob: -0.005841588135808706
    2. '"' → logprob: -5.7558417320251465
    3. 'str' → logprob: -6.0058417320251465
    4. ' total' → logprob: -8.630841255187988
    5. '(total' → logprob: -12.505841255187988
    6. '   ' → logprob: -13.005841255187988
    7. 'tot' → logprob: -13.130841255187988
    8. 'f' → logprob: -13.630841255187988
    9. 't' → logprob: -13.755841255187988
    10. 'sum' → logprob: -13.755841255187988

Token 166: '")

' (ID: 10822)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -6.694766489090398e-05
    2. '")
' → logprob: -9.875066757202148
    3. ')' → logprob: -11.625066757202148
    4. ')")' → logprob: -12.125066757202148
    5. '"' → logprob: -14.625066757202148
    6. '!")' → logprob: -15.000066757202148
    7. '()' → logprob: -15.625066757202148
    8. '")

' → logprob: -15.750066757202148
    9. '')' → logprob: -17.25006675720215
    10. '")
' → logprob: -17.50006675720215

Token 167: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.07117128372192383
    2. 'main' → logprob: -2.821171283721924
    3. '
' → logprob: -4.696171283721924
    4. ' if' → logprob: -11.696170806884766
    5. '```' → logprob: -11.821170806884766
    6. '<|end|>' → logprob: -12.696170806884766
    7. ' main' → logprob: -12.821170806884766
    8. '(main' → logprob: -12.946170806884766
    9. '\n' → logprob: -13.321170806884766
    10. '

' → logprob: -13.696170806884766

Token 168: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -3.583550642360933e-05
    2. '(' → logprob: -10.375036239624023
    3. '()
' → logprob: -13.250036239624023
    4. '();' → logprob: -13.875036239624023
    5. '()

' → logprob: -14.625036239624023
    6. '()`' → logprob: -14.625036239624023
    7. ' ()' → logprob: -14.750036239624023
    8. '().' → logprob: -16.000036239624023
    9. '()<' → logprob: -16.125036239624023
    10. '()"' → logprob: -17.000036239624023


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 166
Tokens correctement prédits (1ère position, stricte): 88
Tokens correctement prédits (1ère position, avec adaptation): 96
Tokens correctement prédits (top 10): 145
Précision stricte (1ère position): 53.01%
Précision adaptée (1ère position): 57.83%
Précision (top 10): 87.35%
================================================================================
