================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:46:28
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
if n % 2 == 0:
    even = n
    odd = n - 1
else:
    even = n - 1
    odd = n
even_2 = int(even / 2)
result = even_2 * odd
print(result)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00038134094211272895
    2. '(n' → logprob: -9.000381469726562
    3. ''' → logprob: -9.500381469726562
    4. '('' → logprob: -10.125381469726562
    5. '```' → logprob: -10.125381469726562
    6. '`' → logprob: -10.750381469726562
    7. '("("' → logprob: -10.750381469726562
    8. '()' → logprob: -11.250381469726562
    9. 'n' → logprob: -11.625381469726562
    10. ')' → logprob: -12.000381469726562

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0733630508184433
    2. ')' → logprob: -2.8233630657196045
    3. '()' → logprob: -4.698362827301025
    4. '())' → logprob: -6.948362827301025
    5. '```' → logprob: -8.198363304138184
    6. '(
' → logprob: -8.448363304138184
    7. '('' → logprob: -8.948363304138184
    8. '(()' → logprob: -9.073363304138184
    9. '`' → logprob: -9.198363304138184
    10. '("("' → logprob: -9.698363304138184

Token 5: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.6515942215919495
    2. 'for' → logprob: -1.4015941619873047
    3. 'i' → logprob: -2.1515941619873047
    4. 's' → logprob: -2.7765941619873047
    5. 'x' → logprob: -4.651594161987305
    6. ')' → logprob: -5.151594161987305
    7. 'a' → logprob: -5.401594161987305
    8. '*' → logprob: -5.401594161987305
    9. ' ' → logprob: -5.651594161987305
    10. 'f' → logprob: -5.901594161987305

Token 6: ' n' (ID: 297)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.38733163475990295
    2. ' n' → logprob: -1.1373316049575806
    3. 'n' → logprob: -7.762331485748291
    4. ' ' → logprob: -10.88733196258545
    5. '  ' → logprob: -11.88733196258545
    6. ' not' → logprob: -12.38733196258545
    7. ' )' → logprob: -13.88733196258545
    8. ' (' → logprob: -14.38733196258545
    9. ''' → logprob: -14.88733196258545
    10. ' ,' → logprob: -15.01233196258545

Token 7: ' %' (ID: 1851)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.05372427776455879
    2. ' ' → logprob: -4.05372428894043
    3. '>' → logprob: -4.42872428894043
    4. ' <' → logprob: -4.67872428894043
    5. ' >=' → logprob: -5.17872428894043
    6. ' ==' → logprob: -5.30372428894043
    7. ' %' → logprob: -6.55372428894043
    8. ' <=' → logprob: -7.05372428894043
    9. '<' → logprob: -9.05372428894043
    10. '==' → logprob: -9.05372428894043

Token 8: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.11285564303398132
    2. '2' → logprob: -2.2378556728363037
    3. '```' → logprob: -11.362855911254883
    4. '3' → logprob: -11.862855911254883
    5. '4' → logprob: -11.987855911254883
    6. '1' → logprob: -12.612855911254883
    7. '32' → logprob: -13.237855911254883
    8. ' ' → logprob: -14.237855911254883
    9. ' ```' → logprob: -14.237855911254883
    10. ')' → logprob: -15.112855911254883

Token 9: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0004907185211777687
    2. '3' → logprob: -7.750490665435791
    3. ' ' → logprob: -10.37549114227295
    4. '4' → logprob: -11.12549114227295
    5. '5' → logprob: -12.12549114227295
    6. '10' → logprob: -12.62549114227295
    7. '1' → logprob: -12.87549114227295
    8. '7' → logprob: -13.62549114227295
    9. '```' → logprob: -13.87549114227295
    10. '6' → logprob: -15.50049114227295

Token 10: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.15647944808006287
    2. '==' → logprob: -2.0314793586730957
    3. ' !=' → logprob: -4.656479358673096
    4. '=' → logprob: -6.031479358673096
    5. '!=' → logprob: -6.906479358673096
    6. ' =' → logprob: -7.906479358673096
    7. ' ' → logprob: -8.656479835510254
    8. ':' → logprob: -9.156479835510254
    9. ')' → logprob: -9.281479835510254
    10. '!' → logprob: -11.031479835510254

Token 11: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.04300205409526825
    2. '0' → logprob: -3.168002128601074
    3. '1' → logprob: -12.918002128601074
    4. '2' → logprob: -15.418002128601074
    5. ' ' → logprob: -15.918002128601074
    6. '```' → logprob: -15.918002128601074
    7. '=' → logprob: -17.168001174926758
    8. '==' → logprob: -18.418001174926758
    9. ')' → logprob: -18.480501174926758
    10. '  ' → logprob: -18.918001174926758

Token 12: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.003610282437875867
    2. ' ' → logprob: -5.628610134124756
    3. '2' → logprob: -12.128610610961914
    4. '1' → logprob: -12.253610610961914
    5. '```' → logprob: -17.628610610961914
    6. '  ' → logprob: -20.378610610961914
    7. '4' → logprob: -20.503610610961914
    8. '==' → logprob: -20.753610610961914
    9. ' ' → logprob: -20.753610610961914
    10. '   ' → logprob: -20.753610610961914

Token 13: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -9.253090865968261e-06
    2. '':' → logprob: -13.000009536743164
    3. ':**' → logprob: -13.125009536743164
    4. ' :' → logprob: -13.375009536743164
    5. '':'' → logprob: -13.750009536743164
    6. '):' → logprob: -14.375009536743164
    7. '>:' → logprob: -14.625009536743164
    8. ':
' → logprob: -14.875009536743164
    9. '":' → logprob: -15.000009536743164
    10. '":"' → logprob: -15.625009536743164

Token 14: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0710730329155922
    2. ' print' → logprob: -2.696073055267334
    3. 'print' → logprob: -6.946073055267334
    4. '\n' → logprob: -9.821072578430176
    5. '    
' → logprob: -10.196072578430176
    6. '	print' → logprob: -10.946072578430176
    7. ' ' → logprob: -11.196072578430176
    8. '    ' → logprob: -11.321072578430176
    9. '\' → logprob: -11.446072578430176
    10. '   ' → logprob: -11.571072578430176

Token 15: ' even' (ID: 1952)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.2900831401348114
    2. 'print' → logprob: -1.5400831699371338
    3. '   ' → logprob: -3.290083169937134
    4. '    ' → logprob: -10.165082931518555
    5. '\n' → logprob: -10.415082931518555
    6. '    
' → logprob: -10.540082931518555
    7. '\' → logprob: -10.665082931518555
    8. ' \' → logprob: -10.790082931518555
    9. ' 
' → logprob: -11.415082931518555
    10. '```' → logprob: -11.665082931518555

Token 16: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.2657519280910492
    2. ':' → logprob: -1.5157519578933716
    3. ' ' → logprob: -5.140751838684082
    4. '   ' → logprob: -6.265751838684082
    5. '_n' → logprob: -6.515751838684082
    6. '()' → logprob: -7.515751838684082
    7. ' _' → logprob: -7.890751838684082
    8. '(' → logprob: -8.015751838684082
    9. ' =' → logprob: -8.140751838684082
    10. '_num' → logprob: -8.640751838684082

Token 17: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.16028250753879547
    2. 'n' → logprob: -2.535282611846924
    3. ' ' → logprob: -3.785282611846924
    4. ' True' → logprob: -4.285282611846924
    5. '0' → logprob: -4.410282611846924
    6. '"' → logprob: -4.535282611846924
    7. ' "' → logprob: -5.160282611846924
    8. ' '' → logprob: -6.660282611846924
    9. 'True' → logprob: -7.035282611846924
    10. '1' → logprob: -7.535282611846924

Token 18: '
' (ID: 198)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.9377484917640686
    2. '   ' → logprob: -1.6877484321594238
    3. ' +' → logprob: -1.9377484321594238
    4. ' else' → logprob: -2.187748432159424
    5. 'else' → logprob: -2.437748432159424
    6. '
' → logprob: -3.187748432159424
    7. '    
' → logprob: -4.437748432159424
    8. ' ' → logprob: -5.812748432159424
    9. '```' → logprob: -5.812748432159424
    10. '*' → logprob: -6.187748432159424

Token 19: '   ' (ID: 271)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.1842961609363556
    2. ' else' → logprob: -1.9342961311340332
    3. '   ' → logprob: -4.559296131134033
    4. '    
' → logprob: -4.934296131134033
    5. '
' → logprob: -5.309296131134033
    6. '  
' → logprob: -7.809296131134033
    7. ' 
' → logprob: -8.559296607971191
    8. ' ' → logprob: -9.184296607971191
    9. '   
' → logprob: -9.559296607971191
    10. '<|end|>' → logprob: -9.559296607971191

Token 20: ' odd' (ID: 14210)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.12032023072242737
    2. ' else' → logprob: -2.2453203201293945
    3. '   ' → logprob: -5.7453203201293945
    4. 'print' → logprob: -6.7453203201293945
    5. '\n' → logprob: -6.9953203201293945
    6. '    
' → logprob: -6.9953203201293945
    7. '
' → logprob: -8.245320320129395
    8. ' ' → logprob: -8.370320320129395
    9. 'elif' → logprob: -8.370320320129395
    10. '  
' → logprob: -9.620320320129395

Token 21: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.007338980212807655
    2. '=' → logprob: -5.132339000701904
    3. ' ' → logprob: -6.757339000701904
    4. ' +=' → logprob: -8.882338523864746
    5. '_' → logprob: -10.507338523864746
    6. 's' → logprob: -10.882338523864746
    7. '<|end|>' → logprob: -11.257338523864746
    8. '  ' → logprob: -11.632338523864746
    9. '```' → logprob: -11.757338523864746
    10. '   ' → logprob: -11.882338523864746

Token 22: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.3733970820903778
    2. ' ' → logprob: -1.9983971118927002
    3. ' None' → logprob: -2.2483971118927
    4. '0' → logprob: -3.3733971118927
    5. 'n' → logprob: -3.7483971118927
    6. 'None' → logprob: -4.498396873474121
    7. '1' → logprob: -6.748396873474121
    8. '   ' → logprob: -9.623396873474121
    9. ' none' → logprob: -9.998396873474121
    10. '"' → logprob: -10.373396873474121

Token 23: ' -' (ID: 533)
  Prédit: ' +'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.6318490505218506
    2. '+' → logprob: -0.8818490505218506
    3. 'else' → logprob: -3.2568490505218506
    4. ' else' → logprob: -4.38184928894043
    5. '-' → logprob: -6.25684928894043
    6. ' -' → logprob: -7.25684928894043
    7. '+
' → logprob: -8.50684928894043
    8. '   ' → logprob: -9.00684928894043
    9. ' +
' → logprob: -9.25684928894043
    10. ' ' → logprob: -9.38184928894043

Token 24: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.001170460251159966
    2. ' ' → logprob: -6.751170635223389
    3. '   ' → logprob: -15.75117015838623
    4. '  ' → logprob: -18.001171112060547
    5. '```' → logprob: -18.126171112060547
    6. ' ' → logprob: -19.376171112060547
    7. '' → logprob: -19.876171112060547
    8. '１' → logprob: -20.063671112060547
    9. '	' → logprob: -20.188671112060547
    10. '-' → logprob: -20.251171112060547

Token 25: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -4.024604277219623e-05
    2. ' ' → logprob: -10.125040054321289
    3. '   ' → logprob: -16.87504005432129
    4. '```' → logprob: -17.87504005432129
    5. '  ' → logprob: -18.00004005432129
    6. '2' → logprob: -19.06254005432129
    7. '<|end|>' → logprob: -19.06254005432129
    8. '-' → logprob: -19.37504005432129
    9. '3' → logprob: -20.00004005432129
    10. '0' → logprob: -20.18754005432129

Token 26: '
' (ID: 198)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.03455357253551483
    2. ' else' → logprob: -3.7845535278320312
    3. '<|end|>' → logprob: -5.034553527832031
    4. '
' → logprob: -6.034553527832031
    5. '\n' → logprob: -6.909553527832031
    6. 'elif' → logprob: -7.034553527832031
    7. '```' → logprob: -8.409553527832031
    8. '<|end|>' → logprob: -10.034553527832031
    9. '#else' → logprob: -10.284553527832031
    10. 'newline' → logprob: -10.409553527832031

Token 27: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.011177267879247665
    2. ' else' → logprob: -5.136177062988281
    3. '<|end|>' → logprob: -5.636177062988281
    4. 'elif' → logprob: -7.261177062988281
    5. '```' → logprob: -7.886177062988281
    6. '\n' → logprob: -8.011177062988281
    7. '
' → logprob: -9.011177062988281
    8. '\' → logprob: -10.886177062988281
    9. '   ' → logprob: -11.011177062988281
    10. '<|end|>' → logprob: -11.011177062988281

Token 28: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00013560164370574057
    2. ':
' → logprob: -9.00013542175293
    3. '   ' → logprob: -11.37513542175293
    4. ' :' → logprob: -14.87513542175293
    5. ':\' → logprob: -16.37513542175293
    6. ':

' → logprob: -16.87513542175293
    7. '```' → logprob: -17.12513542175293
    8. ':return' → logprob: -17.25013542175293
    9. ',' → logprob: -17.50013542175293
    10. ':
' → logprob: -17.62513542175293

Token 29: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00027254095766693354
    2. '    ' → logprob: -9.500272750854492
    3. '    
' → logprob: -9.625272750854492
    4. ' odd' → logprob: -9.750272750854492
    5. ' ' → logprob: -11.000272750854492
    6. '  ' → logprob: -11.500272750854492
    7. 'n' → logprob: -12.125272750854492
    8. '       ' → logprob: -12.125272750854492
    9. 'odd' → logprob: -12.125272750854492
    10. '```' → logprob: -12.250272750854492

Token 30: ' even' (ID: 1952)
  Prédit: 'odd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'odd' → logprob: -0.7108548879623413
    2. '   ' → logprob: -0.9608548879623413
    3. ' odd' → logprob: -2.335855007171631
    4. 'even' (adapté à ' even') → logprob: -3.710855007171631
    5. ' even' → logprob: -5.335855007171631
    6. ' ' → logprob: -9.710854530334473
    7. '```' → logprob: -9.710854530334473
    8. '  ' → logprob: -11.210854530334473
    9. 'od' → logprob: -11.460854530334473
    10. '    
' → logprob: -11.523354530334473

Token 31: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01604011468589306
    2. '=' → logprob: -4.141040325164795
    3. ' ' → logprob: -12.141039848327637
    4. ' +=' → logprob: -15.141039848327637
    5. ')' → logprob: -16.766040802001953
    6. '   ' → logprob: -16.891040802001953
    7. '_' → logprob: -17.141040802001953
    8. ',' → logprob: -17.766040802001953
    9. ' ==' → logprob: -17.891040802001953
    10. 's' → logprob: -17.891040802001953

Token 32: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.5763931274414062
    2. ' n' → logprob: -0.8263931274414062
    3. '   ' → logprob: -8.076393127441406
    4. '0' → logprob: -9.201393127441406
    5. ' ' → logprob: -10.701393127441406
    6. '(n' → logprob: -12.326393127441406
    7. '	n' → logprob: -12.326393127441406
    8. '  ' → logprob: -13.326393127441406
    9. ' (' → logprob: -13.576393127441406
    10. '    ' → logprob: -13.576393127441406

Token 33: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.22168798744678497
    2. '-' → logprob: -1.9716880321502686
    3. '   ' → logprob: -3.5966880321502686
    4. ' +' → logprob: -3.8466880321502686
    5. ' ' → logprob: -5.4716877937316895
    6. '+' → logprob: -5.4716877937316895
    7. '       ' → logprob: -7.4716877937316895
    8. '    ' → logprob: -7.8466877937316895
    9. '```' → logprob: -8.221688270568848
    10. '
' → logprob: -8.596688270568848

Token 34: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.001170460251159966
    2. ' ' → logprob: -6.751170635223389
    3. '0' → logprob: -16.251171112060547
    4. '```' → logprob: -17.001171112060547
    5. '   ' → logprob: -17.501171112060547
    6. '2' → logprob: -18.001171112060547
    7. '  ' → logprob: -18.001171112060547
    8. '۱' → logprob: -19.063671112060547
    9. '１' → logprob: -19.626171112060547
    10. '<|end|>' → logprob: -19.938671112060547

Token 35: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.5776860184123507e-06
    2. ' ' → logprob: -13.00000286102295
    3. '2' → logprob: -15.87500286102295
    4. '0' → logprob: -16.375001907348633
    5. '```' → logprob: -17.625001907348633
    6. '   ' → logprob: -18.625001907348633
    7. '-' → logprob: -20.000001907348633
    8. '  ' → logprob: -20.062501907348633
    9. '１' → logprob: -20.125001907348633
    10. '۱' → logprob: -20.375001907348633

Token 36: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0018210777780041099
    2. '
' → logprob: -6.876821041107178
    3. '    
' → logprob: -8.001821517944336
    4. 'odd' → logprob: -8.126821517944336
    5. '```' → logprob: -9.001821517944336
    6. '``' → logprob: -11.501821517944336
    7. '  ' → logprob: -12.126821517944336
    8. ' ' → logprob: -12.501821517944336
    9. '`' → logprob: -12.876821517944336
    10. '  
' → logprob: -13.001821517944336

Token 37: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0026475980412214994
    2. 'odd' → logprob: -7.002647399902344
    3. '    
' → logprob: -7.002647399902344
    4. '
' → logprob: -7.502647399902344
    5. '```' → logprob: -8.752647399902344
    6. ' odd' → logprob: -10.627647399902344
    7. '  ' → logprob: -10.752647399902344
    8. '`' → logprob: -11.002647399902344
    9. '\n' → logprob: -11.752647399902344
    10. '    ' → logprob: -12.002647399902344

Token 38: ' odd' (ID: 14210)
  Prédit: 'odd'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'odd' (adapté à ' odd') → logprob: -0.0018455786630511284
    2. '   ' → logprob: -6.376845359802246
    3. ' odd' → logprob: -9.001845359802246
    4. '```' → logprob: -11.751845359802246
    5. 'od' → logprob: -12.001845359802246
    6. ' ' → logprob: -12.626845359802246
    7. '  ' → logprob: -14.251845359802246
    8. 'even' → logprob: -14.376845359802246
    9. '``' → logprob: -14.751845359802246
    10. '    
' → logprob: -14.876845359802246

Token 39: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.007683874107897282
    2. '=' → logprob: -4.882683753967285
    3. ' ' → logprob: -9.507683753967285
    4. ' +=' → logprob: -13.632683753967285
    5. ' ==' → logprob: -14.132683753967285
    6. ' =
' → logprob: -15.382683753967285
    7. ' =)' → logprob: -15.382683753967285
    8. '<|end|>' → logprob: -15.632683753967285
    9. ')' → logprob: -15.757683753967285
    10. '_' → logprob: -16.2576847076416

Token 40: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.6931689977645874
    2. ' n' → logprob: -0.6931689977645874
    3. ' ' → logprob: -11.068168640136719
    4. ' ' → logprob: -12.318168640136719
    5. '	n' → logprob: -14.443168640136719
    6. '_n' → logprob: -15.068168640136719
    7. ' 
' → logprob: -15.318168640136719
    8. '1' → logprob: -15.693168640136719
    9. '2' → logprob: -16.69316864013672
    10. ' (' → logprob: -16.94316864013672

Token 41: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.38865891098976135
    2. '\n' → logprob: -1.888658881187439
    3. 'for' → logprob: -2.5136590003967285
    4. 'print' → logprob: -4.0136590003967285
    5. '```' → logprob: -4.1386590003967285
    6. ' 
' → logprob: -4.6386590003967285
    7. '  
' → logprob: -4.8886590003967285
    8. '#' → logprob: -5.3886590003967285
    9. ' for' → logprob: -5.3886590003967285
    10. '    
' → logprob: -5.7636590003967285

Token 42: 'even' (ID: 28689)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -1.3852839469909668
    2. '\n' → logprob: -1.6352839469909668
    3. '#' → logprob: -2.135283946990967
    4. 'n' → logprob: -2.260283946990967
    5. 'print' → logprob: -2.385283946990967
    6. 'for' → logprob: -2.635283946990967
    7. '+' → logprob: -3.385283946990967
    8. '<|end|>' → logprob: -3.635283946990967
    9. '```' → logprob: -3.760283946990967
    10. ' 
' → logprob: -5.135283946990967

Token 43: '_' (ID: 62)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 44: '2' (ID: 17)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.2945474088191986
    2. 'print' → logprob: -2.2945473194122314
    3. 'value' → logprob: -3.2945473194122314
    4. 'num' → logprob: -3.9195473194122314
    5. 's' → logprob: -4.2945475578308105
    6. 'number' → logprob: -4.5445475578308105
    7. 'plus' → logprob: -4.6695475578308105
    8. 'square' → logprob: -4.7945475578308105
    9. 'numbers' → logprob: -5.1695475578308105
    10. '+' → logprob: -5.1695475578308105

Token 45: ' =' (ID: 314)
  Prédit: ' *'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -1.1073744297027588
    2. '*' → logprob: -1.3573744297027588
    3. ' ' → logprob: -1.6073744297027588
    4. ' **' → logprob: -2.857374429702759
    5. '**' → logprob: -3.107374429702759
    6. '%' → logprob: -3.107374429702759
    7. ' %' → logprob: -3.857374429702759
    8. ' =' → logprob: -4.73237419128418
    9. ' *=' → logprob: -5.48237419128418
    10. '=' → logprob: -5.60737419128418

Token 46: ' int' (ID: 677)
  Prédit: 'even'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'even' → logprob: -0.3191533386707306
    2. ' even' → logprob: -1.3191533088684082
    3. '2' → logprob: -5.319153308868408
    4. ' ' → logprob: -7.194153308868408
    5. ' n' → logprob: -9.694153785705566
    6. 'n' → logprob: -10.069153785705566
    7. 'e' → logprob: -10.194153785705566
    8. '0' → logprob: -11.069153785705566
    9. '_even' → logprob: -11.444153785705566
    10. '   ' → logprob: -11.569153785705566

Token 47: '(e' (ID: 3454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10043041408061981
    2. '(e' → logprob: -2.725430488586426
    3. '(input' → logprob: -3.975430488586426
    4. '()' → logprob: -5.725430488586426
    5. '(s' → logprob: -6.725430488586426
    6. '(math' → logprob: -6.725430488586426
    7. '(n' → logprob: -6.850430488586426
    8. 'even' → logprob: -6.975430488586426
    9. '((' → logprob: -7.100430488586426
    10. ' ' → logprob: -7.850430488586426

Token 48: 'ven' (ID: 1066)
  Prédit: 'ven'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ven' → logprob: -0.0007585270795971155
    2. '(input' → logprob: -9.000758171081543
    3. 'ut' → logprob: -9.500758171081543
    4. 'put' → logprob: -9.625758171081543
    5. '**' → logprob: -9.875758171081543
    6. 'n' → logprob: -9.875758171081543
    7. 'v' → logprob: -10.125758171081543
    8. '2' → logprob: -10.500758171081543
    9. 've' → logprob: -10.625758171081543
    10. 'VEN' → logprob: -10.625758171081543

Token 49: ' /' (ID: 820)
  Prédit: '/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '/' → logprob: -0.8255689144134521
    2. ' /' → logprob: -1.2005689144134521
    3. '**' → logprob: -1.4505689144134521
    4. ' **' → logprob: -3.700568914413452
    5. '*' → logprob: -6.950569152832031
    6. ')' → logprob: -7.700569152832031
    7. ' *' → logprob: -8.325569152832031
    8. ' ' → logprob: -9.200569152832031
    9. ')**' → logprob: -9.825569152832031
    10. ' )' → logprob: -11.950569152832031

Token 50: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.005234002135694027
    2. ' ' → logprob: -5.2552337646484375
    3. '4' → logprob: -16.380233764648438
    4. '  ' → logprob: -17.255233764648438
    5. ')' → logprob: -17.380233764648438
    6. ' ' → logprob: -17.755233764648438
    7. '２' → logprob: -18.255233764648438
    8. '   ' → logprob: -18.567733764648438
    9. '۲' → logprob: -18.567733764648438
    10. '1' → logprob: -18.755233764648438

Token 51: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0008046258008107543
    2. ' ' → logprob: -7.125804424285889
    3. '  ' → logprob: -17.125804901123047
    4. ')' → logprob: -17.250804901123047
    5. '4' → logprob: -17.875804901123047
    6. '２' → logprob: -18.188304901123047
    7. '۲' → logprob: -18.500804901123047
    8. ' ' → logprob: -18.563304901123047
    9. '1' → logprob: -18.563304901123047
    10. '   ' → logprob: -18.625804901123047

Token 52: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.217951886355877e-05
    2. '*' → logprob: -11.125061988830566
    3. ')
' → logprob: -11.125061988830566
    4. ' )' → logprob: -11.125061988830566
    5. '))' → logprob: -12.250061988830566
    6. '+' → logprob: -12.625061988830566
    7. ')*' → logprob: -13.125061988830566
    8. '*)' → logprob: -13.625061988830566
    9. '**' → logprob: -13.875061988830566
    10. ')
' → logprob: -14.375061988830566

Token 53: 'result' (ID: 2521)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.931140124797821
    2. 'for' → logprob: -1.5561401844024658
    3. '
' → logprob: -2.181140184402466
    4. '*' → logprob: -2.806140184402466
    5. 'if' → logprob: -3.181140184402466
    6. '<|end|>' → logprob: -3.306140184402466
    7. 'even' → logprob: -3.681140184402466
    8. '#' → logprob: -3.681140184402466
    9. 'n' → logprob: -4.431139945983887
    10. '+
' → logprob: -4.681139945983887

Token 54: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.07517030835151672
    2. '=' → logprob: -2.7001702785491943
    3. '_' → logprob: -5.450170516967773
    4. 's' → logprob: -7.700170516967773
    5. ' ' → logprob: -7.950170516967773
    6. ' +=' → logprob: -10.575170516967773
    7. ')' → logprob: -10.700170516967773
    8. 'space' → logprob: -11.325170516967773
    9. ',' → logprob: -11.575170516967773
    10. ':' → logprob: -11.575170516967773

Token 55: ' even' (ID: 1952)
  Prédit: 'even'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'even' → logprob: -0.13141296803951263
    2. ' even' → logprob: -2.256412982940674
    3. 'sum' → logprob: -5.006412982940674
    4. '0' → logprob: -5.631412982940674
    5. ' (' → logprob: -6.131412982940674
    6. ' sum' → logprob: -6.756412982940674
    7. '(e' → logprob: -6.756412982940674
    8. '(' → logprob: -6.756412982940674
    9. '(sum' → logprob: -7.756412982940674
    10. ' ' → logprob: -7.881412982940674

Token 56: '_' (ID: 62)
  Prédit: ' *'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.16953521966934204
    2. '*' → logprob: -2.4195351600646973
    3. '_' → logprob: -3.1695351600646973
    4. ' +' → logprob: -4.294535160064697
    5. '+' → logprob: -5.169535160064697
    6. ' ' → logprob: -5.419535160064697
    7. ' _' → logprob: -8.169535636901855
    8. '-' → logprob: -8.794535636901855
    9. '2' → logprob: -8.794535636901855
    10. '**' → logprob: -9.044535636901855

Token 57: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0121732447296381
    2. '1' → logprob: -4.762173175811768
    3. '*' → logprob: -6.137173175811768
    4. '+' → logprob: -7.762173175811768
    5. 'plus' → logprob: -8.762173652648926
    6. '0' → logprob: -9.137173652648926
    7. 'int' → logprob: -9.262173652648926
    8. 'sum' → logprob: -9.387173652648926
    9. '//' → logprob: -9.887173652648926
    10. 'value' → logprob: -10.137173652648926

Token 58: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.739188551902771
    2. ' *' → logprob: -0.739188551902771
    3. '+' → logprob: -3.4891886711120605
    4. ' +' → logprob: -4.6141886711120605
    5. '**' → logprob: -6.1141886711120605
    6. '*(' → logprob: -6.2391886711120605
    7. '<|end|>' → logprob: -8.864188194274902
    8. ' **' → logprob: -9.364188194274902
    9. '0' → logprob: -10.614188194274902
    10. '```' → logprob: -11.114188194274902

Token 59: ' odd' (ID: 14210)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10716845095157623
    2. ' (' → logprob: -3.107168436050415
    3. '(e' → logprob: -3.607168436050415
    4. 'even' → logprob: -4.107168674468994
    5. 'odd' → logprob: -4.607168674468994
    6. ' odd' → logprob: -6.232168674468994
    7. '(n' → logprob: -7.482168674468994
    8. ' even' → logprob: -7.982168674468994
    9. ' ' → logprob: -9.732168197631836
    10. '(ev' → logprob: -9.857168197631836

Token 60: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 61: 'print' (ID: 1598)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.8951945900917053
    2. '<|end|>' → logprob: -1.0201945304870605
    3. 'print' → logprob: -1.6451945304870605
    4. '
' → logprob: -3.7701945304870605
    5. '*' → logprob: -5.3951945304870605
    6. '#' → logprob: -5.8951945304870605
    7. '\n' → logprob: -6.1451945304870605
    8. '%' → logprob: -6.5201945304870605
    9. '```' → logprob: -6.8951945304870605
    10. ' ' → logprob: -7.3951945304870605

Token 62: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00219118339009583
    2. '(result' → logprob: -6.127191066741943
    3. '('' → logprob: -13.127191543579102
    4. '()' → logprob: -13.252191543579102
    5. '((' → logprob: -14.502191543579102
    6. ' (' → logprob: -14.752191543579102
    7. '("("' → logprob: -14.752191543579102
    8. '(
' → logprob: -15.377191543579102
    9. '(res' → logprob: -15.752191543579102
    10. '(`' → logprob: -15.752191543579102

Token 63: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1875571544806007e-05
    2. '+' → logprob: -12.000011444091797
    3. '*' → logprob: -12.875011444091797
    4. ' )' → logprob: -13.375011444091797
    5. '))' → logprob: -14.625011444091797
    6. '(' → logprob: -14.875011444091797
    7. ')
' → logprob: -15.250011444091797
    8. ')`' → logprob: -15.750011444091797
    9. '**' → logprob: -16.125011444091797
    10. '#' → logprob: -16.625011444091797


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 61
Tokens correctement prédits (1ère position, stricte): 24
Tokens correctement prédits (1ère position, avec adaptation): 25
Tokens correctement prédits (top 10): 51
Précision stricte (1ère position): 39.34%
Précision adaptée (1ère position): 40.98%
Précision (top 10): 83.61%
================================================================================
