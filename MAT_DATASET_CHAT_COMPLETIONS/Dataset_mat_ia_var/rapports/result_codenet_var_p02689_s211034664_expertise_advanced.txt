================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:15:43
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from sys import stdin
from operator import itemgetter

def main():
    N, M = map(int, stdin.readline().split())
    H = [0, *map(int, stdin.readline().split())]
    AB = [tuple(map(int, stdin.readline().split())) for _ in range(M)]

    invalid = set()
    for a, b in AB:
        ha, hb = H[a], H[b]
        if ha > hb:
            invalid.add(b)
        elif ha < hb:
            invalid.add(a)
        else:
            invalid.update((a, b))
    print(N - len(invalid))

if __name__ == '__main__':
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' stdin' (ID: 75143)
  Prédit: 'argv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'argv' → logprob: -0.401660680770874
    2. 'exit' → logprob: -1.776660680770874
    3. ' exit' → logprob: -2.401660680770874
    4. ' argv' → logprob: -2.901660680770874
    5. 'import' → logprob: -4.526660919189453
    6. 'stdout' → logprob: -5.901660919189453
    7. 'path' → logprob: -7.026660919189453
    8. ' import' → logprob: -7.401660919189453
    9. 'stdin' → logprob: -7.776660919189453
    10. 'version' → logprob: -8.526660919189453

Token 4: '
' (ID: 198)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0020684218034148216
    2. '.readline' → logprob: -6.627068519592285
    3. '.
' → logprob: -8.252068519592285
    4. '\n' → logprob: -8.627068519592285
    5. 'import' → logprob: -9.627068519592285
    6. '
' → logprob: -9.627068519592285
    7. '.read' → logprob: -9.752068519592285
    8. '```' → logprob: -10.127068519592285
    9. 'newline' → logprob: -11.377068519592285
    10. 'for' → logprob: -11.627068519592285

Token 5: 'from' (ID: 2845)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.009243842214345932
    2. '.readline' → logprob: -5.509243965148926
    3. '\n' → logprob: -6.384243965148926
    4. '.
' → logprob: -6.884243965148926
    5. 'import' → logprob: -7.509243965148926
    6. '
' → logprob: -7.509243965148926
    7. '```' → logprob: -8.009243965148926
    8. 'newline' → logprob: -8.259243965148926
    9. 'for' → logprob: -9.009243965148926
    10. 'print' → logprob: -9.009243965148926

Token 6: ' operator' (ID: 11019)
  Prédit: ' os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' os' → logprob: -0.020723707973957062
    2. ' sys' → logprob: -4.145723819732666
    3. ' io' → logprob: -5.770723819732666
    4. 'os' → logprob: -6.895723819732666
    5. ' typing' → logprob: -8.270723342895508
    6. ' math' → logprob: -9.770723342895508
    7. ' space' → logprob: -9.895723342895508
    8. 'sys' → logprob: -10.270723342895508
    9. ' stdout' → logprob: -10.520723342895508
    10. ' string' → logprob: -10.770723342895508

Token 7: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.048971906304359436
    2. 'import' → logprob: -3.0489718914031982
    3. ' ' → logprob: -8.673972129821777
    4. '<|end|>' → logprob: -8.798972129821777
    5. '	import' → logprob: -10.048972129821777
    6. '.' → logprob: -12.048972129821777
    7. '_import' → logprob: -12.548972129821777
    8. '<|end|>' → logprob: -13.548972129821777
    9. '  ' → logprob: -13.798972129821777
    10. ' Import' → logprob: -14.048972129821777

Token 8: ' item' (ID: 2169)
  Prédit: ' item'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' item' → logprob: -0.3865244686603546
    2. ' add' → logprob: -1.3865244388580322
    3. ' ' → logprob: -3.3865244388580322
    4. ' import' → logprob: -4.261524677276611
    5. 'item' → logprob: -4.261524677276611
    6. 'add' → logprob: -5.261524677276611
    7. ' mul' → logprob: -6.511524677276611
    8. 'import' → logprob: -8.136524200439453
    9. '  ' → logprob: -8.261524200439453
    10. 'getitem' → logprob: -8.386524200439453

Token 9: 'getter' (ID: 132812)
  Prédit: 'getter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'getter' → logprob: -0.00044771170360036194
    2. 'get' → logprob: -7.750447750091553
    3. 'getitem' → logprob: -12.125447273254395
    4. 'gett' → logprob: -12.125447273254395
    5. 'g' → logprob: -12.250447273254395
    6. 'attr' → logprob: -14.500447273254395
    7. 'gt' → logprob: -15.625447273254395
    8. 'gte' → logprob: -15.750447273254395
    9. 'item' → logprob: -16.37544822692871
    10. 'got' → logprob: -16.37544822692871

Token 10: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7963261604309082
    2. '

' → logprob: -1.2963261604309082
    3. '\n' → logprob: -1.6713261604309082
    4. 'for' → logprob: -3.671326160430908
    5. '\' → logprob: -4.421326160430908
    6. '' → logprob: -4.546326160430908
    7. '```' → logprob: -4.546326160430908
    8. 'newline' → logprob: -4.546326160430908
    9. ',' → logprob: -5.421326160430908
    10. 'import' → logprob: -5.671326160430908

Token 11: 'def' (ID: 1314)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.4319844245910645
    2. 'data' → logprob: -1.5569844245910645
    3. 'for' → logprob: -1.5569844245910645
    4. ',' → logprob: -2.4319844245910645
    5. '\' → logprob: -2.5569844245910645
    6. '.' → logprob: -3.0569844245910645
    7. '`' → logprob: -3.8069844245910645
    8. 'newline' → logprob: -4.0569844245910645
    9. '```' → logprob: -4.5569844245910645
    10. '=' → logprob: -4.6819844245910645

Token 12: ' main' (ID: 2758)
  Prédit: ' read'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' read' → logprob: -1.0214208364486694
    2. ' process' → logprob: -1.2714208364486694
    3. ' ' → logprob: -2.021420955657959
    4. ' calculate' → logprob: -2.771420955657959
    5. ' parse' → logprob: -3.271420955657959
    6. ' main' → logprob: -3.396420955657959
    7. ' sort' → logprob: -3.771420955657959
    8. ' solve' → logprob: -4.146420955657959
    9. ' sorted' → logprob: -4.646420955657959
    10. ' get' → logprob: -5.646420955657959

Token 13: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0935048758983612
    2. '():' → logprob: -2.4685049057006836
    3. ':' → logprob: -5.968504905700684
    4. '(:' → logprob: -6.593504905700684
    5. ' (' → logprob: -8.968504905700684
    6. '(
' → logprob: -9.093504905700684
    7. '```' → logprob: -9.593504905700684
    8. '):' → logprob: -9.718504905700684
    9. '(":' → logprob: -9.968504905700684
    10. ' ():' → logprob: -10.093504905700684

Token 14: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00820354837924242
    2. '    ' → logprob: -6.133203506469727
    3. ' ' → logprob: -7.008203506469727
    4. ' for' → logprob: -7.133203506469727
    5. ' indentation' → logprob: -7.383203506469727
    6. ' readline' → logprob: -7.383203506469727
    7. 'n' → logprob: -7.508203506469727
    8. 'input' → logprob: -7.883203506469727
    9. '    
' → logprob: -7.883203506469727
    10. 'for' → logprob: -8.508203506469727

Token 15: ' N' (ID: 478)
  Prédit: 'data'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'data' → logprob: -0.7086363434791565
    2. ' data' → logprob: -1.8336362838745117
    3. '   ' → logprob: -2.3336362838745117
    4. ' ' → logprob: -2.7086362838745117
    5. 'for' → logprob: -3.0836362838745117
    6. ' n' → logprob: -3.3336362838745117
    7. '    ' → logprob: -3.5836362838745117
    8. ' for' → logprob: -3.8336362838745117
    9. 'n' → logprob: -3.9586362838745117
    10. ' lines' → logprob: -4.583636283874512

Token 16: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.008605116978287697
    2. '=' → logprob: -5.133605003356934
    3. ' ' → logprob: -6.008605003356934
    4. ',' → logprob: -9.383605003356934
    5. '  ' → logprob: -9.633605003356934
    6. ' ,' → logprob: -10.883605003356934
    7. '   ' → logprob: -11.633605003356934
    8. '=int' → logprob: -11.758605003356934
    9. '    ' → logprob: -12.258605003356934
    10. '.' → logprob: -12.258605003356934

Token 17: ' M' (ID: 391)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6086520552635193
    2. ' K' → logprob: -1.108652114868164
    3. ' M' → logprob: -2.483652114868164
    4. 'K' → logprob: -4.608652114868164
    5. 'M' → logprob: -5.358652114868164
    6. '_' → logprob: -5.608652114868164
    7. 'input' → logprob: -5.858652114868164
    8. ' Q' → logprob: -5.983652114868164
    9. ' T' → logprob: -6.233652114868164
    10. 'data' → logprob: -6.233652114868164

Token 18: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0160507932305336
    2. '=' → logprob: -4.141050815582275
    3. ',' → logprob: -11.266050338745117
    4. ' ' → logprob: -13.641050338745117
    5. ')' → logprob: -14.141050338745117
    6. '    ' → logprob: -15.016050338745117
    7. '=input' → logprob: -15.391050338745117
    8. ' =",' → logprob: -15.516050338745117
    9. '<|end|>' → logprob: -15.766050338745117
    10. ' ,' → logprob: -15.891050338745117

Token 19: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.0005115681560710073
    2. 'map' → logprob: -7.625511646270752
    3. ' ' → logprob: -11.875511169433594
    4. ' list' → logprob: -12.000511169433594
    5. ' stdin' → logprob: -12.500511169433594
    6. ' [' → logprob: -12.875511169433594
    7. '[' → logprob: -13.250511169433594
    8. '	map' → logprob: -13.875511169433594
    9. '(map' → logprob: -14.500511169433594
    10. '  ' → logprob: -15.500511169433594

Token 20: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.21886228024959564
    2. '(' → logprob: -1.7188622951507568
    3. '(str' → logprob: -4.343862056732178
    4. '(input' → logprob: -6.093862056732178
    5. '(lambda' → logprob: -6.343862056732178
    6. '(stdin' → logprob: -8.468862533569336
    7. '(list' → logprob: -10.468862533569336
    8. 'int' → logprob: -11.843862533569336
    9. '(
' → logprob: -11.968862533569336
    10. '(eval' → logprob: -12.093862533569336

Token 21: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00041267683263868093
    2. ',input' → logprob: -7.875412464141846
    3. '(stdin' → logprob: -10.750412940979004
    4. ' ,' → logprob: -12.375412940979004
    5. ',std' → logprob: -12.875412940979004
    6. ',int' → logprob: -13.250412940979004
    7. 'stdin' → logprob: -14.125412940979004
    8. '(' → logprob: -14.500412940979004
    9. 'input' → logprob: -15.000412940979004
    10. ',

' → logprob: -15.750412940979004

Token 22: ' stdin' (ID: 75143)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.07126198709011078
    2. ' stdin' → logprob: -2.6962618827819824
    3. 'input' → logprob: -7.321261882781982
    4. '(stdin' → logprob: -7.571261882781982
    5. ')' → logprob: -9.82126235961914
    6. ' input' → logprob: -10.19626235961914
    7. '   ' → logprob: -10.82126235961914
    8. 'std' → logprob: -11.19626235961914
    9. '.stdin' → logprob: -12.19626235961914
    10. 'str' → logprob: -12.57126235961914

Token 23: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.0001785112835932523
    2. '.read' → logprob: -8.875178337097168
    3. '.' → logprob: -10.250178337097168
    4. '.readlines' → logprob: -12.750178337097168
    5. '().' → logprob: -15.625178337097168
    6. ').' → logprob: -16.250179290771484
    7. ')' → logprob: -17.375179290771484
    8. '.buffer' → logprob: -17.500179290771484
    9. ' .' → logprob: -17.625179290771484
    10. '.next' → logprob: -18.000179290771484

Token 24: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.2911025583744049
    2. '())' → logprob: -1.4161025285720825
    3. '()' → logprob: -4.666102409362793
    4. '()))' → logprob: -8.416102409362793
    5. '()[' → logprob: -9.541102409362793
    6. ')' → logprob: -9.791102409362793
    7. '(),' → logprob: -9.791102409362793
    8. ' ())' → logprob: -10.916102409362793
    9. ' ()' → logprob: -11.416102409362793
    10. '(' → logprob: -11.666102409362793

Token 25: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.07952028512954712
    2. 'strip' → logprob: -2.5795202255249023
    3. 'rstrip' → logprob: -7.579520225524902
    4. 'read' → logprob: -9.329520225524902
    5. ' split' → logprob: -10.579520225524902
    6. ')' → logprob: -13.079520225524902
    7. ' strip' → logprob: -13.329520225524902
    8. '(split' → logprob: -13.704520225524902
    9. '```' → logprob: -15.704520225524902
    10. '())' → logprob: -16.95452117919922

Token 26: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2549837529659271
    2. '))' → logprob: -1.5049837827682495
    3. '())' → logprob: -6.004983901977539
    4. '()))' → logprob: -8.129983901977539
    5. '()' → logprob: -8.254983901977539
    6. ')))' → logprob: -11.129983901977539
    7. '),' → logprob: -12.129983901977539
    8. ')
' → logprob: -13.129983901977539
    9. '))
' → logprob: -13.504983901977539
    10. '(' → logprob: -14.004983901977539

Token 27: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.826712429523468
    2. '   ' → logprob: -1.8267123699188232
    3. '\n' → logprob: -2.2017123699188232
    4. '    
' → logprob: -2.7017123699188232
    5. 'data' → logprob: -2.8267123699188232
    6. ' 
' → logprob: -3.7017123699188232
    7. '```' → logprob: -3.7017123699188232
    8. ')' → logprob: -3.9517123699188232
    9. ' ' → logprob: -4.201712608337402
    10. '  
' → logprob: -4.326712608337402

Token 28: ' H' (ID: 487)
  Prédit: ' data'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' data' → logprob: -1.0920295715332031
    2. ' items' → logprob: -1.4670295715332031
    3. 'data' → logprob: -1.8420295715332031
    4. 'items' → logprob: -3.592029571533203
    5. ' array' → logprob: -3.592029571533203
    6. ' lists' → logprob: -3.592029571533203
    7. ' A' → logprob: -3.842029571533203
    8. ' lines' → logprob: -4.092029571533203
    9. ' shops' → logprob: -4.217029571533203
    10. ' list' → logprob: -4.592029571533203

Token 29: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4370225667953491
    2. '=' → logprob: -1.3120225667953491
    3. ',' → logprob: -2.9370226860046387
    4. 's' → logprob: -3.8120226860046387
    5. '[' → logprob: -5.812022686004639
    6. '   ' → logprob: -6.437022686004639
    7. ')' → logprob: -6.687022686004639
    8. '>' → logprob: -7.687022686004639
    9. ' ' → logprob: -7.687022686004639
    10. '_list' → logprob: -8.18702220916748

Token 30: ' [' (ID: 723)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.38719093799591064
    2. 'list' → logprob: -1.1371909379959106
    3. ' [' → logprob: -8.512190818786621
    4. '[list' → logprob: -9.637190818786621
    5. '[' → logprob: -10.137190818786621
    6. '[]' → logprob: -12.262190818786621
    7. 'map' → logprob: -12.387190818786621
    8. ' map' → logprob: -12.637190818786621
    9. ' []' → logprob: -13.637190818786621
    10. '=list' → logprob: -15.512190818786621

Token 31: '0' (ID: 15)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0011740362970158458
    2. ' int' → logprob: -6.751173973083496
    3. '*' → logprob: -12.876173973083496
    4. '0' → logprob: -14.751173973083496
    5. 'map' → logprob: -14.751173973083496
    6. '(int' → logprob: -15.501173973083496
    7. ']int' → logprob: -16.126174926757812
    8. ' ' → logprob: -16.501174926757812
    9. 'float' → logprob: -16.501174926757812
    10. '<int' → logprob: -17.126174926757812

Token 32: ',' (ID: 11)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.00433979881927371
    2. ']*' → logprob: -5.879339694976807
    3. ']+' → logprob: -7.254339694976807
    4. ' ]' → logprob: -8.004340171813965
    5. ']*(' → logprob: -8.504340171813965
    6. ' for' → logprob: -8.504340171813965
    7. ',' → logprob: -10.504340171813965
    8. 'for' → logprob: -10.879340171813965
    9. ')]' → logprob: -11.004340171813965
    10. ')' → logprob: -12.004340171813965

Token 33: ' *' (ID: 425)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.055124979466199875
    2. '*' → logprob: -3.9301249980926514
    3. ']+' → logprob: -4.305124759674072
    4. ' *' → logprob: -4.680124759674072
    5. '0' → logprob: -5.430124759674072
    6. ' ]' → logprob: -6.305124759674072
    7. ']*' → logprob: -6.555124759674072
    8. ']int' → logprob: -6.555124759674072
    9. '*(' → logprob: -7.055124759674072
    10. ']*(' → logprob: -7.555124759674072

Token 34: 'map' (ID: 3726)
  Prédit: 'map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.0011874916963279247
    2. ' map' → logprob: -7.126187324523926
    3. 'list' → logprob: -7.876187324523926
    4. '(map' → logprob: -13.501187324523926
    5. ' list' → logprob: -14.626187324523926
    6. '	map' → logprob: -14.876187324523926
    7. '[' → logprob: -15.501187324523926
    8. ' ' → logprob: -15.876187324523926
    9. '   ' → logprob: -15.876187324523926
    10. 'stdin' → logprob: -16.251188278198242

Token 35: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -4.215330409351736e-05
    2. '(' → logprob: -10.125041961669922
    3. ' (' → logprob: -14.125041961669922
    4. '(float' → logprob: -14.875041961669922
    5. ']int' → logprob: -15.000041961669922
    6. ',int' → logprob: -15.625041961669922
    7. '(lambda' → logprob: -16.375041961669922
    8. '=int' → logprob: -16.500041961669922
    9. '<int' → logprob: -16.500041961669922
    10. ' int' → logprob: -17.125041961669922

Token 36: ',' (ID: 11)
  Prédit: '(stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(stdin' → logprob: -0.12792688608169556
    2. ',' → logprob: -2.127926826477051
    3. ',std' → logprob: -7.377926826477051
    4. '(std' → logprob: -8.37792682647705
    5. '(' → logprob: -9.75292682647705
    6. 'stdin' → logprob: -10.12792682647705
    7. ' ,' → logprob: -11.00292682647705
    8. '.stdin' → logprob: -11.50292682647705
    9. ')' → logprob: -12.12792682647705
    10. 'std' → logprob: -12.50292682647705

Token 37: ' stdin' (ID: 75143)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.07080607861280441
    2. ' stdin' → logprob: -2.6958060264587402
    3. '(stdin' → logprob: -7.07080602645874
    4. '.stdin' → logprob: -11.195806503295898
    5. 'stdout' → logprob: -12.945806503295898
    6. ' ' → logprob: -13.820806503295898
    7. 'std' → logprob: -14.070806503295898
    8. ')' → logprob: -14.445806503295898
    9. 'st' → logprob: -15.195806503295898
    10. '   ' → logprob: -15.445806503295898

Token 38: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -3.547789674485102e-05
    2. '.' → logprob: -10.500035285949707
    3. '().' → logprob: -12.125035285949707
    4. '.readlines' → logprob: -13.250035285949707
    5. ' .' → logprob: -14.750035285949707
    6. ').' → logprob: -16.000036239624023
    7. '.stdin' → logprob: -16.625036239624023
    8. ')' → logprob: -17.000036239624023
    9. '(stdin' → logprob: -17.000036239624023
    10. ' readline' → logprob: -17.250036239624023

Token 39: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -6.313314952421933e-05
    2. '())' → logprob: -10.250062942504883
    3. '()' → logprob: -11.125062942504883
    4. ' ().' → logprob: -12.125062942504883
    5. ')' → logprob: -12.375062942504883
    6. '.readline' → logprob: -13.250062942504883
    7. '(' → logprob: -15.125062942504883
    8. '()].' → logprob: -15.125062942504883
    9. '()).' → logprob: -15.250062942504883
    10. '()))' → logprob: -15.500062942504883

Token 40: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -9.960946772480384e-05
    2. 'strip' → logprob: -9.500099182128906
    3. 'rstrip' → logprob: -10.875099182128906
    4. ' split' → logprob: -12.750099182128906
    5. 'read' → logprob: -13.000099182128906
    6. '(split' → logprob: -14.625099182128906
    7. 'spl' → logprob: -15.750099182128906
    8. 's' → logprob: -16.750099182128906
    9. 'sp' → logprob: -17.500099182128906
    10. '_split' → logprob: -18.000099182128906

Token 41: '())' (ID: 3516)
  Prédit: '())'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0018250041175633669
    2. ')]' → logprob: -6.751824855804443
    3. '()))' → logprob: -7.751824855804443
    4. '()]' → logprob: -9.126825332641602
    5. '()' → logprob: -9.376825332641602
    6. '()),' → logprob: -11.376825332641602
    7. ')' → logprob: -11.376825332641602
    8. ')])' → logprob: -12.626825332641602
    9. '(' → logprob: -13.001825332641602
    10. '))' → logprob: -14.001825332641602

Token 42: ']
' (ID: 1592)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.0208076611161232
    2. ']' → logprob: -4.39580774307251
    3. ')' → logprob: -4.89580774307251
    4. '()]' → logprob: -8.020807266235352
    5. ' )' → logprob: -8.395807266235352
    6. '(' → logprob: -9.520807266235352
    7. '   ' → logprob: -9.770807266235352
    8. ')]
' → logprob: -10.395807266235352
    9. ' ]' → logprob: -10.770807266235352
    10. '()' → logprob: -11.520807266235352

Token 43: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03159872442483902
    2. '
' → logprob: -4.6565985679626465
    3. '    
' → logprob: -5.1565985679626465
    4. '```' → logprob: -5.7815985679626465
    5. ' heights' → logprob: -6.5315985679626465
    6. 's' → logprob: -6.6565985679626465
    7. ' ans' → logprob: -6.9065985679626465
    8. ' candidates' → logprob: -7.1565985679626465
    9. 'ans' → logprob: -7.4065985679626465
    10. ')' → logprob: -7.5315985679626465

Token 44: ' AB' (ID: 16520)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -2.3681766986846924
    2. '   ' → logprob: -2.4931766986846924
    3. 'edges' → logprob: -2.6181766986846924
    4. 'good' → logprob: -2.8681766986846924
    5. ' good' → logprob: -2.9931766986846924
    6. 'dp' → logprob: -2.9931766986846924
    7. ' ans' → logprob: -3.1181766986846924
    8. 'S' → logprob: -3.3681766986846924
    9. ' edges' → logprob: -3.4931766986846924
    10. 'L' → logprob: -3.8056766986846924

Token 45: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.2030085176229477
    2. ' =' → logprob: -1.7030085325241089
    3. '_' → logprob: -6.828008651733398
    4. 's' → logprob: -8.703008651733398
    5. ' ' → logprob: -9.203008651733398
    6. ']' → logprob: -9.828008651733398
    7. '   ' → logprob: -10.328008651733398
    8. '  ' → logprob: -10.578008651733398
    9. ',' → logprob: -10.953008651733398
    10. ')' → logprob: -10.953008651733398

Token 46: ' [' (ID: 723)
  Prédit: '[list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[list' → logprob: -0.5916879177093506
    2. '[' → logprob: -0.8416879177093506
    3. ' [' → logprob: -4.46668815612793
    4. '[item' → logprob: -6.21668815612793
    5. '[array' → logprob: -7.21668815612793
    6. '[List' → logprob: -7.34168815612793
    7. '[input' → logprob: -8.96668815612793
    8. '[int' → logprob: -9.09168815612793
    9. '[line' → logprob: -9.96668815612793
    10. '[next' → logprob: -10.09168815612793

Token 47: 'tuple' (ID: 52834)
  Prédit: 'tuple'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tuple' → logprob: -0.01065089926123619
    2. 'list' → logprob: -4.760651111602783
    3. 'map' → logprob: -7.010651111602783
    4. ' tuple' → logprob: -7.260651111602783
    5. '(tuple' → logprob: -8.010650634765625
    6. '*' → logprob: -9.760650634765625
    7. ']' → logprob: -11.385650634765625
    8. '(*' → logprob: -11.635650634765625
    9. '(list' → logprob: -11.885650634765625
    10. '(map' → logprob: -12.885650634765625

Token 48: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.0005605389014817774
    2. 'map' → logprob: -8.000560760498047
    3. '(' → logprob: -8.750560760498047
    4. '(stdin' → logprob: -10.250560760498047
    5. '(int' → logprob: -10.625560760498047
    6. '()' → logprob: -13.750560760498047
    7. '(m' → logprob: -13.875560760498047
    8. ' map' → logprob: -14.250560760498047
    9. ']' → logprob: -14.250560760498047
    10. 'int' → logprob: -14.625560760498047

Token 49: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -9.507972572464496e-05
    2. 'int' → logprob: -9.62509536743164
    3. ',int' → logprob: -11.87509536743164
    4. ']int' → logprob: -12.00009536743164
    5. '<int' → logprob: -12.37509536743164
    6. '(' → logprob: -12.50009536743164
    7. '=int' → logprob: -12.50009536743164
    8. '[int' → logprob: -12.62509536743164
    9. ')' → logprob: -15.12509536743164
    10. ':int' → logprob: -15.25009536743164

Token 50: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.16112768650054932
    2. '(stdin' → logprob: -1.9111276865005493
    3. '(' → logprob: -7.78612756729126
    4. ' ,' → logprob: -8.661128044128418
    5. ',std' → logprob: -8.786128044128418
    6. 'stdin' → logprob: -9.911128044128418
    7. '   ' → logprob: -11.036128044128418
    8. '(),' → logprob: -11.161128044128418
    9. '(st' → logprob: -11.411128044128418
    10. '```' → logprob: -11.911128044128418

Token 51: ' stdin' (ID: 75143)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.013424677774310112
    2. ' stdin' → logprob: -4.388424873352051
    3. '(stdin' → logprob: -7.013424873352051
    4. '.stdin' → logprob: -11.76342487335205
    5. 'stdout' → logprob: -12.63842487335205
    6. ')' → logprob: -13.51342487335205
    7. 'std' → logprob: -14.76342487335205
    8. ' ' → logprob: -15.13842487335205
    9. '
' → logprob: -15.26342487335205
    10. '   ' → logprob: -15.38842487335205

Token 52: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.0005413581384345889
    2. '().' → logprob: -7.6255412101745605
    3. '.readlines' → logprob: -10.625541687011719
    4. ').' → logprob: -11.500541687011719
    5. '.read' → logprob: -12.125541687011719
    6. '.' → logprob: -12.750541687011719
    7. ')' → logprob: -12.875541687011719
    8. '.stdin' → logprob: -13.125541687011719
    9. ' readline' → logprob: -13.125541687011719
    10. '(stdin' → logprob: -14.000541687011719

Token 53: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.00015741224342491478
    2. '()' → logprob: -8.875157356262207
    3. ')' → logprob: -11.875157356262207
    4. '.readline' → logprob: -12.000157356262207
    5. ').' → logprob: -13.625157356262207
    6. '(' → logprob: -14.250157356262207
    7. ' ().' → logprob: -14.500157356262207
    8. '()-' → logprob: -14.750157356262207
    9. '().__' → logprob: -14.875157356262207
    10. '()).' → logprob: -15.250157356262207

Token 54: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -5.080963092041202e-06
    2. 'strip' → logprob: -12.500004768371582
    3. 'rstrip' → logprob: -14.000004768371582
    4. 'read' → logprob: -15.250004768371582
    5. ' split' → logprob: -16.3750057220459
    6. 's' → logprob: -16.8750057220459
    7. 'spl' → logprob: -17.3750057220459
    8. '(split' → logprob: -18.8750057220459
    9. ')' → logprob: -19.0000057220459
    10. '```' → logprob: -19.8750057220459

Token 55: '()))' (ID: 16829)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.4753490388393402
    2. '()))' → logprob: -0.9753490686416626
    3. '()' → logprob: -6.975348949432373
    4. '())' → logprob: -8.475349426269531
    5. ')' → logprob: -9.850349426269531
    6. ')),' → logprob: -10.350349426269531
    7. ')))' → logprob: -11.350349426269531
    8. '()))
' → logprob: -11.475349426269531
    9. '()),' → logprob: -12.225349426269531
    10. ' ))' → logprob: -12.850349426269531

Token 56: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.37284910678863525
    2. ')' → logprob: -1.9978491067886353
    3. ' for' → logprob: -2.3728489875793457
    4. '()' → logprob: -2.6228489875793457
    5. '   ' → logprob: -4.747848987579346
    6. ' ' → logprob: -8.122849464416504
    7. '(' → logprob: -8.122849464416504
    8. '	for' → logprob: -9.247849464416504
    9. ')]' → logprob: -9.372849464416504
    10. '    ' → logprob: -9.622849464416504

Token 57: ' _' (ID: 1175)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.023057127371430397
    2. ' range' → logprob: -4.023056983947754
    3. ' _' → logprob: -5.898056983947754
    4. '_range' → logprob: -6.398056983947754
    5. 'range' → logprob: -7.648056983947754
    6. '(range' → logprob: -12.523056983947754
    7. ' ' → logprob: -13.523056983947754
    8. ' in' → logprob: -13.523056983947754
    9. ' i' → logprob: -14.398056983947754
    10. '_i' → logprob: -14.523056983947754

Token 58: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.08917926996946335
    2. ' in' → logprob: -2.589179277420044
    3. 'range' → logprob: -4.589179039001465
    4. ' range' → logprob: -9.964179039001465
    5. '(range' → logprob: -11.464179039001465
    6. ' ' → logprob: -12.339179039001465
    7. '(' → logprob: -12.714179039001465
    8. '```' → logprob: -12.714179039001465
    9. '  ' → logprob: -13.714179039001465
    10. ')' → logprob: -14.089179039001465

Token 59: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -2.4987974029500037e-05
    2. ' range' → logprob: -10.625024795532227
    3. '(range' → logprob: -15.375024795532227
    4. '	range' → logprob: -16.375024795532227
    5. '   ' → logprob: -16.875024795532227
    6. '[' → logprob: -16.875024795532227
    7. 'r' → logprob: -17.000024795532227
    8. '  ' → logprob: -17.250024795532227
    9. '```' → logprob: -17.250024795532227
    10. ' ' → logprob: -17.500024795532227

Token 60: '(M' (ID: 6103)
  Prédit: '(M'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(M' → logprob: -0.0011843960965052247
    2. '(' → logprob: -6.751184463500977
    3. '(N' → logprob: -11.376184463500977
    4. 'M' → logprob: -13.501184463500977
    5. '(
' → logprob: -13.876184463500977
    6. ' (' → logprob: -16.001184463500977
    7. ')' → logprob: -16.126184463500977
    8. ' M' → logprob: -17.376184463500977
    9. '(m' → logprob: -17.751184463500977
    10. '(

' → logprob: -18.001184463500977

Token 61: ')]

' (ID: 56882)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.0019581327214837074
    2. ')' → logprob: -6.25195837020874
    3. ']' → logprob: -10.751957893371582
    4. ')])' → logprob: -12.626957893371582
    5. '))' → logprob: -13.251957893371582
    6. ' )' → logprob: -14.251957893371582
    7. ')],' → logprob: -14.501957893371582
    8. ')}' → logprob: -15.001957893371582
    9. '):' → logprob: -15.126957893371582
    10. '])]' → logprob: -15.501957893371582

Token 62: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.21348904073238373
    2. '   ' → logprob: -1.963489055633545
    3. '    
' → logprob: -3.338489055633545
    4. '  
' → logprob: -5.213489055633545
    5. '   
' → logprob: -5.713489055633545
    6. ' 
' → logprob: -6.088489055633545
    7. '```' → logprob: -6.338489055633545
    8. ')
' → logprob: -7.338489055633545
    9. '

' → logprob: -7.963489055633545
    10. '``' → logprob: -8.088488578796387

Token 63: ' invalid' (ID: 15796)
  Prédit: 'good'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'good' → logprob: -0.3682614266872406
    2. 'ok' → logprob: -1.743261456489563
    3. 'ans' → logprob: -2.7432613372802734
    4. 'bad' → logprob: -4.618261337280273
    5. 'count' → logprob: -4.743261337280273
    6. 'cand' → logprob: -4.743261337280273
    7. 'candidate' → logprob: -5.243261337280273
    8. 'c' → logprob: -5.368261337280273
    9. 'seen' → logprob: -5.743261337280273
    10. 'is' → logprob: -5.743261337280273

Token 64: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.7271801829338074
    2. '=' → logprob: -1.1021802425384521
    3. ' =' → logprob: -1.9771802425384521
    4. 's' → logprob: -3.727180242538452
    5. '_nodes' → logprob: -5.352180004119873
    6. '[' → logprob: -6.227180004119873
    7. '=[]' → logprob: -6.227180004119873
    8. '_counts' → logprob: -6.852180004119873
    9. '_s' → logprob: -6.977180004119873
    10. '_indices' → logprob: -6.977180004119873

Token 65: ' set' (ID: 920)
  Prédit: 'set'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'set' → logprob: -0.10045995563268661
    2. '[' → logprob: -2.9754600524902344
    3. ' set' → logprob: -3.6004600524902344
    4. ' [' → logprob: -4.225460052490234
    5. '[]' → logprob: -6.475460052490234
    6. '{' → logprob: -7.725460052490234
    7. ' []' → logprob: -8.350460052490234
    8. ' ' → logprob: -8.475460052490234
    9. ' {' → logprob: -9.600460052490234
    10. '{}' → logprob: -10.725460052490234

Token 66: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.014212513342499733
    2. '(' → logprob: -4.264212608337402
    3. '()
' → logprob: -10.639212608337402
    4. '()

' → logprob: -12.389212608337402
    5. '()\' → logprob: -12.389212608337402
    6. '();' → logprob: -12.639212608337402
    7. '()]' → logprob: -12.639212608337402
    8. ' ()' → logprob: -13.139212608337402
    9. '([' → logprob: -13.139212608337402
    10. '(),' → logprob: -13.639212608337402

Token 67: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09675133973360062
    2. 'for' → logprob: -2.8467514514923096
    3. ' for' → logprob: -3.5967514514923096
    4. '
' → logprob: -5.3467512130737305
    5. '    
' → logprob: -6.5967512130737305
    6. '<|end|>' → logprob: -7.7217512130737305
    7. '  
' → logprob: -9.59675121307373
    8. '	for' → logprob: -9.97175121307373
    9. ' ' → logprob: -10.97175121307373
    10. '  ' → logprob: -11.22175121307373

Token 68: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.0002918446552939713
    2. ' for' → logprob: -8.62529182434082
    3. '   ' → logprob: -9.12529182434082
    4. '	for' → logprob: -12.62529182434082
    5. '    
' → logprob: -16.75029182434082
    6. '<|end|>' → logprob: -19.00029182434082
    7. '```' → logprob: -19.12529182434082
    8. '
' → logprob: -19.12529182434082
    9. ' ' → logprob: -19.50029182434082
    10. '  ' → logprob: -19.62529182434082

Token 69: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.034421712160110474
    2. ' a' → logprob: -3.409421682357788
    3. 'A' → logprob: -7.909421920776367
    4. 'i' → logprob: -8.159421920776367
    5. '   ' → logprob: -10.034421920776367
    6. '_a' → logprob: -10.784421920776367
    7. ' ' → logprob: -11.159421920776367
    8. ' i' → logprob: -11.659421920776367
    9. '(a' → logprob: -11.659421920776367
    10. ' A' → logprob: -11.784421920776367

Token 70: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.039859138429164886
    2. ',b' → logprob: -3.2898590564727783
    3. 'b' → logprob: -6.539859294891357
    4. ' ,' → logprob: -8.0398588180542
    5. '_,' → logprob: -11.0398588180542
    6. ',_' → logprob: -11.5398588180542
    7. ',m' → logprob: -12.2898588180542
    8. ',a' → logprob: -12.9148588180542
    9. ' b' → logprob: -13.0398588180542
    10. ',s' → logprob: -13.4148588180542

Token 71: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -2.4391956685576588e-05
    2. ' b' → logprob: -10.625024795532227
    3. '	b' → logprob: -20.250024795532227
    4. ')b' → logprob: -20.500024795532227
    5. '>b' → logprob: -20.625024795532227
    6. '_b' → logprob: -20.750024795532227
    7. '<|end|>' → logprob: -21.000024795532227
    8. ',b' → logprob: -21.375024795532227
    9. ' ' → logprob: -22.500024795532227
    10. '(b' → logprob: -23.125024795532227

Token 72: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.048610869795084
    2. 'in' → logprob: -3.0486109256744385
    3. ' ' → logprob: -11.29861068725586
    4. ',' → logprob: -11.79861068725586
    5. '  ' → logprob: -13.92361068725586
    6. 'a' → logprob: -14.29861068725586
    7. '	in' → logprob: -14.92361068725586
    8. ' ,' → logprob: -15.04861068725586
    9. ' a' → logprob: -15.54861068725586
    10. 's' → logprob: -15.54861068725586

Token 73: ' AB' (ID: 16520)
  Prédit: 'AB'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'AB' → logprob: -0.0021860685665160418
    2. ' AB' → logprob: -6.127186298370361
    3. ' ' → logprob: -14.627185821533203
    4. '   ' → logprob: -15.127185821533203
    5. '_AB' → logprob: -16.002185821533203
    6. 'ab' → logprob: -16.002185821533203
    7. 'A' → logprob: -17.752185821533203
    8. '  ' → logprob: -17.877185821533203
    9. 'ABB' → logprob: -19.002185821533203
    10. 'Ab' → logprob: -19.752185821533203

Token 74: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -9.729906196298543e-06
    2. ':
' → logprob: -11.750009536743164
    3. ' :' → logprob: -13.500009536743164
    4. ':**' → logprob: -15.375009536743164
    5. '):' → logprob: -15.750009536743164
    6. ':
' → logprob: -17.250009536743164
    7. ',' → logprob: -17.500009536743164
    8. '=' → logprob: -18.000009536743164
    9. '：' → logprob: -18.125009536743164
    10. '():' → logprob: -18.375009536743164

Token 75: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.1759147197008133
    2. '   ' → logprob: -2.300914764404297
    3. '<|end|>' → logprob: -2.925914764404297
    4. ':' → logprob: -6.425914764404297
    5. '    ' → logprob: -6.800914764404297
    6. '
' → logprob: -6.800914764404297
    7. ' ' → logprob: -6.925914764404297
    8. '<|end|>' → logprob: -7.050914764404297
    9. ' if' → logprob: -7.925914764404297
    10. '    
' → logprob: -8.050914764404297

Token 76: ' ha' (ID: 2472)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0008471485925838351
    2. '   ' → logprob: -7.500847339630127
    3. ' if' → logprob: -8.250846862792969
    4. '
' → logprob: -10.875846862792969
    5. 'a' → logprob: -12.250846862792969
    6. '       ' → logprob: -12.625846862792969
    7. 'invalid' → logprob: -12.750846862792969
    8. ' ' → logprob: -13.750846862792969
    9. '    
' → logprob: -14.000846862792969
    10. '    ' → logprob: -15.500846862792969

Token 77: ',' (ID: 11)
  Prédit: '[a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[a' → logprob: -1.0058828592300415
    2. ' =' → logprob: -1.1308828592300415
    3. '=' → logprob: -1.7558828592300415
    4. ',' → logprob: -3.380882740020752
    5. ' ==' → logprob: -3.755882740020752
    6. '==' → logprob: -3.880882740020752
    7. ' ' → logprob: -4.005882740020752
    8. '=a' → logprob: -4.130882740020752
    9. '[' → logprob: -4.630882740020752
    10. '[b' → logprob: -5.255882740020752

Token 78: ' hb' (ID: 106118)
  Prédit: 'hb'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'hb' → logprob: -0.02975245751440525
    2. ' hb' → logprob: -3.529752492904663
    3. 'h' → logprob: -14.279752731323242
    4. '_' → logprob: -14.404752731323242
    5. ' ' → logprob: -14.654752731323242
    6. 'hab' → logprob: -16.404752731323242
    7. '=' → logprob: -16.654752731323242
    8. '_h' → logprob: -16.779752731323242
    9. 'hp' → logprob: -17.029752731323242
    10. 'Hb' → logprob: -17.154752731323242

Token 79: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.38691094517707825
    2. '=' → logprob: -1.1369109153747559
    3. ',' → logprob: -10.636911392211914
    4. ')' → logprob: -11.886911392211914
    5. ' ' → logprob: -12.386911392211914
    6. '   ' → logprob: -13.261911392211914
    7. ' ==' → logprob: -14.761911392211914
    8. '>' → logprob: -14.886911392211914
    9. '=int' → logprob: -15.136911392211914
    10. '    ' → logprob: -15.386911392211914

Token 80: ' H' (ID: 487)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.0004886920796707273
    2. ' H' → logprob: -7.625488758087158
    3. '   ' → logprob: -15.00048828125
    4. '(H' → logprob: -15.75048828125
    5. ' ' → logprob: -16.00048828125
    6. '  ' → logprob: -17.87548828125
    7. '	H' → logprob: -18.50048828125
    8. '    ' → logprob: -19.00048828125
    9. '(' → logprob: -19.25048828125
    10. ' (' → logprob: -19.50048828125

Token 81: '[a' (ID: 32035)
  Prédit: '[a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[a' → logprob: -6.790129555156454e-05
    2. 'a' → logprob: -9.625067710876465
    3. '[' → logprob: -13.375067710876465
    4. ' a' → logprob: -16.62506866455078
    5. '(a' → logprob: -17.12506866455078
    6. '[b' → logprob: -18.00006866455078
    7. ' [' → logprob: -18.12506866455078
    8. '```' → logprob: -18.75006866455078
    9. '[A' → logprob: -19.37506866455078
    10. '#a' → logprob: -19.37506866455078

Token 82: '],' (ID: 2155)
  Prédit: '],'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '],' → logprob: -0.0002925598528236151
    2. ']' → logprob: -8.500292778015137
    3. ' ],' → logprob: -9.500292778015137
    4. '-' → logprob: -11.375292778015137
    5. '>,' → logprob: -14.500292778015137
    6. ',' → logprob: -14.750292778015137
    7. '),' → logprob: -14.875292778015137
    8. ' ' → logprob: -14.875292778015137
    9. ':],' → logprob: -15.000292778015137
    10. ''],' → logprob: -15.500292778015137

Token 83: ' H' (ID: 487)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.011048528365790844
    2. ' H' → logprob: -4.511048316955566
    3. ' ' → logprob: -14.511048316955566
    4. ' ' → logprob: -15.636048316955566
    5. '   ' → logprob: -16.636049270629883
    6. '  ' → logprob: -17.511049270629883
    7. 'h' → logprob: -17.511049270629883
    8. '	H' → logprob: -18.386049270629883
    9. 'HB' → logprob: -18.948549270629883
    10. '```' → logprob: -19.011049270629883

Token 84: '[b' (ID: 40800)
  Prédit: '[b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[b' → logprob: -0.07905139029026031
    2. 'b' → logprob: -2.5790514945983887
    3. '[' → logprob: -8.82905101776123
    4. ' b' → logprob: -12.45405101776123
    5. '>b' → logprob: -12.82905101776123
    6. ')b' → logprob: -13.32905101776123
    7. '```' → logprob: -13.82905101776123
    8. '<|end|>' → logprob: -13.95405101776123
    9. '(b' → logprob: -14.32905101776123
    10. '	b' → logprob: -14.32905101776123

Token 85: ']
' (ID: 1592)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.46466585993766785
    2. ']' → logprob: -1.2146658897399902
    3. ')
' → logprob: -2.7146658897399902
    4. ']
' → logprob: -4.83966588973999
    5. '])' → logprob: -8.089665412902832
    6. ')]' → logprob: -9.089665412902832
    7. ' )' → logprob: -9.714665412902832
    8. '   ' → logprob: -10.089665412902832
    9. '])
' → logprob: -10.839665412902832
    10. '）' → logprob: -10.839665412902832

Token 86: '       ' (ID: 309)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.22548891603946686
    2. '   ' → logprob: -2.1004889011383057
    3. '       ' → logprob: -2.6004889011383057
    4. '<|end|>' → logprob: -6.100489139556885
    5. ' if' → logprob: -6.975489139556885
    6. '    
' → logprob: -7.225489139556885
    7. '
' → logprob: -8.100488662719727
    8. ' ' → logprob: -8.475488662719727
    9. '  
' → logprob: -8.725488662719727
    10. 'if' → logprob: -8.850488662719727

Token 87: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.6715416312217712
    2. 'if' (adapté à ' if') → logprob: -1.046541690826416
    3. '   ' → logprob: -2.046541690826416
    4. '    ' → logprob: -5.171541690826416
    5. ' ' → logprob: -6.171541690826416
    6. '       ' → logprob: -7.796541690826416
    7. '  ' → logprob: -8.921541213989258
    8. '	if' → logprob: -9.171541213989258
    9. ' 
' → logprob: -9.296541213989258
    10. '    
' → logprob: -9.421541213989258

Token 88: ' ha' (ID: 2472)
  Prédit: 'ha'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ha' → logprob: -0.5763395428657532
    2. ' ha' → logprob: -0.8263395428657532
    3. ' not' → logprob: -9.076339721679688
    4. ' ' → logprob: -9.326339721679688
    5. ' (' → logprob: -9.951339721679688
    6. '   ' → logprob: -10.451339721679688
    7. '(' → logprob: -10.576339721679688
    8. 'hb' → logprob: -10.951339721679688
    9. ' hb' → logprob: -10.951339721679688
    10. '  ' → logprob: -11.763839721679688

Token 89: ' >' (ID: 1424)
  Prédit: '<='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '<=' → logprob: -0.004252438899129629
    2. ' <=' → logprob: -5.5042524337768555
    3. '>=' → logprob: -9.004252433776855
    4. '==' → logprob: -10.504252433776855
    5. '<' → logprob: -11.754252433776855
    6. '=' → logprob: -12.504252433776855
    7. '>' → logprob: -13.004252433776855
    8. '```' → logprob: -13.129252433776855
    9. '≤' → logprob: -13.504252433776855
    10. ' ' → logprob: -13.629252433776855

Token 90: ' hb' (ID: 106118)
  Prédit: 'hb'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'hb' → logprob: -0.06836052983999252
    2. ' hb' → logprob: -2.9433605670928955
    3. '=' → logprob: -4.318360328674316
    4. 'ha' → logprob: -9.943360328674316
    5. ' ' → logprob: -11.693360328674316
    6. '==' → logprob: -13.443360328674316
    7. 'h' → logprob: -13.693360328674316
    8. ' or' → logprob: -13.693360328674316
    9. '0' → logprob: -14.193360328674316
    10. ' =' → logprob: -14.443360328674316

Token 91: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.021022818982601166
    2. ' or' → logprob: -4.021022796630859
    3. ' :' → logprob: -6.396022796630859
    4. ' and' → logprob: -7.271022796630859
    5. ':
' → logprob: -8.14602279663086
    6. '   ' → logprob: -9.64602279663086
    7. 'and' → logprob: -10.02102279663086
    8. 'or' → logprob: -10.64602279663086
    9. ' ' → logprob: -10.89602279663086
    10. '):' → logprob: -11.02102279663086

Token 92: '           ' (ID: 352)
  Prédit: ' invalid'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' invalid' → logprob: -0.053628358989953995
    2. 'invalid' → logprob: -3.303628444671631
    3. '       ' → logprob: -4.303628444671631
    4. '           ' → logprob: -6.928628444671631
    5. '   ' → logprob: -7.553628444671631
    6. ' ' → logprob: -8.553627967834473
    7. '```' → logprob: -10.303627967834473
    8. '.invalid' → logprob: -10.678627967834473
    9. '<|end|>' → logprob: -10.678627967834473
    10. ' ' → logprob: -11.053627967834473

Token 93: ' invalid' (ID: 15796)
  Prédit: 'invalid'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'invalid' (adapté à ' invalid') → logprob: -0.1602502167224884
    2. ' invalid' → logprob: -1.910250186920166
    3. '   ' → logprob: -11.160250663757324
    4. '           ' → logprob: -13.160250663757324
    5. 'invalidate' → logprob: -13.160250663757324
    6. '_invalid' → logprob: -13.410250663757324
    7. 'Invalid' → logprob: -13.410250663757324
    8. '.invalid' → logprob: -13.535250663757324
    9. '```' → logprob: -14.160250663757324
    10. '-invalid' → logprob: -14.160250663757324

Token 94: '.add' (ID: 1950)
  Prédit: '.add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.add' → logprob: -0.20144960284233093
    2. '.' → logprob: -1.7014496326446533
    3. '.update' → logprob: -10.951449394226074
    4. ' .' → logprob: -11.326449394226074
    5. 'add' → logprob: -12.326449394226074
    6. '.union' → logprob: -14.201449394226074
    7. '.setdefault' → logprob: -14.451449394226074
    8. '.Add' → logprob: -16.20145034790039
    9. '}.' → logprob: -16.32645034790039
    10. '.=' → logprob: -16.45145034790039

Token 95: '(b' (ID: 3229)
  Prédit: '(a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.4743528366088867
    2. '(b' → logprob: -0.9743528366088867
    3. '(' → logprob: -8.224352836608887
    4. '((' → logprob: -12.349352836608887
    5. 'a' → logprob: -13.224352836608887
    6. 'b' → logprob: -13.474352836608887
    7. '(
' → logprob: -16.849353790283203
    8. '(i' → logprob: -17.099353790283203
    9. '(s' → logprob: -17.599353790283203
    10. '(ab' → logprob: -17.849353790283203

Token 96: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08036086708307266
    2. ')
' → logprob: -2.5803608894348145
    3. '       ' → logprob: -6.5803608894348145
    4. ' )' → logprob: -10.205360412597656
    5. ')
' → logprob: -10.330360412597656
    6. ')

' → logprob: -12.455360412597656
    7. ' )
' → logprob: -12.705360412597656
    8. '   ' → logprob: -12.830360412597656
    9. '           ' → logprob: -14.705360412597656
    10. ')return' → logprob: -14.830360412597656

Token 97: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.25967684388160706
    2. 'elif' → logprob: -1.8846768140792847
    3. ' elif' → logprob: -2.884676933288574
    4. '<|end|>' → logprob: -4.384676933288574
    5. ' ' → logprob: -5.884676933288574
    6. '    ' → logprob: -6.134676933288574
    7. '        ' → logprob: -6.634676933288574
    8. '        
' → logprob: -7.259676933288574
    9. '   ' → logprob: -7.509676933288574
    10. '  ' → logprob: -8.634676933288574

Token 98: ' elif' (ID: 9497)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' (adapté à ' elif') → logprob: -0.03055841103196144
    2. ' elif' → logprob: -3.5305583477020264
    3. '       ' → logprob: -7.1555585861206055
    4. '	elif' → logprob: -11.280558586120605
    5. '   ' → logprob: -11.780558586120605
    6. 'el' → logprob: -12.780558586120605
    7. 'else' → logprob: -13.155558586120605
    8. '<|end|>' → logprob: -14.780558586120605
    9. '    ' → logprob: -15.530558586120605
    10. '```' → logprob: -15.530558586120605

Token 99: ' ha' (ID: 2472)
  Prédit: ' ha'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ha' → logprob: -0.3771968185901642
    2. ' hb' → logprob: -1.2521967887878418
    3. 'ha' → logprob: -3.877196788787842
    4. 'hb' → logprob: -4.877196788787842
    5. ' ' → logprob: -11.877197265625
    6. 'hab' → logprob: -13.127197265625
    7. ' ' → logprob: -13.502197265625
    8. ' hab' → logprob: -13.752197265625
    9. ' h' → logprob: -14.252197265625
    10. '  ' → logprob: -14.377197265625

Token 100: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.00158853514585644
    2. '<' → logprob: -6.626588344573975
    3. ' >' → logprob: -8.376588821411133
    4. ' ' → logprob: -10.501588821411133
    5. '>' → logprob: -13.376588821411133
    6. '[' → logprob: -14.001588821411133
    7. '    ' → logprob: -14.376588821411133
    8. ' ==' → logprob: -14.751588821411133
    9. ' ' → logprob: -15.251588821411133
    10. '   ' → logprob: -15.251588821411133

Token 101: ' hb' (ID: 106118)
  Prédit: 'ha'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ha' → logprob: -0.43106821179389954
    2. ' ha' → logprob: -1.0560681819915771
    3. ' hb' → logprob: -6.181068420410156
    4. 'hb' → logprob: -8.931068420410156
    5. 'a' → logprob: -9.556068420410156
    6. ' a' → logprob: -10.181068420410156
    7. ' ' → logprob: -10.931068420410156
    8. '   ' → logprob: -11.181068420410156
    9. '       ' → logprob: -12.556068420410156
    10. 'Ha' → logprob: -12.556068420410156

Token 102: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.02105492539703846
    2. '           ' → logprob: -4.271054744720459
    3. ':
' → logprob: -5.021054744720459
    4. '       ' → logprob: -9.271055221557617
    5. '.' → logprob: -10.021055221557617
    6. '):' → logprob: -10.521055221557617
    7. ' :' → logprob: -10.521055221557617
    8. '{' → logprob: -11.146055221557617
    9. '):
' → logprob: -11.521055221557617
    10. '.add' → logprob: -11.771055221557617

Token 103: '           ' (ID: 352)
  Prédit: 'invalid'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'invalid' → logprob: -0.28764215111732483
    2. ' invalid' → logprob: -1.9126421213150024
    3. '           ' → logprob: -2.912642240524292
    4. 'a' → logprob: -3.162642240524292
    5. ' a' → logprob: -5.287642002105713
    6. '       ' → logprob: -7.912642002105713
    7. '   ' → logprob: -8.787642478942871
    8. '.invalid' → logprob: -11.162642478942871
    9. '```' → logprob: -11.287642478942871
    10. 'valid' → logprob: -11.787642478942871

Token 104: ' invalid' (ID: 15796)
  Prédit: 'invalid'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'invalid' (adapté à ' invalid') → logprob: -0.04901992157101631
    2. ' invalid' → logprob: -3.0490198135375977
    3. '           ' → logprob: -7.799019813537598
    4. 'a' → logprob: -10.924019813537598
    5. '   ' → logprob: -13.549019813537598
    6. ' a' → logprob: -13.674019813537598
    7. '.invalid' → logprob: -14.424019813537598
    8. '```' → logprob: -14.924019813537598
    9. '       ' → logprob: -15.049019813537598
    10. '               ' → logprob: -15.549019813537598

Token 105: '.add' (ID: 1950)
  Prédit: '.add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.add' → logprob: -0.029790064319968224
    2. '.' → logprob: -3.529790163040161
    3. ' .' → logprob: -11.029789924621582
    4. '.setdefault' → logprob: -11.529789924621582
    5. ').' → logprob: -12.904789924621582
    6. '       ' → logprob: -13.029789924621582
    7. '.append' → logprob: -13.279789924621582
    8. 'add' → logprob: -13.529789924621582
    9. '           ' → logprob: -13.654789924621582
    10. '<|end|>' → logprob: -14.154789924621582

Token 106: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -5.676981345459353e-06
    2. '(' → logprob: -12.125005722045898
    3. 'a' → logprob: -15.500005722045898
    4. ' (' → logprob: -18.7500057220459
    5. '(ai' → logprob: -18.8750057220459
    6. '(s' → logprob: -19.3750057220459
    7. '```' → logprob: -19.7500057220459
    8. '(
' → logprob: -19.7500057220459
    9. '(an' → logprob: -20.6250057220459
    10. '(A' → logprob: -20.7500057220459

Token 107: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0004997743526473641
    2. ')
' → logprob: -7.625499725341797
    3. '       ' → logprob: -11.500499725341797
    4. ' )' → logprob: -13.750499725341797
    5. ')
' → logprob: -16.000499725341797
    6. '))' → logprob: -16.250499725341797
    7. '())' → logprob: -16.625499725341797
    8. ')

' → logprob: -16.625499725341797
    9. ')return' → logprob: -17.000499725341797
    10. '）' → logprob: -17.125499725341797

Token 108: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.17480212450027466
    2. '<|end|>' → logprob: -2.04980206489563
    3. '   ' → logprob: -4.049802303314209
    4. 'else' → logprob: -5.299802303314209
    5. ')' → logprob: -6.174802303314209
    6. '        ' → logprob: -6.549802303314209
    7. '    ' → logprob: -6.549802303314209
    8. 'for' → logprob: -7.049802303314209
    9. '  ' → logprob: -7.549802303314209
    10. ' ' → logprob: -7.674802303314209

Token 109: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.06612647324800491
    2. 'elif' → logprob: -2.816126585006714
    3. ' else' → logprob: -6.316126346588135
    4. '<|end|>' → logprob: -6.316126346588135
    5. ' elif' → logprob: -8.816126823425293
    6. '#' → logprob: -8.816126823425293
    7. '```' → logprob: -9.691126823425293
    8. 'return' → logprob: -9.816126823425293
    9. '       ' → logprob: -10.691126823425293
    10. '<|end|>' → logprob: -10.941126823425293

Token 110: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2294173240661621
    2. ':
' → logprob: -1.604417324066162
    3. '           ' → logprob: -6.104417324066162
    4. '       ' → logprob: -6.479417324066162
    5. '   ' → logprob: -9.72941780090332
    6. '```' → logprob: -9.97941780090332
    7. '):
' → logprob: -10.60441780090332
    8. '():
' → logprob: -10.97941780090332
    9. '<|end|>' → logprob: -11.10441780090332
    10. '          ' → logprob: -11.35441780090332

Token 111: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.022090228274464607
    2. 'invalid' → logprob: -4.522090435028076
    3. '   ' → logprob: -4.772090435028076
    4. ' invalid' → logprob: -6.522090435028076
    5. '           ' → logprob: -6.897090435028076
    6. '```' → logprob: -11.022089958190918
    7. ' ' → logprob: -12.147089958190918
    8. '
' → logprob: -12.522089958190918
    9. 'pass' → logprob: -12.522089958190918
    10. '``' → logprob: -13.647089958190918

Token 112: ' invalid' (ID: 15796)
  Prédit: 'invalid'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'invalid' (adapté à ' invalid') → logprob: -0.004397240467369556
    2. '   ' → logprob: -5.879397392272949
    3. ' invalid' → logprob: -6.879397392272949
    4. '           ' → logprob: -7.504397392272949
    5. '
' → logprob: -12.25439739227295
    6. '```' → logprob: -12.75439739227295
    7. '       ' → logprob: -13.50439739227295
    8. ' ' → logprob: -13.62939739227295
    9. '            
' → logprob: -15.00439739227295
    10. '.invalid' → logprob: -15.50439739227295

Token 113: '.update' (ID: 8689)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.5789067149162292
    2. '.add' → logprob: -0.8289067149162292
    3. '.update' → logprob: -5.828906536102295
    4. ' .' → logprob: -11.703907012939453
    5. 'add' → logprob: -12.328907012939453
    6. '.union' → logprob: -12.953907012939453
    7. '.=' → logprob: -13.828907012939453
    8. '.
' → logprob: -13.953907012939453
    9. '.setdefault' → logprob: -14.578907012939453
    10. '{}.' → logprob: -14.578907012939453

Token 114: '((' (ID: 2054)
  Prédit: '({'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '({' → logprob: -0.7343363761901855
    2. '([' → logprob: -0.7343363761901855
    3. '{' → logprob: -3.3593363761901855
    4. '((' → logprob: -5.2343363761901855
    5. '[a' → logprob: -8.609336853027344
    6. '(a' → logprob: -9.734336853027344
    7. '(' → logprob: -11.859336853027344
    8. '[(' → logprob: -12.609336853027344
    9. '[{' → logprob: -12.859336853027344
    10. '[' → logprob: -13.109336853027344

Token 115: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.03872557356953621
    2. '{' → logprob: -4.03872537612915
    3. '[a' → logprob: -4.03872537612915
    4. '(a' → logprob: -5.91372537612915
    5. '   ' → logprob: -11.163725852966309
    6. ' a' → logprob: -11.288725852966309
    7. ')a' → logprob: -11.538725852966309
    8. ' (' → logprob: -13.663725852966309
    9. '	a' → logprob: -13.663725852966309
    10. '{
' → logprob: -13.788725852966309

Token 116: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.008670945651829243
    2. ',b' → logprob: -4.758670806884766
    3. ' ,' → logprob: -10.008670806884766
    4. 'b' → logprob: -11.383670806884766
    5. ',
' → logprob: -17.008670806884766
    6. '{' → logprob: -18.258670806884766
    7. ' ' → logprob: -18.633670806884766
    8. 'a' → logprob: -18.883670806884766
    9. '```' → logprob: -18.883670806884766
    10. ' b' → logprob: -19.508670806884766

Token 117: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -5.848420551046729e-05
    2. ' b' → logprob: -9.7500581741333
    3. ')b' → logprob: -16.250059127807617
    4. '   ' → logprob: -19.000059127807617
    5. '{' → logprob: -19.750059127807617
    6. ')' → logprob: -19.875059127807617
    7. '	b' → logprob: -20.375059127807617
    8. '
' → logprob: -21.625059127807617
    9. '(b' → logprob: -21.625059127807617
    10. ',b' → logprob: -21.750059127807617

Token 118: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.006728161126375198
    2. ')' → logprob: -5.006728172302246
    3. '))
' → logprob: -11.381728172302246
    4. ')))' → logprob: -14.631728172302246
    5. ' ))' → logprob: -14.756728172302246
    6. ')
' → logprob: -15.631728172302246
    7. '       ' → logprob: -16.13172721862793
    8. ')}' → logprob: -16.63172721862793
    9. '()))' → logprob: -16.75672721862793
    10. '));' → logprob: -17.00672721862793

Token 119: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.013355745002627373
    2. '    
' → logprob: -5.138355731964111
    3. '
' → logprob: -5.263355731964111
    4. 'print' → logprob: -6.888355731964111
    5. ')' → logprob: -7.263355731964111
    6. '<|end|>' → logprob: -8.76335620880127
    7. '  
' → logprob: -8.76335620880127
    8. ')
' → logprob: -9.13835620880127
    9. 'for' → logprob: -11.13835620880127
    10. '        
' → logprob: -11.26335620880127

Token 120: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.06801523268222809
    2. '   ' → logprob: -2.8180153369903564
    3. '
' → logprob: -6.193015098571777
    4. 'valid' → logprob: -6.568015098571777
    5. '    
' → logprob: -7.068015098571777
    6. ' print' → logprob: -7.068015098571777
    7. '```' → logprob: -7.568015098571777
    8. '  
' → logprob: -9.068015098571777
    9. ' valid' → logprob: -10.318015098571777
    10. 'for' → logprob: -10.318015098571777

Token 121: '(N' (ID: 10564)
  Prédit: '(len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(len' → logprob: -0.07231490314006805
    2. '(N' → logprob: -2.697314977645874
    3. '(' → logprob: -6.447314739227295
    4. '(sum' → logprob: -7.572314739227295
    5. 'len' → logprob: -8.322315216064453
    6. '((' → logprob: -11.697315216064453
    7. '(
' → logprob: -11.947315216064453
    8. '(n' → logprob: -12.197315216064453
    9. '(max' → logprob: -12.697315216064453
    10. '(sorted' → logprob: -12.947315216064453

Token 122: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.14590513706207275
    2. '-' → logprob: -2.145905017852783
    3. '-l' → logprob: -4.020905017852783
    4. ' ' → logprob: -7.770905017852783
    5. '-invalid' → logprob: -9.020905494689941
    6. '   ' → logprob: -9.145905494689941
    7. ')' → logprob: -9.645905494689941
    8. 'len' → logprob: -9.895905494689941
    9. ' len' → logprob: -10.145905494689941
    10. '  ' → logprob: -10.895905494689941

Token 123: ' len' (ID: 4631)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.0004309076175559312
    2. ' len' → logprob: -7.750431060791016
    3. '	len' → logprob: -16.500431060791016
    4. '(len' → logprob: -17.125431060791016
    5. '=len' → logprob: -17.375431060791016
    6. '[len' → logprob: -19.125431060791016
    7. '   ' → logprob: -20.250431060791016
    8. '_len' → logprob: -22.250431060791016
    9. ',len' → logprob: -22.375431060791016
    10. '<len' → logprob: -22.375431060791016

Token 124: '(in' (ID: 9573)
  Prédit: '(in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(in' → logprob: -2.7610454708337784e-05
    2. 'invalid' → logprob: -11.125027656555176
    3. '(' → logprob: -11.375027656555176
    4. ')' → logprob: -14.750027656555176
    5. '(valid' → logprob: -14.750027656555176
    6. ' (' → logprob: -14.875027656555176
    7. '(inv' → logprob: -15.875027656555176
    8. '(`' → logprob: -18.00002670288086
    9. '.invalid' → logprob: -18.00002670288086
    10. '(
' → logprob: -18.12502670288086

Token 125: 'valid' (ID: 3197)
  Prédit: 'valid'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'valid' → logprob: -0.000804745068307966
    2. 'alid' → logprob: -7.250804901123047
    3. 'invalid' → logprob: -9.750804901123047
    4. '(valid' → logprob: -10.250804901123047
    5. 'val' → logprob: -14.875804901123047
    6. ' valid' → logprob: -15.000804901123047
    7. '.valid' → logprob: -15.375804901123047
    8. 'al' → logprob: -15.750804901123047
    9. '	valid' → logprob: -15.875804901123047
    10. 'validated' → logprob: -17.000804901123047

Token 126: '))

' (ID: 9746)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02324652671813965
    2. '))' → logprob: -3.7732465267181396
    3. ' )' → logprob: -14.898246765136719
    4. '())' → logprob: -15.148246765136719
    5. '()' → logprob: -16.14824676513672
    6. ')
' → logprob: -16.39824676513672
    7. ')))' → logprob: -16.52324676513672
    8. ')`' → logprob: -17.02324676513672
    9. '])' → logprob: -17.27324676513672
    10. '})' → logprob: -17.77324676513672

Token 127: 'if' (ID: 366)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 128: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.42874017357826233
    2. '__' → logprob: -1.05374014377594
    3. ' ' → logprob: -11.553740501403809
    4. '_' → logprob: -11.678740501403809
    5. 'name' → logprob: -11.803740501403809
    6. '_name' → logprob: -12.053740501403809
    7. ' ' → logprob: -13.303740501403809
    8. '___' → logprob: -13.303740501403809
    9. 'Name' → logprob: -13.803740501403809
    10. ' name' → logprob: -13.928740501403809

Token 129: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.002649263245984912
    2. '==' → logprob: -6.127649307250977
    3. ' ==' → logprob: -8.127649307250977
    4. ' __' → logprob: -9.127649307250977
    5. '(__' → logprob: -11.127649307250977
    6. '_' → logprob: -11.752649307250977
    7. '.__' → logprob: -12.127649307250977
    8. '()==' → logprob: -12.252649307250977
    9. '__.__' → logprob: -12.252649307250977
    10. 'name' → logprob: -12.627649307250977

Token 130: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -6.52788148727268e-05
    2. '==' → logprob: -9.875064849853516
    3. '__.__' → logprob: -11.375064849853516
    4. ' ==' → logprob: -13.875064849853516
    5. '__.' → logprob: -14.250064849853516
    6. '___' → logprob: -15.750064849853516
    7. '_' → logprob: -15.875064849853516
    8. '____' → logprob: -16.250064849853516
    9. '__
' → logprob: -16.875064849853516
    10. '__('' → logprob: -16.875064849853516

Token 131: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.21526628732681274
    2. '__' → logprob: -2.090266227722168
    3. '==' → logprob: -2.715266227722168
    4. '=="' → logprob: -6.590266227722168
    5. '__.__' → logprob: -6.715266227722168
    6. '.' → logprob: -7.590266227722168
    7. '.__' → logprob: -7.590266227722168
    8. '=='' → logprob: -9.465266227722168
    9. ' .' → logprob: -10.340266227722168
    10. '__.' → logprob: -10.840266227722168

Token 132: ' '__' (ID: 28278)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.20157432556152344
    2. ''' → logprob: -1.7015743255615234
    3. '__' → logprob: -8.826574325561523
    4. ' "__' → logprob: -11.576574325561523
    5. '"user' → logprob: -13.201574325561523
    6. ' '__' → logprob: -14.201574325561523
    7. '"name' → logprob: -14.826574325561523
    8. ''"' → logprob: -15.451574325561523
    9. ''name' → logprob: -15.451574325561523
    10. ''user' → logprob: -15.451574325561523

Token 133: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.00023238400171976537
    2. '__' → logprob: -8.750232696533203
    3. 'name' → logprob: -9.875232696533203
    4. '"' → logprob: -11.250232696533203
    5. '_main' → logprob: -12.125232696533203
    6. ''' → logprob: -13.250232696533203
    7. ' main' → logprob: -14.250232696533203
    8. '__':
' → logprob: -14.500232696533203
    9. '-main' → logprob: -14.750232696533203
    10. '(main' → logprob: -15.500232696533203

Token 134: '__':
' (ID: 39314)
  Prédit: '__':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__':
' → logprob: -0.38736480474472046
    2. '__' → logprob: -1.1373648643493652
    3. '__:' → logprob: -8.262364387512207
    4. '__.' → logprob: -8.637364387512207
    5. '__":
' → logprob: -10.137364387512207
    6. '':' → logprob: -12.137364387512207
    7. ':' → logprob: -12.637364387512207
    8. '__.__' → logprob: -12.762364387512207
    9. '.__' → logprob: -12.887364387512207
    10. '_' → logprob: -13.262364387512207

Token 135: '   ' (ID: 271)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.46250900626182556
    2. ' main' → logprob: -1.087509036064148
    3. '	main' → logprob: -3.5875089168548584
    4. '   ' → logprob: -5.2125091552734375
    5. '_main' → logprob: -10.087509155273438
    6. '    
' → logprob: -10.587509155273438
    7. '(main' → logprob: -11.462509155273438
    8. '<|end|>' → logprob: -11.462509155273438
    9. ' ' → logprob: -11.837509155273438
    10. ' ' → logprob: -12.087509155273438

Token 136: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' (adapté à ' main') → logprob: -1.9361264946837764e-07
    2. ' main' → logprob: -16.25
    3. '	main' → logprob: -19.375
    4. '_main' → logprob: -22.375
    5. '   ' → logprob: -22.5
    6. '.main' → logprob: -24.75
    7. 'mainwindow' → logprob: -25.5
    8. '(main' → logprob: -25.5
    9. 'Main' → logprob: -26.0
    10. '  ' → logprob: -26.25

Token 137: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.014207348227500916
    2. '(' → logprob: -4.264207363128662
    3. '()
' → logprob: -10.514206886291504
    4. '(
' → logprob: -11.889206886291504
    5. '()`' → logprob: -13.139206886291504
    6. '()

' → logprob: -13.514206886291504
    7. '()">' → logprob: -13.889206886291504
    8. '()]' → logprob: -14.139206886291504
    9. '();' → logprob: -14.264206886291504
    10. '```' → logprob: -14.389206886291504


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 135
Tokens correctement prédits (1ère position, stricte): 55
Tokens correctement prédits (1ère position, avec adaptation): 63
Tokens correctement prédits (top 10): 119
Précision stricte (1ère position): 40.74%
Précision adaptée (1ère position): 46.67%
Précision (top 10): 88.15%
================================================================================
