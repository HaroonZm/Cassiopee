================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:15:35
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def min_steps_to_process_elements():
    """
    Calcule et affiche le nombre minimal d'étapes nécessaires pour traiter tous les éléments d'une liste selon les paramètres donnés.

    L'utilisateur doit saisir deux entiers `n` et `k` sur la première ligne,
    puis une liste de `n` entiers sur la seconde ligne (la valeur de cette liste n'est pas utilisée dans le calcul).

    Logique :
      - À chaque étape, on peut traiter jusqu'à `k` nouveaux éléments, mais le premier élément doit être traité seul.
      - Après avoir traité le premier élément, on fait des groupes de taille jusqu'à `k` pour traiter tous les autres.
      - Le programme calcule le nombre minimal d'étapes nécessaires pour traiter tous les éléments.

    Affiche :
      - Le nombre minimal d'étapes, sous forme entière.
    """
    # Lecture des deux entiers n (taille de la liste) et k (taille maximale du groupe traité à chaque étape)
    n, k = map(int, input().split())
    # Lecture de la liste d'entiers (non utilisée dans la logique, requise uniquement pour l'entrée)
    a = list(map(int, input().split()))
    # Après avoir traité le premier élément, il faut encore traiter (n-k) éléments
    n -= k
    # k décrémente pour représenter le nombre d'éléments supplémentaires pouvant être traités par étape suivante
    k -= 1
    # Initialiser le compteur d'étapes à 1 (le premier élément déjà traité)
    p = 1
    if n <= 0:
        # Si tous les éléments sont déjà traités à la première étape, il ne faut qu'une étape
        print(p)
    else:
        # Sinon, calcule le nombre d'étapes nécessaires pour traiter les éléments restants
        if n % k == 0:
            # Si les éléments restants se divisent exactement en groupes de taille k
            print(p + n // k)
        else:
            # Si ce n'est pas exact, il faudra une étape supplémentaire pour les éléments restants
            print(p + n // k + 1)

# Appel de la fonction principale pour exécuter le programme
min_steps_to_process_elements()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' min' (ID: 1349)
  → Token d'amorce (pas de prédiction)

Token 2: '_steps' (ID: 52120)
  → Token d'amorce (pas de prédiction)

Token 3: '_to' (ID: 5089)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.3473503887653351
    2. '(' → logprob: -1.4723503589630127
    3. '_to' → logprob: -3.2223503589630127
    4. '(_' → logprob: -4.722350597381592
    5. '```' → logprob: -5.347350597381592
    6. '_:' → logprob: -5.347350597381592
    7. '(_:' → logprob: -5.972350597381592
    8. '():' → logprob: -7.347350597381592
    9. 'To' → logprob: -8.472350120544434
    10. ' (' → logprob: -8.597350120544434

Token 4: '_process' (ID: 25444)
  Prédit: '_re'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_re' → logprob: -0.7251853346824646
    2. 'reach' → logprob: -2.2251853942871094
    3. ' reach' → logprob: -2.3501853942871094
    4. '_reduce' → logprob: -3.1001853942871094
    5. '_take' → logprob: -3.3501853942871094
    6. '_complete' → logprob: -3.4751853942871094
    7. 'def' → logprob: -3.8501853942871094
    8. '_cl' → logprob: -4.100185394287109
    9. 'reduce' → logprob: -4.225185394287109
    10. '_make' → logprob: -4.600185394287109

Token 5: '_elements' (ID: 53344)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.4476899802684784
    2. '(' → logprob: -1.0726900100708008
    3. '_:' → logprob: -4.697690010070801
    4. '(_' → logprob: -5.447690010070801
    5. '(_:' → logprob: -6.697690010070801
    6. '```' → logprob: -6.822690010070801
    7. '():' → logprob: -6.947690010070801
    8. '_to' → logprob: -8.4476900100708
    9. ':' → logprob: -8.4476900100708
    10. '(:' → logprob: -8.5726900100708

Token 6: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.019274426624178886
    2. '_' → logprob: -4.2692742347717285
    3. '(_:' → logprob: -5.7692742347717285
    4. '_:' → logprob: -7.2692742347717285
    5. '```' → logprob: -7.3942742347717285
    6. '(:' → logprob: -8.394274711608887
    7. '(_' → logprob: -8.769274711608887
    8. '():' → logprob: -9.644274711608887
    9. '_to' → logprob: -10.394274711608887
    10. ':' → logprob: -10.519274711608887

Token 7: '   ' (ID: 271)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\' → logprob: -1.3476736545562744
    2. '   ' → logprob: -1.3476736545562744
    3. '```' → logprob: -1.3476736545562744
    4. '(' → logprob: -2.4726736545562744
    5. ':' → logprob: -2.8476736545562744
    6. '\n' → logprob: -3.3476736545562744
    7. '():' → logprob: -4.597673416137695
    8. '    
' → logprob: -4.597673416137695
    9. '  
' → logprob: -5.472673416137695
    10. '(n' → logprob: -6.222673416137695

Token 8: ' """
' (ID: 7037)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\' → logprob: -1.4055883884429932
    2. ' ' → logprob: -1.4055883884429932
    3. '```' → logprob: -2.030588388442993
    4. 'n' → logprob: -2.280588388442993
    5. '\n' → logprob: -3.030588388442993
    6. '[' → logprob: -3.155588388442993
    7. '   ' → logprob: -3.405588388442993
    8. '    ' → logprob: -3.530588388442993
    9. 'a' → logprob: -3.530588388442993
    10. '_' → logprob: -3.655588388442993

Token 9: '   ' (ID: 271)
  Prédit: 'Calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Calculate' → logprob: -0.25491979718208313
    2. '"""' → logprob: -2.6299197673797607
    3. ' Calculate' → logprob: -3.5049197673797607
    4. 'Calcul' → logprob: -3.8799197673797607
    5. 'Find' → logprob: -4.00492000579834
    6. 'T' → logprob: -4.12992000579834
    7. 'Returns' → logprob: -4.50492000579834
    8. 'Determine' → logprob: -4.50492000579834
    9. 'Return' → logprob: -4.75492000579834
    10. '   ' → logprob: -5.12992000579834

Token 10: ' Cal' (ID: 4453)
  Prédit: 'Calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Calculate' → logprob: -0.0990850180387497
    2. 'Calcul' → logprob: -2.7240850925445557
    3. 'Find' → logprob: -4.349084854125977
    4. 'Count' → logprob: -4.974084854125977
    5. 'Return' → logprob: -6.224084854125977
    6. 'Returns' → logprob: -6.474084854125977
    7. 'Compute' → logprob: -6.599084854125977
    8. 'Determine' → logprob: -7.099084854125977
    9. 'Given' → logprob: -7.474084854125977
    10. 'C' → logprob: -7.599084854125977

Token 11: 'cule' (ID: 45017)
  Prédit: 'culate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'culate' → logprob: -0.01319270208477974
    2. 'cul' → logprob: -4.763192653656006
    3. 'c' → logprob: -6.513192653656006
    4. 'l' → logprob: -6.763192653656006
    5. 'cu' → logprob: -7.388192653656006
    6. 'cula' → logprob: -7.513192653656006
    7. '   ' → logprob: -8.138193130493164
    8. 'culation' → logprob: -8.763193130493164
    9. 'culated' → logprob: -9.513193130493164
    10. '  ' → logprob: -10.263193130493164

Token 12: ' et' (ID: 859)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.00015538577281404287
    2. ' r' → logprob: -9.375155448913574
    3. 'z' → logprob: -9.750155448913574
    4. 's' → logprob: -12.250155448913574
    5. 'ra' → logprob: -12.625155448913574
    6. '_r' → logprob: -13.375155448913574
    7. 'd' → logprob: -14.250155448913574
    8. 'ur' → logprob: -15.250155448913574
    9. '_' → logprob: -15.375155448913574
    10. 't' → logprob: -15.625155448913574

Token 13: ' affiche' (ID: 127479)
  Prédit: ' retourne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' retourne' → logprob: -0.6174741387367249
    2. '   ' → logprob: -1.86747407913208
    3. ' return' → logprob: -2.49247407913208
    4. 'return' → logprob: -2.86747407913208
    5. ' ren' → logprob: -2.86747407913208
    6. ' returns' → logprob: -4.49247407913208
    7. ' ret' → logprob: -4.61747407913208
    8. ' dé' → logprob: -4.86747407913208
    9. ' optimise' → logprob: -5.11747407913208
    10. ' calc' → logprob: -5.24247407913208

Token 14: ' le' (ID: 505)
  Prédit: ' le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.20825344324111938
    2. ' l' → logprob: -2.4582533836364746
    3. ' les' → logprob: -3.3332533836364746
    4. 's' → logprob: -3.8332533836364746
    5. ' la' → logprob: -3.8332533836364746
    6. 'l' → logprob: -5.083253383636475
    7. ' ' → logprob: -5.333253383636475
    8. '   ' → logprob: -5.333253383636475
    9. 'le' → logprob: -5.833253383636475
    10. '```' → logprob: -6.458253383636475

Token 15: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.023347150534391403
    2. 'nombre' → logprob: -4.0233473777771
    3. '   ' → logprob: -5.6483473777771
    4. ' minimum' → logprob: -7.7733473777771
    5. ' nombres' → logprob: -7.8983473777771
    6. ' ' → logprob: -8.398346900939941
    7. ' nb' → logprob: -9.023346900939941
    8. ' minimal' → logprob: -9.023346900939941
    9. '  ' → logprob: -9.398346900939941
    10. ' nbr' → logprob: -10.023346900939941

Token 16: ' minimal' (ID: 19957)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3200596272945404
    2. ' de' → logprob: -1.6950596570968628
    3. '  ' → logprob: -3.0700595378875732
    4. '_' → logprob: -3.8200595378875732
    5. ' d' → logprob: -4.195059776306152
    6. 's' → logprob: -6.445059776306152
    7. '```' → logprob: -7.320059776306152
    8. '<|end|>' → logprob: -7.570059776306152
    9. '_de' → logprob: -7.695059776306152
    10. ')' → logprob: -7.820059776306152

Token 17: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.9358178973197937
    2. ' de' → logprob: -0.9358178973197937
    3. ' ' → logprob: -1.8108179569244385
    4. ' des' → logprob: -3.9358179569244385
    5. '  ' → logprob: -4.810817718505859
    6. '<|end|>' → logprob: -4.810817718505859
    7. 's' → logprob: -5.060817718505859
    8. '```' → logprob: -6.310817718505859
    9. '<|end|>' → logprob: -6.435817718505859
    10. 'd' → logprob: -7.060817718505859

Token 18: ''ét' (ID: 23771)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.7028790712356567
    2. 'e' → logprob: -0.9528790712356567
    3. ''espace' → logprob: -3.702878952026367
    4. '_' → logprob: -3.827878952026367
    5. ''é' → logprob: -3.827878952026367
    6. ''esp' → logprob: -3.827878952026367
    7. ''ét' → logprob: -4.452878952026367
    8. ''e' → logprob: -4.827878952026367
    9. ' ' → logprob: -6.077878952026367
    10. 'é' → logprob: -6.452878952026367

Token 19: 'apes' (ID: 11864)
  Prédit: 'apes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'apes' → logprob: -0.03752332180738449
    2. 'ape' → logprob: -3.7875232696533203
    3. 'a' → logprob: -5.28752326965332
    4. 'ap' → logprob: -5.53752326965332
    5. 'é' → logprob: -5.53752326965332
    6. 'e' → logprob: -7.66252326965332
    7. '   ' → logprob: -9.03752326965332
    8. 'apé' → logprob: -9.16252326965332
    9. '```' → logprob: -9.78752326965332
    10. 'ép' → logprob: -9.78752326965332

Token 20: ' nécessaires' (ID: 74402)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.029485005885362625
    2. ' ' → logprob: -4.27948522567749
    3. ' nécessaires' → logprob: -5.02948522567749
    4. '    ' → logprob: -5.52948522567749
    5. ' nécessaire' → logprob: -6.77948522567749
    6. '  ' → logprob: -7.15448522567749
    7. '```' → logprob: -7.65448522567749
    8. ' pour' → logprob: -8.029484748840332
    9. '    
' → logprob: -8.279484748840332
    10. '
' → logprob: -8.779484748840332

Token 21: ' pour' (ID: 1930)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08354462683200836
    2. ' pour' → logprob: -2.8335447311401367
    3. 'pour' → logprob: -4.958544731140137
    4. ' to' → logprob: -5.333544731140137
    5. '    ' → logprob: -5.708544731140137
    6. ' à' → logprob: -6.458544731140137
    7. '```' → logprob: -6.458544731140137
    8. '<|end|>' → logprob: -6.708544731140137
    9. '    
' → logprob: -7.833544731140137
    10. ' ' → logprob: -7.958544731140137

Token 22: ' traiter' (ID: 105852)
  Prédit: ' traiter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' traiter' → logprob: -0.10649748891592026
    2. ' terminer' → logprob: -3.7314975261688232
    3. ' process' → logprob: -3.8564975261688232
    4. '   ' → logprob: -4.606497287750244
    5. ' accompl' → logprob: -4.731497287750244
    6. ' compléter' → logprob: -5.106497287750244
    7. '    ' → logprob: -5.481497287750244
    8. ' continuer' → logprob: -5.481497287750244
    9. ' ' → logprob: -5.606497287750244
    10. ' parcour' → logprob: -5.731497287750244

Token 23: ' tous' (ID: 10688)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2802596688270569
    2. ' un' → logprob: -2.530259609222412
    3. ' chaque' → logprob: -2.905259609222412
    4. '   ' → logprob: -3.405259609222412
    5. ' l' → logprob: -4.030259609222412
    6. ' les' → logprob: -4.155259609222412
    7. '```' → logprob: -5.030259609222412
    8. ' le' → logprob: -5.280259609222412
    9. ' tous' → logprob: -5.405259609222412
    10. '    ' → logprob: -5.405259609222412

Token 24: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.08158018440008163
    2. ' ' → logprob: -2.58158016204834
    3. ' l' → logprob: -7.70658016204834
    4. 'les' → logprob: -7.95658016204834
    5. ' des' → logprob: -7.95658016204834
    6. '<|end|>' → logprob: -8.33158016204834
    7. ' la' → logprob: -8.45658016204834
    8. 'l' → logprob: -8.58158016204834
    9. '```' → logprob: -8.58158016204834
    10. 's' → logprob: -9.20658016204834

Token 25: ' éléments' (ID: 57375)
  Prédit: ' éléments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' éléments' → logprob: -0.4551340341567993
    2. 'élé' → logprob: -1.0801340341567993
    3. ' ' → logprob: -4.08013391494751
    4. ' él' → logprob: -6.08013391494751
    5. ' é' → logprob: -6.45513391494751
    6. ' elements' → logprob: -7.08013391494751
    7. 'é' → logprob: -7.20513391494751
    8. '   ' → logprob: -7.45513391494751
    9. '_' → logprob: -7.58013391494751
    10. 'él' → logprob: -7.83013391494751

Token 26: ' d' (ID: 272)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4558650851249695
    2. ' en' → logprob: -2.0808651447296143
    3. '.' → logprob: -2.5808651447296143
    4. ' de' → logprob: -3.0808651447296143
    5. 's' → logprob: -3.3308651447296143
    6. ' du' → logprob: -3.5808651447296143
    7. ',' → logprob: -4.330864906311035
    8. ' ' → logprob: -4.330864906311035
    9. ' d' → logprob: -4.830864906311035
    10. '```' → logprob: -4.955864906311035

Token 27: ''une' (ID: 13337)
  Prédit: ''un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''un' → logprob: -1.3469934463500977
    2. ' un' → logprob: -1.5969934463500977
    3. ''une' → logprob: -1.8469934463500977
    4. ' la' → logprob: -1.9719934463500977
    5. ''' → logprob: -2.8469934463500977
    6. ' une' → logprob: -2.9719934463500977
    7. ' ' → logprob: -3.4719934463500977
    8. '   ' → logprob: -3.5969934463500977
    9. ' e' → logprob: -4.221993446350098
    10. 'e' → logprob: -4.221993446350098

Token 28: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.1215558871626854
    2. ' collection' → logprob: -3.246555805206299
    3. '   ' → logprob: -3.496555805206299
    4. ' list' → logprob: -4.496555805206299
    5. ' file' → logprob: -4.746555805206299
    6. 'liste' → logprob: -5.371555805206299
    7. ' chaîne' → logprob: -5.496555805206299
    8. ' ' → logprob: -5.746555805206299
    9. ' ' → logprob: -5.746555805206299
    10. ' donnée' → logprob: -7.434055805206299

Token 29: ' selon' (ID: 27571)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.7657027244567871
    2. '   ' → logprob: -1.515702724456787
    3. '```' → logprob: -2.765702724456787
    4. ' de' → logprob: -3.140702724456787
    5. ',' → logprob: -3.265702724456787
    6. ' en' → logprob: -3.390702724456787
    7. 's' → logprob: -3.640702724456787
    8. 'e' → logprob: -3.765702724456787
    9. '.
' → logprob: -4.015702724456787
    10. ' ' → logprob: -4.890702724456787

Token 30: ' les' (ID: 1341)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -1.106795310974121
    2. ' un' → logprob: -1.231795310974121
    3. ' une' → logprob: -1.481795310974121
    4. ' les' → logprob: -2.856795310974121
    5. ' certaines' → logprob: -3.731795310974121
    6. ' le' → logprob: -4.231795310974121
    7. ' des' → logprob: -4.231795310974121
    8. ' given' → logprob: -4.856795310974121
    9. ' l' → logprob: -4.981795310974121
    10. ' ' → logprob: -5.231795310974121

Token 31: ' paramètres' (ID: 130696)
  Prédit: ' règles'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' règles' → logprob: -0.5181916952133179
    2. ' contraintes' → logprob: -1.1431916952133179
    3. ' conditions' → logprob: -3.6431918144226074
    4. ' critères' → logprob: -3.7681918144226074
    5. ' cons' → logprob: -5.018191814422607
    6. '   ' → logprob: -5.393191814422607
    7. 'r' → logprob: -5.893191814422607
    8. ' opérations' → logprob: -6.268191814422607
    9. ' différentes' → logprob: -6.330691814422607
    10. ' instructions' → logprob: -6.455691814422607

Token 32: ' donn' (ID: 20414)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8946698307991028
    2. ' ' → logprob: -1.894669771194458
    3. ' :' → logprob: -2.644669771194458
    4. '.' → logprob: -2.894669771194458
    5. 's' → logprob: -3.144669771194458
    6. ' suivants' → logprob: -3.144669771194458
    7. ' de' → logprob: -3.519669771194458
    8. ' d' → logprob: -3.894669771194458
    9. ' s' → logprob: -3.894669771194458
    10. ' given' → logprob: -4.019670009613037

Token 33: 'és' (ID: 1756)
  Prédit: 'és'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'és' → logprob: -0.13867810368537903
    2. 'é' → logprob: -2.7636780738830566
    3. 'es' → logprob: -3.1386780738830566
    4. 'e' → logprob: -3.8886780738830566
    5. 'ées' → logprob: -6.263678073883057
    6. 'ée' → logprob: -8.013678550720215
    7. '```' → logprob: -8.763678550720215
    8. 's' → logprob: -9.638678550720215
    9. 'е' → logprob: -10.638678550720215
    10. '_' → logprob: -11.138678550720215

Token 34: '.

' (ID: 364)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15068669617176056
    2. '```' → logprob: -3.775686740875244
    3. '
' → logprob: -4.150686740875244
    4. ':' → logprob: -4.275686740875244
    5. '.' → logprob: -4.275686740875244
    6. '\n' → logprob: -4.400686740875244
    7. '    ' → logprob: -4.650686740875244
    8. ' ' → logprob: -4.900686740875244
    9. '"""' → logprob: -4.900686740875244
    10. ',' → logprob: -5.025686740875244

Token 35: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1105194240808487
    2. '
' → logprob: -3.2355194091796875
    3. ' 
' → logprob: -3.6105194091796875
    4. '```' → logprob: -4.6105194091796875
    5. '"""' → logprob: -5.1105194091796875
    6. '\n' → logprob: -5.2355194091796875
    7. '    
' → logprob: -5.6105194091796875
    8. '    ' → logprob: -5.9855194091796875
    9. 'def' → logprob: -6.1105194091796875
    10. '"""
' → logprob: -6.3605194091796875

Token 36: ' L' (ID: 451)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02546135149896145
    2. 'n' → logprob: -5.150461196899414
    3. '```' → logprob: -5.150461196899414
    4. '    ' → logprob: -5.650461196899414
    5. '\n' → logprob: -5.650461196899414
    6. '"""' → logprob: -6.025461196899414
    7. '
' → logprob: -6.650461196899414
    8. '    
' → logprob: -7.275461196899414
    9. ' 
' → logprob: -7.525461196899414
    10. '     
' → logprob: -8.025461196899414

Token 37: ''utilisateur' (ID: 140803)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.6760504841804504
    2. 'a' → logprob: -0.8010504841804504
    3. ''' → logprob: -4.426050662994385
    4. 'es' → logprob: -4.551050662994385
    5. 'i' → logprob: -5.926050662994385
    6. ' '' → logprob: -5.926050662994385
    7. 'u' → logprob: -6.176050662994385
    8. '   ' → logprob: -6.301050662994385
    9. ' a' → logprob: -6.676050662994385
    10. ''''' → logprob: -6.676050662994385

Token 38: ' doit' (ID: 21822)
  Prédit: ' doit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' doit' → logprob: -0.16000127792358398
    2. ' peut' → logprob: -2.285001277923584
    3. ' devra' → logprob: -4.410001277923584
    4. 's' → logprob: -5.660001277923584
    5. ' a' → logprob: -6.035001277923584
    6. ' input' → logprob: -6.160001277923584
    7. ' souhaite' → logprob: -6.160001277923584
    8. ' chois' → logprob: -6.160001277923584
    9. ' ' → logprob: -6.285001277923584
    10. '   ' → logprob: -6.410001277923584

Token 39: ' saisir' (ID: 152120)
  Prédit: ' fournir'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fournir' → logprob: -0.7159402966499329
    2. ' saisir' → logprob: -0.8409402966499329
    3. ' choisir' → logprob: -3.965940237045288
    4. ' compléter' → logprob: -4.590940475463867
    5. ' entrer' → logprob: -4.715940475463867
    6. ' préciser' → logprob: -4.715940475463867
    7. ' continuer' → logprob: -4.965940475463867
    8. ' input' → logprob: -5.590940475463867
    9. 's' → logprob: -6.215940475463867
    10. ' spéc' → logprob: -6.340940475463867

Token 40: ' deux' (ID: 10301)
  Prédit: ' le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.967337429523468
    2. ' un' → logprob: -1.2173373699188232
    3. ' la' → logprob: -2.2173373699188232
    4. ' ' → logprob: -3.0923373699188232
    5. ' l' → logprob: -3.0923373699188232
    6. ' une' → logprob: -3.2173373699188232
    7. ' les' → logprob: -3.2173373699188232
    8. ' des' → logprob: -3.7173373699188232
    9. ' nombre' → logprob: -6.092337608337402
    10. ' )' → logprob: -6.217337608337402

Token 41: ' ent' (ID: 1121)
  Prédit: ' ent'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ent' → logprob: -0.5501610040664673
    2. ' nombres' → logprob: -1.1751610040664673
    3. ' espaces' → logprob: -3.3001608848571777
    4. ' ' → logprob: -3.3001608848571777
    5. ' integers' → logprob: -4.175160884857178
    6. ' nombre' → logprob: -5.175160884857178
    7. ' paramètres' → logprob: -5.550160884857178
    8. ' valeurs' → logprob: -5.800160884857178
    9. ' éléments' → logprob: -6.050160884857178
    10. 'ent' → logprob: -6.300160884857178

Token 42: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.017276618629693985
    2. 'ières' → logprob: -4.517276763916016
    3. 'r' → logprob: -5.392276763916016
    4. 'ier' → logprob: -7.392276763916016
    5. 'i' → logprob: -8.017276763916016
    6. 'êtes' → logprob: -8.767276763916016
    7. 'ités' → logprob: -8.892276763916016
    8. 'ires' → logprob: -9.392276763916016
    9. 'ri' → logprob: -9.892276763916016
    10. '   ' → logprob: -10.017276763916016

Token 43: ' `' (ID: 2700)
  Prédit: ' ,'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ,' → logprob: -1.3941099643707275
    2. ' :' → logprob: -1.5191099643707275
    3. ' ' → logprob: -1.8941099643707275
    4. ',' → logprob: -2.0191099643707275
    5. ' `' → logprob: -2.8941099643707275
    6. ' )' → logprob: -3.0191099643707275
    7. ' n' → logprob: -3.3941099643707275
    8. ' (' → logprob: -3.6441099643707275
    9. ':' → logprob: -3.7691099643707275
    10. ' à' → logprob: -4.519109725952148

Token 44: 'n' (ID: 77)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.5395587682723999
    2. 'n' → logprob: -1.0395587682724
    3. ' `' → logprob: -3.5395588874816895
    4. ' N' → logprob: -4.1645588874816895
    5. '`' → logprob: -4.9145588874816895
    6. ' m' → logprob: -6.1645588874816895
    7. ' ' → logprob: -6.5395588874816895
    8. ' a' → logprob: -6.5395588874816895
    9. 'a' → logprob: -6.7895588874816895
    10. 'N' → logprob: -7.2895588874816895

Token 45: '`' (ID: 63)
  Prédit: '`'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '`' → logprob: -0.5499629974365234
    2. ',' → logprob: -0.9249629974365234
    3. '_elements' → logprob: -4.799962997436523
    4. ' `' → logprob: -5.049962997436523
    5. ')' → logprob: -5.674962997436523
    6. ')`' → logprob: -5.674962997436523
    7. '`,' → logprob: -6.174962997436523
    8. ' ,' → logprob: -6.924962997436523
    9. '```' → logprob: -7.674962997436523
    10. ' =' → logprob: -8.049962997436523

Token 46: ' et' (ID: 859)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.18654893338680267
    2. ')' → logprob: -2.061548948287964
    3. '<|end|>' → logprob: -3.811548948287964
    4. ' ,' → logprob: -4.436548709869385
    5. ' )' → logprob: -6.061548709869385
    6. '   ' → logprob: -6.186548709869385
    7. 's' → logprob: -7.311548709869385
    8. ' =' → logprob: -7.561548709869385
    9. '<|end|>' → logprob: -7.561548709869385
    10. ' ' → logprob: -7.811548709869385

Token 47: ' `' (ID: 2700)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.7756953835487366
    2. ' m' → logprob: -1.1506953239440918
    3. ' `' → logprob: -2.025695323944092
    4. 'k' → logprob: -3.275695323944092
    5. 'm' → logprob: -3.525695323944092
    6. '`' → logprob: -4.150695323944092
    7. ' t' → logprob: -6.275695323944092
    8. ' ' → logprob: -6.400695323944092
    9. ' p' → logprob: -6.900695323944092
    10. ' s' → logprob: -7.275695323944092

Token 48: 'k' (ID: 74)
  Prédit: 'k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.13289591670036316
    2. 'm' → logprob: -2.3828959465026855
    3. ' k' → logprob: -4.5078959465026855
    4. 'x' → logprob: -5.0078959465026855
    5. 'd' → logprob: -5.6328959465026855
    6. 't' → logprob: -6.1328959465026855
    7. ' m' → logprob: -6.3828959465026855
    8. 's' → logprob: -6.6328959465026855
    9. 'p' → logprob: -6.6328959465026855
    10. 'l' → logprob: -6.8828959465026855

Token 49: '`' (ID: 63)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6515328288078308
    2. '`' → logprob: -1.6515328884124756
    3. ',' → logprob: -2.1515328884124756
    4. '):' → logprob: -2.7765328884124756
    5. '```' → logprob: -2.7765328884124756
    6. '`)' → logprob: -4.1515326499938965
    7. '`,' → logprob: -4.9015326499938965
    8. ':' → logprob: -5.5265326499938965
    9. '),' → logprob: -5.9015326499938965
    10. '   ' → logprob: -6.0265326499938965

Token 50: ' sur' (ID: 1512)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.07990358024835587
    2. '   ' → logprob: -3.5799036026000977
    3. ':' → logprob: -3.9549036026000977
    4. '):' → logprob: -4.454903602600098
    5. ')' → logprob: -5.204903602600098
    6. ' ,' → logprob: -5.454903602600098
    7. '```' → logprob: -6.204903602600098
    8. ' ' → logprob: -6.704903602600098
    9. '.' → logprob: -6.704903602600098
    10. ' :' → logprob: -6.829903602600098

Token 51: ' la' (ID: 557)
  Prédit: ' une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.12852072715759277
    2. ' la' → logprob: -2.6285207271575928
    3. ' ' → logprob: -3.1285207271575928
    4. 'une' → logprob: -6.378520965576172
    5. 'la' → logprob: -7.253520965576172
    6. ' ' → logprob: -7.378520965576172
    7. ' l' → logprob: -7.628520965576172
    8. '   ' → logprob: -8.253520965576172
    9. ' un' → logprob: -8.753520965576172
    10. ' deux' → logprob: -8.878520965576172

Token 52: ' première' (ID: 23423)
  Prédit: ' même'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' même' → logprob: -0.0006764543941244483
    2. ' mêmes' → logprob: -8.375676155090332
    3. 'm' → logprob: -9.500676155090332
    4. ' m' → logprob: -9.875676155090332
    5. ' prochaine' → logprob: -9.875676155090332
    6. ' ' → logprob: -10.125676155090332
    7. ' even' → logprob: -10.500676155090332
    8. ' prochain' → logprob: -10.750676155090332
    9. 'even' → logprob: -11.250676155090332
    10. ' next' → logprob: -11.375676155090332

Token 53: ' ligne' (ID: 19583)
  Prédit: ' ligne'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ligne' → logprob: -0.0559307299554348
    2. ' ' → logprob: -3.1809306144714355
    3. ' line' → logprob: -4.5559306144714355
    4. 'ligne' → logprob: -6.6809306144714355
    5. ' l' → logprob: -8.930931091308594
    6. 'l' → logprob: -9.180931091308594
    7. ' lignes' → logprob: -9.180931091308594
    8. ' \' → logprob: -9.430931091308594
    9. ' )' → logprob: -9.555931091308594
    10. '   ' → logprob: -9.805931091308594

Token 54: ',
' (ID: 412)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.3480701446533203
    2. '   ' → logprob: -1.7230701446533203
    3. '.' → logprob: -2.7230701446533203
    4. ':' → logprob: -4.47307014465332
    5. '\n' → logprob: -4.72307014465332
    6. ' ,' → logprob: -4.97307014465332
    7. ')' → logprob: -5.47307014465332
    8. '):' → logprob: -5.59807014465332
    9. '```' → logprob: -5.84807014465332
    10. ' :' → logprob: -5.97307014465332

Token 55: '   ' (ID: 271)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.0756335258483887
    2. ' ' → logprob: -1.2006335258483887
    3. ')' → logprob: -1.7006335258483887
    4. ' ,' → logprob: -2.3256335258483887
    5. '):' → logprob: -3.8256335258483887
    6. ' )' → logprob: -3.8256335258483887
    7. ':' → logprob: -4.825633525848389
    8. ' ):' → logprob: -4.950633525848389
    9. ' :' → logprob: -5.200633525848389
    10. '   ' → logprob: -5.325633525848389

Token 56: ' puis' (ID: 18766)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.26215890049934387
    2. ' ,' → logprob: -2.3871588706970215
    3. ' et' → logprob: -3.1371588706970215
    4. ' puis' → logprob: -3.2621588706970215
    5. '.' → logprob: -4.3871588706970215
    6. ' ' → logprob: -4.8871588706970215
    7. 's' → logprob: -5.2621588706970215
    8. ':' → logprob: -5.5121588706970215
    9. ' `' → logprob: -6.0121588706970215
    10. ' :' → logprob: -6.2621588706970215

Token 57: ' une' (ID: 2463)
  Prédit: ' une'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.49897298216819763
    2. ' la' → logprob: -1.24897301197052
    3. ' ' → logprob: -3.2489728927612305
    4. 's' → logprob: -4.3739728927612305
    5. ' un' → logprob: -4.7489728927612305
    6. ' les' → logprob: -5.2489728927612305
    7. ' entrer' → logprob: -5.4989728927612305
    8. ' saisir' → logprob: -5.4989728927612305
    9. ' l' → logprob: -5.7489728927612305
    10. ' on' → logprob: -5.7489728927612305

Token 58: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.30537042021751404
    2. ' ' → logprob: -2.055370330810547
    3. ' ligne' → logprob: -3.055370330810547
    4. ' deuxième' → logprob: -3.680370330810547
    5. 'liste' → logprob: -3.680370330810547
    6. ' troisième' → logprob: -4.930370330810547
    7. ' seconde' → logprob: -5.430370330810547
    8. 'ligne' → logprob: -5.680370330810547
    9. ' suite' → logprob: -5.805370330810547
    10. 's' → logprob: -5.805370330810547

Token 59: ' de' (ID: 334)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 60: ' `' (ID: 2700)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.8448183536529541
    2. ' k' → logprob: -1.094818353652954
    3. ' ent' → logprob: -2.469818353652954
    4. ' integers' → logprob: -2.469818353652954
    5. ' nombres' → logprob: -3.219818353652954
    6. 'n' → logprob: -4.719818115234375
    7. 'k' → logprob: -4.969818115234375
    8. 'inte' → logprob: -5.719818115234375
    9. ' `' → logprob: -6.469818115234375
    10. ' int' → logprob: -6.969818115234375

Token 61: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.20638562738895416
    2. ' n' → logprob: -1.831385612487793
    3. 'ent' → logprob: -4.206385612487793
    4. 'int' → logprob: -5.456385612487793
    5. ' ent' → logprob: -5.706385612487793
    6. ' integers' → logprob: -6.581385612487793
    7. 'inte' → logprob: -6.831385612487793
    8. ' nombres' → logprob: -7.831385612487793
    9. 'ints' → logprob: -8.081385612487793
    10. 'élé' → logprob: -8.956385612487793

Token 62: '`' (ID: 63)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 63: ' ent' (ID: 1121)
  Prédit: ' integers'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' integers' → logprob: -0.4476287066936493
    2. ' elements' → logprob: -1.8226287364959717
    3. ' ent' → logprob: -2.6976287364959717
    4. '<|end|>' → logprob: -2.9476287364959717
    5. ' éléments' → logprob: -3.0726287364959717
    6. 'elements' → logprob: -4.322628498077393
    7. ' d' → logprob: -5.197628498077393
    8. 'élé' → logprob: -5.572628498077393
    9. 'inte' → logprob: -6.572628498077393
    10. 'ent' → logprob: -6.572628498077393

Token 64: 'iers' (ID: 11012)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 't' → logprob: -0.017161794006824493
    2. '_' → logprob: -4.892161846160889
    3. 's' → logprob: -6.017161846160889
    4. 'u' → logprob: -6.517161846160889
    5. 'r' → logprob: -6.642161846160889
    6. '```' → logprob: -7.017161846160889
    7. '_t' → logprob: -7.392161846160889
    8. 'i' → logprob: -7.392161846160889
    9. 'e' → logprob: -7.517161846160889
    10. '`' → logprob: -8.51716136932373

Token 65: ' sur' (ID: 1512)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.638200283050537
    2. ' ' → logprob: -1.763200283050537
    3. 'n' → logprob: -2.388200283050537
    4. ' sur' → logprob: -2.513200283050537
    5. ' (' → logprob: -2.638200283050537
    6. ' n' → logprob: -2.763200283050537
    7. ' en' → logprob: -3.138200283050537
    8. '<|end|>' → logprob: -3.263200283050537
    9. ' `' → logprob: -3.388200283050537
    10. '.' → logprob: -3.388200283050537

Token 66: ' la' (ID: 557)
  Prédit: ' la'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.17867736518383026
    2. 'la' → logprob: -1.9286773204803467
    3. '<|end|>' → logprob: -5.053677558898926
    4. ' une' → logprob: -5.428677558898926
    5. 'une' → logprob: -5.428677558898926
    6. '```' → logprob: -7.428677558898926
    7. 'a' → logprob: -7.803677558898926
    8. ' ' → logprob: -7.803677558898926
    9. '_la' → logprob: -7.928677558898926
    10. 'the' → logprob: -8.428677558898926

Token 67: ' seconde' (ID: 66204)
  Prédit: 'de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'de' → logprob: -0.0034185550175607204
    2. 'ligne' → logprob: -6.753418445587158
    3. ' deuxième' → logprob: -7.128418445587158
    4. 'se' → logprob: -7.128418445587158
    5. ' seconde' → logprob: -9.128418922424316
    6. 's' → logprob: -9.128418922424316
    7. ' suivante' → logprob: -9.128418922424316
    8. ' ligne' → logprob: -9.628418922424316
    9. ' ' → logprob: -9.628418922424316
    10. '```' → logprob: -10.253418922424316

Token 68: ' ligne' (ID: 19583)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.6488102674484253
    2. ' ligne' → logprob: -1.3988102674484253
    3. '\' → logprob: -2.523810386657715
    4. 'ligne' → logprob: -2.898810386657715
    5. ' \' → logprob: -3.148810386657715
    6. ' ' → logprob: -4.148810386657715
    7. '_l' → logprob: -4.773810386657715
    8. ' ' → logprob: -5.148810386657715
    9. '   ' → logprob: -5.398810386657715
    10. ' line' → logprob: -5.523810386657715

Token 69: ' (' (ID: 350)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.27903103828430176
    2. ':' → logprob: -2.0290310382843018
    3. ')' → logprob: -3.2790310382843018
    4. '):' → logprob: -3.5290310382843018
    5. ',' → logprob: -3.9040310382843018
    6. '.' → logprob: -4.529030799865723
    7. '\n' → logprob: -5.154030799865723
    8. '<|end|>' → logprob: -6.029030799865723
    9. ' :' → logprob: -6.404030799865723
    10. '    
' → logprob: -7.404030799865723

Token 70: 'la' (ID: 1675)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.05114501714706421
    2. '):' → logprob: -3.551145076751709
    3. ' )' → logprob: -4.051145076751709
    4. '   ' → logprob: -6.426145076751709
    5. ').' → logprob: -7.426145076751709
    6. 'n' → logprob: -7.551145076751709
    7. ' ):' → logprob: -8.30114459991455
    8. '):
' → logprob: -8.92614459991455
    9. ' ' → logprob: -9.17614459991455
    10. 'a' → logprob: -9.80114459991455

Token 71: ' valeur' (ID: 41664)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8867195248603821
    2. 's' → logprob: -1.0117194652557373
    3. ' liste' → logprob: -2.7617194652557373
    4. ' )' → logprob: -3.1367194652557373
    5. 'n' → logprob: -3.3867194652557373
    6. ')' → logprob: -3.8867194652557373
    7. 'r' → logprob: -4.011719703674316
    8. 'l' → logprob: -5.261719703674316
    9. 'i' → logprob: -5.261719703674316
    10. ' n' → logprob: -5.511719703674316

Token 72: ' de' (ID: 334)
  Prédit: ' maximale'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' maximale' → logprob: -0.21243920922279358
    2. ' des' → logprob: -2.2124392986297607
    3. ' maximum' → logprob: -3.7124392986297607
    4. 's' → logprob: -3.7124392986297607
    5. ' maximal' → logprob: -4.087439060211182
    6. ' de' → logprob: -5.712439060211182
    7. ' max' → logprob: -5.837439060211182
    8. ' ' → logprob: -6.087439060211182
    9. ')' → logprob: -6.587439060211182
    10. ' s' → logprob: -6.712439060211182

Token 73: ' cette' (ID: 7696)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.060748908668756485
    2. ' k' → logprob: -4.435749053955078
    3. ' l' → logprob: -4.435749053955078
    4. ' `' → logprob: -4.560749053955078
    5. '`' → logprob: -4.810749053955078
    6. ' la' → logprob: -4.935749053955078
    7. 'n' → logprob: -4.935749053955078
    8. ' ' → logprob: -7.435749053955078
    9. 'l' → logprob: -7.560749053955078
    10. 'k' → logprob: -8.435749053955078

Token 74: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.08234043419361115
    2. ' ' → logprob: -3.7073404788970947
    3. ')' → logprob: -4.207340240478516
    4. 'liste' → logprob: -4.457340240478516
    5. ' )' → logprob: -4.707340240478516
    6. ' list' → logprob: -5.207340240478516
    7. 's' → logprob: -5.957340240478516
    8. ' `' → logprob: -6.832340240478516
    9. ' ligne' → logprob: -6.957340240478516
    10. 'l' → logprob: -7.082340240478516

Token 75: ' n' (ID: 297)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6909142136573792
    2. ' est' → logprob: -1.6909141540527344
    3. ' des' → logprob: -2.1909141540527344
    4. 's' → logprob: -2.8159141540527344
    5. ' )' → logprob: -3.5659141540527344
    6. ' n' → logprob: -3.5659141540527344
    7. 'n' → logprob: -3.9409141540527344
    8. ' `' → logprob: -4.690914154052734
    9. ').' → logprob: -4.815914154052734
    10. ' peut' → logprob: -4.940914154052734

Token 76: ''est' (ID: 6616)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.2575289309024811
    2. '')' → logprob: -2.2575290203094482
    3. ''est' → logprob: -2.6325290203094482
    4. ''a' → logprob: -3.3825290203094482
    5. 'a' → logprob: -5.507528781890869
    6. ''>' → logprob: -5.632528781890869
    7. 'e' → logprob: -6.632528781890869
    8. ''ont' → logprob: -6.757528781890869
    9. 'é' → logprob: -6.882528781890869
    10. ')' → logprob: -6.882528781890869

Token 77: ' pas' (ID: 2173)
  Prédit: 'pas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pas' → logprob: -0.028172524645924568
    2. ' pas' → logprob: -3.903172492980957
    3. '_pas' → logprob: -6.653172492980957
    4. ')' → logprob: -6.903172492980957
    5. 'p' → logprob: -7.278172492980957
    6. ''' → logprob: -7.403172492980957
    7. 's' → logprob: -7.653172492980957
    8. 'on' → logprob: -7.778172492980957
    9. 't' → logprob: -7.903172492980957
    10. 'é' → logprob: -8.153172492980957

Token 78: ' utilisée' (ID: 106548)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.057658314704895
    2. 'pas' → logprob: -1.182658314704895
    3. ' pas' → logprob: -2.4326581954956055
    4. '>' → logprob: -2.5576581954956055
    5. '"""' → logprob: -3.9326581954956055
    6. 's' → logprob: -4.0576581954956055
    7. 'f' → logprob: -4.4326581954956055
    8. ']' → logprob: -4.4326581954956055
    9. 'dé' → logprob: -4.8076581954956055
    10. ' nécessaire' → logprob: -4.9326581954956055

Token 79: ' dans' (ID: 2671)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.03802725300192833
    2. ').' → logprob: -4.538027286529541
    3. ' dans' → logprob: -5.163027286529541
    4. ' pour' → logprob: -5.288027286529541
    5. 'dans' → logprob: -5.413027286529541
    6. ')
' → logprob: -5.913027286529541
    7. 'pour' → logprob: -5.913027286529541
    8. '.' → logprob: -6.163027286529541
    9. ' )' → logprob: -6.538027286529541
    10. '   ' → logprob: -7.788027286529541

Token 80: ' le' (ID: 505)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -1.2098296880722046
    2. 'la' → logprob: -1.3348296880722046
    3. ' le' → logprob: -1.5848296880722046
    4. 'le' → logprob: -2.334829807281494
    5. 'l' → logprob: -3.334829807281494
    6. ' cette' → logprob: -3.334829807281494
    7. ' ce' → logprob: -3.834829807281494
    8. ' ' → logprob: -4.459829807281494
    9. ' l' → logprob: -5.084829807281494
    10. '   ' → logprob: -5.084829807281494

Token 81: ' calcul' (ID: 7559)
  Prédit: 'calcul'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'calcul' → logprob: -0.22675439715385437
    2. 'trait' → logprob: -2.1017544269561768
    3. ' calcul' → logprob: -3.6017544269561768
    4. ' traitement' → logprob: -4.226754188537598
    5. 'code' → logprob: -4.476754188537598
    6. 'cal' → logprob: -5.101754188537598
    7. 'fonction' → logprob: -5.226754188537598
    8. 'process' → logprob: -5.851754188537598
    9. ' code' → logprob: -5.976754188537598
    10. ')' → logprob: -6.726754188537598

Token 82: ').

' (ID: 3991)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.01620117388665676
    2. '   ' → logprob: -4.391201019287109
    3. '.' → logprob: -6.766201019287109
    4. ')
' → logprob: -7.391201019287109
    5. ').' → logprob: -7.516201019287109
    6. ' ' → logprob: -7.766201019287109
    7. ' )' → logprob: -8.26620101928711
    8. '"""' → logprob: -8.51620101928711
    9. ',' → logprob: -9.14120101928711
    10. '
' → logprob: -9.51620101928711

Token 83: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08751770853996277
    2. '"""' → logprob: -2.712517738342285
    3. ')' → logprob: -4.837517738342285
    4. '```' → logprob: -5.337517738342285
    5. '"' → logprob: -6.087517738342285
    6. '`' → logprob: -7.837517738342285
    7. 'n' → logprob: -7.837517738342285
    8. '\n' → logprob: -8.087517738342285
    9. '""' → logprob: -8.462517738342285
    10. '"""
' → logprob: -8.587517738342285

Token 84: ' Log' (ID: 4309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04603061079978943
    2. 'n' → logprob: -3.1710305213928223
    3. '```' → logprob: -6.921030521392822
    4. '"""' → logprob: -7.046030521392822
    5. '\n' → logprob: -8.42103099822998
    6. '    
' → logprob: -8.67103099822998
    7. ')' → logprob: -8.79603099822998
    8. '`' → logprob: -9.17103099822998
    9. '    ' → logprob: -9.42103099822998
    10. '#' → logprob: -9.67103099822998

Token 85: 'ique' (ID: 2222)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.4665292203426361
    2. 'ique' → logprob: -1.3415292501449585
    3. 'ic' → logprob: -3.216529130935669
    4. 'e' → logprob: -4.091529369354248
    5. 's' → logprob: -4.341529369354248
    6. 'iquement' → logprob: -4.341529369354248
    7. 'ging' → logprob: -4.716529369354248
    8. 'ical' → logprob: -5.716529369354248
    9. 'u' → logprob: -5.716529369354248
    10. 'n' → logprob: -5.841529369354248

Token 86: ' :
' (ID: 10039)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.004409670829773
    2. ' :' → logprob: -1.129409670829773
    3. ':' → logprob: -1.504409670829773
    4. ' de' → logprob: -3.8794097900390625
    5. ' :
' → logprob: -4.1294097900390625
    6. '    
' → logprob: -4.7544097900390625
    7. ' 
' → logprob: -4.8794097900390625
    8. ' ' → logprob: -5.3794097900390625
    9. '     
' → logprob: -5.5044097900390625
    10. ':
' → logprob: -5.8794097900390625

Token 87: '     ' (ID: 530)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02511194907128811
    2. '    ' → logprob: -4.150112152099609
    3. ' 
' → logprob: -6.275112152099609
    4. '    
' → logprob: -6.275112152099609
    5. ' n' → logprob: -7.150112152099609
    6. 'n' → logprob: -7.150112152099609
    7. '     
' → logprob: -7.275112152099609
    8. ' """' → logprob: -7.775112152099609
    9. ' """
' → logprob: -8.15011215209961
    10. ' `' → logprob: -8.52511215209961

Token 88: ' -' (ID: 533)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.22389468550682068
    2. ' n' → logprob: -2.7238945960998535
    3. '   ' → logprob: -3.2238945960998535
    4. ' if' → logprob: -3.4738945960998535
    5. '"""
' → logprob: -3.9738945960998535
    6. 'if' → logprob: -4.5988945960998535
    7. ' """
' → logprob: -5.4738945960998535
    8. 's' → logprob: -5.5988945960998535
    9. '"""' → logprob: -5.9738945960998535
    10. 'i' → logprob: -6.0988945960998535

Token 89: ' À' (ID: 27643)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.9029831290245056
    2. 'k' → logprob: -2.5279831886291504
    3. 'n' → logprob: -2.5279831886291504
    4. ' Si' → logprob: -2.5279831886291504
    5. 'Si' → logprob: -2.6529831886291504
    6. ' n' → logprob: -2.7779831886291504
    7. ' si' → logprob: -3.1529831886291504
    8. 'if' → logprob: -3.2779831886291504
    9. '   ' → logprob: -3.2779831886291504
    10. ' k' → logprob: -3.7779831886291504

Token 90: ' chaque' (ID: 21194)
  Prédit: 'cha'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cha' → logprob: -0.6532427668571472
    2. ' chaque' → logprob: -0.7782427668571472
    3. 'ch' → logprob: -4.278242588043213
    4. ' cha' → logprob: -6.153242588043213
    5. ' partir' → logprob: -7.028242588043213
    6. '   ' → logprob: -7.403242588043213
    7. 'c' → logprob: -7.653242588043213
    8. ' ' → logprob: -8.278243064880371
    9. 'e' → logprob: -8.278243064880371
    10. 'Chaque' → logprob: -8.403243064880371

Token 91: ' étape' (ID: 83661)
  Prédit: ' étape'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' étape' → logprob: -0.03609681501984596
    2. ' step' → logprob: -4.411097049713135
    3. ' ' → logprob: -4.536097049713135
    4. ' it' → logprob: -5.536097049713135
    5. 'ét' → logprob: -6.661097049713135
    6. ' pas' → logprob: -6.911097049713135
    7. 'é' → logprob: -6.911097049713135
    8. ' étapes' → logprob: -7.411097049713135
    9. ' ligne' → logprob: -7.661097049713135
    10. ' é' → logprob: -7.786097049713135

Token 92: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.008750018663704395
    2. ' ,' → logprob: -5.008749961853027
    3. ' on' → logprob: -6.383749961853027
    4. '   ' → logprob: -9.133749961853027
    5. ' ' → logprob: -9.633749961853027
    6. ',
' → logprob: -10.883749961853027
    7. ' de' → logprob: -11.258749961853027
    8. 'on' → logprob: -11.383749961853027
    9. '  ' → logprob: -11.383749961853027
    10. 'l' → logprob: -11.383749961853027

Token 93: ' on' (ID: 402)
  Prédit: ' on'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' on' → logprob: -0.096598319709301
    2. ' l' → logprob: -3.7215983867645264
    3. ' k' → logprob: -3.8465983867645264
    4. 'k' → logprob: -5.096598148345947
    5. ' vous' → logprob: -5.096598148345947
    6. ' si' → logprob: -5.221598148345947
    7. ' soit' → logprob: -5.346598148345947
    8. '   ' → logprob: -5.346598148345947
    9. 'on' → logprob: -5.596598148345947
    10. ' il' → logprob: -5.721598148345947

Token 94: ' peut' (ID: 9216)
  Prédit: ' peut'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' peut' → logprob: -0.17943042516708374
    2. 'pe' → logprob: -2.8044304847717285
    3. ' peux' → logprob: -3.6794304847717285
    4. ' a' → logprob: -3.8044304847717285
    5. 'p' → logprob: -4.0544304847717285
    6. 'a' → logprob: -4.9294304847717285
    7. ' p' → logprob: -5.8044304847717285
    8. 'n' → logprob: -5.9294304847717285
    9. ' prend' → logprob: -5.9294304847717285
    10. ' can' → logprob: -6.0544304847717285

Token 95: ' traiter' (ID: 105852)
  Prédit: ' traiter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' traiter' → logprob: -0.25341224670410156
    2. ' retirer' → logprob: -3.0034122467041016
    3. ' supprimer' → logprob: -3.3784122467041016
    4. ' soit' → logprob: -3.8784122467041016
    5. ' process' → logprob: -4.003412246704102
    6. ' ' → logprob: -4.503412246704102
    7. ' prendre' → logprob: -4.503412246704102
    8. 'process' → logprob: -4.628412246704102
    9. ' augmenter' → logprob: -4.753412246704102
    10. ' enlever' → logprob: -4.753412246704102

Token 96: ' jusqu' (ID: 21961)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.3658435642719269
    2. ' au' → logprob: -2.3658435344696045
    3. 'k' → logprob: -2.9908435344696045
    4. ' up' → logprob: -3.1158435344696045
    5. ' soit' → logprob: -3.1158435344696045
    6. ' ' → logprob: -3.2408435344696045
    7. 'au' → logprob: -4.615843772888184
    8. ' either' → logprob: -4.990843772888184
    9. ' un' → logprob: -5.490843772888184
    10. ' jusqu' → logprob: -5.740843772888184

Token 97: ''à' (ID: 33688)
  Prédit: ' à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.28862494230270386
    2. ''à' → logprob: -1.7886250019073486
    3. ' ' → logprob: -3.2886250019073486
    4. '   ' → logprob: -4.4136247634887695
    5. '  ' → logprob: -4.4136247634887695
    6. '’à' → logprob: -5.5386247634887695
    7. ''' → logprob: -5.7886247634887695
    8. 'à' → logprob: -5.7886247634887695
    9. ' de' → logprob: -5.9136247634887695
    10. '`' → logprob: -6.0386247634887695

Token 98: ' `' (ID: 2700)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.11359567195177078
    2. 'k' → logprob: -2.238595724105835
    3. ' ' → logprob: -7.488595485687256
    4. ' min' → logprob: -8.738595962524414
    5. 'min' → logprob: -10.613595962524414
    6. '2' → logprob: -11.738595962524414
    7. ' `' → logprob: -12.488595962524414
    8. '`' → logprob: -12.613595962524414
    9. '1' → logprob: -12.738595962524414
    10. ' n' → logprob: -13.363595962524414

Token 99: 'k' (ID: 74)
  Prédit: 'k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.4743528366088867
    2. ' k' → logprob: -0.9743528366088867
    3. ' ' → logprob: -8.349352836608887
    4. '1' → logprob: -10.724352836608887
    5. 'min' → logprob: -12.599352836608887
    6. ' min' → logprob: -12.599352836608887
    7. '2' → logprob: -12.974352836608887
    8. '`' → logprob: -13.599352836608887
    9. '	k' → logprob: -13.724352836608887
    10. 'K' → logprob: -14.161852836608887

Token 100: '`' (ID: 63)
  Prédit: ' `'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' `' → logprob: -0.3807511329650879
    2. '`' → logprob: -1.255751132965088
    3. ' *' → logprob: -4.630751132965088
    4. ' éléments' → logprob: -5.255751132965088
    5. '```' → logprob: -5.380751132965088
    6. ' -' → logprob: -6.005751132965088
    7. ' ```' → logprob: -6.255751132965088
    8. '-' → logprob: -6.630751132965088
    9. ' +' → logprob: -6.880751132965088
    10. '+' → logprob: -7.130751132965088

Token 101: ' nouveaux' (ID: 43964)
  Prédit: ' éléments'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' éléments' → logprob: -0.17518828809261322
    2. 'élé' → logprob: -1.9251883029937744
    3. ' elements' → logprob: -5.050188064575195
    4. ' ' → logprob: -5.550188064575195
    5. ' élément' → logprob: -7.050188064575195
    6. 'elements' → logprob: -7.425188064575195
    7. ' espaces' → logprob: -7.425188064575195
    8. '<|end|>' → logprob: -7.550188064575195
    9. ' )' → logprob: -8.300188064575195
    10. '_' → logprob: -8.737688064575195

Token 102: ' éléments' (ID: 57375)
  Prédit: ' éléments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' éléments' → logprob: -0.23147442936897278
    2. 'élé' → logprob: -1.6064743995666504
    3. ' elements' → logprob: -5.85647439956665
    4. ' ' → logprob: -6.35647439956665
    5. ' élément' → logprob: -7.60647439956665
    6. ' espaces' → logprob: -8.356474876403809
    7. ' él' → logprob: -8.481474876403809
    8. 'elements' → logprob: -8.731474876403809
    9. ' é' → logprob: -9.481474876403809
    10. 'é' → logprob: -9.981474876403809

Token 103: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.40184080600738525
    2. '.' → logprob: -1.5268408060073853
    3. '   ' → logprob: -2.2768406867980957
    4. ' ,' → logprob: -5.276840686798096
    5. ' (' → logprob: -6.651840686798096
    6. ',
' → logprob: -7.026840686798096
    7. ')' → logprob: -7.526840686798096
    8. 'def' → logprob: -7.526840686798096
    9. ' de' → logprob: -8.276841163635254
    10. ' ' → logprob: -8.526841163635254

Token 104: ' mais' (ID: 2899)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1585029512643814
    2. ',' → logprob: -3.1585030555725098
    3. ' et' → logprob: -4.03350305557251
    4. '\n' → logprob: -4.40850305557251
    5. '.' → logprob: -4.53350305557251
    6. ' ' → logprob: -4.65850305557251
    7. '    ' → logprob: -4.90850305557251
    8. ' 
' → logprob: -5.28350305557251
    9. '    
' → logprob: -5.28350305557251
    10. ' ou' → logprob: -5.78350305557251

Token 105: ' le' (ID: 505)
  Prédit: ' au'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' au' → logprob: -0.9368578791618347
    2. ' seulement' → logprob: -1.0618579387664795
    3. ' on' → logprob: -2.4368579387664795
    4. ' uniquement' → logprob: -2.5618579387664795
    5. 'au' → logprob: -3.4368579387664795
    6. ' il' → logprob: -4.0618577003479
    7. ' ' → logprob: -4.5618577003479
    8. 'on' → logprob: -4.9368577003479
    9. ' only' → logprob: -5.5618577003479
    10. '   ' → logprob: -5.5618577003479

Token 106: ' premier' (ID: 15506)
  Prédit: ' reste'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' reste' → logprob: -1.2916713953018188
    2. ' nombre' → logprob: -1.6666713953018188
    3. ' premier' → logprob: -1.6666713953018188
    4. ' k' → logprob: -2.5416712760925293
    5. ' code' → logprob: -2.7916712760925293
    6. 'nombre' → logprob: -3.1666712760925293
    7. 'reste' → logprob: -3.5416712760925293
    8. 'k' → logprob: -3.6666712760925293
    9. ' dernier' → logprob: -4.041671276092529
    10. 'n' → logprob: -4.166671276092529

Token 107: ' élément' (ID: 99627)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.8747180700302124
    2. ' élément' → logprob: -1.3747180700302124
    3. ' ' → logprob: -2.249718189239502
    4. 's' → logprob: -3.499718189239502
    5. ' traité' → logprob: -3.624718189239502
    6. ' traitement' → logprob: -3.874718189239502
    7. ' espace' → logprob: -3.999718189239502
    8. '_' → logprob: -4.124718189239502
    9. ' processed' → logprob: -4.249718189239502
    10. '   ' → logprob: -4.874718189239502

Token 108: ' doit' (ID: 21822)
  Prédit: ' traité'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' traité' → logprob: -0.7745175957679749
    2. ' n' → logprob: -1.64951753616333
    3. ' est' → logprob: -2.14951753616333
    4. ' à' → logprob: -2.52451753616333
    5. ' peut' → logprob: -3.27451753616333
    6. ' de' → logprob: -3.52451753616333
    7. ' du' → logprob: -4.14951753616333
    8. 'n' → logprob: -4.52451753616333
    9. ' doit' → logprob: -4.89951753616333
    10. ' trait' → logprob: -5.52451753616333

Token 109: ' être' (ID: 9104)
  Prédit: ' être'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' être' → logprob: -0.10140837728977203
    2. 'être' → logprob: -2.6014084815979004
    3. ' ' → logprob: -4.9764084815979
    4. 'ê' → logprob: -5.6014084815979
    5. ''être' → logprob: -5.8514084815979
    6. 'êt' → logprob: -6.2264084815979
    7. ' rester' → logprob: -6.3514084815979
    8. ' etre' → logprob: -7.2264084815979
    9. ' toujours' → logprob: -7.2264084815979
    10. '’être' → logprob: -7.6014084815979

Token 110: ' traité' (ID: 160836)
  Prédit: 'trait'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'trait' → logprob: -1.4342330694198608
    2. ' traité' → logprob: -1.5592330694198608
    3. 'dé' → logprob: -1.6842330694198608
    4. ' déjà' → logprob: -2.5592331886291504
    5. 'le' → logprob: -3.0592331886291504
    6. 're' → logprob: -3.1842331886291504
    7. ' retrait' → logprob: -3.8092331886291504
    8. 'ré' → logprob: -3.8092331886291504
    9. ' le' → logprob: -4.05923318862915
    10. ' trait' → logprob: -4.30923318862915

Token 111: ' seul' (ID: 33041)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -1.1682876348495483
    2. ',' → logprob: -1.6682876348495483
    3. ' ' → logprob: -2.293287754058838
    4. ' au' → logprob: -2.293287754058838
    5. '.' → logprob: -2.418287754058838
    6. ' ,' → logprob: -3.293287754058838
    7. ' à' → logprob: -3.543287754058838
    8. ' (' → logprob: -4.293287754058838
    9. ')' → logprob: -4.668287754058838
    10. ' immédiatement' → logprob: -4.668287754058838

Token 112: '.
' (ID: 558)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.8077335357666016
    2. ',' → logprob: -1.0577335357666016
    3. ')' → logprob: -1.8077335357666016
    4. ':' → logprob: -4.432733535766602
    5. '   ' → logprob: -5.307733535766602
    6. ' ' → logprob: -5.432733535766602
    7. '\n' → logprob: -5.682733535766602
    8. ',
' → logprob: -6.057733535766602
    9. '):' → logprob: -6.432733535766602
    10. '  
' → logprob: -6.682733535766602

Token 113: '     ' (ID: 530)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.049908965826034546
    2. ')' → logprob: -4.0499091148376465
    3. '    
' → logprob: -4.7999091148376465
    4. ' 
' → logprob: -5.7999091148376465
    5. '\n' → logprob: -5.9249091148376465
    6. '\' → logprob: -5.9249091148376465
    7. ':' → logprob: -5.9249091148376465
    8. ',' → logprob: -6.2999091148376465
    9. '  
' → logprob: -6.4249091148376465
    10. '"' → logprob: -6.5499091148376465

Token 114: ' -' (ID: 533)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04587622359395027
    2. ')' → logprob: -4.5458760261535645
    3. '\' → logprob: -4.6708760261535645
    4. '\n' → logprob: -4.7958760261535645
    5. ' 
' → logprob: -5.9208760261535645
    6. 'n' → logprob: -6.0458760261535645
    7. '"' → logprob: -6.1708760261535645
    8. '    
' → logprob: -6.5458760261535645
    9. '```' → logprob: -6.6708760261535645
    10. 'def' → logprob: -6.9208760261535645

Token 115: ' Après' (ID: 47562)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.032022394239902496
    2. 'def' → logprob: -4.282022476196289
    3. ' def' → logprob: -4.907022476196289
    4. ' if' → logprob: -6.282022476196289
    5. ' n' → logprob: -6.407022476196289
    6. ' ' → logprob: -6.407022476196289
    7. 'n' → logprob: -6.907022476196289
    8. ' ' → logprob: -7.282022476196289
    9. '    
' → logprob: -7.532022476196289
    10. '
' → logprob: -7.782022476196289

Token 116: ' avoir' (ID: 16595)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.9692311882972717
    2. ' avoir' → logprob: -1.094231128692627
    3. ' le' → logprob: -1.469231128692627
    4. ' cette' → logprob: -3.844231128692627
    5. 'le' → logprob: -4.844231128692627
    6. 'la' → logprob: -4.844231128692627
    7. 'avoir' → logprob: -5.094231128692627
    8. ' l' → logprob: -5.844231128692627
    9. 'l' → logprob: -6.094231128692627
    10. '```' → logprob: -7.219231128692627

Token 117: ' traité' (ID: 160836)
  Prédit: 'trait'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'trait' → logprob: -0.39096513390541077
    2. ' traité' → logprob: -1.7659651041030884
    3. 'process' → logprob: -2.140965223312378
    4. 'tra' → logprob: -4.140964984893799
    5. ' traiter' → logprob: -5.015964984893799
    6. ' trait' → logprob: -5.140964984893799
    7. 'proces' → logprob: -6.515964984893799
    8. ' process' → logprob: -6.640964984893799
    9. 'processed' → logprob: -7.640964984893799
    10. ' tra' → logprob: -7.765964984893799

Token 118: ' le' (ID: 505)
  Prédit: ' le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.4580852687358856
    2. ' un' → logprob: -1.208085298538208
    3. 'le' → logprob: -3.708085298538208
    4. 'au' → logprob: -4.833085060119629
    5. 'un' → logprob: -5.208085060119629
    6. ' les' → logprob: -5.333085060119629
    7. ' k' → logprob: -5.333085060119629
    8. ' ' → logprob: -5.333085060119629
    9. ' tous' → logprob: -5.333085060119629
    10. ' au' → logprob: -5.708085060119629

Token 119: ' premier' (ID: 15506)
  Prédit: 'prem'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prem' → logprob: -0.2845410406589508
    2. ' premier' → logprob: -1.4095410108566284
    3. 'first' → logprob: -7.284541130065918
    4. ' ' → logprob: -7.659541130065918
    5. ' first' → logprob: -7.909541130065918
    6. 'élé' → logprob: -8.284541130065918
    7. 'se' → logprob: -8.409541130065918
    8. '1' → logprob: -8.534541130065918
    9. 'dern' → logprob: -8.784541130065918
    10. 's' → logprob: -9.034541130065918

Token 120: ' élément' (ID: 99627)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.824885368347168
    2. ' élément' → logprob: -1.324885368347168
    3. '_' → logprob: -1.449885368347168
    4. ' ' → logprob: -3.949885368347168
    5. ' _' → logprob: -4.074885368347168
    6. ' element' → logprob: -4.449885368347168
    7. ' espace' → logprob: -6.199885368347168
    8. 'element' → logprob: -6.199885368347168
    9. ' )' → logprob: -6.699885368347168
    10. ' éléments' → logprob: -6.824885368347168

Token 121: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.020685996860265732
    2. ' ,' → logprob: -3.895685911178589
    3. 's' → logprob: -10.145686149597168
    4. ',
' → logprob: -10.395686149597168
    5. ' à' → logprob: -11.145686149597168
    6. ' ' → logprob: -11.645686149597168
    7. '.' → logprob: -11.770686149597168
    8. ' (' → logprob: -12.020686149597168
    9. '   ' → logprob: -12.520686149597168
    10. ' de' → logprob: -12.520686149597168

Token 122: ' on' (ID: 402)
  Prédit: ' on'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' on' → logprob: -0.0565650574862957
    2. 'on' → logprob: -3.806565046310425
    3. ' il' → logprob: -4.681565284729004
    4. ' chaque' → logprob: -4.681565284729004
    5. ' k' → logprob: -5.181565284729004
    6. ' le' → logprob: -6.431565284729004
    7. ' la' → logprob: -6.681565284729004
    8. ' n' → logprob: -6.806565284729004
    9. ' l' → logprob: -7.181565284729004
    10. 'le' → logprob: -7.681565284729004

Token 123: ' fait' (ID: 7473)
  Prédit: ' peut'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' peut' → logprob: -0.34381815791130066
    2. 'pe' → logprob: -2.093818187713623
    3. ' doit' → logprob: -3.218818187713623
    4. ' traite' → logprob: -3.218818187713623
    5. ' continue' → logprob: -3.468818187713623
    6. ' peux' → logprob: -4.843818187713623
    7. 'do' → logprob: -4.968818187713623
    8. 'tra' → logprob: -5.468818187713623
    9. 'p' → logprob: -5.468818187713623
    10. ' ' → logprob: -5.718818187713623

Token 124: ' des' (ID: 731)
  Prédit: ' une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.7123498916625977
    2. ' un' → logprob: -1.8373498916625977
    3. ' au' → logprob: -2.7123498916625977
    4. ' ' → logprob: -2.8373498916625977
    5. 'un' → logprob: -3.0873498916625977
    6. 'une' → logprob: -3.3373498916625977
    7. 'au' → logprob: -3.4623498916625977
    8. ' appel' → logprob: -4.212349891662598
    9. 's' → logprob: -4.462349891662598
    10. ' attention' → logprob: -4.962349891662598

Token 125: ' groupes' (ID: 72206)
  Prédit: ' étapes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' étapes' → logprob: -0.06697269529104233
    2. ' steps' → logprob: -4.441972732543945
    3. ' passages' → logprob: -4.816972732543945
    4. ' pas' → logprob: -4.941972732543945
    5. 'pas' → logprob: -4.941972732543945
    6. ' traitements' → logprob: -5.316972732543945
    7. ' espaces' → logprob: -5.816972732543945
    8. 's' → logprob: -5.816972732543945
    9. 'steps' → logprob: -6.316972732543945
    10. ' groupes' → logprob: -6.691972732543945

Token 126: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.025324678048491478
    2. ' d' → logprob: -3.775324583053589
    3. 'de' → logprob: -6.775324821472168
    4. ' ' → logprob: -7.525324821472168
    5. ' supplémentaires' → logprob: -9.400324821472168
    6. 'd' → logprob: -9.525324821472168
    7. ' of' → logprob: -9.900324821472168
    8. '   ' → logprob: -10.650324821472168
    9. '_de' → logprob: -10.900324821472168
    10. '_' → logprob: -10.900324821472168

Token 127: ' taille' (ID: 41644)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.47436946630477905
    2. 'k' → logprob: -0.974369466304779
    3. 'size' → logprob: -10.099369049072266
    4. ' taille' → logprob: -10.099369049072266
    5. '(k' → logprob: -10.224369049072266
    6. ' (' → logprob: -10.224369049072266
    7. 'tail' → logprob: -10.599369049072266
    8. '`' → logprob: -10.724369049072266
    9. 'au' → logprob: -10.849369049072266
    10. ' ' → logprob: -10.974369049072266

Token 128: ' jusqu' (ID: 21961)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.1002727672457695
    2. 'k' → logprob: -2.3502726554870605
    3. '	k' → logprob: -10.975273132324219
    4. ' ' → logprob: -11.350273132324219
    5. ' (' → logprob: -12.350273132324219
    6. '(k' → logprob: -12.475273132324219
    7. ' `' → logprob: -12.725273132324219
    8. ' ' → logprob: -12.725273132324219
    9. ' au' → logprob: -12.850273132324219
    10. '<|end|>' → logprob: -13.100273132324219

Token 129: ''à' (ID: 33688)
  Prédit: ''à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''à' → logprob: -0.0018422520952299237
    2. 'à' → logprob: -6.751842021942139
    3. '’à' → logprob: -8.001842498779297
    4. ''' → logprob: -8.376842498779297
    5. ' à' → logprob: -10.126842498779297
    6. ''a' → logprob: -10.376842498779297
    7. '   ' → logprob: -11.251842498779297
    8. 'a' → logprob: -11.876842498779297
    9. ''au' → logprob: -11.876842498779297
    10. '```' → logprob: -12.751842498779297

Token 130: ' `' (ID: 2700)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.20142066478729248
    2. ' k' → logprob: -1.7014206647872925
    3. '1' → logprob: -12.576420783996582
    4. ' ' → logprob: -13.326420783996582
    5. '`' → logprob: -14.076420783996582
    6. '(k' → logprob: -14.951420783996582
    7. ' ' → logprob: -15.201420783996582
    8. '	k' → logprob: -15.326420783996582
    9. '```' → logprob: -16.076419830322266
    10. '{k' → logprob: -16.326419830322266

Token 131: 'k' (ID: 74)
  Prédit: 'k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.20154431462287903
    2. ' k' → logprob: -1.7015442848205566
    3. '1' → logprob: -9.451544761657715
    4. '`' → logprob: -10.576544761657715
    5. ' ' → logprob: -11.201544761657715
    6. '2' → logprob: -12.451544761657715
    7. ' `' → logprob: -12.951544761657715
    8. '	k' → logprob: -13.701544761657715
    9. '{k' → logprob: -13.951544761657715
    10. '(k' → logprob: -14.201544761657715

Token 132: '`' (ID: 63)
  Prédit: '`'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '`' → logprob: -0.3303952217102051
    2. ')' → logprob: -2.330395221710205
    3. ')`' → logprob: -2.455395221710205
    4. ' `' → logprob: -3.205395221710205
    5. '`.' → logprob: -4.205395221710205
    6. '```' → logprob: -4.580395221710205
    7. '`,' → logprob: -4.830395221710205
    8. '`)' → logprob: -5.080395221710205
    9. '+' → logprob: -5.955395221710205
    10. ' )' → logprob: -6.205395221710205

Token 133: ' pour' (ID: 1930)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.44016149640083313
    2. ',' → logprob: -2.0651614665985107
    3. ' ,' → logprob: -2.0651614665985107
    4. ' .' → logprob: -2.8151614665985107
    5. ')' → logprob: -3.9401614665985107
    6. ' )' → logprob: -4.81516170501709
    7. ' supplémentaires' → logprob: -6.06516170501709
    8. ' ' → logprob: -6.19016170501709
    9. '   ' → logprob: -6.19016170501709
    10. ').' → logprob: -6.94016170501709

Token 134: ' traiter' (ID: 105852)
  Prédit: ' traiter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' traiter' → logprob: -0.20829766988754272
    2. 'trait' → logprob: -1.8332977294921875
    3. 'tra' → logprob: -4.7082977294921875
    4. ' continuer' → logprob: -5.7082977294921875
    5. ' tra' → logprob: -5.9582977294921875
    6. 'process' → logprob: -6.2082977294921875
    7. ' trait' → logprob: -6.2082977294921875
    8. ' le' → logprob: -6.4582977294921875
    9. ' la' → logprob: -6.8332977294921875
    10. ' les' → logprob: -7.3332977294921875

Token 135: ' tous' (ID: 10688)
  Prédit: ' les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.1840095818042755
    2. ' la' → logprob: -3.059009552001953
    3. ' le' → logprob: -3.184009552001953
    4. ' ' → logprob: -3.809009552001953
    5. ' tous' → logprob: -3.809009552001953
    6. 'les' → logprob: -4.684009552001953
    7. '.' → logprob: -5.184009552001953
    8. ' l' → logprob: -5.309009552001953
    9. 'le' → logprob: -5.559009552001953
    10. ' un' → logprob: -6.059009552001953

Token 136: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.049449678510427475
    2. 'les' → logprob: -3.0494496822357178
    3. ' ' → logprob: -8.674449920654297
    4. ' la' → logprob: -8.799449920654297
    5. ' le' → logprob: -9.424449920654297
    6. 'l' → logprob: -9.549449920654297
    7. ' ceux' → logprob: -9.799449920654297
    8. '```' → logprob: -9.799449920654297
    9. ' l' → logprob: -9.924449920654297
    10. 's' → logprob: -10.174449920654297

Token 137: ' autres' (ID: 18701)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.4084404706954956
    2. ' éléments' → logprob: -1.1584404706954956
    3. ' autres' → logprob: -4.408440589904785
    4. ' suivants' → logprob: -5.783440589904785
    5. ' rest' → logprob: -6.283440589904785
    6. 'rest' → logprob: -6.783440589904785
    7. ' elements' → logprob: -6.908440589904785
    8. 'elements' → logprob: -7.658440589904785
    9. 'remaining' → logprob: -8.283440589904785
    10. ' remaining' → logprob: -8.533440589904785

Token 138: '.
' (ID: 558)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.1590065062046051
    2. ' éléments' → logprob: -3.2840065956115723
    3. 's' → logprob: -3.4090065956115723
    4. ',' → logprob: -4.034006595611572
    5. '.
' → logprob: -4.409006595611572
    6. '   ' → logprob: -4.534006595611572
    7. ' lignes' → logprob: -5.034006595611572
    8. 'def' → logprob: -5.534006595611572
    9. '```' → logprob: -5.534006595611572
    10. ' ,' → logprob: -5.784006595611572

Token 139: '     ' (ID: 530)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.051718320697546005
    2. ':' → logprob: -4.926718235015869
    3. '"""' → logprob: -4.926718235015869
    4. '\' → logprob: -5.176718235015869
    5. '\n' → logprob: -5.176718235015869
    6. ')' → logprob: -5.301718235015869
    7. ' 
' → logprob: -5.426718235015869
    8. '```' → logprob: -5.551718235015869
    9. '    
' → logprob: -6.176718235015869
    10. '  
' → logprob: -6.426718235015869

Token 140: ' -' (ID: 533)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04416815564036369
    2. '"""' → logprob: -3.66916823387146
    3. '"' → logprob: -5.169167995452881
    4. '"""
' → logprob: -5.544167995452881
    5. '\n' → logprob: -6.419167995452881
    6. 'n' → logprob: -6.919167995452881
    7. '`' → logprob: -7.044167995452881
    8. '```' → logprob: -7.169167995452881
    9. ')' → logprob: -7.294167995452881
    10. ' """
' → logprob: -7.669167995452881

Token 141: ' Le' (ID: 2018)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5402730107307434
    2. ' n' → logprob: -2.1652729511260986
    3. ' if' → logprob: -2.5402729511260986
    4. 'def' → logprob: -2.6652729511260986
    5. 'n' → logprob: -2.9152729511260986
    6. ' return' → logprob: -3.6652729511260986
    7. 'return' → logprob: -4.540273189544678
    8. ' on' → logprob: -4.915273189544678
    9. ' def' → logprob: -4.915273189544678
    10. 'if' → logprob: -5.040273189544678

Token 142: ' programme' (ID: 18190)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.616176962852478
    2. ' n' → logprob: -1.866176962852478
    3. ' first' → logprob: -1.866176962852478
    4. ' premier' → logprob: -2.8661770820617676
    5. ' if' → logprob: -3.6161770820617676
    6. ' return' → logprob: -4.116177082061768
    7. ' total' → logprob: -4.991177082061768
    8. ' nombre' → logprob: -4.991177082061768
    9. ' steps' → logprob: -4.991177082061768
    10. 'if' → logprob: -5.366177082061768

Token 143: ' calc' (ID: 25691)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' continue' → logprob: -1.1365728378295898
    2. '   ' → logprob: -1.7615728378295898
    3. ' continu' → logprob: -2.26157283782959
    4. ' return' → logprob: -2.51157283782959
    5. ' continues' → logprob: -2.63657283782959
    6. ' ' → logprob: -3.01157283782959
    7. ' retourne' → logprob: -3.63657283782959
    8. ' continuer' → logprob: -3.76157283782959
    9. ' :' → logprob: -4.13657283782959
    10. 'def' → logprob: -4.26157283782959

Token 144: 'ule' (ID: 1601)
  Prédit: 'ule'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ule' → logprob: -0.10050523281097412
    2. 'uler' → logprob: -3.2255053520202637
    3. 'ul' → logprob: -3.3505053520202637
    4. 'ulé' → logprob: -4.350505352020264
    5. 'u' → logprob: -6.100505352020264
    6. '_' → logprob: -6.475505352020264
    7. 'ulate' → logprob: -7.225505352020264
    8. '   ' → logprob: -7.350505352020264
    9. '#' → logprob: -7.850505352020264
    10. '```' → logprob: -8.350504875183105

Token 145: ' le' (ID: 505)
  Prédit: ' le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.18916596472263336
    2. ' ' → logprob: -2.8141660690307617
    3. ' la' → logprob: -3.1891660690307617
    4. ' l' → logprob: -3.5641660690307617
    5. '_' → logprob: -4.814166069030762
    6. '<|end|>' → logprob: -5.564166069030762
    7. ',' → logprob: -5.814166069030762
    8. 's' → logprob: -5.814166069030762
    9. ' et' → logprob: -5.939166069030762
    10. '(' → logprob: -6.064166069030762

Token 146: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.16098938882350922
    2. 'nombre' → logprob: -1.9109894037246704
    3. ' minimum' → logprob: -8.410989761352539
    4. ' nombres' → logprob: -8.410989761352539
    5. 'minimum' → logprob: -9.285989761352539
    6. '   ' → logprob: -9.660989761352539
    7. ' minimal' → logprob: -10.160989761352539
    8. ' number' → logprob: -11.160989761352539
    9. 'es' → logprob: -11.410989761352539
    10. 's' → logprob: -11.535989761352539

Token 147: ' minimal' (ID: 19957)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.18558073043823242
    2. ' total' → logprob: -2.0605807304382324
    3. ' minimal' → logprob: -3.8105807304382324
    4. '_total' → logprob: -4.935580730438232
    5. ' de' → logprob: -5.810580730438232
    6. 'total' → logprob: -5.810580730438232
    7. ' ' → logprob: -6.435580730438232
    8. '_' → logprob: -6.685580730438232
    9. 'd' → logprob: -7.310580730438232
    10. ' maximal' → logprob: -7.435580730438232

Token 148: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.004607657436281443
    2. ' ' → logprob: -5.629607677459717
    3. ' de' → logprob: -7.129607677459717
    4. ' nécessaire' → logprob: -9.754607200622559
    5. ' total' → logprob: -9.754607200622559
    6. 'd' → logprob: -10.129607200622559
    7. ' 
' → logprob: -11.254607200622559
    8. '_' → logprob: -12.129607200622559
    9. ' des' → logprob: -12.254607200622559
    10. ' nécessaires' → logprob: -12.629607200622559

Token 149: ''ét' (ID: 23771)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.31343311071395874
    2. ''' → logprob: -2.1884331703186035
    3. ''ét' → logprob: -2.1884331703186035
    4. ''é' → logprob: -3.9384331703186035
    5. 'e' → logprob: -5.0634331703186035
    6. ' étapes' → logprob: -5.5634331703186035
    7. ''espace' → logprob: -5.6884331703186035
    8. ''esp' → logprob: -6.0634331703186035
    9. ' ' → logprob: -6.0634331703186035
    10. 'é' → logprob: -6.1884331703186035

Token 150: 'apes' (ID: 11864)
  Prédit: 'apes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'apes' → logprob: -0.0020958955865353346
    2. 'ape' → logprob: -6.752095699310303
    3. '```' → logprob: -8.252096176147461
    4. '#' → logprob: -9.377096176147461
    5. '   ' → logprob: -9.502096176147461
    6. 'a' → logprob: -9.627096176147461
    7. 'ap' → logprob: -9.877096176147461
    8. '</' → logprob: -10.377096176147461
    9. '"' → logprob: -10.502096176147461
    10. '**' → logprob: -10.564596176147461

Token 151: ' nécessaires' (ID: 74402)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7254486680030823
    2. ' nécessaires' → logprob: -0.8504486680030823
    3. ' nécessaire' → logprob: -3.3504486083984375
    4. ' ' → logprob: -4.2254486083984375
    5. '_' → logprob: -4.3504486083984375
    6. ' necess' → logprob: -4.7254486083984375
    7. ' necessary' → logprob: -5.9754486083984375
    8. '    ' → logprob: -6.2254486083984375
    9. ' ' → logprob: -6.4754486083984375
    10. ' pour' → logprob: -6.4754486083984375

Token 152: ' pour' (ID: 1930)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007228562608361244
    2. '\n' → logprob: -5.632228374481201
    3. '.' → logprob: -7.382228374481201
    4. ' pour' → logprob: -7.382228374481201
    5. '    
' → logprob: -7.507228374481201
    6. ':' → logprob: -7.632228374481201
    7. ',' → logprob: -7.882228374481201
    8. '    ' → logprob: -9.13222885131836
    9. '\' → logprob: -9.13222885131836
    10. '  ' → logprob: -9.25722885131836

Token 153: ' traiter' (ID: 105852)
  Prédit: ' traiter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' traiter' → logprob: -0.0669088140130043
    2. 'trait' → logprob: -2.941908836364746
    3. 'tout' → logprob: -5.441908836364746
    4. ' tout' → logprob: -6.316908836364746
    5. 'process' → logprob: -6.566908836364746
    6. 't' → logprob: -7.066908836364746
    7. ' terminer' → logprob: -7.066908836364746
    8. 'tra' → logprob: -7.191908836364746
    9. ' couvrir' → logprob: -7.691908836364746
    10. ' tra' → logprob: -8.691908836364746

Token 154: ' tous' (ID: 10688)
  Prédit: ' tous'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tous' → logprob: -0.013706913217902184
    2. ' all' → logprob: -5.388706684112549
    3. ' tout' → logprob: -5.763706684112549
    4. 't' → logprob: -6.138706684112549
    5. ' toutes' → logprob: -6.763706684112549
    6. ' l' → logprob: -7.638706684112549
    7. ' ' → logprob: -7.763706684112549
    8. ' toute' → logprob: -8.138707160949707
    9. ' ' → logprob: -8.388707160949707
    10. ' la' → logprob: -8.513707160949707

Token 155: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.007689089514315128
    2. 'les' → logprob: -4.882688999176025
    3. 'l' → logprob: -11.382689476013184
    4. ' l' → logprob: -11.507689476013184
    5. ' els' → logprob: -11.507689476013184
    6. ' ' → logprob: -11.632689476013184
    7. 's' → logprob: -11.632689476013184
    8. ' ' → logprob: -11.882689476013184
    9. '```' → logprob: -12.382689476013184
    10. ' la' → logprob: -12.507689476013184

Token 156: ' éléments' (ID: 57375)
  Prédit: ' éléments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' éléments' → logprob: -0.4761798679828644
    2. 'élé' → logprob: -0.976179838180542
    3. ' elements' → logprob: -7.226180076599121
    4. ' ' → logprob: -7.351180076599121
    5. ' élément' → logprob: -7.851180076599121
    6. 'elements' → logprob: -9.101180076599121
    7. 'él' → logprob: -9.726180076599121
    8. ' él' → logprob: -9.851180076599121
    9. 'é' → logprob: -10.101180076599121
    10. ' espaces' → logprob: -11.226180076599121

Token 157: '.

' (ID: 364)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.042861469089984894
    2. '.' → logprob: -3.9178614616394043
    3. ':' → logprob: -4.917861461639404
    4. '\n' → logprob: -5.292861461639404
    5. ',' → logprob: -6.292861461639404
    6. ')' → logprob: -6.542861461639404
    7. '.
' → logprob: -7.042861461639404
    8. 'def' → logprob: -7.042861461639404
    9. '    
' → logprob: -7.292861461639404
    10. '):' → logprob: -7.667861461639404

Token 158: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7113421559333801
    2. '"""' → logprob: -0.7113421559333801
    3. ' """' → logprob: -4.3363423347473145
    4. '"' → logprob: -5.9613423347473145
    5. '"""
' → logprob: -6.7113423347473145
    6. ' """
' → logprob: -7.7113423347473145
    7. '```' → logprob: -7.9613423347473145
    8. '""' → logprob: -9.086341857910156
    9. ')' → logprob: -9.961341857910156
    10. '    ' → logprob: -10.211341857910156

Token 159: ' Aff' (ID: 13741)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05223868042230606
    2. '"""' → logprob: -3.177238702774048
    3. 'n' → logprob: -6.302238464355469
    4. 'def' → logprob: -6.427238464355469
    5. '"""
' → logprob: -6.427238464355469
    6. '    
' → logprob: -6.802238464355469
    7. '\n' → logprob: -7.052238464355469
    8. '
' → logprob: -7.302238464355469
    9. '```' → logprob: -7.802238464355469
    10. '""' → logprob: -8.302238464355469

Token 160: 'iche' (ID: 7509)
  Prédit: 'icher'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'icher' → logprob: -0.07279150187969208
    2. '#' → logprob: -3.447791576385498
    3. 'f' → logprob: -3.572791576385498
    4. 'iche' → logprob: -5.322791576385498
    5. 'ichage' → logprob: -6.197791576385498
    6. 'ic' → logprob: -7.447791576385498
    7. '   ' → logprob: -8.07279109954834
    8. '_' → logprob: -8.19779109954834
    9. '```' → logprob: -8.32279109954834
    10. 'i' → logprob: -8.32279109954834

Token 161: ' :
' (ID: 10039)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.5522966384887695
    2. '(' → logprob: -0.9272966384887695
    3. ' ' → logprob: -4.4272966384887695
    4. '"' → logprob: -5.6772966384887695
    5. ' (' → logprob: -5.8022966384887695
    6. '("' → logprob: -5.9272966384887695
    7. ':' → logprob: -6.4272966384887695
    8. ' :' → logprob: -6.6772966384887695
    9. '   ' → logprob: -6.8022966384887695
    10. '('' → logprob: -7.3022966384887695

Token 162: '     ' (ID: 530)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.4633324444293976
    2. '   ' → logprob: -1.3383324146270752
    3. ' "' → logprob: -3.088332414627075
    4. ' n' → logprob: -3.838332414627075
    5. ' le' → logprob: -4.088332653045654
    6. 'n' → logprob: -5.213332653045654
    7. '"\' → logprob: -5.213332653045654
    8. '\n' → logprob: -5.838332653045654
    9. ' ' → logprob: -6.213332653045654
    10. ''' → logprob: -6.463332653045654

Token 163: ' -' (ID: 533)
  Prédit: ' le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.2866537570953369
    2. 'le' → logprob: -1.536653757095337
    3. '"' → logprob: -4.161653518676758
    4. 'len' → logprob: -4.911653518676758
    5. 'Le' → logprob: -6.036653518676758
    6. 'l' → logprob: -6.286653518676758
    7. 'int' → logprob: -6.411653518676758
    8. 'min' → logprob: -6.911653518676758
    9. 'n' → logprob: -7.036653518676758
    10. ' Le' → logprob: -7.661653518676758

Token 164: ' Le' (ID: 2018)
  Prédit: ' le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.17231740057468414
    2. ' n' → logprob: -1.922317385673523
    3. ' Le' → logprob: -5.6723175048828125
    4. 'n' → logprob: -5.7973175048828125
    5. ' la' → logprob: -6.5473175048828125
    6. 'le' → logprob: -7.0473175048828125
    7. 'Le' → logprob: -7.2973175048828125
    8. ' minimal' → logprob: -7.9223175048828125
    9. ' l' → logprob: -8.172317504882812
    10. '   ' → logprob: -8.172317504882812

Token 165: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.016956469044089317
    2. 'nombre' → logprob: -4.516956329345703
    3. ' n' → logprob: -6.141956329345703
    4. ' total' → logprob: -6.391956329345703
    5. ' number' → logprob: -7.016956329345703
    6. 'n' → logprob: -7.266956329345703
    7. ' nombres' → logprob: -8.516956329345703
    8. ' minimal' → logprob: -9.016956329345703
    9. ' ' → logprob: -10.266956329345703
    10. ' nb' → logprob: -10.516956329345703

Token 166: ' minimal' (ID: 19957)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.4514771699905396
    2. ' minimal' → logprob: -1.4514771699905396
    3. ' d' → logprob: -1.7014771699905396
    4. '_' → logprob: -1.9514771699905396
    5. ' total' → logprob: -1.9514771699905396
    6. ' maximal' → logprob: -3.82647705078125
    7. ' _' → logprob: -3.95147705078125
    8. '_total' → logprob: -4.70147705078125
    9. ' de' → logprob: -5.57647705078125
    10. ' minimum' → logprob: -5.82647705078125

Token 167: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.000607602356467396
    2. ' ' → logprob: -7.875607490539551
    3. 'd' → logprob: -9.12560749053955
    4. ' de' → logprob: -9.87560749053955
    5. '_' → logprob: -10.50060749053955
    6. '_d' → logprob: -11.50060749053955
    7. '  ' → logprob: -12.25060749053955
    8. 's' → logprob: -12.25060749053955
    9. ' nécessaire' → logprob: -12.50060749053955
    10. ' "' → logprob: -12.87560749053955

Token 168: ''ét' (ID: 23771)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.10607055574655533
    2. ' étapes' → logprob: -2.7310705184936523
    3. '_' → logprob: -3.8560705184936523
    4. 'd' → logprob: -5.606070518493652
    5. ' espaces' → logprob: -5.981070518493652
    6. 'é' → logprob: -5.981070518493652
    7. ' de' → logprob: -6.606070518493652
    8. ''ét' → logprob: -7.106070518493652
    9. ' steps' → logprob: -7.481070518493652
    10. ''' → logprob: -7.731070518493652

Token 169: 'apes' (ID: 11864)
  Prédit: 'apes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'apes' → logprob: -0.018962865695357323
    2. 'à' → logprob: -5.393962860107422
    3. 'ape' → logprob: -5.643962860107422
    4. 'a' → logprob: -5.768962860107422
    5. 'ap' → logprob: -6.643962860107422
    6. 'â' → logprob: -6.768962860107422
    7. '`' → logprob: -6.893962860107422
    8. 'á' → logprob: -7.768962860107422
    9. 'p' → logprob: -7.893962860107422
    10. 't' → logprob: -8.393962860107422

Token 170: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08807128667831421
    2. 'n' → logprob: -2.713071346282959
    3. ':' → logprob: -4.588071346282959
    4. '(n' → logprob: -5.213071346282959
    5. '
' → logprob: -6.963071346282959
    6. 'def' → logprob: -7.588071346282959
    7. ' ' → logprob: -8.3380708694458
    8. '    
' → logprob: -8.8380708694458
    9. ' n' → logprob: -9.2130708694458
    10. '():' → logprob: -9.2130708694458

Token 171: ' sous' (ID: 14487)
  Prédit: ' end'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' end' → logprob: -0.9539333581924438
    2. ' ' → logprob: -1.3289333581924438
    3. '"' → logprob: -2.2039332389831543
    4. 'end' → logprob: -2.4539332389831543
    5. ' n' → logprob: -3.0789332389831543
    6. ' "' → logprob: -3.4539332389831543
    7. 'space' → logprob: -4.453933238983154
    8. ')' → logprob: -4.453933238983154
    9. '```' → logprob: -4.703933238983154
    10. 'n' → logprob: -5.078933238983154

Token 172: ' forme' (ID: 27450)
  Prédit: ' forme'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' forme' → logprob: -0.4114573895931244
    2. '   ' → logprob: -1.5364574193954468
    3. ' la' → logprob: -2.9114573001861572
    4. 'la' → logprob: -3.4114573001861572
    5. 'forme' → logprob: -3.6614573001861572
    6. '```' → logprob: -6.036457538604736
    7. 'form' → logprob: -6.411457538604736
    8. '    ' → logprob: -7.036457538604736
    9. ' ' → logprob: -7.161457538604736
    10. '  ' → logprob: -7.286457538604736

Token 173: ' entière' (ID: 61583)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.01145261526107788
    2. 'd' → logprob: -4.511452674865723
    3. '=' → logprob: -8.511452674865723
    4. ' de' → logprob: -8.761452674865723
    5. '   ' → logprob: -11.011452674865723
    6. ' =' → logprob: -11.511452674865723
    7. 'de' → logprob: -12.511452674865723
    8. '=d' → logprob: -12.511452674865723
    9. 'e' → logprob: -13.136452674865723
    10. ')' → logprob: -13.386452674865723

Token 174: '.
' (ID: 558)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.3711996078491211
    2. '   ' → logprob: -1.246199607849121
    3. 'n' → logprob: -4.746199607849121
    4. '
' → logprob: -5.371199607849121
    5. ':
' → logprob: -5.621199607849121
    6. '    
' → logprob: -6.746199607849121
    7. '(n' → logprob: -6.996199607849121
    8. '\n' → logprob: -7.121199607849121
    9. ' ' → logprob: -7.371199607849121
    10. '  
' → logprob: -7.621199607849121

Token 175: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04269128665328026
    2. 'n' → logprob: -3.667691230773926
    3. '\n' → logprob: -5.417691230773926
    4. '    
' → logprob: -5.542691230773926
    5. '
' → logprob: -5.792691230773926
    6. ':' → logprob: -6.167691230773926
    7. '(n' → logprob: -7.292691230773926
    8. '```' → logprob: -7.542691230773926
    9. '  
' → logprob: -7.917691230773926
    10. '   
' → logprob: -8.167691230773926

Token 176: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03152964636683464
    2. '    
' → logprob: -4.156529426574707
    3. '
' → logprob: -4.781529426574707
    4. '\n' → logprob: -5.281529426574707
    5. 'n' → logprob: -6.781529426574707
    6. '```' → logprob: -8.531529426574707
    7. '   
' → logprob: -8.781529426574707
    8. '  
' → logprob: -9.031529426574707
    9. '\' → logprob: -9.406529426574707
    10. ' 
' → logprob: -9.781529426574707

Token 177: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012501525692641735
    2. 'n' → logprob: -4.5125017166137695
    3. '    
' → logprob: -6.7625017166137695
    4. '
' → logprob: -8.76250171661377
    5. '\n' → logprob: -9.63750171661377
    6. ' n' → logprob: -9.88750171661377
    7. '    ' → logprob: -11.88750171661377
    8. '\' → logprob: -12.76250171661377
    9. '   
' → logprob: -12.88750171661377
    10. '	n' → logprob: -12.88750171661377

Token 178: ' #' (ID: 1069)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.21652910113334656
    2. '   ' → logprob: -1.716529130935669
    3. ' n' → logprob: -4.21652889251709
    4. '    
' → logprob: -8.84152889251709
    5. '\n' → logprob: -9.84152889251709
    6. '
' → logprob: -10.96652889251709
    7. ' 
' → logprob: -11.09152889251709
    8. '	n' → logprob: -11.71652889251709
    9. '  
' → logprob: -12.84152889251709
    10. 'import' → logprob: -13.09152889251709

Token 179: ' Lecture' (ID: 106534)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.1036609411239624
    2. ' n' → logprob: -2.353661060333252
    3. '   ' → logprob: -5.728661060333252
    4. 'input' → logprob: -9.228660583496094
    5. '#' → logprob: -10.853660583496094
    6. 'import' → logprob: -10.978660583496094
    7. 'line' → logprob: -11.353660583496094
    8. ' input' → logprob: -11.603660583496094
    9. '	n' → logprob: -11.853660583496094
    10. 'inputs' → logprob: -11.853660583496094

Token 180: ' des' (ID: 731)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.4790979325771332
    2. 'n' → logprob: -1.2290979623794556
    3. '   ' → logprob: -2.479097843170166
    4. '(n' → logprob: -7.229097843170166
    5. ' des' → logprob: -7.479097843170166
    6. '    ' → logprob: -7.479097843170166
    7. ' de' → logprob: -7.729097843170166
    8. 's' → logprob: -7.854097843170166
    9. ' (' → logprob: -7.979097843170166
    10. '	n' → logprob: -8.229098320007324

Token 181: ' deux' (ID: 10301)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.22618257999420166
    2. 'n' → logprob: -1.6011825799942017
    3. ' données' → logprob: -8.35118293762207
    4. ' entr' → logprob: -9.10118293762207
    5. ' valeurs' → logprob: -9.47618293762207
    6. ' inputs' → logprob: -9.85118293762207
    7. ' ' → logprob: -10.22618293762207
    8. 'entr' → logprob: -10.22618293762207
    9. 'val' → logprob: -10.35118293762207
    10. ' input' → logprob: -10.60118293762207

Token 182: ' ent' (ID: 1121)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.6068164110183716
    2. ' ' → logprob: -1.8568164110183716
    3. ' ent' → logprob: -1.8568164110183716
    4. 'n' → logprob: -2.231816291809082
    5. ' integers' → logprob: -3.731816291809082
    6. 'ent' → logprob: -5.231816291809082
    7. ' nombres' → logprob: -7.231816291809082
    8. ' =' → logprob: -7.231816291809082
    9. ' valeurs' → logprob: -7.481816291809082
    10. ' lignes' → logprob: -7.481816291809082

Token 183: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.004479731433093548
    2. 't' → logprob: -6.254479885101318
    3. 'r' → logprob: -6.379479885101318
    4. 'n' → logprob: -8.25447940826416
    5. 'ières' → logprob: -9.00447940826416
    6. 'i' → logprob: -9.62947940826416
    7. 'ier' → logprob: -9.87947940826416
    8. 's' → logprob: -10.00447940826416
    9. 'ers' → logprob: -10.12947940826416
    10. 'ités' → logprob: -10.25447940826416

Token 184: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.15846195816993713
    2. 'n' → logprob: -2.0334620475769043
    3. '   ' → logprob: -4.158462047576904
    4. '	n' → logprob: -11.533461570739746
    5. ' line' → logprob: -12.033461570739746
    6. '    
' → logprob: -12.658461570739746
    7. ' ' → logprob: -13.033461570739746
    8. 's' → logprob: -13.158461570739746
    9. 'import' → logprob: -13.658461570739746
    10. '(n' → logprob: -13.783461570739746

Token 185: ' (' (ID: 350)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -8.697387966094539e-05
    2. ' ,' → logprob: -10.125086784362793
    3. ',n' → logprob: -10.250086784362793
    4. ',k' → logprob: -11.625086784362793
    5. 'n' → logprob: -13.375086784362793
    6. ' =' → logprob: -15.000086784362793
    7. '   ' → logprob: -15.875086784362793
    8. 'k' → logprob: -16.37508773803711
    9. ' n' → logprob: -16.62508773803711
    10. '=' → logprob: -16.62508773803711

Token 186: 'tail' (ID: 20472)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.003134816884994507
    2. ')' → logprob: -6.378134727478027
    3. ' ,' → logprob: -7.378134727478027
    4. ',k' → logprob: -7.628134727478027
    5. ',n' → logprob: -9.003134727478027
    6. ' et' → logprob: -9.753134727478027
    7. ' )' → logprob: -10.003134727478027
    8. 'n' → logprob: -11.253134727478027
    9. ' ' → logprob: -11.253134727478027
    10. ' n' → logprob: -11.253134727478027

Token 187: 'le' (ID: 282)
  Prédit: 'le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'le' → logprob: -0.00011439072113716975
    2. 'e' → logprob: -9.875114440917969
    3. '   ' → logprob: -10.500114440917969
    4. '_le' → logprob: -12.000114440917969
    5. ',' → logprob: -12.250114440917969
    6. ' n' → logprob: -12.375114440917969
    7. 'les' → logprob: -12.375114440917969
    8. '  ' → logprob: -12.875114440917969
    9. ' et' → logprob: -13.000114440917969
    10. 'es' → logprob: -13.625114440917969

Token 188: ' de' (ID: 334)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.007092804182320833
    2. ')' → logprob: -5.7570929527282715
    3. ' ,' → logprob: -5.7570929527282715
    4. ' )' → logprob: -8.007092475891113
    5. 'de' → logprob: -9.382092475891113
    6. ' de' → logprob: -9.507092475891113
    7. ',)' → logprob: -9.507092475891113
    8. '   ' → logprob: -10.257092475891113
    9. ',n' → logprob: -10.257092475891113
    10. '),' → logprob: -11.132092475891113

Token 189: ' la' (ID: 557)
  Prédit: ' la'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.23244111239910126
    2. 'la' → logprob: -1.6074410676956177
    3. 'l' → logprob: -5.482440948486328
    4. 'n' → logprob: -7.232440948486328
    5. ' n' → logprob: -7.232440948486328
    6. ')' → logprob: -7.607440948486328
    7. ' )' → logprob: -8.357440948486328
    8. ' ' → logprob: -8.607440948486328
    9. ' l' → logprob: -8.857440948486328
    10. ' input' → logprob: -8.982440948486328

Token 190: ' liste' (ID: 31719)
  Prédit: 'liste'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'liste' → logprob: -0.1887483447790146
    2. ' liste' → logprob: -1.8137483596801758
    3. 'list' → logprob: -5.688748359680176
    4. '   ' → logprob: -6.313748359680176
    5. ' ' → logprob: -6.688748359680176
    6. ')' → logprob: -7.563748359680176
    7. 'table' → logprob: -8.063748359680176
    8. 'input' → logprob: -8.438748359680176
    9. ',' → logprob: -8.438748359680176
    10. 'l' → logprob: -8.688748359680176

Token 191: ')' (ID: 8)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0034917385783046484
    2. ')' → logprob: -6.1284918785095215
    3. '   ' → logprob: -7.6284918785095215
    4. ' ,' → logprob: -8.128491401672363
    5. '),' → logprob: -8.253491401672363
    6. ',k' → logprob: -9.003491401672363
    7. ',n' → logprob: -9.128491401672363
    8. ',)' → logprob: -11.628491401672363
    9. 'et' → logprob: -12.003491401672363
    10. ' )' → logprob: -12.003491401672363

Token 192: ' et' (ID: 859)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0014408307615667582
    2. '   ' → logprob: -7.37644100189209
    3. ',n' → logprob: -7.37644100189209
    4. ' ,' → logprob: -9.00144100189209
    5. 'n' → logprob: -9.75144100189209
    6. ' n' → logprob: -12.87644100189209
    7. ' et' → logprob: -13.62644100189209
    8. ',k' → logprob: -14.25144100189209
    9. ',
' → logprob: -14.75144100189209
    10. ' =' → logprob: -14.87644100189209

Token 193: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.38688430190086365
    2. ' k' → logprob: -1.136884331703186
    3. ' ' → logprob: -12.511884689331055
    4. ' ' → logprob: -12.636884689331055
    5. ',k' → logprob: -13.136884689331055
    6. '	k' → logprob: -13.886884689331055
    7. ' n' → logprob: -13.886884689331055
    8. ',' → logprob: -14.261884689331055
    9. '   ' → logprob: -14.386884689331055
    10. 'n' → logprob: -14.386884689331055

Token 194: ' (' (ID: 350)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0220645722001791
    2. '=' → logprob: -4.147064685821533
    3. '   ' → logprob: -5.272064685821533
    4. ',' → logprob: -7.272064685821533
    5. 'n' → logprob: -9.272064208984375
    6. '=n' → logprob: -10.022064208984375
    7. ' n' → logprob: -10.647064208984375
    8. '=input' → logprob: -11.772064208984375
    9. ',n' → logprob: -12.022064208984375
    10. '    ' → logprob: -13.522064208984375

Token 195: 'tail' (ID: 20472)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6261382699012756
    2. ' )' → logprob: -1.8761382102966309
    3. ' n' → logprob: -2.251138210296631
    4. ' la' → logprob: -3.376138210296631
    5. ' nombre' → logprob: -3.376138210296631
    6. 'max' → logprob: -3.626138210296631
    7. 'nombre' → logprob: -3.626138210296631
    8. ' k' → logprob: -3.751138210296631
    9. 'k' → logprob: -4.126138210296631
    10. 'n' → logprob: -4.376138210296631

Token 196: 'le' (ID: 282)
  Prédit: 'le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'le' → logprob: -0.08903282880783081
    2. '   ' → logprob: -3.5890328884124756
    3. '=' → logprob: -3.9640328884124756
    4. 'e' → logprob: -4.4640326499938965
    5. ')' → logprob: -4.8390326499938965
    6. ' =' → logprob: -5.8390326499938965
    7. ' ' → logprob: -6.3390326499938965
    8. 'es' → logprob: -6.7140326499938965
    9. '  ' → logprob: -6.8390326499938965
    10. '=int' → logprob: -6.8390326499938965

Token 197: ' maximale' (ID: 76380)
  Prédit: ' )'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' )' → logprob: -0.3798922300338745
    2. ')' → logprob: -1.2548922300338745
    3. '=' → logprob: -4.504892349243164
    4. ' =' → logprob: -4.879892349243164
    5. ' de' → logprob: -5.504892349243164
    6. ' maximale' → logprob: -5.629892349243164
    7. '_max' → logprob: -7.004892349243164
    8. ' des' → logprob: -7.254892349243164
    9. 'max' → logprob: -7.379892349243164
    10. 'de' → logprob: -7.879892349243164

Token 198: ' du' (ID: 1462)
  Prédit: ' )'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' )' → logprob: -0.2884060740470886
    2. ' des' → logprob: -1.9134061336517334
    3. ')' → logprob: -2.5384061336517334
    4. ' maximale' → logprob: -5.038405895233154
    5. ' du' → logprob: -5.413405895233154
    6. ' de' → logprob: -5.663405895233154
    7. 'des' → logprob: -6.288405895233154
    8. ' d' → logprob: -6.413405895233154
    9. ',' → logprob: -7.038405895233154
    10. 'de' → logprob: -7.288405895233154

Token 199: ' groupe' (ID: 29494)
  Prédit: ' groupe'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' groupe' → logprob: -0.08165578544139862
    2. 'g' → logprob: -2.956655740737915
    3. ' traitement' → logprob: -4.956655979156494
    4. 'pas' → logprob: -5.081655979156494
    5. 'trait' → logprob: -5.956655979156494
    6. 'lot' → logprob: -6.081655979156494
    7. ' lot' → logprob: -6.081655979156494
    8. ' pas' → logprob: -6.581655979156494
    9. ' batch' → logprob: -6.706655979156494
    10. ' group' → logprob: -7.331655979156494

Token 200: ' traité' (ID: 160836)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0008423840627074242
    2. ' )' → logprob: -7.375842571258545
    3. ',' → logprob: -9.500842094421387
    4. ')
' → logprob: -9.875842094421387
    5. '   ' → logprob: -10.500842094421387
    6. '):' → logprob: -10.625842094421387
    7. ' =' → logprob: -11.875842094421387
    8. '),' → logprob: -12.125842094421387
    9. ')

' → logprob: -12.375842094421387
    10. 'n' → logprob: -13.125842094421387

Token 201: ' à' (ID: 1221)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02788425236940384
    2. ',' → logprob: -4.152884483337402
    3. ' )' → logprob: -4.652884483337402
    4. '   ' → logprob: -6.902884483337402
    5. '):' → logprob: -7.652884483337402
    6. '),' → logprob: -8.402884483337402
    7. ')=' → logprob: -8.652884483337402
    8. 'n' → logprob: -9.652884483337402
    9. ',)' → logprob: -9.777884483337402
    10. ')
' → logprob: -10.277884483337402

Token 202: ' chaque' (ID: 21194)
  Prédit: 'cha'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cha' → logprob: -0.9156513214111328
    2. ' chaque' → logprob: -1.2906513214111328
    3. 'trait' → logprob: -2.040651321411133
    4. 'la' → logprob: -2.290651321411133
    5. ' traiter' → logprob: -3.040651321411133
    6. ' la' → logprob: -3.790651321411133
    7. 'tra' → logprob: -5.290651321411133
    8. 'une' → logprob: -5.915651321411133
    9. 'part' → logprob: -5.915651321411133
    10. 'process' → logprob: -6.165651321411133

Token 203: ' étape' (ID: 83661)
  Prédit: ' étape'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' étape' → logprob: -0.25230494141578674
    2. ' )' → logprob: -2.502305030822754
    3. ' ' → logprob: -3.252305030822754
    4. ' pas' → logprob: -3.502305030822754
    5. ' espace' → logprob: -3.752305030822754
    6. ')' → logprob: -3.752305030822754
    7. 'pas' → logprob: -4.877305030822754
    8. ' step' → logprob: -4.877305030822754
    9. 'ét' → logprob: -6.627305030822754
    10. '_' → logprob: -6.627305030822754

Token 204: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.019090823829174042
    2. '   ' → logprob: -4.39409065246582
    3. '):' → logprob: -5.26909065246582
    4. ',' → logprob: -6.76909065246582
    5. ' )' → logprob: -9.39409065246582
    6. '):
' → logprob: -10.01909065246582
    7. '),' → logprob: -10.14409065246582
    8. ')
' → logprob: -10.64409065246582
    9. ')=' → logprob: -11.26909065246582
    10. 'n' → logprob: -11.39409065246582

Token 205: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.030821343883872032
    2. 'n' → logprob: -3.7808213233947754
    3. ' n' → logprob: -4.905821323394775
    4. '    
' → logprob: -9.405821800231934
    5. '
' → logprob: -10.655821800231934
    6. '\n' → logprob: -11.655821800231934
    7. '    ' → logprob: -11.655821800231934
    8. '	n' → logprob: -12.280821800231934
    9. ' 
' → logprob: -12.405821800231934
    10. ',n' → logprob: -13.030821800231934

Token 206: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.41288134455680847
    2. 'n' (adapté à ' n') → logprob: -1.1628813743591309
    3. '   ' → logprob: -3.662881374359131
    4. '	n' → logprob: -11.662880897521973
    5. ' line' → logprob: -12.662880897521973
    6. ' ' → logprob: -13.787880897521973
    7. 'line' → logprob: -13.912880897521973
    8. '  ' → logprob: -14.037880897521973
    9. '(n' → logprob: -14.912880897521973
    10. '    
' → logprob: -15.037880897521973

Token 207: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0011727249948307872
    2. ',k' → logprob: -6.7511725425720215
    3. ' ,' → logprob: -13.00117301940918
    4. ',n' → logprob: -16.50117301940918
    5. 'k' → logprob: -16.75117301940918
    6. ',s' → logprob: -18.00117301940918
    7. ',int' → logprob: -18.12617301940918
    8. ',
' → logprob: -18.37617301940918
    9. ',K' → logprob: -18.50117301940918
    10. ',t' → logprob: -18.62617301940918

Token 208: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.07889363914728165
    2. 'k' → logprob: -2.5788936614990234
    3. ' ' → logprob: -12.703893661499023
    4. ' ' → logprob: -15.328893661499023
    5. '	k' → logprob: -15.578893661499023
    6. '  ' → logprob: -15.703893661499023
    7. '   ' → logprob: -16.328893661499023
    8. '    ' → logprob: -16.453893661499023
    9. '=k' → logprob: -17.203893661499023
    10. ',k' → logprob: -17.328893661499023

Token 209: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.018151935189962387
    2. '=' → logprob: -4.018151760101318
    3. '=input' → logprob: -13.268152236938477
    4. ',' → logprob: -16.018152236938477
    5. ')' → logprob: -16.518152236938477
    6. '=int' → logprob: -17.018152236938477
    7. ' ' → logprob: -17.018152236938477
    8. '   ' → logprob: -17.393152236938477
    9. '=k' → logprob: -18.018152236938477
    10. ')=' → logprob: -19.143152236938477

Token 210: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.03804171830415726
    2. 'map' → logprob: -3.288041830062866
    3. '	map' → logprob: -16.038042068481445
    4. '[' → logprob: -16.913042068481445
    5. ' list' → logprob: -17.288042068481445
    6. ' ' → logprob: -17.288042068481445
    7. '(map' → logprob: -18.038042068481445
    8. ' ' → logprob: -18.288042068481445
    9. '.map' → logprob: -18.788042068481445
    10. 'list' → logprob: -18.913042068481445

Token 211: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.00060307263629511
    2. '(' → logprob: -7.500603199005127
    3. '(input' → logprob: -10.250602722167969
    4. 'int' → logprob: -11.250602722167969
    5. '(str' → logprob: -14.375602722167969
    6. '[int' → logprob: -14.375602722167969
    7. '=int' → logprob: -15.250602722167969
    8. '<int' → logprob: -15.500602722167969
    9. ' int' → logprob: -15.625602722167969
    10. 'input' → logprob: -17.12560272216797

Token 212: ',' (ID: 11)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.32407811284065247
    2. '(input' → logprob: -1.32407808303833
    3. ',input' → logprob: -5.32407808303833
    4. ')' → logprob: -5.44907808303833
    5. ' input' → logprob: -6.94907808303833
    6. ',' → logprob: -7.82407808303833
    7. '=input' → logprob: -8.699078559875488
    8. '[input' → logprob: -10.449078559875488
    9. '(' → logprob: -10.699078559875488
    10. '<input' → logprob: -13.074078559875488

Token 213: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.0067154900170862675
    2. ' input' → logprob: -5.006715297698975
    3. '(input' → logprob: -16.881715774536133
    4. '=input' → logprob: -18.256715774536133
    5. ')' → logprob: -18.506715774536133
    6. ',input' → logprob: -19.381715774536133
    7. '	input' → logprob: -19.506715774536133
    8. '   ' → logprob: -19.631715774536133
    9. '<input' → logprob: -20.131715774536133
    10. ' ' → logprob: -20.256715774536133

Token 214: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -2.4987974029500037e-05
    2. '()' → logprob: -10.625024795532227
    3. ' ().' → logprob: -15.625024795532227
    4. '())' → logprob: -15.750024795532227
    5. '()
' → logprob: -15.750024795532227
    6. ')' → logprob: -16.625024795532227
    7. '(' → logprob: -16.750024795532227
    8. '.readline' → logprob: -17.625024795532227
    9. '().__' → logprob: -17.875024795532227
    10. '()[' → logprob: -18.000024795532227

Token 215: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0007101670489646494
    2. 'strip' → logprob: -7.2507100105285645
    3. '(split' → logprob: -16.125709533691406
    4. 'rstrip' → logprob: -16.125709533691406
    5. ' split' → logprob: -16.875709533691406
    6. 'read' → logprob: -17.375709533691406
    7. 'spl' → logprob: -18.250709533691406
    8. '.split' → logprob: -20.250709533691406
    9. '().' → logprob: -20.500709533691406
    10. '_split' → logprob: -20.875709533691406

Token 216: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0012305884156376123
    2. ')' → logprob: -7.126230716705322
    3. '()' → logprob: -8.001230239868164
    4. '()))' → logprob: -9.376230239868164
    5. '())
' → logprob: -13.001230239868164
    6. '))' → logprob: -13.126230239868164
    7. '(' → logprob: -14.501230239868164
    8. ' ())' → logprob: -14.626230239868164
    9. '('' → logprob: -14.876230239868164
    10. '().' → logprob: -15.376230239868164

Token 217: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11251427978277206
    2. '
' → logprob: -3.1125142574310303
    3. 'elements' → logprob: -3.3625142574310303
    4. 'n' → logprob: -4.362514495849609
    5. '    
' → logprob: -5.612514495849609
    6. 'input' → logprob: -5.737514495849609
    7. '  
' → logprob: -6.612514495849609
    8. '\n' → logprob: -6.862514495849609
    9. '[' → logprob: -7.237514495849609
    10. '[n' → logprob: -7.612514495849609

Token 218: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5866661667823792
    2. 'elements' → logprob: -1.8366661071777344
    3. 'lst' → logprob: -2.5866661071777344
    4. ' elements' → logprob: -2.8366661071777344
    5. ' lst' → logprob: -3.2116661071777344
    6. 'arr' → logprob: -3.5866661071777344
    7. 'input' → logprob: -3.9616661071777344
    8. '_' → logprob: -4.211666107177734
    9. ' elems' → logprob: -4.586666107177734
    10. 'data' → logprob: -4.961666107177734

Token 219: ' Lecture' (ID: 106534)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.5945101976394653
    2. 'input' → logprob: -0.9695101976394653
    3. 'elements' → logprob: -2.969510078430176
    4. 'lst' → logprob: -4.969510078430176
    5. 'arr' → logprob: -5.344510078430176
    6. ' _' → logprob: -6.469510078430176
    7. ' input' → logprob: -6.719510078430176
    8. ' elements' → logprob: -7.344510078430176
    9. '_=' → logprob: -7.469510078430176
    10. 'values' → logprob: -8.469510078430176

Token 220: ' de' (ID: 334)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.17691592872142792
    2. '   ' → logprob: -2.9269158840179443
    3. ' de' → logprob: -3.5519158840179443
    4. 'elements' → logprob: -3.8019158840179443
    5. ' des' → logprob: -4.551916122436523
    6. 'n' → logprob: -5.051916122436523
    7. '(' → logprob: -5.176916122436523
    8. ' la' → logprob: -5.551916122436523
    9. '_' → logprob: -5.551916122436523
    10. ' elements' → logprob: -5.676916122436523

Token 221: ' la' (ID: 557)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.3142561912536621
    2. 'input' → logprob: -1.314256191253662
    3. ' list' → logprob: -7.314256191253662
    4. ' input' → logprob: -8.06425666809082
    5. 'liste' → logprob: -12.68925666809082
    6. 'lst' → logprob: -13.18925666809082
    7. 'la' → logprob: -13.31425666809082
    8. '_' → logprob: -13.31425666809082
    9. 'l' → logprob: -13.68925666809082
    10. 'int' → logprob: -13.81425666809082

Token 222: ' liste' (ID: 31719)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.20677685737609863
    2. 'input' → logprob: -2.3317768573760986
    3. 'list' → logprob: -3.2067768573760986
    4. 'liste' → logprob: -3.2067768573760986
    5. 'lst' → logprob: -5.3317766189575195
    6. ' liste' → logprob: -6.5817766189575195
    7. 'n' → logprob: -7.2067766189575195
    8. 'elements' → logprob: -7.4567766189575195
    9. '_list' → logprob: -8.33177661895752
    10. ' input' → logprob: -8.45677661895752

Token 223: ' d' (ID: 272)
  Prédit: ' elements'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' elements' → logprob: -0.9702455997467041
    2. 'elements' → logprob: -1.470245599746704
    3. '()' → logprob: -2.220245599746704
    4. '   ' → logprob: -2.970245599746704
    5. ' input' → logprob: -3.345245599746704
    6. '_elements' → logprob: -3.470245599746704
    7. '_' → logprob: -3.470245599746704
    8. 'input' → logprob: -3.470245599746704
    9. ' list' → logprob: -3.845245599746704
    10. ' lst' → logprob: -3.970245599746704

Token 224: ''ent' (ID: 53422)
  Prédit: ''ent'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''ent' → logprob: -0.5799420475959778
    2. 'ent' → logprob: -2.204941987991333
    3. 'élé' → logprob: -2.704941987991333
    4. 'e' → logprob: -2.954941987991333
    5. ' ent' → logprob: -3.079941987991333
    6. 'inte' → logprob: -3.204941987991333
    7. 'es' → logprob: -3.204941987991333
    8. 'n' → logprob: -3.454941987991333
    9. 'ints' → logprob: -4.079942226409912
    10. ' integers' → logprob: -4.954942226409912

Token 225: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.009939181618392467
    2. 't' → logprob: -4.759939193725586
    3. 'i' → logprob: -8.134939193725586
    4. 'er' → logprob: -8.384939193725586
    5. 'ier' → logprob: -8.634939193725586
    6. 'tiers' → logprob: -9.259939193725586
    7. 'ités' → logprob: -9.634939193725586
    8. 'ts' → logprob: -9.634939193725586
    9. 'ti' → logprob: -9.634939193725586
    10. 'e' → logprob: -10.134939193725586

Token 226: ' (' (ID: 350)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.033740442246198654
    2. '_' → logprob: -3.908740520477295
    3. 'elements' → logprob: -4.908740520477295
    4. 'input' → logprob: -6.408740520477295
    5. 'lst' → logprob: -6.658740520477295
    6. '()' → logprob: -7.283740520477295
    7. ' elements' → logprob: -7.783740520477295
    8. 'list' → logprob: -7.783740520477295
    9. 'arr' → logprob: -8.533740043640137
    10. ' lst' → logprob: -8.908740043640137

Token 227: 'non' (ID: 11741)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.2700609862804413
    2. 'input' → logprob: -1.5200610160827637
    3. ')' → logprob: -4.520061016082764
    4. ' input' → logprob: -5.270061016082764
    5. '_)' → logprob: -7.145061016082764
    6. '   ' → logprob: -8.020060539245605
    7. ' _' → logprob: -8.020060539245605
    8. 'list' → logprob: -8.395060539245605
    9. ' )' → logprob: -9.395060539245605
    10. '_input' → logprob: -9.770060539245605

Token 228: ' utilisée' (ID: 106548)
  Prédit: ' utilisée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' utilisée' → logprob: -0.12549731135368347
    2. '_used' → logprob: -3.000497341156006
    3. 'util' → logprob: -3.375497341156006
    4. '_util' → logprob: -4.750497341156006
    5. 'used' → logprob: -5.000497341156006
    6. ' used' → logprob: -5.125497341156006
    7. ' utilisé' → logprob: -5.500497341156006
    8. ' utilis' → logprob: -6.125497341156006
    9. '_' → logprob: -6.250497341156006
    10. ' utilisées' → logprob: -6.875497341156006

Token 229: ' dans' (ID: 2671)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5154281854629517
    2. '())' → logprob: -1.3904281854629517
    3. '()' → logprob: -1.8904281854629517
    4. 'input' → logprob: -6.640428066253662
    5. '()
' → logprob: -7.890428066253662
    6. ' )' → logprob: -8.01542854309082
    7. '   ' → logprob: -8.39042854309082
    8. '())
' → logprob: -8.64042854309082
    9. ',' → logprob: -9.26542854309082
    10. ')
' → logprob: -9.64042854309082

Token 230: ' la' (ID: 557)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.010090832598507404
    2. ' input' → logprob: -4.8850908279418945
    3. '_' → logprob: -6.7600908279418945
    4. 'la' → logprob: -7.1350908279418945
    5. 'l' → logprob: -8.135090827941895
    6. ' la' → logprob: -9.510090827941895
    7. '_input' → logprob: -9.760090827941895
    8. '=input' → logprob: -10.260090827941895
    9. 'a' → logprob: -11.385090827941895
    10. 'the' → logprob: -11.635090827941895

Token 231: ' logique' (ID: 115350)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.45568418502807617
    2. 'input' → logprob: -1.2056841850280762
    3. '_' → logprob: -2.955684185028076
    4. ' code' → logprob: -4.705684185028076
    5. 'suite' → logprob: -6.080684185028076
    6. ' input' → logprob: -7.205684185028076
    7. '_code' → logprob: -7.455684185028076
    8. '#' → logprob: -8.080684661865234
    9. 'next' → logprob: -8.205684661865234
    10. 'second' → logprob: -8.455684661865234

Token 232: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.052130963653326035
    2. ')
' → logprob: -3.302130937576294
    3. '   ' → logprob: -5.177131175994873
    4. 'input' → logprob: -5.427131175994873
    5. '())' → logprob: -6.552131175994873
    6. ' )' → logprob: -6.927131175994873
    7. '())
' → logprob: -7.427131175994873
    8. '()' → logprob: -8.427130699157715
    9. ' input' → logprob: -8.552130699157715
    10. ' )
' → logprob: -8.677130699157715

Token 233: ' requ' (ID: 7028)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.7935329675674438
    2. 'input' → logprob: -1.1685329675674438
    3. '_' → logprob: -2.0435328483581543
    4. ')' → logprob: -2.5435328483581543
    5. ' _' → logprob: -4.043532848358154
    6. ' but' → logprob: -6.043532848358154
    7. ' n' → logprob: -6.043532848358154
    8. '   ' → logprob: -6.293532848358154
    9. ' ' → logprob: -6.418532848358154
    10. ' _)' → logprob: -7.418532848358154

Token 234: 'ise' (ID: 1096)
  Prédit: 'iert'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iert' → logprob: -0.3357009291648865
    2. 'is' → logprob: -1.9607009887695312
    3. 'ise' → logprob: -2.5857009887695312
    4. 'ert' → logprob: -2.8357009887695312
    5. 'ête' → logprob: -6.710700988769531
    6. 'it' → logprob: -6.710700988769531
    7. 'êt' → logprob: -6.835700988769531
    8. 'ises' → logprob: -6.835700988769531
    9. 'erit' → logprob: -6.960700988769531
    10. 'ière' → logprob: -6.960700988769531

Token 235: ' uniquement' (ID: 65527)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7210476398468018
    2. '()' → logprob: -0.7210476398468018
    3. '())' → logprob: -4.471047401428223
    4. 'for' → logprob: -4.971047401428223
    5. '=' → logprob: -5.846047401428223
    6. '=input' → logprob: -6.471047401428223
    7. '()
' → logprob: -6.971047401428223
    8. 'input' → logprob: -7.096047401428223
    9. ' =' → logprob: -7.096047401428223
    10. '_' → logprob: -7.471047401428223

Token 236: ' pour' (ID: 1930)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5061314702033997
    2. ')' → logprob: -1.2561314105987549
    3. ' for' → logprob: -3.256131410598755
    4. 'input' → logprob: -3.506131410598755
    5. ' pour' → logprob: -4.131131649017334
    6. '_' → logprob: -4.506131649017334
    7. 'pour' → logprob: -4.506131649017334
    8. '=input' → logprob: -6.381131649017334
    9. '_input' → logprob: -7.381131649017334
    10. ' input' → logprob: -7.381131649017334

Token 237: ' l' (ID: 305)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.05102800577878952
    2. 'input' → logprob: -3.80102801322937
    3. 's' → logprob: -4.551027774810791
    4. 'respect' → logprob: -5.301027774810791
    5. 'l' → logprob: -5.676027774810791
    6. 'la' → logprob: -5.801027774810791
    7. ' la' → logprob: -6.301027774810791
    8. 'com' → logprob: -7.176027774810791
    9. ' respecter' → logprob: -7.676027774810791
    10. 'n' → logprob: -7.801027774810791

Token 238: ''entrée' (ID: 115820)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.20865924656391144
    2. 'e' → logprob: -2.2086591720581055
    3. 'input' → logprob: -2.9586591720581055
    4. 'ecture' → logprob: -4.5836591720581055
    5. 'ire' → logprob: -5.4586591720581055
    6. 'og' → logprob: -6.2086591720581055
    7. 'iste' → logprob: -6.4586591720581055
    8. 'es' → logprob: -6.4586591720581055
    9. ''entrée' → logprob: -6.4586591720581055
    10. ''ex' → logprob: -7.0836591720581055

Token 239: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4625084400177002
    2. '())' → logprob: -1.0875084400177002
    3. '()' → logprob: -3.9625084400177
    4. '())
' → logprob: -4.587508201599121
    5. ')
' → logprob: -5.712508201599121
    6. 'input' → logprob: -8.087508201599121
    7. '()
' → logprob: -8.087508201599121
    8. '   ' → logprob: -10.462508201599121
    9. ' )' → logprob: -10.462508201599121
    10. '().' → logprob: -11.462508201599121

Token 240: '   ' (ID: 271)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.5416815876960754
    2. 'input' → logprob: -1.4166815280914307
    3. '   ' → logprob: -1.9166815280914307
    4. 'elements' → logprob: -4.04168176651001
    5. 'lst' → logprob: -5.54168176651001
    6. 'arr' → logprob: -6.29168176651001
    7. ' input' → logprob: -6.41668176651001
    8. ' _' → logprob: -6.41668176651001
    9. 'data' → logprob: -7.41668176651001
    10. ' elements' → logprob: -8.041681289672852

Token 241: ' a' (ID: 261)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.31554093956947327
    2. 'input' → logprob: -1.3155409097671509
    3. ' input' → logprob: -6.940540790557861
    4. 'elements' → logprob: -7.190540790557861
    5. ' _' → logprob: -7.690540790557861
    6. '_=' → logprob: -10.81554126739502
    7. 'lst' → logprob: -10.94054126739502
    8. ' elements' → logprob: -10.94054126739502
    9. 'arr' → logprob: -11.31554126739502
    10. '_input' → logprob: -11.56554126739502

Token 242: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5759641528129578
    2. '=' → logprob: -0.8259641528129578
    3. ',' → logprob: -11.325963973999023
    4. 's' → logprob: -12.450963973999023
    5. '_' → logprob: -13.575963973999023
    6. '[' → logprob: -13.700963973999023
    7. 'ist' → logprob: -13.950963973999023
    8. '=[]' → logprob: -14.325963973999023
    9. '   ' → logprob: -14.325963973999023
    10. '[]' → logprob: -14.450963973999023

Token 243: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.014168208464980125
    2. ' list' → logprob: -4.2641682624816895
    3. 'input' → logprob: -12.264167785644531
    4. ' input' → logprob: -18.13916778564453
    5. 'map' → logprob: -18.26416778564453
    6. '=list' → logprob: -21.01416778564453
    7. '[' → logprob: -21.13916778564453
    8. 'List' → logprob: -21.51416778564453
    9. '	list' → logprob: -22.01416778564453
    10. 'li' → logprob: -23.13916778564453

Token 244: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6886466145515442
    2. '(input' → logprob: -1.1886465549468994
    3. '(int' → logprob: -1.6886465549468994
    4. '()' → logprob: -5.5636467933654785
    5. '(map' → logprob: -5.5636467933654785
    6. '=input' → logprob: -9.18864631652832
    7. ' (' → logprob: -9.31364631652832
    8. '[int' → logprob: -9.43864631652832
    9. '().' → logprob: -9.68864631652832
    10. '(
' → logprob: -10.43864631652832

Token 245: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0004702338483184576
    2. '(' → logprob: -7.875470161437988
    3. '(input' → logprob: -9.500470161437988
    4. '=int' → logprob: -12.375470161437988
    5. 'int' → logprob: -12.625470161437988
    6. '<int' → logprob: -13.250470161437988
    7. '(str' → logprob: -13.250470161437988
    8. ' (' → logprob: -13.250470161437988
    9. '[int' → logprob: -13.625470161437988
    10. ',int' → logprob: -14.625470161437988

Token 246: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.011388501152396202
    2. ',input' → logprob: -4.511388301849365
    3. '(input' → logprob: -8.136388778686523
    4. ',int' → logprob: -10.511388778686523
    5. '(' → logprob: -12.011388778686523
    6. 'input' → logprob: -12.261388778686523
    7. '(int' → logprob: -12.511388778686523
    8. '=input' → logprob: -12.761388778686523
    9. ' ,' → logprob: -13.261388778686523
    10. '<input' → logprob: -14.886388778686523

Token 247: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -9.627176768844947e-05
    2. ' input' → logprob: -9.250096321105957
    3. '(input' → logprob: -17.12509536743164
    4. 'int' → logprob: -18.25009536743164
    5. ',input' → logprob: -20.50009536743164
    6. '=input' → logprob: -21.00009536743164
    7. 'str' → logprob: -21.50009536743164
    8. '<input' → logprob: -21.75009536743164
    9. ' ' → logprob: -22.25009536743164
    10. '_input' → logprob: -22.75009536743164

Token 248: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.00010926496179308742
    2. '()' → logprob: -9.125109672546387
    3. ' ().' → logprob: -15.250109672546387
    4. '(' → logprob: -17.50010871887207
    5. '()
' → logprob: -18.12510871887207
    6. '()))' → logprob: -19.00010871887207
    7. '.' → logprob: -19.12510871887207
    8. '()[' → logprob: -19.62510871887207
    9. '().'' → logprob: -19.62510871887207
    10. ')' → logprob: -20.12510871887207

Token 249: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -2.45848218582978e-06
    2. 'strip' → logprob: -13.00000286102295
    3. ' split' → logprob: -15.62500286102295
    4. 'rstrip' → logprob: -17.750001907348633
    5. '(split' → logprob: -18.000001907348633
    6. 'spl' → logprob: -20.125001907348633
    7. '.split' → logprob: -21.000001907348633
    8. '_split' → logprob: -22.500001907348633
    9. 'read' → logprob: -23.375001907348633
    10. 'plit' → logprob: -23.500001907348633

Token 250: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.007812569849193096
    2. '()' → logprob: -5.2578125
    3. '))' → logprob: -6.2578125
    4. '())' → logprob: -7.5078125
    5. '(' → logprob: -9.8828125
    6. '()))
' → logprob: -9.8828125
    7. '()));' → logprob: -12.6328125
    8. ')' → logprob: -13.7578125
    9. '())))' → logprob: -13.8828125
    10. '()))

' → logprob: -14.0078125

Token 251: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.011640101671218872
    2. '
' → logprob: -5.0116400718688965
    3. '    
' → logprob: -5.5116400718688965
    4. 'if' → logprob: -7.8866400718688965
    5. ' if' → logprob: -8.761640548706055
    6. '\n' → logprob: -9.386640548706055
    7. '```' → logprob: -9.636640548706055
    8. '  
' → logprob: -9.886640548706055
    9. '   
' → logprob: -9.886640548706055
    10. 'steps' → logprob: -10.761640548706055

Token 252: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6142822504043579
    2. 'if' → logprob: -0.9892822504043579
    3. 'steps' → logprob: -2.4892821311950684
    4. ' if' → logprob: -6.364282131195068
    5. 'result' → logprob: -6.989282131195068
    6. '
' → logprob: -7.989282131195068
    7. '```' → logprob: -8.114282608032227
    8. ' steps' → logprob: -8.364282608032227
    9. 'print' → logprob: -8.739282608032227
    10. '\n' → logprob: -8.989282608032227

Token 253: ' Après' (ID: 47562)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.048665717244148254
    2. 'steps' → logprob: -3.048665761947632
    3. 'result' → logprob: -10.798666000366211
    4. ' if' → logprob: -10.798666000366211
    5. '   ' → logprob: -11.548666000366211
    6. 'step' → logprob: -11.673666000366211
    7. 'print' → logprob: -11.923666000366211
    8. '#' → logprob: -12.298666000366211
    9. '```' → logprob: -12.673666000366211
    10. 'res' → logprob: -13.798666000366211

Token 254: ' avoir' (ID: 16595)
  Prédit: ' le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.5361986756324768
    2. 'le' → logprob: -1.911198616027832
    3. 'if' → logprob: -2.161198616027832
    4. ' if' → logprob: -2.661198616027832
    5. ' la' → logprob: -3.411198616027832
    6. ' avoir' → logprob: -3.661198616027832
    7. 'la' → logprob: -5.411198616027832
    8. 'prem' → logprob: -5.786198616027832
    9. 'avoir' → logprob: -5.786198616027832
    10. '1' → logprob: -5.911198616027832

Token 255: ' traité' (ID: 160836)
  Prédit: 'trait'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'trait' → logprob: -0.045182500034570694
    2. ' traité' → logprob: -3.795182466506958
    3. 'process' → logprob: -4.170182704925537
    4. 'tra' → logprob: -5.420182704925537
    5. 'proces' → logprob: -7.545182704925537
    6. 'pris' → logprob: -7.795182704925537
    7. 'print' → logprob: -8.170182228088379
    8. ' trait' → logprob: -8.545182228088379
    9. 'processed' → logprob: -9.045182228088379
    10. '#' → logprob: -10.045182228088379

Token 256: ' le' (ID: 505)
  Prédit: ' le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.1053500548005104
    2. 'le' → logprob: -2.4803500175476074
    3. ' ' → logprob: -4.605350017547607
    4. '1' → logprob: -5.105350017547607
    5. ' un' → logprob: -10.230350494384766
    6. '_le' → logprob: -10.355350494384766
    7. ' ' → logprob: -10.605350494384766
    8. 'l' → logprob: -10.730350494384766
    9. 'prem' → logprob: -11.105350494384766
    10. ' la' → logprob: -11.105350494384766

Token 257: ' premier' (ID: 15506)
  Prédit: 'prem'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prem' → logprob: -0.005360163748264313
    2. ' premier' → logprob: -5.505360126495361
    3. '1' → logprob: -6.880360126495361
    4. 'first' → logprob: -8.50536060333252
    5. ' ' → logprob: -11.13036060333252
    6. '```' → logprob: -11.50536060333252
    7. 'pr' → logprob: -12.25536060333252
    8. '   ' → logprob: -12.25536060333252
    9. ' first' → logprob: -12.50536060333252
    10. 'élé' → logprob: -13.50536060333252

Token 258: ' élément' (ID: 99627)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.05536310747265816
    2. ' élément' → logprob: -2.930363178253174
    3. 'element' → logprob: -7.930363178253174
    4. 'é' → logprob: -9.555362701416016
    5. 'él' → logprob: -11.430362701416016
    6. ' él' → logprob: -11.805362701416016
    7. ' ' → logprob: -11.930362701416016
    8. '_' → logprob: -12.180362701416016
    9. ' éléments' → logprob: -12.305362701416016
    10. ' element' → logprob: -12.430362701416016

Token 259: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.04569746553897858
    2. '   ' → logprob: -3.2956974506378174
    3. ' if' → logprob: -5.7956976890563965
    4. 'if' → logprob: -5.9206976890563965
    5. ' ,' → logprob: -7.2956976890563965
    6. ',
' → logprob: -7.2956976890563965
    7. 'steps' → logprob: -8.170697212219238
    8. ' steps' → logprob: -9.045697212219238
    9. ':' → logprob: -9.920697212219238
    10. '\n' → logprob: -10.670697212219238

Token 260: ' il' (ID: 1793)
  Prédit: 'steps'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'steps' → logprob: -1.0028386116027832
    2. ' steps' → logprob: -1.6278386116027832
    3. 'if' → logprob: -2.002838611602783
    4. '   ' → logprob: -2.377838611602783
    5. ' if' → logprob: -2.377838611602783
    6. 'remaining' → logprob: -2.627838611602783
    7. 'rest' → logprob: -4.002838611602783
    8. ' remaining' → logprob: -4.252838611602783
    9. ' rest' → logprob: -5.252838611602783
    10. 'reste' → logprob: -6.252838611602783

Token 261: ' faut' (ID: 17821)
  Prédit: ' reste'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' reste' → logprob: -0.09534083306789398
    2. 'f' → logprob: -3.3453407287597656
    3. 'rest' → logprob: -3.7203407287597656
    4. 'reste' → logprob: -4.845340728759766
    5. ' rest' → logprob: -5.220340728759766
    6. ' faut' → logprob: -5.220340728759766
    7. ' rester' → logprob: -5.845340728759766
    8. 'remaining' → logprob: -5.845340728759766
    9. ' ne' → logprob: -6.595340728759766
    10. ' remaining' → logprob: -6.720340728759766

Token 262: ' encore' (ID: 14043)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.9944497346878052
    2. ' (' → logprob: -1.3694497346878052
    3. '(n' → logprob: -2.1194496154785156
    4. '1' → logprob: -2.9944496154785156
    5. ' traiter' → logprob: -2.9944496154785156
    6. '(max' → logprob: -3.6194496154785156
    7. 'calcul' → logprob: -3.7444496154785156
    8. '(k' → logprob: -4.244449615478516
    9. 'trait' → logprob: -4.619449615478516
    10. 'n' → logprob: -4.619449615478516

Token 263: ' traiter' (ID: 105852)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.26670438051223755
    2. ' traiter' → logprob: -2.0167043209075928
    3. '(n' → logprob: -3.8917043209075928
    4. '(' → logprob: -3.8917043209075928
    5. 'trait' → logprob: -3.8917043209075928
    6. ' ' → logprob: -5.016704559326172
    7. '(max' → logprob: -5.016704559326172
    8. ' div' → logprob: -5.641704559326172
    9. '   ' → logprob: -5.891704559326172
    10. 'div' → logprob: -6.016704559326172

Token 264: ' (' (ID: 350)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.24684011936187744
    2. 'n' → logprob: -1.8718401193618774
    3. ' les' → logprob: -3.621840000152588
    4. '(n' → logprob: -3.871840000152588
    5. ' (' → logprob: -4.371840000152588
    6. '   ' → logprob: -6.496840000152588
    7. 'les' → logprob: -7.246840000152588
    8. ' ' → logprob: -7.371840000152588
    9. ' the' → logprob: -7.496840000152588
    10. '(' → logprob: -7.746840000152588

Token 265: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.3870048522949219
    2. ' n' → logprob: -1.1370048522949219
    3. '   ' → logprob: -9.262004852294922
    4. '(n' → logprob: -10.387004852294922
    5. ')n' → logprob: -12.887004852294922
    6. ' (' → logprob: -13.387004852294922
    7. ')' → logprob: -13.762004852294922
    8. '	n' → logprob: -14.137004852294922
    9. 'max' → logprob: -14.387004852294922
    10. ' max' → logprob: -14.512004852294922

Token 266: '-k' (ID: 10897)
  Prédit: ' -'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.12694038450717926
    2. '-' → logprob: -2.1269404888153076
    3. ')' → logprob: -12.126940727233887
    4. ' ' → logprob: -12.626940727233887
    5. '   ' → logprob: -13.001940727233887
    6. '1' → logprob: -14.876940727233887
    7. ' ' → logprob: -15.251940727233887
    8. '<|end|>' → logprob: -15.501940727233887
    9. '  ' → logprob: -15.876940727233887
    10. 'minus' → logprob: -16.12693977355957

Token 267: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.23086713254451752
    2. '+' → logprob: -1.9808671474456787
    3. '-' → logprob: -3.1058671474456787
    4. ' +' → logprob: -4.2308669090271
    5. ' -' → logprob: -5.2308669090271
    6. ' )' → logprob: -6.3558669090271
    7. ')+' → logprob: -7.7308669090271
    8. '1' → logprob: -7.8558669090271
    9. ' ' → logprob: -8.105867385864258
    10. '   ' → logprob: -8.980867385864258

Token 268: ' éléments' (ID: 57375)
  Prédit: ' elements'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' elements' → logprob: -1.0450149774551392
    2. ' if' → logprob: -1.1700149774551392
    3. ' +' → logprob: -1.9200149774551392
    4. '+' → logprob: -2.0450148582458496
    5. 'if' → logprob: -3.7950148582458496
    6. 'elements' → logprob: -3.9200148582458496
    7. ' -' → logprob: -5.17001485824585
    8. ' éléments' → logprob: -5.54501485824585
    9. ')' → logprob: -5.92001485824585
    10. '-' → logprob: -6.29501485824585

Token 269: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1872376799583435
    2. ' if' → logprob: -1.9372377395629883
    3. 'if' → logprob: -3.6872377395629883
    4. ')' → logprob: -8.062237739562988
    5. ' +' → logprob: -8.312237739562988
    6. ',' → logprob: -8.312237739562988
    7. '.' → logprob: -8.687237739562988
    8. '+' → logprob: -9.062237739562988
    9. '	if' → logprob: -9.062237739562988
    10. '-' → logprob: -9.812237739562988

Token 270: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.000866083602886647
    2. ' if' → logprob: -8.000865936279297
    3. 'if' → logprob: -8.125865936279297
    4. ',' → logprob: -9.000865936279297
    5. '    
' → logprob: -10.125865936279297
    6. 's' → logprob: -10.875865936279297
    7. '.' → logprob: -11.125865936279297
    8. '
' → logprob: -11.500865936279297
    9. ')' → logprob: -11.875865936279297
    10. '       ' → logprob: -12.750865936279297

Token 271: ' n' (ID: 297)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.505087673664093
    2. 'if' → logprob: -1.8800876140594482
    3. ' steps' → logprob: -2.1300876140594482
    4. '   ' → logprob: -3.0050876140594482
    5. 'steps' → logprob: -3.2550876140594482
    6. ' remaining' → logprob: -4.005087852478027
    7. 'remaining' → logprob: -4.255087852478027
    8. ' rest' → logprob: -6.255087852478027
    9. 'rest' → logprob: -6.380087852478027
    10. 'res' → logprob: -8.755087852478027

Token 272: ' -=' (ID: 12583)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.6375340223312378
    2. ' -' → logprob: -1.2625340223312378
    3. ' -=' → logprob: -1.7625340223312378
    4. '-=' → logprob: -4.887534141540527
    5. '>' → logprob: -5.762534141540527
    6. ' >' → logprob: -5.887534141540527
    7. '=' → logprob: -7.262534141540527
    8. ' =' → logprob: -7.387534141540527
    9. 'if' → logprob: -7.387534141540527
    10. '   ' → logprob: -7.512534141540527

Token 273: ' k' (ID: 372)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0004498573543969542
    2. ' ' → logprob: -7.7504496574401855
    3. 'k' → logprob: -10.875450134277344
    4. '   ' → logprob: -15.750450134277344
    5. ' k' → logprob: -16.500450134277344
    6. '<|end|>' → logprob: -18.125450134277344
    7. '  ' → logprob: -18.437950134277344
    8. '۱' → logprob: -18.750450134277344
    9. '0' → logprob: -19.250450134277344
    10. 'n' → logprob: -19.562950134277344

Token 274: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6798841953277588
    2. 'if' → logprob: -1.1798841953277588
    3. '   ' → logprob: -1.8048841953277588
    4. ' if' → logprob: -3.929884195327759
    5. '    
' → logprob: -7.42988395690918
    6. 'steps' → logprob: -7.92988395690918
    7. '\n' → logprob: -8.30488395690918
    8. '
' → logprob: -8.80488395690918
    9. '   
' → logprob: -9.30488395690918
    10. '  
' → logprob: -9.30488395690918

Token 275: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13008303940296173
    2. 'if' → logprob: -2.5050830841064453
    3. ' if' → logprob: -3.2550830841064453
    4. '
' → logprob: -6.630083084106445
    5. '    
' → logprob: -8.880083084106445
    6. '\n' → logprob: -8.880083084106445
    7. 'return' → logprob: -10.880083084106445
    8. '  
' → logprob: -11.005083084106445
    9. '   
' → logprob: -11.130083084106445
    10. 'steps' → logprob: -11.130083084106445

Token 276: ' #' (ID: 1069)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.35168778896331787
    2. 'steps' → logprob: -1.9766877889633179
    3. '   ' → logprob: -2.1016879081726074
    4. ' if' → logprob: -3.4766879081726074
    5. ' steps' → logprob: -5.851687908172607
    6. 'import' → logprob: -7.351687908172607
    7. 'result' → logprob: -7.476687908172607
    8. 'count' → logprob: -8.35168743133545
    9. 'step' → logprob: -8.97668743133545
    10. 'res' → logprob: -9.47668743133545

Token 277: ' k' (ID: 372)
  Prédit: 'steps'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'steps' → logprob: -0.5813299417495728
    2. 'if' → logprob: -0.8313299417495728
    3. 'et' → logprob: -6.331329822540283
    4. 'result' → logprob: -7.081329822540283
    5. 'ét' → logprob: -7.331329822540283
    6. 'print' → logprob: -7.456329822540283
    7. ' if' → logprob: -7.706329822540283
    8. '#' → logprob: -8.456330299377441
    9. 'pas' → logprob: -8.831330299377441
    10. 'count' → logprob: -8.956330299377441

Token 278: ' décr' (ID: 123041)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.0198951959609985
    2. ' if' → logprob: -1.6448951959609985
    3. ' =' → logprob: -1.7698951959609985
    4. '=' → logprob: -2.269895076751709
    5. '>' → logprob: -2.894895076751709
    6. ' >' → logprob: -4.019895076751709
    7. 'import' → logprob: -4.019895076751709
    8. ' +=' → logprob: -4.269895076751709
    9. 'steps' → logprob: -4.269895076751709
    10. ' and' → logprob: -4.519895076751709

Token 279: 'é' (ID: 377)
  Prédit: 'é'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'é' → logprob: -1.0891014337539673
    2. 'ément' → logprob: -1.2141014337539673
    3. '=' → logprob: -1.7141014337539673
    4. 'ement' → logprob: -1.9641014337539673
    5. '-=' → logprob: -3.8391013145446777
    6. 'oit' → logprob: -4.589101314544678
    7. 'ease' → logprob: -5.964101314544678
    8. 'ent' → logprob: -6.839101314544678
    9. 'iv' → logprob: -6.839101314544678
    10. 'ivent' → logprob: -6.964101314544678

Token 280: 'mente' (ID: 4186)
  Prédit: 'ment'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ment' → logprob: -0.0055287620052695274
    2. 'mente' → logprob: -5.755528926849365
    3. 'mented' → logprob: -7.505528926849365
    4. 'nt' → logprob: -7.880528926849365
    5. 'ement' → logprob: -8.005528450012207
    6. 'mental' → logprob: -8.255528450012207
    7. 'ent' → logprob: -8.505528450012207
    8. '=' → logprob: -9.005528450012207
    9. '-' → logprob: -9.505528450012207
    10. 'm' → logprob: -9.880528450012207

Token 281: ' pour' (ID: 1930)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -1.1318726539611816
    2. ' -=' → logprob: -1.7568726539611816
    3. ' ' → logprob: -2.5068726539611816
    4. ' =' → logprob: -2.6318726539611816
    5. 'ed' → logprob: -2.8818726539611816
    6. 'if' → logprob: -2.8818726539611816
    7. '   ' → logprob: -3.0068726539611816
    8. '1' → logprob: -3.3818726539611816
    9. ' if' → logprob: -3.7568726539611816
    10. 'd' → logprob: -3.8818726539611816

Token 282: ' représ' (ID: 31534)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.38638001680374146
    2. ' ' → logprob: -1.3863799571990967
    3. ' devenir' → logprob: -4.011380195617676
    4. 'k' → logprob: -4.511380195617676
    5. ' permettre' → logprob: -5.011380195617676
    6. ' pouvoir' → logprob: -5.511380195617676
    7. ' k' → logprob: -5.636380195617676
    8. 't' → logprob: -5.886380195617676
    9. ' éviter' → logprob: -6.011380195617676
    10. ' être' → logprob: -6.136380195617676

Token 283: 'enter' (ID: 3547)
  Prédit: 'uer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'uer' → logprob: -0.01978190615773201
    2. 'u' → logprob: -4.769782066345215
    3. 'uter' → logprob: -5.144782066345215
    4. 'ue' → logprob: -5.769782066345215
    5. 'er' → logprob: -7.269782066345215
    6. 'enter' → logprob: -7.769782066345215
    7. 'ute' → logprob: -8.019782066345215
    8. 'uent' → logprob: -8.519782066345215
    9. 'ter' → logprob: -8.769782066345215
    10. 'ure' → logprob: -9.644782066345215

Token 284: ' le' (ID: 505)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.6914738416671753
    2. ' k' → logprob: -1.4414738416671753
    3. 'k' → logprob: -2.066473960876465
    4. '1' → logprob: -3.441473960876465
    5. 'l' → logprob: -3.691473960876465
    6. ' la' → logprob: -4.191473960876465
    7. 's' → logprob: -4.191473960876465
    8. ' ' → logprob: -4.566473960876465
    9. ' le' → logprob: -5.191473960876465
    10. ' les' → logprob: -5.316473960876465

Token 285: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.4701748490333557
    2. 'nombre' → logprob: -1.845174789428711
    3. '1' → logprob: -3.095174789428711
    4. ' k' → logprob: -3.220174789428711
    5. ' pas' → logprob: -3.220174789428711
    6. ' premier' → logprob: -4.095174789428711
    7. 'k' → logprob: -4.220174789428711
    8. ' espace' → logprob: -4.220174789428711
    9. 'pas' → logprob: -4.220174789428711
    10. ' ' → logprob: -4.970174789428711

Token 286: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.8395814895629883
    2. ' -' → logprob: -1.4645814895629883
    3. '-' → logprob: -1.8395814895629883
    4. ' de' → logprob: -2.4645814895629883
    5. ' of' → logprob: -3.7145814895629883
    6. 'd' → logprob: -3.8395814895629883
    7. ' des' → logprob: -3.9645814895629883
    8. 'k' → logprob: -5.089581489562988
    9. 'de' → logprob: -5.214581489562988
    10. ' k' → logprob: -5.714581489562988

Token 287: ''' (ID: 6)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.7307846546173096
    2. ' éléments' → logprob: -1.1057846546173096
    3. ' des' → logprob: -3.1057846546173096
    4. 'élé' → logprob: -3.3557846546173096
    5. ' nouveaux' → logprob: -4.1057844161987305
    6. ' ' → logprob: -4.2307844161987305
    7. ' elements' → logprob: -4.4807844161987305
    8. ' de' → logprob: -4.6057844161987305
    9. ' étapes' → logprob: -4.9807844161987305
    10. ' k' → logprob: -4.9807844161987305

Token 288: 'élé' (ID: 15228)
  Prédit: 'élé'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.07309913635253906
    2. ' éléments' → logprob: -2.698099136352539
    3. 'elements' → logprob: -7.073099136352539
    4. ' nouveaux' → logprob: -7.448099136352539
    5. 'ét' → logprob: -8.198099136352539
    6. 'él' → logprob: -8.323099136352539
    7. ' ' → logprob: -8.323099136352539
    8. 'é' → logprob: -8.573099136352539
    9. ' étapes' → logprob: -8.573099136352539
    10. ' elements' → logprob: -9.323099136352539

Token 289: 'ments' (ID: 1626)
  Prédit: 'ments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ments' → logprob: -0.00017398154886905104
    2. 'ment' → logprob: -9.500173568725586
    3. 'ents' → logprob: -9.500173568725586
    4. 'nts' → logprob: -10.875173568725586
    5. 'm' → logprob: -13.750173568725586
    6. 'ements' → logprob: -14.125173568725586
    7. '```' → logprob: -14.500173568725586
    8. '`' → logprob: -15.250173568725586
    9. 'éments' → logprob: -15.250173568725586
    10. '=' → logprob: -15.375173568725586

Token 290: ' supplémentaires' (ID: 99346)
  Prédit: ' -'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.7792269587516785
    2. 'processed' → logprob: -1.6542270183563232
    3. '-' → logprob: -2.0292270183563232
    4. 'trait' → logprob: -2.1542270183563232
    5. ' -=' → logprob: -3.4042270183563232
    6. ' traité' → logprob: -3.4042270183563232
    7. ' processed' → logprob: -4.654226779937744
    8. 'treated' → logprob: -5.154226779937744
    9. ' trait' → logprob: -5.404226779937744
    10. ' à' → logprob: -5.654226779937744

Token 291: ' pouvant' (ID: 104840)
  Prédit: ' -='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' -=' → logprob: -0.35493573546409607
    2. 'trait' → logprob: -2.729935646057129
    3. '-' → logprob: -2.854935646057129
    4. 'processed' → logprob: -2.854935646057129
    5. '-=' → logprob: -2.979935646057129
    6. ' -' → logprob: -4.104935646057129
    7. ' traité' → logprob: -4.229935646057129
    8. ' +=' → logprob: -4.854935646057129
    9. 'k' → logprob: -5.229935646057129
    10. ' processed' → logprob: -5.479935646057129

Token 292: ' être' (ID: 9104)
  Prédit: 'être'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'être' → logprob: -0.14349815249443054
    2. ' être' → logprob: -2.018498182296753
    3. 'êtres' → logprob: -7.518497943878174
    4. 'trait' → logprob: -9.518498420715332
    5. ''être' → logprob: -9.893498420715332
    6. ' etre' → logprob: -10.393498420715332
    7. 'etre' → logprob: -10.518498420715332
    8. 'êt' → logprob: -10.768498420715332
    9. '’être' → logprob: -10.768498420715332
    10. 'Ê' → logprob: -11.143498420715332

Token 293: ' trait' (ID: 15458)
  Prédit: 'trait'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'trait' → logprob: -0.030048640444874763
    2. ' trait' → logprob: -3.5300486087799072
    3. 'process' → logprob: -8.530048370361328
    4. 'pris' → logprob: -10.280048370361328
    5. 'proces' → logprob: -11.530048370361328
    6. 'g' → logprob: -12.030048370361328
    7. 'tra' → logprob: -12.030048370361328
    8. 't' → logprob: -12.030048370361328
    9. 'group' → logprob: -12.280048370361328
    10. 'traits' → logprob: -12.405048370361328

Token 294: 'és' (ID: 1756)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.3311428427696228
    2. 's' → logprob: -1.8311429023742676
    3. ' à' → logprob: -3.7061429023742676
    4. '   ' → logprob: -3.8311429023742676
    5. 'és' → logprob: -4.206142902374268
    6. ' -' → logprob: -4.456142902374268
    7. 'es' → logprob: -4.831142902374268
    8. 'e' → logprob: -4.956142902374268
    9. ')' → logprob: -5.331142902374268
    10. 'é' → logprob: -5.456142902374268

Token 295: ' par' (ID: 686)
  Prédit: ' -='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' -=' → logprob: -0.20585334300994873
    2. '-' → logprob: -2.9558534622192383
    3. ' +=' → logprob: -3.4558534622192383
    4. '-=' → logprob: -3.5808534622192383
    5. '   ' → logprob: -3.7058534622192383
    6. ' -' → logprob: -4.330853462219238
    7. 'if' → logprob: -4.705853462219238
    8. '+=' → logprob: -4.955853462219238
    9. 'k' → logprob: -5.330853462219238
    10. '1' → logprob: -6.080853462219238

Token 296: ' étape' (ID: 83661)
  Prédit: ' étape'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' étape' → logprob: -0.1970316469669342
    2. 'ét' → logprob: -1.9470316171646118
    3. 'une' → logprob: -3.9470317363739014
    4. 'step' → logprob: -5.197031497955322
    5. 'pas' → logprob: -5.822031497955322
    6. ' une' → logprob: -6.072031497955322
    7. ' step' → logprob: -6.572031497955322
    8. 'un' → logprob: -6.572031497955322
    9. ' ' → logprob: -7.447031497955322
    10. '1' → logprob: -7.447031497955322

Token 297: ' suivante' (ID: 107439)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05605359002947807
    2. '-' → logprob: -4.181053638458252
    3. ' if' → logprob: -4.556053638458252
    4. '    
' → logprob: -4.806053638458252
    5. 'k' → logprob: -5.056053638458252
    6. 'if' → logprob: -5.431053638458252
    7. '
' → logprob: -5.681053638458252
    8. ' -' → logprob: -5.931053638458252
    9. '-k' → logprob: -7.056053638458252
    10. ' 
' → logprob: -7.681053638458252

Token 298: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20274360477924347
    2. 'k' → logprob: -1.702743649482727
    3. '	k' → logprob: -7.4527435302734375
    4. ' k' → logprob: -8.327743530273438
    5. 'if' → logprob: -8.577743530273438
    6. ' if' → logprob: -9.577743530273438
    7. '    ' → logprob: -9.952743530273438
    8. '    
' → logprob: -9.952743530273438
    9. '  ' → logprob: -10.327743530273438
    10. '/k' → logprob: -11.077743530273438

Token 299: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1829531490802765
    2. 'k' → logprob: -1.807953119277954
    3. ' k' → logprob: -6.182953357696533
    4. 'if' → logprob: -7.307953357696533
    5. ' if' → logprob: -7.932953357696533
    6. '	k' → logprob: -9.432952880859375
    7. '    
' → logprob: -11.682952880859375
    8. ',k' → logprob: -12.182952880859375
    9. '    ' → logprob: -12.807952880859375
    10. '(k' → logprob: -12.932952880859375

Token 300: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' (adapté à ' k') → logprob: -0.0012388024479150772
    2. ' k' → logprob: -6.751238822937012
    3. '   ' → logprob: -9.626238822937012
    4. 'if' → logprob: -13.126238822937012
    5. '	k' → logprob: -14.751238822937012
    6. ' if' → logprob: -15.376238822937012
    7. '```' → logprob: -18.001237869262695
    8. ' ' → logprob: -18.376237869262695
    9. '  ' → logprob: -18.501237869262695
    10. '(k' → logprob: -19.126237869262695

Token 301: ' -=' (ID: 12583)
  Prédit: ' -='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -=' → logprob: -0.16084739565849304
    2. '-=' → logprob: -1.9108474254608154
    3. '-' → logprob: -7.410847187042236
    4. '=' → logprob: -11.535847663879395
    5. ' -' → logprob: -12.535847663879395
    6. '   ' → logprob: -12.660847663879395
    7. ' =' → logprob: -13.535847663879395
    8. ' ' → logprob: -15.660847663879395
    9. '--' → logprob: -16.285846710205078
    10. '  ' → logprob: -16.535846710205078

Token 302: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0002613358374219388
    2. ' ' → logprob: -8.250261306762695
    3. '0' → logprob: -18.500261306762695
    4. '   ' → logprob: -19.750261306762695
    5. '１' → logprob: -20.125261306762695
    6. '<|end|>' → logprob: -20.812761306762695
    7. '۱' → logprob: -20.875261306762695
    8. '  ' → logprob: -21.187761306762695
    9. '১' → logprob: -21.437761306762695
    10. '```' → logprob: -21.562761306762695

Token 303: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.0280383548888494e-06
    2. ' ' → logprob: -13.875000953674316
    3. '0' → logprob: -20.000001907348633
    4. '１' → logprob: -20.750001907348633
    5. '   ' → logprob: -21.000001907348633
    6. '۱' → logprob: -21.062501907348633
    7. '১' → logprob: -21.250001907348633
    8. 'k' → logprob: -21.937501907348633
    9. '```' → logprob: -22.312501907348633
    10. '=' → logprob: -22.562501907348633

Token 304: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014981181360781193
    2. 'if' → logprob: -4.514981269836426
    3. 'steps' → logprob: -6.639981269836426
    4. '
' → logprob: -7.264981269836426
    5. 'return' → logprob: -7.389981269836426
    6. ' if' → logprob: -7.389981269836426
    7. 'result' → logprob: -8.389981269836426
    8. '    
' → logprob: -8.639981269836426
    9. 'import' → logprob: -8.889981269836426
    10. ' steps' → logprob: -9.639981269836426

Token 305: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02921193279325962
    2. 'if' → logprob: -3.65421199798584
    3. 'steps' → logprob: -6.40421199798584
    4. ' if' → logprob: -7.02921199798584
    5. 'result' → logprob: -8.27921199798584
    6. ' steps' → logprob: -9.65421199798584
    7. '    
' → logprob: -11.27921199798584
    8. 'return' → logprob: -11.40421199798584
    9. 'step' → logprob: -11.90421199798584
    10. '```' → logprob: -12.15421199798584

Token 306: ' #' (ID: 1069)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.11726328730583191
    2. 'steps' → logprob: -2.3672633171081543
    3. '   ' → logprob: -4.242263317108154
    4. 'return' → logprob: -6.992263317108154
    5. 'result' → logprob: -7.242263317108154
    6. ' if' → logprob: -7.742263317108154
    7. 'import' → logprob: -8.617262840270996
    8. 'res' → logprob: -9.617262840270996
    9. ' steps' → logprob: -9.867262840270996
    10. 'pas' → logprob: -9.992262840270996

Token 307: ' Initial' (ID: 9209)
  Prédit: 'steps'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'steps' → logprob: -0.38984858989715576
    2. 'if' → logprob: -1.1398485898971558
    3. 'result' → logprob: -7.014848709106445
    4. ' if' → logprob: -7.514848709106445
    5. 'import' → logprob: -8.014848709106445
    6. 'print' → logprob: -8.264848709106445
    7. ' steps' → logprob: -8.514848709106445
    8. '#' → logprob: -8.639848709106445
    9. 'res' → logprob: -9.389848709106445
    10. 'ans' → logprob: -9.389848709106445

Token 308: 'iser' (ID: 7466)
  Prédit: 'steps'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'steps' → logprob: -0.03850145637989044
    2. '_steps' → logprob: -4.038501262664795
    3. 'er' → logprob: -4.663501262664795
    4. 'ize' → logprob: -5.163501262664795
    5. 'iser' → logprob: -5.788501262664795
    6. 'count' → logprob: -8.038501739501953
    7. ' steps' → logprob: -8.038501739501953
    8. 'res' → logprob: -8.663501739501953
    9. 'result' → logprob: -8.663501739501953
    10. '   ' → logprob: -8.788501739501953

Token 309: ' le' (ID: 505)
  Prédit: 'steps'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'steps' → logprob: -0.5770485401153564
    2. ' steps' → logprob: -0.8270485401153564
    3. 'result' → logprob: -8.077048301696777
    4. '   ' → logprob: -8.702048301696777
    5. ' result' → logprob: -8.827048301696777
    6. 'res' → logprob: -8.827048301696777
    7. 'step' → logprob: -9.452048301696777
    8. 'ans' → logprob: -9.952048301696777
    9. ' étapes' → logprob: -10.452048301696777
    10. 'et' → logprob: -10.452048301696777

Token 310: ' compteur' (ID: 163344)
  Prédit: 'steps'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'steps' → logprob: -0.013780633918941021
    2. 'result' → logprob: -4.63878059387207
    3. ' steps' → logprob: -6.38878059387207
    4. 'count' → logprob: -7.26378059387207
    5. 'res' → logprob: -8.13878059387207
    6. 'step' → logprob: -8.38878059387207
    7. 'ans' → logprob: -8.51378059387207
    8. 'et' → logprob: -8.51378059387207
    9. 'pas' → logprob: -8.51378059387207
    10. 'total' → logprob: -8.88878059387207

Token 311: ' d' (ID: 272)
  Prédit: ' steps'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' steps' → logprob: -0.2220195084810257
    2. 'steps' → logprob: -1.9720195531845093
    3. '   ' → logprob: -2.8470194339752197
    4. ' step' → logprob: -7.597019672393799
    5. ' d' → logprob: -8.09701919555664
    6. ' des' → logprob: -8.34701919555664
    7. ' de' → logprob: -8.97201919555664
    8. ' count' → logprob: -9.22201919555664
    9. ' counter' → logprob: -9.72201919555664
    10. ' total' → logprob: -9.72201919555664

Token 312: ''ét' (ID: 23771)
  Prédit: ' étapes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' étapes' → logprob: -0.18288713693618774
    2. '_steps' → logprob: -3.057887077331543
    3. 'et' → logprob: -3.557887077331543
    4. ' steps' → logprob: -3.807887077331543
    5. '_' → logprob: -3.932887077331543
    6. 'ét' → logprob: -4.182887077331543
    7. 'steps' → logprob: -4.432887077331543
    8. '_et' → logprob: -4.682887077331543
    9. ''ét' → logprob: -5.057887077331543
    10. 'e' → logprob: -6.057887077331543

Token 313: 'apes' (ID: 11864)
  Prédit: 'apes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'apes' → logprob: -0.00015705463010817766
    2. 'ape' → logprob: -9.375157356262207
    3. 't' → logprob: -11.250157356262207
    4. '   ' → logprob: -11.500157356262207
    5. '#' → logprob: -12.000157356262207
    6. '=' → logprob: -12.000157356262207
    7. 'ap' → logprob: -12.375157356262207
    8. '`' → logprob: -12.625157356262207
    9. '```' → logprob: -12.750157356262207
    10. '``' → logprob: -13.125157356262207

Token 314: ' à' (ID: 1221)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20379891991615295
    2. 'steps' → logprob: -2.07879900932312
    3. ' steps' → logprob: -2.82879900932312
    4. 'count' → logprob: -9.4537992477417
    5. 'step' → logprob: -10.7037992477417
    6. '
' → logprob: -10.8287992477417
    7. '_steps' → logprob: -11.2037992477417
    8. '    
' → logprob: -11.4537992477417
    9. ' step' → logprob: -11.4537992477417
    10. 'result' → logprob: -11.7037992477417

Token 315: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.012602772563695908
    2. ' ' → logprob: -4.387602806091309
    3. '0' → logprob: -9.762602806091309
    4. '2' → logprob: -10.762602806091309
    5. '   ' → logprob: -11.387602806091309
    6. '  ' → logprob: -13.637602806091309
    7. ' ' → logprob: -14.387602806091309
    8. '```' → logprob: -15.012602806091309
    9. '    ' → logprob: -15.262602806091309
    10. '`' → logprob: -16.012601852416992

Token 316: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.2007883671903983e-05
    2. '0' → logprob: -11.000021934509277
    3. ' ' → logprob: -12.500021934509277
    4. '   ' → logprob: -13.750021934509277
    5. '(' → logprob: -16.875022888183594
    6. '2' → logprob: -17.000022888183594
    7. 'ans' → logprob: -17.187522888183594
    8. '-' → logprob: -17.250022888183594
    9. 'max' → logprob: -17.562522888183594
    10. 'int' → logprob: -17.750022888183594

Token 317: ' (' (ID: 350)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05018642917275429
    2. 'steps' → logprob: -3.0501863956451416
    3. '
' → logprob: -7.050186634063721
    4. ' steps' → logprob: -7.425186634063721
    5. '    
' → logprob: -9.925186157226562
    6. 'step' → logprob: -10.425186157226562
    7. 'count' → logprob: -10.425186157226562
    8. '\n' → logprob: -11.800186157226562
    9. 'n' → logprob: -12.050186157226562
    10. '
' → logprob: -12.925186157226562

Token 318: 'le' (ID: 282)
  Prédit: 'steps'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'steps' → logprob: -0.2719779312610626
    2. ' steps' → logprob: -1.6469779014587402
    3. '   ' → logprob: -3.7719779014587402
    4. ')' → logprob: -4.64697790145874
    5. ' car' → logprob: -5.77197790145874
    6. 'car' → logprob: -6.02197790145874
    7. 'result' → logprob: -6.52197790145874
    8. 'count' → logprob: -7.39697790145874
    9. 'step' → logprob: -7.39697790145874
    10. 'ét' → logprob: -7.52197790145874

Token 319: ' premier' (ID: 15506)
  Prédit: ' premier'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' premier' → logprob: -0.2955225110054016
    2. '1' → logprob: -2.295522451400757
    3. 'prem' → logprob: -2.545522451400757
    4. ' first' → logprob: -3.295522451400757
    5. ' ' → logprob: -4.420522689819336
    6. ' traitement' → logprob: -5.545522689819336
    7. 'e' → logprob: -5.670522689819336
    8. 'first' → logprob: -5.920522689819336
    9. ' première' → logprob: -6.170522689819336
    10. 'irst' → logprob: -6.170522689819336

Token 320: ' élément' (ID: 99627)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.10327549278736115
    2. ' )' → logprob: -2.9782755374908447
    3. ' pas' → logprob: -3.8532755374908447
    4. ' étape' → logprob: -4.978275299072266
    5. ' step' → logprob: -5.228275299072266
    6. 'step' → logprob: -5.853275299072266
    7. 'pas' → logprob: -6.103275299072266
    8. ' espace' → logprob: -6.728275299072266
    9. ' ' → logprob: -6.853275299072266
    10. 'e' → logprob: -7.228275299072266

Token 321: ' déjà' (ID: 21229)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.03846096247434616
    2. '   ' → logprob: -4.663460731506348
    3. ' traité' → logprob: -4.788460731506348
    4. ' )' → logprob: -5.163460731506348
    5. ' est' → logprob: -5.663460731506348
    6. ' a' → logprob: -5.913460731506348
    7. ' trait' → logprob: -6.288460731506348
    8. 'trait' → logprob: -6.663460731506348
    9. ',' → logprob: -7.288460731506348
    10. ' déjà' → logprob: -7.413460731506348

Token 322: ' traité' (ID: 160836)
  Prédit: 'trait'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'trait' → logprob: -0.3260965347290039
    2. ' traité' → logprob: -1.326096534729004
    3. ' trait' → logprob: -4.701096534729004
    4. 'tra' → logprob: -7.076096534729004
    5. 'process' → logprob: -7.076096534729004
    6. 'proces' → logprob: -7.826096534729004
    7. 'pris' → logprob: -7.951096534729004
    8. ' pris' → logprob: -8.201096534729004
    9. ' compt' → logprob: -8.451096534729004
    10. ' ' → logprob: -8.701096534729004

Token 323: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.007331525441259146
    2. '   ' → logprob: -5.007331371307373
    3. ' )' → logprob: -7.507331371307373
    4. ')
' → logprob: -9.882331848144531
    5. '
' → logprob: -12.007331848144531
    6. ',' → logprob: -13.132331848144531
    7. '  ' → logprob: -13.132331848144531
    8. ' ' → logprob: -13.757331848144531
    9. '    ' → logprob: -14.007331848144531
    10. ' ' → logprob: -14.257331848144531

Token 324: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18504221737384796
    2. 'steps' → logprob: -1.8100422620773315
    3. ' steps' → logprob: -5.560042381286621
    4. '
' → logprob: -7.185042381286621
    5. 'count' → logprob: -8.435042381286621
    6. '    
' → logprob: -8.810042381286621
    7. 'result' → logprob: -9.435042381286621
    8. '\n' → logprob: -9.810042381286621
    9. 'n' → logprob: -9.935042381286621
    10. 'step' → logprob: -10.435042381286621

Token 325: ' p' (ID: 275)
  Prédit: 'steps'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'steps' → logprob: -0.0015623578801751137
    2. 'ans' → logprob: -7.751562595367432
    3. ' steps' → logprob: -8.251562118530273
    4. 'res' → logprob: -8.251562118530273
    5. 'count' → logprob: -8.501562118530273
    6. 'et' → logprob: -8.626562118530273
    7. 'step' → logprob: -8.876562118530273
    8. 'result' → logprob: -9.876562118530273
    9. '   ' → logprob: -11.001562118530273
    10. 'answer' → logprob: -12.251562118530273

Token 326: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.019961407408118248
    2. '=' → logprob: -4.394961357116699
    3. 'rocess' → logprob: -5.394961357116699
    4. 'as' → logprob: -6.644961357116699
    5. '_steps' → logprob: -7.644961357116699
    6. 'ro' → logprob: -8.6449613571167
    7. 'ass' → logprob: -8.6449613571167
    8. 'steps' → logprob: -8.6449613571167
    9. 'r' → logprob: -9.0199613571167
    10. 'rocessing' → logprob: -9.3949613571167

Token 327: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00043138445471413434
    2. ' ' → logprob: -7.750431537628174
    3. '   ' → logprob: -14.250431060791016
    4. '  ' → logprob: -17.875431060791016
    5. '0' → logprob: -18.125431060791016
    6. 'int' → logprob: -20.812931060791016
    7. '```' → logprob: -20.812931060791016
    8. '2' → logprob: -20.875431060791016
    9. '[' → logprob: -21.125431060791016
    10. '    ' → logprob: -21.187931060791016

Token 328: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -6.630610641877865e-06
    2. ' ' → logprob: -12.000006675720215
    3. '0' → logprob: -15.625006675720215
    4. '   ' → logprob: -16.0000057220459
    5. 'k' → logprob: -18.3125057220459
    6. 'n' → logprob: -18.4375057220459
    7. 'int' → logprob: -18.4375057220459
    8. '  ' → logprob: -18.7500057220459
    9. 'a' → logprob: -18.9375057220459
    10. '2' → logprob: -18.9375057220459

Token 329: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02377389185130596
    2. '
' → logprob: -4.648773670196533
    3. 'while' → logprob: -4.773773670196533
    4. 'if' → logprob: -5.898773670196533
    5. ' while' → logprob: -6.648773670196533
    6. '    
' → logprob: -7.398773670196533
    7. ' if' → logprob: -7.398773670196533
    8. '\n' → logprob: -10.148774147033691
    9. '  
' → logprob: -10.398774147033691
    10. '	while' → logprob: -10.648774147033691

Token 330: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006015775725245476
    2. 'if' → logprob: -5.381015777587891
    3. 'while' → logprob: -6.756015777587891
    4. ' if' → logprob: -9.38101577758789
    5. '    
' → logprob: -9.63101577758789
    6. ' while' → logprob: -10.13101577758789
    7. '
' → logprob: -10.25601577758789
    8. '    ' → logprob: -12.88101577758789
    9. 'import' → logprob: -14.88101577758789
    10. '   
' → logprob: -14.88101577758789

Token 331: ' if' (ID: 538)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.20211121439933777
    2. 'if' (adapté à ' if') → logprob: -1.9521112442016602
    3. '   ' → logprob: -3.20211124420166
    4. ' while' → logprob: -8.07711124420166
    5. ' if' → logprob: -11.07711124420166
    6. 'p' → logprob: -11.20211124420166
    7. '	while' → logprob: -12.82711124420166
    8. 'import' → logprob: -13.20211124420166
    9. 'While' → logprob: -14.70211124420166
    10. 'from' → logprob: -14.95211124420166

Token 332: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.11487217247486115
    2. 'n' → logprob: -2.2398722171783447
    3. ' k' → logprob: -6.614871978759766
    4. 'k' → logprob: -7.364871978759766
    5. ' p' → logprob: -10.114871978759766
    6. 'p' → logprob: -11.489871978759766
    7. ' ' → logprob: -11.739871978759766
    8. '	n' → logprob: -12.364871978759766
    9. ' ' → logprob: -12.364871978759766
    10. ' not' → logprob: -13.114871978759766

Token 333: ' <=' (ID: 5017)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.2718399167060852
    2. '<=' → logprob: -2.1468398571014404
    3. ' >' → logprob: -2.2718398571014404
    4. ' <=' → logprob: -4.0218400955200195
    5. '>=' → logprob: -10.27184009552002
    6. '<' → logprob: -10.39684009552002
    7. ' ' → logprob: -11.27184009552002
    8. '==' → logprob: -11.27184009552002
    9. '%' → logprob: -11.27184009552002
    10. '   ' → logprob: -12.77184009552002

Token 334: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00033581978641450405
    2. ' ' → logprob: -8.000335693359375
    3. '   ' → logprob: -15.000335693359375
    4. '  ' → logprob: -17.125335693359375
    5. '```' → logprob: -18.375335693359375
    6. '۰' → logprob: -18.625335693359375
    7. '    ' → logprob: -18.750335693359375
    8. ' ' → logprob: -19.000335693359375
    9. 'k' → logprob: -19.125335693359375
    10. '=' → logprob: -19.500335693359375

Token 335: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -4.246537173457909e-06
    2. ' ' → logprob: -12.375003814697266
    3. '   ' → logprob: -18.625003814697266
    4. '۰' → logprob: -18.875003814697266
    5. '00' → logprob: -19.000003814697266
    6. 'p' → logprob: -19.750003814697266
    7. 'k' → logprob: -19.875003814697266
    8. '```' → logprob: -19.875003814697266
    9. 'zero' → logprob: -20.250003814697266
    10. '  ' → logprob: -20.500003814697266

Token 336: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0018372491467744112
    2. ':
' → logprob: -6.376837253570557
    3. ':return' → logprob: -9.126836776733398
    4. '   ' → logprob: -11.251836776733398
    5. '       ' → logprob: -11.876836776733398
    6. ' :' → logprob: -12.126836776733398
    7. ':
' → logprob: -14.876836776733398
    8. '):' → logprob: -15.251836776733398
    9. ',' → logprob: -16.1268367767334
    10. ' :
' → logprob: -16.5018367767334

Token 337: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0003123439964838326
    2. ':' → logprob: -8.375312805175781
    3. '   ' → logprob: -10.000312805175781
    4. ':return' → logprob: -11.125312805175781
    5. 'return' → logprob: -11.500312805175781
    6. ' return' → logprob: -11.625312805175781
    7. ':
' → logprob: -14.000312805175781
    8. '	   ' → logprob: -14.750312805175781
    9. '     ' → logprob: -15.375312805175781
    10. '      ' → logprob: -15.625312805175781

Token 338: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.04158565774559975
    2. '       ' → logprob: -3.791585683822632
    3. 'return' → logprob: -4.416585445404053
    4. '   ' → logprob: -5.541585445404053
    5. ' print' → logprob: -6.166585445404053
    6. ' return' → logprob: -9.791585922241211
    7. '```' → logprob: -10.916585922241211
    8. '           ' → logprob: -13.791585922241211
    9. '    ' → logprob: -13.916585922241211
    10. '	print' → logprob: -14.041585922241211

Token 339: ' Si' (ID: 7832)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.019606688991189003
    2. ' print' → logprob: -4.519606590270996
    3. 'return' → logprob: -5.144606590270996
    4. '   ' → logprob: -6.019606590270996
    5. ' return' → logprob: -8.269606590270996
    6. '    ' → logprob: -13.144606590270996
    7. '```' → logprob: -13.894606590270996
    8. '       ' → logprob: -14.269606590270996
    9. ' ' → logprob: -14.519606590270996
    10. '	print' → logprob: -15.019606590270996

Token 340: ' tous' (ID: 10688)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.4354415833950043
    2. ' p' → logprob: -2.060441493988037
    3. 'n' → logprob: -2.185441493988037
    4. 'p' → logprob: -3.560441493988037
    5. 'return' → logprob: -3.560441493988037
    6. ' return' → logprob: -4.435441493988037
    7. ' la' → logprob: -4.685441493988037
    8. '   ' → logprob: -4.935441493988037
    9. ' True' → logprob: -4.935441493988037
    10. ' le' → logprob: -5.060441493988037

Token 341: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.11706449091434479
    2. 'les' → logprob: -2.2420644760131836
    3. ' ont' → logprob: -6.617064476013184
    4. ' sont' → logprob: -7.617064476013184
    5. 'ont' → logprob: -7.617064476013184
    6. 'elements' → logprob: -7.867064476013184
    7. 's' → logprob: -8.242064476013184
    8. '#' → logprob: -8.242064476013184
    9. ' elements' → logprob: -8.742064476013184
    10. ' ' → logprob: -8.742064476013184

Token 342: ' éléments' (ID: 57375)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.06266704946756363
    2. ' éléments' → logprob: -2.81266713142395
    3. 'él' → logprob: -7.437666893005371
    4. 'elements' → logprob: -10.187666893005371
    5. 'é' → logprob: -10.312666893005371
    6. 'n' → logprob: -10.937666893005371
    7. '#' → logprob: -12.437666893005371
    8. ' n' → logprob: -13.437666893005371
    9. ' élément' → logprob: -13.687666893005371
    10. 'a' → logprob: -13.687666893005371

Token 343: ' sont' (ID: 5242)
  Prédit: ' sont'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sont' → logprob: -0.6826666593551636
    2. 'ont' → logprob: -1.3076666593551636
    3. ' ont' → logprob: -1.9326666593551636
    4. 's' → logprob: -2.557666778564453
    5. ' are' → logprob: -7.057666778564453
    6. ''ont' → logprob: -8.307666778564453
    7. 'are' → logprob: -8.807666778564453
    8. ' have' → logprob: -8.807666778564453
    9. '#' → logprob: -8.932666778564453
    10. 'dé' → logprob: -9.307666778564453

Token 344: ' déjà' (ID: 21229)
  Prédit: ' déjà'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' déjà' → logprob: -0.5658028721809387
    2. 'dé' → logprob: -1.315802812576294
    3. 'trait' → logprob: -1.940802812576294
    4. ' trait' → logprob: -4.065803050994873
    5. ' dé' → logprob: -6.440803050994873
    6. 'd' → logprob: -7.565803050994873
    7. ' already' → logprob: -7.690803050994873
    8. 'already' → logprob: -8.565802574157715
    9. 't' → logprob: -8.815802574157715
    10. 'process' → logprob: -9.190802574157715

Token 345: ' trait' (ID: 15458)
  Prédit: 'trait'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'trait' → logprob: -0.07903464883565903
    2. ' trait' → logprob: -2.5790345668792725
    3. 'process' → logprob: -9.454034805297852
    4. 'processed' → logprob: -11.329034805297852
    5. 'tra' → logprob: -11.454034805297852
    6. 'pris' → logprob: -11.579034805297852
    7. 'traits' → logprob: -11.704034805297852
    8. 'proces' → logprob: -12.079034805297852
    9. 'tr' → logprob: -12.579034805297852
    10. 't' → logprob: -12.579034805297852

Token 346: 'és' (ID: 1756)
  Prédit: 'és'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'és' → logprob: -3.1782583391759545e-05
    2. 'é' → logprob: -10.750031471252441
    3. 'es' → logprob: -12.250031471252441
    4. '   ' → logprob: -13.375031471252441
    5. '```' → logprob: -13.500031471252441
    6. 's' → logprob: -13.625031471252441
    7. 'ès' → logprob: -14.375031471252441
    8. 'ées' → logprob: -15.000031471252441
    9. 'ÉS' → logprob: -15.375031471252441
    10. '       ' → logprob: -16.375032424926758

Token 347: ' à' (ID: 1221)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.1456059217453003
    2. ',' → logprob: -2.02060604095459
    3. ':' → logprob: -6.02060604095459
    4. '   ' → logprob: -8.14560604095459
    5. ',
' → logprob: -9.77060604095459
    6. 'return' → logprob: -10.02060604095459
    7. '           ' → logprob: -10.52060604095459
    8. ':return' → logprob: -10.52060604095459
    9. ':
' → logprob: -10.89560604095459
    10. ' ,' → logprob: -11.52060604095459

Token 348: ' la' (ID: 557)
  Prédit: 'ce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ce' → logprob: -0.4560723602771759
    2. 'c' → logprob: -1.3310723304748535
    3. 'la' → logprob: -2.9560723304748535
    4. 'l' → logprob: -3.2060723304748535
    5. ' ce' → logprob: -5.4560723304748535
    6. 'cet' → logprob: -6.2060723304748535
    7. 'this' → logprob: -6.5810723304748535
    8. ' cette' → logprob: -7.3310723304748535
    9. 'prem' → logprob: -8.331072807312012
    10. ' la' → logprob: -8.581072807312012

Token 349: ' première' (ID: 23423)
  Prédit: 'ce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ce' → logprob: -0.6066213846206665
    2. ' ce' → logprob: -1.9816213846206665
    3. 'prem' → logprob: -1.9816213846206665
    4. 'c' → logprob: -2.106621265411377
    5. 'cet' → logprob: -3.356621265411377
    6. ' cette' → logprob: -4.856621265411377
    7. 'ét' → logprob: -5.606621265411377
    8. 'part' → logprob: -5.856621265411377
    9. 'l' → logprob: -6.231621265411377
    10. 'this' → logprob: -6.731621265411377

Token 350: ' étape' (ID: 83661)
  Prédit: ' étape'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' étape' → logprob: -0.25290247797966003
    2. 'ét' → logprob: -1.5029025077819824
    3. ' ' → logprob: -8.002902030944824
    4. 'ligne' → logprob: -8.502902030944824
    5. ' ligne' → logprob: -8.752902030944824
    6. 'é' → logprob: -9.752902030944824
    7. '   ' → logprob: -9.752902030944824
    8. 'et' → logprob: -10.002902030944824
    9. 'fois' → logprob: -10.502902030944824
    10. ' étapes' → logprob: -11.127902030944824

Token 351: ',' (ID: 11)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.028281936421990395
    2. ':' → logprob: -3.7782819271087646
    3. ',' → logprob: -6.028282165527344
    4. ':
' → logprob: -6.528282165527344
    5. ':return' → logprob: -7.528282165527344
    6. '   ' → logprob: -7.653282165527344
    7. 'return' → logprob: -9.403282165527344
    8. '           ' → logprob: -10.903282165527344
    9. ' return' → logprob: -11.028282165527344
    10. ',
' → logprob: -11.278282165527344

Token 352: ' il' (ID: 1793)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.050346169620752335
    2. '   ' → logprob: -4.425346374511719
    3. ' print' → logprob: -4.425346374511719
    4. ' return' → logprob: -4.550346374511719
    5. 'print' → logprob: -4.925346374511719
    6. 'return' → logprob: -4.925346374511719
    7. '    ' → logprob: -10.425346374511719
    8. '           ' → logprob: -11.175346374511719
    9. '      ' → logprob: -11.425346374511719
    10. '     ' → logprob: -11.800346374511719

Token 353: ' ne' (ID: 453)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0074343509040772915
    2. '       ' → logprob: -5.257434368133545
    3. ' faut' → logprob: -7.382434368133545
    4. 'return' → logprob: -8.007433891296387
    5. ' return' → logprob: -8.007433891296387
    6. '  ' → logprob: -8.507433891296387
    7. 'eturn' → logprob: -9.007433891296387
    8. 'print' → logprob: -9.132433891296387
    9. 'f' → logprob: -9.132433891296387
    10. ' suffit' → logprob: -9.257433891296387

Token 354: ' faut' (ID: 17821)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.053226735442876816
    2. ' faut' → logprob: -3.3032267093658447
    3. '   ' → logprob: -4.928226947784424
    4. 'n' → logprob: -6.178226947784424
    5. 'return' → logprob: -6.428226947784424
    6. ' return' → logprob: -6.928226947784424
    7. ' f' → logprob: -7.178226947784424
    8. ' ' → logprob: -7.178226947784424
    9. ' n' → logprob: -7.553226947784424
    10. '  ' → logprob: -7.678226947784424

Token 355: ' qu' (ID: 474)
  Prédit: 'pas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pas' → logprob: -0.08164051175117493
    2. 'r' → logprob: -2.5816404819488525
    3. 'plus' → logprob: -6.081640720367432
    4. 'print' → logprob: -8.456640243530273
    5. '   ' → logprob: -9.081640243530273
    6. ' rien' → logprob: -9.956640243530273
    7. ' pas' → logprob: -10.331640243530273
    8. 'auc' → logprob: -11.206640243530273
    9. 'que' → logprob: -11.581640243530273
    10. 'aff' → logprob: -12.456640243530273

Token 356: ''une' (ID: 13337)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.26176995038986206
    2. 'u' → logprob: -2.511770009994507
    3. 'pas' → logprob: -2.761770009994507
    4. ''un' → logprob: -2.886770009994507
    5. ''une' → logprob: -4.136769771575928
    6. ''' → logprob: -5.886769771575928
    7. ' pas' → logprob: -6.261769771575928
    8. 'un' → logprob: -6.261769771575928
    9. ''à' → logprob: -6.886769771575928
    10. 'une' → logprob: -7.011769771575928

Token 357: ' étape' (ID: 83661)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.27319827675819397
    2. ' étape' → logprob: -1.6481982469558716
    3. 'ét' → logprob: -3.898198366165161
    4. ' print' → logprob: -3.898198366165161
    5. 'return' → logprob: -6.398198127746582
    6. '   ' → logprob: -7.273198127746582
    7. 'et' → logprob: -7.523198127746582
    8. 'step' → logprob: -7.523198127746582
    9. 'ligne' → logprob: -7.523198127746582
    10. 'fois' → logprob: -7.898198127746582

Token 358: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.22631527483463287
    2. '   ' → logprob: -1.6013152599334717
    3. 'return' → logprob: -7.351315498352051
    4. '
' → logprob: -9.35131549835205
    5. ',' → logprob: -10.10131549835205
    6. '           ' → logprob: -10.22631549835205
    7. ' return' → logprob: -10.47631549835205
    8. '.' → logprob: -10.85131549835205
    9. '    
' → logprob: -10.97631549835205
    10. '	return' → logprob: -12.10131549835205

Token 359: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0013741609873250127
    2. '   ' → logprob: -6.751374244689941
    3. 'return' → logprob: -8.626374244689941
    4. ' return' → logprob: -11.251374244689941
    5. '           ' → logprob: -12.126374244689941
    6. '	' → logprob: -13.501374244689941
    7. '      ' → logprob: -14.001374244689941
    8. '
' → logprob: -14.251374244689941
    9. '	return' → logprob: -14.626374244689941
    10. ',' → logprob: -14.751374244689941

Token 360: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.3198149800300598
    2. 'return' → logprob: -1.319814920425415
    3. '   ' → logprob: -5.194815158843994
    4. ' print' → logprob: -7.569815158843994
    5. ' return' → logprob: -7.694815158843994
    6. 'p' → logprob: -11.694814682006836
    7. '       ' → logprob: -12.194814682006836
    8. '    ' → logprob: -14.069814682006836
    9. '```' → logprob: -14.694814682006836
    10. 'pass' → logprob: -15.444814682006836

Token 361: '(p' (ID: 2407)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006752071436494589
    2. '(p' → logprob: -5.006752014160156
    3. '1' → logprob: -10.256752014160156
    4. ' (' → logprob: -14.506752014160156
    5. '("' → logprob: -14.506752014160156
    6. '('' → logprob: -15.256752014160156
    7. '(
' → logprob: -15.256752014160156
    8. 'p' → logprob: -15.631752014160156
    9. '((' → logprob: -17.381752014160156
    10. '(s' → logprob: -19.131752014160156

Token 362: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.023253632709383965
    2. ')
' → logprob: -3.7732536792755127
    3. ')
' → logprob: -11.898253440856934
    4. ')return' → logprob: -14.148253440856934
    5. '   ' → logprob: -15.023253440856934
    6. ' )' → logprob: -15.148253440856934
    7. ')

' → logprob: -16.89825439453125
    8. '))' → logprob: -17.39825439453125
    9. ')#' → logprob: -17.64825439453125
    10. ' )
' → logprob: -17.77325439453125

Token 363: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0005523175350390375
    2. 'else' → logprob: -7.625552177429199
    3. '       ' → logprob: -9.7505521774292
    4. ' else' → logprob: -12.2505521774292
    5. 'return' → logprob: -14.2505521774292
    6. 'elif' → logprob: -15.1255521774292
    7. '```' → logprob: -16.125553131103516
    8. '    
' → logprob: -16.375553131103516
    9. 'import' → logprob: -16.875553131103516
    10. '   ' → logprob: -17.375553131103516

Token 364: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.04376671463251114
    2. '   ' → logprob: -3.293766736984253
    3. ' else' → logprob: -5.168766498565674
    4. 'elif' → logprob: -11.043766975402832
    5. '	else' → logprob: -14.168766975402832
    6. 'el' → logprob: -16.168766021728516
    7. ' elif' → logprob: -16.418766021728516
    8. '```' → logprob: -16.418766021728516
    9. '_else' → logprob: -16.418766021728516
    10. ' ' → logprob: -16.793766021728516

Token 365: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.029811009764671326
    2. ':
' → logprob: -3.529810905456543
    3. '       ' → logprob: -10.529810905456543
    4. '   ' → logprob: -10.904810905456543
    5. ' :' → logprob: -11.529810905456543
    6. ' :
' → logprob: -13.154810905456543
    7. ':
' → logprob: -13.404810905456543
    8. ':

' → logprob: -13.529810905456543
    9. ',' → logprob: -15.154810905456543
    10. '    ' → logprob: -15.529810905456543

Token 366: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.010889705270528793
    2. '   ' → logprob: -4.635889530181885
    3. '
' → logprob: -7.385889530181885
    4. '    ' → logprob: -8.635890007019043
    5. '    
' → logprob: -9.260890007019043
    6. ':
' → logprob: -9.635890007019043
    7. ' p' → logprob: -10.385890007019043
    8. '	   ' → logprob: -10.760890007019043
    9. ':' → logprob: -11.010890007019043
    10. '        
' → logprob: -11.385890007019043

Token 367: ' #' (ID: 1069)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.22307372093200684
    2. '       ' → logprob: -2.348073720932007
    3. ' p' → logprob: -3.098073720932007
    4. 'import' → logprob: -3.098073720932007
    5. 'steps' → logprob: -5.223073959350586
    6. '   ' → logprob: -5.473073959350586
    7. ' steps' → logprob: -6.848073959350586
    8. ' import' → logprob: -6.973073959350586
    9. 'from' → logprob: -7.223073959350586
    10. '#' (adapté à ' #') → logprob: -7.348073959350586

Token 368: ' Sinon' (ID: 154924)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.15087391436100006
    2. 'import' → logprob: -2.900873899459839
    3. ' p' → logprob: -3.400873899459839
    4. 'steps' → logprob: -3.900873899459839
    5. '#' → logprob: -4.650874137878418
    6. '   ' → logprob: -5.400874137878418
    7. 'while' → logprob: -5.775874137878418
    8. '       ' → logprob: -5.775874137878418
    9. 'pas' → logprob: -6.025874137878418
    10. 'q' → logprob: -6.275874137878418

Token 369: ',' (ID: 11)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.16122975945472717
    2. ':
' → logprob: -2.1612298488616943
    3. '           ' → logprob: -3.7862298488616943
    4. '       ' → logprob: -4.661229610443115
    5. ' :' → logprob: -7.411229610443115
    6. '   ' → logprob: -8.286230087280273
    7. '        ' → logprob: -8.411230087280273
    8. ' :
' → logprob: -9.411230087280273
    9. ',' → logprob: -9.536230087280273
    10. 'while' → logprob: -9.911230087280273

Token 370: ' calc' (ID: 25691)
  Prédit: ' p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' p' → logprob: -0.7443364858627319
    2. '       ' → logprob: -0.8693364858627319
    3. 'import' → logprob: -3.1193366050720215
    4. 'p' → logprob: -3.4943366050720215
    5. ' import' → logprob: -4.7443366050720215
    6. ' while' → logprob: -4.9943366050720215
    7. ' steps' → logprob: -5.2443366050720215
    8. 'while' → logprob: -6.1193366050720215
    9. 'steps' → logprob: -6.3693366050720215
    10. '   ' → logprob: -6.3693366050720215

Token 371: 'ule' (ID: 1601)
  Prédit: 'ule'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ule' → logprob: -0.31775766611099243
    2. 'uler' → logprob: -1.4427576065063477
    3. 'ulate' → logprob: -4.192757606506348
    4. 'ul' → logprob: -4.442757606506348
    5. '   ' → logprob: -5.567757606506348
    6. '       ' → logprob: -5.942757606506348
    7. 'er' → logprob: -7.442757606506348
    8. 'uer' → logprob: -7.692757606506348
    9. '#' → logprob: -8.442757606506348
    10. 'u' → logprob: -8.567757606506348

Token 372: ' le' (ID: 505)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.026382051408290863
    2. '       ' → logprob: -4.151381969451904
    3. 'z' → logprob: -5.651381969451904
    4. ' la' → logprob: -6.401381969451904
    5. '   ' → logprob: -7.151381969451904
    6. 'l' → logprob: -7.276381969451904
    7. 'lez' → logprob: -7.276381969451904
    8. 'er' → logprob: -7.401381969451904
    9. 'ler' → logprob: -8.026382446289062
    10. '        ' → logprob: -8.401382446289062

Token 373: ' nombre' (ID: 9733)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.19608528912067413
    2. 'import' → logprob: -2.696085214614868
    3. 'steps' → logprob: -2.821085214614868
    4. 'pas' → logprob: -3.821085214614868
    5. ' p' → logprob: -4.321085453033447
    6. 'nombre' → logprob: -5.071085453033447
    7. '   ' → logprob: -5.571085453033447
    8. '#' → logprob: -6.196085453033447
    9. ' nombre' → logprob: -7.196085453033447
    10. '       ' → logprob: -7.196085453033447

Token 374: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.5906844735145569
    2. '       ' → logprob: -1.340684413909912
    3. 'd' → logprob: -2.215684413909912
    4. '_' → logprob: -3.590684413909912
    5. ' de' → logprob: -3.965684413909912
    6. '        ' → logprob: -4.215684413909912
    7. '_d' → logprob: -5.340684413909912
    8. '   ' → logprob: -6.215684413909912
    9. '           ' → logprob: -6.465684413909912
    10. ' =' → logprob: -6.715684413909912

Token 375: ''ét' (ID: 23771)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.03437506780028343
    2. '_steps' → logprob: -4.284375190734863
    3. ''ét' → logprob: -4.784375190734863
    4. ' d' → logprob: -5.784375190734863
    5. '_pas' → logprob: -6.534375190734863
    6. 'd' → logprob: -6.659375190734863
    7. '_p' → logprob: -7.034375190734863
    8. '_d' → logprob: -7.034375190734863
    9. 'ét' → logprob: -7.034375190734863
    10. 'steps' → logprob: -8.159375190734863

Token 376: 'apes' (ID: 11864)
  Prédit: 'apes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'apes' → logprob: -0.0005698331515304744
    2. 'ape' → logprob: -7.750569820404053
    3. 'p' → logprob: -10.750570297241211
    4. '_steps' → logprob: -11.000570297241211
    5. '   ' → logprob: -11.375570297241211
    6. 'ap' → logprob: -11.625570297241211
    7. 'steps' → logprob: -11.875570297241211
    8. 'app' → logprob: -12.125570297241211
    9. ' étapes' → logprob: -12.250570297241211
    10. '_' → logprob: -12.250570297241211

Token 377: ' nécessaires' (ID: 74402)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.1697041541337967
    2. '   ' → logprob: -2.0447041988372803
    3. 'import' → logprob: -3.7947041988372803
    4. ' supplémentaires' → logprob: -6.919703960418701
    5. ' nécessaire' → logprob: -7.669703960418701
    6. ' nécessaires' → logprob: -7.919703960418701
    7. ' supplémentaire' → logprob: -7.919703960418701
    8. '        ' → logprob: -7.919703960418701
    9. '    ' → logprob: -8.04470443725586
    10. 'p' → logprob: -8.29470443725586

Token 378: ' pour' (ID: 1930)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.01702854596078396
    2. ' p' → logprob: -5.142028331756592
    3. ' for' → logprob: -5.892028331756592
    4. '   ' → logprob: -6.017028331756592
    5. ' =' → logprob: -6.517028331756592
    6. ' pour' → logprob: -6.767028331756592
    7. 'p' → logprob: -7.517028331756592
    8. '        ' → logprob: -7.767028331756592
    9. ',' → logprob: -8.14202880859375
    10. ' +=' → logprob: -8.26702880859375

Token 379: ' traiter' (ID: 105852)
  Prédit: ' traiter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' traiter' → logprob: -0.1867830604314804
    2. 'trait' → logprob: -2.3117830753326416
    3. 'p' → logprob: -3.5617830753326416
    4. 'tra' → logprob: -4.0617828369140625
    5. ' p' → logprob: -5.1867828369140625
    6. 'process' → logprob: -5.3117828369140625
    7. ' terminer' → logprob: -5.3117828369140625
    8. ' compléter' → logprob: -5.6867828369140625
    9. ' tra' → logprob: -6.0617828369140625
    10. ' trait' → logprob: -6.5617828369140625

Token 380: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.19536112248897552
    2. ' le' → logprob: -2.3203611373901367
    3. ' la' → logprob: -2.9453611373901367
    4. 'les' → logprob: -4.570361137390137
    5. '       ' → logprob: -5.320361137390137
    6. '   ' → logprob: -5.945361137390137
    7. ' n' → logprob: -6.570361137390137
    8. ' ' → logprob: -6.570361137390137
    9. 'le' → logprob: -6.695361137390137
    10. ' pour' → logprob: -7.320361137390137

Token 381: ' éléments' (ID: 57375)
  Prédit: ' éléments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' éléments' → logprob: -1.2498927116394043
    2. 'élé' → logprob: -1.3748927116394043
    3. 'n' → logprob: -1.8748927116394043
    4. ' (' → logprob: -2.4998927116394043
    5. ' n' → logprob: -2.7498927116394043
    6. ' rest' → logprob: -3.1248927116394043
    7. ' elements' → logprob: -3.1248927116394043
    8. '(n' → logprob: -4.124892711639404
    9. 'elements' → logprob: -4.374892711639404
    10. 'import' → logprob: -4.874892711639404

Token 382: ' rest' (ID: 2867)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.02017628587782383
    2. ' supplémentaires' → logprob: -4.270176410675049
    3. '   ' → logprob: -5.895176410675049
    4. 'p' → logprob: -7.520176410675049
    5. ' p' → logprob: -7.895176410675049
    6. '        ' → logprob: -7.895176410675049
    7. ' nécessaires' → logprob: -8.52017593383789
    8. 'rest' → logprob: -8.77017593383789
    9. ' restantes' → logprob: -8.77017593383789
    10. '           ' → logprob: -8.77017593383789

Token 383: 'ants' (ID: 2027)
  Prédit: 'ants'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ants' → logprob: -0.6487038135528564
    2. '       ' → logprob: -1.7737038135528564
    3. 'antes' → logprob: -2.3987038135528564
    4. '   ' → logprob: -2.3987038135528564
    5. 'ant' → logprob: -3.1487038135528564
    6. 'a' → logprob: -3.6487038135528564
    7. 'aux' → logprob: -4.773703575134277
    8. 'es' → logprob: -4.898703575134277
    9. 'és' → logprob: -5.273703575134277
    10. '-' → logprob: -5.523703575134277

Token 384: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0022367320489138365
    2. ' +' → logprob: -6.627236843109131
    3. '   ' → logprob: -8.127236366271973
    4. '           ' → logprob: -8.877236366271973
    5. '        ' → logprob: -9.127236366271973
    6. ' p' → logprob: -9.377236366271973
    7. 'import' → logprob: -10.002236366271973
    8. '	' → logprob: -10.127236366271973
    9. ' //' → logprob: -10.627236366271973
    10. '+' → logprob: -10.752236366271973

Token 385: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.001910073566250503
    2. ' p' → logprob: -7.001910209655762
    3. '   ' → logprob: -8.376910209655762
    4. ' while' → logprob: -8.626910209655762
    5. '        ' → logprob: -9.126910209655762
    6. '           ' → logprob: -9.501910209655762
    7. ' (' → logprob: -9.751910209655762
    8. '	' → logprob: -10.376910209655762
    9. 'p' → logprob: -10.501910209655762
    10. ' for' → logprob: -10.501910209655762

Token 386: ' if' (ID: 538)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.021932212635874748
    2. 'steps' → logprob: -4.521932125091553
    3. ' p' → logprob: -5.521932125091553
    4. 'import' → logprob: -5.771932125091553
    5. '       ' → logprob: -6.021932125091553
    6. '   ' → logprob: -7.896932125091553
    7. 'print' → logprob: -8.021932601928711
    8. 'while' → logprob: -8.021932601928711
    9. ' steps' → logprob: -9.396932601928711
    10. 'from' → logprob: -9.896932601928711

Token 387: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.07090892642736435
    2. ' n' → logprob: -2.695909023284912
    3. '(n' → logprob: -7.195909023284912
    4. 'k' → logprob: -8.695908546447754
    5. ' (' → logprob: -11.070908546447754
    6. '   ' → logprob: -11.070908546447754
    7. ' k' → logprob: -11.695908546447754
    8. ' ' → logprob: -12.445908546447754
    9. '	n' → logprob: -12.820908546447754
    10. 'p' → logprob: -12.945908546447754

Token 388: ' %' (ID: 1851)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -0.3869291841983795
    2. ' %' → logprob: -1.1369291543960571
    3. '%s' → logprob: -10.761929512023926
    4. '<=' → logprob: -11.136929512023926
    5. '%n' → logprob: -12.011929512023926
    6. ' <=' → logprob: -12.011929512023926
    7. '%d' → logprob: -12.886929512023926
    8. ' ' → logprob: -13.511929512023926
    9. '%c' → logprob: -13.511929512023926
    10. '%x' → logprob: -13.511929512023926

Token 389: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.029752686619758606
    2. ' k' → logprob: -3.529752731323242
    3. '(k' → logprob: -13.654752731323242
    4. '   ' → logprob: -14.904752731323242
    5. '	k' → logprob: -15.029752731323242
    6. ' ' → logprob: -16.529752731323242
    7. '=k' → logprob: -16.779752731323242
    8. '{k' → logprob: -16.904752731323242
    9. '_k' → logprob: -17.279752731323242
    10. '*k' → logprob: -17.654752731323242

Token 390: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.020624108612537384
    2. ' ==' → logprob: -3.8956241607666016
    3. ':' → logprob: -9.895624160766602
    4. '!=' → logprob: -10.770624160766602
    5. ')==' → logprob: -12.520624160766602
    6. '=' → logprob: -12.645624160766602
    7. ')' → logprob: -13.270624160766602
    8. '>' → logprob: -14.520624160766602
    9. ' !=' → logprob: -14.520624160766602
    10. '===' → logprob: -14.645624160766602

Token 391: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0028049908578395844
    2. ' ' → logprob: -5.877804756164551
    3. '   ' → logprob: -16.877805709838867
    4. '  ' → logprob: -17.377805709838867
    5. '=' → logprob: -18.752805709838867
    6. '۰' → logprob: -18.877805709838867
    7. '1' → logprob: -19.565305709838867
    8. 's' → logprob: -19.690305709838867
    9. '```' → logprob: -19.752805709838867
    10. ')' → logprob: -20.565305709838867

Token 392: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -9.615255839889869e-05
    2. ' ' → logprob: -9.250096321105957
    3. '  ' → logprob: -18.00009536743164
    4. '   ' → logprob: -18.25009536743164
    5. '1' → logprob: -18.87509536743164
    6. '=' → logprob: -19.37509536743164
    7. '    ' → logprob: -19.75009536743164
    8. '۰' → logprob: -20.12509536743164
    9. '>' → logprob: -20.62509536743164
    10. 'k' → logprob: -20.93759536743164

Token 393: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0008430993184447289
    2. ':
' → logprob: -7.125843048095703
    3. ' :' → logprob: -11.000843048095703
    4. '           ' → logprob: -11.625843048095703
    5. '):' → logprob: -12.000843048095703
    6. '       ' → logprob: -13.000843048095703
    7. '==' → logprob: -14.375843048095703
    8. ')' → logprob: -14.375843048095703
    9. ':return' → logprob: -14.375843048095703
    10. '   ' → logprob: -14.625843048095703

Token 394: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.006020514760166407
    2. '   ' → logprob: -6.006020545959473
    3. ':' → logprob: -6.756020545959473
    4. '       ' → logprob: -7.006020545959473
    5. '
' → logprob: -7.506020545959473
    6. ':
' → logprob: -8.256020545959473
    7. 'p' → logprob: -8.631020545959473
    8. '               ' → logprob: -8.756020545959473
    9. ' p' → logprob: -8.881020545959473
    10. 'n' → logprob: -9.756020545959473

Token 395: ' #' (ID: 1069)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.20818907022476196
    2. ' p' → logprob: -1.9581890106201172
    3. '           ' → logprob: -3.083189010620117
    4. 'print' → logprob: -7.458189010620117
    5. '(p' → logprob: -8.958189010620117
    6. '   ' → logprob: -9.333189010620117
    7. ' print' → logprob: -9.583189010620117
    8. '       ' → logprob: -9.583189010620117
    9. '               ' → logprob: -10.458189010620117
    10. 'steps' → logprob: -10.833189010620117

Token 396: ' Si' (ID: 7832)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.08926855772733688
    2. ' p' → logprob: -2.964268445968628
    3. '           ' → logprob: -3.464268445968628
    4. 'print' → logprob: -6.589268684387207
    5. '       ' → logprob: -7.839268684387207
    6. 'steps' → logprob: -8.214268684387207
    7. ' steps' → logprob: -8.589268684387207
    8. '   ' → logprob: -8.964268684387207
    9. ' print' → logprob: -9.589268684387207
    10. '               ' → logprob: -10.964268684387207

Token 397: ' les' (ID: 1341)
  Prédit: ' p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' p' → logprob: -0.9434716105461121
    2. ' n' → logprob: -1.0684716701507568
    3. 'p' → logprob: -1.9434716701507568
    4. 'n' → logprob: -2.318471670150757
    5. '(p' → logprob: -4.818471431732178
    6. '(n' → logprob: -4.943471431732178
    7. '           ' → logprob: -5.193471431732178
    8. ' (' → logprob: -5.943471431732178
    9. 'print' → logprob: -7.318471431732178
    10. '   ' → logprob: -7.568471431732178

Token 398: ' éléments' (ID: 57375)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.07133792340755463
    2. ' n' → logprob: -2.696337938308716
    3. '(n' → logprob: -7.821337699890137
    4. '   ' → logprob: -8.196337699890137
    5. ' ' → logprob: -8.696337699890137
    6. '  ' → logprob: -8.696337699890137
    7. 'steps' → logprob: -9.446337699890137
    8. ' steps' → logprob: -9.946337699890137
    9. '	n' → logprob: -10.696337699890137
    10. 'div' → logprob: -10.696337699890137

Token 399: ' rest' (ID: 2867)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.54965078830719
    2. 's' → logprob: -1.54965078830719
    3. ' rest' → logprob: -1.67465078830719
    4. ' n' → logprob: -1.92465078830719
    5. ' sont' → logprob: -2.5496506690979004
    6. 'div' → logprob: -3.2996506690979004
    7. 'rest' → logprob: -3.5496506690979004
    8. ' ' → logprob: -3.7996506690979004
    9. '   ' → logprob: -4.1746506690979
    10. ' divisible' → logprob: -4.4246506690979

Token 400: 'ants' (ID: 2027)
  Prédit: 'ent'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ent' → logprob: -0.3240131735801697
    2. 'ants' → logprob: -1.5740132331848145
    3. 'ant' → logprob: -2.8240132331848145
    4. 'ents' → logprob: -5.3240132331848145
    5. 'aient' → logprob: -5.9490132331848145
    6. 'a' → logprob: -6.5740132331848145
    7. 'nt' → logprob: -8.199012756347656
    8. 'ont' → logprob: -8.199012756347656
    9. 'an' → logprob: -8.824012756347656
    10. 'nants' → logprob: -9.199012756347656

Token 401: ' se' (ID: 458)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.9136318564414978
    2. '           ' → logprob: -1.2886319160461426
    3. ' sont' → logprob: -2.5386319160461426
    4. 'n' → logprob: -2.6636319160461426
    5. 'div' → logprob: -2.9136319160461426
    6. ' n' → logprob: -3.5386319160461426
    7. '   ' → logprob: -3.7886319160461426
    8. '       ' → logprob: -4.788631916046143
    9. ' doivent' → logprob: -4.913631916046143
    10. '==' → logprob: -5.163631916046143

Token 402: ' divis' (ID: 37826)
  Prédit: 'div'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'div' → logprob: -0.04726175591349602
    2. 'd' → logprob: -4.047261714935303
    3. ' divis' → logprob: -4.047261714935303
    4. 'dis' → logprob: -5.547261714935303
    5. 'trait' → logprob: -6.422261714935303
    6. 'part' → logprob: -6.547261714935303
    7. 's' → logprob: -6.922261714935303
    8. 'ré' → logprob: -7.047261714935303
    9. 'com' → logprob: -7.672261714935303
    10. ' répart' → logprob: -7.797261714935303

Token 403: 'ent' (ID: 299)
  Prédit: 'ent'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ent' → logprob: -4.024604277219623e-05
    2. 'nent' → logprob: -11.250040054321289
    3. 'ont' → logprob: -11.625040054321289
    4. 'e' → logprob: -12.375040054321289
    5. 'aient' → logprob: -12.625040054321289
    6. 'isent' → logprob: -12.750040054321289
    7. 'issent' → logprob: -13.125040054321289
    8. 'sent' → logprob: -13.875040054321289
    9. 'endent' → logprob: -13.875040054321289
    10. 'nt' → logprob: -14.250040054321289

Token 404: ' exactement' (ID: 108701)
  Prédit: 'exact'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'exact' → logprob: -0.4249018430709839
    2. ' parfaitement' → logprob: -1.9249018430709839
    3. 'égal' → logprob: -2.5499019622802734
    4. ' exactement' → logprob: -2.6749019622802734
    5. '   ' → logprob: -4.049901962280273
    6. 'par' → logprob: -4.299901962280273
    7. 'bien' → logprob: -5.674901962280273
    8. '           ' → logprob: -5.799901962280273
    9. '       ' → logprob: -6.174901962280273
    10. ' propre' → logprob: -6.799901962280273

Token 405: ' en' (ID: 469)
  Prédit: ' par'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' par' → logprob: -0.9295578598976135
    2. '           ' → logprob: -1.4295578002929688
    3. 'par' → logprob: -2.4295578002929688
    4. ',' → logprob: -2.5545578002929688
    5. 'n' → logprob: -2.8045578002929688
    6. '   ' → logprob: -3.1795578002929688
    7. '       ' → logprob: -3.4295578002929688
    8. ' n' → logprob: -4.304557800292969
    9. ' en' → logprob: -4.679557800292969
    10. 'sans' → logprob: -4.804557800292969

Token 406: ' groupes' (ID: 72206)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.5031114816665649
    2. ' k' → logprob: -1.003111481666565
    3. ' groupes' → logprob: -4.878111362457275
    4. 'groups' → logprob: -5.003111362457275
    5. ' groups' → logprob: -5.253111362457275
    6. 'n' → logprob: -6.628111362457275
    7. 'steps' → logprob: -6.753111362457275
    8. ' ' → logprob: -6.878111362457275
    9. 'p' → logprob: -7.003111362457275
    10. ' n' → logprob: -7.253111362457275

Token 407: ' de' (ID: 334)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.2645179331302643
    2. ',' → logprob: -2.5145180225372314
    3. '       ' → logprob: -2.5145180225372314
    4. '   ' → logprob: -3.5145180225372314
    5. ' par' → logprob: -4.389517784118652
    6. 'n' → logprob: -4.389517784118652
    7. '               ' → logprob: -5.514517784118652
    8. 'par' → logprob: -5.889517784118652
    9. ' de' → logprob: -6.764517784118652
    10. ' n' → logprob: -7.014517784118652

Token 408: ' taille' (ID: 41644)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.005695673171430826
    2. ' k' → logprob: -5.380695819854736
    3. 'tail' → logprob: -6.880695819854736
    4. ' taille' → logprob: -10.255695343017578
    5. 'size' → logprob: -11.755695343017578
    6. ' ' → logprob: -13.630695343017578
    7. '   ' → logprob: -14.130695343017578
    8. 'n' → logprob: -14.880695343017578
    9. ' size' → logprob: -15.130695343017578
    10. 't' → logprob: -15.130695343017578

Token 409: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.12693357467651367
    2. ' k' → logprob: -2.1269335746765137
    3. ' ' → logprob: -12.876934051513672
    4. '   ' → logprob: -13.376934051513672
    5. '=k' → logprob: -14.876934051513672
    6. '`' → logprob: -15.376934051513672
    7. '	k' → logprob: -15.751934051513672
    8. ' ' → logprob: -15.751934051513672
    9. '```' → logprob: -16.001934051513672
    10. '  ' → logprob: -16.626934051513672

Token 410: '
' (ID: 198)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.3851660192012787
    2. '           ' → logprob: -1.385166049003601
    3. ':
' → logprob: -3.2601659297943115
    4. ',' → logprob: -4.010166168212891
    5. '               ' → logprob: -4.510166168212891
    6. '       ' → logprob: -7.385166168212891
    7. ' :' → logprob: -7.760166168212891
    8. '   ' → logprob: -8.51016616821289
    9. ',
' → logprob: -8.88516616821289
    10. '=' → logprob: -9.88516616821289

Token 411: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.7162282466888428
    2. ':' → logprob: -0.8412282466888428
    3. ':
' → logprob: -3.2162282466888428
    4. '       ' → logprob: -3.5912282466888428
    5. '               ' → logprob: -4.716228485107422
    6. '   ' → logprob: -5.966228485107422
    7. ' :' → logprob: -7.466228485107422
    8. ',' → logprob: -9.716228485107422
    9. '\n' → logprob: -9.716228485107422
    10. ' :
' → logprob: -9.966228485107422

Token 412: ' print' (ID: 2123)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.5919387340545654
    2. '           ' → logprob: -1.0919387340545654
    3. ' p' → logprob: -2.3419387340545654
    4. '       ' → logprob: -4.3419389724731445
    5. '   ' → logprob: -7.0919389724731445
    6. 'print' (adapté à ' print') → logprob: -7.4669389724731445
    7. '               ' → logprob: -7.9669389724731445
    8. 'steps' → logprob: -9.591938972473145
    9. ' steps' → logprob: -9.966938972473145
    10. ' print' → logprob: -10.091938972473145

Token 413: '(p' (ID: 2407)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.2315557450056076
    2. '(p' → logprob: -2.481555700302124
    3. 'n' → logprob: -2.856555700302124
    4. 'p' → logprob: -2.856555700302124
    5. ' n' → logprob: -5.481555938720703
    6. '(' → logprob: -6.356555938720703
    7. ' p' → logprob: -6.481555938720703
    8. ' (' → logprob: -7.356555938720703
    9. '((' → logprob: -9.856555938720703
    10. '   ' → logprob: -10.356555938720703

Token 414: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.009780410677194595
    2. '+' → logprob: -4.634780406951904
    3. '+p' → logprob: -10.759780883789062
    4. ')' → logprob: -13.759780883789062
    5. '+n' → logprob: -14.009780883789062
    6. ',' → logprob: -15.009780883789062
    7. ' ' → logprob: -15.509780883789062
    8. '+(' → logprob: -15.509780883789062
    9. '(p' → logprob: -15.759780883789062
    10. 'p' → logprob: -15.759780883789062

Token 415: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.3133830726146698
    2. ' n' → logprob: -1.3133831024169922
    3. '(n' → logprob: -9.063383102416992
    4. ' (' → logprob: -12.438383102416992
    5. '   ' → logprob: -14.063383102416992
    6. '	n' → logprob: -14.938383102416992
    7. ' ' → logprob: -15.188383102416992
    8. '(' → logprob: -16.563383102416992
    9. '_n' → logprob: -16.688383102416992
    10. ' ' → logprob: -17.438383102416992

Token 416: ' //' (ID: 602)
  Prédit: '//'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '//' → logprob: -0.16022838652133942
    2. ' //' → logprob: -1.9102283716201782
    3. ' ' → logprob: -12.535228729248047
    4. '   ' → logprob: -14.410228729248047
    5. ' ' → logprob: -16.410228729248047
    6. '/k' → logprob: -17.285228729248047
    7. '  ' → logprob: -17.660228729248047
    8. '#' → logprob: -17.910228729248047
    9. '//=' → logprob: -18.535228729248047
    10. '//
' → logprob: -18.660228729248047

Token 417: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.0040785204619169235
    2. ' k' → logprob: -5.504078388214111
    3. '	k' → logprob: -16.629077911376953
    4. '   ' → logprob: -19.254077911376953
    5. ' к' → logprob: -19.754077911376953
    6. ',k' → logprob: -20.129077911376953
    7. ' ' → logprob: -20.129077911376953
    8. '{k' → logprob: -20.629077911376953
    9. '+k' → logprob: -21.379077911376953
    10. '"k' → logprob: -21.504077911376953

Token 418: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.014892044477164745
    2. ')' → logprob: -4.264892101287842
    3. '       ' → logprob: -7.264892101287842
    4. ')
' → logprob: -10.639891624450684
    5. ' )
' → logprob: -12.764891624450684
    6. ')

' → logprob: -14.139891624450684
    7. '   ' → logprob: -14.139891624450684
    8. 'else' → logprob: -16.389892578125
    9. ' )' → logprob: -16.389892578125
    10. '           ' → logprob: -16.639892578125

Token 419: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.08373803645372391
    2. 'else' → logprob: -2.583738088607788
    3. ' else' → logprob: -5.333737850189209
    4. '```' → logprob: -12.333738327026367
    5. '   ' → logprob: -13.208738327026367
    6. '	else' → logprob: -13.583738327026367
    7. '<|end|>' → logprob: -14.833738327026367
    8. 'elif' → logprob: -14.833738327026367
    9. ')' → logprob: -14.958738327026367
    10. '           ' → logprob: -15.083738327026367

Token 420: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.26637566089630127
    2. ' else' → logprob: -1.7663756608963013
    3. '       ' → logprob: -2.7663755416870117
    4. '   ' → logprob: -12.266375541687012
    5. '	else' → logprob: -13.641375541687012
    6. 'elif' → logprob: -14.641375541687012
    7. '```' → logprob: -14.891375541687012
    8. '      ' → logprob: -15.516375541687012
    9. '    ' → logprob: -15.641375541687012
    10. '     ' → logprob: -15.766375541687012

Token 421: ':
' (ID: 734)
  Prédit: ':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':
' → logprob: -0.7184604406356812
    2. '           ' → logprob: -0.8434604406356812
    3. ':' → logprob: -3.4684605598449707
    4. 'print' → logprob: -3.7184605598449707
    5. '(p' → logprob: -4.718460559844971
    6. '       ' → logprob: -5.343460559844971
    7. ' :
' → logprob: -5.718460559844971
    8. '(
' → logprob: -5.843460559844971
    9. ' print' → logprob: -6.218460559844971
    10. '(' → logprob: -6.468460559844971

Token 422: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.30290162563323975
    2. 'print' → logprob: -1.4279016256332397
    3. '       ' → logprob: -4.427901744842529
    4. ' print' → logprob: -4.677901744842529
    5. '        ' → logprob: -9.552901268005371
    6. '		' → logprob: -9.802901268005371
    7. '   ' → logprob: -10.052901268005371
    8. '               ' → logprob: -10.802901268005371
    9. '(print' → logprob: -11.052901268005371
    10. '         ' → logprob: -11.427901268005371

Token 423: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.07893870770931244
    2. ' print' → logprob: -2.5789387226104736
    3. '           ' → logprob: -9.953938484191895
    4. '               ' → logprob: -14.578938484191895
    5. '   ' → logprob: -14.953938484191895
    6. '(print' → logprob: -15.328938484191895
    7. '       ' → logprob: -15.953938484191895
    8. '.print' → logprob: -16.45393943786621
    9. ' ' → logprob: -17.07893943786621
    10. '            ' → logprob: -17.32893943786621

Token 424: ' Si' (ID: 7832)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.582160472869873
    2. 'print' → logprob: -0.832160472869873
    3. '           ' → logprob: -5.207160472869873
    4. '       ' → logprob: -7.332160472869873
    5. '   ' → logprob: -10.207160949707031
    6. '        ' → logprob: -11.207160949707031
    7. '               ' → logprob: -12.207160949707031
    8. ' ' → logprob: -12.457160949707031
    9. '    ' → logprob: -12.582160949707031
    10. '            ' → logprob: -13.457160949707031

Token 425: ' ce' (ID: 2357)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.25846970081329346
    2. ' p' → logprob: -2.258469581604004
    3. ' print' → logprob: -2.258469581604004
    4. 'p' → logprob: -4.008469581604004
    5. '(p' → logprob: -7.508469581604004
    6. '(print' → logprob: -11.008469581604004
    7. '   ' → logprob: -12.008469581604004
    8. ' (' → logprob: -12.383469581604004
    9. '           ' → logprob: -12.383469581604004
    10. 'n' → logprob: -13.383469581604004

Token 426: ' n' (ID: 297)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5229408740997314
    2. ' print' → logprob: -1.2729408740997314
    3. 'n' → logprob: -3.2729408740997314
    4. ' p' → logprob: -3.7729408740997314
    5. 'p' → logprob: -4.022940635681152
    6. '+' → logprob: -4.022940635681152
    7. ' +' → logprob: -5.147940635681152
    8. ' n' → logprob: -5.272940635681152
    9. '   ' → logprob: -5.522940635681152
    10. 'else' → logprob: -5.647940635681152

Token 427: ''est' (ID: 6616)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.1083744689822197
    2. ' n' → logprob: -2.6083743572235107
    3. 'print' → logprob: -3.8583743572235107
    4. ' p' → logprob: -5.35837459564209
    5. '   ' → logprob: -6.73337459564209
    6. 'n' → logprob: -7.23337459564209
    7. '           ' → logprob: -7.98337459564209
    8. ' ' → logprob: -8.48337459564209
    9. '       ' → logprob: -8.73337459564209
    10. 'p' → logprob: -9.10837459564209

Token 428: ' pas' (ID: 2173)
  Prédit: ' pas'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pas' → logprob: -0.6992344856262207
    2. 'pas' → logprob: -0.9492344856262207
    3. 'p' → logprob: -2.4492344856262207
    4. 'not' → logprob: -4.574234485626221
    5. '(p' → logprob: -5.199234485626221
    6. '   ' → logprob: -5.449234485626221
    7. ' not' → logprob: -5.949234485626221
    8. '           ' → logprob: -5.949234485626221
    9. 'n' → logprob: -6.324234485626221
    10. ' p' → logprob: -7.324234485626221

Token 429: ' exact' (ID: 6354)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.7047879695892334
    2. '(p' → logprob: -0.7047879695892334
    3. ' p' → logprob: -4.5797882080078125
    4. 'print' → logprob: -7.4547882080078125
    5. '           ' → logprob: -8.204788208007812
    6. 'n' → logprob: -9.079788208007812
    7. 'pas' → logprob: -9.579788208007812
    8. ' divisible' → logprob: -9.954788208007812
    9. '   ' → logprob: -10.204788208007812
    10. 'le' → logprob: -10.329788208007812

Token 430: ',' (ID: 11)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.24351289868354797
    2. 'print' → logprob: -1.8685128688812256
    3. '               ' → logprob: -3.4935128688812256
    4. ',' → logprob: -3.6185128688812256
    5. ' print' → logprob: -5.493513107299805
    6. ':' → logprob: -9.243513107299805
    7. '   ' → logprob: -9.368513107299805
    8. '       ' → logprob: -9.493513107299805
    9. ':
' → logprob: -9.493513107299805
    10. '          ' → logprob: -10.993513107299805

Token 431: ' il' (ID: 1793)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5768558979034424
    2. ' print' → logprob: -0.8268558979034424
    3. '           ' → logprob: -7.201855659484863
    4. '               ' → logprob: -8.701855659484863
    5. '            ' → logprob: -14.076855659484863
    6. '                   ' → logprob: -14.576855659484863
    7. ' ' → logprob: -14.576855659484863
    8. '	print' → logprob: -14.701855659484863
    9. ' p' → logprob: -14.826855659484863
    10. '                ' → logprob: -15.076855659484863

Token 432: ' faudra' (ID: 88501)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.12317647784948349
    2. ' print' → logprob: -2.8731765747070312
    3. ' faut' → logprob: -3.2481765747070312
    4. '   ' → logprob: -4.748176574707031
    5. 'f' → logprob: -4.873176574707031
    6. '           ' → logprob: -5.748176574707031
    7. ' faudra' → logprob: -7.248176574707031
    8. '       ' → logprob: -9.248176574707031
    9. '  ' → logprob: -9.623176574707031
    10. ' ' → logprob: -10.498176574707031

Token 433: ' une' (ID: 2463)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.8067374229431152
    2. ' p' → logprob: -1.1817374229431152
    3. 'print' → logprob: -1.5567374229431152
    4. ' print' → logprob: -3.8067374229431152
    5. ' ajouter' → logprob: -4.556737422943115
    6. '   ' → logprob: -6.556737422943115
    7. 'aj' → logprob: -7.431737422943115
    8. '(p' → logprob: -7.681737422943115
    9. ' ' → logprob: -8.056737899780273
    10. 'une' → logprob: -8.931737899780273

Token 434: ' étape' (ID: 83661)
  Prédit: ' étape'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' étape' → logprob: -0.18783776462078094
    2. ' p' → logprob: -2.562837839126587
    3. ' +' → logprob: -2.812837839126587
    4. '+' → logprob: -4.187837600708008
    5. ' print' → logprob: -5.062837600708008
    6. ' step' → logprob: -5.187837600708008
    7. 'print' → logprob: -6.062837600708008
    8. ' ' → logprob: -6.062837600708008
    9. ' étapes' → logprob: -7.812837600708008
    10. 'p' → logprob: -8.187837600708008

Token 435: ' supplémentaire' (ID: 111252)
  Prédit: ' supplémentaire'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' supplémentaire' → logprob: -0.17393074929714203
    2. ' de' → logprob: -2.1739306449890137
    3. 'de' → logprob: -3.7989306449890137
    4. '           ' → logprob: -4.923930644989014
    5. 'supp' → logprob: -4.923930644989014
    6. '   ' → logprob: -5.548930644989014
    7. ' supplémentaires' → logprob: -6.298930644989014
    8. 'p' → logprob: -6.798930644989014
    9. 'sup' → logprob: -7.423930644989014
    10. ' supl' → logprob: -7.673930644989014

Token 436: ' pour' (ID: 1930)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.27487340569496155
    2. 'print' → logprob: -1.6498733758926392
    3. ' print' → logprob: -3.1498734951019287
    4. '               ' → logprob: -5.77487325668335
    5. '(p' → logprob: -7.52487325668335
    6. '   ' → logprob: -8.274873733520508
    7. ',' → logprob: -8.399873733520508
    8. '(print' → logprob: -8.399873733520508
    9. ' (' → logprob: -8.774873733520508
    10. '       ' → logprob: -8.774873733520508

Token 437: ' les' (ID: 1341)
  Prédit: ' traiter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' traiter' → logprob: -0.08544982224702835
    2. 'print' → logprob: -3.3354499340057373
    3. 'trait' → logprob: -4.210449695587158
    4. ' print' → logprob: -4.335449695587158
    5. ' gérer' → logprob: -5.585449695587158
    6. ' n' → logprob: -5.710449695587158
    7. ' ' → logprob: -6.085449695587158
    8. ' le' → logprob: -6.210449695587158
    9. '   ' → logprob: -6.460449695587158
    10. 'n' → logprob: -6.835449695587158

Token 438: ' éléments' (ID: 57375)
  Prédit: 'trait'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'trait' → logprob: -1.0191987752914429
    2. ' traiter' → logprob: -1.1441987752914429
    3. ' rest' → logprob: -1.7691987752914429
    4. 'rest' → logprob: -3.0191988945007324
    5. 'élé' → logprob: -3.2691988945007324
    6. ' éléments' → logprob: -3.6441988945007324
    7. ' derniers' → logprob: -4.269198894500732
    8. 'tra' → logprob: -4.769198894500732
    9. ' trait' → logprob: -6.269198894500732
    10. 'rés' → logprob: -6.269198894500732

Token 439: ' rest' (ID: 2867)
  Prédit: ' rest'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' rest' → logprob: -0.24719396233558655
    2. 'rest' → logprob: -1.6221939325332642
    3. '   ' → logprob: -3.9971940517425537
    4. '           ' → logprob: -6.497193813323975
    5. '       ' → logprob: -6.747193813323975
    6. ' supplémentaires' → logprob: -8.747194290161133
    7. ' restant' → logprob: -9.372194290161133
    8. 'sup' → logprob: -9.622194290161133
    9. ' ' → logprob: -10.122194290161133
    10. 'reste' → logprob: -10.747194290161133

Token 440: 'ants' (ID: 2027)
  Prédit: 'ants'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ants' → logprob: -0.0013655929360538721
    2. 'nants' → logprob: -7.501365661621094
    3. 'ant' → logprob: -8.501365661621094
    4. '   ' → logprob: -8.876365661621094
    5. '```' → logprob: -9.126365661621094
    6. '       ' → logprob: -9.376365661621094
    7. 'antes' → logprob: -9.501365661621094
    8. 'aux' → logprob: -9.876365661621094
    9. 'ents' → logprob: -10.126365661621094
    10. '           ' → logprob: -10.876365661621094

Token 441: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0006706207641400397
    2. 'print' → logprob: -7.875670433044434
    3. ' print' → logprob: -9.000670433044434
    4. '               ' → logprob: -9.500670433044434
    5. '       ' → logprob: -9.750670433044434
    6. '            ' → logprob: -12.000670433044434
    7. '(p' → logprob: -12.125670433044434
    8. '   ' → logprob: -12.625670433044434
    9. '(print' → logprob: -12.625670433044434
    10. '          ' → logprob: -12.750670433044434

Token 442: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.02572036348283291
    2. 'print' → logprob: -3.9007203578948975
    3. ' print' → logprob: -5.400720596313477
    4. '       ' → logprob: -7.775720596313477
    5. '               ' → logprob: -9.150720596313477
    6. '   ' → logprob: -10.650720596313477
    7. '(print' → logprob: -10.775720596313477
    8. ' (' → logprob: -11.275720596313477
    9. '(p' → logprob: -11.400720596313477
    10. ' p' → logprob: -11.525720596313477

Token 443: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.03820202127099037
    2. ' print' → logprob: -3.2882020473480225
    3. '           ' → logprob: -8.913202285766602
    4. '       ' → logprob: -10.663202285766602
    5. '   ' → logprob: -13.038202285766602
    6. ' ' → logprob: -16.2882022857666
    7. '               ' → logprob: -16.5382022857666
    8. 'p' → logprob: -17.0382022857666
    9. ' p' → logprob: -17.2882022857666
    10. '	print' → logprob: -17.4132022857666

Token 444: '(p' (ID: 2407)
  Prédit: '(p'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(p' → logprob: -0.008615988306701183
    2. '(' → logprob: -4.758615970611572
    3. '(f' → logprob: -14.13361644744873
    4. ' (' → logprob: -14.88361644744873
    5. '((' → logprob: -16.008615493774414
    6. 'p' → logprob: -16.133615493774414
    7. '('' → logprob: -16.883615493774414
    8. '("' → logprob: -16.883615493774414
    9. '(
' → logprob: -17.508615493774414
    10. '(P' → logprob: -17.633615493774414

Token 445: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.014163747429847717
    2. '+' → logprob: -4.264163970947266
    3. ',' → logprob: -16.264163970947266
    4. ')' → logprob: -16.514163970947266
    5. ' ' → logprob: -16.514163970947266
    6. '+p' → logprob: -17.639163970947266
    7. ' ' → logprob: -18.639163970947266
    8. ' plus' → logprob: -18.764163970947266
    9. '   ' → logprob: -18.889163970947266
    10. ' +
' → logprob: -19.889163970947266

Token 446: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.036513544619083405
    2. '(n' → logprob: -3.911513566970825
    3. ' n' → logprob: -4.161513328552246
    4. ' (' → logprob: -8.411513328552246
    5. '(' → logprob: -11.036513328552246
    6. '   ' → logprob: -11.536513328552246
    7. ' ' → logprob: -12.536513328552246
    8. '1' → logprob: -12.536513328552246
    9. ' ' → logprob: -12.786513328552246
    10. '	n' → logprob: -13.411513328552246

Token 447: ' //' (ID: 602)
  Prédit: '//'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '//' → logprob: -0.07889407873153687
    2. ' //' → logprob: -2.5788941383361816
    3. ' ' → logprob: -12.828893661499023
    4. '   ' → logprob: -13.578893661499023
    5. '#' → logprob: -15.328893661499023
    6. ' ' → logprob: -17.453893661499023
    7. '  ' → logprob: -17.453893661499023
    8. '/' → logprob: -17.953893661499023
    9. '	' → logprob: -18.078893661499023
    10. '"' → logprob: -18.203893661499023

Token 448: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.0007099286303855479
    2. ' k' → logprob: -7.2507100105285645
    3. '	k' → logprob: -19.625709533691406
    4. ' к' → logprob: -20.875709533691406
    5. 'kx' → logprob: -21.625709533691406
    6. '_k' → logprob: -21.750709533691406
    7. '/k' → logprob: -22.375709533691406
    8. '(k' → logprob: -22.500709533691406
    9. ' ' → logprob: -22.500709533691406
    10. 'к' → logprob: -22.625709533691406

Token 449: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.07888978719711304
    2. '+' → logprob: -2.578889846801758
    3. ')' → logprob: -17.078889846801758
    4. ' plus' → logprob: -18.953889846801758
    5. '＋' → logprob: -19.203889846801758
    6. '+)' → logprob: -19.828889846801758
    7. '1' → logprob: -19.828889846801758
    8. ' +
' → logprob: -20.828889846801758
    9. '   ' → logprob: -20.953889846801758
    10. ')+' → logprob: -21.203889846801758

Token 450: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0004306692280806601
    2. ' ' → logprob: -7.750430583953857
    3. '   ' → logprob: -18.500431060791016
    4. ' ' → logprob: -19.000431060791016
    5. '  ' → logprob: -20.500431060791016
    6. '```' → logprob: -22.000431060791016
    7. '１' → logprob: -23.125431060791016
    8. ')' → logprob: -23.125431060791016
    9. '
' → logprob: -23.875431060791016
    10. '`' → logprob: -23.875431060791016

Token 451: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -4.320199877838604e-07
    2. ' ' → logprob: -14.875
    3. '   ' → logprob: -19.0
    4. '  ' → logprob: -22.75
    5. '```' → logprob: -22.875
    6. '+' → logprob: -23.375
    7. ')' → logprob: -23.75
    8. '
' → logprob: -23.875
    9. '' → logprob: -24.375
    10. '１' → logprob: -24.625

Token 452: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -7.941850526549388e-06
    2. ')
' → logprob: -12.000007629394531
    3. ' )' → logprob: -13.875007629394531
    4. '   ' → logprob: -14.875007629394531
    5. ')`' → logprob: -15.875007629394531
    6. '))' → logprob: -15.875007629394531
    7. '')' → logprob: -16.87500762939453
    8. '`)' → logprob: -17.50000762939453
    9. ')}' → logprob: -17.87500762939453
    10. '```' → logprob: -17.87500762939453

Token 453: '#' (ID: 2)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 454: ' App' (ID: 2583)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 455: 'el' (ID: 296)
  Prédit: 'el'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'el' → logprob: -0.003668606048449874
    2. 'e' → logprob: -6.878668785095215
    3. 'l' → logprob: -7.128668785095215
    4. '#' → logprob: -7.378668785095215
    5. 'eler' → logprob: -7.378668785095215
    6. 'elé' → logprob: -8.378668785095215
    7. 'le' → logprob: -9.378668785095215
    8. 'a' → logprob: -10.003668785095215
    9. 'ar' → logprob: -10.253668785095215
    10. 'elle' → logprob: -10.378668785095215

Token 456: ' de' (ID: 334)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.27812960743904114
    2. 'min' → logprob: -1.5281295776367188
    3. '()' → logprob: -4.278129577636719
    4. '(min' → logprob: -4.903129577636719
    5. ' min' → logprob: -7.153129577636719
    6. '(' → logprob: -7.153129577636719
    7. '(
' → logprob: -7.278129577636719
    8. '_min' → logprob: -7.403129577636719
    9. 'de' → logprob: -8.153129577636719
    10. '(def' → logprob: -8.403129577636719

Token 457: ' la' (ID: 557)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.0001593195047462359
    2. ' min' → logprob: -8.75015926361084
    3. '(min' → logprob: -14.25015926361084
    4. 'def' → logprob: -15.50015926361084
    5. '_min' → logprob: -18.625160217285156
    6. '	min' → logprob: -19.625160217285156
    7. '```' → logprob: -19.625160217285156
    8. 'main' → logprob: -19.875160217285156
    9. 'max' → logprob: -20.000160217285156
    10. '[min' → logprob: -20.750160217285156

Token 458: ' fonction' (ID: 17610)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.00023321842309087515
    2. ' min' → logprob: -8.62523365020752
    3. 'def' → logprob: -9.87523365020752
    4. 'main' → logprob: -13.62523365020752
    5. 'if' → logprob: -14.87523365020752
    6. 'function' → logprob: -15.75023365020752
    7. '_min' → logprob: -15.87523365020752
    8. 'm' → logprob: -15.87523365020752
    9. 'mini' → logprob: -16.875232696533203
    10. '(min' → logprob: -17.375232696533203

Token 459: ' principale' (ID: 68926)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.00015979631280060858
    2. '
' → logprob: -8.750160217285156
    3. 'def' → logprob: -14.750160217285156
    4. '()
' → logprob: -15.000160217285156
    5. ' min' → logprob: -15.500160217285156
    6. '(min' → logprob: -15.875160217285156
    7. '	min' → logprob: -16.500160217285156
    8. '_min' → logprob: -16.500160217285156
    9. '
' → logprob: -17.750160217285156
    10. '```' → logprob: -17.875160217285156

Token 460: ' pour' (ID: 1930)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.0019398193107917905
    2. '
' → logprob: -6.25193977355957
    3. '(min' → logprob: -12.50193977355957
    4. '()
' → logprob: -12.87693977355957
    5. 'def' → logprob: -13.00193977355957
    6. ' min' → logprob: -13.50193977355957
    7. '```' → logprob: -14.37693977355957
    8. '_min' → logprob: -15.25193977355957
    9. '\n' → logprob: -16.12693977355957
    10. '
' → logprob: -16.37693977355957

Token 461: ' ex' (ID: 513)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.004159722477197647
    2. ' min' → logprob: -5.504159927368164
    3. 'process' → logprob: -10.004159927368164
    4. 'main' → logprob: -10.629159927368164
    5. '_min' → logprob: -13.129159927368164
    6. 'run' → logprob: -13.254159927368164
    7. 'if' → logprob: -13.254159927368164
    8. '__' → logprob: -13.379159927368164
    9. 'execute' → logprob: -13.754159927368164
    10. '(min' → logprob: -14.754159927368164

Token 462: 'éc' (ID: 5675)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.32611340284347534
    2. 'min' → logprob: -1.3261134624481201
    3. 'x' → logprob: -4.826113224029541
    4. 'def' → logprob: -7.326113224029541
    5. 'f' → logprob: -7.826113224029541
    6. ' min' → logprob: -7.951113224029541
    7. 'ecut' → logprob: -8.2011137008667
    8. 'xec' → logprob: -8.2011137008667
    9. '(min' → logprob: -8.3261137008667
    10. 'ff' → logprob: -8.4511137008667

Token 463: 'uter' (ID: 23469)
  Prédit: 'uter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'uter' → logprob: -0.0001414426224073395
    2. 'ute' → logprob: -9.875141143798828
    3. 'ut' → logprob: -11.125141143798828
    4. 'uer' → logprob: -11.500141143798828
    5. '```' → logprob: -11.500141143798828
    6. 'u' → logprob: -11.625141143798828
    7. 'er' → logprob: -11.625141143798828
    8. '#' → logprob: -11.625141143798828
    9. 'cut' → logprob: -11.875141143798828
    10. 'ution' → logprob: -12.250141143798828

Token 464: ' le' (ID: 505)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.0016439995961263776
    2. '()' → logprob: -6.751644134521484
    3. '()
' → logprob: -8.001644134521484
    4. ' min' → logprob: -9.251644134521484
    5. '(min' → logprob: -11.001644134521484
    6. '_min' → logprob: -11.251644134521484
    7. 'def' → logprob: -11.626644134521484
    8. '()

' → logprob: -14.126644134521484
    9. '	min' → logprob: -14.376644134521484
    10. '```' → logprob: -14.501644134521484

Token 465: ' programme' (ID: 18190)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.5653349757194519
    2. 'programme' → logprob: -1.1903350353240967
    3. 'code' → logprob: -2.3153350353240967
    4. ' programme' → logprob: -4.315334796905518
    5. 'program' → logprob: -5.315334796905518
    6. 'script' → logprob: -5.565334796905518
    7. ' code' → logprob: -6.190334796905518
    8. '_code' → logprob: -6.190334796905518
    9. 'calcul' → logprob: -6.565334796905518
    10. ' script' → logprob: -7.940334796905518

Token 466: '
' (ID: 198)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.22675999999046326
    2. '()
' → logprob: -2.351759910583496
    3. '
' → logprob: -2.476759910583496
    4. '(min' → logprob: -4.601759910583496
    5. '()' → logprob: -5.226759910583496
    6. '(
' → logprob: -5.476759910583496
    7. 'def' → logprob: -6.601759910583496
    8. '```' → logprob: -7.101759910583496
    9. '\' → logprob: -7.351759910583496
    10. '(' → logprob: -7.726759910583496

Token 467: 'min' (ID: 1493)
  Prédit: 'min'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: 0.0
    2. ' min' → logprob: -18.5
    3. 'if' → logprob: -22.625
    4. '(min' → logprob: -25.375
    5. '_min' → logprob: -25.5
    6. '	min' → logprob: -25.75
    7. 'mini' → logprob: -25.75
    8. '[min' → logprob: -26.375
    9. '.min' → logprob: -26.5
    10. '```' → logprob: -26.625

Token 468: '_steps' (ID: 52120)
  Prédit: '_steps'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_steps' → logprob: -2.2007883671903983e-05
    2. '_' → logprob: -10.750021934509277
    3. '_step' → logprob: -15.500021934509277
    4. '_s' → logprob: -15.750021934509277
    5. '_st' → logprob: -16.625022888183594
    6. ' _' → logprob: -17.375022888183594
    7. 'steps' → logprob: -17.625022888183594
    8. '```' → logprob: -18.500022888183594
    9. '__' → logprob: -18.625022888183594
    10. '_S' → logprob: -18.750022888183594

Token 469: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: -0.6099870800971985
    2. '_steps' → logprob: -1.3599870204925537
    3. '_' → logprob: -1.6099870204925537
    4. '()' → logprob: -10.609987258911133
    5. '_t' → logprob: -10.734987258911133
    6. ' _' → logprob: -11.734987258911133
    7. '_step' → logprob: -12.984987258911133
    8. '(' → logprob: -13.109987258911133
    9. '_TO' → logprob: -13.234987258911133
    10. 'to' → logprob: -13.234987258911133

Token 470: '_process' (ID: 25444)
  Prédit: 'process'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'process' → logprob: -0.023304175585508347
    2. '_process' → logprob: -4.023303985595703
    3. 'rocess' → logprob: -5.273303985595703
    4. 'proces' → logprob: -11.273303985595703
    5. 'processable' → logprob: -14.898303985595703
    6. ' process' → logprob: -15.273303985595703
    7. 'rocessing' → logprob: -15.398303985595703
    8. 'proc' → logprob: -15.398303985595703
    9. '	process' → logprob: -15.648303985595703
    10. 'prozess' → logprob: -16.398303985595703

Token 471: '_elements' (ID: 53344)
  Prédit: '_elements'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_elements' → logprob: -0.00038145645521581173
    2. '_' → logprob: -7.8753814697265625
    3. '_ELEMENTS' → logprob: -14.500381469726562
    4. 'elements' → logprob: -14.750381469726562
    5. '_e' → logprob: -15.375381469726562
    6. '_items' → logprob: -17.000381469726562
    7. ' elements' → logprob: -17.125381469726562
    8. ' _' → logprob: -17.250381469726562
    9. '_element' → logprob: -17.500381469726562
    10. '_ele' → logprob: -17.625381469726562

Token 472: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00017624642350710928
    2. '(' → logprob: -8.750176429748535
    3. '()
' → logprob: -11.875176429748535
    4. '()`' → logprob: -13.000176429748535
    5. ' ()' → logprob: -13.250176429748535
    6. '():' → logprob: -13.375176429748535
    7. '()]' → logprob: -13.750176429748535
    8. '()}' → logprob: -14.250176429748535
    9. '();' → logprob: -14.375176429748535
    10. '()">' → logprob: -14.375176429748535


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 470
Tokens correctement prédits (1ère position, stricte): 151
Tokens correctement prédits (1ère position, avec adaptation): 156
Tokens correctement prédits (top 10): 319
Précision stricte (1ère position): 32.13%
Précision adaptée (1ère position): 33.19%
Précision (top 10): 67.87%
================================================================================
