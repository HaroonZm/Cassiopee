================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:16:17
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
X = int(input())
val = 100
for i in range(4000):
    val = (val*101)//100
    if val >= X:
        print(i+1)
        break
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'X' (ID: 55)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0028902292251586914
    2. ''' → logprob: -6.252890110015869
    3. '(X' → logprob: -8.627890586853027
    4. '```' → logprob: -8.627890586853027
    5. 'X' → logprob: -8.752890586853027
    6. '('' → logprob: -8.752890586853027
    7. '`' → logprob: -9.002890586853027
    8. '"' → logprob: -10.627890586853027
    9. '(
' → logprob: -10.877890586853027
    10. '("("' → logprob: -10.877890586853027

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07195987552404404
    2. ')' → logprob: -2.696959972381592
    3. '()' → logprob: -6.946959972381592
    4. '())' → logprob: -7.696959972381592
    5. '(
' → logprob: -9.196959495544434
    6. '[' → logprob: -9.321959495544434
    7. '```' → logprob: -9.821959495544434
    8. '('' → logprob: -9.946959495544434
    9. '(X' → logprob: -10.196959495544434
    10. '(()' → logprob: -10.696959495544434

Token 5: 'val' (ID: 1105)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.0470430813729763
    2. '%' → logprob: -3.7970430850982666
    3. '*' → logprob: -3.9220430850982666
    4. '#' → logprob: -6.9220428466796875
    5. 'if' → logprob: -7.2970428466796875
    6. ')' → logprob: -7.4220428466796875
    7. '+
' → logprob: -8.047042846679688
    8. '**' → logprob: -8.922042846679688
    9. ''' → logprob: -9.172042846679688
    10. '\n' → logprob: -9.172042846679688

Token 6: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0841490849852562
    2. ')' → logprob: -2.959149122238159
    3. 's' → logprob: -4.58414888381958
    4. '(' → logprob: -5.20914888381958
    5. '=' → logprob: -5.33414888381958
    6. ']' → logprob: -5.70914888381958
    7. '_' → logprob: -6.45914888381958
    8. '+' → logprob: -7.08414888381958
    9. 'ue' → logprob: -7.70914888381958
    10. ' =' → logprob: -7.95914888381958

Token 7: ' ' (ID: 220)
  Prédit: ' X'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' X' → logprob: -0.30357688665390015
    2. '0' → logprob: -2.053576946258545
    3. ' ' → logprob: -2.428576946258545
    4. 'X' → logprob: -3.178576946258545
    5. '1' → logprob: -6.803576946258545
    6. ' int' → logprob: -7.553576946258545
    7. '"' → logprob: -7.678576946258545
    8. ' input' → logprob: -7.678576946258545
    9. 'input' → logprob: -8.178576469421387
    10. ' val' → logprob: -8.678576469421387

Token 8: '100' (ID: 1353)
  Prédit: 'X'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'X' → logprob: -0.032478783279657364
    2. '0' → logprob: -3.5324788093566895
    3. '1' → logprob: -6.4074788093566895
    4. 'int' → logprob: -7.7824788093566895
    5. 'input' → logprob: -8.407478332519531
    6. ' X' → logprob: -8.532478332519531
    7. 'x' → logprob: -9.657478332519531
    8. '2' → logprob: -10.032478332519531
    9. ' ' → logprob: -10.407478332519531
    10. '10' → logprob: -10.907478332519531

Token 9: '
' (ID: 198)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '*' → logprob: -0.8517295718193054
    2. '+' → logprob: -0.8517295718193054
    3. '%' → logprob: -2.10172963142395
    4. ')' → logprob: -5.226729393005371
    5. ' ' → logprob: -5.226729393005371
    6. '-' → logprob: -5.601729393005371
    7. '>' → logprob: -6.726729393005371
    8. ' +' → logprob: -6.726729393005371
    9. ' *' → logprob: -6.976729393005371
    10. '[' → logprob: -7.226729393005371

Token 10: 'for' (ID: 1938)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.9956216216087341
    2. '*' → logprob: -1.495621681213379
    3. 'if' → logprob: -1.620621681213379
    4. '%' → logprob: -2.120621681213379
    5. '-' → logprob: -3.870621681213379
    6. ' if' → logprob: -4.120621681213379
    7. '>' → logprob: -4.620621681213379
    8. '+
' → logprob: -4.870621681213379
    9. 'X' → logprob: -4.995621681213379
    10. 'for' → logprob: -5.495621681213379

Token 11: ' i' (ID: 575)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.003131728619337082
    2. ' i' → logprob: -6.253131866455078
    3. '  ' → logprob: -6.753131866455078
    4. ' X' → logprob: -10.753131866455078
    5. '_' → logprob: -12.253131866455078
    6. ' _' → logprob: -12.628131866455078
    7. ' ' → logprob: -13.628131866455078
    8. 'i' → logprob: -13.628131866455078
    9. ' ‌' → logprob: -13.753131866455078
    10. ' x' → logprob: -14.128131866455078

Token 12: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.10053671896457672
    2. 'in' → logprob: -2.475536823272705
    3. ' ' → logprob: -4.725536823272705
    4. '  ' → logprob: -6.475536823272705
    5. '_' → logprob: -8.225536346435547
    6. '<|end|>' → logprob: -8.725536346435547
    7. ')' → logprob: -8.975536346435547
    8. 'n' → logprob: -9.350536346435547
    9. 'range' → logprob: -9.475536346435547
    10. '[' → logprob: -9.850536346435547

Token 13: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.0015694992616772652
    2. 'range' → logprob: -6.5015692710876465
    3. ' ' → logprob: -9.626569747924805
    4. '	range' → logprob: -14.626569747924805
    5. ' xrange' → logprob: -14.876569747924805
    6. ' X' → logprob: -15.376569747924805
    7. '(range' → logprob: -15.876569747924805
    8. '_range' → logprob: -17.251569747924805
    9. ' in' → logprob: -17.251569747924805
    10. '```' → logprob: -17.751569747924805

Token 14: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.018362276256084442
    2. '(X' → logprob: -4.018362045288086
    3. '(len' → logprob: -9.518362045288086
    4. '(i' → logprob: -9.643362045288086
    5. '(val' → logprob: -9.893362045288086
    6. '(x' → logprob: -11.643362045288086
    7. '((' → logprob: -12.268362045288086
    8. ' (' → logprob: -12.893362045288086
    9. '(range' → logprob: -13.393362045288086
    10. '(`' → logprob: -13.643362045288086

Token 15: '400' (ID: 4812)
  Prédit: 'X'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'X' → logprob: -0.024835357442498207
    2. '1' → logprob: -4.399835586547852
    3. 'val' → logprob: -4.524835586547852
    4. ' X' → logprob: -6.899835586547852
    5. '0' → logprob: -8.399835586547852
    6. ' val' → logprob: -9.399835586547852
    7. '10' → logprob: -10.774835586547852
    8. ')' → logprob: -11.149835586547852
    9. '(X' → logprob: -11.149835586547852
    10. '`' → logprob: -11.399835586547852

Token 16: '0' (ID: 15)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.22955967485904694
    2. '):' → logprob: -1.7295596599578857
    3. ',' → logprob: -4.104559898376465
    4. ' )' → logprob: -5.354559898376465
    5. '+' → logprob: -6.229559898376465
    6. '0' → logprob: -7.229559898376465
    7. ' ):' → logprob: -7.479559898376465
    8. ' ,' → logprob: -7.479559898376465
    9. '-' → logprob: -7.729559898376465
    10. '```' → logprob: -7.854559898376465

Token 17: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.11383772641420364
    2. '):' → logprob: -2.613837718963623
    3. '+' → logprob: -4.363837718963623
    4. ',' → logprob: -4.988837718963623
    5. ' )' → logprob: -5.113837718963623
    6. '*' → logprob: -5.613837718963623
    7. '0' → logprob: -6.113837718963623
    8. '+)' → logprob: -7.738837718963623
    9. ' +' → logprob: -7.863837718963623
    10. ' ):' → logprob: -8.113838195800781

Token 18: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1950875222682953
    2. ':' → logprob: -2.445087432861328
    3. ' ' → logprob: -3.445087432861328
    4. '    ' → logprob: -3.695087432861328
    5. ' if' → logprob: -4.320087432861328
    6. ' :' → logprob: -4.820087432861328
    7. '  ' → logprob: -5.570087432861328
    8. '```' → logprob: -6.320087432861328
    9. 'if' → logprob: -6.695087432861328
    10. '[' → logprob: -7.445087432861328

Token 19: ' val' (ID: 1459)
  Prédit: ' val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' val' → logprob: -0.49986886978149414
    2. ' if' → logprob: -1.8748688697814941
    3. '   ' → logprob: -2.624868869781494
    4. 'val' (adapté à ' val') → logprob: -2.749868869781494
    5. ' X' → logprob: -3.624868869781494
    6. 'if' → logprob: -3.749868869781494
    7. '    ' → logprob: -3.999868869781494
    8. ' ' → logprob: -3.999868869781494
    9. 'X' → logprob: -5.124868869781494
    10. ' ```' → logprob: -6.124868869781494

Token 20: ' =' (ID: 314)
  Prédit: ' +='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.6920479536056519
    2. '+=' → logprob: -1.4420479536056519
    3. '=' → logprob: -2.1920480728149414
    4. ' *=' → logprob: -2.3170480728149414
    5. ' =' → logprob: -4.317048072814941
    6. ' ' → logprob: -4.567048072814941
    7. ' -=' → logprob: -4.692048072814941
    8. '*=' → logprob: -4.817048072814941
    9. '```' → logprob: -6.192048072814941
    10. '+' → logprob: -6.442048072814941

Token 21: ' (' (ID: 350)
  Prédit: ' val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' val' → logprob: -0.015337765216827393
    2. 'val' → logprob: -4.265337944030762
    3. ' int' → logprob: -7.390337944030762
    4. ' (' → logprob: -8.390337944030762
    5. ' i' → logprob: -9.515337944030762
    6. ' ' → logprob: -9.640337944030762
    7. 'int' → logprob: -9.890337944030762
    8. '(val' → logprob: -9.890337944030762
    9. ' max' → logprob: -11.140337944030762
    10. '0' → logprob: -11.765337944030762

Token 22: 'val' (ID: 1105)
  Prédit: ' val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' val' → logprob: -0.252552330493927
    2. 'val' → logprob: -1.5025522708892822
    3. ' X' → logprob: -8.627552032470703
    4. ' ' → logprob: -9.627552032470703
    5. '(val' → logprob: -9.627552032470703
    6. ' i' → logprob: -9.627552032470703
    7. 'X' → logprob: -9.752552032470703
    8. ' (' → logprob: -10.002552032470703
    9. '	val' → logprob: -10.252552032470703
    10. '   ' → logprob: -10.877552032470703

Token 23: '*' (ID: 9)
  Prédit: '*'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.3820444345474243
    2. '+' → logprob: -1.6320444345474243
    3. ' *' → logprob: -2.3820443153381348
    4. ' +' → logprob: -3.6320443153381348
    5. '%' → logprob: -7.132044315338135
    6. '**' → logprob: -7.382044315338135
    7. '-' → logprob: -7.382044315338135
    8. ')' → logprob: -8.132044792175293
    9. ' **' → logprob: -8.132044792175293
    10. ' ' → logprob: -8.257044792175293

Token 24: '101' (ID: 7959)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '2' → logprob: -1.3087568283081055
    2. 'val' → logprob: -1.8087568283081055
    3. '3' → logprob: -2.0587568283081055
    4. 'X' → logprob: -2.3087568283081055
    5. ' ' → logprob: -2.8087568283081055
    6. 'i' → logprob: -3.0587568283081055
    7. '17' → logprob: -3.1837568283081055
    8. '1' → logprob: -3.1837568283081055
    9. ' val' → logprob: -3.4337568283081055
    10. '7' → logprob: -3.6837568283081055

Token 25: ')//' (ID: 60375)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.03867395967245102
    2. ' //' → logprob: -4.1636738777160645
    3. ')//' → logprob: -4.1636738777160645
    4. ' )' → logprob: -5.9136738777160645
    5. ' +' → logprob: -7.0386738777160645
    6. '//' → logprob: -7.2886738777160645
    7. ')/' → logprob: -7.5386738777160645
    8. '0' → logprob: -7.6636738777160645
    9. '+' → logprob: -7.9136738777160645
    10. '%' → logprob: -8.288674354553223

Token 26: '100' (ID: 1353)
  Prédit: '100'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '100' → logprob: -0.0007469753036275506
    2. 'val' → logprob: -8.375746726989746
    3. ' ' → logprob: -8.875746726989746
    4. '102' → logprob: -8.875746726989746
    5. '1' → logprob: -9.375746726989746
    6. '10' → logprob: -9.750746726989746
    7. '99' → logprob: -10.750746726989746
    8. '103' → logprob: -10.875746726989746
    9. '101' → logprob: -11.000746726989746
    10. '2' → logprob: -11.750746726989746

Token 27: '
' (ID: 198)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.15780441462993622
    2. '<|end|>' → logprob: -2.532804489135742
    3. '*' → logprob: -3.782804489135742
    4. ' ' → logprob: -4.407804489135742
    5. ' if' → logprob: -5.282804489135742
    6. '-' → logprob: -5.532804489135742
    7. ')' → logprob: -5.782804489135742
    8. '0' → logprob: -6.282804489135742
    9. '\n' → logprob: -6.407804489135742
    10. 'if' → logprob: -6.532804489135742

Token 28: '   ' (ID: 271)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -1.2900176048278809
    2. 'if' → logprob: -1.7900176048278809
    3. '<|end|>' → logprob: -1.7900176048278809
    4. '+' → logprob: -2.040017604827881
    5. '*' → logprob: -2.665017604827881
    6. '\n' → logprob: -2.790017604827881
    7. ' ' → logprob: -4.040017604827881
    8. '```' → logprob: -4.165017604827881
    9. '
' → logprob: -4.415017604827881
    10. '   ' → logprob: -4.415017604827881

Token 29: ' if' (ID: 538)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 30: ' val' (ID: 1459)
  Prédit: ' val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' val' → logprob: -0.009104699827730656
    2. ' X' → logprob: -4.8841047286987305
    3. 'val' → logprob: -6.6341047286987305
    4. 'X' → logprob: -9.00910472869873
    5. ' i' → logprob: -10.38410472869873
    6. ' (' → logprob: -11.63410472869873
    7. '(val' → logprob: -12.38410472869873
    8. ' ' → logprob: -12.63410472869873
    9. ' abs' → logprob: -12.88410472869873
    10. '(' → logprob: -13.00910472869873

Token 31: ' >=' (ID: 5064)
  Prédit: ' >='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.19951844215393066
    2. ' >' → logprob: -1.9495184421539307
    3. '>=' → logprob: -3.9495184421539307
    4. '>' → logprob: -4.949518203735352
    5. ' ==' → logprob: -4.949518203735352
    6. ' <=' → logprob: -6.074518203735352
    7. '<|end|>' → logprob: -7.074518203735352
    8. '==' → logprob: -7.449518203735352
    9. ' ' → logprob: -7.574518203735352
    10. '%' → logprob: -8.199518203735352

Token 32: ' X' (ID: 2127)
  Prédit: 'X'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'X' → logprob: -0.06200263649225235
    2. ' X' → logprob: -2.812002658843994
    3. '   ' → logprob: -11.062002182006836
    4. ' ' → logprob: -11.437002182006836
    5. '100' → logprob: -12.187002182006836
    6. '  ' → logprob: -14.562002182006836
    7. '    ' → logprob: -14.562002182006836
    8. 'x' → logprob: -14.812002182006836
    9. '400' → logprob: -15.062002182006836
    10. '>X' → logprob: -15.187002182006836

Token 33: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -3.881560041918419e-05
    2. ':
' → logprob: -10.375039100646973
    3. ' :' → logprob: -13.500039100646973
    4. '   ' → logprob: -13.625039100646973
    5. '):' → logprob: -13.625039100646973
    6. ':return' → logprob: -13.625039100646973
    7. '<|end|>' → logprob: -14.250039100646973
    8. ':**' → logprob: -14.625039100646973
    9. '       ' → logprob: -14.750039100646973
    10. '+:' → logprob: -15.625039100646973

Token 34: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0009530289680697024
    2. '\n' → logprob: -7.750953197479248
    3. '        
' → logprob: -8.50095272064209
    4. '<|end|>' → logprob: -9.12595272064209
    5. '```' → logprob: -9.50095272064209
    6. '\' → logprob: -10.50095272064209
    7. '   ' → logprob: -10.62595272064209
    8. ' break' → logprob: -10.75095272064209
    9. '
' → logprob: -11.37595272064209
    10. ' ' → logprob: -12.00095272064209

Token 35: ' print' (ID: 2123)
  Prédit: ' break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' break' → logprob: -0.8607616424560547
    2. '       ' → logprob: -0.9857616424560547
    3. ' print' → logprob: -2.1107616424560547
    4. 'print' (adapté à ' print') → logprob: -2.8607616424560547
    5. 'break' → logprob: -3.7357616424560547
    6. '   ' → logprob: -6.985761642456055
    7. '```' → logprob: -7.360761642456055
    8. '           ' → logprob: -8.860761642456055
    9. '	break' → logprob: -10.860761642456055
    10. '``' → logprob: -11.485761642456055

Token 36: '(i' (ID: 3649)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.38015392422676086
    2. '(i' → logprob: -1.6301538944244385
    3. '(X' → logprob: -2.1301538944244385
    4. '(val' → logprob: -6.755154132843018
    5. '('' → logprob: -9.13015365600586
    6. '()' → logprob: -9.38015365600586
    7. '("' → logprob: -9.75515365600586
    8. '(x' → logprob: -9.88015365600586
    9. 'X' → logprob: -10.88015365600586
    10. '("("' → logprob: -11.38015365600586

Token 37: '+' (ID: 10)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0027686210814863443
    2. '+' → logprob: -6.002768516540527
    3. ')
' → logprob: -8.502768516540527
    4. ' )' → logprob: -9.752768516540527
    5. ' +' → logprob: -11.627768516540527
    6. '+)' → logprob: -11.752768516540527
    7. ')+' → logprob: -12.002768516540527
    8. '))' → logprob: -13.627768516540527
    9. '')' → logprob: -14.002768516540527
    10. '   ' → logprob: -14.002768516540527

Token 38: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -6.511406809295295e-06
    2. ' ' → logprob: -12.000006675720215
    3. '2' → logprob: -16.6250057220459
    4. '   ' → logprob: -17.3750057220459
    5. '```' → logprob: -17.6250057220459
    6. '`' → logprob: -18.2500057220459
    7. ')' → logprob: -18.9375057220459
    8. '１' → logprob: -19.0625057220459
    9. '<|end|>' → logprob: -19.3125057220459
    10. '۱' → logprob: -19.5625057220459

Token 39: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.927930654550437e-05
    2. ')
' → logprob: -10.500029563903809
    3. ' )' → logprob: -13.750029563903809
    4. ')return' → logprob: -15.500029563903809
    5. '')' → logprob: -16.500028610229492
    6. '`)' → logprob: -17.000028610229492
    7. ')#' → logprob: -17.250028610229492
    8. '```' → logprob: -17.250028610229492
    9. ')`' → logprob: -17.500028610229492
    10. '))' → logprob: -17.750028610229492

Token 40: '       ' (ID: 309)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.86213219165802
    2. '<|end|>' → logprob: -1.73713219165802
    3. '   ' → logprob: -1.86213219165802
    4. '```' → logprob: -2.2371320724487305
    5. '\n' → logprob: -2.4871320724487305
    6. ':' → logprob: -4.6121320724487305
    7. '#' → logprob: -4.9871320724487305
    8. 'break' → logprob: -4.9871320724487305
    9. '\' → logprob: -5.2371320724487305
    10. ' break' → logprob: -5.3621320724487305

Token 41: ' break' (ID: 2338)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' (adapté à ' break') → logprob: -0.015195125713944435
    2. ' break' → logprob: -4.265194892883301
    3. '       ' → logprob: -7.140194892883301
    4. '	break' → logprob: -8.8901948928833
    5. '```' → logprob: -9.8901948928833
    6. 'b' → logprob: -10.7651948928833
    7. '   ' → logprob: -10.8901948928833
    8. 'br' → logprob: -12.1401948928833
    9. '_break' → logprob: -13.2651948928833
    10. '-break' → logprob: -13.5151948928833


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 39
Tokens correctement prédits (1ère position, stricte): 11
Tokens correctement prédits (1ère position, avec adaptation): 12
Tokens correctement prédits (top 10): 28
Précision stricte (1ère position): 28.21%
Précision adaptée (1ère position): 30.77%
Précision (top 10): 71.79%
================================================================================
