================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:01:23
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N, K = map(int, input().split())
print(N - K + 1)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' K' (ID: 658)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.02342972159385681
    2. ' =' → logprob: -4.148429870605469
    3. ',' → logprob: -5.023429870605469
    4. '.' → logprob: -8.398429870605469
    5. '+' → logprob: -9.023429870605469
    6. ')' → logprob: -9.273429870605469
    7. '[' → logprob: -9.398429870605469
    8. '#' → logprob: -10.148429870605469
    9. '```' → logprob: -10.398429870605469
    10. ''' → logprob: -10.398429870605469

Token 4: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.10292861610651016
    2. ' map' → logprob: -2.977928638458252
    3. '10' → logprob: -3.602928638458252
    4. 'map' → logprob: -4.602928638458252
    5. '0' → logprob: -6.102928638458252
    6. ' input' → logprob: -6.102928638458252
    7. 'input' → logprob: -6.602928638458252
    8. '20' → logprob: -7.102928638458252
    9. '5' → logprob: -7.227928638458252
    10. '32' → logprob: -7.977928638458252

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.030910227447748184
    2. '(lambda' → logprob: -3.6559102535247803
    3. '(int' → logprob: -5.905910015106201
    4. '<|end|>' → logprob: -7.655910015106201
    5. '(str' → logprob: -7.905910015106201
    6. '(user' → logprob: -8.40591049194336
    7. '```' → logprob: -8.65591049194336
    8. '(input' → logprob: -8.65591049194336
    9. '(
' → logprob: -10.53091049194336
    10. '()' → logprob: -10.53091049194336

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.3702891767024994
    2. '(' → logprob: -1.6202892065048218
    3. ')' → logprob: -2.2452890872955322
    4. '(user' → logprob: -6.870289325714111
    5. '(int' → logprob: -6.995289325714111
    6. 'input' → logprob: -7.370289325714111
    7. '```' → logprob: -7.370289325714111
    8. '(str' → logprob: -7.495289325714111
    9. '(raw' → logprob: -8.120288848876953
    10. '('' → logprob: -9.120288848876953

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.20144394040107727
    2. ' input' → logprob: -1.7014439105987549
    3. '(input' → logprob: -10.826443672180176
    4. ')' → logprob: -11.701443672180176
    5. ',input' → logprob: -13.201443672180176
    6. '=input' → logprob: -15.451443672180176
    7. '<input' → logprob: -15.951443672180176
    8. '	input' → logprob: -16.326444625854492
    9. '[input' → logprob: -16.826444625854492
    10. '_input' → logprob: -16.951444625854492

Token 8: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.3629660904407501
    2. '())' → logprob: -1.2379660606384277
    3. '(' → logprob: -4.987966060638428
    4. ')' → logprob: -5.612966060638428
    5. '().' → logprob: -7.362966060638428
    6. '(),' → logprob: -7.862966060638428
    7. '(input' → logprob: -7.862966060638428
    8. '`()' → logprob: -7.862966060638428
    9. '('' → logprob: -8.112966537475586
    10. '();)' → logprob: -8.237966537475586

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0022345937322825193
    2. 'strip' → logprob: -6.12723445892334
    3. 'rstrip' → logprob: -10.75223445892334
    4. 'read' → logprob: -11.25223445892334
    5. ')' → logprob: -11.75223445892334
    6. ' split' → logprob: -12.00223445892334
    7. 'spl' → logprob: -15.12723445892334
    8. '(split' → logprob: -15.62723445892334
    9. 'startswith' → logprob: -15.62723445892334
    10. 'replace' → logprob: -15.87723445892334

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00900593213737011
    2. '))' → logprob: -5.384006023406982
    3. '())' → logprob: -5.509006023406982
    4. '()' → logprob: -8.634005546569824
    5. '`)' → logprob: -9.759005546569824
    6. '(' → logprob: -9.759005546569824
    7. '()))' → logprob: -11.759005546569824
    8. ')`' → logprob: -11.884005546569824
    9. '')' → logprob: -12.759005546569824
    10. '),' → logprob: -13.634005546569824

Token 11: 'print' (ID: 1598)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.7303032279014587
    2. '#' → logprob: -2.3553032875061035
    3. 'x' → logprob: -2.7303032875061035
    4. '```' → logprob: -3.1053032875061035
    5. ',' → logprob: -3.2303032875061035
    6. 'for' → logprob: -3.3553032875061035
    7. ''' → logprob: -3.6053032875061035
    8. '`' → logprob: -3.6053032875061035
    9. ')' → logprob: -3.7303032875061035
    10. '\n' → logprob: -3.8553032875061035

Token 12: '(N' (ID: 10564)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0006174852605909109
    2. '('' → logprob: -8.000617027282715
    3. '("("' → logprob: -8.250617027282715
    4. '((' → logprob: -12.250617027282715
    5. '()' → logprob: -12.500617027282715
    6. '("""' → logprob: -12.625617027282715
    7. '(
' → logprob: -13.250617027282715
    8. '(`' → logprob: -13.500617027282715
    9. '("")' → logprob: -14.000617027282715
    10. ' (' → logprob: -14.375617027282715

Token 13: ' -' (ID: 533)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0271340049803257
    2. '[' → logprob: -3.6521339416503906
    3. ' )' → logprob: -8.77713394165039
    4. ',' → logprob: -8.77713394165039
    5. '+' → logprob: -9.02713394165039
    6. '*' → logprob: -9.27713394165039
    7. '#' → logprob: -10.02713394165039
    8. '**' → logprob: -10.15213394165039
    9. '))' → logprob: -10.40213394165039
    10. '>' → logprob: -10.40213394165039

Token 14: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.08908353000879288
    2. 'K' → logprob: -2.464083433151245
    3. ' ' → logprob: -9.839083671569824
    4. '1' → logprob: -9.839083671569824
    5. ' min' → logprob: -10.339083671569824
    6. 'min' → logprob: -12.839083671569824
    7. ' (' → logprob: -13.589083671569824
    8. '	K' → logprob: -15.464083671569824
    9. ' max' → logprob: -15.589083671569824
    10. ')' → logprob: -15.714083671569824

Token 15: ' +' (ID: 659)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -3.845798710244708e-05
    2. '))' → logprob: -10.375038146972656
    3. '`)' → logprob: -12.375038146972656
    4. ')`' → logprob: -13.375038146972656
    5. '```' → logprob: -14.375038146972656
    6. '')' → logprob: -15.125038146972656
    7. ' )' → logprob: -15.125038146972656
    8. ')
' → logprob: -16.375038146972656
    9. ')))' → logprob: -16.750038146972656
    10. '*' → logprob: -17.000038146972656

Token 16: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.001030903891660273
    2. ' ' → logprob: -7.126030921936035
    3. '(' → logprob: -9.126030921936035
    4. ')' → logprob: -10.126030921936035
    5. 'K' → logprob: -10.501030921936035
    6. '2' → logprob: -11.501030921936035
    7. 'N' → logprob: -11.751030921936035
    8. ' K' → logprob: -12.126030921936035
    9. '(N' → logprob: -12.376030921936035
    10. ' (' → logprob: -12.626030921936035

Token 17: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00022999993234407157
    2. ' ' → logprob: -8.875229835510254
    3. '(' → logprob: -10.000229835510254
    4. ')' → logprob: -11.375229835510254
    5. '2' → logprob: -11.375229835510254
    6. 'K' → logprob: -11.875229835510254
    7. 'N' → logprob: -12.125229835510254
    8. 'abs' → logprob: -13.250229835510254
    9. '(N' → logprob: -13.625229835510254
    10. '0' → logprob: -13.750229835510254

Token 18: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.869017852295656e-06
    2. '))' → logprob: -13.250006675720215
    3. '`)' → logprob: -13.250006675720215
    4. '```' → logprob: -13.875006675720215
    5. ')`' → logprob: -14.125006675720215
    6. ' )' → logprob: -14.250006675720215
    7. '')' → logprob: -14.875006675720215
    8. ')
' → logprob: -14.875006675720215
    9. '#' → logprob: -16.37500762939453
    10. '")' → logprob: -16.87500762939453


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 16
Tokens correctement prédits (1ère position, stricte): 4
Tokens correctement prédits (1ère position, avec adaptation): 4
Tokens correctement prédits (top 10): 10
Précision stricte (1ère position): 25.00%
Précision adaptée (1ère position): 25.00%
Précision (top 10): 62.50%
================================================================================
