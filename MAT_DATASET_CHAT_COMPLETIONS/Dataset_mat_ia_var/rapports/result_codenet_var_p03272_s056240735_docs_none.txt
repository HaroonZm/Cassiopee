================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:10:00
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n,i=map(int,input().split())
print(n-i+1)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',i' (ID: 25032)
  → Token d'amorce (pas de prédiction)

Token 2: '=' (ID: 28)
  → Token d'amorce (pas de prédiction)

Token 3: 'map' (ID: 3726)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0003382038848940283
    2. '1' → logprob: -8.250338554382324
    3. ' ' → logprob: -9.500338554382324
    4. '10' → logprob: -14.250338554382324
    5. '(' → logprob: -14.625338554382324
    6. '2' → logprob: -15.750338554382324
    7. '01' → logprob: -15.875338554382324
    8. '`' → logprob: -15.875338554382324
    9. '-' → logprob: -16.000337600708008
    10. '```' → logprob: -16.000337600708008

Token 4: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0038273909594863653
    2. '```' → logprob: -6.0038275718688965
    3. '(lambda' → logprob: -7.3788275718688965
    4. '<|end|>' → logprob: -7.8788275718688965
    5. ' (' → logprob: -9.628827095031738
    6. 'user' → logprob: -10.003827095031738
    7. '[' → logprob: -10.753827095031738
    8. '(user' → logprob: -10.753827095031738
    9. '\(' → logprob: -10.878827095031738
    10. '(
' → logprob: -11.128827095031738

Token 5: ',input' (ID: 123014)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.2325008064508438
    2. ')' → logprob: -1.7325007915496826
    3. '(' → logprob: -4.107501029968262
    4. '(n' → logprob: -4.982501029968262
    5. 'input' → logprob: -6.107501029968262
    6. '`)' → logprob: -7.107501029968262
    7. '(user' → logprob: -7.482501029968262
    8. '(data' → logprob: -7.857501029968262
    9. '<|end|>' → logprob: -7.857501029968262
    10. '(range' → logprob: -8.107501029968262

Token 6: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.20312167704105377
    2. '()' → logprob: -2.3281216621398926
    3. '('' → logprob: -3.2031216621398926
    4. '())' → logprob: -3.9531216621398926
    5. '(()' → logprob: -4.828121662139893
    6. '("("' → logprob: -5.953121662139893
    7. '().' → logprob: -6.078121662139893
    8. ')' → logprob: -6.203121662139893
    9. '(""))' → logprob: -6.703121662139893
    10. '```' → logprob: -7.203121662139893

Token 7: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -8.268254896393046e-05
    2. 'strip' → logprob: -9.875082969665527
    3. ' split' → logprob: -10.750082969665527
    4. '(split' → logprob: -12.375082969665527
    5. ')' → logprob: -12.500082969665527
    6. 'rstrip' → logprob: -14.125082969665527
    7. 'spl' → logprob: -14.125082969665527
    8. 's' → logprob: -16.75008201599121
    9. 'replace' → logprob: -17.25008201599121
    10. '_split' → logprob: -17.75008201599121

Token 8: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.015243135392665863
    2. '())' → logprob: -4.390243053436279
    3. '))' → logprob: -6.765243053436279
    4. '`)' → logprob: -7.265243053436279
    5. '()' → logprob: -7.390243053436279
    6. '(' → logprob: -8.640243530273438
    7. ')`' → logprob: -11.265243530273438
    8. ' )' → logprob: -11.515243530273438
    9. '')' → logprob: -11.515243530273438
    10. '```' → logprob: -12.015243530273438

Token 9: 'print' (ID: 1598)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.4950781762599945
    2. 'a' → logprob: -1.745078206062317
    3. 's' → logprob: -2.2450780868530273
    4. 'r' → logprob: -3.6200780868530273
    5. '#' → logprob: -4.245078086853027
    6. 'if' → logprob: -4.370078086853027
    7. '+' → logprob: -4.745078086853027
    8. 'x' → logprob: -4.995078086853027
    9. 'print' → logprob: -4.995078086853027
    10. ',' → logprob: -5.245078086853027

Token 10: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0006999264587648213
    2. '('' → logprob: -7.750699996948242
    3. '("("' → logprob: -8.250699996948242
    4. '()' → logprob: -13.125699996948242
    5. '((' → logprob: -13.375699996948242
    6. '("""' → logprob: -13.875699996948242
    7. '("' → logprob: -14.375699996948242
    8. '(n' → logprob: -14.500699996948242
    9. '(`' → logprob: -14.625699996948242
    10. '(
' → logprob: -15.000699996948242

Token 11: '-i' (ID: 18499)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.14883598685264587
    2. '[' → logprob: -2.0238358974456787
    3. ',' → logprob: -5.648836135864258
    4. '*' → logprob: -7.148836135864258
    5. ',)' → logprob: -7.648836135864258
    6. '[n' → logprob: -8.023836135864258
    7. ',n' → logprob: -8.648836135864258
    8. '+' → logprob: -8.648836135864258
    9. '[i' → logprob: -9.148836135864258
    10. '**' → logprob: -9.148836135864258

Token 12: '+' (ID: 10)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0005643534241244197
    2. '))' → logprob: -7.5005645751953125
    3. '`)' → logprob: -12.125564575195312
    4. '')' → logprob: -13.625564575195312
    5. ' )' → logprob: -13.625564575195312
    6. ')`' → logprob: -14.000564575195312
    7. '+' → logprob: -14.500564575195312
    8. ')))' → logprob: -14.750564575195312
    9. '-)' → logprob: -15.000564575195312
    10. '-' → logprob: -15.250564575195312

Token 13: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -9.579495235811919e-05
    2. ' ' → logprob: -9.37509536743164
    3. '2' → logprob: -12.12509536743164
    4. ')' → logprob: -12.37509536743164
    5. 'i' → logprob: -14.62509536743164
    6. '(' → logprob: -15.25009536743164
    7. '0' → logprob: -16.12509536743164
    8. '))' → logprob: -16.37509536743164
    9. 'n' → logprob: -16.50009536743164
    10. '3' → logprob: -16.62509536743164

Token 14: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.069664333248511e-05
    2. '))' → logprob: -11.125020980834961
    3. '`)' → logprob: -12.500020980834961
    4. ' )' → logprob: -14.000020980834961
    5. ')`' → logprob: -14.375020980834961
    6. '')' → logprob: -14.625020980834961
    7. '```' → logprob: -16.00002098083496
    8. ')
' → logprob: -16.25002098083496
    9. '")' → logprob: -16.62502098083496
    10. ')))' → logprob: -16.75002098083496


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 12
Tokens correctement prédits (1ère position, stricte): 3
Tokens correctement prédits (1ère position, avec adaptation): 3
Tokens correctement prédits (top 10): 7
Précision stricte (1ère position): 25.00%
Précision adaptée (1ère position): 25.00%
Précision (top 10): 58.33%
================================================================================
