================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:49:33
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from functools import reduce
from operator import add

N = int(input())

count = reduce(
    add,
    map(lambda x: 1 if len(str(x)) & 1 else 0, range(1, N + 1))
)

print(count)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' functools' (ID: 142636)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' reduce' (ID: 10389)
  Prédit: 'wrap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'wrap' → logprob: -0.13067235052585602
    2. 'partial' → logprob: -2.6306724548339844
    3. ' wraps' → logprob: -3.5056724548339844
    4. 'reduce' → logprob: -4.005672454833984
    5. 'l' → logprob: -6.755672454833984
    6. ' partial' → logprob: -7.630672454833984
    7. 'cached' → logprob: -9.130672454833984
    8. 'cmp' → logprob: -9.255672454833984
    9. 'cache' → logprob: -9.255672454833984
    10. '```' → logprob: -9.380672454833984

Token 4: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0199317317456007
    2. '.' → logprob: -4.519931793212891
    3. '(lambda' → logprob: -5.019931793212891
    4. ' (' → logprob: -7.019931793212891
    5. ',' → logprob: -7.769931793212891
    6. '```' → logprob: -8.01993179321289
    7. '\' → logprob: -9.01993179321289
    8. ''' → logprob: -9.64493179321289
    9. '(
' → logprob: -9.89493179321289
    10. '`' → logprob: -10.01993179321289

Token 5: 'from' (ID: 2845)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0320768803358078
    2. 'def' → logprob: -4.157076835632324
    3. '\' → logprob: -4.657076835632324
    4. ' ' → logprob: -6.032076835632324
    5. '(
' → logprob: -6.907076835632324
    6. ',' → logprob: -7.157076835632324
    7. '(lambda' → logprob: -7.907076835632324
    8. '```' → logprob: -8.282076835632324
    9. ' (' → logprob: -8.407076835632324
    10. 'd' → logprob: -8.657076835632324

Token 6: ' operator' (ID: 11019)
  Prédit: ' operator'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' operator' → logprob: -0.32836058735847473
    2. ' math' → logprob: -1.7033605575561523
    3. 'operator' → logprob: -3.2033605575561523
    4. ' itertools' → logprob: -3.2033605575561523
    5. ' collections' → logprob: -4.953360557556152
    6. 'math' → logprob: -4.953360557556152
    7. ' os' → logprob: -6.703360557556152
    8. 'collections' → logprob: -7.578360557556152
    9. ' typing' → logprob: -8.078360557556152
    10. ' ' → logprob: -8.578360557556152

Token 7: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.06605818122625351
    2. 'import' → logprob: -2.8160581588745117
    3. '.' → logprob: -5.691058158874512
    4. ' ' → logprob: -7.441058158874512
    5. ' .' → logprob: -10.066058158874512
    6. '.import' → logprob: -10.191058158874512
    7. '	import' → logprob: -11.066058158874512
    8. '_import' → logprob: -12.066058158874512
    9. '-import' → logprob: -13.316058158874512
    10. ' ,' → logprob: -13.316058158874512

Token 8: ' add' (ID: 1147)
  Prédit: ' add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' add' → logprob: -0.31903859972953796
    2. ' import' → logprob: -1.9440386295318604
    3. 'add' → logprob: -2.4440386295318604
    4. ' ' → logprob: -4.069038391113281
    5. ' mul' → logprob: -4.194038391113281
    6. 'import' → logprob: -4.819038391113281
    7. 'mul' → logprob: -6.194038391113281
    8. ' item' → logprob: -8.694038391113281
    9. 'item' → logprob: -9.569038391113281
    10. ' ad' → logprob: -9.819038391113281

Token 9: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10939472913742065
    2. '(
' → logprob: -3.3593947887420654
    3. '\n' → logprob: -3.7343947887420654
    4. '\' → logprob: -3.8593947887420654
    5. ',' → logprob: -4.734394550323486
    6. '#' → logprob: -6.484394550323486
    7. 'def' → logprob: -6.734394550323486
    8. ')' → logprob: -6.859394550323486
    9. '*' → logprob: -6.984394550323486
    10. '`' → logprob: -7.109394550323486

Token 10: 'N' (ID: 45)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.025038719177246094
    2. '(
' → logprob: -3.775038719177246
    3. '#' → logprob: -7.775038719177246
    4. '\' → logprob: -8.025038719177246
    5. ',' → logprob: -8.525038719177246
    6. 'def' → logprob: -8.650038719177246
    7. '(

' → logprob: -9.025038719177246
    8. '\n' → logprob: -9.275038719177246
    9. 'a' → logprob: -9.775038719177246
    10. 'result' → logprob: -10.025038719177246

Token 11: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.7103436589241028
    2. '_' → logprob: -1.335343599319458
    3. ' =' → logprob: -1.585343599319458
    4. ',' → logprob: -3.835343599319458
    5. ' ' → logprob: -4.335343837738037
    6. 'um' → logprob: -6.585343837738037
    7. ')' → logprob: -6.960343837738037
    8. 'u' → logprob: -7.085343837738037
    9. 'umber' → logprob: -7.335343837738037
    10. '   ' → logprob: -7.960343837738037

Token 12: ' int' (ID: 677)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.16317760944366455
    2. '10' → logprob: -2.038177490234375
    3. '100' → logprob: -4.538177490234375
    4. '0' → logprob: -5.288177490234375
    5. '5' → logprob: -5.663177490234375
    6. '20' → logprob: -8.288177490234375
    7. ' [' → logprob: -8.663177490234375
    8. 'int' → logprob: -8.788177490234375
    9. '1' → logprob: -9.038177490234375
    10. '[' → logprob: -9.413177490234375

Token 13: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0001593195047462359
    2. '(N' → logprob: -9.75015926361084
    3. ' (' → logprob: -10.37515926361084
    4. '(`' → logprob: -11.37515926361084
    5. '(input' → logprob: -11.62515926361084
    6. '()' → logprob: -11.75015926361084
    7. '```' → logprob: -11.75015926361084
    8. '('' → logprob: -11.87515926361084
    9. '(
' → logprob: -12.00015926361084
    10. '`' → logprob: -13.00015926361084

Token 14: '())

' (ID: 27654)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0734199732542038
    2. '()' → logprob: -3.3234200477600098
    3. ')' → logprob: -3.4484200477600098
    4. '())' → logprob: -6.19842004776001
    5. '(
' → logprob: -7.69842004776001
    6. '('' → logprob: -8.073419570922852
    7. '))' → logprob: -10.198419570922852
    8. '(

' → logprob: -10.448419570922852
    9. '(`' → logprob: -10.698419570922852
    10. '(()' → logprob: -11.323419570922852

Token 15: 'count' (ID: 5420)
  Prédit: 'numbers'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'numbers' → logprob: -0.649162769317627
    2. 'result' → logprob: -1.524162769317627
    3. 'arr' → logprob: -2.524162769317627
    4. 'lst' → logprob: -2.774162769317627
    5. 'data' → logprob: -3.524162769317627
    6. 'nums' → logprob: -3.774162769317627
    7. 'total' → logprob: -3.774162769317627
    8. 'values' → logprob: -4.399162769317627
    9. 's' → logprob: -4.774162769317627
    10. 'a' → logprob: -5.274162769317627

Token 16: ' =' (ID: 314)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.014907775446772575
    2. '(' → logprob: -4.7649078369140625
    3. '_' → logprob: -5.1399078369140625
    4. '_s' → logprob: -8.264907836914062
    5. '(s' → logprob: -9.389907836914062
    6. ')' → logprob: -11.389907836914062
    7. '[' → logprob: -11.514907836914062
    8. 'S' → logprob: -11.639907836914062
    9. 'er' → logprob: -12.264907836914062
    10. ''s' → logprob: -12.389907836914062

Token 17: ' reduce' (ID: 10389)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.29978877305984497
    2. '{}' → logprob: -1.6747887134552002
    3. '{' → logprob: -3.2997887134552
    4. '[' → logprob: -4.299788951873779
    5. ' ' → logprob: -4.549788951873779
    6. '(' → logprob: -4.799788951873779
    7. ' {}' → logprob: -6.549788951873779
    8. ' {' → logprob: -8.299788475036621
    9. '[]' → logprob: -8.799788475036621
    10. 'dict' → logprob: -9.299788475036621

Token 18: '(
' (ID: 1607)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0736936554312706
    2. '(lambda' → logprob: -3.0736937522888184
    3. '(add' → logprob: -3.6986937522888184
    4. '(
' → logprob: -11.57369327545166
    5. '((' → logprob: -12.07369327545166
    6. '(operator' → logprob: -12.07369327545166
    7. '(sum' → logprob: -12.57369327545166
    8. ' (' → logprob: -12.69869327545166
    9. '(s' → logprob: -13.69869327545166
    10. '(int' → logprob: -13.82369327545166

Token 19: '   ' (ID: 271)
  Prédit: 'add'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'add' → logprob: -0.12817104160785675
    2. ' add' → logprob: -2.128170967102051
    3. '(add' → logprob: -7.253170967102051
    4. 'lambda' → logprob: -8.37817096710205
    5. '   ' → logprob: -8.75317096710205
    6. '(lambda' → logprob: -9.62817096710205
    7. ' lambda' → logprob: -10.12817096710205
    8. ' ' → logprob: -10.75317096710205
    9. ')add' → logprob: -11.75317096710205
    10. ')' → logprob: -12.25317096710205

Token 20: ' add' (ID: 1147)
  Prédit: 'add'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'add' (adapté à ' add') → logprob: -0.16609635949134827
    2. ' add' → logprob: -1.9160963296890259
    3. 'lambda' → logprob: -5.541096210479736
    4. '   ' → logprob: -7.166096210479736
    5. ' lambda' → logprob: -7.291096210479736
    6. '(add' → logprob: -8.541096687316895
    7. '(lambda' → logprob: -9.041096687316895
    8. ' ' → logprob: -9.041096687316895
    9. ')' → logprob: -10.791096687316895
    10. '  ' → logprob: -12.166096687316895

Token 21: ',
' (ID: 412)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.07359486818313599
    2. '(' → logprob: -2.823594808578491
    3. ')' → logprob: -4.82359504699707
    4. ' ,' → logprob: -6.69859504699707
    5. '1' → logprob: -7.44859504699707
    6. ' (' → logprob: -8.32359504699707
    7. '(int' → logprob: -8.44859504699707
    8. ',int' → logprob: -8.57359504699707
    9. ',
' → logprob: -8.69859504699707
    10. '(
' → logprob: -8.82359504699707

Token 22: '   ' (ID: 271)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.3643624484539032
    2. '[int' → logprob: -1.4893624782562256
    3. '[
' → logprob: -4.2393622398376465
    4. '(int' → logprob: -4.3643622398376465
    5. '[i' → logprob: -4.7393622398376465
    6. ' [' → logprob: -4.7393622398376465
    7. '(' → logprob: -5.2393622398376465
    8. 'map' → logprob: -5.3643622398376465
    9. '   ' → logprob: -5.6143622398376465
    10. ')' → logprob: -5.8643622398376465

Token 23: ' map' (ID: 4014)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.1766265630722046
    2. '(int' → logprob: -1.1766265630722046
    3. '[' → logprob: -1.5516265630722046
    4. '[int' → logprob: -2.301626682281494
    5. '(map' → logprob: -3.426626682281494
    6. 'map' (adapté à ' map') → logprob: -4.301626682281494
    7. '(len' → logprob: -5.301626682281494
    8. '[(' → logprob: -5.676626682281494
    9. '[len' → logprob: -5.801626682281494
    10. '1' → logprob: -5.926626682281494

Token 24: '(lambda' (ID: 43341)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.4874643087387085
    2. '(lambda' → logprob: -1.2374643087387085
    3. '(' → logprob: -2.362464427947998
    4. '(len' → logprob: -6.987464427947998
    5. '(
' → logprob: -7.737464427947998
    6. '(str' → logprob: -9.73746395111084
    7. '(abs' → logprob: -10.86246395111084
    8. ')' → logprob: -10.86246395111084
    9. 'int' → logprob: -11.36246395111084
    10. '(bool' → logprob: -11.36246395111084

Token 25: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.7500251531600952
    2. 'x' → logprob: -1.2500251531600952
    3. 'lambda' → logprob: -2.0000252723693848
    4. ' lambda' → logprob: -2.3750252723693848
    5. '(lambda' → logprob: -4.750025272369385
    6. 'int' → logprob: -6.625025272369385
    7. ' ' → logprob: -7.625025272369385
    8. 'n' → logprob: -8.000024795532227
    9. 'len' → logprob: -8.500024795532227
    10. ' int' → logprob: -8.625024795532227

Token 26: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00020902375399600714
    2. ' :' → logprob: -8.750208854675293
    3. ':int' → logprob: -10.375208854675293
    4. ':x' → logprob: -11.625208854675293
    5. '=' → logprob: -12.875208854675293
    6. ',' → logprob: -13.375208854675293
    7. 'x' → logprob: -13.500208854675293
    8. ':
' → logprob: -14.250208854675293
    9. 'int' → logprob: -14.750208854675293
    10. '1' → logprob: -14.875208854675293

Token 27: ' ' (ID: 220)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -1.0403822660446167
    2. ' int' → logprob: -1.5403822660446167
    3. 'int' → logprob: -1.7903822660446167
    4. 'x' → logprob: -2.1653823852539062
    5. '1' → logprob: -3.4153823852539062
    6. 'len' → logprob: -3.4153823852539062
    7. 'lambda' → logprob: -3.7903823852539062
    8. ' lambda' → logprob: -4.040382385253906
    9. ' ' → logprob: -4.290382385253906
    10. ' len' → logprob: -4.665382385253906

Token 28: '1' (ID: 16)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.7598963379859924
    2. 'int' → logprob: -1.1348962783813477
    3. '1' → logprob: -2.3848962783813477
    4. 'lambda' → logprob: -2.8848962783813477
    5. 'len' → logprob: -3.7598962783813477
    6. '(int' → logprob: -4.884896278381348
    7. ' x' → logprob: -5.009896278381348
    8. '(lambda' → logprob: -5.134896278381348
    9. '(x' → logprob: -5.509896278381348
    10. 'N' → logprob: -5.634896278381348

Token 29: ' if' (ID: 538)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.03349180892109871
    2. ' if' → logprob: -3.533491849899292
    3. 'if' → logprob: -6.033491611480713
    4. ' ,' → logprob: -7.033491611480713
    5. ',x' → logprob: -8.408492088317871
    6. '+' → logprob: -9.783492088317871
    7. ')' → logprob: -10.283492088317871
    8. ',int' → logprob: -10.533492088317871
    9. '   ' → logprob: -11.158492088317871
    10. ' +' → logprob: -11.658492088317871

Token 30: ' len' (ID: 4631)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.6356242895126343
    2. ' x' → logprob: -0.7606242895126343
    3. ' ' → logprob: -7.135624408721924
    4. 'int' → logprob: -7.510624408721924
    5. ' int' → logprob: -7.760624408721924
    6. '(x' → logprob: -8.135623931884766
    7. ' (' → logprob: -8.385623931884766
    8. 'N' → logprob: -9.010623931884766
    9. '(' → logprob: -9.135623931884766
    10. '0' → logprob: -9.510623931884766

Token 31: '(str' (ID: 7946)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.05614262446761131
    2. '(' → logprob: -3.306142568588257
    3. '(str' → logprob: -4.306142807006836
    4. '(set' → logprob: -5.431142807006836
    5. 'x' → logprob: -10.681142807006836
    6. '(s' → logprob: -10.931142807006836
    7. '(list' → logprob: -11.306142807006836
    8. 'str' → logprob: -12.556142807006836
    9. '(
' → logprob: -12.681142807006836
    10. ' (' → logprob: -13.181142807006836

Token 32: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.0006735934875905514
    2. '(' → logprob: -7.375673770904541
    3. '(abs' → logprob: -10.875673294067383
    4. '(N' → logprob: -11.250673294067383
    5. '(int' → logprob: -12.000673294067383
    6. '((' → logprob: -13.000673294067383
    7. 'x' → logprob: -13.375673294067383
    8. '(i' → logprob: -14.125673294067383
    9. '(max' → logprob: -14.125673294067383
    10. ')' → logprob: -14.375673294067383

Token 33: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.01117973867803812
    2. '**' → logprob: -5.0111799240112305
    3. ')' → logprob: -6.6361799240112305
    4. '%' → logprob: -7.1361799240112305
    5. ').' → logprob: -7.7611799240112305
    6. ')))' → logprob: -7.8861799240112305
    7. ' ' → logprob: -8.26117992401123
    8. ' ))' → logprob: -8.38617992401123
    9. '()))' → logprob: -8.38617992401123
    10. '*' → logprob: -9.01117992401123

Token 34: ' &' (ID: 827)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '==' → logprob: -0.4495774805545807
    2. ' ==' → logprob: -1.1995774507522583
    3. '%' → logprob: -3.199577569961548
    4. ' %' → logprob: -4.199577331542969
    5. ' ' → logprob: -6.699577331542969
    6. ')' → logprob: -7.324577331542969
    7. '<=' → logprob: -7.324577331542969
    8. '=' → logprob: -7.574577331542969
    9. '()==' → logprob: -7.949577331542969
    10. '>=' → logprob: -8.199577331542969

Token 35: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.2932351529598236
    2. ' ' → logprob: -2.4182350635528564
    3. 'x' → logprob: -2.5432350635528564
    4. ' x' → logprob: -3.0432350635528564
    5. '&' → logprob: -5.0432353019714355
    6. '2' → logprob: -5.1682353019714355
    7. '7' → logprob: -5.4182353019714355
    8. '4' → logprob: -5.6682353019714355
    9. '3' → logprob: -5.7932353019714355
    10. ' N' → logprob: -6.0432353019714355

Token 36: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.13069473206996918
    2. 'x' → logprob: -2.255694627761841
    3. 'N' → logprob: -5.25569486618042
    4. ' ' → logprob: -5.38069486618042
    5. '7' → logprob: -5.63069486618042
    6. '4' → logprob: -7.63069486618042
    7. '3' → logprob: -7.75569486618042
    8. ' x' → logprob: -7.75569486618042
    9. '0' → logprob: -7.88069486618042
    10. 'amp' → logprob: -8.130694389343262

Token 37: ' else' (ID: 1203)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.8373791575431824
    2. ' else' → logprob: -1.2123792171478271
    3. 'else' → logprob: -1.9623792171478271
    4. ')' → logprob: -2.212379217147827
    5. ' ==' → logprob: -4.212378978729248
    6. '=' → logprob: -6.712378978729248
    7. ' ' → logprob: -6.837378978729248
    8. '),' → logprob: -7.087378978729248
    9. '0' → logprob: -7.212378978729248
    10. ')==' → logprob: -8.587379455566406

Token 38: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.31410878896713257
    2. ' ' → logprob: -1.3141088485717773
    3. '1' → logprob: -7.189108848571777
    4. '  ' → logprob: -10.189108848571777
    5. '   ' → logprob: -11.314108848571777
    6. ')' → logprob: -11.439108848571777
    7. ',' → logprob: -11.814108848571777
    8. '(' → logprob: -12.689108848571777
    9. ' x' → logprob: -12.689108848571777
    10. '    ' → logprob: -13.126608848571777

Token 39: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.011137550696730614
    2. ' ' → logprob: -4.51113748550415
    3. '1' → logprob: -9.511137962341309
    4. '   ' → logprob: -12.448637962341309
    5. '  ' → logprob: -12.448637962341309
    6. ')' → logprob: -13.386137962341309
    7. '(' → logprob: -14.136137962341309
    8. '    ' → logprob: -14.698637962341309
    9. ',' → logprob: -14.823637962341309
    10. 'x' → logprob: -15.073637962341309

Token 40: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0016362625174224377
    2. '),' → logprob: -7.376636028289795
    3. ',x' → logprob: -7.626636028289795
    4. ' ,' → logprob: -8.876636505126953
    5. 'range' → logprob: -9.126636505126953
    6. ')' → logprob: -9.751636505126953
    7. ',
' → logprob: -9.876636505126953
    8. ',n' → logprob: -10.751636505126953
    9. ',count' → logprob: -10.876636505126953
    10. ',input' → logprob: -11.126636505126953

Token 41: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.01108625903725624
    2. ' range' → logprob: -4.511086463928223
    3. '   ' → logprob: -11.386086463928223
    4. '(range' → logprob: -11.386086463928223
    5. ' ' → logprob: -11.511086463928223
    6. '	range' → logprob: -13.011086463928223
    7. '  ' → logprob: -13.511086463928223
    8. 'filter' → logprob: -13.636086463928223
    9. ')' → logprob: -14.386086463928223
    10. '[' → logprob: -15.886086463928223

Token 42: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0004892880679108202
    2. '(N' → logprob: -7.625489234924316
    3. '1' → logprob: -13.875489234924316
    4. '(
' → logprob: -15.375489234924316
    5. 'N' → logprob: -17.125490188598633
    6. '(n' → logprob: -17.125490188598633
    7. ' (' → logprob: -17.500490188598633
    8. '(

' → logprob: -18.125490188598633
    9. ')' → logprob: -18.500490188598633
    10. ',N' → logprob: -19.250490188598633

Token 43: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.14543597400188446
    2. 'N' → logprob: -2.6454360485076904
    3. '(' → logprob: -2.7704360485076904
    4. '(N' → logprob: -6.395435810089111
    5. ' ' → logprob: -11.02043628692627
    6. ' N' → logprob: -11.02043628692627
    7. ',N' → logprob: -11.89543628692627
    8. ')' → logprob: -12.27043628692627
    9. '10' → logprob: -12.52043628692627
    10. '100' → logprob: -12.77043628692627

Token 44: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0033317103516310453
    2. ' ,' → logprob: -6.378331661224365
    3. ',N' → logprob: -6.878331661224365
    4. 'N' → logprob: -7.503331661224365
    5. '(N' → logprob: -11.003332138061523
    6. '   ' → logprob: -11.378332138061523
    7. '1' → logprob: -11.753332138061523
    8. ' N' → logprob: -12.253332138061523
    9. ',n' → logprob: -13.503332138061523
    10. ',
' → logprob: -13.753332138061523

Token 45: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.018166331574320793
    2. ' N' → logprob: -4.018166542053223
    3. '   ' → logprob: -11.268166542053223
    4. '	N' → logprob: -13.143166542053223
    5. ' ' → logprob: -14.018166542053223
    6. '    ' → logprob: -15.018166542053223
    7. ' ' → logprob: -15.643166542053223
    8. '  ' → logprob: -15.643166542053223
    9. ')' → logprob: -16.143165588378906
    10. '(N' → logprob: -16.518165588378906

Token 46: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.01815415732562542
    2. ' +' → logprob: -4.018154144287109
    3. '))' → logprob: -13.26815414428711
    4. ')' → logprob: -13.51815414428711
    5. '   ' → logprob: -14.76815414428711
    6. ' ' → logprob: -15.39315414428711
    7. ')))' → logprob: -15.64315414428711
    8. '```' → logprob: -16.51815414428711
    9. ')+' → logprob: -16.64315414428711
    10. '＋' → logprob: -16.76815414428711

Token 47: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.002478273818269372
    2. ' ' → logprob: -6.002478122711182
    3. '   ' → logprob: -14.25247859954834
    4. '```' → logprob: -14.87747859954834
    5. ')' → logprob: -15.00247859954834
    6. '  ' → logprob: -15.25247859954834
    7. '2' → logprob: -15.25247859954834
    8. '))' → logprob: -15.93997859954834
    9. ' ' → logprob: -16.814977645874023
    10. ')))' → logprob: -17.064977645874023

Token 48: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.747814349073451e-05
    2. ' ' → logprob: -11.000017166137695
    3. '   ' → logprob: -15.250017166137695
    4. '```' → logprob: -15.625017166137695
    5. ')' → logprob: -16.375017166137695
    6. '  ' → logprob: -17.125017166137695
    7. '(' → logprob: -17.250017166137695
    8. '))' → logprob: -17.250017166137695
    9. '``' → logprob: -18.000017166137695
    10. '2' → logprob: -18.000017166137695

Token 49: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.045569464564323425
    2. ')' → logprob: -3.17056941986084
    3. ')))' → logprob: -6.17056941986084
    4. '))
' → logprob: -7.92056941986084
    5. ')
' → logprob: -9.42056941986084
    6. ')),' → logprob: -11.17056941986084
    7. '),' → logprob: -11.54556941986084
    8. '))
' → logprob: -12.79556941986084
    9. '))))' → logprob: -13.67056941986084
    10. ')
' → logprob: -13.67056941986084

Token 50: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0001261845463886857
    2. '))' → logprob: -9.375125885009766
    3. ')
' → logprob: -10.125125885009766
    4. '),' → logprob: -14.625125885009766
    5. ')))' → logprob: -14.875125885009766
    6. ' )' → logprob: -15.375125885009766
    7. ')

' → logprob: -16.625125885009766
    8. '   ' → logprob: -17.500125885009766
    9. ')#' → logprob: -17.875125885009766
    10. '```' → logprob: -17.875125885009766

Token 51: 'print' (ID: 1598)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.576395571231842
    2. 'print' → logprob: -0.826395571231842
    3. '#' → logprob: -9.076395988464355
    4. ')
' → logprob: -9.201395988464355
    5. '(print' → logprob: -9.701395988464355
    6. ' print' → logprob: -9.826395988464355
    7. '```' → logprob: -10.201395988464355
    8. '
' → logprob: -10.576395988464355
    9. '<|end|>' → logprob: -10.826395988464355
    10. '#print' → logprob: -11.451395988464355

Token 52: '(count' (ID: 25892)
  Prédit: '(count'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(count' → logprob: -0.10021723806858063
    2. '(' → logprob: -2.350217342376709
    3. 'count' → logprob: -12.22521686553955
    4. '(
' → logprob: -13.60021686553955
    5. '(print' → logprob: -13.72521686553955
    6. ' (' → logprob: -14.10021686553955
    7. '()' → logprob: -14.35021686553955
    8. '((' → logprob: -14.97521686553955
    9. '(c' → logprob: -15.35021686553955
    10. '(sum' → logprob: -15.47521686553955

Token 53: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00020544764993246645
    2. '))' → logprob: -8.500205039978027
    3. ' )' → logprob: -14.375205039978027
    4. ')
' → logprob: -14.875205039978027
    5. ')))' → logprob: -14.875205039978027
    6. '`)' → logprob: -15.750205039978027
    7. ')`' → logprob: -15.875205039978027
    8. '(' → logprob: -16.250205993652344
    9. '()' → logprob: -16.875205993652344
    10. '#' → logprob: -17.125205993652344


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 51
Tokens correctement prédits (1ère position, stricte): 16
Tokens correctement prédits (1ère position, avec adaptation): 17
Tokens correctement prédits (top 10): 39
Précision stricte (1ère position): 31.37%
Précision adaptée (1ère position): 33.33%
Précision (top 10): 76.47%
================================================================================
