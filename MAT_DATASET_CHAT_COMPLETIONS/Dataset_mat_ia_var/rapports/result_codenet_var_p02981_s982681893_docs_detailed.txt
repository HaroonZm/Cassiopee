================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:52:29
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def calculate_minimum_cost(n, a, b):
    """
    Calcule le coût minimum entre parcourir un trajet avec un tarif à l'unité (a * n)
    ou prendre un taxi avec un coût fixe (b).

    Args:
        n (int): Le nombre d'unités à parcourir.
        a (int): Le coût par unité.
        b (int): Le coût fixe du taxi.

    Returns:
        int: Le coût minimal pour le trajet.
    """
    # Calcul du coût total si l'on paye le tarif à l'unité
    tarif_unitaire = a * n

    # Le coût du taxi est un coût fixe
    tarif_taxi = b

    # On retourne le coût minimum entre le tarif unitaire et le tarif taxi
    return min(tarif_unitaire, tarif_taxi)

if __name__ == "__main__":
    # Lecture de l'entrée utilisateur et conversion en entiers : n, a, et b
    n, a, b = map(int, input().split())
    
    # Calcul et affichage du coût minimal
    resultat = calculate_minimum_cost(n, a, b)
    print(resultat)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' calculate' (ID: 17950)
  → Token d'amorce (pas de prédiction)

Token 2: '_min' (ID: 15950)
  → Token d'amorce (pas de prédiction)

Token 3: 'imum' (ID: 4556)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.00276279472745955
    2. 'imum' → logprob: -6.627762794494629
    3. '_distance' → logprob: -8.002762794494629
    4. '_val' → logprob: -8.377762794494629
    5. '```' → logprob: -8.502762794494629
    6. '_ut' → logprob: -9.627762794494629
    7. ' _' → logprob: -10.127762794494629
    8. '_token' → logprob: -10.252762794494629
    9. '(_' → logprob: -10.377762794494629
    10. '_uc' → logprob: -10.502762794494629

Token 4: '_cost' (ID: 36820)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0004867994866799563
    2. '_distance' → logprob: -9.000486373901367
    3. '_space' → logprob: -9.250486373901367
    4. '_price' → logprob: -10.250486373901367
    5. '_cost' → logprob: -10.875486373901367
    6. '_token' → logprob: -11.375486373901367
    7. '_pressure' → logprob: -11.375486373901367
    8. '_threshold' → logprob: -11.500486373901367
    9. '_value' → logprob: -11.625486373901367
    10. '_s' → logprob: -11.750486373901367

Token 5: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.17168644070625305
    2. '_' → logprob: -2.2966864109039307
    3. '(_:' → logprob: -4.04668664932251
    4. '(_' → logprob: -4.17168664932251
    5. '_:' → logprob: -4.54668664932251
    6. '```' → logprob: -5.29668664932251
    7. '(:' → logprob: -5.92168664932251
    8. '():' → logprob: -6.17168664932251
    9. '('_' → logprob: -8.171686172485352
    10. '(**' → logprob: -8.546686172485352

Token 6: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.06635351479053497
    2. '):' → logprob: -3.0663535594940186
    3. ')' → logprob: -4.0663533210754395
    4. ':' → logprob: -8.941353797912598
    5. ')>' → logprob: -9.941353797912598
    6. ',n' → logprob: -10.566353797912598
    7. ',a' → logprob: -10.566353797912598
    8. '_' → logprob: -10.816353797912598
    9. ' ,' → logprob: -10.816353797912598
    10. '_,' → logprob: -11.066353797912598

Token 7: ' a' (ID: 261)
  Prédit: ' items'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' items' → logprob: -0.6926551461219788
    2. ' m' → logprob: -0.9426551461219788
    3. ' k' → logprob: -3.442655086517334
    4. ' item' → logprob: -3.942655086517334
    5. ' cost' → logprob: -4.067655086517334
    6. ' price' → logprob: -4.567655086517334
    7. ' product' → logprob: -5.692655086517334
    8. ' initial' → logprob: -5.942655086517334
    9. 'm' → logprob: -6.192655086517334
    10. ' p' → logprob: -6.567655086517334

Token 8: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.15337157249450684
    2. ',' → logprob: -2.028371572494507
    3. ')' → logprob: -5.028371810913086
    4. '[' → logprob: -6.403371810913086
    5. '_' → logprob: -6.778371810913086
    6. 's' → logprob: -8.278371810913086
    7. '_,' → logprob: -8.403371810913086
    8. '```' → logprob: -8.528371810913086
    9. '):
' → logprob: -9.278371810913086
    10. ':' → logprob: -9.778371810913086

Token 9: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.47418829798698425
    2. 'b' → logprob: -0.9741883277893066
    3. ' m' → logprob: -10.349187850952148
    4. ' s' → logprob: -11.599187850952148
    5. ' k' → logprob: -11.599187850952148
    6. 's' → logprob: -11.724187850952148
    7. 'm' → logprob: -11.724187850952148
    8. ')' → logprob: -11.974187850952148
    9. ' ' → logprob: -12.599187850952148
    10. ' p' → logprob: -12.724187850952148

Token 10: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0031699873507022858
    2. ')' → logprob: -6.128170013427734
    3. ',' → logprob: -7.253170013427734
    4. ':' → logprob: -8.503170013427734
    5. '```' → logprob: -10.128170013427734
    6. '):
' → logprob: -11.378170013427734
    7. ''):' → logprob: -11.753170013427734
    8. '"):' → logprob: -13.628170013427734
    9. '**' → logprob: -13.753170013427734
    10. ' ):' → logprob: -14.003170013427734

Token 11: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.006037107668817043
    2. '   ' → logprob: -5.75603723526001
    3. ':
' → logprob: -6.13103723526001
    4. '```' → logprob: -7.75603723526001
    5. '\' → logprob: -9.756036758422852
    6. '    
' → logprob: -10.381036758422852
    7. '():' → logprob: -10.506036758422852
    8. ':\' → logprob: -11.006036758422852
    9. '\n' → logprob: -11.256036758422852
    10. '  
' → logprob: -11.256036758422852

Token 12: ' """
' (ID: 7037)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2709890902042389
    2. '   ' → logprob: -1.6459890604019165
    3. '\n' → logprob: -4.020988941192627
    4. '```' → logprob: -4.645988941192627
    5. '\' → logprob: -5.270988941192627
    6. ':
' → logprob: -5.395988941192627
    7. '    
' → logprob: -6.645988941192627
    8. '       ' → logprob: -6.895988941192627
    9. '
' → logprob: -7.020988941192627
    10. ' ' → logprob: -7.520988941192627

Token 13: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.2243990898132324
    2. '\n' → logprob: -1.5993990898132324
    3. '"""' → logprob: -2.4743990898132324
    4. ' """' → logprob: -2.8493990898132324
    5. ' """
' → logprob: -2.8493990898132324
    6. '   ' → logprob: -2.9743990898132324
    7. ' 
' → logprob: -3.0993990898132324
    8. ' Calculate' → logprob: -3.3493990898132324
    9. ' \' → logprob: -3.7243990898132324
    10. 'i' → logprob: -3.8493990898132324

Token 14: ' Cal' (ID: 4453)
  Prédit: 'Calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Calculate' → logprob: -0.31282204389572144
    2. '"""' → logprob: -2.062822103500366
    3. 'Calcul' → logprob: -2.437822103500366
    4. 'C' → logprob: -3.687822103500366
    5. '"""
' → logprob: -4.812821865081787
    6. '   ' → logprob: -5.687821865081787
    7. ' Calculate' → logprob: -5.937821865081787
    8. ''''' → logprob: -6.187821865081787
    9. 'Find' → logprob: -6.562821865081787
    10. '""' → logprob: -6.687821865081787

Token 15: 'cule' (ID: 45017)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.478999525308609
    2. 'culate' → logprob: -0.9789994955062866
    3. 'cu' → logprob: -5.728999614715576
    4. 'cul' → logprob: -7.353999614715576
    5. 'cula' → logprob: -7.353999614715576
    6. '```' → logprob: -9.228999137878418
    7. '   ' → logprob: -9.728999137878418
    8. ' c' → logprob: -10.228999137878418
    9. 'l' → logprob: -10.603999137878418
    10. '  ' → logprob: -10.728999137878418

Token 16: ' le' (ID: 505)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.0027990564703941345
    2. 't' → logprob: -6.627799034118652
    3. 's' → logprob: -7.127799034118652
    4. 'te' → logprob: -7.752799034118652
    5. 'z' → logprob: -9.627799034118652
    6. 'space' → logprob: -10.502799034118652
    7. 'm' → logprob: -10.502799034118652
    8. '_' → logprob: -10.752799034118652
    9. 'u' → logprob: -11.002799034118652
    10. 'brate' → logprob: -11.502799034118652

Token 17: ' coût' (ID: 73109)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4533633887767792
    2. ' coût' → logprob: -1.2033634185791016
    3. '   ' → logprob: -3.7033634185791016
    4. '  ' → logprob: -3.7033634185791016
    5. 's' → logprob: -5.703363418579102
    6. ' minimum' → logprob: -5.828363418579102
    7. ' prix' → logprob: -6.578363418579102
    8. ' cô' → logprob: -6.828363418579102
    9. ' ' → logprob: -7.203363418579102
    10. ' co' → logprob: -7.203363418579102

Token 18: ' minimum' (ID: 11085)
  Prédit: ' minimum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' minimum' → logprob: -0.054732754826545715
    2. ' minimal' → logprob: -3.5547327995300293
    3. ' ' → logprob: -5.054732799530029
    4. 'minimum' → logprob: -5.304732799530029
    5. ' minimale' → logprob: -5.554732799530029
    6. '  ' → logprob: -6.429732799530029
    7. ' total' → logprob: -6.429732799530029
    8. ' optimal' → logprob: -6.804732799530029
    9. '   ' → logprob: -6.929732799530029
    10. ' de' → logprob: -7.054732799530029

Token 19: ' entre' (ID: 3853)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.17233064770698547
    2. ' de' → logprob: -2.422330617904663
    3. ' d' → logprob: -3.922330617904663
    4. '   ' → logprob: -4.547330856323242
    5. '```' → logprob: -4.797330856323242
    6. '  ' → logprob: -5.547330856323242
    7. '_' → logprob: -5.672330856323242
    8. ' pour' → logprob: -5.797330856323242
    9. ')' → logprob: -5.922330856323242
    10. ',' → logprob: -6.422330856323242

Token 20: ' parcour' (ID: 130642)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.2751460373401642
    2. 'l' → logprob: -3.150146007537842
    3. ' acheter' → logprob: -3.400146007537842
    4. ' la' → logprob: -3.525146007537842
    5. ' utiliser' → logprob: -3.650146007537842
    6. ' les' → logprob: -4.150146007537842
    7. ' le' → logprob: -4.150146007537842
    8. ' d' → logprob: -4.775146007537842
    9. ' continuer' → logprob: -4.900146007537842
    10. ' deux' → logprob: -4.900146007537842

Token 21: 'ir' (ID: 380)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.007266439963132143
    2. 'er' → logprob: -5.632266521453857
    3. 'ant' → logprob: -7.132266521453857
    4. 'e' → logprob: -7.132266521453857
    5. 'ir' → logprob: -7.257266521453857
    6. 'a' → logprob: -7.882266521453857
    7. '-' → logprob: -8.1322660446167
    8. 's' → logprob: -8.5072660446167
    9. '```' → logprob: -9.1322660446167
    10. ' r' → logprob: -9.8822660446167

Token 22: ' un' (ID: 537)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.46559205651283264
    2. '_' → logprob: -1.7155920267105103
    3. ' l' → logprob: -2.8405921459198
    4. ' le' → logprob: -2.9655921459198
    5. ' la' → logprob: -4.090591907501221
    6. 's' → logprob: -4.090591907501221
    7. '```' → logprob: -4.340591907501221
    8. ' les' → logprob: -4.715591907501221
    9. ' un' → logprob: -5.215591907501221
    10. 'l' → logprob: -5.465591907501221

Token 23: ' trajet' (ID: 110258)
  Prédit: 'segment'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'segment' → logprob: -1.1666055917739868
    2. ' segment' → logprob: -1.6666055917739868
    3. ' trajet' → logprob: -2.0416054725646973
    4. ' chemin' → logprob: -2.4166054725646973
    5. ' tron' → logprob: -2.7916054725646973
    6. 'traj' → logprob: -3.1666054725646973
    7. 'élé' → logprob: -4.479105472564697
    8. ' étage' → logprob: -4.541605472564697
    9. '```' → logprob: -4.854105472564697
    10. ' seul' → logprob: -4.916605472564697

Token 24: ' avec' (ID: 3937)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.12713630497455597
    2. ' en' → logprob: -3.12713623046875
    3. '_' → logprob: -4.37713623046875
    4. ',' → logprob: -5.12713623046875
    5. ' ,' → logprob: -5.12713623046875
    6. ' entre' → logprob: -5.25213623046875
    7. ' d' → logprob: -5.37713623046875
    8. ' de' → logprob: -5.50213623046875
    9. 'e' → logprob: -5.62713623046875
    10. ' complet' → logprob: -5.62713623046875

Token 25: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.2799566388130188
    2. ' une' → logprob: -2.279956579208374
    3. 'un' → logprob: -2.779956579208374
    4. ' des' → logprob: -3.529956579208374
    5. 'une' → logprob: -4.654956817626953
    6. ' ' → logprob: -4.904956817626953
    7. ' la' → logprob: -5.529956817626953
    8. ' transport' → logprob: -5.529956817626953
    9. '```' → logprob: -5.904956817626953
    10. ' le' → logprob: -6.029956817626953

Token 26: ' tarif' (ID: 55221)
  Prédit: ' véhicule'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' véhicule' → logprob: -1.4225623607635498
    2. 'vé' → logprob: -1.7975623607635498
    3. ' transport' → logprob: -2.04756236076355
    4. ' mode' → logprob: -2.54756236076355
    5. ' vélo' → logprob: -2.54756236076355
    6. ' moyen' → logprob: -2.79756236076355
    7. ' espace' → logprob: -3.54756236076355
    8. 'transport' → logprob: -3.54756236076355
    9. ' seul' → logprob: -3.92256236076355
    10. ' ' → logprob: -4.047562599182129

Token 27: ' à' (ID: 1221)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5473315119743347
    2. ' unique' → logprob: -1.2973315715789795
    3. '_' → logprob: -2.9223315715789795
    4. 'e' → logprob: -4.4223313331604
    5. '  ' → logprob: -4.6723313331604
    6. ' d' → logprob: -4.6723313331604
    7. ' space' → logprob: -4.6723313331604
    8. 's' → logprob: -4.9223313331604
    9. ' )' → logprob: -5.0473313331604
    10. ' de' → logprob: -5.7973313331604

Token 28: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.6796981692314148
    2. 'la' → logprob: -2.3046982288360596
    3. 'pas' → logprob: -2.6796982288360596
    4. ' pied' → logprob: -2.9296982288360596
    5. ' ' → logprob: -3.0546982288360596
    6. 'p' → logprob: -3.0546982288360596
    7. ' la' → logprob: -4.0546979904174805
    8. 'distance' → logprob: -4.0546979904174805
    9. ' l' → logprob: -4.1796979904174805
    10. 'v' → logprob: -4.1796979904174805

Token 29: ''un' (ID: 9788)
  Prédit: 'un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'un' → logprob: -0.6785892844200134
    2. 'u' → logprob: -2.053589344024658
    3. 'a' → logprob: -2.553589344024658
    4. '-' → logprob: -3.053589344024658
    5. ''un' → logprob: -3.053589344024658
    6. 'e' → logprob: -4.053589344024658
    7. 'aller' → logprob: -4.053589344024658
    8. ' unité' → logprob: -4.053589344024658
    9. ''aller' → logprob: -4.178589344024658
    10. 'é' → logprob: -4.178589344024658

Token 30: 'ité' (ID: 3761)
  Prédit: 'ité'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ité' → logprob: -0.054467834532260895
    2. 'itaire' → logprob: -3.0544679164886475
    3. 'it' → logprob: -5.304467678070068
    4. 'ique' → logprob: -7.929467678070068
    5. 'ite' → logprob: -9.304468154907227
    6. 'itié' → logprob: -9.679468154907227
    7. 'e' → logprob: -10.054468154907227
    8. 'ic' → logprob: -10.179468154907227
    9. '```' → logprob: -10.304468154907227
    10. 'itt' → logprob: -10.679468154907227

Token 31: ' (' (ID: 350)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.981058657169342
    2. 'e' → logprob: -1.1060585975646973
    3. ',' → logprob: -2.6060585975646973
    4. ')' → logprob: -3.3560585975646973
    5. '_' → logprob: -3.4810585975646973
    6. ' de' → logprob: -3.4810585975646973
    7. 's' → logprob: -3.8560585975646973
    8. ' d' → logprob: -4.106058597564697
    9. ' ,' → logprob: -4.481058597564697
    10. ' ou' → logprob: -4.481058597564697

Token 32: 'a' (ID: 64)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5068022012710571
    2. ' )' → logprob: -1.1318022012710571
    3. 'le' → logprob: -4.256802082061768
    4. 'l' → logprob: -4.881802082061768
    5. 'au' → logprob: -5.131802082061768
    6. 'par' → logprob: -5.131802082061768
    7. 'u' → logprob: -5.256802082061768
    8. 'la' → logprob: -5.381802082061768
    9. '')' → logprob: -5.631802082061768
    10. ' la' → logprob: -5.881802082061768

Token 33: ' *' (ID: 425)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.011362100951373577
    2. ' )' → logprob: -4.636362075805664
    3. ' ou' → logprob: -6.886362075805664
    4. '),' → logprob: -9.386362075805664
    5. ' par' → logprob: -9.386362075805664
    6. ' et' → logprob: -9.636362075805664
    7. 'ou' → logprob: -10.136362075805664
    8. '*' → logprob: -10.261362075805664
    9. 'par' → logprob: -10.511362075805664
    10. ' ' → logprob: -10.511362075805664

Token 34: ' n' (ID: 297)
  Prédit: ' distance'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' distance' → logprob: -1.230302333831787
    2. ' n' → logprob: -1.355302333831787
    3. 'distance' → logprob: -1.730302333831787
    4. ' la' → logprob: -2.355302333831787
    5. 'n' → logprob: -2.480302333831787
    6. ' nombre' → logprob: -3.730302333831787
    7. 'nombre' → logprob: -4.230302333831787
    8. ' ' → logprob: -4.480302333831787
    9. '1' → logprob: -4.605302333831787
    10. 'la' → logprob: -5.355302333831787

Token 35: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.012742370367050171
    2. ' )' → logprob: -4.387742519378662
    3. '*' → logprob: -9.262742042541504
    4. '+' → logprob: -10.137742042541504
    5. '),' → logprob: -10.637742042541504
    6. ' ' → logprob: -11.012742042541504
    7. '-' → logprob: -11.512742042541504
    8. '*)' → logprob: -12.012742042541504
    9. ' +' → logprob: -12.137742042541504
    10. '')' → logprob: -12.262742042541504

Token 36: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.24888165295124054
    2. '   ' → logprob: -2.2488815784454346
    3. ' )' → logprob: -2.8738815784454346
    4. ' ' → logprob: -3.7488815784454346
    5. ' ou' → logprob: -3.9988815784454346
    6. ' et' → logprob: -5.248881816864014
    7. '```' → logprob: -6.123881816864014
    8. '+' → logprob: -6.623881816864014
    9. ',' → logprob: -6.748881816864014
    10. '  ' → logprob: -7.123881816864014

Token 37: ' ou' (ID: 2031)
  Prédit: ' ou'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ou' → logprob: -1.1916321516036987
    2. ')' → logprob: -1.3166321516036987
    3. ' et' → logprob: -1.6916321516036987
    4. '   ' → logprob: -2.1916322708129883
    5. '```' → logprob: -3.0666322708129883
    6. ' ' → logprob: -3.1916322708129883
    7. 'et' → logprob: -4.566632270812988
    8. ' )' → logprob: -4.691632270812988
    9. '`' → logprob: -5.441632270812988
    10. '+' → logprob: -5.941632270812988

Token 38: ' prendre' (ID: 24257)
  Prédit: ' utiliser'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' utiliser' → logprob: -0.1614544689655304
    2. 'util' → logprob: -2.661454439163208
    3. 'prendre' → logprob: -4.411454677581787
    4. ' prendre' → logprob: -4.411454677581787
    5. ' en' → logprob: -4.911454677581787
    6. ' using' → logprob: -5.286454677581787
    7. ' d' → logprob: -5.661454677581787
    8. '```' → logprob: -5.661454677581787
    9. ' acheter' → logprob: -6.036454677581787
    10. ' à' → logprob: -6.286454677581787

Token 39: ' un' (ID: 537)
  Prédit: ' le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.5178880095481873
    2. ' un' → logprob: -1.142888069152832
    3. 'le' → logprob: -3.017888069152832
    4. ' une' → logprob: -4.517888069152832
    5. ' l' → logprob: -5.142888069152832
    6. ' la' → logprob: -5.142888069152832
    7. 'un' → logprob: -5.267888069152832
    8. ' les' → logprob: -6.267888069152832
    9. ' ' → logprob: -6.392888069152832
    10. 'l' → logprob: -6.517888069152832

Token 40: ' taxi' (ID: 42795)
  Prédit: ' abonnement'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' abonnement' → logprob: -0.4574158787727356
    2. ' ticket' → logprob: -2.082415819168091
    3. 'ab' → logprob: -2.457415819168091
    4. ' transport' → logprob: -3.457415819168091
    5. ' forfait' → logprob: -3.582415819168091
    6. 'transport' → logprob: -3.832415819168091
    7. ' billet' → logprob: -3.957415819168091
    8. ' trajet' → logprob: -4.58241605758667
    9. ' bus' → logprob: -4.83241605758667
    10. 'ticket' → logprob: -4.83241605758667

Token 41: ' avec' (ID: 3937)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.1740187108516693
    2. '.' → logprob: -2.424018621444702
    3. '(' → logprob: -3.549018621444702
    4. ',' → logprob: -4.299018859863281
    5. ':' → logprob: -5.049018859863281
    6. ' ' → logprob: -5.674018859863281
    7. ' pour' → logprob: -6.174018859863281
    8. '   ' → logprob: -6.299018859863281
    9. 'def' → logprob: -6.299018859863281
    10. '```' → logprob: -6.424018859863281

Token 42: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.18258130550384521
    2. 'un' → logprob: -1.8075813055038452
    3. 'une' → logprob: -7.057581424713135
    4. ' une' → logprob: -7.182581424713135
    5. ''un' → logprob: -8.557580947875977
    6. 'co' → logprob: -8.682580947875977
    7. 'le' → logprob: -8.807580947875977
    8. 'f' → logprob: -8.932580947875977
    9. ' le' → logprob: -9.307580947875977
    10. ' tarif' → logprob: -9.807580947875977

Token 43: ' coût' (ID: 73109)
  Prédit: ' forfait'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' forfait' → logprob: -0.430655837059021
    2. 'for' → logprob: -2.3056559562683105
    3. ' coût' → logprob: -2.4306559562683105
    4. 'co' → logprob: -2.4306559562683105
    5. ' tarif' → logprob: -3.8056559562683105
    6. ' prix' → logprob: -4.6806559562683105
    7. 'prix' → logprob: -4.9306559562683105
    8. ' for' → logprob: -5.0556559562683105
    9. 'tar' → logprob: -5.6806559562683105
    10. 'e' → logprob: -5.9306559562683105

Token 44: ' fixe' (ID: 111690)
  Prédit: ' fixe'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fixe' → logprob: -0.1941591501235962
    2. ' forfait' → logprob: -2.0691590309143066
    3. 'fix' → logprob: -4.194159030914307
    4. 'for' → logprob: -4.569159030914307
    5. ' fix' → logprob: -4.944159030914307
    6. ' fixed' → logprob: -5.444159030914307
    7. 'fixed' → logprob: -5.944159030914307
    8. ' de' → logprob: -6.194159030914307
    9. ' for' → logprob: -6.319159030914307
    10. ' unique' → logprob: -6.444159030914307

Token 45: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.057877831161022186
    2. '(' → logprob: -3.182877779006958
    3. ' ' → logprob: -6.307878017425537
    4. ' plus' → logprob: -6.307878017425537
    5. '(t' → logprob: -6.432878017425537
    6. '(n' → logprob: -6.807878017425537
    7. '(b' → logprob: -7.057878017425537
    8. '   ' → logprob: -7.057878017425537
    9. ')' → logprob: -7.182878017425537
    10. ' +' → logprob: -7.182878017425537

Token 46: 'b' (ID: 65)
  Prédit: ' b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.5761794447898865
    2. 'b' → logprob: -0.8261794447898865
    3. ' ' → logprob: -9.326179504394531
    4. '   ' → logprob: -9.451179504394531
    5. ')' → logprob: -10.951179504394531
    6. ')b' → logprob: -11.638679504394531
    7. '  ' → logprob: -11.951179504394531
    8. ' ' → logprob: -12.388679504394531
    9. ' a' → logprob: -12.451179504394531
    10. 'a' → logprob: -13.076179504394531

Token 47: ').

' (ID: 3991)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.013905378989875317
    2. ').' → logprob: -4.3889055252075195
    3. ' )' → logprob: -7.7639055252075195
    4. '*' → logprob: -8.38890552520752
    5. '),' → logprob: -9.01390552520752
    6. ' *' → logprob: -9.26390552520752
    7. ' ' → logprob: -9.38890552520752
    8. '):' → logprob: -9.51390552520752
    9. '.' → logprob: -9.76390552520752
    10. ' ' → logprob: -10.01390552520752

Token 48: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0019970352295786142
    2. '"""' → logprob: -6.876996994018555
    3. ')' → logprob: -7.626996994018555
    4. '\n' → logprob: -8.751996994018555
    5. '"""
' → logprob: -9.876996994018555
    6. '`' → logprob: -9.876996994018555
    7. '""' → logprob: -10.126996994018555
    8. '"' → logprob: -10.251996994018555
    9. '    
' → logprob: -10.501996994018555
    10. '    ' → logprob: -10.501996994018555

Token 49: ' Args' (ID: 39185)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18891434371471405
    2. '"""' → logprob: -1.8139142990112305
    3. '"""
' → logprob: -5.0639142990112305
    4. '""' → logprob: -6.6889142990112305
    5. '```' → logprob: -7.0639142990112305
    6. ')' → logprob: -8.43891429901123
    7. '\n' → logprob: -8.93891429901123
    8. '    
' → logprob: -9.18891429901123
    9. '
' → logprob: -10.06391429901123
    10. '"' → logprob: -10.31391429901123

Token 50: ':
' (ID: 734)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -1.2328050136566162
    2. ',' → logprob: -1.6078050136566162
    3. ':' → logprob: -1.6078050136566162
    4. ')' → logprob: -1.7328050136566162
    5. '   ' → logprob: -2.607805013656616
    6. ' :' → logprob: -3.482805013656616
    7. ' ):' → logprob: -4.857805252075195
    8. ' ,' → logprob: -5.357805252075195
    9. '[' → logprob: -5.857805252075195
    10. 'n' → logprob: -6.232805252075195

Token 51: '       ' (ID: 309)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.20628805458545685
    2. ' n' → logprob: -1.7062880992889404
    3. '   ' → logprob: -5.581287860870361
    4. ')' → logprob: -7.831287860870361
    5. ' )' → logprob: -8.33128833770752
    6. ' ' → logprob: -9.33128833770752
    7. '    ' → logprob: -9.58128833770752
    8. '```' → logprob: -9.70628833770752
    9. ' 
' → logprob: -9.95628833770752
    10. ' ' → logprob: -10.33128833770752

Token 52: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.028528498485684395
    2. '   ' → logprob: -4.028528690338135
    3. ' n' → logprob: -4.653528690338135
    4. '```' → logprob: -8.778528213500977
    5. 'int' → logprob: -9.028528213500977
    6. '`' → logprob: -9.278528213500977
    7. '       ' → logprob: -9.403528213500977
    8. 'distance' → logprob: -9.778528213500977
    9. '	n' → logprob: -10.153528213500977
    10. ' ' → logprob: -10.278528213500977

Token 53: ' (' (ID: 350)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.122378945350647
    2. ' (' → logprob: -1.622378945350647
    3. ',' → logprob: -1.997378945350647
    4. '<|end|>' → logprob: -2.1223788261413574
    5. ' ,' → logprob: -2.2473788261413574
    6. ':' → logprob: -3.4973788261413574
    7. '  ' → logprob: -3.7473788261413574
    8. '):' → logprob: -4.247378826141357
    9. '<|end|>' → logprob: -4.622378826141357
    10. ' ' → logprob: -4.747378826141357

Token 54: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.009777575731277466
    2. ' int' → logprob: -4.634777545928955
    3. '   ' → logprob: -11.259778022766113
    4. '```' → logprob: -12.384778022766113
    5. 'integer' → logprob: -13.884778022766113
    6. '[int' → logprob: -14.634778022766113
    7. '    ' → logprob: -14.759778022766113
    8. ':int' → logprob: -14.884778022766113
    9. 'n' → logprob: -15.134778022766113
    10. ')' → logprob: -15.384778022766113

Token 55: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.3148108124732971
    2. ')' → logprob: -1.3148107528686523
    3. '<|end|>' → logprob: -7.064810752868652
    4. ' ):' → logprob: -8.189810752868652
    5. ' )' → logprob: -9.439810752868652
    6. ',' → logprob: -9.814810752868652
    7. '   ' → logprob: -9.939810752868652
    8. '):
' → logprob: -10.314810752868652
    9. ' ' → logprob: -10.314810752868652
    10. '),' → logprob: -10.564810752868652

Token 56: ' Le' (ID: 2018)
  Prédit: ' Le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Le' → logprob: -0.24269115924835205
    2. 'Le' → logprob: -2.1176910400390625
    3. ' le' → logprob: -2.6176910400390625
    4. ' nombre' → logprob: -4.4926910400390625
    5. 'Nombre' → logprob: -5.3676910400390625
    6. ' Nombre' → logprob: -5.7426910400390625
    7. ' La' → logprob: -6.9926910400390625
    8. ' The' → logprob: -7.4926910400390625
    9. 'La' → logprob: -7.7426910400390625
    10. 'The' → logprob: -7.8676910400390625

Token 57: ' nombre' (ID: 9733)
  Prédit: 'nombre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'nombre' → logprob: -0.22576433420181274
    2. ' nombre' → logprob: -1.600764274597168
    3. 'distance' → logprob: -9.475764274597168
    4. ' ' → logprob: -9.850764274597168
    5. 'Nombre' → logprob: -10.225764274597168
    6. 'n' → logprob: -10.225764274597168
    7. 'nb' → logprob: -10.725764274597168
    8. ' ' → logprob: -10.850764274597168
    9. ' nombres' → logprob: -11.100764274597168
    10. 'num' → logprob: -11.600764274597168

Token 58: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.34026920795440674
    2. ' de' → logprob: -1.3402692079544067
    3. 'de' → logprob: -3.965269088745117
    4. 'd' → logprob: -4.965269088745117
    5. ' ' → logprob: -8.340269088745117
    6. ' ' → logprob: -8.590269088745117
    7. ' total' → logprob: -10.215269088745117
    8. '_de' → logprob: -10.715269088745117
    9. '  ' → logprob: -10.902769088745117
    10. '```' → logprob: -11.090269088745117

Token 59: ''' (ID: 6)
  Prédit: ' kilomètres'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' kilomètres' → logprob: -0.7549335360527039
    2. ' ' → logprob: -2.3799335956573486
    3. ' d' → logprob: -2.3799335956573486
    4. ' unités' → logprob: -2.5049335956573486
    5. ' de' → logprob: -3.3799335956573486
    6. 'kil' → logprob: -3.5049335956573486
    7. ' pas' → logprob: -3.6299335956573486
    8. 'unit' → logprob: -4.0049333572387695
    9. ' ' → logprob: -4.3799333572387695
    10. ' unit' → logprob: -4.5049333572387695

Token 60: 'unit' (ID: 5400)
  Prédit: 'kil'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'kil' → logprob: -0.041513606905937195
    2. 'pas' → logprob: -4.291513442993164
    3. ' kilomètres' → logprob: -5.166513442993164
    4. 'unit' → logprob: -5.416513442993164
    5. 'person' → logprob: -5.541513442993164
    6. 'pass' → logprob: -5.791513442993164
    7. 'km' → logprob: -5.791513442993164
    8. 'k' → logprob: -6.041513442993164
    9. '```' → logprob: -6.791513442993164
    10. ' kilom' → logprob: -8.041513442993164

Token 61: 'és' (ID: 1756)
  Prédit: 'és'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'és' → logprob: -0.0001483564410591498
    2. 'é' → logprob: -9.12514877319336
    3. 's' → logprob: -10.50014877319336
    4. 'e' → logprob: -12.37514877319336
    5. 'es' → logprob: -13.00014877319336
    6. 'ées' → logprob: -13.87514877319336
    7. 'á' → logprob: -14.37514877319336
    8. 'à' → logprob: -14.37514877319336
    9. '\xe' → logprob: -14.75014877319336
    10. 'ÉS' → logprob: -14.87514877319336

Token 62: ' à' (ID: 1221)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5580939650535583
    2. '   ' → logprob: -1.0580940246582031
    3. ' )' → logprob: -3.308094024658203
    4. ' de' → logprob: -4.808094024658203
    5. ' à' → logprob: -5.183094024658203
    6. ',' → logprob: -5.308094024658203
    7. '```' → logprob: -5.308094024658203
    8. ' ' → logprob: -5.683094024658203
    9. ' nécessaires' → logprob: -5.808094024658203
    10. '),' → logprob: -6.558094024658203

Token 63: ' parcour' (ID: 130642)
  Prédit: 'par'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'par' → logprob: -0.013690223917365074
    2. ' parcour' → logprob: -4.388689994812012
    3. 'tr' → logprob: -7.388689994812012
    4. '   ' → logprob: -7.763689994812012
    5. 'payer' → logprob: -10.138689994812012
    6. ' parc' → logprob: -11.013689994812012
    7. '```' → logprob: -11.138689994812012
    8. ' ' → logprob: -11.138689994812012
    9. 'prendre' → logprob: -11.638689994812012
    10. 'faire' → logprob: -12.013689994812012

Token 64: 'ir' (ID: 380)
  Prédit: 'ir'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ir' → logprob: -0.035178929567337036
    2. 'r' → logprob: -3.4101788997650146
    3. 'i' → logprob: -6.535179138183594
    4. 'er' → logprob: -10.660179138183594
    5. ')' → logprob: -11.535179138183594
    6. '#' → logprob: -11.660179138183594
    7. '>' → logprob: -11.660179138183594
    8. 'e' → logprob: -11.910179138183594
    9. 'rir' → logprob: -11.910179138183594
    10. '```' → logprob: -12.285179138183594

Token 65: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6479381322860718
    2. ')' → logprob: -0.7729381322860718
    3. '```' → logprob: -5.147938251495361
    4. ',' → logprob: -6.397938251495361
    5. '    
' → logprob: -6.522938251495361
    6. '\n' → logprob: -6.772938251495361
    7. ')
' → logprob: -6.772938251495361
    8. '):' → logprob: -7.397938251495361
    9. '\' → logprob: -8.022937774658203
    10. '"""
' → logprob: -8.272937774658203

Token 66: '       ' (ID: 309)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '```' → logprob: -1.2206079959869385
    2. ')' → logprob: -1.5956079959869385
    3. '   ' → logprob: -1.5956079959869385
    4. '\n' → logprob: -2.4706079959869385
    5. '"""' → logprob: -2.5956079959869385
    6. '\' → logprob: -2.9706079959869385
    7. ''' → logprob: -3.9706079959869385
    8. '"' → logprob: -4.345607757568359
    9. '`' → logprob: -4.345607757568359
    10. ' ' → logprob: -4.720607757568359

Token 67: ' a' (ID: 261)
  Prédit: 'Returns'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Returns' → logprob: -0.6695630550384521
    2. '   ' → logprob: -1.1695630550384521
    3. '"""' → logprob: -2.544563055038452
    4. '       ' → logprob: -2.669563055038452
    5. 'returns' → logprob: -4.669563293457031
    6. ' Returns' → logprob: -5.294563293457031
    7. '```' → logprob: -5.669563293457031
    8. 'return' → logprob: -5.794563293457031
    9. '"""
' → logprob: -5.919563293457031
    10. 'Return' → logprob: -6.419563293457031

Token 68: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.8136844635009766
    2. ')' → logprob: -1.1886844635009766
    3. '):' → logprob: -1.8136844635009766
    4. '(int' → logprob: -2.6886844635009766
    5. ':int' → logprob: -4.813684463500977
    6. ':' → logprob: -4.938684463500977
    7. 'int' → logprob: -6.938684463500977
    8. '(' → logprob: -7.063684463500977
    9. '   ' → logprob: -7.063684463500977
    10. '<|end|>' → logprob: -7.438684463500977

Token 69: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0004341261519584805
    2. ' int' → logprob: -7.750433921813965
    3. ')' → logprob: -13.125433921813965
    4. 'float' → logprob: -13.750433921813965
    5. '```' → logprob: -16.37543487548828
    6. ' )' → logprob: -16.87543487548828
    7. ''int' → logprob: -17.00043487548828
    8. '[int' → logprob: -17.25043487548828
    9. '=int' → logprob: -17.50043487548828
    10. ':int' → logprob: -17.62543487548828

Token 70: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0212445929646492
    2. ')' → logprob: -3.896244525909424
    3. ' ):' → logprob: -7.396244525909424
    4. '   ' → logprob: -10.271245002746582
    5. ':' → logprob: -10.896245002746582
    6. ' )' → logprob: -11.646245002746582
    7. '<|end|>' → logprob: -11.646245002746582
    8. '):
' → logprob: -12.521245002746582
    9. ''):' → logprob: -13.146245002746582
    10. '    ' → logprob: -13.271245002746582

Token 71: ' Le' (ID: 2018)
  Prédit: ' Le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Le' → logprob: -0.1411982923746109
    2. 'Le' → logprob: -2.1411983966827393
    3. ' le' → logprob: -4.39119815826416
    4. ' The' → logprob: -7.39119815826416
    5. ' Co' → logprob: -7.51619815826416
    6. 'The' → logprob: -8.01619815826416
    7. 'Co' → logprob: -9.76619815826416
    8. 'le' → logprob: -10.26619815826416
    9. ' La' → logprob: -10.26619815826416
    10. 'co' → logprob: -10.39119815826416

Token 72: ' coût' (ID: 73109)
  Prédit: 'co'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'co' → logprob: -0.46876639127731323
    2. ' coût' → logprob: -1.218766450881958
    3. ' tarif' → logprob: -3.093766450881958
    4. ' prix' → logprob: -3.843766450881958
    5. ' co' → logprob: -5.468766212463379
    6. 'prix' → logprob: -5.468766212463379
    7. ' cost' → logprob: -6.468766212463379
    8. ' cout' → logprob: -7.718766212463379
    9. 'tar' → logprob: -7.843766212463379
    10. 'cost' → logprob: -7.968766212463379

Token 73: ' par' (ID: 686)
  Prédit: ' par'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' par' → logprob: -0.07185614854097366
    2. ' un' → logprob: -3.6968562602996826
    3. ' au' → logprob: -3.9468562602996826
    4. ' à' → logprob: -4.5718560218811035
    5. ' unit' → logprob: -5.3218560218811035
    6. ' unité' → logprob: -5.6968560218811035
    7. '   ' → logprob: -6.6968560218811035
    8. 'au' → logprob: -6.6968560218811035
    9. '    ' → logprob: -6.9468560218811035
    10. 'un' → logprob: -7.1968560218811035

Token 74: ' unité' (ID: 181741)
  Prédit: ' unité'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' unité' → logprob: -0.10896561294794083
    2. 'un' → logprob: -2.4839656352996826
    3. 'unit' → logprob: -4.6089653968811035
    4. ' unit' → logprob: -5.3589653968811035
    5. ' trajet' → logprob: -5.9839653968811035
    6. ' un' → logprob: -6.1089653968811035
    7. 'traj' → logprob: -9.233965873718262
    8. ' ' → logprob: -9.858965873718262
    9. ' unite' → logprob: -10.108965873718262
    10. ' unidade' → logprob: -10.608965873718262

Token 75: '.
' (ID: 558)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.097481869161129
    2. '   ' → logprob: -2.7224819660186768
    3. ' )' → logprob: -4.097481727600098
    4. '):' → logprob: -5.222481727600098
    5. ',' → logprob: -6.597481727600098
    6. '),' → logprob: -6.722481727600098
    7. '       ' → logprob: -7.097481727600098
    8. '.' → logprob: -8.347481727600098
    9. ' ' → logprob: -8.347481727600098
    10. '```' → logprob: -8.347481727600098

Token 76: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08779847621917725
    2. '```' → logprob: -2.837798595428467
    3. '       ' → logprob: -4.837798595428467
    4. 'b' → logprob: -4.837798595428467
    5. '    ' → logprob: -5.837798595428467
    6. '    
' → logprob: -6.837798595428467
    7. '"""' → logprob: -7.087798595428467
    8. '`' → logprob: -7.087798595428467
    9. '\' → logprob: -7.212798595428467
    10. ''' → logprob: -7.337798595428467

Token 77: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' (adapté à ' b') → logprob: -0.08002683520317078
    2. ' b' → logprob: -2.580026865005493
    3. '   ' → logprob: -6.955026626586914
    4. '       ' → logprob: -8.955026626586914
    5. '    ' → logprob: -10.580026626586914
    6. '```' → logprob: -11.080026626586914
    7. ' ' → logprob: -12.205026626586914
    8. 'a' → logprob: -13.330026626586914
    9. '     ' → logprob: -14.080026626586914
    10. '  ' → logprob: -14.205026626586914

Token 78: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.1804370880126953
    2. '(int' → logprob: -1.8054370880126953
    3. '   ' → logprob: -7.930437088012695
    4. ')' → logprob: -8.305437088012695
    5. '```' → logprob: -10.555437088012695
    6. ':' → logprob: -10.930437088012695
    7. ':int' → logprob: -11.680437088012695
    8. '(' → logprob: -11.805437088012695
    9. '):' → logprob: -11.930437088012695
    10. '(float' → logprob: -12.180437088012695

Token 79: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.00033677343162707984
    2. ' int' → logprob: -8.000336647033691
    3. ')' → logprob: -13.750336647033691
    4. '```' → logprob: -16.500337600708008
    5. '   ' → logprob: -16.750337600708008
    6. ':int' → logprob: -17.125337600708008
    7. '(int' → logprob: -17.500337600708008
    8. '=int' → logprob: -18.000337600708008
    9. '	int' → logprob: -18.125337600708008
    10. '):' → logprob: -18.500337600708008

Token 80: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.4759772717952728
    2. ')' → logprob: -0.9759773015975952
    3. ' ):' → logprob: -7.100977420806885
    4. '   ' → logprob: -7.850977420806885
    5. ':' → logprob: -8.725976943969727
    6. ' )' → logprob: -8.850976943969727
    7. ' ' → logprob: -9.225976943969727
    8. '(int' → logprob: -9.475976943969727
    9. 'int' → logprob: -9.475976943969727
    10. ':int' → logprob: -10.725976943969727

Token 81: ' Le' (ID: 2018)
  Prédit: ' Le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Le' → logprob: -0.011672843247652054
    2. 'Le' → logprob: -4.8866729736328125
    3. ' le' → logprob: -5.5116729736328125
    4. 'le' → logprob: -11.011672973632812
    5. ' int' → logprob: -13.636672973632812
    6. ' L' → logprob: -14.511672973632812
    7. '_le' → logprob: -15.011672973632812
    8. ' La' → logprob: -15.136672973632812
    9. ' l' → logprob: -16.011672973632812
    10. '    ' → logprob: -16.886672973632812

Token 82: ' coût' (ID: 73109)
  Prédit: ' coût'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' coût' → logprob: -0.04803044721484184
    2. 'co' → logprob: -3.423030376434326
    3. ' tarif' → logprob: -4.923030376434326
    4. ' ' → logprob: -6.173030376434326
    5. ' co' → logprob: -6.673030376434326
    6. '   ' → logprob: -6.923030376434326
    7. ' prix' → logprob: -7.423030376434326
    8. ' coûts' → logprob: -8.298030853271484
    9. ' cout' → logprob: -8.548030853271484
    10. '  ' → logprob: -8.548030853271484

Token 83: ' fixe' (ID: 111690)
  Prédit: ' fixe'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fixe' → logprob: -0.03186732903122902
    2. 'fix' → logprob: -4.531867504119873
    3. '   ' → logprob: -4.781867504119873
    4. ' forfait' → logprob: -5.281867504119873
    5. ' fix' → logprob: -6.031867504119873
    6. ' minimum' → logprob: -6.531867504119873
    7. ' total' → logprob: -7.531867504119873
    8. ' fixé' → logprob: -7.781867504119873
    9. ' for' → logprob: -7.906867504119873
    10. ' fixed' → logprob: -8.156867027282715

Token 84: ' du' (ID: 1462)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.24441468715667725
    2. ')' → logprob: -2.244414806365967
    3. '):
' → logprob: -2.869414806365967
    4. '   ' → logprob: -3.494414806365967
    5. ').' → logprob: -3.869414806365967
    6. '.' → logprob: -7.119414806365967
    7. '):

' → logprob: -7.619414806365967
    8. '```' → logprob: -7.869414806365967
    9. ' ):' → logprob: -8.369414329528809
    10. ':' → logprob: -8.994414329528809

Token 85: ' taxi' (ID: 42795)
  Prédit: ' taxi'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' taxi' → logprob: -0.005861128214746714
    2. 'tax' → logprob: -5.880861282348633
    3. ' trajet' → logprob: -6.005861282348633
    4. ' tax' → logprob: -8.380861282348633
    5. ' taxis' → logprob: -9.380861282348633
    6. ' transport' → logprob: -9.755861282348633
    7. ' ' → logprob: -9.880861282348633
    8. 't' → logprob: -9.880861282348633
    9. '   ' → logprob: -10.630861282348633
    10. ' t' → logprob: -10.880861282348633

Token 86: '.

' (ID: 364)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.21832722425460815
    2. ')' → logprob: -2.468327283859253
    3. '):
' → logprob: -2.968327283859253
    4. '):' → logprob: -2.968327283859253
    5. '):

' → logprob: -5.593327045440674
    6. '```' → logprob: -5.593327045440674
    7. '"""' → logprob: -7.843327045440674
    8. '):
' → logprob: -8.343327522277832
    9. ')
' → logprob: -8.843327522277832
    10. '"""
' → logprob: -9.468327522277832

Token 87: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08112763613462448
    2. ')' → logprob: -2.706127643585205
    3. '"""' → logprob: -4.956127643585205
    4. '```' → logprob: -5.831127643585205
    5. '""' → logprob: -7.831127643585205
    6. '"""
' → logprob: -8.206127166748047
    7. '``' → logprob: -8.581127166748047
    8. '")' → logprob: -9.706127166748047
    9. ')
' → logprob: -9.831127166748047
    10. '):' → logprob: -9.956127166748047

Token 88: ' Returns' (ID: 9609)
  Prédit: '"""'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"""' → logprob: -0.5842101573944092
    2. ')' → logprob: -1.5842101573944092
    3. '   ' → logprob: -1.9592101573944092
    4. '"""
' → logprob: -2.459210157394409
    5. '""' → logprob: -5.334210395812988
    6. 'Returns' (adapté à ' Returns') → logprob: -6.459210395812988
    7. '```' → logprob: -6.709210395812988
    8. '"' → logprob: -6.834210395812988
    9. ')
' → logprob: -7.209210395812988
    10. '")' → logprob: -7.209210395812988

Token 89: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.113440603017807
    2. ' :' → logprob: -2.23844051361084
    3. '):' → logprob: -8.73844051361084
    4. ' ):' → logprob: -9.36344051361084
    5. ':int' → logprob: -9.36344051361084
    6. ')' → logprob: -10.23844051361084
    7. '<|end|>' → logprob: -10.23844051361084
    8. ' int' → logprob: -10.61344051361084
    9. 'int' → logprob: -10.73844051361084
    10. ',' → logprob: -10.98844051361084

Token 90: '       ' (ID: 309)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.024155179038643837
    2. '   ' → logprob: -4.024155139923096
    3. 'int' → logprob: -5.149155139923096
    4. '       ' → logprob: -9.149155616760254
    5. '    ' → logprob: -9.649155616760254
    6. '```' → logprob: -12.649155616760254
    7. ' le' → logprob: -13.149155616760254
    8. ' 
' → logprob: -14.024155616760254
    9. '(int' → logprob: -14.149155616760254
    10. ' The' → logprob: -14.274155616760254

Token 91: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' (adapté à ' int') → logprob: -0.04887371137738228
    2. ' int' → logprob: -3.0488736629486084
    3. '   ' → logprob: -8.173873901367188
    4. '```' → logprob: -13.048873901367188
    5. '       ' → logprob: -14.173873901367188
    6. '
' → logprob: -14.548873901367188
    7. 'min' → logprob: -15.298873901367188
    8. 'The' → logprob: -15.548873901367188
    9. '	int' → logprob: -16.048873901367188
    10. '  ' → logprob: -16.048873901367188

Token 92: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.012777911499142647
    2. ' :' → logprob: -4.387777805328369
    3. '   ' → logprob: -9.137778282165527
    4. '):' → logprob: -9.512778282165527
    5. ':return' → logprob: -10.012778282165527
    6. '```' → logprob: -11.637778282165527
    7. ' ):' → logprob: -12.137778282165527
    8. '<|end|>' → logprob: -12.387778282165527
    9. '    ' → logprob: -12.512778282165527
    10. '  ' → logprob: -12.762778282165527

Token 93: ' Le' (ID: 2018)
  Prédit: ' min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.22514691948890686
    2. ' Le' → logprob: -1.7251468896865845
    3. ' le' → logprob: -4.350146770477295
    4. ' minimum' → logprob: -5.475146770477295
    5. ' La' → logprob: -5.600146770477295
    6. '   ' → logprob: -7.225146770477295
    7. ' la' → logprob: -7.475146770477295
    8. 'Le' → logprob: -7.725146770477295
    9. ' max' → logprob: -8.350147247314453
    10. ' The' → logprob: -8.725147247314453

Token 94: ' coût' (ID: 73109)
  Prédit: ' minimum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' minimum' → logprob: -0.26010334491729736
    2. ' coût' → logprob: -1.5101033449172974
    3. ' co' → logprob: -6.260103225708008
    4. ' min' → logprob: -6.885103225708008
    5. ' moindre' → logprob: -6.885103225708008
    6. ' cost' → logprob: -7.135103225708008
    7. ' prix' → logprob: -7.385103225708008
    8. ' minimal' → logprob: -7.510103225708008
    9. ' cout' → logprob: -7.885103225708008
    10. '   ' → logprob: -8.010103225708008

Token 95: ' minimal' (ID: 19957)
  Prédit: ' minimum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' minimum' → logprob: -0.020291006192564964
    2. 'minimum' → logprob: -4.270290851593018
    3. ' minimal' → logprob: -5.145290851593018
    4. '   ' → logprob: -9.395291328430176
    5. ' maximum' → logprob: -10.020291328430176
    6. ' min' → logprob: -10.270291328430176
    7. '    ' → logprob: -10.395291328430176
    8. ' minimale' → logprob: -10.770291328430176
    9. ' mínimo' → logprob: -10.895291328430176
    10. 'minimal' → logprob: -11.145291328430176

Token 96: ' pour' (ID: 1930)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -1.1714236736297607
    2. '
' → logprob: -1.4214236736297607
    3. '   ' → logprob: -1.5464236736297607
    4. '.
' → logprob: -2.6714236736297607
    5. '"""
' → logprob: -3.4214236736297607
    6. '```' → logprob: -3.5464236736297607
    7. ' 
' → logprob: -3.7964236736297607
    8. ':
' → logprob: -4.29642391204834
    9. ':' → logprob: -4.29642391204834
    10. '\n' → logprob: -4.42142391204834

Token 97: ' le' (ID: 505)
  Prédit: ' parcour'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' parcour' → logprob: -0.4772357642650604
    2. 'par' → logprob: -1.8522357940673828
    3. ' par' → logprob: -2.352235794067383
    4. ' effectuer' → logprob: -2.727235794067383
    5. ' le' → logprob: -3.227235794067383
    6. '   ' → logprob: -4.477235794067383
    7. ' n' → logprob: -5.477235794067383
    8. ' couvrir' → logprob: -6.227235794067383
    9. 'n' → logprob: -6.602235794067383
    10. ' parc' → logprob: -7.227235794067383

Token 98: ' trajet' (ID: 110258)
  Prédit: ' trajet'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' trajet' → logprob: -0.26103895902633667
    2. 'traj' → logprob: -1.5110390186309814
    3. 'par' → logprob: -5.636038780212402
    4. ' déplacement' → logprob: -6.136038780212402
    5. ' parcours' → logprob: -6.886038780212402
    6. 'voy' → logprob: -7.386038780212402
    7. 'transport' → logprob: -7.386038780212402
    8. 'tra' → logprob: -8.011038780212402
    9. '   ' → logprob: -8.511038780212402
    10. 'trav' → logprob: -9.511038780212402

Token 99: '.
' (ID: 558)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0332986116409302
    2. '   ' → logprob: -1.0332986116409302
    3. '):' → logprob: -2.4082984924316406
    4. '
' → logprob: -2.6582984924316406
    5. '):
' → logprob: -3.1582984924316406
    6. ':' → logprob: -3.2832984924316406
    7. ':
' → logprob: -3.7832984924316406
    8. '```' → logprob: -4.033298492431641
    9. '    
' → logprob: -6.533298492431641
    10. '\n' → logprob: -6.533298492431641

Token 100: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014135301113128662
    2. '
' → logprob: -5.264135360717773
    3. '"""' → logprob: -5.264135360717773
    4. ')' → logprob: -6.139135360717773
    5. '    
' → logprob: -7.889135360717773
    6. '\n' → logprob: -7.889135360717773
    7. '"""
' → logprob: -8.389135360717773
    8. ' """' → logprob: -9.139135360717773
    9. '```' → logprob: -9.389135360717773
    10. ' 
' → logprob: -9.764135360717773

Token 101: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04206239804625511
    2. ')' → logprob: -4.167062282562256
    3. '
' → logprob: -4.417062282562256
    4. '"""' → logprob: -4.542062282562256
    5. '```' → logprob: -7.167062282562256
    6. '):' → logprob: -7.667062282562256
    7. '):
' → logprob: -7.917062282562256
    8. ':' → logprob: -7.917062282562256
    9. '    
' → logprob: -8.292062759399414
    10. '\n' → logprob: -8.667062759399414

Token 102: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0003613256849348545
    2. '
' → logprob: -8.375361442565918
    3. 'return' → logprob: -10.000361442565918
    4. ' return' → logprob: -10.000361442565918
    5. '    
' → logprob: -10.500361442565918
    6. '```' → logprob: -11.875361442565918
    7. '   ' → logprob: -13.625361442565918
    8. ' 
' → logprob: -13.750361442565918
    9. '    ' → logprob: -14.125361442565918
    10. 'r' → logprob: -14.500361442565918

Token 103: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.24325719475746155
    2. '   ' → logprob: -2.1182572841644287
    3. ' return' → logprob: -2.3682572841644287
    4. 'if' → logprob: -6.74325704574585
    5. ' if' → logprob: -7.99325704574585
    6. '```' → logprob: -8.618257522583008
    7. 'r' → logprob: -8.868257522583008
    8. 'c' → logprob: -9.618257522583008
    9. 'cost' → logprob: -9.993257522583008
    10. '    
' → logprob: -10.868257522583008

Token 104: ' Calcul' (ID: 57243)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.5046494007110596
    2. 'return' → logprob: -1.1296494007110596
    3. 'if' → logprob: -3.6296494007110596
    4. ' if' → logprob: -3.7546494007110596
    5. '   ' → logprob: -5.0046491622924805
    6. 'cost' → logprob: -5.2546491622924805
    7. ' cost' → logprob: -5.7546491622924805
    8. ' min' → logprob: -6.0046491622924805
    9. 'min' → logprob: -6.2546491622924805
    10. 'co' → logprob: -6.7546491622924805

Token 105: ' du' (ID: 1462)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02604236640036106
    2. ' return' → logprob: -4.026042461395264
    3. ' cost' → logprob: -6.526042461395264
    4. ' if' → logprob: -6.776042461395264
    5. ' minimum' → logprob: -7.526042461395264
    6. '_' → logprob: -7.651042461395264
    7. '_cost' → logprob: -7.651042461395264
    8. 'cost' → logprob: -7.901042461395264
    9. '```' → logprob: -7.901042461395264
    10. 'return' → logprob: -8.026041984558105

Token 106: ' coût' (ID: 73109)
  Prédit: ' min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.5223641991615295
    2. ' minimum' → logprob: -1.5223641395568848
    3. 'min' → logprob: -2.1473641395568848
    4. 'minimum' → logprob: -3.5223641395568848
    5. ' coût' → logprob: -3.8973641395568848
    6. 'co' → logprob: -4.647364139556885
    7. ' cout' → logprob: -5.897364139556885
    8. 'cost' → logprob: -6.147364139556885
    9. ' cost' → logprob: -6.272364139556885
    10. ' co' → logprob: -6.522364139556885

Token 107: ' total' (ID: 3609)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7811903953552246
    2. '_un' → logprob: -2.6561903953552246
    3. ' unit' → logprob: -2.7811903953552246
    4. 'un' → logprob: -2.9061903953552246
    5. ' minimum' → logprob: -3.1561903953552246
    6. '_unit' → logprob: -3.4061903953552246
    7. ' un' → logprob: -3.4061903953552246
    8. '_' → logprob: -3.5311903953552246
    9. ' à' → logprob: -3.5311903953552246
    10. '_a' → logprob: -3.6561903953552246

Token 108: ' si' (ID: 1784)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9736049771308899
    2. ' =' → logprob: -1.9736049175262451
    3. ' cost' → logprob: -2.223604917526245
    4. ' )' → logprob: -2.598604917526245
    5. '_' → logprob: -3.348604917526245
    6. ' return' → logprob: -3.473604917526245
    7. '    
' → logprob: -3.598604917526245
    8. ' if' → logprob: -3.598604917526245
    9. ' total' → logprob: -3.598604917526245
    10. ' :' → logprob: -3.723604917526245

Token 109: ' l' (ID: 305)
  Prédit: ' on'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' on' → logprob: -0.5185111165046692
    2. 'on' → logprob: -1.5185110569000244
    3. ' n' → logprob: -2.6435110569000244
    4. 'a' → logprob: -3.0185110569000244
    5. 'n' → logprob: -3.2685110569000244
    6. ' a' → logprob: -3.8935110569000244
    7. ' parcour' → logprob: -6.6435112953186035
    8. ''on' → logprob: -6.7685112953186035
    9. ' ' → logprob: -7.8935112953186035
    10. 'à' → logprob: -8.143510818481445

Token 110: ''on' (ID: 25812)
  Prédit: ''on'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''on' → logprob: -0.04137476161122322
    2. 'a' → logprob: -4.041374683380127
    3. ' on' → logprob: -4.416374683380127
    4. 'e' → logprob: -5.041374683380127
    5. 'on' → logprob: -6.291374683380127
    6. ' n' → logprob: -7.291374683380127
    7. 'n' → logprob: -7.541374683380127
    8. '’on' → logprob: -7.791374683380127
    9. ' a' → logprob: -8.291375160217285
    10. ''a' → logprob: -8.791375160217285

Token 111: ' pay' (ID: 2777)
  Prédit: ' prend'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' prend' → logprob: -1.2415502071380615
    2. ' chois' → logprob: -1.6165502071380615
    3. ' utilise' → logprob: -1.9915502071380615
    4. ' parc' → logprob: -2.2415502071380615
    5. 'par' → logprob: -2.7415502071380615
    6. ' continue' → logprob: -3.2415502071380615
    7. ' par' → logprob: -3.4915502071380615
    8. ' calc' → logprob: -3.8665502071380615
    9. ' op' → logprob: -4.241550445556641
    10. ' parcours' → logprob: -4.366550445556641

Token 112: 'e' (ID: 68)
  Prédit: 'e'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.014313584193587303
    2. 'er' → logprob: -4.639313697814941
    3. 'a' → logprob: -5.514313697814941
    4. '   ' → logprob: -8.514313697814941
    5. 'é' → logprob: -9.514313697814941
    6. ' e' → logprob: -9.889313697814941
    7. ' a' → logprob: -10.014313697814941
    8. ' ' → logprob: -10.389313697814941
    9. '  ' → logprob: -11.264313697814941
    10. '       ' → logprob: -11.514313697814941

Token 113: ' le' (ID: 505)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.028816938400268555
    2. ' n' → logprob: -4.403817176818848
    3. 'a' → logprob: -5.028817176818848
    4. ' au' → logprob: -5.278817176818848
    5. ' ' → logprob: -6.278817176818848
    6. ' à' → logprob: -6.778817176818848
    7. 'au' → logprob: -7.653817176818848
    8. 'n' → logprob: -8.028817176818848
    9. ' l' → logprob: -8.528817176818848
    10. ' par' → logprob: -9.028817176818848

Token 114: ' tarif' (ID: 55221)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.06091144680976868
    2. ' tarif' → logprob: -3.5609114170074463
    3. ' a' → logprob: -4.435911655426025
    4. 'à' → logprob: -5.060911655426025
    5. 'tar' → logprob: -5.685911655426025
    6. ' à' → logprob: -5.810911655426025
    7. 'au' → logprob: -6.435911655426025
    8. 'for' → logprob: -6.810911655426025
    9. 'par' → logprob: -7.435911655426025
    10. 'prix' → logprob: -7.560911655426025

Token 115: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.3600068986415863
    2. ' a' → logprob: -1.9850069284439087
    3. 'au' → logprob: -3.110006809234619
    4. 'a' → logprob: -3.360006809234619
    5. 'à' → logprob: -3.485006809234619
    6. ' au' → logprob: -3.985006809234619
    7. ' un' → logprob: -4.235006809234619
    8. ' par' → logprob: -4.360006809234619
    9. 'un' → logprob: -5.735006809234619
    10. ' ' → logprob: -6.485006809234619

Token 116: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -1.1251475811004639
    2. ' l' → logprob: -1.5001475811004639
    3. 'un' → logprob: -2.125147581100464
    4. 'a' → logprob: -2.250147581100464
    5. ' ' → logprob: -2.250147581100464
    6. ' unité' → logprob: -3.250147581100464
    7. ' a' → logprob: -3.375147581100464
    8. '_' → logprob: -4.500147819519043
    9. ' un' → logprob: -4.625147819519043
    10. '_un' → logprob: -4.750147819519043

Token 117: ''un' (ID: 9788)
  Prédit: ''un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''un' → logprob: -0.19069498777389526
    2. 'un' → logprob: -2.94069504737854
    3. 'a' → logprob: -3.06569504737854
    4. 'u' → logprob: -3.31569504737854
    5. ''' → logprob: -4.440694808959961
    6. 'e' → logprob: -5.065694808959961
    7. '   ' → logprob: -5.315694808959961
    8. '_un' → logprob: -6.440694808959961
    9. ''a' → logprob: -6.440694808959961
    10. 'unit' → logprob: -6.565694808959961

Token 118: 'ité' (ID: 3761)
  Prédit: 'ité'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ité' → logprob: -0.009119579568505287
    2. 'it' → logprob: -4.884119510650635
    3. 'ités' → logprob: -7.259119510650635
    4. ' it' → logprob: -8.134119987487793
    5. 'ite' → logprob: -8.634119987487793
    6. 'i' → logprob: -9.134119987487793
    7. 'itié' → logprob: -9.634119987487793
    8. '   ' → logprob: -10.009119987487793
    9. 'ié' → logprob: -10.884119987487793
    10. 'té' → logprob: -11.009119987487793

Token 119: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0087767094373703
    2. '    
' → logprob: -5.883776664733887
    3. ' return' → logprob: -6.258776664733887
    4. ' cost' → logprob: -6.883776664733887
    5. '
' → logprob: -7.008776664733887
    6. 'return' → logprob: -7.633776664733887
    7. 'cost' → logprob: -7.758776664733887
    8. ',' → logprob: -7.883776664733887
    9. '```' → logprob: -8.758776664733887
    10. ':' → logprob: -9.133776664733887

Token 120: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.029740996658802032
    2. ' cost' → logprob: -4.279740810394287
    3. 'cost' → logprob: -4.529740810394287
    4. ' unit' → logprob: -6.404740810394287
    5. ' total' → logprob: -7.029740810394287
    6. 'total' → logprob: -7.029740810394287
    7. 'unit' → logprob: -7.779740810394287
    8. 'co' → logprob: -8.654741287231445
    9. ' return' → logprob: -9.029741287231445
    10. ' coût' → logprob: -9.279741287231445

Token 121: ' tarif' (ID: 55221)
  Prédit: ' cost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' cost' → logprob: -0.7607080340385437
    2. 'cost' → logprob: -1.0107080936431885
    3. ' unit' → logprob: -2.3857080936431885
    4. 'unit' → logprob: -2.7607080936431885
    5. '   ' → logprob: -5.635707855224609
    6. 'total' → logprob: -6.010707855224609
    7. 'co' → logprob: -6.010707855224609
    8. ' total' → logprob: -6.510707855224609
    9. 'return' → logprob: -7.260707855224609
    10. ' return' → logprob: -7.260707855224609

Token 122: '_un' (ID: 11119)
  Prédit: '_un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_un' → logprob: -0.6198932528495789
    2. '_' → logprob: -1.4948933124542236
    3. '_par' → logprob: -1.7448933124542236
    4. '_a' → logprob: -3.6198933124542236
    5. '_total' → logprob: -4.2448930740356445
    6. '_unit' → logprob: -4.4948930740356445
    7. '_uni' → logprob: -5.2448930740356445
    8. '_per' → logprob: -5.8698930740356445
    9. ' =' → logprob: -6.1198930740356445
    10. '_uniform' → logprob: -9.494893074035645

Token 123: 'itaire' (ID: 28335)
  Prédit: 'itaire'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'itaire' → logprob: -0.16786031424999237
    2. 'it' → logprob: -2.792860269546509
    3. 'ité' → logprob: -2.917860269546509
    4. 'ite' → logprob: -3.917860269546509
    5. 'i' → logprob: -4.167860507965088
    6. '_it' → logprob: -6.542860507965088
    7. ' =' → logprob: -7.542860507965088
    8. 'ita' → logprob: -7.667860507965088
    9. '_i' → logprob: -7.917860507965088
    10. '_' → logprob: -7.917860507965088

Token 124: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.00525984913110733
    2. '=' → logprob: -5.380259990692139
    3. '_' → logprob: -7.630259990692139
    4. ' ' → logprob: -9.25525951385498
    5. '_total' → logprob: -10.75525951385498
    6. '_cost' → logprob: -11.50525951385498
    7. ' *' → logprob: -11.63025951385498
    8. ' ' → logprob: -12.25525951385498
    9. '   ' → logprob: -12.63025951385498
    10. '_per' → logprob: -12.88025951385498

Token 125: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.3873329162597656
    2. 'a' → logprob: -1.1373329162597656
    3. ' n' → logprob: -7.887332916259766
    4. 'n' → logprob: -9.387332916259766
    5. '	a' → logprob: -13.637332916259766
    6. '   ' → logprob: -14.137332916259766
    7. ' ' → logprob: -15.137332916259766
    8. ' ' → logprob: -15.637332916259766
    9. '_a' → logprob: -16.387332916259766
    10. ''a' → logprob: -17.637332916259766

Token 126: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.016041642054915428
    2. '*' → logprob: -4.1410417556762695
    3. '*n' → logprob: -12.14104175567627
    4. ' ' → logprob: -13.51604175567627
    5. ' ' → logprob: -14.39104175567627
    6. ' **' → logprob: -18.141040802001953
    7. '*num' → logprob: -18.391040802001953
    8. '**' → logprob: -18.891040802001953
    9. '*object' → logprob: -19.141040802001953
    10. ' *
' → logprob: -19.141040802001953

Token 127: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.474077433347702
    2. ' n' → logprob: -0.9740774631500244
    3. '	n' → logprob: -14.849077224731445
    4. ' ' → logprob: -16.349077224731445
    5. ' ' → logprob: -17.599077224731445
    6. '_n' → logprob: -17.599077224731445
    7. ')n' → logprob: -17.849077224731445
    8. '(n' → logprob: -18.349077224731445
    9. '<|end|>' → logprob: -19.349077224731445
    10. '```' → logprob: -19.599077224731445

Token 128: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.0005200279993005097
    2. '    
' → logprob: -8.625519752502441
    3. '
' → logprob: -8.875519752502441
    4. '  
' → logprob: -9.375519752502441
    5. '   ' → logprob: -10.250519752502441
    6. ' 
' → logprob: -10.500519752502441
    7. 'if' → logprob: -11.500519752502441
    8. 'return' → logprob: -11.625519752502441
    9. '   
' → logprob: -11.750519752502441
    10. '

' → logprob: -12.125519752502441

Token 129: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.0682796984910965
    2. '    
' → logprob: -3.44327974319458
    3. '   ' → logprob: -3.56827974319458
    4. '  
' → logprob: -6.06827974319458
    5. ' 
' → logprob: -6.56827974319458
    6. '\n' → logprob: -7.44327974319458
    7. '   
' → logprob: -7.56827974319458
    8. 'return' → logprob: -8.318279266357422
    9. ' return' → logprob: -8.443279266357422
    10. '
' → logprob: -8.818279266357422

Token 130: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.22436419129371643
    2. 'if' → logprob: -2.2243642807006836
    3. '#' (adapté à ' #') → logprob: -2.5993642807006836
    4. '   ' → logprob: -4.724364280700684
    5. ' return' → logprob: -5.099364280700684
    6. ' if' → logprob: -6.974364280700684
    7. 'cost' → logprob: -6.974364280700684
    8. 'co' → logprob: -7.099364280700684
    9. 'tar' → logprob: -8.599364280700684
    10. '
' → logprob: -8.599364280700684

Token 131: ' Le' (ID: 2018)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.628246009349823
    2. ' return' → logprob: -1.8782460689544678
    3. ' #' → logprob: -2.2532460689544678
    4. ' if' → logprob: -2.6282460689544678
    5. 'if' → logprob: -3.2532460689544678
    6. 'co' → logprob: -3.5032460689544678
    7. 'return' → logprob: -3.6282460689544678
    8. ' coût' → logprob: -4.378245830535889
    9. '   ' → logprob: -5.253245830535889
    10. ' calcul' → logprob: -6.003245830535889

Token 132: ' coût' (ID: 73109)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.36505216360092163
    2. 'return' → logprob: -2.3650522232055664
    3. ' coût' → logprob: -2.6150522232055664
    4. ' cout' → logprob: -3.7400522232055664
    5. '   ' → logprob: -3.8650522232055664
    6. ' minimum' → logprob: -3.9900522232055664
    7. 'co' → logprob: -3.9900522232055664
    8. ' retour' → logprob: -4.490052223205566
    9. ' min' → logprob: -4.615052223205566
    10. 'min' → logprob: -5.115052223205566

Token 133: ' du' (ID: 1462)
  Prédit: ' minimal'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' minimal' → logprob: -0.6459790468215942
    2. ' minimum' → logprob: -1.3959790468215942
    3. 'minimum' → logprob: -2.1459789276123047
    4. '_min' → logprob: -2.8959789276123047
    5. 'minimal' → logprob: -3.7709789276123047
    6. 'min' → logprob: -4.020978927612305
    7. '_' → logprob: -5.270978927612305
    8. ' minimale' → logprob: -5.645978927612305
    9. ' =' → logprob: -6.020978927612305
    10. ' min' → logprob: -7.145978927612305

Token 134: ' taxi' (ID: 42795)
  Prédit: ' taxi'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' taxi' → logprob: -0.21145156025886536
    2. 'tax' → logprob: -2.711451530456543
    3. ' min' → logprob: -3.461451530456543
    4. ' tarif' → logprob: -3.836451530456543
    5. 'min' → logprob: -4.211451530456543
    6. 'co' → logprob: -4.336451530456543
    7. ' minimum' → logprob: -4.836451530456543
    8. ' trajet' → logprob: -5.086451530456543
    9. 'tar' → logprob: -5.461451530456543
    10. ' coût' → logprob: -5.461451530456543

Token 135: ' est' (ID: 893)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.010676257312297821
    2. ' est' → logprob: -5.260676383972168
    3. '=' → logprob: -6.510676383972168
    4. '   ' → logprob: -6.885676383972168
    5. ' if' → logprob: -7.260676383972168
    6. ' ' → logprob: -7.635676383972168
    7. ' is' → logprob: -8.135676383972168
    8. ' vaut' → logprob: -8.135676383972168
    9. '<|end|>' → logprob: -8.260676383972168
    10. ',' → logprob: -8.760676383972168

Token 136: ' un' (ID: 537)
  Prédit: ' b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.02148427441716194
    2. 'b' → logprob: -4.771484375
    3. ' min' → logprob: -5.271484375
    4. ' ' → logprob: -5.396484375
    5. ' max' → logprob: -6.021484375
    6. ' ' → logprob: -7.896484375
    7. '	b' → logprob: -9.521484375
    8. '  ' → logprob: -9.771484375
    9. '   ' → logprob: -10.021484375
    10. 'min' → logprob: -10.521484375

Token 137: ' coût' (ID: 73109)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.6904767751693726
    2. ' coût' → logprob: -1.5654767751693726
    3. ' minimum' → logprob: -2.940476894378662
    4. ' b' → logprob: -3.190476894378662
    5. 'b' → logprob: -3.440476894378662
    6. 'co' → logprob: -3.440476894378662
    7. ' peu' → logprob: -3.565476894378662
    8. ' tarif' → logprob: -3.815476894378662
    9. ' e' → logprob: -4.565476894378662
    10. 'a' → logprob: -5.315476894378662

Token 138: ' fixe' (ID: 111690)
  Prédit: ' fixe'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fixe' → logprob: -0.016920020803809166
    2. 'fix' → logprob: -4.39192008972168
    3. ' fix' → logprob: -6.51692008972168
    4. ' fixed' → logprob: -6.51692008972168
    5. 'fixed' → logprob: -7.51692008972168
    6. 'f' → logprob: -8.14192008972168
    7. ' fixé' → logprob: -8.51692008972168
    8. ' constant' → logprob: -9.39192008972168
    9. ' fixes' → logprob: -9.89192008972168
    10. '   ' → logprob: -10.01692008972168

Token 139: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6671466827392578
    2. '
' → logprob: -0.9171466827392578
    3. '    
' → logprob: -2.792146682739258
    4. 'return' → logprob: -4.542146682739258
    5. ' return' → logprob: -5.542146682739258
    6. '

' → logprob: -5.667146682739258
    7. '    

' → logprob: -6.667146682739258
    8. '
' → logprob: -6.792146682739258
    9. '   
' → logprob: -7.042146682739258
    10. ',' → logprob: -7.417146682739258

Token 140: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06492211669683456
    2. '    
' → logprob: -3.0649220943450928
    3. '
' → logprob: -4.439922332763672
    4. ',' → logprob: -6.814922332763672
    5. '   
' → logprob: -7.064922332763672
    6. '.' → logprob: -7.814922332763672
    7. '  
' → logprob: -7.939922332763672
    8. ' 
' → logprob: -8.064922332763672
    9. '    ' → logprob: -8.439922332763672
    10. '  ' → logprob: -8.564922332763672

Token 141: ' tarif' (ID: 55221)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.5324362516403198
    2. ' return' → logprob: -1.7824362516403198
    3. '   ' → logprob: -2.1574363708496094
    4. 'if' → logprob: -3.1574363708496094
    5. 'co' → logprob: -3.2824363708496094
    6. 'cost' → logprob: -3.9074363708496094
    7. ' if' → logprob: -4.532436370849609
    8. 'cout' → logprob: -5.532436370849609
    9. ' cost' → logprob: -6.282436370849609
    10. '
' → logprob: -6.532436370849609

Token 142: '_t' (ID: 838)
  Prédit: '_t'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_t' → logprob: -0.5218284130096436
    2. '_' → logprob: -1.1468284130096436
    3. '_fix' → logprob: -3.1468284130096436
    4. '_f' → logprob: -4.146828651428223
    5. '_tax' → logprob: -4.396828651428223
    6. '_fixed' → logprob: -4.646828651428223
    7. ' _' → logprob: -5.896828651428223
    8. '_total' → logprob: -7.021828651428223
    9. ' =' → logprob: -7.396828651428223
    10. '_tar' → logprob: -7.396828651428223

Token 143: 'axi' (ID: 45348)
  Prédit: 'axi'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'axi' → logprob: -0.008915667422115803
    2. 'ax' → logprob: -5.508915901184082
    3. 'a' → logprob: -5.758915901184082
    4. 'axe' → logprob: -7.008915901184082
    5. 'axis' → logprob: -8.383915901184082
    6. '   ' → logprob: -8.508915901184082
    7. 'axa' → logprob: -9.633915901184082
    8. ' axi' → logprob: -9.633915901184082
    9. '_' → logprob: -10.758915901184082
    10. 'axy' → logprob: -11.008915901184082

Token 144: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.03804183006286621
    2. '=' → logprob: -3.288041830062866
    3. ' ' → logprob: -15.038042068481445
    4. ' ' → logprob: -16.413042068481445
    5. ' =
' → logprob: -18.413042068481445
    6. '   ' → logprob: -18.913042068481445
    7. '_' → logprob: -19.038042068481445
    8. '=b' → logprob: -19.288042068481445
    9. '＝' → logprob: -19.413042068481445
    10. '  ' → logprob: -19.788042068481445

Token 145: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.3868713080883026
    2. ' b' → logprob: -1.136871337890625
    3. '	b' → logprob: -15.636871337890625
    4. ' ' → logprob: -16.386871337890625
    5. ' б' → logprob: -18.636871337890625
    6. ' ' → logprob: -18.886871337890625
    7. '_b' → logprob: -19.011871337890625
    8. '   ' → logprob: -19.136871337890625
    9. '```' → logprob: -19.761871337890625
    10. ')b' → logprob: -20.011871337890625

Token 146: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.007923045195639133
    2. '   ' → logprob: -5.757923126220703
    3. '

' → logprob: -5.757923126220703
    4. '    
' → logprob: -7.507923126220703
    5. 'return' → logprob: -7.757923126220703
    6. '
' → logprob: -7.882923126220703
    7. '  
' → logprob: -9.007923126220703
    8. ' return' → logprob: -10.132923126220703
    9. '
    
' → logprob: -11.007923126220703
    10. '<|end|>' → logprob: -11.382923126220703

Token 147: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.1789034605026245
    2. '   ' → logprob: -2.053903579711914
    3. '    
' → logprob: -3.428903579711914
    4. 'return' → logprob: -6.553903579711914
    5. ' return' → logprob: -7.553903579711914
    6. '  
' → logprob: -7.678903579711914
    7. ' 
' → logprob: -7.678903579711914
    8. '   
' → logprob: -8.928903579711914
    9. '

' → logprob: -10.178903579711914
    10. '\n' → logprob: -10.428903579711914

Token 148: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.6959686279296875
    2. '   ' → logprob: -0.8209686279296875
    3. ' return' → logprob: -2.8209686279296875
    4. '
' → logprob: -7.4459686279296875
    5. '    
' → logprob: -7.4459686279296875
    6. '#' (adapté à ' #') → logprob: -7.6959686279296875
    7. 'if' → logprob: -9.070968627929688
    8. '```' → logprob: -9.945968627929688
    9. ' #' → logprob: -11.695968627929688
    10. '  ' → logprob: -11.820968627929688

Token 149: ' On' (ID: 2160)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.19519324600696564
    2. 'return' → logprob: -1.9451932907104492
    3. '   ' → logprob: -3.570193290710449
    4. ' if' → logprob: -6.320193290710449
    5. 'if' → logprob: -6.445193290710449
    6. '#' → logprob: -6.945193290710449
    7. ' min' → logprob: -7.320193290710449
    8. 'min' → logprob: -7.695193290710449
    9. ' #' → logprob: -8.32019329071045
    10. ' retour' → logprob: -9.07019329071045

Token 150: ' retourne' (ID: 178818)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.16298872232437134
    2. 'return' → logprob: -2.4129886627197266
    3. ' retourne' → logprob: -3.5379886627197266
    4. ' chois' → logprob: -3.9129886627197266
    5. 'ret' → logprob: -6.037988662719727
    6. '   ' → logprob: -6.412988662719727
    7. '_return' → logprob: -6.787988662719727
    8. '_' → logprob: -6.787988662719727
    9. ' choisi' → logprob: -7.162988662719727
    10. ' #' → logprob: -7.287988662719727

Token 151: ' le' (ID: 505)
  Prédit: ' min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.00980378221720457
    2. 'min' → logprob: -4.634803771972656
    3. ' tarif' → logprob: -10.259803771972656
    4. ' minimum' → logprob: -11.884803771972656
    5. ' max' → logprob: -13.009803771972656
    6. 'tar' → logprob: -13.884803771972656
    7. '	min' → logprob: -13.884803771972656
    8. ' ' → logprob: -14.759803771972656
    9. ' tar' → logprob: -14.884803771972656
    10. ' ' → logprob: -15.259803771972656

Token 152: ' coût' (ID: 73109)
  Prédit: ' min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.12309794872999191
    2. 'min' → logprob: -2.4980978965759277
    3. ' minimum' → logprob: -3.6230978965759277
    4. ' tarif' → logprob: -5.248097896575928
    5. 'minimum' → logprob: -7.373097896575928
    6. 'tar' → logprob: -7.873097896575928
    7. ' max' → logprob: -9.248098373413086
    8. ' tar' → logprob: -9.248098373413086
    9. '   ' → logprob: -9.498098373413086
    10. ' m' → logprob: -9.748098373413086

Token 153: ' minimum' (ID: 11085)
  Prédit: ' minimum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' minimum' → logprob: -0.13802722096443176
    2. ' minimal' → logprob: -2.2630271911621094
    3. ' min' → logprob: -4.013027191162109
    4. 'minimum' → logprob: -5.763027191162109
    5. 'min' → logprob: -6.138027191162109
    6. '_min' → logprob: -7.138027191162109
    7. ' minimale' → logprob: -7.888027191162109
    8. 'minimal' → logprob: -9.01302719116211
    9. '	min' → logprob: -9.51302719116211
    10. '   ' → logprob: -10.76302719116211

Token 154: ' entre' (ID: 3853)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1619676947593689
    2. '    
' → logprob: -2.9119677543640137
    3. '
' → logprob: -4.036967754364014
    4. ',' → logprob: -4.036967754364014
    5. ' entre' → logprob: -4.036967754364014
    6. ' 
' → logprob: -4.036967754364014
    7. ' ' → logprob: -5.411967754364014
    8. ' between' → logprob: -6.036967754364014
    9. '  
' → logprob: -6.286967754364014
    10. ' return' → logprob: -6.536967754364014

Token 155: ' le' (ID: 505)
  Prédit: 'tar'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tar' → logprob: -0.31415578722953796
    2. ' tarif' → logprob: -1.3141558170318604
    3. ' tar' → logprob: -7.814155578613281
    4. ' tariff' → logprob: -8.439155578613281
    5. ' tarifs' → logprob: -9.189155578613281
    6. ' ' → logprob: -9.939155578613281
    7. '   ' → logprob: -10.064155578613281
    8. 't' → logprob: -11.939155578613281
    9. ' тариф' → logprob: -11.939155578613281
    10. ' ' → logprob: -12.064155578613281

Token 156: ' tarif' (ID: 55221)
  Prédit: ' tarif'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tarif' → logprob: -0.1437242031097412
    2. 'tar' → logprob: -2.018724203109741
    3. ' tar' → logprob: -7.26872444152832
    4. ' ' → logprob: -9.39372444152832
    5. ' tarifs' → logprob: -9.51872444152832
    6. ' tariff' → logprob: -9.76872444152832
    7. ' ' → logprob: -10.39372444152832
    8. ' trajet' → logprob: -11.39372444152832
    9. ' coût' → logprob: -11.39372444152832
    10. '   ' → logprob: -11.51872444152832

Token 157: ' un' (ID: 537)
  Prédit: '_un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_un' → logprob: -0.0013470192207023501
    2. 'un' → logprob: -7.251347064971924
    3. ' un' → logprob: -7.751347064971924
    4. '_unit' → logprob: -10.126346588134766
    5. '_uni' → logprob: -10.126346588134766
    6. '_' → logprob: -10.501346588134766
    7. '_tar' → logprob: -10.501346588134766
    8. '   ' → logprob: -11.126346588134766
    9. ' _' → logprob: -11.626346588134766
    10. ' ' → logprob: -11.876346588134766

Token 158: 'itaire' (ID: 28335)
  Prédit: 'itaire'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'itaire' → logprob: -0.0001698094274615869
    2. 'ita' → logprob: -9.00016975402832
    3. 'it' → logprob: -11.50016975402832
    4. ' it' → logprob: -11.75016975402832
    5. '   ' → logprob: -12.25016975402832
    6. 'inaire' → logprob: -12.50016975402832
    7. 'taire' → logprob: -12.62516975402832
    8. 'itar' → logprob: -13.12516975402832
    9. 'ité' → logprob: -13.25016975402832
    10. 'itai' → logprob: -13.50016975402832

Token 159: ' et' (ID: 859)
  Prédit: ' et'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' et' → logprob: -0.3548446595668793
    2. ' ' → logprob: -1.6048446893692017
    3. ',' → logprob: -2.854844570159912
    4. 'et' → logprob: -3.854844570159912
    5. ' and' → logprob: -4.604844570159912
    6. ' ,' → logprob: -4.979844570159912
    7. '   ' → logprob: -6.604844570159912
    8. '  ' → logprob: -8.85484504699707
    9. ' и' → logprob: -8.85484504699707
    10. ' tarif' → logprob: -9.22984504699707

Token 160: ' le' (ID: 505)
  Prédit: ' tarif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tarif' → logprob: -0.16015760600566864
    2. 'tar' → logprob: -2.0351576805114746
    3. 'le' → logprob: -4.660157680511475
    4. ' le' → logprob: -4.910157680511475
    5. ' ' → logprob: -8.285157203674316
    6. ' tar' → logprob: -9.160157203674316
    7. ' tariff' → logprob: -10.410157203674316
    8. ' tarifs' → logprob: -10.410157203674316
    9. ' ' → logprob: -11.035157203674316
    10. ' la' → logprob: -11.535157203674316

Token 161: ' tarif' (ID: 55221)
  Prédit: 'tar'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tar' → logprob: -0.6841099262237549
    2. ' tarif' → logprob: -1.3091099262237549
    3. 'tax' → logprob: -1.6841099262237549
    4. ' taxi' → logprob: -3.309109926223755
    5. ' ' → logprob: -7.059109687805176
    6. ' tax' → logprob: -7.809109687805176
    7. ' ' → logprob: -7.809109687805176
    8. ' tar' → logprob: -8.059109687805176
    9. '   ' → logprob: -8.434109687805176
    10. ' tarifs' → logprob: -8.934109687805176

Token 162: ' taxi' (ID: 42795)
  Prédit: '_t'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_t' → logprob: -0.001589250285178423
    2. ' taxi' → logprob: -7.376589298248291
    3. '_' → logprob: -7.751589298248291
    4. ' _' → logprob: -8.751588821411133
    5. 'tax' → logprob: -9.126588821411133
    6. 't' → logprob: -9.251588821411133
    7. '_tax' → logprob: -9.501588821411133
    8. ' ' → logprob: -10.376588821411133
    9. '   ' → logprob: -10.376588821411133
    10. '  ' → logprob: -12.251588821411133

Token 163: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06028686463832855
    2. 'return' → logprob: -3.5602867603302
    3. '
' → logprob: -4.060286998748779
    4. ' return' → logprob: -4.435286998748779
    5. '    
' → logprob: -7.060286998748779
    6. '   
' → logprob: -11.060286521911621
    7. ' 
' → logprob: -11.185286521911621
    8. '  ' → logprob: -11.435286521911621
    9. '```' → logprob: -11.560286521911621
    10. '	return' → logprob: -11.810286521911621

Token 164: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0733877494931221
    2. '
' → logprob: -2.698387861251831
    3. '    
' → logprob: -6.323387622833252
    4. 'return' → logprob: -6.823387622833252
    5. ' return' → logprob: -7.573387622833252
    6. '
' → logprob: -11.19838809967041
    7. ' 
' → logprob: -11.44838809967041
    8. '  
' → logprob: -12.07338809967041
    9. '```' → logprob: -12.32338809967041
    10. '   
' → logprob: -12.82338809967041

Token 165: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.30994898080825806
    2. ' return' → logprob: -1.8099489212036133
    3. 'min' → logprob: -2.6849489212036133
    4. ' min' → logprob: -3.4349489212036133
    5. '   ' → logprob: -6.059948921203613
    6. 'max' → logprob: -11.059948921203613
    7. 'tar' → logprob: -11.309948921203613
    8. 'ret' → logprob: -12.059948921203613
    9. '    
' → logprob: -12.309948921203613
    10. ' retur' → logprob: -12.309948921203613

Token 166: ' min' (ID: 1349)
  Prédit: ' min'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.01604246348142624
    2. 'min' → logprob: -4.141042232513428
    3. ' tar' → logprob: -12.891042709350586
    4. 'tar' → logprob: -13.391042709350586
    5. ' tarif' → logprob: -13.391042709350586
    6. '	min' → logprob: -13.891042709350586
    7. ' minimum' → logprob: -14.516042709350586
    8. ' max' → logprob: -14.641042709350586
    9. ' ' → logprob: -14.766042709350586
    10. ' ' → logprob: -16.016042709350586

Token 167: '(t' (ID: 2025)
  Prédit: '(t'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(t' → logprob: -0.3133012652397156
    2. '(' → logprob: -1.3133013248443604
    3. '(tr' → logprob: -10.313301086425781
    4. ' (' → logprob: -13.438301086425781
    5. '(
' → logprob: -13.813301086425781
    6. 'tar' → logprob: -14.063301086425781
    7. '(a' → logprob: -14.438301086425781
    8. '(te' → logprob: -15.313301086425781
    9. '(

' → logprob: -15.313301086425781
    10. '(ts' → logprob: -15.438301086425781

Token 168: 'ar' (ID: 277)
  Prédit: 'ar'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ar' → logprob: -0.00046868418576195836
    2. 'arf' → logprob: -8.375468254089355
    3. 'tar' → logprob: -9.250468254089355
    4. 'arit' → logprob: -9.750468254089355
    5. 'a' → logprob: -11.125468254089355
    6. '   ' → logprob: -11.375468254089355
    7. 'arfi' → logprob: -11.500468254089355
    8. 'af' → logprob: -11.750468254089355
    9. 'ариф' → logprob: -12.250468254089355
    10. 'atif' → logprob: -12.375468254089355

Token 169: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0002346488763578236
    2. 'iff' → logprob: -9.375234603881836
    3. ' if' → logprob: -9.875234603881836
    4. '   ' → logprob: -10.500234603881836
    5. 'f' → logprob: -10.750234603881836
    6. 'i' → logprob: -10.875234603881836
    7. 'ifa' → logprob: -11.000234603881836
    8. ' ' → logprob: -12.875234603881836
    9. '_if' → logprob: -13.250234603881836
    10. '_' → logprob: -13.375234603881836

Token 170: '_un' (ID: 11119)
  Prédit: '_un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_un' → logprob: -0.00392451835796237
    2. '_' → logprob: -5.628924369812012
    3. '_t' → logprob: -8.128924369812012
    4. '_uni' → logprob: -10.878924369812012
    5. '_unit' → logprob: -13.128924369812012
    6. ' _' → logprob: -13.253924369812012
    7. '_UN' → logprob: -13.378924369812012
    8. '_u' → logprob: -13.878924369812012
    9. '_ut' → logprob: -14.128924369812012
    10. '_)' → logprob: -14.128924369812012

Token 171: 'itaire' (ID: 28335)
  Prédit: 'itaire'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'itaire' → logprob: -0.0010446012020111084
    2. 'ita' → logprob: -7.126044750213623
    3. 'taire' → logprob: -9.376044273376465
    4. 'it' → logprob: -9.876044273376465
    5. 'ite' → logprob: -10.501044273376465
    6. '   ' → logprob: -10.876044273376465
    7. 'aire' → logprob: -11.001044273376465
    8. 'i' → logprob: -11.376044273376465
    9. ' it' → logprob: -12.251044273376465
    10. 'iaire' → logprob: -12.501044273376465

Token 172: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00017982252757064998
    2. ' ,' → logprob: -8.6251802444458
    3. ',t' → logprob: -16.000179290771484
    4. 'tar' → logprob: -16.750179290771484
    5. ')' → logprob: -17.750179290771484
    6. ',
' → logprob: -17.875179290771484
    7. '_tar' → logprob: -19.125179290771484
    8. ',

' → logprob: -19.250179290771484
    9. '‌,' → logprob: -19.250179290771484
    10. ' tar' → logprob: -19.250179290771484

Token 173: ' tarif' (ID: 55221)
  Prédit: ' tarif'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tarif' → logprob: -0.012258391827344894
    2. 'tar' → logprob: -4.512258529663086
    3. ' tariff' → logprob: -7.012258529663086
    4. ' tarifs' → logprob: -8.762258529663086
    5. ' tar' → logprob: -9.512258529663086
    6. ' ' → logprob: -10.637258529663086
    7. ' ' → logprob: -10.762258529663086
    8. ' Tarif' → logprob: -11.262258529663086
    9. ' tarifa' → logprob: -11.637258529663086
    10. '_tar' → logprob: -12.512258529663086

Token 174: '_t' (ID: 838)
  Prédit: '_t'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_t' → logprob: -2.3199920178740285e-05
    2. '_' → logprob: -10.750022888183594
    3. '_tax' → logprob: -14.125022888183594
    4. 't' → logprob: -14.500022888183594
    5. ')_' → logprob: -15.750022888183594
    6. ')' → logprob: -16.500022888183594
    7. '_)' → logprob: -16.500022888183594
    8. ' _' → logprob: -17.000022888183594
    9. '_tar' → logprob: -17.500022888183594
    10. '_s' → logprob: -17.875022888183594

Token 175: 'axi' (ID: 45348)
  Prédit: 'axi'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'axi' → logprob: -0.0031218640506267548
    2. 'a' → logprob: -6.253121852874756
    3. 'ax' → logprob: -7.003121852874756
    4. 'axis' → logprob: -9.128122329711914
    5. 'xi' → logprob: -9.378122329711914
    6. 'axy' → logprob: -11.128122329711914
    7. 'i' → logprob: -11.503122329711914
    8. '_' → logprob: -11.753122329711914
    9. 'axe' → logprob: -12.003122329711914
    10. 'axa' → logprob: -12.003122329711914

Token 176: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -6.704273118884885e-07
    2. ')
' → logprob: -14.625000953674316
    3. ' )' → logprob: -16.125
    4. '))' → logprob: -19.375
    5. '}' → logprob: -19.5
    6. ')`' → logprob: -19.875
    7. '')' → logprob: -20.25
    8. ')}' → logprob: -20.875
    9. '）' → logprob: -21.0
    10. '()' → logprob: -21.625

Token 177: 'if' (ID: 366)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.4725795388221741
    2. '<|end|>' → logprob: -2.2225794792175293
    3. '```' → logprob: -2.4725794792175293
    4. '
' → logprob: -2.5975794792175293
    5. 'n' → logprob: -3.3475794792175293
    6. '#' → logprob: -3.4725794792175293
    7. 'newline' → logprob: -4.597579479217529
    8. '\' → logprob: -4.722579479217529
    9. '<|end|>' → logprob: -4.847579479217529
    10. '[' → logprob: -5.222579479217529

Token 178: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.001360474620014429
    2. ' ' → logprob: -7.1263604164123535
    3. '__' → logprob: -8.001360893249512
    4. ' _' → logprob: -9.001360893249512
    5. '_' → logprob: -10.001360893249512
    6. ' ' → logprob: -10.001360893249512
    7. ' ' → logprob: -13.251360893249512
    8. ' ‌' → logprob: -13.501360893249512
    9. ' ___' → logprob: -14.126360893249512
    10. ' True' → logprob: -14.251360893249512

Token 179: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.02923104166984558
    2. ' __' → logprob: -3.654231071472168
    3. '_' → logprob: -6.404231071472168
    4. ' ==' → logprob: -8.279231071472168
    5. 'if' → logprob: -8.279231071472168
    6. '<|end|>' → logprob: -8.279231071472168
    7. '___' → logprob: -9.529231071472168
    8. ' ' → logprob: -9.654231071472168
    9. '[' → logprob: -10.029231071472168
    10. ' if' → logprob: -10.029231071472168

Token 180: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -1.1875571544806007e-05
    2. '==' → logprob: -12.000011444091797
    3. ' ==' → logprob: -12.375011444091797
    4. 'name' → logprob: -14.875011444091797
    5. '__.__' → logprob: -15.125011444091797
    6. '=="' → logprob: -15.250011444091797
    7. ' __' → logprob: -15.875011444091797
    8. '_' → logprob: -16.250011444091797
    9. '___' → logprob: -16.500011444091797
    10. '__
' → logprob: -16.750011444091797

Token 181: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.002985428785905242
    2. ' ==' → logprob: -6.00298547744751
    3. '==' → logprob: -7.87798547744751
    4. '=="' → logprob: -9.502985000610352
    5. '_' → logprob: -10.002985000610352
    6. '___' → logprob: -12.502985000610352
    7. ' __' → logprob: -13.002985000610352
    8. '"' → logprob: -13.377985000610352
    9. ' =="' → logprob: -14.127985000610352
    10. '__.__' → logprob: -14.377985000610352

Token 182: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.03631928935647011
    2. ''' → logprob: -3.5363192558288574
    3. ' "__' → logprob: -5.036319255828857
    4. ' '__' → logprob: -10.161319732666016
    5. '__' → logprob: -12.661319732666016
    6. '"user' → logprob: -12.661319732666016
    7. ' "' → logprob: -13.411319732666016
    8. '"name' → logprob: -14.161319732666016
    9. '("__' → logprob: -15.161319732666016
    10. '"class' → logprob: -15.161319732666016

Token 183: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.00025311444187536836
    2. '__' → logprob: -8.375252723693848
    3. '"' → logprob: -11.375252723693848
    4. 'name' → logprob: -11.500252723693848
    5. '_main' → logprob: -14.500252723693848
    6. ' main' → logprob: -15.250252723693848
    7. ' "__' → logprob: -16.750253677368164
    8. '主' → logprob: -17.500253677368164
    9. '-main' → logprob: -18.125253677368164
    10. '"name' → logprob: -18.125253677368164

Token 184: '__":
' (ID: 49892)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.10022822767496109
    2. '__":
' → logprob: -2.3502283096313477
    3. '_' → logprob: -10.850228309631348
    4. '_"' → logprob: -13.600228309631348
    5. '__':
' → logprob: -14.475228309631348
    6. '"' → logprob: -15.975228309631348
    7. '__["' → logprob: -16.35022735595703
    8. '___' → logprob: -17.10022735595703
    9. '__",' → logprob: -17.10022735595703
    10. '__:' → logprob: -17.35022735595703

Token 185: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.33889204263687134
    2. ':
' → logprob: -2.3388919830322266
    3. '
' → logprob: -2.4638919830322266
    4. '<|end|>' → logprob: -3.0888919830322266
    5. '   ' → logprob: -3.4638919830322266
    6. ' 
' → logprob: -4.838891983032227
    7. '    
' → logprob: -4.963891983032227
    8. '  
' → logprob: -6.213891983032227
    9. '\' → logprob: -6.213891983032227
    10. 'n' → logprob: -6.338891983032227

Token 186: ' #' (ID: 1069)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.043546587228775024
    2. 'n' → logprob: -3.168546676635742
    3. ' import' → logprob: -7.668546676635742
    4. 'import' → logprob: -10.168546676635742
    5. '   ' → logprob: -10.668546676635742
    6. ' 
' → logprob: -12.793546676635742
    7. ' #' → logprob: -12.793546676635742
    8. ' ' → logprob: -12.918546676635742
    9. '	n' → logprob: -13.043546676635742
    10. '    
' → logprob: -13.918546676635742

Token 187: ' Lecture' (ID: 106534)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.283717542886734
    2. 'n' → logprob: -1.4087175130844116
    3. ' input' → logprob: -7.658717632293701
    4. ' test' → logprob: -7.783717632293701
    5. '#' → logprob: -8.033717155456543
    6. 'input' → logprob: -8.408717155456543
    7. 'test' → logprob: -9.033717155456543
    8. ' #' → logprob: -9.033717155456543
    9. ' Exemple' → logprob: -9.283717155456543
    10. '   ' → logprob: -9.533717155456543

Token 188: ' de' (ID: 334)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.3414173722267151
    2. '   ' → logprob: -1.4664173126220703
    3. ' des' → logprob: -3.7164173126220703
    4. '(' → logprob: -4.46641731262207
    5. ' ' → logprob: -4.71641731262207
    6. '_' → logprob: -5.34141731262207
    7. '    ' → logprob: -6.21641731262207
    8. ' ()' → logprob: -6.71641731262207
    9. ' n' → logprob: -7.09141731262207
    10. ' de' → logprob: -7.21641731262207

Token 189: ' l' (ID: 305)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.16315136849880219
    2. 'n' → logprob: -1.9131513833999634
    3. ' l' → logprob: -7.163151264190674
    4. ' ' → logprob: -7.288151264190674
    5. 'l' → logprob: -7.913151264190674
    6. ' la' → logprob: -8.038151741027832
    7. 'int' → logprob: -8.538151741027832
    8. '   ' → logprob: -8.663151741027832
    9. ' input' → logprob: -8.788151741027832
    10. 's' → logprob: -10.038151741027832

Token 190: ''entrée' (ID: 115820)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9342310428619385
    2. 'e' → logprob: -1.5592310428619385
    3. ''entrée' → logprob: -1.6842310428619385
    4. 'es' → logprob: -3.1842310428619385
    5. 'input' → logprob: -3.3092310428619385
    6. 'n' → logprob: -3.6842310428619385
    7. ''' → logprob: -3.6842310428619385
    8. ' n' → logprob: -3.9342310428619385
    9. ' '' → logprob: -5.059230804443359
    10. 'a' → logprob: -5.059230804443359

Token 191: ' utilisateur' (ID: 115595)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.42315030097961426
    2. '   ' → logprob: -2.1731503009796143
    3. 'n' → logprob: -2.2981503009796143
    4. ',' → logprob: -3.4231503009796143
    5. ' =' → logprob: -3.5481503009796143
    6. ' n' → logprob: -4.173150062561035
    7. 's' → logprob: -4.298150062561035
    8. '_' → logprob: -4.673150062561035
    9. '    
' → logprob: -4.673150062561035
    10. '_n' → logprob: -5.298150062561035

Token 192: ' et' (ID: 859)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.22532755136489868
    2. '   ' → logprob: -1.975327491760254
    3. ' n' → logprob: -2.975327491760254
    4. '    
' → logprob: -5.725327491760254
    5. '(n' → logprob: -5.975327491760254
    6. ':' → logprob: -6.475327491760254
    7. ',' → logprob: -6.850327491760254
    8. ' 
' → logprob: -7.350327491760254
    9. '
' → logprob: -7.725327491760254
    10. '   
' → logprob: -7.850327491760254

Token 193: ' conversion' (ID: 22165)
  Prédit: ' conversion'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' conversion' → logprob: -0.20434539020061493
    2. ' split' → logprob: -2.579345464706421
    3. ' traitement' → logprob: -4.079345226287842
    4. ' sa' → logprob: -4.579345226287842
    5. ' son' → logprob: -4.704345226287842
    6. 'split' → logprob: -4.829345226287842
    7. ' la' → logprob: -4.954345226287842
    8. ' appel' → logprob: -4.954345226287842
    9. ' calcul' → logprob: -5.079345226287842
    10. ' stockage' → logprob: -5.204345226287842

Token 194: ' en' (ID: 469)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.861840546131134
    2. '   ' → logprob: -1.2368404865264893
    3. ' des' → logprob: -1.3618404865264893
    4. ' en' → logprob: -4.861840724945068
    5. '(' → logprob: -5.111840724945068
    6. '(n' → logprob: -5.111840724945068
    7. 'des' → logprob: -5.736840724945068
    8. ' de' → logprob: -5.986840724945068
    9. 'n' → logprob: -6.236840724945068
    10. ' n' → logprob: -7.361840724945068

Token 195: ' ent' (ID: 1121)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.5608736276626587
    2. 'ent' → logprob: -1.3108736276626587
    3. ' int' → logprob: -2.435873508453369
    4. ' integers' → logprob: -3.560873508453369
    5. ' ent' → logprob: -4.060873508453369
    6. 'ints' → logprob: -4.185873508453369
    7. ' ' → logprob: -5.685873508453369
    8. ' entier' → logprob: -5.685873508453369
    9. 'n' → logprob: -6.685873508453369
    10. 'inte' → logprob: -7.060873508453369

Token 196: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.6526696085929871
    2. 'ier' → logprob: -0.7776696085929871
    3. 'ières' → logprob: -4.277669429779053
    4. 'rée' → logprob: -6.152669429779053
    5. 'i' → logprob: -6.527669429779053
    6. 'ière' → logprob: -7.027669429779053
    7. 'r' → logprob: -7.777669429779053
    8. 'ié' → logprob: -7.902669429779053
    9. 'er' → logprob: -8.152669906616211
    10. '   ' → logprob: -8.777669906616211

Token 197: ' :' (ID: 712)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3082302212715149
    2. 'n' → logprob: -1.5582301616668701
    3. '    
' → logprob: -3.55823016166687
    4. ' n' → logprob: -4.183230400085449
    5. '(n' → logprob: -5.433230400085449
    6. '   
' → logprob: -6.933230400085449
    7. '    ' → logprob: -6.933230400085449
    8. '     
' → logprob: -7.183230400085449
    9. ' 
' → logprob: -7.433230400085449
    10. 'input' → logprob: -7.433230400085449

Token 198: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.1603531837463379
    2. 'n' → logprob: -1.910353183746338
    3. '   ' → logprob: -10.28535270690918
    4. ' data' → logprob: -11.41035270690918
    5. ' inputs' → logprob: -11.53535270690918
    6. ' 
' → logprob: -11.91035270690918
    7. '```' → logprob: -11.91035270690918
    8. ' line' → logprob: -11.91035270690918
    9. ' input' → logprob: -12.03535270690918
    10. '    
' → logprob: -12.03535270690918

Token 199: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0005087109748274088
    2. ' ,' → logprob: -7.625508785247803
    3. ',a' → logprob: -11.250508308410645
    4. ' =' → logprob: -12.375508308410645
    5. ',n' → logprob: -13.875508308410645
    6. ',b' → logprob: -14.500508308410645
    7. 'a' → logprob: -14.500508308410645
    8. '=' → logprob: -15.000508308410645
    9. ',input' → logprob: -15.625508308410645
    10. ',user' → logprob: -15.750508308410645

Token 200: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.3485623300075531
    2. ' a' → logprob: -1.2235623598098755
    3. ' ' → logprob: -9.473562240600586
    4. ' ' → logprob: -11.848562240600586
    5. ',' → logprob: -11.973562240600586
    6. ',a' → logprob: -11.973562240600586
    7. '	a' → logprob: -12.098562240600586
    8. '_a' → logprob: -12.348562240600586
    9. '  ' → logprob: -12.848562240600586
    10. '_' → logprob: -13.786062240600586

Token 201: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0013682155404239893
    2. ' ,' → logprob: -6.751368045806885
    3. ',b' → logprob: -8.751368522644043
    4. ' =' → logprob: -11.126368522644043
    5. 'et' → logprob: -12.126368522644043
    6. 'b' → logprob: -12.376368522644043
    7. ' et' → logprob: -12.501368522644043
    8. '   ' → logprob: -12.751368522644043
    9. '=' → logprob: -13.001368522644043
    10. ' ' → logprob: -13.251368522644043

Token 202: ' et' (ID: 859)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.11304186284542084
    2. ' b' → logprob: -2.238041877746582
    3. 'et' → logprob: -9.488041877746582
    4. ' ' → logprob: -9.738041877746582
    5. ' and' → logprob: -9.863041877746582
    6. 'and' → logprob: -10.863041877746582
    7. ',' → logprob: -12.113041877746582
    8. ' et' → logprob: -13.113041877746582
    9. ' ,' → logprob: -13.863041877746582
    10. ' ' → logprob: -13.988041877746582

Token 203: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.22545142471790314
    2. ' b' → logprob: -1.6004514694213867
    3. ' ' → logprob: -10.225451469421387
    4. '  ' → logprob: -13.225451469421387
    5. '<|end|>' → logprob: -15.850451469421387
    6. ' ' → logprob: -15.975451469421387
    7. ',' → logprob: -16.10045051574707
    8. '   ' → logprob: -16.22545051574707
    9. '	b' → logprob: -16.72545051574707
    10. 'c' → logprob: -17.41295051574707

Token 204: '
' (ID: 198)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.22722038626670837
    2. '   ' → logprob: -1.7272204160690308
    3. '=' → logprob: -3.852220296859741
    4. ',' → logprob: -5.85222053527832
    5. ' =
' → logprob: -7.60222053527832
    6. '    
' → logprob: -8.35222053527832
    7. 'n' → logprob: -8.47722053527832
    8. '    ' → logprob: -9.47722053527832
    9. 'input' → logprob: -9.47722053527832
    10. '  ' → logprob: -10.47722053527832

Token 205: '   ' (ID: 271)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.445162832736969
    2. '   ' → logprob: -1.0701627731323242
    3. 'n' → logprob: -4.945162773132324
    4. '=' → logprob: -5.320162773132324
    5. '    
' → logprob: -6.195162773132324
    6. '
' → logprob: -7.570162773132324
    7. 'input' → logprob: -7.695162773132324
    8. ',' → logprob: -8.195162773132324
    9. ' n' → logprob: -8.195162773132324
    10. ' =
' → logprob: -9.070162773132324

Token 206: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.4759708046913147
    2. ' n' → logprob: -0.9759708046913147
    3. 'inputs' → logprob: -7.85097074508667
    4. '   ' → logprob: -8.225971221923828
    5. 'input' → logprob: -8.600971221923828
    6. 'user' → logprob: -8.600971221923828
    7. ' inputs' → logprob: -8.725971221923828
    8. ' user' → logprob: -8.725971221923828
    9. ' input' → logprob: -9.100971221923828
    10. 'values' → logprob: -9.350971221923828

Token 207: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.3425219549390022e-05
    2. ' ,' → logprob: -11.87501335144043
    3. ',a' → logprob: -12.25001335144043
    4. ' =' → logprob: -13.75001335144043
    5. '=' → logprob: -15.12501335144043
    6. 'a' → logprob: -16.75001335144043
    7. ',b' → logprob: -16.75001335144043
    8. ',n' → logprob: -16.75001335144043
    9. ',
' → logprob: -17.75001335144043
    10. ',input' → logprob: -17.75001335144043

Token 208: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.048755984753370285
    2. ' a' → logprob: -3.0487558841705322
    3. ' ' → logprob: -9.048755645751953
    4. '<|end|>' → logprob: -10.548755645751953
    5. '  ' → logprob: -10.798755645751953
    6. ' ' → logprob: -13.673755645751953
    7. '	a' → logprob: -13.798755645751953
    8. ',a' → logprob: -14.423755645751953
    9. '    ' → logprob: -14.673755645751953
    10. ' =' → logprob: -15.548755645751953

Token 209: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -8.85235276655294e-05
    2. ' ,' → logprob: -9.750088691711426
    3. ',b' → logprob: -10.500088691711426
    4. 'b' → logprob: -13.500088691711426
    5. ' =' → logprob: -14.375088691711426
    6. ' b' → logprob: -15.250088691711426
    7. '=' → logprob: -15.375088691711426
    8. '<|end|>' → logprob: -15.625088691711426
    9. ',a' → logprob: -18.37508773803711
    10. ' ' → logprob: -18.50008773803711

Token 210: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.16026495397090912
    2. 'b' → logprob: -1.9102649688720703
    3. ' ' → logprob: -10.16026496887207
    4. ' =' → logprob: -14.78526496887207
    5. '<|end|>' → logprob: -14.91026496887207
    6. ' ' → logprob: -15.28526496887207
    7. ',' → logprob: -15.41026496887207
    8. ',b' → logprob: -15.41026496887207
    9. '  ' → logprob: -15.66026496887207
    10. ' 
' → logprob: -15.91026496887207

Token 211: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2519367039203644
    2. '=' → logprob: -1.501936674118042
    3. ',' → logprob: -12.376936912536621
    4. ')' → logprob: -13.501936912536621
    5. '=input' → logprob: -13.751936912536621
    6. ' =
' → logprob: -15.501936912536621
    7. ' ' → logprob: -15.876936912536621
    8. '=int' → logprob: -16.126935958862305
    9. '<|end|>' → logprob: -16.251935958862305
    10. ')=' → logprob: -16.251935958862305

Token 212: ' map' (ID: 4014)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.3869129717350006
    2. ' map' → logprob: -1.1369129419326782
    3. '[' → logprob: -11.136913299560547
    4. '(map' → logprob: -11.261913299560547
    5. '	map' → logprob: -12.386913299560547
    6. ' ' → logprob: -12.636913299560547
    7. '   ' → logprob: -13.261913299560547
    8. ' ' → logprob: -13.386913299560547
    9. 'm' → logprob: -13.636913299560547
    10. 'input' → logprob: -14.136913299560547

Token 213: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0024515187833458185
    2. '(' → logprob: -6.127451419830322
    3. 'int' → logprob: -8.50245189666748
    4. '(input' → logprob: -9.75245189666748
    5. '(str' → logprob: -13.25245189666748
    6. '<int' → logprob: -13.87745189666748
    7. '(
' → logprob: -13.87745189666748
    8. '[int' → logprob: -14.00245189666748
    9. ' int' → logprob: -15.12745189666748
    10. 'input' → logprob: -15.25245189666748

Token 214: ',' (ID: 11)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.05276557430624962
    2. '(input' → logprob: -3.0527656078338623
    3. ',input' → logprob: -5.927765369415283
    4. ' input' → logprob: -7.052765369415283
    5. ')' → logprob: -7.677765369415283
    6. ',' → logprob: -9.052765846252441
    7. '(' → logprob: -10.427765846252441
    8. '   ' → logprob: -11.302765846252441
    9. '=input' → logprob: -11.552765846252441
    10. '	input' → logprob: -13.052765846252441

Token 215: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.008616461418569088
    2. ' input' → logprob: -4.7586164474487305
    3. '   ' → logprob: -13.63361644744873
    4. ')' → logprob: -15.00861644744873
    5. '(input' → logprob: -15.38361644744873
    6. ' ' → logprob: -15.75861644744873
    7. ',input' → logprob: -16.633617401123047
    8. '=input' → logprob: -17.508617401123047
    9. '	input' → logprob: -17.883617401123047
    10. '<input' → logprob: -18.133617401123047

Token 216: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0011765359668061137
    2. '()' → logprob: -6.751176357269287
    3. ')' → logprob: -13.251176834106445
    4. ' ().' → logprob: -13.376176834106445
    5. '())' → logprob: -13.876176834106445
    6. '(' → logprob: -14.626176834106445
    7. '("' → logprob: -14.876176834106445
    8. '()
' → logprob: -15.001176834106445
    9. '("").' → logprob: -15.251176834106445
    10. '(input' → logprob: -15.751176834106445

Token 217: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0004309076175559312
    2. 'strip' → logprob: -7.750431060791016
    3. ' split' → logprob: -16.125431060791016
    4. 'rstrip' → logprob: -17.250431060791016
    5. '(split' → logprob: -17.500431060791016
    6. 'spl' → logprob: -19.500431060791016
    7. 'read' → logprob: -19.625431060791016
    8. '.split' → logprob: -19.875431060791016
    9. '().' → logprob: -21.500431060791016
    10. ' strip' → logprob: -21.750431060791016

Token 218: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.007782408036291599
    2. '('' → logprob: -5.632782459259033
    3. '()))' → logprob: -5.882782459259033
    4. '()' → logprob: -6.757782459259033
    5. ')' → logprob: -9.007781982421875
    6. '(' → logprob: -10.132781982421875
    7. '("' → logprob: -10.632781982421875
    8. '(','' → logprob: -10.882781982421875
    9. '))' → logprob: -11.757781982421875
    10. '())
' → logprob: -12.382781982421875

Token 219: '    
' (ID: 1944)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.03205956891179085
    2. '
' → logprob: -3.657059669494629
    3. '    
' → logprob: -6.282059669494629
    4. '   ' → logprob: -6.282059669494629
    5. ')' → logprob: -7.157059669494629
    6. ' print' → logprob: -7.782059669494629
    7. '  
' → logprob: -8.282059669494629
    8. '(print' → logprob: -9.407059669494629
    9. '<|end|>' → logprob: -9.657059669494629
    10. '' → logprob: -9.657059669494629

Token 220: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -5.1928003813372925e-05
    2. '   ' → logprob: -10.000051498413086
    3. ' print' → logprob: -12.500051498413086
    4. 'result' → logprob: -13.000051498413086
    5. 'cost' → logprob: -15.375051498413086
    6. '```' → logprob: -16.125051498413086
    7. '    
' → logprob: -16.375051498413086
    8. 'pr' → logprob: -17.500051498413086
    9. '#' → logprob: -18.250051498413086
    10. '
' → logprob: -18.625051498413086

Token 221: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.006803710013628006
    2. 'cost' → logprob: -5.756803512573242
    3. 'result' → logprob: -5.756803512573242
    4. 'cout' → logprob: -8.256803512573242
    5. 'co' → logprob: -8.756803512573242
    6. '#' (adapté à ' #') → logprob: -11.256803512573242
    7. 'prix' → logprob: -11.381803512573242
    8. 'minimum' → logprob: -11.631803512573242
    9. ' print' → logprob: -12.256803512573242
    10. 'min' → logprob: -13.756803512573242

Token 222: ' Calcul' (ID: 57243)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.14824679493904114
    2. 'cost' → logprob: -2.1482467651367188
    3. 'result' → logprob: -4.148246765136719
    4. 'co' → logprob: -5.648246765136719
    5. 'cout' → logprob: -7.148246765136719
    6. ' print' → logprob: -7.648246765136719
    7. '#' → logprob: -8.398246765136719
    8. ' cost' → logprob: -9.148246765136719
    9. 'prix' → logprob: -9.273246765136719
    10. 'price' → logprob: -10.773246765136719

Token 223: ' et' (ID: 859)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.554775595664978
    2. '_cost' → logprob: -1.804775595664978
    3. 'result' → logprob: -1.929775595664978
    4. '_result' → logprob: -3.4297757148742676
    5. '_min' → logprob: -3.8047757148742676
    6. '<|end|>' → logprob: -3.8047757148742676
    7. 'cost' → logprob: -4.054775714874268
    8. '   ' → logprob: -4.929775714874268
    9. 'minimum' → logprob: -5.554775714874268
    10. ' =' → logprob: -6.179775714874268

Token 224: ' affich' (ID: 90179)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.3132724165916443
    2. ' print' → logprob: -1.313272476196289
    3. 'aff' → logprob: -12.438272476196289
    4. ' affich' → logprob: -13.188272476196289
    5. '_print' → logprob: -13.938272476196289
    6. 'im' → logprob: -14.313272476196289
    7. '   ' → logprob: -14.688272476196289
    8. '#' → logprob: -14.688272476196289
    9. ' imprim' → logprob: -15.063272476196289
    10. ' imprime' → logprob: -15.063272476196289

Token 225: 'age' (ID: 477)
  Prédit: 'age'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'age' → logprob: -0.0038145682774484158
    2. 'er' → logprob: -5.753814697265625
    3. 'print' → logprob: -7.628814697265625
    4. 'e' → logprob: -9.378814697265625
    5. '   ' → logprob: -9.753814697265625
    6. 'ge' → logprob: -12.503814697265625
    7. '(age' → logprob: -13.628814697265625
    8. '(print' → logprob: -14.503814697265625
    9. '(' → logprob: -14.503814697265625
    10. 'ation' → logprob: -15.128814697265625

Token 226: ' du' (ID: 1462)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.35069578886032104
    2. '(c' → logprob: -1.2256958484649658
    3. '(
' → logprob: -6.725695610046387
    4. 'calculate' → logprob: -8.225695610046387
    5. '()' → logprob: -8.600695610046387
    6. '   ' → logprob: -8.725695610046387
    7. '(print' → logprob: -8.975695610046387
    8. '(cal' → logprob: -9.600695610046387
    9. '(calc' → logprob: -9.600695610046387
    10. ' du' → logprob: -10.725695610046387

Token 227: ' coût' (ID: 73109)
  Prédit: 'calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'calculate' → logprob: -0.002036656951531768
    2. 'minimum' → logprob: -6.5020365715026855
    3. 'print' → logprob: -8.502037048339844
    4. 'result' → logprob: -8.502037048339844
    5. ' calculate' → logprob: -9.502037048339844
    6. 'calcul' → logprob: -10.627037048339844
    7. 'co' → logprob: -11.377037048339844
    8. 'cout' → logprob: -11.752037048339844
    9. 'min' → logprob: -12.127037048339844
    10. 'cost' → logprob: -13.002037048339844

Token 228: ' minimal' (ID: 19957)
  Prédit: ' minimum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' minimum' → logprob: -0.8487513065338135
    2. 'minimum' → logprob: -1.0987513065338135
    3. '_min' → logprob: -1.7237513065338135
    4. 'min' → logprob: -3.7237513065338135
    5. ' minimal' → logprob: -3.9737513065338135
    6. '_' → logprob: -4.473751068115234
    7. 'minimal' → logprob: -5.223751068115234
    8. ' minimale' → logprob: -8.473751068115234
    9. '_m' → logprob: -9.098751068115234
    10. '(min' → logprob: -9.098751068115234

Token 229: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0025685220025479794
    2. '(print' → logprob: -6.62756872177124
    3. '(' → logprob: -7.00256872177124
    4. ' print' → logprob: -8.627568244934082
    5. '   ' → logprob: -9.502568244934082
    6. '(
' → logprob: -10.877568244934082
    7. 'calculate' → logprob: -11.377568244934082
    8. 'cout' → logprob: -11.752568244934082
    9. 'cost' → logprob: -11.877568244934082
    10. '()' → logprob: -12.002568244934082

Token 230: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -6.933173426659778e-05
    2. ' print' → logprob: -9.625069618225098
    3. 'cost' → logprob: -13.250069618225098
    4. '   ' → logprob: -14.375069618225098
    5. '```' → logprob: -15.250069618225098
    6. 'cout' → logprob: -15.250069618225098
    7. 'result' → logprob: -15.375069618225098
    8. 'prix' → logprob: -17.62506866455078
    9. '
' → logprob: -18.00006866455078
    10. 'price' → logprob: -18.12506866455078

Token 231: ' resultat' (ID: 67404)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -4.620622712536715e-05
    2. ' print' → logprob: -10.000045776367188
    3. 'cost' → logprob: -14.875045776367188
    4. 'result' → logprob: -15.500045776367188
    5. 'cout' → logprob: -15.875045776367188
    6. '```' → logprob: -18.125045776367188
    7. 'minimum' → logprob: -20.125045776367188
    8. '   ' → logprob: -20.125045776367188
    9. 'prix' → logprob: -20.375045776367188
    10. 'min' → logprob: -20.625045776367188

Token 232: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.22561763226985931
    2. '=' → logprob: -1.6006176471710205
    3. '_' → logprob: -9.100617408752441
    4. ')' → logprob: -9.350617408752441
    5. '_cost' → logprob: -13.225617408752441
    6. ' ' → logprob: -13.725617408752441
    7. '   ' → logprob: -14.350617408752441
    8. ' =
' → logprob: -14.475617408752441
    9. ' ' → logprob: -14.975617408752441
    10. '  ' → logprob: -15.225617408752441

Token 233: ' calculate' (ID: 17950)
  Prédit: 'calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'calculate' → logprob: -0.02324547804892063
    2. ' calculate' → logprob: -3.7732455730438232
    3. '.calculate' → logprob: -17.523244857788086
    4. 'calcul' → logprob: -18.773244857788086
    5. 'alculate' → logprob: -19.273244857788086
    6. 'compute' → logprob: -19.898244857788086
    7. 'cal' → logprob: -19.898244857788086
    8. 'calc' → logprob: -20.023244857788086
    9. 'Calculate' → logprob: -20.773244857788086
    10. ' calcular' → logprob: -21.023244857788086

Token 234: '_min' (ID: 15950)
  Prédit: '_min'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_min' → logprob: -1.8624639324116288e-06
    2. '_' → logprob: -13.375001907348633
    3. 'minimum' → logprob: -15.750001907348633
    4. '_m' → logprob: -16.500001907348633
    5. 'min' → logprob: -18.375001907348633
    6. '_max' → logprob: -18.500001907348633
    7. '_MIN' → logprob: -18.750001907348633
    8. ' minimum' → logprob: -18.750001907348633
    9. 'Minimum' → logprob: -19.500001907348633
    10. '_Min' → logprob: -19.750001907348633

Token 235: 'imum' (ID: 4556)
  Prédit: 'imum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'imum' → logprob: -0.3876652419567108
    2. 'um' → logprob: -1.1376652717590332
    3. 'ium' → logprob: -7.387665271759033
    4. 'minimum' → logprob: -10.262664794921875
    5. '_' → logprob: -10.762664794921875
    6. 'mum' → logprob: -10.762664794921875
    7. '__' → logprob: -10.887664794921875
    8. 'im' → logprob: -11.137664794921875
    9. '```' → logprob: -11.637664794921875
    10. 'ume' → logprob: -12.137664794921875

Token 236: '_cost' (ID: 36820)
  Prédit: '_cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cost' → logprob: -1.7432603272027336e-06
    2. '_co' → logprob: -14.000001907348633
    3. '_' → logprob: -14.250001907348633
    4. 'cost' → logprob: -15.875001907348633
    5. '_min' → logprob: -17.375001907348633
    6. '_c' → logprob: -17.375001907348633
    7. '_COST' → logprob: -17.750001907348633
    8. ' _' → logprob: -18.250001907348633
    9. '_code' → logprob: -18.375001907348633
    10. '```' → logprob: -18.625001907348633

Token 237: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.006746869999915361
    2. '(' → logprob: -5.006746768951416
    3. '(
' → logprob: -11.006747245788574
    4. ' (' → logprob: -11.131747245788574
    5. '(

' → logprob: -16.006746292114258
    6. '```' → logprob: -16.756746292114258
    7. ' ' → logprob: -17.381746292114258
    8. '(
' → logprob: -17.756746292114258
    9. ')' → logprob: -17.881746292114258
    10. '((' → logprob: -18.381746292114258

Token 238: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -6.420598219847307e-05
    2. ',a' → logprob: -10.2500638961792
    3. ' ,' → logprob: -10.5000638961792
    4. 'a' → logprob: -13.7500638961792
    5. ',
' → logprob: -16.750064849853516
    6. ',b' → logprob: -17.000064849853516
    7. '   ' → logprob: -17.125064849853516
    8. ',n' → logprob: -17.750064849853516
    9. ')' → logprob: -18.000064849853516
    10. '```' → logprob: -18.500064849853516

Token 239: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.0024756586644798517
    2. ' a' → logprob: -6.002475738525391
    3. '	a' → logprob: -18.25247573852539
    4. ')a' → logprob: -20.00247573852539
    5. '_a' → logprob: -21.25247573852539
    6. ',a' → logprob: -21.25247573852539
    7. '   ' → logprob: -21.37747573852539
    8. '"a' → logprob: -21.62747573852539
    9. ' ' → logprob: -21.75247573852539
    10. 'а' → logprob: -22.75247573852539

Token 240: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0011200957233086228
    2. ',b' → logprob: -6.876120090484619
    3. ' ,' → logprob: -9.376120567321777
    4. 'b' → logprob: -13.126120567321777
    5. ',
' → logprob: -15.001120567321777
    6. ' b' → logprob: -16.37611961364746
    7. ')' → logprob: -16.75111961364746
    8. '```' → logprob: -17.87611961364746
    9. ',

' → logprob: -18.00111961364746
    10. '   ' → logprob: -18.12611961364746

Token 241: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.02324547804892063
    2. ' b' → logprob: -3.7732455730438232
    3. ' ' → logprob: -19.273244857788086
    4. '	b' → logprob: -19.273244857788086
    5. ')b' → logprob: -20.023244857788086
    6. ' ' → logprob: -21.273244857788086
    7. '<|end|>' → logprob: -21.773244857788086
    8. ')' → logprob: -22.648244857788086
    9. '   ' → logprob: -22.648244857788086
    10. '_b' → logprob: -23.273244857788086

Token 242: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.01105206273496151
    2. ')
' → logprob: -4.511052131652832
    3. ')
' → logprob: -12.636052131652832
    4. ')

' → logprob: -14.136052131652832
    5. ' )' → logprob: -16.261051177978516
    6. '   ' → logprob: -17.511051177978516
    7. ')`' → logprob: -17.886051177978516
    8. ' )
' → logprob: -18.261051177978516
    9. '),' → logprob: -18.761051177978516
    10. '))' → logprob: -19.261051177978516

Token 243: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.003253170056268573
    2. '
' → logprob: -5.753252983093262
    3. ' print' → logprob: -9.628252983093262
    4. '   ' → logprob: -12.003252983093262
    5. '
' → logprob: -13.253252983093262
    6. '    
' → logprob: -14.378252983093262
    7. '```' → logprob: -14.753252983093262
    8. '(print' → logprob: -15.253252983093262
    9. '.print' → logprob: -16.253253936767578
    10. ' 
' → logprob: -16.378253936767578

Token 244: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -1.5048530030981055e-06
    2. ' print' → logprob: -13.500001907348633
    3. '   ' → logprob: -20.375001907348633
    4. '
' → logprob: -22.625001907348633
    5. '```' → logprob: -23.375001907348633
    6. 'prin' → logprob: -24.000001907348633
    7. '.print' → logprob: -24.125001907348633
    8. '    
' → logprob: -24.500001907348633
    9. 'pr' → logprob: -24.500001907348633
    10. 'Print' → logprob: -24.875001907348633

Token 245: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.0007141007808968425
    2. '(' → logprob: -7.250714302062988
    3. '(resultado' → logprob: -13.250714302062988
    4. '(res' → logprob: -13.375714302062988
    5. '()' → logprob: -15.250714302062988
    6. '(results' → logprob: -15.625714302062988
    7. 'result' → logprob: -16.250713348388672
    8. ' (' → logprob: -17.000713348388672
    9. '(rest' → logprob: -17.250713348388672
    10. '(f' → logprob: -17.250713348388672

Token 246: 'at' (ID: 266)
  Prédit: '(result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.07869522273540497
    2. ')' → logprob: -3.078695297241211
    3. 'result' → logprob: -4.328695297241211
    4. 'at' → logprob: -4.328695297241211
    5. 't' → logprob: -7.328695297241211
    6. '(' → logprob: -7.328695297241211
    7. 'ation' → logprob: -7.828695297241211
    8. ',result' → logprob: -7.828695297241211
    9. 'a' → logprob: -8.078695297241211
    10. 'e' → logprob: -8.578695297241211

Token 247: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. ' )' → logprob: -15.5
    3. '))' → logprob: -18.375
    4. '()' → logprob: -18.5
    5. '())' → logprob: -18.5
    6. ')`' → logprob: -18.75
    7. ')
' → logprob: -19.5
    8. '')' → logprob: -20.125
    9. '`)' → logprob: -20.75
    10. '")' → logprob: -21.0


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 245
Tokens correctement prédits (1ère position, stricte): 91
Tokens correctement prédits (1ère position, avec adaptation): 97
Tokens correctement prédits (top 10): 183
Précision stricte (1ère position): 37.14%
Précision adaptée (1ère position): 39.59%
Précision (top 10): 74.69%
================================================================================
