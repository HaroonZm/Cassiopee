================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:24:45
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n_r = input().split()
n = int(n_r[0])
r = int(n_r[1])

if n >= 10:
    print(r)
else:
    result = r + 100 * (10 - n)
    print(result)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: '_r' (ID: 3442)
  → Token d'amorce (pas de prédiction)

Token 2: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 3: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.06771013885736465
    2. '0' → logprob: -3.3177101612091064
    3. '1' → logprob: -4.567709922790527
    4. '10' → logprob: -4.567709922790527
    5. '5' → logprob: -5.192709922790527
    6. '32' → logprob: -7.692709922790527
    7. ' np' → logprob: -7.692709922790527
    8. ' int' → logprob: -7.942709922790527
    9. '20' → logprob: -8.067709922790527
    10. 'int' → logprob: -8.567709922790527

Token 4: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0577211007475853
    2. ''' → logprob: -3.1827211380004883
    3. '"' → logprob: -4.432721138000488
    4. '('' → logprob: -6.682721138000488
    5. '_' → logprob: -7.307721138000488
    6. '[' → logprob: -8.307721138000488
    7. '(
' → logprob: -8.682721138000488
    8. '("("' → logprob: -9.432721138000488
    9. '`' → logprob: -9.682721138000488
    10. '```' → logprob: -10.307721138000488

Token 5: 'split' (ID: 13627)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.5932877063751221
    2. '+' → logprob: -1.218287706375122
    3. '.strip' → logprob: -2.843287706375122
    4. '*' → logprob: -3.968287706375122
    5. '_' → logprob: -3.968287706375122
    6. '\n' → logprob: -4.468287467956543
    7. ')' → logprob: -4.968287467956543
    8. ' ' → logprob: -5.218287467956543
    9. '.split' → logprob: -5.468287467956543
    10. '**' → logprob: -5.593287467956543

Token 6: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0006540587637573481
    2. '`' → logprob: -8.625654220581055
    3. '('' → logprob: -8.625654220581055
    4. '("("' → logprob: -9.250654220581055
    5. '()' → logprob: -10.000654220581055
    6. '(
' → logprob: -10.250654220581055
    7. '"' → logprob: -10.625654220581055
    8. '((' → logprob: -10.875654220581055
    9. '```' → logprob: -11.000654220581055
    10. '(

' → logprob: -11.125654220581055

Token 7: 'n' (ID: 77)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.015489415265619755
    2. '=' → logprob: -5.26548957824707
    3. '[n' → logprob: -5.76548957824707
    4. ' =' → logprob: -6.51548957824707
    5. '.' → logprob: -6.64048957824707
    6. '[int' → logprob: -6.89048957824707
    7. '\[' → logprob: -7.51548957824707
    8. '[m' → logprob: -7.76548957824707
    9. 'n' → logprob: -8.01548957824707
    10. '_' → logprob: -8.26548957824707

Token 8: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.14819438755512238
    2. '_r' → logprob: -2.0231943130493164
    3. '[' → logprob: -5.273194313049316
    4. '[_' → logprob: -8.898194313049316
    5. '_[' → logprob: -9.398194313049316
    6. 'r' → logprob: -9.898194313049316
    7. '_n' → logprob: -10.648194313049316
    8. '_s' → logprob: -11.273194313049316
    9. '[]' → logprob: -11.398194313049316
    10. '```' → logprob: -12.023194313049316

Token 9: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0236588716506958
    2. ' int' → logprob: -3.7736587524414062
    3. 'len' → logprob: -8.148658752441406
    4. '[int' → logprob: -9.773658752441406
    5. 'n' → logprob: -10.773658752441406
    6. ' n' → logprob: -11.023658752441406
    7. 'list' → logprob: -11.523658752441406
    8. ' len' → logprob: -11.898658752441406
    9. 'map' → logprob: -12.023658752441406
    10. '(int' → logprob: -13.773658752441406

Token 10: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.062057312577962875
    2. '(n' → logprob: -2.8120572566986084
    3. '('' → logprob: -10.062057495117188
    4. '("("' → logprob: -10.937057495117188
    5. 'n' → logprob: -11.687057495117188
    6. '(_)' → logprob: -12.312057495117188
    7. '(_' → logprob: -12.812057495117188
    8. '(
' → logprob: -13.187057495117188
    9. '("' → logprob: -13.437057495117188
    10. '('_' → logprob: -13.562057495117188

Token 11: '_r' (ID: 3442)
  Prédit: '_r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_r' → logprob: -0.14304965734481812
    2. '[' → logprob: -2.018049716949463
    3. ')' → logprob: -9.268049240112305
    4. ')_' → logprob: -9.643049240112305
    5. '[_' → logprob: -9.643049240112305
    6. '_[' → logprob: -10.268049240112305
    7. '_' → logprob: -10.268049240112305
    8. '_n' → logprob: -10.518049240112305
    9. '_)' → logprob: -10.893049240112305
    10. '_s' → logprob: -12.018049240112305

Token 12: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -3.8889261304575484e-06
    2. ')' → logprob: -13.000003814697266
    3. '[n' → logprob: -14.250003814697266
    4. '[
' → logprob: -14.625003814697266
    5. ' [' → logprob: -16.125003814697266
    6. '```' → logprob: -16.250003814697266
    7. '\[' → logprob: -16.500003814697266
    8. '['' → logprob: -17.000003814697266
    9. ')[' → logprob: -18.500003814697266
    10. '(' → logprob: -18.625003814697266

Token 13: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.4259644558478612e-05
    2. '1' → logprob: -11.375014305114746
    3. ' ' → logprob: -12.875014305114746
    4. ')' → logprob: -16.37501335144043
    5. '])' → logprob: -18.00001335144043
    6. ']' → logprob: -18.50001335144043
    7. ''' → logprob: -18.50001335144043
    8. '```' → logprob: -19.37501335144043
    9. '   ' → logprob: -19.50001335144043
    10. '-' → logprob: -19.56251335144043

Token 14: '])
' (ID: 5169)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.007693694904446602
    2. ')' → logprob: -5.132693767547607
    3. ']' → logprob: -6.382693767547607
    4. '])
' → logprob: -10.25769329071045
    5. ')]' → logprob: -11.38269329071045
    6. ''])' → logprob: -12.00769329071045
    7. ' ])' → logprob: -12.00769329071045
    8. ')])' → logprob: -12.75769329071045
    9. '],' → logprob: -13.00769329071045
    10. ']);' → logprob: -13.38269329071045

Token 15: 'r' (ID: 81)
  Prédit: 'r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.001315712695941329
    2. ' r' → logprob: -7.126315593719482
    3. '_r' → logprob: -8.25131607055664
    4. '_' → logprob: -9.00131607055664
    5. ')' → logprob: -9.62631607055664
    6. '=' → logprob: -10.50131607055664
    7. ',' → logprob: -11.75131607055664
    8. ' ' → logprob: -11.87631607055664
    9. 'm' → logprob: -12.37631607055664
    10. ' =' → logprob: -12.75131607055664

Token 16: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -1.3812037706375122
    2. '=' → logprob: -1.5062037706375122
    3. '[' → logprob: -1.7562037706375122
    4. ')' → logprob: -2.1312036514282227
    5. ' =' → logprob: -2.1312036514282227
    6. '<|end|>' → logprob: -2.3812036514282227
    7. ' ' → logprob: -5.256203651428223
    8. '_space' → logprob: -5.381203651428223
    9. '.' → logprob: -5.881203651428223
    10. '[]' → logprob: -6.131203651428223

Token 17: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.12692947685718536
    2. ' int' → logprob: -2.126929521560669
    3. ' n' → logprob: -14.12692928314209
    4. ' ' → logprob: -15.00192928314209
    5. 'n' → logprob: -15.75192928314209
    6. '=int' → logprob: -16.376930236816406
    7. '(int' → logprob: -16.751930236816406
    8. '  ' → logprob: -17.876930236816406
    9. '	int' → logprob: -17.876930236816406
    10. '<int' → logprob: -18.001930236816406

Token 18: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2040819376707077
    2. '(n' → logprob: -1.7040818929672241
    3. '(r' → logprob: -5.954082012176514
    4. ' (' → logprob: -10.954081535339355
    5. '("("' → logprob: -11.454081535339355
    6. '((' → logprob: -11.829081535339355
    7. '(s' → logprob: -12.329081535339355
    8. '()' → logprob: -12.829081535339355
    9. '(

' → logprob: -12.829081535339355
    10. '('' → logprob: -13.079081535339355

Token 19: '_r' (ID: 3442)
  Prédit: '_r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_r' → logprob: -0.0005623269826173782
    2. '[' → logprob: -7.7505621910095215
    3. '[_' → logprob: -9.50056266784668
    4. '-' → logprob: -10.75056266784668
    5. '_s' → logprob: -12.12556266784668
    6. '_' → logprob: -12.12556266784668
    7. 'r' → logprob: -12.37556266784668
    8. ')' → logprob: -12.50056266784668
    9. '```' → logprob: -12.62556266784668
    10. '_R' → logprob: -13.00056266784668

Token 20: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -4.60414821645827e-06
    2. '1' → logprob: -13.500004768371582
    3. '```' → logprob: -13.875004768371582
    4. ')' → logprob: -14.125004768371582
    5. ' [' → logprob: -14.125004768371582
    6. '[
' → logprob: -15.750004768371582
    7. ')[' → logprob: -16.250003814697266
    8. '])' → logprob: -16.375003814697266
    9. '][' → logprob: -16.625003814697266
    10. ']' → logprob: -16.750003814697266

Token 21: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.3902033970225602e-05
    2. '])' → logprob: -11.625014305114746
    3. '0' → logprob: -12.375014305114746
    4. ' ' → logprob: -15.000014305114746
    5. ')' → logprob: -15.750014305114746
    6. ']' → logprob: -16.37501335144043
    7. '```' → logprob: -16.37501335144043
    8. ')]' → logprob: -18.12501335144043
    9. '+' → logprob: -18.25001335144043
    10. '2' → logprob: -18.37501335144043

Token 22: '])

' (ID: 21045)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -3.173704271830502e-06
    2. '')' → logprob: -13.75000286102295
    3. '`)' → logprob: -13.75000286102295
    4. ']' → logprob: -15.12500286102295
    5. '）' → logprob: -15.50000286102295
    6. ' )' → logprob: -15.87500286102295
    7. '))' → logprob: -16.250003814697266
    8. '])' → logprob: -16.750003814697266
    9. '")' → logprob: -16.875003814697266
    10. '()' → logprob: -17.000003814697266

Token 23: 'if' (ID: 366)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -1.478631615638733
    2. 'n' → logprob: -1.728631615638733
    3. '_' → logprob: -2.2286314964294434
    4. '#' → logprob: -2.6036314964294434
    5. '=' → logprob: -2.7286314964294434
    6. 'c' → logprob: -3.1036314964294434
    7. 'a' → logprob: -3.1036314964294434
    8. 'f' → logprob: -3.1036314964294434
    9. 'p' → logprob: -3.8536314964294434
    10. 'result' → logprob: -3.8536314964294434

Token 24: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.8669854402542114
    2. ' r' → logprob: -0.8669854402542114
    3. ' ' → logprob: -2.616985321044922
    4. 'n' → logprob: -2.991985321044922
    5. 'r' → logprob: -3.366985321044922
    6. ' ' → logprob: -6.866985321044922
    7. ''' → logprob: -8.241985321044922
    8. '(' → logprob: -9.241985321044922
    9. ' (' → logprob: -9.366985321044922
    10. '"' → logprob: -9.741985321044922

Token 25: ' >=' (ID: 5064)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.2262607216835022
    2. ' >=' → logprob: -1.9762606620788574
    3. '>' → logprob: -3.2262606620788574
    4. ' <=' → logprob: -4.851260662078857
    5. ' ' → logprob: -5.351260662078857
    6. ' ==' → logprob: -5.476260662078857
    7. ' <' → logprob: -5.726260662078857
    8. '>=' → logprob: -5.851260662078857
    9. '%' → logprob: -8.226261138916016
    10. '<' → logprob: -8.476261138916016

Token 26: ' ' (ID: 220)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.18092526495456696
    2. ' r' → logprob: -1.8059252500534058
    3. '10' → logprob: -7.805925369262695
    4. '1' → logprob: -8.430925369262695
    5. ' ' → logprob: -8.555925369262695
    6. '0' → logprob: -8.555925369262695
    7. '5' → logprob: -9.930925369262695
    8. '20' → logprob: -10.680925369262695
    9. '2' → logprob: -10.805925369262695
    10. '100' → logprob: -11.055925369262695

Token 27: '10' (ID: 702)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.0009881501318886876
    2. ' r' → logprob: -7.375988006591797
    3. '0' → logprob: -8.875988006591797
    4. '1' → logprob: -9.000988006591797
    5. '10' → logprob: -9.875988006591797
    6. '2' → logprob: -11.500988006591797
    7. '5' → logprob: -11.875988006591797
    8. '100' → logprob: -11.875988006591797
    9. '20' → logprob: -12.625988006591797
    10. ' ' → logprob: -13.125988006591797

Token 28: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.01448372658342123
    2. ' and' → logprob: -4.51448392868042
    3. ' :' → logprob: -6.01448392868042
    4. 'and' → logprob: -7.13948392868042
    5. '>' → logprob: -9.514483451843262
    6. ' ' → logprob: -10.889483451843262
    7. '+:' → logprob: -11.139483451843262
    8. ':**' → logprob: -11.139483451843262
    9. '+' → logprob: -11.389483451843262
    10. ' or' → logprob: -11.514483451843262

Token 29: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09046471863985062
    2. ' ' → logprob: -3.7154648303985596
    3. ':' → logprob: -3.9654648303985596
    4. ' print' → logprob: -4.3404645919799805
    5. '\n' → logprob: -4.9654645919799805
    6. 'print' → logprob: -5.3404645919799805
    7. ' n' → logprob: -5.5904645919799805
    8. ' 
' → logprob: -5.8404645919799805
    9. '\' → logprob: -6.2154645919799805
    10. '    ' → logprob: -6.3404645919799805

Token 30: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.012765913270413876
    2. 'print' (adapté à ' print') → logprob: -5.137765884399414
    3. ' n' → logprob: -5.762765884399414
    4. ' r' → logprob: -5.887765884399414
    5. ' pass' → logprob: -8.387765884399414
    6. 'r' → logprob: -8.762765884399414
    7. ' ' → logprob: -8.762765884399414
    8. '   ' → logprob: -9.012765884399414
    9. ' p' → logprob: -9.637765884399414
    10. '    ' → logprob: -9.762765884399414

Token 31: '(r' (ID: 4729)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1254388391971588
    2. '("' → logprob: -2.250438928604126
    3. '('' → logprob: -5.250438690185547
    4. '(n' → logprob: -5.375438690185547
    5. '("("' → logprob: -6.625438690185547
    6. '(True' → logprob: -7.125438690185547
    7. '()' → logprob: -8.875438690185547
    8. '(False' → logprob: -9.125438690185547
    9. '"' → logprob: -9.500438690185547
    10. ' (' → logprob: -10.000438690185547

Token 32: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0005089493934065104
    2. '*' → logprob: -8.375509262084961
    3. '+' → logprob: -9.250509262084961
    4. ' )' → logprob: -9.625509262084961
    5. '**' → logprob: -10.625509262084961
    6. '-' → logprob: -10.625509262084961
    7. '))' → logprob: -11.250509262084961
    8. ',' → logprob: -11.625509262084961
    9. '')' → logprob: -11.625509262084961
    10. '>' → logprob: -11.875509262084961

Token 33: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.04514876753091812
    2. 'elif' → logprob: -3.9201488494873047
    3. ' else' → logprob: -4.170148849487305
    4. ')' → logprob: -5.795148849487305
    5. '<|end|>' → logprob: -6.170148849487305
    6. ':' → logprob: -6.670148849487305
    7. '*' → logprob: -7.170148849487305
    8. '```' → logprob: -8.045148849487305
    9. ' elif' → logprob: -8.795148849487305
    10. 'n' → logprob: -8.920148849487305

Token 34: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -7.874882430769503e-05
    2. ':
' → logprob: -10.125079154968262
    3. '   ' → logprob: -10.875079154968262
    4. ' :' → logprob: -10.875079154968262
    5. '    ' → logprob: -15.750079154968262
    6. '.' → logprob: -16.500078201293945
    7. ',' → logprob: -16.875078201293945
    8. '{' → logprob: -17.000078201293945
    9. '  ' → logprob: -17.125078201293945
    10. ' :
' → logprob: -17.250078201293945

Token 35: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.4625813961029053
    2. 'r' → logprob: -1.8375813961029053
    3. 'n' → logprob: -2.8375813961029053
    4. ' n' → logprob: -3.2125813961029053
    5. ' print' → logprob: -3.3375813961029053
    6. ' r' → logprob: -3.3375813961029053
    7. '0' → logprob: -4.212581634521484
    8. '   ' → logprob: -4.712581634521484
    9. '10' → logprob: -4.837581634521484
    10. ' ' → logprob: -5.212581634521484

Token 36: ' result' (ID: 1534)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.04702044650912285
    2. 'r' → logprob: -3.297020435333252
    3. ' print' → logprob: -5.422020435333252
    4. 'n' → logprob: -6.422020435333252
    5. '10' → logprob: -6.922020435333252
    6. '0' → logprob: -7.047020435333252
    7. ' r' → logprob: -7.672020435333252
    8. ' n' → logprob: -9.29702091217041
    9. '   ' → logprob: -9.54702091217041
    10. ' ' → logprob: -9.67202091217041

Token 37: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.1711876392364502
    2. ' =' → logprob: -1.9211876392364502
    3. '_' → logprob: -5.921187400817871
    4. '(' → logprob: -6.171187400817871
    5. '*' → logprob: -6.796187400817871
    6. ' +=' → logprob: -6.921187400817871
    7. '+' → logprob: -7.046187400817871
    8. ')' → logprob: -7.046187400817871
    9. ' ' → logprob: -7.296187400817871
    10. '+=' → logprob: -7.546187400817871

Token 38: ' r' (ID: 428)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.7330849766731262
    2. ' r' → logprob: -0.9830849766731262
    3. ' n' → logprob: -2.4830849170684814
    4. 'n' → logprob: -3.6080849170684814
    5. '0' → logprob: -4.1080851554870605
    6. ' ' → logprob: -4.6080851554870605
    7. '1' → logprob: -6.2330851554870605
    8. '10' → logprob: -6.8580851554870605
    9. 'pow' → logprob: -7.1080851554870605
    10. ' (' → logprob: -7.4830851554870605

Token 39: ' +' (ID: 659)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '-' → logprob: -0.7392730116844177
    2. '*' → logprob: -0.9892730116844177
    3. '+' → logprob: -3.2392730712890625
    4. '%' → logprob: -3.3642730712890625
    5. ' *' → logprob: -3.4892730712890625
    6. ' -' → logprob: -3.9892730712890625
    7. '//' → logprob: -4.6142730712890625
    8. ' //' → logprob: -4.9892730712890625
    9. '**' → logprob: -6.2392730712890625
    10. ' %' → logprob: -6.3642730712890625

Token 40: ' ' (ID: 220)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -1.2972735166549683
    2. '1' → logprob: -1.4222735166549683
    3. 'n' → logprob: -2.047273635864258
    4. 'r' → logprob: -2.422273635864258
    5. ' n' → logprob: -2.797273635864258
    6. ' ' → logprob: -2.922273635864258
    7. '5' → logprob: -3.172273635864258
    8. '(n' → logprob: -3.422273635864258
    9. '100' → logprob: -3.922273635864258
    10. ' r' → logprob: -4.297273635864258

Token 41: '100' (ID: 1353)
  Prédit: '100'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '100' → logprob: -0.29656967520713806
    2. '10' → logprob: -2.421569585800171
    3. '(n' → logprob: -3.046569585800171
    4. '1' → logprob: -3.671569585800171
    5. 'r' → logprob: -3.671569585800171
    6. '190' → logprob: -4.17156982421875
    7. 'n' → logprob: -4.29656982421875
    8. '(' → logprob: -4.67156982421875
    9. '5' → logprob: -5.04656982421875
    10. '55' → logprob: -5.29656982421875

Token 42: ' *' (ID: 425)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 43: ' (' (ID: 350)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.10832644253969193
    2. '(' → logprob: -2.8583264350891113
    3. '(n' → logprob: -3.1083264350891113
    4. ' n' → logprob: -8.60832691192627
    5. ' (' → logprob: -9.10832691192627
    6. '0' → logprob: -9.48332691192627
    7. '10' → logprob: -9.73332691192627
    8. 'r' → logprob: -9.73332691192627
    9. '((' → logprob: -10.48332691192627
    10. '1' → logprob: -10.98332691192627

Token 44: '10' (ID: 702)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5874248147010803
    2. '10' → logprob: -1.2124247550964355
    3. 'n' → logprob: -1.9624247550964355
    4. '1' → logprob: -5.9624247550964355
    5. '(n' → logprob: -6.0874247550964355
    6. ' (' → logprob: -8.087425231933594
    7. ' ' → logprob: -8.087425231933594
    8. '0' → logprob: -8.462425231933594
    9. '9' → logprob: -8.837425231933594
    10. '{' → logprob: -9.212425231933594

Token 45: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.13468512892723083
    2. '-n' → logprob: -2.3846850395202637
    3. ' -' → logprob: -3.3846850395202637
    4. '-r' → logprob: -13.509685516357422
    5. '-min' → logprob: -14.884685516357422
    6. ' ' → logprob: -15.384685516357422
    7. '-num' → logprob: -15.634685516357422
    8. '-N' → logprob: -16.134685516357422
    9. '-int' → logprob: -16.259685516357422
    10. '-н' → logprob: -16.884685516357422

Token 46: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.001170460251159966
    2. ' n' → logprob: -6.751170635223389
    3. '	n' → logprob: -15.37617015838623
    4. ')n' → logprob: -18.251171112060547
    5. '   ' → logprob: -19.876171112060547
    6. '(n' → logprob: -20.501171112060547
    7. ' ' → logprob: -20.751171112060547
    8. '_n' → logprob: -20.876171112060547
    9. ',n' → logprob: -21.501171112060547
    10. '/n' → logprob: -21.751171112060547

Token 47: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -9.078839502763003e-05
    2. ' )' → logprob: -9.875090599060059
    3. ')
' → logprob: -10.250090599060059
    4. '))' → logprob: -12.625090599060059
    5. ')
' → logprob: -16.000091552734375
    6. ')))' → logprob: -16.125091552734375
    7. '0' → logprob: -16.125091552734375
    8. ')#' → logprob: -17.250091552734375
    9. ')

' → logprob: -17.500091552734375
    10. ' )
' → logprob: -17.750091552734375

Token 48: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.009209711104631424
    2. '   ' → logprob: -5.384209632873535
    3. ' print' → logprob: -6.634209632873535
    4. ')' → logprob: -6.759209632873535
    5. '
' → logprob: -6.759209632873535
    6. '\n' → logprob: -8.009209632873535
    7. ')
' → logprob: -8.134209632873535
    8. '```' → logprob: -9.134209632873535
    9. ' ' → logprob: -10.134209632873535
    10. '.print' → logprob: -10.259209632873535

Token 49: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -1.9504606825648807e-05
    2. ' print' → logprob: -10.875019073486328
    3. '   ' → logprob: -15.625019073486328
    4. '.print' → logprob: -15.750019073486328
    5. '(print' → logprob: -16.625019073486328
    6. '```' → logprob: -17.125019073486328
    7. 'pr' → logprob: -18.000019073486328
    8. ')' → logprob: -18.375019073486328
    9. '	print' → logprob: -18.875019073486328
    10. 'result' → logprob: -19.375019073486328

Token 50: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.06202089786529541
    2. '(' → logprob: -2.812020778656006
    3. '(r' → logprob: -9.937021255493164
    4. '(res' → logprob: -12.687021255493164
    5. 'result' → logprob: -14.687021255493164
    6. '(results' → logprob: -15.062021255493164
    7. ' (' → logprob: -15.062021255493164
    8. '()' → logprob: -15.562021255493164
    9. '(
' → logprob: -15.687021255493164
    10. '(resultado' → logprob: -15.812021255493164

Token 51: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.896309739408025e-07
    2. ')
' → logprob: -15.125000953674316
    3. ' )' → logprob: -15.500000953674316
    4. '))' → logprob: -15.875000953674316
    5. ')`' → logprob: -17.75
    6. '')' → logprob: -19.75
    7. '`)' → logprob: -20.125
    8. '）' → logprob: -20.375
    9. '(' → logprob: -20.375
    10. '()' → logprob: -20.5


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 49
Tokens correctement prédits (1ère position, stricte): 14
Tokens correctement prédits (1ère position, avec adaptation): 15
Tokens correctement prédits (top 10): 36
Précision stricte (1ère position): 28.57%
Précision adaptée (1ère position): 30.61%
Précision (top 10): 73.47%
================================================================================
