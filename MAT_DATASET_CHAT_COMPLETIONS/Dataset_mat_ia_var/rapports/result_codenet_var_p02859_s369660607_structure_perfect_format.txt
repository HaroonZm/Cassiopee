================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:38:13
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from sys import stdin

def fetch_one_line():
    return stdin.readline().rstrip()

def fetch_int_input():
    return [int(s) for s in fetch_one_line().split()]

def fetch_inputs(times):
    return [fetch_one_line() for _ in range(times)]

def fetch_int_inputs(times):
    return [[int(s) for s in fetch_one_line()] for _ in range(times)]

print(pow(int(fetch_one_line()), 2))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' stdin' (ID: 75143)
  Prédit: 'argv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'argv' → logprob: -0.050773657858371735
    2. ' argv' → logprob: -3.5507736206054688
    3. 'exit' → logprob: -4.300773620605469
    4. ' exit' → logprob: -6.050773620605469
    5. 'stdout' → logprob: -6.050773620605469
    6. 'path' → logprob: -6.675773620605469
    7. 'stdin' → logprob: -7.425773620605469
    8. 'import' → logprob: -8.425773620605469
    9. 'version' → logprob: -8.550773620605469
    10. 'stderr' → logprob: -9.425773620605469

Token 4: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.004543930757790804
    2. '.readline' → logprob: -5.629543781280518
    3. '\n' → logprob: -8.004544258117676
    4. '.
' → logprob: -8.504544258117676
    5. '```' → logprob: -9.129544258117676
    6. 'import' → logprob: -9.504544258117676
    7. '.read' → logprob: -9.504544258117676
    8. '
' → logprob: -10.754544258117676
    9. 'newline' → logprob: -10.754544258117676
    10. 'print' → logprob: -10.754544258117676

Token 5: 'def' (ID: 1314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.03538239002227783
    2. '.readline' → logprob: -3.5353822708129883
    3. '\n' → logprob: -6.035382270812988
    4. '.
' → logprob: -7.410382270812988
    5. '.read' → logprob: -7.660382270812988
    6. ',' → logprob: -7.660382270812988
    7. '```' → logprob: -7.910382270812988
    8. '
' → logprob: -7.910382270812988
    9. 'print' → logprob: -8.160382270812988
    10. 'for' → logprob: -8.660382270812988

Token 6: ' fetch' (ID: 12011)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.034600213170051575
    2. ' read' → logprob: -3.534600257873535
    3. ' process' → logprob: -6.034600257873535
    4. ' main' → logprob: -7.659600257873535
    5. ' space' → logprob: -7.909600257873535
    6. ' ' → logprob: -8.034600257873535
    7. '_read' → logprob: -8.284600257873535
    8. ' parse' → logprob: -8.659600257873535
    9. ' readline' → logprob: -8.909600257873535
    10. '_' → logprob: -9.659600257873535

Token 7: '_one' (ID: 26979)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0941457748413086
    2. '_data' → logprob: -2.5941457748413086
    3. '(' → logprob: -4.969145774841309
    4. '_input' → logprob: -6.344145774841309
    5. ' _' → logprob: -6.594145774841309
    6. '_token' → logprob: -6.844145774841309
    7. '_user' → logprob: -6.969145774841309
    8. '_items' → logprob: -7.594145774841309
    9. '(_' → logprob: -7.719145774841309
    10. '()' → logprob: -8.094145774841309

Token 8: '_line' (ID: 14418)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.8077149987220764
    2. '(' → logprob: -1.1827149391174316
    3. '():' → logprob: -2.4327149391174316
    4. '_token' → logprob: -2.4327149391174316
    5. '_line' → logprob: -4.182714939117432
    6. '()' → logprob: -4.307714939117432
    7. '_item' → logprob: -4.432714939117432
    8. '_name' → logprob: -5.432714939117432
    9. '_data' → logprob: -5.557714939117432
    10. ':' → logprob: -5.932714939117432

Token 9: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.39065825939178467
    2. '(' → logprob: -1.1406582593917847
    3. ':' → logprob: -5.890658378601074
    4. '):' → logprob: -8.140658378601074
    5. '(:' → logprob: -8.265658378601074
    6. ' ():' → logprob: -9.265658378601074
    7. '()' → logprob: -9.890658378601074
    8. '(line' → logprob: -10.390658378601074
    9. ' (' → logprob: -10.390658378601074
    10. '(":' → logprob: -10.515658378601074

Token 10: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00211600074544549
    2. ' return' → logprob: -7.0021162033081055
    3. 'return' → logprob: -7.1271162033081055
    4. '    
' → logprob: -8.752116203308105
    5. '```' → logprob: -9.377116203308105
    6. '    ' → logprob: -10.127116203308105
    7. ' readline' → logprob: -10.877116203308105
    8. '\' → logprob: -10.877116203308105
    9. '	return' → logprob: -11.252116203308105
    10. '   ' → logprob: -11.252116203308105

Token 11: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.06221617013216019
    2. '   ' → logprob: -3.312216281890869
    3. ' return' → logprob: -3.812216281890869
    4. 'line' → logprob: -6.437216281890869
    5. ' line' → logprob: -8.812215805053711
    6. 'data' → logprob: -11.062215805053711
    7. '```' → logprob: -12.437215805053711
    8. 'for' → logprob: -12.687215805053711
    9. ' ' → logprob: -12.687215805053711
    10. 'try' → logprob: -12.937215805053711

Token 12: ' stdin' (ID: 75143)
  Prédit: ' stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stdin' → logprob: -0.20407259464263916
    2. 'stdin' → logprob: -1.7040725946426392
    3. '(stdin' → logprob: -5.95407247543335
    4. '.stdin' → logprob: -10.704072952270508
    5. ' ' → logprob: -11.829072952270508
    6. ' std' → logprob: -12.204072952270508
    7. 'stdout' → logprob: -12.579072952270508
    8. ' next' → logprob: -12.579072952270508
    9. ' list' → logprob: -12.704072952270508
    10. 'list' → logprob: -12.704072952270508

Token 13: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.00028135839966125786
    2. '.' → logprob: -8.87528133392334
    3. '.read' → logprob: -8.87528133392334
    4. '.readlines' → logprob: -13.75028133392334
    5. ' readline' → logprob: -14.50028133392334
    6. 'read' → logprob: -16.375282287597656
    7. ' .' → logprob: -17.375282287597656
    8. '.Read' → logprob: -18.250282287597656
    9. '().' → logprob: -19.500282287597656
    10. '.write' → logprob: -19.750282287597656

Token 14: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -8.470901229884475e-05
    2. '()
' → logprob: -9.87508487701416
    3. '(' → logprob: -11.12508487701416
    4. '()\' → logprob: -12.12508487701416
    5. ' ()' → logprob: -12.37508487701416
    6. '().' → logprob: -12.87508487701416
    7. '()

' → logprob: -13.00008487701416
    8. '()(' → logprob: -14.00008487701416
    9. '()`' → logprob: -14.12508487701416
    10. '()<' → logprob: -14.62508487701416

Token 15: 'rstrip' (ID: 180429)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.0024768433067947626
    2. 'rstrip' → logprob: -6.002476692199707
    3. 'split' → logprob: -14.877476692199707
    4. 'replace' → logprob: -15.377476692199707
    5. 'decode' → logprob: -15.502476692199707
    6. '```' → logprob: -16.002477645874023
    7. ' strip' → logprob: -16.002477645874023
    8. 'str' → logprob: -16.627477645874023
    9. '_strip' → logprob: -17.752477645874023
    10. 'read' → logprob: -17.877477645874023

Token 16: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.017450707033276558
    2. '()' → logprob: -4.14245080947876
    3. '(\' → logprob: -7.51745080947876
    4. '(
' → logprob: -8.142450332641602
    5. ''' → logprob: -8.642450332641602
    6. '\n' → logprob: -9.767450332641602
    7. '"' → logprob: -9.767450332641602
    8. '('' → logprob: -10.017450332641602
    9. '```' → logprob: -10.392450332641602
    10. '\' → logprob: -10.517450332641602

Token 17: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.36891183257102966
    2. '#' → logprob: -2.1189117431640625
    3. '
' → logprob: -2.7439117431640625
    4. '\n' → logprob: -3.2439117431640625
    5. '```' → logprob: -3.9939117431640625
    6. '<|end|>' → logprob: -4.1189117431640625
    7. 'x' → logprob: -4.8689117431640625
    8. 'a' → logprob: -5.3689117431640625
    9. 'd' → logprob: -5.4939117431640625
    10. 'newline' → logprob: -5.6189117431640625

Token 18: ' fetch' (ID: 12011)
  Prédit: ' fetch'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fetch' → logprob: -0.0008589350618422031
    2. ' calculate' → logprob: -8.250859260559082
    3. ' main' → logprob: -8.750859260559082
    4. ' process' → logprob: -9.250859260559082
    5. 'fetch' → logprob: -9.375859260559082
    6. '_fetch' → logprob: -9.375859260559082
    7. ' parse' → logprob: -9.750859260559082
    8. ' decode' → logprob: -11.125859260559082
    9. ' read' → logprob: -11.250859260559082
    10. ' get' → logprob: -11.625859260559082

Token 19: '_int' (ID: 12285)
  Prédit: '_one'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_one' → logprob: -0.03443828970193863
    2. '_two' → logprob: -3.909438371658325
    3. '_' → logprob: -5.159438133239746
    4. '_three' → logprob: -6.034438133239746
    5. '_n' → logprob: -6.284438133239746
    6. '_multiple' → logprob: -6.409438133239746
    7. '_line' → logprob: -7.784438133239746
    8. '_many' → logprob: -7.909438133239746
    9. '_word' → logprob: -8.409438133239746
    10. '_multi' → logprob: -8.534438133239746

Token 20: '_input' (ID: 12507)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.6950002908706665
    2. '():' → logprob: -0.6950002908706665
    3. '(' → logprob: -7.695000171661377
    4. '()">' → logprob: -8.070000648498535
    5. '()>' → logprob: -8.695000648498535
    6. ' ()' → logprob: -9.195000648498535
    7. '`()' → logprob: -9.445000648498535
    8. '_line' → logprob: -9.570000648498535
    9. '():
' → logprob: -9.695000648498535
    10. ']()' → logprob: -9.945000648498535

Token 21: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.014854460023343563
    2. '()' → logprob: -4.264854431152344
    3. '(' → logprob: -7.514854431152344
    4. '():
' → logprob: -10.014854431152344
    5. ' ()' → logprob: -10.264854431152344
    6. ' ():' → logprob: -10.764854431152344
    7. 's' → logprob: -11.639854431152344
    8. '_' → logprob: -12.389854431152344
    9. '()>' → logprob: -12.514854431152344
    10. '()*' → logprob: -12.889854431152344

Token 22: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0004207826859783381
    2. '    
' → logprob: -8.875420570373535
    3. '    ' → logprob: -9.000420570373535
    4. '()' → logprob: -9.375420570373535
    5. ' ()' → logprob: -11.125420570373535
    6. '(' → logprob: -11.250420570373535
    7. ' ' → logprob: -11.625420570373535
    8. ' return' → logprob: -11.875420570373535
    9. '  ' → logprob: -12.125420570373535
    10. ')' → logprob: -12.625420570373535

Token 23: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.3736233711242676
    2. '   ' → logprob: -1.7486233711242676
    3. 'return' (adapté à ' return') → logprob: -1.9986233711242676
    4. 'int' → logprob: -6.373623371124268
    5. ' int' → logprob: -8.12362289428711
    6. '    ' → logprob: -8.62362289428711
    7. '    
' → logprob: -11.24862289428711
    8. ' ' → logprob: -11.24862289428711
    9. '  ' → logprob: -11.99862289428711
    10. '	return' → logprob: -12.49862289428711

Token 24: ' [' (ID: 723)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.0006724014529027045
    2. 'int' → logprob: -7.375672340393066
    3. '(int' → logprob: -10.250672340393066
    4. ' ' → logprob: -11.500672340393066
    5. '  ' → logprob: -16.250673294067383
    6. ' ' → logprob: -16.875673294067383
    7. '<int' → logprob: -17.000673294067383
    8. '   ' → logprob: -17.375673294067383
    9. '[int' → logprob: -17.500673294067383
    10. ' in' → logprob: -18.000673294067383

Token 25: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.014179147779941559
    2. ' int' → logprob: -4.264179229736328
    3. '   ' → logprob: -12.264179229736328
    4. ']int' → logprob: -12.514179229736328
    5. '(int' → logprob: -13.014179229736328
    6. 'map' → logprob: -13.514179229736328
    7. ' ' → logprob: -13.764179229736328
    8. '  ' → logprob: -14.264179229736328
    9. 'i' → logprob: -14.764179229736328
    10. '	int' → logprob: -15.139179229736328

Token 26: '(s' (ID: 1858)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.09179923683404922
    2. '(i' → logprob: -2.466799259185791
    3. '(' → logprob: -6.591799259185791
    4. '(s' → logprob: -6.966799259185791
    5. ']' → logprob: -7.966799259185791
    6. '(token' → logprob: -9.841798782348633
    7. '](' → logprob: -9.966798782348633
    8. '(ii' → logprob: -10.716798782348633
    9. '(c' → logprob: -11.716798782348633
    10. '(item' → logprob: -11.841798782348633

Token 27: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.07805845886468887
    2. '(x' → logprob: -2.7030584812164307
    3. ')x' → logprob: -5.703058242797852
    4. 'x' → logprob: -5.828058242797852
    5. '(i' → logprob: -7.453058242797852
    6. '(s' → logprob: -7.953058242797852
    7. ' )' → logprob: -8.328058242797852
    8. ')i' → logprob: -8.828058242797852
    9. '())' → logprob: -9.453058242797852
    10. ' x' → logprob: -9.828058242797852

Token 28: ' for' (ID: 395)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.06414594501256943
    2. '(s' → logprob: -2.939146041870117
    3. ' for' → logprob: -5.689146041870117
    4. '(i' → logprob: -6.439146041870117
    5. 'for' → logprob: -6.814146041870117
    6. 'x' → logprob: -6.814146041870117
    7. ')' → logprob: -7.314146041870117
    8. '(token' → logprob: -7.939146041870117
    9. ']' → logprob: -8.314146041870117
    10. 'token' → logprob: -8.564146041870117

Token 29: ' s' (ID: 265)
  Prédit: ' s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.0069115604273974895
    2. 's' → logprob: -5.131911754608154
    3. ' ' → logprob: -7.381911754608154
    4. ' stdin' → logprob: -9.256911277770996
    5. 'stdin' → logprob: -9.756911277770996
    6. '<|end|>' → logprob: -9.756911277770996
    7. '  ' → logprob: -10.256911277770996
    8. '_s' → logprob: -10.381911277770996
    9. '	s' → logprob: -10.756911277770996
    10. '<|end|>' → logprob: -11.131911277770996

Token 30: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.002517158165574074
    2. 'in' → logprob: -6.002517223358154
    3. ' ' → logprob: -11.502516746520996
    4. '(stdin' → logprob: -11.877516746520996
    5. 's' → logprob: -12.252516746520996
    6. ' s' → logprob: -12.627516746520996
    7. '(s' → logprob: -12.877516746520996
    8. '  ' → logprob: -13.377516746520996
    9. '   ' → logprob: -13.502516746520996
    10. '	in' → logprob: -13.877516746520996

Token 31: ' fetch' (ID: 12011)
  Prédit: ' fetch'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fetch' → logprob: -0.10704153031110764
    2. 'fetch' → logprob: -2.482041597366333
    3. ' stdin' → logprob: -4.232041358947754
    4. 'stdin' → logprob: -5.857041358947754
    5. '(stdin' → logprob: -8.107041358947754
    6. '(fetch' → logprob: -8.357041358947754
    7. ' ' → logprob: -12.482041358947754
    8. ' fgets' → logprob: -12.607041358947754
    9. ' f' → logprob: -13.794541358947754
    10. 'f' → logprob: -13.794541358947754

Token 32: '_one' (ID: 26979)
  Prédit: '_one'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_one' → logprob: -2.1008713702030946e-06
    2. '_int' → logprob: -13.250001907348633
    3. '_' → logprob: -15.625001907348633
    4. '_line' → logprob: -16.500001907348633
    5. '_two' → logprob: -17.125001907348633
    6. '_once' → logprob: -17.750001907348633
    7. '__' → logprob: -18.375001907348633
    8. '_ONE' → logprob: -18.500001907348633
    9. '_single' → logprob: -19.250001907348633
    10. '_a' → logprob: -19.375001907348633

Token 33: '_line' (ID: 14418)
  Prédit: '_line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_line' → logprob: -7.226628895296017e-06
    2. '_l' → logprob: -12.750007629394531
    3. '_' → logprob: -13.000007629394531
    4. '_lin' → logprob: -14.500007629394531
    5. ' _' → logprob: -14.625007629394531
    6. '_LINE' → logprob: -14.750007629394531
    7. 'line' → logprob: -15.250007629394531
    8. '_li' → logprob: -15.250007629394531
    9. '_word' → logprob: -17.50000762939453
    10. '_Line' → logprob: -17.62500762939453

Token 34: '().' (ID: 1454)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.10395553708076477
    2. '()' → logprob: -2.3539555072784424
    3. '().' → logprob: -5.6039557456970215
    4. '()][' → logprob: -10.853955268859863
    5. '()[' → logprob: -11.603955268859863
    6. '())' → logprob: -11.603955268859863
    7. ']()' → logprob: -12.353955268859863
    8. '()].' → logprob: -12.353955268859863
    9. '(' → logprob: -12.603955268859863
    10. ' ()' → logprob: -12.728955268859863

Token 35: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -6.885492621222511e-05
    2. 'strip' → logprob: -9.750068664550781
    3. ' split' → logprob: -11.500068664550781
    4. 'rstrip' → logprob: -15.250068664550781
    5. 'spl' → logprob: -16.12506866455078
    6. '(split' → logprob: -16.50006866455078
    7. '.split' → logprob: -19.75006866455078
    8. 's' → logprob: -20.12506866455078
    9. ' strip' → logprob: -20.62506866455078
    10. 'plit' → logprob: -21.00006866455078

Token 36: '()' (ID: 416)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.0018152403645217419
    2. '(' → logprob: -6.501815319061279
    3. '()' → logprob: -8.626814842224121
    4. '('' → logprob: -9.001814842224121
    5. '())' → logprob: -12.001814842224121
    6. '()]
' → logprob: -13.751814842224121
    7. ']' → logprob: -14.001814842224121
    8. ']()' → logprob: -14.251814842224121
    9. '("' → logprob: -14.501814842224121
    10. '()],' → logprob: -15.001814842224121

Token 37: ']

' (ID: 3144)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.001945533906109631
    2. ']' → logprob: -6.251945495605469
    3. ')]' → logprob: -11.751945495605469
    4. ']()' → logprob: -12.001945495605469
    5. '(' → logprob: -13.626945495605469
    6. '()' → logprob: -13.751945495605469
    7. '()]
' → logprob: -15.376945495605469
    8. ' ]' → logprob: -15.626945495605469
    9. '`]' → logprob: -16.37694549560547
    10. '())' → logprob: -17.12694549560547

Token 38: 'def' (ID: 1314)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.398516446352005
    2. '#' → logprob: -1.7735164165496826
    3. 'def' → logprob: -2.5235164165496826
    4. 'n' → logprob: -3.1485164165496826
    5. '\' → logprob: -4.773516654968262
    6. 'a' → logprob: -5.023516654968262
    7. '```' → logprob: -5.898516654968262
    8. 'x' → logprob: -5.898516654968262
    9. 'i' → logprob: -6.148516654968262
    10. '[' → logprob: -6.273516654968262

Token 39: ' fetch' (ID: 12011)
  Prédit: ' fetch'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fetch' → logprob: -0.15207917988300323
    2. ' main' → logprob: -3.0270791053771973
    3. ' solve' → logprob: -3.0270791053771973
    4. ' find' → logprob: -4.652079105377197
    5. ' calculate' → logprob: -4.777079105377197
    6. ' process' → logprob: -5.027079105377197
    7. ' ' → logprob: -6.027079105377197
    8. ' compute' → logprob: -6.027079105377197
    9. ' space' → logprob: -6.652079105377197
    10. ' factorial' → logprob: -6.777079105377197

Token 40: '_inputs' (ID: 67304)
  Prédit: '_one'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_one' → logprob: -0.08723840117454529
    2. '_int' → logprob: -2.712238311767578
    3. '_' → logprob: -4.712238311767578
    4. '_str' → logprob: -6.212238311767578
    5. '_single' → logprob: -6.462238311767578
    6. '_line' → logprob: -6.462238311767578
    7. '_string' → logprob: -6.837238311767578
    8. '_two' → logprob: -7.087238311767578
    9. '_word' → logprob: -8.337238311767578
    10. '_char' → logprob: -8.587238311767578

Token 41: '(times' (ID: 135653)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -6.539801688631997e-05
    2. ' ():' → logprob: -10.125065803527832
    3. '():
' → logprob: -12.125065803527832
    4. '_list' → logprob: -12.250065803527832
    5. '(' → logprob: -12.375065803527832
    6. '_' → logprob: -12.875065803527832
    7. '_line' → logprob: -13.125065803527832
    8. '()' → logprob: -13.500065803527832
    9. '_input' → logprob: -14.125065803527832
    10. '()[' → logprob: -14.875065803527832

Token 42: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0067167943343520164
    2. ')' → logprob: -5.756716728210449
    3. '=' → logprob: -5.881716728210449
    4. '():' → logprob: -7.881716728210449
    5. ' ):' → logprob: -8.13171672821045
    6. ':' → logprob: -10.00671672821045
    7. '()' → logprob: -12.13171672821045
    8. '(' → logprob: -12.25671672821045
    9. '):
' → logprob: -12.63171672821045
    10. '   ' → logprob: -12.88171672821045

Token 43: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014543760567903519
    2. ':' → logprob: -4.389543533325195
    3. '       ' → logprob: -7.514543533325195
    4. '    ' → logprob: -7.764543533325195
    5. '    
' → logprob: -7.889543533325195
    6. '
' → logprob: -8.889543533325195
    7. '<|end|>' → logprob: -8.889543533325195
    8. '[' → logprob: -10.139543533325195
    9. ':
' → logprob: -10.139543533325195
    10. ' for' → logprob: -10.139543533325195

Token 44: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7116992473602295
    2. '    ' → logprob: -0.9616992473602295
    3. ' return' → logprob: -2.2116992473602295
    4. '    
' → logprob: -5.211699485778809
    5. '       ' → logprob: -5.836699485778809
    6. 'return' (adapté à ' return') → logprob: -6.586699485778809
    7. '[' → logprob: -6.836699485778809
    8. ' [
' → logprob: -6.836699485778809
    9. '     
' → logprob: -7.086699485778809
    10. ' results' → logprob: -7.211699485778809

Token 45: ' [' (ID: 723)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.16767525672912598
    2. ' [' → logprob: -1.917675256729126
    3. '[t' → logprob: -5.542675018310547
    4. '[int' → logprob: -6.667675018310547
    5. '[f' → logprob: -6.792675018310547
    6. '[list' → logprob: -7.667675018310547
    7. '[get' → logprob: -8.167675018310547
    8. '[input' → logprob: -9.667675018310547
    9. '[
' → logprob: -10.292675018310547
    10. '[start' → logprob: -10.417675018310547

Token 46: 'fetch' (ID: 19843)
  Prédit: 'fetch'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fetch' → logprob: -0.00016742534353397787
    2. ' fetch' → logprob: -8.875167846679688
    3. '(fetch' → logprob: -11.500167846679688
    4. 'int' → logprob: -11.875167846679688
    5. '   ' → logprob: -12.250167846679688
    6. 'stdin' → logprob: -12.875167846679688
    7. '[' → logprob: -14.375167846679688
    8. 'fet' → logprob: -14.625167846679688
    9. ' ' → logprob: -15.500167846679688
    10. '[]' → logprob: -15.875167846679688

Token 47: '_one' (ID: 26979)
  Prédit: '_one'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_one' → logprob: -0.0380435548722744
    2. '_int' → logprob: -3.28804349899292
    3. 'one' → logprob: -14.288043975830078
    4. '_' → logprob: -14.663043975830078
    5. 'int' → logprob: -14.913043975830078
    6. 'One' → logprob: -15.413043975830078
    7. ' one' → logprob: -16.038043975830078
    8. '_once' → logprob: -16.413043975830078
    9. '_two' → logprob: -16.663043975830078
    10. '_f' → logprob: -17.413043975830078

Token 48: '_line' (ID: 14418)
  Prédit: '_line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_line' → logprob: -4.246537173457909e-06
    2. '_' → logprob: -13.500003814697266
    3. '_int' → logprob: -14.000003814697266
    4. 'line' → logprob: -14.375003814697266
    5. '_l' → logprob: -15.000003814697266
    6. '_lin' → logprob: -15.000003814697266
    7. '_LINE' → logprob: -15.375003814697266
    8. '_lines' → logprob: -15.625003814697266
    9. '_input' → logprob: -15.750003814697266
    10. '_Line' → logprob: -17.125003814697266

Token 49: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0001785112835932523
    2. '()]' → logprob: -9.125178337097168
    3. '())' → logprob: -9.625178337097168
    4. '()
' → logprob: -13.625178337097168
    5. '()`' → logprob: -14.250178337097168
    6. '`()' → logprob: -14.375178337097168
    7. '（）' → logprob: -15.000178337097168
    8. ' ()' → logprob: -16.125179290771484
    9. '()<<' → logprob: -16.250179290771484
    10. '()"' → logprob: -16.375179290771484

Token 50: ' for' (ID: 395)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00011486753646750003
    2. 'for' → logprob: -9.500114440917969
    3. ')' → logprob: -10.500114440917969
    4. ' ()' → logprob: -11.875114440917969
    5. ' for' → logprob: -12.250114440917969
    6. '()]' → logprob: -15.000114440917969
    7. '())' → logprob: -15.125114440917969
    8. ']' → logprob: -16.75011444091797
    9. '()
' → logprob: -16.87511444091797
    10. ' ' → logprob: -17.25011444091797

Token 51: ' _' (ID: 1175)
  Prédit: ' _'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.4248950779438019
    2. '_' → logprob: -1.5498950481414795
    3. ' range' → logprob: -2.0498950481414795
    4. 'range' → logprob: -5.424895286560059
    5. ' ' → logprob: -7.799895286560059
    6. '_range' → logprob: -8.174895286560059
    7. ' in' → logprob: -10.924895286560059
    8. ' i' → logprob: -11.674895286560059
    9. ' xrange' → logprob: -11.799895286560059
    10. '(range' → logprob: -12.674895286560059

Token 52: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0017362285871058702
    2. 'in' → logprob: -6.376736164093018
    3. ' ' → logprob: -10.376736640930176
    4. 'range' → logprob: -13.751736640930176
    5. '	in' → logprob: -14.376736640930176
    6. '  ' → logprob: -15.001736640930176
    7. ' _' → logprob: -15.376736640930176
    8. '_in' → logprob: -16.00173568725586
    9. '<|end|>' → logprob: -16.12673568725586
    10. '_' → logprob: -16.50173568725586

Token 53: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.28116682171821594
    2. ' range' → logprob: -1.4061667919158936
    3. ' ' → logprob: -12.406167030334473
    4. '	range' → logprob: -12.531167030334473
    5. '_' → logprob: -12.656167030334473
    6. ' xrange' → logprob: -13.406167030334473
    7. '_range' → logprob: -13.531167030334473
    8. '(range' → logprob: -14.031167030334473
    9. 'rang' → logprob: -14.281167030334473
    10. '  ' → logprob: -14.781167030334473

Token 54: '(times' (ID: 135653)
  Prédit: '(times'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(times' → logprob: -0.0024821963161230087
    2. '(' → logprob: -6.0024824142456055
    3. 'times' → logprob: -12.127482414245605
    4. ' (' → logprob: -14.627482414245605
    5. '(t' → logprob: -15.252482414245605
    6. '(
' → logprob: -15.502482414245605
    7. ' times' → logprob: -15.877482414245605
    8. '(time' → logprob: -17.75248146057129
    9. '(

' → logprob: -18.62748146057129
    10. '(s' → logprob: -19.37748146057129

Token 55: ')]

' (ID: 56882)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.0006154587608762085
    2. ')' → logprob: -7.75061559677124
    3. ']' → logprob: -8.625615119934082
    4. '')]' → logprob: -13.500615119934082
    5. ')])' → logprob: -13.750615119934082
    6. '   ' → logprob: -14.500615119934082
    7. '])]' → logprob: -14.625615119934082
    8. ' )' → logprob: -14.875615119934082
    9. ')]
' → logprob: -15.125615119934082
    10. '))' → logprob: -15.625615119934082

Token 56: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.2995007634162903
    2. 'n' → logprob: -2.1745007038116455
    3. '#' → logprob: -2.6745007038116455
    4. 'd' → logprob: -2.9245007038116455
    5. 'class' → logprob: -5.674500942230225
    6. '```' → logprob: -5.799500942230225
    7. '
' → logprob: -5.924500942230225
    8. 'print' → logprob: -6.049500942230225
    9. '<|end|>' → logprob: -6.174500942230225
    10. 'a' → logprob: -6.299500942230225

Token 57: ' fetch' (ID: 12011)
  Prédit: ' fetch'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fetch' → logprob: -0.004958123899996281
    2. ' solve' → logprob: -6.504958152770996
    3. ' main' → logprob: -7.004958152770996
    4. 'fetch' → logprob: -7.379958152770996
    5. ' process' → logprob: -7.504958152770996
    6. ' calculate' → logprob: -7.754958152770996
    7. ' parse' → logprob: -8.629958152770996
    8. ' split' → logprob: -9.254958152770996
    9. ' compute' → logprob: -9.629958152770996
    10. ' find' → logprob: -9.754958152770996

Token 58: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.7075775861740112
    2. '_one' → logprob: -0.7075775861740112
    3. '_' → logprob: -5.207577705383301
    4. '_line' → logprob: -6.207577705383301
    5. '_input' → logprob: -6.332577705383301
    6. '_two' → logprob: -6.707577705383301
    7. '_str' → logprob: -7.207577705383301
    8. '_string' → logprob: -7.832577705383301
    9. '_word' → logprob: -8.5825777053833
    10. '_single' → logprob: -8.5825777053833

Token 59: '_inputs' (ID: 67304)
  Prédit: '_input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.02133047580718994
    2. '_inputs' → logprob: -4.1463303565979
    3. '_' → logprob: -6.3963303565979
    4. 's' → logprob: -6.5213303565979
    5. '_list' → logprob: -7.5213303565979
    6. '_line' → logprob: -7.6463303565979
    7. '_s' → logprob: -7.6463303565979
    8. '_array' → logprob: -8.271330833435059
    9. '_raw' → logprob: -10.021330833435059
    10. '_in' → logprob: -10.146330833435059

Token 60: '(times' (ID: 135653)
  Prédit: '(times'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(times' → logprob: -0.02537372149527073
    2. '(' → logprob: -3.900373697280884
    3. '()' → logprob: -5.900373935699463
    4. '(t' → logprob: -6.650373935699463
    5. '_times' → logprob: -8.275373458862305
    6. '():' → logprob: -9.150373458862305
    7. '()(' → logprob: -9.275373458862305
    8. '(count' → logprob: -9.775373458862305
    9. '```' → logprob: -9.775373458862305
    10. 'times' → logprob: -10.275373458862305

Token 61: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00833300594240427
    2. '():' → logprob: -5.133333206176758
    3. ')' → logprob: -6.758333206176758
    4. '()' → logprob: -6.758333206176758
    5. ' ):' → logprob: -10.133333206176758
    6. '):
' → logprob: -10.508333206176758
    7. '   ' → logprob: -12.133333206176758
    8. ' ():' → logprob: -13.258333206176758
    9. '[]):' → logprob: -13.758333206176758
    10. ':' → logprob: -14.258333206176758

Token 62: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -4.453737710718997e-05
    2. 'return' → logprob: -11.375044822692871
    3. ' return' → logprob: -11.625044822692871
    4. '    ' → logprob: -11.750044822692871
    5. '   ' → logprob: -12.500044822692871
    6. '	return' → logprob: -12.625044822692871
    7. '(' → logprob: -12.875044822692871
    8. '    
' → logprob: -13.750044822692871
    9. '  ' → logprob: -13.875044822692871
    10. '<|end|>' → logprob: -14.250044822692871

Token 63: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.257201611995697
    2. ' return' → logprob: -1.5072016716003418
    3. 'return' (adapté à ' return') → logprob: -5.257201671600342
    4. '    ' → logprob: -10.507201194763184
    5. ' [' → logprob: -11.757201194763184
    6. '[' → logprob: -12.757201194763184
    7. ' ' → logprob: -12.757201194763184
    8. '	return' → logprob: -13.257201194763184
    9. '[]' → logprob: -13.382201194763184
    10. ' []' → logprob: -14.007201194763184

Token 64: ' [[' (ID: 9237)
  Prédit: ' ['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.28157150745391846
    2. '[' → logprob: -1.4065715074539185
    3. '[int' → logprob: -8.156571388244629
    4. ' ' → logprob: -9.406571388244629
    5. '[f' → logprob: -10.906571388244629
    6. ' ' → logprob: -11.531571388244629
    7. '[Int' → logprob: -11.656571388244629
    8. '   ' → logprob: -13.031571388244629
    9. '[get' → logprob: -13.031571388244629
    10. ' fetch' → logprob: -13.281571388244629

Token 65: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -6.704273118884885e-07
    2. '[int' → logprob: -15.125000953674316
    3. ']int' → logprob: -15.625000953674316
    4. ' int' → logprob: -15.875000953674316
    5. '<int' → logprob: -17.0
    6. '(int' → logprob: -17.375
    7. 'i' → logprob: -18.25
    8. 'ints' → logprob: -19.25
    9. 'intval' → logprob: -19.5
    10. 'inti' → logprob: -19.625

Token 66: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.00018196819291915745
    2. '(x' → logprob: -10.250182151794434
    3. 's' → logprob: -10.375182151794434
    4. '(token' → logprob: -10.375182151794434
    5. '(' → logprob: -10.500182151794434
    6. ']' → logprob: -10.750182151794434
    7. '(i' → logprob: -11.625182151794434
    8. '](' → logprob: -11.750182151794434
    9. 'token' → logprob: -12.125182151794434
    10. ')' → logprob: -12.375182151794434

Token 67: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.016173604875802994
    2. '(s' → logprob: -4.141173839569092
    3. ')s' → logprob: -9.516173362731934
    4. ' )' → logprob: -10.266173362731934
    5. ' for' → logprob: -12.141173362731934
    6. 's' → logprob: -12.266173362731934
    7. 'for' → logprob: -12.266173362731934
    8. '')' → logprob: -12.641173362731934
    9. ')]' → logprob: -12.641173362731934
    10. '   ' → logprob: -13.516173362731934

Token 68: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.1278766393661499
    2. 'for' → logprob: -2.1278767585754395
    3. '(s' → logprob: -7.2528767585754395
    4. ')' → logprob: -8.752876281738281
    5. ' in' → logprob: -9.752876281738281
    6. '	for' → logprob: -11.877876281738281
    7. 's' → logprob: -12.252876281738281
    8. '()' → logprob: -12.502876281738281
    9. 'in' → logprob: -12.877876281738281
    10. ']' → logprob: -13.377876281738281

Token 69: ' s' (ID: 265)
  Prédit: ' s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.4741201102733612
    2. 's' → logprob: -0.9741201400756836
    3. '_' → logprob: -10.849120140075684
    4. '(s' → logprob: -11.974120140075684
    5. ' ' → logprob: -12.349120140075684
    6. '<|end|>' → logprob: -12.474120140075684
    7. '_s' → logprob: -12.599120140075684
    8. ' in' → logprob: -13.099120140075684
    9. ' fetch' → logprob: -14.474120140075684
    10. ' _' → logprob: -14.599120140075684

Token 70: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.1636059284210205
    2. 's' → logprob: -2.0386059284210205
    3. 'in' → logprob: -4.413605690002441
    4. ' s' → logprob: -4.788605690002441
    5. '(s' → logprob: -8.538605690002441
    6. ' ' → logprob: -11.038605690002441
    7. '<|end|>' → logprob: -11.288605690002441
    8. '_s' → logprob: -11.788605690002441
    9. '_' → logprob: -11.913605690002441
    10. '<|end|>' → logprob: -12.038605690002441

Token 71: ' fetch' (ID: 12011)
  Prédit: ' fetch'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fetch' → logprob: -0.6931779980659485
    2. 'fetch' → logprob: -0.6931779980659485
    3. '(fetch' → logprob: -10.443178176879883
    4. ' ' → logprob: -13.818178176879883
    5. '   ' → logprob: -15.943178176879883
    6. '  ' → logprob: -16.318178176879883
    7. 'f' → logprob: -16.318178176879883
    8. '.fetch' → logprob: -16.568178176879883
    9. '_fetch' → logprob: -16.755678176879883
    10. ' range' → logprob: -17.443178176879883

Token 72: '_one' (ID: 26979)
  Prédit: '_one'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_one' → logprob: -2.463036435074173e-05
    2. '_line' → logprob: -10.875024795532227
    3. 'one' → logprob: -13.500024795532227
    4. 'One' → logprob: -13.750024795532227
    5. 'fetch' → logprob: -14.375024795532227
    6. 'inputs' → logprob: -14.500024795532227
    7. '_int' → logprob: -14.750024795532227
    8. '_ONE' → logprob: -15.250024795532227
    9. 'int' → logprob: -15.375024795532227
    10. '_two' → logprob: -15.500024795532227

Token 73: '_line' (ID: 14418)
  Prédit: '_line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_line' → logprob: -0.00013083349040243775
    2. 'line' → logprob: -9.000130653381348
    3. '_LINE' → logprob: -12.875130653381348
    4. 'Line' → logprob: -14.125130653381348
    5. '_' → logprob: -14.500130653381348
    6. '   ' → logprob: -14.750130653381348
    7. '```' → logprob: -14.750130653381348
    8. 'put' → logprob: -14.875130653381348
    9. 'inputs' → logprob: -14.875130653381348
    10. '_lines' → logprob: -15.375130653381348

Token 74: '()]' (ID: 59063)
  Prédit: '().'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -2.176947600673884e-05
    2. '()' → logprob: -10.875021934509277
    3. ' ().' → logprob: -13.375021934509277
    4. '(' → logprob: -14.500021934509277
    5. '()].' → logprob: -14.625021934509277
    6. '()]' → logprob: -15.750021934509277
    7. '()
' → logprob: -17.50002098083496
    8. '().'' → logprob: -18.37502098083496
    9. '()[' → logprob: -18.50002098083496
    10. ' ' → logprob: -18.62502098083496

Token 75: ' for' (ID: 395)
  Prédit: '().'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '().' → logprob: -0.026567915454506874
    2. '.' → logprob: -4.2765679359436035
    3. '.split' → logprob: -4.4015679359436035
    4. '()' → logprob: -10.276567459106445
    5. ' .' → logprob: -11.651567459106445
    6. '].' → logprob: -11.901567459106445
    7. '   ' → logprob: -12.026567459106445
    8. '.strip' → logprob: -13.026567459106445
    9. '.rstrip' → logprob: -13.026567459106445
    10. ' ().' → logprob: -13.151567459106445

Token 76: ' _' (ID: 1175)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.006756340153515339
    2. 'range' → logprob: -5.00675630569458
    3. '(range' → logprob: -10.881756782531738
    4. '_' → logprob: -11.006756782531738
    5. ' times' → logprob: -12.881756782531738
    6. ' xrange' → logprob: -13.381756782531738
    7. '_range' → logprob: -14.256756782531738
    8. ' _' → logprob: -14.381756782531738
    9. '	range' → logprob: -15.256756782531738
    10. 'times' → logprob: -17.381755828857422

Token 77: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.36516380310058594
    2. 'in' → logprob: -1.240163803100586
    3. ' ' → logprob: -4.990163803100586
    4. 'times' → logprob: -5.365163803100586
    5. 'range' → logprob: -6.115163803100586
    6. ' times' → logprob: -6.490163803100586
    7. ' range' → logprob: -7.490163803100586
    8. '(' → logprob: -8.115163803100586
    9. '<|end|>' → logprob: -8.240163803100586
    10. '(times' → logprob: -9.865163803100586

Token 78: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.018155328929424286
    2. ' range' → logprob: -4.018155097961426
    3. '(range' → logprob: -12.518155097961426
    4. '	range' → logprob: -13.518155097961426
    5. 'times' → logprob: -16.143156051635742
    6. '_range' → logprob: -16.768156051635742
    7. ' ' → logprob: -16.768156051635742
    8. '   ' → logprob: -17.143156051635742
    9. '  ' → logprob: -17.393156051635742
    10. ' xrange' → logprob: -17.643156051635742

Token 79: '(times' (ID: 135653)
  Prédit: '(times'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(times' → logprob: -0.00020783171930816025
    2. '(' → logprob: -8.500207901000977
    3. '(t' → logprob: -13.375207901000977
    4. ' (' → logprob: -13.500207901000977
    5. 'times' → logprob: -13.750207901000977
    6. ' times' → logprob: -15.125207901000977
    7. '(time' → logprob: -18.250207901000977
    8. '(tokens' → logprob: -18.750207901000977
    9. '(
' → logprob: -19.250207901000977
    10. '(timer' → logprob: -19.375207901000977

Token 80: ')]

' (ID: 56882)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.11389420926570892
    2. ']' → logprob: -2.36389422416687
    3. '()]' → logprob: -4.488893985748291
    4. ')' → logprob: -6.113893985748291
    5. '()' → logprob: -9.86389446258545
    6. '   ' → logprob: -10.73889446258545
    7. '])' → logprob: -10.98889446258545
    8. '())' → logprob: -11.48889446258545
    9. '])]' → logprob: -11.61389446258545
    10. ' ]' → logprob: -11.98889446258545

Token 81: 'print' (ID: 1598)
  Prédit: '().'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '().' → logprob: -0.1510007232427597
    2. '.' → logprob: -2.026000738143921
    3. '()' → logprob: -5.526000499725342
    4. '.split' → logprob: -5.901000499725342
    5. '(' → logprob: -7.026000499725342
    6. ' .' → logprob: -7.526000499725342
    7. '   ' → logprob: -10.2760009765625
    8. ' ' → logprob: -10.5260009765625
    9. '('.')' → logprob: -11.0260009765625
    10. ' ().' → logprob: -11.6510009765625

Token 82: '(pow' (ID: 189160)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0002330992283532396
    2. '("("' → logprob: -9.125232696533203
    3. '('' → logprob: -9.375232696533203
    4. ' (' → logprob: -10.750232696533203
    5. '()' → logprob: -11.750232696533203
    6. '("")' → logprob: -13.000232696533203
    7. '("""' → logprob: -13.000232696533203
    8. '((' → logprob: -14.625232696533203
    9. '(**' → logprob: -14.750232696533203
    10. '(`' → logprob: -14.875232696533203

Token 83: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0004989399458281696
    2. ')' → logprob: -8.00049877166748
    3. ' (' → logprob: -9.12549877166748
    4. '()' → logprob: -10.62549877166748
    5. '(pow' → logprob: -11.75049877166748
    6. '<|end|>' → logprob: -11.75049877166748
    7. '(
' → logprob: -12.00049877166748
    8. ' ' → logprob: -13.12549877166748
    9. '(

' → logprob: -13.62549877166748
    10. '('' → logprob: -13.87549877166748

Token 84: '(fetch' (ID: 76382)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.04957004636526108
    2. '('' → logprob: -3.299570083618164
    3. '(input' → logprob: -4.549570083618164
    4. '(s' → logprob: -8.674570083618164
    5. '("("' → logprob: -8.674570083618164
    6. '("' → logprob: -9.174570083618164
    7. ')' → logprob: -9.174570083618164
    8. '(`' → logprob: -9.549570083618164
    9. ' (' → logprob: -9.924570083618164
    10. ' ' → logprob: -10.049570083618164

Token 85: '_one' (ID: 26979)
  Prédit: '_one'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_one' → logprob: -5.204720582696609e-05
    2. '_' → logprob: -10.500052452087402
    3. '_int' → logprob: -11.750052452087402
    4. 'One' → logprob: -12.375052452087402
    5. '_input' → logprob: -12.500052452087402
    6. '_once' → logprob: -13.000052452087402
    7. 'one' → logprob: -13.250052452087402
    8. '(' → logprob: -14.375052452087402
    9. '_line' → logprob: -14.625052452087402
    10. '```' → logprob: -14.750052452087402

Token 86: '_line' (ID: 14418)
  Prédit: '_line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_line' → logprob: -1.4259644558478612e-05
    2. 'line' → logprob: -11.375014305114746
    3. '_LINE' → logprob: -14.000014305114746
    4. '_input' → logprob: -14.625014305114746
    5. '_' → logprob: -14.875014305114746
    6. '_string' → logprob: -15.500014305114746
    7. 'Line' → logprob: -15.500014305114746
    8. ' line' → logprob: -15.500014305114746
    9. '_l' → logprob: -15.750014305114746
    10. '_lines' → logprob: -16.75001335144043

Token 87: '()),' (ID: 24379)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.45119649171829224
    2. '(),' → logprob: -2.0761964321136475
    3. '()' → logprob: -2.2011964321136475
    4. '())' → logprob: -2.5761964321136475
    5. ')' → logprob: -3.9511964321136475
    6. '()),' → logprob: -4.201196670532227
    7. '()))' → logprob: -4.826196670532227
    8. '('' → logprob: -5.826196670532227
    9. '())))' → logprob: -6.576196670532227
    10. '()(' → logprob: -7.451196670532227

Token 88: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.12019983679056168
    2. 'int' → logprob: -2.9951999187469482
    3. ' ' → logprob: -3.3701999187469482
    4. ' int' → logprob: -4.245199680328369
    5. '3' → logprob: -5.245199680328369
    6. 'fetch' → logprob: -6.120199680328369
    7. '1' → logprob: -6.245199680328369
    8. '10' → logprob: -6.370199680328369
    9. ' fetch' → logprob: -6.495199680328369
    10. '0' → logprob: -7.620199680328369

Token 89: '2' (ID: 17)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.29645588994026184
    2. '2' → logprob: -1.4214558601379395
    3. 'fetch' → logprob: -5.0464558601379395
    4. ' int' → logprob: -5.6714558601379395
    5. '1' → logprob: -6.2964558601379395
    6. ' ' → logprob: -6.5464558601379395
    7. '3' → logprob: -6.9214558601379395
    8. '0' → logprob: -7.9214558601379395
    9. '10' → logprob: -8.671456336975098
    10. '-' → logprob: -8.921456336975098

Token 90: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.3868953287601471
    2. ')' → logprob: -1.1368952989578247
    3. ')))' → logprob: -10.761895179748535
    4. '),' → logprob: -13.761895179748535
    5. '))
' → logprob: -14.886895179748535
    6. ' ))' → logprob: -14.886895179748535
    7. ' )' → logprob: -15.011895179748535
    8. ')>' → logprob: -15.761895179748535
    9. '())' → logprob: -15.886895179748535
    10. ')}' → logprob: -16.01189613342285


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 88
Tokens correctement prédits (1ère position, stricte): 43
Tokens correctement prédits (1ère position, avec adaptation): 44
Tokens correctement prédits (top 10): 67
Précision stricte (1ère position): 48.86%
Précision adaptée (1ère position): 50.00%
Précision (top 10): 76.14%
================================================================================
