================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:27:07
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N = int(input())
A = [int(e) for e in input().split()]
if len(A) == len(list(set(A))):
    print('YES')
else:
    print('NO')
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0005778160993941128
    2. '```' → logprob: -8.500577926635742
    3. ''' → logprob: -9.000577926635742
    4. '(N' → logprob: -9.375577926635742
    5. '`' → logprob: -9.625577926635742
    6. '('' → logprob: -10.125577926635742
    7. '("("' → logprob: -11.125577926635742
    8. ')' → logprob: -11.875577926635742
    9. '(
' → logprob: -12.250577926635742
    10. '\(' → logprob: -12.250577926635742

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2372170090675354
    2. ')' → logprob: -1.7372169494628906
    3. '()' → logprob: -3.4872169494628906
    4. '())' → logprob: -5.737216949462891
    5. '```' → logprob: -7.987216949462891
    6. '(
' → logprob: -8.23721694946289
    7. '`' → logprob: -9.61221694946289
    8. '(()' → logprob: -9.61221694946289
    9. '("("' → logprob: -9.61221694946289
    10. '")' → logprob: -9.73721694946289

Token 5: 'A' (ID: 32)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.31470787525177
    2. 'if' → logprob: -2.1897077560424805
    3. 'i' → logprob: -3.3147077560424805
    4. 'a' → logprob: -3.6897077560424805
    5. 's' → logprob: -3.9397077560424805
    6. 'x' → logprob: -4.3147077560424805
    7. '*' → logprob: -4.8147077560424805
    8. 'f' → logprob: -4.9397077560424805
    9. '`' → logprob: -4.9397077560424805
    10. ')' → logprob: -4.9397077560424805

Token 6: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0005507678724825382
    2. '\[' → logprob: -8.375551223754883
    3. '.' → logprob: -9.250551223754883
    4. '[]' → logprob: -9.500551223754883
    5. '+' → logprob: -10.375551223754883
    6. '[A' → logprob: -10.500551223754883
    7. '=' → logprob: -11.125551223754883
    8. '[i' → logprob: -11.125551223754883
    9. '[:]' → logprob: -11.250551223754883
    10. ')' → logprob: -12.000551223754883

Token 7: ' [' (ID: 723)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.4666319489479065
    2. ' list' → logprob: -1.4666318893432617
    3. '[]' → logprob: -2.5916318893432617
    4. ' []' → logprob: -3.2166318893432617
    5. ' [' → logprob: -4.716631889343262
    6. '[' → logprob: -4.841631889343262
    7. '[int' → logprob: -5.216631889343262
    8. '[input' → logprob: -5.966631889343262
    9. '[list' → logprob: -6.591631889343262
    10. 'input' → logprob: -7.466631889343262

Token 8: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.09355025738477707
    2. '0' → logprob: -2.468550205230713
    3. 'i' → logprob: -5.593550205230713
    4. '(int' → logprob: -7.968550205230713
    5. ')' → logprob: -8.218550682067871
    6. ']' → logprob: -9.468550682067871
    7. ']int' → logprob: -9.468550682067871
    8. ' int' → logprob: -10.593550682067871
    9. 'input' → logprob: -11.093550682067871
    10. '*' → logprob: -11.218550682067871

Token 9: '(e' (ID: 3454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.055078502744436264
    2. '(input' → logprob: -2.9300785064697266
    3. '(x' → logprob: -9.555078506469727
    4. '()' → logprob: -9.805078506469727
    5. '(user' → logprob: -11.305078506469727
    6. '(token' → logprob: -11.305078506469727
    7. ' (' → logprob: -11.930078506469727
    8. '(i' → logprob: -12.180078506469727
    9. ')' → logprob: -12.430078506469727
    10. '(
' → logprob: -12.680078506469727

Token 10: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.18680895864963531
    2. '())' → logprob: -2.1868090629577637
    3. '(' → logprob: -3.5618090629577637
    4. 'or' → logprob: -3.8118090629577637
    5. '(input' → logprob: -5.436809062957764
    6. ' )' → logprob: -6.186809062957764
    7. ')]' → logprob: -7.811809062957764
    8. '(x' → logprob: -8.561808586120605
    9. 'input' → logprob: -8.686808586120605
    10. '()' → logprob: -9.186808586120605

Token 11: ' for' (ID: 395)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -1.2246450185775757
    2. '(' → logprob: -1.3496450185775757
    3. ')' → logprob: -1.3496450185775757
    4. 'for' → logprob: -2.0996451377868652
    5. ' for' → logprob: -3.2246451377868652
    6. ')]' → logprob: -4.599645137786865
    7. '(x' → logprob: -5.224645137786865
    8. 'input' → logprob: -5.849645137786865
    9. ']' → logprob: -6.099645137786865
    10. ',' → logprob: -6.599645137786865

Token 12: ' e' (ID: 319)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.06145741045475006
    2. ' ' → logprob: -3.561457395553589
    3. 'input' → logprob: -3.686457395553589
    4. ' range' → logprob: -5.436457633972168
    5. ' e' → logprob: -7.436457633972168
    6. '<|end|>' → logprob: -8.061457633972168
    7. 'range' → logprob: -8.436457633972168
    8. '(input' → logprob: -8.561457633972168
    9. 'e' → logprob: -9.311457633972168
    10. ' in' → logprob: -9.436457633972168

Token 13: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.04333680123090744
    2. 'in' → logprob: -3.168336868286133
    3. 'e' → logprob: -9.293336868286133
    4. ' ' → logprob: -9.418336868286133
    5. '_' → logprob: -10.043336868286133
    6. 'n' → logprob: -10.918336868286133
    7. ')' → logprob: -11.293336868286133
    8. ' e' → logprob: -11.293336868286133
    9. '<|end|>' → logprob: -11.418336868286133
    10. '	in' → logprob: -11.793336868286133

Token 14: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.6934947371482849
    2. ' input' → logprob: -0.6934947371482849
    3. ' range' → logprob: -8.44349479675293
    4. 'range' → logprob: -8.94349479675293
    5. '(input' → logprob: -13.56849479675293
    6. ' ' → logprob: -15.94349479675293
    7. '=input' → logprob: -16.81849479675293
    8. ',input' → logprob: -17.44349479675293
    9. '<input' → logprob: -17.69349479675293
    10. '(' → logprob: -17.81849479675293

Token 15: '().' (ID: 1454)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.06943520903587341
    2. '()' → logprob: -2.8194351196289062
    3. '())' → logprob: -5.194435119628906
    4. '().' → logprob: -6.319435119628906
    5. '(' → logprob: -10.319435119628906
    6. ')]' → logprob: -10.944435119628906
    7. '()].' → logprob: -10.944435119628906
    8. '()],' → logprob: -12.194435119628906
    9. '()][' → logprob: -12.319435119628906
    10. ']' → logprob: -12.819435119628906

Token 16: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0003370118502061814
    2. 'strip' → logprob: -8.250336647033691
    3. 'rstrip' → logprob: -9.500336647033691
    4. ' split' → logprob: -14.125336647033691
    5. 'spl' → logprob: -16.375337600708008
    6. '(split' → logprob: -16.375337600708008
    7. 'replace' → logprob: -19.000337600708008
    8. ')' → logprob: -19.375337600708008
    9. 's' → logprob: -19.375337600708008
    10. 'sp' → logprob: -19.500337600708008

Token 17: '()]
' (ID: 67155)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.23511070013046265
    2. '())' → logprob: -1.7351107597351074
    3. '()' → logprob: -3.6101107597351074
    4. '(' → logprob: -5.610110759735107
    5. ')]' → logprob: -6.110110759735107
    6. ']' → logprob: -9.23511028289795
    7. ')' → logprob: -9.98511028289795
    8. '('' → logprob: -10.73511028289795
    9. '')]' → logprob: -11.11011028289795
    10. '()`' → logprob: -13.23511028289795

Token 18: 'if' (ID: 366)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.7986974716186523
    2. 'A' → logprob: -2.4236974716186523
    3. 'c' → logprob: -2.6736974716186523
    4. 'M' → logprob: -2.7986974716186523
    5. 'S' → logprob: -2.7986974716186523
    6. 'for' → logprob: -3.2986974716186523
    7. 'B' → logprob: -3.6736974716186523
    8. 'a' → logprob: -3.7986974716186523
    9. 'sum' → logprob: -3.9236974716186523
    10. 'm' → logprob: -4.048697471618652

Token 19: ' len' (ID: 4631)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.366719126701355
    2. ' N' → logprob: -1.991719126701355
    3. ' A' → logprob: -2.4917192459106445
    4. ' len' → logprob: -3.1167192459106445
    5. 'A' → logprob: -3.9917192459106445
    6. 'N' → logprob: -4.2417192459106445
    7. 'len' → logprob: -5.1167192459106445
    8. ' ' → logprob: -6.2417192459106445
    9. ''' → logprob: -6.9917192459106445
    10. '  ' → logprob: -7.2417192459106445

Token 20: '(A' (ID: 10706)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4742993116378784
    2. '(A' → logprob: -0.9742993116378784
    3. '(N' → logprob: -8.474299430847168
    4. '('' → logprob: -12.724299430847168
    5. '()' → logprob: -13.099299430847168
    6. '(`' → logprob: -13.599299430847168
    7. '("' → logprob: -13.724299430847168
    8. '(
' → logprob: -14.099299430847168
    9. '(S' → logprob: -14.099299430847168
    10. '(a' → logprob: -14.099299430847168

Token 21: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.017883941531181335
    2. ' ' → logprob: -4.767883777618408
    3. ' )' → logprob: -5.392883777618408
    4. '(' → logprob: -6.767883777618408
    5. '()' → logprob: -7.142883777618408
    6. '>' → logprob: -7.267883777618408
    7. '[' → logprob: -7.267883777618408
    8. ' <' → logprob: -7.892883777618408
    9. '<' → logprob: -8.142884254455566
    10. ' >' → logprob: -8.392884254455566

Token 22: ' ==' (ID: 951)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.845133900642395
    2. ' <' → logprob: -0.970133900642395
    3. ' ==' → logprob: -3.0951337814331055
    4. ' <=' → logprob: -3.2201337814331055
    5. '>' → logprob: -3.3451337814331055
    6. ' ' → logprob: -3.8451337814331055
    7. '[' → logprob: -4.0951337814331055
    8. ' >=' → logprob: -4.2201337814331055
    9. '<' → logprob: -4.4701337814331055
    10. ' !=' → logprob: -5.8451337814331055

Token 23: ' len' (ID: 4631)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.5634192824363708
    2. ' N' → logprob: -0.9384192824363708
    3. ' ' → logprob: -3.4384193420410156
    4. '0' → logprob: -5.313419342041016
    5. '2' → logprob: -6.563419342041016
    6. '1' → logprob: -7.438419342041016
    7. '3' → logprob: -8.688419342041016
    8. ' len' → logprob: -9.438419342041016
    9. 'len' → logprob: -9.813419342041016
    10. '4' → logprob: -10.313419342041016

Token 24: '(list' (ID: 13116)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2643481194972992
    2. '(set' → logprob: -1.7643481492996216
    3. '(A' → logprob: -2.889348030090332
    4. '(N' → logprob: -5.389348030090332
    5. '(S' → logprob: -7.889348030090332
    6. '(s' → logprob: -9.014348030090332
    7. '(B' → logprob: -9.264348030090332
    8. '({' → logprob: -9.389348030090332
    9. ' (' → logprob: -10.889348030090332
    10. '(
' → logprob: -11.139348030090332

Token 25: '(set' (ID: 25904)
  Prédit: '(set'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(set' → logprob: -0.2819671332836151
    2. '(' → logprob: -1.4069671630859375
    3. '(dict' → logprob: -7.5319671630859375
    4. '(A' → logprob: -8.406967163085938
    5. '(
' → logprob: -10.781967163085938
    6. '(s' → logprob: -11.156967163085938
    7. ')' → logprob: -12.281967163085938
    8. '({' → logprob: -12.906967163085938
    9. '(

' → logprob: -13.031967163085938
    10. 'set' → logprob: -13.156967163085938

Token 26: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.0007143391412682831
    2. '(' → logprob: -7.250714302062988
    3. ' (' → logprob: -13.500714302062988
    4. '(
' → logprob: -13.500714302062988
    5. 'A' → logprob: -13.750714302062988
    6. '(N' → logprob: -15.625714302062988
    7. ')' → logprob: -15.875714302062988
    8. '((' → logprob: -16.625715255737305
    9. ' A' → logprob: -16.875715255737305
    10. '(B' → logprob: -17.000715255737305

Token 27: '))' (ID: 915)
  Prédit: ')))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.4071747064590454
    2. '))' → logprob: -1.1571747064590454
    3. ')):' → logprob: -4.282174587249756
    4. '()))' → logprob: -5.782174587249756
    5. '())))' → logprob: -6.407174587249756
    6. ')' → logprob: -7.157174587249756
    7. '))))' → logprob: -7.907174587249756
    8. '()' → logprob: -8.782175064086914
    9. ' ' → logprob: -9.282175064086914
    10. ' ))' → logprob: -9.907175064086914

Token 28: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.007788678165525198
    2. ')' → logprob: -5.00778865814209
    3. ':' → logprob: -6.88278865814209
    4. ' ):' → logprob: -10.50778865814209
    5. '):
' → logprob: -12.50778865814209
    6. ''):' → logprob: -12.75778865814209
    7. ':)' → logprob: -13.00778865814209
    8. ',' → logprob: -13.75778865814209
    9. ' and' → logprob: -13.88278865814209
    10. '>' → logprob: -14.00778865814209

Token 29: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.06316226720809937
    2. ':
' → logprob: -4.438162326812744
    3. '\n' → logprob: -4.563162326812744
    4. '   ' → logprob: -4.688162326812744
    5. ' 
' → logprob: -4.938162326812744
    6. '    
' → logprob: -5.188162326812744
    7. '\' → logprob: -5.563162326812744
    8. ' ' → logprob: -6.188162326812744
    9. ' print' → logprob: -6.313162326812744
    10. '  
' → logprob: -6.438162326812744

Token 30: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.5763903260231018
    2. '\n' → logprob: -1.701390266418457
    3. '   ' → logprob: -2.576390266418457
    4. ' print' → logprob: -2.576390266418457
    5. ' 
' → logprob: -3.201390266418457
    6. '    
' → logprob: -3.326390266418457
    7. '
' → logprob: -4.576390266418457
    8. '\' → logprob: -5.951390266418457
    9. ' pass' → logprob: -5.951390266418457
    10. 'pass' → logprob: -5.951390266418457

Token 31: '('' (ID: 706)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01732032559812069
    2. '("' → logprob: -4.767320156097412
    3. '("("' → logprob: -5.267320156097412
    4. '('' → logprob: -5.767320156097412
    5. '(True' → logprob: -8.51732063293457
    6. '("(' → logprob: -9.64232063293457
    7. '(len' → logprob: -9.89232063293457
    8. '()' → logprob: -10.76732063293457
    9. '(A' → logprob: -11.51732063293457
    10. '("")' → logprob: -11.51732063293457

Token 32: 'YES' (ID: 31958)
  Prédit: 'Yes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.5982218384742737
    2. 'YES' → logprob: -0.9732218384742737
    3. 'Unique' → logprob: -2.848221778869629
    4. 'unique' → logprob: -4.973221778869629
    5. 'yes' → logprob: -5.098221778869629
    6. 'Y' → logprob: -7.723221778869629
    7. 'True' → logprob: -8.348221778869629
    8. 'No' → logprob: -8.848221778869629
    9. 'NO' → logprob: -8.848221778869629
    10. '1' → logprob: -9.598221778869629

Token 33: '')
' (ID: 2515)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.011219236068427563
    2. ')' → logprob: -4.511219024658203
    3. '')
' → logprob: -8.761219024658203
    4. '')
' → logprob: -11.761219024658203
    5. '")' → logprob: -12.261219024658203
    6. ''' → logprob: -14.261219024658203
    7. ')
' → logprob: -14.636219024658203
    8. '')

' → logprob: -15.761219024658203
    9. 'else' → logprob: -16.011219024658203
    10. '()' → logprob: -16.011219024658203

Token 34: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.03816232457756996
    2. ' else' → logprob: -3.2881622314453125
    3. '
' → logprob: -10.538162231445312
    4. '```' → logprob: -10.663162231445312
    5. '<|end|>' → logprob: -10.788162231445312
    6. 'elif' → logprob: -11.538162231445312
    7. '	else' → logprob: -11.913162231445312
    8. '_else' → logprob: -11.913162231445312
    9. 'el' → logprob: -12.413162231445312
    10. '    
' → logprob: -12.538162231445312

Token 35: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.8074162653647363e-05
    2. ' :' → logprob: -11.250018119812012
    3. ':
' → logprob: -12.375018119812012
    4. '():' → logprob: -15.000018119812012
    5. '):' → logprob: -15.375018119812012
    6. '   ' → logprob: -16.375017166137695
    7. ':return' → logprob: -16.500017166137695
    8. '：' → logprob: -16.625017166137695
    9. ':**' → logprob: -17.125017166137695
    10. ':def' → logprob: -18.125017166137695

Token 36: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0160882156342268
    2. ' print' → logprob: -4.266088008880615
    3. 'print' → logprob: -7.391088008880615
    4. ''' → logprob: -7.516088008880615
    5. ' ' → logprob: -8.016088485717773
    6. '    ' → logprob: -8.641088485717773
    7. '<|end|>' → logprob: -9.016088485717773
    8. '```' → logprob: -10.516088485717773
    9. '  ' → logprob: -10.641088485717773
    10. '    
' → logprob: -10.766088485717773

Token 37: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.5800022482872009
    2. 'print' (adapté à ' print') → logprob: -0.8300022482872009
    3. '   ' → logprob: -5.580002307891846
    4. ''' → logprob: -8.955001831054688
    5. '```' → logprob: -9.455001831054688
    6. '`' → logprob: -11.080001831054688
    7. '    ' → logprob: -11.455001831054688
    8. '	print' → logprob: -11.455001831054688
    9. '(print' → logprob: -11.455001831054688
    10. ' ' → logprob: -11.955001831054688

Token 38: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.31329116225242615
    2. '(' → logprob: -1.3132911920547485
    3. '('(' → logprob: -11.063291549682617
    4. '("' → logprob: -11.813291549682617
    5. '()' → logprob: -13.188291549682617
    6. '(
' → logprob: -13.813291549682617
    7. '(False' → logprob: -14.313291549682617
    8. '(None' → logprob: -14.688291549682617
    9. '(('' → logprob: -14.938291549682617
    10. '(\'' → logprob: -15.063291549682617

Token 39: 'NO' (ID: 14695)
  Prédit: 'NO'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'NO' → logprob: -0.029757894575595856
    2. ''' → logprob: -3.5297579765319824
    3. ''N' → logprob: -11.904757499694824
    4. ' NO' → logprob: -14.654757499694824
    5. 'N' → logprob: -15.279757499694824
    6. '')' → logprob: -17.02975845336914
    7. 'No' → logprob: -17.65475845336914
    8. '(NO' → logprob: -18.90475845336914
    9. '_NO' → logprob: -19.27975845336914
    10. '"' → logprob: -19.40475845336914

Token 40: '')' (ID: 1542)
  Prédit: '')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.47409921884536743
    2. ')' → logprob: -0.9740992188453674
    3. ''' → logprob: -10.974099159240723
    4. ')'' → logprob: -13.099099159240723
    5. '")' → logprob: -13.224099159240723
    6. '`)' → logprob: -14.349099159240723
    7. '')
' → logprob: -15.599099159240723
    8. '```' → logprob: -15.849099159240723
    9. '}')' → logprob: -16.34910011291504
    10. ')`' → logprob: -17.22410011291504


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 38
Tokens correctement prédits (1ère position, stricte): 13
Tokens correctement prédits (1ère position, avec adaptation): 14
Tokens correctement prédits (top 10): 30
Précision stricte (1ère position): 34.21%
Précision adaptée (1ère position): 36.84%
Précision (top 10): 78.95%
================================================================================
