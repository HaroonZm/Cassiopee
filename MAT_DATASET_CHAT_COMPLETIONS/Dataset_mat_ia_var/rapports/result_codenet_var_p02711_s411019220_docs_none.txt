================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:18:14
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys
import math

n = int(input())

if n % 10 == 7:
    print("Yes")
    sys.exit()
n -= n % 10
n /= 10
if n % 10 == 7:
    print("Yes")
    sys.exit()
n -= n % 10
n /= 10
if n == 7:
    print("Yes")
    sys.exit()
print("No")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '
' (ID: 198)
  → Token d'amorce (pas de prédiction)

Token 3: 'import' (ID: 561)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.2973678708076477
    2. '\n' → logprob: -1.547367811203003
    3. '<|end|>' → logprob: -3.797367811203003
    4. '\' → logprob: -4.922368049621582
    5. 'newline' → logprob: -5.672368049621582
    6. 'import' → logprob: -5.672368049621582
    7. '<|end|>' → logprob: -6.047368049621582
    8. '
' → logprob: -6.922368049621582
    9. '```' → logprob: -6.922368049621582
    10. '' → logprob: -7.547368049621582

Token 4: ' math' (ID: 13324)
  Prédit: ' os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' os' → logprob: -0.0006277294596657157
    2. 'os' → logprob: -7.375627517700195
    3. ' math' → logprob: -14.500627517700195
    4. ' re' → logprob: -15.375627517700195
    5. '"os' → logprob: -15.625627517700195
    6. ' json' → logprob: -16.125627517700195
    7. '_os' → logprob: -17.000627517700195
    8. '	os' → logprob: -17.625627517700195
    9. ' io' → logprob: -18.125627517700195
    10. ' argparse' → logprob: -18.250627517700195

Token 5: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.2897878587245941
    2. 'import' → logprob: -2.539787769317627
    3. '\n' → logprob: -2.664787769317627
    4. '\' → logprob: -3.164787769317627
    5. '```' → logprob: -3.914787769317627
    6. '
' → logprob: -4.039787769317627
    7. '<|end|>' → logprob: -4.664787769317627
    8. ',' → logprob: -5.289787769317627
    9. '

' → logprob: -5.664787769317627
    10. '<|end|>' → logprob: -6.914787769317627

Token 6: 'n' (ID: 77)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -1.0550756454467773
    2. '\' → logprob: -1.4300756454467773
    3. 'import' → logprob: -2.1800756454467773
    4. '\n' → logprob: -2.1800756454467773
    5. '```' → logprob: -2.4300756454467773
    6. 'def' → logprob: -3.4300756454467773
    7. '
' → logprob: -4.180075645446777
    8. ',' → logprob: -4.680075645446777
    9. '`' → logprob: -4.930075645446777
    10. '*' → logprob: -4.930075645446777

Token 7: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.7573104500770569
    2. ' ' → logprob: -1.507310390472412
    3. '=' → logprob: -1.757310390472412
    4. '.' → logprob: -2.132310390472412
    5. '_' → logprob: -4.507310390472412
    6. ')' → logprob: -5.757310390472412
    7. ',' → logprob: -6.007310390472412
    8. '  ' → logprob: -7.382310390472412
    9. ' )' → logprob: -8.75731086730957
    10. '<|end|>' → logprob: -8.88231086730957

Token 8: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.017967069521546364
    2. ' ' → logprob: -4.267967224121094
    3. 'int' → logprob: -5.642967224121094
    4. ' input' → logprob: -9.017967224121094
    5. '10' → logprob: -9.892967224121094
    6. '5' → logprob: -11.142967224121094
    7. '0' → logprob: -11.142967224121094
    8. ' len' → logprob: -11.392967224121094
    9. '20' → logprob: -11.892967224121094
    10. '1' → logprob: -12.017967224121094

Token 9: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -5.037835580878891e-05
    2. '(n' → logprob: -11.25005054473877
    3. '(sys' → logprob: -11.37505054473877
    4. '('' → logprob: -11.87505054473877
    5. ' (' → logprob: -12.37505054473877
    6. '(`' → logprob: -12.75005054473877
    7. '(input' → logprob: -12.75005054473877
    8. '()' → logprob: -13.12505054473877
    9. '(
' → logprob: -13.25005054473877
    10. '("("' → logprob: -13.87505054473877

Token 10: '())

' (ID: 27654)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4673023521900177
    2. '()' → logprob: -1.3423023223876953
    3. ')' → logprob: -2.3423023223876953
    4. '())' → logprob: -4.217302322387695
    5. '('' → logprob: -7.592302322387695
    6. '(
' → logprob: -8.467302322387695
    7. '))' → logprob: -8.842302322387695
    8. '(

' → logprob: -9.842302322387695
    9. '(()' → logprob: -10.092302322387695
    10. '("("' → logprob: -10.342302322387695

Token 11: 'if' (ID: 366)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.08938270062208176
    2. 'if' → logprob: -3.4643826484680176
    3. 'result' → logprob: -3.8393826484680176
    4. 's' → logprob: -3.9643826484680176
    5. 'f' → logprob: -5.714382648468018
    6. 'factor' → logprob: -5.714382648468018
    7. 'total' → logprob: -6.339382648468018
    8. 'x' → logprob: -7.214382648468018
    9. 'sum' → logprob: -7.214382648468018
    10. 'a' → logprob: -7.339382648468018

Token 12: ' n' (ID: 297)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3507998585700989
    2. ' n' → logprob: -1.225799798965454
    3. 'n' → logprob: -6.600800037384033
    4. ' ' → logprob: -7.100800037384033
    5. ' not' → logprob: -9.975799560546875
    6. '  ' → logprob: -10.475799560546875
    7. ' a' → logprob: -11.350799560546875
    8. ''' → logprob: -11.600799560546875
    9. ' (' → logprob: -11.600799560546875
    10. '_' → logprob: -11.725799560546875

Token 13: ' %' (ID: 1851)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.074156753718853
    2. '>' → logprob: -3.6991567611694336
    3. ' <' → logprob: -3.9491567611694336
    4. ' ' → logprob: -4.074156761169434
    5. ' >=' → logprob: -5.699156761169434
    6. ' %' → logprob: -5.949156761169434
    7. ' <=' → logprob: -6.074156761169434
    8. ' ==' → logprob: -6.949156761169434
    9. '%' → logprob: -8.074156761169434
    10. '<' → logprob: -8.074156761169434

Token 14: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.22551926970481873
    2. '2' → logprob: -1.6005192995071411
    3. '3' → logprob: -9.725519180297852
    4. '1' → logprob: -10.600519180297852
    5. '4' → logprob: -11.850519180297852
    6. '```' → logprob: -12.225519180297852
    7. ' ```' → logprob: -12.850519180297852
    8. '0' → logprob: -13.350519180297852
    9. ' ' → logprob: -13.975519180297852
    10. '5' → logprob: -13.975519180297852

Token 15: '10' (ID: 702)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.00013762809976469725
    2. '3' → logprob: -9.250137329101562
    3. ' ' → logprob: -10.500137329101562
    4. '1' → logprob: -12.000137329101562
    5. '4' → logprob: -12.375137329101562
    6. '5' → logprob: -13.375137329101562
    7. '10' → logprob: -13.750137329101562
    8. '```' → logprob: -15.000137329101562
    9. '7' → logprob: -15.250137329101562
    10. '6' → logprob: -16.125137329101562

Token 16: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.28988581895828247
    2. '==' → logprob: -1.5398857593536377
    3. ' !=' → logprob: -3.4148857593536377
    4. '!=' → logprob: -5.664885997772217
    5. '>' → logprob: -8.039885520935059
    6. '=' → logprob: -8.164885520935059
    7. ' ' → logprob: -9.164885520935059
    8. ':' → logprob: -9.539885520935059
    9. ')' → logprob: -10.039885520935059
    10. ' >' → logprob: -10.164885520935059

Token 17: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.42876580357551575
    2. ' ' → logprob: -1.0537657737731934
    3. '5' → logprob: -10.928766250610352
    4. '2' → logprob: -11.053766250610352
    5. '1' → logprob: -11.303766250610352
    6. '7' → logprob: -12.053766250610352
    7. '4' → logprob: -12.428766250610352
    8. '9' → logprob: -12.678766250610352
    9. '6' → logprob: -13.553766250610352
    10. '3' → logprob: -13.803766250610352

Token 18: '7' (ID: 22)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0026244083419442177
    2. '5' → logprob: -7.50262451171875
    3. '1' → logprob: -7.62762451171875
    4. '2' → logprob: -7.62762451171875
    5. ' ' → logprob: -7.62762451171875
    6. '7' → logprob: -8.00262451171875
    7. '3' → logprob: -8.62762451171875
    8. '4' → logprob: -9.87762451171875
    9. '9' → logprob: -10.50262451171875
    10. '6' → logprob: -12.12762451171875

Token 19: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00012535012501757592
    2. ' :' → logprob: -9.00012493133545
    3. ':**' → logprob: -13.75012493133545
    4. ':
' → logprob: -14.37512493133545
    5. ':return' → logprob: -16.875125885009766
    6. '):' → logprob: -17.000125885009766
    7. ' and' → logprob: -17.125125885009766
    8. '>:' → logprob: -17.875125885009766
    9. ':`' → logprob: -19.125125885009766
    10. ':def' → logprob: -19.125125885009766

Token 20: '   ' (ID: 271)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.06432435661554337
    2. 'print' → logprob: -2.939324378967285
    3. ':' → logprob: -4.814324378967285
    4. ':
' → logprob: -7.564324378967285
    5. '	print' → logprob: -8.189324378967285
    6. '   ' → logprob: -8.939324378967285
    7. ' :
' → logprob: -9.564324378967285
    8. ' ' → logprob: -9.814324378967285
    9. '
' → logprob: -9.939324378967285
    10. '.print' → logprob: -9.939324378967285

Token 21: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.07066180557012558
    2. 'print' (adapté à ' print') → logprob: -2.695661783218384
    3. '   ' → logprob: -7.320662021636963
    4. '    ' → logprob: -10.945661544799805
    5. ' 
' → logprob: -11.320661544799805
    6. ' ' → logprob: -11.320661544799805
    7. ' sys' → logprob: -12.320661544799805
    8. '```' → logprob: -12.570661544799805
    9. ' pass' → logprob: -12.820661544799805
    10. '\n' → logprob: -13.070661544799805

Token 22: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.24447284638881683
    2. '("' → logprob: -1.869472861289978
    3. '(n' → logprob: -2.8694727420806885
    4. '('' → logprob: -5.494472980499268
    5. '()' → logprob: -7.494472980499268
    6. '("")' → logprob: -7.869472980499268
    7. '("("' → logprob: -7.869472980499268
    8. '(True' → logprob: -8.11947250366211
    9. '(-' → logprob: -10.11947250366211
    10. '(":' → logprob: -10.24447250366211

Token 23: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.607177734375
    2. '"' → logprob: -1.857177734375
    3. 'YES' → logprob: -1.982177734375
    4. 'BO' → logprob: -3.107177734375
    5. 'True' → logprob: -3.357177734375
    6. 'Boom' → logprob: -3.857177734375
    7. 'Special' → logprob: -4.482177734375
    8. 'l' → logprob: -4.732177734375
    9. 'yes' → logprob: -5.982177734375
    10. 'CY' → logprob: -5.982177734375

Token 24: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.003491858020424843
    2. '")
' → logprob: -6.2534918785095215
    3. ')' → logprob: -7.1284918785095215
    4. '!")' → logprob: -7.3784918785095215
    5. ')")' → logprob: -9.128491401672363
    6. '"' → logprob: -11.128491401672363
    7. '.")' → logprob: -12.878491401672363
    8. '")
' → logprob: -13.003491401672363
    9. ')
' → logprob: -13.378491401672363
    10. ' ")' → logprob: -13.878491401672363

Token 25: '   ' (ID: 271)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.06152254343032837
    2. 'elif' → logprob: -2.9365224838256836
    3. ' else' → logprob: -5.061522483825684
    4. ' elif' → logprob: -8.811522483825684
    5. '<|end|>' → logprob: -9.186522483825684
    6. ')' → logprob: -11.311522483825684
    7. '```' → logprob: -11.936522483825684
    8. '<|end|>' → logprob: -13.186522483825684
    9. ' ' → logprob: -13.311522483825684
    10. 'elser' → logprob: -13.436522483825684

Token 26: ' sys' (ID: 12228)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.3622756600379944
    2. 'else' → logprob: -1.2372756004333496
    3. '<|end|>' → logprob: -5.36227560043335
    4. ')' → logprob: -5.61227560043335
    5. ' else' → logprob: -6.61227560043335
    6. '
' → logprob: -6.61227560043335
    7. ' elif' → logprob: -7.11227560043335
    8. '\n' → logprob: -7.36227560043335
    9. '```' → logprob: -7.86227560043335
    10. '   ' → logprob: -8.487276077270508

Token 27: '.exit' (ID: 27076)
  Prédit: '.exit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.exit' → logprob: -0.018158255144953728
    2. '.' → logprob: -4.018158435821533
    3. '.stdout' → logprob: -13.018157958984375
    4. ' .' → logprob: -13.268157958984375
    5. '.quit' → logprob: -13.768157958984375
    6. '.ex' → logprob: -13.768157958984375
    7. ' exit' → logprob: -14.518157958984375
    8. '.Exit' → logprob: -14.768157958984375
    9. '.stderr' → logprob: -14.768157958984375
    10. 'exit' → logprob: -15.018157958984375

Token 28: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00044556602369993925
    2. '(' → logprob: -7.750445365905762
    3. '()
' → logprob: -12.125445365905762
    4. '()`' → logprob: -12.625445365905762
    5. '`()' → logprob: -12.625445365905762
    6. '())' → logprob: -13.875445365905762
    7. '()

' → logprob: -14.750445365905762
    8. '()(' → logprob: -14.875445365905762
    9. '(()' → logprob: -15.750445365905762
    10. '()]' → logprob: -16.000446319580078

Token 29: 'n' (ID: 77)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.25667431950569153
    2. 'elif' → logprob: -1.5066742897033691
    3. 'for' → logprob: -6.131674289703369
    4. '```' → logprob: -7.131674289703369
    5. 'else' → logprob: -7.881674289703369
    6. '7' → logprob: -8.131674766540527
    7. 'print' → logprob: -8.131674766540527
    8. ' if' → logprob: -8.506674766540527
    9. '    
' → logprob: -9.006674766540527
    10. '
' → logprob: -9.131674766540527

Token 30: ' -=' (ID: 12583)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '%' → logprob: -0.06273221224546432
    2. ' %' → logprob: -2.812732219696045
    3. ' ' → logprob: -7.312732219696045
    4. ' %=' → logprob: -10.562731742858887
    5. '```' → logprob: -11.562731742858887
    6. ' %
' → logprob: -11.687731742858887
    7. '%
' → logprob: -11.937731742858887
    8. '=' → logprob: -12.312731742858887
    9. ')' → logprob: -12.312731742858887
    10. '7' → logprob: -12.437731742858887

Token 31: ' n' (ID: 297)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.44429266452789307
    2. '7' → logprob: -1.069292664527893
    3. '17' → logprob: -4.5692925453186035
    4. ' ' → logprob: -5.4442925453186035
    5. '10' → logprob: -7.5692925453186035
    6. '2' → logprob: -9.944293022155762
    7. '8' → logprob: -10.319293022155762
    8. '   ' → logprob: -10.444293022155762
    9. '3' → logprob: -10.944293022155762
    10. '70' → logprob: -11.069293022155762

Token 32: ' %' (ID: 1851)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.30103862285614014
    2. ' ' → logprob: -1.4260386228561401
    3. '0' → logprob: -4.30103874206543
    4. '7' → logprob: -5.42603874206543
    5. '+' → logprob: -7.80103874206543
    6. '2' → logprob: -7.92603874206543
    7. '10' → logprob: -9.17603874206543
    8. '>' → logprob: -9.17603874206543
    9. ' n' → logprob: -9.55103874206543
    10. '/' → logprob: -9.80103874206543

Token 33: ' ' (ID: 220)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.0392460972070694
    2. ' ' → logprob: -3.289246082305908
    3. '100' → logprob: -6.789246082305908
    4. '20' → logprob: -9.914246559143066
    5. '7' → logprob: -11.414246559143066
    6. '1' → logprob: -11.789246559143066
    7. '  ' → logprob: -12.539246559143066
    8. '```' → logprob: -13.414246559143066
    9. '60' → logprob: -14.039246559143066
    10. ' ' → logprob: -14.664246559143066

Token 34: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.010116794146597385
    2. '7' → logprob: -5.0101165771484375
    3. '100' → logprob: -6.0101165771484375
    4. '20' → logprob: -7.6351165771484375
    5. ' ' → logprob: -9.010116577148438
    6. '2' → logprob: -9.510116577148438
    7. '``' → logprob: -10.385116577148438
    8. '

' → logprob: -10.510116577148438
    9. '1' → logprob: -10.510116577148438
    10. '50' → logprob: -10.635116577148438

Token 35: '
' (ID: 198)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.8029287457466125
    2. '
' → logprob: -1.5529286861419678
    3. '<|end|>' → logprob: -2.0529286861419678
    4. '  
' → logprob: -3.0529286861419678
    5. '\n' → logprob: -3.4279286861419678
    6. ' 
' → logprob: -3.5529286861419678
    7. '```' → logprob: -3.8029286861419678
    8. ' ' → logprob: -4.052928924560547
    9. '1' → logprob: -4.302928924560547
    10. '2' → logprob: -4.802928924560547

Token 36: 'n' (ID: 77)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.08932459354400635
    2. 'for' → logprob: -3.214324474334717
    3. 'if' → logprob: -3.214324474334717
    4. ' while' → logprob: -5.839324474334717
    5. '7' → logprob: -6.339324474334717
    6. ' for' → logprob: -8.589324951171875
    7. '10' → logprob: -9.714324951171875
    8. '0' → logprob: -10.464324951171875
    9. ' if' → logprob: -10.714324951171875
    10. '```' → logprob: -10.839324951171875

Token 37: ' /=' (ID: 37808)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7475795149803162
    2. '0' → logprob: -1.122579574584961
    3. '<|end|>' → logprob: -2.622579574584961
    4. '10' → logprob: -2.747579574584961
    5. ' >=' → logprob: -3.872579574584961
    6. ' >' → logprob: -4.372579574584961
    7. '7' → logprob: -5.247579574584961
    8. ' ==' → logprob: -5.372579574584961
    9. '>' → logprob: -5.622579574584961
    10. '-' → logprob: -5.872579574584961

Token 38: ' ' (ID: 220)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.0028349461499601603
    2. ' ' → logprob: -6.002834796905518
    3. '7' → logprob: -8.127835273742676
    4. '1' → logprob: -10.252835273742676
    5. '2' → logprob: -10.627835273742676
    6. '100' → logprob: -13.627835273742676
    7. '3' → logprob: -14.627835273742676
    8. '20' → logprob: -14.752835273742676
    9. '17' → logprob: -14.752835273742676
    10. ' ' → logprob: -14.752835273742676

Token 39: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -8.435139898210764e-05
    2. '7' → logprob: -10.000083923339844
    3. '2' → logprob: -10.875083923339844
    4. ' ' → logprob: -11.000083923339844
    5. '1' → logprob: -13.500083923339844
    6. '```' → logprob: -14.125083923339844
    7. '100' → logprob: -15.000083923339844
    8. '3' → logprob: -15.875083923339844
    9. '`' → logprob: -16.375083923339844
    10. '17' → logprob: -16.562583923339844

Token 40: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 41: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0666256844997406
    2. ' if' → logprob: -3.5666255950927734
    3. '<|end|>' → logprob: -3.6916255950927734
    4. '```' → logprob: -5.941625595092773
    5. 'while' → logprob: -6.191625595092773
    6. ' ' → logprob: -6.691625595092773
    7. '0' → logprob: -6.816625595092773
    8. '
' → logprob: -7.191625595092773
    9. '7' → logprob: -7.441625595092773
    10. 'for' → logprob: -7.566625595092773

Token 42: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.017043430358171463
    2. 'n' → logprob: -4.142043590545654
    3. ' ' → logprob: -7.392043590545654
    4. '7' → logprob: -8.642043113708496
    5. ' (' → logprob: -8.767043113708496
    6. '(n' → logprob: -11.017043113708496
    7. '10' → logprob: -11.892043113708496
    8. '(' → logprob: -12.017043113708496
    9. ' any' → logprob: -12.392043113708496
    10. ' math' → logprob: -12.642043113708496

Token 43: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.018346363678574562
    2. '%' → logprob: -4.018346309661865
    3. ' ' → logprob: -9.143346786499023
    4. '7' → logprob: -10.768346786499023
    5. '>' → logprob: -10.893346786499023
    6. ' ==' → logprob: -11.018346786499023
    7. ' >' → logprob: -11.643346786499023
    8. '==' → logprob: -12.143346786499023
    9. '   ' → logprob: -12.893346786499023
    10. ' ' → logprob: -13.143346786499023

Token 44: ' ' (ID: 220)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.23995865881443024
    2. ' ' → logprob: -1.614958643913269
    3. '7' → logprob: -4.239958763122559
    4. '1' → logprob: -11.489958763122559
    5. ' ' → logprob: -12.364958763122559
    6. '  ' → logprob: -12.864958763122559
    7. '17' → logprob: -12.989958763122559
    8. '```' → logprob: -13.489958763122559
    9. '100' → logprob: -13.552458763122559
    10. '<|end|>' → logprob: -13.614958763122559

Token 45: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.016263447701931
    2. '7' → logprob: -4.766263484954834
    3. ' ' → logprob: -4.891263484954834
    4. '1' → logprob: -9.891263008117676
    5. '17' → logprob: -10.891263008117676
    6. '100' → logprob: -11.516263008117676
    7. '```' → logprob: -11.891263008117676
    8. '  ' → logprob: -12.578763008117676
    9. '   ' → logprob: -12.703763008117676
    10. '``' → logprob: -13.328763008117676

Token 46: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.10032959282398224
    2. '==' → logprob: -2.350329637527466
    3. ' ' → logprob: -9.350329399108887
    4. '=' → logprob: -10.725329399108887
    5. '7' → logprob: -12.475329399108887
    6. ' ' → logprob: -13.350329399108887
    7. 's' → logprob: -13.600329399108887
    8. ' =' → logprob: -13.975329399108887
    9. '==
' → logprob: -14.225329399108887
    10. '===' → logprob: -14.350329399108887

Token 47: ' ' (ID: 220)
  Prédit: '7'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -0.3132691979408264
    2. ' ' → logprob: -1.3132691383361816
    3. ' ' → logprob: -13.18826961517334
    4. '  ' → logprob: -13.37576961517334
    5. '   ' → logprob: -13.93826961517334
    6. '0' → logprob: -14.12576961517334
    7. '3' → logprob: -15.00076961517334
    8. '1' → logprob: -15.43826961517334
    9. '۷' → logprob: -15.75076961517334
    10. '<|end|>' → logprob: -15.81326961517334

Token 48: '7' (ID: 22)
  Prédit: '7'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -0.00014120421838015318
    2. ' ' → logprob: -8.875141143798828
    3. '۷' → logprob: -15.625141143798828
    4. '0' → logprob: -15.812641143798828
    5. '٧' → logprob: -15.875141143798828
    6. '७' → logprob: -16.000141143798828
    7. '.' → logprob: -16.125141143798828
    8. '৭' → logprob: -16.187641143798828
    9. '   ' → logprob: -16.437641143798828
    10. '' → logprob: -16.625141143798828

Token 49: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.002522865077480674
    2. ':
' → logprob: -6.002522945404053
    3. ' :' → logprob: -10.127522468566895
    4. '   ' → logprob: -12.877522468566895
    5. ' :
' → logprob: -12.877522468566895
    6. ' or' → logprob: -15.002522468566895
    7. '):' → logprob: -15.002522468566895
    8. ':

' → logprob: -15.127522468566895
    9. ':**' → logprob: -15.252522468566895
    10. '==' → logprob: -15.377522468566895

Token 50: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0014522596029564738
    2. '<|end|>' → logprob: -7.001452445983887
    3. '```' → logprob: -8.876452445983887
    4. '    ' → logprob: -9.126452445983887
    5. ' ' → logprob: -9.251452445983887
    6. '    
' → logprob: -10.001452445983887
    7. 'print' → logprob: -10.001452445983887
    8. '  ' → logprob: -10.626452445983887
    9. '       ' → logprob: -11.126452445983887
    10. '``' → logprob: -11.501452445983887

Token 51: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.3613135516643524
    2. '   ' → logprob: -1.7363135814666748
    3. 'print' (adapté à ' print') → logprob: -2.111313581466675
    4. ' ' → logprob: -5.486313343048096
    5. '    ' → logprob: -6.736313343048096
    6. '	print' → logprob: -8.236313819885254
    7. '<|end|>' → logprob: -9.236313819885254
    8. ' ' → logprob: -9.611313819885254
    9. '       ' → logprob: -9.611313819885254
    10. '```' → logprob: -9.736313819885254

Token 52: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.011051470413804054
    2. '(' → logprob: -4.511051654815674
    3. '('' → logprob: -13.386051177978516
    4. '("("' → logprob: -13.511051177978516
    5. '("")' → logprob: -15.636051177978516
    6. '()' → logprob: -15.761051177978516
    7. '("""' → logprob: -16.511051177978516
    8. ' ("' → logprob: -16.761051177978516
    9. '"' → logprob: -17.011051177978516
    10. '(True' → logprob: -17.136051177978516

Token 53: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.1358213871717453
    2. '"' → logprob: -2.7608213424682617
    3. '("' → logprob: -2.7608213424682617
    4. '(' → logprob: -8.135821342468262
    5. '“Yes' → logprob: -10.010821342468262
    6. ' Yes' → logprob: -10.135821342468262
    7. '('' → logprob: -10.635821342468262
    8. 'No' → logprob: -10.635821342468262
    9. '")' → logprob: -10.885821342468262
    10. '"No' → logprob: -11.010821342468262

Token 54: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.07901415973901749
    2. '")
' → logprob: -2.5790140628814697
    3. '   ' → logprob: -9.45401382446289
    4. ')' → logprob: -10.70401382446289
    5. ')
' → logprob: -11.57901382446289
    6. '")
' → logprob: -11.70401382446289
    7. '"' → logprob: -12.70401382446289
    8. '```' → logprob: -14.20401382446289
    9. ' ")' → logprob: -14.57901382446289
    10. ' ")
' → logprob: -15.32901382446289

Token 55: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03490395471453667
    2. '<|end|>' → logprob: -3.4099040031433105
    3. '```' → logprob: -7.4099040031433105
    4. ')' → logprob: -7.9099040031433105
    5. ' ' → logprob: -9.659903526306152
    6. '
' → logprob: -9.784903526306152
    7. '<|end|>' → logprob: -9.909903526306152
    8. '  ' → logprob: -10.159903526306152
    9. '    
' → logprob: -10.784903526306152
    10. '    ' → logprob: -11.284903526306152

Token 56: ' sys' (ID: 12228)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0002478694950696081
    2. '<|end|>' → logprob: -8.375247955322266
    3. ')' → logprob: -12.125247955322266
    4. '```' → logprob: -12.625247955322266
    5. '    
' → logprob: -13.125247955322266
    6. '       ' → logprob: -13.250247955322266
    7. '  ' → logprob: -14.000247955322266
    8. ' ' → logprob: -14.125247955322266
    9. '    ' → logprob: -14.125247955322266
    10. '<|end|>' → logprob: -14.125247955322266

Token 57: '.exit' (ID: 27076)
  Prédit: '.exit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.exit' → logprob: -0.5235265493392944
    2. '.' → logprob: -0.8985265493392944
    3. '.stdout' → logprob: -9.398526191711426
    4. '.quit' → logprob: -9.648526191711426
    5. ' .' → logprob: -9.773526191711426
    6. '.setdefault' → logprob: -10.523526191711426
    7. '.stderr' → logprob: -11.148526191711426
    8. '.argv' → logprob: -11.148526191711426
    9. '.EXIT' → logprob: -11.398526191711426
    10. '.readline' → logprob: -11.523526191711426

Token 58: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0015241486253216863
    2. '(' → logprob: -6.501523971557617
    3. '()
' → logprob: -11.126523971557617
    4. '()

' → logprob: -13.376523971557617
    5. '()`' → logprob: -13.751523971557617
    6. '`()' → logprob: -14.126523971557617
    7. '()<' → logprob: -14.376523971557617
    8. ' ()' → logprob: -14.626523971557617
    9. '```' → logprob: -14.626523971557617
    10. '(
' → logprob: -15.001523971557617

Token 59: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.0012186899548396468
    2. '\n' → logprob: -7.376218795776367
    3. ' 
' → logprob: -8.001218795776367
    4. '```' → logprob: -9.251218795776367
    5. '  
' → logprob: -9.501218795776367
    6. '    
' → logprob: -11.251218795776367
    7. '\' → logprob: -11.376218795776367
    8. '
' → logprob: -11.626218795776367
    9. '   ' → logprob: -11.876218795776367
    10. ' ' → logprob: -11.876218795776367

Token 60: ' -=' (ID: 12583)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7059479355812073
    2. ' -=' → logprob: -1.5809478759765625
    3. ' =' → logprob: -2.4559478759765625
    4. '<|end|>' → logprob: -2.5809478759765625
    5. '=' → logprob: -2.8309478759765625
    6. ' /=' → logprob: -3.5809478759765625
    7. '%' → logprob: -3.8309478759765625
    8. ' %=' → logprob: -4.2059478759765625
    9. ' %' → logprob: -5.0809478759765625
    10. '-' → logprob: -6.0809478759765625

Token 61: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.4740896224975586
    2. ' n' → logprob: -0.9740896224975586
    3. 'int' → logprob: -12.974089622497559
    4. '7' → logprob: -12.974089622497559
    5. ' ' → logprob: -13.099089622497559
    6. '(n' → logprob: -13.349089622497559
    7. '1' → logprob: -13.724089622497559
    8. '10' → logprob: -13.849089622497559
    9. '	n' → logprob: -14.599089622497559
    10. ' (' → logprob: -14.599089622497559

Token 62: ' %' (ID: 1851)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -0.00672922981902957
    2. ' %' → logprob: -5.0067291259765625
    3. ' ' → logprob: -11.756729125976562
    4. '<|end|>' → logprob: -13.381729125976562
    5. '10' → logprob: -14.131729125976562
    6. '100' → logprob: -14.381729125976562
    7. '<|end|>' → logprob: -14.631729125976562
    8. ' ' → logprob: -14.756729125976562
    9. '`' → logprob: -14.756729125976562
    10. 's' → logprob: -15.131729125976562

Token 63: ' ' (ID: 220)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.003191970521584153
    2. ' ' → logprob: -5.753191947937012
    3. '1' → logprob: -11.878191947937012
    4. '100' → logprob: -12.753191947937012
    5. '```' → logprob: -13.128191947937012
    6. '  ' → logprob: -14.378191947937012
    7. '   ' → logprob: -15.565691947937012
    8. '۱۰' → logprob: -15.753191947937012
    9. '0' → logprob: -15.940691947937012
    10. ' ' → logprob: -16.190692901611328

Token 64: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.0022969208657741547
    2. '100' → logprob: -6.1272969245910645
    3. '1' → logprob: -9.252296447753906
    4. '```' → logprob: -12.189796447753906
    5. '0' → logprob: -13.002296447753906
    6. ' ' → logprob: -13.502296447753906
    7. '7' → logprob: -13.689796447753906
    8. '20' → logprob: -13.814796447753906
    9. '``' → logprob: -14.127296447753906
    10. '50' → logprob: -14.814796447753906

Token 65: '
' (ID: 198)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.8652077317237854
    2. '10' → logprob: -0.9902077317237854
    3. '```' → logprob: -2.7402076721191406
    4. '   ' → logprob: -3.1152076721191406
    5. '\n' → logprob: -3.7402076721191406
    6. ' ' → logprob: -4.365207672119141
    7. '``' → logprob: -4.365207672119141
    8. '
' → logprob: -4.740207672119141
    9. '0' → logprob: -4.990207672119141
    10. '4' → logprob: -5.615207672119141

Token 66: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.0006121210753917694
    2. '7' → logprob: -8.125612258911133
    3. '10' → logprob: -8.375612258911133
    4. '```' → logprob: -11.125612258911133
    5. 'print' → logprob: -11.375612258911133
    6. '/' → logprob: -11.625612258911133
    7. '0' → logprob: -11.625612258911133
    8. '1' → logprob: -11.750612258911133
    9. ' n' → logprob: -11.875612258911133
    10. '6' → logprob: -12.000612258911133

Token 67: ' /=' (ID: 37808)
  Prédit: ' /='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' /=' → logprob: -0.44637516140937805
    2. '/' → logprob: -1.6963751316070557
    3. '/=' → logprob: -1.8213751316070557
    4. '=' → logprob: -4.321375370025635
    5. ' /' → logprob: -7.446375370025635
    6. ' =' → logprob: -7.571375370025635
    7. ' ' → logprob: -8.946374893188477
    8. '```' → logprob: -9.946374893188477
    9. '%' → logprob: -10.196374893188477
    10. ' ' → logprob: -10.196374893188477

Token 68: ' ' (ID: 220)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.00020520923135336488
    2. ' ' → logprob: -8.500205039978027
    3. '1' → logprob: -13.750205039978027
    4. '   ' → logprob: -15.625205039978027
    5. '```' → logprob: -16.125205993652344
    6. '0' → logprob: -16.812705993652344
    7. '100' → logprob: -16.875205993652344
    8. '  ' → logprob: -16.937705993652344
    9. '۱۰' → logprob: -17.062705993652344
    10. '１０' → logprob: -17.125205993652344

Token 69: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -3.054500666621607e-06
    2. '1' → logprob: -13.50000286102295
    3. ' ' → logprob: -13.62500286102295
    4. '100' → logprob: -16.000003814697266
    5. '0' → logprob: -16.250003814697266
    6. '```' → logprob: -16.625003814697266
    7. '۱۰' → logprob: -17.375003814697266
    8. '１０' → logprob: -17.812503814697266
    9. '१०' → logprob: -18.562503814697266
    10. '   ' → logprob: -18.625003814697266

Token 70: '
' (ID: 198)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0894632562994957
    2. '7' → logprob: -2.464463233947754
    3. ' if' → logprob: -8.464463233947754
    4. '```' → logprob: -8.589463233947754
    5. 'n' → logprob: -9.339463233947754
    6. 'i' → logprob: -11.589463233947754
    7. 'while' → logprob: -12.464463233947754
    8. '6' → logprob: -12.589463233947754
    9. '4' → logprob: -13.214463233947754
    10. 'print' → logprob: -13.214463233947754

Token 71: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.012667040340602398
    2. '7' → logprob: -4.387667179107666
    3. '```' → logprob: -9.637666702270508
    4. 'i' → logprob: -9.887666702270508
    5. ' if' → logprob: -11.137666702270508
    6. 'n' → logprob: -11.387666702270508
    7. 'while' → logprob: -12.137666702270508
    8. 'print' → logprob: -12.637666702270508
    9. '6' → logprob: -13.387666702270508
    10. 'If' → logprob: -14.012666702270508

Token 72: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.001051507773809135
    2. 'n' → logprob: -6.876051425933838
    3. ' ' → logprob: -11.501051902770996
    4. ' (' → logprob: -12.001051902770996
    5. ' ' → logprob: -13.251051902770996
    6. '(n' → logprob: -14.751051902770996
    7. '7' → logprob: -16.62605094909668
    8. ' math' → logprob: -17.00105094909668
    9. '<|end|>' → logprob: -17.37605094909668
    10. '	n' → logprob: -17.62605094909668

Token 73: ' ==' (ID: 951)
  Prédit: ' %'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.008635254576802254
    2. '%' → logprob: -4.7586350440979
    3. ' ' → logprob: -10.883635520935059
    4. ' ' → logprob: -13.383635520935059
    5. '<|end|>' → logprob: -15.383635520935059
    6. '[' → logprob: -16.758634567260742
    7. ' %=' → logprob: -17.383634567260742
    8. ' %
' → logprob: -17.508634567260742
    9. '7' → logprob: -17.508634567260742
    10. ' ==' → logprob: -17.758634567260742

Token 74: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2014198750257492
    2. '7' → logprob: -1.7014198303222656
    3. ' ' → logprob: -12.701419830322266
    4. '  ' → logprob: -13.576419830322266
    5. '   ' → logprob: -14.326419830322266
    6. '    ' → logprob: -15.326419830322266
    7. '۷' → logprob: -15.888919830322266
    8. '<|end|>' → logprob: -16.201419830322266
    9. 's' → logprob: -16.388919830322266
    10. '```' → logprob: -16.638919830322266

Token 75: '7' (ID: 22)
  Prédit: '7'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -0.0004886920796707273
    2. ' ' → logprob: -7.625488758087158
    3. '७' → logprob: -16.00048828125
    4. '۷' → logprob: -16.12548828125
    5. '٧' → logprob: -16.31298828125
    6. '৭' → logprob: -16.37548828125
    7. '  ' → logprob: -16.62548828125
    8. '   ' → logprob: -16.87548828125
    9. '７' → logprob: -17.12548828125
    10. ' ' → logprob: -17.25048828125

Token 76: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0004343645414337516
    2. ':
' → logprob: -7.750434398651123
    3. ' :' → logprob: -13.125433921813965
    4. '):' → logprob: -14.375433921813965
    5. '   ' → logprob: -14.750433921813965
    6. ':**' → logprob: -15.875433921813965
    7. '=' → logprob: -16.25043487548828
    8. '==' → logprob: -16.50043487548828
    9. 'print' → logprob: -16.75043487548828
    10. ':

' → logprob: -16.87543487548828

Token 77: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0016513756709173322
    2. 'print' → logprob: -6.501651287078857
    3. ' print' → logprob: -9.001651763916016
    4. '	print' → logprob: -11.376651763916016
    5. '<|end|>' → logprob: -12.251651763916016
    6. '       ' → logprob: -12.626651763916016
    7. '```' → logprob: -12.876651763916016
    8. '   ' → logprob: -13.626651763916016
    9. '    
' → logprob: -14.001651763916016
    10. '    ' → logprob: -14.751651763916016

Token 78: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4481775164604187
    2. 'print' (adapté à ' print') → logprob: -1.1981775760650635
    3. ' print' → logprob: -2.8231775760650635
    4. '	print' → logprob: -10.948177337646484
    5. '       ' → logprob: -11.198177337646484
    6. '```' → logprob: -11.573177337646484
    7. ' ' → logprob: -12.948177337646484
    8. '    ' → logprob: -13.073177337646484
    9. '.print' → logprob: -14.198177337646484
    10. '  ' → logprob: -14.698177337646484

Token 79: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.16086141765117645
    2. '(' → logprob: -1.9108613729476929
    3. '("("' → logprob: -7.410861492156982
    4. '("")' → logprob: -11.160861015319824
    5. '('' → logprob: -11.410861015319824
    6. '("""' → logprob: -13.285861015319824
    7. '("(' → logprob: -13.410861015319824
    8. '()' → logprob: -13.785861015319824
    9. '(""' → logprob: -13.910861015319824
    10. '(`' → logprob: -14.785861015319824

Token 80: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.14597374200820923
    2. '"' → logprob: -2.0209736824035645
    3. '("' → logprob: -5.7709736824035645
    4. '(' → logprob: -10.145974159240723
    5. '"No' → logprob: -10.395974159240723
    6. 'No' → logprob: -10.520974159240723
    7. '“Yes' → logprob: -10.895974159240723
    8. 'Ye' → logprob: -11.020974159240723
    9. ' Yes' → logprob: -11.020974159240723
    10. 'YES' → logprob: -11.520974159240723

Token 81: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.12733551859855652
    2. '")
' → logprob: -2.127335548400879
    3. ')' → logprob: -8.377335548400879
    4. ')
' → logprob: -9.377335548400879
    5. '"' → logprob: -9.377335548400879
    6. '")
' → logprob: -12.627335548400879
    7. ')")' → logprob: -13.002335548400879
    8. '")

' → logprob: -14.377335548400879
    9. ')")
' → logprob: -14.502335548400879
    10. '"
' → logprob: -14.502335548400879

Token 82: '   ' (ID: 271)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.013094472698867321
    2. '   ' → logprob: -5.013094425201416
    3. '```' → logprob: -5.638094425201416
    4. ' else' → logprob: -6.638094425201416
    5. '<|end|>' → logprob: -8.013094902038574
    6. 'print' → logprob: -8.138094902038574
    7. '``' → logprob: -8.763094902038574
    8. '
' → logprob: -8.888094902038574
    9. '    
' → logprob: -9.263094902038574
    10. '\n' → logprob: -9.263094902038574

Token 83: ' sys' (ID: 12228)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.09268941730260849
    2. 'print' → logprob: -3.0926895141601562
    3. '   ' → logprob: -3.5926895141601562
    4. '```' → logprob: -4.717689514160156
    5. 'n' → logprob: -6.717689514160156
    6. ' ' → logprob: -6.842689514160156
    7. 's' → logprob: -7.092689514160156
    8. '\n' → logprob: -7.092689514160156
    9. '
' → logprob: -7.342689514160156
    10. '<|end|>' → logprob: -7.467689514160156

Token 84: '.exit' (ID: 27076)
  Prédit: '.exit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.exit' → logprob: -0.0890171155333519
    2. '.' → logprob: -2.464017152786255
    3. '.ex' → logprob: -11.089016914367676
    4. '.quit' → logprob: -11.714016914367676
    5. '```' → logprob: -12.214016914367676
    6. '.stdout' → logprob: -12.339016914367676
    7. ' .' → logprob: -12.464016914367676
    8. 'exit' → logprob: -12.464016914367676
    9. '.exc' → logprob: -12.589016914367676
    10. '.out' → logprob: -12.589016914367676

Token 85: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.019795462489128113
    2. '(' → logprob: -4.5197954177856445
    3. '()
' → logprob: -4.7697954177856445
    4. '(
' → logprob: -8.894795417785645
    5. '()

' → logprob: -10.394795417785645
    6. '()`' → logprob: -11.269795417785645
    7. '```' → logprob: -11.644795417785645
    8. '()
' → logprob: -12.019795417785645
    9. '()\' → logprob: -12.144795417785645
    10. '(

' → logprob: -12.269795417785645

Token 86: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -2.696889623621246e-06
    2. '```' → logprob: -13.00000286102295
    3. ' print' → logprob: -15.87500286102295
    4. 'No' → logprob: -16.250001907348633
    5. 'pr' → logprob: -17.125001907348633
    6. '7' → logprob: -17.500001907348633
    7. 'prin' → logprob: -17.875001907348633
    8. 'pri' → logprob: -18.000001907348633
    9. 'prit' → logprob: -18.125001907348633
    10. 'Print' → logprob: -18.250001907348633

Token 87: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5861877799034119
    2. '("' → logprob: -0.8361877799034119
    3. '("")' → logprob: -4.961187839508057
    4. '("("' → logprob: -6.086187839508057
    5. '()' → logprob: -7.086187839508057
    6. '('' → logprob: -9.961187362670898
    7. '(False' → logprob: -11.461187362670898
    8. '(""' → logprob: -11.836187362670898
    9. '("""' → logprob: -11.836187362670898
    10. '("(' → logprob: -12.836187362670898

Token 88: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -5.061676347395405e-05
    2. ' No' → logprob: -10.25005054473877
    3. '"No' → logprob: -11.25005054473877
    4. 'N' → logprob: -13.37505054473877
    5. 'NO' → logprob: -14.75005054473877
    6. ' ' → logprob: -17.250051498413086
    7. 'Yes' → logprob: -17.750051498413086
    8. 'None' → logprob: -17.750051498413086
    9. 'Not' → logprob: -17.875051498413086
    10. '“No' → logprob: -18.000051498413086

Token 89: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -6.146429223008454e-05
    2. ')' → logprob: -9.75006103515625
    3. ')")' → logprob: -13.25006103515625
    4. '"' → logprob: -13.75006103515625
    5. '")
' → logprob: -15.12506103515625
    6. '")

' → logprob: -17.87506103515625
    7. '')' → logprob: -18.25006103515625
    8. '`)' → logprob: -18.62506103515625
    9. '!")' → logprob: -18.87506103515625
    10. '}")' → logprob: -18.87506103515625


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 87
Tokens correctement prédits (1ère position, stricte): 37
Tokens correctement prédits (1ère position, avec adaptation): 37
Tokens correctement prédits (top 10): 73
Précision stricte (1ère position): 42.53%
Précision adaptée (1ère position): 42.53%
Précision (top 10): 83.91%
================================================================================
