================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:44:51
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import heapq

N, M = map(int, input().split())
A = list(map(lambda x: int(x)*(-1), input().split()))
heapq.heapify(A)
for _ in range(M):
    num = heapq.heappop(A)
    heapq.heappush(A, (-num)//2*(-1))
print(sum(A)*(-1))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' heap' (ID: 37237)
  → Token d'amorce (pas de prédiction)

Token 2: 'q' (ID: 80)
  → Token d'amorce (pas de prédiction)

Token 3: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.00020568605395965278
    2. '.\' → logprob: -9.250205993652344
    3. '(' → logprob: -9.750205993652344
    4. '.​' → logprob: -11.500205993652344
    5. '\' → logprob: -11.750205993652344
    6. '\n' → logprob: -12.500205993652344
    7. '.
' → logprob: -12.500205993652344
    8. '<|end|>' → logprob: -12.750205993652344
    9. ' .' → logprob: -12.875205993652344
    10. '.

' → logprob: -13.000205993652344

Token 4: 'N' (ID: 45)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.00012070851516909897
    2. '\' → logprob: -10.625121116638184
    3. '.
' → logprob: -11.250121116638184
    4. '.heap' → logprob: -11.375121116638184
    5. '.\' → logprob: -11.500121116638184
    6. '<|end|>' → logprob: -11.625121116638184
    7. '(' → logprob: -11.875121116638184
    8. '```' → logprob: -11.875121116638184
    9. 'import' → logprob: -12.500121116638184
    10. '[' → logprob: -12.875121116638184

Token 5: ',' (ID: 11)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.7239216566085815
    2. ' =' → logprob: -0.9739216566085815
    3. ' ' → logprob: -2.223921775817871
    4. ',' → logprob: -4.098921775817871
    5. '  ' → logprob: -5.473921775817871
    6. ')' → logprob: -5.973921775817871
    7. '[' → logprob: -5.973921775817871
    8. '.' → logprob: -6.473921775817871
    9. '_' → logprob: -7.348921775817871
    10. ' )' → logprob: -8.473921775817871

Token 6: ' M' (ID: 391)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.6005443930625916
    2. 'M' → logprob: -1.3505444526672363
    3. ' K' → logprob: -2.1005444526672363
    4. ' M' → logprob: -2.8505444526672363
    5. ' ' → logprob: -4.975544452667236
    6. 'space' → logprob: -5.975544452667236
    7. '<|end|>' → logprob: -8.225543975830078
    8. 'input' → logprob: -8.350543975830078
    9. 'k' → logprob: -8.600543975830078
    10. ' space' → logprob: -8.600543975830078

Token 7: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.02711973711848259
    2. '=' → logprob: -3.6521196365356445
    3. ',' → logprob: -7.2771196365356445
    4. '<|end|>' → logprob: -10.152119636535645
    5. ' ' → logprob: -10.402119636535645
    6. ' ,' → logprob: -10.652119636535645
    7. ')' → logprob: -10.652119636535645
    8. '```' → logprob: -12.777119636535645
    9. ' =
' → logprob: -13.402119636535645
    10. '`' → logprob: -13.652119636535645

Token 8: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.011704188771545887
    2. 'map' → logprob: -4.761703968048096
    3. ' ' → logprob: -5.886703968048096
    4. ' input' → logprob: -8.386704444885254
    5. ' int' → logprob: -10.261704444885254
    6. '0' → logprob: -10.886704444885254
    7. 'input' → logprob: -11.136704444885254
    8. ' list' → logprob: -12.261704444885254
    9. '10' → logprob: -12.761704444885254
    10. 'int' → logprob: -13.011704444885254

Token 9: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3969689607620239
    2. '(int' → logprob: -1.146968960762024
    3. '(lambda' → logprob: -5.146968841552734
    4. '(str' → logprob: -5.646968841552734
    5. '()' → logprob: -9.021968841552734
    6. '(input' → logprob: -9.646968841552734
    7. '(tuple' → logprob: -9.896968841552734
    8. '<|end|>' → logprob: -9.896968841552734
    9. ' (' → logprob: -10.021968841552734
    10. '(eval' → logprob: -10.021968841552734

Token 10: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5544838905334473
    2. ')' → logprob: -1.6794838905334473
    3. '(input' → logprob: -2.0544838905334473
    4. '(int' → logprob: -2.4294838905334473
    5. '(str' → logprob: -5.054483890533447
    6. ',' → logprob: -5.179483890533447
    7. '<|end|>' → logprob: -5.804483890533447
    8. '```' → logprob: -6.804483890533447
    9. ',input' → logprob: -7.054483890533447
    10. '(eval' → logprob: -7.304483890533447

Token 11: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.5759425759315491
    2. ' input' → logprob: -0.8259425759315491
    3. '(input' → logprob: -12.950942993164062
    4. ')' → logprob: -15.325942993164062
    5. ' ' → logprob: -15.950942993164062
    6. ',input' → logprob: -15.950942993164062
    7. '=input' → logprob: -16.075942993164062
    8. 'int' → logprob: -17.075942993164062
    9. 'open' → logprob: -17.075942993164062
    10. ' )' → logprob: -17.325942993164062

Token 12: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.6866974234580994
    2. '())' → logprob: -1.3116974830627441
    3. '().' → logprob: -2.061697483062744
    4. '(' → logprob: -3.311697483062744
    5. '('' → logprob: -3.436697483062744
    6. ')' → logprob: -3.561697483062744
    7. '("' → logprob: -7.811697483062744
    8. '());' → logprob: -8.061697006225586
    9. '()))' → logprob: -8.311697006225586
    10. '`()' → logprob: -8.436697006225586

Token 13: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00027575582498684525
    2. 'strip' → logprob: -8.250275611877441
    3. 'rstrip' → logprob: -11.250275611877441
    4. ')' → logprob: -14.000275611877441
    5. '(split' → logprob: -15.500275611877441
    6. ' split' → logprob: -15.500275611877441
    7. 'read' → logprob: -15.875275611877441
    8. 'spl' → logprob: -16.750276565551758
    9. '```' → logprob: -18.375276565551758
    10. '_split' → logprob: -19.000276565551758

Token 14: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.003612186061218381
    2. '))' → logprob: -5.628612041473389
    3. '()' → logprob: -12.378612518310547
    4. '())' → logprob: -12.628612518310547
    5. '(' → logprob: -13.503612518310547
    6. '`)' → logprob: -14.253612518310547
    7. ')`' → logprob: -14.253612518310547
    8. ')))' → logprob: -14.628612518310547
    9. '),' → logprob: -14.753612518310547
    10. ' )' → logprob: -15.003612518310547

Token 15: 'A' (ID: 32)
  Prédit: 'graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'graph' → logprob: -0.029775485396385193
    2. 'dist' → logprob: -5.154775619506836
    3. '
' → logprob: -5.279775619506836
    4. 'arr' → logprob: -5.529775619506836
    5. 'edges' → logprob: -6.154775619506836
    6. 'data' → logprob: -6.279775619506836
    7. 'numbers' → logprob: -6.404775619506836
    8. 'A' → logprob: -6.904775619506836
    9. 'nodes' → logprob: -6.904775619506836
    10. '```' → logprob: -7.029775619506836

Token 16: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.9431676268577576
    2. ' =' → logprob: -0.9431676268577576
    3. '=' → logprob: -1.9431676864624023
    4. ',' → logprob: -3.4431676864624023
    5. ')' → logprob: -4.193167686462402
    6. '.' → logprob: -4.693167686462402
    7. '_' → logprob: -4.943167686462402
    8. '[]' → logprob: -5.443167686462402
    9. '[i' → logprob: -5.818167686462402
    10. '[:]' → logprob: -6.068167686462402

Token 17: ' list' (ID: 1562)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.7898101806640625
    2. '[]' → logprob: -1.5398101806640625
    3. 'list' → logprob: -1.5398101806640625
    4. ' list' → logprob: -2.6648101806640625
    5. '[list' → logprob: -3.7898101806640625
    6. ' [' → logprob: -4.2898101806640625
    7. '[' → logprob: -4.5398101806640625
    8. '[int' → logprob: -7.6648101806640625
    9. '[input' → logprob: -10.039810180664062
    10. '[len' → logprob: -10.664810180664062

Token 18: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0012026121839880943
    2. '(range' → logprob: -7.251202583312988
    3. '(int' → logprob: -8.751202583312988
    4. '(heap' → logprob: -9.126202583312988
    5. '(input' → logprob: -9.751202583312988
    6. '(

' → logprob: -10.376202583312988
    7. '(
' → logprob: -11.001202583312988
    8. '(map' → logprob: -11.126202583312988
    9. '(eval' → logprob: -11.251202583312988
    10. '(.' → logprob: -11.626202583312988

Token 19: '(lambda' (ID: 43341)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.018392818048596382
    2. '(' → logprob: -4.018393039703369
    3. '(str' → logprob: -9.018392562866211
    4. 'int' → logprob: -10.518392562866211
    5. '(input' → logprob: -11.143392562866211
    6. '<int' → logprob: -11.143392562866211
    7. '=int' → logprob: -11.143392562866211
    8. '(lambda' → logprob: -11.268392562866211
    9. ')' → logprob: -11.518392562866211
    10. '[int' → logprob: -11.768392562866211

Token 20: ' x' (ID: 1215)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.7800870537757874
    2. 'x' → logprob: -1.2800869941711426
    3. ' int' → logprob: -2.0300869941711426
    4. ' x' → logprob: -2.0300869941711426
    5. '(int' → logprob: -7.530086994171143
    6. '<int' → logprob: -8.9050874710083
    7. 'lambda' → logprob: -9.5300874710083
    8. ' lambda' → logprob: -10.1550874710083
    9. ',int' → logprob: -10.1550874710083
    10. ':int' → logprob: -10.2800874710083

Token 21: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5701671242713928
    2. ':int' → logprob: -1.070167064666748
    3. ' :' → logprob: -2.945167064666748
    4. 'int' → logprob: -3.445167064666748
    5. ' int' → logprob: -5.695167064666748
    6. ',int' → logprob: -6.320167064666748
    7. ',' → logprob: -6.695167064666748
    8. '(int' → logprob: -8.445167541503906
    9. ' ,' → logprob: -8.945167541503906
    10. '=int' → logprob: -9.195167541503906

Token 22: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.5193528532981873
    2. ' int' → logprob: -1.269352912902832
    3. ' x' → logprob: -2.519352912902832
    4. 'x' → logprob: -3.144352912902832
    5. '(int' → logprob: -9.394352912902832
    6. 'A' → logprob: -10.269352912902832
    7. '<int' → logprob: -10.394352912902832
    8. ' ord' → logprob: -10.519352912902832
    9. ' heap' → logprob: -10.519352912902832
    10. 'heap' → logprob: -10.706852912902832

Token 23: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.02999357506632805
    2. '(' → logprob: -3.5299935340881348
    3. ',' → logprob: -8.779994010925293
    4. ' (' → logprob: -9.779994010925293
    5. 'x' → logprob: -11.154994010925293
    6. ')' → logprob: -11.779994010925293
    7. ',x' → logprob: -13.029994010925293
    8. '(input' → logprob: -13.529994010925293
    9. '(
' → logprob: -13.654994010925293
    10. ' ,' → logprob: -13.779994010925293

Token 24: ')*' (ID: 11043)
  Prédit: '),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '),' → logprob: -0.5956245064735413
    2. '(x' → logprob: -0.9706245064735413
    3. ',' → logprob: -3.0956244468688965
    4. '*' → logprob: -5.2206244468688965
    5. '+' → logprob: -5.3456244468688965
    6. ')' → logprob: -5.7206244468688965
    7. ',x' → logprob: -5.9706244468688965
    8. ')x' → logprob: -6.5956244468688965
    9. 'x' → logprob: -6.7206244468688965
    10. '**' → logprob: -7.0956244468688965

Token 25: '(-' (ID: 8087)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.28635406494140625
    2. ' -' → logprob: -2.1613540649414062
    3. '2' → logprob: -2.9113540649414062
    4. '1' → logprob: -3.5363540649414062
    5. ' ' → logprob: -3.5363540649414062
    6. '100' → logprob: -4.911354064941406
    7. '(-' → logprob: -5.786354064941406
    8. '10' → logprob: -6.036354064941406
    9. ' (' → logprob: -6.536354064941406
    10. '(' → logprob: -6.536354064941406

Token 26: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.001468080561608076
    2. ' ' → logprob: -6.876468181610107
    3. 'x' → logprob: -7.876468181610107
    4. 'A' → logprob: -10.87646770477295
    5. ' x' → logprob: -11.12646770477295
    6. 'M' → logprob: -11.62646770477295
    7. 'N' → logprob: -13.06396770477295
    8. ' A' → logprob: -13.25146770477295
    9. '2' → logprob: -13.43896770477295
    10. ' -' → logprob: -13.62646770477295

Token 27: '),' (ID: 936)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.027481310069561005
    2. '),' → logprob: -3.7774813175201416
    3. ')' → logprob: -6.1524810791015625
    4. ',x' → logprob: -6.2774810791015625
    5. ',A' → logprob: -9.652481079101562
    6. ' ,' → logprob: -10.402481079101562
    7. ')))' → logprob: -10.527481079101562
    8. ')x' → logprob: -10.777481079101562
    9. ',a' → logprob: -11.027481079101562
    10. '))' → logprob: -11.527481079101562

Token 28: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.12695036828517914
    2. ' input' → logprob: -2.126950263977051
    3. 'range' → logprob: -11.12695026397705
    4. ' range' → logprob: -13.00195026397705
    5. 'list' → logprob: -13.50195026397705
    6. '(input' → logprob: -13.62695026397705
    7. 'A' → logprob: -13.62695026397705
    8. ' A' → logprob: -14.62695026397705
    9. '[input' → logprob: -14.62695026397705
    10. ' list' → logprob: -15.62695026397705

Token 29: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.3182758390903473
    2. '().' → logprob: -1.443275809288025
    3. '())' → logprob: -4.3182759284973145
    4. '()))' → logprob: -4.3182759284973145
    5. '(' → logprob: -4.6932759284973145
    6. '()));' → logprob: -8.943275451660156
    7. '()(' → logprob: -8.943275451660156
    8. '())))' → logprob: -9.193275451660156
    9. ')' → logprob: -9.818275451660156
    10. '()[' → logprob: -9.818275451660156

Token 30: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -1.5332478142227046e-05
    2. 'strip' → logprob: -11.500015258789062
    3. ' split' → logprob: -12.375015258789062
    4. 'rstrip' → logprob: -14.000015258789062
    5. 'spl' → logprob: -16.500015258789062
    6. '(split' → logprob: -17.000015258789062
    7. 'read' → logprob: -19.750015258789062
    8. 's' → logprob: -20.375015258789062
    9. 'replace' → logprob: -20.750015258789062
    10. '.split' → logprob: -20.750015258789062

Token 31: '()))
' (ID: 24521)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.10380230844020844
    2. ')' → logprob: -2.97880220413208
    3. '()))' → logprob: -3.10380220413208
    4. '())' → logprob: -6.22880220413208
    5. '()' → logprob: -7.22880220413208
    6. ')))' → logprob: -9.228802680969238
    7. '(' → logprob: -9.978802680969238
    8. ' ))' → logprob: -11.228802680969238
    9. '),' → logprob: -13.228802680969238
    10. '())))' → logprob: -13.853802680969238

Token 32: 'heap' (ID: 38535)
  Prédit: 'heap'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'heap' → logprob: -0.024108638986945152
    2. '
' → logprob: -4.399108409881592
    3. ')
' → logprob: -5.524108409881592
    4. 'for' → logprob: -5.649108409881592
    5. '
' → logprob: -6.649108409881592
    6. ')' → logprob: -7.399108409881592
    7. '' → logprob: -7.774108409881592
    8. '```' → logprob: -8.02410888671875
    9. '\n' → logprob: -8.27410888671875
    10. ' heap' → logprob: -8.64910888671875

Token 33: 'q' (ID: 80)
  Prédit: 'q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.00031937702442519367
    2. '.' → logprob: -8.250319480895996
    3. '.q' → logprob: -10.000319480895996
    4. 'ify' → logprob: -12.750319480895996
    5. '.he' → logprob: -12.875319480895996
    6. ' .' → logprob: -13.000319480895996
    7. '.push' → logprob: -13.375319480895996
    8. '.heap' → logprob: -13.500319480895996
    9. '```' → logprob: -13.750319480895996
    10. '	q' → logprob: -14.750319480895996

Token 34: '.heap' (ID: 177287)
  Prédit: '.heap'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.heap' → logprob: -0.7026305794715881
    2. '.' → logprob: -0.8276305794715881
    3. '.he' → logprob: -2.7026305198669434
    4. '.q' → logprob: -8.827630996704102
    5. '.put' → logprob: -9.077630996704102
    6. '.push' → logprob: -10.202630996704102
    7. '```' → logprob: -10.452630996704102
    8. '.h' → logprob: -10.827630996704102
    9. '​.' → logprob: -10.827630996704102
    10. '.nl' → logprob: -10.952630996704102

Token 35: 'ify' (ID: 1985)
  Prédit: 'ify'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ify' → logprob: -0.000500370399095118
    2. 'push' → logprob: -7.875500202178955
    3. 'replace' → logprob: -9.750500679016113
    4. 'lify' → logprob: -10.250500679016113
    5. 'p' → logprob: -11.750500679016113
    6. 'ush' → logprob: -12.250500679016113
    7. 'q' → logprob: -12.750500679016113
    8. 'fy' → logprob: -12.875500679016113
    9. '```' → logprob: -12.875500679016113
    10. 'if' → logprob: -13.250500679016113

Token 36: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.00133285962510854
    2. '(' → logprob: -6.626332759857178
    3. '(N' → logprob: -13.251333236694336
    4. '(
' → logprob: -13.501333236694336
    5. '(a' → logprob: -13.751333236694336
    6. '((' → logprob: -14.001333236694336
    7. ' (' → logprob: -14.126333236694336
    8. '(heap' → logprob: -14.876333236694336
    9. '```' → logprob: -16.376333236694336
    10. '(`' → logprob: -16.376333236694336

Token 37: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0007107630372047424
    2. '))' → logprob: -7.250710964202881
    3. ')))' → logprob: -15.000710487365723
    4. ')
' → logprob: -15.375710487365723
    5. ' )' → logprob: -15.625710487365723
    6. '`)' → logprob: -17.12571144104004
    7. '[' → logprob: -17.37571144104004
    8. '),' → logprob: -17.75071144104004
    9. ')])' → logprob: -17.75071144104004
    10. '）' → logprob: -18.12571144104004

Token 38: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.061430953443050385
    2. '\n' → logprob: -3.5614309310913086
    3. '
' → logprob: -3.9364309310913086
    4. ' for' → logprob: -5.311430931091309
    5. '\' → logprob: -5.936430931091309
    6. '```' → logprob: -6.436430931091309
    7. '<|end|>' → logprob: -6.811430931091309
    8. 'while' → logprob: -8.436430931091309
    9. ' 
' → logprob: -8.561430931091309
    10. ')' → logprob: -9.186430931091309

Token 39: ' _' (ID: 1175)
  Prédit: ' _'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.2186552733182907
    2. ' i' → logprob: -1.7186552286148071
    3. ' ' → logprob: -4.593655109405518
    4. '_' → logprob: -4.968655109405518
    5. 'i' → logprob: -11.968655586242676
    6. '  ' → logprob: -12.468655586242676
    7. ' x' → logprob: -12.593655586242676
    8. ' ‌' → logprob: -12.593655586242676
    9. '_i' → logprob: -13.093655586242676
    10. ' I' → logprob: -13.093655586242676

Token 40: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.11007913947105408
    2. 'in' → logprob: -2.360079050064087
    3. ' ' → logprob: -5.610079288482666
    4. ' _' → logprob: -5.610079288482666
    5. '_' → logprob: -6.485079288482666
    6. ' i' → logprob: -7.360079288482666
    7. 'i' → logprob: -8.735078811645508
    8. '  ' → logprob: -9.860078811645508
    9. 'range' → logprob: -10.860078811645508
    10. '```' → logprob: -11.110078811645508

Token 41: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0005592276575043797
    2. ' range' → logprob: -7.500559329986572
    3. '(range' → logprob: -12.250558853149414
    4. '<|end|>' → logprob: -15.000558853149414
    5. '	range' → logprob: -15.125558853149414
    6. 'A' → logprob: -15.375558853149414
    7. 'rang' → logprob: -15.500558853149414
    8. 'ange' → logprob: -16.375558853149414
    9. ')' → logprob: -16.500558853149414
    10. '_range' → logprob: -16.625558853149414

Token 42: '(M' (ID: 6103)
  Prédit: '(M'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(M' → logprob: -0.3150300681591034
    2. '(' → logprob: -1.3150300979614258
    3. ' (' → logprob: -6.565030097961426
    4. '(N' → logprob: -8.190030097961426
    5. ' M' → logprob: -9.690030097961426
    6. '(range' → logprob: -11.815030097961426
    7. 'M' → logprob: -12.440030097961426
    8. '()' → logprob: -13.065030097961426
    9. '(s' → logprob: -13.690030097961426
    10. ' ' → logprob: -13.940030097961426

Token 43: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.011612649075686932
    2. ')' → logprob: -4.511612415313721
    3. ':' → logprob: -7.636612415313721
    4. ' ):' → logprob: -10.261612892150879
    5. '):
' → logprob: -10.636612892150879
    6. '():' → logprob: -12.136612892150879
    7. ',' → logprob: -12.136612892150879
    8. ' )' → logprob: -13.511612892150879
    9. ':)' → logprob: -13.511612892150879
    10. '```' → logprob: -13.886612892150879

Token 44: '   ' (ID: 271)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.5591546297073364
    2. 'x' → logprob: -0.9341546297073364
    3. 'v' → logprob: -4.434154510498047
    4. ' a' → logprob: -4.809154510498047
    5. ' x' → logprob: -5.059154510498047
    6. 't' → logprob: -6.309154510498047
    7. 'tmp' → logprob: -6.559154510498047
    8. 'u' → logprob: -6.809154510498047
    9. 'q' → logprob: -6.809154510498047
    10. 'p' → logprob: -7.434154510498047

Token 45: ' num' (ID: 2269)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.2333625704050064
    2. 'x' → logprob: -1.6083625555038452
    3. 'v' → logprob: -5.483362674713135
    4. 'q' → logprob: -6.983362674713135
    5. 'max' → logprob: -7.358362674713135
    6. 'tmp' → logprob: -7.483362674713135
    7. 't' → logprob: -7.733362674713135
    8. ' a' → logprob: -8.358362197875977
    9. 'p' → logprob: -8.733362197875977
    10. 'temp' → logprob: -9.108362197875977

Token 46: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5765816569328308
    2. '=' → logprob: -0.8265816569328308
    3. '=-' → logprob: -8.201581954956055
    4. '=_' → logprob: -8.701581954956055
    5. ' ' → logprob: -9.326581954956055
    6. '=int' → logprob: -10.576581954956055
    7. ',' → logprob: -11.201581954956055
    8. '＝' → logprob: -11.701581954956055
    9. '_' → logprob: -11.951581954956055
    10. '=max' → logprob: -12.076581954956055

Token 47: ' heap' (ID: 37237)
  Prédit: 'heap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'heap' → logprob: -0.056628357619047165
    2. '-' → logprob: -3.681628465652466
    3. ' heap' → logprob: -3.681628465652466
    4. ' -' → logprob: -5.931628227233887
    5. '-he' → logprob: -6.556628227233887
    6. '(heap' → logprob: -8.681628227233887
    7. 'he' → logprob: -8.806628227233887
    8. '   ' → logprob: -9.556628227233887
    9. '-h' → logprob: -9.681628227233887
    10. '(-' → logprob: -10.681628227233887

Token 48: 'q' (ID: 80)
  Prédit: 'q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: 0.0
    2. 'p' → logprob: -18.0
    3. 'x' → logprob: -18.875
    4. '```' → logprob: -19.75
    5. 'qp' → logprob: -19.875
    6. '[' → logprob: -19.875
    7. 'k' → logprob: -20.125
    8. 'op' → logprob: -20.5
    9. 'hq' → logprob: -20.5
    10. 'j' → logprob: -20.625

Token 49: '.he' (ID: 67786)
  Prédit: '.he'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.he' → logprob: -0.006983299273997545
    2. '.heap' → logprob: -5.006983280181885
    3. ' he' → logprob: -9.381983757019043
    4. '.' → logprob: -9.381983757019043
    5. 'he' → logprob: -10.006983757019043
    6. '.nl' → logprob: -10.881983757019043
    7. '_he' → logprob: -11.381983757019043
    8. '```' → logprob: -12.506983757019043
    9. 'q' → logprob: -12.506983757019043
    10. '.h' → logprob: -12.756983757019043

Token 50: 'app' (ID: 903)
  Prédit: 'app'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'app' → logprob: -1.6405310816480778e-05
    2. 'pp' → logprob: -11.125016212463379
    3. 'ap' → logprob: -13.875016212463379
    4. 'q' → logprob: -15.000016212463379
    5. 'a' → logprob: -16.000017166137695
    6. 'replace' → logprob: -16.375017166137695
    7. '[' → logprob: -17.250017166137695
    8. 'pop' → logprob: -17.375017166137695
    9. 'p' → logprob: -17.500017166137695
    10. '```' → logprob: -18.875017166137695

Token 51: 'op' (ID: 467)
  Prédit: 'op'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'op' → logprob: -0.00014478032244369388
    2. 'ush' → logprob: -8.875144958496094
    3. 'opf' → logprob: -13.000144958496094
    4. 'o' → logprob: -14.250144958496094
    5. 'pop' → logprob: -14.375144958496094
    6. '[' → logprob: -15.000144958496094
    7. 'p' → logprob: -15.250144958496094
    8. 'opp' → logprob: -15.875144958496094
    9. '	op' → logprob: -16.000144958496094
    10. '```' → logprob: -16.250144958496094

Token 52: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -5.908022285439074e-05
    2. '(' → logprob: -9.750059127807617
    3. '(
' → logprob: -15.500059127807617
    4. '```' → logprob: -15.625059127807617
    5. 'A' → logprob: -15.875059127807617
    6. '(N' → logprob: -16.750059127807617
    7. '(S' → logprob: -17.125059127807617
    8. ' (' → logprob: -17.375059127807617
    9. '(a' → logprob: -17.750059127807617
    10. '((' → logprob: -17.875059127807617

Token 53: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.004164587706327438
    2. ')
' → logprob: -5.504164695739746
    3. ')*' → logprob: -9.879164695739746
    4. ')
' → logprob: -11.254164695739746
    5. ')

' → logprob: -11.504164695739746
    6. ' )' → logprob: -12.004164695739746
    7. '   ' → logprob: -13.129164695739746
    8. ')//' → logprob: -14.629164695739746
    9. '))' → logprob: -15.004164695739746
    10. ')#' → logprob: -15.254164695739746

Token 54: '   ' (ID: 271)
  Prédit: 'heap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'heap' → logprob: -0.8804078698158264
    2. '   ' → logprob: -1.1304078102111816
    3. '    
' → logprob: -3.1304078102111816
    4. '//' → logprob: -3.2554078102111816
    5. '
' → logprob: -3.5054078102111816
    6. ' 
' → logprob: -3.6304078102111816
    7. '  
' → logprob: -3.6304078102111816
    8. ' //' → logprob: -4.005407810211182
    9. 'num' → logprob: -4.130407810211182
    10. '*' → logprob: -4.505407810211182

Token 55: ' heap' (ID: 37237)
  Prédit: 'num'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'num' → logprob: -0.2920123040676117
    2. 'heap' (adapté à ' heap') → logprob: -1.417012333869934
    3. 'print' → logprob: -5.2920122146606445
    4. 'temp' → logprob: -6.5420122146606445
    5. 'new' → logprob: -6.6670122146606445
    6. 'he' → logprob: -6.9170122146606445
    7. 'tmp' → logprob: -7.7920122146606445
    8. '   ' → logprob: -7.9170122146606445
    9. ' heap' → logprob: -8.292012214660645
    10. ' num' → logprob: -8.667012214660645

Token 56: 'q' (ID: 80)
  Prédit: 'q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -2.2200749754119897e-06
    2. '.push' → logprob: -14.500001907348633
    3. 'hq' → logprob: -14.750001907348633
    4. 'p' → logprob: -15.500001907348633
    5. 'h' → logprob: -15.500001907348633
    6. 'push' → logprob: -15.875001907348633
    7. '```' → logprob: -16.125001907348633
    8. '.he' → logprob: -16.250001907348633
    9. '.heap' → logprob: -16.375001907348633
    10. '.q' → logprob: -16.750001907348633

Token 57: '.he' (ID: 67786)
  Prédit: '.he'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.he' → logprob: -0.0009269453585147858
    2. '.heap' → logprob: -7.625926971435547
    3. 'he' → logprob: -8.375926971435547
    4. 'q' → logprob: -9.000926971435547
    5. '```' → logprob: -10.125926971435547
    6. 'heap' → logprob: -11.500926971435547
    7. '_he' → logprob: -12.125926971435547
    8. '   ' → logprob: -12.250926971435547
    9. 'push' → logprob: -12.375926971435547
    10. ' he' → logprob: -12.625926971435547

Token 58: 'app' (ID: 903)
  Prédit: 'app'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'app' → logprob: -0.006043862085789442
    2. 'ap' → logprob: -5.256043910980225
    3. 'pp' → logprob: -7.506043910980225
    4. 'p' → logprob: -8.381043434143066
    5. 'q' → logprob: -11.381043434143066
    6. 'qp' → logprob: -11.381043434143066
    7. 'pq' → logprob: -12.756043434143066
    8. 'a' → logprob: -13.381043434143066
    9. 'cp' → logprob: -14.131043434143066
    10. '```' → logprob: -14.506043434143066

Token 59: 'ush' (ID: 1776)
  Prédit: 'ush'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ush' → logprob: -6.44443862256594e-05
    2. 'push' → logprob: -9.875064849853516
    3. '```' → logprob: -11.750064849853516
    4. 'op' → logprob: -13.250064849853516
    5. 'u' → logprob: -13.875064849853516
    6. 'p' → logprob: -14.500064849853516
    7. 'l' → logprob: -14.750064849853516
    8. 'pp' → logprob: -15.250064849853516
    9. 'USH' → logprob: -15.250064849853516
    10. 'q' → logprob: -15.625064849853516

Token 60: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.0010365027701482177
    2. '(' → logprob: -6.876036643981934
    3. '(
' → logprob: -13.501036643981934
    4. '<|end|>' → logprob: -13.626036643981934
    5. '(a' → logprob: -14.751036643981934
    6. '(I' → logprob: -16.251035690307617
    7. '(S' → logprob: -16.251035690307617
    8. '(Q' → logprob: -16.251035690307617
    9. ' (' → logprob: -16.501035690307617
    10. '```' → logprob: -16.626035690307617

Token 61: ',' (ID: 11)
  Prédit: '(num'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(num' → logprob: -0.11081334948539734
    2. '(' → logprob: -2.6108133792877197
    3. ',num' → logprob: -3.8608133792877197
    4. ',' → logprob: -4.860813140869141
    5. '(-' → logprob: -6.985813140869141
    6. ' (' → logprob: -7.360813140869141
    7. '((' → logprob: -8.23581314086914
    8. ')' → logprob: -8.48581314086914
    9. ' num' → logprob: -8.86081314086914
    10. 'num' → logprob: -9.11081314086914

Token 62: ' (-' (ID: 21382)
  Prédit: 'num'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'num' → logprob: -0.2081030011177063
    2. ' num' → logprob: -1.7081029415130615
    3. '-num' → logprob: -5.083103179931641
    4. ' -' → logprob: -8.45810317993164
    5. ' ' → logprob: -9.20810317993164
    6. '-' → logprob: -9.70810317993164
    7. '	num' → logprob: -10.33310317993164
    8. '(num' → logprob: -10.70810317993164
    9. '*num' → logprob: -12.08310317993164
    10. 'int' → logprob: -12.08310317993164

Token 63: 'num' (ID: 4571)
  Prédit: 'num'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'num' → logprob: -0.0006066487403586507
    2. '(num' → logprob: -8.125606536865234
    3. '1' → logprob: -9.125606536865234
    4. ' num' → logprob: -9.250606536865234
    5. '(' → logprob: -10.250606536865234
    6. '(-' → logprob: -10.625606536865234
    7. '2' → logprob: -10.875606536865234
    8. ')' → logprob: -11.500606536865234
    9. ' (' → logprob: -12.000606536865234
    10. '   ' → logprob: -12.125606536865234

Token 64: ')//' (ID: 60375)
  Prédit: ')//'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')//' → logprob: -0.20311671495437622
    2. ')' → logprob: -1.7031166553497314
    3. '//' → logprob: -6.4531168937683105
    4. ')>>' → logprob: -9.453116416931152
    5. ' )' → logprob: -10.203116416931152
    6. ' //' → logprob: -12.203116416931152
    7. '2' → logprob: -13.453116416931152
    8. ' ' → logprob: -14.078116416931152
    9. '   ' → logprob: -14.203116416931152
    10. '+' → logprob: -14.703116416931152

Token 65: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -7.600714161526412e-05
    2. ' ' → logprob: -9.500076293945312
    3. '1' → logprob: -14.750076293945312
    4. '```' → logprob: -15.625076293945312
    5. '3' → logprob: -16.187576293945312
    6. '10' → logprob: -16.312576293945312
    7. '_' → logprob: -16.312576293945312
    8. '﻿' → logprob: -16.562576293945312
    9. '/' → logprob: -16.812576293945312
    10. '22' → logprob: -17.125076293945312

Token 66: '*(-' (ID: 78771)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -2.451116051815916e-05
    2. '))' → logprob: -11.375024795532227
    3. ')
' → logprob: -12.000024795532227
    4. ' )' → logprob: -12.000024795532227
    5. ')))' → logprob: -15.375024795532227
    6. ')`' → logprob: -15.750024795532227
    7. '')' → logprob: -17.125024795532227
    8. ')}' → logprob: -17.250024795532227
    9. '```' → logprob: -17.250024795532227
    10. '`)' → logprob: -17.375024795532227

Token 67: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -8.895480277715251e-06
    2. ' ' → logprob: -12.125008583068848
    3. ')' → logprob: -12.875008583068848
    4. '2' → logprob: -15.000008583068848
    5. '   ' → logprob: -15.000008583068848
    6. '  ' → logprob: -17.312509536743164
    7. ' )' → logprob: -17.562509536743164
    8. '１' → logprob: -17.687509536743164
    9. '    ' → logprob: -18.437509536743164
    10. '۱' → logprob: -18.562509536743164

Token 68: '))
' (ID: 2210)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.003183182328939438
    2. '))' → logprob: -5.753183364868164
    3. ' )' → logprob: -12.503183364868164
    4. ')))' → logprob: -13.878183364868164
    5. ')
' → logprob: -14.128183364868164
    6. ' ))' → logprob: -16.503183364868164
    7. '))
' → logprob: -17.378183364868164
    8. ')")' → logprob: -17.628183364868164
    9. ')`' → logprob: -18.253183364868164
    10. '')' → logprob: -18.753183364868164

Token 69: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00041613372741267085
    2. ')' → logprob: -8.500415802001953
    3. '
' → logprob: -9.625415802001953
    4. '  
' → logprob: -10.625415802001953
    5. 'for' → logprob: -10.750415802001953
    6. ' 
' → logprob: -11.000415802001953
    7. ' print' → logprob: -11.250415802001953
    8. '```' → logprob: -11.250415802001953
    9. 'sum' → logprob: -11.375415802001953
    10. ' ' → logprob: -11.375415802001953

Token 70: '(sum' (ID: 45528)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.019138772040605545
    2. '(sum' → logprob: -4.269138813018799
    3. '(A' → logprob: -5.894138813018799
    4. '(max' → logprob: -6.394138813018799
    5. '('' → logprob: -8.64413833618164
    6. '(
' → logprob: -9.39413833618164
    7. 'sum' → logprob: -9.64413833618164
    8. '(len' → logprob: -9.89413833618164
    9. '((' → logprob: -10.01913833618164
    10. '()' → logprob: -10.26913833618164

Token 71: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.20990392565727234
    2. '(' → logprob: -1.7099039554595947
    3. '(-' → logprob: -4.834903717041016
    4. '(a' → logprob: -8.459903717041016
    5. '([' → logprob: -9.709903717041016
    6. '(
' → logprob: -9.709903717041016
    7. '([-' → logprob: -10.084903717041016
    8. ')' → logprob: -10.209903717041016
    9. '()' → logprob: -10.834903717041016
    10. '((' → logprob: -11.084903717041016

Token 72: ')*' (ID: 11043)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.5759464502334595
    2. ')' → logprob: -0.8259464502334595
    3. ')))' → logprob: -12.325946807861328
    4. ' )' → logprob: -13.950946807861328
    5. ' ))' → logprob: -14.450946807861328
    6. '))
' → logprob: -15.075946807861328
    7. ')
' → logprob: -15.950946807861328
    8. ')>' → logprob: -15.950946807861328
    9. '])' → logprob: -16.075946807861328
    10. ')}' → logprob: -16.450946807861328

Token 73: '(-' (ID: 8087)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.008415993303060532
    2. ' -' → logprob: -5.133416175842285
    3. '(-' → logprob: -6.008416175842285
    4. ' (-' → logprob: -10.633416175842285
    5. '(' → logprob: -13.383416175842285
    6. ' ' → logprob: -15.883416175842285
    7. '1' → logprob: -16.00841522216797
    8. ')' → logprob: -16.25841522216797
    9. '−' → logprob: -16.38341522216797
    10. '   ' → logprob: -16.38341522216797

Token 74: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.0280383548888494e-06
    2. ')' → logprob: -14.500000953674316
    3. ' ' → logprob: -14.500000953674316
    4. '   ' → logprob: -17.250001907348633
    5. '```' → logprob: -18.375001907348633
    6. '１' → logprob: -19.250001907348633
    7. '  ' → logprob: -19.500001907348633
    8. '2' → logprob: -19.750001907348633
    9. '۱' → logprob: -20.312501907348633
    10. '    ' → logprob: -20.562501907348633

Token 75: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.749814019713085e-06
    2. '))' → logprob: -12.000006675720215
    3. ' )' → logprob: -15.000006675720215
    4. ')
' → logprob: -16.25000762939453
    5. ')`' → logprob: -16.25000762939453
    6. ')))' → logprob: -18.75000762939453
    7. '`)' → logprob: -19.00000762939453
    8. '）' → logprob: -19.50000762939453
    9. ')}' → logprob: -19.62500762939453
    10. '),' → logprob: -20.00000762939453


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 73
Tokens correctement prédits (1ère position, stricte): 34
Tokens correctement prédits (1ère position, avec adaptation): 34
Tokens correctement prédits (top 10): 63
Précision stricte (1ère position): 46.58%
Précision adaptée (1ère position): 46.58%
Précision (top 10): 86.30%
================================================================================
