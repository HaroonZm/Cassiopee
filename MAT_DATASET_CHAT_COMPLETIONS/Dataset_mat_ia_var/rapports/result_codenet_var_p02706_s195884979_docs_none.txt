================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:17:24
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N, M = map(int, input().split())
A = list(map(int, input().split()))
ans = N - sum(A)
if ans < 0:
    ans = -1
print(ans)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' M' (ID: 391)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.2702905237674713
    2. ',' → logprob: -1.645290493965149
    3. ' =' → logprob: -3.1452906131744385
    4. '```' → logprob: -8.64529037475586
    5. ')' → logprob: -8.89529037475586
    6. ';' → logprob: -9.02029037475586
    7. ' ,' → logprob: -9.77029037475586
    8. '.' → logprob: -9.77029037475586
    9. '[' → logprob: -9.89529037475586
    10. '#' → logprob: -10.27029037475586

Token 4: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.25426819920539856
    2. 'map' → logprob: -2.379268169403076
    3. ' ' → logprob: -2.879268169403076
    4. ' input' → logprob: -3.379268169403076
    5. '10' → logprob: -3.879268169403076
    6. 'input' → logprob: -4.254268169403076
    7. '0' → logprob: -6.129268169403076
    8. ' int' → logprob: -6.504268169403076
    9. ' list' → logprob: -7.254268169403076
    10. 'int' → logprob: -7.379268169403076

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.024940812960267067
    2. '(lambda' → logprob: -4.2749409675598145
    3. '(int' → logprob: -5.2749409675598145
    4. '```' → logprob: -6.0249409675598145
    5. '(str' → logprob: -6.3999409675598145
    6. ')' → logprob: -8.149940490722656
    7. '<|end|>' → logprob: -8.149940490722656
    8. '[int' → logprob: -9.024940490722656
    9. '(input' → logprob: -9.149940490722656
    10. '(
' → logprob: -9.899940490722656

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.10278116166591644
    2. '(' → logprob: -2.977781057357788
    3. ')' → logprob: -3.102781057357788
    4. '(int' → logprob: -7.477781295776367
    5. 'input' → logprob: -7.727781295776367
    6. '(user' → logprob: -9.102781295776367
    7. '(str' → logprob: -9.102781295776367
    8. '```' → logprob: -9.477781295776367
    9. ')(' → logprob: -9.852781295776367
    10. '<input' → logprob: -9.977781295776367

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.06198427081108093
    2. ' input' → logprob: -2.8119843006134033
    3. '(input' → logprob: -11.061984062194824
    4. ',input' → logprob: -14.561984062194824
    5. ')' → logprob: -15.311984062194824
    6. '=input' → logprob: -16.68698501586914
    7. '```' → logprob: -16.81198501586914
    8. '<input' → logprob: -17.31198501586914
    9. '	input' → logprob: -17.56198501586914
    10. '[input' → logprob: -17.81198501586914

Token 8: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.41789960861206055
    2. '()' → logprob: -1.1678996086120605
    3. ')' → logprob: -4.7928996086120605
    4. '().' → logprob: -4.9178996086120605
    5. '(' → logprob: -5.2928996086120605
    6. '('' → logprob: -5.5428996086120605
    7. '());' → logprob: -6.6678996086120605
    8. '`()' → logprob: -7.0428996086120605
    9. '(""))' → logprob: -7.4178996086120605
    10. '()))' → logprob: -7.4178996086120605

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0019795489497482777
    2. 'strip' → logprob: -6.251979351043701
    3. ')' → logprob: -10.75197982788086
    4. 'rstrip' → logprob: -11.12697982788086
    5. 'read' → logprob: -11.50197982788086
    6. ' split' → logprob: -12.50197982788086
    7. 'spl' → logprob: -14.87697982788086
    8. '(split' → logprob: -15.62697982788086
    9. 'startswith' → logprob: -15.75197982788086
    10. 'replace' → logprob: -16.00197982788086

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.011346656829118729
    2. '())' → logprob: -4.761346817016602
    3. '))' → logprob: -6.136346817016602
    4. '()' → logprob: -8.136346817016602
    5. '`)' → logprob: -8.636346817016602
    6. '(' → logprob: -9.761346817016602
    7. '()))' → logprob: -11.886346817016602
    8. '')' → logprob: -12.261346817016602
    9. ')`' → logprob: -12.261346817016602
    10. '>)' → logprob: -12.886346817016602

Token 11: 'A' (ID: 32)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.7660797834396362
    2. 'a' → logprob: -1.8910797834396362
    3. 'for' → logprob: -2.016079902648926
    4. '#' → logprob: -3.016079902648926
    5. '`' → logprob: -3.391079902648926
    6. '```' → logprob: -3.516079902648926
    7. ',' → logprob: -3.641079902648926
    8. '\' → logprob: -3.891079902648926
    9. 'x' → logprob: -4.266079902648926
    10. '
' → logprob: -4.391079902648926

Token 12: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0028269849717617035
    2. '_' → logprob: -7.252827167510986
    3. '.' → logprob: -7.502827167510986
    4. '[]' → logprob: -7.627827167510986
    5. '[A' → logprob: -7.752827167510986
    6. '[i' → logprob: -8.627826690673828
    7. '[:]' → logprob: -9.502826690673828
    8. '=' → logprob: -9.627826690673828
    9. '\[' → logprob: -9.627826690673828
    10. 'A' → logprob: -9.877826690673828

Token 13: ' list' (ID: 1562)
  Prédit: ' list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.44794660806655884
    2. 'list' → logprob: -1.072946548461914
    3. ' [' → logprob: -4.572946548461914
    4. '[' → logprob: -5.447946548461914
    5. ' []' → logprob: -5.947946548461914
    6. '[]' → logprob: -6.572946548461914
    7. '[list' → logprob: -8.322946548461914
    8. 'input' → logprob: -10.072946548461914
    9. 'map' → logprob: -10.322946548461914
    10. ' map' → logprob: -10.322946548461914

Token 14: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0001992490579141304
    2. '(range' → logprob: -9.250199317932129
    3. '(
' → logprob: -10.875199317932129
    4. ' (' → logprob: -11.250199317932129
    5. '(A' → logprob: -11.375199317932129
    6. '```' → logprob: -11.375199317932129
    7. '(.' → logprob: -12.000199317932129
    8. '("("' → logprob: -12.125199317932129
    9. '(

' → logprob: -12.250199317932129
    10. '(open' → logprob: -13.000199317932129

Token 15: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.1807059794664383
    2. '(' → logprob: -1.8057060241699219
    3. '(str' → logprob: -7.180706024169922
    4. '(input' → logprob: -9.180706024169922
    5. '(eval' → logprob: -11.305706024169922
    6. '(
' → logprob: -11.680706024169922
    7. '[int' → logprob: -11.805706024169922
    8. '<int' → logprob: -11.805706024169922
    9. '(float' → logprob: -11.805706024169922
    10. '(lambda' → logprob: -12.055706024169922

Token 16: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.1700924038887024
    2. ',input' → logprob: -2.1700923442840576
    3. '(input' → logprob: -3.2950923442840576
    4. '(' → logprob: -5.295092582702637
    5. ' ,' → logprob: -9.795092582702637
    6. 'input' → logprob: -10.045092582702637
    7. '(int' → logprob: -11.045092582702637
    8. ',int' → logprob: -11.295092582702637
    9. '```' → logprob: -11.420092582702637
    10. '(),' → logprob: -11.795092582702637

Token 17: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.313264936208725
    2. ' input' → logprob: -1.3132649660110474
    3. '(input' → logprob: -13.438264846801758
    4. ',input' → logprob: -14.063264846801758
    5. '=input' → logprob: -15.063264846801758
    6. '	input' → logprob: -15.188264846801758
    7. '<input' → logprob: -15.688264846801758
    8. ')' → logprob: -16.688264846801758
    9. '_input' → logprob: -16.813264846801758
    10. ' ' → logprob: -17.313264846801758

Token 18: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.012528604827821255
    2. '()' → logprob: -4.637528419494629
    3. '())' → logprob: -6.762528419494629
    4. '()))' → logprob: -7.137528419494629
    5. '(' → logprob: -7.887528419494629
    6. '(.' → logprob: -9.137528419494629
    7. '()));' → logprob: -9.512528419494629
    8. '()),' → logprob: -10.512528419494629
    9. '()-' → logprob: -10.512528419494629
    10. '());' → logprob: -10.637528419494629

Token 19: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -2.1008713702030946e-06
    2. 'strip' → logprob: -13.250001907348633
    3. ' split' → logprob: -16.250001907348633
    4. 'rstrip' → logprob: -16.875001907348633
    5. 'spl' → logprob: -17.375001907348633
    6. '(split' → logprob: -18.125001907348633
    7. 'plit' → logprob: -20.000001907348633
    8. '.split' → logprob: -21.250001907348633
    9. ')' → logprob: -21.750001907348633
    10. '_split' → logprob: -21.875001907348633

Token 20: '()))
' (ID: 24521)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.16105574369430542
    2. ')' → logprob: -2.03605580329895
    3. '()))' → logprob: -4.161055564880371
    4. '())' → logprob: -6.411055564880371
    5. '(' → logprob: -7.161055564880371
    6. '()' → logprob: -9.036055564880371
    7. ')))' → logprob: -9.661055564880371
    8. ' ))' → logprob: -12.161055564880371
    9. ''))' → logprob: -13.036055564880371
    10. '),' → logprob: -13.161055564880371

Token 21: 'ans' (ID: 616)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.08580698817968369
    2. 's' → logprob: -3.7108070850372314
    3. '#' → logprob: -4.210806846618652
    4. 'c' → logprob: -4.460806846618652
    5. 'sum' → logprob: -5.085806846618652
    6. '.' → logprob: -5.710806846618652
    7. 'count' → logprob: -6.210806846618652
    8. 'd' → logprob: -6.210806846618652
    9. 'r' → logprob: -6.335806846618652
    10. 'result' → logprob: -6.460806846618652

Token 22: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.8803751468658447
    2. '_' → logprob: -0.8803751468658447
    3. ' =' → logprob: -1.8803751468658447
    4. '(' → logprob: -5.130374908447266
    5. '[' → logprob: -5.130374908447266
    6. ' ' → logprob: -6.255374908447266
    7. ' +=' → logprob: -6.755374908447266
    8. '_space' → logprob: -7.255374908447266
    9. '.' → logprob: -7.380374908447266
    10. ')' → logprob: -7.630374908447266

Token 23: ' N' (ID: 478)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.7091087102890015
    2. ' ' → logprob: -0.7091087102890015
    3. ' []' → logprob: -4.959108829498291
    4. ' max' → logprob: -5.459108829498291
    5. 'max' → logprob: -6.959108829498291
    6. ' [' → logprob: -7.334108829498291
    7. ' A' → logprob: -7.459108829498291
    8. '[]' → logprob: -7.459108829498291
    9. '[' → logprob: -7.459108829498291
    10. ' sum' → logprob: -7.709108829498291

Token 24: ' -' (ID: 533)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.792999267578125
    2. ' ' → logprob: -1.167999267578125
    3. '*' → logprob: -2.667999267578125
    4. '-' → logprob: -3.167999267578125
    5. '\n' → logprob: -3.542999267578125
    6. ')' → logprob: -4.167999267578125
    7. '%' → logprob: -4.167999267578125
    8. ' for' → logprob: -4.542999267578125
    9. '\' → logprob: -4.542999267578125
    10. '_' → logprob: -4.917999267578125

Token 25: ' sum' (ID: 4215)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.6373157501220703
    2. 'M' → logprob: -1.3873157501220703
    3. 'sum' → logprob: -2.1373157501220703
    4. 'len' → logprob: -3.3873157501220703
    5. ' M' → logprob: -3.7623157501220703
    6. ' sum' → logprob: -4.13731575012207
    7. 'max' → logprob: -4.63731575012207
    8. ' ' → logprob: -4.88731575012207
    9. 'A' → logprob: -5.13731575012207
    10. ' len' → logprob: -5.38731575012207

Token 26: '(A' (ID: 10706)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014796084724366665
    2. '(lambda' → logprob: -4.639796257019043
    3. '((' → logprob: -6.389796257019043
    4. '(A' → logprob: -6.514796257019043
    5. '(len' → logprob: -7.639796257019043
    6. '(a' → logprob: -7.639796257019043
    7. '(abs' → logprob: -8.514796257019043
    8. '(sum' → logprob: -8.889796257019043
    9. '(int' → logprob: -9.014796257019043
    10. '(|' → logprob: -9.264796257019043

Token 27: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0009429076453670859
    2. '))' → logprob: -7.000942707061768
    3. '[' → logprob: -11.125943183898926
    4. '(' → logprob: -11.875943183898926
    5. ' )' → logprob: -12.750943183898926
    6. ')))' → logprob: -13.375943183898926
    7. '()' → logprob: -13.500943183898926
    8. ')`' → logprob: -13.625943183898926
    9. '())' → logprob: -14.250943183898926
    10. '])' → logprob: -14.500943183898926

Token 28: 'if' (ID: 366)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 29: ' ans' (ID: 3345)
  Prédit: ' ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ans' → logprob: -0.04486227408051491
    2. ' ' → logprob: -3.2948622703552246
    3. 'ans' → logprob: -5.669862270355225
    4. '(ans' → logprob: -6.044862270355225
    5. '  ' → logprob: -7.794862270355225
    6. ' A' → logprob: -8.544862747192383
    7. ' ' → logprob: -8.794862747192383
    8. '	ans' → logprob: -8.919862747192383
    9. ' not' → logprob: -10.794862747192383
    10. '_ans' → logprob: -11.419862747192383

Token 30: ' <' (ID: 464)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.0840442031621933
    2. '>' → logprob: -2.5840442180633545
    3. ' <=' → logprob: -5.709043979644775
    4. ' <' → logprob: -6.959043979644775
    5. ' ==' → logprob: -8.334044456481934
    6. ' ' → logprob: -8.709044456481934
    7. '<' → logprob: -8.959044456481934
    8. '<=' → logprob: -8.959044456481934
    9. ' >=' → logprob: -9.084044456481934
    10. '==' → logprob: -10.459044456481934

Token 31: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.42909473180770874
    2. ' ' → logprob: -1.0540947914123535
    3. '=' → logprob: -8.554094314575195
    4. '1' → logprob: -8.679094314575195
    5. ' M' → logprob: -11.804094314575195
    6. '10' → logprob: -12.304094314575195
    7. '2' → logprob: -12.429094314575195
    8. '3' → logprob: -12.804094314575195
    9. 'M' → logprob: -13.054094314575195
    10. '4' → logprob: -13.304094314575195

Token 32: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0017424124525859952
    2. ' ' → logprob: -6.376742362976074
    3. '1' → logprob: -10.501742362976074
    4. 'M' → logprob: -12.376742362976074
    5. '=' → logprob: -12.376742362976074
    6. '2' → logprob: -13.251742362976074
    7. '-' → logprob: -13.876742362976074
    8. '3' → logprob: -14.501742362976074
    9. '  ' → logprob: -15.626742362976074
    10. '10' → logprob: -15.876742362976074

Token 33: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0008764470112510026
    2. ' :' → logprob: -7.125876426696777
    3. ':
' → logprob: -9.625876426696777
    4. '):' → logprob: -13.000876426696777
    5. ' :
' → logprob: -13.625876426696777
    6. ' or' → logprob: -14.375876426696777
    7. '':' → logprob: -14.875876426696777
    8. '>:' → logprob: -15.500876426696777
    9. '：' → logprob: -15.875876426696777
    10. '":' → logprob: -16.000877380371094

Token 34: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.26255348324775696
    2. ' print' → logprob: -1.6375534534454346
    3. '\n' → logprob: -3.8875534534454346
    4. ' \' → logprob: -5.262553691864014
    5. '    ' → logprob: -5.512553691864014
    6. '\' → logprob: -6.262553691864014
    7. '   ' → logprob: -6.762553691864014
    8. ' ' → logprob: -6.762553691864014
    9. '"' → logprob: -7.887553691864014
    10. '"\' → logprob: -8.012553215026855

Token 35: ' ans' (ID: 3345)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.34998810291290283
    2. ' print' → logprob: -1.2249881029129028
    3. '0' → logprob: -6.849987983703613
    4. '   ' → logprob: -8.974987983703613
    5. ' ' → logprob: -8.974987983703613
    6. '\n' → logprob: -9.724987983703613
    7. '```' → logprob: -10.349987983703613
    8. 'pr' → logprob: -10.599987983703613
    9. ' -' → logprob: -11.349987983703613
    10. '    ' → logprob: -11.349987983703613

Token 36: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6956235766410828
    2. ' =' → logprob: -0.6956235766410828
    3. 'print' → logprob: -6.320623397827148
    4. '0' → logprob: -8.570623397827148
    5. ' print' → logprob: -8.570623397827148
    6. ' ' → logprob: -9.570623397827148
    7. '>' → logprob: -10.195623397827148
    8. '=-' → logprob: -10.695623397827148
    9. ':' → logprob: -10.945623397827148
    10. '   ' → logprob: -11.070623397827148

Token 37: ' -' (ID: 533)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.003492089221253991
    2. ' ' → logprob: -5.7534918785095215
    3. '-' → logprob: -8.12849235534668
    4. ' -' → logprob: -11.25349235534668
    5. '   ' → logprob: -13.25349235534668
    6. '`' → logprob: -13.75349235534668
    7. '"' → logprob: -14.12849235534668
    8. '  ' → logprob: -14.19099235534668
    9. '```' → logprob: -15.62849235534668
    10. 's' → logprob: -15.62849235534668

Token 38: '1' (ID: 16)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.038319967687129974
    2. '1' → logprob: -3.2883200645446777
    3. '(ans' → logprob: -9.16331958770752
    4. ' ans' → logprob: -9.53831958770752
    5. '-' → logprob: -9.66331958770752
    6. '	ans' → logprob: -10.91331958770752
    7. '=' → logprob: -11.78831958770752
    8. '_ans' → logprob: -12.41331958770752
    9. 'a' → logprob: -13.41331958770752
    10. 'Ans' → logprob: -14.03831958770752

Token 39: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0025888581294566393
    2. 'else' → logprob: -6.002588748931885
    3. '```' → logprob: -9.377589225769043
    4. '\' → logprob: -11.252589225769043
    5. '\n' → logprob: -11.877589225769043
    6. ' print' → logprob: -12.377589225769043
    7. ' else' → logprob: -14.002589225769043
    8. '
' → logprob: -14.252589225769043
    9. 'pr' → logprob: -14.877589225769043
    10. '' → logprob: -14.877589225769043

Token 40: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.004098346922546625
    2. 'else' → logprob: -5.504098415374756
    3. '```' → logprob: -10.879097938537598
    4. ' print' → logprob: -14.629097938537598
    5. '\' → logprob: -15.629097938537598
    6. ' else' → logprob: -15.879097938537598
    7. 'pr' → logprob: -16.004098892211914
    8. '
' → logprob: -16.254098892211914
    9. '``' → logprob: -16.379098892211914
    10. '\n' → logprob: -17.504098892211914

Token 41: '(ans' (ID: 70054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.008627813309431076
    2. '(ans' → logprob: -4.758627891540527
    3. '("("' → logprob: -11.508627891540527
    4. '('' → logprob: -14.008627891540527
    5. '(`' → logprob: -14.758627891540527
    6. '()' → logprob: -14.883627891540527
    7. ' (' → logprob: -15.008627891540527
    8. '(a' → logprob: -15.133627891540527
    9. '((' → logprob: -15.383627891540527
    10. '(answer' → logprob: -16.13362693786621

Token 42: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9361264946837764e-07
    2. ' )' → logprob: -16.5
    3. '))' → logprob: -17.375
    4. '')' → logprob: -18.5
    5. ')`' → logprob: -18.75
    6. '`)' → logprob: -19.125
    7. ')
' → logprob: -19.375
    8. '）' → logprob: -19.75
    9. '")' → logprob: -20.875
    10. '),' → logprob: -21.375


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 40
Tokens correctement prédits (1ère position, stricte): 11
Tokens correctement prédits (1ère position, avec adaptation): 11
Tokens correctement prédits (top 10): 28
Précision stricte (1ère position): 27.50%
Précision adaptée (1ère position): 27.50%
Précision (top 10): 70.00%
================================================================================
