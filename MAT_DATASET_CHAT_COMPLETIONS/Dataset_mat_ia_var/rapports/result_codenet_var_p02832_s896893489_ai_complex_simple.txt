================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:34:33
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from functools import reduce
from itertools import accumulate, dropwhile
from operator import eq, add
from sys import stdin

n = int(next(stdin).rstrip())
br = list(map(int, next(stdin).rstrip().split()))

def find_cur(seq):
    return reduce(lambda acc, x: x if eq(x, acc+1) else acc, seq, 0)

cur = find_cur(br)

print({True: n - cur, False: -1}[cur != 0])
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' functools' (ID: 142636)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' reduce' (ID: 10389)
  Prédit: 'wrap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'wrap' → logprob: -0.25372281670570374
    2. 'partial' → logprob: -1.7537227869033813
    3. 'reduce' → logprob: -3.503722906112671
    4. ' wraps' → logprob: -4.003722667694092
    5. 'l' → logprob: -6.753722667694092
    6. ' partial' → logprob: -7.378722667694092
    7. 'cache' → logprob: -8.37872314453125
    8. '```' → logprob: -8.62872314453125
    9. 'cached' → logprob: -9.00372314453125
    10. 'cmp' → logprob: -9.25372314453125

Token 4: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.010317044332623482
    2. '(lambda' → logprob: -4.760316848754883
    3. ' (' → logprob: -7.385316848754883
    4. ',' → logprob: -7.885316848754883
    5. 'def' → logprob: -8.135316848754883
    6. '.' → logprob: -8.635316848754883
    7. '```' → logprob: -10.135316848754883
    8. '(
' → logprob: -10.385316848754883
    9. 'lambda' → logprob: -10.635316848754883
    10. ' ' → logprob: -10.760316848754883

Token 5: 'from' (ID: 2845)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03125377744436264
    2. 'def' → logprob: -4.156253814697266
    3. '\' → logprob: -4.781253814697266
    4. ' ' → logprob: -5.906253814697266
    5. '(
' → logprob: -6.906253814697266
    6. ',' → logprob: -7.156253814697266
    7. '(lambda' → logprob: -7.906253814697266
    8. '```' → logprob: -8.281253814697266
    9. ' (' → logprob: -8.406253814697266
    10. 'd' → logprob: -8.781253814697266

Token 6: ' itertools' (ID: 103178)
  Prédit: ' operator'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' operator' → logprob: -0.15553592145442963
    2. ' itertools' → logprob: -2.405535936355591
    3. ' math' → logprob: -3.905535936355591
    4. ' collections' → logprob: -3.905535936355591
    5. 'operator' → logprob: -4.405535697937012
    6. 'collections' → logprob: -7.780535697937012
    7. ' typing' → logprob: -8.030535697937012
    8. 'math' → logprob: -8.155535697937012
    9. ' os' → logprob: -8.655535697937012
    10. ' ' → logprob: -9.655535697937012

Token 7: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.01667022332549095
    2. 'import' → logprob: -4.141670227050781
    3. '.' → logprob: -7.891670227050781
    4. ' ' → logprob: -9.141670227050781
    5. ' .' → logprob: -9.516670227050781
    6. '.import' → logprob: -9.891670227050781
    7. '	import' → logprob: -11.391670227050781
    8. '_import' → logprob: -12.016670227050781
    9. ' itertools' → logprob: -12.641670227050781
    10. '<|end|>' → logprob: -13.391670227050781

Token 8: ' accumulate' (ID: 74226)
  Prédit: ' group'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' group' → logprob: -0.8000409603118896
    2. 'group' → logprob: -2.0500409603118896
    3. 'acc' → logprob: -2.3000409603118896
    4. 'count' → logprob: -2.4250409603118896
    5. ' cycle' → logprob: -2.6750409603118896
    6. ' accumulate' → logprob: -3.1750409603118896
    7. 'cycle' → logprob: -3.3000409603118896
    8. ' chain' → logprob: -3.6750409603118896
    9. 'chain' → logprob: -4.175041198730469
    10. 'com' → logprob: -4.300041198730469

Token 9: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.033279210329055786
    2. '(
' → logprob: -3.5332791805267334
    3. 'def' → logprob: -6.4082794189453125
    4. ',' → logprob: -7.2832794189453125
    5. '```' → logprob: -8.158279418945312
    6. '\' → logprob: -8.533279418945312
    7. '\n' → logprob: -8.658279418945312
    8. '`' → logprob: -9.533279418945312
    9. '(

' → logprob: -9.533279418945312
    10. '\(' → logprob: -9.783279418945312

Token 10: ' drop' (ID: 9440)
  Prédit: 'group'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'group' → logprob: -0.42702800035476685
    2. ' group' → logprob: -1.927027940750122
    3. 'chain' → logprob: -2.302027940750122
    4. ' chain' → logprob: -3.052027940750122
    5. 'product' → logprob: -4.177028179168701
    6. 'com' → logprob: -4.302028179168701
    7. 'count' → logprob: -4.427028179168701
    8. ' product' → logprob: -5.427028179168701
    9. 'tee' → logprob: -6.177028179168701
    10. 'per' → logprob: -6.677028179168701

Token 11: 'while' (ID: 7032)
  Prédit: 'while'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' → logprob: -4.4060561776859686e-05
    2. 'While' → logprob: -10.625043869018555
    3. 'w' → logprob: -11.875043869018555
    4. ' while' → logprob: -12.250043869018555
    5. 'wh' → logprob: -13.125043869018555
    6. '```' → logprob: -13.375043869018555
    7. 'duplicates' → logprob: -13.625043869018555
    8. 'exact' → logprob: -15.125043869018555
    9. '

' → logprob: -15.375043869018555
    10. 'from' → logprob: -15.500043869018555

Token 12: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3991081714630127
    2. ',' → logprob: -2.2741081714630127
    3. '\' → logprob: -2.3991081714630127
    4. '(
' → logprob: -2.5241081714630127
    5. '\n' → logprob: -3.5241081714630127
    6. ',
' → logprob: -5.024107933044434
    7. '```' → logprob: -5.524107933044434
    8. '`' → logprob: -5.899107933044434
    9. 'def' → logprob: -6.024107933044434
    10. 'import' → logprob: -6.149107933044434

Token 13: 'from' (ID: 2845)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.13671182096004486
    2. '(
' → logprob: -2.761711835861206
    3. ',' → logprob: -3.636711835861206
    4. '\n' → logprob: -4.761711597442627
    5. '\' → logprob: -4.886711597442627
    6. 'def' → logprob: -5.011711597442627
    7. '```' → logprob: -6.136711597442627
    8. '`' → logprob: -6.136711597442627
    9. 'd' → logprob: -6.511711597442627
    10. ',
' → logprob: -6.636711597442627

Token 14: ' operator' (ID: 11019)
  Prédit: ' operator'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' operator' → logprob: -0.020349403843283653
    2. 'operator' → logprob: -4.645349502563477
    3. ' math' → logprob: -5.020349502563477
    4. ' collections' → logprob: -5.895349502563477
    5. ' os' → logprob: -8.020349502563477
    6. 'collections' → logprob: -8.270349502563477
    7. 'math' → logprob: -8.645349502563477
    8. ' ' → logprob: -8.895349502563477
    9. ' more' → logprob: -9.895349502563477
    10. ' heap' → logprob: -10.020349502563477

Token 15: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.10898452997207642
    2. 'import' → logprob: -2.3589844703674316
    3. '.' → logprob: -4.858984470367432
    4. ' .' → logprob: -7.858984470367432
    5. ' ' → logprob: -8.10898494720459
    6. '<|end|>' → logprob: -8.73398494720459
    7. ',' → logprob: -10.10898494720459
    8. ' as' → logprob: -10.60898494720459
    9. ' ,' → logprob: -10.85898494720459
    10. '	import' → logprob: -11.85898494720459

Token 16: ' eq' (ID: 18955)
  Prédit: ' add'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' add' → logprob: -0.04144110158085823
    2. ' import' → logprob: -4.041440963745117
    3. ' ' → logprob: -4.666440963745117
    4. ' mul' → logprob: -5.041440963745117
    5. ' item' → logprob: -5.666440963745117
    6. 'add' → logprob: -5.916440963745117
    7. 'import' → logprob: -8.416440963745117
    8. ' method' → logprob: -9.291440963745117
    9. ' icon' → logprob: -9.541440963745117
    10. ' ad' → logprob: -9.541440963745117

Token 17: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.3113741874694824
    2. '(' → logprob: -1.6863741874694824
    3. ',
' → logprob: -3.4363741874694824
    4. '.' → logprob: -4.436374187469482
    5. ')' → logprob: -4.811374187469482
    6. '(
' → logprob: -5.061374187469482
    7. '
' → logprob: -5.061374187469482
    8. '\n' → logprob: -5.561374187469482
    9. ' ' → logprob: -5.811374187469482
    10. '\' → logprob: -5.811374187469482

Token 18: ' add' (ID: 1147)
  Prédit: 'ne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ne' → logprob: -0.4212042987346649
    2. 'lt' → logprob: -1.9212043285369873
    3. 'item' → logprob: -2.6712043285369873
    4. 'add' → logprob: -2.7962043285369873
    5. 'le' → logprob: -4.421204090118408
    6. ' ne' → logprob: -4.546204090118408
    7. 'and' → logprob: -4.671204090118408
    8. 'ge' → logprob: -5.421204090118408
    9. 'mul' → logprob: -5.546204090118408
    10. 'getitem' → logprob: -5.546204090118408

Token 19: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.13283883035182953
    2. '(
' → logprob: -2.507838726043701
    3. ',' → logprob: -4.257838726043701
    4. '\' → logprob: -4.507838726043701
    5. '\n' → logprob: -5.007838726043701
    6. '(

' → logprob: -6.382838726043701
    7. '.' → logprob: -6.632838726043701
    8. ',
' → logprob: -6.632838726043701
    9. 'def' → logprob: -6.882838726043701
    10. '#' → logprob: -7.007838726043701

Token 20: 'from' (ID: 2845)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -1.4609994888305664
    2. '(' → logprob: -1.7109994888305664
    3. ',' → logprob: -1.7109994888305664
    4. '

' → logprob: -1.7109994888305664
    5. 'def' → logprob: -2.3359994888305664
    6. '\n' → logprob: -3.4609994888305664
    7. '(
' → logprob: -3.8359994888305664
    8. ',
' → logprob: -3.8359994888305664
    9. ',

' → logprob: -4.710999488830566
    10. '' → logprob: -5.210999488830566

Token 21: ' sys' (ID: 12228)
  Prédit: 'collections'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'collections' → logprob: -0.9854455590248108
    2. ' collections' → logprob: -1.610445499420166
    3. 'math' → logprob: -2.360445499420166
    4. ' math' → logprob: -2.610445499420166
    5. ' functools' → logprob: -2.610445499420166
    6. ' typing' → logprob: -3.485445499420166
    7. 'typing' → logprob: -3.610445499420166
    8. '_' → logprob: -3.610445499420166
    9. 'operator' → logprob: -4.235445499420166
    10. ' itertools' → logprob: -4.235445499420166

Token 22: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.18085512518882751
    2. 'import' → logprob: -1.80585515499115
    3. '.' → logprob: -7.1808552742004395
    4. '<|end|>' → logprob: -9.055854797363281
    5. ',' → logprob: -9.555854797363281
    6. ' ' → logprob: -9.680854797363281
    7. '	import' → logprob: -10.430854797363281
    8. ' ,' → logprob: -11.180854797363281
    9. '_import' → logprob: -11.555854797363281
    10. '.import' → logprob: -11.930854797363281

Token 23: ' stdin' (ID: 75143)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.5502148866653442
    2. 'argv' → logprob: -1.1752148866653442
    3. ' stdin' → logprob: -2.5502147674560547
    4. 'stdout' → logprob: -4.425214767456055
    5. 'stderr' → logprob: -4.800214767456055
    6. ' argv' → logprob: -4.925214767456055
    7. 'version' → logprob: -5.800214767456055
    8. 'exit' → logprob: -6.175214767456055
    9. 'max' → logprob: -6.550214767456055
    10. 'modules' → logprob: -7.175214767456055

Token 24: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.8745602965354919
    2. '

' → logprob: -0.8745602965354919
    3. '\n' → logprob: -2.6245603561401367
    4. 'def' → logprob: -2.9995603561401367
    5. 'n' → logprob: -4.874560356140137
    6. '\' → logprob: -4.874560356140137
    7. '' → logprob: -5.374560356140137
    8. 'newline' → logprob: -5.624560356140137
    9. '[' → logprob: -5.749560356140137
    10. '```' → logprob: -5.749560356140137

Token 25: 'n' (ID: 77)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.13576258718967438
    2. 'n' → logprob: -3.1357626914978027
    3. 'd' → logprob: -3.3857626914978027
    4. 'for' → logprob: -4.260762691497803
    5. 'data' → logprob: -4.385762691497803
    6. '```' → logprob: -5.260762691497803
    7. '#' → logprob: -5.510762691497803
    8. 'class' → logprob: -5.635762691497803
    9. '\' → logprob: -6.135762691497803
    10. '`' → logprob: -6.510762691497803

Token 26: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.05699675530195236
    2. '=' → logprob: -2.9319968223571777
    3. ' ' → logprob: -6.431996822357178
    4. ',' → logprob: -8.18199634552002
    5. 'u' → logprob: -9.55699634552002
    6. '  ' → logprob: -9.68199634552002
    7. '.' → logprob: -10.68199634552002
    8. ' ,' → logprob: -10.80699634552002
    9. '_' → logprob: -11.55699634552002
    10. ' =
' → logprob: -11.55699634552002

Token 27: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.01706511899828911
    2. 'int' → logprob: -4.142065048217773
    3. ' ' → logprob: -7.017065048217773
    4. '10' → logprob: -9.767065048217773
    5. ' input' → logprob: -10.642065048217773
    6. '=int' → logprob: -11.392065048217773
    7. '5' → logprob: -11.517065048217773
    8. '1' → logprob: -12.142065048217773
    9. '[int' → logprob: -12.267065048217773
    10. '0' → logprob: -12.392065048217773

Token 28: '(next' (ID: 28757)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.18819208443164825
    2. '(stdin' → logprob: -1.8131921291351318
    3. '(input' → logprob: -4.813191890716553
    4. '(st' → logprob: -8.688192367553711
    5. ' (' → logprob: -10.313192367553711
    6. '('' → logprob: -11.188192367553711
    7. '(
' → logprob: -11.438192367553711
    8. '(std' → logprob: -11.438192367553711
    9. '(n' → logprob: -11.563192367553711
    10. '()' → logprob: -11.688192367553711

Token 29: '(stdin' (ID: 176594)
  Prédit: '(stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(stdin' → logprob: -0.0007015953888185322
    2. '(' → logprob: -7.375701427459717
    3. '(st' → logprob: -9.625701904296875
    4. '(input' → logprob: -13.000701904296875
    5. 'stdin' → logprob: -13.500701904296875
    6. '()' → logprob: -13.500701904296875
    7. '(std' → logprob: -14.125701904296875
    8. '(sys' → logprob: -14.375701904296875
    9. '(stdout' → logprob: -14.625701904296875
    10. '(cin' → logprob: -15.250701904296875

Token 30: ').' (ID: 741)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.19869260489940643
    2. '))' → logprob: -2.198692560195923
    3. '())' → logprob: -3.073692560195923
    4. '()))' → logprob: -3.823692560195923
    5. '()' → logprob: -6.948692798614502
    6. ').' → logprob: -9.448692321777344
    7. '().' → logprob: -10.323692321777344
    8. '(' → logprob: -10.823692321777344
    9. ')))' → logprob: -11.448692321777344
    10. '),' → logprob: -11.823692321777344

Token 31: 'rstrip' (ID: 180429)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.1323554366827011
    2. 'read' → logprob: -2.1323554515838623
    3. 'rstrip' → logprob: -5.382355213165283
    4. ')' → logprob: -7.757355213165283
    5. ' readline' → logprob: -8.132355690002441
    6. '.readline' → logprob: -9.382355690002441
    7. 'line' → logprob: -13.007355690002441
    8. 'split' → logprob: -13.507355690002441
    9. '__' → logprob: -13.507355690002441
    10. '```' → logprob: -13.882355690002441

Token 32: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.630803644657135
    2. '())' → logprob: -0.880803644657135
    3. '))' → logprob: -3.2558035850524902
    4. '()))' → logprob: -4.63080358505249
    5. '()' → logprob: -5.38080358505249
    6. '(' → logprob: -8.130804061889648
    7. '())
' → logprob: -9.505804061889648
    8. '')' → logprob: -10.755804061889648
    9. ')
' → logprob: -11.255804061889648
    10. ')\' → logprob: -11.505804061889648

Token 33: 'br' (ID: 1697)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.47699183225631714
    2. 'data' → logprob: -1.726991891860962
    3. ')' → logprob: -2.976991891860962
    4. 'arr' → logprob: -3.101991891860962
    5. 'numbers' → logprob: -3.101991891860962
    6. 's' → logprob: -4.976991653442383
    7. 'result' → logprob: -5.226991653442383
    8. 'n' → logprob: -5.351991653442383
    9. '
' → logprob: -5.351991653442383
    10. 'sequence' → logprob: -5.476991653442383

Token 34: ' =' (ID: 314)
  Prédit: 'ackets'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ackets' → logprob: -0.1459658145904541
    2. 'e' → logprob: -2.520965814590454
    3. 'acks' → logprob: -4.395965576171875
    4. 'anches' → logprob: -5.020965576171875
    5. 'aces' → logprob: -5.270965576171875
    6. 'ace' → logprob: -5.270965576171875
    7. '```' → logprob: -5.395965576171875
    8. 'ack' → logprob: -5.520965576171875
    9. 'acket' → logprob: -5.520965576171875
    10. 'a' → logprob: -5.770965576171875

Token 35: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -1.3520839214324951
    2. ' [' → logprob: -1.4770839214324951
    3. ' list' → logprob: -1.6020839214324951
    4. '[next' → logprob: -1.8520839214324951
    5. '[' → logprob: -2.602083921432495
    6. '[n' → logprob: -3.977083921432495
    7. ' []' → logprob: -4.102084159851074
    8. '[]' → logprob: -4.477084159851074
    9. '[list' → logprob: -4.477084159851074
    10. '[int' → logprob: -5.227084159851074

Token 36: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.8952142000198364
    2. '(map' → logprob: -1.1452142000198364
    3. '(acc' → logprob: -2.395214080810547
    4. '()' → logprob: -2.645214080810547
    5. '(stdin' → logprob: -2.770214080810547
    6. '(filter' → logprob: -4.145214080810547
    7. '(range' → logprob: -4.520214080810547
    8. '(next' → logprob: -5.020214080810547
    9. '(drop' → logprob: -5.520214080810547
    10. '(br' → logprob: -6.145214080810547

Token 37: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.000431861262768507
    2. '(' → logprob: -8.375432014465332
    3. '(str' → logprob: -9.250432014465332
    4. 'int' → logprob: -10.125432014465332
    5. '(lambda' → logprob: -11.000432014465332
    6. ',int' → logprob: -11.250432014465332
    7. ')' → logprob: -11.250432014465332
    8. '<int' → logprob: -11.375432014465332
    9. '=int' → logprob: -12.750432014465332
    10. '[int' → logprob: -12.875432014465332

Token 38: ',' (ID: 11)
  Prédit: '(next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(next' → logprob: -0.2564353346824646
    2. ',' → logprob: -2.0064353942871094
    3. ',next' → logprob: -3.1314353942871094
    4. '(' → logprob: -3.3814353942871094
    5. '(stdin' → logprob: -4.381435394287109
    6. ' ,' → logprob: -8.13143539428711
    7. '(n' → logprob: -8.13143539428711
    8. '(),' → logprob: -8.50643539428711
    9. ',(' → logprob: -8.75643539428711
    10. ',input' → logprob: -9.00643539428711

Token 39: ' next' (ID: 2613)
  Prédit: 'next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'next' → logprob: -0.007038351148366928
    2. ' next' → logprob: -5.007038116455078
    3. '(next' → logprob: -8.757038116455078
    4. 'stdin' → logprob: -8.757038116455078
    5. 'input' → logprob: -13.382038116455078
    6. '	next' → logprob: -13.507038116455078
    7. '[next' → logprob: -13.632038116455078
    8. ',next' → logprob: -13.632038116455078
    9. ' stdin' → logprob: -13.757038116455078
    10. 'list' → logprob: -14.757038116455078

Token 40: '(stdin' (ID: 176594)
  Prédit: '(stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(stdin' → logprob: -5.3120038501219824e-05
    2. '(std' → logprob: -10.250053405761719
    3. '(' → logprob: -11.125053405761719
    4. '(stdout' → logprob: -13.500053405761719
    5. '(st' → logprob: -14.625053405761719
    6. '(stderr' → logprob: -14.750053405761719
    7. 'stdin' → logprob: -15.125053405761719
    8. ' (' → logprob: -16.12505340576172
    9. '(paren' → logprob: -16.25005340576172
    10. '(s' → logprob: -17.50005340576172

Token 41: ').' (ID: 741)
  Prédit: ').'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ').' → logprob: -0.003219303209334612
    2. '().' → logprob: -6.503219127655029
    3. '()).' → logprob: -6.628219127655029
    4. '.readline' → logprob: -8.128219604492188
    5. ')' → logprob: -9.503219604492188
    6. ' ).' → logprob: -11.628219604492188
    7. '.rstrip' → logprob: -12.753219604492188
    8. ')))' → logprob: -13.003219604492188
    9. '())))' → logprob: -13.503219604492188
    10. ' ' → logprob: -13.753219604492188

Token 42: 'rstrip' (ID: 180429)
  Prédit: 'rstrip'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'rstrip' → logprob: -0.001304522156715393
    2. 'split' → logprob: -6.751304626464844
    3. 'strip' → logprob: -9.501304626464844
    4. 'read' → logprob: -9.751304626464844
    5. 'rs' → logprob: -13.751304626464844
    6. 'rl' → logprob: -15.876304626464844
    7. '.rstrip' → logprob: -16.001304626464844
    8. 'rst' → logprob: -17.376304626464844
    9. 'rcode' → logprob: -18.876304626464844
    10. '```' → logprob: -19.626304626464844

Token 43: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -6.599403423024341e-05
    2. '()' → logprob: -10.000065803527832
    3. ')' → logprob: -11.875065803527832
    4. ').' → logprob: -12.125065803527832
    5. ' ().' → logprob: -12.750065803527832
    6. '())))' → logprob: -13.250065803527832
    7. '())' → logprob: -13.625065803527832
    8. '()).' → logprob: -14.000065803527832
    9. '(' → logprob: -14.500065803527832
    10. ')))' → logprob: -15.000065803527832

Token 44: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -1.0802738870552275e-05
    2. ' split' → logprob: -12.00001049041748
    3. 'strip' → logprob: -13.25001049041748
    4. '(split' → logprob: -13.50001049041748
    5. 'rstrip' → logprob: -13.87501049041748
    6. 'spl' → logprob: -15.12501049041748
    7. 's' → logprob: -16.375011444091797
    8. '.split' → logprob: -16.625011444091797
    9. 'sp' → logprob: -17.000011444091797
    10. ')' → logprob: -17.750011444091797

Token 45: '()))

' (ID: 125972)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.2833612263202667
    2. '())' → logprob: -1.5333611965179443
    3. '()' → logprob: -3.6583611965179443
    4. '(' → logprob: -5.658361434936523
    5. '))' → logprob: -7.158361434936523
    6. '())))' → logprob: -7.908361434936523
    7. ')' → logprob: -8.408361434936523
    8. '('' → logprob: -8.533361434936523
    9. '()))
' → logprob: -9.783361434936523
    10. '("' → logprob: -11.783361434936523

Token 46: 'def' (ID: 1314)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.13141486048698425
    2. '=' → logprob: -3.3814148902893066
    3. '[' → logprob: -4.756414890289307
    4. ':' → logprob: -4.756414890289307
    5. 's' → logprob: -4.756414890289307
    6. '_' → logprob: -5.006414890289307
    7. 'if' → logprob: -5.131414890289307
    8. 'br' → logprob: -5.131414890289307
    9. 'for' → logprob: -5.256414890289307
    10. '(' → logprob: -5.506414890289307

Token 47: ' find' (ID: 1646)
  Prédit: ' is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' is' → logprob: -1.200303554534912
    2. ' count' → logprob: -1.700303554534912
    3. ' find' → logprob: -2.450303554534912
    4. ' solve' → logprob: -2.575303554534912
    5. ' equal' → logprob: -3.200303554534912
    6. ' check' → logprob: -3.200303554534912
    7. ' balanced' → logprob: -3.575303554534912
    8. ' max' → logprob: -3.825303554534912
    9. ' balance' → logprob: -3.825303554534912
    10. ' binary' → logprob: -3.950303554534912

Token 48: '_cur' (ID: 46382)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0739622563123703
    2. '_max' → logprob: -3.3239622116088867
    3. '(' → logprob: -4.448962211608887
    4. '_first' → logprob: -5.073962211608887
    5. '_sub' → logprob: -5.573962211608887
    6. '_equal' → logprob: -6.323962211608887
    7. '_br' → logprob: -6.448962211608887
    8. '_unique' → logprob: -7.323962211608887
    9. '_best' → logprob: -7.448962211608887
    10. '_min' → logprob: -7.448962211608887

Token 49: '(seq' (ID: 78669)
  Prédit: 'rent'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'rent' → logprob: -0.005408896133303642
    2. 'r' → logprob: -5.255408763885498
    3. '_r' → logprob: -9.755409240722656
    4. '(r' → logprob: -9.880409240722656
    5. 'v' → logprob: -11.255409240722656
    6. ' rent' → logprob: -11.380409240722656
    7. '_cont' → logprob: -11.755409240722656
    8. 'rence' → logprob: -12.505409240722656
    9. 's' → logprob: -12.880409240722656
    10. '_pos' → logprob: -13.005409240722656

Token 50: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.05811968073248863
    2. '):' → logprob: -2.933119773864746
    3. 's' → logprob: -7.058119773864746
    4. 'u' → logprob: -7.433119773864746
    5. 'n' → logprob: -7.558119773864746
    6. ',index' → logprob: -8.433119773864746
    7. '):
' → logprob: -9.058119773864746
    8. '[' → logprob: -9.308119773864746
    9. '_,' → logprob: -9.308119773864746
    10. ')' → logprob: -9.308119773864746

Token 51: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.8041176199913025
    2. '   ' → logprob: -1.0541176795959473
    3. '(' → logprob: -1.6791176795959473
    4. '_' → logprob: -5.554117679595947
    5. '():' → logprob: -5.554117679595947
    6. ' ' → logprob: -6.054117679595947
    7. '[' → logprob: -7.179117679595947
    8. ':
' → logprob: -7.929117679595947
    9. '```' → logprob: -7.929117679595947
    10. ' :' → logprob: -8.054117202758789

Token 52: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7659198045730591
    2. ' for' → logprob: -2.1409196853637695
    3. ' return' → logprob: -2.5159196853637695
    4. ' cur' → logprob: -3.1409196853637695
    5. ' max' → logprob: -3.1409196853637695
    6. ' acc' → logprob: -3.2659196853637695
    7. ' res' → logprob: -3.3909196853637695
    8. ' if' → logprob: -3.7659196853637695
    9. ' result' → logprob: -4.6409196853637695
    10. ' length' → logprob: -4.6409196853637695

Token 53: ' reduce' (ID: 10389)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -1.5190383195877075
    2. ' max' → logprob: -1.7690383195877075
    3. 'reduce' → logprob: -1.8940383195877075
    4. ' reduce' → logprob: -2.394038200378418
    5. 'list' → logprob: -2.769038200378418
    6. 'seq' → logprob: -2.894038200378418
    7. ' next' → logprob: -3.019038200378418
    8. 'max' → logprob: -3.144038200378418
    9. 'acc' → logprob: -3.519038200378418
    10. ' seq' → logprob: -3.519038200378418

Token 54: '(lambda' (ID: 43341)
  Prédit: '(add'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(add' → logprob: -0.12127038836479187
    2. '(' → logprob: -2.8712704181671143
    3. '(lambda' → logprob: -2.8712704181671143
    4. '(eq' → logprob: -7.121270179748535
    5. '(operator' → logprob: -9.746270179748535
    6. '(
' → logprob: -10.746270179748535
    7. 'add' → logprob: -10.996270179748535
    8. '(op' → logprob: -11.871270179748535
    9. '(max' → logprob: -12.371270179748535
    10. ' (' → logprob: -12.496270179748535

Token 55: ' acc' (ID: 1259)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.7272809743881226
    2. ' acc' → logprob: -0.9772809743881226
    3. ' a' → logprob: -2.227281093597412
    4. 'x' → logprob: -4.102281093597412
    5. 'a' → logprob: -4.852281093597412
    6. 'acc' → logprob: -5.227281093597412
    7. ' s' → logprob: -7.352281093597412
    8. ' add' → logprob: -7.852281093597412
    9. ' cur' → logprob: -7.977281093597412
    10. ' c' → logprob: -8.852280616760254

Token 56: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -6.027225754223764e-05
    2. ' ,' → logprob: -10.000060081481934
    3. 'acc' → logprob: -12.250060081481934
    4. ',x' → logprob: -12.625060081481934
    5. ',
' → logprob: -13.000060081481934
    6. ',a' → logprob: -14.625060081481934
    7. ' acc' → logprob: -14.875060081481934
    8. ',index' → logprob: -15.125060081481934
    9. ',b' → logprob: -15.375060081481934
    10. ':' → logprob: -15.375060081481934

Token 57: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.055524054914712906
    2. ' x' → logprob: -3.0555241107940674
    3. 'cur' → logprob: -5.805523872375488
    4. ' cur' → logprob: -7.805523872375488
    5. 'curr' → logprob: -7.930523872375488
    6. 'a' → logprob: -7.930523872375488
    7. 'i' → logprob: -8.180523872375488
    8. 'c' → logprob: -8.180523872375488
    9. 't' → logprob: -8.305523872375488
    10. 's' → logprob: -8.430523872375488

Token 58: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.000194361709873192
    2. ' :' → logprob: -9.000194549560547
    3. ',' → logprob: -9.875194549560547
    4. ',:' → logprob: -11.375194549560547
    5. '_:' → logprob: -13.375194549560547
    6. '=' → logprob: -13.500194549560547
    7. ':
' → logprob: -14.125194549560547
    8. 's' → logprob: -14.375194549560547
    9. 'acc' → logprob: -14.375194549560547
    10. ':add' → logprob: -14.500194549560547

Token 59: ' x' (ID: 1215)
  Prédit: ' acc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' acc' → logprob: -0.7108821272850037
    2. 'acc' → logprob: -1.4608821868896484
    3. ' add' → logprob: -1.9608821868896484
    4. 'add' → logprob: -2.3358821868896484
    5. '(acc' → logprob: -3.4608821868896484
    6. '(add' → logprob: -5.585882186889648
    7. ' (' → logprob: -6.460882186889648
    8. '(' → logprob: -6.835882186889648
    9. ' max' → logprob: -8.085882186889648
    10. 'max' → logprob: -8.335882186889648

Token 60: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.05688583478331566
    2. 'if' → logprob: -3.1818857192993164
    3. '+' → logprob: -5.056885719299316
    4. '==' → logprob: -6.056885719299316
    5. '^' → logprob: -6.931885719299316
    6. '-' → logprob: -7.431885719299316
    7. '*' → logprob: -7.556885719299316
    8. ' ^' → logprob: -7.556885719299316
    9. 'and' → logprob: -7.806885719299316
    10. ' and' → logprob: -8.181885719299316

Token 61: ' eq' (ID: 18955)
  Prédit: 'acc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'acc' → logprob: -0.8382098078727722
    2. 'x' → logprob: -1.463209867477417
    3. 'eq' → logprob: -1.463209867477417
    4. ' acc' → logprob: -3.463209867477417
    5. ' eq' → logprob: -3.838209867477417
    6. 'not' → logprob: -3.963209867477417
    7. ' x' → logprob: -4.713209629058838
    8. '(acc' → logprob: -4.838209629058838
    9. '(eq' → logprob: -5.338209629058838
    10. ' not' → logprob: -5.463209629058838

Token 62: '(x' (ID: 4061)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.8020682334899902
    2. '(x' → logprob: -1.0520682334899902
    3. '(acc' → logprob: -1.8020682334899902
    4. 'acc' → logprob: -3.4270682334899902
    5. '(' → logprob: -5.67706823348999
    6. ' x' → logprob: -7.17706823348999
    7. '0' → logprob: -8.677068710327148
    8. ' ' → logprob: -9.052068710327148
    9. 'add' → logprob: -9.177068710327148
    10. ' acc' → logprob: -9.302068710327148

Token 63: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.03188488259911537
    2. 'acc' → logprob: -4.031884670257568
    3. ' acc' → logprob: -6.031884670257568
    4. '0' → logprob: -6.031884670257568
    5. ' ' → logprob: -6.531884670257568
    6. ' ,' → logprob: -6.656884670257568
    7. 'x' → logprob: -6.656884670257568
    8. ' x' → logprob: -6.781884670257568
    9. '   ' → logprob: -7.406884670257568
    10. ',x' → logprob: -7.531884670257568

Token 64: ' acc' (ID: 1259)
  Prédit: 'acc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'acc' → logprob: -0.5474463105201721
    2. '0' → logprob: -1.2974462509155273
    3. '1' → logprob: -2.5474462509155273
    4. 'seq' → logprob: -3.7974462509155273
    5. 'add' → logprob: -4.297446250915527
    6. 'br' → logprob: -4.422446250915527
    7. ' ' → logprob: -4.797446250915527
    8. 'max' → logprob: -5.672446250915527
    9. ' acc' → logprob: -6.422446250915527
    10. '[]' → logprob: -6.422446250915527

Token 65: '+' (ID: 10)
  Prédit: ' else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.7850277423858643
    2. '+' → logprob: -1.7850277423858643
    3. ')' → logprob: -1.9100277423858643
    4. 'else' → logprob: -2.4100277423858643
    5. ' +' → logprob: -2.6600277423858643
    6. '-' → logprob: -3.0350277423858643
    7. ' -' → logprob: -5.035027503967285
    8. ' ' → logprob: -5.410027503967285
    9. ' )' → logprob: -5.660027503967285
    10. '0' → logprob: -6.910027503967285

Token 66: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -4.739826181321405e-05
    2. ' ' → logprob: -10.00004768371582
    3. 'x' → logprob: -13.25004768371582
    4. '   ' → logprob: -16.50004768371582
    5. '  ' → logprob: -16.62504768371582
    6. ' x' → logprob: -17.75004768371582
    7. '2' → logprob: -18.25004768371582
    8. '-' → logprob: -18.37504768371582
    9. ')' → logprob: -18.62504768371582
    10. '
' → logprob: -19.50004768371582

Token 67: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0031121151987463236
    2. ' else' → logprob: -6.128112316131592
    3. 'else' → logprob: -7.253112316131592
    4. ' )' → logprob: -8.628111839294434
    5. ' ' → logprob: -11.503111839294434
    6. '),' → logprob: -11.503111839294434
    7. ')
' → logprob: -12.753111839294434
    8. '   ' → logprob: -12.878111839294434
    9. '-' → logprob: -13.128111839294434
    10. '0' → logprob: -13.128111839294434

Token 68: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.02054644376039505
    2. 'else' → logprob: -3.8955464363098145
    3. ' ' → logprob: -12.895546913146973
    4. '	else' → logprob: -14.145546913146973
    5. '    ' → logprob: -15.520546913146973
    6. ' or' → logprob: -15.645546913146973
    7. '   ' → logprob: -15.770546913146973
    8. ' ' → logprob: -15.895546913146973
    9. ')' → logprob: -16.020545959472656
    10. '  ' → logprob: -16.270545959472656

Token 69: ' acc' (ID: 1259)
  Prédit: 'acc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'acc' → logprob: -0.3041246235370636
    2. '0' → logprob: -2.054124593734741
    3. '-' → logprob: -2.804124593734741
    4. 'x' → logprob: -3.429124593734741
    5. 'None' → logprob: -4.17912483215332
    6. ' acc' → logprob: -4.55412483215332
    7. ' ' → logprob: -5.05412483215332
    8. '1' → logprob: -5.67912483215332
    9. ' -' → logprob: -6.55412483215332
    10. '   ' → logprob: -7.17912483215332

Token 70: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.006278567481786013
    2. '),' → logprob: -6.3812785148620605
    3. ' ,' → logprob: -6.5062785148620605
    4. '+' → logprob: -6.6312785148620605
    5. ')' → logprob: -7.2562785148620605
    6. ')(' → logprob: -8.256278991699219
    7. ' +' → logprob: -8.381278991699219
    8. ' ' → logprob: -8.756278991699219
    9. '   ' → logprob: -9.381278991699219
    10. '
' → logprob: -9.506278991699219

Token 71: ' seq' (ID: 26775)
  Prédit: 'seq'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'seq' → logprob: -0.2494027316570282
    2. 'range' → logprob: -2.1244027614593506
    3. 'br' → logprob: -3.2494027614593506
    4. ' seq' → logprob: -3.6244027614593506
    5. '0' → logprob: -4.3744025230407715
    6. ' range' → logprob: -4.7494025230407715
    7. '[' → logprob: -5.3744025230407715
    8. 'sequence' → logprob: -6.1244025230407715
    9. '-' → logprob: -6.2494025230407715
    10. ' ' → logprob: -6.6244025230407715

Token 72: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.012961745262145996
    2. ')' → logprob: -4.7629618644714355
    3. ' ,' → logprob: -5.8879618644714355
    4. ',-' → logprob: -7.0129618644714355
    5. '0' → logprob: -8.637961387634277
    6. ')+' → logprob: -8.762961387634277
    7. ' )' → logprob: -9.387961387634277
    8. ' ' → logprob: -9.512961387634277
    9. '-' → logprob: -9.762961387634277
    10. ' -' → logprob: -10.762961387634277

Token 73: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.032491471618413925
    2. '-' → logprob: -3.907491445541382
    3. ' ' → logprob: -4.532491683959961
    4. ' -' → logprob: -6.907491683959961
    5. '1' → logprob: -9.532491683959961
    6. 'n' → logprob: -11.032491683959961
    7. '  ' → logprob: -11.157491683959961
    8. '   ' → logprob: -12.157491683959961
    9. '2' → logprob: -13.032491683959961
    10. '-n' → logprob: -13.532491683959961

Token 74: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.18188416957855225
    2. '-' → logprob: -1.8068841695785522
    3. ' ' → logprob: -6.931884288787842
    4. ' -' → logprob: -7.056884288787842
    5. '-n' → logprob: -8.931883811950684
    6. '1' → logprob: -9.431883811950684
    7. 'n' → logprob: -10.556883811950684
    8. '  ' → logprob: -11.056883811950684
    9. '-br' → logprob: -12.056883811950684
    10. '   ' → logprob: -12.306883811950684

Token 75: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.468279752880335e-05
    2. ')
' → logprob: -10.375064849853516
    3. ' )' → logprob: -10.875064849853516
    4. '))' → logprob: -11.875064849853516
    5. ')+' → logprob: -12.375064849853516
    6. '+' → logprob: -13.875064849853516
    7. ')

' → logprob: -14.875064849853516
    8. ')`' → logprob: -14.875064849853516
    9. ')return' → logprob: -15.000064849853516
    10. ')#' → logprob: -15.500064849853516

Token 76: 'cur' (ID: 3264)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.09425687044858932
    2. ' ' → logprob: -3.59425687789917
    3. '0' → logprob: -4.09425687789917
    4. '<|end|>' → logprob: -4.96925687789917
    5. '_' → logprob: -5.09425687789917
    6. '+' → logprob: -5.09425687789917
    7. 'br' → logprob: -5.46925687789917
    8. '[' → logprob: -5.84425687789917
    9. '(' → logprob: -5.96925687789917
    10. 'print' → logprob: -6.34425687789917

Token 77: ' =' (ID: 314)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.09663761407136917
    2. '=' → logprob: -3.346637725830078
    3. '_' → logprob: -3.721637725830078
    4. '(' → logprob: -3.971637725830078
    5. '()' → logprob: -5.221637725830078
    6. '<|end|>' → logprob: -5.971637725830078
    7. ' =' → logprob: -6.096637725830078
    8. '+' → logprob: -6.971637725830078
    9. ',' → logprob: -7.346637725830078
    10. '_)' → logprob: -7.971637725830078

Token 78: ' find' (ID: 1646)
  Prédit: 'find'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'find' → logprob: -0.11289854347705841
    2. ' find' → logprob: -2.237898588180542
    3. '(find' → logprob: -9.987898826599121
    4. '0' → logprob: -11.112898826599121
    5. 'max' → logprob: -12.112898826599121
    6. ' ' → logprob: -12.862898826599121
    7. '	find' → logprob: -12.862898826599121
    8. ' max' → logprob: -12.987898826599121
    9. 'br' → logprob: -14.862898826599121
    10. 'len' → logprob: -15.112898826599121

Token 79: '_cur' (ID: 46382)
  Prédit: '_cur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cur' → logprob: -5.319370302458992e-06
    2. 'cur' → logprob: -12.750005722045898
    3. '_' → logprob: -14.375005722045898
    4. '_br' → logprob: -14.500005722045898
    5. '(cur' → logprob: -14.500005722045898
    6. '_curr' → logprob: -14.750005722045898
    7. '_current' → logprob: -16.3750057220459
    8. '(_' → logprob: -17.5000057220459
    9. '_CUR' → logprob: -17.6250057220459
    10. '```' → logprob: -17.7500057220459

Token 80: '(br' (ID: 65786)
  Prédit: '(br'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(br' → logprob: -0.000575432030018419
    2. 'br' → logprob: -8.125575065612793
    3. '(' → logprob: -8.250575065612793
    4. '(cur' → logprob: -12.875575065612793
    5. ' (' → logprob: -13.125575065612793
    6. '(b' → logprob: -13.125575065612793
    7. '	br' → logprob: -13.250575065612793
    8. '(branch' → logprob: -13.625575065612793
    9. ')(' → logprob: -13.750575065612793
    10. '/br' → logprob: -14.000575065612793

Token 81: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0009352823253720999
    2. '))' → logprob: -7.375935077667236
    3. ')+' → logprob: -8.375935554504395
    4. ')
' → logprob: -10.500935554504395
    5. ' )' → logprob: -10.750935554504395
    6. '+' → logprob: -11.625935554504395
    7. '[' → logprob: -12.375935554504395
    8. ')))' → logprob: -13.000935554504395
    9. ')`' → logprob: -13.000935554504395
    10. '   ' → logprob: -13.375935554504395

Token 82: 'print' (ID: 1598)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7268633842468262
    2. '+' → logprob: -1.3518633842468262
    3. ' ' → logprob: -2.976863384246826
    4. ' if' → logprob: -2.976863384246826
    5. 'for' → logprob: -3.101863384246826
    6. ' for' → logprob: -3.726863384246826
    7. 'if' → logprob: -4.226863384246826
    8. ' while' → logprob: -4.226863384246826
    9. '(' → logprob: -4.351863384246826
    10. '_' → logprob: -4.726863384246826

Token 83: '({' (ID: 3972)
  Prédit: '(cur'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(cur' → logprob: -0.002991132438182831
    2. '(' → logprob: -6.252991199493408
    3. '(len' → logprob: -7.752991199493408
    4. '(max' → logprob: -8.50299072265625
    5. '(br' → logprob: -8.75299072265625
    6. '((' → logprob: -9.00299072265625
    7. '(c' → logprob: -10.37799072265625
    8. '(n' → logprob: -10.87799072265625
    9. '()' → logprob: -11.00299072265625
    10. '(f' → logprob: -11.25299072265625

Token 84: 'True' (ID: 4710)
  Prédit: 'cur'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'cur' → logprob: -0.015342684462666512
    2. ''' → logprob: -4.390342712402344
    3. '"' → logprob: -6.890342712402344
    4. ' cur' → logprob: -7.265342712402344
    5. '   ' → logprob: -7.390342712402344
    6. ' ' → logprob: -8.890342712402344
    7. 'len' → logprob: -10.015342712402344
    8. ' '' → logprob: -10.015342712402344
    9. 'k' → logprob: -10.140342712402344
    10. 'max' → logprob: -10.515342712402344

Token 85: ':' (ID: 25)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.7699916958808899
    2. ':' → logprob: -1.3949916362762451
    3. '})' → logprob: -2.394991636276245
    4. '}' → logprob: -2.769991636276245
    5. ',' → logprob: -3.144991636276245
    6. 'cur' → logprob: -3.394991636276245
    7. 'if' → logprob: -3.644991636276245
    8. ' cur' → logprob: -4.644991874694824
    9. ' ' → logprob: -5.144991874694824
    10. '},' → logprob: -5.769991874694824

Token 86: ' n' (ID: 297)
  Prédit: ' cur'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cur' → logprob: -0.5545387268066406
    2. 'cur' → logprob: -1.3045387268066406
    3. ' max' → logprob: -3.4295387268066406
    4. ' n' → logprob: -3.5545387268066406
    5. '"' → logprob: -3.9295387268066406
    6. ' ' → logprob: -4.429538726806641
    7. 'n' → logprob: -4.679538726806641
    8. '0' → logprob: -4.679538726806641
    9. 'max' → logprob: -4.929538726806641
    10. ''' → logprob: -4.929538726806641

Token 87: ' -' (ID: 533)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.017682433128357
    2. '-cur' → logprob: -1.142682433128357
    3. '-' → logprob: -1.642682433128357
    4. ' -' → logprob: -3.2676825523376465
    5. ' if' → logprob: -3.3926825523376465
    6. '+' → logprob: -3.7676825523376465
    7. '-br' → logprob: -4.8926825523376465
    8. 'if' → logprob: -5.0176825523376465
    9. ' ,' → logprob: -5.5176825523376465
    10. '}' → logprob: -5.8926825523376465

Token 88: ' cur' (ID: 4396)
  Prédit: 'cur'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cur' → logprob: -0.048631198704242706
    2. ' cur' → logprob: -3.048631191253662
    3. ' ' → logprob: -11.29863166809082
    4. '(cur' → logprob: -11.42363166809082
    5. '1' → logprob: -12.29863166809082
    6. '	cur' → logprob: -12.29863166809082
    7. 'max' → logprob: -12.42363166809082
    8. ' (' → logprob: -13.17363166809082
    9. ' max' → logprob: -13.29863166809082
    10. '[cur' → logprob: -13.67363166809082

Token 89: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.10111427307128906
    2. '})' → logprob: -2.476114273071289
    3. '}' → logprob: -4.601114273071289
    4. '},' → logprob: -6.976114273071289
    5. ' ,' → logprob: -7.476114273071289
    6. ' })' → logprob: -8.851114273071289
    7. ')' → logprob: -9.226114273071289
    8. ',
' → logprob: -9.351114273071289
    9. ' }' → logprob: -10.226114273071289
    10. '   ' → logprob: -10.476114273071289

Token 90: ' False' (ID: 7983)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.4756269156932831
    2. ' False' → logprob: -0.9756269454956055
    3. 'True' → logprob: -8.225626945495605
    4. ' True' → logprob: -8.225626945495605
    5. ' ' → logprob: -8.350626945495605
    6. ' n' → logprob: -8.475626945495605
    7. '   ' → logprob: -8.850626945495605
    8. ' cur' → logprob: -9.350626945495605
    9. '0' → logprob: -9.350626945495605
    10. '    ' → logprob: -9.975626945495605

Token 91: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0011481947731226683
    2. ' :' → logprob: -7.501148223876953
    3. ':n' → logprob: -7.501148223876953
    4. '-' → logprob: -11.126148223876953
    5. ' -' → logprob: -11.876148223876953
    6. '+' → logprob: -12.876148223876953
    7. '   ' → logprob: -13.126148223876953
    8. ' ' → logprob: -13.251148223876953
    9. ' +' → logprob: -13.376148223876953
    10. ':
' → logprob: -13.501148223876953

Token 92: ' -' (ID: 533)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.8186976313591003
    2. 'n' → logprob: -1.3186976909637451
    3. ' n' → logprob: -1.9436976909637451
    4. ' ' → logprob: -2.943697690963745
    5. 'cur' → logprob: -3.068697690963745
    6. '1' → logprob: -4.693697452545166
    7. 'br' → logprob: -4.818697452545166
    8. '-' → logprob: -4.943697452545166
    9. ' cur' → logprob: -5.443697452545166
    10. 'max' → logprob: -5.568697452545166

Token 93: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0008105786982923746
    2. 'cur' → logprob: -7.500810623168945
    3. 'n' → logprob: -9.375810623168945
    4. '-' → logprob: -9.500810623168945
    5. ' ' → logprob: -10.375810623168945
    6. '2' → logprob: -10.625810623168945
    7. 'br' → logprob: -11.813310623168945
    8. '(' → logprob: -12.188310623168945
    9. ' cur' → logprob: -12.625810623168945
    10. '100' → logprob: -12.750810623168945

Token 94: '}[' (ID: 85396)
  Prédit: '})'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '})' → logprob: -0.010591920465230942
    2. '}' → logprob: -4.885591983795166
    3. '}[' → logprob: -5.885591983795166
    4. ')' → logprob: -9.385591506958008
    5. ' })' → logprob: -10.010591506958008
    6. '})
' → logprob: -11.010591506958008
    7. '}))' → logprob: -11.260591506958008
    8. '[' → logprob: -11.385591506958008
    9. ')}' → logprob: -12.010591506958008
    10. '}')' → logprob: -12.260591506958008

Token 95: 'cur' (ID: 3264)
  Prédit: 'cur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cur' → logprob: -0.1257672905921936
    2. 'eq' → logprob: -2.250767230987549
    3. ' cur' → logprob: -5.375767230987549
    4. 'all' → logprob: -5.750767230987549
    5. 'br' → logprob: -6.250767230987549
    6. 'len' → logprob: -6.875767230987549
    7. 'n' → logprob: -6.875767230987549
    8. ' eq' → logprob: -7.625767230987549
    9. ' all' → logprob: -9.000767707824707
    10. '(cur' → logprob: -9.500767707824707

Token 96: ' !=' (ID: 1666)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '==' → logprob: -0.31878888607025146
    2. ' ==' → logprob: -1.5687888860702515
    3. ')' → logprob: -3.818789005279541
    4. '>=' → logprob: -4.318789005279541
    5. '])' → logprob: -4.318789005279541
    6. ']==' → logprob: -5.318789005279541
    7. ']' → logprob: -5.818789005279541
    8. ' >=' → logprob: -5.943789005279541
    9. ')])' → logprob: -6.318789005279541
    10. ' in' → logprob: -7.318789005279541

Token 97: ' ' (ID: 220)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.5442224144935608
    2. '0' → logprob: -1.294222354888916
    3. ' n' → logprob: -2.044222354888916
    4. ' ' → logprob: -4.169222354888916
    5. 'len' → logprob: -8.419222831726074
    6. ' len' → logprob: -9.294222831726074
    7. '
' → logprob: -9.981722831726074
    8. 'cur' → logprob: -10.231722831726074
    9. '	n' → logprob: -10.356722831726074
    10. '  ' → logprob: -10.419222831726074

Token 98: '0' (ID: 15)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.11114044487476349
    2. '0' → logprob: -2.361140489578247
    3. ' n' → logprob: -4.736140251159668
    4. ' ' → logprob: -6.736140251159668
    5. 'len' → logprob: -7.236140251159668
    6. 'cur' → logprob: -10.361140251159668
    7. '1' → logprob: -10.861140251159668
    8. ' len' → logprob: -10.923640251159668
    9. '   ' → logprob: -11.048640251159668
    10. '-' → logprob: -11.298640251159668

Token 99: '])' (ID: 4636)
  Prédit: '])'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.029976094141602516
    2. ')])' → logprob: -4.029975891113281
    3. ')' → logprob: -4.529975891113281
    4. ')]' → logprob: -7.029975891113281
    5. ' ])' → logprob: -10.154975891113281
    6. '))' → logprob: -10.404975891113281
    7. ']' → logprob: -12.279975891113281
    8. '])]' → logprob: -12.279975891113281
    9. '])
' → logprob: -13.029975891113281
    10. ']))' → logprob: -13.279975891113281


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 97
Tokens correctement prédits (1ère position, stricte): 32
Tokens correctement prédits (1ère position, avec adaptation): 32
Tokens correctement prédits (top 10): 71
Précision stricte (1ère position): 32.99%
Précision adaptée (1ère position): 32.99%
Précision (top 10): 73.20%
================================================================================
