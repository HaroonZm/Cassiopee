================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:32:34
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def concat_strings():
    """
    Lit deux chaînes de caractères séparées par un espace depuis l'entrée standard,
    puis les concatène dans l'ordre inverse (T suivi de S) et affiche le résultat.
    """
    # Lecture de l'entrée utilisateur : attend deux mots séparés par un espace
    S, T = input().split()
    # Concaténation des deux chaînes dans l'ordre T suivi de S
    result = T + S
    # Affichage du résultat à l'écran
    print(result)

# Appel de la fonction principale pour exécuter la logique
concat_strings()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' concat' (ID: 73950)
  → Token d'amorce (pas de prédiction)

Token 2: '_strings' (ID: 87251)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0027687400579452515
    2. '_' → logprob: -6.877768516540527
    3. '```' → logprob: -7.252768516540527
    4. ' (' → logprob: -8.002768516540527
    5. '('' → logprob: -8.252768516540527
    6. '("("' → logprob: -9.627768516540527
    7. '[' → logprob: -9.877768516540527
    8. '(
' → logprob: -10.127768516540527
    9. '<|end|>' → logprob: -10.127768516540527
    10. ':' → logprob: -10.752768516540527

Token 4: '   ' (ID: 271)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\' → logprob: -0.9141657948493958
    2. '\n' → logprob: -1.539165735244751
    3. '```' → logprob: -1.789165735244751
    4. '   ' → logprob: -2.789165735244751
    5. ''' → logprob: -2.789165735244751
    6. '    
' → logprob: -4.16416597366333
    7. ' 
' → logprob: -4.28916597366333
    8. ''\' → logprob: -4.53916597366333
    9. '`' → logprob: -4.78916597366333
    10. '(' → logprob: -4.78916597366333

Token 5: ' """
' (ID: 7037)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.5669553875923157
    2. '   ' → logprob: -1.816955327987671
    3. 'return' → logprob: -1.941955327987671
    4. '    ' → logprob: -2.941955327987671
    5. ' ' → logprob: -4.19195556640625
    6. 's' → logprob: -4.31695556640625
    7. ' a' → logprob: -4.69195556640625
    8. ''' → logprob: -5.06695556640625
    9. ' return' → logprob: -5.19195556640625
    10. 'x' → logprob: -5.56695556640625

Token 6: '   ' (ID: 271)
  Prédit: 'Conc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Conc' → logprob: -0.041741736233234406
    2. '"""' → logprob: -4.166741847991943
    3. 'Combine' → logprob: -4.916741847991943
    4. 'Concat' → logprob: -5.416741847991943
    5. 'Con' → logprob: -5.541741847991943
    6. 'Returns' → logprob: -6.166741847991943
    7. '   ' → logprob: -6.416741847991943
    8. 'Return' → logprob: -6.541741847991943
    9. ' Conc' → logprob: -6.666741847991943
    10. ''''' → logprob: -7.166741847991943

Token 7: ' Lit' (ID: 45595)
  Prédit: 'Conc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Conc' → logprob: -0.04074903577566147
    2. 'Con' → logprob: -3.7907490730285645
    3. 'Returns' → logprob: -5.5407490730285645
    4. 'Concat' → logprob: -5.6657490730285645
    5. 'Return' → logprob: -5.7907490730285645
    6. '   ' → logprob: -5.7907490730285645
    7. '"""' → logprob: -6.6657490730285645
    8. 'Combine' → logprob: -6.6657490730285645
    9. ' Conc' → logprob: -7.6657490730285645
    10. '       ' → logprob: -8.790748596191406

Token 8: ' deux' (ID: 10301)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.02839456871151924
    2. 'eral' → logprob: -4.40339469909668
    3. 'ral' → logprob: -5.02839469909668
    4. '   ' → logprob: -5.02839469909668
    5. '```' → logprob: -7.15339469909668
    6. 'r' → logprob: -7.27839469909668
    7. ' er' → logprob: -8.40339469909668
    8. 'e' → logprob: -8.65339469909668
    9. '  ' → logprob: -8.90339469909668
    10. 'def' → logprob: -9.52839469909668

Token 9: ' chaînes' (ID: 179904)
  Prédit: ' chaînes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaînes' → logprob: -0.3785657286643982
    2. ' ' → logprob: -1.503565788269043
    3. ' strings' → logprob: -2.753565788269043
    4. ' chain' → logprob: -4.128565788269043
    5. 'strings' → logprob: -6.253565788269043
    6. 'chain' → logprob: -6.253565788269043
    7. ' lignes' → logprob: -6.378565788269043
    8. ' string' → logprob: -6.503565788269043
    9. ' chaîne' → logprob: -6.878565788269043
    10. 'cha' → logprob: -7.378565788269043

Token 10: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.13936297595500946
    2. ' en' → logprob: -2.3893630504608154
    3. 'de' → logprob: -4.389362812042236
    4. '   ' → logprob: -5.014362812042236
    5. ' et' → logprob: -5.264362812042236
    6. 'def' → logprob: -5.889362812042236
    7. 's' → logprob: -6.014362812042236
    8. ',' → logprob: -6.514362812042236
    9. ' à' → logprob: -6.764362812042236
    10. ' ' → logprob: -6.889362812042236

Token 11: ' caractères' (ID: 183106)
  Prédit: ' caractères'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' caractères' → logprob: -0.5944105982780457
    2. 'car' → logprob: -0.8444105982780457
    3. ' caracteres' → logprob: -5.219410419464111
    4. ' ' → logprob: -5.594410419464111
    5. ' caract' → logprob: -5.844410419464111
    6. ' caractère' → logprob: -6.844410419464111
    7. 'texte' → logprob: -6.844410419464111
    8. ' car' → logprob: -6.844410419464111
    9. 'char' → logprob: -7.594410419464111
    10. '```' → logprob: -7.719410419464111

Token 12: ' sépar' (ID: 97160)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3638550639152527
    2. ' et' → logprob: -1.6138551235198975
    3. ' en' → logprob: -3.2388551235198975
    4. '\n' → logprob: -3.8638551235198975
    5. ' ' → logprob: -4.113854885101318
    6. ',' → logprob: -4.738854885101318
    7. '    ' → logprob: -5.738854885101318
    8. 'et' → logprob: -5.738854885101318
    9. 'en' → logprob: -5.863854885101318
    10. 's' → logprob: -5.863854885101318

Token 13: 'ées' (ID: 5161)
  Prédit: 'ées'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ées' → logprob: -0.031296297907829285
    2. 'é' → logprob: -4.156296253204346
    3. 'és' → logprob: -4.281296253204346
    4. 'ée' → logprob: -6.906296253204346
    5. 'par' → logprob: -8.406296730041504
    6. '```' → logprob: -10.156296730041504
    7. ' par' → logprob: -10.406296730041504
    8. 'es' → logprob: -12.156296730041504
    9. ' é' → logprob: -13.031296730041504
    10. 'Par' → logprob: -13.156296730041504

Token 14: ' par' (ID: 686)
  Prédit: ' par'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' par' → logprob: -0.040792066603899
    2. 'par' → logprob: -3.2907919883728027
    3. ' ' → logprob: -6.165791988372803
    4. '```' → logprob: -8.665792465209961
    5. '   ' → logprob: -8.790792465209961
    6. '\n' → logprob: -9.790792465209961
    7. 'es' → logprob: -9.915792465209961
    8. '  ' → logprob: -10.040792465209961
    9. '(par' → logprob: -10.665792465209961
    10. ' ' → logprob: -10.790792465209961

Token 15: ' un' (ID: 537)
  Prédit: 'un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'un' → logprob: -0.7168035507202148
    2. ' un' → logprob: -0.9668035507202148
    3. ''un' → logprob: -2.466803550720215
    4. ' ' → logprob: -3.966803550720215
    5. 'une' → logprob: -4.591803550720215
    6. ''' → logprob: -5.091803550720215
    7. ' une' → logprob: -6.091803550720215
    8. ''une' → logprob: -6.466803550720215
    9. 'esp' → logprob: -7.216803550720215
    10. ''espace' → logprob: -7.216803550720215

Token 16: ' espace' (ID: 66004)
  Prédit: 'es'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'es' → logprob: -0.06572603434324265
    2. 'esp' → logprob: -3.3157260417938232
    3. ' espace' → logprob: -4.190725803375244
    4. '\n' → logprob: -5.065725803375244
    5. ' \' → logprob: -6.315725803375244
    6. ' ' → logprob: -6.815725803375244
    7. ''espace' → logprob: -7.190725803375244
    8. '_' → logprob: -7.440725803375244
    9. '\' → logprob: -7.940725803375244
    10. 's' → logprob: -8.190726280212402

Token 17: ' depuis' (ID: 16277)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.17171376943588257
    2. '\n' → logprob: -2.2967138290405273
    3. '    
' → logprob: -3.4217138290405273
    4. '\' → logprob: -5.046713829040527
    5. ' 
' → logprob: -5.796713829040527
    6. '    ' → logprob: -6.046713829040527
    7. ',' → logprob: -6.171713829040527
    8. '  
' → logprob: -6.171713829040527
    9. ' et' → logprob: -6.296713829040527
    10. '   
' → logprob: -6.671713829040527

Token 18: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.4885629415512085
    2. ' input' → logprob: -1.7385629415512085
    3. 'input' → logprob: -2.113563060760498
    4. '   ' → logprob: -2.863563060760498
    5. ' l' → logprob: -3.488563060760498
    6. ' ' → logprob: -7.738563060760498
    7. 'le' → logprob: -7.988563060760498
    8. 'la' → logprob: -7.988563060760498
    9. 'entrée' → logprob: -8.86356258392334
    10. '```' → logprob: -9.23856258392334

Token 19: ''entrée' (ID: 115820)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.8624996542930603
    2. ''entrée' → logprob: -1.362499713897705
    3. 'a' → logprob: -1.987499713897705
    4. 'entrée' → logprob: -2.612499713897705
    5. 'e' → logprob: -3.237499713897705
    6. ''' → logprob: -3.612499713897705
    7. 'u' → logprob: -3.612499713897705
    8. 'i' → logprob: -4.987499713897705
    9. ''utilisateur' → logprob: -5.737499713897705
    10. 'é' → logprob: -5.987499713897705

Token 20: ' standard' (ID: 7024)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5535527467727661
    2. '.' → logprob: -2.1785526275634766
    3. ' ' → logprob: -2.5535526275634766
    4. ' ,' → logprob: -2.6785526275634766
    5. ' )' → logprob: -3.4285526275634766
    6. '\' → logprob: -3.8035526275634766
    7. '_' → logprob: -3.8035526275634766
    8. '\n' → logprob: -4.178552627563477
    9. ' et' → logprob: -4.303552627563477
    10. '   ' → logprob: -4.553552627563477

Token 21: ',
' (ID: 412)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16225700080394745
    2. '\n' → logprob: -2.537256956100464
    3. ',' → logprob: -3.787256956100464
    4. '\' → logprob: -4.537257194519043
    5. '    
' → logprob: -4.537257194519043
    6. '    ' → logprob: -5.162257194519043
    7. '   
' → logprob: -5.662257194519043
    8. '.' → logprob: -5.787257194519043
    9. ' ' → logprob: -5.787257194519043
    10. '  
' → logprob: -6.162257194519043

Token 22: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15768325328826904
    2. ' et' → logprob: -2.7826833724975586
    3. '    ' → logprob: -3.0326833724975586
    4. ' puis' → logprob: -3.6576833724975586
    5. 'et' → logprob: -6.032683372497559
    6. ' retourne' → logprob: -6.282683372497559
    7. ' and' → logprob: -6.782683372497559
    8. ',' → logprob: -7.282683372497559
    9. 'def' → logprob: -7.532683372497559
    10. ' ' → logprob: -7.657683372497559

Token 23: ' puis' (ID: 18766)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.057302650064229965
    2. ' et' → logprob: -3.557302713394165
    3. '    ' → logprob: -4.557302474975586
    4. ' puis' → logprob: -5.057302474975586
    5. 'et' → logprob: -5.432302474975586
    6. '\n' → logprob: -5.932302474975586
    7. ' ' → logprob: -7.557302474975586
    8. ' return' → logprob: -7.682302474975586
    9. '    
' → logprob: -7.682302474975586
    10. '\' → logprob: -8.057302474975586

Token 24: ' les' (ID: 1341)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6711323857307434
    2. ' retourne' → logprob: -1.6711323261260986
    3. ' les' → logprob: -1.9211323261260986
    4. ' concat' → logprob: -3.0461323261260986
    5. 'concat' → logprob: -3.1711323261260986
    6. ' ren' → logprob: -4.046132564544678
    7. ' return' → logprob: -4.296132564544678
    8. 'return' → logprob: -4.546132564544678
    9. 'les' → logprob: -5.296132564544678
    10. 'ren' → logprob: -5.296132564544678

Token 25: ' concat' (ID: 73950)
  Prédit: 'concat'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'concat' → logprob: -0.302112340927124
    2. ' concat' → logprob: -1.677112340927124
    3. ' retourne' → logprob: -3.802112340927124
    4. 'conc' → logprob: -4.177112579345703
    5. 'con' → logprob: -4.552112579345703
    6. '   ' → logprob: -4.677112579345703
    7. ' ren' → logprob: -5.177112579345703
    8. ' concaten' → logprob: -6.177112579345703
    9. ' return' → logprob: -6.427112579345703
    10. 'return' → logprob: -6.427112579345703

Token 26: 'ène' (ID: 22902)
  Prédit: 'ène'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ène' → logprob: -0.09049782156944275
    2. 'é' → logprob: -2.5904977321624756
    3. 'è' → logprob: -4.715497970581055
    4. 'e' → logprob: -6.590497970581055
    5. 'èn' → logprob: -7.840497970581055
    6. '\' → logprob: -9.090497970581055
    7. '```' → logprob: -9.215497970581055
    8. 'éné' → logprob: -9.465497970581055
    9. 'ê' → logprob: -9.465497970581055
    10. '   ' → logprob: -9.590497970581055

Token 27: ' dans' (ID: 2671)
  Prédit: ' et'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' et' → logprob: -0.8194434642791748
    2. '   ' → logprob: -1.0694434642791748
    3. ' en' → logprob: -1.9444434642791748
    4. ' avec' → logprob: -2.819443464279175
    5. ' ' → logprob: -5.694443702697754
    6. 'et' → logprob: -5.819443702697754
    7. 'en' → logprob: -6.069443702697754
    8. ',' → logprob: -6.444443702697754
    9. 'avec' → logprob: -7.194443702697754
    10. '.' → logprob: -7.819443702697754

Token 28: ' l' (ID: 305)
  Prédit: ' une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.3917705714702606
    2. ' la' → logprob: -1.766770601272583
    3. 'une' → logprob: -2.266770601272583
    4. ' un' → logprob: -4.266770362854004
    5. 'la' → logprob: -4.391770362854004
    6. '   ' → logprob: -4.516770362854004
    7. ' ' → logprob: -6.141770362854004
    8. '```' → logprob: -6.141770362854004
    9. ''une' → logprob: -6.516770362854004
    10. 'le' → logprob: -7.141770362854004

Token 29: ''ordre' (ID: 124753)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.12036483734846115
    2. 'e' → logprob: -2.9953649044036865
    3. ''' → logprob: -3.2453649044036865
    4. ''espace' → logprob: -4.245364665985107
    5. ' a' → logprob: -5.245364665985107
    6. ' espace' → logprob: -6.745364665985107
    7. 'es' → logprob: -6.870364665985107
    8. '   ' → logprob: -7.495364665985107
    9. 'u' → logprob: -8.495365142822266
    10. '_' → logprob: -8.495365142822266

Token 30: ' inverse' (ID: 53743)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -2.192089557647705
    2. ' et' → logprob: -2.192089557647705
    3. ' d' → logprob: -2.317089557647705
    4. 'def' → logprob: -2.317089557647705
    5. ',' → logprob: -2.567089557647705
    6. ' avec' → logprob: -2.567089557647705
    7. '   ' → logprob: -2.692089557647705
    8. ' des' → logprob: -2.942089557647705
    9. ' suivant' → logprob: -3.192089557647705
    10. ' inverse' → logprob: -3.692089557647705

Token 31: ' (' (ID: 350)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.629153311252594
    2. '   ' → logprob: -1.3791532516479492
    3. '.' → logprob: -2.754153251647949
    4. ',' → logprob: -2.879153251647949
    5. ' ' → logprob: -3.629153251647949
    6. '\' → logprob: -4.254153251647949
    7. ',
' → logprob: -4.629153251647949
    8. ' \' → logprob: -4.629153251647949
    9. 'e' → logprob: -4.879153251647949
    10. ' et' → logprob: -6.004153251647949

Token 32: 'T' (ID: 51)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.4240118265151978
    2. ' la' → logprob: -1.5490118265151978
    3. 'les' → logprob: -2.549011707305908
    4. 'la' → logprob: -2.799011707305908
    5. 's' → logprob: -2.924011707305908
    6. 'le' → logprob: -2.924011707305908
    7. ' les' → logprob: -3.049011707305908
    8. '   ' → logprob: -3.299011707305908
    9. ' second' → logprob: -3.424011707305908
    10. 'de' → logprob: -3.549011707305908

Token 33: ' suivi' (ID: 60370)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.8120462894439697
    2. 'h' → logprob: -1.9370462894439697
    3. 'he' → logprob: -2.0620462894439697
    4. 'u' → logprob: -2.8120462894439697
    5. 'r' → logprob: -2.9370462894439697
    6. '2' → logprob: -3.1870462894439697
    7. 'o' → logprob: -3.5620462894439697
    8. 's' → logprob: -4.687046051025391
    9. ')' → logprob: -4.749546051025391
    10. 'C' → logprob: -4.874546051025391

Token 34: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.5328820943832397
    2. ' par' → logprob: -1.4078820943832397
    3. ' d' → logprob: -2.1578822135925293
    4. 'de' → logprob: -3.4078822135925293
    5. 'd' → logprob: -5.157882213592529
    6. 'par' → logprob: -5.157882213592529
    7. ' du' → logprob: -6.032882213592529
    8. ' des' → logprob: -6.407882213592529
    9. ' by' → logprob: -6.907882213592529
    10. ' ' → logprob: -7.157882213592529

Token 35: ' S' (ID: 336)
  Prédit: 'S'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'S' → logprob: -0.36626559495925903
    2. ' S' → logprob: -1.3662655353546143
    3. 's' → logprob: -3.7412655353546143
    4. 'U' → logprob: -4.616265773773193
    5. ' s' → logprob: -5.116265773773193
    6. ' U' → logprob: -5.741265773773193
    7. ' ' → logprob: -6.116265773773193
    8. '   ' → logprob: -6.241265773773193
    9. 'R' → logprob: -7.116265773773193
    10. 'u' → logprob: -7.991265773773193

Token 36: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0035766686778515577
    2. ' )' → logprob: -5.878576755523682
    3. '   ' → logprob: -8.378576278686523
    4. ')
' → logprob: -8.378576278686523
    5. '),' → logprob: -9.503576278686523
    6. '")' → logprob: -9.753576278686523
    7. '```' → logprob: -10.253576278686523
    8. ').' → logprob: -10.378576278686523
    9. '`)' → logprob: -10.753576278686523
    10. ')`' → logprob: -10.878576278686523

Token 37: ' et' (ID: 859)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5053424835205078
    2. '\n' → logprob: -1.0053424835205078
    3. '\' → logprob: -4.130342483520508
    4. '
' → logprob: -4.755342483520508
    5. '    
' → logprob: -6.630342483520508
    6. '```' → logprob: -6.630342483520508
    7. '"' → logprob: -7.380342483520508
    8. '"\' → logprob: -7.380342483520508
    9. ')' → logprob: -7.505342483520508
    10. '  ' → logprob: -8.255342483520508

Token 38: ' affiche' (ID: 127479)
  Prédit: ' retourne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' retourne' → logprob: -0.9111943244934082
    2. '   ' → logprob: -1.1611943244934082
    3. ' les' → logprob: -1.5361943244934082
    4. ' ren' → logprob: -3.536194324493408
    5. ' return' → logprob: -4.036194324493408
    6. 'return' → logprob: -4.911194324493408
    7. ' affiche' → logprob: -5.661194324493408
    8. ' print' → logprob: -6.161194324493408
    9. ' imprime' → logprob: -6.161194324493408
    10. 'print' → logprob: -6.786194324493408

Token 39: ' le' (ID: 505)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.1699351072311401
    2. ' la' → logprob: -2.2949352264404297
    3. ' les' → logprob: -2.5449352264404297
    4. ' un' → logprob: -2.6699352264404297
    5. ' le' → logprob: -2.7949352264404297
    6. 's' → logprob: -2.7949352264404297
    7. '\n' → logprob: -3.0449352264404297
    8. '\' → logprob: -3.2949352264404297
    9. ' ' → logprob: -3.4199352264404297
    10. ' them' → logprob: -3.5449352264404297

Token 40: ' résultat' (ID: 62556)
  Prédit: ' résultat'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' résultat' → logprob: -0.028941091150045395
    2. 'rés' → logprob: -4.4039411544799805
    3. ' result' → logprob: -4.9039411544799805
    4. ' resultat' → logprob: -5.6539411544799805
    5. 'result' → logprob: -5.6539411544799805
    6. ' résult' → logprob: -7.6539411544799805
    7. ' ' → logprob: -8.02894115447998
    8. ' rés' → logprob: -8.65394115447998
    9. ' Rés' → logprob: -8.77894115447998
    10. 's' → logprob: -8.90394115447998

Token 41: '.
' (ID: 558)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.2931077480316162
    2. '   ' → logprob: -1.7931077480316162
    3. '
' → logprob: -3.043107748031616
    4. '\' → logprob: -4.418107986450195
    5. '    
' → logprob: -4.418107986450195
    6. '```' → logprob: -5.418107986450195
    7. '.' → logprob: -5.918107986450195
    8. '  
' → logprob: -5.918107986450195
    9. '"""
' → logprob: -6.043107986450195
    10. '"\' → logprob: -7.168107986450195

Token 42: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0798247754573822
    2. '"""' → logprob: -2.954824686050415
    3. '\n' → logprob: -4.204824924468994
    4. '"""
' → logprob: -5.829824924468994
    5. '```' → logprob: -5.954824924468994
    6. '"' → logprob: -6.954824924468994
    7. '
' → logprob: -6.954824924468994
    8. '\' → logprob: -7.079824924468994
    9. '""' → logprob: -7.704824924468994
    10. '    
' → logprob: -7.954824924468994

Token 43: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.24928903579711914
    2. '\n' → logprob: -1.6242890357971191
    3. '"""' → logprob: -4.249289035797119
    4. '```' → logprob: -5.249289035797119
    5. '\' → logprob: -6.499289035797119
    6. '    
' → logprob: -6.749289035797119
    7. '""' → logprob: -7.999289035797119
    8. '"""
' (adapté à ' """
') → logprob: -8.374288558959961
    9. '"\' → logprob: -8.374288558959961
    10. '"' → logprob: -8.749288558959961

Token 44: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.003739864332601428
    2. 's' → logprob: -6.628739833831787
    3. '\n' → logprob: -6.878739833831787
    4. '
' → logprob: -7.378739833831787
    5. 'n' → logprob: -8.003740310668945
    6. '    
' → logprob: -8.628740310668945
    7. 'import' → logprob: -9.003740310668945
    8. 'input' → logprob: -10.503740310668945
    9. '```' → logprob: -10.628740310668945
    10. '\' → logprob: -11.253740310668945

Token 45: ' #' (ID: 1069)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.09469342976808548
    2. 'S' → logprob: -2.594693422317505
    3. '   ' → logprob: -4.219693660736084
    4. ' S' → logprob: -8.469693183898926
    5. 'T' → logprob: -8.844693183898926
    6. ' s' → logprob: -8.969693183898926
    7. 'strings' → logprob: -8.969693183898926
    8. 't' → logprob: -9.719693183898926
    9. 'try' → logprob: -9.844693183898926
    10. 'input' → logprob: -9.844693183898926

Token 46: ' Lecture' (ID: 106534)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.2924818992614746
    2. 'S' → logprob: -1.6674818992614746
    3. 'strings' → logprob: -4.042481899261475
    4. ' S' → logprob: -4.167481899261475
    5. ' s' → logprob: -4.292481899261475
    6. ' strings' → logprob: -5.042481899261475
    7. '   ' → logprob: -5.542481899261475
    8. 'input' → logprob: -5.792481899261475
    9. ' line' → logprob: -7.167481899261475
    10. 'line' → logprob: -7.292481899261475

Token 47: ' de' (ID: 334)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.2441534399986267
    2. '   ' → logprob: -1.6191534996032715
    3. ' des' → logprob: -5.1191534996032715
    4. ' de' → logprob: -5.3691534996032715
    5. 'de' → logprob: -5.9941534996032715
    6. ' ' → logprob: -6.6191534996032715
    7. 'S' → logprob: -7.6191534996032715
    8. '(s' → logprob: -7.7441534996032715
    9. 'n' → logprob: -7.8691534996032715
    10. ' S' → logprob: -7.9941534996032715

Token 48: ' l' (ID: 305)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -1.0808042287826538
    2. 's' → logprob: -1.4558042287826538
    3. 'input' → logprob: -1.9558042287826538
    4. ' la' → logprob: -2.4558043479919434
    5. 'de' → logprob: -2.5808043479919434
    6. 'l' → logprob: -3.3308043479919434
    7. ' l' → logprob: -3.8308043479919434
    8. ' strings' → logprob: -4.205804347991943
    9. ' s' → logprob: -4.330804347991943
    10. 'la' → logprob: -4.455804347991943

Token 49: ''entrée' (ID: 115820)
  Prédit: 'entrée'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'entrée' → logprob: -0.5487571954727173
    2. 'input' → logprob: -2.0487570762634277
    3. 's' → logprob: -2.5487570762634277
    4. 'de' → logprob: -3.1737570762634277
    5. ''entrée' → logprob: -3.1737570762634277
    6. 'es' → logprob: -3.4237570762634277
    7. 'e' → logprob: -3.7987570762634277
    8. ' input' → logprob: -3.7987570762634277
    9. ' entrée' → logprob: -4.173757076263428
    10. ' ' → logprob: -5.298757076263428

Token 50: ' utilisateur' (ID: 115595)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.03406045585870743
    2. '   ' → logprob: -3.659060478210449
    3. ' s' → logprob: -5.159060478210449
    4. '    
' → logprob: -7.659060478210449
    5. 'S' → logprob: -8.03406047821045
    6. 'input' → logprob: -8.15906047821045
    7. ' line' → logprob: -8.90906047821045
    8. ' S' → logprob: -9.15906047821045
    9. ' input' → logprob: -9.28406047821045
    10. 'n' → logprob: -9.65906047821045

Token 51: ' :' (ID: 712)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04613203927874565
    2. 's' → logprob: -3.2961320877075195
    3. '\n' → logprob: -5.5461320877075195
    4. '    
' → logprob: -5.9211320877075195
    5. 'n' → logprob: -7.4211320877075195
    6. 'S' → logprob: -8.92113208770752
    7. '  ' → logprob: -9.17113208770752
    8. '```' → logprob: -9.17113208770752
    9. '
' → logprob: -9.29613208770752
    10. '\' → logprob: -9.29613208770752

Token 52: ' attend' (ID: 13384)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.6136548519134521
    2. '   ' → logprob: -0.9886548519134521
    3. ' s' → logprob: -3.238654851913452
    4. ' S' → logprob: -3.738654851913452
    5. 'S' → logprob: -3.863654851913452
    6. ' input' → logprob: -8.113655090332031
    7. ' line' → logprob: -8.238655090332031
    8. 'input' → logprob: -8.238655090332031
    9. '```' → logprob: -8.238655090332031
    10. 't' → logprob: -8.488655090332031

Token 53: ' deux' (ID: 10301)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -1.2233778238296509
    2. 's' → logprob: -1.7233778238296509
    3. ' ' → logprob: -1.7233778238296509
    4. ' deux' → logprob: -2.0983777046203613
    5. 'de' → logprob: -2.3483777046203613
    6. 'r' → logprob: -3.4733777046203613
    7. '()' → logprob: -3.8483777046203613
    8. 'es' → logprob: -4.598377704620361
    9. '  ' → logprob: -4.723377704620361
    10. ' la' → logprob: -4.848377704620361

Token 54: ' mots' (ID: 38338)
  Prédit: ' chaînes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' chaînes' → logprob: -0.40762099623680115
    2. 'strings' → logprob: -1.6576210260391235
    3. ' strings' → logprob: -3.157620906829834
    4. 's' → logprob: -3.532620906829834
    5. ' chain' → logprob: -3.532620906829834
    6. 'str' → logprob: -4.532620906829834
    7. 'chain' → logprob: -4.782620906829834
    8. 'string' → logprob: -5.407620906829834
    9. 'cha' → logprob: -5.407620906829834
    10. 'chaine' → logprob: -5.782620906829834

Token 55: ' sépar' (ID: 97160)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.220468208193779
    2. '   ' → logprob: -1.7204681634902954
    3. ' s' → logprob: -4.595468044281006
    4. '    
' → logprob: -5.720468044281006
    5. 'S' → logprob: -5.845468044281006
    6. ' S' → logprob: -7.720468044281006
    7. ',' → logprob: -7.845468044281006
    8. ' line' → logprob: -8.345468521118164
    9. 'input' → logprob: -8.720468521118164
    10. 'n' → logprob: -8.970468521118164

Token 56: 'és' (ID: 1756)
  Prédit: 'és'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'és' → logprob: -0.14405980706214905
    2. 'é' → logprob: -2.019059896469116
    3. 'par' → logprob: -6.769059658050537
    4. ' par' → logprob: -9.394060134887695
    5. 'ée' → logprob: -9.644060134887695
    6. 'ées' → logprob: -10.519060134887695
    7. 'É' → logprob: -11.894060134887695
    8. 'es' → logprob: -12.144060134887695
    9. 'ès' → logprob: -12.144060134887695
    10. 'è' → logprob: -12.394060134887695

Token 57: ' par' (ID: 686)
  Prédit: ' par'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' par' → logprob: -0.28721287846565247
    2. 'par' → logprob: -1.41221284866333
    3. 'es' → logprob: -5.66221284866333
    4. '<|end|>' → logprob: -7.03721284866333
    5. 'e' → logprob: -7.66221284866333
    6. ' by' → logprob: -8.537213325500488
    7. '_par' → logprob: -8.537213325500488
    8. 'by' → logprob: -8.912213325500488
    9. ' ' → logprob: -9.162213325500488
    10. '(par' → logprob: -9.662213325500488

Token 58: ' un' (ID: 537)
  Prédit: ''un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''un' → logprob: -0.935670793056488
    2. 'un' → logprob: -1.0606708526611328
    3. ' un' → logprob: -1.6856708526611328
    4. ''' → logprob: -3.310670852661133
    5. 'space' → logprob: -4.560670852661133
    6. ''espace' → logprob: -5.060670852661133
    7. ' ' → logprob: -5.310670852661133
    8. ''une' → logprob: -5.810670852661133
    9. 'a' → logprob: -6.560670852661133
    10. '_un' → logprob: -6.560670852661133

Token 59: ' espace' (ID: 66004)
  Prédit: 'es'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'es' → logprob: -0.27977272868156433
    2. ' espace' → logprob: -1.5297727584838867
    3. ''espace' → logprob: -4.154772758483887
    4. 'esp' → logprob: -4.904772758483887
    5. 'space' → logprob: -6.779772758483887
    6. '’espace' → logprob: -7.529772758483887
    7. ' espaces' → logprob: -7.904772758483887
    8. '_' → logprob: -8.029772758483887
    9. ''esp' → logprob: -8.154772758483887
    10. ' space' → logprob: -8.529772758483887

Token 60: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03222521394491196
    2. '    
' → logprob: -4.157225131988525
    3. 's' → logprob: -4.782225131988525
    4. '
' → logprob: -5.157225131988525
    5. '\n' → logprob: -6.907225131988525
    6. 'n' → logprob: -8.282225608825684
    7. '  
' → logprob: -8.907225608825684
    8. '  ' → logprob: -9.157225608825684
    9. '   
' → logprob: -9.157225608825684
    10. 'input' → logprob: -9.532225608825684

Token 61: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01241251826286316
    2. '    
' → logprob: -5.1374125480651855
    3. '\n' → logprob: -6.0124125480651855
    4. 's' → logprob: -6.3874125480651855
    5. '
' → logprob: -6.3874125480651855
    6. 'input' → logprob: -8.512412071228027
    7. 'n' → logprob: -8.887412071228027
    8. '\' → logprob: -9.387412071228027
    9. '   
' → logprob: -10.387412071228027
    10. '  
' → logprob: -10.512412071228027

Token 62: ' S' (ID: 336)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.5659734010696411
    2. 'S' (adapté à ' S') → logprob: -1.0659734010696411
    3. '   ' → logprob: -2.5659732818603516
    4. ' S' → logprob: -5.190973281860352
    5. 'input' → logprob: -6.190973281860352
    6. ' s' → logprob: -7.065973281860352
    7. 'line' → logprob: -7.065973281860352
    8. 'user' → logprob: -7.940973281860352
    9. 'inputs' → logprob: -8.190973281860352
    10. ' line' → logprob: -9.065973281860352

Token 63: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.002042486798018217
    2. ' ,' → logprob: -6.502042293548584
    3. ' =' → logprob: -7.752042293548584
    4. '=' → logprob: -9.252042770385742
    5. ',S' → logprob: -13.002042770385742
    6. ',input' → logprob: -13.002042770385742
    7. ',s' → logprob: -13.252042770385742
    8. ' ' → logprob: -14.252042770385742
    9. '1' → logprob: -14.502042770385742
    10. ',T' → logprob: -14.627042770385742

Token 64: ' T' (ID: 353)
  Prédit: 'T'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'T' → logprob: -0.6933345794677734
    2. ' T' → logprob: -0.6933345794677734
    3. ' ' → logprob: -9.693334579467773
    4. '  ' → logprob: -10.568334579467773
    5. ' ' → logprob: -10.568334579467773
    6. 'space' → logprob: -10.693334579467773
    7. '<|end|>' → logprob: -11.068334579467773
    8. ' space' → logprob: -11.693334579467773
    9. ' =' → logprob: -11.818334579467773
    10. 's' → logprob: -12.193334579467773

Token 65: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.10023082792758942
    2. '=' → logprob: -2.3502309322357178
    3. '=input' → logprob: -10.725231170654297
    4. ',' → logprob: -13.975231170654297
    5. '<|end|>' → logprob: -14.350231170654297
    6. 'input' → logprob: -15.975231170654297
    7. '.' → logprob: -16.225231170654297
    8. ' =
' → logprob: -16.350231170654297
    9. ' ' → logprob: -16.475231170654297
    10. ')' → logprob: -16.600231170654297

Token 66: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.02976079285144806
    2. 'input' → logprob: -3.5297608375549316
    3. ' map' → logprob: -12.279760360717773
    4. ' ' → logprob: -12.779760360717773
    5. ' ' → logprob: -13.404760360717773
    6. 'map' → logprob: -14.279760360717773
    7. '	input' → logprob: -15.029760360717773
    8. '(input' → logprob: -16.154760360717773
    9. '   ' → logprob: -16.279760360717773
    10. '=input' → logprob: -16.654760360717773

Token 67: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0028824990149587393
    2. '()' → logprob: -5.877882480621338
    3. '(' → logprob: -9.627882957458496
    4. ' ().' → logprob: -11.627882957458496
    5. '("' → logprob: -13.752882957458496
    6. '('' → logprob: -14.002882957458496
    7. '("").' → logprob: -15.002882957458496
    8. ' ()' → logprob: -15.877882957458496
    9. '.split' → logprob: -16.25288200378418
    10. '('').' → logprob: -16.62788200378418

Token 68: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00015908108616713434
    2. 'strip' → logprob: -8.75015926361084
    3. 'spl' → logprob: -14.87515926361084
    4. ' split' → logprob: -15.87515926361084
    5. 'rstrip' → logprob: -16.125158309936523
    6. '(split' → logprob: -19.250158309936523
    7. '.split' → logprob: -19.750158309936523
    8. 'rs' → logprob: -20.125158309936523
    9. 's' → logprob: -20.500158309936523
    10. '```' → logprob: -21.125158309936523

Token 69: '()
' (ID: 1234)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '('' → logprob: -0.03335069492459297
    2. '("("' → logprob: -4.158350467681885
    3. '(' → logprob: -4.283350467681885
    4. '()' → logprob: -5.908350467681885
    5. '("' → logprob: -7.408350467681885
    6. '('.')' → logprob: -11.033350944519043
    7. '('(' → logprob: -11.783350944519043
    8. ''' → logprob: -11.908350944519043
    9. '(',' → logprob: -12.408350944519043
    10. '("(' → logprob: -12.908350944519043

Token 70: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.17628757655620575
    2. '   ' → logprob: -2.6762876510620117
    3. '    
' → logprob: -3.1762876510620117
    4. '\n' → logprob: -3.3012876510620117
    5. '  
' → logprob: -4.801287651062012
    6. 'return' → logprob: -5.801287651062012
    7. ' return' → logprob: -7.051287651062012
    8. 'print' → logprob: -7.551287651062012
    9. ' 
' → logprob: -7.676287651062012
    10. '   
' → logprob: -7.801287651062012

Token 71: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.8576301336288452
    2. '   ' → logprob: -1.2326301336288452
    3. 'return' → logprob: -2.1076302528381348
    4. '
' → logprob: -2.8576302528381348
    5. '    
' → logprob: -2.8576302528381348
    6. ' 
' → logprob: -3.9826302528381348
    7. ' return' → logprob: -4.482630252838135
    8. '  
' → logprob: -4.857630252838135
    9. '   
' → logprob: -5.607630252838135
    10. ' print' → logprob: -5.982630252838135

Token 72: ' Con' (ID: 1532)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.14563074707984924
    2. ' print' → logprob: -2.0206308364868164
    3. '   ' → logprob: -6.020630836486816
    4. 'return' → logprob: -8.395630836486816
    5. 'result' → logprob: -8.770630836486816
    6. ' return' → logprob: -9.645630836486816
    7. '```' → logprob: -10.020630836486816
    8. '#' → logprob: -11.520630836486816
    9. ' result' → logprob: -11.520630836486816
    10. 'pr' → logprob: -13.145630836486816

Token 73: 'cat' (ID: 8837)
  Prédit: 'cat'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cat' → logprob: -0.0003217574267182499
    2. 'cate' → logprob: -8.250321388244629
    3. 'c' → logprob: -10.125321388244629
    4. 't' → logprob: -11.750321388244629
    5. '   ' → logprob: -12.875321388244629
    6. 'ca' → logprob: -13.125321388244629
    7. 'kat' → logprob: -13.250321388244629
    8. 'cats' → logprob: -13.250321388244629
    9. 'st' → logprob: -13.875321388244629
    10. 'atenate' → logprob: -14.250321388244629

Token 74: 'én' (ID: 3289)
  Prédit: 'ène'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ène' → logprob: -0.8722242712974548
    2. 'én' → logprob: -1.6222243309020996
    3. 'é' → logprob: -1.9972243309020996
    4. '   ' → logprob: -2.7472243309020996
    5. 'en' → logprob: -3.1222243309020996
    6. 'éné' → logprob: -3.2472243309020996
    7. 'ener' → logprob: -3.9972243309020996
    8. '_' → logprob: -4.3722243309021
    9. 'èn' → logprob: -4.6222243309021
    10. 'ene' → logprob: -4.6222243309021

Token 75: 'ation' (ID: 387)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.08662566542625427
    2. 'ation' → logprob: -2.711625576019287
    3. 'ate' → logprob: -4.461625576019287
    4. 'er' → logprob: -5.836625576019287
    5. 'a' → logprob: -6.461625576019287
    6. 'at' → logprob: -8.461626052856445
    7. 'es' → logprob: -8.961626052856445
    8. 'é' → logprob: -9.461626052856445
    9. '   ' → logprob: -10.711626052856445
    10. 'tion' → logprob: -11.461626052856445

Token 76: ' des' (ID: 731)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.8246243000030518
    2. '   ' → logprob: -1.3246243000030518
    3. ' =' → logprob: -1.8246243000030518
    4. 'return' → logprob: -3.8246243000030518
    5. '=' → logprob: -4.074624061584473
    6. ' return' → logprob: -4.324624061584473
    7. ',' → logprob: -4.324624061584473
    8. '(' → logprob: -4.574624061584473
    9. 'T' → logprob: -4.699624061584473
    10. ' result' → logprob: -5.074624061584473

Token 77: ' deux' (ID: 10301)
  Prédit: 'T'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'T' → logprob: -1.087267518043518
    2. 'de' → logprob: -1.087267518043518
    3. ' deux' → logprob: -2.0872673988342285
    4. ' T' → logprob: -2.7122673988342285
    5. ' chaînes' → logprob: -3.0872673988342285
    6. 't' → logprob: -3.4622673988342285
    7. ' tokens' → logprob: -4.3372673988342285
    8. ' strings' → logprob: -4.7122673988342285
    9. 'tokens' → logprob: -5.0872673988342285
    10. 'strings' → logprob: -5.4622673988342285

Token 78: ' chaînes' (ID: 179904)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.6639927625656128
    2. '   ' → logprob: -1.6639927625656128
    3. ' chaînes' → logprob: -2.2889928817749023
    4. 'rés' → logprob: -3.5389928817749023
    5. ' result' → logprob: -3.7889928817749023
    6. ' ' → logprob: -4.163992881774902
    7. 'strings' → logprob: -4.288992881774902
    8. 'print' → logprob: -4.413992881774902
    9. ' strings' → logprob: -4.663992881774902
    10. 'return' → logprob: -5.038992881774902

Token 79: ' dans' (ID: 2671)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.029212862253189087
    2. '    
' → logprob: -4.529212951660156
    3. 'return' → logprob: -4.904212951660156
    4. 'result' → logprob: -5.779212951660156
    5. ' return' → logprob: -6.029212951660156
    6. 'r' → logprob: -7.154212951660156
    7. '    ' → logprob: -7.154212951660156
    8. ',' → logprob: -8.029212951660156
    9. ' =' → logprob: -8.029212951660156
    10. 'print' → logprob: -8.029212951660156

Token 80: ' l' (ID: 305)
  Prédit: ' l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.08959732204675674
    2. 'l' → logprob: -2.464597225189209
    3. 'le' → logprob: -9.089597702026367
    4. 'reverse' → logprob: -9.339597702026367
    5. ' reverse' → logprob: -9.589597702026367
    6. ' le' → logprob: -9.589597702026367
    7. 'ordre' → logprob: -10.214597702026367
    8. '	l' → logprob: -10.214597702026367
    9. ''ordre' → logprob: -10.339597702026367
    10. '   ' → logprob: -10.589597702026367

Token 81: ''ordre' (ID: 124753)
  Prédit: ''ordre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''ordre' → logprob: -0.0027057272382080555
    2. ''' → logprob: -6.6277055740356445
    3. 'ordre' → logprob: -6.8777055740356445
    4. ''''' → logprob: -8.877705574035645
    5. '’ordre' → logprob: -9.502705574035645
    6. 'e' → logprob: -9.877705574035645
    7. '''' → logprob: -10.377705574035645
    8. 'a' → logprob: -11.002705574035645
    9. ' ordre' → logprob: -11.877705574035645
    10. ''espace' → logprob: -12.627705574035645

Token 82: ' T' (ID: 353)
  Prédit: ' T'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' T' → logprob: -0.6124958992004395
    2. 'T' → logprob: -1.8624958992004395
    3. ' inverse' → logprob: -1.8624958992004395
    4. ' ' → logprob: -2.8624958992004395
    5. 'inverse' → logprob: -2.8624958992004395
    6. ' invers' → logprob: -4.3624958992004395
    7. '   ' → logprob: -5.6124958992004395
    8. 't' → logprob: -6.1124958992004395
    9. ' reverse' → logprob: -6.1124958992004395
    10. ' t' → logprob: -6.8624958992004395

Token 83: ' suivi' (ID: 60370)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.12693199515342712
    2. ' +' → logprob: -2.12693190574646
    3. ' plus' → logprob: -13.251932144165039
    4. '   ' → logprob: -14.001932144165039
    5. ' ' → logprob: -15.126932144165039
    6. '+C' → logprob: -16.12693214416504
    7. '+r' → logprob: -16.12693214416504
    8. 'plus' → logprob: -16.37693214416504
    9. '＋' → logprob: -16.50193214416504
    10. '>' → logprob: -16.75193214416504

Token 84: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.4809822142124176
    2. 'de' → logprob: -0.9809821844100952
    3. '   ' → logprob: -5.105982303619385
    4. '  ' → logprob: -7.855982303619385
    5. ' ' → logprob: -8.605981826782227
    6. '    ' → logprob: -9.355981826782227
    7. '+' → logprob: -9.605981826782227
    8. ' par' → logprob: -10.855981826782227
    9. 'd' → logprob: -10.980981826782227
    10. ',' → logprob: -11.480981826782227

Token 85: ' S' (ID: 336)
  Prédit: 'S'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'S' → logprob: -0.18726259469985962
    2. ' S' → logprob: -1.8122625350952148
    3. ' ' → logprob: -5.187262535095215
    4. ''' → logprob: -7.062262535095215
    5. '"' → logprob: -8.062262535095215
    6. 's' → logprob: -8.437262535095215
    7. ''S' → logprob: -9.187262535095215
    8. '  ' → logprob: -9.312262535095215
    9. ' '' → logprob: -9.812262535095215
    10. '`' → logprob: -10.062262535095215

Token 86: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.016341326758265495
    2. 'return' → logprob: -4.641341209411621
    3. '    
' → logprob: -5.891341209411621
    4. '
' → logprob: -6.266341209411621
    5. ' return' → logprob: -6.391341209411621
    6. '   
' → logprob: -9.766341209411621
    7. '  
' → logprob: -10.391341209411621
    8. '```' → logprob: -10.516341209411621
    9. ' 
' → logprob: -10.891341209411621
    10. '  ' → logprob: -11.141341209411621

Token 87: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.018443262204527855
    2. 'return' → logprob: -4.2684431076049805
    3. '
' → logprob: -6.1434431076049805
    4. ' return' → logprob: -6.3934431076049805
    5. '    
' → logprob: -8.51844310760498
    6. 'print' → logprob: -8.89344310760498
    7. '```' → logprob: -10.01844310760498
    8. 'result' → logprob: -11.26844310760498
    9. 'r' → logprob: -11.39344310760498
    10. '  ' → logprob: -11.76844310760498

Token 88: ' result' (ID: 1534)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.3602026402950287
    2. '   ' → logprob: -1.610202670097351
    3. ' return' → logprob: -2.3602025508880615
    4. '    
' → logprob: -5.860202789306641
    5. 'print' → logprob: -6.235202789306641
    6. '
' → logprob: -6.485202789306641
    7. 'result' (adapté à ' result') → logprob: -7.110202789306641
    8. ' 
' → logprob: -7.985202789306641
    9. 'r' → logprob: -8.11020278930664
    10. '```' → logprob: -9.73520278930664

Token 89: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.12693220376968384
    2. '=' → logprob: -2.126932144165039
    3. ' +=' → logprob: -13.126932144165039
    4. ' ' → logprob: -14.001932144165039
    5. ' =
' → logprob: -15.376932144165039
    6. 's' → logprob: -15.501932144165039
    7. ')' → logprob: -16.12693214416504
    8. ' ="' → logprob: -16.25193214416504
    9. ' ' → logprob: -16.25193214416504
    10. '+=' → logprob: -16.37693214416504

Token 90: ' T' (ID: 353)
  Prédit: ' T'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' T' → logprob: -0.20146459341049194
    2. 'T' → logprob: -1.7014646530151367
    3. ' ' → logprob: -10.701464653015137
    4. ' f' → logprob: -11.951464653015137
    5. 'f' → logprob: -12.201464653015137
    6. ' ' → logprob: -12.201464653015137
    7. '   ' → logprob: -12.826464653015137
    8. '	T' → logprob: -12.951464653015137
    9. '    ' → logprob: -13.076464653015137
    10. '"T' → logprob: -14.263964653015137

Token 91: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.31326258182525635
    2. ' +' → logprob: -1.3132625818252563
    3. '+"' → logprob: -15.813262939453125
    4. ' +
' → logprob: -15.938262939453125
    5. '   ' → logprob: -16.313262939453125
    6. ' ' → logprob: -16.438262939453125
    7. ' +"' → logprob: -16.438262939453125
    8. '+'' → logprob: -16.938262939453125
    9. ''' → logprob: -17.438262939453125
    10. '＋' → logprob: -17.438262939453125

Token 92: ' S' (ID: 336)
  Prédit: 'S'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'S' → logprob: -0.4080873131752014
    2. ' S' → logprob: -1.1580872535705566
    3. '"' → logprob: -4.408087253570557
    4. ''' → logprob: -5.908087253570557
    5. ' ' → logprob: -5.908087253570557
    6. ' "' → logprob: -6.408087253570557
    7. ''S' → logprob: -7.158087253570557
    8. ' '' → logprob: -7.658087253570557
    9. '"S' → logprob: -8.158087730407715
    10. '  ' → logprob: -9.408087730407715

Token 93: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.31125959753990173
    2. 'print' → logprob: -1.6862596273422241
    3. '
' → logprob: -2.5612595081329346
    4. '    
' → logprob: -5.686259746551514
    5. ' print' → logprob: -6.686259746551514
    6. '  
' → logprob: -8.561259269714355
    7. ' 
' → logprob: -9.436259269714355
    8. '```' → logprob: -10.186259269714355
    9. '	print' → logprob: -10.686259269714355
    10. '   
' → logprob: -11.186259269714355

Token 94: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09070087969303131
    2. '
' → logprob: -2.84070086479187
    3. 'print' → logprob: -3.96570086479187
    4. '    
' → logprob: -4.715701103210449
    5. '```' → logprob: -8.96570110321045
    6. ' print' → logprob: -9.34070110321045
    7. '  
' → logprob: -10.09070110321045
    8. '<|end|>' → logprob: -10.21570110321045
    9. '\' → logprob: -10.96570110321045
    10. ')' → logprob: -11.09070110321045

Token 95: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.024135977029800415
    2. 'print' → logprob: -4.399136066436768
    3. '
' → logprob: -4.649136066436768
    4. '    
' → logprob: -6.274136066436768
    5. ' print' → logprob: -9.52413558959961
    6. '  
' → logprob: -11.52413558959961
    7. '```' → logprob: -11.89913558959961
    8. ' 
' → logprob: -12.39913558959961
    9. '   
' → logprob: -13.02413558959961
    10. ')' → logprob: -13.39913558959961

Token 96: ' Aff' (ID: 13741)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.3136759102344513
    2. ' print' → logprob: -1.313675880432129
    3. '   ' → logprob: -7.813675880432129
    4. '```' → logprob: -12.688675880432129
    5. ' ' → logprob: -14.188675880432129
    6. ' return' → logprob: -14.188675880432129
    7. '	print' → logprob: -14.188675880432129
    8. ' 
' → logprob: -14.563675880432129
    9. 'return' → logprob: -14.563675880432129
    10. '    
' → logprob: -14.563675880432129

Token 97: 'ichage' (ID: 118475)
  Prédit: 'iche'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iche' → logprob: -0.010317754931747913
    2. 'ic' → logprob: -5.385317802429199
    3. 'icher' → logprob: -5.635317802429199
    4. 'ichage' → logprob: -6.760317802429199
    5. '   ' → logprob: -7.510317802429199
    6. 'ich' → logprob: -8.7603178024292
    7. 'i' → logprob: -9.1353178024292
    8. '#' → logprob: -9.7603178024292
    9. 'che' → logprob: -11.5103178024292
    10. '  ' → logprob: -11.6353178024292

Token 98: ' du' (ID: 1462)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2596465051174164
    2. '(result' → logprob: -1.5096465349197388
    3. '   ' → logprob: -5.509646415710449
    4. '()' → logprob: -5.884646415710449
    5. 'result' → logprob: -7.884646415710449
    6. '(
' → logprob: -7.884646415710449
    7. ' result' → logprob: -10.50964641571045
    8. '    ' → logprob: -11.63464641571045
    9. ' ' → logprob: -11.63464641571045
    10. ' (' → logprob: -11.75964641571045

Token 99: ' résultat' (ID: 62556)
  Prédit: ' résultat'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' résultat' → logprob: -0.10542912781238556
    2. ' ' → logprob: -2.480429172515869
    3. ' result' → logprob: -5.105429172515869
    4. ' resultat' → logprob: -5.355429172515869
    5. 'result' → logprob: -5.480429172515869
    6. 'rés' → logprob: -7.730429172515869
    7. 'r' → logprob: -7.855429172515869
    8. ' ' → logprob: -8.855428695678711
    9. ' r' → logprob: -9.105428695678711
    10. ' espace' → logprob: -9.480428695678711

Token 100: ' à' (ID: 1221)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.21373070776462555
    2. '
' → logprob: -1.7137306928634644
    3. 'print' → logprob: -4.963730812072754
    4. '    
' → logprob: -5.838730812072754
    5. '\n' → logprob: -7.213730812072754
    6. '<|end|>' → logprob: -7.463730812072754
    7. '  
' → logprob: -7.963730812072754
    8. ' print' → logprob: -8.463730812072754
    9. ')' → logprob: -8.713730812072754
    10. ')
' → logprob: -9.963730812072754

Token 101: ' l' (ID: 305)
  Prédit: 'ff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ff' → logprob: -0.19964665174484253
    2. 'print' → logprob: -2.1996467113494873
    3. 'l' → logprob: -3.8246467113494873
    4. 'f' → logprob: -4.699646472930908
    5. '   ' → logprob: -5.449646472930908
    6. ' la' → logprob: -5.449646472930908
    7. 'la' → logprob: -5.574646472930908
    8. 'pp' → logprob: -5.699646472930908
    9. 'lf' → logprob: -5.824646472930908
    10. ' l' → logprob: -6.199646472930908

Token 102: ''écran' (ID: 147901)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.008503471501171589
    2. 'print' → logprob: -5.258503437042236
    3. 'es' → logprob: -7.133503437042236
    4. 'e' → logprob: -7.258503437042236
    5. ''écran' → logprob: -7.633503437042236
    6. ''utilisateur' → logprob: -7.758503437042236
    7. 'eur' → logprob: -9.133503913879395
    8. ''' → logprob: -9.133503913879395
    9. ''a' → logprob: -9.383503913879395
    10. 'à' → logprob: -9.633503913879395

Token 103: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14031504094600677
    2. '
' → logprob: -2.265315055847168
    3. 'print' → logprob: -3.890315055847168
    4. '    
' → logprob: -5.390315055847168
    5. '\n' → logprob: -7.765315055847168
    6. '  
' → logprob: -7.765315055847168
    7. ' print' → logprob: -7.890315055847168
    8. ')
' → logprob: -8.140315055847168
    9. '\' → logprob: -8.265315055847168
    10. ' 
' → logprob: -8.890315055847168

Token 104: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.129042848944664
    2. 'print' → logprob: -2.129042863845825
    3. ' print' → logprob: -6.754042625427246
    4. '
' → logprob: -7.129042625427246
    5. '    
' → logprob: -9.004042625427246
    6. '  
' → logprob: -11.504042625427246
    7. '```' → logprob: -13.129042625427246
    8. '	print' → logprob: -13.254042625427246
    9. '   
' → logprob: -13.379042625427246
    10. ' 
' → logprob: -13.504042625427246

Token 105: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.030754368752241135
    2. ' print' → logprob: -3.530754327774048
    3. '   ' → logprob: -6.905754566192627
    4. '```' → logprob: -14.405754089355469
    5. ' ' → logprob: -15.530754089355469
    6. '.print' → logprob: -15.655754089355469
    7. 'pr' → logprob: -15.780754089355469
    8. 'prin' → logprob: -16.03075408935547
    9. '	print' → logprob: -16.65575408935547
    10. '    
' → logprob: -16.65575408935547

Token 106: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0019526603864505887
    2. '(result' → logprob: -6.251952648162842
    3. '()' → logprob: -11.751953125
    4. '(
' → logprob: -12.501953125
    5. '('' → logprob: -12.501953125
    6. '("("' → logprob: -12.626953125
    7. ' (' → logprob: -13.126953125
    8. '(

' → logprob: -13.626953125
    9. '(res' → logprob: -14.626953125
    10. '(resultado' → logprob: -14.876953125

Token 107: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.2664456789934775e-06
    2. ' )' → logprob: -13.750000953674316
    3. ')`' → logprob: -17.125001907348633
    4. '()' → logprob: -17.875001907348633
    5. '))' → logprob: -17.875001907348633
    6. '')' → logprob: -18.000001907348633
    7. ')
' → logprob: -18.250001907348633
    8. '`)' → logprob: -18.500001907348633
    9. '")' → logprob: -19.000001907348633
    10. '(' → logprob: -19.125001907348633

Token 108: '#' (ID: 2)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 109: ' App' (ID: 2583)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.6438955664634705
    2. 'def' → logprob: -1.8938956260681152
    3. '```' → logprob: -2.5188956260681152
    4. '<|end|>' → logprob: -2.5188956260681152
    5. ')' → logprob: -3.3938956260681152
    6. ' ' → logprob: -3.5188956260681152
    7. 'concat' → logprob: -3.6438956260681152
    8. '[' → logprob: -4.268895626068115
    9. '\' → logprob: -4.518895626068115
    10. '_' → logprob: -5.393895626068115

Token 110: 'el' (ID: 296)
  Prédit: 'el'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'el' → logprob: -0.007230455055832863
    2. 'e' → logprob: -5.257230281829834
    3. 'l' → logprob: -6.882230281829834
    4. '_' → logprob: -8.132230758666992
    5. 'le' → logprob: -8.382230758666992
    6. '()' → logprob: -8.757230758666992
    7. 'elé' → logprob: -10.007230758666992
    8. 'eler' → logprob: -10.257230758666992
    9. 'a' → logprob: -10.632230758666992
    10. 'ele' → logprob: -10.757230758666992

Token 111: ' de' (ID: 334)
  Prédit: 'concat'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'concat' → logprob: -0.11212996393442154
    2. ' concat' → logprob: -2.6121299266815186
    3. 'def' → logprob: -4.362130165100098
    4. '(' → logprob: -5.112130165100098
    5. 'de' → logprob: -5.112130165100098
    6. ' ' → logprob: -5.987130165100098
    7. 'conc' → logprob: -6.862130165100098
    8. ' de' → logprob: -6.987130165100098
    9. '()' → logprob: -7.362130165100098
    10. '_concat' → logprob: -7.612130165100098

Token 112: ' la' (ID: 557)
  Prédit: ' concat'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' concat' → logprob: -0.02978462539613247
    2. 'concat' → logprob: -3.529784679412842
    3. '_concat' → logprob: -11.279784202575684
    4. ' conc' → logprob: -12.029784202575684
    5. ' concatenate' → logprob: -12.404784202575684
    6. ' ' → logprob: -12.779784202575684
    7. ' ' → logprob: -12.779784202575684
    8. 'conc' → logprob: -13.279784202575684
    9. ' concaten' → logprob: -13.654784202575684
    10. 'con' → logprob: -14.029784202575684

Token 113: ' fonction' (ID: 17610)
  Prédit: 'concat'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'concat' → logprob: -0.05538194254040718
    2. ' concat' → logprob: -3.430382013320923
    3. 'fonction' → logprob: -4.055381774902344
    4. 'function' → logprob: -6.305381774902344
    5. ' fonction' → logprob: -7.430381774902344
    6. 'def' → logprob: -7.555381774902344
    7. ' function' → logprob: -7.680381774902344
    8. 'func' → logprob: -7.805381774902344
    9. 'f' → logprob: -9.055381774902344
    10. 'conc' → logprob: -9.680381774902344

Token 114: ' principale' (ID: 68926)
  Prédit: 'concat'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'concat' → logprob: -0.0006278486107476056
    2. '
' → logprob: -7.5006279945373535
    3. 'conc' → logprob: -10.375627517700195
    4. ' concat' → logprob: -11.000627517700195
    5. '_concat' → logprob: -11.500627517700195
    6. '```' → logprob: -12.875627517700195
    7. 'con' → logprob: -13.000627517700195
    8. '.concat' → logprob: -13.250627517700195
    9. '\' → logprob: -13.625627517700195
    10. 'def' → logprob: -13.625627517700195

Token 115: ' pour' (ID: 1930)
  Prédit: 'concat'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'concat' → logprob: -0.1430070847272873
    2. '
' → logprob: -2.0180070400238037
    3. '\' → logprob: -9.768007278442383
    4. '

' → logprob: -9.893007278442383
    5. '
' → logprob: -10.018007278442383
    6. '  
' → logprob: -10.393007278442383
    7. 'conc' → logprob: -10.768007278442383
    8. '\
' → logprob: -11.018007278442383
    9. 'def' → logprob: -11.018007278442383
    10. '_concat' → logprob: -11.018007278442383

Token 116: ' ex' (ID: 513)
  Prédit: ' concat'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' concat' → logprob: -0.3628850281238556
    2. 'concat' → logprob: -1.6128849983215332
    3. ' tester' → logprob: -2.987884998321533
    4. ' test' → logprob: -3.987884998321533
    5. ' ex' → logprob: -4.612884998321533
    6. ' lancer' → logprob: -4.737884998321533
    7. ' effectuer' → logprob: -5.737884998321533
    8. 'test' → logprob: -5.862884998321533
    9. ' conc' → logprob: -6.362884998321533
    10. ' testing' → logprob: -6.362884998321533

Token 117: 'éc' (ID: 5675)
  Prédit: 'ec'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ec' → logprob: -0.03552068769931793
    2. 'ecute' → logprob: -4.285520553588867
    3. 'ecu' → logprob: -5.035520553588867
    4. 'éc' → logprob: -5.285520553588867
    5. 'ecut' → logprob: -5.410520553588867
    6. 'e' → logprob: -5.535520553588867
    7. 'ect' → logprob: -8.160520553588867
    8. 'cut' → logprob: -8.785520553588867
    9. 'é' → logprob: -9.160520553588867
    10. 'ecution' → logprob: -9.160520553588867

Token 118: 'uter' (ID: 23469)
  Prédit: 'uter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'uter' → logprob: -0.14346005022525787
    2. 'cut' → logprob: -2.0184600353240967
    3. '```' → logprob: -7.893460273742676
    4. ' cut' → logprob: -8.893460273742676
    5. 'ut' → logprob: -9.893460273742676
    6. 'r' → logprob: -10.768460273742676
    7. 'ute' → logprob: -11.018460273742676
    8. '   ' → logprob: -11.393460273742676
    9. 'cute' → logprob: -11.518460273742676
    10. 'ecut' → logprob: -11.518460273742676

Token 119: ' la' (ID: 557)
  Prédit: 'concat'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'concat' → logprob: -0.012507535517215729
    2. ' concat' → logprob: -4.637507438659668
    3. '()' → logprob: -6.012507438659668
    4. '_concat' → logprob: -8.762507438659668
    5. 'conc' → logprob: -10.512507438659668
    6. '(' → logprob: -10.762507438659668
    7. '```' → logprob: -10.762507438659668
    8. '()
' → logprob: -11.262507438659668
    9. 'def' → logprob: -11.512507438659668
    10. '\' → logprob: -11.512507438659668

Token 120: ' logique' (ID: 115350)
  Prédit: ' concat'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' concat' → logprob: -0.6733553409576416
    2. 'concat' → logprob: -1.0483553409576416
    3. 'fonction' → logprob: -2.2983553409576416
    4. ' code' → logprob: -4.9233551025390625
    5. 'programme' → logprob: -5.0483551025390625
    6. 'conc' → logprob: -5.1733551025390625
    7. ' programme' → logprob: -5.1733551025390625
    8. 'code' → logprob: -5.6733551025390625
    9. ' fonction' → logprob: -5.6733551025390625
    10. ' concaten' → logprob: -6.2983551025390625

Token 121: '
' (ID: 198)
  Prédit: 'concat'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'concat' → logprob: -0.6335264444351196
    2. '
' → logprob: -0.7585264444351196
    3. '\' → logprob: -8.883526802062988
    4. '()
' → logprob: -8.883526802062988
    5. 'conc' → logprob: -9.008526802062988
    6. '
' → logprob: -9.133526802062988
    7. ' concat' → logprob: -9.758526802062988
    8. ' 
' → logprob: -9.883526802062988
    9. '  
' → logprob: -10.008526802062988
    10. '_concat' → logprob: -10.008526802062988

Token 122: 'concat' (ID: 41859)
  Prédit: 'concat'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'concat' → logprob: -6.704273118884885e-07
    2. ' concat' → logprob: -14.875000953674316
    3. '```' → logprob: -15.750000953674316
    4. 'conc' → logprob: -16.125
    5. '_concat' → logprob: -17.0
    6. '.concat' → logprob: -18.875
    7. 'Concat' → logprob: -19.5
    8. 'def' → logprob: -19.875
    9. '
' → logprob: -20.0
    10. 'con' → logprob: -20.75

Token 123: '_strings' (ID: 87251)
  Prédit: '_strings'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_strings' → logprob: -0.0018531967652961612
    2. '_' → logprob: -6.876852989196777
    3. '_str' → logprob: -7.251852989196777
    4. '_string' → logprob: -9.751852989196777
    5. '_s' → logprob: -10.251852989196777
    6. '_st' → logprob: -13.126852989196777
    7. '_t' → logprob: -13.251852989196777
    8. ')_' → logprob: -13.501852989196777
    9. '```' → logprob: -13.626852989196777
    10. ' _' → logprob: -13.751852989196777

Token 124: '()' (ID: 416)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.9154741168022156
    2. ')' → logprob: -1.5404741764068604
    3. '\n' → logprob: -2.0404741764068604
    4. '
' → logprob: -2.6654741764068604
    5. '<|end|>' → logprob: -2.6654741764068604
    6. '\' → logprob: -3.2904741764068604
    7. ' ' → logprob: -4.040473937988281
    8. '#' → logprob: -4.040473937988281
    9. '()' → logprob: -4.290473937988281
    10. '```' → logprob: -4.665473937988281


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 122
Tokens correctement prédits (1ère position, stricte): 35
Tokens correctement prédits (1ère position, avec adaptation): 36
Tokens correctement prédits (top 10): 81
Précision stricte (1ère position): 28.69%
Précision adaptée (1ère position): 29.51%
Précision (top 10): 66.39%
================================================================================
