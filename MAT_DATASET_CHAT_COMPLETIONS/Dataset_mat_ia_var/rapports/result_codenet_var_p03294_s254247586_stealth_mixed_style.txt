================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:12:47
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
a = [int(x) for x in input().split()]
def calc_diff(lst, sz):
    s = 0
    for v in lst:
        s += v
    return s - sz
class Dummy: pass
obj = Dummy()
obj.val = calc_diff(a, n)
print(obj.val)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00042768914136104286
    2. ''' → logprob: -8.62542724609375
    3. '('' → logprob: -9.37542724609375
    4. '(n' → logprob: -9.87542724609375
    5. '```' → logprob: -10.37542724609375
    6. '`' → logprob: -10.75042724609375
    7. '("("' → logprob: -11.12542724609375
    8. '(
' → logprob: -11.12542724609375
    9. ')' → logprob: -11.75042724609375
    10. '()' → logprob: -12.25042724609375

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1269262135028839
    2. ')' → logprob: -2.2519261837005615
    3. '()' → logprob: -4.501926422119141
    4. '())' → logprob: -6.501926422119141
    5. '(
' → logprob: -8.12692642211914
    6. '```' → logprob: -8.62692642211914
    7. '('' → logprob: -8.87692642211914
    8. '(()' → logprob: -9.25192642211914
    9. '("("' → logprob: -9.37692642211914
    10. '<|end|>' → logprob: -9.62692642211914

Token 5: 'a' (ID: 64)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.7043631672859192
    2. 'if' → logprob: -1.4543631076812744
    3. 'for' → logprob: -2.3293631076812744
    4. 's' → logprob: -2.4543631076812744
    5. 'f' → logprob: -4.3293633460998535
    6. ' ' → logprob: -4.4543633460998535
    7. 'x' → logprob: -4.8293633460998535
    8. ')' → logprob: -4.9543633460998535
    9. 'a' → logprob: -4.9543633460998535
    10. ''' → logprob: -5.0793633460998535

Token 6: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0034043090417981148
    2. '[a' → logprob: -6.503404140472412
    3. 'a' → logprob: -7.753404140472412
    4. '[i' → logprob: -7.878404140472412
    5. '+' → logprob: -8.25340461730957
    6. '[n' → logprob: -8.37840461730957
    7. '.' → logprob: -9.50340461730957
    8. '\[' → logprob: -9.50340461730957
    9. '[:]' → logprob: -9.50340461730957
    10. '=' → logprob: -9.62840461730957

Token 7: ' [' (ID: 723)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.9420776963233948
    2. '[]' → logprob: -1.06707763671875
    3. 'list' → logprob: -1.81707763671875
    4. ' list' → logprob: -2.94207763671875
    5. ' [' → logprob: -4.19207763671875
    6. 'input' → logprob: -4.31707763671875
    7. '[input' → logprob: -5.06707763671875
    8. '[' → logprob: -5.44207763671875
    9. '[int' → logprob: -5.69207763671875
    10. '0' → logprob: -5.69207763671875

Token 8: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.31700462102890015
    2. '0' → logprob: -1.317004680633545
    3. 'i' → logprob: -6.692004680633545
    4. ']' → logprob: -6.692004680633545
    5. ']int' → logprob: -7.317004680633545
    6. '(int' → logprob: -8.317004203796387
    7. ')' → logprob: -8.567004203796387
    8. ' int' → logprob: -9.442004203796387
    9. 'input' → logprob: -10.192004203796387
    10. '[int' → logprob: -11.567004203796387

Token 9: '(x' (ID: 4061)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.05655480548739433
    2. '(input' → logprob: -3.0565547943115234
    3. '()' → logprob: -4.931554794311523
    4. '()]' → logprob: -8.056554794311523
    5. '(x' → logprob: -8.181554794311523
    6. ']' → logprob: -10.181554794311523
    7. ')' → logprob: -10.681554794311523
    8. '(a' → logprob: -11.306554794311523
    9. '(i' → logprob: -11.931554794311523
    10. 'input' → logprob: -12.056554794311523

Token 10: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.001624356722459197
    2. ')]' → logprob: -7.001624584197998
    3. '())' → logprob: -8.25162410736084
    4. '(input' → logprob: -8.37662410736084
    5. ')])' → logprob: -9.50162410736084
    6. ' )' → logprob: -9.75162410736084
    7. '()' → logprob: -11.00162410736084
    8. 'input' → logprob: -11.12662410736084
    9. '(' → logprob: -11.37662410736084
    10. '(x' → logprob: -11.87662410736084

Token 11: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.5658226609230042
    2. 'for' → logprob: -0.9408226609230042
    3. ')' → logprob: -3.1908226013183594
    4. 'input' → logprob: -8.56582260131836
    5. '(input' → logprob: -8.69082260131836
    6. ')]' → logprob: -9.19082260131836
    7. ' in' → logprob: -10.06582260131836
    8. ' input' → logprob: -10.19082260131836
    9. ']' → logprob: -10.69082260131836
    10. '=input' → logprob: -10.81582260131836

Token 12: ' x' (ID: 1215)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.08731356263160706
    2. 'input' → logprob: -2.587313652038574
    3. '<|end|>' → logprob: -5.087313652038574
    4. ' ' → logprob: -7.212313652038574
    5. '=input' → logprob: -7.337313652038574
    6. '(input' → logprob: -7.712313652038574
    7. '<|end|>' → logprob: -8.587313652038574
    8. '_input' → logprob: -9.712313652038574
    9. ' range' → logprob: -10.087313652038574
    10. ',input' → logprob: -11.212313652038574

Token 13: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.023287637159228325
    2. 'in' → logprob: -3.773287534713745
    3. ' ' → logprob: -11.773287773132324
    4. 'import' → logprob: -12.398287773132324
    5. 'a' → logprob: -12.523287773132324
    6. '<|end|>' → logprob: -12.648287773132324
    7. 'n' → logprob: -12.773287773132324
    8. 'input' → logprob: -12.898287773132324
    9. '_' → logprob: -13.273287773132324
    10. '<|end|>' → logprob: -13.398287773132324

Token 14: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.12693913280963898
    2. ' input' → logprob: -2.126939058303833
    3. 'range' → logprob: -12.001938819885254
    4. '(input' → logprob: -12.376938819885254
    5. ' range' → logprob: -14.251938819885254
    6. '=input' → logprob: -17.25193977355957
    7. '<input' → logprob: -18.25193977355957
    8. ',input' → logprob: -18.75193977355957
    9. '_input' → logprob: -19.12693977355957
    10. '	input' → logprob: -19.12693977355957

Token 15: '().' (ID: 1454)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.22990727424621582
    2. '()' → logprob: -1.7299072742462158
    3. '())' → logprob: -3.604907274246216
    4. '().' → logprob: -7.229907035827637
    5. ')]' → logprob: -9.854907035827637
    6. '(' → logprob: -9.979907035827637
    7. '()].' → logprob: -10.729907035827637
    8. '()][' → logprob: -10.979907035827637
    9. ']()' → logprob: -11.229907035827637
    10. ']' → logprob: -12.104907035827637

Token 16: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -4.203409844194539e-05
    2. 'strip' → logprob: -10.250041961669922
    3. 'rstrip' → logprob: -12.000041961669922
    4. ' split' → logprob: -15.000041961669922
    5. 'spl' → logprob: -16.875041961669922
    6. '(split' → logprob: -16.875041961669922
    7. 's' → logprob: -21.625041961669922
    8. '.split' → logprob: -21.750041961669922
    9. 'plit' → logprob: -22.250041961669922
    10. ')' → logprob: -22.250041961669922

Token 17: '()]
' (ID: 67155)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.020370198413729668
    2. '())' → logprob: -4.270370006561279
    3. '()' → logprob: -5.270370006561279
    4. '(' → logprob: -7.270370006561279
    5. '('' → logprob: -8.770370483398438
    6. ')]' → logprob: -8.895370483398438
    7. ']' → logprob: -10.020370483398438
    8. ')' → logprob: -12.770370483398438
    9. '')]' → logprob: -12.770370483398438
    10. '("' → logprob: -13.520370483398438

Token 18: 'def' (ID: 1314)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.713640570640564
    2. 'a' → logprob: -0.963640570640564
    3. 'c' → logprob: -3.8386406898498535
    4. ']' → logprob: -4.2136406898498535
    5. 'm' → logprob: -4.2136406898498535
    6. 'r' → logprob: -4.3386406898498535
    7. 'if' → logprob: -4.5886406898498535
    8. 'for' → logprob: -4.8386406898498535
    9. 'b' → logprob: -4.9636406898498535
    10. '.' → logprob: -5.4636406898498535

Token 19: ' calc' (ID: 25691)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.04685598239302635
    2. ' max' → logprob: -3.171855926513672
    3. ' sum' → logprob: -6.921855926513672
    4. ' f' → logprob: -7.546855926513672
    5. ' a' → logprob: -7.671855926513672
    6. ' space' → logprob: -7.796855926513672
    7. '_' → logprob: -8.421855926513672
    8. ' l' → logprob: -8.546855926513672
    9. ' find' → logprob: -8.671855926513672
    10. ' factorial' → logprob: -8.921855926513672

Token 20: '_diff' (ID: 41047)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.07787608355283737
    2. '(' → logprob: -3.077876091003418
    3. 'ulate' → logprob: -3.952876091003418
    4. 'u' → logprob: -6.327876091003418
    5. 'ul' → logprob: -6.702876091003418
    6. '_val' → logprob: -6.952876091003418
    7. '(a' → logprob: -7.202876091003418
    8. 'ulation' → logprob: -7.827876091003418
    9. '_sum' → logprob: -7.827876091003418
    10. '(_' → logprob: -7.952876091003418

Token 21: '(lst' (ID: 95688)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.054969966411590576
    2. '_' → logprob: -3.1799700260162354
    3. '(a' → logprob: -4.929969787597656
    4. 'er' → logprob: -6.679969787597656
    5. '(_' → logprob: -7.304969787597656
    6. '(n' → logprob: -7.304969787597656
    7. 'ence' → logprob: -7.929969787597656
    8. '```' → logprob: -8.554969787597656
    9. 's' → logprob: -8.679969787597656
    10. '('_' → logprob: -8.804969787597656

Token 22: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.39523160457611084
    2. ')' → logprob: -1.1452316045761108
    3. '[' → logprob: -5.5202317237854
    4. ')]' → logprob: -6.0202317237854
    5. ',' → logprob: -7.1452317237854
    6. '(' → logprob: -7.5202317237854
    7. ']' → logprob: -9.395231246948242
    8. ']:' → logprob: -9.895231246948242
    9. '[]):' → logprob: -10.020231246948242
    10. ' ):' → logprob: -10.145231246948242

Token 23: ' sz' (ID: 8515)
  Prédit: 'lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'lst' → logprob: -1.7605034112930298
    2. ' lst' → logprob: -2.0105032920837402
    3. 'i' → logprob: -2.1355032920837402
    4. 'idx' → logprob: -2.1355032920837402
    5. ' idx' → logprob: -2.5105032920837402
    6. ' i' → logprob: -3.1355032920837402
    7. 'n' → logprob: -3.2605032920837402
    8. ' n' → logprob: -3.2605032920837402
    9. ' index' → logprob: -3.6355032920837402
    10. 'index' → logprob: -3.6355032920837402

Token 24: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.011224652640521526
    2. ')' → logprob: -4.511224746704102
    3. ' ):' → logprob: -10.011224746704102
    4. ')):' → logprob: -10.386224746704102
    5. ',' → logprob: -10.761224746704102
    6. 'e' → logprob: -11.511224746704102
    7. 'u' → logprob: -11.511224746704102
    8. ' ' → logprob: -11.886224746704102
    9. '_' → logprob: -12.011224746704102
    10. '=' → logprob: -12.011224746704102

Token 25: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5340961217880249
    2. '   ' → logprob: -0.9090961217880249
    3. '    ' → logprob: -5.2840962409973145
    4. ' ' → logprob: -5.9090962409973145
    5. ':
' → logprob: -7.2840962409973145
    6. ':return' → logprob: -7.7840962409973145
    7. '```' → logprob: -8.034095764160156
    8. ' :' → logprob: -8.159095764160156
    9. 'n' → logprob: -8.909095764160156
    10. ' return' → logprob: -8.909095764160156

Token 26: ' s' (ID: 265)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -1.0852023363113403
    2. 'd' → logprob: -1.4602023363113403
    3. '   ' → logprob: -2.210202217102051
    4. ' max' → logprob: -2.335202217102051
    5. 'max' → logprob: -3.460202217102051
    6. ' r' → logprob: -3.460202217102051
    7. ' result' → logprob: -3.585202217102051
    8. ' return' → logprob: -3.585202217102051
    9. 'result' → logprob: -3.835202217102051
    10. 'n' → logprob: -4.710202217102051

Token 27: ' =' (ID: 314)
  Prédit: 'um'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'um' → logprob: -0.5215437412261963
    2. 'u' → logprob: -1.0215437412261963
    3. '=' → logprob: -3.5215437412261963
    4. ' =' → logprob: -4.146543502807617
    5. ' ' → logprob: -8.521543502807617
    6. '   ' → logprob: -8.771543502807617
    7. '	u' → logprob: -9.396543502807617
    8. '_' → logprob: -9.646543502807617
    9. '[' → logprob: -10.021543502807617
    10. 'z' → logprob: -10.396543502807617

Token 28: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6317691802978516
    2. '0' → logprob: -0.8817691802978516
    3. 'sum' → logprob: -3.5067691802978516
    4. ' sum' → logprob: -3.7567691802978516
    5. ' abs' → logprob: -7.381769180297852
    6. 'abs' → logprob: -8.756769180297852
    7. ' []' → logprob: -9.881769180297852
    8. ' lst' → logprob: -10.006769180297852
    9. 'lst' → logprob: -11.631769180297852
    10. ' [' → logprob: -11.631769180297852

Token 29: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.1604892611503601
    2. 'sum' → logprob: -1.9104893207550049
    3. 'abs' → logprob: -9.160489082336426
    4. 'max' → logprob: -9.660489082336426
    5. '[' → logprob: -10.535489082336426
    6. 'lst' → logprob: -10.535489082336426
    7. '[]' → logprob: -11.035489082336426
    8. ' ' → logprob: -11.910489082336426
    9. ' sum' → logprob: -12.035489082336426
    10. 'len' → logprob: -12.910489082336426

Token 30: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.065273642539978
    2. ' for' → logprob: -1.065273642539978
    3. 'for' → logprob: -1.565273642539978
    4. '<|end|>' → logprob: -3.0652737617492676
    5. ' ' → logprob: -3.5652737617492676
    6. '	for' → logprob: -4.565273761749268
    7. '
' → logprob: -5.315273761749268
    8. 'i' → logprob: -5.940273761749268
    9. '  ' → logprob: -6.190273761749268
    10. 'n' → logprob: -6.690273761749268

Token 31: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04007161408662796
    2. ' for' → logprob: -3.540071725845337
    3. 'for' → logprob: -4.915071487426758
    4. ' ' → logprob: -6.915071487426758
    5. '	for' → logprob: -7.165071487426758
    6. '
' → logprob: -7.290071487426758
    7. '    ' → logprob: -9.165071487426758
    8. '  ' → logprob: -9.165071487426758
    9. '<|end|>' → logprob: -9.415071487426758
    10. 'n' → logprob: -10.290071487426758

Token 32: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.15364119410514832
    2. ' for' → logprob: -2.1536412239074707
    3. '   ' → logprob: -3.6536412239074707
    4. 'i' → logprob: -8.653640747070312
    5. ' ' → logprob: -8.903640747070312
    6. ' i' → logprob: -10.528640747070312
    7. 'f' → logprob: -10.653640747070312
    8. 'r' → logprob: -10.903640747070312
    9. '	for' → logprob: -10.903640747070312
    10. 'n' → logprob: -11.028640747070312

Token 33: ' v' (ID: 323)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.01833079382777214
    2. 'i' → logprob: -4.0183305740356445
    3. ' ' → logprob: -8.893330574035645
    4. '	i' → logprob: -10.518330574035645
    5. '_' → logprob: -12.268330574035645
    6. '  ' → logprob: -12.768330574035645
    7. ' _' → logprob: -12.893330574035645
    8. '   ' → logprob: -13.393330574035645
    9. '_i' → logprob: -13.643330574035645
    10. ' range' → logprob: -13.643330574035645

Token 34: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0432116836309433
    2. 'in' → logprob: -3.4182116985321045
    3. ' ' → logprob: -5.168211460113525
    4. ',' → logprob: -6.293211460113525
    5. '  ' → logprob: -7.293211460113525
    6. 'i' → logprob: -7.668211460113525
    7. ' i' → logprob: -8.293211936950684
    8. 's' → logprob: -8.668211936950684
    9. '   ' → logprob: -8.668211936950684
    10. ' ,' → logprob: -9.043211936950684

Token 35: ' lst' (ID: 33384)
  Prédit: ' lst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lst' → logprob: -0.008673076517879963
    2. 'lst' → logprob: -4.758673191070557
    3. ' range' → logprob: -10.008672714233398
    4. '(lst' → logprob: -11.758672714233398
    5. '_lst' → logprob: -12.758672714233398
    6. ' ' → logprob: -14.008672714233398
    7. ' ls' → logprob: -14.508672714233398
    8. '.lst' → logprob: -15.008672714233398
    9. ' sz' → logprob: -15.133672714233398
    10. 'range' → logprob: -15.633672714233398

Token 36: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.04457775130867958
    2. '[:' → logprob: -3.2945778369903564
    3. '[' → logprob: -5.419577598571777
    4. '[:-' → logprob: -6.419577598571777
    5. '   ' → logprob: -8.794577598571777
    6. ' :' → logprob: -9.294577598571777
    7. ':
' → logprob: -9.794577598571777
    8. '[-' → logprob: -10.044577598571777
    9. '[:]' → logprob: -11.169577598571777
    10. '<|end|>' → logprob: -11.419577598571777

Token 37: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.20116360485553741
    2. 's' → logprob: -2.5761635303497314
    3. ' s' → logprob: -2.9511635303497314
    4. '    ' → logprob: -4.0761637687683105
    5. ' ' → logprob: -4.3261637687683105
    6. '        ' → logprob: -4.4511637687683105
    7. '+' → logprob: -5.3261637687683105
    8. '   ' → logprob: -6.4511637687683105
    9. 'v' → logprob: -6.9511637687683105
    10. '<|end|>' → logprob: -7.0761637687683105

Token 38: ' s' (ID: 265)
  Prédit: ' s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.6375978589057922
    2. 's' (adapté à ' s') → logprob: -0.7625978589057922
    3. ' if' → logprob: -6.512598037719727
    4. '    ' → logprob: -6.762598037719727
    5. ' ' → logprob: -6.887598037719727
    6. '   ' → logprob: -7.262598037719727
    7. 'if' → logprob: -8.512598037719727
    8. '       ' → logprob: -8.762598037719727
    9. 'v' → logprob: -9.012598037719727
    10. '        ' → logprob: -10.762598037719727

Token 39: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.4290735423564911
    2. ' +=' → logprob: -1.0540735721588135
    3. '+' → logprob: -8.304073333740234
    4. ' -=' → logprob: -10.304073333740234
    5. '+=(' → logprob: -10.804073333740234
    6. '+='' → logprob: -10.929073333740234
    7. '=' → logprob: -11.179073333740234
    8. '-=' → logprob: -11.554073333740234
    9. '+="' → logprob: -12.179073333740234
    10. ']+=' → logprob: -12.304073333740234

Token 40: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.6121681332588196
    2. 'abs' → logprob: -1.2371680736541748
    3. ' abs' → logprob: -2.487168073654175
    4. ' v' → logprob: -2.487168073654175
    5. '(abs' → logprob: -7.487168312072754
    6. 'sz' → logprob: -7.862168312072754
    7. ' ' → logprob: -9.362168312072754
    8. '(v' → logprob: -9.612168312072754
    9. ' sz' → logprob: -9.862168312072754
    10. '1' → logprob: -9.987168312072754

Token 41: '
' (ID: 198)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.1923422813415527
    2. ' -' → logprob: -1.3173422813415527
    3. '-' → logprob: -1.5673422813415527
    4. ' *' → logprob: -2.1923422813415527
    5. '*' → logprob: -2.6923422813415527
    6. '
' → logprob: -4.692342281341553
    7. '   ' → logprob: -5.442342281341553
    8. '<|end|>' → logprob: -5.567342281341553
    9. '  
' → logprob: -5.567342281341553
    10. '  ' → logprob: -5.692342281341553

Token 42: '   ' (ID: 271)
  Prédit: ' -'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.8843293786048889
    2. '-' → logprob: -1.3843293190002441
    3. ' ' → logprob: -1.3843293190002441
    4. '   ' → logprob: -3.384329319000244
    5. ' *' → logprob: -4.009329319000244
    6. ' return' → logprob: -5.134329319000244
    7. '*' → logprob: -5.134329319000244
    8. '    ' → logprob: -5.259329319000244
    9. ' /' → logprob: -5.634329319000244
    10. 'return' → logprob: -5.884329319000244

Token 43: ' return' (ID: 622)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7475762963294983
    2. '   ' → logprob: -0.8725762963294983
    3. ' return' → logprob: -3.6225762367248535
    4. '-' → logprob: -3.8725762367248535
    5. '    ' → logprob: -4.6225762367248535
    6. '    
' → logprob: -4.9975762367248535
    7. 'return' (adapté à ' return') → logprob: -4.9975762367248535
    8. ' /' → logprob: -5.3725762367248535
    9. '+' → logprob: -5.3725762367248535
    10. ' 
' → logprob: -5.3725762367248535

Token 44: ' s' (ID: 265)
  Prédit: ' s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.6013542413711548
    2. ' abs' → logprob: -1.1013542413711548
    3. 's' → logprob: -2.9763541221618652
    4. ' ' → logprob: -3.1013541221618652
    5. 'abs' → logprob: -4.476354122161865
    6. ' sz' → logprob: -5.101354122161865
    7. ' max' → logprob: -5.726354122161865
    8. ' (' → logprob: -7.101354122161865
    9. '(s' → logprob: -7.726354122161865
    10. '(abs' → logprob: -7.976354122161865

Token 45: ' -' (ID: 533)
  Prédit: ' //'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.5969095826148987
    2. ' /' → logprob: -1.346909523010254
    3. ' ' → logprob: -2.346909523010254
    4. '/' → logprob: -3.221909523010254
    5. '//' → logprob: -3.221909523010254
    6. '<|end|>' → logprob: -5.721909523010254
    7. '-' → logprob: -6.471909523010254
    8. ' *' → logprob: -6.721909523010254
    9. '  ' → logprob: -6.971909523010254
    10. '%' → logprob: -7.096909523010254

Token 46: ' sz' (ID: 8515)
  Prédit: 'sz'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sz' → logprob: -0.1648024469614029
    2. ' sz' → logprob: -1.9148024320602417
    3. '(sz' → logprob: -5.414802551269531
    4. ' (' → logprob: -10.414802551269531
    5. 'lst' → logprob: -10.914802551269531
    6. ' ' → logprob: -11.164802551269531
    7. '(' → logprob: -11.539802551269531
    8. 'max' → logprob: -12.164802551269531
    9. '_sz' → logprob: -12.414802551269531
    10. 'sum' → logprob: -12.539802551269531

Token 47: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 48: 'class' (ID: 1444)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 49: ' Dummy' (ID: 84970)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.09325134009122849
    2. ' Calculator' → logprob: -3.0932512283325195
    3. ' Counter' → logprob: -4.5932512283325195
    4. '<|end|>' → logprob: -4.8432512283325195
    5. ' My' → logprob: -5.0932512283325195
    6. ' A' → logprob: -5.3432512283325195
    7. ' User' → logprob: -6.4682512283325195
    8. ' Basic' → logprob: -6.4682512283325195
    9. ' Space' → logprob: -7.0932512283325195
    10. ' Student' → logprob: -7.4682512283325195

Token 50: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0029645077884197235
    2. '(' → logprob: -6.252964496612549
    3. '():' → logprob: -7.002964496612549
    4. ':
' → logprob: -10.502964973449707
    5. ' :' → logprob: -10.627964973449707
    6. ' (' → logprob: -11.127964973449707
    7. '(object' → logprob: -11.252964973449707
    8. '<|end|>' → logprob: -11.627964973449707
    9. '):' → logprob: -11.877964973449707
    10. ':**' → logprob: -12.502964973449707

Token 51: ' pass' (ID: 1853)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 52: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 53: 'obj' (ID: 4264)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3257018029689789
    2. 'd' → logprob: -1.5757018327713013
    3. 'n' → logprob: -3.5757017135620117
    4. '<|end|>' → logprob: -4.700701713562012
    5. 'dummy' → logprob: -4.950701713562012
    6. '

' → logprob: -5.575701713562012
    7. '  
' → logprob: -5.950701713562012
    8. 'def' → logprob: -5.950701713562012
    9. 'a' → logprob: -5.950701713562012
    10. '\n' → logprob: -6.200701713562012

Token 54: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0028980709612369537
    2. ' =' → logprob: -6.127898216247559
    3. '=' → logprob: -7.752898216247559
    4. 'es' → logprob: -9.252898216247559
    5. ' .' → logprob: -9.627898216247559
    6. 's' → logprob: -10.002898216247559
    7. ')' → logprob: -11.252898216247559
    8. '<|end|>' → logprob: -11.377898216247559
    9. '.=' → logprob: -11.627898216247559
    10. '<|end|>' → logprob: -11.752898216247559

Token 55: ' Dummy' (ID: 84970)
  Prédit: ' Dummy'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Dummy' → logprob: -0.22542338073253632
    2. 'Dummy' → logprob: -1.6004233360290527
    3. ' dummy' → logprob: -11.975423812866211
    4. ' ' → logprob: -13.975423812866211
    5. '<|end|>' → logprob: -14.100423812866211
    6. ' Dumb' → logprob: -14.975423812866211
    7. '_dummy' → logprob: -15.100423812866211
    8. '	D' → logprob: -15.162923812866211
    9. ' ' → logprob: -15.225423812866211
    10. 'dummy' → logprob: -15.475423812866211

Token 56: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0008245145436376333
    2. '()
' → logprob: -7.500824451446533
    3. '(' → logprob: -8.375824928283691
    4. '()

' → logprob: -11.000824928283691
    5. '()\' → logprob: -11.250824928283691
    6. ' ()' → logprob: -12.625824928283691
    7. '()<' → logprob: -12.875824928283691
    8. '().' → logprob: -13.500824928283691
    9. '();' → logprob: -14.250824928283691
    10. '()</' → logprob: -14.875824928283691

Token 57: 'obj' (ID: 4264)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.4480479657649994
    2. 'obj' → logprob: -1.3230479955673218
    3. 'n' → logprob: -3.6980478763580322
    4. '_' → logprob: -3.9480478763580322
    5. '
' → logprob: -4.573048114776611
    6. 'for' → logprob: -4.573048114776611
    7. 'a' → logprob: -4.698048114776611
    8. '<|end|>' → logprob: -5.323048114776611
    9. '.
' → logprob: -5.573048114776611
    10. 's' → logprob: -6.323048114776611

Token 58: '.val' (ID: 20368)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0013653546338900924
    2. ' .' → logprob: -7.5013651847839355
    3. '.n' → logprob: -8.376365661621094
    4. '<|end|>' → logprob: -8.626365661621094
    5. '.s' → logprob: -8.876365661621094
    6. '.a' → logprob: -9.126365661621094
    7. '.<' → logprob: -10.751365661621094
    8. ' ' → logprob: -11.126365661621094
    9. '.=' → logprob: -11.501365661621094
    10. ' =' → logprob: -11.501365661621094

Token 59: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.284564733505249
    2. ' ' → logprob: -1.659564733505249
    3. '=' → logprob: -4.409564971923828
    4. ' +=' → logprob: -4.409564971923828
    5. '<|end|>' → logprob: -4.784564971923828
    6. '  ' → logprob: -4.909564971923828
    7. ' +' → logprob: -5.034564971923828
    8. '+' → logprob: -5.159564971923828
    9. '_' → logprob: -5.534564971923828
    10. '+=' → logprob: -8.784564971923828

Token 60: ' calc' (ID: 25691)
  Prédit: 'calc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'calc' → logprob: -0.6181511282920837
    2. '0' → logprob: -1.8681511878967285
    3. 'a' → logprob: -1.8681511878967285
    4. ' calc' → logprob: -2.6181511878967285
    5. 'n' → logprob: -3.3681511878967285
    6. ' a' → logprob: -4.3681511878967285
    7. ' ' → logprob: -4.6181511878967285
    8. ' n' → logprob: -4.6181511878967285
    9. 'sum' → logprob: -5.2431511878967285
    10. ' sum' → logprob: -6.4931511878967285

Token 61: '_diff' (ID: 41047)
  Prédit: '_diff'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_diff' → logprob: -6.869017852295656e-06
    2. '_' → logprob: -12.000006675720215
    3. '_DIFF' → logprob: -15.250006675720215
    4. '_difference' → logprob: -15.625006675720215
    5. '_d' → logprob: -16.12500762939453
    6. 'Diff' → logprob: -16.62500762939453
    7. 'diff' → logprob: -16.75000762939453
    8. '_dist' → logprob: -17.62500762939453
    9. '_def' → logprob: -18.62500762939453
    10. '_val' → logprob: -18.75000762939453

Token 62: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.20815470814704895
    2. '(lst' → logprob: -1.9581546783447266
    3. '(' → logprob: -3.0831546783447266
    4. '(list' → logprob: -8.333154678344727
    5. '([' → logprob: -8.833154678344727
    6. '(obj' → logprob: -9.458154678344727
    7. '(calc' → logprob: -9.583154678344727
    8. '(l' → logprob: -9.708154678344727
    9. '(s' → logprob: -9.708154678344727
    10. '(
' → logprob: -10.083154678344727

Token 63: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.016771860420703888
    2. ',n' → logprob: -4.1417717933654785
    3. ' ,' → logprob: -7.5167717933654785
    4. '(n' → logprob: -9.641772270202637
    5. ',len' → logprob: -9.766772270202637
    6. ')' → logprob: -10.766772270202637
    7. ',a' → logprob: -10.891772270202637
    8. ' ' → logprob: -11.266772270202637
    9. '(' → logprob: -12.766772270202637
    10. '   ' → logprob: -12.891772270202637

Token 64: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.3134727478027344
    2. 'n' → logprob: -1.3134727478027344
    3. ' len' → logprob: -9.313472747802734
    4. 'len' → logprob: -9.938472747802734
    5. ' ' → logprob: -10.438472747802734
    6. ')' → logprob: -11.063472747802734
    7. ')n' → logprob: -11.063472747802734
    8. '10' → logprob: -12.938472747802734
    9. '0' → logprob: -13.188472747802734
    10. '2' → logprob: -14.313472747802734

Token 65: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.438573680294212e-06
    2. ')
' → logprob: -12.625005722045898
    3. '))' → logprob: -14.000005722045898
    4. ' )' → logprob: -14.500005722045898
    5. '+' → logprob: -15.375005722045898
    6. ')n' → logprob: -16.2500057220459
    7. ')

' → logprob: -16.5000057220459
    8. ')))' → logprob: -17.0000057220459
    9. '),' → logprob: -17.2500057220459
    10. ')>' → logprob: -17.5000057220459

Token 66: 'print' (ID: 1598)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.710395336151123
    2. 'print' → logprob: -1.335395336151123
    3. 'if' → logprob: -2.335395336151123
    4. '+' → logprob: -2.835395336151123
    5. '<|end|>' → logprob: -2.835395336151123
    6. ' if' → logprob: -4.835395336151123
    7. 'obj' → logprob: -5.460395336151123
    8. '+
' → logprob: -5.460395336151123
    9. '*' → logprob: -5.960395336151123
    10. ' ' → logprob: -6.585395336151123

Token 67: '(obj' (ID: 12464)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6931750178337097
    2. '(obj' → logprob: -0.6931750178337097
    3. '(object' → logprob: -11.443175315856934
    4. 'obj' → logprob: -11.443175315856934
    5. '()' → logprob: -13.193175315856934
    6. ' (' → logprob: -14.068175315856934
    7. '("("' → logprob: -14.068175315856934
    8. '(a' → logprob: -14.318175315856934
    9. '('' → logprob: -14.818175315856934
    10. '(ob' → logprob: -15.193175315856934

Token 68: '.val' (ID: 20368)
  Prédit: '.val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.val' → logprob: -0.06208554655313492
    2. '.' → logprob: -2.8120856285095215
    3. ').' → logprob: -9.562085151672363
    4. ')' → logprob: -10.812085151672363
    5. ' .' → logprob: -11.312085151672363
    6. '.v' → logprob: -12.562085151672363
    7. '.)' → logprob: -12.812085151672363
    8. '.
' → logprob: -12.812085151672363
    9. '.obj' → logprob: -13.812085151672363
    10. '.Val' → logprob: -14.312085151672363

Token 69: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.2200749754119897e-06
    2. ' )' → logprob: -13.250001907348633
    3. '))' → logprob: -15.250001907348633
    4. ')
' → logprob: -16.750001907348633
    5. '+' → logprob: -17.875001907348633
    6. ')`' → logprob: -18.250001907348633
    7. '()' → logprob: -18.750001907348633
    8. '')' → logprob: -18.875001907348633
    9. ')}' → logprob: -19.000001907348633
    10. '}' → logprob: -19.000001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 67
Tokens correctement prédits (1ère position, stricte): 22
Tokens correctement prédits (1ère position, avec adaptation): 23
Tokens correctement prédits (top 10): 46
Précision stricte (1ère position): 32.84%
Précision adaptée (1ère position): 34.33%
Précision (top 10): 68.66%
================================================================================
