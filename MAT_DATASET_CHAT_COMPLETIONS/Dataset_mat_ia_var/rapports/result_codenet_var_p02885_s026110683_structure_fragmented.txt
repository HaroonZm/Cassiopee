================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:41:35
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def read_input():
    return input()

def split_input(input_str):
    return input_str.split()

def map_to_int(str_list):
    return list(map(int, str_list))

def unpack_values(int_list):
    A = int_list[0]
    B = int_list[1]
    return A, B

def calculate_value(A, B):
    return A - 2 * B

def apply_max_constraint(val):
    return max(0, val)

def print_result(result):
    print(result)

def main():
    input_str = read_input()
    str_list = split_input(input_str)
    int_list = map_to_int(str_list)
    A, B = unpack_values(int_list)
    value = calculate_value(A, B)
    final_result = apply_max_constraint(value)
    print_result(final_result)

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' read' (ID: 1729)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00190472393296659
    2. '_' → logprob: -6.876904487609863
    3. '(:' → logprob: -8.126904487609863
    4. '():' → logprob: -8.376904487609863
    5. '(_:' → logprob: -8.626904487609863
    6. '(_' → logprob: -10.001904487609863
    7. ' (' → logprob: -10.126904487609863
    8. '```' → logprob: -10.751904487609863
    9. ':' → logprob: -11.001904487609863
    10. ''' → logprob: -11.626904487609863

Token 4: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.5170444250106812
    2. '\n' → logprob: -1.1420444250106812
    3. '\' → logprob: -3.0170445442199707
    4. '   ' → logprob: -4.142044544219971
    5. '``' → logprob: -5.517044544219971
    6. ''\' → logprob: -5.642044544219971
    7. '    
' → logprob: -6.017044544219971
    8. ':' → logprob: -6.142044544219971
    9. '
' → logprob: -7.017044544219971
    10. ':
' → logprob: -7.392044544219971

Token 5: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8412054181098938
    2. 'return' (adapté à ' return') → logprob: -0.8412054181098938
    3. 'input' → logprob: -3.216205358505249
    4. '```' → logprob: -3.341205358505249
    5. 'x' → logprob: -3.966205358505249
    6. 'data' → logprob: -4.966205596923828
    7. 'r' → logprob: -5.091205596923828
    8. '    ' → logprob: -5.091205596923828
    9. 'pass' → logprob: -5.841205596923828
    10. ' return' → logprob: -5.841205596923828

Token 6: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.34300073981285095
    2. 'input' → logprob: -2.093000650405884
    3. '"' → logprob: -2.468000650405884
    4. ' input' → logprob: -2.718000650405884
    5. ''' → logprob: -4.343000888824463
    6. '  ' → logprob: -6.843000888824463
    7. ' "' → logprob: -7.843000888824463
    8. '(input' → logprob: -8.093000411987305
    9. ' []' → logprob: -8.218000411987305
    10. ' '' → logprob: -8.718000411987305

Token 7: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00296676903963089
    2. '()' → logprob: -5.87796688079834
    3. '('' → logprob: -10.00296688079834
    4. ' (' → logprob: -10.12796688079834
    5. '("("' → logprob: -10.37796688079834
    6. '(
' → logprob: -11.12796688079834
    7. '(

' → logprob: -11.75296688079834
    8. '```' → logprob: -12.62796688079834
    9. '(`' → logprob: -12.87796688079834
    10. '"' → logprob: -12.87796688079834

Token 8: 'def' (ID: 1314)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.8526632785797119
    2. '```' → logprob: -2.227663278579712
    3. '(' → logprob: -2.352663278579712
    4. '<|end|>' → logprob: -2.477663278579712
    5. '
' → logprob: -3.102663278579712
    6. 'def' → logprob: -3.352663278579712
    7. '()' → logprob: -3.352663278579712
    8. '#' → logprob: -3.352663278579712
    9. 'newline' → logprob: -3.852663278579712
    10. '\' → logprob: -4.102663040161133

Token 9: ' split' (ID: 12648)
  Prédit: ' process'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' process' → logprob: -1.1154332160949707
    2. ' calculate' → logprob: -1.2404332160949707
    3. ' write' → logprob: -1.4904332160949707
    4. ' main' → logprob: -2.4904332160949707
    5. ' read' → logprob: -3.8654332160949707
    6. ' compute' → logprob: -4.365433216094971
    7. ' space' → logprob: -4.865433216094971
    8. ' parse' → logprob: -5.240433216094971
    9. ' user' → logprob: -5.740433216094971
    10. ' ' → logprob: -5.865433216094971

Token 10: '_input' (ID: 12507)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.01653081737458706
    2. '_line' → logprob: -5.266530990600586
    3. '(' → logprob: -5.391530990600586
    4. '_text' → logprob: -6.016530990600586
    5. '_input' → logprob: -6.391530990600586
    6. '_s' → logprob: -7.891530990600586
    7. '_string' → logprob: -8.141530990600586
    8. '_words' → logprob: -8.141530990600586
    9. '_lines' → logprob: -8.516530990600586
    10. '_word' → logprob: -8.891530990600586

Token 11: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014563847333192825
    2. '_' → logprob: -5.014564037322998
    3. '('_' → logprob: -5.139564037322998
    4. '("_' → logprob: -7.889564037322998
    5. '("("' → logprob: -8.26456356048584
    6. '('' → logprob: -8.38956356048584
    7. '_line' → logprob: -8.63956356048584
    8. '_text' → logprob: -8.76456356048584
    9. '(_)' → logprob: -9.13956356048584
    10. '()' → logprob: -9.38956356048584

Token 12: '_str' (ID: 6182)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.47860145568847656
    2. ')' → logprob: -1.1036014556884766
    3. '_string' → logprob: -3.6036014556884766
    4. '_text' → logprob: -4.728601455688477
    5. '_' → logprob: -4.853601455688477
    6. '_str' → logprob: -6.478601455688477
    7. ')_' → logprob: -7.228601455688477
    8. '):
' → logprob: -7.478601455688477
    9. ',' → logprob: -7.603601455688477
    10. '_line' → logprob: -8.353601455688477

Token 13: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.004557461477816105
    2. ',' → logprob: -6.1295576095581055
    3. ')' → logprob: -6.5045576095581055
    4. '):
' → logprob: -7.3795576095581055
    5. ':' → logprob: -9.504557609558105
    6. ' ):' → logprob: -9.504557609558105
    7. '(' → logprob: -11.004557609558105
    8. '   ' → logprob: -11.254557609558105
    9. '=' → logprob: -11.629557609558105
    10. '():' → logprob: -12.129557609558105

Token 14: '   ' (ID: 271)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.7447001934051514
    2. ' input' → logprob: -0.8697001934051514
    3. '   ' → logprob: -2.6197001934051514
    4. ' return' → logprob: -4.3697004318237305
    5. '(input' → logprob: -4.3697004318237305
    6. 'return' → logprob: -5.7447004318237305
    7. '(' → logprob: -5.9947004318237305
    8. '_input' → logprob: -6.9947004318237305
    9. ' (' → logprob: -7.8697004318237305
    10. '_' → logprob: -8.61970043182373

Token 15: ' return' (ID: 622)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.20502939820289612
    2. 'input' → logprob: -1.7050293684005737
    3. ' return' → logprob: -5.955029487609863
    4. 'return' (adapté à ' return') → logprob: -7.080029487609863
    5. ' split' → logprob: -9.955029487609863
    6. '   ' → logprob: -9.955029487609863
    7. 'split' → logprob: -10.330029487609863
    8. '    ' → logprob: -11.955029487609863
    9. '=input' → logprob: -12.080029487609863
    10. '_input' → logprob: -12.330029487609863

Token 16: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.5759432911872864
    2. 'input' → logprob: -0.8259432911872864
    3. '(input' → logprob: -13.450942993164062
    4. '[input' → logprob: -14.075942993164062
    5. '[' → logprob: -14.325942993164062
    6. '[]' → logprob: -14.950942993164062
    7. '=input' → logprob: -16.075942993164062
    8. '	input' → logprob: -16.325942993164062
    9. ',input' → logprob: -16.450942993164062
    10. '`' → logprob: -16.575942993164062

Token 17: '_str' (ID: 6182)
  Prédit: '_str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_str' → logprob: -0.0011161656584590673
    2. '_' → logprob: -7.1261162757873535
    3. 'str' → logprob: -8.501115798950195
    4. '(' → logprob: -10.126115798950195
    5. '_s' → logprob: -10.751115798950195
    6. '_string' → logprob: -11.251115798950195
    7. '_split' → logprob: -11.751115798950195
    8. '```' → logprob: -11.751115798950195
    9. 'Str' → logprob: -12.876115798950195
    10. '_STR' → logprob: -12.876115798950195

Token 18: '.split' (ID: 10347)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.4743358790874481
    2. '.split' → logprob: -0.9743359088897705
    3. '.strip' → logprob: -8.599335670471191
    4. ' .' → logprob: -9.599335670471191
    5. 'split' → logprob: -13.099335670471191
    6. '.s' → logprob: -13.224335670471191
    7. '.rstrip' → logprob: -14.099335670471191
    8. '.replace' → logprob: -14.849335670471191
    9. '.Split' → logprob: -14.974335670471191
    10. '.
' → logprob: -15.099335670471191

Token 19: '()

' (ID: 5874)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '('' → logprob: -0.030857983976602554
    2. '(' → logprob: -3.780858039855957
    3. '("("' → logprob: -4.905858039855957
    4. ''' → logprob: -9.280858039855957
    5. '('.')' → logprob: -9.780858039855957
    6. '()' → logprob: -11.530858039855957
    7. '(`' → logprob: -12.030858039855957
    8. '(',' → logprob: -12.530858039855957
    9. '(('' → logprob: -12.905858039855957
    10. '("' → logprob: -13.655858039855957

Token 20: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0008924020221456885
    2. '```' → logprob: -7.875892639160156
    3. '<|end|>' → logprob: -9.000892639160156
    4. '\' → logprob: -9.125892639160156
    5. '
' → logprob: -9.375892639160156
    6. '

' → logprob: -9.750892639160156
    7. '#' → logprob: -10.750892639160156
    8. '\n' → logprob: -11.000892639160156
    9. ' def' → logprob: -11.125892639160156
    10. '<|end|>' → logprob: -11.500892639160156

Token 21: ' map' (ID: 4014)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.03313034400343895
    2. 'main' → logprob: -3.908130407333374
    3. ' process' → logprob: -5.033130168914795
    4. ' join' → logprob: -5.908130168914795
    5. ' calculate' → logprob: -6.533130168914795
    6. 'process' → logprob: -7.908130168914795
    7. ' convert' → logprob: -8.158130645751953
    8. 'calculate' → logprob: -8.658130645751953
    9. ' parse' → logprob: -8.908130645751953
    10. ' sum' → logprob: -9.033130645751953

Token 22: '_to' (ID: 5089)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.11588051170110703
    2. '(int' → logprob: -2.8658804893493652
    3. '(lambda' → logprob: -2.9908804893493652
    4. '()' → logprob: -7.740880489349365
    5. '_input' → logprob: -7.865880489349365
    6. '_' → logprob: -8.240880966186523
    7. '(str' → logprob: -8.615880966186523
    8. 'def' → logprob: -8.740880966186523
    9. 'int' → logprob: -9.490880966186523
    10. '_lambda' → logprob: -9.740880966186523

Token 23: '_int' (ID: 12285)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.589297354221344
    2. '_int' → logprob: -0.839297354221344
    3. ' int' → logprob: -4.339297294616699
    4. '_list' → logprob: -8.8392972946167
    5. '<int' → logprob: -11.0892972946167
    6. '(int' → logprob: -11.5892972946167
    7. 'ints' → logprob: -11.7142972946167
    8. '_float' → logprob: -11.8392972946167
    9. '_str' → logprob: -12.3392972946167
    10. 'list' → logprob: -12.3392972946167

Token 24: '(str' (ID: 7946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0022432736586779356
    2. ' (' → logprob: -7.1272430419921875
    3. 's' → logprob: -7.2522430419921875
    4. '(s' → logprob: -8.377243041992188
    5. '()' → logprob: -8.627243041992188
    6. '("("' → logprob: -9.127243041992188
    7. '(user' → logprob: -10.377243041992188
    8. '(token' → logprob: -10.502243041992188
    9. ')' → logprob: -11.002243041992188
    10. '   ' → logprob: -11.127243041992188

Token 25: '_list' (ID: 4162)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.00632003229111433
    2. ')' → logprob: -5.631319999694824
    3. 'ings' → logprob: -6.631319999694824
    4. 'ing' → logprob: -7.506319999694824
    5. '_list' → logprob: -8.006319999694824
    6. ')s' → logprob: -9.006319999694824
    7. '_tokens' → logprob: -9.131319999694824
    8. '_)' → logprob: -9.256319999694824
    9. '_s' → logprob: -9.506319999694824
    10. '_' → logprob: -9.881319999694824

Token 26: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.11481139063835144
    2. ',' → logprob: -2.614811420440674
    3. ')' → logprob: -3.364811420440674
    4. '(' → logprob: -8.114810943603516
    5. ' ):' → logprob: -8.989810943603516
    6. '):
' → logprob: -9.364810943603516
    7. '   ' → logprob: -10.489810943603516
    8. '[' → logprob: -10.739810943603516
    9. '[]):' → logprob: -10.739810943603516
    10. ' )' → logprob: -10.864810943603516

Token 27: '   ' (ID: 271)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.8304766416549683
    2. '   ' → logprob: -1.2054766416549683
    3. ' return' → logprob: -1.4554766416549683
    4. '[int' → logprob: -4.455476760864258
    5. 'int' → logprob: -4.580476760864258
    6. '[' → logprob: -5.705476760864258
    7. 'def' → logprob: -5.830476760864258
    8. 'lambda' → logprob: -6.455476760864258
    9. ' map' → logprob: -8.080476760864258
    10. 'map' → logprob: -8.455476760864258

Token 28: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.5075275301933289
    2. '   ' → logprob: -1.5075275897979736
    3. ' return' → logprob: -1.7575275897979736
    4. '[int' → logprob: -6.0075273513793945
    5. '[' → logprob: -7.1325273513793945
    6. ' map' → logprob: -8.132527351379395
    7. 'map' → logprob: -8.757527351379395
    8. 'list' → logprob: -9.007527351379395
    9. ' [' → logprob: -9.507527351379395
    10. ' list' → logprob: -9.632527351379395

Token 29: ' list' (ID: 1562)
  Prédit: ' list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.008027588948607445
    2. 'list' → logprob: -5.75802755355835
    3. ' [' → logprob: -6.00802755355835
    4. ' map' → logprob: -6.13302755355835
    5. '[int' → logprob: -9.133028030395508
    6. '[list' → logprob: -9.883028030395508
    7. '[' → logprob: -10.508028030395508
    8. 'map' → logprob: -11.508028030395508
    9. ' int' → logprob: -11.758028030395508
    10. '   ' → logprob: -13.508028030395508

Token 30: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.023257708176970482
    2. '(' → logprob: -3.7732577323913574
    3. '(int' → logprob: -11.6482572555542
    4. '(
' → logprob: -13.1482572555542
    5. '(

' → logprob: -13.6482572555542
    6. '	map' → logprob: -16.148258209228516
    7. '_map' → logprob: -16.148258209228516
    8. ' map' → logprob: -16.648258209228516
    9. ',map' → logprob: -16.648258209228516
    10. ' (' → logprob: -17.148258209228516

Token 31: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0024489001370966434
    2. 'int' → logprob: -6.377449035644531
    3. ' int' → logprob: -7.752449035644531
    4. '(' → logprob: -8.752449035644531
    5. '<int' → logprob: -9.877449035644531
    6. '   ' → logprob: -10.002449035644531
    7. '=int' → logprob: -10.377449035644531
    8. ',int' → logprob: -11.252449035644531
    9. '	int' → logprob: -11.877449035644531
    10. ')' → logprob: -12.627449035644531

Token 32: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00912773609161377
    2. '(' → logprob: -5.634127616882324
    3. '(str' → logprob: -6.134127616882324
    4. ',str' → logprob: -6.259127616882324
    5. ')' → logprob: -7.009127616882324
    6. ' ,' → logprob: -8.509127616882324
    7. '))' → logprob: -9.009127616882324
    8. ' ' → logprob: -9.759127616882324
    9. '(
' → logprob: -10.509127616882324
    10. ' (' → logprob: -10.634127616882324

Token 33: ' str' (ID: 989)
  Prédit: ' str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' str' → logprob: -0.4740825295448303
    2. 'str' → logprob: -0.9740825295448303
    3. '	str' → logprob: -12.974082946777344
    4. ' ' → logprob: -14.099082946777344
    5. '(str' → logprob: -14.474082946777344
    6. '   ' → logprob: -14.599082946777344
    7. ')' → logprob: -14.724082946777344
    8. '_str' → logprob: -15.474082946777344
    9. ',str' → logprob: -15.599082946777344
    10. 'stri' → logprob: -16.099082946777344

Token 34: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -5.796184723294573e-06
    2. '_str' → logprob: -12.750005722045898
    3. '_' → logprob: -13.375005722045898
    4. '_lst' → logprob: -14.375005722045898
    5. ')_' → logprob: -14.875005722045898
    6. '))' → logprob: -16.5000057220459
    7. '_l' → logprob: -16.6250057220459
    8. ')' → logprob: -16.7500057220459
    9. '_List' → logprob: -17.3750057220459
    10. 'list' → logprob: -17.8750057220459

Token 35: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0001899511698866263
    2. ')))' → logprob: -9.125189781188965
    3. ')' → logprob: -9.500189781188965
    4. ' ))' → logprob: -12.750189781188965
    5. '))
' → logprob: -13.000189781188965
    6. '   ' → logprob: -14.250189781188965
    7. ' ' → logprob: -15.500189781188965
    8. '()))' → logprob: -16.37519073486328
    9. '))))' → logprob: -16.62519073486328
    10. '));' → logprob: -17.62519073486328

Token 36: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.015096605755388737
    2. '
' → logprob: -4.640096664428711
    3. '

' → logprob: -6.015096664428711
    4. '<|end|>' → logprob: -6.515096664428711
    5. '\' → logprob: -7.640096664428711
    6. '<|end|>' → logprob: -8.015096664428711
    7. 'd' → logprob: -8.765096664428711
    8. '\n' → logprob: -9.265096664428711
    9. ' def' → logprob: -9.640096664428711
    10. '```' → logprob: -9.765096664428711

Token 37: ' unpack' (ID: 61704)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.04305662214756012
    2. ' calculate' → logprob: -3.7930567264556885
    3. ' solve' → logprob: -5.293056488037109
    4. ' compute' → logprob: -5.418056488037109
    5. ' process' → logprob: -5.668056488037109
    6. ' sum' → logprob: -5.793056488037109
    7. ' find' → logprob: -7.043056488037109
    8. ' count' → logprob: -7.543056488037109
    9. 'main' → logprob: -8.16805648803711
    10. ' read' → logprob: -8.16805648803711

Token 38: '_values' (ID: 20393)
  Prédit: '_input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.7847475409507751
    2. '_' → logprob: -2.03474760055542
    3. '(' → logprob: -2.40974760055542
    4. '_args' → logprob: -2.53474760055542
    5. '()' → logprob: -3.15974760055542
    6. '_parameters' → logprob: -3.28474760055542
    7. '_arguments' → logprob: -3.40974760055542
    8. '_params' → logprob: -3.65974760055542
    9. '_inputs' → logprob: -4.03474760055542
    10. '_tuple' → logprob: -4.15974760055542

Token 39: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5043847560882568
    2. '(input' → logprob: -1.6293847560882568
    3. '(values' → logprob: -2.504384756088257
    4. '(args' → logprob: -2.879384756088257
    5. '(line' → logprob: -4.254384994506836
    6. '(params' → logprob: -4.504384994506836
    7. '(str' → logprob: -4.504384994506836
    8. '(s' → logprob: -5.129384994506836
    9. '():' → logprob: -5.254384994506836
    10. '(inputs' → logprob: -5.754384994506836

Token 40: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -0.5830010175704956
    2. 's' → logprob: -1.0830010175704956
    3. '_s' → logprob: -2.458001136779785
    4. '_values' → logprob: -4.458001136779785
    5. '_' → logprob: -6.208001136779785
    6. ')_' → logprob: -6.333001136779785
    7. '):' → logprob: -7.958001136779785
    8. ')' → logprob: -8.083001136779785
    9. '_lists' → logprob: -8.333001136779785
    10. '_lst' → logprob: -8.833001136779785

Token 41: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00028052396373823285
    2. ')' → logprob: -8.250280380249023
    3. ' ):' → logprob: -11.375280380249023
    4. '):
' → logprob: -12.375280380249023
    5. ',' → logprob: -13.625280380249023
    6. '   ' → logprob: -13.750280380249023
    7. ':' → logprob: -14.500280380249023
    8. '[]):' → logprob: -15.750280380249023
    9. '():' → logprob: -15.875280380249023
    10. ')):' → logprob: -16.625280380249023

Token 42: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00047940885997377336
    2. ' return' → logprob: -8.125479698181152
    3. 'return' → logprob: -8.750479698181152
    4. '    ' → logprob: -11.750479698181152
    5. ' ' → logprob: -12.375479698181152
    6. '   ' → logprob: -12.625479698181152
    7. '  ' → logprob: -12.875479698181152
    8. ' if' → logprob: -13.000479698181152
    9. 'if' → logprob: -13.500479698181152
    10. '	return' → logprob: -14.000479698181152

Token 43: ' A' (ID: 355)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6464592814445496
    2. 'a' → logprob: -1.0214593410491943
    3. 'return' → logprob: -2.2714593410491943
    4. ' return' → logprob: -5.021459102630615
    5. ' a' → logprob: -5.521459102630615
    6. 'if' → logprob: -6.271459102630615
    7. 'x' → logprob: -8.896459579467773
    8. ' if' → logprob: -9.396459579467773
    9. ' ' → logprob: -10.271459579467773
    10. '(a' → logprob: -10.646459579467773

Token 44: ' =' (ID: 314)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.007384186144918203
    2. ' =' → logprob: -5.507384300231934
    3. '=' → logprob: -6.382384300231934
    4. ',B' → logprob: -7.507384300231934
    5. ' ,' → logprob: -7.757384300231934
    6. '1' → logprob: -8.132384300231934
    7. '[' → logprob: -9.257384300231934
    8. ',b' → logprob: -9.382384300231934
    9. 'A' → logprob: -10.007384300231934
    10. ',A' → logprob: -10.132384300231934

Token 45: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.386875182390213
    2. 'int' → logprob: -1.1368751525878906
    3. '<int' → logprob: -13.63687515258789
    4. '=int' → logprob: -14.01187515258789
    5. '[int' → logprob: -14.13687515258789
    6. '(int' → logprob: -14.88687515258789
    7. ',int' → logprob: -14.88687515258789
    8. '0' → logprob: -16.26187515258789
    9. ':int' → logprob: -16.38687515258789
    10. 'ints' → logprob: -16.38687515258789

Token 46: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -4.320199877838604e-07
    2. '_' → logprob: -15.625
    3. 'list' → logprob: -16.25
    4. 'List' → logprob: -16.5
    5. '_lists' → logprob: -17.0
    6. '_List' → logprob: -18.125
    7. '_lst' → logprob: -18.5
    8. '_lista' → logprob: -18.625
    9. '_LIST' → logprob: -18.875
    10. '_array' → logprob: -18.875

Token 47: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -5.080963092041202e-06
    2. '[:]' → logprob: -13.250004768371582
    3. '0' → logprob: -13.500004768371582
    4. ',' → logprob: -14.125004768371582
    5. '[
' → logprob: -15.375004768371582
    6. ' [' → logprob: -15.750004768371582
    7. '```' → logprob: -15.750004768371582
    8. '[:' → logprob: -15.750004768371582
    9. '
' → logprob: -16.3750057220459
    10. '[-' → logprob: -16.5000057220459

Token 48: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -7.941850526549388e-06
    2. ' ' → logprob: -11.750007629394531
    3. '1' → logprob: -17.50000762939453
    4. '   ' → logprob: -18.50000762939453
    5. '۰' → logprob: -18.75000762939453
    6. '00' → logprob: -19.00000762939453
    7. '０' → logprob: -19.37500762939453
    8. '  ' → logprob: -20.00000762939453
    9. '2' → logprob: -20.50000762939453
    10. ']' → logprob: -20.56250762939453

Token 49: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0015560438623651862
    2. ']
' → logprob: -6.751555919647217
    3. ' ]' → logprob: -8.001556396484375
    4. '],' → logprob: -10.376556396484375
    5. ',' → logprob: -12.001556396484375
    6. ')' → logprob: -12.626556396484375
    7. ']
' → logprob: -12.626556396484375
    8. ']

' → logprob: -13.251556396484375
    9. ' ]
' → logprob: -13.876556396484375
    10. '],
' → logprob: -14.251556396484375

Token 50: '   ' (ID: 271)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7725410461425781
    2. '   ' → logprob: -1.2725410461425781
    3. '
' → logprob: -2.022541046142578
    4. ',B' → logprob: -3.022541046142578
    5. 'B' → logprob: -3.647541046142578
    6. '<|end|>' → logprob: -4.022541046142578
    7. ',
' → logprob: -4.522541046142578
    8. ' B' → logprob: -4.772541046142578
    9. ' ' → logprob: -5.397541046142578
    10. 'return' → logprob: -5.647541046142578

Token 51: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' (adapté à ' B') → logprob: -0.0633871853351593
    2. ' B' → logprob: -2.813387155532837
    3. 'N' → logprob: -7.688387393951416
    4. '   ' → logprob: -7.688387393951416
    5. ' ' → logprob: -8.563386917114258
    6. ',' → logprob: -9.688386917114258
    7. 'b' → logprob: -10.188386917114258
    8. 'return' → logprob: -10.563386917114258
    9. 'n' → logprob: -10.688386917114258
    10. ' N' → logprob: -10.813386917114258

Token 52: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.038498587906360626
    2. '=' → logprob: -3.288498640060425
    3. ',' → logprob: -7.788498401641846
    4. ' ' → logprob: -10.163498878479004
    5. ' ,' → logprob: -13.163498878479004
    6. '   ' → logprob: -13.913498878479004
    7. '  ' → logprob: -15.163498878479004
    8. '=int' → logprob: -15.413498878479004
    9. ')' → logprob: -15.663498878479004
    10. ' =
' → logprob: -15.663498878479004

Token 53: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.026303434744477272
    2. 'int' → logprob: -3.65130352973938
    3. '=int' → logprob: -14.0263032913208
    4. ' ' → logprob: -14.1513032913208
    5. ' ' → logprob: -14.9013032913208
    6. '(int' → logprob: -15.0263032913208
    7. ':int' → logprob: -15.1513032913208
    8. '<int' → logprob: -15.4013032913208
    9. '[int' → logprob: -15.4013032913208
    10. ',int' → logprob: -15.9013032913208

Token 54: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -3.190178904333152e-05
    2. 'list' → logprob: -10.375031471252441
    3. 'List' → logprob: -15.000031471252441
    4. 'int' → logprob: -16.125032424926758
    5. '_' → logprob: -16.625032424926758
    6. 'ist' → logprob: -16.875032424926758
    7. 't' → logprob: -17.375032424926758
    8. '_LIST' → logprob: -17.500032424926758
    9. '_List' → logprob: -18.750032424926758
    10. 'lst' → logprob: -19.000032424926758

Token 55: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -5.8126592193730175e-05
    2. '1' → logprob: -9.8750581741333
    3. ' [' → logprob: -12.3750581741333
    4. '```' → logprob: -14.0000581741333
    5. '\[' → logprob: -14.5000581741333
    6. '[
' → logprob: -15.1250581741333
    7. ' ' → logprob: -15.6250581741333
    8. '   ' → logprob: -15.7500581741333
    9. '`' → logprob: -16.250057220458984
    10. '2' → logprob: -17.125057220458984

Token 56: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -4.246537173457909e-06
    2. ']' → logprob: -13.250003814697266
    3. '])' → logprob: -13.750003814697266
    4. '2' → logprob: -14.250003814697266
    5. '0' → logprob: -14.375003814697266
    6. ' ' → logprob: -16.000003814697266
    7. '-' → logprob: -16.500003814697266
    8. ')' → logprob: -17.125003814697266
    9. '```' → logprob: -18.125003814697266
    10. '   ' → logprob: -18.500003814697266

Token 57: ']
' (ID: 1592)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08914154022932053
    2. ']' → logprob: -2.464141607284546
    3. ')
' → logprob: -9.589141845703125
    4. '])' → logprob: -10.089141845703125
    5. ')]' → logprob: -10.964141845703125
    6. '<|end|>' → logprob: -11.339141845703125
    7. '}' → logprob: -11.464141845703125
    8. ' ]' → logprob: -11.714141845703125
    9. '   ' → logprob: -11.839141845703125
    10. '）' → logprob: -11.964141845703125

Token 58: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.024250246584415436
    2. '
' → logprob: -4.024250030517578
    3. 'return' → logprob: -5.274250030517578
    4. ' return' → logprob: -7.774250030517578
    5. '    
' → logprob: -8.524250030517578
    6. '	return' → logprob: -9.399250030517578
    7. '<|end|>' → logprob: -9.774250030517578
    8. '  
' → logprob: -9.899250030517578
    9. 'def' → logprob: -10.524250030517578
    10. '```' → logprob: -10.899250030517578

Token 59: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004907108377665281
    2. 'return' (adapté à ' return') → logprob: -5.504907131195068
    3. '
' → logprob: -7.254907131195068
    4. ' return' → logprob: -10.00490665435791
    5. '    
' → logprob: -10.25490665435791
    6. '	return' → logprob: -10.87990665435791
    7. '```' → logprob: -12.12990665435791
    8. 'def' → logprob: -12.62990665435791
    9. 'A' → logprob: -13.25490665435791
    10. '\n' → logprob: -13.62990665435791

Token 60: ' A' (ID: 355)
  Prédit: ' A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.11438500881195068
    2. 'A' → logprob: -2.2393851280212402
    3. ' (' → logprob: -6.98938512802124
    4. '(A' → logprob: -7.98938512802124
    5. ' ' → logprob: -8.489384651184082
    6. '(' → logprob: -9.614384651184082
    7. '   ' → logprob: -11.114384651184082
    8. ' ' → logprob: -11.989384651184082
    9. '  ' → logprob: -12.614384651184082
    10. '	A' → logprob: -13.114384651184082

Token 61: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.008690099231898785
    2. ' ,' → logprob: -4.883689880371094
    3. ',B' → logprob: -7.133689880371094
    4. 'B' → logprob: -8.258689880371094
    5. ',
' → logprob: -11.133689880371094
    6. ' B' → logprob: -11.633689880371094
    7. ',b' → logprob: -14.008689880371094
    8. 'A' → logprob: -14.758689880371094
    9. ' ,
' → logprob: -14.758689880371094
    10. '   ' → logprob: -15.008689880371094

Token 62: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.001592822722159326
    2. 'B' → logprob: -6.626592636108398
    3. ' ' → logprob: -8.376592636108398
    4. ' ' → logprob: -10.251592636108398
    5. '`' → logprob: -15.376592636108398
    6. ' `' → logprob: -15.501592636108398
    7. 'space' → logprob: -15.501592636108398
    8. ' space' → logprob: -15.751592636108398
    9. ''' → logprob: -16.2515926361084
    10. ' 
' → logprob: -16.3765926361084

Token 63: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.026037955656647682
    2. '
' → logprob: -4.27603816986084
    3. '

' → logprob: -4.52603816986084
    4. '```' → logprob: -7.90103816986084
    5. '<|end|>' → logprob: -7.90103816986084
    6. '\' → logprob: -9.02603816986084
    7. '<|end|>' → logprob: -10.77603816986084
    8. '#' → logprob: -10.90103816986084
    9. ' def' → logprob: -11.02603816986084
    10. '\n' → logprob: -11.15103816986084

Token 64: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00032473751343786716
    2. '#' → logprob: -9.375325202941895
    3. 'A' → logprob: -9.625325202941895
    4. '
' → logprob: -9.750325202941895
    5. '```' → logprob: -9.750325202941895
    6. '<|end|>' → logprob: -11.000325202941895
    7. '\' → logprob: -11.750325202941895
    8. '

' → logprob: -12.375325202941895
    9. 'print' → logprob: -12.500325202941895
    10. 'n' → logprob: -12.625325202941895

Token 65: ' calculate' (ID: 17950)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.1469406932592392
    2. ' calculate' → logprob: -2.3969407081604004
    3. ' add' → logprob: -4.0219407081604
    4. ' solve' → logprob: -4.3969407081604
    5. ' compute' → logprob: -5.0219407081604
    6. ' multiply' → logprob: -5.6469407081604
    7. ' sum' → logprob: -6.3969407081604
    8. ' gcd' → logprob: -7.1469407081604
    9. 'calculate' → logprob: -7.1469407081604
    10. 'main' → logprob: -7.3969407081604

Token 66: '_value' (ID: 6734)
  Prédit: '_sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.1932923048734665
    2. '_' → logprob: -2.0682923793792725
    3. '(' → logprob: -3.9432923793792725
    4. '_difference' → logprob: -4.193292140960693
    5. '_product' → logprob: -6.068292140960693
    6. '_diff' → logprob: -6.193292140960693
    7. '_max' → logprob: -6.443292140960693
    8. '_space' → logprob: -6.568292140960693
    9. '_area' → logprob: -6.568292140960693
    10. '_total' → logprob: -6.693292140960693

Token 67: '(A' (ID: 10706)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6951263546943665
    2. '(A' → logprob: -0.6951263546943665
    3. '():' → logprob: -6.445126533508301
    4. '(a' → logprob: -8.8201265335083
    5. '(s' → logprob: -9.4451265335083
    6. ' (' → logprob: -10.3201265335083
    7. '((' → logprob: -10.4451265335083
    8. '(B' → logprob: -11.0701265335083
    9. 's' → logprob: -11.3201265335083
    10. '_' → logprob: -11.4451265335083

Token 68: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0003912311512976885
    2. ',B' → logprob: -8.250391006469727
    3. ' ,' → logprob: -9.000391006469727
    4. ',b' → logprob: -13.250391006469727
    5. '):' → logprob: -13.500391006469727
    6. ',
' → logprob: -13.750391006469727
    7. '+' → logprob: -14.625391006469727
    8. '+,' → logprob: -14.625391006469727
    9. '-' → logprob: -14.875391006469727
    10. ')' → logprob: -15.500391006469727

Token 69: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.25194910168647766
    2. 'B' → logprob: -1.5019490718841553
    3. ' ' → logprob: -11.376949310302734
    4. ' ' → logprob: -12.751949310302734
    5. '    ' → logprob: -12.876949310302734
    6. '   ' → logprob: -14.126949310302734
    7. 'b' → logprob: -14.251949310302734
    8. ')' → logprob: -15.001949310302734
    9. '  ' → logprob: -15.564449310302734
    10. '```' → logprob: -15.751949310302734

Token 70: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00019865304057020694
    2. '):
' → logprob: -9.625198364257812
    3. ',' → logprob: -9.750198364257812
    4. ':' → logprob: -10.250198364257812
    5. ')' → logprob: -10.500198364257812
    6. '   ' → logprob: -12.000198364257812
    7. ' ):' → logprob: -13.125198364257812
    8. '=' → logprob: -13.875198364257812
    9. '*' → logprob: -14.375198364257812
    10. '**' → logprob: -14.500198364257812

Token 71: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.013182940892875195
    2. ' return' → logprob: -4.638183116912842
    3. ' A' → logprob: -6.513183116912842
    4. 'return' → logprob: -6.888183116912842
    5. 'A' → logprob: -7.388183116912842
    6. '    ' → logprob: -8.388182640075684
    7. '   ' → logprob: -11.513182640075684
    8. '  ' → logprob: -11.888182640075684
    9. ' ' → logprob: -12.013182640075684
    10. '    
' → logprob: -12.138182640075684

Token 72: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.2891486883163452
    2. 'A' → logprob: -2.4141488075256348
    3. ' return' → logprob: -3.1641488075256348
    4. 'max' → logprob: -3.4141488075256348
    5. 'if' → logprob: -3.9141488075256348
    6. 'abs' → logprob: -4.664148807525635
    7. 'result' → logprob: -5.164148807525635
    8. 'C' → logprob: -5.289148807525635
    9. 'min' → logprob: -5.289148807525635
    10. 'B' → logprob: -5.414148807525635

Token 73: ' A' (ID: 355)
  Prédit: ' A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.7864212989807129
    2. 'A' → logprob: -1.161421298980713
    3. ' (' → logprob: -2.161421298980713
    4. '(A' → logprob: -3.161421298980713
    5. '(' → logprob: -4.161421298980713
    6. ' max' → logprob: -4.661421298980713
    7. ' ' → logprob: -4.786421298980713
    8. 'max' → logprob: -4.911421298980713
    9. '2' → logprob: -5.536421298980713
    10. '((' → logprob: -5.786421298980713

Token 74: ' -' (ID: 533)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.33164742588996887
    2. ' +' → logprob: -1.7066473960876465
    3. '*' → logprob: -3.3316473960876465
    4. '+B' → logprob: -3.4566473960876465
    5. '-' → logprob: -4.3316473960876465
    6. ' *' → logprob: -4.9566473960876465
    7. ' -' → logprob: -5.0816473960876465
    8. '%' → logprob: -5.7066473960876465
    9. ' %' → logprob: -6.9566473960876465
    10. '**' → logprob: -7.2066473960876465

Token 75: ' ' (ID: 220)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.004166014492511749
    2. '1' → logprob: -6.129166126251221
    3. ' B' → logprob: -7.129166126251221
    4. '(B' → logprob: -7.629166126251221
    5. '(' → logprob: -8.004165649414062
    6. '2' → logprob: -9.504165649414062
    7. ' ' → logprob: -10.129165649414062
    8. ' (' → logprob: -10.254165649414062
    9. '10' → logprob: -10.629165649414062
    10. 'int' → logprob: -10.879165649414062

Token 76: '2' (ID: 17)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.0040830280631780624
    2. '1' → logprob: -6.004083156585693
    3. '(B' → logprob: -7.129083156585693
    4. '(' → logprob: -8.129082679748535
    5. '2' → logprob: -8.754082679748535
    6. ' B' → logprob: -9.379082679748535
    7. '((' → logprob: -10.004082679748535
    8. 'int' → logprob: -10.504082679748535
    9. '3' → logprob: -10.879082679748535
    10. 'A' → logprob: -11.004082679748535

Token 77: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.03843905031681061
    2. ' *' → logprob: -3.2884390354156494
    3. ' ' → logprob: -9.16343879699707
    4. '```' → logprob: -9.41343879699707
    5. '**' → logprob: -9.53843879699707
    6. 'B' → logprob: -9.78843879699707
    7. '0' → logprob: -10.91343879699707
    8. '`' → logprob: -11.03843879699707
    9. '*b' → logprob: -12.16343879699707
    10. '*A' → logprob: -12.16343879699707

Token 78: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.0031784253660589457
    2. ' B' → logprob: -5.753178596496582
    3. ' ' → logprob: -14.753178596496582
    4. '	B' → logprob: -15.253178596496582
    5. '   ' → logprob: -17.253177642822266
    6. '  ' → logprob: -17.378177642822266
    7. ' ' → logprob: -17.753177642822266
    8. '>B' → logprob: -18.753177642822266
    9. '(B' → logprob: -18.815677642822266
    10. '(' → logprob: -18.940677642822266

Token 79: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.09597859531641006
    2. '<|end|>' → logprob: -3.3459784984588623
    3. 'def' → logprob: -3.9709784984588623
    4. '

' → logprob: -3.9709784984588623
    5. '\n' → logprob: -4.470978736877441
    6. '```' → logprob: -5.595978736877441
    7. '\' → logprob: -6.595978736877441
    8. '<|end|>' → logprob: -7.720978736877441
    9. '*' → logprob: -8.095978736877441
    10. 'newline' → logprob: -8.220978736877441

Token 80: 'def' (ID: 1314)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3797387182712555
    2. 'def' → logprob: -1.254738688468933
    3. '\n' → logprob: -4.629738807678223
    4. '

' → logprob: -4.879738807678223
    5. '```' → logprob: -5.254738807678223
    6. '#' → logprob: -5.879738807678223
    7. '<|end|>' → logprob: -6.254738807678223
    8. 'newline' → logprob: -6.879738807678223
    9. '\' → logprob: -7.254738807678223
    10. 'n' → logprob: -7.879738807678223

Token 81: ' apply' (ID: 6096)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.0002031827752944082
    2. ' calculate' → logprob: -9.000203132629395
    3. ' solve' → logprob: -9.750203132629395
    4. 'main' → logprob: -11.750203132629395
    5. ' process' → logprob: -12.000203132629395
    6. ' solution' → logprob: -13.250203132629395
    7. ' run' → logprob: -13.625203132629395
    8. ' compute' → logprob: -14.000203132629395
    9. ' write' → logprob: -14.500203132629395
    10. ' test' → logprob: -14.500203132629395

Token 82: '_max' (ID: 13731)
  Prédit: '_cal'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_cal' → logprob: -1.1546660661697388
    2. '_value' → logprob: -2.279665946960449
    3. '_condition' → logprob: -2.779665946960449
    4. '_check' → logprob: -2.904665946960449
    5. '_' → logprob: -3.029665946960449
    6. '_formula' → logprob: -3.029665946960449
    7. '_c' → logprob: -3.154665946960449
    8. '(' → logprob: -3.154665946960449
    9. '_constraint' → logprob: -3.404665946960449
    10. '_function' → logprob: -3.404665946960449

Token 83: '_constraint' (ID: 115252)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00992052722722292
    2. '```' → logprob: -5.384920597076416
    3. 'def' → logprob: -5.884920597076416
    4. '_' → logprob: -7.509920597076416
    5. ' (' → logprob: -7.634920597076416
    6. 'imum' → logprob: -8.384920120239258
    7. '`' → logprob: -9.009920120239258
    8. '((' → logprob: -9.259920120239258
    9. '0' → logprob: -9.384920120239258
    10. '(value' → logprob: -9.759920120239258

Token 84: '(val' (ID: 17391)
  Prédit: '(value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(value' → logprob: -0.08364144712686539
    2. '(' → logprob: -2.708641529083252
    3. '(x' → logprob: -5.208641529083252
    4. '(val' → logprob: -5.333641529083252
    5. '(result' → logprob: -6.458641529083252
    6. ' (' → logprob: -7.083641529083252
    7. '(a' → logprob: -8.208641052246094
    8. '(v' → logprob: -8.833641052246094
    9. '(max' → logprob: -8.958641052246094
    10. '(n' → logprob: -9.208641052246094

Token 85: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.10145490616559982
    2. '):
' → logprob: -3.101454973220825
    3. 'ue' → logprob: -3.351454973220825
    4. ')' → logprob: -5.351454734802246
    5. ',' → logprob: -5.726454734802246
    6. ':' → logprob: -5.851454734802246
    7. 'imum' → logprob: -6.101454734802246
    8. '   ' → logprob: -7.101454734802246
    9. '(value' → logprob: -7.726454734802246
    10. '):

' → logprob: -7.726454734802246

Token 86: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.056515369564294815
    2. ' return' → logprob: -2.9315154552459717
    3. 'return' → logprob: -6.556515216827393
    4. ' max' → logprob: -9.68151569366455
    5. 'max' → logprob: -9.93151569366455
    6. '(max' → logprob: -10.18151569366455
    7. '(' → logprob: -11.05651569366455
    8. 'def' → logprob: -11.68151569366455
    9. '	return' → logprob: -11.80651569366455
    10. '```' → logprob: -11.93151569366455

Token 87: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.798888087272644
    2. ' return' → logprob: -1.173888087272644
    3. 'return' (adapté à ' return') → logprob: -1.423888087272644
    4. 'def' → logprob: -9.173888206481934
    5. '0' → logprob: -10.298888206481934
    6. '	return' → logprob: -10.673888206481934
    7. '    ' → logprob: -11.173888206481934
    8. 'max' → logprob: -11.173888206481934
    9. ' ' → logprob: -12.048888206481934
    10. '
' → logprob: -12.173888206481934

Token 88: ' max' (ID: 2999)
  Prédit: ' max'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' max' → logprob: -0.012515183538198471
    2. 'max' → logprob: -4.387515068054199
    3. '(max' → logprob: -13.0125150680542
    4. '0' → logprob: -13.6375150680542
    5. ' val' → logprob: -14.1375150680542
    6. '	max' → logprob: -14.7625150680542
    7. ' ' → logprob: -15.1375150680542
    8. '   ' → logprob: -15.2625150680542
    9. ' maximum' → logprob: -15.2625150680542
    10. 'val' → logprob: -16.512516021728516

Token 89: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.018150994554162025
    2. '(val' → logprob: -4.018150806427002
    3. ' (' → logprob: -14.64315128326416
    4. 'val' → logprob: -14.76815128326416
    5. '((' → logprob: -16.268150329589844
    6. ' val' → logprob: -17.018150329589844
    7. ',val' → logprob: -17.143150329589844
    8. '0' → logprob: -17.393150329589844
    9. '(-' → logprob: -17.518150329589844
    10. '```' → logprob: -17.518150329589844

Token 90: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.38451123237609863
    2. 'val' → logprob: -1.3845112323760986
    3. '(' → logprob: -3.0095112323760986
    4. '(val' → logprob: -4.0095109939575195
    5. ' val' → logprob: -7.5095109939575195
    6. '[val' → logprob: -8.13451099395752
    7. '[' → logprob: -9.00951099395752
    8. ' ' → logprob: -9.25951099395752
    9. ',val' → logprob: -9.50951099395752
    10. ')' → logprob: -9.75951099395752

Token 91: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0015043864259496331
    2. ',val' → logprob: -6.501504421234131
    3. ' ,' → logprob: -13.126503944396973
    4. 'val' → logprob: -16.62650489807129
    5. ',v' → logprob: -18.00150489807129
    6. ',value' → logprob: -18.00150489807129
    7. ')' → logprob: -18.12650489807129
    8. ',)' → logprob: -18.37650489807129
    9. '```' → logprob: -18.75150489807129
    10. '	val' → logprob: -18.87650489807129

Token 92: ' val' (ID: 1459)
  Prédit: ' val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' val' → logprob: -0.3868713676929474
    2. 'val' → logprob: -1.136871337890625
    3. '	val' → logprob: -15.261871337890625
    4. '(val' → logprob: -17.011871337890625
    5. ' ' → logprob: -17.886871337890625
    6. '[val' → logprob: -18.136871337890625
    7. '_val' → logprob: -18.261871337890625
    8. ',val' → logprob: -18.386871337890625
    9. '```' → logprob: -18.761871337890625
    10. '.val' → logprob: -19.136871337890625

Token 93: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1472419600977446e-06
    2. ')
' → logprob: -14.000000953674316
    3. ' )' → logprob: -15.625000953674316
    4. '}' → logprob: -16.875001907348633
    5. '))' → logprob: -17.125001907348633
    6. ')}' → logprob: -17.625001907348633
    7. ')

' → logprob: -17.750001907348633
    8. ')`' → logprob: -18.750001907348633
    9. ')return' → logprob: -19.000001907348633
    10. '<|end|>' → logprob: -19.250001907348633

Token 94: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0008157044649124146
    2. '```' → logprob: -7.8758158683776855
    3. '
' → logprob: -8.625815391540527
    4. 'print' → logprob: -9.375815391540527
    5. 'if' → logprob: -10.125815391540527
    6. '

' → logprob: -10.250815391540527
    7. '<|end|>' → logprob: -10.250815391540527
    8. '\' → logprob: -11.000815391540527
    9. '``' → logprob: -11.625815391540527
    10. '<|end|>' → logprob: -11.875815391540527

Token 95: ' print' (ID: 2123)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.002057119505479932
    2. ' process' → logprob: -6.877057075500488
    3. 'main' → logprob: -7.502057075500488
    4. ' calculate' → logprob: -8.252057075500488
    5. ' compute' → logprob: -9.252057075500488
    6. ' solve' → logprob: -10.127057075500488
    7. ' def' → logprob: -10.627057075500488
    8. ' run' → logprob: -11.002057075500488
    9. 'process' → logprob: -11.877057075500488
    10. ' combine' → logprob: -12.502057075500488

Token 96: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -0.2019582837820053
    2. '(' → logprob: -1.9519582986831665
    3. '_' → logprob: -3.951958179473877
    4. '_output' → logprob: -4.326958179473877
    5. '(result' → logprob: -6.076958179473877
    6. 'result' → logprob: -6.451958179473877
    7. '_results' → logprob: -6.951958179473877
    8. '()' → logprob: -6.951958179473877
    9. '_value' → logprob: -7.201958179473877
    10. '(output' → logprob: -7.576958179473877

Token 97: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.07087593525648117
    2. '(' → logprob: -2.695875883102417
    3. '(value' → logprob: -7.820876121520996
    4. '()' → logprob: -8.695876121520996
    5. '(output' → logprob: -8.695876121520996
    6. '(print' → logprob: -10.070876121520996
    7. '(val' → logprob: -10.570876121520996
    8. ' (' → logprob: -10.570876121520996
    9. '(resultado' → logprob: -10.570876121520996
    10. '(final' → logprob: -10.945876121520996

Token 98: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.004658911377191544
    2. '):
' → logprob: -6.0046586990356445
    3. ')' → logprob: -6.1296586990356445
    4. '   ' → logprob: -13.754658699035645
    5. '):
' → logprob: -14.004658699035645
    6. ' ):' → logprob: -14.379658699035645
    7. ':' → logprob: -15.004658699035645
    8. '):

' → logprob: -15.879658699035645
    9. '(result' → logprob: -16.00465965270996
    10. ')
' → logprob: -16.00465965270996

Token 99: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0004961982485838234
    2. ' print' → logprob: -7.6254963874816895
    3. 'print' → logprob: -11.750495910644531
    4. '```' → logprob: -15.125495910644531
    5. '   ' → logprob: -16.75049591064453
    6. '    ' → logprob: -17.12549591064453
    7. '       ' → logprob: -18.50049591064453
    8. '  ' → logprob: -19.37549591064453
    9. '   ' → logprob: -19.37549591064453
    10. 'def' → logprob: -19.87549591064453

Token 100: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.01827261783182621
    2. ' print' → logprob: -4.018272399902344
    3. '   ' → logprob: -9.018272399902344
    4. '```' → logprob: -13.518272399902344
    5. 'def' → logprob: -16.018272399902344
    6. '`' → logprob: -18.143272399902344
    7. '	print' → logprob: -18.393272399902344
    8. '    ' → logprob: -19.018272399902344
    9. ' ' → logprob: -19.143272399902344
    10. '``' → logprob: -19.143272399902344

Token 101: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.003197677666321397
    2. '(' → logprob: -5.75319766998291
    3. 'result' → logprob: -10.87819766998291
    4. ' (' → logprob: -14.37819766998291
    5. '_result' → logprob: -15.62819766998291
    6. '()' → logprob: -15.87819766998291
    7. '(results' → logprob: -16.628198623657227
    8. ',result' → logprob: -16.753198623657227
    9. '=result' → logprob: -17.003198623657227
    10. '(
' → logprob: -17.503198623657227

Token 102: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0280383548888494e-06
    2. ')
' → logprob: -13.875000953674316
    3. ' )' → logprob: -17.125001907348633
    4. ')

' → logprob: -18.875001907348633
    5. ')`' → logprob: -19.125001907348633
    6. '))' → logprob: -19.500001907348633
    7. ')}' → logprob: -20.500001907348633
    8. '')' → logprob: -20.750001907348633
    9. '),' → logprob: -20.750001907348633
    10. '   ' → logprob: -20.875001907348633

Token 103: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -8.387458365177736e-05
    2. 'if' → logprob: -10.125083923339844
    3. '
' → logprob: -10.875083923339844
    4. '```' → logprob: -11.250083923339844
    5. '

' → logprob: -12.000083923339844
    6. 'input' → logprob: -13.125083923339844
    7. '    
' → logprob: -13.750083923339844
    8. 'ndef' → logprob: -14.250083923339844
    9. '\' → logprob: -15.000083923339844
    10. ' def' → logprob: -15.125083923339844

Token 104: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.4740940034389496
    2. 'main' → logprob: -0.974094033241272
    3. 'process' → logprob: -11.59909439086914
    4. ' process' → logprob: -12.59909439086914
    5. 'run' → logprob: -13.97409439086914
    6. ' run' → logprob: -14.09909439086914
    7. 'solve' → logprob: -14.09909439086914
    8. ' solve' → logprob: -14.34909439086914
    9. 'calculate' → logprob: -14.84909439086914
    10. 'def' → logprob: -14.97409439086914

Token 105: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -1.6286106983898208e-05
    2. ' ():' → logprob: -11.875016212463379
    3. '():
' → logprob: -12.625016212463379
    4. '()' → logprob: -12.875016212463379
    5. '(' → logprob: -13.250016212463379
    6. '_' → logprob: -13.375016212463379
    7. ':' → logprob: -17.500017166137695
    8. '():
' → logprob: -17.625017166137695
    9. '(:' → logprob: -17.625017166137695
    10. '()>' → logprob: -17.750017166137695

Token 106: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05029923468828201
    2. ' input' → logprob: -3.1752991676330566
    3. 'input' → logprob: -4.925299167633057
    4. ' user' → logprob: -12.300299644470215
    5. '   ' → logprob: -12.300299644470215
    6. '	input' → logprob: -13.550299644470215
    7. 'user' → logprob: -14.800299644470215
    8. ' raw' → logprob: -14.925299644470215
    9. '_input' → logprob: -14.925299644470215
    10. '    
' → logprob: -15.175299644470215

Token 107: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' (adapté à ' input') → logprob: -0.18812322616577148
    2. ' input' → logprob: -1.8131232261657715
    3. '   ' → logprob: -5.3131232261657715
    4. ' user' → logprob: -6.4381232261657715
    5. 'user' → logprob: -6.8131232261657715
    6. ' raw' → logprob: -7.8131232261657715
    7. 'inp' → logprob: -9.18812370300293
    8. 'raw' → logprob: -9.31312370300293
    9. ' inp' → logprob: -9.93812370300293
    10. 'inputs' → logprob: -10.93812370300293

Token 108: '_str' (ID: 6182)
  Prédit: '_str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_str' → logprob: -0.002518703928217292
    2. '_' → logprob: -6.002518653869629
    3. '_line' → logprob: -10.877518653869629
    4. '_string' → logprob: -11.502518653869629
    5. '_val' → logprob: -11.627518653869629
    6. '_s' → logprob: -13.002518653869629
    7. '_value' → logprob: -13.752518653869629
    8. '_data' → logprob: -14.502518653869629
    9. '_input' → logprob: -14.877518653869629
    10. '_text' → logprob: -14.877518653869629

Token 109: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.014164329506456852
    2. '=' → logprob: -4.264164447784424
    3. '   ' → logprob: -15.139163970947266
    4. '_' → logprob: -16.264163970947266
    5. '()' → logprob: -16.264163970947266
    6. '=input' → logprob: -16.264163970947266
    7. ')' → logprob: -16.889163970947266
    8. ' ' → logprob: -16.889163970947266
    9. ' =
' → logprob: -17.014163970947266
    10. ' =)' → logprob: -17.139163970947266

Token 110: ' read' (ID: 1729)
  Prédit: ' read'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.313262403011322
    2. 'read' → logprob: -1.3132624626159668
    3. ' input' → logprob: -14.813261985778809
    4. 'input' → logprob: -15.563261985778809
    5. '	read' → logprob: -15.938261985778809
    6. '(read' → logprob: -17.563262939453125
    7. ' ' → logprob: -18.188262939453125
    8. ' readline' → logprob: -19.938262939453125
    9. '   ' → logprob: -20.188262939453125
    10. '  ' → logprob: -20.563262939453125

Token 111: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -5.204720582696609e-05
    2. '_' → logprob: -9.875052452087402
    3. '_output' → logprob: -15.750052452087402
    4. '_line' → logprob: -16.000051498413086
    5. ' _' → logprob: -16.250051498413086
    6. '_in' → logprob: -16.750051498413086
    7. '_Input' → logprob: -17.125051498413086
    8. '```' → logprob: -17.250051498413086
    9. 'input' → logprob: -17.875051498413086
    10. '_user' → logprob: -18.000051498413086

Token 112: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -1.5213274309644476e-05
    2. '()
' → logprob: -11.125015258789062
    3. '()

' → logprob: -15.500015258789062
    4. '()`' → logprob: -16.000015258789062
    5. '()\' → logprob: -17.500015258789062
    6. '()"' → logprob: -18.000015258789062
    7. '()
' → logprob: -18.000015258789062
    8. ' ()' → logprob: -18.125015258789062
    9. '()]' → logprob: -18.500015258789062
    10. '()<' → logprob: -18.625015258789062

Token 113: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0005942588322795928
    2. 'tokens' → logprob: -8.125594139099121
    3. ' tokens' → logprob: -9.375594139099121
    4. '    
' → logprob: -9.750594139099121
    5. 'input' → logprob: -10.375594139099121
    6. '
' → logprob: -10.500594139099121
    7. ' splitted' → logprob: -10.625594139099121
    8. ' parts' → logprob: -10.875594139099121
    9. 'split' → logprob: -11.750594139099121
    10. ' input' → logprob: -12.125594139099121

Token 114: ' str' (ID: 989)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.1679190397262573
    2. ' tokens' → logprob: -1.2929190397262573
    3. ' str' → logprob: -1.5429190397262573
    4. ' parts' → logprob: -2.667919158935547
    5. ' split' → logprob: -3.167919158935547
    6. ' splitted' → logprob: -3.292919158935547
    7. 'tokens' → logprob: -3.542919158935547
    8. 'split' → logprob: -4.542919158935547
    9. 'str' (adapté à ' str') → logprob: -5.542919158935547
    10. ' strs' → logprob: -5.917919158935547

Token 115: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -0.00021188464597798884
    2. '_lst' → logprob: -9.125211715698242
    3. 's' → logprob: -9.875211715698242
    4. '_lists' → logprob: -10.750211715698242
    5. '_' → logprob: -10.875211715698242
    6. '_parts' → logprob: -12.125211715698242
    7. '_l' → logprob: -13.500211715698242
    8. '_li' → logprob: -13.875211715698242
    9. '_split' → logprob: -14.750211715698242
    10. '_input' → logprob: -14.750211715698242

Token 116: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.16022412478923798
    2. '=' → logprob: -1.9102240800857544
    3. '=input' → logprob: -18.03522491455078
    4. '＝' → logprob: -18.91022491455078
    5. ')' → logprob: -19.03522491455078
    6. ',' → logprob: -19.66022491455078
    7. ' =
' → logprob: -19.78522491455078
    8. '=

' → logprob: -19.78522491455078
    9. ' =)' → logprob: -19.91022491455078
    10. ' ' → logprob: -20.03522491455078

Token 117: ' split' (ID: 12648)
  Prédit: 'split'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.5759400725364685
    2. ' split' → logprob: -0.8259400725364685
    3. '(split' → logprob: -14.700940132141113
    4. '   ' → logprob: -16.075939178466797
    5. ' ' → logprob: -17.075939178466797
    6. '.split' → logprob: -17.200939178466797
    7. '    ' → logprob: -17.950939178466797
    8. 'spl' → logprob: -18.200939178466797
    9. 'plit' → logprob: -18.450939178466797
    10. '  ' → logprob: -19.075939178466797

Token 118: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -6.153795766294934e-06
    2. '_' → logprob: -12.625005722045898
    3. '(input' → logprob: -13.000005722045898
    4. '_output' → logprob: -15.875005722045898
    5. '```' → logprob: -16.1250057220459
    6. 'input' → logprob: -16.7500057220459
    7. '_inputs' → logprob: -17.2500057220459
    8. '_str' → logprob: -17.3750057220459
    9. '(' → logprob: -17.5000057220459
    10. ' _' → logprob: -17.6250057220459

Token 119: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -1.0325924449716695e-05
    2. '(' → logprob: -11.50001049041748
    3. ' (' → logprob: -16.500009536743164
    4. ',input' → logprob: -17.375009536743164
    5. '=input' → logprob: -17.500009536743164
    6. 'input' → logprob: -18.625009536743164
    7. '```' → logprob: -18.625009536743164
    8. '(inp' → logprob: -18.750009536743164
    9. '(
' → logprob: -19.125009536743164
    10. '_input' → logprob: -19.375009536743164

Token 120: '_str' (ID: 6182)
  Prédit: '_str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_str' → logprob: -1.0206720617134124e-05
    2. 'str' → logprob: -11.62501049041748
    3. ')' → logprob: -14.25001049041748
    4. '_' → logprob: -14.75001049041748
    5. '```' → logprob: -17.000009536743164
    6. '_string' → logprob: -17.250009536743164
    7. ')_' → logprob: -17.375009536743164
    8. '_STR' → logprob: -17.875009536743164
    9. '(str' → logprob: -18.000009536743164
    10. 'Str' → logprob: -18.500009536743164

Token 121: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002086496911942959
    2. '()' → logprob: -6.877086639404297
    3. ')
' → logprob: -7.127086639404297
    4. '   ' → logprob: -8.377086639404297
    5. '()
' → logprob: -11.377086639404297
    6. '())' → logprob: -12.127086639404297
    7. ' ' → logprob: -13.502086639404297
    8. ' )' → logprob: -14.002086639404297
    9. '```' → logprob: -15.877086639404297
    10. '))' → logprob: -16.252086639404297

Token 122: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008517766371369362
    2. 'int' → logprob: -5.008517742156982
    3. '    
' → logprob: -6.758517742156982
    4. '
' → logprob: -7.758517742156982
    5. ' int' → logprob: -9.88351821899414
    6. '  ' → logprob: -10.25851821899414
    7. '    ' → logprob: -10.25851821899414
    8. ' ' → logprob: -10.75851821899414
    9. '	int' → logprob: -11.50851821899414
    10. '```' → logprob: -11.50851821899414

Token 123: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' (adapté à ' int') → logprob: -0.07015572488307953
    2. ' int' → logprob: -2.695155620574951
    3. '   ' → logprob: -8.57015609741211
    4. '<int' → logprob: -11.69515609741211
    5. ' ' → logprob: -12.44515609741211
    6. '[int' → logprob: -12.44515609741211
    7. '	int' → logprob: -12.82015609741211
    8. '_int' → logprob: -13.07015609741211
    9. 'ints' → logprob: -13.32015609741211
    10. '    ' → logprob: -13.57015609741211

Token 124: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -5.080963092041202e-06
    2. '_lst' → logprob: -13.375004768371582
    3. 's' → logprob: -14.000004768371582
    4. '_lists' → logprob: -14.000004768371582
    5. '_' → logprob: -14.375004768371582
    6. ' _' → logprob: -15.250004768371582
    7. '_li' → logprob: -16.0000057220459
    8. '_str' → logprob: -16.0000057220459
    9. '_s' → logprob: -16.1250057220459
    10. '_line' → logprob: -16.2500057220459

Token 125: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0011703446507453918
    2. '=' → logprob: -6.7511701583862305
    3. ')' → logprob: -16.376171112060547
    4. ' ' → logprob: -16.751171112060547
    5. ' =)' → logprob: -17.876171112060547
    6. ' =
' → logprob: -18.126171112060547
    7. '   ' → logprob: -18.751171112060547
    8. '    ' → logprob: -19.751171112060547
    9. ' )' → logprob: -19.876171112060547
    10. ',' → logprob: -20.126171112060547

Token 126: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.01814994215965271
    2. 'map' → logprob: -4.0181498527526855
    3. '(map' → logprob: -18.018150329589844
    4. '	map' → logprob: -18.018150329589844
    5. '_map' → logprob: -18.768150329589844
    6. ' ' → logprob: -19.018150329589844
    7. '.map' → logprob: -19.268150329589844
    8. '   ' → logprob: -20.018150329589844
    9. ',map' → logprob: -20.393150329589844
    10. '
' → logprob: -21.143150329589844

Token 127: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: -3.531315314830863e-06
    2. '_' → logprob: -12.750003814697266
    3. ' _' → logprob: -14.875003814697266
    4. '_t' → logprob: -15.750003814697266
    5. 'to' → logprob: -17.125003814697266
    6. '```' → logprob: -18.125003814697266
    7. '_TO' → logprob: -18.250003814697266
    8. 'To' → logprob: -18.375003814697266
    9. 't' → logprob: -18.500003814697266
    10. '_
' → logprob: -18.750003814697266

Token 128: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.008615515194833279
    2. 'int' → logprob: -4.758615493774414
    3. '<int' → logprob: -14.008615493774414
    4. ' int' → logprob: -16.383615493774414
    5. 'Int' → logprob: -17.133615493774414
    6. '[int' → logprob: -17.258615493774414
    7. '_list' → logprob: -17.508615493774414
    8. '(int' → logprob: -17.633615493774414
    9. '_in' → logprob: -19.383615493774414
    10. ''int' → logprob: -19.508615493774414

Token 129: '(str' (ID: 7946)
  Prédit: '(str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(str' → logprob: -0.001943514565937221
    2. '(' → logprob: -6.251943588256836
    3. ' (' → logprob: -11.126943588256836
    4. '(
' → logprob: -16.751943588256836
    5. ' str' → logprob: -16.876943588256836
    6. '[str' → logprob: -17.626943588256836
    7. 'str' → logprob: -18.251943588256836
    8. '(s' → logprob: -18.751943588256836
    9. '	str' → logprob: -18.751943588256836
    10. '(int' → logprob: -18.876943588256836

Token 130: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -9.088346359931165e-07
    2. 'list' → logprob: -14.750000953674316
    3. 'List' → logprob: -15.750000953674316
    4. '_' → logprob: -15.875000953674316
    5. '_LIST' → logprob: -17.5
    6. '   ' → logprob: -17.875
    7. ')' → logprob: -18.125
    8. ')_' → logprob: -18.375
    9. '_lst' → logprob: -18.5
    10. '_lists' → logprob: -18.75

Token 131: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.023427622392773628
    2. ')
' → logprob: -3.773427724838257
    3. '   ' → logprob: -8.648427963256836
    4. ')
' → logprob: -12.898427963256836
    5. '()' → logprob: -13.023427963256836
    6. ' ' → logprob: -13.898427963256836
    7. ')

' → logprob: -15.273427963256836
    8. ' )' → logprob: -15.273427963256836
    9. '()
' → logprob: -16.023427963256836
    10. '),' → logprob: -16.648427963256836

Token 132: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.005832218565046787
    2. ' A' → logprob: -5.755832195281982
    3. 'A' → logprob: -6.005832195281982
    4. '    
' → logprob: -9.50583267211914
    5. '
' → logprob: -10.25583267211914
    6. ' ' → logprob: -10.63083267211914
    7. '  ' → logprob: -10.75583267211914
    8. '```' → logprob: -11.38083267211914
    9. '    ' → logprob: -12.25583267211914
    10. ',' → logprob: -13.00583267211914

Token 133: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' (adapté à ' A') → logprob: -0.16124244034290314
    2. ' A' → logprob: -1.9112424850463867
    3. '   ' → logprob: -6.911242485046387
    4. ' ' → logprob: -11.911242485046387
    5. 'a' → logprob: -13.036242485046387
    6. '(A' → logprob: -13.161242485046387
    7. '    
' → logprob: -13.286242485046387
    8. '```' → logprob: -13.411242485046387
    9. ' (' → logprob: -13.536242485046387
    10. '  ' → logprob: -13.536242485046387

Token 134: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -9.65101717156358e-05
    2. ' ,' → logprob: -9.375096321105957
    3. ',B' → logprob: -11.375096321105957
    4. ',
' → logprob: -17.000097274780273
    5. ',A' → logprob: -17.000097274780273
    6. '‌,' → logprob: -17.375097274780273
    7. '<|end|>' → logprob: -17.625097274780273
    8. '_,' → logprob: -17.875097274780273
    9. 'B' → logprob: -17.875097274780273
    10. ',b' → logprob: -18.250097274780273

Token 135: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.007089014630764723
    2. 'B' → logprob: -5.007089138031006
    3. ' ' → logprob: -8.382088661193848
    4. '<|end|>' → logprob: -9.007088661193848
    5. ' ' → logprob: -11.257088661193848
    6. ')' → logprob: -12.382088661193848
    7. '"' → logprob: -14.257088661193848
    8. '    ' → logprob: -14.382088661193848
    9. '<|end|>' → logprob: -14.757088661193848
    10. ' 
' → logprob: -15.007088661193848

Token 136: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0036004253197461367
    2. '=' → logprob: -5.628600597381592
    3. ',' → logprob: -15.628600120544434
    4. '<|end|>' → logprob: -16.25360107421875
    5. ' ' → logprob: -16.87860107421875
    6. ')' → logprob: -18.37860107421875
    7. '   ' → logprob: -18.62860107421875
    8. ' =
' → logprob: -18.75360107421875
    9. ' =)' → logprob: -19.00360107421875
    10. '  ' → logprob: -19.25360107421875

Token 137: ' unpack' (ID: 61704)
  Prédit: ' unpack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' unpack' → logprob: -0.0004223323194310069
    2. 'un' → logprob: -7.875422477722168
    3. '_unpack' → logprob: -10.250422477722168
    4. '.unpack' → logprob: -12.125422477722168
    5. ' un' → logprob: -14.250422477722168
    6. ' unwrap' → logprob: -15.000422477722168
    7. ' ' → logprob: -16.00042152404785
    8. '	un' → logprob: -16.00042152404785
    9. ' unfold' → logprob: -16.12542152404785
    10. ' unzip' → logprob: -16.25042152404785

Token 138: '_values' (ID: 20393)
  Prédit: '_values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_values' → logprob: -3.128163257315464e-07
    2. '_' → logprob: -16.0
    3. '_value' → logprob: -16.125
    4. 'values' → logprob: -17.125
    5. '_val' → logprob: -18.625
    6. '_VALUES' → logprob: -18.625
    7. '_vals' → logprob: -18.75
    8. '(values' → logprob: -19.0
    9. ' _' → logprob: -19.125
    10. '_list' → logprob: -20.875

Token 139: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -1.5570885807392187e-05
    2. 'int' → logprob: -11.250015258789062
    3. '(' → logprob: -13.500015258789062
    4. ' (' → logprob: -14.625015258789062
    5. ' int' → logprob: -15.250015258789062
    6. '<int' → logprob: -16.250015258789062
    7. 'values' → logprob: -16.250015258789062
    8. '[int' → logprob: -16.375015258789062
    9. '```' → logprob: -17.250015258789062
    10. '=int' → logprob: -17.375015258789062

Token 140: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -3.054500666621607e-06
    2. 'list' → logprob: -12.75000286102295
    3. 'List' → logprob: -15.87500286102295
    4. 'ist' → logprob: -17.875003814697266
    5. '_LIST' → logprob: -18.750003814697266
    6. '_' → logprob: -19.875003814697266
    7. '_lists' → logprob: -20.000003814697266
    8. '-list' → logprob: -20.250003814697266
    9. '```' → logprob: -20.625003814697266
    10. '[' → logprob: -20.625003814697266

Token 141: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.951771421066951e-05
    2. ')
' → logprob: -10.500029563903809
    3. '   ' → logprob: -13.250029563903809
    4. ' )' → logprob: -16.250028610229492
    5. ')

' → logprob: -17.625028610229492
    6. ' ' → logprob: -17.625028610229492
    7. '()' → logprob: -17.750028610229492
    8. '),' → logprob: -18.250028610229492
    9. ')
' → logprob: -18.375028610229492
    10. ')#' → logprob: -18.875028610229492

Token 142: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.019785063341259956
    2. 'result' → logprob: -4.269784927368164
    3. ' result' → logprob: -5.269784927368164
    4. '    
' → logprob: -8.519784927368164
    5. '
' → logprob: -8.769784927368164
    6. '```' → logprob: -10.394784927368164
    7. 'val' → logprob: -10.519784927368164
    8. 'value' → logprob: -11.019784927368164
    9. ' val' → logprob: -11.519784927368164
    10. '	result' → logprob: -12.519784927368164

Token 143: ' value' (ID: 1432)
  Prédit: ' result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' result' → logprob: -1.148651361465454
    2. 'result' → logprob: -1.148651361465454
    3. ' val' → logprob: -1.898651361465454
    4. 'val' → logprob: -2.648651361465454
    5. ' value' → logprob: -3.023651361465454
    6. '   ' → logprob: -3.023651361465454
    7. 'value' (adapté à ' value') → logprob: -3.148651361465454
    8. ' res' → logprob: -6.273651123046875
    9. 'res' → logprob: -6.523651123046875
    10. ' calculated' → logprob: -7.148651123046875

Token 144: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.023246407508850098
    2. '=' → logprob: -3.7732462882995605
    3. '   ' → logprob: -14.523246765136719
    4. '_' → logprob: -14.773246765136719
    5. ' ' → logprob: -17.14824676513672
    6. 's' → logprob: -18.14824676513672
    7. '_=' → logprob: -18.64824676513672
    8. '```' → logprob: -18.77324676513672
    9. '	' → logprob: -19.02324676513672
    10. ' ' → logprob: -19.02324676513672

Token 145: ' calculate' (ID: 17950)
  Prédit: 'calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'calculate' → logprob: -0.02975500375032425
    2. ' calculate' → logprob: -3.529755115509033
    3. '   ' → logprob: -12.404754638671875
    4. ' ' → logprob: -15.529754638671875
    5. '.calculate' → logprob: -15.904754638671875
    6. 'calc' → logprob: -17.529754638671875
    7. 'cal' → logprob: -17.529754638671875
    8. '  ' → logprob: -17.529754638671875
    9. 'alculate' → logprob: -18.029754638671875
    10. ' ' → logprob: -18.529754638671875

Token 146: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -9.088346359931165e-07
    2. '_val' → logprob: -14.125000953674316
    3. '_' → logprob: -15.750000953674316
    4. '_values' → logprob: -18.5
    5. 'value' → logprob: -18.625
    6. '_Value' → logprob: -19.125
    7. '_VALUE' → logprob: -20.125
    8. ' _' → logprob: -21.75
    9. ' value' → logprob: -23.0
    10. '_to' → logprob: -23.125

Token 147: '(A' (ID: 10706)
  Prédit: '_value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.2528514862060547
    2. '(A' → logprob: -1.5028514862060547
    3. '(' → logprob: -7.377851486206055
    4. '_' → logprob: -9.127851486206055
    5. 'Value' → logprob: -9.127851486206055
    6. 'value' → logprob: -10.127851486206055
    7. '_(' → logprob: -11.877851486206055
    8. '_val' → logprob: -12.002851486206055
    9. '_VALUE' → logprob: -12.252851486206055
    10. '(Value' → logprob: -12.252851486206055

Token 148: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -3.583550642360933e-05
    2. ',B' → logprob: -10.875036239624023
    3. ' ,' → logprob: -11.000036239624023
    4. ',
' → logprob: -16.250036239624023
    5. ' ' → logprob: -17.500036239624023
    6. ',

' → logprob: -17.500036239624023
    7. ',b' → logprob: -17.625036239624023
    8. ')' → logprob: -18.500036239624023
    9. '   ' → logprob: -18.500036239624023
    10. '‌,' → logprob: -18.500036239624023

Token 149: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.4740777611732483
    2. 'B' → logprob: -0.9740777611732483
    3. ')' → logprob: -14.474078178405762
    4. ' ' → logprob: -15.099078178405762
    5. ',' → logprob: -18.224077224731445
    6. ' ' → logprob: -18.724077224731445
    7. '   ' → logprob: -18.724077224731445
    8. ' )' → logprob: -18.974077224731445
    9. '	B' → logprob: -18.974077224731445
    10. '<|end|>' → logprob: -19.724077224731445

Token 150: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0002622894535306841
    2. ')
' → logprob: -8.250262260437012
    3. '   ' → logprob: -14.250262260437012
    4. ' )' → logprob: -15.375262260437012
    5. ')
' → logprob: -16.000263214111328
    6. ' ' → logprob: -17.625263214111328
    7. ')

' → logprob: -17.750263214111328
    8. '),' → logprob: -18.375263214111328
    9. '))' → logprob: -18.500263214111328
    10. ')#' → logprob: -18.875263214111328

Token 151: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4885985553264618
    2. 'result' → logprob: -1.6135985851287842
    3. ' result' → logprob: -1.7385985851287842
    4. '
' → logprob: -4.488598346710205
    5. '```' → logprob: -8.738598823547363
    6. ')' → logprob: -9.738598823547363
    7. '    
' → logprob: -10.738598823547363
    8. '	result' → logprob: -10.863598823547363
    9. '_result' → logprob: -10.988598823547363
    10. ' constrained' → logprob: -11.363598823547363

Token 152: ' final' (ID: 1721)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.0322742722928524
    2. ' result' → logprob: -3.5322742462158203
    3. 'con' → logprob: -6.53227424621582
    4. '   ' → logprob: -7.53227424621582
    5. ' constrained' → logprob: -8.03227424621582
    6. 'final' (adapté à ' final') → logprob: -9.15727424621582
    7. 'constraint' → logprob: -10.03227424621582
    8. ' ' → logprob: -10.90727424621582
    9. ' final' → logprob: -11.78227424621582
    10. 'value' → logprob: -12.03227424621582

Token 153: '_result' (ID: 11623)
  Prédit: '_value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.05043072998523712
    2. '_result' → logprob: -3.0504307746887207
    3. '_' → logprob: -6.425430774688721
    4. '_val' → logprob: -8.550430297851562
    5. ' =' → logprob: -11.675430297851562
    6. 'value' → logprob: -11.800430297851562
    7. '_output' → logprob: -12.550430297851562
    8. '=' → logprob: -12.925430297851562
    9. '=_' → logprob: -13.050430297851562
    10. 'result' → logprob: -13.300430297851562

Token 154: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.00760698551312089
    2. '=' → logprob: -4.8826069831848145
    3. ')' → logprob: -14.882607460021973
    4. '_' → logprob: -15.382607460021973
    5. ' ' → logprob: -15.507607460021973
    6. '   ' → logprob: -16.757606506347656
    7. '  ' → logprob: -17.757606506347656
    8. ' =
' → logprob: -18.132606506347656
    9. ' ' → logprob: -18.507606506347656
    10. 's' → logprob: -18.757606506347656

Token 155: ' apply' (ID: 6096)
  Prédit: 'apply'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'apply' → logprob: -0.5759395956993103
    2. ' apply' → logprob: -0.8259395956993103
    3. '.apply' → logprob: -16.575939178466797
    4. '   ' → logprob: -17.200939178466797
    5. '_apply' → logprob: -19.575939178466797
    6. 'app' → logprob: -19.825939178466797
    7. ' ' → logprob: -20.700939178466797
    8. ' ' → logprob: -21.450939178466797
    9. 'ap' → logprob: -22.575939178466797
    10. '  ' → logprob: -23.450939178466797

Token 156: '_max' (ID: 13731)
  Prédit: '_max'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_max' → logprob: -5.5577775128767826e-06
    2. 'max' → logprob: -12.125005722045898
    3. '```' → logprob: -19.8750057220459
    4. '_min' → logprob: -20.2500057220459
    5. '_MAX' → logprob: -20.5000057220459
    6. '_' → logprob: -21.0000057220459
    7. 'Max' → logprob: -21.2500057220459
    8. ' max' → logprob: -21.8750057220459
    9. 's' → logprob: -22.0000057220459
    10. '"_' → logprob: -22.1250057220459

Token 157: '_constraint' (ID: 115252)
  Prédit: '_constraint'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_constraint' → logprob: -3.292907877039397e-06
    2. '_constraints' → logprob: -12.87500286102295
    3. '_const' → logprob: -15.37500286102295
    4. '_result' → logprob: -15.62500286102295
    5. '_con' → logprob: -16.125003814697266
    6. '_constant' → logprob: -16.625003814697266
    7. '_' → logprob: -17.000003814697266
    8. '_value' → logprob: -17.625003814697266
    9. '```' → logprob: -17.750003814697266
    10. '_final' → logprob: -18.000003814697266

Token 158: '(value' (ID: 6333)
  Prédit: '(value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(value' → logprob: -0.00012368128227535635
    2. '(' → logprob: -9.000123977661133
    3. ' (' → logprob: -15.375123977661133
    4. '(final' → logprob: -17.750123977661133
    5. '(val' → logprob: -18.500123977661133
    6. '(Value' → logprob: -19.125123977661133
    7. '(
' → logprob: -19.125123977661133
    8. '(result' → logprob: -19.375123977661133
    9. '(valor' → logprob: -20.000123977661133
    10. ',value' → logprob: -21.500123977661133

Token 159: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3874317407608032
    2. ')
' → logprob: -1.1374317407608032
    3. '   ' → logprob: -7.512431621551514
    4. ')
' → logprob: -11.387432098388672
    5. ' ' → logprob: -13.637432098388672
    6. ')

' → logprob: -13.887432098388672
    7. ' )
' → logprob: -15.387432098388672
    8. ' )' → logprob: -15.637432098388672
    9. '(' → logprob: -15.762432098388672
    10. ')`
' → logprob: -16.512432098388672

Token 160: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0008634611731395125
    2. 'print' → logprob: -7.125863552093506
    3. ' print' → logprob: -10.125863075256348
    4. '(print' → logprob: -11.625863075256348
    5. '    
' → logprob: -12.125863075256348
    6. '	print' → logprob: -13.250863075256348
    7. '
' → logprob: -13.875863075256348
    8. '()' → logprob: -14.250863075256348
    9. '(' → logprob: -14.250863075256348
    10. ')' → logprob: -15.500863075256348

Token 161: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -1.9743012671824545e-05
    2. ' print' → logprob: -11.000020027160645
    3. '   ' → logprob: -12.750020027160645
    4. '(print' → logprob: -18.000019073486328
    5. '_print' → logprob: -19.375019073486328
    6. '
' → logprob: -19.375019073486328
    7. '	print' → logprob: -20.000019073486328
    8. '```' → logprob: -20.500019073486328
    9. '.print' → logprob: -21.000019073486328
    10. ' ' → logprob: -21.125019073486328

Token 162: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -7.896309739408025e-07
    2. '_' → logprob: -14.375000953674316
    3. '_final' → logprob: -16.75
    4. '_res' → logprob: -17.125
    5. '_results' → logprob: -17.375
    6. ' _' → logprob: -17.5
    7. '_Result' → logprob: -17.75
    8. '_RESULT' → logprob: -18.125
    9. '```' → logprob: -18.625
    10. '(' → logprob: -18.75

Token 163: '(final' (ID: 14111)
  Prédit: '(final'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(final' → logprob: -0.0019291093340143561
    2. '(' → logprob: -6.25192928314209
    3. ' (' → logprob: -14.87692928314209
    4. '(fin' → logprob: -16.251928329467773
    5. '(f' → logprob: -17.001928329467773
    6. '(
' → logprob: -17.376928329467773
    7. 'final' → logprob: -17.501928329467773
    8. '(fi' → logprob: -19.001928329467773
    9. '(result' → logprob: -19.376928329467773
    10. '("("' → logprob: -19.876928329467773

Token 164: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -1.3856492842023727e-06
    2. '_res' → logprob: -14.000000953674316
    3. '_' → logprob: -14.875000953674316
    4. '_results' → logprob: -16.875001907348633
    5. 'result' → logprob: -17.500001907348633
    6. '_RESULT' → logprob: -17.875001907348633
    7. ' _' → logprob: -18.000001907348633
    8. '_Result' → logprob: -18.375001907348633
    9. ')' → logprob: -18.500001907348633
    10. '_value' → logprob: -18.750001907348633

Token 165: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.191489642835222e-05
    2. '()' → logprob: -10.375041961669922
    3. ')
' → logprob: -11.750041961669922
    4. '())' → logprob: -13.000041961669922
    5. ' )' → logprob: -15.000041961669922
    6. '))' → logprob: -16.750041961669922
    7. '()
' → logprob: -17.625041961669922
    8. '   ' → logprob: -17.750041961669922
    9. ')

' → logprob: -18.000041961669922
    10. '```' → logprob: -18.375041961669922

Token 166: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.004146661143749952
    2. '
' → logprob: -6.129146575927734
    3. 'main' → logprob: -6.254146575927734
    4. '\n' → logprob: -11.129146575927734
    5. ' if' → logprob: -11.754146575927734
    6. '\' → logprob: -12.879146575927734
    7. '_' → logprob: -12.879146575927734
    8. '```' → logprob: -13.129146575927734
    9. '#' → logprob: -13.879146575927734
    10. '

' → logprob: -13.879146575927734

Token 167: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.012521306052803993
    2. '(' → logprob: -4.387521266937256
    3. '()
' → logprob: -11.887521743774414
    4. '(
' → logprob: -13.887521743774414
    5. '();' → logprob: -13.887521743774414
    6. '()

' → logprob: -14.387521743774414
    7. ' ()' → logprob: -15.137521743774414
    8. '()`' → logprob: -15.137521743774414
    9. '()">' → logprob: -15.512521743774414
    10. '()<' → logprob: -15.637521743774414


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 165
Tokens correctement prédits (1ère position, stricte): 85
Tokens correctement prédits (1ère position, avec adaptation): 93
Tokens correctement prédits (top 10): 146
Précision stricte (1ère position): 51.52%
Précision adaptée (1ère position): 56.36%
Précision (top 10): 88.48%
================================================================================
