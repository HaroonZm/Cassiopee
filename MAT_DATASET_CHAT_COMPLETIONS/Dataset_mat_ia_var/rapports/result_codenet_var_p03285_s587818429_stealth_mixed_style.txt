================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:11:43
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
def check(n):
    from functools import reduce
    result = list()
    for i in range(25):
        for j in range(14):
            if 4*i+7*j==n:
                result.append((i,j))
    return len(result)

count = check(n)
if not count:
    print('No')
else:
    print('Yes')
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00042768914136104286
    2. ''' → logprob: -8.62542724609375
    3. '('' → logprob: -9.37542724609375
    4. '(n' → logprob: -9.87542724609375
    5. '```' → logprob: -10.37542724609375
    6. '`' → logprob: -10.75042724609375
    7. '("("' → logprob: -11.12542724609375
    8. '(
' → logprob: -11.12542724609375
    9. ')' → logprob: -11.75042724609375
    10. '()' → logprob: -12.25042724609375

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.13287097215652466
    2. ')' → logprob: -2.13287091255188
    3. '()' → logprob: -5.382871150970459
    4. '())' → logprob: -7.382871150970459
    5. '(
' → logprob: -8.1328706741333
    6. '```' → logprob: -9.8828706741333
    7. '(

' → logprob: -10.2578706741333
    8. '('' → logprob: -10.3828706741333
    9. ''' → logprob: -10.6328706741333
    10. '(n' → logprob: -10.7578706741333

Token 5: 'def' (ID: 1314)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.7043631672859192
    2. 'if' → logprob: -1.4543631076812744
    3. 'for' → logprob: -2.3293631076812744
    4. 's' → logprob: -2.4543631076812744
    5. 'f' → logprob: -4.3293633460998535
    6. ' ' → logprob: -4.4543633460998535
    7. 'x' → logprob: -4.8293633460998535
    8. ')' → logprob: -4.9543633460998535
    9. 'a' → logprob: -4.9543633460998535
    10. ''' → logprob: -5.0793633460998535

Token 6: ' check' (ID: 2371)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.05204417556524277
    2. '_' → logprob: -3.927044153213501
    3. ' factorial' → logprob: -4.30204439163208
    4. ' space' → logprob: -4.55204439163208
    5. ' _' → logprob: -6.30204439163208
    6. ' f' → logprob: -7.05204439163208
    7. ' add' → logprob: -7.30204439163208
    8. ' my' → logprob: -7.42704439163208
    9. ' function' → logprob: -7.55204439163208
    10. ' calculate' → logprob: -8.552043914794922

Token 7: '(n' (ID: 2406)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0026730417739599943
    2. '(' → logprob: -6.002673149108887
    3. '_space' → logprob: -9.752673149108887
    4. '_(' → logprob: -10.127673149108887
    5. ' ' → logprob: -11.127673149108887
    6. ' _' → logprob: -11.127673149108887
    7. 's' → logprob: -11.252673149108887
    8. '_s' → logprob: -11.252673149108887
    9. '_parent' → logprob: -11.752673149108887
    10. '(_)' → logprob: -12.502673149108887

Token 8: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.09247849136590958
    2. ')' → logprob: -2.4674785137176514
    3. ',' → logprob: -6.342478275299072
    4. '_' → logprob: -7.092478275299072
    5. ':' → logprob: -8.59247875213623
    6. '(n' → logprob: -8.71747875213623
    7. '[' → logprob: -9.09247875213623
    8. ' ):' → logprob: -9.09247875213623
    9. '(' → logprob: -9.46747875213623
    10. ''s' → logprob: -10.09247875213623

Token 9: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.1969728171825409
    2. '   ' → logprob: -1.8219728469848633
    3. '(' → logprob: -4.321972846984863
    4. ' ' → logprob: -6.696972846984863
    5. '```' → logprob: -7.071972846984863
    6. ':
' → logprob: -7.696972846984863
    7. ' :' → logprob: -8.446972846984863
    8. '    ' → logprob: -8.446972846984863
    9. ':return' → logprob: -8.571972846984863
    10. '():' → logprob: -8.946972846984863

Token 10: ' from' (ID: 591)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2772831916809082
    2. ' ' → logprob: -2.652283191680908
    3. ' \' → logprob: -3.027283191680908
    4. '`' → logprob: -4.027283191680908
    5. ' 
' → logprob: -4.027283191680908
    6. ' return' → logprob: -4.402283191680908
    7. '\n' → logprob: -4.652283191680908
    8. '```' → logprob: -4.652283191680908
    9. '\' → logprob: -4.902283191680908
    10. ''' → logprob: -5.027283191680908

Token 11: ' functools' (ID: 142636)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.00032116140937432647
    2. ' ' → logprob: -8.875321388244629
    3. 'math' → logprob: -9.250321388244629
    4. ' collections' → logprob: -10.500321388244629
    5. '_' → logprob: -10.875321388244629
    6. ' itertools' → logprob: -11.250321388244629
    7. ' sys' → logprob: -11.875321388244629
    8. ' random' → logprob: -12.250321388244629
    9. ' sym' → logprob: -12.500321388244629
    10. ' ast' → logprob: -13.250321388244629

Token 12: ' import' (ID: 1588)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.3068546950817108
    2. ' import' → logprob: -1.6818547248840332
    3. '_import' → logprob: -3.181854724884033
    4. ' _' → logprob: -3.806854724884033
    5. 'import' → logprob: -4.306854724884033
    6. ' ' → logprob: -7.556854724884033
    7. ' l' → logprob: -9.181854248046875
    8. '	import' → logprob: -9.681854248046875
    9. '_wrap' → logprob: -10.056854248046875
    10. '_reduce' → logprob: -10.556854248046875

Token 13: ' reduce' (ID: 10389)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.1642090231180191
    2. ' l' → logprob: -1.914209008216858
    3. 'cache' → logprob: -5.914208889007568
    4. 'reduce' → logprob: -7.789208889007568
    5. 'wrap' → logprob: -7.914208889007568
    6. 'cached' → logprob: -8.164209365844727
    7. ' cache' → logprob: -9.414209365844727
    8. 'partial' → logprob: -9.414209365844727
    9. ' wraps' → logprob: -10.664209365844727
    10. ' reduce' → logprob: -12.039209365844727

Token 14: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.579771876335144
    2. ' ' → logprob: -1.579771876335144
    3. '\' → logprob: -3.0797719955444336
    4. ' (' → logprob: -3.4547719955444336
    5. '    ' → logprob: -3.8297719955444336
    6. '   ' → logprob: -3.8297719955444336
    7. '(
' → logprob: -3.9547719955444336
    8. '_' → logprob: -4.204771995544434
    9. ',' → logprob: -4.329771995544434
    10. '`' → logprob: -4.329771995544434

Token 15: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9180298447608948
    2. ' ' → logprob: -1.79302978515625
    3. '(' → logprob: -2.16802978515625
    4. '    ' → logprob: -2.29302978515625
    5. ')' → logprob: -3.04302978515625
    6. ' return' → logprob: -3.41802978515625
    7. ':' → logprob: -3.54302978515625
    8. ',' → logprob: -3.79302978515625
    9. '_' → logprob: -4.29302978515625
    10. ' (' → logprob: -4.66802978515625

Token 16: ' result' (ID: 1534)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7567486763000488
    2. ' return' → logprob: -1.3817486763000488
    3. 'return' → logprob: -1.6317486763000488
    4. '    ' → logprob: -4.131748676300049
    5. ' ' → logprob: -4.256748676300049
    6. ' s' → logprob: -4.756748676300049
    7. ')' → logprob: -5.131748676300049
    8. 's' → logprob: -5.506748676300049
    9. ' x' → logprob: -5.631748676300049
    10. 'result' (adapté à ' result') → logprob: -6.131748676300049

Token 17: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01903538592159748
    2. '=' → logprob: -4.019035339355469
    3. ' ' → logprob: -7.269035339355469
    4. '(' → logprob: -9.644035339355469
    5. ')' → logprob: -10.019035339355469
    6. '_' → logprob: -10.144035339355469
    7. ' =)' → logprob: -11.019035339355469
    8. ' |=' → logprob: -12.519035339355469
    9. ' )' → logprob: -12.644035339355469
    10. ',' → logprob: -12.769035339355469

Token 18: ' list' (ID: 1562)
  Prédit: ' reduce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' reduce' → logprob: -0.027766114100813866
    2. 'reduce' → logprob: -3.652766227722168
    3. ' n' → logprob: -6.902766227722168
    4. ' ' → logprob: -8.777766227722168
    5. '1' → logprob: -9.402766227722168
    6. '0' → logprob: -9.777766227722168
    7. ' sum' → logprob: -10.652766227722168
    8. 'n' → logprob: -10.777766227722168
    9. ' functools' → logprob: -10.902766227722168
    10. ' list' → logprob: -11.027766227722168

Token 19: '()
' (ID: 1234)
  Prédit: '(map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.5386512279510498
    2. '(filter' → logprob: -1.1636512279510498
    3. '(' → logprob: -2.53865122795105
    4. '(re' → logprob: -3.91365122795105
    5. '(range' → logprob: -5.663651466369629
    6. '(str' → logprob: -7.413651466369629
    7. '(result' → logprob: -7.913651466369629
    8. '()' → logprob: -8.913651466369629
    9. '(set' → logprob: -9.288651466369629
    10. ')' → logprob: -9.288651466369629

Token 20: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07712668925523758
    2. ' for' → logprob: -4.077126502990723
    3. ')' → logprob: -4.202126502990723
    4. '    ' → logprob: -4.952126502990723
    5. '    
' → logprob: -5.077126502990723
    6. ' ' → logprob: -5.202126502990723
    7. '(' → logprob: -5.327126502990723
    8. 'for' → logprob: -5.577126502990723
    9. ' 
' → logprob: -6.077126502990723
    10. '(
' → logprob: -6.327126502990723

Token 21: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.5816178917884827
    2. 'for' (adapté à ' for') → logprob: -1.081617832183838
    3. '   ' → logprob: -2.331617832183838
    4. ' ' → logprob: -5.831617832183838
    5. ')' → logprob: -7.581617832183838
    6. '(' → logprob: -8.706618309020996
    7. '[' → logprob: -8.706618309020996
    8. '    ' → logprob: -9.331618309020996
    9. 'n' → logprob: -9.456618309020996
    10. '\n' → logprob: -9.581618309020996

Token 22: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.1097477376461029
    2. ' ' → logprob: -2.3597476482391357
    3. 'i' → logprob: -5.484747886657715
    4. ' range' → logprob: -6.359747886657715
    5. ' _' → logprob: -6.484747886657715
    6. '_' → logprob: -6.984747886657715
    7. ' num' → logprob: -7.734747886657715
    8. ' x' → logprob: -7.984747886657715
    9. 'range' → logprob: -9.359747886657715
    10. ' number' → logprob: -9.609747886657715

Token 23: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.012344345450401306
    2. 'in' → logprob: -4.5123443603515625
    3. 'n' → logprob: -7.2623443603515625
    4. ' ' → logprob: -7.6373443603515625
    5. ' n' → logprob: -10.012344360351562
    6. ',' → logprob: -10.762344360351562
    7. '  ' → logprob: -10.887344360351562
    8. 'range' → logprob: -12.387344360351562
    9. '	in' → logprob: -12.637344360351562
    10. '   ' → logprob: -12.887344360351562

Token 24: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.029832633212208748
    2. 'range' → logprob: -3.529832601547241
    3. ' ' → logprob: -9.52983283996582
    4. '	range' → logprob: -12.65483283996582
    5. '  ' → logprob: -13.27983283996582
    6. '   ' → logprob: -13.40483283996582
    7. '(range' → logprob: -13.52983283996582
    8. ' xrange' → logprob: -14.77983283996582
    9. '[' → logprob: -15.15483283996582
    10. ')' → logprob: -15.84233283996582

Token 25: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003192447591573
    2. '(n' → logprob: -5.75319242477417
    3. ' (' → logprob: -11.378192901611328
    4. '(i' → logprob: -13.753192901611328
    5. '1' → logprob: -14.378192901611328
    6. ' ' → logprob: -14.628192901611328
    7. '(len' → logprob: -14.878192901611328
    8. ')' → logprob: -15.378192901611328
    9. '   ' → logprob: -16.128192901611328
    10. 'n' → logprob: -16.628192901611328

Token 26: '25' (ID: 1161)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.011761920526623726
    2. '2' → logprob: -4.6367621421813965
    3. 'n' → logprob: -6.7617621421813965
    4. ' ' → logprob: -7.2617621421813965
    5. '(' → logprob: -9.636761665344238
    6. ' n' → logprob: -10.761761665344238
    7. '0' → logprob: -10.886761665344238
    8. '10' → logprob: -11.011761665344238
    9. '(n' → logprob: -11.136761665344238
    10. ')' → logprob: -13.261761665344238

Token 27: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.11505506187677383
    2. '+' → logprob: -3.1150550842285156
    3. ' ):' → logprob: -3.6150550842285156
    4. ')' → logprob: -3.9900550842285156
    5. ',' → logprob: -4.740055084228516
    6. ' ,' → logprob: -5.615055084228516
    7. ' +' → logprob: -6.365055084228516
    8. '0' → logprob: -6.490055084228516
    9. ' )' → logprob: -7.115055084228516
    10. '):
' → logprob: -7.115055084228516

Token 28: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.7562530636787415
    2. ':' → logprob: -1.0062530040740967
    3. '    ' → logprob: -2.5062530040740967
    4. ' :' → logprob: -3.3812530040740967
    5. '   ' → logprob: -4.006253242492676
    6. ' ' → logprob: -4.631253242492676
    7. '):' → logprob: -5.131253242492676
    8. '(' → logprob: -5.381253242492676
    9. ',' → logprob: -5.881253242492676
    10. ')' → logprob: -6.506253242492676

Token 29: ' for' (ID: 395)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.08232057094573975
    2. '    ' → logprob: -2.9573206901550293
    3. '   ' → logprob: -4.832320690155029
    4. ' if' → logprob: -5.207320690155029
    5. ' 
' → logprob: -5.707320690155029
    6. '       ' → logprob: -5.707320690155029
    7. 'if' → logprob: -6.457320690155029
    8. '     
' → logprob: -6.457320690155029
    9. '<|end|>' → logprob: -6.832320690155029
    10. '  ' → logprob: -8.332320213317871

Token 30: ' j' (ID: 441)
  Prédit: ' j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' j' → logprob: -0.11673200875520706
    2. ' ' → logprob: -2.491732120513916
    3. ' range' → logprob: -3.991732120513916
    4. ' (' → logprob: -6.366732120513916
    5. ' _' → logprob: -6.491732120513916
    6. 'range' → logprob: -6.616732120513916
    7. 'j' → logprob: -6.741732120513916
    8. ' n' → logprob: -6.866732120513916
    9. '_' → logprob: -7.741732120513916
    10. '    ' → logprob: -8.241731643676758

Token 31: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.008748359978199005
    2. 'in' → logprob: -4.758748531341553
    3. ' ' → logprob: -9.508748054504395
    4. '<|end|>' → logprob: -10.133748054504395
    5. '	in' → logprob: -11.258748054504395
    6. '    ' → logprob: -14.258748054504395
    7. 'In' → logprob: -14.508748054504395
    8. '(' → logprob: -14.696248054504395
    9. '<|end|>' → logprob: -14.696248054504395
    10. '```' → logprob: -14.758748054504395

Token 32: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.28118473291397095
    2. 'range' → logprob: -1.4061846733093262
    3. ' ' → logprob: -11.281185150146484
    4. '(range' → logprob: -11.281185150146484
    5. '	range' → logprob: -12.656185150146484
    6. ')' → logprob: -13.281185150146484
    7. '  ' → logprob: -13.906185150146484
    8. ' xrange' → logprob: -14.031185150146484
    9. '   ' → logprob: -14.281185150146484
    10. 'n' → logprob: -14.656185150146484

Token 33: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3018822968006134
    2. '(i' → logprob: -1.926882266998291
    3. '(n' → logprob: -2.176882266998291
    4. ' (' → logprob: -6.551882266998291
    5. '(j' → logprob: -9.67688274383545
    6. '(len' → logprob: -10.92688274383545
    7. ' ' → logprob: -11.42688274383545
    8. '(int' → logprob: -11.42688274383545
    9. '<|end|>' → logprob: -11.42688274383545
    10. '((' → logprob: -11.55188274383545

Token 34: '14' (ID: 1265)
  Prédit: '25'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '25' → logprob: -0.659365713596344
    2. 'i' → logprob: -1.1593656539916992
    3. '26' → logprob: -2.409365653991699
    4. '1' → logprob: -3.784365653991699
    5. 'n' → logprob: -3.909365653991699
    6. ' ' → logprob: -4.659365653991699
    7. '10' → logprob: -4.784365653991699
    8. ' i' → logprob: -5.534365653991699
    9. '100' → logprob: -6.034365653991699
    10. '5' → logprob: -6.034365653991699

Token 35: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.005969207733869553
    2. '+' → logprob: -6.380969047546387
    3. '       ' → logprob: -6.380969047546387
    4. '):
' → logprob: -6.755969047546387
    5. ':' → logprob: -7.755969047546387
    6. ')' → logprob: -8.255969047546387
    7. ',' → logprob: -8.630969047546387
    8. ' ):' → logprob: -8.755969047546387
    9. '   ' → logprob: -9.130969047546387
    10. '4' → logprob: -10.255969047546387

Token 36: '           ' (ID: 352)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.7452945709228516
    2. '           ' → logprob: -0.8702945709228516
    3. '       ' → logprob: -2.3702945709228516
    4. ' :' → logprob: -5.370294570922852
    5. '<|end|>' → logprob: -6.370294570922852
    6. '        ' → logprob: -6.495294570922852
    7. '               ' → logprob: -6.620294570922852
    8. '):' → logprob: -6.995294570922852
    9. '():' → logprob: -7.745294570922852
    10. '   ' → logprob: -7.870294570922852

Token 37: ' if' (ID: 538)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -1.0234614610671997
    2. ' ' → logprob: -1.2734614610671997
    3. ' if' → logprob: -1.8984614610671997
    4. '                ' → logprob: -2.52346134185791
    5. 'if' (adapté à ' if') → logprob: -2.52346134185791
    6. '            ' → logprob: -3.64846134185791
    7. ' for' → logprob: -5.52346134185791
    8. 'for' → logprob: -5.77346134185791
    9. '           ' → logprob: -5.89846134185791
    10. ' 
' → logprob: -6.27346134185791

Token 38: ' ' (ID: 220)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.6999437212944031
    2. ' n' → logprob: -0.8249437212944031
    3. ' i' → logprob: -3.324943780899048
    4. '(n' → logprob: -4.824943542480469
    5. 'n' → logprob: -5.074943542480469
    6. '(i' → logprob: -5.324943542480469
    7. ' ' → logprob: -5.324943542480469
    8. ' abs' → logprob: -6.574943542480469
    9. ' j' → logprob: -6.949943542480469
    10. '(' → logprob: -7.574943542480469

Token 39: '4' (ID: 19)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.6133956909179688
    2. ' i' → logprob: -1.7383956909179688
    3. '(i' → logprob: -2.1133956909179688
    4. ' (' → logprob: -2.1133956909179688
    5. '(' → logprob: -4.363395690917969
    6. 'n' → logprob: -4.863395690917969
    7. ' n' → logprob: -5.738395690917969
    8. '2' → logprob: -5.738395690917969
    9. 'abs' → logprob: -5.738395690917969
    10. ' ' → logprob: -6.113395690917969

Token 40: '*i' (ID: 51147)
  Prédit: '*i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*i' → logprob: -0.03663387894630432
    2. ' *' → logprob: -3.6616339683532715
    3. '*' → logprob: -4.7866339683532715
    4. 'i' → logprob: -6.6616339683532715
    5. '*j' → logprob: -8.286633491516113
    6. '**' → logprob: -8.786633491516113
    7. ' i' → logprob: -9.536633491516113
    8. ' ' → logprob: -9.661633491516113
    9. '*n' → logprob: -9.786633491516113
    10. '0' → logprob: -11.911633491516113

Token 41: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.38696375489234924
    2. ' +' → logprob: -1.1369637250900269
    3. ' ' → logprob: -10.136963844299316
    4. '+j' → logprob: -10.886963844299316
    5. ' plus' → logprob: -11.261963844299316
    6. '0' → logprob: -13.199463844299316
    7. '-' → logprob: -13.261963844299316
    8. '>' → logprob: -13.449463844299316
    9. '"+"' → logprob: -13.449463844299316
    10. '_' → logprob: -13.449463844299316

Token 42: '7' (ID: 22)
  Prédit: '7'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -0.000869413954205811
    2. '3' → logprob: -7.250869274139404
    3. 'j' → logprob: -9.875869750976562
    4. '5' → logprob: -10.500869750976562
    5. '6' → logprob: -10.625869750976562
    6. '2' → logprob: -11.125869750976562
    7. ' ' → logprob: -11.250869750976562
    8. '

' → logprob: -11.250869750976562
    9. '
' → logprob: -12.625869750976562
    10. '9' → logprob: -13.125869750976562

Token 43: '*j' (ID: 138193)
  Prédit: '*j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*j' → logprob: -0.00010151672904612496
    2. 'j' → logprob: -9.250101089477539
    3. ' *' → logprob: -12.500101089477539
    4. '*' → logprob: -13.625101089477539
    5. '	j' → logprob: -15.375101089477539
    6. '   ' → logprob: -16.75010108947754
    7. '*i' → logprob: -16.87510108947754
    8. ' ' → logprob: -16.87510108947754
    9. ' j' → logprob: -17.12510108947754
    10. '```' → logprob: -17.62510108947754

Token 44: '==' (ID: 560)
  Prédit: '=='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.4749527871608734
    2. ' ==' → logprob: -0.9749528169631958
    3. '<=' → logprob: -7.474952697753906
    4. ' <=' → logprob: -8.474952697753906
    5. '=' → logprob: -9.724952697753906
    6. ' ' → logprob: -10.474952697753906
    7. '>=' → logprob: -12.474952697753906
    8. '===' → logprob: -13.224952697753906
    9. '>' → logprob: -13.599952697753906
    10. '   ' → logprob: -14.099952697753906

Token 45: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.0009119403548538685
    2. ' n' → logprob: -7.000911712646484
    3. '   ' → logprob: -15.875911712646484
    4. '	n' → logprob: -16.000911712646484
    5. ' ' → logprob: -16.500911712646484
    6. '  ' → logprob: -17.750911712646484
    7. '    ' → logprob: -17.875911712646484
    8. ' ' → logprob: -19.250911712646484
    9. '?n' → logprob: -20.875911712646484
    10. ')n' → logprob: -20.875911712646484

Token 46: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00025084958178922534
    2. ':return' → logprob: -8.750250816345215
    3. ' :' → logprob: -10.375250816345215
    4. ':
' → logprob: -10.500250816345215
    5. ' and' → logprob: -10.750250816345215
    6. '):' → logprob: -12.250250816345215
    7. 'and' → logprob: -12.750250816345215
    8. ' or' → logprob: -13.125250816345215
    9. ':**' → logprob: -13.500250816345215
    10. '<|end|>' → logprob: -15.625250816345215

Token 47: '               ' (ID: 506)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2984526753425598
    2. '               ' → logprob: -1.423452615737915
    3. ':return' → logprob: -4.298452854156494
    4. '           ' → logprob: -6.548452854156494
    5. ':
' → logprob: -7.423452854156494
    6. ' return' → logprob: -7.673452854156494
    7. ' :' → logprob: -8.173452377319336
    8. '              ' → logprob: -8.423452377319336
    9. '            ' → logprob: -9.048452377319336
    10. '                ' → logprob: -9.173452377319336

Token 48: ' result' (ID: 1534)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.49889329075813293
    2. ' return' → logprob: -1.4988932609558105
    3. '               ' → logprob: -2.6238932609558105
    4. 'result' (adapté à ' result') → logprob: -3.2488932609558105
    5. 'return' → logprob: -3.3738932609558105
    6. ' result' → logprob: -4.3738932609558105
    7. '                ' → logprob: -4.7488932609558105
    8. '           ' → logprob: -6.6238932609558105
    9. '                    ' → logprob: -7.7488932609558105
    10. '```' → logprob: -8.873893737792969

Token 49: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.005240872036665678
    2. '.' → logprob: -5.2552409172058105
    3. '.add' → logprob: -13.130240440368652
    4. '.app' → logprob: -13.130240440368652
    5. ' .' → logprob: -13.380240440368652
    6. '.extend' → logprob: -14.755240440368652
    7. '.Append' → logprob: -15.130240440368652
    8. '.ap' → logprob: -15.255240440368652
    9. 'append' → logprob: -15.380240440368652
    10. '.push' → logprob: -15.380240440368652

Token 50: '((' (ID: 2054)
  Prédit: '(True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(True' → logprob: -0.6070184111595154
    2. '(i' → logprob: -1.1070184707641602
    3. '((' → logprob: -2.48201847076416
    4. '(' → logprob: -3.23201847076416
    5. '(j' → logprob: -7.48201847076416
    6. '([' → logprob: -7.98201847076416
    7. '(n' → logprob: -7.98201847076416
    8. 'True' → logprob: -9.35701847076416
    9. '('' → logprob: -10.48201847076416
    10. '("' → logprob: -11.23201847076416

Token 51: 'i' (ID: 72)
  Prédit: 'i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.0007160080131143332
    2. ' i' → logprob: -7.750716209411621
    3. '(i' → logprob: -8.625716209411621
    4. '4' → logprob: -10.000716209411621
    5. '   ' → logprob: -10.250716209411621
    6. ' (' → logprob: -11.750716209411621
    7. ' ' → logprob: -12.375716209411621
    8. '(' → logprob: -12.500716209411621
    9. ')i' → logprob: -12.500716209411621
    10. '{i' → logprob: -13.625716209411621

Token 52: ',j' (ID: 22712)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.16042833030223846
    2. ',j' → logprob: -1.9104282855987549
    3. ' ,' → logprob: -8.535428047180176
    4. ',
' → logprob: -12.160428047180176
    5. ',)' → logprob: -14.285428047180176
    6. ')' → logprob: -14.410428047180176
    7. ',

' → logprob: -15.410428047180176
    8. 'j' → logprob: -16.160429000854492
    9. '),' → logprob: -16.285429000854492
    10. '+j' → logprob: -16.285429000854492

Token 53: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.026715682819485664
    2. ')' → logprob: -3.6517157554626465
    3. '))
' → logprob: -8.401715278625488
    4. ')))' → logprob: -8.776715278625488
    5. '               ' → logprob: -10.901715278625488
    6. '           ' → logprob: -11.526715278625488
    7. '),' → logprob: -13.151715278625488
    8. '       ' → logprob: -13.401715278625488
    9. ' ))' → logprob: -13.901715278625488
    10. ')
' → logprob: -14.151715278625488

Token 54: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.020786171779036522
    2. '    
' → logprob: -4.020786285400391
    3. 'return' → logprob: -7.895786285400391
    4. '
' → logprob: -7.895786285400391
    5. ' return' → logprob: -8.02078628540039
    6. ':return' → logprob: -8.39578628540039
    7. ' 
' → logprob: -8.77078628540039
    8. '	return' → logprob: -8.77078628540039
    9. '```' → logprob: -8.89578628540039
    10. '[' → logprob: -9.14578628540039

Token 55: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009994054213166237
    2. ' return' → logprob: -5.259994029998779
    3. '    
' → logprob: -6.134994029998779
    4. 'return' (adapté à ' return') → logprob: -6.634994029998779
    5. ' if' → logprob: -7.884994029998779
    6. ' ' → logprob: -8.634994506835938
    7. '<|end|>' → logprob: -8.884994506835938
    8. '```' → logprob: -9.009994506835938
    9. '
' → logprob: -9.134994506835938
    10. ' 
' → logprob: -9.384994506835938

Token 56: ' len' (ID: 4631)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.004088373854756355
    2. ' result' → logprob: -5.504088401794434
    3. '(result' → logprob: -11.879088401794434
    4. '[result' → logprob: -13.754088401794434
    5. 'sorted' → logprob: -14.504088401794434
    6. 'len' → logprob: -15.129088401794434
    7. 'None' → logprob: -15.129088401794434
    8. 'list' → logprob: -15.254088401794434
    9. 'tuple' → logprob: -15.254088401794434
    10. 'min' → logprob: -16.254087448120117

Token 57: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.0007133854669518769
    2. '(' → logprob: -7.250713348388672
    3. '(return' → logprob: -13.625713348388672
    4. '(results' → logprob: -14.000713348388672
    5. '(s' → logprob: -15.000713348388672
    6. 'result' → logprob: -15.125713348388672
    7. '(res' → logprob: -15.250713348388672
    8. '(
' → logprob: -16.375713348388672
    9. ' (' → logprob: -16.625713348388672
    10. '(response' → logprob: -17.125713348388672

Token 58: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -4.842555426876061e-06
    2. '())' → logprob: -13.625004768371582
    3. '))' → logprob: -13.750004768371582
    4. '()' → logprob: -14.125004768371582
    5. ')>' → logprob: -14.875004768371582
    6. ')return' → logprob: -15.125004768371582
    7. ' )' → logprob: -15.375004768371582
    8. ')
' → logprob: -15.625004768371582
    9. '(' → logprob: -15.750004768371582
    10. '}' → logprob: -16.0000057220459

Token 59: 'count' (ID: 5420)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.46219608187675476
    2. ')' → logprob: -2.462196111679077
    3. '<|end|>' → logprob: -2.837196111679077
    4. 'n' → logprob: -2.962196111679077
    5. '(' → logprob: -2.962196111679077
    6. '\n' → logprob: -3.337196111679077
    7. '#' → logprob: -3.837196111679077
    8. '```' → logprob: -4.212195873260498
    9. '(n' → logprob: -4.587195873260498
    10. '\' → logprob: -5.087195873260498

Token 60: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00862876046448946
    2. '(n' → logprob: -4.758628845214844
    3. '(count' → logprob: -11.758628845214844
    4. ')' → logprob: -13.633628845214844
    5. '((' → logprob: -14.258628845214844
    6. '("("' → logprob: -14.258628845214844
    7. '(
' → logprob: -14.383628845214844
    8. 's' → logprob: -14.508628845214844
    9. '()' → logprob: -14.758628845214844
    10. ' (' → logprob: -15.258628845214844

Token 61: ' check' (ID: 2371)
  Prédit: 'check'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'check' → logprob: -0.10030566155910492
    2. ' check' → logprob: -2.3503055572509766
    3. '(check' → logprob: -9.225305557250977
    4. ' ' → logprob: -15.850305557250977
    5. '	check' → logprob: -16.100305557250977
    6. '0' → logprob: -16.475305557250977
    7. '_check' → logprob: -16.850305557250977
    8. 'len' → logprob: -17.225305557250977
    9. '.check' → logprob: -17.225305557250977
    10. '```' → logprob: -17.475305557250977

Token 62: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0003806257154792547
    2. '(' → logprob: -7.875380516052246
    3. ')' → logprob: -16.625381469726562
    4. '(count' → logprob: -16.875381469726562
    5. '<|end|>' → logprob: -16.875381469726562
    6. ' (' → logprob: -17.250381469726562
    7. '(
' → logprob: -17.375381469726562
    8. 'n' → logprob: -17.375381469726562
    9. '(num' → logprob: -17.500381469726562
    10. ' ' → logprob: -17.750381469726562

Token 63: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1472419600977446e-06
    2. '))' → logprob: -14.000000953674316
    3. ' )' → logprob: -16.500001907348633
    4. ')
' → logprob: -16.500001907348633
    5. ')}' → logprob: -17.875001907348633
    6. ')n' → logprob: -18.000001907348633
    7. ')`' → logprob: -18.375001907348633
    8. ')#' → logprob: -18.750001907348633
    9. '())' → logprob: -18.875001907348633
    10. ')>' → logprob: -19.000001907348633

Token 64: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.5255375504493713
    2. 'print' → logprob: -0.9005375504493713
    3. 'for' → logprob: -6.525537490844727
    4. ' if' → logprob: -7.775537490844727
    5. '
' → logprob: -8.400537490844727
    6. '```' → logprob: -9.150537490844727
    7. '<|end|>' → logprob: -9.900537490844727
    8. '#' → logprob: -10.275537490844727
    9. '*' → logprob: -11.525537490844727
    10. '``' → logprob: -11.900537490844727

Token 65: ' not' (ID: 625)
  Prédit: ' count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' count' → logprob: -0.014172682538628578
    2. 'count' → logprob: -4.264172554016113
    3. ' ' → logprob: -11.889172554016113
    4. '(count' → logprob: -13.139172554016113
    5. '	count' → logprob: -16.26417350769043
    6. ' not' → logprob: -16.38917350769043
    7. ' n' → logprob: -18.01417350769043
    8. ' ' → logprob: -18.01417350769043
    9. 'n' → logprob: -18.13917350769043
    10. ' coun' → logprob: -18.38917350769043

Token 66: ' count' (ID: 3605)
  Prédit: ' count'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' count' → logprob: -0.03806455805897713
    2. 'count' → logprob: -3.288064479827881
    3. '(count' → logprob: -11.163064956665039
    4. ' ' → logprob: -11.788064956665039
    5. ' not' → logprob: -14.288064956665039
    6. '	count' → logprob: -15.163064956665039
    7. ' n' → logprob: -15.913064956665039
    8. '[count' → logprob: -16.66306495666504
    9. ' (' → logprob: -17.28806495666504
    10. ' ' → logprob: -17.41306495666504

Token 67: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.07807765156030655
    2. ' :' → logprob: -2.703077554702759
    3. '>' → logprob: -5.578077793121338
    4. '>:' → logprob: -6.203077793121338
    5. ' >' → logprob: -6.703077793121338
    6. ' ==' → logprob: -7.453077793121338
    7. '):' → logprob: -8.45307731628418
    8. '==' → logprob: -8.70307731628418
    9. '=' → logprob: -9.82807731628418
    10. ' or' → logprob: -10.57807731628418

Token 68: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.19815662503242493
    2. ' print' → logprob: -1.9481565952301025
    3. 'print' → logprob: -3.8231565952301025
    4. '\n' → logprob: -4.698156833648682
    5. ':' → logprob: -5.573156833648682
    6. '    
' → logprob: -6.823156833648682
    7. ':
' → logprob: -7.823156833648682
    8. '\' → logprob: -7.948156833648682
    9. '	print' → logprob: -8.698156356811523
    10. '    ' → logprob: -8.948156356811523

Token 69: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.28285709023475647
    2. ' print' → logprob: -1.407857060432434
    3. '   ' → logprob: -6.4078569412231445
    4. '\n' → logprob: -10.407856941223145
    5. '```' → logprob: -12.157856941223145
    6. '
' → logprob: -12.282856941223145
    7. '\' → logprob: -12.532856941223145
    8. '	print' → logprob: -13.032856941223145
    9. '.print' → logprob: -13.157856941223145
    10. '    
' → logprob: -13.157856941223145

Token 70: '('' (ID: 706)
  Prédit: '(-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(-' → logprob: -0.4953359365463257
    2. '(' → logprob: -0.9953359365463257
    3. '("' → logprob: -3.9953360557556152
    4. '('' → logprob: -6.370336055755615
    5. '-' → logprob: -7.370336055755615
    6. '()' → logprob: -9.495335578918457
    7. '(None' → logprob: -9.495335578918457
    8. '("-' → logprob: -9.620335578918457
    9. '(False' → logprob: -10.995335578918457
    10. '("")' → logprob: -11.870335578918457

Token 71: 'No' (ID: 3160)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.006135095376521349
    2. 'NO' → logprob: -6.256134986877441
    3. 'None' → logprob: -6.381134986877441
    4. 'No' → logprob: -7.006134986877441
    5. 'none' → logprob: -7.756134986877441
    6. '0' → logprob: -7.881134986877441
    7. 'Impossible' → logprob: -8.256134986877441
    8. 'NONE' → logprob: -9.256134986877441
    9. 'UN' → logprob: -9.506134986877441
    10. 'im' → logprob: -9.631134986877441

Token 72: '')
' (ID: 2515)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '')' → logprob: -0.2608548402786255
    2. ' Answer' → logprob: -1.8858548402786255
    3. ' solution' → logprob: -4.135854721069336
    4. ' ')' → logprob: -4.510854721069336
    5. 's' → logprob: -4.635854721069336
    6. ' answer' → logprob: -5.010854721069336
    7. ' Solution' → logprob: -5.385854721069336
    8. ' Combination' → logprob: -5.385854721069336
    9. ' such' → logprob: -5.885854721069336
    10. ' Answers' → logprob: -6.010854721069336

Token 73: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.00016206118743866682
    2. ' else' → logprob: -8.750162124633789
    3. '<|end|>' → logprob: -13.375162124633789
    4. '_else' → logprob: -14.750162124633789
    5. '```' → logprob: -14.875162124633789
    6. 'e' → logprob: -15.250162124633789
    7. 'elif' → logprob: -15.500162124633789
    8. 'elses' → logprob: -15.875162124633789
    9. 'elser' → logprob: -16.00016212463379
    10. 'els' → logprob: -16.12516212463379

Token 74: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00024500858853571117
    2. ':
' → logprob: -8.625245094299316
    3. ' :' → logprob: -10.000245094299316
    4. '   ' → logprob: -10.875245094299316
    5. '{' → logprob: -14.875245094299316
    6. ' :
' → logprob: -15.125245094299316
    7. '    ' → logprob: -16.250244140625
    8. ' print' → logprob: -16.250244140625
    9. ':
' → logprob: -16.750244140625
    10. 'print' → logprob: -17.000244140625

Token 75: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20816147327423096
    2. ' print' → logprob: -1.708161473274231
    3. 'print' → logprob: -5.083161354064941
    4. '    ' → logprob: -8.458161354064941
    5. ' for' → logprob: -8.708161354064941
    6. '	print' → logprob: -9.708161354064941
    7. '       ' → logprob: -10.333161354064941
    8. '```' → logprob: -10.958161354064941
    9. '   ' → logprob: -11.583161354064941
    10. ' ' → logprob: -12.583161354064941

Token 76: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.12715750932693481
    2. ' print' → logprob: -2.12715744972229
    3. ' for' → logprob: -9.252157211303711
    4. 'for' → logprob: -9.252157211303711
    5. '   ' → logprob: -10.502157211303711
    6. ' ' → logprob: -12.252157211303711
    7. '    ' → logprob: -13.752157211303711
    8. '	print' → logprob: -13.752157211303711
    9. '.print' → logprob: -14.627157211303711
    10. 'pr' → logprob: -14.752157211303711

Token 77: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.5283259153366089
    2. '(' → logprob: -1.0283259153366089
    3. '(count' → logprob: -3.0283260345458984
    4. '("' → logprob: -5.778326034545898
    5. '()' → logprob: -7.403326034545898
    6. '((' → logprob: -8.153326034545898
    7. '(len' → logprob: -9.028326034545898
    8. '(n' → logprob: -9.028326034545898
    9. '(sum' → logprob: -9.778326034545898
    10. ' (' → logprob: -9.903326034545898

Token 78: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.17221444845199585
    2. ''' → logprob: -1.9222145080566406
    3. 'count' → logprob: -4.547214508056641
    4. '"' → logprob: -8.42221450805664
    5. ''S' → logprob: -8.42221450805664
    6. '4' → logprob: -8.67221450805664
    7. 'YES' → logprob: -8.92221450805664
    8. '('' → logprob: -9.17221450805664
    9. '1' → logprob: -9.42221450805664
    10. ''A' → logprob: -9.54721450805664

Token 79: '')' (ID: 1542)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.16025875508785248
    2. '')' → logprob: -1.9102587699890137
    3. ' )' → logprob: -10.785258293151855
    4. '")' → logprob: -12.285258293151855
    5. '`)' → logprob: -13.285258293151855
    6. ',' → logprob: -13.410258293151855
    7. ')")' → logprob: -13.410258293151855
    8. ',)' → logprob: -14.285258293151855
    9. '')
' → logprob: -14.285258293151855
    10. ')
' → logprob: -14.410258293151855


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 77
Tokens correctement prédits (1ère position, stricte): 31
Tokens correctement prédits (1ère position, avec adaptation): 33
Tokens correctement prédits (top 10): 57
Précision stricte (1ère position): 40.26%
Précision adaptée (1ère position): 42.86%
Précision (top 10): 74.03%
================================================================================
