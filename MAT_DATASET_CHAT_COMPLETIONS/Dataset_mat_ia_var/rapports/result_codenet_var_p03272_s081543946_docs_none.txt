================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:10:01
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N, i = map(int, input().split())
print(N - i + 1)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' i' (ID: 575)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.14702868461608887
    2. '+' → logprob: -2.272028684616089
    3. ',' → logprob: -4.147028923034668
    4. ' =' → logprob: -4.397028923034668
    5. '[' → logprob: -6.522028923034668
    6. ';' → logprob: -6.522028923034668
    7. '-' → logprob: -6.647028923034668
    8. ')' → logprob: -8.147028923034668
    9. '.' → logprob: -8.772028923034668
    10. 'n' → logprob: -8.897028923034668

Token 4: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.20297619700431824
    2. '0' → logprob: -1.8279762268066406
    3. '1' → logprob: -4.577976226806641
    4. ' N' → logprob: -5.327976226806641
    5. ' n' → logprob: -6.327976226806641
    6. '10' → logprob: -6.452976226806641
    7. ' np' → logprob: -6.577976226806641
    8. 'N' → logprob: -7.327976226806641
    9. '`' → logprob: -8.20297622680664
    10. 'n' → logprob: -8.32797622680664

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.030786434188485146
    2. '(lambda' → logprob: -4.280786514282227
    3. '<|end|>' → logprob: -4.530786514282227
    4. '```' → logprob: -6.155786514282227
    5. '(int' → logprob: -6.530786514282227
    6. '(str' → logprob: -8.030786514282227
    7. '(user' → logprob: -8.530786514282227
    8. '<|end|>' → logprob: -8.780786514282227
    9. '(
' → logprob: -9.030786514282227
    10. ')' → logprob: -9.280786514282227

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.23378095030784607
    2. ')' → logprob: -1.9837809801101685
    3. '(' → logprob: -2.858780860900879
    4. '```' → logprob: -5.483780860900879
    5. '(int' → logprob: -6.233780860900879
    6. '(user' → logprob: -6.483780860900879
    7. 'input' → logprob: -6.858780860900879
    8. '<|end|>' → logprob: -6.983780860900879
    9. '`)' → logprob: -7.108780860900879
    10. '(str' → logprob: -7.483780860900879

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.31396719813346863
    2. ' input' → logprob: -1.313967227935791
    3. '(input' → logprob: -7.313967227935791
    4. ')' → logprob: -10.313966751098633
    5. ',input' → logprob: -12.563966751098633
    6. '=input' → logprob: -13.938966751098633
    7. ' )' → logprob: -14.313966751098633
    8. '[input' → logprob: -15.063966751098633
    9. '<input' → logprob: -15.313966751098633
    10. '_input' → logprob: -16.438966751098633

Token 8: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.5182543396949768
    2. '())' → logprob: -1.143254280090332
    3. '(' → logprob: -3.018254280090332
    4. ')' → logprob: -3.768254280090332
    5. '().' → logprob: -6.268254280090332
    6. '```' → logprob: -6.518254280090332
    7. '(()' → logprob: -6.768254280090332
    8. '('' → logprob: -6.893254280090332
    9. '());' → logprob: -6.893254280090332
    10. '();)' → logprob: -7.018254280090332

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0017384823877364397
    2. 'strip' → logprob: -6.376738548278809
    3. 'rstrip' → logprob: -10.751738548278809
    4. ')' → logprob: -12.126738548278809
    5. ' split' → logprob: -12.251738548278809
    6. '(split' → logprob: -13.251738548278809
    7. 'read' → logprob: -13.376738548278809
    8. '```' → logprob: -14.001738548278809
    9. 'spl' → logprob: -16.001737594604492
    10. 'replace' → logprob: -16.126737594604492

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1650489866733551
    2. '())' → logprob: -1.9150489568710327
    3. '))' → logprob: -6.290049076080322
    4. '()' → logprob: -6.290049076080322
    5. '`)' → logprob: -7.290049076080322
    6. '(' → logprob: -8.415048599243164
    7. '()))' → logprob: -9.915048599243164
    8. '```' → logprob: -10.415048599243164
    9. ')`' → logprob: -10.915048599243164
    10. '')' → logprob: -11.790048599243164

Token 11: 'print' (ID: 1598)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.45052194595336914
    2. '+' → logprob: -2.950521945953369
    3. ',' → logprob: -2.950521945953369
    4. 'a' → logprob: -3.075521945953369
    5. '#' → logprob: -3.325521945953369
    6. '*' → logprob: -3.575521945953369
    7. 'x' → logprob: -4.200521945953369
    8. ' ' → logprob: -4.200521945953369
    9. ')' → logprob: -4.450521945953369
    10. 'if' → logprob: -4.575521945953369

Token 12: '(N' (ID: 10564)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0007064753444865346
    2. '("("' → logprob: -7.875706672668457
    3. '('' → logprob: -8.125706672668457
    4. '("""' → logprob: -11.750706672668457
    5. '(f' → logprob: -12.125706672668457
    6. '((' → logprob: -12.125706672668457
    7. '()' → logprob: -12.750706672668457
    8. '(**' → logprob: -13.625706672668457
    9. '(`' → logprob: -13.625706672668457
    10. '(
' → logprob: -14.000706672668457

Token 13: ' -' (ID: 533)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.09012162685394287
    2. '[' → logprob: -2.4651217460632324
    3. '[i' → logprob: -7.715121746063232
    4. ',' → logprob: -7.840121746063232
    5. ' )' → logprob: -9.340121269226074
    6. '[N' → logprob: -10.465121269226074
    7. '*' → logprob: -10.465121269226074
    8. '+' → logprob: -10.590121269226074
    9. '))' → logprob: -10.840121269226074
    10. '-' → logprob: -11.090121269226074

Token 14: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.28270354866981506
    2. 'i' → logprob: -1.4077035188674927
    3. '1' → logprob: -6.532703399658203
    4. ' ' → logprob: -9.282703399658203
    5. '_i' → logprob: -13.782703399658203
    6. '	i' → logprob: -13.782703399658203
    7. '(i' → logprob: -14.407703399658203
    8. '2' → logprob: -15.532703399658203
    9. ' (' → logprob: -15.657703399658203
    10. '(' → logprob: -15.657703399658203

Token 15: ' +' (ID: 659)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -6.630610641877865e-06
    2. '`)' → logprob: -12.750006675720215
    3. '))' → logprob: -13.000006675720215
    4. ' )' → logprob: -14.375006675720215
    5. ')`' → logprob: -15.000006675720215
    6. '```' → logprob: -15.875006675720215
    7. '')' → logprob: -16.2500057220459
    8. '+' → logprob: -16.8750057220459
    9. ')
' → logprob: -17.0000057220459
    10. '*' → logprob: -17.3750057220459

Token 16: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.016245737671852112
    2. ' ' → logprob: -4.1412458419799805
    3. ')' → logprob: -9.01624584197998
    4. '2' → logprob: -10.26624584197998
    5. '"' → logprob: -10.89124584197998
    6. '0' → logprob: -11.01624584197998
    7. ' )' → logprob: -12.14124584197998
    8. ' i' → logprob: -12.89124584197998
    9. ''' → logprob: -13.01624584197998
    10. '(' → logprob: -13.26624584197998

Token 17: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.000169332604855299
    2. ' ' → logprob: -8.87516975402832
    3. '2' → logprob: -11.00016975402832
    4. ')' → logprob: -12.50016975402832
    5. '0' → logprob: -12.50016975402832
    6. '(' → logprob: -13.37516975402832
    7. 'i' → logprob: -13.50016975402832
    8. '10' → logprob: -14.87516975402832
    9. '3' → logprob: -15.12516975402832
    10. '"' → logprob: -15.12516975402832

Token 18: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0921942703134846e-05
    2. '`)' → logprob: -12.00001049041748
    3. '))' → logprob: -13.50001049041748
    4. '```' → logprob: -13.87501049041748
    5. ')`' → logprob: -13.87501049041748
    6. ' )' → logprob: -14.25001049041748
    7. '')' → logprob: -15.00001049041748
    8. ')
' → logprob: -15.50001049041748
    9. '")' → logprob: -16.375011444091797
    10. '）' → logprob: -16.750011444091797


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 16
Tokens correctement prédits (1ère position, stricte): 4
Tokens correctement prédits (1ère position, avec adaptation): 4
Tokens correctement prédits (top 10): 9
Précision stricte (1ère position): 25.00%
Précision adaptée (1ère position): 25.00%
Précision (top 10): 56.25%
================================================================================
