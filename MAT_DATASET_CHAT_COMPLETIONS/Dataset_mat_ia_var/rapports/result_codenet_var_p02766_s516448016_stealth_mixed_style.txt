================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:24:50
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import math
N_K = input().split()
def func(n, k):
    cnt = 0
    while int(n) >= k**cnt:
        cnt += 1
    return cnt
class Calc:
    @staticmethod
    def compute(n, k):
        try:
            return 1 + int(math.log(int(n), int(k)))
        except:
            return 0
if True:
    n, k = N_K[0], int(N_K[1])
    if hasattr(math, "log"):
        print(Calc.compute(n, k))
    else:
        result = func(n, k)
        print(result)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' math' (ID: 13324)
  → Token d'amorce (pas de prédiction)

Token 2: '
' (ID: 198)
  → Token d'amorce (pas de prédiction)

Token 3: 'N' (ID: 45)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.008853754960000515
    2. '\n' → logprob: -5.883853912353516
    3. '<|end|>' → logprob: -6.008853912353516
    4. '```' → logprob: -6.883853912353516
    5. '\' → logprob: -6.883853912353516
    6. 'import' → logprob: -7.133853912353516
    7. '<|end|>' → logprob: -9.133853912353516
    8. 'def' → logprob: -9.633853912353516
    9. '.pi' → logprob: -9.883853912353516
    10. 'newline' → logprob: -9.883853912353516

Token 4: '_K' (ID: 20555)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -1.1264792680740356
    2. '_' → logprob: -1.2514792680740356
    3. ' ' → logprob: -2.376479148864746
    4. '=' → logprob: -2.376479148864746
    5. ',' → logprob: -2.751479148864746
    6. ')' → logprob: -3.501479148864746
    7. ' =' → logprob: -3.751479148864746
    8. '[' → logprob: -4.001479148864746
    9. 'a' → logprob: -4.251479148864746
    10. 'u' → logprob: -4.626479148864746

Token 5: ' =' (ID: 314)
  Prédit: 'EY'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'EY' → logprob: -0.7227913737297058
    2. 'E' → logprob: -0.9727913737297058
    3. 'S' → logprob: -2.8477914333343506
    4. '=' → logprob: -3.3477914333343506
    5. ' =' → logprob: -3.5977914333343506
    6. '_' → logprob: -4.3477911949157715
    7. '_E' → logprob: -6.9727911949157715
    8. 's' → logprob: -7.8477911949157715
    9. 'ERNEL' → logprob: -8.34779167175293
    10. 'P' → logprob: -8.59779167175293

Token 6: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.01868654042482376
    2. '10' → logprob: -4.143686771392822
    3. '5' → logprob: -7.143686771392822
    4. '3' → logprob: -7.518686771392822
    5. '4' → logprob: -8.018686294555664
    6. '100' → logprob: -8.643686294555664
    7. '32' → logprob: -8.768686294555664
    8. '16' → logprob: -9.143686294555664
    9. '20' → logprob: -9.268686294555664
    10. '0' → logprob: -9.268686294555664

Token 7: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.015306652523577213
    2. '('' → logprob: -4.89030647277832
    3. ''' → logprob: -5.26530647277832
    4. '"' → logprob: -6.89030647277832
    5. '(
' → logprob: -7.01530647277832
    6. '("("' → logprob: -8.39030647277832
    7. '[' → logprob: -9.89030647277832
    8. '(

' → logprob: -10.01530647277832
    9. '`' → logprob: -10.14030647277832
    10. ')' → logprob: -10.51530647277832

Token 8: 'split' (ID: 13627)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.007859412580728531
    2. 'split' → logprob: -5.007859230041504
    3. 'isdigit' → logprob: -7.132859230041504
    4. 'rstrip' → logprob: -8.132859230041504
    5. ' strip' → logprob: -10.382859230041504
    6. 'is' → logprob: -12.007859230041504
    7. 'replace' → logprob: -12.132859230041504
    8. 'lower' → logprob: -12.632859230041504
    9. 'startswith' → logprob: -14.132859230041504
    10. 'count' → logprob: -14.382859230041504

Token 9: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.012941972352564335
    2. '()' → logprob: -5.137941837310791
    3. '('' → logprob: -5.137941837310791
    4. '("("' → logprob: -7.137941837310791
    5. '(
' → logprob: -9.26294231414795
    6. '(

' → logprob: -10.26294231414795
    7. '"' → logprob: -10.26294231414795
    8. '("' → logprob: -10.38794231414795
    9. ' (' → logprob: -10.51294231414795
    10. '`' → logprob: -11.01294231414795

Token 10: 'def' (ID: 1314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.030735637992620468
    2. '=' → logprob: -5.405735492706299
    3. 'n' → logprob: -5.405735492706299
    4. ' =' → logprob: -5.530735492706299
    5. '```' → logprob: -5.905735492706299
    6. 'N' → logprob: -6.155735492706299
    7. '(' → logprob: -6.280735492706299
    8. '_' → logprob: -6.405735492706299
    9. 'x' → logprob: -6.905735492706299
    10. 'for' → logprob: -7.155735492706299

Token 11: ' func' (ID: 4660)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.3255897760391235
    2. '_' → logprob: -1.5755897760391235
    3. ' calculate' → logprob: -1.5755897760391235
    4. ' _' → logprob: -2.325589656829834
    5. ' factorial' → logprob: -2.325589656829834
    6. ' space' → logprob: -3.075589656829834
    7. ' math' → logprob: -3.575589656829834
    8. ' f' → logprob: -3.825589656829834
    9. ' max' → logprob: -5.325589656829834
    10. ' compute' → logprob: -5.325589656829834

Token 12: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.08966683596372604
    2. '_' → logprob: -2.4646668434143066
    3. '```' → logprob: -9.214666366577148
    4. '(_' → logprob: -9.339666366577148
    5. ' (' → logprob: -9.589666366577148
    6. '(a' → logprob: -9.964666366577148
    7. '("("' → logprob: -10.089666366577148
    8. '**' → logprob: -10.589666366577148
    9. 's' → logprob: -10.714666366577148
    10. '_(' → logprob: -10.714666366577148

Token 13: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.5058725476264954
    2. ',' → logprob: -1.5058724880218506
    3. ')' → logprob: -1.7558724880218506
    4. ':' → logprob: -7.88087272644043
    5. '_' → logprob: -8.25587272644043
    6. '[' → logprob: -8.38087272644043
    7. ' ,' → logprob: -8.50587272644043
    8. 's' → logprob: -8.50587272644043
    9. 'a' → logprob: -8.50587272644043
    10. ',n' → logprob: -9.13087272644043

Token 14: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.5834524035453796
    2. ' k' → logprob: -0.8334524035453796
    3. 'm' → logprob: -6.458452224731445
    4. ' m' → logprob: -6.583452224731445
    5. 'x' → logprob: -7.708452224731445
    6. ' x' → logprob: -8.083452224731445
    7. 'K' → logprob: -8.145952224731445
    8. 'r' → logprob: -8.208452224731445
    9. ' K' → logprob: -8.208452224731445
    10. ' p' → logprob: -8.270952224731445

Token 15: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.048676952719688416
    2. ')' → logprob: -3.0486769676208496
    3. ',' → logprob: -9.673676490783691
    4. ':' → logprob: -11.423676490783691
    5. ' ):' → logprob: -12.423676490783691
    6. '=' → logprob: -12.923676490783691
    7. ''):' → logprob: -13.173676490783691
    8. '):
' → logprob: -13.548676490783691
    9. ')=' → logprob: -14.173676490783691
    10. '**' → logprob: -14.298676490783691

Token 16: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.112371526658535
    2. '    ' → logprob: -3.2373714447021484
    3. ' ' → logprob: -3.7373714447021484
    4. ':' → logprob: -4.237371444702148
    5. ' return' → logprob: -4.362371444702148
    6. '```' → logprob: -5.237371444702148
    7. '\n' → logprob: -6.612371444702148
    8. '\' → logprob: -6.612371444702148
    9. '\t' → logprob: -6.612371444702148
    10. '`' → logprob: -7.112371444702148

Token 17: ' cnt' (ID: 27340)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4659727215766907
    2. ' return' → logprob: -2.090972661972046
    3. ' if' → logprob: -2.590972661972046
    4. ' ' → logprob: -2.590972661972046
    5. 'r' → logprob: -4.215972900390625
    6. ' r' → logprob: -4.590972900390625
    7. 'return' → logprob: -4.590972900390625
    8. ' i' → logprob: -4.590972900390625
    9. '    ' → logprob: -4.715972900390625
    10. ' 
' → logprob: -5.090972900390625

Token 18: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6928396224975586
    2. ' =' → logprob: -0.8178396224975586
    3. ' ' → logprob: -3.6928396224975586
    4. '_' → logprob: -4.442839622497559
    5. '(' → logprob: -5.067839622497559
    6. ' +=' → logprob: -5.442839622497559
    7. ',' → logprob: -5.817839622497559
    8. ')' → logprob: -6.067839622497559
    9. '  ' → logprob: -6.442839622497559
    10. '   ' → logprob: -6.567839622497559

Token 19: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1614551842212677
    2. '0' → logprob: -1.9114551544189453
    3. ' n' → logprob: -6.911455154418945
    4. 'n' → logprob: -9.536455154418945
    5. ' math' → logprob: -9.536455154418945
    6. '1' → logprob: -10.161455154418945
    7. ' k' → logprob: -11.286455154418945
    8. ' [' → logprob: -11.411455154418945
    9. 'math' → logprob: -12.536455154418945
    10. ' ' → logprob: -12.536455154418945

Token 20: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00047821682528592646
    2. ' ' → logprob: -8.62547779083252
    3. '1' → logprob: -9.00047779083252
    4. 'n' → logprob: -9.50047779083252
    5. '[' → logprob: -10.12547779083252
    6. 'k' → logprob: -10.75047779083252
    7. 'math' → logprob: -11.00047779083252
    8. 'min' → logprob: -12.87547779083252
    9. '{}' → logprob: -13.12547779083252
    10. 'max' → logprob: -13.25047779083252

Token 21: '
' (ID: 198)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.0905964374542236
    2. '   ' → logprob: -1.0905964374542236
    3. '<|end|>' → logprob: -2.4655964374542236
    4. ':' → logprob: -2.9655964374542236
    5. '    ' → logprob: -3.3405964374542236
    6. ' 
' → logprob: -3.4655964374542236
    7. '
' → logprob: -4.0905961990356445
    8. '\' → logprob: -4.2155961990356445
    9. '\n' → logprob: -4.2155961990356445
    10. ',' → logprob: -4.2155961990356445

Token 22: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.0649442672729492
    2. '   ' → logprob: -1.3149442672729492
    3. '<|end|>' → logprob: -1.9399442672729492
    4. ' for' → logprob: -2.814944267272949
    5. ' 
' → logprob: -2.939944267272949
    6. '\n' → logprob: -2.939944267272949
    7. '    ' → logprob: -3.564944267272949
    8. '
' → logprob: -4.439944267272949
    9. 'for' → logprob: -5.189944267272949
    10. ':' → logprob: -5.314944267272949

Token 23: ' while' (ID: 2049)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.1281789094209671
    2. 'for' → logprob: -2.503178834915161
    3. '   ' → logprob: -4.12817907333374
    4. ' ' → logprob: -4.25317907333374
    5. ' 
' → logprob: -5.87817907333374
    6. '    ' → logprob: -6.50317907333374
    7. ' i' → logprob: -6.62817907333374
    8. ' while' → logprob: -7.12817907333374
    9. '    
' → logprob: -8.003178596496582
    10. '     
' → logprob: -8.253178596496582

Token 24: ' int' (ID: 677)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.050867024809122086
    2. 'n' → logprob: -3.1758670806884766
    3. ' k' → logprob: -4.925867080688477
    4. 'k' → logprob: -7.675867080688477
    5. ' ' → logprob: -9.550867080688477
    6. '(n' → logprob: -11.175867080688477
    7. ' (' → logprob: -11.925867080688477
    8. ' True' → logprob: -12.050867080688477
    9. ' math' → logprob: -12.050867080688477
    10. ' N' → logprob: -13.175867080688477

Token 25: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0459134578704834
    2. '(' → logprob: -3.5459134578704834
    3. '(k' → logprob: -4.1709136962890625
    4. 'n' → logprob: -8.545913696289062
    5. '(math' → logprob: -9.170913696289062
    6. 'k' → logprob: -9.295913696289062
    7. ' (' → logprob: -9.420913696289062
    8. '(N' → logprob: -10.795913696289062
    9. ')' → logprob: -10.920913696289062
    10. '('' → logprob: -11.170913696289062

Token 26: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.014939961023628712
    2. ')%' → logprob: -5.014939785003662
    3. ')>' → logprob: -5.389939785003662
    4. '%' → logprob: -6.264939785003662
    5. ')>=' → logprob: -7.264939785003662
    6. ' )' → logprob: -7.389939785003662
    7. '[' → logprob: -9.01494026184082
    8. ' %' → logprob: -9.51494026184082
    9. '%)' → logprob: -10.38994026184082
    10. ' ' → logprob: -10.51494026184082

Token 27: ' >=' (ID: 5064)
  Prédit: ' %'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.38459092378616333
    2. '%' → logprob: -1.2595908641815186
    3. ' >' → logprob: -3.7595908641815186
    4. '>' → logprob: -4.634591102600098
    5. ' ' → logprob: -7.009591102600098
    6. ' >=' → logprob: -7.134591102600098
    7. ' <' → logprob: -8.884591102600098
    8. ')' → logprob: -9.009591102600098
    9. '>=' → logprob: -9.134591102600098
    10. ' <=' → logprob: -9.134591102600098

Token 28: ' k' (ID: 372)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.5210051536560059
    2. 'k' → logprob: -1.0210051536560059
    3. ' int' → logprob: -4.146005153656006
    4. '2' → logprob: -4.271005153656006
    5. '1' → logprob: -4.896005153656006
    6. ' k' → logprob: -5.271005153656006
    7. 'math' → logprob: -6.771005153656006
    8. ' ' → logprob: -7.521005153656006
    9. '10' → logprob: -7.646005153656006
    10. ' math' → logprob: -8.021005630493164

Token 29: '**' (ID: 410)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.05046892166137695
    2. ' and' → logprob: -3.175468921661377
    3. 'and' → logprob: -5.050468921661377
    4. '*' → logprob: -7.925468921661377
    5. ':
' → logprob: -7.925468921661377
    6. ' :' → logprob: -9.550468444824219
    7. '*:' → logprob: -9.675468444824219
    8. ' *' → logprob: -10.175468444824219
    9. '   ' → logprob: -10.300468444824219
    10. ' ' → logprob: -10.925468444824219

Token 30: 'cnt' (ID: 33160)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.01212378777563572
    2. '3' → logprob: -5.2621235847473145
    3. 'cnt' → logprob: -5.3871235847473145
    4. '1' → logprob: -6.2621235847473145
    5. '0' → logprob: -9.387124061584473
    6. ' ' → logprob: -9.512124061584473
    7. 'k' → logprob: -9.887124061584473
    8. '4' → logprob: -10.137124061584473
    9. '5' → logprob: -10.137124061584473
    10. 'int' → logprob: -10.387124061584473

Token 31: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.010766588151454926
    2. ' :' → logprob: -5.510766506195068
    3. ' and' → logprob: -5.635766506195068
    4. '+' → logprob: -6.135766506195068
    5. '+:' → logprob: -7.260766506195068
    6. 'and' → logprob: -9.510766983032227
    7. ' ' → logprob: -10.135766983032227
    8. ' +' → logprob: -10.635766983032227
    9. '):' → logprob: -10.760766983032227
    10. ':
' → logprob: -11.010766983032227

Token 32: '       ' (ID: 309)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -1.0419694185256958
    2. '   ' → logprob: -1.5419694185256958
    3. '    ' → logprob: -2.0419692993164062
    4. '       ' → logprob: -2.1669692993164062
    5. ' ' → logprob: -2.2919692993164062
    6. '1' → logprob: -3.2919692993164062
    7. ':' → logprob: -3.9169692993164062
    8. ' :' → logprob: -4.791969299316406
    9. '  ' → logprob: -5.791969299316406
    10. '<|end|>' → logprob: -6.166969299316406

Token 33: ' cnt' (ID: 27340)
  Prédit: ' cnt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cnt' → logprob: -0.313018262386322
    2. 'cnt' (adapté à ' cnt') → logprob: -1.5630183219909668
    3. '1' → logprob: -3.813018321990967
    4. '       ' → logprob: -4.063018321990967
    5. ' ' → logprob: -4.938018321990967
    6. '   ' → logprob: -4.938018321990967
    7. '(cnt' → logprob: -6.313018321990967
    8. '[cnt' → logprob: -7.438018321990967
    9. '           ' → logprob: -7.563018321990967
    10. '    ' → logprob: -7.563018321990967

Token 34: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.10725456476211548
    2. ' +=' → logprob: -2.3572545051574707
    3. '+' → logprob: -4.982254505157471
    4. '=' → logprob: -8.982254981994629
    5. ' +' → logprob: -10.857254981994629
    6. '++' → logprob: -11.857254981994629
    7. ' =' → logprob: -11.857254981994629
    8. '+='' → logprob: -13.982254981994629
    9. ']+=' → logprob: -14.357254981994629
    10. '```' → logprob: -14.482254981994629

Token 35: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0009126556105911732
    2. ' ' → logprob: -7.000912666320801
    3. '   ' → logprob: -13.7509126663208
    4. '  ' → logprob: -17.250911712646484
    5. '+' → logprob: -17.500911712646484
    6. '<|end|>' → logprob: -18.000911712646484
    7. '0' → logprob: -18.125911712646484
    8. '    ' → logprob: -18.250911712646484
    9. '```' → logprob: -18.250911712646484
    10. '2' → logprob: -18.625911712646484

Token 36: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.860340752406046e-05
    2. ' ' → logprob: -9.7500581741333
    3. '   ' → logprob: -15.3750581741333
    4. '  ' → logprob: -17.250059127807617
    5. '```' → logprob: -17.625059127807617
    6. '+' → logprob: -18.000059127807617
    7. '0' → logprob: -19.125059127807617
    8. '2' → logprob: -19.375059127807617
    9. '    ' → logprob: -19.500059127807617
    10. '-' → logprob: -19.562559127807617

Token 37: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20280490815639496
    2. '<|end|>' → logprob: -2.4528048038482666
    3. '
' → logprob: -3.4528048038482666
    4. ' 
' → logprob: -4.077805042266846
    5. '    
' → logprob: -4.327805042266846
    6. ' ' → logprob: -4.827805042266846
    7. ')' → logprob: -4.827805042266846
    8. '<|end|>' → logprob: -5.202805042266846
    9. ' return' → logprob: -5.952805042266846
    10. '```' → logprob: -6.202805042266846

Token 38: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.17420150339603424
    2. ')' → logprob: -2.299201488494873
    3. ' ' → logprob: -3.674201488494873
    4. '<|end|>' → logprob: -4.049201488494873
    5. ' return' → logprob: -5.799201488494873
    6. ' 
' → logprob: -6.299201488494873
    7. '
' → logprob: -6.674201488494873
    8. '```' → logprob: -6.799201488494873
    9. '    ' → logprob: -6.924201488494873
    10. '    
' → logprob: -7.049201488494873

Token 39: ' return' (ID: 622)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.014677882194519
    2. '1' → logprob: -1.139677882194519
    3. '   ' → logprob: -2.2646780014038086
    4. ')' → logprob: -3.2646780014038086
    5. '```' → logprob: -3.3896780014038086
    6. '4' → logprob: -4.264678001403809
    7. '-' → logprob: -4.264678001403809
    8. ' 
' → logprob: -4.264678001403809
    9. ' return' → logprob: -4.264678001403809
    10. '    ' → logprob: -4.264678001403809

Token 40: ' cnt' (ID: 27340)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.9489756226539612
    2. ' cnt' → logprob: -1.0739755630493164
    3. 'cnt' → logprob: -2.0739755630493164
    4. 'k' → logprob: -2.1989755630493164
    5. ' int' → logprob: -4.698975563049316
    6. 'int' → logprob: -5.073975563049316
    7. ' math' → logprob: -5.073975563049316
    8. ' (' → logprob: -5.323975563049316
    9. '(cnt' → logprob: -5.823975563049316
    10. ' n' → logprob: -6.573975563049316

Token 41: '
' (ID: 198)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.9490653872489929
    2. '<|end|>' → logprob: -0.9490653872489929
    3. '<|end|>' → logprob: -3.4490654468536377
    4. '(' → logprob: -3.4490654468536377
    5. '
' → logprob: -3.5740654468536377
    6. ')' → logprob: -3.6990654468536377
    7. ' -' → logprob: -3.6990654468536377
    8. '```' → logprob: -4.199065208435059
    9. '   ' → logprob: -4.449065208435059
    10. 'def' → logprob: -4.449065208435059

Token 42: 'class' (ID: 1444)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '-' → logprob: -0.7891548871994019
    2. '(' → logprob: -0.9141548871994019
    3. '[' → logprob: -3.4141550064086914
    4. '+' → logprob: -3.5391550064086914
    5. '(n' → logprob: -3.9141550064086914
    6. ' -' → logprob: -4.289155006408691
    7. 'def' → logprob: -4.664155006408691
    8. ')' → logprob: -4.914155006408691
    9. '```' → logprob: -4.914155006408691
    10. ' ' → logprob: -5.539155006408691

Token 43: ' Calc' (ID: 78951)
  Prédit: ' Counter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' Counter' → logprob: -1.2590261697769165
    2. ' Factor' → logprob: -1.3840261697769165
    3. ' My' → logprob: -1.6340261697769165
    4. ' ' → logprob: -2.509026050567627
    5. ' Math' → logprob: -2.884026050567627
    6. ' Calculator' → logprob: -3.509026050567627
    7. ' A' → logprob: -3.634026050567627
    8. ' Solution' → logprob: -3.759026050567627
    9. ' Space' → logprob: -4.634026050567627
    10. ' Binary' → logprob: -4.884026050567627

Token 44: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.011167259886860847
    2. '():' → logprob: -6.011167049407959
    3. '{' → logprob: -6.136167049407959
    4. '(' → logprob: -6.511167049407959
    5. '):' → logprob: -6.761167049407959
    6. 'Calculator' → logprob: -7.261167049407959
    7. 'Base' → logprob: -8.136167526245117
    8. ':
' → logprob: -8.386167526245117
    9. '.' → logprob: -8.511167526245117
    10. 'Factor' → logprob: -8.636167526245117

Token 45: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2889716923236847
    2. ' def' → logprob: -1.4139716625213623
    3. 'def' → logprob: -5.538971900939941
    4. ':' → logprob: -6.913971900939941
    5. '    ' → logprob: -7.163971900939941
    6. '	def' → logprob: -7.413971900939941
    7. '    
' → logprob: -7.663971900939941
    8. '(n' → logprob: -8.038971900939941
    9. '<|end|>' → logprob: -9.163971900939941
    10. '```' → logprob: -9.288971900939941

Token 46: ' @' (ID: 759)
  Prédit: ' def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' def' → logprob: -0.01898263767361641
    2. 'def' → logprob: -4.143982410430908
    3. '   ' → logprob: -6.018982410430908
    4. '    ' → logprob: -8.643982887268066
    5. ' ' → logprob: -9.018982887268066
    6. ' __' → logprob: -9.768982887268066
    7. '_' → logprob: -10.393982887268066
    8. ' ' → logprob: -11.018982887268066
    9. ' 
' → logprob: -11.143982887268066
    10. 'n' → logprob: -11.268982887268066

Token 47: 'staticmethod' (ID: 53164)
  Prédit: 'staticmethod'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'staticmethod' → logprob: -0.04760167747735977
    2. 'property' → logprob: -3.4226016998291016
    3. 'classmethod' → logprob: -4.297601699829102
    4. 'static' → logprob: -8.547601699829102
    5. 'st' → logprob: -10.922601699829102
    6. 'dat' → logprob: -11.297601699829102
    7. 'sta' → logprob: -11.547601699829102
    8. 'l' → logprob: -11.922601699829102
    9. 'cache' → logprob: -12.047601699829102
    10. ' static' → logprob: -12.922601699829102

Token 48: '
' (ID: 198)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.4085954427719116
    2. '
' → logprob: -1.6585954427719116
    3. ' def' → logprob: -2.033595561981201
    4. '   ' → logprob: -4.533595561981201
    5. '    
' → logprob: -6.783595561981201
    6. '(' → logprob: -7.408595561981201
    7. '\' → logprob: -7.783595561981201
    8. '<|end|>' → logprob: -8.033595085144043
    9. '(def' → logprob: -8.908595085144043
    10. '```' → logprob: -9.283595085144043

Token 49: '   ' (ID: 271)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.029570773243904114
    2. ' def' → logprob: -4.029570579528809
    3. '
' → logprob: -4.654570579528809
    4. '   ' → logprob: -6.404570579528809
    5. '    
' → logprob: -8.904570579528809
    6. '	def' → logprob: -11.654570579528809
    7. '  
' → logprob: -11.779570579528809
    8. ' ' → logprob: -11.904570579528809
    9. '```' → logprob: -11.904570579528809
    10. '        
' → logprob: -12.404570579528809

Token 50: ' def' (ID: 1056)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' (adapté à ' def') → logprob: -0.0024768433067947626
    2. ' def' → logprob: -6.002476692199707
    3. '
' → logprob: -14.752476692199707
    4. '   ' → logprob: -15.002476692199707
    5. '```' → logprob: -15.002476692199707
    6. 'func' → logprob: -16.127477645874023
    7. 'pow' → logprob: -16.752477645874023
    8. '    
' → logprob: -17.627477645874023
    9. '	def' → logprob: -18.002477645874023
    10. 'math' → logprob: -18.127477645874023

Token 51: ' compute' (ID: 23864)
  Prédit: ' func'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' func' → logprob: -1.1238436698913574
    2. 'pow' → logprob: -1.1238436698913574
    3. 'func' → logprob: -1.6238436698913574
    4. ' pow' → logprob: -2.3738436698913574
    5. ' calc' → logprob: -4.623843669891357
    6. ' factorial' → logprob: -4.623843669891357
    7. 'calc' → logprob: -5.373843669891357
    8. ' power' → logprob: -5.373843669891357
    9. 'power' → logprob: -5.998843669891357
    10. ' max' → logprob: -5.998843669891357

Token 52: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5782410502433777
    2. '(n' → logprob: -0.8282410502433777
    3. ' (' → logprob: -6.953240871429443
    4. '(k' → logprob: -7.953240871429443
    5. '(N' → logprob: -8.453241348266602
    6. '()' → logprob: -8.703241348266602
    7. '(s' → logprob: -9.328241348266602
    8. '(x' → logprob: -9.828241348266602
    9. '(num' → logprob: -9.828241348266602
    10. '():' → logprob: -9.953241348266602

Token 53: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.002949770539999008
    2. ' ,' → logprob: -6.5029497146606445
    3. ',k' → logprob: -6.6279497146606445
    4. ',n' → logprob: -9.877949714660645
    5. '):' → logprob: -10.627949714660645
    6. '   ' → logprob: -11.127949714660645
    7. ')' → logprob: -11.377949714660645
    8. ',int' → logprob: -13.002949714660645
    9. ':' → logprob: -13.002949714660645
    10. ',K' → logprob: -13.127949714660645

Token 54: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.47430092096328735
    2. 'k' → logprob: -0.9743009209632874
    3. '2' → logprob: -9.7243013381958
    4. ' int' → logprob: -10.3493013381958
    5. 'int' → logprob: -10.4743013381958
    6. ' ' → logprob: -10.5993013381958
    7. ')' → logprob: -10.7243013381958
    8. ' n' → logprob: -10.8493013381958
    9. 'n' → logprob: -11.5993013381958
    10. ' ' → logprob: -12.0993013381958

Token 55: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0002765902318060398
    2. ')' → logprob: -8.875276565551758
    3. ',' → logprob: -10.125276565551758
    4. ':' → logprob: -10.250276565551758
    5. '   ' → logprob: -10.250276565551758
    6. ' ):' → logprob: -11.125276565551758
    7. '):
' → logprob: -12.125276565551758
    8. '=' → logprob: -13.500276565551758
    9. ' ' → logprob: -14.250276565551758
    10. '**' → logprob: -14.375276565551758

Token 56: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.023111071437597275
    2. ':' → logprob: -3.89811110496521
    3. '(' → logprob: -7.148110866546631
    4. '        ' → logprob: -7.773110866546631
    5. '    ' → logprob: -8.148111343383789
    6. ' :' → logprob: -8.398111343383789
    7. ' ' → logprob: -9.023111343383789
    8. ' (' → logprob: -9.398111343383789
    9. ',' → logprob: -9.523111343383789
    10. '\' → logprob: -9.773111343383789

Token 57: ' try' (ID: 2075)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -1.342255711555481
    2. 'return' → logprob: -1.967255711555481
    3. ' result' → logprob: -2.2172555923461914
    4. 'result' → logprob: -2.3422555923461914
    5. ' res' → logprob: -2.3422555923461914
    6. '       ' → logprob: -2.9672555923461914
    7. 'res' → logprob: -2.9672555923461914
    8. ' if' → logprob: -3.2172555923461914
    9. ' cnt' → logprob: -3.9672555923461914
    10. ' for' → logprob: -4.092255592346191

Token 58: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00018041854491457343
    2. ':
' → logprob: -8.7501802444458
    3. ' :' → logprob: -12.0001802444458
    4. ':return' → logprob: -12.2501802444458
    5. '<|end|>' → logprob: -12.3751802444458
    6. '):' → logprob: -13.5001802444458
    7. '       ' → logprob: -13.7501802444458
    8. '<|end|>' → logprob: -13.8751802444458
    9. '        ' → logprob: -14.2501802444458
    10. '```' → logprob: -15.0001802444458

Token 59: '           ' (ID: 352)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.604500949382782
    2. '           ' → logprob: -0.854500949382782
    3. ':
' → logprob: -4.604500770568848
    4. 'n' → logprob: -4.854500770568848
    5. ' n' → logprob: -6.354500770568848
    6. '<|end|>' → logprob: -6.354500770568848
    7. '            ' → logprob: -6.979500770568848
    8. 'k' → logprob: -7.104500770568848
    9. ' :' → logprob: -7.229500770568848
    10. ' return' → logprob: -7.354500770568848

Token 60: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.5812433958053589
    2. ' n' → logprob: -1.4562433958053589
    3. '           ' → logprob: -2.5812435150146484
    4. 'return' (adapté à ' return') → logprob: -3.7062435150146484
    5. 'n' → logprob: -3.8312435150146484
    6. '            ' → logprob: -3.8312435150146484
    7. ' k' → logprob: -3.9562435150146484
    8. '        ' → logprob: -4.206243515014648
    9. ' ' → logprob: -5.081243515014648
    10. ' int' → logprob: -5.331243515014648

Token 61: ' ' (ID: 220)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.40451911091804504
    2. ' int' → logprob: -1.1545190811157227
    3. ' max' → logprob: -5.029519081115723
    4. 'math' → logprob: -5.529519081115723
    5. ' pow' → logprob: -5.779519081115723
    6. 'int' → logprob: -6.154519081115723
    7. ' n' → logprob: -7.029519081115723
    8. ' k' → logprob: -8.154519081115723
    9. ' ' → logprob: -8.529519081115723
    10. 'pow' → logprob: -9.404519081115723

Token 62: '1' (ID: 16)
  Prédit: 'math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'math' → logprob: -0.5420928001403809
    2. 'int' → logprob: -1.0420928001403809
    3. ' math' → logprob: -3.917092800140381
    4. 'k' → logprob: -3.917092800140381
    5. 'func' → logprob: -4.042092800140381
    6. ' int' → logprob: -5.667092800140381
    7. 'pow' → logprob: -6.292092800140381
    8. 'n' → logprob: -7.417092800140381
    9. ' func' → logprob: -7.542092800140381
    10. 'max' → logprob: -7.917092800140381

Token 63: ' +' (ID: 659)
  Prédit: ' /'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' /' → logprob: -0.1341494768857956
    2. ' +' → logprob: -2.7591495513916016
    3. '/' → logprob: -3.2591495513916016
    4. '+' → logprob: -4.009149551391602
    5. '0' → logprob: -5.884149551391602
    6. '/(' → logprob: -6.759149551391602
    7. ' *' → logprob: -7.384149551391602
    8. ' ' → logprob: -8.384149551391602
    9. '*' → logprob: -8.884149551391602
    10. '        ' → logprob: -9.384149551391602

Token 64: ' int' (ID: 677)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.49776384234428406
    2. 'math' → logprob: -1.9977638721466064
    3. ' func' → logprob: -2.3727638721466064
    4. 'func' → logprob: -2.8727638721466064
    5. ' int' → logprob: -3.3727638721466064
    6. 'int' → logprob: -3.4977638721466064
    7. ' max' → logprob: -3.7477638721466064
    8. 'max' → logprob: -4.372763633728027
    9. ' k' → logprob: -6.372763633728027
    10. 'k' → logprob: -6.622763633728027

Token 65: '(math' (ID: 86464)
  Prédit: '(math'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(math' → logprob: -0.4868515133857727
    2. '(n' → logprob: -1.236851453781128
    3. '(' → logprob: -2.361851453781128
    4. '(k' → logprob: -7.611851692199707
    5. '((' → logprob: -8.236851692199707
    6. '(int' → logprob: -10.111851692199707
    7. '(N' → logprob: -10.861851692199707
    8. '(str' → logprob: -11.486851692199707
    9. '(pow' → logprob: -11.736851692199707
    10. 'math' → logprob: -11.736851692199707

Token 66: '.log' (ID: 2659)
  Prédit: '.log'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.log' → logprob: -0.0016096011968329549
    2. '.' → logprob: -6.751609802246094
    3. '.floor' → logprob: -8.251609802246094
    4. 'log' → logprob: -9.251609802246094
    5. '.ceil' → logprob: -9.626609802246094
    6. '"log' → logprob: -12.626609802246094
    7. '```' → logprob: -13.376609802246094
    8. '.com' → logprob: -13.376609802246094
    9. '.pow' → logprob: -13.626609802246094
    10. '.sqrt' → logprob: -13.626609802246094

Token 67: '(int' (ID: 2742)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.40891537070274353
    2. '(int' → logprob: -1.283915400505066
    3. '(' → logprob: -2.9089152812957764
    4. 'n' → logprob: -5.9089155197143555
    5. '(k' → logprob: -7.6589155197143555
    6. ' (' → logprob: -7.7839155197143555
    7. '(float' → logprob: -8.908915519714355
    8. ' n' → logprob: -9.283915519714355
    9. 'k' → logprob: -9.533915519714355
    10. 'int' → logprob: -9.783915519714355

Token 68: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.055164799094200134
    2. '(' → logprob: -2.9301648139953613
    3. 'n' → logprob: -8.430164337158203
    4. ' (' → logprob: -10.555164337158203
    5. ')' → logprob: -11.430164337158203
    6. '(
' → logprob: -12.055164337158203
    7. ')n' → logprob: -12.180164337158203
    8. '('' → logprob: -12.305164337158203
    9. ' n' → logprob: -12.305164337158203
    10. '(N' → logprob: -13.180164337158203

Token 69: '),' (ID: 936)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5893992781639099
    2. ',k' → logprob: -0.8393992781639099
    3. ')' → logprob: -4.714399337768555
    4. ' ,' → logprob: -6.464399337768555
    5. ')/' → logprob: -6.589399337768555
    6. '),' → logprob: -7.589399337768555
    7. '(k' → logprob: -7.839399337768555
    8. ',int' → logprob: -8.464399337768555
    9. '/k' → logprob: -8.964399337768555
    10. ',n' → logprob: -9.214399337768555

Token 70: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.7926496267318726
    2. 'int' → logprob: -1.1676496267318726
    3. ' k' → logprob: -1.9176496267318726
    4. 'k' → logprob: -2.417649745941162
    5. ')' → logprob: -10.042649269104004
    6. '(int' → logprob: -10.667649269104004
    7. ' )' → logprob: -11.042649269104004
    8. '=int' → logprob: -11.167649269104004
    9. 'float' → logprob: -11.417649269104004
    10. ' float' → logprob: -11.417649269104004

Token 71: '(k' (ID: 12125)
  Prédit: '(k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(k' → logprob: -0.0016007984522730112
    2. '(' → logprob: -6.501600742340088
    3. 'k' → logprob: -9.626601219177246
    4. ' (' → logprob: -10.626601219177246
    5. ' k' → logprob: -12.501601219177246
    6. ')' → logprob: -12.876601219177246
    7. '(n' → logprob: -13.501601219177246
    8. ' ' → logprob: -15.876601219177246
    9. '((' → logprob: -16.12660026550293
    10. ' )' → logprob: -16.37660026550293

Token 72: ')))
' (ID: 12562)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.018858760595321655
    2. ')))' → logprob: -4.018858909606934
    3. ')' → logprob: -7.268858909606934
    4. '))))' → logprob: -12.518858909606934
    5. ' ))' → logprob: -12.518858909606934
    6. '))
' → logprob: -12.768858909606934
    7. ' ' → logprob: -14.518858909606934
    8. '))

' → logprob: -15.518858909606934
    9. ')))
' → logprob: -15.893858909606934
    10. ')));' → logprob: -15.893858909606934

Token 73: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.012532840482890606
    2. 'except' → logprob: -5.012532711029053
    3. ' except' → logprob: -5.512532711029053
    4. ')' → logprob: -6.762532711029053
    5. '
' → logprob: -8.262533187866211
    6. '\n' → logprob: -9.387533187866211
    7. '	except' → logprob: -10.012533187866211
    8. '        
' → logprob: -10.012533187866211
    9. ')
' → logprob: -10.262533187866211
    10. '<|end|>' → logprob: -10.387533187866211

Token 74: ' except' (ID: 6384)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.1286323517560959
    2. ' except' → logprob: -2.5036323070526123
    3. 'except' (adapté à ' except') → logprob: -3.2536323070526123
    4. '	except' → logprob: -8.378632545471191
    5. '   ' → logprob: -11.003632545471191
    6. ')' → logprob: -11.503632545471191
    7. ',' → logprob: -11.753632545471191
    8. ' ' → logprob: -12.503632545471191
    9. '           ' → logprob: -13.253632545471191
    10. ' return' → logprob: -13.503632545471191

Token 75: ':
' (ID: 734)
  Prédit: ' Value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' Value' → logprob: -0.1589101105928421
    2. '(Value' → logprob: -2.033910036087036
    3. 'Value' → logprob: -4.908910274505615
    4. ' Zero' → logprob: -5.033910274505615
    5. '(' → logprob: -6.783910274505615
    6. ' (' → logprob: -7.158910274505615
    7. 'Zero' → logprob: -8.658909797668457
    8. '	Value' → logprob: -10.408909797668457
    9. ' Exception' → logprob: -10.533909797668457
    10. '(value' → logprob: -10.908909797668457

Token 76: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.05670901760458946
    2. ' return' → logprob: -3.681709051132202
    3. '0' → logprob: -4.056708812713623
    4. ' ' → logprob: -5.181708812713623
    5. 'return' → logprob: -5.181708812713623
    6. ':return' → logprob: -7.306708812713623
    7. ':' → logprob: -8.681709289550781
    8. '	       ' → logprob: -8.806709289550781
    9. '1' → logprob: -9.181709289550781
    10. '       ' → logprob: -9.931709289550781

Token 77: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.11841657757759094
    2. ' return' → logprob: -2.3684165477752686
    3. '0' → logprob: -4.368416786193848
    4. '           ' → logprob: -5.368416786193848
    5. '1' → logprob: -7.743416786193848
    6. ':return' → logprob: -8.743416786193848
    7. ' ' → logprob: -10.118416786193848
    8. '	return' → logprob: -11.743416786193848
    9. '{return' → logprob: -11.743416786193848
    10. 'eturn' → logprob: -11.743416786193848

Token 78: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.10820876806974411
    2. ' ' → logprob: -2.483208656311035
    3. '1' → logprob: -3.983208656311035
    4. 'func' → logprob: -9.608208656311035
    5. '-' → logprob: -9.733208656311035
    6. 'None' → logprob: -10.108208656311035
    7. '  ' → logprob: -10.295708656311035
    8. 'int' → logprob: -10.608208656311035
    9. ' -' → logprob: -10.608208656311035
    10. '   ' → logprob: -10.795708656311035

Token 79: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.027274610474705696
    2. '1' → logprob: -3.9022746086120605
    3. ' ' → logprob: -5.9022746086120605
    4. '-' → logprob: -6.2772746086120605
    5. 'func' → logprob: -7.1522746086120605
    6. '"' → logprob: -7.9022746086120605
    7. 'int' → logprob: -8.652275085449219
    8. ''' → logprob: -8.777275085449219
    9. 'None' → logprob: -9.152275085449219
    10. 'float' → logprob: -9.527275085449219

Token 80: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 81: 'if' (ID: 366)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.1857373714447021
    2. 'N' → logprob: -1.8107373714447021
    3. '<|end|>' → logprob: -2.060737371444702
    4. 'print' → logprob: -2.185737371444702
    5. '
' → logprob: -2.935737371444702
    6. 'def' → logprob: -3.185737371444702
    7. '#' → logprob: -3.560737371444702
    8. '    
' → logprob: -3.810737371444702
    9. '```' → logprob: -4.310737609863281
    10. ')' → logprob: -4.310737609863281

Token 82: ' True' (ID: 6432)
  Prédit: ' __'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.0038862961810082197
    2. '__' → logprob: -6.1288862228393555
    3. ' len' → logprob: -6.7538862228393555
    4. ' N' → logprob: -8.128886222839355
    5. ' ' → logprob: -8.628886222839355
    6. ' ' → logprob: -10.628886222839355
    7. ' '' → logprob: -11.628886222839355
    8. ' "' → logprob: -11.878886222839355
    9. ' _' → logprob: -12.253886222839355
    10. '_' → logprob: -12.378886222839355

Token 83: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0008130819769576192
    2. ' :' → logprob: -7.125813007354736
    3. ':
' → logprob: -12.750813484191895
    4. ':**' → logprob: -12.875813484191895
    5. '():' → logprob: -14.125813484191895
    6. ',' → logprob: -15.250813484191895
    7. '):' → logprob: -15.500813484191895
    8. ':def' → logprob: -15.625813484191895
    9. ':return' → logprob: -15.625813484191895
    10. ',:' → logprob: -15.750813484191895

Token 84: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.020989084616303444
    2. '    ' → logprob: -4.520988941192627
    3. ':' → logprob: -5.520988941192627
    4. '    
' → logprob: -5.770988941192627
    5. 'print' → logprob: -7.395988941192627
    6. '[' → logprob: -7.645988941192627
    7. ' print' → logprob: -7.770988941192627
    8. 'n' → logprob: -8.645989418029785
    9. '(n' → logprob: -9.270989418029785
    10. '     
' → logprob: -9.270989418029785

Token 85: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.3806594908237457
    2. ' print' → logprob: -1.3806594610214233
    3. ' result' → logprob: -3.630659580230713
    4. ' for' → logprob: -4.755659580230713
    5. 'n' (adapté à ' n') → logprob: -5.005659580230713
    6. '    ' → logprob: -5.130659580230713
    7. 'print' → logprob: -5.755659580230713
    8. ' res' → logprob: -6.005659580230713
    9. ' ' → logprob: -6.380659580230713
    10. 'result' → logprob: -6.505659580230713

Token 86: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.18537543714046478
    2. '_' → logprob: -2.435375452041626
    3. ' ,' → logprob: -3.185375452041626
    4. ' ' → logprob: -4.310375213623047
    5. ' =' → logprob: -4.560375213623047
    6. ',_' → logprob: -5.185375213623047
    7. ',K' → logprob: -5.935375213623047
    8. '_,' → logprob: -6.060375213623047
    9. '_K' → logprob: -6.185375213623047
    10. ' _' → logprob: -6.185375213623047

Token 87: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.10099629312753677
    2. 'k' → logprob: -2.350996255874634
    3. ' ' → logprob: -7.850996494293213
    4. '<|end|>' → logprob: -7.975996494293213
    5. '_k' → logprob: -11.225996017456055
    6. ' K' → logprob: -11.725996017456055
    7. '_' → logprob: -11.975996017456055
    8. '  ' → logprob: -12.225996017456055
    9. ' ' → logprob: -12.475996017456055
    10. '	k' → logprob: -12.600996017456055

Token 88: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.25196781754493713
    2. '=' → logprob: -1.5019677877426147
    3. ',' → logprob: -10.376967430114746
    4. '<|end|>' → logprob: -12.626967430114746
    5. ')' → logprob: -13.626967430114746
    6. ' ' → logprob: -14.126967430114746
    7. ' =)' → logprob: -15.126967430114746
    8. '=n' → logprob: -15.376967430114746
    9. ' =
' → logprob: -15.376967430114746
    10. '=input' → logprob: -15.876967430114746

Token 89: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.3456401526927948
    2. ' N' → logprob: -1.5956401824951172
    3. 'map' → logprob: -2.845640182495117
    4. ' map' → logprob: -3.595640182495117
    5. 'int' → logprob: -6.595640182495117
    6. '[' → logprob: -6.970640182495117
    7. ' ' → logprob: -7.470640182495117
    8. ' [' → logprob: -8.470640182495117
    9. '[N' → logprob: -8.470640182495117
    10. 'input' → logprob: -8.595640182495117

Token 90: '_K' (ID: 20555)
  Prédit: '_K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_K' → logprob: -0.04419460892677307
    2. '_' → logprob: -3.2941946983337402
    3. '[' → logprob: -5.29419469833374
    4. ' _' → logprob: -7.54419469833374
    5. '_[' → logprob: -8.544194221496582
    6. '_S' → logprob: -9.794194221496582
    7. ' ' → logprob: -10.044194221496582
    8. ')' → logprob: -10.169194221496582
    9. '[_' → logprob: -10.169194221496582
    10. '__' → logprob: -10.294194221496582

Token 91: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.05729905143380165
    2. '<|end|>' → logprob: -2.9322991371154785
    3. '<|end|>' → logprob: -7.0572991371154785
    4. '[int' → logprob: -7.9322991371154785
    5. 'split' → logprob: -8.68229866027832
    6. ' ' → logprob: -8.93229866027832
    7. '.split' → logprob: -8.93229866027832
    8. '0' → logprob: -9.05729866027832
    9. '
' → logprob: -9.30729866027832
    10. ')' → logprob: -10.18229866027832

Token 92: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -4.11996734328568e-05
    2. ' ' → logprob: -10.125041007995605
    3. '1' → logprob: -14.125041007995605
    4. '2' → logprob: -16.125041961669922
    5. '   ' → logprob: -16.625041961669922
    6. ']' → logprob: -16.937541961669922
    7. '00' → logprob: -17.000041961669922
    8. '  ' → logprob: -17.625041961669922
    9. '۰' → logprob: -17.625041961669922
    10. '-' → logprob: -18.187541961669922

Token 93: '],' (ID: 2155)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.6932365894317627
    2. '],' → logprob: -0.6932365894317627
    3. ' ],' → logprob: -10.193236351013184
    4. ' ]' → logprob: -10.443236351013184
    5. ',' → logprob: -11.693236351013184
    6. '].' → logprob: -12.568236351013184
    7. '],
' → logprob: -13.068236351013184
    8. '],[' → logprob: -13.193236351013184
    9. ']
' → logprob: -13.568236351013184
    10. ':' → logprob: -13.693236351013184

Token 94: ' int' (ID: 677)
  Prédit: ' N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.189398393034935
    2. 'N' → logprob: -1.8143984079360962
    3. ''' → logprob: -4.814398288726807
    4. '"' → logprob: -7.439398288726807
    5. ' ' → logprob: -7.564398288726807
    6. ' '' → logprob: -8.314398765563965
    7. ''N' → logprob: -9.814398765563965
    8. '<|end|>' → logprob: -10.814398765563965
    9. ' "' → logprob: -10.939398765563965
    10. ' ' → logprob: -11.189398765563965

Token 95: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.07000511884689331
    2. '(' → logprob: -2.695005178451538
    3. ' (' → logprob: -10.820005416870117
    4. '()' → logprob: -10.820005416870117
    5. '('' → logprob: -11.195005416870117
    6. '(n' → logprob: -11.570005416870117
    7. '(
' → logprob: -13.695005416870117
    8. 'N' → logprob: -13.945005416870117
    9. '("' → logprob: -14.070005416870117
    10. '(

' → logprob: -14.070005416870117

Token 96: '_K' (ID: 20555)
  Prédit: '_K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_K' → logprob: -0.00044175516813993454
    2. 'K' → logprob: -8.250441551208496
    3. '_N' → logprob: -9.750441551208496
    4. '(K' → logprob: -10.000441551208496
    5. '(' → logprob: -10.500441551208496
    6. '[' → logprob: -11.125441551208496
    7. '[K' → logprob: -11.875441551208496
    8. ')' → logprob: -12.000441551208496
    9. ')_' → logprob: -12.500441551208496
    10. '(_' → logprob: -12.500441551208496

Token 97: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -2.4272752852994017e-05
    2. ' [' → logprob: -10.87502384185791
    3. ']' → logprob: -13.75002384185791
    4. '1' → logprob: -13.75002384185791
    5. '```' → logprob: -13.87502384185791
    6. '][' → logprob: -14.37502384185791
    7. '   ' → logprob: -14.37502384185791
    8. '(' → logprob: -14.62502384185791
    9. '	' → logprob: -15.62502384185791
    10. '[
' → logprob: -15.87502384185791

Token 98: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00027063372544944286
    2. '0' → logprob: -8.50027084350586
    3. ' ' → logprob: -9.75027084350586
    4. '   ' → logprob: -12.75027084350586
    5. '])' → logprob: -13.37527084350586
    6. '-' → logprob: -13.62527084350586
    7. '```' → logprob: -14.00027084350586
    8. '[' → logprob: -14.50027084350586
    9. ']' → logprob: -14.50027084350586
    10. '``' → logprob: -15.12527084350586

Token 99: '])
' (ID: 5169)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -8.41866585687967e-06
    2. ')
' → logprob: -12.750008583068848
    3. '))' → logprob: -13.500008583068848
    4. ' )' → logprob: -13.625008583068848
    5. '])' → logprob: -13.750008583068848
    6. ')]' → logprob: -14.875008583068848
    7. ')])' → logprob: -15.000008583068848
    8. '）' → logprob: -15.625008583068848
    9. '),' → logprob: -16.00000762939453
    10. ')}' → logprob: -16.00000762939453

Token 100: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0962076261639595
    2. '
' → logprob: -2.971207618713379
    3. '   ' → logprob: -3.721207618713379
    4. 'result' → logprob: -4.221207618713379
    5. '    
' → logprob: -7.221207618713379
    6. ' print' → logprob: -7.721207618713379
    7. 'n' → logprob: -9.971207618713379
    8. ' 
' → logprob: -10.096207618713379
    9. 'res' → logprob: -10.346207618713379
    10. 'for' → logprob: -10.346207618713379

Token 101: ' if' (ID: 538)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.006112939678132534
    2. 'result' → logprob: -5.881113052368164
    3. ' print' → logprob: -6.131113052368164
    4. 'p' → logprob: -8.256113052368164
    5. 'res' → logprob: -8.256113052368164
    6. 'for' → logprob: -8.506113052368164
    7. 'if' (adapté à ' if') → logprob: -9.006113052368164
    8. 'cnt' → logprob: -10.006113052368164
    9. 'count' → logprob: -10.631113052368164
    10. 'ans' → logprob: -10.631113052368164

Token 102: ' hasattr' (ID: 75562)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.026018798351287842
    2. ' int' → logprob: -4.5260186195373535
    3. ' k' → logprob: -5.0260186195373535
    4. ' ' → logprob: -5.5260186195373535
    5. ' len' → logprob: -6.5260186195373535
    6. 'n' → logprob: -7.0260186195373535
    7. ' math' → logprob: -7.4010186195373535
    8. ' not' → logprob: -7.9010186195373535
    9. ' ' → logprob: -8.026019096374512
    10. ' isinstance' → logprob: -8.026019096374512

Token 103: '(math' (ID: 86464)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.005342855118215084
    2. '(' → logprob: -5.255342960357666
    3. ' (' → logprob: -10.005342483520508
    4. '(N' → logprob: -10.880342483520508
    5. '(C' → logprob: -11.755342483520508
    6. '(object' → logprob: -11.755342483520508
    7. '(func' → logprob: -12.005342483520508
    8. '(
' → logprob: -12.130342483520508
    9. '(s' → logprob: -12.380342483520508
    10. '(calc' → logprob: -12.630342483520508

Token 104: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.008886485360562801
    2. ' ,' → logprob: -4.758886337280273
    3. ',module' → logprob: -9.258886337280273
    4. ',n' → logprob: -10.133886337280273
    5. ',k' → logprob: -10.258886337280273
    6. '(' → logprob: -10.383886337280273
    7. ',m' → logprob: -11.633886337280273
    8. ',
' → logprob: -12.133886337280273
    9. ',s' → logprob: -12.258886337280273
    10. ',(' → logprob: -12.383886337280273

Token 105: ' "' (ID: 392)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.11389824748039246
    2. '"log' → logprob: -2.488898277282715
    3. '"' → logprob: -3.988898277282715
    4. ''s' → logprob: -5.738898277282715
    5. ' '' → logprob: -7.113898277282715
    6. ''n' → logprob: -7.238898277282715
    7. ''f' → logprob: -7.988898277282715
    8. ''m' → logprob: -8.113898277282715
    9. ''d' → logprob: -9.488898277282715
    10. '   ' → logprob: -9.738898277282715

Token 106: 'log' (ID: 2133)
  Prédit: 'log'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'log' → logprob: -0.009658334776759148
    2. '"log' → logprob: -5.259658336639404
    3. 'pow' → logprob: -6.009658336639404
    4. 'lg' → logprob: -7.259658336639404
    5. 'factor' → logprob: -7.759658336639404
    6. 'is' → logprob: -8.134657859802246
    7. 'ilog' → logprob: -8.759657859802246
    8. 'floor' → logprob: -9.384657859802246
    9. 'ceil' → logprob: -10.009657859802246
    10. 'fre' → logprob: -10.134657859802246

Token 107: '"):
' (ID: 33645)
  Prédit: '"):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"):' → logprob: -0.24334879219532013
    2. '):' → logprob: -2.3683488368988037
    3. '")' → logprob: -3.2433488368988037
    4. ')' → logprob: -3.7433488368988037
    5. '_' → logprob: -4.243348598480225
    6. '2' → logprob: -4.743348598480225
    7. ' "' → logprob: -4.868348598480225
    8. ' ):' → logprob: -4.993348598480225
    9. '"):
' → logprob: -5.243348598480225
    10. '("' → logprob: -5.618348598480225

Token 108: '       ' (ID: 309)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.4565083682537079
    2. '       ' → logprob: -1.2065083980560303
    3. ':
' → logprob: -2.8315083980560303
    4. ' and' → logprob: -6.206508159637451
    5. '():' → logprob: -6.206508159637451
    6. '():
' → logprob: -6.331508159637451
    7. '):' → logprob: -7.081508159637451
    8. '):
' → logprob: -7.581508159637451
    9. ' :' → logprob: -8.45650863647461
    10. '        
' → logprob: -9.20650863647461

Token 109: ' print' (ID: 2123)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.020569220185279846
    2. ' print' → logprob: -4.270569324493408
    3. 'print' (adapté à ' print') → logprob: -5.520569324493408
    4. '   ' → logprob: -6.395569324493408
    5. ' result' → logprob: -8.02056884765625
    6. '
' → logprob: -9.27056884765625
    7. 'result' → logprob: -9.52056884765625
    8. ':' → logprob: -10.39556884765625
    9. '        
' → logprob: -10.39556884765625
    10. ':
' → logprob: -10.64556884765625

Token 110: '(C' (ID: 5559)
  Prédit: '(C'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(C' → logprob: -0.3555082082748413
    2. '(' → logprob: -1.2305082082748413
    3. '(func' → logprob: -5.855508327484131
    4. '(calc' → logprob: -6.105508327484131
    5. '("' → logprob: -6.980508327484131
    6. '(Func' → logprob: -7.730508327484131
    7. '('' → logprob: -8.230507850646973
    8. '(math' → logprob: -9.480507850646973
    9. '(f' → logprob: -9.730507850646973
    10. '()' → logprob: -9.730507850646973

Token 111: 'alc' (ID: 27187)
  Prédit: 'alc'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'alc' → logprob: -2.2200749754119897e-06
    2. 'al' → logprob: -13.375001907348633
    3. 'calc' → logprob: -14.375001907348633
    4. 'Calc' → logprob: -16.500001907348633
    5. 'alk' → logprob: -18.000001907348633
    6. 'alg' → logprob: -19.375001907348633
    7. '   ' → logprob: -19.750001907348633
    8. 'a' → logprob: -20.375001907348633
    9. 'l' → logprob: -20.625001907348633
    10. 'alculate' → logprob: -21.125001907348633

Token 112: '.compute' (ID: 60156)
  Prédit: '.compute'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.compute' → logprob: -0.0038180106785148382
    2. '.' → logprob: -5.628818035125732
    3. ' .' → logprob: -8.878817558288574
    4. '.calculate' → logprob: -10.003817558288574
    5. ').' → logprob: -10.503817558288574
    6. ')' → logprob: -13.628817558288574
    7. ' ' → logprob: -14.128817558288574
    8. '   ' → logprob: -14.128817558288574
    9. '​.' → logprob: -14.378817558288574
    10. '".' → logprob: -15.503817558288574

Token 113: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.013336347416043282
    2. '(' → logprob: -4.388336181640625
    3. ' (' → logprob: -7.138336181640625
    4. ')' → logprob: -10.888336181640625
    5. '(
' → logprob: -11.513336181640625
    6. ')(' → logprob: -13.013336181640625
    7. '(

' → logprob: -15.263336181640625
    8. '(N' → logprob: -15.513336181640625
    9. ' )' → logprob: -15.888336181640625
    10. '((' → logprob: -15.888336181640625

Token 114: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00327729107812047
    2. ',k' → logprob: -5.75327730178833
    3. ' ,' → logprob: -9.253276824951172
    4. ',n' → logprob: -12.878276824951172
    5. ' ' → logprob: -15.253276824951172
    6. 'k' → logprob: -15.378276824951172
    7. '‌,' → logprob: -15.753276824951172
    8. '   ' → logprob: -16.003276824951172
    9. ' k' → logprob: -16.128276824951172
    10. ',
' → logprob: -16.253276824951172

Token 115: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.038354385644197464
    2. 'k' → logprob: -3.2883543968200684
    3. ' ' → logprob: -8.28835391998291
    4. ')' → logprob: -10.53835391998291
    5. '"' → logprob: -11.66335391998291
    6. ' n' → logprob: -11.91335391998291
    7. ' ' → logprob: -12.16335391998291
    8. ' )' → logprob: -12.28835391998291
    9. ' 
' → logprob: -12.53835391998291
    10. 'n' → logprob: -13.66335391998291

Token 116: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.038051363080739975
    2. ')' → logprob: -3.2880513668060303
    3. ')))' → logprob: -12.03805160522461
    4. '))
' → logprob: -12.78805160522461
    5. ' ))' → logprob: -14.28805160522461
    6. ')
' → logprob: -15.41305160522461
    7. '),' → logprob: -15.66305160522461
    8. ' )' → logprob: -16.28805160522461
    9. '   ' → logprob: -16.66305160522461
    10. ')}' → logprob: -17.03805160522461

Token 117: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 118: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.1967775821685791
    2. '   ' → logprob: -2.196777582168579
    3. ' else' → logprob: -2.696777582168579
    4. 'elif' → logprob: -10.69677734375
    5. '	else' → logprob: -11.44677734375
    6. ' ' → logprob: -12.57177734375
    7. '  ' → logprob: -13.44677734375
    8. '    ' → logprob: -13.82177734375
    9. ' elif' → logprob: -14.32177734375
    10. '<|end|>' → logprob: -14.69677734375

Token 119: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.18024815618991852
    2. ':
' → logprob: -1.8052481412887573
    3. '       ' → logprob: -7.680248260498047
    4. '   ' → logprob: -11.430248260498047
    5. '<|end|>' → logprob: -11.430248260498047
    6. ':

' → logprob: -12.305248260498047
    7. ' :
' → logprob: -12.555248260498047
    8. '    ' → logprob: -12.930248260498047
    9. '
' → logprob: -13.680248260498047
    10. '```' → logprob: -13.680248260498047

Token 120: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.05363773927092552
    2. 'print' → logprob: -3.053637742996216
    3. ' print' → logprob: -5.303637504577637
    4. '   ' → logprob: -9.803637504577637
    5. '```' → logprob: -12.678637504577637
    6. '	print' → logprob: -13.178637504577637
    7. '           ' → logprob: -13.303637504577637
    8. '        
' → logprob: -14.678637504577637
    9. '     ' → logprob: -15.053637504577637
    10. '(print' → logprob: -15.178637504577637

Token 121: ' result' (ID: 1534)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.007654900196939707
    2. ' print' → logprob: -4.882654666900635
    3. '       ' → logprob: -10.132655143737793
    4. '   ' → logprob: -12.382655143737793
    5. '	print' → logprob: -12.507655143737793
    6. ' ' → logprob: -14.882655143737793
    7. '    ' → logprob: -16.257654190063477
    8. '.print' → logprob: -16.257654190063477
    9. 'func' → logprob: -16.382654190063477
    10. '        ' → logprob: -16.382654190063477

Token 122: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4756944477558136
    2. '=' → logprob: -0.9756944179534912
    3. '(' → logprob: -6.85069465637207
    4. '()' → logprob: -7.97569465637207
    5. ')' → logprob: -9.35069465637207
    6. ' ' → logprob: -10.22569465637207
    7. ',' → logprob: -10.47569465637207
    8. ' +=' → logprob: -10.85069465637207
    9. 'print' → logprob: -11.35069465637207
    10. ':' → logprob: -12.35069465637207

Token 123: ' func' (ID: 4660)
  Prédit: 'func'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'func' → logprob: -0.12693819403648376
    2. ' func' → logprob: -2.1269381046295166
    3. '(func' → logprob: -13.126937866210938
    4. '	func' → logprob: -13.126937866210938
    5. '   ' → logprob: -13.251937866210938
    6. 'str' → logprob: -13.376937866210938
    7. 'fun' → logprob: -13.876937866210938
    8. ' str' → logprob: -14.751937866210938
    9. ' ' → logprob: -14.751937866210938
    10. 'print' → logprob: -14.751937866210938

Token 124: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -8.537868779967539e-06
    2. '(' → logprob: -11.750008583068848
    3. ' (' → logprob: -14.500008583068848
    4. '(int' → logprob: -17.00000762939453
    5. '(
' → logprob: -17.75000762939453
    6. '(N' → logprob: -18.62500762939453
    7. '(k' → logprob: -19.25000762939453
    8. '((' → logprob: -19.37500762939453
    9. '(number' → logprob: -19.75000762939453
    10. ')(' → logprob: -19.75000762939453

Token 125: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0019073354778811336
    2. ',k' → logprob: -6.7519073486328125
    3. ' ,' → logprob: -7.3769073486328125
    4. '(' → logprob: -10.001907348632812
    5. '(k' → logprob: -10.126907348632812
    6. ')' → logprob: -11.626907348632812
    7. '(n' → logprob: -11.751907348632812
    8. ',n' → logprob: -12.376907348632812
    9. 'k' → logprob: -13.251907348632812
    10. '),' → logprob: -14.001907348632812

Token 126: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.054888151586055756
    2. ' k' → logprob: -2.9298882484436035
    3. 'int' → logprob: -13.054887771606445
    4. ' ' → logprob: -13.929887771606445
    5. '	k' → logprob: -13.929887771606445
    6. ' ' → logprob: -14.054887771606445
    7. '   ' → logprob: -14.554887771606445
    8. ' int' → logprob: -16.304887771606445
    9. '    ' → logprob: -16.304887771606445
    10. ')' → logprob: -16.429887771606445

Token 127: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5760894417762756
    2. ')
' → logprob: -0.8260894417762756
    3. ')
' → logprob: -9.201089859008789
    4. '   ' → logprob: -10.826089859008789
    5. ' )
' → logprob: -11.826089859008789
    6. ' )' → logprob: -12.201089859008789
    7. ')

' → logprob: -12.326089859008789
    8. '))' → logprob: -12.826089859008789
    9. ')`
' → logprob: -13.451089859008789
    10. ')+' → logprob: -13.576089859008789

Token 128: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.09323081374168396
    2. 'print' → logprob: -2.593230724334717
    3. '
' → logprob: -4.343230724334717
    4. '   ' → logprob: -7.593230724334717
    5. ' print' → logprob: -7.968230724334717
    6. '<|end|>' → logprob: -8.218231201171875
    7. '\n' → logprob: -11.093231201171875
    8. '[' → logprob: -11.343231201171875
    9. '        
' → logprob: -11.593231201171875
    10. '
' → logprob: -11.593231201171875

Token 129: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0009244420798495412
    2. ' print' → logprob: -7.000924587249756
    3. '       ' → logprob: -11.750924110412598
    4. '   ' → logprob: -12.250924110412598
    5. 'pr' → logprob: -16.875925064086914
    6. ' ' → logprob: -17.000925064086914
    7. 'result' → logprob: -17.250925064086914
    8. '    ' → logprob: -17.250925064086914
    9. '	print' → logprob: -17.375925064086914
    10. '  ' → logprob: -17.500925064086914

Token 130: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.0011723674833774567
    2. '(' → logprob: -6.7511725425720215
    3. 'result' → logprob: -13.501172065734863
    4. ' (' → logprob: -15.251172065734863
    5. '()' → logprob: -15.876172065734863
    6. '(results' → logprob: -16.12617301940918
    7. '((' → logprob: -16.25117301940918
    8. '(f' → logprob: -16.75117301940918
    9. '(res' → logprob: -16.87617301940918
    10. '('' → logprob: -16.87617301940918

Token 131: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.2729995988775045e-06
    2. '))' → logprob: -12.375006675720215
    3. ' )' → logprob: -13.625006675720215
    4. '   ' → logprob: -15.250006675720215
    5. ')
' → logprob: -15.250006675720215
    6. '())' → logprob: -16.3750057220459
    7. ')))' → logprob: -17.0000057220459
    8. ')}' → logprob: -17.3750057220459
    9. ')#' → logprob: -17.6250057220459
    10. '`)' → logprob: -17.7500057220459


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 129
Tokens correctement prédits (1ère position, stricte): 49
Tokens correctement prédits (1ère position, avec adaptation): 53
Tokens correctement prédits (top 10): 101
Précision stricte (1ère position): 37.98%
Précision adaptée (1ère position): 41.09%
Précision (top 10): 78.29%
================================================================================
