================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:39:40
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
# --*-coding:utf-8-*--

def main():
    """
    Résout le problème selon la logique suivante :
    1. Lit les entrées : taille du tableau N, et deux tableaux d'entiers A et B.
    2. Teste si, pour les tableaux triés, tous les éléments de A sont inférieurs ou égaux à ceux de B.
    3. Si la condition précédente passe, teste s'il existe un décalage permettant à tous les A d'être plus petits ou égaux à B (décalé d'une position).
    4. Si aucune condition précédente ne passe, effectue une vérification cyclique sur un réarrangement complexe pour déterminer si une permutation particulière permet d'établir la contrainte imposée.
    Renvoie 'Yes' ou 'No' selon la solution trouvée.
    """
    # Lecture de la taille du tableau
    N = int(input())
    # Lecture et conversion du tableau A en entiers
    A = list(map(int, input().split()))
    # Lecture et conversion du tableau B en entiers
    B = list(map(int, input().split()))

    # Tri croissant des deux tableaux pour simplifier les comparaisons
    A2 = sorted(A)
    B2 = sorted(B)
    
    # Première condition :
    # Pour chaque indice, vérifie si l'élément correspondant de A2 est supérieur à B2
    # Si oui, il n'est pas possible de satisfaire la condition demandée
    for i in range(N):
        if A2[i] > B2[i]:
            print('No')
            return

    # Deuxième condition :
    # Vérifie si pour un décalage, chaque élément de A2 est inférieur ou égal au précédent élément de B2
    # Ceci pourrait permettre un permutation ou une rotation avantageuse
    for i in range(1, N):
        if A2[i] <= B2[i-1]:
            print('Yes')
            return

    # Si les deux vérifications précédentes n'ont rien donné,
    # on effectue une analyse plus approfondie basée sur les indices des éléments des tableaux triés
    # On crée une liste B3 où on génère des couples (indice initial, valeur de B trié, indice trié)
    B3 = sorted(
        map(
            lambda x: (x[1][1], x[0]),
            enumerate(
                sorted(
                    map(lambda x: (x[1], x[0]), enumerate(B))
                )
            )
        )
    )

    # On crée une nouvelle liste C qui va servir pour la vérification cyclique suivante
    # Elle contient l'indice trié du tableau B pour chaque élément de A
    # On utilise zip pour associer chaque valeur de A avec l'élément correspondant dans B3
    # On trie ces couples selon les valeurs de A, puis on extrait le second indice de B
    C = list(map(lambda x: x[1][1], sorted(zip(A, B3))))

    # Vérification cyclique pour détecter une éventuelle permutation circulaire satisfaisante
    p = 0
    for i in range(N-1):
        p = C[p]
        if p == 0:
            print('Yes')
            return

    # Si aucune des conditions n'est remplie, on affiche 'No'
    print('No')


if __name__ == '__main__':
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '#' (ID: 2)
  → Token d'amorce (pas de prédiction)

Token 1: ' --' (ID: 2230)
  → Token d'amorce (pas de prédiction)

Token 2: '*-' (ID: 91119)
  → Token d'amorce (pas de prédiction)

Token 3: 'coding' (ID: 107758)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '-' → logprob: -1.0473387241363525
    2. ' ' → logprob: -1.4223387241363525
    3. ' -*-' → logprob: -1.9223387241363525
    4. '#' → logprob: -2.0473387241363525
    5. '>' → logprob: -3.0473387241363525
    6. '*' → logprob: -3.0473387241363525
    7. '```' → logprob: -4.422338485717773
    8. '@' → logprob: -5.297338485717773
    9. 'python' → logprob: -5.547338485717773
    10. '*-' → logprob: -5.672338485717773

Token 4: ':utf' (ID: 159496)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.7021398544311523
    2. ':' → logprob: -0.8271398544311523
    3. '=utf' → logprob: -3.4521398544311523
    4. ':utf' → logprob: -3.9521398544311523
    5. '=:' → logprob: -4.327139854431152
    6. '=UTF' → logprob: -5.952139854431152
    7. ':=' → logprob: -8.202139854431152
    8. 'utf' → logprob: -9.327139854431152
    9. '=u' → logprob: -10.452139854431152
    10. ':u' → logprob: -11.077139854431152

Token 5: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.0005477914237417281
    2. '8' → logprob: -7.750547885894775
    3. 'b' → logprob: -9.500547409057617
    4. '-b' → logprob: -11.125547409057617
    5. '=' → logprob: -11.375547409057617
    6. '```' → logprob: -12.250547409057617
    7. 'f' → logprob: -13.375547409057617
    8. 't' → logprob: -13.625547409057617
    9. '-*' → logprob: -13.625547409057617
    10. 'r' → logprob: -13.750547409057617

Token 6: '8' (ID: 23)
  Prédit: '8'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '8' → logprob: -0.010212615132331848
    2. 'utf' → logprob: -4.760212421417236
    3. 'python' → logprob: -7.010212421417236
    4. 'ascii' → logprob: -8.635212898254395
    5. ' utf' → logprob: -9.260212898254395
    6. 'u' → logprob: -9.760212898254395
    7. 'gb' → logprob: -9.885212898254395
    8. '```' → logprob: -9.885212898254395
    9. '-' → logprob: -10.260212898254395
    10. 'py' → logprob: -10.260212898254395

Token 7: '-*' (ID: 169654)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.06423091143369675
    2. '-' → logprob: -2.9392309188842773
    3. ' -*-' → logprob: -4.814230918884277
    4. '\' → logprob: -7.939230918884277
    5. '\n' → logprob: -8.439230918884277
    6. '--' → logprob: -9.314230918884277
    7. '  
' → logprob: -9.564230918884277
    8. '```' → logprob: -9.564230918884277
    9. ' -*-
' → logprob: -9.689230918884277
    10. '#!/' → logprob: -9.689230918884277

Token 8: '--

' (ID: 71475)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.07889595627784729
    2. '
' → logprob: -3.2038960456848145
    3. '-' → logprob: -3.8288960456848145
    4. ' -*-' → logprob: -5.2038960456848145
    5. '' → logprob: -5.7038960456848145
    6. '
' → logprob: -6.4538960456848145
    7. '  
' → logprob: -6.9538960456848145
    8. '\n' → logprob: -7.2038960456848145
    9. '```' → logprob: -7.5788960456848145
    10. '#!/' → logprob: -8.703895568847656

Token 9: 'def' (ID: 1314)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.041269417852163315
    2. 'import' → logprob: -3.541269302368164
    3. '#!/' → logprob: -5.041269302368164
    4. '\n' → logprob: -5.541269302368164
    5. '
' → logprob: -7.791269302368164
    6. '#
' → logprob: -8.541269302368164
    7. '  
' → logprob: -8.916269302368164
    8. ' 
' → logprob: -9.166269302368164
    9. '#!' → logprob: -9.541269302368164
    10. ' import' → logprob: -10.291269302368164

Token 10: ' main' (ID: 2758)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0045898607932031155
    2. ' space' → logprob: -5.754590034484863
    3. ' ' → logprob: -7.754590034484863
    4. ' hello' → logprob: -8.379590034484863
    5. ' my' → logprob: -9.004590034484863
    6. ' add' → logprob: -9.629590034484863
    7. ' read' → logprob: -9.754590034484863
    8. ' process' → logprob: -9.754590034484863
    9. ' a' → logprob: -10.004590034484863
    10. ' ​' → logprob: -10.379590034484863

Token 11: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4367474615573883
    2. '():' → logprob: -1.061747431755066
    3. '(:' → logprob: -4.9367475509643555
    4. ':' → logprob: -7.6867475509643555
    5. '(":' → logprob: -9.436747550964355
    6. '):' → logprob: -9.561747550964355
    7. ' ():' → logprob: -9.686747550964355
    8. '()' → logprob: -10.186747550964355
    9. '(
' → logprob: -10.436747550964355
    10. '(**' → logprob: -10.936747550964355

Token 12: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08917282521724701
    2. '(' → logprob: -3.339172840118408
    3. '\' → logprob: -3.714172840118408
    4. ' ' → logprob: -4.589172840118408
    5. '    ' → logprob: -5.339172840118408
    6. ':' → logprob: -5.714172840118408
    7. '    
' → logprob: -6.464172840118408
    8. '\n' → logprob: -6.714172840118408
    9. 'print' → logprob: -7.339172840118408
    10. ' print' → logprob: -7.464172840118408

Token 13: ' """
' (ID: 7037)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.5227437615394592
    2. 'print' → logprob: -1.7727437019348145
    3. '   ' → logprob: -2.3977437019348145
    4. 'r' → logprob: -2.6477437019348145
    5. '    ' → logprob: -3.3977437019348145
    6. ' ' → logprob: -4.6477437019348145
    7. 'pass' → logprob: -4.8977437019348145
    8. '#' → logprob: -5.2727437019348145
    9. 'a' → logprob: -5.5227437019348145
    10. 'i' → logprob: -6.0227437019348145

Token 14: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.8735570907592773
    2. 'This' → logprob: -2.1235570907592773
    3. '"""' → logprob: -2.1235570907592773
    4. 'Calculate' → logprob: -2.2485570907592773
    5. 'Initialize' → logprob: -2.3735570907592773
    6. 'Run' → logprob: -2.4985570907592773
    7. 'Hello' → logprob: -3.2485570907592773
    8. 'Generate' → logprob: -3.6235570907592773
    9. 'Process' → logprob: -3.9985570907592773
    10. 'Main' → logprob: -4.123557090759277

Token 15: ' Rés' (ID: 104378)
  Prédit: 'Print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Print' → logprob: -1.4332033395767212
    2. '"""' → logprob: -1.9332033395767212
    3. 'Hello' → logprob: -2.3082032203674316
    4. 'This' → logprob: -2.4332032203674316
    5. 'Initialize' → logprob: -2.6832032203674316
    6. 'Main' → logprob: -2.9332032203674316
    7. 'Run' → logprob: -3.0582032203674316
    8. 'Calculate' → logprob: -3.1832032203674316
    9. 'Start' → logprob: -3.3082032203674316
    10. 'print' → logprob: -3.4332032203674316

Token 16: 'out' (ID: 468)
  Prédit: 'umé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'umé' → logprob: -0.0002917254460044205
    2. 'um' → logprob: -9.25029182434082
    3. 'umer' → logprob: -9.50029182434082
    4. 'ultat' → logprob: -9.87529182434082
    5. 'é' → logprob: -10.00029182434082
    6. 'u' → logprob: -11.12529182434082
    7. 'ume' → logprob: -12.75029182434082
    8. 'ult' → logprob: -13.75029182434082
    9. '   ' → logprob: -14.00029182434082
    10. 'olution' → logprob: -14.50029182434082

Token 17: ' le' (ID: 505)
  Prédit: ' les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.7205004096031189
    2. ' ' → logprob: -1.3455004692077637
    3. ' le' → logprob: -1.9705004692077637
    4. ' des' → logprob: -3.0955004692077637
    5. ' un' → logprob: -4.345500469207764
    6. ' ' → logprob: -4.470500469207764
    7. ' la' → logprob: -4.595500469207764
    8. ' l' → logprob: -4.845500469207764
    9. '   ' → logprob: -5.470500469207764
    10. '<|end|>' → logprob: -5.595500469207764

Token 18: ' problème' (ID: 35630)
  Prédit: ' problème'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' problème' → logprob: -0.30056872963905334
    2. 'pro' → logprob: -1.925568699836731
    3. ' probleme' → logprob: -3.8005688190460205
    4. 's' → logprob: -4.050568580627441
    5. ' sudoku' → logprob: -4.175568580627441
    6. ' code' → logprob: -4.675568580627441
    7. ' plus' → logprob: -4.800568580627441
    8. ' cube' → logprob: -5.175568580627441
    9. ' probl' → logprob: -5.300568580627441
    10. ' pro' → logprob: -5.675568580627441

Token 19: ' selon' (ID: 27571)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.5172404646873474
    2. ' d' → logprob: -2.017240524291992
    3. ' des' → logprob: -2.017240524291992
    4. '   ' → logprob: -2.767240524291992
    5. 'd' → logprob: -4.267240524291992
    6. 'de' → logprob: -4.267240524291992
    7. ' du' → logprob: -4.392240524291992
    8. ' ' → logprob: -4.392240524291992
    9. ' ' → logprob: -5.517240524291992
    10. '  ' → logprob: -5.892240524291992

Token 20: ' la' (ID: 557)
  Prédit: ' la'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.16620177030563354
    2. ' le' → logprob: -2.2912018299102783
    3. ' l' → logprob: -3.1662018299102783
    4. 'l' → logprob: -5.916201591491699
    5. ' les' → logprob: -6.041201591491699
    6. ' une' → logprob: -6.541201591491699
    7. 'le' → logprob: -6.666201591491699
    8. 'la' → logprob: -6.916201591491699
    9. '   ' → logprob: -8.4162015914917
    10. ' un' → logprob: -8.9162015914917

Token 21: ' logique' (ID: 115350)
  Prédit: 'mé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'mé' → logprob: -0.49109116196632385
    2. 'description' → logprob: -2.241091251373291
    3. ' méthode' → logprob: -2.866091251373291
    4. ' description' → logprob: -3.116091251373291
    5. 's' → logprob: -3.366091251373291
    6. ' spéc' → logprob: -3.366091251373291
    7. ' logique' → logprob: -4.116091251373291
    8. 'spec' → logprob: -4.741091251373291
    9. 'd' → logprob: -4.866091251373291
    10. ' cons' → logprob: -4.991091251373291

Token 22: ' suivante' (ID: 107439)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.49990516901016235
    2. ' de' → logprob: -1.2499051094055176
    3. ' du' → logprob: -2.8749051094055176
    4. 'de' → logprob: -3.7499051094055176
    5. 'du' → logprob: -5.249905109405518
    6. '       ' → logprob: -5.624905109405518
    7. '    ' → logprob: -5.624905109405518
    8. '.' → logprob: -5.749905109405518
    9. 'def' → logprob: -5.874905109405518
    10. '
' → logprob: -6.124905109405518

Token 23: ' :
' (ID: 10039)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.027913587167859077
    2. ':' → logprob: -4.152913570404053
    3. ' :' → logprob: -5.527913570404053
    4. '
' → logprob: -5.777913570404053
    5. '       ' → logprob: -6.152913570404053
    6. '    
' → logprob: -7.152913570404053
    7. '    ' → logprob: -7.527913570404053
    8. '\n' → logprob: -7.652913570404053
    9. ':
' → logprob: -8.652914047241211
    10. '  
' → logprob: -9.152914047241211

Token 24: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1157638281583786
    2. '    ' → logprob: -2.8657639026641846
    3. '       ' → logprob: -2.9907639026641846
    4. '     ' → logprob: -7.4907636642456055
    5. '"""' → logprob: -7.8657636642456055
    6. '#' → logprob: -8.615763664245605
    7. '        ' → logprob: -8.740763664245605
    8. ' ' → logprob: -8.865763664245605
    9. '"""
' → logprob: -8.990763664245605
    10. '    
' → logprob: -9.115763664245605

Token 25: ' ' (ID: 220)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.019618380814790726
    2. '       ' → logprob: -4.394618511199951
    3. '    ' → logprob: -5.269618511199951
    4. '"""' → logprob: -7.519618511199951
    5. '    
' → logprob: -7.769618511199951
    6. '#' → logprob: -8.019618034362793
    7. '     ' → logprob: -9.269618034362793
    8. ' ' → logprob: -9.519618034362793
    9. '"""
' → logprob: -9.644618034362793
    10. '
' → logprob: -10.269618034362793

Token 26: '1' (ID: 16)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5334563255310059
    2. '    ' → logprob: -1.2834563255310059
    3. '       ' → logprob: -2.408456325531006
    4. '"""' → logprob: -4.533456325531006
    5. '"""
' → logprob: -4.533456325531006
    6. '     ' → logprob: -5.283456325531006
    7. ' """
' → logprob: -5.783456325531006
    8. '#' → logprob: -5.908456325531006
    9. '     
' → logprob: -6.158456325531006
    10. ' ' → logprob: -6.408456325531006

Token 27: '.' (ID: 13)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16761337220668793
    2. '.' → logprob: -2.9176132678985596
    3. ')' → logprob: -3.1676132678985596
    4. ':' → logprob: -3.5426132678985596
    5. '-' → logprob: -4.542613506317139
    6. '    ' → logprob: -4.792613506317139
    7. ' ' → logprob: -5.792613506317139
    8. ',' → logprob: -6.417613506317139
    9. '  ' → logprob: -6.667613506317139
    10. '2' → logprob: -6.792613506317139

Token 28: ' Lit' (ID: 45595)
  Prédit: ' Lire'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' Lire' → logprob: -1.816472053527832
    2. '   ' → logprob: -2.066472053527832
    3. 'Lire' → logprob: -2.191472053527832
    4. ' #' → logprob: -2.191472053527832
    5. '    ' → logprob: -3.066472053527832
    6. '#' → logprob: -3.066472053527832
    7. ' lire' → logprob: -3.316472053527832
    8. ' R' → logprob: -3.316472053527832
    9. ' pass' → logprob: -3.566472053527832
    10. ' input' → logprob: -3.691472053527832

Token 29: ' les' (ID: 1341)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.8686413168907166
    2. ' ' → logprob: -1.2436413764953613
    3. ' les' → logprob: -2.2436413764953613
    4. ' l' → logprob: -2.2436413764953613
    5. ' une' → logprob: -3.3686413764953613
    6. ' le' → logprob: -4.118641376495361
    7. 'l' → logprob: -4.868641376495361
    8. 'e' → logprob: -5.243641376495361
    9. 'une' → logprob: -5.493641376495361
    10. '()' → logprob: -5.993641376495361

Token 30: ' entr' (ID: 7072)
  Prédit: ' données'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' données' → logprob: -0.07607784122228622
    2. ' lignes' → logprob: -3.701077938079834
    3. ' ' → logprob: -3.951077938079834
    4. ' entr' → logprob: -4.576077938079834
    5. 'd' → logprob: -5.826077938079834
    6. ' inputs' → logprob: -5.951077938079834
    7. ' fichiers' → logprob: -5.951077938079834
    8. ' ' → logprob: -6.701077938079834
    9. ' input' → logprob: -6.701077938079834
    10. ' data' → logprob: -7.201077938079834

Token 31: 'ées' (ID: 5161)
  Prédit: 'ées'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ées' → logprob: -0.0011311669368296862
    2. 'ée' → logprob: -6.876131057739258
    3. 'é' → logprob: -9.626131057739258
    4. 'ees' → logprob: -10.626131057739258
    5. 'és' → logprob: -12.001131057739258
    6. 'es' → logprob: -14.126131057739258
    7. 'éis' → logprob: -15.376131057739258
    8. 'ê' → logprob: -15.876131057739258
    9. 'e' → logprob: -16.001131057739258
    10. '```' → logprob: -16.251131057739258

Token 32: ' :' (ID: 712)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.019276412203907967
    2. ' ' → logprob: -5.3942766189575195
    3. '.' → logprob: -5.8942766189575195
    4. '\' → logprob: -6.0192766189575195
    5. '    ' → logprob: -6.3942766189575195
    6. 's' → logprob: -6.8942766189575195
    7. 'n' → logprob: -7.0192766189575195
    8. ':' → logprob: -7.1442766189575195
    9. ',' → logprob: -7.2692766189575195
    10. '
' → logprob: -7.5192766189575195

Token 33: ' taille' (ID: 41644)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.460150808095932
    2. '    ' → logprob: -1.9601508378982544
    3. '       ' → logprob: -2.835150718688965
    4. '\n' → logprob: -2.960150718688965
    5. ' ' → logprob: -3.085150718688965
    6. '\' → logprob: -3.085150718688965
    7. 'n' → logprob: -5.585150718688965
    8. '  ' → logprob: -5.960150718688965
    9. ' \' → logprob: -6.210150718688965
    10. '    
' → logprob: -6.335150718688965

Token 34: ' du' (ID: 1462)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -1.2841668128967285
    2. ' des' → logprob: -1.5341668128967285
    3. 's' → logprob: -1.6591668128967285
    4. '_' → logprob: -1.9091668128967285
    5. ',' → logprob: -3.6591668128967285
    6. ' ' → logprob: -3.6591668128967285
    7. '_des' → logprob: -3.9091668128967285
    8. ' du' → logprob: -4.1591668128967285
    9. ')' → logprob: -4.6591668128967285
    10. '(s' → logprob: -4.7841668128967285

Token 35: ' tableau' (ID: 67053)
  Prédit: ' tableau'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tableau' → logprob: -0.31660011410713196
    2. ' plateau' → logprob: -1.5666000843048096
    3. ' tab' → logprob: -5.066600322723389
    4. ' triangle' → logprob: -5.316600322723389
    5. ' problème' → logprob: -5.691600322723389
    6. 's' → logprob: -5.691600322723389
    7. ' table' → logprob: -5.754100322723389
    8. '```' → logprob: -5.941600322723389
    9. ' sac' → logprob: -6.004100322723389
    10. ' lab' → logprob: -6.191600322723389

Token 36: ' N' (ID: 478)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.40183737874031067
    2. ' ,' → logprob: -1.7768373489379883
    3. '   ' → logprob: -2.4018373489379883
    4. ' ' → logprob: -3.7768373489379883
    5. '[' → logprob: -3.9018373489379883
    6. 's' → logprob: -4.151837348937988
    7. '[]' → logprob: -6.401837348937988
    8. ')' → logprob: -6.526837348937988
    9. ' (' → logprob: -6.901837348937988
    10. '_' → logprob: -7.026837348937988

Token 37: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.18409278988838196
    2. '   ' → logprob: -2.3090927600860596
    3. '\n' → logprob: -4.309092998504639
    4. 'n' → logprob: -4.309092998504639
    5. ')' → logprob: -4.559092998504639
    6. '\' → logprob: -4.934092998504639
    7. ' ' → logprob: -5.559092998504639
    8. '<|end|>' → logprob: -5.809092998504639
    9. 'newline' → logprob: -5.809092998504639
    10. ' ,' → logprob: -5.934092998504639

Token 38: ' et' (ID: 859)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.41250964999198914
    2. ' la' → logprob: -1.6625096797943115
    3. ' ' → logprob: -3.5375096797943115
    4. '    ' → logprob: -3.6625096797943115
    5. ' et' → logprob: -3.7875096797943115
    6. ' le' → logprob: -4.287509441375732
    7. ' ' → logprob: -4.537509441375732
    8. ' puis' → logprob: -5.037509441375732
    9. ' les' → logprob: -5.162509441375732
    10. ' l' → logprob: -5.412509441375732

Token 39: ' deux' (ID: 10301)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.42348426580429077
    2. ' ' → logprob: -2.0484843254089355
    3. ' les' → logprob: -2.7984843254089355
    4. ' l' → logprob: -2.9234843254089355
    5. ' le' → logprob: -3.0484843254089355
    6. ' nombre' → logprob: -4.2984843254089355
    7. ' tableau' → logprob: -5.5484843254089355
    8. 'l' → logprob: -5.6734843254089355
    9. ' espaces' → logprob: -6.0484843254089355
    10. 's' → logprob: -6.0484843254089355

Token 40: ' tableaux' (ID: 176599)
  Prédit: ' tableaux'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tableaux' → logprob: -0.17813551425933838
    2. ' espaces' → logprob: -2.553135395050049
    3. ' listes' → logprob: -3.178135395050049
    4. ' variables' → logprob: -4.553135395050049
    5. ' arrays' → logprob: -4.553135395050049
    6. ' lists' → logprob: -5.803135395050049
    7. ' ent' → logprob: -6.553135395050049
    8. ' tableau' → logprob: -6.553135395050049
    9. ' ' → logprob: -6.678135395050049
    10. 'ent' → logprob: -6.678135395050049

Token 41: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.3976907432079315
    2. ' de' → logprob: -2.272690773010254
    3. ' ' → logprob: -3.147690773010254
    4. ' des' → logprob: -3.147690773010254
    5. ' x' → logprob: -3.647690773010254
    6. '   ' → logprob: -3.772690773010254
    7. ' t' → logprob: -4.397690773010254
    8. 'd' → logprob: -4.647690773010254
    9. ' a' → logprob: -4.647690773010254
    10. ' :' → logprob: -5.147690773010254

Token 42: ''ent' (ID: 53422)
  Prédit: ''ent'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''ent' → logprob: -0.05953631550073624
    2. 'ent' → logprob: -4.184536457061768
    3. ' ent' → logprob: -4.184536457061768
    4. ''entrée' → logprob: -4.559536457061768
    5. 'e' → logprob: -5.434536457061768
    6. '’ent' → logprob: -5.684536457061768
    7. ''' → logprob: -6.184536457061768
    8. ' integers' → logprob: -6.434536457061768
    9. '_ent' → logprob: -7.309536457061768
    10. 'onnées' → logprob: -7.309536457061768

Token 43: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.6428559422492981
    2. 'r' → logprob: -1.1428558826446533
    3. 'rée' → logprob: -2.2678558826446533
    4. 'ières' → logprob: -4.267856121063232
    5. 'ées' → logprob: -4.267856121063232
    6. 'ier' → logprob: -4.517856121063232
    7. 'ries' → logprob: -4.642856121063232
    8. 'ée' → logprob: -7.142856121063232
    9. 'rees' → logprob: -7.392856121063232
    10. '```' → logprob: -7.517856121063232

Token 44: ' A' (ID: 355)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.098758265376091
    2. ' ' → logprob: -3.5987582206726074
    3. ',' → logprob: -3.7237582206726074
    4. '
' → logprob: -4.848758220672607
    5. '  ' → logprob: -5.098758220672607
    6. '    ' → logprob: -5.348758220672607
    7. '\n' → logprob: -5.598758220672607
    8. ' ,' → logprob: -5.973758220672607
    9. '    
' → logprob: -5.973758220672607
    10. '.' → logprob: -6.223758220672607

Token 45: ' et' (ID: 859)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.38759762048721313
    2. '   ' → logprob: -1.3875975608825684
    3. ' ,' → logprob: -3.3875975608825684
    4. ')' → logprob: -4.137597560882568
    5. '<|end|>' → logprob: -4.637597560882568
    6. '[' → logprob: -5.512597560882568
    7. '  ' → logprob: -6.137597560882568
    8. ' ' → logprob: -6.637597560882568
    9. ' et' → logprob: -6.762597560882568
    10. '<|end|>' → logprob: -7.137597560882568

Token 46: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.22823263704776764
    2. 'B' → logprob: -1.6032326221466064
    3. '<|end|>' → logprob: -6.2282328605651855
    4. ' ' → logprob: -7.8532328605651855
    5. ' ' → logprob: -8.728232383728027
    6. 's' → logprob: -9.353232383728027
    7. '  ' → logprob: -9.353232383728027
    8. '<|end|>' → logprob: -10.478232383728027
    9. 'space' → logprob: -12.040732383728027
    10. ',' → logprob: -12.103232383728027

Token 47: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06056862697005272
    2. '
' → logprob: -3.4355685710906982
    3. '    
' → logprob: -4.685568809509277
    4. ')' → logprob: -5.685568809509277
    5. ',' → logprob: -5.810568809509277
    6. '.' → logprob: -6.060568809509277
    7. '```' → logprob: -6.185568809509277
    8. '\' → logprob: -6.310568809509277
    9. '  
' → logprob: -7.185568809509277
    10. '\n' → logprob: -7.185568809509277

Token 48: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.002619178267195821
    2. '    
' → logprob: -6.87761926651001
    3. ')' → logprob: -7.25261926651001
    4. '
' → logprob: -8.127618789672852
    5. '```' → logprob: -8.752618789672852
    6. '   
' → logprob: -9.127618789672852
    7. '    ' → logprob: -9.502618789672852
    8. '  ' → logprob: -10.377618789672852
    9. ')
' → logprob: -10.377618789672852
    10. ' 
' → logprob: -10.377618789672852

Token 49: ' ' (ID: 220)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0006064103217795491
    2. '    
' → logprob: -8.375606536865234
    3. '
' → logprob: -9.250606536865234
    4. '```' → logprob: -9.250606536865234
    5. '    ' → logprob: -9.375606536865234
    6. '  ' → logprob: -10.125606536865234
    7. '"""' → logprob: -11.250606536865234
    8. '       ' → logprob: -11.500606536865234
    9. '   
' → logprob: -12.000606536865234
    10. '"' → logprob: -12.250606536865234

Token 50: '2' (ID: 17)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0002193908003391698
    2. '    ' → logprob: -9.750219345092773
    3. ')' → logprob: -10.000219345092773
    4. '"""' → logprob: -10.125219345092773
    5. '```' → logprob: -10.500219345092773
    6. '    
' → logprob: -11.125219345092773
    7. '  ' → logprob: -11.875219345092773
    8. '
' → logprob: -12.000219345092773
    9. '       ' → logprob: -12.375219345092773
    10. '#' → logprob: -13.125219345092773

Token 51: '.' (ID: 13)
  Prédit: '.'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.6935842037200928
    2. '   ' → logprob: -0.6935842037200928
    3. ')' → logprob: -8.818584442138672
    4. ':' → logprob: -9.568584442138672
    5. '  ' → logprob: -9.818584442138672
    6. 'def' → logprob: -9.943584442138672
    7. '    ' → logprob: -10.193584442138672
    8. '#' → logprob: -10.818584442138672
    9. ' ' → logprob: -11.443584442138672
    10. ' ' → logprob: -12.068584442138672

Token 52: ' Test' (ID: 4674)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.37062153220176697
    2. ' for' → logprob: -3.1206214427948
    3. ' ' → logprob: -3.2456214427948
    4. ' Lire' → logprob: -3.2456214427948
    5. ' A' → logprob: -3.6206214427948
    6. ' #' → logprob: -3.8706214427948
    7. '#' → logprob: -4.245621681213379
    8. ' a' → logprob: -4.370621681213379
    9. 'Lire' → logprob: -4.745621681213379
    10. 'for' → logprob: -4.870621681213379

Token 53: 'e' (ID: 68)
  Prédit: 'e'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.00042686203960329294
    2. ' e' → logprob: -7.875426769256592
    3. 'er' → logprob: -10.87542724609375
    4. 'd' → logprob: -12.00042724609375
    5. 'é' → logprob: -12.50042724609375
    6. '   ' → logprob: -12.62542724609375
    7. ' de' → logprob: -12.62542724609375
    8. ' d' → logprob: -13.00042724609375
    9. ' ' → logprob: -13.12542724609375
    10. ':' → logprob: -13.37542724609375

Token 54: ' si' (ID: 1784)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.8069158792495728
    2. ' si' → logprob: -1.9319158792495728
    3. ' la' → logprob: -2.056915760040283
    4. ' if' → logprob: -2.431915760040283
    5. ' l' → logprob: -2.681915760040283
    6. ' ' → logprob: -3.306915760040283
    7. 's' → logprob: -4.181915760040283
    8. ' s' → logprob: -4.306915760040283
    9. ' e' → logprob: -4.306915760040283
    10. ' le' → logprob: -4.681915760040283

Token 55: ',' (ID: 11)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.8804747462272644
    2. ' la' → logprob: -2.005474805831909
    3. ' B' → logprob: -2.130474805831909
    4. ' len' → logprob: -2.130474805831909
    5. ' les' → logprob: -2.880474805831909
    6. 'A' → logprob: -3.005474805831909
    7. ' le' → logprob: -3.380474805831909
    8. 'len' → logprob: -4.00547456741333
    9. ' N' → logprob: -4.13047456741333
    10. ' ' → logprob: -4.75547456741333

Token 56: ' pour' (ID: 1930)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.08327231556177139
    2. ' la' → logprob: -4.208272457122803
    3. '   ' → logprob: -4.458272457122803
    4. ' A' → logprob: -4.708272457122803
    5. ' les' → logprob: -4.833272457122803
    6. '    ' → logprob: -5.208272457122803
    7. ' l' → logprob: -5.208272457122803
    8. '  ' → logprob: -5.333272457122803
    9. ' ' → logprob: -5.708272457122803
    10. ' B' → logprob: -5.958272457122803

Token 57: ' les' (ID: 1341)
  Prédit: ' chaque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' chaque' → logprob: -0.7032386660575867
    2. ' i' → logprob: -0.8282386660575867
    3. ' ' → logprob: -4.203238487243652
    4. 'i' → logprob: -4.203238487243652
    5. ' toutes' → logprob: -5.328238487243652
    6. ' tout' → logprob: -5.578238487243652
    7. 't' → logprob: -5.578238487243652
    8. ' tous' → logprob: -5.953238487243652
    9. 'tout' → logprob: -5.953238487243652
    10. ' l' → logprob: -6.203238487243652

Token 58: ' tableaux' (ID: 176599)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.18885503709316254
    2. ' indices' → logprob: -2.438854932785034
    3. 'i' → logprob: -2.688854932785034
    4. ' index' → logprob: -5.563855171203613
    5. ' mêmes' → logprob: -6.313855171203613
    6. ' ' → logprob: -6.313855171203613
    7. ' deux' → logprob: -6.563855171203613
    8. ' valeurs' → logprob: -6.813855171203613
    9. 'indices' → logprob: -6.938855171203613
    10. ' positions' → logprob: -7.063855171203613

Token 59: ' tri' (ID: 12665)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.033385057002305984
    2. 'A' → logprob: -4.033385276794434
    3. ' suivants' → logprob: -4.533385276794434
    4. ' donn' → logprob: -6.908385276794434
    5. ' B' → logprob: -7.408385276794434
    6. ' C' → logprob: -7.658385276794434
    7. 's' → logprob: -8.158385276794434
    8. ' ' → logprob: -8.158385276794434
    9. ' `' → logprob: -8.908385276794434
    10. ' ' → logprob: -8.908385276794434

Token 60: 'és' (ID: 1756)
  Prédit: 'és'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'és' → logprob: -0.029387203976511955
    2. 's' → logprob: -3.6543872356414795
    3. 'ées' → logprob: -6.1543869972229
    4. 'é' → logprob: -7.0293869972229
    5. 'es' → logprob: -10.404387474060059
    6. 'ée' → logprob: -12.029387474060059
    7. '```' → logprob: -12.154387474060059
    8. 'ès' → logprob: -12.404387474060059
    9. '_s' → logprob: -12.529387474060059
    10. '   ' → logprob: -13.154387474060059

Token 61: ',' (ID: 11)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.22884835302829742
    2. ',' → logprob: -2.853848457336426
    3. 'A' → logprob: -2.853848457336426
    4. ' ,' → logprob: -3.478848457336426
    5. ' des' → logprob: -3.728848457336426
    6. ' en' → logprob: -4.478848457336426
    7. ' de' → logprob: -4.478848457336426
    8. ' ' → logprob: -5.603848457336426
    9. ' )' → logprob: -6.853848457336426
    10. ' dans' → logprob: -7.103848457336426

Token 62: ' tous' (ID: 10688)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.13967031240463257
    2. ' B' → logprob: -2.5146703720092773
    3. 'A' → logprob: -4.264670372009277
    4. ' les' → logprob: -5.264670372009277
    5. ' la' → logprob: -5.264670372009277
    6. ' chaque' → logprob: -5.389670372009277
    7. ' ' → logprob: -5.889670372009277
    8. ' on' → logprob: -6.014670372009277
    9. ' il' → logprob: -6.014670372009277
    10. ' len' → logprob: -6.014670372009277

Token 63: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.0064210714772343636
    2. 'les' → logprob: -6.131421089172363
    3. ' ' → logprob: -7.006421089172363
    4. 's' → logprob: -7.506421089172363
    5. ' éléments' → logprob: -7.756421089172363
    6. ' elements' → logprob: -7.881421089172363
    7. ' leurs' → logprob: -8.256421089172363
    8. '(' → logprob: -8.381421089172363
    9. ' l' → logprob: -8.381421089172363
    10. 'A' → logprob: -8.506421089172363

Token 64: ' éléments' (ID: 57375)
  Prédit: ' éléments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' éléments' → logprob: -0.23662115633487701
    2. 'élé' → logprob: -1.6116211414337158
    3. ' elements' → logprob: -5.736621379852295
    4. ' A' → logprob: -5.986621379852295
    5. ' indices' → logprob: -6.986621379852295
    6. 'A' → logprob: -7.236621379852295
    7. ' élément' → logprob: -7.486621379852295
    8. ' B' → logprob: -7.486621379852295
    9. ' a' → logprob: -7.986621379852295
    10. ' ' → logprob: -8.236620903015137

Token 65: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.06911508738994598
    2. ' ' → logprob: -4.569115161895752
    3. ' des' → logprob: -4.569115161895752
    4. ' A' → logprob: -4.819115161895752
    5. ' du' → logprob: -5.069115161895752
    6. 's' → logprob: -5.194115161895752
    7. ' of' → logprob: -5.319115161895752
    8. ' sont' → logprob: -5.444115161895752
    9. ' d' → logprob: -5.944115161895752
    10. ' B' → logprob: -6.319115161895752

Token 66: ' A' (ID: 355)
  Prédit: ' A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.042379286140203476
    2. 'A' → logprob: -3.667379379272461
    3. ' B' → logprob: -4.167379379272461
    4. 'B' → logprob: -8.042379379272461
    5. ' ' → logprob: -10.042379379272461
    6. ' l' → logprob: -11.042379379272461
    7. 'a' → logprob: -11.229879379272461
    8. 's' → logprob: -11.729879379272461
    9. ' a' → logprob: -11.854879379272461
    10. ' ' → logprob: -11.854879379272461

Token 67: ' sont' (ID: 5242)
  Prédit: ' sont'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sont' → logprob: -0.07594703137874603
    2. ' <=' → logprob: -3.5759470462799072
    3. ' ' → logprob: -4.200946807861328
    4. '[i' → logprob: -5.075946807861328
    5. ' de' → logprob: -5.200946807861328
    6. 's' → logprob: -5.825946807861328
    7. '[' → logprob: -5.825946807861328
    8. ' are' → logprob: -6.075946807861328
    9. '<=' → logprob: -6.325946807861328
    10. ' ont' → logprob: -7.200946807861328

Token 68: ' inf' (ID: 5603)
  Prédit: ' inf'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' inf' → logprob: -0.38058727979660034
    2. 'inf' → logprob: -1.7555873394012451
    3. ' <=' → logprob: -2.255587339401245
    4. 'sup' → logprob: -4.880587100982666
    5. ' inférieur' → logprob: -5.130587100982666
    6. '<=' → logprob: -5.255587100982666
    7. ' sup' → logprob: -5.505587100982666
    8. ' présents' → logprob: -6.005587100982666
    9. 'infer' → logprob: -6.005587100982666
    10. ' ' → logprob: -6.130587100982666

Token 69: 'érieurs' (ID: 97672)
  Prédit: 'érieurs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'érieurs' → logprob: -0.00702817365527153
    2. 'é' → logprob: -5.382028102874756
    3. 'érieur' → logprob: -6.507028102874756
    4. 'er' → logprob: -8.257028579711914
    5. 'érieures' → logprob: -8.632028579711914
    6. 'érieure' → logprob: -8.882028579711914
    7. '   ' → logprob: -9.132028579711914
    8. 'éri' → logprob: -10.632028579711914
    9. '©' → logprob: -10.757028579711914
    10. '	' → logprob: -10.757028579711914

Token 70: ' ou' (ID: 2031)
  Prédit: ' ou'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ou' → logprob: -0.753136396408081
    2. '_' → logprob: -0.878136396408081
    3. 'ou' → logprob: -2.628136396408081
    4. '  ' → logprob: -4.37813663482666
    5. ' ' → logprob: -4.62813663482666
    6. ' à' → logprob: -5.50313663482666
    7. 's' → logprob: -5.62813663482666
    8. '   ' → logprob: -5.62813663482666
    9. 'à' → logprob: -6.62813663482666
    10. 'e' → logprob: -7.00313663482666

Token 71: ' ég' (ID: 33150)
  Prédit: ' ég'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ég' → logprob: -0.007042851764708757
    2. 'ég' → logprob: -5.75704288482666
    3. '=' → logprob: -6.00704288482666
    4. 'égal' → logprob: -6.75704288482666
    5. ' égal' → logprob: -9.13204288482666
    6. 'à' → logprob: -9.75704288482666
    7. 'Ég' → logprob: -11.25704288482666
    8. ' à' → logprob: -11.63204288482666
    9. 'é' → logprob: -11.63204288482666
    10. '_' → logprob: -12.00704288482666

Token 72: 'aux' (ID: 5454)
  Prédit: 'aux'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aux' → logprob: -0.190921351313591
    2. 'al' → logprob: -1.8159213066101074
    3. 'als' → logprob: -5.065921306610107
    4. 'a' → logprob: -5.690921306610107
    5. '```' → logprob: -7.440921306610107
    6. 'ale' → logprob: -8.190921783447266
    7. 'ales' → logprob: -8.190921783447266
    8. '##' → logprob: -10.440921783447266
    9. '_aux' → logprob: -10.940921783447266
    10. '   ' → logprob: -11.065921783447266

Token 73: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.21071305871009827
    2. ' aux' → logprob: -1.9607130289077759
    3. ' ' → logprob: -3.8357131481170654
    4. 'à' → logprob: -4.835712909698486
    5. '  ' → logprob: -4.835712909698486
    6. 'aux' → logprob: -5.210712909698486
    7. '```' → logprob: -6.335712909698486
    8. ' ' → logprob: -6.585712909698486
    9. '   ' → logprob: -6.710712909698486
    10. '<|end|>' → logprob: -7.460712909698486

Token 74: ' ceux' (ID: 26863)
  Prédit: ' ceux'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ceux' → logprob: -0.276777058839798
    2. ' leurs' → logprob: -2.4017770290374756
    3. ' les' → logprob: -3.1517770290374756
    4. 'les' → logprob: -3.1517770290374756
    5. '```' → logprob: -4.151777267456055
    6. 'cor' → logprob: -4.276777267456055
    7. 'leurs' → logprob: -5.151777267456055
    8. 'leur' → logprob: -5.651777267456055
    9. 's' → logprob: -5.651777267456055
    10. 'eux' → logprob: -5.651777267456055

Token 75: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.012435711920261383
    2. 'de' → logprob: -5.0124359130859375
    3. '<|end|>' → logprob: -5.8874359130859375
    4. ' des' → logprob: -6.3874359130859375
    5. 's' → logprob: -8.262435913085938
    6. ' ' → logprob: -8.762435913085938
    7. ' dans' → logprob: -9.012435913085938
    8. '   ' → logprob: -9.262435913085938
    9. ' of' → logprob: -9.387435913085938
    10. '  ' → logprob: -9.637435913085938

Token 76: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.07901790738105774
    2. 'B' → logprob: -2.5790178775787354
    3. ' ' → logprob: -9.829017639160156
    4. ' ' → logprob: -10.329017639160156
    5. '  ' → logprob: -11.704017639160156
    6. '<|end|>' → logprob: -11.704017639160156
    7. 's' → logprob: -11.954017639160156
    8. '```' → logprob: -12.954017639160156
    9. ' l' → logprob: -13.391517639160156
    10. '>B' → logprob: -13.454017639160156

Token 77: '.
' (ID: 558)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.36466673016548157
    2. '   ' → logprob: -1.2396667003631592
    3. '.
' → logprob: -5.489666938781738
    4. '
' → logprob: -5.739666938781738
    5. 'def' → logprob: -5.739666938781738
    6. ',' → logprob: -5.989666938781738
    7. ':' → logprob: -7.489666938781738
    8. '[' → logprob: -8.239666938781738
    9. '    
' → logprob: -8.239666938781738
    10. '  ' → logprob: -8.239666938781738

Token 78: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0036428342573344707
    2. '    
' → logprob: -6.878643035888672
    3. '    ' → logprob: -7.378643035888672
    4. '```' → logprob: -8.003643035888672
    5. ')' → logprob: -8.253643035888672
    6. ' 
' → logprob: -8.378643035888672
    7. '
' → logprob: -8.378643035888672
    8. '\' → logprob: -8.503643035888672
    9. '"' → logprob: -8.753643035888672
    10. '  ' → logprob: -9.003643035888672

Token 79: ' ' (ID: 220)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0009158630855381489
    2. '"""' → logprob: -8.00091552734375
    3. '    ' → logprob: -8.12591552734375
    4. '"' → logprob: -9.25091552734375
    5. '  ' → logprob: -9.50091552734375
    6. '```' → logprob: -10.62591552734375
    7. '
' → logprob: -11.00091552734375
    8. '       ' → logprob: -11.12591552734375
    9. '    
' → logprob: -11.50091552734375
    10. '"""
' → logprob: -12.00091552734375

Token 80: '3' (ID: 18)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.002228287048637867
    2. '"""' → logprob: -6.627228260040283
    3. '    ' → logprob: -8.252228736877441
    4. '"' → logprob: -8.377228736877441
    5. '
' → logprob: -9.377228736877441
    6. '```' → logprob: -9.752228736877441
    7. '  ' → logprob: -10.002228736877441
    8. '"""
' → logprob: -10.252228736877441
    9. '       ' → logprob: -10.377228736877441
    10. ')' → logprob: -10.627228736877441

Token 81: '.' (ID: 13)
  Prédit: '.'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.009802366606891155
    2. '   ' → logprob: -4.634802341461182
    3. 'def' → logprob: -11.13480281829834
    4. ')' → logprob: -11.50980281829834
    5. '#' → logprob: -11.88480281829834
    6. '.
' → logprob: -12.38480281829834
    7. '  ' → logprob: -12.63480281829834
    8. '4' → logprob: -13.63480281829834
    9. 'if' → logprob: -14.13480281829834
    10. '    ' → logprob: -14.38480281829834

Token 82: ' Si' (ID: 7832)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.26298466324806213
    2. ' return' → logprob: -2.6379847526550293
    3. ' Retour' → logprob: -3.2629847526550293
    4. 'Retour' → logprob: -3.3879847526550293
    5. ' Si' → logprob: -3.8879847526550293
    6. 'return' → logprob: -3.8879847526550293
    7. ' if' → logprob: -4.262984752655029
    8. 'if' → logprob: -4.887984752655029
    9. 'Si' → logprob: -5.387984752655029
    10. ' retourne' → logprob: -5.387984752655029

Token 83: ' la' (ID: 557)
  Prédit: ' True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.30815741419792175
    2. ' oui' → logprob: -2.933157444000244
    3. ' tous' → logprob: -3.308157444000244
    4. ' la' → logprob: -3.433157444000244
    5. ' all' → logprob: -3.683157444000244
    6. 'True' → logprob: -3.683157444000244
    7. ' not' → logprob: -4.308157444000244
    8. ' toutes' → logprob: -4.433157444000244
    9. ' ' → logprob: -4.933157444000244
    10. ' true' → logprob: -4.933157444000244

Token 84: ' condition' (ID: 7060)
  Prédit: ' condition'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' condition' → logprob: -0.0638575628399849
    2. 'condition' → logprob: -2.8138575553894043
    3. ' ' → logprob: -7.813857555389404
    4. 's' → logprob: -8.438858032226562
    5. ' ' → logprob: -8.813858032226562
    6. ' différence' → logprob: -8.813858032226562
    7. 'cond' → logprob: -8.938858032226562
    8. ' conditions' → logprob: -9.313858032226562
    9. '   ' → logprob: -9.313858032226562
    10. ' all' → logprob: -9.438858032226562

Token 85: ' précédente' (ID: 177319)
  Prédit: ' est'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' est' → logprob: -0.050864189863204956
    2. 'est' → logprob: -3.6758642196655273
    3. ' n' → logprob: -4.800864219665527
    4. 's' → logprob: -5.300864219665527
    5. ' is' → logprob: -6.175864219665527
    6. ' ' → logprob: -6.550864219665527
    7. ':' → logprob: -6.550864219665527
    8. ' True' → logprob: -6.925864219665527
    9. ' s' → logprob: -7.050864219665527
    10. '   ' → logprob: -7.050864219665527

Token 86: ' passe' (ID: 22210)
  Prédit: ' est'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' est' → logprob: -0.039300188422203064
    2. 'est' → logprob: -4.039299964904785
    3. ' n' → logprob: -4.164299964904785
    4. ',' → logprob: -5.914299964904785
    5. ':' → logprob: -6.414299964904785
    6. 'n' → logprob: -8.039299964904785
    7. ' is' → logprob: -8.789299964904785
    8. 's' → logprob: -8.914299964904785
    9. ':
' → logprob: -9.039299964904785
    10. ' ,' → logprob: -10.039299964904785

Token 87: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.010456259362399578
    2. ' ,' → logprob: -5.010456085205078
    3. ' ' → logprob: -6.510456085205078
    4. ':' → logprob: -6.760456085205078
    5. ' :' → logprob: -7.010456085205078
    6. ',
' → logprob: -10.385456085205078
    7. 'r' → logprob: -10.385456085205078
    8. ' alors' → logprob: -10.385456085205078
    9. 'e' → logprob: -10.760456085205078
    10. '   ' → logprob: -11.385456085205078

Token 88: ' teste' (ID: 62670)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.36500826478004456
    2. ' retourne' → logprob: -1.9900082349777222
    3. ' print' → logprob: -2.9900083541870117
    4. ' return' → logprob: -3.4900083541870117
    5. '    ' → logprob: -3.6150083541870117
    6. '       ' → logprob: -4.365008354187012
    7. '   ' → logprob: -4.490008354187012
    8. 'print' → logprob: -5.115008354187012
    9. ' ' → logprob: -5.115008354187012
    10. ' retourner' → logprob: -5.740008354187012

Token 89: ' s' (ID: 265)
  Prédit: ' si'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' si' → logprob: -0.026463201269507408
    2. ' if' → logprob: -3.901463270187378
    3. ' ' → logprob: -6.026463031768799
    4. '  ' → logprob: -7.276463031768799
    5. ' la' → logprob: -7.276463031768799
    6. 'si' → logprob: -7.401463031768799
    7. '_' → logprob: -8.776463508605957
    8. 's' → logprob: -9.026463508605957
    9. ' ' → logprob: -9.026463508605957
    10. '   ' → logprob: -9.151463508605957

Token 90: ''il' (ID: 14683)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.032656826078891754
    2. ''il' → logprob: -4.657656669616699
    3. 'e' → logprob: -5.032656669616699
    4. 'u' → logprob: -5.407656669616699
    5. 'ur' → logprob: -5.407656669616699
    6. '   ' → logprob: -6.282656669616699
    7. ' i' → logprob: -7.157656669616699
    8. ''ils' → logprob: -7.157656669616699
    9. 'a' → logprob: -7.282656669616699
    10. ' ' → logprob: -7.657656669616699

Token 91: ' existe' (ID: 19498)
  Prédit: ' y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.6760637760162354
    2. 'est' → logprob: -2.0510637760162354
    3. ' existe' → logprob: -2.3010637760162354
    4. ' est' → logprob: -2.6760637760162354
    5. ' n' → logprob: -3.4260637760162354
    6. ' possible' → logprob: -3.4260637760162354
    7. 's' → logprob: -3.5510637760162354
    8. ' faut' → logprob: -3.8010637760162354
    9. '   ' → logprob: -4.176063537597656
    10. 'y' → logprob: -4.676063537597656

Token 92: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.7898418307304382
    2. ' une' → logprob: -1.414841890335083
    3. ' au' → logprob: -1.789841890335083
    4. ' ' → logprob: -3.414841890335083
    5. ' a' → logprob: -3.539841890335083
    6. 'un' → logprob: -4.039841651916504
    7. 'une' → logprob: -4.289841651916504
    8. ' des' → logprob: -4.539841651916504
    9. 'a' → logprob: -4.914841651916504
    10. ' i' → logprob: -5.164841651916504

Token 93: ' dé' (ID: 2393)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -1.2457433938980103
    2. ' espace' → logprob: -2.2457432746887207
    3. ' ' → logprob: -2.3707432746887207
    4. ' élément' → logprob: -2.6207432746887207
    5. ' indice' → logprob: -2.7457432746887207
    6. ' index' → logprob: -2.9957432746887207
    7. 'e' → logprob: -3.1207432746887207
    8. 'i' → logprob: -3.2457432746887207
    9. ' j' → logprob: -3.3707432746887207
    10. 'élé' → logprob: -3.3707432746887207

Token 94: 'cal' (ID: 5842)
  Prédit: 'cal'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cal' → logprob: -0.389302134513855
    2. 'é' → logprob: -2.5143022537231445
    3. 'éc' → logprob: -3.0143022537231445
    4. 'e' → logprob: -3.3893022537231445
    5. 'al' → logprob: -3.3893022537231445
    6. '
' → logprob: -3.7643022537231445
    7. 'el' → logprob: -4.0143022537231445
    8. 'placement' → logprob: -4.0143022537231445
    9. '```' → logprob: -4.2643022537231445
    10. 'élé' → logprob: -4.8893022537231445

Token 95: 'age' (ID: 477)
  Prédit: 'age'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'age' → logprob: -0.08187570422887802
    2. 'a' → logprob: -2.706875801086426
    3. 'ag' → logprob: -5.206875801086426
    4. 'e' → logprob: -6.331875801086426
    5. 'l' → logprob: -7.081875801086426
    6. '   ' → logprob: -7.206875801086426
    7. 'agement' → logprob: -7.581875801086426
    8. '```' → logprob: -7.581875801086426
    9. 'lement' → logprob: -8.831875801086426
    10. ' age' → logprob: -8.831875801086426

Token 96: ' permettant' (ID: 61092)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' de' → logprob: -1.0496134757995605
    2. ' d' → logprob: -1.6746134757995605
    3. 's' → logprob: -2.4246134757995605
    4. ' s' → logprob: -2.6746134757995605
    5. ' i' → logprob: -2.9246134757995605
    6. ' ' → logprob: -2.9246134757995605
    7. 'd' → logprob: -3.0496134757995605
    8. ' (' → logprob: -4.1746134757995605
    9. ' positif' → logprob: -4.4246134757995605
    10. ' k' → logprob: -4.5496134757995605

Token 97: ' à' (ID: 1221)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.5230053663253784
    2. ' que' → logprob: -1.3980053663253784
    3. ' d' → logprob: -2.398005485534668
    4. ' ' → logprob: -3.398005485534668
    5. '    ' → logprob: -4.773005485534668
    6. ' à' → logprob: -5.398005485534668
    7. '<|end|>' → logprob: -5.523005485534668
    8. 'd' → logprob: -5.523005485534668
    9. '   ' → logprob: -5.648005485534668
    10. 'de' → logprob: -6.023005485534668

Token 98: ' tous' (ID: 10688)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.14101164042949677
    2. ' B' → logprob: -2.7660117149353027
    3. 'A' → logprob: -2.8910117149353027
    4. ' for' → logprob: -4.891011714935303
    5. ' la' → logprob: -6.891011714935303
    6. ' all' → logprob: -7.016011714935303
    7. 'for' → logprob: -7.016011714935303
    8. 'B' → logprob: -7.266011714935303
    9. '   ' → logprob: -8.266011238098145
    10. 'la' → logprob: -8.641011238098145

Token 99: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.3274534046649933
    2. 's' → logprob: -1.702453374862671
    3. '   ' → logprob: -3.452453374862671
    4. 'A' → logprob: -3.827453374862671
    5. '<|end|>' → logprob: -4.32745361328125
    6. '    ' → logprob: -5.20245361328125
    7. ' ' → logprob: -5.45245361328125
    8. 'a' → logprob: -5.57745361328125
    9. 'i' → logprob: -6.07745361328125
    10. 'les' → logprob: -6.07745361328125

Token 100: ' A' (ID: 355)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.26591283082962036
    2. ' éléments' → logprob: -2.0159127712249756
    3. 'A' → logprob: -3.0159127712249756
    4. ' A' → logprob: -3.5159127712249756
    5. ' B' → logprob: -5.515913009643555
    6. ' elements' → logprob: -5.515913009643555
    7. 'B' → logprob: -5.515913009643555
    8. 'elements' → logprob: -5.640913009643555
    9. 'él' → logprob: -6.640913009643555
    10. ' ' → logprob: -7.015913009643555

Token 101: ' d' (ID: 272)
  Prédit: '[i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.3628826439380646
    2. ' de' → logprob: -1.9878826141357422
    3. ' d' → logprob: -2.862882614135742
    4. '   ' → logprob: -3.862882614135742
    5. ' i' → logprob: -4.112882614135742
    6. 'élé' → logprob: -4.237882614135742
    7. 'i' → logprob: -4.362882614135742
    8. 's' → logprob: -4.737882614135742
    9. ' ' → logprob: -5.112882614135742
    10. ' à' → logprob: -5.487882614135742

Token 102: ''être' (ID: 47704)
  Prédit: ''être'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''être' → logprob: -0.6547381281852722
    2. 'être' → logprob: -1.404738187789917
    3. ' être' → logprob: -2.154738187789917
    4. 'e' → logprob: -2.404738187789917
    5. '’être' → logprob: -4.654737949371338
    6. ''' → logprob: -4.779737949371338
    7. ''avoir' → logprob: -5.779737949371338
    8. 'êtres' → logprob: -6.654737949371338
    9. ' etre' → logprob: -7.279737949371338
    10. 'a' → logprob: -7.404737949371338

Token 103: ' plus' (ID: 2932)
  Prédit: ' inf'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' inf' → logprob: -0.6275007128715515
    2. 'inf' → logprob: -2.3775007724761963
    3. 'sup' → logprob: -3.1275007724761963
    4. ' align' → logprob: -3.5025007724761963
    5. ' plac' → logprob: -3.6275007724761963
    6. ' contenus' → logprob: -3.6275007724761963
    7. ' dans' → logprob: -4.002500534057617
    8. ' sup' → logprob: -4.002500534057617
    9. ' <=' → logprob: -4.002500534057617
    10. ' plus' → logprob: -4.502500534057617

Token 104: ' petits' (ID: 38141)
  Prédit: ' grands'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' grands' → logprob: -0.9491888284683228
    2. ' grand' → logprob: -1.8241888284683228
    3. 'pet' → logprob: -1.8241888284683228
    4. 'grand' → logprob: -2.199188709259033
    5. ' petits' → logprob: -2.449188709259033
    6. ' petit' → logprob: -3.699188709259033
    7. ' grandes' → logprob: -3.949188709259033
    8. '   ' → logprob: -4.199188709259033
    9. ' large' → logprob: -5.199188709259033
    10. ' grande' → logprob: -5.324188709259033

Token 105: ' ou' (ID: 2031)
  Prédit: ' ou'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ou' → logprob: -0.009800242260098457
    2. ' que' → logprob: -5.384800434112549
    3. 'ou' → logprob: -5.759800434112549
    4. 's' → logprob: -7.134800434112549
    5. 'que' → logprob: -7.134800434112549
    6. '   ' → logprob: -9.13479995727539
    7. ' ' → logprob: -9.75979995727539
    8. '  ' → logprob: -9.75979995727539
    9. 'es' → logprob: -10.13479995727539
    10. '```' → logprob: -10.50979995727539

Token 106: ' ég' (ID: 33150)
  Prédit: 'ég'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ég' → logprob: -0.5661896467208862
    2. 'égal' → logprob: -0.9411896467208862
    3. ' ég' → logprob: -3.191189765930176
    4. 'ou' → logprob: -8.066189765930176
    5. 'eg' → logprob: -8.191189765930176
    6. 'égalité' → logprob: -8.316189765930176
    7. '```' → logprob: -10.066189765930176
    8. 'à' → logprob: -10.566189765930176
    9. 'équ' → logprob: -10.566189765930176
    10. 'au' → logprob: -10.691189765930176

Token 107: 'aux' (ID: 5454)
  Prédit: 'aux'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aux' → logprob: -0.0031154491007328033
    2. 'al' → logprob: -6.628115653991699
    3. 'als' → logprob: -6.628115653991699
    4. 'a' → logprob: -8.7531156539917
    5. 'au' → logprob: -9.5031156539917
    6. '```' → logprob: -9.8781156539917
    7. 'ales' → logprob: -10.1281156539917
    8. 'aus' → logprob: -10.8781156539917
    9. 'ale' → logprob: -11.2531156539917
    10. '   ' → logprob: -11.2531156539917

Token 108: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.025755804032087326
    2. 'à' → logprob: -4.400755882263184
    3. ' aux' → logprob: -4.650755882263184
    4. ' ' → logprob: -6.650755882263184
    5. '   ' → logprob: -6.775755882263184
    6. ' au' → logprob: -8.150755882263184
    7. 'aux' → logprob: -8.150755882263184
    8. '  ' → logprob: -9.025755882263184
    9. '    ' → logprob: -9.150755882263184
    10. 'au' → logprob: -9.275755882263184

Token 109: ' B' (ID: 418)
  Prédit: ' tous'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tous' → logprob: -0.04676428437232971
    2. ' les' → logprob: -4.046764373779297
    3. ' ' → logprob: -4.421764373779297
    4. 't' → logprob: -5.921764373779297
    5. ' des' → logprob: -6.046764373779297
    6. ' all' → logprob: -6.046764373779297
    7. 's' → logprob: -6.671764373779297
    8. ' un' → logprob: -6.796764373779297
    9. ' ' → logprob: -7.046764373779297
    10. ' B' → logprob: -7.046764373779297

Token 110: ' (' (ID: 350)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11225859075784683
    2. '.' → logprob: -2.3622586727142334
    3. '
' → logprob: -5.987258434295654
    4. ':' → logprob: -6.112258434295654
    5. 'def' → logprob: -6.237258434295654
    6. ',' → logprob: -6.487258434295654
    7. '  ' → logprob: -6.737258434295654
    8. '.
' → logprob: -6.737258434295654
    9. '    
' → logprob: -8.612258911132812
    10. ' ' → logprob: -8.862258911132812

Token 111: 'd' (ID: 67)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.20923718810081482
    2. ' )' → logprob: -3.0842370986938477
    3. ').' → logprob: -3.7092370986938477
    4. '   ' → logprob: -4.209237098693848
    5. ' au' → logprob: -4.209237098693848
    6. ')
' → logprob: -4.584237098693848
    7. ' avec' → logprob: -4.834237098693848
    8. ' en' → logprob: -4.959237098693848
    9. ' à' → logprob: -4.959237098693848
    10. ' après' → logprob: -5.209237098693848

Token 112: 'éc' (ID: 5675)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.1489257663488388
    2. 'u' → logprob: -2.39892578125
    3. 'é' → logprob: -3.52392578125
    4. '')' → logprob: -5.27392578125
    5. 'éc' → logprob: -5.52392578125
    6. 'ans' → logprob: -5.64892578125
    7. ''un' → logprob: -5.89892578125
    8. ''é' → logprob: -7.89892578125
    9. ''une' → logprob: -8.02392578125
    10. ')' → logprob: -8.14892578125

Token 113: 'al' (ID: 280)
  Prédit: 'al'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'al' → logprob: -0.4556364119052887
    2. 'h' → logprob: -1.2056363821029663
    3. 'hage' → logprob: -4.080636501312256
    4. 'r' → logprob: -4.205636501312256
    5. '   ' → logprob: -4.580636501312256
    6. 'allage' → logprob: -5.205636501312256
    7. 'he' → logprob: -5.580636501312256
    8. 'ale' → logprob: -5.705636501312256
    9. 'rement' → logprob: -6.455636501312256
    10. '#' → logprob: -6.955636501312256

Token 114: 'é' (ID: 377)
  Prédit: 'age'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'age' → logprob: -0.04709664359688759
    2. 'e' → logprob: -3.7970967292785645
    3. 'ement' → logprob: -4.1720967292785645
    4. '   ' → logprob: -5.9220967292785645
    5. ' age' → logprob: -6.4220967292785645
    6. 'ages' → logprob: -6.9220967292785645
    7. 'er' → logprob: -7.0470967292785645
    8. 'ag' → logprob: -8.297096252441406
    9. 'agement' → logprob: -8.422096252441406
    10. ')' → logprob: -8.547096252441406

Token 115: ' d' (ID: 272)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6051906943321228
    2. ' de' → logprob: -1.8551907539367676
    3. ' )' → logprob: -1.9801907539367676
    4. ' ' → logprob: -2.3551907539367676
    5. '_' → logprob: -3.9801907539367676
    6. ' d' → logprob: -4.480190753936768
    7. ' possible' → logprob: -4.730190753936768
    8. 'e' → logprob: -4.980190753936768
    9. 's' → logprob: -5.730190753936768
    10. '   ' → logprob: -5.855190753936768

Token 116: ''une' (ID: 13337)
  Prédit: ''un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''un' → logprob: -0.5115534663200378
    2. 'e' → logprob: -1.3865535259246826
    3. ''une' → logprob: -2.8865535259246826
    4. ''au' → logprob: -3.2615535259246826
    5. '')' → logprob: -4.2615532875061035
    6. '1' → logprob: -4.5115532875061035
    7. ')' → logprob: -5.0115532875061035
    8. ''' → logprob: -5.0115532875061035
    9. 'u' → logprob: -5.2615532875061035
    10. 'un' → logprob: -6.0115532875061035

Token 117: ' position' (ID: 4010)
  Prédit: ' position'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' position' → logprob: -0.9529412984848022
    2. ' case' → logprob: -1.4529412984848022
    3. ' unité' → logprob: -1.7029412984848022
    4. 'position' → logprob: -2.452941417694092
    5. 'case' → logprob: -3.327941417694092
    6. ' certaine' → logprob: -3.952941417694092
    7. ')' → logprob: -4.702941417694092
    8. ' valeur' → logprob: -4.827941417694092
    9. ' même' → logprob: -5.952941417694092
    10. 'élé' → logprob: -6.202941417694092

Token 118: ').
' (ID: 6294)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5104025602340698
    2. ' )' → logprob: -2.0104026794433594
    3. ').' → logprob: -2.6354026794433594
    4. ' de' → logprob: -3.2604026794433594
    5. ' circul' → logprob: -3.2604026794433594
    6. ' ).' → logprob: -3.7604026794433594
    7. ' ' → logprob: -4.385402679443359
    8. ' dans' → logprob: -4.385402679443359
    9. ' sur' → logprob: -4.510402679443359
    10. ' ou' → logprob: -4.635402679443359

Token 119: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004176579415798187
    2. '
' → logprob: -6.379176616668701
    3. '    
' → logprob: -6.754176616668701
    4. '    ' → logprob: -8.004176139831543
    5. ' 
' → logprob: -8.004176139831543
    6. '   
' → logprob: -9.129176139831543
    7. ')' → logprob: -9.504176139831543
    8. '       ' → logprob: -9.629176139831543
    9. 'def' → logprob: -10.254176139831543
    10. '4' → logprob: -10.379176139831543

Token 120: ' ' (ID: 220)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00453396188095212
    2. '
' → logprob: -6.379533767700195
    3. ')' → logprob: -7.004533767700195
    4. '"""' → logprob: -7.129533767700195
    5. '```' → logprob: -7.879533767700195
    6. '    
' → logprob: -8.504533767700195
    7. ' 
' → logprob: -9.129533767700195
    8. '"' → logprob: -9.379533767700195
    9. '#' → logprob: -9.754533767700195
    10. 'def' → logprob: -10.129533767700195

Token 121: '4' (ID: 19)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0077307261526584625
    2. ')' → logprob: -5.632730960845947
    3. '
' → logprob: -6.007730960845947
    4. '```' → logprob: -8.382730484008789
    5. '"""' → logprob: -8.632730484008789
    6. '    
' → logprob: -8.632730484008789
    7. '4' → logprob: -9.007730484008789
    8. ' 
' → logprob: -9.007730484008789
    9. ' ' → logprob: -9.132730484008789
    10. '    ' → logprob: -9.132730484008789

Token 122: '.' (ID: 13)
  Prédit: '.'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.049178704619407654
    2. '   ' → logprob: -3.0491786003112793
    3. ':' → logprob: -8.924179077148438
    4. 'def' → logprob: -8.924179077148438
    5. '#' → logprob: -9.049179077148438
    6. ')' → logprob: -9.049179077148438
    7. ' ' → logprob: -10.174179077148438
    8. '    ' → logprob: -10.924179077148438
    9. '  ' → logprob: -11.299179077148438
    10. ' #' → logprob: -12.549179077148438

Token 123: ' Si' (ID: 7832)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6993003487586975
    2. ' pass' → logprob: -1.0743002891540527
    3. ' return' → logprob: -2.1993002891540527
    4. '#' → logprob: -4.199300289154053
    5. 'pass' → logprob: -4.324300289154053
    6. ' #' → logprob: -4.824300289154053
    7. 'return' → logprob: -5.074300289154053
    8. 'Pass' → logprob: -6.574300289154053
    9. ' for' → logprob: -6.824300289154053
    10. 'def' → logprob: -7.074300289154053

Token 124: ' aucune' (ID: 51173)
  Prédit: ' __'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.017103897407650948
    2. ' True' → logprob: -5.142103672027588
    3. '__' → logprob: -5.392103672027588
    4. ' not' → logprob: -5.642103672027588
    5. 'True' → logprob: -7.517103672027588
    6. ' len' → logprob: -7.517103672027588
    7. ' la' → logprob: -8.017104148864746
    8. ' ' → logprob: -8.142104148864746
    9. ' ' → logprob: -8.267104148864746
    10. '   ' → logprob: -8.517104148864746

Token 125: ' condition' (ID: 7060)
  Prédit: ' solution'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' solution' → logprob: -0.5653514862060547
    2. ' des' → logprob: -1.6903514862060547
    3. ' condition' → logprob: -2.0653514862060547
    4. ' suite' → logprob: -3.0653514862060547
    5. 'solution' → logprob: -4.065351486206055
    6. 'condition' → logprob: -4.190351486206055
    7. 'suite' → logprob: -4.565351486206055
    8. ' autre' → logprob: -4.940351486206055
    9. ' n' → logprob: -6.065351486206055
    10. '_' → logprob: -6.440351486206055

Token 126: ' précédente' (ID: 177319)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.023989813402295113
    2. 'n' → logprob: -4.898989677429199
    3. ' ' → logprob: -4.898989677429199
    4. ' suite' → logprob: -6.148989677429199
    5. ' ne' → logprob: -6.273989677429199
    6. ' de' → logprob: -6.898989677429199
    7. ' isn't' → logprob: -6.898989677429199
    8. ' ' → logprob: -7.898989677429199
    9. 'n't' → logprob: -8.0239896774292
    10. 'ne' → logprob: -8.1489896774292

Token 127: ' ne' (ID: 453)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.13982798159122467
    2. 'n' → logprob: -2.8898279666900635
    3. ':' → logprob: -3.6398279666900635
    4. ' ne' → logprob: -4.014828205108643
    5. ',' → logprob: -4.514828205108643
    6. '   ' → logprob: -5.639828205108643
    7. 'ne' → logprob: -6.014828205108643
    8. ' ,' → logprob: -6.014828205108643
    9. ' pass' → logprob: -6.264828205108643
    10. '_pass' → logprob: -6.764828205108643

Token 128: ' passe' (ID: 22210)
  Prédit: ' passe'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' passe' → logprob: -0.664868175983429
    2. ' pas' → logprob: -1.5398681163787842
    3. ' pass' → logprob: -2.039868116378784
    4. ' continue' → logprob: -3.789868116378784
    5. 'pas' → logprob: -4.164868354797363
    6. ' ' → logprob: -4.539868354797363
    7. ' ' → logprob: -4.664868354797363
    8. 'est' → logprob: -4.664868354797363
    9. ' passent' → logprob: -5.164868354797363
    10. ' s' → logprob: -5.289868354797363

Token 129: ',' (ID: 11)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.022307325154542923
    2. ',' → logprob: -4.022307395935059
    3. ':
' → logprob: -5.647307395935059
    4. '   ' → logprob: -7.522307395935059
    5. ' :' → logprob: -10.272307395935059
    6. ',
' → logprob: -10.772307395935059
    7. ':return' → logprob: -11.397307395935059
    8. '.' → logprob: -12.522307395935059
    9. ' :
' → logprob: -12.772307395935059
    10. '):' → logprob: -13.147307395935059

Token 130: ' effect' (ID: 3159)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.25131964683532715
    2. ' print' → logprob: -1.6263196468353271
    3. 'print' → logprob: -4.626319885253906
    4. ' return' → logprob: -4.751319885253906
    5. '    ' → logprob: -6.251319885253906
    6. ' retourne' → logprob: -6.501319885253906
    7. ' affiche' → logprob: -6.501319885253906
    8. ' imprime' → logprob: -7.001319885253906
    9. 'return' → logprob: -7.626319885253906
    10. ' afficher' → logprob: -8.751319885253906

Token 131: 'ue' (ID: 466)
  Prédit: 'ue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ue' → logprob: -0.0007634070352651179
    2. 'u' → logprob: -7.375763416290283
    3. 'uer' → logprob: -9.125762939453125
    4. 'uera' → logprob: -11.875762939453125
    5. 'ure' → logprob: -12.250762939453125
    6. 'uez' → logprob: -12.250762939453125
    7. '   ' → logprob: -13.250762939453125
    8. '#' → logprob: -13.375762939453125
    9. 'uent' → logprob: -13.375762939453125
    10. '
' → logprob: -13.875762939453125

Token 132: ' une' (ID: 2463)
  Prédit: ' un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.06839460134506226
    2. ' une' → logprob: -3.318394660949707
    3. 'un' → logprob: -4.818394660949707
    4. '   ' → logprob: -4.943394660949707
    5. ' print' → logprob: -5.193394660949707
    6. ' return' → logprob: -5.693394660949707
    7. 'une' → logprob: -6.443394660949707
    8. ' la' → logprob: -6.818394660949707
    9. ' ' → logprob: -7.443394660949707
    10. ' raise' → logprob: -7.693394660949707

Token 133: ' vér' (ID: 42524)
  Prédit: ' recherche'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' recherche' → logprob: -1.8505936861038208
    2. 'tri' → logprob: -2.4755935668945312
    3. ' permutation' → logprob: -2.4755935668945312
    4. '   ' → logprob: -3.1005935668945312
    5. 'print' → logprob: -3.1005935668945312
    6. 's' → logprob: -3.2255935668945312
    7. ' inversion' → logprob: -3.2255935668945312
    8. 'import' → logprob: -3.3505935668945312
    9. ' boucle' → logprob: -3.4755935668945312
    10. 'pass' → logprob: -3.4755935668945312

Token 134: 'ification' (ID: 3166)
  Prédit: 'ification'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ification' → logprob: -0.03583139553666115
    2. 'ifie' → logprob: -3.4108314514160156
    3. 'ication' → logprob: -7.160831451416016
    4. 'ifi' → logprob: -7.160831451416016
    5. 'if' → logprob: -7.785831451416016
    6. 'i' → logprob: -10.035831451416016
    7. 'ifier' → logprob: -10.160831451416016
    8. 'ific' → logprob: -10.785831451416016
    9. 'ifié' → logprob: -11.160831451416016
    10. 'ifiez' → logprob: -11.285831451416016

Token 135: ' cycl' (ID: 27789)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4709533452987671
    2. ' de' → logprob: -1.345953345298767
    3. ' des' → logprob: -2.8459534645080566
    4. ' if' → logprob: -4.470953464508057
    5. 'import' → logprob: -5.095953464508057
    6. ' supplémentaire' → logprob: -5.095953464508057
    7. ' complète' → logprob: -5.345953464508057
    8. ' du' → logprob: -5.345953464508057
    9. ' complément' → logprob: -5.595953464508057
    10. '    ' → logprob: -5.970953464508057

Token 136: 'ique' (ID: 2222)
  Prédit: 'ique'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ique' → logprob: -0.012757786549627781
    2. 'iquement' → logprob: -4.512757778167725
    3. 'e' → logprob: -7.137757778167725
    4. 'iques' → logprob: -8.762758255004883
    5. '       ' → logprob: -8.762758255004883
    6. 'aire' → logprob: -9.012758255004883
    7. 'ic' → logprob: -9.637758255004883
    8. '#' → logprob: -10.137758255004883
    9. 'u' → logprob: -10.262758255004883
    10. 'i' → logprob: -10.387758255004883

Token 137: ' sur' (ID: 1512)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.17716988921165466
    2. '
' → logprob: -1.927169919013977
    3. ':' → logprob: -4.4271697998046875
    4. 'def' → logprob: -6.9271697998046875
    5. '```' → logprob: -6.9271697998046875
    6. '    
' → logprob: -7.1771697998046875
    7. '<|end|>' → logprob: -7.8021697998046875
    8. ':
' → logprob: -8.302169799804688
    9. ' 
' → logprob: -8.427169799804688
    10. '  
' → logprob: -8.552169799804688

Token 138: ' un' (ID: 537)
  Prédit: ' le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.994705080986023
    2. ' les' → logprob: -1.244705080986023
    3. ' ' → logprob: -2.4947052001953125
    4. ' la' → logprob: -2.9947052001953125
    5. ' range' → logprob: -3.1197052001953125
    6. ' A' → logprob: -3.2447052001953125
    7. ' i' → logprob: -3.6197052001953125
    8. ' B' → logprob: -3.7447052001953125
    9. 'A' → logprob: -4.2447052001953125
    10. ' l' → logprob: -4.4947052001953125

Token 139: ' ré' (ID: 3146)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.27453163266181946
    2. ' tableau' → logprob: -1.774531602859497
    3. ' cycle' → logprob: -3.399531602859497
    4. 'a' → logprob: -5.524531841278076
    5. ' autre' → logprob: -5.774531841278076
    6. ' nombre' → logprob: -5.899531841278076
    7. 'es' → logprob: -6.024531841278076
    8. ' e' → logprob: -6.274531841278076
    9. ' double' → logprob: -6.274531841278076
    10. ' des' → logprob: -6.274531841278076

Token 140: 'arr' (ID: 1614)
  Prédit: 'arr'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'arr' → logprob: -0.09044913947582245
    2. 'p' → logprob: -3.965449094772339
    3. 'volution' → logprob: -4.465449333190918
    4. 'el' → logprob: -4.465449333190918
    5. 'ord' → logprob: -5.465449333190918
    6. 'pertoire' → logprob: -5.465449333190918
    7. 'é' → logprob: -5.465449333190918
    8. 'ex' → logprob: -5.715449333190918
    9. 'c' → logprob: -5.840449333190918
    10. 'index' → logprob: -6.215449333190918

Token 141: 'angement' (ID: 58322)
  Prédit: 'angement'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'angement' → logprob: -0.1670638620853424
    2. 'an' → logprob: -1.91706383228302
    3. 'ang' → logprob: -5.6670637130737305
    4. 'ange' → logprob: -6.2920637130737305
    5. '
' → logprob: -7.9170637130737305
    6. 'anged' → logprob: -8.66706371307373
    7. 'angé' → logprob: -8.79206371307373
    8. '   ' → logprob: -8.91706371307373
    9. 'anger' → logprob: -9.16706371307373
    10. 'angements' → logprob: -9.29206371307373

Token 142: ' complexe' (ID: 78615)
  Prédit: ' des'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.18278290331363678
    2. '   ' → logprob: -2.6827828884124756
    3. ' complet' → logprob: -3.0577828884124756
    4. ' de' → logprob: -4.057783126831055
    5. ' cycl' → logprob: -4.307783126831055
    6. ' du' → logprob: -5.807783126831055
    7. ':' → logprob: -6.432783126831055
    8. '.' → logprob: -6.557783126831055
    9. ' complète' → logprob: -6.557783126831055
    10. ' possible' → logprob: -6.932783126831055

Token 143: ' pour' (ID: 1930)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06893429160118103
    2. ':' → logprob: -2.943934202194214
    3. 'def' → logprob: -4.943934440612793
    4. ')' → logprob: -6.068934440612793
    5. '
' → logprob: -6.193934440612793
    6. '):' → logprob: -7.568934440612793
    7. '  ' → logprob: -7.818934440612793
    8. '```' → logprob: -8.193934440612793
    9. ' :' → logprob: -8.443934440612793
    10. ' ' → logprob: -8.818934440612793

Token 144: ' déterminer' (ID: 122024)
  Prédit: ' les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.793532133102417
    2. ' i' → logprob: -2.668532133102417
    3. ' trouver' → logprob: -2.793532133102417
    4. ' ' → logprob: -3.043532133102417
    5. ' le' → logprob: -3.168532133102417
    6. ' la' → logprob: -3.418532133102417
    7. ' déterminer' → logprob: -3.668532133102417
    8. ' voir' → logprob: -3.793532133102417
    9. ' tous' → logprob: -3.918532133102417
    10. ' permettre' → logprob: -4.168532371520996

Token 145: ' si' (ID: 1784)
  Prédit: ' si'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' si' → logprob: -0.48676276206970215
    2. ' la' → logprob: -1.4867627620697021
    3. ' if' → logprob: -2.236762762069702
    4. ' le' → logprob: -3.861762762069702
    5. ' l' → logprob: -4.236763000488281
    6. ' un' → logprob: -5.361763000488281
    7. ' s' → logprob: -5.736763000488281
    8. ' True' → logprob: -6.236763000488281
    9. 'si' → logprob: -6.361763000488281
    10. ' une' → logprob: -6.986763000488281

Token 146: ' une' (ID: 2463)
  Prédit: ' True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.5345571637153625
    2. ' la' → logprob: -1.6595571041107178
    3. ' une' → logprob: -2.7845571041107178
    4. ' un' → logprob: -3.1595571041107178
    5. ' le' → logprob: -3.1595571041107178
    6. ' possible' → logprob: -4.034557342529297
    7. 'True' → logprob: -4.159557342529297
    8. ' l' → logprob: -5.159557342529297
    9. ' ' → logprob: -5.159557342529297
    10. 'une' → logprob: -5.534557342529297

Token 147: ' permutation' (ID: 135200)
  Prédit: ' solution'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' solution' → logprob: -0.1693544089794159
    2. ' condition' → logprob: -3.0443544387817383
    3. ' rotation' → logprob: -3.4193544387817383
    4. 'solution' → logprob: -3.9193544387817383
    5. ' permutation' → logprob: -4.544354438781738
    6. ' possible' → logprob: -5.294354438781738
    7. ' possibilité' → logprob: -5.544354438781738
    8. 'rotation' → logprob: -5.794354438781738
    9. 'condition' → logprob: -6.044354438781738
    10. ' ' → logprob: -6.044354438781738

Token 148: ' particulière' (ID: 123511)
  Prédit: '_possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_possible' → logprob: -0.7013711929321289
    2. '_' → logprob: -1.451371192932129
    3. ' possible' → logprob: -1.701371192932129
    4. 'possible' → logprob: -3.576371192932129
    5. ' des' → logprob: -4.201371192932129
    6. ')' → logprob: -4.326371192932129
    7. ' existe' → logprob: -5.201371192932129
    8. ' cycl' → logprob: -5.576371192932129
    9. '_per' → logprob: -6.201371192932129
    10. ' _' → logprob: -6.326371192932129

Token 149: ' permet' (ID: 11798)
  Prédit: ' est'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' est' → logprob: -0.5463380813598633
    2. ' peut' → logprob: -1.5463380813598633
    3. ' existe' → logprob: -2.4213380813598633
    4. ' permet' → logprob: -2.9213380813598633
    5. ' de' → logprob: -4.296338081359863
    6. '   ' → logprob: -4.671338081359863
    7. ' possible' → logprob: -5.171338081359863
    8. 'est' → logprob: -5.421338081359863
    9. 'import' → logprob: -5.421338081359863
    10. ' permettant' → logprob: -5.546338081359863

Token 150: ' d' (ID: 272)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.5414464473724365
    2. ' d' → logprob: -1.0414464473724365
    3. ' à' → logprob: -3.2914464473724365
    4. 't' → logprob: -4.291446685791016
    5. ' ' → logprob: -5.166446685791016
    6. '   ' → logprob: -6.041446685791016
    7. ' la' → logprob: -7.041446685791016
    8. ' un' → logprob: -7.166446685791016
    9. 'd' → logprob: -7.416446685791016
    10. 'de' → logprob: -7.541446685791016

Token 151: ''ét' (ID: 23771)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.3761723041534424
    2. ''avoir' → logprob: -2.0011723041534424
    3. ''obtenir' → logprob: -2.2511723041534424
    4. ''être' → logprob: -3.7511723041534424
    5. ''ac' → logprob: -4.126172065734863
    6. ''assurer' → logprob: -4.251172065734863
    7. ''' → logprob: -5.126172065734863
    8. ''effect' → logprob: -6.626172065734863
    9. ' résoudre' → logprob: -6.751172065734863
    10. 'a' → logprob: -6.876172065734863

Token 152: 'abl' (ID: 18122)
  Prédit: 'endre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'endre' → logprob: -1.0034772157669067
    2. 're' → logprob: -1.1284772157669067
    3. 'abl' → logprob: -1.5034772157669067
    4. 'er' → logprob: -3.753477096557617
    5. 'e' → logprob: -3.878477096557617
    6. 'irer' → logprob: -4.753477096557617
    7. 'r' → logprob: -5.378477096557617
    8. 'ré' → logprob: -5.503477096557617
    9. '```' → logprob: -6.128477096557617
    10. 'u' → logprob: -6.128477096557617

Token 153: 'ir' (ID: 380)
  Prédit: 'ir'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ir' → logprob: -0.00023238400171976537
    2. 'i' → logprob: -8.875232696533203
    3. 'e' → logprob: -9.750232696533203
    4. 'ier' → logprob: -12.125232696533203
    5. '   ' → logprob: -12.125232696533203
    6. '#' → logprob: -12.375232696533203
    7. 'er' → logprob: -12.875232696533203
    8. 'is' → logprob: -13.500232696533203
    9. 'a' → logprob: -13.625232696533203
    10. '```' → logprob: -13.625232696533203

Token 154: ' la' (ID: 557)
  Prédit: ' la'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.174789696931839
    2. ' l' → logprob: -2.7997896671295166
    3. ' une' → logprob: -3.0497896671295166
    4. ' que' → logprob: -4.049789905548096
    5. ' un' → logprob: -4.174789905548096
    6. ' le' → logprob: -4.424789905548096
    7. 'le' → logprob: -5.424789905548096
    8. 'une' → logprob: -7.174789905548096
    9. ' ' → logprob: -7.299789905548096
    10. 'la' → logprob: -7.799789905548096

Token 155: ' contr' (ID: 6030)
  Prédit: ' condition'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' condition' → logprob: -0.09416628628969193
    2. ' relation' → logprob: -3.7191662788391113
    3. 'condition' → logprob: -3.7191662788391113
    4. ' compat' → logprob: -4.719166278839111
    5. ' solution' → logprob: -5.219166278839111
    6. ' comparaison' → logprob: -5.219166278839111
    7. ' valid' → logprob: -5.594166278839111
    8. 'relation' → logprob: -6.219166278839111
    9. ' compar' → logprob: -6.219166278839111
    10. ' in' → logprob: -6.594166278839111

Token 156: 'ainte' (ID: 48434)
  Prédit: 'ainte'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ainte' → logprob: -0.3294057846069336
    2. 'ôle' → logprob: -1.4544057846069336
    3. 'ole' → logprob: -3.9544057846069336
    4. 'a' → logprob: -4.829405784606934
    5. 'o' → logprob: -5.079405784606934
    6. 'aine' → logprob: -5.954405784606934
    7. 'aint' → logprob: -6.579405784606934
    8. 'e' → logprob: -6.579405784606934
    9. 'ô' → logprob: -6.954405784606934
    10. 'ain' → logprob: -7.079405784606934

Token 157: ' impos' (ID: 12130)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1598188281059265
    2. ':' → logprob: -3.0348188877105713
    3. '
' → logprob: -3.0348188877105713
    4. 'def' → logprob: -3.4098188877105713
    5. ')' → logprob: -5.034818649291992
    6. '```' → logprob: -5.659818649291992
    7. '\n' → logprob: -6.409818649291992
    8. '"""' → logprob: -6.909818649291992
    9. '    
' → logprob: -7.159818649291992
    10. '):' → logprob: -7.284818649291992

Token 158: 'ée' (ID: 2894)
  Prédit: 'ée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ée' → logprob: -0.18214987218379974
    2. 'er' → logprob: -1.807149887084961
    3. 'ee' → logprob: -6.932149887084961
    4. 'é' → logprob: -7.057149887084961
    5. 'e' → logprob: -7.932149887084961
    6. 'ées' → logprob: -9.182149887084961
    7. 'és' → logprob: -10.807149887084961
    8. 'd' → logprob: -11.307149887084961
    9. 'es' → logprob: -11.557149887084961
    10. 'ément' → logprob: -11.557149887084961

Token 159: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14502130448818207
    2. ':' → logprob: -2.8950212001800537
    3. 'def' → logprob: -3.0200212001800537
    4. '
' → logprob: -4.145021438598633
    5. ')' → logprob: -5.145021438598633
    6. '):' → logprob: -6.145021438598633
    7. '```' → logprob: -6.270021438598633
    8. ':
' → logprob: -7.145021438598633
    9. 'import' → logprob: -7.645021438598633
    10. '    
' → logprob: -7.770021438598633

Token 160: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2610163688659668
    2. '
' → logprob: -1.7610163688659668
    3. ':' → logprob: -3.136016368865967
    4. '    
' → logprob: -5.636016368865967
    5. ' 
' → logprob: -6.136016368865967
    6. 'def' → logprob: -6.511016368865967
    7. ' ' → logprob: -6.886016368865967
    8. '  
' → logprob: -7.011016368865967
    9. '(' → logprob: -7.136016368865967
    10. ')' → logprob: -7.511016368865967

Token 161: ' Ren' (ID: 17631)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6251315474510193
    2. '"""' → logprob: -1.250131607055664
    3. ')' → logprob: -2.500131607055664
    4. ' """' → logprob: -3.500131607055664
    5. ':' → logprob: -4.000131607055664
    6. '```' → logprob: -4.750131607055664
    7. '
' → logprob: -4.750131607055664
    8. 'n' → logprob: -5.250131607055664
    9. ' ' → logprob: -5.250131607055664
    10. '"' → logprob: -5.250131607055664

Token 162: 'voie' (ID: 70072)
  Prédit: 'voie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'voie' → logprob: -0.08413001149892807
    2. 't' → logprob: -2.834130048751831
    3. 'voit' → logprob: -5.209129810333252
    4. 'e' → logprob: -5.959129810333252
    5. 'omme' → logprob: -6.334129810333252
    6. 'd' → logprob: -6.459129810333252
    7. 'voy' → logprob: -6.459129810333252
    8. 'et' → logprob: -6.459129810333252
    9. 'oit' → logprob: -6.709129810333252
    10. 'v' → logprob: -6.959129810333252

Token 163: ' '' (ID: 461)
  Prédit: ' True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.0023771999403834343
    2. ' None' → logprob: -6.502377033233643
    3. ' False' → logprob: -7.627377033233643
    4. 'True' → logprob: -7.877377033233643
    5. ' ' → logprob: -12.5023775100708
    6. 'False' → logprob: -13.7523775100708
    7. 'None' → logprob: -14.0023775100708
    8. ' true' → logprob: -14.0023775100708
    9. ' ' → logprob: -14.1273775100708
    10. ' "' → logprob: -14.1273775100708

Token 164: 'Yes' (ID: 13022)
  Prédit: 'OK'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'OK' → logprob: -0.39907705783843994
    2. 'YES' → logprob: -2.2740769386291504
    3. '"' → logprob: -2.6490769386291504
    4. 'O' → logprob: -2.8990769386291504
    5. 'Possible' → logprob: -3.5240769386291504
    6. 'True' → logprob: -3.8990769386291504
    7. 'Oui' → logprob: -4.64907693862915
    8. ' OK' → logprob: -4.89907693862915
    9. 'Yes' → logprob: -5.14907693862915
    10. ' O' → logprob: -5.39907693862915

Token 165: ''' (ID: 6)
  Prédit: '''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.008417651988565922
    2. '"' → logprob: -5.75841760635376
    3. '"""' → logprob: -6.13341760635376
    4. '```' → logprob: -6.25841760635376
    5. ''''' → logprob: -7.50841760635376
    6. '')' → logprob: -8.633418083190918
    7. '',' → logprob: -8.883418083190918
    8. 'def' → logprob: -9.883418083190918
    9. '\n' → logprob: -10.258418083190918
    10. '
' → logprob: -10.633418083190918

Token 166: ' ou' (ID: 2031)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 167: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.03371843323111534
    2. ' '' → logprob: -3.4087183475494385
    3. '"' → logprob: -10.53371810913086
    4. ' ' → logprob: -11.78371810913086
    5. ' ' → logprob: -12.03371810913086
    6. '   ' → logprob: -12.15871810913086
    7. ''N' → logprob: -12.28371810913086
    8. '```' → logprob: -12.40871810913086
    9. ''O' → logprob: -12.53371810913086
    10. ' No' → logprob: -13.40871810913086

Token 168: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.03839259222149849
    2. ' No' → logprob: -3.2883925437927246
    3. ''' → logprob: -8.038393020629883
    4. 'Non' → logprob: -10.663393020629883
    5. ' '' → logprob: -13.288393020629883
    6. ' Non' → logprob: -13.413393020629883
    7. ' ' → logprob: -14.163393020629883
    8. ' ' → logprob: -15.163393020629883
    9. '_No' → logprob: -15.538393020629883
    10. 'NO' → logprob: -15.663393020629883

Token 169: ''' (ID: 6)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.7364306449890137
    2. ''' → logprob: -1.3614306449890137
    3. '"""' → logprob: -1.6114306449890137
    4. '```' → logprob: -3.6114306449890137
    5. ')' → logprob: -4.236430644989014
    6. ''''' → logprob: -4.986430644989014
    7. '   ' → logprob: -5.111430644989014
    8. 'def' → logprob: -5.861430644989014
    9. ':' → logprob: -5.986430644989014
    10. '"""
' → logprob: -6.236430644989014

Token 170: ' selon' (ID: 27571)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.06168719381093979
    2. '   ' → logprob: -3.1866872310638428
    3. '():' → logprob: -4.311686992645264
    4. '(' → logprob: -6.186686992645264
    5. '
' → logprob: -7.186686992645264
    6. ' :' → logprob: -8.061687469482422
    7. '  
' → logprob: -8.186687469482422
    8. '):' → logprob: -8.311687469482422
    9. '    
' → logprob: -8.436687469482422
    10. 'def' → logprob: -8.561687469482422

Token 171: ' la' (ID: 557)
  Prédit: ' la'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.1343710720539093
    2. ' l' → logprob: -2.259371042251587
    3. ' le' → logprob: -3.884371042251587
    4. ' ' → logprob: -9.134370803833008
    5. ' the' → logprob: -9.509370803833008
    6. '```' → logprob: -9.759370803833008
    7. '  ' → logprob: -10.009370803833008
    8. 'l' → logprob: -10.009370803833008
    9. ' return' → logprob: -10.259370803833008
    10. '<|end|>' → logprob: -10.259370803833008

Token 172: ' solution' (ID: 7578)
  Prédit: ' résultat'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' résultat' → logprob: -0.15982165932655334
    2. ' condition' → logprob: -2.9098217487335205
    3. ' resultat' → logprob: -3.5348217487335205
    4. ' result' → logprob: -3.6598217487335205
    5. ' présence' → logprob: -4.909821510314941
    6. ' réponse' → logprob: -5.159821510314941
    7. ' verdict' → logprob: -5.534821510314941
    8. ' logique' → logprob: -6.034821510314941
    9. ' résultats' → logprob: -6.159821510314941
    10. ' suite' → logprob: -6.409821510314941

Token 173: ' trouv' (ID: 40254)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.18881990015506744
    2. '   ' → logprob: -2.3138198852539062
    3. '():' → logprob: -3.1888198852539062
    4. '
' → logprob: -4.313819885253906
    5. '(' → logprob: -5.313819885253906
    6. '):' → logprob: -5.813819885253906
    7. 'def' → logprob: -6.313819885253906
    8. ')' → logprob: -6.438819885253906
    9. ':
' → logprob: -6.688819885253906
    10. '(
' → logprob: -7.188819885253906

Token 174: 'ée' (ID: 2894)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.19799330830574036
    2. '"""
' → logprob: -2.572993278503418
    3. 'ée' → logprob: -2.947993278503418
    4. '"' → logprob: -4.197993278503418
    5. ''' → logprob: -4.322993278503418
    6. 'é' → logprob: -4.697993278503418
    7. ''''
' → logprob: -5.947993278503418
    8. ''
' → logprob: -6.072993278503418
    9. '"""' → logprob: -6.572993278503418
    10. '"
' → logprob: -6.572993278503418

Token 175: '.
' (ID: 558)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.10565952956676483
    2. '   ' → logprob: -2.4806594848632812
    3. '
' → logprob: -4.730659484863281
    4. '):' → logprob: -5.355659484863281
    5. ')' → logprob: -6.480659484863281
    6. '    
' → logprob: -8.230659484863281
    7. ':
' → logprob: -8.480659484863281
    8. 'def' → logprob: -8.605659484863281
    9. ' :' → logprob: -8.730659484863281
    10. '```' → logprob: -9.230659484863281

Token 176: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08993610739707947
    2. '
' → logprob: -3.0899360179901123
    3. '"""' → logprob: -3.9649360179901123
    4. '```' → logprob: -4.589936256408691
    5. '\n' → logprob: -5.589936256408691
    6. ')' → logprob: -6.339936256408691
    7. '    
' → logprob: -6.589936256408691
    8. 'def' → logprob: -6.964936256408691
    9. ' 
' → logprob: -7.214936256408691
    10. ':' → logprob: -7.464936256408691

Token 177: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.054165586829185486
    2. ':' → logprob: -3.3041656017303467
    3. '\n' → logprob: -5.429165363311768
    4. '    
' → logprob: -5.679165363311768
    5. '
' → logprob: -5.929165363311768
    6. 'def' → logprob: -6.429165363311768
    7. ')' → logprob: -7.554165363311768
    8. '    ' → logprob: -7.554165363311768
    9. '\' → logprob: -7.804165363311768
    10. ' ' → logprob: -7.929165363311768

Token 178: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.061827052384614944
    2. '
' → logprob: -3.3118269443511963
    3. '    
' → logprob: -3.8118269443511963
    4. 'import' → logprob: -7.061827182769775
    5. '    ' → logprob: -8.686826705932617
    6. '\n' → logprob: -9.561826705932617
    7. 'n' → logprob: -9.811826705932617
    8. '    
    
' → logprob: -9.936826705932617
    9. 'newline' → logprob: -10.186826705932617
    10. 'def' → logprob: -10.686826705932617

Token 179: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14179125428199768
    2. 'n' → logprob: -2.141791343688965
    3. 'import' → logprob: -4.516791343688965
    4. 'N' → logprob: -6.016791343688965
    5. '    
' → logprob: -7.266791343688965
    6. ' n' → logprob: -8.266791343688965
    7. '#' (adapté à ' #') → logprob: -8.891791343688965
    8. '
' → logprob: -9.516791343688965
    9. ' import' → logprob: -9.891791343688965
    10. 'input' → logprob: -10.266791343688965

Token 180: ' Lecture' (ID: 106534)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.8803862929344177
    2. ' n' → logprob: -1.2553863525390625
    3. '   ' → logprob: -1.8803863525390625
    4. 'N' → logprob: -2.3803863525390625
    5. ' N' → logprob: -3.5053863525390625
    6. 'import' → logprob: -4.3803863525390625
    7. ' pass' → logprob: -5.6303863525390625
    8. ' import' → logprob: -6.0053863525390625
    9. '    
' → logprob: -6.5053863525390625
    10. ' #' → logprob: -6.7553863525390625

Token 181: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.059694331139326096
    2. 'n' → logprob: -3.809694290161133
    3. ' =' → logprob: -4.684694290161133
    4. ' n' → logprob: -5.059694290161133
    5. ' N' → logprob: -5.184694290161133
    6. 'N' → logprob: -5.309694290161133
    7. '    
' → logprob: -5.934694290161133
    8. 'import' → logprob: -6.309694290161133
    9. ' des' → logprob: -6.809694290161133
    10. ' de' → logprob: -7.184694290161133

Token 182: ' la' (ID: 557)
  Prédit: ' la'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.07088282704353333
    2. ' input' → logprob: -3.695882797241211
    3. 'N' → logprob: -4.070882797241211
    4. 'input' → logprob: -4.820882797241211
    5. ' N' → logprob: -4.945882797241211
    6. 'la' → logprob: -5.820882797241211
    7. ' l' → logprob: -5.820882797241211
    8. ' ' → logprob: -6.320882797241211
    9. ' n' → logprob: -7.070882797241211
    10. 'l' → logprob: -7.195882797241211

Token 183: ' taille' (ID: 41644)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -1.1139742136001587
    2. 'n' → logprob: -1.4889742136001587
    3. 'input' → logprob: -1.4889742136001587
    4. ' input' → logprob: -2.613974094390869
    5. 's' → logprob: -3.113974094390869
    6. 'entrée' → logprob: -3.863974094390869
    7. ' taille' → logprob: -3.863974094390869
    8. 'int' → logprob: -4.238974094390869
    9. 'N' → logprob: -4.363974094390869
    10. ' N' → logprob: -5.113974094390869

Token 184: ' du' (ID: 1462)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.003626439021900296
    2. 'n' → logprob: -6.503626346588135
    3. 'N' → logprob: -6.878626346588135
    4. ' =' → logprob: -7.128626346588135
    5. '    
' → logprob: -8.628626823425293
    6. '
' → logprob: -9.503626823425293
    7. '=' → logprob: -11.378626823425293
    8. ' N' → logprob: -12.128626823425293
    9. ' n' → logprob: -12.378626823425293
    10. 'import' → logprob: -12.753626823425293

Token 185: ' tableau' (ID: 67053)
  Prédit: ' tableau'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tableau' → logprob: -0.009151002392172813
    2. 'table' → logprob: -4.759150981903076
    3. ' table' → logprob: -8.509151458740234
    4. 'array' → logprob: -9.259151458740234
    5. 'tab' → logprob: -9.634151458740234
    6. ' ' → logprob: -9.884151458740234
    7. ' array' → logprob: -10.134151458740234
    8. 't' → logprob: -11.009151458740234
    9. ' tableaux' → logprob: -11.009151458740234
    10. ' Tableau' → logprob: -11.009151458740234

Token 186: '
' (ID: 198)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -1.0015666484832764
    2. 'n' → logprob: -1.1265666484832764
    3. '   ' → logprob: -1.3765666484832764
    4. ' N' → logprob: -3.2515666484832764
    5. ' n' → logprob: -4.2515668869018555
    6. '
' → logprob: -6.2515668869018555
    7. '    
' → logprob: -7.0015668869018555
    8. '\n' → logprob: -9.501566886901855
    9. ' 
' → logprob: -9.751566886901855
    10. '	N' → logprob: -10.001566886901855

Token 187: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6308463215827942
    2. 'N' → logprob: -1.1308462619781494
    3. ' N' → logprob: -2.3808462619781494
    4. 'n' → logprob: -3.0058462619781494
    5. ' n' → logprob: -6.0058465003967285
    6. '    
' → logprob: -7.6308465003967285
    7. '	N' → logprob: -9.63084602355957
    8. ' 
' → logprob: -10.75584602355957
    9. ' ' → logprob: -10.75584602355957
    10. '	n' → logprob: -11.13084602355957

Token 188: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' (adapté à ' N') → logprob: -0.7262024879455566
    2. 'n' → logprob: -1.2262024879455566
    3. ' n' → logprob: -2.1012024879455566
    4. ' N' → logprob: -2.7262024879455566
    5. '   ' → logprob: -3.3512024879455566
    6. ' ' → logprob: -11.476202011108398
    7. '	n' → logprob: -11.476202011108398
    8. 'import' → logprob: -12.601202011108398
    9. '	N' → logprob: -13.101202011108398
    10. '  ' → logprob: -13.476202011108398

Token 189: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.029906222596764565
    2. '=' → logprob: -3.5299062728881836
    3. '=int' → logprob: -9.154906272888184
    4. ',' → logprob: -10.029906272888184
    5. '=input' → logprob: -12.654906272888184
    6. ' ' → logprob: -13.279906272888184
    7. ' ' → logprob: -14.279906272888184
    8. '   ' → logprob: -15.404906272888184
    9. ' ,' → logprob: -15.654906272888184
    10. ',int' → logprob: -17.654905319213867

Token 190: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.005233882926404476
    2. 'int' → logprob: -5.2552337646484375
    3. ' ' → logprob: -16.130233764648438
    4. '=int' → logprob: -18.630233764648438
    5. '	int' → logprob: -19.380233764648438
    6. ' ' → logprob: -20.255233764648438
    7. '(int' → logprob: -20.880233764648438
    8. '   ' → logprob: -21.005233764648438
    9. '[int' → logprob: -21.130233764648438
    10. ' input' → logprob: -21.505233764648438

Token 191: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0004523606039583683
    2. '(' → logprob: -7.750452518463135
    3. 'input' → logprob: -10.750452041625977
    4. ' input' → logprob: -15.750452041625977
    5. '()' → logprob: -16.500452041625977
    6. ' (' → logprob: -17.625452041625977
    7. '=input' → logprob: -17.750452041625977
    8. '(
' → logprob: -18.625452041625977
    9. '	input' → logprob: -19.250452041625977
    10. '<input' → logprob: -20.500452041625977

Token 192: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.004141910932958126
    2. '()' → logprob: -5.504141807556152
    3. ')' → logprob: -10.379141807556152
    4. '().' → logprob: -10.879141807556152
    5. '(' → logprob: -12.379141807556152
    6. '())
' → logprob: -12.629141807556152
    7. ' ())' → logprob: -13.129141807556152
    8. '()))' → logprob: -13.379141807556152
    9. '();)' → logprob: -13.754141807556152
    10. '()),' → logprob: -15.004141807556152

Token 193: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.39430129528045654
    2. '   ' → logprob: -1.3943012952804565
    3. '    
' → logprob: -3.019301414489746
    4. '  
' → logprob: -4.519301414489746
    5. '<|end|>' → logprob: -5.019301414489746
    6. ' 
' → logprob: -5.394301414489746
    7. 'A' → logprob: -6.519301414489746
    8. '   
' → logprob: -6.769301414489746
    9. ' A' → logprob: -7.019301414489746
    10. '  ' → logprob: -7.269301414489746

Token 194: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5433183312416077
    2. 'A' → logprob: -1.418318271636963
    3. ' A' → logprob: -2.293318271636963
    4. '
' → logprob: -3.418318271636963
    5. '#' (adapté à ' #') → logprob: -3.793318271636963
    6. '    
' → logprob: -4.293318271636963
    7. '<|end|>' → logprob: -6.293318271636963
    8. ' 
' → logprob: -6.668318271636963
    9. ' #' → logprob: -6.793318271636963
    10. ' ' → logprob: -6.918318271636963

Token 195: ' Lecture' (ID: 106534)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.13514846563339233
    2. ' A' → logprob: -2.260148525238037
    3. '#' → logprob: -3.885148525238037
    4. '   ' → logprob: -7.385148525238037
    5. ' #' → logprob: -7.760148525238037
    6. 'a' → logprob: -7.885148525238037
    7. ' a' → logprob: -10.385148048400879
    8. ' ' → logprob: -10.385148048400879
    9. 'def' → logprob: -11.822648048400879
    10. '
' → logprob: -12.072648048400879

Token 196: ' et' (ID: 859)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.29055842757225037
    2. ' des' → logprob: -1.4155584573745728
    3. ' de' → logprob: -5.290558338165283
    4. 'des' → logprob: -6.040558338165283
    5. ' ()' → logprob: -7.415558338165283
    6. '_des' → logprob: -7.915558338165283
    7. '   ' → logprob: -7.915558338165283
    8. '(' → logprob: -8.665558815002441
    9. 's' → logprob: -9.540558815002441
    10. 'A' → logprob: -9.665558815002441

Token 197: ' conversion' (ID: 22165)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' la' → logprob: -1.190819263458252
    2. ' A' → logprob: -1.565819263458252
    3. ' list' → logprob: -1.565819263458252
    4. 'A' → logprob: -2.440819263458252
    5. ' map' → logprob: -2.565819263458252
    6. ' split' → logprob: -3.315819263458252
    7. 'split' → logprob: -3.690819263458252
    8. 's' → logprob: -4.565819263458252
    9. 'map' → logprob: -4.690819263458252
    10. ' input' → logprob: -5.065819263458252

Token 198: ' du' (ID: 1462)
  Prédit: ' des'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.013383275829255581
    2. ' de' → logprob: -4.763383388519287
    3. '   ' → logprob: -6.263383388519287
    4. 'des' → logprob: -6.513383388519287
    5. ' A' → logprob: -7.138383388519287
    6. ' ' → logprob: -8.763382911682129
    7. 'A' → logprob: -8.888382911682129
    8. ' d' → logprob: -9.263382911682129
    9. ' of' → logprob: -9.388382911682129
    10. 's' → logprob: -10.763382911682129

Token 199: ' tableau' (ID: 67053)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.2662893235683441
    2. ' A' → logprob: -1.5162893533706665
    3. 'list' → logprob: -5.891289234161377
    4. ' input' → logprob: -6.141289234161377
    5. ' list' → logprob: -6.141289234161377
    6. 'input' → logprob: -6.391289234161377
    7. ' tableau' → logprob: -6.391289234161377
    8. 'B' → logprob: -7.141289234161377
    9. ' B' → logprob: -7.391289234161377
    10. 'a' → logprob: -7.641289234161377

Token 200: ' A' (ID: 355)
  Prédit: ' A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.2527669668197632
    2. 'A' → logprob: -1.5027669668197632
    3. ' des' → logprob: -7.752767086029053
    4. 's' → logprob: -9.252766609191895
    5. ' B' → logprob: -9.627766609191895
    6. '   ' → logprob: -9.752766609191895
    7. ' ' → logprob: -10.252766609191895
    8. ' =' → logprob: -10.502766609191895
    9. 'B' → logprob: -10.627766609191895
    10. '_A' → logprob: -10.877766609191895

Token 201: ' en' (ID: 469)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.004126842133700848
    2. '=' → logprob: -6.379127025604248
    3. '   ' → logprob: -6.629127025604248
    4. 'A' → logprob: -7.004127025604248
    5. ' A' → logprob: -9.37912654876709
    6. '
' → logprob: -9.87912654876709
    7. ' =
' → logprob: -10.87912654876709
    8. '=A' → logprob: -11.00412654876709
    9. '=[]
' → logprob: -12.37912654876709
    10. '    
' → logprob: -12.62912654876709

Token 202: ' ent' (ID: 1121)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -1.0032002925872803
    2. ' liste' → logprob: -1.0032002925872803
    3. 'liste' → logprob: -1.7532002925872803
    4. ' list' → logprob: -2.3782002925872803
    5. ' listes' → logprob: -7.753200531005859
    6. 'lst' → logprob: -9.87820053100586
    7. 'lista' → logprob: -9.87820053100586
    8. ' ' → logprob: -10.87820053100586
    9. '[' → logprob: -10.87820053100586
    10. ' lista' → logprob: -11.25320053100586

Token 203: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.00965468306094408
    2. 't' → logprob: -5.759654521942139
    3. 'ier' → logprob: -6.134654521942139
    4. 'ières' → logprob: -6.384654521942139
    5. 'rée' → logprob: -6.634654521942139
    6. 'r' → logprob: -7.634654521942139
    7. 'ière' → logprob: -7.634654521942139
    8. '   ' → logprob: -10.009654998779297
    9. 'rees' → logprob: -10.259654998779297
    10. 'er' → logprob: -10.384654998779297

Token 204: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05505075305700302
    2. 'A' → logprob: -3.180050849914551
    3. '    
' → logprob: -5.055050849914551
    4. '
' → logprob: -5.430050849914551
    5. ' A' → logprob: -6.805050849914551
    6. 'a' → logprob: -10.55505084991455
    7. 's' → logprob: -10.55505084991455
    8. '   
' → logprob: -11.68005084991455
    9. '    ' → logprob: -11.80505084991455
    10. ' 
' → logprob: -12.30505084991455

Token 205: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06394222378730774
    2. 'A' → logprob: -2.9389421939849854
    3. '
' → logprob: -5.3139424324035645
    4. ' A' → logprob: -6.0639424324035645
    5. '    
' → logprob: -6.4389424324035645
    6. 'a' → logprob: -9.688941955566406
    7. 's' → logprob: -10.938941955566406
    8. ' 
' → logprob: -11.313941955566406
    9. '   
' → logprob: -11.438941955566406
    10. '	A' → logprob: -11.438941955566406

Token 206: ' A' (ID: 355)
  Prédit: ' A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.31367018818855286
    2. 'A' (adapté à ' A') → logprob: -1.3136701583862305
    3. '   ' → logprob: -7.8136701583862305
    4. '	A' → logprob: -13.43867015838623
    5. 'a' → logprob: -13.93867015838623
    6. '    ' → logprob: -14.56367015838623
    7. ' a' → logprob: -14.56367015838623
    8. ' ' → logprob: -14.81367015838623
    9. '    
' → logprob: -15.31367015838623
    10. '  ' → logprob: -16.438671112060547

Token 207: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.12692958116531372
    2. '=' → logprob: -2.126929521560669
    3. ' ' → logprob: -14.25192928314209
    4. '=list' → logprob: -15.62692928314209
    5. '   ' → logprob: -15.75192928314209
    6. '=[' → logprob: -15.87692928314209
    7. 's' → logprob: -16.001930236816406
    8. ' =[' → logprob: -16.126930236816406
    9. '=input' → logprob: -16.376930236816406
    10. '_' → logprob: -17.251930236816406

Token 208: ' list' (ID: 1562)
  Prédit: ' list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.12692831456661224
    2. 'list' → logprob: -2.1269283294677734
    3. '[list' → logprob: -16.751928329467773
    4. '[' → logprob: -16.876928329467773
    5. ' [' → logprob: -17.251928329467773
    6. '	list' → logprob: -17.376928329467773
    7. ' ' → logprob: -17.876928329467773
    8. '=list' → logprob: -19.001928329467773
    9. ' liste' → logprob: -19.251928329467773
    10. 'List' → logprob: -19.501928329467773

Token 209: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.0009137284359894693
    2. '(' → logprob: -7.000913619995117
    3. '(int' → logprob: -14.125913619995117
    4. 'map' → logprob: -14.375913619995117
    5. '(input' → logprob: -14.375913619995117
    6. '(
' → logprob: -16.375913619995117
    7. '()' → logprob: -17.500913619995117
    8. ' map' → logprob: -17.625913619995117
    9. ' (' → logprob: -17.875913619995117
    10. '(range' → logprob: -18.125913619995117

Token 210: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0005134754464961588
    2. 'int' → logprob: -7.875513553619385
    3. '(' → logprob: -9.000513076782227
    4. '(input' → logprob: -12.000513076782227
    5. ' int' → logprob: -13.500513076782227
    6. '(
' → logprob: -13.875513076782227
    7. '[int' → logprob: -14.750513076782227
    8. '<int' → logprob: -14.875513076782227
    9. '=int' → logprob: -15.250513076782227
    10. 'input' → logprob: -15.625513076782227

Token 211: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.46502256393432617
    2. ',input' → logprob: -1.2150225639343262
    3. ',' → logprob: -2.715022563934326
    4. 'input' → logprob: -5.340022563934326
    5. '(' → logprob: -5.590022563934326
    6. ' ,' → logprob: -8.465023040771484
    7. ' (' → logprob: -8.840023040771484
    8. ' input' → logprob: -10.215023040771484
    9. '(
' → logprob: -11.090023040771484
    10. '=input' → logprob: -11.965023040771484

Token 212: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.00317783304490149
    2. ' input' → logprob: -5.753177642822266
    3. '(input' → logprob: -17.003177642822266
    4. '   ' → logprob: -17.753177642822266
    5. ',input' → logprob: -18.128177642822266
    6. '	input' → logprob: -20.003177642822266
    7. '=input' → logprob: -20.003177642822266
    8. ' ' → logprob: -20.253177642822266
    9. '<input' → logprob: -20.378177642822266
    10. '_input' → logprob: -20.878177642822266

Token 213: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -7.896309739408025e-07
    2. '()' → logprob: -14.375000953674316
    3. ' ().' → logprob: -16.5
    4. '(' → logprob: -17.25
    5. '.split' → logprob: -17.375
    6. 'split' → logprob: -18.75
    7. '.strip' → logprob: -19.875
    8. '   ' → logprob: -20.0
    9. '()
' → logprob: -20.125
    10. '.' → logprob: -20.375

Token 214: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0005533903022296727
    2. 'strip' → logprob: -7.500553607940674
    3. ' split' → logprob: -15.500553131103516
    4. 'rstrip' → logprob: -15.750553131103516
    5. '(split' → logprob: -17.500553131103516
    6. 'spl' → logprob: -18.875553131103516
    7. ' strip' → logprob: -21.500553131103516
    8. '.split' → logprob: -22.125553131103516
    9. 's' → logprob: -22.750553131103516
    10. ')' → logprob: -23.500553131103516

Token 215: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.02319236285984516
    2. '()' → logprob: -4.023192405700684
    3. '))' → logprob: -5.523192405700684
    4. '())))' → logprob: -7.273192405700684
    5. '())' → logprob: -8.898192405700684
    6. '(' → logprob: -9.148192405700684
    7. ')))' → logprob: -9.523192405700684
    8. '()))
' → logprob: -11.148192405700684
    9. '()));' → logprob: -12.398192405700684
    10. '(),' → logprob: -12.898192405700684

Token 216: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.013371624983847141
    2. '    
' → logprob: -5.513371467590332
    3. 'B' → logprob: -5.763371467590332
    4. ' B' → logprob: -6.138371467590332
    5. ' 
' → logprob: -6.263371467590332
    6. ' ' → logprob: -7.263371467590332
    7. '
' → logprob: -7.388371467590332
    8. '  
' → logprob: -8.013371467590332
    9. ')' → logprob: -9.263371467590332
    10. '   
' → logprob: -9.263371467590332

Token 217: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14817391335964203
    2. 'B' → logprob: -2.1481738090515137
    3. '#' (adapté à ' #') → logprob: -3.8981738090515137
    4. ' B' → logprob: -8.023174285888672
    5. ' #' → logprob: -8.523174285888672
    6. ' ' → logprob: -8.898174285888672
    7. '    
' → logprob: -10.898174285888672
    8. '  ' → logprob: -11.023174285888672
    9. '
' → logprob: -11.398174285888672
    10. ' ' → logprob: -11.648174285888672

Token 218: ' Lecture' (ID: 106534)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.0006858677952550352
    2. ' B' → logprob: -7.375685691833496
    3. '#' → logprob: -10.375685691833496
    4. '   ' → logprob: -10.500685691833496
    5. '
' → logprob: -16.125686645507812
    6. ' ' → logprob: -16.125686645507812
    7. 'Lecture' → logprob: -16.375686645507812
    8. ' #' → logprob: -16.500686645507812
    9. 'b' → logprob: -16.750686645507812
    10. '  ' → logprob: -16.875686645507812

Token 219: ' et' (ID: 859)
  Prédit: ' et'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' et' → logprob: -0.06496355682611465
    2. 'et' → logprob: -2.9399635791778564
    3. '()' → logprob: -5.939963340759277
    4. ' and' → logprob: -5.939963340759277
    5. '   ' → logprob: -6.439963340759277
    6. 'B' → logprob: -6.689963340759277
    7. ' de' → logprob: -7.939963340759277
    8. ' des' → logprob: -8.064963340759277
    9. ' ' → logprob: -8.439963340759277
    10. ' B' → logprob: -8.439963340759277

Token 220: ' conversion' (ID: 22165)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.15872114896774292
    2. ' B' → logprob: -2.1587212085723877
    3. ' conversion' → logprob: -4.408720970153809
    4. 'conversion' → logprob: -4.908720970153809
    5. 'list' → logprob: -5.158720970153809
    6. ' list' → logprob: -5.408720970153809
    7. 'convert' → logprob: -7.408720970153809
    8. 'Conversion' → logprob: -7.908720970153809
    9. 'con' → logprob: -9.408720970153809
    10. ' convertir' → logprob: -9.783720970153809

Token 221: ' du' (ID: 1462)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.9906874895095825
    2. ' de' → logprob: -1.9906874895095825
    3. '   ' → logprob: -1.9906874895095825
    4. ' des' → logprob: -2.115687370300293
    5. '(int' → logprob: -2.490687370300293
    6. ' du' → logprob: -3.490687370300293
    7. '(' → logprob: -3.615687370300293
    8. 'int' → logprob: -4.115687370300293
    9. 'des' → logprob: -4.115687370300293
    10. ' B' → logprob: -4.365687370300293

Token 222: ' tableau' (ID: 67053)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.11628597229719162
    2. ' B' → logprob: -2.491286039352417
    3. ' list' → logprob: -3.866286039352417
    4. 'list' → logprob: -5.116285800933838
    5. ' ' → logprob: -10.241286277770996
    6. '   ' → logprob: -13.741286277770996
    7. 'b' → logprob: -13.991286277770996
    8. 'liste' → logprob: -13.991286277770996
    9. 'int' → logprob: -14.491286277770996
    10. '  ' → logprob: -14.491286277770996

Token 223: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.2519667148590088
    2. ' B' → logprob: -1.5019667148590088
    3. ' ' → logprob: -10.37696647644043
    4. 's' → logprob: -12.87696647644043
    5. ' ' → logprob: -12.87696647644043
    6. ',' → logprob: -15.00196647644043
    7. '   ' → logprob: -15.25196647644043
    8. '  ' → logprob: -15.50196647644043
    9. '	B' → logprob: -15.87696647644043
    10. '_' → logprob: -16.25196647644043

Token 224: ' en' (ID: 469)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.31425991654396057
    2. ' =' → logprob: -1.3142598867416382
    3. ' en' → logprob: -7.064260005950928
    4. 'en' → logprob: -9.31425952911377
    5. 'in' → logprob: -11.06425952911377
    6. '   ' → logprob: -11.31425952911377
    7. ' in' → logprob: -11.93925952911377
    8. '=list' → logprob: -12.06425952911377
    9. ' ' → logprob: -12.18925952911377
    10. '=en' → logprob: -13.18925952911377

Token 225: ' ent' (ID: 1121)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.038043782114982605
    2. ' list' → logprob: -3.288043737411499
    3. 'map' → logprob: -13.663043975830078
    4. 'int' → logprob: -13.788043975830078
    5. ' map' → logprob: -16.163043975830078
    6. ' ' → logprob: -18.163043975830078
    7. 's' → logprob: -18.288043975830078
    8. '(list' → logprob: -18.788043975830078
    9. 'liste' → logprob: -19.038043975830078
    10. 'lst' → logprob: -19.538043975830078

Token 226: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -6.635164754698053e-05
    2. 'ier' → logprob: -10.625066757202148
    3. 't' → logprob: -11.500066757202148
    4. 'ires' → logprob: -11.875066757202148
    5. 'ières' → logprob: -12.000066757202148
    6. 'ters' → logprob: -12.375066757202148
    7. 'ints' → logprob: -12.625066757202148
    8. 'tiers' → logprob: -12.875066757202148
    9. 'ieres' → logprob: -13.500066757202148
    10. ' ints' → logprob: -13.875066757202148

Token 227: '
' (ID: 198)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.478034108877182
    2. '   ' → logprob: -0.9780341386795044
    3. ' =' → logprob: -6.478034019470215
    4. '=' → logprob: -6.728034019470215
    5. ' B' → logprob: -6.978034019470215
    6. ')' → logprob: -9.353034019470215
    7. ' ' → logprob: -10.228034019470215
    8. 'b' → logprob: -10.353034019470215
    9. '  ' → logprob: -10.853034019470215
    10. '<|end|>' → logprob: -10.853034019470215

Token 228: '   ' (ID: 271)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.14417612552642822
    2. '   ' → logprob: -2.0191760063171387
    3. ' B' → logprob: -6.519176006317139
    4. ' ' → logprob: -11.769176483154297
    5. '  ' → logprob: -12.144176483154297
    6. 'b' → logprob: -12.769176483154297
    7. ' =' → logprob: -13.519176483154297
    8. '	B' → logprob: -13.519176483154297
    9. '    ' → logprob: -13.644176483154297
    10. '=' → logprob: -14.019176483154297

Token 229: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' (adapté à ' B') → logprob: -0.0059289163909852505
    2. ' B' → logprob: -5.130928993225098
    3. '   ' → logprob: -15.630928993225098
    4. 'b' → logprob: -16.63092803955078
    5. '	B' → logprob: -17.38092803955078
    6. ' ' → logprob: -18.13092803955078
    7. ' ' → logprob: -18.75592803955078
    8. '```' → logprob: -19.63092803955078
    9. '
' → logprob: -20.00592803955078
    10. 'Ｂ' → logprob: -20.13092803955078

Token 230: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.12692810595035553
    2. ' =' → logprob: -2.1269280910491943
    3. '=list' → logprob: -17.001928329467773
    4. ')' → logprob: -17.126928329467773
    5. ' ' → logprob: -18.001928329467773
    6. '   ' → logprob: -18.626928329467773
    7. '=
' → logprob: -18.876928329467773
    8. '＝' → logprob: -19.001928329467773
    9. ' ' → logprob: -19.501928329467773
    10. ' =
' → logprob: -19.751928329467773

Token 231: ' list' (ID: 1562)
  Prédit: ' list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.3868710398674011
    2. 'list' → logprob: -1.136871099472046
    3. 'List' → logprob: -19.636871337890625
    4. '=list' → logprob: -20.386871337890625
    5. '	list' → logprob: -21.136871337890625
    6. ' ' → logprob: -21.136871337890625
    7. '   ' → logprob: -21.886871337890625
    8. '(list' → logprob: -22.136871337890625
    9. 'sorted' → logprob: -22.886871337890625
    10. 'map' → logprob: -22.886871337890625

Token 232: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.07013771682977676
    2. '(list' → logprob: -2.8201377391815186
    3. '(int' → logprob: -4.8201375007629395
    4. ' (' → logprob: -10.320137977600098
    5. '(' → logprob: -10.945137977600098
    6. 'map' → logprob: -11.320137977600098
    7. '(sorted' → logprob: -12.570137977600098
    8. '.map' → logprob: -14.070137977600098
    9. '(tuple' → logprob: -14.445137977600098
    10. '=list' → logprob: -14.695137977600098

Token 233: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0028759613633155823
    2. 'int' → logprob: -5.877875804901123
    3. '(' → logprob: -10.377876281738281
    4. '<int' → logprob: -11.127876281738281
    5. '[int' → logprob: -11.752876281738281
    6. ',int' → logprob: -12.002876281738281
    7. '=int' → logprob: -12.127876281738281
    8. ' int' → logprob: -12.752876281738281
    9. ']int' → logprob: -13.627876281738281
    10. '(
' → logprob: -14.377876281738281

Token 234: ',' (ID: 11)
  Prédit: ',int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',int' → logprob: -0.614212155342102
    2. '(int' → logprob: -1.364212155342102
    3. ',' → logprob: -1.614212155342102
    4. 'int' → logprob: -5.4892120361328125
    5. '<int' → logprob: -9.489212036132812
    6. '=int' → logprob: -10.364212036132812
    7. ' ,' → logprob: -10.364212036132812
    8. ':int' → logprob: -11.364212036132812
    9. '[int' → logprob: -11.489212036132812
    10. ' int' → logprob: -12.489212036132812

Token 235: ' input' (ID: 3422)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -8.816591434879228e-05
    2. 'input' → logprob: -9.50008773803711
    3. ' int' → logprob: -11.25008773803711
    4. '(int' → logprob: -15.37508773803711
    5. '=int' → logprob: -17.25008773803711
    6. '[int' → logprob: -17.62508773803711
    7. ' input' → logprob: -17.87508773803711
    8. '   ' → logprob: -18.37508773803711
    9. '<int' → logprob: -18.50008773803711
    10. ' ' → logprob: -19.00008773803711

Token 236: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.02348422072827816
    2. '(int' → logprob: -4.023484230041504
    3. '(' → logprob: -5.273484230041504
    4. '()' → logprob: -9.398484230041504
    5. '(.' → logprob: -9.898484230041504
    6. '(input' → logprob: -11.398484230041504
    7. 'int' → logprob: -11.773484230041504
    8. '.' → logprob: -11.773484230041504
    9. ',int' → logprob: -12.023484230041504
    10. '(str' → logprob: -12.273484230041504

Token 237: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -2.339278580620885e-06
    2. '(split' → logprob: -14.125001907348633
    3. '().' → logprob: -14.250001907348633
    4. '.split' → logprob: -14.625001907348633
    5. 'input' → logprob: -15.625001907348633
    6. ' split' → logprob: -15.875001907348633
    7. 'strip' → logprob: -15.875001907348633
    8. 'spl' → logprob: -17.750001907348633
    9. ')' → logprob: -18.375001907348633
    10. ').' → logprob: -18.875001907348633

Token 238: '()))

' (ID: 125972)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.03340834379196167
    2. '))' → logprob: -3.6584084033966064
    3. '()' → logprob: -5.033408164978027
    4. '()))
' → logprob: -7.658408164978027
    5. '())' → logprob: -10.408408164978027
    6. '(' → logprob: -10.533408164978027
    7. '()));' → logprob: -10.783408164978027
    8. '()))

' → logprob: -12.033408164978027
    9. ' ))' → logprob: -13.158408164978027
    10. '()
' → logprob: -13.533408164978027

Token 239: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10293979942798615
    2. '    
' → logprob: -2.6029398441314697
    3. '
' → logprob: -3.8529398441314697
    4. 'A' → logprob: -6.102939605712891
    5. ' A' → logprob: -8.85293960571289
    6. ' 
' → logprob: -9.60293960571289
    7. '   
' → logprob: -10.35293960571289
    8. '  
' → logprob: -10.72793960571289
    9. '    ' → logprob: -10.97793960571289
    10. '     
' → logprob: -11.85293960571289

Token 240: ' #' (ID: 1069)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.0026263119652867317
    2. '#' (adapté à ' #') → logprob: -6.502626419067383
    3. '   ' → logprob: -6.877626419067383
    4. '
' → logprob: -9.627626419067383
    5. ' A' → logprob: -10.877626419067383
    6. '```' → logprob: -12.627626419067383
    7. '    
' → logprob: -13.127626419067383
    8. ' ' → logprob: -14.127626419067383
    9. 'a' → logprob: -14.502626419067383
    10. 'if' → logprob: -14.752626419067383

Token 241: ' Tri' (ID: 25062)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.018215147778391838
    2. '#' → logprob: -4.393215179443359
    3. ' A' → logprob: -5.643215179443359
    4. 'if' → logprob: -6.768215179443359
    5. '   ' → logprob: -7.143215179443359
    6. 'sorted' → logprob: -10.14321517944336
    7. 'tri' → logprob: -10.39321517944336
    8. ' #' → logprob: -10.64321517944336
    9. ' ' → logprob: -10.64321517944336
    10. ' if' → logprob: -11.01821517944336

Token 242: ' cro' (ID: 11270)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.26510924100875854
    2. 'A' → logprob: -1.6401093006134033
    3. ' A' → logprob: -3.2651093006134033
    4. '    
' → logprob: -8.265109062194824
    5. '(A' → logprob: -8.515109062194824
    6. '
' → logprob: -8.890109062194824
    7. '()' → logprob: -10.515109062194824
    8. '()
' → logprob: -10.765109062194824
    9. '	A' → logprob: -11.140109062194824
    10. ' ' → logprob: -11.265109062194824

Token 243: 'issant' (ID: 31359)
  Prédit: 'issant'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'issant' → logprob: -0.25442421436309814
    2. 'issante' → logprob: -1.5044242143630981
    3. 'isant' → logprob: -7.129424095153809
    4. 'iss' → logprob: -8.004424095153809
    5. 'is' → logprob: -8.379424095153809
    6. 'nt' → logprob: -8.379424095153809
    7. 'isé' → logprob: -8.629424095153809
    8. 'ss' → logprob: -9.004424095153809
    9. 'isée' → logprob: -9.004424095153809
    10. 'issance' → logprob: -9.504424095153809

Token 244: ' des' (ID: 731)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.24130327999591827
    2. '   ' → logprob: -1.6163033246994019
    3. ' A' → logprob: -4.616303443908691
    4. '
' → logprob: -5.241303443908691
    5. '    
' → logprob: -7.741303443908691
    6. '	A' → logprob: -10.366303443908691
    7. '(A' → logprob: -10.741303443908691
    8. ':' → logprob: -11.366303443908691
    9. ',' → logprob: -11.616303443908691
    10. '  
' → logprob: -11.741303443908691

Token 245: ' deux' (ID: 10301)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.25232237577438354
    2. 'A' → logprob: -1.5023224353790283
    3. ' ' → logprob: -8.62732219696045
    4. ' tableaux' → logprob: -8.75232219696045
    5. ' arrays' → logprob: -10.62732219696045
    6. ' deux' → logprob: -10.75232219696045
    7. '   ' → logprob: -13.00232219696045
    8. 'a' → logprob: -13.62732219696045
    9. '	A' → logprob: -13.62732219696045
    10. 's' → logprob: -13.87732219696045

Token 246: ' tableaux' (ID: 176599)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.5674861073493958
    2. ' A' → logprob: -0.9424861073493958
    3. '   ' → logprob: -3.317486047744751
    4. ' tableaux' → logprob: -5.31748628616333
    5. ' arrays' → logprob: -6.31748628616333
    6. 'table' → logprob: -9.067485809326172
    7. 'arrays' → logprob: -9.442485809326172
    8. 'tables' → logprob: -9.817485809326172
    9. ' ' → logprob: -9.942485809326172
    10. ' listes' → logprob: -10.692485809326172

Token 247: ' pour' (ID: 1930)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.17566074430942535
    2. 'A' → logprob: -2.0506608486175537
    3. '
' → logprob: -3.5506608486175537
    4. '    
' → logprob: -6.050660610198975
    5. ' A' → logprob: -6.675660610198975
    6. '  
' → logprob: -10.175661087036133
    7. '   
' → logprob: -10.925661087036133
    8. ',' → logprob: -10.925661087036133
    9. '  ' → logprob: -11.550661087036133
    10. '```' → logprob: -11.675661087036133

Token 248: ' simpl' (ID: 15693)
  Prédit: ' faciliter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' faciliter' → logprob: -0.04881535843014717
    2. ' pouvoir' → logprob: -4.7988152503967285
    3. 'A' → logprob: -4.9238152503967285
    4. ' les' → logprob: -5.4238152503967285
    5. ' comparer' → logprob: -5.5488152503967285
    6. ' vérifier' → logprob: -6.0488152503967285
    7. ' assurer' → logprob: -6.1738152503967285
    8. ' analyser' → logprob: -6.1738152503967285
    9. ' mieux' → logprob: -6.2988152503967285
    10. ' la' → logprob: -6.2988152503967285

Token 249: 'ifier' (ID: 4550)
  Prédit: 'ifier'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifier' → logprob: -0.0033868374302983284
    2. 'er' → logprob: -6.378386974334717
    3. 'ifer' → logprob: -7.628386974334717
    4. 'ier' → logprob: -8.253386497497559
    5. 'e' → logprob: -8.503386497497559
    6. 'if' → logprob: -8.878386497497559
    7. 'ifie' → logprob: -9.503386497497559
    8. 'iser' → logprob: -9.753386497497559
    9. '#' → logprob: -9.878386497497559
    10. '```' → logprob: -9.878386497497559

Token 250: ' les' (ID: 1341)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.012015659362077713
    2. ' A' → logprob: -4.7620158195495605
    3. '   ' → logprob: -6.3870158195495605
    4. '
' → logprob: -6.5120158195495605
    5. '    
' → logprob: -9.137015342712402
    6. '<|end|>' → logprob: -10.012015342712402
    7. '  
' → logprob: -10.637015342712402
    8. ' ' → logprob: -11.387015342712402
    9. 's' → logprob: -11.887015342712402
    10. ' 
' → logprob: -12.137015342712402

Token 251: ' compar' (ID: 8342)
  Prédit: 'compar'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'compar' → logprob: -0.17013876140117645
    2. ' compar' → logprob: -2.4201388359069824
    3. ' tests' → logprob: -3.4201388359069824
    4. ' comparisons' → logprob: -4.170138835906982
    5. 'tests' → logprob: -4.920138835906982
    6. ' vér' → logprob: -5.295138835906982
    7. 'com' → logprob: -6.045138835906982
    8. 'v' → logprob: -6.170138835906982
    9. ' test' → logprob: -7.420138835906982
    10. 'A' → logprob: -7.920138835906982

Token 252: 'ais' (ID: 1873)
  Prédit: 'ais'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ais' → logprob: -0.023522883653640747
    2. 'aison' → logprob: -4.148522853851318
    3. 'a' → logprob: -5.023522853851318
    4. 'isons' → logprob: -7.648522853851318
    5. '   ' → logprob: -9.648523330688477
    6. '```' → logprob: -9.773523330688477
    7. 'ai' → logprob: -10.273523330688477
    8. '#' → logprob: -10.273523330688477
    9. 'aiso' → logprob: -10.523523330688477
    10. 'aises' → logprob: -10.523523330688477

Token 253: 'ons' (ID: 1808)
  Prédit: 'ons'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ons' → logprob: -5.3596853831550106e-05
    2. 'on' → logprob: -10.250053405761719
    3. 'ions' → logprob: -11.875053405761719
    4. 'sons' → logprob: -12.000053405761719
    5. 's' → logprob: -13.250053405761719
    6. 'ont' → logprob: -14.250053405761719
    7. ' ons' → logprob: -14.375053405761719
    8. '#' → logprob: -14.625053405761719
    9. '```' → logprob: -15.250053405761719
    10. 't' → logprob: -15.625053405761719

Token 254: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.24693360924720764
    2. '
' → logprob: -1.6219335794448853
    3. 'A' → logprob: -4.121933460235596
    4. '    
' → logprob: -5.371933460235596
    5. ' A' → logprob: -8.121933937072754
    6. '  
' → logprob: -9.496933937072754
    7. '   
' → logprob: -10.746933937072754
    8. '```' → logprob: -11.621933937072754
    9. '  ' → logprob: -11.996933937072754
    10. ' 
' → logprob: -11.996933937072754

Token 255: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014493131078779697
    2. '
' → logprob: -4.639492988586426
    3. 'A' → logprob: -5.514492988586426
    4. '    
' → logprob: -7.389492988586426
    5. ' A' → logprob: -9.889492988586426
    6. '  
' → logprob: -11.014492988586426
    7. '   
' → logprob: -12.264492988586426
    8. '```' → logprob: -12.514492988586426
    9. '  ' → logprob: -13.514492988586426
    10. ' 
' → logprob: -13.639492988586426

Token 256: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' (adapté à ' A') → logprob: -0.06282927095890045
    2. ' A' → logprob: -2.8128292560577393
    3. '   ' → logprob: -7.062829494476318
    4. ' ' → logprob: -12.68782901763916
    5. '
' → logprob: -13.93782901763916
    6. '	A' → logprob: -14.56282901763916
    7. '    
' → logprob: -15.31282901763916
    8. '  ' → logprob: -15.93782901763916
    9. ' ' → logprob: -17.437829971313477
    10. 'a' → logprob: -17.437829971313477

Token 257: '2' (ID: 17)
  Prédit: '.sort'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.sort' → logprob: -0.008656173013150692
    2. '.' → logprob: -4.758656024932861
    3. '=' → logprob: -10.38365650177002
    4. '.=' → logprob: -12.50865650177002
    5. 'sort' → logprob: -13.00865650177002
    6. ' =' → logprob: -13.50865650177002
    7. ' .' → logprob: -13.63365650177002
    8. '.sorted' → logprob: -14.00865650177002
    9. '_sorted' → logprob: -15.00865650177002
    10. '.s' → logprob: -15.50865650177002

Token 258: ' =' (ID: 314)
  Prédit: '.sort'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.sort' → logprob: -0.1172768622636795
    2. '=' → logprob: -2.867276906967163
    3. ' =' → logprob: -3.242276906967163
    4. '.' → logprob: -4.242276668548584
    5. 'sorted' → logprob: -8.992277145385742
    6. 'sort' → logprob: -9.742277145385742
    7. '_sorted' → logprob: -9.867277145385742
    8. '.sorted' → logprob: -10.117277145385742
    9. ' ' → logprob: -10.742277145385742
    10. '.=' → logprob: -10.992277145385742

Token 259: ' sorted' (ID: 20099)
  Prédit: 'sorted'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sorted' → logprob: -0.12692968547344208
    2. ' sorted' → logprob: -2.126929759979248
    3. ' ' → logprob: -14.62692928314209
    4. '   ' → logprob: -14.62692928314209
    5. '(sorted' → logprob: -15.00192928314209
    6. 'A' → logprob: -15.62692928314209
    7. '.sorted' → logprob: -16.876930236816406
    8. ' ' → logprob: -17.376930236816406
    9. ' A' → logprob: -17.376930236816406
    10. '  ' → logprob: -17.751930236816406

Token 260: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -9.078839502763003e-05
    2. '(' → logprob: -9.375090599060059
    3. 'A' → logprob: -12.250090599060059
    4. '(
' → logprob: -14.000090599060059
    5. ' (' → logprob: -16.000091552734375
    6. '(B' → logprob: -16.125091552734375
    7. ')' → logprob: -17.250091552734375
    8. ' A' → logprob: -18.000091552734375
    9. '(S' → logprob: -18.000091552734375
    10. '((' → logprob: -18.250091552734375

Token 261: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.01106079202145338
    2. ')
' → logprob: -4.51106071472168
    3. ' )' → logprob: -11.76106071472168
    4. ')
' → logprob: -12.76106071472168
    5. ')

' → logprob: -13.51106071472168
    6. ' )
' → logprob: -14.13606071472168
    7. '   ' → logprob: -15.76106071472168
    8. ')#' → logprob: -16.88606071472168
    9. '),' → logprob: -17.26106071472168
    10. ' ' → logprob: -17.26106071472168

Token 262: '   ' (ID: 271)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.28405600786209106
    2. ' B' → logprob: -2.0340559482574463
    3. '   ' → logprob: -2.1590559482574463
    4. '
' → logprob: -7.159056186676025
    5. ' ' → logprob: -8.784055709838867
    6. '    
' → logprob: -9.784055709838867
    7. '	B' → logprob: -10.909055709838867
    8. ' 
' → logprob: -11.534055709838867
    9. '  
' → logprob: -11.909055709838867
    10. '  ' → logprob: -12.159055709838867

Token 263: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' (adapté à ' B') → logprob: -0.043000686913728714
    2. ' B' → logprob: -3.1680006980895996
    3. ' ' → logprob: -14.418000221252441
    4. '   ' → logprob: -14.418000221252441
    5. ' 
' → logprob: -16.418001174926758
    6. ' ' → logprob: -16.668001174926758
    7. ',' → logprob: -17.043001174926758
    8. 'b' → logprob: -17.168001174926758
    9. '
' → logprob: -17.543001174926758
    10. '	B' → logprob: -18.168001174926758

Token 264: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.00011653638648567721
    2. '=' → logprob: -9.500116348266602
    3. ' =' → logprob: -10.625116348266602
    4. '_' → logprob: -11.125116348266602
    5. '_sorted' → logprob: -13.875116348266602
    6. '₂' → logprob: -14.750116348266602
    7. '_=' → logprob: -15.250116348266602
    8. '۲' → logprob: -15.625116348266602
    9. 'sorted' → logprob: -15.625116348266602
    10. ' ' → logprob: -15.625116348266602

Token 265: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.011048054322600365
    2. ' =' → logprob: -4.511047840118408
    3. ')' → logprob: -16.26104736328125
    4. 'sorted' → logprob: -16.26104736328125
    5. '(sorted' → logprob: -17.01104736328125
    6. ')=' → logprob: -19.38604736328125
    7. '=
' → logprob: -19.51104736328125
    8. ' ' → logprob: -19.51104736328125
    9. '   ' → logprob: -19.88604736328125
    10. '=}' → logprob: -20.01104736328125

Token 266: ' sorted' (ID: 20099)
  Prédit: 'sorted'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sorted' → logprob: -0.4740782678127289
    2. ' sorted' → logprob: -0.9740782976150513
    3. '(sorted' → logprob: -13.724078178405762
    4. '.sorted' → logprob: -16.349079132080078
    5. '_sorted' → logprob: -17.599079132080078
    6. 'Sorted' → logprob: -18.099079132080078
    7. ' ' → logprob: -18.349079132080078
    8. 's' → logprob: -19.724079132080078
    9. '   ' → logprob: -19.724079132080078
    10. ' ' → logprob: -20.349079132080078

Token 267: '(B' (ID: 8409)
  Prédit: '(B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(B' → logprob: -1.3425219549390022e-05
    2. '(' → logprob: -11.37501335144043
    3. 'B' → logprob: -13.25001335144043
    4. '(A' → logprob: -17.00001335144043
    5. '(
' → logprob: -17.25001335144043
    6. ' (' → logprob: -17.37501335144043
    7. '(b' → logprob: -18.12501335144043
    8. '	B' → logprob: -19.00001335144043
    9. ')' → logprob: -19.25001335144043
    10. '(C' → logprob: -19.62501335144043

Token 268: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -8.65707261255011e-06
    2. ')
' → logprob: -12.125008583068848
    3. ')

' → logprob: -13.375008583068848
    4. ' )' → logprob: -13.750008583068848
    5. '   ' → logprob: -14.750008583068848
    6. '))' → logprob: -16.625009536743164
    7. '())' → logprob: -17.000009536743164
    8. '()' → logprob: -17.625009536743164
    9. ')
' → logprob: -18.250009536743164
    10. ')**' → logprob: -18.500009536743164

Token 269: '    
' (ID: 1944)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.29008948802948
    2. '
' → logprob: -1.41508948802948
    3. '    
' → logprob: -4.9150896072387695
    4. '<|end|>' → logprob: -7.1650896072387695
    5. 'if' → logprob: -8.29008960723877
    6. '  
' → logprob: -8.54008960723877
    7. ' if' → logprob: -8.66508960723877
    8. ' 
' → logprob: -9.79008960723877
    9. '   
' → logprob: -10.41508960723877
    10. '<|end|>' → logprob: -10.91508960723877

Token 270: '   ' (ID: 271)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.254602313041687
    2. '   ' → logprob: -1.504602313041687
    3. ' if' → logprob: -6.504602432250977
    4. '#' → logprob: -6.879602432250977
    5. 'for' → logprob: -9.379602432250977
    6. 'def' → logprob: -10.254602432250977
    7. '    
' → logprob: -11.254602432250977
    8. '
' → logprob: -12.254602432250977
    9. '```' → logprob: -12.504602432250977
    10. 'all' → logprob: -13.879602432250977

Token 271: ' #' (ID: 1069)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.006295868661254644
    2. '#' (adapté à ' #') → logprob: -5.131295680999756
    3. 'for' → logprob: -8.381296157836914
    4. 'def' → logprob: -9.006296157836914
    5. ' if' → logprob: -11.631296157836914
    6. 'all' → logprob: -13.131296157836914
    7. '   ' → logprob: -13.131296157836914
    8. '
' → logprob: -14.381296157836914
    9. 'condition' → logprob: -14.506296157836914
    10. '```' → logprob: -15.381296157836914

Token 272: ' Première' (ID: 179764)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.01054096408188343
    2. '#' → logprob: -5.260540962219238
    3. ' if' → logprob: -5.385540962219238
    4. 'def' → logprob: -7.885540962219238
    5. 'all' → logprob: -8.260540962219238
    6. 'for' → logprob: -10.260540962219238
    7. 'condition' → logprob: -11.635540962219238
    8. ' #' → logprob: -12.010540962219238
    9. 'possible' → logprob: -12.135540962219238
    10. 'ok' → logprob: -12.260540962219238

Token 273: ' condition' (ID: 7060)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.3293488323688507
    2. ' if' → logprob: -2.4543488025665283
    3. ' condition' → logprob: -2.4543488025665283
    4. 'condition' → logprob: -2.4543488025665283
    5. 'for' → logprob: -4.704349040985107
    6. ':' → logprob: -6.329349040985107
    7. ' étape' → logprob: -6.329349040985107
    8. 'import' → logprob: -6.579349040985107
    9. '   ' → logprob: -6.579349040985107
    10. ' for' → logprob: -6.954349040985107

Token 274: ' :
' (ID: 10039)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012585122138261795
    2. ':' → logprob: -5.012585163116455
    3. ' if' → logprob: -5.887585163116455
    4. 'if' → logprob: -6.137585163116455
    5. '    
' → logprob: -7.262585163116455
    6. ':
' → logprob: -9.887584686279297
    7. ' :' → logprob: -10.012584686279297
    8. '
' → logprob: -10.012584686279297
    9. ' for' → logprob: -10.512584686279297
    10. 'for' → logprob: -11.387584686279297

Token 275: '   ' (ID: 271)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.883109450340271
    2. '   ' → logprob: -1.008109450340271
    3. 'if' → logprob: -1.508109450340271
    4. ' for' → logprob: -8.758109092712402
    5. 'for' → logprob: -10.133109092712402
    6. ' all' → logprob: -10.508109092712402
    7. 'all' → logprob: -11.258109092712402
    8. '    ' → logprob: -11.508109092712402
    9. '    
' → logprob: -11.508109092712402
    10. '	if' → logprob: -12.758109092712402

Token 276: ' #' (ID: 1069)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.020624689757823944
    2. ' if' → logprob: -3.8956246376037598
    3. 'for' → logprob: -10.145625114440918
    4. '   ' → logprob: -10.270625114440918
    5. '    
' → logprob: -13.145625114440918
    6. 'all' → logprob: -13.145625114440918
    7. ' for' → logprob: -13.270625114440918
    8. ' ' → logprob: -14.395625114440918
    9. '
' → logprob: -14.645625114440918
    10. '```' → logprob: -14.895625114440918

Token 277: ' Pour' (ID: 13931)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.07032018899917603
    2. ' if' → logprob: -2.6953201293945312
    3. 'all' → logprob: -8.445320129394531
    4. ' all' → logprob: -9.570320129394531
    5. 'for' → logprob: -9.695320129394531
    6. ' for' → logprob: -12.070320129394531
    7. '   ' → logprob: -12.195320129394531
    8. 'If' → logprob: -12.195320129394531
    9. ' ' → logprob: -12.695320129394531
    10. 'is' → logprob: -13.320320129394531

Token 278: ' chaque' (ID: 21194)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.283639520406723
    2. 'i' → logprob: -1.4086395502090454
    3. ' all' → logprob: -6.283639430999756
    4. ' a' → logprob: -8.033639907836914
    5. 'a' → logprob: -8.908639907836914
    6. 'all' → logprob: -9.658639907836914
    7. ' ' → logprob: -10.158639907836914
    8. 't' → logprob: -11.783639907836914
    9. ' ' → logprob: -11.908639907836914
    10. '   ' → logprob: -12.408639907836914

Token 279: ' indice' (ID: 90848)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.06418462842702866
    2. 'i' → logprob: -2.8141846656799316
    3. ' a' → logprob: -6.439184665679932
    4. 'a' → logprob: -7.564184665679932
    5. ' ' → logprob: -9.939184188842773
    6. ' index' → logprob: -11.689184188842773
    7. ' élément' → logprob: -11.939184188842773
    8. ' ' → logprob: -12.314184188842773
    9. '	i' → logprob: -12.564184188842773
    10. 'A' → logprob: -12.814184188842773

Token 280: ',' (ID: 11)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.15240852534770966
    2. 'i' → logprob: -2.0274085998535156
    3. ' in' → logprob: -4.777408599853516
    4. 'in' → logprob: -7.777408599853516
    5. ',' → logprob: -7.902408599853516
    6. '   ' → logprob: -9.527408599853516
    7. ' en' → logprob: -9.527408599853516
    8. ' ' → logprob: -9.652408599853516
    9. ' dans' → logprob: -9.777408599853516
    10. ' ' → logprob: -9.902408599853516

Token 281: ' vér' (ID: 42524)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.10036830604076385
    2. 'if' → logprob: -2.3503682613372803
    3. ' A' → logprob: -9.60036849975586
    4. '   ' → logprob: -9.97536849975586
    5. 'A' → logprob: -11.10036849975586
    6. ' ' → logprob: -11.60036849975586
    7. ' for' → logprob: -11.97536849975586
    8. ' assert' → logprob: -12.47536849975586
    9. ' print' → logprob: -12.72536849975586
    10. '    ' → logprob: -12.97536849975586

Token 282: 'ifie' (ID: 46409)
  Prédit: 'ifie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifie' → logprob: -0.0022803882602602243
    2. 'if' → logprob: -6.752280235290527
    3. 'ifiez' → logprob: -7.377280235290527
    4. 'ifier' → logprob: -7.752280235290527
    5. 'ife' → logprob: -10.252280235290527
    6. 'ifi' → logprob: -12.252280235290527
    7. 'ify' → logprob: -12.627280235290527
    8. 'ifié' → logprob: -12.627280235290527
    9. '#' → logprob: -12.877280235290527
    10. 'ifiant' → logprob: -13.377280235290527

Token 283: ' si' (ID: 1784)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.27114689350128174
    2. ' si' → logprob: -1.8961468935012817
    3. ' ' → logprob: -3.146146774291992
    4. 'if' → logprob: -4.021146774291992
    5. ' A' → logprob: -4.646146774291992
    6. 'A' → logprob: -4.646146774291992
    7. '   ' → logprob: -5.271146774291992
    8. ' que' → logprob: -6.896146774291992
    9. 'si' → logprob: -7.521146774291992
    10. '  ' → logprob: -8.021146774291992

Token 284: ' l' (ID: 305)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.5760408639907837
    2. 'A' → logprob: -0.8260408639907837
    3. ' ' → logprob: -9.826041221618652
    4. '   ' → logprob: -10.326041221618652
    5. ' ' → logprob: -11.826041221618652
    6. '  ' → logprob: -12.451041221618652
    7. '    ' → logprob: -13.576041221618652
    8. '	A' → logprob: -13.701041221618652
    9. ' not' → logprob: -14.951041221618652
    10. 'a' → logprob: -15.701041221618652

Token 285: ''' (ID: 6)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.6386558413505554
    2. ' A' → logprob: -0.7636558413505554
    3. ''A' → logprob: -5.888655662536621
    4. ''' → logprob: -6.888655662536621
    5. 'e' → logprob: -7.388655662536621
    6. 'a' → logprob: -7.513655662536621
    7. '   ' → logprob: -7.888655662536621
    8. ' ' → logprob: -8.013655662536621
    9. ' a' → logprob: -9.138655662536621
    10. ' '' → logprob: -9.888655662536621

Token 286: 'élé' (ID: 15228)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.0486673079431057
    2. ' A' → logprob: -3.0486671924591064
    3. ' ' → logprob: -9.673666954040527
    4. '   ' → logprob: -11.798666954040527
    5. '  ' → logprob: -12.923666954040527
    6. 'a' → logprob: -13.173666954040527
    7. 'all' → logprob: -13.923666954040527
    8. ''A' → logprob: -13.923666954040527
    9. ' all' → logprob: -14.298666954040527
    10. '`' → logprob: -14.673666954040527

Token 287: 'ment' (ID: 508)
  Prédit: 'ment'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ment' → logprob: -3.47626737493556e-05
    2. 'ément' → logprob: -11.62503433227539
    3. 'ement' → logprob: -11.87503433227539
    4. 'A' → logprob: -12.12503433227539
    5. 'm' → logprob: -12.87503433227539
    6. 'ments' → logprob: -13.00003433227539
    7. '   ' → logprob: -13.12503433227539
    8. 'em' → logprob: -13.75003433227539
    9. 'mé' → logprob: -13.87503433227539
    10. ' ment' → logprob: -14.12503433227539

Token 288: ' correspondant' (ID: 146058)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.8014382123947144
    2. ' de' → logprob: -1.1764382123947144
    3. 'A' → logprob: -1.4264382123947144
    4. ' ' → logprob: -7.051438331604004
    5. ' d' → logprob: -7.176438331604004
    6. '   ' → logprob: -7.926438331604004
    7. 'de' → logprob: -8.301438331604004
    8. 's' → logprob: -9.426438331604004
    9. ' ' → logprob: -9.426438331604004
    10. ' of' → logprob: -9.551438331604004

Token 289: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.22111937403678894
    2. 'A' → logprob: -1.9711194038391113
    3. ' A' → logprob: -3.2211194038391113
    4. '   ' → logprob: -5.346119403839111
    5. ' d' → logprob: -5.596119403839111
    6. ' in' → logprob: -5.596119403839111
    7. ' ' → logprob: -6.596119403839111
    8. ' dans' → logprob: -6.596119403839111
    9. 'de' → logprob: -6.846119403839111
    10. ' en' → logprob: -7.221119403839111

Token 290: ' A' (ID: 355)
  Prédit: ' A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.4740957021713257
    2. 'A' → logprob: -0.9740957021713257
    3. ' ' → logprob: -11.224095344543457
    4. 'range' → logprob: -13.849095344543457
    5. ' range' → logprob: -13.974095344543457
    6. '   ' → logprob: -14.349095344543457
    7. '  ' → logprob: -14.349095344543457
    8. 'B' → logprob: -14.849095344543457
    9. ' ' → logprob: -14.849095344543457
    10. '	A' → logprob: -14.849095344543457

Token 291: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -9.729906196298543e-06
    2. '[i' → logprob: -12.250009536743164
    3. ' ' → logprob: -13.000009536743164
    4. '[' → logprob: -14.000009536743164
    5. ' est' → logprob: -14.125009536743164
    6. '```' → logprob: -14.750009536743164
    7. '   ' → logprob: -15.000009536743164
    8. 'est' → logprob: -16.500009536743164
    9. ' [' → logprob: -17.250009536743164
    10. ' is' → logprob: -17.250009536743164

Token 292: ' est' (ID: 893)
  Prédit: ' <='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.987709641456604
    2. '[i' → logprob: -1.237709641456604
    3. ' est' → logprob: -1.737709641456604
    4. '<=' → logprob: -1.862709641456604
    5. 'est' → logprob: -5.8627095222473145
    6. '[' → logprob: -6.9877095222473145
    7. ' is' → logprob: -7.2377095222473145
    8. '[j' → logprob: -7.9877095222473145
    9. 'le' → logprob: -8.112709999084473
    10. '[idx' → logprob: -8.987709999084473

Token 293: ' supérieur' (ID: 98491)
  Prédit: '<='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '<=' → logprob: -0.42214325070381165
    2. ' <=' → logprob: -1.2971432209014893
    3. ' inférieur' → logprob: -2.9221432209014893
    4. 'inf' → logprob: -4.172143459320068
    5. ' inf' → logprob: -7.172143459320068
    6. 'infer' → logprob: -7.297143459320068
    7. '≤' → logprob: -8.79714298248291
    8. '   ' → logprob: -10.04714298248291
    9. '```' → logprob: -10.04714298248291
    10. ' ≤' → logprob: -10.79714298248291

Token 294: ' à' (ID: 1221)
  Prédit: ' ou'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ou' → logprob: -1.150254726409912
    2. ' à' → logprob: -1.275254726409912
    3. 'à' → logprob: -1.900254726409912
    4. '   ' → logprob: -2.275254726409912
    5. 'ou' → logprob: -2.275254726409912
    6. 'strict' → logprob: -4.025254726409912
    7. '>' → logprob: -4.400254726409912
    8. ' ' → logprob: -5.150254726409912
    9. 'au' → logprob: -6.025254726409912
    10. '  ' → logprob: -6.525254726409912

Token 295: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.6602188348770142
    2. 'B' → logprob: -0.7852188348770142
    3. ' celui' → logprob: -3.7852187156677246
    4. 'l' → logprob: -6.160218715667725
    5. 'cel' → logprob: -6.535218715667725
    6. ' l' → logprob: -7.160218715667725
    7. ' ' → logprob: -8.910219192504883
    8. '   ' → logprob: -10.535219192504883
    9. ' ' → logprob: -11.285219192504883
    10. ' cel' → logprob: -11.785219192504883

Token 296: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -2.816093228830141e-06
    2. ' ' → logprob: -13.37500286102295
    3. '[' → logprob: -15.00000286102295
    4. '   ' → logprob: -15.56250286102295
    5. '[i' → logprob: -15.75000286102295
    6. '

' → logprob: -16.062501907348633
    7. '_' → logprob: -16.187501907348633
    8. '```' → logprob: -16.187501907348633
    9. ',' → logprob: -17.250001907348633
    10. '  ' → logprob: -17.750001907348633

Token 297: '
' (ID: 198)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.4464320242404938
    2. '[i' → logprob: -1.9464319944381714
    3. '   ' → logprob: -2.821432113647461
    4. '[' → logprob: -2.821432113647461
    5. ' ' → logprob: -2.946432113647461
    6. ',' → logprob: -4.196432113647461
    7. '  ' → logprob: -4.821432113647461
    8. ' :' → logprob: -5.571432113647461
    9. ' or' → logprob: -5.821432113647461
    10. '.' → logprob: -5.946432113647461

Token 298: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.29283827543258667
    2. ' for' → logprob: -1.9178383350372314
    3. 'for' → logprob: -2.7928383350372314
    4. ':' → logprob: -3.1678383350372314
    5. ' ' → logprob: -7.042838096618652
    6. ',' → logprob: -7.167838096618652
    7. '.' → logprob: -7.792838096618652
    8. ':
' → logprob: -7.917838096618652
    9. ')' → logprob: -8.417838096618652
    10. '  ' → logprob: -8.542838096618652

Token 299: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4076286852359772
    2. ' for' → logprob: -1.4076286554336548
    3. 'for' → logprob: -2.4076287746429443
    4. '	for' → logprob: -11.657629013061523
    5. '    
' → logprob: -12.407629013061523
    6. '
' → logprob: -12.782629013061523
    7. ' ' → logprob: -13.282629013061523
    8. '  ' → logprob: -13.532629013061523
    9. ' if' → logprob: -13.532629013061523
    10. 'if' → logprob: -13.657629013061523

Token 300: ' Si' (ID: 7832)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.3950098156929016
    2. '   ' → logprob: -1.6450097560882568
    3. 'for' → logprob: -2.020009756088257
    4. ' if' → logprob: -7.645009994506836
    5. 'if' → logprob: -8.770009994506836
    6. '	for' → logprob: -11.520009994506836
    7. '
' → logprob: -11.895009994506836
    8. ' ' → logprob: -12.895009994506836
    9. '    
' → logprob: -12.895009994506836
    10. '    ' → logprob: -13.020009994506836

Token 301: ' oui' (ID: 50908)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.9477618336677551
    2. ' any' → logprob: -0.9477618336677551
    3. 'A' → logprob: -1.5727617740631104
    4. 'any' → logprob: -4.0727620124816895
    5. ' ' → logprob: -9.072761535644531
    6. ' not' → logprob: -9.947761535644531
    7. 'Any' → logprob: -10.197761535644531
    8. ' ' → logprob: -11.322761535644531
    9. ' a' → logprob: -11.447761535644531
    10. '    ' → logprob: -11.947761535644531

Token 302: ',' (ID: 11)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.21072234213352203
    2. ':' → logprob: -1.7107223272323608
    3. '   ' → logprob: -5.21072244644165
    4. ' :' → logprob: -6.83572244644165
    5. ':return' → logprob: -6.83572244644165
    6. ':
' → logprob: -7.21072244644165
    7. ',' → logprob: -7.83572244644165
    8. ' return' → logprob: -8.960721969604492
    9. '    ' → logprob: -9.085721969604492
    10. '           ' → logprob: -9.460721969604492

Token 303: ' il' (ID: 1793)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.24413205683231354
    2. ' return' → logprob: -1.7441320419311523
    3. ' print' → logprob: -3.7441320419311523
    4. 'return' → logprob: -4.744132041931152
    5. '   ' → logprob: -4.869132041931152
    6. 'print' → logprob: -6.494132041931152
    7. '    ' → logprob: -9.494132041931152
    8. '        
' → logprob: -10.119132041931152
    9. '           ' → logprob: -10.244132041931152
    10. '    
' → logprob: -10.994132041931152

Token 304: ' n' (ID: 297)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04849719628691673
    2. '       ' → logprob: -4.048497200012207
    3. ' return' → logprob: -4.423497200012207
    4. '    ' → logprob: -4.798497200012207
    5. ' faut' → logprob: -5.673497200012207
    6. ' y' → logprob: -6.048497200012207
    7. ' ' → logprob: -7.048497200012207
    8. ' break' → logprob: -7.298497200012207
    9. 'return' → logprob: -7.548497200012207
    10. ' n' → logprob: -7.548497200012207

Token 305: ''est' (ID: 6616)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7510894536972046
    2. ' return' → logprob: -1.0010894536972046
    3. ' y' → logprob: -2.751089572906494
    4. '    ' → logprob: -3.626089572906494
    5. '       ' → logprob: -3.626089572906494
    6. 'return' → logprob: -4.001089572906494
    7. ' n' → logprob: -4.751089572906494
    8. 'n' → logprob: -5.126089572906494
    9. ' pas' → logprob: -6.126089572906494
    10. '  ' → logprob: -6.376089572906494

Token 306: ' pas' (ID: 2173)
  Prédit: ' pas'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pas' → logprob: -0.6954691410064697
    2. 'pas' → logprob: -0.6954691410064697
    3. ' plus' → logprob: -6.695468902587891
    4. 'plus' → logprob: -7.195468902587891
    5. '   ' → logprob: -9.69546890258789
    6. 'possible' → logprob: -9.82046890258789
    7. '_pas' → logprob: -9.94546890258789
    8. ' possible' → logprob: -9.94546890258789
    9. ' ' → logprob: -10.44546890258789
    10. 's' → logprob: -10.69546890258789

Token 307: ' possible' (ID: 4149)
  Prédit: ' possible'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' possible' → logprob: -0.07056649774312973
    2. 'possible' → logprob: -3.070566415786743
    3. ' pas' → logprob: -3.945566415786743
    4. 'pas' → logprob: -6.820566654205322
    5. ' poss' → logprob: -7.695566654205322
    6. ' valid' → logprob: -8.195566177368164
    7. '_possible' → logprob: -9.070566177368164
    8. ' compatible' → logprob: -9.320566177368164
    9. 'poss' → logprob: -9.570566177368164
    10. 'compatible' → logprob: -10.070566177368164

Token 308: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6572389006614685
    2. ' de' → logprob: -1.0322389602661133
    3. '       ' → logprob: -2.1572389602661133
    4. ' d' → logprob: -5.782238960266113
    5. '    ' → logprob: -5.782238960266113
    6. 'de' → logprob: -5.782238960266113
    7. 'd' → logprob: -8.407238960266113
    8. ' ' → logprob: -9.157238960266113
    9. '     ' → logprob: -9.407238960266113
    10. '  ' → logprob: -10.032238960266113

Token 309: ' satisfaire' (ID: 156594)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.4794907867908478
    2. ' print' → logprob: -1.1044907569885254
    3. ' continuer' → logprob: -4.104490756988525
    4. '"' → logprob: -4.604490756988525
    5. 'return' → logprob: -5.229490756988525
    6. ' return' → logprob: -5.854490756988525
    7. ' '' → logprob: -6.354490756988525
    8. ' all' → logprob: -6.479490756988525
    9. 'contin' → logprob: -6.604490756988525
    10. ''' → logprob: -6.854490756988525

Token 310: ' la' (ID: 557)
  Prédit: ' la'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.023120971396565437
    2. '   ' → logprob: -4.023120880126953
    3. ' the' → logprob: -6.773120880126953
    4. '    ' → logprob: -7.023120880126953
    5. ' return' → logprob: -7.398120880126953
    6. ' le' → logprob: -7.523120880126953
    7. '       ' → logprob: -8.148120880126953
    8. ' ' → logprob: -8.398120880126953
    9. 'la' → logprob: -8.523120880126953
    10. ' l' → logprob: -8.773120880126953

Token 311: ' condition' (ID: 7060)
  Prédit: 'condition'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'condition' → logprob: -0.2828545868396759
    2. ' condition' → logprob: -1.4078545570373535
    3. 'contr' → logprob: -6.6578545570373535
    4. 'cond' → logprob: -8.532855033874512
    5. 'prem' → logprob: -10.407855033874512
    6. '
' → logprob: -10.532855033874512
    7. ' contr' → logprob: -10.657855033874512
    8. 'return' → logprob: -10.782855033874512
    9. 'con' → logprob: -10.782855033874512
    10. 'print' → logprob: -11.532855033874512

Token 312: ' demand' (ID: 8492)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.015459957532584667
    2. '       ' → logprob: -5.015460014343262
    3. ' for' → logprob: -5.265460014343262
    4. '    ' → logprob: -6.640460014343262
    5. 'for' → logprob: -6.640460014343262
    6. ',' → logprob: -8.390460014343262
    7. ':' → logprob: -8.640460014343262
    8. '    
' → logprob: -8.765460014343262
    9. ' ' → logprob: -9.390460014343262
    10. '  ' → logprob: -9.640460014343262

Token 313: 'ée' (ID: 2894)
  Prédit: 'ée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ée' → logprob: -0.5307395458221436
    2. 'e' → logprob: -1.2807395458221436
    3. 'ee' → logprob: -2.2807395458221436
    4. 'é' → logprob: -3.5307395458221436
    5. 'er' → logprob: -6.655739784240723
    6. 'es' → logprob: -7.155739784240723
    7. '   ' → logprob: -8.280739784240723
    8. '       ' → logprob: -9.780739784240723
    9. 'ed' → logprob: -10.155739784240723
    10. 'ue' → logprob: -11.280739784240723

Token 314: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006328317802399397
    2. ' for' → logprob: -6.256328105926514
    3. '    
' → logprob: -6.381328105926514
    4. 'for' → logprob: -6.631328105926514
    5. '
' → logprob: -7.131328105926514
    6. '       ' → logprob: -8.756328582763672
    7. '  
' → logprob: -9.381328582763672
    8. ',' → logprob: -9.881328582763672
    9. '.' → logprob: -10.006328582763672
    10. '    ' → logprob: -10.006328582763672

Token 315: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01194875966757536
    2. ' for' → logprob: -4.761948585510254
    3. 'for' → logprob: -5.761948585510254
    4. '    
' → logprob: -8.886948585510254
    5. '
' → logprob: -11.636948585510254
    6. ' ' → logprob: -11.761948585510254
    7. '	for' → logprob: -12.011948585510254
    8. '  ' → logprob: -12.386948585510254
    9. '    ' → logprob: -12.511948585510254
    10. '  
' → logprob: -12.886948585510254

Token 316: ' for' (ID: 395)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08317326754331589
    2. 'for' (adapté à ' for') → logprob: -2.9581732749938965
    3. ' for' → logprob: -3.5831732749938965
    4. '
' → logprob: -9.958172798156738
    5. '    
' → logprob: -10.083172798156738
    6. 'if' → logprob: -11.833172798156738
    7. '	for' → logprob: -11.958172798156738
    8. '  ' → logprob: -13.333172798156738
    9. ' if' → logprob: -14.083172798156738
    10. '    ' → logprob: -14.208172798156738

Token 317: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.0040818434208631516
    2. 'i' → logprob: -5.504081726074219
    3. ' ' → logprob: -13.004081726074219
    4. ' a' → logprob: -15.129081726074219
    5. ' ' → logprob: -15.129081726074219
    6. '	i' → logprob: -15.254081726074219
    7. 'I' → logprob: -16.62908172607422
    8. ' _' → logprob: -16.62908172607422
    9. '(i' → logprob: -16.87908172607422
    10. ' idx' → logprob: -17.25408172607422

Token 318: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.001520930090919137
    2. 'in' → logprob: -6.501521110534668
    3. ',' → logprob: -11.501521110534668
    4. ' ' → logprob: -11.751521110534668
    5. ')' → logprob: -16.00152015686035
    6. 'range' → logprob: -16.50152015686035
    7. '	in' → logprob: -16.62652015686035
    8. ' ,' → logprob: -16.75152015686035
    9. '  ' → logprob: -17.00152015686035
    10. '   ' → logprob: -17.12652015686035

Token 319: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.16022422909736633
    2. 'range' → logprob: -1.910224199295044
    3. '	range' → logprob: -17.28522491455078
    4. '(range' → logprob: -18.16022491455078
    5. ' ' → logprob: -18.41022491455078
    6. 'rang' → logprob: -18.53522491455078
    7. ' xrange' → logprob: -18.91022491455078
    8. ' rang' → logprob: -19.78522491455078
    9. '.range' → logprob: -20.03522491455078
    10. '_range' → logprob: -20.28522491455078

Token 320: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.004216351546347141
    2. '(len' → logprob: -6.129216194152832
    3. '(' → logprob: -6.254216194152832
    4. ' (' → logprob: -9.254216194152832
    5. '   ' → logprob: -12.004216194152832
    6. '(n' → logprob: -13.004216194152832
    7. ' N' → logprob: -14.129216194152832
    8. 'len' → logprob: -14.254216194152832
    9. 'N' → logprob: -14.379216194152832
    10. ' len' → logprob: -14.754216194152832

Token 321: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.20147453248500824
    2. '):
' → logprob: -1.7014745473861694
    3. ' ):' → logprob: -10.7014741897583
    4. '):
' → logprob: -11.0764741897583
    5. ')' → logprob: -11.4514741897583
    6. '   ' → logprob: -12.2014741897583
    7. ' ):
' → logprob: -12.3264741897583
    8. '):

' → logprob: -13.3264741897583
    9. ':' → logprob: -13.8264741897583
    10. ' ' → logprob: -15.9514741897583

Token 322: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00045807508286088705
    2. ' if' → logprob: -8.000457763671875
    3. '   ' → logprob: -9.625457763671875
    4. '<|end|>' → logprob: -10.125457763671875
    5. 'if' → logprob: -11.750457763671875
    6. ':' → logprob: -12.750457763671875
    7. '        
' → logprob: -13.500457763671875
    8. '      ' → logprob: -13.875457763671875
    9. '<|end|>' → logprob: -14.500457763671875
    10. '    ' → logprob: -14.750457763671875

Token 323: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.08223876357078552
    2. ' if' → logprob: -2.5822386741638184
    3. '       ' → logprob: -5.707238674163818
    4. '   ' → logprob: -10.832239151000977
    5. '	if' → logprob: -13.707239151000977
    6. ' ' → logprob: -15.457239151000977
    7. 'If' → logprob: -15.582239151000977
    8. '           ' → logprob: -15.957239151000977
    9. '
' → logprob: -16.332239151000977
    10. '    ' → logprob: -17.332239151000977

Token 324: ' A' (ID: 355)
  Prédit: ' A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.0067698415368795395
    2. 'A' → logprob: -5.00676965713501
    3. '    ' → logprob: -10.381770133972168
    4. '   ' → logprob: -10.756770133972168
    5. '	A' → logprob: -13.881770133972168
    6. ' ' → logprob: -14.381770133972168
    7. '>A' → logprob: -14.506770133972168
    8. ' ' → logprob: -16.25676918029785
    9. '       ' → logprob: -16.75676918029785
    10. '(A' → logprob: -16.88176918029785

Token 325: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -4.127333340875339e-06
    2. '[' → logprob: -13.000003814697266
    3. '[i' → logprob: -14.250003814697266
    4. ' ' → logprob: -14.625003814697266
    5. ' [' → logprob: -15.437503814697266
    6. '```' → logprob: -15.687503814697266
    7. '   ' → logprob: -16.500003814697266
    8. '۲' → logprob: -16.750003814697266
    9. '
' → logprob: -16.875003814697266
    10. '２' → logprob: -16.875003814697266

Token 326: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -1.27099974633893e-05
    2. '[' → logprob: -11.375012397766113
    3. ' [' → logprob: -13.750012397766113
    4. '   ' → logprob: -17.50001335144043
    5. 'i' → logprob: -17.87501335144043
    6. '2' → logprob: -18.12501335144043
    7. ' i' → logprob: -18.37501335144043
    8. '[j' → logprob: -18.37501335144043
    9. '[I' → logprob: -18.37501335144043
    10. '[
' → logprob: -18.75001335144043

Token 327: ']' (ID: 60)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.576090395450592
    2. ' >' → logprob: -0.826090395450592
    3. ']' → logprob: -9.451090812683105
    4. ' ' → logprob: -10.701090812683105
    5. ')' → logprob: -10.826090812683105
    6. ']>' → logprob: -11.201090812683105
    7. ')>' → logprob: -11.826090812683105
    8. '">' → logprob: -12.826090812683105
    9. '   ' → logprob: -13.451090812683105
    10. '[' → logprob: -13.951090812683105

Token 328: ' >' (ID: 1424)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.16023783385753632
    2. ' >' → logprob: -1.9102377891540527
    3. ' ' → logprob: -11.785238265991211
    4. '>B' → logprob: -13.160238265991211
    5. '">' → logprob: -14.410238265991211
    6. '>
' → logprob: -14.785238265991211
    7. ')>' → logprob: -14.785238265991211
    8. '   ' → logprob: -14.910238265991211
    9. '>`' → logprob: -15.035238265991211
    10. '>b' → logprob: -15.285238265991211

Token 329: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.0232619009912014
    2. 'B' → logprob: -3.773261785507202
    3. ' ' → logprob: -11.023262023925781
    4. '  ' → logprob: -16.77326202392578
    5. '	B' → logprob: -16.77326202392578
    6. ' ' → logprob: -16.77326202392578
    7. 'b' → logprob: -17.89826202392578
    8. ')' → logprob: -18.52326202392578
    9. 's' → logprob: -18.52326202392578
    10. '>B' → logprob: -18.77326202392578

Token 330: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -4.320199877838604e-07
    2. ' ' → logprob: -15.125
    3. '[' → logprob: -16.125
    4. 'B' → logprob: -17.5
    5. '  ' → logprob: -17.875
    6. '۲' → logprob: -18.375
    7. '   ' → logprob: -18.375
    8. '(' → logprob: -18.5
    9. '<|end|>' → logprob: -18.625
    10. '₂' → logprob: -18.8125

Token 331: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -4.8232690460281447e-05
    2. '[' → logprob: -10.000048637390137
    3. 'i' → logprob: -13.625048637390137
    4. '[
' → logprob: -14.375048637390137
    5. '   ' → logprob: -14.500048637390137
    6. ' [' → logprob: -16.12504768371582
    7. ' i' → logprob: -16.37504768371582
    8. '```' → logprob: -16.50004768371582
    9. ']' → logprob: -16.62504768371582
    10. ')' → logprob: -17.37504768371582

Token 332: ']:
' (ID: 22152)
  Prédit: '):
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.7069268226623535
    2. '):' → logprob: -0.7069268226623535
    3. ':' → logprob: -4.4569268226623535
    4. ':
' → logprob: -6.8319268226623535
    5. '       ' → logprob: -8.081926345825195
    6. '   ' → logprob: -8.581926345825195
    7. ')' → logprob: -8.706926345825195
    8. ']:' → logprob: -9.206926345825195
    9. ']:
' → logprob: -9.831926345825195
    10. ':return' → logprob: -9.956926345825195

Token 333: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0015850928612053394
    2. '
' → logprob: -6.876585006713867
    3. '       ' → logprob: -8.251585006713867
    4. ':
' → logprob: -9.126585006713867
    5. ' return' → logprob: -9.126585006713867
    6. 'return' → logprob: -9.751585006713867
    7. ':' → logprob: -12.251585006713867
    8. '               ' → logprob: -12.626585006713867
    9. '\n' → logprob: -12.751585006713867
    10. ':return' → logprob: -13.876585006713867

Token 334: ' print' (ID: 2123)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.21569614112377167
    2. 'print' (adapté à ' print') → logprob: -2.465696096420288
    3. ' print' → logprob: -2.465696096420288
    4. '       ' → logprob: -4.340696334838867
    5. ' break' → logprob: -5.215696334838867
    6. '               ' → logprob: -6.215696334838867
    7. ' return' → logprob: -6.465696334838867
    8. 'break' → logprob: -6.840696334838867
    9. 'return' → logprob: -7.715696334838867
    10. '
' → logprob: -8.340696334838867

Token 335: '('' (ID: 706)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.017297012731432915
    2. '('' → logprob: -4.26729679107666
    3. '(' → logprob: -5.76729679107666
    4. ' ("' → logprob: -14.89229679107666
    5. '(False' → logprob: -16.517297744750977
    6. '("")' → logprob: -17.017297744750977
    7. '(
' → logprob: -17.517297744750977
    8. '()' → logprob: -18.642297744750977
    9. ' (' → logprob: -18.892297744750977
    10. '(

' → logprob: -19.267297744750977

Token 336: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: 0.0
    2. '"No' → logprob: -17.625
    3. 'NO' → logprob: -18.0
    4. ''' → logprob: -20.125
    5. ' No' → logprob: -20.125
    6. '_No' → logprob: -22.125
    7. 'Yes' → logprob: -23.125
    8. '"' → logprob: -23.625
    9. '_no' → logprob: -23.75
    10. '>No' → logprob: -24.375

Token 337: '')
' (ID: 2515)
  Prédit: '')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')
' → logprob: -0.023473506793379784
    2. '')' → logprob: -3.7734735012054443
    3. '           ' → logprob: -9.023473739624023
    4. ')
' → logprob: -10.148473739624023
    5. '')
' → logprob: -10.398473739624023
    6. '       ' → logprob: -11.148473739624023
    7. '               ' → logprob: -11.648473739624023
    8. '")
' → logprob: -11.773473739624023
    9. ')' → logprob: -12.398473739624023
    10. ''' → logprob: -14.648473739624023

Token 338: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -2.8325677703833207e-05
    2. '
' → logprob: -10.500028610229492
    3. 'return' → logprob: -14.625028610229492
    4. '            
' → logprob: -16.125028610229492
    5. '		' → logprob: -16.875028610229492
    6. '       ' → logprob: -17.250028610229492
    7. ' return' → logprob: -17.500028610229492
    8. '               ' → logprob: -17.500028610229492
    9. '
' → logprob: -18.250028610229492
    10. '\n' → logprob: -18.375028610229492

Token 339: ' return' (ID: 622)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.009248805232346058
    2. 'return' (adapté à ' return') → logprob: -4.759248733520508
    3. '
' → logprob: -7.509248733520508
    4. ' return' → logprob: -9.384248733520508
    5. '       ' → logprob: -14.134248733520508
    6. '
' → logprob: -14.509248733520508
    7. '```' → logprob: -15.259248733520508
    8. '		' → logprob: -15.509248733520508
    9. '            
' → logprob: -16.259248733520508
    10. '   ' → logprob: -16.384248733520508

Token 340: '

' (ID: 279)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5025197267532349
    2. '    
' → logprob: -1.0025197267532349
    3. '
' → logprob: -3.6275196075439453
    4. '        
' → logprob: -6.877519607543945
    5. '    
    
' → logprob: -9.002519607543945
    6. '<|end|>' → logprob: -9.502519607543945
    7. '    ' → logprob: -9.752519607543945
    8. '
    
' → logprob: -10.252519607543945
    9. '  
' → logprob: -10.377519607543945
    10. '   
' → logprob: -10.502519607543945

Token 341: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.025820156559348106
    2. '    
' → logprob: -3.900820255279541
    3. '
' → logprob: -5.275820255279541
    4. '<|end|>' → logprob: -9.900819778442383
    5. '        
' → logprob: -10.150819778442383
    6. '  
' → logprob: -10.775819778442383
    7. '   
' → logprob: -11.775819778442383
    8. '#' → logprob: -12.150819778442383
    9. '    
    
' → logprob: -12.150819778442383
    10. '```' → logprob: -12.150819778442383

Token 342: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.145613431930542
    2. '#' (adapté à ' #') → logprob: -2.020613431930542
    3. '    
' → logprob: -6.020613670349121
    4. '
' → logprob: -7.895613670349121
    5. 'for' → logprob: -9.270613670349121
    6. 'shift' → logprob: -10.895613670349121
    7. '```' → logprob: -12.520613670349121
    8. '        
' → logprob: -12.520613670349121
    9. ' #' → logprob: -12.770613670349121
    10. 'if' → logprob: -13.270613670349121

Token 343: ' Deux' (ID: 92086)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.03326721861958504
    2. '   ' → logprob: -3.7832672595977783
    3. 'for' → logprob: -5.908267021179199
    4. 'if' → logprob: -6.283267021179199
    5. 'shift' → logprob: -6.283267021179199
    6. 'A' → logprob: -6.783267021179199
    7. 'offset' → logprob: -7.033267021179199
    8. 'Déc' → logprob: -7.908267021179199
    9. 'dec' → logprob: -8.0332670211792
    10. 'second' → logprob: -8.1582670211792

Token 344: 'ième' (ID: 41126)
  Prédit: 'ième'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ième' → logprob: -0.23925469815731049
    2. 'ème' → logprob: -1.7392547130584717
    3. '#' → logprob: -3.9892547130584717
    4. '   ' → logprob: -4.489254474639893
    5. 'e' → logprob: -5.989254474639893
    6. 'ieme' → logprob: -6.739254474639893
    7. 'ière' → logprob: -6.989254474639893
    8. 'i' → logprob: -7.364254474639893
    9. 'ère' → logprob: -7.864254474639893
    10. 'eme' → logprob: -7.864254474639893

Token 345: ' condition' (ID: 7060)
  Prédit: ' condition'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' condition' → logprob: -0.04382410645484924
    2. 'condition' → logprob: -3.1688241958618164
    3. ' for' → logprob: -7.918824195861816
    4. 'for' → logprob: -8.918824195861816
    5. '#' → logprob: -9.418824195861816
    6. '_condition' → logprob: -9.418824195861816
    7. ' #' → logprob: -10.168824195861816
    8. '   ' → logprob: -10.293824195861816
    9. ' if' → logprob: -11.293824195861816
    10. ':' → logprob: -11.543824195861816

Token 346: ' :
' (ID: 10039)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5401488542556763
    2. ':' → logprob: -0.9151488542556763
    3. ':
' → logprob: -4.790148735046387
    4. ' :' → logprob: -5.040148735046387
    5. ' :
' → logprob: -6.790148735046387
    6. '    
' → logprob: -7.165148735046387
    7. '   
' → logprob: -9.915148735046387
    8. '
' → logprob: -10.040148735046387
    9. ' for' → logprob: -10.415148735046387
    10. '  
' → logprob: -10.915148735046387

Token 347: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00697962986305356
    2. 'for' → logprob: -5.631979465484619
    3. ' for' → logprob: -5.756979465484619
    4. '#' → logprob: -9.631979942321777
    5. '
' → logprob: -10.256979942321777
    6. ' shifted' → logprob: -10.256979942321777
    7. 'shift' → logprob: -10.756979942321777
    8. '    
' → logprob: -11.006979942321777
    9. 'if' → logprob: -11.256979942321777
    10. 'A' → logprob: -11.881979942321777

Token 348: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.3383585214614868
    2. ' for' → logprob: -1.3383585214614868
    3. 'for' → logprob: -1.8383585214614868
    4. '#' (adapté à ' #') → logprob: -2.8383584022521973
    5. ' A' → logprob: -3.0883584022521973
    6. 'A' → logprob: -3.0883584022521973
    7. 'shift' → logprob: -3.2133584022521973
    8. ' shifted' → logprob: -3.7133584022521973
    9. ' if' → logprob: -4.213358402252197
    10. ' shift' → logprob: -4.463358402252197

Token 349: ' Vér' (ID: 159169)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.0511033535003662
    2. 'A' → logprob: -1.5511033535003662
    3. '#' → logprob: -2.176103353500366
    4. 'shift' → logprob: -2.926103353500366
    5. 'B' → logprob: -3.176103353500366
    6. '   ' → logprob: -3.301103353500366
    7. ' A' → logprob: -3.426103353500366
    8. ' for' → logprob: -3.551103353500366
    9. 'C' → logprob: -3.801103353500366
    10. 'if' → logprob: -4.176103591918945

Token 350: 'ifie' (ID: 46409)
  Prédit: 'ifie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifie' → logprob: -0.0731223076581955
    2. 'ification' → logprob: -2.698122262954712
    3. 'if' → logprob: -6.323122501373291
    4. 'ifier' → logprob: -6.698122501373291
    5. 'ifiez' → logprob: -10.073122024536133
    6. '   ' → logprob: -10.323122024536133
    7. 'ife' → logprob: -10.573122024536133
    8. 'ifi' → logprob: -11.323122024536133
    9. 'ifié' → logprob: -11.698122024536133
    10. 'ify' → logprob: -12.448122024536133

Token 351: ' si' (ID: 1784)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.6617498993873596
    2. ' si' → logprob: -0.7867498993873596
    3. 'if' → logprob: -4.036749839782715
    4. 'si' → logprob: -5.161749839782715
    5. '   ' → logprob: -5.286749839782715
    6. ' for' → logprob: -9.786749839782715
    7. 's' → logprob: -9.786749839782715
    8. ' ' → logprob: -10.036749839782715
    9. ' ' → logprob: -10.536749839782715
    10. '  ' → logprob: -10.661749839782715

Token 352: ' pour' (ID: 1930)
  Prédit: ' all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' all' → logprob: -0.08043204247951508
    2. 'all' → logprob: -2.7054319381713867
    3. ' A' → logprob: -5.830431938171387
    4. ' for' → logprob: -5.955431938171387
    5. ' any' → logprob: -6.080431938171387
    6. 'A' → logprob: -6.705431938171387
    7. 'for' → logprob: -7.080431938171387
    8. ' sorted' → logprob: -8.955431938171387
    9. 'any' → logprob: -9.080431938171387
    10. 'sorted' → logprob: -9.455431938171387

Token 353: ' un' (ID: 537)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.6707078218460083
    2. 'i' → logprob: -0.7957078218460083
    3. ' all' → logprob: -3.5457077026367188
    4. 'all' → logprob: -4.920707702636719
    5. ' any' → logprob: -7.795707702636719
    6. '   ' → logprob: -8.920707702636719
    7. 'tout' → logprob: -9.045707702636719
    8. 'any' → logprob: -9.170707702636719
    9. ' every' → logprob: -9.670707702636719
    10. 'for' → logprob: -9.795707702636719

Token 354: ' dé' (ID: 2393)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.9997718334197998
    2. 'i' → logprob: -1.2497718334197998
    3. 'd' → logprob: -1.3747718334197998
    4. ' dé' → logprob: -2.4997718334198
    5. ' shift' → logprob: -5.624772071838379
    6. 'shift' → logprob: -6.374772071838379
    7. 'dé' → logprob: -6.874772071838379
    8. ' offset' → logprob: -6.999772071838379
    9. 'offset' → logprob: -7.124772071838379
    10. ' d' → logprob: -7.249772071838379

Token 355: 'cal' (ID: 5842)
  Prédit: 'cal'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cal' → logprob: -0.000981839606538415
    2. 'al' → logprob: -8.500982284545898
    3. '```' → logprob: -8.625982284545898
    4. 'i' → logprob: -8.875982284545898
    5. '   ' → logprob: -9.375982284545898
    6. 'c' → logprob: -9.500982284545898
    7. 'cale' → logprob: -9.750982284545898
    8. 'f' → logprob: -10.750982284545898
    9. ' i' → logprob: -10.875982284545898
    10. 'placement' → logprob: -11.000982284545898

Token 356: 'age' (ID: 477)
  Prédit: 'age'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'age' → logprob: -0.01019043568521738
    2. '   ' → logprob: -5.135190486907959
    3. 'e' → logprob: -6.260190486907959
    4. 'i' → logprob: -6.635190486907959
    5. 'é' → logprob: -7.385190486907959
    6. '       ' → logprob: -8.5101900100708
    7. ' ' → logprob: -10.2601900100708
    8. '  ' → logprob: -10.7601900100708
    9. 'for' → logprob: -11.1351900100708
    10. 'shift' → logprob: -11.2601900100708

Token 357: ',' (ID: 11)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.39912182092666626
    2. ' de' → logprob: -1.6491217613220215
    3. '1' → logprob: -3.2741217613220215
    4. '=' → logprob: -3.6491217613220215
    5. ' =' → logprob: -3.6491217613220215
    6. 'd' → logprob: -3.7741217613220215
    7. ' i' → logprob: -5.0241217613220215
    8. '   ' → logprob: -5.1491217613220215
    9. ' of' → logprob: -5.3991217613220215
    10. 'de' → logprob: -5.6491217613220215

Token 358: ' chaque' (ID: 21194)
  Prédit: ' all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' all' → logprob: -0.2592252194881439
    2. 'all' → logprob: -1.5092252492904663
    3. 'for' → logprob: -5.759225368499756
    4. ' for' → logprob: -6.134225368499756
    5. ' any' → logprob: -7.134225368499756
    6. 'A' → logprob: -8.259224891662598
    7. '   ' → logprob: -8.384224891662598
    8. 'any' → logprob: -8.634224891662598
    9. ' A' → logprob: -8.759224891662598
    10. ' ' → logprob: -9.509224891662598

Token 359: ' élément' (ID: 99627)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.6959020495414734
    2. ' i' → logprob: -0.6959020495414734
    3. ' A' → logprob: -7.320901870727539
    4. 'A' → logprob: -7.320901870727539
    5. '   ' → logprob: -7.695901870727539
    6. ' B' → logprob: -7.820901870727539
    7. 'B' → logprob: -8.820901870727539
    8. ' for' → logprob: -9.320901870727539
    9. ' index' → logprob: -9.570901870727539
    10. ' j' → logprob: -10.195901870727539

Token 360: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.027941521257162094
    2. ' of' → logprob: -5.027941703796387
    3. ' i' → logprob: -5.152941703796387
    4. 'i' → logprob: -5.402941703796387
    5. '   ' → logprob: -5.402941703796387
    6. 'de' → logprob: -5.902941703796387
    7. 'B' → logprob: -6.527941703796387
    8. 'A' → logprob: -7.402941703796387
    9. 's' → logprob: -7.652941703796387
    10. ' B' → logprob: -8.152941703796387

Token 361: ' A' (ID: 355)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.26807165145874023
    2. ' range' → logprob: -1.6430716514587402
    3. 'A' → logprob: -3.2680716514587402
    4. 'B' → logprob: -6.14307165145874
    5. ' A' → logprob: -6.76807165145874
    6. ' B' → logprob: -8.518072128295898
    7. '(range' → logprob: -9.393072128295898
    8. 'for' → logprob: -10.268072128295898
    9. '   ' → logprob: -10.518072128295898
    10. ' ' → logprob: -11.768072128295898

Token 362: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.010958919301629066
    2. 'for' → logprob: -5.635959148406982
    3. ' for' → logprob: -5.885959148406982
    4. '   ' → logprob: -6.635959148406982
    5. 'def' → logprob: -7.635959148406982
    6. '```' → logprob: -7.760959148406982
    7. 'dé' → logprob: -8.385958671569824
    8. ' ' → logprob: -8.385958671569824
    9. ',' → logprob: -8.510958671569824
    10. ' shifted' → logprob: -8.635958671569824

Token 363: ' est' (ID: 893)
  Prédit: '[i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.2297353446483612
    2. '[(' → logprob: -1.6047353744506836
    3. '   ' → logprob: -6.354735374450684
    4. 'i' → logprob: -6.604735374450684
    5. '[' → logprob: -7.979735374450684
    6. '```' → logprob: -8.354735374450684
    7. '[:-' → logprob: -8.479735374450684
    8. ' i' → logprob: -8.854735374450684
    9. '(i' → logprob: -10.229735374450684
    10. ' est' → logprob: -10.354735374450684

Token 364: ' inférieur' (ID: 191498)
  Prédit: ' inférieur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' inférieur' → logprob: -0.6938595175743103
    2. ' <=' → logprob: -1.193859577178955
    3. '<=' → logprob: -1.693859577178955
    4. 'inf' → logprob: -5.443859577178955
    5. ' inf' → logprob: -6.443859577178955
    6. 'le' → logprob: -6.568859577178955
    7. '<' → logprob: -7.318859577178955
    8. 'strict' → logprob: -7.443859577178955
    9. 'infer' → logprob: -7.568859577178955
    10. '```' → logprob: -7.693859577178955

Token 365: ' ou' (ID: 2031)
  Prédit: ' ou'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ou' → logprob: -0.3784691393375397
    2. 'ou' → logprob: -1.2534691095352173
    3. '   ' → logprob: -4.503468990325928
    4. '=' → logprob: -4.628468990325928
    5. 'or' → logprob: -5.878468990325928
    6. 'à' → logprob: -6.253468990325928
    7. '```' → logprob: -6.628468990325928
    8. 'e' → logprob: -7.253468990325928
    9. ' or' → logprob: -7.503468990325928
    10. '#' → logprob: -8.503469467163086

Token 366: ' égal' (ID: 15059)
  Prédit: 'égal'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'égal' → logprob: -0.006064240820705891
    2. ' égal' → logprob: -6.131064414978027
    3. 'ég' → logprob: -6.256064414978027
    4. ' ég' → logprob: -6.381064414978027
    5. 'à' → logprob: -9.006064414978027
    6. 'égalité' → logprob: -10.381064414978027
    7. 'é' → logprob: -10.631064414978027
    8. 'ou' → logprob: -11.131064414978027
    9. 'egal' → logprob: -11.381064414978027
    10. 'equal' → logprob: -11.506064414978027

Token 367: ' au' (ID: 2791)
  Prédit: ' à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.03951610252261162
    2. 'à' → logprob: -3.2895162105560303
    3. '   ' → logprob: -7.539515972137451
    4. ' au' → logprob: -8.03951644897461
    5. ' ' → logprob: -9.16451644897461
    6. ' aux' → logprob: -9.16451644897461
    7. '    ' → logprob: -9.66451644897461
    8. 'B' → logprob: -10.16451644897461
    9. ''à' → logprob: -10.16451644897461
    10. ' a' → logprob: -10.28951644897461

Token 368: ' précédent' (ID: 128462)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.03197932615876198
    2. ' B' → logprob: -3.9069793224334717
    3. 'élé' → logprob: -4.531979560852051
    4. ' élément' → logprob: -8.53197956085205
    5. 'element' → logprob: -9.03197956085205
    6. ' ' → logprob: -9.40697956085205
    7. '```' → logprob: -10.03197956085205
    8. ' element' → logprob: -10.28197956085205
    9. '   ' → logprob: -10.28197956085205
    10. 'à' → logprob: -11.53197956085205

Token 369: ' élément' (ID: 99627)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.13625578582286835
    2. '   ' → logprob: -2.8862557411193848
    3. ' for' → logprob: -4.511255741119385
    4. 'B' → logprob: -4.636255741119385
    5. 'de' → logprob: -4.636255741119385
    6. ' ' → logprob: -5.136255741119385
    7. ' B' → logprob: -5.511255741119385
    8. '2' → logprob: -5.636255741119385
    9. 's' → logprob: -5.761255741119385
    10. ' of' → logprob: -5.761255741119385

Token 370: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.019647836685180664
    2. 's' → logprob: -4.769647598266602
    3. 'de' → logprob: -5.269647598266602
    4. ']' → logprob: -6.394647598266602
    5. ' of' → logprob: -6.394647598266602
    6. ',' → logprob: -7.644647598266602
    7. '2' → logprob: -7.894647598266602
    8. ')' → logprob: -7.894647598266602
    9. 'B' → logprob: -8.144647598266602
    10. '   ' → logprob: -8.394647598266602

Token 371: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.22543717920780182
    2. ' B' → logprob: -1.6004371643066406
    3. ' ' → logprob: -11.22543716430664
    4. '```' → logprob: -13.22543716430664
    5. '`' → logprob: -13.41293716430664
    6. '   ' → logprob: -13.78793716430664
    7. 'b' → logprob: -13.85043716430664
    8. 's' → logprob: -13.91293716430664
    9. ' la' → logprob: -14.60043716430664
    10. ',' → logprob: -14.91293716430664

Token 372: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.06587649881839752
    2. ' for' → logprob: -3.6908764839172363
    3. '   ' → logprob: -4.065876483917236
    4. 'for' → logprob: -4.940876483917236
    5. ' (' → logprob: -5.565876483917236
    6. ' ' → logprob: -6.315876483917236
    7. 's' → logprob: -6.815876483917236
    8. ':' → logprob: -6.815876483917236
    9. '#' → logprob: -6.815876483917236
    10. ' or' → logprob: -6.940876483917236

Token 373: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08358234167098999
    2. ' for' → logprob: -2.5835824012756348
    3. 'for' → logprob: -5.958582401275635
    4. ' (' → logprob: -7.583582401275635
    5. '
' → logprob: -7.833582401275635
    6. ',' → logprob: -8.208581924438477
    7. ':' → logprob: -8.583581924438477
    8. '    
' → logprob: -9.458581924438477
    9. ' de' → logprob: -9.583581924438477
    10. '2' → logprob: -9.708581924438477

Token 374: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.44410061836242676
    2. ' for' → logprob: -1.0691006183624268
    3. 'for' → logprob: -4.194100379943848
    4. '
' → logprob: -10.194100379943848
    5. ' if' → logprob: -10.194100379943848
    6. '    
' → logprob: -11.069100379943848
    7. ' ' → logprob: -11.569100379943848
    8. ',' → logprob: -11.694100379943848
    9. ' (' → logprob: -11.694100379943848
    10. ':' → logprob: -11.819100379943848

Token 375: ' #' (ID: 1069)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.42734962701797485
    2. 'for' → logprob: -1.55234956741333
    3. '   ' → logprob: -2.05234956741333
    4. 'if' → logprob: -6.42734956741333
    5. ' if' → logprob: -6.42734956741333
    6. 'shift' → logprob: -6.55234956741333
    7. ' offset' → logprob: -6.80234956741333
    8. 'offset' → logprob: -7.17734956741333
    9. ' shifted' → logprob: -7.92734956741333
    10. ' shift' → logprob: -8.552350044250488

Token 376: ' Ceci' (ID: 144699)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.7019505500793457
    2. '   ' → logprob: -1.2019505500793457
    3. ' for' → logprob: -2.2019505500793457
    4. 'offset' → logprob: -3.0769505500793457
    5. 'shift' → logprob: -3.5769505500793457
    6. ' offset' → logprob: -4.701950550079346
    7. 'if' → logprob: -5.576950550079346
    8. ' shift' → logprob: -6.201950550079346
    9. 'de' → logprob: -6.451950550079346
    10. ' if' → logprob: -7.576950550079346

Token 377: ' pourrait' (ID: 39622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.039810795336961746
    2. ' for' → logprob: -4.289810657501221
    3. ' n' → logprob: -5.289810657501221
    4. ':' → logprob: -5.414810657501221
    5. 'est' → logprob: -5.414810657501221
    6. ' est' → logprob: -5.539810657501221
    7. 'n' → logprob: -6.164810657501221
    8. 'for' → logprob: -6.289810657501221
    9. ' :' → logprob: -6.914810657501221
    10. ' pour' → logprob: -8.039811134338379

Token 378: ' permettre' (ID: 55483)
  Prédit: ' permettre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' permettre' → logprob: -0.44293180108070374
    2. 'per' → logprob: -2.317931890487671
    3. 'être' → logprob: -2.817931890487671
    4. 'ind' → logprob: -3.317931890487671
    5. ' être' → logprob: -3.692931890487671
    6. '   ' → logprob: -3.942931890487671
    7. 'cor' → logprob: -3.942931890487671
    8. 'pass' → logprob: -4.192931652069092
    9. 'se' → logprob: -4.442931652069092
    10. '#' → logprob: -4.817931652069092

Token 379: ' un' (ID: 537)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' de' → logprob: -1.281984806060791
    2. 'de' → logprob: -1.281984806060791
    3. '   ' → logprob: -1.906984806060791
    4. 'd' → logprob: -1.906984806060791
    5. ' d' → logprob: -2.406984806060791
    6. '       ' → logprob: -3.656984806060791
    7. ' une' → logprob: -5.156984806060791
    8. 'une' → logprob: -5.406984806060791
    9. ' à' → logprob: -5.531984806060791
    10. '#' → logprob: -5.781984806060791

Token 380: ' permutation' (ID: 135200)
  Prédit: ' dé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' dé' → logprob: -0.5440555810928345
    2. 'd' → logprob: -1.4190555810928345
    3. 'shift' → logprob: -3.169055461883545
    4. 'dé' → logprob: -3.419055461883545
    5. 'print' → logprob: -3.544055461883545
    6. 'de' → logprob: -3.919055461883545
    7. ' decal' → logprob: -3.919055461883545
    8. ' shift' → logprob: -5.044055461883545
    9. '```' → logprob: -5.669055461883545
    10. 'possible' → logprob: -5.919055461883545

Token 381: ' ou' (ID: 2031)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.9859317541122437
    2. ' possible' → logprob: -1.7359317541122437
    3. ' des' → logprob: -1.9859317541122437
    4. '   ' → logprob: -2.360931873321533
    5. ' simple' → logprob: -3.110931873321533
    6. ' cycl' → logprob: -3.735931873321533
    7. 's' → logprob: -3.860931873321533
    8. 'possible' → logprob: -4.235931873321533
    9. ' dé' → logprob: -4.235931873321533
    10. ' cyclic' → logprob: -4.235931873321533

Token 382: ' une' (ID: 2463)
  Prédit: ' un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.11458861082792282
    2. 'un' → logprob: -2.864588499069214
    3. ' une' → logprob: -3.864588499069214
    4. 'd' → logprob: -4.239588737487793
    5. ' dé' → logprob: -5.114588737487793
    6. 'une' → logprob: -5.239588737487793
    7. ' rotation' → logprob: -6.989588737487793
    8. ' arrangement' → logprob: -7.739588737487793
    9. ' d' → logprob: -8.239588737487793
    10. 'rotation' → logprob: -8.239588737487793

Token 383: ' rotation' (ID: 23769)
  Prédit: 'rotation'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'rotation' → logprob: -0.37495726346969604
    2. ' rotation' → logprob: -2.124957323074341
    3. 'd' → logprob: -2.749957323074341
    4. 'possible' → logprob: -3.124957323074341
    5. 'shift' → logprob: -4.249957084655762
    6. 'rot' → logprob: -4.499957084655762
    7. 'dé' → logprob: -4.999957084655762
    8. 'solution' → logprob: -5.124957084655762
    9. 'ré' → logprob: -5.249957084655762
    10. 'poss' → logprob: -5.499957084655762

Token 384: ' avantage' (ID: 111311)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.6778501272201538
    2. '   ' → logprob: -0.8028501272201538
    3. 'for' → logprob: -3.6778502464294434
    4. ' if' → logprob: -4.302850246429443
    5. ' de' → logprob: -6.427850246429443
    6. 'if' → logprob: -6.552850246429443
    7. ' of' → logprob: -6.677850246429443
    8. 'B' → logprob: -7.802850246429443
    9. ' B' → logprob: -8.302849769592285
    10. ' pour' → logprob: -9.302849769592285

Token 385: 'use' (ID: 1821)
  Prédit: 'use'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'use' → logprob: -0.15844252705574036
    2. 'ux' → logprob: -2.033442497253418
    3. 'e' → logprob: -4.658442497253418
    4. 'usement' → logprob: -6.783442497253418
    5. 'eux' → logprob: -6.908442497253418
    6. 'x' → logprob: -7.658442497253418
    7. 'u' → logprob: -7.783442497253418
    8. 'age' → logprob: -8.095942497253418
    9. 'ante' → logprob: -8.408442497253418
    10. 'uses' → logprob: -8.470942497253418

Token 386: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14789830148220062
    2. ' for' → logprob: -2.1478981971740723
    3. 'for' → logprob: -3.8978981971740723
    4. '
' → logprob: -8.27289867401123
    5. '    
' → logprob: -9.52289867401123
    6. '#' → logprob: -10.77289867401123
    7. ' shifted' → logprob: -10.77289867401123
    8. ' if' → logprob: -10.89789867401123
    9. 'if' → logprob: -11.02289867401123
    10. 'shift' → logprob: -11.39789867401123

Token 387: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18665626645088196
    2. ' for' → logprob: -1.9366562366485596
    3. 'for' → logprob: -3.6866562366485596
    4. ' if' → logprob: -7.561656475067139
    5. 'if' → logprob: -8.68665599822998
    6. ' shifted' → logprob: -8.93665599822998
    7. 'shift' → logprob: -10.06165599822998
    8. ' offset' → logprob: -10.18665599822998
    9. 'offset' → logprob: -10.18665599822998
    10. '```' → logprob: -11.31165599822998

Token 388: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.7858635187149048
    2. ' for' → logprob: -1.2858635187149048
    3. '   ' → logprob: -1.5358635187149048
    4. 'if' → logprob: -3.6608633995056152
    5. ' if' → logprob: -4.785863399505615
    6. 'shift' → logprob: -4.910863399505615
    7. 'offset' → logprob: -5.160863399505615
    8. ' offset' → logprob: -5.660863399505615
    9. ' shifted' → logprob: -6.910863399505615
    10. ' shift' → logprob: -7.410863399505615

Token 389: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.3875959515571594
    2. 'i' → logprob: -1.1375958919525146
    3. ' shift' → logprob: -8.012596130371094
    4. 'shift' → logprob: -8.137596130371094
    5. ' offset' → logprob: -10.637596130371094
    6. 'offset' → logprob: -10.887596130371094
    7. 'd' → logprob: -11.137596130371094
    8. 'j' → logprob: -11.387596130371094
    9. ' j' → logprob: -11.637596130371094
    10. '   ' → logprob: -12.012596130371094

Token 390: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.026312021538615227
    2. 'in' → logprob: -3.6513121128082275
    3. ' ' → logprob: -12.901311874389648
    4. '   ' → logprob: -13.026311874389648
    5. '  ' → logprob: -13.901311874389648
    6. '	in' → logprob: -14.026311874389648
    7. 'range' → logprob: -14.151311874389648
    8. 's' → logprob: -14.276311874389648
    9. 'In' → logprob: -14.401311874389648
    10. '```' → logprob: -14.776311874389648

Token 391: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.38692253828048706
    2. ' range' → logprob: -1.1369225978851318
    3. '(range' → logprob: -10.011922836303711
    4. '   ' → logprob: -12.136922836303711
    5. ' ' → logprob: -14.511922836303711
    6. '  ' → logprob: -15.636922836303711
    7. '	range' → logprob: -15.636922836303711
    8. '(' → logprob: -16.51192283630371
    9. 'rang' → logprob: -16.76192283630371
    10. 'in' → logprob: -16.88692283630371

Token 392: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.47414082288742065
    2. '(N' → logprob: -0.9741408228874207
    3. ' ' → logprob: -10.599141120910645
    4. '1' → logprob: -11.349141120910645
    5. ' (' → logprob: -11.474141120910645
    6. '(n' → logprob: -12.224141120910645
    7. '(
' → logprob: -12.224141120910645
    8. 'N' → logprob: -13.099141120910645
    9. '(len' → logprob: -14.099141120910645
    10. '(i' → logprob: -14.349141120910645

Token 393: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.6330876350402832
    2. 'N' → logprob: -0.7580876350402832
    3. '(' → logprob: -8.133087158203125
    4. '(N' → logprob: -8.883087158203125
    5. ' N' → logprob: -10.883087158203125
    6. ' ' → logprob: -11.133087158203125
    7. '   ' → logprob: -11.383087158203125
    8. '2' → logprob: -12.883087158203125
    9. 'n' → logprob: -13.383087158203125
    10. '0' → logprob: -13.508087158203125

Token 394: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0007688904879614711
    2. ' ,' → logprob: -7.375768661499023
    3. ',N' → logprob: -8.875768661499023
    4. '(N' → logprob: -13.750768661499023
    5. ',
' → logprob: -14.750768661499023
    6. 'N' → logprob: -15.250768661499023
    7. '   ' → logprob: -15.625768661499023
    8. ',n' → logprob: -16.125768661499023
    9. 'to' → logprob: -16.375768661499023
    10. '，' → logprob: -16.625768661499023

Token 395: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -3.4121114822482923e-06
    2. ' N' → logprob: -12.875003814697266
    3. '   ' → logprob: -14.000003814697266
    4. 'n' → logprob: -18.375003814697266
    5. '	N' → logprob: -18.750003814697266
    6. 'len' → logprob: -20.000003814697266
    7. ')' → logprob: -20.375003814697266
    8. '(N' → logprob: -20.625003814697266
    9. '       ' → logprob: -20.625003814697266
    10. '```' → logprob: -21.000003814697266

Token 396: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.0036145627964287996
    2. '):' → logprob: -5.62861442565918
    3. '   ' → logprob: -11.62861442565918
    4. '):
' → logprob: -12.75361442565918
    5. '+' → logprob: -13.75361442565918
    6. ' ):
' → logprob: -13.87861442565918
    7. ')' → logprob: -15.37861442565918
    8. ':
' → logprob: -15.50361442565918
    9. ':' → logprob: -15.87861442565918
    10. '):

' → logprob: -16.62861442565918

Token 397: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0005965200834907591
    2. '   ' → logprob: -7.500596523284912
    3. ' if' → logprob: -10.250596046447754
    4. 'if' → logprob: -11.875596046447754
    5. ':' → logprob: -15.375596046447754
    6. '           ' → logprob: -15.375596046447754
    7. '	   ' → logprob: -15.375596046447754
    8. '<|end|>' → logprob: -15.625596046447754
    9. '    ' → logprob: -16.37559700012207
    10. '```' → logprob: -16.37559700012207

Token 398: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.1382184773683548
    2. '       ' → logprob: -2.138218402862549
    3. '   ' → logprob: -5.013218402862549
    4. ' if' → logprob: -5.388218402862549
    5. '	if' → logprob: -13.263218879699707
    6. ' ' → logprob: -13.388218879699707
    7. '           ' → logprob: -13.638218879699707
    8. '     ' → logprob: -14.138218879699707
    9. '    ' → logprob: -14.388218879699707
    10. '  ' → logprob: -14.888218879699707

Token 399: ' A' (ID: 355)
  Prédit: ' A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.3132868707180023
    2. 'A' → logprob: -1.3132869005203247
    3. '   ' → logprob: -11.438286781311035
    4. ' not' → logprob: -11.938286781311035
    5. '    ' → logprob: -12.688286781311035
    6. '       ' → logprob: -12.813286781311035
    7. '	A' → logprob: -14.438286781311035
    8. '        ' → logprob: -15.063286781311035
    9. '           ' → logprob: -15.063286781311035
    10. ' ' → logprob: -15.313286781311035

Token 400: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -2.5776860184123507e-06
    2. '[' → logprob: -13.62500286102295
    3. '[i' → logprob: -14.12500286102295
    4. ' ' → logprob: -15.12500286102295
    5. '   ' → logprob: -16.250001907348633
    6. '₂' → logprob: -16.250001907348633
    7. ' [' → logprob: -16.812501907348633
    8. '```' → logprob: -17.125001907348633
    9. '۲' → logprob: -17.250001907348633
    10. '２' → logprob: -17.750001907348633

Token 401: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -9.412610233994201e-05
    2. '[' → logprob: -9.500094413757324
    3. '2' → logprob: -11.500094413757324
    4. ' [' → logprob: -12.125094413757324
    5. '   ' → logprob: -13.125094413757324
    6. 'i' → logprob: -15.250094413757324
    7. '       ' → logprob: -15.375094413757324
    8. '[j' → logprob: -15.625094413757324
    9. '[A' → logprob: -15.750094413757324
    10. '```' → logprob: -16.000093460083008

Token 402: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0915701761841774
    2. ' >' → logprob: -3.0915701389312744
    3. '>' → logprob: -3.8415701389312744
    4. '[i' → logprob: -4.7165703773498535
    5. ']>' → logprob: -4.7165703773498535
    6. ' ]' → logprob: -5.9665703773498535
    7. '   ' → logprob: -9.716569900512695
    8. '[' → logprob: -10.091569900512695
    9. ')' → logprob: -10.966569900512695
    10. ' ' → logprob: -11.966569900512695

Token 403: ' <=' (ID: 5017)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.18455061316490173
    2. '>' → logprob: -1.8095506429672241
    3. ' <=' → logprob: -5.434550762176514
    4. '<=' → logprob: -7.809550762176514
    5. '[i' → logprob: -11.934550285339355
    6. ' ' → logprob: -12.184550285339355
    7. '   ' → logprob: -12.184550285339355
    8. '[' → logprob: -13.309550285339355
    9. ' >
' → logprob: -13.809550285339355
    10. '    ' → logprob: -13.809550285339355

Token 404: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.16024261713027954
    2. ' B' → logprob: -1.9102425575256348
    3. '   ' → logprob: -11.285243034362793
    4. '       ' → logprob: -13.285243034362793
    5. ' ' → logprob: -13.410243034362793
    6. '	B' → logprob: -13.785243034362793
    7. 'b' → logprob: -14.535243034362793
    8. '    ' → logprob: -14.535243034362793
    9. '  ' → logprob: -15.785243034362793
    10. '           ' → logprob: -16.035242080688477

Token 405: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -1.4021237802808173e-05
    2. '[' → logprob: -12.125014305114746
    3. '[i' → logprob: -12.625014305114746
    4. ' ' → logprob: -13.125014305114746
    5. '_' → logprob: -13.500014305114746
    6. '   ' → logprob: -14.375014305114746
    7. '```' → logprob: -15.500014305114746
    8. ']' → logprob: -15.875014305114746
    9. '₂' → logprob: -16.06251335144043
    10. '  ' → logprob: -16.25001335144043

Token 406: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -4.842555426876061e-06
    2. 'i' → logprob: -12.625004768371582
    3. '[' → logprob: -14.250004768371582
    4. '   ' → logprob: -14.750004768371582
    5. '[(' → logprob: -15.500004768371582
    6. '(i' → logprob: -16.0000057220459
    7. '       ' → logprob: -16.7500057220459
    8. '[
' → logprob: -17.6250057220459
    9. '[j' → logprob: -17.8750057220459
    10. '{i' → logprob: -18.1250057220459

Token 407: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.02179562859237194
    2. 'i' → logprob: -3.8967955112457275
    3. '[i' → logprob: -7.396795749664307
    4. ' -' → logprob: -7.521795749664307
    5. '(i' → logprob: -10.271795272827148
    6. '   ' → logprob: -10.396795272827148
    7. '1' → logprob: -11.521795272827148
    8. ' i' → logprob: -11.896795272827148
    9. '-i' → logprob: -12.771795272827148
    10. '```' → logprob: -13.146795272827148

Token 408: '1' (ID: 16)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.3892751634120941
    2. '1' → logprob: -1.1392751932144165
    3. ']' → logprob: -6.514275074005127
    4. '])' → logprob: -8.014275550842285
    5. ' i' → logprob: -8.264275550842285
    6. '0' → logprob: -8.389275550842285
    7. ' ' → logprob: -10.389275550842285
    8. '   ' → logprob: -10.514275550842285
    9. '```' → logprob: -11.389275550842285
    10. ')' → logprob: -11.639275550842285

Token 409: ']:
' (ID: 22152)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.4331173002719879
    2. '):
' → logprob: -1.0581172704696655
    3. ':' → logprob: -5.683117389678955
    4. ')' → logprob: -7.433117389678955
    5. '       ' → logprob: -8.808116912841797
    6. ':
' → logprob: -9.183116912841797
    7. '   ' → logprob: -9.683116912841797
    8. ' and' → logprob: -11.183116912841797
    9. '):
' → logprob: -11.183116912841797
    10. ''):
' → logprob: -11.308116912841797

Token 410: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.1871325969696045
    2. ':' → logprob: -2.4371325969696045
    3. '       ' → logprob: -3.0621325969696045
    4. ' continue' → logprob: -3.8121325969696045
    5. ':
' → logprob: -4.437132835388184
    6. 'continue' → logprob: -6.437132835388184
    7. '	continue' → logprob: -8.062132835388184
    8. '   ' → logprob: -8.687132835388184
    9. ' continues' → logprob: -9.062132835388184
    10. '               ' → logprob: -9.312132835388184

Token 411: ' print' (ID: 2123)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'continue' → logprob: -0.8185769319534302
    2. '           ' → logprob: -1.1935769319534302
    3. '       ' → logprob: -1.6935769319534302
    4. ' continue' → logprob: -3.0685768127441406
    5. 'pass' → logprob: -4.318576812744141
    6. 'print' (adapté à ' print') → logprob: -5.318576812744141
    7. '   ' → logprob: -5.568576812744141
    8. 'break' → logprob: -6.943576812744141
    9. ' pass' → logprob: -7.193576812744141
    10. '```' → logprob: -7.693576812744141

Token 412: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.00020866614067927003
    2. '(' → logprob: -8.500208854675293
    3. '("' → logprob: -12.250208854675293
    4. ' ('' → logprob: -15.500208854675293
    5. '('(' → logprob: -16.250207901000977
    6. '(('' → logprob: -17.250207901000977
    7. '(
' → logprob: -17.625207901000977
    8. '(',' → logprob: -17.750207901000977
    9. '()' → logprob: -18.000207901000977
    10. '(\'' → logprob: -18.500207901000977

Token 413: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.0011802274966612458
    2. 'No' → logprob: -7.376180171966553
    3. ''' → logprob: -7.501180171966553
    4. 'Oui' → logprob: -14.501180648803711
    5. ' Yes' → logprob: -14.751180648803711
    6. 'YES' → logprob: -16.50118064880371
    7. '"' → logprob: -17.00118064880371
    8. '   ' → logprob: -18.25118064880371
    9. 'Ye' → logprob: -18.50118064880371
    10. '('' → logprob: -18.50118064880371

Token 414: '')
' (ID: 2515)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.583576500415802
    2. '')
' → logprob: -0.833576500415802
    3. '')' → logprob: -4.958576679229736
    4. '               ' → logprob: -7.833576679229736
    5. ')
' → logprob: -9.083576202392578
    6. '       ' → logprob: -10.708576202392578
    7. ')' → logprob: -10.958576202392578
    8. '")
' → logprob: -11.958576202392578
    9. '')
' → logprob: -11.958576202392578
    10. ' ')
' → logprob: -12.458576202392578

Token 415: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0002285694790771231
    2. '               ' → logprob: -8.875228881835938
    3. '       ' → logprob: -10.250228881835938
    4. '<|end|>' → logprob: -11.125228881835938
    5. '		' → logprob: -11.250228881835938
    6. '   ' → logprob: -11.750228881835938
    7. '	       ' → logprob: -12.000228881835938
    8. 'return' → logprob: -12.625228881835938
    9. ' return' → logprob: -13.375228881835938
    10. '<|end|>' → logprob: -13.500228881835938

Token 416: ' return' (ID: 622)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0009236076730303466
    2. 'return' (adapté à ' return') → logprob: -7.3759236335754395
    3. ' return' → logprob: -8.250923156738281
    4. '
' → logprob: -11.000923156738281
    5. '               ' → logprob: -11.500923156738281
    6. '		' → logprob: -12.625923156738281
    7. '	       ' → logprob: -13.500923156738281
    8. '       ' → logprob: -13.875923156738281
    9. '   ' → logprob: -14.000923156738281
    10. '	return' → logprob: -14.000923156738281

Token 417: '

' (ID: 279)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0004446124075911939
    2. '<|end|>' → logprob: -8.250444412231445
    3. '       ' → logprob: -9.750444412231445
    4. 'print' → logprob: -9.875444412231445
    5. '    
' → logprob: -10.500444412231445
    6. '.' → logprob: -11.375444412231445
    7. '
' → logprob: -11.750444412231445
    8. '\n' → logprob: -12.000444412231445
    9. 'newline' → logprob: -12.125444412231445
    10. '```' → logprob: -12.875444412231445

Token 418: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03807282820343971
    2. 'print' → logprob: -3.2880728244781494
    3. 'for' → logprob: -10.91307258605957
    4. '```' → logprob: -11.66307258605957
    5. ' print' → logprob: -13.53807258605957
    6. '    
' → logprob: -14.03807258605957
    7. '#' → logprob: -14.16307258605957
    8. '
' → logprob: -14.28807258605957
    9. '       ' → logprob: -14.66307258605957
    10. 'if' → logprob: -15.16307258605957

Token 419: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.08249444514513016
    2. '   ' → logprob: -2.8324944972991943
    3. 'for' → logprob: -3.9574944972991943
    4. 'if' → logprob: -7.332494258880615
    5. ' print' → logprob: -8.582494735717773
    6. '#' (adapté à ' #') → logprob: -8.582494735717773
    7. '```' → logprob: -9.332494735717773
    8. ' for' → logprob: -9.457494735717773
    9. ' if' → logprob: -12.832494735717773
    10. '    
' → logprob: -13.582494735717773

Token 420: ' Si' (ID: 7832)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.4082580506801605
    2. 'for' → logprob: -1.908258080482483
    3. 'print' → logprob: -1.908258080482483
    4. 'if' → logprob: -3.5332579612731934
    5. 'from' → logprob: -6.533257961273193
    6. 'max' → logprob: -6.783257961273193
    7. 'def' → logprob: -7.033257961273193
    8. 'A' → logprob: -7.408257961273193
    9. 'offset' → logprob: -7.408257961273193
    10. 'min' → logprob: -7.408257961273193

Token 421: ' les' (ID: 1341)
  Prédit: ' N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' N' → logprob: -1.757777452468872
    2. 'N' → logprob: -1.882777452468872
    3. 'len' → logprob: -2.257777452468872
    4. ' not' → logprob: -2.632777452468872
    5. 'A' → logprob: -2.632777452468872
    6. 'not' → logprob: -2.757777452468872
    7. ' A' → logprob: -3.132777452468872
    8. ' all' → logprob: -3.132777452468872
    9. ' len' → logprob: -3.507777452468872
    10. ' ici' → logprob: -3.507777452468872

Token 422: ' deux' (ID: 10301)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.4307297468185425
    2. 'A' → logprob: -1.8057297468185425
    3. 'len' → logprob: -1.9307297468185425
    4. 'N' → logprob: -2.555729866027832
    5. 'i' → logprob: -2.680729866027832
    6. 'all' → logprob: -2.680729866027832
    7. 'print' → logprob: -3.055729866027832
    8. 'True' → logprob: -3.305729866027832
    9. '#' → logprob: -3.555729866027832
    10. ' N' → logprob: -4.180729866027832

Token 423: ' vér' (ID: 42524)
  Prédit: 'conditions'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'conditions' → logprob: -0.05747160688042641
    2. ' conditions' → logprob: -3.307471513748169
    3. 'for' → logprob: -4.557471752166748
    4. 'bou' → logprob: -5.307471752166748
    5. ' bou' → logprob: -6.682471752166748
    6. 'print' → logprob: -7.307471752166748
    7. '#' → logprob: -8.05747127532959
    8. 'condition' → logprob: -8.18247127532959
    9. 'tests' → logprob: -8.18247127532959
    10. 'prem' → logprob: -8.43247127532959

Token 424: 'ifications' (ID: 9110)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.521960437297821
    2. 'f' → logprob: -1.1469604969024658
    3. 'fic' → logprob: -3.396960496902466
    4. 'es' → logprob: -4.271960258483887
    5. 'ifes' → logprob: -4.521960258483887
    6. 'ifiées' → logprob: -4.646960258483887
    7. 'ifications' → logprob: -5.146960258483887
    8. '```' → logprob: -5.771960258483887
    9. 'ifiés' → logprob: -6.021960258483887
    10. 'ifie' → logprob: -6.396960258483887

Token 425: ' précéd' (ID: 55435)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.3033806383609772
    2. 'ne' → logprob: -2.6783807277679443
    3. 'ont' → logprob: -2.9283807277679443
    4. 's' → logprob: -3.1783807277679443
    5. ' n' → logprob: -3.8033807277679443
    6. '   ' → logprob: -4.428380489349365
    7. '#' → logprob: -4.428380489349365
    8. ' ne' → logprob: -4.678380489349365
    9. 'su' → logprob: -4.678380489349365
    10. 'print' → logprob: -4.678380489349365

Token 426: 'entes' (ID: 5651)
  Prédit: 'ent'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ent' → logprob: -0.0894119143486023
    2. 'entes' → logprob: -2.464411973953247
    3. 'ents' → logprob: -7.964411735534668
    4. '#' → logprob: -10.089411735534668
    5. 'è' → logprob: -10.839411735534668
    6. 'e' → logprob: -11.214411735534668
    7. '```' → logprob: -11.464411735534668
    8. 'ant' → logprob: -11.839411735534668
    9. 'ente' → logprob: -12.339411735534668
    10. 'èrent' → logprob: -12.464411735534668

Token 427: ' n' (ID: 297)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.11888568103313446
    2. 'n' → logprob: -3.3688857555389404
    3. '   ' → logprob: -3.4938857555389404
    4. 'ont' → logprob: -3.7438857555389404
    5. ':' → logprob: -4.493885517120361
    6. ':
' → logprob: -5.493885517120361
    7. ' print' → logprob: -5.743885517120361
    8. ' n' → logprob: -6.243885517120361
    9. 'ne' → logprob: -7.368885517120361
    10. '```' → logprob: -7.868885517120361

Token 428: ''ont' (ID: 64195)
  Prédit: ''ont'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''ont' → logprob: -0.12205328047275543
    2. 'e' → logprob: -2.872053384780884
    3. 'ont' → logprob: -3.747053384780884
    4. 'on' → logprob: -5.122053146362305
    5. ''im' → logprob: -5.122053146362305
    6. 'o' → logprob: -5.372053146362305
    7. '#' → logprob: -5.497053146362305
    8. 'a' → logprob: -6.122053146362305
    9. ''é' → logprob: -6.122053146362305
    10. 'é' → logprob: -6.247053146362305

Token 429: ' rien' (ID: 23082)
  Prédit: 'pas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pas' → logprob: -0.008851749822497368
    2. ' pas' → logprob: -4.758851528167725
    3. 'pass' → logprob: -9.508852005004883
    4. 'p' → logprob: -9.883852005004883
    5. 'pu' → logprob: -10.633852005004883
    6. 'print' → logprob: -10.633852005004883
    7. 'about' → logprob: -11.133852005004883
    8. 'plus' → logprob: -11.508852005004883
    9. 'lie' → logprob: -11.633852005004883
    10. '```' → logprob: -12.633852005004883

Token 430: ' donné' (ID: 52079)
  Prédit: 'im'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'im' → logprob: -0.7811176776885986
    2. 'print' → logprob: -1.4061176776885986
    3. 'd' → logprob: -2.1561176776885986
    4. 'fait' → logprob: -2.9061176776885986
    5. 'don' → logprob: -3.2811176776885986
    6. 'about' → logprob: -3.4061176776885986
    7. 'ren' → logprob: -4.5311174392700195
    8. ' donné' → logprob: -4.5311174392700195
    9. 'pass' → logprob: -4.6561174392700195
    10. 'per' → logprob: -4.9061174392700195

Token 431: ',
' (ID: 412)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.022932231426239014
    2. ',' → logprob: -4.397932052612305
    3. 'print' → logprob: -5.272932052612305
    4. ':' → logprob: -5.397932052612305
    5. '
' → logprob: -8.647932052612305
    6. ' print' → logprob: -9.147932052612305
    7. '#' → logprob: -9.272932052612305
    8. 'for' → logprob: -9.397932052612305
    9. ' for' → logprob: -9.397932052612305
    10. '    
' → logprob: -9.647932052612305

Token 432: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6732462644577026
    2. '#' → logprob: -1.2982462644577026
    3. 'for' → logprob: -1.7982462644577026
    4. 'print' → logprob: -3.048246383666992
    5. 'i' → logprob: -7.298246383666992
    6. 'from' → logprob: -7.673246383666992
    7. 'if' → logprob: -7.798246383666992
    8. 'shift' → logprob: -8.048246383666992
    9. 'A' → logprob: -8.548246383666992
    10. 'B' → logprob: -8.673246383666992

Token 433: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.19733603298664093
    2. '#' (adapté à ' #') → logprob: -2.447335958480835
    3. 'for' → logprob: -2.822335958480835
    4. ' for' → logprob: -4.072336196899414
    5. 'print' → logprob: -4.447336196899414
    6. ' #' → logprob: -6.322336196899414
    7. 'if' → logprob: -6.697336196899414
    8. ' print' → logprob: -7.697336196899414
    9. '
' → logprob: -8.322336196899414
    10. ' if' → logprob: -8.947336196899414

Token 434: ' on' (ID: 402)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.08096230775117874
    2. 'for' → logprob: -2.8309624195098877
    3. 'print' → logprob: -4.580962181091309
    4. 'B' → logprob: -6.205962181091309
    5. '   ' → logprob: -6.580962181091309
    6. 'from' → logprob: -6.705962181091309
    7. 'A' → logprob: -6.955962181091309
    8. 'de' → logprob: -7.080962181091309
    9. 'shift' → logprob: -7.955962181091309
    10. 'left' → logprob: -8.205962181091309

Token 435: ' effect' (ID: 3159)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.27676430344581604
    2. 'continue' → logprob: -2.901764392852783
    3. 'for' → logprob: -3.026764392852783
    4. '   ' → logprob: -3.276764392852783
    5. 'do' → logprob: -3.651764392852783
    6. 'def' → logprob: -4.276764392852783
    7. 'cherche' → logprob: -4.276764392852783
    8. 'v' → logprob: -5.401764392852783
    9. 'print' → logprob: -5.526764392852783
    10. ' #' → logprob: -5.776764392852783

Token 436: 'ue' (ID: 466)
  Prédit: 'ue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ue' → logprob: -0.00013786651834379882
    2. 'u' → logprob: -9.125138282775879
    3. 'uer' → logprob: -11.500138282775879
    4. 'uera' → logprob: -12.250138282775879
    5. 'uez' → logprob: -12.500138282775879
    6. '#' → logprob: -13.000138282775879
    7. 'ure' → logprob: -13.250138282775879
    8. 'ues' → logprob: -13.500138282775879
    9. 'ué' → logprob: -14.125138282775879
    10. 'ute' → logprob: -14.125138282775879

Token 437: ' une' (ID: 2463)
  Prédit: 'une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'une' → logprob: -0.37671005725860596
    2. ' une' → logprob: -1.251710057258606
    3. '#' → logprob: -4.376709938049316
    4. 'un' → logprob: -4.751709938049316
    5. 'for' → logprob: -5.626709938049316
    6. ' un' → logprob: -6.876709938049316
    7. 'a' → logprob: -6.876709938049316
    8. ' a' → logprob: -7.876709938049316
    9. ' for' → logprob: -8.126709938049316
    10. 'la' → logprob: -9.001709938049316

Token 438: ' analyse' (ID: 44240)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.042557403445243835
    2. '#' → logprob: -3.41755747795105
    3. ' for' → logprob: -6.292557239532471
    4. 'cycle' → logprob: -6.292557239532471
    5. 'cy' → logprob: -7.042557239532471
    6. 'cycl' → logprob: -7.042557239532471
    7. 'def' → logprob: -7.167557239532471
    8. 'pass' → logprob: -7.917557239532471
    9. 'from' → logprob: -8.042557716369629
    10. '   ' → logprob: -8.167557716369629

Token 439: ' plus' (ID: 2932)
  Prédit: ' cycl'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cycl' → logprob: -0.7013126611709595
    2. 'cycl' → logprob: -1.2013126611709595
    3. ' plus' → logprob: -2.82631254196167
    4. 'plus' → logprob: -2.82631254196167
    5. ' complément' → logprob: -3.57631254196167
    6. ' approfond' → logprob: -4.07631254196167
    7. '   ' → logprob: -4.57631254196167
    8. ' supplémentaire' → logprob: -4.95131254196167
    9. 'compl' → logprob: -5.07631254196167
    10. 'cy' → logprob: -5.57631254196167

Token 440: ' approfond' (ID: 125376)
  Prédit: 'complex'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'complex' → logprob: -0.2906246781349182
    2. 'com' → logprob: -1.6656246185302734
    3. 'fine' → logprob: -4.165624618530273
    4. ' pouss' → logprob: -4.290624618530273
    5. 'appro' → logprob: -4.665624618530273
    6. ' approfond' → logprob: -4.790624618530273
    7. 'compl' → logprob: -4.915624618530273
    8. ' complexe' → logprob: -6.040624618530273
    9. '```' → logprob: -6.040624618530273
    10. 'point' → logprob: -7.290624618530273

Token 441: 'ie' (ID: 396)
  Prédit: 'ie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ie' → logprob: -8.029847231227905e-05
    2. 'e' → logprob: -9.750080108642578
    3. 'die' → logprob: -11.125080108642578
    4. 'cie' → logprob: -13.500080108642578
    5. 'de' → logprob: -13.875080108642578
    6. 'i' → logprob: -14.000080108642578
    7. '   ' → logprob: -14.125080108642578
    8. 'def' → logprob: -14.500080108642578
    9. 'ite' → logprob: -14.875080108642578
    10. 'ide' → logprob: -15.125080108642578

Token 442: ' basée' (ID: 153941)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0006520323222503066
    2. '    
' → logprob: -8.250652313232422
    3. ' for' → logprob: -8.750652313232422
    4. '#' → logprob: -10.125652313232422
    5. '
' → logprob: -10.375652313232422
    6. ':' → logprob: -10.375652313232422
    7. 'for' → logprob: -10.750652313232422
    8. '```' → logprob: -10.875652313232422
    9. 'def' → logprob: -11.125652313232422
    10. '.' → logprob: -11.125652313232422

Token 443: ' sur' (ID: 1512)
  Prédit: ' sur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sur' → logprob: -0.19028715789318085
    2. 'sur' → logprob: -1.9402871131896973
    3. '   ' → logprob: -3.5652871131896973
    4. '#' → logprob: -6.690287113189697
    5. '_sur' → logprob: -11.190287590026855
    6. 'on' → logprob: -11.440287590026855
    7. ' on' → logprob: -11.440287590026855
    8. '  ' → logprob: -11.690287590026855
    9. '       ' → logprob: -11.690287590026855
    10. '    ' → logprob: -12.190287590026855

Token 444: ' les' (ID: 1341)
  Prédit: 'les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'les' → logprob: -1.5015771389007568
    2. 'la' → logprob: -1.7515771389007568
    3. ' une' → logprob: -1.8765771389007568
    4. 'une' → logprob: -1.8765771389007568
    5. ' la' → logprob: -2.126577138900757
    6. ' les' → logprob: -2.876577138900757
    7. 'le' → logprob: -3.251577138900757
    8. 'l' → logprob: -3.626577138900757
    9. 'un' → logprob: -4.501577377319336
    10. ' un' → logprob: -4.751577377319336

Token 445: ' indices' (ID: 30378)
  Prédit: 'indices'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'indices' → logprob: -1.2776401042938232
    2. 'val' → logprob: -1.9026401042938232
    3. 'per' → logprob: -2.4026401042938232
    4. 'diff' → logprob: -3.0276401042938232
    5. 'positions' → logprob: -3.1526401042938232
    6. ' indices' → logprob: -3.4026401042938232
    7. 'cycles' → logprob: -3.4026401042938232
    8. 'élé' → logprob: -3.5276401042938232
    9. 'index' → logprob: -3.6526401042938232
    10. '#' → logprob: -3.7776401042938232

Token 446: ' des' (ID: 731)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03249112516641617
    2. ' indices' → logprob: -4.157491207122803
    3. '#' → logprob: -5.407491207122803
    4. ' de' → logprob: -6.157491207122803
    5. 'indices' → logprob: -6.157491207122803
    6. ' A' → logprob: -6.907491207122803
    7. ' des' → logprob: -7.282491207122803
    8. ' et' → logprob: -7.532491207122803
    9. ' ind' → logprob: -7.657491207122803
    10. ' sorted' → logprob: -7.657491207122803

Token 447: ' éléments' (ID: 57375)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.2800135612487793
    2. 'val' → logprob: -2.1550135612487793
    3. 'A' → logprob: -2.4050135612487793
    4. ' A' → logprob: -5.155013561248779
    5. ' éléments' → logprob: -5.155013561248779
    6. 'minimum' → logprob: -5.155013561248779
    7. 'elements' → logprob: -5.280013561248779
    8. 'indices' → logprob: -5.280013561248779
    9. 'plus' → logprob: -6.530013561248779
    10. 'min' → logprob: -6.780013561248779

Token 448: ' des' (ID: 731)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09073354303836823
    2. ' de' → logprob: -3.590733528137207
    3. ' A' → logprob: -4.340733528137207
    4. 'A' → logprob: -4.465733528137207
    5. ' indices' → logprob: -4.590733528137207
    6. 'indices' → logprob: -4.965733528137207
    7. 'de' → logprob: -5.340733528137207
    8. '#' → logprob: -5.840733528137207
    9. ' des' → logprob: -6.715733528137207
    10. ' et' → logprob: -6.965733528137207

Token 449: ' tableaux' (ID: 176599)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.47168606519699097
    2. ' tableaux' → logprob: -1.8466861248016357
    3. 'table' → logprob: -2.2216861248016357
    4. ' A' → logprob: -2.8466861248016357
    5. 'B' → logprob: -4.221685886383057
    6. ' B' → logprob: -4.596685886383057
    7. 'de' → logprob: -4.596685886383057
    8. ' deux' → logprob: -5.221685886383057
    9. ' table' → logprob: -6.221685886383057
    10. 'élé' → logprob: -6.471685886383057

Token 450: ' tri' (ID: 12665)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2331131547689438
    2. ' A' → logprob: -2.6081130504608154
    3. ' indices' → logprob: -2.8581130504608154
    4. 'A' → logprob: -3.3581130504608154
    5. 'indices' → logprob: -4.6081132888793945
    6. '#' → logprob: -5.2331132888793945
    7. ' sorted' → logprob: -5.2331132888793945
    8. ' index' → logprob: -6.1081132888793945
    9. ' ind' → logprob: -6.4831132888793945
    10. ' positions' → logprob: -6.4831132888793945

Token 451: 'és' (ID: 1756)
  Prédit: 'és'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'és' → logprob: -0.02389565110206604
    2. 'érés' → logprob: -4.898895740509033
    3. 'rés' → logprob: -5.398895740509033
    4. 'A' → logprob: -5.898895740509033
    5. '   ' → logprob: -6.148895740509033
    6. 'or' → logprob: -6.523895740509033
    7. 'es' → logprob: -6.898895740509033
    8. 's' → logprob: -6.898895740509033
    9. 'étés' → logprob: -7.398895740509033
    10. 'lés' → logprob: -7.523895740509033

Token 452: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06159909814596176
    2. ' indices' → logprob: -3.561599016189575
    3. 'indices' → logprob: -4.186599254608154
    4. '    
' → logprob: -5.186599254608154
    5. '
' → logprob: -6.311599254608154
    6. '```' → logprob: -6.436599254608154
    7. ',' → logprob: -6.936599254608154
    8. '#' → logprob: -6.936599254608154
    9. ' ind' → logprob: -7.186599254608154
    10. ' and' → logprob: -7.686599254608154

Token 453: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08041466772556305
    2. ' indices' → logprob: -3.3304147720336914
    3. '
' → logprob: -4.580414772033691
    4. 'indices' → logprob: -4.705414772033691
    5. '    
' → logprob: -5.080414772033691
    6. '#' → logprob: -5.830414772033691
    7. '```' → logprob: -6.580414772033691
    8. ' A' → logprob: -6.830414772033691
    9. 'A' → logprob: -7.205414772033691
    10. ' idx' → logprob: -7.330414772033691

Token 454: ' #' (ID: 1069)
  Prédit: 'idx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'idx' → logprob: -1.7601161003112793
    2. 'pos' → logprob: -1.8851161003112793
    3. 'index' → logprob: -1.8851161003112793
    4. 'A' → logprob: -2.2601161003112793
    5. 'indices' → logprob: -2.5101161003112793
    6. '#' (adapté à ' #') → logprob: -2.7601161003112793
    7. ' idx' → logprob: -3.0101161003112793
    8. ' index' → logprob: -3.1351161003112793
    9. '   ' → logprob: -3.3851161003112793
    10. ' indices' → logprob: -3.7601161003112793

Token 455: ' On' (ID: 2160)
  Prédit: 'index'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'index' → logprob: -0.983628511428833
    2. 'idx' → logprob: -1.983628511428833
    3. 'indices' → logprob: -2.358628511428833
    4. '#' → logprob: -2.483628511428833
    5. 'pos' → logprob: -2.608628511428833
    6. 'from' → logprob: -2.858628511428833
    7. 'A' → logprob: -2.983628511428833
    8. ' index' → logprob: -3.483628511428833
    9. '   ' → logprob: -3.983628511428833
    10. ' idx' → logprob: -4.108628273010254

Token 456: ' crée' (ID: 102256)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.9360988140106201
    2. 'continue' → logprob: -1.6860988140106201
    3. 'cherche' → logprob: -2.68609881401062
    4. 'tr' → logprob: -2.81109881401062
    5. 're' → logprob: -3.31109881401062
    6. '   ' → logprob: -3.68609881401062
    7. 'def' → logprob: -3.81109881401062
    8. 'rev' → logprob: -4.186099052429199
    9. ' continue' → logprob: -4.186099052429199
    10. 'from' → logprob: -4.311099052429199

Token 457: ' une' (ID: 2463)
  Prédit: 'index'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'index' → logprob: -1.8246307373046875
    2. 'un' → logprob: -1.9496307373046875
    3. ' deux' → logprob: -2.1996307373046875
    4. 'idx' → logprob: -2.4496307373046875
    5. 'a' → logprob: -2.8246307373046875
    6. 'indices' → logprob: -2.9496307373046875
    7. 'une' → logprob: -3.0746307373046875
    8. 'de' → logprob: -3.1996307373046875
    9. 'pos' → logprob: -3.4496307373046875
    10. '#' → logprob: -3.4496307373046875

Token 458: ' liste' (ID: 31719)
  Prédit: 'pos'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pos' → logprob: -0.9471302628517151
    2. 'mapping' → logprob: -1.8221302032470703
    3. 'from' → logprob: -2.4471302032470703
    4. 'position' → logprob: -2.5721302032470703
    5. 'index' → logprob: -2.8221302032470703
    6. 'dict' → logprob: -3.1971302032470703
    7. 'liste' → logprob: -3.5721302032470703
    8. 'visited' → logprob: -4.19713020324707
    9. 'list' → logprob: -4.19713020324707
    10. 'counter' → logprob: -4.32213020324707

Token 459: ' B' (ID: 418)
  Prédit: ' des'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' des' → logprob: -1.4496031999588013
    2. ' idx' → logprob: -1.6996031999588013
    3. ' d' → logprob: -2.1996030807495117
    4. ' index' → logprob: -2.8246030807495117
    5. 'indices' → logprob: -2.8246030807495117
    6. 'd' → logprob: -3.0746030807495117
    7. ' indices' → logprob: -3.1996030807495117
    8. 'idx' → logprob: -3.1996030807495117
    9. 'index' → logprob: -3.3246030807495117
    10. 'pos' → logprob: -3.3246030807495117

Token 460: '3' (ID: 18)
  Prédit: '_indices'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_indices' → logprob: -0.2342316061258316
    2. 'pos' → logprob: -3.48423171043396
    3. 'indices' → logprob: -3.48423171043396
    4. '_index' → logprob: -3.73423171043396
    5. 'index' → logprob: -3.73423171043396
    6. '_idx' → logprob: -3.85923171043396
    7. '_positions' → logprob: -3.85923171043396
    8. 'idx' → logprob: -4.234231472015381
    9. '_pos' → logprob: -4.234231472015381
    10. '_indexes' → logprob: -4.859231472015381

Token 461: ' où' (ID: 15113)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.19776935875415802
    2. '_indices' → logprob: -1.8227694034576416
    3. '=' → logprob: -4.8227691650390625
    4. '_positions' → logprob: -5.6977691650390625
    5. 'indices' → logprob: -6.5727691650390625
    6. '_idx' → logprob: -6.8227691650390625
    7. '_index' → logprob: -6.8227691650390625
    8. '_indexes' → logprob: -6.9477691650390625
    9. '_pos' → logprob: -7.0727691650390625
    10. '=[]' → logprob: -8.572769165039062

Token 462: ' on' (ID: 402)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.10045628249645233
    2. ' B' → logprob: -3.3504562377929688
    3. 'j' → logprob: -4.350456237792969
    4. 'indices' → logprob: -4.475456237792969
    5. 'for' → logprob: -5.100456237792969
    6. 'i' → logprob: -5.350456237792969
    7. 'idx' → logprob: -5.475456237792969
    8. ' for' → logprob: -5.600456237792969
    9. 'index' → logprob: -5.725456237792969
    10. 'b' → logprob: -5.975456237792969

Token 463: ' gén' (ID: 15330)
  Prédit: 'append'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'append' → logprob: -0.15611900389194489
    2. 'range' → logprob: -3.5311191082000732
    3. 'combine' → logprob: -3.7811191082000732
    4. 'for' → logprob: -3.9061191082000732
    5. 'copy' → logprob: -4.031118869781494
    6. 'enumer' → logprob: -4.406118869781494
    7. 'len' → logprob: -4.906118869781494
    8. ' append' → logprob: -5.906118869781494
    9. '=' → logprob: -5.906118869781494
    10. 'indexes' → logprob: -6.031118869781494

Token 464: 'ère' (ID: 4346)
  Prédit: 'ère'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ère' → logprob: -0.13799430429935455
    2. 'ere' → logprob: -2.2629942893981934
    3. 'er' → logprob: -3.8879942893981934
    4. 'érer' → logprob: -6.637994289398193
    5. 'e' → logprob: -7.762994289398193
    6. 'è' → logprob: -7.887994289398193
    7. '   ' → logprob: -8.012994766235352
    8. 'éré' → logprob: -8.387994766235352
    9. '#' → logprob: -8.512994766235352
    10. '```' → logprob: -8.637994766235352

Token 465: ' des' (ID: 731)
  Prédit: ' une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -1.2710795402526855
    2. ' des' → logprob: -1.5210795402526855
    3. 'B' → logprob: -1.8960795402526855
    4. ' un' → logprob: -2.1460795402526855
    5. ' les' → logprob: -2.8960795402526855
    6. 'a' → logprob: -3.5210795402526855
    7. 'un' → logprob: -3.8960795402526855
    8. '[]' → logprob: -3.8960795402526855
    9. ' B' → logprob: -3.8960795402526855
    10. 'une' → logprob: -4.1460795402526855

Token 466: ' couples' (ID: 29972)
  Prédit: 'indices'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'indices' → logprob: -0.28856050968170166
    2. ' indices' → logprob: -1.7885605096817017
    3. ' tuples' → logprob: -3.288560390472412
    4. 'pairs' → logprob: -4.913560390472412
    5. 'tu' → logprob: -5.038560390472412
    6. ' pairs' → logprob: -5.163560390472412
    7. 'indexes' → logprob: -5.413560390472412
    8. ' p' → logprob: -5.663560390472412
    9. 'index' → logprob: -5.913560390472412
    10. 'p' → logprob: -5.913560390472412

Token 467: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.7023869752883911
    2. '[(' → logprob: -1.7023869752883911
    3. '(B' → logprob: -2.7023868560791016
    4. 'de' → logprob: -2.9523868560791016
    5. ' =' → logprob: -3.3273868560791016
    6. ' de' → logprob: -3.5773868560791016
    7. 'd' → logprob: -3.7023868560791016
    8. '(' → logprob: -3.9523868560791016
    9. ' of' → logprob: -4.452386856079102
    10. '(sorted' → logprob: -4.452386856079102

Token 468: 'indice' (ID: 176697)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.09157071262598038
    2. '(B' → logprob: -2.7165706157684326
    3. 'value' → logprob: -5.216570854187012
    4. 'A' → logprob: -5.341570854187012
    5. 'val' → logprob: -6.216570854187012
    6. '(A' → logprob: -6.341570854187012
    7. 'b' → logprob: -6.341570854187012
    8. ' (' → logprob: -6.966570854187012
    9. '(value' → logprob: -7.341570854187012
    10. '(i' → logprob: -7.466570854187012

Token 469: ' initial' (ID: 4871)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0051232269033789635
    2. 'B' → logprob: -5.880123138427734
    3. 'i' → logprob: -7.005123138427734
    4. ',i' → logprob: -8.005123138427734
    5. ' ,' → logprob: -8.380123138427734
    6. 'b' → logprob: -8.755123138427734
    7. '[i' → logprob: -9.755123138427734
    8. '   ' → logprob: -9.755123138427734
    9. ',B' → logprob: -9.755123138427734
    10. '(i' → logprob: -9.880123138427734

Token 470: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0077186631970107555
    2. '_original' → logprob: -6.382718563079834
    3. 'B' → logprob: -6.507718563079834
    4. '_orig' → logprob: -6.757718563079834
    5. '_b' → logprob: -7.382718563079834
    6. 'A' → logprob: -7.757718563079834
    7. ' ,' → logprob: -8.007719039916992
    8. 'e' → logprob: -8.132719039916992
    9. '_,' → logprob: -8.257719039916992
    10. 'de' → logprob: -8.382719039916992

Token 471: ' valeur' (ID: 41664)
  Prédit: ' valeur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' valeur' → logprob: -0.54200679063797
    2. 'val' → logprob: -0.91700679063797
    3. 'élé' → logprob: -4.917006969451904
    4. 'value' → logprob: -5.292006969451904
    5. ' val' → logprob: -6.167006969451904
    6. ' élément' → logprob: -6.417006969451904
    7. ' value' → logprob: -6.542006969451904
    8. 'B' → logprob: -8.542006492614746
    9. ' B' → logprob: -8.542006492614746
    10. 'b' → logprob: -8.792006492614746

Token 472: ' de' (ID: 334)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.12577570974826813
    2. ',' → logprob: -2.2507758140563965
    3. 'B' → logprob: -5.1257758140563965
    4. '_original' → logprob: -6.1257758140563965
    5. 'de' → logprob: -6.5007758140563965
    6. 'original' → logprob: -7.5007758140563965
    7. '),' → logprob: -7.7507758140563965
    8. ' de' → logprob: -8.250775337219238
    9. '_b' → logprob: -8.500775337219238
    10. 'b' → logprob: -8.750775337219238

Token 473: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.022158091887831688
    2. ' B' → logprob: -3.897158145904541
    3. 'élé' → logprob: -7.647158145904541
    4. 'l' → logprob: -8.022157669067383
    5. ')' → logprob: -8.397157669067383
    6. 'b' → logprob: -8.647157669067383
    7. 'element' → logprob: -8.897157669067383
    8. 'A' → logprob: -9.397157669067383
    9. ' la' → logprob: -10.772157669067383
    10. ',' → logprob: -10.772157669067383

Token 474: ' tri' (ID: 12665)
  Prédit: '[i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.8863303661346436
    2. '3' → logprob: -1.1363303661346436
    3. ',' → logprob: -2.0113303661346436
    4. ')' → logprob: -2.5113303661346436
    5. '2' → logprob: -3.7613303661346436
    6. '),' → logprob: -4.136330604553223
    7. 'B' → logprob: -5.261330604553223
    8. '   ' → logprob: -5.511330604553223
    9. 'i' → logprob: -7.386330604553223
    10. '[' → logprob: -7.761330604553223

Token 475: 'é' (ID: 377)
  Prédit: 'ée'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ée' → logprob: -0.008925950154662132
    2. 'é' → logprob: -5.633925914764404
    3. '2' → logprob: -6.508925914764404
    4. 'ed' → logprob: -6.508925914764404
    5. '[' → logprob: -7.133925914764404
    6. ')' → logprob: -7.758925914764404
    7. ']' → logprob: -8.258926391601562
    8. 'e' → logprob: -8.633926391601562
    9. '[i' → logprob: -9.383926391601562
    10. '),' → logprob: -9.508926391601562

Token 476: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.005753510631620884
    2. '),' → logprob: -5.880753517150879
    3. ',' → logprob: -6.255753517150879
    4. '))' → logprob: -8.380753517150879
    5. '[i' → logprob: -9.005753517150879
    6. '[])' → logprob: -9.130753517150879
    7. '   ' → logprob: -9.380753517150879
    8. 'B' → logprob: -9.380753517150879
    9. '[]' → logprob: -10.130753517150879
    10. '[' → logprob: -10.255753517150879

Token 477: ' indice' (ID: 90848)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -1.4786550998687744
    2. 'indice' → logprob: -1.6036550998687744
    3. 'index' → logprob: -1.9786550998687744
    4. ' i' → logprob: -1.9786550998687744
    5. 'A' → logprob: -2.7286550998687744
    6. ' A' → logprob: -2.8536550998687744
    7. ' index' → logprob: -2.9786550998687744
    8. ')' → logprob: -2.9786550998687744
    9. ' indice' → logprob: -4.478654861450195
    10. ' idx' → logprob: -4.728654861450195

Token 478: ' tri' (ID: 12665)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5825939774513245
    2. 'original' → logprob: -2.0825939178466797
    3. '<|end|>' → logprob: -2.4575939178466797
    4. '_original' → logprob: -2.8325939178466797
    5. ' original' → logprob: -2.8325939178466797
    6. 'initial' → logprob: -3.5825939178466797
    7. 'origine' → logprob: -4.08259391784668
    8. ' initial' → logprob: -4.70759391784668
    9. '_initial' → logprob: -4.70759391784668
    10. '_orig' → logprob: -4.83259391784668

Token 479: 'é' (ID: 377)
  Prédit: 'ed'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ed' → logprob: -0.35275205969810486
    2. 'é' → logprob: -1.4777520895004272
    3. '   ' → logprob: -3.7277519702911377
    4. 'd' → logprob: -4.602752208709717
    5. 'sorted' → logprob: -4.727752208709717
    6. 'ée' → logprob: -4.852752208709717
    7. 'éd' → logprob: -6.227752208709717
    8. '       ' → logprob: -6.227752208709717
    9. 'e' → logprob: -6.352752208709717
    10. '    ' → logprob: -6.477752208709717

Token 480: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0004172065819147974
    2. ')
' → logprob: -8.50041675567627
    3. ',' → logprob: -9.25041675567627
    4. ' )' → logprob: -10.37541675567627
    5. '),' → logprob: -10.87541675567627
    6. '   ' → logprob: -11.75041675567627
    7. '))' → logprob: -11.87541675567627
    8. ')`' → logprob: -12.12541675567627
    9. '_)' → logprob: -12.37541675567627
    10. '):' → logprob: -12.37541675567627

Token 481: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.30408406257629395
    2. 'B' → logprob: -1.429084062576294
    3. ' =' → logprob: -4.304083824157715
    4. '=' → logprob: -5.679083824157715
    5. ',' → logprob: -6.554083824157715
    6. ' B' → logprob: -6.554083824157715
    7. ')' → logprob: -6.679083824157715
    8. '
' → logprob: -7.679083824157715
    9. ':' → logprob: -8.054083824157715
    10. '    
' → logprob: -8.804083824157715

Token 482: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' (adapté à ' B') → logprob: -0.07893022149801254
    2. '   ' → logprob: -3.078930139541626
    3. ' B' → logprob: -3.578930139541626
    4. '```' → logprob: -6.828930377960205
    5. ',' → logprob: -8.578929901123047
    6. ']' → logprob: -8.953929901123047
    7. ')' → logprob: -9.328929901123047
    8. '    
' → logprob: -9.453929901123047
    9. '
' → logprob: -9.703929901123047
    10. '[' → logprob: -10.078929901123047

Token 483: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -1.735893965815194e-05
    2. '_' → logprob: -11.375017166137695
    3. ' =' → logprob: -12.250017166137695
    4. '=' → logprob: -15.000017166137695
    5. '_indices' → logprob: -15.625017166137695
    6. '```' → logprob: -16.250017166137695
    7. '_=' → logprob: -16.500017166137695
    8. '۳' → logprob: -16.625017166137695
    9. ' ' → logprob: -16.750017166137695
    10. '_sorted' → logprob: -16.750017166137695

Token 484: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.10020774602890015
    2. ' =' → logprob: -2.350207805633545
    3. '=[]' → logprob: -13.975207328796387
    4. '=[' → logprob: -16.100208282470703
    5. '＝' → logprob: -16.850208282470703
    6. ')' → logprob: -17.725208282470703
    7. ',' → logprob: -18.475208282470703
    8. '[' → logprob: -18.725208282470703
    9. '=

' → logprob: -18.975208282470703
    10. 's' → logprob: -19.225208282470703

Token 485: ' sorted' (ID: 20099)
  Prédit: '[('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[(' → logprob: -0.015040476806461811
    2. 'list' → logprob: -5.015040397644043
    3. 'sorted' → logprob: -5.015040397644043
    4. ' [(' → logprob: -7.015040397644043
    5. '[]' → logprob: -7.640040397644043
    6. '[list' → logprob: -8.640040397644043
    7. '[' → logprob: -10.265040397644043
    8. ' list' → logprob: -10.390040397644043
    9. ' sorted' → logprob: -10.765040397644043
    10. '[((' → logprob: -11.890040397644043

Token 486: '(
' (ID: 1607)
  Prédit: '([('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '([(' → logprob: -0.16130991280078888
    2. '(en' → logprob: -2.1613099575042725
    3. '(' → logprob: -4.286309719085693
    4. '(((' → logprob: -4.411309719085693
    5. '((' → logprob: -5.036309719085693
    6. '(zip' → logprob: -7.286309719085693
    7. '(range' → logprob: -7.411309719085693
    8. '(
' → logprob: -10.161310195922852
    9. '(list' → logprob: -10.286310195922852
    10. '([' → logprob: -10.911310195922852

Token 487: '       ' (ID: 309)
  Prédit: '(('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '((' → logprob: -1.0122267007827759
    2. '(en' → logprob: -1.2622267007827759
    3. '[(' → logprob: -1.7622267007827759
    4. '([(' → logprob: -2.0122265815734863
    5. 'enumer' → logprob: -3.1372265815734863
    6. '(' → logprob: -5.637226581573486
    7. '(((' → logprob: -7.137226581573486
    8. '(
' → logprob: -8.637227058410645
    9. '[((' → logprob: -9.137227058410645
    10. '(zip' → logprob: -9.637227058410645

Token 488: ' map' (ID: 4014)
  Prédit: '[('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[(' → logprob: -0.05112089216709137
    2. 'enumer' → logprob: -3.0511209964752197
    3. '(en' → logprob: -6.176120758056641
    4. '((' → logprob: -8.05112075805664
    5. ' [(' → logprob: -9.42612075805664
    6. '[((' → logprob: -11.17612075805664
    7. ' enumerate' → logprob: -11.30112075805664
    8. '   ' → logprob: -11.67612075805664
    9. '([(' → logprob: -12.05112075805664
    10. '[' → logprob: -12.42612075805664

Token 489: '(
' (ID: 1607)
  Prédit: '(lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.003815630218014121
    2. '(' → logprob: -5.628815650939941
    3. '(
' → logprob: -9.003815650939941
    4. 'lambda' → logprob: -9.378815650939941
    5. '   ' → logprob: -12.628815650939941
    6. '(int' → logprob: -14.003815650939941
    7. '(None' → logprob: -14.128815650939941
    8. '```' → logprob: -14.503815650939941
    9. '(

' → logprob: -14.503815650939941
    10. '(range' → logprob: -15.253815650939941

Token 490: '           ' (ID: 352)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lambda' → logprob: -0.01058872789144516
    2. '   ' → logprob: -4.760588645935059
    3. '(lambda' → logprob: -6.260588645935059
    4. ' lambda' → logprob: -10.010588645935059
    5. '       ' → logprob: -11.260588645935059
    6. '=lambda' → logprob: -13.510588645935059
    7. '           ' → logprob: -13.635588645935059
    8. '
' → logprob: -14.760588645935059
    9. ')' → logprob: -15.135588645935059
    10. '  ' → logprob: -15.385588645935059

Token 491: ' lambda' (ID: 27871)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lambda' (adapté à ' lambda') → logprob: -0.0014295210130512714
    2. '   ' → logprob: -7.126429557800293
    3. '(lambda' → logprob: -7.876429557800293
    4. ' lambda' → logprob: -8.876429557800293
    5. '           ' → logprob: -9.376429557800293
    6. '       ' → logprob: -11.001429557800293
    7. '               ' → logprob: -13.376429557800293
    8. '=lambda' → logprob: -13.376429557800293
    9. 'enumer' → logprob: -15.251429557800293
    10. 'lam' → logprob: -15.501429557800293

Token 492: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.17857913672924042
    2. 'lambda' → logprob: -1.9285790920257568
    3. 'i' → logprob: -4.928579330444336
    4. ' x' → logprob: -5.428579330444336
    5. ' lambda' → logprob: -5.553579330444336
    6. 'idx' → logprob: -6.928579330444336
    7. 'e' → logprob: -7.678579330444336
    8. '   ' → logprob: -7.803579330444336
    9. '(lambda' → logprob: -7.803579330444336
    10. 'xi' → logprob: -9.178579330444336

Token 493: ':' (ID: 25)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lambda' → logprob: -0.13431426882743835
    2. '(lambda' → logprob: -2.5093142986297607
    3. ' lambda' → logprob: -3.1343142986297607
    4. ',' → logprob: -8.13431453704834
    5. '   ' → logprob: -8.13431453704834
    6. '=lambda' → logprob: -8.63431453704834
    7. 'enumer' → logprob: -10.88431453704834
    8. ':' → logprob: -11.38431453704834
    9. 'range' → logprob: -11.38431453704834
    10. 'index' → logprob: -11.88431453704834

Token 494: ' (' (ID: 350)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.06636232882738113
    2. '(lambda' → logprob: -3.1913623809814453
    3. '(' → logprob: -3.9413623809814453
    4. 'x' → logprob: -6.441362380981445
    5. ' (' → logprob: -6.816362380981445
    6. '(i' → logprob: -8.441362380981445
    7. '(None' → logprob: -8.441362380981445
    8. '(int' → logprob: -8.691362380981445
    9. '(
' → logprob: -9.066362380981445
    10. 'lambda' → logprob: -9.441362380981445

Token 495: 'x' (ID: 87)
  Prédit: 'x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.03438093885779381
    2. 'B' → logprob: -4.034380912780762
    3. '(x' → logprob: -4.284380912780762
    4. '(B' → logprob: -6.659380912780762
    5. 'A' → logprob: -8.159380912780762
    6. '(' → logprob: -8.159380912780762
    7. ' (' → logprob: -8.659380912780762
    8. ' x' → logprob: -8.784380912780762
    9. '(A' → logprob: -9.909380912780762
    10. '(
' → logprob: -11.034380912780762

Token 496: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.6187751293182373
    2. 'x' → logprob: -1.2437751293182373
    3. '(x' → logprob: -2.4937751293182373
    4. '(' → logprob: -2.9937751293182373
    5. ' (' → logprob: -3.8687751293182373
    6. ',' → logprob: -4.993775367736816
    7. ')' → logprob: -5.493775367736816
    8. ' x' → logprob: -6.243775367736816
    9. '),' → logprob: -6.368775367736816
    10. '0' → logprob: -6.993775367736816

Token 497: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0010469816625118256
    2. '1' → logprob: -6.876047134399414
    3. ' ' → logprob: -11.876047134399414
    4. 'x' → logprob: -12.626047134399414
    5. '
' → logprob: -13.126047134399414
    6. '2' → logprob: -14.501047134399414
    7. '   ' → logprob: -15.313547134399414
    8. '(' → logprob: -15.626047134399414
    9. 'B' → logprob: -15.626047134399414
    10. 'i' → logprob: -15.813547134399414

Token 498: '][' (ID: 2696)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.001419995678588748
    2. ',' → logprob: -7.251420021057129
    3. '][' → logprob: -7.376420021057129
    4. ')[' → logprob: -10.626420021057129
    5. '0' → logprob: -10.876420021057129
    6. '),' → logprob: -11.626420021057129
    7. ',[' → logprob: -12.251420021057129
    8. 'x' → logprob: -12.876420021057129
    9. '],' → logprob: -12.876420021057129
    10. ')' → logprob: -12.876420021057129

Token 499: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.01106998510658741
    2. '1' → logprob: -4.5110697746276855
    3. ' ' → logprob: -11.511070251464844
    4. '
' → logprob: -12.136070251464844
    5. 'x' → logprob: -12.886070251464844
    6. '   ' → logprob: -13.886070251464844
    7. '[' → logprob: -14.573570251464844
    8. '```' → logprob: -15.073570251464844
    9. ':' → logprob: -15.261070251464844
    10. '

' → logprob: -15.323570251464844

Token 500: '],' (ID: 2155)
  Prédit: '],'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '],' → logprob: -0.024039272218942642
    2. '[' → logprob: -4.399039268493652
    3. '][' → logprob: -4.524039268493652
    4. '],[' → logprob: -8.524039268493652
    5. ',' → logprob: -8.899039268493652
    6. ']' → logprob: -9.274039268493652
    7. 'x' → logprob: -9.649039268493652
    8. '],'' → logprob: -10.399039268493652
    9. '],
' → logprob: -10.524039268493652
    10. ',x' → logprob: -11.274039268493652

Token 501: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.006921153981238604
    2. '(x' → logprob: -5.381921291351318
    3. ' x' → logprob: -6.506921291351318
    4. 'B' → logprob: -7.881921291351318
    5. ' (' → logprob: -8.63192081451416
    6. '(' → logprob: -9.25692081451416
    7. 'A' → logprob: -9.25692081451416
    8. '(B' → logprob: -11.13192081451416
    9. ')' → logprob: -11.50692081451416
    10. '(A' → logprob: -11.50692081451416

Token 502: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0017322985222563148
    2. ',' → logprob: -7.626732349395752
    3. '0' → logprob: -8.126731872558594
    4. ')[' → logprob: -8.126731872558594
    5. '),' → logprob: -8.376731872558594
    6. '))' → logprob: -8.751731872558594
    7. ')' → logprob: -8.751731872558594
    8. 'x' → logprob: -11.001731872558594
    9. '][' → logprob: -11.876731872558594
    10. ' ' → logprob: -12.001731872558594

Token 503: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0002457238151691854
    2. '1' → logprob: -8.375246047973633
    3. '2' → logprob: -11.625246047973633
    4. '
' → logprob: -12.625246047973633
    5. ' ' → logprob: -14.437746047973633
    6. '[' → logprob: -14.437746047973633
    7. '   ' → logprob: -15.062746047973633
    8. '```' → logprob: -15.187746047973633
    9. 'x' → logprob: -15.750246047973633
    10. ']' → logprob: -15.750246047973633

Token 504: ']),
' (ID: 34147)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00041613372741267085
    2. '),' → logprob: -8.375415802001953
    3. ',x' → logprob: -9.250415802001953
    4. ' ,' → logprob: -10.000415802001953
    5. ')' → logprob: -10.875415802001953
    6. '[' → logprob: -11.625415802001953
    7. '],' → logprob: -12.250415802001953
    8. 'x' → logprob: -13.125415802001953
    9. ',B' → logprob: -13.625415802001953
    10. ',),' → logprob: -14.125415802001953

Token 505: '           ' (ID: 352)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.5598377585411072
    2. '(B' → logprob: -1.809837818145752
    3. 'B' → logprob: -2.559837818145752
    4. ' B' → logprob: -2.684837818145752
    5. '(A' → logprob: -3.184837818145752
    6. '(' → logprob: -3.934837818145752
    7. 'enumer' → logprob: -4.559837818145752
    8. ' lambda' → logprob: -4.934837818145752
    9. 'lambda' → logprob: -5.184837818145752
    10. '(x' → logprob: -5.309837818145752

Token 506: ' enumerate' (ID: 29671)
  Prédit: 'enumer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'enumer' → logprob: -0.0028136710170656443
    2. ' enumerate' → logprob: -5.877813816070557
    3. 'list' → logprob: -12.252813339233398
    4. 'zip' → logprob: -13.502813339233398
    5. '(en' → logprob: -13.627813339233398
    6. '   ' → logprob: -14.627813339233398
    7. 'filter' → logprob: -15.002813339233398
    8. 'en' → logprob: -15.377813339233398
    9. 'sorted' → logprob: -16.3778133392334
    10. 'enum' → logprob: -16.5028133392334

Token 507: '(
' (ID: 1607)
  Prédit: '(B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(B' → logprob: -0.010271142236888409
    2. '(zip' → logprob: -5.135271072387695
    3. '(A' → logprob: -5.760271072387695
    4. 'B' → logprob: -7.135271072387695
    5. 'zip' → logprob: -9.010271072387695
    6. '((' → logprob: -9.885271072387695
    7. '(b' → logprob: -10.260271072387695
    8. '(' → logprob: -10.385271072387695
    9. '(sorted' → logprob: -10.385271072387695
    10. ')' → logprob: -10.635271072387695

Token 508: '               ' (ID: 506)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.47068604826927185
    2. 'zip' → logprob: -1.3456860780715942
    3. 'A' → logprob: -3.3456859588623047
    4. '(zip' → logprob: -3.5956859588623047
    5. '(B' → logprob: -4.095685958862305
    6. 'enumer' → logprob: -4.220685958862305
    7. 'sorted' → logprob: -5.345685958862305
    8. '   ' → logprob: -5.470685958862305
    9. '(A' → logprob: -5.970685958862305
    10. '((' → logprob: -6.470685958862305

Token 509: ' sorted' (ID: 20099)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.6491236090660095
    2. 'zip' → logprob: -0.8991236090660095
    3. 'enumer' → logprob: -3.5241236686706543
    4. 'A' → logprob: -4.274123668670654
    5. 'sorted' (adapté à ' sorted') → logprob: -4.274123668670654
    6. '[(' → logprob: -4.899123668670654
    7. ' B' → logprob: -6.399123668670654
    8. 'list' → logprob: -7.024123668670654
    9. '((' → logprob: -7.024123668670654
    10. ' zip' → logprob: -7.149123668670654

Token 510: '(
' (ID: 1607)
  Prédit: '(B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(B' → logprob: -0.08672479540109634
    2. 'B' → logprob: -3.8367247581481934
    3. '(zip' → logprob: -3.9617247581481934
    4. '((' → logprob: -4.461724758148193
    5. '([(' → logprob: -4.461724758148193
    6. '(A' → logprob: -4.586724758148193
    7. '(((' → logprob: -6.336724758148193
    8. '(en' → logprob: -6.461724758148193
    9. '(
' → logprob: -6.461724758148193
    10. 'zip' → logprob: -6.586724758148193

Token 511: '                   ' (ID: 699)
  Prédit: '(B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(B' → logprob: -0.29398155212402344
    2. 'B' → logprob: -2.0439815521240234
    3. '(zip' → logprob: -3.1689815521240234
    4. '([(' → logprob: -3.7939815521240234
    5. '((' → logprob: -4.168981552124023
    6. '(
' → logprob: -4.543981552124023
    7. '(en' → logprob: -4.793981552124023
    8. '(A' → logprob: -5.168981552124023
    9. '(((' → logprob: -5.418981552124023
    10. 'zip' → logprob: -5.418981552124023

Token 512: ' map' (ID: 4014)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.09337480366230011
    2. '[(' → logprob: -3.343374729156494
    3. 'zip' → logprob: -3.343374729156494
    4. 'enumer' → logprob: -4.468374729156494
    5. '((' → logprob: -5.968374729156494
    6. 'A' → logprob: -6.468374729156494
    7. 'list' → logprob: -7.468374729156494
    8. '(B' → logprob: -7.843374729156494
    9. '   ' → logprob: -8.093375205993652
    10. ' B' → logprob: -8.093375205993652

Token 513: '(lambda' (ID: 43341)
  Prédit: '(lambda'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.01335538737475872
    2. 'lambda' → logprob: -4.513355255126953
    3. '   ' → logprob: -7.263355255126953
    4. '(' → logprob: -7.388355255126953
    5. '                   ' → logprob: -7.763355255126953
    6. '(
' → logprob: -8.138355255126953
    7. '               ' → logprob: -9.388355255126953
    8. '           ' → logprob: -9.638355255126953
    9. '                       ' → logprob: -10.263355255126953
    10. ')' → logprob: -10.388355255126953

Token 514: ' x' (ID: 1215)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'lambda' → logprob: -0.07949761301279068
    2. ' lambda' → logprob: -2.8294975757598877
    3. '(lambda' → logprob: -4.079497814178467
    4. 'x' → logprob: -8.204497337341309
    5. 'index' → logprob: -9.954497337341309
    6. '   ' → logprob: -9.954497337341309
    7. '=lambda' → logprob: -10.829497337341309
    8. '(' → logprob: -10.954497337341309
    9. 'idx' → logprob: -11.704497337341309
    10. ' (' → logprob: -11.954497337341309

Token 515: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.6737816333770752
    2. '(lambda' → logprob: -1.2987816333770752
    3. '(' → logprob: -2.923781633377075
    4. 'lambda' → logprob: -3.048781633377075
    5. ' (' → logprob: -3.298781633377075
    6. '(x' → logprob: -3.298781633377075
    7. ' x' → logprob: -4.173781394958496
    8. 'x' → logprob: -4.298781394958496
    9. ' lambda' → logprob: -4.548781394958496
    10. '   ' → logprob: -7.048781394958496

Token 516: ' (' (ID: 350)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.022858601063489914
    2. '(lambda' → logprob: -4.022858619689941
    3. ' (' → logprob: -5.647858619689941
    4. '(' → logprob: -7.272858619689941
    5. '(int' → logprob: -8.147858619689941
    6. 'lambda' → logprob: -10.022858619689941
    7. 'x' → logprob: -10.522858619689941
    8. '(A' → logprob: -10.522858619689941
    9. '(len' → logprob: -11.147858619689941
    10. '(value' → logprob: -11.522858619689941

Token 517: 'x' (ID: 87)
  Prédit: 'x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.002806656062602997
    2. 'B' → logprob: -6.127806663513184
    3. 'A' → logprob: -7.627806663513184
    4. '(x' → logprob: -9.502806663513184
    5. ' x' → logprob: -11.002806663513184
    6. '0' → logprob: -11.502806663513184
    7. 'lambda' → logprob: -11.752806663513184
    8. 'int' → logprob: -11.877806663513184
    9. '(' → logprob: -12.627806663513184
    10. '(B' → logprob: -13.127806663513184

Token 518: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -5.5577775128767826e-06
    2. '(' → logprob: -13.000005722045898
    3. ',' → logprob: -13.125005722045898
    4. ' [' → logprob: -15.500005722045898
    5. '()[' → logprob: -15.875005722045898
    6. '
' → logprob: -15.875005722045898
    7. ':' → logprob: -16.2500057220459
    8. '[[' → logprob: -16.3750057220459
    9. 'x' → logprob: -16.6250057220459
    10. ' (' → logprob: -16.8125057220459

Token 519: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.12704864144325256
    2. '1' → logprob: -2.1270487308502197
    3. '[' → logprob: -9.12704849243164
    4. '2' → logprob: -12.75204849243164
    5. '
' → logprob: -12.75204849243164
    6. ' ' → logprob: -13.37704849243164
    7. 'B' → logprob: -14.25204849243164
    8. '(' → logprob: -14.50204849243164
    9. ':' → logprob: -14.56454849243164
    10. ',' → logprob: -14.68954849243164

Token 520: '],' (ID: 2155)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.01721544936299324
    2. '][' → logprob: -4.392215251922607
    3. ',' → logprob: -5.892215251922607
    4. '],' → logprob: -6.267215251922607
    5. '),' → logprob: -11.892215728759766
    6. ']' → logprob: -12.267215728759766
    7. '   ' → logprob: -12.517215728759766
    8. ' ,' → logprob: -12.642215728759766
    9. ']),' → logprob: -12.767215728759766
    10. ')[' → logprob: -13.017215728759766

Token 521: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.04568255692720413
    2. ' x' → logprob: -3.170682668685913
    3. '0' → logprob: -6.920682430267334
    4. ')' → logprob: -7.670682430267334
    5. 'lambda' → logprob: -7.795682430267334
    6. 'A' → logprob: -8.295682907104492
    7. ')x' → logprob: -8.670682907104492
    8. ' lambda' → logprob: -9.545682907104492
    9. '),' → logprob: -9.795682907104492
    10. '<|end|>' → logprob: -10.295682907104492

Token 522: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -3.3451433409936726e-05
    2. '0' → logprob: -11.375033378601074
    3. '),' → logprob: -11.625033378601074
    4. ',' → logprob: -12.125033378601074
    5. ')' → logprob: -13.000033378601074
    6. '(' → logprob: -14.375033378601074
    7. 'x' → logprob: -14.375033378601074
    8. ')[' → logprob: -14.500033378601074
    9. '()[' → logprob: -14.625033378601074
    10. '2' → logprob: -14.875033378601074

Token 523: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00178918254096061
    2. '1' → logprob: -6.501789093017578
    3. '[' → logprob: -8.251789093017578
    4. '2' → logprob: -11.376789093017578
    5. 'x' → logprob: -12.001789093017578
    6. ' ' → logprob: -12.501789093017578
    7. '   ' → logprob: -14.939289093017578
    8. 'index' → logprob: -14.939289093017578
    9. 'enumer' → logprob: -15.064289093017578
    10. '
' → logprob: -15.189289093017578

Token 524: ']),' (ID: 19560)
  Prédit: '),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '),' → logprob: -0.006398446392267942
    2. ')),' → logprob: -5.131398677825928
    3. ')' → logprob: -8.50639820098877
    4. ' ),' → logprob: -8.75639820098877
    5. '   ' → logprob: -10.25639820098877
    6. '))' → logprob: -11.25639820098877
    7. '[' → logprob: -11.63139820098877
    8. '       ' → logprob: -11.75639820098877
    9. '))),' → logprob: -11.75639820098877
    10. '),'' → logprob: -12.25639820098877

Token 525: ' enumerate' (ID: 29671)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.7590952515602112
    2. 'zip' → logprob: -1.2590951919555664
    3. 'enumer' → logprob: -1.6340951919555664
    4. 'A' → logprob: -4.259095191955566
    5. ' enumerate' → logprob: -4.634095191955566
    6. '   ' → logprob: -4.634095191955566
    7. ' B' → logprob: -5.009095191955566
    8. ' zip' → logprob: -5.134095191955566
    9. 'list' → logprob: -5.384095191955566
    10. '(zip' → logprob: -7.259095191955566

Token 526: '(B' (ID: 8409)
  Prédit: '(B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(B' → logprob: -0.14039191603660583
    2. '(A' → logprob: -2.2653918266296387
    3. 'B' → logprob: -3.7653918266296387
    4. 'A' → logprob: -5.640391826629639
    5. ')' → logprob: -8.890392303466797
    6. ' B' → logprob: -8.890392303466797
    7. '   ' → logprob: -10.015392303466797
    8. ' A' → logprob: -10.515392303466797
    9. ')(' → logprob: -10.515392303466797
    10. '(' → logprob: -11.265392303466797

Token 527: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.9160520434379578
    2. '))))' → logprob: -1.6660521030426025
    3. ')))' → logprob: -2.5410521030426025
    4. ')))))
' → logprob: -2.6660521030426025
    5. '))),' → logprob: -2.9160521030426025
    6. ')))),' → logprob: -2.9160521030426025
    7. '))
' → logprob: -3.1660521030426025
    8. ')),' → logprob: -3.1660521030426025
    9. '))))
' → logprob: -3.9160521030426025
    10. ')))
' → logprob: -4.041051864624023

Token 528: '               ' (ID: 506)
  Prédit: ')))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -1.0555349588394165
    2. '               ' → logprob: -1.6805349588394165
    3. '))))' → logprob: -1.9305349588394165
    4. '))' → logprob: -2.180534839630127
    5. '       ' → logprob: -2.430534839630127
    6. ')' → logprob: -3.305534839630127
    7. '           ' → logprob: -3.930534839630127
    8. ')))
' → logprob: -4.055534839630127
    9. '))))
' → logprob: -4.680534839630127
    10. ')))))
' → logprob: -4.930534839630127

Token 529: ' )
' (ID: 3270)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.997959554195404
    2. ')))' → logprob: -1.6229596138000488
    3. '))))' → logprob: -2.122959613800049
    4. ')' → logprob: -2.372959613800049
    5. '))' → logprob: -2.372959613800049
    6. '           ' → logprob: -3.122959613800049
    7. '))
' → logprob: -3.747959613800049
    8. ')))))
' → logprob: -4.247959613800049
    9. ')))
' → logprob: -4.622959613800049
    10. ')
' (adapté à ' )
') → logprob: -4.622959613800049

Token 530: '           ' (ID: 352)
  Prédit: ')))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.41826727986335754
    2. ')' → logprob: -2.043267250061035
    3. '))' → logprob: -2.418267250061035
    4. '       ' → logprob: -2.418267250061035
    5. '))))' → logprob: -3.668267250061035
    6. ')
' → logprob: -6.293267250061035
    7. ')))
' → logprob: -6.668267250061035
    8. '               ' → logprob: -6.918267250061035
    9. '   ' → logprob: -7.043267250061035
    10. '           ' → logprob: -7.168267250061035

Token 531: ' )
' (ID: 3270)
  Prédit: ')))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.7400274872779846
    2. ')' → logprob: -1.2400274276733398
    3. '       ' → logprob: -1.9900274276733398
    4. '))))' → logprob: -3.36502742767334
    5. '))' → logprob: -3.49002742767334
    6. ')
' (adapté à ' )
') → logprob: -3.74002742767334
    7. '           ' → logprob: -5.74002742767334
    8. ')))
' → logprob: -6.86502742767334
    9. '))
' → logprob: -6.99002742767334
    10. '               ' → logprob: -7.61502742767334

Token 532: '       ' (ID: 309)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.707716166973114
    2. '       ' → logprob: -1.3327162265777588
    3. ')))' → logprob: -2.082716226577759
    4. '))' → logprob: -2.207716226577759
    5. '),' → logprob: -6.33271598815918
    6. '   ' → logprob: -6.58271598815918
    7. '))))' → logprob: -6.83271598815918
    8. '<|end|>' → logprob: -7.08271598815918
    9. '[' → logprob: -7.20771598815918
    10. '           ' → logprob: -7.45771598815918

Token 533: ' )
' (ID: 3270)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4517664611339569
    2. '))' → logprob: -1.4517664909362793
    3. ')))' → logprob: -2.2017664909362793
    4. '       ' → logprob: -4.451766490936279
    5. '   ' → logprob: -5.701766490936279
    6. '),' → logprob: -6.076766490936279
    7. ')
' (adapté à ' )
') → logprob: -7.576766490936279
    8. '))))' → logprob: -7.701766490936279
    9. '),
' → logprob: -9.326766014099121
    10. ',' → logprob: -9.576766014099121

Token 534: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.004570630379021168
    2. '   ' → logprob: -5.629570484161377
    3. '))' → logprob: -8.254570960998535
    4. '       ' → logprob: -8.379570960998535
    5. '),' → logprob: -9.004570960998535
    6. '<|end|>' → logprob: -9.004570960998535
    7. ')
' → logprob: -9.629570960998535
    8. ')))' → logprob: -10.129570960998535
    9. ')}' → logprob: -10.879570960998535
    10. '())' → logprob: -11.004570960998535

Token 535: ' )

' (ID: 11467)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08301594108343124
    2. ',' → logprob: -3.0830159187316895
    3. '   ' → logprob: -4.0830159187316895
    4. ':' → logprob: -5.2080159187316895
    5. '<|end|>' → logprob: -6.3330159187316895
    6. '):' → logprob: -6.5830159187316895
    7. '(' → logprob: -6.7080159187316895
    8. '),' → logprob: -7.0830159187316895
    9. ',
' → logprob: -7.0830159187316895
    10. '[' → logprob: -7.2080159187316895

Token 536: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6708363890647888
    2. '[' → logprob: -1.0458364486694336
    3. '<|end|>' → logprob: -3.1708364486694336
    4. ':' → logprob: -3.5458364486694336
    5. '(' → logprob: -3.7958364486694336
    6. ',' → logprob: -4.170836448669434
    7. '[
' → logprob: -4.920836448669434
    8. '   ' → logprob: -4.920836448669434
    9. ' ' → logprob: -5.420836448669434
    10. ' (' → logprob: -6.545836448669434

Token 537: ' #' (ID: 1069)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.20848621428012848
    2. '   ' → logprob: -2.333486318588257
    3. '[' → logprob: -3.208486318588257
    4. '<|end|>' → logprob: -4.208486080169678
    5. 'def' → logprob: -5.333486080169678
    6. '(' → logprob: -5.583486080169678
    7. 'Type' → logprob: -5.708486080169678
    8. '[]' → logprob: -5.708486080169678
    9. '#' (adapté à ' #') → logprob: -5.708486080169678
    10. 'Trace' → logprob: -6.083486080169678

Token 538: ' On' (ID: 2160)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.3020761013031006
    2. ')' → logprob: -2.0520761013031006
    3. 'for' → logprob: -2.3020761013031006
    4. 'i' → logprob: -2.6770761013031006
    5. 'pass' → logprob: -2.8020761013031006
    6. ' for' → logprob: -2.8020761013031006
    7. '   ' → logprob: -2.9270761013031006
    8. 'indices' → logprob: -2.9270761013031006
    9. 'return' → logprob: -3.4270761013031006
    10. 'continue' → logprob: -3.6770761013031006

Token 539: ' crée' (ID: 102256)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'continue' → logprob: -1.037104845046997
    2. 'for' → logprob: -1.537104845046997
    3. ' continue' → logprob: -2.037104845046997
    4. '#' → logprob: -2.412104845046997
    5. 'range' → logprob: -3.537104845046997
    6. 'cherche' → logprob: -3.537104845046997
    7. 'tr' → logprob: -3.662104845046997
    8. ' for' → logprob: -3.787104845046997
    9. ' crée' → logprob: -4.287104606628418
    10. 'contin' → logprob: -4.537104606628418

Token 540: ' une' (ID: 2463)
  Prédit: ' une'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.6479461789131165
    2. ' un' → logprob: -1.3979461193084717
    3. 'A' → logprob: -2.8979461193084717
    4. '   ' → logprob: -3.1479461193084717
    5. 'une' → logprob: -3.2729461193084717
    6. ' a' → logprob: -4.147946357727051
    7. 'C' → logprob: -4.272946357727051
    8. ' A' → logprob: -4.397946357727051
    9. ' C' → logprob: -4.647946357727051
    10. 'a' → logprob: -4.772946357727051

Token 541: ' nouvelle' (ID: 24562)
  Prédit: 'deque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'deque' → logprob: -0.7548857927322388
    2. 'list' → logprob: -2.504885673522949
    3. 'for' → logprob: -2.754885673522949
    4. 'd' → logprob: -2.879885673522949
    5. 'liste' → logprob: -3.129885673522949
    6. 'default' → logprob: -3.129885673522949
    7. 'def' → logprob: -3.254885673522949
    8. 'counter' → logprob: -3.504885673522949
    9. 'dict' → logprob: -3.504885673522949
    10. 'range' → logprob: -3.629885673522949

Token 542: ' liste' (ID: 31719)
  Prédit: 'liste'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'liste' → logprob: -0.4858935475349426
    2. 'list' → logprob: -1.8608934879302979
    3. 'variable' → logprob: -3.110893487930298
    4. ' liste' → logprob: -3.610893487930298
    5. 'ligne' → logprob: -3.735893487930298
    6. 'B' → logprob: -3.985893487930298
    7. ' variable' → logprob: -4.235893726348877
    8. 'range' → logprob: -4.360893726348877
    9. '#' → logprob: -4.610893726348877
    10. 'version' → logprob: -4.985893726348877

Token 543: ' C' (ID: 363)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'B' → logprob: -1.5596327781677246
    2. 'A' → logprob: -1.6846327781677246
    3. 'C' → logprob: -1.6846327781677246
    4. ' =' → logprob: -1.9346327781677246
    5. 'indices' → logprob: -3.5596327781677246
    6. '   ' → logprob: -3.8096327781677246
    7. ' de' → logprob: -4.434632778167725
    8. ' B' → logprob: -4.434632778167725
    9. '(
' → logprob: -4.559632778167725
    10. ',' → logprob: -4.559632778167725

Token 544: ' qui' (ID: 2780)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.08918176591396332
    2. '=' → logprob: -2.464181661605835
    3. '=[]' → logprob: -8.839181900024414
    4. '=[]
' → logprob: -10.464181900024414
    5. '=[' → logprob: -10.839181900024414
    6. 'C' → logprob: -10.964181900024414
    7. '   ' → logprob: -11.964181900024414
    8. '[]' → logprob: -12.214181900024414
    9. ',' → logprob: -12.339181900024414
    10. ')' → logprob: -12.714181900024414

Token 545: ' va' (ID: 3423)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.04694925248622894
    2. ' =' → logprob: -3.1719491481781006
    3. '=[' → logprob: -6.17194938659668
    4. '=[]' → logprob: -6.54694938659668
    5. '=
' → logprob: -9.42194938659668
    6. '=[]
' → logprob: -9.42194938659668
    7. '=list' → logprob: -10.54694938659668
    8. 'range' → logprob: -10.54694938659668
    9. 's' → logprob: -10.79694938659668
    10. '=[
' → logprob: -10.92194938659668

Token 546: ' servir' (ID: 42557)
  Prédit: '[('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[(' → logprob: -0.20624516904354095
    2. '[]' → logprob: -2.956245183944702
    3. '[' → logprob: -3.331245183944702
    4. 'range' → logprob: -3.456245183944702
    5. 'comb' → logprob: -4.331244945526123
    6. ' [(' → logprob: -4.831244945526123
    7. 'enumer' → logprob: -4.831244945526123
    8. 'cont' → logprob: -5.206244945526123
    9. 'tr' → logprob: -5.831244945526123
    10. 'conten' → logprob: -5.956244945526123

Token 547: ' pour' (ID: 1930)
  Prédit: 'de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'de' → logprob: -1.2900347709655762
    2. 'à' → logprob: -1.2900347709655762
    3. ' à' → logprob: -1.5400347709655762
    4. ' de' → logprob: -2.040034770965576
    5. 'for' → logprob: -3.165034770965576
    6. 'd' → logprob: -4.040034770965576
    7. '<|end|>' → logprob: -4.665034770965576
    8. 'def' → logprob: -4.790034770965576
    9. '```' → logprob: -4.790034770965576
    10. 'as' → logprob: -5.290034770965576

Token 548: ' la' (ID: 557)
  Prédit: ' la'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.47193312644958496
    2. 'la' → logprob: -1.471933126449585
    3. 'l' → logprob: -2.596933126449585
    4. ' l' → logprob: -3.096933126449585
    5. 'le' → logprob: -4.471933364868164
    6. ' le' → logprob: -4.971933364868164
    7. ' continuer' → logprob: -6.221933364868164
    8. 'les' → logprob: -6.596933364868164
    9. ' comparer' → logprob: -6.596933364868164
    10. '...' → logprob: -6.971933364868164

Token 549: ' vér' (ID: 42524)
  Prédit: 'compar'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'compar' → logprob: -0.7439275979995728
    2. 'suite' → logprob: -1.8689275979995728
    3. 'i' → logprob: -2.493927478790283
    4. 'tri' → logprob: -3.243927478790283
    5. 'for' → logprob: -3.368927478790283
    6. ' comparaison' → logprob: -3.618927478790283
    7. ' suite' → logprob: -3.868927478790283
    8. ' boucle' → logprob: -4.118927478790283
    9. '#' → logprob: -4.243927478790283
    10. 'construction' → logprob: -4.618927478790283

Token 550: 'ification' (ID: 3166)
  Prédit: 'ification'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ification' → logprob: -0.03878773748874664
    2. 'if' → logprob: -3.288787841796875
    3. 'ifie' → logprob: -7.788787841796875
    4. 'ication' → logprob: -9.788787841796875
    5. '```' → logprob: -9.913787841796875
    6. 'ifi' → logprob: -10.163787841796875
    7. '#' → logprob: -10.413787841796875
    8. 'i' → logprob: -10.538787841796875
    9. '   ' → logprob: -11.163787841796875
    10. 'ifié' → logprob: -11.288787841796875

Token 551: ' cycl' (ID: 27789)
  Prédit: 'C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.26781320571899414
    2. '   ' → logprob: -1.7678132057189941
    3. ' =' → logprob: -3.642813205718994
    4. ' C' → logprob: -4.267813205718994
    5. '=' → logprob: -4.642813205718994
    6. 'for' → logprob: -5.892813205718994
    7. '[
' → logprob: -6.017813205718994
    8. '[]
' → logprob: -6.142813205718994
    9. ' for' → logprob: -6.392813205718994
    10. '[]' → logprob: -7.017813205718994

Token 552: 'ique' (ID: 2222)
  Prédit: 'ique'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ique' → logprob: -0.03937949985265732
    2. 'iques' → logprob: -4.664379596710205
    3. 'ée' → logprob: -5.039379596710205
    4. 'ation' → logprob: -5.289379596710205
    5. 'que' → logprob: -5.414379596710205
    6. 'é' → logprob: -6.539379596710205
    7. '   ' → logprob: -6.664379596710205
    8. 'ie' → logprob: -6.789379596710205
    9. 'ère' → logprob: -7.164379596710205
    10. 'è' → logprob: -7.539379596710205

Token 553: ' suivante' (ID: 107439)
  Prédit: 'C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.2914527654647827
    2. ' =' → logprob: -1.6664527654647827
    3. '   ' → logprob: -3.9164528846740723
    4. '=' → logprob: -4.166452884674072
    5. ',' → logprob: -4.791452884674072
    6. ' C' → logprob: -4.916452884674072
    7. ':' → logprob: -6.166452884674072
    8. '[' → logprob: -6.541452884674072
    9. '[]' → logprob: -6.666452884674072
    10. '=[]
' → logprob: -6.791452884674072

Token 554: '
' (ID: 198)
  Prédit: 'C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.03130195662379265
    2. ' C' → logprob: -3.781301975250244
    3. '   ' → logprob: -5.281301975250244
    4. '
' → logprob: -6.031301975250244
    5. '    
' → logprob: -9.156301498413086
    6. ',' → logprob: -9.281301498413086
    7. ' =' → logprob: -9.781301498413086
    8. '[' → logprob: -10.031301498413086
    9. '```' → logprob: -10.156301498413086
    10. '[]' → logprob: -10.906301498413086

Token 555: '   ' (ID: 271)
  Prédit: 'C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.3266131579875946
    2. ' C' → logprob: -1.326613187789917
    3. '   ' → logprob: -4.326612949371338
    4. '```' → logprob: -11.201613426208496
    5. '
' → logprob: -12.076613426208496
    6. '    
' → logprob: -12.201613426208496
    7. '[' → logprob: -12.201613426208496
    8. ' [' → logprob: -12.451613426208496
    9. ' 
' → logprob: -13.076613426208496
    10. ' ' → logprob: -13.076613426208496

Token 556: ' #' (ID: 1069)
  Prédit: 'C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.1381293088197708
    2. ' C' → logprob: -2.138129234313965
    3. '   ' → logprob: -4.513129234313965
    4. '
' → logprob: -9.013129234313965
    5. '```' → logprob: -11.263129234313965
    6. '    
' → logprob: -11.638129234313965
    7. ' ' → logprob: -12.013129234313965
    8. 'A' → logprob: -12.888129234313965
    9. ' 
' → logprob: -12.888129234313965
    10. 'indices' → logprob: -13.263129234313965

Token 557: ' Elle' (ID: 21300)
  Prédit: 'C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.06637728214263916
    2. ' C' → logprob: -2.8163771629333496
    3. '   ' → logprob: -5.44137716293335
    4. '```' → logprob: -10.941377639770508
    5. ' ' → logprob: -11.941377639770508
    6. 'A' → logprob: -12.191377639770508
    7. '
' → logprob: -12.316377639770508
    8. '[' → logprob: -12.441377639770508
    9. ' ' → logprob: -12.691377639770508
    10. 'B' → logprob: -12.691377639770508

Token 558: ' contient' (ID: 89067)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.17981724441051483
    2. ' =' → logprob: -1.8048171997070312
    3. '=[]' → logprob: -10.429817199707031
    4. '=[' → logprob: -11.304817199707031
    5. '=
' → logprob: -11.554817199707031
    6. ')' → logprob: -11.929817199707031
    7. '=[]
' → logprob: -13.304817199707031
    8. '[' → logprob: -13.429817199707031
    9. ' =
' → logprob: -13.554817199707031
    10. '.append' → logprob: -13.929817199707031

Token 559: ' l' (ID: 305)
  Prédit: '[('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[(' → logprob: -0.06127915903925896
    2. '[i' → logprob: -3.561279058456421
    3. '[]' → logprob: -4.936279296875
    4. '[' → logprob: -5.061279296875
    5. '[
' → logprob: -5.311279296875
    6. 'list' → logprob: -5.936279296875
    7. 'sorted' → logprob: -6.186279296875
    8. ' [(' → logprob: -6.436279296875
    9. 'A' → logprob: -6.561279296875
    10. '[A' → logprob: -6.811279296875

Token 560: ''ind' (ID: 82245)
  Prédit: '[('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[(' → logprob: -1.1217041015625
    2. '[i' → logprob: -1.6217041015625
    3. '[
' → logprob: -2.4967041015625
    4. '[' → logprob: -2.6217041015625
    5. 'A' → logprob: -2.8717041015625
    6. ' zip' → logprob: -3.1217041015625
    7. 'B' → logprob: -3.3717041015625
    8. ' [(' → logprob: -3.6217041015625
    9. 'zip' → logprob: -3.7467041015625
    10. ' B' → logprob: -3.9967041015625

Token 561: 'ice' (ID: 603)
  Prédit: 'ice'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ice' → logprob: -0.3100985884666443
    2. 'ices' → logprob: -1.435098648071289
    3. 'ex' → logprob: -3.560098648071289
    4. 'ic' → logprob: -10.685098648071289
    5. '[' → logprob: -11.310098648071289
    6. 'ent' → logprob: -11.810098648071289
    7. 'i' → logprob: -11.810098648071289
    8. 'é' → logprob: -12.560098648071289
    9. '
' → logprob: -12.685098648071289
    10. 'ique' → logprob: -12.685098648071289

Token 562: ' tri' (ID: 12665)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.26594775915145874
    2. ' initial' → logprob: -2.2659478187561035
    3. ',' → logprob: -3.2659478187561035
    4. ' tri' → logprob: -3.3909478187561035
    5. 'initial' → logprob: -3.8909478187561035
    6. ' des' → logprob: -5.2659478187561035
    7. '_initial' → logprob: -5.7659478187561035
    8. 'tri' → logprob: -5.8909478187561035
    9. '   ' → logprob: -6.0159478187561035
    10. ' de' → logprob: -6.0159478187561035

Token 563: 'é' (ID: 377)
  Prédit: 'éré'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'éré' → logprob: -0.3221658766269684
    2. 'é' → logprob: -2.1971659660339355
    3. 'érée' → logprob: -2.5721659660339355
    4. 'ée' → logprob: -2.6971659660339355
    5. 'rée' → logprob: -5.0721659660339355
    6. 'éal' → logprob: -5.1971659660339355
    7. 'érés' → logprob: -5.8221659660339355
    8. 'ré' → logprob: -6.5721659660339355
    9. 'éd' → logprob: -7.9471659660339355
    10. 'édé' → logprob: -7.9471659660339355

Token 564: ' du' (ID: 1462)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.17535507678985596
    2. 's' → logprob: -2.0503549575805664
    3. ' des' → logprob: -4.800354957580566
    4. 'de' → logprob: -5.175354957580566
    5. ' de' → logprob: -5.550354957580566
    6. 'des' → logprob: -5.675354957580566
    7. ',
' → logprob: -6.300354957580566
    8. 'B' → logprob: -6.675354957580566
    9. ' tri' → logprob: -6.800354957580566
    10. ')' → logprob: -7.300354957580566

Token 565: ' tableau' (ID: 67053)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.43886005878448486
    2. 'A' → logprob: -1.3138600587844849
    3. ' B' → logprob: -2.9388599395751953
    4. ' A' → logprob: -4.313859939575195
    5. 'élé' → logprob: -4.438859939575195
    6. ' tableau' → logprob: -6.188859939575195
    7. 'tuple' → logprob: -6.938859939575195
    8. 'element' → logprob: -6.938859939575195
    9. ' élément' → logprob: -7.438859939575195
    10. 'a' → logprob: -7.688859939575195

Token 566: ' B' (ID: 418)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.5639756321907043
    2. 'B' → logprob: -0.9389756321907043
    3. ' A' → logprob: -3.8139755725860596
    4. ' B' → logprob: -4.063975811004639
    5. 'C' → logprob: -7.563975811004639
    6. 'sorted' → logprob: -9.31397533416748
    7. '   ' → logprob: -9.68897533416748
    8. ' sorted' → logprob: -10.81397533416748
    9. ' C' → logprob: -11.18897533416748
    10. ' ' → logprob: -11.31397533416748

Token 567: ' pour' (ID: 1930)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.4164503216743469
    2. '3' → logprob: -1.6664502620697021
    3. ')' → logprob: -3.291450262069702
    4. 'C' → logprob: -3.541450262069702
    5. '_' → logprob: -4.041450500488281
    6. '2' → logprob: -4.416450500488281
    7. '_,' → logprob: -4.541450500488281
    8. '),' → logprob: -5.291450500488281
    9. ',
' → logprob: -5.291450500488281
    10. 's' → logprob: -5.416450500488281

Token 568: ' chaque' (ID: 21194)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.4630972146987915
    2. ' i' → logprob: -1.8380972146987915
    3. ' chaque' → logprob: -1.8380972146987915
    4. 'l' → logprob: -4.213097095489502
    5. 'les' → logprob: -4.588097095489502
    6. 'each' → logprob: -4.963097095489502
    7. ' l' → logprob: -6.088097095489502
    8. ' each' → logprob: -6.088097095489502
    9. 'B' → logprob: -6.213097095489502
    10. 'A' → logprob: -6.213097095489502

Token 569: ' élément' (ID: 99627)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.16438907384872437
    2. ' i' → logprob: -2.664389133453369
    3. 'élé' → logprob: -3.164389133453369
    4. 'indice' → logprob: -3.789389133453369
    5. 'A' → logprob: -5.164389133453369
    6. ' élément' → logprob: -5.789389133453369
    7. 'index' → logprob: -6.289389133453369
    8. 'position' → logprob: -6.789389133453369
    9. 'val' → logprob: -7.039389133453369
    10. ' position' → logprob: -7.289389133453369

Token 570: ' de' (ID: 334)
  Prédit: 'C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.230885311961174
    2. ' C' → logprob: -2.3558852672576904
    3. '   ' → logprob: -3.6058852672576904
    4. ' of' → logprob: -3.7308852672576904
    5. ' for' → logprob: -3.8558852672576904
    6. 'A' → logprob: -4.3558855056762695
    7. ' de' → logprob: -4.4808855056762695
    8. ',' → logprob: -5.6058855056762695
    9. 'for' → logprob: -5.7308855056762695
    10. ' in' → logprob: -6.2308855056762695

Token 571: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.18066903948783875
    2. ' A' → logprob: -2.180669069290161
    3. 'B' → logprob: -3.180669069290161
    4. ' B' → logprob: -4.930668830871582
    5. 'range' → logprob: -6.430668830871582
    6. ' range' → logprob: -6.555668830871582
    7. 'l' → logprob: -8.555668830871582
    8. ' la' → logprob: -9.680668830871582
    9. ' ' → logprob: -9.680668830871582
    10. 'N' → logprob: -10.305668830871582

Token 572: '
' (ID: 198)
  Prédit: 'C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.6070904731750488
    2. '   ' → logprob: -0.8570904731750488
    3. ' C' → logprob: -4.607090473175049
    4. ',' → logprob: -4.982090473175049
    5. 'indices' → logprob: -5.357090473175049
    6. '
' → logprob: -5.732090473175049
    7. 'A' → logprob: -6.982090473175049
    8. '    
' → logprob: -7.357090473175049
    9. '```' → logprob: -7.357090473175049
    10. ' indices' → logprob: -7.482090473175049

Token 573: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.039914920926094055
    2. 'C' → logprob: -3.289914846420288
    3. ' C' → logprob: -6.414915084838867
    4. 'indices' → logprob: -9.414915084838867
    5. '```' → logprob: -10.164915084838867
    6. ',' → logprob: -11.039915084838867
    7. ' indices' → logprob: -11.164915084838867
    8. 'A' → logprob: -11.289915084838867
    9. ')' → logprob: -11.414915084838867
    10. '    
' → logprob: -11.539915084838867

Token 574: ' #' (ID: 1069)
  Prédit: 'C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.16519391536712646
    2. ' C' → logprob: -2.165194034576416
    3. '   ' → logprob: -4.915194034576416
    4. 'index' → logprob: -4.915194034576416
    5. 'indices' → logprob: -5.165194034576416
    6. 'A' → logprob: -5.415194034576416
    7. ' index' → logprob: -5.665194034576416
    8. ' indices' → logprob: -6.415194034576416
    9. 'idx' → logprob: -6.790194034576416
    10. ' idx' → logprob: -6.915194034576416

Token 575: ' On' (ID: 2160)
  Prédit: 'C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.05463974550366402
    2. 'index' → logprob: -4.17963981628418
    3. 'indices' → logprob: -4.80463981628418
    4. 'pos' → logprob: -4.80463981628418
    5. 'A' → logprob: -5.42963981628418
    6. '   ' → logprob: -5.67963981628418
    7. ' C' → logprob: -5.80463981628418
    8. 'idx' → logprob: -5.80463981628418
    9. 'from' → logprob: -6.42963981628418
    10. '#' → logprob: -7.30463981628418

Token 576: ' utilise' (ID: 70283)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'continue' → logprob: -0.26234716176986694
    2. 'for' → logprob: -2.3873472213745117
    3. ' continue' → logprob: -2.6373472213745117
    4. 'contin' → logprob: -4.387347221374512
    5. ' =' → logprob: -4.512347221374512
    6. '=' → logprob: -5.012347221374512
    7. ' for' → logprob: -5.262347221374512
    8. 's' → logprob: -5.637347221374512
    9. 'A' → logprob: -5.637347221374512
    10. '#' → logprob: -5.887347221374512

Token 577: ' zip' (ID: 16216)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -1.1885786056518555
    2. '{' → logprob: -1.3135786056518555
    3. 'A' → logprob: -1.6885786056518555
    4. 'sorted' → logprob: -2.5635786056518555
    5. 'dict' → logprob: -3.1885786056518555
    6. 'B' → logprob: -3.1885786056518555
    7. '[A' → logprob: -3.4385786056518555
    8. '[]' → logprob: -4.9385786056518555
    9. '[B' → logprob: -4.9385786056518555
    10. 'list' → logprob: -5.4385786056518555

Token 578: ' pour' (ID: 1930)
  Prédit: '(A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.16722413897514343
    2. '(range' → logprob: -2.292224168777466
    3. '(sorted' → logprob: -4.167223930358887
    4. '(
' → logprob: -4.417223930358887
    5. '(B' → logprob: -4.667223930358887
    6. '(' → logprob: -5.417223930358887
    7. '(zip' → logprob: -5.542223930358887
    8. '(*' → logprob: -6.292223930358887
    9. '   ' → logprob: -6.417223930358887
    10. '(en' → logprob: -6.417223930358887

Token 579: ' assoc' (ID: 107464)
  Prédit: 'zip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'zip' → logprob: -0.25750210881233215
    2. ' zip' → logprob: -2.0075020790100098
    3. 'map' → logprob: -3.8825020790100098
    4. 'range' → logprob: -4.00750207901001
    5. 'A' → logprob: -4.13250207901001
    6. 'sorted' → logprob: -4.13250207901001
    7. 'enumer' → logprob: -4.75750207901001
    8. ' map' → logprob: -5.25750207901001
    9. ' range' → logprob: -6.00750207901001
    10. ' enumerate' → logprob: -6.25750207901001

Token 580: 'ier' (ID: 905)
  Prédit: 'ier'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ier' → logprob: -0.004547608084976673
    2. 'ierer' → logprob: -6.504547595977783
    3. '(i' → logprob: -7.754547595977783
    4. 'iere' → logprob: -7.879547595977783
    5. 'ié' → logprob: -8.004548072814941
    6. 'i' → logprob: -8.254548072814941
    7. 'er' → logprob: -8.379548072814941
    8. '(' → logprob: -8.379548072814941
    9. 'érer' → logprob: -9.004548072814941
    10. 'iner' → logprob: -9.129548072814941

Token 581: ' chaque' (ID: 21194)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.49477362632751465
    2. '(A' → logprob: -1.8697736263275146
    3. '(range' → logprob: -2.7447736263275146
    4. '(sorted' → logprob: -2.8697736263275146
    5. 'range' → logprob: -2.9947736263275146
    6. 'sorted' → logprob: -3.8697736263275146
    7. 'indices' → logprob: -4.369773864746094
    8. 'B' → logprob: -4.744773864746094
    9. '(
' → logprob: -4.869773864746094
    10. '(B' → logprob: -6.119773864746094

Token 582: ' valeur' (ID: 41664)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.19421608746051788
    2. ' A' → logprob: -3.319216012954712
    3. 'i' → logprob: -4.069216251373291
    4. 'index' → logprob: -4.069216251373291
    5. 'element' → logprob: -4.194216251373291
    6. 'indice' → logprob: -4.444216251373291
    7. 'val' → logprob: -4.569216251373291
    8. '(A' → logprob: -4.819216251373291
    9. 'value' → logprob: -4.819216251373291
    10. 'a' → logprob: -4.944216251373291

Token 583: ' de' (ID: 334)
  Prédit: '(A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.18249239027500153
    2. '   ' → logprob: -2.43249249458313
    3. '(sorted' → logprob: -3.55749249458313
    4. '(B' → logprob: -4.182492256164551
    5. 'A' → logprob: -4.432492256164551
    6. '(' → logprob: -4.682492256164551
    7. '(
' → logprob: -5.932492256164551
    8. ',' → logprob: -6.182492256164551
    9. ' (' → logprob: -6.307492256164551
    10. 'sorted' → logprob: -6.682492256164551

Token 584: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.011020473204553127
    2. 'sorted' → logprob: -5.261020660400391
    3. ' A' → logprob: -5.386020660400391
    4. 'B' → logprob: -7.011020660400391
    5. ' sorted' → logprob: -8.63602066040039
    6. '(sorted' → logprob: -9.76102066040039
    7. 'range' → logprob: -11.63602066040039
    8. ' B' → logprob: -11.63602066040039
    9. 'a' → logprob: -12.13602066040039
    10. 'C' → logprob: -12.63602066040039

Token 585: ' avec' (ID: 3937)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.03102891705930233
    2. '(A' → logprob: -4.906028747558594
    3. '   ' → logprob: -5.031028747558594
    4. '2' → logprob: -5.906028747558594
    5. ' et' → logprob: -5.906028747558594
    6. ',A' → logprob: -5.906028747558594
    7. ' ,' → logprob: -6.156028747558594
    8. 'et' → logprob: -6.906028747558594
    9. 'sorted' → logprob: -6.906028747558594
    10. 'and' → logprob: -7.406028747558594

Token 586: ' l' (ID: 305)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.6304070353507996
    2. 'A' → logprob: -2.0054070949554443
    3. ' sa' → logprob: -2.8804070949554443
    4. 'sorted' → logprob: -3.1304070949554443
    5. 'la' → logprob: -3.2554070949554443
    6. ' B' → logprob: -3.3804070949554443
    7. 'l' → logprob: -3.7554070949554443
    8. 'enumer' → logprob: -4.005406856536865
    9. ' la' → logprob: -4.130406856536865
    10. 'each' → logprob: -4.380406856536865

Token 587: ''' (ID: 6)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.5551002025604248
    2. ' index' → logprob: -2.305100202560425
    3. ' indice' → logprob: -2.555100202560425
    4. 'e' → logprob: -2.930100202560425
    5. ''' → logprob: -3.305100202560425
    6. 'index' → logprob: -3.430100202560425
    7. 'A' → logprob: -3.430100202560425
    8. 'indice' → logprob: -4.180100440979004
    9. 'es' → logprob: -4.305100440979004
    10. ' B' → logprob: -4.305100440979004

Token 588: 'élé' (ID: 15228)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'B' → logprob: -1.52362060546875
    2. ' B' → logprob: -1.89862060546875
    3. 'index' → logprob: -1.89862060546875
    4. 'A' → logprob: -2.52362060546875
    5. ' index' → logprob: -2.64862060546875
    6. 'sorted' → logprob: -2.89862060546875
    7. 'enumer' → logprob: -2.89862060546875
    8. ' A' → logprob: -3.27362060546875
    9. 'indice' → logprob: -3.39862060546875
    10. 'zip' → logprob: -3.39862060546875

Token 589: 'ment' (ID: 508)
  Prédit: 'ment'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ment' → logprob: -0.0009354014764539897
    2. 'A' → logprob: -8.125935554504395
    3. 'mé' → logprob: -8.375935554504395
    4. 'ement' → logprob: -9.375935554504395
    5. 'ément' → logprob: -10.250935554504395
    6. 'me' → logprob: -10.250935554504395
    7. 'm' → logprob: -10.375935554504395
    8. 'zip' → logprob: -10.625935554504395
    9. '   ' → logprob: -11.000935554504395
    10. 'ém' → logprob: -11.000935554504395

Token 590: ' correspondant' (ID: 146058)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.7965841293334961
    2. ',' → logprob: -1.546584129333496
    3. 'B' → logprob: -2.546584129333496
    4. ' tri' → logprob: -2.796584129333496
    5. 's' → logprob: -3.171584129333496
    6. 'A' → logprob: -3.796584129333496
    7. 'sorted' → logprob: -4.046584129333496
    8. ' index' → logprob: -4.421584129333496
    9. 'index' → logprob: -4.671584129333496
    10. '   ' → logprob: -4.921584129333496

Token 591: ' dans' (ID: 2671)
  Prédit: '(A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.7558372616767883
    2. ',' → logprob: -0.8808372616767883
    3. '(B' → logprob: -3.7558372020721436
    4. '   ' → logprob: -3.7558372020721436
    5. '(sorted' → logprob: -3.8808372020721436
    6. '=' → logprob: -4.130837440490723
    7. 'A' → logprob: -5.130837440490723
    8. 'sorted' → logprob: -5.630837440490723
    9. 'B' → logprob: -5.755837440490723
    10. ' =' → logprob: -6.005837440490723

Token 592: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.11944925040006638
    2. 'A' → logprob: -2.9944491386413574
    3. ' B' → logprob: -3.4944491386413574
    4. 'sorted' → logprob: -3.7444491386413574
    5. 'enumer' → logprob: -5.869449138641357
    6. 'zip' → logprob: -6.244449138641357
    7. ' A' → logprob: -6.369449138641357
    8. ' sorted' → logprob: -6.744449138641357
    9. ' zip' → logprob: -8.494449615478516
    10. 'range' → logprob: -8.619449615478516

Token 593: '3' (ID: 18)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -1.0322530269622803
    2. '   ' → logprob: -1.5322530269622803
    3. '(A' → logprob: -2.0322530269622803
    4. ')' → logprob: -2.5322530269622803
    5. '(zip' → logprob: -2.5322530269622803
    6. '(sorted' → logprob: -3.0322530269622803
    7. 'zip' → logprob: -4.157253265380859
    8. '2' → logprob: -4.282253265380859
    9. '=' → logprob: -4.532253265380859
    10. ' =' → logprob: -4.657253265380859

Token 594: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.21937398612499237
    2. '(zip' → logprob: -2.469373941421509
    3. '(A' → logprob: -3.594373941421509
    4. 'zip' → logprob: -3.594373941421509
    5. ',' → logprob: -3.844373941421509
    6. ')' → logprob: -3.844373941421509
    7. '(sorted' → logprob: -5.844374179840088
    8. ' =' → logprob: -6.469374179840088
    9. 'A' → logprob: -6.719374179840088
    10. '(range' → logprob: -6.969374179840088

Token 595: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20692110061645508
    2. 'zip' → logprob: -2.456921100616455
    3. ' zip' → logprob: -2.956921100616455
    4. ' for' → logprob: -4.081921100616455
    5. ' C' → logprob: -4.206921100616455
    6. 'C' → logprob: -4.831921100616455
    7. 'for' → logprob: -5.831921100616455
    8. '(zip' → logprob: -6.831921100616455
    9. 'A' → logprob: -7.206921100616455
    10. ' indices' → logprob: -7.581921100616455

Token 596: ' #' (ID: 1069)
  Prédit: 'C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.14548318088054657
    2. '   ' → logprob: -2.5204832553863525
    3. ' C' → logprob: -3.2704832553863525
    4. 'zip' → logprob: -5.020483016967773
    5. 'indices' → logprob: -5.270483016967773
    6. 'for' → logprob: -6.645483016967773
    7. 'A' → logprob: -7.270483016967773
    8. ' indices' → logprob: -7.645483016967773
    9. 'sorted' → logprob: -7.645483016967773
    10. ' for' → logprob: -7.770483016967773

Token 597: ' On' (ID: 2160)
  Prédit: ' C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' C' → logprob: -0.568329930305481
    2. '   ' → logprob: -1.443329930305481
    3. 'C' → logprob: -1.693329930305481
    4. 'zip' → logprob: -5.818329811096191
    5. ' zip' → logprob: -5.943329811096191
    6. ' for' → logprob: -6.443329811096191
    7. ' indices' → logprob: -6.568329811096191
    8. 'indices' → logprob: -7.068329811096191
    9. ' list' → logprob: -7.818329811096191
    10. 'for' → logprob: -7.943329811096191

Token 598: ' trie' (ID: 139428)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.4439548254013062
    2. ' continue' → logprob: -1.5689548254013062
    3. 'continue' → logprob: -1.8189548254013062
    4. 'zip' → logprob: -2.0689549446105957
    5. ' for' → logprob: -2.6939549446105957
    6. ' zip' → logprob: -3.1939549446105957
    7. ' crée' → logprob: -3.3189549446105957
    8. '#' → logprob: -3.9439549446105957
    9. 'sort' → logprob: -4.318954944610596
    10. '=' → logprob: -4.568954944610596

Token 599: ' ces' (ID: 10532)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8118377327919006
    2. 'zip' → logprob: -1.5618376731872559
    3. 'sorted' → logprob: -1.8118376731872559
    4. 'A' → logprob: -2.061837673187256
    5. '(sorted' → logprob: -3.936837673187256
    6. '(zip' → logprob: -4.311837673187256
    7. 'C' → logprob: -5.436837673187256
    8. 'list' → logprob: -5.811837673187256
    9. ' zip' → logprob: -5.936837673187256
    10. 'key' → logprob: -6.061837673187256

Token 600: ' couples' (ID: 29972)
  Prédit: 'zip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'zip' → logprob: -0.1825597584247589
    2. 'A' → logprob: -1.9325597286224365
    3. '(zip' → logprob: -4.807559967041016
    4. ' zip' → logprob: -5.682559967041016
    5. '(
' → logprob: -5.807559967041016
    6. 'C' → logprob: -5.932559967041016
    7. 'sorted' → logprob: -6.682559967041016
    8. 'B' → logprob: -6.932559967041016
    9. 'key' → logprob: -7.932559967041016
    10. '(sorted' → logprob: -8.182559967041016

Token 601: ' selon' (ID: 27571)
  Prédit: '(sorted'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(sorted' → logprob: -0.8927230834960938
    2. '   ' → logprob: -1.0177230834960938
    3. '(zip' → logprob: -2.2677230834960938
    4. 'sorted' → logprob: -3.0177230834960938
    5. 'zip' → logprob: -3.5177230834960938
    6. '(
' → logprob: -4.767723083496094
    7. '(key' → logprob: -4.767723083496094
    8. '(A' → logprob: -4.767723083496094
    9. 'A' → logprob: -4.892723083496094
    10. 'key' → logprob: -5.142723083496094

Token 602: ' les' (ID: 1341)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'lambda' → logprob: -0.20029012858867645
    2. ' lambda' → logprob: -2.2002902030944824
    3. 'A' → logprob: -2.8252902030944824
    4. '=lambda' → logprob: -5.325290203094482
    5. ' A' → logprob: -6.200290203094482
    6. ' la' → logprob: -6.825290203094482
    7. 'the' → logprob: -7.075290203094482
    8. 'la' → logprob: -7.575290203094482
    9. 'key' → logprob: -7.825290203094482
    10. '(lambda' → logprob: -7.825290203094482

Token 603: ' valeurs' (ID: 73668)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.3444426953792572
    2. 'lambda' → logprob: -1.7194427251815796
    3. ' lambda' → logprob: -3.09444260597229
    4. 'x' → logprob: -3.46944260597229
    5. ' A' → logprob: -3.71944260597229
    6. ' x' → logprob: -5.969442844390869
    7. 'key' → logprob: -6.094442844390869
    8. 'val' → logprob: -6.344442844390869
    9. '0' → logprob: -6.719442844390869
    10. ' key' → logprob: -6.969442844390869

Token 604: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.31243693828582764
    2. '=' → logprob: -2.687437057495117
    3. '(sorted' → logprob: -2.937437057495117
    4. ',' → logprob: -3.062437057495117
    5. '(A' → logprob: -3.562437057495117
    6. 'sorted' → logprob: -3.812437057495117
    7. 'A' → logprob: -3.812437057495117
    8. ' =' → logprob: -4.312437057495117
    9. '(zip' → logprob: -6.312437057495117
    10. ' sorted' → logprob: -6.437437057495117

Token 605: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.14379152655601501
    2. ' A' → logprob: -2.018791437149048
    3. 'B' → logprob: -7.518791675567627
    4. 'a' → logprob: -8.643791198730469
    5. ' B' → logprob: -8.893791198730469
    6. 'l' → logprob: -9.768791198730469
    7. '(A' → logprob: -10.393791198730469
    8. ' ' → logprob: -10.518791198730469
    9. 'C' → logprob: -10.768791198730469
    10. ' la' → logprob: -11.018791198730469

Token 606: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.019929159432649612
    2. '
' → logprob: -4.894928932189941
    3. 'sorted' → logprob: -5.769928932189941
    4. 'A' → logprob: -6.394928932189941
    5. ' sorted' → logprob: -6.519928932189941
    6. ')
' → logprob: -6.519928932189941
    7. 'zip' → logprob: -7.269928932189941
    8. ',' → logprob: -7.269928932189941
    9. ')' → logprob: -7.519928932189941
    10. '(sorted' → logprob: -7.894928932189941

Token 607: ' puis' (ID: 18766)
  Prédit: 'key'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'key' → logprob: -0.47425761818885803
    2. ' key' → logprob: -0.9742575883865356
    3. 'reverse' → logprob: -9.099257469177246
    4. ' reverse' → logprob: -10.224257469177246
    5. '   ' → logprob: -10.849257469177246
    6. 'A' → logprob: -11.474257469177246
    7. '(key' → logprob: -13.724257469177246
    8. ' A' → logprob: -14.599257469177246
    9. 'C' → logprob: -14.849257469177246
    10. ' ' → logprob: -15.724257469177246

Token 608: ' on' (ID: 402)
  Prédit: 'sorted'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sorted' → logprob: -0.7818872928619385
    2. 'key' → logprob: -1.9068872928619385
    3. 'lambda' → logprob: -2.0318872928619385
    4. 'C' → logprob: -2.5318872928619385
    5. 'A' → logprob: -2.9068872928619385
    6. 'zip' → logprob: -4.156887054443359
    7. ' lambda' → logprob: -4.281887054443359
    8. ' key' → logprob: -4.531887054443359
    9. '   ' → logprob: -4.781887054443359
    10. ' sorted' → logprob: -4.906887054443359

Token 609: ' extrait' (ID: 194006)
  Prédit: 'sort'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sort' → logprob: -0.7878041863441467
    2. 'zip' → logprob: -1.162804126739502
    3. 'sorted' → logprob: -1.662804126739502
    4. 'map' → logprob: -4.037804126739502
    5. 'extract' → logprob: -4.662804126739502
    6. 'continue' → logprob: -6.162804126739502
    7. '[' → logprob: -6.287804126739502
    8. 's' → logprob: -7.037804126739502
    9. ' zip' → logprob: -7.037804126739502
    10. ' sort' → logprob: -7.162804126739502

Token 610: ' le' (ID: 505)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -1.1327617168426514
    2. 'list' → logprob: -1.5077617168426514
    3. '[i' → logprob: -2.1327617168426514
    4. 'the' → logprob: -2.8827617168426514
    5. 'idx' → logprob: -2.8827617168426514
    6. 'x' → logprob: -3.0077617168426514
    7. 'i' → logprob: -3.1327617168426514
    8. 'index' → logprob: -4.2577619552612305
    9. '   ' → logprob: -4.3827619552612305
    10. 'B' → logprob: -4.3827619552612305

Token 611: ' second' (ID: 3099)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.7419776916503906
    2. '1' → logprob: -1.7419776916503906
    3. 'i' → logprob: -1.8669776916503906
    4. 'indices' → logprob: -2.9919776916503906
    5. 'indice' → logprob: -3.4919776916503906
    6. '[i' → logprob: -3.6169776916503906
    7. 'index' → logprob: -3.9919776916503906
    8. 'x' → logprob: -3.9919776916503906
    9. '0' → logprob: -4.366977691650391
    10. 'idx' → logprob: -4.866977691650391

Token 612: ' indice' (ID: 90848)
  Prédit: 'element'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'element' → logprob: -1.0371910333633423
    2. 'elem' → logprob: -1.4121910333633423
    3. '[' → logprob: -1.9121910333633423
    4. 'token' → logprob: -2.9121909141540527
    5. 'index' → logprob: -3.2871909141540527
    6. '_' → logprob: -3.4121909141540527
    7. 'x' → logprob: -3.4121909141540527
    8. 'item' → logprob: -4.162190914154053
    9. 't' → logprob: -4.912190914154053
    10. 'idx' → logprob: -5.162190914154053

Token 613: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04961757734417915
    2. 'C' → logprob: -4.174617767333984
    3. ' =' → logprob: -4.174617767333984
    4. ',' → logprob: -5.549617767333984
    5. 'sorted' → logprob: -6.299617767333984
    6. '
' → logprob: -6.424617767333984
    7. 'A' → logprob: -6.549617767333984
    8. '=' → logprob: -6.549617767333984
    9. '(sorted' → logprob: -6.674617767333984
    10. ' C' → logprob: -7.424617767333984

Token 614: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'B' → logprob: -1.6113110780715942
    2. ' chaque' → logprob: -1.8613110780715942
    3. 'la' → logprob: -2.1113109588623047
    4. 'cou' → logprob: -2.1113109588623047
    5. 'A' → logprob: -2.6113109588623047
    6. 'x' → logprob: -2.7363109588623047
    7. 'tuple' → logprob: -2.8613109588623047
    8. 'l' → logprob: -3.4863109588623047
    9. 't' → logprob: -3.4863109588623047
    10. 'c' → logprob: -3.6113109588623047

Token 615: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7420385479927063
    2. '3' → logprob: -1.4920384883880615
    3. ' =' → logprob: -2.1170384883880615
    4. '2' → logprob: -2.6170384883880615
    5. 'sorted' → logprob: -4.242038726806641
    6. '_sorted' → logprob: -4.242038726806641
    7. ',' → logprob: -4.367038726806641
    8. ')' → logprob: -4.617038726806641
    9. '=' → logprob: -4.617038726806641
    10. ' sorted' → logprob: -4.742038726806641

Token 616: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04409138485789299
    2. 'C' → logprob: -3.9190914630889893
    3. ' C' → logprob: -3.9190914630889893
    4. '    
' → logprob: -6.66909122467041
    5. '
' → logprob: -7.79409122467041
    6. ' sorted' → logprob: -7.91909122467041
    7. 'sorted' → logprob: -8.29409122467041
    8. ' for' → logprob: -9.04409122467041
    9. 'zip' → logprob: -9.29409122467041
    10. ' 
' → logprob: -9.29409122467041

Token 617: ' C' (ID: 363)
  Prédit: 'C'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'C' (adapté à ' C') → logprob: -0.5900006294250488
    2. '   ' → logprob: -1.3400006294250488
    3. ' C' → logprob: -1.7150006294250488
    4. 'sorted' → logprob: -6.965000629425049
    5. ' sorted' → logprob: -7.340000629425049
    6. 'zip' → logprob: -7.590000629425049
    7. 'A' → logprob: -7.840000629425049
    8. '
' → logprob: -7.965000629425049
    9. '    
' → logprob: -8.46500015258789
    10. ' A' → logprob: -8.71500015258789

Token 618: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4740794599056244
    2. '=' → logprob: -0.9740794897079468
    3. '=[' → logprob: -13.974079132080078
    4. '=list' → logprob: -14.724079132080078
    5. ' =[' → logprob: -14.849079132080078
    6. ',' → logprob: -15.099079132080078
    7. '   ' → logprob: -15.849079132080078
    8. ' ' → logprob: -16.349079132080078
    9. '=[]' → logprob: -16.474079132080078
    10. '[' → logprob: -17.099079132080078

Token 619: ' list' (ID: 1562)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.1434053182601929
    2. 'list' → logprob: -1.1434053182601929
    3. '[list' → logprob: -1.3934053182601929
    4. 'sorted' → logprob: -2.8934054374694824
    5. ' [' → logprob: -3.0184054374694824
    6. ' list' → logprob: -4.893405437469482
    7. ' sorted' → logprob: -6.768405437469482
    8. '[s' → logprob: -8.018404960632324
    9. '[
' → logprob: -8.643404960632324
    10. '[x' → logprob: -8.893404960632324

Token 620: '(map' (ID: 16946)
  Prédit: '(zip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(zip' → logprob: -0.42442405223846436
    2. '(
' → logprob: -1.9244240522384644
    3. '(map' → logprob: -2.424424171447754
    4. '(' → logprob: -2.674424171447754
    5. '(sorted' → logprob: -3.174424171447754
    6. '(

' → logprob: -8.299424171447754
    7. 'zip' → logprob: -9.299424171447754
    8. 'sorted' → logprob: -9.424424171447754
    9. 'map' → logprob: -9.799424171447754
    10. '=' → logprob: -10.549424171447754

Token 621: '(lambda' (ID: 43341)
  Prédit: '(lambda'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.0006380964769050479
    2. '(
' → logprob: -8.375638008117676
    3. '(' → logprob: -8.500638008117676
    4. '(operator' → logprob: -8.750638008117676
    5. 'lambda' → logprob: -10.500638008117676
    6. '(int' → logprob: -11.375638008117676
    7. '   ' → logprob: -12.500638008117676
    8. '((' → logprob: -14.750638008117676
    9. '(list' → logprob: -14.750638008117676
    10. '```' → logprob: -15.000638008117676

Token 622: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.008753546513617039
    2. 'lambda' → logprob: -5.383753776550293
    3. ' x' → logprob: -5.758753776550293
    4. 'a' → logprob: -7.508753776550293
    5. '   ' → logprob: -8.508753776550293
    6. 'c' → logprob: -9.633753776550293
    7. ' lambda' → logprob: -10.258753776550293
    8. '(lambda' → logprob: -10.758753776550293
    9. 't' → logprob: -11.133753776550293
    10. '(x' → logprob: -11.508753776550293

Token 623: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.07646961510181427
    2. 'lambda' → logprob: -3.451469659805298
    3. '(lambda' → logprob: -4.826469421386719
    4. 'x' → logprob: -4.826469421386719
    5. '   ' → logprob: -4.951469421386719
    6. ' lambda' → logprob: -5.201469421386719
    7. ' :' → logprob: -5.201469421386719
    8. ' x' → logprob: -5.326469421386719
    9. ',' → logprob: -7.201469421386719
    10. ' (' → logprob: -7.451469421386719

Token 624: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.005239326041191816
    2. ' x' → logprob: -5.255239486694336
    3. '(x' → logprob: -12.630239486694336
    4. 'B' → logprob: -14.630239486694336
    5. '   ' → logprob: -15.130239486694336
    6. 'b' → logprob: -15.380239486694336
    7. '[' → logprob: -15.380239486694336
    8. ')x' → logprob: -15.380239486694336
    9. 'lambda' → logprob: -15.380239486694336
    10. ' (' → logprob: -15.755239486694336

Token 625: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0020146444439888
    2. ':' → logprob: -6.377014636993408
    3. '(' → logprob: -8.377015113830566
    4. ' (' → logprob: -10.502015113830566
    5. 'x' → logprob: -10.502015113830566
    6. ' ' → logprob: -12.627015113830566
    7. ' :' → logprob: -12.627015113830566
    8. '   ' → logprob: -12.752015113830566
    9. ' [' → logprob: -13.002015113830566
    10. '1' → logprob: -13.002015113830566

Token 626: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00014942926645744592
    2. '[' → logprob: -9.625149726867676
    3. '(' → logprob: -10.000149726867676
    4. 'x' → logprob: -11.000149726867676
    5. '0' → logprob: -11.875149726867676
    6. '   ' → logprob: -12.375149726867676
    7. ' ' → logprob: -12.375149726867676
    8. 'B' → logprob: -13.125149726867676
    9. 'lambda' → logprob: -14.125149726867676
    10. '2' → logprob: -14.875149726867676

Token 627: '][' (ID: 2696)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.010147124528884888
    2. '[' → logprob: -4.7601470947265625
    3. ',x' → logprob: -7.3851470947265625
    4. ',B' → logprob: -8.010147094726562
    5. ',C' → logprob: -8.885147094726562
    6. ',[' → logprob: -9.760147094726562
    7. 'x' → logprob: -9.760147094726562
    8. ' ,' → logprob: -9.885147094726562
    9. ',
' → logprob: -9.885147094726562
    10. ',A' → logprob: -10.385147094726562

Token 628: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0020150020718574524
    2. '2' → logprob: -6.252015113830566
    3. '[' → logprob: -10.502015113830566
    4. '0' → logprob: -10.752015113830566
    5. ' ' → logprob: -10.752015113830566
    6. '```' → logprob: -12.377015113830566
    7. '-' → logprob: -12.502015113830566
    8. '   ' → logprob: -13.377015113830566
    9. ']' → logprob: -13.814515113830566
    10. ')' → logprob: -13.939515113830566

Token 629: '],' (ID: 2155)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0022205570712685585
    2. ' ,' → logprob: -7.002220630645752
    3. '),' → logprob: -7.252220630645752
    4. ',x' → logprob: -8.252220153808594
    5. '],' → logprob: -9.377220153808594
    6. '[' → logprob: -10.002220153808594
    7. '   ' → logprob: -10.127220153808594
    8. 'x' → logprob: -10.377220153808594
    9. ',
' → logprob: -10.377220153808594
    10. ',C' → logprob: -10.627220153808594

Token 630: ' sorted' (ID: 20099)
  Prédit: 'sorted'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sorted' → logprob: -0.0001732663222355768
    2. '   ' → logprob: -9.375173568725586
    3. ' sorted' → logprob: -10.125173568725586
    4. 'zip' → logprob: -10.125173568725586
    5. 'enumer' → logprob: -12.125173568725586
    6. 'filter' → logprob: -14.125173568725586
    7. '(sorted' → logprob: -14.125173568725586
    8. '
' → logprob: -15.250173568725586
    9. 'sort' → logprob: -15.625173568725586
    10. ' ' → logprob: -15.625173568725586

Token 631: '(zip' (ID: 87520)
  Prédit: '(zip'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(zip' → logprob: -0.0021745278500020504
    2. '(
' → logprob: -6.752174377441406
    3. '(' → logprob: -7.002174377441406
    4. '(en' → logprob: -9.502174377441406
    5. 'zip' → logprob: -12.002174377441406
    6. '((' → logprob: -12.377174377441406
    7. '(map' → logprob: -12.752174377441406
    8. '(

' → logprob: -13.002174377441406
    9. '(list' → logprob: -14.127174377441406
    10. '(sorted' → logprob: -14.127174377441406

Token 632: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.0005457649822346866
    2. 'A' → logprob: -8.000545501708984
    3. '(' → logprob: -9.250545501708984
    4. '(
' → logprob: -9.375545501708984
    5. '   ' → logprob: -11.125545501708984
    6. '(sorted' → logprob: -12.375545501708984
    7. ' (' → logprob: -12.500545501708984
    8. '((' → logprob: -13.000545501708984
    9. ' A' → logprob: -13.750545501708984
    10. '(range' → logprob: -14.250545501708984

Token 633: ',' (ID: 11)
  Prédit: '(A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.5970973372459412
    2. ',' → logprob: -1.222097396850586
    3. ',A' → logprob: -2.347097396850586
    4. '(sorted' → logprob: -3.347097396850586
    5. '2' → logprob: -4.597097396850586
    6. 'A' → logprob: -4.972097396850586
    7. 'sorted' → logprob: -5.472097396850586
    8. '(C' → logprob: -7.347097396850586
    9. '(' → logprob: -7.847097396850586
    10. ' ,' → logprob: -7.847097396850586

Token 634: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.05527208000421524
    2. ' B' → logprob: -2.930272102355957
    3. 'enumer' → logprob: -8.805272102355957
    4. 'range' → logprob: -9.305272102355957
    5. 'C' → logprob: -10.055272102355957
    6. ' range' → logprob: -10.680272102355957
    7. '   ' → logprob: -11.180272102355957
    8. ' enumerate' → logprob: -11.430272102355957
    9. ' ' → logprob: -11.492772102355957
    10. 'b' → logprob: -11.805272102355957

Token 635: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.08808515220880508
    2. '),' → logprob: -2.838085174560547
    3. ')))' → logprob: -4.088085174560547
    4. '2' → logprob: -5.213085174560547
    5. '))' → logprob: -6.338085174560547
    6. ')' → logprob: -7.463085174560547
    7. ',' → logprob: -7.838085174560547
    8. '))))' → logprob: -8.588085174560547
    9. ')))
' → logprob: -9.213085174560547
    10. 'sorted' → logprob: -9.463085174560547

Token 636: '))))

' (ID: 161772)
  Prédit: '))))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))))' → logprob: -0.6574099063873291
    2. ')))' → logprob: -0.9074099063873291
    3. '),' → logprob: -2.657409906387329
    4. '))' → logprob: -5.28240966796875
    5. ')' → logprob: -6.03240966796875
    6. '))))

' → logprob: -8.40740966796875
    7. '))))
' → logprob: -8.65740966796875
    8. ')));' → logprob: -9.65740966796875
    9. ')))),' → logprob: -10.53240966796875
    10. '   ' → logprob: -10.53240966796875

Token 637: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009268763475120068
    2. ')' → logprob: -5.259268760681152
    3. 'for' → logprob: -6.759268760681152
    4. '<|end|>' → logprob: -7.009268760681152
    5. '    
' → logprob: -7.134268760681152
    6. 'if' → logprob: -7.509268760681152
    7. '
' → logprob: -8.259268760681152
    8. ' for' → logprob: -9.509268760681152
    9. '#' → logprob: -10.259268760681152
    10. ')
' → logprob: -10.509268760681152

Token 638: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014944192953407764
    2. 'for' → logprob: -5.139944076538086
    3. ')' → logprob: -5.639944076538086
    4. 'if' → logprob: -6.514944076538086
    5. 'i' → logprob: -7.014944076538086
    6. '    
' → logprob: -7.139944076538086
    7. '
' → logprob: -7.514944076538086
    8. ' for' → logprob: -7.514944076538086
    9. '#' (adapté à ' #') → logprob: -7.764944076538086
    10. 'def' → logprob: -9.264944076538086

Token 639: ' Vér' (ID: 159169)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.7641152739524841
    2. 'for' → logprob: -1.014115333557129
    3. 'count' → logprob: -3.639115333557129
    4. 'used' → logprob: -4.264115333557129
    5. 'seen' → logprob: -4.264115333557129
    6. 'cycle' → logprob: -4.514115333557129
    7. 'pos' → logprob: -4.764115333557129
    8. 'max' → logprob: -5.014115333557129
    9. 'cnt' → logprob: -5.014115333557129
    10. '#' → logprob: -5.139115333557129

Token 640: 'ification' (ID: 3166)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.1686280369758606
    2. 'ification' → logprob: -1.9186279773712158
    3. 'ifie' → logprob: -5.418628215789795
    4. '   ' → logprob: -6.543628215789795
    5. 'ifiez' → logprob: -7.668628215789795
    6. 'ifications' → logprob: -7.918628215789795
    7. 'ify' → logprob: -8.293627738952637
    8. '#' → logprob: -8.543627738952637
    9. ' if' → logprob: -8.668627738952637
    10. '```' → logprob: -8.668627738952637

Token 641: ' cycl' (ID: 27789)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007403241936117411
    2. ' de' → logprob: -6.257403373718262
    3. ' for' → logprob: -6.507403373718262
    4. 'cycl' → logprob: -6.632403373718262
    5. 'de' → logprob: -7.632403373718262
    6. 'for' → logprob: -7.882403373718262
    7. ' des' → logprob: -8.007403373718262
    8. ' cycl' → logprob: -8.132403373718262
    9. ' =' → logprob: -8.507403373718262
    10. ' i' → logprob: -8.632403373718262

Token 642: 'ique' (ID: 2222)
  Prédit: 'ique'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ique' → logprob: -0.00011355629976605996
    2. 'que' → logprob: -9.750113487243652
    3. '[' → logprob: -11.125113487243652
    4. 'iqu' → logprob: -11.500113487243652
    5. 'e' → logprob: -12.125113487243652
    6. '#' → logprob: -12.125113487243652
    7. '```' → logprob: -12.125113487243652
    8. 'lique' → logprob: -12.875113487243652
    9. 'iq' → logprob: -13.375113487243652
    10. '       ' → logprob: -13.500113487243652

Token 643: ' pour' (ID: 1930)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.432328462600708
    2. '   ' → logprob: -1.807328462600708
    3. 'for' → logprob: -2.307328462600708
    4. '
' → logprob: -2.932328462600708
    5. ' i' → logprob: -4.557328224182129
    6. ':' → logprob: -4.932328224182129
    7. 'i' → logprob: -6.057328224182129
    8. ' cycle' → logprob: -6.057328224182129
    9. ' idx' → logprob: -6.182328224182129
    10. 'idx' → logprob: -6.432328224182129

Token 644: ' détect' (ID: 118715)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.38693466782569885
    2. 'i' → logprob: -1.1369346380233765
    3. '(i' → logprob: -10.761934280395508
    4. ' ' → logprob: -11.011934280395508
    5. '	i' → logprob: -12.136934280395508
    6. ' ' → logprob: -12.886934280395508
    7. 'all' → logprob: -13.011934280395508
    8. ' all' → logprob: -13.011934280395508
    9. '(' → logprob: -13.136934280395508
    10. ' cycle' → logprob: -13.386934280395508

Token 645: 'er' (ID: 259)
  Prédit: 'er'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -5.085517113911919e-05
    2. 'e' → logprob: -10.12505054473877
    3. '   ' → logprob: -12.50005054473877
    4. 'ter' → logprob: -13.12505054473877
    5. 'ect' → logprob: -14.12505054473877
    6. '#' → logprob: -14.12505054473877
    7. 'ate' → logprob: -14.87505054473877
    8. '```' → logprob: -14.87505054473877
    9. 'érer' → logprob: -15.12505054473877
    10. '1' → logprob: -15.62505054473877

Token 646: ' une' (ID: 2463)
  Prédit: ' un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.21077938377857208
    2. ' une' → logprob: -2.0857794284820557
    3. ' des' → logprob: -3.8357794284820557
    4. 'un' → logprob: -4.460779190063477
    5. 'une' → logprob: -4.460779190063477
    6. ' la' → logprob: -5.335779190063477
    7. ' si' → logprob: -5.835779190063477
    8. ' les' → logprob: -6.335779190063477
    9. ' toute' → logprob: -6.335779190063477
    10. ' l' → logprob: -6.585779190063477

Token 647: ' évent' (ID: 80346)
  Prédit: 'rotation'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'rotation' → logprob: -0.404879093170166
    2. ' rotation' → logprob: -1.279879093170166
    3. 'in' → logprob: -5.029879093170166
    4. 'cycle' → logprob: -5.029879093170166
    5. 'position' → logprob: -5.404879093170166
    6. 'd' → logprob: -5.404879093170166
    7. 'dé' → logprob: -5.404879093170166
    8. 's' → logprob: -5.904879093170166
    9. 'possible' → logprob: -6.029879093170166
    10. ' permutation' → logprob: -6.154879093170166

Token 648: 'uelle' (ID: 18079)
  Prédit: 'ation'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ation' → logprob: -0.6235509514808655
    2. 'ence' → logprob: -1.3735508918762207
    3. 'ée' → logprob: -1.8735508918762207
    4. 'er' → logprob: -3.1235508918762207
    5. 'uelle' → logprob: -4.873550891876221
    6. 'é' → logprob: -7.123550891876221
    7. 'e' → logprob: -7.123550891876221
    8. 'ement' → logprob: -7.623550891876221
    9. 'ération' → logprob: -7.623550891876221
    10. 'ment' → logprob: -7.998550891876221

Token 649: ' permutation' (ID: 135200)
  Prédit: ' rotation'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' rotation' → logprob: -0.73246830701828
    2. 'rotation' → logprob: -0.73246830701828
    3. ' permutation' → logprob: -4.607468128204346
    4. 'in' → logprob: -5.607468128204346
    5. 'dé' → logprob: -5.857468128204346
    6. 'per' → logprob: -6.107468128204346
    7. ' boucle' → logprob: -6.357468128204346
    8. 'd' → logprob: -6.482468128204346
    9. ' inversion' → logprob: -6.607468128204346
    10. 's' → logprob: -6.982468128204346

Token 650: ' circul' (ID: 20568)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.9538853168487549
    2. 'for' → logprob: -1.3288853168487549
    3. '   ' → logprob: -1.5788853168487549
    4. 'possible' → logprob: -2.828885316848755
    5. ' possible' → logprob: -3.578885316848755
    6. ' i' → logprob: -3.953885316848755
    7. 'i' → logprob: -4.078885078430176
    8. 'valid' → logprob: -6.078885078430176
    9. '
' → logprob: -6.203885078430176
    10. ':
' → logprob: -6.328885078430176

Token 651: 'aire' (ID: 8189)
  Prédit: 'aire'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aire' → logprob: -0.0011298557510599494
    2. 'ière' → logprob: -7.126129627227783
    3. '
' → logprob: -9.626130104064941
    4. '```' → logprob: -10.126130104064941
    5. 'ère' → logprob: -10.376130104064941
    6. '#' → logprob: -10.376130104064941
    7. 'ire' → logprob: -10.876130104064941
    8. '   ' → logprob: -11.126130104064941
    9. 'iaire' → logprob: -11.126130104064941
    10. 'ulaire' → logprob: -11.376130104064941

Token 652: ' satisf' (ID: 8824)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4183315634727478
    2. 'for' → logprob: -1.6683316230773926
    3. ' for' → logprob: -2.2933316230773926
    4. ':
' → logprob: -3.2933316230773926
    5. ':' → logprob: -4.793331623077393
    6. '
' → logprob: -5.918331623077393
    7. 'def' → logprob: -6.793331623077393
    8. 'i' → logprob: -7.543331623077393
    9. ' ' → logprob: -7.668331623077393
    10. ' i' → logprob: -7.918331623077393

Token 653: 'ais' (ID: 1873)
  Prédit: 'ais'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ais' → logprob: -0.0014391618315130472
    2. 'aise' → logprob: -7.251439094543457
    3. 'a' → logprob: -8.251439094543457
    4. 'aiste' → logprob: -9.751439094543457
    5. 'aites' → logprob: -9.876439094543457
    6. 'aire' → logprob: -9.876439094543457
    7. 'ainte' → logprob: -10.501439094543457
    8. '```' → logprob: -10.501439094543457
    9. '   ' → logprob: -11.001439094543457
    10. '[' → logprob: -11.126439094543457

Token 654: 'ante' (ID: 2116)
  Prédit: 'ante'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ante' → logprob: -0.10290130227804184
    2. 'ant' → logprob: -2.6029012203216553
    3. 's' → logprob: -4.852901458740234
    4. 'ais' → logprob: -4.852901458740234
    5. 'able' → logprob: -5.852901458740234
    6. 'a' → logprob: -6.602901458740234
    7. 'ainte' → logprob: -6.852901458740234
    8. 'f' → logprob: -7.852901458740234
    9. 'aise' → logprob: -7.852901458740234
    10. 'e' → logprob: -8.102901458740234

Token 655: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7561751008033752
    2. ' for' → logprob: -1.2561750411987305
    3. '
' → logprob: -2.0061750411987305
    4. 'for' → logprob: -2.2561750411987305
    5. ' i' → logprob: -6.1311750411987305
    6. 'i' → logprob: -6.1311750411987305
    7. '    
' → logprob: -7.8811750411987305
    8. ':' → logprob: -8.13117504119873
    9. ':
' → logprob: -8.13117504119873
    10. 'idx' → logprob: -9.13117504119873

Token 656: '   ' (ID: 271)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.43472450971603394
    2. 'for' → logprob: -1.4347245693206787
    3. '   ' → logprob: -2.1847245693206787
    4. '
' → logprob: -7.8097243309021
    5. ' i' → logprob: -7.8097243309021
    6. 'i' → logprob: -8.559724807739258
    7. 'visited' → logprob: -9.684724807739258
    8. 'def' → logprob: -9.934724807739258
    9. 'possible' → logprob: -9.934724807739258
    10. ' possible' → logprob: -9.934724807739258

Token 657: ' p' (ID: 275)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.2572779953479767
    2. 'for' → logprob: -1.5072779655456543
    3. '   ' → logprob: -5.882277965545654
    4. 'N' → logprob: -7.507277965545654
    5. 'i' → logprob: -7.632277965545654
    6. ' i' → logprob: -7.882277965545654
    7. 'n' → logprob: -8.257278442382812
    8. ' n' → logprob: -9.007278442382812
    9. 'offset' → logprob: -9.132278442382812
    10. 'shift' → logprob: -9.257278442382812

Token 658: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3286667466163635
    2. '=' → logprob: -1.5786666870117188
    3. 'r' → logprob: -3.2036666870117188
    4. 'er' → logprob: -4.953666687011719
    5. 'for' → logprob: -4.953666687011719
    6. 'os' → logprob: -5.203666687011719
    7. 'erm' → logprob: -5.453666687011719
    8. '_' → logprob: -5.953666687011719
    9. 'ermut' → logprob: -7.078666687011719
    10. 'i' → logprob: -7.203666687011719

Token 659: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.038075465708971024
    2. '[' → logprob: -3.4130754470825195
    3. 'list' → logprob: -6.6630754470825195
    4. '[N' → logprob: -6.7880754470825195
    5. '[-' → logprob: -7.4130754470825195
    6. '[C' → logprob: -7.9130754470825195
    7. '1' → logprob: -8.28807544708252
    8. '-' → logprob: -8.41307544708252
    9. 'C' → logprob: -9.16307544708252
    10. '[]
' → logprob: -9.28807544708252

Token 660: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.04549063742160797
    2. '[' → logprob: -3.5454907417297363
    3. 'list' → logprob: -4.420490741729736
    4. '[N' → logprob: -6.670490741729736
    5. '1' → logprob: -6.920490741729736
    6. '[-' → logprob: -7.795490741729736
    7. 'len' → logprob: -8.545490264892578
    8. 'N' → logprob: -8.670490264892578
    9. '[(' → logprob: -9.420490264892578
    10. '-' → logprob: -9.420490264892578

Token 661: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6128706932067871
    2. 'while' → logprob: -0.9878706932067871
    3. 'for' → logprob: -2.612870693206787
    4. '<|end|>' → logprob: -4.612870693206787
    5. ' while' → logprob: -6.487870693206787
    6. '   ' → logprob: -7.487870693206787
    7. ' for' → logprob: -8.112871170043945
    8. '<|end|>' → logprob: -9.362871170043945
    9. 'N' → logprob: -10.487871170043945
    10. '	while' → logprob: -10.987871170043945

Token 662: '   ' (ID: 271)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.8692322969436646
    2. '
' → logprob: -0.9942322969436646
    3. 'for' → logprob: -1.6192322969436646
    4. '<|end|>' → logprob: -4.744232177734375
    5. ' while' → logprob: -6.119232177734375
    6. '   ' → logprob: -7.119232177734375
    7. ' for' → logprob: -7.244232177734375
    8. '<|end|>' → logprob: -9.619232177734375
    9. 'if' → logprob: -9.744232177734375
    10. '    
' → logprob: -10.994232177734375

Token 663: ' for' (ID: 395)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.39494529366493225
    2. 'for' (adapté à ' for') → logprob: -1.1449452638626099
    3. '
' → logprob: -5.01994514465332
    4. ' while' → logprob: -7.14494514465332
    5. ' for' → logprob: -7.89494514465332
    6. 'N' → logprob: -8.51994514465332
    7. 'i' → logprob: -10.39494514465332
    8. 'n' → logprob: -11.26994514465332
    9. 'if' → logprob: -11.76994514465332
    10. 's' → logprob: -12.14494514465332

Token 664: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.01635410450398922
    2. ' i' → logprob: -4.141354084014893
    3. 'p' → logprob: -8.51635456085205
    4. 'j' → logprob: -10.39135456085205
    5. '_' → logprob: -10.64135456085205
    6. '_i' → logprob: -11.14135456085205
    7. 'k' → logprob: -11.26635456085205
    8. ' p' → logprob: -12.01635456085205
    9. 's' → logprob: -12.01635456085205
    10. '	i' → logprob: -12.39135456085205

Token 665: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.043019168078899384
    2. 'in' → logprob: -3.1680190563201904
    3. ' ' → logprob: -12.04301929473877
    4. 'range' → logprob: -12.29301929473877
    5. '	in' → logprob: -13.16801929473877
    6. '<|end|>' → logprob: -13.54301929473877
    7. ',' → logprob: -13.91801929473877
    8. '   ' → logprob: -14.04301929473877
    9. '  ' → logprob: -14.29301929473877
    10. ' range' → logprob: -14.29301929473877

Token 666: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.20142124593257904
    2. ' range' → logprob: -1.7014212608337402
    3. '(range' → logprob: -12.451420783996582
    4. 'in' → logprob: -13.451420783996582
    5. ' ' → logprob: -13.826420783996582
    6. ' in' → logprob: -14.576420783996582
    7. '   ' → logprob: -14.701420783996582
    8. '	range' → logprob: -15.076420783996582
    9. '  ' → logprob: -16.0764217376709
    10. '```' → logprob: -16.2014217376709

Token 667: '(N' (ID: 10564)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5781327486038208
    2. '(N' → logprob: -0.8281327486038208
    3. 'N' → logprob: -6.328132629394531
    4. '1' → logprob: -8.078132629394531
    5. ' (' → logprob: -10.328132629394531
    6. '(n' → logprob: -10.828132629394531
    7. '(len' → logprob: -11.203132629394531
    8. ' N' → logprob: -11.703132629394531
    9. '   ' → logprob: -11.953132629394531
    10. ' ' → logprob: -12.203132629394531

Token 668: '-' (ID: 12)
  Prédit: '):
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.07992415875196457
    2. '):' → logprob: -2.5799241065979004
    3. '   ' → logprob: -7.3299241065979
    4. '+' → logprob: -8.579924583435059
    5. ')' → logprob: -9.829924583435059
    6. ',' → logprob: -10.079924583435059
    7. '):
' → logprob: -10.204924583435059
    8. '-' → logprob: -10.454924583435059
    9. '       ' → logprob: -11.954924583435059
    10. '):

' → logprob: -12.204924583435059

Token 669: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -6.217951886355877e-05
    2. '   ' → logprob: -10.125061988830566
    3. ' ' → logprob: -11.500061988830566
    4. '0' → logprob: -12.625061988830566
    5. '2' → logprob: -13.000061988830566
    6. '-' → logprob: -13.375061988830566
    7. 'p' → logprob: -13.625061988830566
    8. '```' → logprob: -13.625061988830566
    9. 'N' → logprob: -14.125061988830566
    10. '
' → logprob: -14.875061988830566

Token 670: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.416029691696167
    2. '):
' → logprob: -1.291029691696167
    3. '):' → logprob: -2.791029691696167
    4. ')' → logprob: -6.791029930114746
    5. '+' → logprob: -7.166029930114746
    6. ' ,' → logprob: -7.166029930114746
    7. '   ' → logprob: -7.541029930114746
    8. '):
' → logprob: -8.916029930114746
    9. ' ' → logprob: -9.166029930114746
    10. ',-' → logprob: -9.416029930114746

Token 671: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.06359505653381348
    2. '   ' → logprob: -2.9385950565338135
    3. ' if' → logprob: -5.063594818115234
    4. 'if' → logprob: -7.063594818115234
    5. '<|end|>' → logprob: -7.813594818115234
    6. ':
' → logprob: -8.063594818115234
    7. '
' → logprob: -8.438594818115234
    8. '    ' → logprob: -9.438594818115234
    9. ':' → logprob: -9.563594818115234
    10. '```' → logprob: -9.688594818115234

Token 672: ' p' (ID: 275)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.6953527331352234
    2. ' if' → logprob: -0.6953527331352234
    3. '       ' → logprob: -6.195352554321289
    4. '   ' → logprob: -8.945352554321289
    5. '	if' → logprob: -10.820352554321289
    6. '           ' → logprob: -11.945352554321289
    7. ' ' → logprob: -13.070352554321289
    8. '
' → logprob: -13.195352554321289
    9. ' p' → logprob: -14.695352554321289
    10. ',' → logprob: -14.820352554321289

Token 673: ' =' (ID: 314)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.3731110692024231
    2. ' +=' → logprob: -1.2481110095977783
    3. ' =' → logprob: -4.123111248016357
    4. '=' → logprob: -5.373111248016357
    5. '-=' → logprob: -6.873111248016357
    6. '+=(' → logprob: -7.248111248016357
    7. ' |=' → logprob: -7.498111248016357
    8. ' ^=' → logprob: -7.748111248016357
    9. ' -=' → logprob: -7.748111248016357
    10. '|' → logprob: -8.8731107711792

Token 674: ' C' (ID: 363)
  Prédit: '(C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(C' → logprob: -0.5567334294319153
    2. '(p' → logprob: -1.3067333698272705
    3. 'max' → logprob: -2.9317333698272705
    4. 'C' → logprob: -3.1817333698272705
    5. '(max' → logprob: -3.5567333698272705
    6. 'p' → logprob: -3.8067333698272705
    7. '(B' → logprob: -5.80673360824585
    8. '(i' → logprob: -5.80673360824585
    9. ' (' → logprob: -6.68173360824585
    10. '(A' → logprob: -7.30673360824585

Token 675: '[p' (ID: 23234)
  Prédit: '[C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[C' → logprob: -0.6920182704925537
    2. '[p' → logprob: -0.9420182704925537
    3. '[(' → logprob: -2.3170182704925537
    4. 'p' → logprob: -4.942018508911133
    5. 'C' → logprob: -6.442018508911133
    6. '[' → logprob: -7.067018508911133
    7. '(C' → logprob: -7.192018508911133
    8. '[i' → logprob: -8.442018508911133
    9. '.index' → logprob: -8.692018508911133
    10. '(p' → logprob: -9.067018508911133

Token 676: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.016447456553578377
    2. ']+' → logprob: -4.8914475440979
    3. '+' → logprob: -5.2664475440979
    4. ')]' → logprob: -6.2664475440979
    5. '])' → logprob: -7.1414475440979
    6. ')' → logprob: -8.141447067260742
    7. ' +' → logprob: -8.391447067260742
    8. ' ]' → logprob: -8.891447067260742
    9. ']
' → logprob: -9.266447067260742
    10. '+]' → logprob: -9.391447067260742

Token 677: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 678: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.01313870307058096
    2. ' if' → logprob: -4.388138771057129
    3. '       ' → logprob: -7.888138771057129
    4. '<|end|>' → logprob: -9.013138771057129
    5. 'print' → logprob: -9.513138771057129
    6. '   ' → logprob: -10.388138771057129
    7. ')' → logprob: -11.763138771057129
    8. '```' → logprob: -12.388138771057129
    9. '
' → logprob: -12.513138771057129
    10. 'If' → logprob: -12.763138771057129

Token 679: ' p' (ID: 275)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.2873058021068573
    2. 'A' → logprob: -1.9123058319091797
    3. 'C' → logprob: -2.5373058319091797
    4. ' p' → logprob: -4.16230583190918
    5. ' A' → logprob: -5.53730583190918
    6. ' C' → logprob: -6.03730583190918
    7. 'B' → logprob: -7.66230583190918
    8. '   ' → logprob: -8.03730583190918
    9. 'i' → logprob: -9.16230583190918
    10. ' ' → logprob: -10.53730583190918

Token 680: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.6260395050048828
    2. ' <=' → logprob: -1.2510395050048828
    3. '==' → logprob: -2.376039505004883
    4. ' >=' → logprob: -3.126039505004883
    5. '<=' → logprob: -3.626039505004883
    6. ' >' → logprob: -4.751039505004883
    7. '>=' → logprob: -5.501039505004883
    8. '>' → logprob: -6.626039505004883
    9. ' !=' → logprob: -6.876039505004883
    10. ' <' → logprob: -8.001039505004883

Token 681: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.000387535837944597
    2. 'N' → logprob: -8.125387191772461
    3. ' ' → logprob: -10.250387191772461
    4. 'C' → logprob: -10.625387191772461
    5. 'p' → logprob: -11.125387191772461
    6. 'i' → logprob: -11.250387191772461
    7. '(N' → logprob: -13.500387191772461
    8. '   ' → logprob: -14.125387191772461
    9. '1' → logprob: -14.750387191772461
    10. ' N' → logprob: -15.625387191772461

Token 682: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00010545044642640278
    2. 'N' → logprob: -9.625105857849121
    3. ' ' → logprob: -11.125105857849121
    4. 'C' → logprob: -11.250105857849121
    5. 'p' → logprob: -11.500105857849121
    6. 'i' → logprob: -14.375105857849121
    7. '   ' → logprob: -15.500105857849121
    8. '(N' → logprob: -15.625105857849121
    9. '1' → logprob: -16.125104904174805
    10. '  ' → logprob: -16.625104904174805

Token 683: ':
' (ID: 734)
  Prédit: ':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':
' → logprob: -0.5686275959014893
    2. ':' → logprob: -1.1936275959014893
    3. '           ' → logprob: -2.0686275959014893
    4. '       ' → logprob: -6.31862735748291
    5. ' or' → logprob: -6.69362735748291
    6. ' and' → logprob: -6.94362735748291
    7. ':return' → logprob: -9.44362735748291
    8. '          ' → logprob: -10.31862735748291
    9. '   ' → logprob: -10.44362735748291
    10. ' :
' → logprob: -11.31862735748291

Token 684: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -8.959636033978313e-05
    2. '
' → logprob: -9.875089645385742
    3. '            
' → logprob: -11.250089645385742
    4. '       ' → logprob: -11.625089645385742
    5. '               ' → logprob: -11.875089645385742
    6. '   ' → logprob: -13.625089645385742
    7. '		' → logprob: -13.750089645385742
    8. '\n' → logprob: -13.875089645385742
    9. '        
' → logprob: -13.875089645385742
    10. '          ' → logprob: -14.000089645385742

Token 685: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.3458670973777771
    2. '           ' → logprob: -1.3458671569824219
    3. '       ' → logprob: -3.595867156982422
    4. ' print' → logprob: -5.970867156982422
    5. 'break' → logprob: -6.970867156982422
    6. '   ' → logprob: -7.470867156982422
    7. '               ' → logprob: -7.720867156982422
    8. '	print' → logprob: -10.095867156982422
    9. ' break' → logprob: -10.470867156982422
    10. '
' → logprob: -10.720867156982422

Token 686: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.0012292771134525537
    2. '(' → logprob: -6.751229286193848
    3. '("' → logprob: -9.751229286193848
    4. '(
' → logprob: -14.751229286193848
    5. ''' → logprob: -16.00122833251953
    6. '(True' → logprob: -16.50122833251953
    7. '('\' → logprob: -16.62622833251953
    8. ' ('' → logprob: -16.75122833251953
    9. '   ' → logprob: -17.50122833251953
    10. '(',' → logprob: -17.75122833251953

Token 687: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.0020704446360468864
    2. ''' → logprob: -6.502070426940918
    3. 'No' → logprob: -7.502070426940918
    4. ' Yes' → logprob: -11.877070426940918
    5. 'YES' → logprob: -12.752070426940918
    6. '   ' → logprob: -12.752070426940918
    7. '"' → logprob: -13.627070426940918
    8. '('' → logprob: -14.377070426940918
    9. '
' → logprob: -15.377070426940918
    10. 'yes' → logprob: -16.252071380615234

Token 688: '')
' (ID: 2515)
  Prédit: '')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')
' → logprob: -0.41743722558021545
    2. '           ' → logprob: -1.167437195777893
    3. '')' → logprob: -3.5424373149871826
    4. ')
' → logprob: -7.7924370765686035
    5. '               ' → logprob: -7.9174370765686035
    6. '')
' → logprob: -8.917437553405762
    7. '       ' → logprob: -9.167437553405762
    8. ')' → logprob: -9.542437553405762
    9. '")
' → logprob: -11.042437553405762
    10. '   ' → logprob: -11.667437553405762

Token 689: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -8.268254896393046e-05
    2. '               ' → logprob: -10.000082969665527
    3. '<|end|>' → logprob: -11.000082969665527
    4. '       ' → logprob: -12.125082969665527
    5. '
' → logprob: -12.250082969665527
    6. '		' → logprob: -12.375082969665527
    7. '            
' → logprob: -13.375082969665527
    8. '	       ' → logprob: -13.750082969665527
    9. '                   ' → logprob: -14.250082969665527
    10. '   ' → logprob: -14.500082969665527

Token 690: ' return' (ID: 622)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0047977338545024395
    2. '
' → logprob: -5.87979793548584
    3. 'return' (adapté à ' return') → logprob: -6.25479793548584
    4. ' return' → logprob: -10.50479793548584
    5. '               ' → logprob: -10.62979793548584
    6. '		' → logprob: -12.00479793548584
    7. '
' → logprob: -12.50479793548584
    8. '       ' → logprob: -12.62979793548584
    9. '            
' → logprob: -13.75479793548584
    10. '   ' → logprob: -14.00479793548584

Token 691: '

' (ID: 279)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0008311899146065116
    2. 'print' → logprob: -7.125831127166748
    3. '    
' → logprob: -11.500831604003906
    4. '<|end|>' → logprob: -11.875831604003906
    5. '
' → logprob: -12.500831604003906
    6. '```' → logprob: -13.000831604003906
    7. ' print' → logprob: -14.125831604003906
    8. '	print' → logprob: -14.250831604003906
    9. '       ' → logprob: -14.250831604003906
    10. '#' → logprob: -14.250831604003906

Token 692: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006736215204000473
    2. 'print' → logprob: -5.0067362785339355
    3. '    
' → logprob: -11.756735801696777
    4. '```' → logprob: -12.506735801696777
    5. ' print' → logprob: -12.881735801696777
    6. '
' → logprob: -13.131735801696777
    7. '<|end|>' → logprob: -13.131735801696777
    8. '	print' → logprob: -13.256735801696777
    9. '       ' → logprob: -14.631735801696777
    10. '  
' → logprob: -15.881735801696777

Token 693: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0009527906076982617
    2. '   ' → logprob: -7.00095272064209
    3. '```' → logprob: -10.62595272064209
    4. ' print' → logprob: -11.00095272064209
    5. '	print' → logprob: -15.25095272064209
    6. '``' → logprob: -16.875953674316406
    7. '#print' → logprob: -18.125953674316406
    8. 'Print' → logprob: -18.125953674316406
    9. '#' (adapté à ' #') → logprob: -19.125953674316406
    10. '    
' → logprob: -19.125953674316406

Token 694: ' Si' (ID: 7832)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.3856492842023727e-06
    2. '   ' → logprob: -13.750000953674316
    3. ' print' → logprob: -15.500000953674316
    4. '	print' → logprob: -20.750001907348633
    5. 'Print' → logprob: -20.875001907348633
    6. '```' → logprob: -21.000001907348633
    7. '
' → logprob: -21.750001907348633
    8. '#' → logprob: -22.375001907348633
    9. '#print' → logprob: -23.250001907348633
    10. '  ' → logprob: -23.375001907348633

Token 695: ' aucune' (ID: 51173)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.317926824092865
    2. 'False' → logprob: -2.0679268836975098
    3. ' True' → logprob: -2.1929268836975098
    4. 'print' → logprob: -3.9429268836975098
    5. '   ' → logprob: -4.81792688369751
    6. 'No' → logprob: -5.69292688369751
    7. 'p' → logprob: -6.81792688369751
    8. ' False' → logprob: -6.81792688369751
    9. '
' → logprob: -7.81792688369751
    10. ' p' → logprob: -8.317926406860352

Token 696: ' des' (ID: 731)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.13453468680381775
    2. '   ' → logprob: -2.7595345973968506
    3. '('' → logprob: -2.8845345973968506
    4. ' print' → logprob: -6.00953483581543
    5. 'Yes' → logprob: -6.63453483581543
    6. 'No' → logprob: -7.13453483581543
    7. '```' → logprob: -7.88453483581543
    8. '       ' → logprob: -8.25953483581543
    9. 'def' → logprob: -8.50953483581543
    10. '
' → logprob: -8.50953483581543

Token 697: ' conditions' (ID: 6409)
  Prédit: 'conditions'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'conditions' → logprob: -0.003037489717826247
    2. 'cond' → logprob: -6.503037452697754
    3. ' conditions' → logprob: -7.378037452697754
    4. '   ' → logprob: -7.503037452697754
    5. 'v' → logprob: -8.878037452697754
    6. 'condition' → logprob: -9.503037452697754
    7. ' ' → logprob: -10.253037452697754
    8. 'tests' → logprob: -10.378037452697754
    9. '
' → logprob: -10.628037452697754
    10. '       ' → logprob: -12.253037452697754

Token 698: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.18033018708229065
    2. '   ' → logprob: -2.305330276489258
    3. ' n' → logprob: -2.805330276489258
    4. 'print' → logprob: -5.430330276489258
    5. 'ne' → logprob: -9.055330276489258
    6. '#' → logprob: -9.680330276489258
    7. '       ' → logprob: -10.055330276489258
    8. 'est' → logprob: -10.305330276489258
    9. '```' → logprob: -10.680330276489258
    10. 'n't' → logprob: -10.805330276489258

Token 699: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.10620661079883575
    2. ''a' → logprob: -3.3562066555023193
    3. 'a' → logprob: -3.7312066555023193
    4. 'print' → logprob: -3.7312066555023193
    5. 'est' → logprob: -5.10620641708374
    6. 'n' → logprob: -5.35620641708374
    7. ''' → logprob: -6.23120641708374
    8. ''arrive' → logprob: -7.10620641708374
    9. '   ' → logprob: -7.23120641708374
    10. ''ont' → logprob: -7.48120641708374

Token 700: ' rempl' (ID: 66326)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.06440048664808273
    2. 'pass' → logprob: -3.6894004344940186
    3. 'pas' → logprob: -4.189400672912598
    4. 'atte' → logprob: -4.439400672912598
    5. 'fr' → logprob: -6.189400672912598
    6. 'v' → logprob: -6.439400672912598
    7. 'valid' → logprob: -6.564400672912598
    8. 'meet' → logprob: -6.814400672912598
    9. 'print' → logprob: -7.189400672912598
    10. 'ré' → logprob: -7.439400672912598

Token 701: 'ie' (ID: 396)
  Prédit: 'ie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ie' → logprob: -0.002568164374679327
    2. 'a' → logprob: -7.377568244934082
    3. 'iev' → logprob: -7.627568244934082
    4. 'i' → logprob: -8.002568244934082
    5. 'ace' → logprob: -8.502568244934082
    6. 'ait' → logprob: -8.627568244934082
    7. '   ' → logprob: -9.252568244934082
    8. 'ite' → logprob: -9.752568244934082
    9. 'aie' → logprob: -9.752568244934082
    10. 'à' → logprob: -9.877568244934082

Token 702: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.000779965310357511
    2. 'print' → logprob: -7.25078010559082
    3. '
' → logprob: -9.75078010559082
    4. ' print' → logprob: -12.25078010559082
    5. '    
' → logprob: -12.75078010559082
    6. ',' → logprob: -13.00078010559082
    7. '```' → logprob: -13.87578010559082
    8. '       ' → logprob: -14.50078010559082
    9. '	print' → logprob: -16.12578010559082
    10. '        
' → logprob: -17.37578010559082

Token 703: ' on' (ID: 402)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0036430724430829287
    2. '   ' → logprob: -6.003643035888672
    3. ' print' → logprob: -6.753643035888672
    4. '	print' → logprob: -16.378643035888672
    5. '```' → logprob: -17.378643035888672
    6. '       ' → logprob: -18.253643035888672
    7. ' ' → logprob: -18.253643035888672
    8. '  ' → logprob: -18.503643035888672
    9. '           ' → logprob: -20.753643035888672
    10. '    ' → logprob: -21.128643035888672

Token 704: ' affiche' (ID: 127479)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.001516173011623323
    2. '   ' → logprob: -6.626516342163086
    3. ' print' → logprob: -8.626516342163086
    4. '```' → logprob: -11.751516342163086
    5. '  ' → logprob: -14.501516342163086
    6. ' ' → logprob: -14.501516342163086
    7. '
' → logprob: -14.751516342163086
    8. '	print' → logprob: -14.751516342163086
    9. 'pr' → logprob: -15.501516342163086
    10. '.print' → logprob: -15.626516342163086

Token 705: ' '' (ID: 461)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '('' → logprob: -0.001086043776012957
    2. ''' → logprob: -7.251086235046387
    3. 'No' → logprob: -8.001086235046387
    4. '(No' → logprob: -11.126086235046387
    5. '("' → logprob: -11.376086235046387
    6. '(' → logprob: -11.501086235046387
    7. '"No' → logprob: -12.876086235046387
    8. '   ' → logprob: -13.751086235046387
    9. '@No' → logprob: -15.251086235046387
    10. '_No' → logprob: -15.751086235046387

Token 706: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -1.5048530030981055e-06
    2. ''' → logprob: -13.500001907348633
    3. ' No' → logprob: -18.625001907348633
    4. '   ' → logprob: -20.875001907348633
    5. 'Yes' → logprob: -21.375001907348633
    6. '```' → logprob: -22.250001907348633
    7. 'Non' → logprob: -22.500001907348633
    8. '"No' → logprob: -22.750001907348633
    9. '('' → logprob: -22.875001907348633
    10. '_No' → logprob: -22.875001907348633

Token 707: ''
' (ID: 2207)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '')' → logprob: -0.12994560599327087
    2. '   ' → logprob: -2.3799455165863037
    3. '')
' → logprob: -4.129945755004883
    4. ')' → logprob: -4.754945755004883
    5. ''' → logprob: -5.879945755004883
    6. '('' → logprob: -6.754945755004883
    7. '()' → logprob: -8.254945755004883
    8. '.' → logprob: -9.379945755004883
    9. 'print' → logprob: -9.379945755004883
    10. ')
' → logprob: -9.379945755004883

Token 708: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.005242771934717894
    2. 'print' → logprob: -5.255242824554443
    3. '```' → logprob: -11.880242347717285
    4. ' print' → logprob: -13.380242347717285
    5. '	print' → logprob: -14.755242347717285
    6. '    
' → logprob: -16.6302433013916
    7. '       ' → logprob: -17.2552433013916
    8. '``' → logprob: -19.1302433013916
    9. '   ' → logprob: -19.1302433013916
    10. '
' → logprob: -19.6302433013916

Token 709: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.038046542555093765
    2. '   ' → logprob: -3.2880465984344482
    3. ' print' → logprob: -12.538046836853027
    4. '```' → logprob: -13.538046836853027
    5. '	print' → logprob: -15.538046836853027
    6. '.print' → logprob: -20.53804588317871
    7. '       ' → logprob: -20.53804588317871
    8. '    
' → logprob: -21.16304588317871
    9. 'Print' → logprob: -21.16304588317871
    10. '``' → logprob: -21.41304588317871

Token 710: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -6.392202976712724e-06
    2. '(' → logprob: -12.000006675720215
    3. ' ('' → logprob: -16.2500057220459
    4. '("' → logprob: -17.0000057220459
    5. '(('' → logprob: -19.1250057220459
    6. ''' → logprob: -19.8750057220459
    7. '(\'' → logprob: -20.3750057220459
    8. '()' → logprob: -20.5000057220459
    9. '   ' → logprob: -20.8750057220459
    10. '(
' → logprob: -21.0000057220459

Token 711: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -5.860340752406046e-05
    2. ''' → logprob: -9.7500581741333
    3. '')' → logprob: -15.3750581741333
    4. ' No' → logprob: -18.125059127807617
    5. '('' → logprob: -18.250059127807617
    6. '(No' → logprob: -20.500059127807617
    7. '"No' → logprob: -20.500059127807617
    8. '''' → logprob: -20.875059127807617
    9. 'Yes' → logprob: -21.000059127807617
    10. '\'' → logprob: -21.125059127807617

Token 712: '')


' (ID: 45781)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '')' → logprob: -0.16044001281261444
    2. ')' → logprob: -1.9104399681091309
    3. '()' → logprob: -8.660440444946289
    4. '")' → logprob: -10.660440444946289
    5. '')
' → logprob: -12.160440444946289
    6. '())' → logprob: -12.160440444946289
    7. '```' → logprob: -12.285440444946289
    8. '`)' → logprob: -13.910440444946289
    9. ''' → logprob: -14.160440444946289
    10. ')
' → logprob: -14.285440444946289

Token 713: 'if' (ID: 366)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 714: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.05200060084462166
    2. '__' → logprob: -3.0520005226135254
    3. ' ' → logprob: -5.802000522613525
    4. '_name' → logprob: -8.802000999450684
    5. 'name' → logprob: -9.427000999450684
    6. '  ' → logprob: -10.052000999450684
    7. 'Name' → logprob: -10.427000999450684
    8. ' ' → logprob: -10.552000999450684
    9. '_' → logprob: -10.802000999450684
    10. ' ' → logprob: -11.177000999450684

Token 715: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.007013140711933374
    2. ' ==' → logprob: -5.632013320922852
    3. ' __' → logprob: -6.132013320922852
    4. '==' → logprob: -7.257013320922852
    5. 'name' → logprob: -7.882013320922852
    6. '_name' → logprob: -9.632013320922852
    7. '_' → logprob: -11.257013320922852
    8. '__.__' → logprob: -11.632013320922852
    9. '=="' → logprob: -11.757013320922852
    10. '.__' → logprob: -12.007013320922852

Token 716: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -4.127333340875339e-06
    2. '__('' → logprob: -13.375003814697266
    3. '==' → logprob: -13.625003814697266
    4. '__.__' → logprob: -13.750003814697266
    5. '___' → logprob: -16.250003814697266
    6. '____' → logprob: -16.500003814697266
    7. '__("' → logprob: -18.125003814697266
    8. '__.' → logprob: -18.125003814697266
    9. '=='' → logprob: -18.750003814697266
    10. '__,' → logprob: -19.000003814697266

Token 717: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.030518407002091408
    2. '==' → logprob: -3.6555182933807373
    3. ' ==' → logprob: -5.655518531799316
    4. '=='' → logprob: -7.905518531799316
    5. '=="' → logprob: -8.030518531799316
    6. '__.__' → logprob: -12.030518531799316
    7. '__('' → logprob: -12.155518531799316
    8. '===' → logprob: -14.030518531799316
    9. '___' → logprob: -14.155518531799316
    10. '=' → logprob: -14.405518531799316

Token 718: ' '__' (ID: 28278)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.4742158353328705
    2. ''' → logprob: -0.9742158651351929
    3. '__' → logprob: -9.224215507507324
    4. ' "__' → logprob: -10.474215507507324
    5. ' '__' → logprob: -11.474215507507324
    6. '"name' → logprob: -14.724215507507324
    7. ''name' → logprob: -14.974215507507324
    8. '('__' → logprob: -15.099215507507324
    9. '"user' → logprob: -16.22421646118164
    10. '("__' → logprob: -16.34921646118164

Token 719: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -6.217951886355877e-05
    2. 'name' → logprob: -10.000061988830566
    3. '__' → logprob: -11.000061988830566
    4. 'm' → logprob: -17.875062942504883
    5. ' main' → logprob: -18.250062942504883
    6. '_main' → logprob: -19.000062942504883
    7. '(main' → logprob: -19.750062942504883
    8. ''' → logprob: -19.875062942504883
    9. '	main' → logprob: -20.500062942504883
    10. '"' → logprob: -20.875062942504883

Token 720: '__':
' (ID: 39314)
  Prédit: '__':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__':
' → logprob: -0.0024794621858745813
    2. '__' → logprob: -6.002479553222656
    3. '__":
' → logprob: -12.502479553222656
    4. '__:' → logprob: -17.002479553222656
    5. '_' → logprob: -17.252479553222656
    6. '___' → logprob: -20.002479553222656
    7. '__
' → logprob: -20.002479553222656
    8. '__('' → logprob: -20.002479553222656
    9. '__.' → logprob: -20.377479553222656
    10. '':
' → logprob: -20.502479553222656

Token 721: '   ' (ID: 271)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.004075789824128151
    2. '   ' → logprob: -6.12907600402832
    3. ' main' → logprob: -6.50407600402832
    4. '	main' → logprob: -7.87907600402832
    5. '    
' → logprob: -12.00407600402832
    6. '_main' → logprob: -12.25407600402832
    7. '(main' → logprob: -14.25407600402832
    8. '  ' → logprob: -14.87907600402832
    9. '```' → logprob: -15.37907600402832
    10. '
' → logprob: -15.37907600402832

Token 722: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' (adapté à ' main') → logprob: 0.0
    2. ' main' → logprob: -17.25
    3. '	main' → logprob: -22.375
    4. '_main' → logprob: -25.5
    5. '.main' → logprob: -26.625
    6. '   ' → logprob: -27.0
    7. '(main' → logprob: -27.375
    8. 'Main' → logprob: -27.375
    9. '```' → logprob: -29.0
    10. 'mainwindow' → logprob: -29.25

Token 723: '()' (ID: 416)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 721
Tokens correctement prédits (1ère position, stricte): 239
Tokens correctement prédits (1ère position, avec adaptation): 253
Tokens correctement prédits (top 10): 486
Précision stricte (1ère position): 33.15%
Précision adaptée (1ère position): 35.09%
Précision (top 10): 67.41%
================================================================================
