================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:16:42
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
size_value, weight_value = map(int, input().split())
if size_value <= weight_value:
    print('unsafe')
else:
    print('safe')
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'size' (ID: 4461)
  → Token d'amorce (pas de prédiction)

Token 1: '_value' (ID: 6734)
  → Token d'amorce (pas de prédiction)

Token 2: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 3: ' weight' (ID: 6049)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3967302441596985
    2. '_' → logprob: -1.5217301845550537
    3. ')' → logprob: -3.5217301845550537
    4. ' =' → logprob: -3.6467301845550537
    5. ' ' → logprob: -4.521730422973633
    6. '```' → logprob: -4.771730422973633
    7. ',' → logprob: -4.896730422973633
    8. ''' → logprob: -5.271730422973633
    9. '_size' → logprob: -5.771730422973633
    10. ''s' → logprob: -6.271730422973633

Token 4: '_value' (ID: 6734)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5978023409843445
    2. '=' → logprob: -0.8478023409843445
    3. '_' → logprob: -4.34780216217041
    4. ' =' → logprob: -5.22280216217041
    5. ')' → logprob: -6.34780216217041
    6. '.' → logprob: -7.59780216217041
    7. '```' → logprob: -8.22280216217041
    8. '[' → logprob: -8.34780216217041
    9. '_,' → logprob: -9.22280216217041
    10. ':' → logprob: -9.22280216217041

Token 5: ' =' (ID: 314)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5317857265472412
    2. '=' → logprob: -1.1567857265472412
    3. '_' → logprob: -2.406785726547241
    4. '```' → logprob: -5.53178596496582
    5. ' =' → logprob: -6.03178596496582
    6. ')' → logprob: -7.40678596496582
    7. '_,' → logprob: -7.78178596496582
    8. '.' → logprob: -9.65678596496582
    9. '_=' → logprob: -10.03178596496582
    10. '[' → logprob: -10.40678596496582

Token 6: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.7809895277023315
    2. ' input' → logprob: -2.155989646911621
    3. ' ' → logprob: -2.530989646911621
    4. 'input' → logprob: -2.655989646911621
    5. ' None' → logprob: -2.780989646911621
    6. '0' → logprob: -2.780989646911621
    7. 'map' → logprob: -3.030989646911621
    8. ' size' → logprob: -3.655989646911621
    9. 'size' → logprob: -3.905989646911621
    10. ' [' → logprob: -4.280989646911621

Token 7: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.42107388377189636
    2. '(lambda' → logprob: -1.1710739135742188
    3. '(int' → logprob: -4.171073913574219
    4. '(str' → logprob: -5.046073913574219
    5. '```' → logprob: -5.296073913574219
    6. '<|end|>' → logprob: -6.671073913574219
    7. ')' → logprob: -7.671073913574219
    8. '[' → logprob: -7.796073913574219
    9. ' (' → logprob: -7.921073913574219
    10. '[int' → logprob: -8.046073913574219

Token 8: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.11821208149194717
    2. '(user' → logprob: -2.7432119846343994
    3. '(' → logprob: -3.3682119846343994
    4. ')' → logprob: -4.7432122230529785
    5. '('' → logprob: -6.9932122230529785
    6. '(size' → logprob: -6.9932122230529785
    7. '(value' → logprob: -7.6182122230529785
    8. '(raw' → logprob: -7.9932122230529785
    9. '(range' → logprob: -8.24321174621582
    10. '(data' → logprob: -8.49321174621582

Token 9: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.16078528761863708
    2. ' input' → logprob: -1.9107853174209595
    3. 'size' → logprob: -8.410785675048828
    4. ')' → logprob: -8.535785675048828
    5. '(input' → logprob: -9.785785675048828
    6. ' size' → logprob: -9.785785675048828
    7. '```' → logprob: -12.535785675048828
    8. 'data' → logprob: -13.035785675048828
    9. 'range' → logprob: -13.160785675048828
    10. 'value' → logprob: -13.160785675048828

Token 10: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.5456043481826782
    2. '())' → logprob: -1.0456043481826782
    3. '().' → logprob: -2.7956042289733887
    4. '(' → logprob: -6.295604228973389
    5. '()`' → logprob: -6.795604228973389
    6. ')' → logprob: -6.920604228973389
    7. '`()' → logprob: -6.920604228973389
    8. '(()' → logprob: -7.170604228973389
    9. '();)' → logprob: -7.920604228973389
    10. '());' → logprob: -8.045604705810547

Token 11: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00012999906903132796
    2. 'strip' → logprob: -9.000129699707031
    3. ' split' → logprob: -12.500129699707031
    4. 'rstrip' → logprob: -12.875129699707031
    5. 'spl' → logprob: -15.625129699707031
    6. '(split' → logprob: -15.875129699707031
    7. '```' → logprob: -18.37512969970703
    8. 'replace' → logprob: -18.50012969970703
    9. 'read' → logprob: -18.87512969970703
    10. 's' → logprob: -19.62512969970703

Token 12: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.028826210647821426
    2. ')' → logprob: -4.0288262367248535
    3. '()))' → logprob: -5.1538262367248535
    4. '))' → logprob: -5.6538262367248535
    5. '()' → logprob: -6.7788262367248535
    6. '(' → logprob: -8.903825759887695
    7. ' ())' → logprob: -10.778825759887695
    8. '`)' → logprob: -11.778825759887695
    9. '('' → logprob: -11.903825759887695
    10. '`()' → logprob: -12.528825759887695

Token 13: 'if' (ID: 366)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.7034080624580383
    2. 'if' → logprob: -1.8284080028533936
    3. '#' → logprob: -2.0784080028533936
    4. ',' → logprob: -2.7034080028533936
    5. '*' → logprob: -2.8284080028533936
    6. 'print' → logprob: -4.078408241271973
    7. '.' → logprob: -4.453408241271973
    8. '
' → logprob: -4.453408241271973
    9. ')' → logprob: -4.703408241271973
    10. '+
' → logprob: -4.828408241271973

Token 14: ' size' (ID: 2349)
  Prédit: ' size'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' size' → logprob: -0.007169266697019339
    2. 'size' → logprob: -5.507169246673584
    3. ' weight' → logprob: -5.882169246673584
    4. ' ' → logprob: -8.882169723510742
    5. ' not' → logprob: -9.507169723510742
    6. ' len' → logprob: -10.257169723510742
    7. 'weight' → logprob: -10.382169723510742
    8. '(size' → logprob: -12.257169723510742
    9. '_size' → logprob: -13.132169723510742
    10. '  ' → logprob: -13.632169723510742

Token 15: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.31675150990486145
    2. '_' → logprob: -1.566751480102539
    3. ' _' → logprob: -3.691751480102539
    4. ' ' → logprob: -4.566751480102539
    5. ' ==' → logprob: -4.691751480102539
    6. '>' → logprob: -5.691751480102539
    7. '[' → logprob: -6.066751480102539
    8. '  ' → logprob: -6.441751480102539
    9. ' <=' → logprob: -6.441751480102539
    10. ' >' → logprob: -6.566751480102539

Token 16: ' <=' (ID: 5017)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.050384704023599625
    2. ' >=' → logprob: -3.925384759902954
    3. ' ==' → logprob: -4.425384521484375
    4. '>' → logprob: -4.800384521484375
    5. ' <' → logprob: -5.425384521484375
    6. ' <=' → logprob: -5.925384521484375
    7. ' ' → logprob: -6.550384521484375
    8. '  ' → logprob: -8.675384521484375
    9. '==' → logprob: -8.800384521484375
    10. ' !=' → logprob: -9.175384521484375

Token 17: ' weight' (ID: 6049)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.07433637231588364
    2. '10' → logprob: -2.824336290359497
    3. '5' → logprob: -5.699336528778076
    4. '20' → logprob: -6.199336528778076
    5. '100' → logprob: -6.324336528778076
    6. '0' → logprob: -6.574336528778076
    7. '50' → logprob: -6.699336528778076
    8. '1' → logprob: -7.699336528778076
    9. '3' → logprob: -7.949336528778076
    10. '2' → logprob: -8.574336051940918

Token 18: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.00293360254727304
    2. ':' → logprob: -6.502933502197266
    3. '_' → logprob: -7.377933502197266
    4. ''_' → logprob: -8.377933502197266
    5. '```' → logprob: -8.752933502197266
    6. '"_' → logprob: -9.377933502197266
    7. '_threshold' → logprob: -9.502933502197266
    8. ' _' → logprob: -9.877933502197266
    9. ' `_' → logprob: -10.877933502197266
    10. ')_' → logprob: -11.377933502197266

Token 19: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -7.481510692741722e-05
    2. ' :' → logprob: -9.62507438659668
    3. ':
' → logprob: -12.75007438659668
    4. ':**' → logprob: -12.75007438659668
    5. '):' → logprob: -14.50007438659668
    6. ' and' → logprob: -14.62507438659668
    7. '>' → logprob: -15.37507438659668
    8. '':' → logprob: -15.37507438659668
    9. '':'' → logprob: -15.50007438659668
    10. ',' → logprob: -15.50007438659668

Token 20: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10968460887670517
    2. ':' → logprob: -3.359684705734253
    3. 'print' → logprob: -3.484684705734253
    4. ' print' → logprob: -3.609684705734253
    5. '    ' → logprob: -5.484684467315674
    6. '\n' → logprob: -6.734684467315674
    7. ' ' → logprob: -6.859684467315674
    8. ' size' → logprob: -6.859684467315674
    9. '    
' → logprob: -7.609684467315674
    10. '       ' → logprob: -7.984684467315674

Token 21: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.04047054052352905
    2. 'print' (adapté à ' print') → logprob: -3.415470600128174
    3. '   ' → logprob: -5.040470600128174
    4. ' pass' → logprob: -8.790470123291016
    5. ' size' → logprob: -9.790470123291016
    6. '    ' → logprob: -9.790470123291016
    7. '```' → logprob: -11.290470123291016
    8. ' ' → logprob: -11.790470123291016
    9. ' result' → logprob: -12.040470123291016
    10. '       ' → logprob: -12.415470123291016

Token 22: '('' (ID: 706)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.013326935470104218
    2. '("' → logprob: -5.138327121734619
    3. '("("' → logprob: -5.763327121734619
    4. '('' → logprob: -5.888327121734619
    5. '(True' → logprob: -7.388327121734619
    6. '(size' → logprob: -7.513327121734619
    7. '()' → logprob: -9.763326644897461
    8. '(False' → logprob: -9.763326644897461
    9. '(max' → logprob: -10.138326644897461
    10. '((' → logprob: -10.763326644897461

Token 23: 'unsafe' (ID: 66907)
  Prédit: 'Yes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -1.1388359069824219
    2. 'OK' → logprob: -1.3888359069824219
    3. 'Accepted' → logprob: -2.513835906982422
    4. 'YES' → logprob: -2.763835906982422
    5. 'Safe' → logprob: -3.263835906982422
    6. 'Size' → logprob: -3.388835906982422
    7. 'Good' → logprob: -4.013835906982422
    8. 'Valid' → logprob: -4.388835906982422
    9. 'Possible' → logprob: -4.513835906982422
    10. 'Ok' → logprob: -4.638835906982422

Token 24: '')
' (ID: 2515)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.0005371859879232943
    2. ')' → logprob: -7.625537395477295
    3. ''' → logprob: -10.625536918640137
    4. '")' → logprob: -11.000536918640137
    5. '')
' → logprob: -12.500536918640137
    6. '!' → logprob: -13.875536918640137
    7. ' ')' → logprob: -14.000536918640137
    8. '')
' → logprob: -14.375536918640137
    9. '',' → logprob: -14.500536918640137
    10. '('' → logprob: -14.500536918640137

Token 25: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.20081083476543427
    2. ' else' → logprob: -1.8258107900619507
    3. '<|end|>' → logprob: -4.07581090927124
    4. 'elif' → logprob: -6.32581090927124
    5. ')' → logprob: -7.07581090927124
    6. '```' → logprob: -7.57581090927124
    7. '<|end|>' → logprob: -8.075810432434082
    8. '	else' → logprob: -9.200810432434082
    9. ' elif' → logprob: -9.700810432434082
    10. '_else' → logprob: -9.950810432434082

Token 26: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -3.368984107510187e-05
    2. ':
' → logprob: -10.375033378601074
    3. '   ' → logprob: -13.500033378601074
    4. ' :' → logprob: -14.625033378601074
    5. '):' → logprob: -16.37503433227539
    6. ',' → logprob: -16.50003433227539
    7. '```' → logprob: -16.50003433227539
    8. ':**' → logprob: -16.62503433227539
    9. ':return' → logprob: -16.75003433227539
    10. ':def' → logprob: -17.12503433227539

Token 27: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007842259481549263
    2. '    ' → logprob: -5.882842063903809
    3. ' print' → logprob: -6.132842063903809
    4. 'print' → logprob: -6.507842063903809
    5. '       ' → logprob: -7.382842063903809
    6. '```' → logprob: -8.257842063903809
    7. '<|end|>' → logprob: -9.382842063903809
    8. '    
' → logprob: -9.382842063903809
    9. ' ' → logprob: -9.632842063903809
    10. '\n' → logprob: -9.757842063903809

Token 28: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.5133342742919922
    2. 'print' (adapté à ' print') → logprob: -1.0133342742919922
    3. '   ' → logprob: -3.263334274291992
    4. '```' → logprob: -9.388334274291992
    5. '    ' → logprob: -9.888334274291992
    6. '       ' → logprob: -10.138334274291992
    7. '	print' → logprob: -10.513334274291992
    8. ' ' → logprob: -11.888334274291992
    9. ' safe' → logprob: -12.263334274291992
    10. '\n' → logprob: -12.763334274291992

Token 29: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.1002415120601654
    2. '(' → logprob: -2.3502414226531982
    3. '('(' → logprob: -10.600241661071777
    4. '("' → logprob: -11.975241661071777
    5. '(('' → logprob: -13.975241661071777
    6. '("("' → logprob: -14.100241661071777
    7. '()' → logprob: -14.225241661071777
    8. '(True' → logprob: -15.350241661071777
    9. '(\'' → logprob: -15.475241661071777
    10. '(False' → logprob: -15.475241661071777

Token 30: 'safe' (ID: 46891)
  Prédit: ''s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''s' → logprob: -0.006896882317960262
    2. 'safe' → logprob: -5.00689697265625
    3. ''' → logprob: -8.88189697265625
    4. ' safe' → logprob: -11.13189697265625
    5. '   ' → logprob: -11.25689697265625
    6. ''ok' → logprob: -12.63189697265625
    7. 's' → logprob: -12.88189697265625
    8. 'Safe' → logprob: -12.88189697265625
    9. ' '' → logprob: -13.38189697265625
    10. '"' → logprob: -14.63189697265625

Token 31: '')' (ID: 1542)
  Prédit: '')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -8.578184497309849e-05
    2. ')' → logprob: -9.375085830688477
    3. '')
' → logprob: -14.750085830688477
    4. ''' → logprob: -15.250085830688477
    5. '")' → logprob: -15.250085830688477
    6. '('' → logprob: -17.500085830688477
    7. '!' → logprob: -18.250085830688477
    8. '')
' → logprob: -18.875085830688477
    9. '')

' → logprob: -19.125085830688477
    10. ' ')' → logprob: -19.375085830688477


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 29
Tokens correctement prédits (1ère position, stricte): 12
Tokens correctement prédits (1ère position, avec adaptation): 12
Tokens correctement prédits (top 10): 23
Précision stricte (1ère position): 41.38%
Précision adaptée (1ère position): 41.38%
Précision (top 10): 79.31%
================================================================================
