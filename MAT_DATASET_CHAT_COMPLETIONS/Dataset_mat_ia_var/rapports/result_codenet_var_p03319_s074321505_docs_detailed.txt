================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:15:29
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def calculate_minimum_steps(N, K):
    """
    Calcule le nombre minimum d'étapes nécessaires pour parcourir une suite de N éléments
    en avançant jusqu'à K éléments par étape, sauf pour la première position.
    
    Args:
        N (int): Le nombre total d'éléments/allers à parcourir.
        K (int): Le nombre maximum d'éléments parcourus en une étape (au-delà du premier).
    
    Returns:
        int: Le nombre minimal d'étapes nécessaires pour parcourir tous les éléments.
    """
    # Le déplacement commence à la première position, puis avance de (K-1) pas à chaque étape.
    # On calcule le nombre d'avancées nécessaires pour couvrir les (N-1) positions restantes.
    ans = (N - 1) // (K - 1)  # Division entière pour le nombre minimal d'étapes complètes
    if (N - 1) % (K - 1) != 0:
        # Si division non exacte, il reste des positions à couvrir, donc une étape supplémentaire
        ans += 1
    return ans

# Lecture des entrées utilisateur
N, K = map(int, input().split())
a = input()  # Lecture de la chaîne d'entrée, inutilisée dans le calcul (peut être une liste d'éléments)

# Calcul et affichage du résultat
print(calculate_minimum_steps(N, K))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' calculate' (ID: 17950)
  → Token d'amorce (pas de prédiction)

Token 2: '_min' (ID: 15950)
  → Token d'amorce (pas de prédiction)

Token 3: 'imum' (ID: 4556)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0013378625735640526
    2. 'imum' → logprob: -7.001338005065918
    3. '```' → logprob: -9.376338005065918
    4. '_distance' → logprob: -9.501338005065918
    5. '_val' → logprob: -10.251338005065918
    6. '_ut' → logprob: -10.376338005065918
    7. ' _' → logprob: -10.876338005065918
    8. '_uc' → logprob: -11.251338005065918
    9. '__' → logprob: -11.376338005065918
    10. '_im' → logprob: -11.376338005065918

Token 4: '_steps' (ID: 52120)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0008539431728422642
    2. '```' → logprob: -7.750854015350342
    3. '_distance' → logprob: -10.125853538513184
    4. '_:' → logprob: -10.125853538513184
    5. '_price' → logprob: -10.375853538513184
    6. '_cost' → logprob: -10.375853538513184
    7. '_value' → logprob: -10.625853538513184
    8. '_s' → logprob: -10.875853538513184
    9. '_amount' → logprob: -11.000853538513184
    10. '_max' → logprob: -11.250853538513184

Token 5: '(N' (ID: 10564)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.23547089099884033
    2. '_' → logprob: -1.6104708909988403
    3. '_:' → logprob: -5.610470771789551
    4. '(_:' → logprob: -6.235470771789551
    5. '```' → logprob: -6.735470771789551
    6. '():' → logprob: -6.985470771789551
    7. '(_' → logprob: -7.235470771789551
    8. '_to' → logprob: -7.485470771789551
    9. ':' → logprob: -8.86047077178955
    10. '(:' → logprob: -8.86047077178955

Token 6: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.018050551414489746
    2. ')' → logprob: -4.143050670623779
    3. ',' → logprob: -6.518050670623779
    4. ':' → logprob: -7.768050670623779
    5. '```' → logprob: -10.643050193786621
    6. '*' → logprob: -11.143050193786621
    7. '_' → logprob: -11.268050193786621
    8. '):
' → logprob: -11.643050193786621
    9. '+' → logprob: -11.643050193786621
    10. ')>' → logprob: -12.143050193786621

Token 7: ' K' (ID: 658)
  Prédit: ' M'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' M' → logprob: -0.8464363813400269
    2. ' steps' → logprob: -1.7214363813400269
    3. ' x' → logprob: -2.7214365005493164
    4. 'steps' → logprob: -2.9714365005493164
    5. ' K' → logprob: -3.0964365005493164
    6. ' step' → logprob: -3.3464365005493164
    7. ' current' → logprob: -3.4714365005493164
    8. ' )' → logprob: -3.8464365005493164
    9. 'M' → logprob: -4.096436500549316
    10. ' array' → logprob: -4.596436500549316

Token 8: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0013732073130086064
    2. ':' → logprob: -7.001373291015625
    3. ')' → logprob: -7.876373291015625
    4. '```' → logprob: -10.626373291015625
    5. ''):' → logprob: -10.876373291015625
    6. ',' → logprob: -11.001373291015625
    7. '):
' → logprob: -12.251373291015625
    8. '`:' → logprob: -12.751373291015625
    9. '**' → logprob: -13.126373291015625
    10. '   ' → logprob: -13.376373291015625

Token 9: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.013007269240915775
    2. '   ' → logprob: -5.263007164001465
    3. '```' → logprob: -5.888007164001465
    4. ':
' → logprob: -6.013007164001465
    5. '():' → logprob: -6.638007164001465
    6. '':' → logprob: -8.263007164001465
    7. '":' → logprob: -9.013007164001465
    8. '    
' → logprob: -9.013007164001465
    9. '):' → logprob: -9.138007164001465
    10. '\' → logprob: -9.388007164001465

Token 10: ' """
' (ID: 7037)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '```' → logprob: -0.7949629426002502
    2. '   ' → logprob: -1.1699628829956055
    3. '`' → logprob: -2.6699628829956055
    4. ' 
' → logprob: -3.2949628829956055
    5. '
' → logprob: -3.7949628829956055
    6. '    
' → logprob: -4.1699628829956055
    7. ' ' → logprob: -4.2949628829956055
    8. '\' → logprob: -4.4199628829956055
    9. '``' → logprob: -4.5449628829956055
    10. '\n' → logprob: -4.5449628829956055

Token 11: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.6679455041885376
    2. '"""' → logprob: -1.4179455041885376
    3. '   ' → logprob: -2.542945384979248
    4. 'Calculate' → logprob: -3.042945384979248
    5. '"""
' → logprob: -3.167945384979248
    6. ''''' → logprob: -4.792945384979248
    7. ' """' → logprob: -4.792945384979248
    8. ' """
' → logprob: -4.792945384979248
    9. ' ' → logprob: -5.042945384979248
    10. ' Calculate' → logprob: -5.417945384979248

Token 12: ' Cal' (ID: 4453)
  Prédit: 'Calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Calculate' → logprob: -0.09958887100219727
    2. 'Calcul' → logprob: -2.5995888710021973
    3. '"""' → logprob: -4.974588871002197
    4. '"""
' → logprob: -5.599588871002197
    5. 'Returns' → logprob: -5.849588871002197
    6. 'Return' → logprob: -5.974588871002197
    7. 'Find' → logprob: -6.349588871002197
    8. '   ' → logprob: -7.349588871002197
    9. ' Calculate' → logprob: -7.974588871002197
    10. 'Given' → logprob: -8.099588394165039

Token 13: 'cule' (ID: 45017)
  Prédit: 'culate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'culate' → logprob: -0.2266773283481598
    2. 'c' → logprob: -1.6016772985458374
    3. 'l' → logprob: -7.476677417755127
    4. 'cul' → logprob: -7.976677417755127
    5. '```' → logprob: -9.476676940917969
    6. 'cula' → logprob: -9.851676940917969
    7. '   ' → logprob: -9.976676940917969
    8. 'cu' → logprob: -10.101676940917969
    9. ' ' → logprob: -10.726676940917969
    10. ' c' → logprob: -10.976676940917969

Token 14: ' le' (ID: 505)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.007154588121920824
    2. 'te' → logprob: -5.63215446472168
    3. 's' → logprob: -6.50715446472168
    4. 't' → logprob: -7.13215446472168
    5. 'rate' → logprob: -7.38215446472168
    6. 'm' → logprob: -9.38215446472168
    7. 'late' → logprob: -9.50715446472168
    8. 'brate' → logprob: -9.63215446472168
    9. '   ' → logprob: -9.75715446472168
    10. 'ate' → logprob: -10.00715446472168

Token 15: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.015309108421206474
    2. 's' → logprob: -4.7653093338012695
    3. '   ' → logprob: -6.0153093338012695
    4. 'nombre' → logprob: -6.3903093338012695
    5. ' ' → logprob: -6.5153093338012695
    6. '  ' → logprob: -8.14030933380127
    7. ' nombres' → logprob: -8.39030933380127
    8. ' ' → logprob: -9.01530933380127
    9. ' minimum' → logprob: -9.01530933380127
    10. ' s' → logprob: -9.64030933380127

Token 16: ' minimum' (ID: 11085)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.47232770919799805
    2. ' ' → logprob: -1.222327709197998
    3. ' d' → logprob: -2.972327709197998
    4. '  ' → logprob: -4.222327709197998
    5. 's' → logprob: -4.972327709197998
    6. '_' → logprob: -5.847327709197998
    7. 'd' → logprob: -6.972327709197998
    8. 'space' → logprob: -7.472327709197998
    9. 'de' → logprob: -7.722327709197998
    10. '   ' → logprob: -7.722327709197998

Token 17: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.39041873812675476
    2. ' de' → logprob: -1.6404187679290771
    3. ' ' → logprob: -2.265418767929077
    4. '  ' → logprob: -4.515418529510498
    5. ' des' → logprob: -5.265418529510498
    6. 'd' → logprob: -5.640418529510498
    7. 's' → logprob: -6.515418529510498
    8. '```' → logprob: -6.640418529510498
    9. 'de' → logprob: -7.015418529510498
    10. '   ' → logprob: -7.515418529510498

Token 18: ''ét' (ID: 23771)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.2929964065551758
    2. ''' → logprob: -1.4179964065551758
    3. ''é' → logprob: -5.542996406555176
    4. ''e' → logprob: -6.167996406555176
    5. ''espace' → logprob: -6.167996406555176
    6. 'é' → logprob: -6.792996406555176
    7. '_' → logprob: -7.292996406555176
    8. ' e' → logprob: -7.792996406555176
    9. ''esp' → logprob: -8.042996406555176
    10. 'u' → logprob: -8.292996406555176

Token 19: 'apes' (ID: 11864)
  Prédit: 'apes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'apes' → logprob: -0.15433450043201447
    2. 'ape' → logprob: -2.904334545135498
    3. 'a' → logprob: -3.029334545135498
    4. 'e' → logprob: -3.779334545135498
    5. 'ap' → logprob: -4.154334545135498
    6. 'é' → logprob: -7.029334545135498
    7. 'ep' → logprob: -9.40433406829834
    8. 'o' → logprob: -9.90433406829834
    9. 'i' → logprob: -10.15433406829834
    10. 'aps' → logprob: -10.15433406829834

Token 20: ' nécessaires' (ID: 74402)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.06099197268486023
    2. '   ' → logprob: -3.6859920024871826
    3. ' nécessaires' → logprob: -3.9359920024871826
    4. ' pour' → logprob: -5.0609917640686035
    5. ' nécessaire' → logprob: -6.1859917640686035
    6. '  ' → logprob: -6.1859917640686035
    7. 's' → logprob: -6.6859917640686035
    8. ' necess' → logprob: -7.0609917640686035
    9. ' necessary' → logprob: -8.435992240905762
    10. ' ' → logprob: -8.685992240905762

Token 21: ' pour' (ID: 1930)
  Prédit: ' pour'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pour' → logprob: -0.7027860879898071
    2. '   ' → logprob: -0.8277860879898071
    3. ' ' → logprob: -3.5777859687805176
    4. 'pour' → logprob: -3.7027859687805176
    5. ' to' → logprob: -5.077785968780518
    6. ' à' → logprob: -5.952785968780518
    7. '  ' → logprob: -5.952785968780518
    8. '```' → logprob: -7.327785968780518
    9. ' for' → logprob: -7.827785968780518
    10. '    ' → logprob: -7.827785968780518

Token 22: ' parcour' (ID: 130642)
  Prédit: ' atteindre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' atteindre' → logprob: -0.13574166595935822
    2. ' réduire' → logprob: -3.135741710662842
    3. '   ' → logprob: -4.260741710662842
    4. ' parcour' → logprob: -4.385741710662842
    5. ' arriver' → logprob: -5.010741710662842
    6. ' rejoindre' → logprob: -5.260741710662842
    7. ' transformer' → logprob: -5.635741710662842
    8. 'ré' → logprob: -5.760741710662842
    9. ' résoudre' → logprob: -5.885741710662842
    10. 'atte' → logprob: -6.010741710662842

Token 23: 'ir' (ID: 380)
  Prédit: 'ir'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ir' → logprob: -5.9153885558771435e-06
    2. '_ir' → logprob: -12.750005722045898
    3. 'i' → logprob: -14.125005722045898
    4. '   ' → logprob: -14.375005722045898
    5. 'r' → logprob: -14.500005722045898
    6. '```' → logprob: -15.125005722045898
    7. '_' → logprob: -15.250005722045898
    8. '       ' → logprob: -15.625005722045898
    9. '__' → logprob: -16.2500057220459
    10. '               ' → logprob: -16.5000057220459

Token 24: ' une' (ID: 2463)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.26911216974258423
    2. ' un' → logprob: -1.7691121101379395
    3. ' l' → logprob: -3.2691121101379395
    4. ' le' → logprob: -4.8941121101379395
    5. ' la' → logprob: -5.3941121101379395
    6. ' a' → logprob: -5.5191121101379395
    7. ' une' → logprob: -5.8941121101379395
    8. 'l' → logprob: -6.3941121101379395
    9. '   ' → logprob: -6.6441121101379395
    10. '```' → logprob: -7.1441121101379395

Token 25: ' suite' (ID: 13800)
  Prédit: ' espace'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' espace' → logprob: -0.5639287233352661
    2. ' ' → logprob: -1.4389287233352661
    3. 'es' → logprob: -2.9389286041259766
    4. ' chemin' → logprob: -3.5639286041259766
    5. '_' → logprob: -4.438928604125977
    6. ' segment' → logprob: -4.688928604125977
    7. 's' → logprob: -4.938928604125977
    8. '   ' → logprob: -5.251428604125977
    9. ' chaîne' → logprob: -5.251428604125977
    10. ' distance' → logprob: -5.438928604125977

Token 26: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.49394097924232483
    2. ' ' → logprob: -1.7439409494400024
    3. ' d' → logprob: -2.618941068649292
    4. '   ' → logprob: -2.743941068649292
    5. 'e' → logprob: -4.368940830230713
    6. ' en' → logprob: -4.618940830230713
    7. '```' → logprob: -5.118940830230713
    8. '`' → logprob: -5.368940830230713
    9. ' e' → logprob: -5.493940830230713
    10. ' `' → logprob: -5.618940830230713

Token 27: ' N' (ID: 478)
  Prédit: ' N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.147596076130867
    2. ' espaces' → logprob: -3.0225961208343506
    3. ' ' → logprob: -3.8975961208343506
    4. ' K' → logprob: -4.1475958824157715
    5. ' pas' → logprob: -5.5225958824157715
    6. 's' → logprob: -5.6475958824157715
    7. ' nombres' → logprob: -5.7725958824157715
    8. ' points' → logprob: -6.0225958824157715
    9. ' positions' → logprob: -6.1475958824157715
    10. ' cases' → logprob: -6.1475958824157715

Token 28: ' éléments' (ID: 57375)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.26379159092903137
    2. '_' → logprob: -2.513791561126709
    3. ' espaces' → logprob: -3.013791561126709
    4. ' d' → logprob: -3.763791561126709
    5. ' de' → logprob: -4.013791561126709
    6. ' étapes' → logprob: -5.388791561126709
    7. '```' → logprob: -5.388791561126709
    8. ' éléments' → logprob: -5.513791561126709
    9. ' caractères' → logprob: -5.638791561126709
    10. '  ' → logprob: -5.763791561126709

Token 29: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2470654845237732
    2. '.' → logprob: -2.372065544128418
    3. ' en' → logprob: -3.247065544128418
    4. ',' → logprob: -3.872065544128418
    5. ':' → logprob: -3.997065544128418
    6. '
' → logprob: -4.872065544128418
    7. ' 
' → logprob: -5.247065544128418
    8. ' :' → logprob: -5.372065544128418
    9. '    
' → logprob: -5.497065544128418
    10. '```' → logprob: -5.622065544128418

Token 30: '   ' (ID: 271)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.9431108236312866
    2. '   ' → logprob: -1.1931108236312866
    3. ' en' → logprob: -2.068110942840576
    4. '.' → logprob: -2.693110942840576
    5. ':' → logprob: -3.443110942840576
    6. ' :' → logprob: -3.693110942840576
    7. ')' → logprob: -4.193110942840576
    8. ' ' → logprob: -4.318110942840576
    9. ' ,' → logprob: -5.443110942840576
    10. '```' → logprob: -5.693110942840576

Token 31: ' en' (ID: 469)
  Prédit: ' en'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.8728877902030945
    2. '   ' → logprob: -1.1228878498077393
    3. '.' → logprob: -1.8728878498077393
    4. ',' → logprob: -2.7478878498077393
    5. '"""' → logprob: -5.12288761138916
    6. ' de' → logprob: -5.62288761138916
    7. '\n' → logprob: -5.74788761138916
    8. '```' → logprob: -5.87288761138916
    9. '"""
' → logprob: -5.99788761138916
    10. ' avec' → logprob: -6.12288761138916

Token 32: ' avanç' (ID: 70203)
  Prédit: ' saut'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' saut' → logprob: -1.0317926406860352
    2. ' utilisant' → logprob: -1.1567926406860352
    3. ' faisant' → logprob: -1.9067926406860352
    4. 's' → logprob: -3.031792640686035
    5. ' effect' → logprob: -3.156792640686035
    6. ' avanç' → logprob: -3.531792640686035
    7. 'effect' → logprob: -5.156792640686035
    8. ' ' → logprob: -5.406792640686035
    9. ' réalis' → logprob: -5.406792640686035
    10. ' prenant' → logprob: -5.406792640686035

Token 33: 'ant' (ID: 493)
  Prédit: 'ant'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ant' → logprob: -0.0002646735229063779
    2. 'a' → logprob: -8.750265121459961
    3. '#' → logprob: -10.875265121459961
    4. '   ' → logprob: -11.125265121459961
    5. 'çant' → logprob: -11.250265121459961
    6. 'er' → logprob: -12.000265121459961
    7. 'e' → logprob: -12.250265121459961
    8. 'ç' → logprob: -12.500265121459961
    9. 'ent' → logprob: -12.500265121459961
    10. '_ant' → logprob: -12.500265121459961

Token 34: ' jusqu' (ID: 21961)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6675740480422974
    2. ' d' → logprob: -1.1675740480422974
    3. ' de' → logprob: -1.7925740480422974
    4. 's' → logprob: -5.917573928833008
    5. ' pas' → logprob: -6.542573928833008
    6. ' step' → logprob: -6.542573928833008
    7. ' au' → logprob: -7.417573928833008
    8. ' à' → logprob: -7.667573928833008
    9. ' soit' → logprob: -8.042573928833008
    10. 'd' → logprob: -8.167573928833008

Token 35: ''à' (ID: 33688)
  Prédit: ''à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''à' → logprob: -0.3412891924381256
    2. 'à' → logprob: -1.7162891626358032
    3. ' à' → logprob: -2.4662892818450928
    4. '’à' → logprob: -4.716289043426514
    5. 'au' → logprob: -4.966289043426514
    6. 'a' → logprob: -5.591289043426514
    7. ' ' → logprob: -6.091289043426514
    8. ''au' → logprob: -6.466289043426514
    9. '```' → logprob: -7.841289043426514
    10. '`' → logprob: -8.591289520263672

Token 36: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.25483039021492004
    2. 'K' → logprob: -1.5048303604125977
    3. 'de' → logprob: -7.129830360412598
    4. ' deux' → logprob: -7.129830360412598
    5. ' ' → logprob: -7.504830360412598
    6. 'k' → logprob: -9.254830360412598
    7. '2' → logprob: -9.254830360412598
    8. ' un' → logprob: -9.504830360412598
    9. ' ' → logprob: -9.504830360412598
    10. '1' → logprob: -10.004830360412598

Token 37: ' éléments' (ID: 57375)
  Prédit: ' pas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pas' → logprob: -0.7157028317451477
    2. '_' → logprob: -1.840702772140503
    3. 'élé' → logprob: -2.215702772140503
    4. ' éléments' → logprob: -3.090702772140503
    5. ' étapes' → logprob: -3.215702772140503
    6. ' ' → logprob: -3.965702772140503
    7. ' steps' → logprob: -4.215703010559082
    8. ' _' → logprob: -4.340703010559082
    9. 'pas' → logprob: -4.465703010559082
    10. ')' → logprob: -4.590703010559082

Token 38: ' par' (ID: 686)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -1.2327231168746948
    2. ' à' → logprob: -1.7327231168746948
    3. '.' → logprob: -2.1077232360839844
    4. ',' → logprob: -2.2327232360839844
    5. ' supplémentaires' → logprob: -2.8577232360839844
    6. ' ' → logprob: -2.9827232360839844
    7. ' au' → logprob: -3.3577232360839844
    8. ' par' → logprob: -3.6077232360839844
    9. '```' → logprob: -4.107723236083984
    10. ')' → logprob: -4.232723236083984

Token 39: ' étape' (ID: 83661)
  Prédit: 'pas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pas' → logprob: -0.8571301102638245
    2. 'fois' → logprob: -1.7321300506591797
    3. ' pas' → logprob: -2.1071300506591797
    4. ' ' → logprob: -2.3571300506591797
    5. ' étape' → logprob: -2.3571300506591797
    6. '  ' → logprob: -4.35713005065918
    7. 's' → logprob: -4.48213005065918
    8. ' fois' → logprob: -4.73213005065918
    9. 'step' → logprob: -4.73213005065918
    10. ' déplacement' → logprob: -5.23213005065918

Token 40: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18741315603256226
    2. '.' → logprob: -3.312413215637207
    3. '\n' → logprob: -3.437413215637207
    4. '"""
' → logprob: -3.437413215637207
    5. '"""' → logprob: -4.312413215637207
    6. ':' → logprob: -4.437413215637207
    7. '
' → logprob: -4.937413215637207
    8. '```' → logprob: -5.062413215637207
    9. ')' → logprob: -5.187413215637207
    10. '):' → logprob: -5.437413215637207

Token 41: ' sauf' (ID: 87919)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04489007964730263
    2. ' en' → logprob: -3.6698901653289795
    3. ' ' → logprob: -4.9198899269104
    4. ' 
' → logprob: -6.4198899269104
    5. ' et' → logprob: -6.6698899269104
    6. ' """
' → logprob: -6.7948899269104
    7. '    ' → logprob: -7.1698899269104
    8. '  ' → logprob: -7.4198899269104
    9. '```' → logprob: -7.4198899269104
    10. '\n' → logprob: -7.5448899269104

Token 42: ' pour' (ID: 1930)
  Prédit: ' si'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' si' → logprob: -0.8208415508270264
    2. ' pour' → logprob: -2.3208415508270264
    3. ' ' → logprob: -2.4458415508270264
    4. ' que' → logprob: -2.8208415508270264
    5. ' dans' → logprob: -3.6958415508270264
    6. ' en' → logprob: -3.6958415508270264
    7. ' quand' → logprob: -3.8208415508270264
    8. ' lorsque' → logprob: -3.8208415508270264
    9. ' au' → logprob: -3.8208415508270264
    10. ' peut' → logprob: -3.8208415508270264

Token 43: ' la' (ID: 557)
  Prédit: ' la'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.3489333987236023
    2. 'la' → logprob: -1.598933458328247
    3. 'le' → logprob: -2.973933458328247
    4. ' le' → logprob: -3.598933458328247
    5. 'les' → logprob: -5.223933219909668
    6. ' les' → logprob: -5.723933219909668
    7. 'l' → logprob: -6.473933219909668
    8. 'dern' → logprob: -6.848933219909668
    9. ' ' → logprob: -7.598933219909668
    10. '```' → logprob: -7.848933219909668

Token 44: ' première' (ID: 23423)
  Prédit: 'dern'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dern' → logprob: -0.805203378200531
    2. ' dernière' → logprob: -1.0552034378051758
    3. 'der' → logprob: -2.055203437805176
    4. 'prem' → logprob: -3.180203437805176
    5. ' derni' → logprob: -4.430203437805176
    6. ' dernier' → logprob: -5.055203437805176
    7. ' première' → logprob: -6.055203437805176
    8. ' ' → logprob: -6.430203437805176
    9. '```' → logprob: -6.555203437805176
    10. ' der' → logprob: -6.805203437805176

Token 45: ' position' (ID: 4010)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3147088885307312
    2. ' étape' → logprob: -2.189708948135376
    3. '_' → logprob: -2.814708948135376
    4. ' _' → logprob: -4.189708709716797
    5. ' )' → logprob: -4.439708709716797
    6. '_token' → logprob: -4.939708709716797
    7. '  ' → logprob: -4.939708709716797
    8. ' step' → logprob: -5.064708709716797
    9. '_step' → logprob: -5.189708709716797
    10. ' ' → logprob: -5.189708709716797

Token 46: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.1205981969833374
    2. '
' → logprob: -1.2455981969833374
    3. '\n' → logprob: -1.8705981969833374
    4. ':' → logprob: -2.370598316192627
    5. ':
' → logprob: -2.745598316192627
    6. ' 
' → logprob: -4.620598316192627
    7. '```' → logprob: -4.620598316192627
    8. '  
' → logprob: -4.745598316192627
    9. '    
' → logprob: -4.870598316192627
    10. '' → logprob: -5.245598316192627

Token 47: '    
' (ID: 1944)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.362576425075531
    2. '"""
' → logprob: -2.487576484680176
    3. '\n' → logprob: -2.487576484680176
    4. '"""' → logprob: -2.612576484680176
    5. '```' → logprob: -3.112576484680176
    6. '"' → logprob: -4.862576484680176
    7. '  
' → logprob: -5.987576484680176
    8. '    
' → logprob: -6.237576484680176
    9. '
' → logprob: -6.487576484680176
    10. '""' → logprob: -6.862576484680176

Token 48: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.016577722504734993
    2. '"""' → logprob: -4.64157772064209
    3. '"""
' → logprob: -6.26657772064209
    4. ' """
' → logprob: -6.89157772064209
    5. '```' → logprob: -6.89157772064209
    6. ' """' → logprob: -7.26657772064209
    7. '
' → logprob: -8.14157772064209
    8. ')' → logprob: -8.14157772064209
    9. '    ' → logprob: -8.26657772064209
    10. ' 
' → logprob: -8.26657772064209

Token 49: ' Args' (ID: 39185)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014491715468466282
    2. '```' → logprob: -5.014491558074951
    3. '"""' → logprob: -5.264491558074951
    4. '"""
' → logprob: -6.514491558074951
    5. ' """
' → logprob: -8.38949203491211
    6. '
' → logprob: -8.51449203491211
    7. '    ' → logprob: -9.01449203491211
    8. ' """' → logprob: -9.26449203491211
    9. '    
' → logprob: -9.63949203491211
    10. '\n' → logprob: -9.76449203491211

Token 50: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.014138355851173401
    2. ',' → logprob: -5.264138221740723
    3. '   ' → logprob: -5.639138221740723
    4. '):' → logprob: -5.889138221740723
    5. ' :' → logprob: -6.764138221740723
    6. '[' → logprob: -7.514138221740723
    7. '```' → logprob: -8.014138221740723
    8. ')' → logprob: -8.889138221740723
    9. '[N' → logprob: -9.639138221740723
    10. '=' → logprob: -10.014138221740723

Token 51: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3268466889858246
    2. ')' → logprob: -2.7018465995788574
    3. 'N' → logprob: -3.0768465995788574
    4. '    ' → logprob: -3.3268465995788574
    5. ' N' → logprob: -3.3268465995788574
    6. ' )' → logprob: -3.3268465995788574
    7. ' ' → logprob: -3.4518465995788574
    8. '```' → logprob: -4.451846599578857
    9. 'n' → logprob: -5.076846599578857
    10. ' ):' → logprob: -6.326846599578857

Token 52: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' (adapté à ' N') → logprob: -0.01723947562277317
    2. ' N' → logprob: -4.642239570617676
    3. '   ' → logprob: -5.017239570617676
    4. 'n' → logprob: -7.392239570617676
    5. '```' → logprob: -9.267239570617676
    6. 'self' → logprob: -10.517239570617676
    7. 'int' → logprob: -10.642239570617676
    8. '       ' → logprob: -11.017239570617676
    9. 'num' → logprob: -11.267239570617676
    10. '`' → logprob: -11.892239570617676

Token 53: ' (' (ID: 350)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.08326990157365799
    2. ' ,' → logprob: -3.3332698345184326
    3. ':' → logprob: -4.208270072937012
    4. ':int' → logprob: -4.583270072937012
    5. ' (' → logprob: -5.083270072937012
    6. ' :' → logprob: -5.333270072937012
    7. '   ' → logprob: -6.208270072937012
    8. ',int' → logprob: -6.458270072937012
    9. 'int' → logprob: -6.833270072937012
    10. '):' → logprob: -7.208270072937012

Token 54: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.5759919285774231
    2. ' int' → logprob: -0.8259919285774231
    3. '   ' → logprob: -10.5759916305542
    4. ' integer' → logprob: -11.7009916305542
    5. ',int' → logprob: -12.0759916305542
    6. ')' → logprob: -12.9509916305542
    7. ',' → logprob: -13.0759916305542
    8. ':int' → logprob: -13.2009916305542
    9. ' )' → logprob: -13.3259916305542
    10. '    ' → logprob: -14.3259916305542

Token 55: '):' (ID: 3127)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5270069241523743
    2. '):' → logprob: -0.9020069241523743
    3. ',' → logprob: -5.652007102966309
    4. '),' → logprob: -8.902007102966309
    5. ' ):' → logprob: -9.402007102966309
    6. ' )' → logprob: -9.902007102966309
    7. '   ' → logprob: -9.902007102966309
    8. '):
' → logprob: -10.527007102966309
    9. '```' → logprob: -12.152007102966309
    10. ' ' → logprob: -12.902007102966309

Token 56: ' Le' (ID: 2018)
  Prédit: ' Le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Le' → logprob: -0.11448219418525696
    2. ' le' → logprob: -2.7394821643829346
    3. 'Le' → logprob: -3.9894821643829346
    4. ' La' → logprob: -4.489482402801514
    5. ' nombre' → logprob: -5.364482402801514
    6. ' Nombre' → logprob: -6.239482402801514
    7. ' L' → logprob: -6.364482402801514
    8. ' la' → logprob: -6.489482402801514
    9. 'Nombre' → logprob: -6.989482402801514
    10. 'La' → logprob: -7.364482402801514

Token 57: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.013850008137524128
    2. 'nombre' → logprob: -4.388850212097168
    3. ' ' → logprob: -6.763850212097168
    4. ' nombres' → logprob: -9.388850212097168
    5. ' ' → logprob: -11.013850212097168
    6. ' number' → logprob: -11.263850212097168
    7. '   ' → logprob: -11.763850212097168
    8. 'n' → logprob: -11.888850212097168
    9. '  ' → logprob: -11.888850212097168
    10. ' total' → logprob: -12.013850212097168

Token 58: ' total' (ID: 3609)
  Prédit: ' total'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' total' → logprob: -0.4814468026161194
    2. ' d' → logprob: -0.9814468026161194
    3. 'total' → logprob: -5.481446743011475
    4. '_total' → logprob: -6.981446743011475
    5. 'd' → logprob: -7.481446743011475
    6. ' maximal' → logprob: -7.481446743011475
    7. ' maximum' → logprob: -7.731446743011475
    8. ' ' → logprob: -8.481447219848633
    9. ' complet' → logprob: -8.856447219848633
    10. ' totale' → logprob: -9.106447219848633

Token 59: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.11378218233585358
    2. 'd' → logprob: -2.2387821674346924
    3. ')' → logprob: -7.6137824058532715
    4. ' )' → logprob: -8.988781929016113
    5. ' de' → logprob: -9.238781929016113
    6. ' ' → logprob: -9.863781929016113
    7. '   ' → logprob: -9.988781929016113
    8. ' des' → logprob: -10.863781929016113
    9. ' total' → logprob: -11.113781929016113
    10. '_d' → logprob: -11.363781929016113

Token 60: ''' (ID: 6)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.5704295039176941
    2. ' éléments' → logprob: -0.9454295039176941
    3. 'é' → logprob: -4.07042932510376
    4. '_' → logprob: -4.69542932510376
    5. ''' → logprob: -5.32042932510376
    6. ' ' → logprob: -5.69542932510376
    7. ' espaces' → logprob: -5.82042932510376
    8. ' é' → logprob: -5.94542932510376
    9. ''é' → logprob: -6.07042932510376
    10. ' él' → logprob: -7.57042932510376

Token 61: 'élé' (ID: 15228)
  Prédit: 'élé'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.023678312078118324
    2. ''' → logprob: -4.398678302764893
    3. 'é' → logprob: -4.773678302764893
    4. 'él' → logprob: -7.023678302764893
    5. ' éléments' → logprob: -7.023678302764893
    6. '’' → logprob: -8.39867877960205
    7. 'ét' → logprob: -9.14867877960205
    8. ''é' → logprob: -9.14867877960205
    9. ''él' → logprob: -9.64867877960205
    10. '`' → logprob: -9.89867877960205

Token 62: 'ments' (ID: 1626)
  Prédit: 'ments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ments' → logprob: -0.00023524489370174706
    2. 'm' → logprob: -9.750235557556152
    3. 'ment' → logprob: -9.750235557556152
    4. '```' → logprob: -10.000235557556152
    5. 'ents' → logprob: -10.625235557556152
    6. '   ' → logprob: -11.000235557556152
    7. 'nts' → logprob: -12.125235557556152
    8. ')' → logprob: -12.250235557556152
    9. 'phants' → logprob: -12.375235557556152
    10. '       ' → logprob: -13.250235557556152

Token 63: '/all' (ID: 63414)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20936289429664612
    2. ')' → logprob: -1.9593628644943237
    3. ',' → logprob: -4.209362983703613
    4. '):' → logprob: -4.209362983703613
    5. '```' → logprob: -4.209362983703613
    6. '
' → logprob: -7.084362983703613
    7. ' )' → logprob: -7.709362983703613
    8. ')
' → logprob: -8.334362983703613
    9. '):
' → logprob: -8.334362983703613
    10. '       ' → logprob: -8.459362983703613

Token 64: 'ers' (ID: 409)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.8583231568336487
    2. 'é' → logprob: -1.233323097229004
    3. 'è' → logprob: -1.733323097229004
    4. 'éments' → logprob: -3.108323097229004
    5. 'ements' → logprob: -3.358323097229004
    6. 'u' → logprob: -4.858323097229004
    7. 'i' → logprob: -5.233323097229004
    8. 'èves' → logprob: -5.483323097229004
    9. 'ément' → logprob: -6.358323097229004
    10. '```' → logprob: -6.608323097229004

Token 65: ' à' (ID: 1221)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.26464053988456726
    2. '-' → logprob: -1.6396405696868896
    3. '```' → logprob: -4.7646403312683105
    4. 'à' → logprob: -5.1396403312683105
    5. '-ret' → logprob: -5.3896403312683105
    6. ')' → logprob: -5.3896403312683105
    7. ' à' → logprob: -5.5146403312683105
    8. ' ' → logprob: -5.7646403312683105
    9. '-à' → logprob: -6.1396403312683105
    10. '	' → logprob: -6.8896403312683105

Token 66: ' parcour' (ID: 130642)
  Prédit: 'par'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'par' → logprob: -0.6931532025337219
    2. ' parcour' → logprob: -0.8181532025337219
    3. 'tr' → logprob: -3.693153142929077
    4. '   ' → logprob: -4.568153381347656
    5. '```' → logprob: -5.568153381347656
    6. 'faire' → logprob: -5.693153381347656
    7. ' effectuer' → logprob: -5.818153381347656
    8. ' franch' → logprob: -5.943153381347656
    9. 'fr' → logprob: -5.943153381347656
    10. ' ' → logprob: -5.943153381347656

Token 67: 'ir' (ID: 380)
  Prédit: 'ir'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ir' → logprob: -0.03028297983109951
    2. 'r' → logprob: -4.530282974243164
    3. 'er' → logprob: -5.030282974243164
    4. '```' → logprob: -5.405282974243164
    5. '   ' → logprob: -6.405282974243164
    6. ')' → logprob: -7.030282974243164
    7. 'à' → logprob: -7.030282974243164
    8. 'i' → logprob: -7.155282974243164
    9. ',' → logprob: -7.780282974243164
    10. 'ç' → logprob: -7.905282974243164

Token 68: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.17781105637550354
    2. ')' → logprob: -2.3028111457824707
    3. '):' → logprob: -3.3028111457824707
    4. '```' → logprob: -4.052811145782471
    5. ',' → logprob: -5.802811145782471
    6. '\n' → logprob: -6.427811145782471
    7. '):
' → logprob: -6.927811145782471
    8. '
' → logprob: -7.052811145782471
    9. ')
' → logprob: -7.802811145782471
    10. ':' → logprob: -7.802811145782471

Token 69: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5585128664970398
    2. '"""
' → logprob: -1.6835129261016846
    3. '```' → logprob: -1.8085129261016846
    4. '    
' → logprob: -3.4335129261016846
    5. '
' → logprob: -4.9335126876831055
    6. '``' → logprob: -5.1835126876831055
    7. '\n' → logprob: -5.1835126876831055
    8. ' 
' → logprob: -5.3085126876831055
    9. '"""' → logprob: -5.3085126876831055
    10. '  
' → logprob: -5.5585126876831055

Token 70: ' K' (ID: 658)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2436807006597519
    2. '```' → logprob: -2.243680715560913
    3. '       ' → logprob: -3.118680715560913
    4. ' K' → logprob: -3.868680715560913
    5. 'K' (adapté à ' K') → logprob: -3.993680715560913
    6. '"""' → logprob: -4.243680477142334
    7. '"""
' → logprob: -5.743680477142334
    8. 'Returns' → logprob: -6.993680477142334
    9. '    ' → logprob: -7.118680477142334
    10. ')' → logprob: -7.243680477142334

Token 71: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.20565810799598694
    2. ')' → logprob: -2.080658197402954
    3. '):' → logprob: -3.205658197402954
    4. '(int' → logprob: -4.455657958984375
    5. ':int' → logprob: -5.830657958984375
    6. ':' → logprob: -6.330657958984375
    7. '):
' → logprob: -6.580657958984375
    8. 'int' → logprob: -7.205657958984375
    9. '```' → logprob: -7.330657958984375
    10. ' int' → logprob: -7.955657958984375

Token 72: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.5834936499595642
    2. ' int' → logprob: -0.8334936499595642
    3. ')' → logprob: -5.208493709564209
    4. ' )' → logprob: -6.958493709564209
    5. '):' → logprob: -7.208493709564209
    6. ':int' → logprob: -9.33349323272705
    7. ' ):' → logprob: -9.58349323272705
    8. '   ' → logprob: -10.08349323272705
    9. '=int' → logprob: -10.20849323272705
    10. ' ' → logprob: -10.33349323272705

Token 73: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0013935691677033901
    2. ' ):' → logprob: -7.126393795013428
    3. ')' → logprob: -7.751393795013428
    4. ':' → logprob: -9.75139331817627
    5. '):
' → logprob: -10.50139331817627
    6. '   ' → logprob: -10.50139331817627
    7. '```' → logprob: -11.75139331817627
    8. ':int' → logprob: -11.75139331817627
    9. ' ' → logprob: -11.87639331817627
    10. 'int' → logprob: -12.00139331817627

Token 74: ' Le' (ID: 2018)
  Prédit: ' Le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Le' → logprob: -0.17517079412937164
    2. ' le' → logprob: -2.4251708984375
    3. 'Le' → logprob: -2.9251708984375
    4. ' ' → logprob: -4.9251708984375
    5. ' La' → logprob: -5.3001708984375
    6. ' int' → logprob: -6.4251708984375
    7. ' la' → logprob: -7.1751708984375
    8. 'La' → logprob: -7.1751708984375
    9. ' L' → logprob: -7.5501708984375
    10. 'le' → logprob: -7.9251708984375

Token 75: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.029833100736141205
    2. ' maximum' → logprob: -3.6548330783843994
    3. 'nombre' → logprob: -6.5298333168029785
    4. ' pas' → logprob: -7.5298333168029785
    5. ' nombres' → logprob: -7.5298333168029785
    6. ' max' → logprob: -8.27983283996582
    7. ' number' → logprob: -8.77983283996582
    8. ' maximal' → logprob: -8.90483283996582
    9. 'maximum' → logprob: -9.15483283996582
    10. 's' → logprob: -9.77983283996582

Token 76: ' maximum' (ID: 10562)
  Prédit: ' maximal'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' maximal' → logprob: -0.5091668367385864
    2. ' maximum' → logprob: -1.0091668367385864
    3. ' d' → logprob: -3.509166717529297
    4. ' max' → logprob: -6.009166717529297
    5. 'maximum' → logprob: -7.509166717529297
    6. ' total' → logprob: -7.634166717529297
    7. ' par' → logprob: -7.884166717529297
    8. 'max' → logprob: -8.634166717529297
    9. ' maximale' → logprob: -9.009166717529297
    10. ' de' → logprob: -9.509166717529297

Token 77: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.11441957205533981
    2. 'd' → logprob: -2.489419460296631
    3. ' par' → logprob: -3.989419460296631
    4. 'par' → logprob: -6.114419460296631
    5. ' à' → logprob: -6.364419460296631
    6. ' ' → logprob: -7.614419460296631
    7. ')' → logprob: -7.989419460296631
    8. ' possible' → logprob: -8.239419937133789
    9. '   ' → logprob: -8.489419937133789
    10. 'de' → logprob: -8.739419937133789

Token 78: ''' (ID: 6)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.3828192949295044
    2. 'élé' → logprob: -1.8828192949295044
    3. ' éléments' → logprob: -2.507819175720215
    4. ''' → logprob: -3.257819175720215
    5. ' espaces' → logprob: -4.507819175720215
    6. ' ' → logprob: -4.882819175720215
    7. ''é' → logprob: -5.382819175720215
    8. ' à' → logprob: -5.507819175720215
    9. ''espace' → logprob: -6.132819175720215
    10. ''esp' → logprob: -6.632819175720215

Token 79: 'élé' (ID: 15228)
  Prédit: 'élé'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.09929552674293518
    2. ''' → logprob: -3.3492956161499023
    3. ''ét' → logprob: -3.7242956161499023
    4. ' éléments' → logprob: -4.349295616149902
    5. 'é' → logprob: -5.349295616149902
    6. '_' → logprob: -5.349295616149902
    7. ''é' → logprob: -5.349295616149902
    8. ' étapes' → logprob: -6.349295616149902
    9. ''él' → logprob: -6.349295616149902
    10. 'él' → logprob: -7.349295616149902

Token 80: 'ments' (ID: 1626)
  Prédit: 'ments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ments' → logprob: -0.00023524489370174706
    2. 'm' → logprob: -9.125235557556152
    3. 'ment' → logprob: -9.125235557556152
    4. 'éments' → logprob: -11.625235557556152
    5. '```' → logprob: -13.250235557556152
    6. 'mentation' → logprob: -13.875235557556152
    7. 'mé' → logprob: -14.000235557556152
    8. '   ' → logprob: -14.250235557556152
    9. ' ' → logprob: -14.375235557556152
    10. '`' → logprob: -14.375235557556152

Token 81: ' parcour' (ID: 130642)
  Prédit: ' par'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' par' → logprob: -0.2772950232028961
    2. ' à' → logprob: -2.1522951126098633
    3. 'par' → logprob: -3.1522951126098633
    4. ')' → logprob: -3.2772951126098633
    5. ' ' → logprob: -4.152295112609863
    6. '   ' → logprob: -4.277295112609863
    7. ' )' → logprob: -5.152295112609863
    8. ' supplémentaires' → logprob: -5.777295112609863
    9. ' que' → logprob: -6.527295112609863
    10. ' """' → logprob: -7.777295112609863

Token 82: 'us' (ID: 385)
  Prédit: 'ir'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ir' → logprob: -0.14993780851364136
    2. 'us' → logprob: -2.274937868118286
    3. 'is' → logprob: -3.524937868118286
    4. 'u' → logprob: -6.274937629699707
    5. 'er' → logprob: -6.524937629699707
    6. 'i' → logprob: -7.024937629699707
    7. 'es' → logprob: -7.274937629699707
    8. 'és' → logprob: -7.399937629699707
    9. 'a' → logprob: -7.649937629699707
    10. 'e' → logprob: -8.399937629699707

Token 83: ' en' (ID: 469)
  Prédit: ' par'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' par' → logprob: -0.14538845419883728
    2. ')' → logprob: -3.14538836479187
    3. 'par' → logprob: -3.39538836479187
    4. ' à' → logprob: -3.52038836479187
    5. ' ' → logprob: -4.520388603210449
    6. ' )' → logprob: -5.145388603210449
    7. '   ' → logprob: -5.645388603210449
    8. ' en' → logprob: -5.645388603210449
    9. '```' → logprob: -6.395388603210449
    10. 'à' → logprob: -6.895388603210449

Token 84: ' une' (ID: 2463)
  Prédit: ' une'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.6214445233345032
    2. ' ' → logprob: -1.2464444637298584
    3. ' un' → logprob: -1.9964444637298584
    4. 'un' → logprob: -4.3714447021484375
    5. ' chaque' → logprob: -5.6214447021484375
    6. ' avance' → logprob: -5.6214447021484375
    7. '_' → logprob: -6.1214447021484375
    8. 'une' → logprob: -6.2464447021484375
    9. '```' → logprob: -6.2464447021484375
    10. ''une' → logprob: -6.6214447021484375

Token 85: ' étape' (ID: 83661)
  Prédit: ' étape'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' étape' → logprob: -0.01241617277264595
    2. ' ' → logprob: -4.512416362762451
    3. ' step' → logprob: -7.262416362762451
    4. ' seule' → logprob: -8.012415885925293
    5. '_' → logprob: -9.637415885925293
    6. ' fois' → logprob: -9.762415885925293
    7. 'ét' → logprob: -9.887415885925293
    8. '  ' → logprob: -10.762415885925293
    9. 'fois' → logprob: -11.387415885925293
    10. 'se' → logprob: -11.512415885925293

Token 86: ' (' (ID: 350)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.36964622139930725
    2. '):
' → logprob: -1.9946461915969849
    3. '   ' → logprob: -2.3696463108062744
    4. ')' → logprob: -2.6196463108062744
    5. '```' → logprob: -6.244646072387695
    6. ',' → logprob: -6.869646072387695
    7. ' ):' → logprob: -6.869646072387695
    8. '.' → logprob: -7.369646072387695
    9. ':' → logprob: -8.119646072387695
    10. ' ):
' → logprob: -8.369646072387695

Token 87: 'au' (ID: 753)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.055955756455659866
    2. ' )' → logprob: -3.680955648422241
    3. '):' → logprob: -4.18095588684082
    4. ' ):' → logprob: -5.43095588684082
    5. ' par' → logprob: -5.80595588684082
    6. ',' → logprob: -6.80595588684082
    7. '"""' → logprob: -7.05595588684082
    8. '   ' → logprob: -7.30595588684082
    9. '```' → logprob: -8.18095588684082
    10. '):
' → logprob: -8.30595588684082

Token 88: '-delà' (ID: 94644)
  Prédit: ' départ'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' départ' → logprob: -0.7899121046066284
    2. ' premier' → logprob: -1.7899121046066284
    3. 'prem' → logprob: -2.039912223815918
    4. ' début' → logprob: -3.039912223815918
    5. 'moins' → logprob: -3.164912223815918
    6. ' moins' → logprob: -3.414912223815918
    7. 'près' → logprob: -3.664912223815918
    8. 'dé' → logprob: -4.039912223815918
    9. 'pas' → logprob: -4.914912223815918
    10. ' maximum' → logprob: -4.914912223815918

Token 89: ' du' (ID: 1462)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.23033829033374786
    2. ' du' → logprob: -2.3553383350372314
    3. 'de' → logprob: -2.4803383350372314
    4. 'du' → logprob: -4.480338096618652
    5. ' d' → logprob: -4.980338096618652
    6. ')' → logprob: -5.480338096618652
    7. 'd' → logprob: -6.730338096618652
    8. ' ' → logprob: -6.855338096618652
    9. '1' → logprob: -6.980338096618652
    10. '   ' → logprob: -7.855338096618652

Token 90: ' premier' (ID: 15506)
  Prédit: 'prem'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prem' → logprob: -0.25875744223594666
    2. '1' → logprob: -2.1337573528289795
    3. ' premier' → logprob: -2.5087573528289795
    4. '0' → logprob: -5.133757591247559
    5. ' ' → logprob: -5.258757591247559
    6. ' départ' → logprob: -5.633757591247559
    7. 'dé' → logprob: -5.633757591247559
    8. '2' → logprob: -6.008757591247559
    9. 'de' → logprob: -6.008757591247559
    10. 'first' → logprob: -7.133757591247559

Token 91: ').
' (ID: 6294)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.794575572013855
    2. 'élé' → logprob: -1.544575572013855
    3. ' élément' → logprob: -2.0445756912231445
    4. ').' → logprob: -2.4195756912231445
    5. '):' → logprob: -3.4195756912231445
    6. ' )' → logprob: -3.6695756912231445
    7. ' pas' → logprob: -4.4195756912231445
    8. ' ).' → logprob: -4.9195756912231445
    9. ' position' → logprob: -4.9195756912231445
    10. 'element' → logprob: -5.2945756912231445

Token 92: '    
' (ID: 1944)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6500228643417358
    2. '   ' → logprob: -0.9000228643417358
    3. '"""
' → logprob: -3.6500229835510254
    4. '"""' → logprob: -4.025022983551025
    5. '```' → logprob: -5.025022983551025
    6. '\n' → logprob: -5.650022983551025
    7. ')
' → logprob: -5.775022983551025
    8. '):' → logprob: -5.900022983551025
    9. '"' → logprob: -5.900022983551025
    10. '""' → logprob: -6.525022983551025

Token 93: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.056968484073877335
    2. '"""' → logprob: -2.9319684505462646
    3. '"""
' → logprob: -7.181968688964844
    4. ')' → logprob: -7.431968688964844
    5. '```' → logprob: -7.931968688964844
    6. ' """' → logprob: -9.181968688964844
    7. '""' → logprob: -9.806968688964844
    8. '    
' → logprob: -9.806968688964844
    9. '"' → logprob: -10.056968688964844
    10. ' """
' → logprob: -10.306968688964844

Token 94: ' Returns' (ID: 9609)
  Prédit: '"""'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"""' → logprob: -0.7406594157218933
    2. '   ' → logprob: -1.240659475326538
    3. '"""
' → logprob: -1.615659475326538
    4. ' """
' → logprob: -4.490659236907959
    5. '```' → logprob: -4.615659236907959
    6. 'Returns' (adapté à ' Returns') → logprob: -5.365659236907959
    7. ' """' → logprob: -5.490659236907959
    8. '""' → logprob: -5.865659236907959
    9. '    
' → logprob: -7.115659236907959
    10. '
' → logprob: -7.740659236907959

Token 95: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5946722030639648
    2. ' :' → logprob: -0.8446722030639648
    3. '   ' → logprob: -4.219672203063965
    4. '    ' → logprob: -7.344672203063965
    5. ' None' → logprob: -7.344672203063965
    6. '  ' → logprob: -7.969672203063965
    7. ' ' → logprob: -8.219672203063965
    8. '<|end|>' → logprob: -8.344672203063965
    9. ':int' → logprob: -8.594672203063965
    10. '```' → logprob: -8.719672203063965

Token 96: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18150891363620758
    2. '    ' → logprob: -2.556509017944336
    3. ' N' → logprob: -2.806509017944336
    4. ' int' → logprob: -4.431509017944336
    5. ' (' → logprob: -5.556509017944336
    6. '       ' → logprob: -6.306509017944336
    7. '1' → logprob: -6.431509017944336
    8. ' max' → logprob: -6.431509017944336
    9. '0' → logprob: -7.056509017944336
    10. ' n' → logprob: -7.056509017944336

Token 97: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.47474047541618347
    2. 'int' (adapté à ' int') → logprob: -0.9747405052185059
    3. '   ' → logprob: -7.349740505218506
    4. '```' → logprob: -11.349740028381348
    5. '
' → logprob: -12.849740028381348
    6. ' 
' → logprob: -13.474740028381348
    7. '       ' → logprob: -13.974740028381348
    8. '    
' → logprob: -14.724740028381348
    9. '(int' → logprob: -14.724740028381348
    10. ' dict' → logprob: -14.724740028381348

Token 98: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.015951551496982574
    2. ' :' → logprob: -4.390951633453369
    3. '   ' → logprob: -6.390951633453369
    4. '):' → logprob: -7.515951633453369
    5. ':
' → logprob: -7.515951633453369
    6. '```' → logprob: -8.515951156616211
    7. '
' → logprob: -9.640951156616211
    8. '  ' → logprob: -9.890951156616211
    9. ')' → logprob: -10.015951156616211
    10. '<|end|>' → logprob: -10.265951156616211

Token 99: ' Le' (ID: 2018)
  Prédit: ' N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.32087311148643494
    2. ' (' → logprob: -1.8208731412887573
    3. ' Le' → logprob: -2.8208730220794678
    4. ' le' → logprob: -3.8208730220794678
    5. ' max' → logprob: -4.445873260498047
    6. '(N' → logprob: -5.070873260498047
    7. 'Le' → logprob: -5.320873260498047
    8. '   ' → logprob: -5.820873260498047
    9. 'N' → logprob: -6.570873260498047
    10. '(' → logprob: -7.195873260498047

Token 100: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.002280030632391572
    2. 'nombre' → logprob: -6.752280235290527
    3. ' minimum' → logprob: -7.002280235290527
    4. '   ' → logprob: -9.502280235290527
    5. ' nombres' → logprob: -10.127280235290527
    6. ' maximum' → logprob: -10.627280235290527
    7. ' number' → logprob: -10.752280235290527
    8. ' total' → logprob: -11.877280235290527
    9. 'minimum' → logprob: -12.002280235290527
    10. ' minimal' → logprob: -12.127280235290527

Token 101: ' minimal' (ID: 19957)
  Prédit: ' minimum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' minimum' → logprob: -0.2889852821826935
    2. '_' → logprob: -2.413985252380371
    3. ' d' → logprob: -2.913985252380371
    4. ' total' → logprob: -3.038985252380371
    5. ' ' → logprob: -3.788985252380371
    6. ' de' → logprob: -4.288985252380371
    7. ' maximum' → logprob: -5.038985252380371
    8. ' space' → logprob: -5.288985252380371
    9. ' minimal' → logprob: -5.413985252380371
    10. ' nécessaire' → logprob: -6.163985252380371

Token 102: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.0021459776908159256
    2. ' ' → logprob: -7.002145767211914
    3. '_' → logprob: -7.627145767211914
    4. ' de' → logprob: -7.877145767211914
    5. ' nécessaire' → logprob: -8.752145767211914
    6. ' required' → logprob: -9.252145767211914
    7. ' des' → logprob: -10.502145767211914
    8. ' necessary' → logprob: -10.752145767211914
    9. ' total' → logprob: -11.627145767211914
    10. ' necess' → logprob: -11.877145767211914

Token 103: ''ét' (ID: 23771)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.3505299687385559
    2. ' d' → logprob: -1.6005299091339111
    3. ' ' → logprob: -3.600529909133911
    4. ' de' → logprob: -3.850529909133911
    5. ' étapes' → logprob: -3.975529909133911
    6. ' steps' → logprob: -4.35053014755249
    7. '_steps' → logprob: -5.72553014755249
    8. ' _' → logprob: -5.97553014755249
    9. ' pas' → logprob: -6.72553014755249
    10. ' e' → logprob: -6.85053014755249

Token 104: 'apes' (ID: 11864)
  Prédit: 'apes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'apes' → logprob: -0.003389449091628194
    2. 'ape' → logprob: -6.378389358520508
    3. 'a' → logprob: -6.753389358520508
    4. 'ap' → logprob: -7.628389358520508
    5. '
' → logprob: -12.503389358520508
    6. '##' → logprob: -13.128389358520508
    7. 'apses' → logprob: -13.128389358520508
    8. 'á' → logprob: -13.253389358520508
    9. 'à' → logprob: -13.253389358520508
    10. 'ап' → logprob: -13.378389358520508

Token 105: ' nécessaires' (ID: 74402)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02791869267821312
    2. ' nécessaires' → logprob: -4.527918815612793
    3. ' nécessaire' → logprob: -4.902918815612793
    4. '    
' → logprob: -5.652918815612793
    5. '.' → logprob: -6.652918815612793
    6. '```' → logprob: -6.777918815612793
    7. ':' → logprob: -7.152918815612793
    8. ' :' → logprob: -7.277918815612793
    9. '    ' → logprob: -8.152918815612793
    10. ' à' → logprob: -8.777918815612793

Token 106: ' pour' (ID: 1930)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06988652795553207
    2. ':' → logprob: -3.1948864459991455
    3. '):' → logprob: -4.194886684417725
    4. ')' → logprob: -5.319886684417725
    5. '```' → logprob: -6.194886684417725
    6. '
' → logprob: -6.694886684417725
    7. ':
' → logprob: -6.819886684417725
    8. '):
' → logprob: -6.944886684417725
    9. '    
' → logprob: -8.069886207580566
    10. ' :' → logprob: -8.694886207580566

Token 107: ' parcour' (ID: 130642)
  Prédit: ' parcour'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' parcour' → logprob: -0.03149256855249405
    2. ' atteindre' → logprob: -3.9064924716949463
    3. ' couvrir' → logprob: -5.531492710113525
    4. 'par' → logprob: -5.906492710113525
    5. ' arriver' → logprob: -7.406492710113525
    6. ' accompl' → logprob: -7.406492710113525
    7. ' terminer' → logprob: -7.531492710113525
    8. 'atte' → logprob: -7.906492710113525
    9. 'tr' → logprob: -8.281492233276367
    10. ' parvenir' → logprob: -8.281492233276367

Token 108: 'ir' (ID: 380)
  Prédit: 'ir'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ir' → logprob: -0.07936647534370422
    2. 'rir' → logprob: -2.579366445541382
    3. '   ' → logprob: -8.579366683959961
    4. 'r' → logprob: -9.579366683959961
    5. '       ' → logprob: -10.204366683959961
    6. '

' → logprob: -11.079366683959961
    7. '_ir' → logprob: -11.079366683959961
    8. '    ' → logprob: -11.204366683959961
    9. '```' → logprob: -11.454366683959961
    10. 'i' → logprob: -11.704366683959961

Token 109: ' tous' (ID: 10688)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.9116640686988831
    2. ' N' → logprob: -1.0366640090942383
    3. ' le' → logprob: -2.5366640090942383
    4. ' ' → logprob: -2.7866640090942383
    5. ' l' → logprob: -3.4116640090942383
    6. ' tout' → logprob: -3.9116640090942383
    7. '   ' → logprob: -4.411664009094238
    8. ' les' → logprob: -4.411664009094238
    9. ' toute' → logprob: -4.536664009094238
    10. ' ' → logprob: -5.536664009094238

Token 110: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.0005118065746501088
    2. 'les' → logprob: -8.12551212310791
    3. ' la' → logprob: -9.12551212310791
    4. ' l' → logprob: -10.50051212310791
    5. ' le' → logprob: -10.75051212310791
    6. ' ' → logprob: -11.12551212310791
    7. ' N' → logprob: -11.37551212310791
    8. ' els' → logprob: -12.00051212310791
    9. ' ' → logprob: -12.12551212310791
    10. ' the' → logprob: -12.12551212310791

Token 111: ' éléments' (ID: 57375)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.6336817741394043
    2. ' éléments' → logprob: -0.7586817741394043
    3. ' él' → logprob: -8.383682250976562
    4. ' ' → logprob: -8.508682250976562
    5. 'é' → logprob: -8.508682250976562
    6. ' élément' → logprob: -9.258682250976562
    7. ' elements' → logprob: -9.383682250976562
    8. 'él' → logprob: -9.633682250976562
    9. ' é' → logprob: -9.758682250976562
    10. 'elements' → logprob: -10.383682250976562

Token 112: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14346769452095032
    2. '):' → logprob: -3.018467664718628
    3. ':' → logprob: -3.268467664718628
    4. ')' → logprob: -3.518467664718628
    5. ':
' → logprob: -5.018467903137207
    6. '):
' → logprob: -5.643467903137207
    7. '```' → logprob: -5.893467903137207
    8. '
' → logprob: -6.393467903137207
    9. '\n' → logprob: -7.518467903137207
    10. ')
' → logprob: -7.768467903137207

Token 113: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.19939227402210236
    2. '"""' → logprob: -2.199392318725586
    3. '"""
' → logprob: -3.074392318725586
    4. '```' → logprob: -4.699392318725586
    5. '\n' → logprob: -5.074392318725586
    6. '""' → logprob: -5.574392318725586
    7. '
' → logprob: -6.324392318725586
    8. '"\' → logprob: -6.824392318725586
    9. '    
' → logprob: -7.324392318725586
    10. '"' → logprob: -8.324392318725586

Token 114: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.32144325971603394
    2. '
' → logprob: -1.5714433193206787
    3. '\n' → logprob: -3.3214433193206787
    4. '    
' → logprob: -4.0714430809021
    5. '```' → logprob: -5.3214430809021
    6. ':' → logprob: -5.9464430809021
    7. '  
' → logprob: -6.6964430809021
    8. ')' → logprob: -6.9464430809021
    9. ' 
' → logprob: -6.9464430809021
    10. '   
' → logprob: -7.0714430809021

Token 115: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0011751054553315043
    2. '    
' → logprob: -7.2511749267578125
    3. '
' → logprob: -7.7511749267578125
    4. '```' → logprob: -10.876174926757812
    5. '    ' → logprob: -12.501174926757812
    6. '\n' → logprob: -12.876174926757812
    7. '   
' → logprob: -13.126174926757812
    8. 'return' → logprob: -13.376174926757812
    9. '    
    
' → logprob: -13.876174926757812
    10. '     
' → logprob: -14.001174926757812

Token 116: ' #' (ID: 1069)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.029106924310326576
    2. ' if' → logprob: -3.904106855392456
    3. '   ' → logprob: -4.779107093811035
    4. 'return' → logprob: -9.404107093811035
    5. '```' → logprob: -10.779107093811035
    6. 'steps' → logprob: -11.279107093811035
    7. ' steps' → logprob: -13.529107093811035
    8. ' return' → logprob: -13.529107093811035
    9. '#' (adapté à ' #') → logprob: -13.654107093811035
    10. 'step' → logprob: -14.029107093811035

Token 117: ' Le' (ID: 2018)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.2480139285326004
    2. 'if' → logprob: -1.623013973236084
    3. '   ' → logprob: -4.123013973236084
    4. ' steps' → logprob: -6.123013973236084
    5. 'steps' → logprob: -6.623013973236084
    6. ' return' → logprob: -6.748013973236084
    7. 'return' → logprob: -6.873013973236084
    8. ' step' → logprob: -8.998013496398926
    9. '```' → logprob: -9.873013496398926
    10. 'step' → logprob: -10.373013496398926

Token 118: ' déplacement' (ID: 138449)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.24240335822105408
    2. 'if' → logprob: -1.9924033880233765
    3. ' steps' → logprob: -3.492403268814087
    4. ' return' → logprob: -3.742403268814087
    5. '   ' → logprob: -4.742403507232666
    6. 'return' → logprob: -5.117403507232666
    7. 'steps' → logprob: -5.992403507232666
    8. ' result' → logprob: -6.367403507232666
    9. ' nombre' → logprob: -6.617403507232666
    10. ' remaining' → logprob: -7.367403507232666

Token 119: ' commence' (ID: 44755)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.10827670246362686
    2. '_max' → logprob: -3.858276605606079
    3. '_possible' → logprob: -3.858276605606079
    4. '=' → logprob: -4.858276844024658
    5. '_rest' → logprob: -4.858276844024658
    6. '_' → logprob: -4.983276844024658
    7. '_total' → logprob: -4.983276844024658
    8. '_re' → logprob: -5.233276844024658
    9. 'max' → logprob: -5.358276844024658
    10. '_remaining' → logprob: -5.358276844024658

Token 120: ' à' (ID: 1221)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7049515843391418
    2. ' par' → logprob: -1.329951524734497
    3. ' à' → logprob: -1.454951524734497
    4. 'par' → logprob: -5.829951763153076
    5. ' depuis' → logprob: -6.704951763153076
    6. ' de' → logprob: -6.954951763153076
    7. ' from' → logprob: -7.204951763153076
    8. 'from' → logprob: -7.329951763153076
    9. 'à' → logprob: -7.829951763153076
    10. '    ' → logprob: -8.829951286315918

Token 121: ' la' (ID: 557)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.7162179350852966
    2. ' ' → logprob: -0.7162179350852966
    3. ' la' → logprob: -4.341217994689941
    4. '0' → logprob: -5.716217994689941
    5. ' position' → logprob: -5.716217994689941
    6. 'position' → logprob: -6.841217994689941
    7. 'la' → logprob: -7.591217994689941
    8. '2' → logprob: -7.841217994689941
    9. 'l' → logprob: -7.841217994689941
    10. ' l' → logprob: -8.966217994689941

Token 122: ' première' (ID: 23423)
  Prédit: 'position'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'position' → logprob: -0.09346654266119003
    2. 'prem' → logprob: -2.9684665203094482
    3. '1' → logprob: -4.093466758728027
    4. 'de' → logprob: -4.843466758728027
    5. ' position' → logprob: -5.593466758728027
    6. ' ' → logprob: -5.968466758728027
    7. 'case' → logprob: -6.218466758728027
    8. '2' → logprob: -6.468466758728027
    9. 'pos' → logprob: -6.718466758728027
    10. '0' → logprob: -7.218466758728027

Token 123: ' position' (ID: 4010)
  Prédit: ' position'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' position' → logprob: -0.31705114245414734
    2. 'position' → logprob: -1.4420511722564697
    3. ' étape' → logprob: -3.6920511722564697
    4. ' ligne' → logprob: -5.817050933837891
    5. 'élé' → logprob: -6.442050933837891
    6. ' case' → logprob: -6.442050933837891
    7. ' ' → logprob: -7.067050933837891
    8. ' ' → logprob: -7.442050933837891
    9. '   ' → logprob: -7.567050933837891
    10. 'case' → logprob: -7.692050933837891

Token 124: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05307616665959358
    2. 'if' → logprob: -3.9280762672424316
    3. '    
' → logprob: -4.303076267242432
    4. ' if' → logprob: -4.428076267242432
    5. '
' → logprob: -5.678076267242432
    6. 'steps' → logprob: -7.303076267242432
    7. 'return' → logprob: -7.428076267242432
    8. '   
' → logprob: -7.428076267242432
    9. ' steps' → logprob: -7.803076267242432
    10. '  
' → logprob: -8.178075790405273

Token 125: ' puis' (ID: 18766)
  Prédit: ' puis'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' puis' → logprob: -0.8996610641479492
    2. '   ' → logprob: -1.0246610641479492
    3. ' donc' → logprob: -2.149661064147949
    4. ' rest' → logprob: -3.649661064147949
    5. ' steps' → logprob: -3.774661064147949
    6. ' then' → logprob: -4.399661064147949
    7. ' so' → logprob: -4.399661064147949
    8. ' et' → logprob: -4.524661064147949
    9. ' if' → logprob: -4.774661064147949
    10. ' il' → logprob: -5.899661064147949

Token 126: ' avance' (ID: 81376)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.44621899724006653
    2. '   ' → logprob: -1.8212189674377441
    3. '(' → logprob: -3.196218967437744
    4. ' steps' → logprob: -3.196218967437744
    5. ' return' → logprob: -3.946218967437744
    6. '(max' → logprob: -3.946218967437744
    7. ' N' → logprob: -4.446218967437744
    8. '(N' → logprob: -4.571218967437744
    9. ' max' → logprob: -5.071218967437744
    10. 'return' → logprob: -5.571218967437744

Token 127: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.5494893193244934
    2. ' d' → logprob: -1.2994892597198486
    3. '   ' → logprob: -1.9244892597198486
    4. '    ' → logprob: -6.799489498138428
    5. ' par' → logprob: -7.549489498138428
    6. 'de' → logprob: -7.799489498138428
    7. ' au' → logprob: -7.799489498138428
    8. ' ' → logprob: -8.04948902130127
    9. ' step' → logprob: -8.29948902130127
    10. 'd' → logprob: -8.42448902130127

Token 128: ' (' (ID: 350)
  Prédit: ' K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.35851162672042847
    2. '1' → logprob: -1.6085116863250732
    3. 'K' → logprob: -2.7335116863250732
    4. ' ' → logprob: -3.3585116863250732
    5. ' (' → logprob: -7.358511447906494
    6. ' max' → logprob: -9.233511924743652
    7. ' une' → logprob: -9.483511924743652
    8. ' ' → logprob: -9.608511924743652
    9. ' min' → logprob: -9.733511924743652
    10. 'max' → logprob: -9.983511924743652

Token 129: 'K' (ID: 42)
  Prédit: ' K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.4807572662830353
    2. 'K' → logprob: -1.105757236480713
    3. '1' → logprob: -3.105757236480713
    4. ' ' → logprob: -5.480757236480713
    5. ')' → logprob: -6.480757236480713
    6. ' )' → logprob: -9.230757713317871
    7. ' ' → logprob: -9.730757713317871
    8. 'k' → logprob: -10.980757713317871
    9. '   ' → logprob: -11.355757713317871
    10. '2' → logprob: -11.605757713317871

Token 130: '-' (ID: 12)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.13159753382205963
    2. '-' → logprob: -2.6315975189208984
    3. ' -' → logprob: -3.6315975189208984
    4. ' )' → logprob: -4.006597518920898
    5. ' if' → logprob: -5.256597518920898
    6. 'if' → logprob: -7.756597518920898
    7. '+' → logprob: -8.381597518920898
    8. ')+' → logprob: -8.506597518920898
    9. ' +' → logprob: -9.006597518920898
    10. ' or' → logprob: -10.006597518920898

Token 131: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.038094162940979004
    2. ' ' → logprob: -3.2880940437316895
    3. ')' → logprob: -10.038094520568848
    4. ' )' → logprob: -12.538094520568848
    5. '   ' → logprob: -13.038094520568848
    6. '  ' → logprob: -14.600594520568848
    7. ' ' → logprob: -14.788094520568848
    8. '    ' → logprob: -15.413094520568848
    9. '```' → logprob: -15.663094520568848
    10. '-' → logprob: -15.850594520568848

Token 132: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.007785365916788578
    2. ' )' → logprob: -4.882785320281982
    3. ')+' → logprob: -9.88278579711914
    4. ')*' → logprob: -10.88278579711914
    5. ' ' → logprob: -11.25778579711914
    6. ')
' → logprob: -11.75778579711914
    7. ' plus' → logprob: -11.88278579711914
    8. ' +' → logprob: -12.00778579711914
    9. '+' → logprob: -12.25778579711914
    10. '),' → logprob: -12.32028579711914

Token 133: ' pas' (ID: 2173)
  Prédit: ' +'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.9341557621955872
    2. '+' → logprob: -1.4341557025909424
    3. ' pas' → logprob: -2.1841557025909424
    4. ' plus' → logprob: -2.8091557025909424
    5. ' étapes' → logprob: -3.1841557025909424
    6. ' steps' → logprob: -3.3091557025909424
    7. ')' → logprob: -3.6841557025909424
    8. ' espaces' → logprob: -3.9341557025909424
    9. 'pas' → logprob: -4.8091559410095215
    10. ' )' → logprob: -4.8091559410095215

Token 134: ' à' (ID: 1221)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.6875485181808472
    2. '   ' → logprob: -0.9375485181808472
    3. '.' → logprob: -3.0625486373901367
    4. ',' → logprob: -4.187548637390137
    5. ' if' → logprob: -5.437548637390137
    6. ' plus' → logprob: -5.437548637390137
    7. ' ' → logprob: -5.562548637390137
    8. '+' → logprob: -5.687548637390137
    9. ' +' → logprob: -5.687548637390137
    10. '    
' → logprob: -5.812548637390137

Token 135: ' chaque' (ID: 21194)
  Prédit: ' chaque'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaque' → logprob: -0.012336584739387035
    2. ' partir' → logprob: -4.887336730957031
    3. 'u' → logprob: -7.137336730957031
    4. ' la' → logprob: -7.637336730957031
    5. 'each' → logprob: -7.762336730957031
    6. 'pas' → logprob: -7.762336730957031
    7. ' pas' → logprob: -7.887336730957031
    8. 'ch' → logprob: -7.887336730957031
    9. 'part' → logprob: -7.887336730957031
    10. 'l' → logprob: -8.262336730957031

Token 136: ' étape' (ID: 83661)
  Prédit: ' étape'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' étape' → logprob: -0.21306228637695312
    2. ' pas' → logprob: -1.9630622863769531
    3. ' step' → logprob: -3.963062286376953
    4. 'pas' → logprob: -3.963062286376953
    5. ' ' → logprob: -5.213062286376953
    6. 'step' → logprob: -5.838062286376953
    7. ' étapes' → logprob: -6.713062286376953
    8. ' fois' → logprob: -7.213062286376953
    9. 'ét' → logprob: -7.463062286376953
    10. 'fois' → logprob: -7.588062286376953

Token 137: '.
' (ID: 558)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -1.1064422130584717
    2. '    
' → logprob: -1.1064422130584717
    3. '   ' → logprob: -1.2314422130584717
    4. '  
' → logprob: -3.8564422130584717
    5. '   
' → logprob: -3.9814422130584717
    6. '\n' → logprob: -5.981442451477051
    7. ' 
' → logprob: -6.356442451477051
    8. '\' → logprob: -6.731442451477051
    9. '     
' → logprob: -8.23144245147705
    10. 'n' → logprob: -8.35644245147705

Token 138: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03956640511751175
    2. '
' → logprob: -3.9145665168762207
    3. '    
' → logprob: -4.039566516876221
    4. '   
' → logprob: -7.914566516876221
    5. '\n' → logprob: -8.039566040039062
    6. '\' → logprob: -8.664566040039062
    7. ' 
' → logprob: -8.789566040039062
    8. '  
' → logprob: -9.039566040039062
    9. '```' → logprob: -10.664566040039062
    10. '     
' → logprob: -10.914566040039062

Token 139: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4289316236972809
    2. ' steps' → logprob: -1.6789315938949585
    3. ' if' → logprob: -2.428931713104248
    4. 'if' → logprob: -3.178931713104248
    5. 'steps' → logprob: -3.803931713104248
    6. '
' → logprob: -5.553931713104248
    7. ' return' → logprob: -6.178931713104248
    8. '    
' → logprob: -6.428931713104248
    9. 'return' → logprob: -6.803931713104248
    10. ' step' → logprob: -7.553931713104248

Token 140: ' On' (ID: 2160)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -1.0155380964279175
    2. 'if' → logprob: -1.1405380964279175
    3. '   ' → logprob: -1.7655380964279175
    4. ' steps' → logprob: -2.265538215637207
    5. 'steps' → logprob: -3.265538215637207
    6. 'return' → logprob: -6.140538215637207
    7. ' return' → logprob: -6.265538215637207
    8. ' remaining' → logprob: -8.265538215637207
    9. 'remaining' → logprob: -8.390538215637207
    10. ' step' → logprob: -9.015538215637207

Token 141: ' calc' (ID: 25691)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -1.442344307899475
    2. ' if' → logprob: -1.942344307899475
    3. 'if' → logprob: -2.4423441886901855
    4. ' avance' → logprob: -2.5673441886901855
    5. 'avance' → logprob: -2.6923441886901855
    6. ' steps' → logprob: -2.6923441886901855
    7. '   ' → logprob: -2.8173441886901855
    8. 'return' → logprob: -2.9423441886901855
    9. ' peux' → logprob: -3.1923441886901855
    10. ' pas' → logprob: -4.0673441886901855

Token 142: 'ule' (ID: 1601)
  Prédit: 'ule'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ule' → logprob: -0.10528310388326645
    2. 'ul' → logprob: -2.35528302192688
    3. 'uler' → logprob: -6.105283260345459
    4. 'u' → logprob: -7.480283260345459
    5. 'ulate' → logprob: -7.730283260345459
    6. 'ulte' → logprob: -7.730283260345459
    7. 'ulé' → logprob: -7.980283260345459
    8. 'cule' → logprob: -8.6052827835083
    9. 'l' → logprob: -8.9802827835083
    10. '_' → logprob: -9.2302827835083

Token 143: ' le' (ID: 505)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.39922982454299927
    2. ' le' → logprob: -1.5242297649383545
    3. ' la' → logprob: -2.6492297649383545
    4. '   ' → logprob: -4.649230003356934
    5. ' steps' → logprob: -4.774230003356934
    6. ' ' → logprob: -5.149230003356934
    7. ' l' → logprob: -5.899230003356934
    8. '(' → logprob: -6.024230003356934
    9. ' les' → logprob: -6.149230003356934
    10. ' ' → logprob: -6.649230003356934

Token 144: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.14086398482322693
    2. 'nombre' → logprob: -2.6408638954162598
    3. 'steps' → logprob: -4.26586389541626
    4. ' steps' → logprob: -4.39086389541626
    5. 'import' → logprob: -4.64086389541626
    6. ' pas' → logprob: -5.39086389541626
    7. '   ' → logprob: -5.51586389541626
    8. 'pas' → logprob: -5.64086389541626
    9. ' return' → logprob: -5.89086389541626
    10. 'return' → logprob: -6.14086389541626

Token 145: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.655921995639801
    2. '_d' → logprob: -1.2809219360351562
    3. 'd' → logprob: -2.4059219360351562
    4. '_' → logprob: -2.4059219360351562
    5. '_total' → logprob: -4.780921936035156
    6. '_steps' → logprob: -5.780921936035156
    7. '_de' → logprob: -6.030921936035156
    8. '   ' → logprob: -6.280921936035156
    9. ' total' → logprob: -6.905921936035156
    10. ' nécessaire' → logprob: -7.030921936035156

Token 146: ''av' (ID: 31947)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.002665192587301135
    2. ' _' → logprob: -6.377665042877197
    3. ' étapes' → logprob: -8.127665519714355
    4. ' pas' → logprob: -8.627665519714355
    5. ' espaces' → logprob: -9.002665519714355
    6. ' steps' → logprob: -10.127665519714355
    7. 's' → logprob: -10.252665519714355
    8. '_steps' → logprob: -10.252665519714355
    9. '_pas' → logprob: -10.252665519714355
    10. 'é' → logprob: -10.377665519714355

Token 147: 'anc' (ID: 1054)
  Prédit: 'anc'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'anc' → logprob: -0.5355069041252136
    2. 'ances' → logprob: -1.7855069637298584
    3. 'ance' → logprob: -2.6605069637298584
    4. 'ancée' → logprob: -2.6605069637298584
    5. 'ancements' → logprob: -3.5355069637298584
    6. 'ancé' → logprob: -3.6605069637298584
    7. 'antages' → logprob: -4.285506725311279
    8. 'anç' → logprob: -4.410506725311279
    9. 'ancement' → logprob: -4.785506725311279
    10. 'al' → logprob: -5.535506725311279

Token 148: 'ées' (ID: 5161)
  Prédit: 'ées'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ées' → logprob: -0.3783472180366516
    2. 'es' → logprob: -1.8783471584320068
    3. 'er' → logprob: -2.128347158432007
    4. 'és' → logprob: -4.128347396850586
    5. 'ée' → logprob: -4.878347396850586
    6. 'ance' → logprob: -5.128347396850586
    7. 'ers' → logprob: -5.253347396850586
    8. 'ant' → logprob: -5.628347396850586
    9. 'é' → logprob: -6.253347396850586
    10. 'ances' → logprob: -6.878347396850586

Token 149: ' nécessaires' (ID: 74402)
  Prédit: ' nécessaires'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nécessaires' → logprob: -0.22535039484500885
    2. '   ' → logprob: -2.1003503799438477
    3. ' nécessaire' → logprob: -3.4753503799438477
    4. ' supplémentaires' → logprob: -3.7253503799438477
    5. '_' → logprob: -5.350350379943848
    6. ' necess' → logprob: -5.600350379943848
    7. ' ' → logprob: -6.225350379943848
    8. ' =' → logprob: -6.350350379943848
    9. 'necess' → logprob: -6.475350379943848
    10. ' necessary' → logprob: -6.475350379943848

Token 150: ' pour' (ID: 1930)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012858765199780464
    2. ':' → logprob: -5.387858867645264
    3. '    
' → logprob: -5.387858867645264
    4. ' =' → logprob: -7.137858867645264
    5. ' :' → logprob: -7.262858867645264
    6. ',' → logprob: -7.262858867645264
    7. ' ' → logprob: -8.137858390808105
    8. '   
' → logprob: -8.887858390808105
    9. '.' → logprob: -9.262858390808105
    10. '    ' → logprob: -9.387858390808105

Token 151: ' couvrir' (ID: 197187)
  Prédit: ' couvrir'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' couvrir' → logprob: -0.9331743717193604
    2. 'atte' → logprob: -1.4331743717193604
    3. ' parcour' → logprob: -1.6831743717193604
    4. ' atteindre' → logprob: -1.8081743717193604
    5. ' franch' → logprob: -5.558174133300781
    6. 'par' → logprob: -5.683174133300781
    7. 'c' → logprob: -6.058174133300781
    8. ' arriver' → logprob: -6.558174133300781
    9. ' atte' → logprob: -6.933174133300781
    10. ' dépasser' → logprob: -7.058174133300781

Token 152: ' les' (ID: 1341)
  Prédit: ' N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.9640995264053345
    2. ' (' → logprob: -1.3390995264053345
    3. ' la' → logprob: -1.5890995264053345
    4. ' le' → logprob: -2.964099407196045
    5. ' tout' → logprob: -3.339099407196045
    6. ' ' → logprob: -3.839099407196045
    7. ' les' → logprob: -4.464099407196045
    8. '   ' → logprob: -5.214099407196045
    9. ' toute' → logprob: -5.214099407196045
    10. ' au' → logprob: -5.464099407196045

Token 153: ' (' (ID: 350)
  Prédit: ' N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.32421955466270447
    2. 'N' → logprob: -1.3242195844650269
    3. ' (' → logprob: -5.324219703674316
    4. '(N' → logprob: -6.074219703674316
    5. 'élé' → logprob: -6.949219703674316
    6. ' éléments' → logprob: -7.074219703674316
    7. ' rest' → logprob: -8.324219703674316
    8. 'rest' → logprob: -8.324219703674316
    9. 'é' → logprob: -8.949219703674316
    10. ' ' → logprob: -8.949219703674316

Token 154: 'N' (ID: 45)
  Prédit: ' N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.3486441671848297
    2. 'N' → logprob: -1.2236441373825073
    3. '   ' → logprob: -9.848644256591797
    4. ' (' → logprob: -10.223644256591797
    5. 'n' → logprob: -10.348644256591797
    6. ' ' → logprob: -10.598644256591797
    7. ')' → logprob: -11.223644256591797
    8. ' max' → logprob: -11.473644256591797
    9. 'max' → logprob: -11.848644256591797
    10. '(N' → logprob: -12.098644256591797

Token 155: '-' (ID: 12)
  Prédit: ' -'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.1432693898677826
    2. '-' → logprob: -2.0182693004608154
    3. ' ' → logprob: -8.268269538879395
    4. ')' → logprob: -8.393269538879395
    5. ' )' → logprob: -9.268269538879395
    6. ' ' → logprob: -11.643269538879395
    7. '1' → logprob: -12.893269538879395
    8. '   ' → logprob: -13.143269538879395
    9. '  ' → logprob: -14.518269538879395
    10. ')-' → logprob: -14.893269538879395

Token 156: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.026552241295576096
    2. ' ' → logprob: -3.651552200317383
    3. ')' → logprob: -9.026552200317383
    4. '-' → logprob: -9.276552200317383
    5. ' -' → logprob: -11.026552200317383
    6. '2' → logprob: -12.464052200317383
    7. ' )' → logprob: -12.589052200317383
    8. '```' → logprob: -12.589052200317383
    9. '   ' → logprob: -13.151552200317383
    10. ' ' → logprob: -13.401552200317383

Token 157: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.17996323108673096
    2. ' )' → logprob: -1.804963231086731
    3. ' ' → logprob: -9.429963111877441
    4. ' ' → logprob: -10.054963111877441
    5. ' )
' → logprob: -11.179963111877441
    6. ' éléments' → logprob: -11.304963111877441
    7. '-' → logprob: -11.554963111877441
    8. ' -' → logprob: -12.054963111877441
    9. ')
' → logprob: -12.179963111877441
    10. ')`' → logprob: -12.492463111877441

Token 158: ' positions' (ID: 15897)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.6034765243530273
    2. ' positions' → logprob: -1.6034765243530273
    3. ' pas' → logprob: -1.9784765243530273
    4. ' éléments' → logprob: -2.6034765243530273
    5. ' espaces' → logprob: -2.7284765243530273
    6. ' lignes' → logprob: -3.1034765243530273
    7. ' steps' → logprob: -3.3534765243530273
    8. ' elements' → logprob: -3.6034765243530273
    9. ' à' → logprob: -3.7284765243530273
    10. 'positions' → logprob: -3.8534765243530273

Token 159: ' restantes' (ID: 159241)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.013538522645831108
    2. '    
' → logprob: -4.513538360595703
    3. ',' → logprob: -7.513538360595703
    4. '
' → logprob: -8.013538360595703
    5. '   
' → logprob: -8.013538360595703
    6. '.' → logprob: -8.013538360595703
    7. ':' → logprob: -8.513538360595703
    8. '    ' → logprob: -8.888538360595703
    9. '     
' → logprob: -9.138538360595703
    10. ' 
' → logprob: -9.888538360595703

Token 160: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0892864316701889
    2. '    
' → logprob: -2.5892863273620605
    3. '
' → logprob: -4.8392863273620605
    4. '   
' → logprob: -6.4642863273620605
    5. '  
' → logprob: -8.589286804199219
    6. ' 
' → logprob: -9.339286804199219
    7. ',' → logprob: -9.339286804199219
    8. ':' → logprob: -9.464286804199219
    9. '     
' → logprob: -9.589286804199219
    10. '\n' → logprob: -9.839286804199219

Token 161: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0017349174013361335
    2. '    
' → logprob: -6.626734733581543
    3. '
' → logprob: -8.001734733581543
    4. '   
' → logprob: -10.751734733581543
    5. 'return' → logprob: -11.251734733581543
    6. '  
' → logprob: -12.001734733581543
    7. '     
' → logprob: -12.251734733581543
    8. ' 
' → logprob: -12.251734733581543
    9. '    ' → logprob: -12.501734733581543
    10. ' return' → logprob: -12.501734733581543

Token 162: ' ans' (ID: 3345)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13714636862277985
    2. ' steps' → logprob: -2.512146472930908
    3. ' if' → logprob: -3.762146472930908
    4. 'steps' → logprob: -4.512146472930908
    5. 'if' → logprob: -5.262146472930908
    6. '    
' → logprob: -5.637146472930908
    7. ' return' → logprob: -6.137146472930908
    8. '
' → logprob: -7.387146472930908
    9. 'return' → logprob: -7.512146472930908
    10. ' step' → logprob: -9.01214599609375

Token 163: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.008627224713563919
    2. '=' → logprob: -4.758627414703369
    3. '_' → logprob: -12.633626937866211
    4. ' ' → logprob: -12.758626937866211
    5. '   ' → logprob: -13.258626937866211
    6. ' =
' → logprob: -13.508626937866211
    7. ' ' → logprob: -14.133626937866211
    8. '=int' → logprob: -14.258626937866211
    9. ' =(' → logprob: -14.758626937866211
    10. '  ' → logprob: -14.758626937866211

Token 164: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.14301906526088715
    2. '(N' → logprob: -2.268018960952759
    3. '1' → logprob: -4.268019199371338
    4. '((' → logprob: -5.018019199371338
    5. ' ((' → logprob: -5.768019199371338
    6. '(' → logprob: -5.893019199371338
    7. ' ' → logprob: -6.143019199371338
    8. '0' → logprob: -7.018019199371338
    9. 'max' → logprob: -10.01801872253418
    10. '(n' → logprob: -10.39301872253418

Token 165: 'N' (ID: 45)
  Prédit: 'N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.0024569875095039606
    2. '(N' → logprob: -6.377457141876221
    3. ' N' → logprob: -7.377457141876221
    4. ' (' → logprob: -9.377456665039062
    5. '   ' → logprob: -10.377456665039062
    6. '(' → logprob: -12.127456665039062
    7. 'max' → logprob: -12.627456665039062
    8. ' ' → logprob: -12.877456665039062
    9. '	N' → logprob: -13.752456665039062
    10. '(max' → logprob: -15.377456665039062

Token 166: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.06997456401586533
    2. '-' → logprob: -2.694974660873413
    3. '1' → logprob: -10.694974899291992
    4. ' ' → logprob: -11.694974899291992
    5. ')' → logprob: -12.569974899291992
    6. ' +' → logprob: -13.444974899291992
    7. ' )' → logprob: -14.257474899291992
    8. ' ' → logprob: -15.257474899291992
    9. '+' → logprob: -15.319974899291992
    10. ' -
' → logprob: -15.944974899291992

Token 167: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0550566166639328
    2. ' ' → logprob: -2.930056571960449
    3. '2' → logprob: -8.80505657196045
    4. ')' → logprob: -11.05505657196045
    5. '   ' → logprob: -13.11755657196045
    6. '<|end|>' → logprob: -13.68005657196045
    7. '```' → logprob: -13.74255657196045
    8. '-' → logprob: -13.99255657196045
    9. '
' → logprob: -14.18005657196045
    10. '  ' → logprob: -15.11755657196045

Token 168: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -7.827200897736475e-05
    2. ' ' → logprob: -9.750078201293945
    3. '2' → logprob: -11.000078201293945
    4. ')' → logprob: -13.000078201293945
    5. '   ' → logprob: -15.250078201293945
    6. '
' → logprob: -15.437578201293945
    7. '```' → logprob: -16.062578201293945
    8. '<|end|>' → logprob: -16.437578201293945
    9. '-' → logprob: -16.812578201293945
    10. '۱' → logprob: -16.875078201293945

Token 169: ')' (ID: 8)
  Prédit: ' +'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.08969462662935257
    2. '+' → logprob: -3.0896947383880615
    3. ')' → logprob: -3.2146947383880615
    4. ' )' → logprob: -9.46469497680664
    5. ' ' → logprob: -11.33969497680664
    6. '+(' → logprob: -11.71469497680664
    7. '   ' → logprob: -13.08969497680664
    8. ')//' → logprob: -13.58969497680664
    9. '+)' → logprob: -13.71469497680664
    10. ' +(' → logprob: -13.83969497680664

Token 170: ' //' (ID: 602)
  Prédit: ' //'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.08927346765995026
    2. ' +' → logprob: -2.589273452758789
    3. '//' → logprob: -5.339273452758789
    4. '+' → logprob: -5.464273452758789
    5. ' ' → logprob: -6.964273452758789
    6. ' (' → logprob: -9.839273452758789
    7. '
' → logprob: -9.964273452758789
    8. ' //(' → logprob: -10.089273452758789
    9. ' /' → logprob: -10.214273452758789
    10. ' if' → logprob: -10.464273452758789

Token 171: ' (' (ID: 350)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.31346622109413147
    2. ' K' → logprob: -1.313466191291809
    3. ' (' → logprob: -8.81346607208252
    4. '(' → logprob: -10.31346607208252
    5. '(K' → logprob: -11.43846607208252
    6. ' ' → logprob: -11.93846607208252
    7. '	K' → logprob: -12.68846607208252
    8. '   ' → logprob: -14.56346607208252
    9. '<|end|>' → logprob: -14.68846607208252
    10. ')' → logprob: -15.31346607208252

Token 172: 'K' (ID: 42)
  Prédit: 'K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.00038348292582668364
    2. ' K' → logprob: -7.875383377075195
    3. '(K' → logprob: -13.500383377075195
    4. '   ' → logprob: -14.375383377075195
    5. ' (' → logprob: -14.500383377075195
    6. ')' → logprob: -14.625383377075195
    7. '(' → logprob: -15.625383377075195
    8. '	K' → logprob: -15.625383377075195
    9. '<|end|>' → logprob: -17.000383377075195
    10. 'k' → logprob: -17.875383377075195

Token 173: ' -' (ID: 533)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5696325302124023
    2. ' -' → logprob: -1.3196325302124023
    3. '-' → logprob: -2.3196325302124023
    4. ' )' → logprob: -2.6946325302124023
    5. '1' → logprob: -7.569632530212402
    6. ' ' → logprob: -8.694632530212402
    7. ')+' → logprob: -8.819632530212402
    8. '   ' → logprob: -9.819632530212402
    9. '-)' → logprob: -9.819632530212402
    10. ' +' → logprob: -9.819632530212402

Token 174: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0006278486107476056
    2. ' ' → logprob: -7.3756279945373535
    3. ')' → logprob: -14.250627517700195
    4. '<|end|>' → logprob: -14.375627517700195
    5. '   ' → logprob: -17.125627517700195
    6. '  ' → logprob: -18.188127517700195
    7. '
' → logprob: -18.313127517700195
    8. '۱' → logprob: -18.375627517700195
    9. '<|end|>' → logprob: -18.500627517700195
    10. '0' → logprob: -18.625627517700195

Token 175: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -7.226628895296017e-06
    2. ' ' → logprob: -11.875007629394531
    3. ')' → logprob: -15.750007629394531
    4. '   ' → logprob: -17.43750762939453
    5. '１' → logprob: -18.25000762939453
    6. '<|end|>' → logprob: -18.25000762939453
    7. '0' → logprob: -18.31250762939453
    8. '  ' → logprob: -18.50000762939453
    9. '۱' → logprob: -18.50000762939453
    10. '১' → logprob: -19.18750762939453

Token 176: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.000541592831723392
    2. ' )' → logprob: -8.375541687011719
    3. ')+' → logprob: -9.125541687011719
    4. ' +' → logprob: -9.375541687011719
    5. ')
' → logprob: -9.750541687011719
    6. '+' → logprob: -9.875541687011719
    7. ' if' → logprob: -12.375541687011719
    8. 'if' → logprob: -13.625541687011719
    9. ')

' → logprob: -14.500541687011719
    10. '+)' → logprob: -14.500541687011719

Token 177: ' ' (ID: 220)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.2140136957168579
    2. ' +' → logprob: -2.4640135765075684
    3. '
' → logprob: -3.3390135765075684
    4. 'if' → logprob: -3.4640135765075684
    5. '+
' → logprob: -3.8390135765075684
    6. ' if' → logprob: -4.089013576507568
    7. '   ' → logprob: -6.589013576507568
    8. ' +
' → logprob: -7.214013576507568
    9. ' 
' → logprob: -9.214014053344727
    10. '<|end|>' → logprob: -9.214014053344727

Token 178: ' #' (ID: 1069)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -1.0744444131851196
    2. 'if' → logprob: -1.0744444131851196
    3. '+' → logprob: -1.3244444131851196
    4. ' +' → logprob: -3.82444429397583
    5. ' if' → logprob: -3.82444429397583
    6. '+
' → logprob: -5.19944429397583
    7. '<|end|>' → logprob: -6.44944429397583
    8. ' +
' → logprob: -9.199444770812988
    9. ' 
' → logprob: -9.699444770812988
    10. ';if' → logprob: -10.574444770812988

Token 179: ' Division' (ID: 25413)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 180: ' entière' (ID: 61583)
  Prédit: ' +'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.08238159865140915
    2. '   ' → logprob: -3.4573814868927
    3. '+' → logprob: -3.9573814868927
    4. '<|end|>' → logprob: -4.457381725311279
    5. '    ' → logprob: -4.832381725311279
    6. ' plus' → logprob: -5.957381725311279
    7. ' ' → logprob: -6.207381725311279
    8. ')' → logprob: -6.582381725311279
    9. '  ' → logprob: -7.332381725311279
    10. ' if' → logprob: -8.082381248474121

Token 181: ' pour' (ID: 1930)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.9062278270721436
    2. ' +' → logprob: -1.4062278270721436
    3. '
' → logprob: -2.1562278270721436
    4. '<|end|>' → logprob: -2.2812278270721436
    5. ' if' → logprob: -2.9062278270721436
    6. 'if' → logprob: -3.2812278270721436
    7. '+
' → logprob: -3.9062278270721436
    8. '   ' → logprob: -4.656228065490723
    9. ' +
' → logprob: -5.406228065490723
    10. '<|end|>' → logprob: -5.656228065490723

Token 182: ' le' (ID: 505)
  Prédit: ' obtenir'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' obtenir' → logprob: -0.27617770433425903
    2. ' calcul' → logprob: -2.0261776447296143
    3. ' déterminer' → logprob: -3.2761776447296143
    4. ' compter' → logprob: -4.026177883148193
    5. ' le' → logprob: -4.151177883148193
    6. ' avoir' → logprob: -5.151177883148193
    7. ' trouver' → logprob: -5.276177883148193
    8. 'calcul' → logprob: -5.276177883148193
    9. ' s' → logprob: -5.776177883148193
    10. ' couvrir' → logprob: -5.901177883148193

Token 183: ' nombre' (ID: 9733)
  Prédit: 'nombre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'nombre' → logprob: -0.08988707512617111
    2. ' nombre' → logprob: -2.4648871421813965
    3. 'quot' → logprob: -8.214886665344238
    4. 'calcul' → logprob: -9.089886665344238
    5. 'pas' → logprob: -9.214886665344238
    6. 'minimum' → logprob: -9.464886665344238
    7. 'ans' → logprob: -10.089886665344238
    8. ' quotient' → logprob: -10.089886665344238
    9. 'reste' → logprob: -10.214886665344238
    10. 'temps' → logprob: -10.589886665344238

Token 184: ' minimal' (ID: 19957)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.10887634009122849
    2. '<|end|>' → logprob: -2.7338762283325195
    3. '+' → logprob: -4.6088762283325195
    4. ' +' → logprob: -4.9838762283325195
    5. ' de' → logprob: -5.3588762283325195
    6. 'd' → logprob: -5.4838762283325195
    7. ' plus' → logprob: -5.4838762283325195
    8. ' des' → logprob: -6.1088762283325195
    9. '<|end|>' → logprob: -6.6088762283325195
    10. '    ' → logprob: -6.8588762283325195

Token 185: ' d' (ID: 272)
  Prédit: ' +'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.5183290839195251
    2. '+' → logprob: -1.39332914352417
    3. ' d' → logprob: -2.26832914352417
    4. '<|end|>' → logprob: -3.89332914352417
    5. 'd' → logprob: -4.64332914352417
    6. ' plus' → logprob: -5.26832914352417
    7. 'ans' → logprob: -5.51832914352417
    8. ' ans' → logprob: -6.14332914352417
    9. 'steps' → logprob: -6.14332914352417
    10. '<|end|>' → logprob: -6.14332914352417

Token 186: ''ét' (ID: 23771)
  Prédit: ' étapes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' étapes' → logprob: -0.26077309250831604
    2. ' avanc' → logprob: -2.135773181915283
    3. ' ' → logprob: -3.885773181915283
    4. ' avances' → logprob: -4.135773181915283
    5. ' pas' → logprob: -4.635773181915283
    6. ' déplacements' → logprob: -4.635773181915283
    7. ' steps' → logprob: -4.760773181915283
    8. 'ét' → logprob: -5.135773181915283
    9. ' avan' → logprob: -5.135773181915283
    10. '_' → logprob: -5.135773181915283

Token 187: 'apes' (ID: 11864)
  Prédit: 'apes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'apes' → logprob: -0.0031813981477171183
    2. 'ap' → logprob: -6.253181457519531
    3. 'ape' → logprob: -7.003181457519531
    4. 'app' → logprob: -9.378181457519531
    5. 'a' → logprob: -9.753181457519531
    6. 'ап' → logprob: -10.753181457519531
    7. '**' → logprob: -10.878181457519531
    8. '"' → logprob: -11.128181457519531
    9. '   ' → logprob: -11.128181457519531
    10. 'apses' → logprob: -11.378181457519531

Token 188: ' compl' (ID: 8432)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4587285816669464
    2. '+' → logprob: -1.958728551864624
    3. ' +' → logprob: -2.458728551864624
    4. ' if' → logprob: -3.083728551864624
    5. 'if' → logprob: -3.333728551864624
    6. '
' → logprob: -3.458728551864624
    7. '+
' → logprob: -4.708728790283203
    8. 'return' → logprob: -5.083728790283203
    9. ' +
' → logprob: -5.708728790283203
    10. '    
' → logprob: -6.083728790283203

Token 189: 'ètes' (ID: 81660)
  Prédit: 'ètes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ètes' → logprob: -0.0047489795833826065
    2. 'etes' → logprob: -6.004748821258545
    3. 'tes' → logprob: -6.879748821258545
    4. 'è' → logprob: -7.754748821258545
    5. 'ète' → logprob: -7.879748821258545
    6. 'et' → logprob: -9.129749298095703
    7. 'êtes' → logprob: -10.004749298095703
    8. 'ément' → logprob: -10.004749298095703
    9. 'èt' → logprob: -10.254749298095703
    10. 'ét' → logprob: -10.504749298095703

Token 190: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0159789323806763
    2. 'if' → logprob: -1.5159789323806763
    3. ' if' → logprob: -1.8909789323806763
    4. '+' → logprob: -2.2659788131713867
    5. '
' → logprob: -2.6409788131713867
    6. ' +' → logprob: -3.2659788131713867
    7. 'return' → logprob: -3.7659788131713867
    8. '+
' → logprob: -4.765978813171387
    9. ' 
' → logprob: -5.265978813171387
    10. '    
' → logprob: -5.390978813171387

Token 191: '   ' (ID: 271)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.4637311100959778
    2. '   ' → logprob: -1.838731050491333
    3. '+' → logprob: -2.338731050491333
    4. ' if' → logprob: -2.463731050491333
    5. ' +' → logprob: -3.588731050491333
    6. 'return' → logprob: -6.588731288909912
    7. '+
' → logprob: -7.463731288909912
    8. 'ans' → logprob: -8.338730812072754
    9. ' +
' → logprob: -8.963730812072754
    10. '    
' → logprob: -9.213730812072754

Token 192: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.0919659286737442
    2. ' if' → logprob: -2.591965913772583
    3. 'return' → logprob: -4.716966152191162
    4. '   ' → logprob: -5.841966152191162
    5. ' return' → logprob: -7.591966152191162
    6. 'ans' → logprob: -7.841966152191162
    7. ' ans' → logprob: -8.966965675354004
    8. '+' → logprob: -10.216965675354004
    9. ' +' → logprob: -10.216965675354004
    10. '
' → logprob: -11.091965675354004

Token 193: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.0017206385964527726
    2. '(N' → logprob: -6.626720428466797
    3. ' N' → logprob: -8.376720428466797
    4. ' ' → logprob: -9.251720428466797
    5. '(' → logprob: -10.376720428466797
    6. ' ' → logprob: -11.251720428466797
    7. 'N' → logprob: -11.376720428466797
    8. ' ans' → logprob: -12.251720428466797
    9. '(ans' → logprob: -12.251720428466797
    10. ' ((' → logprob: -13.501720428466797

Token 194: 'N' (ID: 45)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.5780547261238098
    2. '(N' → logprob: -0.9530547261238098
    3. 'N' → logprob: -2.953054666519165
    4. ' N' → logprob: -6.828054904937744
    5. '(' → logprob: -9.078054428100586
    6. ' ' → logprob: -10.578054428100586
    7. '   ' → logprob: -10.578054428100586
    8. ')' → logprob: -12.203054428100586
    9. '  ' → logprob: -12.203054428100586
    10. '(
' → logprob: -13.203054428100586

Token 195: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.056072745472192764
    2. '-' → logprob: -2.93107271194458
    3. ' >' → logprob: -7.43107271194458
    4. ' ' → logprob: -8.056073188781738
    5. '>' → logprob: -8.681073188781738
    6. ')' → logprob: -9.431073188781738
    7. ' )' → logprob: -11.181073188781738
    8. '   ' → logprob: -12.556073188781738
    9. ' %' → logprob: -12.993573188781738
    10. ' !=' → logprob: -13.493573188781738

Token 196: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.043001025915145874
    2. ' ' → logprob: -3.1680009365081787
    3. ')' → logprob: -13.668001174926758
    4. '   ' → logprob: -15.043001174926758
    5. '-' → logprob: -15.605501174926758
    6. '```' → logprob: -16.730501174926758
    7. '2' → logprob: -16.918001174926758
    8. '  ' → logprob: -17.355501174926758
    9. '۱' → logprob: -17.418001174926758
    10. '
' → logprob: -17.418001174926758

Token 197: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0001246348983841017
    2. ' ' → logprob: -9.00012493133545
    3. '   ' → logprob: -14.62512493133545
    4. ')' → logprob: -15.18762493133545
    5. '2' → logprob: -15.68762493133545
    6. '```' → logprob: -16.062623977661133
    7. '-' → logprob: -16.750123977661133
    8. '  ' → logprob: -17.500123977661133
    9. '۱' → logprob: -17.625123977661133
    10. '１' → logprob: -17.687623977661133

Token 198: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0010565068805590272
    2. ' )' → logprob: -6.876056671142578
    3. ')%' → logprob: -10.876056671142578
    4. '%' → logprob: -12.876056671142578
    5. '%)' → logprob: -14.626056671142578
    6. ' %' → logprob: -14.751056671142578
    7. ' ' → logprob: -14.751056671142578
    8. ')
' → logprob: -15.001056671142578
    9. '   ' → logprob: -15.626056671142578
    10. '）' → logprob: -15.626056671142578

Token 199: ' %' (ID: 1851)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -0.5773618817329407
    2. ' %' → logprob: -0.8273618817329407
    3. ')' → logprob: -6.952362060546875
    4. '%(' → logprob: -7.952362060546875
    5. ' ' → logprob: -9.452362060546875
    6. ' %(' → logprob: -11.952362060546875
    7. ' )' → logprob: -12.452362060546875
    8. '%s' → logprob: -12.452362060546875
    9. '>' → logprob: -12.702362060546875
    10. ' %
' → logprob: -12.827362060546875

Token 200: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.0052362410351634026
    2. '(K' → logprob: -5.2552361488342285
    3. '(' → logprob: -13.880236625671387
    4. '(k' → logprob: -14.380236625671387
    5. '<|end|>' → logprob: -14.630236625671387
    6. ' ' → logprob: -14.755236625671387
    7. '(KERN' → logprob: -16.38023567199707
    8. '(N' → logprob: -16.88023567199707
    9. '(Key' → logprob: -17.75523567199707
    10. ')' → logprob: -17.88023567199707

Token 201: 'K' (ID: 42)
  Prédit: 'K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.12297819554805756
    2. '(K' → logprob: -2.3729782104492188
    3. ' (' → logprob: -4.372978210449219
    4. ' K' → logprob: -4.622978210449219
    5. '(' → logprob: -10.497978210449219
    6. '   ' → logprob: -10.747978210449219
    7. ')' → logprob: -11.622978210449219
    8. ' ' → logprob: -12.122978210449219
    9. '	K' → logprob: -12.622978210449219
    10. '<K' → logprob: -13.247978210449219

Token 202: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.5759584903717041
    2. '-' → logprob: -0.8259584903717041
    3. ')' → logprob: -11.200958251953125
    4. ' ' → logprob: -12.825958251953125
    5. '1' → logprob: -13.200958251953125
    6. '   ' → logprob: -15.325958251953125
    7. ' (' → logprob: -15.825958251953125
    8. '<|end|>' → logprob: -16.075958251953125
    9. '```' → logprob: -16.450958251953125
    10. '-)' → logprob: -16.825958251953125

Token 203: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0006267757853493094
    2. ' ' → logprob: -7.375626564025879
    3. '   ' → logprob: -15.875626564025879
    4. '<|end|>' → logprob: -16.500627517700195
    5. '  ' → logprob: -17.438127517700195
    6. ')' → logprob: -18.063127517700195
    7. '```' → logprob: -18.375627517700195
    8. '۱' → logprob: -18.813127517700195
    9. '１' → logprob: -18.875627517700195
    10. '<|end|>' → logprob: -19.313127517700195

Token 204: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -7.493430894101039e-05
    2. ' ' → logprob: -9.500075340270996
    3. '   ' → logprob: -17.25007438659668
    4. '```' → logprob: -18.50007438659668
    5. '<|end|>' → logprob: -18.62507438659668
    6. '  ' → logprob: -19.00007438659668
    7. ')' → logprob: -19.50007438659668
    8. '`' → logprob: -20.06257438659668
    9. '[' → logprob: -20.18757438659668
    10. '(' → logprob: -20.43757438659668

Token 205: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02597326599061489
    2. ' !=' → logprob: -4.150973320007324
    3. '!=' → logprob: -5.400973320007324
    4. ')!=' → logprob: -5.400973320007324
    5. ' )' → logprob: -7.150973320007324
    6. '>' → logprob: -9.775973320007324
    7. ')>' → logprob: -11.150973320007324
    8. ' >' → logprob: -12.400973320007324
    9. '):' → logprob: -12.525973320007324
    10. ']!=' → logprob: -14.775973320007324

Token 206: ' !=' (ID: 1666)
  Prédit: ' !='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.35694748163223267
    2. '!=' → logprob: -1.231947422027588
    3. '>' → logprob: -4.981947422027588
    4. ' >' → logprob: -6.731947422027588
    5. ':' → logprob: -7.856947422027588
    6. ')!=' → logprob: -11.731947898864746
    7. ')' → logprob: -12.106947898864746
    8. ' ' → logprob: -12.731947898864746
    9. '==' → logprob: -12.731947898864746
    10. ' ==' → logprob: -13.606947898864746

Token 207: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.06196768581867218
    2. ' ' → logprob: -2.811967611312866
    3. ' ' → logprob: -17.436967849731445
    4. '   ' → logprob: -17.811967849731445
    5. '۰' → logprob: -17.936967849731445
    6. '<|end|>' → logprob: -18.436967849731445
    7. '  ' → logprob: -18.561967849731445
    8. '=' → logprob: -19.061967849731445
    9. '０' → logprob: -19.686967849731445
    10. '00' → logprob: -19.936967849731445

Token 208: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0001234428636962548
    2. ' ' → logprob: -9.000123023986816
    3. '   ' → logprob: -16.875123977661133
    4. '۰' → logprob: -17.875123977661133
    5. '  ' → logprob: -19.437623977661133
    6. '00' → logprob: -19.687623977661133
    7. '０' → logprob: -19.812623977661133
    8. '০' → logprob: -20.375123977661133
    9. '٠' → logprob: -20.437623977661133
    10. '    ' → logprob: -20.687623977661133

Token 209: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.08083157986402512
    2. ':
' → logprob: -2.580831527709961
    3. ' :' → logprob: -6.580831527709961
    4. ' :
' → logprob: -7.580831527709961
    5. '   ' → logprob: -10.830831527709961
    6. '):
' → logprob: -11.830831527709961
    7. '):' → logprob: -12.080831527709961
    8. ':return' → logprob: -12.205831527709961
    9. ':
' → logprob: -12.955831527709961
    10. '    ' → logprob: -14.330831527709961

Token 210: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.39223945140838623
    2. '   ' → logprob: -1.1422394514083862
    3. ' ans' → logprob: -5.392239570617676
    4. '    ' → logprob: -8.392239570617676
    5. 'ans' → logprob: -8.392239570617676
    6. '1' → logprob: -9.517239570617676
    7. '
' → logprob: -10.017239570617676
    8. '    
' → logprob: -10.017239570617676
    9. ' 
' → logprob: -10.517239570617676
    10. '	ans' → logprob: -10.642239570617676

Token 211: ' #' (ID: 1069)
  Prédit: ' ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ans' → logprob: -0.019215837121009827
    2. 'ans' → logprob: -4.019216060638428
    3. '   ' → logprob: -7.269216060638428
    4. '       ' → logprob: -8.26921558380127
    5. '	ans' → logprob: -9.51921558380127
    6. '(ans' → logprob: -11.76921558380127
    7. '_ans' → logprob: -11.89421558380127
    8. '    ' → logprob: -12.14421558380127
    9. ' 
' → logprob: -12.26921558380127
    10. '
' → logprob: -12.39421558380127

Token 212: ' Si' (ID: 7832)
  Prédit: ' ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ans' → logprob: -0.055125318467617035
    2. 'ans' → logprob: -2.9301252365112305
    3. '   ' → logprob: -8.68012523651123
    4. '	ans' → logprob: -10.55512523651123
    5. '    ' → logprob: -11.30512523651123
    6. '(ans' → logprob: -11.55512523651123
    7. '       ' → logprob: -12.05512523651123
    8. ' ' → logprob: -12.43012523651123
    9. ' ' → logprob: -12.55512523651123
    10. 'Ans' → logprob: -12.68012523651123

Token 213: ' division' (ID: 21629)
  Prédit: ' ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ans' → logprob: -0.06278147548437119
    2. 'ans' → logprob: -2.812781572341919
    3. '   ' → logprob: -8.31278133392334
    4. '(ans' → logprob: -8.56278133392334
    5. ' ' → logprob: -9.06278133392334
    6. ' (' → logprob: -9.68778133392334
    7. '    ' → logprob: -10.06278133392334
    8. ' la' → logprob: -10.06278133392334
    9. '	ans' → logprob: -10.06278133392334
    10. ' ' → logprob: -10.43778133392334

Token 214: ' non' (ID: 2893)
  Prédit: ' !='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.21460464596748352
    2. '!=' → logprob: -2.964604616165161
    3. '   ' → logprob: -3.589604616165161
    4. 'ans' → logprob: -3.714604616165161
    5. 'reste' → logprob: -4.21460485458374
    6. ' entière' → logprob: -4.33960485458374
    7. 'rest' → logprob: -4.83960485458374
    8. '(ans' → logprob: -5.21460485458374
    9. 'diff' → logprob: -5.46460485458374
    10. ' ans' → logprob: -5.46460485458374

Token 215: ' exacte' (ID: 188756)
  Prédit: ' entière'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' entière' → logprob: -1.14504873752594
    2. 'ent' → logprob: -1.27004873752594
    3. 'exact' → logprob: -2.0200486183166504
    4. 'n' → logprob: -2.1450486183166504
    5. ' n' → logprob: -2.6450486183166504
    6. ' exacte' → logprob: -3.1450486183166504
    7. 'ég' → logprob: -4.14504861831665
    8. ' ent' → logprob: -4.52004861831665
    9. ' exact' → logprob: -6.27004861831665
    10. 'enti' → logprob: -6.64504861831665

Token 216: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7788979411125183
    2. ',' → logprob: -0.9038979411125183
    3. '       ' → logprob: -2.153898000717163
    4. ':' → logprob: -5.028897762298584
    5. ' ans' → logprob: -5.403897762298584
    6. ' ,' → logprob: -5.528897762298584
    7. '           ' → logprob: -6.278897762298584
    8. ':
' → logprob: -6.653897762298584
    9. 'ans' → logprob: -7.028897762298584
    10. ',
' → logprob: -7.778897762298584

Token 217: ' il' (ID: 1793)
  Prédit: ' ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ans' → logprob: -0.022323882207274437
    2. 'ans' → logprob: -4.022324085235596
    3. '   ' → logprob: -6.147324085235596
    4. '       ' → logprob: -6.522324085235596
    5. '           ' → logprob: -8.397323608398438
    6. '	ans' → logprob: -8.897323608398438
    7. ' ' → logprob: -9.272323608398438
    8. '    ' → logprob: -10.522323608398438
    9. '(ans' → logprob: -10.772323608398438
    10. ' ' → logprob: -11.522323608398438

Token 218: ' reste' (ID: 26769)
  Prédit: ' faut'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' faut' → logprob: -0.5474263429641724
    2. '   ' → logprob: -1.6724263429641724
    3. ' ans' → logprob: -1.6724263429641724
    4. 'f' → logprob: -4.297426223754883
    5. ' y' → logprob: -4.297426223754883
    6. 'ans' → logprob: -4.922426223754883
    7. ' f' → logprob: -5.172426223754883
    8. '       ' → logprob: -6.797426223754883
    9. ' faudra' → logprob: -6.797426223754883
    10. ' faudrait' → logprob: -6.797426223754883

Token 219: ' des' (ID: 731)
  Prédit: ' une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.07292639464139938
    2. ' ' → logprob: -3.3229262828826904
    3. ' un' → logprob: -4.0729265213012695
    4. ' au' → logprob: -4.6979265213012695
    5. 'au' → logprob: -6.1979265213012695
    6. '   ' → logprob: -6.4479265213012695
    7. 'une' → logprob: -6.9479265213012695
    8. '1' → logprob: -7.1979265213012695
    9. ' a' → logprob: -7.4479265213012695
    10. '    ' → logprob: -7.5729265213012695

Token 220: ' positions' (ID: 15897)
  Prédit: 'positions'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'positions' → logprob: -1.1932438611984253
    2. ' positions' → logprob: -1.5682438611984253
    3. 'pas' → logprob: -1.9432438611984253
    4. ' pas' → logprob: -2.193243980407715
    5. ' éléments' → logprob: -2.443243980407715
    6. ' étapes' → logprob: -2.818243980407715
    7. 'élé' → logprob: -2.818243980407715
    8. ' steps' → logprob: -5.193243980407715
    9. ' déplacements' → logprob: -5.568243980407715
    10. 'ét' → logprob: -5.693243980407715

Token 221: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.12654782831668854
    2. '       ' → logprob: -2.7515478134155273
    3. ' supplémentaires' → logprob: -3.8765478134155273
    4. '   ' → logprob: -4.751547813415527
    5. ',' → logprob: -4.751547813415527
    6. ' ' → logprob: -5.251547813415527
    7. ' ,' → logprob: -5.751547813415527
    8. '    ' → logprob: -5.751547813415527
    9. 'à' → logprob: -6.126547813415527
    10. ' to' → logprob: -6.876547813415527

Token 222: ' couvrir' (ID: 197187)
  Prédit: 'par'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'par' → logprob: -0.7158312201499939
    2. ' parcour' → logprob: -1.0908312797546387
    3. 'fr' → logprob: -2.8408312797546387
    4. ' couvrir' → logprob: -2.9658312797546387
    5. ' franch' → logprob: -3.8408312797546387
    6. 'faire' → logprob: -4.590831279754639
    7. 'avance' → logprob: -5.340831279754639
    8. 'av' → logprob: -5.340831279754639
    9. 'cou' → logprob: -5.465831279754639
    10. ' avancer' → logprob: -5.715831279754639

Token 223: ',' (ID: 11)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.045350197702646255
    2. '   ' → logprob: -3.5453503131866455
    3. ',' → logprob: -5.170350074768066
    4. '
' → logprob: -5.920350074768066
    5. 'ans' → logprob: -6.045350074768066
    6. ' ans' → logprob: -6.045350074768066
    7. '           ' → logprob: -6.545350074768066
    8. '        
' → logprob: -8.795350074768066
    9. '    
' → logprob: -8.920350074768066
    10. ' ,' → logprob: -9.045350074768066

Token 224: ' donc' (ID: 14206)
  Prédit: ' ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ans' → logprob: -0.06722752004861832
    2. 'ans' → logprob: -2.942227602005005
    3. '       ' → logprob: -4.442227363586426
    4. '   ' → logprob: -7.942227363586426
    5. '	ans' → logprob: -10.067227363586426
    6. '           ' → logprob: -10.442227363586426
    7. ' ' → logprob: -10.692227363586426
    8. '    ' → logprob: -11.317227363586426
    9. ' ' → logprob: -11.317227363586426
    10. '        ' → logprob: -11.317227363586426

Token 225: ' une' (ID: 2463)
  Prédit: ' ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ans' → logprob: -0.2267119288444519
    2. 'ans' → logprob: -1.6017119884490967
    3. '   ' → logprob: -6.726711750030518
    4. '	ans' → logprob: -9.601712226867676
    5. '(ans' → logprob: -11.476712226867676
    6. '  ' → logprob: -12.351712226867676
    7. '    ' → logprob: -12.476712226867676
    8. ' ' → logprob: -12.726712226867676
    9. ' ' → logprob: -12.851712226867676
    10. '_ans' → logprob: -13.101712226867676

Token 226: ' étape' (ID: 83661)
  Prédit: ' étape'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' étape' → logprob: -0.019010350108146667
    2. 'ét' → logprob: -4.019010543823242
    3. ' étapes' → logprob: -8.269010543823242
    4. ' ' → logprob: -8.644010543823242
    5. ' step' → logprob: -9.769010543823242
    6. '+' → logprob: -9.894010543823242
    7. 'é' → logprob: -9.894010543823242
    8. ' supplémentaire' → logprob: -10.144010543823242
    9. '_' → logprob: -10.519010543823242
    10. 'step' → logprob: -10.644010543823242

Token 227: ' supplémentaire' (ID: 111252)
  Prédit: ' supplémentaire'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' supplémentaire' → logprob: -0.741189181804657
    2. ' de' → logprob: -1.3661892414093018
    3. 'supp' → logprob: -1.9911892414093018
    4. 'sup' → logprob: -3.1161892414093018
    5. 'de' → logprob: -3.1161892414093018
    6. '   ' → logprob: -3.3661892414093018
    7. ' supplémentaires' → logprob: -5.991189002990723
    8. ' supl' → logprob: -6.616189002990723
    9. ' supp' → logprob: -6.991189002990723
    10. ' sup' → logprob: -7.241189002990723

Token 228: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.025059523060917854
    2. '   ' → logprob: -3.775059461593628
    3. '
' → logprob: -7.400059700012207
    4. ' ans' → logprob: -7.775059700012207
    5. 'ans' → logprob: -7.900059700012207
    6. '           ' → logprob: -8.775059700012207
    7. ':
' → logprob: -9.775059700012207
    8. ',' → logprob: -10.150059700012207
    9. '    
' → logprob: -10.275059700012207
    10. ':' → logprob: -10.900059700012207

Token 229: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.22646024823188782
    2. '   ' → logprob: -1.6014602184295654
    3. 'ans' → logprob: -7.8514604568481445
    4. ' ans' → logprob: -7.9764604568481445
    5. '           ' → logprob: -9.101460456848145
    6. '        
' → logprob: -9.726460456848145
    7. '    
' → logprob: -9.976460456848145
    8. '    ' → logprob: -10.976460456848145
    9. '
' → logprob: -11.101460456848145
    10. '     ' → logprob: -11.101460456848145

Token 230: ' ans' (ID: 3345)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' (adapté à ' ans') → logprob: -0.613639771938324
    2. ' ans' → logprob: -0.863639771938324
    3. '       ' → logprob: -3.3636398315429688
    4. '   ' → logprob: -6.113639831542969
    5. '	ans' → logprob: -9.238639831542969
    6. '(ans' → logprob: -10.863639831542969
    7. 'return' → logprob: -11.613639831542969
    8. ' return' → logprob: -11.738639831542969
    9. ' ' → logprob: -11.738639831542969
    10. '_ans' → logprob: -12.238639831542969

Token 231: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.5759963393211365
    2. ' +=' → logprob: -0.8259963393211365
    3. '+' → logprob: -10.200996398925781
    4. '=' → logprob: -11.200996398925781
    5. ']+=' → logprob: -12.825996398925781
    6. '   ' → logprob: -13.075996398925781
    7. '+='' → logprob: -14.825996398925781
    8. ' =' → logprob: -14.950996398925781
    9. '+="' → logprob: -15.325996398925781
    10. ' +' → logprob: -15.450996398925781

Token 232: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -6.611323624383658e-05
    2. ' ' → logprob: -9.625065803527832
    3. '   ' → logprob: -17.50006675720215
    4. '```' → logprob: -20.12506675720215
    5. '  ' → logprob: -20.37506675720215
    6. '１' → logprob: -21.87506675720215
    7. '2' → logprob: -22.43756675720215
    8. '0' → logprob: -22.50006675720215
    9. '+' → logprob: -22.81256675720215
    10. '۱' → logprob: -22.93756675720215

Token 233: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -4.320199877838604e-07
    2. ' ' → logprob: -14.875
    3. '   ' → logprob: -20.375
    4. '```' → logprob: -20.625
    5. '１' → logprob: -23.0625
    6. '  ' → logprob: -23.25
    7. '0' → logprob: -23.625
    8. '۱' → logprob: -23.875
    9. '`' → logprob: -24.125
    10. '2' → logprob: -24.25

Token 234: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.2991170585155487
    2. '   ' → logprob: -1.424117088317871
    3. '    
' → logprob: -5.174117088317871
    4. ' return' → logprob: -5.549117088317871
    5. 'return' → logprob: -5.799117088317871
    6. '\n' → logprob: -5.924117088317871
    7. ' 
' → logprob: -7.049117088317871
    8. '  
' → logprob: -7.549117088317871
    9. '
' → logprob: -7.924117088317871
    10. '	return' → logprob: -8.049117088317871

Token 235: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.33290088176727295
    2. ' return' → logprob: -1.582900881767273
    3. 'return' → logprob: -2.5829010009765625
    4. '
' → logprob: -6.9579010009765625
    5. '    
' → logprob: -7.7079010009765625
    6. '	return' → logprob: -7.9579010009765625
    7. ' 
' → logprob: -8.832901000976562
    8. '\n' → logprob: -9.207901000976562
    9. ' ' → logprob: -9.832901000976562
    10. '  
' → logprob: -10.332901000976562

Token 236: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.6382865905761719
    2. '   ' → logprob: -1.1382865905761719
    3. ' return' → logprob: -1.8882865905761719
    4. '	return' → logprob: -9.763286590576172
    5. '    
' → logprob: -10.888286590576172
    6. '
' → logprob: -11.638286590576172
    7. ' ' → logprob: -12.013286590576172
    8. '  
' → logprob: -12.513286590576172
    9. '  ' → logprob: -12.888286590576172
    10. ':return' → logprob: -13.263286590576172

Token 237: ' ans' (ID: 3345)
  Prédit: ' ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ans' → logprob: -0.004083266947418451
    2. 'ans' → logprob: -5.504083156585693
    3. '(ans' → logprob: -12.379083633422852
    4. '	ans' → logprob: -14.379083633422852
    5. '_ans' → logprob: -16.75408363342285
    6. ' ' → logprob: -17.25408363342285
    7. ' an' → logprob: -18.12908363342285
    8. 'Ans' → logprob: -18.37908363342285
    9. ' Ans' → logprob: -20.00408363342285
    10. 'a' → logprob: -20.12908363342285

Token 238: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 239: '#' (ID: 2)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 240: ' Lecture' (ID: 106534)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 241: ' des' (ID: 731)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.6732476949691772
    2. '(' → logprob: -1.1732476949691772
    3. ' (' → logprob: -2.173247814178467
    4. ' ' → logprob: -3.173247814178467
    5. '_input' → logprob: -4.798247814178467
    6. ' =' → logprob: -5.798247814178467
    7. ' _' → logprob: -5.923247814178467
    8. '()' → logprob: -6.173247814178467
    9. 's' → logprob: -6.298247814178467
    10. 'input' → logprob: -6.673247814178467

Token 242: ' entr' (ID: 7072)
  Prédit: ' inputs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' inputs' → logprob: -0.1910102814435959
    2. ' input' → logprob: -2.1910102367401123
    3. 'inputs' → logprob: -3.8160102367401123
    4. ' données' → logprob: -4.441010475158691
    5. 'input' → logprob: -4.816010475158691
    6. ' ' → logprob: -5.566010475158691
    7. ' N' → logprob: -5.691010475158691
    8. 'import' → logprob: -6.191010475158691
    9. ' n' → logprob: -6.441010475158691
    10. ' data' → logprob: -6.691010475158691

Token 243: 'ées' (ID: 5161)
  Prédit: 'ées'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ées' → logprob: -0.0005190743831917644
    2. 'ees' → logprob: -8.250518798828125
    3. 'ée' → logprob: -8.500518798828125
    4. 'é' → logprob: -10.500518798828125
    5. 'es' → logprob: -10.875518798828125
    6. 'êtes' → logprob: -13.500518798828125
    7. 'és' → logprob: -13.750518798828125
    8. 'e' → logprob: -13.750518798828125
    9. '```' → logprob: -14.125518798828125
    10. '#' → logprob: -14.500518798828125

Token 244: ' utilisateur' (ID: 115595)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.836818277835846
    2. 'n' → logprob: -1.0868182182312012
    3. ' 
' → logprob: -1.7118182182312012
    4. 'N' → logprob: -3.461818218231201
    5. '  
' → logprob: -4.586818218231201
    6. ' N' → logprob: -5.836818218231201
    7. ' 

' → logprob: -6.336818218231201
    8. '   
' → logprob: -7.211818218231201
    9. '\n' → logprob: -7.586818218231201
    10. '

' → logprob: -7.961818218231201

Token 245: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.31272804737091064
    2. 'n' → logprob: -2.312727928161621
    3. 'N' → logprob: -2.437727928161621
    4. ' 
' → logprob: -2.687727928161621
    5. '  
' → logprob: -4.937727928161621
    6. '

' → logprob: -6.062727928161621
    7. '\n' → logprob: -6.687727928161621
    8. ' N' → logprob: -6.687727928161621
    9. ' 

' → logprob: -7.687727928161621
    10. '   
' → logprob: -7.687727928161621

Token 246: 'N' (ID: 45)
  Prédit: 'N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.04018201306462288
    2. ' N' → logprob: -3.290182113647461
    3. 'n' → logprob: -6.165182113647461
    4. ' n' → logprob: -10.415182113647461
    5. ' 
' → logprob: -12.665182113647461
    6. 'x' → logprob: -14.040182113647461
    7. 'import' → logprob: -14.790182113647461
    8. '
' → logprob: -14.790182113647461
    9. '```' → logprob: -14.790182113647461
    10. '#' → logprob: -15.790182113647461

Token 247: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00015836587408557534
    2. ' =' → logprob: -9.500158309936523
    3. ' ,' → logprob: -9.875158309936523
    4. '=' → logprob: -10.875158309936523
    5. ',K' → logprob: -11.375158309936523
    6. ',N' → logprob: -14.000158309936523
    7. ',
' → logprob: -15.250158309936523
    8. 's' → logprob: -15.875158309936523
    9. ',k' → logprob: -16.500158309936523
    10. 'K' → logprob: -16.625158309936523

Token 248: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.5760236978530884
    2. 'K' → logprob: -0.8260236978530884
    3. ' ' → logprob: -9.451024055480957
    4. '  ' → logprob: -12.701024055480957
    5. 'space' → logprob: -14.451024055480957
    6. '<|end|>' → logprob: -14.576024055480957
    7. ' ' → logprob: -14.951024055480957
    8. ',K' → logprob: -15.076024055480957
    9. ' =' → logprob: -15.201024055480957
    10. ' ' → logprob: -16.07602310180664

Token 249: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.16023123264312744
    2. ' =' → logprob: -1.9102312326431274
    3. '=input' → logprob: -11.910231590270996
    4. ')' → logprob: -16.41023063659668
    5. ',' → logprob: -16.66023063659668
    6. '=int' → logprob: -16.78523063659668
    7. 'input' → logprob: -17.53523063659668
    8. '=
' → logprob: -17.66023063659668
    9. ')=' → logprob: -18.03523063659668
    10. '＝' → logprob: -18.28523063659668

Token 250: ' map' (ID: 4014)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.0015031944494694471
    2. ' map' → logprob: -6.501502990722656
    3. 'm' → logprob: -15.126502990722656
    4. '[' → logprob: -15.751502990722656
    5. '(map' → logprob: -15.876502990722656
    6. '	map' → logprob: -16.001502990722656
    7. 'list' → logprob: -16.376502990722656
    8. 'ma' → logprob: -17.001502990722656
    9. 'input' → logprob: -17.751502990722656
    10. 'int' → logprob: -18.126502990722656

Token 251: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.010596510954201221
    2. '(' → logprob: -4.76059627532959
    3. '(input' → logprob: -6.26059627532959
    4. 'int' → logprob: -10.13559627532959
    5. '(
' → logprob: -11.76059627532959
    6. '<int' → logprob: -11.76059627532959
    7. '(str' → logprob: -12.38559627532959
    8. 'input' → logprob: -12.51059627532959
    9. '(list' → logprob: -13.51059627532959
    10. '=int' → logprob: -13.76059627532959

Token 252: ',' (ID: 11)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.5923893451690674
    2. '(input' → logprob: -0.8423893451690674
    3. ',input' → logprob: -4.342389106750488
    4. ')' → logprob: -6.467389106750488
    5. ' input' → logprob: -6.842389106750488
    6. ',' → logprob: -7.842389106750488
    7. '(' → logprob: -8.717389106750488
    8. '=input' → logprob: -9.092389106750488
    9. '[input' → logprob: -11.467389106750488
    10. '<input' → logprob: -12.592389106750488

Token 253: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.01814994215965271
    2. ' input' → logprob: -4.0181498527526855
    3. '(input' → logprob: -18.268150329589844
    4. '=input' → logprob: -20.018150329589844
    5. ',input' → logprob: -20.018150329589844
    6. ')' → logprob: -20.393150329589844
    7. '	input' → logprob: -20.643150329589844
    8. '<input' → logprob: -21.143150329589844
    9. '```' → logprob: -22.143150329589844
    10. ' ' → logprob: -22.143150329589844

Token 254: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0004336493439041078
    2. '()' → logprob: -7.750433444976807
    3. '())' → logprob: -13.375433921813965
    4. ' ().' → logprob: -14.250433921813965
    5. '(' → logprob: -14.750433921813965
    6. '()
' → logprob: -16.12543296813965
    7. ')' → logprob: -17.00043296813965
    8. '()[' → logprob: -17.37543296813965
    9. '("").' → logprob: -17.50043296813965
    10. '()).' → logprob: -17.75043296813965

Token 255: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00043281487887725234
    2. 'strip' → logprob: -7.750432968139648
    3. 'rstrip' → logprob: -14.375432968139648
    4. '().' → logprob: -14.625432968139648
    5. ' split' → logprob: -14.625432968139648
    6. '(split' → logprob: -14.875432968139648
    7. ')' → logprob: -15.875432968139648
    8. 'spl' → logprob: -16.50043296813965
    9. '()' → logprob: -17.25043296813965
    10. '_split' → logprob: -17.25043296813965

Token 256: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0023183224257081747
    2. ')' → logprob: -6.502318382263184
    3. '()' → logprob: -7.252318382263184
    4. '()))' → logprob: -9.252318382263184
    5. '(' → logprob: -12.002318382263184
    6. '))' → logprob: -12.627318382263184
    7. '('' → logprob: -14.127318382263184
    8. ' ())' → logprob: -14.877318382263184
    9. '())
' → logprob: -15.627318382263184
    10. '(','' → logprob: -16.002317428588867

Token 257: 'a' (ID: 64)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -5.512236498361744e-07
    2. ' print' → logprob: -15.125000953674316
    3. 'result' → logprob: -15.375000953674316
    4. 'steps' → logprob: -16.875
    5. 'prin' → logprob: -18.375
    6. 'pr' → logprob: -18.625
    7. '```' → logprob: -18.875
    8. '<|end|>' → logprob: -19.375
    9. '#print' → logprob: -19.625
    10. 'prints' → logprob: -20.75

Token 258: ' =' (ID: 314)
  Prédit: 'ns'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ns' → logprob: -0.00010795372509164736
    2. ' =' → logprob: -10.250107765197754
    3. '=' → logprob: -11.000107765197754
    4. 'n' → logprob: -11.125107765197754
    5. '_ns' → logprob: -11.250107765197754
    6. 'r' → logprob: -11.375107765197754
    7. 'ws' → logprob: -12.375107765197754
    8. 'bs' → logprob: -13.500107765197754
    9. 'rr' → logprob: -13.625107765197754
    10. 'NS' → logprob: -13.750107765197754

Token 259: ' input' (ID: 3422)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.13265040516853333
    2. 'list' → logprob: -2.632650375366211
    3. '[N' → logprob: -4.007650375366211
    4. '[int' → logprob: -4.382650375366211
    5. '[' → logprob: -4.757650375366211
    6. ' []' → logprob: -5.257650375366211
    7. 'N' → logprob: -5.882650375366211
    8. ' list' → logprob: -6.632650375366211
    9. 'int' → logprob: -6.882650375366211
    10. ' [' → logprob: -7.132650375366211

Token 260: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.004096327815204859
    2. '().' → logprob: -5.504096508026123
    3. '())' → logprob: -11.129096031188965
    4. '(' → logprob: -13.129096031188965
    5. ' ()' → logprob: -14.254096031188965
    6. '()`' → logprob: -16.12909698486328
    7. '()>' → logprob: -16.25409698486328
    8. '（）' → logprob: -16.50409698486328
    9. '()
' → logprob: -16.62909698486328
    10. '()

' → logprob: -17.12909698486328

Token 261: ' ' (ID: 220)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 262: ' #' (ID: 1069)
  Prédit: '.strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.strip' → logprob: -0.7327260375022888
    2. '.split' → logprob: -1.1077260971069336
    3. 'print' → logprob: -2.9827260971069336
    4. '#' → logprob: -3.2327260971069336
    5. '<|end|>' → logprob: -3.8577260971069336
    6. ')' → logprob: -3.9827260971069336
    7. '.' → logprob: -4.107726097106934
    8. '()' → logprob: -4.357726097106934
    9. '[' → logprob: -4.482726097106934
    10. '
' → logprob: -5.857726097106934

Token 263: ' Lecture' (ID: 106534)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.099380262196064
    2. 'input' → logprob: -3.2243802547454834
    3. 'print' → logprob: -3.5993802547454834
    4. 'strip' → logprob: -4.8493804931640625
    5. '_' → logprob: -5.2243804931640625
    6. '#' → logprob: -6.2243804931640625
    7. '.' → logprob: -6.4743804931640625
    8. 'list' → logprob: -6.8493804931640625
    9. ' a' → logprob: -6.8493804931640625
    10. 'b' → logprob: -7.3493804931640625

Token 264: ' de' (ID: 334)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00018494461255613714
    2. 'a' → logprob: -9.375185012817383
    3. '())' → logprob: -10.000185012817383
    4. '(' → logprob: -10.875185012817383
    5. '().' → logprob: -10.875185012817383
    6. '("")' → logprob: -12.750185012817383
    7. '()
' → logprob: -13.125185012817383
    8. ')' → logprob: -13.125185012817383
    9. '()]' → logprob: -13.125185012817383
    10. '_a' → logprob: -13.375185012817383

Token 265: ' la' (ID: 557)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.4581609070301056
    2. 'input' → logprob: -1.2081608772277832
    3. ' input' → logprob: -3.333160877227783
    4. '_' → logprob: -3.708160877227783
    5. ' a' → logprob: -5.708160877227783
    6. 'str' → logprob: -6.083160877227783
    7. 'la' → logprob: -7.708160877227783
    8. '_a' → logprob: -7.708160877227783
    9. '""' → logprob: -7.958160877227783
    10. ' ' → logprob: -8.083161354064941

Token 266: ' chaîne' (ID: 89288)
  Prédit: 'chaine'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'chaine' → logprob: -0.49212464690208435
    2. 'string' → logprob: -1.7421246767044067
    3. 'suite' → logprob: -2.117124557495117
    4. 'sequence' → logprob: -3.367124557495117
    5. 'str' → logprob: -3.867124557495117
    6. ' chaîne' → logprob: -4.242124557495117
    7. 's' → logprob: -4.742124557495117
    8. 'input' → logprob: -6.117124557495117
    9. 'a' → logprob: -6.617124557495117
    10. 'position' → logprob: -6.867124557495117

Token 267: ' d' (ID: 272)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 268: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.4521656036376953
    2. 'a' → logprob: -2.0771656036376953
    3. ''' → logprob: -2.3271656036376953
    4. 'entrée' → logprob: -3.9521656036376953
    5. ' caractères' → logprob: -4.202165603637695
    6. 'élé' → logprob: -4.327165603637695
    7. ''ét' → logprob: -4.327165603637695
    8. ''action' → logprob: -4.452165603637695
    9. ''ex' → logprob: -4.452165603637695
    10. 'e' → logprob: -4.952165603637695

Token 269: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 270: ' inutil' (ID: 154055)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -1.333864450454712
    2. ' mais' → logprob: -1.708864450454712
    3. ' qui' → logprob: -1.958864450454712
    4. ' a' → logprob: -2.833864450454712
    5. ' ' → logprob: -2.833864450454712
    6. 'a' → logprob: -3.083864450454712
    7. ' "' → logprob: -3.208864450454712
    8. ' but' → logprob: -3.958864450454712
    9. '.strip' → logprob: -3.958864450454712
    10. ')' → logprob: -4.583864212036133

Token 271: 'isée' (ID: 59331)
  Prédit: 'isée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'isée' → logprob: -0.07792790979146957
    2. 'isé' → logprob: -2.702927827835083
    3. 'isable' → logprob: -5.327928066253662
    4. 'ise' → logprob: -6.327928066253662
    5. 'e' → logprob: -7.702928066253662
    6. 'aire' → logprob: -8.077927589416504
    7. 'is' → logprob: -8.327927589416504
    8. 'ée' → logprob: -10.077927589416504
    9. 'es' → logprob: -10.077927589416504
    10. 'itaire' → logprob: -10.202927589416504

Token 272: ' dans' (ID: 2671)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 273: ' le' (ID: 505)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -1.5033446550369263
    2. 'le' → logprob: -1.6283446550369263
    3. 'a' → logprob: -1.7533446550369263
    4. 'this' → logprob: -2.0033445358276367
    5. '_' → logprob: -2.1283445358276367
    6. 'la' → logprob: -2.6283445358276367
    7. ' ce' → logprob: -4.128344535827637
    8. 'code' → logprob: -4.628344535827637
    9. ' le' → logprob: -4.878344535827637
    10. 'input' → logprob: -5.003344535827637

Token 274: ' calcul' (ID: 7559)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.3128996193408966
    2. 'calcul' → logprob: -1.4378995895385742
    3. 'programme' → logprob: -3.687899589538574
    4. 'suite' → logprob: -6.312899589538574
    5. 'fonction' → logprob: -6.812899589538574
    6. '#' → logprob: -7.312899589538574
    7. 'reste' → logprob: -7.562899589538574
    8. 'comment' → logprob: -8.062899589538574
    9. 'program' → logprob: -8.062899589538574
    10. '```' → logprob: -8.187899589538574

Token 275: ' (' (ID: 350)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 276: 'pe' (ID: 424)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0003291480534244329
    2. ' )' → logprob: -8.37532901763916
    3. ')#' → logprob: -11.37532901763916
    4. '#' → logprob: -11.50032901763916
    5. '')' → logprob: -11.62532901763916
    6. 'a' → logprob: -11.75032901763916
    7. '```' → logprob: -11.75032901763916
    8. '")' → logprob: -11.87532901763916
    9. '<|end|>' → logprob: -11.87532901763916
    10. ' ' → logprob: -12.25032901763916

Token 277: 'ut' (ID: 339)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.12765495479106903
    2. 'ut' → logprob: -2.252655029296875
    3. 'u' → logprob: -5.002655029296875
    4. 't' → logprob: -6.877655029296875
    5. 'rm' → logprob: -6.877655029296875
    6. 'rs' → logprob: -6.877655029296875
    7. 'rh' → logprob: -6.877655029296875
    8. 'rl' → logprob: -7.002655029296875
    9. 'rd' → logprob: -7.877655029296875
    10. 'nd' → logprob: -7.877655029296875

Token 278: ' être' (ID: 9104)
  Prédit: 'être'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'être' → logprob: -0.2050943672657013
    2. ' être' → logprob: -2.705094337463379
    3. ' be' → logprob: -3.205094337463379
    4. 'con' → logprob: -4.080094337463379
    5. '_' → logprob: -4.080094337463379
    6. 'êt' → logprob: -4.830094337463379
    7. ')' → logprob: -4.955094337463379
    8. 'êtres' → logprob: -5.580094337463379
    9. '<|end|>' → logprob: -5.955094337463379
    10. ' rester' → logprob: -6.580094337463379

Token 279: ' une' (ID: 2463)
  Prédit: 'util'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'util' → logprob: -0.9300570487976074
    2. 'utile' → logprob: -1.5550570487976074
    3. 'ignor' → logprob: -2.1800570487976074
    4. 'ignored' → logprob: -3.0550570487976074
    5. 'une' → logprob: -3.3050570487976074
    6. ' ignor' → logprob: -3.4300570487976074
    7. 'sup' → logprob: -3.9300570487976074
    8. 'ignore' → logprob: -3.9300570487976074
    9. ' utilisée' → logprob: -3.9300570487976074
    10. 'inut' → logprob: -4.305057048797607

Token 280: ' liste' (ID: 31719)
  Prédit: 'sequence'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sequence' → logprob: -0.6310791969299316
    2. 'chaine' → logprob: -1.5060791969299316
    3. 'sé' → logprob: -2.7560791969299316
    4. 'string' → logprob: -3.2560791969299316
    5. 'suite' → logprob: -3.2560791969299316
    6. 's' → logprob: -3.3810791969299316
    7. ' chaîne' → logprob: -5.006079196929932
    8. ' sequence' → logprob: -5.131079196929932
    9. 'str' → logprob: -5.131079196929932
    10. 'car' → logprob: -5.381079196929932

Token 281: ' d' (ID: 272)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.04460739344358444
    2. '()' → logprob: -4.044607162475586
    3. ' ou' → logprob: -4.544607162475586
    4. ' )' → logprob: -5.044607162475586
    5. '())' → logprob: -5.294607162475586
    6. ' de' → logprob: -7.294607162475586
    7. 'de' → logprob: -7.669607162475586
    8. ' or' → logprob: -7.919607162475586
    9. 'ou' → logprob: -8.169607162475586
    10. ' des' → logprob: -8.294607162475586

Token 282: ''' (ID: 6)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.22880622744560242
    2. 'positions' → logprob: -3.228806257247925
    3. 'car' → logprob: -3.228806257247925
    4. 'chars' → logprob: -3.353806257247925
    5. 'str' → logprob: -3.603806257247925
    6. 'esp' → logprob: -4.603806018829346
    7. 'instructions' → logprob: -4.853806018829346
    8. 'actions' → logprob: -4.978806018829346
    9. ' caractères' → logprob: -5.228806018829346
    10. ''' → logprob: -5.603806018829346

Token 283: 'élé' (ID: 15228)
  Prédit: 'élé'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.30296194553375244
    2. 'positions' → logprob: -2.052961826324463
    3. 'car' → logprob: -3.052961826324463
    4. 'esp' → logprob: -4.052961826324463
    5. 'instructions' → logprob: -4.052961826324463
    6. 'chars' → logprob: -4.927961826324463
    7. 'ét' → logprob: -4.927961826324463
    8. 'actions' → logprob: -5.302961826324463
    9. 'elements' → logprob: -5.302961826324463
    10. 'steps' → logprob: -5.427961826324463

Token 284: 'ments' (ID: 1626)
  Prédit: 'ments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ments' → logprob: -0.0002919638354796916
    2. 'ment' → logprob: -8.87529182434082
    3. 'm' → logprob: -9.87529182434082
    4. 'lements' → logprob: -10.62529182434082
    5. 'lé' → logprob: -11.00029182434082
    6. 'ents' → logprob: -11.50029182434082
    7. 'l' → logprob: -11.62529182434082
    8. 'ements' → logprob: -11.75029182434082
    9. 'nts' → logprob: -12.12529182434082
    10. 'éments' → logprob: -12.87529182434082

Token 285: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.013370092958211899
    2. ' ou' → logprob: -4.513370037078857
    3. ' )' → logprob: -6.388370037078857
    4. ' or' → logprob: -8.263370513916016
    5. 'ou' → logprob: -9.138370513916016
    6. ',' → logprob: -9.138370513916016
    7. '()' → logprob: -9.888370513916016
    8. ').' → logprob: -10.513370513916016
    9. '())' → logprob: -11.138370513916016
    10. 's' → logprob: -12.138370513916016

Token 286: '#' (ID: 2)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00014168102643452585
    2. 'result' → logprob: -9.250142097473145
    3. 'steps' → logprob: -10.000142097473145
    4. ' print' → logprob: -17.125141143798828
    5. 'step' → logprob: -17.125141143798828
    6. 'pas' → logprob: -17.750141143798828
    7. 'pr' → logprob: -18.375141143798828
    8. 'res' → logprob: -18.625141143798828
    9. 'answer' → logprob: -19.625141143798828
    10. 'ans' → logprob: -19.625141143798828

Token 287: ' Calcul' (ID: 57243)
  Prédit: 'steps'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'steps' → logprob: -0.7624804973602295
    2. 'print' → logprob: -1.2624804973602295
    3. 'result' → logprob: -1.3874804973602295
    4. '#' → logprob: -7.887480735778809
    5. 'res' → logprob: -8.762480735778809
    6. 'step' → logprob: -9.137480735778809
    7. 'ans' → logprob: -9.762480735778809
    8. 'if' → logprob: -10.637480735778809
    9. 'answer' → logprob: -10.762480735778809
    10. 'results' → logprob: -11.012480735778809

Token 288: ' et' (ID: 859)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.20921573042869568
    2. 'steps' → logprob: -1.709215760231018
    3. 'print' → logprob: -5.0842156410217285
    4. 'minimum' → logprob: -7.2092156410217285
    5. ' steps' → logprob: -8.084216117858887
    6. ' result' → logprob: -8.209216117858887
    7. '_steps' → logprob: -9.209216117858887
    8. 'min' → logprob: -9.334216117858887
    9. 'results' → logprob: -10.959216117858887
    10. 'answer' → logprob: -11.084216117858887

Token 289: ' affich' (ID: 90179)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.07889033854007721
    2. ' print' → logprob: -2.578890323638916
    3. '#' → logprob: -15.078890800476074
    4. 'result' → logprob: -16.578889846801758
    5. '#print' → logprob: -17.328889846801758
    6. 'aff' → logprob: -17.578889846801758
    7. ' affich' → logprob: -17.578889846801758
    8. 'im' → logprob: -17.953889846801758
    9. ' imprim' → logprob: -17.953889846801758
    10. '_print' → logprob: -18.078889846801758

Token 290: 'age' (ID: 477)
  Prédit: 'age'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'age' → logprob: -7.231182826217264e-05
    2. 'print' → logprob: -10.125072479248047
    3. 'er' → logprob: -10.625072479248047
    4. 'ge' → logprob: -12.375072479248047
    5. '   ' → logprob: -13.125072479248047
    6. 'e' → logprob: -13.625072479248047
    7. 'ichage' → logprob: -15.875072479248047
    8. 'âge' → logprob: -16.375072479248047
    9. 'arge' → logprob: -16.625072479248047
    10. 'ange' → logprob: -17.500072479248047

Token 291: ' du' (ID: 1462)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -2.696889623621246e-06
    2. 'result' → logprob: -13.50000286102295
    3. 'steps' → logprob: -14.25000286102295
    4. '```' → logprob: -14.87500286102295
    5. ' print' → logprob: -15.00000286102295
    6. '
' → logprob: -17.750001907348633
    7. '(print' → logprob: -19.250001907348633
    8. 'pr' → logprob: -19.750001907348633
    9. 'pas' → logprob: -20.250001907348633
    10. 'for' → logprob: -20.250001907348633

Token 292: ' résultat' (ID: 62556)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.47134026885032654
    2. 'print' → logprob: -1.721340298652649
    3. ' résultat' → logprob: -1.846340298652649
    4. 'nombre' → logprob: -3.9713401794433594
    5. 'rés' → logprob: -4.346340179443359
    6. ' result' → logprob: -5.971340179443359
    7. ' nombre' → logprob: -6.346340179443359
    8. 'minimum' → logprob: -7.096340179443359
    9. ' resultat' → logprob: -7.221340179443359
    10. ' print' → logprob: -7.596340179443359

Token 293: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -2.2603901015827432e-05
    2. 'result' → logprob: -11.125022888183594
    3. '
' → logprob: -12.500022888183594
    4. 'steps' → logprob: -13.000022888183594
    5. ' print' → logprob: -13.500022888183594
    6. '```' → logprob: -14.875022888183594
    7. 'results' → logprob: -19.000022888183594
    8. '``' → logprob: -19.500022888183594
    9. 'step' → logprob: -19.750022888183594
    10. 'pr' → logprob: -20.000022888183594

Token 294: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -6.704273118884885e-07
    2. 'result' → logprob: -15.000000953674316
    3. 'steps' → logprob: -15.125000953674316
    4. ' print' → logprob: -16.75
    5. '```' → logprob: -19.5
    6. '
' → logprob: -20.875
    7. 'pr' → logprob: -22.875
    8. 'results' → logprob: -23.875
    9. 'step' → logprob: -24.0
    10. 'prin' → logprob: -24.25

Token 295: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.062039270997047424
    2. '(' → logprob: -2.812039375305176
    3. '(calc' → logprob: -10.187039375305176
    4. '(cal' → logprob: -10.937039375305176
    5. '('' → logprob: -11.812039375305176
    6. '("' → logprob: -12.812039375305176
    7. '(f' → logprob: -13.562039375305176
    8. ' (' → logprob: -13.687039375305176
    9. 'calculate' → logprob: -13.687039375305176
    10. '(
' → logprob: -13.937039375305176

Token 296: 'alculate' (ID: 80190)
  Prédit: 'alculate'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'alculate' → logprob: -3.8889261304575484e-06
    2. 'al' → logprob: -12.625003814697266
    3. 'alc' → logprob: -15.250003814697266
    4. 'calculate' → logprob: -15.500003814697266
    5. 'aculate' → logprob: -17.625003814697266
    6. 'alu' → logprob: -18.125003814697266
    7. 'ulate' → logprob: -19.000003814697266
    8. 'culate' → logprob: -19.125003814697266
    9. '.calculate' → logprob: -19.125003814697266
    10. 'om' → logprob: -19.500003814697266

Token 297: '_min' (ID: 15950)
  Prédit: '_min'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_min' → logprob: -1.8624639324116288e-06
    2. '_' → logprob: -13.250001907348633
    3. 'minimum' → logprob: -17.250001907348633
    4. '_max' → logprob: -17.875001907348633
    5. '_MIN' → logprob: -18.000001907348633
    6. ' minimum' → logprob: -18.250001907348633
    7. '_m' → logprob: -18.500001907348633
    8. '_Min' → logprob: -18.750001907348633
    9. 'Minimum' → logprob: -19.500001907348633
    10. '_minutes' → logprob: -20.000001907348633

Token 298: 'imum' (ID: 4556)
  Prédit: 'imum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'imum' → logprob: -0.03411978855729103
    2. 'um' → logprob: -3.4091198444366455
    3. '_' → logprob: -8.409119606018066
    4. 'ium' → logprob: -8.534119606018066
    5. 'im' → logprob: -11.034119606018066
    6. '_number' → logprob: -11.534119606018066
    7. '```' → logprob: -11.784119606018066
    8. 'inum' → logprob: -12.159119606018066
    9. '_num' → logprob: -12.784119606018066
    10. '__' → logprob: -13.534119606018066

Token 299: '_steps' (ID: 52120)
  Prédit: '_steps'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_steps' → logprob: -0.0027850272599607706
    2. '_min' → logprob: -6.0027852058410645
    3. '_' → logprob: -8.127784729003906
    4. '_step' → logprob: -12.377784729003906
    5. 'steps' → logprob: -12.627784729003906
    6. '_max' → logprob: -13.002784729003906
    7. ' _' → logprob: -14.127784729003906
    8. '_total' → logprob: -14.127784729003906
    9. '```' → logprob: -15.127784729003906
    10. 's' → logprob: -15.252784729003906

Token 300: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.0011023490224033594
    2. '(' → logprob: -6.876102447509766
    3. ')' → logprob: -10.251102447509766
    4. ' (' → logprob: -10.376102447509766
    5. ')(' → logprob: -13.001102447509766
    6. '(
' → logprob: -14.876102447509766
    7. ' ' → logprob: -15.751102447509766
    8. '```' → logprob: -16.001102447509766
    9. '((' → logprob: -16.876102447509766
    10. '(n' → logprob: -16.876102447509766

Token 301: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0004919105558656156
    2. ',K' → logprob: -7.625492095947266
    3. ' ,' → logprob: -12.625492095947266
    4. ',
' → logprob: -14.750492095947266
    5. ',N' → logprob: -16.000492095947266
    6. ',k' → logprob: -16.625492095947266
    7. ',

' → logprob: -18.000492095947266
    8. ')' → logprob: -18.375492095947266
    9. 'K' → logprob: -18.500492095947266
    10. ' ' → logprob: -19.250492095947266

Token 302: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.0024756586644798517
    2. ' K' → logprob: -6.002475738525391
    3. ')' → logprob: -19.50247573852539
    4. ',K' → logprob: -19.75247573852539
    5. '>K' → logprob: -20.25247573852539
    6. '	K' → logprob: -20.50247573852539
    7. ' ' → logprob: -20.87747573852539
    8. 'k' → logprob: -21.87747573852539
    9. '<K' → logprob: -21.87747573852539
    10. '   ' → logprob: -21.87747573852539

Token 303: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0042561194859445095
    2. '())' → logprob: -6.254256248474121
    3. '))' → logprob: -6.379256248474121
    4. '(a' → logprob: -8.004256248474121
    5. '()' → logprob: -9.129256248474121
    6. ')a' → logprob: -9.379256248474121
    7. '(' → logprob: -9.504256248474121
    8. 'a' → logprob: -11.129256248474121
    9. ' )' → logprob: -12.504256248474121
    10. ',' → logprob: -13.129256248474121


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 301
Tokens correctement prédits (1ère position, stricte): 113
Tokens correctement prédits (1ère position, avec adaptation): 117
Tokens correctement prédits (top 10): 207
Précision stricte (1ère position): 37.54%
Précision adaptée (1ère position): 38.87%
Précision (top 10): 68.77%
================================================================================
