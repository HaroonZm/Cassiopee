================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:38:18
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
r = int(input())
print(r ** 2)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'r' (ID: 81)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0020368914119899273
    2. 'r' → logprob: -7.002037048339844
    3. '(r' → logprob: -7.002037048339844
    4. '```' → logprob: -9.252037048339844
    5. '('' → logprob: -10.377037048339844
    6. ''' → logprob: -10.627037048339844
    7. '("("' → logprob: -11.502037048339844
    8. '(
' → logprob: -11.752037048339844
    9. '()' → logprob: -12.002037048339844
    10. '`' → logprob: -12.127037048339844

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.05213084816932678
    2. ')' → logprob: -3.052130937576294
    3. '()' → logprob: -6.927130699157715
    4. ''' → logprob: -7.552130699157715
    5. '(
' → logprob: -7.677130699157715
    6. '```' → logprob: -8.427130699157715
    7. '`' → logprob: -8.552130699157715
    8. '('' → logprob: -8.677130699157715
    9. 'r' → logprob: -8.927130699157715
    10. '"' → logprob: -9.302130699157715

Token 5: 'print' (ID: 1598)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.9798715710639954
    2. '*' → logprob: -1.6048715114593506
    3. '%' → logprob: -1.8548715114593506
    4. 'if' → logprob: -2.9798715114593506
    5. 'i' → logprob: -3.1048715114593506
    6. 's' → logprob: -3.2298715114593506
    7. ''' → logprob: -3.6048715114593506
    8. '`' → logprob: -3.6048715114593506
    9. '#' → logprob: -4.47987174987793
    10. ' ' → logprob: -4.85487174987793

Token 6: '(r' (ID: 4729)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.001868902356363833
    2. '('' → logprob: -6.501868724822998
    3. '("("' → logprob: -8.376869201660156
    4. '(r' → logprob: -9.251869201660156
    5. '()' → logprob: -11.126869201660156
    6. '(
' → logprob: -12.126869201660156
    7. '(`' → logprob: -12.626869201660156
    8. '(f' → logprob: -13.001869201660156
    9. '("""' → logprob: -13.251869201660156
    10. '((' → logprob: -13.251869201660156

Token 7: ' **' (ID: 6240)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0003874166286550462
    2. '))' → logprob: -8.000387191772461
    3. '`)' → logprob: -10.250387191772461
    4. '')' → logprob: -11.500387191772461
    5. '")' → logprob: -13.125387191772461
    6. ' )' → logprob: -13.375387191772461
    7. ')`' → logprob: -14.250387191772461
    8. ')))' → logprob: -14.750387191772461
    9. ')")' → logprob: -15.500387191772461
    10. 'r' → logprob: -15.500387191772461

Token 8: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.18020057678222656
    2. ' ' → logprob: -1.8052005767822266
    3. '3' → logprob: -7.805200576782227
    4. ')' → logprob: -10.805200576782227
    5. '0' → logprob: -10.930200576782227
    6. ' )' → logprob: -11.805200576782227
    7. ' r' → logprob: -14.305200576782227
    8. '1' → logprob: -14.555200576782227
    9. '(' → logprob: -14.680200576782227
    10. 'r' → logprob: -14.805200576782227

Token 9: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.004659503698348999
    2. '3' → logprob: -5.379659652709961
    3. ' ' → logprob: -10.629659652709961
    4. '0' → logprob: -11.629659652709961
    5. 'r' → logprob: -12.504659652709961
    6. ')' → logprob: -13.879659652709961
    7. '1' → logprob: -14.129659652709961
    8. '(' → logprob: -15.129659652709961
    9. '4' → logprob: -15.754659652709961
    10. '-' → logprob: -15.879659652709961

Token 10: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -9.13388703338569e-06
    2. '))' → logprob: -12.250009536743164
    3. '`)' → logprob: -12.625009536743164
    4. ')`' → logprob: -14.625009536743164
    5. ' )' → logprob: -14.750009536743164
    6. '')' → logprob: -16.500009536743164
    7. ')
' → logprob: -16.875009536743164
    8. ')**' → logprob: -17.500009536743164
    9. '```' → logprob: -18.000009536743164
    10. '）' → logprob: -18.125009536743164


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 8
Tokens correctement prédits (1ère position, stricte): 2
Tokens correctement prédits (1ère position, avec adaptation): 2
Tokens correctement prédits (top 10): 4
Précision stricte (1ère position): 25.00%
Précision adaptée (1ère position): 25.00%
Précision (top 10): 50.00%
================================================================================
