================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:55:41
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n, x = map(int, input().split())
L_list = list(map(int, input().split()))
D = 0
counter = 1
for L in L_list:
    D += L
    if D <= x:
        counter += 1
    else:
        break
print(counter)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' x' (ID: 1215)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.023471755906939507
    2. ' =' → logprob: -4.023471832275391
    3. ',' → logprob: -5.273471832275391
    4. '[' → logprob: -9.77347183227539
    5. '+' → logprob: -10.39847183227539
    6. '*' → logprob: -11.02347183227539
    7. ';' → logprob: -11.27347183227539
    8. ' ' → logprob: -11.39847183227539
    9. '.' → logprob: -11.64847183227539
    10. ')' → logprob: -11.77347183227539

Token 4: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7162970304489136
    2. '0' → logprob: -1.3412970304489136
    3. 'map' → logprob: -2.216297149658203
    4. ' map' → logprob: -2.716297149658203
    5. '5' → logprob: -3.591297149658203
    6. 'input' → logprob: -4.091297149658203
    7. '10' → logprob: -4.341297149658203
    8. '1' → logprob: -4.841297149658203
    9. ' input' → logprob: -5.341297149658203
    10. '2' → logprob: -6.591297149658203

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03506326302886009
    2. '<|end|>' → logprob: -3.5350632667541504
    3. '```' → logprob: -6.16006326675415
    4. ')' → logprob: -7.41006326675415
    5. '(lambda' → logprob: -7.41006326675415
    6. '<|end|>' → logprob: -7.41006326675415
    7. '[' → logprob: -8.160062789916992
    8. '(user' → logprob: -8.785062789916992
    9. '(int' → logprob: -9.410062789916992
    10. 'user' → logprob: -9.535062789916992

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.1468048393726349
    2. '(' → logprob: -2.6468048095703125
    3. ')' → logprob: -2.7718048095703125
    4. 'input' → logprob: -7.1468048095703125
    5. '(str' → logprob: -7.5218048095703125
    6. '(int' → logprob: -7.8968048095703125
    7. '(user' → logprob: -8.271804809570312
    8. ' input' → logprob: -9.146804809570312
    9. '```' → logprob: -9.146804809570312
    10. '=input' → logprob: -9.396804809570312

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.07897438853979111
    2. ' input' → logprob: -2.578974485397339
    3. '(input' → logprob: -9.453974723815918
    4. ')' → logprob: -12.203974723815918
    5. ',input' → logprob: -13.953974723815918
    6. '=input' → logprob: -15.703974723815918
    7. '[input' → logprob: -16.5789737701416
    8. '<input' → logprob: -17.2039737701416
    9. ' ' → logprob: -17.5789737701416
    10. '	input' → logprob: -17.7039737701416

Token 8: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.8585167527198792
    2. '()' → logprob: -1.2335166931152344
    3. '(' → logprob: -1.6085166931152344
    4. ')' → logprob: -3.4835166931152344
    5. '().' → logprob: -4.108516693115234
    6. '`()' → logprob: -4.483516693115234
    7. '('' → logprob: -5.233516693115234
    8. '```' → logprob: -5.483516693115234
    9. '();)' → logprob: -6.608516693115234
    10. '(""))' → logprob: -6.858516693115234

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00016420685278717428
    2. 'strip' → logprob: -8.875164031982422
    3. ' split' → logprob: -10.875164031982422
    4. 'rstrip' → logprob: -13.000164031982422
    5. '(split' → logprob: -13.125164031982422
    6. ')' → logprob: -14.250164031982422
    7. 'spl' → logprob: -14.750164031982422
    8. 'read' → logprob: -17.000164031982422
    9. 's' → logprob: -17.500164031982422
    10. '_split' → logprob: -17.875164031982422

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.05119699984788895
    2. '))' → logprob: -3.051197052001953
    3. '())' → logprob: -6.051197052001953
    4. '`)' → logprob: -9.051197052001953
    5. '()' → logprob: -10.051197052001953
    6. '()))' → logprob: -10.426197052001953
    7. '(' → logprob: -11.051197052001953
    8. ')`' → logprob: -11.176197052001953
    9. ')))' → logprob: -11.551197052001953
    10. '),' → logprob: -12.926197052001953

Token 11: 'L' (ID: 43)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.4372774362564087
    2. ',' → logprob: -1.5622774362564087
    3. '+' → logprob: -1.8122774362564087
    4. 'if' → logprob: -2.687277317047119
    5. 'a' → logprob: -3.187277317047119
    6. 'for' → logprob: -3.437277317047119
    7. '#' → logprob: -3.562277317047119
    8. ',
' → logprob: -3.687277317047119
    9. '+
' → logprob: -3.687277317047119
    10. '`' → logprob: -3.937277317047119

Token 12: '_list' (ID: 4162)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.7464104890823364
    2. ' =' → logprob: -1.6214104890823364
    3. '.' → logprob: -1.9964104890823364
    4. '[' → logprob: -2.746410369873047
    5. 'i' → logprob: -3.121410369873047
    6. 'ist' → logprob: -4.246410369873047
    7. '_' → logprob: -4.371410369873047
    8. '[i' → logprob: -4.496410369873047
    9. 'en' → logprob: -4.621410369873047
    10. '.append' → logprob: -5.246410369873047

Token 13: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.647832453250885
    2. '.' → logprob: -1.1478323936462402
    3. ' =' → logprob: -2.8978323936462402
    4. '=' → logprob: -3.5228323936462402
    5. '_' → logprob: -4.14783239364624
    6. '.append' → logprob: -4.14783239364624
    7. '[:]' → logprob: -4.14783239364624
    8. '[]' → logprob: -4.77283239364624
    9. 's' → logprob: -5.89783239364624
    10. ')' → logprob: -6.02283239364624

Token 14: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.35170289874076843
    2. '[list' → logprob: -1.7267029285430908
    3. '[]' → logprob: -2.851702928543091
    4. '[' → logprob: -3.976702928543091
    5. '[input' → logprob: -4.101702690124512
    6. ' list' → logprob: -4.226702690124512
    7. '[int' → logprob: -5.351702690124512
    8. ' [' → logprob: -5.476702690124512
    9. ' []' → logprob: -6.476702690124512
    10. 'input' → logprob: -9.101702690124512

Token 15: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002949889749288559
    2. '(range' → logprob: -6.2529497146606445
    3. '(int' → logprob: -7.1279497146606445
    4. '(input' → logprob: -9.127949714660645
    5. '(
' → logprob: -11.502949714660645
    6. '(eval' → logprob: -11.502949714660645
    7. '(map' → logprob: -11.627949714660645
    8. '(list' → logprob: -11.627949714660645
    9. '(np' → logprob: -11.752949714660645
    10. '(.' → logprob: -12.127949714660645

Token 16: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.005282615311443806
    2. '(' → logprob: -5.255282402038574
    3. 'int' → logprob: -10.755282402038574
    4. '<int' → logprob: -11.130282402038574
    5. '[int' → logprob: -12.380282402038574
    6. '=int' → logprob: -12.630282402038574
    7. ',int' → logprob: -13.505282402038574
    8. '(
' → logprob: -13.880282402038574
    9. '```' → logprob: -14.130282402038574
    10. ')' → logprob: -14.380282402038574

Token 17: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5833814144134521
    2. ',input' → logprob: -0.8333814144134521
    3. '(input' → logprob: -4.958381652832031
    4. '(' → logprob: -8.083381652832031
    5. ' ,' → logprob: -10.208381652832031
    6. ',int' → logprob: -11.083381652832031
    7. 'input' → logprob: -11.208381652832031
    8. ')' → logprob: -13.083381652832031
    9. ',(' → logprob: -13.083381652832031
    10. '```' → logprob: -13.208381652832031

Token 18: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.31329044699668884
    2. ' input' → logprob: -1.3132904767990112
    3. '(input' → logprob: -10.6882905960083
    4. ',input' → logprob: -12.6882905960083
    5. ')' → logprob: -13.6882905960083
    6. '=input' → logprob: -14.3132905960083
    7. '	input' → logprob: -15.3132905960083
    8. '[input' → logprob: -15.4382905960083
    9. '<input' → logprob: -15.9382905960083
    10. '_input' → logprob: -15.9382905960083

Token 19: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0027803927659988403
    2. '()' → logprob: -6.127780437469482
    3. '(' → logprob: -7.627780437469482
    4. '()))' → logprob: -10.002779960632324
    5. '(.' → logprob: -10.877779960632324
    6. '())' → logprob: -11.127779960632324
    7. '(),' → logprob: -11.877779960632324
    8. ' ().' → logprob: -12.377779960632324
    9. '()));' → logprob: -12.502779960632324
    10. ')' → logprob: -12.627779960632324

Token 20: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -1.7432603272027336e-06
    2. 'strip' → logprob: -13.875001907348633
    3. ' split' → logprob: -14.500001907348633
    4. '(split' → logprob: -15.250001907348633
    5. 'spl' → logprob: -17.500001907348633
    6. 'rstrip' → logprob: -18.000001907348633
    7. 'plit' → logprob: -20.375001907348633
    8. 's' → logprob: -20.625001907348633
    9. ')' → logprob: -21.125001907348633
    10. '.split' → logprob: -21.625001907348633

Token 21: '()))
' (ID: 24521)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.5912646055221558
    2. '()))' → logprob: -1.2162646055221558
    3. ')' → logprob: -2.3412647247314453
    4. '())' → logprob: -2.9662647247314453
    5. '()' → logprob: -6.716264724731445
    6. '(' → logprob: -6.841264724731445
    7. ')))' → logprob: -11.216264724731445
    8. ' ))' → logprob: -12.591264724731445
    9. '()));' → logprob: -12.591264724731445
    10. '),' → logprob: -12.716264724731445

Token 22: 'D' (ID: 35)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.806022584438324
    2. 'for' → logprob: -1.8060226440429688
    3. 'sum' → logprob: -2.8060226440429688
    4. 'count' → logprob: -3.0560226440429688
    5. 'c' → logprob: -3.1810226440429688
    6. 'L' → logprob: -3.3060226440429688
    7. 'd' → logprob: -3.4310226440429688
    8. 'x' → logprob: -3.6810226440429688
    9. 'result' → logprob: -3.6810226440429688
    10. 'max' → logprob: -4.431022644042969

Token 23: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.4682444930076599
    2. '_list' → logprob: -1.7182445526123047
    3. ' =' → logprob: -2.4682445526123047
    4. '=' → logprob: -3.9682445526123047
    5. 'ef' → logprob: -3.9682445526123047
    6. '[i' → logprob: -4.718244552612305
    7. '.' → logprob: -4.843244552612305
    8. '[' → logprob: -4.968244552612305
    9. '_i' → logprob: -4.968244552612305
    10. 'i' → logprob: -5.093244552612305

Token 24: ' ' (ID: 220)
  Prédit: '{}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '{}' → logprob: -0.29638099670410156
    2. ' {}' → logprob: -1.4213809967041016
    3. '{' → logprob: -5.296380996704102
    4. 'dict' → logprob: -6.046380996704102
    5. '[' → logprob: -6.296380996704102
    6. '0' → logprob: -6.921380996704102
    7. ' []' → logprob: -6.921380996704102
    8. ' {' → logprob: -7.046380996704102
    9. ' defaultdict' → logprob: -7.296380996704102
    10. '[]' → logprob: -7.296380996704102

Token 25: '0' (ID: 15)
  Prédit: '{}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '{}' → logprob: -0.04989558085799217
    2. '{' → logprob: -3.4248955249786377
    3. '[' → logprob: -5.549895763397217
    4. '{x' → logprob: -5.549895763397217
    5. 'dict' → logprob: -6.049895763397217
    6. '[]' → logprob: -6.299895763397217
    7. '[max' → logprob: -7.049895763397217
    8. '[L' → logprob: -7.299895763397217
    9. 'max' → logprob: -7.674895763397217
    10. 'L' → logprob: -8.049895286560059

Token 26: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.6277567148208618
    2. '<|end|>' → logprob: -1.3777567148208618
    3. ' for' → logprob: -2.3777565956115723
    4. '
' → logprob: -2.5027565956115723
    5. ' ' → logprob: -4.252756595611572
    6. '+' → logprob: -4.877756595611572
    7. '\n' → logprob: -5.252756595611572
    8. ' 
' → logprob: -6.002756595611572
    9. ')' → logprob: -6.002756595611572
    10. 'n' → logprob: -6.502756595611572

Token 27: 'counter' (ID: 32128)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.00031043673516251147
    2. ' for' → logprob: -8.750310897827148
    3. 'f' → logprob: -8.875310897827148
    4. 'i' → logprob: -13.125310897827148
    5. 'd' → logprob: -13.250310897827148
    6. 'max' → logprob: -13.375310897827148
    7. ')' → logprob: -13.875310897827148
    8. 'F' → logprob: -13.875310897827148
    9. '
' → logprob: -14.125310897827148
    10. 'x' → logprob: -14.500310897827148

Token 28: ' =' (ID: 314)
  Prédit: ' +='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.26395100355148315
    2. ' =' → logprob: -1.763951063156128
    3. '=' → logprob: -3.513951063156128
    4. '+' → logprob: -4.138950824737549
    5. '+=' → logprob: -4.763950824737549
    6. '_' → logprob: -6.138950824737549
    7. ' +' → logprob: -6.263950824737549
    8. ' ' → logprob: -6.638950824737549
    9. ')' → logprob: -7.888950824737549
    10. '<|end|>' → logprob: -9.138951301574707

Token 29: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.20163367688655853
    2. ' ' → logprob: -1.7016336917877197
    3. '1' → logprob: -8.45163345336914
    4. 'n' → logprob: -13.51413345336914
    5. '{}' → logprob: -13.95163345336914
    6. ' ' → logprob: -14.20163345336914
    7. ' n' → logprob: -14.38913345336914
    8. ' {}' → logprob: -15.32663345336914
    9. '{' → logprob: -15.32663345336914
    10. '2' → logprob: -15.32663345336914

Token 30: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.003076109802350402
    2. '1' → logprob: -6.253076076507568
    3. ' ' → logprob: -6.878076076507568
    4. '{}' → logprob: -9.128076553344727
    5. 'n' → logprob: -12.503076553344727
    6. '{' → logprob: -13.253076553344727
    7. '-' → logprob: -14.128076553344727
    8. ' {}' → logprob: -14.753076553344727
    9. 'x' → logprob: -15.878076553344727
    10. ' n' → logprob: -16.003076553344727

Token 31: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.7493393421173096
    2. ' for' → logprob: -0.9993393421173096
    3. '
' → logprob: -2.2493393421173096
    4. 'while' → logprob: -3.8743393421173096
    5. ' while' → logprob: -4.3743391036987305
    6. '' → logprob: -5.2493391036987305
    7. ',' → logprob: -5.8743391036987305
    8. ' ' → logprob: -6.3743391036987305
    9. '\n' → logprob: -6.3743391036987305
    10. '<|end|>' → logprob: -6.6243391036987305

Token 32: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5348759293556213
    2. ' for' → logprob: -0.9098759293556213
    3. '
' → logprob: -5.784875869750977
    4. '```' → logprob: -6.159875869750977
    5. 'while' → logprob: -6.284875869750977
    6. '<|end|>' → logprob: -6.284875869750977
    7. ' while' → logprob: -7.534875869750977
    8. ' 
' → logprob: -8.409875869750977
    9. ')' → logprob: -8.534875869750977
    10. '' → logprob: -8.659875869750977

Token 33: ' L' (ID: 451)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.02352939546108246
    2. ' x' → logprob: -4.773529529571533
    3. ' _' → logprob: -4.773529529571533
    4. ' ' → logprob: -5.273529529571533
    5. ' L' → logprob: -7.523529529571533
    6. '_' → logprob: -8.398529052734375
    7. 'i' → logprob: -8.648529052734375
    8. ' item' → logprob: -9.773529052734375
    9. ' num' → logprob: -10.023529052734375
    10. '  ' → logprob: -10.273529052734375

Token 34: ' in' (ID: 306)
  Prédit: '_list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -0.009092770516872406
    2. '_' → logprob: -4.759092807769775
    3. '[' → logprob: -8.259092330932617
    4. '[i' → logprob: -9.009092330932617
    5. '_i' → logprob: -10.384092330932617
    6. '[_' → logprob: -10.509092330932617
    7. ' _' → logprob: -11.134092330932617
    8. ' in' → logprob: -12.634092330932617
    9. '_counter' → logprob: -12.884092330932617
    10. ')' → logprob: -13.259092330932617

Token 35: ' L' (ID: 451)
  Prédit: 'L'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'L' → logprob: -0.05488690733909607
    2. ' L' → logprob: -2.929886817932129
    3. '_L' → logprob: -13.679886817932129
    4. ' ' → logprob: -14.054886817932129
    5. '(L' → logprob: -14.929886817932129
    6. '_' → logprob: -15.054886817932129
    7. '	L' → logprob: -15.054886817932129
    8. ' range' → logprob: -15.179886817932129
    9. ' ' → logprob: -15.304886817932129
    10. 'range' → logprob: -15.679886817932129

Token 36: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -0.00032116140937432647
    2. '_' → logprob: -8.125321388244629
    3. 's' → logprob: -11.250321388244629
    4. ':' → logprob: -12.250321388244629
    5. '_:' → logprob: -12.500321388244629
    6. '_l' → logprob: -14.125321388244629
    7. ')' → logprob: -14.750321388244629
    8. 'list' → logprob: -15.000321388244629
    9. '_in' → logprob: -15.000321388244629
    10. '_lst' → logprob: -15.000321388244629

Token 37: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.7954958821064793e-05
    2. ':**' → logprob: -12.250018119812012
    3. ':
' → logprob: -12.625018119812012
    4. ' :' → logprob: -12.875018119812012
    5. ',' → logprob: -13.250018119812012
    6. '   ' → logprob: -13.625018119812012
    7. '=' → logprob: -13.875018119812012
    8. '>' → logprob: -14.250018119812012
    9. '):' → logprob: -14.250018119812012
    10. '>:' → logprob: -14.750018119812012

Token 38: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.29583850502967834
    2. ':' → logprob: -1.795838475227356
    3. '<|end|>' → logprob: -3.0458385944366455
    4. ' if' → logprob: -3.5458385944366455
    5. ' ' → logprob: -4.920838356018066
    6. ',' → logprob: -6.670838356018066
    7. 'if' → logprob: -6.670838356018066
    8. '```' → logprob: -7.295838356018066
    9. '+' → logprob: -7.670838356018066
    10. '<|end|>' → logprob: -7.670838356018066

Token 39: ' D' (ID: 415)
  Prédit: '    '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '    ' → logprob: -0.7761265635490417
    2. ' ' → logprob: -1.1511266231536865
    3. '   ' → logprob: -1.9011266231536865
    4. ' if' → logprob: -3.4011266231536865
    5. '```' → logprob: -4.401126384735107
    6. '<|end|>' → logprob: -5.026126384735107
    7. ' 
' → logprob: -5.401126384735107
    8. '     
' → logprob: -5.401126384735107
    9. ' ```' → logprob: -6.026126384735107
    10. 'if' → logprob: -6.401126384735107

Token 40: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.07024384289979935
    2. '+=' → logprob: -2.6952438354492188
    3. ' =' → logprob: -9.320243835449219
    4. ' -=' → logprob: -9.695243835449219
    5. '=' → logprob: -9.820243835449219
    6. '+' → logprob: -10.195243835449219
    7. ' *=' → logprob: -10.570243835449219
    8. ' ==' → logprob: -11.945243835449219
    9. ' ' → logprob: -12.320243835449219
    10. '   ' → logprob: -12.445243835449219

Token 41: ' L' (ID: 451)
  Prédit: 'L'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'L' → logprob: -0.1857818067073822
    2. ' L' → logprob: -1.8107818365097046
    3. 'x' → logprob: -5.435781955718994
    4. ' x' → logprob: -7.185781955718994
    5. '1' → logprob: -7.560781955718994
    6. ' ' → logprob: -9.060781478881836
    7. ' (' → logprob: -9.560781478881836
    8. '(' → logprob: -10.435781478881836
    9. 'abs' → logprob: -10.435781478881836
    10. '(L' → logprob: -10.435781478881836

Token 42: '
' (ID: 198)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.7743364572525024
    2. ' ' → logprob: -2.024336338043213
    3. '   ' → logprob: -2.024336338043213
    4. 'if' → logprob: -2.274336338043213
    5. '    ' → logprob: -2.399336338043213
    6. '+' → logprob: -4.024336338043213
    7. ' *' → logprob: -4.274336338043213
    8. '*' → logprob: -4.399336338043213
    9. '<|end|>' → logprob: -5.024336338043213
    10. '    
' → logprob: -5.149336338043213

Token 43: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09933007508516312
    2. ' if' → logprob: -2.974330186843872
    3. ' ' → logprob: -3.974330186843872
    4. '    
' → logprob: -4.849329948425293
    5. '    ' → logprob: -5.349329948425293
    6. 'if' → logprob: -5.724329948425293
    7. ' 
' → logprob: -5.974329948425293
    8. '<|end|>' → logprob: -6.724329948425293
    9. '
' → logprob: -6.974329948425293
    10. '\' → logprob: -7.099329948425293

Token 44: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.13674156367778778
    2. 'if' (adapté à ' if') → logprob: -2.3867416381835938
    3. '   ' → logprob: -3.3867416381835938
    4. ' while' → logprob: -6.636741638183594
    5. 'while' → logprob: -8.261741638183594
    6. ' counter' → logprob: -9.136741638183594
    7. 'counter' → logprob: -9.261741638183594
    8. '    ' → logprob: -9.261741638183594
    9. ' ' → logprob: -9.386741638183594
    10. '  ' → logprob: -10.761741638183594

Token 45: ' D' (ID: 415)
  Prédit: ' D'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' D' → logprob: -0.29009759426116943
    2. ' x' → logprob: -1.9150975942611694
    3. ' ' → logprob: -2.415097713470459
    4. 'x' → logprob: -5.165097713470459
    5. 'D' → logprob: -5.415097713470459
    6. ' L' → logprob: -5.915097713470459
    7. ' n' → logprob: -7.165097713470459
    8. ' (' → logprob: -7.915097713470459
    9. ' abs' → logprob: -8.4150972366333
    10. ' counter' → logprob: -8.4150972366333

Token 46: ' <=' (ID: 5017)
  Prédit: ' >='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.9758896827697754
    2. '>=' → logprob: -0.9758896827697754
    3. ' >' → logprob: -2.3508896827697754
    4. '>' → logprob: -2.4758896827697754
    5. '==' → logprob: -4.100889682769775
    6. ' <=' → logprob: -4.100889682769775
    7. ' ==' → logprob: -4.225889682769775
    8. '<=' → logprob: -4.600889682769775
    9. '%' → logprob: -5.225889682769775
    10. ' %' → logprob: -6.600889682769775

Token 47: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.11303600668907166
    2. ' x' → logprob: -2.2380359172821045
    3. ' ' → logprob: -8.863036155700684
    4. 'n' → logprob: -10.863036155700684
    5. '   ' → logprob: -11.363036155700684
    6. ' n' → logprob: -11.613036155700684
    7. 'X' → logprob: -11.613036155700684
    8. '100' → logprob: -13.300536155700684
    9. '1' → logprob: -13.675536155700684
    10. '  ' → logprob: -13.738036155700684

Token 48: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.008685722015798092
    2. ':
' → logprob: -4.75868558883667
    3. ' and' → logprob: -10.883686065673828
    4. '   ' → logprob: -11.008686065673828
    5. ':
' → logprob: -11.383686065673828
    6. ' :' → logprob: -11.508686065673828
    7. 'and' → logprob: -13.258686065673828
    8. ''s' → logprob: -13.383686065673828
    9. ':

' → logprob: -13.633686065673828
    10. ',' → logprob: -13.633686065673828

Token 49: '       ' (ID: 309)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.18817369639873505
    2. '   ' → logprob: -2.438173770904541
    3. ':
' → logprob: -3.438173770904541
    4. ' counter' → logprob: -3.563173770904541
    5. 'counter' → logprob: -4.313173770904541
    6. '	counter' → logprob: -5.313173770904541
    7. '       ' → logprob: -6.188173770904541
    8. '    ' → logprob: -6.938173770904541
    9. '_counter' → logprob: -7.063173770904541
    10. ' :' → logprob: -8.188173294067383

Token 50: ' counter' (ID: 9446)
  Prédit: ' counter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' counter' → logprob: -0.3501807153224945
    2. 'counter' (adapté à ' counter') → logprob: -1.225180745124817
    3. '   ' → logprob: -6.725180625915527
    4. '	counter' → logprob: -8.225180625915527
    5. '       ' → logprob: -9.475180625915527
    6. '    ' → logprob: -9.600180625915527
    7. '_counter' → logprob: -10.600180625915527
    8. ' ' → logprob: -10.975180625915527
    9. '[counter' → logprob: -11.475180625915527
    10. ' print' → logprob: -11.475180625915527

Token 51: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.6933553218841553
    2. '+=' → logprob: -0.6933553218841553
    3. '+' → logprob: -8.943355560302734
    4. '=' → logprob: -9.818355560302734
    5. ' *=' → logprob: -11.943355560302734
    6. ' +' → logprob: -12.568355560302734
    7. ' =' → logprob: -12.693355560302734
    8. ' ' → logprob: -12.818355560302734
    9. '*=' → logprob: -13.193355560302734
    10. ']+=' → logprob: -13.693355560302734

Token 52: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.004620591644197702
    2. ' ' → logprob: -5.379620552062988
    3. '0' → logprob: -15.504620552062988
    4. '   ' → logprob: -16.504621505737305
    5. 'L' → logprob: -16.879621505737305
    6. '2' → logprob: -17.379621505737305
    7. ' L' → logprob: -18.067121505737305
    8. '+' → logprob: -18.254621505737305
    9. 'counter' → logprob: -18.254621505737305
    10. '  ' → logprob: -18.567121505737305

Token 53: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.8087270038668066e-05
    2. ' ' → logprob: -10.500027656555176
    3. '0' → logprob: -15.375027656555176
    4. '2' → logprob: -16.125028610229492
    5. 'L' → logprob: -16.750028610229492
    6. '4' → logprob: -17.875028610229492
    7. '10' → logprob: -18.250028610229492
    8. '6' → logprob: -18.375028610229492
    9. '-' → logprob: -18.562528610229492
    10. 'n' → logprob: -18.687528610229492

Token 54: '
' (ID: 198)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.4531767964363098
    2. ' else' → logprob: -1.078176736831665
    3. 'print' → logprob: -4.453176975250244
    4. '<|end|>' → logprob: -4.453176975250244
    5. '```' → logprob: -8.203176498413086
    6. '\n' → logprob: -8.953176498413086
    7. ' ' → logprob: -9.328176498413086
    8. 'elif' → logprob: -9.328176498413086
    9. '   ' → logprob: -9.953176498413086
    10. '    ' → logprob: -10.203176498413086

Token 55: '   ' (ID: 271)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.20065654814243317
    2. ' else' → logprob: -1.825656533241272
    3. 'print' → logprob: -4.200656414031982
    4. '<|end|>' → logprob: -5.325656414031982
    5. '```' → logprob: -8.20065689086914
    6. 'elif' → logprob: -8.45065689086914
    7. 'return' → logprob: -9.20065689086914
    8. ' ' → logprob: -9.95065689086914
    9. '\n' → logprob: -10.57565689086914
    10. '	else' → logprob: -10.70065689086914

Token 56: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.3566274344921112
    2. '<|end|>' → logprob: -1.8566274642944336
    3. ' else' → logprob: -2.1066274642944336
    4. 'print' → logprob: -4.606627464294434
    5. '```' → logprob: -5.106627464294434
    6. '\n' → logprob: -5.981627464294434
    7. ' ' → logprob: -6.856627464294434
    8. 'elif' → logprob: -7.231627464294434
    9. '<|end|>' → logprob: -8.106627464294434
    10. '0' → logprob: -8.356627464294434

Token 57: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.008428284898400307
    2. '       ' → logprob: -4.88342809677124
    3. '   ' → logprob: -7.38342809677124
    4. ':
' → logprob: -9.258428573608398
    5. '    ' → logprob: -9.883428573608398
    6. ' :' → logprob: -10.633428573608398
    7. '     ' → logprob: -11.758428573608398
    8. '      ' → logprob: -12.508428573608398
    9. '           ' → logprob: -12.883428573608398
    10. ' break' → logprob: -12.883428573608398

Token 58: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.06918227672576904
    2. 'break' → logprob: -2.9441823959350586
    3. '   ' → logprob: -4.694182395935059
    4. ' break' → logprob: -5.319182395935059
    5. '```' → logprob: -9.569182395935059
    6. '	break' → logprob: -9.694182395935059
    7. '           ' → logprob: -11.569182395935059
    8. '_break' → logprob: -12.819182395935059
    9. ' ' → logprob: -12.944182395935059
    10. '     ' → logprob: -13.694182395935059

Token 59: ' break' (ID: 2338)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' (adapté à ' break') → logprob: -0.006926835514605045
    2. ' break' → logprob: -5.006927013397217
    3. '       ' → logprob: -8.631926536560059
    4. '   ' → logprob: -11.006926536560059
    5. '	break' → logprob: -11.381926536560059
    6. '```' → logprob: -12.631926536560059
    7. 'print' → logprob: -14.506926536560059
    8. '_break' → logprob: -15.006926536560059
    9. '           ' → logprob: -15.006926536560059
    10. 'Break' → logprob: -15.631926536560059

Token 60: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00025978617486543953
    2. ')' → logprob: -8.500259399414062
    3. ' print' → logprob: -10.125259399414062
    4. '
' → logprob: -11.500259399414062
    5. ')
' → logprob: -13.375259399414062
    6. '<|end|>' → logprob: -13.750259399414062
    7. '.print' → logprob: -14.000259399414062
    8. '(print' → logprob: -14.250259399414062
    9. ',' → logprob: -15.125259399414062
    10. '```' → logprob: -15.125259399414062

Token 61: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -7.886803359724581e-05
    2. ')' → logprob: -9.750079154968262
    3. ' print' → logprob: -10.875079154968262
    4. '
' → logprob: -14.750079154968262
    5. '(print' → logprob: -14.875079154968262
    6. ')
' → logprob: -15.625079154968262
    7. '.print' → logprob: -15.625079154968262
    8. '```' → logprob: -15.750079154968262
    9. ',' → logprob: -16.375078201293945
    10. '<|end|>' → logprob: -16.375078201293945

Token 62: '(counter' (ID: 85625)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0619802325963974
    2. '(counter' → logprob: -2.8119802474975586
    3. '()' → logprob: -11.811980247497559
    4. '('' → logprob: -13.186980247497559
    5. '((' → logprob: -14.061980247497559
    6. '(c' → logprob: -14.436980247497559
    7. '(C' → logprob: -14.811980247497559
    8. '(count' → logprob: -15.061980247497559
    9. '("' → logprob: -15.061980247497559
    10. '(
' → logprob: -15.436980247497559

Token 63: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0280383548888494e-06
    2. ' )' → logprob: -14.125000953674316
    3. '))' → logprob: -15.750000953674316
    4. ')`' → logprob: -16.875001907348633
    5. '`)' → logprob: -18.375001907348633
    6. '')' → logprob: -18.625001907348633
    7. '）' → logprob: -19.375001907348633
    8. '(' → logprob: -19.500001907348633
    9. ')**' → logprob: -19.500001907348633
    10. '()' → logprob: -19.625001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 61
Tokens correctement prédits (1ère position, stricte): 18
Tokens correctement prédits (1ère position, avec adaptation): 20
Tokens correctement prédits (top 10): 48
Précision stricte (1ère position): 29.51%
Précision adaptée (1ère position): 32.79%
Précision (top 10): 78.69%
================================================================================
