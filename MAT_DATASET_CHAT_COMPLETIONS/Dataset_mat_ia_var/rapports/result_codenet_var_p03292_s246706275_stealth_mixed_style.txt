================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:12:34
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
x, y, z = (int(e) for e in input().split())
def get_costs(a, b, c):
    return [abs(a-b), abs(b-c), abs(c-a)]
class Result:
    pass
Result.value = 0
for idx, val in enumerate(sorted(get_costs(x, y, z))):
    if idx < 2:
        Result.value += val
else:
    print(Result.value)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'x' (ID: 87)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' y' (ID: 342)
  → Token d'amorce (pas de prédiction)

Token 3: ',' (ID: 11)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.10477794706821442
    2. ' =' → logprob: -2.7297780513763428
    3. ',' → logprob: -3.4797780513763428
    4. '.' → logprob: -6.729777812957764
    5. ' ' → logprob: -6.854777812957764
    6. '+' → logprob: -7.729777812957764
    7. ')' → logprob: -8.229778289794922
    8. '<|end|>' → logprob: -9.229778289794922
    9. '```' → logprob: -9.229778289794922
    10. ' ,' → logprob: -10.104778289794922

Token 4: ' z' (ID: 579)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.07700429856777191
    2. ' =' → logprob: -2.7020041942596436
    3. ' ' → logprob: -5.577004432678223
    4. ',' → logprob: -5.827004432678223
    5. ')' → logprob: -9.202004432678223
    6. ' ,' → logprob: -9.577004432678223
    7. '.' → logprob: -10.077004432678223
    8. '_' → logprob: -10.702004432678223
    9. '+' → logprob: -11.202004432678223
    10. '```' → logprob: -11.452004432678223

Token 5: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.06592906266450882
    2. ' =' → logprob: -3.4409291744232178
    3. ',' → logprob: -3.5659291744232178
    4. ' ' → logprob: -6.690928936004639
    5. '.' → logprob: -7.440928936004639
    6. ')' → logprob: -7.565928936004639
    7. '+' → logprob: -7.565928936004639
    8. '```' → logprob: -8.815929412841797
    9. '<|end|>' → logprob: -8.940929412841797
    10. ';' → logprob: -9.190929412841797

Token 6: ' (' (ID: 350)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.6996039152145386
    2. ' ' → logprob: -0.6996039152145386
    3. '1' → logprob: -5.449604034423828
    4. ' [' → logprob: -7.324604034423828
    5. '[' → logprob: -7.449604034423828
    6. '10' → logprob: -8.449604034423828
    7. ' (' → logprob: -8.574604034423828
    8. 'x' → logprob: -9.074604034423828
    9. '(' → logprob: -9.324604034423828
    10. ' x' → logprob: -9.324604034423828

Token 7: 'int' (ID: 491)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.6575086116790771
    2. '0' → logprob: -1.0325086116790771
    3. ')' → logprob: -2.157508611679077
    4. '10' → logprob: -5.032508850097656
    5. 'x' → logprob: -6.282508850097656
    6. '5' → logprob: -8.032508850097656
    7. '4' → logprob: -8.282508850097656
    8. '3' → logprob: -8.282508850097656
    9. ' ' → logprob: -8.282508850097656
    10. '42' → logprob: -8.282508850097656

Token 8: '(e' (ID: 3454)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4449472427368164
    2. '(' → logprob: -1.0699472427368164
    3. '(x' → logprob: -5.319947242736816
    4. ' ' → logprob: -5.569947242736816
    5. ' )' → logprob: -6.069947242736816
    6. '<|end|>' → logprob: -6.944947242736816
    7. 's' → logprob: -7.319947242736816
    8. ',' → logprob: -7.444947242736816
    9. '[' → logprob: -7.694947242736816
    10. '```' → logprob: -7.819947242736816

Token 9: ')' (ID: 8)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.43406209349632263
    2. 'v' → logprob: -2.4340620040893555
    3. '(' → logprob: -2.6840620040893555
    4. '(val' → logprob: -3.3090620040893555
    5. ')' → logprob: -3.4340620040893555
    6. '(v' → logprob: -3.9340620040893555
    7. '(input' → logprob: -3.9340620040893555
    8. 'x' → logprob: -3.9340620040893555
    9. '(n' → logprob: -4.0590620040893555
    10. 'xp' → logprob: -4.8090620040893555

Token 10: ' for' (ID: 395)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.009152418002486229
    2. ',' → logprob: -5.009152412414551
    3. '),' → logprob: -7.634152412414551
    4. '[' → logprob: -7.884152412414551
    5. '(' → logprob: -8.00915241241455
    6. '*' → logprob: -8.50915241241455
    7. '(x' → logprob: -8.50915241241455
    8. '))' → logprob: -8.63415241241455
    9. 's' → logprob: -9.00915241241455
    10. 'x' → logprob: -9.88415241241455

Token 11: ' e' (ID: 319)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.1098533868789673
    2. ' e' → logprob: -1.1098533868789673
    3. ' x' → logprob: -2.6098532676696777
    4. ')' → logprob: -3.1098532676696777
    5. ' a' → logprob: -3.2348532676696777
    6. ' input' → logprob: -3.3598532676696777
    7. ' s' → logprob: -3.7348532676696777
    8. '<|end|>' → logprob: -3.8598532676696777
    9. ' (' → logprob: -3.9848532676696777
    10. ' user' → logprob: -4.234853267669678

Token 12: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.04873860627412796
    2. 'in' → logprob: -3.048738718032837
    3. ')' → logprob: -9.173738479614258
    4. '<|end|>' → logprob: -10.798738479614258
    5. ' ' → logprob: -11.048738479614258
    6. ' )' → logprob: -12.173738479614258
    7. ' ' → logprob: -13.923738479614258
    8. '  ' → logprob: -14.173738479614258
    9. '_' → logprob: -14.298738479614258
    10. ' x' → logprob: -14.798738479614258

Token 13: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.12432471662759781
    2. 'input' → logprob: -2.3743247985839844
    3. ' range' → logprob: -4.124324798583984
    4. 'range' → logprob: -5.749324798583984
    5. ' iter' → logprob: -6.999324798583984
    6. ')' → logprob: -7.124324798583984
    7. '(input' → logprob: -7.374324798583984
    8. ' x' → logprob: -8.124324798583984
    9. ' data' → logprob: -8.249324798583984
    10. ' user' → logprob: -8.374324798583984

Token 14: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -1.0759727954864502
    2. ')' → logprob: -1.4509727954864502
    3. '()' → logprob: -1.4509727954864502
    4. '(' → logprob: -1.7009727954864502
    5. '('' → logprob: -5.575972557067871
    6. '().' → logprob: -6.075972557067871
    7. '(()' → logprob: -7.950972557067871
    8. '')' → logprob: -8.825972557067871
    9. '("("' → logprob: -9.200972557067871
    10. '`)' → logprob: -9.325972557067871

Token 15: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0003322473494336009
    2. 'strip' → logprob: -8.12533187866211
    3. ' split' → logprob: -10.37533187866211
    4. 'rstrip' → logprob: -12.37533187866211
    5. 'spl' → logprob: -15.00033187866211
    6. ')' → logprob: -15.12533187866211
    7. 'replace' → logprob: -15.62533187866211
    8. '(split' → logprob: -16.75033187866211
    9. '```' → logprob: -17.75033187866211
    10. 'read' → logprob: -17.87533187866211

Token 16: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.011475472711026669
    2. '()' → logprob: -4.636475563049316
    3. ')' → logprob: -6.636475563049316
    4. '(' → logprob: -8.136475563049316
    5. '()))' → logprob: -10.011475563049316
    6. '('' → logprob: -10.386475563049316
    7. ' ())' → logprob: -11.261475563049316
    8. '()]' → logprob: -12.261475563049316
    9. '())
' → logprob: -12.386475563049316
    10. '()),' → logprob: -13.011475563049316

Token 17: 'def' (ID: 1314)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.2757046222686768
    2. '#' → logprob: -1.7757046222686768
    3. '<|end|>' → logprob: -2.0257046222686768
    4. '.' → logprob: -2.5257046222686768
    5. '+' → logprob: -2.5257046222686768
    6. ',' → logprob: -2.7757046222686768
    7. ')' → logprob: -3.1507046222686768
    8. ';' → logprob: -3.4007046222686768
    9. ':' → logprob: -3.6507046222686768
    10. ' if' → logprob: -4.025704383850098

Token 18: ' get' (ID: 717)
  Prédit: ' factorial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' factorial' → logprob: -1.281963586807251
    2. ' my' → logprob: -1.906963586807251
    3. ' f' → logprob: -2.156963586807251
    4. ' ' → logprob: -2.281963586807251
    5. ' foo' → logprob: -2.531963586807251
    6. ' func' → logprob: -2.531963586807251
    7. ' calculate' → logprob: -2.656963586807251
    8. ' add' → logprob: -3.781963586807251
    9. ' space' → logprob: -3.906963586807251
    10. ' function' → logprob: -4.156963348388672

Token 19: '_cost' (ID: 36820)
  Prédit: '_max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_max' → logprob: -0.5610628724098206
    2. '_' → logprob: -1.3110628128051758
    3. '_cube' → logprob: -3.061062812805176
    4. '_sum' → logprob: -3.311062812805176
    5. '_factor' → logprob: -4.561062812805176
    6. '_value' → logprob: -4.811062812805176
    7. '_area' → logprob: -4.811062812805176
    8. '_surface' → logprob: -5.436062812805176
    9. '_div' → logprob: -5.686062812805176
    10. '_g' → logprob: -5.686062812805176

Token 20: 's' (ID: 82)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.016469605267047882
    2. '(x' → logprob: -4.891469478607178
    3. '_' → logprob: -6.266469478607178
    4. '(_' → logprob: -6.516469478607178
    5. '():' → logprob: -6.766469478607178
    6. '(a' → logprob: -6.891469478607178
    7. '(_:' → logprob: -7.641469478607178
    8. '(s' → logprob: -8.016469955444336
    9. '):' → logprob: -8.141469955444336
    10. '(:' → logprob: -8.391469955444336

Token 21: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.12450166046619415
    2. '_' → logprob: -2.6245017051696777
    3. '(x' → logprob: -4.499501705169678
    4. '(_:' → logprob: -4.499501705169678
    5. '(_' → logprob: -4.874501705169678
    6. '_:' → logprob: -5.374501705169678
    7. '():' → logprob: -5.874501705169678
    8. '_(' → logprob: -6.124501705169678
    9. '(a' → logprob: -6.499501705169678
    10. '(:' → logprob: -7.749501705169678

Token 22: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.23401720821857452
    2. '):' → logprob: -1.734017252922058
    3. ')' → logprob: -3.6090171337127686
    4. '[' → logprob: -6.859017372131348
    5. ',a' → logprob: -6.859017372131348
    6. 'a' → logprob: -7.734017372131348
    7. '_,' → logprob: -8.109017372131348
    8. 's' → logprob: -8.234017372131348
    9. '_' → logprob: -8.234017372131348
    10. ',b' → logprob: -8.359017372131348

Token 23: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.05496421083807945
    2. ' b' → logprob: -2.929964303970337
    3. ')' → logprob: -11.429964065551758
    4. 's' → logprob: -11.554964065551758
    5. 'a' → logprob: -11.804964065551758
    6. 'n' → logprob: -12.054964065551758
    7. 'c' → logprob: -12.304964065551758
    8. 'p' → logprob: -12.679964065551758
    9. 'l' → logprob: -12.742464065551758
    10. ' ' → logprob: -12.804964065551758

Token 24: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.13387642800807953
    2. ',' → logprob: -2.508876323699951
    3. ')' → logprob: -3.133876323699951
    4. '_' → logprob: -9.50887680053711
    5. ':' → logprob: -10.50887680053711
    6. ' ):' → logprob: -10.75887680053711
    7. 'a' → logprob: -11.00887680053711
    8. ' ,' → logprob: -11.13387680053711
    9. ')):' → logprob: -11.13387680053711
    10. '=' → logprob: -11.13387680053711

Token 25: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.16164495050907135
    2. ' c' → logprob: -1.9116449356079102
    3. ')' → logprob: -8.66164493560791
    4. 's' → logprob: -8.78664493560791
    5. ' ' → logprob: -8.78664493560791
    6. 'd' → logprob: -9.66164493560791
    7. 'x' → logprob: -9.72414493560791
    8. 'n' → logprob: -9.78664493560791
    9. ' s' → logprob: -9.84914493560791
    10. ' )' → logprob: -10.03664493560791

Token 26: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.020640922710299492
    2. ')' → logprob: -3.8956408500671387
    3. ',' → logprob: -9.895641326904297
    4. ':' → logprob: -10.645641326904297
    5. ' ):' → logprob: -11.770641326904297
    6. ''):' → logprob: -12.270641326904297
    7. '):
' → logprob: -12.520641326904297
    8. ')):' → logprob: -13.895641326904297
    9. '}' → logprob: -14.270641326904297
    10. '>):' → logprob: -14.395641326904297

Token 27: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.007670275866985321
    2. '):' → logprob: -5.6326704025268555
    3. '   ' → logprob: -6.2576704025268555
    4. ':
' → logprob: -7.3826704025268555
    5. ':return' → logprob: -7.6326704025268555
    6. ')' → logprob: -7.8826704025268555
    7. '':' → logprob: -9.007670402526855
    8. '```' → logprob: -9.382670402526855
    9. ' :' → logprob: -9.757670402526855
    10. '`:' → logprob: -9.882670402526855

Token 28: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -1.2606154680252075
    2. '   ' → logprob: -1.3856154680252075
    3. '\n' → logprob: -1.7606154680252075
    4. '    ' → logprob: -2.635615348815918
    5. 'return' (adapté à ' return') → logprob: -2.885615348815918
    6. ' 
' → logprob: -3.510615348815918
    7. '<|end|>' → logprob: -3.635615348815918
    8. ' ' → logprob: -3.760615348815918
    9. ' \' → logprob: -3.760615348815918
    10. '\' → logprob: -4.635615348815918

Token 29: ' [' (ID: 723)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.2980250120162964
    2. 'a' → logprob: -1.5480250120162964
    3. ' abs' → logprob: -3.798025131225586
    4. '[a' → logprob: -5.298025131225586
    5. ' [' → logprob: -5.548025131225586
    6. 'abs' → logprob: -5.923025131225586
    7. ' (' → logprob: -5.923025131225586
    8. ' max' → logprob: -6.048025131225586
    9. '[' → logprob: -6.423025131225586
    10. ' min' → logprob: -6.673025131225586

Token 30: 'abs' (ID: 6071)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.01066999789327383
    2. ' a' → logprob: -6.135670185089111
    3. 'abs' → logprob: -6.135670185089111
    4. '   ' → logprob: -6.260670185089111
    5. '0' → logprob: -6.385670185089111
    6. '[a' → logprob: -7.385670185089111
    7. '(a' → logprob: -7.510670185089111
    8. '2' → logprob: -8.385669708251953
    9. 'max' → logprob: -8.385669708251953
    10. '3' → logprob: -8.510669708251953

Token 31: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.0556415431201458
    2. '(x' → logprob: -2.9306416511535645
    3. 'a' → logprob: -7.5556416511535645
    4. '(' → logprob: -9.430641174316406
    5. '(b' → logprob: -9.805641174316406
    6. '(c' → logprob: -10.305641174316406
    7. '(z' → logprob: -10.930641174316406
    8. 'x' → logprob: -11.430641174316406
    9. '(i' → logprob: -11.430641174316406
    10. '(e' → logprob: -12.055641174316406

Token 32: '-b' (ID: 2118)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.2871232330799103
    2. ' -' → logprob: -1.537123203277588
    3. '-x' → logprob: -4.037123203277588
    4. '-i' → logprob: -4.912123203277588
    5. '-b' → logprob: -5.037123203277588
    6. '-c' → logprob: -7.787123203277588
    7. '-n' → logprob: -7.787123203277588
    8. ')' → logprob: -8.037123680114746
    9. '-j' → logprob: -8.037123680114746
    10. ' ' → logprob: -8.037123680114746

Token 33: '),' (ID: 936)
  Prédit: '),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.16385267674922943
    2. ')' → logprob: -1.9138526916503906
    3. ')+' → logprob: -5.663852691650391
    4. ' ),' → logprob: -9.53885269165039
    5. ' ' → logprob: -10.91385269165039
    6. '+' → logprob: -11.03885269165039
    7. '-' → logprob: -11.66385269165039
    8. '),
' → logprob: -12.03885269165039
    9. '),

' → logprob: -12.03885269165039
    10. ',' → logprob: -12.41385269165039

Token 34: ' abs' (ID: 8443)
  Prédit: 'abs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'abs' → logprob: -0.6326542496681213
    2. ' abs' → logprob: -0.7576542496681213
    3. ' ' → logprob: -10.882654190063477
    4. 'a' → logprob: -11.382654190063477
    5. ' a' → logprob: -12.382654190063477
    6. '    ' → logprob: -12.382654190063477
    7. '   ' → logprob: -12.632654190063477
    8. '(abs' → logprob: -12.882654190063477
    9. 'c' → logprob: -13.507654190063477
    10. '  ' → logprob: -13.632654190063477

Token 35: '(b' (ID: 3229)
  Prédit: '(a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.1250714659690857
    2. '(b' → logprob: -2.2500715255737305
    3. '(c' → logprob: -4.6250715255737305
    4. 'a' → logprob: -6.3750715255737305
    5. 'b' → logprob: -7.5000715255737305
    6. '(' → logprob: -9.75007152557373
    7. ' (' → logprob: -11.25007152557373
    8. 'c' → logprob: -11.87507152557373
    9. ' a' → logprob: -12.37507152557373
    10. ' ' → logprob: -12.37507152557373

Token 36: '-c' (ID: 3452)
  Prédit: '-c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-c' → logprob: -0.003374599851667881
    2. ' -' → logprob: -5.8783745765686035
    3. '-' → logprob: -7.5033745765686035
    4. 'c' → logprob: -11.628375053405762
    5. '-a' → logprob: -12.878375053405762
    6. ')' → logprob: -14.065875053405762
    7. ' ' → logprob: -14.503375053405762
    8. '	c' → logprob: -14.753375053405762
    9. '-z' → logprob: -14.815875053405762
    10. '-)' → logprob: -14.878375053405762

Token 37: '),' (ID: 936)
  Prédit: '),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.0005487450980581343
    2. ')' → logprob: -7.875548839569092
    3. ')]' → logprob: -8.875548362731934
    4. ' ),' → logprob: -10.875548362731934
    5. ')],' → logprob: -12.750548362731934
    6. ',' → logprob: -13.500548362731934
    7. '],' → logprob: -13.625548362731934
    8. '))' → logprob: -13.875548362731934
    9. ''),' → logprob: -14.125548362731934
    10. ' ' → logprob: -14.500548362731934

Token 38: ' abs' (ID: 8443)
  Prédit: 'abs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'abs' → logprob: -0.2811761796474457
    2. ' abs' → logprob: -1.406176209449768
    3. '   ' → logprob: -11.656176567077637
    4. 'c' → logprob: -11.781176567077637
    5. '(abs' → logprob: -12.656176567077637
    6. ' c' → logprob: -13.406176567077637
    7. ' ' → logprob: -13.531176567077637
    8. '  ' → logprob: -13.656176567077637
    9. '```' → logprob: -14.406176567077637
    10. 'a' → logprob: -14.906176567077637

Token 39: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.14306412637233734
    2. '(a' → logprob: -2.018064022064209
    3. '(b' → logprob: -7.893064022064209
    4. 'a' → logprob: -12.143064498901367
    5. '(' → logprob: -12.393064498901367
    6. ' (' → logprob: -13.893064498901367
    7. 'c' → logprob: -14.018064498901367
    8. '```' → logprob: -14.018064498901367
    9. ' ' → logprob: -14.268064498901367
    10. '(x' → logprob: -14.768064498901367

Token 40: '-a' (ID: 8575)
  Prédit: '-a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-a' → logprob: -0.004972712602466345
    2. '-' → logprob: -6.0049729347229
    3. ' -' → logprob: -6.0049729347229
    4. 'a' → logprob: -11.504972457885742
    5. '-)' → logprob: -12.129972457885742
    6. '-а' → logprob: -12.129972457885742
    7. '-A' → logprob: -12.879972457885742
    8. ')' → logprob: -13.004972457885742
    9. ')-' → logprob: -15.004972457885742
    10. '-ai' → logprob: -15.379972457885742

Token 41: ')]
' (ID: 11587)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.00036204091156832874
    2. ')' → logprob: -8.000362396240234
    3. ']' → logprob: -11.375362396240234
    4. ')])' → logprob: -12.000362396240234
    5. '))' → logprob: -12.875362396240234
    6. ')}' → logprob: -13.250362396240234
    7. '),' → logprob: -13.250362396240234
    8. '])]' → logprob: -14.250362396240234
    9. '')]' → logprob: -14.375362396240234
    10. ' )' → logprob: -14.875362396240234

Token 42: 'class' (ID: 1444)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.9253548383712769
    2. '
' → logprob: -1.3003548383712769
    3. '<|end|>' → logprob: -1.6753548383712769
    4. 'def' → logprob: -2.8003549575805664
    5. '```' → logprob: -3.5503549575805664
    6. 'for' → logprob: -4.550354957580566
    7. '\n' → logprob: -4.925354957580566
    8. 'result' → logprob: -5.425354957580566
    9. 'newline' → logprob: -6.050354957580566
    10. 'a' → logprob: -6.050354957580566

Token 43: ' Result' (ID: 9112)
  Prédit: ' Triangle'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' Triangle' → logprob: -0.12232568860054016
    2. ' Point' → logprob: -3.1223256587982178
    3. ' Solution' → logprob: -3.2473256587982178
    4. ' Solver' → logprob: -4.872325897216797
    5. ' Cube' → logprob: -5.372325897216797
    6. ' Distance' → logprob: -5.747325897216797
    7. ' Trip' → logprob: -5.997325897216797
    8. ' ' → logprob: -6.122325897216797
    9. ' Cost' → logprob: -6.247325897216797
    10. ' Calculator' → logprob: -6.372325897216797

Token 44: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -6.659005157416686e-05
    2. '(' → logprob: -11.000066757202148
    3. ' :' → logprob: -11.250066757202148
    4. '():' → logprob: -11.250066757202148
    5. ':
' → logprob: -11.375066757202148
    6. ':**' → logprob: -11.625066757202148
    7. '):' → logprob: -13.875066757202148
    8. '>:' → logprob: -14.500066757202148
    9. '(:' → logprob: -15.625066757202148
    10. '(object' → logprob: -15.750066757202148

Token 45: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6361207962036133
    2. '<|end|>' → logprob: -1.3861207962036133
    3. ' 
' → logprob: -1.7611207962036133
    4. '    ' → logprob: -4.136120796203613
    5. '
' → logprob: -4.511120796203613
    6. '   ' → logprob: -5.261120796203613
    7. '     
' → logprob: -5.761120796203613
    8. '    
' → logprob: -5.761120796203613
    9. ' def' → logprob: -6.011120796203613
    10. '<|end|>' → logprob: -6.261120796203613

Token 46: ' pass' (ID: 1853)
  Prédit: ' def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' def' → logprob: -0.015269322320818901
    2. ' pass' → logprob: -4.5152692794799805
    3. 'def' → logprob: -5.5152692794799805
    4. '    ' → logprob: -9.89026927947998
    5. ' __' → logprob: -10.51526927947998
    6. 'pass' (adapté à ' pass') → logprob: -10.51526927947998
    7. ' 
' → logprob: -10.64026927947998
    8. '   ' → logprob: -10.64026927947998
    9. '```' → logprob: -11.39026927947998
    10. ' ' → logprob: -12.01526927947998

Token 47: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.03218263387680054
    2. '<|end|>' → logprob: -4.157182693481445
    3. 'x' → logprob: -4.907182693481445
    4. '

' → logprob: -6.157182693481445
    5. 'def' → logprob: -6.282182693481445
    6. '\n' → logprob: -6.907182693481445
    7. ':' → logprob: -7.407182693481445
    8. 'class' → logprob: -7.532182693481445
    9. '<|end|>' → logprob: -7.782182693481445
    10. '
' → logprob: -8.532182693481445

Token 48: 'Result' (ID: 2769)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.04143652319908142
    2. '<|end|>' → logprob: -4.041436672210693
    3. 'x' → logprob: -4.541436672210693
    4. '

' → logprob: -5.291436672210693
    5. 'def' → logprob: -5.416436672210693
    6. 'r' → logprob: -6.791436672210693
    7. '\n' → logprob: -8.041436195373535
    8. ' 
' → logprob: -8.541436195373535
    9. 'class' → logprob: -8.666436195373535
    10. 'd' → logprob: -8.666436195373535

Token 49: '.value' (ID: 4683)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.052060019224882126
    2. '(' → logprob: -3.552060127258301
    3. '().' → logprob: -4.177060127258301
    4. '()' → logprob: -5.177060127258301
    5. '<|end|>' → logprob: -7.927060127258301
    6. ' .' → logprob: -9.3020601272583
    7. '```' → logprob: -10.1770601272583
    8. ')' → logprob: -10.1770601272583
    9. ' (' → logprob: -10.3020601272583
    10. '(.)' → logprob: -10.4270601272583

Token 50: ' =' (ID: 314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 51: ' ' (ID: 220)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.8378487825393677
    2. '0' → logprob: -1.2128487825393677
    3. 'min' → logprob: -2.087848663330078
    4. 'get' → logprob: -2.837848663330078
    5. 'x' → logprob: -3.587848663330078
    6. 'float' → logprob: -4.212848663330078
    7. 'abs' → logprob: -4.837848663330078
    8. '100' → logprob: -4.837848663330078
    9. 'sum' → logprob: -5.337848663330078
    10. '[' → logprob: -5.837848663330078

Token 52: '0' (ID: 15)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.5401102304458618
    2. 'min' → logprob: -1.2901102304458618
    3. '0' → logprob: -3.0401101112365723
    4. 'get' → logprob: -3.1651101112365723
    5. 'sum' → logprob: -4.415110111236572
    6. 'abs' → logprob: -4.540110111236572
    7. 'x' → logprob: -4.665110111236572
    8. 'float' → logprob: -5.040110111236572
    9. '100' → logprob: -6.290110111236572
    10. '[x' → logprob: -6.415110111236572

Token 53: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.382612407207489
    2. '<|end|>' → logprob: -1.2576124668121338
    3. 'result' → logprob: -4.007612228393555
    4. '<|end|>' → logprob: -5.257612228393555
    5. 'x' → logprob: -6.257612228393555
    6. '\n' → logprob: -6.757612228393555
    7. '
' → logprob: -6.882612228393555
    8. 'def' → logprob: -7.007612228393555
    9. 'for' → logprob: -7.132612228393555
    10. 'Result' → logprob: -7.382612228393555

Token 54: 'for' (ID: 1938)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.1700408160686493
    2. 'result' → logprob: -2.6700408458709717
    3. 'for' → logprob: -3.4200408458709717
    4. 'while' → logprob: -4.045040607452393
    5. 'Result' → logprob: -4.670040607452393
    6. 'def' → logprob: -4.795040607452393
    7. 'res' → logprob: -5.420040607452393
    8. 'x' → logprob: -6.045040607452393
    9. 'max' → logprob: -6.045040607452393
    10. '
' → logprob: -6.920040607452393

Token 55: ' idx' (ID: 14016)
  Prédit: ' _'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.5757211446762085
    2. ' i' → logprob: -1.4507211446762085
    3. ' x' → logprob: -2.575721263885498
    4. ' a' → logprob: -2.575721263885498
    5. ' ' → logprob: -3.575721263885498
    6. '_' → logprob: -4.450721263885498
    7. ' e' → logprob: -4.950721263885498
    8. '  ' → logprob: -6.075721263885498
    9. ' v' → logprob: -8.45072078704834
    10. ' z' → logprob: -8.45072078704834

Token 56: ',' (ID: 11)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.17601580917835236
    2. ',' → logprob: -2.426015853881836
    3. 'in' → logprob: -2.801015853881836
    4. ' ' → logprob: -5.051015853881836
    5. ' ,' → logprob: -5.176015853881836
    6. '  ' → logprob: -9.551015853881836
    7. ' i' → logprob: -11.051015853881836
    8. 's' → logprob: -11.176015853881836
    9. '   ' → logprob: -11.426015853881836
    10. ',in' → logprob: -11.551015853881836

Token 57: ' val' (ID: 1459)
  Prédit: ' cost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cost' → logprob: -1.316293478012085
    2. ' val' → logprob: -1.441293478012085
    3. ' d' → logprob: -2.066293478012085
    4. ' dist' → logprob: -2.691293478012085
    5. 'cost' → logprob: -3.066293478012085
    6. ' diff' → logprob: -3.191293478012085
    7. 'd' → logprob: -3.566293478012085
    8. 'val' → logprob: -3.691293478012085
    9. ' v' → logprob: -3.816293478012085
    10. ' value' → logprob: -4.191293716430664

Token 58: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.03831413388252258
    2. 'in' → logprob: -3.2883141040802
    3. ',' → logprob: -9.038313865661621
    4. ' ' → logprob: -9.663313865661621
    5. 's' → logprob: -10.288313865661621
    6. ')' → logprob: -11.663313865661621
    7. '=' → logprob: -12.350813865661621
    8. '```' → logprob: -12.350813865661621
    9. 'inal' → logprob: -12.475813865661621
    10. '  ' → logprob: -12.788313865661621

Token 59: ' enumerate' (ID: 29671)
  Prédit: ' enumerate'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' enumerate' → logprob: -0.0017143317963927984
    2. 'enumer' → logprob: -6.37671422958374
    3. '(en' → logprob: -12.626714706420898
    4. '```' → logprob: -13.126714706420898
    5. ' ' → logprob: -13.376714706420898
    6. ' en' → logprob: -13.751714706420898
    7. ' get' → logprob: -14.001714706420898
    8. ' enumer' → logprob: -14.251714706420898
    9. ' enum' → logprob: -14.251714706420898
    10. '  ' → logprob: -14.876714706420898

Token 60: '(sorted' (ID: 92488)
  Prédit: '(get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(get' → logprob: -0.0009055070113390684
    2. '([' → logprob: -7.625905513763428
    3. '(x' → logprob: -8.62590503692627
    4. '(' → logprob: -8.87590503692627
    5. 'get' → logprob: -9.62590503692627
    6. '((' → logprob: -11.62590503692627
    7. '(Result' → logprob: -12.37590503692627
    8. '(range' → logprob: -12.75090503692627
    9. '[get' → logprob: -13.12590503692627
    10. ' (' → logprob: -13.25090503692627

Token 61: '(get' (ID: 7119)
  Prédit: '(get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(get' → logprob: -0.16393566131591797
    2. '([' → logprob: -1.913935661315918
    3. '((' → logprob: -6.538935661315918
    4. '(' → logprob: -6.663935661315918
    5. 'get' → logprob: -7.288935661315918
    6. '(x' → logprob: -9.913935661315918
    7. '({' → logprob: -9.913935661315918
    8. '(Result' → logprob: -10.288935661315918
    9. '[get' → logprob: -10.288935661315918
    10. '([-' → logprob: -10.913935661315918

Token 62: '_cost' (ID: 36820)
  Prédit: '_cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cost' → logprob: -5.200166469876422e-06
    2. '_' → logprob: -12.750004768371582
    3. ')_' → logprob: -13.625004768371582
    4. '```' → logprob: -15.125004768371582
    5. '_COST' → logprob: -15.250004768371582
    6. '_codes' → logprob: -16.6250057220459
    7. ')' → logprob: -16.7500057220459
    8. '_cos' → logprob: -17.0000057220459
    9. '_co' → logprob: -17.1250057220459
    10. '_c' → logprob: -17.2500057220459

Token 63: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.010356681421399117
    2. '_cost' → logprob: -4.760356903076172
    3. 'cost' → logprob: -7.260356903076172
    4. 'ost' → logprob: -7.635356903076172
    5. 'sts' → logprob: -8.385356903076172
    6. ' costs' → logprob: -8.760356903076172
    7. 'Costs' → logprob: -10.135356903076172
    8. 'st' → logprob: -10.385356903076172
    9. '(cost' → logprob: -10.510356903076172
    10. '-cost' → logprob: -10.885356903076172

Token 64: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.0009220616775564849
    2. '(' → logprob: -7.250922203063965
    3. '((' → logprob: -9.250922203063965
    4. ' (' → logprob: -9.625922203063965
    5. '(
' → logprob: -11.000922203063965
    6. '(z' → logprob: -11.250922203063965
    7. '(a' → logprob: -12.125922203063965
    8. ')' → logprob: -12.125922203063965
    9. ')(' → logprob: -13.250922203063965
    10. '(y' → logprob: -13.375922203063965

Token 65: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.02803819626569748
    2. ',y' → logprob: -3.653038263320923
    3. ' ,' → logprob: -6.778038024902344
    4. ',x' → logprob: -8.528038024902344
    5. '(' → logprob: -8.653038024902344
    6. ',z' → logprob: -9.028038024902344
    7. '(x' → logprob: -11.403038024902344
    8. ',
' → logprob: -11.528038024902344
    9. ' ' → logprob: -11.903038024902344
    10. '(),' → logprob: -12.153038024902344

Token 66: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.020565828308463097
    2. ' y' → logprob: -3.8955657482147217
    3. ' ' → logprob: -12.2705659866333
    4. '	y' → logprob: -12.6455659866333
    5. 'z' → logprob: -12.7705659866333
    6. 'x' → logprob: -12.7705659866333
    7. '  ' → logprob: -12.8955659866333
    8. '   ' → logprob: -13.1455659866333
    9. ',y' → logprob: -13.8955659866333
    10. ',' → logprob: -14.1455659866333

Token 67: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0010272121289744973
    2. ',z' → logprob: -7.5010271072387695
    3. ' ,' → logprob: -7.8760271072387695
    4. ',x' → logprob: -10.50102710723877
    5. '),' → logprob: -11.00102710723877
    6. ')' → logprob: -11.50102710723877
    7. ')))' → logprob: -11.75102710723877
    8. ',y' → logprob: -11.87602710723877
    9. '```' → logprob: -12.56352710723877
    10. ' ' → logprob: -12.62602710723877

Token 68: ' z' (ID: 579)
  Prédit: 'z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'z' → logprob: -0.0013373857364058495
    2. ' z' → logprob: -6.62633752822876
    3. ' ' → logprob: -12.501337051391602
    4. 'x' → logprob: -12.751337051391602
    5. '   ' → logprob: -13.501337051391602
    6. '  ' → logprob: -13.501337051391602
    7. '	z' → logprob: -14.126337051391602
    8. ')' → logprob: -14.876337051391602
    9. ',' → logprob: -15.376337051391602
    10. '<|end|>' → logprob: -16.0638370513916

Token 69: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.3282086253166199
    2. '()))' → logprob: -1.4532086849212646
    3. ')' → logprob: -4.0782084465026855
    4. '),' → logprob: -4.5782084465026855
    5. ')))' → logprob: -5.0782084465026855
    6. ')):' → logprob: -5.4532084465026855
    7. '()' → logprob: -5.7032084465026855
    8. '):' → logprob: -6.8282084465026855
    9. '))))' → logprob: -7.3282084465026855
    10. '())' → logprob: -7.3282084465026855

Token 70: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0012057077838107944
    2. ',' → logprob: -8.001205444335938
    3. ':' → logprob: -8.251205444335938
    4. ')' → logprob: -8.251205444335938
    5. '):
' → logprob: -8.376205444335938
    6. ' ):' → logprob: -10.376205444335938
    7. ')):' → logprob: -10.626205444335938
    8. '[' → logprob: -11.251205444335938
    9. '   ' → logprob: -11.376205444335938
    10. '[:' → logprob: -11.626205444335938

Token 71: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.7288249731063843
    2. '   ' → logprob: -1.2288249731063843
    3. ' ' → logprob: -2.603825092315674
    4. '<|end|>' → logprob: -2.728825092315674
    5. '    ' → logprob: -3.228825092315674
    6. ' if' → logprob: -3.728825092315674
    7. '    
' → logprob: -5.853825092315674
    8. ',' → logprob: -5.978825092315674
    9. ':
' → logprob: -5.978825092315674
    10. ' 
' → logprob: -6.228825092315674

Token 72: ' if' (ID: 538)
  Prédit: ' Result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Result' → logprob: -0.28025022149086
    2. 'Result' → logprob: -2.155250310897827
    3. ' if' → logprob: -2.280250310897827
    4. '   ' → logprob: -4.280250072479248
    5. 'if' (adapté à ' if') → logprob: -5.280250072479248
    6. '	Result' → logprob: -5.780250072479248
    7. ' setattr' → logprob: -6.530250072479248
    8. '    ' → logprob: -7.405250072479248
    9. ' result' → logprob: -7.530250072479248
    10. 'result' → logprob: -7.905250072479248

Token 73: ' idx' (ID: 14016)
  Prédit: ' val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' val' → logprob: -0.2839776575565338
    2. ' idx' → logprob: -1.4089776277542114
    3. 'val' → logprob: -6.283977508544922
    4. 'idx' → logprob: -7.408977508544922
    5. ' not' → logprob: -8.658977508544922
    6. '    ' → logprob: -9.658977508544922
    7. '(idx' → logprob: -10.783977508544922
    8. ' ' → logprob: -11.158977508544922
    9. '(val' → logprob: -11.283977508544922
    10. ' x' → logprob: -11.471477508544922

Token 74: ' <' (ID: 464)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.10022026300430298
    2. '==' → logprob: -2.475220203399658
    3. ' ' → logprob: -5.475220203399658
    4. ' >' → logprob: -6.225220203399658
    5. '>' → logprob: -7.225220203399658
    6. '<|end|>' → logprob: -7.350220203399658
    7. ' <' → logprob: -7.475220203399658
    8. '0' → logprob: -7.475220203399658
    9. ':' → logprob: -7.975220203399658
    10. ' !=' → logprob: -8.100220680236816

Token 75: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.20102381706237793
    2. ' ' → logprob: -1.951023817062378
    3. '3' → logprob: -3.576023817062378
    4. '1' → logprob: -4.451024055480957
    5. 'len' → logprob: -8.826024055480957
    6. ' len' → logprob: -9.451024055480957
    7. '<|end|>' → logprob: -10.888524055480957
    8. '  ' → logprob: -11.201024055480957
    9. 'x' → logprob: -11.826024055480957
    10. '0' → logprob: -11.951024055480957

Token 76: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.04996475949883461
    2. '3' → logprob: -3.424964666366577
    3. '1' → logprob: -4.424964904785156
    4. ' ' → logprob: -5.674964904785156
    5. 'len' → logprob: -7.424964904785156
    6. '   ' → logprob: -10.049964904785156
    7. '  ' → logprob: -10.424964904785156
    8. 'x' → logprob: -11.049964904785156
    9. 'val' → logprob: -11.049964904785156
    10. ' len' → logprob: -11.612464904785156

Token 77: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.050496120005846024
    2. ':
' → logprob: -3.0504961013793945
    3. ' :' → logprob: -7.1754961013793945
    4. ' and' → logprob: -7.3004961013793945
    5. ' :
' → logprob: -8.550496101379395
    6. '   ' → logprob: -9.300496101379395
    7. ':

' → logprob: -9.550496101379395
    8. 'and' → logprob: -10.675496101379395
    9. ':
' → logprob: -11.300496101379395
    10. '       ' → logprob: -11.425496101379395

Token 78: '       ' (ID: 309)
  Prédit: ' Result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Result' → logprob: -0.3282315731048584
    2. '   ' → logprob: -1.3282315731048584
    3. 'Result' → logprob: -5.0782318115234375
    4. '       ' → logprob: -5.8282318115234375
    5. '	Result' → logprob: -5.8282318115234375
    6. '    ' → logprob: -7.3282318115234375
    7. ' result' → logprob: -7.5782318115234375
    8. '    
' → logprob: -7.7032318115234375
    9. ':' → logprob: -8.453231811523438
    10. ' ' → logprob: -8.578231811523438

Token 79: ' Result' (ID: 9112)
  Prédit: 'Result'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Result' (adapté à ' Result') → logprob: -0.22626957297325134
    2. ' Result' → logprob: -1.6012696027755737
    3. '	Result' → logprob: -7.601269721984863
    4. '   ' → logprob: -8.101269721984863
    5. ' ' → logprob: -11.476269721984863
    6. '    ' → logprob: -11.851269721984863
    7. '_result' → logprob: -11.976269721984863
    8. ' setattr' → logprob: -12.101269721984863
    9. '
' → logprob: -12.476269721984863
    10. '       ' → logprob: -12.601269721984863

Token 80: '.value' (ID: 4683)
  Prédit: '.value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.value' → logprob: -0.00038693982060067356
    2. '.' → logprob: -7.875386714935303
    3. 'value' → logprob: -12.625387191772461
    4. ' .' → logprob: -14.125387191772461
    5. '`.' → logprob: -14.875387191772461
    6. ' ' → logprob: -15.375387191772461
    7. ').' → logprob: -15.500387191772461
    8. '.val' → logprob: -15.625387191772461
    9. '```' → logprob: -15.625387191772461
    10. '}.' → logprob: -15.875387191772461

Token 81: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.2821231484413147
    2. ' +=' → logprob: -1.40712308883667
    3. '=' → logprob: -7.28212308883667
    4. ' =' → logprob: -8.407123565673828
    5. '+' → logprob: -10.907123565673828
    6. ' +' → logprob: -11.782123565673828
    7. ' -=' → logprob: -11.782123565673828
    8. '+=(' → logprob: -11.782123565673828
    9. '-=' → logprob: -11.907123565673828
    10. '+='' → logprob: -13.032123565673828

Token 82: ' val' (ID: 1459)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.11287011951208115
    2. ' val' → logprob: -2.237870216369629
    3. 'int' → logprob: -11.487870216369629
    4. '	val' → logprob: -11.487870216369629
    5. ' ' → logprob: -12.112870216369629
    6. '(val' → logprob: -12.237870216369629
    7. '[val' → logprob: -12.862870216369629
    8. 'v' → logprob: -12.987870216369629
    9. '_val' → logprob: -13.737870216369629
    10. ' ' → logprob: -13.862870216369629

Token 83: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 84: 'else' (ID: 2807)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.15148186683654785
    2. '<|end|>' → logprob: -2.276481866836548
    3. '
' → logprob: -3.651481866836548
    4. ' print' → logprob: -6.026481628417969
    5. '+' → logprob: -6.276481628417969
    6. '#' → logprob: -6.401481628417969
    7. ')' → logprob: -6.776481628417969
    8. ' ' → logprob: -7.276481628417969
    9. '```' → logprob: -7.276481628417969
    10. '<|end|>' → logprob: -7.526481628417969

Token 85: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.014289615675807
    2. ':
' → logprob: -4.264289379119873
    3. ' :' → logprob: -9.389289855957031
    4. '   ' → logprob: -11.389289855957031
    5. ':

' → logprob: -11.514289855957031
    6. ' :
' → logprob: -12.139289855957031
    7. '
' → logprob: -13.014289855957031
    8. ',' → logprob: -13.014289855957031
    9. ' ' → logprob: -13.264289855957031
    10. ':
' → logprob: -13.514289855957031

Token 86: '   ' (ID: 271)
  Prédit: ' Result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Result' → logprob: -0.4133867919445038
    2. '   ' → logprob: -1.1633868217468262
    3. ' print' → logprob: -4.163386821746826
    4. 'Result' → logprob: -6.163386821746826
    5. ' pass' → logprob: -6.288386821746826
    6. ' None' → logprob: -6.538386821746826
    7. ' break' → logprob: -6.788386821746826
    8. '	Result' → logprob: -7.163386821746826
    9. '    ' → logprob: -7.288386821746826
    10. ' True' → logprob: -7.413386821746826

Token 87: ' print' (ID: 2123)
  Prédit: ' Result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Result' → logprob: -1.0939958095550537
    2. 'print' (adapté à ' print') → logprob: -1.2189958095550537
    3. ' print' → logprob: -1.4689958095550537
    4. 'Result' → logprob: -2.4689958095550537
    5. ' pass' → logprob: -3.4689958095550537
    6. '   ' → logprob: -4.468996047973633
    7. 'pass' → logprob: -5.593996047973633
    8. ' x' → logprob: -5.968996047973633
    9. 'x' → logprob: -6.093996047973633
    10. '    ' → logprob: -6.843996047973633

Token 88: '(Result' (ID: 72090)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03353619575500488
    2. '(Result' → logprob: -3.533536195755005
    3. '()' → logprob: -5.658535957336426
    4. '('' → logprob: -9.033535957336426
    5. '("' → logprob: -9.533535957336426
    6. '(sum' → logprob: -10.283535957336426
    7. '(True' → logprob: -11.283535957336426
    8. ' (' → logprob: -11.783535957336426
    9. '((' → logprob: -11.908535957336426
    10. '(False' → logprob: -11.908535957336426

Token 89: '.value' (ID: 4683)
  Prédit: '.value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.value' → logprob: -0.00091217877343297
    2. ').' → logprob: -7.500912189483643
    3. '.' → logprob: -8.000911712646484
    4. ')' → logprob: -11.375911712646484
    5. ' .' → logprob: -12.750911712646484
    6. 'value' → logprob: -12.875911712646484
    7. '`.' → logprob: -13.750911712646484
    8. '```' → logprob: -14.125911712646484
    9. '.val' → logprob: -14.250911712646484
    10. '}.' → logprob: -14.750911712646484

Token 90: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.3306015716807451e-05
    2. ' )' → logprob: -11.50001335144043
    3. '))' → logprob: -13.25001335144043
    4. '+' → logprob: -14.37501335144043
    5. ')
' → logprob: -14.87501335144043
    6. ')))' → logprob: -16.50001335144043
    7. ' ' → logprob: -16.75001335144043
    8. '#' → logprob: -17.12501335144043
    9. '   ' → logprob: -17.37501335144043
    10. '}' → logprob: -17.50001335144043


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 88
Tokens correctement prédits (1ère position, stricte): 26
Tokens correctement prédits (1ère position, avec adaptation): 27
Tokens correctement prédits (top 10): 69
Précision stricte (1ère position): 29.55%
Précision adaptée (1ère position): 30.68%
Précision (top 10): 78.41%
================================================================================
