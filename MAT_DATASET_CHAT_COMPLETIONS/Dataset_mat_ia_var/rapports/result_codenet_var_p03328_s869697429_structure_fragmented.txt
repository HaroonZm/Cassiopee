================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:16:40
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def read_input():
    values = input().split()
    return extract_integers(values)

def extract_integers(values):
    return map_input_to_int(values)

def map_input_to_int(values):
    a = int(values[0])
    b = int(values[1])
    return (a, b)

def calculate_difference(a, b):
    return b - a

def decrement_by_one(value):
    return value - 1

def compute_sum_of_first_n(n):
    return ((n + 1) * n) // 2

def compute_result(A, a):
    return A - a

def print_result(ans):
    print(ans)

def main():
    a, b = read_input()
    x = calculate_difference(a, b)
    n = decrement_by_one(x)
    A = compute_sum_of_first_n(n)
    ans = compute_result(A, a)
    print_result(ans)

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' read' (ID: 1729)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003679767018184066
    2. '_' → logprob: -6.5036797523498535
    3. '():' → logprob: -6.5036797523498535
    4. '(:' → logprob: -7.7536797523498535
    5. '(_:' → logprob: -9.128680229187012
    6. '```' → logprob: -10.128680229187012
    7. ' (' → logprob: -10.753680229187012
    8. '(_' → logprob: -10.878680229187012
    9. ':' → logprob: -10.878680229187012
    10. '_:' → logprob: -12.253680229187012

Token 4: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.988785445690155
    2. '\' → logprob: -1.2387855052947998
    3. '\n' → logprob: -1.3637855052947998
    4. '   ' → logprob: -3.1137855052948
    5. '    
' → logprob: -4.863785266876221
    6. '
' → logprob: -5.113785266876221
    7. ' 
' → logprob: -5.613785266876221
    8. '``' → logprob: -5.863785266876221
    9. ':' → logprob: -6.113785266876221
    10. ''\' → logprob: -6.613785266876221

Token 5: ' values' (ID: 4824)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.44198349118232727
    2. '```' → logprob: -2.066983461380005
    3. 'return' → logprob: -2.691983461380005
    4. 'input' → logprob: -3.441983461380005
    5. '    ' → logprob: -3.441983461380005
    6. 'r' → logprob: -3.566983461380005
    7. '\' → logprob: -4.191983699798584
    8. 'x' → logprob: -4.316983699798584
    9. '       ' → logprob: -4.691983699798584
    10. '`' → logprob: -5.191983699798584

Token 6: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.88988196849823
    2. '.' → logprob: -1.26488196849823
    3. '=' → logprob: -1.76488196849823
    4. ' =' → logprob: -3.2648820877075195
    5. '_' → logprob: -3.6398820877075195
    6. '[:]' → logprob: -3.6398820877075195
    7. ')' → logprob: -4.3898820877075195
    8. '(' → logprob: -4.3898820877075195
    9. 's' → logprob: -5.5148820877075195
    10. '.append' → logprob: -5.6398820877075195

Token 7: ' input' (ID: 3422)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.023058881983160973
    2. '[]' → logprob: -4.023058891296387
    3. ' input' → logprob: -5.773058891296387
    4. 'input' → logprob: -6.523058891296387
    5. ' ' → logprob: -8.398058891296387
    6. ' [' → logprob: -10.273058891296387
    7. ' list' → logprob: -10.648058891296387
    8. '[' → logprob: -11.648058891296387
    9. '[input' → logprob: -12.148058891296387
    10. 'list' → logprob: -12.648058891296387

Token 8: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0007013569120317698
    2. ''' → logprob: -8.375700950622559
    3. '('' → logprob: -8.875700950622559
    4. '("("' → logprob: -9.250700950622559
    5. '```' → logprob: -10.000700950622559
    6. '`' → logprob: -10.500700950622559
    7. '()' → logprob: -10.500700950622559
    8. '"' → logprob: -10.750700950622559
    9. ' (' → logprob: -11.000700950622559
    10. '(
' → logprob: -11.000700950622559

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.01816890574991703
    2. 'strip' → logprob: -4.018168926239014
    3. 'rstrip' → logprob: -10.893168449401855
    4. 'spl' → logprob: -16.518169403076172
    5. ' split' → logprob: -16.518169403076172
    6. 'replace' → logprob: -16.643169403076172
    7. 's' → logprob: -17.518169403076172
    8. 'read' → logprob: -17.643169403076172
    9. '(split' → logprob: -18.018169403076172
    10. '```' → logprob: -18.143169403076172

Token 10: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00556018203496933
    2. '('' → logprob: -5.755560398101807
    3. '()' → logprob: -6.880560398101807
    4. '("("' → logprob: -7.255560398101807
    5. '`' → logprob: -8.380559921264648
    6. '((' → logprob: -8.880559921264648
    7. '(`' → logprob: -9.380559921264648
    8. '```' → logprob: -9.880559921264648
    9. '(()' → logprob: -10.630559921264648
    10. '"' → logprob: -11.005559921264648

Token 11: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12275344133377075
    2. '```' → logprob: -2.997753381729126
    3. '.' → logprob: -4.122753620147705
    4. 'return' → logprob: -4.247753620147705
    5. '`' → logprob: -4.497753620147705
    6. '\n' → logprob: -4.997753620147705
    7. ' ' → logprob: -5.622753620147705
    8. '    
' → logprob: -5.747753620147705
    9. '[' → logprob: -5.872753620147705
    10. '``' → logprob: -6.497753620147705

Token 12: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.14058323204517365
    2. '   ' → logprob: -2.7655832767486572
    3. 'r' → logprob: -3.3905832767486572
    4. 'for' → logprob: -3.6405832767486572
    5. 'result' → logprob: -5.640583038330078
    6. 'v' → logprob: -6.515583038330078
    7. ' return' → logprob: -7.015583038330078
    8. ' ' → logprob: -7.765583038330078
    9. '```' → logprob: -7.890583038330078
    10. 'if' → logprob: -7.890583038330078

Token 13: ' extract' (ID: 13424)
  Prédit: ' values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' values' → logprob: -0.3490789532661438
    2. 'values' → logprob: -1.224078893661499
    3. ' list' → logprob: -8.224079132080078
    4. '[' → logprob: -9.474079132080078
    5. 'list' → logprob: -9.474079132080078
    6. ' [' → logprob: -9.724079132080078
    7. '	values' → logprob: -10.474079132080078
    8. '(values' → logprob: -10.599079132080078
    9. ' ' → logprob: -10.974079132080078
    10. ' []' → logprob: -11.224079132080078

Token 14: '_in' (ID: 2267)
  Prédit: '_values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_values' → logprob: -0.2091943472623825
    2. '_' → logprob: -1.709194302558899
    3. '_value' → logprob: -5.209194183349609
    4. 'ed' → logprob: -6.959194183349609
    5. '_vals' → logprob: -7.584194183349609
    6. '_val' → logprob: -7.834194183349609
    7. '_input' → logprob: -9.45919418334961
    8. '(_' → logprob: -10.08419418334961
    9. '_data' → logprob: -10.20919418334961
    10. '_extract' → logprob: -10.58419418334961

Token 15: 'te' (ID: 411)
  Prédit: 'put'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'put' → logprob: -0.24803197383880615
    2. 't' → logprob: -2.1230320930480957
    3. 'puts' → logprob: -2.4980320930480957
    4. 'te' → logprob: -4.123032093048096
    5. 'tent' → logprob: -6.998032093048096
    6. '_' → logprob: -8.998031616210938
    7. '_values' → logprob: -9.123031616210938
    8. 'teger' → logprob: -9.123031616210938
    9. '_put' → logprob: -9.123031616210938
    10. 'p' → logprob: -10.248031616210938

Token 16: 'gers' (ID: 13027)
  Prédit: 'gers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'gers' → logprob: -0.0018495087279006839
    2. 'rs' → logprob: -7.12684965133667
    3. 'g' → logprob: -8.126849174499512
    4. 'ger' → logprob: -8.626849174499512
    5. 'gr' → logprob: -8.751849174499512
    6. '```' → logprob: -8.876849174499512
    7. 'ers' → logprob: -9.001849174499512
    8. '[' → logprob: -10.626849174499512
    9. '_' → logprob: -10.751849174499512
    10. '   ' → logprob: -11.001849174499512

Token 17: '(values' (ID: 40883)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.050050366669893265
    2. '(values' → logprob: -3.0500502586364746
    3. '_values' → logprob: -7.800050258636475
    4. '("("' → logprob: -7.925050258636475
    5. '()' → logprob: -8.675050735473633
    6. '('' → logprob: -8.800050735473633
    7. '_' → logprob: -8.925050735473633
    8. '(_)' → logprob: -10.300050735473633
    9. ' (' → logprob: -10.675050735473633
    10. '(`' → logprob: -10.925050735473633

Token 18: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -2.451116051815916e-05
    2. '`)' → logprob: -11.125024795532227
    3. '(' → logprob: -12.625024795532227
    4. '()' → logprob: -13.500024795532227
    5. '')' → logprob: -13.500024795532227
    6. '())' → logprob: -14.000024795532227
    7. ' )' → logprob: -14.125024795532227
    8. '))' → logprob: -14.250024795532227
    9. ')`' → logprob: -14.375024795532227
    10. '")' → logprob: -15.375024795532227

Token 19: 'def' (ID: 1314)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.7606768608093262
    2. '(' → logprob: -1.1356768608093262
    3. 'def' → logprob: -2.010676860809326
    4. '_' → logprob: -3.760676860809326
    5. '```' → logprob: -4.260676860809326
    6. '<|end|>' → logprob: -4.760676860809326
    7. '\' → logprob: -4.885676860809326
    8. '.' → logprob: -5.385676860809326
    9. ')' → logprob: -5.510676860809326
    10. '[' → logprob: -5.635676860809326

Token 20: ' extract' (ID: 13424)
  Prédit: ' extract'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' extract' → logprob: -0.012977263890206814
    2. 'extract' → logprob: -5.512977123260498
    3. ' process' → logprob: -5.637977123260498
    4. ' calculate' → logprob: -5.887977123260498
    5. ' read' → logprob: -6.887977123260498
    6. '_extract' → logprob: -7.637977123260498
    7. '_' → logprob: -7.887977123260498
    8. ' compute' → logprob: -8.012977600097656
    9. ' write' → logprob: -9.637977600097656
    10. ' space' → logprob: -10.262977600097656

Token 21: '_in' (ID: 2267)
  Prédit: '_in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_in' → logprob: -0.316166490316391
    2. '_' → logprob: -1.3161665201187134
    3. '_integer' → logprob: -7.066166400909424
    4. '_int' → logprob: -7.191166400909424
    5. '_from' → logprob: -8.566166877746582
    6. '_values' → logprob: -8.566166877746582
    7. ' _' → logprob: -9.066166877746582
    8. '_numbers' → logprob: -9.191166877746582
    9. '_a' → logprob: -9.816166877746582
    10. '_to' → logprob: -10.066166877746582

Token 22: 'te' (ID: 411)
  Prédit: 'te'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'te' → logprob: -0.00034416402922943234
    2. '_te' → logprob: -8.625344276428223
    3. '_' → logprob: -9.750344276428223
    4. 'eg' → logprob: -10.125344276428223
    5. 't' → logprob: -10.625344276428223
    6. '_in' → logprob: -11.125344276428223
    7. 'teg' → logprob: -11.125344276428223
    8. 'teger' → logprob: -11.875344276428223
    9. 'inte' → logprob: -13.000344276428223
    10. '```' → logprob: -13.750344276428223

Token 23: 'gers' (ID: 13027)
  Prédit: 'gers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'gers' → logprob: -0.0005656610010191798
    2. 'gr' → logprob: -7.500565528869629
    3. 'ger' → logprob: -12.000565528869629
    4. 'g' → logprob: -12.625565528869629
    5. '_gr' → logprob: -13.875565528869629
    6. '_' → logprob: -14.000565528869629
    7. 'ers' → logprob: -14.750565528869629
    8. 'gars' → logprob: -15.375565528869629
    9. 'gres' → logprob: -15.500565528869629
    10. '```' → logprob: -15.500565528869629

Token 24: '(values' (ID: 40883)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004354633390903473
    2. '(values' → logprob: -5.504354476928711
    3. ' (' → logprob: -9.379354476928711
    4. '("("' → logprob: -9.629354476928711
    5. '(strings' → logprob: -10.629354476928711
    6. '(_' → logprob: -11.379354476928711
    7. '(items' → logprob: -11.879354476928711
    8. '(value' → logprob: -12.004354476928711
    9. '_values' → logprob: -12.129354476928711
    10. '('' → logprob: -12.379354476928711

Token 25: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -5.32392441527918e-05
    2. ')' → logprob: -11.250053405761719
    3. '   ' → logprob: -11.375053405761719
    4. '):
' → logprob: -11.375053405761719
    5. ' ):' → logprob: -12.125053405761719
    6. ':' → logprob: -12.125053405761719
    7. '[]):' → logprob: -12.750053405761719
    8. '[' → logprob: -14.125053405761719
    9. ']:' → logprob: -14.500053405761719
    10. '}:' → logprob: -15.000053405761719

Token 26: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009236636571586132
    2. '[' → logprob: -5.259236812591553
    3. '(' → logprob: -7.134236812591553
    4. '[]' → logprob: -7.509236812591553
    5. ' integers' → logprob: -7.509236812591553
    6. 'int' → logprob: -7.759236812591553
    7. '[int' → logprob: -8.384236335754395
    8. 'def' → logprob: -8.384236335754395
    9. ':' → logprob: -8.509236335754395
    10. '[
' → logprob: -9.134236335754395

Token 27: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.1135531663894653
    2. ' integers' → logprob: -1.3635531663894653
    3. 'result' → logprob: -1.9885531663894653
    4. 'ints' → logprob: -2.113553047180176
    5. 'inte' → logprob: -2.488553047180176
    6. ' result' → logprob: -2.988553047180176
    7. 'int' → logprob: -4.363553047180176
    8. ' ints' → logprob: -4.613553047180176
    9. ' int' → logprob: -7.613553047180176
    10. 'return' (adapté à ' return') → logprob: -7.613553047180176

Token 28: ' map' (ID: 4014)
  Prédit: ' ['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.06301901489496231
    2. '[int' → logprob: -3.188019037246704
    3. '[' → logprob: -4.063018798828125
    4. '[list' → logprob: -6.063018798828125
    5. ' list' → logprob: -8.688018798828125
    6. '[i' → logprob: -10.063018798828125
    7. '[List' → logprob: -11.188018798828125
    8. 'list' → logprob: -11.313018798828125
    9. '[v' → logprob: -11.313018798828125
    10. '[value' → logprob: -11.813018798828125

Token 29: '_input' (ID: 12507)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.04868115857243538
    2. '(' → logprob: -3.0486812591552734
    3. '(lambda' → logprob: -9.298681259155273
    4. 'int' → logprob: -13.798681259155273
    5. '<int' → logprob: -14.673681259155273
    6. '(
' → logprob: -14.798681259155273
    7. '[int' → logprob: -15.548681259155273
    8. '(

' → logprob: -16.673681259155273
    9. '=int' → logprob: -16.798681259155273
    10. ' (' → logprob: -16.798681259155273

Token 30: '_to' (ID: 5089)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1243826225399971
    2. '(lambda' → logprob: -2.374382734298706
    3. '(int' → logprob: -3.749382734298706
    4. '(
' → logprob: -9.124382972717285
    5. '(values' → logprob: -9.374382972717285
    6. '(map' → logprob: -9.499382972717285
    7. '_values' → logprob: -10.999382972717285
    8. '(str' → logprob: -11.249382972717285
    9. '(

' → logprob: -11.374382972717285
    10. '(list' → logprob: -11.749382972717285

Token 31: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.20064736902713776
    2. '_in' → logprob: -2.4506473541259766
    3. 'int' → logprob: -2.5756473541259766
    4. ' int' → logprob: -4.950647354125977
    5. '(int' → logprob: -5.700647354125977
    6. 'ints' → logprob: -6.200647354125977
    7. '_' → logprob: -6.325647354125977
    8. '<int' → logprob: -6.950647354125977
    9. '_list' → logprob: -6.950647354125977
    10. 's' → logprob: -7.075647354125977

Token 32: '(values' (ID: 40883)
  Prédit: '(values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(values' → logprob: -0.14844124019145966
    2. '(' → logprob: -2.0234413146972656
    3. '(s' → logprob: -6.148441314697266
    4. 's' → logprob: -6.148441314697266
    5. '(lambda' → logprob: -7.023441314697266
    6. '(map' → logprob: -9.523441314697266
    7. '(vals' → logprob: -9.523441314697266
    8. '(list' → logprob: -9.523441314697266
    9. '("("' → logprob: -9.648441314697266
    10. '_values' → logprob: -9.773441314697266

Token 33: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00024203950306400657
    2. '))' → logprob: -8.500242233276367
    3. '(' → logprob: -11.500242233276367
    4. ' )' → logprob: -11.625242233276367
    5. ',' → logprob: -12.250242233276367
    6. ')`' → logprob: -12.625242233276367
    7. ',)' → logprob: -12.625242233276367
    8. '   ' → logprob: -13.125242233276367
    9. ')))' → logprob: -13.250242233276367
    10. '`)' → logprob: -13.625242233276367

Token 34: 'def' (ID: 1314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.08856325596570969
    2. '_' → logprob: -2.5885632038116455
    3. 'def' → logprob: -6.338563442230225
    4. '(
' → logprob: -6.463563442230225
    5. '<|end|>' → logprob: -6.713563442230225
    6. '[' → logprob: -6.838563442230225
    7. '_map' → logprob: -6.838563442230225
    8. '\' → logprob: -6.963563442230225
    9. '```' → logprob: -7.463563442230225
    10. '.' → logprob: -9.338562965393066

Token 35: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.0021778582595288754
    2. 'map' → logprob: -6.377177715301514
    3. ' extract' → logprob: -8.127178192138672
    4. ' read' → logprob: -9.127178192138672
    5. '_map' → logprob: -10.377178192138672
    6. ' def' → logprob: -11.377178192138672
    7. '_' → logprob: -11.627178192138672
    8. 'extract' → logprob: -11.752178192138672
    9. ' convert' → logprob: -12.002178192138672
    10. ' _' → logprob: -13.877178192138672

Token 36: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -7.111979357432574e-05
    2. '_' → logprob: -10.50007152557373
    3. '_inputs' → logprob: -10.50007152557373
    4. '_to' → logprob: -12.12507152557373
    5. '_in' → logprob: -12.62507152557373
    6. '_output' → logprob: -12.87507152557373
    7. '__' → logprob: -13.62507152557373
    8. ' _' → logprob: -13.75007152557373
    9. '_p' → logprob: -15.00007152557373
    10. '_i' → logprob: -15.12507152557373

Token 37: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: -3.5120287066092715e-05
    2. '_' → logprob: -10.625035285949707
    3. '_t' → logprob: -12.125035285949707
    4. '##_' → logprob: -12.750035285949707
    5. '__' → logprob: -14.250035285949707
    6. ' _' → logprob: -14.500035285949707
    7. '```' → logprob: -15.250035285949707
    8. ')_' → logprob: -15.250035285949707
    9. '}_' → logprob: -15.500035285949707
    10. 'to' → logprob: -15.875035285949707

Token 38: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -7.576873758807778e-05
    2. 'int' → logprob: -9.500075340270996
    3. '_in' → logprob: -14.500075340270996
    4. 'nt' → logprob: -16.125076293945312
    5. '_integer' → logprob: -16.500076293945312
    6. '_list' → logprob: -17.625076293945312
    7. '<int' → logprob: -18.000076293945312
    8. '_input' → logprob: -18.125076293945312
    9. '_' → logprob: -18.375076293945312
    10. 'Int' → logprob: -18.625076293945312

Token 39: '(values' (ID: 40883)
  Prédit: '(values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(values' → logprob: -0.16190028190612793
    2. '(' → logprob: -1.911900281906128
    3. ' (' → logprob: -7.161900520324707
    4. '(vals' → logprob: -8.286900520324707
    5. '(items' → logprob: -8.911900520324707
    6. '(s' → logprob: -9.161900520324707
    7. '(strings' → logprob: -9.286900520324707
    8. '(value' → logprob: -9.911900520324707
    9. '(elements' → logprob: -10.536900520324707
    10. 's' → logprob: -10.786900520324707

Token 40: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0007055217283777893
    2. ')' → logprob: -7.750705718994141
    3. ' ):' → logprob: -8.37570571899414
    4. '):
' → logprob: -10.50070571899414
    5. '[]):' → logprob: -11.75070571899414
    6. '   ' → logprob: -12.50070571899414
    7. '_' → logprob: -13.87570571899414
    8. '[' → logprob: -14.12570571899414
    9. ']:' → logprob: -14.50070571899414
    10. ''):' → logprob: -15.00070571899414

Token 41: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6889483332633972
    2. '[' → logprob: -1.313948392868042
    3. ' [' → logprob: -1.938948392868042
    4. ' return' → logprob: -3.438948392868042
    5. ' []' → logprob: -3.688948392868042
    6. '[]' → logprob: -3.938948392868042
    7. 'return' → logprob: -5.563948154449463
    8. '[int' → logprob: -5.938948154449463
    9. ' list' → logprob: -7.313948154449463
    10. '[:]' → logprob: -8.313948631286621

Token 42: ' a' (ID: 261)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.7092472314834595
    2. ' [' → logprob: -1.0842472314834595
    3. '[int' → logprob: -2.95924711227417
    4. ' list' → logprob: -3.08424711227417
    5. 'list' → logprob: -3.45924711227417
    6. '[list' → logprob: -3.45924711227417
    7. 'return' → logprob: -5.70924711227417
    8. '[]' → logprob: -5.95924711227417
    9. ' return' → logprob: -6.70924711227417
    10. '   ' → logprob: -7.20924711227417

Token 43: ' =' (ID: 314)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.7348074316978455
    2. ' =' → logprob: -1.6098074913024902
    3. 'r' → logprob: -2.2348074913024902
    4. 'pp' → logprob: -2.3598074913024902
    5. '[' → logprob: -3.7348074913024902
    6. '=' → logprob: -3.8598074913024902
    7. '_map' → logprob: -4.10980749130249
    8. 's' → logprob: -4.23480749130249
    9. '.' → logprob: -4.60980749130249
    10. '   ' → logprob: -4.73480749130249

Token 44: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.17835266888141632
    2. 'int' → logprob: -2.0533525943756104
    3. ' values' → logprob: -4.3033528327941895
    4. ' [' → logprob: -4.9283528327941895
    5. ' list' → logprob: -4.9283528327941895
    6. ' []' → logprob: -5.9283528327941895
    7. '[int' → logprob: -6.0533528327941895
    8. ' ' → logprob: -7.1783528327941895
    9. 'values' → logprob: -7.4283528327941895
    10. '[]' → logprob: -8.678352355957031

Token 45: '(values' (ID: 40883)
  Prédit: '(values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(values' → logprob: -0.014186889864504337
    2. '(' → logprob: -4.264186859130859
    3. 'values' → logprob: -11.63918685913086
    4. ' (' → logprob: -12.01418685913086
    5. '('' → logprob: -12.38918685913086
    6. ' values' → logprob: -13.63918685913086
    7. '(vals' → logprob: -13.88918685913086
    8. '(value' → logprob: -13.88918685913086
    9. '(a' → logprob: -14.88918685913086
    10. '	values' → logprob: -15.76418685913086

Token 46: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -2.935296834039036e-06
    2. ' [' → logprob: -12.87500286102295
    3. '0' → logprob: -16.000003814697266
    4. ' ' → logprob: -16.500003814697266
    5. '\[' → logprob: -17.750003814697266
    6. '   ' → logprob: -18.500003814697266
    7. ')' → logprob: -18.500003814697266
    8. '[
' → logprob: -18.750003814697266
    9. '  ' → logprob: -19.250003814697266
    10. '```' → logprob: -19.250003814697266

Token 47: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -8.494741632603109e-05
    2. ' ' → logprob: -9.37508487701416
    3. '[' → logprob: -17.750085830688477
    4. '1' → logprob: -17.875085830688477
    5. '   ' → logprob: -18.500085830688477
    6. '۰' → logprob: -18.625085830688477
    7. ')' → logprob: -19.125085830688477
    8. ']' → logprob: -19.750085830688477
    9. '  ' → logprob: -19.875085830688477
    10. '٠' → logprob: -20.500085830688477

Token 48: '])
' (ID: 5169)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -3.786196975852363e-05
    2. ' ])' → logprob: -10.750038146972656
    3. '])
' → logprob: -12.000038146972656
    4. ']' → logprob: -12.250038146972656
    5. ')' → logprob: -12.250038146972656
    6. ''])' → logprob: -15.125038146972656
    7. ')]' → logprob: -16.625038146972656
    8. ')])' → logprob: -17.000038146972656
    9. '"])' → logprob: -17.125038146972656
    10. ']])' → logprob: -17.250038146972656

Token 49: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7648833990097046
    2. '<|end|>' → logprob: -0.7648833990097046
    3. ')' → logprob: -3.514883518218994
    4. ' ' → logprob: -4.639883518218994
    5. '+' → logprob: -4.639883518218994
    6. '*' → logprob: -5.514883518218994
    7. ' 
' → logprob: -5.639883518218994
    8. ',' → logprob: -5.889883518218994
    9. '  
' → logprob: -6.264883518218994
    10. '+
' → logprob: -6.514883518218994

Token 50: ' b' (ID: 287)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4871126413345337
    2. '<|end|>' → logprob: -1.4871126413345337
    3. 'b' (adapté à ' b') → logprob: -2.737112522125244
    4. ',' → logprob: -3.362112522125244
    5. ' b' → logprob: -4.487112522125244
    6. ' 
' → logprob: -4.487112522125244
    7. '  
' → logprob: -4.487112522125244
    8. ' ,' → logprob: -4.737112522125244
    9. '  ' → logprob: -5.862112522125244
    10. '   ' → logprob: -5.987112522125244

Token 51: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.013741597533226013
    2. '=' → logprob: -4.388741493225098
    3. ' ' → logprob: -6.763741493225098
    4. ')' → logprob: -9.638741493225098
    5. '[' → logprob: -13.388741493225098
    6. '_' → logprob: -13.388741493225098
    7. '  ' → logprob: -13.513741493225098
    8. '=int' → logprob: -13.513741493225098
    9. ',' → logprob: -13.638741493225098
    10. '.' → logprob: -13.888741493225098

Token 52: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.2519350051879883
    2. 'int' → logprob: -1.5019350051879883
    3. ' ' → logprob: -13.126935005187988
    4. '=int' → logprob: -13.876935005187988
    5. '(int' → logprob: -14.001935005187988
    6. ' ' → logprob: -14.251935005187988
    7. '<int' → logprob: -14.626935005187988
    8. '[int' → logprob: -14.876935005187988
    9. '	int' → logprob: -15.876935005187988
    10. '   ' → logprob: -16.251934051513672

Token 53: '(values' (ID: 40883)
  Prédit: '(values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(values' → logprob: -9.603335638530552e-05
    2. '(' → logprob: -9.500096321105957
    3. ' (' → logprob: -10.875096321105957
    4. ' values' → logprob: -13.875096321105957
    5. 'values' → logprob: -13.875096321105957
    6. '(vals' → logprob: -15.375096321105957
    7. ')' → logprob: -16.62509536743164
    8. '	values' → logprob: -17.12509536743164
    9. ')(' → logprob: -17.62509536743164
    10. '(users' → logprob: -18.37509536743164

Token 54: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -2.4272752852994017e-05
    2. ' [' → logprob: -11.50002384185791
    3. '])' → logprob: -12.00002384185791
    4. ']' → logprob: -12.75002384185791
    5. '][' → logprob: -13.00002384185791
    6. '1' → logprob: -13.25002384185791
    7. ' ' → logprob: -14.75002384185791
    8. ')' → logprob: -15.25002384185791
    9. '   ' → logprob: -16.250024795532227
    10. '```' → logprob: -17.000024795532227

Token 55: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -9.729906196298543e-06
    2. '0' → logprob: -12.000009536743164
    3. ' ' → logprob: -12.750009536743164
    4. '])' → logprob: -14.250009536743164
    5. '   ' → logprob: -16.875009536743164
    6. ']' → logprob: -18.375009536743164
    7. ')' → logprob: -18.625009536743164
    8. '2' → logprob: -19.125009536743164
    9. '-' → logprob: -19.250009536743164
    10. '  ' → logprob: -19.375009536743164

Token 56: '])
' (ID: 5169)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '])' → logprob: -0.05527760460972786
    2. ')' → logprob: -2.9302775859832764
    3. ']' → logprob: -7.9302778244018555
    4. ''])' → logprob: -11.680277824401855
    5. ')])' → logprob: -12.055277824401855
    6. ' ])' → logprob: -12.055277824401855
    7. '))' → logprob: -12.930277824401855
    8. '）' → logprob: -12.930277824401855
    9. ')]' → logprob: -12.930277824401855
    10. '})' → logprob: -13.555277824401855

Token 57: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1035970076918602
    2. '
' → logprob: -3.2285969257354736
    3. '<|end|>' → logprob: -3.9785969257354736
    4. 'return' → logprob: -4.228597164154053
    5. ')' → logprob: -4.728597164154053
    6. ' return' → logprob: -4.853597164154053
    7. '    
' → logprob: -5.853597164154053
    8. '	return' → logprob: -5.978597164154053
    9. '\n' → logprob: -7.603597164154053
    10. '  
' → logprob: -7.603597164154053

Token 58: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.9537663459777832
    2. ' return' → logprob: -1.0787663459777832
    3. '   ' → logprob: -1.5787663459777832
    4. '<|end|>' → logprob: -3.328766345977783
    5. '	return' → logprob: -4.828766345977783
    6. ')' → logprob: -4.828766345977783
    7. ' ' → logprob: -5.578766345977783
    8. ' 
' → logprob: -5.578766345977783
    9. '    
' → logprob: -5.828766345977783
    10. '
' → logprob: -6.078766345977783

Token 59: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.2757473886013031
    2. ' a' → logprob: -2.400747299194336
    3. '(a' → logprob: -2.400747299194336
    4. 'a' → logprob: -2.900747299194336
    5. '(' → logprob: -5.400747299194336
    6. ' ' → logprob: -9.150747299194336
    7. '[a' → logprob: -9.650747299194336
    8. ' ' → logprob: -11.650747299194336
    9. ' [' → logprob: -12.275747299194336
    10. '[' → logprob: -12.525747299194336

Token 60: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -2.4391956685576588e-05
    2. ' a' → logprob: -10.625024795532227
    3. '   ' → logprob: -17.750024795532227
    4. ')a' → logprob: -20.125024795532227
    5. '	a' → logprob: -20.500024795532227
    6. ' ' → logprob: -20.500024795532227
    7. ''a' → logprob: -21.750024795532227
    8. '  ' → logprob: -21.875024795532227
    9. ')' → logprob: -21.875024795532227
    10. ' ' → logprob: -22.250024795532227

Token 61: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -4.513339445111342e-05
    2. ',b' → logprob: -10.625044822692871
    3. ' ,' → logprob: -10.875044822692871
    4. ',
' → logprob: -13.625044822692871
    5. ')' → logprob: -15.375044822692871
    6. ',)' → logprob: -15.875044822692871
    7. ' ' → logprob: -16.000045776367188
    8. ',

' → logprob: -17.000045776367188
    9. '`,' → logprob: -17.000045776367188
    10. '‌,' → logprob: -17.750045776367188

Token 62: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.2519424259662628
    2. 'b' → logprob: -1.5019423961639404
    3. ' ' → logprob: -11.75194263458252
    4. ' ' → logprob: -13.00194263458252
    5. ')b' → logprob: -13.00194263458252
    6. ')' → logprob: -15.00194263458252
    7. '<|end|>' → logprob: -15.00194263458252
    8. '	b' → logprob: -16.251941680908203
    9. ' )' → logprob: -16.751941680908203
    10. '```' → logprob: -16.876941680908203

Token 63: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. ')
' → logprob: -15.25
    3. ' )' → logprob: -17.125
    4. ')`' → logprob: -18.375
    5. '}' → logprob: -18.625
    6. '),' → logprob: -18.875
    7. ')#' → logprob: -19.5
    8. ')

' → logprob: -19.875
    9. ')}' → logprob: -20.0
    10. '))' → logprob: -20.0

Token 64: 'def' (ID: 1314)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.5939561724662781
    2. '<|end|>' → logprob: -1.9689562320709229
    3. ')' → logprob: -2.593956232070923
    4. '(' → logprob: -3.218956232070923
    5. '_' → logprob: -3.343956232070923
    6. '\' → logprob: -3.468956232070923
    7. 'def' → logprob: -3.718956232070923
    8. '[' → logprob: -3.718956232070923
    9. '
' → logprob: -3.718956232070923
    10. '.' → logprob: -4.093955993652344

Token 65: ' calculate' (ID: 17950)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.20925740897655487
    2. ' calculate' → logprob: -1.9592573642730713
    3. ' solve' → logprob: -3.7092573642730713
    4. ' compute' → logprob: -4.20925760269165
    5. ' process' → logprob: -5.58425760269165
    6. ' sum' → logprob: -7.20925760269165
    7. ' check' → logprob: -7.70925760269165
    8. ' find' → logprob: -7.70925760269165
    9. ' space' → logprob: -7.70925760269165
    10. ' factorial' → logprob: -7.95925760269165

Token 66: '_difference' (ID: 123771)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -1.075931429862976
    2. '_sum' → logprob: -1.200931429862976
    3. '_area' → logprob: -1.700931429862976
    4. '_max' → logprob: -3.0759315490722656
    5. '_total' → logprob: -3.0759315490722656
    6. '_space' → logprob: -4.325931549072266
    7. '_factor' → logprob: -4.450931549072266
    8. '_difference' → logprob: -4.450931549072266
    9. '_distance' → logprob: -4.825931549072266
    10. '(' → logprob: -4.950931549072266

Token 67: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.16434183716773987
    2. '(a' → logprob: -2.289341926574707
    3. '():' → logprob: -3.539341926574707
    4. '()' → logprob: -4.164341926574707
    5. '(values' → logprob: -6.289341926574707
    6. ' (' → logprob: -7.164341926574707
    7. '(def' → logprob: -8.164341926574707
    8. '```' → logprob: -8.164341926574707
    9. '(x' → logprob: -8.539341926574707
    10. '_' → logprob: -8.539341926574707

Token 68: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -5.56233171664644e-05
    2. ',b' → logprob: -10.125055313110352
    3. ' ,' → logprob: -11.250055313110352
    4. ',)' → logprob: -14.000055313110352
    5. ')' → logprob: -14.250055313110352
    6. ',a' → logprob: -14.500055313110352
    7. ',
' → logprob: -15.375055313110352
    8. ',

' → logprob: -16.25005531311035
    9. '‌,' → logprob: -16.37505531311035
    10. '_,' → logprob: -17.00005531311035

Token 69: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.31326693296432495
    2. 'b' → logprob: -1.3132669925689697
    3. ' ' → logprob: -12.68826675415039
    4. '<|end|>' → logprob: -14.31326675415039
    5. ' ' → logprob: -14.43826675415039
    6. ')b' → logprob: -15.56326675415039
    7. ',b' → logprob: -15.68826675415039
    8. '	b' → logprob: -15.93826675415039
    9. '   ' → logprob: -15.93826675415039
    10. '>b' → logprob: -15.93826675415039

Token 70: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00017910730093717575
    2. ')' → logprob: -8.750179290771484
    3. ':' → logprob: -11.500179290771484
    4. '):
' → logprob: -11.625179290771484
    5. ' ):' → logprob: -14.250179290771484
    6. ',' → logprob: -15.000179290771484
    7. '   ' → logprob: -15.625179290771484
    8. '):
' → logprob: -16.375179290771484
    9. '=' → logprob: -16.500179290771484
    10. '():' → logprob: -16.750179290771484

Token 71: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.020297318696975708
    2. 'return' → logprob: -4.270297527313232
    3. ' return' → logprob: -5.145297527313232
    4. '    
' → logprob: -9.145297050476074
    5. '```' → logprob: -9.270297050476074
    6. '    ' → logprob: -10.145297050476074
    7. 'b' → logprob: -10.770297050476074
    8. 'abs' → logprob: -12.145297050476074
    9. '`' → logprob: -12.520297050476074
    10. ' ' → logprob: -12.645297050476074

Token 72: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.7219623327255249
    2. '   ' → logprob: -0.8469623327255249
    3. ' return' → logprob: -2.4719624519348145
    4. '```' → logprob: -7.8469624519348145
    5. '    ' → logprob: -8.471961975097656
    6. '    
' → logprob: -8.721961975097656
    7. 'abs' → logprob: -8.846961975097656
    8. ' ' → logprob: -10.096961975097656
    9. '	return' → logprob: -10.971961975097656
    10. 'b' → logprob: -11.096961975097656

Token 73: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.37423139810562134
    2. 'b' → logprob: -1.2492313385009766
    3. ' abs' → logprob: -4.124231338500977
    4. 'abs' → logprob: -5.249231338500977
    5. 'a' → logprob: -5.874231338500977
    6. ' a' → logprob: -6.749231338500977
    7. ' ' → logprob: -10.749231338500977
    8. '   ' → logprob: -11.749231338500977
    9. ' ' → logprob: -11.749231338500977
    10. ' max' → logprob: -12.124231338500977

Token 74: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.6931624412536621
    2. ' -' → logprob: -0.6931624412536621
    3. ' ' → logprob: -11.44316291809082
    4. ' -
' → logprob: -14.19316291809082
    5. '-a' → logprob: -14.44316291809082
    6. '-
' → logprob: -14.56816291809082
    7. '<|end|>' → logprob: -14.69316291809082
    8. '`' → logprob: -14.81816291809082
    9. '-int' → logprob: -15.56816291809082
    10. '```' → logprob: -15.69316291809082

Token 75: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.0004306692280806601
    2. ' a' → logprob: -7.750430583953857
    3. ' ' → logprob: -17.125431060791016
    4. '	a' → logprob: -18.375431060791016
    5. '   ' → logprob: -18.750431060791016
    6. '  ' → logprob: -20.375431060791016
    7. '    ' → logprob: -20.875431060791016
    8. '1' → logprob: -21.000431060791016
    9. '<|end|>' → logprob: -21.250431060791016
    10. 'а' → logprob: -21.875431060791016

Token 76: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.9041194915771484
    2. '
' → logprob: -1.1541194915771484
    3. '<|end|>' → logprob: -1.4041194915771484
    4. '

' → logprob: -3.7791194915771484
    5. '```' → logprob: -5.154119491577148
    6. '<|end|>' → logprob: -6.029119491577148
    7. '\n' → logprob: -6.779119491577148
    8. '\' → logprob: -7.029119491577148
    9. '  
' → logprob: -8.404119491577148
    10. 'newline' → logprob: -8.654119491577148

Token 77: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5114563703536987
    2. 'print' → logprob: -1.3864563703536987
    3. 'result' → logprob: -2.0114564895629883
    4. 'a' → logprob: -4.636456489562988
    5. 'if' → logprob: -6.386456489562988
    6. 'n' → logprob: -6.511456489562988
    7. '#' → logprob: -7.261456489562988
    8. '```' → logprob: -7.261456489562988
    9. '<|end|>' → logprob: -8.011456489562988
    10. '\' → logprob: -8.011456489562988

Token 78: ' decrement' (ID: 121877)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.007949179969727993
    2. ' calculate' → logprob: -4.882949352264404
    3. ' solve' → logprob: -9.632948875427246
    4. ' process' → logprob: -9.757948875427246
    5. ' compute' → logprob: -9.882948875427246
    6. '_main' → logprob: -10.007948875427246
    7. ' print' → logprob: -10.382948875427246
    8. ' _' → logprob: -10.507948875427246
    9. ' run' → logprob: -11.132948875427246
    10. ' convert' → logprob: -12.007948875427246

Token 79: '_by' (ID: 8214)
  Prédit: '(a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.43975695967674255
    2. '(' → logprob: -1.689756989479065
    3. '_value' → logprob: -2.3147568702697754
    4. '_' → logprob: -4.189756870269775
    5. '_values' → logprob: -4.689756870269775
    6. '_difference' → logprob: -4.689756870269775
    7. '_counter' → logprob: -4.814756870269775
    8. '(value' → logprob: -5.689756870269775
    9. '_count' → logprob: -5.814756870269775
    10. '_(' → logprob: -5.939756870269775

Token 80: '_one' (ID: 26979)
  Prédit: '_one'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_one' → logprob: -0.8403953313827515
    2. 'one' → logprob: -1.2153953313827515
    3. '1' → logprob: -1.3403953313827515
    4. ' one' → logprob: -5.215395450592041
    5. '_' → logprob: -5.965395450592041
    6. ' ' → logprob: -6.715395450592041
    7. 'One' → logprob: -8.965394973754883
    8. '10' → logprob: -9.090394973754883
    9. '_two' → logprob: -9.215394973754883
    10. '2' → logprob: -9.340394973754883

Token 81: '(value' (ID: 6333)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.04346052557229996
    2. '(a' → logprob: -3.1684606075286865
    3. '()' → logprob: -8.793460845947266
    4. '():' → logprob: -9.043460845947266
    5. '(n' → logprob: -9.793460845947266
    6. '(x' → logprob: -10.543460845947266
    7. '(value' → logprob: -10.793460845947266
    8. '(s' → logprob: -10.918460845947266
    9. ' (' → logprob: -11.543460845947266
    10. '(num' → logprob: -11.668460845947266

Token 82: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0004341261519584805
    2. ')' → logprob: -8.500433921813965
    3. '):
' → logprob: -8.875433921813965
    4. ' ):' → logprob: -9.375433921813965
    5. '   ' → logprob: -13.250433921813965
    6. ':' → logprob: -13.250433921813965
    7. ' ' → logprob: -13.750433921813965
    8. ',' → logprob: -14.625433921813965
    9. '):
' → logprob: -15.500433921813965
    10. 'value' → logprob: -15.500433921813965

Token 83: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0032069424632936716
    2. ' return' → logprob: -5.753206729888916
    3. 'return' → logprob: -11.003207206726074
    4. '    
' → logprob: -12.503207206726074
    5. '```' → logprob: -12.753207206726074
    6. '	return' → logprob: -13.628207206726074
    7. '   ' → logprob: -14.003207206726074
    8. ' value' → logprob: -14.128207206726074
    9. '<|end|>' → logprob: -14.378207206726074
    10. '    ' → logprob: -14.378207206726074

Token 84: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18563637137413025
    2. 'return' (adapté à ' return') → logprob: -1.9356364011764526
    3. ' return' → logprob: -3.685636281967163
    4. 'value' → logprob: -12.435636520385742
    5. '    ' → logprob: -12.560636520385742
    6. '```' → logprob: -13.935636520385742
    7. '	return' → logprob: -14.060636520385742
    8. '    
' → logprob: -14.935636520385742
    9. ' ' → logprob: -15.060636520385742
    10. ' value' → logprob: -15.435636520385742

Token 85: ' value' (ID: 1432)
  Prédit: ' value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' value' → logprob: -0.018156850710511208
    2. 'value' → logprob: -4.018157005310059
    3. ' ' → logprob: -12.518157005310059
    4. ' (' → logprob: -13.643157005310059
    5. '(value' → logprob: -13.893157005310059
    6. '1' → logprob: -14.518157005310059
    7. ' ' → logprob: -14.768157005310059
    8. ' int' → logprob: -16.768156051635742
    9. 'int' → logprob: -16.893156051635742
    10. '	value' → logprob: -17.143156051635742

Token 86: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.02078932896256447
    2. '-' → logprob: -3.895789384841919
    3. ' ' → logprob: -8.39578914642334
    4. ' ' → logprob: -11.77078914642334
    5. '<|end|>' → logprob: -12.27078914642334
    6. '  ' → logprob: -13.02078914642334
    7. '1' → logprob: -13.52078914642334
    8. ' -=' → logprob: -14.52078914642334
    9. ' ­' → logprob: -14.89578914642334
    10. '.' → logprob: -15.08328914642334

Token 87: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.000553151941858232
    2. ' ' → logprob: -7.500553131103516
    3. '   ' → logprob: -15.875553131103516
    4. '```' → logprob: -17.625553131103516
    5. '<|end|>' → logprob: -18.375553131103516
    6. '  ' → logprob: -19.000553131103516
    7. ' one' → logprob: -19.125553131103516
    8. '2' → logprob: -19.250553131103516
    9. ' ' → logprob: -19.250553131103516
    10. '0' → logprob: -19.313053131103516

Token 88: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.512236498361744e-07
    2. ' ' → logprob: -14.750000953674316
    3. '```' → logprob: -16.5
    4. '<|end|>' → logprob: -17.25
    5. '１' → logprob: -20.125
    6. '0' → logprob: -20.125
    7. '`' → logprob: -20.375
    8. '   ' → logprob: -20.625
    9. '' → logprob: -20.625
    10. '۱' → logprob: -20.875

Token 89: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 90: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.08708511292934418
    2. '#' → logprob: -3.837085008621216
    3. 'print' → logprob: -3.962085008621216
    4. '```' → logprob: -4.212085247039795
    5. 'a' → logprob: -4.712085247039795
    6. '\' → logprob: -4.962085247039795
    7. '\n' → logprob: -5.212085247039795
    8. 'n' → logprob: -5.962085247039795
    9. '<|end|>' → logprob: -7.087085247039795
    10. 'result' → logprob: -7.212085247039795

Token 91: ' compute' (ID: 23864)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.3983296751976013
    2. 'calculate' → logprob: -1.773329734802246
    3. ' main' → logprob: -2.273329734802246
    4. 'process' → logprob: -4.523329734802246
    5. 'solve' → logprob: -4.648329734802246
    6. 'compute' → logprob: -4.898329734802246
    7. ' calculate' → logprob: -4.898329734802246
    8. 'is' → logprob: -5.648329734802246
    9. 'de' → logprob: -6.523329734802246
    10. 'find' → logprob: -6.648329734802246

Token 92: '_sum' (ID: 29859)
  Prédit: '_difference'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_difference' → logprob: -0.03550032526254654
    2. '_sum' → logprob: -4.285500526428223
    3. '_diff' → logprob: -5.410500526428223
    4. '_' → logprob: -5.535500526428223
    5. '_max' → logprob: -5.910500526428223
    6. '(' → logprob: -6.535500526428223
    7. '_result' → logprob: -6.785500526428223
    8. '_total' → logprob: -6.785500526428223
    9. '_space' → logprob: -7.035500526428223
    10. '_value' → logprob: -7.035500526428223

Token 93: '_of' (ID: 8023)
  Prédit: '(a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.10303711891174316
    2. '(' → logprob: -2.353037118911743
    3. ' (' → logprob: -6.228036880493164
    4. '():' → logprob: -7.853036880493164
    5. '(value' → logprob: -7.978036880493164
    6. '(x' → logprob: -10.728036880493164
    7. '(*' → logprob: -10.853036880493164
    8. '(s' → logprob: -11.228036880493164
    9. '(n' → logprob: -11.478036880493164
    10. '(values' → logprob: -11.603036880493164

Token 94: '_first' (ID: 29347)
  Prédit: 'de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'de' → logprob: -1.2989718914031982
    2. 'dif' → logprob: -1.6739718914031982
    3. 'digits' → logprob: -1.9239718914031982
    4. 'values' → logprob: -2.4239718914031982
    5. 'two' → logprob: -2.7989718914031982
    6. 'd' → logprob: -3.6739718914031982
    7. 'numbers' → logprob: -3.6739718914031982
    8. 'three' → logprob: -3.7989718914031982
    9. 's' → logprob: -3.7989718914031982
    10. 'inte' → logprob: -3.9239718914031982

Token 95: '_n' (ID: 2170)
  Prédit: '_n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: -0.04979872331023216
    2. 'n' → logprob: -3.1747987270355225
    3. '_' → logprob: -6.174798488616943
    4. '(' → logprob: -6.799798488616943
    5. '(n' → logprob: -6.924798488616943
    6. '_elements' → logprob: -7.299798488616943
    7. '_k' → logprob: -7.299798488616943
    8. 'N' → logprob: -7.924798488616943
    9. '_numbers' → logprob: -7.924798488616943
    10. '_terms' → logprob: -9.424798965454102

Token 96: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.055212140083313
    2. '_numbers' → logprob: -1.055212140083313
    3. '_in' → logprob: -2.0552120208740234
    4. '_n' → logprob: -2.1802120208740234
    5. '_' → logprob: -3.3052120208740234
    6. '_terms' → logprob: -4.555212020874023
    7. '_elements' → logprob: -5.180212020874023
    8. '_values' → logprob: -5.430212020874023
    9. '(n' → logprob: -6.555212020874023
    10. '```' → logprob: -7.305212020874023

Token 97: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0808907225728035
    2. ')' → logprob: -2.830890655517578
    3. '(n' → logprob: -4.330890655517578
    4. ' ):' → logprob: -5.705890655517578
    5. '(' → logprob: -6.455890655517578
    6. ' )' → logprob: -8.705890655517578
    7. 's' → logprob: -9.080890655517578
    8. ':' → logprob: -9.205890655517578
    9. '):
' → logprob: -9.705890655517578
    10. '_' → logprob: -10.080890655517578

Token 98: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.016054663807153702
    2. ' return' → logprob: -4.391054630279541
    3. 'return' → logprob: -5.766054630279541
    4. ' n' → logprob: -9.1410551071167
    5. '    
' → logprob: -9.1410551071167
    6. 'n' → logprob: -9.3910551071167
    7. '    ' → logprob: -11.1410551071167
    8. '
' → logprob: -11.2660551071167
    9. ' if' → logprob: -11.2660551071167
    10. 'result' → logprob: -11.7660551071167

Token 99: ' return' (ID: 622)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.34172454476356506
    2. 'n' → logprob: -1.4667245149612427
    3. ' return' → logprob: -3.2167246341705322
    4. 'return' (adapté à ' return') → logprob: -4.841724395751953
    5. ' (' → logprob: -5.091724395751953
    6. '   ' → logprob: -5.841724395751953
    7. '(n' → logprob: -6.591724395751953
    8. '(' → logprob: -8.591724395751953
    9. 'def' → logprob: -9.091724395751953
    10. ' def' → logprob: -10.966724395751953

Token 100: ' ((' (ID: 3536)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.13930697739124298
    2. 'n' → logprob: -2.1393070220947266
    3. ' (' → logprob: -4.764307022094727
    4. '(n' → logprob: -5.639307022094727
    5. '(' → logprob: -8.514307022094727
    6. ' ' → logprob: -11.639307022094727
    7. '	n' → logprob: -13.014307022094727
    8. '   ' → logprob: -13.514307022094727
    9. ' ' → logprob: -13.514307022094727
    10. ' int' → logprob: -14.014307022094727

Token 101: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -5.5861724831629544e-05
    2. ' n' → logprob: -10.125056266784668
    3. '(n' → logprob: -11.875056266784668
    4. '1' → logprob: -12.500056266784668
    5. '(' → logprob: -12.875056266784668
    6. ')n' → logprob: -13.125056266784668
    7. '	n' → logprob: -16.25005531311035
    8. '_n' → logprob: -16.50005531311035
    9. ')' → logprob: -16.75005531311035
    10. ' (' → logprob: -16.87505531311035

Token 102: ' +' (ID: 659)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.3430723547935486
    2. ' *' → logprob: -1.7180724143981934
    3. '+' → logprob: -2.7180724143981934
    4. ')' → logprob: -3.7180724143981934
    5. ' +' → logprob: -4.218072414398193
    6. '*(' → logprob: -5.343072414398193
    7. ' )' → logprob: -7.843072414398193
    8. ')*(' → logprob: -7.843072414398193
    9. ')*' → logprob: -8.593071937561035
    10. '*n' → logprob: -8.968071937561035

Token 103: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.06994055211544037
    2. ' ' → logprob: -2.6949405670166016
    3. ' ' → logprob: -13.069940567016602
    4. ' n' → logprob: -14.694940567016602
    5. '```' → logprob: -14.819940567016602
    6. '  ' → logprob: -14.819940567016602
    7. '0' → logprob: -15.444940567016602
    8. '   ' → logprob: -15.819940567016602
    9. '
' → logprob: -16.0699405670166
    10. ')' → logprob: -16.6324405670166

Token 104: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.4391956685576588e-05
    2. ' ' → logprob: -10.750024795532227
    3. '0' → logprob: -13.250024795532227
    4. '```' → logprob: -15.125024795532227
    5. '

' → logprob: -15.500024795532227
    6. '  ' → logprob: -15.750024795532227
    7. '2' → logprob: -16.125024795532227
    8. '   ' → logprob: -16.125024795532227
    9. '
' → logprob: -16.250024795532227
    10. '...' → logprob: -17.250024795532227

Token 105: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.012756255455315113
    2. ')*' → logprob: -4.76275634765625
    3. '*' → logprob: -5.63775634765625
    4. ' )' → logprob: -8.13775634765625
    5. ' *' → logprob: -8.26275634765625
    6. ' ' → logprob: -11.26275634765625
    7. '*n' → logprob: -12.76275634765625
    8. '*)' → logprob: -12.88775634765625
    9. ' ' → logprob: -13.01275634765625
    10. ')n' → logprob: -14.51275634765625

Token 106: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.1472947746515274
    2. ' *' → logprob: -2.022294759750366
    3. ')' → logprob: -5.772294998168945
    4. ')*' → logprob: -7.022294998168945
    5. '*n' → logprob: -7.897294998168945
    6. ' ' → logprob: -9.272294998168945
    7. ' )' → logprob: -9.647294998168945
    8. ' ' → logprob: -9.772294998168945
    9. '*)' → logprob: -11.772294998168945
    10. '   ' → logprob: -12.397294998168945

Token 107: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.20141859352588654
    2. 'n' → logprob: -1.7014186382293701
    3. '	n' → logprob: -13.32641887664795
    4. ')n' → logprob: -13.57641887664795
    5. ' ' → logprob: -14.45141887664795
    6. ' ' → logprob: -14.70141887664795
    7. '    ' → logprob: -14.95141887664795
    8. '_n' → logprob: -15.32641887664795
    9. '```' → logprob: -15.45141887664795
    10. ' (' → logprob: -15.95141887664795

Token 108: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.007565218023955822
    2. ' )' → logprob: -5.632565021514893
    3. ')//' → logprob: -6.007565021514893
    4. ' //' → logprob: -6.757565021514893
    5. '//' → logprob: -8.00756549835205
    6. '   ' → logprob: -13.63256549835205
    7. ')>>' → logprob: -14.88256549835205
    8. ' ' → logprob: -15.00756549835205
    9. ')/' → logprob: -16.007564544677734
    10. ' ' → logprob: -17.507564544677734

Token 109: ' //' (ID: 602)
  Prédit: '//'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '//' → logprob: -0.0789034515619278
    2. ' //' → logprob: -2.5789034366607666
    3. '/' → logprob: -11.828903198242188
    4. '   ' → logprob: -12.828903198242188
    5. '#' → logprob: -13.828903198242188
    6. '```' → logprob: -14.828903198242188
    7. '`' → logprob: -15.203903198242188
    8. 'def' → logprob: -15.203903198242188
    9. ' ' → logprob: -15.453903198242188
    10. ' ' → logprob: -15.703903198242188

Token 110: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -2.165027217415627e-05
    2. ' ' → logprob: -10.750021934509277
    3. '   ' → logprob: -16.75002098083496
    4. '```' → logprob: -17.62502098083496
    5. '۲' → logprob: -18.37502098083496
    6. '<|end|>' → logprob: -19.37502098083496
    7. '1' → logprob: -19.50002098083496
    8. '
' → logprob: -19.75002098083496
    9. '  ' → logprob: -19.75002098083496
    10. '    ' → logprob: -19.81252098083496

Token 111: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -3.4121114822482923e-06
    2. ' ' → logprob: -12.625003814697266
    3. '1' → logprob: -16.875003814697266
    4. '   ' → logprob: -17.375003814697266
    5. '۲' → logprob: -18.000003814697266
    6. '```' → logprob: -18.250003814697266
    7. '
' → logprob: -19.500003814697266
    8. '２' → logprob: -19.812503814697266
    9. '٢' → logprob: -20.000003814697266
    10. '202' → logprob: -20.125003814697266

Token 112: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.11219220608472824
    2. '<|end|>' → logprob: -2.362192153930664
    3. 'n' → logprob: -5.237192153930664
    4. '<|end|>' → logprob: -6.237192153930664
    5. '
' → logprob: -6.362192153930664
    6. '\' → logprob: -6.987192153930664
    7. '\n' → logprob: -7.862192153930664
    8. '#' → logprob: -7.862192153930664
    9. '```' → logprob: -8.237192153930664
    10. 'newline' → logprob: -8.987192153930664

Token 113: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -2.3795937522663735e-05
    2. '```' → logprob: -11.00002384185791
    3. '\' → logprob: -13.00002384185791
    4. 'print' → logprob: -13.75002384185791
    5. 'n' → logprob: -13.87502384185791
    6. 'if' → logprob: -14.25002384185791
    7. '#' → logprob: -14.62502384185791
    8. ' def' → logprob: -14.87502384185791
    9. '
' → logprob: -15.37502384185791
    10. '<|end|>' → logprob: -15.50002384185791

Token 114: ' compute' (ID: 23864)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.07222896069288254
    2. 'main' → logprob: -4.072228908538818
    3. ' calculate' → logprob: -4.447228908538818
    4. ' solve' → logprob: -4.447228908538818
    5. ' sum' → logprob: -5.072228908538818
    6. ' count' → logprob: -5.072228908538818
    7. ' compute' → logprob: -5.072228908538818
    8. ' find' → logprob: -6.072228908538818
    9. 'calculate' → logprob: -6.197228908538818
    10. 'solve' → logprob: -6.697228908538818

Token 115: '_result' (ID: 11623)
  Prédit: '_sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.05075892433524132
    2. '_difference' → logprob: -3.8007588386535645
    3. '_total' → logprob: -4.8007588386535645
    4. '_range' → logprob: -5.6757588386535645
    5. '_max' → logprob: -6.4257588386535645
    6. '_remaining' → logprob: -6.6757588386535645
    7. '_product' → logprob: -6.8007588386535645
    8. '_c' → logprob: -6.9257588386535645
    9. '_factor' → logprob: -7.0507588386535645
    10. '_partial' → logprob: -7.4257588386535645

Token 116: '(A' (ID: 10706)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.7834718227386475
    2. '(a' → logprob: -1.0334718227386475
    3. '(value' → logprob: -2.5334718227386475
    4. '(' → logprob: -3.4084718227386475
    5. '(d' → logprob: -3.6584718227386475
    6. '(diff' → logprob: -4.033472061157227
    7. ' (' → logprob: -4.908472061157227
    8. '(distance' → logprob: -5.658472061157227
    9. '(s' → logprob: -5.783472061157227
    10. '():' → logprob: -5.908472061157227

Token 117: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0006521515315398574
    2. ' ,' → logprob: -7.375652313232422
    3. ',b' → logprob: -11.500652313232422
    4. '_,' → logprob: -11.875652313232422
    5. '):' → logprob: -12.750652313232422
    6. ',a' → logprob: -13.500652313232422
    7. ',B' → logprob: -13.625652313232422
    8. ',
' → logprob: -14.250652313232422
    9. ',n' → logprob: -14.250652313232422
    10. ')' → logprob: -15.250652313232422

Token 118: ' a' (ID: 261)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.3486916720867157
    2. ' B' → logprob: -1.223691701889038
    3. 'K' → logprob: -9.723691940307617
    4. 'D' → logprob: -9.723691940307617
    5. ' ' → logprob: -10.098691940307617
    6. 'b' → logprob: -10.848691940307617
    7. ' K' → logprob: -11.098691940307617
    8. ' D' → logprob: -11.348691940307617
    9. 'N' → logprob: -11.723691940307617
    10. '   ' → logprob: -12.286191940307617

Token 119: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0324583500623703
    2. '):' → logprob: -3.5324583053588867
    3. ',b' → logprob: -7.282458305358887
    4. ' ,' → logprob: -7.657458305358887
    5. ')' → logprob: -7.782458305358887
    6. '_,' → logprob: -8.532458305358887
    7. 'd' → logprob: -9.282458305358887
    8. '):
' → logprob: -9.407458305358887
    9. 's' → logprob: -9.657458305358887
    10. 'b' → logprob: -9.907458305358887

Token 120: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.08491404354572296
    2. '   ' → logprob: -2.834913969039917
    3. ':
' → logprob: -4.959914207458496
    4. ',' → logprob: -5.334914207458496
    5. ' :' → logprob: -5.584914207458496
    6. ' =' → logprob: -6.209914207458496
    7. 'B' → logprob: -7.334914207458496
    8. 'b' → logprob: -7.459914207458496
    9. '=' → logprob: -7.584914207458496
    10. ' ' → logprob: -7.834914207458496

Token 121: ' return' (ID: 622)
  Prédit: 'diff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'diff' → logprob: -1.3514254093170166
    2. 'difference' → logprob: -1.4764254093170166
    3. 'd' → logprob: -2.8514254093170166
    4. 'n' → logprob: -2.8514254093170166
    5. 'result' → logprob: -3.1014254093170166
    6. ' diff' → logprob: -3.2264254093170166
    7. 'total' → logprob: -3.6014254093170166
    8. 'return' (adapté à ' return') → logprob: -3.7264254093170166
    9. '   ' → logprob: -3.7264254093170166
    10. 'b' → logprob: -3.9764254093170166

Token 122: ' A' (ID: 355)
  Prédit: 'compute'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'compute' → logprob: -0.4876041114330292
    2. ' compute' → logprob: -0.9876041412353516
    3. ' (' → logprob: -5.612604141235352
    4. '(com' → logprob: -6.237604141235352
    5. ' A' → logprob: -6.487604141235352
    6. 'a' → logprob: -6.487604141235352
    7. 'A' → logprob: -6.737604141235352
    8. ' a' → logprob: -6.862604141235352
    9. '(A' → logprob: -7.737604141235352
    10. '(a' → logprob: -7.862604141235352

Token 123: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.19902560114860535
    2. '-' → logprob: -1.8240256309509277
    3. ' +' → logprob: -4.699025630950928
    4. '+' → logprob: -4.699025630950928
    5. ' *' → logprob: -8.07402515411377
    6. '*' → logprob: -8.32402515411377
    7. 'a' → logprob: -9.44902515411377
    8. '_' → logprob: -9.44902515411377
    9. ' ' → logprob: -9.44902515411377
    10. ' ' → logprob: -9.82402515411377

Token 124: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.005321870092302561
    2. ' a' → logprob: -5.505321979522705
    3. 'compute' → logprob: -7.005321979522705
    4. '(a' → logprob: -8.630321502685547
    5. '(' → logprob: -10.005321502685547
    6. ' (' → logprob: -10.130321502685547
    7. '((' → logprob: -10.380321502685547
    8. ' compute' → logprob: -10.880321502685547
    9. '1' → logprob: -11.755321502685547
    10. ' ((' → logprob: -12.505321502685547

Token 125: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.004298964980989695
    2. '
' → logprob: -6.129299163818359
    3. '<|end|>' → logprob: -7.629299163818359
    4. '

' → logprob: -7.879299163818359
    5. '(' → logprob: -8.25429916381836
    6. '\n' → logprob: -8.37929916381836
    7. '()' → logprob: -8.87929916381836
    8. '(def' → logprob: -8.87929916381836
    9. ' def' → logprob: -9.37929916381836
    10. '(
' → logprob: -9.75429916381836

Token 126: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.016145924106240273
    2. '()' → logprob: -4.766145706176758
    3. '(' → logprob: -5.141145706176758
    4. '<|end|>' → logprob: -7.766145706176758
    5. '```' → logprob: -8.141145706176758
    6. '(
' → logprob: -8.891145706176758
    7. ')' → logprob: -8.891145706176758
    8. '#' → logprob: -8.891145706176758
    9. '\' → logprob: -9.391145706176758
    10. ':' → logprob: -9.516145706176758

Token 127: ' print' (ID: 2123)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.047945261001587
    2. ' main' → logprob: -1.047945261001587
    3. '_' → logprob: -1.922945261001587
    4. ' _' → logprob: -2.672945261001587
    5. ' compute' → logprob: -2.922945261001587
    6. ' def' → logprob: -3.922945261001587
    7. ' calculate' → logprob: -5.297945022583008
    8. ' __' → logprob: -5.797945022583008
    9. ' 
' → logprob: -8.547945022583008
    10. ' ' → logprob: -8.547945022583008

Token 128: '_result' (ID: 11623)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003567403880879283
    2. '("("' → logprob: -6.128567218780518
    3. '()' → logprob: -7.753567218780518
    4. '('' → logprob: -8.378567695617676
    5. '_' → logprob: -8.878567695617676
    6. '_result' → logprob: -9.253567695617676
    7. '("")' → logprob: -9.253567695617676
    8. '("_' → logprob: -9.378567695617676
    9. '("' → logprob: -9.503567695617676
    10. '(result' → logprob: -10.128567695617676

Token 129: '(ans' (ID: 70054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004019753076136112
    2. '()' → logprob: -5.629019737243652
    3. '("("' → logprob: -8.254019737243652
    4. '('' → logprob: -9.254019737243652
    5. ' (' → logprob: -10.629019737243652
    6. '(
' → logprob: -12.004019737243652
    7. '("")' → logprob: -12.129019737243652
    8. '```' → logprob: -12.629019737243652
    9. ' ' → logprob: -12.754019737243652
    10. '((' → logprob: -12.754019737243652

Token 130: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.001334763248451054
    2. '):' → logprob: -6.6263346672058105
    3. ':' → logprob: -13.126335144042969
    4. 'ation' → logprob: -14.001335144042969
    5. '):
' → logprob: -14.376335144042969
    6. ')t' → logprob: -14.501335144042969
    7. ')**' → logprob: -14.501335144042969
    8. ',' → logprob: -14.626335144042969
    9. 'ent' → logprob: -14.876335144042969
    10. ' )' → logprob: -15.001335144042969

Token 131: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2525196075439453
    2. ' print' → logprob: -1.5025196075439453
    3. 'print' → logprob: -7.502519607543945
    4. '    
' → logprob: -10.752519607543945
    5. '    ' → logprob: -12.127519607543945
    6. ' 
' → logprob: -12.502519607543945
    7. '```' → logprob: -12.627519607543945
    8. '   ' → logprob: -14.002519607543945
    9. '	print' → logprob: -14.502519607543945
    10. '
' → logprob: -14.502519607543945

Token 132: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -4.727905979962088e-05
    2. ' print' → logprob: -10.00004768371582
    3. '   ' → logprob: -13.25004768371582
    4. '```' → logprob: -20.12504768371582
    5. 'pr' → logprob: -21.25004768371582
    6. 'for' → logprob: -21.75004768371582
    7. ' ' → logprob: -23.00004768371582
    8. 'def' → logprob: -23.00004768371582
    9. '	print' → logprob: -23.50004768371582
    10. 'prin' → logprob: -23.62504768371582

Token 133: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -0.20144014060497284
    2. '(' → logprob: -1.7014400959014893
    3. '()' → logprob: -11.20143985748291
    4. '(answer' → logprob: -12.57643985748291
    5. ' (' → logprob: -12.95143985748291
    6. '(
' → logprob: -12.95143985748291
    7. 'ans' → logprob: -13.32643985748291
    8. '('' → logprob: -14.07643985748291
    9. '("("' → logprob: -14.32643985748291
    10. '(

' → logprob: -14.57643985748291

Token 134: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.320199877838604e-07
    2. ')
' → logprob: -15.375
    3. ' )' → logprob: -15.75
    4. ')`' → logprob: -17.375
    5. '()' → logprob: -18.75
    6. '))' → logprob: -18.75
    7. '')' → logprob: -19.5
    8. '),' → logprob: -19.5
    9. ')

' → logprob: -19.875
    10. '())' → logprob: -19.875

Token 135: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0003066222125198692
    2. 'if' → logprob: -8.125307083129883
    3. '
' → logprob: -12.250307083129883
    4. '    
' → logprob: -13.250307083129883
    5. '

' → logprob: -13.625307083129883
    6. '  
' → logprob: -13.875307083129883
    7. ' def' → logprob: -14.000307083129883
    8. '```' → logprob: -14.500307083129883
    9. '\' → logprob: -15.625307083129883
    10. 'ndef' → logprob: -16.375307083129883

Token 136: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.2519453167915344
    2. 'main' → logprob: -1.5019452571868896
    3. ' process' → logprob: -12.376945495605469
    4. ' solve' → logprob: -12.626945495605469
    5. 'process' → logprob: -13.001945495605469
    6. 'solve' → logprob: -13.251945495605469
    7. 'def' → logprob: -13.501945495605469
    8. ' run' → logprob: -13.751945495605469
    9. '_main' → logprob: -13.876945495605469
    10. 'run' → logprob: -15.126945495605469

Token 137: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -5.319370302458992e-06
    2. ' ():' → logprob: -13.000005722045898
    3. '():
' → logprob: -13.875005722045898
    4. '(' → logprob: -13.875005722045898
    5. '_' → logprob: -14.500005722045898
    6. '()' → logprob: -14.625005722045898
    7. ':' → logprob: -17.0000057220459
    8. '(:' → logprob: -18.0000057220459
    9. '():
' → logprob: -18.2500057220459
    10. '()>' → logprob: -18.8750057220459

Token 138: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004779468290507793
    2. ' A' → logprob: -6.25477933883667
    3. 'a' → logprob: -6.75477933883667
    4. ' a' → logprob: -6.75477933883667
    5. 'A' → logprob: -7.87977933883667
    6. ' values' → logprob: -9.254779815673828
    7. 'values' → logprob: -10.504779815673828
    8. '(a' → logprob: -12.379779815673828
    9. '    ' → logprob: -12.754779815673828
    10. ' (' → logprob: -13.379779815673828

Token 139: ' a' (ID: 261)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.03935405984520912
    2. 'a' (adapté à ' a') → logprob: -3.539354085922241
    3. ' A' → logprob: -5.039353847503662
    4. '   ' → logprob: -6.414353847503662
    5. 'values' → logprob: -6.664353847503662
    6. ' a' → logprob: -9.53935432434082
    7. ' values' → logprob: -9.78935432434082
    8. ' ' → logprob: -11.53935432434082
    9. 'vals' → logprob: -11.91435432434082
    10. '    
' → logprob: -11.91435432434082

Token 140: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0005501718260347843
    2. ',b' → logprob: -8.000550270080566
    3. ' ,' → logprob: -9.375550270080566
    4. 'b' → logprob: -9.500550270080566
    5. 's' → logprob: -11.625550270080566
    6. '_values' → logprob: -12.000550270080566
    7. ' =' → logprob: -12.125550270080566
    8. '=' → logprob: -12.250550270080566
    9. '_,' → logprob: -12.250550270080566
    10. ',A' → logprob: -12.375550270080566

Token 141: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.38689348101615906
    2. ' b' → logprob: -1.1368935108184814
    3. '<|end|>' → logprob: -11.261893272399902
    4. 'A' → logprob: -12.511893272399902
    5. ' A' → logprob: -13.011893272399902
    6. ' ' → logprob: -13.386893272399902
    7. '    ' → logprob: -13.886893272399902
    8. '  ' → logprob: -15.011893272399902
    9. '   ' → logprob: -15.636893272399902
    10. '_b' → logprob: -16.13689422607422

Token 142: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.033646389842033386
    2. '=' → logprob: -3.40864634513855
    3. ' ' → logprob: -15.408646583557129
    4. ',' → logprob: -15.658646583557129
    5. ' =
' → logprob: -16.033645629882812
    6. '<|end|>' → logprob: -16.658645629882812
    7. ')' → logprob: -17.533645629882812
    8. ' =
' → logprob: -17.658645629882812
    9. '   ' → logprob: -18.158645629882812
    10. '<|end|>' → logprob: -18.283645629882812

Token 143: ' read' (ID: 1729)
  Prédit: ' read'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.018154622986912727
    2. 'read' → logprob: -4.018154621124268
    3. ' ' → logprob: -12.393155097961426
    4. '	read' → logprob: -14.518155097961426
    5. '  ' → logprob: -16.76815414428711
    6. '(read' → logprob: -18.39315414428711
    7. ' map' → logprob: -18.89315414428711
    8. ' input' → logprob: -19.01815414428711
    9. '   ' → logprob: -19.14315414428711
    10. ' ' → logprob: -19.51815414428711

Token 144: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.002204974414780736
    2. '_' → logprob: -6.127204895019531
    3. '_inputs' → logprob: -11.877204895019531
    4. '_line' → logprob: -12.002204895019531
    5. '_output' → logprob: -13.252204895019531
    6. '()' → logprob: -13.502204895019531
    7. '_Input' → logprob: -14.127204895019531
    8. '_in' → logprob: -14.502204895019531
    9. '__' → logprob: -14.752204895019531
    10. '_value' → logprob: -14.877204895019531

Token 145: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -3.2617008400848135e-05
    2. '()
' → logprob: -10.375032424926758
    3. '()

' → logprob: -14.625032424926758
    4. '(' → logprob: -15.125032424926758
    5. '()`' → logprob: -15.625032424926758
    6. '()
' → logprob: -16.125032424926758
    7. '()\' → logprob: -16.125032424926758
    8. '()"' → logprob: -16.500032424926758
    9. '():' → logprob: -16.500032424926758
    10. ' ()' → logprob: -16.625032424926758

Token 146: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.556982159614563
    2. '   ' → logprob: -2.0569820404052734
    3. 'diff' → logprob: -2.3069820404052734
    4. 'result' → logprob: -3.3069820404052734
    5. 'difference' → logprob: -3.4319820404052734
    6. ' diff' → logprob: -3.5569820404052734
    7. ' result' → logprob: -3.5569820404052734
    8. ' difference' → logprob: -4.431982040405273
    9. 'n' → logprob: -4.681982040405273
    10. ' ans' → logprob: -4.931982040405273

Token 147: ' x' (ID: 1215)
  Prédit: 'diff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'diff' → logprob: -0.39608830213546753
    2. 'difference' → logprob: -1.5210883617401123
    3. 'd' → logprob: -3.2710883617401123
    4. 'A' → logprob: -3.2710883617401123
    5. 'c' → logprob: -5.021088123321533
    6. 'n' → logprob: -5.021088123321533
    7. 'ans' → logprob: -5.271088123321533
    8. 'result' → logprob: -5.771088123321533
    9. 'a' → logprob: -6.271088123321533
    10. ' diff' → logprob: -6.771088123321533

Token 148: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0896756649017334
    2. '=' → logprob: -2.4646756649017334
    3. '_' → logprob: -7.4646759033203125
    4. '_difference' → logprob: -10.214675903320312
    5. '=int' → logprob: -10.714675903320312
    6. ',' → logprob: -11.214675903320312
    7. '_diff' → logprob: -11.339675903320312
    8. '```' → logprob: -11.464675903320312
    9. '_value' → logprob: -11.964675903320312
    10. ' ' → logprob: -11.964675903320312

Token 149: ' calculate' (ID: 17950)
  Prédit: ' calculate'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.36746248602867126
    2. 'calculate' → logprob: -1.3674625158309937
    3. ' decrement' → logprob: -3.617462396621704
    4. 'de' → logprob: -4.117462635040283
    5. ' b' → logprob: -5.117462635040283
    6. 'b' → logprob: -6.367462635040283
    7. ' compute' → logprob: -6.867462635040283
    8. 'compute' → logprob: -8.492462158203125
    9. ' ' → logprob: -8.492462158203125
    10. ' de' → logprob: -8.992462158203125

Token 150: '_difference' (ID: 123771)
  Prédit: '_difference'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_difference' → logprob: -6.704273118884885e-07
    2. 'difference' → logprob: -14.625000953674316
    3. '_diff' → logprob: -16.875
    4. '_' → logprob: -17.125
    5. '_distance' → logprob: -17.375
    6. ' difference' → logprob: -17.375
    7. '_d' → logprob: -18.75
    8. 'Difference' → logprob: -19.375
    9. '_factor' → logprob: -19.75
    10. '_di' → logprob: -20.75

Token 151: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.0005212200339883566
    2. '(' → logprob: -7.750521183013916
    3. ' (' → logprob: -9.375521659851074
    4. '(b' → logprob: -13.000521659851074
    5. '(x' → logprob: -13.375521659851074
    6. '(
' → logprob: -13.625521659851074
    7. ' ' → logprob: -15.750521659851074
    8. '(s' → logprob: -15.875521659851074
    9. '(A' → logprob: -16.250520706176758
    10. '((' → logprob: -16.875520706176758

Token 152: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0002819544170051813
    2. ',b' → logprob: -8.250282287597656
    3. ' ,' → logprob: -10.875282287597656
    4. 'b' → logprob: -14.625282287597656
    5. ',
' → logprob: -15.000282287597656
    6. ' ' → logprob: -15.875282287597656
    7. '`,' → logprob: -16.125282287597656
    8. '，' → logprob: -16.125282287597656
    9. '   ' → logprob: -16.375282287597656
    10. ',",' → logprob: -16.375282287597656

Token 153: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.5759446620941162
    2. 'b' → logprob: -0.8259446620941162
    3. ')b' → logprob: -13.075944900512695
    4. ')' → logprob: -13.450944900512695
    5. '	b' → logprob: -14.575944900512695
    6. ' ' → logprob: -14.950944900512695
    7. ' 
' → logprob: -15.450944900512695
    8. '<|end|>' → logprob: -16.075944900512695
    9. ' ' → logprob: -16.200944900512695
    10. ' )' → logprob: -16.325944900512695

Token 154: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.774276774493046e-05
    2. ')
' → logprob: -10.500038146972656
    3. ' )' → logprob: -12.000038146972656
    4. ')

' → logprob: -12.625038146972656
    5. '))' → logprob: -14.875038146972656
    6. '   ' → logprob: -15.750038146972656
    7. ' ' → logprob: -16.875038146972656
    8. ')
' → logprob: -16.875038146972656
    9. ')`' → logprob: -17.125038146972656
    10. '())' → logprob: -17.750038146972656

Token 155: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.022024571895599365
    2. ' 
' → logprob: -5.397024631500244
    3. '   ' → logprob: -5.522024631500244
    4. 'x' → logprob: -5.647024631500244
    5. '  
' → logprob: -5.772024631500244
    6. '<|end|>' → logprob: -5.897024631500244
    7. '    
' → logprob: -6.147024631500244
    8. ' ' → logprob: -7.522024631500244
    9. '<|end|>' → logprob: -8.397024154663086
    10. '   
' → logprob: -8.772024154663086

Token 156: ' n' (ID: 297)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.2107967883348465
    2. ' x' → logprob: -1.71079683303833
    3. ' y' → logprob: -5.58579683303833
    4. 'y' → logprob: -5.96079683303833
    5. '   ' → logprob: -6.21079683303833
    6. 'd' → logprob: -8.335796356201172
    7. 'n' (adapté à ' n') → logprob: -8.960796356201172
    8. ' ' → logprob: -9.210796356201172
    9. '	x' → logprob: -9.335796356201172
    10. ' d' → logprob: -9.585796356201172

Token 157: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.526089608669281
    2. ' =' → logprob: -0.901089608669281
    3. 'um' → logprob: -6.901089668273926
    4. 'o' → logprob: -7.526089668273926
    5. 'x' → logprob: -7.651089668273926
    6. 'u' → logprob: -8.276089668273926
    7. '_' → logprob: -8.401089668273926
    8. '   ' → logprob: -8.776089668273926
    9. ' ' → logprob: -9.901089668273926
    10. 'ext' → logprob: -10.026089668273926

Token 158: ' decrement' (ID: 121877)
  Prédit: ' decrement'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' decrement' → logprob: -0.47453925013542175
    2. 'de' → logprob: -0.9745392799377441
    3. 'x' → logprob: -8.599538803100586
    4. ' decre' → logprob: -9.349538803100586
    5. '	de' → logprob: -9.849538803100586
    6. ' x' → logprob: -10.099538803100586
    7. ' ' → logprob: -10.349538803100586
    8. ' de' → logprob: -10.599538803100586
    9. '
' → logprob: -11.474538803100586
    10. '   ' → logprob: -12.724538803100586

Token 159: '_by' (ID: 8214)
  Prédit: '_by'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_by' → logprob: -4.723352049040841e-06
    2. '_' → logprob: -12.750004768371582
    3. '_to' → logprob: -15.000004768371582
    4. '_BY' → logprob: -15.500004768371582
    5. '_of' → logprob: -15.625004768371582
    6. ' _' → logprob: -15.750004768371582
    7. '_x' → logprob: -16.000003814697266
    8. 'by' → logprob: -16.250003814697266
    9. 'x' → logprob: -16.250003814697266
    10. '(x' → logprob: -16.750003814697266

Token 160: '_one' (ID: 26979)
  Prédit: '_one'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_one' → logprob: -0.007736292202025652
    2. 'one' → logprob: -4.8827362060546875
    3. '1' → logprob: -9.382736206054688
    4. ' one' → logprob: -10.257736206054688
    5. '_' → logprob: -12.257736206054688
    6. '_ONE' → logprob: -13.507736206054688
    7. 'o' → logprob: -13.632736206054688
    8. 'One' → logprob: -13.632736206054688
    9. '_on' → logprob: -14.507736206054688
    10. 'x' → logprob: -14.632736206054688

Token 161: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.003190905088558793
    2. '(' → logprob: -5.753190994262695
    3. ' (' → logprob: -11.378190994262695
    4. '(n' → logprob: -13.878190994262695
    5. '(
' → logprob: -14.628190994262695
    6. '(s' → logprob: -16.128190994262695
    7. '((' → logprob: -16.878190994262695
    8. 'x' → logprob: -17.378190994262695
    9. '(y' → logprob: -17.878190994262695
    10. '()' → logprob: -18.128190994262695

Token 162: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0011752246646210551
    2. ')
' → logprob: -6.751175403594971
    3. ')

' → logprob: -12.876174926757812
    4. ' )' → logprob: -13.751174926757812
    5. '   ' → logprob: -15.251174926757812
    6. '))' → logprob: -15.376174926757812
    7. ')
' → logprob: -15.501174926757812
    8. ' ' → logprob: -15.751174926757812
    9. ')`' → logprob: -15.876174926757812
    10. ')n' → logprob: -16.376174926757812

Token 163: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007312234491109848
    2. '
' → logprob: -6.132312297821045
    3. '    
' → logprob: -6.382312297821045
    4. 'A' → logprob: -7.757312297821045
    5. 'result' → logprob: -7.757312297821045
    6. ' ' → logprob: -8.007311820983887
    7. '  ' → logprob: -8.257311820983887
    8. '  
' → logprob: -8.257311820983887
    9. ' y' → logprob: -8.382311820983887
    10. 's' → logprob: -8.507311820983887

Token 164: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' (adapté à ' A') → logprob: -0.1267491579055786
    2. '   ' → logprob: -3.001749038696289
    3. ' A' → logprob: -3.376749038696289
    4. 's' → logprob: -3.876749038696289
    5. 'S' → logprob: -5.626749038696289
    6. ' s' → logprob: -6.251749038696289
    7. 'result' → logprob: -6.251749038696289
    8. 'sum' → logprob: -6.251749038696289
    9. 'total' → logprob: -6.751749038696289
    10. 'ans' → logprob: -7.001749038696289

Token 165: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0619698166847229
    2. '=' → logprob: -2.811969757080078
    3. ' ' → logprob: -13.311969757080078
    4. ',' → logprob: -15.811969757080078
    5. '  ' → logprob: -16.311969757080078
    6. '_' → logprob: -16.436969757080078
    7. '=int' → logprob: -17.186969757080078
    8. ' =
' → logprob: -17.186969757080078
    9. ' ' → logprob: -17.186969757080078
    10. '<|end|>' → logprob: -17.811969757080078

Token 166: ' compute' (ID: 23864)
  Prédit: 'compute'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'compute' → logprob: -0.0017350364942103624
    2. ' compute' → logprob: -6.376735210418701
    3. '
' → logprob: -10.626734733581543
    4. '   ' → logprob: -12.501734733581543
    5. 'n' → logprob: -13.251734733581543
    6. 'computer' → logprob: -14.126734733581543
    7. 'com' → logprob: -14.376734733581543
    8. 'calculate' → logprob: -14.501734733581543
    9. '=' → logprob: -14.751734733581543
    10. '.compute' → logprob: -15.626734733581543

Token 167: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -1.1472419600977446e-06
    2. 'sum' → logprob: -14.500000953674316
    3. '_result' → logprob: -15.625000953674316
    4. '_s' → logprob: -15.875000953674316
    5. '_compute' → logprob: -15.875000953674316
    6. '_' → logprob: -17.375001907348633
    7. '_SUM' → logprob: -19.375001907348633
    8. 'Sum' → logprob: -19.375001907348633
    9. '_total' → logprob: -19.500001907348633
    10. '```' → logprob: -19.500001907348633

Token 168: '_of' (ID: 8023)
  Prédit: '_of'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_of' → logprob: -1.1472419600977446e-06
    2. '_o' → logprob: -14.125000953674316
    3. '_' → logprob: -15.250000953674316
    4. ' _' → logprob: -16.000001907348633
    5. 'of' → logprob: -18.125001907348633
    6. '_off' → logprob: -18.125001907348633
    7. '__' → logprob: -18.875001907348633
    8. '```' → logprob: -19.250001907348633
    9. ' of' → logprob: -19.375001907348633
    10. '_first' → logprob: -19.500001907348633

Token 169: '_first' (ID: 29347)
  Prédit: '_first'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_first' → logprob: -0.000591278774663806
    2. 'irst' → logprob: -7.500591278076172
    3. 'first' → logprob: -10.250591278076172
    4. '_f' → logprob: -14.250591278076172
    5. '_last' → logprob: -14.250591278076172
    6. 'rst' → logprob: -15.125591278076172
    7. '(first' → logprob: -15.500591278076172
    8. '_n' → logprob: -15.500591278076172
    9. ' first' → logprob: -15.875591278076172
    10. 'First' → logprob: -16.000591278076172

Token 170: '_n' (ID: 2170)
  Prédit: '_n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: -0.003639511065557599
    2. '_' → logprob: -5.6286396980285645
    3. '(n' → logprob: -10.753639221191406
    4. '_(' → logprob: -11.628639221191406
    5. 'n' → logprob: -12.628639221191406
    6. '(' → logprob: -12.628639221191406
    7. '_x' → logprob: -14.503639221191406
    8. '(_' → logprob: -14.878639221191406
    9. '```' → logprob: -15.253639221191406
    10. ')(_' → logprob: -15.753639221191406

Token 171: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.17758439481258392
    2. '(' → logprob: -2.052584409713745
    3. '(x' → logprob: -3.427584409713745
    4. ' (' → logprob: -7.052584171295166
    5. '<|end|>' → logprob: -7.052584171295166
    6. '(
' → logprob: -10.302584648132324
    7. '((' → logprob: -10.677584648132324
    8. ' ' → logprob: -11.677584648132324
    9. 'n' → logprob: -11.802584648132324
    10. ')' → logprob: -12.052584648132324

Token 172: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00013953536108601838
    2. ')
' → logprob: -9.000139236450195
    3. ')

' → logprob: -12.375139236450195
    4. ' )' → logprob: -13.125139236450195
    5. '   ' → logprob: -13.500139236450195
    6. '))' → logprob: -14.000139236450195
    7. ')`' → logprob: -14.000139236450195
    8. 'a' → logprob: -14.250139236450195
    9. ')n' → logprob: -14.250139236450195
    10. '(n' → logprob: -14.375139236450195

Token 173: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1632571816444397
    2. 'a' → logprob: -2.663257122039795
    3. 'ans' → logprob: -2.788257122039795
    4. ' ' → logprob: -5.788257122039795
    5. '  ' → logprob: -6.163257122039795
    6. ' ans' → logprob: -6.413257122039795
    7. '	ans' → logprob: -6.538257122039795
    8. ' a' → logprob: -6.663257122039795
    9. 'r' → logprob: -6.788257122039795
    10. '```' → logprob: -6.913257122039795

Token 174: ' ans' (ID: 3345)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.001548664178699255
    2. 'ans' (adapté à ' ans') → logprob: -7.126548767089844
    3. 'result' → logprob: -8.376548767089844
    4. ' a' → logprob: -8.376548767089844
    5. 'x' → logprob: -8.626548767089844
    6. 'print' → logprob: -10.376548767089844
    7. '   ' → logprob: -11.251548767089844
    8. 'b' → logprob: -11.376548767089844
    9. 'answer' → logprob: -11.876548767089844
    10. 's' → logprob: -12.251548767089844

Token 175: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1128304973244667
    2. '=' → logprob: -2.237830400466919
    3. '_' → logprob: -12.48783016204834
    4. '  ' → logprob: -13.48783016204834
    5. ')' → logprob: -14.23783016204834
    6. ' ' → logprob: -14.36283016204834
    7. ',' → logprob: -14.61283016204834
    8. ':' → logprob: -14.73783016204834
    9. ' =
' → logprob: -15.23783016204834
    10. ' =)' → logprob: -15.86283016204834

Token 176: ' compute' (ID: 23864)
  Prédit: 'compute'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'compute' → logprob: -0.31327328085899353
    2. ' compute' → logprob: -1.313273310661316
    3. '   ' → logprob: -12.063273429870605
    4. '_compute' → logprob: -13.063273429870605
    5. 'calculate' → logprob: -13.188273429870605
    6. ' ' → logprob: -14.063273429870605
    7. '.compute' → logprob: -14.688273429870605
    8. '  ' → logprob: -15.188273429870605
    9. ' calculate' → logprob: -15.813273429870605
    10. 'computer' → logprob: -17.06327247619629

Token 177: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -5.796184723294573e-06
    2. '_sum' → logprob: -12.125005722045898
    3. '_res' → logprob: -15.375005722045898
    4. '_' → logprob: -17.5000057220459
    5. ' _' → logprob: -17.5000057220459
    6. '_value' → logprob: -18.1250057220459
    7. '__' → logprob: -18.3750057220459
    8. '_s' → logprob: -18.5000057220459
    9. 'result' → logprob: -18.7500057220459
    10. '_results' → logprob: -19.0000057220459

Token 178: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.011087790131568909
    2. '(' → logprob: -4.511087894439697
    3. ' (' → logprob: -10.636087417602539
    4. '(
' → logprob: -11.511087417602539
    5. '_(' → logprob: -14.261087417602539
    6. '('' → logprob: -14.386087417602539
    7. '\(' → logprob: -14.511087417602539
    8. '(a' → logprob: -14.636087417602539
    9. '((' → logprob: -14.761087417602539
    10. '(_' → logprob: -14.886087417602539

Token 179: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0005383780226111412
    2. ',a' → logprob: -7.875538349151611
    3. ' ,' → logprob: -8.87553882598877
    4. 'a' → logprob: -12.50053882598877
    5. ',n' → logprob: -12.75053882598877
    6. ',x' → logprob: -13.12553882598877
    7. ',b' → logprob: -13.25053882598877
    8. ')' → logprob: -13.37553882598877
    9. '(a' → logprob: -13.37553882598877
    10. ',
' → logprob: -13.37553882598877

Token 180: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.19869612157344818
    2. 'n' → logprob: -2.6986961364746094
    3. 'compute' → logprob: -2.8236961364746094
    4. 'x' → logprob: -3.5736961364746094
    5. ' a' → logprob: -4.323696136474609
    6. ' compute' → logprob: -5.448696136474609
    7. 'b' → logprob: -5.573696136474609
    8. ' n' → logprob: -6.448696136474609
    9. ' x' → logprob: -6.948696136474609
    10. 'calculate' → logprob: -7.698696136474609

Token 181: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.000877039332408458
    2. ')
' → logprob: -7.1258769035339355
    3. ' )' → logprob: -9.875877380371094
    4. ')

' → logprob: -12.000877380371094
    5. '+' → logprob: -12.250877380371094
    6. ')
' → logprob: -12.750877380371094
    7. ' +' → logprob: -13.250877380371094
    8. '[' → logprob: -14.000877380371094
    9. '-' → logprob: -14.125877380371094
    10. '*' → logprob: -14.375877380371094

Token 182: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0010141143575310707
    2. 'print' → logprob: -7.501014232635498
    3. '    
' → logprob: -8.62601375579834
    4. '
' → logprob: -9.00101375579834
    5. ')' → logprob: -9.37601375579834
    6. '```' → logprob: -11.25101375579834
    7. '_' → logprob: -11.62601375579834
    8. ' print' → logprob: -11.62601375579834
    9. '[' → logprob: -12.12601375579834
    10. '(' → logprob: -12.25101375579834

Token 183: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.00047392549458891153
    2. '   ' → logprob: -7.750473976135254
    3. ' print' → logprob: -10.500473976135254
    4. '
' → logprob: -11.250473976135254
    5. '	print' → logprob: -13.500473976135254
    6. '    
' → logprob: -14.500473976135254
    7. '(print' → logprob: -14.875473976135254
    8. '.print' → logprob: -15.750473976135254
    9. '_print' → logprob: -16.125473022460938
    10. ' ' → logprob: -16.500473022460938

Token 184: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -2.2200749754119897e-06
    2. '_' → logprob: -13.500001907348633
    3. '_res' → logprob: -14.875001907348633
    4. '_results' → logprob: -15.875001907348633
    5. '(' → logprob: -16.250001907348633
    6. '(_' → logprob: -16.500001907348633
    7. 'result' → logprob: -16.875001907348633
    8. '_r' → logprob: -16.875001907348633
    9. ' _' → logprob: -17.500001907348633
    10. 's' → logprob: -17.750001907348633

Token 185: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -0.2016763538122177
    2. '(' → logprob: -1.701676368713379
    3. ' (' → logprob: -9.076676368713379
    4. '("("' → logprob: -10.076676368713379
    5. '(
' → logprob: -10.951676368713379
    6. '('' → logprob: -11.201676368713379
    7. '(answer' → logprob: -11.326676368713379
    8. '((' → logprob: -11.701676368713379
    9. '(`' → logprob: -11.826676368713379
    10. '()' → logprob: -11.826676368713379

Token 186: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0921942703134846e-05
    2. ')
' → logprob: -11.50001049041748
    3. '))' → logprob: -15.62501049041748
    4. '()' → logprob: -15.62501049041748
    5. ' )' → logprob: -15.75001049041748
    6. ')`' → logprob: -16.000011444091797
    7. '())' → logprob: -16.375011444091797
    8. ')

' → logprob: -17.125011444091797
    9. '`)' → logprob: -17.875011444091797
    10. '(' → logprob: -18.000011444091797

Token 187: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.1164356991648674
    2. '
' → logprob: -2.7414357662200928
    3. 'main' → logprob: -3.2414357662200928
    4. '_' → logprob: -5.616435527801514
    5. '\n' → logprob: -6.491435527801514
    6. '\' → logprob: -8.116436004638672
    7. '(main' → logprob: -8.366436004638672
    8. '#' → logprob: -9.241436004638672
    9. '_main' → logprob: -9.241436004638672
    10. '_
' → logprob: -9.241436004638672

Token 188: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.001977764768525958
    2. '(' → logprob: -6.626977920532227
    3. '()
' → logprob: -7.376977920532227
    4. '(
' → logprob: -11.501977920532227
    5. ' ()' → logprob: -13.001977920532227
    6. '()

' → logprob: -13.126977920532227
    7. '()\' → logprob: -13.251977920532227
    8. '()`' → logprob: -13.376977920532227
    9. '```' → logprob: -13.376977920532227
    10. '();' → logprob: -13.501977920532227


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 186
Tokens correctement prédits (1ère position, stricte): 88
Tokens correctement prédits (1ère position, avec adaptation): 94
Tokens correctement prédits (top 10): 158
Précision stricte (1ère position): 47.31%
Précision adaptée (1ère position): 50.54%
Précision (top 10): 84.95%
================================================================================
