================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 16:48:50
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
Hauteur = list()
_ = 0
exec("while _<10:\n Hauteur+=[input()];_+=1")
Hauteur.sort(key=lambda x: -float(x))
print('\n'.join(map(str, (Hauteur[i] for i in (0,1,2)))))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'Ha' (ID: 27330)
  → Token d'amorce (pas de prédiction)

Token 1: 'uteur' (ID: 25666)
  → Token d'amorce (pas de prédiction)

Token 2: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 3: ' list' (ID: 1562)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.17442499101161957
    2. '10' → logprob: -2.674424886703491
    3. 'float' → logprob: -3.424424886703491
    4. '5' → logprob: -3.549424886703491
    5. '1' → logprob: -5.29942512512207
    6. '3' → logprob: -5.29942512512207
    7. '100' → logprob: -5.79942512512207
    8. '2' → logprob: -6.04942512512207
    9. 'int' → logprob: -6.17442512512207
    10. '```' → logprob: -6.54942512512207

Token 4: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0796290710568428
    2. '(' → logprob: -2.7046291828155518
    3. '=' → logprob: -5.079628944396973
    4. '[]' → logprob: -6.079628944396973
    5. '[' → logprob: -8.579628944396973
    6. ' =' → logprob: -8.704628944396973
    7. '([]' → logprob: -8.704628944396973
    8. '=[]' → logprob: -8.704628944396973
    9. '.append' → logprob: -8.829628944396973
    10. '```' → logprob: -9.204628944396973

Token 5: '_' (ID: 62)
  Prédit: 'Ha'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Ha' → logprob: -0.023179898038506508
    2. '=' → logprob: -4.14818000793457
    3. '.append' → logprob: -5.77318000793457
    4. '[]' → logprob: -6.52318000793457
    5. '.' → logprob: -7.02318000793457
    6. 'H' → logprob: -7.64818000793457
    7. 'append' → logprob: -8.02318000793457
    8. '()' → logprob: -8.14818000793457
    9. 'ha' → logprob: -8.52318000793457
    10. '(' → logprob: -9.27318000793457

Token 6: ' =' (ID: 314)
  Prédit: 'Ha'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Ha' → logprob: -0.009597408585250378
    2. 'append' → logprob: -5.384597301483154
    3. '.append' → logprob: -5.759597301483154
    4. 'for' → logprob: -6.634597301483154
    5. '=' → logprob: -9.134597778320312
    6. 'ha' → logprob: -9.259597778320312
    7. 'H' → logprob: -9.384597778320312
    8. '#' → logprob: -9.384597778320312
    9. '.' → logprob: -10.259597778320312
    10. 'def' → logprob: -10.884597778320312

Token 7: ' ' (ID: 220)
  Prédit: 'Ha'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Ha' → logprob: -0.8620346784591675
    2. 'input' → logprob: -1.1120346784591675
    3. '[]' → logprob: -1.9870346784591675
    4. 'range' → logprob: -2.987034797668457
    5. '[' → logprob: -3.362034797668457
    6. 'list' → logprob: -4.612034797668457
    7. '0' → logprob: -5.237034797668457
    8. 'append' → logprob: -6.237034797668457
    9. '"' → logprob: -6.362034797668457
    10. 'int' → logprob: -7.237034797668457

Token 8: '0' (ID: 15)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.30675435066223145
    2. 'Ha' → logprob: -2.0567543506622314
    3. '[' → logprob: -2.8067543506622314
    4. '[]' → logprob: -2.9317543506622314
    5. '0' → logprob: -5.181754112243652
    6. 'list' → logprob: -5.431754112243652
    7. 'range' → logprob: -5.556754112243652
    8. 'append' → logprob: -6.181754112243652
    9. 'ha' → logprob: -6.681754112243652
    10. 'float' → logprob: -6.681754112243652

Token 9: '
' (ID: 198)
  Prédit: 'Ha'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Ha' → logprob: -0.011130349710583687
    2. 'for' → logprob: -5.386130332946777
    3. 'while' → logprob: -5.761130332946777
    4. 'H' → logprob: -6.011130332946777
    5. '_' → logprob: -8.261130332946777
    6. 'ha' → logprob: -8.761130332946777
    7. 'Height' → logprob: -9.011130332946777
    8. '#' → logprob: -9.636130332946777
    9. 'He' → logprob: -10.136130332946777
    10. 'height' → logprob: -10.136130332946777

Token 10: 'exec' (ID: 31592)
  Prédit: 'Ha'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Ha' → logprob: -0.034342579543590546
    2. 'while' → logprob: -3.7843425273895264
    3. 'for' → logprob: -4.6593427658081055
    4. 'H' → logprob: -7.1593427658081055
    5. '_' → logprob: -7.7843427658081055
    6. '#' → logprob: -9.534342765808105
    7. 'Height' → logprob: -9.659342765808105
    8. 'He' → logprob: -9.784342765808105
    9. 'ha' → logprob: -10.534342765808105
    10. '_H' → logprob: -10.659342765808105

Token 11: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.44009271264076233
    2. '(' → logprob: -1.69009268283844
    3. '('' → logprob: -2.1900928020477295
    4. '("")' → logprob: -3.4400928020477295
    5. '()' → logprob: -4.69009256362915
    6. '("("' → logprob: -5.44009256362915
    7. '("""' → logprob: -5.56509256362915
    8. 'ution' → logprob: -6.31509256362915
    9. '("__' → logprob: -6.94009256362915
    10. 'tion' → logprob: -7.19009256362915

Token 12: 'while' (ID: 7032)
  Prédit: 'Ha'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Ha' → logprob: -0.16384154558181763
    2. 'pass' → logprob: -2.288841485977173
    3. 'print' → logprob: -3.163841485977173
    4. 'H' → logprob: -6.788841724395752
    5. 'height' → logprob: -6.788841724395752
    6. '"' → logprob: -7.038841724395752
    7. ''' → logprob: -7.413841724395752
    8. 'for' → logprob: -7.413841724395752
    9. 'x' → logprob: -7.663841724395752
    10. 'import' → logprob: -8.413841247558594

Token 13: ' _' (ID: 1175)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.006830932572484016
    2. '(True' → logprob: -5.506831169128418
    3. ' True' → logprob: -7.381831169128418
    4. '(' → logprob: -7.381831169128418
    5. '1' → logprob: -7.506831169128418
    6. '_' → logprob: -7.881831169128418
    7. '"' → logprob: -9.131831169128418
    8. 'while' → logprob: -9.381831169128418
    9. 'False' → logprob: -10.256831169128418
    10. '0' → logprob: -10.256831169128418

Token 14: '<' (ID: 27)
  Prédit: '<'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<' → logprob: -5.080963092041202e-06
    2. ' <' → logprob: -14.000004768371582
    3. '<len' → logprob: -14.000004768371582
    4. '<=' → logprob: -14.125004768371582
    5. '<n' → logprob: -14.500004768371582
    6. '<a' → logprob: -14.750004768371582
    7. '<int' → logprob: -15.625004768371582
    8. '"<' → logprob: -15.625004768371582
    9. '<input' → logprob: -16.2500057220459
    10. 'in' → logprob: -16.3750057220459

Token 15: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.02170313522219658
    2. '100' → logprob: -4.021703243255615
    3. '5' → logprob: -5.896703243255615
    4. '50' → logprob: -8.021702766418457
    5. '20' → logprob: -8.146702766418457
    6. '1' → logprob: -10.396702766418457
    7. '3' → logprob: -10.646702766418457
    8. 'Ha' → logprob: -10.771702766418457
    9. '15' → logprob: -11.021702766418457
    10. '30' → logprob: -11.271702766418457

Token 16: ':\' (ID: 16008)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.05668479949235916
    2. ':\' → logprob: -2.931684732437134
    3. '):' → logprob: -7.431684970855713
    4. ':"' → logprob: -8.056684494018555
    5. '":' → logprob: -8.431684494018555
    6. ':`' → logprob: -8.556684494018555
    7. ':")
' → logprob: -8.806684494018555
    8. ':_' → logprob: -9.556684494018555
    9. 'print' → logprob: -9.681684494018555
    10. ':",' → logprob: -9.806684494018555

Token 17: 'n' (ID: 77)
  Prédit: 'Ha'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Ha' → logprob: -0.2357158064842224
    2. 'n' → logprob: -1.8607158660888672
    3. '   ' → logprob: -3.235715866088867
    4. '_' → logprob: -4.610715866088867
    5. 'H' → logprob: -6.610715866088867
    6. 't' → logprob: -6.610715866088867
    7. '\' → logprob: -7.360715866088867
    8. 'print' → logprob: -7.735715866088867
    9. '_H' → logprob: -8.485715866088867
    10. ' ' → logprob: -8.610715866088867

Token 18: ' Ha' (ID: 10694)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.051435161381959915
    2. ' Ha' → logprob: -3.1764352321624756
    3. ' ' → logprob: -5.4264349937438965
    4. 'Ha' → logprob: -5.6764349937438965
    5. '\t' → logprob: -8.051435470581055
    6. '  ' → logprob: -8.676435470581055
    7. '\' → logprob: -9.926435470581055
    8. ' Haut' → logprob: -10.926435470581055
    9. '_' → logprob: -12.176435470581055
    10. ' ' → logprob: -12.551435470581055

Token 19: 'uteur' (ID: 25666)
  Prédit: 'uteur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'uteur' → logprob: -0.0006491714157164097
    2. 'ueur' → logprob: -8.375649452209473
    3. 'iteur' → logprob: -9.250649452209473
    4. 'uteurs' → logprob: -9.250649452209473
    5. 'ulte' → logprob: -9.250649452209473
    6. 'teur' → logprob: -9.750649452209473
    7. 'ute' → logprob: -10.125649452209473
    8. 'u' → logprob: -12.125649452209473
    9. 'e' → logprob: -12.250649452209473
    10. 'onneur' → logprob: -12.875649452209473

Token 20: '+' (ID: 10)
  Prédit: '.append'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.append' → logprob: -8.101369894575328e-05
    2. 'append' → logprob: -10.000081062316895
    3. '.ap' → logprob: -11.125081062316895
    4. '.' → logprob: -11.125081062316895
    5. '.app' → logprob: -12.250081062316895
    6. '.a' → logprob: -14.000081062316895
    7. '.Append' → logprob: -15.375081062316895
    8. '.add' → logprob: -16.125080108642578
    9. '.push' → logprob: -16.500080108642578
    10. 'Append' → logprob: -16.750080108642578

Token 21: '=[' (ID: 13370)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.004431067034602165
    2. 't' → logprob: -5.754431247711182
    3. '=t' → logprob: -7.504431247711182
    4. '=.' → logprob: -7.754431247711182
    5. '=list' → logprob: -9.254430770874023
    6. '=[' → logprob: -9.504430770874023
    7. '=a' → logprob: -10.504430770874023
    8. '+=' → logprob: -10.504430770874023
    9. '.append' → logprob: -11.629430770874023
    10. ' =' → logprob: -11.879430770874023

Token 22: 'input' (ID: 2586)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.431887149810791
    2. '1' → logprob: -1.181887149810791
    3. 'i' → logprob: -3.431887149810791
    4. '0' → logprob: -5.681887149810791
    5. 'random' → logprob: -5.931887149810791
    6. 'x' → logprob: -6.056887149810791
    7. '_i' → logprob: -6.431887149810791
    8. '_]' → logprob: -8.056886672973633
    9. '_H' → logprob: -8.556886672973633
    10. '2' → logprob: -9.056886672973633

Token 23: '()' (ID: 416)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.7576121687889099
    2. '()' → logprob: -0.8826121687889099
    3. '().' → logprob: -2.2576122283935547
    4. '()].' → logprob: -5.132612228393555
    5. '()`' → logprob: -6.507612228393555
    6. '())' → logprob: -6.507612228393555
    7. ']()' → logprob: -6.882612228393555
    8. '()\' → logprob: -7.382612228393555
    9. '("' → logprob: -7.507612228393555
    10. '()])
' → logprob: -7.757612228393555

Token 24: '];' (ID: 11464)
  Prédit: ')")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')")' → logprob: -0.9280761480331421
    2. ')' → logprob: -1.303076148033142
    3. '])' → logprob: -1.803076148033142
    4. ']' → logprob: -3.0530762672424316
    5. '.strip' → logprob: -3.6780762672424316
    6. '")' → logprob: -3.9280762672424316
    7. '}")' → logprob: -3.9280762672424316
    8. ')\' → logprob: -4.053076267242432
    9. ')]' → logprob: -4.178076267242432
    10. ']\' → logprob: -4.928076267242432

Token 25: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.19765126705169678
    2. 'print' → logprob: -2.5726513862609863
    3. '")' → logprob: -3.4476513862609863
    4. '}")' → logprob: -3.6976513862609863
    5. 'Ha' → logprob: -4.322651386260986
    6. '\' → logprob: -4.322651386260986
    7. '\n' → logprob: -5.197651386260986
    8. 'exec' → logprob: -5.947651386260986
    9. 'pass' → logprob: -6.072651386260986
    10. '"' → logprob: -6.197651386260986

Token 26: '+=' (ID: 18287)
  Prédit: '+='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.004309884272515774
    2. '+' → logprob: -5.50430965423584
    3. '=' → logprob: -8.50430965423584
    4. ' +=' → logprob: -11.12930965423584
    5. '=_' → logprob: -11.50430965423584
    6. '++' → logprob: -12.75430965423584
    7. '+="' → logprob: -14.12930965423584
    8. '_' → logprob: -15.50430965423584
    9. ' +' → logprob: -17.004310607910156
    10. '+='' → logprob: -17.129310607910156

Token 27: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: 0.0
    2. ' ' → logprob: -16.75
    3. '_' → logprob: -17.5
    4. '0' → logprob: -18.125
    5. '１' → logprob: -18.5
    6. '2' → logprob: -18.875
    7. '10' → logprob: -19.625
    8. '+' → logprob: -19.875
    9. 'int' → logprob: -20.625
    10. '01' → logprob: -21.875

Token 28: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -0.012597007676959038
    2. '}")' → logprob: -4.88759708404541
    3. 'print' → logprob: -6.76259708404541
    4. '\n' → logprob: -7.01259708404541
    5. 'exec' → logprob: -7.01259708404541
    6. '"' → logprob: -7.26259708404541
    7. 'Ha' → logprob: -7.76259708404541
    8. '\' → logprob: -9.01259708404541
    9. '");' → logprob: -9.13759708404541
    10. '\")' → logprob: -9.51259708404541

Token 29: 'Ha' (ID: 27330)
  Prédit: 'Ha'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Ha' → logprob: -0.11653140932321548
    2. '<|end|>' → logprob: -3.7415313720703125
    3. 'print' → logprob: -3.8665313720703125
    4. 'exec' → logprob: -4.2415313720703125
    5. '```' → logprob: -4.3665313720703125
    6. ')' → logprob: -4.7415313720703125
    7. '#' → logprob: -5.6165313720703125
    8. '"' → logprob: -5.7415313720703125
    9. '_' → logprob: -6.1165313720703125
    10. ' Ha' → logprob: -6.1165313720703125

Token 30: 'uteur' (ID: 25666)
  Prédit: 'uteur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'uteur' → logprob: -0.008589752949774265
    2. 'teur' → logprob: -4.883589744567871
    3. 'iteur' → logprob: -7.633589744567871
    4. 'uteurs' → logprob: -8.383589744567871
    5. 'eur' → logprob: -9.883589744567871
    6. 'te' → logprob: -10.008589744567871
    7. 'ute' → logprob: -10.008589744567871
    8. 'e' → logprob: -10.383589744567871
    9. 'teurs' → logprob: -10.383589744567871
    10. 'ueur' → logprob: -10.758589744567871

Token 31: '.sort' (ID: 19551)
  Prédit: 'Ha'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Ha' → logprob: -0.012179958634078503
    2. '[]' → logprob: -5.137179851531982
    3. '<|end|>' → logprob: -6.012179851531982
    4. '[' → logprob: -6.637179851531982
    5. '['' → logprob: -6.762179851531982
    6. 'print' → logprob: -7.762179851531982
    7. '```' → logprob: -8.01218032836914
    8. '[['' → logprob: -8.88718032836914
    9. ' Ha' → logprob: -9.51218032836914
    10. '[:]' → logprob: -9.76218032836914

Token 32: '(key' (ID: 8932)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -1.1994775377388578e-05
    2. '(' → logprob: -11.750012397766113
    3. '()`' → logprob: -12.625012397766113
    4. '().' → logprob: -15.250012397766113
    5. '()"' → logprob: -16.250011444091797
    6. '(_)' → logprob: -16.875011444091797
    7. '()
' → logprob: -17.000011444091797
    8. '()*' → logprob: -17.125011444091797
    9. '(...)' → logprob: -17.125011444091797
    10. '())' → logprob: -17.250011444091797

Token 33: '=lambda' (ID: 64865)
  Prédit: '=lambda'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=lambda' → logprob: -0.12910225987434387
    2. '=' → logprob: -2.1291022300720215
    3. '=len' → logprob: -7.3791022300720215
    4. '=_' → logprob: -7.3791022300720215
    5. '=int' → logprob: -7.7541022300720215
    6. '=list' → logprob: -9.00410270690918
    7. '=str' → logprob: -9.25410270690918
    8. '=float' → logprob: -10.12910270690918
    9. '=item' → logprob: -10.12910270690918
    10. '=`' → logprob: -10.50410270690918

Token 34: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.554411768913269
    2. ':' → logprob: -0.929411768913269
    3. ':int' → logprob: -3.8044118881225586
    4. 'len' → logprob: -5.304411888122559
    5. ':x' → logprob: -6.304411888122559
    6. 'int' → logprob: -7.429411888122559
    7. 'float' → logprob: -7.804411888122559
    8. ':str' → logprob: -8.054411888122559
    9. ':list' → logprob: -8.429411888122559
    10. 'lambda' → logprob: -10.429411888122559

Token 35: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0004236435634084046
    2. ':int' → logprob: -8.125423431396484
    3. ':x' → logprob: -9.250423431396484
    4. ':key' → logprob: -11.000423431396484
    5. ':str' → logprob: -12.250423431396484
    6. ':n' → logprob: -13.375423431396484
    7. ':list' → logprob: -13.375423431396484
    8. ':length' → logprob: -14.250423431396484
    9. ':`' → logprob: -14.375423431396484
    10. ':item' → logprob: -14.375423431396484

Token 36: ' -' (ID: 533)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.379082053899765
    2. 'float' → logprob: -1.8790820837020874
    3. 'len' → logprob: -2.129081964492798
    4. 'x' → logprob: -3.129081964492798
    5. '(int' → logprob: -10.379081726074219
    6. '(x' → logprob: -11.254081726074219
    7. ' int' → logprob: -11.504081726074219
    8. '(float' → logprob: -11.754081726074219
    9. '(len' → logprob: -12.254081726074219
    10. 'str' → logprob: -13.129081726074219

Token 37: 'float' (ID: 7829)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.7793578505516052
    2. 'float' → logprob: -0.9043578505516052
    3. 'len' → logprob: -2.27935791015625
    4. 'x' → logprob: -3.40435791015625
    5. '1' → logprob: -7.65435791015625
    6. 'ord' → logprob: -7.77935791015625
    7. 'abs' → logprob: -11.77935791015625
    8. '(x' → logprob: -12.65435791015625
    9. ' int' → logprob: -13.40435791015625
    10. '(len' → logprob: -13.40435791015625

Token 38: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -1.981667537620524e-06
    2. '(float' → logprob: -13.375001907348633
    3. '(' → logprob: -15.625001907348633
    4. '(eval' → logprob: -15.750001907348633
    5. '(a' → logprob: -17.625001907348633
    6. '(input' → logprob: -18.125001907348633
    7. '(int' → logprob: -19.250001907348633
    8. '(z' → logprob: -19.750001907348633
    9. '(X' → logprob: -19.750001907348633
    10. '(y' → logprob: -20.000001907348633

Token 39: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0018860420677810907
    2. ')' → logprob: -7.376885890960693
    3. '.strip' → logprob: -7.501885890960693
    4. '"))' → logprob: -8.001886367797852
    5. ''))' → logprob: -9.501886367797852
    6. '))
' → logprob: -9.501886367797852
    7. '),' → logprob: -9.501886367797852
    8. ')))' → logprob: -10.376886367797852
    9. '.rstrip' → logprob: -11.001886367797852
    10. '}))' → logprob: -11.126886367797852

Token 40: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.6432899832725525
    2. 'Ha' → logprob: -0.7682899832725525
    3. 'for' → logprob: -5.518290042877197
    4. 'exec' → logprob: -5.893290042877197
    5. '#' → logprob: -6.893290042877197
    6. ')' → logprob: -7.143290042877197
    7. '```' → logprob: -7.643290042877197
    8. '<|end|>' → logprob: -7.643290042877197
    9. 'sorted' → logprob: -8.143289566040039
    10. '_' → logprob: -8.268289566040039

Token 41: '('\' (ID: 24345)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.25782328844070435
    2. '(H' → logprob: -1.5078232288360596
    3. '("("' → logprob: -5.882823467254639
    4. '()' → logprob: -6.632823467254639
    5. '("' → logprob: -6.757823467254639
    6. '(...)' → logprob: -8.88282299041748
    7. '("(' → logprob: -9.38282299041748
    8. '()(' → logprob: -9.75782299041748
    9. '('' → logprob: -10.13282299041748
    10. '("")' → logprob: -10.25782299041748

Token 42: 'n' (ID: 77)
  Prédit: 'join'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'join' → logprob: -0.17899516224861145
    2. 'print' → logprob: -2.053995132446289
    3. '.join' → logprob: -3.553995132446289
    4. ''.' → logprob: -5.428995132446289
    5. 'Ha' → logprob: -7.553995132446289
    6. ''\' → logprob: -8.053995132446289
    7. '"\' → logprob: -8.303995132446289
    8. 'sorted' → logprob: -8.303995132446289
    9. '".' → logprob: -8.678995132446289
    10. 'sort' → logprob: -8.928995132446289

Token 43: ''.' (ID: 6120)
  Prédit: '.join'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.join' → logprob: -0.11525681614875793
    2. ''.' → logprob: -2.2402567863464355
    3. 'join' → logprob: -6.8652567863464355
    4. 'print' → logprob: -7.8652567863464355
    5. ')' → logprob: -8.365257263183594
    6. 'Ha' → logprob: -8.490257263183594
    7. '.print' → logprob: -8.490257263183594
    8. '".' → logprob: -9.240257263183594
    9. ').' → logprob: -9.365257263183594
    10. '.' → logprob: -9.990257263183594

Token 44: 'join' (ID: 10891)
  Prédit: 'join'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'join' → logprob: -4.320199877838604e-07
    2. '.join' → logprob: -15.75
    3. ' join' → logprob: -15.875
    4. 'strip' → logprob: -17.0
    5. 'format' → logprob: -18.0
    6. 'Join' → logprob: -18.25
    7. 'joining' → logprob: -18.5
    8. 'joins' → logprob: -18.625
    9. 'joined' → logprob: -18.75
    10. 'joint' → logprob: -18.875

Token 45: '(map' (ID: 16946)
  Prédit: '(H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(H' → logprob: -0.5100348591804504
    2. '(' → logprob: -1.2600347995758057
    3. '()' → logprob: -2.8850347995758057
    4. '())' → logprob: -3.1350347995758057
    5. '()(' → logprob: -4.510035037994385
    6. '('' → logprob: -6.760035037994385
    7. '(map' → logprob: -7.260035037994385
    8. '("' → logprob: -8.010034561157227
    9. '())
' → logprob: -8.260034561157227
    10. '(()' → logprob: -8.260034561157227

Token 46: '(str' (ID: 7946)
  Prédit: '(lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.14206141233444214
    2. '(' → logprob: -2.517061471939087
    3. '(print' → logprob: -3.517061471939087
    4. '(int' → logprob: -4.892061233520508
    5. '(map' → logprob: -5.392061233520508
    6. '(str' → logprob: -6.267061233520508
    7. '(sorted' → logprob: -6.642061233520508
    8. '(H' → logprob: -6.767061233520508
    9. '(float' → logprob: -7.017061233520508
    10. '(re' → logprob: -7.142061233520508

Token 47: ',' (ID: 11)
  Prédit: '(H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(H' → logprob: -0.07067480683326721
    2. '(' → logprob: -2.6956748962402344
    3. '(sorted' → logprob: -8.945674896240234
    4. '(map' → logprob: -9.445674896240234
    5. '(),' → logprob: -9.570674896240234
    6. '(-' → logprob: -10.195674896240234
    7. '(int' → logprob: -10.320674896240234
    8. '(...' → logprob: -10.820674896240234
    9. '(x' → logprob: -10.945674896240234
    10. '(list' → logprob: -10.945674896240234

Token 48: ' (' (ID: 350)
  Prédit: 'Ha'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Ha' → logprob: -1.9361264946837764e-07
    2. ' Ha' → logprob: -16.125
    3. 'sorted' → logprob: -19.875
    4. 'H' → logprob: -19.875
    5. 'He' → logprob: -20.25
    6. 'HA' → logprob: -21.5
    7. 'Ho' → logprob: -22.875
    8. 'Sorted' → logprob: -23.0
    9. 'Hal' → logprob: -23.125
    10. 'Hat' → logprob: -23.25

Token 49: 'Ha' (ID: 27330)
  Prédit: 'Ha'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Ha' → logprob: -7.896309739408025e-07
    2. ' Ha' → logprob: -14.500000953674316
    3. 'sorted' → logprob: -15.250000953674316
    4. 'He' → logprob: -18.125
    5. 'x' → logprob: -19.125
    6. 'H' → logprob: -19.375
    7. 'HA' → logprob: -19.75
    8. 'Sorted' → logprob: -19.875
    9. '*' → logprob: -20.5
    10. 'Ho' → logprob: -20.75

Token 50: 'uteur' (ID: 25666)
  Prédit: 'teur'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'teur' → logprob: -0.2313438057899475
    2. 'e' → logprob: -2.2313437461853027
    3. 'uteur' → logprob: -2.7313437461853027
    4. 'iteur' → logprob: -3.8563437461853027
    5. 'ateur' → logprob: -4.981343746185303
    6. 'te' → logprob: -6.231343746185303
    7. 'eur' → logprob: -6.231343746185303
    8. 'reur' → logprob: -7.481343746185303
    9. 'teurs' → logprob: -7.981343746185303
    10. 'deur' → logprob: -8.106344223022461

Token 51: '[i' (ID: 1768)
  Prédit: '))))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))))' → logprob: -0.018699876964092255
    2. ')))' → logprob: -4.018699645996094
    3. '))' → logprob: -8.518699645996094
    4. ')' → logprob: -8.643699645996094
    5. '[:' → logprob: -9.018699645996094
    6. '[:-' → logprob: -10.393699645996094
    7. '))))
' → logprob: -11.643699645996094
    8. '[' → logprob: -12.768699645996094
    9. '))))

' → logprob: -13.018699645996094
    10. '))),' → logprob: -13.143699645996094

Token 52: ']' (ID: 60)
  Prédit: '][:'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '][:' → logprob: -0.5432220697402954
    2. ']' → logprob: -1.0432220697402954
    3. '][' → logprob: -3.543221950531006
    4. ']))' → logprob: -3.668221950531006
    5. 'for' → logprob: -5.668221950531006
    6. '[:' → logprob: -6.043221950531006
    7. ')' → logprob: -6.543221950531006
    8. '])))' → logprob: -6.793221950531006
    9. '])' → logprob: -6.918221950531006
    10. '[' → logprob: -7.668221950531006

Token 53: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0006422612932510674
    2. ' for' → logprob: -7.3756422996521
    3. ')' → logprob: -11.250641822814941
    4. '[:' → logprob: -13.250641822814941
    5. '	for' → logprob: -14.750641822814941
    6. 'fo' → logprob: -15.375641822814941
    7. 'if' → logprob: -15.625641822814941
    8. '[::-' → logprob: -17.875642776489258
    9. '[:-' → logprob: -18.000642776489258
    10. '[:]' → logprob: -18.125642776489258

Token 54: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.0005744783557020128
    2. ' i' → logprob: -7.500574588775635
    3. 'range' → logprob: -10.875574111938477
    4. ' ' → logprob: -14.500574111938477
    5. 'Ha' → logprob: -14.875574111938477
    6. 'in' → logprob: -14.875574111938477
    7. '  ' → logprob: -15.125574111938477
    8. '   ' → logprob: -15.250574111938477
    9. '	i' → logprob: -15.250574111938477
    10. '(i' → logprob: -15.375574111938477

Token 55: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.0007375618442893028
    2. ' in' → logprob: -7.25073766708374
    3. 'n' → logprob: -10.750737190246582
    4. 'range' → logprob: -12.625737190246582
    5. 'import' → logprob: -13.250737190246582
    6. 'for' → logprob: -15.250737190246582
    7. 'In' → logprob: -15.750737190246582
    8. '   ' → logprob: -16.1257381439209
    9. 'i' → logprob: -16.3757381439209
    10. ' ' → logprob: -16.3757381439209

Token 56: ' (' (ID: 350)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'range' → logprob: -6.869017852295656e-06
    2. ' range' → logprob: -12.000006675720215
    3. '(range' → logprob: -14.500006675720215
    4. '	range' → logprob: -16.62500762939453
    5. '.range' → logprob: -18.75000762939453
    6. 'ran' → logprob: -18.87500762939453
    7. '_range' → logprob: -19.62500762939453
    8. 'Range' → logprob: -19.75000762939453
    9. 'r' → logprob: -20.12500762939453
    10. '   ' → logprob: -20.37500762939453

Token 57: '0' (ID: 15)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'range' → logprob: -5.438573680294212e-06
    2. ' range' → logprob: -12.125005722045898
    3. '(range' → logprob: -17.1250057220459
    4. '	range' → logprob: -17.1250057220459
    5. 'Range' → logprob: -18.6250057220459
    6. '_range' → logprob: -19.0000057220459
    7. 'ranges' → logprob: -19.5000057220459
    8. '.range' → logprob: -19.5000057220459
    9. 'sorted' → logprob: -20.2500057220459
    10. 're' → logprob: -20.3750057220459

Token 58: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0014846279518678784
    2. 'range' → logprob: -7.251484394073486
    3. ',len' → logprob: -7.376484394073486
    4. ',min' → logprob: -10.126484870910645
    5. ',-' → logprob: -10.251484870910645
    6. 'len' → logprob: -10.751484870910645
    7. ',)' → logprob: -12.001484870910645
    8. ',s' → logprob: -12.126484870910645
    9. ' ,' → logprob: -12.501484870910645
    10. ',_' → logprob: -12.501484870910645

Token 59: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0001593195047462359
    2. '2' → logprob: -9.12515926361084
    3. '3' → logprob: -10.50015926361084
    4. '9' → logprob: -11.62515926361084
    5. 'len' → logprob: -11.87515926361084
    6. 'min' → logprob: -12.37515926361084
    7. '4' → logprob: -13.50015926361084
    8. '5' → logprob: -13.87515926361084
    9. '7' → logprob: -15.50015926361084
    10. ' ' → logprob: -16.125160217285156

Token 60: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.006677478551864624
    2. '))))' → logprob: -5.631677627563477
    3. '2' → logprob: -6.131677627563477
    4. '))' → logprob: -7.506677627563477
    5. ')))' → logprob: -8.881677627563477
    6. ')))),' → logprob: -9.881677627563477
    7. '))),' → logprob: -10.756677627563477
    8. ']))' → logprob: -10.756677627563477
    9. ')))))
' → logprob: -11.006677627563477
    10. '}))' → logprob: -11.381677627563477

Token 61: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: 0.0
    2. '3' → logprob: -16.75
    3. ' ' → logprob: -18.75
    4. '4' → logprob: -20.5
    5. 'range' → logprob: -20.625
    6. '5' → logprob: -21.625
    7. '9' → logprob: -22.25
    8. '1' → logprob: -22.25
    9. '8' → logprob: -22.5
    10. '...' → logprob: -22.625

Token 62: '))' (ID: 915)
  Prédit: '))))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))))' → logprob: -0.4332844018936157
    2. ',' → logprob: -1.4332844018936157
    3. '))' → logprob: -2.433284282684326
    4. ')))' → logprob: -3.933284282684326
    5. ')))))
' → logprob: -6.058284282684326
    6. ')))),' → logprob: -6.558284282684326
    7. ']))' → logprob: -7.808284282684326
    8. '))),' → logprob: -7.933284282684326
    9. ')))));
' → logprob: -8.433284759521484
    10. '))))
' → logprob: -8.558284759521484

Token 63: ')))' (ID: 15975)
  Prédit: ')))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.07082241028547287
    2. '))))' → logprob: -2.6958224773406982
    3. '))' → logprob: -7.570822238922119
    4. ')' → logprob: -8.070822715759277
    5. ')))
' → logprob: -11.195822715759277
    6. '')))' → logprob: -11.445822715759277
    7. '}))' → logprob: -12.195822715759277
    8. '")))' → logprob: -12.195822715759277
    9. '))))
' → logprob: -12.695822715759277
    10. ']))' → logprob: -12.695822715759277


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 61
Tokens correctement prédits (1ère position, stricte): 20
Tokens correctement prédits (1ère position, avec adaptation): 20
Tokens correctement prédits (top 10): 37
Précision stricte (1ère position): 32.79%
Précision adaptée (1ère position): 32.79%
Précision (top 10): 60.66%
================================================================================
