================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:00:11
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from sys import stdin

age, price = map(int, stdin.readline().split())

print({
    age >= 13: price,
    age > 5: price // 2,
}.get(True, 0))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' stdin' (ID: 75143)
  Prédit: 'argv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'argv' → logprob: -0.03339692950248718
    2. ' argv' → logprob: -3.9083969593048096
    3. 'exit' → logprob: -4.6583967208862305
    4. ' exit' → logprob: -6.7833967208862305
    5. 'stdout' → logprob: -6.9083967208862305
    6. 'path' → logprob: -7.7833967208862305
    7. 'stdin' → logprob: -8.03339672088623
    8. 'import' → logprob: -8.40839672088623
    9. 'version' → logprob: -9.65839672088623
    10. 'stderr' → logprob: -10.15839672088623

Token 4: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.01141170971095562
    2. '.readline' → logprob: -4.886411666870117
    3. '\n' → logprob: -6.386411666870117
    4. '.read' → logprob: -7.636411666870117
    5. 'import' → logprob: -8.011411666870117
    6. '
' → logprob: -8.261411666870117
    7. '```' → logprob: -8.511411666870117
    8. ',' → logprob: -8.761411666870117
    9. 'newline' → logprob: -8.761411666870117
    10. '.
' → logprob: -9.011411666870117

Token 5: 'age' (ID: 477)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0316447988152504
    2. '.readline' → logprob: -3.781644821166992
    3. '.read' → logprob: -6.031644821166992
    4. '\n' → logprob: -6.781644821166992
    5. 'for' → logprob: -6.781644821166992
    6. 'print' → logprob: -7.156644821166992
    7. 'import' → logprob: -7.406644821166992
    8. ',' → logprob: -7.531644821166992
    9. '
' → logprob: -7.781644821166992
    10. '```' → logprob: -8.156644821166992

Token 6: ',' (ID: 11)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.8246999979019165
    2. ')' → logprob: -1.6996999979019165
    3. ' ' → logprob: -1.8246999979019165
    4. ' =' → logprob: -2.199699878692627
    5. '.' → logprob: -2.949699878692627
    6. '[' → logprob: -3.574699878692627
    7. '_' → logprob: -4.574699878692627
    8. '<|end|>' → logprob: -5.574699878692627
    9. ']' → logprob: -6.199699878692627
    10. ',' → logprob: -6.449699878692627

Token 7: ' price' (ID: 3911)
  Prédit: 'name'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'name' → logprob: -0.22668682038784027
    2. '"' → logprob: -2.976686716079712
    3. 'height' → logprob: -3.101686716079712
    4. ' ' → logprob: -3.851686716079712
    5. '_name' → logprob: -4.476686954498291
    6. 'space' → logprob: -4.726686954498291
    7. 'input' → logprob: -4.726686954498291
    8. ''' → logprob: -4.976686954498291
    9. '=' → logprob: -4.976686954498291
    10. ')' → logprob: -5.101686954498291

Token 8: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.31330013275146484
    2. '=' → logprob: -1.3133001327514648
    3. ',' → logprob: -11.313300132751465
    4. '_' → logprob: -11.563300132751465
    5. ' ' → logprob: -12.063300132751465
    6. ')' → logprob: -12.313300132751465
    7. 's' → logprob: -13.063300132751465
    8. ' =
' → logprob: -14.313300132751465
    9. '=input' → logprob: -14.438300132751465
    10. ' ,' → logprob: -14.563300132751465

Token 9: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.014279740862548351
    2. 'map' → logprob: -4.264279842376709
    3. ' stdin' → logprob: -9.38927936553955
    4. ' list' → logprob: -11.51427936553955
    5. 'stdin' → logprob: -12.01427936553955
    6. ' [' → logprob: -12.13927936553955
    7. ' ' → logprob: -12.26427936553955
    8. ' input' → logprob: -13.26427936553955
    9. 'list' → logprob: -13.88927936553955
    10. ' tuple' → logprob: -14.38927936553955

Token 10: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4541645050048828
    2. '(int' → logprob: -1.3291645050048828
    3. '(lambda' → logprob: -2.829164505004883
    4. '(str' → logprob: -3.204164505004883
    5. '()' → logprob: -8.954164505004883
    6. '<|end|>' → logprob: -8.954164505004883
    7. ' (' → logprob: -9.579164505004883
    8. 'int' → logprob: -10.079164505004883
    9. 'str' → logprob: -10.329164505004883
    10. '(
' → logprob: -10.454164505004883

Token 11: ',' (ID: 11)
  Prédit: '(stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(stdin' → logprob: -0.005695673171430826
    2. ',' → logprob: -5.505695819854736
    3. ')' → logprob: -7.380695819854736
    4. 'stdin' → logprob: -7.630695819854736
    5. '(' → logprob: -8.255695343017578
    6. '(st' → logprob: -8.630695343017578
    7. '(input' → logprob: -10.880695343017578
    8. ' stdin' → logprob: -11.130695343017578
    9. '.stdin' → logprob: -11.630695343017578
    10. ')(' → logprob: -12.755695343017578

Token 12: ' stdin' (ID: 75143)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.3134070336818695
    2. ' stdin' → logprob: -1.313407063484192
    3. '(stdin' → logprob: -8.938406944274902
    4. '.stdin' → logprob: -11.438406944274902
    5. ')' → logprob: -13.063406944274902
    6. 'input' → logprob: -14.938406944274902
    7. 'std' → logprob: -15.313406944274902
    8. 'stdout' → logprob: -15.563406944274902
    9. 'st' → logprob: -15.813406944274902
    10. ' readline' → logprob: -17.18840789794922

Token 13: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.006011391058564186
    2. '.read' → logprob: -5.506011486053467
    3. '.' → logprob: -6.381011486053467
    4. '.readlines' → logprob: -8.506011009216309
    5. ').' → logprob: -10.506011009216309
    6. ')' → logprob: -12.881011009216309
    7. ' .' → logprob: -13.631011009216309
    8. '.write' → logprob: -14.006011009216309
    9. '.decode' → logprob: -14.631011009216309
    10. '.rstrip' → logprob: -14.881011009216309

Token 14: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.14415022730827332
    2. '()' → logprob: -2.1441502571105957
    3. '().' → logprob: -4.394150257110596
    4. ')' → logprob: -5.519150257110596
    5. '()[' → logprob: -8.269149780273438
    6. '(' → logprob: -8.644149780273438
    7. '()))' → logprob: -9.769149780273438
    8. '();)' → logprob: -10.019149780273438
    9. '());' → logprob: -10.394149780273438
    10. ' ())' → logprob: -10.394149780273438

Token 15: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.3152475953102112
    2. 'strip' → logprob: -1.3152475357055664
    3. 'rstrip' → logprob: -6.315247535705566
    4. ')' → logprob: -9.315247535705566
    5. 'read' → logprob: -9.565247535705566
    6. ' split' → logprob: -11.815247535705566
    7. '```' → logprob: -12.815247535705566
    8. ' strip' → logprob: -13.065247535705566
    9. 'replace' → logprob: -13.690247535705566
    10. 'decode' → logprob: -13.815247535705566

Token 16: '())

' (ID: 27654)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7434397339820862
    2. '())' → logprob: -0.7434397339820862
    3. '))' → logprob: -3.1184396743774414
    4. '()))' → logprob: -5.743439674377441
    5. '()' → logprob: -6.493439674377441
    6. ' ())' → logprob: -10.868439674377441
    7. '`)' → logprob: -10.993439674377441
    8. '(' → logprob: -11.368439674377441
    9. ')))' → logprob: -11.618439674377441
    10. ' )' → logprob: -12.118439674377441

Token 17: 'print' (ID: 1598)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.010020849294960499
    2. ' if' → logprob: -5.760020732879639
    3. '
' → logprob: -6.260020732879639
    4. 'i' → logprob: -6.510020732879639
    5. ')' → logprob: -7.010020732879639
    6. '*' → logprob: -8.010021209716797
    7. '+' → logprob: -8.010021209716797
    8. 'print' → logprob: -8.135021209716797
    9. ',' → logprob: -8.510021209716797
    10. '#' → logprob: -8.635021209716797

Token 18: '({
' (ID: 3961)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.000601169012952596
    2. '("("' → logprob: -7.750601291656494
    3. '('' → logprob: -9.000600814819336
    4. '(age' → logprob: -11.250600814819336
    5. '((' → logprob: -11.500600814819336
    6. '(f' → logprob: -11.625600814819336
    7. '()' → logprob: -12.750600814819336
    8. '(`' → logprob: -12.875600814819336
    9. '("""' → logprob: -13.875600814819336
    10. '(round' → logprob: -14.000600814819336

Token 19: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.02329578995704651
    2. 'age' → logprob: -3.8982958793640137
    3. ''âge' → logprob: -6.273295879364014
    4. '"' → logprob: -8.398295402526855
    5. ' age' → logprob: -8.398295402526855
    6. ''ag' → logprob: -9.273295402526855
    7. '(age' → logprob: -9.398295402526855
    8. '   ' → logprob: -10.273295402526855
    9. '')' → logprob: -10.898295402526855
    10. ' ' → logprob: -11.023295402526855

Token 20: ' age' (ID: 5744)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.7915698289871216
    2. 'age' (adapté à ' age') → logprob: -0.7915698289871216
    3. '"' → logprob: -2.416569709777832
    4. '   ' → logprob: -6.291569709777832
    5. 'True' → logprob: -7.291569709777832
    6. '(age' → logprob: -7.416569709777832
    7. ''âge' → logprob: -7.666569709777832
    8. ''ag' → logprob: -8.166569709777832
    9. ' age' → logprob: -9.291569709777832
    10. '0' → logprob: -9.541569709777832

Token 21: ' >=' (ID: 5064)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.1480667144060135
    2. ' :' → logprob: -2.398066759109497
    3. '   ' → logprob: -4.273066520690918
    4. '>' → logprob: -4.648066520690918
    5. ' >=' → logprob: -4.773066520690918
    6. ' >' → logprob: -5.523066520690918
    7. '>=' → logprob: -6.148066520690918
    8. '}' → logprob: -6.273066520690918
    9. '    ' → logprob: -6.523066520690918
    10. ' <=' → logprob: -6.898066520690918

Token 22: ' ' (ID: 220)
  Prédit: '18'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '18' → logprob: -0.14864768087863922
    2. '65' → logprob: -2.3986477851867676
    3. '60' → logprob: -4.148647785186768
    4. '20' → logprob: -4.523647785186768
    5. ' ' → logprob: -4.773647785186768
    6. '10' → logprob: -6.148647785186768
    7. '5' → logprob: -6.648647785186768
    8. '21' → logprob: -7.023647785186768
    9. '70' → logprob: -7.023647785186768
    10. '6' → logprob: -7.148647785186768

Token 23: '13' (ID: 1311)
  Prédit: '65'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '65' → logprob: -0.6693639755249023
    2. '20' → logprob: -1.4193639755249023
    3. '18' → logprob: -2.2943639755249023
    4. '60' → logprob: -2.4193639755249023
    5. '70' → logprob: -4.419363975524902
    6. '10' → logprob: -4.669363975524902
    7. '5' → logprob: -4.919363975524902
    8. '3' → logprob: -5.169363975524902
    9. '30' → logprob: -5.669363975524902
    10. '6' → logprob: -6.044363975524902

Token 24: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.21198171377182007
    2. ' and' → logprob: -1.8369817733764648
    3. '   ' → logprob: -3.836981773376465
    4. ' :' → logprob: -6.211981773376465
    5. 'and' → logprob: -6.336981773376465
    6. ',' → logprob: -6.336981773376465
    7. '}' → logprob: -6.711981773376465
    8. '    ' → logprob: -7.086981773376465
    9. ' ' → logprob: -7.586981773376465
    10. '0' → logprob: -8.211981773376465

Token 25: ' price' (ID: 3911)
  Prédit: ' price'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' price' → logprob: -0.44846585392951965
    2. 'price' → logprob: -1.0734658241271973
    3. ''' → logprob: -5.198465824127197
    4. '"' → logprob: -5.573465824127197
    5. ' True' → logprob: -5.823465824127197
    6. ' '' → logprob: -6.823465824127197
    7. 'True' → logprob: -6.948465824127197
    8. ' "' → logprob: -6.948465824127197
    9. ' age' → logprob: -7.573465824127197
    10. '100' → logprob: -7.573465824127197

Token 26: ',
' (ID: 412)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.026358237490057945
    2. ',
' → logprob: -3.901358127593994
    3. '   ' → logprob: -6.151358127593994
    4. '}' → logprob: -6.276358127593994
    5. '+' → logprob: -7.651358127593994
    6. '*' → logprob: -8.276358604431152
    7. '})' → logprob: -8.526358604431152
    8. ' ,' → logprob: -8.651358604431152
    9. '},' → logprob: -8.901358604431152
    10. ',

' → logprob: -9.026358604431152

Token 27: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04332732409238815
    2. ' True' → logprob: -4.168327331542969
    3. ' age' → logprob: -5.168327331542969
    4. 'True' → logprob: -5.293327331542969
    5. 'False' → logprob: -5.668327331542969
    6. 'age' → logprob: -5.918327331542969
    7. ' False' → logprob: -5.918327331542969
    8. 'price' → logprob: -6.418327331542969
    9. '0' → logprob: -6.793327331542969
    10. ' ' → logprob: -6.918327331542969

Token 28: ' age' (ID: 5744)
  Prédit: 'age'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'age' (adapté à ' age') → logprob: -0.3506969213485718
    2. ' age' → logprob: -2.3506970405578613
    3. '   ' → logprob: -2.4756970405578613
    4. 'price' → logprob: -2.4756970405578613
    5. 'True' → logprob: -4.475697040557861
    6. '0' → logprob: -5.225697040557861
    7. ' price' → logprob: -5.475697040557861
    8. ' True' → logprob: -5.600697040557861
    9. 'False' → logprob: -5.850697040557861
    10. ' ' → logprob: -6.850697040557861

Token 29: ' >' (ID: 1424)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.13851317763328552
    2. '<' → logprob: -2.2635130882263184
    3. ' >=' → logprob: -4.138513088226318
    4. ' <=' → logprob: -5.388513088226318
    5. ' >' → logprob: -6.388513088226318
    6. '>=' → logprob: -6.388513088226318
    7. '<=' → logprob: -7.388513088226318
    8. ' ' → logprob: -7.763513088226318
    9. '>' → logprob: -7.888513088226318
    10. ' ==' → logprob: -10.888513565063477

Token 30: ' ' (ID: 220)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.05281780660152435
    2. ' ' → logprob: -3.4278178215026855
    3. '18' → logprob: -4.6778178215026855
    4. '65' → logprob: -5.8028178215026855
    5. '17' → logprob: -6.4278178215026855
    6. '60' → logprob: -6.5528178215026855
    7. '20' → logprob: -6.8028178215026855
    8. ' =' → logprob: -8.427817344665527
    9. '59' → logprob: -8.427817344665527
    10. '0' → logprob: -8.677817344665527

Token 31: '5' (ID: 20)
  Prédit: '65'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '65' → logprob: -0.6029465198516846
    2. '60' → logprob: -1.9779465198516846
    3. '18' → logprob: -2.1029465198516846
    4. '20' → logprob: -2.7279465198516846
    5. ' ' → logprob: -3.1029465198516846
    6. '19' → logprob: -3.8529465198516846
    7. '=' → logprob: -3.9779465198516846
    8. '17' → logprob: -4.1029462814331055
    9. '59' → logprob: -5.2279462814331055
    10. '12' → logprob: -5.6029462814331055

Token 32: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.1068628653883934
    2. ' and' → logprob: -2.731862783432007
    3. ' :' → logprob: -3.856862783432007
    4. '   ' → logprob: -4.356863021850586
    5. 'and' → logprob: -6.481863021850586
    6. ' ' → logprob: -8.481863021850586
    7. '0' → logprob: -8.856863021850586
    8. '    ' → logprob: -8.856863021850586
    9. '  ' → logprob: -9.606863021850586
    10. '6' → logprob: -10.106863021850586

Token 33: ' price' (ID: 3911)
  Prédit: ' price'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' price' → logprob: -0.11192161589860916
    2. 'price' → logprob: -2.486921548843384
    3. '0' → logprob: -4.861921787261963
    4. ' int' → logprob: -5.236921787261963
    5. ' ' → logprob: -5.361921787261963
    6. 'int' → logprob: -5.986921787261963
    7. '   ' → logprob: -7.486921787261963
    8. '50' → logprob: -8.611921310424805
    9. '10' → logprob: -8.611921310424805
    10. '    ' → logprob: -8.736921310424805

Token 34: ' //' (ID: 602)
  Prédit: ' //'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.253518283367157
    2. '//' → logprob: -1.8785183429718018
    3. ' *' → logprob: -3.6285183429718018
    4. '*' → logprob: -4.253518104553223
    5. '   ' → logprob: -5.253518104553223
    6. ' -' → logprob: -5.378518104553223
    7. ',' → logprob: -5.378518104553223
    8. ' ' → logprob: -5.753518104553223
    9. '})' → logprob: -5.753518104553223
    10. '-' → logprob: -6.128518104553223

Token 35: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.00020246754866093397
    2. '3' → logprob: -9.125202178955078
    3. ' ' → logprob: -9.750202178955078
    4. '5' → logprob: -10.625202178955078
    5. '4' → logprob: -12.000202178955078
    6. '10' → logprob: -12.750202178955078
    7. '1' → logprob: -15.000202178955078
    8. '```' → logprob: -15.125202178955078
    9. '   ' → logprob: -15.187702178955078
    10. '20' → logprob: -15.625202178955078

Token 36: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.00021831797494087368
    2. '3' → logprob: -9.125218391418457
    3. '5' → logprob: -9.875218391418457
    4. '4' → logprob: -10.750218391418457
    5. ' ' → logprob: -11.375218391418457
    6. '10' → logprob: -11.750218391418457
    7. '```' → logprob: -12.375218391418457
    8. '

' → logprob: -12.937718391418457
    9. '``' → logprob: -12.937718391418457
    10. 'd' → logprob: -13.625218391418457

Token 37: ',
' (ID: 412)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.05085931345820427
    2. ',
' → logprob: -3.050859212875366
    3. '}' → logprob: -6.675859451293945
    4. '})' → logprob: -7.425859451293945
    5. '   ' → logprob: -8.175859451293945
    6. ',

' → logprob: -9.675859451293945
    7. ',
' → logprob: -10.675859451293945
    8. 'else' → logprob: -11.300859451293945
    9. '},' → logprob: -12.050859451293945
    10. ')' → logprob: -12.300859451293945

Token 38: '}.' (ID: 16255)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3159972131252289
    2. 'True' → logprob: -1.5659972429275513
    3. 'age' → logprob: -3.5659971237182617
    4. ' True' → logprob: -3.8159971237182617
    5. 'False' → logprob: -4.565997123718262
    6. ' age' → logprob: -7.690997123718262
    7. 'else' → logprob: -7.815997123718262
    8. ' False' → logprob: -8.815997123718262
    9. ' ' → logprob: -9.440997123718262
    10. '0' → logprob: -9.815997123718262

Token 39: 'get' (ID: 522)
  Prédit: 'get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -1.8074162653647363e-05
    2. ' get' → logprob: -11.375018119812012
    3. 'getitem' → logprob: -12.375018119812012
    4. '.get' → logprob: -13.125018119812012
    5. ' ' → logprob: -17.000017166137695
    6. 'gett' → logprob: -17.125017166137695
    7. '[get' → logprob: -17.250017166137695
    8. '	get' → logprob: -17.250017166137695
    9. ')get' → logprob: -17.750017166137695
    10. '__' → logprob: -18.250017166137695

Token 40: '(True' (ID: 55978)
  Prédit: '(age'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(age' → logprob: -0.0007835414726287127
    2. 'age' → logprob: -8.000783920288086
    3. '(True' → logprob: -8.750783920288086
    4. '(False' → logprob: -8.875783920288086
    5. '(' → logprob: -9.625783920288086
    6. 'False' → logprob: -10.625783920288086
    7. ' (' → logprob: -10.875783920288086
    8. ')' → logprob: -11.250783920288086
    9. 'True' → logprob: -11.500783920288086
    10. '(price' → logprob: -11.750783920288086

Token 41: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.07268154621124268
    2. '))' → logprob: -2.697681427001953
    3. '),' → logprob: -6.322681427001953
    4. ')' → logprob: -7.072681427001953
    5. ',None' → logprob: -10.197681427001953
    6. ' ,' → logprob: -10.572681427001953
    7. ')))' → logprob: -11.447681427001953
    8. '0' → logprob: -12.697681427001953
    9. ' ))' → logprob: -13.072681427001953
    10. ')),' → logprob: -13.322681427001953

Token 42: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0036794093903154135
    2. ' ' → logprob: -5.628679275512695
    3. ')' → logprob: -10.753679275512695
    4. '   ' → logprob: -11.003679275512695
    5. '100' → logprob: -11.753679275512695
    6. 'price' → logprob: -11.753679275512695
    7. '1' → logprob: -12.878679275512695
    8. '10' → logprob: -12.941179275512695
    9. '  ' → logprob: -13.003679275512695
    10. '50' → logprob: -13.503679275512695

Token 43: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0016974377213045955
    2. ' ' → logprob: -6.626697540283203
    3. '10' → logprob: -9.751697540283203
    4. '100' → logprob: -9.751697540283203
    5. 'price' → logprob: -9.876697540283203
    6. '   ' → logprob: -9.876697540283203
    7. '1' → logprob: -10.251697540283203
    8. '"' → logprob: -10.626697540283203
    9. ')' → logprob: -11.001697540283203
    10. '20' → logprob: -11.876697540283203

Token 44: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.2519350051879883
    2. ')' → logprob: -1.5019350051879883
    3. ')))' → logprob: -12.876935005187988
    4. ')
' → logprob: -13.501935005187988
    5. '))
' → logprob: -14.501935005187988
    6. '),' → logprob: -14.751935005187988
    7. '})' → logprob: -15.126935005187988
    8. ' )' → logprob: -15.501935005187988
    9. ' ))' → logprob: -15.501935005187988
    10. ')}' → logprob: -15.501935005187988


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 42
Tokens correctement prédits (1ère position, stricte): 15
Tokens correctement prédits (1ère position, avec adaptation): 16
Tokens correctement prédits (top 10): 33
Précision stricte (1ère position): 35.71%
Précision adaptée (1ère position): 38.10%
Précision (top 10): 78.57%
================================================================================
