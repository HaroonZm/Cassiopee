================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:27:49
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def min_attacks_to_defeat_monster(H, A):
    """
    Calcule le nombre minimal d'attaques nécessaires pour vaincre un monstre.

    Cette fonction utilise la division entière pour déterminer combien d'attaques
    d'une puissance A sont nécessaires pour réduire les PV du monstre H à 0 ou moins.

    Args:
        H (int): Nombre initial de points de vie (PV) du monstre.
        A (int): Dégâts infligés par une attaque.

    Returns:
        int: Nombre minimal d'attaques nécessaires pour vaincre le monstre.
    """
    # Utilisation de la "division plafond" pour déterminer le nombre d'attaques :
    # (H + A - 1) // A équivaut à math.ceil(H / A) sans importer de bibliothèque.
    return (H + A - 1) // A

# Lecture de l'entrée utilisateur et conversion des valeurs en entiers
H, A = map(int, input().split())

# Calcul et affichage du résultat
print(min_attacks_to_defeat_monster(H, A))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' min' (ID: 1349)
  → Token d'amorce (pas de prédiction)

Token 2: '_att' (ID: 35618)
  → Token d'amorce (pas de prédiction)

Token 3: 'acks' (ID: 7367)
  Prédit: '_r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_r' → logprob: -0.5751466751098633
    2. 'r' → logprob: -0.9501466751098633
    3. '_' → logprob: -3.2001466751098633
    4. 'er' → logprob: -5.700146675109863
    5. 'ach' → logprob: -6.450146675109863
    6. 'endance' → logprob: -6.575146675109863
    7. 'achment' → logprob: -6.825146675109863
    8. 'rib' → logprob: -7.950146675109863
    9. '_acl' → logprob: -8.200146675109863
    10. 'rade' → logprob: -8.700146675109863

Token 4: '_to' (ID: 5089)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003417366649955511
    2. '_' → logprob: -6.128417491912842
    3. '(:' → logprob: -7.878417491912842
    4. '(_:' → logprob: -8.128417015075684
    5. '(_' → logprob: -8.503417015075684
    6. '():' → logprob: -8.753417015075684
    7. '```' → logprob: -10.128417015075684
    8. '_:' → logprob: -10.378417015075684
    9. ':' → logprob: -10.628417015075684
    10. ' (' → logprob: -11.003417015075684

Token 5: '_def' (ID: 26756)
  Prédit: '_def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_def' → logprob: -0.5226117968559265
    2. '_k' → logprob: -1.2726118564605713
    3. 'def' → logprob: -2.3976118564605713
    4. '_destroy' → logprob: -4.022611618041992
    5. '_' → logprob: -6.272611618041992
    6. 'kill' → logprob: -6.272611618041992
    7. '_clear' → logprob: -6.397611618041992
    8. ' defeat' → logprob: -6.397611618041992
    9. 'k' → logprob: -6.647611618041992
    10. '_remove' → logprob: -7.147611618041992

Token 6: 'eat' (ID: 100633)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.05916695296764374
    2. '```' → logprob: -3.43416690826416
    3. 'end' → logprob: -4.55916690826416
    4. ' _' → logprob: -5.68416690826416
    5. 'ine' → logprob: -5.93416690826416
    6. '_space' → logprob: -7.18416690826416
    7. '_min' → logprob: -7.43416690826416
    8. ' ' → logprob: -7.43416690826416
    9. ' ```' → logprob: -7.80916690826416
    10. '``' → logprob: -7.80916690826416

Token 7: '_mon' (ID: 80615)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.25513383746147156
    2. '(' → logprob: -1.630133867263794
    3. '_enemy' → logprob: -3.755133867263794
    4. '():' → logprob: -6.880133628845215
    5. '(_' → logprob: -7.255133628845215
    6. '_space' → logprob: -7.630133628845215
    7. '(enemy' → logprob: -7.630133628845215
    8. '```' → logprob: -7.755133628845215
    9. '_(' → logprob: -8.130133628845215
    10. '_:' → logprob: -8.255133628845215

Token 8: 'ster' (ID: 3968)
  Prédit: 'ster'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ster' → logprob: -0.0186338871717453
    2. 'sters' → logprob: -4.018633842468262
    3. 'ste' → logprob: -8.393633842468262
    4. 's' → logprob: -8.768633842468262
    5. '```' → logprob: -10.268633842468262
    6. 'stern' → logprob: -11.393633842468262
    7. 'st' → logprob: -11.643633842468262
    8. '_' → logprob: -11.893633842468262
    9. 'def' → logprob: -12.268633842468262
    10. 'stre' → logprob: -12.518633842468262

Token 9: '(H' (ID: 20904)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004934750497341156
    2. '():' → logprob: -5.879934787750244
    3. '(:' → logprob: -6.754934787750244
    4. '_' → logprob: -8.129934310913086
    5. '(_:' → logprob: -8.379934310913086
    6. ':' → logprob: -9.379934310913086
    7. '_:' → logprob: -9.879934310913086
    8. '(":' → logprob: -9.879934310913086
    9. '(a' → logprob: -10.254934310913086
    10. '```' → logprob: -10.379934310913086

Token 10: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.02752816490828991
    2. ')' → logprob: -3.6525280475616455
    3. ',' → logprob: -7.277528285980225
    4. '_' → logprob: -8.527527809143066
    5. ':' → logprob: -9.277527809143066
    6. 'a' → logprob: -9.527527809143066
    7. ' ):' → logprob: -9.527527809143066
    8. 'e' → logprob: -10.402527809143066
    9. 'amilton' → logprob: -11.277527809143066
    10. '),' → logprob: -11.902527809143066

Token 11: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.28378939628601074
    2. 'D' → logprob: -1.7837893962860107
    3. ' A' → logprob: -3.4087893962860107
    4. 'M' → logprob: -4.28378963470459
    5. ' D' → logprob: -5.03378963470459
    6. 'attack' → logprob: -5.03378963470459
    7. 'a' → logprob: -6.28378963470459
    8. 'damage' → logprob: -6.65878963470459
    9. 'AT' → logprob: -6.72128963470459
    10. 'monster' → logprob: -6.90878963470459

Token 12: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0051271384581923485
    2. ')' → logprob: -5.380126953125
    3. ',' → logprob: -7.630126953125
    4. ':' → logprob: -12.380126953125
    5. ' ):' → logprob: -12.380126953125
    6. '):
' → logprob: -12.380126953125
    7. '_' → logprob: -12.505126953125
    8. ')：' → logprob: -14.005126953125
    9. '```' → logprob: -14.755126953125
    10. ''):' → logprob: -14.755126953125

Token 13: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0041540260426700115
    2. '   ' → logprob: -6.129154205322266
    3. ':
' → logprob: -7.254154205322266
    4. '```' → logprob: -7.379154205322266
    5. '():' → logprob: -7.629154205322266
    6. '(' → logprob: -9.629154205322266
    7. '):' → logprob: -11.129154205322266
    8. '``' → logprob: -11.379154205322266
    9. '(:' → logprob: -11.629154205322266
    10. '`:' → logprob: -11.754154205322266

Token 14: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.80218106508255
    2. '```' → logprob: -0.80218106508255
    3. '`' → logprob: -3.1771810054779053
    4. ' if' → logprob: -4.302181243896484
    5. '``' → logprob: -4.552181243896484
    6. '\n' → logprob: -5.052181243896484
    7. 'i' → logprob: -5.177181243896484
    8. '\' → logprob: -5.427181243896484
    9. ' 
' → logprob: -5.427181243896484
    10. ' ' → logprob: -6.052181243896484

Token 15: '   ' (ID: 271)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.7383716702461243
    2. '   ' → logprob: -1.1133716106414795
    3. 'n' → logprob: -3.6133716106414795
    4. 'r' → logprob: -3.7383716106414795
    5. ' i' → logprob: -3.7383716106414795
    6. '"""' → logprob: -4.113371849060059
    7. ' ' → logprob: -4.363371849060059
    8. '#' → logprob: -4.363371849060059
    9. 'if' → logprob: -4.488371849060059
    10. ' if' → logprob: -4.613371849060059

Token 16: ' Cal' (ID: 4453)
  Prédit: 'Calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Calculate' → logprob: -0.939451277256012
    2. '"""' → logprob: -1.1894512176513672
    3. ' Calculate' → logprob: -1.8144512176513672
    4. ' Calculates' → logprob: -3.064451217651367
    5. 'Calcul' → logprob: -3.439451217651367
    6. ' """' → logprob: -4.189451217651367
    7. ''''' → logprob: -4.314451217651367
    8. 'Returns' → logprob: -5.439451217651367
    9. 'Determine' → logprob: -5.939451217651367
    10. 'Find' → logprob: -6.064451217651367

Token 17: 'cule' (ID: 45017)
  Prédit: 'culate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'culate' → logprob: -0.15791842341423035
    2. 'c' → logprob: -2.1579184532165527
    3. 'l' → logprob: -3.9079184532165527
    4. 'cul' → logprob: -4.657918453216553
    5. 'cula' → logprob: -7.907918453216553
    6. 'cu' → logprob: -8.907917976379395
    7. '```' → logprob: -9.282917976379395
    8. 'culator' → logprob: -9.282917976379395
    9. 'culated' → logprob: -9.657917976379395
    10. '   ' → logprob: -10.532917976379395

Token 18: ' le' (ID: 505)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.5856032371520996
    2. 'te' → logprob: -1.2106032371520996
    3. 's' → logprob: -2.0856032371520996
    4. 't' → logprob: -4.0856032371521
    5. 'tes' → logprob: -6.4606032371521
    6. 'space' → logprob: -7.4606032371521
    7. 'z' → logprob: -7.9606032371521
    8. '```' → logprob: -8.085603713989258
    9. 'rate' → logprob: -8.335603713989258
    10. 'ate' → logprob: -8.335603713989258

Token 19: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.001807864406146109
    2. ' ' → logprob: -7.626807689666748
    3. '   ' → logprob: -7.751807689666748
    4. 'nombre' → logprob: -7.876807689666748
    5. '  ' → logprob: -8.501808166503906
    6. ' nombres' → logprob: -8.626808166503906
    7. ' minimum' → logprob: -10.126808166503906
    8. ' ' → logprob: -10.501808166503906
    9. ' Nombre' → logprob: -10.876808166503906
    10. 's' → logprob: -11.251808166503906

Token 20: ' minimal' (ID: 19957)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.20636439323425293
    2. '  ' → logprob: -2.081364393234253
    3. ' de' → logprob: -3.456364393234253
    4. '_' → logprob: -3.956364393234253
    5. ' d' → logprob: -5.456364631652832
    6. 's' → logprob: -6.581364631652832
    7. '<|end|>' → logprob: -6.956364631652832
    8. ')' → logprob: -7.081364631652832
    9. 'd' → logprob: -7.706364631652832
    10. '```' → logprob: -8.081364631652832

Token 21: ' d' (ID: 272)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.30901601910591125
    2. '  ' → logprob: -2.309015989303589
    3. ' de' → logprob: -2.434015989303589
    4. ' d' → logprob: -2.934015989303589
    5. '_' → logprob: -3.934015989303589
    6. '<|end|>' → logprob: -6.559016227722168
    7. '   ' → logprob: -6.684016227722168
    8. 's' → logprob: -7.559016227722168
    9. '<|end|>' → logprob: -7.809016227722168
    10. 'd' → logprob: -7.934016227722168

Token 22: ''' (ID: 6)
  Prédit: '''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.013592847622931004
    2. 'e' → logprob: -4.638592720031738
    3. '_' → logprob: -5.763592720031738
    4. ''_' → logprob: -8.013592720031738
    5. ''espace' → logprob: -9.388592720031738
    6. ''esp' → logprob: -9.638592720031738
    7. '’' → logprob: -10.013592720031738
    8. ''é' → logprob: -10.263592720031738
    9. 'a' → logprob: -10.388592720031738
    10. ''a' → logprob: -10.763592720031738

Token 23: 'atta' (ID: 21246)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.023658519610762596
    2. 'atta' → logprob: -3.898658514022827
    3. ' attaques' → logprob: -6.648658752441406
    4. 'attaque' → logprob: -7.773658752441406
    5. ''att' → logprob: -8.023658752441406
    6. ''at' → logprob: -8.773658752441406
    7. ''ass' → logprob: -8.898658752441406
    8. '’' → logprob: -9.273658752441406
    9. 'e' → logprob: -9.273658752441406
    10. 'a' → logprob: -9.523658752441406

Token 24: 'ques' (ID: 3531)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.07194312661886215
    2. 'ques' → logprob: -2.6969430446624756
    3. 'c' → logprob: -6.696943283081055
    4. 'que' → logprob: -7.696943283081055
    5. 's' → logprob: -9.321943283081055
    6. 'u' → logprob: -10.071943283081055
    7. '#' → logprob: -10.321943283081055
    8. 'n' → logprob: -10.446943283081055
    9. '```' → logprob: -10.446943283081055
    10. '	' → logprob: -10.946943283081055

Token 25: ' nécessaires' (ID: 74402)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.49636486172676086
    2. '_' → logprob: -0.9963648319244385
    3. '   ' → logprob: -4.621365070343018
    4. ' (' → logprob: -5.996365070343018
    5. '(' → logprob: -6.371365070343018
    6. ' nécessaires' → logprob: -6.371365070343018
    7. '  ' → logprob: -6.746365070343018
    8. ' _' → logprob: -7.496365070343018
    9. '_required' → logprob: -7.496365070343018
    10. ')' → logprob: -7.621365070343018

Token 26: ' pour' (ID: 1930)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.2297000885009766
    2. ' pour' → logprob: -1.2297000885009766
    3. ' ' → logprob: -1.6047000885009766
    4. ' to' → logprob: -1.9797000885009766
    5. '<|end|>' → logprob: -3.8547000885009766
    6. '  ' → logprob: -4.229700088500977
    7. ' for' → logprob: -5.104700088500977
    8. 'pour' → logprob: -5.354700088500977
    9. ' ```' → logprob: -5.854700088500977
    10. ' à' → logprob: -5.979700088500977

Token 27: ' vain' (ID: 34253)
  Prédit: ' vain'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' vain' → logprob: -0.11436162889003754
    2. '_' → logprob: -3.239361524581909
    3. ' terr' → logprob: -3.614361524581909
    4. ' battre' → logprob: -4.239361763000488
    5. '   ' → logprob: -4.739361763000488
    6. ' tuer' → logprob: -5.239361763000488
    7. ' ' → logprob: -5.364361763000488
    8. ' réduire' → logprob: -6.864361763000488
    9. ' f' → logprob: -7.364361763000488
    10. 'vain' → logprob: -7.489361763000488

Token 28: 'cre' (ID: 894)
  Prédit: 'cre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cre' → logprob: -0.00010473522706888616
    2. 'c' → logprob: -9.250104904174805
    3. 'cr' → logprob: -13.250104904174805
    4. '   ' → logprob: -13.750104904174805
    5. '**' → logprob: -14.000104904174805
    6. 'cra' → logprob: -14.375104904174805
    7. '_cre' → logprob: -14.750104904174805
    8. 'dre' → logprob: -14.875104904174805
    9. '#' → logprob: -15.000104904174805
    10. '</' → logprob: -15.250104904174805

Token 29: ' un' (ID: 537)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.36861684918403625
    2. ' le' → logprob: -1.3686168193817139
    3. ' un' → logprob: -4.118617057800293
    4. ' l' → logprob: -4.243617057800293
    5. 'le' → logprob: -4.743617057800293
    6. 'l' → logprob: -5.493617057800293
    7. ' ' → logprob: -5.743617057800293
    8. ' la' → logprob: -6.118617057800293
    9. '_' → logprob: -6.743617057800293
    10. ' the' → logprob: -7.368617057800293

Token 30: ' mon' (ID: 1767)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.11777139455080032
    2. ' mon' → logprob: -2.4927713871002197
    3. ' ' → logprob: -4.867771625518799
    4. ' monster' → logprob: -4.992771625518799
    5. ' monst' → logprob: -5.742771625518799
    6. 'mon' → logprob: -6.117771625518799
    7. ' monstr' → logprob: -6.742771625518799
    8. '  ' → logprob: -7.367771625518799
    9. ' m' → logprob: -7.617771625518799
    10. '_' → logprob: -7.617771625518799

Token 31: 'stre' (ID: 26826)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.12462018430233002
    2. 'stre' → logprob: -2.249620199203491
    3. 'st' → logprob: -4.749619960784912
    4. '\s' → logprob: -7.374619960784912
    5. '\' → logprob: -7.499619960784912
    6. 'ster' → logprob: -8.81212043762207
    7. '' → logprob: -8.99962043762207
    8. '   ' → logprob: -9.06212043762207
    9. '' → logprob: -9.12462043762207
    10. 'ste' → logprob: -9.24962043762207

Token 32: '.

' (ID: 364)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.24470379948616028
    2. ':' → logprob: -2.744703769683838
    3. '\' → logprob: -2.994703769683838
    4. '```' → logprob: -3.744703769683838
    5. ',' → logprob: -4.119703769683838
    6. '   ' → logprob: -4.369703769683838
    7. '\n' → logprob: -4.619703769683838
    8. ''' → logprob: -5.119703769683838
    9. 'e' → logprob: -5.119703769683838
    10. '(' → logprob: -5.744703769683838

Token 33: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.8807716369628906
    2. '   ' → logprob: -1.5057716369628906
    3. '"""
' → logprob: -1.8807716369628906
    4. '"""' → logprob: -2.7557716369628906
    5. ' 
' → logprob: -2.8807716369628906
    6. '
' → logprob: -3.3807716369628906
    7. '```' → logprob: -4.380771636962891
    8. ' """
' → logprob: -5.130771636962891
    9. '    
' → logprob: -5.380771636962891
    10. '\' → logprob: -5.380771636962891

Token 34: ' Cette' (ID: 27383)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0641676187515259
    2. '\n' → logprob: -1.0641676187515259
    3. 'n' → logprob: -2.3141674995422363
    4. '"""' → logprob: -3.0641674995422363
    5. ' 
' → logprob: -3.3141674995422363
    6. ' """
' → logprob: -3.6891674995422363
    7. ' """' → logprob: -3.9391674995422363
    8. ' if' → logprob: -3.9391674995422363
    9. '```' → logprob: -4.439167499542236
    10. '"""
' → logprob: -4.439167499542236

Token 35: ' fonction' (ID: 17610)
  Prédit: ' fonction'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fonction' → logprob: -0.8487191200256348
    2. ' ' → logprob: -1.4737191200256348
    3. ' function' → logprob: -1.9737191200256348
    4. '   ' → logprob: -2.2237191200256348
    5. ' def' → logprob: -3.9737191200256348
    6. ' méthode' → logprob: -4.348719120025635
    7. '  ' → logprob: -4.473719120025635
    8. 'fonction' → logprob: -5.098719120025635
    9. 'def' → logprob: -5.348719120025635
    10. ' de' → logprob: -5.473719120025635

Token 36: ' utilise' (ID: 70283)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4175198972225189
    2. '    ' → logprob: -2.7925198078155518
    3. ' retourne' → logprob: -3.0425198078155518
    4. ' ' → logprob: -3.1675198078155518
    5. ' prend' → logprob: -3.6675198078155518
    6. ' continue' → logprob: -4.167520046234131
    7. ' doit' → logprob: -4.417520046234131
    8. ' calcul' → logprob: -4.667520046234131
    9. ' est' → logprob: -4.667520046234131
    10. ' utilise' → logprob: -4.792520046234131

Token 37: ' la' (ID: 557)
  Prédit: ' une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.4556528329849243
    2. ' un' → logprob: -1.3306528329849243
    3. ' la' → logprob: -3.0806527137756348
    4. ' l' → logprob: -4.705652713775635
    5. 'une' → logprob: -4.705652713775635
    6. ' a' → logprob: -4.955652713775635
    7. 'l' → logprob: -4.955652713775635
    8. ' dynamic' → logprob: -5.205652713775635
    9. '   ' → logprob: -5.705652713775635
    10. ' des' → logprob: -5.955652713775635

Token 38: ' division' (ID: 21629)
  Prédit: ' programmation'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' programmation' → logprob: -0.9368378520011902
    2. ' stratégie' → logprob: -2.436837911605835
    3. ' dynamique' → logprob: -2.686837911605835
    4. ' force' → logprob: -2.811837911605835
    5. ' réc' → logprob: -2.936837911605835
    6. ' puissance' → logprob: -3.311837911605835
    7. 'attaque' → logprob: -3.561837911605835
    8. ' technique' → logprob: -3.686837911605835
    9. 's' → logprob: -3.936837911605835
    10. 'r' → logprob: -3.936837911605835

Token 39: ' entière' (ID: 61583)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.343237042427063
    2. '_' → logprob: -1.843237042427063
    3. ' entière' → logprob: -3.4682369232177734
    4. ' `' → logprob: -3.8432369232177734
    5. ' integer' → logprob: -3.8432369232177734
    6. ' ' → logprob: -4.718236923217773
    7. ' )' → logprob: -4.843236923217773
    8. '    ' → logprob: -4.968236923217773
    9. ' pour' → logprob: -5.468236923217773
    10. ' ent' → logprob: -5.843236923217773

Token 40: ' pour' (ID: 1930)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.42080044746398926
    2. ' pour' → logprob: -1.2958004474639893
    3. ' entre' → logprob: -4.29580020904541
    4. ' de' → logprob: -4.42080020904541
    5. ' du' → logprob: -4.54580020904541
    6. ' ' → logprob: -4.67080020904541
    7. ' par' → logprob: -5.17080020904541
    8. '.' → logprob: -5.54580020904541
    9. '  ' → logprob: -6.17080020904541
    10. '    ' → logprob: -6.29580020904541

Token 41: ' déterminer' (ID: 122024)
  Prédit: ' déterminer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' déterminer' → logprob: -0.07455922663211823
    2. ' calcul' → logprob: -2.824559211730957
    3. ' trouver' → logprob: -5.949559211730957
    4. ' ' → logprob: -6.324559211730957
    5. ' effectuer' → logprob: -6.699559211730957
    6. ' garantir' → logprob: -6.949559211730957
    7. '<|end|>' → logprob: -7.324559211730957
    8. ' div' → logprob: -7.574559211730957
    9. ' obtenir' → logprob: -7.699559211730957
    10. ' continuer' → logprob: -7.699559211730957

Token 42: ' combien' (ID: 106648)
  Prédit: ' le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.3849039673805237
    2. ' combien' → logprob: -1.884903907775879
    3. ' l' → logprob: -2.009903907775879
    4. ' la' → logprob: -3.759903907775879
    5. ' ' → logprob: -5.384903907775879
    6. ' nombre' → logprob: -6.884903907775879
    7. '   ' → logprob: -7.009903907775879
    8. 'l' → logprob: -7.134903907775879
    9. ' the' → logprob: -7.634903907775879
    10. 's' → logprob: -8.259903907775879

Token 43: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.33298027515411377
    2. ' de' → logprob: -1.4579802751541138
    3. '<|end|>' → logprob: -4.207980155944824
    4. '_' → logprob: -4.332980155944824
    5. ' ' → logprob: -4.707980155944824
    6. 's' → logprob: -5.707980155944824
    7. ' fois' → logprob: -6.207980155944824
    8. 'd' → logprob: -6.457980155944824
    9. 'de' → logprob: -6.707980155944824
    10. '<|end|>' → logprob: -7.207980155944824

Token 44: ''' (ID: 6)
  Prédit: '''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.01926378533244133
    2. 'e' → logprob: -4.519263744354248
    3. ' '' → logprob: -5.269263744354248
    4. ' attaques' → logprob: -7.894263744354248
    5. ''esp' → logprob: -8.019264221191406
    6. ''espace' → logprob: -8.144264221191406
    7. 'es' → logprob: -8.644264221191406
    8. 'u' → logprob: -8.894264221191406
    9. '’' → logprob: -8.894264221191406
    10. ''é' → logprob: -8.894264221191406

Token 45: 'atta' (ID: 21246)
  Prédit: 'atta'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'atta' → logprob: -0.10141493380069733
    2. ''' → logprob: -2.476414918899536
    3. ' attaques' → logprob: -5.101415157318115
    4. 'attaque' → logprob: -6.351415157318115
    5. 'atk' → logprob: -7.351415157318115
    6. '’' → logprob: -7.601415157318115
    7. 'at' → logprob: -7.726415157318115
    8. '`' → logprob: -7.726415157318115
    9. ' ' → logprob: -7.851415157318115
    10. '```' → logprob: -7.851415157318115

Token 46: 'ques' (ID: 3531)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.2503041625022888
    2. 'ques' → logprob: -2.1253042221069336
    3. 'c' → logprob: -2.3753042221069336
    4. 'u' → logprob: -5.375304222106934
    5. 'quer' → logprob: -6.875304222106934
    6. 's' → logprob: -7.000304222106934
    7. '       ' → logprob: -7.500304222106934
    8. '   ' → logprob: -7.625304222106934
    9. 'qu' → logprob: -7.625304222106934
    10. 'que' → logprob: -8.250304222106934

Token 47: '
' (ID: 198)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4182412326335907
    2. '   ' → logprob: -1.418241262435913
    3. ' sont' → logprob: -3.418241262435913
    4. ' nécessaires' → logprob: -4.043241024017334
    5. 's' → logprob: -4.293241024017334
    6. '  ' → logprob: -4.543241024017334
    7. '_' → logprob: -4.793241024017334
    8. '    ' → logprob: -5.793241024017334
    9. ' are' → logprob: -6.168241024017334
    10. '"' → logprob: -6.668241024017334

Token 48: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4870242178440094
    2. ' ' → logprob: -1.612024188041687
    3. ' sont' → logprob: -2.4870243072509766
    4. ' nécessaires' → logprob: -2.8620243072509766
    5. '  ' → logprob: -4.362024307250977
    6. 's' → logprob: -4.612024307250977
    7. '    ' → logprob: -4.737024307250977
    8. '"' → logprob: -6.362024307250977
    9. ' nécessaire' → logprob: -6.487024307250977
    10. '*' → logprob: -6.737024307250977

Token 49: ' d' (ID: 272)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8187084794044495
    2. ' nécessaires' → logprob: -1.6937084197998047
    3. '   ' → logprob: -1.9437084197998047
    4. ' sont' → logprob: -2.3187084197998047
    5. '  ' → logprob: -2.9437084197998047
    6. ' nécessaire' → logprob: -4.443708419799805
    7. '```' → logprob: -4.568708419799805
    8. '_' → logprob: -4.818708419799805
    9. 's' → logprob: -5.193708419799805
    10. ' necess' → logprob: -5.443708419799805

Token 50: ''une' (ID: 13337)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.5341930985450745
    2. ''' → logprob: -2.1591930389404297
    3. 'iv' → logprob: -3.0341930389404297
    4. 'u' → logprob: -3.1591930389404297
    5. 'es' → logprob: -3.6591930389404297
    6. 'on' → logprob: -4.15919303894043
    7. 'éc' → logprob: -4.15919303894043
    8. 'ont' → logprob: -4.28419303894043
    9. ' nécessaires' → logprob: -4.40919303894043
    10. 'é' → logprob: -4.65919303894043

Token 51: ' puissance' (ID: 63494)
  Prédit: 'attaque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'attaque' → logprob: -0.18908417224884033
    2. ''' → logprob: -2.689084053039551
    3. ' attaque' → logprob: -2.689084053039551
    4. 'atta' → logprob: -4.939084053039551
    5. ' at' → logprob: -6.064084053039551
    6. 'e' → logprob: -6.064084053039551
    7. '’' → logprob: -6.314084053039551
    8. 'amage' → logprob: -6.439084053039551
    9. ' attaques' → logprob: -6.626584053039551
    10. ' fois' → logprob: -6.626584053039551

Token 52: ' A' (ID: 355)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.516883373260498
    2. ' nécessaires' → logprob: -2.141883373260498
    3. '   ' → logprob: -2.641883373260498
    4. ' ' → logprob: -2.891883373260498
    5. 'A' → logprob: -3.766883373260498
    6. ' nécessaire' → logprob: -3.891883373260498
    7. ' sont' → logprob: -4.141883373260498
    8. 'd' → logprob: -4.266883373260498
    9. ' A' → logprob: -4.266883373260498
    10. '  ' → logprob: -4.516883373260498

Token 53: ' sont' (ID: 5242)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.4240017533302307
    2. ' sont' → logprob: -1.674001693725586
    3. ' ' → logprob: -2.674001693725586
    4. ' suff' → logprob: -3.549001693725586
    5. '   ' → logprob: -3.674001693725586
    6. '  ' → logprob: -5.299001693725586
    7. ' nécessaires' → logprob: -5.299001693725586
    8. ' peuvent' → logprob: -5.674001693725586
    9. '.' → logprob: -5.799001693725586
    10. 'né' → logprob: -5.924001693725586

Token 54: ' nécessaires' (ID: 74402)
  Prédit: ' nécessaires'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nécessaires' → logprob: -0.16744698584079742
    2. 'né' → logprob: -2.042447090148926
    3. ' nécessaire' → logprob: -4.542447090148926
    4. 'n' → logprob: -5.042447090148926
    5. 'requ' → logprob: -5.917447090148926
    6. ' requ' → logprob: -6.542447090148926
    7. 'necess' → logprob: -7.042447090148926
    8. 'nées' → logprob: -7.292447090148926
    9. ' necess' → logprob: -8.292447090148926
    10. 'import' → logprob: -8.292447090148926

Token 55: ' pour' (ID: 1930)
  Prédit: ' pour'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pour' → logprob: -0.3065364360809326
    2. '.' → logprob: -1.6815364360809326
    3. '   ' → logprob: -3.1815364360809326
    4. ' to' → logprob: -4.681536674499512
    5. ' ' → logprob: -5.056536674499512
    6. ',' → logprob: -5.056536674499512
    7. ' afin' → logprob: -5.431536674499512
    8. 'pour' → logprob: -5.556536674499512
    9. '  ' → logprob: -6.181536674499512
    10. '```' → logprob: -6.556536674499512

Token 56: ' réduire' (ID: 78295)
  Prédit: ' réduire'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' réduire' → logprob: -1.3955402374267578
    2. 'infl' → logprob: -2.145540237426758
    3. ' infl' → logprob: -2.645540237426758
    4. 'vain' → logprob: -2.770540237426758
    5. 'b' → logprob: -2.895540237426758
    6. 'atta' → logprob: -3.020540237426758
    7. ' vain' → logprob: -3.145540237426758
    8. '   ' → logprob: -3.145540237426758
    9. ' atta' → logprob: -3.145540237426758
    10. 'atte' → logprob: -3.270540237426758

Token 57: ' les' (ID: 1341)
  Prédit: ' le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.1858079433441162
    2. ' la' → logprob: -2.435807943344116
    3. ' H' → logprob: -3.310807943344116
    4. 'le' → logprob: -3.560807943344116
    5. ' ' → logprob: -4.685808181762695
    6. ' au' → logprob: -6.185808181762695
    7. 'H' → logprob: -6.685808181762695
    8. ' l' → logprob: -7.060808181762695
    9. ' un' → logprob: -7.310808181762695
    10. 'l' → logprob: -7.560808181762695

Token 58: ' PV' (ID: 50971)
  Prédit: ' points'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' points' → logprob: -0.5807328820228577
    2. 'H' → logprob: -1.955732822418213
    3. 'points' → logprob: -1.955732822418213
    4. ' H' → logprob: -3.330732822418213
    5. 'HP' → logprob: -3.455732822418213
    6. 'mon' → logprob: -3.705732822418213
    7. 'hp' → logprob: -3.955732822418213
    8. 'vie' → logprob: -4.955732822418213
    9. 'pv' → logprob: -5.205732822418213
    10. ' HP' → logprob: -5.330732822418213

Token 59: ' du' (ID: 1462)
  Prédit: ' du'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' du' → logprob: -0.014435673132538795
    2. 'du' → logprob: -5.389435768127441
    3. ' à' → logprob: -5.764435768127441
    4. ' ' → logprob: -5.889435768127441
    5. ' rest' → logprob: -6.514435768127441
    6. ' au' → logprob: -7.139435768127441
    7. ' de' → logprob: -7.639435768127441
    8. ' d' → logprob: -8.264435768127441
    9. 'rest' → logprob: -8.639435768127441
    10. 's' → logprob: -8.889435768127441

Token 60: ' mon' (ID: 1767)
  Prédit: ' mon'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' mon' → logprob: -0.33051028847694397
    2. 'mon' → logprob: -1.3305102586746216
    3. ' ' → logprob: -5.330510139465332
    4. ' monster' → logprob: -5.580510139465332
    5. ' H' → logprob: -5.830510139465332
    6. ' ' → logprob: -6.705510139465332
    7. ' мон' → logprob: -7.080510139465332
    8. 'monster' → logprob: -7.080510139465332
    9. 'H' → logprob: -7.705510139465332
    10. ' m' → logprob: -7.893010139465332

Token 61: 'stre' (ID: 26826)
  Prédit: 'stre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stre' → logprob: -0.0077608926221728325
    2. 's' → logprob: -5.007761001586914
    3. 'st' → logprob: -7.132761001586914
    4. '#' → logprob: -9.507761001586914
    5. '```' → logprob: -9.882761001586914
    6. 'ster' → logprob: -10.757761001586914
    7. '   ' → logprob: -11.882761001586914
    8. 'str' → logprob: -12.007761001586914
    9. '##' → logprob: -12.132761001586914
    10. '\' → logprob: -12.445261001586914

Token 62: ' H' (ID: 487)
  Prédit: ' à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.108627088367939
    2. '   ' → logprob: -3.3586270809173584
    3. ' au' → logprob: -3.3586270809173584
    4. ' ' → logprob: -4.7336273193359375
    5. 'à' → logprob: -5.1086273193359375
    6. '```' → logprob: -5.4836273193359375
    7. 'au' → logprob: -5.7336273193359375
    8. ' H' → logprob: -6.4836273193359375
    9. ' `' → logprob: -6.6086273193359375
    10. ' de' → logprob: -6.6086273193359375

Token 63: ' à' (ID: 1221)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12376155704259872
    2. '.' → logprob: -2.3737616539001465
    3. ' au' → logprob: -4.9987616539001465
    4. ' à' → logprob: -5.2487616539001465
    5. ':' → logprob: -5.4987616539001465
    6. ',' → logprob: -6.1237616539001465
    7. ' en' → logprob: -6.9987616539001465
    8. ' :' → logprob: -7.1237616539001465
    9. '  ' → logprob: -7.6237616539001465
    10. '    ' → logprob: -7.8737616539001465

Token 64: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.09099403023719788
    2. ' ' → logprob: -3.215994119644165
    3. ' zéro' → logprob: -4.340993881225586
    4. 'z' → logprob: -4.465993881225586
    5. ' au' → logprob: -4.840993881225586
    6. 'au' → logprob: -5.090993881225586
    7. ' z' → logprob: -5.465993881225586
    8. ' zero' → logprob: -6.465993881225586
    9. 'zero' → logprob: -6.840993881225586
    10. '```' → logprob: -7.215993881225586

Token 65: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.02919618971645832
    2. 'z' → logprob: -3.654196262359619
    3. ' ' → logprob: -6.279196262359619
    4. 'zero' → logprob: -8.029195785522461
    5. 'au' → logprob: -8.654195785522461
    6. ' z' → logprob: -8.904195785522461
    7. '```' → logprob: -8.904195785522461
    8. 'moins' → logprob: -9.529195785522461
    9. '1' → logprob: -9.779195785522461
    10. ' zéro' → logprob: -10.654195785522461

Token 66: ' ou' (ID: 2031)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2749938368797302
    2. '.' → logprob: -1.649993896484375
    3. ':' → logprob: -3.274993896484375
    4. ',' → logprob: -5.649993896484375
    5. ')' → logprob: -6.274993896484375
    6. ' ou' → logprob: -7.024993896484375
    7. ' :' → logprob: -7.524993896484375
    8. '"""' → logprob: -7.524993896484375
    9. '    ' → logprob: -7.774993896484375
    10. '  ' → logprob: -7.899993896484375

Token 67: ' moins' (ID: 15924)
  Prédit: 'moins'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'moins' → logprob: -0.32509031891822815
    2. ' moins' → logprob: -1.3250902891159058
    3. 'less' → logprob: -5.575090408325195
    4. 'plus' → logprob: -6.200090408325195
    5. '-' → logprob: -6.825090408325195
    6. 'en' → logprob: -7.200090408325195
    7. ' en' → logprob: -7.200090408325195
    8. ' fewer' → logprob: -7.575090408325195
    9. 'au' → logprob: -7.700090408325195
    10. 'm' → logprob: -7.950090408325195

Token 68: '.

' (ID: 364)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.4371182322502136
    2. '   ' → logprob: -1.0621182918548584
    3. ':' → logprob: -5.062118053436279
    4. ',' → logprob: -6.812118053436279
    5. '.
' → logprob: -8.437118530273438
    6. '"""' → logprob: -9.187118530273438
    7. '
' → logprob: -9.437118530273438
    8. '\n' → logprob: -9.437118530273438
    9. '."""' → logprob: -9.562118530273438
    10. '```' → logprob: -9.812118530273438

Token 69: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.038235876709222794
    2. '"""' → logprob: -3.413235902786255
    3. '"""
' → logprob: -5.913235664367676
    4. '\n' → logprob: -7.413235664367676
    5. ')' → logprob: -7.663235664367676
    6. '"' → logprob: -8.413235664367676
    7. '
' → logprob: -8.663235664367676
    8. '""' → logprob: -9.288235664367676
    9. '    
' → logprob: -9.288235664367676
    10. '```' → logprob: -9.413235664367676

Token 70: ' Args' (ID: 39185)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.029370876029133797
    2. '"""' → logprob: -3.7793707847595215
    3. '"""
' → logprob: -5.9043707847595215
    4. '```' → logprob: -6.7793707847595215
    5. '
' → logprob: -7.1543707847595215
    6. 'return' → logprob: -7.9043707847595215
    7. '""' → logprob: -8.40437126159668
    8. '    ' → logprob: -8.52937126159668
    9. '    
' → logprob: -9.27937126159668
    10. ' """
' → logprob: -9.40437126159668

Token 71: ':
' (ID: 734)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.034538839012384415
    2. ':' → logprob: -4.284538745880127
    3. '(H' → logprob: -5.034538745880127
    4. '   ' → logprob: -5.284538745880127
    5. '):' → logprob: -5.534538745880127
    6. ')' → logprob: -6.284538745880127
    7. '(' → logprob: -7.159538745880127
    8. ',H' → logprob: -7.409538745880127
    9. ' :' → logprob: -7.909538745880127
    10. 'H' → logprob: -8.284539222717285

Token 72: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8255331516265869
    2. ' ' → logprob: -1.950533151626587
    3. ' 
' → logprob: -2.075533151626587
    4. ' H' → logprob: -2.325533151626587
    5. '    ' → logprob: -2.450533151626587
    6. 'H' → logprob: -2.700533151626587
    7. ')' → logprob: -3.825533151626587
    8. ' )' → logprob: -5.325532913208008
    9. 'n' → logprob: -5.700532913208008
    10. '     
' → logprob: -5.700532913208008

Token 73: ' H' (ID: 487)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' (adapté à ' H') → logprob: -0.013270932249724865
    2. ' H' → logprob: -4.388270854949951
    3. '   ' → logprob: -7.388270854949951
    4. '`' → logprob: -9.88827133178711
    5. '```' → logprob: -10.51327133178711
    6. 'self' → logprob: -10.76327133178711
    7. ' `' → logprob: -10.88827133178711
    8. '       ' → logprob: -12.76327133178711
    9. ' self' → logprob: -12.88827133178711
    10. 'int' → logprob: -13.01327133178711

Token 74: ' (' (ID: 350)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.859984815120697
    2. ',' → logprob: -0.984984815120697
    3. ' (' → logprob: -1.9849848747253418
    4. ' :' → logprob: -2.984984874725342
    5. ' ,' → logprob: -5.109984874725342
    6. ':int' → logprob: -5.484984874725342
    7. '):' → logprob: -6.234984874725342
    8. ')' → logprob: -7.234984874725342
    9. ' ):' → logprob: -7.359984874725342
    10. '   ' → logprob: -7.609984874725342

Token 75: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.012532021850347519
    2. ' int' → logprob: -4.3875322341918945
    3. '   ' → logprob: -10.762532234191895
    4. ':int' → logprob: -15.012532234191895
    5. '```' → logprob: -15.637532234191895
    6. ')' → logprob: -15.762532234191895
    7. '[int' → logprob: -16.262531280517578
    8. '):' → logprob: -16.762531280517578
    9. '    ' → logprob: -17.012531280517578
    10. 'integer' → logprob: -17.262531280517578

Token 76: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.019086498767137527
    2. ')' → logprob: -4.0190863609313965
    3. ',' → logprob: -7.8940863609313965
    4. '   ' → logprob: -8.144086837768555
    5. ' ):' → logprob: -8.644086837768555
    6. ':' → logprob: -10.144086837768555
    7. '):
' → logprob: -10.644086837768555
    8. '```' → logprob: -11.894086837768555
    9. ' )' → logprob: -12.269086837768555
    10. '),' → logprob: -12.394086837768555

Token 77: ' Nombre' (ID: 70208)
  Prédit: ' Points'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' Points' → logprob: -0.40894070267677307
    2. ' points' → logprob: -1.9089406728744507
    3. ' La' → logprob: -2.1589407920837402
    4. 'Points' → logprob: -3.1589407920837402
    5. ' Le' → logprob: -4.65894079208374
    6. 'La' → logprob: -4.78394079208374
    7. ' la' → logprob: -5.90894079208374
    8. 'points' → logprob: -6.03394079208374
    9. ' PV' → logprob: -6.65894079208374
    10. 'Le' → logprob: -6.90894079208374

Token 78: ' initial' (ID: 4871)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.5289682149887085
    2. ' d' → logprob: -1.7789682149887085
    3. ' ' → logprob: -2.153968334197998
    4. ' total' → logprob: -3.028968334197998
    5. '  ' → logprob: -3.403968334197998
    6. '_' → logprob: -4.528968334197998
    7. 'total' → logprob: -5.028968334197998
    8. '   ' → logprob: -5.153968334197998
    9. '_total' → logprob: -5.403968334197998
    10. '    ' → logprob: -5.778968334197998

Token 79: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.022175930440425873
    2. ' d' → logprob: -4.0221757888793945
    3. 'de' → logprob: -5.7721757888793945
    4. ' ' → logprob: -7.8971757888793945
    5. '  ' → logprob: -9.147175788879395
    6. 'd' → logprob: -9.272175788879395
    7. '   ' → logprob: -9.397175788879395
    8. ' total' → logprob: -9.647175788879395
    9. ' des' → logprob: -10.272175788879395
    10. '_' → logprob: -10.522175788879395

Token 80: ' points' (ID: 5571)
  Prédit: ' points'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' points' → logprob: -0.0030740872025489807
    2. 'points' → logprob: -6.0030741691589355
    3. ' ' → logprob: -7.7530741691589355
    4. ' point' → logprob: -9.878073692321777
    5. '_points' → logprob: -10.378073692321777
    6. ' PV' → logprob: -10.628073692321777
    7. 'pv' → logprob: -11.003073692321777
    8. ' pv' → logprob: -11.128073692321777
    9. ' puntos' → logprob: -11.628073692321777
    10. ' pontos' → logprob: -12.378073692321777

Token 81: ' de' (ID: 334)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.4381953477859497
    2. '_de' → logprob: -1.5631953477859497
    3. ' de' → logprob: -2.06319522857666
    4. '   ' → logprob: -5.68819522857666
    5. '_d' → logprob: -5.81319522857666
    6. 'de' → logprob: -5.81319522857666
    7. ' ' → logprob: -6.06319522857666
    8. 'd' → logprob: -6.06319522857666
    9. '_v' → logprob: -6.93819522857666
    10. ')' → logprob: -7.31319522857666

Token 82: ' vie' (ID: 8585)
  Prédit: 'vie'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vie' → logprob: -0.004283061716705561
    2. ' vie' → logprob: -5.5042829513549805
    3. 'v' → logprob: -9.00428295135498
    4. 'vue' → logprob: -10.75428295135498
    5. 'vict' → logprob: -11.00428295135498
    6. 'pv' → logprob: -11.50428295135498
    7. '```' → logprob: -11.62928295135498
    8. ' ' → logprob: -11.75428295135498
    9. 'vi' → logprob: -12.75428295135498
    10. 'attaque' → logprob: -12.87928295135498

Token 83: ' (' (ID: 350)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.236840158700943
    2. ')' → logprob: -2.73684024810791
    3. ' du' → logprob: -3.11184024810791
    4. 'du' → logprob: -3.98684024810791
    5. '
' → logprob: -4.23684024810791
    6. ')
' → logprob: -4.48684024810791
    7. '```' → logprob: -4.73684024810791
    8. '\n' → logprob: -4.86184024810791
    9. '       ' → logprob: -4.98684024810791
    10. '\' → logprob: -5.23684024810791

Token 84: 'PV' (ID: 59605)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5940325260162354
    2. ' du' → logprob: -1.2190325260162354
    3. ' )' → logprob: -2.3440325260162354
    4. 'du' → logprob: -3.7190325260162354
    5. 'mon' → logprob: -3.8440325260162354
    6. '   ' → logprob: -6.219032287597656
    7. 'monster' → logprob: -6.469032287597656
    8. ' monst' → logprob: -6.469032287597656
    9. 'le' → logprob: -6.594032287597656
    10. '):' → logprob: -7.344032287597656

Token 85: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.009881217032670975
    2. '   ' → logprob: -5.509881019592285
    3. ' du' → logprob: -6.384881019592285
    4. '):' → logprob: -6.634881019592285
    5. 'du' → logprob: -7.134881019592285
    6. ').' → logprob: -7.134881019592285
    7. ')
' → logprob: -7.509881019592285
    8. '):
' → logprob: -8.384881019592285
    9. '),' → logprob: -9.009881019592285
    10. ')
' → logprob: -9.634881019592285

Token 86: ' du' (ID: 1462)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6732125878334045
    2. ')' → logprob: -1.6732125282287598
    3. '    
' → logprob: -2.5482125282287598
    4. '\n' → logprob: -2.5482125282287598
    5. '
' → logprob: -2.6732125282287598
    6. '  
' → logprob: -4.29821252822876
    7. ')
' → logprob: -4.42321252822876
    8. ' 
' → logprob: -4.54821252822876
    9. '```' → logprob: -4.67321252822876
    10. ':' → logprob: -5.17321252822876

Token 87: ' mon' (ID: 1767)
  Prédit: ' mon'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' mon' → logprob: -0.049151238054037094
    2. 'mon' → logprob: -3.1741511821746826
    3. ' monster' → logprob: -5.299151420593262
    4. ' ' → logprob: -8.299151420593262
    5. ' ' → logprob: -8.674151420593262
    6. ' monst' → logprob: -8.924151420593262
    7. '```' → logprob: -9.174151420593262
    8. ' monstr' → logprob: -9.299151420593262
    9. ' мон' → logprob: -9.299151420593262
    10. ' m' → logprob: -9.674151420593262

Token 88: 'stre' (ID: 26826)
  Prédit: 'stre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stre' → logprob: -0.03436596319079399
    2. 's' → logprob: -3.6593658924102783
    3. 'st' → logprob: -5.284366130828857
    4. 'str' → logprob: -7.909366130828857
    5. 'tre' → logprob: -8.1593656539917
    6. ',' → logprob: -8.2843656539917
    7. 't' → logprob: -8.4093656539917
    8. '   ' → logprob: -8.5343656539917
    9. '#' → logprob: -8.5343656539917
    10. '```' → logprob: -8.5343656539917

Token 89: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05631932616233826
    2. '
' → logprob: -3.181319236755371
    3. '```' → logprob: -5.431319236755371
    4. '\n' → logprob: -5.681319236755371
    5. '    
' → logprob: -6.181319236755371
    6. ')' → logprob: -6.806319236755371
    7. '       ' → logprob: -7.681319236755371
    8. ')
' → logprob: -7.681319236755371
    9. '  
' → logprob: -7.931319236755371
    10. ':' → logprob: -8.681319236755371

Token 90: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0800851508975029
    2. '       ' → logprob: -3.080085039138794
    3. '    ' → logprob: -4.580085277557373
    4. '```' → logprob: -5.330085277557373
    5. ' ' → logprob: -5.580085277557373
    6. 'A' → logprob: -5.830085277557373
    7. '    
' → logprob: -6.080085277557373
    8. ' 
' → logprob: -6.455085277557373
    9. '"""' → logprob: -6.955085277557373
    10. '  ' → logprob: -7.330085277557373

Token 91: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' (adapté à ' A') → logprob: -0.19063106179237366
    2. ' A' → logprob: -2.065631151199341
    3. '   ' → logprob: -3.065631151199341
    4. '       ' → logprob: -10.065630912780762
    5. '  ' → logprob: -10.315630912780762
    6. '```' → logprob: -10.315630912780762
    7. '
' → logprob: -10.440630912780762
    8. '    ' → logprob: -10.440630912780762
    9. ' ' → logprob: -11.190630912780762
    10. '    
' → logprob: -12.565630912780762

Token 92: ' (' (ID: 350)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.7129794359207153
    2. ' (' → logprob: -1.0879794359207153
    3. ':' → logprob: -2.337979316711426
    4. ' :' → logprob: -3.712979316711426
    5. ' ):' → logprob: -3.962979316711426
    6. ')' → logprob: -4.087979316711426
    7. ':int' → logprob: -5.087979316711426
    8. '(int' → logprob: -5.712979316711426
    9. '   ' → logprob: -5.837979316711426
    10. ' ' → logprob: -6.337979316711426

Token 93: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0001757696009008214
    2. ' int' → logprob: -8.875175476074219
    3. ')' → logprob: -10.250175476074219
    4. ':int' → logprob: -15.500175476074219
    5. '[int' → logprob: -15.875175476074219
    6. '):' → logprob: -16.50017547607422
    7. '=int' → logprob: -16.87517547607422
    8. ' )' → logprob: -17.00017547607422
    9. ']int' → logprob: -17.25017547607422
    10. '):
' → logprob: -17.37517547607422

Token 94: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00023333763238042593
    2. ')' → logprob: -8.50023365020752
    3. ' ):' → logprob: -11.37523365020752
    4. ':' → logprob: -11.87523365020752
    5. '):
' → logprob: -12.12523365020752
    6. '   ' → logprob: -12.50023365020752
    7. '```' → logprob: -13.75023365020752
    8. '):

' → logprob: -15.00023365020752
    9. ''):' → logprob: -15.37523365020752
    10. ' ' → logprob: -15.37523365020752

Token 95: ' D' (ID: 415)
  Prédit: ' Pu'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' Pu' → logprob: -0.28087133169174194
    2. 'Pu' → logprob: -1.6558713912963867
    3. ' La' → logprob: -3.0308713912963867
    4. 'La' → logprob: -5.655871391296387
    5. ' puissance' → logprob: -7.280871391296387
    6. ' ' → logprob: -7.905871391296387
    7. 'pu' → logprob: -8.405871391296387
    8. '   ' → logprob: -9.030871391296387
    9. '  ' → logprob: -9.030871391296387
    10. ' ' → logprob: -9.280871391296387

Token 96: 'ég' (ID: 6634)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7857227921485901
    2. ' puissance' → logprob: -1.7857227325439453
    3. 'attaque' → logprob: -2.1607227325439453
    4. ''' → logprob: -2.5357227325439453
    5. 'pu' → logprob: -3.1607227325439453
    6. 'e' → logprob: -3.2857227325439453
    7. '       ' → logprob: -4.285722732543945
    8. 'é' → logprob: -4.535722732543945
    9. ' la' → logprob: -4.660722732543945
    10. ' attaque' → logprob: -4.910722732543945

Token 97: 'âts' (ID: 181633)
  Prédit: 'âts'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'âts' → logprob: -0.016769276931881905
    2. 'ât' → logprob: -4.2667694091796875
    3. 'ats' → logprob: -6.1417694091796875
    4. '   ' → logprob: -8.016769409179688
    5. 'â' → logprob: -10.141769409179688
    6. 'at' → logprob: -10.766769409179688
    7. '       ' → logprob: -11.766769409179688
    8. '  ' → logprob: -11.891769409179688
    9. 't' → logprob: -12.391769409179688
    10. 'āts' → logprob: -12.516769409179688

Token 98: ' infl' (ID: 5732)
  Prédit: ' infl'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' infl' → logprob: -0.8976176977157593
    2. ' par' → logprob: -1.0226176977157593
    3. 'infl' → logprob: -2.272617816925049
    4. ' )' → logprob: -3.272617816925049
    5. ')' → logprob: -3.272617816925049
    6. '   ' → logprob: -3.522617816925049
    7. ' que' → logprob: -4.522617816925049
    8. 'par' → logprob: -5.272617816925049
    9. '_' → logprob: -7.147617816925049
    10. ' maximum' → logprob: -7.397617816925049

Token 99: 'ig' (ID: 343)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.07032974064350128
    2. 'ig' → logprob: -2.8203296661376953
    3. 'uent' → logprob: -6.445329666137695
    4. '   ' → logprob: -6.820329666137695
    5. 'agés' → logprob: -7.070329666137695
    6. 'iges' → logprob: -7.445329666137695
    7. 'ue' → logprob: -7.570329666137695
    8. 'uen' → logprob: -7.570329666137695
    9. 'ues' → logprob: -7.570329666137695
    10. ' u' → logprob: -8.070329666137695

Token 100: 'és' (ID: 1756)
  Prédit: 'és'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'és' → logprob: -0.1237335354089737
    2. 'é' → logprob: -2.7487335205078125
    3. 'es' → logprob: -3.7487335205078125
    4. 'e' → logprob: -4.2487335205078125
    5. 'er' → logprob: -4.3737335205078125
    6. 'ent' → logprob: -7.3737335205078125
    7. '   ' → logprob: -7.7487335205078125
    8. 'ées' → logprob: -7.7487335205078125
    9. 'u' → logprob: -9.123733520507812
    10. 's' → logprob: -9.248733520507812

Token 101: ' par' (ID: 686)
  Prédit: ' par'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' par' → logprob: -0.05342304706573486
    2. '   ' → logprob: -3.8034229278564453
    3. 'par' → logprob: -4.053422927856445
    4. ' à' → logprob: -5.178422927856445
    5. ')' → logprob: -5.553422927856445
    6. ' )' → logprob: -6.178422927856445
    7. '       ' → logprob: -8.803422927856445
    8. '    
' → logprob: -9.053422927856445
    9. ' ' → logprob: -9.553422927856445
    10. 'à' → logprob: -9.678422927856445

Token 102: ' une' (ID: 2463)
  Prédit: 'attaque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'attaque' → logprob: -0.3308423161506653
    2. ' attaque' → logprob: -2.0808422565460205
    3. ' une' → logprob: -2.4558422565460205
    4. 'une' → logprob: -2.8308422565460205
    5. ' ' → logprob: -5.3308424949646
    6. ' chaque' → logprob: -5.8308424949646
    7. 'att' → logprob: -6.3308424949646
    8. '   ' → logprob: -7.3308424949646
    9. 'atta' → logprob: -7.9558424949646
    10. ' atta' → logprob: -8.580842018127441

Token 103: ' attaque' (ID: 166229)
  Prédit: 'attaque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'attaque' → logprob: -0.04879537597298622
    2. ' attaque' → logprob: -3.173795461654663
    3. ' seule' → logprob: -5.298795223236084
    4. 'atta' → logprob: -7.673795223236084
    5. 'att' → logprob: -9.298795700073242
    6. 'se' → logprob: -9.673795700073242
    7. ' ' → logprob: -9.923795700073242
    8. '   ' → logprob: -10.548795700073242
    9. ' unique' → logprob: -10.798795700073242
    10. 'unique' → logprob: -11.423795700073242

Token 104: '.

' (ID: 364)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9773032665252686
    2. '):' → logprob: -1.1023032665252686
    3. '):
' → logprob: -1.8523032665252686
    4. ')' → logprob: -2.1023032665252686
    5. ')
' → logprob: -5.977303504943848
    6. '.' → logprob: -6.227303504943848
    7. '):

' → logprob: -6.477303504943848
    8. 'def' → logprob: -6.477303504943848
    9. '):
' → logprob: -7.227303504943848
    10. '```' → logprob: -7.227303504943848

Token 105: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.021780231967568398
    2. '"""
' → logprob: -5.146780014038086
    3. ')' → logprob: -5.271780014038086
    4. '
' → logprob: -5.896780014038086
    5. ')
' → logprob: -6.271780014038086
    6. '"""' → logprob: -6.271780014038086
    7. '    
' → logprob: -6.396780014038086
    8. '\n' → logprob: -7.146780014038086
    9. '  
' → logprob: -7.646780014038086
    10. '```' → logprob: -7.896780014038086

Token 106: ' Returns' (ID: 9609)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.024694742634892464
    2. '
' → logprob: -4.274694919586182
    3. '"""
' → logprob: -6.024694919586182
    4. '"""' → logprob: -6.399694919586182
    5. 'if' → logprob: -6.649694919586182
    6. ' if' → logprob: -6.649694919586182
    7. ' """
' → logprob: -6.899694919586182
    8. 'return' → logprob: -7.399694919586182
    9. '    
' → logprob: -7.524694919586182
    10. '```' → logprob: -7.899694919586182

Token 107: ':
' (ID: 734)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9496893882751465
    2. ':' → logprob: -1.3246893882751465
    3. ' (' → logprob: -1.6996893882751465
    4. ' H' → logprob: -2.6996893882751465
    5. ' :' → logprob: -3.4496893882751465
    6. 'H' → logprob: -4.0746893882751465
    7. ' int' → logprob: -4.4496893882751465
    8. '(int' → logprob: -4.8246893882751465
    9. '  ' → logprob: -5.0746893882751465
    10. 'int' → logprob: -5.3246893882751465

Token 108: '       ' (ID: 309)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.25015971064567566
    2. '       ' → logprob: -2.750159740447998
    3. '   ' → logprob: -2.875159740447998
    4. ' (' → logprob: -3.000159740447998
    5. 'int' → logprob: -3.000159740447998
    6. '(int' → logprob: -6.875159740447998
    7. '    ' → logprob: -8.37515926361084
    8. ' H' → logprob: -9.37515926361084
    9. '```' → logprob: -11.62515926361084
    10. '        ' → logprob: -11.75015926361084

Token 109: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' (adapté à ' int') → logprob: -0.0002028251619776711
    2. ' int' → logprob: -8.625203132629395
    3. '   ' → logprob: -10.750203132629395
    4. '(int' → logprob: -13.500203132629395
    5. '```' → logprob: -15.625203132629395
    6. '       ' → logprob: -16.250202178955078
    7. 'return' → logprob: -16.750202178955078
    8. '
' → logprob: -17.750202178955078
    9. '`' → logprob: -17.875202178955078
    10. 'float' → logprob: -18.125202178955078

Token 110: ':' (ID: 25)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.904291570186615
    2. ' H' → logprob: -1.4042916297912598
    3. ':' → logprob: -2.0292916297912598
    4. '
' → logprob: -2.9042916297912598
    5. ' (' → logprob: -3.2792916297912598
    6. '    
' → logprob: -4.15429162979126
    7. ' 
' → logprob: -4.15429162979126
    8. '```' → logprob: -4.52929162979126
    9. '(H' → logprob: -4.65429162979126
    10. 'H' → logprob: -4.77929162979126

Token 111: ' Nombre' (ID: 70208)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.0945713222026825
    2. '(H' → logprob: -2.719571352005005
    3. ' H' → logprob: -4.094571113586426
    4. '   ' → logprob: -5.094571113586426
    5. 'H' → logprob: -7.344571113586426
    6. 'Le' → logprob: -8.344571113586426
    7. ' le' → logprob: -8.594571113586426
    8. ' Le' → logprob: -8.594571113586426
    9. ' nombre' → logprob: -9.969571113586426
    10. '    ' → logprob: -10.094571113586426

Token 112: ' minimal' (ID: 19957)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.19189801812171936
    2. ' (' → logprob: -2.1918981075286865
    3. '   ' → logprob: -3.3168981075286865
    4. ' nécessaire' → logprob: -4.691897869110107
    5. ' minimal' → logprob: -5.191897869110107
    6. ' de' → logprob: -5.316897869110107
    7. ' minimum' → logprob: -5.691897869110107
    8. '_' → logprob: -6.691897869110107
    9. 'd' → logprob: -7.441897869110107
    10. ' des' → logprob: -8.066898345947266

Token 113: ' d' (ID: 272)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.31592944264411926
    2. ' (' → logprob: -1.8159294128417969
    3. ' d' → logprob: -2.315929412841797
    4. '(H' → logprob: -5.815929412841797
    5. ' nécessaire' → logprob: -6.440929412841797
    6. '       ' → logprob: -6.565929412841797
    7. 'd' → logprob: -7.065929412841797
    8. '(' → logprob: -7.315929412841797
    9. ' de' → logprob: -7.690929412841797
    10. '((' → logprob: -7.815929412841797

Token 114: ''' (ID: 6)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.1527237594127655
    2. ' d' → logprob: -2.152723789215088
    3. ' ' → logprob: -3.902723789215088
    4. ' attaques' → logprob: -6.277723789215088
    5. ''' → logprob: -6.777723789215088
    6. '   ' → logprob: -7.527723789215088
    7. ' _' → logprob: -7.902723789215088
    8. 's' → logprob: -8.27772331237793
    9. ' a' → logprob: -8.65272331237793
    10. ' ' → logprob: -8.77772331237793

Token 115: 'atta' (ID: 21246)
  Prédit: 'atta'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'atta' → logprob: -0.07160061597824097
    2. ' attaques' → logprob: -2.6966006755828857
    3. ' atta' → logprob: -8.071600914001465
    4. '_' → logprob: -8.196600914001465
    5. 'att' → logprob: -8.446600914001465
    6. ''' → logprob: -8.446600914001465
    7. 'attaque' → logprob: -8.821600914001465
    8. '   ' → logprob: -8.946600914001465
    9. '```' → logprob: -9.196600914001465
    10. ' ' → logprob: -10.321600914001465

Token 116: 'ques' (ID: 3531)
  Prédit: 'ques'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ques' → logprob: -3.702754474943504e-05
    2. 'qu' → logprob: -11.37503719329834
    3. 'q' → logprob: -11.50003719329834
    4. 'que' → logprob: -11.87503719329834
    5. 'tes' → logprob: -12.87503719329834
    6. 'quer' → logprob: -13.00003719329834
    7. 't' → logprob: -14.75003719329834
    8. 's' → logprob: -14.87503719329834
    9. '``' → logprob: -14.87503719329834
    10. '```' → logprob: -15.00003719329834

Token 117: ' nécessaires' (ID: 74402)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.019178293645381927
    2. '
' → logprob: -4.89417839050293
    3. '    
' → logprob: -5.01917839050293
    4. '       ' → logprob: -6.51917839050293
    5. ' nécessaires' → logprob: -6.51917839050293
    6. ':
' → logprob: -8.14417839050293
    7. '        
' → logprob: -8.39417839050293
    8. ' nécessaire' → logprob: -8.89417839050293
    9. '```' → logprob: -8.89417839050293
    10. ':' → logprob: -9.01917839050293

Token 118: ' pour' (ID: 1930)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0013053566217422485
    2. ':' → logprob: -6.87630558013916
    3. '
' → logprob: -9.00130558013916
    4. ':
' → logprob: -10.12630558013916
    5. '    
' → logprob: -10.37630558013916
    6. 'def' → logprob: -10.50130558013916
    7. '    ' → logprob: -11.25130558013916
    8. ' :' → logprob: -11.75130558013916
    9. '  ' → logprob: -11.87630558013916
    10. ')' → logprob: -12.50130558013916

Token 119: ' vain' (ID: 34253)
  Prédit: 'vain'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vain' → logprob: -0.05502840504050255
    2. ' vain' → logprob: -3.4300284385681152
    3. '   ' → logprob: -4.180028438568115
    4. 'b' → logprob: -5.805028438568115
    5. 'v' → logprob: -7.305028438568115
    6. 'atte' → logprob: -8.055027961730957
    7. 'dé' → logprob: -8.555027961730957
    8. 'def' → logprob: -8.680027961730957
    9. 'd' → logprob: -8.680027961730957
    10. 'le' → logprob: -8.930027961730957

Token 120: 'cre' (ID: 894)
  Prédit: 'ir'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ir' → logprob: -0.3247542679309845
    2. 'rir' → logprob: -1.699754238128662
    3. 'cre' → logprob: -3.199754238128662
    4. 'vir' → logprob: -4.199754238128662
    5. '   ' → logprob: -4.699754238128662
    6. 'tir' → logprob: -5.074754238128662
    7. 'er' → logprob: -5.324754238128662
    8. 'cir' → logprob: -5.699754238128662
    9. 'pir' → logprob: -6.199754238128662
    10. 'fir' → logprob: -6.574754238128662

Token 121: ' le' (ID: 505)
  Prédit: ' le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.06352893263101578
    2. 'le' → logprob: -2.8135290145874023
    3. ' ' → logprob: -7.063529014587402
    4. '_le' → logprob: -7.563529014587402
    5. ' ' → logprob: -9.188529014587402
    6. '_' → logprob: -10.063529014587402
    7. ' un' → logprob: -11.563529014587402
    8. 'l' → logprob: -11.688529014587402
    9. ' H' → logprob: -12.188529014587402
    10. 'mon' → logprob: -13.063529014587402

Token 122: ' mon' (ID: 1767)
  Prédit: 'mon'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'mon' → logprob: -0.03343820571899414
    2. ' mon' → logprob: -3.533438205718994
    3. 'monster' → logprob: -5.783438205718994
    4. ' monster' → logprob: -8.033437728881836
    5. 'mons' → logprob: -9.533437728881836
    6. '```' → logprob: -9.908437728881836
    7. ' monst' → logprob: -10.533437728881836
    8. ' мон' → logprob: -11.095937728881836
    9. ' monstr' → logprob: -11.095937728881836
    10. '(mon' → logprob: -11.470937728881836

Token 123: 'stre' (ID: 26826)
  Prédit: 'stre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stre' → logprob: -0.0006277294596657157
    2. 'st' → logprob: -8.000627517700195
    3. 'tre' → logprob: -9.000627517700195
    4. '   ' → logprob: -9.875627517700195
    5. '       ' → logprob: -10.375627517700195
    6. 'ustre' → logprob: -12.000627517700195
    7. 'str' → logprob: -12.250627517700195
    8. '_st' → logprob: -12.250627517700195
    9. '```' → logprob: -12.375627517700195
    10. '#' → logprob: -12.500627517700195

Token 124: '.
' (ID: 558)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.073148488998413
    2. '   ' → logprob: -1.073148488998413
    3. ':
' → logprob: -1.198148488998413
    4. '):
' → logprob: -4.948148727416992
    5. ')' → logprob: -5.948148727416992
    6. '):' → logprob: -5.948148727416992
    7. '```' → logprob: -7.448148727416992
    8. '.' → logprob: -7.823148727416992
    9. '.
' → logprob: -8.573148727416992
    10. ')
' → logprob: -8.573148727416992

Token 125: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06639043986797333
    2. '"""' → logprob: -2.8163905143737793
    3. '"""
' → logprob: -5.816390514373779
    4. '
' → logprob: -7.066390514373779
    5. '    
' → logprob: -8.191390037536621
    6. '""' → logprob: -9.316390037536621
    7. '```' → logprob: -9.566390037536621
    8. ')' → logprob: -10.191390037536621
    9. '"' → logprob: -10.691390037536621
    10. ' """' → logprob: -10.691390037536621

Token 126: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.060716040432453156
    2. '"""' → logprob: -2.935716152191162
    3. '"""
' (adapté à ' """
') → logprob: -5.685716152191162
    4. '
' → logprob: -7.060716152191162
    5. '```' → logprob: -7.185716152191162
    6. '    
' → logprob: -8.435715675354004
    7. ')' → logprob: -9.060715675354004
    8. 'return' → logprob: -9.185715675354004
    9. 'if' → logprob: -9.435715675354004
    10. '    ' → logprob: -9.685715675354004

Token 127: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.003088231896981597
    2. 'return' → logprob: -5.878087997436523
    3. '
' → logprob: -8.753087997436523
    4. ' return' → logprob: -9.253087997436523
    5. '    
' → logprob: -11.378087997436523
    6. 'if' → logprob: -11.628087997436523
    7. '```' → logprob: -12.378087997436523
    8. 'n' → logprob: -13.378087997436523
    9. ' if' → logprob: -14.003087997436523
    10. 'def' → logprob: -14.378087997436523

Token 128: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.014941957779228687
    2. '   ' → logprob: -5.014942169189453
    3. 'if' → logprob: -5.764942169189453
    4. ' return' → logprob: -6.014942169189453
    5. 'import' → logprob: -6.639942169189453
    6. 'att' → logprob: -6.889942169189453
    7. 'attack' → logprob: -9.139942169189453
    8. ' attacks' → logprob: -9.264942169189453
    9. 'result' → logprob: -10.639942169189453
    10. ' if' → logprob: -11.264942169189453

Token 129: ' Util' (ID: 13564)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.5720571875572205
    2. ' return' → logprob: -1.5720572471618652
    3. ' attacks' → logprob: -2.0720572471618652
    4. 'att' → logprob: -3.0720572471618652
    5. ' (' → logprob: -4.072057247161865
    6. 'if' → logprob: -4.822057247161865
    7. 'import' → logprob: -4.822057247161865
    8. ' if' → logprob: -5.322057247161865
    9. 'result' → logprob: -5.447057247161865
    10. 'attack' → logprob: -5.447057247161865

Token 130: 'isation' (ID: 6993)
  Prédit: 'iser'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iser' → logprob: -0.5449880361557007
    2. 'ise' → logprob: -0.9199880361557007
    3. 'isé' → logprob: -5.04498815536499
    4. 'er' → logprob: -5.79498815536499
    5. 'isez' → logprob: -5.79498815536499
    6. '   ' → logprob: -5.91998815536499
    7. 'ises' → logprob: -6.04498815536499
    8. 'isation' → logprob: -6.54498815536499
    9. 'isa' → logprob: -7.66998815536499
    10. 'isons' → logprob: -8.044987678527832

Token 131: ' de' (ID: 334)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.764125645160675
    2. '   ' → logprob: -0.889125645160675
    3. ' H' → logprob: -2.5141255855560303
    4. ' de' → logprob: -4.014125823974609
    5. '(H' → logprob: -4.514125823974609
    6. '(' → logprob: -5.514125823974609
    7. '    ' → logprob: -5.764125823974609
    8. 'de' → logprob: -6.889125823974609
    9. ' return' → logprob: -7.014125823974609
    10. ' d' → logprob: -7.264125823974609

Token 132: ' la' (ID: 557)
  Prédit: '(H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(H' → logprob: -0.0027912072837352753
    2. '-' → logprob: -6.752791404724121
    3. ' (' → logprob: -7.002791404724121
    4. '-H' → logprob: -8.377791404724121
    5. ' -' → logprob: -8.752791404724121
    6. 'import' → logprob: -9.377791404724121
    7. '(-' → logprob: -9.502791404724121
    8. '((' → logprob: -10.252791404724121
    9. '
' → logprob: -10.252791404724121
    10. ' ' → logprob: -11.127791404724121

Token 133: ' "' (ID: 392)
  Prédit: '(H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(H' → logprob: -0.02008339948952198
    2. '-' → logprob: -4.020083427429199
    3. ' (' → logprob: -7.395083427429199
    4. 'div' → logprob: -7.520083427429199
    5. '-H' → logprob: -8.3950834274292
    6. 'division' → logprob: -8.7700834274292
    7. ' -' → logprob: -9.2700834274292
    8. '(' → logprob: -9.3950834274292
    9. '-(' → logprob: -9.7700834274292
    10. 'import' → logprob: -10.3950834274292

Token 134: 'division' (ID: 50596)
  Prédit: '(H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(H' → logprob: -0.11427135020494461
    2. '-' → logprob: -2.364271402359009
    3. '-H' → logprob: -4.86427116394043
    4. ' -' → logprob: -6.23927116394043
    5. 'div' → logprob: -6.98927116394043
    6. '-(' → logprob: -7.36427116394043
    7. ' (' → logprob: -7.36427116394043
    8. '-div' → logprob: -7.61427116394043
    9. 'division' → logprob: -8.11427116394043
    10. '(-' → logprob: -8.11427116394043

Token 135: ' plafond' (ID: 114829)
  Prédit: ' entière'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' entière' → logprob: -0.251003623008728
    2. 'ent' → logprob: -1.876003623008728
    3. '   ' → logprob: -3.3760037422180176
    4. ' ent' → logprob: -4.251003742218018
    5. '  ' → logprob: -5.501003742218018
    6. 'enti' → logprob: -6.126003742218018
    7. ' ' → logprob: -6.501003742218018
    8. '_ent' → logprob: -6.626003742218018
    9. '//' → logprob: -6.876003742218018
    10. 'import' → logprob: -6.876003742218018

Token 136: '"' (ID: 1)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2590388357639313
    2. '"' → logprob: -1.5090388059616089
    3. ' (' → logprob: -5.884038925170898
    4. 'def' → logprob: -7.259038925170898
    5. 'import' → logprob: -7.384038925170898
    6. '(H' → logprob: -7.384038925170898
    7. '  ' → logprob: -7.509038925170898
    8. ' "' → logprob: -8.384038925170898
    9. '    ' → logprob: -8.509038925170898
    10. ' ' → logprob: -8.759038925170898

Token 137: ' pour' (ID: 1930)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006098719779402018
    2. '    
' → logprob: -6.506098747253418
    3. 'return' → logprob: -6.631098747253418
    4. '
' → logprob: -6.631098747253418
    5. ' return' → logprob: -7.756098747253418
    6. ':' → logprob: -8.131098747253418
    7. '   
' → logprob: -8.256098747253418
    8. ' 
' → logprob: -8.881098747253418
    9. 'n' → logprob: -9.006098747253418
    10. '    ' → logprob: -9.256098747253418

Token 138: ' déterminer' (ID: 122024)
  Prédit: ' calcul'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' calcul' → logprob: -0.3783594071865082
    2. ' return' → logprob: -2.003359317779541
    3. 'calcul' → logprob: -3.128359317779541
    4. 'return' → logprob: -3.253359317779541
    5. ' déterminer' → logprob: -3.753359317779541
    6. ' retourner' → logprob: -4.253359317779541
    7. '   ' → logprob: -4.253359317779541
    8. ' obtenir' → logprob: -4.628359317779541
    9. ' s' → logprob: -5.128359317779541
    10. ' éviter' → logprob: -5.378359317779541

Token 139: ' le' (ID: 505)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7372012138366699
    2. ' le' → logprob: -0.7372012138366699
    3. ' (' → logprob: -3.23720121383667
    4. 'le' → logprob: -6.61220121383667
    5. '(' → logprob: -7.86220121383667
    6. ' nombre' → logprob: -8.362201690673828
    7. 'nombre' → logprob: -8.362201690673828
    8. '  ' → logprob: -8.737201690673828
    9. ' combien' → logprob: -8.862201690673828
    10. '((' → logprob: -9.112201690673828

Token 140: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.40119612216949463
    2. 'nombre' → logprob: -1.2761961221694946
    3. '   ' → logprob: -3.151196002960205
    4. 'import' → logprob: -5.651196002960205
    5. ' return' → logprob: -6.151196002960205
    6. 'return' → logprob: -6.401196002960205
    7. ' number' → logprob: -8.026196479797363
    8. ' nombres' → logprob: -8.526196479797363
    9. ' retour' → logprob: -9.276196479797363
    10. 'number' → logprob: -9.276196479797363

Token 141: ' d' (ID: 272)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6497544050216675
    2. ' d' → logprob: -0.7747544050216675
    3. 'd' → logprob: -4.774754524230957
    4. '    ' → logprob: -6.149754524230957
    5. '_' → logprob: -6.274754524230957
    6. '  ' → logprob: -6.524754524230957
    7. ' nécessaire' → logprob: -6.524754524230957
    8. ' de' → logprob: -7.274754524230957
    9. ' ' → logprob: -8.149754524230957
    10. '_d' → logprob: -9.274754524230957

Token 142: ''' (ID: 6)
  Prédit: 'atta'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'atta' → logprob: -0.5940951704978943
    2. '_' → logprob: -1.344095230102539
    3. ' attaques' → logprob: -1.844095230102539
    4. '   ' → logprob: -4.594095230102539
    5. ' d' → logprob: -4.719095230102539
    6. ' atta' → logprob: -6.344095230102539
    7. 'd' → logprob: -6.594095230102539
    8. ' ' → logprob: -6.719095230102539
    9. ''' → logprob: -6.969095230102539
    10. 'att' → logprob: -7.344095230102539

Token 143: 'atta' (ID: 21246)
  Prédit: 'atta'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'atta' → logprob: -0.015066316351294518
    2. ' attaques' → logprob: -4.265066146850586
    3. 'attaque' → logprob: -8.265066146850586
    4. 'att' → logprob: -8.890066146850586
    5. ' atta' → logprob: -9.390066146850586
    6. '   ' → logprob: -9.515066146850586
    7. ''' → logprob: -10.015066146850586
    8. '```' → logprob: -10.265066146850586
    9. '_' → logprob: -10.390066146850586
    10. '(' → logprob: -10.515066146850586

Token 144: 'ques' (ID: 3531)
  Prédit: 'ques'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ques' → logprob: -0.0038683549501001835
    2. 'q' → logprob: -6.128868579864502
    3. 'qu' → logprob: -7.378868579864502
    4. 'que' → logprob: -7.753868579864502
    5. 'c' → logprob: -8.378868103027344
    6. 'tes' → logprob: -9.378868103027344
    7. 't' → logprob: -9.878868103027344
    8. 's' → logprob: -10.628868103027344
    9. '``' → logprob: -11.003868103027344
    10. 'u' → logprob: -11.128868103027344

Token 145: ' :
' (ID: 10039)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00402508769184351
    2. 'return' → logprob: -5.629024982452393
    3. ' return' → logprob: -7.879024982452393
    4. '    
' → logprob: -11.50402545928955
    5. '    ' → logprob: -12.12902545928955
    6. '
' → logprob: -12.25402545928955
    7. 'att' → logprob: -12.62902545928955
    8. 'needed' → logprob: -12.62902545928955
    9. 'n' → logprob: -12.75402545928955
    10. '  ' → logprob: -13.00402545928955

Token 146: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10273674130439758
    2. ' return' → logprob: -2.977736711502075
    3. 'return' → logprob: -3.102736711502075
    4. '    
' → logprob: -7.102736949920654
    5. '
' → logprob: -8.102736473083496
    6. 'import' → logprob: -8.477736473083496
    7. ' (' → logprob: -9.227736473083496
    8. '    ' → logprob: -9.602736473083496
    9. ' attacks' → logprob: -9.602736473083496
    10. '   
' → logprob: -10.352736473083496

Token 147: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.059679850935935974
    2. '   ' → logprob: -3.3096797466278076
    3. ' return' → logprob: -4.059679985046387
    4. 'att' → logprob: -6.309679985046387
    5. ' (' → logprob: -7.559679985046387
    6. 'import' → logprob: -7.809679985046387
    7. '(' → logprob: -8.184679985046387
    8. ' attacks' → logprob: -8.434679985046387
    9. 'attack' → logprob: -8.559679985046387
    10. 'num' → logprob: -8.809679985046387

Token 148: ' (' (ID: 350)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.8598830103874207
    2. ' return' → logprob: -1.1098830699920654
    3. '   ' → logprob: -1.7348830699920654
    4. ' attacks' → logprob: -3.2348830699920654
    5. 'att' → logprob: -4.234882831573486
    6. ' (' → logprob: -4.609882831573486
    7. 'import' → logprob: -5.734882831573486
    8. 'attack' → logprob: -7.359882831573486
    9. 'num' → logprob: -7.734882831573486
    10. 'result' → logprob: -7.734882831573486

Token 149: 'H' (ID: 39)
  Prédit: 'H'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.0005131178768351674
    2. '(H' → logprob: -8.000513076782227
    3. ' H' → logprob: -9.125513076782227
    4. '-H' → logprob: -9.875513076782227
    5. '   ' → logprob: -11.875513076782227
    6. '-' → logprob: -12.250513076782227
    7. '	H' → logprob: -13.750513076782227
    8. ' ' → logprob: -13.750513076782227
    9. ')' → logprob: -14.000513076782227
    10. ' -' → logprob: -14.625513076782227

Token 150: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.16058428585529327
    2. '+' → logprob: -1.9105843305587769
    3. '+A' → logprob: -8.160584449768066
    4. '+(' → logprob: -10.410584449768066
    5. '-' → logprob: -11.035584449768066
    6. ' ' → logprob: -11.910584449768066
    7. '   ' → logprob: -12.285584449768066
    8. '  ' → logprob: -12.535584449768066
    9. '+B' → logprob: -13.160584449768066
    10. '+C' → logprob: -13.410584449768066

Token 151: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.17982201278209686
    2. ' A' → logprob: -1.8048219680786133
    3. '(A' → logprob: -10.179821968078613
    4. ' (' → logprob: -10.429821968078613
    5. ' ' → logprob: -12.054821968078613
    6. '   ' → logprob: -13.429821968078613
    7. '(' → logprob: -14.304821968078613
    8. '	A' → logprob: -14.429821968078613
    9. ')' → logprob: -14.804821968078613
    10. ' -' → logprob: -15.429821968078613

Token 152: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.2519456744194031
    2. '-' → logprob: -1.5019457340240479
    3. ')' → logprob: -11.876945495605469
    4. '   ' → logprob: -12.376945495605469
    5. ' ' → logprob: -12.876945495605469
    6. '  ' → logprob: -13.876945495605469
    7. '1' → logprob: -13.876945495605469
    8. '```' → logprob: -14.501945495605469
    9. '
' → logprob: -16.37694549560547
    10. ' ' → logprob: -16.75194549560547

Token 153: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -8.518582762917504e-05
    2. ' ' → logprob: -9.37508487701416
    3. '-' → logprob: -16.000085830688477
    4. ')' → logprob: -16.125085830688477
    5. '   ' → logprob: -16.750085830688477
    6. '```' → logprob: -17.000085830688477
    7. ' -' → logprob: -19.000085830688477
    8. '  ' → logprob: -19.375085830688477
    9. 'def' → logprob: -19.875085830688477
    10. '１' → logprob: -20.000085830688477

Token 154: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.1888679839321412e-05
    2. ' ' → logprob: -10.750021934509277
    3. '   ' → logprob: -15.625021934509277
    4. ')' → logprob: -15.875021934509277
    5. '```' → logprob: -17.12502098083496
    6. '  ' → logprob: -18.12502098083496
    7. 'def' → logprob: -18.50002098083496
    8. '
' → logprob: -19.00002098083496
    9. '

' → logprob: -19.12502098083496
    10. '۱' → logprob: -19.12502098083496

Token 155: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00020914296328555793
    2. ')//' → logprob: -8.625208854675293
    3. ' )' → logprob: -10.500208854675293
    4. '   ' → logprob: -14.000208854675293
    5. ')
' → logprob: -14.250208854675293
    6. '//' → logprob: -15.125208854675293
    7. ' //' → logprob: -16.75020980834961
    8. ' ' → logprob: -17.00020980834961
    9. '）' → logprob: -17.12520980834961
    10. '```' → logprob: -17.37520980834961

Token 156: ' //' (ID: 602)
  Prédit: ' //'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.6131235957145691
    2. '//' → logprob: -1.3631236553192139
    3. ')' → logprob: -1.6131236553192139
    4. ')//' → logprob: -6.863123416900635
    5. '   ' → logprob: -6.988123416900635
    6. ' )' → logprob: -7.738123416900635
    7. ' ' → logprob: -7.988123416900635
    8. '#' → logprob: -8.613123893737793
    9. '```' → logprob: -8.738123893737793
    10. ' //
' → logprob: -9.988123893737793

Token 157: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.1002098023891449
    2. ' A' → logprob: -2.3502097129821777
    3. '   ' → logprob: -13.225210189819336
    4. ' ' → logprob: -14.100210189819336
    5. '	A' → logprob: -14.975210189819336
    6. '  ' → logprob: -15.475210189819336
    7. ' ' → logprob: -16.850210189819336
    8. '>A' → logprob: -18.225210189819336
    9. '    ' → logprob: -18.475210189819336
    10. '```' → logprob: -18.975210189819336

Token 158: ' équ' (ID: 18899)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014310763217508793
    2. '
' → logprob: -4.639310836791992
    3. '<|end|>' → logprob: -5.764310836791992
    4. 'return' → logprob: -7.139310836791992
    5. ' return' → logprob: -8.139310836791992
    6. ')' → logprob: -9.389310836791992
    7. '	return' → logprob: -9.639310836791992
    8. '    
' → logprob: -9.764310836791992
    9. '<|end|>' → logprob: -9.889310836791992
    10. '```' → logprob: -11.389310836791992

Token 159: 'iv' (ID: 349)
  Prédit: 'iv'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iv' → logprob: -4.723352049040841e-06
    2. 'ivalent' → logprob: -12.750004768371582
    3. 'ival' → logprob: -14.500004768371582
    4. '=' → logprob: -14.500004768371582
    5. 'v' → logprob: -16.125003814697266
    6. 'a' → logprob: -16.125003814697266
    7. 'al' → logprob: -16.250003814697266
    8. 'i' → logprob: -16.375003814697266
    9. '   ' → logprob: -16.500003814697266
    10. '==' → logprob: -17.125003814697266

Token 160: 'aut' (ID: 1828)
  Prédit: 'aut'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aut' → logprob: -0.21660859882831573
    2. 'al' → logprob: -2.3416085243225098
    3. 'ale' → logprob: -2.5916085243225098
    4. 'aux' → logprob: -4.84160852432251
    5. 'ault' → logprob: -4.84160852432251
    6. 'a' → logprob: -5.21660852432251
    7. 'alt' → logprob: -7.09160852432251
    8. 'alent' → logprob: -7.84160852432251
    9. '```' → logprob: -8.216609001159668
    10. '   ' → logprob: -9.091609001159668

Token 161: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.018594112247228622
    2. 'à' → logprob: -4.893594264984131
    3. ' to' → logprob: -5.643594264984131
    4. ' au' → logprob: -5.768594264984131
    5. '   ' → logprob: -5.893594264984131
    6. 'au' → logprob: -7.268594264984131
    7. 'to' → logprob: -8.143593788146973
    8. ' ' → logprob: -8.643593788146973
    9. ' a' → logprob: -9.143593788146973
    10. ''à' → logprob: -9.518593788146973

Token 162: ' math' (ID: 13324)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.8275294899940491
    2. '(H' → logprob: -1.7025294303894043
    3. ' (' → logprob: -2.5775294303894043
    4. ' math' → logprob: -3.0775294303894043
    5. 'la' → logprob: -3.2025294303894043
    6. 'div' → logprob: -3.4525294303894043
    7. 'calcul' → logprob: -3.5775294303894043
    8. ' calcul' → logprob: -3.8275294303894043
    9. ' -' → logprob: -3.9525294303894043
    10. ' div' → logprob: -4.077529430389404

Token 163: '.ceil' (ID: 60295)
  Prédit: '.ceil'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.ceil' → logprob: -0.0009918416617438197
    2. 'import' → logprob: -7.7509918212890625
    3. 'ceil' → logprob: -7.7509918212890625
    4. '.' → logprob: -11.250991821289062
    5. '-ce' → logprob: -11.625991821289062
    6. '.floor' → logprob: -11.750991821289062
    7. ' ceil' → logprob: -11.875991821289062
    8. '   ' → logprob: -12.000991821289062
    9. 'cé' → logprob: -12.000991821289062
    10. '```' → logprob: -12.000991821289062

Token 164: '(H' (ID: 20904)
  Prédit: '(H'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(H' → logprob: -0.08377114683389664
    2. '   ' → logprob: -3.208771228790283
    3. '((' → logprob: -3.958771228790283
    4. ' (' → logprob: -4.458771228790283
    5. '(' → logprob: -4.833771228790283
    6. ' return' → logprob: -7.708771228790283
    7. 'return' → logprob: -8.583770751953125
    8. 'def' → logprob: -9.083770751953125
    9. '(
' → logprob: -9.458770751953125
    10. ' ' → logprob: -9.458770751953125

Token 165: ' /' (ID: 820)
  Prédit: '/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '/' → logprob: -0.20717056095600128
    2. ' /' → logprob: -1.7071706056594849
    3. '   ' → logprob: -5.582170486450195
    4. '/H' → logprob: -6.957170486450195
    5. '/A' → logprob: -7.457170486450195
    6. ')' → logprob: -8.207170486450195
    7. '(H' → logprob: -9.332170486450195
    8. ' ' → logprob: -11.082170486450195
    9. '(A' → logprob: -11.457170486450195
    10. '/
' → logprob: -11.457170486450195

Token 166: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.06197004392743111
    2. ' A' → logprob: -2.8119699954986572
    3. '   ' → logprob: -13.811969757080078
    4. ' ' → logprob: -14.186969757080078
    5. '	A' → logprob: -14.561969757080078
    6. '  ' → logprob: -15.186969757080078
    7. ')' → logprob: -17.811969757080078
    8. ' ' → logprob: -17.811969757080078
    9. '>A' → logprob: -17.811969757080078
    10. '```' → logprob: -18.936969757080078

Token 167: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.0126840758603066e-05
    2. '   ' → logprob: -10.875040054321289
    3. ' )' → logprob: -11.125040054321289
    4. ')
' → logprob: -12.875040054321289
    5. 'def' → logprob: -13.125040054321289
    6. ')`' → logprob: -15.000040054321289
    7. '```' → logprob: -15.750040054321289
    8. ')
' → logprob: -16.00004005432129
    9. '))' → logprob: -16.00004005432129
    10. ')return' → logprob: -16.25004005432129

Token 168: ' sans' (ID: 9828)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009966674260795116
    2. '
' → logprob: -5.259966850280762
    3. '    
' → logprob: -5.509966850280762
    4. ' return' → logprob: -8.134966850280762
    5. 'return' → logprob: -8.134966850280762
    6. ' 
' → logprob: -10.634966850280762
    7. '  
' → logprob: -10.759966850280762
    8. '   
' → logprob: -10.759966850280762
    9. ')' → logprob: -11.634966850280762
    10. '	return' → logprob: -12.384966850280762

Token 169: ' importer' (ID: 124475)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.06854766607284546
    2. ' utiliser' → logprob: -3.6935477256774902
    3. 'util' → logprob: -3.9435477256774902
    4. ' importer' → logprob: -4.69354772567749
    5. ' import' → logprob: -4.81854772567749
    6. 'avoir' → logprob: -5.81854772567749
    7. ' avoir' → logprob: -7.06854772567749
    8. 'importe' → logprob: -8.443547248840332
    9. '```' → logprob: -8.693547248840332
    10. ' math' → logprob: -8.943547248840332

Token 170: ' de' (ID: 334)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.0006533435662277043
    2. 'math' → logprob: -7.500653266906738
    3. ' import' → logprob: -10.375653266906738
    4. 'er' → logprob: -10.875653266906738
    5. 'import' → logprob: -10.875653266906738
    6. ' de' → logprob: -11.875653266906738
    7. ' le' → logprob: -12.500653266906738
    8. ' ' → logprob: -12.750653266906738
    9. ' la' → logprob: -12.875653266906738
    10. ' ' → logprob: -13.000653266906738

Token 171: ' bibliothèque' (ID: 154070)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.018265709280967712
    2. 'math' → logprob: -4.018265724182129
    3. ' module' → logprob: -9.268265724182129
    4. 'module' → logprob: -11.518265724182129
    5. 'import' → logprob: -12.018265724182129
    6. ' modules' → logprob: -12.893265724182129
    7. ' import' → logprob: -13.518265724182129
    8. ' maths' → logprob: -14.768265724182129
    9. 'm' → logprob: -15.018265724182129
    10. 'cmath' → logprob: -15.143265724182129

Token 172: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06552240997552872
    2. '
' → logprob: -2.8155224323272705
    3. 'return' → logprob: -6.315522193908691
    4. ' return' → logprob: -6.940522193908691
    5. '    
' → logprob: -7.190522193908691
    6. ' 
' → logprob: -11.690522193908691
    7. '  
' → logprob: -12.940522193908691
    8. '   
' → logprob: -13.065522193908691
    9. '	return' → logprob: -13.440522193908691
    10. '
' → logprob: -13.440522193908691

Token 173: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0015118853189051151
    2. '
' → logprob: -6.876512050628662
    3. 'return' → logprob: -8.376511573791504
    4. '    
' → logprob: -8.376511573791504
    5. ' return' → logprob: -11.001511573791504
    6. '   ' → logprob: -14.001511573791504
    7. ' 
' → logprob: -14.876511573791504
    8. '  
' → logprob: -15.376511573791504
    9. '   
' → logprob: -15.751511573791504
    10. '```' → logprob: -16.25151252746582

Token 174: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.057918328791856766
    2. 'return' (adapté à ' return') → logprob: -2.9329183101654053
    3. ' return' → logprob: -5.807918548583984
    4. '
' → logprob: -11.432918548583984
    5. '    
' → logprob: -11.432918548583984
    6. '   ' → logprob: -12.557918548583984
    7. '    ' → logprob: -14.307918548583984
    8. '	return' → logprob: -14.682918548583984
    9. '```' → logprob: -14.682918548583984
    10. '  ' → logprob: -15.057918548583984

Token 175: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.048605188727378845
    2. '(H' → logprob: -3.04860520362854
    3. '   ' → logprob: -11.048604965209961
    4. ' ' → logprob: -13.798604965209961
    5. ' ' → logprob: -14.923604965209961
    6. '(h' → logprob: -15.048604965209961
    7. ' ((' → logprob: -15.673604965209961
    8. '((' → logprob: -16.67360496520996
    9. '  ' → logprob: -16.92360496520996
    10. '	' → logprob: -17.04860496520996

Token 176: 'H' (ID: 39)
  Prédit: 'H'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -2.4868770196917467e-05
    2. ' H' → logprob: -10.625024795532227
    3. '   ' → logprob: -14.500024795532227
    4. '	H' → logprob: -17.500024795532227
    5. '(H' → logprob: -18.875024795532227
    6. ' ' → logprob: -19.250024795532227
    7. ''H' → logprob: -19.625024795532227
    8. '_H' → logprob: -19.625024795532227
    9. '"H' → logprob: -20.750024795532227
    10. '  ' → logprob: -21.000024795532227

Token 177: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.016071557998657227
    2. '+' → logprob: -4.141071319580078
    3. ' ' → logprob: -10.266071319580078
    4. '+A' → logprob: -14.391071319580078
    5. ' ' → logprob: -14.516071319580078
    6. '   ' → logprob: -14.641071319580078
    7. ' +
' → logprob: -14.641071319580078
    8. ' plus' → logprob: -15.141071319580078
    9. '  ' → logprob: -15.766071319580078
    10. '    ' → logprob: -16.891071319580078

Token 178: ' A' (ID: 355)
  Prédit: ' A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.004089916590601206
    2. 'A' → logprob: -5.504089832305908
    3. ' ' → logprob: -11.504090309143066
    4. ' ' → logprob: -14.754090309143066
    5. ')' → logprob: -14.879090309143066
    6. '	A' → logprob: -15.504090309143066
    7. ' 
' → logprob: -16.00408935546875
    8. ' '' → logprob: -16.62908935546875
    9. ' А' → logprob: -16.62908935546875
    10. ' "' → logprob: -17.44158935546875

Token 179: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.1426873505115509
    2. '-' → logprob: -2.0176873207092285
    3. ' ' → logprob: -12.142687797546387
    4. ')' → logprob: -12.142687797546387
    5. '1' → logprob: -14.267687797546387
    6. '   ' → logprob: -14.892687797546387
    7. '<|end|>' → logprob: -15.392687797546387
    8. '  ' → logprob: -16.76768684387207
    9. '    ' → logprob: -16.89268684387207
    10. ' ' → logprob: -16.89268684387207

Token 180: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.07889209687709808
    2. ' ' → logprob: -2.5788919925689697
    3. '   ' → logprob: -13.70389175415039
    4. '<|end|>' → logprob: -14.57889175415039
    5. '```' → logprob: -14.95389175415039
    6. ')' → logprob: -15.95389175415039
    7. '  ' → logprob: -16.64139175415039
    8. ' ' → logprob: -17.14139175415039
    9. '0' → logprob: -17.51639175415039
    10. '    ' → logprob: -17.57889175415039

Token 181: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.0325924449716695e-05
    2. ' ' → logprob: -11.50001049041748
    3. '<|end|>' → logprob: -16.375009536743164
    4. '```' → logprob: -17.250009536743164
    5. '   ' → logprob: -17.375009536743164
    6. 'def' → logprob: -19.750009536743164
    7. '  ' → logprob: -19.875009536743164
    8. ')' → logprob: -20.187509536743164
    9. '۱' → logprob: -20.312509536743164
    10. '2' → logprob: -20.937509536743164

Token 182: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -9.186122770188376e-05
    2. ' )' → logprob: -9.875091552734375
    3. ')//' → logprob: -10.125091552734375
    4. '   ' → logprob: -15.875091552734375
    5. ')
' → logprob: -16.125091552734375
    6. '//' → logprob: -17.875091552734375
    7. '```' → logprob: -18.250091552734375
    8. ' ' → logprob: -18.625091552734375
    9. ']' → logprob: -18.750091552734375
    10. '）' → logprob: -19.000091552734375

Token 183: ' //' (ID: 602)
  Prédit: ' //'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.3488647937774658
    2. '//' → logprob: -1.2238647937774658
    3. ')' → logprob: -8.223864555358887
    4. '   ' → logprob: -9.473864555358887
    5. ')//' → logprob: -10.098864555358887
    6. ' ' → logprob: -10.973864555358887
    7. '```' → logprob: -11.973864555358887
    8. '    ' → logprob: -12.723864555358887
    9. '  ' → logprob: -13.473864555358887
    10. ' ' → logprob: -13.973864555358887

Token 184: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.023245712742209435
    2. ' A' → logprob: -3.7732458114624023
    3. ' ' → logprob: -15.898245811462402
    4. '	A' → logprob: -16.273244857788086
    5. '   ' → logprob: -17.148244857788086
    6. '  ' → logprob: -18.773244857788086
    7. '>A' → logprob: -19.773244857788086
    8. ' ' → logprob: -19.773244857788086
    9. '_A' → logprob: -20.023244857788086
    10. 'a' → logprob: -20.398244857788086

Token 185: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 186: '#' (ID: 2)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 187: ' Lecture' (ID: 106534)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.05467010661959648
    2. 'def' → logprob: -3.5546700954437256
    3. 'd' → logprob: -5.054670333862305
    4. 'H' → logprob: -5.304670333862305
    5. '```' → logprob: -5.304670333862305
    6. '
' → logprob: -5.554670333862305
    7. 'print' → logprob: -7.179670333862305
    8. '[' → logprob: -7.804670333862305
    9. ' 
' → logprob: -7.929670333862305
    10. 'a' → logprob: -7.929670333862305

Token 188: ' de' (ID: 334)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0003670364967547357
    2. 'def' → logprob: -9.625367164611816
    3. '_' → logprob: -10.000367164611816
    4. ',' → logprob: -10.125367164611816
    5. 'des' → logprob: -10.125367164611816
    6. ' =' → logprob: -10.375367164611816
    7. 's' → logprob: -10.875367164611816
    8. ' ()' → logprob: -11.250367164611816
    9. ' des' → logprob: -11.375367164611816
    10. '(' → logprob: -11.500367164611816

Token 189: ' l' (ID: 305)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.036340318620204926
    2. ' H' → logprob: -4.036340236663818
    3. 'l' → logprob: -4.661340236663818
    4. 'def' → logprob: -6.036340236663818
    5. 'int' → logprob: -6.161340236663818
    6. 'h' → logprob: -6.161340236663818
    7. 'la' → logprob: -7.786340236663818
    8. 'if' → logprob: -8.161340713500977
    9. 'le' → logprob: -8.286340713500977
    10. 'les' → logprob: -8.411340713500977

Token 190: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.4548628330230713
    2. 'a' → logprob: -1.7048628330230713
    3. 'input' → logprob: -1.9548628330230713
    4. 'entrée' → logprob: -4.079862594604492
    5. ''' → logprob: -5.079862594604492
    6. 'import' → logprob: -5.454862594604492
    7. 'e' → logprob: -5.829862594604492
    8. ''ent' → logprob: -5.829862594604492
    9. 'es' → logprob: -6.204862594604492
    10. ''utilisateur' → logprob: -6.454862594604492

Token 191: ' utilisateur' (ID: 115595)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.005933297798037529
    2. 'h' → logprob: -5.8809332847595215
    3. ' H' → logprob: -6.6309332847595215
    4. 'def' → logprob: -7.1309332847595215
    5. 'if' → logprob: -8.13093376159668
    6. '
' → logprob: -8.25593376159668
    7. 'n' → logprob: -8.63093376159668
    8. 'x' → logprob: -9.00593376159668
    9. 't' → logprob: -10.50593376159668
    10. '

' → logprob: -10.75593376159668

Token 192: ' et' (ID: 859)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.01274966448545456
    2. 'h' → logprob: -5.137749671936035
    3. '
' → logprob: -5.887749671936035
    4. ' H' → logprob: -6.012749671936035
    5. 'n' → logprob: -7.262749671936035
    6. ' 
' → logprob: -8.137749671936035
    7. 'if' → logprob: -8.887749671936035
    8. 'input' → logprob: -9.387749671936035
    9. 'def' → logprob: -9.512749671936035
    10. '  
' → logprob: -10.137749671936035

Token 193: ' conversion' (ID: 22165)
  Prédit: 'aff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'aff' → logprob: -1.0702202320098877
    2. 'appel' → logprob: -1.1952202320098877
    3. ' affich' → logprob: -1.5702202320098877
    4. ' appel' → logprob: -2.3202202320098877
    5. 'print' → logprob: -3.5702202320098877
    6. '#' → logprob: -4.945219993591309
    7. ' print' → logprob: -5.695219993591309
    8. 'ex' → logprob: -5.945219993591309
    9. 'app' → logprob: -6.070219993591309
    10. ' affiche' → logprob: -7.445219993591309

Token 194: ' des' (ID: 731)
  Prédit: ' des'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' des' → logprob: -1.4154951572418213
    2. '()' → logprob: -1.9154951572418213
    3. 'des' → logprob: -2.0404951572418213
    4. 'def' → logprob: -2.2904951572418213
    5. 'H' → logprob: -2.4154951572418213
    6. 'de' → logprob: -2.5404951572418213
    7. ' de' → logprob: -3.2904951572418213
    8. 'if' → logprob: -3.4154951572418213
    9. ':' → logprob: -3.6654951572418213
    10. ',' → logprob: -4.415494918823242

Token 195: ' valeurs' (ID: 73668)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.01129361242055893
    2. ' valeurs' → logprob: -5.136293411254883
    3. 'values' → logprob: -6.261293411254883
    4. ' val' → logprob: -7.261293411254883
    5. 'int' → logprob: -7.511293411254883
    6. 'strings' → logprob: -7.511293411254883
    7. 'str' → logprob: -8.636293411254883
    8. 'types' → logprob: -8.636293411254883
    9. ' chaînes' → logprob: -8.636293411254883
    10. 'ent' → logprob: -8.761293411254883

Token 196: ' en' (ID: 469)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.01976904831826687
    2. ' H' → logprob: -4.269769191741943
    3. 'h' → logprob: -5.269769191741943
    4. 'x' → logprob: -9.144768714904785
    5. 'input' → logprob: -9.769768714904785
    6. 'def' → logprob: -10.019768714904785
    7. 'if' → logprob: -10.269768714904785
    8. 'inputs' → logprob: -10.269768714904785
    9. 'n' → logprob: -10.769768714904785
    10. '#' → logprob: -10.894768714904785

Token 197: ' ent' (ID: 1121)
  Prédit: 'ent'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ent' → logprob: -0.20660391449928284
    2. 'int' → logprob: -1.7066038846969604
    3. 'ints' → logprob: -5.45660400390625
    4. ' ent' → logprob: -7.58160400390625
    5. 'inte' → logprob: -7.95660400390625
    6. ' int' → logprob: -11.08160400390625
    7. '```' → logprob: -11.20660400390625
    8. ' integers' → logprob: -11.45660400390625
    9. 'n' → logprob: -13.08160400390625
    10. 'enti' → logprob: -13.08160400390625

Token 198: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.1959063559770584
    2. 'ières' → logprob: -1.820906400680542
    3. 'ier' → logprob: -4.695906162261963
    4. 'ière' → logprob: -5.320906162261963
    5. 'i' → logprob: -6.695906162261963
    6. 'rée' → logprob: -7.570906162261963
    7. 'ié' → logprob: -9.070906639099121
    8. 'r' → logprob: -10.445906639099121
    9. 'ieres' → logprob: -10.945906639099121
    10. '#' → logprob: -11.570906639099121

Token 199: '
' (ID: 198)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.004268934950232506
    2. 'h' → logprob: -5.629269123077393
    3. '
' → logprob: -8.004268646240234
    4. ' H' → logprob: -9.129268646240234
    5. 'if' → logprob: -9.879268646240234
    6. 'n' → logprob: -10.254268646240234
    7. 'inputs' → logprob: -10.754268646240234
    8. 'x' → logprob: -10.879268646240234
    9. 'input' → logprob: -11.004268646240234
    10. 'def' → logprob: -11.254268646240234

Token 200: 'H' (ID: 39)
  Prédit: 'H'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.0008752549765631557
    2. ' H' → logprob: -7.250875473022461
    3. 'h' → logprob: -8.750875473022461
    4. '```' → logprob: -13.125875473022461
    5. 'input' → logprob: -13.375875473022461
    6. 'inputs' → logprob: -13.750875473022461
    7. 'x' → logprob: -14.500875473022461
    8. 'import' → logprob: -15.125875473022461
    9. 'HP' → logprob: -15.500875473022461
    10. 'if' → logprob: -15.750875473022461

Token 201: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00011009939044015482
    2. ',A' → logprob: -9.375109672546387
    3. ' ,' → logprob: -11.000109672546387
    4. '=' → logprob: -12.375109672546387
    5. ' =' → logprob: -12.500109672546387
    6. 'A' → logprob: -15.125109672546387
    7. ' A' → logprob: -15.875109672546387
    8. ',
' → logprob: -16.500110626220703
    9. ',input' → logprob: -17.375110626220703
    10. ',a' → logprob: -17.875110626220703

Token 202: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.1602274775505066
    2. ' A' → logprob: -1.9102275371551514
    3. ' ' → logprob: -12.78522777557373
    4. '	A' → logprob: -16.035226821899414
    5. '<|end|>' → logprob: -16.285226821899414
    6. '=A' → logprob: -16.410226821899414
    7. ' ' → logprob: -16.535226821899414
    8. '  ' → logprob: -16.910226821899414
    9. 'a' → logprob: -17.410226821899414
    10. ' =' → logprob: -17.535226821899414

Token 203: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6931508183479309
    2. ' =' → logprob: -0.6931508183479309
    3. '=input' → logprob: -12.943150520324707
    4. ')' → logprob: -15.193150520324707
    5. '=int' → logprob: -15.568150520324707
    6. ',' → logprob: -15.943150520324707
    7. ' ' → logprob: -16.068151473999023
    8. '=user' → logprob: -16.443151473999023
    9. '<|end|>' → logprob: -16.943151473999023
    10. ' ' → logprob: -17.068151473999023

Token 204: ' map' (ID: 4014)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.0015035520773380995
    2. ' map' → logprob: -6.5015034675598145
    3. '	map' → logprob: -14.876503944396973
    4. '[' → logprob: -15.376503944396973
    5. 'm' → logprob: -15.626503944396973
    6. '(map' → logprob: -16.126502990722656
    7. '   ' → logprob: -16.376502990722656
    8. 'input' → logprob: -16.376502990722656
    9. 'list' → logprob: -16.751502990722656
    10. ' ' → logprob: -17.001502990722656

Token 205: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.002422033343464136
    2. 'int' → logprob: -6.377421855926514
    3. '(' → logprob: -7.252421855926514
    4. '(input' → logprob: -12.252422332763672
    5. ' int' → logprob: -12.877422332763672
    6. '<int' → logprob: -13.252422332763672
    7. '(
' → logprob: -13.752422332763672
    8. '[int' → logprob: -14.502422332763672
    9. 'input' → logprob: -15.627422332763672
    10. '	int' → logprob: -15.877422332763672

Token 206: ',' (ID: 11)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.0591454952955246
    2. ',input' → logprob: -3.309145450592041
    3. ',' → logprob: -4.059145450592041
    4. '(input' → logprob: -5.934145450592041
    5. ' input' → logprob: -7.059145450592041
    6. ')' → logprob: -9.3091459274292
    7. '=input' → logprob: -11.6841459274292
    8. '   ' → logprob: -12.1841459274292
    9. '	input' → logprob: -12.5591459274292
    10. ' ,' → logprob: -13.9341459274292

Token 207: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.00317783304490149
    2. ' input' → logprob: -5.753177642822266
    3. '   ' → logprob: -17.003177642822266
    4. ' ' → logprob: -17.878177642822266
    5. '	input' → logprob: -18.253177642822266
    6. '(input' → logprob: -18.503177642822266
    7. '```' → logprob: -19.003177642822266
    8. '<input' → logprob: -19.253177642822266
    9. '=input' → logprob: -19.253177642822266
    10. ',input' → logprob: -20.003177642822266

Token 208: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.00014096579980105162
    2. '()' → logprob: -8.875141143798828
    3. ' ().' → logprob: -14.000141143798828
    4. ')' → logprob: -16.125141143798828
    5. '())' → logprob: -16.875141143798828
    6. '(' → logprob: -17.000141143798828
    7. '()
' → logprob: -17.375141143798828
    8. '("' → logprob: -18.500141143798828
    9. '("").' → logprob: -18.625141143798828
    10. '>().' → logprob: -19.000141143798828

Token 209: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -9.674858301877975e-05
    2. 'strip' → logprob: -9.250096321105957
    3. 'rstrip' → logprob: -15.375096321105957
    4. ' split' → logprob: -15.500096321105957
    5. '().' → logprob: -15.750096321105957
    6. '(split' → logprob: -17.750097274780273
    7. 'read' → logprob: -18.000097274780273
    8. 'spl' → logprob: -18.000097274780273
    9. '.split' → logprob: -19.375097274780273
    10. '_split' → logprob: -20.375097274780273

Token 210: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.08096307516098022
    2. '()))' → logprob: -2.580963134765625
    3. ')' → logprob: -6.955963134765625
    4. '()' → logprob: -7.205963134765625
    5. '))' → logprob: -7.955963134765625
    6. '()))
' → logprob: -11.830963134765625
    7. '(' → logprob: -11.955963134765625
    8. ' ())' → logprob: -12.580963134765625
    9. '('' → logprob: -13.205963134765625
    10. '()));' → logprob: -13.455963134765625

Token 211: '#' (ID: 2)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.9361264946837764e-07
    2. ' print' → logprob: -16.375
    3. 'result' → logprob: -18.625
    4. '```' → logprob: -21.375
    5. 'prin' → logprob: -21.5
    6. '#' → logprob: -21.875
    7. 'pr' → logprob: -22.375
    8. '#print' → logprob: -22.75
    9. '
' → logprob: -23.25
    10. 'prints' → logprob: -23.625

Token 212: ' Calcul' (ID: 57243)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -2.3319124011322856e-05
    2. 'result' → logprob: -10.750022888183594
    3. ' print' → logprob: -13.500022888183594
    4. '#' → logprob: -14.625022888183594
    5. 'pr' → logprob: -18.125022888183594
    6. 'prin' → logprob: -18.125022888183594
    7. '#print' → logprob: -18.250022888183594
    8. '
' → logprob: -19.000022888183594
    9. 'att' → logprob: -19.000022888183594
    10. '```' → logprob: -19.000022888183594

Token 213: ' et' (ID: 859)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.1329314112663269
    2. 'print' → logprob: -2.3829314708709717
    3. 'att' → logprob: -4.007931232452393
    4. 'nombre' → logprob: -5.007931232452393
    5. 'n' → logprob: -6.257931232452393
    6. 'nb' → logprob: -6.882931232452393
    7. 'answer' → logprob: -7.132931232452393
    8. 'attack' → logprob: -7.757931232452393
    9. 'min' → logprob: -7.882931232452393
    10. ' attacks' → logprob: -8.00793170928955

Token 214: ' affich' (ID: 90179)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.01416350994259119
    2. ' print' → logprob: -4.264163494110107
    3. '_print' → logprob: -18.889163970947266
    4. '```' → logprob: -18.889163970947266
    5. '#print' → logprob: -19.139163970947266
    6. '#' → logprob: -19.514163970947266
    7. 'pr' → logprob: -19.514163970947266
    8. 'prin' → logprob: -20.389163970947266
    9. '(print' → logprob: -20.764163970947266
    10. '
' → logprob: -20.889163970947266

Token 215: 'age' (ID: 477)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.646686315536499
    2. 'age' → logprob: -0.771686315536499
    3. '(print' → logprob: -4.646686553955078
    4. '(min' → logprob: -6.521686553955078
    5. '(' → logprob: -6.646686553955078
    6. '(H' → logprob: -7.521686553955078
    7. 'min' → logprob: -7.521686553955078
    8. 'e' → logprob: -9.021686553955078
    9. 'er' → logprob: -9.396686553955078
    10. '#' → logprob: -10.021686553955078

Token 216: ' du' (ID: 1462)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0007373234839178622
    2. '(print' → logprob: -7.250737190246582
    3. '(' → logprob: -11.000737190246582
    4. '(min' → logprob: -11.875737190246582
    5. 'result' → logprob: -13.000737190246582
    6. ' print' → logprob: -14.000737190246582
    7. 'min' → logprob: -14.625737190246582
    8. '(result' → logprob: -16.2507381439209
    9. '()' → logprob: -16.3757381439209
    10. '(
' → logprob: -17.2507381439209

Token 217: ' résultat' (ID: 62556)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -4.906711546937004e-05
    2. 'result' → logprob: -10.500048637390137
    3. ' min' → logprob: -10.875048637390137
    4. 'print' → logprob: -13.000048637390137
    5. 'minimum' → logprob: -15.125048637390137
    6. '(min' → logprob: -17.375049591064453
    7. 'minimal' → logprob: -18.500049591064453
    8. 'answer' → logprob: -18.625049591064453
    9. 'res' → logprob: -18.875049591064453
    10. '	min' → logprob: -19.625049591064453

Token 218: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -6.988221684878226e-06
    2. '
' → logprob: -12.000006675720215
    3. ' print' → logprob: -14.375006675720215
    4. '```' → logprob: -15.500006675720215
    5. '``' → logprob: -18.75000762939453
    6. '
' → logprob: -19.62500762939453
    7. 'result' → logprob: -20.75000762939453
    8. ')
' → logprob: -21.00000762939453
    9. '(print' → logprob: -21.12500762939453
    10. '`
' → logprob: -21.75000762939453

Token 219: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: 0.0
    2. ' print' → logprob: -19.375
    3. 'result' → logprob: -22.75
    4. '```' → logprob: -24.25
    5. 'prin' → logprob: -24.375
    6. 'pr' → logprob: -25.5
    7. '
' → logprob: -26.25
    8. 'printf' → logprob: -27.0
    9. 'prints' → logprob: -27.75
    10. 'println' → logprob: -27.75

Token 220: '(min' (ID: 26035)
  Prédit: '(min'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(min' → logprob: -4.978233846486546e-05
    2. '(' → logprob: -10.000049591064453
    3. 'min' → logprob: -12.375049591064453
    4. ' min' → logprob: -17.625049591064453
    5. '((' → logprob: -18.000049591064453
    6. '(m' → logprob: -18.500049591064453
    7. '(
' → logprob: -18.625049591064453
    8. '=min' → logprob: -18.750049591064453
    9. ' (' → logprob: -19.125049591064453
    10. ',min' → logprob: -19.625049591064453

Token 221: '_att' (ID: 35618)
  Prédit: '_att'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_att' → logprob: -2.696889623621246e-06
    2. '_attack' → logprob: -13.37500286102295
    3. '_' → logprob: -13.87500286102295
    4. '_Att' → logprob: -16.750001907348633
    5. 'att' → logprob: -17.875001907348633
    6. '_at' → logprob: -17.875001907348633
    7. '_)' → logprob: -18.875001907348633
    8. '_ATT' → logprob: -19.250001907348633
    9. 'Att' → logprob: -19.750001907348633
    10. ')' → logprob: -19.875001907348633

Token 222: 'acks' (ID: 7367)
  Prédit: 'acks'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'acks' → logprob: -2.2127087504486553e-05
    2. 'cks' → logprob: -11.500021934509277
    3. 's' → logprob: -12.500021934509277
    4. 'ack' → logprob: -12.625021934509277
    5. 'acts' → logprob: -13.500021934509277
    6. 'acs' → logprob: -13.500021934509277
    7. '```' → logprob: -14.375021934509277
    8. 'a' → logprob: -14.750021934509277
    9. 'ac' → logprob: -15.250021934509277
    10. 'ackers' → logprob: -15.875021934509277

Token 223: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: -4.127333340875339e-06
    2. '_t' → logprob: -12.625003814697266
    3. '_' → logprob: -15.000003814697266
    4. 'to' → logprob: -15.875003814697266
    5. ' _' → logprob: -15.875003814697266
    6. ')_' → logprob: -17.125003814697266
    7. '```' → logprob: -18.375003814697266
    8. '_TO' → logprob: -18.500003814697266
    9. '__' → logprob: -18.625003814697266
    10. ' to' → logprob: -18.750003814697266

Token 224: '_def' (ID: 26756)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.19772544503211975
    2. '_def' → logprob: -1.8227254152297974
    3. 'ef' → logprob: -4.197725296020508
    4. 'efe' → logprob: -6.572725296020508
    5. 'feat' → logprob: -7.072725296020508
    6. 'f' → logprob: -8.447725296020508
    7. 'eat' → logprob: -9.197725296020508
    8. 'fe' → logprob: -9.572725296020508
    9. 'df' → logprob: -9.947725296020508
    10. 'e' → logprob: -10.322725296020508

Token 225: 'eat' (ID: 100633)
  Prédit: 'eat'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'eat' → logprob: -0.0004135112394578755
    2. 'e' → logprob: -8.25041389465332
    3. 'at' → logprob: -8.87541389465332
    4. 'east' → logprob: -12.87541389465332
    5. 'ea' → logprob: -13.50041389465332
    6. 'a' → logprob: -13.87541389465332
    7. 'feat' → logprob: -14.00041389465332
    8. 'ate' → logprob: -14.00041389465332
    9. 'et' → logprob: -14.25041389465332
    10. 'reat' → logprob: -14.62541389465332

Token 226: '_mon' (ID: 80615)
  Prédit: '_mon'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_mon' → logprob: 0.0
    2. '_MON' → logprob: -17.625
    3. '_' → logprob: -18.0
    4. '_m' → logprob: -18.75
    5. 'mon' → logprob: -19.0
    6. ' мон' → logprob: -19.125
    7. ' _' → logprob: -19.375
    8. '(mon' → logprob: -19.625
    9. '```' → logprob: -20.75
    10. ')_' → logprob: -22.25

Token 227: 'ster' (ID: 3968)
  Prédit: 'ster'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ster' → logprob: -0.034215521067380905
    2. 'on' → logprob: -3.4092154502868652
    3. 'monster' → logprob: -9.034215927124023
    4. 'onstr' → logprob: -9.159215927124023
    5. 'oster' → logprob: -9.909215927124023
    6. 'sters' → logprob: -10.034215927124023
    7. 'er' → logprob: -10.159215927124023
    8. 'str' → logprob: -10.284215927124023
    9. 'ont' → logprob: -10.409215927124023
    10. 'ons' → logprob: -10.784215927124023

Token 228: '(H' (ID: 20904)
  Prédit: '(H'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(H' → logprob: -4.60414821645827e-06
    2. '(' → logprob: -12.625004768371582
    3. ')' → logprob: -14.375004768371582
    4. ' (' → logprob: -14.625004768371582
    5. ')(' → logprob: -15.375004768371582
    6. 'H' → logprob: -20.250003814697266
    7. '(
' → logprob: -20.375003814697266
    8. '((' → logprob: -21.000003814697266
    9. '(h' → logprob: -21.625003814697266
    10. ' ' → logprob: -21.750003814697266

Token 229: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.8670179997570813e-05
    2. ',A' → logprob: -11.000019073486328
    3. ' ,' → logprob: -13.250019073486328
    4. 'A' → logprob: -16.375019073486328
    5. ',
' → logprob: -16.875019073486328
    6. ')' → logprob: -19.250019073486328
    7. '‌,' → logprob: -19.875019073486328
    8. ',

' → logprob: -20.375019073486328
    9. '，' → logprob: -20.500019073486328
    10. ',
' → logprob: -20.625019073486328

Token 230: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.0015023599844425917
    2. ' A' → logprob: -6.501502513885498
    3. '	A' → logprob: -20.626502990722656
    4. ' ' → logprob: -22.126502990722656
    5. ')' → logprob: -22.251502990722656
    6. ' ' → logprob: -22.376502990722656
    7. ',A' → logprob: -22.751502990722656
    8. '   ' → logprob: -23.001502990722656
    9. 'a' → logprob: -23.626502990722656
    10. '_A' → logprob: -23.626502990722656

Token 231: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0011705794604495168
    2. ')' → logprob: -6.751170635223389
    3. '))
' → logprob: -15.12617015838623
    4. ')))' → logprob: -16.001171112060547
    5. '()))' → logprob: -18.501171112060547
    6. ')
' → logprob: -18.751171112060547
    7. ' ))' → logprob: -18.876171112060547
    8. '})' → logprob: -19.501171112060547
    9. '),' → logprob: -19.626171112060547
    10. ')}' → logprob: -19.876171112060547


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 229
Tokens correctement prédits (1ère position, stricte): 84
Tokens correctement prédits (1ère position, avec adaptation): 87
Tokens correctement prédits (top 10): 166
Précision stricte (1ère position): 36.68%
Précision adaptée (1ère position): 37.99%
Précision (top 10): 72.49%
================================================================================
