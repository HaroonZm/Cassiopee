================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:32:54
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys
import math
from itertools import permutations
from collections import defaultdict

sys.setrecursionlimit(10**7)

def read():
    return sys.stdin.readline().rstrip()

def main():
    [a, b, k] = list(map(int, read().split()))

    def f(x, y, z):
        if z <= x:
            print(x-z, y)
        else:
            left = y-(z-x)
            y2 = left if left > 0 else 0
            print(0, y2)
    f(a, b, k)

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '
' (ID: 198)
  → Token d'amorce (pas de prédiction)

Token 3: 'import' (ID: 561)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.6405025720596313
    2. '.' → logprob: -0.8905025720596313
    3. 'import' → logprob: -4.015502452850342
    4. 'newline' → logprob: -4.265502452850342
    5. '\' → logprob: -4.765502452850342
    6. '<|end|>' → logprob: -5.015502452850342
    7. '```' → logprob: -5.390502452850342
    8. '
' → logprob: -5.765502452850342
    9. '' → logprob: -6.515502452850342
    10. '<|end|>' → logprob: -6.515502452850342

Token 4: ' math' (ID: 13324)
  Prédit: ' os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' os' → logprob: -7.755678961984813e-05
    2. 'os' → logprob: -9.500077247619629
    3. ' math' → logprob: -13.625077247619629
    4. ' re' → logprob: -14.500077247619629
    5. ' json' → logprob: -15.125077247619629
    6. '"os' → logprob: -15.375077247619629
    7. '_os' → logprob: -16.125078201293945
    8. ' io' → logprob: -16.375078201293945
    9. ' ' → logprob: -16.375078201293945
    10. '	os' → logprob: -17.000078201293945

Token 5: '
' (ID: 198)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.10131704062223434
    2. '\' → logprob: -3.6013169288635254
    3. '\n' → logprob: -3.9763169288635254
    4. 'import' → logprob: -4.351316928863525
    5. '<|end|>' → logprob: -4.601316928863525
    6. '```' → logprob: -4.726316928863525
    7. '
' → logprob: -4.976316928863525
    8. '

' → logprob: -5.476316928863525
    9. '<|end|>' → logprob: -6.601316928863525
    10. '' → logprob: -6.601316928863525

Token 6: 'from' (ID: 2845)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'import' → logprob: -1.1315985918045044
    2. '\n' → logprob: -1.6315985918045044
    3. '.' → logprob: -2.006598472595215
    4. '
' → logprob: -2.006598472595215
    5. '```' → logprob: -2.506598472595215
    6. '\' → logprob: -3.131598472595215
    7. '<|end|>' → logprob: -3.381598472595215
    8. '

' → logprob: -3.631598472595215
    9. ',' → logprob: -4.381598472595215
    10. '<|end|>' → logprob: -5.631598472595215

Token 7: ' itertools' (ID: 103178)
  Prédit: ' collections'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' collections' → logprob: -0.5595126152038574
    2. ' os' → logprob: -1.0595126152038574
    3. 'collections' → logprob: -2.8095126152038574
    4. 'os' → logprob: -4.684512615203857
    5. ' datetime' → logprob: -5.309512615203857
    6. ' itertools' → logprob: -6.059512615203857
    7. ' typing' → logprob: -6.184512615203857
    8. 'datetime' → logprob: -7.934512615203857
    9. ' pathlib' → logprob: -8.059513092041016
    10. ' numpy' → logprob: -8.059513092041016

Token 8: ' import' (ID: 1588)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.259976327419281
    2. ' import' → logprob: -1.5099763870239258
    3. '.' → logprob: -4.884976387023926
    4. '.import' → logprob: -8.384976387023926
    5. '	import' → logprob: -9.009976387023926
    6. '_import' → logprob: -10.509976387023926
    7. ' .' → logprob: -10.759976387023926
    8. '.im' → logprob: -11.134976387023926
    9. '<|end|>' → logprob: -11.634976387023926
    10. '```' → logprob: -12.259976387023926

Token 9: ' permutations' (ID: 174595)
  Prédit: ' permutations'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' permutations' → logprob: -1.4207953214645386
    2. ' cycle' → logprob: -1.5457953214645386
    3. 'count' → logprob: -2.045795440673828
    4. 'per' → logprob: -2.170795440673828
    5. 'com' → logprob: -2.420795440673828
    6. 'cycle' → logprob: -2.545795440673828
    7. 'import' → logprob: -3.795795440673828
    8. ' count' → logprob: -3.920795440673828
    9. 'product' → logprob: -4.045795440673828
    10. 'chain' → logprob: -4.420795440673828

Token 10: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06897678971290588
    2. '.' → logprob: -3.568976879119873
    3. '\n' → logprob: -4.318976879119873
    4. 'import' → logprob: -5.318976879119873
    5. '(
' → logprob: -5.318976879119873
    6. '\' → logprob: -5.568976879119873
    7. '```' → logprob: -5.943976879119873
    8. '<|end|>' → logprob: -6.193976879119873
    9. 'def' → logprob: -6.818976879119873
    10. ',' → logprob: -7.193976879119873

Token 11: 'from' (ID: 2845)
  Prédit: '

'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '

' → logprob: -0.44711998105049133
    2. '\n' → logprob: -1.947119951248169
    3. '
' → logprob: -2.072119951248169
    4. 'import' → logprob: -3.322119951248169
    5. 'def' → logprob: -4.072120189666748
    6. '```' → logprob: -4.447120189666748
    7. 'n' → logprob: -5.572120189666748
    8. ' 

' → logprob: -5.822120189666748
    9. 'newline' → logprob: -6.197120189666748
    10. '\' → logprob: -6.197120189666748

Token 12: ' collections' (ID: 22690)
  Prédit: ' collections'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' collections' → logprob: -0.40620914101600647
    2. 'collections' → logprob: -1.656209111213684
    3. ' operator' → logprob: -3.1562092304229736
    4. ' math' → logprob: -3.1562092304229736
    5. ' functools' → logprob: -3.9062092304229736
    6. 'operator' → logprob: -4.6562089920043945
    7. ' random' → logprob: -5.5312089920043945
    8. ' sys' → logprob: -5.5312089920043945
    9. 'math' → logprob: -5.5312089920043945
    10. ' itertools' → logprob: -5.9062089920043945

Token 13: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.3538197875022888
    2. 'import' → logprob: -1.2288198471069336
    3. '.' → logprob: -6.103819847106934
    4. '<|end|>' → logprob: -6.103819847106934
    5. ' ' → logprob: -7.728819847106934
    6. '```' → logprob: -8.478819847106934
    7. ' ' → logprob: -9.728819847106934
    8. ' defaultdict' → logprob: -10.603819847106934
    9. '_import' → logprob: -10.853819847106934
    10. '	import' → logprob: -10.853819847106934

Token 14: ' defaultdict' (ID: 107098)
  Prédit: ' defaultdict'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' defaultdict' → logprob: -0.013708560727536678
    2. ' deque' → logprob: -4.638708591461182
    3. ' Counter' → logprob: -5.638708591461182
    4. 'deque' → logprob: -8.013708114624023
    5. 'default' → logprob: -10.638708114624023
    6. 'Counter' → logprob: -10.638708114624023
    7. ' counter' → logprob: -12.638708114624023
    8. ' default' → logprob: -13.388708114624023
    9. '.Counter' → logprob: -13.888708114624023
    10. ' abc' → logprob: -14.138708114624023

Token 15: '

' (ID: 279)
  Prédit: '

'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '

' → logprob: -0.8810180425643921
    2. '
' → logprob: -1.006018042564392
    3. '\n' → logprob: -2.3810181617736816
    4. 'import' → logprob: -3.1310181617736816
    5. '\' → logprob: -3.7560181617736816
    6. 'n' → logprob: -4.631018161773682
    7. 'def' → logprob: -4.631018161773682
    8. '```' → logprob: -4.631018161773682
    9. '<|end|>' → logprob: -4.756018161773682
    10. 'newline' → logprob: -5.506018161773682

Token 16: 'sys' (ID: 17324)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.19222846627235413
    2. 'import' → logprob: -2.6922285556793213
    3. 'n' → logprob: -3.0672285556793213
    4. '```' → logprob: -3.6922285556793213
    5. '

' → logprob: -4.817228317260742
    6. 'class' → logprob: -4.942228317260742
    7. '
' → logprob: -5.567228317260742
    8. '\n' → logprob: -5.817228317260742
    9. 'a' → logprob: -6.067228317260742
    10. 'data' → logprob: -6.192228317260742

Token 17: '.set' (ID: 1230)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -5.633853652398102e-05
    2. ' .' → logprob: -10.750056266784668
    3. '.exit' → logprob: -11.750056266784668
    4. '.readline' → logprob: -12.250056266784668
    5. '.stdout' → logprob: -12.625056266784668
    6. '.user' → logprob: -13.125056266784668
    7. '.import' → logprob: -13.250056266784668
    8. '.argv' → logprob: -13.500056266784668
    9. '.stdin' → logprob: -13.500056266784668
    10. '.`' → logprob: -13.750056266784668

Token 18: 'rec' (ID: 9285)
  Prédit: 'rec'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'rec' → logprob: -0.03151220083236694
    2. '_rec' → logprob: -3.6565122604370117
    3. '_limit' → logprob: -6.281512260437012
    4. ' recursion' → logprob: -7.531512260437012
    5. '_trace' → logprob: -7.781512260437012
    6. '_version' → logprob: -7.906512260437012
    7. '_sys' → logprob: -8.031512260437012
    8. '_int' → logprob: -8.531512260437012
    9. '_execution' → logprob: -8.531512260437012
    10. '_' → logprob: -8.906512260437012

Token 19: 'ursion' (ID: 41658)
  Prédit: 'ursion'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ursion' → logprob: -0.006211154628545046
    2. 'ur' → logprob: -6.006211280822754
    3. 'urs' → logprob: -6.381211280822754
    4. 'ursive' → logprob: -6.631211280822754
    5. 'urse' → logprob: -8.381211280822754
    6. 'urf' → logprob: -9.006211280822754
    7. 't' → logprob: -9.256211280822754
    8. 'limit' → logprob: -9.631211280822754
    9. 'urst' → logprob: -9.631211280822754
    10. 'ursor' → logprob: -10.756211280822754

Token 20: 'limit' (ID: 19698)
  Prédit: 'limit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'limit' → logprob: -0.4748612344264984
    2. '_limit' → logprob: -0.9748612642288208
    3. ' limit' → logprob: -7.849861145019531
    4. '_depth' → logprob: -8.099861145019531
    5. '-limit' → logprob: -10.349861145019531
    6. 'lim' → logprob: -10.849861145019531
    7. '_LIMIT' → logprob: -11.349861145019531
    8. 'depth' → logprob: -11.849861145019531
    9. '_lim' → logprob: -12.099861145019531
    10. '(limit' → logprob: -12.849861145019531

Token 21: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -2.236549335066229e-05
    2. ' (' → logprob: -11.125021934509277
    3. '(
' → logprob: -12.375021934509277
    4. '(

' → logprob: -13.500021934509277
    5. '```' → logprob: -14.625021934509277
    6. '((' → logprob: -15.125021934509277
    7. '()' → logprob: -15.125021934509277
    8. '("("' → logprob: -15.250021934509277
    9. '<|end|>' → logprob: -15.750021934509277
    10. '(None' → logprob: -16.125022888183594

Token 22: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.011084134690463543
    2. '100' → logprob: -4.511084079742432
    3. ' ' → logprob: -11.01108455657959
    4. '300' → logprob: -11.51108455657959
    5. '500' → logprob: -12.26108455657959
    6. '200' → logprob: -12.76108455657959
    7. '150' → logprob: -14.26108455657959
    8. '250' → logprob: -14.26108455657959
    9. '   ' → logprob: -15.26108455657959
    10. '1' → logprob: -15.63608455657959

Token 23: '**' (ID: 410)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.5674105882644653
    2. '6' → logprob: -2.067410469055176
    3. '7' → logprob: -2.067410469055176
    4. '000' → logprob: -2.067410469055176
    5. '5' → logprob: -3.817410469055176
    6. '00' → logprob: -3.817410469055176
    7. '4' → logprob: -4.692410469055176
    8. '**' → logprob: -8.817410469055176
    9. '07' → logprob: -9.942410469055176
    10. ')' → logprob: -10.067410469055176

Token 24: '7' (ID: 22)
  Prédit: '7'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -0.011308228597044945
    2. '9' → logprob: -4.511308193206787
    3. '8' → logprob: -8.886308670043945
    4. '6' → logprob: -9.011308670043945
    5. '```' → logprob: -17.011308670043945
    6. '**' → logprob: -17.761308670043945
    7. ' ' → logprob: -18.386308670043945
    8. '10' → logprob: -19.136308670043945
    9. ')' → logprob: -19.386308670043945
    10. '``' → logprob: -19.636308670043945

Token 25: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -9.088346359931165e-07
    2. ')
' → logprob: -14.750000953674316
    3. '))' → logprob: -15.375000953674316
    4. ' )' → logprob: -16.5
    5. '),' → logprob: -17.25
    6. '```' → logprob: -17.75
    7. ')))' → logprob: -18.25
    8. ')

' → logprob: -18.625
    9. '）' → logprob: -18.875
    10. ')...' → logprob: -19.0

Token 26: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.19310155510902405
    2. 'n' → logprob: -1.9431015253067017
    3. 'class' → logprob: -4.068101406097412
    4. 'N' → logprob: -4.443101406097412
    5. 'd' → logprob: -6.568101406097412
    6. '\' → logprob: -7.068101406097412
    7. '

' → logprob: -8.31810188293457
    8. '```' → logprob: -8.31810188293457
    9. '
' → logprob: -8.94310188293457
    10. 'a' → logprob: -9.19310188293457

Token 27: ' read' (ID: 1729)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.6555423140525818
    2. ' dfs' → logprob: -1.2805423736572266
    3. ' solve' → logprob: -1.7805423736572266
    4. ' factor' → logprob: -4.405542373657227
    5. ' factorial' → logprob: -5.155542373657227
    6. ' calculate' → logprob: -6.030542373657227
    7. ' count' → logprob: -6.280542373657227
    8. ' a' → logprob: -6.405542373657227
    9. ' find' → logprob: -6.655542373657227
    10. ' ' → logprob: -7.030542373657227

Token 28: '():
' (ID: 8595)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -1.0968738794326782
    2. '_line' → logprob: -1.2218738794326782
    3. '():' → logprob: -1.2218738794326782
    4. '(' → logprob: -3.2218737602233887
    5. '_' → logprob: -3.5968737602233887
    6. ' ()' → logprob: -5.596873760223389
    7. '_input' → logprob: -6.096873760223389
    8. '_data' → logprob: -7.346873760223389
    9. '_token' → logprob: -8.096874237060547
    10. ' ():' → logprob: -8.221874237060547

Token 29: '   ' (ID: 271)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.5115807056427002
    2. '   ' → logprob: -1.2615807056427002
    3. ' return' → logprob: -3.2615807056427
    4. 'return' → logprob: -3.2615807056427
    5. '()\' → logprob: -4.511580467224121
    6. '()
' → logprob: -4.886580467224121
    7. ' ' → logprob: -5.636580467224121
    8. '
' → logprob: -5.886580467224121
    9. ' ()' → logprob: -6.011580467224121
    10. '	return' → logprob: -6.136580467224121

Token 30: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.38764500617980957
    2. 'return' (adapté à ' return') → logprob: -1.1376450061798096
    3. '   ' → logprob: -7.2626447677612305
    4. 'int' → logprob: -10.13764476776123
    5. 'input' → logprob: -11.88764476776123
    6. ' input' → logprob: -12.01264476776123
    7. ' ' → logprob: -12.51264476776123
    8. ' sys' → logprob: -12.51264476776123
    9. '	return' → logprob: -12.76264476776123
    10. ' int' → logprob: -13.13764476776123

Token 31: ' sys' (ID: 12228)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.6959881782531738
    2. ' int' → logprob: -1.3209881782531738
    3. ' map' → logprob: -2.070988178253174
    4. 'int' → logprob: -2.945988178253174
    5. 'list' → logprob: -3.695988178253174
    6. ' sys' → logprob: -3.820988178253174
    7. 'map' → logprob: -5.570988178253174
    8. ' input' → logprob: -5.570988178253174
    9. 'input' → logprob: -7.695988178253174
    10. ' tuple' → logprob: -7.695988178253174

Token 32: '.stdin' (ID: 93480)
  Prédit: '.stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdin' → logprob: -0.0004257892433088273
    2. '.' → logprob: -8.000425338745117
    3. '.stdout' → logprob: -9.750425338745117
    4. '.readline' → logprob: -11.000425338745117
    5. 'stdin' → logprob: -11.875425338745117
    6. '.std' → logprob: -12.500425338745117
    7. '.argv' → logprob: -13.000425338745117
    8. ' .' → logprob: -13.750425338745117
    9. '(stdin' → logprob: -14.500425338745117
    10. ' stdin' → logprob: -14.875425338745117

Token 33: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -5.12127808178775e-05
    2. '.' → logprob: -10.750051498413086
    3. '.read' → logprob: -11.000051498413086
    4. '.readlines' → logprob: -12.000051498413086
    5. '.buffer' → logprob: -12.000051498413086
    6. 'buffer' → logprob: -15.250051498413086
    7. 'read' → logprob: -15.250051498413086
    8. ' readline' → logprob: -16.500051498413086
    9. '().' → logprob: -18.125051498413086
    10. '.Read' → logprob: -18.750051498413086

Token 34: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.008615515194833279
    2. '()' → logprob: -4.758615493774414
    3. '(' → logprob: -15.133615493774414
    4. ' ().' → logprob: -15.258615493774414
    5. '()

' → logprob: -15.633615493774414
    6. '()\' → logprob: -16.383615493774414
    7. '()
' → logprob: -16.883615493774414
    8. '().__' → logprob: -17.633615493774414
    9. '()`' → logprob: -17.633615493774414
    10. '()).' → logprob: -17.758615493774414

Token 35: 'rstrip' (ID: 180429)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.023245595395565033
    2. 'rstrip' → logprob: -3.7732455730438232
    3. ' strip' → logprob: -16.148244857788086
    4. 'str' → logprob: -18.398244857788086
    5. '_strip' → logprob: -19.523244857788086
    6. 'rst' → logprob: -19.898244857788086
    7. 'stripe' → logprob: -20.398244857788086
    8. 'split' → logprob: -20.523244857788086
    9. 'decode' → logprob: -20.898244857788086
    10. '(strip' → logprob: -21.273244857788086

Token 36: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0011334281880408525
    2. '()
' → logprob: -7.876133441925049
    3. '(' → logprob: -8.12613296508789
    4. '()

' → logprob: -8.25113296508789
    5. '()\' → logprob: -8.62613296508789
    6. '().' → logprob: -12.50113296508789
    7. '(
' → logprob: -13.37613296508789
    8. '())' → logprob: -13.50113296508789
    9. 'def' → logprob: -13.62613296508789
    10. ' ()' → logprob: -14.00113296508789

Token 37: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.23763489723205566
    2. 'n' → logprob: -1.6126348972320557
    3. 'N' → logprob: -4.862634658813477
    4. 'class' → logprob: -5.612634658813477
    5. 'd' → logprob: -7.612634658813477
    6. 'a' → logprob: -9.362634658813477
    7. 'H' → logprob: -10.112634658813477
    8. '\' → logprob: -10.362634658813477
    9. 'A' → logprob: -10.737634658813477
    10. 's' → logprob: -10.987634658813477

Token 38: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.0020669952500611544
    2. 'main' → logprob: -6.8770670890808105
    3. ' solve' → logprob: -7.5020670890808105
    4. '_main' → logprob: -8.627066612243652
    5. ' input' → logprob: -9.502066612243652
    6. ' dfs' → logprob: -10.002066612243652
    7. ' ' → logprob: -10.127066612243652
    8. '_' → logprob: -10.377066612243652
    9. ' factorial' → logprob: -11.377066612243652
    10. 'solve' → logprob: -11.377066612243652

Token 39: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.000844768132083118
    2. '(' → logprob: -7.250844955444336
    3. '()' → logprob: -9.000844955444336
    4. ' ():' → logprob: -12.125844955444336
    5. '(:' → logprob: -12.375844955444336
    6. '():
' → logprob: -13.875844955444336
    7. ':' → logprob: -15.125844955444336
    8. '(":' → logprob: -15.375844955444336
    9. '(**' → logprob: -16.125844955444336
    10. '(()' → logprob: -16.625844955444336

Token 40: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.002613825025036931
    2. '<|end|>' → logprob: -7.0026140213012695
    3. '    ' → logprob: -7.5026140213012695
    4. 'n' → logprob: -7.7526140213012695
    5. '    
' → logprob: -8.62761402130127
    6. '<|end|>' → logprob: -9.00261402130127
    7. ' n' → logprob: -9.25261402130127
    8. '(n' → logprob: -9.37761402130127
    9. ' pass' → logprob: -10.00261402130127
    10. 'pass' → logprob: -10.25261402130127

Token 41: ' [' (ID: 723)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.4372009038925171
    2. ' n' → logprob: -1.062200903892517
    3. '   ' → logprob: -5.187201023101807
    4. 'N' → logprob: -6.312201023101807
    5. ' N' → logprob: -6.937201023101807
    6. '    ' → logprob: -10.312200546264648
    7. '	n' → logprob: -10.937200546264648
    8. ' ' → logprob: -12.187200546264648
    9. '#' → logprob: -12.312200546264648
    10. 's' → logprob: -12.312200546264648

Token 42: 'a' (ID: 64)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0282578244805336
    2. 'n' → logprob: -4.028257846832275
    3. 'read' → logprob: -5.403257846832275
    4. 'map' → logprob: -6.403257846832275
    5. ']' → logprob: -6.778257846832275
    6. 'input' → logprob: -7.403257846832275
    7. ']int' → logprob: -7.528257846832275
    8. 'N' → logprob: -7.653257846832275
    9. '0' → logprob: -7.903257846832275
    10. 'list' → logprob: -8.403257369995117

Token 43: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0020403447560966015
    2. ',b' → logprob: -6.252040386199951
    3. ' ,' → logprob: -10.377039909362793
    4. ']' → logprob: -10.752039909362793
    5. 's' → logprob: -11.252039909362793
    6. 'b' → logprob: -11.627039909362793
    7. 'd' → logprob: -11.877039909362793
    8. ',a' → logprob: -12.002039909362793
    9. 'for' → logprob: -12.502039909362793
    10. 'a' → logprob: -12.627039909362793

Token 44: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.014171031303703785
    2. ' b' → logprob: -4.264171123504639
    3. ']' → logprob: -13.01417064666748
    4. 'n' → logprob: -13.38917064666748
    5. ' ' → logprob: -13.38917064666748
    6. 'k' → logprob: -14.63917064666748
    7. ')' → logprob: -15.26417064666748
    8. ' n' → logprob: -15.38917064666748
    9. ',b' → logprob: -15.38917064666748
    10. '   ' → logprob: -15.63917064666748

Token 45: ',' (ID: 11)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -7.433829159708694e-05
    2. ']=' → logprob: -10.12507438659668
    3. ',' → logprob: -10.87507438659668
    4. ' ]' → logprob: -11.62507438659668
    5. ' =' → logprob: -12.87507438659668
    6. ')' → logprob: -13.62507438659668
    7. '=' → logprob: -13.75007438659668
    8. ']int' → logprob: -14.12507438659668
    9. '],' → logprob: -16.12507438659668
    10. ' ' → logprob: -16.25007438659668

Token 46: ' k' (ID: 372)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.02404160425066948
    2. ' c' → logprob: -4.274041652679443
    3. 'k' → logprob: -5.774041652679443
    4. ']' → logprob: -5.774041652679443
    5. 'n' → logprob: -6.399041652679443
    6. ']=' → logprob: -7.024041652679443
    7. 's' → logprob: -8.774041175842285
    8. 'N' → logprob: -8.899041175842285
    9. ' k' → logprob: -9.524041175842285
    10. ' n' → logprob: -9.524041175842285

Token 47: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -9.372294698550832e-06
    2. ' ]' → logprob: -11.875009536743164
    3. ']=' → logprob: -13.000009536743164
    4. ',' → logprob: -17.875009536743164
    5. ' =' → logprob: -18.000009536743164
    6. ')' → logprob: -18.625009536743164
    7. '`]' → logprob: -19.000009536743164
    8. '],' → logprob: -19.250009536743164
    9. '   ' → logprob: -19.625009536743164
    10. '"]' → logprob: -19.750009536743164

Token 48: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.011050650849938393
    2. '=' → logprob: -4.511050701141357
    3. ']' → logprob: -14.2610502243042
    4. ' =[' → logprob: -14.3860502243042
    5. ')' → logprob: -14.5110502243042
    6. '[' → logprob: -14.7610502243042
    7. ' ' → logprob: -15.2610502243042
    8. ',' → logprob: -16.261051177978516
    9. '=input' → logprob: -16.511051177978516
    10. ' =)' → logprob: -16.636051177978516

Token 49: ' list' (ID: 1562)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.026488976553082466
    2. ' map' → logprob: -3.776489019393921
    3. 'list' → logprob: -5.776488780975342
    4. ' list' → logprob: -8.9014892578125
    5. 'read' → logprob: -14.2764892578125
    6. '(map' → logprob: -14.5264892578125
    7. '[' → logprob: -15.2764892578125
    8. '	map' → logprob: -15.4014892578125
    9. 'input' → logprob: -15.6514892578125
    10. ' ' → logprob: -15.6514892578125

Token 50: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.0019320894498378038
    2. '(' → logprob: -6.251932144165039
    3. 'map' → logprob: -13.751932144165039
    4. '(read' → logprob: -14.501932144165039
    5. '(int' → logprob: -14.626932144165039
    6. '(
' → logprob: -14.626932144165039
    7. '(input' → logprob: -14.876932144165039
    8. ' map' → logprob: -15.626932144165039
    9. '()' → logprob: -15.876932144165039
    10. '(range' → logprob: -16.25193214416504

Token 51: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0005124026210978627
    2. 'int' → logprob: -7.875512599945068
    3. '(' → logprob: -9.62551212310791
    4. '(str' → logprob: -10.62551212310791
    5. ',int' → logprob: -11.37551212310791
    6. '(lambda' → logprob: -11.75051212310791
    7. '<int' → logprob: -12.00051212310791
    8. ')' → logprob: -12.12551212310791
    9. '=int' → logprob: -12.37551212310791
    10. ' int' → logprob: -12.75051212310791

Token 52: ',' (ID: 11)
  Prédit: '(read'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(read' → logprob: -0.45726120471954346
    2. ',' → logprob: -1.0822612047195435
    3. '(sys' → logprob: -4.082261085510254
    4. 'read' → logprob: -5.082261085510254
    5. ',input' → logprob: -6.332261085510254
    6. '(input' → logprob: -6.707261085510254
    7. '(' → logprob: -7.082261085510254
    8. ' read' → logprob: -7.707261085510254
    9. ')' → logprob: -8.332261085510254
    10. 'sys' → logprob: -8.332261085510254

Token 53: ' read' (ID: 1729)
  Prédit: 'read'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'read' → logprob: -0.12706701457500458
    2. ' read' → logprob: -2.1270670890808105
    3. 'input' → logprob: -9.627066612243652
    4. ' input' → logprob: -10.127066612243652
    5. 'sys' → logprob: -11.627066612243652
    6. '   ' → logprob: -12.002066612243652
    7. '	read' → logprob: -12.002066612243652
    8. '(read' → logprob: -12.252066612243652
    9. ' sys' → logprob: -12.627066612243652
    10. ')' → logprob: -13.502066612243652

Token 54: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -2.045823566731997e-05
    2. '()' → logprob: -10.875020027160645
    3. ' ().' → logprob: -13.500020027160645
    4. '(' → logprob: -17.00002098083496
    5. ')' → logprob: -17.50002098083496
    6. 'split' → logprob: -17.87502098083496
    7. '.split' → logprob: -18.25002098083496
    8. ' ' → logprob: -18.75002098083496
    9. '   ' → logprob: -18.75002098083496
    10. '()
' → logprob: -18.75002098083496

Token 55: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -7.827200897736475e-05
    2. 'strip' → logprob: -9.500078201293945
    3. ' split' → logprob: -13.125078201293945
    4. '(split' → logprob: -13.750078201293945
    5. 'rstrip' → logprob: -15.875078201293945
    6. 's' → logprob: -16.500078201293945
    7. 'spl' → logprob: -17.625078201293945
    8. ')' → logprob: -17.875078201293945
    9. ' ' → logprob: -18.000078201293945
    10. '```' → logprob: -18.375078201293945

Token 56: '()))

' (ID: 125972)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.008029835298657417
    2. '))' → logprob: -5.633029937744141
    3. '()' → logprob: -5.883029937744141
    4. '())' → logprob: -6.508029937744141
    5. '(' → logprob: -9.50802993774414
    6. '()));' → logprob: -10.50802993774414
    7. '()))
' → logprob: -10.88302993774414
    8. ')' → logprob: -11.63302993774414
    9. '())))' → logprob: -11.75802993774414
    10. '());' → logprob: -13.88302993774414

Token 57: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.606656551361084
    2. '
' → logprob: -2.231656551361084
    3. 'for' → logprob: -2.856656551361084
    4. 'a' → logprob: -3.106656551361084
    5. '    
' → logprob: -3.356656551361084
    6. 'result' → logprob: -3.356656551361084
    7. 'dp' → logprob: -3.356656551361084
    8. 'tokens' → logprob: -3.981656551361084
    9. '<|end|>' → logprob: -4.106656551361084
    10. ' for' → logprob: -4.481656551361084

Token 58: ' def' (ID: 1056)
  Prédit: 'ab'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ab' → logprob: -1.3636049032211304
    2. 'dp' → logprob: -1.3636049032211304
    3. 'for' → logprob: -2.48860502243042
    4. 'ans' → logprob: -2.61360502243042
    5. 'a' → logprob: -2.73860502243042
    6. 'count' → logprob: -2.98860502243042
    7. 'used' → logprob: -3.48860502243042
    8. 'res' → logprob: -3.86360502243042
    9. 'cnt' → logprob: -3.86360502243042
    10. 's' → logprob: -3.98860502243042

Token 59: ' f' (ID: 285)
  Prédit: ' dfs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' dfs' → logprob: -0.1700771152973175
    2. ' factorial' → logprob: -2.920077085494995
    3. ' comb' → logprob: -3.170077085494995
    4. ' perm' → logprob: -4.420077323913574
    5. 'dfs' → logprob: -4.545077323913574
    6. ' f' → logprob: -5.170077323913574
    7. ' calc' → logprob: -5.170077323913574
    8. ' check' → logprob: -5.420077323913574
    9. ' is' → logprob: -5.920077323913574
    10. ' helper' → logprob: -6.295077323913574

Token 60: '(x' (ID: 4061)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.6932926177978516
    2. '(x' → logprob: -0.9432926177978516
    3. 'actor' → logprob: -3.3182926177978516
    4. '(i' → logprob: -3.5682926177978516
    5. '(a' → logprob: -3.6932926177978516
    6. 'act' → logprob: -4.943292617797852
    7. '(' → logprob: -5.568292617797852
    8. 'ac' → logprob: -5.693292617797852
    9. '(ac' → logprob: -6.193292617797852
    10. '(s' → logprob: -7.318292617797852

Token 61: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0008314246661029756
    2. '):
' → logprob: -8.500831604003906
    3. ':' → logprob: -8.625831604003906
    4. ')' → logprob: -8.750831604003906
    5. ',' → logprob: -8.750831604003906
    6. ' ):' → logprob: -9.125831604003906
    7. '):
' → logprob: -12.500831604003906
    8. '=' → logprob: -12.750831604003906
    9. ')):' → logprob: -12.875831604003906
    10. '}:' → logprob: -13.500831604003906

Token 62: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.4911848306655884
    2. ' y' → logprob: -1.2411848306655884
    3. 'n' → logprob: -3.741184711456299
    4. ' n' → logprob: -4.116184711456299
    5. 'm' → logprob: -4.866184711456299
    6. 'k' → logprob: -4.991184711456299
    7. 'p' → logprob: -5.116184711456299
    8. ' p' → logprob: -5.241184711456299
    9. ' m' → logprob: -6.116184711456299
    10. 'mod' → logprob: -6.116184711456299

Token 63: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0007266097818501294
    2. ',' → logprob: -7.875726699829102
    3. ')' → logprob: -8.625726699829102
    4. '):
' → logprob: -9.500726699829102
    5. ' ):' → logprob: -9.750726699829102
    6. ':' → logprob: -10.875726699829102
    7. ')):' → logprob: -12.125726699829102
    8. '   ' → logprob: -13.375726699829102
    9. '):
' → logprob: -14.000726699829102
    10. '>):' → logprob: -14.125726699829102

Token 64: ' z' (ID: 579)
  Prédit: 'z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'z' → logprob: -0.5257815718650818
    2. ' z' → logprob: -1.2757816314697266
    3. 'k' → logprob: -4.650781631469727
    4. 'n' → logprob: -5.025781631469727
    5. ' p' → logprob: -5.150781631469727
    6. ' n' → logprob: -5.150781631469727
    7. 'p' → logprob: -5.150781631469727
    8. ' cnt' → logprob: -5.150781631469727
    9. ' depth' → logprob: -5.275781631469727
    10. ' used' → logprob: -5.400781631469727

Token 65: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0005101414280943573
    2. ')' → logprob: -7.875510215759277
    3. '):
' → logprob: -10.000510215759277
    4. ' ):' → logprob: -10.250510215759277
    5. ',' → logprob: -10.625510215759277
    6. ':' → logprob: -11.125510215759277
    7. ')):' → logprob: -12.750510215759277
    8. '=' → logprob: -13.375510215759277
    9. '):
' → logprob: -14.125510215759277
    10. '>):' → logprob: -14.625510215759277

Token 66: '       ' (ID: 309)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5521302819252014
    2. '):' → logprob: -0.9271302819252014
    3. '   ' → logprob: -3.9271302223205566
    4. '       ' → logprob: -5.802130222320557
    5. '):
' → logprob: -5.927130222320557
    6. ':
' → logprob: -6.427130222320557
    7. ',' → logprob: -7.427130222320557
    8. ':return' → logprob: -8.427130699157715
    9. ' :' → logprob: -8.677130699157715
    10. '():' → logprob: -8.802130699157715

Token 67: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.8187964558601379
    2. '       ' → logprob: -1.3187963962554932
    3. '   ' → logprob: -1.8187963962554932
    4. 'if' (adapté à ' if') → logprob: -2.193796396255493
    5. ' return' → logprob: -4.693796634674072
    6. 'return' → logprob: -5.068796634674072
    7. ')' → logprob: -7.943796634674072
    8. ':return' → logprob: -7.943796634674072
    9. ':' → logprob: -8.068796157836914
    10. ' ' → logprob: -8.068796157836914

Token 68: ' z' (ID: 579)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.4728356897830963
    2. 'z' → logprob: -1.597835659980774
    3. ' x' → logprob: -2.0978357791900635
    4. ' z' → logprob: -3.2228357791900635
    5. 'y' → logprob: -5.472835540771484
    6. ' y' → logprob: -5.472835540771484
    7. '(x' → logprob: -6.472835540771484
    8. ' (' → logprob: -6.972835540771484
    9. '(z' → logprob: -8.222835540771484
    10. ' not' → logprob: -8.347835540771484

Token 69: ' <=' (ID: 5017)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.4752647876739502
    2. '==' → logprob: -0.9752647876739502
    3. '<=' → logprob: -7.600264549255371
    4. ' <=' → logprob: -7.850264549255371
    5. ')' → logprob: -9.600264549255371
    6. '<' → logprob: -10.100264549255371
    7. '>' → logprob: -10.100264549255371
    8. '=' → logprob: -10.350264549255371
    9. ' <' → logprob: -10.475264549255371
    10. '0' → logprob: -10.850264549255371

Token 70: ' x' (ID: 1215)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.02085915207862854
    2. ' ' → logprob: -3.8958592414855957
    3. '1' → logprob: -8.395858764648438
    4. 'a' → logprob: -10.395858764648438
    5. '10' → logprob: -11.458358764648438
    6. 'x' → logprob: -12.083358764648438
    7. 'k' → logprob: -12.145858764648438
    8. '2' → logprob: -12.208358764648438
    9. '3' → logprob: -12.708358764648438
    10. '5' → logprob: -12.833358764648438

Token 71: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.06451772898435593
    2. ':
' → logprob: -3.4395177364349365
    3. ':return' → logprob: -4.189517498016357
    4. ' and' → logprob: -5.439517498016357
    5. '       ' → logprob: -5.564517498016357
    6. ' or' → logprob: -6.189517498016357
    7. '+' → logprob: -6.564517498016357
    8. '           ' → logprob: -6.939517498016357
    9. 'and' → logprob: -6.939517498016357
    10. '   ' → logprob: -7.689517498016357

Token 72: '           ' (ID: 352)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.3498080372810364
    2. ':return' → logprob: -1.8498079776763916
    3. ':
' → logprob: -2.9748079776763916
    4. '           ' → logprob: -3.0998079776763916
    5. '       ' → logprob: -3.9748079776763916
    6. ' return' → logprob: -4.724808216094971
    7. 'return' → logprob: -5.349808216094971
    8. ' and' → logprob: -5.724808216094971
    9. ' or' → logprob: -6.349808216094971
    10. '   ' → logprob: -6.474808216094971

Token 73: ' print' (ID: 2123)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.0975949764251709
    2. ' return' → logprob: -2.972594976425171
    3. '           ' → logprob: -3.222594976425171
    4. ':return' → logprob: -6.97259521484375
    5. '               ' → logprob: -7.72259521484375
    6. '       ' → logprob: -8.59759521484375
    7. '   ' → logprob: -9.47259521484375
    8. '{return' → logprob: -9.84759521484375
    9. ':' → logprob: -9.97259521484375
    10. '
' → logprob: -10.59759521484375

Token 74: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.41427701711654663
    2. '(' → logprob: -1.7892770767211914
    3. '("' → logprob: -2.6642770767211914
    4. '('' → logprob: -2.9142770767211914
    5. '(z' → logprob: -3.9142770767211914
    6. '(y' → logprob: -4.289277076721191
    7. '(a' → logprob: -4.414277076721191
    8. '(f' → logprob: -7.414277076721191
    9. '((' → logprob: -8.414277076721191
    10. '(str' → logprob: -8.539277076721191

Token 75: '-z' (ID: 16826)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.6117656230926514
    2. ')' → logprob: -0.9867656230926514
    3. '-' → logprob: -2.9867656230926514
    4. ',end' → logprob: -4.9867658615112305
    5. ' -' → logprob: -5.1117658615112305
    6. ' y' → logprob: -5.6117658615112305
    7. '+y' → logprob: -5.6117658615112305
    8. '+' → logprob: -5.6117658615112305
    9. ',y' → logprob: -5.7367658615112305
    10. ' +' → logprob: -6.1117658615112305

Token 76: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6995017528533936
    2. ',' → logprob: -0.8245017528533936
    3. '+' → logprob: -3.0745017528533936
    4. ')
' → logprob: -4.949501991271973
    5. ',end' → logprob: -5.324501991271973
    6. ' ,' → logprob: -6.074501991271973
    7. ' )' → logprob: -6.574501991271973
    8. ' +' → logprob: -7.074501991271973
    9. '),' → logprob: -8.074501991271973
    10. ',y' → logprob: -8.199501991271973

Token 77: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.23302645981311798
    2. ' y' → logprob: -1.7330265045166016
    3. '0' → logprob: -4.608026504516602
    4. 'b' → logprob: -5.483026504516602
    5. '"' → logprob: -5.608026504516602
    6. ')' → logprob: -5.983026504516602
    7. 'end' → logprob: -6.108026504516602
    8. ' ' → logprob: -6.358026504516602
    9. ''' → logprob: -6.858026504516602
    10. 'x' → logprob: -6.983026504516602

Token 78: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.05585136637091637
    2. ')
' → logprob: -2.930851459503174
    3. ',' → logprob: -7.680851459503174
    4. ' )' → logprob: -8.555850982666016
    5. '-' → logprob: -8.930850982666016
    6. ')

' → logprob: -9.430850982666016
    7. ');' → logprob: -10.930850982666016
    8. ' )
' → logprob: -11.305850982666016
    9. ')return' → logprob: -11.555850982666016
    10. '))' → logprob: -11.805850982666016

Token 79: '       ' (ID: 309)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.3536877930164337
    2. '       ' → logprob: -1.2286877632141113
    3. ')' → logprob: -5.853687763214111
    4. '<|end|>' → logprob: -7.353687763214111
    5. ',' → logprob: -7.603687763214111
    6. '   ' → logprob: -7.978687763214111
    7. ' and' → logprob: -8.85368824005127
    8. '<|end|>' → logprob: -8.85368824005127
    9. 'elif' → logprob: -9.10368824005127
    10. 'return' → logprob: -9.72868824005127

Token 80: ' else' (ID: 1203)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.3000616133213043
    2. '   ' → logprob: -2.1750617027282715
    3. 'elif' → logprob: -2.5500617027282715
    4. ' elif' → logprob: -3.4250617027282715
    5. 'else' (adapté à ' else') → logprob: -4.0500617027282715
    6. ' else' → logprob: -4.4250617027282715
    7. '           ' → logprob: -5.4250617027282715
    8. ',' → logprob: -7.8000617027282715
    9. ' and' → logprob: -8.425061225891113
    10. '	elif' → logprob: -8.800061225891113

Token 81: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.462182879447937
    2. ':
' → logprob: -1.587182879447937
    3. ' if' → logprob: -2.2121829986572266
    4. 'if' → logprob: -3.4621829986572266
    5. '       ' → logprob: -4.212182998657227
    6. '           ' → logprob: -4.837182998657227
    7. 'If' → logprob: -7.712182998657227
    8. '          ' → logprob: -8.337182998657227
    9. 'f' → logprob: -8.587182998657227
    10. ',' → logprob: -8.712182998657227

Token 82: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -1.19499671459198
    2. ' if' → logprob: -1.31999671459198
    3. 'if' → logprob: -1.31999671459198
    4. '       ' → logprob: -2.3199968338012695
    5. ':' → logprob: -3.3199968338012695
    6. ':
' → logprob: -3.6949968338012695
    7. 'If' → logprob: -6.4449968338012695
    8. 'print' → logprob: -7.6949968338012695
    9. '   ' → logprob: -8.06999683380127
    10. ',' → logprob: -8.44499683380127

Token 83: ' left' (ID: 3561)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.6319752335548401
    2. 'f' → logprob: -1.0069751739501953
    3. '           ' → logprob: -2.8819751739501953
    4. 'if' → logprob: -3.8819751739501953
    5. ' f' → logprob: -4.881975173950195
    6. '       ' → logprob: -5.381975173950195
    7. ' print' → logprob: -5.631975173950195
    8. ':' → logprob: -6.256975173950195
    9. '(' → logprob: -6.256975173950195
    10. '(f' → logprob: -6.756975173950195

Token 84: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.08042939752340317
    2. ' =' → logprob: -2.7054293155670166
    3. 'over' → logprob: -4.705429553985596
    4. '-' → logprob: -7.580429553985596
    5. '-=' → logprob: -8.205429077148438
    6. ',' → logprob: -8.330429077148438
    7. 'y' → logprob: -9.330429077148438
    8. '=y' → logprob: -9.955429077148438
    9. ':=' → logprob: -10.205429077148438
    10. 'overs' → logprob: -10.330429077148438

Token 85: ' y' (ID: 342)
  Prédit: 'z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'z' → logprob: -0.9277599453926086
    2. 'y' → logprob: -1.1777598857879639
    3. 'x' → logprob: -1.6777598857879639
    4. ' y' → logprob: -2.927759885787964
    5. ' z' → logprob: -3.802759885787964
    6. 'k' → logprob: -4.677760124206543
    7. ' x' → logprob: -5.302760124206543
    8. '(x' → logprob: -5.427760124206543
    9. '(y' → logprob: -5.427760124206543
    10. '(z' → logprob: -5.552760124206543

Token 86: '-(' (ID: 18825)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.018297549337148666
    2. ' -' → logprob: -4.0182976722717285
    3. '-(' → logprob: -9.39329719543457
    4. '-z' → logprob: -9.76829719543457
    5. '-k' → logprob: -13.39329719543457
    6. '-n' → logprob: -13.64329719543457
    7. '-x' → logprob: -13.64329719543457
    8. '-=' → logprob: -14.14329719543457
    9. '+' → logprob: -14.51829719543457
    10. ' ' → logprob: -15.01829719543457

Token 87: 'z' (ID: 89)
  Prédit: 'z'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'z' → logprob: -0.5786500573158264
    2. '(z' → logprob: -0.8286500573158264
    3. ' z' → logprob: -6.703649997711182
    4. ' (' → logprob: -7.328649997711182
    5. 'k' → logprob: -7.828649997711182
    6. '(k' → logprob: -8.57865047454834
    7. '(' → logprob: -9.32865047454834
    8. '   ' → logprob: -10.32865047454834
    9. '	z' → logprob: -10.95365047454834
    10. '(x' → logprob: -10.95365047454834

Token 88: '-x' (ID: 12651)
  Prédit: ' -'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.8274586200714111
    2. '-x' → logprob: -0.8274586200714111
    3. '-' → logprob: -2.077458620071411
    4. 'x' → logprob: -7.827458381652832
    5. ' x' → logprob: -11.577458381652832
    6. ' ' → logprob: -12.327458381652832
    7. '   ' → logprob: -12.702458381652832
    8. '-xl' → logprob: -12.827458381652832
    9. '-ex' → logprob: -12.827458381652832
    10. '-=' → logprob: -13.702458381652832

Token 89: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.012752726674079895
    2. ')
' → logprob: -4.387752532958984
    3. '<|end|>' → logprob: -9.012752532958984
    4. ')>' → logprob: -9.887752532958984
    5. '<|end|>' → logprob: -11.262752532958984
    6. ' )' → logprob: -11.512752532958984
    7. ')

' → logprob: -11.637752532958984
    8. ')return' → logprob: -11.762752532958984
    9. '       ' → logprob: -13.012752532958984
    10. 'if' → logprob: -13.137752532958984

Token 90: '           ' (ID: 352)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5457233190536499
    2. ' if' → logprob: -1.67072331905365
    3. 'if' → logprob: -2.2957234382629395
    4. '<|end|>' → logprob: -3.0457234382629395
    5. '           ' → logprob: -3.5457234382629395
    6. '>' → logprob: -4.0457234382629395
    7. ' and' → logprob: -4.5457234382629395
    8. ' >' → logprob: -5.1707234382629395
    9. '0' → logprob: -5.4207234382629395
    10. '          ' → logprob: -6.2957234382629395

Token 91: ' y' (ID: 342)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.5529729723930359
    2. 'print' → logprob: -1.5529730319976807
    3. '           ' → logprob: -2.3029730319976807
    4. ' if' → logprob: -2.4279730319976807
    5. 'f' → logprob: -4.552972793579102
    6. ' print' → logprob: -5.427972793579102
    7. '=' → logprob: -6.052972793579102
    8. ',' → logprob: -6.302972793579102
    9. 'def' → logprob: -6.552972793579102
    10. ' =' → logprob: -6.802972793579102

Token 92: '2' (ID: 17)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.7068036794662476
    2. ' =' → logprob: -0.7068036794662476
    3. 'f' → logprob: -5.331803798675537
    4. ',' → logprob: -5.706803798675537
    5. '>' → logprob: -6.331803798675537
    6. ' >' → logprob: -7.206803798675537
    7. '-' → logprob: -7.456803798675537
    8. ' -=' → logprob: -7.956803798675537
    9. '=max' → logprob: -8.081803321838379
    10. '-=' → logprob: -8.206803321838379

Token 93: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.35889720916748047
    2. ' =' → logprob: -1.4838972091674805
    3. ',' → logprob: -2.6088972091674805
    4. ')' → logprob: -8.48389720916748
    5. '<|end|>' → logprob: -8.85889720916748
    6. '>' → logprob: -9.23389720916748
    7. '-' → logprob: -9.23389720916748
    8. '2' → logprob: -9.23389720916748
    9. 'f' → logprob: -9.60889720916748
    10. '=max' → logprob: -9.85889720916748

Token 94: ' left' (ID: 3561)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'max' → logprob: -1.1779354810714722
    2. 'x' → logprob: -1.6779354810714722
    3. ' max' → logprob: -1.9279354810714722
    4. '0' → logprob: -2.1779356002807617
    5. 'left' → logprob: -2.1779356002807617
    6. ' x' → logprob: -2.5529356002807617
    7. ' ' → logprob: -4.052935600280762
    8. ' y' → logprob: -4.552935600280762
    9. ' left' → logprob: -4.552935600280762
    10. 'y' → logprob: -4.802935600280762

Token 95: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.16339649260044098
    2. 'if' → logprob: -2.0383965969085693
    3. ',' → logprob: -4.41339635848999
    4. '           ' → logprob: -6.16339635848999
    5. '+' → logprob: -6.41339635848999
    6. '>=' → logprob: -7.16339635848999
    7. '%' → logprob: -7.41339635848999
    8. '>' → logprob: -7.53839635848999
    9. ' >' → logprob: -7.91339635848999
    10. ' >=' → logprob: -8.038396835327148

Token 96: ' left' (ID: 3561)
  Prédit: ' left'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' left' → logprob: -0.010975311510264874
    2. 'left' → logprob: -4.635975360870361
    3. ' y' → logprob: -7.010975360870361
    4. ' ' → logprob: -9.385974884033203
    5. '0' → logprob: -9.760974884033203
    6. '>' → logprob: -9.885974884033203
    7. 'y' → logprob: -9.885974884033203
    8. ' lef' → logprob: -10.260974884033203
    9. '	left' → logprob: -11.260974884033203
    10. '(left' → logprob: -12.010974884033203

Token 97: ' >' (ID: 1424)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.8034562468528748
    2. '>=' → logprob: -0.9284562468528748
    3. ' >=' → logprob: -2.4284563064575195
    4. ' >' → logprob: -2.6784563064575195
    5. '<' → logprob: -9.17845630645752
    6. '<=' → logprob: -10.30345630645752
    7. ' <' → logprob: -10.30345630645752
    8. '≥' → logprob: -11.17845630645752
    9. ' ' → logprob: -11.42845630645752
    10. 'else' → logprob: -12.30345630645752

Token 98: ' ' (ID: 220)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.193210631608963
    2. '0' → logprob: -1.8182106018066406
    3. ' ' → logprob: -4.318210601806641
    4. '>' → logprob: -11.44321060180664
    5. ' =' → logprob: -11.69321060180664
    6. '1' → logprob: -11.94321060180664
    7. '>=' → logprob: -12.31821060180664
    8. '-' → logprob: -12.56821060180664
    9. '==' → logprob: -12.69321060180664
    10. '2' → logprob: -13.19321060180664

Token 99: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0860031396150589
    2. '=' → logprob: -2.586003065109253
    3. ' ' → logprob: -4.961003303527832
    4. '-' → logprob: -10.086003303527832
    5. '1' → logprob: -11.586003303527832
    6. '>' → logprob: -11.836003303527832
    7. ' -' → logprob: -11.961003303527832
    8. '   ' → logprob: -12.586003303527832
    9. ' =' → logprob: -12.586003303527832
    10. '  ' → logprob: -13.336003303527832

Token 100: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.06994332373142242
    2. 'else' → logprob: -2.694943428039551
    3. ' ' → logprob: -12.81994342803955
    4. '	else' → logprob: -13.44494342803955
    5. '   ' → logprob: -14.19494342803955
    6. ',' → logprob: -14.44494342803955
    7. '>' → logprob: -14.81994342803955
    8. '       ' → logprob: -15.19494342803955
    9. '    ' → logprob: -15.56994342803955
    10. '  ' → logprob: -15.94494342803955

Token 101: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0029324181377887726
    2. ' ' → logprob: -5.877932548522949
    3. '   ' → logprob: -9.12793254852295
    4. '           ' → logprob: -11.37793254852295
    5. '       ' → logprob: -13.12793254852295
    6. '  ' → logprob: -13.62793254852295
    7. '1' → logprob: -13.75293254852295
    8. '               ' → logprob: -14.75293254852295
    9. ' ' → logprob: -14.75293254852295
    10. '    ' → logprob: -15.00293254852295

Token 102: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -7.624555291840807e-05
    2. ' ' → logprob: -9.500076293945312
    3. '   ' → logprob: -14.000076293945312
    4. '...' → logprob: -15.625076293945312
    5. '1' → logprob: -16.125076293945312
    6. '  ' → logprob: -16.875076293945312
    7. '000' → logprob: -17.000076293945312
    8. '           ' → logprob: -17.250076293945312
    9. '(' → logprob: -18.000076293945312
    10. 'None' → logprob: -18.125076293945312

Token 103: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.47225263714790344
    2. '           ' → logprob: -1.097252607345581
    3. '<|end|>' → logprob: -3.347252607345581
    4. '       ' → logprob: -6.34725284576416
    5. ',' → logprob: -6.59725284576416
    6. '<|end|>' → logprob: -6.84725284576416
    7. '            
' → logprob: -7.22225284576416
    8. ' ' → logprob: -7.84725284576416
    9. ')' → logprob: -7.97225284576416
    10. ' else' → logprob: -8.22225284576416

Token 104: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0016291213687509298
    2. '<|end|>' → logprob: -7.12662935256958
    3. '       ' → logprob: -8.126628875732422
    4. ',' → logprob: -8.501628875732422
    5. '
' → logprob: -9.126628875732422
    6. '            
' → logprob: -10.126628875732422
    7. ' ' → logprob: -10.251628875732422
    8. '   ' → logprob: -10.751628875732422
    9. '               ' → logprob: -10.876628875732422
    10. ' else' → logprob: -10.876628875732422

Token 105: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.13460136950016022
    2. '           ' → logprob: -2.384601354598999
    3. ' print' → logprob: -3.509601354598999
    4. 'x' → logprob: -6.384601593017578
    5. 'if' → logprob: -7.009601593017578
    6. '       ' → logprob: -7.634601593017578
    7. ' x' → logprob: -7.884601593017578
    8. ' if' → logprob: -8.884601593017578
    9. '   ' → logprob: -9.634601593017578
    10. 'z' → logprob: -10.259601593017578

Token 106: '(' (ID: 7)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.3807647228240967
    2. '(' → logprob: -1.2557647228240967
    3. '(y' → logprob: -3.7557647228240967
    4. '0' → logprob: -5.505764961242676
    5. '((' → logprob: -6.505764961242676
    6. '(max' → logprob: -6.755764961242676
    7. 'x' → logprob: -7.130764961242676
    8. '(z' → logprob: -8.255764961242676
    9. '(left' → logprob: -8.755764961242676
    10. '(a' → logprob: -9.005764961242676

Token 107: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.07628583908081055
    2. 'x' → logprob: -2.7012858390808105
    3. 'y' → logprob: -6.2012858390808105
    4. '(' → logprob: -6.4512858390808105
    5. '(x' → logprob: -6.7012858390808105
    6. 'z' → logprob: -7.8262858390808105
    7. ' ' → logprob: -7.9512858390808105
    8. 'max' → logprob: -8.076286315917969
    9. '(y' → logprob: -9.326286315917969
    10. '"' → logprob: -9.451286315917969

Token 108: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00010485442908247933
    2. ',y' → logprob: -9.625104904174805
    3. ' ,' → logprob: -10.250104904174805
    4. '   ' → logprob: -14.125104904174805
    5. ' y' → logprob: -14.125104904174805
    6. ')' → logprob: -14.500104904174805
    7. '           ' → logprob: -15.250104904174805
    8. ',
' → logprob: -15.250104904174805
    9. '，' → logprob: -15.750104904174805
    10. 'y' → logprob: -15.750104904174805

Token 109: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.0013621398247778416
    2. ' y' → logprob: -6.626362323760986
    3. 'max' → logprob: -10.501361846923828
    4. '   ' → logprob: -13.001361846923828
    5. '           ' → logprob: -13.126361846923828
    6. ' max' → logprob: -13.501361846923828
    7. '0' → logprob: -14.376361846923828
    8. '       ' → logprob: -14.751361846923828
    9. '          ' → logprob: -14.876361846923828
    10. ' ' → logprob: -15.126361846923828

Token 110: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0021195695735514164
    2. '-' → logprob: -6.627119541168213
    3. ' -' → logprob: -7.252119541168213
    4. ' ' → logprob: -10.002120018005371
    5. ')' → logprob: -11.127120018005371
    6. '-y' → logprob: -11.377120018005371
    7. '-z' → logprob: -12.002120018005371
    8. '   ' → logprob: -12.502120018005371
    9. '  ' → logprob: -14.939620018005371
    10. ')-' → logprob: -15.189620018005371

Token 111: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.8087270038668066e-05
    2. ')
' → logprob: -10.625027656555176
    3. '       ' → logprob: -12.875027656555176
    4. ' )' → logprob: -14.625027656555176
    5. '   ' → logprob: -15.000027656555176
    6. '))' → logprob: -15.750027656555176
    7. ')

' → logprob: -16.750028610229492
    8. ')}}' → logprob: -16.750028610229492
    9. ')}' → logprob: -17.000028610229492
    10. ')))' → logprob: -17.500028610229492

Token 112: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 113: ' f' (ID: 285)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.35454490780830383
    2. 'if' → logprob: -1.8545448780059814
    3. '
' → logprob: -2.6045448780059814
    4. 'f' (adapté à ' f') → logprob: -3.1045448780059814
    5. '<|end|>' → logprob: -4.6045451164245605
    6. '    
' → logprob: -5.2295451164245605
    7. 'def' → logprob: -6.2295451164245605
    8. ')' → logprob: -7.1045451164245605
    9. 'n' → logprob: -7.3545451164245605
    10. '```' → logprob: -7.4795451164245605

Token 114: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.0002016331272898242
    2. '(' → logprob: -8.625201225280762
    3. ' (' → logprob: -10.875201225280762
    4. '(x' → logprob: -14.375201225280762
    5. ')(' → logprob: -14.375201225280762
    6. '(
' → logprob: -14.500201225280762
    7. '(k' → logprob: -15.375201225280762
    8. '(b' → logprob: -15.375201225280762
    9. '((' → logprob: -15.500201225280762
    10. ')' → logprob: -15.625201225280762

Token 115: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0006752623594366014
    2. ' ,' → logprob: -7.375675201416016
    3. ',b' → logprob: -10.000675201416016
    4. ')' → logprob: -13.750675201416016
    5. 'b' → logprob: -14.250675201416016
    6. ' ' → logprob: -14.500675201416016
    7. ',
' → logprob: -15.125675201416016
    8. '   ' → logprob: -15.125675201416016
    9. ' b' → logprob: -16.250675201416016
    10. '<|end|>' → logprob: -16.625675201416016

Token 116: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.014166564680635929
    2. ' b' → logprob: -4.264166355133057
    3. '   ' → logprob: -13.014166831970215
    4. ' ' → logprob: -15.264166831970215
    5. '    ' → logprob: -15.639166831970215
    6. ')b' → logprob: -15.639166831970215
    7. '	b' → logprob: -16.2641658782959
    8. '  ' → logprob: -16.3891658782959
    9. ',b' → logprob: -17.1391658782959
    10. '<|end|>' → logprob: -17.1391658782959

Token 117: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00047071068547666073
    2. ' ,' → logprob: -7.8754706382751465
    3. ',k' → logprob: -9.375471115112305
    4. 'k' → logprob: -12.375471115112305
    5. ' ' → logprob: -14.375471115112305
    6. ')' → logprob: -15.125471115112305
    7. ' k' → logprob: -15.750471115112305
    8. '),' → logprob: -16.250471115112305
    9. ',
' → logprob: -16.250471115112305
    10. '   ' → logprob: -16.625471115112305

Token 118: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.0004905993700958788
    2. ' k' → logprob: -7.625490665435791
    3. '   ' → logprob: -13.125490188598633
    4. ' ' → logprob: -15.000490188598633
    5. '  ' → logprob: -15.375490188598633
    6. ')' → logprob: -16.375490188598633
    7. '	k' → logprob: -17.250490188598633
    8. '    ' → logprob: -18.250490188598633
    9. 'int' → logprob: -19.125490188598633
    10. '{k' → logprob: -19.437990188598633

Token 119: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.465036105713807e-06
    2. ')
' → logprob: -12.250007629394531
    3. ' )' → logprob: -13.625007629394531
    4. '+' → logprob: -13.875007629394531
    5. '-' → logprob: -16.25000762939453
    6. '))' → logprob: -16.37500762939453
    7. ')}' → logprob: -16.50000762939453
    8. ')

' → logprob: -17.25000762939453
    9. ')#' → logprob: -17.25000762939453
    10. ')}}' → logprob: -17.25000762939453

Token 120: 'main' (ID: 7731)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -1.5125446319580078
    2. '<|end|>' → logprob: -1.5125446319580078
    3. 'if' → logprob: -1.7625446319580078
    4. 'main' → logprob: -1.7625446319580078
    5. '
' → logprob: -2.512544631958008
    6. '\n' → logprob: -3.137544631958008
    7. '0' → logprob: -3.887544631958008
    8. ')' → logprob: -4.262544631958008
    9. '#' → logprob: -4.387544631958008
    10. '()' → logprob: -4.637544631958008

Token 121: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -1.3663626305060461e-05
    2. '(' → logprob: -12.12501335144043
    3. '()
' → logprob: -13.12501335144043
    4. '()`' → logprob: -13.25001335144043
    5. '();' → logprob: -13.50001335144043
    6. ' ()' → logprob: -14.00001335144043
    7. '()<' → logprob: -14.75001335144043
    8. '()]' → logprob: -15.00001335144043
    9. '()

' → logprob: -15.12501335144043
    10. '())' → logprob: -15.25001335144043


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 119
Tokens correctement prédits (1ère position, stricte): 45
Tokens correctement prédits (1ère position, avec adaptation): 46
Tokens correctement prédits (top 10): 101
Précision stricte (1ère position): 37.82%
Précision adaptée (1ère position): 38.66%
Précision (top 10): 84.87%
================================================================================
