================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:17:01
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
if n % 10 == 0:
    print(10)
else:
    print(sum(map(int, str(n))))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0004540294758044183
    2. ''' → logprob: -8.50045394897461
    3. '('' → logprob: -9.37545394897461
    4. '(n' → logprob: -9.87545394897461
    5. '```' → logprob: -10.37545394897461
    6. '`' → logprob: -10.75045394897461
    7. '(
' → logprob: -11.00045394897461
    8. '("("' → logprob: -11.12545394897461
    9. ')' → logprob: -11.75045394897461
    10. '()' → logprob: -12.25045394897461

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.13287097215652466
    2. ')' → logprob: -2.13287091255188
    3. '()' → logprob: -5.382871150970459
    4. '())' → logprob: -7.382871150970459
    5. '(
' → logprob: -8.1328706741333
    6. '```' → logprob: -9.8828706741333
    7. '(

' → logprob: -10.2578706741333
    8. '('' → logprob: -10.3828706741333
    9. ''' → logprob: -10.6328706741333
    10. '(n' → logprob: -10.7578706741333

Token 5: 'if' (ID: 366)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.7043631672859192
    2. 'if' → logprob: -1.4543631076812744
    3. 'for' → logprob: -2.3293631076812744
    4. 's' → logprob: -2.4543631076812744
    5. 'f' → logprob: -4.3293633460998535
    6. ' ' → logprob: -4.4543633460998535
    7. 'x' → logprob: -4.8293633460998535
    8. ')' → logprob: -4.9543633460998535
    9. 'a' → logprob: -4.9543633460998535
    10. ''' → logprob: -5.0793633460998535

Token 6: ' n' (ID: 297)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3156430721282959
    2. ' n' → logprob: -1.315643072128296
    3. 'n' → logprob: -6.190643310546875
    4. ''' → logprob: -8.940643310546875
    5. '  ' → logprob: -9.315643310546875
    6. '"' → logprob: -10.690643310546875
    7. ' not' → logprob: -10.815643310546875
    8. ' )' → logprob: -11.440643310546875
    9. ' ' → logprob: -11.565643310546875
    10. ' (' → logprob: -11.940643310546875

Token 7: ' %' (ID: 1851)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.11459413170814514
    2. ' ' → logprob: -2.9895942211151123
    3. '>' → logprob: -3.7395942211151123
    4. ' <' → logprob: -4.239593982696533
    5. ' >=' → logprob: -4.614593982696533
    6. ' ==' → logprob: -5.739593982696533
    7. ' %' → logprob: -5.864593982696533
    8. ' <=' → logprob: -6.739593982696533
    9. '<' → logprob: -7.239593982696533
    10. '%' → logprob: -7.739593982696533

Token 8: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.14270232617855072
    2. '2' → logprob: -2.017702341079712
    3. '3' → logprob: -11.017702102661133
    4. '4' → logprob: -11.892702102661133
    5. '```' → logprob: -13.392702102661133
    6. '1' → logprob: -13.767702102661133
    7. '10' → logprob: -15.392702102661133
    8. '32' → logprob: -15.517702102661133
    9. ' ```' → logprob: -15.642702102661133
    10. '=' → logprob: -15.892702102661133

Token 9: '10' (ID: 702)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0002124806633219123
    2. '3' → logprob: -8.750212669372559
    3. ' ' → logprob: -10.250212669372559
    4. '4' → logprob: -11.500212669372559
    5. '5' → logprob: -12.750212669372559
    6. '1' → logprob: -12.750212669372559
    7. '10' → logprob: -13.625212669372559
    8. '```' → logprob: -14.000212669372559
    9. '7' → logprob: -14.875212669372559
    10. '6' → logprob: -16.500211715698242

Token 10: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.34274691343307495
    2. ' !=' → logprob: -1.9677469730377197
    3. '==' → logprob: -2.2177469730377197
    4. '!=' → logprob: -3.8427469730377197
    5. '>' → logprob: -4.592746734619141
    6. '=' → logprob: -5.217746734619141
    7. ' >' → logprob: -6.717746734619141
    8. ')' → logprob: -6.967746734619141
    9. ' =' → logprob: -7.092746734619141
    10. ' ' → logprob: -7.217746734619141

Token 11: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6326708197593689
    2. '0' → logprob: -0.7576708197593689
    3. '5' → logprob: -10.382670402526855
    4. '1' → logprob: -11.257670402526855
    5. '4' → logprob: -11.382670402526855
    6. '2' → logprob: -11.757670402526855
    7. '9' → logprob: -12.882670402526855
    8. '10' → logprob: -13.507670402526855
    9. '=' → logprob: -13.757670402526855
    10. '8' → logprob: -14.132670402526855

Token 12: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0025688796304166317
    2. ' ' → logprob: -6.12756872177124
    3. '5' → logprob: -8.127569198608398
    4. '2' → logprob: -10.127569198608398
    5. '1' → logprob: -10.377569198608398
    6. '4' → logprob: -11.752569198608398
    7. '3' → logprob: -12.877569198608398
    8. '9' → logprob: -13.002569198608398
    9. '10' → logprob: -13.690069198608398
    10. '7' → logprob: -13.940069198608398

Token 13: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -4.60414821645827e-06
    2. ':
' → logprob: -13.875004768371582
    3. ':**' → logprob: -14.000004768371582
    4. '):' → logprob: -14.125004768371582
    5. '':' → logprob: -14.250004768371582
    6. ' :' → logprob: -14.375004768371582
    7. '':'' → logprob: -15.125004768371582
    8. '>:' → logprob: -16.000003814697266
    9. ':return' → logprob: -16.875003814697266
    10. '":' → logprob: -16.875003814697266

Token 14: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5239177346229553
    2. ' print' → logprob: -1.1489176750183105
    3. 'print' → logprob: -2.5239176750183105
    4. '\n' → logprob: -5.1489176750183105
    5. '    ' → logprob: -6.5239176750183105
    6. '    
' → logprob: -6.8989176750183105
    7. '\' → logprob: -7.0239176750183105
    8. ' ' → logprob: -7.5239176750183105
    9. ' 
' → logprob: -7.8989176750183105
    10. ''' → logprob: -9.023918151855469

Token 15: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.023829419165849686
    2. 'print' (adapté à ' print') → logprob: -4.023829460144043
    3. '   ' → logprob: -5.273829460144043
    4. ' pass' → logprob: -7.648829460144043
    5. '    ' → logprob: -10.523829460144043
    6. ' ' → logprob: -11.773829460144043
    7. ' n' → logprob: -12.148829460144043
    8. '```' → logprob: -12.148829460144043
    9. 'pass' → logprob: -12.648829460144043
    10. ' continue' → logprob: -13.148829460144043

Token 16: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03591201454401016
    2. '("' → logprob: -4.035912036895752
    3. '()' → logprob: -4.285912036895752
    4. '('' → logprob: -6.410912036895752
    5. '(n' → logprob: -6.410912036895752
    6. '("("' → logprob: -8.035911560058594
    7. '("")' → logprob: -8.910911560058594
    8. '(True' → logprob: -10.035911560058594
    9. '"' → logprob: -10.910911560058594
    10. '(False' → logprob: -11.660911560058594

Token 17: '10' (ID: 702)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.39632493257522583
    2. 'n' → logprob: -1.646324872970581
    3. '0' → logprob: -2.146324872970581
    4. ''' → logprob: -5.27132511138916
    5. ''n' → logprob: -5.27132511138916
    6. '10' → logprob: -5.52132511138916
    7. '")' → logprob: -7.02132511138916
    8. '100' → logprob: -7.52132511138916
    9. 'True' → logprob: -7.89632511138916
    10. ')' → logprob: -8.02132511138916

Token 18: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.225939872208983e-05
    2. '0' → logprob: -11.125032424926758
    3. ')
' → logprob: -11.250032424926758
    4. '))' → logprob: -13.500032424926758
    5. '*' → logprob: -13.750032424926758
    6. '`)' → logprob: -14.875032424926758
    7. ' )' → logprob: -15.250032424926758
    8. '')' → logprob: -15.375032424926758
    9. '")' → logprob: -15.750032424926758
    10. '   ' → logprob: -15.875032424926758

Token 19: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0030857324600219727
    2. 'elif' → logprob: -6.253085613250732
    3. ' else' → logprob: -7.003085613250732
    4. ')' → logprob: -9.12808609008789
    5. '```' → logprob: -9.50308609008789
    6. ':' → logprob: -10.62808609008789
    7. '   ' → logprob: -11.50308609008789
    8. '_else' → logprob: -12.00308609008789
    9. '<|end|>' → logprob: -12.25308609008789
    10. '.' → logprob: -13.25308609008789

Token 20: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -7.107425062713446e-06
    2. ' :' → logprob: -12.250006675720215
    3. ':
' → logprob: -13.750006675720215
    4. '   ' → logprob: -15.125006675720215
    5. '':' → logprob: -15.375006675720215
    6. ':**' → logprob: -15.375006675720215
    7. '):' → logprob: -16.00000762939453
    8. '():' → logprob: -16.25000762939453
    9. ':return' → logprob: -16.87500762939453
    10. '```' → logprob: -17.25000762939453

Token 21: '   ' (ID: 271)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.13602608442306519
    2. 'n' → logprob: -2.38602614402771
    3. '   ' → logprob: -3.88602614402771
    4. '(n' → logprob: -4.886025905609131
    5. '    ' → logprob: -6.011025905609131
    6. '    
' → logprob: -6.136025905609131
    7. '10' → logprob: -7.136025905609131
    8. ' ' → logprob: -7.511025905609131
    9. 'print' → logprob: -7.886025905609131
    10. '     
' → logprob: -8.511026382446289

Token 22: ' print' (ID: 2123)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.008939184248447418
    2. 'print' (adapté à ' print') → logprob: -4.758939266204834
    3. ' n' → logprob: -8.258938789367676
    4. '(n' → logprob: -9.758938789367676
    5. ' print' → logprob: -12.883938789367676
    6. '%n' → logprob: -13.383938789367676
    7. '```' → logprob: -14.008938789367676
    8. '\n' → logprob: -14.258938789367676
    9. '   ' → logprob: -14.758938789367676
    10. '/n' → logprob: -15.008938789367676

Token 23: '(sum' (ID: 45528)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.11303260177373886
    2. '(' → logprob: -2.238032579421997
    3. '((' → logprob: -8.738032341003418
    4. '()' → logprob: -10.488032341003418
    5. ' (' → logprob: -12.488032341003418
    6. '(int' → logprob: -12.488032341003418
    7. '('' → logprob: -12.863032341003418
    8. '(a' → logprob: -13.113032341003418
    9. '(max' → logprob: -13.363032341003418
    10. '(s' → logprob: -13.613032341003418

Token 24: '(map' (ID: 16946)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.17337282001972198
    2. '(' → logprob: -1.9233728647232056
    3. '(range' → logprob: -5.173372745513916
    4. '([' → logprob: -5.673372745513916
    5. '(int' → logprob: -6.173372745513916
    6. '(str' → logprob: -7.173372745513916
    7. '((' → logprob: -7.423372745513916
    8. ')' → logprob: -8.548373222351074
    9. '(i' → logprob: -9.423373222351074
    10. '(list' → logprob: -9.923373222351074

Token 25: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.023362644016742706
    2. '(str' → logprob: -4.398362636566162
    3. '(lambda' → logprob: -4.898362636566162
    4. '(' → logprob: -6.023362636566162
    5. 'int' → logprob: -7.648362636566162
    6. '(ord' → logprob: -8.39836311340332
    7. '(abs' → logprob: -9.02336311340332
    8. 'str' → logprob: -11.27336311340332
    9. 'lambda' → logprob: -11.39836311340332
    10. '(list' → logprob: -11.39836311340332

Token 26: ',' (ID: 11)
  Prédit: '(str'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(str' → logprob: -0.014699417166411877
    2. '(input' → logprob: -4.889699459075928
    3. '(' → logprob: -5.014699459075928
    4. ')' → logprob: -8.76469898223877
    5. 'str' → logprob: -9.01469898223877
    6. '   ' → logprob: -10.13969898223877
    7. '(list' → logprob: -10.63969898223877
    8. 'input' → logprob: -10.76469898223877
    9. ',str' → logprob: -11.51469898223877
    10. ',input' → logprob: -11.63969898223877

Token 27: ' str' (ID: 989)
  Prédit: 'str'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'str' → logprob: -0.23151811957359314
    2. 'input' → logprob: -2.481518030166626
    3. 'list' → logprob: -2.606518030166626
    4. ' str' → logprob: -3.106518030166626
    5. '(str' → logprob: -6.356518268585205
    6. ' input' → logprob: -6.731518268585205
    7. ' list' → logprob: -6.731518268585205
    8. '   ' → logprob: -8.606517791748047
    9. '(input' → logprob: -9.481517791748047
    10. ' ' → logprob: -10.231517791748047

Token 28: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0004046938265673816
    2. '(' → logprob: -8.000404357910156
    3. 'n' → logprob: -9.625404357910156
    4. ')n' → logprob: -14.125404357910156
    5. ' (' → logprob: -14.250404357910156
    6. ')' → logprob: -14.375404357910156
    7. '((' → logprob: -14.875404357910156
    8. ' n' → logprob: -15.500404357910156
    9. ')(' → logprob: -15.875404357910156
    10. '```' → logprob: -16.125404357910156

Token 29: '))))' (ID: 57459)
  Prédit: '))))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))))' → logprob: -0.02358575165271759
    2. ')))' → logprob: -3.898585796356201
    3. ')' → logprob: -5.898585796356201
    4. '))' → logprob: -8.523585319519043
    5. '))))
' → logprob: -10.398585319519043
    6. '   ' → logprob: -11.273585319519043
    7. '[' → logprob: -11.898585319519043
    8. ' ' → logprob: -12.023585319519043
    9. '))))

' → logprob: -12.148585319519043
    10. '])))' → logprob: -12.148585319519043


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 27
Tokens correctement prédits (1ère position, stricte): 11
Tokens correctement prédits (1ère position, avec adaptation): 11
Tokens correctement prédits (top 10): 22
Précision stricte (1ère position): 40.74%
Précision adaptée (1ère position): 40.74%
Précision (top 10): 81.48%
================================================================================
