================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:14:37
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
numbers = input().split()
for i in range(len(numbers)):
    numbers[i] = int(numbers[i])
numbers.sort()
result = numbers[len(numbers)-1] - numbers[0]
print(result)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00042768914136104286
    2. ''' → logprob: -8.62542724609375
    3. '('' → logprob: -9.37542724609375
    4. '(n' → logprob: -9.87542724609375
    5. '```' → logprob: -10.37542724609375
    6. '`' → logprob: -10.75042724609375
    7. '("("' → logprob: -11.12542724609375
    8. '(
' → logprob: -11.12542724609375
    9. ')' → logprob: -11.75042724609375
    10. '()' → logprob: -12.25042724609375

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.11869344860315323
    2. ')' → logprob: -2.2436933517456055
    3. '()' → logprob: -5.3686933517456055
    4. '())' → logprob: -7.4936933517456055
    5. '(
' → logprob: -8.243693351745605
    6. '```' → logprob: -9.993693351745605
    7. '(

' → logprob: -10.368693351745605
    8. '('' → logprob: -10.493693351745605
    9. ''' → logprob: -10.618693351745605
    10. '(n' → logprob: -10.868693351745605

Token 5: 'numbers' (ID: 85055)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.8081278204917908
    2. 'if' → logprob: -1.4331278800964355
    3. 'for' → logprob: -1.9331278800964355
    4. 's' → logprob: -2.3081278800964355
    5. 'f' → logprob: -4.0581278800964355
    6. 'x' → logprob: -4.4331278800964355
    7. 'a' → logprob: -5.0581278800964355
    8. ' ' → logprob: -5.3081278800964355
    9. '\n' → logprob: -5.6831278800964355
    10. '`' → logprob: -5.6831278800964355

Token 6: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.06363766640424728
    2. '.' → logprob: -2.8136377334594727
    3. '.append' → logprob: -7.938637733459473
    4. '[n' → logprob: -8.313637733459473
    5. '[:]' → logprob: -8.313637733459473
    6. '[]' → logprob: -8.563637733459473
    7. ')' → logprob: -9.063637733459473
    8. '[count' → logprob: -9.563637733459473
    9. '=' → logprob: -10.063637733459473
    10. '.setdefault' → logprob: -10.313637733459473

Token 7: ' input' (ID: 3422)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.04343689978122711
    2. ' list' → logprob: -3.6684370040893555
    3. '[]' → logprob: -4.7934370040893555
    4. ' [' → logprob: -5.4184370040893555
    5. 'list' → logprob: -5.5434370040893555
    6. '[' → logprob: -8.668437004089355
    7. ' ' → logprob: -9.418437004089355
    8. '[input' → logprob: -10.293437004089355
    9. ' input' → logprob: -10.668437004089355
    10. 'input' → logprob: -10.793437004089355

Token 8: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.015627572312951088
    2. '()' → logprob: -4.765627384185791
    3. '('' → logprob: -5.640627384185791
    4. ''' → logprob: -6.140627384185791
    5. '"' → logprob: -7.890627384185791
    6. '("("' → logprob: -8.01562786102295
    7. ')' → logprob: -8.39062786102295
    8. '```' → logprob: -9.64062786102295
    9. '[' → logprob: -9.89062786102295
    10. ' (' → logprob: -10.39062786102295

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00016098834748845547
    2. 'strip' → logprob: -8.750161170959473
    3. 'rstrip' → logprob: -13.750161170959473
    4. ' split' → logprob: -14.000161170959473
    5. 'spl' → logprob: -14.750161170959473
    6. 'replace' → logprob: -16.125160217285156
    7. '(split' → logprob: -18.125160217285156
    8. 's' → logprob: -18.375160217285156
    9. 'rs' → logprob: -18.750160217285156
    10. '.split' → logprob: -19.500160217285156

Token 10: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0073275016620755196
    2. '()' → logprob: -5.632327556610107
    3. '('' → logprob: -6.632327556610107
    4. '("("' → logprob: -6.632327556610107
    5. '"' → logprob: -7.882327556610107
    6. '`' → logprob: -8.63232707977295
    7. '((' → logprob: -9.00732707977295
    8. ' (' → logprob: -9.38232707977295
    9. '(
' → logprob: -9.38232707977295
    10. '(

' → logprob: -9.50732707977295

Token 11: 'for' (ID: 1938)
  Prédit: 'numbers'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'numbers' → logprob: -0.6110913753509521
    2. 'for' → logprob: -1.4860913753509521
    3. 'result' → logprob: -2.361091375350952
    4. '[' → logprob: -3.236091375350952
    5. 'n' → logprob: -3.236091375350952
    6. 's' → logprob: -3.611091375350952
    7. 'count' → logprob: -4.736091613769531
    8. 'nums' → logprob: -4.986091613769531
    9. 'sum' → logprob: -5.236091613769531
    10. 'total' → logprob: -5.861091613769531

Token 12: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.48360368609428406
    2. ' ' → logprob: -0.9836037158966064
    3. 'i' → logprob: -5.608603477478027
    4. '_' → logprob: -6.233603477478027
    5. '  ' → logprob: -6.483603477478027
    6. ' n' → logprob: -6.483603477478027
    7. ' ‌' → logprob: -8.733603477478027
    8. ' _' → logprob: -9.108603477478027
    9. ' number' → logprob: -9.233603477478027
    10. ' num' → logprob: -9.358603477478027

Token 13: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.5999225378036499
    2. 'in' → logprob: -0.9749225378036499
    3. ' ' → logprob: -2.9749226570129395
    4. '_' → logprob: -4.4749226570129395
    5. '  ' → logprob: -5.3499226570129395
    6. ')' → logprob: -6.4749226570129395
    7. 'n' → logprob: -6.4749226570129395
    8. '[' → logprob: -7.0999226570129395
    9. ' n' → logprob: -7.9749226570129395
    10. '=' → logprob: -8.349922180175781

Token 14: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.3500401973724365
    2. 'range' → logprob: -1.2250401973724365
    3. ' ' → logprob: -7.100040435791016
    4. ' n' → logprob: -7.850040435791016
    5. 'n' → logprob: -8.350040435791016
    6. '	range' → logprob: -10.350040435791016
    7. '(range' → logprob: -10.725040435791016
    8. ' xrange' → logprob: -11.100040435791016
    9. ')' → logprob: -11.225040435791016
    10. 'numbers' → logprob: -11.350040435791016

Token 15: '(len' (ID: 14990)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002739850664511323
    2. '(len' → logprob: -6.627739906311035
    3. '(n' → logprob: -6.877739906311035
    4. ' (' → logprob: -8.002739906311035
    5. '(i' → logprob: -10.752739906311035
    6. '(range' → logprob: -11.502739906311035
    7. '(
' → logprob: -12.127739906311035
    8. ' ' → logprob: -13.002739906311035
    9. '(length' → logprob: -13.002739906311035
    10. ')' → logprob: -13.627739906311035

Token 16: '(numbers' (ID: 98592)
  Prédit: '(numbers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(numbers' → logprob: -0.08513588458299637
    2. '(' → logprob: -2.5851359367370605
    3. '(n' → logprob: -5.0851359367370605
    4. '(number' → logprob: -10.835135459899902
    5. 'numbers' → logprob: -11.460135459899902
    6. '(nums' → logprob: -12.710135459899902
    7. '(num' → logprob: -13.585135459899902
    8. ')' → logprob: -14.585135459899902
    9. '(names' → logprob: -14.585135459899902
    10. ' numbers' → logprob: -14.710135459899902

Token 17: ')):
' (ID: 22530)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.4730149209499359
    2. ')' → logprob: -1.0980149507522583
    3. '))' → logprob: -3.5980148315429688
    4. ')):' → logprob: -4.348014831542969
    5. '[' → logprob: -6.098014831542969
    6. '[i' → logprob: -7.598014831542969
    7. ')))' → logprob: -10.098014831542969
    8. ']):' → logprob: -10.223014831542969
    9. '[n' → logprob: -10.848014831542969
    10. ']' → logprob: -10.848014831542969

Token 18: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20429012179374695
    2. '[' → logprob: -2.3292901515960693
    3. '    ' → logprob: -3.4542901515960693
    4. ' numbers' → logprob: -4.07928991317749
    5. ' ' → logprob: -4.95428991317749
    6. '```' → logprob: -5.32928991317749
    7. ' if' → logprob: -5.57928991317749
    8. 'numbers' → logprob: -5.82928991317749
    9. '(numbers' → logprob: -6.07928991317749
    10. '    
' → logprob: -6.57928991317749

Token 19: ' numbers' (ID: 8663)
  Prédit: ' numbers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' numbers' → logprob: -0.45298856496810913
    2. 'numbers' (adapté à ' numbers') → logprob: -1.202988624572754
    3. ' if' → logprob: -3.577988624572754
    4. '   ' → logprob: -3.702988624572754
    5. 'if' → logprob: -4.827988624572754
    6. 'n' → logprob: -6.702988624572754
    7. ' n' → logprob: -7.202988624572754
    8. '    ' → logprob: -7.327988624572754
    9. '(numbers' → logprob: -8.202988624572754
    10. ' ' → logprob: -8.577988624572754

Token 20: '[i' (ID: 1768)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.029920684173703194
    2. '[i' → logprob: -3.5299205780029297
    3. '\[' → logprob: -9.65492057800293
    4. '[int' → logprob: -10.40492057800293
    5. '```' → logprob: -10.52992057800293
    6. '[I' → logprob: -11.02992057800293
    7. '[n' → logprob: -11.65492057800293
    8. '[...]' → logprob: -12.15492057800293
    9. ' [' → logprob: -13.15492057800293
    10. '[in' → logprob: -13.40492057800293

Token 21: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.648780882358551
    2. ')' → logprob: -0.773780882358551
    3. ' ]' → logprob: -5.398780822753906
    4. ' =' → logprob: -5.523780822753906
    5. '=' → logprob: -5.648780822753906
    6. ' )' → logprob: -6.148780822753906
    7. ']=' → logprob: -7.648780822753906
    8. '=int' → logprob: -8.023780822753906
    9. ')]' → logprob: -8.273780822753906
    10. '])' → logprob: -9.023780822753906

Token 22: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.080010324716568
    2. ' =' → logprob: -2.580010414123535
    3. '=int' → logprob: -6.830010414123535
    4. '+=' → logprob: -10.955010414123535
    5. ' +=' → logprob: -11.955010414123535
    6. ')' → logprob: -12.205010414123535
    7. '+' → logprob: -13.330010414123535
    8. 'int' → logprob: -13.705010414123535
    9. ' *=' → logprob: -14.080010414123535
    10. '*=' → logprob: -14.330010414123535

Token 23: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.20141392946243286
    2. ' int' → logprob: -1.701413869857788
    3. '(int' → logprob: -15.451414108276367
    4. '=int' → logprob: -15.701414108276367
    5. '[int' → logprob: -16.576414108276367
    6. 'float' → logprob: -16.576414108276367
    7. '	int' → logprob: -16.951414108276367
    8. ']int' → logprob: -17.326414108276367
    9. '   ' → logprob: -17.451414108276367
    10. '<int' → logprob: -17.826414108276367

Token 24: '(numbers' (ID: 98592)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3133184313774109
    2. '(numbers' → logprob: -1.3133184909820557
    3. '(n' → logprob: -10.438318252563477
    4. '('' → logprob: -11.813318252563477
    5. '("("' → logprob: -12.188318252563477
    6. '(

' → logprob: -12.813318252563477
    7. '(
' → logprob: -12.938318252563477
    8. ' (' → logprob: -12.938318252563477
    9. '(nums' → logprob: -13.438318252563477
    10. '(number' → logprob: -13.688318252563477

Token 25: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -9.245724504580721e-05
    2. ')' → logprob: -9.750092506408691
    3. '[' → logprob: -10.375092506408691
    4. ')i' → logprob: -13.500092506408691
    5. '[I' → logprob: -14.125092506408691
    6. ')[' → logprob: -14.625092506408691
    7. '))' → logprob: -15.875092506408691
    8. ' )' → logprob: -16.750091552734375
    9. '[j' → logprob: -17.500091552734375
    10. '[int' → logprob: -17.625091552734375

Token 26: '])
' (ID: 5169)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2293916493654251
    2. '))' → logprob: -1.6043916940689087
    3. '])' → logprob: -5.604391574859619
    4. ')])' → logprob: -9.479392051696777
    5. ')))' → logprob: -9.729392051696777
    6. '[' → logprob: -10.479392051696777
    7. '[i' → logprob: -10.479392051696777
    8. ']' → logprob: -10.604392051696777
    9. ']))' → logprob: -10.604392051696777
    10. '   ' → logprob: -11.604392051696777

Token 27: 'numbers' (ID: 85055)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.0303394794464111
    2. 'if' → logprob: -1.4053394794464111
    3. ' if' → logprob: -2.905339479446411
    4. 'n' → logprob: -3.030339479446411
    5. ' for' → logprob: -3.530339479446411
    6. ')' → logprob: -3.655339479446411
    7. '[' → logprob: -3.780339479446411
    8. ' ' → logprob: -3.780339479446411
    9. '.' → logprob: -3.780339479446411
    10. '
' → logprob: -3.905339479446411

Token 28: '.sort' (ID: 19551)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 29: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.2812136113643646
    2. '(' → logprob: -1.406213641166687
    3. '()`' → logprob: -11.406213760375977
    4. '(`' → logprob: -11.906213760375977
    5. '(
' → logprob: -12.156213760375977
    6. '();' → logprob: -12.406213760375977
    7. '().' → logprob: -12.531213760375977
    8. '('' → logprob: -12.656213760375977
    9. '("("' → logprob: -12.906213760375977
    10. '()
' → logprob: -12.906213760375977

Token 30: 'result' (ID: 2521)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.7795302271842957
    2. 'print' → logprob: -0.9045302271842957
    3. '[' → logprob: -3.0295302867889404
    4. 'n' → logprob: -3.5295302867889404
    5. 'p' → logprob: -4.029530048370361
    6. '#' → logprob: -4.529530048370361
    7. 'if' → logprob: -4.779530048370361
    8. '
' → logprob: -5.154530048370361
    9. ',' → logprob: -5.904530048370361
    10. 'i' → logprob: -6.029530048370361

Token 31: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.7773160934448242
    2. '=' → logprob: -1.4023160934448242
    3. '_' → logprob: -2.027316093444824
    4. 's' → logprob: -2.652316093444824
    5. '[:]' → logprob: -3.152316093444824
    6. '(' → logprob: -4.152316093444824
    7. ' =' → logprob: -4.277316093444824
    8. '.append' → logprob: -4.777316093444824
    9. '.' → logprob: -5.402316093444824
    10. '[]' → logprob: -6.277316093444824

Token 32: ' numbers' (ID: 8663)
  Prédit: ' numbers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' numbers' → logprob: -0.1627952605485916
    2. 'numbers' → logprob: -2.287795305252075
    3. ' []' → logprob: -3.162795305252075
    4. '[]' → logprob: -5.787795066833496
    5. ' ' → logprob: -6.662795066833496
    6. '0' → logprob: -6.662795066833496
    7. '(numbers' → logprob: -8.537795066833496
    8. ' [' → logprob: -8.537795066833496
    9. '[' → logprob: -9.037795066833496
    10. '"' → logprob: -9.537795066833496

Token 33: '[len' (ID: 57582)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.1844976842403412
    2. '[-' → logprob: -2.059497594833374
    3. '[len' → logprob: -3.684497594833374
    4. '[n' → logprob: -5.059497833251953
    5. '[i' → logprob: -5.434497833251953
    6. '<|end|>' → logprob: -6.809497833251953
    7. '[:]' → logprob: -6.934497833251953
    8. '[::-' → logprob: -7.059497833251953
    9. '[min' → logprob: -8.059497833251953
    10. '[]' → logprob: -8.309497833251953

Token 34: '(numbers' (ID: 98592)
  Prédit: '(numbers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(numbers' → logprob: -0.0008174888207577169
    2. '(' → logprob: -7.25081729888916
    3. '(result' → logprob: -9.25081729888916
    4. '(results' → logprob: -12.25081729888916
    5. '(number' → logprob: -12.62581729888916
    6. '(n' → logprob: -13.00081729888916
    7. 'numbers' → logprob: -14.75081729888916
    8. '(nums' → logprob: -15.00081729888916
    9. '(num' → logprob: -15.75081729888916
    10. '(
' → logprob: -17.000818252563477

Token 35: ')-' (ID: 14080)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.09872575104236603
    2. ')//' → logprob: -2.5987257957458496
    3. '//' → logprob: -4.09872579574585
    4. ')-' → logprob: -6.22372579574585
    5. '-' → logprob: -7.22372579574585
    6. ' //' → logprob: -9.348725318908691
    7. ')]' → logprob: -9.598725318908691
    8. ']' → logprob: -9.723725318908691
    9. ' )' → logprob: -9.848725318908691
    10. '()' → logprob: -10.848725318908691

Token 36: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.000866083602886647
    2. '2' → logprob: -7.125865936279297
    3. 'k' → logprob: -10.625865936279297
    4. ' ' → logprob: -10.750865936279297
    5. '3' → logprob: -11.375865936279297
    6. '4' → logprob: -13.375865936279297
    7. '5' → logprob: -13.625865936279297
    8. ' k' → logprob: -14.563365936279297
    9. '-' → logprob: -15.250865936279297
    10. '10' → logprob: -15.438365936279297

Token 37: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.2547794580459595
    2. ')' → logprob: -2.00477933883667
    3. ' -' → logprob: -3.12977933883667
    4. '-' → logprob: -3.37977933883667
    5. ' ]' → logprob: -4.87977933883667
    6. '<|end|>' → logprob: -6.50477933883667
    7. ' ' → logprob: -6.62977933883667
    8. ' )' → logprob: -7.25477933883667
    9. '+' → logprob: -7.75477933883667
    10. '}' → logprob: -8.629779815673828

Token 38: ' -' (ID: 533)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 39: ' numbers' (ID: 8663)
  Prédit: 'numbers'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'numbers' → logprob: -0.4287320077419281
    2. ' numbers' → logprob: -1.0537320375442505
    3. '1' → logprob: -11.428731918334961
    4. 'number' → logprob: -11.928731918334961
    5. '(numbers' → logprob: -12.053731918334961
    6. ' ' → logprob: -12.803731918334961
    7. 'n' → logprob: -13.303731918334961
    8. '0' → logprob: -13.428731918334961
    9. 'num' → logprob: -14.178731918334961
    10. ' number' → logprob: -14.803731918334961

Token 40: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0011960632400587201
    2. '[len' → logprob: -7.126195907592773
    3. '[-' → logprob: -8.001195907592773
    4. '\[' → logprob: -10.001195907592773
    5. '```' → logprob: -13.376195907592773
    6. '[i' → logprob: -13.376195907592773
    7. '[
' → logprob: -13.501195907592773
    8. ' [' → logprob: -13.876195907592773
    9. ''[' → logprob: -14.126195907592773
    10. '0' → logprob: -14.688695907592773

Token 41: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.4736459888808895e-05
    2. ' ' → logprob: -11.250014305114746
    3. '1' → logprob: -14.750014305114746
    4. '   ' → logprob: -15.250014305114746
    5. '```' → logprob: -15.375014305114746
    6. '[' → logprob: -15.562514305114746
    7. '00' → logprob: -15.937514305114746
    8. '  ' → logprob: -16.500015258789062
    9. '۰' → logprob: -16.687515258789062
    10. '012' → logprob: -16.687515258789062

Token 42: ']
' (ID: 1592)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -2.2200749754119897e-06
    2. ']' → logprob: -14.000001907348633
    3. '<|end|>' → logprob: -15.000001907348633
    4. '}' → logprob: -15.125001907348633
    5. '```' → logprob: -15.500001907348633
    6. ')
' → logprob: -15.625001907348633
    7. ' )' → logprob: -16.000001907348633
    8. '))' → logprob: -16.375001907348633
    9. '+' → logprob: -16.875001907348633
    10. '#' → logprob: -17.250001907348633

Token 43: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5421292781829834
    2. '<|end|>' → logprob: -0.9171292781829834
    3. '\n' → logprob: -4.7921295166015625
    4. '```' → logprob: -5.4171295166015625
    5. ')' → logprob: -5.7921295166015625
    6. '
' → logprob: -6.7921295166015625
    7. '#' → logprob: -7.2921295166015625
    8. ' print' → logprob: -8.292129516601562
    9. '\' → logprob: -8.417129516601562
    10. '<|end|>' → logprob: -8.792129516601562

Token 44: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0036131395027041435
    2. '(result' → logprob: -5.628612995147705
    3. '("("' → logprob: -12.253613471984863
    4. '('' → logprob: -12.628613471984863
    5. ' (' → logprob: -13.503613471984863
    6. '()' → logprob: -14.003613471984863
    7. '(numbers' → logprob: -14.378613471984863
    8. '(
' → logprob: -14.378613471984863
    9. '(

' → logprob: -15.003613471984863
    10. '(results' → logprob: -15.253613471984863

Token 45: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9361264946837764e-07
    2. '))' → logprob: -15.875
    3. '')' → logprob: -17.75
    4. ' )' → logprob: -17.75
    5. '`)' → logprob: -18.75
    6. ')`' → logprob: -19.5
    7. '#' → logprob: -19.625
    8. '）' → logprob: -19.875
    9. ')
' → logprob: -19.875
    10. '")' → logprob: -20.125


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 43
Tokens correctement prédits (1ère position, stricte): 17
Tokens correctement prédits (1ère position, avec adaptation): 17
Tokens correctement prédits (top 10): 30
Précision stricte (1ère position): 39.53%
Précision adaptée (1ère position): 39.53%
Précision (top 10): 69.77%
================================================================================
