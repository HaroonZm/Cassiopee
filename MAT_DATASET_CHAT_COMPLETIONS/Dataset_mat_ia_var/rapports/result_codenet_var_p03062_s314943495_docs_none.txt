================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:02:11
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
a = list(map(int, input().split()))
cnt = sum(i < 0 for i in a)
ans = sum(abs(i) for i in a)
if cnt % 2 == 0:
    print(ans)
else:
    print(ans - 2 * min(abs(i) for i in a))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00042768914136104286
    2. ''' → logprob: -8.62542724609375
    3. '('' → logprob: -9.37542724609375
    4. '(n' → logprob: -9.87542724609375
    5. '```' → logprob: -10.37542724609375
    6. '`' → logprob: -10.75042724609375
    7. '("("' → logprob: -11.12542724609375
    8. '(
' → logprob: -11.12542724609375
    9. ')' → logprob: -11.75042724609375
    10. '()' → logprob: -12.25042724609375

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1369263231754303
    2. ')' → logprob: -2.2619264125823975
    3. '()' → logprob: -4.011926174163818
    4. '())' → logprob: -5.511926174163818
    5. '(
' → logprob: -7.636926174163818
    6. '('' → logprob: -8.636926651000977
    7. '```' → logprob: -8.636926651000977
    8. '(()' → logprob: -9.011926651000977
    9. '("("' → logprob: -9.261926651000977
    10. '(

' → logprob: -9.636926651000977

Token 5: 'a' (ID: 64)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.9201469421386719
    2. 'if' → logprob: -1.1701469421386719
    3. 'for' → logprob: -2.295146942138672
    4. 's' → logprob: -2.420146942138672
    5. ' ' → logprob: -3.795146942138672
    6. ''' → logprob: -4.420146942138672
    7. 'x' → logprob: -4.670146942138672
    8. ')' → logprob: -4.920146942138672
    9. 'a' → logprob: -5.045146942138672
    10. '`' → logprob: -5.295146942138672

Token 6: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0015446186298504472
    2. '+' → logprob: -8.001544952392578
    3. '[i' → logprob: -8.376544952392578
    4. '[a' → logprob: -8.626544952392578
    5. '=' → logprob: -8.751544952392578
    6. '[n' → logprob: -9.001544952392578
    7. '.' → logprob: -9.376544952392578
    8. 'a' → logprob: -9.626544952392578
    9. ' =' → logprob: -9.876544952392578
    10. '\[' → logprob: -10.126544952392578

Token 7: ' list' (ID: 1562)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.7187201380729675
    2. ' []' → logprob: -0.8437201380729675
    3. 'list' → logprob: -3.7187201976776123
    4. ' [' → logprob: -3.7187201976776123
    5. '[' → logprob: -4.593719959259033
    6. '[int' → logprob: -4.718719959259033
    7. ' list' → logprob: -4.843719959259033
    8. '[input' → logprob: -6.218719959259033
    9. 'a' → logprob: -6.843719959259033
    10. 'n' → logprob: -6.843719959259033

Token 8: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003077886998653412
    2. '[' → logprob: -6.253077983856201
    3. '(range' → logprob: -8.003077507019043
    4. '```' → logprob: -8.003077507019043
    5. '[(' → logprob: -8.753077507019043
    6. ')' → logprob: -9.128077507019043
    7. '(a' → logprob: -10.128077507019043
    8. ' (' → logprob: -10.378077507019043
    9. ''s' → logprob: -10.628077507019043
    10. '`' → logprob: -10.753077507019043

Token 9: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.020117513835430145
    2. '(' → logprob: -4.145117282867432
    3. '(str' → logprob: -6.895117282867432
    4. '(input' → logprob: -7.020117282867432
    5. '(lambda' → logprob: -7.145117282867432
    6. '<int' → logprob: -7.770117282867432
    7. ')' → logprob: -8.52011775970459
    8. '[int' → logprob: -8.52011775970459
    9. 'int' → logprob: -8.64511775970459
    10. '```' → logprob: -9.02011775970459

Token 10: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0046382686123251915
    2. '(' → logprob: -5.879638195037842
    3. '))' → logprob: -7.254638195037842
    4. ',input' → logprob: -7.379638195037842
    5. 'input' → logprob: -8.629638671875
    6. ')' → logprob: -8.754638671875
    7. '=input' → logprob: -9.629638671875
    8. '[input' → logprob: -11.379638671875
    9. '(user' → logprob: -11.879638671875
    10. ')))' → logprob: -12.004638671875

Token 11: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.0382404662668705
    2. ' input' → logprob: -3.288240432739258
    3. '(input' → logprob: -8.538240432739258
    4. ')' → logprob: -13.663240432739258
    5. ',input' → logprob: -13.913240432739258
    6. '=input' → logprob: -14.538240432739258
    7. '))' → logprob: -15.913240432739258
    8. '	input' → logprob: -16.163240432739258
    9. '<input' → logprob: -16.288240432739258
    10. ' ' → logprob: -16.913240432739258

Token 12: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.6957465410232544
    2. '()))' → logprob: -1.3207465410232544
    3. '())' → logprob: -1.6957465410232544
    4. '().' → logprob: -3.070746421813965
    5. ')' → logprob: -6.570746421813965
    6. '()));' → logprob: -6.695746421813965
    7. '))' → logprob: -7.820746421813965
    8. '()>' → logprob: -7.945746421813965
    9. '(' → logprob: -8.070746421813965
    10. '())))' → logprob: -8.570746421813965

Token 13: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00046033994294703007
    2. 'strip' → logprob: -7.750460147857666
    3. 'rstrip' → logprob: -10.500460624694824
    4. ' split' → logprob: -13.375460624694824
    5. '(split' → logprob: -15.000460624694824
    6. 'spl' → logprob: -15.625460624694824
    7. ')' → logprob: -16.000459671020508
    8. 's' → logprob: -17.375459671020508
    9. '.split' → logprob: -18.125459671020508
    10. 'sp' → logprob: -18.500459671020508

Token 14: '()))
' (ID: 24521)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.8085052967071533
    2. '()))' → logprob: -0.8085052967071533
    3. ')' → logprob: -2.9335052967071533
    4. '())' → logprob: -3.0585052967071533
    5. '(' → logprob: -5.308505058288574
    6. '()' → logprob: -6.058505058288574
    7. '('' → logprob: -7.433505058288574
    8. ')))' → logprob: -7.808505058288574
    9. ''))' → logprob: -8.558505058288574
    10. '())))' → logprob: -9.058505058288574

Token 15: 'cnt' (ID: 33160)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.6516948342323303
    2. 's' → logprob: -1.0266947746276855
    3. 'c' → logprob: -3.2766947746276855
    4. 'for' → logprob: -3.7766947746276855
    5. 'sum' → logprob: -4.2766947746276855
    6. 'b' → logprob: -4.6516947746276855
    7. 'count' → logprob: -4.6516947746276855
    8. 'm' → logprob: -4.7766947746276855
    9. 'result' → logprob: -5.0266947746276855
    10. 'd' → logprob: -6.5266947746276855

Token 16: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.009742512367665768
    2. '_' → logprob: -4.759742736816406
    3. '\[' → logprob: -8.134742736816406
    4. '(' → logprob: -8.384742736816406
    5. 's' → logprob: -8.509742736816406
    6. '=' → logprob: -9.009742736816406
    7. '[a' → logprob: -9.509742736816406
    8. '[]' → logprob: -10.009742736816406
    9. '[...]' → logprob: -11.009742736816406
    10. '[:]' → logprob: -11.009742736816406

Token 17: ' sum' (ID: 4215)
  Prédit: '{}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '{}' → logprob: -0.11151234060525894
    2. '0' → logprob: -2.8615124225616455
    3. '{' → logprob: -3.6115124225616455
    4. '[' → logprob: -3.9865124225616455
    5. ' {}' → logprob: -6.236512184143066
    6. ' ' → logprob: -7.486512184143066
    7. ' [' → logprob: -8.611512184143066
    8. ' {' → logprob: -10.611512184143066
    9. '{})' → logprob: -11.736512184143066
    10. '   ' → logprob: -12.361512184143066

Token 18: '(i' (ID: 3649)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.022130565717816353
    2. '((' → logprob: -4.272130489349365
    3. '(lambda' → logprob: -5.147130489349365
    4. '(a' → logprob: -6.522130489349365
    5. '(()' → logprob: -8.147130966186523
    6. '([' → logprob: -9.522130966186523
    7. '("("' → logprob: -9.647130966186523
    8. '(len' → logprob: -10.147130966186523
    9. '(+' → logprob: -10.397130966186523
    10. '(sum' → logprob: -10.522130966186523

Token 19: ' <' (ID: 464)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.9467433094978333
    2. ' in' → logprob: -1.4467432498931885
    3. '==' → logprob: -1.5717432498931885
    4. ')' → logprob: -3.4467432498931885
    5. ' ' → logprob: -3.4467432498931885
    6. ' for' → logprob: -3.6967432498931885
    7. '(' → logprob: -3.8217432498931885
    8. ' >' → logprob: -4.196743488311768
    9. '>' → logprob: -4.696743488311768
    10. '=' → logprob: -5.071743488311768

Token 20: ' ' (ID: 220)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -1.2625731229782104
    2. '0' → logprob: -1.3875731229782104
    3. ' ' → logprob: -1.3875731229782104
    4. 'a' → logprob: -1.6375731229782104
    5. ' n' → logprob: -4.2625732421875
    6. 'n' → logprob: -5.8875732421875
    7. '10' → logprob: -6.5125732421875
    8. '5' → logprob: -7.0125732421875
    9. ' len' → logprob: -7.1375732421875
    10. ' x' → logprob: -7.3875732421875

Token 21: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.7036671042442322
    2. 'a' → logprob: -0.9536671042442322
    3. 'n' → logprob: -2.453667163848877
    4. '5' → logprob: -4.828667163848877
    5. ' ' → logprob: -5.453667163848877
    6. '10' → logprob: -5.578667163848877
    7. '3' → logprob: -5.828667163848877
    8. '2' → logprob: -5.828667163848877
    9. 'x' → logprob: -6.203667163848877
    10. '1' → logprob: -6.203667163848877

Token 22: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.016175130382180214
    2. 'for' → logprob: -4.141175270080566
    3. ')' → logprob: -9.016175270080566
    4. ' ' → logprob: -11.391175270080566
    5. ' a' → logprob: -12.641175270080566
    6. 'a' → logprob: -12.641175270080566
    7. '	for' → logprob: -14.891175270080566
    8. ' or' → logprob: -15.016175270080566
    9. '```' → logprob: -15.891175270080566
    10. ' in' → logprob: -16.14117431640625

Token 23: ' i' (ID: 575)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.07939213514328003
    2. 'a' → logprob: -2.579392194747925
    3. ' i' → logprob: -7.954391956329346
    4. ' ' → logprob: -9.579392433166504
    5. 'i' → logprob: -9.829392433166504
    6. '	a' → logprob: -11.079392433166504
    7. '  ' → logprob: -12.079392433166504
    8. ' in' → logprob: -13.329392433166504
    9. ')' → logprob: -13.704392433166504
    10. ')a' → logprob: -13.829392433166504

Token 24: ' in' (ID: 306)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.34822532534599304
    2. ' in' → logprob: -1.7232253551483154
    3. 'in' → logprob: -2.4732253551483154
    4. ' a' → logprob: -3.4732253551483154
    5. ')' → logprob: -9.348225593566895
    6. 's' → logprob: -10.723225593566895
    7. ',a' → logprob: -10.973225593566895
    8. '_a' → logprob: -11.098225593566895
    9. '<|end|>' → logprob: -11.223225593566895
    10. '>a' → logprob: -11.348225593566895

Token 25: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.005235291086137295
    2. ' a' → logprob: -5.255235195159912
    3. ')a' → logprob: -14.00523567199707
    4. '	a' → logprob: -15.50523567199707
    5. ')' → logprob: -16.00523567199707
    6. '<|end|>' → logprob: -16.38023567199707
    7. 'а' → logprob: -16.50523567199707
    8. '_a' → logprob: -16.63023567199707
    9. '>a' → logprob: -16.88023567199707
    10. ' ' → logprob: -17.00523567199707

Token 26: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.047134305234067e-05
    2. '))' → logprob: -10.750030517578125
    3. ' )' → logprob: -13.000030517578125
    4. ')
' → logprob: -13.125030517578125
    5. ')a' → logprob: -13.375030517578125
    6. '),' → logprob: -14.500030517578125
    7. ')n' → logprob: -14.500030517578125
    8. ')+' → logprob: -14.750030517578125
    9. 'a' → logprob: -15.250030517578125
    10. ')`' → logprob: -15.375030517578125

Token 27: 'ans' (ID: 616)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.906548261642456
    2. '\n' → logprob: -1.031548261642456
    3. '<|end|>' → logprob: -2.156548261642456
    4. 'n' → logprob: -2.781548261642456
    5. ')' → logprob: -3.406548261642456
    6. '+' → logprob: -4.781548500061035
    7. ' 
' → logprob: -5.906548500061035
    8. '\' → logprob: -6.031548500061035
    9. 'a' → logprob: -6.281548500061035
    10. '```' → logprob: -6.281548500061035

Token 28: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.025431714951992035
    2. '=' → logprob: -3.7754316329956055
    3. ' +=' → logprob: -6.1504316329956055
    4. '+=' → logprob: -10.650431632995605
    5. '+' → logprob: -11.650431632995605
    6. '_' → logprob: -11.775431632995605
    7. ' ' → logprob: -12.400431632995605
    8. ',' → logprob: -13.900431632995605
    9. ' +' → logprob: -13.900431632995605
    10. ' =)' → logprob: -14.275431632995605

Token 29: ' sum' (ID: 4215)
  Prédit: ' cnt'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cnt' → logprob: -0.753501296043396
    2. 'cnt' → logprob: -1.878501296043396
    3. ' max' → logprob: -2.3785014152526855
    4. 'max' → logprob: -3.1285014152526855
    5. ' min' → logprob: -3.2535014152526855
    6. 'abs' → logprob: -3.2535014152526855
    7. '0' → logprob: -3.3785014152526855
    8. ' n' → logprob: -4.1285014152526855
    9. ' ' → logprob: -4.2535014152526855
    10. ' sum' → logprob: -4.3785014152526855

Token 30: '(abs' (ID: 71957)
  Prédit: '(abs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(abs' → logprob: -0.8383119702339172
    2. '(' → logprob: -0.9633119702339172
    3. '(i' → logprob: -1.7133119106292725
    4. '(a' → logprob: -5.838312149047852
    5. '(max' → logprob: -6.588312149047852
    6. '(lambda' → logprob: -7.963312149047852
    7. '(min' → logprob: -7.963312149047852
    8. '((' → logprob: -8.213312149047852
    9. 'abs' → logprob: -9.213312149047852
    10. '(range' → logprob: -9.463312149047852

Token 31: '(i' (ID: 3649)
  Prédit: '(i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -0.0008525127195753157
    2. '(' → logprob: -7.125852584838867
    3. '(x' → logprob: -10.125852584838867
    4. '(a' → logprob: -11.875852584838867
    5. ')' → logprob: -14.625852584838867
    6. '(s' → logprob: -16.000852584838867
    7. '(n' → logprob: -16.500852584838867
    8. '(
' → logprob: -16.500852584838867
    9. '(ai' → logprob: -16.500852584838867
    10. '(

' → logprob: -17.000852584838867

Token 32: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.016099007800221443
    2. '(i' → logprob: -4.641098976135254
    3. '(' → logprob: -5.516098976135254
    4. '())' → logprob: -7.141098976135254
    5. '-' → logprob: -7.641098976135254
    6. '))' → logprob: -8.391098976135254
    7. 'a' → logprob: -8.641098976135254
    8. '(a' → logprob: -8.641098976135254
    9. '-)' → logprob: -9.141098976135254
    10. '(-' → logprob: -9.266098976135254

Token 33: ' for' (ID: 395)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.050286080688238144
    2. '-' → logprob: -3.925286054611206
    3. '(i' → logprob: -4.425286293029785
    4. 'for' → logprob: -5.425286293029785
    5. ' for' → logprob: -5.800286293029785
    6. '(a' → logprob: -5.800286293029785
    7. '(' → logprob: -6.050286293029785
    8. ' -' → logprob: -6.300286293029785
    9. 'a' → logprob: -7.050286293029785
    10. ' ' → logprob: -7.175286293029785

Token 34: ' i' (ID: 575)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.2811618745326996
    2. ' a' → logprob: -1.406161904335022
    3. 'i' → logprob: -12.03116226196289
    4. '	a' → logprob: -12.53116226196289
    5. ' ' → logprob: -14.90616226196289
    6. ')a' → logprob: -14.90616226196289
    7. ' i' → logprob: -15.03116226196289
    8. '>a' → logprob: -15.53116226196289
    9. '#a' → logprob: -15.90616226196289
    10. '_a' → logprob: -15.90616226196289

Token 35: ' in' (ID: 306)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.3603702187538147
    2. ' a' → logprob: -1.23537015914917
    3. ' in' → logprob: -4.48537015914917
    4. 'in' → logprob: -7.86037015914917
    5. ')' → logprob: -9.485370635986328
    6. ' ' → logprob: -10.110370635986328
    7. '<|end|>' → logprob: -10.360370635986328
    8. '_a' → logprob: -12.110370635986328
    9. ')a' → logprob: -12.110370635986328
    10. '(a' → logprob: -12.610370635986328

Token 36: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.006720229052007198
    2. ' a' → logprob: -5.006720066070557
    3. ')a' → logprob: -13.131720542907715
    4. '	a' → logprob: -14.006720542907715
    5. ')' → logprob: -14.756720542907715
    6. '_a' → logprob: -14.881720542907715
    7. ' ' → logprob: -15.006720542907715
    8. '[a' → logprob: -15.381720542907715
    9. 'а' → logprob: -15.756720542907715
    10. '>a' → logprob: -15.881720542907715

Token 37: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.15059934556484222
    2. '+' → logprob: -2.275599241256714
    3. ' +' → logprob: -4.150599479675293
    4. '-' → logprob: -4.900599479675293
    5. ')+' → logprob: -4.900599479675293
    6. ' -' → logprob: -6.150599479675293
    7. ' )' → logprob: -6.525599479675293
    8. ' ' → logprob: -7.150599479675293
    9. '+)' → logprob: -8.025599479675293
    10. 'if' → logprob: -8.275599479675293

Token 38: 'if' (ID: 366)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.18530037999153137
    2. 'if' → logprob: -1.810300350189209
    3. '
' → logprob: -6.060300350189209
    4. '```' → logprob: -6.435300350189209
    5. ' if' → logprob: -6.935300350189209
    6. '\n' → logprob: -8.560300827026367
    7. '+' → logprob: -9.435300827026367
    8. '``' → logprob: -9.810300827026367
    9. 'n' → logprob: -9.810300827026367
    10. ' print' → logprob: -10.060300827026367

Token 39: ' cnt' (ID: 27340)
  Prédit: ' cnt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cnt' → logprob: -0.0025883850175887346
    2. 'cnt' → logprob: -6.002588272094727
    3. '(cnt' → logprob: -9.752588272094727
    4. ' abs' → logprob: -11.252588272094727
    5. '	cnt' → logprob: -11.252588272094727
    6. ' ' → logprob: -12.002588272094727
    7. ' n' → logprob: -12.002588272094727
    8. ' not' → logprob: -12.377588272094727
    9. ' cn' → logprob: -12.877588272094727
    10. '[cnt' → logprob: -13.002588272094727

Token 40: ' %' (ID: 1851)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -0.03400157392024994
    2. ' %' → logprob: -3.409001588821411
    3. '>' → logprob: -8.284001350402832
    4. '==' → logprob: -10.659001350402832
    5. '```' → logprob: -10.659001350402832
    6. ' >' → logprob: -11.034001350402832
    7. ' ' → logprob: -11.284001350402832
    8. ' ' → logprob: -11.909001350402832
    9. '&' → logprob: -12.534001350402832
    10. '!=' → logprob: -13.034001350402832

Token 41: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.693160891532898
    2. ' ' → logprob: -0.693160891532898
    3. '4' → logprob: -12.818161010742188
    4. '```' → logprob: -12.943161010742188
    5. '>' → logprob: -13.318161010742188
    6. '3' → logprob: -13.943161010742188
    7. ')' → logprob: -13.943161010742188
    8. '_' → logprob: -14.630661010742188
    9. ' ' → logprob: -14.880661010742188
    10. '...' → logprob: -14.943161010742188

Token 42: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0003392767102923244
    2. ' ' → logprob: -8.00033950805664
    3. '```' → logprob: -13.50033950805664
    4. '>' → logprob: -15.31283950805664
    5. '22' → logprob: -15.43783950805664
    6. '202' → logprob: -15.56283950805664
    7. '２' → logprob: -16.12533950805664
    8. '26' → logprob: -16.18783950805664
    9. '==' → logprob: -16.18783950805664
    10. '.' → logprob: -16.31283950805664

Token 43: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.45262637734413147
    2. ' ==' → logprob: -1.077626347541809
    3. ':' → logprob: -4.4526262283325195
    4. ' !=' → logprob: -5.3276262283325195
    5. '!=' → logprob: -5.3276262283325195
    6. '=' → logprob: -6.4526262283325195
    7. '0' → logprob: -8.45262622833252
    8. '>' → logprob: -8.70262622833252
    9. ' ' → logprob: -9.07762622833252
    10. ' =' → logprob: -10.45262622833252

Token 44: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.011398401111364365
    2. ' ' → logprob: -4.7613983154296875
    3. '1' → logprob: -5.8863983154296875
    4. '2' → logprob: -12.886398315429688
    5. '```' → logprob: -14.886398315429688
    6. ':' → logprob: -16.511398315429688
    7. '=' → logprob: -16.511398315429688
    8. '   ' → logprob: -18.011398315429688
    9. ' ' → logprob: -18.073898315429688
    10. ')' → logprob: -18.261398315429688

Token 45: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.03848493844270706
    2. '2' → logprob: -3.288485050201416
    3. ' ' → logprob: -8.038484573364258
    4. '1' → logprob: -9.038484573364258
    5. '```' → logprob: -14.038484573364258
    6. ')' → logprob: -15.663484573364258
    7. '  ' → logprob: -16.163484573364258
    8. '<|end|>' → logprob: -16.788484573364258
    9. '000' → logprob: -16.913484573364258
    10. '   ' → logprob: -16.975984573364258

Token 46: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0022093774750828743
    2. ':
' → logprob: -6.127209186553955
    3. ' :' → logprob: -10.877209663391113
    4. '):' → logprob: -13.502209663391113
    5. ':
' → logprob: -14.002209663391113
    6. ' :
' → logprob: -14.377209663391113
    7. ',' → logprob: -14.752209663391113
    8. ':**' → logprob: -14.752209663391113
    9. ':

' → logprob: -14.877209663391113
    10. ':def' → logprob: -15.252209663391113

Token 47: '   ' (ID: 271)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.20077739655971527
    2. 'print' → logprob: -1.8257774114608765
    3. '
' → logprob: -4.950777530670166
    4. '```' → logprob: -4.950777530670166
    5. '   ' → logprob: -5.075777530670166
    6. '	print' → logprob: -9.075777053833008
    7. '``' → logprob: -9.325777053833008
    8. '\n' → logprob: -9.825777053833008
    9. '<|end|>' → logprob: -10.075777053833008
    10. ' 
' → logprob: -10.325777053833008

Token 48: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.47434017062187195
    2. 'print' (adapté à ' print') → logprob: -0.9743402004241943
    3. '```' → logprob: -8.349340438842773
    4. '   ' → logprob: -11.599340438842773
    5. '\n' → logprob: -12.474340438842773
    6. ' ans' → logprob: -12.849340438842773
    7. ' ```' → logprob: -12.849340438842773
    8. '``' → logprob: -12.974340438842773
    9. ' pass' → logprob: -13.099340438842773
    10. '.print' → logprob: -13.599340438842773

Token 49: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -0.038403719663619995
    2. '(' → logprob: -3.2884037494659424
    3. '('' → logprob: -8.413403511047363
    4. 'ans' → logprob: -9.413403511047363
    5. ' (' → logprob: -10.413403511047363
    6. '("' → logprob: -11.788403511047363
    7. ' ans' → logprob: -12.413403511047363
    8. '(abs' → logprob: -12.538403511047363
    9. '()' → logprob: -12.913403511047363
    10. '(f' → logprob: -13.163403511047363

Token 50: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02514450065791607
    2. ')
' → logprob: -3.775144577026367
    3. 'else' → logprob: -6.275144577026367
    4. ' else' → logprob: -12.275144577026367
    5. ' )' → logprob: -12.900144577026367
    6. ')
' → logprob: -13.150144577026367
    7. '')' → logprob: -13.525144577026367
    8. '))' → logprob: -14.150144577026367
    9. '）' → logprob: -14.400144577026367
    10. ')

' → logprob: -15.025144577026367

Token 51: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -8.41866585687967e-06
    2. ' else' → logprob: -11.750008583068848
    3. 'elif' → logprob: -15.250008583068848
    4. '```' → logprob: -15.875008583068848
    5. '_else' → logprob: -16.62500762939453
    6. 'elser' → logprob: -18.75000762939453
    7. 'els' → logprob: -18.87500762939453
    8. ')' → logprob: -19.50000762939453
    9. 'elses' → logprob: -19.62500762939453
    10. 'e' → logprob: -19.62500762939453

Token 52: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00034928982495330274
    2. ' :' → logprob: -8.750349044799805
    3. '   ' → logprob: -9.250349044799805
    4. ':
' → logprob: -9.375349044799805
    5. ',' → logprob: -12.875349044799805
    6. '    ' → logprob: -13.250349044799805
    7. '(' → logprob: -13.500349044799805
    8. '():' → logprob: -13.625349044799805
    9. '):' → logprob: -13.875349044799805
    10. '：' → logprob: -14.875349044799805

Token 53: '   ' (ID: 271)
  Prédit: ' min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.7903619408607483
    2. 'min' → logprob: -1.1653618812561035
    3. 'print' → logprob: -1.9153618812561035
    4. ' print' → logprob: -2.6653618812561035
    5. ' ans' → logprob: -5.1653618812561035
    6. 'ans' → logprob: -5.4153618812561035
    7. '   ' → logprob: -6.0403618812561035
    8. 'minimum' → logprob: -7.2903618812561035
    9. ' minimum' → logprob: -7.5403618812561035
    10. ' minimal' → logprob: -7.5403618812561035

Token 54: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.45446664094924927
    2. 'min' → logprob: -1.3294665813446045
    3. 'mn' → logprob: -3.2044665813446045
    4. 'm' → logprob: -3.4544665813446045
    5. 'mi' → logprob: -3.9544665813446045
    6. '   ' → logprob: -5.454466819763184
    7. 'mini' → logprob: -7.204466819763184
    8. 'a' → logprob: -7.454466819763184
    9. ' print' → logprob: -7.454466819763184
    10. 'ans' → logprob: -7.579466819763184

Token 55: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -0.17461653053760529
    2. '(' → logprob: -1.9246165752410889
    3. '(min' → logprob: -4.42461633682251
    4. '(abs' → logprob: -6.29961633682251
    5. '('' → logprob: -8.424616813659668
    6. 'ans' → logprob: -9.299616813659668
    7. '("' → logprob: -9.924616813659668
    8. '(max' → logprob: -10.674616813659668
    9. '(`' → logprob: -11.424616813659668
    10. '(
' → logprob: -11.549616813659668

Token 56: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.6934415102005005
    2. ' -' → logprob: -0.6934415102005005
    3. ')' → logprob: -8.818441390991211
    4. '-min' → logprob: -9.068441390991211
    5. ' ' → logprob: -11.443441390991211
    6. '-)' → logprob: -11.568441390991211
    7. ' )' → logprob: -12.818441390991211
    8. '-end' → logprob: -13.068441390991211
    9. '   ' → logprob: -13.443441390991211
    10. '  ' → logprob: -14.068441390991211

Token 57: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.11023439466953278
    2. ' ' → logprob: -2.610234498977661
    3. 'min' → logprob: -3.735234498977661
    4. ' min' → logprob: -4.985234260559082
    5. '   ' → logprob: -9.735234260559082
    6. '  ' → logprob: -10.235234260559082
    7. ')' → logprob: -11.110234260559082
    8. '(min' → logprob: -11.360234260559082
    9. '	min' → logprob: -11.610234260559082
    10. '-min' → logprob: -12.110234260559082

Token 58: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.03834107518196106
    2. 'min' → logprob: -3.2883410453796387
    3. ' ' → logprob: -8.288341522216797
    4. ' min' → logprob: -10.288341522216797
    5. 'max' → logprob: -12.413341522216797
    6. '(min' → logprob: -12.413341522216797
    7. '   ' → logprob: -13.288341522216797
    8. '```' → logprob: -14.163341522216797
    9. '  ' → logprob: -14.413341522216797
    10. 'abs' → logprob: -14.538341522216797

Token 59: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.4302210807800293
    2. '*' → logprob: -1.0552210807800293
    3. 'min' → logprob: -7.055221080780029
    4. ' min' → logprob: -7.680221080780029
    5. ' ' → logprob: -9.305221557617188
    6. ')' → logprob: -9.680221557617188
    7. '   ' → logprob: -11.180221557617188
    8. 'abs' → logprob: -11.555221557617188
    9. ' )' → logprob: -12.555221557617188
    10. '  ' → logprob: -12.805221557617188

Token 60: ' min' (ID: 1349)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.011068690568208694
    2. ' min' → logprob: -4.511068820953369
    3. '(min' → logprob: -11.386068344116211
    4. '[min' → logprob: -12.136068344116211
    5. 'abs' → logprob: -13.136068344116211
    6. '	min' → logprob: -14.511068344116211
    7. 'mi' → logprob: -14.511068344116211
    8. 'max' → logprob: -15.511068344116211
    9. '=min' → logprob: -15.886068344116211
    10. '-min' → logprob: -16.13606834411621

Token 61: '(abs' (ID: 71957)
  Prédit: '(abs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(abs' → logprob: -0.002362094121053815
    2. '(' → logprob: -6.252362251281738
    3. '([' → logprob: -8.377362251281738
    4. '(a' → logprob: -9.127362251281738
    5. 'abs' → logprob: -10.127362251281738
    6. '(map' → logprob: -10.377362251281738
    7. '(i' → logprob: -11.627362251281738
    8. '(|' → logprob: -11.752362251281738
    9. '(`' → logprob: -13.002362251281738
    10. '(ab' → logprob: -14.002362251281738

Token 62: '(i' (ID: 3649)
  Prédit: '(abs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(abs' → logprob: -0.1197587326169014
    2. '(i' → logprob: -2.3697588443756104
    3. '(a' → logprob: -4.119758605957031
    4. '(' → logprob: -6.369758605957031
    5. 'abs' → logprob: -6.744758605957031
    6. 'a' → logprob: -8.994758605957031
    7. ')' → logprob: -10.619758605957031
    8. '([' → logprob: -11.119758605957031
    9. 'i' → logprob: -11.369758605957031
    10. '(ai' → logprob: -11.494758605957031

Token 63: ')' (ID: 8)
  Prédit: '(a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.04728734493255615
    2. '(i' → logprob: -4.172287464141846
    3. '(' → logprob: -4.547287464141846
    4. 'a' → logprob: -4.672287464141846
    5. '(abs' → logprob: -4.797287464141846
    6. ')' → logprob: -6.422287464141846
    7. '))' → logprob: -7.297287464141846
    8. 'abs' → logprob: -8.922286987304688
    9. ')))' → logprob: -9.922286987304688
    10. ')a' → logprob: -10.297286987304688

Token 64: ' for' (ID: 395)
  Prédit: '(a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.01144684012979269
    2. '(' → logprob: -5.386446952819824
    3. 'a' → logprob: -5.636446952819824
    4. '(abs' → logprob: -5.886446952819824
    5. '(i' → logprob: -8.011446952819824
    6. ')' → logprob: -9.261446952819824
    7. 'abs' → logprob: -11.136446952819824
    8. ' a' → logprob: -12.386446952819824
    9. ' (' → logprob: -12.386446952819824
    10. '))' → logprob: -12.511446952819824

Token 65: ' i' (ID: 575)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.6358581185340881
    2. 'a' → logprob: -0.7608581185340881
    3. ' i' → logprob: -6.260858058929443
    4. 'i' → logprob: -6.635858058929443
    5. ')a' → logprob: -11.385858535766602
    6. ')' → logprob: -11.760858535766602
    7. ' ' → logprob: -12.010858535766602
    8. '	a' → logprob: -12.885858535766602
    9. '  ' → logprob: -13.635858535766602
    10. ' )' → logprob: -14.010858535766602

Token 66: ' in' (ID: 306)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.5776345729827881
    2. 'a' → logprob: -0.8276345729827881
    3. ' in' → logprob: -6.577634811401367
    4. ')' → logprob: -8.827634811401367
    5. '(a' → logprob: -9.077634811401367
    6. ' )' → logprob: -11.327634811401367
    7. ')a' → logprob: -11.452634811401367
    8. 'in' → logprob: -12.202634811401367
    9. '	a' → logprob: -12.577634811401367
    10. ' ' → logprob: -12.952634811401367

Token 67: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.006717743817716837
    2. ' a' → logprob: -5.006717681884766
    3. ')a' → logprob: -13.506717681884766
    4. ')' → logprob: -14.506717681884766
    5. ' ' → logprob: -15.756717681884766
    6. '	a' → logprob: -16.131717681884766
    7. '   ' → logprob: -16.256717681884766
    8. '(a' → logprob: -16.631717681884766
    9. '  ' → logprob: -17.631717681884766
    10. '[a' → logprob: -18.006717681884766

Token 68: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.25200986862182617
    2. ')' → logprob: -1.5020098686218262
    3. ' ))' → logprob: -10.377010345458984
    4. ' )' → logprob: -11.127010345458984
    5. ')))' → logprob: -11.127010345458984
    6. '))
' → logprob: -11.252010345458984
    7. ')
' → logprob: -12.377010345458984
    8. ')}' → logprob: -14.252010345458984
    9. ')a' → logprob: -14.252010345458984
    10. ' ' → logprob: -15.127010345458984


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 66
Tokens correctement prédits (1ère position, stricte): 19
Tokens correctement prédits (1ère position, avec adaptation): 20
Tokens correctement prédits (top 10): 53
Précision stricte (1ère position): 28.79%
Précision adaptée (1ère position): 30.30%
Précision (top 10): 80.30%
================================================================================
