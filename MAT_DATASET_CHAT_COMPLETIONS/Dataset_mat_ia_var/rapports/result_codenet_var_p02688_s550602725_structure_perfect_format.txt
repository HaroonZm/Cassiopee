================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:15:39
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def main():
    n, k = map(int, input().split())
    have = []
    for i in range(k):
        d = int(input())
        a = list(map(int, input().split()))
        for j in range(d):
            if a[j] not in have:
                have.append(a[j])
    print(n - len(have))

if __name__ == "__main__":
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' main' (ID: 2758)
  → Token d'amorce (pas de prédiction)

Token 2: '():
' (ID: 8595)
  → Token d'amorce (pas de prédiction)

Token 3: '   ' (ID: 271)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\' → logprob: -0.24912160634994507
    2. '\n' → logprob: -1.7491216659545898
    3. '   ' → logprob: -3.87412166595459
    4. '    
' → logprob: -4.87412166595459
    5. '    ' → logprob: -5.62412166595459
    6. ''' → logprob: -5.87412166595459
    7. '```' → logprob: -6.12412166595459
    8. '(' → logprob: -6.37412166595459
    9. ' 
' → logprob: -6.49912166595459
    10. '\r' → logprob: -6.87412166595459

Token 4: ' n' (ID: 297)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5992159247398376
    2. '   ' → logprob: -1.4742159843444824
    3. 'pass' → logprob: -2.0992159843444824
    4. 'return' → logprob: -2.8492159843444824
    5. '#' → logprob: -4.224215984344482
    6. 'p' → logprob: -5.224215984344482
    7. '```' → logprob: -5.724215984344482
    8. 'r' → logprob: -5.724215984344482
    9. 'a' → logprob: -5.974215984344482
    10. '\' → logprob: -5.974215984344482

Token 5: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.8154670596122742
    2. '=' → logprob: -0.9404670596122742
    3. '_' → logprob: -2.690467119216919
    4. '   ' → logprob: -3.190467119216919
    5. ' ' → logprob: -3.440467119216919
    6. 'u' → logprob: -4.69046688079834
    7. '  ' → logprob: -5.69046688079834
    8. 'umber' → logprob: -5.81546688079834
    9. '    ' → logprob: -6.31546688079834
    10. '.' → logprob: -6.44046688079834

Token 6: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.5549440383911133
    2. ' ' → logprob: -1.5549440383911133
    3. ' m' → logprob: -1.8049440383911133
    4. 'm' → logprob: -4.304944038391113
    5. 'k' → logprob: -5.429944038391113
    6. ' =' → logprob: -5.429944038391113
    7. ' t' → logprob: -5.554944038391113
    8. ' s' → logprob: -5.679944038391113
    9. ' a' → logprob: -5.929944038391113
    10. ' input' → logprob: -5.929944038391113

Token 7: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.18051132559776306
    2. '=' → logprob: -1.8055113554000854
    3. ',' → logprob: -7.305511474609375
    4. ')' → logprob: -10.305511474609375
    5. ' ' → logprob: -10.305511474609375
    6. ' ,' → logprob: -11.305511474609375
    7. '<|end|>' → logprob: -12.430511474609375
    8. '  ' → logprob: -12.805511474609375
    9. ' =
' → logprob: -13.430511474609375
    10. '_' → logprob: -13.430511474609375

Token 8: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.028976883739233017
    2. 'map' → logprob: -4.403976917266846
    3. ' input' → logprob: -4.778976917266846
    4. ' ' → logprob: -5.153976917266846
    5. 'input' → logprob: -7.153976917266846
    6. ' int' → logprob: -7.153976917266846
    7. '0' → logprob: -7.903976917266846
    8. ' n' → logprob: -9.653976440429688
    9. 'int' → logprob: -10.153976440429688
    10. '5' → logprob: -10.278976440429688

Token 9: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.28583279252052307
    2. '(int' → logprob: -2.0358328819274902
    3. '(str' → logprob: -2.5358328819274902
    4. '(lambda' → logprob: -3.2858328819274902
    5. '<|end|>' → logprob: -8.160832405090332
    6. '(
' → logprob: -8.285832405090332
    7. '(eval' → logprob: -9.285832405090332
    8. '(list' → logprob: -9.285832405090332
    9. '(input' → logprob: -9.410832405090332
    10. '```' → logprob: -9.785832405090332

Token 10: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.3394137918949127
    2. ')' → logprob: -1.4644137620925903
    3. ',' → logprob: -3.46441388130188
    4. '(' → logprob: -4.089413642883301
    5. 'input' → logprob: -5.214413642883301
    6. ',input' → logprob: -6.214413642883301
    7. ' input' → logprob: -8.3394136428833
    8. '),' → logprob: -8.8394136428833
    9. '```' → logprob: -9.3394136428833
    10. '=input' → logprob: -9.4644136428833

Token 11: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.1602475792169571
    2. ' input' → logprob: -1.910247564315796
    3. ')' → logprob: -10.910247802734375
    4. '(input' → logprob: -12.535247802734375
    5. ' )' → logprob: -14.410247802734375
    6. ',input' → logprob: -15.160247802734375
    7. '=input' → logprob: -15.535247802734375
    8. '	input' → logprob: -15.660247802734375
    9. ' ' → logprob: -15.910247802734375
    10. '```' → logprob: -16.535247802734375

Token 12: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.578619658946991
    2. '().' → logprob: -1.4536197185516357
    3. '())' → logprob: -1.7036197185516357
    4. ')' → logprob: -4.453619480133057
    5. '(' → logprob: -5.078619480133057
    6. '('' → logprob: -5.703619480133057
    7. '()))' → logprob: -7.453619480133057
    8. '("")' → logprob: -8.203619956970215
    9. '(""))' → logprob: -8.453619956970215
    10. '());' → logprob: -8.453619956970215

Token 13: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0003368926409166306
    2. 'strip' → logprob: -8.000336647033691
    3. 'rstrip' → logprob: -13.875336647033691
    4. ' split' → logprob: -15.250336647033691
    5. '(split' → logprob: -16.000337600708008
    6. ')' → logprob: -16.125337600708008
    7. 'spl' → logprob: -17.875337600708008
    8. 'read' → logprob: -18.125337600708008
    9. 's' → logprob: -18.625337600708008
    10. 'startswith' → logprob: -19.250337600708008

Token 14: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.13170526921749115
    2. '))' → logprob: -2.5067052841186523
    3. '())' → logprob: -3.2567052841186523
    4. '()))' → logprob: -6.256705284118652
    5. '()' → logprob: -6.631705284118652
    6. '('' → logprob: -9.881705284118652
    7. '(' → logprob: -10.631705284118652
    8. ')))' → logprob: -11.756705284118652
    9. '),' → logprob: -12.256705284118652
    10. '`)' → logprob: -12.631705284118652

Token 15: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.0093554258346558
    2. '\n' → logprob: -1.3843554258346558
    3. '   ' → logprob: -2.3843555450439453
    4. ')' → logprob: -2.6343555450439453
    5. '```' → logprob: -2.8843555450439453
    6. '\' → logprob: -3.0093555450439453
    7. ':' → logprob: -3.2593555450439453
    8. '    
' → logprob: -3.7593555450439453
    9. '<|end|>' → logprob: -4.509355545043945
    10. ',' → logprob: -5.134355545043945

Token 16: ' have' (ID: 679)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3219355642795563
    2. '`' → logprob: -3.5719356536865234
    3. 'i' → logprob: -3.5719356536865234
    4. 'for' → logprob: -3.8219356536865234
    5. 'result' → logprob: -3.8219356536865234
    6. 'r' → logprob: -3.9469356536865234
    7. ' i' → logprob: -4.071935653686523
    8. 'd' → logprob: -4.321935653686523
    9. '    
' → logprob: -4.446935653686523
    10. '```' → logprob: -4.446935653686523

Token 17: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.04462997242808342
    2. ' =' → logprob: -4.04463005065918
    3. '[' → logprob: -4.91963005065918
    4. 'd' → logprob: -5.16963005065918
    5. '=' → logprob: -5.29463005065918
    6. ')' → logprob: -6.16963005065918
    7. 's' → logprob: -6.29463005065918
    8. '_items' → logprob: -7.41963005065918
    9. '[:]' → logprob: -7.54463005065918
    10. '_d' → logprob: -7.91963005065918

Token 18: ' []
' (ID: 8911)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.1952630579471588
    2. ' ' → logprob: -2.570263147354126
    3. ' set' → logprob: -3.320263147354126
    4. ' [' → logprob: -3.695263147354126
    5. '[]' → logprob: -4.570262908935547
    6. ' {}' → logprob: -4.820262908935547
    7. '[' → logprob: -5.195262908935547
    8. '0' → logprob: -5.195262908935547
    9. 'set' → logprob: -5.320262908935547
    10. ' list' → logprob: -6.195262908935547

Token 19: '   ' (ID: 271)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.24699155986309052
    2. ' for' → logprob: -2.1219916343688965
    3. '   ' → logprob: -2.3719916343688965
    4. ' ' → logprob: -6.4969916343688965
    5. '	for' → logprob: -6.7469916343688965
    6. '    
' → logprob: -7.4969916343688965
    7. '<|end|>' → logprob: -7.6219916343688965
    8. '[' → logprob: -8.246991157531738
    9. '  ' → logprob: -8.371991157531738
    10. '    ' → logprob: -8.496991157531738

Token 20: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.24980396032333374
    2. ' for' → logprob: -1.6248040199279785
    3. '   ' → logprob: -3.7498040199279785
    4. ' ' → logprob: -9.12480354309082
    5. '    
' → logprob: -9.24980354309082
    6. '	for' → logprob: -9.24980354309082
    7. '```' → logprob: -9.74980354309082
    8. '    ' → logprob: -9.87480354309082
    9. '
' → logprob: -10.12480354309082
    10. '[' → logprob: -10.37480354309082

Token 21: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.08111125975847244
    2. '_' → logprob: -3.331111192703247
    3. ' _' → logprob: -3.331111192703247
    4. ' ' → logprob: -5.081111431121826
    5. 'i' → logprob: -8.831110954284668
    6. ' range' → logprob: -11.206110954284668
    7. ' I' → logprob: -11.831110954284668
    8. ' ‌' → logprob: -12.081110954284668
    9. '_i' → logprob: -12.206110954284668
    10. ' ▁' → logprob: -12.831110954284668

Token 22: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.019463013857603073
    2. 'in' → logprob: -4.019463062286377
    3. ' ' → logprob: -7.144463062286377
    4. 'n' → logprob: -7.769463062286377
    5. '  ' → logprob: -10.019462585449219
    6. ' n' → logprob: -10.519462585449219
    7. '_' → logprob: -11.894462585449219
    8. 'range' → logprob: -12.144462585449219
    9. ' i' → logprob: -12.894462585449219
    10. '	in' → logprob: -12.894462585449219

Token 23: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.3132631182670593
    2. 'range' → logprob: -1.313263177871704
    3. '	range' → logprob: -14.563262939453125
    4. ' ' → logprob: -14.688262939453125
    5. '(range' → logprob: -16.563262939453125
    6. '_range' → logprob: -16.688262939453125
    7. 'rang' → logprob: -16.938262939453125
    8. ' xrange' → logprob: -16.938262939453125
    9. '.range' → logprob: -17.313262939453125
    10. 'ran' → logprob: -17.938262939453125

Token 24: '(k' (ID: 12125)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.052531689405441284
    2. '(n' → logprob: -3.1775317192077637
    3. ' (' → logprob: -4.677531719207764
    4. '(k' → logprob: -8.802531242370605
    5. ' ' → logprob: -10.677531242370605
    6. ' n' → logprob: -12.552531242370605
    7. '(len' → logprob: -13.052531242370605
    8. '(i' → logprob: -14.177531242370605
    9. '  ' → logprob: -14.302531242370605
    10. ' k' → logprob: -14.302531242370605

Token 25: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.005306927487254143
    2. ' ):' → logprob: -5.880306720733643
    3. ')' → logprob: -6.255306720733643
    4. '+' → logprob: -7.630306720733643
    5. '):
' → logprob: -10.3803071975708
    6. ':' → logprob: -10.6303071975708
    7. ',' → logprob: -11.1303071975708
    8. ' )' → logprob: -12.0053071975708
    9. '>' → logprob: -12.8803071975708
    10. ' +' → logprob: -13.2553071975708

Token 26: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.19452153146266937
    2. '   ' → logprob: -2.319521427154541
    3. '    ' → logprob: -2.944521427154541
    4. '<|end|>' → logprob: -4.194521427154541
    5. ' ' → logprob: -5.569521427154541
    6. '        ' → logprob: -6.444521427154541
    7. ' have' → logprob: -6.569521427154541
    8. ' 
' → logprob: -7.319521427154541
    9. '     ' → logprob: -8.0695219039917
    10. '<|end|>' → logprob: -8.1945219039917

Token 27: ' d' (ID: 272)
  Prédit: ' have'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' have' → logprob: -0.025189725682139397
    2. 'have' → logprob: -3.7751896381378174
    3. '    ' → logprob: -7.7751898765563965
    4. '   ' → logprob: -7.9001898765563965
    5. ' line' → logprob: -8.025189399719238
    6. ' has' → logprob: -8.900189399719238
    7. ' 
' → logprob: -9.025189399719238
    8. ' h' → logprob: -9.525189399719238
    9. ' input' → logprob: -9.900189399719238
    10. '_have' → logprob: -10.025189399719238

Token 28: ' =' (ID: 314)
  Prédit: 'ay'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ay' → logprob: -1.3559176921844482
    2. ' =' → logprob: -1.4809176921844482
    3. 'a' → logprob: -1.6059176921844482
    4. 'ays' → logprob: -1.8559176921844482
    5. ',' → logprob: -2.4809176921844482
    6. ' ' → logprob: -3.6059176921844482
    7. 'aily' → logprob: -4.355917930603027
    8. '=' → logprob: -4.730917930603027
    9. 'i' → logprob: -5.105917930603027
    10. ' a' → logprob: -5.980917930603027

Token 29: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.1472262442111969
    2. 'int' → logprob: -2.022226333618164
    3. ' list' → logprob: -5.647226333618164
    4. 'list' → logprob: -7.272226333618164
    5. '[int' → logprob: -9.022226333618164
    6. ' ' → logprob: -9.897226333618164
    7. '   ' → logprob: -10.147226333618164
    8. ' map' → logprob: -10.272226333618164
    9. ' input' → logprob: -11.022226333618164
    10. ' [' → logprob: -11.772226333618164

Token 30: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.005239564459770918
    2. '(' → logprob: -5.255239486694336
    3. 'input' → logprob: -12.755239486694336
    4. '(
' → logprob: -13.005239486694336
    5. '(

' → logprob: -15.255239486694336
    6. ' (' → logprob: -16.130239486694336
    7. ',input' → logprob: -16.255239486694336
    8. ' input' → logprob: -16.630239486694336
    9. '(in' → logprob: -17.005239486694336
    10. '=input' → logprob: -17.630239486694336

Token 31: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.011326847597956657
    2. '()' → logprob: -4.511326789855957
    3. '())
' → logprob: -8.761326789855957
    4. ')' → logprob: -9.261326789855957
    5. '().' → logprob: -11.636326789855957
    6. '(' → logprob: -12.011326789855957
    7. '()
' → logprob: -12.386326789855957
    8. '())

' → logprob: -13.136326789855957
    9. '()))' → logprob: -13.511326789855957
    10. '();)' → logprob: -13.636326789855957

Token 32: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.06198785454034805
    2. '<|end|>' → logprob: -3.56198787689209
    3. '        ' → logprob: -4.93698787689209
    4. '   ' → logprob: -4.93698787689209
    5. ')' → logprob: -5.18698787689209
    6. '    ' → logprob: -5.93698787689209
    7. '
' → logprob: -6.31198787689209
    8. '        
' → logprob: -6.56198787689209
    9. 'have' → logprob: -6.81198787689209
    10. ',' → logprob: -7.18698787689209

Token 33: ' a' (ID: 261)
  Prédit: ' have'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' have' → logprob: -0.055243875831365585
    2. 'have' → logprob: -3.055243968963623
    3. ' numbers' → logprob: -6.555243968963623
    4. '<|end|>' → logprob: -6.805243968963623
    5. ' h' → logprob: -6.930243968963623
    6. ' s' → logprob: -7.180243968963623
    7. ' for' → logprob: -8.055243492126465
    8. ' a' → logprob: -8.555243492126465
    9. 'h' → logprob: -8.930243492126465
    10. ' days' → logprob: -8.930243492126465

Token 34: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.09453986585140228
    2. '=' → logprob: -3.2195398807525635
    3. '.append' → logprob: -3.4695398807525635
    4. 'pp' → logprob: -4.469539642333984
    5. 'p' → logprob: -5.344539642333984
    6. '.' → logprob: -7.719539642333984
    7. '+=' → logprob: -7.844539642333984
    8. ' +=' → logprob: -7.969539642333984
    9. '.extend' → logprob: -8.344539642333984
    10. ' ' → logprob: -8.344539642333984

Token 35: ' list' (ID: 1562)
  Prédit: ' list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.2814151644706726
    2. 'list' → logprob: -1.4064152240753174
    3. ' set' → logprob: -9.531414985656738
    4. '[list' → logprob: -9.781414985656738
    5. 'set' → logprob: -10.031414985656738
    6. '[' → logprob: -10.406414985656738
    7. ' [' → logprob: -10.531414985656738
    8. '[]' → logprob: -11.406414985656738
    9. '	list' → logprob: -11.656414985656738
    10. ' []' → logprob: -12.406414985656738

Token 36: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.0053293355740606785
    2. '(' → logprob: -5.255329132080078
    3. '(int' → logprob: -9.380329132080078
    4. '(input' → logprob: -11.630329132080078
    5. '(
' → logprob: -13.880329132080078
    6. '(range' → logprob: -15.005329132080078
    7. ' (' → logprob: -15.755329132080078
    8. '(eval' → logprob: -15.755329132080078
    9. '(list' → logprob: -15.880329132080078
    10. '(s' → logprob: -16.005329132080078

Token 37: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0006409500492736697
    2. '(' → logprob: -7.375640869140625
    3. '=int' → logprob: -12.375640869140625
    4. 'int' → logprob: -12.500640869140625
    5. ',int' → logprob: -13.625640869140625
    6. ' (' → logprob: -13.750640869140625
    7. '(
' → logprob: -14.125640869140625
    8. '[int' → logprob: -14.125640869140625
    9. '(str' → logprob: -14.250640869140625
    10. '<int' → logprob: -14.500640869140625

Token 38: ',' (ID: 11)
  Prédit: ',input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',input' → logprob: -0.3506350815296173
    2. ',' → logprob: -1.475635051727295
    3. '(input' → logprob: -2.725635051727295
    4. '(' → logprob: -6.600635051727295
    5. 'input' → logprob: -9.475635528564453
    6. ',int' → logprob: -9.600635528564453
    7. ' ,' → logprob: -9.600635528564453
    8. '=input' → logprob: -11.350635528564453
    9. '```' → logprob: -11.850635528564453
    10. '<input' → logprob: -12.100635528564453

Token 39: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.12694479525089264
    2. ' input' → logprob: -2.1269447803497314
    3. '(input' → logprob: -11.876944541931152
    4. ',input' → logprob: -13.001944541931152
    5. ' ' → logprob: -13.126944541931152
    6. '	input' → logprob: -13.751944541931152
    7. ')' → logprob: -13.751944541931152
    8. '=input' → logprob: -13.876944541931152
    9. 'lambda' → logprob: -14.251944541931152
    10. 'list' → logprob: -15.001944541931152

Token 40: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.00028767617186531425
    2. ' .' → logprob: -9.000288009643555
    3. '(' → logprob: -9.500288009643555
    4. '()' → logprob: -10.125288009643555
    5. '.' → logprob: -10.875288009643555
    6. ' ().' → logprob: -11.500288009643555
    7. '   ' → logprob: -12.375288009643555
    8. '.split' → logprob: -12.375288009643555
    9. ',' → logprob: -12.375288009643555
    10. ' ' → logprob: -13.125288009643555

Token 41: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -1.9862216504407115e-05
    2. 'strip' → logprob: -11.125020027160645
    3. '(split' → logprob: -12.875020027160645
    4. ' split' → logprob: -13.000020027160645
    5. 'rstrip' → logprob: -16.000019073486328
    6. 'spl' → logprob: -17.250019073486328
    7. ')' → logprob: -17.500019073486328
    8. 's' → logprob: -17.750019073486328
    9. 'read' → logprob: -19.000019073486328
    10. '.split' → logprob: -19.500019073486328

Token 42: '()))
' (ID: 24521)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.30230432748794556
    2. '()))' → logprob: -1.5523042678833008
    3. ')' → logprob: -3.427304267883301
    4. '())' → logprob: -4.552304267883301
    5. '(' → logprob: -5.427304267883301
    6. '()' → logprob: -6.427304267883301
    7. '()))
' → logprob: -10.8023042678833
    8. ')))' → logprob: -10.9273042678833
    9. ''))' → logprob: -11.0523042678833
    10. '"))' → logprob: -11.8023042678833

Token 43: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00224113161675632
    2. '   ' → logprob: -6.377241134643555
    3. '           ' → logprob: -9.377241134643555
    4. '        
' → logprob: -9.627241134643555
    5. '<|end|>' → logprob: -9.752241134643555
    6. ')' → logprob: -9.877241134643555
    7. '     ' → logprob: -10.127241134643555
    8. ',' → logprob: -10.127241134643555
    9. '      ' → logprob: -10.377241134643555
    10. '```' → logprob: -10.377241134643555

Token 44: ' for' (ID: 395)
  Prédit: 'have'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'have' → logprob: -0.3943069279193878
    2. '       ' → logprob: -1.7693068981170654
    3. '   ' → logprob: -2.1443068981170654
    4. ' have' → logprob: -3.2693068981170654
    5. '           ' → logprob: -9.269307136535645
    6. '    ' → logprob: -10.769307136535645
    7. '  ' → logprob: -11.144307136535645
    8. '```' → logprob: -11.269307136535645
    9. '     ' → logprob: -11.519307136535645
    10. '      ' → logprob: -11.519307136535645

Token 45: ' j' (ID: 441)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.14813342690467834
    2. ' _' → logprob: -3.0231335163116455
    3. ' v' → logprob: -3.7731335163116455
    4. ' ' → logprob: -4.398133277893066
    5. ' j' → logprob: -4.523133277893066
    6. ' item' → logprob: -4.648133277893066
    7. '_' → logprob: -4.898133277893066
    8. ' num' → logprob: -5.023133277893066
    9. ' val' → logprob: -5.398133277893066
    10. ' h' → logprob: -5.523133277893066

Token 46: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.03456715866923332
    2. 'in' → logprob: -3.40956711769104
    3. ' ' → logprob: -7.409567356109619
    4. '  ' → logprob: -9.534566879272461
    5. ')' → logprob: -9.659566879272461
    6. ' ,' → logprob: -10.534566879272461
    7. '(' → logprob: -10.909566879272461
    8. 'n' → logprob: -11.159566879272461
    9. '<|end|>' → logprob: -11.159566879272461
    10. ' i' → logprob: -11.534566879272461

Token 47: ' range' (ID: 3352)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.3507646918296814
    2. 'a' → logprob: -1.2257647514343262
    3. ' range' → logprob: -6.475764751434326
    4. 'range' → logprob: -7.225764751434326
    5. ' ' → logprob: -10.600764274597168
    6. ' have' → logprob: -11.475764274597168
    7. 'have' → logprob: -12.725764274597168
    8. '	a' → logprob: -12.850764274597168
    9. '(a' → logprob: -13.100764274597168
    10. '    ' → logprob: -13.350764274597168

Token 48: '(d' (ID: 2572)
  Prédit: '(len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(len' → logprob: -0.5651243329048157
    2. '(d' → logprob: -1.190124273300171
    3. '(' → logprob: -2.065124273300171
    4. ' (' → logprob: -8.44012451171875
    5. '(n' → logprob: -8.56512451171875
    6. ' len' → logprob: -9.19012451171875
    7. '(k' → logprob: -9.81512451171875
    8. 'len' → logprob: -9.81512451171875
    9. '(a' → logprob: -10.19012451171875
    10. '(s' → logprob: -10.81512451171875

Token 49: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.2991805374622345
    2. ' ):' → logprob: -1.549180507659912
    3. ' )' → logprob: -3.674180507659912
    4. ')' → logprob: -3.924180507659912
    5. ',' → logprob: -8.29918098449707
    6. '):
' → logprob: -8.54918098449707
    7. ':' → logprob: -8.92418098449707
    8. ' ):
' → logprob: -9.17418098449707
    9. ' ,' → logprob: -9.54918098449707
    10. ' if' → logprob: -9.92418098449707

Token 50: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.16819961369037628
    2. '        ' → logprob: -2.9181995391845703
    3. '           ' → logprob: -2.9181995391845703
    4. '   ' → logprob: -4.41819953918457
    5. '    ' → logprob: -4.54319953918457
    6. ' ' → logprob: -4.54319953918457
    7. ' have' → logprob: -5.91819953918457
    8. ':' → logprob: -6.16819953918457
    9. ' if' → logprob: -6.16819953918457
    10. '            ' → logprob: -6.79319953918457

Token 51: ' if' (ID: 538)
  Prédit: ' have'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' have' → logprob: -0.11377155035734177
    2. 'have' → logprob: -2.238771438598633
    3. '           ' → logprob: -8.113771438598633
    4. ' a' → logprob: -8.488771438598633
    5. ' if' → logprob: -8.613771438598633
    6. '            ' → logprob: -9.363771438598633
    7. '    ' → logprob: -10.113771438598633
    8. '   ' → logprob: -10.988771438598633
    9. '_have' → logprob: -11.363771438598633
    10. ' ' → logprob: -11.488771438598633

Token 52: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.22542355954647064
    2. 'a' → logprob: -1.6004235744476318
    3. '    ' → logprob: -12.350423812866211
    4. ' ' → logprob: -13.725423812866211
    5. '   ' → logprob: -14.100423812866211
    6. '	a' → logprob: -14.225423812866211
    7. ' not' → logprob: -14.350423812866211
    8. ' have' → logprob: -14.600423812866211
    9. '>a' → logprob: -14.600423812866211
    10. '(a' → logprob: -15.100423812866211

Token 53: '[j' (ID: 7895)
  Prédit: '[j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[j' → logprob: -3.619311974034645e-05
    2. '[' → logprob: -10.500036239624023
    3. '[i' → logprob: -12.125036239624023
    4. '[a' → logprob: -14.125036239624023
    5. ' [' → logprob: -14.250036239624023
    6. '```' → logprob: -15.125036239624023
    7. 'j' → logprob: -15.375036239624023
    8. 'in' → logprob: -15.625036239624023
    9. '[
' → logprob: -15.875036239624023
    10. '[-' → logprob: -16.000036239624023

Token 54: ']' (ID: 60)
  Prédit: ' not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.22818957269191742
    2. ' in' → logprob: -2.103189468383789
    3. ')' → logprob: -3.853189468383789
    4. ' ==' → logprob: -4.103189468383789
    5. 'not' → logprob: -4.603189468383789
    6. ' ' → logprob: -4.728189468383789
    7. '-' → logprob: -4.978189468383789
    8. '==' → logprob: -5.353189468383789
    9. ' <=' → logprob: -5.728189468383789
    10. ' !=' → logprob: -5.853189468383789

Token 55: ' not' (ID: 625)
  Prédit: ' not'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.11125414073467255
    2. ' ==' → logprob: -3.1112542152404785
    3. ' in' → logprob: -3.4862542152404785
    4. ' ' → logprob: -4.7362542152404785
    5. ' !=' → logprob: -5.1112542152404785
    6. 'not' → logprob: -5.3612542152404785
    7. ' <=' → logprob: -5.6112542152404785
    8. '==' → logprob: -5.8612542152404785
    9. ' >' → logprob: -6.7362542152404785
    10. '-' → logprob: -7.1112542152404785

Token 56: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.474273681640625
    2. ' in' → logprob: -0.974273681640625
    3. '<|end|>' → logprob: -9.474273681640625
    4. ' ' → logprob: -10.224273681640625
    5. 'to' → logprob: -10.599273681640625
    6. '.' → logprob: -10.974273681640625
    7. ')' → logprob: -11.849273681640625
    8. ' to' → logprob: -12.474273681640625
    9. '<|end|>' → logprob: -12.599273681640625
    10. '=' → logprob: -12.974273681640625

Token 57: ' have' (ID: 679)
  Prédit: ' have'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' have' → logprob: -0.12697933614253998
    2. 'have' → logprob: -2.126979351043701
    3. ' ' → logprob: -10.251978874206543
    4. ' hav' → logprob: -13.001978874206543
    5. '_have' → logprob: -13.251978874206543
    6. ' had' → logprob: -13.376978874206543
    7. '   ' → logprob: -13.751978874206543
    8. ' a' → logprob: -13.814478874206543
    9. ' set' → logprob: -14.001978874206543
    10. '    ' → logprob: -14.376978874206543

Token 58: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.005355432629585266
    2. ' :' → logprob: -6.005355358123779
    3. ':
' → logprob: -6.505355358123779
    4. '):' → logprob: -7.130355358123779
    5. ' and' → logprob: -8.380355834960938
    6. '           ' → logprob: -9.005355834960938
    7. ')' → logprob: -10.255355834960938
    8. ' :
' → logprob: -10.380355834960938
    9. '):
' → logprob: -10.755355834960938
    10. ' ' → logprob: -10.880355834960938

Token 59: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.14268910884857178
    2. ':' → logprob: -2.3926892280578613
    3. ' :' → logprob: -4.267689228057861
    4. ' have' → logprob: -5.392689228057861
    5. '           ' → logprob: -5.392689228057861
    6. ' and' → logprob: -5.392689228057861
    7. '            ' → logprob: -5.517689228057861
    8. '                ' → logprob: -6.142689228057861
    9. ':
' → logprob: -6.642689228057861
    10. ' :
' → logprob: -6.767689228057861

Token 60: ' have' (ID: 679)
  Prédit: ' have'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' have' → logprob: -0.007434112019836903
    2. 'have' (adapté à ' have') → logprob: -5.132433891296387
    3. '                ' → logprob: -7.382433891296387
    4. ' ' → logprob: -7.882433891296387
    5. '                   ' → logprob: -8.382433891296387
    6. '    ' → logprob: -9.257433891296387
    7. '                    ' → logprob: -9.257433891296387
    8. '               ' → logprob: -10.507433891296387
    9. ' has' → logprob: -11.757433891296387
    10. '_have' → logprob: -11.757433891296387

Token 61: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.20145133137702942
    2. '.' → logprob: -1.701451301574707
    3. '.add' → logprob: -10.701451301574707
    4. ' .' → logprob: -11.826451301574707
    5. '.extend' → logprob: -12.451451301574707
    6. '.app' → logprob: -13.576451301574707
    7. '.ap' → logprob: -13.826451301574707
    8. '.insert' → logprob: -14.576451301574707
    9. '.push' → logprob: -15.076451301574707
    10. '.remove' → logprob: -15.076451301574707

Token 62: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.0019291093340143561
    2. '(' → logprob: -6.25192928314209
    3. '((' → logprob: -15.62692928314209
    4. '(
' → logprob: -16.126928329467773
    5. '(i' → logprob: -16.876928329467773
    6. '(n' → logprob: -17.001928329467773
    7. '(A' → logprob: -17.001928329467773
    8. '(s' → logprob: -17.001928329467773
    9. '(x' → logprob: -17.501928329467773
    10. '(j' → logprob: -17.876928329467773

Token 63: '[j' (ID: 7895)
  Prédit: '[j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[j' → logprob: -5.5577775128767826e-06
    2. '[' → logprob: -12.125005722045898
    3. '[
' → logprob: -16.7500057220459
    4. '[i' → logprob: -17.3750057220459
    5. ' [' → logprob: -18.5000057220459
    6. ')' → logprob: -18.7500057220459
    7. '   ' → logprob: -19.0000057220459
    8. '```' → logprob: -19.2500057220459
    9. ',j' → logprob: -19.3750057220459
    10. '(j' → logprob: -19.8750057220459

Token 64: '])
' (ID: 5169)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.014441310428082943
    2. '))' → logprob: -4.38944149017334
    3. '])' → logprob: -6.38944149017334
    4. ')
' → logprob: -8.51444149017334
    5. ' )' → logprob: -10.63944149017334
    6. '               ' → logprob: -12.88944149017334
    7. ')])' → logprob: -12.88944149017334
    8. '           ' → logprob: -13.01444149017334
    9. '})' → logprob: -13.01444149017334
    10. '),' → logprob: -13.13944149017334

Token 65: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04220684990286827
    2. '
' → logprob: -3.9172067642211914
    3. '    
' → logprob: -4.667206764221191
    4. ' 
' → logprob: -5.542206764221191
    5. ' if' → logprob: -6.292206764221191
    6. '\n' → logprob: -6.792206764221191
    7. '<|end|>' → logprob: -7.042206764221191
    8. '   
' → logprob: -7.292206764221191
    9. '  
' → logprob: -7.417206764221191
    10. ' ' → logprob: -7.917206764221191

Token 66: ' print' (ID: 2123)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.45387589931488037
    2. '   ' → logprob: -1.4538758993148804
    3. ' 
' → logprob: -2.95387601852417
    4. '    
' → logprob: -3.57887601852417
    5. '\n' → logprob: -4.57887601852417
    6. '<|end|>' → logprob: -4.57887601852417
    7. 'n' → logprob: -4.70387601852417
    8. '  
' → logprob: -4.70387601852417
    9. '   
' → logprob: -5.70387601852417
    10. 'print' (adapté à ' print') → logprob: -5.82887601852417

Token 67: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5931975841522217
    2. '(n' → logprob: -1.0931975841522217
    3. '(len' → logprob: -2.2181975841522217
    4. '('' → logprob: -6.718197822570801
    5. '("' → logprob: -6.718197822570801
    6. 'len' → logprob: -7.343197822570801
    7. '(k' → logprob: -9.2181978225708
    8. '()' → logprob: -9.3431978225708
    9. ' (' → logprob: -9.5931978225708
    10. '(max' → logprob: -9.5931978225708

Token 68: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.20148234069347382
    2. '-' → logprob: -1.7014822959899902
    3. '-l' → logprob: -10.076482772827148
    4. ' ' → logprob: -11.076482772827148
    5. ')' → logprob: -12.201482772827148
    6. '-have' → logprob: -12.826482772827148
    7. '-h' → logprob: -13.326482772827148
    8. ',' → logprob: -14.451482772827148
    9. '   ' → logprob: -15.076482772827148
    10. ' )' → logprob: -15.451482772827148

Token 69: ' len' (ID: 4631)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.10020752996206284
    2. ' len' → logprob: -2.350207567214966
    3. '	len' → logprob: -14.350207328796387
    4. '(len' → logprob: -15.850207328796387
    5. '   ' → logprob: -16.475208282470703
    6. ' ' → logprob: -17.600208282470703
    7. '=len' → logprob: -18.100208282470703
    8. '[len' → logprob: -18.975208282470703
    9. ',len' → logprob: -19.600208282470703
    10. 'le' → logprob: -19.850208282470703

Token 70: '(h' (ID: 8120)
  Prédit: '(h'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(h' → logprob: -0.004079112783074379
    2. '(' → logprob: -5.504079341888428
    3. '(
' → logprob: -15.25407886505127
    4. '(has' → logprob: -15.50407886505127
    5. ' (' → logprob: -15.87907886505127
    6. '(Have' → logprob: -16.129079818725586
    7. '(

' → logprob: -16.879079818725586
    8. '(s' → logprob: -17.754079818725586
    9. 'have' → logprob: -18.254079818725586
    10. ')' → logprob: -18.504079818725586

Token 71: 'ave' (ID: 577)
  Prédit: 'ave'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ave' → logprob: -0.0002787359117064625
    2. 'av' → logprob: -8.37527847290039
    3. 'have' → logprob: -10.37527847290039
    4. 'a' → logprob: -11.62527847290039
    5. 'ava' → logprob: -12.75027847290039
    6. ' ave' → logprob: -13.50027847290039
    7. '   ' → logprob: -13.62527847290039
    8. ')' → logprob: -14.00027847290039
    9. 'aving' → logprob: -15.12527847290039
    10. 'aves' → logprob: -15.75027847290039

Token 72: '))

' (ID: 9746)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -7.541112427134067e-05
    2. '))' → logprob: -9.500075340270996
    3. ' )' → logprob: -15.375075340270996
    4. ')`' → logprob: -15.750075340270996
    5. ')
' → logprob: -16.125076293945312
    6. ')))' → logprob: -16.500076293945312
    7. ')}' → logprob: -17.000076293945312
    8. '`)' → logprob: -17.750076293945312
    9. ')**' → logprob: -18.500076293945312
    10. ')")' → logprob: -18.625076293945312

Token 73: 'if' (ID: 366)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 74: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.01660609059035778
    2. '__' → logprob: -4.141605854034424
    3. '_' → logprob: -7.766605854034424
    4. ' ' → logprob: -8.891606330871582
    5. ' _' → logprob: -12.141606330871582
    6. ' ' → logprob: -13.141606330871582
    7. '___' → logprob: -14.641606330871582
    8. ' ' → logprob: -14.641606330871582
    9. ' ___' → logprob: -14.766606330871582
    10. ''' → logprob: -14.766606330871582

Token 75: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.017005112022161484
    2. ' __' → logprob: -4.14200496673584
    3. ' ==' → logprob: -7.64200496673584
    4. '_' → logprob: -7.76700496673584
    5. '__["' → logprob: -11.39200496673584
    6. '__.__' → logprob: -11.76700496673584
    7. ' ' → logprob: -11.76700496673584
    8. '==' → logprob: -12.01700496673584
    9. ' _' → logprob: -12.01700496673584
    10. '__[' → logprob: -12.01700496673584

Token 76: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -8.029847231227905e-05
    2. '_' → logprob: -9.750080108642578
    3. '__.__' → logprob: -11.625080108642578
    4. '___' → logprob: -12.000080108642578
    5. '==' → logprob: -12.375080108642578
    6. '____' → logprob: -13.875080108642578
    7. '__.' → logprob: -14.500080108642578
    8. '__["' → logprob: -15.250080108642578
    9. ' __' → logprob: -15.625080108642578
    10. ' ==' → logprob: -15.750080108642578

Token 77: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.09698430448770523
    2. '__' → logprob: -2.596984386444092
    3. '==' → logprob: -4.721984386444092
    4. '.' → logprob: -5.221984386444092
    5. ' .' → logprob: -6.596984386444092
    6. '.__' → logprob: -7.096984386444092
    7. '[' → logprob: -7.471984386444092
    8. '=="' → logprob: -8.596983909606934
    9. '__.__' → logprob: -8.846983909606934
    10. ' =="' → logprob: -9.471983909606934

Token 78: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.12694701552391052
    2. ''' → logprob: -2.1269469261169434
    3. ' "__' → logprob: -11.626947402954102
    4. '__' → logprob: -12.251947402954102
    5. ' "' → logprob: -12.751947402954102
    6. '"user' → logprob: -13.626947402954102
    7. ' '__' → logprob: -15.126947402954102
    8. ' '' → logprob: -15.251947402954102
    9. '"name' → logprob: -15.626947402954102
    10. ''s' → logprob: -16.7519474029541

Token 79: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.011154991574585438
    2. 'name' → logprob: -4.511155128479004
    3. '__' → logprob: -10.511155128479004
    4. 'm' → logprob: -11.136155128479004
    5. 'ma' → logprob: -11.261155128479004
    6. '   ' → logprob: -11.761155128479004
    7. 'built' → logprob: -11.761155128479004
    8. ' main' → logprob: -12.261155128479004
    9. '```' → logprob: -12.511155128479004
    10. '"' → logprob: -12.511155128479004

Token 80: '__":
' (ID: 49892)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.048915375024080276
    2. '__":
' → logprob: -3.048915386199951
    3. '__.' → logprob: -8.423914909362793
    4. '__:' → logprob: -9.673914909362793
    5. '.' → logprob: -10.798914909362793
    6. '__.__' → logprob: -12.048914909362793
    7. '__["' → logprob: -12.048914909362793
    8. '"' → logprob: -12.173914909362793
    9. '__':
' → logprob: -13.298914909362793
    10. '_' → logprob: -13.423914909362793

Token 81: '   ' (ID: 271)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.00019710339256562293
    2. 'main' → logprob: -9.250197410583496
    3. '	main' → logprob: -9.250197410583496
    4. ' ' → logprob: -13.000197410583496
    5. '(main' → logprob: -13.875197410583496
    6. ' ' → logprob: -14.000197410583496
    7. '   ' → logprob: -15.000197410583496
    8. '_main' → logprob: -15.625197410583496
    9. ' Main' → logprob: -16.75019645690918
    10. '.main' → logprob: -16.75019645690918

Token 82: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.4740792512893677
    2. 'main' (adapté à ' main') → logprob: -0.9740792512893677
    3. '	main' → logprob: -13.099079132080078
    4. '   ' → logprob: -16.349079132080078
    5. ' ' → logprob: -16.474079132080078
    6. ' ' → logprob: -18.849079132080078
    7. '.main' → logprob: -19.224079132080078
    8. '(main' → logprob: -19.349079132080078
    9. ' ma' → logprob: -19.599079132080078
    10. '_main' → logprob: -19.599079132080078

Token 83: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.007621533703058958
    2. '(' → logprob: -4.882621765136719
    3. '()
' → logprob: -12.132621765136719
    4. '()`' → logprob: -12.757621765136719
    5. '(
' → logprob: -13.257621765136719
    6. ' ()' → logprob: -13.757621765136719
    7. '`()' → logprob: -13.757621765136719
    8. '```' → logprob: -14.257621765136719
    9. '();' → logprob: -14.632621765136719
    10. '()

' → logprob: -15.382621765136719


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 81
Tokens correctement prédits (1ère position, stricte): 38
Tokens correctement prédits (1ère position, avec adaptation): 39
Tokens correctement prédits (top 10): 69
Précision stricte (1ère position): 46.91%
Précision adaptée (1ère position): 48.15%
Précision (top 10): 85.19%
================================================================================
