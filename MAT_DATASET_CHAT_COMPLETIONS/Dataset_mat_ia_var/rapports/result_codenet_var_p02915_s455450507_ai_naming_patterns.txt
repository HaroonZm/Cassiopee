================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:45:11
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
input_value = int(input())
output_value = input_value * input_value * input_value
print(output_value)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'input' (ID: 2586)
  → Token d'amorce (pas de prédiction)

Token 1: '_value' (ID: 6734)
  → Token d'amorce (pas de prédiction)

Token 2: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 3: ' int' (ID: 677)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.41097232699394226
    2. ' input' → logprob: -2.0359723567962646
    3. 'input' → logprob: -2.4109723567962646
    4. '"' → logprob: -2.4109723567962646
    5. ' "' → logprob: -4.6609721183776855
    6. '0' → logprob: -4.9109721183776855
    7. ''' → logprob: -5.2859721183776855
    8. ' '' → logprob: -6.7859721183776855
    9. ' a' → logprob: -7.7859721183776855
    10. '  ' → logprob: -8.160972595214844

Token 4: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004433916881680489
    2. '```' → logprob: -6.129434108734131
    3. ''' → logprob: -7.254434108734131
    4. '`' → logprob: -7.629434108734131
    5. '(input' → logprob: -8.129433631896973
    6. '('' → logprob: -8.129433631896973
    7. ')' → logprob: -9.004433631896973
    8. '[' → logprob: -9.879433631896973
    9. ' (' → logprob: -9.879433631896973
    10. '("("' → logprob: -10.629433631896973

Token 5: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.013299763202667236
    2. '(' → logprob: -4.763299942016602
    3. '())' → logprob: -5.513299942016602
    4. '()' → logprob: -8.138299942016602
    5. '))' → logprob: -9.013299942016602
    6. '")' → logprob: -9.638299942016602
    7. '')' → logprob: -10.138299942016602
    8. '`)' → logprob: -10.388299942016602
    9. '[' → logprob: -11.388299942016602
    10. ' )' → logprob: -11.513299942016602

Token 6: 'output' (ID: 6130)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.262643039226532
    2. '+' → logprob: -1.6376430988311768
    3. '*' → logprob: -4.137642860412598
    4. ' if' → logprob: -4.512642860412598
    5. '%' → logprob: -5.887642860412598
    6. '```' → logprob: -6.512642860412598
    7. '+
' → logprob: -6.762642860412598
    8. '**' → logprob: -6.762642860412598
    9. '#' → logprob: -7.137642860412598
    10. ')' → logprob: -8.137642860412598

Token 7: '_value' (ID: 6734)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.013817681930959225
    2. '+' → logprob: -5.26381778717041
    3. '*' → logprob: -6.51381778717041
    4. '()' → logprob: -6.51381778717041
    5. ')' → logprob: -6.88881778717041
    6. '```' → logprob: -6.88881778717041
    7. '\' → logprob: -7.01381778717041
    8. '(
' → logprob: -7.38881778717041
    9. '_' → logprob: -7.76381778717041
    10. '.' → logprob: -8.01381778717041

Token 8: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.25143536925315857
    2. ' =' → logprob: -2.1264352798461914
    3. '+' → logprob: -2.8764352798461914
    4. '(' → logprob: -4.251435279846191
    5. '```' → logprob: -4.501435279846191
    6. ')' → logprob: -4.751435279846191
    7. '*' → logprob: -5.376435279846191
    8. ' +=' → logprob: -6.001435279846191
    9. '+=' → logprob: -6.876435279846191
    10. '_' → logprob: -7.126435279846191

Token 9: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.04876233637332916
    2. 'input' → logprob: -3.048762321472168
    3. ' ' → logprob: -9.423762321472168
    4. '0' → logprob: -10.298762321472168
    5. '(input' → logprob: -11.298762321472168
    6. ' int' → logprob: -11.673762321472168
    7. ' output' → logprob: -11.923762321472168
    8. '2' → logprob: -12.298762321472168
    9. '1' → logprob: -12.423762321472168
    10. 'int' → logprob: -12.798762321472168

Token 10: '_value' (ID: 6734)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6202223300933838
    2. '_value' → logprob: -0.8702223300933838
    3. '_' → logprob: -3.745222330093384
    4. ')' → logprob: -4.620222091674805
    5. '```' → logprob: -5.870222091674805
    6. '('_' → logprob: -6.620222091674805
    7. '()' → logprob: -6.995222091674805
    8. '"' → logprob: -7.495222091674805
    9. 'Value' → logprob: -7.495222091674805
    10. '("_' → logprob: -7.620222091674805

Token 11: ' *' (ID: 425)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.13191194832324982
    2. '%' → logprob: -2.3819119930267334
    3. '*' → logprob: -3.8819119930267334
    4. ' +' → logprob: -5.631911754608154
    5. '**' → logprob: -5.631911754608154
    6. '```' → logprob: -7.006911754608154
    7. ')' → logprob: -7.381911754608154
    8. '<|end|>' → logprob: -7.631911754608154
    9. ' ' → logprob: -8.256912231445312
    10. ' %' → logprob: -8.381912231445312

Token 12: ' input' (ID: 3422)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.42917293310165405
    2. ' ' → logprob: -1.0541729927062988
    3. 'input' → logprob: -8.42917251586914
    4. ' input' → logprob: -9.42917251586914
    5. '10' → logprob: -9.42917251586914
    6. '4' → logprob: -10.17917251586914
    7. '3' → logprob: -10.92917251586914
    8. '1' → logprob: -11.55417251586914
    9. '100' → logprob: -11.67917251586914
    10. '5' → logprob: -11.80417251586914

Token 13: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.6896432638168335
    2. '()' → logprob: -1.4396432638168335
    3. '(' → logprob: -1.5646432638168335
    4. '_' → logprob: -3.439643383026123
    5. '```' → logprob: -4.814643383026123
    6. ')' → logprob: -5.314643383026123
    7. '_val' → logprob: -6.814643383026123
    8. '[' → logprob: -6.939643383026123
    9. 'Value' → logprob: -7.564643383026123
    10. '())' → logprob: -7.564643383026123

Token 14: ' *' (ID: 425)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.36190667748451233
    2. '
' → logprob: -2.1119067668914795
    3. '<|end|>' → logprob: -2.7369067668914795
    4. '#' → logprob: -3.7369067668914795
    5. '\' → logprob: -3.9869067668914795
    6. '*' → logprob: -3.9869067668914795
    7. 'newline' → logprob: -4.1119065284729
    8. '```' → logprob: -4.4869065284729
    9. ')' → logprob: -4.8619065284729
    10. '+' → logprob: -5.1119065284729

Token 15: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.03832455724477768
    2. ' input' → logprob: -3.2883245944976807
    3. '2' → logprob: -8.913324356079102
    4. ' ' → logprob: -9.538324356079102
    5. '4' → logprob: -10.538324356079102
    6. '3' → logprob: -11.038324356079102
    7. '10' → logprob: -11.913324356079102
    8. '_input' → logprob: -12.788324356079102
    9. '	input' → logprob: -12.788324356079102
    10. '(input' → logprob: -12.913324356079102

Token 16: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.001951945130713284
    2. '_' → logprob: -7.001952171325684
    3. '_val' → logprob: -7.376952171325684
    4. ')_' → logprob: -8.376952171325684
    5. '```' → logprob: -9.876952171325684
    6. ')' → logprob: -10.501952171325684
    7. ' _' → logprob: -10.876952171325684
    8. '_v' → logprob: -11.251952171325684
    9. '`' → logprob: -12.126952171325684
    10. '_Value' → logprob: -12.251952171325684

Token 17: '
' (ID: 198)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.2548973560333252
    2. '(' → logprob: -2.004897356033325
    3. '\' → logprob: -3.629897356033325
    4. ')' → logprob: -4.129897117614746
    5. '<|end|>' → logprob: -4.379897117614746
    6. '
' → logprob: -4.504897117614746
    7. '#' → logprob: -5.004897117614746
    8. '*' → logprob: -5.379897117614746
    9. '```' → logprob: -5.504897117614746
    10. 'newline' → logprob: -5.879897117614746

Token 18: 'print' (ID: 1598)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.0028783082962036
    2. '
' → logprob: -1.5028783082962036
    3. '(' → logprob: -2.002878189086914
    4. '<|end|>' → logprob: -2.127878189086914
    5. ')' → logprob: -3.377878189086914
    6. '#' → logprob: -4.002878189086914
    7. '*' → logprob: -4.002878189086914
    8. '\' → logprob: -4.002878189086914
    9. '```' → logprob: -4.127878189086914
    10. 'newline' → logprob: -4.502878189086914

Token 19: '(output' (ID: 22485)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0790463238954544
    2. '(output' → logprob: -2.5790462493896484
    3. '(input' → logprob: -9.079046249389648
    4. '("("' → logprob: -11.329046249389648
    5. ' (' → logprob: -11.829046249389648
    6. '(print' → logprob: -11.954046249389648
    7. '('' → logprob: -12.079046249389648
    8. '(open' → logprob: -12.329046249389648
    9. '(
' → logprob: -13.954046249389648
    10. '((' → logprob: -14.079046249389648

Token 20: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.007241460494697094
    2. ')_' → logprob: -5.757241249084473
    3. ')' → logprob: -6.382241249084473
    4. '_val' → logprob: -6.507241249084473
    5. '_)' → logprob: -7.507241249084473
    6. '_' → logprob: -8.257241249084473
    7. '_v' → logprob: -10.007241249084473
    8. '_va' → logprob: -11.882241249084473
    9. ')value' → logprob: -12.757241249084473
    10. 'value' → logprob: -13.382241249084473

Token 21: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.5048530030981055e-06
    2. '))' → logprob: -14.250001907348633
    3. '`)' → logprob: -15.000001907348633
    4. ' )' → logprob: -15.125001907348633
    5. '')' → logprob: -16.875001907348633
    6. '```' → logprob: -17.250001907348633
    7. ')`' → logprob: -17.250001907348633
    8. ')
' → logprob: -17.625001907348633
    9. '#' → logprob: -18.000001907348633
    10. '(' → logprob: -18.625001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 19
Tokens correctement prédits (1ère position, stricte): 5
Tokens correctement prédits (1ère position, avec adaptation): 5
Tokens correctement prédits (top 10): 12
Précision stricte (1ère position): 26.32%
Précision adaptée (1ère position): 26.32%
Précision (top 10): 63.16%
================================================================================
