================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:11:30
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n, k = map(int, input().split())

print((lambda x: int(bool(x)))(n % k))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' k' (ID: 372)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.023713937029242516
    2. ' =' → logprob: -4.398714065551758
    3. ',' → logprob: -4.523714065551758
    4. ' ' → logprob: -10.148714065551758
    5. '*' → logprob: -10.273714065551758
    6. '+' → logprob: -10.398714065551758
    7. ')' → logprob: -10.398714065551758
    8. '[' → logprob: -10.648714065551758
    9. '.' → logprob: -10.773714065551758
    10. '_' → logprob: -10.773714065551758

Token 4: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.06230287253856659
    2. ' map' → logprob: -3.812302827835083
    3. ' n' → logprob: -4.437303066253662
    4. '0' → logprob: -4.562303066253662
    5. ' input' → logprob: -4.937303066253662
    6. 'map' → logprob: -5.812303066253662
    7. 'input' → logprob: -6.062303066253662
    8. '10' → logprob: -6.187303066253662
    9. '1' → logprob: -7.937303066253662
    10. ' int' → logprob: -8.062302589416504

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0960182324051857
    2. '<|end|>' → logprob: -2.4710183143615723
    3. '```' → logprob: -6.096018314361572
    4. '<|end|>' → logprob: -6.346018314361572
    5. '(lambda' → logprob: -7.596018314361572
    6. ')' → logprob: -7.596018314361572
    7. '(user' → logprob: -7.846018314361572
    8. '(int' → logprob: -8.471017837524414
    9. 'user' → logprob: -8.846017837524414
    10. '[' → logprob: -9.221017837524414

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.03237122297286987
    2. ')' → logprob: -4.2823710441589355
    3. 'input' → logprob: -4.5323710441589355
    4. '(' → logprob: -5.0323710441589355
    5. ' input' → logprob: -8.407371520996094
    6. ',input' → logprob: -8.657371520996094
    7. '=input' → logprob: -9.657371520996094
    8. '(int' → logprob: -9.782371520996094
    9. '```' → logprob: -9.782371520996094
    10. '<input' → logprob: -9.907371520996094

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.5763772130012512
    2. ' input' → logprob: -0.8263772130012512
    3. '(input' → logprob: -7.8263773918151855
    4. ')' → logprob: -10.451376914978027
    5. ',input' → logprob: -12.201376914978027
    6. '=input' → logprob: -13.076376914978027
    7. '[input' → logprob: -14.576376914978027
    8. '<input' → logprob: -14.826376914978027
    9. '	input' → logprob: -15.326376914978027
    10. 'stdin' → logprob: -15.576376914978027

Token 8: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6027558445930481
    2. '('' → logprob: -1.7277557849884033
    3. '().' → logprob: -2.3527557849884033
    4. ')' → logprob: -2.7277557849884033
    5. '()' → logprob: -2.8527557849884033
    6. '())' → logprob: -3.4777557849884033
    7. '("("' → logprob: -5.477756023406982
    8. '(
' → logprob: -5.727756023406982
    9. '```' → logprob: -5.852756023406982
    10. '(""))' → logprob: -6.227756023406982

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0007220837287604809
    2. 'strip' → logprob: -7.2507219314575195
    3. 'rstrip' → logprob: -12.00072193145752
    4. ' split' → logprob: -12.62572193145752
    5. ')' → logprob: -13.62572193145752
    6. 'read' → logprob: -13.75072193145752
    7. '(split' → logprob: -15.00072193145752
    8. 'spl' → logprob: -15.87572193145752
    9. 'startswith' → logprob: -17.625722885131836
    10. 's' → logprob: -18.375722885131836

Token 10: '())

' (ID: 27654)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08872120827436447
    2. '())' → logprob: -2.96372127532959
    3. '))' → logprob: -3.46372127532959
    4. '()' → logprob: -6.46372127532959
    5. '()))' → logprob: -8.58872127532959
    6. '`)' → logprob: -9.21372127532959
    7. '(' → logprob: -9.83872127532959
    8. '>)' → logprob: -11.46372127532959
    9. ')`' → logprob: -11.58872127532959
    10. ')))' → logprob: -11.71372127532959

Token 11: 'print' (ID: 1598)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.8671724200248718
    2. 'a' → logprob: -0.9921724200248718
    3. 'for' → logprob: -1.9921724796295166
    4. 'd' → logprob: -3.9921724796295166
    5. 'x' → logprob: -4.1171722412109375
    6. 's' → logprob: -4.4921722412109375
    7. 'n' → logprob: -5.1171722412109375
    8. 'i' → logprob: -5.3671722412109375
    9. '#' → logprob: -6.4921722412109375
    10. 'result' → logprob: -6.6171722412109375

Token 12: '((' (ID: 2054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00028052396373823285
    2. '('' → logprob: -8.625280380249023
    3. '("("' → logprob: -9.250280380249023
    4. '()' → logprob: -13.625280380249023
    5. '((' → logprob: -13.875280380249023
    6. '(f' → logprob: -14.500280380249023
    7. '("""' → logprob: -14.500280380249023
    8. '(
' → logprob: -14.625280380249023
    9. '(

' → logprob: -15.750280380249023
    10. '(n' → logprob: -15.875280380249023

Token 13: 'lambda' (ID: 35280)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.010604890063405037
    2. 'k' → logprob: -5.1356048583984375
    3. '(n' → logprob: -6.2606048583984375
    4. 'min' → logprob: -7.2606048583984375
    5. ''n' → logprob: -7.6356048583984375
    6. ' n' → logprob: -7.7606048583984375
    7. 'pow' → logprob: -7.8856048583984375
    8. '(k' → logprob: -9.135604858398438
    9. ' (' → logprob: -9.260604858398438
    10. ')n' → logprob: -9.385604858398438

Token 14: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.6170713901519775
    2. ' n' → logprob: -1.4920713901519775
    3. 'x' → logprob: -1.7420713901519775
    4. 'n' → logprob: -3.3670713901519775
    5. ' lambda' → logprob: -4.742071151733398
    6. 'a' → logprob: -5.617071151733398
    7. 'lambda' → logprob: -5.742071151733398
    8. ' a' → logprob: -5.867071151733398
    9. ' i' → logprob: -6.117071151733398
    10. ' k' → logprob: -6.492071151733398

Token 15: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.04710165038704872
    2. ',' → logprob: -3.5471017360687256
    3. ' :' → logprob: -4.2971014976501465
    4. ' x' → logprob: -6.0471014976501465
    5. ':x' → logprob: -7.7971014976501465
    6. 'x' → logprob: -8.047101974487305
    7. ' n' → logprob: -9.172101974487305
    8. ' ,' → logprob: -9.422101974487305
    9. '=' → logprob: -10.422101974487305
    10. 'f' → logprob: -10.547101974487305

Token 16: ' int' (ID: 677)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.35928797721862793
    2. ' x' → logprob: -1.484287977218628
    3. 'k' → logprob: -3.609287977218628
    4. '(x' → logprob: -4.484288215637207
    5. ' (' → logprob: -4.859288215637207
    6. ' k' → logprob: -5.359288215637207
    7. 'n' → logprob: -5.359288215637207
    8. ' n' → logprob: -5.484288215637207
    9. 'sum' → logprob: -6.109288215637207
    10. '(k' → logprob: -6.359288215637207

Token 17: '(bool' (ID: 22323)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.2629026174545288
    2. '(' → logprob: -1.6379026174545288
    3. '((' → logprob: -4.637902736663818
    4. '(pow' → logprob: -5.262902736663818
    5. '(str' → logprob: -5.387902736663818
    6. '(bin' → logprob: -5.512902736663818
    7. '('' → logprob: -5.637902736663818
    8. '(abs' → logprob: -6.012902736663818
    9. '(bool' → logprob: -6.137902736663818
    10. '(n' → logprob: -6.637902736663818

Token 18: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.009600958786904812
    2. '(' → logprob: -5.38460111618042
    3. '((' → logprob: -6.00960111618042
    4. '(k' → logprob: -6.50960111618042
    5. '(n' → logprob: -7.00960111618042
    6. 'x' → logprob: -9.884600639343262
    7. '(((' → logprob: -10.634600639343262
    8. '(pow' → logprob: -11.759600639343262
    9. ' (' → logprob: -12.009600639343262
    10. '(a' → logprob: -12.134600639343262

Token 19: '))' (ID: 915)
  Prédit: '&'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '&' → logprob: -0.3028673827648163
    2. ' &' → logprob: -2.0528674125671387
    3. 'and' → logprob: -3.4278674125671387
    4. '%' → logprob: -3.4278674125671387
    5. ' and' → logprob: -3.5528674125671387
    6. '-k' → logprob: -3.8028674125671387
    7. '-' → logprob: -4.677867412567139
    8. '%n' → logprob: -6.302867412567139
    9. ' %' → logprob: -6.927867412567139
    10. ' -' → logprob: -7.177867412567139

Token 20: ')(' (ID: 4898)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.22984986007213593
    2. '(n' → logprob: -2.2298498153686523
    3. '(x' → logprob: -3.1048498153686523
    4. '(k' → logprob: -3.3548498153686523
    5. ')' → logprob: -4.979849815368652
    6. '))' → logprob: -6.104849815368652
    7. '(+' → logprob: -6.104849815368652
    8. '((' → logprob: -6.729849815368652
    9. '(
' → logprob: -6.854849815368652
    10. ')(' → logprob: -7.104849815368652

Token 21: 'n' (ID: 77)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.01904158666729927
    2. 'n' → logprob: -4.019041538238525
    3. ' k' → logprob: -7.269041538238525
    4. ' n' → logprob: -8.769042015075684
    5. '(n' → logprob: -11.019042015075684
    6. '(k' → logprob: -11.019042015075684
    7. ' ' → logprob: -12.769042015075684
    8. 'x' → logprob: -13.769042015075684
    9. '   ' → logprob: -14.019042015075684
    10. ')' → logprob: -15.144042015075684

Token 22: ' %' (ID: 1851)
  Prédit: '-k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-k' → logprob: -0.8549632430076599
    2. '-' → logprob: -1.6049633026123047
    3. '%' → logprob: -1.7299633026123047
    4. ' -' → logprob: -2.4799633026123047
    5. '>' → logprob: -3.1049633026123047
    6. ' ' → logprob: -3.8549633026123047
    7. ' %' → logprob: -3.9799633026123047
    8. ' >' → logprob: -4.729963302612305
    9. ')' → logprob: -4.979963302612305
    10. '>=' → logprob: -5.979963302612305

Token 23: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.0019377965945750475
    2. ' k' → logprob: -6.2519378662109375
    3. ' ' → logprob: -11.751937866210938
    4. '2' → logprob: -14.751937866210938
    5. '(k' → logprob: -16.001937866210938
    6. '  ' → logprob: -16.001937866210938
    7. '4' → logprob: -16.376937866210938
    8. '(' → logprob: -16.501937866210938
    9. ' (' → logprob: -16.501937866210938
    10. ')' → logprob: -16.626937866210938

Token 24: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.10065454244613647
    2. ')' → logprob: -2.3506546020507812
    3. ')))' → logprob: -7.725654602050781
    4. '))
' → logprob: -13.475654602050781
    5. ' ))' → logprob: -13.600654602050781
    6. ' ' → logprob: -13.725654602050781
    7. ' )' → logprob: -14.725654602050781
    8. '),' → logprob: -14.975654602050781
    9. ')>' → logprob: -15.100654602050781
    10. ')
' → logprob: -15.600654602050781


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 22
Tokens correctement prédits (1ère position, stricte): 5
Tokens correctement prédits (1ère position, avec adaptation): 5
Tokens correctement prédits (top 10): 16
Précision stricte (1ère position): 22.73%
Précision adaptée (1ère position): 22.73%
Précision (top 10): 72.73%
================================================================================
