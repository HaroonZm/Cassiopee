================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:08:14
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys

def input_line():
    return sys.stdin.readline().rstrip()

def input_int():
    return int(input_line())

def input_int_list():
    return [int(x) for x in input_line().split()]

def read_params():
    return input_int_list()

def read_aa():
    return input_int_list()

def sort_list(lst):
    lst.sort()
    return lst

def subtract_and_count(aa, x):
    c = 0
    for a in aa:
        x = subtract_x(x, a)
        if check_x_non_negative(x):
            c = increment_c(c)
    return c, x

def subtract_x(x, a):
    return x - a

def check_x_non_negative(x):
    return x >= 0

def increment_c(c):
    return c + 1

def decrement_c(c):
    return c - 1

def adjust_c(c, x):
    if x > 0:
        c = decrement_c(c)
    return c

def output_result(c):
    print(c)

def main():
    n, x = read_params()
    aa = read_aa()
    aa = sort_list(aa)
    c, x = subtract_and_count(aa, x)
    c = adjust_c(c, x)
    output_result(c)

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '

' (ID: 279)
  → Token d'amorce (pas de prédiction)

Token 3: 'def' (ID: 1314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.035847846418619156
    2. '\n' → logprob: -4.0358476638793945
    3. 'import' → logprob: -4.7858476638793945
    4. '<|end|>' → logprob: -5.2858476638793945
    5. '\' → logprob: -7.0358476638793945
    6. '<|end|>' → logprob: -7.5358476638793945
    7. 'newline' → logprob: -7.9108476638793945
    8. ',' → logprob: -8.160847663879395
    9. '[' → logprob: -8.285847663879395
    10. '' → logprob: -8.285847663879395

Token 4: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.02042287401854992
    2. ' ' → logprob: -5.39542293548584
    3. '  ' → logprob: -6.39542293548584
    4. '<|end|>' → logprob: -6.39542293548584
    5. ' process' → logprob: -6.52042293548584
    6. ' space' → logprob: -6.64542293548584
    7. ' sys' → logprob: -6.89542293548584
    8. ' main' → logprob: -6.89542293548584
    9. ' a' → logprob: -7.02042293548584
    10. ')' → logprob: -7.27042293548584

Token 5: '_line' (ID: 14418)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0010966418776661158
    2. '_' → logprob: -7.001096725463867
    3. ' (' → logprob: -10.001096725463867
    4. '("("' → logprob: -10.251096725463867
    5. '('' → logprob: -10.876096725463867
    6. '("' → logprob: -11.626096725463867
    7. 's' → logprob: -11.626096725463867
    8. ')' → logprob: -11.876096725463867
    9. '(
' → logprob: -12.251096725463867
    10. '()' → logprob: -12.501096725463867

Token 6: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.2866159677505493
    2. '(' → logprob: -1.4116159677505493
    3. '):' → logprob: -6.53661584854126
    4. 's' → logprob: -6.53661584854126
    5. '(:' → logprob: -7.28661584854126
    6. ':' → logprob: -7.41161584854126
    7. '(s' → logprob: -8.411616325378418
    8. ' ():' → logprob: -8.411616325378418
    9. '(":' → logprob: -8.536616325378418
    10. '()' → logprob: -9.036616325378418

Token 7: '   ' (ID: 271)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.4303275942802429
    2. '   ' → logprob: -1.1803276538848877
    3. 'return' → logprob: -3.4303276538848877
    4. '(' → logprob: -5.430327415466309
    5. ' ' → logprob: -5.805327415466309
    6. '    ' → logprob: -7.430327415466309
    7. '()' → logprob: -8.180327415466309
    8. ' (' → logprob: -8.555327415466309
    9. ' readline' → logprob: -8.680327415466309
    10. '  ' → logprob: -8.805327415466309

Token 8: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.15723200142383575
    2. ' return' → logprob: -2.1572320461273193
    3. '   ' → logprob: -3.5322320461273193
    4. ' ' → logprob: -8.282232284545898
    5. 'input' → logprob: -9.282232284545898
    6. 'r' → logprob: -9.532232284545898
    7. '    ' → logprob: -10.282232284545898
    8. 'ret' → logprob: -10.782232284545898
    9. '  ' → logprob: -11.032232284545898
    10. 's' → logprob: -11.157232284545898

Token 9: ' sys' (ID: 12228)
  Prédit: ' sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.010545210912823677
    2. ' input' → logprob: -5.260545253753662
    3. 'sys' → logprob: -5.635545253753662
    4. ' ' → logprob: -6.885545253753662
    5. 'input' → logprob: -7.260545253753662
    6. '(sys' → logprob: -13.885544776916504
    7. ' ' → logprob: -14.385544776916504
    8. '	sys' → logprob: -14.385544776916504
    9. '=sys' → logprob: -15.010544776916504
    10. '  ' → logprob: -15.385544776916504

Token 10: '.stdin' (ID: 93480)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.7021997570991516
    2. '.stdin' → logprob: -0.7021997570991516
    3. '.stdout' → logprob: -5.452199935913086
    4. '.readline' → logprob: -5.827199935913086
    5. '.argv' → logprob: -6.577199935913086
    6. '.input' → logprob: -9.202199935913086
    7. '.std' → logprob: -9.577199935913086
    8. '.exit' → logprob: -9.827199935913086
    9. ' .' → logprob: -9.827199935913086
    10. '.stderr' → logprob: -10.327199935913086

Token 11: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.0015931803500279784
    2. '.' → logprob: -6.501593112945557
    3. '.read' → logprob: -9.376593589782715
    4. '.readlines' → logprob: -12.126593589782715
    5. ' readline' → logprob: -15.251593589782715
    6. ' .' → logprob: -15.876593589782715
    7. '.Read' → logprob: -16.1265926361084
    8. '.write' → logprob: -16.3765926361084
    9. 'read' → logprob: -16.8765926361084
    10. '.buffer' → logprob: -17.8765926361084

Token 12: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00047392549458891153
    2. '().' → logprob: -7.875473976135254
    3. '()
' → logprob: -10.125473976135254
    4. ' ()' → logprob: -10.875473976135254
    5. '(' → logprob: -11.500473976135254
    6. '()(' → logprob: -11.500473976135254
    7. '()\' → logprob: -12.250473976135254
    8. '()

' → logprob: -12.875473976135254
    9. '())' → logprob: -13.500473976135254
    10. '`()' → logprob: -13.625473976135254

Token 13: 'rstrip' (ID: 180429)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.014165041036903858
    2. 'rstrip' → logprob: -4.264164924621582
    3. ' strip' → logprob: -14.639164924621582
    4. '```' → logprob: -15.014164924621582
    5. '_strip' → logprob: -15.264164924621582
    6. 'replace' → logprob: -15.389164924621582
    7. 'decode' → logprob: -15.514164924621582
    8. 'split' → logprob: -16.8891658782959
    9. '(strip' → logprob: -16.8891658782959
    10. 'str' → logprob: -17.0141658782959

Token 14: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.5782203674316406
    2. '(' → logprob: -0.8282203674316406
    3. '(\' → logprob: -7.078220367431641
    4. '(
' → logprob: -7.703220367431641
    5. '```' → logprob: -8.57822036743164
    6. '\n' → logprob: -9.07822036743164
    7. ''' → logprob: -9.20322036743164
    8. '()
' → logprob: -9.70322036743164
    9. '()\' → logprob: -9.82822036743164
    10. '\' → logprob: -9.82822036743164

Token 15: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5084267854690552
    2. '#' → logprob: -1.6334267854690552
    3. '(' → logprob: -3.0084266662597656
    4. '\n' → logprob: -3.2584266662597656
    5. '
' → logprob: -4.008426666259766
    6. '<|end|>' → logprob: -4.258426666259766
    7. '\' → logprob: -4.383426666259766
    8. 'x' → logprob: -4.508426666259766
    9. '()' → logprob: -4.508426666259766
    10. 'for' → logprob: -4.633426666259766

Token 16: ' input' (ID: 3422)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.08255273848772049
    2. ' input' → logprob: -3.457552671432495
    3. ' calculate' → logprob: -3.957552671432495
    4. ' process' → logprob: -5.082552909851074
    5. ' space' → logprob: -5.457552909851074
    6. ' my' → logprob: -6.082552909851074
    7. ' parse' → logprob: -6.332552909851074
    8. ' solve' → logprob: -6.332552909851074
    9. ' add' → logprob: -6.457552909851074
    10. ' user' → logprob: -6.582552909851074

Token 17: '_int' (ID: 12285)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.5898094177246094
    2. '_line' → logprob: -0.9648094177246094
    3. '_' → logprob: -2.8398094177246094
    4. '(' → logprob: -5.464809417724609
    5. '`()' → logprob: -7.464809417724609
    6. 'Line' → logprob: -8.71480941772461
    7. '_LINE' → logprob: -8.83980941772461
    8. 'line' → logprob: -9.08980941772461
    9. '_lines' → logprob: -9.33980941772461
    10. ']()' → logprob: -9.33980941772461

Token 18: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0338238887488842
    2. '()' → logprob: -3.4088239669799805
    3. '():
' → logprob: -9.90882396697998
    4. '(' → logprob: -10.40882396697998
    5. ' ():' → logprob: -10.40882396697998
    6. ' ()' → logprob: -10.65882396697998
    7. '()">' → logprob: -11.78382396697998
    8. '()>' → logprob: -11.90882396697998
    9. '()*' → logprob: -12.28382396697998
    10. '`()' → logprob: -12.40882396697998

Token 19: '   ' (ID: 271)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.6951892971992493
    2. ' ()' → logprob: -1.0701892375946045
    3. '   ' → logprob: -2.5701892375946045
    4. 'int' → logprob: -3.0701892375946045
    5. '(' → logprob: -4.945189476013184
    6. ' int' → logprob: -5.195189476013184
    7. ' return' → logprob: -5.320189476013184
    8. '(int' → logprob: -5.445189476013184
    9. ' (' → logprob: -5.695189476013184
    10. ' ' → logprob: -5.820189476013184

Token 20: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.01472444087266922
    2. 'return' (adapté à ' return') → logprob: -4.514724254608154
    3. '   ' → logprob: -6.014724254608154
    4. ' int' → logprob: -7.014724254608154
    5. 'int' → logprob: -8.389724731445312
    6. '    ' → logprob: -9.389724731445312
    7. ' ' → logprob: -11.389724731445312
    8. '  ' → logprob: -13.139724731445312
    9. '    
' → logprob: -13.264724731445312
    10. ' retur' → logprob: -14.264724731445312

Token 21: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.0019341122824698687
    2. 'int' → logprob: -6.251934051513672
    3. ' ' → logprob: -12.376934051513672
    4. '(int' → logprob: -14.001934051513672
    5. ' in' → logprob: -15.751934051513672
    6. '<int' → logprob: -16.751934051513672
    7. '	int' → logprob: -17.001934051513672
    8. '  ' → logprob: -17.126934051513672
    9. '[int' → logprob: -17.376934051513672
    10. '   ' → logprob: -17.626934051513672

Token 22: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.18022993206977844
    2. '(input' → logprob: -1.805229902267456
    3. '(sys' → logprob: -7.805230140686035
    4. 'input' → logprob: -10.555230140686035
    5. '(
' → logprob: -10.555230140686035
    6. ' (' → logprob: -12.180230140686035
    7. '(

' → logprob: -12.180230140686035
    8. '(s' → logprob: -12.680230140686035
    9. '()' → logprob: -13.430230140686035
    10. '('' → logprob: -13.555230140686035

Token 23: '_line' (ID: 14418)
  Prédit: '_line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_line' → logprob: -0.0001314295077463612
    2. '_' → logprob: -9.000131607055664
    3. '_LINE' → logprob: -12.375131607055664
    4. '()' → logprob: -12.875131607055664
    5. '_Line' → logprob: -14.375131607055664
    6. '_l' → logprob: -16.250131607055664
    7. '())' → logprob: -16.500131607055664
    8. 'Line' → logprob: -16.750131607055664
    9. 'line' → logprob: -16.750131607055664
    10. ')' → logprob: -17.125131607055664

Token 24: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0019408921943977475
    2. '()' → logprob: -6.251940727233887
    3. '())
' → logprob: -12.376940727233887
    4. ')' → logprob: -12.376940727233887
    5. '()))' → logprob: -13.251940727233887
    6. ' ())' → logprob: -13.501940727233887
    7. '()]' → logprob: -15.751940727233887
    8. '();)' → logprob: -15.876940727233887
    9. '()
' → logprob: -16.126941680908203
    10. '())

' → logprob: -16.501941680908203

Token 25: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.005691519007086754
    2. '\' → logprob: -6.2556915283203125
    3. '

' → logprob: -7.0056915283203125
    4. '#' → logprob: -7.2556915283203125
    5. '```' → logprob: -7.7556915283203125
    6. '\n' → logprob: -7.8806915283203125
    7. 'n' → logprob: -8.005691528320312
    8. 'class' → logprob: -8.255691528320312
    9. '
' → logprob: -8.505691528320312
    10. '<|end|>' → logprob: -8.630691528320312

Token 26: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.06242741271853447
    2. 'input' → logprob: -2.812427520751953
    3. '_input' → logprob: -8.062427520751953
    4. '_' → logprob: -9.937427520751953
    5. ' main' → logprob: -9.937427520751953
    6. ' ' → logprob: -10.687427520751953
    7. ' output' → logprob: -11.562427520751953
    8. 'output' → logprob: -12.437427520751953
    9. '(input' → logprob: -12.562427520751953
    10. 'main' → logprob: -13.562427520751953

Token 27: '_int' (ID: 12285)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.7043676972389221
    2. '_list' → logprob: -1.3293676376342773
    3. '_line' → logprob: -1.5793676376342773
    4. '_array' → logprob: -4.204367637634277
    5. '_str' → logprob: -4.329367637634277
    6. '()' → logprob: -6.579367637634277
    7. '_tuple' → logprob: -6.704367637634277
    8. '_int' → logprob: -6.954367637634277
    9. '_s' → logprob: -7.329367637634277
    10. '_string' → logprob: -7.454367637634277

Token 28: '_list' (ID: 4162)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.02305503748357296
    2. '()' → logprob: -4.648055076599121
    3. '_list' → logprob: -4.773055076599121
    4. '_array' → logprob: -5.398055076599121
    5. '_line' → logprob: -9.148055076599121
    6. '_s' → logprob: -9.523055076599121
    7. '_' → logprob: -11.523055076599121
    8. 'array' → logprob: -11.648055076599121
    9. 'list' → logprob: -11.898055076599121
    10. '_vec' → logprob: -12.523055076599121

Token 29: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0019562290981411934
    2. '()' → logprob: -6.251956462860107
    3. '()">' → logprob: -12.37695598602295
    4. '()>' → logprob: -12.50195598602295
    5. '():
' → logprob: -12.62695598602295
    6. ' ():' → logprob: -12.87695598602295
    7. '()*' → logprob: -13.00195598602295
    8. ' ()' → logprob: -13.12695598602295
    9. '`()' → logprob: -13.25195598602295
    10. '(' → logprob: -13.75195598602295

Token 30: '   ' (ID: 271)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.5764606595039368
    2. '()' → logprob: -0.8264606595039368
    3. ' ()' → logprob: -8.451460838317871
    4. '():
' → logprob: -8.576460838317871
    5. '()[' → logprob: -10.201460838317871
    6. '(' → logprob: -10.576460838317871
    7. ' ():' → logprob: -11.451460838317871
    8. '().' → logprob: -11.701460838317871
    9. '   ' → logprob: -12.201460838317871
    10. 'return' → logprob: -12.326460838317871

Token 31: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.6693361401557922
    2. ' return' → logprob: -0.9193361401557922
    3. '   ' → logprob: -2.4193360805511475
    4. ' ' → logprob: -8.919336318969727
    5. 'list' → logprob: -11.044336318969727
    6. '  ' → logprob: -11.044336318969727
    7. ' list' → logprob: -11.794336318969727
    8. '    ' → logprob: -12.419336318969727
    9. '	return' → logprob: -12.794336318969727
    10. '[]' → logprob: -13.669336318969727

Token 32: ' [' (ID: 723)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.3872620165348053
    2. 'list' → logprob: -1.137261986732483
    3. '[list' → logprob: -7.887261867523193
    4. '[' → logprob: -11.637262344360352
    5. ' [' → logprob: -12.262262344360352
    6. '(list' → logprob: -14.262262344360352
    7. ' ' → logprob: -14.637262344360352
    8. '	list' → logprob: -15.137262344360352
    9. '[input' → logprob: -15.762262344360352
    10. '[int' → logprob: -16.26226234436035

Token 33: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -1.5048530030981055e-06
    2. ' int' → logprob: -14.000001907348633
    3. 'map' → logprob: -14.500001907348633
    4. '(int' → logprob: -18.250001907348633
    5. '   ' → logprob: -18.375001907348633
    6. ']int' → logprob: -18.500001907348633
    7. '0' → logprob: -19.125001907348633
    8. ' ' → logprob: -19.125001907348633
    9. '  ' → logprob: -19.125001907348633
    10. '	int' → logprob: -19.375001907348633

Token 34: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.029927168041467667
    2. '(i' → logprob: -3.5299272537231445
    3. '(s' → logprob: -8.904927253723145
    4. '(' → logprob: -11.029927253723145
    5. ']' → logprob: -11.529927253723145
    6. '(token' → logprob: -12.529927253723145
    7. '(e' → logprob: -13.404927253723145
    8. '(ii' → logprob: -13.529927253723145
    9. '](' → logprob: -13.654927253723145
    10. '(v' → logprob: -13.654927253723145

Token 35: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.005579029209911823
    2. 'for' → logprob: -5.255578994750977
    3. ' for' → logprob: -8.130578994750977
    4. '(x' → logprob: -10.630578994750977
    5. ' )' → logprob: -11.005578994750977
    6. '()' → logprob: -12.255578994750977
    7. ' ' → logprob: -13.380578994750977
    8. 'in' → logprob: -14.505578994750977
    9. '   ' → logprob: -14.630578994750977
    10. '(' → logprob: -14.630578994750977

Token 36: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.38700810074806213
    2. 'for' → logprob: -1.1370080709457397
    3. ')' → logprob: -9.512007713317871
    4. '(x' → logprob: -10.137007713317871
    5. ' in' → logprob: -11.887007713317871
    6. ' ' → logprob: -11.887007713317871
    7. 'x' → logprob: -12.762007713317871
    8. '(' → logprob: -13.512007713317871
    9. '	for' → logprob: -13.887007713317871
    10. '   ' → logprob: -14.262007713317871

Token 37: ' x' (ID: 1215)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.3264143168926239
    2. 'input' → logprob: -1.3264143466949463
    3. ' x' → logprob: -4.576414108276367
    4. 'x' → logprob: -6.076414108276367
    5. ' ' → logprob: -7.826414108276367
    6. '<|end|>' → logprob: -10.826414108276367
    7. '  ' → logprob: -11.201414108276367
    8. '_input' → logprob: -11.326414108276367
    9. '<|end|>' → logprob: -11.951414108276367
    10. '(input' → logprob: -12.076414108276367

Token 38: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.08281844109296799
    2. '(' → logprob: -3.2078185081481934
    3. 'in' → logprob: -3.7078185081481934
    4. '_' → logprob: -4.457818508148193
    5. ' ' → logprob: -6.582818508148193
    6. ')' → logprob: -7.957818508148193
    7. 'import' → logprob: -8.207818031311035
    8. '(x' → logprob: -8.332818031311035
    9. 'input' → logprob: -9.207818031311035
    10. '()' → logprob: -9.332818031311035

Token 39: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.20142687857151031
    2. ' input' → logprob: -1.7014268636703491
    3. '(input' → logprob: -11.82642650604248
    4. 'sys' → logprob: -12.70142650604248
    5. ' sys' → logprob: -13.20142650604248
    6. ' ' → logprob: -14.82642650604248
    7. '	input' → logprob: -15.57642650604248
    8. '_input' → logprob: -15.82642650604248
    9. '=input' → logprob: -15.82642650604248
    10. '<input' → logprob: -15.95142650604248

Token 40: '_line' (ID: 14418)
  Prédit: '_line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_line' → logprob: -0.00020985817536711693
    2. '_' → logprob: -8.50020980834961
    3. '_LINE' → logprob: -13.62520980834961
    4. '_Line' → logprob: -13.62520980834961
    5. '_lin' → logprob: -14.12520980834961
    6. '_list' → logprob: -14.25020980834961
    7. '_int' → logprob: -14.50020980834961
    8. '_char' → logprob: -14.62520980834961
    9. '_str' → logprob: -15.00020980834961
    10. '(' → logprob: -15.62520980834961

Token 41: '().' (ID: 1454)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.2024199217557907
    2. '()' → logprob: -1.7024198770523071
    3. '())' → logprob: -7.202419757843018
    4. '().' → logprob: -8.452420234680176
    5. '()][' → logprob: -11.202420234680176
    6. ' ()' → logprob: -11.577420234680176
    7. '()].' → logprob: -12.077420234680176
    8. '()`' → logprob: -12.702420234680176
    9. ']()' → logprob: -12.827420234680176
    10. '(' → logprob: -13.077420234680176

Token 42: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00012773419439326972
    2. 'strip' → logprob: -9.000127792358398
    3. 'rstrip' → logprob: -12.875127792358398
    4. ' split' → logprob: -13.625127792358398
    5. 'spl' → logprob: -15.000127792358398
    6. '(split' → logprob: -16.0001277923584
    7. 's' → logprob: -16.8751277923584
    8. ')' → logprob: -18.0001277923584
    9. '```' → logprob: -19.2501277923584
    10. '.split' → logprob: -19.3751277923584

Token 43: '()' (ID: 416)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.0020917344372719526
    2. '()' → logprob: -6.502091884613037
    3. '())' → logprob: -7.502091884613037
    4. '(' → logprob: -10.377091407775879
    5. ')]' → logprob: -13.377091407775879
    6. '()]
' → logprob: -13.502091407775879
    7. ']' → logprob: -13.752091407775879
    8. ']()' → logprob: -13.877091407775879
    9. '()`' → logprob: -15.377091407775879
    10. '()}' → logprob: -15.502091407775879

Token 44: ']

' (ID: 3144)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.22583013772964478
    2. '()]' → logprob: -1.725830078125
    3. ')]' → logprob: -3.725830078125
    4. ' ]' → logprob: -11.850830078125
    5. ']()' → logprob: -11.850830078125
    6. '`]' → logprob: -12.475830078125
    7. '()' → logprob: -12.975830078125
    8. '])' → logprob: -13.100830078125
    9. ')' → logprob: -13.600830078125
    10. '(' → logprob: -13.600830078125

Token 45: 'def' (ID: 1314)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.40688687562942505
    2. 'd' → logprob: -1.1568868160247803
    3. 'a' → logprob: -4.781887054443359
    4. '\' → logprob: -5.156887054443359
    5. 'def' → logprob: -6.156887054443359
    6. '#' → logprob: -6.156887054443359
    7. '\n' → logprob: -7.531887054443359
    8. 'b' → logprob: -8.90688705444336
    9. '```' → logprob: -9.28188705444336
    10. 'N' → logprob: -9.28188705444336

Token 46: ' read' (ID: 1729)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.048029880970716476
    2. ' main' → logprob: -3.298029899597168
    3. 'input' → logprob: -5.548029899597168
    4. ' space' → logprob: -6.548029899597168
    5. ' output' → logprob: -6.673029899597168
    6. ' solve' → logprob: -7.423029899597168
    7. ' ' → logprob: -7.548029899597168
    8. '_' → logprob: -7.923029899597168
    9. ' binary' → logprob: -8.298029899597168
    10. ' solution' → logprob: -8.423029899597168

Token 47: '_params' (ID: 14956)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.11598168313503265
    2. '_line' → logprob: -2.6159815788269043
    3. '_input' → logprob: -4.365981578826904
    4. '_data' → logprob: -5.240981578826904
    5. '()' → logprob: -5.365981578826904
    6. '_file' → logprob: -6.115981578826904
    7. ' _' → logprob: -6.365981578826904
    8. '_list' → logprob: -6.990981578826904
    9. '_string' → logprob: -6.990981578826904
    10. '_lines' → logprob: -6.990981578826904

Token 48: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.015786465257406235
    2. '()' → logprob: -4.765786647796631
    3. '(' → logprob: -5.015786647796631
    4. '`()' → logprob: -9.390786170959473
    5. '```' → logprob: -9.515786170959473
    6. '_' → logprob: -9.765786170959473
    7. '():
' → logprob: -9.890786170959473
    8. '()(' → logprob: -9.890786170959473
    9. '_line' → logprob: -10.515786170959473
    10. ' ():' → logprob: -10.765786170959473

Token 49: '   ' (ID: 271)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.36844220757484436
    2. '()' → logprob: -1.493442177772522
    3. '(' → logprob: -3.1184422969818115
    4. '   ' → logprob: -3.3684422969818115
    5. ':' → logprob: -6.618442058563232
    6. '():
' → logprob: -6.743442058563232
    7. '(
' → logprob: -6.993442058563232
    8. '()
' → logprob: -8.24344253540039
    9. ' ()' → logprob: -8.36844253540039
    10. '    ' → logprob: -9.11844253540039

Token 50: ' return' (ID: 622)
  Prédit: 'params'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'params' → logprob: -1.0595214366912842
    2. '   ' → logprob: -1.1845214366912842
    3. ' return' → logprob: -2.059521436691284
    4. 'return' (adapté à ' return') → logprob: -2.184521436691284
    5. ' params' → logprob: -2.809521436691284
    6. '(' → logprob: -4.684521675109863
    7. 'param' → logprob: -5.059521675109863
    8. ' ' → logprob: -5.309521675109863
    9. '    ' → logprob: -5.309521675109863
    10. 'n' → logprob: -5.309521675109863

Token 51: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.5982896685600281
    2. ' input' → logprob: -0.8482896685600281
    3. '()' → logprob: -5.848289489746094
    4. '[]' → logprob: -6.098289489746094
    5. '(input' → logprob: -6.098289489746094
    6. ' ' → logprob: -6.223289489746094
    7. ' ()' → logprob: -6.223289489746094
    8. 'tuple' → logprob: -6.348289489746094
    9. ' []' → logprob: -6.473289489746094
    10. 'int' → logprob: -6.473289489746094

Token 52: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.394914835691452
    2. '_line' → logprob: -1.6449148654937744
    3. '_' → logprob: -2.0199148654937744
    4. '_space' → logprob: -9.144914627075195
    5. 'int' → logprob: -9.519914627075195
    6. ' _' → logprob: -9.894914627075195
    7. '_str' → logprob: -9.894914627075195
    8. '_uint' → logprob: -10.269914627075195
    9. '(' → logprob: -10.519914627075195
    10. '_in' → logprob: -11.144914627075195

Token 53: '_list' (ID: 4162)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.008945681154727936
    2. '_' → logprob: -5.633945465087891
    3. '_list' → logprob: -5.633945465087891
    4. '(' → logprob: -7.383945465087891
    5. '_line' → logprob: -7.508945465087891
    6. 's' → logprob: -8.75894546508789
    7. '`()' → logprob: -8.75894546508789
    8. ' ()' → logprob: -10.00894546508789
    9. '()(' → logprob: -10.25894546508789
    10. '```' → logprob: -10.50894546508789

Token 54: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -3.0590548703912646e-05
    2. '(' → logprob: -10.750030517578125
    3. '()(' → logprob: -12.250030517578125
    4. '()
' → logprob: -14.125030517578125
    5. ' ()' → logprob: -14.125030517578125
    6. '()`' → logprob: -14.375030517578125
    7. '()

' → logprob: -14.625030517578125
    8. '()<' → logprob: -15.000030517578125
    9. '();' → logprob: -15.125030517578125
    10. '().' → logprob: -15.250030517578125

Token 55: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.2152743637561798
    2. 'n' → logprob: -2.5902743339538574
    3. '(' → logprob: -2.9652743339538574
    4. '#' → logprob: -3.9652743339538574
    5. 'data' → logprob: -5.090274333953857
    6. 'if' → logprob: -5.090274333953857
    7. 'a' → logprob: -5.090274333953857
    8. '(n' → logprob: -5.090274333953857
    9. 'd' → logprob: -5.215274333953857
    10. '()' → logprob: -5.465274333953857

Token 56: ' read' (ID: 1729)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.0993892103433609
    2. ' solve' → logprob: -2.8493893146514893
    3. ' calculate' → logprob: -4.47438907623291
    4. ' read' → logprob: -4.84938907623291
    5. ' input' → logprob: -5.34938907623291
    6. ' process' → logprob: -5.59938907623291
    7. ' write' → logprob: -6.59938907623291
    8. ' space' → logprob: -6.72438907623291
    9. ' run' → logprob: -6.72438907623291
    10. ' compute' → logprob: -7.34938907623291

Token 57: '_' (ID: 62)
  Prédit: '_line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_line' → logprob: -0.810872495174408
    2. '_params' → logprob: -1.0608725547790527
    3. '_' → logprob: -2.5608725547790527
    4. '_int' → logprob: -2.8108725547790527
    5. '_list' → logprob: -3.9358725547790527
    6. '_input' → logprob: -4.310872554779053
    7. '_param' → logprob: -4.560872554779053
    8. '_string' → logprob: -4.935872554779053
    9. '_parameters' → logprob: -5.685872554779053
    10. '_array' → logprob: -5.935872554779053

Token 58: 'aa' (ID: 3545)
  Prédit: 'params'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'params' → logprob: -0.12216036766767502
    2. 'int' → logprob: -2.4971604347229004
    3. 'string' → logprob: -4.7471604347229
    4. 'line' → logprob: -5.1221604347229
    5. 'matrix' → logprob: -5.2471604347229
    6. 'ints' → logprob: -6.3721604347229
    7. 'input' → logprob: -6.3721604347229
    8. 'grid' → logprob: -6.6221604347229
    9. 'array' → logprob: -6.9971604347229
    10. 'list' → logprob: -7.1221604347229

Token 59: '():
' (ID: 8595)
  Prédit: 'rr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'rr' → logprob: -1.3563354015350342
    2. '_params' → logprob: -1.8563354015350342
    3. 'a' → logprob: -2.356335401535034
    4. '()' → logprob: -2.731335401535034
    5. 'params' → logprob: -2.981335401535034
    6. '_list' → logprob: -3.106335401535034
    7. 'l' → logprob: -3.231335401535034
    8. 'b' → logprob: -3.356335401535034
    9. 'r' → logprob: -3.731335401535034
    10. '_' → logprob: -3.856335401535034

Token 60: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08072084933519363
    2. '()' → logprob: -2.580720901489258
    3. ' ()' → logprob: -7.455720901489258
    4. '[]' → logprob: -7.955720901489258
    5. '():' → logprob: -8.205720901489258
    6. '()
' → logprob: -9.080720901489258
    7. ' []' → logprob: -9.205720901489258
    8. '(' → logprob: -9.205720901489258
    9. ' return' → logprob: -9.705720901489258
    10. 'return' → logprob: -9.705720901489258

Token 61: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.634266197681427
    2. '   ' → logprob: -1.0092661380767822
    3. ' return' → logprob: -2.2592661380767822
    4. '[]' → logprob: -7.884266376495361
    5. ' ' → logprob: -9.384265899658203
    6. '[' → logprob: -9.509265899658203
    7. 'def' → logprob: -9.884265899658203
    8. 'eturn' → logprob: -10.759265899658203
    9. '[
' → logprob: -10.884265899658203
    10. '[]
' → logprob: -10.884265899658203

Token 62: ' input' (ID: 3422)
  Prédit: '[input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[input' → logprob: -0.3363972306251526
    2. '[int' → logprob: -1.7113971710205078
    3. 'input' → logprob: -2.586397171020508
    4. ' [' → logprob: -4.336397171020508
    5. ' input' → logprob: -5.086397171020508
    6. '[' → logprob: -5.336397171020508
    7. 'int' → logprob: -5.461397171020508
    8. '[]' → logprob: -8.086397171020508
    9. ' int' → logprob: -8.711397171020508
    10. '[str' → logprob: -8.836397171020508

Token 63: '_int' (ID: 12285)
  Prédit: '_line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_line' → logprob: -0.022506078705191612
    2. '_' → logprob: -4.022506237030029
    3. '_int' → logprob: -6.397506237030029
    4. '()' → logprob: -6.397506237030029
    5. '_list' → logprob: -7.272506237030029
    6. '(' → logprob: -8.772505760192871
    7. '_str' → logprob: -10.522505760192871
    8. '_lines' → logprob: -10.522505760192871
    9. '_char' → logprob: -11.522505760192871
    10. 'int' → logprob: -11.647505760192871

Token 64: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -0.09035810083150864
    2. '()' → logprob: -2.465358018875122
    3. '_line' → logprob: -6.840358257293701
    4. '_' → logprob: -8.340357780456543
    5. 'List' → logprob: -10.090357780456543
    6. 'list' → logprob: -10.215357780456543
    7. '_l' → logprob: -11.715357780456543
    8. '```' → logprob: -12.590357780456543
    9. '`()' → logprob: -12.840357780456543
    10. '()
' → logprob: -12.840357780456543

Token 65: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -8.65707261255011e-06
    2. '(' → logprob: -13.000008583068848
    3. '()
' → logprob: -13.625008583068848
    4. '()<' → logprob: -14.125008583068848
    5. '()]' → logprob: -14.125008583068848
    6. '`()' → logprob: -14.250008583068848
    7. ' ()' → logprob: -14.375008583068848
    8. '()`' → logprob: -14.500008583068848
    9. '()(' → logprob: -15.000008583068848
    10. '()

' → logprob: -15.000008583068848

Token 66: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0011743901995941997
    2. '<|end|>' → logprob: -7.751174449920654
    3. '\' → logprob: -8.001173973083496
    4. '#' → logprob: -8.251173973083496
    5. '```' → logprob: -9.751173973083496
    6. 'class' → logprob: -10.251173973083496
    7. '[' → logprob: -11.751173973083496
    8. 'd' → logprob: -11.751173973083496
    9. '\n' → logprob: -11.876173973083496
    10. 'n' → logprob: -12.126173973083496

Token 67: ' sort' (ID: 4506)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.6919383406639099
    2. ' solve' → logprob: -0.8169383406639099
    3. ' def' → logprob: -3.3169384002685547
    4. ' read' → logprob: -4.816938400268555
    5. '_' → logprob: -5.691938400268555
    6. ' calculate' → logprob: -6.316938400268555
    7. ' find' → logprob: -6.566938400268555
    8. 'solve' → logprob: -6.816938400268555
    9. ' write' → logprob: -6.941938400268555
    10. ' process' → logprob: -7.191938400268555

Token 68: '_list' (ID: 4162)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.2965526878833771
    2. '(' → logprob: -1.4215526580810547
    3. '_(' → logprob: -5.046552658081055
    4. 'ed' → logprob: -5.421552658081055
    5. '(_)' → logprob: -6.796552658081055
    6. '_list' → logprob: -7.171552658081055
    7. '(_' → logprob: -7.421552658081055
    8. '_a' → logprob: -8.421552658081055
    9. '```' → logprob: -8.546552658081055
    10. '_items' → logprob: -8.921552658081055

Token 69: '(lst' (ID: 95688)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003061015158891678
    2. '_' → logprob: -7.003060817718506
    3. '()' → logprob: -7.128060817718506
    4. '(_' → logprob: -8.128061294555664
    5. 's' → logprob: -8.253061294555664
    6. '_list' → logprob: -9.253061294555664
    7. '(_)' → logprob: -9.253061294555664
    8. '("("' → logprob: -9.378061294555664
    9. '(()' → logprob: -9.628061294555664
    10. '_by' → logprob: -10.128061294555664

Token 70: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0070971776731312275
    2. ')' → logprob: -5.132097244262695
    3. ',' → logprob: -7.257097244262695
    4. '(' → logprob: -8.632097244262695
    5. '(lst' → logprob: -9.507097244262695
    6. '):
' → logprob: -9.632097244262695
    7. ' ):' → logprob: -10.257097244262695
    8. '   ' → logprob: -10.882097244262695
    9. '[]):' → logprob: -11.132097244262695
    10. ':' → logprob: -11.132097244262695

Token 71: '   ' (ID: 271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4156826138496399
    2. '(lst' → logprob: -1.1656825542449951
    3. '(
' → logprob: -4.165682792663574
    4. '   ' → logprob: -5.415682792663574
    5. 'lst' → logprob: -5.415682792663574
    6. '(sorted' → logprob: -6.415682792663574
    7. 'sorted' → logprob: -7.290682792663574
    8. '[:]' → logprob: -8.290682792663574
    9. ':' → logprob: -8.540682792663574
    10. '(ls' → logprob: -8.665682792663574

Token 72: ' lst' (ID: 33384)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.9296807050704956
    2. 'return' → logprob: -1.1796807050704956
    3. '   ' → logprob: -1.6796807050704956
    4. 'lst' (adapté à ' lst') → logprob: -2.679680824279785
    5. ' lst' → logprob: -3.179680824279785
    6. '    
' → logprob: -7.304680824279785
    7. '```' → logprob: -8.429680824279785
    8. 'sorted' → logprob: -9.304680824279785
    9. ' 
' → logprob: -9.804680824279785
    10. '    ' → logprob: -9.929680824279785

Token 73: '.sort' (ID: 19551)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.12693965435028076
    2. '.sort' → logprob: -2.1269397735595703
    3. '.s' → logprob: -11.87693977355957
    4. '.=' → logprob: -13.50193977355957
    5. '.append' → logprob: -14.75193977355957
    6. '.Sort' → logprob: -15.00193977355957
    7. ' .' → logprob: -15.12693977355957
    8. '.)' → logprob: -15.12693977355957
    9. '.extend' → logprob: -15.25193977355957
    10. '[:]' → logprob: -15.25193977355957

Token 74: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.1798337697982788
    2. '(' → logprob: -1.8048337697982788
    3. '(()' → logprob: -10.30483341217041
    4. '().' → logprob: -11.30483341217041
    5. '()
' → logprob: -12.17983341217041
    6. '("("' → logprob: -12.42983341217041
    7. '(

' → logprob: -12.55483341217041
    8. '(
' → logprob: -12.55483341217041
    9. '()`' → logprob: -12.67983341217041
    10. '`()' → logprob: -13.05483341217041

Token 75: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 76: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.11183686554431915
    2. '<|end|>' → logprob: -2.8618369102478027
    3. ' return' → logprob: -4.111836910247803
    4. '   ' → logprob: -4.111836910247803
    5. ' ' → logprob: -4.611836910247803
    6. '
' → logprob: -5.736836910247803
    7. 'def' → logprob: -7.111836910247803
    8. '    
' → logprob: -7.861836910247803
    9. '	return' → logprob: -8.111836433410645
    10. 'eturn' → logprob: -8.111836433410645

Token 77: ' lst' (ID: 33384)
  Prédit: ' lst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lst' → logprob: -0.4741022288799286
    2. 'lst' → logprob: -0.974102258682251
    3. '(lst' → logprob: -11.224102020263672
    4. ' ' → logprob: -11.849102020263672
    5. ' None' → logprob: -12.849102020263672
    6. 'None' → logprob: -14.599102020263672
    7. 'list' → logprob: -14.599102020263672
    8. '_lst' → logprob: -14.724102020263672
    9. ' ' → logprob: -15.724102020263672
    10. '.lst' → logprob: -15.849102020263672

Token 78: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 79: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.135870099067688
    2. '<|end|>' → logprob: -2.5108699798583984
    3. '
' → logprob: -3.2608699798583984
    4. '

' → logprob: -5.385869979858398
    5. '[' → logprob: -6.635869979858398
    6. '#' → logprob: -8.135869979858398
    7. '\' → logprob: -8.260869979858398
    8. '\n' → logprob: -8.510869979858398
    9. '<|end|>' → logprob: -8.760869979858398
    10. '```' → logprob: -8.885869979858398

Token 80: ' subtract' (ID: 71973)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.6960471272468567
    2. ' sort' → logprob: -1.571047067642212
    3. ' sorted' → logprob: -2.321047067642212
    4. ' reverse' → logprob: -2.446047067642212
    5. ' merge' → logprob: -2.946047067642212
    6. ' sum' → logprob: -3.821047067642212
    7. ' binary' → logprob: -4.696047306060791
    8. ' max' → logprob: -5.321047306060791
    9. ' find' → logprob: -5.946047306060791
    10. ' solve' → logprob: -6.071047306060791

Token 81: '_and' (ID: 18645)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.27962419390678406
    2. '(a' → logprob: -2.0296242237091064
    3. '_' → logprob: -2.5296242237091064
    4. ' (' → logprob: -3.9046242237091064
    5. '_lists' → logprob: -5.404623985290527
    6. '(lst' → logprob: -6.154623985290527
    7. '_list' → logprob: -6.404623985290527
    8. '(_' → logprob: -6.654623985290527
    9. '_(' → logprob: -7.404623985290527
    10. '_items' → logprob: -7.904623985290527

Token 82: '_count' (ID: 7536)
  Prédit: '_sort'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_sort' → logprob: -0.5988829731941223
    2. '_return' → logprob: -1.7238829135894775
    3. '_sum' → logprob: -2.7238829135894775
    4. '_filter' → logprob: -3.0988829135894775
    5. '_pop' → logprob: -3.2238829135894775
    6. 'sort' → logprob: -3.8488829135894775
    7. '_append' → logprob: -3.9738829135894775
    8. '_print' → logprob: -4.098883152008057
    9. '_remove' → logprob: -4.723883152008057
    10. '_reverse' → logprob: -4.973883152008057

Token 83: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.35252323746681213
    2. '(lst' → logprob: -1.2275232076644897
    3. '(a' → logprob: -6.977523326873779
    4. '(nums' → logprob: -7.352523326873779
    5. '(list' → logprob: -7.852523326873779
    6. ' (' → logprob: -7.852523326873779
    7. '()' → logprob: -8.102522850036621
    8. '(arr' → logprob: -8.352522850036621
    9. '(ls' → logprob: -8.477522850036621
    10. '(l' → logprob: -8.727522850036621

Token 84: 'aa' (ID: 3545)
  Prédit: 'lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'lst' → logprob: -0.11952414363622665
    2. '(lst' → logprob: -2.3695242404937744
    3. ')' → logprob: -4.494524002075195
    4. '):' → logprob: -5.869524002075195
    5. 'a' → logprob: -6.244524002075195
    6. '(a' → logprob: -6.994524002075195
    7. ' lst' → logprob: -7.494524002075195
    8. ')(' → logprob: -7.619524002075195
    9. 'list' → logprob: -7.619524002075195
    10. 'arr' → logprob: -8.744524002075195

Token 85: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.08791082352399826
    2. ',' → logprob: -2.5879108905792236
    3. '(' → logprob: -5.3379106521606445
    4. ')' → logprob: -6.5879106521606445
    5. ' ):' → logprob: -7.3379106521606445
    6. '[' → logprob: -7.3379106521606445
    7. '():' → logprob: -7.9629106521606445
    8. '[]):' → logprob: -8.337910652160645
    9. ':' → logprob: -8.587910652160645
    10. 's' → logprob: -9.212910652160645

Token 86: ' x' (ID: 1215)
  Prédit: 'bb'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bb' → logprob: -0.05274125933647156
    2. ' bb' → logprob: -3.052741289138794
    3. 'b' → logprob: -6.552741050720215
    4. 'n' → logprob: -8.302741050720215
    5. 'threshold' → logprob: -8.427741050720215
    6. 'nn' → logprob: -8.427741050720215
    7. ' n' → logprob: -8.677741050720215
    8. ' b' → logprob: -8.927741050720215
    9. 'cut' → logprob: -9.052741050720215
    10. 'ss' → logprob: -9.177741050720215

Token 87: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0016111508011817932
    2. ',' → logprob: -7.001611232757568
    3. ')' → logprob: -7.876611232757568
    4. '):
' → logprob: -8.12661075592041
    5. ' ):' → logprob: -11.75161075592041
    6. '[]):' → logprob: -12.62661075592041
    7. '_' → logprob: -12.87661075592041
    8. 's' → logprob: -13.00161075592041
    9. ':' → logprob: -13.25161075592041
    10. '_list' → logprob: -13.62661075592041

Token 88: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01640242338180542
    2. '
' → logprob: -5.016402244567871
    3. '    
' → logprob: -5.266402244567871
    4. 'count' → logprob: -6.141402244567871
    5. '```' → logprob: -7.266402244567871
    6. ' count' → logprob: -8.266402244567871
    7. ':' → logprob: -8.391402244567871
    8. '   
' → logprob: -8.641402244567871
    9. '  
' → logprob: -8.766402244567871
    10. '0' → logprob: -9.266402244567871

Token 89: ' c' (ID: 274)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'count' → logprob: -0.13989712297916412
    2. ' count' → logprob: -2.139897108078003
    3. '   ' → logprob: -4.764897346496582
    4. 'cnt' → logprob: -5.764897346496582
    5. 'return' → logprob: -7.764897346496582
    6. ' cnt' → logprob: -7.889897346496582
    7. ' return' → logprob: -8.639897346496582
    8. 'result' → logprob: -9.264897346496582
    9. 'counter' → logprob: -10.264897346496582
    10. 'counts' → logprob: -10.764897346496582

Token 90: ' =' (ID: 314)
  Prédit: 'ount'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ount' → logprob: -0.00027968952781520784
    2. 'ounter' → logprob: -8.875279426574707
    3. 'nt' → logprob: -9.875279426574707
    4. ' =' → logprob: -10.625279426574707
    5. '=' → logprob: -10.750279426574707
    6. 'ont' → logprob: -11.250279426574707
    7. ' ' → logprob: -11.375279426574707
    8. 'o' → logprob: -11.875279426574707
    9. '   ' → logprob: -12.250279426574707
    10. 'out' → logprob: -12.750279426574707

Token 91: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.12693829834461212
    2. ' ' → logprob: -2.1269383430480957
    3. 'sum' → logprob: -12.251937866210938
    4. ' sum' → logprob: -12.501937866210938
    5. 'len' → logprob: -14.626937866210938
    6. ' ' → logprob: -15.126937866210938
    7. ' len' → logprob: -15.251937866210938
    8. '   ' → logprob: -15.939437866210938
    9. '1' → logprob: -16.189437866210938
    10. '  ' → logprob: -16.501937866210938

Token 92: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00013095269969198853
    2. ' ' → logprob: -9.000130653381348
    3. 'sum' → logprob: -11.875130653381348
    4. '[' → logprob: -15.750130653381348
    5. 'len' → logprob: -16.125131607055664
    6. ' sum' → logprob: -17.000131607055664
    7. '[]' → logprob: -17.500131607055664
    8. '```' → logprob: -17.750131607055664
    9. '1' → logprob: -17.875131607055664
    10. 'a' → logprob: -18.500131607055664

Token 93: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.4298711121082306
    2. '<|end|>' → logprob: -1.4298710823059082
    3. ' for' → logprob: -2.929871082305908
    4. '<|end|>' → logprob: -4.304871082305908
    5. '   ' → logprob: -4.554871082305908
    6. ' ' → logprob: -5.179871082305908
    7. '  
' → logprob: -5.429871082305908
    8. 'for' → logprob: -5.554871082305908
    9. ' 
' → logprob: -5.554871082305908
    10. '\n' → logprob: -5.679871082305908

Token 94: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.131221055984497
    2. ' for' → logprob: -1.131221055984497
    3. '<|end|>' → logprob: -1.756221055984497
    4. '
' → logprob: -1.881221055984497
    5. 'for' → logprob: -4.881220817565918
    6. ' ' → logprob: -5.131220817565918
    7. '<|end|>' → logprob: -5.631220817565918
    8. '	for' → logprob: -5.631220817565918
    9. '    
' → logprob: -5.756220817565918
    10. ' 
' → logprob: -6.756220817565918

Token 95: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.2523678243160248
    2. 'for' (adapté à ' for') → logprob: -1.5023678541183472
    3. '   ' → logprob: -8.002367973327637
    4. ' ' → logprob: -10.127367973327637
    5. '[' → logprob: -11.127367973327637
    6. ' result' → logprob: -11.377367973327637
    7. 'result' → logprob: -11.502367973327637
    8. '	for' → logprob: -11.502367973327637
    9. ' new' → logprob: -12.502367973327637
    10. ' [' → logprob: -13.252367973327637

Token 96: ' a' (ID: 261)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.22655701637268066
    2. ' a' → logprob: -2.1015570163726807
    3. 'i' → logprob: -3.2265570163726807
    4. 'a' → logprob: -4.101556777954102
    5. ' ai' → logprob: -4.726556777954102
    6. ' ' → logprob: -4.851556777954102
    7. ' aa' → logprob: -5.101556777954102
    8. ' value' → logprob: -7.976556777954102
    9. ' val' → logprob: -8.351556777954102
    10. '  ' → logprob: -8.851556777954102

Token 97: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.027549969032406807
    2. 'in' → logprob: -3.902549982070923
    3. ' ' → logprob: -5.527549743652344
    4. 'a' → logprob: -6.152549743652344
    5. ',' → logprob: -7.527549743652344
    6. 'i' → logprob: -8.402549743652344
    7. ' i' → logprob: -10.777549743652344
    8. '   ' → logprob: -10.777549743652344
    9. '  ' → logprob: -10.777549743652344
    10. 'n' → logprob: -11.152549743652344

Token 98: ' aa' (ID: 40260)
  Prédit: ' aa'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' aa' → logprob: -0.576094388961792
    2. 'aa' → logprob: -0.826094388961792
    3. 'a' → logprob: -8.951094627380371
    4. ' ' → logprob: -11.326094627380371
    5. '#aa' → logprob: -12.326094627380371
    6. '_' → logprob: -12.951094627380371
    7. '   ' → logprob: -13.451094627380371
    8. ' ' → logprob: -13.826094627380371
    9. '  ' → logprob: -14.701094627380371
    10. ' a' → logprob: -14.701094627380371

Token 99: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.01110217534005642
    2. ':
' → logprob: -4.511102199554443
    3. ' :' → logprob: -11.386101722717285
    4. '       ' → logprob: -11.386101722717285
    5. '   ' → logprob: -11.636101722717285
    6. '):' → logprob: -12.636101722717285
    7. '[' → logprob: -13.011101722717285
    8. '>' → logprob: -13.261101722717285
    9. ':
' → logprob: -13.261101722717285
    10. ':

' → logprob: -13.261101722717285

Token 100: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.019170233979821205
    2. ' ' → logprob: -4.89417028427124
    3. '    ' → logprob: -5.14417028427124
    4. '<|end|>' → logprob: -6.26917028427124
    5. ' if' → logprob: -6.64417028427124
    6. '   ' → logprob: -6.76917028427124
    7. '        ' → logprob: -8.644169807434082
    8. ' 
' → logprob: -8.644169807434082
    9. ':' → logprob: -8.769169807434082
    10. '      ' → logprob: -8.894169807434082

Token 101: ' x' (ID: 1215)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5490752458572388
    2. ' if' → logprob: -0.9240752458572388
    3. 'if' → logprob: -4.174075126647949
    4. ' c' → logprob: -5.174075126647949
    5. ' ' → logprob: -6.674075126647949
    6. '   ' → logprob: -6.674075126647949
    7. '    ' → logprob: -7.049075126647949
    8. '        ' → logprob: -8.42407512664795
    9. '           ' → logprob: -8.54907512664795
    10. '
' → logprob: -8.92407512664795

Token 102: ' =' (ID: 314)
  Prédit: '-='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '-=' → logprob: -1.150757074356079
    2. '-' → logprob: -1.275757074356079
    3. ' -=' → logprob: -1.525757074356079
    4. '>' → logprob: -2.650757074356079
    5. ' -' → logprob: -2.900757074356079
    6. '=' → logprob: -3.275757074356079
    7. '>=' → logprob: -4.1507568359375
    8. ' >=' → logprob: -6.2757568359375
    9. 'if' → logprob: -6.5257568359375
    10. ' ' → logprob: -6.9007568359375

Token 103: ' subtract' (ID: 71973)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.7986704707145691
    2. 'max' → logprob: -1.5486705303192139
    3. ' max' → logprob: -1.6736705303192139
    4. 'x' → logprob: -2.548670530319214
    5. ' a' → logprob: -3.048670530319214
    6. ' x' → logprob: -3.923670530319214
    7. 'abs' → logprob: -6.298670291900635
    8. 'min' → logprob: -7.298670291900635
    9. ' abs' → logprob: -7.298670291900635
    10. ' min' → logprob: -7.923670291900635

Token 104: '_x' (ID: 7054)
  Prédit: '(a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.7278052568435669
    2. '(' → logprob: -1.227805256843567
    3. 'a' → logprob: -2.7278051376342773
    4. ' a' → logprob: -2.8528051376342773
    5. ' ' → logprob: -3.6028051376342773
    6. '(x' → logprob: -4.102805137634277
    7. 'ed' → logprob: -4.477805137634277
    8. '_' → logprob: -4.977805137634277
    9. '(max' → logprob: -4.977805137634277
    10. ' max' → logprob: -5.477805137634277

Token 105: '(x' (ID: 4061)
  Prédit: '(a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.6543358564376831
    2. '(x' → logprob: -1.779335856437683
    3. 'a' → logprob: -3.1543359756469727
    4. 'tract' → logprob: -3.2793359756469727
    5. ' -' → logprob: -3.6543359756469727
    6. '-' → logprob: -3.6543359756469727
    7. 't' → logprob: -3.6543359756469727
    8. 'x' → logprob: -3.6543359756469727
    9. ' x' → logprob: -4.029335975646973
    10. ' ' → logprob: -4.279335975646973

Token 106: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.027722278609871864
    2. ' ,' → logprob: -4.777722358703613
    3. ' -' → logprob: -5.152722358703613
    4. ',a' → logprob: -5.652722358703613
    5. ' a' → logprob: -5.902722358703613
    6. ')' → logprob: -5.902722358703613
    7. 'a' → logprob: -6.152722358703613
    8. ' ' → logprob: -7.152722358703613
    9. '-' → logprob: -8.527722358703613
    10. '   ' → logprob: -8.902722358703613

Token 107: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.17992019653320312
    2. ' a' → logprob: -1.8049201965332031
    3. ')' → logprob: -9.679920196533203
    4. ' ' → logprob: -9.804920196533203
    5. '1' → logprob: -10.929920196533203
    6. '   ' → logprob: -11.429920196533203
    7. '<|end|>' → logprob: -12.179920196533203
    8. ')a' → logprob: -12.679920196533203
    9. '	a' → logprob: -12.804920196533203
    10. '    ' → logprob: -12.804920196533203

Token 108: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.009957951493561268
    2. ' )' → logprob: -4.759957790374756
    3. ')
' → logprob: -6.759957790374756
    4. ' )
' → logprob: -10.009958267211914
    5. ',' → logprob: -10.134958267211914
    6. '-' → logprob: -10.884958267211914
    7. ' -' → logprob: -10.884958267211914
    8. ' if' → logprob: -11.134958267211914
    9. ');' → logprob: -11.759958267211914
    10. ')>' → logprob: -12.134958267211914

Token 109: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.7799116373062134
    2. '<|end|>' → logprob: -1.2799116373062134
    3. ' ' → logprob: -1.9049116373062134
    4. '   ' → logprob: -3.404911518096924
    5. '    ' → logprob: -3.779911518096924
    6. '
' → logprob: -4.279911518096924
    7. '        ' → logprob: -4.279911518096924
    8. ' if' → logprob: -4.904911518096924
    9. '  ' → logprob: -5.529911518096924
    10. ' 
' → logprob: -5.654911518096924

Token 110: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.6797109246253967
    2. 'if' (adapté à ' if') → logprob: -1.054710865020752
    3. '       ' → logprob: -2.179710865020752
    4. '   ' → logprob: -3.804710865020752
    5. ' ' → logprob: -4.929710865020752
    6. '    ' → logprob: -6.679710865020752
    7. ' c' → logprob: -7.804710865020752
    8. '        ' → logprob: -8.17971134185791
    9. 'c' → logprob: -8.42971134185791
    10. '  ' → logprob: -9.17971134185791

Token 111: ' check' (ID: 2371)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.0019841869361698627
    2. 'x' → logprob: -6.251984119415283
    3. ' ' → logprob: -10.251984596252441
    4. ' not' → logprob: -11.626984596252441
    5. ' ' → logprob: -12.626984596252441
    6. '0' → logprob: -13.439484596252441
    7. '(x' → logprob: -13.689484596252441
    8. ' (' → logprob: -13.876984596252441
    9. '(' → logprob: -14.626984596252441
    10. '  ' → logprob: -14.814484596252441

Token 112: '_x' (ID: 7054)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.6177549362182617
    2. '_x' → logprob: -0.9927549362182617
    3. '(' → logprob: -3.2427549362182617
    4. ' (' → logprob: -3.8677549362182617
    5. 's' → logprob: -5.242754936218262
    6. ' x' → logprob: -5.367754936218262
    7. ' if' → logprob: -5.492754936218262
    8. 'ed' → logprob: -5.992754936218262
    9. '_' → logprob: -6.117754936218262
    10. ')' → logprob: -6.492754936218262

Token 113: '_non' (ID: 52193)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.11892420053482056
    2. '(' → logprob: -2.368924140930176
    3. '>' → logprob: -4.868924140930176
    4. ' >=' → logprob: -5.868924140930176
    5. ' >' → logprob: -5.868924140930176
    6. '>=' → logprob: -6.368924140930176
    7. ' (' → logprob: -6.743924140930176
    8. '==' → logprob: -7.493924140930176
    9. ' ==' → logprob: -7.493924140930176
    10. ' <=' → logprob: -7.993924140930176

Token 114: '_negative' (ID: 134489)
  Prédit: 'negative'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'negative' → logprob: -0.2051636129617691
    2. 'neg' → logprob: -1.955163598060608
    3. '_negative' → logprob: -3.5801637172698975
    4. 'zero' → logprob: -4.205163478851318
    5. '_neg' → logprob: -8.080163955688477
    6. 'eg' → logprob: -8.205163955688477
    7. 'e' → logprob: -8.455163955688477
    8. '-negative' → logprob: -9.205163955688477
    9. '0' → logprob: -9.955163955688477
    10. 'Negative' → logprob: -10.705163955688477

Token 115: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.07437974959611893
    2. '(' → logprob: -2.6993796825408936
    3. ' (' → logprob: -5.449379920959473
    4. ' ' → logprob: -9.699379920959473
    5. '()' → logprob: -10.824379920959473
    6. ':' → logprob: -11.074379920959473
    7. '():' → logprob: -11.699379920959473
    8. '(
' → logprob: -12.074379920959473
    9. '```' → logprob: -12.449379920959473
    10. '  ' → logprob: -13.449379920959473

Token 116: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0015467642806470394
    2. ')' → logprob: -7.251546859741211
    3. ' ):' → logprob: -7.501546859741211
    4. '):
' → logprob: -9.251546859741211
    5. 'and' → logprob: -9.876546859741211
    6. ' and' → logprob: -9.876546859741211
    7. ',' → logprob: -10.501546859741211
    8. ':' → logprob: -10.751546859741211
    9. '():' → logprob: -11.376546859741211
    10. '==' → logprob: -12.376546859741211

Token 117: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.044856347143650055
    2. '       ' → logprob: -3.669856309890747
    3. ':' → logprob: -4.294856548309326
    4. ':
' → logprob: -6.169856548309326
    5. ' :' → logprob: -7.044856548309326
    6. '   ' → logprob: -8.419856071472168
    7. '<|end|>' → logprob: -8.419856071472168
    8. '               ' → logprob: -8.544856071472168
    9. '            
' → logprob: -8.794856071472168
    10. '            ' → logprob: -8.919856071472168

Token 118: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.9297730922698975
    2. 'c' (adapté à ' c') → logprob: -1.3047730922698975
    3. '       ' → logprob: -1.8047730922698975
    4. '           ' → logprob: -2.1797730922698975
    5. '               ' → logprob: -3.8047730922698975
    6. '   ' → logprob: -4.304773330688477
    7. ' ' → logprob: -4.554773330688477
    8. '	c' → logprob: -5.179773330688477
    9. '  ' → logprob: -6.929773330688477
    10. '    ' → logprob: -7.429773330688477

Token 119: ' =' (ID: 314)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.3156123161315918
    2. ' +=' → logprob: -1.3156123161315918
    3. '+' → logprob: -6.065612316131592
    4. '=' → logprob: -10.81561279296875
    5. ' +' → logprob: -12.56561279296875
    6. ']+=' → logprob: -13.94061279296875
    7. '+="' → logprob: -14.81561279296875
    8. '<|end|>' → logprob: -14.94061279296875
    9. '+='' → logprob: -14.94061279296875
    10. ' =' → logprob: -15.44061279296875

Token 120: ' increment' (ID: 24032)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.089166060090065
    2. 'c' → logprob: -2.4641661643981934
    3. ' ' → logprob: -9.214165687561035
    4. '+' → logprob: -9.214165687561035
    5. '0' → logprob: -11.089165687561035
    6. '1' → logprob: -12.464165687561035
    7. '+c' → logprob: -13.464165687561035
    8. '    ' → logprob: -13.839165687561035
    9. ' ' → logprob: -13.964165687561035
    10. '+=' → logprob: -14.089165687561035

Token 121: '_c' (ID: 1303)
  Prédit: '(c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.050893425941467285
    2. 'c' → logprob: -3.0508933067321777
    3. '(' → logprob: -6.175893306732178
    4. ' c' → logprob: -9.050893783569336
    5. '<|end|>' → logprob: -10.175893783569336
    6. ')c' → logprob: -10.675893783569336
    7. ' ' → logprob: -11.550893783569336
    8. '(
' → logprob: -12.050893783569336
    9. '1' → logprob: -12.675893783569336
    10. ' (' → logprob: -12.675893783569336

Token 122: '(c' (ID: 2410)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.24987879395484924
    2. ' +' → logprob: -2.2498788833618164
    3. '(c' → logprob: -2.7498788833618164
    4. '(' → logprob: -3.7498788833618164
    5. 'c' → logprob: -4.124878883361816
    6. ' ' → logprob: -5.874878883361816
    7. ' c' → logprob: -6.124878883361816
    8. '1' → logprob: -6.374878883361816
    9. '+c' → logprob: -6.874878883361816
    10. '()' → logprob: -7.124878883361816

Token 123: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.11570820212364197
    2. '+' → logprob: -2.365708112716675
    3. ' +' → logprob: -4.990708351135254
    4. '<|end|>' → logprob: -5.740708351135254
    5. ',' → logprob: -6.740708351135254
    6. ')
' → logprob: -6.990708351135254
    7. '+)' → logprob: -7.240708351135254
    8. ')+' → logprob: -7.490708351135254
    9. ' )' → logprob: -7.490708351135254
    10. '       ' → logprob: -7.740708351135254

Token 124: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13369862735271454
    2. '       ' → logprob: -2.8836987018585205
    3. '
' → logprob: -3.7586987018585205
    4. '    
' → logprob: -3.7586987018585205
    5. 'return' → logprob: -4.883698463439941
    6. '<|end|>' → logprob: -5.258698463439941
    7. '    ' → logprob: -5.633698463439941
    8. ' return' → logprob: -6.508698463439941
    9. '        
' → logprob: -6.883698463439941
    10. '  
' → logprob: -7.008698463439941

Token 125: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6671704649925232
    2. '<|end|>' → logprob: -0.9171704649925232
    3. '
' → logprob: -3.542170524597168
    4. 'return' (adapté à ' return') → logprob: -3.792170524597168
    5. ' ' → logprob: -4.542170524597168
    6. 'def' → logprob: -5.042170524597168
    7. '       ' → logprob: -5.667170524597168
    8. '\n' → logprob: -5.792170524597168
    9. ' return' → logprob: -5.917170524597168
    10. ')' → logprob: -5.917170524597168

Token 126: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.05407150834798813
    2. ' c' → logprob: -3.0540714263916016
    3. '(c' → logprob: -5.679071426391602
    4. ' (' → logprob: -6.304071426391602
    5. '(' → logprob: -8.679071426391602
    6. ' ' → logprob: -10.929071426391602
    7. '	c' → logprob: -11.679071426391602
    8. '[c' → logprob: -12.179071426391602
    9. '[' → logprob: -12.554071426391602
    10. '(
' → logprob: -13.179071426391602

Token 127: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 128: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.058308862149715424
    2. ' ' → logprob: -3.0583088397979736
    3. 'x' → logprob: -4.808309078216553
    4. '<|end|>' → logprob: -8.183308601379395
    5. ' space' → logprob: -8.433308601379395
    6. 'space' → logprob: -8.683308601379395
    7. ' ' → logprob: -9.058308601379395
    8. '32' → logprob: -9.058308601379395
    9. ' None' → logprob: -9.183308601379395
    10. '[' → logprob: -9.433308601379395

Token 129: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 130: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.13999414443969727
    2. '_' → logprob: -2.1399941444396973
    3. '
' → logprob: -5.764994144439697
    4. '<|end|>' → logprob: -5.889994144439697
    5. ' def' → logprob: -6.264994144439697
    6. '(' → logprob: -6.764994144439697
    7. '[' → logprob: -7.389994144439697
    8. ':' → logprob: -7.639994144439697
    9. '\' → logprob: -7.764994144439697
    10. '#' → logprob: -8.014993667602539

Token 131: ' subtract' (ID: 71973)
  Prédit: ' subtract'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' subtract' → logprob: -0.009112500585615635
    2. ' check' → logprob: -5.509112358093262
    3. 'subtract' → logprob: -5.509112358093262
    4. ' sort' → logprob: -8.259112358093262
    5. ' ' → logprob: -8.384112358093262
    6. ' increment' → logprob: -8.884112358093262
    7. ' main' → logprob: -9.634112358093262
    8. ' def' → logprob: -10.009112358093262
    9. ' decrement' → logprob: -10.009112358093262
    10. ' sub' → logprob: -10.696612358093262

Token 132: '_x' (ID: 7054)
  Prédit: '_x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_x' → logprob: -0.0019311357755213976
    2. '_' → logprob: -6.251931190490723
    3. '_(' → logprob: -14.001931190490723
    4. ' _' → logprob: -14.376931190490723
    5. '_

' → logprob: -15.126931190490723
    6. '_
' → logprob: -15.501931190490723
    7. '_a' → logprob: -16.126930236816406
    8. '(' → logprob: -16.251930236816406
    9. '```' → logprob: -16.376930236816406
    10. '##_' → logprob: -16.501930236816406

Token 133: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.3868822753429413
    2. '(' → logprob: -1.1368823051452637
    3. '(
' → logprob: -11.511881828308105
    4. ' (' → logprob: -14.511881828308105
    5. '(s' → logprob: -15.636881828308105
    6. '(

' → logprob: -16.011882781982422
    7. '(a' → logprob: -16.011882781982422
    8. '(user' → logprob: -16.386882781982422
    9. '(value' → logprob: -16.761882781982422
    10. '(xs' → logprob: -16.886882781982422

Token 134: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -5.526570384972729e-05
    2. ',a' → logprob: -10.000055313110352
    3. ' ,' → logprob: -11.750055313110352
    4. ',x' → logprob: -13.875055313110352
    5. 'a' → logprob: -15.000055313110352
    6. ',y' → logprob: -16.25005531311035
    7. ':' → logprob: -16.37505531311035
    8. ',b' → logprob: -16.87505531311035
    9. ',
' → logprob: -17.12505531311035
    10. '):' → logprob: -17.25005531311035

Token 135: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.07312905788421631
    2. 'y' → logprob: -3.323129177093506
    3. ' a' → logprob: -3.823129177093506
    4. ' y' → logprob: -4.448129177093506
    5. 'b' → logprob: -7.948129177093506
    6. 'val' → logprob: -9.198128700256348
    7. 'sub' → logprob: -9.323128700256348
    8. 'value' → logprob: -9.448128700256348
    9. 'v' → logprob: -9.698128700256348
    10. 'subtract' → logprob: -10.198128700256348

Token 136: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00025156480842269957
    2. '):
' → logprob: -8.375251770019531
    3. ')' → logprob: -11.500251770019531
    4. ' ):' → logprob: -12.125251770019531
    5. ':' → logprob: -13.000251770019531
    6. '):
' → logprob: -13.125251770019531
    7. ',' → logprob: -14.875251770019531
    8. '):

' → logprob: -15.500251770019531
    9. '   ' → logprob: -15.625251770019531
    10. '=' → logprob: -16.00025177001953

Token 137: '   ' (ID: 271)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.02421126887202263
    2. 'x' → logprob: -4.149211406707764
    3. '   ' → logprob: -5.399211406707764
    4. ' ' → logprob: -7.149211406707764
    5. ' return' → logprob: -7.274211406707764
    6. ' -' → logprob: -7.274211406707764
    7. '    ' → logprob: -7.774211406707764
    8. '-' → logprob: -8.149210929870605
    9. ' a' → logprob: -8.899210929870605
    10. ' =' → logprob: -9.024210929870605

Token 138: ' return' (ID: 622)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.18217195570468903
    2. 'x' → logprob: -1.8071719408035278
    3. ' return' → logprob: -6.557171821594238
    4. 'a' → logprob: -8.057171821594238
    5. 'return' (adapté à ' return') → logprob: -8.807171821594238
    6. ' if' → logprob: -8.807171821594238
    7. '   ' → logprob: -9.182171821594238
    8. ' a' → logprob: -9.307171821594238
    9. ' ' → logprob: -9.682171821594238
    10. ' max' → logprob: -9.682171821594238

Token 139: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.474109411239624
    2. 'x' → logprob: -0.974109411239624
    3. ' max' → logprob: -10.974109649658203
    4. 'max' → logprob: -11.599109649658203
    5. 'a' → logprob: -12.724109649658203
    6. '   ' → logprob: -14.224109649658203
    7. '(x' → logprob: -14.349109649658203
    8. ' ' → logprob: -14.349109649658203
    9. ' a' → logprob: -14.849109649658203
    10. ' ' → logprob: -15.224109649658203

Token 140: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.20149511098861694
    2. '-' → logprob: -1.7014951705932617
    3. '-a' → logprob: -9.701495170593262
    4. ' ' → logprob: -12.201495170593262
    5. 'a' → logprob: -12.326495170593262
    6. ' ' → logprob: -12.701495170593262
    7. '+' → logprob: -13.076495170593262
    8. ' a' → logprob: -13.576495170593262
    9. ' +' → logprob: -13.701495170593262
    10. '[' → logprob: -14.701495170593262

Token 141: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.3132699728012085
    2. ' a' → logprob: -1.3132699728012085
    3. '	a' → logprob: -12.31326961517334
    4. ' ' → logprob: -13.06326961517334
    5. '   ' → logprob: -13.93826961517334
    6. '1' → logprob: -15.43826961517334
    7. ' ' → logprob: -15.81326961517334
    8. '_a' → logprob: -16.188270568847656
    9. '    ' → logprob: -16.313270568847656
    10. '  ' → logprob: -16.938270568847656

Token 142: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 143: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -7.266944157890975e-05
    2. ' def' → logprob: -9.875072479248047
    3. '<|end|>' → logprob: -11.375072479248047
    4. '
' → logprob: -13.125072479248047
    5. '

' → logprob: -13.750072479248047
    6. '  
' → logprob: -13.750072479248047
    7. '```' → logprob: -13.750072479248047
    8. '0' → logprob: -13.750072479248047
    9. ' 

' → logprob: -14.500072479248047
    10. 'x' → logprob: -14.625072479248047

Token 144: ' check' (ID: 2371)
  Prédit: 'check'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'check' → logprob: -0.013211526907980442
    2. 'def' → logprob: -4.763211727142334
    3. ' check' → logprob: -5.388211727142334
    4. '
' → logprob: -11.513211250305176
    5. ' def' → logprob: -12.763211250305176
    6. ' ' → logprob: -14.138211250305176
    7. '```' → logprob: -14.388211250305176
    8. '_check' → logprob: -14.638211250305176
    9. '.check' → logprob: -15.013211250305176
    10. '	check' → logprob: -15.138211250305176

Token 145: '_x' (ID: 7054)
  Prédit: '_x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_x' → logprob: -0.00010318557906430215
    2. '_' → logprob: -9.375102996826172
    3. ' _' → logprob: -11.375102996826172
    4. '_a' → logprob: -13.625102996826172
    5. '##_' → logprob: -14.000102996826172
    6. 'x' → logprob: -14.125102996826172
    7. '}_' → logprob: -14.125102996826172
    8. ')_' → logprob: -14.250102996826172
    9. '```' → logprob: -15.000102996826172
    10. ''_' → logprob: -15.125102996826172

Token 146: '_non' (ID: 52193)
  Prédit: '_non'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_non' → logprob: -0.000387535837944597
    2. '_' → logprob: -7.875387668609619
    3. ' _' → logprob: -12.875387191772461
    4. '_n' → logprob: -13.750387191772461
    5. '>=' → logprob: -13.875387191772461
    6. ' >=' → logprob: -14.125387191772461
    7. '_NON' → logprob: -14.375387191772461
    8. '_not' → logprob: -15.250387191772461
    9. '##_' → logprob: -15.625387191772461
    10. ' non' → logprob: -16.00038719177246

Token 147: '_negative' (ID: 134489)
  Prédit: '_negative'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_negative' → logprob: -0.00019042797794099897
    2. '_' → logprob: -9.000190734863281
    3. 'negative' → logprob: -10.625190734863281
    4. '_neg' → logprob: -10.750190734863281
    5. '-negative' → logprob: -11.375190734863281
    6. '_positive' → logprob: -12.750190734863281
    7. '_n' → logprob: -13.125190734863281
    8. '-' → logprob: -13.500190734863281
    9. '_-' → logprob: -14.375190734863281
    10. 'Negative' → logprob: -14.375190734863281

Token 148: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.12693366408348083
    2. '(' → logprob: -2.1269335746765137
    3. ' (' → logprob: -12.251934051513672
    4. '(
' → logprob: -15.251934051513672
    5. '(xs' → logprob: -16.126934051513672
    6. '(a' → logprob: -16.251934051513672
    7. '((' → logprob: -16.751934051513672
    8. '(y' → logprob: -17.001934051513672
    9. '(n' → logprob: -17.126934051513672
    10. '("("' → logprob: -17.501934051513672

Token 149: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00021271906734909862
    2. ')' → logprob: -8.875212669372559
    3. '):
' → logprob: -10.250212669372559
    4. ' ):' → logprob: -10.250212669372559
    5. '():' → logprob: -13.750212669372559
    6. ':' → logprob: -14.750212669372559
    7. '>=' → logprob: -15.375212669372559
    8. '>:' → logprob: -16.125213623046875
    9. '):
' → logprob: -16.625213623046875
    10. '>' → logprob: -16.750213623046875

Token 150: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.055187251418828964
    2. ' return' → logprob: -3.055187225341797
    3. 'return' → logprob: -5.055187225341797
    4. 'x' → logprob: -8.930187225341797
    5. '	return' → logprob: -10.430187225341797
    6. ' x' → logprob: -10.555187225341797
    7. '(' → logprob: -12.180187225341797
    8. ' ' → logprob: -12.930187225341797
    9. '>' → logprob: -13.430187225341797
    10. '    ' → logprob: -13.555187225341797

Token 151: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.2041175812482834
    2. ' return' → logprob: -1.7041175365447998
    3. 'x' → logprob: -5.954117774963379
    4. ' x' → logprob: -9.329117774963379
    5. '   ' → logprob: -11.079117774963379
    6. '0' → logprob: -14.454117774963379
    7. '	return' → logprob: -14.829117774963379
    8. ' ' → logprob: -15.954117774963379
    9. '>' → logprob: -17.204116821289062
    10. 'Return' → logprob: -17.329116821289062

Token 152: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.029753733426332474
    2. 'x' → logprob: -3.5297536849975586
    3. '0' → logprob: -13.779753684997559
    4. ' ' → logprob: -14.279753684997559
    5. '(x' → logprob: -14.404753684997559
    6. ' (' → logprob: -14.654753684997559
    7. ' ' → logprob: -15.279753684997559
    8. '   ' → logprob: -15.654753684997559
    9. '	x' → logprob: -15.779753684997559
    10. '(' → logprob: -15.904753684997559

Token 153: ' >=' (ID: 5064)
  Prédit: ' >='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.6931606531143188
    2. '>=' → logprob: -0.6931606531143188
    3. ' ' → logprob: -11.818161010742188
    4. '>' → logprob: -13.193161010742188
    5. '[' → logprob: -13.443161010742188
    6. ' ' → logprob: -13.693161010742188
    7. ')>=' → logprob: -14.318161010742188
    8. '0' → logprob: -14.318161010742188
    9. ']>=' → logprob: -15.693161010742188
    10. '   ' → logprob: -16.818161010742188

Token 154: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00029637437546625733
    2. ' ' → logprob: -8.125296592712402
    3. '۰' → logprob: -16.250295639038086
    4. '<|end|>' → logprob: -16.250295639038086
    5. ' ' → logprob: -17.500295639038086
    6. '```' → logprob: -17.750295639038086
    7. '०' → logprob: -18.187795639038086
    8. '０' → logprob: -18.375295639038086
    9. '00' → logprob: -18.375295639038086
    10. '০' → logprob: -18.437795639038086

Token 155: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -8.180258191714529e-06
    2. ' ' → logprob: -11.750008583068848
    3. '۰' → logprob: -16.75000762939453
    4. '000' → logprob: -17.12500762939453
    5. '00' → logprob: -17.31250762939453
    6. '010' → logprob: -18.18750762939453
    7. '０' → logprob: -18.18750762939453
    8. 'zero' → logprob: -18.31250762939453
    9. '012' → logprob: -18.56250762939453
    10. '1' → logprob: -18.81250762939453

Token 156: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.9361264946837764e-07
    2. ' def' → logprob: -16.0
    3. '1' → logprob: -17.75
    4. '```' → logprob: -18.0
    5. '	def' → logprob: -19.5
    6. '0' → logprob: -19.625
    7. '    
' → logprob: -20.75
    8. '**' → logprob: -21.125
    9. ':def' → logprob: -21.25
    10. '  
' → logprob: -21.375

Token 157: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -3.128163257315464e-07
    2. ' def' → logprob: -15.5
    3. '```' → logprob: -18.25
    4. '<|end|>' → logprob: -18.375
    5. '	def' → logprob: -19.0
    6. '0' → logprob: -21.0
    7. '#' → logprob: -21.375
    8. ':def' → logprob: -22.0
    9. '1' → logprob: -22.125
    10. '-def' → logprob: -22.375

Token 158: ' increment' (ID: 24032)
  Prédit: 'increment'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'increment' → logprob: -0.03373341262340546
    2. ' increment' → logprob: -3.408733367919922
    3. 'main' → logprob: -10.408733367919922
    4. 'input' → logprob: -10.908733367919922
    5. ' main' → logprob: -10.908733367919922
    6. 'def' → logprob: -12.721233367919922
    7. ' input' → logprob: -13.221233367919922
    8. 'de' → logprob: -13.471233367919922
    9. ' decrement' → logprob: -13.721233367919922
    10. 'initialize' → logprob: -13.721233367919922

Token 159: '_c' (ID: 1303)
  Prédit: '_c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_c' → logprob: -4.60414821645827e-06
    2. '_' → logprob: -12.375004768371582
    3. ' _' → logprob: -15.375004768371582
    4. 'c' → logprob: -15.875004768371582
    5. 'def' → logprob: -16.750003814697266
    6. '```' → logprob: -16.875003814697266
    7. '_x' → logprob: -19.125003814697266
    8. '\' → logprob: -19.500003814697266
    9. '_
' → logprob: -19.750003814697266
    10. '##_' → logprob: -19.875003814697266

Token 160: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.31335878372192383
    2. '(' → logprob: -1.3133587837219238
    3. ' (' → logprob: -9.313358306884766
    4. '(
' → logprob: -11.938358306884766
    5. '(

' → logprob: -16.063358306884766
    6. '(C' → logprob: -16.188358306884766
    7. 'c' → logprob: -17.313358306884766
    8. ' ' → logprob: -17.313358306884766
    9. '	c' → logprob: -18.313358306884766
    10. 'def' → logprob: -18.563358306884766

Token 161: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0013690461637452245
    2. '):
' → logprob: -7.126368999481201
    3. ')' → logprob: -7.501368999481201
    4. '+' → logprob: -12.12636947631836
    5. ' ):' → logprob: -12.37636947631836
    6. '):
' → logprob: -14.50136947631836
    7. '():' → logprob: -14.62636947631836
    8. '   ' → logprob: -15.12636947631836
    9. '):

' → logprob: -15.37636947631836
    10. ')+' → logprob: -15.75136947631836

Token 162: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02736150100827217
    2. 'c' → logprob: -4.0273613929748535
    3. ' c' → logprob: -4.7773613929748535
    4. ' return' → logprob: -7.5273613929748535
    5. 'return' → logprob: -8.652361869812012
    6. '	c' → logprob: -10.277361869812012
    7. '    ' → logprob: -13.027361869812012
    8. '	return' → logprob: -13.902361869812012
    9. '```' → logprob: -15.777361869812012
    10. '  ' → logprob: -15.902361869812012

Token 163: ' return' (ID: 622)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.014188306406140327
    2. ' c' → logprob: -4.264188289642334
    3. 'return' (adapté à ' return') → logprob: -10.889188766479492
    4. ' return' → logprob: -12.639188766479492
    5. '   ' → logprob: -12.764188766479492
    6. '	c' → logprob: -17.014188766479492
    7. '    ' → logprob: -20.389188766479492
    8. ' ' → logprob: -20.514188766479492
    9. '  ' → logprob: -22.139188766479492
    10. ')c' → logprob: -22.139188766479492

Token 164: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.07888978719711304
    2. ' c' → logprob: -2.578889846801758
    3. '	c' → logprob: -16.953889846801758
    4. '   ' → logprob: -17.828889846801758
    5. ' ' → logprob: -18.953889846801758
    6. 'cation' → logprob: -19.203889846801758
    7. '(c' → logprob: -19.453889846801758
    8. '_c' → logprob: -19.828889846801758
    9. 'ct' → logprob: -20.703889846801758
    10. ' ' → logprob: -20.703889846801758

Token 165: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.04862722009420395
    2. ' +' → logprob: -3.0486271381378174
    3. '+c' → logprob: -10.173626899719238
    4. 'c' → logprob: -14.423626899719238
    5. '+
' → logprob: -14.423626899719238
    6. ' c' → logprob: -14.923626899719238
    7. ' +
' → logprob: -15.548626899719238
    8. ' ' → logprob: -17.423627853393555
    9. '＋' → logprob: -18.048627853393555
    10. '+=' → logprob: -18.298627853393555

Token 166: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -6.635164754698053e-05
    2. ' ' → logprob: -9.625066757202148
    3. '   ' → logprob: -15.125066757202148
    4. '```' → logprob: -19.62506675720215
    5. '  ' → logprob: -19.87506675720215
    6. '    ' → logprob: -21.50006675720215
    7. ' ' → logprob: -21.62506675720215
    8. 'def' → logprob: -21.87506675720215
    9. '       ' → logprob: -22.00006675720215
    10. '=' → logprob: -22.25006675720215

Token 167: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.128163257315464e-07
    2. ' ' → logprob: -15.125
    3. '```' → logprob: -20.875
    4. '   ' → logprob: -21.25
    5. '<|end|>' → logprob: -21.625
    6. '  ' → logprob: -22.5
    7. 'def' → logprob: -24.5
    8. '[' → logprob: -25.0
    9. '`' → logprob: -25.375
    10. '۱' → logprob: -25.375

Token 168: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 169: 'def' (ID: 1314)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.8915757536888123
    2. 'def' → logprob: -1.016575813293457
    3. 'n' → logprob: -2.016575813293457
    4. 'params' → logprob: -2.766575813293457
    5. 'print' → logprob: -4.641575813293457
    6. '#' → logprob: -5.016575813293457
    7. 'N' → logprob: -5.391575813293457
    8. 'x' → logprob: -5.641575813293457
    9. 'a' → logprob: -6.391575813293457
    10. 'for' → logprob: -6.516575813293457

Token 170: ' decrement' (ID: 121877)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.013652701862156391
    2. 'main' → logprob: -4.388652801513672
    3. ' __' → logprob: -8.013652801513672
    4. '__' → logprob: -8.138652801513672
    5. ' def' → logprob: -8.388652801513672
    6. 'def' → logprob: -8.513652801513672
    7. ' sort' → logprob: -10.388652801513672
    8. 'if' → logprob: -10.513652801513672
    9. ' if' → logprob: -11.638652801513672
    10. ' ' → logprob: -12.263652801513672

Token 171: '_c' (ID: 1303)
  Prédit: '_c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_c' → logprob: -9.162282367469743e-05
    2. '_' → logprob: -10.250091552734375
    3. 'c' → logprob: -10.750091552734375
    4. '_d' → logprob: -11.500091552734375
    5. '(c' → logprob: -11.875091552734375
    6. '(' → logprob: -12.000091552734375
    7. '_x' → logprob: -12.625091552734375
    8. '_s' → logprob: -13.750091552734375
    9. 'def' → logprob: -13.750091552734375
    10. '_(' → logprob: -13.750091552734375

Token 172: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.023285429924726486
    2. '(' → logprob: -3.773285388946533
    3. ' (' → logprob: -10.148285865783691
    4. '(C' → logprob: -15.773285865783691
    5. '(
' → logprob: -15.773285865783691
    6. '(s' → logprob: -16.148284912109375
    7. '()' → logprob: -16.648284912109375
    8. '(

' → logprob: -17.273284912109375
    9. '<|end|>' → logprob: -17.398284912109375
    10. ' ' → logprob: -17.523284912109375

Token 173: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.011092275381088257
    2. '):
' → logprob: -4.511092185974121
    3. ')' → logprob: -10.136092185974121
    4. '):
' → logprob: -13.011092185974121
    5. '   ' → logprob: -13.636092185974121
    6. '):

' → logprob: -14.511092185974121
    7. ' ):' → logprob: -14.886092185974121
    8. '(c' → logprob: -15.261092185974121
    9. 'c' → logprob: -16.386093139648438
    10. ')c' → logprob: -16.386093139648438

Token 174: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.002065564738586545
    2. 'return' → logprob: -6.502065658569336
    3. ' return' → logprob: -7.502065658569336
    4. 'c' → logprob: -11.752065658569336
    5. ' c' → logprob: -12.877065658569336
    6. '	return' → logprob: -14.627065658569336
    7. '    ' → logprob: -16.252065658569336
    8. '   ' → logprob: -16.502065658569336
    9. '  ' → logprob: -16.877065658569336
    10. ' ' → logprob: -17.377065658569336

Token 175: ' return' (ID: 622)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.29796555638313293
    2. 'return' (adapté à ' return') → logprob: -1.5479655265808105
    3. ' return' → logprob: -3.2979655265808105
    4. ' c' → logprob: -5.1729655265808105
    5. '   ' → logprob: -6.0479655265808105
    6. ' ' → logprob: -13.172966003417969
    7. '	return' → logprob: -14.547966003417969
    8. 'max' → logprob: -14.547966003417969
    9. '	c' → logprob: -14.797966003417969
    10. '  ' → logprob: -15.297966003417969

Token 176: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.04858759790658951
    2. ' c' → logprob: -3.0485875606536865
    3. '	c' → logprob: -16.423587799072266
    4. '   ' → logprob: -16.548587799072266
    5. ' ' → logprob: -18.048587799072266
    6. ' ' → logprob: -18.048587799072266
    7. 'max' → logprob: -18.298587799072266
    8. '(c' → logprob: -18.298587799072266
    9. '0' → logprob: -18.673587799072266
    10. ')c' → logprob: -20.298587799072266

Token 177: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.023844555020332336
    2. '<|end|>' → logprob: -4.0238447189331055
    3. ' -' → logprob: -5.6488447189331055
    4. ' ' → logprob: -7.0238447189331055
    5. '+' → logprob: -7.6488447189331055
    6. '#' → logprob: -8.523844718933105
    7. 'def' → logprob: -8.523844718933105
    8. '0' → logprob: -9.398844718933105
    9. '-
' → logprob: -10.023844718933105
    10. ')' → logprob: -10.023844718933105

Token 178: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0011703446507453918
    2. ' ' → logprob: -6.7511701583862305
    3. '   ' → logprob: -16.501171112060547
    4. '<|end|>' → logprob: -17.251171112060547
    5. '```' → logprob: -17.251171112060547
    6. 'def' → logprob: -17.876171112060547
    7. '0' → logprob: -18.376171112060547
    8. '  ' → logprob: -19.063671112060547
    9. '１' → logprob: -19.376171112060547
    10. '	' → logprob: -19.376171112060547

Token 179: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -7.896309739408025e-07
    2. ' ' → logprob: -14.375000953674316
    3. '```' → logprob: -17.375
    4. '<|end|>' → logprob: -17.375
    5. 'def' → logprob: -19.75
    6. '   ' → logprob: -19.875
    7. '0' → logprob: -20.0
    8. '۱' → logprob: -20.75
    9. '
' → logprob: -21.125
    10. '{
' → logprob: -21.5625

Token 180: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 181: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.388401061296463
    2. 'if' → logprob: -1.1384010314941406
    3. 'n' → logprob: -6.763401031494141
    4. 'params' → logprob: -8.76340103149414
    5. 'for' → logprob: -10.01340103149414
    6. 'N' → logprob: -10.26340103149414
    7. 'import' → logprob: -10.26340103149414
    8. 'x' → logprob: -10.51340103149414
    9. 'a' → logprob: -11.01340103149414
    10. '```' → logprob: -11.13840103149414

Token 182: ' adjust' (ID: 10266)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.03805170953273773
    2. 'main' → logprob: -3.2880516052246094
    3. 'def' → logprob: -12.53805160522461
    4. ' def' → logprob: -12.66305160522461
    5. ' solve' → logprob: -14.41305160522461
    6. ' input' → logprob: -14.41305160522461
    7. ' sort' → logprob: -14.78805160522461
    8. '_main' → logprob: -14.78805160522461
    9. '	main' → logprob: -15.16305160522461
    10. 'input' → logprob: -15.16305160522461

Token 183: '_c' (ID: 1303)
  Prédit: '_c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_c' → logprob: -0.031608764082193375
    2. '_x' → logprob: -3.531608819961548
    3. '_list' → logprob: -7.406608581542969
    4. '_' → logprob: -7.781608581542969
    5. '_value' → logprob: -8.281608581542969
    6. '_count' → logprob: -8.781608581542969
    7. '_a' → logprob: -9.656608581542969
    8. '_counter' → logprob: -9.656608581542969
    9. '_counts' → logprob: -10.406608581542969
    10. '_line' → logprob: -10.531608581542969

Token 184: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.007088538259267807
    2. '(' → logprob: -5.007088661193848
    3. '_c' → logprob: -8.007088661193848
    4. ' (' → logprob: -11.007088661193848
    5. '(_' → logprob: -11.882088661193848
    6. '_(' → logprob: -12.257088661193848
    7. '(C' → logprob: -12.882088661193848
    8. '_' → logprob: -13.132088661193848
    9. '((' → logprob: -13.632088661193848
    10. '(
' → logprob: -14.132088661193848

Token 185: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0044641816057264805
    2. ',c' → logprob: -6.129464149475098
    3. '):' → logprob: -6.504464149475098
    4. ' ,' → logprob: -7.254464149475098
    5. ')' → logprob: -10.879464149475098
    6. '   ' → logprob: -11.129464149475098
    7. '):
' → logprob: -11.379464149475098
    8. ',n' → logprob: -12.629464149475098
    9. ',x' → logprob: -12.629464149475098
    10. ',b' → logprob: -12.879464149475098

Token 186: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.34296610951423645
    2. ' x' → logprob: -1.967966079711914
    3. 'aa' → logprob: -2.717966079711914
    4. 'c' → logprob: -4.342966079711914
    5. 'a' → logprob: -4.592966079711914
    6. ' aa' → logprob: -4.717966079711914
    7. 'delta' → logprob: -4.842966079711914
    8. 'condition' → logprob: -4.967966079711914
    9. ' c' → logprob: -5.342966079711914
    10. ' delta' → logprob: -5.717966079711914

Token 187: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0009489760850556195
    2. '):' → logprob: -7.000948905944824
    3. ' ,' → logprob: -11.000948905944824
    4. '):
' → logprob: -11.375948905944824
    5. ',x' → logprob: -12.625948905944824
    6. ')' → logprob: -13.500948905944824
    7. ',c' → logprob: -13.500948905944824
    8. '   ' → logprob: -13.625948905944824
    9. ',
' → logprob: -14.125948905944824
    10. ',y' → logprob: -14.875948905944824

Token 188: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.000816773681435734
    2. 'if' → logprob: -7.500816822052002
    3. ' if' → logprob: -8.250816345214844
    4. 'return' → logprob: -13.750816345214844
    5. '   ' → logprob: -13.875816345214844
    6. ' return' → logprob: -14.625816345214844
    7. 'while' → logprob: -16.375816345214844
    8. '    
' → logprob: -16.500816345214844
    9. ' while' → logprob: -16.625816345214844
    10. '	if' → logprob: -16.625816345214844

Token 189: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.036819346249103546
    2. '   ' → logprob: -3.5368194580078125
    3. ' if' → logprob: -5.0368194580078125
    4. 'while' → logprob: -8.161819458007812
    5. 'return' → logprob: -8.286819458007812
    6. ' while' → logprob: -12.161819458007812
    7. ' return' → logprob: -12.286819458007812
    8. ' ' → logprob: -13.661819458007812
    9. '	if' → logprob: -14.786819458007812
    10. '  ' → logprob: -15.536819458007812

Token 190: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.2703803479671478
    2. 'x' → logprob: -1.8953803777694702
    3. ' c' → logprob: -3.2703802585601807
    4. ' not' → logprob: -3.3953802585601807
    5. 'c' → logprob: -5.14538049697876
    6. ' check' → logprob: -5.39538049697876
    7. 'not' → logprob: -5.64538049697876
    8. 'check' → logprob: -7.27038049697876
    9. ' ' → logprob: -8.020380020141602
    10. '   ' → logprob: -9.270380020141602

Token 191: ' >' (ID: 1424)
  Prédit: '<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<' → logprob: -0.39098140597343445
    2. ' <' → logprob: -1.5159814357757568
    3. '>=' → logprob: -2.640981435775757
    4. ' >=' → logprob: -3.515981435775757
    5. '==' → logprob: -6.515981197357178
    6. ' ==' → logprob: -7.515981197357178
    7. '>' → logprob: -7.515981197357178
    8. '<=' → logprob: -8.890981674194336
    9. '[' → logprob: -9.390981674194336
    10. ' >' → logprob: -9.640981674194336

Token 192: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.015038477256894112
    2. ' ' → logprob: -4.26503849029541
    3. '=' → logprob: -7.14003849029541
    4. '-' → logprob: -10.14003849029541
    5. ' -' → logprob: -11.64003849029541
    6. '1' → logprob: -11.76503849029541
    7. 'c' → logprob: -12.01503849029541
    8. '   ' → logprob: -12.26503849029541
    9. '  ' → logprob: -13.01503849029541
    10. '9' → logprob: -13.39003849029541

Token 193: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00013846253568772227
    2. '-' → logprob: -9.500138282775879
    3. ' ' → logprob: -9.875138282775879
    4. '1' → logprob: -12.250138282775879
    5. 'c' → logprob: -13.500138282775879
    6. '10' → logprob: -13.625138282775879
    7. '9' → logprob: -14.125138282775879
    8. ' -' → logprob: -14.375138282775879
    9. '100' → logprob: -14.625138282775879
    10. '

' → logprob: -15.125138282775879

Token 194: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.21142396330833435
    2. ':
' → logprob: -1.7114239931106567
    3. ' and' → logprob: -4.711423873901367
    4. '   ' → logprob: -7.211423873901367
    5. ' or' → logprob: -9.586423873901367
    6. 'and' → logprob: -9.961423873901367
    7. ',' → logprob: -10.086423873901367
    8. '       ' → logprob: -10.961423873901367
    9. ' :
' → logprob: -10.961423873901367
    10. ' :' → logprob: -11.211423873901367

Token 195: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.11299023032188416
    2. '   ' → logprob: -2.237990140914917
    3. ' return' → logprob: -9.362990379333496
    4. ' and' → logprob: -10.612990379333496
    5. 'return' → logprob: -10.862990379333496
    6. 'c' → logprob: -11.487990379333496
    7. ',' → logprob: -11.612990379333496
    8. ' c' → logprob: -12.237990379333496
    9. ' ' → logprob: -13.237990379333496
    10. ':' → logprob: -13.237990379333496

Token 196: ' c' (ID: 274)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.49189358949661255
    2. 'c' (adapté à ' c') → logprob: -1.2418935298919678
    3. 'return' → logprob: -2.4918935298919678
    4. ' return' → logprob: -4.491893768310547
    5. ' c' → logprob: -5.616893768310547
    6. '       ' → logprob: -6.366893768310547
    7. ' ' → logprob: -8.866893768310547
    8. '           ' → logprob: -9.991893768310547
    9. '  ' → logprob: -10.366893768310547
    10. '    ' → logprob: -10.491893768310547

Token 197: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3336605429649353
    2. '=' → logprob: -1.33366060256958
    3. ' +=' → logprob: -4.20866060256958
    4. '+=' → logprob: -5.58366060256958
    5. ' -=' → logprob: -6.58366060256958
    6. '-=' → logprob: -8.833660125732422
    7. '   ' → logprob: -10.958660125732422
    8. ',' → logprob: -11.208660125732422
    9. '-' → logprob: -12.708660125732422
    10. ' ' → logprob: -13.333660125732422

Token 198: ' decrement' (ID: 121877)
  Prédit: 'increment'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'increment' → logprob: -0.9253118634223938
    2. ' decrement' → logprob: -1.175311803817749
    3. 'de' → logprob: -1.675311803817749
    4. ' increment' → logprob: -2.300311803817749
    5. 'c' → logprob: -5.050312042236328
    6. ' c' → logprob: -7.425312042236328
    7. 'subtract' → logprob: -8.925312042236328
    8. '   ' → logprob: -10.050312042236328
    9. ' decre' → logprob: -10.175312042236328
    10. ' subtract' → logprob: -10.800312042236328

Token 199: '_c' (ID: 1303)
  Prédit: '_c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_c' → logprob: -3.082895273109898e-05
    2. '_' → logprob: -10.875030517578125
    3. '(c' → logprob: -11.875030517578125
    4. 'c' → logprob: -12.500030517578125
    5. ' _' → logprob: -14.750030517578125
    6. '```' → logprob: -15.500030517578125
    7. '(' → logprob: -15.625030517578125
    8. '(_' → logprob: -15.750030517578125
    9. '\' → logprob: -16.500030517578125
    10. '_(' → logprob: -16.875030517578125

Token 200: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -1.981667537620524e-06
    2. 'c' → logprob: -13.250001907348633
    3. '(' → logprob: -16.250001907348633
    4. ' (' → logprob: -16.750001907348633
    5. ')c' → logprob: -17.250001907348633
    6. '(
' → logprob: -18.125001907348633
    7. ',c' → logprob: -18.750001907348633
    8. ' c' → logprob: -19.875001907348633
    9. '	c' → logprob: -20.125001907348633
    10. ')' → logprob: -20.375001907348633

Token 201: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.004090985283255577
    2. ')
' → logprob: -5.504090785980225
    3. '   ' → logprob: -12.504091262817383
    4. '())' → logprob: -12.879091262817383
    5. ')return' → logprob: -13.254091262817383
    6. ')

' → logprob: -13.504091262817383
    7. ' )' → logprob: -13.629091262817383
    8. ')c' → logprob: -15.004091262817383
    9. '))' → logprob: -15.129091262817383
    10. '(' → logprob: -15.254091262817383

Token 202: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0019561098888516426
    2. '
' → logprob: -7.626955986022949
    3. ' return' → logprob: -7.876955986022949
    4. '    
' → logprob: -7.876955986022949
    5. '	return' → logprob: -8.87695598602295
    6. '<|end|>' → logprob: -8.87695598602295
    7. '       ' → logprob: -9.00195598602295
    8. ' 
' → logprob: -9.62695598602295
    9. 'return' → logprob: -9.75195598602295
    10. ' ' → logprob: -10.12695598602295

Token 203: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.15308213233947754
    2. ' return' → logprob: -2.1530821323394775
    3. '   ' → logprob: -4.153081893920898
    4. 'else' → logprob: -5.028081893920898
    5. ' else' → logprob: -6.028081893920898
    6. 'elif' → logprob: -7.403081893920898
    7. '	return' → logprob: -8.653081893920898
    8. ' ' → logprob: -8.903081893920898
    9. ' elif' → logprob: -9.403081893920898
    10. '
' → logprob: -9.903081893920898

Token 204: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.02337801642715931
    2. 'c' → logprob: -3.7733781337738037
    3. ' ' → logprob: -9.023378372192383
    4. '	c' → logprob: -11.398378372192383
    5. '_c' → logprob: -14.898378372192383
    6. ' ' → logprob: -15.773378372192383
    7. '‌' → logprob: -16.898378372192383
    8. ',c' → logprob: -17.148378372192383
    9. '(c' → logprob: -17.398378372192383
    10. '​' → logprob: -17.773378372192383

Token 205: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.017852671444416046
    2. '<|end|>' → logprob: -4.142852783203125
    3. '
' → logprob: -7.017852783203125
    4. 'if' → logprob: -8.142852783203125
    5. 'x' → logprob: -8.517852783203125
    6. '#' → logprob: -9.517852783203125
    7. '```' → logprob: -9.517852783203125
    8. '  
' → logprob: -9.892852783203125
    9. '

' → logprob: -10.142852783203125
    10. '<|end|>' → logprob: -10.267852783203125

Token 206: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.12057989090681076
    2. '<|end|>' → logprob: -2.245579957962036
    3. '
' → logprob: -5.620579719543457
    4. 'x' → logprob: -6.245579719543457
    5. '#' → logprob: -7.120579719543457
    6. 'c' → logprob: -7.495579719543457
    7. '```' → logprob: -8.370579719543457
    8. '<|end|>' → logprob: -8.870579719543457
    9. ')' → logprob: -9.495579719543457
    10. 'a' → logprob: -9.495579719543457

Token 207: ' output' (ID: 4733)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.633286714553833
    2. 'main' → logprob: -0.758286714553833
    3. 'def' → logprob: -7.633286476135254
    4. 'solve' → logprob: -10.258286476135254
    5. ' def' → logprob: -10.633286476135254
    6. ' solve' → logprob: -10.758286476135254
    7. 'process' → logprob: -10.758286476135254
    8. 'adjust' → logprob: -11.008286476135254
    9. 'subtract' → logprob: -11.133286476135254
    10. ' adjust' → logprob: -11.633286476135254

Token 208: '_result' (ID: 11623)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.38627251982688904
    2. '_' → logprob: -1.7612725496292114
    3. '_line' → logprob: -2.386272430419922
    4. '(c' → logprob: -3.261272430419922
    5. '_(' → logprob: -5.011272430419922
    6. '(_' → logprob: -5.511272430419922
    7. '_c' → logprob: -6.511272430419922
    8. '(line' → logprob: -7.261272430419922
    9. 'def' → logprob: -7.386272430419922
    10. '_result' → logprob: -7.636272430419922

Token 209: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.18441343307495117
    2. '(result' → logprob: -2.184413433074951
    3. '(' → logprob: -3.184413433074951
    4. '():' → logprob: -4.309413433074951
    5. '(res' → logprob: -8.05941390991211
    6. '(output' → logprob: -8.68441390991211
    7. ' (' → logprob: -8.93441390991211
    8. '(results' → logprob: -9.43441390991211
    9. '(s' → logprob: -9.68441390991211
    10. '()' → logprob: -9.68441390991211

Token 210: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.034183043986558914
    2. ',' → logprob: -4.159183025360107
    3. ')' → logprob: -4.409183025360107
    4. '):
' → logprob: -5.159183025360107
    5. ',c' → logprob: -10.284183502197266
    6. ' ):' → logprob: -11.159183502197266
    7. ':' → logprob: -11.784183502197266
    8. '   ' → logprob: -12.284183502197266
    9. '):
' → logprob: -12.534183502197266
    10. '):

' → logprob: -12.909183502197266

Token 211: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -3.380904672667384e-05
    2. 'print' → logprob: -10.875033378601074
    3. ' print' → logprob: -11.125033378601074
    4. '```' → logprob: -17.12503433227539
    5. '	print' → logprob: -18.12503433227539
    6. '   ' → logprob: -18.25003433227539
    7. '    
' → logprob: -18.62503433227539
    8. '    ' → logprob: -19.75003433227539
    9. '       ' → logprob: -20.00003433227539
    10. '`' → logprob: -20.87503433227539

Token 212: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -7.100059156073257e-05
    2. '   ' → logprob: -10.250070571899414
    3. ' print' → logprob: -10.250070571899414
    4. '```' → logprob: -15.875070571899414
    5. 'pr' → logprob: -19.500070571899414
    6. '`' → logprob: -20.750070571899414
    7. '	print' → logprob: -21.000070571899414
    8. '
' → logprob: -21.625070571899414
    9. 'for' → logprob: -22.250070571899414
    10. '  ' → logprob: -22.250070571899414

Token 213: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.004084335640072823
    2. '(' → logprob: -5.50408411026001
    3. 'c' → logprob: -12.504084587097168
    4. '()' → logprob: -13.129084587097168
    5. '(f' → logprob: -16.00408363342285
    6. '((' → logprob: -16.75408363342285
    7. '(
' → logprob: -17.25408363342285
    8. ' (' → logprob: -17.62908363342285
    9. '(C' → logprob: -18.12908363342285
    10. ' c' → logprob: -19.00408363342285

Token 214: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9361264946837764e-07
    2. ')
' → logprob: -16.5
    3. ' )' → logprob: -16.75
    4. ')`' → logprob: -18.125
    5. '),' → logprob: -19.625
    6. ')}' → logprob: -19.75
    7. ')**' → logprob: -20.125
    8. '))' → logprob: -20.375
    9. ')

' → logprob: -20.5
    10. ').' → logprob: -20.625

Token 215: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00043805985478684306
    2. 'if' → logprob: -7.750438213348389
    3. 'ndef' → logprob: -13.37543773651123
    4. '<|end|>' → logprob: -13.62543773651123
    5. 'for' → logprob: -13.75043773651123
    6. '```' → logprob: -14.00043773651123
    7. 'x' → logprob: -14.12543773651123
    8. '#' → logprob: -14.50043773651123
    9. 'import' → logprob: -14.75043773651123
    10. 'n' → logprob: -14.75043773651123

Token 216: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.020591987296938896
    2. 'def' → logprob: -4.020592212677002
    3. ' main' → logprob: -6.020592212677002
    4. 'if' → logprob: -12.145591735839844
    5. '_main' → logprob: -13.020591735839844
    6. ' def' → logprob: -13.145591735839844
    7. '__' → logprob: -13.770591735839844
    8. '```' → logprob: -16.020591735839844
    9. '
' → logprob: -17.020591735839844
    10. 'input' → logprob: -17.270591735839844

Token 217: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -6.599403423024341e-05
    2. '_' → logprob: -10.500065803527832
    3. '(' → logprob: -11.375065803527832
    4. ' ():' → logprob: -11.375065803527832
    5. '():
' → logprob: -11.750065803527832
    6. '()' → logprob: -11.875065803527832
    7. '_:' → logprob: -16.00006675720215
    8. '(:' → logprob: -16.62506675720215
    9. '():
' → logprob: -16.75006675720215
    10. '()>' → logprob: -17.00006675720215

Token 218: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15377990901470184
    2. ' params' → logprob: -2.153779983520508
    3. 'params' → logprob: -3.778779983520508
    4. ' p' → logprob: -6.528779983520508
    5. ' n' → logprob: -6.528779983520508
    6. 'n' → logprob: -7.903779983520508
    7. 'p' → logprob: -8.528779983520508
    8. ' a' → logprob: -10.653779983520508
    9. '	params' → logprob: -11.278779983520508
    10. 'a' → logprob: -11.403779983520508

Token 219: ' n' (ID: 297)
  Prédit: 'params'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'params' → logprob: -0.265713632106781
    2. 'n' (adapté à ' n') → logprob: -1.7657136917114258
    3. 'N' → logprob: -3.265713691711426
    4. 'p' → logprob: -4.390713691711426
    5. '   ' → logprob: -5.640713691711426
    6. ' params' → logprob: -6.390713691711426
    7. 'x' → logprob: -6.765713691711426
    8. 'a' → logprob: -7.140713691711426
    9. 'm' → logprob: -7.515713691711426
    10. 'aa' → logprob: -7.515713691711426

Token 220: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.6319770216941833
    2. ',' → logprob: -0.8819770216941833
    3. ' ,' → logprob: -3.006977081298828
    4. '=' → logprob: -5.381977081298828
    5. '   ' → logprob: -8.881977081298828
    6. ' ' → logprob: -9.506977081298828
    7. ')' → logprob: -9.756977081298828
    8. '  ' → logprob: -10.381977081298828
    9. '_' → logprob: -10.381977081298828
    10. '    ' → logprob: -10.631977081298828

Token 221: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.010254857130348682
    2. ' x' → logprob: -4.760254859924316
    3. 'k' → logprob: -6.635254859924316
    4. 'm' → logprob: -9.135254859924316
    5. 'q' → logprob: -9.760254859924316
    6. 's' → logprob: -10.010254859924316
    7. 't' → logprob: -10.635254859924316
    8. 'X' → logprob: -10.885254859924316
    9. ' k' → logprob: -11.135254859924316
    10. ' ' → logprob: -11.635254859924316

Token 222: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5759814977645874
    2. ' =' → logprob: -0.8259814977645874
    3. ',' → logprob: -10.200981140136719
    4. ')' → logprob: -12.950981140136719
    5. '<|end|>' → logprob: -13.700981140136719
    6. ' ' → logprob: -14.200981140136719
    7. ')=' → logprob: -15.825981140136719
    8. ' =
' → logprob: -16.20098114013672
    9. ' =)' → logprob: -16.57598114013672
    10. '  ' → logprob: -16.82598114013672

Token 223: ' read' (ID: 1729)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.6933836936950684
    2. ' input' → logprob: -0.6933836936950684
    3. ' read' → logprob: -8.943384170532227
    4. 'read' → logprob: -9.193384170532227
    5. '   ' → logprob: -13.818384170532227
    6. '  ' → logprob: -14.068384170532227
    7. ' ' → logprob: -14.193384170532227
    8. 'map' → logprob: -14.943384170532227
    9. '    ' → logprob: -15.193384170532227
    10. ' map' → logprob: -15.318384170532227

Token 224: '_params' (ID: 14956)
  Prédit: '_params'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_params' → logprob: -1.9504606825648807e-05
    2. '_' → logprob: -11.125019073486328
    3. 'params' → logprob: -12.375019073486328
    4. '()' → logprob: -16.000019073486328
    5. '_par' → logprob: -16.125019073486328
    6. '_param' → logprob: -16.500019073486328
    7. '_Params' → logprob: -17.750019073486328
    8. '_PARAMS' → logprob: -17.875019073486328
    9. '_p' → logprob: -17.875019073486328
    10. '_args' → logprob: -18.125019073486328

Token 225: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.4440884292125702
    2. '<|end|>' → logprob: -1.6940884590148926
    3. '   ' → logprob: -2.0690884590148926
    4. ')' → logprob: -4.069088459014893
    5. ',' → logprob: -4.444088459014893
    6. '<|end|>' → logprob: -5.319088459014893
    7. '(n' → logprob: -5.694088459014893
    8. '
' → logprob: -6.069088459014893
    9. '(' → logprob: -6.444088459014893
    10. '()
' → logprob: -6.569088459014893

Token 226: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0005633997498080134
    2. '<|end|>' → logprob: -8.250563621520996
    3. '    
' → logprob: -8.625563621520996
    4. 'aa' → logprob: -9.875563621520996
    5. '```' → logprob: -10.750563621520996
    6. '
' → logprob: -11.375563621520996
    7. '  ' → logprob: -12.250563621520996
    8. '#aa' → logprob: -12.250563621520996
    9. '    ' → logprob: -12.375563621520996
    10. ' ' → logprob: -12.500563621520996

Token 227: ' aa' (ID: 40260)
  Prédit: 'aa'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aa' (adapté à ' aa') → logprob: -0.00018661346985027194
    2. ' aa' → logprob: -9.000186920166016
    3. '   ' → logprob: -9.750186920166016
    4. 'a' → logprob: -12.625186920166016
    5. ' ' → logprob: -14.375186920166016
    6. 'aaa' → logprob: -14.750186920166016
    7. '  ' → logprob: -15.500186920166016
    8. '#aa' → logprob: -15.750186920166016
    9. 'AA' → logprob: -17.000186920166016
    10. '    
' → logprob: -17.500186920166016

Token 228: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.20141518115997314
    2. '=' → logprob: -1.7014151811599731
    3. '   ' → logprob: -14.201415061950684
    4. ',' → logprob: -14.576415061950684
    5. '(' → logprob: -15.201415061950684
    6. ' ' → logprob: -15.951415061950684
    7. ')' → logprob: -16.326416015625
    8. '()' → logprob: -16.576416015625
    9. ':' → logprob: -16.701416015625
    10. '_' → logprob: -17.201416015625

Token 229: ' read' (ID: 1729)
  Prédit: 'read'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'read' → logprob: -0.14808262884616852
    2. ' read' → logprob: -2.148082733154297
    3. 'input' → logprob: -4.148082733154297
    4. ' input' → logprob: -5.273082733154297
    5. 'sort' → logprob: -11.898082733154297
    6. '	read' → logprob: -14.023082733154297
    7. ' ' → logprob: -14.398082733154297
    8. ' sort' → logprob: -14.523082733154297
    9. '   ' → logprob: -14.648082733154297
    10. 'sorted' → logprob: -15.148082733154297

Token 230: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0018154787831008434
    2. 'aa' → logprob: -6.501815319061279
    3. '_params' → logprob: -8.501815795898438
    4. '_list' → logprob: -10.251815795898438
    5. '_int' → logprob: -10.251815795898438
    6. '_a' → logprob: -10.751815795898438
    7. 'int' → logprob: -12.126815795898438
    8. 'a' → logprob: -12.876815795898438
    9. '(' → logprob: -13.126815795898438
    10. 'params' → logprob: -13.251815795898438

Token 231: 'aa' (ID: 3545)
  Prédit: 'aa'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aa' → logprob: -0.00012844942102674395
    2. 'int' → logprob: -9.625128746032715
    3. 'a' → logprob: -10.125128746032715
    4. 'list' → logprob: -10.875128746032715
    5. '_list' → logprob: -13.500128746032715
    6. 'params' → logprob: -14.375128746032715
    7. 'aaa' → logprob: -15.000128746032715
    8. '```' → logprob: -15.250128746032715
    9. ' aa' → logprob: -15.750128746032715
    10. '()' → logprob: -16.2501277923584

Token 232: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.21482229232788086
    2. '()
' → logprob: -1.9648222923278809
    3. '   ' → logprob: -2.964822292327881
    4. ')' → logprob: -7.589822292327881
    5. '
' → logprob: -8.089822769165039
    6. '<|end|>' → logprob: -9.214822769165039
    7. '    
' → logprob: -9.339822769165039
    8. 'sorted' → logprob: -9.464822769165039
    9. '())' → logprob: -9.964822769165039
    10. 'sort' → logprob: -10.214822769165039

Token 233: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.022125903517007828
    2. 'aa' → logprob: -3.8971259593963623
    3. ' aa' → logprob: -6.772125720977783
    4. '    
' → logprob: -8.772126197814941
    5. 'sorted' → logprob: -9.147126197814941
    6. '
' → logprob: -10.147126197814941
    7. ' sorted' → logprob: -10.522126197814941
    8. '#aa' → logprob: -11.022126197814941
    9. '```' → logprob: -11.022126197814941
    10. '<|end|>' → logprob: -11.272126197814941

Token 234: ' aa' (ID: 40260)
  Prédit: 'aa'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aa' (adapté à ' aa') → logprob: -0.0015325936255976558
    2. 'sorted' → logprob: -7.126532554626465
    3. ' aa' → logprob: -8.126532554626465
    4. '   ' → logprob: -8.376532554626465
    5. 'sort' → logprob: -8.626532554626465
    6. 'aaa' → logprob: -11.626532554626465
    7. 'a' → logprob: -13.001532554626465
    8. 'sa' → logprob: -13.751532554626465
    9. ' sorted' → logprob: -13.876532554626465
    10. '  ' → logprob: -13.876532554626465

Token 235: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.35226649045944214
    2. '=' → logprob: -1.227266550064087
    3. '.sort' → logprob: -5.602266311645508
    4. '.' → logprob: -9.852266311645508
    5. 'sort' → logprob: -10.727266311645508
    6. '_sorted' → logprob: -11.227266311645508
    7. ',' → logprob: -11.727266311645508
    8. ')' → logprob: -11.852266311645508
    9. '[:]' → logprob: -11.977266311645508
    10. 'sorted' → logprob: -12.352266311645508

Token 236: ' sort' (ID: 4506)
  Prédit: ' sort'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sort' → logprob: -0.20560327172279358
    2. 'sort' → logprob: -1.7056032419204712
    3. ' sorted' → logprob: -5.580603122711182
    4. 'sorted' → logprob: -7.830603122711182
    5. '	sort' → logprob: -12.45560359954834
    6. '(sort' → logprob: -13.08060359954834
    7. '   ' → logprob: -13.45560359954834
    8. ' ' → logprob: -13.45560359954834
    9. '.sort' → logprob: -13.83060359954834
    10. ' list' → logprob: -14.83060359954834

Token 237: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -0.003105226904153824
    2. '_' → logprob: -6.003105163574219
    3. '(' → logprob: -7.378105163574219
    4. 'aa' → logprob: -13.503105163574219
    5. '_lst' → logprob: -13.628105163574219
    6. 'list' → logprob: -14.128105163574219
    7. '(_' → logprob: -15.128105163574219
    8. 'List' → logprob: -15.378105163574219
    9. '_(' → logprob: -15.628105163574219
    10. '_List' → logprob: -16.25310516357422

Token 238: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: 0.0
    2. ' (' → logprob: -19.0
    3. '(
' → logprob: -20.375
    4. 'aa' → logprob: -20.375
    5. '((' → logprob: -22.125
    6. '#aa' → logprob: -22.375
    7. '(a' → logprob: -22.75
    8. '```' → logprob: -23.125
    9. '()' → logprob: -23.75
    10. 'AA' → logprob: -24.25

Token 239: 'aa' (ID: 3545)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0052373106591403484
    2. 'aa' → logprob: -5.255237102508545
    3. ')' → logprob: -12.880237579345703
    4. 'AA' → logprob: -14.880237579345703
    5. ' aa' → logprob: -15.505237579345703
    6. '#aa' → logprob: -15.880237579345703
    7. 'a' → logprob: -17.005237579345703
    8. 'aaa' → logprob: -17.130237579345703
    9. '(
' → logprob: -17.505237579345703
    10. '```' → logprob: -17.630237579345703

Token 240: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.018167270347476006
    2. ')
' → logprob: -4.018167495727539
    3. '   ' → logprob: -11.893167495727539
    4. ')

' → logprob: -12.143167495727539
    5. ')
' → logprob: -13.018167495727539
    6. ' )' → logprob: -13.643167495727539
    7. '
' → logprob: -15.268167495727539
    8. '()' → logprob: -15.518167495727539
    9. ' ' → logprob: -15.518167495727539
    10. '[::-' → logprob: -15.518167495727539

Token 241: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05815330520272255
    2. 'c' → logprob: -3.3081533908843994
    3. '
' → logprob: -4.30815315246582
    4. '    
' → logprob: -5.43315315246582
    5. 'for' → logprob: -7.18315315246582
    6. ' c' → logprob: -8.05815315246582
    7. '```' → logprob: -8.30815315246582
    8. '<|end|>' → logprob: -8.55815315246582
    9. ' for' → logprob: -8.80815315246582
    10. 'count' → logprob: -8.93315315246582

Token 242: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' (adapté à ' c') → logprob: -0.0004046938265673816
    2. 'count' → logprob: -8.000404357910156
    3. '   ' → logprob: -10.000404357910156
    4. ' c' → logprob: -11.750404357910156
    5. 'for' → logprob: -12.500404357910156
    6. 'result' → logprob: -12.750404357910156
    7. 'cnt' → logprob: -12.875404357910156
    8. '    
' → logprob: -13.250404357910156
    9. '```' → logprob: -13.500404357910156
    10. '
' → logprob: -14.875404357910156

Token 243: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.016697190701961517
    2. '=' → logprob: -4.141697406768799
    3. ' =' → logprob: -7.766697406768799
    4. ',c' → logprob: -9.26669692993164
    5. ' ,' → logprob: -9.39169692993164
    6. ',x' → logprob: -9.89169692993164
    7. ',n' → logprob: -12.51669692993164
    8. ',k' → logprob: -14.39169692993164
    9. ',s' → logprob: -14.76669692993164
    10. '   ' → logprob: -14.76669692993164

Token 244: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.05495022237300873
    2. 'x' → logprob: -2.92995023727417
    3. ' remaining' → logprob: -11.179949760437012
    4. ' new' → logprob: -11.304949760437012
    5. 'remaining' → logprob: -11.304949760437012
    6. ' _' → logprob: -12.304949760437012
    7. ' leftover' → logprob: -12.429949760437012
    8. '_' → logprob: -12.554949760437012
    9. ' rest' → logprob: -12.804949760437012
    10. ' updated' → logprob: -13.179949760437012

Token 245: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.16035959124565125
    2. '=' → logprob: -1.9103596210479736
    3. ',' → logprob: -8.910359382629395
    4. '<|end|>' → logprob: -15.785359382629395
    5. ' =
' → logprob: -16.28536033630371
    6. ')' → logprob: -16.91036033630371
    7. '.' → logprob: -17.41036033630371
    8. ' ' → logprob: -17.41036033630371
    9. ' ,' → logprob: -17.91036033630371
    10. '=
' → logprob: -18.03536033630371

Token 246: ' subtract' (ID: 71973)
  Prédit: 'subtract'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'subtract' → logprob: -0.10021573305130005
    2. ' subtract' → logprob: -2.3502156734466553
    3. 'sub' → logprob: -12.350215911865234
    4. '   ' → logprob: -12.725215911865234
    5. 'Subtract' → logprob: -13.975215911865234
    6. 'substr' → logprob: -15.350215911865234
    7. '	sub' → logprob: -15.475215911865234
    8. '.subtract' → logprob: -15.475215911865234
    9. 'subtotal' → logprob: -16.225215911865234
    10. ' ' → logprob: -16.725215911865234

Token 247: '_and' (ID: 18645)
  Prédit: '_and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_and' → logprob: -0.0015047440538182855
    2. '_x' → logprob: -6.501504898071289
    3. '_' → logprob: -13.251504898071289
    4. 'and' → logprob: -15.126504898071289
    5. '_a' → logprob: -16.00150489807129
    6. '```' → logprob: -16.87650489807129
    7. '_c' → logprob: -17.25150489807129
    8. 'And' → logprob: -17.25150489807129
    9. ' _' → logprob: -17.25150489807129
    10. 'x' → logprob: -17.62650489807129

Token 248: '_count' (ID: 7536)
  Prédit: '_count'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_count' → logprob: -0.0019301822176203132
    2. 'count' → logprob: -6.251930236816406
    3. '_c' → logprob: -14.251930236816406
    4. '_' → logprob: -15.376930236816406
    5. 'ount' → logprob: -15.376930236816406
    6. ' count' → logprob: -15.626930236816406
    7. 'c' → logprob: -15.751930236816406
    8. '_list' → logprob: -16.376930236816406
    9. '_counts' → logprob: -16.501930236816406
    10. ' _' → logprob: -17.626930236816406

Token 249: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: 0.0
    2. ' (' → logprob: -18.375
    3. '(
' → logprob: -20.25
    4. '(x' → logprob: -20.25
    5. '(ai' → logprob: -20.75
    6. '(xx' → logprob: -21.375
    7. '(a' → logprob: -22.0
    8. '((' → logprob: -22.375
    9. '(c' → logprob: -22.875
    10. '```' → logprob: -22.875

Token 250: 'aa' (ID: 3545)
  Prédit: 'aa'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aa' → logprob: -0.03485168516635895
    2. 'x' → logprob: -3.4098517894744873
    3. '(' → logprob: -7.284851551055908
    4. '(x' → logprob: -8.159852027893066
    5. ' aa' → logprob: -8.909852027893066
    6. ')' → logprob: -10.284852027893066
    7. 'xaa' → logprob: -10.409852027893066
    8. 'xx' → logprob: -10.909852027893066
    9. 'xa' → logprob: -12.409852027893066
    10. ' x' → logprob: -12.784852027893066

Token 251: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0003479785518720746
    2. '(x' → logprob: -8.250348091125488
    3. ' ,' → logprob: -10.125348091125488
    4. '(' → logprob: -10.500348091125488
    5. ',x' → logprob: -11.125348091125488
    6. ')' → logprob: -12.750348091125488
    7. '   ' → logprob: -14.750348091125488
    8. ',n' → logprob: -15.250348091125488
    9. '```' → logprob: -15.750348091125488
    10. '(n' → logprob: -15.750348091125488

Token 252: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.011047814972698689
    2. ' x' → logprob: -4.511047840118408
    3. ')x' → logprob: -17.63604736328125
    4. ')' → logprob: -18.38604736328125
    5. '	x' → logprob: -19.26104736328125
    6. '<|end|>' → logprob: -19.88604736328125
    7. '(x' → logprob: -20.63604736328125
    8. ' ' → logprob: -21.26104736328125
    9. '   ' → logprob: -21.38604736328125
    10. '$x' → logprob: -21.51104736328125

Token 253: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.062003977596759796
    2. ')
' → logprob: -2.8120040893554688
    3. ')
' → logprob: -10.562004089355469
    4. '   ' → logprob: -11.562004089355469
    5. ')

' → logprob: -14.687004089355469
    6. ' )' → logprob: -15.062004089355469
    7. ' )
' → logprob: -16.81200408935547
    8. '),' → logprob: -17.56200408935547
    9. ')c' → logprob: -17.81200408935547
    10. ')`' → logprob: -18.06200408935547

Token 254: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04077444598078728
    2. 'if' → logprob: -3.540774345397949
    3. 'c' → logprob: -4.540774345397949
    4. ' if' → logprob: -9.41577434539795
    5. 'x' → logprob: -9.54077434539795
    6. 'while' → logprob: -9.66577434539795
    7. 'for' → logprob: -9.91577434539795
    8. '```' → logprob: -11.54077434539795
    9. '<|end|>' → logprob: -12.41577434539795
    10. '    
' → logprob: -12.54077434539795

Token 255: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' (adapté à ' c') → logprob: -0.01523539237678051
    2. 'if' → logprob: -4.265235424041748
    3. '   ' → logprob: -7.015235424041748
    4. 'x' → logprob: -9.39023494720459
    5. ' c' → logprob: -10.01523494720459
    6. ' if' → logprob: -11.01523494720459
    7. 'while' → logprob: -11.26523494720459
    8. 'for' → logprob: -11.76523494720459
    9. 'print' → logprob: -12.39023494720459
    10. 'output' → logprob: -14.14023494720459

Token 256: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.02975187823176384
    2. '=' → logprob: -3.529751777648926
    3. ' ' → logprob: -14.529751777648926
    4. '	' → logprob: -15.154751777648926
    5. '<|end|>' → logprob: -15.904751777648926
    6. ',' → logprob: -16.029752731323242
    7. '   ' → logprob: -16.404752731323242
    8. ')' → logprob: -16.654752731323242
    9. ' =
' → logprob: -16.779752731323242
    10. '  ' → logprob: -16.904752731323242

Token 257: ' adjust' (ID: 10266)
  Prédit: 'adjust'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'adjust' → logprob: -0.00523612555116415
    2. ' adjust' → logprob: -5.2552361488342285
    3. '   ' → logprob: -13.63023567199707
    4. 'de' → logprob: -14.00523567199707
    5. ' ' → logprob: -16.13023567199707
    6. ' decrement' → logprob: -16.50523567199707
    7. 'increment' → logprob: -17.00523567199707
    8. '  ' → logprob: -17.13023567199707
    9. 'max' → logprob: -17.63023567199707
    10. 'output' → logprob: -17.75523567199707

Token 258: '_c' (ID: 1303)
  Prédit: '_c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_c' → logprob: -6.704273118884885e-07
    2. '_' → logprob: -14.500000953674316
    3. ' _' → logprob: -17.125
    4. 'c' → logprob: -19.375
    5. '```' → logprob: -19.375
    6. '(_' → logprob: -19.875
    7. '_
' → logprob: -20.5
    8. '_x' → logprob: -20.5
    9. '(c' → logprob: -20.75
    10. '\' → logprob: -21.0

Token 259: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -7.584239938296378e-06
    2. '(' → logprob: -11.875007629394531
    3. ' (' → logprob: -14.625007629394531
    4. '_c' → logprob: -17.75000762939453
    5. '```' → logprob: -18.12500762939453
    6. '(
' → logprob: -18.75000762939453
    7. 'c' → logprob: -19.12500762939453
    8. '(ci' → logprob: -19.37500762939453
    9. '(C' → logprob: -20.25000762939453
    10. '(s' → logprob: -20.37500762939453

Token 260: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00034023032640106976
    2. ',c' → logprob: -8.375340461730957
    3. '(c' → logprob: -9.375340461730957
    4. ' ,' → logprob: -10.875340461730957
    5. '(' → logprob: -12.625340461730957
    6. 'c' → logprob: -13.375340461730957
    7. ')' → logprob: -14.375340461730957
    8. ',
' → logprob: -15.125340461730957
    9. '```' → logprob: -15.875340461730957
    10. '
' → logprob: -17.37533950805664

Token 261: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.008614808320999146
    2. ' x' → logprob: -4.758615016937256
    3. ')' → logprob: -16.633615493774414
    4. '(x' → logprob: -17.008615493774414
    5. '   ' → logprob: -17.008615493774414
    6. ' ' → logprob: -17.133615493774414
    7. '0' → logprob: -17.508615493774414
    8. '	x' → logprob: -17.883615493774414
    9. ')x' → logprob: -18.133615493774414
    10. '
' → logprob: -18.258615493774414

Token 262: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0003372502396814525
    2. ')
' → logprob: -8.000337600708008
    3. '   ' → logprob: -13.375337600708008
    4. ')
' → logprob: -15.125337600708008
    5. ')

' → logprob: -18.125337600708008
    6. ' )' → logprob: -18.125337600708008
    7. ')c' → logprob: -19.125337600708008
    8. ')`' → logprob: -19.125337600708008
    9. '),' → logprob: -19.625337600708008
    10. ',' → logprob: -20.000337600708008

Token 263: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0076520610600709915
    2. 'output' → logprob: -4.882652282714844
    3. ' output' → logprob: -10.382652282714844
    4. '
' → logprob: -12.007652282714844
    5. '    
' → logprob: -12.382652282714844
    6. '	output' → logprob: -13.257652282714844
    7. '```' → logprob: -13.382652282714844
    8. '_output' → logprob: -15.007652282714844
    9. '(output' → logprob: -15.507652282714844
    10. 'input' → logprob: -15.632652282714844

Token 264: ' output' (ID: 4733)
  Prédit: 'output'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'output' (adapté à ' output') → logprob: -0.030171947553753853
    2. '   ' → logprob: -3.5301718711853027
    3. ' output' → logprob: -7.780171871185303
    4. '	output' → logprob: -13.280172348022461
    5. '  ' → logprob: -14.405172348022461
    6. '```' → logprob: -15.280172348022461
    7. ' ' → logprob: -15.405172348022461
    8. '_output' → logprob: -15.655172348022461
    9. '(output' → logprob: -15.655172348022461
    10. '$output' → logprob: -16.28017234802246

Token 265: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -7.896309739408025e-07
    2. '_output' → logprob: -14.875000953674316
    3. '_' → logprob: -15.875000953674316
    4. '_results' → logprob: -16.0
    5. '_res' → logprob: -16.625
    6. ' _' → logprob: -17.25
    7. 'result' → logprob: -17.25
    8. '_RESULT' → logprob: -18.25
    9. '_Result' → logprob: -18.875
    10. '__' → logprob: -19.625

Token 266: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.00038134094211272895
    2. '(' → logprob: -7.8753814697265625
    3. ' (' → logprob: -13.750381469726562
    4. '(C' → logprob: -16.875381469726562
    5. '(
' → logprob: -17.000381469726562
    6. '((' → logprob: -17.250381469726562
    7. '(ci' → logprob: -18.000381469726562
    8. '(

' → logprob: -18.375381469726562
    9. '```' → logprob: -18.875381469726562
    10. 'c' → logprob: -19.250381469726562

Token 267: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -8.2994620242971e-06
    2. ')
' → logprob: -11.750008583068848
    3. ' )' → logprob: -15.250008583068848
    4. ')

' → logprob: -17.37500762939453
    5. '())' → logprob: -17.75000762939453
    6. ')c' → logprob: -18.25000762939453
    7. '()' → logprob: -18.50000762939453
    8. '))' → logprob: -18.62500762939453
    9. ')`' → logprob: -18.62500762939453
    10. ')#' → logprob: -19.37500762939453

Token 268: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0019517067121341825
    2. '
' → logprob: -6.251951694488525
    3. '```' → logprob: -11.626952171325684
    4. '\n' → logprob: -12.626952171325684
    5. 'main' → logprob: -12.876952171325684
    6. '

' → logprob: -13.001952171325684
    7. '\' → logprob: -13.501952171325684
    8. ' if' → logprob: -13.876952171325684
    9. '  
' → logprob: -13.876952171325684
    10. '<|end|>' → logprob: -14.001952171325684

Token 269: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.07163134962320328
    2. '(' → logprob: -2.69663143157959
    3. '()
' → logprob: -6.57163143157959
    4. '(
' → logprob: -8.69663143157959
    5. '
' → logprob: -10.07163143157959
    6. '#' → logprob: -10.57163143157959
    7. '\n' → logprob: -11.19663143157959
    8. '```' → logprob: -11.44663143157959
    9. '()\' → logprob: -11.44663143157959
    10. '\' → logprob: -11.69663143157959


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 267
Tokens correctement prédits (1ère position, stricte): 111
Tokens correctement prédits (1ère position, avec adaptation): 124
Tokens correctement prédits (top 10): 229
Précision stricte (1ère position): 41.57%
Précision adaptée (1ère position): 46.44%
Précision (top 10): 85.77%
================================================================================
