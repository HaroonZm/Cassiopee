================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:04:20
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = eval(input())
print("Yes" if input().count('R') > n/2 else "No")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' eval' (ID: 29383)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00020771251001860946
    2. '("("' → logprob: -9.250207901000977
    3. '('' → logprob: -9.750207901000977
    4. '(eval' → logprob: -10.750207901000977
    5. '(n' → logprob: -11.375207901000977
    6. '(
' → logprob: -12.375207901000977
    7. '(open' → logprob: -12.500207901000977
    8. ''' → logprob: -12.875207901000977
    9. '\(' → logprob: -13.500207901000977
    10. '(

' → logprob: -13.750207901000977

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006647869013249874
    2. '("("' → logprob: -6.006648063659668
    3. ')' → logprob: -6.381648063659668
    4. '('' → logprob: -6.506648063659668
    5. '()' → logprob: -7.881648063659668
    6. '(
' → logprob: -8.506648063659668
    7. ''' → logprob: -9.256648063659668
    8. '`' → logprob: -9.881648063659668
    9. '(""))' → logprob: -10.381648063659668
    10. '("")' → logprob: -10.506648063659668

Token 5: 'print' (ID: 1598)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.9369375109672546
    2. '\n' → logprob: -1.1869375705718994
    3. '*' → logprob: -1.5619375705718994
    4. '\' → logprob: -3.9369375705718994
    5. 'if' → logprob: -4.06193733215332
    6. '#' → logprob: -4.93693733215332
    7. 'for' → logprob: -4.93693733215332
    8. '+
' → logprob: -5.18693733215332
    9. '**' → logprob: -5.43693733215332
    10. ')' → logprob: -5.56193733215332

Token 6: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -6.229872087715194e-05
    2. '('' → logprob: -10.250061988830566
    3. '("("' → logprob: -10.625061988830566
    4. '(n' → logprob: -14.125061988830566
    5. '()' → logprob: -14.250061988830566
    6. '("")' → logprob: -14.875061988830566
    7. ' (' → logprob: -15.250061988830566
    8. '("""' → logprob: -15.875061988830566
    9. '(
' → logprob: -16.000062942504883
    10. '(`' → logprob: -16.250062942504883

Token 7: 'Yes' (ID: 13022)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -1.4880632162094116
    2. '"' → logprob: -1.6130632162094116
    3. 'n' → logprob: -1.7380632162094116
    4. 'Hello' → logprob: -2.113063335418701
    5. '{' → logprob: -2.363063335418701
    6. 'Enter' → logprob: -2.863063335418701
    7. 'f' → logprob: -3.488063335418701
    8. ''' → logprob: -3.988063335418701
    9. '"))' → logprob: -4.113063335418701
    10. 'The' → logprob: -4.363063335418701

Token 8: '"' (ID: 1)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -6.515961285913363e-05
    2. ')' → logprob: -10.125064849853516
    3. ')")' → logprob: -10.875064849853516
    4. '"' → logprob: -12.750064849853516
    5. '!")' → logprob: -13.500064849853516
    6. '"))' → logprob: -13.625064849853516
    7. '\")' → logprob: -15.125064849853516
    8. '")
' → logprob: -16.000064849853516
    9. '");' → logprob: -16.125064849853516
    10. '")

' → logprob: -17.250064849853516

Token 9: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.5690089639974758e-05
    2. ',)' → logprob: -12.500015258789062
    3. '")' → logprob: -12.750015258789062
    4. '))' → logprob: -12.750015258789062
    5. ',' → logprob: -13.125015258789062
    6. '`)' → logprob: -13.500015258789062
    7. '')' → logprob: -14.250015258789062
    8. 'if' → logprob: -14.875015258789062
    9. '),' → logprob: -15.000015258789062
    10. ' )' → logprob: -15.375015258789062

Token 10: ' input' (ID: 3422)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.003894614754244685
    2. 'n' → logprob: -6.128894805908203
    3. ' ' → logprob: -6.378894805908203
    4. ' ' → logprob: -12.253894805908203
    5. ' (' → logprob: -13.628894805908203
    6. '(n' → logprob: -13.628894805908203
    7. ' not' → logprob: -13.753894805908203
    8. ')' → logprob: -14.003894805908203
    9. '(' → logprob: -14.753894805908203
    10. '_n' → logprob: -14.878894805908203

Token 11: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.09048247337341309
    2. '(' → logprob: -2.840482473373413
    3. '()==' → logprob: -3.590482473373413
    4. '==' → logprob: -9.090482711791992
    5. '("' → logprob: -9.340482711791992
    6. '()!=' → logprob: -9.465482711791992
    7. '()=="' → logprob: -9.965482711791992
    8. ' ()' → logprob: -9.965482711791992
    9. '().' → logprob: -10.215482711791992
    10. ')' → logprob: -10.465482711791992

Token 12: 'count' (ID: 5420)
  Prédit: 'startswith'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'startswith' → logprob: -0.002586719812825322
    2. 'strip' → logprob: -6.002586841583252
    3. 'ends' → logprob: -10.127586364746094
    4. 'isdigit' → logprob: -10.502586364746094
    5. 'start' → logprob: -10.627586364746094
    6. 'lower' → logprob: -11.627586364746094
    7. 'count' → logprob: -12.502586364746094
    8. 'starts' → logprob: -13.002586364746094
    9. 'rstrip' → logprob: -13.627586364746094
    10. 'split' → logprob: -14.002586364746094

Token 13: '('' (ID: 706)
  Prédit: '("("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("("' → logprob: -0.5785456299781799
    2. '('' → logprob: -1.3285455703735352
    3. '(' → logprob: -2.078545570373535
    4. '("' → logprob: -3.203545570373535
    5. '(str' → logprob: -5.078545570373535
    6. '(n' → logprob: -7.078545570373535
    7. '("(' → logprob: -7.328545570373535
    8. '(`' → logprob: -8.328545570373535
    9. '('(' → logprob: -9.078545570373535
    10. '(input' → logprob: -9.703545570373535

Token 14: 'R' (ID: 49)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.35574403405189514
    2. 'n' → logprob: -1.8557440042495728
    3. '"' → logprob: -3.3557441234588623
    4. 'str' → logprob: -4.105743885040283
    5. ''n' → logprob: -4.105743885040283
    6. 'a' → logprob: -4.855743885040283
    7. ''a' → logprob: -4.855743885040283
    8. '')' → logprob: -4.855743885040283
    9. ''A' → logprob: -5.230743885040283
    10. ''*' → logprob: -5.355743885040283

Token 15: '')' (ID: 1542)
  Prédit: '')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.07151539623737335
    2. ')' → logprob: -2.8215153217315674
    3. 'R' → logprob: -5.4465155601501465
    4. ')>' → logprob: -6.6965155601501465
    5. ''' → logprob: -6.9465155601501465
    6. ')>=' → logprob: -7.1965155601501465
    7. '>' → logprob: -7.4465155601501465
    8. ')==' → logprob: -7.9465155601501465
    9. ''>' → logprob: -8.196515083312988
    10. '")' → logprob: -8.446515083312988

Token 16: ' >' (ID: 1424)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -1.1899133920669556
    2. ' ==' → logprob: -1.1899133920669556
    3. '>' → logprob: -1.5649133920669556
    4. ' >' → logprob: -2.189913272857666
    5. ')' → logprob: -4.064913272857666
    6. '>=' → logprob: -4.439913272857666
    7. '<' → logprob: -4.689913272857666
    8. ' >=' → logprob: -4.689913272857666
    9. ' <' → logprob: -4.814913272857666
    10. '<n' → logprob: -5.314913272857666

Token 17: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.5252702832221985
    2. 'n' → logprob: -0.9002702832221985
    3. '0' → logprob: -6.775270462036133
    4. ' ' → logprob: -7.400270462036133
    5. '1' → logprob: -8.650270462036133
    6. '2' → logprob: -9.775270462036133
    7. '(n' → logprob: -10.025270462036133
    8. '3' → logprob: -10.650270462036133
    9. ' (' → logprob: -10.650270462036133
    10. '(' → logprob: -11.275270462036133

Token 18: '/' (ID: 14)
  Prédit: ' else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.03107548877596855
    2. 'else' → logprob: -3.5310754776000977
    3. ')' → logprob: -7.031075477600098
    4. ' ' → logprob: -8.781075477600098
    5. '-' → logprob: -8.906075477600098
    6. ' )' → logprob: -9.781075477600098
    7. '```' → logprob: -10.531075477600098
    8. '*' → logprob: -10.906075477600098
    9. '+' → logprob: -11.406075477600098
    10. 'and' → logprob: -11.906075477600098

Token 19: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0019432762637734413
    2. ' ' → logprob: -6.251943111419678
    3. '3' → logprob: -11.626943588256836
    4. '4' → logprob: -13.251943588256836
    5. '1' → logprob: -13.501943588256836
    6. '10' → logprob: -14.126943588256836
    7. ')' → logprob: -14.626943588256836
    8. '5' → logprob: -15.001943588256836
    9. '  ' → logprob: -15.814443588256836
    10. '6' → logprob: -15.876943588256836

Token 20: ' else' (ID: 1203)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0006644221721217036
    2. ' else' → logprob: -7.750664234161377
    3. ' )' → logprob: -8.625664710998535
    4. 'else' → logprob: -10.125664710998535
    5. '')' → logprob: -11.750664710998535
    6. '))' → logprob: -12.625664710998535
    7. '```' → logprob: -14.375664710998535
    8. ' ' → logprob: -14.625664710998535
    9. '")' → logprob: -14.750664710998535
    10. ')
' → logprob: -15.000664710998535

Token 21: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.008366342633962631
    2. '"No' → logprob: -4.883366107940674
    3. ' "' → logprob: -7.508366107940674
    4. ''' → logprob: -8.758366584777832
    5. ''"' → logprob: -10.633366584777832
    6. 'print' → logprob: -11.133366584777832
    7. ')' → logprob: -12.008366584777832
    8. ' ' → logprob: -12.883366584777832
    9. '   ' → logprob: -13.133366584777832
    10. ' print' → logprob: -13.883366584777832

Token 22: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.0015652115689590573
    2. '"No' → logprob: -6.501564979553223
    3. ' No' → logprob: -9.876564979553223
    4. '"' → logprob: -12.626564979553223
    5. 'NO' → logprob: -13.001564979553223
    6. 'print' → logprob: -13.251564979553223
    7. 'Yes' → logprob: -13.751564979553223
    8. '_No' → logprob: -13.876564979553223
    9. ''' → logprob: -14.376564979553223
    10. '>No' → logprob: -14.876564979553223

Token 23: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.20156985521316528
    2. ')' → logprob: -1.7015697956085205
    3. '')' → logprob: -9.201569557189941
    4. ')")' → logprob: -10.201569557189941
    5. '"' → logprob: -11.326569557189941
    6. '`)' → logprob: -12.826569557189941
    7. ' )' → logprob: -13.951569557189941
    8. '")
' → logprob: -14.326569557189941
    9. '```' → logprob: -14.326569557189941
    10. '”)' → logprob: -14.826569557189941


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 21
Tokens correctement prédits (1ère position, stricte): 5
Tokens correctement prédits (1ère position, avec adaptation): 5
Tokens correctement prédits (top 10): 12
Précision stricte (1ère position): 23.81%
Précision adaptée (1ère position): 23.81%
Précision (top 10): 57.14%
================================================================================
