================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:48:54
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
k_x = input().split()
k = int(k_x[0])
x = int(k_x[1])
i = x - k + 1
res = []
while i < x + k:
    res.append(i)
    i += 1
print(*res)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'k' (ID: 74)
  → Token d'amorce (pas de prédiction)

Token 1: '_x' (ID: 7054)
  → Token d'amorce (pas de prédiction)

Token 2: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 3: ' input' (ID: 3422)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.43032416701316833
    2. '1' → logprob: -1.6803241968154907
    3. ' ' → logprob: -2.180324077606201
    4. 'x' → logprob: -4.180324077606201
    5. '_' → logprob: -4.180324077606201
    6. '[' → logprob: -5.930324077606201
    7. '_x' → logprob: -6.055324077606201
    8. 'k' → logprob: -6.180324077606201
    9. ''' → logprob: -6.555324077606201
    10. '2' → logprob: -6.555324077606201

Token 4: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.009270894341170788
    2. ''' → logprob: -5.384270668029785
    3. '"' → logprob: -6.509270668029785
    4. '[' → logprob: -6.509270668029785
    5. '.' → logprob: -7.759270668029785
    6. '('' → logprob: -7.759270668029785
    7. '_' → logprob: -8.134270668029785
    8. '(
' → logprob: -9.134270668029785
    9. '("("' → logprob: -9.134270668029785
    10. '```' → logprob: -10.009270668029785

Token 5: 'split' (ID: 13627)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.2727373540401459
    2. '+' → logprob: -2.6477372646331787
    3. '()' → logprob: -3.0227372646331787
    4. '_' → logprob: -3.3977372646331787
    5. '(' → logprob: -3.6477372646331787
    6. '.strip' → logprob: -4.147737503051758
    7. '*' → logprob: -4.397737503051758
    8. '[' → logprob: -5.272737503051758
    9. '**' → logprob: -5.397737503051758
    10. '.split' → logprob: -6.022737503051758

Token 6: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01623893715441227
    2. '()' → logprob: -4.141239166259766
    3. '(
' → logprob: -9.391239166259766
    4. '('' → logprob: -9.766239166259766
    5. '(

' → logprob: -11.016239166259766
    6. '("("' → logprob: -11.016239166259766
    7. '"' → logprob: -12.141239166259766
    8. '(k' → logprob: -12.641239166259766
    9. ' (' → logprob: -12.766239166259766
    10. '```' → logprob: -12.891239166259766

Token 7: 'k' (ID: 74)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.07800906896591187
    2. '=' → logprob: -3.4530091285705566
    3. 'k' → logprob: -4.203009128570557
    4. '[k' → logprob: -4.953009128570557
    5. ' =' → logprob: -5.203009128570557
    6. '#' → logprob: -6.078009128570557
    7. '_' → logprob: -6.328009128570557
    8. '[:]' → logprob: -6.328009128570557
    9. '.' → logprob: -6.453009128570557
    10. 'print' → logprob: -6.703009128570557

Token 8: ' =' (ID: 314)
  Prédit: '_x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_x' → logprob: -0.640080988407135
    2. '_' → logprob: -0.765080988407135
    3. '[' → logprob: -5.01508092880249
    4. '[_' → logprob: -8.015081405639648
    5. ' _' → logprob: -8.765081405639648
    6. '_k' → logprob: -9.640081405639648
    7. '_[' → logprob: -9.765081405639648
    8. '```' → logprob: -10.140081405639648
    9. '_y' → logprob: -10.390081405639648
    10. '[k' → logprob: -10.890081405639648

Token 9: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.08219374716281891
    2. ' int' → logprob: -3.4571938514709473
    3. '[int' → logprob: -3.9571938514709473
    4. 'list' → logprob: -4.457193851470947
    5. 'k' → logprob: -4.707193851470947
    6. ' k' → logprob: -5.582193851470947
    7. ' list' → logprob: -6.457193851470947
    8. '_k' → logprob: -7.207193851470947
    9. 'float' → logprob: -7.957193851470947
    10. '[' → logprob: -8.082193374633789

Token 10: '(k' (ID: 12125)
  Prédit: '(k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(k' → logprob: -0.2824118733406067
    2. '(' → logprob: -1.407411813735962
    3. '('' → logprob: -7.407412052154541
    4. 'k' → logprob: -8.282411575317383
    5. '("("' → logprob: -8.532411575317383
    6. '_k' → logprob: -8.907411575317383
    7. '```' → logprob: -11.407411575317383
    8. '('_' → logprob: -11.532411575317383
    9. '((' → logprob: -12.032411575317383
    10. '(_)' → logprob: -12.407411575317383

Token 11: '_x' (ID: 7054)
  Prédit: '_x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_x' → logprob: -0.02962619997560978
    2. '[' → logprob: -3.9046261310577393
    3. '_' → logprob: -6.029626369476318
    4. '_k' → logprob: -6.029626369476318
    5. '_[' → logprob: -6.904626369476318
    6. 'x' → logprob: -7.154626369476318
    7. '[_' → logprob: -7.279626369476318
    8. '_)' → logprob: -7.529626369476318
    9. ')' → logprob: -7.904626369476318
    10. '[x' → logprob: -8.27962589263916

Token 12: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.5332478142227046e-05
    2. '[k' → logprob: -11.125015258789062
    3. ')' → logprob: -14.750015258789062
    4. ' [' → logprob: -16.375015258789062
    5. '\[' → logprob: -17.125015258789062
    6. '[len' → logprob: -17.625015258789062
    7. '[
' → logprob: -17.625015258789062
    8. '[-' → logprob: -17.875015258789062
    9. '```' → logprob: -18.000015258789062
    10. '[x' → logprob: -18.125015258789062

Token 13: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00014180023572407663
    2. '1' → logprob: -8.875142097473145
    3. ' ' → logprob: -13.250142097473145
    4. ')' → logprob: -16.375141143798828
    5. '```' → logprob: -17.750141143798828
    6. ''' → logprob: -18.375141143798828
    7. '`' → logprob: -18.875141143798828
    8. '])' → logprob: -18.875141143798828
    9. ']' → logprob: -19.000141143798828
    10. '۰' → logprob: -19.187641143798828

Token 14: '])
' (ID: 5169)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.4747259318828583
    2. ')' → logprob: -0.9747259616851807
    3. ']' → logprob: -7.974725723266602
    4. ')]' → logprob: -9.224725723266602
    5. ')])' → logprob: -9.349725723266602
    6. ''])' → logprob: -9.599725723266602
    7. '))' → logprob: -11.724725723266602
    8. ' ])' → logprob: -11.849725723266602
    9. '])
' → logprob: -12.099725723266602
    10. ')
' → logprob: -12.099725723266602

Token 15: 'x' (ID: 87)
  Prédit: 'x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.11939921975135803
    2. ')' → logprob: -3.244399309158325
    3. 'k' → logprob: -3.369399309158325
    4. '<|end|>' → logprob: -3.994399309158325
    5. '```' → logprob: -4.994399070739746
    6. '_x' → logprob: -6.244399070739746
    7. '[' → logprob: -6.244399070739746
    8. '+' → logprob: -6.244399070739746
    9. '#' → logprob: -6.369399070739746
    10. ' x' → logprob: -6.869399070739746

Token 16: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2025638222694397
    2. '=' → logprob: -1.702563762664795
    3. '_' → logprob: -6.827563762664795
    4. ')' → logprob: -11.077564239501953
    5. '_=' → logprob: -11.077564239501953
    6. ' ' → logprob: -11.452564239501953
    7. ',' → logprob: -11.952564239501953
    8. '=int' → logprob: -12.327564239501953
    9. '=_' → logprob: -12.952564239501953
    10. '[' → logprob: -13.452564239501953

Token 17: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.6488964557647705
    2. ' int' → logprob: -0.8988964557647705
    3. ' k' → logprob: -2.7738964557647705
    4. 'k' → logprob: -4.898896217346191
    5. ' x' → logprob: -8.648896217346191
    6. ' ' → logprob: -8.898896217346191
    7. 'x' → logprob: -9.273896217346191
    8. 'input' → logprob: -10.898896217346191
    9. '(int' → logprob: -11.523896217346191
    10. '<int' → logprob: -11.648896217346191

Token 18: '(k' (ID: 12125)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.22921524941921234
    2. '(k' → logprob: -1.6042152643203735
    3. '(x' → logprob: -5.604215145111084
    4. '()' → logprob: -10.604215621948242
    5. '(
' → logprob: -10.854215621948242
    6. '(

' → logprob: -10.979215621948242
    7. '('' → logprob: -11.729215621948242
    8. ' (' → logprob: -11.854215621948242
    9. '("("' → logprob: -12.229215621948242
    10. ' ' → logprob: -12.354215621948242

Token 19: '_x' (ID: 7054)
  Prédit: '_x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_x' → logprob: -0.09207227826118469
    2. '[' → logprob: -2.4670722484588623
    3. ')' → logprob: -6.217072486877441
    4. '])' → logprob: -7.592072486877441
    5. ']' → logprob: -8.342072486877441
    6. '[x' → logprob: -9.842072486877441
    7. '][' → logprob: -9.842072486877441
    8. 'x' → logprob: -10.342072486877441
    9. '_' → logprob: -10.467072486877441
    10. ')[' → logprob: -10.467072486877441

Token 20: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.7432603272027336e-06
    2. ' [' → logprob: -14.125001907348633
    3. ')' → logprob: -14.875001907348633
    4. '][' → logprob: -15.625001907348633
    5. ')[' → logprob: -15.750001907348633
    6. '```' → logprob: -16.500001907348633
    7. '[
' → logprob: -16.750001907348633
    8. '   ' → logprob: -17.125001907348633
    9. '1' → logprob: -17.125001907348633
    10. ']' → logprob: -17.875001907348633

Token 21: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.3319124011322856e-05
    2. ' ' → logprob: -11.375022888183594
    3. '0' → logprob: -11.750022888183594
    4. '])' → logprob: -13.000022888183594
    5. '```' → logprob: -15.125022888183594
    6. ']' → logprob: -15.187522888183594
    7. '   ' → logprob: -15.312522888183594
    8. ')' → logprob: -15.562522888183594
    9. '2' → logprob: -16.625022888183594
    10. '  ' → logprob: -16.687522888183594

Token 22: '])
' (ID: 5169)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -9.253090865968261e-06
    2. '))' → logprob: -12.000009536743164
    3. '])' → logprob: -13.375009536743164
    4. '`)' → logprob: -14.750009536743164
    5. ')
' → logprob: -15.625009536743164
    6. '）' → logprob: -15.750009536743164
    7. ')>' → logprob: -16.000009536743164
    8. ' )' → logprob: -16.000009536743164
    9. '')' → logprob: -16.250009536743164
    10. ']' → logprob: -16.250009536743164

Token 23: 'i' (ID: 72)
  Prédit: 'i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.7039816379547119
    2. 'if' → logprob: -1.578981637954712
    3. 'for' → logprob: -2.078981637954712
    4. 'n' → logprob: -2.453981637954712
    5. '
' → logprob: -3.828981637954712
    6. 'print' → logprob: -4.703981399536133
    7. ' 
' → logprob: -4.828981399536133
    8. '\n' → logprob: -5.078981399536133
    9. '```' → logprob: -5.328981399536133
    10. ' if' → logprob: -5.453981399536133

Token 24: ' =' (ID: 314)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.008917202241718769
    2. '+' → logprob: -5.758917331695557
    3. 'n' → logprob: -5.883917331695557
    4. '=' → logprob: -6.133917331695557
    5. 'nt' → logprob: -7.883917331695557
    6. ' =' → logprob: -8.758916854858398
    7. 'm' → logprob: -9.883916854858398
    8. 'nd' → logprob: -10.133916854858398
    9. '++' → logprob: -10.508916854858398
    10. '+=' → logprob: -11.008916854858398

Token 25: ' x' (ID: 1215)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.11364409327507019
    2. '1' → logprob: -3.2386441230773926
    3. 'k' → logprob: -3.4886441230773926
    4. ' ' → logprob: -3.4886441230773926
    5. ' k' → logprob: -5.238644123077393
    6. 'x' → logprob: -6.738644123077393
    7. ' x' → logprob: -7.863644123077393
    8. '-' → logprob: -9.613643646240234
    9. ' max' → logprob: -9.863643646240234
    10. 'max' → logprob: -10.238643646240234

Token 26: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.20362204313278198
    2. '+' → logprob: -1.9536221027374268
    3. ' ' → logprob: -3.5786221027374268
    4. '<|end|>' → logprob: -4.953621864318848
    5. ' -' → logprob: -5.203621864318848
    6. ' +' → logprob: -7.578621864318848
    7. '=' → logprob: -8.203621864318848
    8. ')' → logprob: -8.578621864318848
    9. 'n' → logprob: -9.078621864318848
    10. '  ' → logprob: -9.078621864318848

Token 27: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.03429386019706726
    2. '(k' → logprob: -3.4092938899993896
    3. '1' → logprob: -7.7842936515808105
    4. '(' → logprob: -8.909294128417969
    5. ' (' → logprob: -10.034294128417969
    6. '0' → logprob: -11.159294128417969
    7. ' k' → logprob: -12.284294128417969
    8. '5' → logprob: -12.659294128417969
    9. '(x' → logprob: -12.659294128417969
    10. '50' → logprob: -12.784294128417969

Token 28: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.05620540305972099
    2. ' +' → logprob: -2.9312055110931396
    3. ' ' → logprob: -7.3062052726745605
    4. '+
' → logprob: -8.431205749511719
    5. '-' → logprob: -9.181205749511719
    6. ' +
' → logprob: -9.306205749511719
    7. '1' → logprob: -9.806205749511719
    8. '+i' → logprob: -10.431205749511719
    9. '```' → logprob: -10.806205749511719
    10. '>' → logprob: -11.306205749511719

Token 29: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.490809417096898e-05
    2. ' ' → logprob: -9.875055313110352
    3. 'i' → logprob: -13.125055313110352
    4. 'k' → logprob: -14.125055313110352
    5. '2' → logprob: -15.500055313110352
    6. '0' → logprob: -15.750055313110352
    7. 'x' → logprob: -15.875055313110352
    8. '100' → logprob: -18.25005531311035
    9. ' i' → logprob: -18.62505531311035
    10. '   ' → logprob: -18.81255531311035

Token 30: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -9.372294698550832e-06
    2. ' ' → logprob: -11.625009536743164
    3. 'i' → logprob: -15.625009536743164
    4. '2' → logprob: -15.875009536743164
    5. 'k' → logprob: -17.062509536743164
    6. '0' → logprob: -17.437509536743164
    7. '   ' → logprob: -18.250009536743164
    8. '-' → logprob: -18.750009536743164
    9. '１' → logprob: -18.812509536743164
    10. '```' → logprob: -19.187509536743164

Token 31: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 32: 'res' (ID: 430)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 33: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6904770731925964
    2. ' =' → logprob: -0.8154770731925964
    3. 'ult' → logprob: -3.565477132797241
    4. 's' → logprob: -4.065476894378662
    5. ' +=' → logprob: -5.940476894378662
    6. 'ults' → logprob: -5.940476894378662
    7. 't' → logprob: -6.440476894378662
    8. '+=' → logprob: -7.065476894378662
    9. '+' → logprob: -7.315476894378662
    10. 'ultat' → logprob: -7.815476894378662

Token 34: ' []
' (ID: 8911)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.33323249220848083
    2. ' i' → logprob: -2.8332324028015137
    3. 'x' → logprob: -3.0832324028015137
    4. '[i' → logprob: -3.0832324028015137
    5. '"' → logprob: -3.5832324028015137
    6. ''' → logprob: -3.8332324028015137
    7. ' ' → logprob: -4.458232402801514
    8. '[' → logprob: -4.708232402801514
    9. 'list' → logprob: -4.833232402801514
    10. '2' → logprob: -5.083232402801514

Token 35: 'while' (ID: 7032)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.1275627315044403
    2. 'while' → logprob: -2.1275627613067627
    3. ' for' → logprob: -7.877562522888184
    4. ' while' → logprob: -8.752562522888184
    5. '<|end|>' → logprob: -10.252562522888184
    6. 'i' → logprob: -10.627562522888184
    7. '```' → logprob: -10.752562522888184
    8. 'if' → logprob: -12.002562522888184
    9. 'range' → logprob: -13.002562522888184
    10. '>' → logprob: -13.502562522888184

Token 36: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.023661546409130096
    2. 'i' → logprob: -3.7736616134643555
    3. ' ' → logprob: -8.523661613464355
    4. ' x' → logprob: -9.523661613464355
    5. ' k' → logprob: -10.273661613464355
    6. '(i' → logprob: -10.398661613464355
    7. ' len' → logprob: -10.773661613464355
    8. ' True' → logprob: -11.523661613464355
    9. 'x' → logprob: -11.898661613464355
    10. 'k' → logprob: -12.273661613464355

Token 37: ' <' (ID: 464)
  Prédit: ' <='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.16428720951080322
    2. '<=' → logprob: -1.9142872095108032
    3. ' <' → logprob: -6.039287090301514
    4. '<' → logprob: -6.414287090301514
    5. ' ' → logprob: -11.164287567138672
    6. ' in' → logprob: -12.289287567138672
    7. ' ≤' → logprob: -12.789287567138672
    8. ' <=",' → logprob: -13.289287567138672
    9. '```' → logprob: -13.289287567138672
    10. '<len' → logprob: -13.914287567138672

Token 38: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.06688951700925827
    2. '=' → logprob: -3.441889524459839
    3. ' x' → logprob: -3.441889524459839
    4. '=x' → logprob: -7.44188928604126
    5. '0' → logprob: -9.691889762878418
    6. ' =' → logprob: -11.566889762878418
    7. '1' → logprob: -11.691889762878418
    8. ' ' → logprob: -12.066889762878418
    9. 'i' → logprob: -12.316889762878418
    10. '(' → logprob: -12.816889762878418

Token 39: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.3698156476020813
    2. ' +' → logprob: -1.2448155879974365
    3. ':' → logprob: -4.369815826416016
    4. '+i' → logprob: -4.994815826416016
    5. '+:' → logprob: -6.744815826416016
    6. '+k' → logprob: -8.119815826416016
    7. '++' → logprob: -9.369815826416016
    8. '+x' → logprob: -10.619815826416016
    9. '+p' → logprob: -10.744815826416016
    10. '+m' → logprob: -10.869815826416016

Token 40: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.00018577903392724693
    2. '1' → logprob: -8.8751859664917
    3. ' k' → logprob: -10.1251859664917
    4. ':' → logprob: -13.1251859664917
    5. 'i' → logprob: -13.5001859664917
    6. '+k' → logprob: -14.2501859664917
    7. ' ' → logprob: -14.3751859664917
    8. '_k' → logprob: -15.5001859664917
    9. 'kx' → logprob: -15.5001859664917
    10. '0' → logprob: -15.7501859664917

Token 41: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0026736375875771046
    2. '+' → logprob: -6.252673625946045
    3. ':
' → logprob: -7.752673625946045
    4. '+:' → logprob: -8.377674102783203
    5. ' :' → logprob: -9.752674102783203
    6. '{' → logprob: -11.877674102783203
    7. ' +' → logprob: -12.127674102783203
    8. '>:' → logprob: -13.127674102783203
    9. '):' → logprob: -13.377674102783203
    10. ' and' → logprob: -13.502674102783203

Token 42: '   ' (ID: 271)
  Prédit: ' res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' res' → logprob: -0.5430800914764404
    2. 'res' → logprob: -1.1680800914764404
    3. '   ' → logprob: -2.2930800914764404
    4. '	res' → logprob: -5.7930803298950195
    5. ':' → logprob: -6.7930803298950195
    6. ' if' → logprob: -7.4180803298950195
    7. ' ' → logprob: -7.5430803298950195
    8. '    
' → logprob: -7.5430803298950195
    9. '<|end|>' → logprob: -7.7930803298950195
    10. ' 
' → logprob: -8.66808032989502

Token 43: ' res' (ID: 694)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' (adapté à ' res') → logprob: -0.2026694267988205
    2. ' res' → logprob: -1.702669382095337
    3. '   ' → logprob: -6.827669620513916
    4. ' ' → logprob: -10.077669143676758
    5. ' if' → logprob: -10.202669143676758
    6. '```' → logprob: -10.577669143676758
    7. '	res' → logprob: -10.577669143676758
    8. 'if' → logprob: -10.952669143676758
    9. '    
' → logprob: -12.327669143676758
    10. '
' → logprob: -12.702669143676758

Token 44: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.0052386182360351086
    2. '.' → logprob: -5.2552385330200195
    3. 'append' → logprob: -13.00523853302002
    4. '.extend' → logprob: -13.38023853302002
    5. ' .' → logprob: -14.50523853302002
    6. '.app' → logprob: -16.005239486694336
    7. '.push' → logprob: -16.255239486694336
    8. '.Append' → logprob: -16.255239486694336
    9. ' append' → logprob: -16.880239486694336
    10. '.add' → logprob: -17.130239486694336

Token 45: '(i' (ID: 3649)
  Prédit: '(i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -0.006782504729926586
    2. '(' → logprob: -5.631782531738281
    3. '(str' → logprob: -5.756782531738281
    4. '('' → logprob: -12.131782531738281
    5. '(f' → logprob: -12.381782531738281
    6. '((' → logprob: -13.006782531738281
    7. '(x' → logprob: -13.631782531738281
    8. '(int' → logprob: -14.506782531738281
    9. ' (' → logprob: -14.756782531738281
    10. '(a' → logprob: -15.006782531738281

Token 46: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.3877018988132477
    2. ')' → logprob: -1.1377018690109253
    3. ')
' → logprob: -7.262701988220215
    4. '   ' → logprob: -9.387701988220215
    5. ' )
' → logprob: -10.637701988220215
    6. ')i' → logprob: -11.512701988220215
    7. ')`
' → logprob: -12.762701988220215
    8. ' )' → logprob: -12.887701988220215
    9. ')

' → logprob: -13.637701988220215
    10. ' ' → logprob: -13.762701988220215

Token 47: '   ' (ID: 271)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.3089350461959839
    2. '   ' → logprob: -1.6839350461959839
    3. '\n' → logprob: -3.0589351654052734
    4. '
' → logprob: -4.308935165405273
    5. '\' → logprob: -4.933935165405273
    6. ' i' → logprob: -5.183935165405273
    7. '    
' → logprob: -6.183935165405273
    8. '```' → logprob: -6.683935165405273
    9. ' 
' → logprob: -7.058935165405273
    10. '  
' → logprob: -7.433935165405273

Token 48: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' (adapté à ' i') → logprob: -0.0032614883966743946
    2. '   ' → logprob: -6.253261566162109
    3. ' i' → logprob: -6.628261566162109
    4. '	i' → logprob: -11.87826156616211
    5. '```' → logprob: -13.87826156616211
    6. ' ' → logprob: -14.12826156616211
    7. '++' → logprob: -14.87826156616211
    8. '+' → logprob: -15.25326156616211
    9. '  ' → logprob: -15.62826156616211
    10. 'print' → logprob: -16.25326156616211

Token 49: ' +=' (ID: 2757)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.04884521663188934
    2. '+=' → logprob: -3.0488452911376953
    3. ' +=' → logprob: -8.673845291137695
    4. '++' → logprob: -9.548845291137695
    5. '+++' → logprob: -12.048845291137695
    6. '=' → logprob: -12.173845291137695
    7. '```' → logprob: -13.798845291137695
    8. ' +' → logprob: -14.048845291137695
    9. '1' → logprob: -14.298845291137695
    10. '+="' → logprob: -14.548845291137695

Token 50: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -7.107425062713446e-06
    2. ' ' → logprob: -11.875006675720215
    3. '   ' → logprob: -16.87500762939453
    4. '2' → logprob: -17.00000762939453
    5. '```' → logprob: -17.75000762939453
    6. '+' → logprob: -18.12500762939453
    7. '0' → logprob: -18.25000762939453
    8. '  ' → logprob: -18.31250762939453
    9. '3' → logprob: -19.56250762939453
    10. '>' → logprob: -19.75000762939453

Token 51: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.3544423381972592e-05
    2. ' ' → logprob: -11.25001335144043
    3. '2' → logprob: -15.12501335144043
    4. '```' → logprob: -16.18751335144043
    5. '１' → logprob: -17.31251335144043
    6. '+' → logprob: -17.62501335144043
    7. '0' → logprob: -18.25001335144043
    8. '3' → logprob: -18.37501335144043
    9. '   ' → logprob: -18.37501335144043
    10. '  ' → logprob: -18.43751335144043

Token 52: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.011846980080008507
    2. 'for' → logprob: -4.761847019195557
    3. '
' → logprob: -6.136847019195557
    4. ' 
' → logprob: -7.511847019195557
    5. ' print' → logprob: -8.636846542358398
    6. ' for' → logprob: -8.636846542358398
    7. '  
' → logprob: -9.386846542358398
    8. '```' → logprob: -10.511846542358398
    9. '<|end|>' → logprob: -11.136846542358398
    10. '\n' → logprob: -11.761846542358398

Token 53: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.004335410427302122
    2. 'for' → logprob: -5.504335403442383
    3. ' print' → logprob: -9.129335403442383
    4. '
' → logprob: -9.379335403442383
    5. ' for' → logprob: -9.879335403442383
    6. '<|end|>' → logprob: -12.379335403442383
    7. '```' → logprob: -12.379335403442383
    8. ' 
' → logprob: -13.004335403442383
    9. '  
' → logprob: -14.004335403442383
    10. '#print' → logprob: -14.629335403442383

Token 54: '(*' (ID: 9000)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5716860890388489
    2. '(*' → logprob: -1.321686029434204
    3. '(res' → logprob: -1.821686029434204
    4. '('' → logprob: -5.696686267852783
    5. '(len' → logprob: -6.446686267852783
    6. '(sum' → logprob: -6.571686267852783
    7. '("' → logprob: -7.821686267852783
    8. '(tuple' → logprob: -8.821685791015625
    9. '()' → logprob: -10.196685791015625
    10. '(list' → logprob: -11.446685791015625

Token 55: 'res' (ID: 430)
  Prédit: 'res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.0011715330183506012
    2. ' res' → logprob: -6.751171588897705
    3. '(res' → logprob: -13.626171112060547
    4. '$res' → logprob: -17.376171112060547
    5. '	res' → logprob: -18.001171112060547
    6. 'resi' → logprob: -18.751171112060547
    7. '_res' → logprob: -18.876171112060547
    8. ' ' → logprob: -19.001171112060547
    9. 're' → logprob: -19.001171112060547
    10. ')' → logprob: -19.876171112060547

Token 56: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.935296834039036e-06
    2. '))' → logprob: -13.50000286102295
    3. ')`' → logprob: -14.62500286102295
    4. ',' → logprob: -15.00000286102295
    5. ' )' → logprob: -15.50000286102295
    6. '`)' → logprob: -15.50000286102295
    7. ')
' → logprob: -16.500003814697266
    8. ')#' → logprob: -16.625003814697266
    9. ',)' → logprob: -16.750003814697266
    10. '')' → logprob: -17.000003814697266


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 54
Tokens correctement prédits (1ère position, stricte): 19
Tokens correctement prédits (1ère position, avec adaptation): 21
Tokens correctement prédits (top 10): 45
Précision stricte (1ère position): 35.19%
Précision adaptée (1ère position): 38.89%
Précision (top 10): 83.33%
================================================================================
