================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:39:23
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = eval(input())
def f(_):return _//2-((not _%2)&1)
print(f(n))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' eval' (ID: 29383)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0003733542689587921
    2. '('' → logprob: -8.375372886657715
    3. '("("' → logprob: -9.375372886657715
    4. '(
' → logprob: -10.500372886657715
    5. '(n' → logprob: -11.500372886657715
    6. ''' → logprob: -12.250372886657715
    7. '(eval' → logprob: -12.250372886657715
    8. '`' → logprob: -13.125372886657715
    9. '```' → logprob: -13.625372886657715
    10. '()' → logprob: -13.875372886657715

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06049143895506859
    2. ')' → logprob: -2.9354913234710693
    3. '("("' → logprob: -6.185491561889648
    4. '('' → logprob: -7.185491561889648
    5. '()' → logprob: -7.310491561889648
    6. '`' → logprob: -8.185491561889648
    7. '(
' → logprob: -8.185491561889648
    8. '```' → logprob: -8.310491561889648
    9. '(""))' → logprob: -8.560491561889648
    10. ''' → logprob: -8.560491561889648

Token 5: 'def' (ID: 1314)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.7104346752166748
    2. '*' → logprob: -0.8354346752166748
    3. '\n' → logprob: -3.460434675216675
    4. '%' → logprob: -4.085434913635254
    5. '#' → logprob: -4.960434913635254
    6. '\' → logprob: -5.585434913635254
    7. 'if' → logprob: -5.960434913635254
    8. '**' → logprob: -5.960434913635254
    9. ')' → logprob: -6.210434913635254
    10. 'for' → logprob: -6.585434913635254

Token 6: ' f' (ID: 285)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.07535099238157272
    2. ' factorial' → logprob: -2.9503509998321533
    3. ' f' → logprob: -4.575350761413574
    4. ' space' → logprob: -6.325350761413574
    5. ' func' → logprob: -6.450350761413574
    6. ' my' → logprob: -6.825350761413574
    7. ' function' → logprob: -6.950350761413574
    8. ' foo' → logprob: -7.075350761413574
    9. '_' → logprob: -7.825350761413574
    10. ' main' → logprob: -7.950350761413574

Token 7: '(_' (ID: 4963)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.005385180003941059
    2. '_' → logprob: -6.255385398864746
    3. '(n' → logprob: -6.630385398864746
    4. 'unction' → logprob: -7.505385398864746
    5. '(a' → logprob: -7.630385398864746
    6. 'unct' → logprob: -8.255385398864746
    7. ')' → logprob: -8.630385398864746
    8. '(x' → logprob: -8.880385398864746
    9. 'a' → logprob: -9.255385398864746
    10. ' (' → logprob: -9.255385398864746

Token 8: '):' (ID: 3127)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.2530657649040222
    2. 'x' → logprob: -1.503065824508667
    3. 'a' → logprob: -7.628065586090088
    4. '_' → logprob: -8.378066062927246
    5. '):' → logprob: -9.003066062927246
    6. 'f' → logprob: -9.128066062927246
    7. ' n' → logprob: -9.878066062927246
    8. 'i' → logprob: -10.753066062927246
    9. '_n' → logprob: -10.878066062927246
    10. ')' → logprob: -10.878066062927246

Token 9: 'return' (ID: 1034)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.14302846789360046
    2. ' ' → logprob: -2.518028497695923
    3. ' _' → logprob: -3.768028497695923
    4. '   ' → logprob: -4.393028259277344
    5. 'n' → logprob: -5.768028259277344
    6. ' return' → logprob: -5.768028259277344
    7. '    ' → logprob: -6.018028259277344
    8. ''' → logprob: -6.143028259277344
    9. ' 
' → logprob: -6.268028259277344
    10. '(' → logprob: -7.018028259277344

Token 10: ' _' (ID: 1175)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.06659054756164551
    2. ' _' → logprob: -2.8165905475616455
    3. '0' → logprob: -6.941590309143066
    4. ' ' → logprob: -7.066590309143066
    5. '_)' → logprob: -7.566590309143066
    6. ' _)' → logprob: -7.566590309143066
    7. ' _.' → logprob: -7.816590309143066
    8. '1' → logprob: -8.441590309143066
    9. '_[' → logprob: -9.316590309143066
    10. '_.' → logprob: -9.691590309143066

Token 11: '//' (ID: 393)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7946264743804932
    2. '+' → logprob: -1.6696264743804932
    3. '*' → logprob: -1.9196264743804932
    4. '_' → logprob: -2.169626474380493
    5. ' ' → logprob: -2.794626474380493
    6. '**' → logprob: -4.794626235961914
    7. ')' → logprob: -4.794626235961914
    8. '(n' → logprob: -5.169626235961914
    9. 'n' → logprob: -5.544626235961914
    10. '[' → logprob: -6.044626235961914

Token 12: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.12134800851345062
    2. '3' → logprob: -2.7463479042053223
    3. '10' → logprob: -3.7463479042053223
    4. '5' → logprob: -5.121347904205322
    5. '7' → logprob: -5.121347904205322
    6. '4' → logprob: -5.371347904205322
    7. '1' → logprob: -5.496347904205322
    8. '9' → logprob: -6.746347904205322
    9. '6' → logprob: -6.871347904205322
    10. '_' → logprob: -7.121347904205322

Token 13: '-' (ID: 12)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.43016713857650757
    2. '*' → logprob: -1.1801671981811523
    3. 'n' → logprob: -4.305167198181152
    4. '_' → logprob: -4.430167198181152
    5. '(' → logprob: -5.180167198181152
    6. 'if' → logprob: -6.555167198181152
    7. '<|end|>' → logprob: -6.680167198181152
    8. ' ' → logprob: -6.805167198181152
    9. '%' → logprob: -6.805167198181152
    10. '
' → logprob: -7.055167198181152

Token 14: '((' (ID: 2054)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.6437040567398071
    2. '_' → logprob: -0.7687040567398071
    3. '2' → logprob: -5.018703937530518
    4. '3' → logprob: -6.268703937530518
    5. '(_' → logprob: -7.393703937530518
    6. ' ' → logprob: -8.268704414367676
    7. 'n' → logprob: -8.268704414367676
    8. '4' → logprob: -8.393704414367676
    9. '(' → logprob: -8.643704414367676
    10. '-' → logprob: -8.643704414367676

Token 15: 'not' (ID: 2878)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.16921812295913696
    2. '_)' → logprob: -1.9192180633544922
    3. '1' → logprob: -6.044218063354492
    4. ' _' → logprob: -6.669218063354492
    5. 'n' → logprob: -7.294218063354492
    6. '(_' → logprob: -7.294218063354492
    7. '_:' → logprob: -7.919218063354492
    8. '_-' → logprob: -7.919218063354492
    9. '_[' → logprob: -8.044218063354492
    10. '_<' → logprob: -8.294218063354492

Token 16: ' _' (ID: 1175)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.5884185433387756
    2. ' _' → logprob: -0.9634185433387756
    3. ' _)' → logprob: -3.588418483734131
    4. ' (_' → logprob: -4.088418483734131
    5. '_)' → logprob: -4.463418483734131
    6. '(_' → logprob: -5.588418483734131
    7. ' ' → logprob: -7.088418483734131
    8. '_%' → logprob: -7.713418483734131
    9. ' (' → logprob: -8.463418960571289
    10. ' ((_' → logprob: -8.713418960571289

Token 17: '%' (ID: 4)
  Prédit: '%'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -0.19787487387657166
    2. ')' → logprob: -1.947874903678894
    3. ' %' → logprob: -4.447875022888184
    4. '%)' → logprob: -4.572875022888184
    5. ' )' → logprob: -4.697875022888184
    6. '&' → logprob: -5.822875022888184
    7. ')%' → logprob: -6.947875022888184
    8. ' %)' → logprob: -6.947875022888184
    9. ' ' → logprob: -8.197875022888184
    10. ' &' → logprob: -8.572875022888184

Token 18: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -7.20734242349863e-05
    2. ' ' → logprob: -10.250072479248047
    3. '3' → logprob: -11.125072479248047
    4. '_' → logprob: -11.625072479248047
    5. '1' → logprob: -11.750072479248047
    6. '4' → logprob: -13.125072479248047
    7. '(' → logprob: -14.250072479248047
    8. '_)' → logprob: -14.750072479248047
    9. '32' → logprob: -15.625072479248047
    10. '6' → logprob: -15.625072479248047

Token 19: ')&' (ID: 34370)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02124727889895439
    2. '))' → logprob: -4.021247386932373
    3. ')==' → logprob: -6.771247386932373
    4. ' )' → logprob: -6.896247386932373
    5. ')+' → logprob: -8.021246910095215
    6. ')!=' → logprob: -8.521246910095215
    7. ')*' → logprob: -9.146246910095215
    8. ')>' → logprob: -9.271246910095215
    9. ' ))' → logprob: -10.271246910095215
    10. ')<<' → logprob: -10.271246910095215

Token 20: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.07005347311496735
    2. '_' → logprob: -3.0700535774230957
    3. '(_' → logprob: -4.320053577423096
    4. '_)' → logprob: -5.445053577423096
    5. '(' → logprob: -6.320053577423096
    6. '(_)' → logprob: -7.695053577423096
    7. ' ' → logprob: -7.945053577423096
    8. '((_' → logprob: -9.070053100585938
    9. '(n' → logprob: -9.320053100585938
    10. ' _' → logprob: -9.320053100585938

Token 21: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00024548539659008384
    2. '))' → logprob: -8.750245094299316
    3. ' )' → logprob: -10.250245094299316
    4. ')))' → logprob: -11.875245094299316
    5. ')
' → logprob: -12.000245094299316
    6. ')`' → logprob: -12.750245094299316
    7. ')*' → logprob: -12.875245094299316
    8. '_)' → logprob: -12.875245094299316
    9. '*' → logprob: -12.875245094299316
    10. '_' → logprob: -13.000245094299316

Token 22: 'print' (ID: 1598)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.3370963931083679
    2. '*' → logprob: -2.0870964527130127
    3. '(' → logprob: -2.8370964527130127
    4. ')' → logprob: -3.5870964527130127
    5. '_' → logprob: -4.087096214294434
    6. 'n' → logprob: -4.462096214294434
    7. '+
' → logprob: -4.587096214294434
    8. '
' → logprob: -4.837096214294434
    9. '(n' → logprob: -5.087096214294434
    10. '\n' → logprob: -5.212096214294434

Token 23: '(f' (ID: 1526)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0007578118238598108
    2. '(f' → logprob: -7.250757694244385
    3. '(print' → logprob: -11.125758171081543
    4. '(n' → logprob: -11.250758171081543
    5. '()' → logprob: -11.875758171081543
    6. '('' → logprob: -12.875758171081543
    7. '((' → logprob: -13.000758171081543
    8. '(eval' → logprob: -13.125758171081543
    9. '("("' → logprob: -14.000758171081543
    10. '(`' → logprob: -14.625758171081543

Token 24: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5308085083961487
    2. '(n' → logprob: -0.9058085083961487
    3. ')' → logprob: -5.530808448791504
    4. '()' → logprob: -5.905808448791504
    5. '(_' → logprob: -7.280808448791504
    6. '())' → logprob: -9.655808448791504
    7. '))' → logprob: -9.905808448791504
    8. '(_)' → logprob: -10.280808448791504
    9. '((' → logprob: -10.405808448791504
    10. '('' → logprob: -10.655808448791504

Token 25: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.10022079944610596
    2. ')' → logprob: -2.3502206802368164
    3. ')))' → logprob: -11.975220680236816
    4. '))
' → logprob: -12.725220680236816
    5. ')n' → logprob: -13.850220680236816
    6. ' ))' → logprob: -14.100220680236816
    7. ' )' → logprob: -14.600220680236816
    8. '+' → logprob: -14.725220680236816
    9. ')
' → logprob: -14.850220680236816
    10. ' ' → logprob: -14.975220680236816


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 23
Tokens correctement prédits (1ère position, stricte): 5
Tokens correctement prédits (1ère position, avec adaptation): 5
Tokens correctement prédits (top 10): 12
Précision stricte (1ère position): 21.74%
Précision adaptée (1ère position): 21.74%
Précision (top 10): 52.17%
================================================================================
