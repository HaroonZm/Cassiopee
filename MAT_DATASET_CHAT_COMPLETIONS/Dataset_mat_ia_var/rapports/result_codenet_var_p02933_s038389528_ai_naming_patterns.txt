================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:47:27
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
input_integer_value = int(input())
input_string_value = input()
if input_integer_value >= 3200:
    print(input_string_value)
else:
    print("red")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'input' (ID: 2586)
  → Token d'amorce (pas de prédiction)

Token 1: '_integer' (ID: 82911)
  → Token d'amorce (pas de prédiction)

Token 2: '_value' (ID: 6734)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.18384605646133423
    2. '(' → logprob: -2.0588459968566895
    3. '[' → logprob: -4.1838459968566895
    4. '=' → logprob: -4.5588459968566895
    5. ')' → logprob: -4.5588459968566895
    6. '```' → logprob: -6.1838459968566895
    7. ' =' → logprob: -7.1838459968566895
    8. '.' → logprob: -8.183846473693848
    9. ' ' → logprob: -8.183846473693848
    10. ']' → logprob: -9.183846473693848

Token 4: ' int' (ID: 677)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.04800943657755852
    2. '0' → logprob: -3.1730093955993652
    3. ' int' → logprob: -6.048009395599365
    4. '42' → logprob: -6.673009395599365
    5. '1' → logprob: -8.173009872436523
    6. 'int' → logprob: -8.173009872436523
    7. ' input' → logprob: -8.423009872436523
    8. 'input' → logprob: -8.423009872436523
    9. '10' → logprob: -8.673009872436523
    10. '5' → logprob: -9.298009872436523

Token 5: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.000644764571916312
    2. '('' → logprob: -8.62564468383789
    3. '```' → logprob: -9.12564468383789
    4. '(input' → logprob: -9.62564468383789
    5. '()' → logprob: -9.62564468383789
    6. '[' → logprob: -10.25064468383789
    7. ''' → logprob: -10.25064468383789
    8. '(
' → logprob: -11.00064468383789
    9. ' (' → logprob: -11.00064468383789
    10. '("("' → logprob: -11.12564468383789

Token 6: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1002364382147789
    2. ')' → logprob: -2.600236415863037
    3. '()' → logprob: -3.975236415863037
    4. '())' → logprob: -6.350236415863037
    5. '('' → logprob: -9.350236892700195
    6. '(()' → logprob: -9.850236892700195
    7. '(""))' → logprob: -9.975236892700195
    8. '```' → logprob: -9.975236892700195
    9. '(
' → logprob: -10.100236892700195
    10. '))' → logprob: -10.100236892700195

Token 7: 'input' (ID: 2586)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.10376624763011932
    2. 'if' → logprob: -2.9787662029266357
    3. '*' → logprob: -3.7287662029266357
    4. '%' → logprob: -4.103766441345215
    5. '#' → logprob: -6.228766441345215
    6. '+
' → logprob: -6.728766441345215
    7. ' if' → logprob: -6.978766441345215
    8. '**' → logprob: -7.478766441345215
    9. '_' → logprob: -7.728766441345215
    10. '=' → logprob: -7.853766441345215

Token 8: '_string' (ID: 8609)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.21922080218791962
    2. '()' → logprob: -2.2192208766937256
    3. '_' → logprob: -2.4692208766937256
    4. '(
' → logprob: -7.0942206382751465
    5. ')' → logprob: -7.2192206382751465
    6. '```' → logprob: -7.5942206382751465
    7. '_parent' → logprob: -8.219221115112305
    8. '('' → logprob: -8.594221115112305
    9. '("")' → logprob: -8.969221115112305
    10. '("("' → logprob: -9.094221115112305

Token 9: '_value' (ID: 6734)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.19076542556285858
    2. '(' → logprob: -2.190765380859375
    3. '_value' → logprob: -3.190765380859375
    4. '()' → logprob: -5.440765380859375
    5. '```' → logprob: -5.690765380859375
    6. '[' → logprob: -5.815765380859375
    7. ')' → logprob: -6.565765380859375
    8. '.' → logprob: -6.940765380859375
    9. '('_' → logprob: -6.940765380859375
    10. '_values' → logprob: -7.190765380859375

Token 10: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.7211293578147888
    2. '.' → logprob: -1.4711294174194336
    3. '+' → logprob: -2.4711294174194336
    4. ')' → logprob: -2.4711294174194336
    5. '[' → logprob: -2.7211294174194336
    6. '=' → logprob: -4.471129417419434
    7. '.strip' → logprob: -4.846129417419434
    8. '(' → logprob: -5.346129417419434
    9. '```' → logprob: -5.471129417419434
    10. ' =' → logprob: -6.221129417419434

Token 11: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.4740970730781555
    2. 'input' → logprob: -0.9740970730781555
    3. 'str' → logprob: -11.97409725189209
    4. ' str' → logprob: -12.09909725189209
    5. ' ' → logprob: -12.47409725189209
    6. '=input' → logprob: -13.59909725189209
    7. '(input' → logprob: -13.84909725189209
    8. ' ' → logprob: -14.09909725189209
    9. '<input' → logprob: -15.09909725189209
    10. '	input' → logprob: -15.22409725189209

Token 12: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.056920409202575684
    2. '(' → logprob: -3.0569205284118652
    3. ')' → logprob: -5.306920528411865
    4. '```' → logprob: -6.181920528411865
    5. '())' → logprob: -7.306920528411865
    6. ' ' → logprob: -8.806920051574707
    7. '`()' → logprob: -9.556920051574707
    8. ' ()' → logprob: -10.056920051574707
    9. '().' → logprob: -10.431920051574707
    10. '   ' → logprob: -10.556920051574707

Token 13: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.1016227975487709
    2. 'i' → logprob: -2.7266228199005127
    3. 'print' → logprob: -4.476622581481934
    4. '#' → logprob: -4.601622581481934
    5. ' if' → logprob: -6.351622581481934
    6. '+' → logprob: -6.476622581481934
    7. '```' → logprob: -6.476622581481934
    8. 'n' → logprob: -6.851622581481934
    9. 'result' → logprob: -8.101622581481934
    10. '`' → logprob: -8.226622581481934

Token 14: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.5355440378189087
    2. ' ' → logprob: -0.9105440378189087
    3. 'input' → logprob: -4.410543918609619
    4. '  ' → logprob: -8.910544395446777
    5. ' ' → logprob: -10.910544395446777
    6. '_input' → logprob: -11.410544395446777
    7. ' not' → logprob: -11.660544395446777
    8. '	input' → logprob: -13.035544395446777
    9. ' '' → logprob: -13.160544395446777
    10. ' (' → logprob: -13.160544395446777

Token 15: '_integer' (ID: 82911)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.10070639848709106
    2. '_integer' → logprob: -2.6007063388824463
    3. '_string' → logprob: -4.100706577301025
    4. ' _' → logprob: -5.475706577301025
    5. '_value' → logprob: -7.475706577301025
    6. '__' → logprob: -10.350706100463867
    7. '_character' → logprob: -10.600706100463867
    8. '_variable' → logprob: -10.600706100463867
    9. '_boolean' → logprob: -10.850706100463867
    10. '```' → logprob: -10.850706100463867

Token 16: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.00033558503491804004
    2. '_' → logprob: -8.125335693359375
    3. '_val' → logprob: -10.250335693359375
    4. ' _' → logprob: -14.000335693359375
    5. '>' → logprob: -14.125335693359375
    6. '_values' → logprob: -14.625335693359375
    7. '_v' → logprob: -14.875335693359375
    8. ')_' → logprob: -15.375335693359375
    9. '```' → logprob: -15.375335693359375
    10. '_Value' → logprob: -15.625335693359375

Token 17: ' >=' (ID: 5064)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.03141240403056145
    2. ' >=' → logprob: -4.531412601470947
    3. ' ==' → logprob: -4.656412601470947
    4. ' <' → logprob: -5.281412601470947
    5. '>' → logprob: -6.031412601470947
    6. ' <=' → logprob: -6.531412601470947
    7. ' ' → logprob: -6.656412601470947
    8. ' %' → logprob: -8.281412124633789
    9. '==' → logprob: -9.906412124633789
    10. ' !=' → logprob: -10.281412124633789

Token 18: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.07292506098747253
    2. '10' → logprob: -3.197925090789795
    3. '0' → logprob: -3.822925090789795
    4. '18' → logprob: -5.322925090789795
    5. '100' → logprob: -6.197925090789795
    6. '1' → logprob: -8.072924613952637
    7. '5' → logprob: -8.572924613952637
    8. '50' → logprob: -9.447924613952637
    9. '20' → logprob: -9.572924613952637
    10. '3' → logprob: -11.572924613952637

Token 19: '320' (ID: 15415)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.4405503273010254
    2. ' ' → logprob: -1.5655503273010254
    3. '18' → logprob: -2.5655503273010254
    4. '10' → logprob: -2.8155503273010254
    5. '100' → logprob: -4.940550327301025
    6. '1' → logprob: -5.940550327301025
    7. '5' → logprob: -8.315549850463867
    8. '20' → logprob: -8.815549850463867
    9. '50' → logprob: -9.440549850463867
    10. '2' → logprob: -9.815549850463867

Token 20: '0' (ID: 15)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.026470869779586792
    2. ' :' → logprob: -3.651470899581909
    3. ' and' → logprob: -9.401471138000488
    4. '0' → logprob: -10.526471138000488
    5. ':
' → logprob: -10.651471138000488
    6. ' :
' → logprob: -11.901471138000488
    7. '':' → logprob: -12.651471138000488
    8. ':**' → logprob: -12.651471138000488
    9. '':'' → logprob: -12.776471138000488
    10. '+:' → logprob: -12.776471138000488

Token 21: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0009226576657965779
    2. ' :' → logprob: -7.000922679901123
    3. ':
' → logprob: -11.875922203063965
    4. ' and' → logprob: -14.125922203063965
    5. ':**' → logprob: -14.125922203063965
    6. '):' → logprob: -14.250922203063965
    7. '>:' → logprob: -14.750922203063965
    8. '：' → logprob: -15.000922203063965
    9. '':' → logprob: -15.000922203063965
    10. '':'' → logprob: -15.500922203063965

Token 22: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.30757543444633484
    2. '   ' → logprob: -2.0575754642486572
    3. '\n' → logprob: -2.8075754642486572
    4. ' :' → logprob: -3.1825754642486572
    5. ':
' → logprob: -4.932575225830078
    6. '    ' → logprob: -5.432575225830078
    7. ' ' → logprob: -5.432575225830078
    8. '\' → logprob: -5.432575225830078
    9. ' :
' → logprob: -5.557575225830078
    10. 'print' → logprob: -5.932575225830078

Token 23: ' print' (ID: 2123)
  Prédit: ' pass'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pass' → logprob: -0.8977636694908142
    2. ' print' → logprob: -1.522763729095459
    3. ' input' → logprob: -1.772763729095459
    4. 'print' (adapté à ' print') → logprob: -2.272763729095459
    5. 'input' → logprob: -2.897763729095459
    6. 'pass' → logprob: -4.397763729095459
    7. ' color' → logprob: -4.522763729095459
    8. ' if' → logprob: -4.647763729095459
    9. ' ' → logprob: -6.022763729095459
    10. 'if' → logprob: -6.397763729095459

Token 24: '(input' (ID: 10054)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.13656656444072723
    2. '(' → logprob: -2.261566638946533
    3. '('' → logprob: -4.761566638946533
    4. '(input' → logprob: -4.886566638946533
    5. '("")' → logprob: -5.636566638946533
    6. '()' → logprob: -6.011566638946533
    7. '("("' → logprob: -6.761566638946533
    8. '("(' → logprob: -9.511566162109375
    9. '("""' → logprob: -10.261566162109375
    10. '(""' → logprob: -10.636566162109375

Token 25: '_string' (ID: 8609)
  Prédit: '_string'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_string' → logprob: -0.00022201328829396516
    2. '_integer' → logprob: -8.750222206115723
    3. '_' → logprob: -9.750222206115723
    4. '_value' → logprob: -13.375222206115723
    5. '_)' → logprob: -14.000222206115723
    6. ')' → logprob: -14.000222206115723
    7. ')_' → logprob: -14.375222206115723
    8. '_str' → logprob: -15.375222206115723
    9. '_String' → logprob: -15.625222206115723
    10. ' _' → logprob: -15.625222206115723

Token 26: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -4.584861744660884e-05
    2. '_val' → logprob: -10.375045776367188
    3. ')_' → logprob: -12.000045776367188
    4. ')' → logprob: -12.250045776367188
    5. '_' → logprob: -12.750045776367188
    6. 'value' → logprob: -15.500045776367188
    7. '_v' → logprob: -15.750045776367188
    8. '_va' → logprob: -16.000045776367188
    9. '_string' → logprob: -16.375045776367188
    10. ' _' → logprob: -16.625045776367188

Token 27: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.008129963040119e-06
    2. ' )' → logprob: -13.250003814697266
    3. '))' → logprob: -13.625003814697266
    4. '`)' → logprob: -14.875003814697266
    5. '')' → logprob: -15.000003814697266
    6. '")' → logprob: -15.875003814697266
    7. '）' → logprob: -16.500003814697266
    8. ')`' → logprob: -16.625003814697266
    9. ')
' → logprob: -16.750003814697266
    10. '()' → logprob: -17.375003814697266

Token 28: 'else' (ID: 2807)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 29: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -7.040457421680912e-05
    2. ':
' → logprob: -9.875070571899414
    3. '   ' → logprob: -11.125070571899414
    4. ' :' → logprob: -12.625070571899414
    5. '):' → logprob: -15.625070571899414
    6. '():' → logprob: -15.625070571899414
    7. ':return' → logprob: -16.375070571899414
    8. '    ' → logprob: -16.500070571899414
    9. '：' → logprob: -16.500070571899414
    10. ':**' → logprob: -17.000070571899414

Token 30: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.31304362416267395
    2. '    ' → logprob: -2.1880435943603516
    3. '"' → logprob: -2.5630435943603516
    4. 'print' → logprob: -3.4380435943603516
    5. 'pass' → logprob: -3.8130435943603516
    6. ''' → logprob: -4.813043594360352
    7. ' pass' → logprob: -5.188043594360352
    8. '```' → logprob: -5.813043594360352
    9. ' ' → logprob: -5.938043594360352
    10. '_' → logprob: -6.813043594360352

Token 31: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.1359722763299942
    2. ' print' → logprob: -2.135972261428833
    3. ' pass' → logprob: -5.510972499847412
    4. 'pass' → logprob: -5.760972499847412
    5. '   ' → logprob: -6.385972499847412
    6. '    ' → logprob: -10.135972023010254
    7. ' ' → logprob: -10.760972023010254
    8. '\n' → logprob: -10.760972023010254
    9. ' \' → logprob: -12.260972023010254
    10. '\' → logprob: -12.260972023010254

Token 32: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.746796727180481
    2. '(' → logprob: -1.371796727180481
    3. '()' → logprob: -1.746796727180481
    4. '(input' → logprob: -2.6217966079711914
    5. '('' → logprob: -4.371796607971191
    6. '("")' → logprob: -4.496796607971191
    7. '(int' → logprob: -6.871796607971191
    8. '("("' → logprob: -8.246796607971191
    9. '("<' → logprob: -8.996796607971191
    10. '(-' → logprob: -10.246796607971191

Token 33: 'red' (ID: 1291)
  Prédit: 'red'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'red' → logprob: -0.2203368991613388
    2. '"' → logprob: -3.5953369140625
    3. 'a' → logprob: -3.7203369140625
    4. '以上' → logprob: -3.7203369140625
    5. '不' → logprob: -4.0953369140625
    6. '色' → logprob: -4.3453369140625
    7. '他' → logprob: -4.3453369140625
    8. 'none' → logprob: -4.9703369140625
    9. '一般' → logprob: -5.5953369140625
    10. '赤' → logprob: -5.7828369140625

Token 34: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.0009412388317286968
    2. '"' → logprob: -7.125941276550293
    3. '""' → logprob: -9.250941276550293
    4. ')' → logprob: -10.500941276550293
    5. ' ")' → logprob: -13.000941276550293
    6. '")
' → logprob: -13.500941276550293
    7. '\n' → logprob: -13.625941276550293
    8. '```' → logprob: -13.625941276550293
    9. '">' → logprob: -14.500941276550293
    10. '``' → logprob: -14.500941276550293


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 32
Tokens correctement prédits (1ère position, stricte): 11
Tokens correctement prédits (1ère position, avec adaptation): 12
Tokens correctement prédits (top 10): 26
Précision stricte (1ère position): 34.38%
Précision adaptée (1ère position): 37.50%
Précision (top 10): 81.25%
================================================================================
