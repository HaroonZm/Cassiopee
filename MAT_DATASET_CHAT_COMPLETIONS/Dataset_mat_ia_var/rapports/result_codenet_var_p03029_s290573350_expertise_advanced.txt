================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:59:17
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from sys import stdin

def calculer(a: int, p: int) -> int:
    return (a * 3 + p) // 2

if __name__ == "__main__":
    print(calculer(*map(int, stdin.readline().split())))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' stdin' (ID: 75143)
  Prédit: 'argv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'argv' → logprob: -0.16417361795902252
    2. ' argv' → logprob: -2.2891736030578613
    3. 'exit' → logprob: -3.5391736030578613
    4. ' exit' → logprob: -4.039173603057861
    5. 'import' → logprob: -6.789173603057861
    6. 'stdout' → logprob: -6.789173603057861
    7. 'path' → logprob: -7.914173603057861
    8. 'stdin' → logprob: -8.16417407989502
    9. ' import' → logprob: -8.91417407989502
    10. '.argv' → logprob: -9.28917407989502

Token 4: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.004543930757790804
    2. '.readline' → logprob: -5.629543781280518
    3. '\n' → logprob: -8.004544258117676
    4. '.
' → logprob: -8.504544258117676
    5. '```' → logprob: -9.129544258117676
    6. 'import' → logprob: -9.504544258117676
    7. '.read' → logprob: -9.504544258117676
    8. '
' → logprob: -10.754544258117676
    9. 'newline' → logprob: -10.754544258117676
    10. 'print' → logprob: -10.754544258117676

Token 5: 'def' (ID: 1314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0644008219242096
    2. '.readline' → logprob: -3.1894009113311768
    3. '\n' → logprob: -4.814400672912598
    4. 'for' → logprob: -5.814400672912598
    5. '.read' → logprob: -6.189400672912598
    6. 'import' → logprob: -6.189400672912598
    7. '
' → logprob: -6.689400672912598
    8. ',' → logprob: -7.064400672912598
    9. 'print' → logprob: -7.314400672912598
    10. '\' → logprob: -7.314400672912598

Token 6: ' calcul' (ID: 7559)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.23636378347873688
    2. ' read' → logprob: -1.9863637685775757
    3. ' process' → logprob: -2.8613638877868652
    4. ' ' → logprob: -5.736363887786865
    5. ' space' → logprob: -5.861363887786865
    6. '_read' → logprob: -6.236363887786865
    7. ' parse' → logprob: -6.361363887786865
    8. ' main' → logprob: -6.361363887786865
    9. ' readline' → logprob: -6.736363887786865
    10. '_' → logprob: -7.736363887786865

Token 7: 'er' (ID: 259)
  Prédit: 'ate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ate' → logprob: -0.0005289645632728934
    2. 'ator' → logprob: -7.750528812408447
    3. 'ation' → logprob: -9.500529289245605
    4. '```' → logprob: -12.125529289245605
    5. 'ateur' → logprob: -12.625529289245605
    6. 'er' → logprob: -12.625529289245605
    7. 'ATE' → logprob: -13.125529289245605
    8. 'at' → logprob: -13.250529289245605
    9. 'a' → logprob: -13.250529289245605
    10. 'ating' → logprob: -13.375529289245605

Token 8: '(a' (ID: 6271)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.011991401202976704
    2. '(' → logprob: -4.511991500854492
    3. '_total' → logprob: -9.011991500854492
    4. '_distance' → logprob: -9.011991500854492
    5. '_nombre' → logprob: -9.761991500854492
    6. '_m' → logprob: -10.011991500854492
    7. '(a' → logprob: -10.011991500854492
    8. '_score' → logprob: -10.261991500854492
    9. '_space' → logprob: -10.261991500854492
    10. ' _' → logprob: -10.261991500854492

Token 9: ':' (ID: 25)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.052116937935352325
    2. '):' → logprob: -3.677116870880127
    3. ')' → logprob: -4.302116870880127
    4. ' ,' → logprob: -4.927116870880127
    5. ',b' → logprob: -5.552116870880127
    6. ':' → logprob: -8.552117347717285
    7. '+' → logprob: -8.802117347717285
    8. ',a' → logprob: -9.302117347717285
    9. '[' → logprob: -10.177117347717285
    10. ' )' → logprob: -10.677117347717285

Token 10: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.1017063558101654
    2. 'int' → logprob: -2.3517062664031982
    3. ' ' → logprob: -7.226706504821777
    4. ' str' → logprob: -7.476706504821777
    5. ' float' → logprob: -9.726706504821777
    6. '   ' → logprob: -9.976706504821777
    7. ')' → logprob: -10.226706504821777
    8. '  ' → logprob: -11.351706504821777
    9. 'float' → logprob: -11.476706504821777
    10. 'str' → logprob: -11.726706504821777

Token 11: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.011740478686988354
    2. ')' → logprob: -4.511740684509277
    3. ' ,' → logprob: -8.511740684509277
    4. '):' → logprob: -9.011740684509277
    5. ',b' → logprob: -9.136740684509277
    6. ',a' → logprob: -9.511740684509277
    7. ',
' → logprob: -10.386740684509277
    8. ',int' → logprob: -10.386740684509277
    9. ',)' → logprob: -10.761740684509277
    10. '<|end|>' → logprob: -10.761740684509277

Token 12: ' p' (ID: 275)
  Prédit: ' b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.38687655329704285
    2. 'b' → logprob: -1.1368765830993652
    3. ' ' → logprob: -13.136876106262207
    4. ')' → logprob: -13.261876106262207
    5. ')b' → logprob: -14.261876106262207
    6. ' ' → logprob: -15.261876106262207
    7. 'n' → logprob: -15.511876106262207
    8. 'a' → logprob: -16.386877059936523
    9. ' n' → logprob: -16.386877059936523
    10. 's' → logprob: -16.636877059936523

Token 13: ':' (ID: 25)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.3282705247402191
    2. ')' → logprob: -1.8282705545425415
    3. ',' → logprob: -2.828270435333252
    4. ':' → logprob: -3.953270435333252
    5. 'e' → logprob: -4.328270435333252
    6. 'r' → logprob: -5.328270435333252
    7. ' ):' → logprob: -5.453270435333252
    8. 'i' → logprob: -6.078270435333252
    9. 'er' → logprob: -6.203270435333252
    10. 'y' → logprob: -6.453270435333252

Token 14: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.635395884513855
    2. ' int' → logprob: -0.760395884513855
    3. ')' → logprob: -6.3853960037231445
    4. ' float' → logprob: -7.8853960037231445
    5. 'float' → logprob: -8.135396003723145
    6. ' ' → logprob: -9.260396003723145
    7. ':int' → logprob: -9.385396003723145
    8. ' )' → logprob: -9.885396003723145
    9. '=int' → logprob: -9.885396003723145
    10. '[int' → logprob: -10.385396003723145

Token 15: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08912529051303864
    2. '):' → logprob: -2.464125394821167
    3. ',' → logprob: -8.964125633239746
    4. ')->' → logprob: -9.964125633239746
    5. ':' → logprob: -13.089125633239746
    6. '),' → logprob: -13.839125633239746
    7. '`)' → logprob: -13.964125633239746
    8. '):
' → logprob: -13.964125633239746
    9. ')>' → logprob: -14.089125633239746
    10. ' )' → logprob: -14.214125633239746

Token 16: ' ->' (ID: 2747)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00011951648048125207
    2. '):' → logprob: -9.87511920928955
    3. ' :' → logprob: -10.50011920928955
    4. ':return' → logprob: -10.75011920928955
    5. ':**' → logprob: -12.12511920928955
    6. '':' → logprob: -12.50011920928955
    7. '():' → logprob: -13.37511920928955
    8. ':void' → logprob: -13.75011920928955
    9. '   ' → logprob: -14.12511920928955
    10. '->' → logprob: -14.37511920928955

Token 17: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.047907277941703796
    2. 'int' → logprob: -3.1729073524475098
    3. ' float' → logprob: -5.54790735244751
    4. ' None' → logprob: -7.29790735244751
    5. 'float' → logprob: -8.922906875610352
    6. ' str' → logprob: -9.297906875610352
    7. ' bool' → logprob: -10.547906875610352
    8. 'None' → logprob: -11.172906875610352
    9. ' ' → logprob: -11.422906875610352
    10. '	int' → logprob: -11.547906875610352

Token 18: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -2.7133641196996905e-05
    2. ':return' → logprob: -11.37502670288086
    3. ' :' → logprob: -12.50002670288086
    4. ':
' → logprob: -12.50002670288086
    5. '):' → logprob: -12.62502670288086
    6. '':' → logprob: -13.50002670288086
    7. ':**' → logprob: -13.87502670288086
    8. '   ' → logprob: -14.00002670288086
    9. ',' → logprob: -14.87502670288086
    10. '':'' → logprob: -15.25002670288086

Token 19: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06166702136397362
    2. ':' → logprob: -2.936666965484619
    3. ' ' → logprob: -5.811666965484619
    4. '    ' → logprob: -6.936666965484619
    5. ' :' → logprob: -7.811666965484619
    6. '*' → logprob: -7.811666965484619
    7. '```' → logprob: -7.936666965484619
    8. ''' → logprob: -8.061667442321777
    9. ' return' → logprob: -8.811667442321777
    10. ':
' → logprob: -8.936667442321777

Token 20: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6062687635421753
    2. ' return' → logprob: -1.2312687635421753
    3. 'r' → logprob: -3.106268882751465
    4. ' ' → logprob: -3.231268882751465
    5. 'return' (adapté à ' return') → logprob: -3.356268882751465
    6. ' if' → logprob: -4.481268882751465
    7. '    ' → logprob: -4.856268882751465
    8. 'n' → logprob: -5.106268882751465
    9. ' r' → logprob: -5.731268882751465
    10. ' """' → logprob: -6.356268882751465

Token 21: ' (' (ID: 350)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.28914761543273926
    2. 'a' → logprob: -1.4141476154327393
    3. ' (' → logprob: -5.03914737701416
    4. ' ' → logprob: -7.41414737701416
    5. '(a' → logprob: -8.28914737701416
    6. '(' → logprob: -8.91414737701416
    7. 'pow' → logprob: -9.03914737701416
    8. ' p' → logprob: -9.53914737701416
    9. '1' → logprob: -9.78914737701416
    10. ' pow' → logprob: -9.91414737701416

Token 22: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.008586795069277287
    2. ' a' → logprob: -5.258586883544922
    3. 'p' → logprob: -6.633586883544922
    4. '   ' → logprob: -7.383586883544922
    5. '2' → logprob: -7.508586883544922
    6. '1' → logprob: -7.883586883544922
    7. '(a' → logprob: -9.133586883544922
    8. ' (' → logprob: -9.508586883544922
    9. 'pow' → logprob: -9.633586883544922
    10. '(' → logprob: -9.883586883544922

Token 23: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -1.0029312372207642
    2. '*' → logprob: -1.2529312372207642
    3. ' +' → logprob: -2.1279311180114746
    4. '+' → logprob: -2.2529311180114746
    5. '**' → logprob: -3.2529311180114746
    6. '*p' → logprob: -3.3779311180114746
    7. ' **' → logprob: -3.5029311180114746
    8. ' %' → logprob: -5.127931118011475
    9. '%' → logprob: -5.252931118011475
    10. '+p' → logprob: -5.377931118011475

Token 24: ' ' (ID: 220)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.27450239658355713
    2. ' p' → logprob: -1.5245023965835571
    3. ' (' → logprob: -4.774502277374268
    4. '(' → logprob: -5.274502277374268
    5. '2' → logprob: -6.149502277374268
    6. '(p' → logprob: -6.399502277374268
    7. 'a' → logprob: -6.649502277374268
    8. '10' → logprob: -6.774502277374268
    9. ' ' → logprob: -7.024502277374268
    10. ' a' → logprob: -7.649502277374268

Token 25: '3' (ID: 18)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.02013188786804676
    2. '(' → logprob: -4.895132064819336
    3. '(p' → logprob: -5.020132064819336
    4. '10' → logprob: -6.270132064819336
    5. '2' → logprob: -6.520132064819336
    6. ' p' → logprob: -7.270132064819336
    7. 'a' → logprob: -7.395132064819336
    8. ' (' → logprob: -8.645132064819336
    9. '(a' → logprob: -8.895132064819336
    10. '3' → logprob: -9.020132064819336

Token 26: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.49942225217819214
    2. ')' → logprob: -0.9994222521781921
    3. ' *' → logprob: -4.624422073364258
    4. ' )' → logprob: -5.249422073364258
    5. '+' → logprob: -5.624422073364258
    6. ' ' → logprob: -5.749422073364258
    7. ' -' → logprob: -6.999422073364258
    8. ' **' → logprob: -7.499422073364258
    9. '    ' → logprob: -7.624422073364258
    10. '**' → logprob: -8.374422073364258

Token 27: ' p' (ID: 275)
  Prédit: ' p'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' p' → logprob: -0.052149754017591476
    2. 'p' → logprob: -3.052149772644043
    3. ' ' → logprob: -5.927149772644043
    4. '2' → logprob: -7.677149772644043
    5. '7' → logprob: -9.427149772644043
    6. '4' → logprob: -9.552149772644043
    7. '1' → logprob: -9.677149772644043
    8. ' (' → logprob: -9.802149772644043
    9. '5' → logprob: -9.927149772644043
    10. '3' → logprob: -10.677149772644043

Token 28: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.000824156915768981
    2. ' )' → logprob: -7.250823974609375
    3. ' -' → logprob: -10.250823974609375
    4. ')//' → logprob: -10.375823974609375
    5. '*' → logprob: -11.625823974609375
    6. ' *' → logprob: -11.750823974609375
    7. '-' → logprob: -12.500823974609375
    8. '**' → logprob: -12.625823974609375
    9. '   ' → logprob: -12.750823974609375
    10. ')>>' → logprob: -12.750823974609375

Token 29: ' //' (ID: 602)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6722924709320068
    2. '*' → logprob: -2.172292470932007
    3. '\n' → logprob: -2.297292470932007
    4. '+' → logprob: -2.547292470932007
    5. '<|end|>' → logprob: -2.547292470932007
    6. ')' → logprob: -2.922292470932007
    7. '(' → logprob: -4.422292709350586
    8. ' ' → logprob: -4.547292709350586
    9. ' 
' → logprob: -4.797292709350586
    10. '```' → logprob: -5.047292709350586

Token 30: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6557526588439941
    2. '2' → logprob: -0.7807526588439941
    3. '3' → logprob: -4.405752658843994
    4. '4' → logprob: -4.655752658843994
    5. '5' → logprob: -7.655752658843994
    6. '7' → logprob: -7.655752658843994
    7. '10' → logprob: -9.030752182006836
    8. '6' → logprob: -10.530752182006836
    9. '9' → logprob: -10.655752182006836
    10. '8' → logprob: -11.155752182006836

Token 31: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.008441763930022717
    2. ' ' → logprob: -4.883441925048828
    3. '3' → logprob: -7.883441925048828
    4. '4' → logprob: -7.883441925048828
    5. '7' → logprob: -10.258441925048828
    6. '5' → logprob: -10.383441925048828
    7. '10' → logprob: -11.883441925048828
    8. '6' → logprob: -13.758441925048828
    9. '9' → logprob: -13.758441925048828
    10. '8' → logprob: -14.008441925048828

Token 32: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.07019351422786713
    2. '<|end|>' → logprob: -3.8201935291290283
    3. '\n' → logprob: -4.195193290710449
    4. '*' → logprob: -4.820193290710449
    5. '+' → logprob: -4.945193290710449
    6. '

' → logprob: -5.070193290710449
    7. ')' → logprob: -6.570193290710449
    8. '```' → logprob: -6.820193290710449
    9. '
' → logprob: -6.945193290710449
    10. 'def' → logprob: -6.945193290710449

Token 33: 'if' (ID: 366)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.9250926971435547
    2. '
' → logprob: -1.5500926971435547
    3. 'a' → logprob: -2.0500926971435547
    4. 'n' → logprob: -2.3000926971435547
    5. '\n' → logprob: -2.3000926971435547
    6. '

' → logprob: -4.175092697143555
    7. 'x' → logprob: -4.425092697143555
    8. 'result' → logprob: -4.425092697143555
    9. 'for' → logprob: -5.175092697143555
    10. '#' → logprob: -6.175092697143555

Token 34: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.04652263596653938
    2. ' stdin' → logprob: -4.171522617340088
    3. ' ' → logprob: -4.296522617340088
    4. ' ' → logprob: -4.421522617340088
    5. '__' → logprob: -5.796522617340088
    6. ' True' → logprob: -7.921522617340088
    7. 'stdin' → logprob: -8.921523094177246
    8. ' len' → logprob: -8.921523094177246
    9. ' not' → logprob: -9.171523094177246
    10. '_' → logprob: -9.171523094177246

Token 35: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.09422724694013596
    2. 'name' → logprob: -3.3442273139953613
    3. ' ==' → logprob: -3.4692273139953613
    4. ' __' → logprob: -4.344227313995361
    5. '.name' → logprob: -5.469227313995361
    6. '==' → logprob: -6.219227313995361
    7. '.__' → logprob: -6.594227313995361
    8. '_name' → logprob: -6.969227313995361
    9. '.' → logprob: -7.594227313995361
    10. '[' → logprob: -8.219226837158203

Token 36: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -9.746380237629637e-05
    2. '__.__' → logprob: -10.125097274780273
    3. '_' → logprob: -10.750097274780273
    4. '__.' → logprob: -11.000097274780273
    5. '==' → logprob: -11.625097274780273
    6. '___' → logprob: -12.625097274780273
    7. '__
' → logprob: -13.000097274780273
    8. '__["' → logprob: -13.875097274780273
    9. '____' → logprob: -14.125097274780273
    10. '__
' → logprob: -14.500097274780273

Token 37: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.07767536491155624
    2. ' ==' → logprob: -2.8276753425598145
    3. '==' → logprob: -4.7026753425598145
    4. '=="' → logprob: -6.7026753425598145
    5. '["' → logprob: -6.9526753425598145
    6. '[' → logprob: -7.2026753425598145
    7. '__.__' → logprob: -7.2026753425598145
    8. '<|end|>' → logprob: -7.2026753425598145
    9. '['' → logprob: -7.8276753425598145
    10. '__["' → logprob: -7.9526753425598145

Token 38: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.28215092420578003
    2. ''' → logprob: -1.4071509838104248
    3. ' "' → logprob: -7.032150745391846
    4. ' '' → logprob: -9.407151222229004
    5. '__' → logprob: -10.657151222229004
    6. ' "__' → logprob: -12.282151222229004
    7. ' ' → logprob: -13.407151222229004
    8. '_' → logprob: -13.657151222229004
    9. ' __' → logprob: -13.657151222229004
    10. ' ' → logprob: -13.782151222229004

Token 39: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -2.5822400857578032e-05
    2. 'name' → logprob: -10.625025749206543
    3. 'ma' → logprob: -14.500025749206543
    4. 'm' → logprob: -14.500025749206543
    5. ' main' → logprob: -15.875025749206543
    6. 'maine' → logprob: -16.00002670288086
    7. 'mp' → logprob: -17.12502670288086
    8. '_main' → logprob: -17.25002670288086
    9. 'mai' → logprob: -17.25002670288086
    10. '__' → logprob: -18.00002670288086

Token 40: '__":
' (ID: 49892)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.011062674224376678
    2. '__":
' → logprob: -4.5110626220703125
    3. '__:' → logprob: -11.261062622070312
    4. '_' → logprob: -14.136062622070312
    5. '"' → logprob: -14.511062622070312
    6. '__["' → logprob: -15.386062622070312
    7. '":' → logprob: -15.636062622070312
    8. '__':
' → logprob: -16.011062622070312
    9. '__",' → logprob: -16.386062622070312
    10. '__("' → logprob: -16.386062622070312

Token 41: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.025960024446249008
    2. '
' → logprob: -4.2759599685668945
    3. '    
' → logprob: -5.0259599685668945
    4. '<|end|>' → logprob: -6.0259599685668945
    5. '```' → logprob: -7.6509599685668945
    6. ':' → logprob: -7.6509599685668945
    7. ':
' → logprob: -7.9009599685668945
    8. ' 
' → logprob: -7.9009599685668945
    9. ' for' → logprob: -8.150959968566895
    10. ' readline' → logprob: -8.525959968566895

Token 42: ' print' (ID: 2123)
  Prédit: ' line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' line' → logprob: -0.5865151882171631
    2. ' a' → logprob: -1.961515188217163
    3. ' for' → logprob: -2.086515188217163
    4. ' n' → logprob: -2.461515188217163
    5. 'a' → logprob: -3.461515188217163
    6. ' ligne' → logprob: -4.461515426635742
    7. ' input' → logprob: -4.586515426635742
    8. ' data' → logprob: -4.711515426635742
    9. 'line' → logprob: -5.211515426635742
    10. 'n' → logprob: -5.461515426635742

Token 43: '(cal' (ID: 92785)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -2.7372048862162046e-05
    2. '()' → logprob: -11.750027656555176
    3. '("("' → logprob: -12.125027656555176
    4. '('' → logprob: -12.500027656555176
    5. '((' → logprob: -13.250027656555176
    6. '(stdin' → logprob: -13.250027656555176
    7. '(read' → logprob: -14.000027656555176
    8. ' (' → logprob: -14.250027656555176
    9. '("' → logprob: -14.375027656555176
    10. '(calc' → logprob: -14.500027656555176

Token 44: 'cul' (ID: 2885)
  Prédit: 'cul'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cul' → logprob: -0.002859797328710556
    2. 'c' → logprob: -6.127859592437744
    3. 'cur' → logprob: -8.877860069274902
    4. 'cular' → logprob: -9.002860069274902
    5. 'cule' → logprob: -9.127860069274902
    6. 'cler' → logprob: -9.502860069274902
    7. 'cu' → logprob: -10.002860069274902
    8. 'uler' → logprob: -10.252860069274902
    9. '```' → logprob: -10.627860069274902
    10. 'culator' → logprob: -11.002860069274902

Token 45: 'er' (ID: 259)
  Prédit: 'er'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -7.822646693966817e-06
    2. 'rer' → logprob: -12.250007629394531
    3. 'e' → logprob: -13.625007629394531
    4. 'erer' → logprob: -14.125007629394531
    5. 'er's' → logprob: -15.750007629394531
    6. 'ер' → logprob: -16.12500762939453
    7. ' er' → logprob: -16.25000762939453
    8. '{"' → logprob: -16.25000762939453
    9. ''er' → logprob: -16.87500762939453
    10. '_er' → logprob: -16.87500762939453

Token 46: '(*' (ID: 9000)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0059443251229822636
    2. '()' → logprob: -5.25594425201416
    3. '(st' → logprob: -8.75594425201416
    4. '(stdin' → logprob: -8.75594425201416
    5. '(a' → logprob: -9.00594425201416
    6. '((' → logprob: -9.88094425201416
    7. '('' → logprob: -10.13094425201416
    8. ')' → logprob: -10.25594425201416
    9. '(
' → logprob: -10.38094425201416
    10. '())' → logprob: -10.63094425201416

Token 47: 'map' (ID: 3726)
  Prédit: 'map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.0009452917147427797
    2. ' map' → logprob: -7.500945091247559
    3. '(map' → logprob: -8.125945091247559
    4. 'list' → logprob: -9.750945091247559
    5. '[' → logprob: -10.375945091247559
    6. 'tuple' → logprob: -12.875945091247559
    7. '[int' → logprob: -13.625945091247559
    8. 'int' → logprob: -13.625945091247559
    9. 'stdin' → logprob: -14.250945091247559
    10. '   ' → logprob: -14.750945091247559

Token 48: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.1532575488090515
    2. '(stdin' → logprob: -2.1532576084136963
    3. '(input' → logprob: -4.403257369995117
    4. '(' → logprob: -4.403257369995117
    5. '(str' → logprob: -6.903257369995117
    6. 'int' → logprob: -9.028257369995117
    7. '(lambda' → logprob: -9.278257369995117
    8. '(eval' → logprob: -9.778257369995117
    9. 'stdin' → logprob: -9.903257369995117
    10. ')' → logprob: -10.278257369995117

Token 49: ',' (ID: 11)
  Prédit: '(stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(stdin' → logprob: -4.656383680412546e-05
    2. '(' → logprob: -10.875046730041504
    3. 'stdin' → logprob: -11.625046730041504
    4. '(st' → logprob: -11.875046730041504
    5. '(std' → logprob: -12.000046730041504
    6. ' stdin' → logprob: -13.375046730041504
    7. ')' → logprob: -13.625046730041504
    8. ' (' → logprob: -14.125046730041504
    9. '.stdin' → logprob: -14.125046730041504
    10. '(input' → logprob: -15.125046730041504

Token 50: ' stdin' (ID: 75143)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.04749482870101929
    2. ' stdin' → logprob: -3.547494888305664
    3. '(stdin' → logprob: -4.047494888305664
    4. 'std' → logprob: -9.547494888305664
    5. '.stdin' → logprob: -10.047494888305664
    6. '   ' → logprob: -12.672494888305664
    7. ' std' → logprob: -13.297494888305664
    8. ' ' → logprob: -13.922494888305664
    9. 'st' → logprob: -14.297494888305664
    10. '  ' → logprob: -15.547494888305664

Token 51: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.0004624855937436223
    2. '.' → logprob: -8.500462532043457
    3. '.readlines' → logprob: -8.750462532043457
    4. '.read' → logprob: -9.375462532043457
    5. '().' → logprob: -11.375462532043457
    6. ')' → logprob: -13.250462532043457
    7. ' .' → logprob: -13.750462532043457
    8. ').' → logprob: -14.375462532043457
    9. ')))' → logprob: -15.375462532043457
    10. '))' → logprob: -15.875462532043457

Token 52: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.20749077200889587
    2. '()))' → logprob: -1.9574908018112183
    3. '()' → logprob: -3.3324906826019287
    4. '())))' → logprob: -4.957490921020508
    5. '())' → logprob: -5.707490921020508
    6. '()));' → logprob: -10.332490921020508
    7. '.readline' → logprob: -10.957490921020508
    8. '()[' → logprob: -11.707490921020508
    9. '()]' → logprob: -12.082490921020508
    10. '(' → logprob: -12.082490921020508

Token 53: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.049127623438835144
    2. 'strip' → logprob: -3.0491275787353516
    3. 'rstrip' → logprob: -7.549127578735352
    4. ' split' → logprob: -11.299127578735352
    5. '(split' → logprob: -14.674127578735352
    6. 'read' → logprob: -14.799127578735352
    7. ' strip' → logprob: -15.424127578735352
    8. '_split' → logprob: -16.92412757873535
    9. '```' → logprob: -17.67412757873535
    10. 'spl' → logprob: -17.79912757873535

Token 54: '())))' (ID: 168342)
  Prédit: '())))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())))' → logprob: -0.5866262316703796
    2. ')))' → logprob: -1.0866262912750244
    3. '()))' → logprob: -2.4616262912750244
    4. '()' → logprob: -4.211626052856445
    5. '())' → logprob: -5.586626052856445
    6. '))' → logprob: -6.211626052856445
    7. '(' → logprob: -8.086626052856445
    8. '())))
' → logprob: -8.711626052856445
    9. ')' → logprob: -9.461626052856445
    10. '))))' → logprob: -11.961626052856445


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 52
Tokens correctement prédits (1ère position, stricte): 24
Tokens correctement prédits (1ère position, avec adaptation): 24
Tokens correctement prédits (top 10): 40
Précision stricte (1ère position): 46.15%
Précision adaptée (1ère position): 46.15%
Précision (top 10): 76.92%
================================================================================
