================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:08:34
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
a,b=[int(x)for x in input().split()]
exec("print('No')"if~(a*b)&1 else"print('Yes')")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'a' (ID: 64)
  → Token d'amorce (pas de prédiction)

Token 1: ',b' (ID: 17568)
  → Token d'amorce (pas de prédiction)

Token 2: '=[' (ID: 13370)
  → Token d'amorce (pas de prédiction)

Token 3: 'int' (ID: 491)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.5839348435401917
    2. '1' → logprob: -1.0839347839355469
    3. '0' → logprob: -2.333934783935547
    4. ']int' → logprob: -5.083934783935547
    5. 'int' → logprob: -8.333934783935547
    6. '10' → logprob: -8.708934783935547
    7. '[]' → logprob: -9.083934783935547
    8. '][]' → logprob: -9.833934783935547
    9. '[int' → logprob: -9.958934783935547
    10. '3' → logprob: -10.083934783935547

Token 4: '(x' (ID: 4061)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4458540976047516
    2. '(x' → logprob: -1.1958540678024292
    3. ']' → logprob: -3.5708541870117188
    4. '(i' → logprob: -4.445854187011719
    5. '(input' → logprob: -5.070854187011719
    6. '()]' → logprob: -5.070854187011719
    7. '(s' → logprob: -6.070854187011719
    8. '(a' → logprob: -6.695854187011719
    9. '(item' → logprob: -8.445854187011719
    10. '(token' → logprob: -8.945854187011719

Token 5: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0005006087594665587
    2. '),' → logprob: -9.125500679016113
    3. '(x' → logprob: -9.375500679016113
    4. ')]' → logprob: -9.500500679016113
    5. 'for' → logprob: -9.625500679016113
    6. ' for' → logprob: -10.375500679016113
    7. ')x' → logprob: -10.750500679016113
    8. ')])' → logprob: -11.000500679016113
    9. ')i' → logprob: -11.000500679016113
    10. '(' → logprob: -11.875500679016113

Token 6: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.2451763153076172
    2. ' for' → logprob: -2.245176315307617
    3. '(' → logprob: -2.995176315307617
    4. '(x' → logprob: -3.245176315307617
    5. '(line' → logprob: -5.370176315307617
    6. '(input' → logprob: -5.370176315307617
    7. '(i' → logprob: -5.495176315307617
    8. ')' → logprob: -5.870176315307617
    9. '(token' → logprob: -6.745176315307617
    10. ']' → logprob: -7.120176315307617

Token 7: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.11313757300376892
    2. 'x' → logprob: -2.2381374835968018
    3. ' ' → logprob: -8.863137245178223
    4. '<|end|>' → logprob: -9.863137245178223
    5. ' in' → logprob: -10.363137245178223
    6. '<|end|>' → logprob: -10.613137245178223
    7. '_' → logprob: -10.988137245178223
    8. ' input' → logprob: -11.363137245178223
    9. ' a' → logprob: -11.738137245178223
    10. '(x' → logprob: -12.238137245178223

Token 8: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0923846960067749
    2. 'in' → logprob: -2.4673848152160645
    3. ' input' → logprob: -6.5923848152160645
    4. 'input' → logprob: -6.8423848152160645
    5. '(input' → logprob: -7.7173848152160645
    6. '=input' → logprob: -8.467384338378906
    7. '<|end|>' → logprob: -8.592384338378906
    8. '(' → logprob: -10.092384338378906
    9. ' ' → logprob: -10.092384338378906
    10. 'range' → logprob: -11.217384338378906

Token 9: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.10021066665649414
    2. ' input' → logprob: -2.350210666656494
    3. '(input' → logprob: -12.975210189819336
    4. '=input' → logprob: -14.600210189819336
    5. 'range' → logprob: -14.725210189819336
    6. '<input' → logprob: -14.975210189819336
    7. ',input' → logprob: -15.475210189819336
    8. '	input' → logprob: -16.350210189819336
    9. '[input' → logprob: -16.475210189819336
    10. ' ' → logprob: -16.475210189819336

Token 10: '().' (ID: 1454)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.07363495975732803
    2. '()' → logprob: -2.6986348628997803
    3. '().' → logprob: -6.448635101318359
    4. '(' → logprob: -6.948635101318359
    5. '()][' → logprob: -7.823635101318359
    6. ']()' → logprob: -8.32363510131836
    7. '()].' → logprob: -8.57363510131836
    8. ']' → logprob: -9.07363510131836
    9. '())' → logprob: -9.32363510131836
    10. '`()' → logprob: -10.57363510131836

Token 11: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0002383441897109151
    2. 'strip' → logprob: -8.500238418579102
    3. 'rstrip' → logprob: -10.375238418579102
    4. ' split' → logprob: -12.750238418579102
    5. '(split' → logprob: -14.375238418579102
    6. 'spl' → logprob: -16.5002384185791
    7. 'read' → logprob: -17.8752384185791
    8. '()' → logprob: -18.0002384185791
    9. 'replace' → logprob: -18.1252384185791
    10. '_split' → logprob: -18.7502384185791

Token 12: '()]
' (ID: 67155)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.0016356664709746838
    2. '(' → logprob: -6.751635551452637
    3. '()' → logprob: -8.126635551452637
    4. ']' → logprob: -9.001635551452637
    5. '())' → logprob: -11.001635551452637
    6. ')]' → logprob: -11.001635551452637
    7. ']()' → logprob: -12.751635551452637
    8. '()],' → logprob: -12.876635551452637
    9. '`]' → logprob: -13.376635551452637
    10. '()][' → logprob: -13.376635551452637

Token 13: 'exec' (ID: 31592)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.31396666169166565
    2. '*' → logprob: -2.438966751098633
    3. 'if' → logprob: -2.813966751098633
    4. '#' → logprob: -3.188966751098633
    5. 'c' → logprob: -4.063966751098633
    6. 'i' → logprob: -4.313966751098633
    7. '%' → logprob: -4.438966751098633
    8. ',' → logprob: -4.813966751098633
    9. '
' → logprob: -5.438966751098633
    10. ':' → logprob: -5.438966751098633

Token 14: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.007513284217566252
    2. '("' → logprob: -5.632513046264648
    3. '("("' → logprob: -6.132513046264648
    4. '('' → logprob: -6.507513046264648
    5. '("""' → logprob: -9.007513046264648
    6. '(f' → logprob: -10.132513046264648
    7. '("*' → logprob: -10.882513046264648
    8. '(""' → logprob: -11.757513046264648
    9. '("")' → logprob: -11.882513046264648
    10. '("="' → logprob: -12.257513046264648

Token 15: 'print' (ID: 1598)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.0407395362854004
    2. '"' → logprob: -1.4157395362854004
    3. 'f' → logprob: -1.7907395362854004
    4. ''' → logprob: -2.5407395362854004
    5. 'p' → logprob: -3.4157395362854004
    6. '"a' → logprob: -3.4157395362854004
    7. 'for' → logprob: -3.5407395362854004
    8. ''a' → logprob: -3.6657395362854004
    9. ''f' → logprob: -4.9157395362854
    10. 'i' → logprob: -5.2907395362854

Token 16: '('' (ID: 706)
  Prédit: '(a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.02867528423666954
    2. '(' → logprob: -3.7786753177642822
    3. '((' → logprob: -6.153675079345703
    4. '("' → logprob: -6.403675079345703
    5. '('' → logprob: -6.653675079345703
    6. '(f' → logprob: -9.028675079345703
    7. 'a' → logprob: -9.153675079345703
    8. '(abs' → logprob: -10.778675079345703
    9. '(\"' → logprob: -10.903675079345703
    10. '(max' → logprob: -11.278675079345703

Token 17: 'No' (ID: 3160)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.5580921173095703
    2. 'Hello' → logprob: -1.6830921173095703
    3. '',' → logprob: -1.8080921173095703
    4. '{' → logprob: -2.3080921173095703
    5. ''+' → logprob: -2.4330921173095703
    6. '')' → logprob: -3.0580921173095703
    7. '",' → logprob: -3.1830921173095703
    8. '{}' → logprob: -3.1830921173095703
    9. '"+' → logprob: -4.05809211730957
    10. ''' → logprob: -4.30809211730957

Token 18: '')"' (ID: 112048)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.5114197134971619
    2. '')"' → logprob: -2.0114197731018066
    3. 't' → logprob: -2.1364197731018066
    4. ''' → logprob: -3.1364197731018066
    5. '',' → logprob: -4.386419773101807
    6. ' t' → logprob: -4.511419773101807
    7. '','' → logprob: -4.886419773101807
    8. '')")
' → logprob: -5.011419773101807
    9. ' ')' → logprob: -5.136419773101807
    10. ' ' → logprob: -5.261419773101807

Token 19: 'if' (ID: 366)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0033182844053953886
    2. '))' → logprob: -6.2533183097839355
    3. ',' → logprob: -7.0033183097839355
    4. ' )' → logprob: -8.503317832946777
    5. 'if' → logprob: -9.628317832946777
    6. '+' → logprob: -10.128317832946777
    7. ' if' → logprob: -10.128317832946777
    8. ',)' → logprob: -10.378317832946777
    9. '")' → logprob: -11.503317832946777
    10. '),' → logprob: -11.753317832946777

Token 20: '~' (ID: 93)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.22597119212150574
    2. ' a' → logprob: -1.6009712219238281
    3. 'b' → logprob: -8.225971221923828
    4. ' not' → logprob: -9.225971221923828
    5. ' b' → logprob: -9.350971221923828
    6. ' ' → logprob: -10.100971221923828
    7. '(a' → logprob: -10.225971221923828
    8. 'not' → logprob: -10.850971221923828
    9. ''a' → logprob: -13.475971221923828
    10. '  ' → logprob: -13.725971221923828

Token 21: '(' (ID: 7)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.1445634663105011
    2. ' a' → logprob: -2.0195634365081787
    3. '(a' → logprob: -6.644563674926758
    4. 'b' → logprob: -8.519563674926758
    5. ' b' → logprob: -9.019563674926758
    6. ' not' → logprob: -9.269563674926758
    7. ' (' → logprob: -9.644563674926758
    8. ' ' → logprob: -10.144563674926758
    9. '(' → logprob: -10.769563674926758
    10. 'not' → logprob: -11.269563674926758

Token 22: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.04267825931310654
    2. ' a' → logprob: -3.7926783561706543
    3. '(a' → logprob: -4.167678356170654
    4. ' (' → logprob: -6.292678356170654
    5. '(' → logprob: -6.917678356170654
    6. 'b' → logprob: -8.042677879333496
    7. '((' → logprob: -8.792677879333496
    8. '~' → logprob: -9.292677879333496
    9. ' ' → logprob: -9.917677879333496
    10. '(~' → logprob: -10.167677879333496

Token 23: '*b' (ID: 72162)
  Prédit: '&'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '&' → logprob: -0.32707157731056213
    2. '|' → logprob: -1.7020715475082397
    3. '&a' → logprob: -3.2020716667175293
    4. ' &' → logprob: -4.077071666717529
    5. ')' → logprob: -4.827071666717529
    6. '==' → logprob: -5.327071666717529
    7. ' or' → logprob: -5.702071666717529
    8. '>' → logprob: -5.827071666717529
    9. ' |' → logprob: -6.077071666717529
    10. '>b' → logprob: -6.202071666717529

Token 24: ')&' (ID: 34370)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.026773009449243546
    2. ' )' → logprob: -3.901772975921631
    3. ')&' → logprob: -6.401772975921631
    4. ')==' → logprob: -7.276772975921631
    5. '==' → logprob: -7.526772975921631
    6. '|' → logprob: -7.526772975921631
    7. ')>' → logprob: -7.651772975921631
    8. ' or' → logprob: -8.026773452758789
    9. '&' → logprob: -8.276773452758789
    10. '!=' → logprob: -8.526773452758789

Token 25: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.02524133399128914
    2. ' ' → logprob: -3.7752413749694824
    3. ' (' → logprob: -7.275241374969482
    4. '(' → logprob: -7.525241374969482
    5. '(a' → logprob: -7.900241374969482
    6. ' a' → logprob: -8.900240898132324
    7. 'a' → logprob: -9.150240898132324
    8. '32' → logprob: -10.650240898132324
    9. '7' → logprob: -11.025240898132324
    10. '((' → logprob: -11.150240898132324

Token 26: ' else' (ID: 1203)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7187401056289673
    2. 'else' → logprob: -1.3437401056289673
    3. ' else' → logprob: -1.5937401056289673
    4. '==' → logprob: -3.2187399864196777
    5. ' )' → logprob: -6.218739986419678
    6. 'or' → logprob: -6.468739986419678
    7. ' ' → logprob: -6.468739986419678
    8. '!=' → logprob: -6.843739986419678
    9. ' or' → logprob: -7.218739986419678
    10. ')==' → logprob: -7.843739986419678

Token 27: '"' (ID: 1)
  Prédit: '"'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0032650534994900227
    2. ' "' → logprob: -6.378264904022217
    3. '")' → logprob: -7.878264904022217
    4. ''' → logprob: -8.003265380859375
    5. '("' → logprob: -8.378265380859375
    6. '"'' → logprob: -9.003265380859375
    7. '"""' → logprob: -9.128265380859375
    8. '"(' → logprob: -9.628265380859375
    9. '(' → logprob: -10.003265380859375
    10. ' ' → logprob: -10.128265380859375

Token 28: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0009504065383225679
    2. ' print' → logprob: -7.875950336456299
    3. '"' → logprob: -8.500950813293457
    4. ''' → logprob: -9.250950813293457
    5. '   ' → logprob: -9.375950813293457
    6. '(print' → logprob: -9.750950813293457
    7. '("' → logprob: -10.000950813293457
    8. ' ' → logprob: -11.500950813293457
    9. '#print' → logprob: -11.625950813293457
    10. '(' → logprob: -11.625950813293457

Token 29: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.0013569057919085026
    2. '(' → logprob: -6.626357078552246
    3. '("' → logprob: -10.626357078552246
    4. '(No' → logprob: -13.376357078552246
    5. ' ('' → logprob: -14.126357078552246
    6. '(True' → logprob: -14.126357078552246
    7. '(\'' → logprob: -14.251357078552246
    8. '(('' → logprob: -14.376357078552246
    9. '(\"' → logprob: -14.501357078552246
    10. '(\' → logprob: -15.126357078552246

Token 30: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.0678185373544693
    2. 'Ye' → logprob: -2.9428186416625977
    3. 'No' → logprob: -4.692818641662598
    4. 'Y' → logprob: -6.567818641662598
    5. ' Yes' → logprob: -7.317818641662598
    6. 'YES' → logprob: -8.317818641662598
    7. 'Ok' → logprob: -8.567818641662598
    8. 'Ya' → logprob: -8.942818641662598
    9. 'Yo' → logprob: -9.317818641662598
    10. ' Ye' → logprob: -9.317818641662598

Token 31: '')' (ID: 1542)
  Prédit: '')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.004498835187405348
    2. '')"' → logprob: -5.5044989585876465
    3. '')")
' → logprob: -8.629498481750488
    4. ')' → logprob: -9.004498481750488
    5. ')")' → logprob: -9.754498481750488
    6. '('' → logprob: -10.879498481750488
    7. ''))' → logprob: -11.254498481750488
    8. ''' → logprob: -11.379498481750488
    9. 'a' → logprob: -12.504498481750488
    10. '!' → logprob: -12.629498481750488

Token 32: '")' (ID: 1405)
  Prédit: ')")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')")' → logprob: -0.03938133269548416
    2. ')' → logprob: -3.414381265640259
    3. '")' → logprob: -5.289381504058838
    4. ')"' → logprob: -8.16438102722168
    5. '))' → logprob: -8.41438102722168
    6. ')").' → logprob: -10.16438102722168
    7. ')")
' → logprob: -10.16438102722168
    8. '')' → logprob: -10.53938102722168
    9. '}")' → logprob: -11.16438102722168
    10. ')",' → logprob: -11.41438102722168


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 30
Tokens correctement prédits (1ère position, stricte): 12
Tokens correctement prédits (1ère position, avec adaptation): 12
Tokens correctement prédits (top 10): 24
Précision stricte (1ère position): 40.00%
Précision adaptée (1ère position): 40.00%
Précision (top 10): 80.00%
================================================================================
