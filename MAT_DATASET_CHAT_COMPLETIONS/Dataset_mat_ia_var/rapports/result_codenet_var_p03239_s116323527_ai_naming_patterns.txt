================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:06:43
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
num_problems, time_limit = (int(value) for value in input().split())

min_cost = 1001
for problem_index in range(num_problems):
    current_cost, current_time = (int(value) for value in input().split())
    if current_time <= time_limit and current_cost < min_cost:
        min_cost = current_cost

if min_cost > 1000:
    print('TLE')
else:
    print(min_cost)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'num' (ID: 4571)
  → Token d'amorce (pas de prédiction)

Token 1: '_pro' (ID: 4617)
  → Token d'amorce (pas de prédiction)

Token 2: 'blems' (ID: 50594)
  → Token d'amorce (pas de prédiction)

Token 3: ',' (ID: 11)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.6613616347312927
    2. '=' → logprob: -0.9113616347312927
    3. ' =' → logprob: -3.6613616943359375
    4. '```' → logprob: -4.1613616943359375
    5. ')' → logprob: -4.5363616943359375
    6. '[' → logprob: -4.7863616943359375
    7. '*' → logprob: -4.7863616943359375
    8. '.' → logprob: -5.4113616943359375
    9. '+' → logprob: -5.6613616943359375
    10. '**' → logprob: -6.9113616943359375

Token 4: ' time' (ID: 1058)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.2235615849494934
    2. 'num' → logprob: -3.0985615253448486
    3. '_' → logprob: -3.7235615253448486
    4. '_num' → logprob: -3.8485615253448486
    5. ' =' → logprob: -4.098561763763428
    6. ')' → logprob: -4.598561763763428
    7. ',' → logprob: -4.973561763763428
    8. '```' → logprob: -5.098561763763428
    9. '=num' → logprob: -5.098561763763428
    10. ' num' → logprob: -5.223561763763428

Token 5: '_limit' (ID: 34361)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.4515431523323059
    2. '_' → logprob: -1.5765430927276611
    3. ' =' → logprob: -2.576543092727661
    4. ',' → logprob: -2.576543092727661
    5. ')' → logprob: -6.82654333114624
    6. '.' → logprob: -7.20154333114624
    7. '_space' → logprob: -7.70154333114624
    8. ':' → logprob: -7.95154333114624
    9. '```' → logprob: -8.076542854309082
    10. '_=' → logprob: -8.451542854309082

Token 6: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.05501915514469147
    2. ' =' → logprob: -3.4300191402435303
    3. '_' → logprob: -4.555019378662109
    4. ',' → logprob: -4.680019378662109
    5. ':' → logprob: -7.180019378662109
    6. ')' → logprob: -7.930019378662109
    7. '```' → logprob: -9.68001937866211
    8. '.' → logprob: -9.80501937866211
    9. '[' → logprob: -10.30501937866211
    10. ';' → logprob: -11.43001937866211

Token 7: ' (' (ID: 350)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3869797885417938
    2. '0' → logprob: -1.7619798183441162
    3. '10' → logprob: -2.511979818344116
    4. ' map' → logprob: -3.136979818344116
    5. 'map' → logprob: -4.636979579925537
    6. '5' → logprob: -4.636979579925537
    7. '1' → logprob: -6.636979579925537
    8. '20' → logprob: -7.011979579925537
    9. 'input' → logprob: -7.511979579925537
    10. '3' → logprob: -7.761979579925537

Token 8: 'int' (ID: 491)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '5' → logprob: -0.6395534873008728
    2. '10' → logprob: -1.3895535469055176
    3. '3' → logprob: -2.0145535469055176
    4. ')' → logprob: -3.1395535469055176
    5. 'num' → logprob: -3.5145535469055176
    6. '0' → logprob: -4.764553546905518
    7. '100' → logprob: -6.264553546905518
    8. '2' → logprob: -6.264553546905518
    9. '4' → logprob: -6.639553546905518
    10. '42' → logprob: -6.889553546905518

Token 9: '(value' (ID: 6333)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.11493275314569473
    2. '(' → logprob: -2.2399327754974365
    3. '[' → logprob: -7.114932537078857
    4. ',' → logprob: -7.739932537078857
    5. '('' → logprob: -8.364933013916016
    6. '(s' → logprob: -9.489933013916016
    7. ' ' → logprob: -9.614933013916016
    8. ' )' → logprob: -9.614933013916016
    9. ')(' → logprob: -9.614933013916016
    10. '<|end|>' → logprob: -9.864933013916016

Token 10: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0222714152187109
    2. '[' → logprob: -4.522271633148193
    3. '))' → logprob: -4.772271633148193
    4. '),' → logprob: -6.272271633148193
    5. '(' → logprob: -8.397271156311035
    6. '[num' → logprob: -8.897271156311035
    7. '(num' → logprob: -9.397271156311035
    8. 's' → logprob: -10.272271156311035
    9. ')))' → logprob: -10.397271156311035
    10. '')' → logprob: -10.397271156311035

Token 11: ' for' (ID: 395)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5465584397315979
    2. ')' → logprob: -0.9215584397315979
    3. '[' → logprob: -4.171558380126953
    4. '),' → logprob: -5.546558380126953
    5. ',
' → logprob: -6.421558380126953
    6. ',)' → logprob: -7.546558380126953
    7. '*' → logprob: -8.171558380126953
    8. '<|end|>' → logprob: -8.421558380126953
    9. '```' → logprob: -8.546558380126953
    10. '[
' → logprob: -8.796558380126953

Token 12: ' value' (ID: 1432)
  Prédit: ' value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' value' → logprob: -0.07263077795505524
    2. ' range' → logprob: -3.3226308822631836
    3. 'value' → logprob: -4.322630882263184
    4. ' user' → logprob: -4.697630882263184
    5. ' input' → logprob: -5.447630882263184
    6. '<|end|>' → logprob: -5.822630882263184
    7. ' iter' → logprob: -7.072630882263184
    8. ' ' → logprob: -7.447630882263184
    9. ' s' → logprob: -7.572630882263184
    10. ' token' → logprob: -8.322630882263184

Token 13: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.1431807428598404
    2. ')' → logprob: -2.8931808471679688
    3. 'in' → logprob: -3.0181808471679688
    4. '(' → logprob: -3.8931808471679688
    5. '<|end|>' → logprob: -5.268180847167969
    6. '[' → logprob: -6.643180847167969
    7. ' )' → logprob: -8.393180847167969
    8. '(in' → logprob: -8.518180847167969
    9. '(value' → logprob: -8.518180847167969
    10. ' (' → logprob: -8.643180847167969

Token 14: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.10363224893808365
    2. ' input' → logprob: -2.3536322116851807
    3. 'user' → logprob: -6.35363245010376
    4. 'value' → logprob: -7.97863245010376
    5. ' user' → logprob: -8.228631973266602
    6. 'num' → logprob: -8.353631973266602
    7. 'values' → logprob: -9.103631973266602
    8. 'iter' → logprob: -9.103631973266602
    9. ')' → logprob: -9.353631973266602
    10. '(input' → logprob: -9.603631973266602

Token 15: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.9129403233528137
    2. '(' → logprob: -1.037940263748169
    3. '()' → logprob: -1.912940263748169
    4. '())' → logprob: -3.162940263748169
    5. ')' → logprob: -4.162940502166748
    6. '.readline' → logprob: -4.162940502166748
    7. '('.')' → logprob: -4.662940502166748
    8. '('' → logprob: -5.412940502166748
    9. '("("' → logprob: -6.412940502166748
    10. '('').' → logprob: -6.787940502166748

Token 16: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.004248050507158041
    2. 'strip' → logprob: -5.504248142242432
    3. 'rstrip' → logprob: -8.754247665405273
    4. ' split' → logprob: -11.379247665405273
    5. '(split' → logprob: -15.879247665405273
    6. 'replace' → logprob: -16.254247665405273
    7. '.split' → logprob: -17.254247665405273
    8. ' strip' → logprob: -17.379247665405273
    9. '```' → logprob: -17.754247665405273
    10. ' ' → logprob: -17.754247665405273

Token 17: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.006953822914510965
    2. '()' → logprob: -5.256953716278076
    3. ')' → logprob: -6.506953716278076
    4. '(' → logprob: -9.631954193115234
    5. ' ())' → logprob: -10.006954193115234
    6. '()))' → logprob: -10.506954193115234
    7. '()]' → logprob: -10.756954193115234
    8. '()[' → logprob: -11.381954193115234
    9. '()),' → logprob: -11.881954193115234
    10. '('' → logprob: -11.881954193115234

Token 18: 'min' (ID: 1493)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 19: '_cost' (ID: 36820)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.015362648293375969
    2. '(' → logprob: -4.390362739562988
    3. '_time' → logprob: -6.265362739562988
    4. '_val' → logprob: -8.015362739562988
    5. '_num' → logprob: -8.515362739562988
    6. '_space' → logprob: -10.015362739562988
    7. '(_)' → logprob: -10.390362739562988
    8. '_value' → logprob: -10.640362739562988
    9. 'imum' → logprob: -10.890362739562988
    10. '_count' → logprob: -11.140362739562988

Token 20: ' =' (ID: 314)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.9167487621307373
    2. '=' → logprob: -1.5417487621307373
    3. ' =' → logprob: -1.5417487621307373
    4. '_' → logprob: -2.0417487621307373
    5. '(' → logprob: -3.4167487621307373
    6. '[' → logprob: -5.291749000549316
    7. ')' → logprob: -7.041749000549316
    8. 's' → logprob: -7.541749000549316
    9. '_per' → logprob: -8.291749000549316
    10. '_range' → logprob: -8.541749000549316

Token 21: ' ' (ID: 220)
  Prédit: 'float'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'float' → logprob: -0.6831779479980469
    2. ' float' → logprob: -0.8081779479980469
    3. '0' → logprob: -3.308177947998047
    4. '100' → logprob: -5.058177947998047
    5. ' ' → logprob: -6.183177947998047
    6. '10' → logprob: -6.808177947998047
    7. '[' → logprob: -7.558177947998047
    8. '999' → logprob: -7.808177947998047
    9. ' min' → logprob: -8.058177947998047
    10. 'int' → logprob: -8.183177947998047

Token 22: '100' (ID: 1353)
  Prédit: 'float'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'float' → logprob: -0.0249982550740242
    2. '0' → logprob: -4.149998188018799
    3. '[' → logprob: -5.899998188018799
    4. 'min' → logprob: -6.149998188018799
    5. '100' → logprob: -6.774998188018799
    6. '10' → logprob: -6.774998188018799
    7. '[min' → logprob: -7.274998188018799
    8. 'max' → logprob: -8.399998664855957
    9. ' float' → logprob: -8.774998664855957
    10. 'int' → logprob: -8.774998664855957

Token 23: '1' (ID: 16)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.7716468572616577
    2. '0' → logprob: -1.3966468572616577
    3. '000' → logprob: -1.7716468572616577
    4. '*' → logprob: -3.0216469764709473
    5. '<|end|>' → logprob: -3.5216469764709473
    6. '00' → logprob: -3.7716469764709473
    7. '%' → logprob: -5.146646976470947
    8. ')' → logprob: -5.646646976470947
    9. ',' → logprob: -6.021646976470947
    10. '\' → logprob: -6.396646976470947

Token 24: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 25: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.46766746044158936
    2. '<|end|>' → logprob: -1.2176674604415894
    3. ' for' → logprob: -2.967667579650879
    4. '
' → logprob: -3.842667579650879
    5. '<|end|>' → logprob: -6.092667579650879
    6. '\n' → logprob: -6.592667579650879
    7. '```' → logprob: -8.217667579650879
    8. ' ' → logprob: -8.717667579650879
    9. 'newline' → logprob: -8.967667579650879
    10. ' 
' → logprob: -9.467667579650879

Token 26: ' problem' (ID: 4792)
  Prédit: ' _'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.6638169884681702
    2. ' problem' → logprob: -1.5388169288635254
    3. ' num' → logprob: -1.9138169288635254
    4. ' i' → logprob: -2.6638169288635254
    5. ' ' → logprob: -3.4138169288635254
    6. '_' → logprob: -4.038816928863525
    7. 'problem' → logprob: -7.163816928863525
    8. '_problem' → logprob: -7.788816928863525
    9. 'num' → logprob: -8.038817405700684
    10. 'i' → logprob: -8.413817405700684

Token 27: '_index' (ID: 7748)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.010402817279100418
    2. '_' → logprob: -5.135402679443359
    3. 'in' → logprob: -5.635402679443359
    4. 's' → logprob: -7.635402679443359
    5. '_in' → logprob: -8.88540267944336
    6. ' ' → logprob: -9.26040267944336
    7. '_index' → logprob: -10.63540267944336
    8. '_id' → logprob: -10.63540267944336
    9. '_name' → logprob: -11.01040267944336
    10. '_type' → logprob: -11.13540267944336

Token 28: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.02633594535291195
    2. 'in' → logprob: -3.6513359546661377
    3. ' ' → logprob: -10.651335716247559
    4. ',' → logprob: -12.276335716247559
    5. ' ,' → logprob: -13.526335716247559
    6. '0' → logprob: -14.026335716247559
    7. '	in' → logprob: -14.401335716247559
    8. '```' → logprob: -14.526335716247559
    9. 'In' → logprob: -14.776335716247559
    10. '_in' → logprob: -14.838835716247559

Token 29: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.20141783356666565
    2. 'range' → logprob: -1.7014178037643433
    3. '	range' → logprob: -12.701417922973633
    4. ' ' → logprob: -14.451417922973633
    5. '(range' → logprob: -15.201417922973633
    6. '_range' → logprob: -15.576417922973633
    7. 'Range' → logprob: -16.076417922973633
    8. 'num' → logprob: -16.326417922973633
    9. '```' → logprob: -16.701417922973633
    10. ' ' → logprob: -16.826417922973633

Token 30: '(num' (ID: 15828)
  Prédit: '(num'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(num' → logprob: -0.25321394205093384
    2. '(' → logprob: -1.503213882446289
    3. '(len' → logprob: -6.753213882446289
    4. ' (' → logprob: -9.253213882446289
    5. '(n' → logprob: -11.878213882446289
    6. '(min' → logprob: -12.253213882446289
    7. ' num' → logprob: -13.378213882446289
    8. '(NUM' → logprob: -13.503213882446289
    9. '(
' → logprob: -13.878213882446289
    10. '(s' → logprob: -14.003213882446289

Token 31: '_pro' (ID: 4617)
  Prédit: '_pro'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_pro' → logprob: -9.849109119386412e-06
    2. '_' → logprob: -12.125009536743164
    3. ' _' → logprob: -13.750009536743164
    4. ')_' → logprob: -13.875009536743164
    5. '_problem' → logprob: -14.125009536743164
    6. '_probs' → logprob: -15.125009536743164
    7. '_tasks' → logprob: -15.500009536743164
    8. '_prob' → logprob: -15.625009536743164
    9. '_s' → logprob: -15.750009536743164
    10. '_p' → logprob: -16.125009536743164

Token 32: 'blems' (ID: 50594)
  Prédit: 'blems'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'blems' → logprob: -0.00010902655776590109
    2. 'bl' → logprob: -10.25010871887207
    3. 'lems' → logprob: -10.25010871887207
    4. 'ble' → logprob: -11.37510871887207
    5. '_ble' → logprob: -11.87510871887207
    6. 'bs' → logprob: -12.00010871887207
    7. '_pro' → logprob: -12.50010871887207
    8. 'blem' → logprob: -12.62510871887207
    9. '_b' → logprob: -13.62510871887207
    10. '_' → logprob: -13.75010871887207

Token 33: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.014459515921771526
    2. ' ):' → logprob: -4.264459609985352
    3. '+' → logprob: -8.764459609985352
    4. ')' → logprob: -9.764459609985352
    5. ':' → logprob: -10.264459609985352
    6. '):
' → logprob: -10.764459609985352
    7. ',' → logprob: -11.389459609985352
    8. ' )' → logprob: -12.139459609985352
    9. ' +' → logprob: -13.014459609985352
    10. ' ' → logprob: -13.389459609985352

Token 34: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.018916653469204903
    2. '    ' → logprob: -5.268916606903076
    3. '<|end|>' → logprob: -5.393916606903076
    4. '   ' → logprob: -5.768916606903076
    5. ' cost' → logprob: -5.893916606903076
    6. ' s' → logprob: -7.393916606903076
    7. ' input' → logprob: -7.893916606903076
    8. ' 
' → logprob: -8.268917083740234
    9. ' )' → logprob: -8.518917083740234
    10. ' ,' → logprob: -8.893917083740234

Token 35: ' current' (ID: 2208)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5758481025695801
    2. ' cost' → logprob: -1.32584810256958
    3. ' solution' → logprob: -2.95084810256958
    4. ' problem' → logprob: -3.32584810256958
    5. ' current' → logprob: -3.70084810256958
    6. ' line' → logprob: -4.82584810256958
    7. ' code' → logprob: -5.07584810256958
    8. ' ' → logprob: -5.45084810256958
    9. ' costs' → logprob: -5.45084810256958
    10. 'cost' → logprob: -5.45084810256958

Token 36: '_cost' (ID: 36820)
  Prédit: '_cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cost' → logprob: -0.010471829213202
    2. '_' → logprob: -4.760471820831299
    3. ' _' → logprob: -6.885471820831299
    4. '_score' → logprob: -8.635472297668457
    5. '_problem' → logprob: -8.885472297668457
    6. '_solution' → logprob: -9.260472297668457
    7. '_price' → logprob: -9.885472297668457
    8. '_time' → logprob: -10.010472297668457
    9. '_pro' → logprob: -10.510472297668457
    10. '_input' → logprob: -11.135472297668457

Token 37: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0006896786508150399
    2. '=' → logprob: -7.375689506530762
    3. ',' → logprob: -10.375689506530762
    4. ' ' → logprob: -10.625689506530762
    5. ' +=' → logprob: -12.750689506530762
    6. '   ' → logprob: -13.000689506530762
    7. ' ,' → logprob: -13.875689506530762
    8. ')' → logprob: -15.375689506530762
    9. '_' → logprob: -15.375689506530762
    10. '  ' → logprob: -15.500689506530762

Token 38: ' current' (ID: 2208)
  Prédit: 'current'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'current' → logprob: -0.2174275666475296
    2. ' current' → logprob: -1.9674276113510132
    3. 'time' → logprob: -3.3424274921417236
    4. '_' → logprob: -4.842427730560303
    5. ' time' → logprob: -5.592427730560303
    6. 'deadline' → logprob: -5.967427730560303
    7. 'max' → logprob: -6.467427730560303
    8. '_=' → logprob: -7.592427730560303
    9. '=current' → logprob: -7.717427730560303
    10. 'required' → logprob: -7.842427730560303

Token 39: '_time' (ID: 6425)
  Prédit: '_time'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_time' → logprob: -0.003961093723773956
    2. '_' → logprob: -7.003961086273193
    3. '_limit' → logprob: -7.128961086273193
    4. '_pen' → logprob: -7.503961086273193
    5. '_points' → logprob: -7.503961086273193
    6. '_duration' → logprob: -9.003961563110352
    7. '_score' → logprob: -9.003961563110352
    8. '_solution' → logprob: -9.003961563110352
    9. '_d' → logprob: -9.378961563110352
    10. '_s' → logprob: -9.753961563110352

Token 40: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.023257708176970482
    2. '=' → logprob: -3.7732577323913574
    3. ',' → logprob: -11.6482572555542
    4. ' ' → logprob: -12.8982572555542
    5. ')' → logprob: -14.3982572555542
    6. ' ,' → logprob: -16.273258209228516
    7. 's' → logprob: -16.398258209228516
    8. ' =
' → logprob: -16.398258209228516
    9. '  ' → logprob: -17.148258209228516
    10. '=int' → logprob: -17.335758209228516

Token 41: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.22069613635540009
    2. '(int' → logprob: -1.7206960916519165
    3. '(map' → logprob: -4.220695972442627
    4. ' map' → logprob: -5.970695972442627
    5. 'map' → logprob: -7.720695972442627
    6. ' ' → logprob: -7.845695972442627
    7. '(input' → logprob: -7.970695972442627
    8. '(' → logprob: -8.095696449279785
    9. '[int' → logprob: -9.345696449279785
    10. '   ' → logprob: -9.970696449279785

Token 42: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.08954336494207382
    2. ' int' → logprob: -2.589543342590332
    3. '(int' → logprob: -4.589543342590332
    4. '[int' → logprob: -8.089543342590332
    5. ' (' → logprob: -10.464543342590332
    6. 'map' → logprob: -10.589543342590332
    7. ' map' → logprob: -10.714543342590332
    8. ')' → logprob: -11.089543342590332
    9. '<int' → logprob: -11.214543342590332
    10. '   ' → logprob: -11.714543342590332

Token 43: '(value' (ID: 6333)
  Prédit: '(value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(value' → logprob: -0.0004119616060052067
    2. '(input' → logprob: -8.250411987304688
    3. '(x' → logprob: -9.750411987304688
    4. ')value' → logprob: -10.000411987304688
    5. '()' → logprob: -10.875411987304688
    6. ')' → logprob: -11.250411987304688
    7. '(token' → logprob: -12.000411987304688
    8. '(' → logprob: -12.375411987304688
    9. '(i' → logprob: -13.625411987304688
    10. '())' → logprob: -14.125411987304688

Token 44: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0013514261227101088
    2. '()' → logprob: -6.626351356506348
    3. 'for' → logprob: -11.376351356506348
    4. ' for' → logprob: -12.001351356506348
    5. '())' → logprob: -12.126351356506348
    6. ' )' → logprob: -14.001351356506348
    7. '   ' → logprob: -14.376351356506348
    8. ' ' → logprob: -14.876351356506348
    9. '))' → logprob: -15.751351356506348
    10. '(' → logprob: -16.376352310180664

Token 45: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.06972231715917587
    2. 'for' → logprob: -3.0697224140167236
    3. '()' → logprob: -4.4447221755981445
    4. ')' → logprob: -4.6947221755981445
    5. ' in' → logprob: -11.944722175598145
    6. ' ' → logprob: -12.069722175598145
    7. '	for' → logprob: -12.319722175598145
    8. '<|end|>' → logprob: -12.694722175598145
    9. '(input' → logprob: -13.319722175598145
    10. '```' → logprob: -13.319722175598145

Token 46: ' value' (ID: 1432)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.031203752383589745
    2. 'input' → logprob: -3.5312037467956543
    3. '<|end|>' → logprob: -7.281203746795654
    4. ' value' → logprob: -8.031204223632812
    5. 'value' → logprob: -8.781204223632812
    6. ')' → logprob: -9.656204223632812
    7. ' in' → logprob: -9.906204223632812
    8. ' user' → logprob: -10.031204223632812
    9. '=input' → logprob: -10.406204223632812
    10. 'in' → logprob: -10.531204223632812

Token 47: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.6363475918769836
    2. ' in' → logprob: -0.7613475918769836
    3. '<|end|>' → logprob: -6.886347770690918
    4. '_' → logprob: -7.011347770690918
    5. ')' → logprob: -7.011347770690918
    6. 'import' → logprob: -8.511347770690918
    7. ' ' → logprob: -9.011347770690918
    8. '  ' → logprob: -9.386347770690918
    9. '<|end|>' → logprob: -9.511347770690918
    10. 's' → logprob: -9.511347770690918

Token 48: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.42871788144111633
    2. ' input' → logprob: -1.053717851638794
    3. '(input' → logprob: -12.053717613220215
    4. ')' → logprob: -12.553717613220215
    5. '=input' → logprob: -12.803717613220215
    6. '[input' → logprob: -13.553717613220215
    7. '	input' → logprob: -14.178717613220215
    8. '<input' → logprob: -14.428717613220215
    9. '_input' → logprob: -14.928717613220215
    10. ' ' → logprob: -14.928717613220215

Token 49: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.03607979789376259
    2. '()' → logprob: -3.4110798835754395
    3. '())' → logprob: -6.0360798835754395
    4. '()).' → logprob: -11.286079406738281
    5. ')' → logprob: -11.786079406738281
    6. '().__' → logprob: -12.286079406738281
    7. '()>' → logprob: -12.911079406738281
    8. '(' → logprob: -12.911079406738281
    9. '();)' → logprob: -13.286079406738281
    10. '().'' → logprob: -13.661079406738281

Token 50: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -2.1008713702030946e-06
    2. ' split' → logprob: -13.500001907348633
    3. 'strip' → logprob: -14.625001907348633
    4. 'spl' → logprob: -16.750001907348633
    5. ')' → logprob: -17.250001907348633
    6. '(split' → logprob: -17.500001907348633
    7. 'rstrip' → logprob: -17.500001907348633
    8. '.split' → logprob: -18.750001907348633
    9. '```' → logprob: -19.000001907348633
    10. 'plit' → logprob: -20.000001907348633

Token 51: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.023303711786866188
    2. '()' → logprob: -3.773303747177124
    3. ')' → logprob: -10.148303985595703
    4. '()))' → logprob: -11.773303985595703
    5. '())
' → logprob: -12.648303985595703
    6. '()]' → logprob: -12.773303985595703
    7. ' ())' → logprob: -13.523303985595703
    8. '();)' → logprob: -13.898303985595703
    9. '(' → logprob: -14.398303985595703
    10. '()`' → logprob: -14.523303985595703

Token 52: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 53: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.5691445469856262
    2. ' if' → logprob: -0.9441445469856262
    3. '<|end|>' → logprob: -3.5691444873809814
    4. '   ' → logprob: -4.3191447257995605
    5. ' ' → logprob: -6.4441447257995605
    6. ' 
' → logprob: -7.5691447257995605
    7. '    ' → logprob: -8.194144248962402
    8. '    
' → logprob: -8.319144248962402
    9. '<|end|>' → logprob: -8.694144248962402
    10. '
' → logprob: -9.069144248962402

Token 54: ' current' (ID: 2208)
  Prédit: ' current'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' current' → logprob: -0.0010370950913056731
    2. 'current' → logprob: -6.876037120819092
    3. '(current' → logprob: -13.626036643981934
    4. ' ' → logprob: -14.001036643981934
    5. ' (' → logprob: -14.001036643981934
    6. '	current' → logprob: -14.751036643981934
    7. ' ' → logprob: -14.876036643981934
    8. 'urrent' → logprob: -15.626036643981934
    9. ' time' → logprob: -15.876036643981934
    10. '_current' → logprob: -16.00103759765625

Token 55: '_time' (ID: 6425)
  Prédit: '_cost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cost' → logprob: -0.0041028582490980625
    2. '_time' → logprob: -5.50410270690918
    3. '_' → logprob: -10.87910270690918
    4. '_price' → logprob: -13.50410270690918
    5. ' _' → logprob: -14.00410270690918
    6. 'cost' → logprob: -14.62910270690918
    7. '_COST' → logprob: -15.25410270690918
    8. '_fee' → logprob: -15.75410270690918
    9. '```' → logprob: -15.75410270690918
    10. '_tim' → logprob: -15.87910270690918

Token 56: ' <=' (ID: 5017)
  Prédit: '<='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<=' → logprob: -0.3484955132007599
    2. ' <=' → logprob: -1.2234954833984375
    3. '<' → logprob: -10.098495483398438
    4. ' <' → logprob: -13.098495483398438
    5. ')<=' → logprob: -13.098495483398438
    6. ' ' → logprob: -13.598495483398438
    7. '<|end|>' → logprob: -13.723495483398438
    8. ' ' → logprob: -14.223495483398438
    9. '=' → logprob: -14.973495483398438
    10. ']<=' → logprob: -14.973495483398438

Token 57: ' time' (ID: 1058)
  Prédit: 'time'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'time' → logprob: -0.006715370807796717
    2. ' time' → logprob: -5.006715297698975
    3. '	time' → logprob: -18.131715774536133
    4. 't' → logprob: -18.631715774536133
    5. '=time' → logprob: -19.006715774536133
    6. '100' → logprob: -20.006715774536133
    7. '   ' → logprob: -20.006715774536133
    8. '"time' → logprob: -20.131715774536133
    9. ' ' → logprob: -20.381715774536133
    10. 'Time' → logprob: -20.631715774536133

Token 58: '_limit' (ID: 34361)
  Prédit: '_limit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_limit' → logprob: -1.2664456789934775e-06
    2. 'limit' → logprob: -13.875000953674316
    3. '_lim' → logprob: -15.625000953674316
    4. '_l' → logprob: -15.750000953674316
    5. '_' → logprob: -17.250001907348633
    6. '_limits' → logprob: -18.625001907348633
    7. '-limit' → logprob: -19.125001907348633
    8. 'Limit' → logprob: -19.750001907348633
    9. '_li' → logprob: -20.250001907348633
    10. '_LIMIT' → logprob: -20.250001907348633

Token 59: ' and' (ID: 326)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.43166857957839966
    2. ' and' → logprob: -1.0566685199737549
    3. 'and' → logprob: -6.056668758392334
    4. '   ' → logprob: -7.931668758392334
    5. ' :' → logprob: -8.556668281555176
    6. '       ' → logprob: -10.556668281555176
    7. ':
' → logprob: -10.806668281555176
    8. ',' → logprob: -12.056668281555176
    9. '    ' → logprob: -12.181668281555176
    10. '	and' → logprob: -12.806668281555176

Token 60: ' current' (ID: 2208)
  Prédit: ' current'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' current' → logprob: -0.002191779436543584
    2. 'current' → logprob: -6.127191543579102
    3. '(current' → logprob: -12.627191543579102
    4. ' (' → logprob: -13.877191543579102
    5. ' ' → logprob: -14.127191543579102
    6. '	current' → logprob: -14.627191543579102
    7. ' ' → logprob: -14.752191543579102
    8. '   ' → logprob: -15.252191543579102
    9. 'urrent' → logprob: -16.2521915435791
    10. '    ' → logprob: -16.2521915435791

Token 61: '_cost' (ID: 36820)
  Prédit: '_cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cost' → logprob: -1.4021237802808173e-05
    2. '_' → logprob: -11.500014305114746
    3. 'cost' → logprob: -13.875014305114746
    4. '_time' → logprob: -14.625014305114746
    5. '_c' → logprob: -14.750014305114746
    6. '_price' → logprob: -15.250014305114746
    7. '_cut' → logprob: -15.250014305114746
    8. '_co' → logprob: -15.500014305114746
    9. '_COST' → logprob: -15.750014305114746
    10. '_min' → logprob: -15.875014305114746

Token 62: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.0010468624532222748
    2. '<' → logprob: -6.876046657562256
    3. ' ' → logprob: -11.501047134399414
    4. '<|end|>' → logprob: -12.751047134399414
    5. ' ' → logprob: -15.626047134399414
    6. ' <",' → logprob: -16.001047134399414
    7. ' \<' → logprob: -16.376047134399414
    8. '  ' → logprob: -16.501047134399414
    9. '<int' → logprob: -16.876047134399414
    10. '   ' → logprob: -17.001047134399414

Token 63: ' min' (ID: 1349)
  Prédit: ' min'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.47407805919647217
    2. 'min' → logprob: -0.9740780591964722
    3. '	min' → logprob: -14.724078178405762
    4. '=min' → logprob: -15.224078178405762
    5. ' ' → logprob: -15.599078178405762
    6. '(min' → logprob: -16.474077224731445
    7. '[min' → logprob: -16.849077224731445
    8. '_min' → logprob: -16.974077224731445
    9. ':min' → logprob: -17.474077224731445
    10. '   ' → logprob: -17.599077224731445

Token 64: '_cost' (ID: 36820)
  Prédit: '_cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cost' → logprob: -1.8624639324116288e-06
    2. '_' → logprob: -13.375001907348633
    3. '_c' → logprob: -16.750001907348633
    4. 'cost' → logprob: -17.375001907348633
    5. '_COST' → logprob: -17.500001907348633
    6. ' _' → logprob: -17.625001907348633
    7. '_cos' → logprob: -18.250001907348633
    8. '_co' → logprob: -18.500001907348633
    9. '_cast' → logprob: -19.000001907348633
    10. '__' → logprob: -19.250001907348633

Token 65: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -9.77022064034827e-05
    2. ':
' → logprob: -9.500097274780273
    3. '):' → logprob: -10.875097274780273
    4. '   ' → logprob: -13.750097274780273
    5. ' :' → logprob: -13.875097274780273
    6. ':**' → logprob: -15.250097274780273
    7. '       ' → logprob: -15.375097274780273
    8. ':min' → logprob: -15.500097274780273
    9. '<|end|>' → logprob: -15.500097274780273
    10. ',' → logprob: -15.875097274780273

Token 66: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.4114554822444916
    2. ':' → logprob: -1.161455512046814
    3. '   ' → logprob: -3.7864553928375244
    4. ':min' → logprob: -8.036455154418945
    5. ':
' → logprob: -8.161455154418945
    6. '<|end|>' → logprob: -8.411455154418945
    7. '    ' → logprob: -8.786455154418945
    8. 'min' → logprob: -9.661455154418945
    9. '_min' → logprob: -9.911455154418945
    10. '):' → logprob: -9.911455154418945

Token 67: ' min' (ID: 1349)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' (adapté à ' min') → logprob: -0.5079180002212524
    2. ' min' → logprob: -1.0079180002212524
    3. '       ' → logprob: -4.257917881011963
    4. '   ' → logprob: -4.382917881011963
    5. '           ' → logprob: -5.257917881011963
    6. '
' → logprob: -7.507917881011963
    7. '	min' → logprob: -7.757917881011963
    8. '```' → logprob: -8.632918357849121
    9. '_min' → logprob: -9.507918357849121
    10. '(min' → logprob: -10.132918357849121

Token 68: '_cost' (ID: 36820)
  Prédit: '_cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cost' → logprob: -1.2664456789934775e-06
    2. 'cost' → logprob: -14.250000953674316
    3. '_' → logprob: -15.625000953674316
    4. 'Cost' → logprob: -15.625000953674316
    5. '_COST' → logprob: -16.750001907348633
    6. '_code' → logprob: -18.125001907348633
    7. '-cost' → logprob: -18.500001907348633
    8. ' _' → logprob: -18.750001907348633
    9. ' cost' → logprob: -18.875001907348633
    10. '_cut' → logprob: -19.500001907348633

Token 69: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.005234121344983578
    2. '=' → logprob: -5.255234241485596
    3. ' =
' → logprob: -15.630233764648438
    4. '=current' → logprob: -15.630233764648438
    5. ' ' → logprob: -17.755233764648438
    6. '=

' → logprob: -18.380233764648438
    7. '＝' → logprob: -18.630233764648438
    8. ',' → logprob: -18.630233764648438
    9. ' =)' → logprob: -18.755233764648438
    10. '_' → logprob: -19.755233764648438

Token 70: ' current' (ID: 2208)
  Prédit: ' current'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' current' → logprob: -0.5759401321411133
    2. 'current' → logprob: -0.8259401321411133
    3. '	current' → logprob: -15.075940132141113
    4. '   ' → logprob: -15.575940132141113
    5. '$current' → logprob: -16.450939178466797
    6. '[current' → logprob: -17.200939178466797
    7. ' ' → logprob: -17.450939178466797
    8. 'urrent' → logprob: -17.575939178466797
    9. '(current' → logprob: -17.575939178466797
    10. 'cur' → logprob: -17.825939178466797

Token 71: '_cost' (ID: 36820)
  Prédit: '_cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cost' → logprob: -0.00011093381908722222
    2. '_' → logprob: -9.125110626220703
    3. '_co' → logprob: -14.750110626220703
    4. 'cost' → logprob: -15.000110626220703
    5. ' _' → logprob: -15.250110626220703
    6. '_code' → logprob: -15.750110626220703
    7. '_COST' → logprob: -16.000110626220703
    8. 'Cost' → logprob: -16.375110626220703
    9. '_c' → logprob: -16.375110626220703
    10. '_time' → logprob: -16.500110626220703

Token 72: '

' (ID: 279)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.7261907458305359
    2. 'print' → logprob: -0.7261907458305359
    3. '
' → logprob: -3.6011908054351807
    4. ' if' → logprob: -6.101190567016602
    5. ' 
' → logprob: -7.226190567016602
    6. '```' → logprob: -7.351190567016602
    7. '

' → logprob: -7.476190567016602
    8. '  
' → logprob: -8.101190567016602
    9. '<|end|>' → logprob: -8.351190567016602
    10. '    
' → logprob: -8.351190567016602

Token 73: 'if' (ID: 366)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.4861902892589569
    2. 'if' → logprob: -1.1111903190612793
    3. '
' → logprob: -2.9861903190612793
    4. '

' → logprob: -5.611190319061279
    5. 'min' → logprob: -7.611190319061279
    6. '```' → logprob: -8.361189842224121
    7. '
' → logprob: -8.486189842224121
    8. '    
' → logprob: -8.611189842224121
    9. '  
' → logprob: -8.736189842224121
    10. ' if' → logprob: -8.736189842224121

Token 74: ' min' (ID: 1349)
  Prédit: ' min'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.029750484973192215
    2. 'min' → logprob: -3.5297505855560303
    3. '(min' → logprob: -18.02975082397461
    4. '[min' → logprob: -18.15475082397461
    5. '	min' → logprob: -19.27975082397461
    6. ' ' → logprob: -19.65475082397461
    7. ' num' → logprob: -19.90475082397461
    8. '=min' → logprob: -20.02975082397461
    9. '_min' → logprob: -20.90475082397461
    10. ' ' → logprob: -21.15475082397461

Token 75: '_cost' (ID: 36820)
  Prédit: '_cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cost' → logprob: -7.896309739408025e-07
    2. '_' → logprob: -14.625000953674316
    3. '_cut' → logprob: -17.25
    4. 'cost' → logprob: -17.25
    5. '_c' → logprob: -17.625
    6. '_COST' → logprob: -17.625
    7. '_co' → logprob: -18.125
    8. '\' → logprob: -18.5
    9. ' _' → logprob: -18.625
    10. '_code' → logprob: -18.75

Token 76: ' >' (ID: 1424)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.05146912485361099
    2. '==' → logprob: -3.176469087600708
    3. ' !=' → logprob: -5.301469326019287
    4. ' <' → logprob: -6.051469326019287
    5. '!=' → logprob: -7.301469326019287
    6. '<' → logprob: -7.926469326019287
    7. '```' → logprob: -11.176468849182129
    8. ' ' → logprob: -11.426468849182129
    9. ' <=' → logprob: -11.426468849182129
    10. '=' → logprob: -12.301468849182129

Token 77: ' ' (ID: 220)
  Prédit: 'time'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'time' → logprob: -0.2025618553161621
    2. '100' → logprob: -1.952561855316162
    3. ' time' → logprob: -3.327561855316162
    4. ' ' → logprob: -5.202561855316162
    5. '10' → logprob: -10.07756233215332
    6. '1' → logprob: -11.70256233215332
    7. 't' → logprob: -12.07756233215332
    8. '	time' → logprob: -12.20256233215332
    9. '999' → logprob: -12.82756233215332
    10. '  ' → logprob: -14.07756233215332

Token 78: '100' (ID: 1353)
  Prédit: 'time'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'time' → logprob: -0.0060198064893484116
    2. '100' → logprob: -5.131019592285156
    3. ' time' → logprob: -9.381019592285156
    4. '10' → logprob: -13.381019592285156
    5. ' ' → logprob: -13.631019592285156
    6. '999' → logprob: -14.131019592285156
    7. '	time' → logprob: -14.256019592285156
    8. 't' → logprob: -14.881019592285156
    9. 'min' → logprob: -14.881019592285156
    10. 'tim' → logprob: -15.131019592285156

Token 79: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -2.45848218582978e-06
    2. '<|end|>' → logprob: -13.25000286102295
    3. ')' → logprob: -15.50000286102295
    4. '1' → logprob: -16.375001907348633
    5. ' ' → logprob: -16.500001907348633
    6. ':' → logprob: -16.500001907348633
    7. '000' → logprob: -16.875001907348633
    8. '9' → logprob: -16.875001907348633
    9. '```' → logprob: -17.000001907348633
    10. '00' → logprob: -17.687501907348633

Token 80: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00020652047533076257
    2. ':
' → logprob: -8.50020694732666
    3. ' :' → logprob: -13.25020694732666
    4. '.' → logprob: -15.25020694732666
    5. ':return' → logprob: -15.25020694732666
    6. ':

' → logprob: -15.37520694732666
    7. ' or' → logprob: -15.87520694732666
    8. 'print' → logprob: -16.500205993652344
    9. ':
' → logprob: -16.500205993652344
    10. ',' → logprob: -16.875205993652344

Token 81: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0705738291144371
    2. ' print' → logprob: -2.9455738067626953
    3. '   ' → logprob: -4.320573806762695
    4. '-' → logprob: -6.820573806762695
    5. '    ' → logprob: -8.070573806762695
    6. '    
' → logprob: -8.445573806762695
    7. '\n' → logprob: -9.070573806762695
    8. '<|end|>' → logprob: -9.570573806762695
    9. '```' → logprob: -9.570573806762695
    10. '
' → logprob: -9.820573806762695

Token 82: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0013047605752944946
    2. '-' → logprob: -6.751304626464844
    3. ' print' → logprob: -9.501304626464844
    4. '   ' → logprob: -10.751304626464844
    5. '-print' → logprob: -10.876304626464844
    6. '```' → logprob: -11.376304626464844
    7. 'pr' → logprob: -12.876304626464844
    8. ' -' → logprob: -13.376304626464844
    9. '``' → logprob: -14.126304626464844
    10. 'prit' → logprob: -14.376304626464844

Token 83: '('' (ID: 706)
  Prédit: '(-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(-' → logprob: -0.07946557551622391
    2. '(' → logprob: -2.829465627670288
    3. '("' → logprob: -4.079465389251709
    4. '("-' → logprob: -8.454465866088867
    5. '('' → logprob: -8.954465866088867
    6. '()' → logprob: -9.829465866088867
    7. '(None' → logprob: -10.829465866088867
    8. '-' → logprob: -11.954465866088867
    9. '(False' → logprob: -13.579465866088867
    10. '("")' → logprob: -13.704465866088867

Token 84: 'T' (ID: 51)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.001106755924411118
    2. '-T' → logprob: -6.8761067390441895
    3. 'T' → logprob: -11.376107215881348
    4. ''-' → logprob: -11.876107215881348
    5. ' -' → logprob: -12.001107215881348
    6. '```' → logprob: -12.001107215881348
    7. '`' → logprob: -12.126107215881348
    8. '"-' → logprob: -12.251107215881348
    9. '-D' → logprob: -12.376107215881348
    10. '_-' → logprob: -12.626107215881348

Token 85: 'LE' (ID: 1400)
  Prédit: 'LE'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'LE' → logprob: -0.6442953944206238
    2. 'oo' → logprob: -1.2692954540252686
    3. 'o' → logprob: -2.2692954540252686
    4. 'ime' → logprob: -2.6442954540252686
    5. 'im' → logprob: -5.5192952156066895
    6. 'le' → logprob: -5.8942952156066895
    7. 'h' → logprob: -6.0192952156066895
    8. '-' → logprob: -6.5192952156066895
    9. 'L' → logprob: -6.5192952156066895
    10. 'O' → logprob: -7.2692952156066895

Token 86: '')
' (ID: 2515)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.0110935652628541
    2. '')
' → logprob: -4.636093616485596
    3. ')' → logprob: -6.761093616485596
    4. '')
' → logprob: -9.261093139648438
    5. '")' → logprob: -10.636093139648438
    6. '!' → logprob: -10.761093139648438
    7. 'else' → logprob: -11.636093139648438
    8. '')

' → logprob: -11.761093139648438
    9. ''' → logprob: -12.511093139648438
    10. ')
' → logprob: -12.636093139648438

Token 87: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -5.2166411478538066e-05
    2. ' else' → logprob: -9.875052452087402
    3. '```' → logprob: -15.625052452087402
    4. '<|end|>' → logprob: -15.875052452087402
    5. '   ' → logprob: -16.250051498413086
    6. '	else' → logprob: -16.625051498413086
    7. '_else' → logprob: -16.750051498413086
    8. 'elif' → logprob: -17.000051498413086
    9. 'elses' → logprob: -17.375051498413086
    10. '    
' → logprob: -17.750051498413086

Token 88: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0009020501165650785
    2. ':
' → logprob: -7.12590217590332
    3. '   ' → logprob: -9.37590217590332
    4. ' :' → logprob: -11.75090217590332
    5. 'print' → logprob: -13.62590217590332
    6. '<|end|>' → logprob: -14.37590217590332
    7. ' print' → logprob: -14.62590217590332
    8. '```' → logprob: -14.75090217590332
    9. '  ' → logprob: -15.37590217590332
    10. ':

' → logprob: -15.37590217590332

Token 89: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00478610722348094
    2. ' print' → logprob: -5.504786014556885
    3. '   ' → logprob: -7.254786014556885
    4. '```' → logprob: -15.254786491394043
    5. 'min' → logprob: -16.504785537719727
    6. '       ' → logprob: -16.629785537719727
    7. '	print' → logprob: -16.754785537719727
    8. '    ' → logprob: -17.379785537719727
    9. '  ' → logprob: -17.754785537719727
    10. ' ' → logprob: -17.754785537719727

Token 90: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -6.704273118884885e-07
    2. ' print' → logprob: -14.375000953674316
    3. '```' → logprob: -17.75
    4. '   ' → logprob: -18.125
    5. 'pr' → logprob: -19.125
    6. 'printf' → logprob: -21.125
    7. 'prin' → logprob: -21.25
    8. '	print' → logprob: -21.625
    9. 'prit' → logprob: -22.125
    10. '``' → logprob: -22.875

Token 91: '(min' (ID: 26035)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.70065838098526
    2. '(min' → logprob: -0.70065838098526
    3. '('' → logprob: -4.950658321380615
    4. '(f' → logprob: -8.200658798217773
    5. '("("' → logprob: -9.950658798217773
    6. '('(' → logprob: -9.950658798217773
    7. '((' → logprob: -11.825658798217773
    8. '(max' → logprob: -12.200658798217773
    9. ''(' → logprob: -12.450658798217773
    10. '()' → logprob: -12.700658798217773

Token 92: '_cost' (ID: 36820)
  Prédit: '_cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cost' → logprob: -1.5048530030981055e-06
    2. 'cost' → logprob: -13.750001907348633
    3. 'Cost' → logprob: -15.375001907348633
    4. ')' → logprob: -16.750001907348633
    5. '_COST' → logprob: -17.500001907348633
    6. '_' → logprob: -17.750001907348633
    7. '_code' → logprob: -18.375001907348633
    8. ' cost' → logprob: -19.125001907348633
    9. '_)' → logprob: -19.125001907348633
    10. '-cost' → logprob: -19.250001907348633

Token 93: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -9.088346359931165e-07
    2. ')
' → logprob: -14.500000953674316
    3. ' )' → logprob: -15.500000953674316
    4. '')' → logprob: -16.25
    5. '))' → logprob: -17.375
    6. '`)' → logprob: -18.625
    7. ')`' → logprob: -18.75
    8. '}' → logprob: -19.375
    9. '()' → logprob: -19.375
    10. '")' → logprob: -19.5


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 91
Tokens correctement prédits (1ère position, stricte): 40
Tokens correctement prédits (1ère position, avec adaptation): 44
Tokens correctement prédits (top 10): 77
Précision stricte (1ère position): 43.96%
Précision adaptée (1ère position): 48.35%
Précision (top 10): 84.62%
================================================================================
