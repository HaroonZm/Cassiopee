================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:45:09
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
input_value = int(input())
output_value = input_value ** 3
print(output_value)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'input' (ID: 2586)
  → Token d'amorce (pas de prédiction)

Token 1: '_value' (ID: 6734)
  → Token d'amorce (pas de prédiction)

Token 2: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 3: ' int' (ID: 677)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.9770203828811646
    2. 'input' → logprob: -1.2270203828811646
    3. ' ' → logprob: -1.3520203828811646
    4. '"' → logprob: -3.102020263671875
    5. ' "' → logprob: -4.477020263671875
    6. ''' → logprob: -5.352020263671875
    7. '0' → logprob: -5.727020263671875
    8. ' '' → logprob: -6.602020263671875
    9. ' int' → logprob: -7.102020263671875
    10. ' a' → logprob: -7.102020263671875

Token 4: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0029469169676303864
    2. '```' → logprob: -6.877946853637695
    3. ''' → logprob: -7.002946853637695
    4. '`' → logprob: -7.627946853637695
    5. '('' → logprob: -8.752946853637695
    6. '_' → logprob: -9.752946853637695
    7. ' (' → logprob: -10.127946853637695
    8. '"' → logprob: -10.127946853637695
    9. '(
' → logprob: -10.377946853637695
    10. ')' → logprob: -10.627946853637695

Token 5: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.03857635334134102
    2. '(' → logprob: -3.663576364517212
    3. '())' → logprob: -4.788576126098633
    4. '()' → logprob: -5.788576126098633
    5. '))' → logprob: -7.538576126098633
    6. '')' → logprob: -9.538576126098633
    7. '")' → logprob: -9.788576126098633
    8. '`)' → logprob: -10.038576126098633
    9. '```' → logprob: -10.788576126098633
    10. '[' → logprob: -11.163576126098633

Token 6: 'output' (ID: 6130)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.262643039226532
    2. '+' → logprob: -1.6376430988311768
    3. '*' → logprob: -4.137642860412598
    4. ' if' → logprob: -4.512642860412598
    5. '%' → logprob: -5.887642860412598
    6. '```' → logprob: -6.512642860412598
    7. '+
' → logprob: -6.762642860412598
    8. '**' → logprob: -6.762642860412598
    9. '#' → logprob: -7.137642860412598
    10. ')' → logprob: -8.137642860412598

Token 7: '_value' (ID: 6734)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.17222408950328827
    2. '*' → logprob: -2.1722240447998047
    3. '(' → logprob: -3.7972240447998047
    4. '**' → logprob: -4.672224044799805
    5. ')' → logprob: -5.172224044799805
    6. '=' → logprob: -6.547224044799805
    7. '```' → logprob: -6.797224044799805
    8. '\' → logprob: -7.172224044799805
    9. ' +' → logprob: -7.297224044799805
    10. '#' → logprob: -7.672224044799805

Token 8: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.11695325374603271
    2. ' =' → logprob: -2.6169533729553223
    3. '+' → logprob: -3.9919533729553223
    4. '<|end|>' → logprob: -5.241953372955322
    5. ')' → logprob: -5.491953372955322
    6. '(' → logprob: -5.741953372955322
    7. ' +=' → logprob: -6.491953372955322
    8. '```' → logprob: -6.616953372955322
    9. '+=' → logprob: -6.741953372955322
    10. ' ' → logprob: -7.241953372955322

Token 9: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.018335359171032906
    2. 'input' → logprob: -4.018335342407227
    3. ' ' → logprob: -9.143335342407227
    4. ' int' → logprob: -11.143335342407227
    5. '(input' → logprob: -11.268335342407227
    6. '0' → logprob: -11.268335342407227
    7. '"' → logprob: -11.518335342407227
    8. ' output' → logprob: -11.768335342407227
    9. '2' → logprob: -12.893335342407227
    10. ''' → logprob: -12.893335342407227

Token 10: '_value' (ID: 6734)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6202223300933838
    2. '_value' → logprob: -0.8702223300933838
    3. '_' → logprob: -3.745222330093384
    4. ')' → logprob: -4.620222091674805
    5. '```' → logprob: -5.870222091674805
    6. '('_' → logprob: -6.620222091674805
    7. '()' → logprob: -6.995222091674805
    8. '"' → logprob: -7.495222091674805
    9. 'Value' → logprob: -7.495222091674805
    10. '("_' → logprob: -7.620222091674805

Token 11: ' **' (ID: 6240)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.0609879344701767
    2. '*' → logprob: -3.435987949371338
    3. '**' → logprob: -4.435987949371338
    4. ' +' → logprob: -5.060987949371338
    5. '%' → logprob: -5.310987949371338
    6. '```' → logprob: -6.810987949371338
    7. '[' → logprob: -7.060987949371338
    8. '<|end|>' → logprob: -8.06098747253418
    9. ' ' → logprob: -8.43598747253418
    10. ' **' → logprob: -8.43598747253418

Token 12: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.029759865254163742
    2. ' ' → logprob: -3.5297598838806152
    3. '3' → logprob: -11.904759407043457
    4. '0' → logprob: -12.904759407043457
    5. '```' → logprob: -17.029760360717773
    6. '1' → logprob: -17.154760360717773
    7. ' ' → logprob: -17.529760360717773
    8. '(' → logprob: -18.279760360717773
    9. ')' → logprob: -19.154760360717773
    10. ' -' → logprob: -19.217260360717773

Token 13: '3' (ID: 18)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.006745923776179552
    2. '3' → logprob: -5.0067458152771
    3. '0' → logprob: -10.881746292114258
    4. ' ' → logprob: -12.006746292114258
    5. '(' → logprob: -13.256746292114258
    6. '-' → logprob: -13.631746292114258
    7. '4' → logprob: -14.006746292114258
    8. '5' → logprob: -14.756746292114258
    9. '```' → logprob: -14.756746292114258
    10. '1' → logprob: -15.006746292114258

Token 14: '
' (ID: 198)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.8073879480361938
    2. '
' → logprob: -1.4323879480361938
    3. '<|end|>' → logprob: -1.4323879480361938
    4. '```' → logprob: -3.1823878288269043
    5. '\' → logprob: -4.807387828826904
    6. 'newline' → logprob: -4.932387828826904
    7. ')' → logprob: -5.057387828826904
    8. '#' → logprob: -6.057387828826904
    9. '*' → logprob: -6.307387828826904
    10. '' → logprob: -6.307387828826904

Token 15: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.07363119721412659
    2. '\n' → logprob: -3.9486312866210938
    3. '#' → logprob: -4.323631286621094
    4. '```' → logprob: -4.448631286621094
    5. '<|end|>' → logprob: -4.573631286621094
    6. ')' → logprob: -5.573631286621094
    7. '\' → logprob: -5.823631286621094
    8. '' → logprob: -6.323631286621094
    9. '
' → logprob: -6.448631286621094
    10. ' print' → logprob: -6.823631286621094

Token 16: '(output' (ID: 22485)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.007679026573896408
    2. '(output' → logprob: -4.882678985595703
    3. '("("' → logprob: -10.257678985595703
    4. '('' → logprob: -10.882678985595703
    5. '(input' → logprob: -12.007678985595703
    6. ' (' → logprob: -12.382678985595703
    7. '(print' → logprob: -13.132678985595703
    8. '(open' → logprob: -13.757678985595703
    9. '()' → logprob: -13.882678985595703
    10. '((' → logprob: -14.257678985595703

Token 17: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.005240037105977535
    2. '_val' → logprob: -5.755239963531494
    3. ')' → logprob: -7.255239963531494
    4. '_' → logprob: -7.630239963531494
    5. ')_' → logprob: -7.755239963531494
    6. '_)' → logprob: -8.505240440368652
    7. '_v' → logprob: -8.505240440368652
    8. '_t' → logprob: -11.505240440368652
    9. '_va' → logprob: -11.505240440368652
    10. ' _' → logprob: -12.630240440368652

Token 18: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.5048530030981055e-06
    2. '`)' → logprob: -14.000001907348633
    3. '))' → logprob: -15.125001907348633
    4. ' )' → logprob: -15.250001907348633
    5. '')' → logprob: -16.750001907348633
    6. '```' → logprob: -17.500001907348633
    7. ')
' → logprob: -17.625001907348633
    8. ')`' → logprob: -18.375001907348633
    9. '")' → logprob: -19.000001907348633
    10. '#' → logprob: -19.125001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 16
Tokens correctement prédits (1ère position, stricte): 4
Tokens correctement prédits (1ère position, avec adaptation): 4
Tokens correctement prédits (top 10): 12
Précision stricte (1ère position): 25.00%
Précision adaptée (1ère position): 25.00%
Précision (top 10): 75.00%
================================================================================
