================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:30:37
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import functools
import itertools
c = functools.reduce(lambda _, __: input(), range(1), None)
res = next(itertools.starmap(chr, [(ord(c)+1,)]))
print(res)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' functools' (ID: 142636)
  → Token d'amorce (pas de prédiction)

Token 2: '
' (ID: 198)
  → Token d'amorce (pas de prédiction)

Token 3: 'import' (ID: 561)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -3.1424973713001236e-05
    2. '.​' → logprob: -12.125031471252441
    3. '.def' → logprob: -12.375031471252441
    4. 'def' → logprob: -12.750031471252441
    5. '\.' → logprob: -13.000031471252441
    6. '\' → logprob: -13.125031471252441
    7. '(' → logprob: -13.250031471252441
    8. '.

' → logprob: -13.750031471252441
    9. '​.' → logprob: -13.875031471252441
    10. '```' → logprob: -13.875031471252441

Token 4: ' itertools' (ID: 103178)
  Prédit: ' os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' os' → logprob: -0.04195677116513252
    2. ' sys' → logprob: -3.416956663131714
    3. ' operator' → logprob: -5.166956901550293
    4. 'os' → logprob: -6.791956901550293
    5. ' math' → logprob: -7.541956901550293
    6. ' itertools' → logprob: -7.916956901550293
    7. ' json' → logprob: -8.666956901550293
    8. 'operator' → logprob: -8.916956901550293
    9. ' collections' → logprob: -9.041956901550293
    10. 'sys' → logprob: -9.666956901550293

Token 5: '
' (ID: 198)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.00030281138606369495
    2. '.
' → logprob: -9.000303268432617
    3. 'import' → logprob: -10.125303268432617
    4. '```' → logprob: -10.500303268432617
    5. '\' → logprob: -10.875303268432617
    6. ',' → logprob: -11.250303268432617
    7. '.

' → logprob: -11.375303268432617
    8. '.import' → logprob: -11.625303268432617
    9. ' as' → logprob: -11.875303268432617
    10. '.`' → logprob: -12.125303268432617

Token 6: 'c' (ID: 66)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0017023178515955806
    2. '```' → logprob: -8.001702308654785
    3. 'import' → logprob: -8.251702308654785
    4. ' as' → logprob: -8.251702308654785
    5. '.
' → logprob: -8.501702308654785
    6. ',' → logprob: -8.501702308654785
    7. '\' → logprob: -9.751702308654785
    8. 'def' → logprob: -9.876702308654785
    9. '.import' → logprob: -10.251702308654785
    10. '.as' → logprob: -10.376702308654785

Token 7: ' =' (ID: 314)
  Prédit: 'o'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'o' → logprob: -0.4194263517856598
    2. 'ol' → logprob: -1.1694263219833374
    3. 'ounter' → logprob: -3.669426441192627
    4. 'ount' → logprob: -6.044426441192627
    5. 'ole' → logprob: -6.544426441192627
    6. 'olle' → logprob: -7.294426441192627
    7. 'ou' → logprob: -7.544426441192627
    8. 'ols' → logprob: -7.794426441192627
    9. 'oun' → logprob: -8.419425964355469
    10. 'omb' → logprob: -8.419425964355469

Token 8: ' functools' (ID: 142636)
  Prédit: ' itertools'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' itertools' → logprob: -0.03516869246959686
    2. ' functools' → logprob: -3.9101686477661133
    3. ' []' → logprob: -5.035168647766113
    4. ' ' → logprob: -5.910168647766113
    5. 'it' → logprob: -6.035168647766113
    6. ' collections' → logprob: -7.160168647766113
    7. ' iter' → logprob: -7.410168647766113
    8. ' list' → logprob: -7.785168647766113
    9. 'collections' → logprob: -8.410168647766113
    10. ' c' → logprob: -9.035168647766113

Token 9: '.reduce' (ID: 49441)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -4.7994282795116305e-05
    2. ' .' → logprob: -11.00004768371582
    3. '.`' → logprob: -12.37504768371582
    4. '.c' → logprob: -13.12504768371582
    5. '.reduce' → logprob: -13.62504768371582
    6. '.copy' → logprob: -13.62504768371582
    7. '.s' → logprob: -13.62504768371582
    8. '."""' → logprob: -13.62504768371582
    9. '.import' → logprob: -13.75004768371582
    10. '.​' → logprob: -13.87504768371582

Token 10: '(lambda' (ID: 43341)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07596205919981003
    2. '(lambda' → logprob: -2.7009620666503906
    3. '<|end|>' → logprob: -5.450962066650391
    4. '(
' → logprob: -7.700962066650391
    5. '((' → logprob: -8.32596206665039
    6. ' (' → logprob: -8.45096206665039
    7. '('' → logprob: -8.95096206665039
    8. ')' → logprob: -9.32596206665039
    9. 'lambda' → logprob: -9.57596206665039
    10. '```' → logprob: -9.95096206665039

Token 11: ' _,' (ID: 18042)
  Prédit: ' lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' lambda' → logprob: -0.30724024772644043
    2. ' x' → logprob: -1.9322402477264404
    3. ' ' → logprob: -2.5572402477264404
    4. ' a' → logprob: -3.5572402477264404
    5. '<|end|>' → logprob: -5.8072404861450195
    6. ' c' → logprob: -6.3072404861450195
    7. ' ,' → logprob: -6.3072404861450195
    8. '  ' → logprob: -6.6822404861450195
    9. ',' → logprob: -7.0572404861450195
    10. 'lambda' → logprob: -7.1822404861450195

Token 12: ' __' (ID: 2516)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -1.3486061096191406
    2. ' __' → logprob: -1.3486061096191406
    3. ' x' → logprob: -1.8486061096191406
    4. 'c' → logprob: -2.5986061096191406
    5. ' b' → logprob: -2.9736061096191406
    6. '__' → logprob: -3.0986061096191406
    7. ' a' → logprob: -3.9736061096191406
    8. ' y' → logprob: -4.098606109619141
    9. ' itertools' → logprob: -4.098606109619141
    10. 'x' → logprob: -4.223606109619141

Token 13: ':' (ID: 25)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.08083971589803696
    2. ':' → logprob: -2.7058396339416504
    3. ',__' → logprob: -5.70583963394165
    4. ' :' → logprob: -6.08083963394165
    5. ' ,' → logprob: -6.33083963394165
    6. '_,' → logprob: -6.58083963394165
    7. ',c' → logprob: -7.70583963394165
    8. ',_' → logprob: -7.70583963394165
    9. ',:' → logprob: -8.705840110778809
    10. '_:' → logprob: -8.830840110778809

Token 14: ' input' (ID: 3422)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -1.1552948951721191
    2. ' __' → logprob: -1.5302948951721191
    3. ' itertools' → logprob: -1.5302948951721191
    4. '_' → logprob: -2.280294895172119
    5. ' _' → logprob: -3.030294895172119
    6. 'next' → logprob: -4.405294895172119
    7. 'c' → logprob: -4.655294895172119
    8. ' next' → logprob: -4.655294895172119
    9. 'it' → logprob: -4.905294895172119
    10. ' c' → logprob: -5.155294895172119

Token 15: '(),' (ID: 2547)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.6451379656791687
    2. '(),' → logprob: -1.2701380252838135
    3. '()' → logprob: -1.8951380252838135
    4. '(' → logprob: -4.270137786865234
    5. '()),' → logprob: -4.895137786865234
    6. '('' → logprob: -4.895137786865234
    7. '(""))' → logprob: -5.520137786865234
    8. ')' → logprob: -6.020137786865234
    9. '().' → logprob: -6.020137786865234
    10. '("' → logprob: -6.520137786865234

Token 16: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.6086760759353638
    2. 'it' → logprob: -0.9836760759353638
    3. ' range' → logprob: -4.108675956726074
    4. '[' → logprob: -4.483675956726074
    5. '10' → logprob: -4.483675956726074
    6. 'iter' → logprob: -4.608675956726074
    7. ' itertools' → logprob: -5.108675956726074
    8. 'int' → logprob: -5.608675956726074
    9. '['' → logprob: -5.983675956726074
    10. '1' → logprob: -5.983675956726074

Token 17: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -3.786196975852363e-05
    2. '(len' → logprob: -11.500038146972656
    3. '(`' → logprob: -11.500038146972656
    4. '(
' → logprob: -12.375038146972656
    5. '(

' → logprob: -13.000038146972656
    6. '(n' → logprob: -13.250038146972656
    7. '(-' → logprob: -13.375038146972656
    8. '(.' → logprob: -13.750038146972656
    9. '((' → logprob: -14.125038146972656
    10. '(s' → logprob: -14.250038146972656

Token 18: '1' (ID: 16)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -1.119662880897522
    2. 'int' → logprob: -1.619662880897522
    3. '3' → logprob: -1.994662880897522
    4. '2' → logprob: -2.2446627616882324
    5. '5' → logprob: -2.4946627616882324
    6. '4' → logprob: -2.8696627616882324
    7. '6' → logprob: -3.6196627616882324
    8. '9' → logprob: -3.8696627616882324
    9. '1' → logprob: -3.9946627616882324
    10. '8' → logprob: -4.869662761688232

Token 19: '),' (ID: 936)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.011167613789439201
    2. ',' → logprob: -5.511167526245117
    3. '1' → logprob: -6.136167526245117
    4. '2' → logprob: -6.386167526245117
    5. '00' → logprob: -6.511167526245117
    6. '3' → logprob: -7.886167526245117
    7. '5' → logprob: -8.011167526245117
    8. ' ' → logprob: -8.136167526245117
    9. '6' → logprob: -8.886167526245117
    10. '4' → logprob: -9.261167526245117

Token 20: ' None' (ID: 4662)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.2093925476074219
    2. ' lambda' → logprob: -1.3343925476074219
    3. ' )' → logprob: -2.209392547607422
    4. 'int' → logprob: -2.459392547607422
    5. 'lambda' → logprob: -2.709392547607422
    6. 'input' → logprob: -2.959392547607422
    7. ' int' → logprob: -3.209392547607422
    8. ' input' → logprob: -3.834392547607422
    9. ' None' → logprob: -4.459392547607422
    10. ' '')' → logprob: -4.584392547607422

Token 21: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.266944157890975e-05
    2. '))' → logprob: -9.625072479248047
    3. ' )' → logprob: -12.750072479248047
    4. '),' → logprob: -14.125072479248047
    5. ')))' → logprob: -14.250072479248047
    6. ')
' → logprob: -14.250072479248047
    7. '`)' → logprob: -14.625072479248047
    8. ',' → logprob: -14.875072479248047
    9. ')`' → logprob: -15.000072479248047
    10. '')' → logprob: -16.000072479248047

Token 22: 'res' (ID: 430)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.06579869985580444
    2. '.' → logprob: -3.440798759460449
    3. '#' → logprob: -4.565798759460449
    4. '[' → logprob: -5.190798759460449
    5. 'c' → logprob: -5.940798759460449
    6. '
' → logprob: -6.190798759460449
    7. '+' → logprob: -6.315798759460449
    8. '(' → logprob: -6.815798759460449
    9. '```' → logprob: -7.315798759460449
    10. ',' → logprob: -7.440798759460449

Token 23: ' =' (ID: 314)
  Prédit: 'ult'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ult' → logprob: -0.46572375297546387
    2. 's' → logprob: -2.215723752975464
    3. 'ults' → logprob: -2.340723752975464
    4. ' =' → logprob: -2.465723752975464
    5. 't' → logprob: -3.215723752975464
    6. '=' → logprob: -3.590723752975464
    7. 'ultat' → logprob: -4.840723991394043
    8. 'ault' → logprob: -5.590723991394043
    9. '.' → logprob: -7.590723991394043
    10. 'ts' → logprob: -7.715723991394043

Token 24: ' next' (ID: 2613)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' c' → logprob: -1.6820616722106934
    2. 'c' → logprob: -1.8070616722106934
    3. ' []' → logprob: -1.9320616722106934
    4. '[]' → logprob: -2.1820616722106934
    5. 'list' → logprob: -2.5570616722106934
    6. ' [' → logprob: -3.0570616722106934
    7. ' list' → logprob: -3.0570616722106934
    8. '[c' → logprob: -3.3070616722106934
    9. ' itertools' → logprob: -3.3070616722106934
    10. ' functools' → logprob: -3.4320616722106934

Token 25: '(it' (ID: 29445)
  Prédit: '(it'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(it' → logprob: -0.06721782684326172
    2. '(' → logprob: -2.9422178268432617
    3. '(iter' → logprob: -4.817217826843262
    4. '((' → logprob: -6.317217826843262
    5. '(filter' → logprob: -7.067217826843262
    6. '(c' → logprob: -7.317217826843262
    7. '(f' → logprob: -8.067217826843262
    8. '(lambda' → logprob: -8.067217826843262
    9. '(map' → logprob: -9.192217826843262
    10. '(i' → logprob: -11.067217826843262

Token 26: 'ertools' (ID: 88385)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.6947755813598633
    2. 'ertools' → logprob: -0.6947755813598633
    3. '(er' → logprob: -7.319775581359863
    4. 'ert' → logprob: -8.069775581359863
    5. 'erto' → logprob: -8.194775581359863
    6. 'erit' → logprob: -9.694775581359863
    7. '(it' → logprob: -9.694775581359863
    8. 'erol' → logprob: -10.194775581359863
    9. 'erval' → logprob: -10.319775581359863
    10. '­er' → logprob: -10.444775581359863

Token 27: '.st' (ID: 1980)
  Prédit: '.c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.c' → logprob: -0.18738171458244324
    2. '.chain' → logprob: -2.0623817443847656
    3. '.groupby' → logprob: -4.187381744384766
    4. '.per' → logprob: -5.312381744384766
    5. '.filter' → logprob: -5.437381744384766
    6. '.count' → logprob: -5.437381744384766
    7. '.drop' → logprob: -5.562381744384766
    8. '.acc' → logprob: -5.687381744384766
    9. '.' → logprob: -5.937381744384766
    10. '.com' → logprob: -6.062381744384766

Token 28: 'arm' (ID: 2218)
  Prédit: 'arm'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'arm' → logprob: -0.08288516104221344
    2. 'op' → logprob: -3.582885265350342
    3. 'r' → logprob: -3.957885265350342
    4. 'erm' → logprob: -4.582885265350342
    5. 'ep' → logprob: -5.332885265350342
    6. 'ring' → logprob: -5.332885265350342
    7. 'ertools' → logprob: -5.332885265350342
    8. 'er' → logprob: -6.707885265350342
    9. 'arts' → logprob: -6.832885265350342
    10. 'rings' → logprob: -6.957885265350342

Token 29: 'ap' (ID: 403)
  Prédit: 'ap'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ap' → logprob: -0.002189756603911519
    2. 'atch' → logprob: -6.127189636230469
    3. 'erge' → logprob: -13.502189636230469
    4. 'er' → logprob: -13.627189636230469
    5. 'e' → logprob: -14.877189636230469
    6. 'ethod' → logprob: -15.002189636230469
    7. 'up' → logprob: -15.252189636230469
    8. 'ep' → logprob: -15.627189636230469
    9. 'p' → logprob: -16.00218963623047
    10. '```' → logprob: -16.12718963623047

Token 30: '(chr' (ID: 185847)
  Prédit: '(lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.09605181217193604
    2. '(str' → logprob: -3.7210516929626465
    3. '(len' → logprob: -4.2210516929626465
    4. '(pow' → logprob: -4.5960516929626465
    5. '(print' → logprob: -4.8460516929626465
    6. '(abs' → logprob: -4.9710516929626465
    7. '(int' → logprob: -5.0960516929626465
    8. '(eval' → logprob: -5.0960516929626465
    9. '(' → logprob: -5.4710516929626465
    10. '(sum' → logprob: -5.8460516929626465

Token 31: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.002020951360464096
    2. ',int' → logprob: -6.752020835876465
    3. ',(' → logprob: -7.627020835876465
    4. ',c' → logprob: -8.502020835876465
    5. '(' → logprob: -9.877020835876465
    6. ' ,' → logprob: -10.377020835876465
    7. ',map' → logprob: -11.627020835876465
    8. ',uint' → logprob: -11.752020835876465
    9. ',input' → logprob: -11.877020835876465
    10. ',Integer' → logprob: -12.752020835876465

Token 32: ' [(' (ID: 43900)
  Prédit: '[('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[(' → logprob: -0.010835819877684116
    2. '((' → logprob: -5.760835647583008
    3. 'c' → logprob: -5.885835647583008
    4. '[((' → logprob: -6.885835647583008
    5. '[' → logprob: -7.385835647583008
    6. ' [(' → logprob: -7.510835647583008
    7. 'enumer' → logprob: -7.510835647583008
    8. '([(' → logprob: -7.510835647583008
    9. '[c' → logprob: -7.635835647583008
    10. '(c' → logprob: -8.135835647583008

Token 33: 'ord' (ID: 604)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -1.181822419166565
    2. '105' → logprob: -1.306822419166565
    3. 'int' → logprob: -2.0568222999572754
    4. '32' → logprob: -2.6818222999572754
    5. '99' → logprob: -3.3068222999572754
    6. '95' → logprob: -3.5568222999572754
    7. '(' → logprob: -4.181822299957275
    8. 'i' → logprob: -4.306822299957275
    9. '(c' → logprob: -4.306822299957275
    10. '110' → logprob: -4.431822299957275

Token 34: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.6477716565132141
    2. '('' → logprob: -0.7727716565132141
    3. '("' → logprob: -5.397771835327148
    4. '('_' → logprob: -5.772771835327148
    5. '(' → logprob: -6.147771835327148
    6. '(i' → logprob: -6.772771835327148
    7. '(_' → logprob: -7.147771835327148
    8. '(a' → logprob: -7.272771835327148
    9. '(_)' → logprob: -7.272771835327148
    10. '(x' → logprob: -7.647771835327148

Token 35: ')+' (ID: 16161)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.10352016240358353
    2. ')+' → logprob: -2.353520154953003
    3. '')' → logprob: -6.728520393371582
    4. '),' → logprob: -7.478520393371582
    5. ' ' → logprob: -7.478520393371582
    6. ' )' → logprob: -7.728520393371582
    7. '[' → logprob: -9.103520393371582
    8. '+' → logprob: -9.478520393371582
    9. '1' → logprob: -9.978520393371582
    10. ')-' → logprob: -10.103520393371582

Token 36: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.2574388086795807
    2. 'i' → logprob: -1.6324387788772583
    3. ' ' → logprob: -4.382438659667969
    4. ' i' → logprob: -4.382438659667969
    5. '2' → logprob: -6.507438659667969
    6. 'int' → logprob: -6.882438659667969
    7. '3' → logprob: -7.007438659667969
    8. 'x' → logprob: -7.382438659667969
    9. 'n' → logprob: -7.757438659667969
    10. '_' → logprob: -8.507438659667969

Token 37: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.2568623423576355
    2. ')' → logprob: -2.0068624019622803
    3. ')])' → logprob: -3.2568624019622803
    4. ',)' → logprob: -3.3818624019622803
    5. ')]' → logprob: -4.256862163543701
    6. ')],' → logprob: -6.256862163543701
    7. '),' → logprob: -6.381862163543701
    8. '[' → logprob: -8.00686264038086
    9. ',),' → logprob: -8.13186264038086
    10. ' ,' → logprob: -8.38186264038086

Token 38: ')]' (ID: 15710)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.1689445972442627
    2. ')]' → logprob: -1.1689445972442627
    3. '1' → logprob: -1.9189445972442627
    4. ')' → logprob: -2.2939445972442627
    5. ')])' → logprob: -2.7939445972442627
    6. ' )' → logprob: -3.4189445972442627
    7. '0' → logprob: -3.6689445972442627
    8. ')))' → logprob: -5.168944358825684
    9. '))' → logprob: -6.418944358825684
    10. '))))' → logprob: -6.918944358825684

Token 39: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0037207419518381357
    2. ')' → logprob: -5.628720760345459
    3. ')))' → logprob: -9.1287202835083
    4. '),' → logprob: -11.7537202835083
    5. '))
' → logprob: -13.2537202835083
    6. ' ))' → logprob: -13.6287202835083
    7. '0' → logprob: -15.5037202835083
    8. '))

' → logprob: -15.5037202835083
    9. '))))' → logprob: -15.8787202835083
    10. ')),' → logprob: -16.378721237182617

Token 40: 'print' (ID: 1598)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0010507925180718303
    2. '<|end|>' → logprob: -7.75105094909668
    3. ' )' → logprob: -8.12605094909668
    4. '
' → logprob: -8.87605094909668
    5. '```' → logprob: -9.87605094909668
    6. '#' → logprob: -10.50105094909668
    7. ')
' → logprob: -10.50105094909668
    8. '\n' → logprob: -10.62605094909668
    9. ' ' → logprob: -10.62605094909668
    10. 'print' → logprob: -11.75105094909668

Token 41: '(res' (ID: 8331)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3869532346725464
    2. '(res' → logprob: -1.1369532346725464
    3. '(c' → logprob: -10.386953353881836
    4. '(print' → logprob: -11.511953353881836
    5. '((' → logprob: -12.011953353881836
    6. '('' → logprob: -12.261953353881836
    7. '(`' → logprob: -12.761953353881836
    8. '()' → logprob: -12.886953353881836
    9. '(s' → logprob: -12.886953353881836
    10. '(re' → logprob: -13.011953353881836

Token 42: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.023246755823493004
    2. '))' → logprob: -3.7732467651367188
    3. ')))' → logprob: -14.648246765136719
    4. '')' → logprob: -15.148246765136719
    5. ' )' → logprob: -15.273246765136719
    6. '`)' → logprob: -15.648246765136719
    7. '})' → logprob: -17.02324676513672
    8. '])' → logprob: -17.14824676513672
    9. '")' → logprob: -17.52324676513672
    10. ')`' → logprob: -17.64824676513672


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 40
Tokens correctement prédits (1ère position, stricte): 9
Tokens correctement prédits (1ère position, avec adaptation): 9
Tokens correctement prédits (top 10): 28
Précision stricte (1ère position): 22.50%
Précision adaptée (1ère position): 22.50%
Précision (top 10): 70.00%
================================================================================
