================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:33:50
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
a = int(input())
b = int(input())

if a != 1 and b != 1:
    print(1)
elif a != 2 and b != 2:
    print(2)
else:
    print(3)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'a' (ID: 64)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0006926587666384876
    2. '(a' → logprob: -7.875692844390869
    3. 'a' → logprob: -9.125692367553711
    4. '```' → logprob: -9.625692367553711
    5. ''' → logprob: -9.875692367553711
    6. '`' → logprob: -10.375692367553711
    7. ' (' → logprob: -11.375692367553711
    8. '('' → logprob: -11.500692367553711
    9. ')' → logprob: -11.750692367553711
    10. '\(' → logprob: -12.250692367553711

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3619197607040405
    2. ')' → logprob: -1.2369197607040405
    3. '()' → logprob: -5.36191987991333
    4. '```' → logprob: -6.48691987991333
    5. '`' → logprob: -6.61191987991333
    6. '())' → logprob: -6.86191987991333
    7. ''' → logprob: -7.11191987991333
    8. '(
' → logprob: -7.61191987991333
    9. '))' → logprob: -7.73691987991333
    10. '('' → logprob: -7.86191987991333

Token 5: 'b' (ID: 65)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.03106173872947693
    2. '*' → logprob: -4.03106164932251
    3. '\n' → logprob: -5.65606164932251
    4. '+
' → logprob: -5.78106164932251
    5. '%' → logprob: -6.03106164932251
    6. 'if' → logprob: -6.40606164932251
    7. '\' → logprob: -7.53106164932251
    8. '#' → logprob: -7.65606164932251
    9. 'a' → logprob: -8.531062126159668
    10. '**' → logprob: -8.906062126159668

Token 6: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.14813034236431122
    2. '=' → logprob: -2.398130416870117
    3. '+' → logprob: -3.148130416870117
    4. ' +=' → logprob: -6.523130416870117
    5. ' +' → logprob: -7.023130416870117
    6. ' ' → logprob: -7.523130416870117
    7. '+=' → logprob: -7.523130416870117
    8. ')' → logprob: -9.023130416870117
    9. '.' → logprob: -9.398130416870117
    10. '*' → logprob: -10.148130416870117

Token 7: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.006876756902784109
    2. 'int' → logprob: -5.0068769454956055
    3. ' a' → logprob: -9.006876945495605
    4. ' input' → logprob: -11.006876945495605
    5. 'a' → logprob: -11.131876945495605
    6. ' ' → logprob: -12.381876945495605
    7. '=int' → logprob: -13.756876945495605
    8. 'input' → logprob: -14.256876945495605
    9. '<int' → logprob: -14.381876945495605
    10. '[int' → logprob: -15.131876945495605

Token 8: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002011075848713517
    2. '()' → logprob: -7.127011299133301
    3. ')' → logprob: -7.377011299133301
    4. '(a' → logprob: -7.877011299133301
    5. ' (' → logprob: -10.2520112991333
    6. 'a' → logprob: -10.3770112991333
    7. ' ' → logprob: -10.5020112991333
    8. '(
' → logprob: -10.7520112991333
    9. '```' → logprob: -10.7520112991333
    10. '(

' → logprob: -11.8770112991333

Token 9: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.08525170385837555
    2. '()' → logprob: -2.585251808166504
    3. ')' → logprob: -5.085251808166504
    4. '()))' → logprob: -9.960251808166504
    5. ' ())' → logprob: -10.210251808166504
    6. '(' → logprob: -10.710251808166504
    7. '`)' → logprob: -10.835251808166504
    8. '()>' → logprob: -12.585251808166504
    9. '()`' → logprob: -12.585251808166504
    10. '();)' → logprob: -12.585251808166504

Token 10: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.1457909792661667
    2. 'c' → logprob: -2.0207910537719727
    3. 'print' → logprob: -7.020791053771973
    4. 's' → logprob: -7.270791053771973
    5. 'sum' → logprob: -7.395791053771973
    6. 'result' → logprob: -7.770791053771973
    7. '+' → logprob: -8.145791053771973
    8. ' if' → logprob: -9.395791053771973
    9. 'for' → logprob: -10.895791053771973
    10. 'i' → logprob: -10.895791053771973

Token 11: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.21099525690078735
    2. ' ' → logprob: -1.7109951972961426
    3. 'a' → logprob: -4.710995197296143
    4. ' b' → logprob: -8.0859956741333
    5. ' ' → logprob: -9.2109956741333
    6. ' (' → logprob: -9.7109956741333
    7. '  ' → logprob: -11.0859956741333
    8. 'b' → logprob: -11.8359956741333
    9. '(' → logprob: -12.0859956741333
    10. '(a' → logprob: -12.2109956741333

Token 12: ' !=' (ID: 1666)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.17939487099647522
    2. ' <' → logprob: -1.9293948411941528
    3. ' ' → logprob: -4.554394721984863
    4. ' ==' → logprob: -5.804394721984863
    5. ' <=' → logprob: -6.054394721984863
    6. ' >=' → logprob: -6.179394721984863
    7. '>' → logprob: -7.679394721984863
    8. '<' → logprob: -8.554394721984863
    9. '  ' → logprob: -8.929394721984863
    10. ' %' → logprob: -10.179394721984863

Token 13: ' ' (ID: 220)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.31564515829086304
    2. ' b' → logprob: -1.3156452178955078
    3. '0' → logprob: -6.440645217895508
    4. ' ' → logprob: -7.190645217895508
    5. '=' → logprob: -10.440645217895508
    6. '=b' → logprob: -14.565645217895508
    7. ' =' → logprob: -14.815645217895508
    8. '1' → logprob: -15.190645217895508
    9. ')b' → logprob: -15.565645217895508
    10. '7' → logprob: -16.065645217895508

Token 14: '1' (ID: 16)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.0027128576766699553
    2. ' b' → logprob: -6.002712726593018
    3. '0' → logprob: -8.377713203430176
    4. ' ' → logprob: -11.877713203430176
    5. '=' → logprob: -15.002713203430176
    6. '=b' → logprob: -17.25271224975586
    7. '5' → logprob: -18.25271224975586
    8. '7' → logprob: -18.37771224975586
    9. '	b' → logprob: -18.62771224975586
    10. '1' → logprob: -18.62771224975586

Token 15: ' and' (ID: 326)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.004647403489798307
    2. ' :' → logprob: -5.379647254943848
    3. ' and' → logprob: -10.879647254943848
    4. ':**' → logprob: -13.129647254943848
    5. '):' → logprob: -13.504647254943848
    6. ' or' → logprob: -13.629647254943848
    7. '>:' → logprob: -14.254647254943848
    8. ':
' → logprob: -14.254647254943848
    9. '>' → logprob: -14.504647254943848
    10. '':' → logprob: -14.629647254943848

Token 16: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.0010543649550527334
    2. 'b' → logprob: -7.751054286956787
    3. ' a' → logprob: -8.126054763793945
    4. ' ' → logprob: -8.626054763793945
    5. ' ' → logprob: -9.126054763793945
    6. ' not' → logprob: -10.751054763793945
    7. 'a' → logprob: -12.001054763793945
    8. ''' → logprob: -12.501054763793945
    9. '"' → logprob: -12.876054763793945
    10. ' (' → logprob: -13.876054763793945

Token 17: ' !=' (ID: 1666)
  Prédit: ' !='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.015147220343351364
    2. '!=' → logprob: -4.3901472091674805
    3. ' ==' → logprob: -6.1401472091674805
    4. '==' → logprob: -8.64014720916748
    5. ' ' → logprob: -8.89014720916748
    6. ' >' → logprob: -9.26514720916748
    7. '>' → logprob: -9.89014720916748
    8. '=' → logprob: -12.51514720916748
    9. ' >=' → logprob: -12.76514720916748
    10. ' ' → logprob: -12.89014720916748

Token 18: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4743289649486542
    2. '1' → logprob: -0.9743289947509766
    3. '0' → logprob: -8.474328994750977
    4. '=' → logprob: -10.474328994750977
    5. '  ' → logprob: -12.599328994750977
    6. '2' → logprob: -12.849328994750977
    7. 'a' → logprob: -13.349328994750977
    8. ' ' → logprob: -13.661828994750977
    9. ' =' → logprob: -13.974328994750977
    10. '10' → logprob: -14.849328994750977

Token 19: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.026606803759932518
    2. ' ' → logprob: -3.651606798171997
    3. '0' → logprob: -8.151606559753418
    4. '2' → logprob: -11.901606559753418
    5. 'a' → logprob: -12.526606559753418
    6. '  ' → logprob: -13.026606559753418
    7. '=' → logprob: -14.339106559753418
    8. '-' → logprob: -14.339106559753418
    9. '   ' → logprob: -14.401606559753418
    10. '10' → logprob: -14.526606559753418

Token 20: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -3.292907877039397e-06
    2. ' :' → logprob: -13.37500286102295
    3. ':
' → logprob: -13.62500286102295
    4. '):' → logprob: -15.12500286102295
    5. ':**' → logprob: -15.62500286102295
    6. ' and' → logprob: -16.875003814697266
    7. '>:' → logprob: -18.625003814697266
    8. '':' → logprob: -18.750003814697266
    9. '：' → logprob: -18.875003814697266
    10. ':

' → logprob: -19.000003814697266

Token 21: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.010792303830385208
    2. ':
' → logprob: -5.260792255401611
    3. '   ' → logprob: -5.260792255401611
    4. ' and' → logprob: -9.01079273223877
    5. 'print' → logprob: -9.76079273223877
    6. ' print' → logprob: -10.38579273223877
    7. '.' → logprob: -10.51079273223877
    8. ' or' → logprob: -10.76079273223877
    9. ' :' → logprob: -10.76079273223877
    10. '\n' → logprob: -11.63579273223877

Token 22: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12303607910871506
    2. ':' → logprob: -3.2480361461639404
    3. ' print' → logprob: -3.2480361461639404
    4. 'print' (adapté à ' print') → logprob: -3.6230361461639404
    5. '    ' → logprob: -4.998035907745361
    6. '\n' → logprob: -6.873035907745361
    7. '       ' → logprob: -7.623035907745361
    8. ' ' → logprob: -7.873035907745361
    9. ' if' → logprob: -7.998035907745361
    10. '```' → logprob: -7.998035907745361

Token 23: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.008511384949088097
    2. '('' → logprob: -5.258511543273926
    3. '("' → logprob: -6.508511543273926
    4. '(a' → logprob: -7.133511543273926
    5. '("("' → logprob: -7.133511543273926
    6. '()' → logprob: -9.258511543273926
    7. '(True' → logprob: -10.008511543273926
    8. '(max' → logprob: -11.133511543273926
    9. '((' → logprob: -11.758511543273926
    10. '("")' → logprob: -12.383511543273926

Token 24: '1' (ID: 16)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.6595735549926758
    2. '"' → logprob: -1.0345735549926758
    3. '"a' → logprob: -2.409573554992676
    4. '1' → logprob: -4.534573554992676
    5. '0' → logprob: -5.034573554992676
    6. ''a' → logprob: -5.159573554992676
    7. ''' → logprob: -5.659573554992676
    8. '")' → logprob: -5.909573554992676
    9. 'max' → logprob: -6.034573554992676
    10. 'min' → logprob: -6.784573554992676

Token 25: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -8.160971628967673e-05
    2. ' )' → logprob: -10.250082015991211
    3. '*' → logprob: -10.750082015991211
    4. ')
' → logprob: -11.750082015991211
    5. '0' → logprob: -11.875082015991211
    6. '*)' → logprob: -12.750082015991211
    7. '))' → logprob: -13.375082015991211
    8. ',' → logprob: -13.875082015991211
    9. '+' → logprob: -14.250082015991211
    10. ' ' → logprob: -14.625082015991211

Token 26: 'elif' (ID: 29767)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.21732309460639954
    2. ' else' → logprob: -2.342323064804077
    3. 'elif' → logprob: -2.467323064804077
    4. ' elif' → logprob: -5.342323303222656
    5. '\n' → logprob: -5.717323303222656
    6. ')' → logprob: -6.217323303222656
    7. '```' → logprob: -6.842323303222656
    8. ' ' → logprob: -7.467323303222656
    9. '0' → logprob: -7.592323303222656
    10. '<|end|>' → logprob: -7.717323303222656

Token 27: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.08295384049415588
    2. ' ' → logprob: -2.582953929901123
    3. 'a' → logprob: -5.957953929901123
    4. ' (' → logprob: -7.457953929901123
    5. ' not' → logprob: -7.832953929901123
    6. ' b' → logprob: -8.332953453063965
    7. '  ' → logprob: -8.832953453063965
    8. ' ' → logprob: -9.707953453063965
    9. '(a' → logprob: -10.832953453063965
    10. '    ' → logprob: -11.957953453063965

Token 28: ' !=' (ID: 1666)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.041514068841934204
    2. '==' → logprob: -3.7915141582489014
    3. ' !=' → logprob: -4.041513919830322
    4. ' ' → logprob: -8.41651439666748
    5. '!=' → logprob: -8.79151439666748
    6. ' >' → logprob: -9.29151439666748
    7. '+' → logprob: -11.41651439666748
    8. '=' → logprob: -11.91651439666748
    9. '>' → logprob: -11.91651439666748
    10. ' <' → logprob: -12.16651439666748

Token 29: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.20288541913032532
    2. '1' → logprob: -1.827885389328003
    3. '2' → logprob: -3.952885389328003
    4. '0' → logprob: -5.952885627746582
    5. ' b' → logprob: -7.327885627746582
    6. 'b' → logprob: -7.952885627746582
    7. '  ' → logprob: -10.640385627746582
    8. '   ' → logprob: -11.452885627746582
    9. ' a' → logprob: -12.202885627746582
    10. 'a' → logprob: -12.577885627746582

Token 30: '2' (ID: 17)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.1070140078663826
    2. '2' → logprob: -3.2320139408111572
    3. '0' → logprob: -3.4820139408111572
    4. 'b' → logprob: -4.107014179229736
    5. ' ' → logprob: -4.232014179229736
    6. ' b' → logprob: -8.982013702392578
    7. 'a' → logprob: -9.357013702392578
    8. '3' → logprob: -11.107013702392578
    9. '-' → logprob: -11.482013702392578
    10. '4' → logprob: -12.107013702392578

Token 31: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.0021484773606061935
    2. 'and' → logprob: -6.252148628234863
    3. ' ' → logprob: -8.627148628234863
    4. ':' → logprob: -10.502148628234863
    5. ' :' → logprob: -11.627148628234863
    6. ' or' → logprob: -13.377148628234863
    7. ' ' → logprob: -14.127148628234863
    8. '   ' → logprob: -14.252148628234863
    9. ' a' → logprob: -14.877148628234863
    10. '    ' → logprob: -15.127148628234863

Token 32: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.005286053754389286
    2. 'b' → logprob: -5.25528621673584
    3. ' ' → logprob: -10.00528621673584
    4. ' ' → logprob: -13.25528621673584
    5. ' not' → logprob: -13.50528621673584
    6. '   ' → logprob: -14.13028621673584
    7. '	b' → logprob: -14.38028621673584
    8. '    ' → logprob: -14.50528621673584
    9. ' a' → logprob: -15.25528621673584
    10. '(b' → logprob: -15.38028621673584

Token 33: ' !=' (ID: 1666)
  Prédit: ' !='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.003677751636132598
    2. '!=' → logprob: -5.628677845001221
    3. ' ' → logprob: -10.128677368164062
    4. '<|end|>' → logprob: -10.503677368164062
    5. ' ' → logprob: -13.003677368164062
    6. '<|end|>' → logprob: -13.128677368164062
    7. ' !' → logprob: -13.753677368164062
    8. ' !==' → logprob: -14.003677368164062
    9. ')!=' → logprob: -14.128677368164062
    10. '()!=' → logprob: -14.128677368164062

Token 34: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.2521422803401947
    2. ' ' → logprob: -1.502142310142517
    3. '1' → logprob: -8.502141952514648
    4. '  ' → logprob: -12.377141952514648
    5. '<|end|>' → logprob: -13.002141952514648
    6. '   ' → logprob: -13.252141952514648
    7. '...' → logprob: -15.252141952514648
    8. '```' → logprob: -15.439641952514648
    9. '<|end|>' → logprob: -15.564641952514648
    10. '3' → logprob: -15.814641952514648

Token 35: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.004111762158572674
    2. ' ' → logprob: -5.5041117668151855
    3. '1' → logprob: -10.379111289978027
    4. '  ' → logprob: -14.004111289978027
    5. '<|end|>' → logprob: -14.254111289978027
    6. '   ' → logprob: -15.129111289978027
    7. '۲' → logprob: -16.879112243652344
    8. '...' → logprob: -16.879112243652344
    9. '```' → logprob: -16.879112243652344
    10. '<|end|>' → logprob: -17.316612243652344

Token 36: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0021936828270554543
    2. ':
' → logprob: -6.127193450927734
    3. '   ' → logprob: -11.752193450927734
    4. ' :' → logprob: -15.002193450927734
    5. '):' → logprob: -15.377193450927734
    6. ':

' → logprob: -16.752193450927734
    7. ' :
' → logprob: -17.002193450927734
    8. ':
' → logprob: -17.502193450927734
    9. '```' → logprob: -18.377193450927734
    10. '):
' → logprob: -18.502193450927734

Token 37: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -3.333223139634356e-05
    2. '       ' → logprob: -11.250033378601074
    3. 'print' → logprob: -11.875033378601074
    4. '```' → logprob: -11.875033378601074
    5. ' print' → logprob: -12.625033378601074
    6. '   ' → logprob: -13.625033378601074
    7. ':' → logprob: -15.125033378601074
    8. '`' → logprob: -15.125033378601074
    9. '    ' → logprob: -15.375033378601074
    10. '[' → logprob: -15.625033378601074

Token 38: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.5771128535270691
    2. '   ' → logprob: -1.0771129131317139
    3. ' print' → logprob: -2.327112913131714
    4. '1' → logprob: -8.952113151550293
    5. '```' → logprob: -9.952113151550293
    6. ' ' → logprob: -10.202113151550293
    7. '2' → logprob: -10.327113151550293
    8. '	print' → logprob: -10.327113151550293
    9. '3' → logprob: -11.577113151550293
    10. '4' → logprob: -12.202113151550293

Token 39: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.007675960194319487
    2. '2' → logprob: -4.882676124572754
    3. ' ' → logprob: -9.757676124572754
    4. '3' → logprob: -12.257676124572754
    5. ' (' → logprob: -12.382676124572754
    6. '1' → logprob: -13.132676124572754
    7. '(
' → logprob: -15.132676124572754
    8. '('' → logprob: -15.632676124572754
    9. '```' → logprob: -15.632676124572754
    10. '`' → logprob: -15.632676124572754

Token 40: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -5.7888184528565034e-05
    2. ' ' → logprob: -10.0000581741333
    3. '1' → logprob: -11.3750581741333
    4. '   ' → logprob: -15.0000581741333
    5. ')' → logprob: -15.1250581741333
    6. '```' → logprob: -15.8750581741333
    7. '3' → logprob: -16.250057220458984
    8. '`' → logprob: -16.375057220458984
    9. '0' → logprob: -16.500057220458984
    10. '(' → logprob: -17.375057220458984

Token 41: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.0484450437361374e-05
    2. ')
' → logprob: -10.125040054321289
    3. ' )' → logprob: -15.250040054321289
    4. '')' → logprob: -16.87504005432129
    5. '`)' → logprob: -17.37504005432129
    6. ')

' → logprob: -17.62504005432129
    7. '```' → logprob: -17.75004005432129
    8. '   ' → logprob: -17.87504005432129
    9. '))' → logprob: -17.87504005432129
    10. '）' → logprob: -18.00004005432129

Token 42: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.01081022061407566
    2. ' else' → logprob: -4.885810375213623
    3. 'elif' → logprob: -5.760810375213623
    4. '```' → logprob: -10.385809898376465
    5. '<|end|>' → logprob: -12.010809898376465
    6. '_else' → logprob: -12.260809898376465
    7. ' elif' → logprob: -12.635809898376465
    8. '    
' → logprob: -14.010809898376465
    9. '#else' → logprob: -14.260809898376465
    10. '	else' → logprob: -14.385809898376465

Token 43: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -6.988221684878226e-06
    2. ':
' → logprob: -12.125006675720215
    3. ' :' → logprob: -13.500006675720215
    4. '   ' → logprob: -16.00000762939453
    5. ':def' → logprob: -17.37500762939453
    6. ':return' → logprob: -17.37500762939453
    7. ':

' → logprob: -19.00000762939453
    8. ':
' → logprob: -19.25000762939453
    9. '：' → logprob: -19.37500762939453
    10. ':**' → logprob: -19.62500762939453

Token 44: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009013018570840359
    2. 'print' → logprob: -4.8840131759643555
    3. ' print' → logprob: -7.2590131759643555
    4. '```' → logprob: -8.009013175964355
    5. ' ' → logprob: -8.509013175964355
    6. '    ' → logprob: -9.509013175964355
    7. '`' → logprob: -10.759013175964355
    8. '3' → logprob: -11.259013175964355
    9. '0' → logprob: -11.509013175964355
    10. '1' → logprob: -12.009013175964355

Token 45: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0013530949363484979
    2. ' print' → logprob: -6.8763532638549805
    3. '3' → logprob: -8.37635326385498
    4. '   ' → logprob: -9.75135326385498
    5. '(' → logprob: -12.37635326385498
    6. '0' → logprob: -12.37635326385498
    7. '4' → logprob: -12.37635326385498
    8. ' ' → logprob: -12.50135326385498
    9. '1' → logprob: -12.62635326385498
    10. '7' → logprob: -12.62635326385498

Token 46: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0003326049481984228
    2. '()' → logprob: -8.750332832336426
    3. '(a' → logprob: -8.875332832336426
    4. '('' → logprob: -10.625332832336426
    5. '((' → logprob: -12.625332832336426
    6. 'a' → logprob: -13.250332832336426
    7. '("' → logprob: -13.250332832336426
    8. '(True' → logprob: -14.250332832336426
    9. '3' → logprob: -14.750332832336426
    10. '("("' → logprob: -14.875332832336426

Token 47: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.20436601340770721
    2. '0' → logprob: -1.8293659687042236
    3. 'a' → logprob: -3.9543659687042236
    4. ')' → logprob: -6.954366207122803
    5. 'max' → logprob: -6.954366207122803
    6. '"' → logprob: -7.079366207122803
    7. '1' → logprob: -7.079366207122803
    8. '")' → logprob: -7.829366207122803
    9. '(' → logprob: -8.079365730285645
    10. ' ' → logprob: -8.579365730285645

Token 48: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.512236498361744e-07
    2. ')
' → logprob: -14.625000953674316
    3. ' )' → logprob: -17.25
    4. '`)' → logprob: -18.0
    5. '')' → logprob: -18.0
    6. '))' → logprob: -18.375
    7. ')`' → logprob: -18.375
    8. '```' → logprob: -19.125
    9. '）' → logprob: -19.25
    10. '")' → logprob: -19.875


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 46
Tokens correctement prédits (1ère position, stricte): 23
Tokens correctement prédits (1ère position, avec adaptation): 25
Tokens correctement prédits (top 10): 40
Précision stricte (1ère position): 50.00%
Précision adaptée (1ère position): 54.35%
Précision (top 10): 86.96%
================================================================================
