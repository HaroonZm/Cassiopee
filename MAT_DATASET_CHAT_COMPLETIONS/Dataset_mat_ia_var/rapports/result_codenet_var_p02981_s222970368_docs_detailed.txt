================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:52:23
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def calculate_minimum_cost(N, A, B):
    """
    Calcule le coût minimum entre deux options :
    1. Payer A unités pour chacun des N éléments.
    2. Payer un coût forfaitaire B pour l'ensemble.
    
    Args:
        N (int): Nombre d'éléments à acheter.
        A (int): Coût unitaire d'un élément.
        B (int): Coût global forfaitaire pour tous les éléments.

    Returns:
        int: Le coût minimum entre les deux options.
    """
    # Calcul du coût si l'on paie chaque élément séparément
    cost_option_1 = A * N
    
    # Le coût forfaitaire donné
    cost_option_2 = B
    
    # Retourne le minimum des deux options de coût
    return min(cost_option_1, cost_option_2)

if __name__ == "__main__":
    # Lecture des entrées utilisateur sous la forme de trois entiers séparés par des espaces
    N, A, B = map(int, input().split())
    
    # Calcul du coût minimum avec les valeurs fournies
    result = calculate_minimum_cost(N, A, B)
    
    # Affichage du résultat final
    print(result)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' calculate' (ID: 17950)
  → Token d'amorce (pas de prédiction)

Token 2: '_min' (ID: 15950)
  → Token d'amorce (pas de prédiction)

Token 3: 'imum' (ID: 4556)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0013378625735640526
    2. 'imum' → logprob: -7.001338005065918
    3. '```' → logprob: -9.376338005065918
    4. '_distance' → logprob: -9.501338005065918
    5. '_val' → logprob: -10.251338005065918
    6. '_ut' → logprob: -10.376338005065918
    7. ' _' → logprob: -10.876338005065918
    8. '_uc' → logprob: -11.251338005065918
    9. '__' → logprob: -11.376338005065918
    10. '_im' → logprob: -11.376338005065918

Token 4: '_cost' (ID: 36820)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0040760282427072525
    2. '_distance' → logprob: -6.50407600402832
    3. '_price' → logprob: -7.75407600402832
    4. '```' → logprob: -8.00407600402832
    5. '_cost' → logprob: -8.25407600402832
    6. 'imum' → logprob: -8.87907600402832
    7. '_value' → logprob: -9.37907600402832
    8. '_threshold' → logprob: -9.62907600402832
    9. '_parent' → logprob: -9.62907600402832
    10. '_space' → logprob: -9.62907600402832

Token 5: '(N' (ID: 10564)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1715978980064392
    2. '_' → logprob: -2.296597957611084
    3. '(_:' → logprob: -4.046597957611084
    4. '(_' → logprob: -4.171597957611084
    5. '_:' → logprob: -4.546597957611084
    6. '```' → logprob: -5.296597957611084
    7. '(:' → logprob: -5.921597957611084
    8. '():' → logprob: -6.171597957611084
    9. '('_' → logprob: -8.296597480773926
    10. '(**' → logprob: -8.546597480773926

Token 6: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.23472870886325836
    2. '):' → logprob: -1.6097286939620972
    3. ')' → logprob: -4.734728813171387
    4. ':' → logprob: -8.109728813171387
    5. '_' → logprob: -10.734728813171387
    6. '```' → logprob: -10.984728813171387
    7. ')>' → logprob: -11.109728813171387
    8. '*' → logprob: -11.359728813171387
    9. ' ,' → logprob: -11.359728813171387
    10. ',a' → logprob: -11.734728813171387

Token 7: ' A' (ID: 355)
  Prédit: ' M'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' M' → logprob: -0.3549466133117676
    2. ' K' → logprob: -2.3549466133117676
    3. ' items' → logprob: -2.6049466133117676
    4. ' array' → logprob: -4.604946613311768
    5. ' item' → logprob: -4.729946613311768
    6. ' P' → logprob: -4.729946613311768
    7. ' A' → logprob: -4.854946613311768
    8. 'M' → logprob: -4.854946613311768
    9. ' prices' → logprob: -4.854946613311768
    10. ' price' → logprob: -4.979946613311768

Token 8: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.02914177067577839
    2. ',' → logprob: -3.654141664505005
    3. ')' → logprob: -6.029141902923584
    4. '[' → logprob: -8.779141426086426
    5. ':' → logprob: -9.029141426086426
    6. '```' → logprob: -9.654141426086426
    7. '):
' → logprob: -10.654141426086426
    8. '[]):' → logprob: -11.154141426086426
    9. '   ' → logprob: -11.654141426086426
    10. '_' → logprob: -12.029141426086426

Token 9: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.41342049837112427
    2. 'B' → logprob: -1.1634204387664795
    3. ' M' → logprob: -4.663420677185059
    4. 'M' → logprob: -5.663420677185059
    5. ' K' → logprob: -5.663420677185059
    6. 'K' → logprob: -6.163420677185059
    7. ' ' → logprob: -6.788420677185059
    8. ')' → logprob: -7.538420677185059
    9. 'D' → logprob: -7.913420677185059
    10. 's' → logprob: -7.975920677185059

Token 10: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.004878284875303507
    2. ')' → logprob: -6.004878520965576
    3. ',' → logprob: -6.629878520965576
    4. '```' → logprob: -7.254878520965576
    5. ':' → logprob: -8.754878044128418
    6. '):
' → logprob: -8.879878044128418
    7. ''):' → logprob: -10.254878044128418
    8. '   ' → logprob: -12.129878044128418
    9. '`:' → logprob: -12.379878044128418
    10. '**' → logprob: -12.504878044128418

Token 11: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.003981161862611771
    2. ':
' → logprob: -5.753981113433838
    3. '   ' → logprob: -7.628981113433838
    4. '```' → logprob: -9.003981590270996
    5. '():' → logprob: -9.753981590270996
    6. '\' → logprob: -10.753981590270996
    7. '    
' → logprob: -11.003981590270996
    8. '':' → logprob: -11.378981590270996
    9. '):' → logprob: -11.628981590270996
    10. '(' → logprob: -11.878981590270996

Token 12: ' """
' (ID: 7037)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '```' → logprob: -0.6763820648193359
    2. '   ' → logprob: -1.051382064819336
    3. ':' → logprob: -3.176382064819336
    4. '       ' → logprob: -3.676382064819336
    5. '`' → logprob: -3.801382064819336
    6. '``' → logprob: -3.926382064819336
    7. '\' → logprob: -4.551382064819336
    8. '\n' → logprob: -4.926382064819336
    9. '    ' → logprob: -5.551382064819336
    10. ''' → logprob: -6.426382064819336

Token 13: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.38066816329956055
    2. '   ' → logprob: -2.2556681632995605
    3. '"""' → logprob: -2.3806681632995605
    4. ' ' → logprob: -3.7556681632995605
    5. ' """' → logprob: -4.2556681632995605
    6. ''''' → logprob: -4.6306681632995605
    7. 'Calculate' → logprob: -4.7556681632995605
    8. '  
' → logprob: -5.0056681632995605
    9. '\' → logprob: -5.2556681632995605
    10. '#' → logprob: -5.2556681632995605

Token 14: ' Cal' (ID: 4453)
  Prédit: 'Calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Calculate' → logprob: -0.19356748461723328
    2. 'Calcul' → logprob: -2.4435675144195557
    3. '"""' → logprob: -2.5685675144195557
    4. 'Find' → logprob: -5.693567276000977
    5. 'Returns' → logprob: -6.568567276000977
    6. 'C' → logprob: -6.818567276000977
    7. '"""
' → logprob: -6.818567276000977
    8. 'Return' → logprob: -6.818567276000977
    9. '   ' → logprob: -6.943567276000977
    10. ' Calculate' → logprob: -7.068567276000977

Token 15: 'cule' (ID: 45017)
  Prédit: 'culate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'culate' → logprob: -0.002220318652689457
    2. 'c' → logprob: -6.377220153808594
    3. 'cul' → logprob: -7.627220153808594
    4. 'cula' → logprob: -11.627220153808594
    5. 'cu' → logprob: -12.127220153808594
    6. 'cular' → logprob: -13.002220153808594
    7. 'culated' → logprob: -13.002220153808594
    8. '```' → logprob: -13.127220153808594
    9. '   ' → logprob: -13.502220153808594
    10. 'cule' → logprob: -13.627220153808594

Token 16: ' le' (ID: 505)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.003185436362400651
    2. 't' → logprob: -6.503185272216797
    3. 's' → logprob: -6.753185272216797
    4. 'te' → logprob: -8.003185272216797
    5. 'z' → logprob: -10.003185272216797
    6. 'space' → logprob: -10.503185272216797
    7. 'm' → logprob: -10.753185272216797
    8. 'ate' → logprob: -11.503185272216797
    9. 'u' → logprob: -11.753185272216797
    10. 'brate' → logprob: -11.753185272216797

Token 17: ' coût' (ID: 73109)
  Prédit: ' coût'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' coût' → logprob: -0.33887749910354614
    2. ' ' → logprob: -2.4638774394989014
    3. ' minimum' → logprob: -2.5888774394989014
    4. '   ' → logprob: -2.9638774394989014
    5. '  ' → logprob: -4.2138776779174805
    6. ' cout' → logprob: -4.4638776779174805
    7. ' nombre' → logprob: -4.5888776779174805
    8. 's' → logprob: -4.7138776779174805
    9. ' ' → logprob: -5.0888776779174805
    10. ' prix' → logprob: -5.2138776779174805

Token 18: ' minimum' (ID: 11085)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3211098909378052
    2. '_' → logprob: -2.4461097717285156
    3. 's' → logprob: -2.4461097717285156
    4. ' minimum' → logprob: -3.0711097717285156
    5. '  ' → logprob: -3.9461097717285156
    6. ' minimal' → logprob: -5.196109771728516
    7. ' de' → logprob: -5.196109771728516
    8. 'minimum' → logprob: -5.696109771728516
    9. ' minimale' → logprob: -5.821109771728516
    10. ' d' → logprob: -5.946109771728516

Token 19: ' entre' (ID: 3853)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.26128867268562317
    2. ' de' → logprob: -2.386288642883301
    3. ' d' → logprob: -3.011288642883301
    4. '   ' → logprob: -3.261288642883301
    5. ' pour' → logprob: -4.511288642883301
    6. '```' → logprob: -4.761288642883301
    7. '  ' → logprob: -5.011288642883301
    8. '    ' → logprob: -5.136288642883301
    9. ' du' → logprob: -5.761288642883301
    10. ' entre' → logprob: -6.886288642883301

Token 20: ' deux' (ID: 10301)
  Prédit: ' le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -1.201042652130127
    2. ' l' → logprob: -1.701042652130127
    3. ' les' → logprob: -2.076042652130127
    4. ' deux' → logprob: -3.076042652130127
    5. ' la' → logprob: -3.076042652130127
    6. ' A' → logprob: -3.451042652130127
    7. 'le' → logprob: -3.451042652130127
    8. 'l' → logprob: -3.451042652130127
    9. ' acheter' → logprob: -3.451042652130127
    10. ' utiliser' → logprob: -3.576042652130127

Token 21: ' options' (ID: 3880)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.5676104426383972
    2. ' ' → logprob: -1.442610502243042
    3. '_' → logprob: -3.067610502243042
    4. ' espaces' → logprob: -3.442610502243042
    5. '\' → logprob: -3.692610502243042
    6. '  ' → logprob: -4.442610263824463
    7. 'e' → logprob: -4.567610263824463
    8. '   ' → logprob: -4.692610263824463
    9. ' options' → logprob: -4.692610263824463
    10. ')' → logprob: -5.192610263824463

Token 22: ' :
' (ID: 10039)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -1.2860865592956543
    2. ':' → logprob: -1.9110865592956543
    3. ' ' → logprob: -2.0360865592956543
    4. '   ' → logprob: -2.1610865592956543
    5. ' d' → logprob: -2.6610865592956543
    6. 's' → logprob: -3.0360865592956543
    7. ' :' → logprob: -3.1610865592956543
    8. ',' → logprob: -3.6610865592956543
    9. '```' → logprob: -4.036086559295654
    10. ' pour' → logprob: -4.161086559295654

Token 23: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.010392665863037
    2. '"""
' → logprob: -2.260392665863037
    3. ' """
' → logprob: -2.510392665863037
    4. '"' → logprob: -2.885392665863037
    5. '"""' → logprob: -2.885392665863037
    6. ' d' → logprob: -3.010392665863037
    7. ' """' → logprob: -3.135392665863037
    8. '    ' → logprob: -3.760392665863037
    9. ' acheter' → logprob: -3.760392665863037
    10. ' ' → logprob: -3.885392665863037

Token 24: ' ' (ID: 220)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -1.1896474361419678
    2. ''' → logprob: -2.3146474361419678
    3. '"""' → logprob: -2.4396474361419678
    4. ' `' → logprob: -2.8146474361419678
    5. ' ```' → logprob: -2.8146474361419678
    6. ' """' → logprob: -2.8146474361419678
    7. '`' → logprob: -2.9396474361419678
    8. '   ' → logprob: -3.0646474361419678
    9. ' ' → logprob: -3.3146474361419678
    10. ' )' → logprob: -3.4396474361419678

Token 25: '1' (ID: 16)
  Prédit: '"""
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"""
' → logprob: -1.570419192314148
    2. '   ' → logprob: -2.0704193115234375
    3. 'l' → logprob: -2.1954193115234375
    4. '"""' → logprob: -2.5704193115234375
    5. ' l' → logprob: -3.0704193115234375
    6. ' le' → logprob: -3.1954193115234375
    7. ' """
' → logprob: -3.4454193115234375
    8. ' option' → logprob: -3.4454193115234375
    9. '"' → logprob: -3.5704193115234375
    10. ' d' → logprob: -3.5704193115234375

Token 26: '.' (ID: 13)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.35036975145339966
    2. '.' → logprob: -1.4753696918487549
    3. ':' → logprob: -4.600369930267334
    4. ' )' → logprob: -4.600369930267334
    5. ' ' → logprob: -4.725369930267334
    6. '0' → logprob: -4.725369930267334
    7. '   ' → logprob: -4.850369930267334
    8. '2' → logprob: -4.850369930267334
    9. '-' → logprob: -5.975369930267334
    10. ',' → logprob: -6.475369930267334

Token 27: ' P' (ID: 398)
  Prédit: ' Util'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Util' → logprob: -1.3866344690322876
    2. ' P' → logprob: -1.8866344690322876
    3. ' Acheter' → logprob: -1.8866344690322876
    4. ' utiliser' → logprob: -2.386634349822998
    5. 'P' → logprob: -3.011634349822998
    6. ' acheter' → logprob: -3.136634349822998
    7. 'Ache' → logprob: -3.636634349822998
    8. 'Util' → logprob: -3.636634349822998
    9. 'A' → logprob: -3.824134349822998
    10. ' Achat' → logprob: -3.949134349822998

Token 28: 'ayer' (ID: 1630)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.0759386345744133
    2. 'our' → logprob: -3.8259387016296387
    3. 'ro' → logprob: -4.700938701629639
    4. 'rix' → logprob: -4.825938701629639
    5. 'a' → logprob: -5.075938701629639
    6. 'ayer' → logprob: -5.200938701629639
    7. 'ré' → logprob: -5.575938701629639
    8. 'asser' → logprob: -5.575938701629639
    9. 'l' → logprob: -6.575938701629639
    10. 'er' → logprob: -7.138438701629639

Token 29: ' A' (ID: 355)
  Prédit: ' au'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' au' → logprob: -0.6931511759757996
    2. ' ' → logprob: -1.1931512355804443
    3. ' le' → logprob: -2.1931512355804443
    4. ' la' → logprob: -4.318150997161865
    5. ' l' → logprob: -4.443150997161865
    6. 'au' → logprob: -4.443150997161865
    7. '```' → logprob: -5.068150997161865
    8. ' directement' → logprob: -5.193150997161865
    9. ' pour' → logprob: -5.318150997161865
    10. ' à' → logprob: -5.443150997161865

Token 30: ' unités' (ID: 176121)
  Prédit: ' ou'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ou' → logprob: -0.05698785558342934
    2. ' et' → logprob: -3.181987762451172
    3. ',' → logprob: -5.806987762451172
    4. ' ' → logprob: -6.181987762451172
    5. ')' → logprob: -6.431987762451172
    6. ' pour' → logprob: -6.806987762451172
    7. ' or' → logprob: -7.181987762451172
    8. ' (' → logprob: -7.306987762451172
    9. 'ou' → logprob: -7.556987762451172
    10. '.' → logprob: -7.556987762451172

Token 31: ' pour' (ID: 1930)
  Prédit: ' ou'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ou' → logprob: -1.062437891960144
    2. ' et' → logprob: -1.687437891960144
    3. ' au' → logprob: -2.0624380111694336
    4. ' à' → logprob: -2.4374380111694336
    5. ' de' → logprob: -2.5624380111694336
    6. ' pour' → logprob: -3.0624380111694336
    7. ' ' → logprob: -3.9374380111694336
    8. ' par' → logprob: -4.187438011169434
    9. '```' → logprob: -4.187438011169434
    10. ',' → logprob: -4.562438011169434

Token 32: ' chacun' (ID: 52136)
  Prédit: ' chaque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' chaque' → logprob: -0.16117578744888306
    2. 'cha' → logprob: -3.4111757278442383
    3. ' obtenir' → logprob: -3.9111757278442383
    4. 'acheter' → logprob: -4.661175727844238
    5. ' effectuer' → logprob: -4.661175727844238
    6. ' acheter' → logprob: -4.786175727844238
    7. 'l' → logprob: -5.036175727844238
    8. ' ' → logprob: -5.161175727844238
    9. ' l' → logprob: -5.161175727844238
    10. ' continuer' → logprob: -5.411175727844238

Token 33: ' des' (ID: 731)
  Prédit: ' des'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.02078990824520588
    2. ' de' → logprob: -4.145790100097656
    3. 'des' → logprob: -6.020790100097656
    4. '_des' → logprob: -7.270790100097656
    5. ' d' → logprob: -7.395790100097656
    6. ' ' → logprob: -7.895790100097656
    7. 'def' → logprob: -9.270790100097656
    8. '.' → logprob: -9.520790100097656
    9. 'de' → logprob: -9.520790100097656
    10. '<|end|>' → logprob: -9.895790100097656

Token 34: ' N' (ID: 478)
  Prédit: ' N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.9936202168464661
    2. ' éléments' → logprob: -1.4936201572418213
    3. 'élé' → logprob: -1.4936201572418213
    4. 'N' → logprob: -3.1186201572418213
    5. ' items' → logprob: -3.1186201572418213
    6. ' articles' → logprob: -3.6186201572418213
    7. ' ' → logprob: -3.6186201572418213
    8. 'items' → logprob: -5.1811203956604
    9. ' objets' → logprob: -5.3686203956604
    10. 'articles' → logprob: -5.4936203956604

Token 35: ' éléments' (ID: 57375)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.8213209509849548
    2. ' éléments' → logprob: -1.6963210105895996
    3. ' articles' → logprob: -2.5713210105895996
    4. ' espaces' → logprob: -2.8213210105895996
    5. ' objets' → logprob: -3.0713210105895996
    6. 'es' → logprob: -3.4463210105895996
    7. ' ' → logprob: -3.6963210105895996
    8. 'e' → logprob: -4.0713210105896
    9. ' points' → logprob: -4.1963210105896
    10. ' mots' → logprob: -4.3213210105896

Token 36: '.
' (ID: 558)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.9825378656387329
    2. '   ' → logprob: -1.607537865638733
    3. '.' → logprob: -2.1075377464294434
    4. '\n' → logprob: -2.2325377464294434
    5. '\' → logprob: -2.8575377464294434
    6. ',
' → logprob: -3.6075377464294434
    7. '```' → logprob: -3.6075377464294434
    8. ' ' → logprob: -3.9825377464294434
    9. '    
' → logprob: -4.607537746429443
    10. '  
' → logprob: -5.232537746429443

Token 37: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16090382635593414
    2. '```' → logprob: -3.0359039306640625
    3. '\n' → logprob: -4.1609039306640625
    4. ')' → logprob: -4.2859039306640625
    5. ',' → logprob: -4.2859039306640625
    6. '"""' → logprob: -4.5359039306640625
    7. ' ' → logprob: -4.9109039306640625
    8. '\' → logprob: -5.0359039306640625
    9. '"""
' → logprob: -5.1609039306640625
    10. ' """
' → logprob: -5.4109039306640625

Token 38: ' ' (ID: 220)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.048300255089998245
    2. '\n' → logprob: -3.548300266265869
    3. '\' → logprob: -5.298300266265869
    4. ' ' → logprob: -5.298300266265869
    5. '2' → logprob: -5.798300266265869
    6. '```' → logprob: -5.798300266265869
    7. '  ' → logprob: -7.798300266265869
    8. '"""' → logprob: -8.173299789428711
    9. '    
' → logprob: -8.423299789428711
    10. '
' → logprob: -8.548299789428711

Token 39: '2' (ID: 17)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.9650471210479736
    2. '   ' → logprob: -1.4650471210479736
    3. '```' → logprob: -2.0900471210479736
    4. ')' → logprob: -2.5900471210479736
    5. '2' → logprob: -3.2150471210479736
    6. '\' → logprob: -3.4650471210479736
    7. '"""' → logprob: -3.8400471210479736
    8. ' ' → logprob: -3.8400471210479736
    9. 'n' → logprob: -4.4650468826293945
    10. '"""
' → logprob: -4.5900468826293945

Token 40: '.' (ID: 13)
  Prédit: '.'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -5.8961017202818766e-05
    2. ')' → logprob: -10.500059127807617
    3. ' .' → logprob: -11.375059127807617
    4. '-' → logprob: -11.750059127807617
    5. '2' → logprob: -12.250059127807617
    6. ',' → logprob: -14.000059127807617
    7. '   ' → logprob: -14.000059127807617
    8. '0' → logprob: -14.437559127807617
    9. '.P' → logprob: -14.687559127807617
    10. '\.' → logprob: -14.812559127807617

Token 41: ' P' (ID: 398)
  Prédit: ' P'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' P' → logprob: -0.2524382174015045
    2. 'P' → logprob: -1.6274381875991821
    3. 'payer' → logprob: -4.377438068389893
    4. ' payer' → logprob: -5.502438068389893
    5. ' Acheter' → logprob: -6.127438068389893
    6. 'Pay' → logprob: -7.002438068389893
    7. 'Ache' → logprob: -7.252438068389893
    8. ' Util' → logprob: -7.314938068389893
    9. ' ' → logprob: -7.439938068389893
    10. ' Pay' → logprob: -7.564938068389893

Token 42: 'ayer' (ID: 1630)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.03145549073815346
    2. 'ayer' → logprob: -3.5314555168151855
    3. 'ay' → logprob: -7.4064555168151855
    4. 'r' → logprob: -8.156455039978027
    5. '```' → logprob: -9.468955039978027
    6. ' a' → logprob: -9.906455039978027
    7. 'aye' → logprob: -9.968955039978027
    8. '	a' → logprob: -10.156455039978027
    9. 'asser' → logprob: -10.281455039978027
    10. 'l' → logprob: -10.281455039978027

Token 43: ' un' (ID: 537)
  Prédit: ' B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.09551767259836197
    2. 'B' → logprob: -2.595517635345459
    3. ' ' → logprob: -4.595517635345459
    4. ' a' → logprob: -5.845517635345459
    5. ' un' → logprob: -7.345517635345459
    6. ' N' → logprob: -7.595517635345459
    7. 'space' → logprob: -7.970517635345459
    8. ' ' → logprob: -8.095518112182617
    9. ' une' → logprob: -8.345518112182617
    10. ' A' → logprob: -8.845518112182617

Token 44: ' coût' (ID: 73109)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.01623741164803505
    2. 'a' → logprob: -4.516237258911133
    3. ' seul' → logprob: -6.391237258911133
    4. ' a' → logprob: -6.766237258911133
    5. ' e' → logprob: -6.891237258911133
    6. ' B' → logprob: -8.266237258911133
    7. ' montant' → logprob: -8.516237258911133
    8. ' maximum' → logprob: -9.016237258911133
    9. ' espace' → logprob: -9.516237258911133
    10. ' unique' → logprob: -9.766237258911133

Token 45: ' forfait' (ID: 132619)
  Prédit: ' fixe'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fixe' → logprob: -0.7127158641815186
    2. ' unique' → logprob: -0.9627158641815186
    3. ' forfait' → logprob: -3.3377158641815186
    4. ' global' → logprob: -3.4627158641815186
    5. ' total' → logprob: -3.5877158641815186
    6. ' fix' → logprob: -5.337716102600098
    7. ' initial' → logprob: -5.462716102600098
    8. ' fixed' → logprob: -5.837716102600098
    9. ' de' → logprob: -5.837716102600098
    10. ' for' → logprob: -6.212716102600098

Token 46: 'aire' (ID: 8189)
  Prédit: 'aire'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aire' → logprob: -0.0005779353086836636
    2. 'a' → logprob: -8.500577926635742
    3. 'air' → logprob: -9.375577926635742
    4. 'taire' → logprob: -10.125577926635742
    5. '   ' → logprob: -10.375577926635742
    6. 'isé' → logprob: -10.625577926635742
    7. ' pour' → logprob: -10.875577926635742
    8. 'à' → logprob: -11.000577926635742
    9. 'naire' → logprob: -11.000577926635742
    10. 'aires' → logprob: -11.000577926635742

Token 47: ' B' (ID: 418)
  Prédit: ' pour'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' pour' → logprob: -0.5012606978416443
    2. 'pour' → logprob: -2.251260757446289
    3. ' for' → logprob: -2.751260757446289
    4. ' de' → logprob: -3.376260757446289
    5. ' fixe' → logprob: -3.376260757446289
    6. ' unique' → logprob: -3.501260757446289
    7. ' ' → logprob: -3.876260757446289
    8. 'for' → logprob: -3.876260757446289
    9. ' space' → logprob: -4.126260757446289
    10. ' forfait' → logprob: -4.251260757446289

Token 48: ' pour' (ID: 1930)
  Prédit: ' pour'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pour' → logprob: -0.5473335385322571
    2. 'pour' → logprob: -1.6723334789276123
    3. ')' → logprob: -2.2973334789276123
    4. '   ' → logprob: -3.0473334789276123
    5. ',' → logprob: -3.4223334789276123
    6. '.' → logprob: -4.297333717346191
    7. ' for' → logprob: -4.672333717346191
    8. 'for' → logprob: -4.672333717346191
    9. '```' → logprob: -5.547333717346191
    10. '"""' → logprob: -6.422333717346191

Token 49: ' l' (ID: 305)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.9367275238037109
    2. 'l' → logprob: -1.561727523803711
    3. ' tous' → logprob: -1.686727523803711
    4. ' l' → logprob: -1.811727523803711
    5. 'tout' → logprob: -3.311727523803711
    6. ' tout' → logprob: -5.436727523803711
    7. 'les' → logprob: -5.936727523803711
    8. ' les' → logprob: -6.936727523803711
    9. ' all' → logprob: -7.311727523803711
    10. 'all' → logprob: -7.436727523803711

Token 50: ''ensemble' (ID: 79341)
  Prédit: ''ensemble'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''ensemble' → logprob: -0.11234276741743088
    2. 'e' → logprob: -2.9873428344726562
    3. 'es' → logprob: -3.4873428344726562
    4. ''' → logprob: -4.612342834472656
    5. 'a' → logprob: -4.737342834472656
    6. '’ensemble' → logprob: -5.987342834472656
    7. ''intégr' → logprob: -6.362342834472656
    8. 'ensemble' → logprob: -6.987342834472656
    9. ''achat' → logprob: -7.487342834472656
    10. ''a' → logprob: -9.362342834472656

Token 51: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3597983717918396
    2. '.' → logprob: -1.9847984313964844
    3. ' des' → logprob: -2.6097984313964844
    4. ',' → logprob: -3.8597984313964844
    5. 'def' → logprob: -3.9847984313964844
    6. ')' → logprob: -4.109798431396484
    7. ' de' → logprob: -4.734798431396484
    8. 'des' → logprob: -4.734798431396484
    9. '"""' → logprob: -5.609798431396484
    10. '```' → logprob: -6.234798431396484

Token 52: '    
' (ID: 1944)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02781631611287594
    2. '"""' → logprob: -3.6528162956237793
    3. '""' → logprob: -7.277816295623779
    4. '\n' → logprob: -8.277816772460938
    5. '"""
' → logprob: -8.652816772460938
    6. '"' → logprob: -8.902816772460938
    7. '```' → logprob: -9.527816772460938
    8. ')' → logprob: -9.527816772460938
    9. '  ' → logprob: -10.527816772460938
    10. ' ' → logprob: -10.652816772460938

Token 53: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012655500322580338
    2. '"""' → logprob: -4.387655735015869
    3. '""' → logprob: -10.012655258178711
    4. '```' → logprob: -10.137655258178711
    5. '    ' → logprob: -11.262655258178711
    6. ' ' → logprob: -11.512655258178711
    7. '  ' → logprob: -11.762655258178711
    8. ' """' → logprob: -11.887655258178711
    9. '"""
' → logprob: -12.137655258178711
    10. '"' → logprob: -12.137655258178711

Token 54: ' Args' (ID: 39185)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08015932142734528
    2. '"""' → logprob: -2.5801594257354736
    3. '""' → logprob: -8.205159187316895
    4. '"""
' → logprob: -8.330159187316895
    5. '\n' → logprob: -8.455159187316895
    6. ' """' → logprob: -8.705159187316895
    7. '```' → logprob: -8.830159187316895
    8. ' ' → logprob: -9.830159187316895
    9. '"' → logprob: -10.205159187316895
    10. ')' → logprob: -10.455159187316895

Token 55: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.10658397525548935
    2. ' :' → logprob: -2.356584072113037
    3. ',' → logprob: -6.231584072113037
    4. '   ' → logprob: -6.356584072113037
    5. '):' → logprob: -6.481584072113037
    6. ')' → logprob: -7.731584072113037
    7. ' ' → logprob: -8.981583595275879
    8. '[' → logprob: -8.981583595275879
    9. 's' → logprob: -9.231583595275879
    10. ' ):' → logprob: -9.606583595275879

Token 56: '       ' (ID: 309)
  Prédit: ' N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.6097999811172485
    2. ' ' → logprob: -1.7347999811172485
    3. '   ' → logprob: -2.109799861907959
    4. 'N' → logprob: -2.984799861907959
    5. ' )' → logprob: -3.234799861907959
    6. '    ' → logprob: -3.734799861907959
    7. 'n' → logprob: -3.734799861907959
    8. ')' → logprob: -4.859799861907959
    9. ' 
' → logprob: -6.359799861907959
    10. '```' → logprob: -6.359799861907959

Token 57: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' (adapté à ' N') → logprob: -0.02114059589803219
    2. ' N' → logprob: -4.2711405754089355
    3. '   ' → logprob: -5.0211405754089355
    4. '       ' → logprob: -8.896141052246094
    5. 'n' → logprob: -9.396141052246094
    6. 'self' → logprob: -9.771141052246094
    7. '```' → logprob: -9.896141052246094
    8. '    ' → logprob: -11.896141052246094
    9. '	N' → logprob: -12.021141052246094
    10. 'num' → logprob: -12.771141052246094

Token 58: ' (' (ID: 350)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.036087267100811005
    2. ':' → logprob: -3.6610872745513916
    3. ':int' → logprob: -6.1610870361328125
    4. '<|end|>' → logprob: -6.4110870361328125
    5. ',int' → logprob: -6.6610870361328125
    6. ' ,' → logprob: -6.9110870361328125
    7. '):' → logprob: -7.0360870361328125
    8. ' :' → logprob: -7.2860870361328125
    9. ' (' → logprob: -7.5360870361328125
    10. '   ' → logprob: -7.6610870361328125

Token 59: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.014174672774970531
    2. ' int' → logprob: -4.264174461364746
    3. '   ' → logprob: -12.639174461364746
    4. 'i' → logprob: -13.264174461364746
    5. '```' → logprob: -13.639174461364746
    6. 'in' → logprob: -14.014174461364746
    7. ')' → logprob: -14.014174461364746
    8. '[int' → logprob: -14.639174461364746
    9. 'integer' → logprob: -14.764174461364746
    10. 'n' → logprob: -14.889174461364746

Token 60: '):' (ID: 3127)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.12732261419296265
    2. '):' → logprob: -2.1273226737976074
    3. ' )' → logprob: -8.62732219696045
    4. '),' → logprob: -9.50232219696045
    5. ',' → logprob: -10.25232219696045
    6. '   ' → logprob: -10.37732219696045
    7. ' ):' → logprob: -10.62732219696045
    8. '<|end|>' → logprob: -10.75232219696045
    9. '):
' → logprob: -12.00232219696045
    10. ' ' → logprob: -12.25232219696045

Token 61: ' Nombre' (ID: 70208)
  Prédit: ' le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.7368679642677307
    2. ' nombre' → logprob: -1.111867904663086
    3. ' number' → logprob: -2.611867904663086
    4. ' Le' → logprob: -2.861867904663086
    5. ' Nombre' → logprob: -3.236867904663086
    6. ' Number' → logprob: -4.861867904663086
    7. 'Nombre' → logprob: -5.611867904663086
    8. 'nombre' → logprob: -5.736867904663086
    9. ' ' → logprob: -5.861867904663086
    10. '<|end|>' → logprob: -6.611867904663086

Token 62: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.01292384508997202
    2. ' de' → logprob: -5.512923717498779
    3. 'd' → logprob: -5.637923717498779
    4. ' ' → logprob: -5.762923717498779
    5. ' des' → logprob: -7.762923717498779
    6. ')' → logprob: -7.887923717498779
    7. 'de' → logprob: -8.512924194335938
    8. '   ' → logprob: -8.762924194335938
    9. 'des' → logprob: -8.762924194335938
    10. ' )' → logprob: -8.887924194335938

Token 63: ''' (ID: 6)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.06081857532262802
    2. ''' → logprob: -3.310818672180176
    3. ''é' → logprob: -4.435818672180176
    4. 'é' → logprob: -4.685818672180176
    5. ' éléments' → logprob: -7.310818672180176
    6. ''él' → logprob: -8.560818672180176
    7. 'e' → logprob: -8.810818672180176
    8. 'él' → logprob: -9.310818672180176
    9. '’é' → logprob: -9.685818672180176
    10. '_' → logprob: -9.685818672180176

Token 64: 'élé' (ID: 15228)
  Prédit: 'élé'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.062230512499809265
    2. ''' → logprob: -3.1872305870056152
    3. 'é' → logprob: -4.062230587005615
    4. ''é' → logprob: -7.437230587005615
    5. 'él' → logprob: -7.812230587005615
    6. 'unit' → logprob: -8.562230110168457
    7. '’' → logprob: -8.687230110168457
    8. ''él' → logprob: -9.062230110168457
    9. 'articles' → logprob: -9.812230110168457
    10. 'éc' → logprob: -10.062230110168457

Token 65: 'ments' (ID: 1626)
  Prédit: 'ments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ments' → logprob: -0.0002371521550230682
    2. 'm' → logprob: -8.500237464904785
    3. 'ment' → logprob: -10.375237464904785
    4. 'éments' → logprob: -14.125237464904785
    5. '```' → logprob: -14.750237464904785
    6. 'mé' → logprob: -15.125237464904785
    7. 'me' → logprob: -15.250237464904785
    8. 'MENTS' → logprob: -16.25023651123047
    9. 'ements' → logprob: -16.25023651123047
    10. 'men' → logprob: -16.37523651123047

Token 66: ' à' (ID: 1221)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.176570862531662
    2. ')' → logprob: -2.5515708923339844
    3. ',' → logprob: -3.4265708923339844
    4. '```' → logprob: -3.8015708923339844
    5. '\n' → logprob: -4.551570892333984
    6. '<|end|>' → logprob: -4.801570892333984
    7. '  ' → logprob: -6.176570892333984
    8. '       ' → logprob: -6.551570892333984
    9. ':' → logprob: -6.801570892333984
    10. ' ' → logprob: -7.176570892333984

Token 67: ' acheter' (ID: 60712)
  Prédit: ' traiter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' traiter' → logprob: -0.4773845970630646
    2. 'trait' → logprob: -1.2273845672607422
    3. 'payer' → logprob: -3.477384567260742
    4. 'tra' → logprob: -4.227384567260742
    5. 'acheter' → logprob: -4.477384567260742
    6. ' acheter' → logprob: -4.602384567260742
    7. ' payer' → logprob: -4.602384567260742
    8. ' trait' → logprob: -6.227384567260742
    9. ' tra' → logprob: -6.602384567260742
    10. 'p' → logprob: -6.852384567260742

Token 68: '.
' (ID: 558)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.8621546626091003
    2. '   ' → logprob: -0.8621546626091003
    3. ',' → logprob: -2.237154722213745
    4. '```' → logprob: -3.987154722213745
    5. '\n' → logprob: -4.862154483795166
    6. '<|end|>' → logprob: -4.987154483795166
    7. ' ' → logprob: -5.487154483795166
    8. '  ' → logprob: -5.737154483795166
    9. '\' → logprob: -6.737154483795166
    10. '
' → logprob: -6.862154483795166

Token 69: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6049701571464539
    2. ' ' → logprob: -2.1049702167510986
    3. ')' → logprob: -2.4799702167510986
    4. ' 
' → logprob: -2.7299702167510986
    5. '```' → logprob: -2.9799702167510986
    6. '"""' → logprob: -3.2299702167510986
    7. '    
' → logprob: -3.9799702167510986
    8. '\' → logprob: -4.2299699783325195
    9. '\n' → logprob: -4.6049699783325195
    10. ''' → logprob: -4.7299699783325195

Token 70: ' A' (ID: 355)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06590038537979126
    2. 'A' (adapté à ' A') → logprob: -3.6909003257751465
    3. '"""' → logprob: -4.1909003257751465
    4. ' """' → logprob: -5.1909003257751465
    5. ' A' → logprob: -5.4409003257751465
    6. ' """
' → logprob: -6.1909003257751465
    7. '"""
' → logprob: -6.3159003257751465
    8. '```' → logprob: -6.3159003257751465
    9. '       ' → logprob: -6.5659003257751465
    10. 'Returns' → logprob: -6.6909003257751465

Token 71: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.004273800179362297
    2. '(int' → logprob: -5.879273891448975
    3. ')' → logprob: -7.254273891448975
    4. ':' → logprob: -8.129273414611816
    5. '):' → logprob: -9.004273414611816
    6. '   ' → logprob: -9.129273414611816
    7. ':int' → logprob: -9.504273414611816
    8. ' :' → logprob: -9.629273414611816
    9. ' ' → logprob: -10.379273414611816
    10. 'int' → logprob: -11.254273414611816

Token 72: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.07018106430768967
    2. ' int' → logprob: -2.695181131362915
    3. 'float' → logprob: -9.320180892944336
    4. ')' → logprob: -9.945180892944336
    5. ' float' → logprob: -10.445180892944336
    6. ' )' → logprob: -10.820180892944336
    7. '   ' → logprob: -11.070180892944336
    8. ' ' → logprob: -11.320180892944336
    9. '):' → logprob: -11.945180892944336
    10. '  ' → logprob: -12.070180892944336

Token 73: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0004905993700958788
    2. ' ):' → logprob: -8.125490188598633
    3. ')' → logprob: -8.625490188598633
    4. ':' → logprob: -12.250490188598633
    5. '```' → logprob: -12.750490188598633
    6. '   ' → logprob: -13.375490188598633
    7. ''):' → logprob: -13.500490188598633
    8. '):
' → logprob: -13.625490188598633
    9. ' ' → logprob: -13.625490188598633
    10. ',' → logprob: -14.250490188598633

Token 74: ' Co' (ID: 4642)
  Prédit: ' Co'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Co' → logprob: -0.16313758492469788
    2. ' Le' → logprob: -2.788137674331665
    3. ' coût' → logprob: -3.663137674331665
    4. 'co' → logprob: -3.788137674331665
    5. 'Co' → logprob: -3.788137674331665
    6. ' co' → logprob: -5.038137435913086
    7. ' le' → logprob: -5.288137435913086
    8. ' cost' → logprob: -6.663137435913086
    9. '   ' → logprob: -6.913137435913086
    10. 'Le' → logprob: -7.038137435913086

Token 75: 'ût' (ID: 24581)
  Prédit: 'ût'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ût' → logprob: -0.20508088171482086
    2. 'û' → logprob: -1.7050808668136597
    3. 'ú' → logprob: -6.955080986022949
    4. 'ù' → logprob: -6.955080986022949
    5. 'ut' → logprob: -7.330080986022949
    6. 'út' → logprob: -8.20508098602295
    7. 'u' → logprob: -8.33008098602295
    8. 'üt' → logprob: -8.95508098602295
    9. 'ūt' → logprob: -9.33008098602295
    10. 'ü' → logprob: -9.83008098602295

Token 76: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.12620587646961212
    2. ' par' → logprob: -2.3762059211730957
    3. '   ' → logprob: -4.751205921173096
    4. 'un' → logprob: -4.876205921173096
    5. 'par' → logprob: -5.876205921173096
    6. ' unité' → logprob: -6.501205921173096
    7. ' unit' → logprob: -6.876205921173096
    8. '_un' → logprob: -7.001205921173096
    9. ' de' → logprob: -7.376205921173096
    10. ' pour' → logprob: -7.626205921173096

Token 77: 'itaire' (ID: 28335)
  Prédit: 'itaire'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'itaire' → logprob: -0.11601904779672623
    2. 'ité' → logprob: -2.2410190105438232
    3. 'it' → logprob: -5.866019248962402
    4. ' it' → logprob: -8.991019248962402
    5. 'ita' → logprob: -9.616019248962402
    6. 'i' → logprob: -9.991019248962402
    7. 'ités' → logprob: -10.741019248962402
    8. '   ' → logprob: -10.866019248962402
    9. 'itt' → logprob: -11.491019248962402
    10. ' à' → logprob: -11.491019248962402

Token 78: ' d' (ID: 272)
  Prédit: ' par'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' par' → logprob: -0.3607940971851349
    2. ' pour' → logprob: -2.4857940673828125
    3. 'par' → logprob: -3.3607940673828125
    4. '   ' → logprob: -3.3607940673828125
    5. ' un' → logprob: -3.4857940673828125
    6. ' unit' → logprob: -3.7357940673828125
    7. ' )' → logprob: -3.7357940673828125
    8. ')' → logprob: -3.8607940673828125
    9. ' ):' → logprob: -4.6107940673828125
    10. 'pour' → logprob: -4.6107940673828125

Token 79: ''un' (ID: 9788)
  Prédit: ''achat'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''achat' → logprob: -0.014451184310019016
    2. '’achat' → logprob: -4.764451026916504
    3. ''' → logprob: -6.514451026916504
    4. 'achat' → logprob: -6.764451026916504
    5. 'e' → logprob: -6.889451026916504
    6. ''un' → logprob: -7.264451026916504
    7. ' achat' → logprob: -7.514451026916504
    8. 'acheter' → logprob: -7.889451026916504
    9. ''ac' → logprob: -8.389451026916504
    10. ' acheter' → logprob: -9.639451026916504

Token 80: ' élément' (ID: 99627)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.9465765953063965
    2. 'e' → logprob: -1.1965765953063965
    3. ' élément' → logprob: -1.3215765953063965
    4. 'ité' → logprob: -3.8215765953063965
    5. ' e' → logprob: -4.8215765953063965
    6. 'a' → logprob: -6.0715765953063965
    7. ' unité' → logprob: -6.0715765953063965
    8. ' article' → logprob: -6.1965765953063965
    9. ''' → logprob: -6.5715765953063965
    10. ' a' → logprob: -6.8215765953063965

Token 81: '.
' (ID: 558)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5247030258178711
    2. ',' → logprob: -1.274703025817871
    3. '   ' → logprob: -2.149703025817871
    4. '),' → logprob: -4.899703025817871
    5. ',
' → logprob: -6.274703025817871
    6. '```' → logprob: -7.649703025817871
    7. ' ,' → logprob: -7.899703025817871
    8. '.' → logprob: -8.149703025817871
    9. ')
' → logprob: -8.149703025817871
    10. ' )' → logprob: -8.149703025817871

Token 82: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04163173958659172
    2. ')' → logprob: -3.7916316986083984
    3. '```' → logprob: -4.291631698608398
    4. '"""' → logprob: -6.291631698608398
    5. '"""
' → logprob: -7.541631698608398
    6. '       ' → logprob: -7.916631698608398
    7. '``' → logprob: -8.041631698608398
    8. '`' → logprob: -8.166631698608398
    9. '    
' → logprob: -8.291631698608398
    10. ' ' → logprob: -8.916631698608398

Token 83: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.4818792939186096
    2. 'B' (adapté à ' B') → logprob: -1.2318792343139648
    3. '   ' → logprob: -2.481879234313965
    4. '       ' → logprob: -5.731879234313965
    5. ' ' → logprob: -5.856879234313965
    6. '```' → logprob: -7.981879234313965
    7. '    ' → logprob: -8.106879234313965
    8. '  ' → logprob: -9.231879234313965
    9. '     ' → logprob: -10.606879234313965
    10. '"""' → logprob: -10.919379234313965

Token 84: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.006757879164069891
    2. '(int' → logprob: -5.256757736206055
    3. ':' → logprob: -6.756757736206055
    4. ' :' → logprob: -8.881757736206055
    5. ':int' → logprob: -9.006757736206055
    6. ')' → logprob: -10.006757736206055
    7. '(' → logprob: -10.506757736206055
    8. '):' → logprob: -11.756757736206055
    9. '   ' → logprob: -12.756757736206055
    10. ' ' → logprob: -13.006757736206055

Token 85: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.014987758360803127
    2. ' int' → logprob: -4.264987945556641
    3. ')' → logprob: -7.514987945556641
    4. '):' → logprob: -8.26498794555664
    5. ' )' → logprob: -12.13998794555664
    6. ' ):' → logprob: -12.63998794555664
    7. ' ' → logprob: -12.76498794555664
    8. ':int' → logprob: -12.88998794555664
    9. '   ' → logprob: -13.01498794555664
    10. '(int' → logprob: -13.26498794555664

Token 86: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.16192218661308289
    2. ')' → logprob: -1.9119222164154053
    3. ' ):' → logprob: -6.536921977996826
    4. ':' → logprob: -9.036922454833984
    5. ' )' → logprob: -9.661922454833984
    6. '   ' → logprob: -10.911922454833984
    7. ' ' → logprob: -11.161922454833984
    8. '):
' → logprob: -11.411922454833984
    9. ',' → logprob: -11.911922454833984
    10. ' :' → logprob: -13.036922454833984

Token 87: ' Co' (ID: 4642)
  Prédit: ' Co'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Co' → logprob: -0.021051187068223953
    2. 'Co' → logprob: -3.8960511684417725
    3. ' Le' → logprob: -8.896051406860352
    4. ' co' → logprob: -9.271051406860352
    5. ' ' → logprob: -9.396051406860352
    6. ' coût' → logprob: -9.896051406860352
    7. ' C' → logprob: -10.271051406860352
    8. '   ' → logprob: -10.521051406860352
    9. 'co' → logprob: -10.646051406860352
    10. 'C' → logprob: -11.646051406860352

Token 88: 'ût' (ID: 24581)
  Prédit: 'ût'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ût' → logprob: -0.6236094832420349
    2. 'm' → logprob: -1.3736095428466797
    3. 'û' → logprob: -2.7486095428466797
    4. 't' → logprob: -3.2486095428466797
    5. 'n' → logprob: -3.6236095428466797
    6. 'st' → logprob: -4.12360954284668
    7. 'mp' → logprob: -4.24860954284668
    8. 'ù' → logprob: -4.62360954284668
    9. 'd' → logprob: -4.87360954284668
    10. 'ú' → logprob: -5.24860954284668

Token 89: ' global' (ID: 5466)
  Prédit: ' forfait'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' forfait' → logprob: -0.03349020704627037
    2. ' for' → logprob: -4.658490180969238
    3. ' total' → logprob: -4.783490180969238
    4. ' ' → logprob: -5.033490180969238
    5. 'for' → logprob: -5.658490180969238
    6. ' fixe' → logprob: -6.033490180969238
    7. ' global' → logprob: -6.533490180969238
    8. ' For' → logprob: -8.533490180969238
    9. ' au' → logprob: -8.908490180969238
    10. ' ' → logprob: -9.033490180969238

Token 90: ' forfait' (ID: 132619)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.9829782247543335
    2. '):' → logprob: -1.2329782247543335
    3. '   ' → logprob: -1.8579782247543335
    4. '):
' → logprob: -2.232978343963623
    5. 'pour' → logprob: -3.482978343963623
    6. ' pour' → logprob: -4.857978343963623
    7. ' forfait' → logprob: -5.107978343963623
    8. 'for' → logprob: -5.482978343963623
    9. ')
' → logprob: -5.482978343963623
    10. ':' → logprob: -5.857978343963623

Token 91: 'aire' (ID: 8189)
  Prédit: 'aire'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aire' → logprob: -0.00130738306324929
    2. 'a' → logprob: -6.751307487487793
    3. 'air' → logprob: -9.876307487487793
    4. 'taire' → logprob: -10.376307487487793
    5. '   ' → logprob: -11.001307487487793
    6. 'ataire' → logprob: -11.876307487487793
    7. 'aires' → logprob: -12.001307487487793
    8. 'naire' → logprob: -12.376307487487793
    9. ' a' → logprob: -13.126307487487793
    10. ' aire' → logprob: -13.376307487487793

Token 92: ' pour' (ID: 1930)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.45741990208625793
    2. ')' → logprob: -1.4574198722839355
    3. '):
' → logprob: -2.4574198722839355
    4. '   ' → logprob: -3.0824198722839355
    5. ' pour' → logprob: -7.3324198722839355
    6. ')
' → logprob: -7.7074198722839355
    7. ' ):' → logprob: -8.582420349121094
    8. ':' → logprob: -8.832420349121094
    9. '):

' → logprob: -8.957420349121094
    10. ').' → logprob: -9.082420349121094

Token 93: ' tous' (ID: 10688)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.4519268870353699
    2. 'l' → logprob: -1.0769269466400146
    3. ' tous' → logprob: -4.5769267082214355
    4. 't' → logprob: -5.7019267082214355
    5. ' tout' → logprob: -6.0769267082214355
    6. 'tout' → logprob: -6.2019267082214355
    7. 'acheter' → logprob: -6.4519267082214355
    8. ' acheter' → logprob: -6.7019267082214355
    9. ' toute' → logprob: -7.8269267082214355
    10. ' les' → logprob: -8.451927185058594

Token 94: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.05563782900571823
    2. 'les' → logprob: -3.680637836456299
    3. ')' → logprob: -3.930637836456299
    4. ' ' → logprob: -5.930637836456299
    5. ' )' → logprob: -5.930637836456299
    6. '):
' → logprob: -6.805637836456299
    7. ')
' → logprob: -7.680637836456299
    8. ' els' → logprob: -7.930637836456299
    9. ' éléments' → logprob: -7.930637836456299
    10. ' l' → logprob: -8.68063735961914

Token 95: ' éléments' (ID: 57375)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.1293736696243286
    2. ' éléments' → logprob: -2.129373550415039
    3. 'é' → logprob: -6.254373550415039
    4. 'él' → logprob: -8.754373550415039
    5. ' ' → logprob: -9.129373550415039
    6. ' élément' → logprob: -9.504373550415039
    7. ' é' → logprob: -9.879373550415039
    8. ' él' → logprob: -10.379373550415039
    9. ' ' → logprob: -11.004373550415039
    10. ' elements' → logprob: -11.504373550415039

Token 96: '.

' (ID: 364)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6143136620521545
    2. '):
' → logprob: -1.6143136024475098
    3. '):' → logprob: -1.9893136024475098
    4. ')' → logprob: -2.1143136024475098
    5. ')
' → logprob: -6.73931360244751
    6. '):
' → logprob: -7.73931360244751
    7. '):

' → logprob: -8.239314079284668
    8. '```' → logprob: -8.489314079284668
    9. '"""
' → logprob: -9.239314079284668
    10. ' ' → logprob: -9.614314079284668

Token 97: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.061936087906360626
    2. '"""' → logprob: -3.311936140060425
    3. ')' → logprob: -3.936936140060425
    4. '"""
' → logprob: -5.936935901641846
    5. '"' → logprob: -7.936935901641846
    6. '""' → logprob: -7.936935901641846
    7. '```' → logprob: -8.561936378479004
    8. ')
' → logprob: -8.936936378479004
    9. ' ' → logprob: -9.061936378479004
    10. ' """' → logprob: -9.436936378479004

Token 98: ' Returns' (ID: 9609)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.27150803804397583
    2. '"""' → logprob: -1.521507978439331
    3. ')' → logprob: -4.39650821685791
    4. ' """' → logprob: -5.89650821685791
    5. '"""
' → logprob: -6.02150821685791
    6. '""' → logprob: -7.39650821685791
    7. ' """
' → logprob: -7.77150821685791
    8. '"' → logprob: -7.89650821685791
    9. '```' → logprob: -9.02150821685791
    10. '    ' → logprob: -9.52150821685791

Token 99: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.6342192888259888
    2. ' :' → logprob: -0.7592192888259888
    3. '<|end|>' → logprob: -7.509219169616699
    4. ' ' → logprob: -8.2592191696167
    5. ' ):' → logprob: -8.5092191696167
    6. '):' → logprob: -9.3842191696167
    7. ' )' → logprob: -9.5092191696167
    8. ')' → logprob: -9.6342191696167
    9. ',' → logprob: -10.0092191696167
    10. ' A' → logprob: -10.1342191696167

Token 100: '       ' (ID: 309)
  Prédit: ' min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.12101905792951584
    2. '   ' → logprob: -3.371019124984741
    3. ' max' → logprob: -3.371019124984741
    4. '    ' → logprob: -4.121018886566162
    5. ' A' → logprob: -4.621018886566162
    6. 'min' → logprob: -4.746018886566162
    7. ' N' → logprob: -5.246018886566162
    8. ' int' → logprob: -6.121018886566162
    9. 'A' → logprob: -7.246018886566162
    10. ' "' → logprob: -7.996018886566162

Token 101: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.42958343029022217
    2. 'int' (adapté à ' int') → logprob: -1.0545834302902222
    3. '   ' → logprob: -7.054583549499512
    4. ' min' → logprob: -11.929583549499512
    5. 'min' → logprob: -12.554583549499512
    6. '
' → logprob: -13.679583549499512
    7. '       ' → logprob: -13.804583549499512
    8. '```' → logprob: -14.304583549499512
    9. ' minimum' → logprob: -14.304583549499512
    10. '    ' → logprob: -14.554583549499512

Token 102: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.06348642706871033
    2. ' :' → logprob: -2.813486337661743
    3. '   ' → logprob: -7.688486576080322
    4. ' :
' → logprob: -8.438486099243164
    5. ':
' → logprob: -8.438486099243164
    6. '):' → logprob: -9.188486099243164
    7. '```' → logprob: -9.688486099243164
    8. ' """' → logprob: -9.813486099243164
    9. ' ):' → logprob: -9.938486099243164
    10. ')' → logprob: -9.938486099243164

Token 103: ' Le' (ID: 2018)
  Prédit: ' min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.008387038484215736
    2. ' Le' → logprob: -5.258387088775635
    3. ' le' → logprob: -6.133387088775635
    4. ' minimum' → logprob: -8.133386611938477
    5. 'min' → logprob: -8.383386611938477
    6. '   ' → logprob: -8.758386611938477
    7. ' max' → logprob: -8.883386611938477
    8. ' La' → logprob: -10.008386611938477
    9. 'Le' → logprob: -10.258386611938477
    10. ' return' → logprob: -10.508386611938477

Token 104: ' coût' (ID: 73109)
  Prédit: ' coût'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' coût' → logprob: -0.086815744638443
    2. ' minimum' → logprob: -2.83681583404541
    3. ' co' → logprob: -5.08681583404541
    4. ' cost' → logprob: -6.08681583404541
    5. ' min' → logprob: -6.08681583404541
    6. 'co' → logprob: -6.21181583404541
    7. ' montant' → logprob: -6.71181583404541
    8. ' prix' → logprob: -6.71181583404541
    9. ' moindre' → logprob: -6.83681583404541
    10. ' ' → logprob: -7.08681583404541

Token 105: ' minimum' (ID: 11085)
  Prédit: ' minimum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' minimum' → logprob: -0.020408742129802704
    2. ' minimal' → logprob: -4.145408630371094
    3. 'minimum' → logprob: -5.645408630371094
    4. ' total' → logprob: -8.270408630371094
    5. ' maximum' → logprob: -8.520408630371094
    6. '_' → logprob: -9.270408630371094
    7. ' minimale' → logprob: -9.270408630371094
    8. ' min' → logprob: -10.145408630371094
    9. ' space' → logprob: -10.395408630371094
    10. ' mínimo' → logprob: -11.020408630371094

Token 106: ' entre' (ID: 3853)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.168729543685913
    2. '.' → logprob: -1.918729543685913
    3. ':' → logprob: -2.293729543685913
    4. ' entre' → logprob: -2.543729543685913
    5. ' 
' → logprob: -2.918729543685913
    6. ':
' → logprob: -2.918729543685913
    7. '
' → logprob: -3.043729543685913
    8. '    
' → logprob: -3.168729543685913
    9. '\n' → logprob: -3.418729543685913
    10. '```' → logprob: -3.668729543685913

Token 107: ' les' (ID: 1341)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.1077919751405716
    2. 'A' → logprob: -2.4827919006347656
    3. ' N' → logprob: -4.232791900634766
    4. ' le' → logprob: -7.232791900634766
    5. 'N' → logprob: -7.357791900634766
    6. ' la' → logprob: -7.482791900634766
    7. ' ' → logprob: -7.982791900634766
    8. ' les' → logprob: -8.107791900634766
    9. '   ' → logprob: -8.357791900634766
    10. ' payer' → logprob: -8.357791900634766

Token 108: ' deux' (ID: 10301)
  Prédit: ' deux'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' deux' → logprob: -0.15549121797084808
    2. 'de' → logprob: -2.0304911136627197
    3. ' two' → logprob: -5.405491352081299
    4. ' options' → logprob: -6.030491352081299
    5. ' ' → logprob: -6.280491352081299
    6. ' A' → logprob: -6.905491352081299
    7. ' coûts' → logprob: -7.280491352081299
    8. 'A' → logprob: -7.655491352081299
    9. 'co' → logprob: -8.15549087524414
    10. ' N' → logprob: -8.28049087524414

Token 109: ' options' (ID: 3880)
  Prédit: ' options'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' options' → logprob: -0.7337851524353027
    2. ')' → logprob: -1.2337851524353027
    3. 'options' → logprob: -1.7337851524353027
    4. '   ' → logprob: -4.233785152435303
    5. 'co' → logprob: -4.983785152435303
    6. '```' → logprob: -4.983785152435303
    7. ' coûts' → logprob: -5.608785152435303
    8. '}' → logprob: -6.358785152435303
    9. 'cost' → logprob: -6.608785152435303
    10. '_options' → logprob: -6.608785152435303

Token 110: '.
' (ID: 558)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.4902195930480957
    2. '   ' → logprob: -1.2402195930480957
    3. '):' → logprob: -3.3652195930480957
    4. ')' → logprob: -3.4902195930480957
    5. ':
' → logprob: -3.6152195930480957
    6. '):
' → logprob: -5.865219593048096
    7. '
' → logprob: -6.615219593048096
    8. '\n' → logprob: -7.365219593048096
    9. '    
' → logprob: -7.865219593048096
    10. ',' → logprob: -8.365219116210938

Token 111: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00439783651381731
    2. ')' → logprob: -6.254397869110107
    3. '
' → logprob: -6.879397869110107
    4. '    
' → logprob: -7.254397869110107
    5. '"""' → logprob: -8.50439739227295
    6. '\n' → logprob: -9.12939739227295
    7. '    ' → logprob: -9.37939739227295
    8. '```' → logprob: -9.62939739227295
    9. ':' → logprob: -10.00439739227295
    10. ' 
' → logprob: -10.25439739227295

Token 112: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09269051253795624
    2. '
' → logprob: -2.4676904678344727
    3. '    
' → logprob: -6.092690467834473
    4. ')' → logprob: -7.467690467834473
    5. '\n' → logprob: -8.467690467834473
    6. ' 
' → logprob: -8.592690467834473
    7. '    ' → logprob: -9.342690467834473
    8. ':' → logprob: -9.592690467834473
    9. ' ' → logprob: -9.842690467834473
    10. ' return' → logprob: -9.967690467834473

Token 113: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009463044814765453
    2. '
' → logprob: -4.884462833404541
    3. '    
' → logprob: -7.134462833404541
    4. 'return' → logprob: -7.509462833404541
    5. ' return' → logprob: -8.2594633102417
    6. ' 
' → logprob: -9.3844633102417
    7. 'r' → logprob: -9.8844633102417
    8. '```' → logprob: -10.2594633102417
    9. 'n' → logprob: -11.0094633102417
    10. '    ' → logprob: -11.0094633102417

Token 114: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.49006471037864685
    2. ' return' → logprob: -1.3650647401809692
    3. '   ' → logprob: -2.1150646209716797
    4. 'if' → logprob: -5.49006462097168
    5. ' if' → logprob: -5.74006462097168
    6. 'cost' → logprob: -5.99006462097168
    7. ' cost' → logprob: -7.86506462097168
    8. 'c' → logprob: -7.86506462097168
    9. 'r' → logprob: -8.74006462097168
    10. '```' → logprob: -8.86506462097168

Token 115: ' Calcul' (ID: 57243)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.7446755766868591
    2. 'return' → logprob: -0.7446755766868591
    3. '   ' → logprob: -3.619675636291504
    4. 'cost' → logprob: -5.244675636291504
    5. 'co' → logprob: -5.619675636291504
    6. 'if' → logprob: -5.619675636291504
    7. ' if' → logprob: -5.744675636291504
    8. 'c' → logprob: -6.369675636291504
    9. ' cost' → logprob: -6.494675636291504
    10. '#' → logprob: -6.994675636291504

Token 116: ' du' (ID: 1462)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0032140801195055246
    2. '_' → logprob: -6.628213882446289
    3. '    ' → logprob: -7.503213882446289
    4. '  ' → logprob: -8.128213882446289
    5. '    
' → logprob: -8.628213882446289
    6. ' de' → logprob: -9.128213882446289
    7. '_min' → logprob: -9.128213882446289
    8. ' =' → logprob: -9.628213882446289
    9. ' return' → logprob: -9.628213882446289
    10. ' ' → logprob: -9.753213882446289

Token 117: ' coût' (ID: 73109)
  Prédit: ' min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.3816697597503662
    2. ' minimum' → logprob: -1.5066697597503662
    3. 'min' → logprob: -3.256669759750366
    4. ' coût' → logprob: -3.881669759750366
    5. 'minimum' → logprob: -4.256669998168945
    6. 'co' → logprob: -4.631669998168945
    7. ' co' → logprob: -5.381669998168945
    8. ' cout' → logprob: -5.881669998168945
    9. ' cost' → logprob: -7.131669998168945
    10. 'cost' → logprob: -7.631669998168945

Token 118: ' si' (ID: 1784)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -1.028262972831726
    2. '_min' → logprob: -2.5282630920410156
    3. '_un' → logprob: -2.5282630920410156
    4. '   ' → logprob: -2.7782630920410156
    5. ' minimum' → logprob: -2.7782630920410156
    6. '_total' → logprob: -2.7782630920410156
    7. ' un' → logprob: -2.7782630920410156
    8. ' =' → logprob: -3.1532630920410156
    9. '_a' → logprob: -3.2782630920410156
    10. ' _' → logprob: -3.6532630920410156

Token 119: ' l' (ID: 305)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.9000129699707031
    2. ' N' → logprob: -1.0250129699707031
    3. 'A' → logprob: -2.525012969970703
    4. ' on' → logprob: -2.650012969970703
    5. 'N' → logprob: -2.775012969970703
    6. 'on' → logprob: -4.650012969970703
    7. ' ' → logprob: -5.650012969970703
    8. '   ' → logprob: -6.025012969970703
    9. '  ' → logprob: -7.150012969970703
    10. '_on' → logprob: -7.275012969970703

Token 120: ''on' (ID: 25812)
  Prédit: ''on'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''on' → logprob: -0.08728604018688202
    2. 'on' → logprob: -3.2122859954833984
    3. ' on' → logprob: -3.2122859954833984
    4. '’on' → logprob: -7.212285995483398
    5. 'e' → logprob: -7.462285995483398
    6. 'a' → logprob: -7.837285995483398
    7. 'A' → logprob: -8.212285995483398
    8. 'N' → logprob: -8.712285995483398
    9. ' N' → logprob: -8.712285995483398
    10. '   ' → logprob: -9.212285995483398

Token 121: ' pa' (ID: 2428)
  Prédit: ' pay'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pay' → logprob: -0.4737178385257721
    2. 'pay' → logprob: -2.4737179279327393
    3. ' pa' → logprob: -2.5987179279327393
    4. ' chois' → logprob: -2.5987179279327393
    5. 'pa' → logprob: -2.9737179279327393
    6. 'p' → logprob: -3.0987179279327393
    7. 'op' → logprob: -4.47371768951416
    8. 'cho' → logprob: -4.59871768951416
    9. ' op' → logprob: -4.59871768951416
    10. ' ach' → logprob: -6.22371768951416

Token 122: 'ie' (ID: 396)
  Prédit: 'ie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ie' → logprob: -0.04732611030340195
    2. 'y' → logprob: -3.29732608795166
    3. 'ye' → logprob: -5.17232608795166
    4. 'yer' → logprob: -6.42232608795166
    5. 'ier' → logprob: -7.04732608795166
    6. 'i' → logprob: -7.67232608795166
    7. 'yage' → logprob: -10.23482608795166
    8. 'e' → logprob: -10.35982608795166
    9. '\' → logprob: -10.48482608795166
    10. 'it' → logprob: -10.54732608795166

Token 123: ' chaque' (ID: 21194)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.05751257762312889
    2. ' N' → logprob: -3.1825125217437744
    3. 'A' → logprob: -4.3075127601623535
    4. 'N' → logprob: -7.8075127601623535
    5. ' par' → logprob: -8.932512283325195
    6. ' ' → logprob: -9.182512283325195
    7. ' un' → logprob: -9.432512283325195
    8. ' a' → logprob: -9.557512283325195
    9. ' au' → logprob: -10.182512283325195
    10. ' for' → logprob: -11.057512283325195

Token 124: ' élément' (ID: 99627)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.13698972761631012
    2. ' élément' → logprob: -2.2619898319244385
    3. ' A' → logprob: -4.511989593505859
    4. 'A' → logprob: -4.886989593505859
    5. ' ' → logprob: -5.886989593505859
    6. ' a' → logprob: -7.136989593505859
    7. 'element' → logprob: -7.886989593505859
    8. ' article' → logprob: -8.26198959350586
    9. ' unité' → logprob: -8.51198959350586
    10. ' element' → logprob: -8.76198959350586

Token 125: ' sépar' (ID: 97160)
  Prédit: ' au'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' au' → logprob: -0.28900983929634094
    2. ' *' → logprob: -2.6640098094940186
    3. ' à' → logprob: -3.2890098094940186
    4. 'A' → logprob: -3.9140098094940186
    5. ' A' → logprob: -4.039010047912598
    6. '*' → logprob: -4.039010047912598
    7. ' ' → logprob: -4.289010047912598
    8. ' multip' → logprob: -4.289010047912598
    9. 'au' → logprob: -4.539010047912598
    10. ' pour' → logprob: -4.664010047912598

Token 126: 'ément' (ID: 17645)
  Prédit: 'ément'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ément' → logprob: -0.009781114757061005
    2. 'é' → logprob: -4.6347808837890625
    3. 'ment' → logprob: -12.009780883789062
    4. 'ém' → logprob: -12.259780883789062
    5. '```' → logprob: -12.384780883789062
    6. 'm' → logprob: -13.134780883789062
    7. 'ement' → logprob: -13.384780883789062
    8. 'e' → logprob: -14.384780883789062
    9. 'ée' → logprob: -14.759780883789062
    10. 't' → logprob: -14.884780883789062

Token 127: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.1094127893447876
    2. '    
' → logprob: -1.2344127893447876
    3. '   ' → logprob: -1.4844127893447876
    4. ' 
' → logprob: -2.859412670135498
    5. ' cost' → logprob: -3.359412670135498
    6. 'cost' → logprob: -4.234412670135498
    7. ',' → logprob: -4.984412670135498
    8. '   
' → logprob: -5.609412670135498
    9. '  
' → logprob: -5.609412670135498
    10. 'c' → logprob: -5.609412670135498

Token 128: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.1221263408660889
    2. 'cost' → logprob: -1.6221263408660889
    3. ' cost' → logprob: -1.7471263408660889
    4. '    
' → logprob: -2.622126340866089
    5. 'co' → logprob: -2.622126340866089
    6. ',' → logprob: -3.372126340866089
    7. 'total' → logprob: -3.497126340866089
    8. ' total' → logprob: -3.622126340866089
    9. ':' → logprob: -4.747126579284668
    10. ' 
' → logprob: -4.997126579284668

Token 129: ' cost' (ID: 3097)
  Prédit: 'cost'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cost' (adapté à ' cost') → logprob: -0.5706298351287842
    2. ' cost' → logprob: -0.9456298351287842
    3. 'co' → logprob: -4.445630073547363
    4. ' total' → logprob: -4.945630073547363
    5. ' individual' → logprob: -5.070630073547363
    6. 'total' → logprob: -5.070630073547363
    7. '   ' → logprob: -5.820630073547363
    8. 'individual' → logprob: -6.070630073547363
    9. ' unit' → logprob: -6.320630073547363
    10. ' per' → logprob: -6.570630073547363

Token 130: '_option' (ID: 22492)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.4202864468097687
    2. '_per' → logprob: -1.7952864170074463
    3. ' =' → logprob: -1.9202864170074463
    4. '_se' → logprob: -3.9202864170074463
    5. '_ind' → logprob: -6.045286655426025
    6. '_par' → logprob: -6.420286655426025
    7. '=' → logprob: -6.545286655426025
    8. '_space' → logprob: -7.045286655426025
    9. '_sep' → logprob: -7.295286655426025
    10. '_for' → logprob: -7.420286655426025

Token 131: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.060771454125642776
    2. '1' → logprob: -2.9357714653015137
    3. ' =' → logprob: -5.560771465301514
    4. 's' → logprob: -7.185771465301514
    5. '=' → logprob: -7.560771465301514
    6. '_s' → logprob: -8.060770988464355
    7. '_one' → logprob: -8.685770988464355
    8. '_per' → logprob: -9.185770988464355
    9. '_a' → logprob: -10.435770988464355
    10. '_un' → logprob: -10.685770988464355

Token 132: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.1070772111415863
    2. 'a' → logprob: -2.482077121734619
    3. 'A' → logprob: -4.482077121734619
    4. 'each' → logprob: -5.732077121734619
    5. 'one' → logprob: -6.482077121734619
    6. 'se' → logprob: -7.357077121734619
    7. 'wise' → logprob: -7.732077121734619
    8. 'by' → logprob: -8.857077598571777
    9. 'un' → logprob: -9.107077598571777
    10. 'ind' → logprob: -9.857077598571777

Token 133: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.011050531640648842
    2. '=' → logprob: -4.511050701141357
    3. ' ' → logprob: -13.3860502243042
    4. ' =
' → logprob: -14.3860502243042
    5. ' ' → logprob: -15.0110502243042
    6. '_' → logprob: -15.5110502243042
    7. ')' → logprob: -17.136051177978516
    8. 's' → logprob: -17.886051177978516
    9. ' =
' → logprob: -18.636051177978516
    10. '＝' → logprob: -18.761051177978516

Token 134: ' A' (ID: 355)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.6762004494667053
    2. ' N' → logprob: -0.9262004494667053
    3. ' A' → logprob: -2.9262003898620605
    4. 'A' → logprob: -3.1762003898620605
    5. ' ' → logprob: -10.301200866699219
    6. '   ' → logprob: -11.676200866699219
    7. '	N' → logprob: -12.051200866699219
    8. ' ' → logprob: -13.488700866699219
    9. '	A' → logprob: -13.613700866699219
    10. 'n' → logprob: -13.801200866699219

Token 135: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.0011892797192558646
    2. '*' → logprob: -6.751189231872559
    3. ' ' → logprob: -11.251189231872559
    4. '*N' → logprob: -12.251189231872559
    5. ' ' → logprob: -13.626189231872559
    6. ' **' → logprob: -17.126190185546875
    7. ' N' → logprob: -18.126190185546875
    8. ')' → logprob: -18.501190185546875
    9. '  ' → logprob: -18.563690185546875
    10. '#' → logprob: -18.626190185546875

Token 136: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.3132665753364563
    2. ' N' → logprob: -1.3132665157318115
    3. ' ' → logprob: -12.43826675415039
    4. '	N' → logprob: -14.56326675415039
    5. ' ' → logprob: -15.31326675415039
    6. '<|end|>' → logprob: -15.93826675415039
    7. 'n' → logprob: -17.56326675415039
    8. '  ' → logprob: -17.93826675415039
    9. '*N' → logprob: -18.31326675415039
    10. '```' → logprob: -18.62576675415039

Token 137: '
    
' (ID: 15698)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.0006601344794034958
    2. '\n' → logprob: -8.875659942626953
    3. '    
' → logprob: -8.875659942626953
    4. ' 
' → logprob: -9.000659942626953
    5. '  
' → logprob: -9.375659942626953
    6. '<|end|>' → logprob: -10.000659942626953
    7. '
' → logprob: -10.125659942626953
    8. '' → logprob: -10.625659942626953
    9. 'newline' → logprob: -11.125659942626953
    10. '

' → logprob: -11.375659942626953

Token 138: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.0024982523173093796
    2. '    
' → logprob: -6.627498149871826
    3. '   ' → logprob: -7.752498149871826
    4. '  
' → logprob: -8.252498626708984
    5. ' 
' → logprob: -8.252498626708984
    6. '\n' → logprob: -9.377498626708984
    7. '
' → logprob: -10.127498626708984
    8. '   
' → logprob: -10.377498626708984
    9. '' → logprob: -11.002498626708984
    10. 'cost' → logprob: -11.502498626708984

Token 139: ' #' (ID: 1069)
  Prédit: 'cost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cost' → logprob: -0.22430476546287537
    2. '
' → logprob: -2.224304676055908
    3. ' cost' → logprob: -2.974304676055908
    4. '   ' → logprob: -4.099304676055908
    5. '#' (adapté à ' #') → logprob: -4.224304676055908
    6. '    
' → logprob: -5.474304676055908
    7. ' 
' → logprob: -6.224304676055908
    8. ' #' → logprob: -6.849304676055908
    9. ' ' → logprob: -6.849304676055908
    10. '  
' → logprob: -6.974304676055908

Token 140: ' Le' (ID: 2018)
  Prédit: ' cost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' cost' → logprob: -1.2622435092926025
    2. '#' → logprob: -1.3872435092926025
    3. 'cost' → logprob: -2.0122435092926025
    4. 'Calcul' → logprob: -2.0122435092926025
    5. ' #' → logprob: -2.1372435092926025
    6. '   ' → logprob: -3.3872435092926025
    7. ' Calcul' → logprob: -4.262243270874023
    8. 'cal' → logprob: -4.887243270874023
    9. 'calcul' → logprob: -5.012243270874023
    10. 'co' → logprob: -5.762243270874023

Token 141: ' coût' (ID: 73109)
  Prédit: ' cost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cost' → logprob: -0.5417750477790833
    2. ' coût' → logprob: -1.6667749881744385
    3. 'cost' → logprob: -2.5417749881744385
    4. 'co' → logprob: -2.9167749881744385
    5. ' return' → logprob: -3.9167749881744385
    6. ' co' → logprob: -3.9167749881744385
    7. ' #' → logprob: -4.666775226593018
    8. ' meilleur' → logprob: -5.041775226593018
    9. ' minimum' → logprob: -5.166775226593018
    10. ' cout' → logprob: -5.416775226593018

Token 142: ' forfait' (ID: 132619)
  Prédit: '_option'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_option' → logprob: -0.7806230187416077
    2. ' option' → logprob: -1.030622959136963
    3. 'option' → logprob: -2.530622959136963
    4. '_' → logprob: -3.530622959136963
    5. ' forfait' → logprob: -3.780622959136963
    6. ' total' → logprob: -4.905622959136963
    7. ' if' → logprob: -4.905622959136963
    8. ' =' → logprob: -5.280622959136963
    9. 'total' → logprob: -5.405622959136963
    10. '_for' → logprob: -5.655622959136963

Token 143: 'aire' (ID: 8189)
  Prédit: 'aire'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aire' → logprob: -0.0007055217283777893
    2. 'a' → logprob: -8.00070571899414
    3. 'air' → logprob: -8.62570571899414
    4. '   ' → logprob: -9.50070571899414
    5. ' a' → logprob: -10.25070571899414
    6. ' aire' → logprob: -10.75070571899414
    7. ' ' → logprob: -10.87570571899414
    8. 'are' → logprob: -12.00070571899414
    9. '  ' → logprob: -12.12570571899414
    10. 'aires' → logprob: -12.62570571899414

Token 144: ' donné' (ID: 52079)
  Prédit: ' option'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' option' → logprob: -1.1325072050094604
    2. ' cost' → logprob: -1.2575072050094604
    3. ' est' → logprob: -1.8825072050094604
    4. ' =' → logprob: -2.75750732421875
    5. 'cost' → logprob: -3.63250732421875
    6. ' ' → logprob: -3.75750732421875
    7. ' B' → logprob: -3.75750732421875
    8. ' is' → logprob: -3.88250732421875
    9. ' for' → logprob: -4.38250732421875
    10. '   ' → logprob: -4.75750732421875

Token 145: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.7504746913909912
    2. ' =' → logprob: -2.000474691390991
    3. ' cost' → logprob: -2.125474691390991
    4. ' is' → logprob: -2.875474691390991
    5. ' for' → logprob: -2.875474691390991
    6. '    
' → logprob: -2.875474691390991
    7. 'cost' → logprob: -2.875474691390991
    8. ',' → logprob: -3.000474691390991
    9. 'B' → logprob: -3.125474691390991
    10. ' B' → logprob: -3.250474691390991

Token 146: '   ' (ID: 271)
  Prédit: ' cost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cost' → logprob: -0.44190242886543274
    2. 'cost' → logprob: -1.5669023990631104
    3. '   ' → logprob: -2.6919023990631104
    4. ' =' → logprob: -2.9419023990631104
    5. '    
' → logprob: -4.9419026374816895
    6. ' option' → logprob: -5.6919026374816895
    7. ',' → logprob: -6.4419026374816895
    8. ' if' → logprob: -6.6919026374816895
    9. ' is' → logprob: -6.6919026374816895
    10. ' return' → logprob: -6.8169026374816895

Token 147: ' cost' (ID: 3097)
  Prédit: ' B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.20840144157409668
    2. 'B' → logprob: -1.7084014415740967
    3. ' cost' → logprob: -5.333401679992676
    4. 'cost' (adapté à ' cost') → logprob: -6.583401679992676
    5. ' ' → logprob: -7.958401679992676
    6. 'b' → logprob: -9.208401679992676
    7. ' b' → logprob: -9.583401679992676
    8. ' ' → logprob: -10.145901679992676
    9. ' 
' → logprob: -10.520901679992676
    10. 'space' → logprob: -10.708401679992676

Token 148: '_option' (ID: 22492)
  Prédit: '_option'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_option' → logprob: -0.0036376076750457287
    2. '_' → logprob: -5.628637790679932
    3. '_opt' → logprob: -11.378637313842773
    4. '_options' → logprob: -11.378637313842773
    5. ' _' → logprob: -11.628637313842773
    6. '_op' → logprob: -14.003637313842773
    7. '_for' → logprob: -14.628637313842773
    8. 'Option' → logprob: -14.753637313842773
    9. '_OPTION' → logprob: -14.878637313842773
    10. '_user' → logprob: -15.378637313842773

Token 149: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -3.583550642360933e-05
    2. '2' → logprob: -11.625036239624023
    3. ' =' → logprob: -11.750036239624023
    4. ' _' → logprob: -12.125036239624023
    5. '_=' → logprob: -12.125036239624023
    6. '=' → logprob: -12.250036239624023
    7. '=_' → logprob: -13.625036239624023
    8. '1' → logprob: -13.625036239624023
    9. '__' → logprob: -15.500036239624023
    10. '```' → logprob: -16.250036239624023

Token 150: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.02425163984298706
    2. '1' → logprob: -3.774251699447632
    3. 'B' → logprob: -7.274251461029053
    4. ' ' → logprob: -8.149251937866211
    5. '_' → logprob: -11.649251937866211
    6. ' B' → logprob: -12.524251937866211
    7. '<|end|>' → logprob: -12.524251937866211
    8. '=' → logprob: -13.524251937866211
    9. '  ' → logprob: -13.899251937866211
    10. '   ' → logprob: -14.149251937866211

Token 151: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0013314292300492525
    2. '=' → logprob: -6.626331329345703
    3. ' ' → logprob: -12.126331329345703
    4. ' is' → logprob: -17.376331329345703
    5. ' =
' → logprob: -17.501331329345703
    6. ')' → logprob: -17.876331329345703
    7. '<|end|>' → logprob: -18.876331329345703
    8. ' ' → logprob: -19.126331329345703
    9. ',' → logprob: -19.126331329345703
    10. '_' → logprob: -19.501331329345703

Token 152: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.026300877332687378
    2. 'B' → logprob: -3.6513009071350098
    3. ' ' → logprob: -15.276300430297852
    4. ' ' → logprob: -15.651300430297852
    5. '	B' → logprob: -16.27630043029785
    6. '_B' → logprob: -18.27630043029785
    7. ' Б' → logprob: -18.90130043029785
    8. 'b' → logprob: -18.90130043029785
    9. '`' → logprob: -19.27630043029785
    10. ' `' → logprob: -19.52630043029785

Token 153: '
    
' (ID: 15698)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.004628772847354412
    2. '    
' → logprob: -5.629628658294678
    3. '   ' → logprob: -7.629628658294678
    4. '  
' → logprob: -8.629629135131836
    5. 'return' → logprob: -8.879629135131836
    6. '
' → logprob: -9.129629135131836
    7. '
    
' → logprob: -10.379629135131836
    8. '   
' → logprob: -10.504629135131836
    9. '

' → logprob: -10.629629135131836
    10. ' return' → logprob: -11.129629135131836

Token 154: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.43158096075057983
    2. '
' → logprob: -1.3065810203552246
    3. '    
' → logprob: -2.5565810203552246
    4. 'return' → logprob: -6.681581020355225
    5. ' return' → logprob: -7.556581020355225
    6. '  
' → logprob: -8.806580543518066
    7. ' 
' → logprob: -9.056580543518066
    8. '   
' → logprob: -9.681580543518066
    9. '\n' → logprob: -10.556580543518066
    10. '    ' → logprob: -10.556580543518066

Token 155: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.023170579224824905
    2. '   ' → logprob: -4.148170471191406
    3. ' return' → logprob: -5.148170471191406
    4. '#' (adapté à ' #') → logprob: -6.898170471191406
    5. 'if' → logprob: -8.273170471191406
    6. 'ret' → logprob: -12.273170471191406
    7. ' #' → logprob: -12.398170471191406
    8. '    
' → logprob: -12.523170471191406
    9. '```' → logprob: -12.523170471191406
    10. ' ' → logprob: -12.648170471191406

Token 156: ' Retour' (ID: 146830)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.2172793596982956
    2. 'return' → logprob: -1.717279314994812
    3. ' min' → logprob: -4.967279434204102
    4. '   ' → logprob: -5.217279434204102
    5. 'min' → logprob: -6.217279434204102
    6. '#' → logprob: -7.092279434204102
    7. ' #' → logprob: -8.842279434204102
    8. ' if' → logprob: -9.467279434204102
    9. 'if' → logprob: -9.717279434204102
    10. ' max' → logprob: -10.217279434204102

Token 157: 'ne' (ID: 611)
  Prédit: ' min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.6057503819465637
    2. ' max' → logprob: -1.105750322341919
    3. ' cost' → logprob: -2.230750322341919
    4. '   ' → logprob: -5.105750560760498
    5. 'min' → logprob: -5.605750560760498
    6. ' ' → logprob: -6.105750560760498
    7. ' cos' → logprob: -7.230750560760498
    8. 'er' → logprob: -7.605750560760498
    9. ' co' → logprob: -7.605750560760498
    10. '  ' → logprob: -7.605750560760498

Token 158: ' le' (ID: 505)
  Prédit: ' min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.0036429534666240215
    2. 'min' → logprob: -6.128643035888672
    3. ' max' → logprob: -6.628643035888672
    4. ' ' → logprob: -9.378643035888672
    5. ' cost' → logprob: -10.753643035888672
    6. ' minimum' → logprob: -11.753643035888672
    7. ' ' → logprob: -11.878643035888672
    8. 'max' → logprob: -12.503643035888672
    9. '   ' → logprob: -13.128643035888672
    10. '  ' → logprob: -13.253643035888672

Token 159: ' minimum' (ID: 11085)
  Prédit: ' min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.743119478225708
    2. ' minimum' → logprob: -0.743119478225708
    3. 'min' → logprob: -3.118119478225708
    4. 'minimum' → logprob: -5.868119239807129
    5. ' moindre' → logprob: -7.618119239807129
    6. ' ' → logprob: -8.493119239807129
    7. ' ' → logprob: -8.868119239807129
    8. ' plus' → logprob: -9.118119239807129
    9. ' minimal' → logprob: -9.368119239807129
    10. '  ' → logprob: -9.368119239807129

Token 160: ' des' (ID: 731)
  Prédit: ' cost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' cost' → logprob: -0.8280130624771118
    2. ' return' → logprob: -1.3280130624771118
    3. ' min' → logprob: -2.5780129432678223
    4. 'cost' → logprob: -2.7030129432678223
    5. ' between' → logprob: -3.2030129432678223
    6. ' entre' → logprob: -3.2030129432678223
    7. '   ' → logprob: -3.3280129432678223
    8. 'return' → logprob: -4.078012943267822
    9. '(cost' → logprob: -5.203012943267822
    10. ' (' → logprob: -5.578012943267822

Token 161: ' deux' (ID: 10301)
  Prédit: ' cost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cost' → logprob: -0.7086329460144043
    2. ' deux' → logprob: -0.8336329460144043
    3. ' two' → logprob: -3.4586329460144043
    4. 'cost' → logprob: -3.9586329460144043
    5. '(cost' → logprob: -5.208632946014404
    6. 'de' → logprob: -5.333632946014404
    7. ' coûts' → logprob: -5.708632946014404
    8. ' ' → logprob: -6.333632946014404
    9. ' co' → logprob: -6.333632946014404
    10. ' coût' → logprob: -6.708632946014404

Token 162: ' options' (ID: 3880)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.31847673654556274
    2. 'return' → logprob: -1.568476676940918
    3. 'cost' → logprob: -3.568476676940918
    4. ' cost' → logprob: -3.943476676940918
    5. '   ' → logprob: -5.318476676940918
    6. ' ' → logprob: -6.193476676940918
    7. '_cost' → logprob: -6.193476676940918
    8. '(cost' → logprob: -6.818476676940918
    9. ',' → logprob: -7.318476676940918
    10. '(' → logprob: -7.318476676940918

Token 163: ' de' (ID: 334)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.26711225509643555
    2. '   ' → logprob: -1.8921122550964355
    3. 'return' → logprob: -2.7671122550964355
    4. ' return' → logprob: -4.3921122550964355
    5. '    
' → logprob: -4.8921122550964355
    6. ' 
' → logprob: -7.8921122550964355
    7. '  
' → logprob: -8.517112731933594
    8. '\n' → logprob: -9.142112731933594
    9. '   
' → logprob: -9.517112731933594
    10. '	return' → logprob: -10.267112731933594

Token 164: ' coût' (ID: 73109)
  Prédit: ' coût'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' coût' → logprob: -0.06331042945384979
    2. ' paiement' → logprob: -3.688310384750366
    3. ' coûts' → logprob: -4.313310623168945
    4. ' cout' → logprob: -4.813310623168945
    5. ' prix' → logprob: -5.438310623168945
    6. 'co' → logprob: -6.438310623168945
    7. 'cout' → logprob: -6.938310623168945
    8. ' co' → logprob: -7.063310623168945
    9. ' cost' → logprob: -7.188310623168945
    10. ' ' → logprob: -7.188310623168945

Token 165: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.059730373322963715
    2. '   ' → logprob: -3.309730291366577
    3. 'return' → logprob: -4.309730529785156
    4. ' return' → logprob: -5.559730529785156
    5. '    
' → logprob: -5.684730529785156
    6. ' 
' → logprob: -7.809730529785156
    7. '  
' → logprob: -8.559730529785156
    8. '\n' → logprob: -9.809730529785156
    9. '   
' → logprob: -10.059730529785156
    10. '	return' → logprob: -11.059730529785156

Token 166: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12190123647451401
    2. 'return' → logprob: -2.496901273727417
    3. ' return' → logprob: -3.871901273727417
    4. '
' → logprob: -4.496901035308838
    5. '    
' → logprob: -7.871901035308838
    6. ' 
' → logprob: -10.621901512145996
    7. '	return' → logprob: -11.621901512145996
    8. ' ' → logprob: -11.871901512145996
    9. '\n' → logprob: -11.996901512145996
    10. '    ' → logprob: -12.246901512145996

Token 167: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.2954367399215698
    2. 'return' (adapté à ' return') → logprob: -1.4204367399215698
    3. ' min' → logprob: -4.420436859130859
    4. '   ' → logprob: -6.670436859130859
    5. 'min' → logprob: -7.045436859130859
    6. ' max' → logprob: -11.67043685913086
    7. ' ' → logprob: -13.54543685913086
    8. 'max' → logprob: -13.54543685913086
    9. ' retur' → logprob: -14.29543685913086
    10. '
' → logprob: -14.42043685913086

Token 168: ' min' (ID: 1349)
  Prédit: ' min'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.006727333180606365
    2. 'min' → logprob: -5.00672721862793
    3. ' max' → logprob: -12.25672721862793
    4. ' m' → logprob: -13.25672721862793
    5. '	min' → logprob: -13.38172721862793
    6. ' ' → logprob: -13.75672721862793
    7. ' ' → logprob: -14.13172721862793
    8. ' minimum' → logprob: -14.50672721862793
    9. ' cost' → logprob: -14.88172721862793
    10. ' mini' → logprob: -14.88172721862793

Token 169: '(cost' (ID: 133554)
  Prédit: '(cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(cost' → logprob: -0.011049000546336174
    2. '(' → logprob: -4.511048793792725
    3. 'cost' → logprob: -14.511049270629883
    4. '(price' → logprob: -15.386049270629883
    5. ' cost' → logprob: -15.761049270629883
    6. '_cost' → logprob: -15.886049270629883
    7. '(c' → logprob: -16.511049270629883
    8. '(
' → logprob: -16.886049270629883
    9. '(cap' → logprob: -17.261049270629883
    10. '(A' → logprob: -17.261049270629883

Token 170: '_option' (ID: 22492)
  Prédit: '_option'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_option' → logprob: -6.8497312895488e-05
    2. '_cost' → logprob: -10.375068664550781
    3. '_' → logprob: -11.000068664550781
    4. 'option' → logprob: -11.500068664550781
    5. '_options' → logprob: -12.500068664550781
    6. '_opt' → logprob: -12.625068664550781
    7. 'Option' → logprob: -13.875068664550781
    8. '_op' → logprob: -14.750068664550781
    9. ')_' → logprob: -15.500068664550781
    10. ')' → logprob: -15.625068664550781

Token 171: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -6.623244553338736e-05
    2. '1' → logprob: -10.250065803527832
    3. 's' → logprob: -11.500065803527832
    4. ')_' → logprob: -12.000065803527832
    5. '_cost' → logprob: -12.375065803527832
    6. ')' → logprob: -13.000065803527832
    7. '_option' → logprob: -13.250065803527832
    8. '2' → logprob: -13.875065803527832
    9. 'e' → logprob: -14.125065803527832
    10. '_s' → logprob: -14.500065803527832

Token 172: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0011626037303358316
    2. '2' → logprob: -7.251162528991699
    3. 'cost' → logprob: -8.2511625289917
    4. '_' → logprob: -9.0011625289917
    5. ' ' → logprob: -10.2511625289917
    6. ')' → logprob: -11.2511625289917
    7. 'option' → logprob: -12.6886625289917
    8. '_cost' → logprob: -13.0011625289917
    9. '   ' → logprob: -13.4386625289917
    10. 's' → logprob: -13.4386625289917

Token 173: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.005234356038272381
    2. ' ,' → logprob: -5.255234241485596
    3. '_,' → logprob: -15.005234718322754
    4. ' cost' → logprob: -16.755233764648438
    5. ',c' → logprob: -17.255233764648438
    6. 'cost' → logprob: -17.255233764648438
    7. ',
' → logprob: -18.005233764648438
    8. ',b' → logprob: -18.505233764648438
    9. ' ' → logprob: -19.505233764648438
    10. '_cost' → logprob: -19.630233764648438

Token 174: ' cost' (ID: 3097)
  Prédit: ' cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cost' → logprob: -0.002500748261809349
    2. 'cost' → logprob: -6.002500534057617
    3. ' ' → logprob: -11.127500534057617
    4. ' ' → logprob: -12.502500534057617
    5. '_cost' → logprob: -13.002500534057617
    6. ')' → logprob: -13.752500534057617
    7. ' )' → logprob: -13.877500534057617
    8. '(cost' → logprob: -14.502500534057617
    9. ' coste' → logprob: -14.752500534057617
    10. ' co' → logprob: -15.627500534057617

Token 175: '_option' (ID: 22492)
  Prédit: '_option'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_option' → logprob: -0.0014105896698310971
    2. 'option' → logprob: -6.876410484313965
    3. '_' → logprob: -8.126410484313965
    4. '_opt' → logprob: -10.376410484313965
    5. 'Option' → logprob: -11.501410484313965
    6. '_cost' → logprob: -11.751410484313965
    7. '_op' → logprob: -11.876410484313965
    8. 't' → logprob: -12.626410484313965
    9. 'tion' → logprob: -12.876410484313965
    10. 'ption' → logprob: -13.001410484313965

Token 176: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.043017685413360596
    2. '2' → logprob: -3.168017625808716
    3. ')' → logprob: -12.668017387390137
    4. ' ' → logprob: -12.668017387390137
    5. 'e' → logprob: -13.043017387390137
    6. '_)' → logprob: -13.168017387390137
    7. '-' → logprob: -13.418017387390137
    8. '₂' → logprob: -13.668017387390137
    9. '_option' → logprob: -14.043017387390137
    10. '_cost' → logprob: -14.543017387390137

Token 177: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -4.008129963040119e-06
    2. '_' → logprob: -13.125003814697266
    3. ')' → logprob: -13.750003814697266
    4. ' ' → logprob: -14.500003814697266
    5. '۲' → logprob: -16.125003814697266
    6. '₂' → logprob: -16.437503814697266
    7. '２' → logprob: -16.625003814697266
    8. '1' → logprob: -17.562503814697266
    9. '-' → logprob: -17.687503814697266
    10. 's' → logprob: -17.750003814697266

Token 178: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -5.512236498361744e-07
    2. ' )' → logprob: -15.125000953674316
    3. ')
' → logprob: -15.375000953674316
    4. '))' → logprob: -18.75
    5. '()' → logprob: -19.125
    6. '}' → logprob: -19.5
    7. ')`' → logprob: -19.625
    8. '')' → logprob: -20.375
    9. ')}' → logprob: -20.375
    10. ')#' → logprob: -20.375

Token 179: 'if' (ID: 366)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.48901060223579407
    2. '\n' → logprob: -1.4890105724334717
    3. '<|end|>' → logprob: -2.1140105724334717
    4. '```' → logprob: -3.9890105724334717
    5. 'newline' → logprob: -5.114010810852051
    6. '#' → logprob: -5.364010810852051
    7. '<|end|>' → logprob: -5.864010810852051
    8. '\' → logprob: -6.239010810852051
    9. ' ' → logprob: -6.364010810852051
    10. '[' → logprob: -7.114010810852051

Token 180: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.0022587371058762074
    2. '__' → logprob: -6.877258777618408
    3. ' ' → logprob: -7.377258777618408
    4. ' _' → logprob: -8.00225830078125
    5. '_' → logprob: -8.37725830078125
    6. ' ' → logprob: -10.87725830078125
    7. ' ‌' → logprob: -11.87725830078125
    8. ' ' → logprob: -12.25225830078125
    9. ' ​' → logprob: -13.25225830078125
    10. ' ___' → logprob: -14.37725830078125

Token 181: 'name' (ID: 897)
  Prédit: ' __'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.4746769666671753
    2. '__' → logprob: -0.9746769666671753
    3. ' ==' → logprob: -7.724677085876465
    4. '.__' → logprob: -9.849677085876465
    5. '_' → logprob: -10.974677085876465
    6. ' if' → logprob: -11.099677085876465
    7. 'if' → logprob: -11.349677085876465
    8. ' ' → logprob: -11.474677085876465
    9. '__.__' → logprob: -11.474677085876465
    10. '__.' → logprob: -12.099677085876465

Token 182: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.0004025481757707894
    2. '==' → logprob: -8.375402450561523
    3. ' ==' → logprob: -8.750402450561523
    4. '__.__' → logprob: -12.750402450561523
    5. '=="' → logprob: -13.000402450561523
    6. ' __' → logprob: -13.000402450561523
    7. 'name' → logprob: -13.375402450561523
    8. '```' → logprob: -13.500402450561523
    9. '__.' → logprob: -14.500402450561523
    10. '_' → logprob: -14.625402450561523

Token 183: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.4186120331287384
    2. '__' → logprob: -1.293612003326416
    3. '==' → logprob: -3.043612003326416
    4. '=="' → logprob: -3.918612003326416
    5. '"' → logprob: -9.793612480163574
    6. ' =="' → logprob: -9.793612480163574
    7. '_' → logprob: -10.168612480163574
    8. '=='' → logprob: -10.543612480163574
    9. ' __' → logprob: -10.668612480163574
    10. ' =' → logprob: -12.168612480163574

Token 184: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.04895578697323799
    2. ''' → logprob: -3.0489556789398193
    3. ' "__' → logprob: -8.423955917358398
    4. ' "' → logprob: -8.923955917358398
    5. '__' → logprob: -11.423955917358398
    6. ' '__' → logprob: -13.048955917358398
    7. ' '' → logprob: -13.298955917358398
    8. '_' → logprob: -15.048955917358398
    9. '"user' → logprob: -15.673955917358398
    10. ' __' → logprob: -16.4239559173584

Token 185: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -1.6047699318733066e-05
    2. '__' → logprob: -11.500016212463379
    3. 'name' → logprob: -12.375016212463379
    4. '_main' → logprob: -13.750016212463379
    5. ' main' → logprob: -14.750016212463379
    6. '"' → logprob: -16.875015258789062
    7. 'ma' → logprob: -17.375015258789062
    8. ' "__' → logprob: -18.250015258789062
    9. '-main' → logprob: -18.625015258789062
    10. 'built' → logprob: -19.125015258789062

Token 186: '__":
' (ID: 49892)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.10021055489778519
    2. '__":
' → logprob: -2.350210666656494
    3. '_' → logprob: -12.725210189819336
    4. '__':
' → logprob: -14.475210189819336
    5. '__:' → logprob: -16.225210189819336
    6. '_"' → logprob: -16.350210189819336
    7. '__["' → logprob: -16.475210189819336
    8. '__",' → logprob: -17.100210189819336
    9. '"' → logprob: -17.475210189819336
    10. '__("' → logprob: -17.475210189819336

Token 187: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.03219405189156532
    2. ':
' → logprob: -4.282194137573242
    3. ' :' → logprob: -4.407194137573242
    4. ' :
' → logprob: -6.282194137573242
    5. '<|end|>' → logprob: -6.407194137573242
    6. '   ' → logprob: -7.282194137573242
    7. ' 
' → logprob: -8.157194137573242
    8. ' ' → logprob: -8.282194137573242
    9. '    
' → logprob: -9.282194137573242
    10. '():
' → logprob: -9.407194137573242

Token 188: ' #' (ID: 1069)
  Prédit: ' N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.11154688894748688
    2. 'N' → logprob: -2.8615469932556152
    3. ' import' → logprob: -3.4865469932556152
    4. ' n' → logprob: -4.361546993255615
    5. 'n' → logprob: -5.736546993255615
    6. 'import' → logprob: -6.611546993255615
    7. '   ' → logprob: -8.236546516418457
    8. ' input' → logprob: -10.486546516418457
    9. ' #' → logprob: -10.611546516418457
    10. ' ' → logprob: -10.986546516418457

Token 189: ' Lecture' (ID: 106534)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'N' → logprob: -1.048654317855835
    2. 'n' → logprob: -1.298654317855835
    3. ' N' → logprob: -1.798654317855835
    4. ' n' → logprob: -2.048654317855835
    5. '#' → logprob: -3.173654317855835
    6. 'import' → logprob: -4.048654556274414
    7. 'input' → logprob: -5.298654556274414
    8. 'test' → logprob: -5.923654556274414
    9. ' input' → logprob: -6.423654556274414
    10. ' import' → logprob: -6.548654556274414

Token 190: ' des' (ID: 731)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.6144394874572754
    2. '   ' → logprob: -1.1144394874572754
    3. ' des' → logprob: -2.2394394874572754
    4. ' ' → logprob: -4.739439487457275
    5. ' de' → logprob: -5.614439487457275
    6. '(' → logprob: -5.989439487457275
    7. '    ' → logprob: -6.239439487457275
    8. 'des' → logprob: -6.239439487457275
    9. '_' → logprob: -6.364439487457275
    10. ' d' → logprob: -7.239439487457275

Token 191: ' entr' (ID: 7072)
  Prédit: ' inputs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' inputs' → logprob: -0.6510944962501526
    2. ' données' → logprob: -1.9010944366455078
    3. ' entr' → logprob: -2.276094436645508
    4. ' ' → logprob: -2.651094436645508
    5. ' valeurs' → logprob: -2.776094436645508
    6. ' input' → logprob: -3.276094436645508
    7. ' N' → logprob: -4.401094436645508
    8. 'inputs' → logprob: -4.526094436645508
    9. 'n' → logprob: -5.151094436645508
    10. 'entr' → logprob: -5.276094436645508

Token 192: 'ées' (ID: 5161)
  Prédit: 'ées'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ées' → logprob: -0.051251258701086044
    2. 'ée' → logprob: -3.051251173019409
    3. 'er' → logprob: -7.051251411437988
    4. 'es' → logprob: -7.426251411437988
    5. 'e' → logprob: -7.551251411437988
    6. 'ees' → logprob: -7.801251411437988
    7. '   ' → logprob: -9.176251411437988
    8. 'é' → logprob: -9.801251411437988
    9. 'és' → logprob: -10.551251411437988
    10. ' es' → logprob: -11.051251411437988

Token 193: ' utilisateur' (ID: 115595)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08872721344232559
    2. '    
' → logprob: -3.3387272357940674
    3. 'n' → logprob: -3.8387272357940674
    4. ' N' → logprob: -4.838726997375488
    5. 'import' → logprob: -4.963726997375488
    6. 'N' → logprob: -5.213726997375488
    7. ':' → logprob: -6.713726997375488
    8. '  
' → logprob: -6.713726997375488
    9. ' =' → logprob: -7.338726997375488
    10. '
' → logprob: -7.338726997375488

Token 194: ' sous' (ID: 14487)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04383173957467079
    2. ':' → logprob: -4.168831825256348
    3. '    
' → logprob: -4.293831825256348
    4. 'n' → logprob: -5.043831825256348
    5. 'N' → logprob: -6.793831825256348
    6. ' N' → logprob: -7.043831825256348
    7. ',' → logprob: -7.043831825256348
    8. '    ' → logprob: -7.168831825256348
    9. '  ' → logprob: -7.418831825256348
    10. '  
' → logprob: -7.793831825256348

Token 195: ' la' (ID: 557)
  Prédit: ' forme'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' forme' → logprob: -0.022015245631337166
    2. ' format' → logprob: -4.89701509475708
    3. 'forme' → logprob: -5.14701509475708
    4. 'format' → logprob: -5.77201509475708
    5. ' la' → logprob: -6.14701509475708
    6. 'la' → logprob: -6.52201509475708
    7. '   ' → logprob: -7.52201509475708
    8. 'form' → logprob: -8.647015571594238
    9. 'ent' → logprob: -8.897015571594238
    10. 'forma' → logprob: -9.147015571594238

Token 196: ' forme' (ID: 27450)
  Prédit: ' forme'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' forme' → logprob: -0.07641716301441193
    2. 'forme' → logprob: -2.9514172077178955
    3. 'form' → logprob: -4.951416969299316
    4. 'chaine' → logprob: -6.076416969299316
    5. 'format' → logprob: -6.326416969299316
    6. 'n' → logprob: -6.326416969299316
    7. ' même' → logprob: -6.451416969299316
    8. '   ' → logprob: -6.951416969299316
    9. ' form' → logprob: -7.201416969299316
    10. 'ligne' → logprob: -7.576416969299316

Token 197: ' de' (ID: 334)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.2027023285627365
    2. ' de' → logprob: -2.452702283859253
    3. '   ' → logprob: -3.202702283859253
    4. 'd' → logprob: -3.952702283859253
    5. '"' → logprob: -4.827702522277832
    6. '    ' → logprob: -4.952702522277832
    7. ' ' → logprob: -5.327702522277832
    8. 'de' → logprob: -5.827702522277832
    9. ' "' → logprob: -5.952702522277832
    10. ''' → logprob: -6.202702522277832

Token 198: ' trois' (ID: 25564)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.4830211102962494
    2. ' trois' → logprob: -1.7330211400985718
    3. ' la' → logprob: -2.9830210208892822
    4. 'input' → logprob: -3.2330210208892822
    5. ' ' → logprob: -3.6080210208892822
    6. ' une' → logprob: -4.108021259307861
    7. 'l' → logprob: -4.983021259307861
    8. '3' → logprob: -4.983021259307861
    9. ' l' → logprob: -5.233021259307861
    10. 'n' → logprob: -5.358021259307861

Token 199: ' ent' (ID: 1121)
  Prédit: 'ent'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ent' → logprob: -0.2063816636800766
    2. ' ent' → logprob: -1.7063816785812378
    3. ' integers' → logprob: -6.206381797790527
    4. ' nombres' → logprob: -6.581381797790527
    5. 'int' → logprob: -7.456381797790527
    6. ' valeurs' → logprob: -8.331381797790527
    7. 'ints' → logprob: -8.331381797790527
    8. ' entier' → logprob: -8.706381797790527
    9. 'inte' → logprob: -9.081381797790527
    10. 'val' → logprob: -9.831381797790527

Token 200: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.11907576769590378
    2. 'r' → logprob: -2.2440757751464844
    3. 'ières' → logprob: -5.619075775146484
    4. 'rees' → logprob: -6.994075775146484
    5. 'ers' → logprob: -7.994075775146484
    6. 'i' → logprob: -8.244075775146484
    7. 'ées' → logprob: -8.369075775146484
    8. 'ri' → logprob: -8.619075775146484
    9. 'rée' → logprob: -8.619075775146484
    10. 'ries' → logprob: -9.119075775146484

Token 201: ' sépar' (ID: 97160)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.6182327270507812
    2. ' N' → logprob: -1.3682327270507812
    3. ' ,' → logprob: -2.8682327270507812
    4. 's' → logprob: -3.2432327270507812
    5. '   ' → logprob: -3.8682327270507812
    6. ' ' → logprob: -4.118232727050781
    7. ':' → logprob: -4.618232727050781
    8. ' )' → logprob: -4.743232727050781
    9. ' :' → logprob: -4.993232727050781
    10. ')' → logprob: -5.118232727050781

Token 202: 'és' (ID: 1756)
  Prédit: 'és'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'és' → logprob: -0.03158128261566162
    2. 'é' → logprob: -3.531581401824951
    3. 'es' → logprob: -7.031581401824951
    4. ' par' → logprob: -7.781581401824951
    5. 'ées' → logprob: -8.406580924987793
    6. 'e' → logprob: -9.406580924987793
    7. 'ée' → logprob: -10.031580924987793
    8. 's' → logprob: -10.156580924987793
    9. 'ès' → logprob: -10.281580924987793
    10. ' espaces' → logprob: -10.406580924987793

Token 203: ' par' (ID: 686)
  Prédit: ' par'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' par' → logprob: -0.009894086048007011
    2. 'par' → logprob: -4.634893894195557
    3. 'es' → logprob: -10.259894371032715
    4. 's' → logprob: -10.384894371032715
    5. ' ' → logprob: -11.009894371032715
    6. ' by' → logprob: -11.134894371032715
    7. '  ' → logprob: -12.009894371032715
    8. 'space' → logprob: -12.134894371032715
    9. ' espaces' → logprob: -12.134894371032715
    10. 'e' → logprob: -12.259894371032715

Token 204: ' des' (ID: 731)
  Prédit: ' des'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.6484251022338867
    2. 'des' → logprob: -1.5234251022338867
    3. ' espaces' → logprob: -2.2734251022338867
    4. ' ' → logprob: -3.2734251022338867
    5. 'un' → logprob: -3.5234251022338867
    6. ' espace' → logprob: -3.6484251022338867
    7. ' un' → logprob: -3.6484251022338867
    8. 'es' → logprob: -4.148425102233887
    9. ''espace' → logprob: -4.773425102233887
    10. 'esp' → logprob: -5.398425102233887

Token 205: ' espaces' (ID: 98361)
  Prédit: ' espaces'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' espaces' → logprob: -0.042170047760009766
    2. 'esp' → logprob: -3.2921700477600098
    3. 'es' → logprob: -6.54217004776001
    4. ' espace' → logprob: -6.91717004776001
    5. 'spaces' → logprob: -7.04217004776001
    6. ''esp' → logprob: -8.167169570922852
    7. ' ' → logprob: -8.917169570922852
    8. ''espace' → logprob: -8.917169570922852
    9. ' espacios' → logprob: -9.292169570922852
    10. 'space' → logprob: -9.792169570922852

Token 206: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3464778959751129
    2. 'input' → logprob: -2.22147798538208
    3. '    
' → logprob: -2.47147798538208
    4. 'n' → logprob: -3.09647798538208
    5. ',' → logprob: -4.59647798538208
    6. 's' → logprob: -4.72147798538208
    7. 'N' → logprob: -4.84647798538208
    8. '   
' → logprob: -5.59647798538208
    9. '  
' → logprob: -5.97147798538208
    10. ':' → logprob: -6.09647798538208

Token 207: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3188261389732361
    2. '    
' → logprob: -1.6938261985778809
    3. 'n' → logprob: -3.318826198577881
    4. 'input' → logprob: -4.318826198577881
    5. '   
' → logprob: -4.693826198577881
    6. ' 
' → logprob: -4.818826198577881
    7. ',' → logprob: -5.068826198577881
    8. '  
' → logprob: -5.443826198577881
    9. 'N' → logprob: -6.068826198577881
    10. '\n' → logprob: -6.443826198577881

Token 208: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' (adapté à ' N') → logprob: -0.27742964029312134
    2. 'input' → logprob: -2.5274295806884766
    3. ' N' → logprob: -2.7774295806884766
    4. 'inputs' → logprob: -3.0274295806884766
    5. ' input' → logprob: -4.027429580688477
    6. ' inputs' → logprob: -4.152429580688477
    7. 'line' → logprob: -5.277429580688477
    8. ' line' → logprob: -5.652429580688477
    9. 'user' → logprob: -5.652429580688477
    10. 'n' → logprob: -6.152429580688477

Token 209: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -2.2246291337069124e-05
    2. ' ,' → logprob: -10.875021934509277
    3. ',A' → logprob: -12.750021934509277
    4. ',input' → logprob: -16.000022888183594
    5. ',B' → logprob: -16.125022888183594
    6. ',N' → logprob: -16.125022888183594
    7. ',user' → logprob: -17.000022888183594
    8. ',a' → logprob: -17.250022888183594
    9. ' =' → logprob: -18.000022888183594
    10. '_,' → logprob: -18.500022888183594

Token 210: ' A' (ID: 355)
  Prédit: ' A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.437409907579422
    2. 'A' → logprob: -1.0624098777770996
    3. ' ' → logprob: -4.9374098777771
    4. '<|end|>' → logprob: -7.1874098777771
    5. '  ' → logprob: -7.3124098777771
    6. ' ' → logprob: -11.062410354614258
    7. ' ,' → logprob: -11.437410354614258
    8. 's' → logprob: -11.687410354614258
    9. ',' → logprob: -12.062410354614258
    10. 'space' → logprob: -12.312410354614258

Token 211: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00038264848990365863
    2. ' ,' → logprob: -7.875382423400879
    3. ',B' → logprob: -13.000382423400879
    4. 'B' → logprob: -16.500383377075195
    5. '<|end|>' → logprob: -17.000383377075195
    6. ' B' → logprob: -17.250383377075195
    7. ' =' → logprob: -17.500383377075195
    8. '‌,' → logprob: -17.625383377075195
    9. '_,' → logprob: -17.875383377075195
    10. ' ' → logprob: -18.500383377075195

Token 212: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.2519531846046448
    2. ' B' → logprob: -1.501953125
    3. ' ' → logprob: -10.751953125
    4. ' =' → logprob: -13.751953125
    5. '=' → logprob: -14.251953125
    6. '  ' → logprob: -15.626953125
    7. '<|end|>' → logprob: -15.626953125
    8. ' ' → logprob: -15.876953125
    9. '=B' → logprob: -15.876953125
    10. '_' → logprob: -16.001953125

Token 213: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.10021066665649414
    2. '=' → logprob: -2.350210666656494
    3. '=input' → logprob: -13.350210189819336
    4. ',' → logprob: -13.725210189819336
    5. ')' → logprob: -14.350210189819336
    6. '<|end|>' → logprob: -15.725210189819336
    7. ' ' → logprob: -15.975210189819336
    8. '=int' → logprob: -16.100210189819336
    9. ' =
' → logprob: -16.975210189819336
    10. ' ' → logprob: -17.100210189819336

Token 214: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.17975875735282898
    2. 'map' → logprob: -1.8047587871551514
    3. '	map' → logprob: -12.67975902557373
    4. ' ' → logprob: -12.80475902557373
    5. ' ' → logprob: -13.05475902557373
    6. '[' → logprob: -13.17975902557373
    7. 'm' → logprob: -13.42975902557373
    8. '   ' → logprob: -14.30475902557373
    9. '  ' → logprob: -14.67975902557373
    10. '(map' → logprob: -14.67975902557373

Token 215: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0026566318701952696
    2. '(' → logprob: -6.00265645980835
    3. 'int' → logprob: -8.627656936645508
    4. ' int' → logprob: -14.127656936645508
    5. '<int' → logprob: -14.752656936645508
    6. '(input' → logprob: -14.877656936645508
    7. '(
' → logprob: -15.627656936645508
    8. '(str' → logprob: -16.877656936645508
    9. '```' → logprob: -16.877656936645508
    10. '=int' → logprob: -17.377656936645508

Token 216: ',' (ID: 11)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.06289587914943695
    2. '(input' → logprob: -3.0628957748413086
    3. ',input' → logprob: -4.687895774841309
    4. ' input' → logprob: -5.687895774841309
    5. ',' → logprob: -7.187895774841309
    6. ')' → logprob: -7.187895774841309
    7. '(' → logprob: -10.187895774841309
    8. '   ' → logprob: -10.437895774841309
    9. '=input' → logprob: -11.187895774841309
    10. '	input' → logprob: -11.937895774841309

Token 217: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.01416350994259119
    2. ' input' → logprob: -4.264163494110107
    3. ' ' → logprob: -17.764163970947266
    4. '(input' → logprob: -17.764163970947266
    5. '   ' → logprob: -18.389163970947266
    6. '	input' → logprob: -18.514163970947266
    7. '=input' → logprob: -18.639163970947266
    8. ')' → logprob: -18.889163970947266
    9. '<input' → logprob: -19.014163970947266
    10. ',input' → logprob: -19.264163970947266

Token 218: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.00133285962510854
    2. '()' → logprob: -6.626332759857178
    3. ' ().' → logprob: -13.251333236694336
    4. ')' → logprob: -13.501333236694336
    5. '(' → logprob: -13.501333236694336
    6. '())' → logprob: -13.626333236694336
    7. '("").' → logprob: -14.751333236694336
    8. '("' → logprob: -16.126333236694336
    9. '(input' → logprob: -16.251333236694336
    10. '()
' → logprob: -16.251333236694336

Token 219: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.011049000546336174
    2. 'strip' → logprob: -4.511048793792725
    3. 'rstrip' → logprob: -14.261049270629883
    4. ' split' → logprob: -14.511049270629883
    5. '(split' → logprob: -16.386049270629883
    6. '().' → logprob: -17.636049270629883
    7. '.split' → logprob: -17.886049270629883
    8. ' strip' → logprob: -18.011049270629883
    9. 'spl' → logprob: -18.511049270629883
    10. 'read' → logprob: -19.011049270629883

Token 220: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.015382254496216774
    2. '()))' → logprob: -4.265382289886475
    3. '()' → logprob: -7.265382289886475
    4. ')' → logprob: -8.140381813049316
    5. '('' → logprob: -8.890381813049316
    6. '))' → logprob: -9.640381813049316
    7. '(' → logprob: -11.390381813049316
    8. '("' → logprob: -12.765381813049316
    9. '()))
' → logprob: -12.890381813049316
    10. '(','' → logprob: -13.140381813049316

Token 221: '    
' (ID: 1944)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00014811802248004824
    2. 'result' → logprob: -9.500147819519043
    3. '   ' → logprob: -10.375147819519043
    4. ' print' → logprob: -10.500147819519043
    5. 'cost' → logprob: -11.625147819519043
    6. '    
' → logprob: -13.000147819519043
    7. '
' → logprob: -13.500147819519043
    8. '```' → logprob: -14.000147819519043
    9. 'calculate' → logprob: -15.375147819519043
    10. 'pr' → logprob: -15.875147819519043

Token 222: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.005333251319825649
    2. 'result' → logprob: -5.255333423614502
    3. 'cost' → logprob: -9.380332946777344
    4. ' print' → logprob: -11.505332946777344
    5. '   ' → logprob: -12.880332946777344
    6. '#' → logprob: -14.630332946777344
    7. 'cout' → logprob: -15.005332946777344
    8. 'price' → logprob: -15.130332946777344
    9. 'minimum' → logprob: -15.255332946777344
    10. 'total' → logprob: -15.505332946777344

Token 223: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.052898090332746506
    2. 'cost' → logprob: -3.5528981685638428
    3. 'result' → logprob: -3.8028981685638428
    4. 'minimum' → logprob: -7.677897930145264
    5. 'min' → logprob: -9.552898406982422
    6. ' print' → logprob: -11.052898406982422
    7. '#' (adapté à ' #') → logprob: -11.677898406982422
    8. 'cout' → logprob: -11.927898406982422
    9. 'total' → logprob: -12.802898406982422
    10. ' cost' → logprob: -12.927898406982422

Token 224: ' Calcul' (ID: 57243)
  Prédit: 'cost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'cost' → logprob: -0.3280825912952423
    2. 'result' → logprob: -1.95308256149292
    3. 'print' → logprob: -2.20308256149292
    4. ' cost' → logprob: -3.82808256149292
    5. ' result' → logprob: -5.95308256149292
    6. ' print' → logprob: -6.57808256149292
    7. 'co' → logprob: -6.95308256149292
    8. 'cout' → logprob: -8.078083038330078
    9. 'minimum' → logprob: -9.203083038330078
    10. ' coût' → logprob: -9.453083038330078

Token 225: ' du' (ID: 1462)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.4549177587032318
    2. '_' → logprob: -1.8299177885055542
    3. '   ' → logprob: -2.9549176692962646
    4. 'cost' → logprob: -3.5799176692962646
    5. '_min' → logprob: -3.7049176692962646
    6. '_result' → logprob: -3.9549176692962646
    7. '(' → logprob: -4.079917907714844
    8. 'min' → logprob: -4.454917907714844
    9. '_cost' → logprob: -4.454917907714844
    10. 'print' → logprob: -4.579917907714844

Token 226: ' coût' (ID: 73109)
  Prédit: 'minimum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'minimum' → logprob: -0.1782100349664688
    2. 'cost' → logprob: -1.9282100200653076
    3. 'result' → logprob: -4.428210258483887
    4. 'co' → logprob: -6.053210258483887
    5. ' minimum' → logprob: -6.303210258483887
    6. 'min' → logprob: -7.428210258483887
    7. ' cost' → logprob: -7.678210258483887
    8. 'print' → logprob: -8.053210258483887
    9. 'cout' → logprob: -8.803210258483887
    10. 'total' → logprob: -9.428210258483887

Token 227: ' minimum' (ID: 11085)
  Prédit: 'minimum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'minimum' → logprob: -0.09930664300918579
    2. 'min' → logprob: -2.724306583404541
    3. '_' → logprob: -4.474306583404541
    4. ' minimum' → logprob: -4.599306583404541
    5. '_min' → logprob: -5.224306583404541
    6. 'minimal' → logprob: -7.224306583404541
    7. 'total' → logprob: -8.2243070602417
    8. 'cost' → logprob: -8.4743070602417
    9. 'result' → logprob: -8.4743070602417
    10. '   ' → logprob: -8.7243070602417

Token 228: ' avec' (ID: 3937)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.7468693852424622
    2. 'cost' → logprob: -0.7468693852424622
    3. 'result' → logprob: -2.9968693256378174
    4. '   ' → logprob: -7.4968695640563965
    5. '(cost' → logprob: -8.121869087219238
    6. 'min' → logprob: -8.246869087219238
    7. ')' → logprob: -8.371869087219238
    8. 'minimum' → logprob: -8.496869087219238
    9. 'co' → logprob: -8.746869087219238
    10. ' cost' → logprob: -8.746869087219238

Token 229: ' les' (ID: 1341)
  Prédit: 'calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'calculate' → logprob: -0.0033855263609439135
    2. 'print' → logprob: -6.003385543823242
    3. ' calculate' → logprob: -7.003385543823242
    4. ' print' → logprob: -15.003385543823242
    5. 'alculate' → logprob: -15.753385543823242
    6. '.calculate' → logprob: -17.503385543823242
    7. 'calcul' → logprob: -17.878385543823242
    8. 'c' → logprob: -18.878385543823242
    9. 'compute' → logprob: -19.003385543823242
    10. 'Calculate' → logprob: -19.128385543823242

Token 230: ' valeurs' (ID: 73668)
  Prédit: 'calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'calculate' → logprob: -0.00592085812240839
    2. 'minimum' → logprob: -5.755920886993408
    3. 'N' → logprob: -6.880920886993408
    4. '=' → logprob: -7.630920886993408
    5. ' calculate' → logprob: -8.25592041015625
    6. 'min' → logprob: -8.25592041015625
    7. 'calcul' → logprob: -9.13092041015625
    8. '#' → logprob: -9.25592041015625
    9. 'alculate' → logprob: -9.38092041015625
    10. 'result' → logprob: -9.63092041015625

Token 231: ' fourn' (ID: 101975)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.8179535269737244
    2. '   ' → logprob: -1.0679535865783691
    3. 'result' → logprob: -2.067953586578369
    4. 'min' → logprob: -2.817953586578369
    5. '=' → logprob: -4.692953586578369
    6. 'minimum' → logprob: -5.567953586578369
    7. '(N' → logprob: -5.942953586578369
    8. ' print' → logprob: -6.192953586578369
    9. 'cost' → logprob: -6.192953586578369
    10. ' =' → logprob: -6.192953586578369

Token 232: 'ies' (ID: 566)
  Prédit: 'ies'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ies' → logprob: -0.005924766417592764
    2. 'es' → logprob: -5.255924701690674
    3. 'ées' → logprob: -7.380924701690674
    4. 'ues' → logprob: -10.380925178527832
    5. '   ' → logprob: -10.755925178527832
    6. '```' → logprob: -11.880925178527832
    7. 'ites' → logprob: -13.130925178527832
    8. 'tes' → logprob: -13.880925178527832
    9. 'is' → logprob: -13.880925178527832
    10. 'nées' → logprob: -14.005925178527832

Token 233: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.07178182154893875
    2. 'cost' → logprob: -3.446781873703003
    3. '   ' → logprob: -3.821781873703003
    4. 'result' → logprob: -4.196781635284424
    5. ' print' → logprob: -8.321782112121582
    6. ' cost' → logprob: -9.821782112121582
    7. ')' → logprob: -9.946782112121582
    8. '```' → logprob: -10.571782112121582
    9. '(cost' → logprob: -10.821782112121582
    10. '    
' → logprob: -11.071782112121582

Token 234: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.03596951439976692
    2. ' print' → logprob: -3.9109694957733154
    3. 'result' → logprob: -4.9109697341918945
    4. 'cost' → logprob: -5.2859697341918945
    5. '   ' → logprob: -6.0359697341918945
    6. ' cost' → logprob: -7.9109697341918945
    7. ' result' → logprob: -9.535969734191895
    8. 'minimum' → logprob: -10.910969734191895
    9. '```' → logprob: -11.160969734191895
    10. '
' → logprob: -12.785969734191895

Token 235: ' result' (ID: 1534)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.10289065539836884
    2. 'cost' → logprob: -2.852890729904175
    3. 'result' (adapté à ' result') → logprob: -3.352890729904175
    4. 'minimum' → logprob: -5.602890491485596
    5. ' print' → logprob: -7.227890491485596
    6. 'min' → logprob: -7.977890491485596
    7. ' cost' → logprob: -8.227890968322754
    8. ' result' → logprob: -9.977890968322754
    9. ' minimum' → logprob: -10.852890968322754
    10. 'cout' → logprob: -11.227890968322754

Token 236: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.04301517829298973
    2. '=' → logprob: -3.168015241622925
    3. ')' → logprob: -11.293015480041504
    4. ' ' → logprob: -13.668015480041504
    5. '_' → logprob: -14.043015480041504
    6. ',' → logprob: -14.918015480041504
    7. ' =
' → logprob: -15.293015480041504
    8. '  ' → logprob: -15.418015480041504
    9. ' =)' → logprob: -15.918015480041504
    10. '.' → logprob: -16.418014526367188

Token 237: ' calculate' (ID: 17950)
  Prédit: 'calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'calculate' → logprob: -0.03804149478673935
    2. ' calculate' → logprob: -3.288041591644287
    3. '.calculate' → logprob: -18.288042068481445
    4. 'alculate' → logprob: -19.038042068481445
    5. 'cal' → logprob: -20.163042068481445
    6. 'calcul' → logprob: -20.163042068481445
    7. 'calc' → logprob: -20.288042068481445
    8. 'compute' → logprob: -20.413042068481445
    9. 'c' → logprob: -20.538042068481445
    10. 'Calculate' → logprob: -21.288042068481445

Token 238: '_min' (ID: 15950)
  Prédit: '_min'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_min' → logprob: -4.320199877838604e-07
    2. '_' → logprob: -15.375
    3. 'minimum' → logprob: -15.75
    4. ' minimum' → logprob: -17.875
    5. '_max' → logprob: -18.125
    6. '_MIN' → logprob: -19.125
    7. 'min' → logprob: -19.25
    8. '_cost' → logprob: -19.5
    9. '_low' → logprob: -19.625
    10. '_m' → logprob: -19.875

Token 239: 'imum' (ID: 4556)
  Prédit: 'imum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'imum' → logprob: -0.02093036286532879
    2. 'um' → logprob: -3.895930290222168
    3. 'ium' → logprob: -8.395930290222168
    4. '_' → logprob: -9.645930290222168
    5. '__' → logprob: -10.770930290222168
    6. 'im' → logprob: -10.770930290222168
    7. 'inum' → logprob: -11.520930290222168
    8. '```' → logprob: -11.895930290222168
    9. 'ume' → logprob: -12.020930290222168
    10. 'umber' → logprob: -12.270930290222168

Token 240: '_cost' (ID: 36820)
  Prédit: '_cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cost' → logprob: -7.255023956531659e-05
    2. '_min' → logprob: -9.750072479248047
    3. '_' → logprob: -11.375072479248047
    4. ' _' → logprob: -13.375072479248047
    5. '_co' → logprob: -14.750072479248047
    6. 'cost' → logprob: -16.000072479248047
    7. '```' → logprob: -16.000072479248047
    8. '_code' → logprob: -16.500072479248047
    9. '_max' → logprob: -16.625072479248047
    10. '_price' → logprob: -16.750072479248047

Token 241: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.0007174347410909832
    2. '(' → logprob: -7.250717639923096
    3. ' (' → logprob: -11.875717163085938
    4. '(
' → logprob: -14.750717163085938
    5. '```' → logprob: -16.250717163085938
    6. '(n' → logprob: -16.875717163085938
    7. ' ' → logprob: -17.125717163085938
    8. '((' → logprob: -18.250717163085938
    9. '(I' → logprob: -18.375717163085938
    10. '   ' → logprob: -18.750717163085938

Token 242: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.259079363080673e-05
    2. ' ,' → logprob: -11.750012397766113
    3. ',A' → logprob: -12.375012397766113
    4. 'A' → logprob: -15.125012397766113
    5. ')' → logprob: -17.12501335144043
    6. '‌,' → logprob: -18.00001335144043
    7. ',
' → logprob: -18.25001335144043
    8. ',N' → logprob: -18.37501335144043
    9. ' ' → logprob: -19.25001335144043
    10. ',B' → logprob: -19.62501335144043

Token 243: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.25192928314208984
    2. ' A' → logprob: -1.5019292831420898
    3. ' ' → logprob: -16.126930236816406
    4. '	A' → logprob: -17.876930236816406
    5. ',A' → logprob: -18.626930236816406
    6. '   ' → logprob: -18.876930236816406
    7. ' ' → logprob: -19.626930236816406
    8. '  ' → logprob: -19.751930236816406
    9. ')' → logprob: -20.126930236816406
    10. 'a' → logprob: -20.501930236816406

Token 244: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.652451464906335e-05
    2. ',B' → logprob: -11.375016212463379
    3. ' ,' → logprob: -12.250016212463379
    4. ')' → logprob: -16.625017166137695
    5. ',
' → logprob: -18.000017166137695
    6. 'B' → logprob: -18.250017166137695
    7. ',b' → logprob: -18.375017166137695
    8. '‌,' → logprob: -18.625017166137695
    9. ',

' → logprob: -19.500017166137695
    10. '```' → logprob: -19.625017166137695

Token 245: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.31326258182525635
    2. 'B' → logprob: -1.3132625818252563
    3. ' ' → logprob: -14.313262939453125
    4. ')' → logprob: -15.813262939453125
    5. '	B' → logprob: -17.313262939453125
    6. ' ' → logprob: -17.313262939453125
    7. ' )' → logprob: -17.938262939453125
    8. '_B' → logprob: -19.188262939453125
    9. '    ' → logprob: -19.313262939453125
    10. 'b' → logprob: -19.438262939453125

Token 246: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.165027217415627e-05
    2. ')
' → logprob: -10.750021934509277
    3. ' )' → logprob: -15.750021934509277
    4. ')

' → logprob: -17.12502098083496
    5. ')
' → logprob: -18.00002098083496
    6. ')`' → logprob: -18.62502098083496
    7. '))' → logprob: -18.87502098083496
    8. '),' → logprob: -19.12502098083496
    9. ')#' → logprob: -20.25002098083496
    10. ')**' → logprob: -21.12502098083496

Token 247: '    
' (ID: 1944)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.005410434678196907
    2. '   ' → logprob: -5.255410671234131
    3. '
' → logprob: -9.130410194396973
    4. '    
' → logprob: -10.130410194396973
    5. ' print' → logprob: -10.505410194396973
    6. '```' → logprob: -15.130410194396973
    7. '  
' → logprob: -15.505410194396973
    8. '	print' → logprob: -15.505410194396973
    9. '
' → logprob: -15.630410194396973
    10. ' 
' → logprob: -17.00541114807129

Token 248: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.008618239313364029
    2. '   ' → logprob: -4.758618354797363
    3. ' print' → logprob: -12.508618354797363
    4. '	print' → logprob: -18.758617401123047
    5. '```' → logprob: -18.758617401123047
    6. '    
' → logprob: -18.883617401123047
    7. 'pr' → logprob: -20.008617401123047
    8. 'printf' → logprob: -20.008617401123047
    9. '#print' → logprob: -20.508617401123047
    10. '.print' → logprob: -21.258617401123047

Token 249: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: 0.0
    2. ' print' → logprob: -18.5
    3. 'pr' → logprob: -21.0
    4. 'prin' → logprob: -22.25
    5. '   ' → logprob: -22.625
    6. '
' → logprob: -24.0
    7. 'printf' → logprob: -24.0
    8. '#print' → logprob: -24.5
    9. '```' → logprob: -25.0
    10. '    
' → logprob: -25.5

Token 250: ' Aff' (ID: 13741)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.9361264946837764e-07
    2. ' print' → logprob: -16.625
    3. 'pr' → logprob: -19.625
    4. 'prin' → logprob: -20.5
    5. 'Print' → logprob: -22.0
    6. '#print' → logprob: -22.5
    7. '#' → logprob: -22.75
    8. 'prit' → logprob: -23.125
    9. '```' → logprob: -23.125
    10. 'printf' → logprob: -23.375

Token 251: 'ichage' (ID: 118475)
  Prédit: 'icher'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'icher' → logprob: -0.06912020593881607
    2. '   ' → logprob: -3.444120168685913
    3. 'ichage' → logprob: -3.819120168685913
    4. 'iche' → logprob: -4.444120407104492
    5. 'ich' → logprob: -7.319120407104492
    6. '#' → logprob: -8.319120407104492
    7. 'ic' → logprob: -9.194120407104492
    8. 'print' → logprob: -9.944120407104492
    9. '  ' → logprob: -10.444120407104492
    10. '    ' → logprob: -10.569120407104492

Token 252: ' du' (ID: 1462)
  Prédit: '(result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.048805028200149536
    2. '(' → logprob: -3.048804998397827
    3. 'result' → logprob: -8.673805236816406
    4. '(f' → logprob: -10.173805236816406
    5. '(res' → logprob: -13.298805236816406
    6. '()' → logprob: -13.673805236816406
    7. ' (' → logprob: -13.923805236816406
    8. '(
' → logprob: -14.048805236816406
    9. '(resultado' → logprob: -14.298805236816406
    10. '(results' → logprob: -14.548805236816406

Token 253: ' résultat' (ID: 62556)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -1.0206720617134124e-05
    2. '(result' → logprob: -11.75001049041748
    3. ' result' → logprob: -13.00001049041748
    4. 'res' → logprob: -20.875009536743164
    5. 'resultado' → logprob: -20.875009536743164
    6. ' résultat' → logprob: -21.250009536743164
    7. ' resultat' → logprob: -21.625009536743164
    8. '	result' → logprob: -22.250009536743164
    9. 'rés' → logprob: -22.500009536743164
    10. 'results' → logprob: -22.625009536743164

Token 254: ' final' (ID: 1721)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.002779200905933976
    2. '(' → logprob: -7.002779006958008
    3. 'result' → logprob: -7.377779006958008
    4. '   ' → logprob: -7.752779006958008
    5. ' print' → logprob: -7.877779006958008
    6. '(print' → logprob: -8.377779006958008
    7. '()' → logprob: -9.252779006958008
    8. '(result' → logprob: -9.377779006958008
    9. '()
' → logprob: -12.252779006958008
    10. '(
' → logprob: -12.502779006958008

Token 255: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.011409467086195946
    2. '   ' → logprob: -4.886409282684326
    3. 'result' → logprob: -6.636409282684326
    4. ' print' → logprob: -6.636409282684326
    5. '(result' → logprob: -7.636409282684326
    6. '(print' → logprob: -8.261409759521484
    7. '
' → logprob: -8.511409759521484
    8. '(' → logprob: -8.761409759521484
    9. '()' → logprob: -10.636409759521484
    10. '()
' → logprob: -11.386409759521484

Token 256: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -8.061054359131958e-06
    2. ' print' → logprob: -11.750007629394531
    3. '   ' → logprob: -15.625007629394531
    4. '```' → logprob: -19.37500762939453
    5. 'pr' → logprob: -21.00000762939453
    6. '(print' → logprob: -21.62500762939453
    7. 'result' → logprob: -21.87500762939453
    8. '.print' → logprob: -22.50000762939453
    9. 'prin' → logprob: -23.50000762939453
    10. '`' → logprob: -23.75000762939453

Token 257: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -1.1472419600977446e-06
    2. ' print' → logprob: -13.750000953674316
    3. 'pr' → logprob: -19.125001907348633
    4. 'prin' → logprob: -22.250001907348633
    5. '```' → logprob: -22.500001907348633
    6. 'pri' → logprob: -23.250001907348633
    7. 'prit' → logprob: -23.750001907348633
    8. 'printf' → logprob: -24.000001907348633
    9. '   ' → logprob: -25.750001907348633
    10. 'p' → logprob: -26.000001907348633

Token 258: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6931516528129578
    2. '(result' → logprob: -0.6931516528129578
    3. '(res' → logprob: -13.693151473999023
    4. '()' → logprob: -13.943151473999023
    5. '(
' → logprob: -14.443151473999023
    6. ' (' → logprob: -14.568151473999023
    7. '(

' → logprob: -15.068151473999023
    8. '(resultado' → logprob: -15.068151473999023
    9. '(results' → logprob: -15.193151473999023
    10. 'result' → logprob: -15.318151473999023

Token 259: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9361264946837764e-07
    2. ' )' → logprob: -17.0
    3. '()' → logprob: -17.5
    4. ')`' → logprob: -17.5
    5. ')
' → logprob: -18.0
    6. '))' → logprob: -18.125
    7. '())' → logprob: -19.25
    8. '`)' → logprob: -20.375
    9. '')' → logprob: -20.625
    10. ')}' → logprob: -21.125


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 257
Tokens correctement prédits (1ère position, stricte): 101
Tokens correctement prédits (1ère position, avec adaptation): 105
Tokens correctement prédits (top 10): 190
Précision stricte (1ère position): 39.30%
Précision adaptée (1ère position): 40.86%
Précision (top 10): 73.93%
================================================================================
