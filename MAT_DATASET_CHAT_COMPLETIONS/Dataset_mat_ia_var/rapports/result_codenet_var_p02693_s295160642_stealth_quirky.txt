================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:16:07
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
K = eval(input())
A, B = [*map(int, input().split())]

def rng(x, y): return list(range(x, y+1))
chk = False

for ii in rng(A, B):
    if not ii % K:
        print("OK")
        chk = True
        break
if not chk:
    print("NG")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'K' (ID: 42)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' eval' (ID: 29383)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00040123690268956125
    2. '('' → logprob: -9.000401496887207
    3. '("("' → logprob: -9.000401496887207
    4. ''' → logprob: -9.250401496887207
    5. 'K' → logprob: -11.625401496887207
    6. '"' → logprob: -11.750401496887207
    7. '(
' → logprob: -12.000401496887207
    8. '(K' → logprob: -12.125401496887207
    9. '(open' → logprob: -12.375401496887207
    10. '`' → logprob: -12.500401496887207

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014025403186678886
    2. ')' → logprob: -4.8890252113342285
    3. '("("' → logprob: -5.6390252113342285
    4. '('' → logprob: -6.3890252113342285
    5. '()' → logprob: -7.5140252113342285
    6. '(
' → logprob: -8.514025688171387
    7. '(""))' → logprob: -9.889025688171387
    8. '())' → logprob: -10.014025688171387
    9. '(

' → logprob: -10.014025688171387
    10. '")' → logprob: -10.264025688171387

Token 5: 'A' (ID: 32)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '*' → logprob: -0.699787437915802
    2. '+' → logprob: -0.699787437915802
    3. '#' → logprob: -6.574787616729736
    4. '%' → logprob: -6.824787616729736
    5. '**' → logprob: -7.074787616729736
    6. '[' → logprob: -7.324787616729736
    7. '(' → logprob: -8.199787139892578
    8. '\' → logprob: -8.199787139892578
    9. 'for' → logprob: -8.199787139892578
    10. '+
' → logprob: -8.199787139892578

Token 6: ',' (ID: 11)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.26354551315307617
    2. '=' → logprob: -2.263545513153076
    3. ' =' → logprob: -2.513545513153076
    4. '.' → logprob: -3.388545513153076
    5. '+' → logprob: -5.888545513153076
    6. '[i' → logprob: -6.388545513153076
    7. ')' → logprob: -6.513545513153076
    8. '[int' → logprob: -6.763545513153076
    9. '.append' → logprob: -6.888545513153076
    10. ',' → logprob: -7.013545513153076

Token 7: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.16543561220169067
    2. ' B' → logprob: -1.915435552597046
    3. 'input' → logprob: -6.665435791015625
    4. ' =' → logprob: -6.790435791015625
    5. 'K' → logprob: -7.165435791015625
    6. '=' → logprob: -7.415435791015625
    7. ' input' → logprob: -8.040435791015625
    8. ' ' → logprob: -8.165435791015625
    9. 'eval' → logprob: -9.040435791015625
    10. 'map' → logprob: -9.290435791015625

Token 8: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.08899018168449402
    2. ' =' → logprob: -2.4639902114868164
    3. ',' → logprob: -10.213990211486816
    4. '=input' → logprob: -11.838990211486816
    5. ' ' → logprob: -13.213990211486816
    6. ')' → logprob: -13.338990211486816
    7. '[' → logprob: -14.088990211486816
    8. '```' → logprob: -14.088990211486816
    9. '=
' → logprob: -15.401490211486816
    10. 'input' → logprob: -15.463990211486816

Token 9: ' [' (ID: 723)
  Prédit: ' map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' map' → logprob: -1.0578930377960205
    2. 'map' → logprob: -1.3078930377960205
    3. 'input' → logprob: -2.0578930377960205
    4. ' input' → logprob: -2.5578930377960205
    5. ' K' → logprob: -2.6828930377960205
    6. 'eval' → logprob: -2.9328930377960205
    7. ' eval' → logprob: -3.5578930377960205
    8. 'K' → logprob: -3.6828930377960205
    9. 'list' → logprob: -7.432892799377441
    10. ' list' → logprob: -8.182892799377441

Token 10: '*' (ID: 9)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.02753756009042263
    2. 'eval' → logprob: -3.6525375843048096
    3. ' int' → logprob: -6.9025373458862305
    4. ' eval' → logprob: -8.90253734588623
    5. 'input' → logprob: -10.65253734588623
    6. 'map' → logprob: -10.90253734588623
    7. 'K' → logprob: -10.90253734588623
    8. ']' → logprob: -11.90253734588623
    9. 'list' → logprob: -11.90253734588623
    10. '0' → logprob: -11.90253734588623

Token 11: 'map' (ID: 3726)
  Prédit: 'map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.07967749983072281
    2. 'range' → logprob: -2.5796775817871094
    3. 'input' → logprob: -7.454677581787109
    4. ' map' → logprob: -8.82967758178711
    5. '(map' → logprob: -10.32967758178711
    6. ' range' → logprob: -10.70467758178711
    7. '(range' → logprob: -12.95467758178711
    8. 'eval' → logprob: -13.20467758178711
    9. 'iter' → logprob: -13.82967758178711
    10. 'K' → logprob: -14.45467758178711

Token 12: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0006669254507869482
    2. '(' → logprob: -7.500667095184326
    3. '(eval' → logprob: -9.875666618347168
    4. '(str' → logprob: -10.750666618347168
    5. 'int' → logprob: -10.750666618347168
    6. '(input' → logprob: -11.625666618347168
    7. ']int' → logprob: -13.125666618347168
    8. '<int' → logprob: -13.125666618347168
    9. '```' → logprob: -13.250666618347168
    10. '[int' → logprob: -13.875666618347168

Token 13: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.24262747168540955
    2. ',input' → logprob: -1.617627501487732
    3. ',' → logprob: -4.4926276206970215
    4. 'input' → logprob: -5.8676276206970215
    5. '(' → logprob: -5.8676276206970215
    6. ')' → logprob: -9.867627143859863
    7. ' input' → logprob: -10.117627143859863
    8. '(eval' → logprob: -10.492627143859863
    9. ' ,' → logprob: -11.117627143859863
    10. ' (' → logprob: -11.117627143859863

Token 14: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.5759636759757996
    2. 'input' → logprob: -0.8259636759757996
    3. '(input' → logprob: -10.950963973999023
    4. ',input' → logprob: -13.200963973999023
    5. '=input' → logprob: -13.575963973999023
    6. '_input' → logprob: -13.825963973999023
    7. ')' → logprob: -14.075963973999023
    8. '	input' → logprob: -14.325963973999023
    9. '<input' → logprob: -15.075963973999023
    10. ' ' → logprob: -15.325963973999023

Token 15: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0034653563052415848
    2. '())' → logprob: -5.878465175628662
    3. '()' → logprob: -7.378465175628662
    4. '()))' → logprob: -10.50346565246582
    5. '()]' → logprob: -13.00346565246582
    6. ')' → logprob: -13.12846565246582
    7. '()
' → logprob: -14.25346565246582
    8. '());' → logprob: -14.50346565246582
    9. '(' → logprob: -14.87846565246582
    10. '()),' → logprob: -15.25346565246582

Token 16: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00010688089241739362
    2. 'strip' → logprob: -9.250106811523438
    3. 'rstrip' → logprob: -11.875106811523438
    4. ' split' → logprob: -12.750106811523438
    5. '(split' → logprob: -14.375106811523438
    6. 'spl' → logprob: -15.375106811523438
    7. ')' → logprob: -16.500106811523438
    8. 'read' → logprob: -17.625106811523438
    9. ' ' → logprob: -18.000106811523438
    10. 's' → logprob: -18.125106811523438

Token 17: '())' (ID: 3516)
  Prédit: '())'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0032979664392769337
    2. '()' → logprob: -6.753297805786133
    3. '()))' → logprob: -7.128297805786133
    4. '()]' → logprob: -7.253297805786133
    5. ')]' → logprob: -8.003297805786133
    6. ')])' → logprob: -9.128297805786133
    7. '('' → logprob: -9.878297805786133
    8. ')' → logprob: -9.878297805786133
    9. '(' → logprob: -10.003297805786133
    10. ' ())' → logprob: -11.878297805786133

Token 18: ']

' (ID: 3144)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.0005408813012763858
    2. ')' → logprob: -7.625540733337402
    3. ']' → logprob: -10.750540733337402
    4. ')])' → logprob: -11.375540733337402
    5. '()]' → logprob: -12.125540733337402
    6. ')],' → logprob: -12.875540733337402
    7. '')]' → logprob: -13.000540733337402
    8. '())' → logprob: -13.125540733337402
    9. '])]' → logprob: -13.125540733337402
    10. ')]
' → logprob: -13.250540733337402

Token 19: 'def' (ID: 1314)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.13122344017028809
    2. '+' → logprob: -3.631223440170288
    3. 'for' → logprob: -3.881223440170288
    4. 'i' → logprob: -4.006223678588867
    5. '*' → logprob: -4.131223678588867
    6. ')' → logprob: -5.006223678588867
    7. '[' → logprob: -5.006223678588867
    8. ' if' → logprob: -5.131223678588867
    9. '#' → logprob: -5.631223678588867
    10. 'print' → logprob: -6.006223678588867

Token 20: ' rng' (ID: 76666)
  Prédit: ' f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' f' → logprob: -1.4335689544677734
    2. ' solve' → logprob: -1.4335689544677734
    3. ' solution' → logprob: -1.6835689544677734
    4. ' factorial' → logprob: -1.9335689544677734
    5. ' calculate' → logprob: -2.8085689544677734
    6. ' space' → logprob: -3.8085689544677734
    7. ' main' → logprob: -3.9335689544677734
    8. ' factor' → logprob: -4.183568954467773
    9. ' max' → logprob: -4.433568954467773
    10. ' add' → logprob: -5.058568954467773

Token 21: '(x' (ID: 4061)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006494381930679083
    2. '(range' → logprob: -5.881494522094727
    3. '(a' → logprob: -6.756494522094727
    4. '_' → logprob: -7.006494522094727
    5. '(x' → logprob: -7.881494522094727
    6. '_range' → logprob: -8.131494522094727
    7. '(start' → logprob: -8.756494522094727
    8. ' (' → logprob: -8.881494522094727
    9. '(n' → logprob: -9.256494522094727
    10. '_(' → logprob: -9.256494522094727

Token 22: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.14385904371738434
    2. ',' → logprob: -2.1438591480255127
    3. ')' → logprob: -4.143858909606934
    4. ':' → logprob: -8.268858909606934
    5. '=' → logprob: -8.393858909606934
    6. ' ):' → logprob: -9.268858909606934
    7. '):
' → logprob: -9.518858909606934
    8. '*' → logprob: -10.268858909606934
    9. '**' → logprob: -10.268858909606934
    10. ' ,' → logprob: -10.393858909606934

Token 23: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.09088464081287384
    2. ' y' → logprob: -2.5908846855163574
    3. 'n' → logprob: -4.965884685516357
    4. 'K' → logprob: -6.965884685516357
    5. ' n' → logprob: -6.965884685516357
    6. 'N' → logprob: -7.590884685516357
    7. 'k' → logprob: -7.840884685516357
    8. ' K' → logprob: -8.0908842086792
    9. 'm' → logprob: -8.4658842086792
    10. 'l' → logprob: -8.7158842086792

Token 24: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.01463316474109888
    2. ')' → logprob: -4.3896331787109375
    3. ',' → logprob: -6.2646331787109375
    4. '=' → logprob: -9.139633178710938
    5. ' ):' → logprob: -10.139633178710938
    6. ':' → logprob: -11.264633178710938
    7. '):
' → logprob: -11.889633178710938
    8. ')):' → logprob: -11.889633178710938
    9. '**' → logprob: -12.139633178710938
    10. ' ' → logprob: -12.139633178710938

Token 25: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1776028722524643
    2. ' return' → logprob: -3.052602767944336
    3. '	return' → logprob: -3.177602767944336
    4. ':' → logprob: -3.552602767944336
    5. '<|end|>' → logprob: -3.927602767944336
    6. ':return' → logprob: -4.302602767944336
    7. ' ' → logprob: -5.552602767944336
    8. '
' → logprob: -5.927602767944336
    9. ':
' → logprob: -7.052602767944336
    10. 'return' → logprob: -7.177602767944336

Token 26: ' list' (ID: 1562)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.340135782957077
    2. ' range' → logprob: -1.4651358127593994
    3. 'x' → logprob: -3.3401358127593994
    4. ' x' → logprob: -4.84013557434082
    5. 'list' → logprob: -5.84013557434082
    6. ' list' → logprob: -5.96513557434082
    7. '(range' → logprob: -6.71513557434082
    8. '[x' → logprob: -7.09013557434082
    9. 'max' → logprob: -7.34013557434082
    10. '(x' → logprob: -7.34013557434082

Token 27: '(range' (ID: 50017)
  Prédit: '(range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(range' → logprob: -0.25200968980789185
    2. '(' → logprob: -1.502009630203247
    3. 'range' → logprob: -10.627009391784668
    4. '(
' → logprob: -10.877009391784668
    5. '(x' → logprob: -11.252009391784668
    6. '(filter' → logprob: -11.877009391784668
    7. '(r' → logprob: -12.252009391784668
    8. '[' → logprob: -12.752009391784668
    9. '((' → logprob: -12.877009391784668
    10. '(`' → logprob: -13.127009391784668

Token 28: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.02057190239429474
    2. '(' → logprob: -3.8955719470977783
    3. '(y' → logprob: -11.5205717086792
    4. '(
' → logprob: -11.5205717086792
    5. ')' → logprob: -12.1455717086792
    6. ')(' → logprob: -13.3955717086792
    7. 'x' → logprob: -13.3955717086792
    8. '((' → logprob: -14.6455717086792
    9. ' (' → logprob: -14.7705717086792
    10. '(min' → logprob: -15.0205717086792

Token 29: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.012579113245010376
    2. ',y' → logprob: -4.512578964233398
    3. ' ,' → logprob: -6.512578964233398
    4. 'y' → logprob: -10.512578964233398
    5. ' ' → logprob: -12.387578964233398
    6. ',
' → logprob: -12.762578964233398
    7. '+' → logprob: -13.012578964233398
    8. '   ' → logprob: -13.012578964233398
    9. ' y' → logprob: -13.512578964233398
    10. '1' → logprob: -14.512578964233398

Token 30: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.08897218108177185
    2. ' y' → logprob: -2.4639720916748047
    3. '	y' → logprob: -11.463972091674805
    4. '(y' → logprob: -12.463972091674805
    5. '   ' → logprob: -12.463972091674805
    6. '1' → logprob: -12.713972091674805
    7. ' ' → logprob: -12.838972091674805
    8. ',y' → logprob: -13.338972091674805
    9. '    ' → logprob: -13.463972091674805
    10. ',' → logprob: -13.588972091674805

Token 31: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.056105997413396835
    2. '))' → logprob: -3.0561060905456543
    3. ')' → logprob: -5.431106090545654
    4. ' +' → logprob: -5.806106090545654
    5. ',' → logprob: -10.181105613708496
    6. ')+' → logprob: -11.056105613708496
    7. ')))' → logprob: -11.056105613708496
    8. '+)' → logprob: -11.431105613708496
    9. '))+' → logprob: -11.931105613708496
    10. '1' → logprob: -12.181105613708496

Token 32: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00043805985478684306
    2. ' ' → logprob: -7.750438213348389
    3. '))' → logprob: -12.50043773651123
    4. ')' → logprob: -12.75043773651123
    5. '2' → logprob: -15.37543773651123
    6. '0' → logprob: -15.75043773651123
    7. '```' → logprob: -16.250438690185547
    8. ')))' → logprob: -17.250438690185547
    9. ',' → logprob: -17.500438690185547
    10. '  ' → logprob: -17.500438690185547

Token 33: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.005270515102893114
    2. ')' → logprob: -5.255270481109619
    3. ')))' → logprob: -10.255270957946777
    4. ' ))' → logprob: -14.505270957946777
    5. '))
' → logprob: -15.005270957946777
    6. '),' → logprob: -15.755270957946777
    7. ' ' → logprob: -16.00527000427246
    8. '()))' → logprob: -16.88027000427246
    9. ')):' → logprob: -17.00527000427246
    10. ')}' → logprob: -17.38027000427246

Token 34: 'chk' (ID: 63607)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.16048863530158997
    2. '(
' → logprob: -2.1604886054992676
    3. '(K' → logprob: -5.035488605499268
    4. '[' → logprob: -5.285488605499268
    5. '*' → logprob: -5.535488605499268
    6. '[
' → logprob: -6.035488605499268
    7. '(A' → logprob: -6.160488605499268
    8. '`' → logprob: -6.410488605499268
    9. '(B' → logprob: -6.910488605499268
    10. '```' → logprob: -6.910488605499268

Token 35: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.9402545690536499
    2. '_' → logprob: -1.19025456905365
    3. '=' → logprob: -1.31525456905365
    4. ' =' → logprob: -3.8152546882629395
    5. 's' → logprob: -5.3152546882629395
    6. ')' → logprob: -6.3152546882629395
    7. '[' → logprob: -6.5652546882629395
    8. '=(' → logprob: -7.6902546882629395
    9. ' ' → logprob: -7.8152546882629395
    10. 'K' → logprob: -7.8152546882629395

Token 36: ' False' (ID: 7983)
  Prédit: ' rng'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' rng' → logprob: -0.7132576704025269
    2. ' []' → logprob: -1.9632576704025269
    3. ' [' → logprob: -2.0882577896118164
    4. 'rng' → logprob: -2.7132577896118164
    5. '[]' → logprob: -2.8382577896118164
    6. '[' → logprob: -3.9632577896118164
    7. ' set' → logprob: -4.338257789611816
    8. '[r' → logprob: -4.338257789611816
    9. ' K' → logprob: -4.463257789611816
    10. 'set' → logprob: -4.588257789611816

Token 37: '

' (ID: 279)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.8977819085121155
    2. '<|end|>' → logprob: -1.3977818489074707
    3. '
' → logprob: -1.6477818489074707
    4. ' for' → logprob: -2.3977818489074707
    5. 'if' → logprob: -3.6477818489074707
    6. '\n' → logprob: -4.022781848907471
    7. '' → logprob: -5.647781848907471
    8. ' if' → logprob: -5.772781848907471
    9. ' 
' → logprob: -6.022781848907471
    10. ' ' → logprob: -6.147781848907471

Token 38: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.05076051130890846
    2. '
' → logprob: -3.800760507583618
    3. ':' → logprob: -4.550760746002197
    4. ' for' → logprob: -4.675760746002197
    5. '\n' → logprob: -5.800760746002197
    6. 'if' → logprob: -6.175760746002197
    7. ':
' → logprob: -6.800760746002197
    8. ' 
' → logprob: -7.925760746002197
    9. '```' → logprob: -8.050760269165039
    10. '' → logprob: -9.425760269165039

Token 39: ' ii' (ID: 28354)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.743095338344574
    2. ' a' → logprob: -1.1180953979492188
    3. ' A' → logprob: -2.8680953979492188
    4. ' _' → logprob: -3.2430953979492188
    5. ' x' → logprob: -3.7430953979492188
    6. ' ' → logprob: -3.9930953979492188
    7. ' k' → logprob: -4.243095397949219
    8. ' K' → logprob: -4.243095397949219
    9. '_' → logprob: -4.368095397949219
    10. 'a' → logprob: -5.243095397949219

Token 40: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.011876434087753296
    2. 'in' → logprob: -4.511876583099365
    3. ' ' → logprob: -7.136876583099365
    4. '  ' → logprob: -12.011876106262207
    5. 'n' → logprob: -12.511876106262207
    6. ',' → logprob: -12.761876106262207
    7. 's' → logprob: -12.761876106262207
    8. '_' → logprob: -12.949376106262207
    9. ' i' → logprob: -12.949376106262207
    10. '```' → logprob: -13.324376106262207

Token 41: ' rng' (ID: 76666)
  Prédit: 'rng'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'rng' → logprob: -0.21573187410831451
    2. ' rng' → logprob: -1.9657318592071533
    3. 'range' → logprob: -3.0907318592071533
    4. ' range' → logprob: -5.465732097625732
    5. 'A' → logprob: -5.965732097625732
    6. 'r' → logprob: -6.965732097625732
    7. ' A' → logprob: -8.590731620788574
    8. 'K' → logprob: -8.965731620788574
    9. ' ' → logprob: -9.090731620788574
    10. 'rang' → logprob: -9.090731620788574

Token 42: '(A' (ID: 10706)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00046618093620054424
    2. '(A' → logprob: -7.750466346740723
    3. '(K' → logprob: -10.875466346740723
    4. '(
' → logprob: -11.875466346740723
    5. '(B' → logprob: -12.625466346740723
    6. '(-' → logprob: -13.000466346740723
    7. '(len' → logprob: -13.250466346740723
    8. '((' → logprob: -14.125466346740723
    9. ' (' → logprob: -14.750466346740723
    10. '(a' → logprob: -15.000466346740723

Token 43: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.003694970393553376
    2. ' ,' → logprob: -5.753695011138916
    3. ',B' → logprob: -7.628695011138916
    4. 'B' → logprob: -11.128694534301758
    5. ' ' → logprob: -13.003694534301758
    6. ' B' → logprob: -13.003694534301758
    7. '```' → logprob: -13.128694534301758
    8. '+' → logprob: -13.378694534301758
    9. '，' → logprob: -13.628694534301758
    10. ',K' → logprob: -13.753694534301758

Token 44: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.034310564398765564
    2. ' B' → logprob: -3.4093105792999268
    3. 'A' → logprob: -7.409310340881348
    4. ' A' → logprob: -10.409310340881348
    5. 'K' → logprob: -11.534310340881348
    6. ' ' → logprob: -11.846810340881348
    7. '	B' → logprob: -13.034310340881348
    8. '  ' → logprob: -13.784310340881348
    9. '   ' → logprob: -13.846810340881348
    10. '>B' → logprob: -14.471810340881348

Token 45: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00023321842309087515
    2. ')' → logprob: -8.75023365020752
    3. '+' → logprob: -10.50023365020752
    4. '):
' → logprob: -10.62523365020752
    5. ':' → logprob: -11.00023365020752
    6. ' ):' → logprob: -12.12523365020752
    7. ')):' → logprob: -15.37523365020752
    8. '):
' → logprob: -16.375232696533203
    9. '):

' → logprob: -16.750232696533203
    10. ' ' → logprob: -17.000232696533203

Token 46: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7558271884918213
    2. ' ' → logprob: -1.0058271884918213
    3. ' if' → logprob: -2.7558271884918213
    4. ' 
' → logprob: -2.7558271884918213
    5. '    
' → logprob: -4.505826950073242
    6. '    ' → logprob: -4.880826950073242
    7. '\n' → logprob: -5.255826950073242
    8. '<|end|>' → logprob: -5.505826950073242
    9. 'if' → logprob: -6.255826950073242
    10. '     
' → logprob: -6.630826950073242

Token 47: ' if' (ID: 538)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.3984193205833435
    2. ' if' → logprob: -1.2734193801879883
    3. 'for' → logprob: -3.3984193801879883
    4. 'if' (adapté à ' if') → logprob: -4.648419380187988
    5. '   ' → logprob: -5.398419380187988
    6. ' ' → logprob: -7.148419380187988
    7. '    ' → logprob: -8.898419380187988
    8. ' i' → logprob: -9.398419380187988
    9. ' K' → logprob: -10.148419380187988
    10. ' f' → logprob: -10.398419380187988

Token 48: ' not' (ID: 625)
  Prédit: ' ii'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ii' → logprob: -0.09344538301229477
    2. ' K' → logprob: -3.343445301055908
    3. 'ii' → logprob: -3.468445301055908
    4. '(ii' → logprob: -4.093445301055908
    5. ' (' → logprob: -5.468445301055908
    6. 'K' → logprob: -6.718445301055908
    7. ' ' → logprob: -8.343445777893066
    8. '(' → logprob: -9.343445777893066
    9. ' abs' → logprob: -10.218445777893066
    10. '   ' → logprob: -10.468445777893066

Token 49: ' ii' (ID: 28354)
  Prédit: ' K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.4653087556362152
    2. ' ii' → logprob: -1.4653087854385376
    3. 'K' → logprob: -2.965308666229248
    4. 'ii' → logprob: -3.215308666229248
    5. '(ii' → logprob: -3.465308666229248
    6. ' (' → logprob: -4.340308666229248
    7. '(' → logprob: -6.965308666229248
    8. ' ' → logprob: -7.090308666229248
    9. ' chk' → logprob: -7.090308666229248
    10. 'chk' → logprob: -7.715308666229248

Token 50: ' %' (ID: 1851)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -0.5232831835746765
    2. ' %' → logprob: -0.8982831835746765
    3. ' ' → logprob: -9.398283004760742
    4. '%A' → logprob: -11.023283004760742
    5. '%B' → logprob: -11.523283004760742
    6. '%E' → logprob: -11.648283004760742
    7. '%i' → logprob: -11.898283004760742
    8. '%e' → logprob: -12.398283004760742
    9. '+' → logprob: -12.585783004760742
    10. '%x' → logprob: -12.710783004760742

Token 51: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.015022174455225468
    2. ' K' → logprob: -4.265022277832031
    3. ' ' → logprob: -7.890022277832031
    4. '3' → logprob: -8.515022277832031
    5. '2' → logprob: -8.765022277832031
    6. '7' → logprob: -9.890022277832031
    7. '10' → logprob: -11.390022277832031
    8. '5' → logprob: -11.640022277832031
    9. '6' → logprob: -11.640022277832031
    10. 'k' → logprob: -11.890022277832031

Token 52: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.003434000303968787
    2. '==' → logprob: -5.753434181213379
    3. ' ==' → logprob: -8.628434181213379
    4. ':
' → logprob: -10.003434181213379
    5. '):' → logprob: -11.253434181213379
    6. ' :' → logprob: -11.503434181213379
    7. ':**' → logprob: -12.628434181213379
    8. '=' → logprob: -13.128434181213379
    9. ' and' → logprob: -14.253434181213379
    10. ':return' → logprob: -14.753434181213379

Token 53: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00034952821442857385
    2. '   ' → logprob: -8.625349998474121
    3. ',' → logprob: -10.750349998474121
    4. '        
' → logprob: -10.750349998474121
    5. ' ' → logprob: -11.000349998474121
    6. ' chk' → logprob: -11.500349998474121
    7. '     ' → logprob: -11.625349998474121
    8. '           ' → logprob: -11.750349998474121
    9. ' continue' → logprob: -11.875349998474121
    10. ' ' → logprob: -11.875349998474121

Token 54: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14461247622966766
    2. ' chk' → logprob: -2.7696125507354736
    3. '       ' → logprob: -3.0196125507354736
    4. 'chk' → logprob: -4.0196123123168945
    5. '    ' → logprob: -6.3946123123168945
    6. '```' → logprob: -6.7696123123168945
    7. ' print' → logprob: -7.3946123123168945
    8. ' ' → logprob: -7.6446123123168945
    9. 'print' (adapté à ' print') → logprob: -8.144612312316895
    10. '    
' → logprob: -8.894612312316895

Token 55: '("' (ID: 568)
  Prédit: '(ii'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ii' → logprob: -0.0005068036844022572
    2. 'ii' → logprob: -7.75050687789917
    3. '(' → logprob: -9.875506401062012
    4. '(i' → logprob: -11.250506401062012
    5. '("' → logprob: -12.250506401062012
    6. '('' → logprob: -13.000506401062012
    7. '(f' → logprob: -13.625506401062012
    8. ' ii' → logprob: -13.750506401062012
    9. '(*' → logprob: -15.375506401062012
    10. '(int' → logprob: -15.375506401062012

Token 56: 'OK' (ID: 5175)
  Prédit: 'OK'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'OK' → logprob: -0.9191833138465881
    2. 'YES' → logprob: -1.2941832542419434
    3. 'ii' → logprob: -1.9191832542419434
    4. 'Yes' → logprob: -3.0441832542419434
    5. 'True' → logprob: -3.4191832542419434
    6. 'Found' → logprob: -4.044183254241943
    7. '"' → logprob: -4.169183254241943
    8. 'i' → logprob: -4.544183254241943
    9. 'ok' → logprob: -4.919183254241943
    10. '*' → logprob: -5.044183254241943

Token 57: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.637502133846283
    2. '")
' → logprob: -0.762502133846283
    3. '")
' → logprob: -5.387502193450928
    4. ')' → logprob: -8.63750171661377
    5. ')
' → logprob: -9.76250171661377
    6. '"' → logprob: -10.63750171661377
    7. '   ' → logprob: -11.26250171661377
    8. ')")
' → logprob: -11.76250171661377
    9. ')")' → logprob: -12.26250171661377
    10. '!")
' → logprob: -12.38750171661377

Token 58: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00035119339008815587
    2. '   ' → logprob: -8.500350952148438
    3. ',' → logprob: -9.875350952148438
    4. '<|end|>' → logprob: -10.500350952148438
    5. ' ' → logprob: -10.875350952148438
    6. '     ' → logprob: -12.250350952148438
    7. ')' → logprob: -12.250350952148438
    8. '#' → logprob: -12.375350952148438
    9. '```' → logprob: -12.375350952148438
    10. '           ' → logprob: -12.375350952148438

Token 59: ' chk' (ID: 63648)
  Prédit: 'chk'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'chk' (adapté à ' chk') → logprob: -0.3266260325908661
    2. '       ' → logprob: -1.8266260623931885
    3. 'break' → logprob: -2.5766260623931885
    4. '   ' → logprob: -3.2016260623931885
    5. ' chk' → logprob: -7.451625823974609
    6. 'ck' → logprob: -9.32662582397461
    7. 'ch' → logprob: -9.45162582397461
    8. ' break' → logprob: -9.82662582397461
    9. '
' → logprob: -10.32662582397461
    10. 'exit' → logprob: -10.95162582397461

Token 60: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1269797682762146
    2. '=' → logprob: -2.1269798278808594
    3. '=True' → logprob: -10.00197982788086
    4. ' ' → logprob: -12.12697982788086
    5. '=False' → logprob: -15.12697982788086
    6. ' =
' → logprob: -15.62697982788086
    7. '   ' → logprob: -15.62697982788086
    8. ' |=' → logprob: -16.62697982788086
    9. '=
' → logprob: -16.75197982788086
    10. ' True' → logprob: -17.00197982788086

Token 61: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.029751067981123924
    2. ' True' → logprob: -3.5297510623931885
    3. '   ' → logprob: -15.27975082397461
    4. '=True' → logprob: -15.52975082397461
    5. '(True' → logprob: -16.65475082397461
    6. '       ' → logprob: -19.02975082397461
    7. ' ' → logprob: -20.27975082397461
    8. 'Tr' → logprob: -20.27975082397461
    9. 'true' → logprob: -20.65475082397461
    10. '1' → logprob: -20.65475082397461

Token 62: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0009076489950530231
    2. '<|end|>' → logprob: -7.3759074211120605
    3. '   ' → logprob: -8.750907897949219
    4. '	' → logprob: -10.750907897949219
    5. '
' → logprob: -11.000907897949219
    6. ' if' → logprob: -11.250907897949219
    7. '```' → logprob: -11.625907897949219
    8. ' ' → logprob: -11.875907897949219
    9. '      ' → logprob: -12.000907897949219
    10. '<|end|>' → logprob: -12.250907897949219

Token 63: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00022070204431656748
    2. '<|end|>' → logprob: -9.00022029876709
    3. '   ' → logprob: -9.50022029876709
    4. '	' → logprob: -11.62522029876709
    5. '```' → logprob: -12.62522029876709
    6. ' ' → logprob: -12.87522029876709
    7. '      ' → logprob: -13.62522029876709
    8. '           ' → logprob: -14.00022029876709
    9. ' if' → logprob: -14.25022029876709
    10. '
' → logprob: -14.37522029876709

Token 64: ' break' (ID: 2338)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' (adapté à ' break') → logprob: -0.04977411404252052
    2. '       ' → logprob: -3.549774169921875
    3. ' break' → logprob: -3.924774169921875
    4. '   ' → logprob: -10.049774169921875
    5. '	break' → logprob: -10.424774169921875
    6. '```' → logprob: -13.299774169921875
    7. 'b' → logprob: -14.549774169921875
    8. '_break' → logprob: -14.549774169921875
    9. 'Break' → logprob: -14.799774169921875
    10. 'br' → logprob: -14.924774169921875

Token 65: '
' (ID: 198)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.03477155789732933
    2. 'else' → logprob: -3.40977144241333
    3. ' if' → logprob: -7.90977144241333
    4. '```' → logprob: -8.034771919250488
    5. '
' → logprob: -9.034771919250488
    6. '<|end|>' → logprob: -9.284771919250488
    7. ' else' → logprob: -9.409771919250488
    8. '  
' → logprob: -10.659771919250488
    9. 'If' → logprob: -10.909771919250488
    10. 'i' → logprob: -10.909771919250488

Token 66: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0021231381688266993
    2. 'else' → logprob: -6.2521233558654785
    3. '```' → logprob: -8.87712287902832
    4. 'print' → logprob: -10.00212287902832
    5. ' if' → logprob: -12.75212287902832
    6. '``' → logprob: -13.12712287902832
    7. 'If' → logprob: -13.62712287902832
    8. ';if' → logprob: -13.87712287902832
    9. 'continue' → logprob: -14.50212287902832
    10. 'for' → logprob: -14.50212287902832

Token 67: ' not' (ID: 625)
  Prédit: ' not'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.12695321440696716
    2. 'not' → logprob: -2.126953125
    3. ' ' → logprob: -11.376953125
    4. '   ' → logprob: -11.876953125
    5. ' ' → logprob: -12.376953125
    6. '	not' → logprob: -13.751953125
    7. ' no' → logprob: -14.501953125
    8. '(not' → logprob: -15.251953125
    9. '!' → logprob: -15.876953125
    10. 'chk' → logprob: -16.126953125

Token 68: ' chk' (ID: 63648)
  Prédit: ' chk'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chk' → logprob: -0.004094904754310846
    2. 'chk' → logprob: -5.504095077514648
    3. ' ' → logprob: -11.254095077514648
    4. ' ' → logprob: -13.754095077514648
    5. ' space' → logprob: -14.254095077514648
    6. ' ck' → logprob: -14.879095077514648
    7. '_chk' → logprob: -14.879095077514648
    8. '.chk' → logprob: -15.254095077514648
    9. '	ch' → logprob: -15.379095077514648
    10. ' cht' → logprob: -16.37909507751465

Token 69: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.029754074290394783
    2. ':
' → logprob: -3.529754161834717
    3. ':

' → logprob: -13.779753684997559
    4. ' :' → logprob: -14.154753684997559
    5. ':
' → logprob: -14.279753684997559
    6. ' :
' → logprob: -14.654753684997559
    7. '   ' → logprob: -14.904753684997559
    8. 'print' → logprob: -15.154753684997559
    9. ' print' → logprob: -17.279754638671875
    10. ':`' → logprob: -17.279754638671875

Token 70: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.022205665707588196
    2. '       ' → logprob: -4.272205829620361
    3. 'print' → logprob: -5.522205829620361
    4. ' print' → logprob: -5.522205829620361
    5. '```' → logprob: -11.522205352783203
    6. '	print' → logprob: -12.397205352783203
    7. ' ' → logprob: -15.022205352783203
    8. '           ' → logprob: -15.397205352783203
    9. '   ' → logprob: -15.647205352783203
    10. '<|end|>' → logprob: -15.647205352783203

Token 71: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.03920460119843483
    2. ' print' → logprob: -3.2892045974731445
    3. '   ' → logprob: -6.7892045974731445
    4. '       ' → logprob: -10.914204597473145
    5. '```' → logprob: -11.539204597473145
    6. '	print' → logprob: -12.414204597473145
    7. '
' → logprob: -13.414204597473145
    8. '    
' → logprob: -14.539204597473145
    9. '    ' → logprob: -14.539204597473145
    10. '``' → logprob: -14.664204597473145

Token 72: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.018125714734196663
    2. '(' → logprob: -4.268125534057617
    3. '("")' → logprob: -6.143125534057617
    4. '()' → logprob: -6.393125534057617
    5. '('' → logprob: -10.018125534057617
    6. '(-' → logprob: -10.268125534057617
    7. '("("' → logprob: -10.768125534057617
    8. '(""' → logprob: -11.893125534057617
    9. '(False' → logprob: -12.268125534057617
    10. '("(' → logprob: -12.393125534057617

Token 73: 'NG' (ID: 19236)
  Prédit: 'NG'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'NG' → logprob: -0.0058254641480743885
    2. '"' → logprob: -5.630825519561768
    3. '"-' → logprob: -7.130825519561768
    4. 'None' → logprob: -7.380825519561768
    5. 'FAIL' → logprob: -9.25582504272461
    6. 'Impossible' → logprob: -9.38082504272461
    7. 'OK' → logprob: -9.50582504272461
    8. '":' → logprob: -9.75582504272461
    9. 'NA' → logprob: -9.88082504272461
    10. 'NONE' → logprob: -10.00582504272461

Token 74: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -2.236549335066229e-05
    2. ')")' → logprob: -11.000021934509277
    3. ')' → logprob: -12.125021934509277
    4. '")
' → logprob: -16.250022888183594
    5. '}")' → logprob: -17.500022888183594
    6. '')' → logprob: -17.500022888183594
    7. '"))' → logprob: -18.000022888183594
    8. '"' → logprob: -18.125022888183594
    9. '”)' → logprob: -18.375022888183594
    10. '\")' → logprob: -18.500022888183594


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 72
Tokens correctement prédits (1ère position, stricte): 28
Tokens correctement prédits (1ère position, avec adaptation): 31
Tokens correctement prédits (top 10): 59
Précision stricte (1ère position): 38.89%
Précision adaptée (1ère position): 43.06%
Précision (top 10): 81.94%
================================================================================
