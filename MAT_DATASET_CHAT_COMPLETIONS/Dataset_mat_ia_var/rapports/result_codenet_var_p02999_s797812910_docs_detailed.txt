================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:55:27
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def compare_values():
    """
    Demande deux entiers en entrée standard, les compare selon un critère défini :
        - Affiche 0 si le premier entier est strictement inférieur au second.
        - Affiche 10 sinon.
    Cette fonction ne prend pas d'argument et ne retourne rien ; elle affiche directement le résultat.
    """
    # Lecture et transformation de l'entrée utilisateur : on attend deux entiers séparés par un espace.
    x, a = map(int, input("Entrez deux entiers séparés par un espace (x a) : ").split())

    # Comparaison : si x est strictement inférieur à a, afficher 0.
    if x < a:
        print(0)
    # Sinon (x >= a), afficher 10.
    else:
        print(10)

# Appeler la fonction principale lorsque le script s'exécute.
compare_values()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' compare' (ID: 12221)
  → Token d'amorce (pas de prédiction)

Token 2: '_values' (ID: 20393)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.02446443773806095
    2. '_' → logprob: -3.8994643688201904
    3. ' (' → logprob: -6.3994646072387695
    4. '```' → logprob: -6.3994646072387695
    5. '('' → logprob: -9.27446460723877
    6. '(_' → logprob: -9.52446460723877
    7. '[' → logprob: -10.27446460723877
    8. '<|end|>' → logprob: -10.52446460723877
    9. ':' → logprob: -10.64946460723877
    10. '():' → logprob: -10.77446460723877

Token 4: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.9868671894073486
    2. '   ' → logprob: -1.1118671894073486
    3. '```' → logprob: -1.8618671894073486
    4. '\' → logprob: -2.1118671894073486
    5. '    
' → logprob: -4.8618669509887695
    6. '    ' → logprob: -5.8618669509887695
    7. '
' → logprob: -6.3618669509887695
    8. '' → logprob: -6.6118669509887695
    9. ''\' → logprob: -6.6118669509887695
    10. '``' → logprob: -6.9868669509887695

Token 5: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7800509333610535
    2. 'a' → logprob: -1.6550509929656982
    3. 'return' → logprob: -1.7800509929656982
    4. '    ' → logprob: -3.5300509929656982
    5. '\' → logprob: -3.6550509929656982
    6. 'pass' → logprob: -3.7800509929656982
    7. 'x' → logprob: -4.030050754547119
    8. 'r' → logprob: -4.280050754547119
    9. '\n' → logprob: -4.405050754547119
    10. '```' → logprob: -4.655050754547119

Token 6: '   ' (ID: 271)
  Prédit: '"""'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"""' → logprob: -0.8873120546340942
    2. 'Compare' → logprob: -1.2623120546340942
    3. 'C' → logprob: -1.7623120546340942
    4. 'Com' → logprob: -2.3873119354248047
    5. '   ' → logprob: -4.762311935424805
    6. 'Comp' → logprob: -5.262311935424805
    7. ' Compare' → logprob: -5.387311935424805
    8. ' Com' → logprob: -5.512311935424805
    9. '""' → logprob: -5.762311935424805
    10. 'Compar' → logprob: -5.762311935424805

Token 7: ' Dem' (ID: 9458)
  Prédit: 'Compare'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Compare' → logprob: -0.37241220474243164
    2. 'Com' → logprob: -1.2474122047424316
    3. 'Comp' → logprob: -5.497412204742432
    4. 'Returns' → logprob: -5.497412204742432
    5. '   ' → logprob: -5.747412204742432
    6. ' Com' → logprob: -6.247412204742432
    7. 'C' → logprob: -6.372412204742432
    8. 'Check' → logprob: -6.372412204742432
    9. 'Return' → logprob: -6.497412204742432
    10. '"""' → logprob: -6.622412204742432

Token 8: 'ande' (ID: 4102)
  Prédit: 'onstr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'onstr' → logprob: -0.21949449181556702
    2. 'on' → logprob: -2.094494581222534
    3. 'o' → logprob: -2.719494581222534
    4. 'a' → logprob: -5.344494342803955
    5. 'and' → logprob: -6.969494342803955
    6. 'ons' → logprob: -7.594494342803955
    7. 'ands' → logprob: -7.594494342803955
    8. '   ' → logprob: -7.594494342803955
    9. 'e' → logprob: -8.219494819641113
    10. '```' → logprob: -8.719494819641113

Token 9: ' deux' (ID: 10301)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4460948407649994
    2. ' ' → logprob: -1.4460948705673218
    3. 's' → logprob: -3.0710947513580322
    4. '_' → logprob: -3.8210947513580322
    5. ' de' → logprob: -4.571094989776611
    6. ' des' → logprob: -4.821094989776611
    7. '  ' → logprob: -4.946094989776611
    8. 'r' → logprob: -5.196094989776611
    9. ' à' → logprob: -5.571094989776611
    10. '-moi' → logprob: -5.696094989776611

Token 10: ' ent' (ID: 1121)
  Prédit: ' valeurs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' valeurs' → logprob: -0.2778528332710266
    2. ' ' → logprob: -1.9028527736663818
    3. 'val' → logprob: -3.277852773666382
    4. ' val' → logprob: -3.652852773666382
    5. ' chaînes' → logprob: -4.027853012084961
    6. ' espaces' → logprob: -5.402853012084961
    7. ' valeur' → logprob: -6.277853012084961
    8. ' arguments' → logprob: -7.027853012084961
    9. '   ' → logprob: -7.027853012084961
    10. ' ' → logprob: -7.652853012084961

Token 11: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.007621183525770903
    2. 'ières' → logprob: -5.6326212882995605
    3. 'i' → logprob: -5.7576212882995605
    4. 'ier' → logprob: -7.6326212882995605
    5. 'r' → logprob: -8.632620811462402
    6. '   ' → logprob: -9.507620811462402
    7. '```' → logprob: -10.257620811462402
    8. 'ié' → logprob: -10.757620811462402
    9. 'ri' → logprob: -10.882620811462402
    10. 'ités' → logprob: -11.882620811462402

Token 12: ' en' (ID: 469)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.3371895551681519
    2. ' et' → logprob: -1.3371895551681519
    3. ' à' → logprob: -1.8371895551681519
    4. '   ' → logprob: -1.8371895551681519
    5. ',' → logprob: -2.9621896743774414
    6. '\n' → logprob: -3.3371896743774414
    7. 's' → logprob: -4.087189674377441
    8. ' en' → logprob: -4.587189674377441
    9. '.' → logprob: -4.587189674377441
    10. ' ,' → logprob: -5.462189674377441

Token 13: ' entrée' (ID: 95590)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.2306518256664276
    2. ' entrée' → logprob: -2.35565185546875
    3. '   ' → logprob: -2.98065185546875
    4. ' ' → logprob: -3.98065185546875
    5. ' entree' → logprob: -4.35565185546875
    6. 'entrée' → logprob: -4.73065185546875
    7. 'input' → logprob: -4.98065185546875
    8. '  ' → logprob: -5.85565185546875
    9. ' entr' → logprob: -6.35565185546875
    10. '_input' → logprob: -6.85565185546875

Token 14: ' standard' (ID: 7024)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.028724050149321556
    2. ',' → logprob: -4.778724193572998
    3. '    
' → logprob: -5.153724193572998
    4. ' et' → logprob: -5.903724193572998
    5. '    ' → logprob: -6.153724193572998
    6. '\n' → logprob: -6.278724193572998
    7. '.' → logprob: -6.403724193572998
    8. '\' → logprob: -6.778724193572998
    9. 'et' → logprob: -7.278724193572998
    10. ' ' → logprob: -7.528724193572998

Token 15: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1965261995792389
    2. ',' → logprob: -2.446526288986206
    3. ' et' → logprob: -3.321526288986206
    4. '\n' → logprob: -4.196526050567627
    5. ' ' → logprob: -4.321526050567627
    6. '.' → logprob: -4.696526050567627
    7. '```' → logprob: -5.821526050567627
    8. '\' → logprob: -5.821526050567627
    9. 'et' → logprob: -6.321526050567627
    10. '    ' → logprob: -6.446526050567627

Token 16: ' les' (ID: 1341)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7847655415534973
    2. ' puis' → logprob: -0.9097655415534973
    3. ' et' → logprob: -2.2847654819488525
    4. 'et' → logprob: -4.659765720367432
    5. 'p' → logprob: -4.909765720367432
    6. ' retourne' → logprob: -5.409765720367432
    7. ' vér' → logprob: -5.784765720367432
    8. ' les' → logprob: -5.784765720367432
    9. ' ' → logprob: -6.159765720367432
    10. ' return' → logprob: -6.409765720367432

Token 17: ' compare' (ID: 12221)
  Prédit: ' compare'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' compare' → logprob: -0.06564923375844955
    2. 'compare' → logprob: -2.8156492710113525
    3. ' compares' → logprob: -6.815649032592773
    4. ' ' → logprob: -7.690649032592773
    5. ' com' → logprob: -7.940649032592773
    6. 'com' → logprob: -7.940649032592773
    7. ' lit' → logprob: -8.190649032592773
    8. ' retourne' → logprob: -8.440649032592773
    9. '_compare' → logprob: -8.940649032592773
    10. 'compar' → logprob: -9.065649032592773

Token 18: ' selon' (ID: 27571)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.22746595740318298
    2. ',' → logprob: -1.8524659872055054
    3. '\n' → logprob: -4.727466106414795
    4. 'e' → logprob: -4.852466106414795
    5. ' ' → logprob: -4.977466106414795
    6. '\' → logprob: -5.477466106414795
    7. ' et' → logprob: -5.477466106414795
    8. ',
' → logprob: -5.977466106414795
    9. '.' → logprob: -6.227466106414795
    10. 's' → logprob: -6.852466106414795

Token 19: ' un' (ID: 537)
  Prédit: ' leur'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' leur' → logprob: -0.9053581357002258
    2. 'leur' → logprob: -0.9053581357002258
    3. '   ' → logprob: -2.780358076095581
    4. 'le' → logprob: -3.655358076095581
    5. '```' → logprob: -3.780358076095581
    6. ' la' → logprob: -3.780358076095581
    7. 'l' → logprob: -4.40535831451416
    8. ' le' → logprob: -4.40535831451416
    9. ' l' → logprob: -4.65535831451416
    10. ' leurs' → logprob: -5.03035831451416

Token 20: ' crit' (ID: 6709)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.282125473022461
    2. '   ' → logprob: -2.657125473022461
    3. ' espace' → logprob: -2.907125473022461
    4. '    ' → logprob: -3.032125473022461
    5. 'ordre' → logprob: -3.032125473022461
    6. ' crit' → logprob: -3.157125473022461
    7. '  ' → logprob: -3.282125473022461
    8. '<' → logprob: -3.282125473022461
    9. '>' → logprob: -3.532125473022461
    10. '     ' → logprob: -3.532125473022461

Token 21: 'ère' (ID: 4346)
  Prédit: 'ère'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ère' → logprob: -0.008108478039503098
    2. 'è' → logprob: -4.883108615875244
    3. 'èr' → logprob: -7.758108615875244
    4. '`' → logprob: -10.383108139038086
    5. '```' → logprob: -11.883108139038086
    6. '�' → logprob: -12.133108139038086
    7. 'ères' → logprob: -12.383108139038086
    8. 'èque' → logprob: -12.758108139038086
    9. 'èrement' → logprob: -13.258108139038086
    10. '\xd1' → logprob: -13.258108139038086

Token 22: ' déf' (ID: 23956)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.45877063274383545
    2. 's' → logprob: -1.4587706327438354
    3. ' de' → logprob: -2.958770751953125
    4. ' et' → logprob: -3.833770751953125
    5. ' ,' → logprob: -4.083770751953125
    6. ' ' → logprob: -4.458770751953125
    7. '   ' → logprob: -4.958770751953125
    8. '.' → logprob: -5.083770751953125
    9. 'e' → logprob: -5.333770751953125
    10. ' d' → logprob: -5.708770751953125

Token 23: 'ini' (ID: 2363)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.194529190659523
    2. 'e' → logprob: -1.9445291757583618
    3. 'inition' → logprob: -4.069529056549072
    4. 'é' → logprob: -4.569529056549072
    5. 'f' → logprob: -6.194529056549072
    6. 'inie' → logprob: -6.569529056549072
    7. 'ini' → logprob: -6.944529056549072
    8. 'u' → logprob: -7.694529056549072
    9. 'er' → logprob: -8.31952953338623
    10. '```' → logprob: -8.81952953338623

Token 24: ' :
' (ID: 10039)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.23021934926509857
    2. '   ' → logprob: -2.3552193641662598
    3. 'e' → logprob: -3.1052193641662598
    4. ',
' → logprob: -3.6052193641662598
    5. '.' → logprob: -4.23021936416626
    6. ' ' → logprob: -4.98021936416626
    7. ' et' → logprob: -5.35521936416626
    8. 's' → logprob: -5.35521936416626
    9. '\n' → logprob: -6.23021936416626
    10. '\' → logprob: -6.98021936416626

Token 25: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008576042018830776
    2. '    ' → logprob: -5.258575916290283
    3. ',' → logprob: -6.883575916290283
    4. '    
' → logprob: -7.758575916290283
    5. '       ' → logprob: -8.133576393127441
    6. 'et' → logprob: -8.383576393127441
    7. ' ' → logprob: -8.633576393127441
    8. '"""' → logprob: -8.758576393127441
    9. ' et' → logprob: -8.883576393127441
    10. '"""
' → logprob: -8.883576393127441

Token 26: ' -' (ID: 533)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.023079726845026016
    2. '       ' → logprob: -4.273079872131348
    3. '    ' → logprob: -6.148079872131348
    4. '"""
' → logprob: -7.148079872131348
    5. '"""' → logprob: -7.273079872131348
    6. ' if' → logprob: -7.523079872131348
    7. 'def' → logprob: -7.773079872131348
    8. 'if' → logprob: -8.273079872131348
    9. 'Le' → logprob: -8.398079872131348
    10. 'les' → logprob: -8.523079872131348

Token 27: ' Aff' (ID: 13741)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'le' → logprob: -0.7578116655349731
    2. ' if' → logprob: -2.1328115463256836
    3. ' le' → logprob: -2.7578115463256836
    4. 'si' → logprob: -2.8828115463256836
    5. ' si' → logprob: -3.2578115463256836
    6. 'if' → logprob: -3.3828115463256836
    7. 'l' → logprob: -3.5078115463256836
    8. 'leur' → logprob: -3.6328115463256836
    9. 'val' → logprob: -3.7578115463256836
    10. 'la' → logprob: -3.8828115463256836

Token 28: 'iche' (ID: 7509)
  Prédit: 'iche'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iche' → logprob: -0.07319065928459167
    2. 'fic' → logprob: -3.573190689086914
    3. 'f' → logprob: -3.948190689086914
    4. 'ic' → logprob: -4.073190689086914
    5. 'ichage' → logprob: -6.448190689086914
    6. 'ich' → logprob: -6.698190689086914
    7. 'i' → logprob: -6.698190689086914
    8. 'icher' → logprob: -7.323190689086914
    9. '#' → logprob: -8.073190689086914
    10. '   ' → logprob: -8.573190689086914

Token 29: ' ' (ID: 220)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.5774266719818115
    2. 's' → logprob: -2.4524266719818115
    3. ' "' → logprob: -2.4524266719818115
    4. ' ' → logprob: -2.5774266719818115
    5. 'si' → logprob: -3.0774266719818115
    6. ''' → logprob: -3.3274266719818115
    7. ' si' → logprob: -3.4524266719818115
    8. ' '' → logprob: -4.202426910400391
    9. 'leur' → logprob: -4.327426910400391
    10. ' le' → logprob: -5.077426910400391

Token 30: '0' (ID: 15)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.20399707555770874
    2. 'le' → logprob: -2.4539971351623535
    3. ''' → logprob: -3.2039971351623535
    4. 'si' → logprob: -4.0789971351623535
    5. ' "' → logprob: -4.3289971351623535
    6. 'leur' → logprob: -5.0789971351623535
    7. 'quel' → logprob: -5.5789971351623535
    8. 'l' → logprob: -6.4539971351623535
    9. 'que' → logprob: -6.5789971351623535
    10. ' le' → logprob: -6.7039971351623535

Token 31: ' si' (ID: 1784)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9013996124267578
    2. ',' → logprob: -2.026399612426758
    3. ' ' → logprob: -2.026399612426758
    4. ' if' → logprob: -2.401399612426758
    5. '\n' → logprob: -2.901399612426758
    6. ':' → logprob: -3.026399612426758
    7. ' si' → logprob: -3.151399612426758
    8. '  ' → logprob: -3.651399612426758
    9. '```' → logprob: -4.026399612426758
    10. '<|end|>' → logprob: -4.776399612426758

Token 32: ' le' (ID: 505)
  Prédit: ' les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.2692875862121582
    2. 'les' → logprob: -2.769287586212158
    3. ' a' → logprob: -3.519287586212158
    4. ' ils' → logprob: -3.644287586212158
    5. ' le' → logprob: -3.894287586212158
    6. 'a' → logprob: -3.894287586212158
    7. ' ' → logprob: -4.519287586212158
    8. ' ' → logprob: -4.644287586212158
    9. 'l' → logprob: -4.769287586212158
    10. ' they' → logprob: -4.894287586212158

Token 33: ' premier' (ID: 15506)
  Prédit: ' premier'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' premier' → logprob: -0.8669444918632507
    2. 's' → logprob: -1.3669445514678955
    3. 'prem' → logprob: -1.9919445514678955
    4. ' second' → logprob: -3.3669445514678955
    5. 'de' → logprob: -3.3669445514678955
    6. 'a' → logprob: -4.241944313049316
    7. ' ' → logprob: -4.241944313049316
    8. 'ur' → logprob: -4.741944313049316
    9. '1' → logprob: -4.741944313049316
    10. ' deuxième' → logprob: -4.866944313049316

Token 34: ' entier' (ID: 80473)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.23534928262233734
    2. ' >' → logprob: -2.360349178314209
    3. ' est' → logprob: -3.360349178314209
    4. '>' → logprob: -3.360349178314209
    5. 'est' → logprob: -4.235349178314209
    6. 's' → logprob: -5.360349178314209
    7. ' <' → logprob: -5.610349178314209
    8. ' >=' → logprob: -5.610349178314209
    9. '=' → logprob: -5.735349178314209
    10. ' <=' → logprob: -6.110349178314209

Token 35: ' est' (ID: 893)
  Prédit: ' est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' est' → logprob: -0.05003301799297333
    2. 'est' → logprob: -3.3000330924987793
    3. 's' → logprob: -5.300033092498779
    4. '>' → logprob: -5.800033092498779
    5. ' >' → logprob: -6.675033092498779
    6. ' is' → logprob: -7.175033092498779
    7. ' <' → logprob: -8.050032615661621
    8. ' ' → logprob: -8.175032615661621
    9. '<' → logprob: -8.425032615661621
    10. '=' → logprob: -8.550032615661621

Token 36: ' strict' (ID: 12035)
  Prédit: ' inférieur'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' inférieur' → logprob: -0.7554206252098083
    2. ' égal' → logprob: -2.005420684814453
    3. ' plus' → logprob: -2.380420684814453
    4. 'strict' → logprob: -2.630420684814453
    5. ' supérieur' → logprob: -3.005420684814453
    6. 'inf' → logprob: -3.505420684814453
    7. ' strict' → logprob: -3.505420684814453
    8. 'égal' → logprob: -3.630420684814453
    9. 'plus' → logprob: -3.755420684814453
    10. '   ' → logprob: -4.005420684814453

Token 37: 'ement' (ID: 962)
  Prédit: 'ement'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ement' → logprob: -0.002577559556812048
    2. '<' → logprob: -6.752577781677246
    3. 'e' → logprob: -7.377577781677246
    4. ' inférieur' → logprob: -8.002577781677246
    5. 'ly' → logprob: -9.502577781677246
    6. 'l' → logprob: -9.877577781677246
    7. 'emen' → logprob: -9.877577781677246
    8. 'ément' → logprob: -10.002577781677246
    9. 'em' → logprob: -10.252577781677246
    10. 'lement' → logprob: -10.627577781677246

Token 38: ' inférieur' (ID: 191498)
  Prédit: ' inférieur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' inférieur' → logprob: -0.12394282221794128
    2. 'inf' → logprob: -2.8739428520202637
    3. '<' → logprob: -3.7489428520202637
    4. ' supérieur' → logprob: -4.248942852020264
    5. ' <' → logprob: -4.998942852020264
    6. ' plus' → logprob: -5.373942852020264
    7. 'infer' → logprob: -5.748942852020264
    8. 'sup' → logprob: -6.498942852020264
    9. 'plus' → logprob: -6.748942852020264
    10. ' inf' → logprob: -6.873942852020264

Token 39: ' au' (ID: 2791)
  Prédit: ' au'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' au' → logprob: -0.09923388063907623
    2. ' à' → logprob: -3.224233865737915
    3. ' ' → logprob: -3.724233865737915
    4. '<|end|>' → logprob: -4.474234104156494
    5. 'au' → logprob: -4.599234104156494
    6. '  ' → logprob: -4.849234104156494
    7. 'à' → logprob: -7.724234104156494
    8. '   ' → logprob: -9.099233627319336
    9. ''au' → logprob: -9.099233627319336
    10. 's' → logprob: -9.349233627319336

Token 40: ' second' (ID: 3099)
  Prédit: ' second'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' second' → logprob: -0.249384343624115
    2. 'second' → logprob: -1.8743844032287598
    3. 'de' → logprob: -2.8743844032287598
    4. ' deuxième' → logprob: -4.74938440322876
    5. ' ' → logprob: -6.74938440322876
    6. 'se' → logprob: -7.62438440322876
    7. ' seconde' → logprob: -9.374383926391602
    8. ' ' → logprob: -9.499383926391602
    9. 'prem' → logprob: -9.624383926391602
    10. '  ' → logprob: -10.499383926391602

Token 41: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3854943513870239
    2. '\n' → logprob: -1.760494351387024
    3. '\' → logprob: -2.5104942321777344
    4. ' ' → logprob: -4.010494232177734
    5. '```' → logprob: -4.385494232177734
    6. ',' → logprob: -5.135494232177734
    7. '    ' → logprob: -5.260494232177734
    8. '    
' → logprob: -5.760494232177734
    9. ' \' → logprob: -5.885494232177734
    10. '.' → logprob: -6.010494232177734

Token 42: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014195243827998638
    2. '\n' → logprob: -5.389195442199707
    3. '       ' → logprob: -5.514195442199707
    4. '```' → logprob: -6.139195442199707
    5. '    ' → logprob: -6.639195442199707
    6. '\' → logprob: -6.889195442199707
    7. ' ' → logprob: -8.139195442199707
    8. '    
' → logprob: -8.764195442199707
    9. '`' → logprob: -9.764195442199707
    10. 'def' → logprob: -9.889195442199707

Token 43: ' -' (ID: 533)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03728722780942917
    2. '       ' → logprob: -4.16228723526001
    3. '\n' → logprob: -4.78728723526001
    4. '    ' → logprob: -5.03728723526001
    5. ' ' → logprob: -5.53728723526001
    6. ' \' → logprob: -7.53728723526001
    7. '\' → logprob: -7.66228723526001
    8. '```' → logprob: -7.78728723526001
    9. '  ' → logprob: -8.912286758422852
    10. '     ' → logprob: -8.912286758422852

Token 44: ' Aff' (ID: 13741)
  Prédit: ' Aff'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Aff' → logprob: -0.5106256604194641
    2. 'Aff' → logprob: -1.1356256008148193
    3. ' ' → logprob: -3.0106256008148193
    4. '   ' → logprob: -4.010625839233398
    5. ' ' → logprob: -6.260625839233398
    6. 'Afficher' → logprob: -6.635625839233398
    7. '  ' → logprob: -6.885625839233398
    8. ' É' → logprob: -7.010625839233398
    9. 'É' → logprob: -7.510625839233398
    10. ' return' → logprob: -7.635625839233398

Token 45: 'iche' (ID: 7509)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.011270275339484215
    2. 'ic' → logprob: -4.761270046234131
    3. 'iche' → logprob: -6.136270046234131
    4. 'ich' → logprob: -8.011270523071289
    5. 'ichage' → logprob: -9.136270523071289
    6. '```' → logprob: -11.761270523071289
    7. 'f' → logprob: -11.886270523071289
    8. 'icher' → logprob: -11.886270523071289
    9. 'icha' → logprob: -12.511270523071289
    10. 'ichel' → logprob: -13.136270523071289

Token 46: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.3575652241706848
    2. ' ' → logprob: -1.23256516456604
    3. '0' → logprob: -5.857565402984619
    4. ''' → logprob: -6.857565402984619
    5. ' ' → logprob: -7.107565402984619
    6. '  ' → logprob: -7.357565402984619
    7. ' :' → logprob: -7.732565402984619
    8. ' '' → logprob: -7.732565402984619
    9. '2' → logprob: -7.857565402984619
    10. ' "' → logprob: -8.107564926147461

Token 47: '10' (ID: 702)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.003044500946998596
    2. '0' → logprob: -6.503044605255127
    3. ' ' → logprob: -6.753044605255127
    4. '-' → logprob: -8.878044128417969
    5. '2' → logprob: -9.503044128417969
    6. ''' → logprob: -9.753044128417969
    7. '"' → logprob: -10.503044128417969
    8. ' -' → logprob: -11.128044128417969
    9. '>' → logprob: -11.628044128417969
    10. 'le' → logprob: -11.878044128417969

Token 48: ' sinon' (ID: 52915)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.08538524061441422
    2. ' if' → logprob: -3.460385322570801
    3. '   ' → logprob: -4.460385322570801
    4. '0' → logprob: -4.710385322570801
    5. '  ' → logprob: -4.710385322570801
    6. '    ' → logprob: -5.210385322570801
    7. '<|end|>' → logprob: -5.460385322570801
    8. 's' → logprob: -5.835385322570801
    9. ' )' → logprob: -6.210385322570801
    10. ')' → logprob: -6.710385322570801

Token 49: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.147644504904747
    2. '"""' → logprob: -2.147644519805908
    3. '```' → logprob: -4.647644519805908
    4. '\n' → logprob: -5.772644519805908
    5. '\' → logprob: -6.022644519805908
    6. '"' → logprob: -6.397644519805908
    7. '"""
' → logprob: -6.522644519805908
    8. '""' → logprob: -6.897644519805908
    9. '    
' → logprob: -8.02264404296875
    10. ' """' → logprob: -9.02264404296875

Token 50: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12092842906713486
    2. '"""' → logprob: -2.2459285259246826
    3. '"""
' → logprob: -5.6209282875061035
    4. '```' → logprob: -6.1209282875061035
    5. '"' → logprob: -6.2459282875061035
    6. '""' → logprob: -8.995928764343262
    7. '`' → logprob: -9.745928764343262
    8. ' """' → logprob: -10.245928764343262
    9. ' """
' → logprob: -10.995928764343262
    10. '
' → logprob: -11.620928764343262

Token 51: ' Cette' (ID: 27383)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07814919948577881
    2. '"""' → logprob: -2.9531493186950684
    3. '"' → logprob: -4.703149318695068
    4. '"""
' → logprob: -5.078149318695068
    5. '```' → logprob: -5.203149318695068
    6. '""' → logprob: -7.203149318695068
    7. '\n' → logprob: -7.703149318695068
    8. '`' → logprob: -8.20314884185791
    9. '    
' → logprob: -8.82814884185791
    10. '\' → logprob: -8.82814884185791

Token 52: ' fonction' (ID: 17610)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.235647439956665
    2. 'def' → logprob: -1.860647439956665
    3. ' 
' → logprob: -1.985647439956665
    4. '
' → logprob: -2.110647439956665
    5. '\n' → logprob: -2.735647439956665
    6. ' """
' → logprob: -3.235647439956665
    7. ' ' → logprob: -3.235647439956665
    8. ' """' → logprob: -3.610647439956665
    9. 'n' → logprob: -3.985647439956665
    10. '"""' → logprob: -4.235647201538086

Token 53: ' ne' (ID: 453)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3801049292087555
    2. ' continue' → logprob: -1.755104899406433
    3. ' continu' → logprob: -3.8801050186157227
    4. ':' → logprob: -4.255105018615723
    5. ' ' → logprob: -4.380105018615723
    6. ')' → logprob: -4.630105018615723
    7. ' continues' → logprob: -4.755105018615723
    8. ' ' → logprob: -5.005105018615723
    9. ' retourne' → logprob: -5.255105018615723
    10. 'contin' → logprob: -5.505105018615723

Token 54: ' prend' (ID: 37463)
  Prédit: ' retourne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' retourne' → logprob: -0.5888180136680603
    2. ' return' → logprob: -1.588818073272705
    3. ' prend' → logprob: -3.338818073272705
    4. ' ' → logprob: -3.338818073272705
    5. ' s' → logprob: -3.963818073272705
    6. ' """' → logprob: -4.088818073272705
    7. ' """
' → logprob: -4.213818073272705
    8. '   ' → logprob: -4.588818073272705
    9. 's' → logprob: -4.713818073272705
    10. ' a' → logprob: -4.838818073272705

Token 55: ' pas' (ID: 2173)
  Prédit: ' pas'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pas' → logprob: -0.044815316796302795
    2. ' aucun' → logprob: -3.9198153018951416
    3. 'pas' → logprob: -4.544815540313721
    4. ' ' → logprob: -4.669815540313721
    5. '_' → logprob: -6.919815540313721
    6. '   ' → logprob: -7.544815540313721
    7. ' aucune' → logprob: -7.919815540313721
    8. '_pas' → logprob: -8.044815063476562
    9. ' auc' → logprob: -8.294815063476562
    10. ' rien' → logprob: -8.419815063476562

Token 56: ' d' (ID: 272)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.5289666056632996
    2. ' ' → logprob: -1.7789666652679443
    3. 'auc' → logprob: -3.0289666652679443
    4. '_' → logprob: -3.2789666652679443
    5. '<|end|>' → logprob: -3.4039666652679443
    6. 's' → logprob: -3.5289666652679443
    7. 'd' → logprob: -4.028966426849365
    8. 'de' → logprob: -4.528966426849365
    9. ' aucun' → logprob: -4.653966426849365
    10. '<|end|>' → logprob: -5.153966426849365

Token 57: ''' (ID: 6)
  Prédit: 'arguments'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'arguments' → logprob: -0.5267304182052612
    2. ''' → logprob: -2.151730537414551
    3. 'argument' → logprob: -2.151730537414551
    4. '_arguments' → logprob: -2.901730537414551
    5. '_' → logprob: -3.526730537414551
    6. '_argument' → logprob: -3.776730537414551
    7. 'e' → logprob: -3.901730537414551
    8. 'param' → logprob: -4.651730537414551
    9. ' arguments' → logprob: -5.151730537414551
    10. 'es' → logprob: -5.276730537414551

Token 58: 'argument' (ID: 13251)
  Prédit: 'entrée'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'entrée' → logprob: -0.5868996977806091
    2. 'arguments' → logprob: -1.211899757385254
    3. 'argument' → logprob: -1.961899757385254
    4. ''entrée' → logprob: -6.211899757385254
    5. 'entr' → logprob: -6.586899757385254
    6. 'param' → logprob: -6.586899757385254
    7. 'ent' → logprob: -8.336899757385254
    8. 'a' → logprob: -9.211899757385254
    9. '_arguments' → logprob: -9.211899757385254
    10. ''' → logprob: -9.461899757385254

Token 59: ' et' (ID: 859)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.34637489914894104
    2. '\n' → logprob: -1.8463748693466187
    3. '\' → logprob: -2.971374988555908
    4. ':' → logprob: -3.471374988555908
    5. '
' → logprob: -3.721374988555908
    6. '    
' → logprob: -4.846374988555908
    7. '```' → logprob: -4.971374988555908
    8. '  
' → logprob: -6.596374988555908
    9. ')' → logprob: -6.846374988555908
    10. '"\' → logprob: -6.846374988555908

Token 60: ' ne' (ID: 453)
  Prédit: ' retourne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' retourne' → logprob: -0.7658820152282715
    2. ' ren' → logprob: -1.2658820152282715
    3. ' return' → logprob: -2.6408820152282715
    4. ' ne' → logprob: -2.7658820152282715
    5. '   ' → logprob: -2.7658820152282715
    6. 'return' → logprob: -4.2658820152282715
    7. 'ren' → logprob: -4.3908820152282715
    8. 'ne' → logprob: -4.6408820152282715
    9. ' n' → logprob: -5.5158820152282715
    10. ' retour' → logprob: -5.8908820152282715

Token 61: ' retourne' (ID: 178818)
  Prédit: ' retourne'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' retourne' → logprob: -0.6757894158363342
    2. 'return' → logprob: -1.1757893562316895
    3. 'ret' → logprob: -2.3007893562316895
    4. ' return' → logprob: -3.6757893562316895
    5. 'ren' → logprob: -4.1757893562316895
    6. '   ' → logprob: -4.4257893562316895
    7. ' ren' → logprob: -4.8007893562316895
    8. 'rend' → logprob: -5.0507893562316895
    9. ' ret' → logprob: -5.9257893562316895
    10. 'returns' → logprob: -6.5507893562316895

Token 62: ' rien' (ID: 23082)
  Prédit: ' rien'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' rien' → logprob: -0.03171583637595177
    2. 'r' → logprob: -4.1567158699035645
    3. ' pas' → logprob: -5.0317158699035645
    4. ' aucun' → logprob: -5.7817158699035645
    5. ' ' → logprob: -6.0317158699035645
    6. ' aucune' → logprob: -6.5317158699035645
    7. 'pas' → logprob: -7.4067158699035645
    8. ' None' → logprob: -7.6567158699035645
    9. 's' → logprob: -8.156715393066406
    10. 'auc' → logprob: -8.156715393066406

Token 63: ' ;' (ID: 4605)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08785437792539597
    2. '\n' → logprob: -3.5878543853759766
    3. '"""' → logprob: -3.7128543853759766
    4. '
' → logprob: -4.337854385375977
    5. '"' → logprob: -5.587854385375977
    6. '```' → logprob: -5.587854385375977
    7. '<|end|>' → logprob: -5.837854385375977
    8. ')' → logprob: -5.962854385375977
    9. ':' → logprob: -6.337854385375977
    10. 'n' → logprob: -7.212854385375977

Token 64: ' elle' (ID: 11451)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04395575821399689
    2. '\n' → logprob: -3.9189558029174805
    3. '"""' → logprob: -4.9189558029174805
    4. '    
' → logprob: -5.5439558029174805
    5. '"""
' → logprob: -5.5439558029174805
    6. 'def' → logprob: -6.5439558029174805
    7. '\' → logprob: -6.7939558029174805
    8. '"' → logprob: -7.0439558029174805
    9. ' 
' → logprob: -7.4189558029174805
    10. '```' → logprob: -7.4189558029174805

Token 65: ' affiche' (ID: 127479)
  Prédit: ' affiche'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' affiche' → logprob: -0.9381566047668457
    2. ' continue' → logprob: -1.6881566047668457
    3. ' print' → logprob: -1.9381566047668457
    4. ' doit' → logprob: -3.3131566047668457
    5. ' ' → logprob: -3.5631566047668457
    6. ' prend' → logprob: -3.8131566047668457
    7. ' demande' → logprob: -3.8131566047668457
    8. ' s' → logprob: -4.063156604766846
    9. ' se' → logprob: -4.438156604766846
    10. ' imprime' → logprob: -4.438156604766846

Token 66: ' directement' (ID: 52317)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0950055867433548
    2. '<|end|>' → logprob: -3.970005512237549
    3. ' un' → logprob: -4.595005512237549
    4. '0' → logprob: -4.845005512237549
    5. ' uniquement' → logprob: -5.220005512237549
    6. 's' → logprob: -5.345005512237549
    7. 'r' → logprob: -5.595005512237549
    8. '  ' → logprob: -5.720005512237549
    9. ' des' → logprob: -5.720005512237549
    10. ' les' → logprob: -5.845005512237549

Token 67: ' le' (ID: 505)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -1.3069756031036377
    2. ' les' → logprob: -1.3069756031036377
    3. ' ' → logprob: -1.8069756031036377
    4. ' le' → logprob: -1.9319756031036377
    5. ' l' → logprob: -2.9319756031036377
    6. 'l' → logprob: -3.5569756031036377
    7. ' un' → logprob: -3.8069756031036377
    8. ' des' → logprob: -3.9319756031036377
    9. 'le' → logprob: -4.806975364685059
    10. 'les' → logprob: -6.056975364685059

Token 68: ' résultat' (ID: 62556)
  Prédit: 'rés'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'rés' → logprob: -0.36417192220687866
    2. ' résultat' → logprob: -1.8641719818115234
    3. 'r' → logprob: -2.1141719818115234
    4. ' ' → logprob: -3.9891719818115234
    5. 'result' → logprob: -5.364171981811523
    6. ' résultats' → logprob: -6.489171981811523
    7. ' r' → logprob: -6.864171981811523
    8. ' rés' → logprob: -7.489171981811523
    9. 'ré' → logprob: -7.614171981811523
    10. ' result' → logprob: -7.614171981811523

Token 69: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.355930358171463
    2. '\n' → logprob: -1.3559303283691406
    3. '
' → logprob: -4.230930328369141
    4. '\' → logprob: -4.605930328369141
    5. '```' → logprob: -5.480930328369141
    6. '    
' → logprob: -5.605930328369141
    7. ':' → logprob: -6.230930328369141
    8. ')' → logprob: -6.855930328369141
    9. '"\' → logprob: -6.980930328369141
    10. 'n' → logprob: -7.105930328369141

Token 70: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2648063004016876
    2. '"""' → logprob: -1.6398062705993652
    3. '"""
' → logprob: -3.5148062705993652
    4. '"' → logprob: -5.139806270599365
    5. '```' → logprob: -6.264806270599365
    6. '""' → logprob: -7.514806270599365
    7. '\n' → logprob: -8.889806747436523
    8. '
' → logprob: -9.389806747436523
    9. '"""

' → logprob: -9.514806747436523
    10. '    
' → logprob: -9.889806747436523

Token 71: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13346250355243683
    2. '"""' → logprob: -2.383462429046631
    3. '```' → logprob: -4.508462429046631
    4. '"""
' (adapté à ' """
') → logprob: -4.508462429046631
    5. '\n' → logprob: -6.008462429046631
    6. '"' → logprob: -6.008462429046631
    7. '
' → logprob: -6.008462429046631
    8. '""' → logprob: -6.383462429046631
    9. '\' → logprob: -7.883462429046631
    10. '    
' → logprob: -8.008462905883789

Token 72: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3472132980823517
    2. '\n' → logprob: -2.2222132682800293
    3. '
' → logprob: -2.4722132682800293
    4. '    
' → logprob: -2.5972132682800293
    5. '\' → logprob: -4.722213268280029
    6. 'n' → logprob: -5.097213268280029
    7. '```' → logprob: -5.472213268280029
    8. ' 
' → logprob: -6.597213268280029
    9. ''\' → logprob: -6.722213268280029
    10. '       ' → logprob: -7.847213268280029

Token 73: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.40809541940689087
    2. 'n' → logprob: -1.408095359802246
    3. 'a' → logprob: -3.533095359802246
    4. 'v' → logprob: -3.658095359802246
    5. 'value' → logprob: -4.283095359802246
    6. 'try' → logprob: -5.033095359802246
    7. 'i' → logprob: -5.658095359802246
    8. 'x' → logprob: -5.783095359802246
    9. '    
' → logprob: -6.283095359802246
    10. 'first' → logprob: -6.533095359802246

Token 74: ' Lecture' (ID: 106534)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.7771499156951904
    2. 'n' → logprob: -1.2771499156951904
    3. 'x' → logprob: -2.6521499156951904
    4. 'v' → logprob: -2.9021499156951904
    5. 'a' → logprob: -3.2771499156951904
    6. ' i' → logprob: -3.7771499156951904
    7. '   ' → logprob: -4.2771501541137695
    8. 'e' → logprob: -4.6521501541137695
    9. 'value' → logprob: -4.7771501541137695
    10. ' ' → logprob: -5.2771501541137695

Token 75: ' et' (ID: 859)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11678323894739151
    2. ' ' → logprob: -2.7417831420898438
    3. '    ' → logprob: -3.4917831420898438
    4. ' des' → logprob: -5.116783142089844
    5. '  ' → logprob: -5.991783142089844
    6. 'n' → logprob: -6.491783142089844
    7. 'de' → logprob: -6.991783142089844
    8. ' de' → logprob: -7.491783142089844
    9. ' )' → logprob: -7.616783142089844
    10. 's' → logprob: -7.866783142089844

Token 76: ' transformation' (ID: 26242)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.8512756824493408
    2. ' validation' → logprob: -1.4762756824493408
    3. ' traitement' → logprob: -1.7262756824493408
    4. ' conversion' → logprob: -3.601275682449341
    5. 's' → logprob: -4.101275444030762
    6. ' comparaison' → logprob: -4.226275444030762
    7. ' ' → logprob: -4.726275444030762
    8. 'int' → logprob: -4.726275444030762
    9. 'r' → logprob: -4.976275444030762
    10. ' valid' → logprob: -5.226275444030762

Token 77: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.48982924222946167
    2. ' ' → logprob: -1.4898293018341064
    3. 'n' → logprob: -2.6148293018341064
    4. '    ' → logprob: -3.4898293018341064
    5. 'd' → logprob: -4.864829063415527
    6. ' de' → logprob: -4.864829063415527
    7. ' des' → logprob: -5.114829063415527
    8. 's' → logprob: -5.364829063415527
    9. 'de' → logprob: -5.364829063415527
    10. '  ' → logprob: -5.489829063415527

Token 78: ' l' (ID: 305)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -1.0427088737487793
    2. ' l' → logprob: -1.7927088737487793
    3. ' input' → logprob: -2.0427088737487793
    4. ' ' → logprob: -2.4177088737487793
    5. ' la' → logprob: -2.4177088737487793
    6. 'int' → logprob: -2.6677088737487793
    7. ' ent' → logprob: -3.2927088737487793
    8. 'input' → logprob: -3.9177088737487793
    9. 'val' → logprob: -4.667708873748779
    10. 'l' → logprob: -4.667708873748779

Token 79: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.603388786315918
    2. 'a' → logprob: -1.228388786315918
    3. ''ent' → logprob: -2.978388786315918
    4. 'es' → logprob: -3.103388786315918
    5. ''' → logprob: -3.353388786315918
    6. 'e' → logprob: -4.728388786315918
    7. 'input' → logprob: -4.978388786315918
    8. ''a' → logprob: -5.228388786315918
    9. ''utilisateur' → logprob: -6.103388786315918
    10. ' input' → logprob: -6.353388786315918

Token 80: ' utilisateur' (ID: 115595)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.19393116235733032
    2. 'n' → logprob: -2.4439311027526855
    3. 'a' → logprob: -2.8189311027526855
    4. 'x' → logprob: -4.8189311027526855
    5. '    
' → logprob: -5.0689311027526855
    6. ' a' → logprob: -5.3189311027526855
    7. 'v' → logprob: -5.6939311027526855
    8. 'val' → logprob: -6.6939311027526855
    9. ' x' → logprob: -6.8189311027526855
    10. ' ' → logprob: -7.1939311027526855

Token 81: ' :' (ID: 712)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6283778548240662
    2. 'n' → logprob: -1.128377914428711
    3. 'v' → logprob: -3.003377914428711
    4. 'a' → logprob: -3.753377914428711
    5. 'i' → logprob: -3.878377914428711
    6. '    
' → logprob: -4.003377914428711
    7. ' 
' → logprob: -5.003377914428711
    8. 'x' → logprob: -5.128377914428711
    9. '\n' → logprob: -5.253377914428711
    10. ' ' → logprob: -5.628377914428711

Token 82: ' on' (ID: 402)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.6313703060150146
    2. 'i' → logprob: -2.1313703060150146
    3. 'v' → logprob: -2.1313703060150146
    4. 'a' → logprob: -2.3813703060150146
    5. ' ' → logprob: -3.1313703060150146
    6. '   ' → logprob: -3.3813703060150146
    7. 'x' → logprob: -4.381370544433594
    8. 'r' → logprob: -4.506370544433594
    9. ' i' → logprob: -5.006370544433594
    10. ' 
' → logprob: -5.006370544433594

Token 83: ' attend' (ID: 13384)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3310776948928833
    2. ' ' → logprob: -2.5810775756835938
    3. ' try' → logprob: -3.3310775756835938
    4. '_' → logprob: -3.5810775756835938
    5. 'n' → logprob: -3.7060775756835938
    6. '=' → logprob: -3.7060775756835938
    7. 's' → logprob: -3.9560775756835938
    8. 'e' → logprob: -4.581077575683594
    9. 'r' → logprob: -4.706077575683594
    10. '1' → logprob: -5.206077575683594

Token 84: ' deux' (ID: 10301)
  Prédit: ' deux'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' deux' → logprob: -0.7277782559394836
    2. ' un' → logprob: -1.1027781963348389
    3. 'de' → logprob: -2.227778196334839
    4. ' ' → logprob: -3.102778196334839
    5. ' une' → logprob: -4.852778434753418
    6. ' de' → logprob: -5.727778434753418
    7. '  ' → logprob: -5.977778434753418
    8. 's' → logprob: -5.977778434753418
    9. ' two' → logprob: -6.227778434753418
    10. ' a' → logprob: -6.227778434753418

Token 85: ' ent' (ID: 1121)
  Prédit: ' ent'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ent' → logprob: -0.5110975503921509
    2. ' ' → logprob: -1.0110975503921509
    3. ' integers' → logprob: -3.8860974311828613
    4. 'ent' → logprob: -5.261097431182861
    5. ' int' → logprob: -5.511097431182861
    6. ' espaces' → logprob: -6.511097431182861
    7. ' entier' → logprob: -7.011097431182861
    8. ' )' → logprob: -7.261097431182861
    9. ' valeurs' → logprob: -7.511097431182861
    10. 'int' → logprob: -8.13609790802002

Token 86: 'iers' (ID: 11012)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.058550383895635605
    2. 'iers' → logprob: -3.4335503578186035
    3. 'e' → logprob: -4.5585503578186035
    4. 't' → logprob: -5.4335503578186035
    5. 'ié' → logprob: -5.5585503578186035
    6. '   ' → logprob: -5.9335503578186035
    7. 'ier' → logprob: -6.9335503578186035
    8. 's' → logprob: -7.9335503578186035
    9. ' ' → logprob: -8.058550834655762
    10. 'ie' → logprob: -8.308550834655762

Token 87: ' sépar' (ID: 97160)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9203155636787415
    2. '    
' → logprob: -1.2953155040740967
    3. '
' → logprob: -1.6703155040740967
    4. '\n' → logprob: -2.7953155040740967
    5. ',' → logprob: -3.6703155040740967
    6. 'n' → logprob: -3.9203155040740967
    7. '  
' → logprob: -4.795315742492676
    8. ' 
' → logprob: -5.045315742492676
    9. '   
' → logprob: -5.295315742492676
    10. '     
' → logprob: -6.420315742492676

Token 88: 'és' (ID: 1756)
  Prédit: 'és'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'és' → logprob: -0.1129160076379776
    2. 'é' → logprob: -2.2379159927368164
    3. 'es' → logprob: -9.737915992736816
    4. 'e' → logprob: -11.362915992736816
    5. 'er' → logprob: -12.237915992736816
    6. 'ès' → logprob: -12.612915992736816
    7. 'ée' → logprob: -12.737915992736816
    8. '```' → logprob: -12.987915992736816
    9. 'ées' → logprob: -13.237915992736816
    10. 's' → logprob: -13.237915992736816

Token 89: ' par' (ID: 686)
  Prédit: ' par'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' par' → logprob: -0.5993396639823914
    2. 'par' → logprob: -0.8493396639823914
    3. '_par' → logprob: -5.099339485168457
    4. 'es' → logprob: -5.974339485168457
    5. '  ' → logprob: -6.224339485168457
    6. ' ' → logprob: -6.474339485168457
    7. '<|end|>' → logprob: -6.474339485168457
    8. ')' → logprob: -6.599339485168457
    9. ',' → logprob: -6.599339485168457
    10. '=' → logprob: -6.849339485168457

Token 90: ' un' (ID: 537)
  Prédit: 'un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'un' → logprob: -0.5797500610351562
    2. ' un' → logprob: -1.0797500610351562
    3. ''un' → logprob: -2.8297500610351562
    4. ' ' → logprob: -4.204750061035156
    5. 'une' → logprob: -5.204750061035156
    6. 'es' → logprob: -5.579750061035156
    7. ' une' → logprob: -5.704750061035156
    8. ''' → logprob: -5.704750061035156
    9. 'l' → logprob: -6.079750061035156
    10. ' espace' → logprob: -6.579750061035156

Token 91: ' espace' (ID: 66004)
  Prédit: ' espace'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' espace' → logprob: -0.8932695984840393
    2. 'es' → logprob: -1.1432695388793945
    3. ''espace' → logprob: -1.6432695388793945
    4. ' ' → logprob: -3.0182695388793945
    5. 'space' → logprob: -4.5182695388793945
    6. ''' → logprob: -5.3932695388793945
    7. ''esp' → logprob: -5.7682695388793945
    8. '’espace' → logprob: -5.8932695388793945
    9. 'esp' → logprob: -6.0182695388793945
    10. '"' → logprob: -6.7682695388793945

Token 92: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7105896472930908
    2. '\n' → logprob: -1.3355896472930908
    3. 'n' → logprob: -2.335589647293091
    4. '    
' → logprob: -2.460589647293091
    5. ' 
' → logprob: -3.710589647293091
    6. 'r' → logprob: -4.960589408874512
    7. 'v' → logprob: -5.085589408874512
    8. '   
' → logprob: -5.460589408874512
    9. '     
' → logprob: -5.710589408874512
    10. '\' → logprob: -5.710589408874512

Token 93: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18526819348335266
    2. 'n' → logprob: -2.3102681636810303
    3. 'r' → logprob: -3.9352681636810303
    4. 'v' → logprob: -4.560268402099609
    5. '\n' → logprob: -4.560268402099609
    6. ' 
' → logprob: -5.185268402099609
    7. ' ' → logprob: -5.435268402099609
    8. '    
' → logprob: -5.435268402099609
    9. 'i' → logprob: -5.560268402099609
    10. '    ' → logprob: -6.185268402099609

Token 94: ' x' (ID: 1215)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.3416937291622162
    2. 'values' → logprob: -2.591693639755249
    3. 'val' → logprob: -2.966693639755249
    4. 'x' (adapté à ' x') → logprob: -3.341693639755249
    5. '   ' → logprob: -3.466693639755249
    6. 'n' → logprob: -3.591693639755249
    7. 'v' → logprob: -4.341693878173828
    8. 'i' → logprob: -4.591693878173828
    9. 'inputs' → logprob: -4.841693878173828
    10. 'input' → logprob: -4.841693878173828

Token 95: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.024891508743166924
    2. ' =' → logprob: -3.8998916149139404
    3. ' ,' → logprob: -5.774891376495361
    4. '=' → logprob: -7.399891376495361
    5. ' ' → logprob: -7.899891376495361
    6. 's' → logprob: -9.27489185333252
    7. '1' → logprob: -9.77489185333252
    8. ',x' → logprob: -10.14989185333252
    9. ',s' → logprob: -11.52489185333252
    10. '   ' → logprob: -11.64989185333252

Token 96: ' a' (ID: 261)
  Prédit: ' y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.2519405782222748
    2. 'y' → logprob: -1.5019406080245972
    3. ' ' → logprob: -11.751940727233887
    4. '	y' → logprob: -13.126940727233887
    5. '  ' → logprob: -14.501940727233887
    6. ' ' → logprob: -14.876940727233887
    7. '<|end|>' → logprob: -15.376940727233887
    8. '_y' → logprob: -16.12693977355957
    9. 'space' → logprob: -16.25193977355957
    10. 's' → logprob: -16.37693977355957

Token 97: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.23036223649978638
    2. '=' → logprob: -1.6053621768951416
    3. 'pp' → logprob: -6.605362415313721
    4. 'b' → logprob: -6.855362415313721
    5. ',' → logprob: -6.980362415313721
    6. '=int' → logprob: -7.855362415313721
    7. 'r' → logprob: -8.105361938476562
    8. '=input' → logprob: -8.355361938476562
    9. ' ' → logprob: -8.980361938476562
    10. ',b' → logprob: -9.230361938476562

Token 98: ' map' (ID: 4014)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.704868495464325
    2. ' map' → logprob: -0.704868495464325
    3. 'input' → logprob: -4.704868316650391
    4. ' input' → logprob: -5.954868316650391
    5. 'int' → logprob: -12.20486831665039
    6. 'list' → logprob: -13.70486831665039
    7. ' list' → logprob: -14.45486831665039
    8. '	map' → logprob: -14.70486831665039
    9. '[' → logprob: -15.07986831665039
    10. 'm' → logprob: -15.45486831665039

Token 99: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.38734447956085205
    2. '(' → logprob: -1.137344479560852
    3. '(input' → logprob: -8.012344360351562
    4. '(str' → logprob: -9.637344360351562
    5. '(
' → logprob: -10.387344360351562
    6. 'int' → logprob: -10.762344360351562
    7. ' (' → logprob: -11.262344360351562
    8. '(in' → logprob: -12.637344360351562
    9. '(list' → logprob: -13.637344360351562
    10. '(lambda' → logprob: -13.637344360351562

Token 100: ',' (ID: 11)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.3327558636665344
    2. '(input' → logprob: -1.5827558040618896
    3. ' input' → logprob: -3.3327558040618896
    4. ',input' → logprob: -3.8327558040618896
    5. ')' → logprob: -4.332756042480469
    6. ',' → logprob: -5.082756042480469
    7. '   ' → logprob: -7.582756042480469
    8. '(' → logprob: -8.582756042480469
    9. ' ,' → logprob: -9.332756042480469
    10. ' (' → logprob: -9.582756042480469

Token 101: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.10022953152656555
    2. ' input' → logprob: -2.350229501724243
    3. '   ' → logprob: -10.850229263305664
    4. ' ' → logprob: -13.725229263305664
    5. ')' → logprob: -13.975229263305664
    6. '(input' → logprob: -14.100229263305664
    7. '	input' → logprob: -14.850229263305664
    8. '=input' → logprob: -15.225229263305664
    9. ',input' → logprob: -16.600229263305664
    10. '```' → logprob: -16.850229263305664

Token 102: '("' (ID: 568)
  Prédit: '().'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '().' → logprob: -0.001444045570679009
    2. '()' → logprob: -6.626443862915039
    3. '())' → logprob: -9.251443862915039
    4. ')' → logprob: -11.126443862915039
    5. ' ().' → logprob: -12.376443862915039
    6. '(' → logprob: -13.501443862915039
    7. ' ()' → logprob: -15.251443862915039
    8. '()
' → logprob: -15.376443862915039
    9. '("").' → logprob: -15.376443862915039
    10. '(input' → logprob: -15.626443862915039

Token 103: 'Ent' (ID: 3263)
  Prédit: '").'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '").' → logprob: -0.04733509570360184
    2. '("' → logprob: -3.797335147857666
    3. '")' → logprob: -5.047335147857666
    4. '"))' → logprob: -5.172335147857666
    5. 'Enter' → logprob: -5.422335147857666
    6. 'Please' → logprob: -6.922335147857666
    7. 'Ent' → logprob: -6.922335147857666
    8. 'Veuillez' → logprob: -7.297335147857666
    9. '()' → logprob: -7.547335147857666
    10. '(' → logprob: -7.547335147857666

Token 104: 'rez' (ID: 13676)
  Prédit: 'iers'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.320210337638855
    2. 'ier' → logprob: -1.570210337638855
    3. 'rez' → logprob: -3.3202104568481445
    4. 'er' → logprob: -4.5702104568481445
    5. 'ières' → logprob: -5.0702104568481445
    6. 're' → logprob: -5.1952104568481445
    7. 'r' → logprob: -5.6952104568481445
    8. ' ier' → logprob: -7.4452104568481445
    9. 'ière' → logprob: -7.9452104568481445
    10. 'ieres' → logprob: -7.9452104568481445

Token 105: ' deux' (ID: 10301)
  Prédit: ' deux'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' deux' → logprob: -0.012685519643127918
    2. ' two' → logprob: -5.387685298919678
    3. ' les' → logprob: -6.137685298919678
    4. ' ' → logprob: -6.387685298919678
    5. ' "' → logprob: -7.012685298919678
    6. 'de' → logprob: -7.262685298919678
    7. '<|end|>' → logprob: -7.262685298919678
    8. ' "))' → logprob: -7.887685298919678
    9. ' des' → logprob: -8.137685775756836
    10. ' vos' → logprob: -8.512685775756836

Token 106: ' ent' (ID: 1121)
  Prédit: ' ent'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ent' → logprob: -0.012403221800923347
    2. ' nombres' → logprob: -5.2624030113220215
    3. 'ent' → logprob: -5.5124030113220215
    4. ' integers' → logprob: -6.3874030113220215
    5. ' entier' → logprob: -7.6374030113220215
    6. ' ' → logprob: -7.7624030113220215
    7. ' valeurs' → logprob: -8.01240348815918
    8. '_ent' → logprob: -10.26240348815918
    9. ' entière' → logprob: -10.88740348815918
    10. 'inte' → logprob: -11.13740348815918

Token 107: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.04996601119637489
    2. 't' → logprob: -3.4249660968780518
    3. 'ti' → logprob: -4.299965858459473
    4. 'tiers' → logprob: -6.174965858459473
    5. ' ti' → logprob: -9.174965858459473
    6. 'ts' → logprob: -9.299965858459473
    7. 'ers' → logprob: -9.549965858459473
    8. 'i' → logprob: -9.924965858459473
    9. 'riers' → logprob: -10.049965858459473
    10. '	ti' → logprob: -10.299965858459473

Token 108: ' sépar' (ID: 97160)
  Prédit: '").'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '").' → logprob: -0.6819778680801392
    2. ' ").' → logprob: -1.5569778680801392
    3. '()' → logprob: -2.0569777488708496
    4. ':' → logprob: -2.8069777488708496
    5. '().' → logprob: -2.9319777488708496
    6. '():' → logprob: -4.30697774887085
    7. ' :' → logprob: -4.43197774887085
    8. '   ' → logprob: -5.43197774887085
    9. ' ' → logprob: -5.68197774887085
    10. ' sépar' → logprob: -6.55697774887085

Token 109: 'és' (ID: 1756)
  Prédit: 'és'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'és' → logprob: -0.023609742522239685
    2. 'é' → logprob: -3.7736096382141113
    3. 'es' → logprob: -8.39861011505127
    4. 's' → logprob: -9.89861011505127
    5. 'e' → logprob: -10.52361011505127
    6. ' par' → logprob: -11.27361011505127
    7. 'par' → logprob: -11.39861011505127
    8. 'ès' → logprob: -11.64861011505127
    9. 'er' → logprob: -12.77361011505127
    10. '```' → logprob: -12.77361011505127

Token 110: ' par' (ID: 686)
  Prédit: ' par'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' par' → logprob: -0.03409651294350624
    2. 'par' → logprob: -3.4090964794158936
    3. ' ' → logprob: -8.409096717834473
    4. '_par' → logprob: -9.909096717834473
    5. 'e' → logprob: -10.034096717834473
    6. '<|end|>' → logprob: -10.034096717834473
    7. ' by' → logprob: -10.784096717834473
    8. 'es' → logprob: -10.909096717834473
    9. ')' → logprob: -11.159096717834473
    10. '  ' → logprob: -11.784096717834473

Token 111: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.20553629100322723
    2. 'un' → logprob: -1.9555362462997437
    3. ''un' → logprob: -4.205536365509033
    4. ' espace' → logprob: -4.455536365509033
    5. ' ' → logprob: -4.705536365509033
    6. ''espace' → logprob: -5.705536365509033
    7. ' espaces' → logprob: -6.705536365509033
    8. 'space' → logprob: -7.330536365509033
    9. 'es' → logprob: -7.455536365509033
    10. ''' → logprob: -7.705536365509033

Token 112: ' espace' (ID: 66004)
  Prédit: ' espace'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' espace' → logprob: -0.29520073533058167
    2. ''espace' → logprob: -2.295200824737549
    3. 'es' → logprob: -2.420200824737549
    4. '_' → logprob: -3.670200824737549
    5. ' espaces' → logprob: -4.045200824737549
    6. '’espace' → logprob: -4.545200824737549
    7. 'esp' → logprob: -5.545200824737549
    8. 'space' → logprob: -5.545200824737549
    9. ' ' → logprob: -6.170200824737549
    10. '_es' → logprob: -7.670200824737549

Token 113: ' (' (ID: 350)
  Prédit: '").'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '").' → logprob: -0.000993272173218429
    2. ').' → logprob: -8.125993728637695
    3. '")' → logprob: -8.375993728637695
    4. '').' → logprob: -8.625993728637695
    5. ' ").' → logprob: -8.875993728637695
    6. '"' → logprob: -9.500993728637695
    7. ':' → logprob: -10.375993728637695
    8. ')' → logprob: -10.875993728637695
    9. ')").' → logprob: -11.750993728637695
    10. '")).' → logprob: -13.250993728637695

Token 114: 'x' (ID: 87)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.049245093017816544
    2. ')">' → logprob: -4.0492448806762695
    3. ')")' → logprob: -4.4242448806762695
    4. '):' → logprob: -4.9242448806762695
    5. '")' → logprob: -5.4242448806762695
    6. ')>' → logprob: -5.7992448806762695
    7. '">' → logprob: -6.4242448806762695
    8. ')").' → logprob: -6.5492448806762695
    9. '"' → logprob: -8.92424488067627
    10. ')').' → logprob: -9.04924488067627

Token 115: ' a' (ID: 261)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.10823839902877808
    2. ' ,' → logprob: -2.733238458633423
    3. ' et' → logprob: -3.483238458633423
    4. ' ' → logprob: -6.483238220214844
    5. ' a' → logprob: -6.733238220214844
    6. ' )' → logprob: -6.733238220214844
    7. ')' → logprob: -6.983238220214844
    8. '):' → logprob: -7.483238220214844
    9. 'et' → logprob: -8.108238220214844
    10. ' ):' → logprob: -8.483238220214844

Token 116: ')' (ID: 8)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.04339820519089699
    2. ')' → logprob: -3.168398141860962
    3. ''):' → logprob: -8.793397903442383
    4. ':' → logprob: -10.043397903442383
    5. ' ):' → logprob: -10.168397903442383
    6. '"):' → logprob: -10.168397903442383
    7. ')>' → logprob: -10.293397903442383
    8. ')").' → logprob: -10.668397903442383
    9. '>' → logprob: -11.043397903442383
    10. '=' → logprob: -11.543397903442383

Token 117: ' :' (ID: 712)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.37359490990638733
    2. ':' → logprob: -1.873594880104065
    3. ')' → logprob: -2.2485949993133545
    4. '").' → logprob: -3.4985949993133545
    5. '"):' → logprob: -4.498594760894775
    6. '")' → logprob: -4.873594760894775
    7. ')").' → logprob: -6.748594760894775
    8. ').' → logprob: -7.123594760894775
    9. ' :' → logprob: -7.498594760894775
    10. '"' → logprob: -8.373595237731934

Token 118: ' ").' (ID: 49234)
  Prédit: '").'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '").' → logprob: -0.009505674242973328
    2. ').' → logprob: -5.509505748748779
    3. '"))' → logprob: -6.009505748748779
    4. '")' → logprob: -6.384505748748779
    5. ')' → logprob: -7.259505748748779
    6. ' ").' → logprob: -8.634505271911621
    7. '"' → logprob: -8.759505271911621
    8. ')")' → logprob: -9.634505271911621
    9. '').' → logprob: -9.759505271911621
    10. '))' → logprob: -9.759505271911621

Token 119: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0005544631858356297
    2. 'strip' → logprob: -7.50055456161499
    3. 'rstrip' → logprob: -13.875554084777832
    4. 'spl' → logprob: -15.250554084777832
    5. ' split' → logprob: -15.375554084777832
    6. 's' → logprob: -17.62555503845215
    7. '(split' → logprob: -17.87555503845215
    8. '.split' → logprob: -20.75055503845215
    9. 'str' → logprob: -21.12555503845215
    10. ' ' → logprob: -21.12555503845215

Token 120: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.010141931474208832
    2. '()' → logprob: -5.260141849517822
    3. '()))' → logprob: -6.260141849517822
    4. ')' → logprob: -6.260141849517822
    5. '('' → logprob: -7.260141849517822
    6. '(' → logprob: -8.63514232635498
    7. '("' → logprob: -9.63514232635498
    8. '())
' → logprob: -9.63514232635498
    9. '))' → logprob: -10.38514232635498
    10. ' ())' → logprob: -11.51014232635498

Token 121: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.022029703482985497
    2. '   ' → logprob: -4.397029876708984
    3. '    
' → logprob: -5.772029876708984
    4. '  
' → logprob: -5.772029876708984
    5. '\n' → logprob: -6.522029876708984
    6. ' 
' → logprob: -6.647029876708984
    7. '```' → logprob: -8.522029876708984
    8. '   
' → logprob: -9.272029876708984
    9. 'if' → logprob: -9.647029876708984
    10. ' ' → logprob: -11.022029876708984

Token 122: ' #' (ID: 1069)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.006297995802015066
    2. 'i' → logprob: -5.381298065185547
    3. '   ' → logprob: -6.631298065185547
    4. ' if' → logprob: -8.256298065185547
    5. 'return' → logprob: -10.131298065185547
    6. '```' → logprob: -11.006298065185547
    7. '    
' → logprob: -11.256298065185547
    8. '
' → logprob: -11.506298065185547
    9. ' ' → logprob: -11.881298065185547
    10. '  
' → logprob: -12.006298065185547

Token 123: ' Compar' (ID: 35094)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.07007903605699539
    2. ' if' → logprob: -2.6950790882110596
    3. 'print' → logprob: -10.19507884979248
    4. 'result' → logprob: -10.32007884979248
    5. 'return' → logprob: -11.07007884979248
    6. 'i' → logprob: -11.32007884979248
    7. '```' → logprob: -11.32007884979248
    8. '   ' → logprob: -11.32007884979248
    9. '
' → logprob: -12.19507884979248
    10. ' ' → logprob: -13.19507884979248

Token 124: 'aison' (ID: 37278)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.19920982420444489
    2. '   ' → logprob: -2.4492099285125732
    3. 'if' → logprob: -3.0742099285125732
    4. 'e' → logprob: -3.8242099285125732
    5. ' if' → logprob: -4.574209690093994
    6. 'ons' → logprob: -4.699209690093994
    7. 'aison' → logprob: -5.824209690093994
    8. '    
' → logprob: -7.324209690093994
    9. '  ' → logprob: -7.699209690093994
    10. ' ' → logprob: -7.949209690093994

Token 125: ' :' (ID: 712)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4172382950782776
    2. ' if' → logprob: -1.6672382354736328
    3. 'if' → logprob: -3.042238235473633
    4. ':' → logprob: -3.417238235473633
    5. ' ' → logprob: -3.917238235473633
    6. '    
' → logprob: -4.167238235473633
    7. '<|end|>' → logprob: -4.667238235473633
    8. ',' → logprob: -5.292238235473633
    9. '  
' → logprob: -5.292238235473633
    10. ' 
' → logprob: -5.292238235473633

Token 126: ' si' (ID: 1784)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.30115118622779846
    2. ' if' → logprob: -1.551151156425476
    3. '   ' → logprob: -3.0511512756347656
    4. 'print' → logprob: -7.301151275634766
    5. ' print' → logprob: -10.801151275634766
    6. ' ' → logprob: -11.551151275634766
    7. '    ' → logprob: -11.926151275634766
    8. '```' → logprob: -12.301151275634766
    9. '  ' → logprob: -12.676151275634766
    10. '	if' → logprob: -13.426151275634766

Token 127: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.023255029693245888
    2. 'x' → logprob: -3.7732551097869873
    3. ' ' → logprob: -12.398255348205566
    4. ' ' → logprob: -12.773255348205566
    5. '	x' → logprob: -13.148255348205566
    6. '(x' → logprob: -15.648255348205566
    7. ' ‌' → logprob: -15.773255348205566
    8. '  ' → logprob: -16.52325439453125
    9. ' (' → logprob: -16.89825439453125
    10. ' ' → logprob: -17.14825439453125

Token 128: ' est' (ID: 893)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.01113164983689785
    2. '<' → logprob: -4.511131763458252
    3. ' ' → logprob: -9.886131286621094
    4. '<|end|>' → logprob: -10.511131286621094
    5. '<int' → logprob: -13.386131286621094
    6. ' ' → logprob: -13.636131286621094
    7. ' \<' → logprob: -14.386131286621094
    8. ' <",' → logprob: -14.511131286621094
    9. '  ' → logprob: -15.261131286621094
    10. '<|end|>' → logprob: -15.761131286621094

Token 129: ' strict' (ID: 12035)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.2226237654685974
    2. '<' → logprob: -1.7226238250732422
    3. 'strict' → logprob: -4.347623825073242
    4. ' inférieur' → logprob: -5.722623825073242
    5. ' strictly' → logprob: -5.972623825073242
    6. ' strict' → logprob: -6.847623825073242
    7. ' ' → logprob: -7.222623825073242
    8. '<|end|>' → logprob: -9.097623825073242
    9. ' ' → logprob: -9.972623825073242
    10. 'Strict' → logprob: -10.222623825073242

Token 130: 'ement' (ID: 962)
  Prédit: 'ement'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ement' → logprob: -0.000386105413781479
    2. 'ly' → logprob: -8.125386238098145
    3. 'ment' → logprob: -10.375386238098145
    4. 'ément' → logprob: -10.625386238098145
    5. 'èrement' → logprob: -11.250386238098145
    6. 'rement' → logprob: -11.375386238098145
    7. 'lement' → logprob: -13.000386238098145
    8. 'urement' → logprob: -13.750386238098145
    9. 'EMENT' → logprob: -13.875386238098145
    10. 'ements' → logprob: -14.125386238098145

Token 131: ' inférieur' (ID: 191498)
  Prédit: ' inférieur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' inférieur' → logprob: -0.11815360933542252
    2. '<' → logprob: -2.4931535720825195
    3. 'inf' → logprob: -4.4931535720825195
    4. ' <' → logprob: -4.6181535720825195
    5. 'infer' → logprob: -5.3681535720825195
    6. ' inf' → logprob: -5.9931535720825195
    7. ' ' → logprob: -8.24315357208252
    8. ' moindre' → logprob: -9.74315357208252
    9. '<|end|>' → logprob: -9.74315357208252
    10. ' inferior' → logprob: -10.24315357208252

Token 132: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.16566938161849976
    2. ' a' → logprob: -2.2906694412231445
    3. ' ' → logprob: -3.6656694412231445
    4. '  ' → logprob: -5.1656694412231445
    5. 'à' → logprob: -5.2906694412231445
    6. 'a' → logprob: -5.2906694412231445
    7. '<|end|>' → logprob: -5.7906694412231445
    8. ' au' → logprob: -5.9156694412231445
    9. ' to' → logprob: -6.0406694412231445
    10. '   ' → logprob: -7.5406694412231445

Token 133: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.2014193832874298
    2. ' a' → logprob: -1.7014193534851074
    3. ' ' → logprob: -12.576419830322266
    4. ' ' → logprob: -13.076419830322266
    5. '	a' → logprob: -14.951419830322266
    6. '>a' → logprob: -17.326419830322266
    7. '  ' → logprob: -17.701419830322266
    8. '_a' → logprob: -17.826419830322266
    9. ''a' → logprob: -17.951419830322266
    10. '```' → logprob: -18.201419830322266

Token 134: ',' (ID: 11)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.04676463082432747
    2. ',' → logprob: -3.296764612197876
    3. '   ' → logprob: -5.046764850616455
    4. ':
' → logprob: -6.421764850616455
    5. ' :' → logprob: -7.921764850616455
    6. ')' → logprob: -9.171764373779297
    7. '):' → logprob: -9.796764373779297
    8. '.' → logprob: -10.671764373779297
    9. '<|end|>' → logprob: -10.921764373779297
    10. ' ,' → logprob: -11.671764373779297

Token 135: ' afficher' (ID: 146524)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7132754921913147
    2. ' print' → logprob: -0.8382754921913147
    3. 'print' → logprob: -3.08827543258667
    4. '       ' → logprob: -3.96327543258667
    5. '    ' → logprob: -4.46327543258667
    6. ' ' → logprob: -7.83827543258667
    7. ' ' → logprob: -7.96327543258667
    8. '	print' → logprob: -9.213275909423828
    9. '    
' → logprob: -9.213275909423828
    10. ' 
' → logprob: -9.213275909423828

Token 136: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.30998221039772034
    2. ' ' → logprob: -1.434982180595398
    3. '"' → logprob: -3.6849822998046875
    4. ' "' → logprob: -6.1849822998046875
    5. ''' → logprob: -6.9349822998046875
    6. '   ' → logprob: -9.434982299804688
    7. ' '' → logprob: -9.559982299804688
    8. '`' → logprob: -10.184982299804688
    9. '("' → logprob: -10.684982299804688
    10. '(' → logprob: -10.809982299804688

Token 137: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.001982402754947543
    2. '"' → logprob: -6.37698221206665
    3. ' ' → logprob: -8.376982688903809
    4. ''' → logprob: -10.001982688903809
    5. '`' → logprob: -13.376982688903809
    6. ' "' → logprob: -13.751982688903809
    7. '   ' → logprob: -13.876982688903809
    8. '```' → logprob: -14.751982688903809
    9. '(' → logprob: -15.876982688903809
    10. '  ' → logprob: -16.126981735229492

Token 138: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0052470373921096325
    2. '
' → logprob: -5.505247116088867
    3. '    
' → logprob: -7.380247116088867
    4. ' else' → logprob: -9.005247116088867
    5. ',' → logprob: -9.255247116088867
    6. 'else' → logprob: -9.505247116088867
    7. '<|end|>' → logprob: -9.505247116088867
    8. ':' → logprob: -10.130247116088867
    9. ')' → logprob: -10.880247116088867
    10. '  ' → logprob: -11.255247116088867

Token 139: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0007549546426162124
    2. '
' → logprob: -7.5007548332214355
    3. 'if' → logprob: -10.000755310058594
    4. '    
' → logprob: -10.125755310058594
    5. ' if' → logprob: -10.125755310058594
    6. ' else' → logprob: -10.750755310058594
    7. 'else' → logprob: -11.125755310058594
    8. '```' → logprob: -11.250755310058594
    9. ' ' → logprob: -12.125755310058594
    10. '       ' → logprob: -12.625755310058594

Token 140: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008961988613009453
    2. ' if' → logprob: -5.258962154388428
    3. 'if' (adapté à ' if') → logprob: -6.383962154388428
    4. '
' → logprob: -6.508962154388428
    5. '    
' → logprob: -7.633962154388428
    6. '```' → logprob: -10.50896167755127
    7. '  
' → logprob: -12.13396167755127
    8. ' 
' → logprob: -12.25896167755127
    9. '   
' → logprob: -12.50896167755127
    10. '	if' → logprob: -12.63396167755127

Token 141: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.00013250234769657254
    2. 'x' → logprob: -9.37513256072998
    3. ' ' → logprob: -10.37513256072998
    4. ' ' → logprob: -11.12513256072998
    5. '	x' → logprob: -13.62513256072998
    6. ' ‌' → logprob: -15.25013256072998
    7. ' ' → logprob: -16.500131607055664
    8. ' (' → logprob: -16.625131607055664
    9. '    ' → logprob: -17.250131607055664
    10. '	' → logprob: -18.625131607055664

Token 142: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.0005676874425262213
    2. '<' → logprob: -7.50056791305542
    3. ' ' → logprob: -11.250567436218262
    4. ' <",' → logprob: -14.250567436218262
    5. ' <
' → logprob: -14.875567436218262
    6. '<|end|>' → logprob: -15.875567436218262
    7. ' \<' → logprob: -15.875567436218262
    8. '  ' → logprob: -16.250568389892578
    9. ' ' → logprob: -16.625568389892578
    10. '<int' → logprob: -17.250568389892578

Token 143: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.20141568779945374
    2. 'a' → logprob: -1.7014156579971313
    3. '	a' → logprob: -13.826416015625
    4. ' ' → logprob: -14.201416015625
    5. ' ' → logprob: -14.201416015625
    6. '_a' → logprob: -16.326416015625
    7. '   ' → logprob: -16.951416015625
    8. '  ' → logprob: -17.576416015625
    9. ' а' → logprob: -18.201416015625
    10. '    ' → logprob: -18.326416015625

Token 144: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.008746940642595291
    2. ':
' → logprob: -4.758747100830078
    3. '   ' → logprob: -9.508747100830078
    4. ' :' → logprob: -10.508747100830078
    5. '       ' → logprob: -10.633747100830078
    6. '):' → logprob: -12.633747100830078
    7. ' :
' → logprob: -13.508747100830078
    8. ':
' → logprob: -14.383747100830078
    9. ')' → logprob: -14.508747100830078
    10. '):
' → logprob: -14.633747100830078

Token 145: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0021067210473120213
    2. '   ' → logprob: -6.252106666564941
    3. 'print' → logprob: -9.252106666564941
    4. ' print' → logprob: -10.002106666564941
    5. '
' → logprob: -11.877106666564941
    6. ':' → logprob: -11.877106666564941
    7. '0' → logprob: -12.377106666564941
    8. '\n' → logprob: -12.752106666564941
    9. '           ' → logprob: -12.877106666564941
    10. '    
' → logprob: -13.377106666564941

Token 146: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.014145639725029469
    2. '       ' → logprob: -4.889145851135254
    3. ' print' → logprob: -5.514145851135254
    4. '0' → logprob: -6.014145851135254
    5. '   ' → logprob: -10.139145851135254
    6. ' ' → logprob: -13.139145851135254
    7. 'pr' → logprob: -13.889145851135254
    8. '```' → logprob: -14.014145851135254
    9. 'return' → logprob: -14.764145851135254
    10. '           ' → logprob: -15.014145851135254

Token 147: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -4.739826181321405e-05
    2. '0' → logprob: -10.00004768371582
    3. ' (' → logprob: -13.75004768371582
    4. '("' → logprob: -14.75004768371582
    5. '('' → logprob: -15.62504768371582
    6. '(
' → logprob: -15.75004768371582
    7. ' ' → logprob: -16.25004768371582
    8. '()' → logprob: -17.62504768371582
    9. '(

' → logprob: -18.50004768371582
    10. '   ' → logprob: -20.37504768371582

Token 148: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.9361264946837764e-07
    2. ' ' → logprob: -15.75
    3. '   ' → logprob: -19.875
    4. '"' → logprob: -20.375
    5. ')' → logprob: -21.875
    6. '       ' → logprob: -22.625
    7. ''' → logprob: -22.75
    8. '`' → logprob: -24.25
    9. '۰' → logprob: -24.5
    10. '０' → logprob: -24.625

Token 149: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0020401063375175
    2. ')
' → logprob: -6.252039909362793
    3. '   ' → logprob: -9.127039909362793
    4. ' )' → logprob: -13.002039909362793
    5. ')

' → logprob: -15.502039909362793
    6. '       ' → logprob: -16.50204086303711
    7. ' ' → logprob: -16.62704086303711
    8. ')
' → logprob: -16.75204086303711
    9. 'else' → logprob: -17.00204086303711
    10. '))' → logprob: -17.12704086303711

Token 150: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0034420802257955074
    2. 'else' → logprob: -6.253442287445068
    3. ' else' → logprob: -6.503442287445068
    4. '    
' → logprob: -12.37844181060791
    5. '	else' → logprob: -12.62844181060791
    6. '
' → logprob: -13.00344181060791
    7. ' ' → logprob: -13.50344181060791
    8. '```' → logprob: -13.50344181060791
    9. '  ' → logprob: -13.87844181060791
    10. '    ' → logprob: -16.003442764282227

Token 151: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3589736521244049
    2. 'else' → logprob: -1.3589736223220825
    3. ' else' → logprob: -3.108973741531372
    4. ' ' → logprob: -10.983973503112793
    5. '	else' → logprob: -11.733973503112793
    6. '  ' → logprob: -12.483973503112793
    7. '    
' → logprob: -12.858973503112793
    8. 'e' → logprob: -13.233973503112793
    9. '```' → logprob: -13.983973503112793
    10. 'els' → logprob: -14.108973503112793

Token 152: ' Sinon' (ID: 154924)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.027608992531895638
    2. ' else' → logprob: -3.65260910987854
    3. '   ' → logprob: -6.652608871459961
    4. 'e' → logprob: -12.152608871459961
    5. ' ' → logprob: -12.402608871459961
    6. 'print' → logprob: -13.277608871459961
    7. '10' → logprob: -13.777608871459961
    8. '  ' → logprob: -13.902608871459961
    9. 'els' → logprob: -14.027608871459961
    10. 'el' → logprob: -14.277608871459961

Token 153: ' (' (ID: 350)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.02570897527039051
    2. '   ' → logprob: -4.15070915222168
    3. ':
' → logprob: -5.15070915222168
    4. '       ' → logprob: -6.40070915222168
    5. 'else' → logprob: -6.52570915222168
    6. ' :' → logprob: -7.90070915222168
    7. ' else' → logprob: -8.15070915222168
    8. '    ' → logprob: -10.90070915222168
    9. ' :
' → logprob: -11.65070915222168
    10. '```' → logprob: -12.65070915222168

Token 154: 'x' (ID: 87)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5456812381744385
    2. '   ' → logprob: -0.9206812381744385
    3. ':
' → logprob: -4.670680999755859
    4. '    ' → logprob: -5.045680999755859
    5. '       ' → logprob: -5.670680999755859
    6. ' :' → logprob: -6.295680999755859
    7. '10' → logprob: -8.17068099975586
    8. '```' → logprob: -8.79568099975586
    9. ' :
' → logprob: -8.92068099975586
    10. '):
' → logprob: -9.04568099975586

Token 155: ' >=' (ID: 5064)
  Prédit: ' >='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.12781506776809692
    2. '>=' → logprob: -2.127815008163452
    3. '   ' → logprob: -8.002815246582031
    4. ')' → logprob: -8.252815246582031
    5. '    ' → logprob: -9.877815246582031
    6. ' <=' → logprob: -10.127815246582031
    7. 'else' → logprob: -10.252815246582031
    8. ' ' → logprob: -10.377815246582031
    9. ')>=' → logprob: -10.752815246582031
    10. '<=' → logprob: -11.252815246582031

Token 156: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.5760047435760498
    2. 'a' → logprob: -0.8260047435760498
    3. '   ' → logprob: -10.326004981994629
    4. ' ' → logprob: -10.951004981994629
    5. '	a' → logprob: -12.201004981994629
    6. ')' → logprob: -12.451004981994629
    7. '10' → logprob: -13.576004981994629
    8. '  ' → logprob: -13.701004981994629
    9. ' ' → logprob: -14.201004981994629
    10. '    ' → logprob: -14.326004981994629

Token 157: '),' (ID: 936)
  Prédit: '):
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.04776136577129364
    2. '):' → logprob: -3.1727614402770996
    3. '   ' → logprob: -5.6727614402771
    4. ')' → logprob: -7.9227614402771
    5. ':' → logprob: -8.297760963439941
    6. ' ):
' → logprob: -8.297760963439941
    7. '       ' → logprob: -8.422760963439941
    8. ':
' → logprob: -9.047760963439941
    9. '),' → logprob: -9.422760963439941
    10. '):

' → logprob: -11.422760963439941

Token 158: ' afficher' (ID: 146524)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.043921880424022675
    2. ' print' → logprob: -3.793921947479248
    3. 'print' → logprob: -4.043921947479248
    4. '   ' → logprob: -6.043921947479248
    5. '    ' → logprob: -7.668921947479248
    6. ' ' → logprob: -10.91892147064209
    7. '    ' → logprob: -11.54392147064209
    8. '        ' → logprob: -11.54392147064209
    9. '
' → logprob: -11.66892147064209
    10. '     ' → logprob: -11.66892147064209

Token 159: ' ' (ID: 220)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.008947805501520634
    2. '(' → logprob: -4.758947849273682
    3. ' ' → logprob: -8.008947372436523
    4. '   ' → logprob: -14.508947372436523
    5. ' (' → logprob: -16.758947372436523
    6. '```' → logprob: -17.008947372436523
    7. '  ' → logprob: -17.258947372436523
    8. 'print' → logprob: -17.758947372436523
    9. '    ' → logprob: -18.133947372436523
    10. '       ' → logprob: -18.633947372436523

Token 160: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -4.320199877838604e-07
    2. ' ' → logprob: -15.25
    3. '1' → logprob: -16.125
    4. '(' → logprob: -17.125
    5. '```' → logprob: -18.75
    6. '   ' → logprob: -19.5
    7. '۱۰' → logprob: -21.125
    8. '１０' → logprob: -21.25
    9. '  ' → logprob: -21.25
    10. '`' → logprob: -21.25

Token 161: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004390478599816561
    2. '       ' → logprob: -5.629390716552734
    3. '    
' → logprob: -8.379390716552734
    4. 'else' → logprob: -9.129390716552734
    5. '  ' → logprob: -9.254390716552734
    6. '
' → logprob: -9.379390716552734
    7. ')' → logprob: -9.629390716552734
    8. '    ' → logprob: -10.004390716552734
    9. ' ' → logprob: -10.379390716552734
    10. ' else' → logprob: -10.879390716552734

Token 162: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0008582198061048985
    2. 'else' → logprob: -7.500858306884766
    3. '       ' → logprob: -8.625858306884766
    4. ' else' → logprob: -9.125858306884766
    5. '    
' → logprob: -12.000858306884766
    6. '
' → logprob: -12.875858306884766
    7. '```' → logprob: -12.875858306884766
    8. '	else' → logprob: -13.000858306884766
    9. 'print' → logprob: -13.500858306884766
    10. '  ' → logprob: -14.750858306884766

Token 163: ' else' (ID: 1203)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.105681411921978
    2. 'else' (adapté à ' else') → logprob: -2.3556814193725586
    3. ' else' → logprob: -5.230681419372559
    4. '       ' → logprob: -9.355681419372559
    5. ' ' → logprob: -12.105681419372559
    6. '  ' → logprob: -12.105681419372559
    7. '	else' → logprob: -12.355681419372559
    8. '    ' → logprob: -13.355681419372559
    9. '```' → logprob: -13.355681419372559
    10. 'print' → logprob: -13.480681419372559

Token 164: ':
' (ID: 734)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.2771797478199005
    2. ':' → logprob: -1.6521797180175781
    3. ':
' → logprob: -3.027179718017578
    4. '   ' → logprob: -6.402179718017578
    5. ' print' → logprob: -8.652179718017578
    6. 'print' → logprob: -9.277179718017578
    7. '10' → logprob: -10.777179718017578
    8. ' :
' → logprob: -11.152179718017578
    9. '           ' → logprob: -12.027179718017578
    10. '    ' → logprob: -12.402179718017578

Token 165: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.004577988293021917
    2. 'print' → logprob: -5.879578113555908
    3. ' print' → logprob: -6.379578113555908
    4. '   ' → logprob: -9.50457763671875
    5. '	print' → logprob: -15.37957763671875
    6. '```' → logprob: -15.50457763671875
    7. '(print' → logprob: -15.75457763671875
    8. '10' → logprob: -15.75457763671875
    9. '           ' → logprob: -16.00457763671875
    10. ' ' → logprob: -16.12957763671875

Token 166: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -7.636475493200123e-05
    2. ' print' → logprob: -9.500076293945312
    3. '       ' → logprob: -13.750076293945312
    4. '   ' → logprob: -15.250076293945312
    5. 'pr' → logprob: -16.500076293945312
    6. 'prin' → logprob: -17.875076293945312
    7. '	print' → logprob: -19.500076293945312
    8. '```' → logprob: -19.750076293945312
    9. 'prit' → logprob: -20.000076293945312
    10. '.print' → logprob: -20.000076293945312

Token 167: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -9.088346359931165e-07
    2. '10' → logprob: -14.000000953674316
    3. ' (' → logprob: -18.75
    4. '(
' → logprob: -20.625
    5. '()' → logprob: -22.5
    6. '('' → logprob: -24.25
    7. '(

' → logprob: -24.375
    8. '((' → logprob: -24.875
    9. '   ' → logprob: -24.875
    10. ' ' → logprob: -25.0

Token 168: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -1.9361264946837764e-07
    2. ' ' → logprob: -16.5
    3. '1' → logprob: -19.75
    4. '   ' → logprob: -20.25
    5. '```' → logprob: -20.625
    6. '(' → logprob: -22.0
    7. '۱۰' → logprob: -22.125
    8. '１０' → logprob: -22.625
    9. ')' → logprob: -22.875
    10. '0' → logprob: -23.0

Token 169: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -8.061054359131958e-06
    2. ')
' → logprob: -11.750007629394531
    3. ' )' → logprob: -16.00000762939453
    4. '   ' → logprob: -18.75000762939453
    5. ')

' → logprob: -19.50000762939453
    6. ')`' → logprob: -20.00000762939453
    7. ')#' → logprob: -20.00000762939453
    8. '))' → logprob: -20.25000762939453
    9. ')return' → logprob: -20.75000762939453
    10. '}' → logprob: -21.00000762939453

Token 170: '#' (ID: 2)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 171: ' App' (ID: 2583)
  Prédit: 'compare'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'compare' → logprob: -0.05112259089946747
    2. 'def' → logprob: -3.3011226654052734
    3. '#' → logprob: -5.551122665405273
    4. '<|end|>' → logprob: -5.551122665405273
    5. ' compare' → logprob: -6.301122665405273
    6. '```' → logprob: -6.551122665405273
    7. 'define' → logprob: -7.176122665405273
    8. '(compare' → logprob: -7.426122665405273
    9. 'if' → logprob: -8.926122665405273
    10. '<|end|>' → logprob: -9.176122665405273

Token 172: 'eler' (ID: 6998)
  Prédit: 'el'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'el' → logprob: -0.028349144384264946
    2. 'eler' → logprob: -3.6533491611480713
    3. 'le' → logprob: -7.278348922729492
    4. 'elle' → logprob: -7.278348922729492
    5. 'l' → logprob: -8.778348922729492
    6. 'elé' → logprob: -8.778348922729492
    7. '#' → logprob: -9.278348922729492
    8. 'e' → logprob: -9.903348922729492
    9. 'ele' → logprob: -10.403348922729492
    10. 'er' → logprob: -10.653348922729492

Token 173: ' la' (ID: 557)
  Prédit: ' compare'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' compare' → logprob: -0.002428098116070032
    2. 'compare' → logprob: -6.37742805480957
    3. '(compare' → logprob: -7.25242805480957
    4. ' ' → logprob: -11.87742805480957
    5. '(' → logprob: -12.12742805480957
    6. ' ' → logprob: -13.50242805480957
    7. '_compare' → logprob: -14.12742805480957
    8. 'space' → logprob: -15.00242805480957
    9. ' comparer' → logprob: -15.00242805480957
    10. ' (' → logprob: -15.12742805480957

Token 174: ' fonction' (ID: 17610)
  Prédit: 'compare'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'compare' → logprob: -0.00016241880075540394
    2. ' compare' → logprob: -8.750162124633789
    3. 'function' → logprob: -13.250162124633789
    4. 'def' → logprob: -13.375162124633789
    5. '(compare' → logprob: -15.375162124633789
    6. 'compar' → logprob: -16.25016212463379
    7. 'fonction' → logprob: -16.37516212463379
    8. 'define' → logprob: -17.37516212463379
    9. '.compare' → logprob: -17.37516212463379
    10. 'func' → logprob: -17.50016212463379

Token 175: ' principale' (ID: 68926)
  Prédit: 'compare'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'compare' → logprob: -0.12845519185066223
    2. '
' → logprob: -2.12845516204834
    3. '

' → logprob: -7.00345516204834
    4. '(compare' → logprob: -7.75345516204834
    5. '
' → logprob: -9.25345516204834
    6. ' compare' → logprob: -10.12845516204834
    7. '()
' → logprob: -10.25345516204834
    8. '.compare' → logprob: -12.50345516204834
    9. '\' → logprob: -13.00345516204834
    10. '_compare' → logprob: -13.00345516204834

Token 176: ' lorsque' (ID: 39361)
  Prédit: 'compare'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'compare' → logprob: -0.3880481421947479
    2. '
' → logprob: -1.1380481719970703
    3. '

' → logprob: -7.38804817199707
    4. '
' → logprob: -8.38804817199707
    5. '(compare' → logprob: -8.51304817199707
    6. '\' → logprob: -10.13804817199707
    7. ' compare' → logprob: -10.26304817199707
    8. '  
' → logprob: -10.88804817199707
    9. '\n' → logprob: -11.01304817199707
    10. '()
' → logprob: -12.01304817199707

Token 177: ' le' (ID: 505)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.029751643538475037
    2. ' __' → logprob: -3.5297515392303467
    3. 'name' → logprob: -14.779751777648926
    4. ' ' → logprob: -16.02975082397461
    5. '```' → logprob: -16.02975082397461
    6. ' ' → logprob: -16.27975082397461
    7. 'if' → logprob: -16.27975082397461
    8. '/__' → logprob: -16.40475082397461
    9. '___' → logprob: -16.65475082397461
    10. '_name' → logprob: -16.90475082397461

Token 178: ' script' (ID: 11713)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.17995315790176392
    2. ' __' → logprob: -1.8049530982971191
    3. 'name' → logprob: -8.804953575134277
    4. 'if' → logprob: -10.929953575134277
    5. ' name' → logprob: -11.554953575134277
    6. '_name' → logprob: -11.929953575134277
    7. '"' → logprob: -12.804953575134277
    8. ' script' → logprob: -13.054953575134277
    9. ' "__' → logprob: -13.054953575134277
    10. '___' → logprob: -13.179953575134277

Token 179: ' s' (ID: 265)
  Prédit: 'est'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'est' → logprob: -0.41310280561447144
    2. ' est' → logprob: -1.4131028652191162
    3. 'if' → logprob: -3.413102865219116
    4. ' is' → logprob: -3.663102865219116
    5. '__' → logprob: -3.788102865219116
    6. ' if' → logprob: -5.913102626800537
    7. 's' → logprob: -6.038102626800537
    8. '==' → logprob: -6.163102626800537
    9. ' ==' → logprob: -6.413102626800537
    10. ' __' → logprob: -6.413102626800537

Token 180: ''ex' (ID: 23472)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.844879150390625
    2. ''ex' → logprob: -1.344879150390625
    3. 'er' → logprob: -2.344879150390625
    4. '_ex' → logprob: -2.844879150390625
    5. 'ur' → logprob: -3.719879150390625
    6. 'era' → logprob: -3.844879150390625
    7. 'if' → logprob: -4.219879150390625
    8. 'e' → logprob: -4.344879150390625
    9. ''agit' → logprob: -4.469879150390625
    10. ''' → logprob: -4.719879150390625

Token 181: 'éc' (ID: 5675)
  Prédit: 'écut'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'écut' → logprob: -0.014003532007336617
    2. 'é' → logprob: -4.889003753662109
    3. 'éc' → logprob: -5.889003753662109
    4. 'ecute' → logprob: -6.514003753662109
    5. 'ecut' → logprob: -7.014003753662109
    6. 'e' → logprob: -7.389003753662109
    7. '__' → logprob: -8.38900375366211
    8. 'ec' → logprob: -8.51400375366211
    9. '_' → logprob: -9.88900375366211
    10. '�' → logprob: -11.01400375366211

Token 182: 'ute' (ID: 1331)
  Prédit: 'ute'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ute' → logprob: -6.217951886355877e-05
    2. 'ecute' → logprob: -10.625061988830566
    3. 'u' → logprob: -11.125061988830566
    4. 'ue' → logprob: -12.250061988830566
    5. 'uite' → logprob: -12.625061988830566
    6. 'cute' → logprob: -13.000061988830566
    7. '\' → logprob: -13.250061988830566
    8. 'ure' → logprob: -13.375061988830566
    9. '   ' → logprob: -13.625061988830566
    10. '__' → logprob: -13.625061988830566

Token 183: '.
' (ID: 558)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.15328004956245422
    2. '

' → logprob: -2.153280019760132
    3. 'if' → logprob: -3.653280019760132
    4. ' if' → logprob: -10.153280258178711
    5. '
' → logprob: -10.278280258178711
    6. '
    
' → logprob: -12.028280258178711
    7. '  
' → logprob: -12.028280258178711
    8. '


' → logprob: -12.278280258178711
    9. ' 
' → logprob: -12.528280258178711
    10. '```' → logprob: -12.778280258178711

Token 184: 'compare' (ID: 27773)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.00021676832693628967
    2. 'compare' → logprob: -8.500216484069824
    3. ' if' → logprob: -11.250216484069824
    4. '```' → logprob: -15.875216484069824
    5. ' compare' → logprob: -16.62521743774414
    6. '
' → logprob: -17.25021743774414
    7. '(compare' → logprob: -18.50021743774414
    8. ' 
' → logprob: -21.50021743774414
    9. '``' → logprob: -21.62521743774414
    10. '__' → logprob: -22.00021743774414

Token 185: '_values' (ID: 20393)
  Prédit: '_values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_values' → logprob: -0.0005812693270854652
    2. '_' → logprob: -7.50058126449585
    3. '_val' → logprob: -11.250581741333008
    4. '_value' → logprob: -12.125581741333008
    5. '_vals' → logprob: -12.375581741333008
    6. '_VALUES' → logprob: -13.500581741333008
    7. '()' → logprob: -13.750581741333008
    8. 'values' → logprob: -14.000581741333008
    9. ')' → logprob: -14.250581741333008
    10. ')_' → logprob: -14.750581741333008

Token 186: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00017386233957950026
    2. '(' → logprob: -9.375173568725586
    3. '()
' → logprob: -9.375173568725586
    4. '()

' → logprob: -13.375173568725586
    5. '();' → logprob: -14.375173568725586
    6. ' ()' → logprob: -14.625173568725586
    7. '()`' → logprob: -15.375173568725586
    8. '()\' → logprob: -15.625173568725586
    9. '(
' → logprob: -15.750173568725586
    10. '()]' → logprob: -15.875173568725586


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 184
Tokens correctement prédits (1ère position, stricte): 59
Tokens correctement prédits (1ère position, avec adaptation): 61
Tokens correctement prédits (top 10): 118
Précision stricte (1ère position): 32.07%
Précision adaptée (1ère position): 33.15%
Précision (top 10): 64.13%
================================================================================
