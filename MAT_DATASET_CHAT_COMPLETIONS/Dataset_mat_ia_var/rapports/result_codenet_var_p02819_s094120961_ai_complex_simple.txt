================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:33:13
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import functools
import operator
import sys

sqrt = lambda x: functools.reduce(lambda a, _: (a + x / a) / 2, range(7), x / 2.0)

def is_prime(n):
    return False if n==1 else all(map(lambda k: n%k, range(2, int(sqrt(n))+1)))

X = int(input())

def print_and_exit(val):
    (lambda _ : sys.exit())(print(val))

is_prime(X) and print_and_exit(X)
X += (2 * (X & 1) - 1)
next(filter(lambda k: is_prime(k) and not print_and_exit(k), 
            iter(lambda:[globals().__setitem__('X', X+2)] or X, 0)))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' functools' (ID: 142636)
  → Token d'amorce (pas de prédiction)

Token 2: '
' (ID: 198)
  → Token d'amorce (pas de prédiction)

Token 3: 'import' (ID: 561)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.00010413920972496271
    2. '.def' → logprob: -10.875103950500488
    3. '\.' → logprob: -10.875103950500488
    4. '\' → logprob: -11.000103950500488
    5. 'def' → logprob: -11.250103950500488
    6. '.​' → logprob: -11.875103950500488
    7. '(' → logprob: -12.375103950500488
    8. '.
' → logprob: -13.000103950500488
    9. '@' → logprob: -13.375103950500488
    10. '.@' → logprob: -13.500103950500488

Token 4: ' operator' (ID: 11019)
  Prédit: ' os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' os' → logprob: -0.05923167243599892
    2. ' sys' → logprob: -3.059231758117676
    3. ' operator' → logprob: -5.309231758117676
    4. ' math' → logprob: -6.184231758117676
    5. ' ' → logprob: -6.559231758117676
    6. ' itertools' → logprob: -7.059231758117676
    7. ' json' → logprob: -7.309231758117676
    8. ' collections' → logprob: -7.684231758117676
    9. 'os' → logprob: -10.184231758117676
    10. ' hashlib' → logprob: -10.559231758117676

Token 5: '
' (ID: 198)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.00027611342375166714
    2. '\' → logprob: -9.125276565551758
    3. '.
' → logprob: -10.250276565551758
    4. '```' → logprob: -10.750276565551758
    5. ',' → logprob: -11.250276565551758
    6. 'def' → logprob: -11.625276565551758
    7. 'as' → logprob: -11.750276565551758
    8. '(' → logprob: -12.000276565551758
    9. '\.' → logprob: -12.000276565551758
    10. ' as' → logprob: -12.250276565551758

Token 6: 'import' (ID: 561)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0002777822664938867
    2. '.
' → logprob: -9.625277519226074
    3. ',' → logprob: -9.875277519226074
    4. '\' → logprob: -10.375277519226074
    5. '```' → logprob: -11.125277519226074
    6. '.

' → logprob: -11.500277519226074
    7. 'def' → logprob: -11.500277519226074
    8. '\.' → logprob: -11.500277519226074
    9. ' .' → logprob: -12.125277519226074
    10. '.reduce' → logprob: -12.250277519226074

Token 7: ' sys' (ID: 12228)
  Prédit: ' itertools'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' itertools' → logprob: -0.4297192692756653
    2. ' math' → logprob: -1.3047192096710205
    3. ' collections' → logprob: -3.4297192096710205
    4. ' os' → logprob: -3.6797192096710205
    5. ' sys' → logprob: -4.3047194480896
    6. ' re' → logprob: -5.6797194480896
    7. 'math' → logprob: -7.0547194480896
    8. ' ' → logprob: -7.4297194480896
    9. ' json' → logprob: -7.8047194480896
    10. ' ast' → logprob: -7.9297194480896

Token 8: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.08588608354330063
    2. '\n' → logprob: -3.960886001586914
    3. ',' → logprob: -4.085886001586914
    4. 'import' → logprob: -4.335886001586914
    5. '```' → logprob: -4.835886001586914
    6. '\' → logprob: -4.960886001586914
    7. 'def' → logprob: -5.835886001586914
    8. '<|end|>' → logprob: -5.960886001586914
    9. '#' → logprob: -6.210886001586914
    10. '
' → logprob: -6.335886001586914

Token 9: 'sqrt' (ID: 64991)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.09534093737602234
    2. ',' → logprob: -3.5953409671783447
    3. 'def' → logprob: -3.7203409671783447
    4. '=' → logprob: -4.345340728759766
    5. '[' → logprob: -5.220340728759766
    6. '_' → logprob: -5.220340728759766
    7. '#' → logprob: -5.595340728759766
    8. '*' → logprob: -6.345340728759766
    9. '```' → logprob: -6.345340728759766
    10. '\' → logprob: -6.720340728759766

Token 10: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.009069726802408695
    2. '.' → logprob: -4.759069919586182
    3. ' (' → logprob: -8.509069442749023
    4. '.sqrt' → logprob: -9.509069442749023
    5. '(s' → logprob: -10.134069442749023
    6. ')' → logprob: -10.259069442749023
    7. 's' → logprob: -10.259069442749023
    8. '.s' → logprob: -11.384069442749023
    9. ',' → logprob: -11.884069442749023
    10. '_' → logprob: -11.884069442749023

Token 11: ' lambda' (ID: 27871)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.3992154002189636
    2. ' functools' → logprob: -1.2742154598236084
    3. 'math' → logprob: -3.3992154598236084
    4. ' ' → logprob: -5.274215221405029
    5. ' operator' → logprob: -5.399215221405029
    6. 'operator' → logprob: -6.149215221405029
    7. ' pow' → logprob: -6.524215221405029
    8. 'cmath' → logprob: -7.149215221405029
    9. ' lambda' → logprob: -7.649215221405029
    10. ' fun' → logprob: -8.024215698242188

Token 12: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.004289115313440561
    2. 'x' → logprob: -5.629289150238037
    3. ' ' → logprob: -7.379289150238037
    4. ' lambda' → logprob: -10.879288673400879
    5. ' n' → logprob: -11.004288673400879
    6. ' math' → logprob: -11.129288673400879
    7. '  ' → logprob: -12.629288673400879
    8. ' s' → logprob: -12.879288673400879
    9. ' ' → logprob: -13.504288673400879
    10. ' ,' → logprob: -13.629288673400879

Token 13: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.4836909770965576
    2. '**' → logprob: -1.3586909770965576
    3. ' :' → logprob: -2.4836909770965576
    4. ' **' → logprob: -3.6086909770965576
    5. ' x' → logprob: -4.608691215515137
    6. 'x' → logprob: -5.483691215515137
    7. ':x' → logprob: -7.108691215515137
    8. ':**' → logprob: -8.108691215515137
    9. '.' → logprob: -8.483691215515137
    10. ' ' → logprob: -9.233691215515137

Token 14: ' functools' (ID: 142636)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.3485281467437744
    2. 'x' → logprob: -1.2235281467437744
    3. ' ' → logprob: -10.598527908325195
    4. ' operator' → logprob: -11.348527908325195
    5. '**' → logprob: -11.598527908325195
    6. 'pow' → logprob: -11.723527908325195
    7. 'int' → logprob: -12.098527908325195
    8. ' int' → logprob: -12.223527908325195
    9. ' pow' → logprob: -12.598527908325195
    10. 'operator' → logprob: -12.848527908325195

Token 15: '.reduce' (ID: 49441)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.005070210434496403
    2. '.reduce' → logprob: -5.505070209503174
    3. '.partial' → logprob: -7.505070209503174
    4. ' .' → logprob: -8.005070686340332
    5. '.sqrt' → logprob: -9.630070686340332
    6. '.operator' → logprob: -10.880070686340332
    7. '.s' → logprob: -12.005070686340332
    8. '.chain' → logprob: -13.505070686340332
    9. '.square' → logprob: -13.755070686340332
    10. '.attr' → logprob: -14.005070686340332

Token 16: '(lambda' (ID: 43341)
  Prédit: '(operator'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(operator' → logprob: -0.011303982697427273
    2. '(' → logprob: -4.511303901672363
    3. '(lambda' → logprob: -8.386303901672363
    4. 'operator' → logprob: -10.886303901672363
    5. '	operator' → logprob: -13.011303901672363
    6. ' operator' → logprob: -13.386303901672363
    7. '(op' → logprob: -13.511303901672363
    8. '(
' → logprob: -13.636303901672363
    9. ' (' → logprob: -13.886303901672363
    10. '(f' → logprob: -14.261303901672363

Token 17: ' a' (ID: 261)
  Prédit: ' operator'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' operator' → logprob: -0.1589830219745636
    2. 'operator' → logprob: -2.033982992172241
    3. '(operator' → logprob: -5.15898323059082
    4. 'x' → logprob: -5.65898323059082
    5. ' x' → logprob: -5.78398323059082
    6. 'lambda' → logprob: -7.15898323059082
    7. ' ' → logprob: -7.15898323059082
    8. ' lambda' → logprob: -7.40898323059082
    9. '	operator' → logprob: -8.28398323059082
    10. 'sqrt' → logprob: -8.28398323059082

Token 18: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.016340624541044235
    2. ' ,' → logprob: -4.266340732574463
    3. ',x' → logprob: -8.016340255737305
    4. ',b' → logprob: -8.141340255737305
    5. 'operator' → logprob: -8.266340255737305
    6. ' operator' → logprob: -8.266340255737305
    7. '*,' → logprob: -8.516340255737305
    8. '_,' → logprob: -8.516340255737305
    9. '+,' → logprob: -8.641340255737305
    10. 'a' → logprob: -9.641340255737305

Token 19: ' _:' (ID: 133568)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.43999484181404114
    2. ' b' → logprob: -1.0649948120117188
    3. ' operator' → logprob: -5.439994812011719
    4. ' ' → logprob: -6.314994812011719
    5. 'operator' → logprob: -6.689994812011719
    6. 'a' → logprob: -6.814994812011719
    7. 'x' → logprob: -7.189994812011719
    8. 'int' → logprob: -7.314994812011719
    9. ' x' → logprob: -7.814994812011719
    10. '  ' → logprob: -7.939994812011719

Token 20: ' (' (ID: 350)
  Prédit: 'operator'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'operator' → logprob: -0.24254825711250305
    2. 'a' → logprob: -1.7425482273101807
    3. 'int' → logprob: -4.36754846572876
    4. ' operator' → logprob: -4.86754846572876
    5. '(operator' → logprob: -4.99254846572876
    6. 'x' → logprob: -5.24254846572876
    7. '(' → logprob: -5.74254846572876
    8. '(a' → logprob: -6.24254846572876
    9. 'sqrt' → logprob: -6.99254846572876
    10. '(int' → logprob: -7.49254846572876

Token 21: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.16755598783493042
    2. 'operator' → logprob: -2.042556047439575
    3. 'int' → logprob: -3.792556047439575
    4. 'x' → logprob: -7.542555809020996
    5. '(int' → logprob: -8.042555809020996
    6. '(a' → logprob: -8.417555809020996
    7. '(operator' → logprob: -8.417555809020996
    8. ' operator' → logprob: -8.792555809020996
    9. ' a' → logprob: -8.792555809020996
    10. '(' → logprob: -8.917555809020996

Token 22: ' +' (ID: 659)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.5426863431930542
    2. '**' → logprob: -1.0426863431930542
    3. ' *' → logprob: -2.9176864624023438
    4. '*a' → logprob: -5.167686462402344
    5. '+' → logprob: -5.792686462402344
    6. ' **' → logprob: -6.292686462402344
    7. ' +' → logprob: -7.042686462402344
    8. '*x' → logprob: -7.917686462402344
    9. 'a' → logprob: -8.542686462402344
    10. '*i' → logprob: -9.917686462402344

Token 23: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.47660401463508606
    2. ' x' → logprob: -0.9766039848327637
    3. ' ' → logprob: -6.726603984832764
    4. '1' → logprob: -6.976603984832764
    5. ' operator' → logprob: -8.101604461669922
    6. ' (' → logprob: -10.726604461669922
    7. 'operator' → logprob: -10.851604461669922
    8. '2' → logprob: -11.601604461669922
    9. '   ' → logprob: -11.726604461669922
    10. '(' → logprob: -12.476604461669922

Token 24: ' /' (ID: 820)
  Prédit: '/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '/' → logprob: -0.03630480915307999
    2. ' /' → logprob: -3.5363047122955322
    3. '/a' → logprob: -5.036304950714111
    4. ' ' → logprob: -11.411304473876953
    5. '/operator' → logprob: -11.661304473876953
    6. '/x' → logprob: -12.036304473876953
    7. ' ' → logprob: -13.536304473876953
    8. '//' → logprob: -13.661304473876953
    9. '/(' → logprob: -13.661304473876953
    10. 'a' → logprob: -13.911304473876953

Token 25: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.0006268949946388602
    2. ' a' → logprob: -7.375627040863037
    3. '2' → logprob: -15.125626564025879
    4. '	a' → logprob: -16.625627517700195
    5. ' ' → logprob: -17.250627517700195
    6. '_a' → logprob: -19.000627517700195
    7. '  ' → logprob: -20.125627517700195
    8. 'а' → logprob: -20.250627517700195
    9. '   ' → logprob: -20.500627517700195
    10. ' ' → logprob: -20.500627517700195

Token 26: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7291075587272644
    2. '2' → logprob: -1.2291076183319092
    3. '0' → logprob: -2.229107618331909
    4. ' ' → logprob: -2.854107618331909
    5. '**' → logprob: -3.854107618331909
    6. '*' → logprob: -4.35410737991333
    7. ')/' → logprob: -4.85410737991333
    8. ' )' → logprob: -5.22910737991333
    9. ' **' → logprob: -5.85410737991333
    10. ' *' → logprob: -5.85410737991333

Token 27: ' /' (ID: 820)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6191179156303406
    2. '2' → logprob: -0.9941179156303406
    3. ',' → logprob: -3.2441179752349854
    4. '0' → logprob: -3.6191179752349854
    5. '**' → logprob: -5.369117736816406
    6. ' ,' → logprob: -5.369117736816406
    7. ' /' → logprob: -5.619117736816406
    8. ')' → logprob: -5.744117736816406
    9. ' **' → logprob: -5.994117736816406
    10. '/' → logprob: -6.619117736816406

Token 28: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0024758970830589533
    2. ' ' → logprob: -6.002475738525391
    3. ' ' → logprob: -16.50247573852539
    4. '  ' → logprob: -16.75247573852539
    5. '```' → logprob: -16.75247573852539
    6. '   ' → logprob: -17.12747573852539
    7. 'a' → logprob: -17.50247573852539
    8. '1' → logprob: -18.25247573852539
    9. '3' → logprob: -18.37747573852539
    10. '    ' → logprob: -18.50247573852539

Token 29: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.00010962257510982454
    2. ' ' → logprob: -9.125109672546387
    3. '   ' → logprob: -15.250109672546387
    4. '```' → logprob: -16.00010871887207
    5. '  ' → logprob: -16.25010871887207
    6. '    ' → logprob: -17.50010871887207
    7. '3' → logprob: -17.50010871887207
    8. ' ' → logprob: -17.75010871887207
    9. '       ' → logprob: -17.87510871887207
    10. '２' → logprob: -18.25010871887207

Token 30: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.016445225104689598
    2. ' ,' → logprob: -4.141445159912109
    3. ' ' → logprob: -9.01644515991211
    4. ')' → logprob: -9.26644515991211
    5. '1' → logprob: -9.39144515991211
    6. '2' → logprob: -10.26644515991211
    7. '),' → logprob: -10.76644515991211
    8. ',x' → logprob: -11.14144515991211
    9. '0' → logprob: -11.64144515991211
    10. '  ' → logprob: -12.64144515991211

Token 31: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0006139091565273702
    2. ' range' → logprob: -8.250614166259766
    3. '[' → logprob: -8.750614166259766
    4. 'iter' → logprob: -8.875614166259766
    5. '(range' → logprob: -10.250614166259766
    6. 'operator' → logprob: -12.875614166259766
    7. 'it' → logprob: -13.000614166259766
    8. ' ' → logprob: -13.000614166259766
    9. '   ' → logprob: -13.250614166259766
    10. '	range' → logprob: -13.375614166259766

Token 32: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.001730987336486578
    2. '(int' → logprob: -6.376730918884277
    3. 'int' → logprob: -11.376730918884277
    4. '(x' → logprob: -12.501730918884277
    5. '10' → logprob: -12.626730918884277
    6. '(n' → logprob: -13.001730918884277
    7. '20' → logprob: -13.376730918884277
    8. '100' → logprob: -13.876730918884277
    9. ' (' → logprob: -14.251730918884277
    10. '5' → logprob: -14.251730918884277

Token 33: '7' (ID: 22)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.08462940156459808
    2. '7' → logprob: -2.8346292972564697
    3. '5' → logprob: -4.459629535675049
    4. '6' → logprob: -5.459629535675049
    5. 'int' → logprob: -6.334629535675049
    6. '20' → logprob: -6.459629535675049
    7. ' ' → logprob: -7.209629535675049
    8. '100' → logprob: -7.584629535675049
    9. '9' → logprob: -7.959629535675049
    10. '15' → logprob: -8.20962905883789

Token 34: '),' (ID: 936)
  Prédit: '),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.11296702176332474
    2. ')' → logprob: -2.362967014312744
    3. ',' → logprob: -4.737967014312744
    4. '))' → logprob: -6.612967014312744
    5. '0' → logprob: -7.612967014312744
    6. '6' → logprob: -7.737967014312744
    7. '7' → logprob: -8.237967491149902
    8. ' ),' → logprob: -8.237967491149902
    9. '2' → logprob: -8.487967491149902
    10. ' ' → logprob: -8.612967491149902

Token 35: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.4506088197231293
    2. '1' → logprob: -1.2006088495254517
    3. ' ' → logprob: -3.325608730316162
    4. ' x' → logprob: -3.825608730316162
    5. '2' → logprob: -5.950608730316162
    6. '3' → logprob: -6.700608730316162
    7. '10' → logprob: -9.82560920715332
    8. '5' → logprob: -9.82560920715332
    9. 'float' → logprob: -11.32560920715332
    10. '4' → logprob: -11.82560920715332

Token 36: ' /' (ID: 820)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -3.292907877039397e-06
    2. ' )' → logprob: -13.12500286102295
    3. ')
' → logprob: -14.25000286102295
    4. '))' → logprob: -14.87500286102295
    5. ')))' → logprob: -16.375003814697266
    6. ')`' → logprob: -16.875003814697266
    7. '0' → logprob: -17.125003814697266
    8. ')

' → logprob: -17.375003814697266
    9. ' ' → logprob: -17.750003814697266
    10. '),' → logprob: -18.125003814697266

Token 37: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.014179266057908535
    2. ' ' → logprob: -4.264179229736328
    3. '1' → logprob: -11.514179229736328
    4. ')' → logprob: -13.139179229736328
    5. '  ' → logprob: -13.389179229736328
    6. 'sqrt' → logprob: -14.139179229736328
    7. '3' → logprob: -14.264179229736328
    8. '```' → logprob: -15.764179229736328
    9. ' sqrt' → logprob: -16.139179229736328
    10. '0' → logprob: -16.639179229736328

Token 38: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0009139667963609099
    2. ' ' → logprob: -7.000914096832275
    3. '1' → logprob: -13.250913619995117
    4. '3' → logprob: -15.375913619995117
    5. 'sqrt' → logprob: -16.125913619995117
    6. '```' → logprob: -16.250913619995117
    7. '  ' → logprob: -16.875913619995117
    8. '4' → logprob: -17.125913619995117
    9. '(' → logprob: -17.500913619995117
    10. '0' → logprob: -17.750913619995117

Token 39: '.' (ID: 13)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -9.372294698550832e-06
    2. ' )' → logprob: -12.250009536743164
    3. '))' → logprob: -12.625009536743164
    4. ')
' → logprob: -14.375009536743164
    5. ')))' → logprob: -15.625009536743164
    6. '(' → logprob: -16.500009536743164
    7. '0' → logprob: -16.875009536743164
    8. ')

' → logprob: -16.875009536743164
    9. ')`' → logprob: -17.000009536743164
    10. '),' → logprob: -17.000009536743164

Token 40: '0' (ID: 15)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.004152360837906599
    2. ')' → logprob: -5.504152297973633
    3. '1' → logprob: -10.254152297973633
    4. ' ' → logprob: -10.379152297973633
    5. ' )' → logprob: -12.754152297973633
    6. '0' → logprob: -13.129152297973633
    7. '3' → logprob: -13.879152297973633
    8. '4' → logprob: -14.754152297973633
    9. 'sqrt' → logprob: -15.254152297973633
    10. '))' → logprob: -15.504152297973633

Token 41: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.5048530030981055e-06
    2. ' )' → logprob: -13.875001907348633
    3. '))' → logprob: -15.125001907348633
    4. ')
' → logprob: -15.500001907348633
    5. ')))' → logprob: -17.000001907348633
    6. '),' → logprob: -17.875001907348633
    7. ')`' → logprob: -18.125001907348633
    8. ')#' → logprob: -18.250001907348633
    9. ')

' → logprob: -18.375001907348633
    10. '0' → logprob: -18.625001907348633

Token 42: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5569113492965698
    2. ')' → logprob: -1.6819113492965698
    3. '#' → logprob: -2.8069114685058594
    4. '(' → logprob: -2.8069114685058594
    5. '*' → logprob: -3.6819114685058594
    6. '
' → logprob: -4.306911468505859
    7. '\n' → logprob: -4.681911468505859
    8. 'x' → logprob: -4.806911468505859
    9. '\' → logprob: -4.931911468505859
    10. '```' → logprob: -5.306911468505859

Token 43: ' is' (ID: 382)
  Prédit: ' square'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' square' → logprob: -1.2797224521636963
    2. ' sqrt' → logprob: -1.6547224521636963
    3. ' main' → logprob: -2.0297224521636963
    4. ' is' → logprob: -2.1547224521636963
    5. ' factorial' → logprob: -2.5297224521636963
    6. ' calculate' → logprob: -2.9047224521636963
    7. ' new' → logprob: -3.0297224521636963
    8. ' my' → logprob: -4.404722213745117
    9. 'sqrt' → logprob: -4.529722213745117
    10. ' compute' → logprob: -4.529722213745117

Token 44: '_prime' (ID: 98616)
  Prédit: '_prime'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_prime' → logprob: -0.27790573239326477
    2. '_square' → logprob: -2.2779057025909424
    3. '_per' → logprob: -2.9029057025909424
    4. '_pal' → logprob: -3.0279057025909424
    5. '_' → logprob: -3.9029057025909424
    6. '_s' → logprob: -4.9029059410095215
    7. ' perfect' → logprob: -5.7779059410095215
    8. 'qrt' → logprob: -6.0279059410095215
    9. '_power' → logprob: -7.1529059410095215
    10. '_even' → logprob: -7.5279059410095215

Token 45: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.174264594912529
    2. '(' → logprob: -2.174264669418335
    3. '(num' → logprob: -3.299264669418335
    4. '(x' → logprob: -5.299264430999756
    5. '(number' → logprob: -5.549264430999756
    6. ' (' → logprob: -7.799264430999756
    7. '(value' → logprob: -11.299264907836914
    8. '(N' → logprob: -12.674264907836914
    9. '(a' → logprob: -13.174264907836914
    10. '(numero' → logprob: -13.299264907836914

Token 46: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0002534720697440207
    2. ' ):' → logprob: -9.375253677368164
    3. ':' → logprob: -9.500253677368164
    4. '):
' → logprob: -9.875253677368164
    5. ')' → logprob: -10.125253677368164
    6. ',' → logprob: -14.125253677368164
    7. ' :' → logprob: -14.750253677368164
    8. '):
' → logprob: -14.750253677368164
    9. '=' → logprob: -16.000253677368164
    10. '):

' → logprob: -16.125253677368164

Token 47: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.4423008859157562
    2. '   ' → logprob: -1.6923009157180786
    3. ' :' → logprob: -2.317300796508789
    4. '():' → logprob: -3.442300796508789
    5. ' if' → logprob: -4.317300796508789
    6. '):' → logprob: -4.942300796508789
    7. '<|end|>' → logprob: -5.192300796508789
    8. '    ' → logprob: -5.692300796508789
    9. '(' → logprob: -6.317300796508789
    10. ' ' → logprob: -6.317300796508789

Token 48: ' return' (ID: 622)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.28385066986083984
    2. 'if' → logprob: -1.4088506698608398
    3. '   ' → logprob: -6.15885066986084
    4. ' for' → logprob: -8.28385066986084
    5. 'for' → logprob: -9.15885066986084
    6. 'return' (adapté à ' return') → logprob: -9.90885066986084
    7. ' return' → logprob: -10.40885066986084
    8. '```' → logprob: -10.65885066986084
    9. ' ' → logprob: -10.90885066986084
    10. '2' → logprob: -11.15885066986084

Token 49: ' False' (ID: 7983)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.08120864629745483
    2. ' n' → logprob: -2.8312087059020996
    3. 'all' → logprob: -4.7062087059021
    4. ' all' → logprob: -4.7062087059021
    5. '(n' → logprob: -7.7062087059021
    6. 'False' → logprob: -8.831208229064941
    7. '	n' → logprob: -9.456208229064941
    8. 'sym' → logprob: -9.831208229064941
    9. ' (' → logprob: -10.331208229064941
    10. 'None' → logprob: -10.331208229064941

Token 50: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.49263545870780945
    2. 'if' → logprob: -1.1176354885101318
    3. '<|end|>' → logprob: -2.867635488510132
    4. '
' → logprob: -6.242635250091553
    5. ' ' → logprob: -6.492635250091553
    6. ' or' → logprob: -8.242635726928711
    7. '\n' → logprob: -8.617635726928711
    8. 'n' → logprob: -8.617635726928711
    9. '(n' → logprob: -8.992635726928711
    10. ')' → logprob: -9.117635726928711

Token 51: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.576140284538269
    2. 'n' → logprob: -0.826140284538269
    3. '	n' → logprob: -8.576140403747559
    4. '   ' → logprob: -11.951140403747559
    5. ' ' → logprob: -12.576140403747559
    6. '(n' → logprob: -13.951140403747559
    7. ' (' → logprob: -14.951140403747559
    8. '  ' → logprob: -15.576140403747559
    9. ' ' → logprob: -15.576140403747559
    10. '    ' → logprob: -15.576140403747559

Token 52: '==' (ID: 560)
  Prédit: '<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<' → logprob: -0.1658322960138321
    2. ' <' → logprob: -1.915832281112671
    3. '<=' → logprob: -5.79083251953125
    4. '%' → logprob: -7.04083251953125
    5. ' <=' → logprob: -7.16583251953125
    6. ' ' → logprob: -7.29083251953125
    7. ' %' → logprob: -8.91583251953125
    8. '==' → logprob: -10.66583251953125
    9. ' in' → logprob: -11.41583251953125
    10. '2' → logprob: -12.35333251953125

Token 53: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.15141424536705017
    2. ' ' → logprob: -2.151414155960083
    3. '0' → logprob: -3.776414155960083
    4. '2' → logprob: -7.151414394378662
    5. '<' → logprob: -7.651414394378662
    6. '4' → logprob: -11.901413917541504
    7. '```' → logprob: -12.838913917541504
    8. '  ' → logprob: -13.401413917541504
    9. 's' → logprob: -13.463913917541504
    10. '3' → logprob: -13.776413917541504

Token 54: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.010953732766211033
    2. 'else' → logprob: -4.885953903198242
    3. ' ' → logprob: -6.385953903198242
    4. ' or' → logprob: -6.510953903198242
    5. '  ' → logprob: -10.135953903198242
    6. 'or' → logprob: -10.885953903198242
    7. ' elif' → logprob: -11.010953903198242
    8. '   ' → logprob: -11.010953903198242
    9. '	else' → logprob: -11.010953903198242
    10. ' and' → logprob: -11.135953903198242

Token 55: ' all' (ID: 722)
  Prédit: ' all'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' all' → logprob: -0.11274232715368271
    2. 'all' → logprob: -2.3627424240112305
    3. 'n' → logprob: -4.8627424240112305
    4. ' n' → logprob: -5.7377424240112305
    5. ' not' → logprob: -6.9877424240112305
    6. '   ' → logprob: -8.48774242401123
    7. 'not' → logprob: -8.86274242401123
    8. ' ' → logprob: -9.98774242401123
    9. ' (' → logprob: -11.11274242401123
    10. 'sym' → logprob: -11.11274242401123

Token 56: '(map' (ID: 16946)
  Prédit: '(operator'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(operator' → logprob: -0.26340821385383606
    2. '(' → logprob: -2.2634081840515137
    3. '(n' → logprob: -2.6384081840515137
    4. '(lambda' → logprob: -3.0134081840515137
    5. '(map' → logprob: -5.138408184051514
    6. '(i' → logprob: -7.888408184051514
    7. '((' → logprob: -8.263408660888672
    8. '(s' → logprob: -9.263408660888672
    9. 'operator' → logprob: -9.263408660888672
    10. '(x' → logprob: -9.763408660888672

Token 57: '(lambda' (ID: 43341)
  Prédit: '(lambda'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.0154030229896307
    2. '(operator' → logprob: -4.640402793884277
    3. '(f' → logprob: -5.765402793884277
    4. '(' → logprob: -6.015402793884277
    5. 'operator' → logprob: -10.515402793884277
    6. 'lambda' → logprob: -11.390402793884277
    7. '(fun' → logprob: -12.390402793884277
    8. '(s' → logprob: -12.890402793884277
    9. '((' → logprob: -13.015402793884277
    10. '(l' → logprob: -13.265402793884277

Token 58: ' k' (ID: 372)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'lambda' → logprob: -0.4133802354335785
    2. ' lambda' → logprob: -1.2883802652359009
    3. '(lambda' → logprob: -3.4133801460266113
    4. '   ' → logprob: -3.6633801460266113
    5. ' ' → logprob: -6.288380146026611
    6. 'operator' → logprob: -6.538380146026611
    7. ' (' → logprob: -8.28838062286377
    8. ' operator' → logprob: -8.41338062286377
    9. '  ' → logprob: -8.91338062286377
    10. '(' → logprob: -9.03838062286377

Token 59: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.001485939254052937
    2. 'lambda' → logprob: -7.001485824584961
    3. ' :' → logprob: -8.751485824584961
    4. 'operator' → logprob: -9.001485824584961
    5. '=lambda' → logprob: -9.001485824584961
    6. ' lambda' → logprob: -9.751485824584961
    7. ',' → logprob: -10.376485824584961
    8. '   ' → logprob: -10.501485824584961
    9. '(lambda' → logprob: -11.501485824584961
    10. 'k' → logprob: -11.626485824584961

Token 60: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.3874930441379547
    2. ' n' → logprob: -1.1374930143356323
    3. '   ' → logprob: -8.512493133544922
    4. ' ' → logprob: -9.387493133544922
    5. 'k' → logprob: -9.512493133544922
    6. 'lambda' → logprob: -9.762493133544922
    7. 'operator' → logprob: -9.887493133544922
    8. '	n' → logprob: -10.262493133544922
    9. ' lambda' → logprob: -10.387493133544922
    10. ' operator' → logprob: -10.887493133544922

Token 61: '%' (ID: 4)
  Prédit: '%'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -0.5807243585586548
    2. ' %' → logprob: -0.8307243585586548
    3. '%i' → logprob: -5.455724239349365
    4. '%d' → logprob: -7.830724239349365
    5. '%x' → logprob: -10.330724716186523
    6. '%n' → logprob: -10.455724716186523
    7. '%s' → logprob: -11.080724716186523
    8. '%
' → logprob: -12.580724716186523
    9. '%e' → logprob: -12.580724716186523
    10. '%b' → logprob: -12.705724716186523

Token 62: 'k' (ID: 74)
  Prédit: 'k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.0009320637909695506
    2. ' k' → logprob: -7.000932216644287
    3. ' ' → logprob: -11.625931739807129
    4. 'i' → logprob: -12.250931739807129
    5. '2' → logprob: -12.500931739807129
    6. '   ' → logprob: -13.375931739807129
    7. '	k' → logprob: -14.750931739807129
    8. '  ' → logprob: -15.125931739807129
    9. 'p' → logprob: -16.250932693481445
    10. 'x' → logprob: -16.500932693481445

Token 63: ',' (ID: 11)
  Prédit: ' !='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.7485453486442566
    2. '!=' → logprob: -0.7485453486442566
    3. ')' → logprob: -3.8735454082489014
    4. '>' → logprob: -4.123545169830322
    5. ')!=' → logprob: -4.998545169830322
    6. '<|end|>' → logprob: -5.248545169830322
    7. '),' → logprob: -6.373545169830322
    8. ' >' → logprob: -7.248545169830322
    9. ' ' → logprob: -7.248545169830322
    10. ' not' → logprob: -8.24854564666748

Token 64: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.3485284149646759
    2. ' range' → logprob: -1.2235283851623535
    3. '(range' → logprob: -10.473528861999512
    4. '	range' → logprob: -10.723528861999512
    5. ' xrange' → logprob: -11.598528861999512
    6. 'list' → logprob: -11.848528861999512
    7. 'filter' → logprob: -12.348528861999512
    8. '[' → logprob: -12.598528861999512
    9. ' ' → logprob: -12.848528861999512
    10. 'operator' → logprob: -13.348528861999512

Token 65: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -5.319370302458992e-06
    2. ' (' → logprob: -13.000005722045898
    3. '2' → logprob: -13.500005722045898
    4. ')' → logprob: -14.000005722045898
    5. '(
' → logprob: -14.500005722045898
    6. '<|end|>' → logprob: -16.5000057220459
    7. '   ' → logprob: -16.8750057220459
    8. ' ' → logprob: -17.1250057220459
    9. ')(' → logprob: -17.1250057220459
    10. '((' → logprob: -18.2500057220459

Token 66: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.00010640407708706334
    2. ' ' → logprob: -9.625106811523438
    3. '(' → logprob: -10.750106811523438
    4. '   ' → logprob: -11.750106811523438
    5. ')' → logprob: -12.500106811523438
    6. '```' → logprob: -13.687606811523438
    7. ',' → logprob: -14.250106811523438
    8. '  ' → logprob: -14.500106811523438
    9. '3' → logprob: -14.687606811523438
    10. '    ' → logprob: -15.125106811523438

Token 67: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.013166346587240696
    2. ',int' → logprob: -4.388166427612305
    3. 'int' → logprob: -7.888166427612305
    4. ',n' → logprob: -8.513166427612305
    5. ' ,' → logprob: -9.513166427612305
    6. ' int' → logprob: -13.763166427612305
    7. '   ' → logprob: -14.263166427612305
    8. '1' → logprob: -14.388166427612305
    9. 'n' → logprob: -14.388166427612305
    10. ',s' → logprob: -14.513166427612305

Token 68: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.030668022111058235
    2. ' int' → logprob: -3.530668020248413
    3. 'n' → logprob: -7.405668258666992
    4. '(int' → logprob: -9.155668258666992
    5. '   ' → logprob: -9.280668258666992
    6. '	int' → logprob: -10.155668258666992
    7. ' n' → logprob: -10.530668258666992
    8. '    ' → logprob: -11.155668258666992
    9. ' ' → logprob: -11.905668258666992
    10. ',int' → logprob: -12.155668258666992

Token 69: '(s' (ID: 1858)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.9415145516395569
    2. '(' → logprob: -1.191514492034912
    3. '(s' → logprob: -1.191514492034912
    4. '((' → logprob: -6.691514492034912
    5. '(pow' → logprob: -8.69151496887207
    6. '(x' → logprob: -8.81651496887207
    7. 'sqrt' → logprob: -8.94151496887207
    8. '(
' → logprob: -9.06651496887207
    9. '(math' → logprob: -9.06651496887207
    10. ' (' → logprob: -9.06651496887207

Token 70: 'qrt' (ID: 17629)
  Prédit: 'qrt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'qrt' → logprob: -0.0009845776949077845
    2. 'qt' → logprob: -7.2509846687316895
    3. '(n' → logprob: -9.375984191894531
    4. 'q' → logprob: -9.625984191894531
    5. 'sqrt' → logprob: -9.875984191894531
    6. 'qr' → logprob: -10.875984191894531
    7. 't' → logprob: -11.375984191894531
    8. '(' → logprob: -11.875984191894531
    9. 'rt' → logprob: -12.000984191894531
    10. '```' → logprob: -12.500984191894531

Token 71: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.014185599982738495
    2. '(' → logprob: -4.264185428619385
    3. ' (' → logprob: -11.889185905456543
    4. ')(' → logprob: -12.264185905456543
    5. '(
' → logprob: -12.639185905456543
    6. 'n' → logprob: -12.764185905456543
    7. ')' → logprob: -13.139185905456543
    8. '(k' → logprob: -14.514185905456543
    9. ')n' → logprob: -15.139185905456543
    10. '((' → logprob: -15.264185905456543

Token 72: '))+' (ID: 103968)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.7423795461654663
    2. ')' → logprob: -1.2423795461654663
    3. '(' → logprob: -1.6173795461654663
    4. ')+' → logprob: -3.742379665374756
    5. ')**' → logprob: -5.242379665374756
    6. '))+' → logprob: -5.367379665374756
    7. '))' → logprob: -6.492379665374756
    8. ' (' → logprob: -7.742379665374756
    9. '**' → logprob: -7.992379665374756
    10. ')))' → logprob: -8.617379188537598

Token 73: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.006007836665958166
    2. ' ' → logprob: -5.131007671356201
    3. '2' → logprob: -9.50600814819336
    4. '+' → logprob: -13.00600814819336
    5. '   ' → logprob: -13.75600814819336
    6. '(' → logprob: -14.75600814819336
    7. '  ' → logprob: -15.00600814819336
    8. '```' → logprob: -15.50600814819336
    9. ')' → logprob: -15.94350814819336
    10. ' ' → logprob: -16.00600814819336

Token 74: ')))

' (ID: 46526)
  Prédit: ')))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.007480618078261614
    2. '))' → logprob: -5.132480621337891
    3. ')' → logprob: -6.507480621337891
    4. '))))' → logprob: -10.13248062133789
    5. ')))
' → logprob: -12.00748062133789
    6. ' ' → logprob: -12.13248062133789
    7. ')));' → logprob: -13.25748062133789
    8. '+' → logprob: -13.38248062133789
    9. ')))

' → logprob: -14.13248062133789
    10. ' ))' → logprob: -14.38248062133789

Token 75: 'X' (ID: 55)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 76: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.12878035008907318
    2. '=' → logprob: -2.1287803649902344
    3. ' ' → logprob: -7.378780364990234
    4. '_' → logprob: -7.753780364990234
    5. '=int' → logprob: -8.003780364990234
    6. ',' → logprob: -9.128780364990234
    7. 's' → logprob: -10.128780364990234
    8. '.' → logprob: -10.128780364990234
    9. '   ' → logprob: -10.128780364990234
    10. ':' → logprob: -10.628780364990234

Token 77: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.19279193878173828
    2. 'int' → logprob: -2.1927919387817383
    3. ' ' → logprob: -2.9427919387817383
    4. '10' → logprob: -4.942791938781738
    5. '[int' → logprob: -6.942791938781738
    6. '100' → logprob: -7.067791938781738
    7. '20' → logprob: -7.442791938781738
    8. '1' → logprob: -8.442791938781738
    9. '5' → logprob: -8.567791938781738
    10. '50' → logprob: -8.942791938781738

Token 78: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06303781270980835
    2. '(sys' → logprob: -2.813037872314453
    3. '(s' → logprob: -7.688037872314453
    4. '(System' → logprob: -8.938037872314453
    5. '(Sys' → logprob: -8.938037872314453
    6. '('' → logprob: -9.188037872314453
    7. '(user' → logprob: -10.313037872314453
    8. '<|end|>' → logprob: -10.438037872314453
    9. ' (' → logprob: -10.688037872314453
    10. '(system' → logprob: -10.688037872314453

Token 79: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.43142685294151306
    2. '()' → logprob: -1.0564268827438354
    3. '(' → logprob: -6.431427001953125
    4. '()))' → logprob: -7.806427001953125
    5. '('' → logprob: -8.306427001953125
    6. '()>' → logprob: -9.431427001953125
    7. '("' → logprob: -9.556427001953125
    8. '();)' → logprob: -9.806427001953125
    9. '(()' → logprob: -10.306427001953125
    10. '());' → logprob: -10.681427001953125

Token 80: 'def' (ID: 1314)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.30067533254623413
    2. 'for' → logprob: -2.300675392150879
    3. 'if' → logprob: -2.800675392150879
    4. 'result' → logprob: -3.050675392150879
    5. 'pr' → logprob: -3.425675392150879
    6. 'count' → logprob: -4.300675392150879
    7. 'def' → logprob: -7.175675392150879
    8. 'res' → logprob: -7.425675392150879
    9. 'prime' → logprob: -7.675675392150879
    10. 'filtered' → logprob: -8.050675392150879

Token 81: ' print' (ID: 2123)
  Prédit: ' is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.8710374236106873
    2. ' main' → logprob: -1.996037483215332
    3. ' count' → logprob: -2.246037483215332
    4. ' factor' → logprob: -2.496037483215332
    5. ' prime' → logprob: -3.121037483215332
    6. ' factorial' → logprob: -3.121037483215332
    7. ' primes' → logprob: -3.496037483215332
    8. ' sum' → logprob: -3.871037483215332
    9. ' find' → logprob: -3.996037483215332
    10. ' solve' → logprob: -3.996037483215332

Token 82: '_and' (ID: 18645)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10562102496623993
    2. '("' → logprob: -2.980621099472046
    3. '(X' → logprob: -4.355620861053467
    4. '_' → logprob: -4.730620861053467
    5. '('' → logprob: -4.980620861053467
    6. '_prime' → logprob: -4.980620861053467
    7. '()' → logprob: -6.230620861053467
    8. '("_' → logprob: -6.355620861053467
    9. '_pr' → logprob: -6.355620861053467
    10. '("")' → logprob: -6.480620861053467

Token 83: '_exit' (ID: 41242)
  Prédit: '_exit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_exit' → logprob: -0.5711535811424255
    2. '_check' → logprob: -1.4461536407470703
    3. '_return' → logprob: -1.9461536407470703
    4. '_continue' → logprob: -4.69615364074707
    5. 'exit' → logprob: -5.19615364074707
    6. '_increment' → logprob: -5.69615364074707
    7. '_raise' → logprob: -5.69615364074707
    8. '_' → logprob: -5.82115364074707
    9. '_call' → logprob: -5.94615364074707
    10. '_double' → logprob: -6.07115364074707

Token 84: '(val' (ID: 17391)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2947635352611542
    2. '(message' → logprob: -2.5447635650634766
    3. '(x' → logprob: -2.6697635650634766
    4. '(value' → logprob: -3.6697635650634766
    5. '():' → logprob: -3.6697635650634766
    6. ' (' → logprob: -3.7947635650634766
    7. '(msg' → logprob: -4.919763565063477
    8. '(s' → logprob: -5.044763565063477
    9. '(n' → logprob: -5.419763565063477
    10. '(a' → logprob: -5.794763565063477

Token 85: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.016373811289668083
    2. '):
' → logprob: -4.141373634338379
    3. '):
' → logprob: -8.266373634338379
    4. ')' → logprob: -10.141373634338379
    5. ' ):' → logprob: -10.641373634338379
    6. '):

' → logprob: -12.141373634338379
    7. ':' → logprob: -12.266373634338379
    8. '   ' → logprob: -13.516373634338379
    9. ')):' → logprob: -13.516373634338379
    10. '(val' → logprob: -13.641373634338379

Token 86: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02388215810060501
    2. ':' → logprob: -3.7738821506500244
    3. '(' → logprob: -8.273881912231445
    4. ' print' → logprob: -8.648881912231445
    5. '       ' → logprob: -10.148881912231445
    6. ':
' → logprob: -10.523881912231445
    7. '(val' → logprob: -10.898881912231445
    8. '():' → logprob: -10.898881912231445
    9. '):' → logprob: -11.148881912231445
    10. ' :' → logprob: -11.273881912231445

Token 87: ' (' (ID: 350)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.2571680247783661
    2. '   ' → logprob: -2.0071680545806885
    3. 'print' → logprob: -2.3821680545806885
    4. ' sys' → logprob: -11.00716781616211
    5. '	print' → logprob: -11.63216781616211
    6. '```' → logprob: -12.00716781616211
    7. 'import' → logprob: -12.13216781616211
    8. 'def' → logprob: -13.63216781616211
    9. 'sys' → logprob: -13.88216781616211
    10. ' ' → logprob: -13.88216781616211

Token 88: 'lambda' (ID: 35280)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.011322961188852787
    2. ' print' → logprob: -4.761322975158691
    3. 'val' → logprob: -6.511322975158691
    4. 'sys' → logprob: -7.511322975158691
    5. ' val' → logprob: -8.761322975158691
    6. ')' → logprob: -9.261322975158691
    7. '(print' → logprob: -9.386322975158691
    8. ' ' → logprob: -9.511322975158691
    9. '   ' → logprob: -9.511322975158691
    10. ' sys' → logprob: -10.261322975158691

Token 89: ' _' (ID: 1175)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.9611704349517822
    2. ' x' → logprob: -1.5861704349517822
    3. 'print' → logprob: -1.9611704349517822
    4. ' print' → logprob: -3.0861704349517822
    5. '_:' → logprob: -3.3361704349517822
    6. 'x' → logprob: -3.7111704349517822
    7. '_' → logprob: -4.211170196533203
    8. 'val' → logprob: -4.211170196533203
    9. ' _:' → logprob: -4.211170196533203
    10. ' :' → logprob: -4.211170196533203

Token 90: ' :' (ID: 712)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.028708646073937416
    2. ' :' → logprob: -3.7787086963653564
    3. '=' → logprob: -6.153708457946777
    4. '=sys' → logprob: -7.403708457946777
    5. ':
' → logprob: -7.778708457946777
    6. 'print' → logprob: -7.903708457946777
    7. '_:' → logprob: -8.403708457946777
    8. ',' → logprob: -8.403708457946777
    9. '   ' → logprob: -8.778708457946777
    10. ':_' → logprob: -9.028708457946777

Token 91: ' sys' (ID: 12228)
  Prédit: '(print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(print' → logprob: -0.5669220089912415
    2. 'print' → logprob: -1.0669219493865967
    3. '(sys' → logprob: -2.9419219493865967
    4. 'sys' → logprob: -4.191922187805176
    5. ' (' → logprob: -4.691922187805176
    6. '(exit' → logprob: -5.816922187805176
    7. ' print' → logprob: -6.316922187805176
    8. '   ' → logprob: -7.191922187805176
    9. 'exit' → logprob: -7.316922187805176
    10. ' sys' → logprob: -7.441922187805176

Token 92: '.exit' (ID: 27076)
  Prédit: '.exit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.exit' → logprob: -0.029863646253943443
    2. '.stdout' → logprob: -3.5298635959625244
    3. 'exit' → logprob: -9.279863357543945
    4. '_exit' → logprob: -11.904863357543945
    5. '.stderr' → logprob: -11.904863357543945
    6. '.' → logprob: -13.029863357543945
    7. 'Exit' → logprob: -13.904863357543945
    8. '	exit' → logprob: -13.904863357543945
    9. ' exit' → logprob: -14.029863357543945
    10. 'stdout' → logprob: -14.654863357543945

Token 93: '())' (ID: 3516)
  Prédit: '(val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(val' → logprob: -0.2902436852455139
    2. '(_' → logprob: -2.165243625640869
    3. '(' → logprob: -3.165243625640869
    4. '(print' → logprob: -3.165243625640869
    5. '(_)' → logprob: -3.915243625640869
    6. '((' → logprob: -4.415243625640869
    7. '(int' → logprob: -5.540243625640869
    8. '(not' → logprob: -5.790243625640869
    9. '(_,' → logprob: -6.290243625640869
    10. '((_' → logprob: -6.290243625640869

Token 94: '(' (ID: 7)
  Prédit: '(print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(print' → logprob: -0.3980232775211334
    2. 'print' → logprob: -1.773023247718811
    3. '(' → logprob: -2.5230233669281006
    4. '(val' → logprob: -2.6480233669281006
    5. '(
' → logprob: -6.1480231285095215
    6. ' print' → logprob: -6.8980231285095215
    7. 'val' → logprob: -7.1480231285095215
    8. ' (' → logprob: -7.1480231285095215
    9. '   ' → logprob: -7.2730231285095215
    10. '<|end|>' → logprob: -7.3980231285095215

Token 95: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.015028385445475578
    2. 'val' → logprob: -4.265028476715088
    3. '(print' → logprob: -7.640028476715088
    4. ' print' → logprob: -8.14002799987793
    5. '   ' → logprob: -10.14002799987793
    6. ' val' → logprob: -11.39002799987793
    7. '(val' → logprob: -11.76502799987793
    8. ' ' → logprob: -11.89002799987793
    9. '(' → logprob: -12.39002799987793
    10. '__' → logprob: -12.64002799987793

Token 96: '(val' (ID: 17391)
  Prédit: '(val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(val' → logprob: -0.008720235899090767
    2. '(' → logprob: -4.758720397949219
    3. '(f' → logprob: -9.758720397949219
    4. ' (' → logprob: -10.258720397949219
    5. ')' → logprob: -12.508720397949219
    6. '(
' → logprob: -13.258720397949219
    7. ')(' → logprob: -13.258720397949219
    8. '((' → logprob: -13.633720397949219
    9. ',val' → logprob: -14.258720397949219
    10. 'val' → logprob: -14.383720397949219

Token 97: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.005913865752518177
    2. '()))' → logprob: -5.505913734436035
    3. ')' → logprob: -6.380913734436035
    4. ')))' → logprob: -9.630913734436035
    5. '())' → logprob: -10.130913734436035
    6. '))
' → logprob: -10.630913734436035
    7. '()' → logprob: -12.255913734436035
    8. '(' → logprob: -13.130913734436035
    9. '()))
' → logprob: -13.505913734436035
    10. ' ))' → logprob: -14.130913734436035

Token 98: 'is' (ID: 276)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.8518755435943604
    2. 'for' → logprob: -0.8518755435943604
    3. 'print' → logprob: -2.3518755435943604
    4. 'def' → logprob: -4.351875305175781
    5. 'pr' → logprob: -4.726875305175781
    6. 'n' → logprob: -4.976875305175781
    7. 'result' → logprob: -5.226875305175781
    8. 'i' → logprob: -5.851875305175781
    9. 'count' → logprob: -5.851875305175781
    10. 'res' → logprob: -6.476875305175781

Token 99: '_prime' (ID: 98616)
  Prédit: '_prime'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_prime' → logprob: -0.00012642296496778727
    2. '_' → logprob: -10.125126838684082
    3. 'prime' → logprob: -10.250126838684082
    4. '_pr' → logprob: -10.375126838684082
    5. ' _' → logprob: -11.875126838684082
    6. '_pal' → logprob: -12.375126838684082
    7. '_Pr' → logprob: -13.375126838684082
    8. 'instance' → logprob: -13.500126838684082
    9. '_p' → logprob: -13.625126838684082
    10. 'Prime' → logprob: -14.375126838684082

Token 100: '(X' (ID: 17061)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6936401724815369
    2. '(X' → logprob: -0.6936401724815369
    3. ' (' → logprob: -8.193639755249023
    4. '(x' → logprob: -9.568639755249023
    5. '((' → logprob: -9.943639755249023
    6. '(
' → logprob: -10.568639755249023
    7. '('' → logprob: -11.193639755249023
    8. '(s' → logprob: -11.318639755249023
    9. '<|end|>' → logprob: -11.318639755249023
    10. '(`' → logprob: -12.193639755249023

Token 101: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.021624507382512093
    2. '))' → logprob: -3.8966245651245117
    3. ')))' → logprob: -7.146624565124512
    4. '())' → logprob: -8.646624565124512
    5. ' )' → logprob: -9.146624565124512
    6. ')
' → logprob: -13.271624565124512
    7. ' ))' → logprob: -13.271624565124512
    8. ')])' → logprob: -13.396624565124512
    9. ')==' → logprob: -13.646624565124512
    10. ')}}' → logprob: -13.771624565124512

Token 102: ' and' (ID: 326)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 103: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00036299455678090453
    2. ' print' → logprob: -8.00036334991455
    3. '(print' → logprob: -11.12536334991455
    4. '   ' → logprob: -11.50036334991455
    5. ' ' → logprob: -13.87536334991455
    6. 'not' → logprob: -14.62536334991455
    7. 'exit' → logprob: -15.62536334991455
    8. '  ' → logprob: -15.75036334991455
    9. '(' → logprob: -16.000362396240234
    10. '	print' → logprob: -16.125362396240234

Token 104: '_and' (ID: 18645)
  Prédit: '_and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_and' → logprob: -7.886803359724581e-05
    2. '("_' → logprob: -10.000079154968262
    3. '(' → logprob: -11.500079154968262
    4. '"_' → logprob: -12.000079154968262
    5. '('_' → logprob: -12.625079154968262
    6. 'and' → logprob: -12.625079154968262
    7. '```' → logprob: -12.875079154968262
    8. '_' → logprob: -13.000079154968262
    9. '(X' → logprob: -14.125079154968262
    10. '_or' → logprob: -14.250079154968262

Token 105: '_exit' (ID: 41242)
  Prédit: '_exit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_exit' → logprob: -0.029758011922240257
    2. 'exit' → logprob: -3.5297579765319824
    3. 'Exit' → logprob: -12.77975845336914
    4. 'print' → logprob: -12.90475845336914
    5. 'val' → logprob: -13.90475845336914
    6. ' exit' → logprob: -14.02975845336914
    7. '_EXIT' → logprob: -15.40475845336914
    8. '(exit' → logprob: -16.02975845336914
    9. 'xit' → logprob: -17.40475845336914
    10. '   ' → logprob: -17.40475845336914

Token 106: '(X' (ID: 17061)
  Prédit: '(X'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(X' → logprob: -0.061942026019096375
    2. '(' → logprob: -3.0619421005249023
    3. '("' → logprob: -4.936942100524902
    4. '('' → logprob: -5.811942100524902
    5. '(True' → logprob: -5.936942100524902
    6. '("("' → logprob: -8.686942100524902
    7. '((' → logprob: -9.061942100524902
    8. '("")' → logprob: -9.936942100524902
    9. '(False' → logprob: -10.561942100524902
    10. '()' → logprob: -10.936942100524902

Token 107: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.4285862057004124e-05
    2. ' )' → logprob: -11.25003433227539
    3. '))' → logprob: -11.87503433227539
    4. '())' → logprob: -12.00003433227539
    5. '()' → logprob: -12.75003433227539
    6. ')
' → logprob: -12.75003433227539
    7. ')

' → logprob: -14.87503433227539
    8. ')**' → logprob: -14.87503433227539
    9. '+' → logprob: -15.37503433227539
    10. ')}' → logprob: -15.75003433227539

Token 108: 'X' (ID: 55)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.06463686376810074
    2. '_' → logprob: -3.8146369457244873
    3. 'X' → logprob: -4.564636707305908
    4. 'else' → logprob: -4.689636707305908
    5. 'if' → logprob: -5.064636707305908
    6. 'None' → logprob: -5.314636707305908
    7. 'or' → logprob: -6.189636707305908
    8. '0' → logprob: -6.189636707305908
    9. '<|end|>' → logprob: -6.564636707305908
    10. 'True' → logprob: -6.814636707305908

Token 109: ' +=' (ID: 2757)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 110: ' (' (ID: 350)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.06541086733341217
    2. ' ' → logprob: -2.940410852432251
    3. '2' → logprob: -4.56541109085083
    4. '-' → logprob: -11.690410614013672
    5. '  ' → logprob: -11.815410614013672
    6. 'not' → logprob: -12.502910614013672
    7. 'X' → logprob: -12.627910614013672
    8. '3' → logprob: -12.752910614013672
    9. '   ' → logprob: -12.940410614013672
    10. '(' → logprob: -13.002910614013672

Token 111: '2' (ID: 17)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.04837431386113167
    2. '2' → logprob: -3.9233744144439697
    3. ' ' → logprob: -3.9233744144439697
    4. 'not' → logprob: -5.548374176025391
    5. ' not' → logprob: -6.173374176025391
    6. '(not' → logprob: -8.17337417602539
    7. '-' → logprob: -8.17337417602539
    8. ' (' → logprob: -8.54837417602539
    9. ' -' → logprob: -9.36087417602539
    10. '3' → logprob: -9.42337417602539

Token 112: ' *' (ID: 425)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.6443379521369934
    2. ')' → logprob: -0.7693379521369934
    3. 'if' → logprob: -4.894338130950928
    4. ' )' → logprob: -6.394338130950928
    5. ')
' → logprob: -7.519338130950928
    6. '2' → logprob: -7.894338130950928
    7. ' ' → logprob: -8.01933765411377
    8. ' or' → logprob: -8.26933765411377
    9. '<|end|>' → logprob: -8.64433765411377
    10. '0' → logprob: -9.01933765411377

Token 113: ' (' (ID: 350)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.7679281830787659
    2. 'X' → logprob: -1.892928123474121
    3. ' (' → logprob: -3.017928123474121
    4. '(X' → logprob: -3.017928123474121
    5. 'is' → logprob: -3.142928123474121
    6. ')' → logprob: -3.267928123474121
    7. '2' → logprob: -3.517928123474121
    8. ' ' → logprob: -3.517928123474121
    9. 'not' → logprob: -3.642928123474121
    10. '(is' → logprob: -3.767928123474121

Token 114: 'X' (ID: 55)
  Prédit: 'X'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'X' → logprob: -0.3797447383403778
    2. 'not' → logprob: -1.8797447681427002
    3. 'is' → logprob: -3.2547447681427
    4. '1' → logprob: -3.3797447681427
    5. '(not' → logprob: -3.3797447681427
    6. '(X' → logprob: -3.8797447681427
    7. ' not' → logprob: -5.129744529724121
    8. ' X' → logprob: -5.129744529724121
    9. '(is' → logprob: -5.254744529724121
    10. 'int' → logprob: -5.879744529724121

Token 115: ' &' (ID: 827)
  Prédit: ' -'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.6183616518974304
    2. '-' → logprob: -2.118361711502075
    3. ' +' → logprob: -2.243361711502075
    4. ' %' → logprob: -2.493361711502075
    5. '%' → logprob: -2.993361711502075
    6. '+' → logprob: -3.243361711502075
    7. ' ==' → logprob: -3.868361711502075
    8. '==' → logprob: -4.493361473083496
    9. ' ' → logprob: -4.993361473083496
    10. ' <' → logprob: -5.743361473083496

Token 116: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.14270946383476257
    2. ' ' → logprob: -2.017709493637085
    3. '  ' → logprob: -11.830209732055664
    4. '   ' → logprob: -12.517709732055664
    5. '-' → logprob: -12.580209732055664
    6. ' -' → logprob: -12.705209732055664
    7. '3' → logprob: -13.017709732055664
    8. ' (' → logprob: -13.267709732055664
    9. ' ' → logprob: -13.642709732055664
    10. '7' → logprob: -13.705209732055664

Token 117: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0024994369596242905
    2. ' ' → logprob: -6.002499580383301
    3. '0' → logprob: -12.5649995803833
    4. '-' → logprob: -12.6274995803833
    5. '  ' → logprob: -12.8149995803833
    6. '
' → logprob: -12.8149995803833
    7. '   ' → logprob: -13.0649995803833
    8. '3' → logprob: -13.6274995803833
    9. '!' → logprob: -13.7524995803833
    10. '' → logprob: -14.1899995803833

Token 118: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.014165983535349369
    2. ')+' → logprob: -4.639165878295898
    3. '))' → logprob: -6.264165878295898
    4. ' +' → logprob: -7.014165878295898
    5. '1' → logprob: -7.639165878295898
    6. '+' → logprob: -7.639165878295898
    7. ' )' → logprob: -8.264165878295898
    8. ' -' → logprob: -8.764165878295898
    9. '-' → logprob: -9.264165878295898
    10. ' ' → logprob: -10.139165878295898

Token 119: ' -' (ID: 533)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7992234230041504
    2. ' +' → logprob: -1.2992234230041504
    3. '+' → logprob: -1.6742234230041504
    4. ')+' → logprob: -2.4242234230041504
    5. '1' → logprob: -7.54922342300415
    6. ')
' → logprob: -8.049222946166992
    7. ' -' → logprob: -8.799222946166992
    8. ' )' → logprob: -8.924222946166992
    9. '-' → logprob: -8.924222946166992
    10. '+)' → logprob: -9.299222946166992

Token 120: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.12709073722362518
    2. ' ' → logprob: -2.1270906925201416
    3. ')' → logprob: -9.627090454101562
    4. ' -' → logprob: -10.252090454101562
    5. '-' → logprob: -10.502090454101562
    6. '  ' → logprob: -11.377090454101562
    7. '2' → logprob: -12.314590454101562
    8. '3' → logprob: -12.439590454101562
    9. ' )' → logprob: -12.877090454101562
    10. '7' → logprob: -13.252090454101562

Token 121: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0008676333236508071
    2. ' ' → logprob: -7.12586784362793
    3. '-' → logprob: -10.37586784362793
    4. '3' → logprob: -11.37586784362793
    5. ' -' → logprob: -11.50086784362793
    6. '2' → logprob: -12.50086784362793
    7. ')' → logprob: -13.06336784362793
    8. '0' → logprob: -13.68836784362793
    9. '  ' → logprob: -13.93836784362793
    10. '(-' → logprob: -14.81336784362793

Token 122: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00045069176121614873
    2. ')
' → logprob: -8.25045108795166
    3. '+' → logprob: -9.37545108795166
    4. '1' → logprob: -10.75045108795166
    5. '<|end|>' → logprob: -10.87545108795166
    6. ')+' → logprob: -11.12545108795166
    7. ')#' → logprob: -11.12545108795166
    8. ' +' → logprob: -11.37545108795166
    9. ' )' → logprob: -12.00045108795166
    10. '))' → logprob: -12.12545108795166

Token 123: 'next' (ID: 7311)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.00376005913130939
    2. '
' → logprob: -6.128759860992432
    3. ' while' → logprob: -6.628759860992432
    4. '<|end|>' → logprob: -9.87876033782959
    5. 'if' → logprob: -10.50376033782959
    6. 'and' → logprob: -10.62876033782959
    7. 'for' → logprob: -10.87876033782959
    8. 'not' → logprob: -11.00376033782959
    9. 'def' → logprob: -11.12876033782959
    10. 'print' → logprob: -11.12876033782959

Token 124: '(filter' (ID: 36366)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.026240035891532898
    2. ' while' → logprob: -4.27623987197876
    3. '
' → logprob: -4.65123987197876
    4. '+' → logprob: -6.77623987197876
    5. '2' → logprob: -8.151240348815918
    6. '<|end|>' → logprob: -8.401240348815918
    7. '1' → logprob: -9.526240348815918
    8. 'if' → logprob: -9.526240348815918
    9. '+
' → logprob: -9.526240348815918
    10. 'not' → logprob: -9.651240348815918

Token 125: '(lambda' (ID: 43341)
  Prédit: '(is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(is' → logprob: -0.013047284446656704
    2. '(lambda' → logprob: -4.388047218322754
    3. 'is' → logprob: -8.013047218322754
    4. '(' → logprob: -8.638047218322754
    5. '(
' → logprob: -11.388047218322754
    6. ' (' → logprob: -12.138047218322754
    7. ' is' → logprob: -12.263047218322754
    8. 'lambda' → logprob: -12.513047218322754
    9. '   ' → logprob: -12.763047218322754
    10. '((' → logprob: -15.013047218322754

Token 126: ' k' (ID: 372)
  Prédit: ' is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.29318156838417053
    2. 'is' → logprob: -2.2931816577911377
    3. ' n' → logprob: -3.1681816577911377
    4. ' k' → logprob: -3.7931816577911377
    5. 'k' → logprob: -4.293181419372559
    6. ':' → logprob: -4.418181419372559
    7. ' lambda' → logprob: -4.543181419372559
    8. '   ' → logprob: -4.668181419372559
    9. ' x' → logprob: -4.793181419372559
    10. ' (' → logprob: -5.168181419372559

Token 127: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.01622544415295124
    2. ' :' → logprob: -4.266225337982178
    3. ':is' → logprob: -6.391225337982178
    4. '   ' → logprob: -8.766225814819336
    5. 'is' → logprob: -9.891225814819336
    6. '=is' → logprob: -10.141225814819336
    7. '=' → logprob: -10.641225814819336
    8. ' is' → logprob: -10.641225814819336
    9. '=lambda' → logprob: -10.891225814819336
    10. ' ' → logprob: -11.266225814819336

Token 128: ' is' (ID: 382)
  Prédit: 'is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'is' → logprob: -0.43105173110961914
    2. ' is' → logprob: -1.0560517311096191
    3. '   ' → logprob: -6.181051731109619
    4. ' ' → logprob: -9.556051254272461
    5. 'not' → logprob: -9.806051254272461
    6. 'lambda' → logprob: -10.306051254272461
    7. '    ' → logprob: -10.431051254272461
    8. '  ' → logprob: -10.806051254272461
    9. ' not' → logprob: -10.806051254272461
    10. '       ' → logprob: -11.931051254272461

Token 129: '_prime' (ID: 98616)
  Prédit: '_prime'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_prime' → logprob: -0.0007570966263301671
    2. 'prime' → logprob: -7.500757217407227
    3. '(k' → logprob: -9.125757217407227
    4. 'is' → logprob: -9.875757217407227
    5. 'k' → logprob: -10.750757217407227
    6. '_pr' → logprob: -11.750757217407227
    7. '_k' → logprob: -12.000757217407227
    8. '_is' → logprob: -13.000757217407227
    9. 'Prime' → logprob: -13.500757217407227
    10. ' k' → logprob: -14.125757217407227

Token 130: '(k' (ID: 12125)
  Prédit: '(k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(k' → logprob: -0.013760649599134922
    2. 'k' → logprob: -5.638760566711426
    3. ' (' → logprob: -6.013760566711426
    4. ',' → logprob: -6.138760566711426
    5. ',k' → logprob: -6.138760566711426
    6. ' k' → logprob: -6.263760566711426
    7. ':' → logprob: -7.638760566711426
    8. '   ' → logprob: -8.138760566711426
    9. ':k' → logprob: -8.513760566711426
    10. '(' → logprob: -9.388760566711426

Token 131: ')' (ID: 8)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.046885896474123
    2. '(X' → logprob: -4.171885967254639
    3. ',k' → logprob: -4.796885967254639
    4. ',X' → logprob: -4.921885967254639
    5. ' ,' → logprob: -5.296885967254639
    6. 'X' → logprob: -5.921885967254639
    7. '(k' → logprob: -6.046885967254639
    8. ' X' → logprob: -6.171885967254639
    9. '),' → logprob: -6.921885967254639
    10. ' k' → logprob: -7.671885967254639

Token 132: ' and' (ID: 326)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.014398781582713127
    2. ' ,' → logprob: -4.889398574829102
    3. '(X' → logprob: -5.639398574829102
    4. ',X' → logprob: -6.514398574829102
    5. ',k' → logprob: -7.264398574829102
    6. ' (' → logprob: -8.639398574829102
    7. '(k' → logprob: -8.764398574829102
    8. ',
' → logprob: -9.264398574829102
    9. '==' → logprob: -9.264398574829102
    10. ':' → logprob: -9.639398574829102

Token 133: ' not' (ID: 625)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.24460624158382416
    2. 'print' → logprob: -2.2446062564849854
    3. ' k' → logprob: -2.7446062564849854
    4. 'abs' → logprob: -4.369606018066406
    5. '(k' → logprob: -4.619606018066406
    6. ' print' → logprob: -5.119606018066406
    7. ' abs' → logprob: -5.244606018066406
    8. ' not' → logprob: -5.869606018066406
    9. ' (' → logprob: -6.244606018066406
    10. 'not' → logprob: -6.619606018066406

Token 134: ' print' (ID: 2123)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.24908219277858734
    2. '(k' → logprob: -2.249082088470459
    3. ' k' → logprob: -3.124082088470459
    4. 'is' → logprob: -3.624082088470459
    5. ' (' → logprob: -4.374082088470459
    6. ' is' → logprob: -4.374082088470459
    7. 'abs' → logprob: -5.624082088470459
    8. ' abs' → logprob: -5.749082088470459
    9. 'X' → logprob: -6.249082088470459
    10. '(X' → logprob: -6.249082088470459

Token 135: '_and' (ID: 18645)
  Prédit: '_and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_and' → logprob: -6.704273118884885e-07
    2. 'and' → logprob: -15.000000953674316
    3. '(k' → logprob: -15.375000953674316
    4. '_AND' → logprob: -17.0
    5. '_k' → logprob: -17.375
    6. 'And' → logprob: -17.75
    7. 'k' → logprob: -17.75
    8. ' and' → logprob: -18.625
    9. '_or' → logprob: -18.875
    10. '  ' → logprob: -19.5

Token 136: '_exit' (ID: 41242)
  Prédit: '_exit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_exit' → logprob: -0.04870012030005455
    2. 'exit' → logprob: -3.0487000942230225
    3. 'xit' → logprob: -9.423700332641602
    4. 'Exit' → logprob: -11.048700332641602
    5. 'val' → logprob: -12.048700332641602
    6. 'x' → logprob: -12.673700332641602
    7. ' exit' → logprob: -12.673700332641602
    8. '_EXIT' → logprob: -13.548700332641602
    9. 'k' → logprob: -14.173700332641602
    10. '(exit' → logprob: -14.548700332641602

Token 137: '(k' (ID: 12125)
  Prédit: '(k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(k' → logprob: -0.0010029166005551815
    2. ' (' → logprob: -7.126002788543701
    3. '(' → logprob: -9.50100326538086
    4. '(X' → logprob: -9.87600326538086
    5. '(abs' → logprob: -10.37600326538086
    6. '((' → logprob: -11.00100326538086
    7. 'k' → logprob: -11.25100326538086
    8. ')' → logprob: -13.75100326538086
    9. '(
' → logprob: -13.87600326538086
    10. ' ' → logprob: -13.87600326538086

Token 138: '),' (ID: 936)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.09137587994337082
    2. '),' → logprob: -3.4663758277893066
    3. '(X' → logprob: -3.4663758277893066
    4. ' ,' → logprob: -4.716375827789307
    5. ',k' → logprob: -5.091375827789307
    6. '(k' → logprob: -5.091375827789307
    7. ',X' → logprob: -6.341375827789307
    8. '(' → logprob: -7.841375827789307
    9. ')' → logprob: -7.966375827789307
    10. ')),' → logprob: -8.091376304626465

Token 139: ' 
' (ID: 793)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.020896397531032562
    2. ' range' → logprob: -3.8958964347839355
    3. 'iter' → logprob: -9.020895957946777
    4. '   ' → logprob: -9.770895957946777
    5. ' ' → logprob: -10.145895957946777
    6. '(range' → logprob: -10.145895957946777
    7. ' iter' → logprob: -10.270895957946777
    8. 'count' → logprob: -11.020895957946777
    9. 'filter' → logprob: -11.395895957946777
    10. '  ' → logprob: -11.645895957946777

Token 140: '           ' (ID: 352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.08410809189081192
    2. ' range' → logprob: -2.5841081142425537
    3. '   ' → logprob: -5.459107875823975
    4. '(range' → logprob: -8.584108352661133
    5. ' ' → logprob: -8.709108352661133
    6. 'filter' → logprob: -9.209108352661133
    7. '       ' → logprob: -9.334108352661133
    8. '           ' → logprob: -9.584108352661133
    9. '  ' → logprob: -9.709108352661133
    10. '	range' → logprob: -9.834108352661133

Token 141: ' iter' (ID: 10621)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.004995244089514017
    2. ' range' → logprob: -5.379995346069336
    3. '   ' → logprob: -8.379995346069336
    4. 'filter' → logprob: -9.629995346069336
    5. '           ' → logprob: -11.004995346069336
    6. '(range' → logprob: -11.129995346069336
    7. ' ' → logprob: -11.129995346069336
    8. '       ' → logprob: -12.129995346069336
    9. '  ' → logprob: -12.254995346069336
    10. 'count' → logprob: -12.504995346069336

Token 142: '(lambda' (ID: 43341)
  Prédit: '(range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(range' → logprob: -0.3734299838542938
    2. '(lambda' → logprob: -1.2484300136566162
    3. '(int' → logprob: -3.748430013656616
    4. '(' → logprob: -7.373429775238037
    5. 'range' → logprob: -7.873429775238037
    6. '(abs' → logprob: -10.873430252075195
    7. 'lambda' → logprob: -11.373430252075195
    8. '((' → logprob: -11.498430252075195
    9. '(
' → logprob: -11.498430252075195
    10. '(operator' → logprob: -11.623430252075195

Token 143: ':[' (ID: 17172)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.12322632223367691
    2. 'lambda' → logprob: -2.7482264041900635
    3. '(lambda' → logprob: -3.9982264041900635
    4. '():' → logprob: -4.123226165771484
    5. ':int' → logprob: -5.123226165771484
    6. ' :' → logprob: -5.623226165771484
    7. ' lambda' → logprob: -6.373226165771484
    8. 'X' → logprob: -6.498226165771484
    9. ':X' → logprob: -6.748226165771484
    10. '=lambda' → logprob: -7.373226165771484

Token 144: 'globals' (ID: 122139)
  Prédit: 'X'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'X' → logprob: -0.0008933556382544339
    2. ' X' → logprob: -7.875893592834473
    3. '   ' → logprob: -8.375893592834473
    4. 'print' → logprob: -9.500893592834473
    5. '(X' → logprob: -9.500893592834473
    6. 'next' → logprob: -10.250893592834473
    7. ' ' → logprob: -10.875893592834473
    8. '                   ' → logprob: -11.625893592834473
    9. '  ' → logprob: -11.875893592834473
    10. '[X' → logprob: -11.875893592834473

Token 145: '().__' (ID: 57377)
  Prédit: '[''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '['' → logprob: -0.23708385229110718
    2. '()['' → logprob: -2.612083911895752
    3. ''' → logprob: -3.112083911895752
    4. 'X' → logprob: -3.487083911895752
    5. '["' → logprob: -3.737083911895752
    6. '[X' → logprob: -4.612083911895752
    7. '()["' → logprob: -5.237083911895752
    8. '"' → logprob: -5.487083911895752
    9. '   ' → logprob: -5.612083911895752
    10. ']['' → logprob: -5.737083911895752

Token 146: 'set' (ID: 977)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.1567208170890808
    2. '__' → logprob: -2.2817208766937256
    3. '"' → logprob: -4.2817206382751465
    4. 'X' → logprob: -4.2817206382751465
    5. ''x' → logprob: -5.4067206382751465
    6. ''s' → logprob: -6.0317206382751465
    7. ''user' → logprob: -6.4067206382751465
    8. '['' → logprob: -7.4067206382751465
    9. '_' → logprob: -7.7817206382751465
    10. 'getitem' → logprob: -7.9067206382751465

Token 147: 'item' (ID: 2057)
  Prédit: 'item'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'item' → logprob: -0.0002582402084954083
    2. 'attr' → logprob: -10.125258445739746
    3. '__('' → logprob: -10.250258445739746
    4. 'em' → logprob: -10.375258445739746
    5. 'tem' → logprob: -10.500258445739746
    6. 't' → logprob: -10.750258445739746
    7. ''' → logprob: -10.875258445739746
    8. 'ite' → logprob: -11.125258445739746
    9. '__' → logprob: -11.250258445739746
    10. 'default' → logprob: -11.875258445739746

Token 148: '__('' (ID: 54460)
  Prédit: '__(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__('' → logprob: -0.5020806789398193
    2. '('' → logprob: -1.1270806789398193
    3. '('__' → logprob: -2.8770806789398193
    4. ''' → logprob: -4.502080917358398
    5. '__("' → logprob: -6.502080917358398
    6. '__' → logprob: -7.252080917358398
    7. ' ('' → logprob: -8.127080917358398
    8. '("' → logprob: -8.252080917358398
    9. '('_' → logprob: -8.752080917358398
    10. '("__' → logprob: -9.002080917358398

Token 149: 'X' (ID: 55)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.00011868205183418468
    2. '"' → logprob: -9.500118255615234
    3. ' '' → logprob: -10.500118255615234
    4. ''I' → logprob: -12.625118255615234
    5. ''S' → logprob: -13.375118255615234
    6. ''N' → logprob: -13.375118255615234
    7. 'X' → logprob: -13.625118255615234
    8. ''C' → logprob: -13.625118255615234
    9. '   ' → logprob: -13.750118255615234
    10. ''x' → logprob: -14.375118255615234

Token 150: '',' (ID: 787)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.31974634528160095
    2. '],' → logprob: -1.6947463750839233
    3. ',X' → logprob: -4.069746494293213
    4. 'X' → logprob: -4.694746494293213
    5. ']+' → logprob: -4.944746494293213
    6. ']' → logprob: -4.944746494293213
    7. '+' → logprob: -5.069746494293213
    8. '[' → logprob: -5.069746494293213
    9. '(X' → logprob: -5.194746494293213
    10. ''' → logprob: -5.444746494293213

Token 151: ' X' (ID: 2127)
  Prédit: 'X'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'X' → logprob: -0.00622644042596221
    2. ' X' → logprob: -5.131226539611816
    3. 'globals' → logprob: -8.381226539611816
    4. '(X' → logprob: -10.881226539611816
    5. ' ' → logprob: -11.256226539611816
    6. '   ' → logprob: -11.881226539611816
    7. ' globals' → logprob: -12.131226539611816
    8. '  ' → logprob: -12.131226539611816
    9. 'x' → logprob: -12.756226539611816
    10. '(' → logprob: -12.756226539611816

Token 152: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.13233810663223267
    2. ' +' → logprob: -2.632338047027588
    3. ')],' → logprob: -3.882338047027588
    4. '),' → logprob: -4.507338047027588
    5. ':=' → logprob: -5.132338047027588
    6. ')' → logprob: -5.382338047027588
    7. ')]' → logprob: -5.882338047027588
    8. ' :=' → logprob: -6.007338047027588
    9. ')])' → logprob: -7.132338047027588
    10. '.__' → logprob: -7.882338047027588

Token 153: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.2008357048034668
    2. '1' → logprob: -2.325835704803467
    3. '(' → logprob: -2.575835704803467
    4. ' ' → logprob: -5.825835704803467
    5. '(X' → logprob: -6.950835704803467
    6. '(-' → logprob: -7.325835704803467
    7. '((' → logprob: -7.450835704803467
    8. ' (' → logprob: -7.450835704803467
    9. '-' → logprob: -7.825835704803467
    10. '(k' → logprob: -7.825835704803467

Token 154: ')]' (ID: 15710)
  Prédit: ')],'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')],' → logprob: -0.03751058131456375
    2. '),' → logprob: -3.537510633468628
    3. ')' → logprob: -5.412510395050049
    4. ')]' → logprob: -6.412510395050049
    5. ')])' → logprob: -7.287510395050049
    6. ')][' → logprob: -7.912510395050049
    7. ' )' → logprob: -8.037510871887207
    8. '],' → logprob: -10.412510871887207
    9. ')],
' → logprob: -10.537510871887207
    10. '())' → logprob: -10.662510871887207

Token 155: ' or' (ID: 503)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.035131748765707016
    2. '),' → logprob: -3.5351316928863525
    3. ' ,' → logprob: -6.160131931304932
    4. '(),' → logprob: -6.410131931304932
    5. ')))' → logprob: -7.410131931304932
    6. ')),' → logprob: -7.535131931304932
    7. '))' → logprob: -8.910131454467773
    8. ')' → logprob: -9.410131454467773
    9. '           ' → logprob: -10.035131454467773
    10. '))),' → logprob: -10.910131454467773

Token 156: ' X' (ID: 2127)
  Prédit: '[X'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[X' → logprob: -0.05640946701169014
    2. ' [' → logprob: -3.0564093589782715
    3. '[' → logprob: -5.3064093589782715
    4. 'range' → logprob: -6.1814093589782715
    5. '[k' → logprob: -7.9314093589782715
    6. ' range' → logprob: -8.05640983581543
    7. '(X' → logprob: -10.18140983581543
    8. '(range' → logprob: -11.18140983581543
    9. ' ' → logprob: -11.80640983581543
    10. '[x' → logprob: -12.05640983581543

Token 157: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.03759520500898361
    2. '),' → logprob: -3.412595272064209
    3. ' ,' → logprob: -6.037595272064209
    4. '+' → logprob: -7.912595272064209
    5. '],' → logprob: -8.41259479522705
    6. ')),' → logprob: -9.16259479522705
    7. ')' → logprob: -9.66259479522705
    8. ',),' → logprob: -9.78759479522705
    9. '       ' → logprob: -9.91259479522705
    10. ' ' → logprob: -9.91259479522705

Token 158: ' ' (ID: 220)
  Prédit: 'None'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'None' → logprob: -0.6527568101882935
    2. 'X' → logprob: -1.2777568101882935
    3. ' None' → logprob: -3.027756690979004
    4. ' X' → logprob: -3.527756690979004
    5. ' ' → logprob: -3.527756690979004
    6. '100' → logprob: -3.902756690979004
    7. 'float' → logprob: -4.152756690979004
    8. '0' → logprob: -4.902756690979004
    9. '10' → logprob: -4.902756690979004
    10. '2' → logprob: -5.027756690979004

Token 159: '0' (ID: 15)
  Prédit: 'X'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'X' → logprob: -0.14797982573509216
    2. 'None' → logprob: -2.147979736328125
    3. '0' → logprob: -5.647979736328125
    4. ')' → logprob: -6.272979736328125
    5. '))' → logprob: -6.272979736328125
    6. ' X' → logprob: -6.272979736328125
    7. 'float' → logprob: -6.397979736328125
    8. '100' → logprob: -6.522979736328125
    9. 'sys' → logprob: -6.522979736328125
    10. ' ' → logprob: -6.772979736328125

Token 160: ')))' (ID: 15975)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.1278945803642273
    2. ')))' → logprob: -2.127894639968872
    3. ')' → logprob: -7.002894401550293
    4. '))))' → logprob: -10.377894401550293
    5. '))
' → logprob: -11.002894401550293
    6. ' ))' → logprob: -13.127894401550293
    7. ')))
' → logprob: -13.502894401550293
    8. '),' → logprob: -13.502894401550293
    9. ')
' → logprob: -14.002894401550293
    10. ' ' → logprob: -14.502894401550293


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 158
Tokens correctement prédits (1ère position, stricte): 55
Tokens correctement prédits (1ère position, avec adaptation): 55
Tokens correctement prédits (top 10): 112
Précision stricte (1ère position): 34.81%
Précision adaptée (1ère position): 34.81%
Précision (top 10): 70.89%
================================================================================
