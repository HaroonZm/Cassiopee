================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:56:00
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n, k = input().split()
n = int(n)
k = int(k)
if k == 1:
    print(0)
else:
    print(n - k)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' k' (ID: 372)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.025784850120544434
    2. ' =' → logprob: -3.775784969329834
    3. ',' → logprob: -6.025784969329834
    4. ' ' → logprob: -10.775784492492676
    5. '=
' → logprob: -10.775784492492676
    6. ')' → logprob: -11.150784492492676
    7. ''' → logprob: -11.525784492492676
    8. '=

' → logprob: -11.900784492492676
    9. '```' → logprob: -11.900784492492676
    10. ';' → logprob: -12.025784492492676

Token 4: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3459778428077698
    2. ' map' → logprob: -1.595977783203125
    3. ' input' → logprob: -3.220977783203125
    4. '0' → logprob: -3.970977783203125
    5. 'map' → logprob: -3.970977783203125
    6. 'input' → logprob: -4.845977783203125
    7. ' int' → logprob: -6.595977783203125
    8. '10' → logprob: -6.845977783203125
    9. ' n' → logprob: -7.095977783203125
    10. '1' → logprob: -8.095977783203125

Token 5: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01880740001797676
    2. '.' → logprob: -4.268807411193848
    3. '()' → logprob: -6.518807411193848
    4. '[' → logprob: -6.768807411193848
    5. ''' → logprob: -7.643807411193848
    6. '('.')' → logprob: -8.018807411193848
    7. ',' → logprob: -8.268807411193848
    8. '('' → logprob: -8.643807411193848
    9. '(
' → logprob: -8.643807411193848
    10. '(.)' → logprob: -8.768807411193848

Token 6: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0015098588773980737
    2. 'strip' → logprob: -6.501509666442871
    3. ' split' → logprob: -12.376509666442871
    4. 'rstrip' → logprob: -13.251509666442871
    5. 's' → logprob: -14.501509666442871
    6. 'spl' → logprob: -14.751509666442871
    7. 'replace' → logprob: -15.126509666442871
    8. 'sp' → logprob: -15.376509666442871
    9. '```' → logprob: -16.251510620117188
    10. '.split' → logprob: -18.126510620117188

Token 7: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.013758298009634018
    2. '()' → logprob: -4.388758182525635
    3. '('' → logprob: -7.263758182525635
    4. '(
' → logprob: -8.513758659362793
    5. '`' → logprob: -9.138758659362793
    6. '(

' → logprob: -9.888758659362793
    7. '("("' → logprob: -10.013758659362793
    8. '(`' → logprob: -10.263758659362793
    9. ''' → logprob: -11.013758659362793
    10. '(()' → logprob: -11.013758659362793

Token 8: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.10023212432861328
    2. ' =' → logprob: -3.4752321243286133
    3. '=' → logprob: -3.8502321243286133
    4. '\n' → logprob: -4.350232124328613
    5. '[n' → logprob: -4.850232124328613
    6. '=n' → logprob: -5.475232124328613
    7. ' n' → logprob: -5.725232124328613
    8. ',' → logprob: -5.975232124328613
    9. '```' → logprob: -6.100232124328613
    10. ',n' → logprob: -6.100232124328613

Token 9: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.3805316984653473
    2. '.' → logprob: -2.2555317878723145
    3. '<|end|>' → logprob: -3.5055317878723145
    4. '=' → logprob: -3.6305317878723145
    5. ',' → logprob: -3.7555317878723145
    6. '*' → logprob: -3.8805317878723145
    7. '```' → logprob: -4.0055317878723145
    8. ')' → logprob: -4.3805317878723145
    9. '.strip' → logprob: -4.3805317878723145
    10. '_' → logprob: -4.8805317878723145

Token 10: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.5765520334243774
    2. ' int' → logprob: -0.8265520334243774
    3. ' n' → logprob: -8.201552391052246
    4. ' input' → logprob: -8.951552391052246
    5. 'input' → logprob: -9.326552391052246
    6. 'n' → logprob: -9.951552391052246
    7. ' ' → logprob: -9.951552391052246
    8. '0' → logprob: -11.701552391052246
    9. '[int' → logprob: -12.701552391052246
    10. '```' → logprob: -12.826552391052246

Token 11: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6931928992271423
    2. '(n' → logprob: -0.6931928992271423
    3. '('' → logprob: -11.068192481994629
    4. '(input' → logprob: -12.068192481994629
    5. '(k' → logprob: -12.193192481994629
    6. '("("' → logprob: -12.193192481994629
    7. '()' → logprob: -13.193192481994629
    8. '(
' → logprob: -13.318192481994629
    9. '("' → logprob: -13.693192481994629
    10. 'n' → logprob: -13.818192481994629

Token 12: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.8087270038668066e-05
    2. ')
' → logprob: -11.500027656555176
    3. ')n' → logprob: -12.750027656555176
    4. '*' → logprob: -12.875027656555176
    5. '```' → logprob: -13.375027656555176
    6. '')' → logprob: -13.375027656555176
    7. '),' → logprob: -13.500027656555176
    8. '+' → logprob: -13.500027656555176
    9. '`)' → logprob: -13.625027656555176
    10. ' )' → logprob: -13.750027656555176

Token 13: 'k' (ID: 74)
  Prédit: 'k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.57602459192276
    2. ' k' → logprob: -0.82602459192276
    3. ',k' → logprob: -10.201025009155273
    4. '```' → logprob: -10.451025009155273
    5. ',' → logprob: -11.076025009155273
    6. ' ,' → logprob: -13.576025009155273
    7. ' 
' → logprob: -13.701025009155273
    8. '`' → logprob: -15.201025009155273
    9. ' ' → logprob: -15.201025009155273
    10. '	k' → logprob: -15.826025009155273

Token 14: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.21221061050891876
    2. '<|end|>' → logprob: -2.4622106552124023
    3. '=' → logprob: -2.7122106552124023
    4. ')' → logprob: -4.212210655212402
    5. ' ' → logprob: -4.337210655212402
    6. '+' → logprob: -6.462210655212402
    7. '.' → logprob: -6.587210655212402
    8. ' +=' → logprob: -6.587210655212402
    9. '<|end|>' → logprob: -6.712210655212402
    10. '>' → logprob: -7.087210655212402

Token 15: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.002805821830406785
    2. ' int' → logprob: -5.877805709838867
    3. '0' → logprob: -14.877805709838867
    4. ' ' → logprob: -15.877805709838867
    5. '1' → logprob: -16.252805709838867
    6. '[int' → logprob: -16.377805709838867
    7. '(int' → logprob: -16.502805709838867
    8. '<int' → logprob: -16.752805709838867
    9. '	int' → logprob: -17.002805709838867
    10. '```' → logprob: -17.002805709838867

Token 16: '(k' (ID: 12125)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.09168927371501923
    2. '(k' → logprob: -2.466689348220825
    3. '(n' → logprob: -5.966689109802246
    4. '`' → logprob: -10.091689109802246
    5. '(
' → logprob: -10.466689109802246
    6. '('' → logprob: -10.841689109802246
    7. ')' → logprob: -11.341689109802246
    8. '```' → logprob: -11.341689109802246
    9. '("("' → logprob: -11.341689109802246
    10. ' (' → logprob: -11.466689109802246

Token 17: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.36574100604048e-06
    2. '')' → logprob: -13.125004768371582
    3. ' )' → logprob: -14.000004768371582
    4. ')
' → logprob: -14.500004768371582
    5. '`)' → logprob: -15.000004768371582
    6. '))' → logprob: -15.750004768371582
    7. '```' → logprob: -16.125003814697266
    8. '+' → logprob: -16.750003814697266
    9. '#' → logprob: -16.875003814697266
    10. '**' → logprob: -17.125003814697266

Token 18: 'if' (ID: 366)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5048660635948181
    2. 'i' → logprob: -1.254866123199463
    3. ' for' → logprob: -4.004866123199463
    4. 'n' → logprob: -4.004866123199463
    5. 'if' → logprob: -4.129866123199463
    6. 'a' → logprob: -4.879866123199463
    7. 'x' → logprob: -4.879866123199463
    8. ',' → logprob: -4.879866123199463
    9. 's' → logprob: -5.129866123199463
    10. '#' → logprob: -5.504866123199463

Token 19: ' k' (ID: 372)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.13876225054264069
    2. ' k' → logprob: -2.1387622356414795
    3. 'n' → logprob: -4.638762474060059
    4. 'k' → logprob: -6.763762474060059
    5. ' ' → logprob: -7.138762474060059
    6. ' ' → logprob: -9.013762474060059
    7. ' (' → logprob: -11.763762474060059
    8. ' not' → logprob: -12.513762474060059
    9. '(n' → logprob: -12.763762474060059
    10. ' a' → logprob: -13.513762474060059

Token 20: ' ==' (ID: 951)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.31827762722969055
    2. ' <=' → logprob: -2.193277597427368
    3. ' ==' → logprob: -2.818277597427368
    4. '>' → logprob: -3.693277597427368
    5. ' <' → logprob: -3.693277597427368
    6. ' ' → logprob: -3.943277597427368
    7. ' >=' → logprob: -4.193277835845947
    8. ' %' → logprob: -5.318277835845947
    9. '<' → logprob: -5.568277835845947
    10. '==' → logprob: -5.693277835845947

Token 21: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.11495070904493332
    2. '0' → logprob: -2.239950656890869
    3. '1' → logprob: -6.739950656890869
    4. ' n' → logprob: -7.114950656890869
    5. 'n' → logprob: -9.114951133728027
    6. '2' → logprob: -11.239951133728027
    7. '  ' → logprob: -13.614951133728027
    8. '100' → logprob: -13.864951133728027
    9. '10' → logprob: -13.989951133728027
    10. '3' → logprob: -14.239951133728027

Token 22: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.02381277084350586
    2. '1' → logprob: -3.773812770843506
    3. ' ' → logprob: -7.898812770843506
    4. 'n' → logprob: -8.648813247680664
    5. '2' → logprob: -11.148813247680664
    6. '100' → logprob: -13.398813247680664
    7. '3' → logprob: -14.148813247680664
    8. '10' → logprob: -14.273813247680664
    9. '20' → logprob: -15.023813247680664
    10. ' n' → logprob: -15.148813247680664

Token 23: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -4.008129963040119e-06
    2. ' :' → logprob: -13.000003814697266
    3. ':
' → logprob: -14.125003814697266
    4. ':return' → logprob: -15.125003814697266
    5. ':**' → logprob: -15.375003814697266
    6. ':def' → logprob: -16.750003814697266
    7. ',' → logprob: -16.750003814697266
    8. '.' → logprob: -17.125003814697266
    9. '=' → logprob: -17.250003814697266
    10. '>' → logprob: -17.375003814697266

Token 24: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.07709633558988571
    2. ':
' → logprob: -3.2020962238311768
    3. 'print' → logprob: -3.7020962238311768
    4. '   ' → logprob: -5.327096462249756
    5. ' print' → logprob: -5.702096462249756
    6. '\n' → logprob: -8.077095985412598
    7. ' :' → logprob: -9.327095985412598
    8. ' :
' → logprob: -10.452095985412598
    9. '	print' → logprob: -10.452095985412598
    10. '.' → logprob: -10.702095985412598

Token 25: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0038663470186293125
    2. ' print' → logprob: -6.003866195678711
    3. '0' → logprob: -7.753866195678711
    4. 'n' → logprob: -7.878866195678711
    5. '   ' → logprob: -8.003866195678711
    6. '1' → logprob: -8.878866195678711
    7. ' n' → logprob: -10.503866195678711
    8. ' ' → logprob: -11.128866195678711
    9. '\n' → logprob: -11.253866195678711
    10. '    ' → logprob: -11.503866195678711

Token 26: '(' (ID: 7)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.5246744155883789
    2. '(' → logprob: -0.8996744155883789
    3. '(k' → logprob: -7.274674415588379
    4. '()' → logprob: -8.274674415588379
    5. '("' → logprob: -8.399674415588379
    6. '('' → logprob: -8.899674415588379
    7. 'n' → logprob: -10.024674415588379
    8. '("("' → logprob: -10.024674415588379
    9. '((' → logprob: -10.149674415588379
    10. '(-' → logprob: -10.899674415588379

Token 27: '0' (ID: 15)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.05347694084048271
    2. '1' → logprob: -3.5534770488739014
    3. '0' → logprob: -3.8034770488739014
    4. '(n' → logprob: -7.678476810455322
    5. '(' → logprob: -8.05347728729248
    6. '"' → logprob: -8.80347728729248
    7. ')' → logprob: -9.42847728729248
    8. ' n' → logprob: -10.30347728729248
    9. '")' → logprob: -10.67847728729248
    10. ')n' → logprob: -10.80347728729248

Token 28: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.054500666621607e-06
    2. ')
' → logprob: -13.75000286102295
    3. '')' → logprob: -14.87500286102295
    4. '<|end|>' → logprob: -15.00000286102295
    5. '```' → logprob: -15.12500286102295
    6. '")' → logprob: -15.12500286102295
    7. ' )' → logprob: -15.75000286102295
    8. '`)' → logprob: -16.000003814697266
    9. '()' → logprob: -16.250003814697266
    10. '}' → logprob: -16.375003814697266

Token 29: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.01957724057137966
    2. 'elif' → logprob: -4.5195770263671875
    3. '\n' → logprob: -5.1445770263671875
    4. ' else' → logprob: -6.2695770263671875
    5. ')' → logprob: -8.394577026367188
    6. '```' → logprob: -8.519577026367188
    7. '\' → logprob: -8.644577026367188
    8. '<|end|>' → logprob: -10.269577026367188
    9. 'e' → logprob: -10.644577026367188
    10. '<' → logprob: -11.394577026367188

Token 30: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -6.153795766294934e-06
    2. ':
' → logprob: -12.250005722045898
    3. ' :' → logprob: -14.375005722045898
    4. '   ' → logprob: -14.875005722045898
    5. ':def' → logprob: -16.5000057220459
    6. ',' → logprob: -16.6250057220459
    7. ':

' → logprob: -17.0000057220459
    8. ':**' → logprob: -17.1250057220459
    9. '```' → logprob: -17.1250057220459
    10. '.' → logprob: -17.7500057220459

Token 31: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.19225315749645233
    2. ' print' → logprob: -2.4422531127929688
    3. '    ' → logprob: -3.3172531127929688
    4. 'print' → logprob: -3.8172531127929688
    5. ' ' → logprob: -4.692253112792969
    6. ' n' → logprob: -4.817253112792969
    7. ' for' → logprob: -5.442253112792969
    8. 'for' → logprob: -5.692253112792969
    9. ':' → logprob: -6.692253112792969
    10. '(' → logprob: -8.067253112792969

Token 32: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.3376442790031433
    2. 'for' → logprob: -2.212644338607788
    3. 'count' → logprob: -2.712644338607788
    4. 'result' → logprob: -3.837644338607788
    5. 'i' → logprob: -4.337644100189209
    6. 'if' → logprob: -4.837644100189209
    7. 'cnt' → logprob: -4.837644100189209
    8. 'p' → logprob: -5.087644100189209
    9. 'answer' → logprob: -5.212644100189209
    10. 'ans' → logprob: -5.462644100189209

Token 33: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3388817608356476
    2. '(k' → logprob: -1.9638817310333252
    3. '((' → logprob: -2.588881731033325
    4. '(n' → logprob: -2.713881731033325
    5. '(pow' → logprob: -5.963881969451904
    6. '(min' → logprob: -7.088881969451904
    7. '('' → logprob: -7.213881969451904
    8. '("' → logprob: -7.463881969451904
    9. '(max' → logprob: -7.588881969451904
    10. '(((' → logprob: -8.838881492614746

Token 34: ' -' (ID: 533)
  Prédit: '//'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '//' → logprob: -0.9472227096557617
    2. '%' → logprob: -1.3222227096557617
    3. ' //' → logprob: -1.8222227096557617
    4. '-' → logprob: -2.5722227096557617
    5. ')' → logprob: -2.6972227096557617
    6. ' -' → logprob: -4.322222709655762
    7. ' %' → logprob: -4.447222709655762
    8. '-k' → logprob: -5.072222709655762
    9. '*' → logprob: -5.947222709655762
    10. '/k' → logprob: -6.197222709655762

Token 35: ' k' (ID: 372)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.436029314994812
    2. 'k' → logprob: -1.061029314994812
    3. '2' → logprob: -5.811029434204102
    4. ' k' → logprob: -6.186029434204102
    5. ' ' → logprob: -6.311029434204102
    6. '(k' → logprob: -8.811029434204102
    7. '(' → logprob: -9.561029434204102
    8. 'n' → logprob: -9.686029434204102
    9. ')' → logprob: -10.061029434204102
    10. ' (' → logprob: -10.936029434204102

Token 36: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0001446611131541431
    2. '+' → logprob: -9.125144958496094
    3. ' )' → logprob: -10.875144958496094
    4. '))' → logprob: -12.000144958496094
    5. '*' → logprob: -12.500144958496094
    6. '-' → logprob: -13.750144958496094
    7. ')`' → logprob: -13.750144958496094
    8. '`)' → logprob: -13.875144958496094
    9. ' +' → logprob: -14.375144958496094
    10. ')
' → logprob: -14.500144958496094


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 34
Tokens correctement prédits (1ère position, stricte): 8
Tokens correctement prédits (1ère position, avec adaptation): 10
Tokens correctement prédits (top 10): 31
Précision stricte (1ère position): 23.53%
Précision adaptée (1ère position): 29.41%
Précision (top 10): 91.18%
================================================================================
