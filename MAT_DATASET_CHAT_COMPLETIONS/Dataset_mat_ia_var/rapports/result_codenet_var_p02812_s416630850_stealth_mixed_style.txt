================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:31:47
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
_ = input()
def f(): 
    k = input()
    return sum([1 if k[i:i+3]=='ABC' else 0 for i in range(len(k)-2)])
print((lambda x: x())(f))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '_' (ID: 62)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' input' (ID: 3422)
  → Token d'amorce (pas de prédiction)

Token 3: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.05881858617067337
    2. '.' → logprob: -2.9338185787200928
    3. '_' → logprob: -6.933818817138672
    4. '(
' → logprob: -6.933818817138672
    5. ''' → logprob: -7.308818817138672
    6. ',' → logprob: -8.308818817138672
    7. '```' → logprob: -8.433818817138672
    8. '"' → logprob: -8.558818817138672
    9. '()' → logprob: -9.183818817138672
    10. ' (' → logprob: -9.558818817138672

Token 4: 'def' (ID: 1314)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.9350551962852478
    2. '_' → logprob: -1.5600552558898926
    3. ' ' → logprob: -2.3100552558898926
    4. '```' → logprob: -2.8100552558898926
    5. '()' → logprob: -3.0600552558898926
    6. '#' → logprob: -3.4350552558898926
    7. ')' → logprob: -3.4350552558898926
    8. '.' → logprob: -3.5600552558898926
    9. '\' → logprob: -3.6850552558898926
    10. '(' → logprob: -3.9350552558898926

Token 5: ' f' (ID: 285)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.02511194907128811
    2. '_' → logprob: -5.150112152099609
    3. ' space' → logprob: -5.650112152099609
    4. ' f' → logprob: -5.775112152099609
    5. ' func' → logprob: -5.900112152099609
    6. ' my' → logprob: -6.150112152099609
    7. ' function' → logprob: -6.400112152099609
    8. ' main' → logprob: -6.775112152099609
    9. ' _' → logprob: -7.400112152099609
    10. ' a' → logprob: -7.400112152099609

Token 6: '():' (ID: 9442)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.031638793647289276
    2. 'unction' → logprob: -4.9066386222839355
    3. '_' → logprob: -5.4066386222839355
    4. 'unc' → logprob: -5.7816386222839355
    5. 'unct' → logprob: -5.7816386222839355
    6. '(a' → logprob: -5.9066386222839355
    7. '```' → logprob: -5.9066386222839355
    8. '(u' → logprob: -6.4066386222839355
    9. '(n' → logprob: -6.5316386222839355
    10. '(x' → logprob: -6.5316386222839355

Token 7: ' 
' (ID: 793)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.042602527886629105
    2. '\' → logprob: -4.2926025390625
    3. '   ' → logprob: -4.6676025390625
    4. '
' → logprob: -5.6676025390625
    5. ' pass' → logprob: -5.6676025390625
    6. ' 
' → logprob: -5.9176025390625
    7. '<|end|>' → logprob: -6.1676025390625
    8. ' return' → logprob: -6.2926025390625
    9. '    
' → logprob: -6.4176025390625
    10. '' → logprob: -7.0426025390625

Token 8: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.39937055110931396
    2. '   ' → logprob: -1.399370551109314
    3. ' pass' → logprob: -3.0243706703186035
    4. '\' → logprob: -4.7743706703186035
    5. '    ' → logprob: -4.7743706703186035
    6. ' return' → logprob: -5.1493706703186035
    7. ' ' → logprob: -5.7743706703186035
    8. '	pass' → logprob: -6.6493706703186035
    9. '\t' → logprob: -6.6493706703186035
    10. '    
' → logprob: -6.8993706703186035

Token 9: ' k' (ID: 372)
  Prédit: ' pass'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' pass' → logprob: -0.5780094861984253
    2. '   ' → logprob: -1.7030094861984253
    3. 'pass' → logprob: -2.328009605407715
    4. '\n' → logprob: -3.203009605407715
    5. ' return' → logprob: -3.453009605407715
    6. '    ' → logprob: -3.578009605407715
    7. 'return' → logprob: -3.953009605407715
    8. ' ' → logprob: -3.953009605407715
    9. 'r' → logprob: -5.703009605407715
    10. 'print' → logprob: -5.828009605407715

Token 10: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1405360996723175
    2. '=' → logprob: -3.015536069869995
    3. '+' → logprob: -3.140536069869995
    4. ' +=' → logprob: -4.640536308288574
    5. ' ' → logprob: -5.515536308288574
    6. '(' → logprob: -5.765536308288574
    7. '+=' → logprob: -5.765536308288574
    8. ',' → logprob: -5.890536308288574
    9. 'ey' → logprob: -6.015536308288574
    10. '_' → logprob: -6.140536308288574

Token 11: ' input' (ID: 3422)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -1.2736785411834717
    2. ' int' → logprob: -1.2736785411834717
    3. ' ' → logprob: -2.0236785411834717
    4. ' []' → logprob: -2.1486785411834717
    5. '_' → logprob: -2.6486785411834717
    6. '0' → logprob: -3.3986785411834717
    7. '[]' → logprob: -3.6486785411834717
    8. ' input' → logprob: -3.7736785411834717
    9. 'input' → logprob: -4.523678779602051
    10. '1' → logprob: -4.523678779602051

Token 12: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.5762737393379211
    2. '(' → logprob: -0.8262737393379211
    3. '(
' → logprob: -9.326273918151855
    4. ')' → logprob: -10.201273918151855
    5. ' ' → logprob: -10.451273918151855
    6. ' ()' → logprob: -10.451273918151855
    7. '()
' → logprob: -10.826273918151855
    8. '```' → logprob: -11.201273918151855
    9. '`()' → logprob: -11.326273918151855
    10. '"' → logprob: -11.576273918151855

Token 13: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5742092132568359
    2. '
' → logprob: -1.824209213256836
    3. ' ' → logprob: -2.199209213256836
    4. '    
' → logprob: -2.949209213256836
    5. '<|end|>' → logprob: -3.574209213256836
    6. '  
' → logprob: -4.199209213256836
    7. ' 
' → logprob: -4.449209213256836
    8. ')' → logprob: -4.449209213256836
    9. '    ' → logprob: -4.699209213256836
    10. '\n' → logprob: -5.074209213256836

Token 14: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10213396698236465
    2. ' ' → logprob: -3.2271339893341064
    3. '    ' → logprob: -3.8521339893341064
    4. '    
' → logprob: -4.477133750915527
    5. '\n' → logprob: -4.602133750915527
    6. '
' → logprob: -6.227133750915527
    7. '       ' → logprob: -6.477133750915527
    8. '  ' → logprob: -6.602133750915527
    9. ' 
' → logprob: -6.727133750915527
    10. ' return' → logprob: -6.727133750915527

Token 15: ' sum' (ID: 4215)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.0691879540681839
    2. 'k' → logprob: -3.444187879562378
    3. ' ' → logprob: -3.444187879562378
    4. '"' → logprob: -6.569188117980957
    5. ''' → logprob: -7.444188117980957
    6. ' f' → logprob: -8.694188117980957
    7. '(k' → logprob: -8.819188117980957
    8. ' None' → logprob: -8.944188117980957
    9. ' "' → logprob: -9.069188117980957
    10. ' _' → logprob: -9.694188117980957

Token 16: '([' (ID: 5194)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.19287557899951935
    2. '(k' → logprob: -1.817875623703003
    3. '(ord' → logprob: -5.067875385284424
    4. '(len' → logprob: -5.567875385284424
    5. '(int' → logprob: -6.567875385284424
    6. '(lambda' → logprob: -7.817875385284424
    7. '(range' → logprob: -8.442875862121582
    8. '((' → logprob: -8.692875862121582
    9. ' (' → logprob: -9.192875862121582
    10. '(s' → logprob: -9.442875862121582

Token 17: '1' (ID: 16)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.019730713218450546
    2. ' int' → logprob: -4.269730567932129
    3. '1' → logprob: -6.019730567932129
    4. 'k' → logprob: -7.019730567932129
    5. 'ord' → logprob: -7.019730567932129
    6. '(int' → logprob: -7.644730567932129
    7. '   ' → logprob: -8.144730567932129
    8. ' ord' → logprob: -8.769730567932129
    9. 'len' → logprob: -9.144730567932129
    10. '[int' → logprob: -9.519730567932129

Token 18: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.9474369883537292
    2. ' for' → logprob: -1.697437047958374
    3. '+' → logprob: -1.947437047958374
    4. '(' → logprob: -2.322437047958374
    5. ' +' → logprob: -2.697437047958374
    6. ' ' → logprob: -3.072437047958374
    7. '(k' → logprob: -4.322436809539795
    8. '(x' → logprob: -4.572436809539795
    9. 'for' → logprob: -5.072436809539795
    10. 'if' → logprob: -5.072436809539795

Token 19: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.2439170479774475
    2. ' x' → logprob: -2.6189169883728027
    3. 'k' → logprob: -2.8689169883728027
    4. ' ' → logprob: -3.4939169883728027
    5. ' c' → logprob: -3.6189169883728027
    6. 'x' → logprob: -4.743916988372803
    7. ' s' → logprob: -5.118916988372803
    8. ' i' → logprob: -5.493916988372803
    9. 'c' → logprob: -6.118916988372803
    10. ' a' → logprob: -6.368916988372803

Token 20: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.1302148997783661
    2. '==' → logprob: -3.3802149295806885
    3. ' ==' → logprob: -3.3802149295806885
    4. '[' → logprob: -3.5052149295806885
    5. ' in' → logprob: -5.005214691162109
    6. ' ' → logprob: -5.505214691162109
    7. '.' → logprob: -5.755214691162109
    8. '.count' → logprob: -6.130214691162109
    9. '[j' → logprob: -6.380214691162109
    10. '[count' → logprob: -7.255214691162109

Token 21: ':i' (ID: 34041)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.6187893748283386
    2. '==' → logprob: -1.7437894344329834
    3. ']==' → logprob: -1.8687894344329834
    4. '+' → logprob: -3.2437894344329834
    5. ':i' → logprob: -3.3687894344329834
    6. ':' → logprob: -3.4937894344329834
    7. ' ' → logprob: -5.118789196014404
    8. ' ==' → logprob: -5.368789196014404
    9. ' :' → logprob: -5.743789196014404
    10. ']=='' → logprob: -6.243789196014404

Token 22: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.00022690063633490354
    2. ' +' → logprob: -9.000226974487305
    3. '+i' → logprob: -10.750226974487305
    4. ']' → logprob: -10.750226974487305
    5. '2' → logprob: -11.125226974487305
    6. ']+' → logprob: -11.500226974487305
    7. '+n' → logprob: -11.875226974487305
    8. '+k' → logprob: -12.000226974487305
    9. ']==' → logprob: -12.625226974487305
    10. '-' → logprob: -12.750226974487305

Token 23: '3' (ID: 18)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.06321274489164352
    2. '3' → logprob: -2.9382126331329346
    3. 'len' → logprob: -5.188212871551514
    4. '4' → logprob: -6.563212871551514
    5. '5' → logprob: -7.938212871551514
    6. ' ' → logprob: -8.063212394714355
    7. '7' → logprob: -8.563212394714355
    8. '1' → logprob: -9.063212394714355
    9. '6' → logprob: -9.188212394714355
    10. '10' → logprob: -10.313212394714355

Token 24: ']=='' (ID: 71177)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.9360126852989197
    2. ']' → logprob: -1.3110127449035645
    3. ']==' → logprob: -1.3110127449035645
    4. ' ==' → logprob: -3.0610127449035645
    5. ']=='' → logprob: -4.8110127449035645
    6. ')' → logprob: -6.0610127449035645
    7. ']=="' → logprob: -6.0610127449035645
    8. '=="' → logprob: -6.1860127449035645
    9. '=='' → logprob: -6.1860127449035645
    10. ')==' → logprob: -6.4360127449035645

Token 25: 'ABC' (ID: 44197)
  Prédit: 'abc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'abc' → logprob: -0.10754813253879547
    2. 'bob' → logprob: -3.357548236846924
    3. 'ABC' → logprob: -4.232548236846924
    4. 'aaa' → logprob: -5.232548236846924
    5. 'SOS' → logprob: -5.232548236846924
    6. 'LOL' → logprob: -5.482548236846924
    7. '010' → logprob: -5.607548236846924
    8. '101' → logprob: -5.857548236846924
    9. 'cat' → logprob: -6.107548236846924
    10. 'xyz' → logprob: -6.357548236846924

Token 26: ''' (ID: 6)
  Prédit: '''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -4.024604277219623e-05
    2. 'ABC' → logprob: -10.875040054321289
    3. ' else' → logprob: -12.000040054321289
    4. '"' → logprob: -12.625040054321289
    5. 'else' → logprob: -12.875040054321289
    6. ']'' → logprob: -13.625040054321289
    7. ')'' → logprob: -13.750040054321289
    8. ''''' → logprob: -13.875040054321289
    9. ' '' → logprob: -13.875040054321289
    10. '']' → logprob: -14.000040054321289

Token 27: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.008059397339820862
    2. 'else' → logprob: -4.883059501647949
    3. ' ' → logprob: -8.63305950164795
    4. ')' → logprob: -9.13305950164795
    5. ' for' → logprob: -9.88305950164795
    6. ' or' → logprob: -10.50805950164795
    7. ']' → logprob: -11.00805950164795
    8. '```' → logprob: -11.13305950164795
    9. '    ' → logprob: -11.25805950164795
    10. ' and' → logprob: -11.63305950164795

Token 28: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.020543403923511505
    2. ' ' → logprob: -3.895543336868286
    3. '   ' → logprob: -14.020543098449707
    4. '  ' → logprob: -15.645543098449707
    5. ' ' → logprob: -15.770543098449707
    6. '1' → logprob: -16.145544052124023
    7. '    ' → logprob: -16.833044052124023
    8. ')' → logprob: -17.020544052124023
    9. '2' → logprob: -17.520544052124023
    10. '```' → logprob: -17.770544052124023

Token 29: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -9.889424836728722e-05
    2. ' ' → logprob: -9.250099182128906
    3. '1' → logprob: -13.250099182128906
    4. '-' → logprob: -14.875099182128906
    5. '(' → logprob: -16.062599182128906
    6. '   ' → logprob: -16.125099182128906
    7. '  ' → logprob: -16.125099182128906
    8. '2' → logprob: -17.250099182128906
    9. '_' → logprob: -17.375099182128906
    10. '    ' → logprob: -17.437599182128906

Token 30: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.0038278677966445684
    2. 'for' → logprob: -5.628828048706055
    3. '   ' → logprob: -8.878828048706055
    4. ' ' → logprob: -10.003828048706055
    5. '	for' → logprob: -10.878828048706055
    6. '    ' → logprob: -11.628828048706055
    7. ' i' → logprob: -11.878828048706055
    8. '       ' → logprob: -12.753828048706055
    9. '  ' → logprob: -13.628828048706055
    10. ']' → logprob: -14.253828048706055

Token 31: ' i' (ID: 575)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.4722409248352051
    2. 'range' → logprob: -1.722240924835205
    3. ' i' → logprob: -1.847240924835205
    4. 'i' → logprob: -3.222240924835205
    5. ' ' → logprob: -8.972240447998047
    6. ' xrange' → logprob: -11.097240447998047
    7. '  ' → logprob: -11.222240447998047
    8. '	range' → logprob: -11.347240447998047
    9. 'Range' → logprob: -12.722240447998047
    10. ')' → logprob: -12.847240447998047

Token 32: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0009499297011643648
    2. ' range' → logprob: -7.250949859619141
    3. 'in' → logprob: -8.87594985961914
    4. 'range' → logprob: -9.62594985961914
    5. ' ' → logprob: -10.37594985961914
    6. ' len' → logprob: -13.12594985961914
    7. '(range' → logprob: -15.25094985961914
    8. '  ' → logprob: -15.37594985961914
    9. ' i' → logprob: -15.50094985961914
    10. '   ' → logprob: -16.25094985961914

Token 33: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.16022849082946777
    2. 'range' → logprob: -1.9102284908294678
    3. ' ' → logprob: -13.035228729248047
    4. ' xrange' → logprob: -14.160228729248047
    5. '	range' → logprob: -14.285228729248047
    6. '(range' → logprob: -14.285228729248047
    7. ' len' → logprob: -16.785228729248047
    8. '  ' → logprob: -17.160228729248047
    9. '_range' → logprob: -17.410228729248047
    10. 'len' → logprob: -17.910228729248047

Token 34: '(len' (ID: 14990)
  Prédit: '(len'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(len' → logprob: -0.00015217094914987683
    2. '(' → logprob: -8.875152587890625
    3. 'len' → logprob: -11.375152587890625
    4. ' len' → logprob: -15.000152587890625
    5. '(n' → logprob: -16.000152587890625
    6. ',len' → logprob: -16.750152587890625
    7. '(
' → logprob: -16.875152587890625
    8. ' (' → logprob: -17.000152587890625
    9. '(max' → logprob: -17.250152587890625
    10. '   ' → logprob: -17.250152587890625

Token 35: '(k' (ID: 12125)
  Prédit: '(k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(k' → logprob: -5.88418151892256e-05
    2. '(' → logprob: -9.750059127807617
    3. '(s' → logprob: -15.375059127807617
    4. 'k' → logprob: -15.375059127807617
    5. '(
' → logprob: -17.500059127807617
    6. '(K' → logprob: -18.375059127807617
    7. '(n' → logprob: -18.500059127807617
    8. '(x' → logprob: -19.000059127807617
    9. '(

' → logprob: -19.000059127807617
    10. ')' → logprob: -19.250059127807617

Token 36: ')-' (ID: 14080)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.354890376329422
    2. ' -' → logprob: -1.9798903465270996
    3. ')' → logprob: -2.4798903465270996
    4. ')-' → logprob: -2.6048903465270996
    5. ' )' → logprob: -6.4798903465271
    6. ' ' → logprob: -7.6048903465271
    7. ')])' → logprob: -7.9798903465271
    8. '3' → logprob: -8.604890823364258
    9. ')]' → logprob: -8.729890823364258
    10. '-)' → logprob: -9.229890823364258

Token 37: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.014177493751049042
    2. ' ' → logprob: -4.264177322387695
    3. '3' → logprob: -11.889177322387695
    4. '4' → logprob: -13.076677322387695
    5. '```' → logprob: -13.764177322387695
    6. '  ' → logprob: -14.451677322387695
    7. '1' → logprob: -14.764177322387695
    8. '-' → logprob: -14.764177322387695
    9. '   ' → logprob: -14.826677322387695
    10. '+' → logprob: -15.076677322387695

Token 38: ')])
' (ID: 66560)
  Prédit: ')])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')])' → logprob: -0.013397740200161934
    2. ')' → logprob: -5.138397693634033
    3. ')]' → logprob: -5.138397693634033
    4. ' )' → logprob: -6.513397693634033
    5. ')])
' → logprob: -10.513398170471191
    6. '])' → logprob: -11.263398170471191
    7. '   ' → logprob: -11.388398170471191
    8. ')])

' → logprob: -11.513398170471191
    9. ' ' → logprob: -11.763398170471191
    10. ' ])' → logprob: -12.013398170471191

Token 39: 'print' (ID: 1598)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5262525677680969
    2. '<|end|>' → logprob: -1.6512525081634521
    3. '\n' → logprob: -2.526252508163452
    4. ')' → logprob: -2.651252508163452
    5. '()' → logprob: -3.776252508163452
    6. '_' → logprob: -4.026252746582031
    7. '(' → logprob: -5.276252746582031
    8. '\' → logprob: -5.776252746582031
    9. 'print' → logprob: -5.901252746582031
    10. 'f' → logprob: -6.526252746582031

Token 40: '((' (ID: 2054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2015535682439804
    2. '(f' → logprob: -1.7015535831451416
    3. '('' → logprob: -9.701553344726562
    4. '(_' → logprob: -10.576553344726562
    5. '(func' → logprob: -11.326553344726562
    6. '()' → logprob: -11.326553344726562
    7. '(print' → logprob: -12.076553344726562
    8. '("("' → logprob: -12.326553344726562
    9. '(F' → logprob: -12.826553344726562
    10. '(k' → logprob: -13.326553344726562

Token 41: 'lambda' (ID: 35280)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.002011910080909729
    2. ' f' → logprob: -6.252011775970459
    3. ')' → logprob: -10.752012252807617
    4. '_f' → logprob: -10.752012252807617
    5. '_' → logprob: -11.002012252807617
    6. ' ' → logprob: -11.377012252807617
    7. '   ' → logprob: -12.877012252807617
    8. '(f' → logprob: -13.377012252807617
    9. '  ' → logprob: -13.627012252807617
    10. '))' → logprob: -13.627012252807617

Token 42: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -1.2062870264053345
    2. ' k' → logprob: -1.4562870264053345
    3. 'k' → logprob: -1.9562870264053345
    4. 'x' → logprob: -2.331286907196045
    5. ' s' → logprob: -2.456286907196045
    6. ' f' → logprob: -2.956286907196045
    7. 'f' → logprob: -3.331286907196045
    8. 's' → logprob: -3.456286907196045
    9. ' lambda' → logprob: -5.456286907196045
    10. ' n' → logprob: -5.581286907196045

Token 43: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.008945800364017487
    2. ' :' → logprob: -5.383945941925049
    3. ':x' → logprob: -5.508945941925049
    4. ':f' → logprob: -9.00894546508789
    5. ',' → logprob: -10.00894546508789
    6. 'x' → logprob: -10.38394546508789
    7. ',x' → logprob: -11.63394546508789
    8. ':k' → logprob: -11.75894546508789
    9. 'f' → logprob: -11.88394546508789
    10. '(x' → logprob: -12.13394546508789

Token 44: ' x' (ID: 1215)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.5743351578712463
    2. ' f' → logprob: -0.9493351578712463
    3. 'x' → logprob: -3.5743350982666016
    4. ' x' → logprob: -3.9493350982666016
    5. 'sum' → logprob: -7.074335098266602
    6. ' sum' → logprob: -7.574335098266602
    7. ' ' → logprob: -8.199335098266602
    8. ')' → logprob: -8.699335098266602
    9. '_' → logprob: -9.199335098266602
    10. '(x' → logprob: -9.324335098266602

Token 45: '())' (ID: 3516)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.92835533618927
    2. '(f' → logprob: -1.05335533618927
    3. '+' → logprob: -2.0533552169799805
    4. '(' → logprob: -2.6783552169799805
    5. ' +' → logprob: -3.5533552169799805
    6. '))' → logprob: -4.5533552169799805
    7. ')' → logprob: -5.1783552169799805
    8. '**' → logprob: -6.0533552169799805
    9. ')(' → logprob: -6.0533552169799805
    10. '(_' → logprob: -6.8033552169799805

Token 46: '(' (ID: 7)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.6376238465309143
    2. '(f' → logprob: -0.8876238465309143
    3. ')' → logprob: -3.1376237869262695
    4. ' f' → logprob: -4.2626237869262695
    5. ',f' → logprob: -6.6376237869262695
    6. ')(' → logprob: -8.51262378692627
    7. '))' → logprob: -8.76262378692627
    8. '(' → logprob: -8.88762378692627
    9. '	f' → logprob: -9.51262378692627
    10. 'def' → logprob: -9.51262378692627

Token 47: 'f' (ID: 69)
  Prédit: 'f'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -6.825890159234405e-05
    2. ' f' → logprob: -9.625068664550781
    3. ' ' → logprob: -14.000068664550781
    4. ')' → logprob: -14.125068664550781
    5. '   ' → logprob: -15.250068664550781
    6. '  ' → logprob: -15.250068664550781
    7. '    ' → logprob: -17.12506866455078
    8. '))' → logprob: -17.25006866455078
    9. 'ф' → logprob: -17.62506866455078
    10. '	f' → logprob: -17.87506866455078

Token 48: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.008630638010799885
    2. ')' → logprob: -4.758630752563477
    3. ')))' → logprob: -11.883630752563477
    4. ' ))' → logprob: -11.883630752563477
    5. '))
' → logprob: -14.008630752563477
    6. '()))' → logprob: -14.633630752563477
    7. ' )' → logprob: -14.758630752563477
    8. ' ' → logprob: -15.883630752563477
    9. '),' → logprob: -16.133630752563477
    10. ')
' → logprob: -16.383630752563477


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 46
Tokens correctement prédits (1ère position, stricte): 19
Tokens correctement prédits (1ère position, avec adaptation): 19
Tokens correctement prédits (top 10): 37
Précision stricte (1ère position): 41.30%
Précision adaptée (1ère position): 41.30%
Précision (top 10): 80.43%
================================================================================
