================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:23:41
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N = int(input())
if N % 2 == 0:
    print(N // 2)
else:
    print(N // 2 + 1)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00027933192905038595
    2. '('' → logprob: -8.625279426574707
    3. '(N' → logprob: -10.000279426574707
    4. '(
' → logprob: -10.875279426574707
    5. '(input' → logprob: -11.250279426574707
    6. ''' → logprob: -12.125279426574707
    7. '```' → logprob: -12.375279426574707
    8. '("("' → logprob: -12.500279426574707
    9. '`' → logprob: -12.750279426574707
    10. '(`' → logprob: -13.125279426574707

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2323538064956665
    2. ')' → logprob: -1.6073538064956665
    3. '()' → logprob: -5.232353687286377
    4. '())' → logprob: -7.107353687286377
    5. '(
' → logprob: -8.232354164123535
    6. '```' → logprob: -9.357354164123535
    7. '(

' → logprob: -10.107354164123535
    8. '))' → logprob: -10.107354164123535
    9. '")' → logprob: -10.607354164123535
    10. '("("' → logprob: -10.732354164123535

Token 5: 'if' (ID: 366)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.49335482716560364
    2. 'if' → logprob: -1.1183547973632812
    3. 'x' → logprob: -4.368354797363281
    4. 's' → logprob: -4.493354797363281
    5. 'i' → logprob: -4.618354797363281
    6. 'a' → logprob: -5.618354797363281
    7. '`' → logprob: -6.118354797363281
    8. 'f' → logprob: -6.243354797363281
    9. 'print' → logprob: -6.243354797363281
    10. 'sum' → logprob: -6.243354797363281

Token 6: ' N' (ID: 478)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.22566035389900208
    2. ' N' → logprob: -1.6006603240966797
    3. 'N' → logprob: -9.10066032409668
    4. '  ' → logprob: -9.97566032409668
    5. ' ' → logprob: -10.22566032409668
    6. ''' → logprob: -10.72566032409668
    7. ' not' → logprob: -11.97566032409668
    8. '"' → logprob: -11.97566032409668
    9. ')' → logprob: -12.60066032409668
    10. ' a' → logprob: -12.60066032409668

Token 7: ' %' (ID: 1851)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.11360418051481247
    2. '>' → logprob: -3.1136040687561035
    3. ' >=' → logprob: -3.8636040687561035
    4. ' ' → logprob: -3.9886040687561035
    5. ' <' → logprob: -4.2386040687561035
    6. ' ==' → logprob: -5.9886040687561035
    7. ' %' → logprob: -6.1136040687561035
    8. '<' → logprob: -6.7386040687561035
    9. ' <=' → logprob: -6.8636040687561035
    10. '%' → logprob: -7.6136040687561035

Token 8: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1269870102405548
    2. '2' → logprob: -2.1269869804382324
    3. '3' → logprob: -10.37698745727539
    4. '4' → logprob: -11.12698745727539
    5. '```' → logprob: -12.25198745727539
    6. '1' → logprob: -12.62698745727539
    7. '32' → logprob: -13.12698745727539
    8. '10' → logprob: -14.50198745727539
    9. ' ```' → logprob: -14.62698745727539
    10. ' ' → logprob: -14.87698745727539

Token 9: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.004828222561627626
    2. '3' → logprob: -5.379828453063965
    3. '4' → logprob: -9.379828453063965
    4. '5' → logprob: -10.129828453063965
    5. '10' → logprob: -10.504828453063965
    6. '7' → logprob: -10.754828453063965
    7. ' ' → logprob: -10.754828453063965
    8. '1' → logprob: -12.129828453063965
    9. '```' → logprob: -13.004828453063965
    10. '6' → logprob: -13.129828453063965

Token 10: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.22358237206935883
    2. '==' → logprob: -1.72358238697052
    3. ' !=' → logprob: -3.9735822677612305
    4. '=' → logprob: -6.7235822677612305
    5. '!=' → logprob: -6.7235822677612305
    6. ' =' → logprob: -8.22358226776123
    7. ' ' → logprob: -8.47358226776123
    8. ':' → logprob: -9.22358226776123
    9. ')' → logprob: -9.97358226776123
    10. '!' → logprob: -10.34858226776123

Token 11: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.34846556186676025
    2. '0' → logprob: -1.2234655618667603
    3. '1' → logprob: -10.973465919494629
    4. '2' → logprob: -13.098465919494629
    5. ' ' → logprob: -14.223465919494629
    6. '3' → logprob: -14.973465919494629
    7. '```' → logprob: -15.723465919494629
    8. '  ' → logprob: -15.723465919494629
    9. '4' → logprob: -15.848465919494629
    10. '==' → logprob: -16.348464965820312

Token 12: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.07890168577432632
    2. ' ' → logprob: -2.578901767730713
    3. '1' → logprob: -11.453901290893555
    4. '2' → logprob: -13.578901290893555
    5. '```' → logprob: -17.828901290893555
    6. '4' → logprob: -18.453901290893555
    7. '  ' → logprob: -18.578901290893555
    8. ' ' → logprob: -18.703901290893555
    9. '3' → logprob: -19.078901290893555
    10. '   ' → logprob: -19.891401290893555

Token 13: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -2.4391956685576588e-05
    2. ' :' → logprob: -11.250024795532227
    3. ':
' → logprob: -12.625024795532227
    4. '':' → logprob: -13.125024795532227
    5. '':'' → logprob: -13.250024795532227
    6. ':**' → logprob: -13.250024795532227
    7. '):' → logprob: -13.750024795532227
    8. '>:' → logprob: -14.625024795532227
    9. '":"' → logprob: -15.375024795532227
    10. '":' → logprob: -15.625024795532227

Token 14: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04862188547849655
    2. ' print' → logprob: -3.673621892929077
    3. 'print' → logprob: -4.173621654510498
    4. '\n' → logprob: -6.048621654510498
    5. '    
' → logprob: -6.048621654510498
    6. '    ' → logprob: -7.173621654510498
    7. '\' → logprob: -7.548621654510498
    8. ' ' → logprob: -8.548622131347656
    9. ''' → logprob: -9.173622131347656
    10. ' 
' → logprob: -9.173622131347656

Token 15: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.45652493834495544
    2. ' print' → logprob: -1.2065249681472778
    3. 'print' (adapté à ' print') → logprob: -2.7065248489379883
    4. '    ' → logprob: -9.456524848937988
    5. ' ' → logprob: -9.581524848937988
    6. '\' → logprob: -9.581524848937988
    7. '    
' → logprob: -9.831524848937988
    8. '```' → logprob: -9.831524848937988
    9. '       ' → logprob: -10.081524848937988
    10. '`' → logprob: -10.206524848937988

Token 16: '(N' (ID: 10564)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.09088410437107086
    2. '("' → logprob: -2.590884208679199
    3. '('' → logprob: -4.840884208679199
    4. '("("' → logprob: -5.590884208679199
    5. '("")' → logprob: -8.7158842086792
    6. '()' → logprob: -9.7158842086792
    7. '(N' → logprob: -10.0908842086792
    8. '(""' → logprob: -12.7158842086792
    9. '(True' → logprob: -12.8408842086792
    10. '("""' → logprob: -12.8408842086792

Token 17: ' //' (ID: 602)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -7.584239938296378e-06
    2. '))' → logprob: -13.000007629394531
    3. '*' → logprob: -13.625007629394531
    4. ')
' → logprob: -14.000007629394531
    5. ' )' → logprob: -14.125007629394531
    6. ')`' → logprob: -14.125007629394531
    7. '+' → logprob: -14.750007629394531
    8. '')' → logprob: -14.875007629394531
    9. '`)' → logprob: -15.375007629394531
    10. '**' → logprob: -15.500007629394531

Token 18: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.005234713666141033
    2. ' ' → logprob: -5.255234718322754
    3. ')' → logprob: -14.880234718322754
    4. '```' → logprob: -15.630234718322754
    5. ' ' → logprob: -16.130233764648438
    6. '۲' → logprob: -16.380233764648438
    7. '3' → logprob: -16.942733764648438
    8. '4' → logprob: -16.942733764648438
    9. '２' → logprob: -17.067733764648438
    10. '1' → logprob: -17.130233764648438

Token 19: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -4.572941179503687e-05
    2. ' ' → logprob: -10.000045776367188
    3. ')' → logprob: -16.250045776367188
    4. '```' → logprob: -16.250045776367188
    5. '   ' → logprob: -17.000045776367188
    6. '3' → logprob: -17.312545776367188
    7. '1' → logprob: -17.625045776367188
    8. '  ' → logprob: -17.625045776367188
    9. '۲' → logprob: -17.750045776367188
    10. '２' → logprob: -17.812545776367188

Token 20: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.717296517104842e-05
    2. ')
' → logprob: -10.000057220458984
    3. '*' → logprob: -12.375057220458984
    4. ' )' → logprob: -12.500057220458984
    5. '')' → logprob: -14.125057220458984
    6. '`)' → logprob: -14.125057220458984
    7. '))' → logprob: -14.250057220458984
    8. '   ' → logprob: -15.375057220458984
    9. '```' → logprob: -15.375057220458984
    10. '")' → logprob: -15.625057220458984

Token 21: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0008970508933998644
    2. ' else' → logprob: -7.37589693069458
    3. 'elif' → logprob: -8.750897407531738
    4. '```' → logprob: -9.375897407531738
    5. ')' → logprob: -11.500897407531738
    6. '<|end|>' → logprob: -12.000897407531738
    7. '#else' → logprob: -12.875897407531738
    8. '_else' → logprob: -13.000897407531738
    9. '*' → logprob: -14.125897407531738
    10. 'e' → logprob: -14.125897407531738

Token 22: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -3.643152740551159e-05
    2. ':
' → logprob: -10.250036239624023
    3. ' :' → logprob: -14.500036239624023
    4. '   ' → logprob: -15.250036239624023
    5. '):' → logprob: -16.750036239624023
    6. ':**' → logprob: -16.750036239624023
    7. ':return' → logprob: -17.500036239624023
    8. ':
' → logprob: -18.250036239624023
    9. '():' → logprob: -18.250036239624023
    10. '：' → logprob: -18.250036239624023

Token 23: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.000332485738908872
    2. '```' → logprob: -8.750332832336426
    3. '1' → logprob: -9.500332832336426
    4. '(' → logprob: -10.750332832336426
    5. '``' → logprob: -11.000332832336426
    6. '    
' → logprob: -11.000332832336426
    7. 'print' → logprob: -11.250332832336426
    8. '\' → logprob: -12.375332832336426
    9. '    ' → logprob: -12.375332832336426
    10. '\n' → logprob: -12.500332832336426

Token 24: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.457370787858963
    2. ' N' → logprob: -2.3323707580566406
    3. '   ' → logprob: -2.3323707580566406
    4. '(N' → logprob: -2.8323707580566406
    5. ' print' → logprob: -3.3323707580566406
    6. 'N' → logprob: -3.7073707580566406
    7. ' ' → logprob: -3.7073707580566406
    8. ' (' → logprob: -4.707370758056641
    9. '1' → logprob: -4.832370758056641
    10. '0' → logprob: -5.582370758056641

Token 25: '(N' (ID: 10564)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.05947824567556381
    2. '(N' → logprob: -2.934478282928467
    3. '((' → logprob: -5.434478282928467
    4. '('' → logprob: -8.934477806091309
    5. '("' → logprob: -10.059477806091309
    6. '()' → logprob: -10.559477806091309
    7. '(
' → logprob: -12.059477806091309
    8. '(n' → logprob: -13.184477806091309
    9. '(f' → logprob: -13.309477806091309
    10. '(-' → logprob: -13.309477806091309

Token 26: ' //' (ID: 602)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.12786898016929626
    2. ' //' → logprob: -2.877868890762329
    3. ' )' → logprob: -4.127869129180908
    4. '//' → logprob: -4.252869129180908
    5. '+' → logprob: -4.502869129180908
    6. '))' → logprob: -4.627869129180908
    7. '-' → logprob: -5.752869129180908
    8. ' +' → logprob: -5.752869129180908
    9. ' ' → logprob: -6.377869129180908
    10. ' -' → logprob: -6.627869129180908

Token 27: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.006717147771269083
    2. ' ' → logprob: -5.006717205047607
    3. '1' → logprob: -13.63171672821045
    4. '3' → logprob: -15.00671672821045
    5. '  ' → logprob: -15.75671672821045
    6. '```' → logprob: -16.631717681884766
    7. '   ' → logprob: -17.381717681884766
    8. '-' → logprob: -17.444217681884766
    9. ')' → logprob: -17.506717681884766
    10. ' -' → logprob: -17.881717681884766

Token 28: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -5.796184723294573e-06
    2. ' ' → logprob: -12.125005722045898
    3. '1' → logprob: -15.125005722045898
    4. '-' → logprob: -16.2500057220459
    5. '```' → logprob: -17.6250057220459
    6. '3' → logprob: -17.8750057220459
    7. '  ' → logprob: -18.6250057220459
    8. '۲' → logprob: -19.1250057220459
    9. ')' → logprob: -19.2500057220459
    10. '   ' → logprob: -19.2500057220459

Token 29: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.0857585147023201
    2. ')' → logprob: -3.0857584476470947
    3. ' +' → logprob: -3.3357584476470947
    4. '-' → logprob: -7.460758686065674
    5. '+)' → logprob: -8.960758209228516
    6. ' )' → logprob: -9.210758209228516
    7. ' -' → logprob: -9.835758209228516
    8. ')+' → logprob: -10.710758209228516
    9. '))' → logprob: -11.835758209228516
    10. '+
' → logprob: -12.585758209228516

Token 30: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0028128400444984436
    2. ' ' → logprob: -5.87781286239624
    3. '(' → logprob: -12.627812385559082
    4. '2' → logprob: -13.627812385559082
    5. ')' → logprob: -13.752812385559082
    6. ' N' → logprob: -14.127812385559082
    7. 'N' → logprob: -14.502812385559082
    8. ' (' → logprob: -14.627812385559082
    9. '(N' → logprob: -15.002812385559082
    10. ' )' → logprob: -15.252812385559082

Token 31: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -6.313314952421933e-05
    2. ' ' → logprob: -9.750062942504883
    3. '2' → logprob: -12.875062942504883
    4. '(' → logprob: -13.500062942504883
    5. 'N' → logprob: -15.000062942504883
    6. ')' → logprob: -15.500062942504883
    7. '(N' → logprob: -16.250062942504883
    8. ' (' → logprob: -17.000062942504883
    9. '  ' → logprob: -17.250062942504883
    10. ' N' → logprob: -17.375062942504883

Token 32: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0280383548888494e-06
    2. ')
' → logprob: -14.000000953674316
    3. ' )' → logprob: -16.875001907348633
    4. ')`' → logprob: -17.750001907348633
    5. '')' → logprob: -18.125001907348633
    6. '))' → logprob: -18.250001907348633
    7. '`)' → logprob: -18.375001907348633
    8. '```' → logprob: -18.750001907348633
    9. ')

' → logprob: -20.250001907348633
    10. '）' → logprob: -20.750001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 30
Tokens correctement prédits (1ère position, stricte): 12
Tokens correctement prédits (1ère position, avec adaptation): 13
Tokens correctement prédits (top 10): 28
Précision stricte (1ère position): 40.00%
Précision adaptée (1ère position): 43.33%
Précision (top 10): 93.33%
================================================================================
