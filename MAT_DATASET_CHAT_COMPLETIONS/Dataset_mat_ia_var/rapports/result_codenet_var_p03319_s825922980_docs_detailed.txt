================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:15:36
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def main():
    """
    Fonction principale du programme.
    Lit deux entiers N et K depuis l'entrée standard, puis une liste d'entiers (qui ne sert pas au calcul ici).
    Calcule et affiche le nombre minimum d'opérations requises selon une formule donnée.
    """
    from math import ceil  # Importation de la fonction ceil pour arrondir au supérieur

    # Lecture des valeurs N (taille du problème) et K (paramètre de limitation) depuis l'entrée standard
    N, K = map(int, input().split())

    # Lecture d'une liste d'entiers depuis l'entrée standard, stockée dans 'a'.
    # L'étoile permet de dépaqueter les valeurs dans la liste 'a'.
    *a, = map(int, input().split())

    # Calcul du nombre minimal d'opérations nécessaires.
    # (N - K) correspond au nombre d'éléments restants après la première opération.
    # Chaque opération suivante peut traiter jusqu'à (K - 1) nouveaux éléments,
    # car la première opération prend K éléments, et chaque suivante peut en traiter K-1 (supposant un recouvrement d'un élément).
    # On utilise ceil pour arrondir à l'entier supérieur (cas où la division n'est pas exacte).
    # On ajoute 1 pour compter la première opération.
    ans = ceil((N - K) / (K - 1)) + 1

    # Affichage du résultat final
    print(ans)

if __name__ == '__main__':
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' main' (ID: 2758)
  → Token d'amorce (pas de prédiction)

Token 2: '():
' (ID: 8595)
  → Token d'amorce (pas de prédiction)

Token 3: '   ' (ID: 271)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\' → logprob: -0.27454787492752075
    2. '\n' → logprob: -1.774547815322876
    3. '   ' → logprob: -3.524547815322876
    4. '(' → logprob: -4.399548053741455
    5. ' 
' → logprob: -5.149548053741455
    6. '    
' → logprob: -5.274548053741455
    7. ' ' → logprob: -5.524548053741455
    8. ''' → logprob: -5.649548053741455
    9. '```' → logprob: -6.274548053741455
    10. '    ' → logprob: -6.399548053741455

Token 4: ' """
' (ID: 7037)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.38366374373435974
    2. '   ' → logprob: -1.7586637735366821
    3. 'pass' → logprob: -2.5086636543273926
    4. 'p' → logprob: -3.6336636543273926
    5. 'return' → logprob: -4.258663654327393
    6. 'r' → logprob: -4.508663654327393
    7. '#' → logprob: -5.258663654327393
    8. '    ' → logprob: -6.258663654327393
    9. 'a' → logprob: -6.383663654327393
    10. 'n' → logprob: -6.883663654327393

Token 5: '   ' (ID: 271)
  Prédit: 'Calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Calculate' → logprob: -1.3367114067077637
    2. 'Initialize' → logprob: -1.9617114067077637
    3. 'This' → logprob: -2.0867114067077637
    4. 'Run' → logprob: -2.8367114067077637
    5. '"""' → logprob: -3.0867114067077637
    6. 'Main' → logprob: -3.0867114067077637
    7. 'Initial' → logprob: -3.3367114067077637
    8. 'Start' → logprob: -3.7117114067077637
    9. 'Returns' → logprob: -3.7117114067077637
    10. 'Runs' → logprob: -3.8367114067077637

Token 6: ' Fonction' (ID: 189149)
  Prédit: 'This'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'This' → logprob: -1.4658902883529663
    2. 'Run' → logprob: -1.7158902883529663
    3. 'Calculate' → logprob: -1.9658902883529663
    4. '"""' → logprob: -2.715890407562256
    5. 'Initialize' → logprob: -2.965890407562256
    6. 'Main' → logprob: -3.215890407562256
    7. 'Process' → logprob: -3.340890407562256
    8. '   ' → logprob: -3.715890407562256
    9. 'Start' → logprob: -4.090890407562256
    10. 'Runs' → logprob: -4.090890407562256

Token 7: ' principale' (ID: 68926)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.426612913608551
    2. '   ' → logprob: -1.3016128540039062
    3. ' de' → logprob: -3.0516128540039062
    4. ' d' → logprob: -5.176612854003906
    5. '  ' → logprob: -5.176612854003906
    6. '_' → logprob: -5.551612854003906
    7. '```' → logprob: -6.301612854003906
    8. ' ```' → logprob: -6.676612854003906
    9. '    ' → logprob: -6.926612854003906
    10. '("""' → logprob: -7.051612854003906

Token 8: ' du' (ID: 1462)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10898229479789734
    2. '```' → logprob: -3.7339823246002197
    3. '    ' → logprob: -4.233982086181641
    4. '\n' → logprob: -4.233982086181641
    5. ' ' → logprob: -4.483982086181641
    6. '"""' → logprob: -4.858982086181641
    7. '    
' → logprob: -4.983982086181641
    8. 'n' → logprob: -5.233982086181641
    9. '\' → logprob: -5.858982086181641
    10. '  
' → logprob: -6.108982086181641

Token 9: ' programme' (ID: 18190)
  Prédit: ' programme'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' programme' → logprob: -0.36906713247299194
    2. 'programme' → logprob: -1.2440671920776367
    3. '   ' → logprob: -4.994067192077637
    4. ' script' → logprob: -5.244067192077637
    5. 'program' → logprob: -5.619067192077637
    6. ' program' → logprob: -6.494067192077637
    7. ' code' → logprob: -6.494067192077637
    8. ' jeu' → logprob: -8.244067192077637
    9. 'script' → logprob: -8.369067192077637
    10. 'jeu' → logprob: -8.619067192077637

Token 10: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04494068771600723
    2. '\n' → logprob: -3.794940710067749
    3. '"""' → logprob: -4.66994047164917
    4. '```' → logprob: -4.91994047164917
    5. '"""
' → logprob: -6.66994047164917
    6. '\' → logprob: -7.41994047164917
    7. '    ' → logprob: -7.54494047164917
    8. '`' → logprob: -8.044940948486328
    9. '"' → logprob: -8.044940948486328
    10. '    
' → logprob: -8.169940948486328

Token 11: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1052313894033432
    2. '"""' → logprob: -2.355231285095215
    3. '\n' → logprob: -5.980231285095215
    4. '"""
' → logprob: -7.480231285095215
    5. '    ' → logprob: -7.855231285095215
    6. '    
' → logprob: -8.105231285095215
    7. '"' → logprob: -8.230231285095215
    8. ' """' → logprob: -8.480231285095215
    9. '""' → logprob: -8.855231285095215
    10. ' ' → logprob: -9.105231285095215

Token 12: ' Lit' (ID: 45595)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04855727404356003
    2. '\n' → logprob: -3.5485572814941406
    3. '"""' → logprob: -4.423557281494141
    4. '    ' → logprob: -5.673557281494141
    5. '\' → logprob: -6.798557281494141
    6. '    
' → logprob: -7.173557281494141
    7. '       ' → logprob: -8.04855728149414
    8. ')' → logprob: -8.67355728149414
    9. ' ' → logprob: -8.79855728149414
    10. '```' → logprob: -8.92355728149414

Token 13: ' deux' (ID: 10301)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.46470096707344055
    2. ' les' → logprob: -1.0897009372711182
    3. '   ' → logprob: -3.964700937271118
    4. ' le' → logprob: -5.089701175689697
    5. ' et' → logprob: -5.714701175689697
    6. ' l' → logprob: -6.339701175689697
    7. '    ' → logprob: -6.839701175689697
    8. ' la' → logprob: -6.839701175689697
    9. '  ' → logprob: -7.339701175689697
    10. ' ' → logprob: -7.839701175689697

Token 14: ' ent' (ID: 1121)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.09844513237476349
    2. ' nombres' → logprob: -2.473445177078247
    3. ' espaces' → logprob: -5.598444938659668
    4. ' nombre' → logprob: -6.598444938659668
    5. 'nombre' → logprob: -6.848444938659668
    6. ' chaînes' → logprob: -7.598444938659668
    7. ' mots' → logprob: -7.848444938659668
    8. ' ent' → logprob: -8.098444938659668
    9. '  ' → logprob: -8.223444938659668
    10. 'n' → logprob: -8.348444938659668

Token 15: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.02413318306207657
    2. 'i' → logprob: -4.149133205413818
    3. 'ières' → logprob: -5.024133205413818
    4. 'ier' → logprob: -7.149133205413818
    5. 'r' → logprob: -7.524133205413818
    6. 'ri' → logprob: -9.64913272857666
    7. 'ié' → logprob: -10.02413272857666
    8. '   ' → logprob: -10.64913272857666
    9. '```' → logprob: -12.27413272857666
    10. 'ires' → logprob: -12.52413272857666

Token 16: ' N' (ID: 478)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.0062247514724731
    2. ' et' → logprob: -1.1312247514724731
    3. ',' → logprob: -2.5062246322631836
    4. '   ' → logprob: -2.7562246322631836
    5. 's' → logprob: -2.8812246322631836
    6. ' en' → logprob: -3.3812246322631836
    7. ' à' → logprob: -3.7562246322631836
    8. ' ,' → logprob: -4.381224632263184
    9. ' de' → logprob: -4.756224632263184
    10. '.' → logprob: -5.381224632263184

Token 17: ' et' (ID: 859)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.0232503414154053
    2. ' ' → logprob: -1.1482503414154053
    3. ' ,' → logprob: -1.8982503414154053
    4. '   ' → logprob: -2.6482503414154053
    5. ' et' → logprob: -3.0232503414154053
    6. ' )' → logprob: -4.023250579833984
    7. '    ' → logprob: -4.273250579833984
    8. ')' → logprob: -4.773250579833984
    9. ' ' → logprob: -5.648250579833984
    10. '  ' → logprob: -6.023250579833984

Token 18: ' K' (ID: 658)
  Prédit: ' M'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' M' → logprob: -0.05837035924196243
    2. 'M' → logprob: -3.808370351791382
    3. ' ' → logprob: -4.058370590209961
    4. ' K' → logprob: -5.433370590209961
    5. '```' → logprob: -6.433370590209961
    6. 'et' → logprob: -6.933370590209961
    7. 'un' → logprob: -7.308370590209961
    8. ' un' → logprob: -7.308370590209961
    9. ',' → logprob: -7.558370590209961
    10. 's' → logprob: -7.558370590209961

Token 19: ' depuis' (ID: 16277)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05535520613193512
    2. ',' → logprob: -3.4303553104400635
    3. '.' → logprob: -5.305355072021484
    4. ' ' → logprob: -5.430355072021484
    5. '\n' → logprob: -5.680355072021484
    6. '
' → logprob: -5.930355072021484
    7. '    ' → logprob: -6.680355072021484
    8. '\' → logprob: -7.055355072021484
    9. '    
' → logprob: -7.555355072021484
    10. '  ' → logprob: -7.805355072021484

Token 20: ' l' (ID: 305)
  Prédit: ' l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.757155179977417
    2. 'l' → logprob: -0.882155179977417
    3. ' input' → logprob: -2.257155179977417
    4. 'input' → logprob: -4.882155418395996
    5. ' ' → logprob: -6.007155418395996
    6. 'le' → logprob: -7.132155418395996
    7. ' stdin' → logprob: -7.757155418395996
    8. '   ' → logprob: -8.507155418395996
    9. 'les' → logprob: -8.882155418395996
    10. ' standard' → logprob: -9.007155418395996

Token 21: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.2347700297832489
    2. 'input' → logprob: -1.8597700595855713
    3. 'entrée' → logprob: -3.4847700595855713
    4. ''' → logprob: -4.609769821166992
    5. 'a' → logprob: -4.984769821166992
    6. 'e' → logprob: -6.359769821166992
    7. ''utilisateur' → logprob: -6.609769821166992
    8. ' input' → logprob: -6.734769821166992
    9. ''ent' → logprob: -8.234769821166992
    10. '’entrée' → logprob: -8.609769821166992

Token 22: ' standard' (ID: 7024)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.09381870180368423
    2. ' ,' → logprob: -3.7188186645507812
    3. ' et' → logprob: -3.9688186645507812
    4. '.' → logprob: -4.093818664550781
    5. '   ' → logprob: -4.343818664550781
    6. '\n' → logprob: -4.968818664550781
    7. ' standard' → logprob: -5.843818664550781
    8. '\' → logprob: -7.093818664550781
    9. ',
' → logprob: -7.343818664550781
    10. 'standard' → logprob: -7.343818664550781

Token 23: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11078464239835739
    2. '\n' → logprob: -2.6107845306396484
    3. ',' → logprob: -4.610784530639648
    4. '    
' → logprob: -4.735784530639648
    5. '\' → logprob: -5.360784530639648
    6. '
' → logprob: -6.110784530639648
    7. '.' → logprob: -6.360784530639648
    8. '```' → logprob: -6.985784530639648
    9. '    ' → logprob: -7.485784530639648
    10. ' ' → logprob: -7.860784530639648

Token 24: ' puis' (ID: 18766)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.24635030329227448
    2. ' et' → logprob: -1.8713502883911133
    3. ' puis' → logprob: -3.1213502883911133
    4. '    ' → logprob: -4.871350288391113
    5. 'et' → logprob: -5.496350288391113
    6. ',' → logprob: -5.871350288391113
    7. 'p' → logprob: -6.871350288391113
    8. ' ' → logprob: -6.871350288391113
    9. '```' → logprob: -6.871350288391113
    10. '\' → logprob: -7.871350288391113

Token 25: ' une' (ID: 2463)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0899991989135742
    2. ' calc' → logprob: -1.7149991989135742
    3. ' lit' → logprob: -2.089999198913574
    4. ' retourne' → logprob: -2.339999198913574
    5. ' effect' → logprob: -2.839999198913574
    6. ' affiche' → logprob: -2.964999198913574
    7. ' continue' → logprob: -3.339999198913574
    8. ' appelle' → logprob: -3.464999198913574
    9. ' ' → logprob: -4.089999198913574
    10. ' lance' → logprob: -4.339999198913574

Token 26: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -1.3180639743804932
    2. ' chaîne' → logprob: -1.3180639743804932
    3. ' ligne' → logprob: -1.9430639743804932
    4. ' ' → logprob: -2.318063974380493
    5. 'de' → logprob: -3.443063974380493
    6. 'chaine' → logprob: -3.693063974380493
    7. 'ligne' → logprob: -3.818063974380493
    8. 's' → logprob: -3.943063974380493
    9. ' suite' → logprob: -4.068063735961914
    10. 'suite' → logprob: -4.068063735961914

Token 27: ' d' (ID: 272)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.1000803709030151
    2. ' d' → logprob: -1.2250803709030151
    3. ' de' → logprob: -1.7250803709030151
    4. ' des' → logprob: -1.7250803709030151
    5. ' complète' → logprob: -4.850080490112305
    6. '<|end|>' → logprob: -6.350080490112305
    7. 'd' → logprob: -6.725080490112305
    8. 's' → logprob: -6.975080490112305
    9. ' of' → logprob: -7.600080490112305
    10. 'de' → logprob: -7.725080490112305

Token 28: ''ent' (ID: 53422)
  Prédit: ''ent'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''ent' → logprob: -0.11444752663373947
    2. ' ent' → logprob: -2.864447593688965
    3. 'e' → logprob: -3.114447593688965
    4. '’ent' → logprob: -5.989447593688965
    5. ''' → logprob: -6.614447593688965
    6. ' integers' → logprob: -7.614447593688965
    7. ''espace' → logprob: -7.614447593688965
    8. '_' → logprob: -8.114447593688965
    9. 'ent' → logprob: -8.489447593688965
    10. ''esp' → logprob: -8.864447593688965

Token 29: 'iers' (ID: 11012)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.38754621148109436
    2. 'iers' → logprob: -1.137546181678772
    3. 'ier' → logprob: -8.51254653930664
    4. 'ié' → logprob: -8.51254653930664
    5. 'ières' → logprob: -8.88754653930664
    6. '```' → logprob: -10.01254653930664
    7. '_i' → logprob: -10.63754653930664
    8. '   ' → logprob: -11.13754653930664
    9. ' i' → logprob: -11.38754653930664
    10. 'í' → logprob: -11.51254653930664

Token 30: ' (' (ID: 350)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.6701268553733826
    2. '   ' → logprob: -1.5451269149780273
    3. 's' → logprob: -2.2951269149780273
    4. ',' → logprob: -3.1701269149780273
    5. ' ' → logprob: -3.1701269149780273
    6. 'n' → logprob: -3.9201269149780273
    7. ' en' → logprob: -4.670126914978027
    8. ' et' → logprob: -4.795126914978027
    9. ' N' → logprob: -5.295126914978027
    10. ' n' → logprob: -5.545126914978027

Token 31: 'qui' (ID: 22771)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.09640856087207794
    2. ' )' → logprob: -2.5964086055755615
    3. ').' → logprob: -5.096408367156982
    4. ',' → logprob: -6.346408367156982
    5. 'n' → logprob: -6.721408367156982
    6. '),' → logprob: -6.971408367156982
    7. ' n' → logprob: -7.096408367156982
    8. ' en' → logprob: -7.221408367156982
    9. ' de' → logprob: -7.221408367156982
    10. ' N' → logprob: -7.471408367156982

Token 32: ' ne' (ID: 453)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.9636613726615906
    2. ')' → logprob: -1.9636614322662354
    3. ' correspond' → logprob: -2.0886614322662354
    4. ' représente' → logprob: -2.0886614322662354
    5. ' contient' → logprob: -2.3386614322662354
    6. '   ' → logprob: -4.088661193847656
    7. 'cont' → logprob: -4.088661193847656
    8. ' sont' → logprob: -4.213661193847656
    9. ' représentent' → logprob: -4.338661193847656
    10. ' seront' → logprob: -5.213661193847656

Token 33: ' sert' (ID: 52405)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.18383562564849854
    2. 'cont' → logprob: -2.433835506439209
    3. 'ser' → logprob: -3.683835506439209
    4. 'sera' → logprob: -4.808835506439209
    5. ' sont' → logprob: -5.183835506439209
    6. ' cont' → logprob: -5.433835506439209
    7. 'd' → logprob: -5.558835506439209
    8. 'pe' → logprob: -5.683835506439209
    9. ' dépass' → logprob: -5.683835506439209
    10. ' dépasse' → logprob: -5.683835506439209

Token 34: ' pas' (ID: 2173)
  Prédit: ' pas'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pas' → logprob: -0.17324060201644897
    2. 'pas' → logprob: -2.6732406616210938
    3. ' qu' → logprob: -3.9232406616210938
    4. '   ' → logprob: -4.048240661621094
    5. ' à' → logprob: -4.048240661621094
    6. ' ' → logprob: -4.298240661621094
    7. 'à' → logprob: -5.173240661621094
    8. ' plus' → logprob: -5.548240661621094
    9. 'a' → logprob: -5.673240661621094
    10. 'qu' → logprob: -6.798240661621094

Token 35: ' au' (ID: 2791)
  Prédit: 'à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'à' → logprob: -0.8223139047622681
    2. ' à' → logprob: -0.8223139047622681
    3. 'au' → logprob: -2.3223137855529785
    4. ' au' → logprob: -4.4473137855529785
    5. ' directement' → logprob: -5.5723137855529785
    6. '   ' → logprob: -5.8223137855529785
    7. ')' → logprob: -6.8223137855529785
    8. ' ' → logprob: -7.0723137855529785
    9. 'dans' → logprob: -7.5723137855529785
    10. 'aux' → logprob: -7.9473137855529785

Token 36: ' calcul' (ID: 7559)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7678800225257874
    2. 'c' → logprob: -2.0178799629211426
    3. 'u' → logprob: -2.0178799629211426
    4. 'r' → logprob: -2.1428799629211426
    5. 's' → logprob: -3.5178799629211426
    6. 'n' → logprob: -3.7678799629211426
    7. ' )' → logprob: -4.392879962921143
    8. ' ' → logprob: -4.517879962921143
    9. 't' → logprob: -4.517879962921143
    10. 'd' → logprob: -4.642879962921143

Token 37: ' ici' (ID: 27994)
  Prédit: ').'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ').' → logprob: -0.7140868306159973
    2. ')' → logprob: -0.8390868306159973
    3. ').
' → logprob: -3.4640867710113525
    4. '   ' → logprob: -3.8390867710113525
    5. ')
' → logprob: -4.589087009429932
    6. 's' → logprob: -5.839087009429932
    7. ' pour' → logprob: -6.089087009429932
    8. ').

' → logprob: -6.714087009429932
    9. '),' → logprob: -6.964087009429932
    10. 'de' → logprob: -6.964087009429932

Token 38: ').
' (ID: 6294)
  Prédit: ').'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ').' → logprob: -0.7952898144721985
    2. ')' → logprob: -0.9202898144721985
    3. ').
' → logprob: -2.7952897548675537
    4. '   ' → logprob: -2.9202897548675537
    5. ')
' → logprob: -3.7952897548675537
    6. '),' → logprob: -5.045289993286133
    7. ',' → logprob: -6.670289993286133
    8. '
' → logprob: -7.170289993286133
    9. ').

' → logprob: -7.170289993286133
    10. '"""
' → logprob: -7.670289993286133

Token 39: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0030808632727712393
    2. '"""' → logprob: -6.00308084487915
    3. '```' → logprob: -8.253081321716309
    4. '    
' → logprob: -9.003081321716309
    5. '"""
' → logprob: -10.128081321716309
    6. '"' → logprob: -10.378081321716309
    7. '\' → logprob: -10.378081321716309
    8. '    ' → logprob: -10.628081321716309
    9. '\n' → logprob: -10.628081321716309
    10. '  ' → logprob: -11.128081321716309

Token 40: ' Cal' (ID: 4453)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014529075473546982
    2. '"""' → logprob: -4.264529228210449
    3. '```' → logprob: -9.01452922821045
    4. '"""
' → logprob: -9.51452922821045
    5. '"' → logprob: -9.63952922821045
    6. '    ' → logprob: -10.38952922821045
    7. '""' → logprob: -10.63952922821045
    8. '\n' → logprob: -11.38952922821045
    9. '  ' → logprob: -11.63952922821045
    10. ' """' → logprob: -12.26452922821045

Token 41: 'cule' (ID: 45017)
  Prédit: 'cule'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cule' → logprob: -0.12937986850738525
    2. 'cul' → logprob: -2.1293797492980957
    3. 'c' → logprob: -6.379379749298096
    4. 'cules' → logprob: -8.379380226135254
    5. '```' → logprob: -8.379380226135254
    6. 'culate' → logprob: -9.879380226135254
    7. '   ' → logprob: -10.629380226135254
    8. '\' → logprob: -10.629380226135254
    9. 'cula' → logprob: -10.879380226135254
    10. '``' → logprob: -10.879380226135254

Token 42: ' et' (ID: 859)
  Prédit: ' et'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' et' → logprob: -1.0129934549331665
    2. ' la' → logprob: -1.1379934549331665
    3. ' ' → logprob: -1.7629934549331665
    4. ' l' → logprob: -2.887993335723877
    5. '   ' → logprob: -3.262993335723877
    6. ' le' → logprob: -3.387993335723877
    7. '  ' → logprob: -5.387993335723877
    8. ' ensuite' → logprob: -5.887993335723877
    9. '    ' → logprob: -6.012993335723877
    10. 's' → logprob: -6.762993335723877

Token 43: ' affiche' (ID: 127479)
  Prédit: ' affiche'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' affiche' → logprob: -0.42391762137413025
    2. ' retourne' → logprob: -1.9239176511764526
    3. 'aff' → logprob: -2.048917531967163
    4. '   ' → logprob: -3.173917531967163
    5. ' print' → logprob: -5.423917770385742
    6. 'ret' → logprob: -5.548917770385742
    7. ' imprime' → logprob: -5.548917770385742
    8. ' ren' → logprob: -5.548917770385742
    9. 'print' → logprob: -6.048917770385742
    10. ' affich' → logprob: -6.298917770385742

Token 44: ' le' (ID: 505)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.24979449808597565
    2. ' le' → logprob: -1.9997944831848145
    3. ' ' → logprob: -2.8747944831848145
    4. ' l' → logprob: -4.1247944831848145
    5. ' N' → logprob: -5.1247944831848145
    6. '   ' → logprob: -5.8747944831848145
    7. '(' → logprob: -7.1247944831848145
    8. ' K' → logprob: -7.2497944831848145
    9. ' the' → logprob: -7.4997944831848145
    10. 'la' → logprob: -7.8747944831848145

Token 45: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.18793457746505737
    2. ' résultat' → logprob: -2.312934637069702
    3. 'nombre' → logprob: -4.062934398651123
    4. '   ' → logprob: -4.562934398651123
    5. ' ' → logprob: -4.812934398651123
    6. ' maximum' → logprob: -5.062934398651123
    7. 's' → logprob: -5.437934398651123
    8. ' plus' → logprob: -5.562934398651123
    9. ' resultat' → logprob: -5.750434398651123
    10. 'rés' → logprob: -6.312934398651123

Token 46: ' minimum' (ID: 11085)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.9141615033149719
    2. ' de' → logprob: -1.0391614437103271
    3. ' ' → logprob: -1.5391614437103271
    4. 'd' → logprob: -4.539161682128906
    5. 's' → logprob: -5.164161682128906
    6. '  ' → logprob: -5.164161682128906
    7. 'de' → logprob: -6.164161682128906
    8. ' total' → logprob: -7.289161682128906
    9. ' maximal' → logprob: -7.664161682128906
    10. '   ' → logprob: -7.789161682128906

Token 47: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.09203747659921646
    2. ' de' → logprob: -2.4670374393463135
    3. 'de' → logprob: -6.842037677764893
    4. ' ' → logprob: -6.967037677764893
    5. 'd' → logprob: -7.092037677764893
    6. '   ' → logprob: -9.342037200927734
    7. '\' → logprob: -10.592037200927734
    8. '    ' → logprob: -10.717037200927734
    9. ' 
' → logprob: -11.092037200927734
    10. '  ' → logprob: -11.342037200927734

Token 48: ''op' (ID: 70747)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.6965916752815247
    2. ' ' → logprob: -1.9465916156768799
    3. ''' → logprob: -2.07159161567688
    4. ' espaces' → logprob: -2.19659161567688
    5. '_' → logprob: -3.32159161567688
    6. 'é' → logprob: -3.69659161567688
    7. ''esp' → logprob: -4.571591854095459
    8. ''espace' → logprob: -4.946591854095459
    9. ' e' → logprob: -5.071591854095459
    10. 'es' → logprob: -5.196591854095459

Token 49: 'érations' (ID: 152860)
  Prédit: 'é'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'é' → logprob: -0.5178422927856445
    2. 'érations' → logprob: -1.7678422927856445
    3. 'e' → logprob: -2.1428422927856445
    4. 't' → logprob: -3.2678422927856445
    5. 'ér' → logprob: -3.3928422927856445
    6. 'er' → logprob: -4.7678422927856445
    7. '\'' → logprob: -4.8928422927856445
    8. '```' → logprob: -5.1428422927856445
    9. '\' → logprob: -5.6428422927856445
    10. 'tim' → logprob: -6.5178422927856445

Token 50: ' requ' (ID: 7028)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2696110010147095
    2. ' nécessaires' → logprob: -2.01961088180542
    3. '   ' → logprob: -3.51961088180542
    4. ' nécessaire' → logprob: -3.76961088180542
    5. '  ' → logprob: -4.01961088180542
    6. 's' → logprob: -5.01961088180542
    7. ' necess' → logprob: -5.26961088180542
    8. '  
' → logprob: -6.01961088180542
    9. ' s' → logprob: -6.64461088180542
    10. ' 
' → logprob: -6.64461088180542

Token 51: 'ises' (ID: 5555)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.2555904984474182
    2. 'ises' → logprob: -1.5055904388427734
    3. 'is' → logprob: -6.255590438842773
    4. 'é' → logprob: -7.255590438842773
    5. 'e' → logprob: -7.505590438842773
    6. 'ise' → logprob: -8.630590438842773
    7. 'isées' → logprob: -10.130590438842773
    8. 'ies' → logprob: -10.380590438842773
    9. 'í' → logprob: -10.755590438842773
    10. '#' → logprob: -10.880590438842773

Token 52: ' selon' (ID: 27571)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9833314418792725
    2. ' ' → logprob: -1.2333314418792725
    3. ' pour' → logprob: -1.2333314418792725
    4. ' 
' → logprob: -3.9833314418792725
    5. 'pour' → logprob: -4.983331680297852
    6. '.' → logprob: -5.733331680297852
    7. '    
' → logprob: -5.983331680297852
    8. '  
' → logprob: -5.983331680297852
    9. '  ' → logprob: -5.983331680297852
    10. '.
' → logprob: -6.608331680297852

Token 53: ' une' (ID: 2463)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.28442758321762085
    2. ' le' → logprob: -2.1594276428222656
    3. ' l' → logprob: -2.7844276428222656
    4. ' ' → logprob: -3.1594276428222656
    5. '   ' → logprob: -4.659427642822266
    6. ' les' → logprob: -5.159427642822266
    7. '    ' → logprob: -5.784427642822266
    8. '```' → logprob: -5.909427642822266
    9. ' ' → logprob: -7.034427642822266
    10. 'le' → logprob: -7.409427642822266

Token 54: ' formule' (ID: 84316)
  Prédit: ' approche'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' approche' → logprob: -0.7232260704040527
    2. ' logique' → logprob: -1.5982260704040527
    3. ' stratégie' → logprob: -2.3482260704040527
    4. ' formule' → logprob: -3.2232260704040527
    5. ' méthode' → logprob: -3.7232260704040527
    6. '   ' → logprob: -4.285726070404053
    7. ' certaine' → logprob: -4.348226070404053
    8. ' form' → logprob: -4.660726070404053
    9. ' règle' → logprob: -4.910726070404053
    10. ' strat' → logprob: -4.973226070404053

Token 55: ' donnée' (ID: 130126)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5565782189369202
    2. '\n' → logprob: -1.0565781593322754
    3. '    
' → logprob: -3.5565781593322754
    4. '
' → logprob: -4.181578159332275
    5. '```' → logprob: -5.056578159332275
    6. '\' → logprob: -5.306578159332275
    7. '  
' → logprob: -5.556578159332275
    8. '.' → logprob: -5.806578159332275
    9. ' ' → logprob: -5.931578159332275
    10. '  ' → logprob: -6.306578159332275

Token 56: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.24455910921096802
    2. '
' → logprob: -1.8695590496063232
    3. '\n' → logprob: -3.6195590496063232
    4. '```' → logprob: -4.619559288024902
    5. '    
' → logprob: -4.744559288024902
    6. '"""
' → logprob: -4.869559288024902
    7. '"""' → logprob: -6.369559288024902
    8. '\' → logprob: -6.494559288024902
    9. '  
' → logprob: -6.744559288024902
    10. ')
' → logprob: -6.869559288024902

Token 57: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03760209307074547
    2. '"""' → logprob: -3.537602186203003
    3. '"""
' → logprob: -5.412601947784424
    4. '```' → logprob: -6.037601947784424
    5. '"' → logprob: -7.412601947784424
    6. '""' → logprob: -9.537602424621582
    7. '`' → logprob: -9.662602424621582
    8. ' """
' → logprob: -10.037602424621582
    9. '
' → logprob: -10.162602424621582
    10. '    ' → logprob: -10.412602424621582

Token 58: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1515495777130127
    2. '"""' → logprob: -2.0265495777130127
    3. '"""
' (adapté à ' """
') → logprob: -5.276549339294434
    4. '"' → logprob: -6.276549339294434
    5. '```' → logprob: -6.651549339294434
    6. '""' → logprob: -8.901549339294434
    7. '
' → logprob: -9.151549339294434
    8. ' """' → logprob: -9.276549339294434
    9. ' """
' → logprob: -10.026549339294434
    10. '    ' → logprob: -10.151549339294434

Token 59: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4432969391345978
    2. '
' → logprob: -1.1932969093322754
    3. '    
' → logprob: -3.6932969093322754
    4. '\n' → logprob: -4.068296909332275
    5. 'n' → logprob: -4.568296909332275
    6. 'newline' → logprob: -7.443296909332275
    7. '```' → logprob: -7.568296909332275
    8. '\' → logprob: -7.818296909332275
    9. '    ' → logprob: -8.693297386169434
    10. ' 
' → logprob: -8.693297386169434

Token 60: ' from' (ID: 591)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14153620600700378
    2. 'n' → logprob: -2.891536235809326
    3. '\n' → logprob: -3.141536235809326
    4. '
' → logprob: -3.891536235809326
    5. 'N' → logprob: -5.016536235809326
    6. '    
' → logprob: -5.516536235809326
    7. ' 
' → logprob: -7.766536235809326
    8. 'import' → logprob: -8.141535758972168
    9. ' N' → logprob: -8.141535758972168
    10. '\' → logprob: -8.391535758972168

Token 61: ' math' (ID: 13324)
  Prédit: ' sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.0730261281132698
    2. ' math' → logprob: -2.698026180267334
    3. 'sys' → logprob: -5.823026180267334
    4. 'math' → logprob: -9.323025703430176
    5. ' collections' → logprob: -10.948025703430176
    6. '=sys' → logprob: -12.198025703430176
    7. ' sym' → logprob: -12.573025703430176
    8. ' ' → logprob: -12.573025703430176
    9. ' typing' → logprob: -13.073025703430176
    10. ' random' → logprob: -13.823025703430176

Token 62: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.04893841966986656
    2. 'import' → logprob: -3.048938512802124
    3. '	import' → logprob: -8.673938751220703
    4. ' ' → logprob: -9.048938751220703
    5. ' impor' → logprob: -11.423938751220703
    6. '.ceil' → logprob: -11.673938751220703
    7. ' importar' → logprob: -11.798938751220703
    8. ' importe' → logprob: -12.173938751220703
    9. '_import' → logprob: -12.548938751220703
    10. '.' → logprob: -12.673938751220703

Token 63: ' ceil' (ID: 35964)
  Prédit: 'ceil'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ceil' → logprob: -0.4866456091403961
    2. ' ceil' → logprob: -0.9866455793380737
    3. ' inf' → logprob: -5.361645698547363
    4. 'log' → logprob: -5.986645698547363
    5. 'inf' → logprob: -6.111645698547363
    6. 'floor' → logprob: -6.361645698547363
    7. ' floor' → logprob: -7.861645698547363
    8. 'sqrt' → logprob: -8.611645698547363
    9. '.ceil' → logprob: -8.736645698547363
    10. ' log' → logprob: -8.986645698547363

Token 64: ' ' (ID: 220)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7742566466331482
    2. '    
' → logprob: -0.8992566466331482
    3. '
' → logprob: -2.399256706237793
    4. 'n' → logprob: -4.649256706237793
    5. '   
' → logprob: -4.899256706237793
    6. 'def' → logprob: -5.524256706237793
    7. 'N' → logprob: -5.649256706237793
    8. '  
' → logprob: -6.024256706237793
    9. '    
    
' → logprob: -6.149256706237793
    10. '

' → logprob: -6.274256706237793

Token 65: ' #' (ID: 1069)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -1.2018312215805054
    2. '   ' → logprob: -1.3268312215805054
    3. '    
' → logprob: -2.076831340789795
    4. '

' → logprob: -2.326831340789795
    5. 'def' → logprob: -3.076831340789795
    6. '
    
' → logprob: -3.076831340789795
    7. 'n' → logprob: -3.326831340789795
    8. 'N' → logprob: -3.951831340789795
    9. '    
    
' → logprob: -4.326831340789795
    10. '  
' → logprob: -4.951831340789795

Token 66: ' Import' (ID: 19998)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5076963901519775
    2. ' def' → logprob: -1.7576963901519775
    3. ' 
' → logprob: -3.7576963901519775
    4. '<|end|>' → logprob: -3.7576963901519775
    5. ' 

' → logprob: -3.8826963901519775
    6. ' ' → logprob: -3.8826963901519775
    7. '   ' → logprob: -4.132696151733398
    8. '
' → logprob: -4.132696151733398
    9. '

' → logprob: -4.257696151733398
    10. '    
' → logprob: -4.382696151733398

Token 67: 'ation' (ID: 387)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.25824499130249023
    2. '<|end|>' → logprob: -1.8832449913024902
    3. ' ' → logprob: -3.6332449913024902
    4. '<|end|>' → logprob: -3.8832449913024902
    5. '(s' → logprob: -4.75824499130249
    6. 'def' → logprob: -5.00824499130249
    7. '(
' → logprob: -5.50824499130249
    8. ')' → logprob: -6.63324499130249
    9. ',' → logprob: -6.75824499130249
    10. '(n' → logprob: -7.13324499130249

Token 68: ' de' (ID: 334)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 69: ' la' (ID: 557)
  Prédit: 'ceil'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ceil' → logprob: -0.33088499307632446
    2. 'math' → logprob: -1.8308849334716797
    3. ' ceil' → logprob: -3.3308849334716797
    4. ' math' → logprob: -3.4558849334716797
    5. 'div' → logprob: -4.58088493347168
    6. 'cmath' → logprob: -4.95588493347168
    7. '<|end|>' → logprob: -5.08088493347168
    8. '```' → logprob: -5.08088493347168
    9. ' ' → logprob: -5.20588493347168
    10. 'division' → logprob: -5.58088493347168

Token 70: ' fonction' (ID: 17610)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.0922604501247406
    2. ' ceil' → logprob: -2.8422603607177734
    3. 'ceil' → logprob: -4.842260360717773
    4. ' division' → logprob: -5.342260360717773
    5. ' module' → logprob: -5.467260360717773
    6. ' def' → logprob: -5.717260360717773
    7. 'div' → logprob: -6.217260360717773
    8. '```' → logprob: -6.967260360717773
    9. ' python' → logprob: -7.217260360717773
    10. 'python' → logprob: -7.217260360717773

Token 71: ' ceil' (ID: 35964)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 72: ' pour' (ID: 1930)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1663011908531189
    2. '    
' → logprob: -2.9163012504577637
    3. 'def' → logprob: -3.0413012504577637
    4. '
' → logprob: -3.5413012504577637
    5. 'n' → logprob: -4.791301250457764
    6. '  
' → logprob: -5.916301250457764
    7. '\n' → logprob: -5.916301250457764
    8. '<|end|>' → logprob: -6.416301250457764
    9. '   
' → logprob: -7.166301250457764
    10. ' ' → logprob: -7.166301250457764

Token 73: ' arr' (ID: 1724)
  Prédit: 'div'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'div' → logprob: -0.5099577903747559
    2. ' div' → logprob: -1.8849577903747559
    3. 'ceil' → logprob: -2.384957790374756
    4. ' ceil' → logprob: -2.634957790374756
    5. ' division' → logprob: -3.634957790374756
    6. 'calcul' → logprob: -4.259957790374756
    7. ' math' → logprob: -4.509957790374756
    8. ' ' → logprob: -5.384957790374756
    9. 'division' → logprob: -5.509957790374756
    10. ' effectuer' → logprob: -5.759957790374756

Token 74: 'ond' (ID: 1415)
  Prédit: 'ond'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ond' → logprob: -0.018243594095110893
    2. 'ondi' → logprob: -4.268243789672852
    3. 'on' → logprob: -6.643243789672852
    4. 'iver' → logprob: -7.143243789672852
    5. 'ondissement' → logprob: -8.143243789672852
    6. 'onder' → logprob: -8.143243789672852
    7. '**' → logprob: -8.768243789672852
    8. 'êter' → logprob: -8.768243789672852
    9. '```' → logprob: -9.518243789672852
    10. 'ound' → logprob: -9.643243789672852

Token 75: 'ir' (ID: 380)
  Prédit: 'ir'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ir' → logprob: -0.14426881074905396
    2. 'i' → logprob: -2.019268751144409
    3. 'ie' → logprob: -7.269268989562988
    4. '```' → logprob: -8.394268989562988
    5. 'is' → logprob: -8.519268989562988
    6. '-' → logprob: -9.519268989562988
    7. 'er' → logprob: -9.769268989562988
    8. '   ' → logprob: -10.394268989562988
    9. '(i' → logprob: -10.644268989562988
    10. '`' → logprob: -11.144268989562988

Token 76: ' au' (ID: 2791)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 77: ' supérieur' (ID: 98491)
  Prédit: 'sup'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sup' → logprob: -0.14084401726722717
    2. 'haut' → logprob: -2.8908441066741943
    3. ' supérieur' → logprob: -3.7658441066741943
    4. 'nombre' → logprob: -4.390843868255615
    5. 'ha' → logprob: -5.390843868255615
    6. '   ' → logprob: -5.640843868255615
    7. ' sup' → logprob: -5.765843868255615
    8. '-dessus' → logprob: -5.890843868255615
    9. 'b' → logprob: -5.890843868255615
    10. ' ' → logprob: -6.015843868255615

Token 78: '

' (ID: 279)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.1168413162231445
    2. '    
' → logprob: -1.1168413162231445
    3. '
' → logprob: -1.2418413162231445
    4. 'n' → logprob: -3.7418413162231445
    5. '  
' → logprob: -4.8668413162231445
    6. 'def' → logprob: -5.4918413162231445
    7. '

' → logprob: -5.6168413162231445
    8. '   
' → logprob: -5.8668413162231445
    9. '  ' → logprob: -6.3668413162231445
    10. '    
    
' → logprob: -6.3668413162231445

Token 79: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1322498619556427
    2. '    
' → logprob: -2.5072498321533203
    3. 'n' → logprob: -3.7572498321533203
    4. '
' → logprob: -4.13224983215332
    5. 'N' → logprob: -6.88224983215332
    6. '   
' → logprob: -7.63224983215332
    7. '  
' → logprob: -7.75724983215332
    8. '    
    
' → logprob: -7.88224983215332
    9. ' 
' → logprob: -9.00724983215332
    10. '    

' → logprob: -9.38224983215332

Token 80: ' #' (ID: 1069)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.07167152315378189
    2. 'n' → logprob: -3.071671485900879
    3. '   ' → logprob: -4.321671485900879
    4. ' N' → logprob: -4.821671485900879
    5. '#' (adapté à ' #') → logprob: -7.196671485900879
    6. ' n' → logprob: -8.071671485900879
    7. ' ' → logprob: -8.821671485900879
    8. 'try' → logprob: -9.821671485900879
    9. '    
' → logprob: -10.071671485900879
    10. 'def' → logprob: -10.696671485900879

Token 81: ' Lecture' (ID: 106534)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.8317437767982483
    2. 'n' → logprob: -1.3317437171936035
    3. ' N' → logprob: -1.5817437171936035
    4. ' n' → logprob: -2.7067437171936035
    5. '   ' → logprob: -4.2067437171936035
    6. '#' → logprob: -4.9567437171936035
    7. ' #' → logprob: -6.0817437171936035
    8. ' ' → logprob: -7.3317437171936035
    9. ' input' → logprob: -7.7692437171936035
    10. 'input' → logprob: -7.8942437171936035

Token 82: ' des' (ID: 731)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6872292757034302
    2. ' des' → logprob: -0.8122292757034302
    3. ' N' → logprob: -3.5622291564941406
    4. '(N' → logprob: -5.062229156494141
    5. ' de' → logprob: -5.437229156494141
    6. ' ' → logprob: -5.937229156494141
    7. '    ' → logprob: -6.312229156494141
    8. ' (' → logprob: -6.562229156494141
    9. 'de' → logprob: -6.812229156494141
    10. '  ' → logprob: -6.937229156494141

Token 83: ' valeurs' (ID: 73668)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.38650673627853394
    2. ' données' → logprob: -2.0115067958831787
    3. ' N' → logprob: -3.0115067958831787
    4. 'n' → logprob: -3.2615067958831787
    5. ' ent' → logprob: -3.8865067958831787
    6. 'de' → logprob: -4.0115065574646
    7. ' valeurs' → logprob: -4.0115065574646
    8. ' nombres' → logprob: -4.7615065574646
    9. ' n' → logprob: -5.0115065574646
    10. ' deux' → logprob: -5.3865065574646

Token 84: ' N' (ID: 478)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.053109172731637955
    2. 'n' → logprob: -3.8031091690063477
    3. '    
' → logprob: -4.803109169006348
    4. 'N' → logprob: -4.928109169006348
    5. ' N' → logprob: -4.928109169006348
    6. ' ' → logprob: -5.928109169006348
    7. '
' → logprob: -7.053109169006348
    8. '  ' → logprob: -7.803109169006348
    9. 's' → logprob: -7.928109169006348
    10. 'd' → logprob: -8.428109169006348

Token 85: ' (' (ID: 350)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0016206686850637197
    2. ' ,' → logprob: -7.126620769500732
    3. ' et' → logprob: -8.001620292663574
    4. ',N' → logprob: -9.126620292663574
    5. ' =' → logprob: -9.251620292663574
    6. ' ' → logprob: -9.251620292663574
    7. 'et' → logprob: -9.501620292663574
    8. ',K' → logprob: -10.626620292663574
    9. '<|end|>' → logprob: -10.876620292663574
    10. '=' → logprob: -11.126620292663574

Token 86: 'tail' (ID: 20472)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.035547032952308655
    2. ' ,' → logprob: -3.9105470180511475
    3. ')' → logprob: -4.535547256469727
    4. ' )' → logprob: -6.160547256469727
    5. ' ' → logprob: -7.410547256469727
    6. ' et' → logprob: -7.910547256469727
    7. '),' → logprob: -8.035547256469727
    8. ',)' → logprob: -8.160547256469727
    9. ' ),' → logprob: -8.660547256469727
    10. ',K' → logprob: -9.410547256469727

Token 87: 'le' (ID: 282)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.6944897770881653
    2. 'le' → logprob: -0.6944897770881653
    3. 'l' → logprob: -7.6944899559021
    4. '   ' → logprob: -7.8194899559021
    5. '#' → logprob: -9.819489479064941
    6. '```' → logprob: -9.819489479064941
    7. '\' → logprob: -10.069489479064941
    8. ')' → logprob: -10.069489479064941
    9. 'les' → logprob: -10.194489479064941
    10. '     ' → logprob: -10.694489479064941

Token 88: ' du' (ID: 1462)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0143953561782837
    2. ',' → logprob: -1.2643953561782837
    3. ' )' → logprob: -1.2643953561782837
    4. ' ,' → logprob: -2.764395236968994
    5. ' ' → logprob: -5.389395236968994
    6. ' et' → logprob: -6.014395236968994
    7. ' ),' → logprob: -7.014395236968994
    8. '),' → logprob: -8.014395713806152
    9. '=' → logprob: -8.389395713806152
    10. ' and' → logprob: -8.514395713806152

Token 89: ' problème' (ID: 35630)
  Prédit: ' tableau'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' tableau' → logprob: -0.12816348671913147
    2. 'table' → logprob: -2.7531635761260986
    3. ' table' → logprob: -4.1281633377075195
    4. ' plateau' → logprob: -4.6281633377075195
    5. ')' → logprob: -5.4406633377075195
    6. ' ' → logprob: -5.7531633377075195
    7. 'plate' → logprob: -6.3156633377075195
    8. ' segment' → logprob: -6.8781633377075195
    9. 't' → logprob: -6.9406633377075195
    10. '_' → logprob: -7.0656633377075195

Token 90: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.11978019773960114
    2. ',' → logprob: -2.6197803020477295
    3. '),' → logprob: -3.7447803020477295
    4. ' )' → logprob: -4.36978006362915
    5. ' et' → logprob: -6.24478006362915
    6. ' ),' → logprob: -7.36978006362915
    7. ' ,' → logprob: -7.61978006362915
    8. 'et' → logprob: -7.86978006362915
    9. '   ' → logprob: -9.244780540466309
    10. ',)' → logprob: -9.994780540466309

Token 91: ' et' (ID: 859)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.2364010512828827
    2. ' ,' → logprob: -2.236401081085205
    3. ' et' → logprob: -2.486401081085205
    4. ' ' → logprob: -4.861401081085205
    5. '   ' → logprob: -5.111401081085205
    6. ')' → logprob: -5.611401081085205
    7. ' and' → logprob: -7.361401081085205
    8. ' =' → logprob: -7.861401081085205
    9. 'et' → logprob: -8.111400604248047
    10. ' )' → logprob: -8.111400604248047

Token 92: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.05631764233112335
    2. 'K' → logprob: -2.9313175678253174
    3. ' ' → logprob: -7.3063178062438965
    4. ' ' → logprob: -8.056317329406738
    5. ',' → logprob: -8.806317329406738
    6. '<|end|>' → logprob: -9.306317329406738
    7. '  ' → logprob: -9.431317329406738
    8. ' ,' → logprob: -10.431317329406738
    9. ')' → logprob: -10.681317329406738
    10. '    ' → logprob: -11.181317329406738

Token 93: ' (' (ID: 350)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2852448523044586
    2. ',' → logprob: -1.4102448225021362
    3. '=' → logprob: -5.660244941711426
    4. ' ,' → logprob: -7.785244941711426
    5. ',N' → logprob: -9.910244941711426
    6. ',n' → logprob: -10.410244941711426
    7. ')' → logprob: -10.910244941711426
    8. '   ' → logprob: -11.035244941711426
    9. ' ' → logprob: -11.160244941711426
    10. '  ' → logprob: -11.285244941711426

Token 94: 'param' (ID: 1355)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.2102571725845337
    2. ',' → logprob: -1.3352571725845337
    3. ' )' → logprob: -1.7102571725845337
    4. ' ,' → logprob: -2.460257053375244
    5. ' ' → logprob: -2.710257053375244
    6. ' l' → logprob: -3.210257053375244
    7. ' la' → logprob: -3.335257053375244
    8. ' le' → logprob: -5.210257053375244
    9. 'max' → logprob: -5.835257053375244
    10. '  ' → logprob: -6.085257053375244

Token 95: 'ètre' (ID: 60948)
  Prédit: 'ètre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ètre' → logprob: -0.013146352022886276
    2. 'eter' → logprob: -5.51314640045166
    3. 'etre' → logprob: -5.63814640045166
    4. '   ' → logprob: -6.26314640045166
    5. 'ètres' → logprob: -6.63814640045166
    6. ')' → logprob: -7.88814640045166
    7. 'éter' → logprob: -8.01314640045166
    8. 'et' → logprob: -8.13814640045166
    9. 'è' → logprob: -8.26314640045166
    10. ' ' → logprob: -8.63814640045166

Token 96: ' de' (ID: 334)
  Prédit: ' )'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' )' → logprob: -0.6291046142578125
    2. ')' → logprob: -0.8791046142578125
    3. ' d' → logprob: -4.6291046142578125
    4. ',' → logprob: -4.7541046142578125
    5. ' de' → logprob: -5.0041046142578125
    6. '   ' → logprob: -5.1291046142578125
    7. ' ' → logprob: -5.8791046142578125
    8. ' ,' → logprob: -6.0041046142578125
    9. ' ),' → logprob: -6.1291046142578125
    10. ' =' → logprob: -6.6291046142578125

Token 97: ' limitation' (ID: 37039)
  Prédit: ' division'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' division' → logprob: -1.7750754356384277
    2. ' l' → logprob: -2.2750754356384277
    3. ' la' → logprob: -2.2750754356384277
    4. ' décou' → logprob: -2.4000754356384277
    5. ' partition' → logprob: -2.7750754356384277
    6. 'division' → logprob: -2.7750754356384277
    7. 'd' → logprob: -3.1500754356384277
    8. ' séparation' → logprob: -3.1500754356384277
    9. 'spl' → logprob: -3.4000754356384277
    10. 'partition' → logprob: -3.6500754356384277

Token 98: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.06006372347474098
    2. ' )' → logprob: -3.1850638389587402
    3. '   ' → logprob: -4.81006383895874
    4. ' de' → logprob: -6.18506383895874
    5. ')
' → logprob: -6.18506383895874
    6. ' des' → logprob: -6.56006383895874
    7. '):' → logprob: -6.68506383895874
    8. '):
' → logprob: -7.31006383895874
    9. ' )
' → logprob: -8.310063362121582
    10. 'de' → logprob: -8.435063362121582

Token 99: ' depuis' (ID: 16277)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5810535550117493
    2. '   ' → logprob: -0.9560535550117493
    3. '    
' → logprob: -3.0810534954071045
    4. '  
' → logprob: -5.206053733825684
    5. 'n' → logprob: -6.206053733825684
    6. '\n' → logprob: -6.456053733825684
    7. '   
' → logprob: -7.706053733825684
    8. ' 
' → logprob: -8.331053733825684
    9. 'N' → logprob: -9.081053733825684
    10. '  ' → logprob: -10.331053733825684

Token 100: ' l' (ID: 305)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.5145349502563477
    2. ' la' → logprob: -2.0145349502563477
    3. 'input' → logprob: -2.1395349502563477
    4. ' l' → logprob: -2.2645349502563477
    5. 'l' → logprob: -4.264534950256348
    6. ' ' → logprob: -4.264534950256348
    7. '   ' → logprob: -4.889534950256348
    8. ' stdin' → logprob: -5.389534950256348
    9. '=input' → logprob: -6.014534950256348
    10. 'stdin' → logprob: -7.014534950256348

Token 101: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.011500692926347256
    2. ''' → logprob: -5.386500835418701
    3. 'entrée' → logprob: -5.386500835418701
    4. '   ' → logprob: -7.136500835418701
    5. 'input' → logprob: -8.136500358581543
    6. '’entrée' → logprob: -8.511500358581543
    7. ' input' → logprob: -9.011500358581543
    8. 'a' → logprob: -9.011500358581543
    9. ' entrée' → logprob: -9.136500358581543
    10. '_input' → logprob: -9.136500358581543

Token 102: ' standard' (ID: 7024)
  Prédit: ' standard'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' standard' → logprob: -0.04331248253583908
    2. '   ' → logprob: -3.9183125495910645
    3. 'standard' → logprob: -4.7933125495910645
    4. ' stdin' → logprob: -5.0433125495910645
    5. ' ' → logprob: -5.6683125495910645
    6. ' input' → logprob: -7.5433125495910645
    7. ' )' → logprob: -7.5433125495910645
    8. ')' → logprob: -7.6683125495910645
    9. ',' → logprob: -7.7933125495910645
    10. '(stdin' → logprob: -8.043312072753906

Token 103: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014129186049103737
    2. '    
' → logprob: -4.889129161834717
    3. '
' → logprob: -5.389129161834717
    4. 'N' → logprob: -7.264129161834717
    5. 'n' → logprob: -7.514129161834717
    6. '  
' → logprob: -7.889129161834717
    7. '   
' → logprob: -9.514129638671875
    8. '\n' → logprob: -9.889129638671875
    9. '  ' → logprob: -10.639129638671875
    10. ' ' → logprob: -10.639129638671875

Token 104: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0028720423579216003
    2. '    
' → logprob: -6.627871990203857
    3. '
' → logprob: -7.127871990203857
    4. 'n' → logprob: -7.627871990203857
    5. 'N' → logprob: -8.877872467041016
    6. '  
' → logprob: -10.627872467041016
    7. '  ' → logprob: -11.252872467041016
    8. '\n' → logprob: -11.627872467041016
    9. '   
' → logprob: -11.627872467041016
    10. ' ' → logprob: -11.752872467041016

Token 105: ' N' (ID: 478)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.27369406819343567
    2. 'N' (adapté à ' N') → logprob: -1.8986940383911133
    3. ' N' → logprob: -2.5236940383911133
    4. '    
' → logprob: -5.148694038391113
    5. 'n' → logprob: -6.023694038391113
    6. ' 
' → logprob: -8.398694038391113
    7. ' n' → logprob: -8.398694038391113
    8. '    ' → logprob: -8.523694038391113
    9. '
' → logprob: -8.773694038391113
    10. '  ' → logprob: -9.148694038391113

Token 106: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0001600347168277949
    2. ' ,' → logprob: -9.000160217285156
    3. ',K' → logprob: -10.250160217285156
    4. ',k' → logprob: -14.500160217285156
    5. ',N' → logprob: -15.250160217285156
    6. ',
' → logprob: -15.500160217285156
    7. ' ' → logprob: -16.375160217285156
    8. ' K' → logprob: -17.375160217285156
    9. ' =' → logprob: -17.375160217285156
    10. '=' → logprob: -17.500160217285156

Token 107: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.03492685779929161
    2. 'K' → logprob: -3.4099268913269043
    3. ' ' → logprob: -6.784926891326904
    4. '  ' → logprob: -9.409926414489746
    5. ' ' → logprob: -10.284926414489746
    6. '<|end|>' → logprob: -11.409926414489746
    7. '=' → logprob: -12.159926414489746
    8. '    ' → logprob: -12.284926414489746
    9. ' ' → logprob: -12.534926414489746
    10. ' =' → logprob: -13.409926414489746

Token 108: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.03804757073521614
    2. '=' → logprob: -3.2880475521087646
    3. '=input' → logprob: -12.163047790527344
    4. '=int' → logprob: -14.538047790527344
    5. ' ' → logprob: -15.663047790527344
    6. ')' → logprob: -16.038047790527344
    7. '   ' → logprob: -17.288047790527344
    8. ',' → logprob: -17.413047790527344
    9. '＝' → logprob: -17.913047790527344
    10. '	' → logprob: -18.100547790527344

Token 109: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.0019337546546012163
    2. 'map' → logprob: -6.251933574676514
    3. ' ' → logprob: -12.876934051513672
    4. '	map' → logprob: -14.126934051513672
    5. ' list' → logprob: -14.251934051513672
    6. ' ' → logprob: -14.751934051513672
    7. ' [' → logprob: -15.376934051513672
    8. ' tuple' → logprob: -15.626934051513672
    9. ' input' → logprob: -15.876934051513672
    10. '(map' → logprob: -16.376934051513672

Token 110: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.006787723861634731
    2. '(' → logprob: -5.0067877769470215
    3. '(input' → logprob: -9.756787300109863
    4. '(str' → logprob: -11.506787300109863
    5. '(
' → logprob: -13.381787300109863
    6. '(list' → logprob: -13.756787300109863
    7. 'int' → logprob: -14.131787300109863
    8. '<int' → logprob: -15.006787300109863
    9. ' (' → logprob: -15.256787300109863
    10. '=int' → logprob: -16.25678825378418

Token 111: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0034980308264493942
    2. 'input' → logprob: -6.253498077392578
    3. '(' → logprob: -6.753498077392578
    4. ' input' → logprob: -8.878498077392578
    5. ',input' → logprob: -9.003498077392578
    6. ')' → logprob: -9.128498077392578
    7. ',' → logprob: -11.378498077392578
    8. '   ' → logprob: -12.003498077392578
    9. ' (' → logprob: -12.003498077392578
    10. '=input' → logprob: -12.753498077392578

Token 112: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.3868788182735443
    2. ' input' → logprob: -1.1368788480758667
    3. ')' → logprob: -12.261878967285156
    4. '   ' → logprob: -14.011878967285156
    5. '(input' → logprob: -14.011878967285156
    6. ' ' → logprob: -14.261878967285156
    7. '	input' → logprob: -15.136878967285156
    8. ',input' → logprob: -15.511878967285156
    9. '=input' → logprob: -15.886878967285156
    10. ' )' → logprob: -16.136878967285156

Token 113: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.00012582694762386382
    2. '()' → logprob: -9.000125885009766
    3. ' ().' → logprob: -13.125125885009766
    4. '())' → logprob: -15.875125885009766
    5. ')' → logprob: -15.875125885009766
    6. '(' → logprob: -16.625125885009766
    7. '()
' → logprob: -17.500125885009766
    8. '   ' → logprob: -17.875125885009766
    9. '(input' → logprob: -18.500125885009766
    10. ' ()' → logprob: -18.750125885009766

Token 114: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0004341261519584805
    2. 'strip' → logprob: -7.750433921813965
    3. 'rstrip' → logprob: -13.375433921813965
    4. '(split' → logprob: -13.750433921813965
    5. ' split' → logprob: -14.875433921813965
    6. ')' → logprob: -15.250433921813965
    7. '().' → logprob: -16.50043487548828
    8. 'read' → logprob: -16.62543487548828
    9. 'spl' → logprob: -17.00043487548828
    10. 's' → logprob: -17.12543487548828

Token 115: '())

' (ID: 27654)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1032727062702179
    2. '())' → logprob: -2.3532726764678955
    3. '()' → logprob: -5.978272914886475
    4. '))' → logprob: -7.603272914886475
    5. '(' → logprob: -11.603272438049316
    6. '()))' → logprob: -11.728272438049316
    7. ' )' → logprob: -13.103272438049316
    8. '())
' → logprob: -13.353272438049316
    9. ')`' → logprob: -13.603272438049316
    10. ')
' → logprob: -13.728272438049316

Token 116: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6508852243423462
    2. '
' → logprob: -1.0258852243423462
    3. '    
' → logprob: -2.4008851051330566
    4. '  
' → logprob: -4.275885105133057
    5. ' 
' → logprob: -5.400885105133057
    6. '   
' → logprob: -6.150885105133057
    7. '```' → logprob: -6.400885105133057
    8. ')' → logprob: -6.775885105133057
    9. ' if' → logprob: -7.025885105133057
    10. 'if' → logprob: -7.400885105133057

Token 117: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.05268132686615
    2. 'if' → logprob: -2.3026814460754395
    3. 'lst' → logprob: -2.3026814460754395
    4. ' if' → logprob: -2.4276814460754395
    5. 'result' → logprob: -3.4276814460754395
    6. 'data' → logprob: -3.5526814460754395
    7. 'numbers' → logprob: -3.6776814460754395
    8. ' lst' → logprob: -3.9276814460754395
    9. '#' (adapté à ' #') → logprob: -3.9276814460754395
    10. 'nums' → logprob: -4.0526814460754395

Token 118: ' Lecture' (ID: 106534)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.9628758430480957
    2. 'lst' → logprob: -1.9628758430480957
    3. 'operations' → logprob: -2.3378758430480957
    4. '#' → logprob: -2.5878758430480957
    5. 'result' → logprob: -2.7128758430480957
    6. 'data' → logprob: -3.0878758430480957
    7. 'L' → logprob: -3.8378758430480957
    8. 'ops' → logprob: -3.8378758430480957
    9. 'a' → logprob: -3.8378758430480957
    10. 'l' → logprob: -3.9628758430480957

Token 119: ' d' (ID: 272)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.12371363490819931
    2. '   ' → logprob: -2.998713731765747
    3. '(' → logprob: -3.248713731765747
    4. ' la' → logprob: -4.248713493347168
    5. ' d' → logprob: -5.373713493347168
    6. ' des' → logprob: -5.748713493347168
    7. 's' → logprob: -6.373713493347168
    8. 'd' → logprob: -7.248713493347168
    9. ' de' → logprob: -7.373713493347168
    10. '    ' → logprob: -7.873713493347168

Token 120: ''une' (ID: 13337)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.5688641667366028
    2. '()' → logprob: -0.9438641667366028
    3. '(' → logprob: -3.693864107131958
    4. 'une' → logprob: -4.943864345550537
    5. 'a' → logprob: -5.193864345550537
    6. 'e' → logprob: -6.818864345550537
    7. ' une' → logprob: -7.068864345550537
    8. 'la' → logprob: -7.068864345550537
    9. 'the' → logprob: -7.818864345550537
    10. '(input' → logprob: -7.943864345550537

Token 121: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.5407935380935669
    2. 'liste' → logprob: -0.9157935380935669
    3. '_list' → logprob: -5.540793418884277
    4. 'list' → logprob: -5.790793418884277
    5. '_' → logprob: -6.040793418884277
    6. 'Liste' → logprob: -6.290793418884277
    7. '()' → logprob: -6.790793418884277
    8. ' ' → logprob: -6.915793418884277
    9. ' list' → logprob: -7.290793418884277
    10. ' =' → logprob: -7.540793418884277

Token 122: ' d' (ID: 272)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.2920014560222626
    2. '(' → logprob: -1.667001485824585
    3. 's' → logprob: -3.917001485824585
    4. '   ' → logprob: -4.292001247406006
    5. '(int' → logprob: -5.417001247406006
    6. '[' → logprob: -5.417001247406006
    7. ' integers' → logprob: -5.792001247406006
    8. 'd' → logprob: -6.417001247406006
    9. '[int' → logprob: -6.542001247406006
    10. ',' → logprob: -6.917001247406006

Token 123: ''ent' (ID: 53422)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -1.4487135410308838
    2. ' integers' → logprob: -1.6987135410308838
    3. '(int' → logprob: -2.073713541030884
    4. 'ent' → logprob: -2.073713541030884
    5. 'inte' → logprob: -2.573713541030884
    6. 'ints' → logprob: -2.698713541030884
    7. ''ent' → logprob: -2.698713541030884
    8. '(' → logprob: -3.448713541030884
    9. '_' → logprob: -3.948713541030884
    10. '()' → logprob: -4.698713302612305

Token 124: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.0109955919906497
    2. 't' → logprob: -4.635995388031006
    3. 'tiers' → logprob: -7.385995388031006
    4. 'ti' → logprob: -9.135995864868164
    5. 'ier' → logprob: -9.135995864868164
    6. 'ts' → logprob: -9.760995864868164
    7. 'er' → logprob: -10.135995864868164
    8. 'te' → logprob: -10.385995864868164
    9. 'ières' → logprob: -10.385995864868164
    10. 'tries' → logprob: -10.510995864868164

Token 125: ' depuis' (ID: 16277)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.11552724242210388
    2. '()' → logprob: -2.2405271530151367
    3. '_' → logprob: -7.115527153015137
    4. 's' → logprob: -7.490527153015137
    5. '   ' → logprob: -8.115527153015137
    6. '(int' → logprob: -8.240527153015137
    7. '(
' → logprob: -8.490527153015137
    8. '(input' → logprob: -9.115527153015137
    9. ' (' → logprob: -9.740527153015137
    10. 'input' → logprob: -9.865527153015137

Token 126: ' l' (ID: 305)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.5328059792518616
    2. ' input' → logprob: -1.4078059196472168
    3. '()' → logprob: -1.9078059196472168
    4. '(input' → logprob: -4.907805919647217
    5. 'l' → logprob: -5.282805919647217
    6. '   ' → logprob: -6.282805919647217
    7. ' la' → logprob: -6.532805919647217
    8. '(' → logprob: -6.532805919647217
    9. '(int' → logprob: -7.282805919647217
    10. 'int' → logprob: -7.782805919647217

Token 127: ''entrée' (ID: 115820)
  Prédit: 'entrée'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'entrée' → logprob: -0.3740406930446625
    2. 'input' → logprob: -1.3740407228469849
    3. ''entrée' → logprob: -3.1240406036376953
    4. ' input' → logprob: -4.374040603637695
    5. 'a' → logprob: -7.499040603637695
    6. ' entrée' → logprob: -7.624040603637695
    7. '=input' → logprob: -8.124040603637695
    8. '_input' → logprob: -8.499040603637695
    9. 'ent' → logprob: -8.499040603637695
    10. 'import' → logprob: -8.999040603637695

Token 128: ' standard' (ID: 7024)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.010129900649189949
    2. '().' → logprob: -5.135129928588867
    3. '   ' → logprob: -6.385129928588867
    4. '()
' → logprob: -6.635129928588867
    5. 'standard' → logprob: -7.760129928588867
    6. ')' → logprob: -7.885129928588867
    7. ' standard' → logprob: -8.760129928588867
    8. '())' → logprob: -9.510129928588867
    9. '()

' → logprob: -10.510129928588867
    10. ' ' → logprob: -11.135129928588867

Token 129: ',' (ID: 11)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -1.0056546926498413
    2. '   ' → logprob: -1.6306546926498413
    3. ' data' → logprob: -2.130654811859131
    4. 'data' → logprob: -2.630654811859131
    5. ' lst' → logprob: -2.880654811859131
    6. 'lst' → logprob: -3.130654811859131
    7. 'numbers' → logprob: -3.755654811859131
    8. ' numbers' → logprob: -3.880654811859131
    9. '()' → logprob: -4.005654811859131
    10. ' values' → logprob: -4.630654811859131

Token 130: ' stock' (ID: 6546)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.8391412496566772
    2. ' input' → logprob: -0.8391412496566772
    3. ' _' → logprob: -2.214141368865967
    4. 'input' → logprob: -3.839141368865967
    5. ' data' → logprob: -6.464141368865967
    6. ' lst' → logprob: -6.964141368865967
    7. '_input' → logprob: -7.214141368865967
    8. ' ' → logprob: -7.339141368865967
    9. ' ' → logprob: -8.464140892028809
    10. ' n' → logprob: -8.839140892028809

Token 131: 'ée' (ID: 2894)
  Prédit: 'ée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ée' → logprob: -0.3470337986946106
    2. '=' → logprob: -2.347033739089966
    3. 'é' → logprob: -2.347033739089966
    4. 'e' → logprob: -2.472033739089966
    5. ' =' → logprob: -4.847033977508545
    6. 'ées' → logprob: -5.597033977508545
    7. 'er' → logprob: -5.972033977508545
    8. 'ee' → logprob: -6.347033977508545
    9. '=[]' → logprob: -7.597033977508545
    10. 'és' → logprob: -7.847033977508545

Token 132: ' dans' (ID: 2671)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.008119945414364338
    2. '(' → logprob: -5.008120059967041
    3. '_' → logprob: -7.008120059967041
    4. '   ' → logprob: -9.383119583129883
    5. ' ()' → logprob: -9.758119583129883
    6. ' =' → logprob: -9.883119583129883
    7. 'input' → logprob: -10.008119583129883
    8. '[]' → logprob: -10.133119583129883
    9. '[' → logprob: -10.758119583129883
    10. 's' → logprob: -10.883119583129883

Token 133: ' '' (ID: 461)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.013329640030860901
    2. 'une' → logprob: -5.51332950592041
    3. ' _' → logprob: -5.88832950592041
    4. ' la' → logprob: -6.38832950592041
    5. 'la' → logprob: -6.63832950592041
    6. 'lst' → logprob: -6.88832950592041
    7. 'l' → logprob: -7.13832950592041
    8. ' lst' → logprob: -7.88832950592041
    9. 'a' → logprob: -8.51332950592041
    10. ' une' → logprob: -8.76332950592041

Token 134: 'a' (ID: 64)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.08607958257198334
    2. 'lst' → logprob: -3.2110795974731445
    3. 'data' → logprob: -4.3360795974731445
    4. 'arr' → logprob: -4.4610795974731445
    5. 'a' → logprob: -5.8360795974731445
    6. 'numbers' → logprob: -5.9610795974731445
    7. 'values' → logprob: -6.3360795974731445
    8. ' _' → logprob: -6.7110795974731445
    9. 'nums' → logprob: -6.9610795974731445
    10. 'liste' → logprob: -7.0860795974731445

Token 135: ''.
' (ID: 49980)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.45826706290245056
    2. ' =' → logprob: -1.708267092704773
    3. '')' → logprob: -1.958267092704773
    4. ')'' → logprob: -3.8332669734954834
    5. '=' → logprob: -4.3332672119140625
    6. ''' → logprob: -6.0832672119140625
    7. '_' → logprob: -6.2082672119140625
    8. '()' → logprob: -6.5832672119140625
    9. ' )' → logprob: -6.8332672119140625
    10. '[]' → logprob: -6.9582672119140625

Token 136: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6809110045433044
    2. 'a' → logprob: -0.8059110045433044
    3. ' a' → logprob: -3.055911064147949
    4. '    
' → logprob: -10.30591106414795
    5. '	a' → logprob: -10.93091106414795
    6. '  ' → logprob: -11.55591106414795
    7. ' ' → logprob: -11.80591106414795
    8. '    ' → logprob: -12.30591106414795
    9. '
' → logprob: -12.55591106414795
    10. ' ' → logprob: -13.30591106414795

Token 137: ' #' (ID: 1069)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.7114772200584412
    2. ' a' → logprob: -0.8364772200584412
    3. '   ' → logprob: -2.586477279663086
    4. '_' → logprob: -8.461477279663086
    5. '    
' → logprob: -8.586477279663086
    6. ' _' → logprob: -9.961477279663086
    7. '_a' → logprob: -10.461477279663086
    8. '    ' → logprob: -10.711477279663086
    9. '	a' → logprob: -10.836477279663086
    10. '  ' → logprob: -11.211477279663086

Token 138: ' L' (ID: 451)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.05998974293470383
    2. '_' → logprob: -3.4349896907806396
    3. ' a' → logprob: -3.6849896907806396
    4. ' _' → logprob: -7.309989929199219
    5. '   ' → logprob: -8.809989929199219
    6. '_a' → logprob: -10.059989929199219
    7. 'input' → logprob: -10.684989929199219
    8. ' input' → logprob: -12.434989929199219
    9. '_=' → logprob: -12.684989929199219
    10. '    
' → logprob: -13.309989929199219

Token 139: ''é' (ID: 12728)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.008978410623967648
    2. ' a' → logprob: -5.383978366851807
    3. ' =' → logprob: -6.383978366851807
    4. '   ' → logprob: -6.508978366851807
    5. 'e' → logprob: -8.258978843688965
    6. 'ine' → logprob: -8.258978843688965
    7. '=' → logprob: -8.258978843688965
    8. 'ines' → logprob: -9.883978843688965
    9. 'inea' → logprob: -10.008978843688965
    10. '=a' → logprob: -10.008978843688965

Token 140: 'to' (ID: 935)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.5188393592834473
    2. 'lé' → logprob: -2.3938393592834473
    3. '#' → logprob: -2.7688393592834473
    4. 'n' → logprob: -3.0188393592834473
    5. 'x' → logprob: -3.6438393592834473
    6. 'c' → logprob: -3.7688393592834473
    7. 'num' → logprob: -3.8938393592834473
    8. 'tat' → logprob: -4.268839359283447
    9. 'nt' → logprob: -4.268839359283447
    10. 'rror' → logprob: -4.518839359283447

Token 141: 'ile' (ID: 554)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.035518158227205276
    2. 'rie' → logprob: -4.285518169403076
    3. 'rne' → logprob: -5.410518169403076
    4. 'ur' → logprob: -5.535518169403076
    5. 'ir' → logprob: -6.535518169403076
    6. 'rine' → logprob: -6.660518169403076
    7. 're' → logprob: -6.785518169403076
    8. 'rn' → logprob: -7.160518169403076
    9. 'to' → logprob: -7.285518169403076
    10. 'il' → logprob: -7.410518169403076

Token 142: ' permet' (ID: 11798)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6528967618942261
    2. ' =' → logprob: -0.9028967618942261
    3. '*a' → logprob: -3.5278968811035156
    4. '=a' → logprob: -4.652896881103516
    5. 'a' → logprob: -4.902896881103516
    6. '*' → logprob: -4.902896881103516
    7. ',' → logprob: -5.027896881103516
    8. '   ' → logprob: -5.277896881103516
    9. ' a' → logprob: -5.777896881103516
    10. 's' → logprob: -6.402896881103516

Token 143: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.40338581800460815
    2. ' de' → logprob: -1.903385877609253
    3. '_' → logprob: -2.028385877609253
    4. 'de' → logprob: -4.278385639190674
    5. 'd' → logprob: -4.528385639190674
    6. '*' → logprob: -5.403385639190674
    7. '_a' → logprob: -5.653385639190674
    8. '  ' → logprob: -5.778385639190674
    9. 'a' → logprob: -5.903385639190674
    10. '_de' → logprob: -5.903385639190674

Token 144: ' dé' (ID: 2393)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.20711319148540497
    2. 'a' → logprob: -2.457113265991211
    3. '_a' → logprob: -2.582113265991211
    4. '*' → logprob: -4.832113265991211
    5. '*a' → logprob: -5.082113265991211
    6. '_unpack' → logprob: -6.332113265991211
    7. '_*' → logprob: -6.332113265991211
    8. '_,' → logprob: -6.457113265991211
    9. '*_' → logprob: -6.582113265991211
    10. '_n' → logprob: -7.207113265991211

Token 145: 'pa' (ID: 3899)
  Prédit: 'pack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pack' → logprob: -1.2274452447891235
    2. 'packer' → logprob: -1.3524452447891235
    3. 'pa' → logprob: -1.6024452447891235
    4. 'packing' → logprob: -2.727445125579834
    5. 'plier' → logprob: -2.852445125579834
    6. 'ball' → logprob: -3.227445125579834
    7. 'st' → logprob: -3.602445125579834
    8. 'comp' → logprob: -3.977445125579834
    9. 'pl' → logprob: -4.602445125579834
    10. 'ployer' → logprob: -5.102445125579834

Token 146: 'qu' (ID: 351)
  Prédit: 'ck'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ck' → logprob: -0.2359047681093216
    2. 'cker' → logprob: -2.4859046936035156
    3. 'que' → logprob: -2.9859046936035156
    4. 'c' → logprob: -3.8609046936035156
    5. 'qu' → logprob: -4.110904693603516
    6. 'q' → logprob: -4.360904693603516
    7. '   ' → logprob: -5.735904693603516
    8. 'cc' → logprob: -6.110904693603516
    9. 'quer' → logprob: -6.610904693603516
    10. 'cq' → logprob: -6.610904693603516

Token 147: 'eter' (ID: 2377)
  Prédit: 'ck'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ck' → logprob: -0.12786321341991425
    2. 'cker' → logprob: -2.2528631687164307
    3. 'c' → logprob: -5.50286340713501
    4. 'qu' → logprob: -5.75286340713501
    5. 'q' → logprob: -6.37786340713501
    6. 'que' → logprob: -6.62786340713501
    7. 'quer' → logprob: -7.12786340713501
    8. 'cc' → logprob: -7.12786340713501
    9. 'cke' → logprob: -7.50286340713501
    10. 'ct' → logprob: -7.62786340713501

Token 148: ' les' (ID: 1341)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.9959134459495544
    2. '*' → logprob: -1.2459135055541992
    3. '*a' → logprob: -1.2459135055541992
    4. 'input' → logprob: -3.495913505554199
    5. '[*' → logprob: -5.620913505554199
    6. '*l' → logprob: -5.745913505554199
    7. ' a' → logprob: -5.745913505554199
    8. 'l' → logprob: -6.370913505554199
    9. '   ' → logprob: -6.495913505554199
    10. 'args' → logprob: -6.620913505554199

Token 149: ' valeurs' (ID: 73668)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.014478793367743492
    2. 'a' → logprob: -4.63947868347168
    3. ' input' → logprob: -6.01447868347168
    4. 'list' → logprob: -6.63947868347168
    5. 'args' → logprob: -7.63947868347168
    6. 'range' → logprob: -9.26447868347168
    7. '   ' → logprob: -9.26447868347168
    8. 'map' → logprob: -9.76447868347168
    9. '*' → logprob: -10.26447868347168
    10. ' ' → logprob: -10.38947868347168

Token 150: ' dans' (ID: 2671)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.33948299288749695
    2. '   ' → logprob: -1.5894830226898193
    3. ',' → logprob: -3.3394830226898193
    4. ' a' → logprob: -3.4644830226898193
    5. '*a' → logprob: -4.33948278427124
    6. '*' → logprob: -6.58948278427124
    7. ')' → logprob: -7.58948278427124
    8. ',a' → logprob: -7.58948278427124
    9. '  ' → logprob: -8.214483261108398
    10. ' ' → logprob: -8.464483261108398

Token 151: ' la' (ID: 557)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.07144835591316223
    2. ' a' → logprob: -2.94644832611084
    3. 'input' → logprob: -5.07144832611084
    4. 'list' → logprob: -5.82144832611084
    5. '   ' → logprob: -5.82144832611084
    6. ' input' → logprob: -6.32144832611084
    7. ' ' → logprob: -7.57144832611084
    8. '[]' → logprob: -7.94644832611084
    9. 'args' → logprob: -8.07144832611084
    10. ' list' → logprob: -8.07144832611084

Token 152: ' liste' (ID: 31719)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.7580680251121521
    2. 'list' → logprob: -1.1330680847167969
    3. 'input' → logprob: -2.258068084716797
    4. 'liste' → logprob: -2.758068084716797
    5. '   ' → logprob: -4.133068084716797
    6. ' list' → logprob: -4.883068084716797
    7. ' liste' → logprob: -5.133068084716797
    8. ' input' → logprob: -5.758068084716797
    9. ' a' → logprob: -6.258068084716797
    10. 'args' → logprob: -6.633068084716797

Token 153: ' '' (ID: 461)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.094451904296875
    2. ' a' → logprob: -2.969451904296875
    3. '   ' → logprob: -3.469451904296875
    4. '*a' → logprob: -5.344451904296875
    5. '*' → logprob: -6.594451904296875
    6. ',' → logprob: -7.594451904296875
    7. 'input' → logprob: -7.844451904296875
    8. '_a' → logprob: -9.469451904296875
    9. ' ' → logprob: -9.969451904296875
    10. '(*' → logprob: -9.969451904296875

Token 154: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.0004923873930238187
    2. ' a' → logprob: -7.625492572784424
    3. '   ' → logprob: -13.250492095947266
    4. ')' → logprob: -13.750492095947266
    5. ' ' → logprob: -14.875492095947266
    6. '`' → logprob: -15.125492095947266
    7. 'input' → logprob: -15.375492095947266
    8. '```' → logprob: -15.500492095947266
    9. 'args' → logprob: -15.750492095947266
    10. ')a' → logprob: -15.875492095947266

Token 155: ''.
' (ID: 49980)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0851467102766037
    2. '   ' → logprob: -2.71014666557312
    3. ',' → logprob: -5.210146903991699
    4. 'a' → logprob: -5.585146903991699
    5. ' =' → logprob: -6.585146903991699
    6. ' )' → logprob: -7.085146903991699
    7. '),' → logprob: -7.210146903991699
    8. '=' → logprob: -7.585146903991699
    9. ')`' → logprob: -7.960146903991699
    10. ').' → logprob: -8.4601469039917

Token 156: '   ' (ID: 271)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.17094220221042633
    2. '   ' → logprob: -1.9209421873092651
    3. ' a' → logprob: -4.545942306518555
    4. '	a' → logprob: -10.920942306518555
    5. '    
' → logprob: -11.545942306518555
    6. '  ' → logprob: -12.545942306518555
    7. ' ' → logprob: -12.545942306518555
    8. '*a' → logprob: -12.795942306518555
    9. '    ' → logprob: -13.045942306518555
    10. '
' → logprob: -13.295942306518555

Token 157: ' *' (ID: 425)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.006661131512373686
    2. '   ' → logprob: -5.1316609382629395
    3. ' a' → logprob: -7.2566609382629395
    4. '*a' → logprob: -10.756661415100098
    5. '*' (adapté à ' *') → logprob: -13.256661415100098
    6. ' ' → logprob: -14.006661415100098
    7. '  ' → logprob: -14.006661415100098
    8. '	a' → logprob: -14.256661415100098
    9. '    
' → logprob: -15.006661415100098
    10. '_a' → logprob: -15.381661415100098

Token 158: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.0002762326330412179
    2. ' a' → logprob: -8.250276565551758
    3. '   ' → logprob: -11.125276565551758
    4. '_a' → logprob: -16.250276565551758
    5. '  ' → logprob: -16.875276565551758
    6. '	a' → logprob: -17.125276565551758
    7. ' ' → logprob: -17.500276565551758
    8. '    ' → logprob: -18.375276565551758
    9. '```' → logprob: -18.500276565551758
    10. '(a' → logprob: -18.625276565551758

Token 159: ',' (ID: 11)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.0036068400368094444
    2. ' =' → logprob: -5.628606796264648
    3. ',' → logprob: -12.378606796264648
    4. '=[]' → logprob: -14.003606796264648
    5. ')' → logprob: -14.628606796264648
    6. ')=' → logprob: -15.253606796264648
    7. '=input' → logprob: -15.628606796264648
    8. '=list' → logprob: -15.753606796264648
    9. '<|end|>' → logprob: -15.878606796264648
    10. '=int' → logprob: -16.25360679626465

Token 160: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.006905409973114729
    2. ' =' → logprob: -5.006905555725098
    3. '_' → logprob: -8.881905555725098
    4. '_=' → logprob: -10.506905555725098
    5. '=input' → logprob: -11.756905555725098
    6. 'a' → logprob: -11.881905555725098
    7. '=_' → logprob: -13.256905555725098
    8. ' ' → logprob: -13.506905555725098
    9. 'input' → logprob: -14.006905555725098
    10. ' _' → logprob: -14.381905555725098

Token 161: ' map' (ID: 4014)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.0011705794604495168
    2. ' map' → logprob: -6.751170635223389
    3. ' ' → logprob: -16.626171112060547
    4. 'list' → logprob: -17.001171112060547
    5. '   ' → logprob: -17.376171112060547
    6. '  ' → logprob: -17.501171112060547
    7. '(map' → logprob: -17.626171112060547
    8. '	map' → logprob: -18.501171112060547
    9. '[' → logprob: -20.126171112060547
    10. '    ' → logprob: -20.251171112060547

Token 162: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.00027099132421426475
    2. '(' → logprob: -8.25027084350586
    3. '<int' → logprob: -12.37527084350586
    4. 'int' → logprob: -12.75027084350586
    5. '[int' → logprob: -14.25027084350586
    6. '(
' → logprob: -14.50027084350586
    7. ' (' → logprob: -14.87527084350586
    8. '<|end|>' → logprob: -14.87527084350586
    9. ',int' → logprob: -15.50027084350586
    10. ' int' → logprob: -16.00027084350586

Token 163: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.9454674124717712
    2. '(input' → logprob: -1.195467472076416
    3. ',input' → logprob: -1.195467472076416
    4. 'input' → logprob: -5.195467472076416
    5. '(' → logprob: -7.195467472076416
    6. ' input' → logprob: -10.445466995239258
    7. ' ,' → logprob: -10.570466995239258
    8. ' (' → logprob: -11.445466995239258
    9. ')' → logprob: -12.195466995239258
    10. '=input' → logprob: -12.570466995239258

Token 164: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.04858953505754471
    2. ' input' → logprob: -3.0485894680023193
    3. ' ' → logprob: -14.048589706420898
    4. ')' → logprob: -14.423589706420898
    5. '(input' → logprob: -14.798589706420898
    6. '   ' → logprob: -15.423589706420898
    7. ',input' → logprob: -15.798589706420898
    8. '=input' → logprob: -17.2985897064209
    9. '_input' → logprob: -17.5485897064209
    10. '	input' → logprob: -17.6735897064209

Token 165: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0004925066023133695
    2. '()' → logprob: -7.625492572784424
    3. ' ().' → logprob: -12.500492095947266
    4. ')' → logprob: -15.375492095947266
    5. '(' → logprob: -15.625492095947266
    6. '())' → logprob: -15.625492095947266
    7. ' ()' → logprob: -16.875492095947266
    8. '.' → logprob: -17.125492095947266
    9. '().__' → logprob: -17.125492095947266
    10. '()
' → logprob: -18.125492095947266

Token 166: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -1.8624639324116288e-06
    2. 'strip' → logprob: -13.500001907348633
    3. ' split' → logprob: -14.750001907348633
    4. '.split' → logprob: -17.750001907348633
    5. '(split' → logprob: -18.000001907348633
    6. '().' → logprob: -18.375001907348633
    7. 'rstrip' → logprob: -18.500001907348633
    8. 'spl' → logprob: -18.750001907348633
    9. ').' → logprob: -19.375001907348633
    10. ')' → logprob: -19.875001907348633

Token 167: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.026801450178027153
    2. ')' → logprob: -3.776801347732544
    3. '()' → logprob: -5.651801586151123
    4. '())
' → logprob: -10.526801109313965
    5. '(' → logprob: -12.151801109313965
    6. ' )' → logprob: -13.026801109313965
    7. ' ())' → logprob: -13.151801109313965
    8. '())

' → logprob: -14.901801109313965
    9. '   ' → logprob: -15.026801109313965
    10. '());' → logprob: -15.151801109313965

Token 168: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.37605491280555725
    2. '   ' → logprob: -1.3760548830032349
    3. '    
' → logprob: -3.2510550022125244
    4. '  
' → logprob: -4.501054763793945
    5. ' 
' → logprob: -5.001054763793945
    6. '   
' → logprob: -6.626054763793945
    7. 'n' → logprob: -6.626054763793945
    8. 'if' → logprob: -8.251054763793945
    9. '

' → logprob: -8.376054763793945
    10. '```' → logprob: -8.501054763793945

Token 169: ' #' (ID: 1069)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.8071525692939758
    2. 'if' → logprob: -1.057152509689331
    3. '   ' → logprob: -1.807152509689331
    4. 'res' → logprob: -3.682152509689331
    5. ' if' → logprob: -5.93215274810791
    6. 'n' → logprob: -6.43215274810791
    7. 'steps' → logprob: -6.43215274810791
    8. '    
' → logprob: -6.55715274810791
    9. 'min' → logprob: -6.68215274810791
    10. ' result' → logprob: -6.93215274810791

Token 170: ' Calcul' (ID: 57243)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.5458003878593445
    2. 'if' → logprob: -1.1708004474639893
    3. 'res' → logprob: -3.1708004474639893
    4. 'ops' → logprob: -4.54580020904541
    5. 'min' → logprob: -4.92080020904541
    6. ' result' → logprob: -5.04580020904541
    7. 'steps' → logprob: -5.17080020904541
    8. 'operations' → logprob: -5.17080020904541
    9. '#' → logprob: -5.42080020904541
    10. 'n' → logprob: -5.42080020904541

Token 171: ' du' (ID: 1462)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03711643069982529
    2. '(' → logprob: -3.662116527557373
    3. 'result' → logprob: -5.787116527557373
    4. ':' → logprob: -6.662116527557373
    5. '(
' → logprob: -7.412116527557373
    6. 'res' → logprob: -7.537116527557373
    7. 'min' → logprob: -7.662116527557373
    8. ' of' → logprob: -7.787116527557373
    9. ' result' → logprob: -8.037116050720215
    10. 'steps' → logprob: -8.162116050720215

Token 172: ' nombre' (ID: 9733)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -1.089496374130249
    2. ' nombre' → logprob: -1.339496374130249
    3. 'nombre' → logprob: -1.714496374130249
    4. ' result' → logprob: -2.464496374130249
    5. 'res' → logprob: -3.339496374130249
    6. 'min' → logprob: -3.714496374130249
    7. 'minimum' → logprob: -3.964496374130249
    8. ' minimum' → logprob: -4.089496612548828
    9. ' res' → logprob: -4.339496612548828
    10. ' resultat' → logprob: -5.089496612548828

Token 173: ' minimal' (ID: 19957)
  Prédit: '_min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_min' → logprob: -0.15279485285282135
    2. '_' → logprob: -3.40279483795166
    3. ' d' → logprob: -3.52779483795166
    4. 'minimum' → logprob: -3.52779483795166
    5. ' minimum' → logprob: -3.65279483795166
    6. 'min' → logprob: -5.40279483795166
    7. '_operations' → logprob: -5.40279483795166
    8. '_d' → logprob: -5.40279483795166
    9. '_max' → logprob: -5.90279483795166
    10. '_op' → logprob: -6.02779483795166

Token 174: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.04647723585367203
    2. 'd' → logprob: -3.5464773178100586
    3. '_' → logprob: -4.921477317810059
    4. '_d' → logprob: -5.671477317810059
    5. '_operations' → logprob: -5.921477317810059
    6. '_op' → logprob: -6.421477317810059
    7. '_ops' → logprob: -7.671477317810059
    8. 'op' → logprob: -8.296477317810059
    9. '  ' → logprob: -8.546477317810059
    10. 's' → logprob: -8.921477317810059

Token 175: ''op' (ID: 70747)
  Prédit: ''op'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''op' → logprob: -1.1364859342575073
    2. '_op' → logprob: -1.2614859342575073
    3. ' opérations' → logprob: -1.7614859342575073
    4. 'op' → logprob: -2.136486053466797
    5. '_' → logprob: -3.886486053466797
    6. '_ops' → logprob: -4.011486053466797
    7. '_operations' → logprob: -4.011486053466797
    8. ' ' → logprob: -4.511486053466797
    9. ' op' → logprob: -4.636486053466797
    10. 'operations' → logprob: -4.886486053466797

Token 176: 'érations' (ID: 152860)
  Prédit: 'érations'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'érations' → logprob: -0.0013880894985049963
    2. 'ér' → logprob: -6.626388072967529
    3. 'é' → logprob: -10.126388549804688
    4. 'er' → logprob: -11.751388549804688
    5. 'ération' → logprob: -11.876388549804688
    6. 'érences' → logprob: -13.126388549804688
    7. 'és' → logprob: -14.126388549804688
    8. '#' → logprob: -14.126388549804688
    9. '%C' → logprob: -15.126388549804688
    10. 's' → logprob: -15.126388549804688

Token 177: ' nécessaires' (ID: 74402)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.09015235304832458
    2. '   ' → logprob: -2.9651522636413574
    3. '=' → logprob: -3.8401522636413574
    4. '(' → logprob: -5.215152263641357
    5. ':' → logprob: -6.215152263641357
    6. 's' → logprob: -6.590152263641357
    7. 'op' → logprob: -7.340152263641357
    8. '(
' → logprob: -7.340152263641357
    9. 'operations' → logprob: -7.340152263641357
    10. ',' → logprob: -8.215152740478516

Token 178: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03724370151758194
    2. 'result' → logprob: -4.662243843078613
    3. 'ops' → logprob: -5.162243843078613
    4. 'operations' → logprob: -5.287243843078613
    5. 'print' → logprob: -5.662243843078613
    6. 'res' → logprob: -6.287243843078613
    7. 'op' → logprob: -6.412243843078613
    8. 'min' → logprob: -6.537243843078613
    9. 'n' → logprob: -6.912243843078613
    10. 'steps' → logprob: -6.912243843078613

Token 179: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.2444323301315308
    2. ' result' → logprob: -1.3694323301315308
    3. ' res' → logprob: -1.6194323301315308
    4. ' if' → logprob: -2.8694324493408203
    5. 'result' → logprob: -3.1194324493408203
    6. ' ops' → logprob: -3.3694324493408203
    7. ' operations' → logprob: -3.4944324493408203
    8. ' n' → logprob: -4.24443244934082
    9. ' ans' → logprob: -4.36943244934082
    10. 'res' → logprob: -4.61943244934082

Token 180: ' #' (ID: 1069)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.3372187316417694
    2. 'print' → logprob: -2.712218761444092
    3. 'res' → logprob: -2.837218761444092
    4. 'ops' → logprob: -2.962218761444092
    5. 'if' → logprob: -3.212218761444092
    6. 'operations' → logprob: -3.837218761444092
    7. ' result' → logprob: -4.337218761444092
    8. 'steps' → logprob: -4.712218761444092
    9. '   ' → logprob: -5.462218761444092
    10. 'min' → logprob: -5.462218761444092

Token 181: ' (' (ID: 350)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.7688407301902771
    2. 'print' → logprob: -1.0188407897949219
    3. 'ops' → logprob: -2.518840789794922
    4. 'operations' → logprob: -3.643840789794922
    5. 'res' → logprob: -4.268840789794922
    6. ' result' → logprob: -4.393840789794922
    7. 'steps' → logprob: -4.643840789794922
    8. 'if' → logprob: -4.893840789794922
    9. ' print' → logprob: -5.018840789794922
    10. 'n' → logprob: -5.518840789794922

Token 182: 'N' (ID: 45)
  Prédit: 'N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.1570912003517151
    2. ' N' → logprob: -3.1570911407470703
    3. 'result' → logprob: -3.4070911407470703
    4. '(N' → logprob: -4.28209114074707
    5. 'res' → logprob: -4.40709114074707
    6. 'ceil' → logprob: -4.65709114074707
    7. '   ' → logprob: -5.15709114074707
    8. ' (' → logprob: -5.15709114074707
    9. 'K' → logprob: -5.40709114074707
    10. 'max' → logprob: -5.90709114074707

Token 183: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.12929227948188782
    2. '+' → logprob: -2.8792922496795654
    3. ' -' → logprob: -2.8792922496795654
    4. ' +' → logprob: -4.8792924880981445
    5. ' ' → logprob: -7.2542924880981445
    6. '   ' → logprob: -8.566792488098145
    7. ')' → logprob: -8.691792488098145
    8. '  ' → logprob: -9.566792488098145
    9. ',' → logprob: -10.504292488098145
    10. '-
' → logprob: -11.379292488098145

Token 184: ' K' (ID: 658)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.02520483173429966
    2. 'K' → logprob: -3.77520489692688
    3. ' ' → logprob: -6.650204658508301
    4. '2' → logprob: -8.1502046585083
    5. ' K' → logprob: -8.6502046585083
    6. '(K' → logprob: -9.9002046585083
    7. '   ' → logprob: -10.2752046585083
    8. 'N' → logprob: -10.5252046585083
    9. '(' → logprob: -11.0252046585083
    10. ')' → logprob: -11.1502046585083

Token 185: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.8597060441970825
    2. '+' → logprob: -0.9847060441970825
    3. ' +' → logprob: -1.6097060441970825
    4. '-' → logprob: -6.734705924987793
    5. ' ' → logprob: -7.359705924987793
    6. ' -' → logprob: -7.609705924987793
    7. ' )' → logprob: -8.234705924987793
    8. '   ' → logprob: -8.359705924987793
    9. ')
' → logprob: -9.359705924987793
    10. ')/' → logprob: -9.484705924987793

Token 186: ' correspond' (ID: 11095)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.5354401469230652
    2. ' +' → logprob: -1.03544020652771
    3. ')' → logprob: -2.91044020652771
    4. ' ' → logprob: -6.660439968109131
    5. 'if' → logprob: -6.785439968109131
    6. ' if' → logprob: -7.035439968109131
    7. ' )' → logprob: -7.410439968109131
    8. ')+' → logprob: -8.785440444946289
    9. '-' → logprob: -8.910440444946289
    10. '+)' → logprob: -9.160440444946289

Token 187: ' au' (ID: 2791)
  Prédit: ' to'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' to' → logprob: -0.6552273631095886
    2. ')' → logprob: -0.9052273631095886
    3. 'to' → logprob: -3.9052274227142334
    4. ' à' → logprob: -4.030227184295654
    5. ' +' → logprob: -4.405227184295654
    6. '+' → logprob: -4.530227184295654
    7. ' )' → logprob: -5.405227184295654
    8. ' ' → logprob: -5.780227184295654
    9. ' au' → logprob: -6.530227184295654
    10. '   ' → logprob: -6.655227184295654

Token 188: ' nombre' (ID: 9733)
  Prédit: '(N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.9248806834220886
    2. 'max' → logprob: -1.2998807430267334
    3. ' max' → logprob: -2.4248807430267334
    4. ' nombre' → logprob: -2.7998807430267334
    5. ' (' → logprob: -3.4248807430267334
    6. 'nombre' → logprob: -3.4248807430267334
    7. ' N' → logprob: -3.7998807430267334
    8. 'N' → logprob: -3.9248807430267334
    9. '(max' → logprob: -4.299880504608154
    10. '1' → logprob: -4.924880504608154

Token 189: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.2152809053659439
    2. ' de' → logprob: -2.0902810096740723
    3. ')' → logprob: -3.5902810096740723
    4. ' des' → logprob: -4.215281009674072
    5. '<|end|>' → logprob: -4.215281009674072
    6. ' of' → logprob: -6.340281009674072
    7. 'd' → logprob: -6.340281009674072
    8. '+' → logprob: -6.465281009674072
    9. ' )' → logprob: -6.465281009674072
    10. ' +' → logprob: -6.715281009674072

Token 190: ''' (ID: 6)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.850239634513855
    2. ' )' → logprob: -1.725239634513855
    3. ' operations' → logprob: -1.850239634513855
    4. ' opérations' → logprob: -2.7252397537231445
    5. ' ' → logprob: -3.2252397537231445
    6. ' op' → logprob: -3.6002397537231445
    7. ' espaces' → logprob: -3.6002397537231445
    8. 'operations' → logprob: -3.7252397537231445
    9. '  ' → logprob: -4.9752397537231445
    10. 'op' → logprob: -5.1002397537231445

Token 191: 'élé' (ID: 15228)
  Prédit: 'élé'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.16312837600708008
    2. 'op' → logprob: -2.28812837600708
    3. ' éléments' → logprob: -3.91312837600708
    4. 'é' → logprob: -5.53812837600708
    5. ' opérations' → logprob: -5.53812837600708
    6. 'elements' → logprob: -5.91312837600708
    7. ' ' → logprob: -6.16312837600708
    8. ')' → logprob: -6.41312837600708
    9. 'operations' → logprob: -6.53812837600708
    10. ' op' → logprob: -6.53812837600708

Token 192: 'ments' (ID: 1626)
  Prédit: 'ments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ments' → logprob: -0.0002149802603526041
    2. 'ment' → logprob: -9.125214576721191
    3. 'ents' → logprob: -10.375214576721191
    4. '   ' → logprob: -11.000214576721191
    5. 'éments' → logprob: -11.000214576721191
    6. 'ts' → logprob: -11.375214576721191
    7. 'nts' → logprob: -12.000214576721191
    8. 'm' → logprob: -12.250214576721191
    9. 'ements' → logprob: -12.250214576721191
    10. '```' → logprob: -13.000214576721191

Token 193: ' rest' (ID: 2867)
  Prédit: ' à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.5574479103088379
    2. ')' → logprob: -1.682447910308838
    3. ' )' → logprob: -2.182447910308838
    4. ' -' → logprob: -2.807447910308838
    5. ' ' → logprob: -3.807447910308838
    6. '-' → logprob: -4.557447910308838
    7. ' restant' → logprob: -4.682447910308838
    8. ' d' → logprob: -5.557447910308838
    9. '   ' → logprob: -5.932447910308838
    10. ' to' → logprob: -5.932447910308838

Token 194: 'ants' (ID: 2027)
  Prédit: 'ants'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ants' → logprob: -0.3425564169883728
    2. 'ant' → logprob: -2.4675564765930176
    3. 'a' → logprob: -2.8425564765930176
    4. 'à' → logprob: -3.0925564765930176
    5. 'endants' → logprob: -3.5925564765930176
    6. ' à' → logprob: -4.217556476593018
    7. '   ' → logprob: -4.217556476593018
    8. 'ent' → logprob: -4.467556476593018
    9. 'ents' → logprob: -4.592556476593018
    10. 'au' → logprob: -5.217556476593018

Token 195: ' après' (ID: 16460)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5710626244544983
    2. '   ' → logprob: -1.0710625648498535
    3. ' )' → logprob: -2.9460625648498535
    4. ' -' → logprob: -4.4460625648498535
    5. ' +' → logprob: -5.0710625648498535
    6. '-' → logprob: -5.4460625648498535
    7. ' ' → logprob: -5.4460625648498535
    8. '+' → logprob: -5.8210625648498535
    9. ',' → logprob: -6.1960625648498535
    10. ' if' → logprob: -6.6960625648498535

Token 196: ' la' (ID: 557)
  Prédit: ' la'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -1.2061970233917236
    2. ' avoir' → logprob: -1.3311970233917236
    3. 'K' → logprob: -2.2061970233917236
    4. ' K' → logprob: -2.4561970233917236
    5. 'la' → logprob: -2.5811970233917236
    6. 'l' → logprob: -2.5811970233917236
    7. ' l' → logprob: -3.2061970233917236
    8. ' le' → logprob: -4.0811967849731445
    9. 'avoir' → logprob: -4.7061967849731445
    10. 'le' → logprob: -5.0811967849731445

Token 197: ' première' (ID: 23423)
  Prédit: 'prem'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prem' → logprob: -0.002982810139656067
    2. ' première' → logprob: -6.1279826164245605
    3. 'K' → logprob: -8.377983093261719
    4. 'first' → logprob: -9.002983093261719
    5. 'supp' → logprob: -9.002983093261719
    6. ' premiere' → logprob: -9.502983093261719
    7. '   ' → logprob: -10.877983093261719
    8. 's' → logprob: -10.877983093261719
    9. ' ' → logprob: -11.002983093261719
    10. ' suppression' → logprob: -11.127983093261719

Token 198: ' opération' (ID: 86023)
  Prédit: 'op'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'op' → logprob: -0.05757683143019676
    2. 'operation' → logprob: -4.182576656341553
    3. ' opération' → logprob: -4.307576656341553
    4. 'ét' → logprob: -5.432576656341553
    5. 'ligne' → logprob: -5.557576656341553
    6. 'élé' → logprob: -5.557576656341553
    7. ')' → logprob: -6.557576656341553
    8. 'partition' → logprob: -6.557576656341553
    9. ' étape' → logprob: -6.682576656341553
    10. 'util' → logprob: -7.057576656341553

Token 199: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5485936403274536
    2. ')' → logprob: -1.0485936403274536
    3. ' if' → logprob: -3.923593521118164
    4. 'if' → logprob: -4.173593521118164
    5. ')
' → logprob: -4.923593521118164
    6. ' )' → logprob: -5.173593521118164
    7. '    
' → logprob: -5.923593521118164
    8. '),' → logprob: -6.298593521118164
    9. ',' → logprob: -6.423593521118164
    10. '
' → logprob: -6.548593521118164

Token 200: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4359489977359772
    2. ' operations' → logprob: -2.4359490871429443
    3. ' result' → logprob: -3.0609490871429443
    4. ' res' → logprob: -3.1859490871429443
    5. 'result' → logprob: -3.3109490871429443
    6. 'operations' → logprob: -3.4359490871429443
    7. ' ops' → logprob: -4.060948848724365
    8. ' if' → logprob: -4.185948848724365
    9. '    
' → logprob: -4.560948848724365
    10. ' steps' → logprob: -4.685948848724365

Token 201: ' #' (ID: 1069)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -1.0739556550979614
    2. 'ops' → logprob: -1.8239556550979614
    3. 'operations' → logprob: -2.073955535888672
    4. 'res' → logprob: -2.323955535888672
    5. ' res' → logprob: -2.948955535888672
    6. ' result' → logprob: -3.073955535888672
    7. '   ' → logprob: -3.198955535888672
    8. ' ops' → logprob: -3.323955535888672
    9. ' operations' → logprob: -3.698955535888672
    10. 'if' → logprob: -3.948955535888672

Token 202: ' Chaque' (ID: 94758)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -1.4654372930526733
    2. 'ops' → logprob: -1.8404372930526733
    3. ' ops' → logprob: -2.090437412261963
    4. ' result' → logprob: -2.215437412261963
    5. 'steps' → logprob: -2.340437412261963
    6. 'operations' → logprob: -2.465437412261963
    7. 'res' → logprob: -3.340437412261963
    8. ' res' → logprob: -3.590437412261963
    9. ' operations' → logprob: -3.715437412261963
    10. ' steps' → logprob: -3.840437412261963

Token 203: ' opération' (ID: 86023)
  Prédit: ' ceil'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ceil' → logprob: -0.16814610362052917
    2. 'ceil' → logprob: -3.1681461334228516
    3. ' operation' → logprob: -3.5431461334228516
    4. ' (' → logprob: -3.7931461334228516
    5. ' ' → logprob: -4.418146133422852
    6. '(' → logprob: -4.543146133422852
    7. 'operation' → logprob: -4.543146133422852
    8. '   ' → logprob: -4.918146133422852
    9. ')' → logprob: -5.043146133422852
    10. ' op' → logprob: -5.418146133422852

Token 204: ' suivante' (ID: 107439)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3338508605957031
    2. ')' → logprob: -1.8338508605957031
    3. ' =' → logprob: -3.833850860595703
    4. ' op' → logprob: -3.958850860595703
    5. ' nécessite' → logprob: -4.208850860595703
    6. '    ' → logprob: -4.458850860595703
    7. ' ' → logprob: -4.708850860595703
    8. 'requ' → logprob: -5.208850860595703
    9. '  ' → logprob: -5.208850860595703
    10. '=' → logprob: -5.583850860595703

Token 205: ' peut' (ID: 9216)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.9495173096656799
    2. ' se' → logprob: -1.6995172500610352
    3. ' nécessite' → logprob: -2.074517250061035
    4. 'requ' → logprob: -2.574517250061035
    5. ' s' → logprob: -2.824517250061035
    6. ' est' → logprob: -3.074517250061035
    7. 's' → logprob: -3.324517250061035
    8. '   ' → logprob: -4.074517250061035
    9. 'se' → logprob: -4.199517250061035
    10. ' necess' → logprob: -4.699517250061035

Token 206: ' traiter' (ID: 105852)
  Prédit: ' traiter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' traiter' → logprob: -0.10369575768709183
    2. 'trait' → logprob: -2.603695869445801
    3. ' gérer' → logprob: -4.853695869445801
    4. ' remplacer' → logprob: -5.978695869445801
    5. ' tra' → logprob: -6.228695869445801
    6. ' retirer' → logprob: -6.353695869445801
    7. ' enlever' → logprob: -6.353695869445801
    8. 'tra' → logprob: -6.978695869445801
    9. ' supprimer' → logprob: -7.103695869445801
    10. ' couvrir' → logprob: -7.228695869445801

Token 207: ' jusqu' (ID: 21961)
  Prédit: ' K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.14915211498737335
    2. 'K' → logprob: -2.0241520404815674
    3. ' (' → logprob: -6.6491522789001465
    4. ' au' → logprob: -7.1491522789001465
    5. ' ' → logprob: -7.2741522789001465
    6. '(K' → logprob: -7.5241522789001465
    7. 'ceil' → logprob: -7.6491522789001465
    8. ' ceil' → logprob: -7.8991522789001465
    9. '(' → logprob: -8.149151802062988
    10. 'au' → logprob: -8.274151802062988

Token 208: ''à' (ID: 33688)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6753771901130676
    2. '   ' → logprob: -1.3003771305084229
    3. ' à' → logprob: -2.425377130508423
    4. ')' → logprob: -3.050377130508423
    5. 'à' → logprob: -3.925377130508423
    6. ' K' → logprob: -4.050377368927002
    7. ' (' → logprob: -4.925377368927002
    8. '    ' → logprob: -5.050377368927002
    9. '(N' → logprob: -5.050377368927002
    10. '(' → logprob: -5.175377368927002

Token 209: ' (' (ID: 350)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.03190774470567703
    2. ' K' → logprob: -3.531907796859741
    3. '(K' → logprob: -6.281907558441162
    4. ' (' → logprob: -8.78190803527832
    5. '(' → logprob: -9.03190803527832
    6. ' ' → logprob: -12.03190803527832
    7. 'k' → logprob: -13.03190803527832
    8. '   ' → logprob: -14.03190803527832
    9. '
' → logprob: -14.78190803527832
    10. '	K' → logprob: -15.03190803527832

Token 210: 'K' (ID: 42)
  Prédit: 'K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.0011227144859731197
    2. ' K' → logprob: -7.126122951507568
    3. '(K' → logprob: -8.25112247467041
    4. '   ' → logprob: -11.00112247467041
    5. ' (' → logprob: -11.37612247467041
    6. 'k' → logprob: -11.75112247467041
    7. ')' → logprob: -12.12612247467041
    8. '(' → logprob: -12.25112247467041
    9. '2' → logprob: -12.87612247467041
    10. ' ' → logprob: -13.37612247467041

Token 211: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.25196966528892517
    2. ' -' → logprob: -1.5019696950912476
    3. ')' → logprob: -10.876969337463379
    4. ' ' → logprob: -11.376969337463379
    5. '+' → logprob: -12.751969337463379
    6. '   ' → logprob: -13.001969337463379
    7. ' )' → logprob: -13.751969337463379
    8. '1' → logprob: -14.001969337463379
    9. '-)' → logprob: -14.689469337463379
    10. '```' → logprob: -14.689469337463379

Token 212: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0004927450208924711
    2. ' ' → logprob: -7.625492572784424
    3. ')' → logprob: -12.500493049621582
    4. '2' → logprob: -15.250493049621582
    5. '   ' → logprob: -15.625493049621582
    6. '(' → logprob: -15.875493049621582
    7. '۱' → logprob: -16.687992095947266
    8. '１' → logprob: -16.750492095947266
    9. ' (' → logprob: -16.937992095947266
    10. '-' → logprob: -16.937992095947266

Token 213: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.4617256056226324e-05
    2. ' ' → logprob: -11.250014305114746
    3. ')' → logprob: -15.250014305114746
    4. '(' → logprob: -15.375014305114746
    5. '   ' → logprob: -15.625014305114746
    6. '１' → logprob: -16.187515258789062
    7. '2' → logprob: -16.250015258789062
    8. '-' → logprob: -16.250015258789062
    9. '  ' → logprob: -16.625015258789062
    10. '```' → logprob: -16.625015258789062

Token 214: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0006442877347581089
    2. ' )' → logprob: -7.500644207000732
    3. ')
' → logprob: -11.12564468383789
    4. ')+' → logprob: -11.25064468383789
    5. ' éléments' → logprob: -11.87564468383789
    6. '))' → logprob: -12.00064468383789
    7. '+' → logprob: -12.37564468383789
    8. ')

' → logprob: -12.50064468383789
    9. ')*' → logprob: -12.50064468383789
    10. '),' → logprob: -12.62564468383789

Token 215: ' nouveaux' (ID: 43964)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0013832130935043097
    2. ' )' → logprob: -7.626383304595947
    3. ')
' → logprob: -7.876383304595947
    4. 'elements' → logprob: -9.626382827758789
    5. 'operations' → logprob: -9.626382827758789
    6. 'tokens' → logprob: -10.126382827758789
    7. '   ' → logprob: -10.376382827758789
    8. '))' → logprob: -10.501382827758789
    9. 'élé' → logprob: -11.001382827758789
    10. '```' → logprob: -11.001382827758789

Token 216: ' éléments' (ID: 57375)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.2032298594713211
    2. ' éléments' → logprob: -1.7032299041748047
    3. 'elements' → logprob: -6.953229904174805
    4. ' elements' → logprob: -7.453229904174805
    5. ')' → logprob: -8.953229904174805
    6. 'element' → logprob: -10.203229904174805
    7. ' élément' → logprob: -10.203229904174805
    8. '<|end|>' → logprob: -11.203229904174805
    9. ' ' → logprob: -11.328229904174805
    10. 'é' → logprob: -11.453229904174805

Token 217: ',
' (ID: 412)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13561739027500153
    2. ')' → logprob: -2.13561749458313
    3. ')
' → logprob: -4.885617256164551
    4. '    
' → logprob: -7.510617256164551
    5. '\n' → logprob: -8.63561725616455
    6. ',' → logprob: -9.51061725616455
    7. '
' → logprob: -9.88561725616455
    8. '   
' → logprob: -10.26061725616455
    9. ',
' → logprob: -10.63561725616455
    10. '  
' → logprob: -10.76061725616455

Token 218: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.13643468916416168
    2. '   ' → logprob: -2.13643479347229
    3. ')
' → logprob: -4.761434555053711
    4. ' )' → logprob: -7.386434555053711
    5. '")' → logprob: -9.136434555053711
    6. ')\' → logprob: -10.011434555053711
    7. ' )
' → logprob: -10.261434555053711
    8. '    ' → logprob: -10.636434555053711
    9. '):' → logprob: -11.386434555053711
    10. '       ' → logprob: -11.761434555053711

Token 219: ' #' (ID: 1069)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.32806095480918884
    2. '   ' → logprob: -1.4530609846115112
    3. ' )' → logprob: -3.3280608654022217
    4. '")' → logprob: -5.703061103820801
    5. ')
' → logprob: -6.078061103820801
    6. '    ' → logprob: -6.953061103820801
    7. ' ")' → logprob: -6.953061103820801
    8. ' )
' → logprob: -7.828061103820801
    9. '),' → logprob: -8.3280611038208
    10. '#' (adapté à ' #') → logprob: -8.3280611038208

Token 220: ' car' (ID: 1669)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4806603193283081
    2. '   ' → logprob: -1.230660319328308
    3. ' )' → logprob: -2.7306604385375977
    4. ' operations' → logprob: -5.355660438537598
    5. ')
' → logprob: -5.480660438537598
    6. ' )
' → logprob: -6.105660438537598
    7. '")' → logprob: -6.105660438537598
    8. 'operations' → logprob: -6.355660438537598
    9. '    ' → logprob: -6.855660438537598
    10. ' ")' → logprob: -6.980660438537598

Token 221: ' la' (ID: 557)
  Prédit: ' on'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' on' → logprob: -0.12008905410766602
    2. ' la' → logprob: -2.370089054107666
    3. ' the' → logprob: -4.870089054107666
    4. ' le' → logprob: -5.370089054107666
    5. 'on' → logprob: -6.620089054107666
    6. 'le' → logprob: -6.870089054107666
    7. ' K' → logprob: -6.995089054107666
    8. ' une' → logprob: -7.495089054107666
    9. ' one' → logprob: -7.495089054107666
    10. ' après' → logprob: -7.745089054107666

Token 222: ' première' (ID: 23423)
  Prédit: ' première'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' première' → logprob: -0.2809569537639618
    2. 'prem' → logprob: -1.5309569835662842
    3. ' premiere' → logprob: -4.155956745147705
    4. '1' → logprob: -5.780956745147705
    5. ' first' → logprob: -5.905956745147705
    6. ' premier' → logprob: -6.030956745147705
    7. 'first' → logprob: -6.655956745147705
    8. ' ' → logprob: -7.530956745147705
    9. ' premi' → logprob: -7.780956745147705
    10. ' dernière' → logprob: -7.905956745147705

Token 223: ' opération' (ID: 86023)
  Prédit: ' opération'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' opération' → logprob: -0.12447072565555573
    2. ')' → logprob: -3.3744707107543945
    3. 'operation' → logprob: -3.4994707107543945
    4. ' operation' → logprob: -3.9994707107543945
    5. ' op' → logprob: -4.3744707107543945
    6. ' )' → logprob: -4.6244707107543945
    7. 'op' → logprob: -5.3744707107543945
    8. ' opér' → logprob: -6.3744707107543945
    9. '<|end|>' → logprob: -7.1244707107543945
    10. ' opérations' → logprob: -7.4994707107543945

Token 224: ' prend' (ID: 37463)
  Prédit: ' traite'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' traite' → logprob: -0.5439344048500061
    2. ' incl' → logprob: -2.4189343452453613
    3. ' peut' → logprob: -2.7939343452453613
    4. ' ne' → logprob: -3.5439343452453613
    5. ' couvre' → logprob: -3.5439343452453613
    6. ' reg' → logprob: -3.6689343452453613
    7. ' prend' → logprob: -3.6689343452453613
    8. ' rec' → logprob: -4.043934345245361
    9. ' doit' → logprob: -4.168934345245361
    10. ' permet' → logprob: -4.793934345245361

Token 225: ' K' (ID: 658)
  Prédit: ' en'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.8587677478790283
    2. ' un' → logprob: -1.3587677478790283
    3. ' une' → logprob: -2.1087677478790283
    4. 'un' → logprob: -3.1087677478790283
    5. '1' → logprob: -3.3587677478790283
    6. ' le' → logprob: -3.6087677478790283
    7. 'en' → logprob: -3.8587677478790283
    8. ' ' → logprob: -3.8587677478790283
    9. ' place' → logprob: -4.108767509460449
    10. ' la' → logprob: -4.858767509460449

Token 226: ' éléments' (ID: 57375)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.09080103784799576
    2. ' )' → logprob: -2.7158010005950928
    3. ' -' → logprob: -4.340801239013672
    4. '-' → logprob: -5.465801239013672
    5. '   ' → logprob: -7.215801239013672
    6. ' +' → logprob: -7.965801239013672
    7. ',' → logprob: -8.090801239013672
    8. 'elements' → logprob: -8.215801239013672
    9. ' elements' → logprob: -8.215801239013672
    10. 'tokens' → logprob: -8.340801239013672

Token 227: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02394779585301876
    2. ')' → logprob: -4.148947715759277
    3. ',' → logprob: -6.148947715759277
    4. '.' → logprob: -6.523947715759277
    5. '
' → logprob: -6.773947715759277
    6. ')
' → logprob: -6.773947715759277
    7. '    
' → logprob: -7.023947715759277
    8. ').' → logprob: -8.148947715759277
    9. ',
' → logprob: -8.773947715759277
    10. '),' → logprob: -9.023947715759277

Token 228: ' et' (ID: 859)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8053513169288635
    2. ')' → logprob: -1.4303512573242188
    3. ' puis' → logprob: -1.6803512573242188
    4. ' et' → logprob: -2.5553512573242188
    5. '    ' → logprob: -4.680351257324219
    6. ' )' → logprob: -5.055351257324219
    7. ' donc' → logprob: -5.555351257324219
    8. '")' → logprob: -5.805351257324219
    9. 'et' → logprob: -5.930351257324219
    10. '),' → logprob: -6.180351257324219

Token 229: ' chaque' (ID: 21194)
  Prédit: ' chaque'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaque' → logprob: -1.0355427265167236
    2. 'cha' → logprob: -1.2855427265167236
    3. ' on' → logprob: -3.0355427265167236
    4. 'on' → logprob: -3.0355427265167236
    5. 'ens' → logprob: -3.2855427265167236
    6. ' la' → logprob: -3.2855427265167236
    7. ' ensuite' → logprob: -3.5355427265167236
    8. 'les' → logprob: -3.6605427265167236
    9. ' les' → logprob: -3.7855427265167236
    10. 'la' → logprob: -3.9105427265167236

Token 230: ' suivante' (ID: 107439)
  Prédit: ' opération'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' opération' → logprob: -0.2809341847896576
    2. ' suivante' → logprob: -2.1559340953826904
    3. ' subsequent' → logprob: -2.5309340953826904
    4. ' operation' → logprob: -3.9059340953826904
    5. 'operation' → logprob: -4.4059343338012695
    6. ' ' → logprob: -5.6559343338012695
    7. ' espace' → logprob: -6.2809343338012695
    8. 'suite' → logprob: -6.4059343338012695
    9. ' suite' → logprob: -6.5309343338012695
    10. ' opér' → logprob: -6.6559343338012695

Token 231: ' peut' (ID: 9216)
  Prédit: ' peut'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' peut' → logprob: -0.8531414270401001
    2. ' prend' → logprob: -0.9781414270401001
    3. ' traite' → logprob: -2.9781413078308105
    4. 'pe' → logprob: -3.7281413078308105
    5. 'pr' → logprob: -4.1031413078308105
    6. ' permet' → logprob: -4.6031413078308105
    7. ' utilise' → logprob: -4.6031413078308105
    8. ' ' → logprob: -4.8531413078308105
    9. ' ajoute' → logprob: -4.8531413078308105
    10. ' op' → logprob: -5.1031413078308105

Token 232: ' en' (ID: 469)
  Prédit: 'trait'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'trait' → logprob: -1.1415774822235107
    2. 'en' → logprob: -1.3915774822235107
    3. 'prendre' → logprob: -1.5165774822235107
    4. ' traiter' → logprob: -2.5165774822235107
    5. ' en' → logprob: -2.7665774822235107
    6. ' prendre' → logprob: -3.2665774822235107
    7. 'process' → logprob: -4.64157772064209
    8. 'tra' → logprob: -5.39157772064209
    9. 'aj' → logprob: -5.89157772064209
    10. 'repr' → logprob: -6.51657772064209

Token 233: ' traiter' (ID: 105852)
  Prédit: 'trait'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'trait' → logprob: -0.39288583397865295
    2. ' traiter' → logprob: -1.2678858041763306
    3. 'prendre' → logprob: -3.64288592338562
    4. 'tra' → logprob: -5.142885684967041
    5. 'process' → logprob: -5.142885684967041
    6. ' prendre' → logprob: -5.642885684967041
    7. ' couvrir' → logprob: -8.0178861618042
    8. ' trait' → logprob: -8.2678861618042
    9. ' tra' → logprob: -8.6428861618042
    10. 'contin' → logprob: -8.7678861618042

Token 234: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.06757298111915588
    2. 'K' → logprob: -3.067573070526123
    3. ' jusqu' → logprob: -4.942573070526123
    4. ' au' → logprob: -5.067573070526123
    5. ' seulement' → logprob: -6.067573070526123
    6. 'au' → logprob: -6.942573070526123
    7. ' up' → logprob: -7.817573070526123
    8. ' ' → logprob: -7.942573070526123
    9. ' une' → logprob: -8.192572593688965
    10. ' (' → logprob: -8.692572593688965

Token 235: '-' (ID: 12)
  Prédit: ' -'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.2520197927951813
    2. '-' → logprob: -1.5020197629928589
    3. ' ' → logprob: -10.377019882202148
    4. 'moins' → logprob: -10.752019882202148
    5. '   ' → logprob: -11.252019882202148
    6. ' minus' → logprob: -11.877019882202148
    7. 'minus' → logprob: -12.002019882202148
    8. ')' → logprob: -12.377019882202148
    9. ',' → logprob: -13.502019882202148
    10. ' )' → logprob: -13.752019882202148

Token 236: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.22545409202575684
    2. ' ' → logprob: -1.6004540920257568
    3. '   ' → logprob: -11.225454330444336
    4. ' ' → logprob: -11.225454330444336
    5. '-' → logprob: -12.350454330444336
    6. '<|end|>' → logprob: -13.350454330444336
    7. '```' → logprob: -13.350454330444336
    8. ')' → logprob: -13.600454330444336
    9. '  ' → logprob: -13.850454330444336
    10. ' -' → logprob: -13.850454330444336

Token 237: ' (' (ID: 350)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.30526766180992126
    2. ')
' → logprob: -1.6802676916122437
    3. '   ' → logprob: -4.055267810821533
    4. ' )' → logprob: -4.430267810821533
    5. ' )
' → logprob: -4.805267810821533
    6. 'operations' → logprob: -5.055267810821533
    7. ' operations' → logprob: -5.055267810821533
    8. ' opérations' → logprob: -5.305267810821533
    9. '),' → logprob: -5.805267810821533
    10. ').' → logprob: -5.930267810821533

Token 238: 'supp' (ID: 124665)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.15150009095668793
    2. ' )' → logprob: -2.5264999866485596
    3. ')
' → logprob: -3.6514999866485596
    4. ' )
' → logprob: -4.151500225067139
    5. ').' → logprob: -5.526500225067139
    6. ' pour' → logprob: -6.026500225067139
    7. ' supplémentaires' → logprob: -6.276500225067139
    8. ').
' → logprob: -6.401500225067139
    9. 'pour' → logprob: -7.026500225067139
    10. ' de' → logprob: -7.151500225067139

Token 239: 'os' (ID: 365)
  Prédit: 'os'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'os' → logprob: -0.015252886340022087
    2. 'ose' → logprob: -4.640253067016602
    3. 'lement' → logprob: -5.515253067016602
    4. ')' → logprob: -7.140253067016602
    5. 'osed' → logprob: -8.640253067016602
    6. 'le' → logprob: -9.515253067016602
    7. '   ' → logprob: -9.515253067016602
    8. 'lé' → logprob: -10.265253067016602
    9. 'ort' → logprob: -10.515253067016602
    10. 'osing' → logprob: -11.015253067016602

Token 240: 'ant' (ID: 493)
  Prédit: 'os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'os' → logprob: -0.012342237867414951
    2. ')' → logprob: -5.88734245300293
    3. 'é' → logprob: -6.13734245300293
    4. 'ons' → logprob: -6.63734245300293
    5. 'on' → logprob: -6.76234245300293
    6. 'ément' → logprob: -7.01234245300293
    7. 'ose' → logprob: -7.01234245300293
    8. '#' → logprob: -8.26234245300293
    9. 'posé' → logprob: -8.51234245300293
    10. ')
' → logprob: -8.76234245300293

Token 241: ' un' (ID: 537)
  Prédit: ' que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.2669084370136261
    2. ' une' → logprob: -2.3919084072113037
    3. ' qu' → logprob: -3.0169084072113037
    4. ' la' → logprob: -3.6419084072113037
    5. 'que' → logprob: -4.266908645629883
    6. '   ' → logprob: -4.516908645629883
    7. ')' → logprob: -4.891908645629883
    8. ' )' → logprob: -4.891908645629883
    9. ' K' → logprob: -5.016908645629883
    10. ' un' → logprob: -5.391908645629883

Token 242: ' rec' (ID: 1369)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'd' → logprob: -1.2842168807983398
    2. ' dé' → logprob: -1.2842168807983398
    3. 'es' → logprob: -1.6592168807983398
    4. ' espace' → logprob: -2.28421688079834
    5. ')' → logprob: -3.40921688079834
    6. 'dé' → logprob: -3.90921688079834
    7. 'esp' → logprob: -4.15921688079834
    8. ' d' → logprob: -4.90921688079834
    9. ' déplacement' → logprob: -4.90921688079834
    10. ' overlap' → logprob: -5.03421688079834

Token 243: 'ouv' (ID: 14851)
  Prédit: 'ort'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ort' → logprob: -0.035347532480955124
    2. 'lé' → logprob: -4.9103474617004395
    3. 'rès' → logprob: -5.0353474617004395
    4. 'l' → logprob: -5.5353474617004395
    5. 'r' → logprob: -5.6603474617004395
    6. 'orte' → logprob: -5.9103474617004395
    7. 'lus' → logprob: -6.0353474617004395
    8. 'lement' → logprob: -6.6603474617004395
    9. 'le' → logprob: -7.0353474617004395
    10. 'ur' → logprob: -7.2853474617004395

Token 244: 'rement' (ID: 66132)
  Prédit: 'ert'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ert' → logprob: -0.32574811577796936
    2. 'er' → logprob: -1.325748085975647
    3. 'erg' → logprob: -5.325747966766357
    4. 'rement' → logprob: -5.700747966766357
    5. 'ertura' → logprob: -7.075747966766357
    6. 'ersion' → logprob: -7.075747966766357
    7. 'erp' → logprob: -7.575747966766357
    8. 'erte' → logprob: -7.950747966766357
    9. 'erge' → logprob: -8.075748443603516
    10. 'erb' → logprob: -8.700748443603516

Token 245: ' d' (ID: 272)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.10887323319911957
    2. ' entre' → logprob: -2.483873128890991
    3. ' )' → logprob: -4.98387336730957
    4. ' des' → logprob: -5.10887336730957
    5. ').' → logprob: -5.35887336730957
    6. ' possible' → logprob: -7.85887336730957
    7. ' de' → logprob: -8.23387336730957
    8. ' total' → logprob: -8.23387336730957
    9. ' pour' → logprob: -8.73387336730957
    10. ' avec' → logprob: -8.85887336730957

Token 246: ''un' (ID: 9788)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.4277117252349854
    2. '1' → logprob: -1.4277117252349854
    3. 'un' → logprob: -1.8027117252349854
    4. ' un' → logprob: -2.6777117252349854
    5. ' K' → logprob: -3.0527117252349854
    6. 'une' → logprob: -3.3027117252349854
    7. ' ' → logprob: -3.3027117252349854
    8. 'K' → logprob: -3.4277117252349854
    9. ''un' → logprob: -3.5527117252349854
    10. 'au' → logprob: -4.427711486816406

Token 247: ' élément' (ID: 99627)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.16611836850643158
    2. ' élément' → logprob: -2.6661183834075928
    3. 'élé' → logprob: -3.0411183834075928
    4. ' )' → logprob: -3.7911183834075928
    5. 'element' → logprob: -5.166118144989014
    6. ' espace' → logprob: -5.416118144989014
    7. '```' → logprob: -6.791118144989014
    8. ' element' → logprob: -7.541118144989014
    9. ' ' → logprob: -8.291118621826172
    10. 'e' → logprob: -8.416118621826172

Token 248: ').
' (ID: 6294)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.10277309268712997
    2. ' entre' → logprob: -3.2277731895446777
    3. ').' → logprob: -3.3527731895446777
    4. ')
' → logprob: -4.477773189544678
    5. ' )' → logprob: -5.102773189544678
    6. ' pour' → logprob: -6.852773189544678
    7. '),' → logprob: -7.352773189544678
    8. ').
' → logprob: -7.602773189544678
    9. ' )
' → logprob: -7.852773189544678
    10. '   ' → logprob: -7.977773189544678

Token 249: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03822382539510727
    2. 'result' → logprob: -3.6632237434387207
    3. ' result' → logprob: -5.038223743438721
    4. '    
' → logprob: -6.538223743438721
    5. 'res' → logprob: -7.163223743438721
    6. ' operations' → logprob: -7.538223743438721
    7. ' res' → logprob: -7.538223743438721
    8. 'operations' → logprob: -7.538223743438721
    9. 'ops' → logprob: -8.538224220275879
    10. 'return' → logprob: -8.913224220275879

Token 250: ' #' (ID: 1069)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.46923306584358215
    2. '   ' → logprob: -1.9692330360412598
    3. ' result' → logprob: -2.9692330360412598
    4. 'if' → logprob: -3.2192330360412598
    5. 'operations' → logprob: -3.2192330360412598
    6. 'print' → logprob: -3.3442330360412598
    7. 'ops' → logprob: -4.09423303604126
    8. 'res' → logprob: -4.34423303604126
    9. ' if' → logprob: -4.59423303604126
    10. ' print' → logprob: -4.84423303604126

Token 251: ' On' (ID: 2160)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.7729305028915405
    2. '   ' → logprob: -1.3979305028915405
    3. ' result' → logprob: -2.14793062210083
    4. 'operations' → logprob: -3.14793062210083
    5. 'res' → logprob: -3.52293062210083
    6. 'ops' → logprob: -3.89793062210083
    7. ' res' → logprob: -4.02293062210083
    8. ' operations' → logprob: -4.27293062210083
    9. 'return' → logprob: -4.39793062210083
    10. ' ops' → logprob: -5.14793062210083

Token 252: ' utilise' (ID: 70283)
  Prédit: ' calc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' calc' → logprob: -0.6472492218017578
    2. ' continue' → logprob: -1.8972492218017578
    3. 'effect' → logprob: -3.022249221801758
    4. 'continue' → logprob: -3.272249221801758
    5. '   ' → logprob: -3.397249221801758
    6. 'nombre' → logprob: -3.522249221801758
    7. ' effect' → logprob: -3.897249221801758
    8. 'aff' → logprob: -4.147249221801758
    9. ' affiche' → logprob: -4.147249221801758
    10. ' nombre' → logprob: -4.522249221801758

Token 253: ' ceil' (ID: 35964)
  Prédit: ' ceil'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ceil' → logprob: -0.2523441016674042
    2. 'ceil' → logprob: -1.5023441314697266
    3. ' ' → logprob: -8.627344131469727
    4. '   ' → logprob: -9.127344131469727
    5. '(' → logprob: -10.627344131469727
    6. 'ce' → logprob: -10.877344131469727
    7. '  ' → logprob: -11.002344131469727
    8. ' (' → logprob: -11.252344131469727
    9. ' la' → logprob: -11.502344131469727
    10. '    ' → logprob: -12.002344131469727

Token 254: ' pour' (ID: 1930)
  Prédit: '(('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '((' → logprob: -0.013113988563418388
    2. '(' → logprob: -4.513113975524902
    3. '(
' → logprob: -7.013113975524902
    4. '   ' → logprob: -7.388113975524902
    5. '(N' → logprob: -8.138113975524902
    6. '(((' → logprob: -9.138113975524902
    7. ' ((' → logprob: -9.888113975524902
    8. ',' → logprob: -10.388113975524902
    9. ' ' → logprob: -10.388113975524902
    10. ' (' → logprob: -11.388113975524902

Token 255: ' arr' (ID: 1724)
  Prédit: ' calcul'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' calcul' → logprob: -0.6485452651977539
    2. ' div' → logprob: -1.523545265197754
    3. 'calcul' → logprob: -2.273545265197754
    4. 'div' → logprob: -2.898545265197754
    5. ' continuer' → logprob: -3.648545265197754
    6. ' garantir' → logprob: -4.523545265197754
    7. 'arr' → logprob: -4.648545265197754
    8. ' compter' → logprob: -4.773545265197754
    9. ')' → logprob: -5.148545265197754
    10. ' effectuer' → logprob: -5.148545265197754

Token 256: 'ond' (ID: 1415)
  Prédit: 'ond'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ond' → logprob: -0.00031413204851560295
    2. '(' → logprob: -9.000313758850098
    3. 'on' → logprob: -9.875313758850098
    4. 'ound' → logprob: -10.000313758850098
    5. 'onder' → logprob: -10.125313758850098
    6. 'ondi' → logprob: -12.000313758850098
    7. '**' → logprob: -12.625313758850098
    8. 'o' → logprob: -12.625313758850098
    9. 'indir' → logprob: -12.625313758850098
    10. '"' → logprob: -12.875313758850098

Token 257: 'ir' (ID: 380)
  Prédit: 'ir'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ir' → logprob: -0.36124861240386963
    2. '(N' → logprob: -1.4862486124038696
    3. '((' → logprob: -2.86124849319458
    4. '(' → logprob: -4.36124849319458
    5. 'er' → logprob: -6.48624849319458
    6. '   ' → logprob: -6.73624849319458
    7. 'isser' → logprob: -6.73624849319458
    8. '(
' → logprob: -7.73624849319458
    9. 'is' → logprob: -8.111248970031738
    10. 'i' → logprob: -8.361248970031738

Token 258: ' à' (ID: 1221)
  Prédit: '(('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '((' → logprob: -0.11955597996711731
    2. '(' → logprob: -2.494555950164795
    3. '   ' → logprob: -3.744555950164795
    4. '(
' → logprob: -6.244555950164795
    5. '(N' → logprob: -6.369555950164795
    6. '(((' → logprob: -6.619555950164795
    7. ' (' → logprob: -7.494555950164795
    8. ',' → logprob: -8.369556427001953
    9. ' ((' → logprob: -8.369556427001953
    10. ' ' → logprob: -8.619556427001953

Token 259: ' l' (ID: 305)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.7894644141197205
    2. ' l' → logprob: -1.6644644737243652
    3. ')' → logprob: -2.0394644737243652
    4. '(N' → logprob: -3.1644644737243652
    5. ' la' → logprob: -3.4144644737243652
    6. '   ' → logprob: -3.5394644737243652
    7. ' ' → logprob: -3.7894644737243652
    8. 'l' → logprob: -3.9144644737243652
    9. '(' → logprob: -4.164464473724365
    10. ' ceil' → logprob: -4.414464473724365

Token 260: ''ent' (ID: 53422)
  Prédit: 'sup'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sup' → logprob: -0.3041899800300598
    2. 'e' → logprob: -2.304189920425415
    3. '_sup' → logprob: -2.304189920425415
    4. ' supérieur' → logprob: -3.304189920425415
    5. 'au' → logprob: -4.804190158843994
    6. ''au' → logprob: -5.679190158843994
    7. 'haut' → logprob: -6.554190158843994
    8. ''ent' → logprob: -6.554190158843994
    9. ''ordre' → logprob: -6.804190158843994
    10. '   ' → logprob: -6.929190158843994

Token 261: 'ier' (ID: 905)
  Prédit: 'ier'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ier' → logprob: -0.001765978173352778
    2. 'ière' → logprob: -6.751766204833984
    3. 'iere' → logprob: -7.876766204833984
    4. 'ête' → logprob: -8.876766204833984
    5. 'er' → logprob: -11.001766204833984
    6. 'ières' → logprob: -11.251766204833984
    7. 'ire' → logprob: -11.376766204833984
    8. 'iers' → logprob: -12.251766204833984
    9. 'ie' → logprob: -12.376766204833984
    10. 'ié' → logprob: -12.501766204833984

Token 262: ' supérieur' (ID: 98491)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.851108729839325
    2. '(
' → logprob: -1.3511087894439697
    3. 'sup' → logprob: -1.9761087894439697
    4. '(N' → logprob: -2.8511087894439697
    5. '   ' → logprob: -3.2261087894439697
    6. '((' → logprob: -3.4761087894439697
    7. ' supérieur' → logprob: -4.101108551025391
    8. '(s' → logprob: -5.101108551025391
    9. 'su' → logprob: -5.476108551025391
    10. 'au' → logprob: -5.476108551025391

Token 263: ' (' (ID: 350)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.030187785625457764
    2. ')' → logprob: -4.905187606811523
    3. '(N' → logprob: -4.905187606811523
    4. ',' → logprob: -5.280187606811523
    5. '((' → logprob: -5.655187606811523
    6. '(' → logprob: -5.655187606811523
    7. '(
' → logprob: -6.655187606811523
    8. ')
' → logprob: -7.530187606811523
    9. '(n' → logprob: -8.905187606811523
    10. 'def' → logprob: -9.030187606811523

Token 264: 'cas' (ID: 14617)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.3813302516937256
    2. '(N' → logprob: -1.2563302516937256
    3. '   ' → logprob: -4.131330490112305
    4. ')' → logprob: -4.881330490112305
    5. '((' → logprob: -5.506330490112305
    6. '(' → logprob: -5.881330490112305
    7. ' ' → logprob: -7.631330490112305
    8. ' ((' → logprob: -7.881330490112305
    9. '(len' → logprob: -8.256330490112305
    10. ' )' → logprob: -8.506330490112305

Token 265: ' où' (ID: 15113)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7281321883201599
    2. '   ' → logprob: -1.1031322479248047
    3. '(N' → logprob: -3.1031322479248047
    4. ' du' → logprob: -3.3531322479248047
    5. '(' → logprob: -3.6031322479248047
    6. ' des' → logprob: -4.353132247924805
    7. ' de' → logprob: -4.353132247924805
    8. ' supérieur' → logprob: -4.728132247924805
    9. ' nécessaire' → logprob: -4.853132247924805
    10. '  ' → logprob: -4.978132247924805

Token 266: ' la' (ID: 557)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.5917490124702454
    2. '(N' → logprob: -0.8417490124702454
    3. 'N' → logprob: -4.84174919128418
    4. ' N' → logprob: -5.09174919128418
    5. '   ' → logprob: -6.84174919128418
    6. ' ' → logprob: -8.46674919128418
    7. ')' → logprob: -8.71674919128418
    8. '  ' → logprob: -9.71674919128418
    9. '(' → logprob: -10.09174919128418
    10. '(n' → logprob: -10.96674919128418

Token 267: ' division' (ID: 21629)
  Prédit: ' division'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' division' → logprob: -0.46608373522758484
    2. 'division' → logprob: -1.3410837650299072
    3. 'nombre' → logprob: -3.2160837650299072
    4. 'div' → logprob: -4.216083526611328
    5. ' nombre' → logprob: -4.216083526611328
    6. ' ' → logprob: -4.716083526611328
    7. ')' → logprob: -5.091083526611328
    8. ' N' → logprob: -5.591083526611328
    9. ' (' → logprob: -5.716083526611328
    10. ' )' → logprob: -6.091083526611328

Token 268: ' n' (ID: 297)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0484141111373901
    2. '(N' → logprob: -1.0484141111373901
    3. '((' → logprob: -1.7984141111373901
    4. '   ' → logprob: -2.6734142303466797
    5. ' (' → logprob: -3.5484142303466797
    6. '(' → logprob: -4.04841423034668
    7. ' )' → logprob: -5.29841423034668
    8. ' ' → logprob: -5.92341423034668
    9. '))' → logprob: -6.17341423034668
    10. ',' → logprob: -6.42341423034668

Token 269: ''est' (ID: 6616)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.15562009811401367
    2. '   ' → logprob: -2.4056200981140137
    3. ' )' → logprob: -4.155620098114014
    4. 'e' → logprob: -5.030620098114014
    5. ' ne' → logprob: -5.780620098114014
    6. '+' → logprob: -6.030620098114014
    7. ' n' → logprob: -6.280620098114014
    8. ' est' → logprob: -6.655620098114014
    9. ' is' → logprob: -6.655620098114014
    10. ' ' → logprob: -6.655620098114014

Token 270: ' pas' (ID: 2173)
  Prédit: ' pas'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pas' → logprob: -0.694944441318512
    2. 'pas' → logprob: -0.694944441318512
    3. '   ' → logprob: -7.194944381713867
    4. 'not' → logprob: -8.319944381713867
    5. 'ent' → logprob: -8.819944381713867
    6. ' not' → logprob: -8.944944381713867
    7. ' nécessaire' → logprob: -9.069944381713867
    8. 'exact' → logprob: -9.319944381713867
    9. ')' → logprob: -9.694944381713867
    10. '_pas' → logprob: -10.444944381713867

Token 271: ' exacte' (ID: 188756)
  Prédit: 'exact'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'exact' → logprob: -0.4352654218673706
    2. 'ent' → logprob: -1.4352654218673706
    3. ' exacte' → logprob: -2.31026554107666
    4. ' entière' → logprob: -4.81026554107666
    5. ' exact' → logprob: -5.93526554107666
    6. ' ent' → logprob: -6.18526554107666
    7. 'int' → logprob: -7.56026554107666
    8. ' parfaite' → logprob: -7.68526554107666
    9. 'ex' → logprob: -7.93526554107666
    10. 'pas' → logprob: -8.43526554107666

Token 272: ').
' (ID: 6294)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.026639647781848907
    2. ')
' → logprob: -4.026639461517334
    3. '   ' → logprob: -4.901639461517334
    4. ',' → logprob: -8.276639938354492
    5. '(N' → logprob: -8.526639938354492
    6. ').' → logprob: -9.276639938354492
    7. '),' → logprob: -9.276639938354492
    8. ')
' → logprob: -9.651639938354492
    9. ' )' → logprob: -9.776639938354492
    10. ')

' → logprob: -9.901639938354492

Token 273: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07084839046001434
    2. 'result' → logprob: -2.9458484649658203
    3. 'res' → logprob: -5.19584846496582
    4. ' result' → logprob: -5.44584846496582
    5. '    
' → logprob: -6.19584846496582
    6. ' res' → logprob: -6.57084846496582
    7. 'return' → logprob: -7.94584846496582
    8. 'operations' → logprob: -8.19584846496582
    9. 'ops' → logprob: -8.44584846496582
    10. '
' → logprob: -8.44584846496582

Token 274: ' #' (ID: 1069)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.18219152092933655
    2. '   ' → logprob: -3.0571916103363037
    3. ' result' → logprob: -3.4321916103363037
    4. 'operations' → logprob: -3.8071916103363037
    5. 'res' → logprob: -4.307191371917725
    6. 'return' → logprob: -4.307191371917725
    7. 'ops' → logprob: -4.682191371917725
    8. 'steps' → logprob: -5.057191371917725
    9. 'min' → logprob: -5.932191371917725
    10. 'count' → logprob: -5.932191371917725

Token 275: ' On' (ID: 2160)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.44904911518096924
    2. 'operations' → logprob: -1.8240491151809692
    3. 'ops' → logprob: -2.4490489959716797
    4. 'steps' → logprob: -3.3240489959716797
    5. 'print' → logprob: -3.8240489959716797
    6. 'res' → logprob: -4.07404899597168
    7. '   ' → logprob: -4.19904899597168
    8. 'min' → logprob: -4.94904899597168
    9. ' result' → logprob: -6.07404899597168
    10. 'answer' → logprob: -6.19904899597168

Token 276: ' ajoute' (ID: 91611)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.649372935295105
    2. 'print' → logprob: -1.649372935295105
    3. 'result' → logprob: -2.5243730545043945
    4. ' calc' → logprob: -3.3993730545043945
    5. 'return' → logprob: -3.5243730545043945
    6. ' print' → logprob: -3.6493730545043945
    7. '#' → logprob: -3.7743730545043945
    8. 'aff' → logprob: -3.8993730545043945
    9. 'continue' → logprob: -4.3993730545043945
    10. ' return' → logprob: -4.8993730545043945

Token 277: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.20248009264469147
    2. ' ' → logprob: -1.9524800777435303
    3. '   ' → logprob: -3.2024800777435303
    4. '    ' → logprob: -8.07748031616211
    5. '2' → logprob: -9.32748031616211
    6. '  ' → logprob: -9.45248031616211
    7. '(' → logprob: -9.70248031616211
    8. ' +' → logprob: -10.07748031616211
    9. ' (' → logprob: -11.07748031616211
    10. '0' → logprob: -11.07748031616211

Token 278: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0026947935111820698
    2. ' ' → logprob: -6.002694606781006
    3. '(' → logprob: -8.627695083618164
    4. '   ' → logprob: -10.752695083618164
    5. ' (' → logprob: -12.252695083618164
    6. '(N' → logprob: -12.877695083618164
    7. '  ' → logprob: -13.002695083618164
    8. ' +' → logprob: -13.877695083618164
    9. '`' → logprob: -14.002695083618164
    10. '    ' → logprob: -14.127695083618164

Token 279: ' pour' (ID: 1930)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.42939165234565735
    2. ')' → logprob: -1.679391622543335
    3. ' +' → logprob: -2.929391622543335
    4. ',' → logprob: -2.929391622543335
    5. 'def' → logprob: -4.804391860961914
    6. ' (' → logprob: -5.304391860961914
    7. ' *' → logprob: -5.304391860961914
    8. '(N' → logprob: -5.304391860961914
    9. '(' → logprob: -5.429391860961914
    10. '(
' → logprob: -5.554391860961914

Token 280: ' compter' (ID: 81694)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.49939125776290894
    2. ' compter' → logprob: -1.8743913173675537
    3. ' prendre' → logprob: -2.1243913173675537
    4. ' la' → logprob: -3.7493913173675537
    5. 'l' → logprob: -3.7493913173675537
    6. ' comp' → logprob: -4.124391078948975
    7. ' incl' → logprob: -4.249391078948975
    8. ' représ' → logprob: -4.874391078948975
    9. ' tenir' → logprob: -4.874391078948975
    10. ' couvrir' → logprob: -5.124391078948975

Token 281: ' la' (ID: 557)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.6857925057411194
    2. ' ' → logprob: -1.9357924461364746
    3. '   ' → logprob: -2.4357924461364746
    4. '(' → logprob: -2.5607924461364746
    5. ' l' → logprob: -2.5607924461364746
    6. ')' → logprob: -2.9357924461364746
    7. ' la' → logprob: -4.185792446136475
    8. 'def' → logprob: -4.560792446136475
    9. '  ' → logprob: -5.560792446136475
    10. ' le' → logprob: -5.560792446136475

Token 282: ' première' (ID: 23423)
  Prédit: 'prem'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prem' → logprob: -0.1652437299489975
    2. ' première' → logprob: -1.9152437448501587
    3. '1' → logprob: -6.290243625640869
    4. ' ' → logprob: -6.790243625640869
    5. ' ' → logprob: -7.415243625640869
    6. ' premi' → logprob: -7.415243625640869
    7. ' premiere' → logprob: -8.540244102478027
    8. '```' → logprob: -9.290244102478027
    9. '_' → logprob: -9.540244102478027
    10. '   ' → logprob: -9.665244102478027

Token 283: ' opération' (ID: 86023)
  Prédit: ' opération'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' opération' → logprob: -0.07319509983062744
    2. ' operation' → logprob: -3.323194980621338
    3. 'operation' → logprob: -3.823194980621338
    4. ' ' → logprob: -5.823194980621338
    5. ' opér' → logprob: -5.823194980621338
    6. ' op' → logprob: -5.823194980621338
    7. ' opérations' → logprob: -6.698194980621338
    8. 'op' → logprob: -7.323194980621338
    9. ' ' → logprob: -8.198195457458496
    10. ' étape' → logprob: -8.198195457458496

Token 284: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.026431269943714142
    2. ')' → logprob: -4.651431083679199
    3. 'return' → logprob: -4.901431083679199
    4. '
' → logprob: -6.026431083679199
    5. 'result' → logprob: -6.526431083679199
    6. ')
' → logprob: -6.526431083679199
    7. '    
' → logprob: -6.651431083679199
    8. ' return' → logprob: -7.026431083679199
    9. '\n' → logprob: -8.0264310836792
    10. ',' → logprob: -8.2764310836792

Token 285: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.23752379417419434
    2. 'result' → logprob: -1.7375237941741943
    3. 'return' → logprob: -4.112524032592773
    4. ' result' → logprob: -4.737524032592773
    5. 'res' → logprob: -5.862524032592773
    6. 'ops' → logprob: -6.237524032592773
    7. 'operations' → logprob: -6.362524032592773
    8. ' return' → logprob: -6.487524032592773
    9. '    
' → logprob: -7.237524032592773
    10. ' operations' → logprob: -8.487524032592773

Token 286: ' ans' (ID: 3345)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.3898695111274719
    2. 'return' → logprob: -2.139869451522827
    3. '   ' → logprob: -2.389869451522827
    4. 'ops' → logprob: -3.139869451522827
    5. 'operations' → logprob: -3.639869451522827
    6. ' result' → logprob: -4.014869689941406
    7. 'res' → logprob: -4.764869689941406
    8. ' return' → logprob: -5.389869689941406
    9. '
' → logprob: -5.889869689941406
    10. 'steps' → logprob: -6.014869689941406

Token 287: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.06196846812963486
    2. '=' → logprob: -2.8119685649871826
    3. '   ' → logprob: -14.311968803405762
    4. ' ' → logprob: -16.811967849731445
    5. ' =
' → logprob: -16.936967849731445
    6. ' ' → logprob: -17.436967849731445
    7. ')' → logprob: -17.686967849731445
    8. ',' → logprob: -17.811967849731445
    9. '	' → logprob: -18.186967849731445
    10. '=int' → logprob: -18.686967849731445

Token 288: ' ceil' (ID: 35964)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.024068251252174377
    2. 'ceil' → logprob: -4.024068355560303
    3. ' ' → logprob: -5.274068355560303
    4. ' ceil' → logprob: -7.274068355560303
    5. '(' → logprob: -9.649067878723145
    6. '   ' → logprob: -11.524067878723145
    7. 'ce' → logprob: -13.024067878723145
    8. ' (' → logprob: -13.149067878723145
    9. '  ' → logprob: -13.274067878723145
    10. '0' → logprob: -13.774067878723145

Token 289: '((' (ID: 2054)
  Prédit: '(('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '((' → logprob: -4.203409844194539e-05
    2. '(' → logprob: -10.250041961669922
    3. '(((' → logprob: -12.375041961669922
    4. '(N' → logprob: -13.125041961669922
    5. ' ((' → logprob: -14.875041961669922
    6. '(
' → logprob: -17.875041961669922
    7. ' (' → logprob: -18.125041961669922
    8. ' ' → logprob: -19.000041961669922
    9. '   ' → logprob: -19.500041961669922
    10. '[(' → logprob: -19.875041961669922

Token 290: 'N' (ID: 45)
  Prédit: 'N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -5.717296517104842e-05
    2. '(N' → logprob: -10.250057220458984
    3. '   ' → logprob: -11.000057220458984
    4. ' N' → logprob: -12.250057220458984
    5. '	N' → logprob: -15.625057220458984
    6. ' ' → logprob: -16.125057220458984
    7. ' (' → logprob: -16.875057220458984
    8. ')' → logprob: -17.625057220458984
    9. '(' → logprob: -18.250057220458984
    10. '[N' → logprob: -18.875057220458984

Token 291: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.20227950811386108
    2. '-' → logprob: -1.7022795677185059
    3. '-K' → logprob: -7.077279567718506
    4. ' ' → logprob: -11.202279090881348
    5. '   ' → logprob: -12.452279090881348
    6. ' -
' → logprob: -13.202279090881348
    7. '-
' → logprob: -13.577279090881348
    8. '  ' → logprob: -15.327279090881348
    9. '-N' → logprob: -15.452279090881348
    10. '-k' → logprob: -16.077280044555664

Token 292: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.04300056770443916
    2. ' K' → logprob: -3.1680004596710205
    3. '   ' → logprob: -14.293000221252441
    4. ' ' → logprob: -14.918000221252441
    5. ')' → logprob: -15.543000221252441
    6. '	K' → logprob: -15.793000221252441
    7. '>K' → logprob: -17.793001174926758
    8. '  ' → logprob: -17.918001174926758
    9. '```' → logprob: -18.355501174926758
    10. ',K' → logprob: -18.418001174926758

Token 293: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0013915427261963487
    2. ')/(' → logprob: -7.001391410827637
    3. ' )' → logprob: -8.001391410827637
    4. ')/' → logprob: -8.876391410827637
    5. ')
' → logprob: -12.376391410827637
    6. '   ' → logprob: -14.626391410827637
    7. ')
/' → logprob: -16.001392364501953
    8. ' ' → logprob: -16.376392364501953
    9. '+' → logprob: -16.626392364501953
    10. ')

' → logprob: -16.751392364501953

Token 294: ' /' (ID: 820)
  Prédit: '/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '/' → logprob: -0.4890531301498413
    2. ' /' → logprob: -0.9890531301498413
    3. ')' → logprob: -4.364053249359131
    4. '/(' → logprob: -6.364053249359131
    5. '/
' → logprob: -8.364052772521973
    6. ')/(' → logprob: -9.864052772521973
    7. '   ' → logprob: -10.364052772521973
    8. ')/' → logprob: -10.739052772521973
    9. ' /
' → logprob: -10.864052772521973
    10. '/K' → logprob: -11.239052772521973

Token 295: ' (' (ID: 350)
  Prédit: '(K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(K' → logprob: -0.05505887046456337
    2. ' (' → logprob: -2.9300589561462402
    3. '   ' → logprob: -9.180058479309082
    4. '(' → logprob: -9.805058479309082
    5. '(k' → logprob: -11.180058479309082
    6. '((' → logprob: -13.805058479309082
    7. '(N' → logprob: -14.180058479309082
    8. ' ' → logprob: -14.555058479309082
    9. '  ' → logprob: -15.055058479309082
    10. ')' → logprob: -15.305058479309082

Token 296: 'K' (ID: 42)
  Prédit: 'K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.10191351920366287
    2. '(K' → logprob: -2.3519134521484375
    3. ' K' → logprob: -6.9769134521484375
    4. ' (' → logprob: -7.3519134521484375
    5. '   ' → logprob: -9.226913452148438
    6. '(' → logprob: -10.476913452148438
    7. '	K' → logprob: -13.476913452148438
    8. ' ' → logprob: -14.101913452148438
    9. '  ' → logprob: -14.851913452148438
    10. 'k' → logprob: -15.226913452148438

Token 297: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.023247575387358665
    2. '-' → logprob: -3.773247480392456
    3. ' ' → logprob: -13.898247718811035
    4. '1' → logprob: -14.148247718811035
    5. ')' → logprob: -15.648247718811035
    6. '   ' → logprob: -16.14824676513672
    7. 'minus' → logprob: -17.39824676513672
    8. ' -
' → logprob: -17.64824676513672
    9. '```' → logprob: -17.64824676513672
    10. ' minus' → logprob: -17.77324676513672

Token 298: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.001170460251159966
    2. ' ' → logprob: -6.751170635223389
    3. ')' → logprob: -15.25117015838623
    4. '   ' → logprob: -17.751171112060547
    5. '  ' → logprob: -18.501171112060547
    6. '<|end|>' → logprob: -18.501171112060547
    7. '```' → logprob: -18.501171112060547
    8. ' ' → logprob: -18.626171112060547
    9. '
' → logprob: -19.001171112060547
    10. '۱' → logprob: -19.063671112060547

Token 299: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0006271334132179618
    2. ' ' → logprob: -7.375627040863037
    3. ')' → logprob: -15.500627517700195
    4. '```' → logprob: -15.500627517700195
    5. '   ' → logprob: -16.375627517700195
    6. '<|end|>' → logprob: -17.000627517700195
    7. ' ' → logprob: -18.000627517700195
    8. '  ' → logprob: -18.188127517700195
    9. ' )' → logprob: -18.875627517700195
    10. '۱' → logprob: -18.875627517700195

Token 300: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.008647306822240353
    2. ')' → logprob: -4.758647441864014
    3. '))+' → logprob: -10.633646965026855
    4. ' ))' → logprob: -11.883646965026855
    5. '))
' → logprob: -14.133646965026855
    6. ')+' → logprob: -15.008646965026855
    7. '   ' → logprob: -15.258646965026855
    8. ' )' → logprob: -15.258646965026855
    9. ')))' → logprob: -15.758646965026855
    10. ''))' → logprob: -17.008647918701172

Token 301: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.20210371911525726
    2. '+' → logprob: -1.7021037340164185
    3. ')' → logprob: -7.827103614807129
    4. '   ' → logprob: -8.702103614807129
    5. ' +
' → logprob: -10.077103614807129
    6. ')+' → logprob: -10.327103614807129
    7. '+
' → logprob: -10.702103614807129
    8. '<|end|>' → logprob: -11.702103614807129
    9. ' )' → logprob: -12.452103614807129
    10. ' ans' → logprob: -12.952103614807129

Token 302: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.001170225441455841
    2. ' ' → logprob: -6.7511701583862305
    3. '   ' → logprob: -17.876171112060547
    4. '0' → logprob: -19.626171112060547
    5. '```' → logprob: -19.626171112060547
    6. '  ' → logprob: -19.876171112060547
    7. ' ' → logprob: -20.501171112060547
    8. '۱' → logprob: -21.876171112060547
    9. '	' → logprob: -22.126171112060547
    10. '１' → logprob: -22.376171112060547

Token 303: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.3856492842023727e-06
    2. '0' → logprob: -13.875000953674316
    3. ' ' → logprob: -15.000000953674316
    4. '```' → logprob: -19.250001907348633
    5. '   ' → logprob: -19.750001907348633
    6. '  ' → logprob: -22.750001907348633
    7. '[' → logprob: -23.250001907348633
    8. '(' → logprob: -23.500001907348633
    9. '<|end|>' → logprob: -23.500001907348633
    10. '-' → logprob: -23.625001907348633

Token 304: '

' (ID: 279)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20382586121559143
    2. '
' → logprob: -1.953825831413269
    3. '<|end|>' → logprob: -3.3288259506225586
    4. ')' → logprob: -6.078825950622559
    5. '    
' → logprob: -6.078825950622559
    6. '\n' → logprob: -6.578825950622559
    7. 'print' → logprob: -7.828825950622559
    8. '<|end|>' → logprob: -9.328825950622559
    9. '  
' → logprob: -9.703825950622559
    10. '```' → logprob: -9.828825950622559

Token 305: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03795173764228821
    2. '
' → logprob: -3.537951707839966
    3. '    
' → logprob: -5.287951946258545
    4. '\n' → logprob: -6.912951946258545
    5. '<|end|>' → logprob: -7.037951946258545
    6. 'print' → logprob: -7.287951946258545
    7. ')' → logprob: -8.162951469421387
    8. '```' → logprob: -9.412951469421387
    9. '  
' → logprob: -9.537951469421387
    10. 'return' → logprob: -10.662951469421387

Token 306: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.3133465051651001
    2. '   ' → logprob: -1.3133465051651
    3. ' print' → logprob: -9.813346862792969
    4. '    
' → logprob: -10.938346862792969
    5. '
' → logprob: -11.563346862792969
    6. '```' → logprob: -13.438346862792969
    7. '	print' → logprob: -14.313346862792969
    8. 'if' → logprob: -15.188346862792969
    9. '  
' → logprob: -15.938346862792969
    10. '#print' → logprob: -16.56334686279297

Token 307: ' Aff' (ID: 13741)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -4.9186317482963204e-05
    2. ' print' → logprob: -10.000049591064453
    3. '   ' → logprob: -12.500049591064453
    4. '```' → logprob: -18.750049591064453
    5. 'pr' → logprob: -19.375049591064453
    6. 'if' → logprob: -19.500049591064453
    7. 'prin' → logprob: -21.250049591064453
    8. '#print' → logprob: -21.375049591064453
    9. '	print' → logprob: -21.625049591064453
    10. '#' → logprob: -21.750049591064453

Token 308: 'ichage' (ID: 118475)
  Prédit: 'icher'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'icher' → logprob: -0.3219519257545471
    2. 'iche' → logprob: -1.3219518661499023
    3. 'ichage' → logprob: -5.071951866149902
    4. 'ich' → logprob: -6.946951866149902
    5. '#' → logprob: -7.196951866149902
    6. 'ic' → logprob: -7.946951866149902
    7. '   ' → logprob: -8.196951866149902
    8. 'ichier' → logprob: -12.071951866149902
    9. '```' → logprob: -12.196951866149902
    10. 'iché' → logprob: -12.571951866149902

Token 309: ' du' (ID: 1462)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.25310954451560974
    2. '(ans' → logprob: -1.5031095743179321
    3. '   ' → logprob: -6.878109455108643
    4. ' (' → logprob: -9.7531099319458
    5. '(
' → logprob: -9.7531099319458
    6. '(f' → logprob: -11.3781099319458
    7. '(print' → logprob: -11.3781099319458
    8. '(answer' → logprob: -13.0031099319458
    9. '()' → logprob: -13.0031099319458
    10. 'ans' → logprob: -13.8781099319458

Token 310: ' résultat' (ID: 62556)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.06403246521949768
    2. ' ans' → logprob: -2.814032554626465
    3. '(ans' → logprob: -6.189032554626465
    4. 'answer' → logprob: -12.439032554626465
    5. 'result' → logprob: -12.439032554626465
    6. '	ans' → logprob: -13.814032554626465
    7. ' answer' → logprob: -14.439032554626465
    8. ' result' → logprob: -15.064032554626465
    9. 'print' → logprob: -15.189032554626465
    10. 'anst' → logprob: -15.314032554626465

Token 311: ' final' (ID: 1721)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4084250032901764
    2. 'print' → logprob: -1.158424973487854
    3. '
' → logprob: -4.5334248542785645
    4. ' print' → logprob: -4.6584248542785645
    5. '    
' → logprob: -7.1584248542785645
    6. '(print' → logprob: -9.283425331115723
    7. '()
' → logprob: -9.908425331115723
    8. '  
' → logprob: -10.408425331115723
    9. '(
' → logprob: -10.658425331115723
    10. '(' → logprob: -10.658425331115723

Token 312: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7036893963813782
    2. 'print' → logprob: -0.7036893963813782
    3. ' print' → logprob: -4.7036895751953125
    4. '
' → logprob: -6.7036895751953125
    5. '(print' → logprob: -9.078689575195312
    6. '    
' → logprob: -10.578689575195312
    7. '```' → logprob: -10.578689575195312
    8. '\n' → logprob: -11.953689575195312
    9. '	print' → logprob: -12.078689575195312
    10. '()
' → logprob: -12.453689575195312

Token 313: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.6042346358299255
    2. '   ' → logprob: -1.1042346954345703
    3. ' print' → logprob: -2.1042346954345703
    4. '
' → logprob: -9.35423469543457
    5. '```' → logprob: -11.35423469543457
    6. '    
' → logprob: -12.35423469543457
    7. '	print' → logprob: -14.22923469543457
    8. ' 
' → logprob: -15.60423469543457
    9. '\' → logprob: -16.22923469543457
    10. '  
' → logprob: -16.47923469543457

Token 314: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0007121934904716909
    2. ' print' → logprob: -7.2507123947143555
    3. '   ' → logprob: -13.000712394714355
    4. '```' → logprob: -16.75071144104004
    5. 'pr' → logprob: -22.75071144104004
    6. '	print' → logprob: -22.87571144104004
    7. '`' → logprob: -22.87571144104004
    8. '    
' → logprob: -23.50071144104004
    9. '(print' → logprob: -23.75071144104004
    10. '.print' → logprob: -24.50071144104004

Token 315: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -0.10021605342626572
    2. '(' → logprob: -2.3502161502838135
    3. '()' → logprob: -12.600215911865234
    4. '(
' → logprob: -13.100215911865234
    5. ' (' → logprob: -13.350215911865234
    6. '(answer' → logprob: -14.600215911865234
    7. '('' → logprob: -14.725215911865234
    8. 'ans' → logprob: -14.975215911865234
    9. '(

' → logprob: -15.100215911865234
    10. '(f' → logprob: -15.225215911865234

Token 316: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -2.1008713702030946e-06
    2. ' )' → logprob: -13.375001907348633
    3. ')
' → logprob: -15.250001907348633
    4. '()' → logprob: -16.000001907348633
    5. ')`' → logprob: -16.875001907348633
    6. '())' → logprob: -17.625001907348633
    7. '))' → logprob: -19.000001907348633
    8. '`)' → logprob: -19.500001907348633
    9. ')}' → logprob: -19.625001907348633
    10. '),' → logprob: -19.625001907348633

Token 317: 'if' (ID: 366)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 318: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.023264113813638687
    2. '__' → logprob: -3.773264169692993
    3. '_' → logprob: -11.648263931274414
    4. ' _' → logprob: -12.523263931274414
    5. ' ' → logprob: -12.648263931274414
    6. '_name' → logprob: -13.898263931274414
    7. ' ' → logprob: -13.898263931274414
    8. '  ' → logprob: -14.273263931274414
    9. '___' → logprob: -15.773263931274414
    10. ' name' → logprob: -15.773263931274414

Token 319: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.04729166254401207
    2. ' ==' → logprob: -3.1722917556762695
    3. '==' → logprob: -5.5472917556762695
    4. ' __' → logprob: -8.42229175567627
    5. '=="' → logprob: -8.92229175567627
    6. '=='' → logprob: -11.67229175567627
    7. '[' → logprob: -12.29729175567627
    8. ' =="' → logprob: -12.29729175567627
    9. '__.__' → logprob: -12.67229175567627
    10. '__[' → logprob: -12.67229175567627

Token 320: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -8.65707261255011e-06
    2. '==' → logprob: -11.750008583068848
    3. '__.__' → logprob: -14.875008583068848
    4. ' ==' → logprob: -15.125008583068848
    5. '_' → logprob: -17.625009536743164
    6. '____' → logprob: -18.000009536743164
    7. ' __' → logprob: -18.750009536743164
    8. '=' → logprob: -18.875009536743164
    9. '___' → logprob: -18.875009536743164
    10. 'name' → logprob: -19.000009536743164

Token 321: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.07945136725902557
    2. '==' → logprob: -2.829451322555542
    3. ' ==' → logprob: -4.079451560974121
    4. '=="' → logprob: -7.829451560974121
    5. '=='' → logprob: -12.329451560974121
    6. '__.__' → logprob: -12.579451560974121
    7. '=' → logprob: -13.204451560974121
    8. '"' → logprob: -13.704451560974121
    9. ' =="' → logprob: -14.079451560974121
    10. '_' → logprob: -14.079451560974121

Token 322: ' '__' (ID: 28278)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.018251201137900352
    2. ''' → logprob: -4.018251419067383
    3. ' "__' → logprob: -9.643251419067383
    4. '__' → logprob: -10.268251419067383
    5. ' '__' → logprob: -13.643251419067383
    6. '"name' → logprob: -16.018251419067383
    7. '"user' → logprob: -16.018251419067383
    8. '"_' → logprob: -16.768251419067383
    9. '   ' → logprob: -17.018251419067383
    10. '"class' → logprob: -17.393251419067383

Token 323: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.04875053092837334
    2. '__' → logprob: -3.048750638961792
    3. 'name' → logprob: -8.923750877380371
    4. '_main' → logprob: -10.673750877380371
    5. ''' → logprob: -12.298750877380371
    6. '_' → logprob: -14.548750877380371
    7. '__':
' → logprob: -14.673750877380371
    8. '___' → logprob: -14.923750877380371
    9. ' main' → logprob: -14.923750877380371
    10. '_MAIN' → logprob: -15.548750877380371

Token 324: '__':
' (ID: 39314)
  Prédit: '__':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__':
' → logprob: -0.07889562100172043
    2. '__' → logprob: -2.5788955688476562
    3. '__":
' → logprob: -12.703895568847656
    4. '__:' → logprob: -13.203895568847656
    5. '_' → logprob: -14.078895568847656
    6. '':' → logprob: -16.203895568847656
    7. '__('' → logprob: -17.453895568847656
    8. '___' → logprob: -17.453895568847656
    9. '__
' → logprob: -17.953895568847656
    10. '':
' → logprob: -17.953895568847656

Token 325: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08958827704191208
    2. '    
' → logprob: -3.464588165283203
    3. ' main' → logprob: -3.589588165283203
    4. '	main' → logprob: -4.089588165283203
    5. 'main' → logprob: -5.464588165283203
    6. '<|end|>' → logprob: -6.339588165283203
    7. ' 
' → logprob: -7.464588165283203
    8. '(main' → logprob: -7.464588165283203
    9. '```' → logprob: -7.589588165283203
    10. '  
' → logprob: -7.964588165283203

Token 326: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' (adapté à ' main') → logprob: -5.848420551046729e-05
    2. ' main' → logprob: -9.7500581741333
    3. '	main' → logprob: -16.625059127807617
    4. '   ' → logprob: -18.125059127807617
    5. '_main' → logprob: -21.250059127807617
    6. 'maine' → logprob: -22.625059127807617
    7. '.main' → logprob: -23.375059127807617
    8. '(main' → logprob: -23.375059127807617
    9. 'm' → logprob: -23.750059127807617
    10. 'Main' → logprob: -24.000059127807617

Token 327: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.11131633073091507
    2. '<|end|>' → logprob: -2.611316442489624
    3. '(' → logprob: -3.611316442489624
    4. '```' → logprob: -5.986316204071045
    5. ')' → logprob: -7.361316204071045
    6. '
' → logprob: -8.111316680908203
    7. ':' → logprob: -8.361316680908203
    8. '<|end|>' → logprob: -8.361316680908203
    9. '\' → logprob: -8.736316680908203
    10. '#' → logprob: -8.986316680908203


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 325
Tokens correctement prédits (1ère position, stricte): 98
Tokens correctement prédits (1ère position, avec adaptation): 100
Tokens correctement prédits (top 10): 196
Précision stricte (1ère position): 30.15%
Précision adaptée (1ère position): 30.77%
Précision (top 10): 60.31%
================================================================================
