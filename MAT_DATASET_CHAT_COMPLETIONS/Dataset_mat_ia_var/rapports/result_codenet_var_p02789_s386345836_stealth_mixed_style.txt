================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:28:57
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def main():
    get = lambda: [int(x) for x in input().split()]
    class Checker:
        def __init__(self, a, b): self.a = a; self.b = b
        def is_equal(self): return self.a == self.b
    n, m = get()
    c = Checker(n, m)
    if c.is_equal():
        result = "Yes"
    else:
        result = "No"
    print(result)
main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' main' (ID: 2758)
  → Token d'amorce (pas de prédiction)

Token 2: '():
' (ID: 8595)
  → Token d'amorce (pas de prédiction)

Token 3: '   ' (ID: 271)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\' → logprob: -0.35815900564193726
    2. '(' → logprob: -1.858159065246582
    3. '   ' → logprob: -3.108159065246582
    4. '\n' → logprob: -3.108159065246582
    5. ''' → logprob: -4.608159065246582
    6. ' 
' → logprob: -4.733159065246582
    7. ' ' → logprob: -4.733159065246582
    8. '    
' → logprob: -4.983159065246582
    9. '```' → logprob: -5.483159065246582
    10. ' return' → logprob: -6.358159065246582

Token 4: ' get' (ID: 717)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.20469899475574493
    2. 'pass' → logprob: -2.3296990394592285
    3. '   ' → logprob: -2.8296990394592285
    4. 'return' → logprob: -4.0796990394592285
    5. 'p' → logprob: -5.3296990394592285
    6. '#' → logprob: -6.3296990394592285
    7. 'r' → logprob: -6.4546990394592285
    8. 'a' → logprob: -7.3296990394592285
    9. '```' → logprob: -7.3296990394592285
    10. 'n' → logprob: -8.07969856262207

Token 5: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.3530764579772949
    2. '_input' → logprob: -2.353076457977295
    3. '_data' → logprob: -2.478076457977295
    4. '_user' → logprob: -2.478076457977295
    5. '()' → logprob: -3.728076457977295
    6. '(' → logprob: -5.978076457977295
    7. 'data' → logprob: -6.728076457977295
    8. '_value' → logprob: -6.853076457977295
    9. ' _' → logprob: -6.978076457977295
    10. 's' → logprob: -7.353076457977295

Token 6: ' lambda' (ID: 27871)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.42554771900177
    2. ' input' → logprob: -1.17554771900177
    3. ' ' → logprob: -4.5505475997924805
    4. 'get' → logprob: -4.5505475997924805
    5. '"' → logprob: -5.6755475997924805
    6. ' get' → logprob: -5.9255475997924805
    7. ' open' → logprob: -6.1755475997924805
    8. '   ' → logprob: -7.1755475997924805
    9. 'requests' → logprob: -7.1755475997924805
    10. ' "' → logprob: -7.3005475997924805

Token 7: ':' (ID: 25)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.11831935495138168
    2. ' ' → logprob: -2.243319272994995
    3. ' s' → logprob: -6.243319511413574
    4. '  ' → logprob: -6.243319511413574
    5. '    ' → logprob: -7.368319511413574
    6. 'x' → logprob: -8.118319511413574
    7. '   ' → logprob: -8.868319511413574
    8. ' lambda' → logprob: -9.243319511413574
    9. ' a' → logprob: -9.493319511413574
    10. ' n' → logprob: -9.618319511413574

Token 8: ' [' (ID: 723)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.2987874746322632
    2. 'input' → logprob: -1.6737874746322632
    3. ' int' → logprob: -2.9237875938415527
    4. 'int' → logprob: -4.173787593841553
    5. ' ' → logprob: -6.798787593841553
    6. '__' → logprob: -9.923787117004395
    7. ' list' → logprob: -10.173787117004395
    8. ' __' → logprob: -10.173787117004395
    9. ' map' → logprob: -10.423787117004395
    10. ' eval' → logprob: -10.423787117004395

Token 9: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.04056967422366142
    2. '0' → logprob: -3.66556978225708
    3. 'input' → logprob: -5.29056978225708
    4. ']' → logprob: -6.16556978225708
    5. 'i' → logprob: -6.29056978225708
    6. 'map' → logprob: -6.29056978225708
    7. ' int' → logprob: -6.91556978225708
    8. 'list' → logprob: -7.79056978225708
    9. ']int' → logprob: -8.040569305419922
    10. '(int' → logprob: -8.415569305419922

Token 10: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.6038793921470642
    2. '(input' → logprob: -1.228879451751709
    3. '(i' → logprob: -2.478879451751709
    4. '(' → logprob: -2.603879451751709
    5. '()]' → logprob: -6.978879451751709
    6. 'input' → logprob: -7.228879451751709
    7. '(s' → logprob: -7.353879451751709
    8. '(a' → logprob: -8.22887897491455
    9. ']' → logprob: -8.97887897491455
    10. '(line' → logprob: -10.60387897491455

Token 11: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0010530536528676748
    2. 'for' → logprob: -7.8760528564453125
    3. ')]' → logprob: -8.126052856445312
    4. '(' → logprob: -9.001052856445312
    5. '())' → logprob: -9.626052856445312
    6. ' for' → logprob: -10.001052856445312
    7. '(x' → logprob: -10.251052856445312
    8. ' )' → logprob: -10.501052856445312
    9. ')])' → logprob: -10.751052856445312
    10. 'char' → logprob: -11.751052856445312

Token 12: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.11430048942565918
    2. ' for' → logprob: -2.239300489425659
    3. '()' → logprob: -7.364300727844238
    4. ')' → logprob: -7.489300727844238
    5. '(' → logprob: -8.489300727844238
    6. '(x' → logprob: -10.114300727844238
    7. ']' → logprob: -11.489300727844238
    8. '	for' → logprob: -12.489300727844238
    9. '```' → logprob: -12.489300727844238
    10. '.' → logprob: -12.614300727844238

Token 13: ' x' (ID: 1215)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.014864561147987843
    2. 'input' → logprob: -4.264864444732666
    3. ' x' → logprob: -7.764864444732666
    4. ' raw' → logprob: -9.264864921569824
    5. ' ' → logprob: -9.389864921569824
    6. ' range' → logprob: -10.889864921569824
    7. '_input' → logprob: -11.014864921569824
    8. '_' → logprob: -11.139864921569824
    9. '(input' → logprob: -11.389864921569824
    10. '<|end|>' → logprob: -11.889864921569824

Token 14: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.006313042715191841
    2. 'in' → logprob: -5.256312847137451
    3. 'input' → logprob: -7.131312847137451
    4. ' input' → logprob: -9.00631332397461
    5. ' ' → logprob: -9.38131332397461
    6. 'import' → logprob: -11.50631332397461
    7. '=input' → logprob: -11.50631332397461
    8. ' .' → logprob: -11.88131332397461
    9. '(input' → logprob: -12.00631332397461
    10. '.' → logprob: -12.00631332397461

Token 15: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.25196799635887146
    2. ' input' → logprob: -1.5019680261611938
    3. ' ' → logprob: -10.501968383789062
    4. '(input' → logprob: -12.501968383789062
    5. '   ' → logprob: -13.626968383789062
    6. '<input' → logprob: -14.126968383789062
    7. 'list' → logprob: -14.126968383789062
    8. '  ' → logprob: -14.126968383789062
    9. 'range' → logprob: -14.626968383789062
    10. '	input' → logprob: -14.876968383789062

Token 16: '().' (ID: 1454)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.10689521580934525
    2. '()' → logprob: -2.3568952083587646
    3. '().' → logprob: -5.106895446777344
    4. '())' → logprob: -7.981895446777344
    5. '(' → logprob: -8.606895446777344
    6. '()].' → logprob: -10.231895446777344
    7. '()][' → logprob: -11.231895446777344
    8. '()>' → logprob: -12.356895446777344
    9. '()],' → logprob: -12.481895446777344
    10. '("")' → logprob: -12.481895446777344

Token 17: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0053918189369142056
    2. 'strip' → logprob: -5.255391597747803
    3. 'rstrip' → logprob: -8.755392074584961
    4. ' split' → logprob: -14.880392074584961
    5. 'spl' → logprob: -17.25539207458496
    6. '(split' → logprob: -17.38039207458496
    7. 'plit' → logprob: -18.50539207458496
    8. 'read' → logprob: -19.38039207458496
    9. ' strip' → logprob: -19.88039207458496
    10. 'sp' → logprob: -19.88039207458496

Token 18: '()]
' (ID: 67155)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.00251656211912632
    2. '()' → logprob: -6.502516746520996
    3. '(' → logprob: -7.002516746520996
    4. '())' → logprob: -9.502516746520996
    5. '('' → logprob: -11.252516746520996
    6. ']' → logprob: -11.752516746520996
    7. ')]' → logprob: -13.127516746520996
    8. ']()' → logprob: -13.377516746520996
    9. '()],' → logprob: -13.877516746520996
    10. '()]
' → logprob: -14.377516746520996

Token 19: '   ' (ID: 271)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.2691174745559692
    2. 'data' → logprob: -2.0191173553466797
    3. 'x' → logprob: -2.0191173553466797
    4. '[' → logprob: -2.6441173553466797
    5. 'a' → logprob: -2.6441173553466797
    6. '
' → logprob: -2.6441173553466797
    7. '   ' → logprob: -2.8941173553466797
    8. '\n' → logprob: -3.3941173553466797
    9. 'return' → logprob: -3.6441173553466797
    10. '    
' → logprob: -3.7691173553466797

Token 20: ' class' (ID: 744)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.23936638236045837
    2. 'a' → logprob: -1.7393664121627808
    3. 'x' → logprob: -3.864366292953491
    4. 'r' → logprob: -5.61436653137207
    5. '   ' → logprob: -6.23936653137207
    6. 'i' → logprob: -6.36436653137207
    7. 'data' → logprob: -6.61436653137207
    8. 'nums' → logprob: -6.73936653137207
    9. 'for' → logprob: -6.86436653137207
    10. '[' → logprob: -7.11436653137207

Token 21: ' Checker' (ID: 148392)
  Prédit: ' Solution'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' Solution' → logprob: -0.8073967099189758
    2. ' Segment' → logprob: -2.307396650314331
    3. ' Node' → logprob: -2.682396650314331
    4. ' ' → logprob: -2.807396650314331
    5. ' Counter' → logprob: -3.057396650314331
    6. ' Person' → logprob: -3.432396650314331
    7. ' Tree' → logprob: -3.557396650314331
    8. ' Graph' → logprob: -3.557396650314331
    9. ' Stack' → logprob: -3.557396650314331
    10. ' Solver' → logprob: -3.557396650314331

Token 22: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00019746100588236004
    2. '(' → logprob: -9.125197410583496
    3. ':
' → logprob: -9.750197410583496
    4. ' :' → logprob: -10.875197410583496
    5. '():' → logprob: -12.000197410583496
    6. '(object' → logprob: -13.250197410583496
    7. '):' → logprob: -14.625197410583496
    8. '.' → logprob: -14.625197410583496
    9. ':**' → logprob: -14.750197410583496
    10. '[' → logprob: -14.875197410583496

Token 23: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6652849912643433
    2. '    ' → logprob: -1.7902849912643433
    3. '       ' → logprob: -1.9152849912643433
    4. ' ' → logprob: -2.665285110473633
    5. '_' → logprob: -3.040285110473633
    6. '<|end|>' → logprob: -3.915285110473633
    7. '(' → logprob: -5.165285110473633
    8. '(n' → logprob: -5.165285110473633
    9. 'def' → logprob: -5.290285110473633
    10. '    
' → logprob: -5.790285110473633

Token 24: ' def' (ID: 1056)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' (adapté à ' def') → logprob: -0.5018400549888611
    2. ' def' → logprob: -1.0018401145935059
    3. ' ' → logprob: -4.626840114593506
    4. '       ' → logprob: -5.376840114593506
    5. '    ' → logprob: -5.376840114593506
    6. '        ' → logprob: -5.876840114593506
    7. '__' → logprob: -6.751840114593506
    8. '   ' → logprob: -6.876840114593506
    9. '_' → logprob: -7.376840114593506
    10. 'n' → logprob: -7.501840114593506

Token 25: ' __' (ID: 2516)
  Prédit: ' init'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' init' → logprob: -0.42821261286735535
    2. ' __' → logprob: -1.5532126426696777
    3. 'init' → logprob: -2.0532126426696777
    4. ' check' → logprob: -5.428212642669678
    5. '__' → logprob: -6.178212642669678
    6. ' ' → logprob: -7.178212642669678
    7. ' _' → logprob: -7.928212642669678
    8. ' def' → logprob: -8.67821216583252
    9. '_init' → logprob: -9.17821216583252
    10. '_' → logprob: -9.55321216583252

Token 26: 'init' (ID: 3287)
  Prédit: 'init'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'init' → logprob: -7.584239938296378e-06
    2. 'call' → logprob: -12.750007629394531
    3. 'ini' → logprob: -13.500007629394531
    4. ' init' → logprob: -13.625007629394531
    5. 'eq' → logprob: -13.750007629394531
    6. 'in' → logprob: -15.000007629394531
    7. 'int' → logprob: -15.375007629394531
    8. 'iter' → logprob: -16.00000762939453
    9. 'i' → logprob: -16.00000762939453
    10. 'new' → logprob: -16.25000762939453

Token 27: '__(' (ID: 8241)
  Prédit: '__('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__(' → logprob: -0.11897977441549301
    2. '__' → logprob: -2.2439796924591064
    3. '(' → logprob: -5.3689799308776855
    4. '__(
' → logprob: -7.7439799308776855
    5. '(self' → logprob: -7.8689799308776855
    6. '__((' → logprob: -7.9939799308776855
    7. ' (' → logprob: -9.243979454040527
    8. '_' → logprob: -9.493979454040527
    9. '__('' → logprob: -10.118979454040527
    10. '__(*' → logprob: -10.493979454040527

Token 28: 'self' (ID: 1156)
  Prédit: 'self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' → logprob: -0.08943197131156921
    2. ' self' → logprob: -2.4644320011138916
    3. 's' → logprob: -8.464431762695312
    4. ' ' → logprob: -9.089431762695312
    5. ')' → logprob: -9.339431762695312
    6. ' )' → logprob: -10.339431762695312
    7. '   ' → logprob: -11.839431762695312
    8. ' s' → logprob: -12.089431762695312
    9. '       ' → logprob: -12.214431762695312
    10. ',' → logprob: -12.714431762695312

Token 29: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.01077236607670784
    2. ' ,' → logprob: -4.635772228240967
    3. 'self' → logprob: -7.635772228240967
    4. ',self' → logprob: -7.885772228240967
    5. ')' → logprob: -9.260772705078125
    6. '_,' → logprob: -11.010772705078125
    7. ' ' → logprob: -11.510772705078125
    8. '<|end|>' → logprob: -12.510772705078125
    9. ',s' → logprob: -12.885772705078125
    10. ' self' → logprob: -12.885772705078125

Token 30: ' a' (ID: 261)
  Prédit: ' self'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' self' → logprob: -0.4568946957588196
    2. 'self' → logprob: -1.9568946361541748
    3. ' s' → logprob: -3.206894636154175
    4. ' n' → logprob: -3.331894636154175
    5. 's' → logprob: -3.456894636154175
    6. 'n' → logprob: -3.581894636154175
    7. 'a' → logprob: -3.831894636154175
    8. ' a' → logprob: -3.956894636154175
    9. ' data' → logprob: -4.206894874572754
    10. ' arr' → logprob: -6.019394874572754

Token 31: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.2677253782749176
    2. '):' → logprob: -1.5177253484725952
    3. ' ,' → logprob: -4.892725467681885
    4. ',b' → logprob: -5.892725467681885
    5. ' ):' → logprob: -6.017725467681885
    6. ':' → logprob: -7.142725467681885
    7. ')' → logprob: -7.767725467681885
    8. 'rray' → logprob: -7.892725467681885
    9. ' ' → logprob: -8.267724990844727
    10. '=' → logprob: -8.642724990844727

Token 32: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.39362832903862
    2. 'b' → logprob: -1.1436283588409424
    3. ' ' → logprob: -6.018628120422363
    4. ' n' → logprob: -6.268628120422363
    5. 'n' → logprob: -6.893628120422363
    6. ' m' → logprob: -8.393628120422363
    7. 'm' → logprob: -8.518628120422363
    8. ' l' → logprob: -8.768628120422363
    9. ' s' → logprob: -9.393628120422363
    10. ')' → logprob: -9.456128120422363

Token 33: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.003772769821807742
    2. ',' → logprob: -5.878772735595703
    3. ')' → logprob: -7.003772735595703
    4. ':' → logprob: -10.503772735595703
    5. ' ):' → logprob: -11.503772735595703
    6. '):
' → logprob: -12.128772735595703
    7. '=' → logprob: -12.503772735595703
    8. '   ' → logprob: -12.628772735595703
    9. '       ' → logprob: -13.128772735595703
    10. ' ,' → logprob: -13.753772735595703

Token 34: ' self' (ID: 1051)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 35: '.a' (ID: 8772)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.11461826413869858
    2. '.a' → logprob: -2.2396183013916016
    3. ' .' → logprob: -6.864618301391602
    4. '._' → logprob: -8.114618301391602
    5. '.b' → logprob: -9.364618301391602
    6. '.is' → logprob: -9.614618301391602
    7. '.check' → logprob: -9.739618301391602
    8. 'a' → logprob: -10.614618301391602
    9. ' ' → logprob: -10.864618301391602
    10. '.s' → logprob: -11.239618301391602

Token 36: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.05409838259220123
    2. '=' → logprob: -3.05409836769104
    3. ',' → logprob: -5.554098606109619
    4. ' ' → logprob: -6.929098606109619
    5. ' ,' → logprob: -7.679098606109619
    6. ' ==' → logprob: -9.304098129272461
    7. '.' → logprob: -10.304098129272461
    8. '    ' → logprob: -10.804098129272461
    9. ',a' → logprob: -12.429098129272461
    10. ' <' → logprob: -12.554098129272461

Token 37: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.38687393069267273
    2. ' a' → logprob: -1.1368739604949951
    3. '	a' → logprob: -13.136874198913574
    4. ' ' → logprob: -14.886874198913574
    5. ' ' → logprob: -15.011874198913574
    6. '_a' → logprob: -16.386873245239258
    7. 'а' → logprob: -16.886873245239258
    8. 'b' → logprob: -17.011873245239258
    9. '    ' → logprob: -17.136873245239258
    10. '<|end|>' → logprob: -17.136873245239258

Token 38: ';' (ID: 26)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 39: ' self' (ID: 1051)
  Prédit: ' self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' self' → logprob: -0.34668517112731934
    2. 'self' → logprob: -1.8466851711273193
    3. ' ' → logprob: -2.4716851711273193
    4. '        ' → logprob: -3.3466851711273193
    5. ' ' → logprob: -4.221685409545898
    6. '         ' → logprob: -7.971685409545898
    7. '            ' → logprob: -9.221685409545898
    8. '                ' → logprob: -9.596685409545898
    9. ' 
' → logprob: -10.096685409545898
    10. 'b' → logprob: -10.096685409545898

Token 40: '.b' (ID: 1292)
  Prédit: '.b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.b' → logprob: -0.28169357776641846
    2. '.' → logprob: -1.4066935777664185
    3. ' .' → logprob: -7.906693458557129
    4. '<|end|>' → logprob: -9.281693458557129
    5. 'b' → logprob: -10.531693458557129
    6. '<|end|>' → logprob: -11.781693458557129
    7. '>.' → logprob: -11.906693458557129
    8. '.a' → logprob: -12.156693458557129
    9. ' ' → logprob: -12.406693458557129
    10. ').' → logprob: -12.656693458557129

Token 41: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.04302351549267769
    2. '=' → logprob: -3.1680235862731934
    3. ' ' → logprob: -10.918023109436035
    4. '<|end|>' → logprob: -12.668023109436035
    5. '.' → logprob: -14.293023109436035
    6. '   ' → logprob: -14.668023109436035
    7. ',' → logprob: -14.793023109436035
    8. '    ' → logprob: -15.043023109436035
    9. '<|end|>' → logprob: -15.418023109436035
    10. ')' → logprob: -15.418023109436035

Token 42: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.14268092811107635
    2. ' b' → logprob: -2.0176808834075928
    3. ' ' → logprob: -12.767681121826172
    4. ' ' → logprob: -13.767681121826172
    5. 'a' → logprob: -14.892681121826172
    6. '	b' → logprob: -15.267681121826172
    7. '[' → logprob: -15.580181121826172
    8. '>b' → logprob: -15.642681121826172
    9. '   ' → logprob: -15.830181121826172
    10. '    ' → logprob: -16.080181121826172

Token 43: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.10360140353441238
    2. '<|end|>' → logprob: -2.3536014556884766
    3. '<|end|>' → logprob: -6.728601455688477
    4. '       ' → logprob: -7.478601455688477
    5. 'def' → logprob: -7.728601455688477
    6. '   ' → logprob: -8.603601455688477
    7. '
' → logprob: -8.603601455688477
    8. '    
' → logprob: -9.103601455688477
    9. ' def' → logprob: -9.228601455688477
    10. '' → logprob: -9.478601455688477

Token 44: '       ' (ID: 309)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.12873528897762299
    2. '<|end|>' → logprob: -2.128735303878784
    3. '<|end|>' → logprob: -6.753735065460205
    4. '       ' → logprob: -8.628735542297363
    5. '

' → logprob: -9.753735542297363
    6. '
' → logprob: -9.878735542297363
    7. '    
' → logprob: -9.878735542297363
    8. '   ' → logprob: -10.128735542297363
    9. '  
' → logprob: -10.378735542297363
    10. '        
' → logprob: -10.378735542297363

Token 45: ' def' (ID: 1056)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.032041098922491074
    2. '<|end|>' → logprob: -3.657041072845459
    3. '<|end|>' → logprob: -6.407041072845459
    4. 'def' (adapté à ' def') → logprob: -6.657041072845459
    5. '    
' → logprob: -7.157041072845459
    6. '       ' → logprob: -7.282041072845459
    7. '        
' → logprob: -7.657041072845459
    8. '
' → logprob: -8.907041549682617
    9. ' def' → logprob: -9.032041549682617
    10. '   ' → logprob: -9.282041549682617

Token 46: ' is' (ID: 382)
  Prédit: ' check'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' check' → logprob: -0.15896308422088623
    2. ' __' → logprob: -3.158963203430176
    3. '_' → logprob: -3.408963203430176
    4. ' _' → logprob: -4.033963203430176
    5. ' ' → logprob: -4.158963203430176
    6. '_check' → logprob: -4.408963203430176
    7. 'check' → logprob: -4.908963203430176
    8. ' is' → logprob: -5.033963203430176
    9. '__' → logprob: -5.908963203430176
    10. ' test' → logprob: -6.408963203430176

Token 47: '_equal' (ID: 27882)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -1.278313398361206
    2. '_valid' → logprob: -1.403313398361206
    3. '_pal' → logprob: -2.153313398361206
    4. '_equal' → logprob: -2.653313398361206
    5. '_div' → logprob: -2.778313398361206
    6. '_sorted' → logprob: -3.653313398361206
    7. '_prime' → logprob: -3.778313398361206
    8. '_b' → logprob: -4.028313636779785
    9. '_possible' → logprob: -4.028313636779785
    10. '_sub' → logprob: -4.403313636779785

Token 48: '(self' (ID: 2402)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.43265435099601746
    2. '(self' → logprob: -1.0576543807983398
    3. '()' → logprob: -6.30765438079834
    4. '():' → logprob: -6.93265438079834
    5. '_to' → logprob: -7.80765438079834
    6. '(a' → logprob: -8.30765438079834
    7. ' (' → logprob: -8.80765438079834
    8. ' ' → logprob: -8.93265438079834
    9. ':' → logprob: -9.93265438079834
    10. '((' → logprob: -11.43265438079834

Token 49: '):' (ID: 3127)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0207035131752491
    2. '):' → logprob: -4.020703315734863
    3. ' ,' → logprob: -6.395703315734863
    4. ')' → logprob: -7.645703315734863
    5. ',a' → logprob: -8.145703315734863
    6. ' ):' → logprob: -10.770703315734863
    7. '):
' → logprob: -11.145703315734863
    8. 'a' → logprob: -11.520703315734863
    9. ',b' → logprob: -11.770703315734863
    10. ',e' → logprob: -12.145703315734863

Token 50: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.013538168743252754
    2. 'return' → logprob: -4.513538360595703
    3. ' self' → logprob: -6.263538360595703
    4. '<|end|>' → logprob: -8.638538360595703
    5. '           ' → logprob: -9.138538360595703
    6. ' ' → logprob: -9.138538360595703
    7. '        ' → logprob: -10.138538360595703
    8. 'self' → logprob: -10.138538360595703
    9. ' (' → logprob: -10.263538360595703
    10. '       ' → logprob: -11.263538360595703

Token 51: ' self' (ID: 1051)
  Prédit: ' self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' self' → logprob: -0.07052350789308548
    2. 'self' → logprob: -2.695523500442505
    3. ' ' → logprob: -8.320523262023926
    4. ' abs' → logprob: -8.820523262023926
    5. ' len' → logprob: -9.695523262023926
    6. ' (' → logprob: -10.570523262023926
    7. '   ' → logprob: -10.945523262023926
    8. ' True' → logprob: -11.070523262023926
    9. ' all' → logprob: -11.320523262023926
    10. '(self' → logprob: -11.570523262023926

Token 52: '.a' (ID: 8772)
  Prédit: '.a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.a' → logprob: -0.0016088859410956502
    2. '.' → logprob: -6.501608848571777
    3. '.b' → logprob: -9.626608848571777
    4. ' .' → logprob: -10.626608848571777
    5. 'a' → logprob: -11.251608848571777
    6. '.e' → logprob: -14.501608848571777
    7. ').' → logprob: -15.251608848571777
    8. '.ai' → logprob: -15.251608848571777
    9. '`.' → logprob: -15.626608848571777
    10. '.s' → logprob: -15.876608848571777

Token 53: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.1604427546262741
    2. '==' → logprob: -1.9104427099227905
    3. '=' → logprob: -10.160442352294922
    4. ' ' → logprob: -10.410442352294922
    5. ' *' → logprob: -10.660442352294922
    6. '*' → logprob: -10.910442352294922
    7. '+' → logprob: -11.160442352294922
    8. '.' → logprob: -11.160442352294922
    9. ' !=' → logprob: -11.660442352294922
    10. ' %' → logprob: -11.660442352294922

Token 54: ' self' (ID: 1051)
  Prédit: ' self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' self' → logprob: -0.1602686047554016
    2. 'self' → logprob: -1.9102685451507568
    3. ' ' → logprob: -10.410268783569336
    4. ' ' → logprob: -11.535268783569336
    5. '	self' → logprob: -13.035268783569336
    6. '(self' → logprob: -14.785268783569336
    7. '_self' → logprob: -15.035268783569336
    8. '<|end|>' → logprob: -15.660268783569336
    9. '=self' → logprob: -15.910268783569336
    10. '    ' → logprob: -15.910268783569336

Token 55: '.b' (ID: 1292)
  Prédit: '.b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.b' → logprob: -0.12839050590991974
    2. '.' → logprob: -2.1283905506134033
    3. ' .' → logprob: -6.628390312194824
    4. '<|end|>' → logprob: -9.753390312194824
    5. '​.' → logprob: -11.128390312194824
    6. 'b' → logprob: -11.378390312194824
    7. ' ' → logprob: -11.628390312194824
    8. ').' → logprob: -11.878390312194824
    9. '.​' → logprob: -12.378390312194824

Token 56: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.21565406024456024
    2. '<|end|>' → logprob: -1.7156540155410767
    3. '       ' → logprob: -5.340653896331787
    4. '   ' → logprob: -5.965653896331787
    5. '<|end|>' → logprob: -5.965653896331787
    6. '    
' → logprob: -6.590653896331787
    7. 'newline' → logprob: -7.715653896331787
    8. '\n' → logprob: -7.840653896331787
    9. '

' → logprob: -8.340654373168945
    10. '        
' → logprob: -8.340654373168945

Token 57: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7052939534187317
    2. '<|end|>' → logprob: -0.7052939534187317
    3. '   ' → logprob: -5.330294132232666
    4. '       ' → logprob: -5.580294132232666
    5. '<|end|>' → logprob: -6.205294132232666
    6. '    
' → logprob: -7.705294132232666
    7. '```' → logprob: -8.205293655395508
    8. '#' → logprob: -9.080293655395508
    9. ')' → logprob: -9.455293655395508
    10. '        
' → logprob: -9.830293655395508

Token 58: ' n' (ID: 297)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9646345376968384
    2. '
' → logprob: -1.4646345376968384
    3. '<|end|>' → logprob: -1.4646345376968384
    4. '    
' → logprob: -2.339634418487549
    5. ' ' → logprob: -4.339634418487549
    6. '       ' → logprob: -5.214634418487549
    7. 'newline' → logprob: -5.214634418487549
    8. 'def' → logprob: -5.339634418487549
    9. '  
' → logprob: -5.464634418487549
    10. '' → logprob: -5.839634418487549

Token 59: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.03422807157039642
    2. '=' → logprob: -4.0342278480529785
    3. ' ' → logprob: -4.2842278480529785
    4. ',' → logprob: -7.0342278480529785
    5. '  ' → logprob: -7.4092278480529785
    6. ' ,' → logprob: -8.659228324890137
    7. '   ' → logprob: -9.159228324890137
    8. 'u' → logprob: -9.409228324890137
    9. '_' → logprob: -9.659228324890137
    10. '.' → logprob: -9.909228324890137

Token 60: ' m' (ID: 284)
  Prédit: ' m'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' m' → logprob: -0.25491777062416077
    2. 'm' → logprob: -1.5049177408218384
    3. ' ' → logprob: -6.379917621612549
    4. ' k' → logprob: -8.254918098449707
    5. ' a' → logprob: -8.629918098449707
    6. '<|end|>' → logprob: -8.629918098449707
    7. ' t' → logprob: -8.879918098449707
    8. 'k' → logprob: -9.129918098449707
    9. 'a' → logprob: -9.379918098449707
    10. ' =' → logprob: -9.879918098449707

Token 61: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.026361145079135895
    2. '=' → logprob: -3.6513612270355225
    3. ',' → logprob: -9.776361465454102
    4. '<|end|>' → logprob: -13.651361465454102
    5. ' ' → logprob: -14.026361465454102
    6. ' ,' → logprob: -14.901361465454102
    7. ')' → logprob: -14.901361465454102
    8. '  ' → logprob: -15.151361465454102
    9. ' =
' → logprob: -15.651361465454102
    10. '   ' → logprob: -15.901361465454102

Token 62: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.03811481595039368
    2. 'get' → logprob: -3.2881147861480713
    3. ' ' → logprob: -9.913114547729492
    4. ' map' → logprob: -11.413114547729492
    5. '  ' → logprob: -12.788114547729492
    6. '	get' → logprob: -13.163114547729492
    7. ' g' → logprob: -14.163114547729492
    8. ' getchar' → logprob: -14.163114547729492
    9. '[get' → logprob: -14.163114547729492
    10. '_get' → logprob: -14.413114547729492

Token 63: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -6.2729995988775045e-06
    2. '()
' → logprob: -12.625006675720215
    3. ' ()' → logprob: -13.500006675720215
    4. '(' → logprob: -13.750006675720215
    5. '()]' → logprob: -15.750006675720215
    6. '(),' → logprob: -16.1250057220459
    7. '()

' → logprob: -16.1250057220459
    8. '()`' → logprob: -16.8750057220459
    9. '();' → logprob: -17.0000057220459
    10. '()>' → logprob: -18.1250057220459

Token 64: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 65: ' c' (ID: 274)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.156058430671692
    2. ' a' → logprob: -1.156058430671692
    3. '    
' → logprob: -2.5310583114624023
    4. ' data' → logprob: -3.0310583114624023
    5. '<|end|>' → logprob: -3.1560583114624023
    6. '   ' → logprob: -3.2810583114624023
    7. 'data' → logprob: -4.281058311462402
    8. ' array' → logprob: -4.531058311462402
    9. ' matrix' → logprob: -4.656058311462402
    10. ' items' → logprob: -4.656058311462402

Token 66: ' =' (ID: 314)
  Prédit: 'heck'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'heck' → logprob: -0.14878369867801666
    2. 'h' → logprob: -2.5237836837768555
    3. 'he' → logprob: -3.3987836837768555
    4. ' =' → logprob: -4.1487836837768555
    5. '=' → logprob: -5.7737836837768555
    6. 'hek' → logprob: -7.0237836837768555
    7. 'ount' → logprob: -7.3987836837768555
    8. 'ont' → logprob: -7.6487836837768555
    9. 'o' → logprob: -8.023783683776855
    10. '_' → logprob: -8.273783683776855

Token 67: ' Checker' (ID: 148392)
  Prédit: ' Checker'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Checker' → logprob: -0.03501100838184357
    2. 'Checker' → logprob: -3.535011053085327
    3. ' []' → logprob: -5.785010814666748
    4. ' [' → logprob: -6.410010814666748
    5. ' ' → logprob: -8.535011291503906
    6. ' Check' → logprob: -9.660011291503906
    7. ' input' → logprob: -10.035011291503906
    8. ' checker' → logprob: -10.285011291503906
    9. ' [[' → logprob: -10.535011291503906
    10. ' [[]' → logprob: -10.535011291503906

Token 68: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.080804742872715
    2. '(' → logprob: -2.5808048248291016
    3. '(
' → logprob: -6.955804824829102
    4. ' (' → logprob: -8.455804824829102
    5. '([' → logprob: -8.455804824829102
    6. '((' → logprob: -8.955804824829102
    7. '[n' → logprob: -9.080804824829102
    8. '(m' → logprob: -9.705804824829102
    9. '(a' → logprob: -10.330804824829102
    10. '(int' → logprob: -10.330804824829102

Token 69: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.004268338903784752
    2. ' ,' → logprob: -5.504268169403076
    3. ',m' → logprob: -8.629268646240234
    4. '   ' → logprob: -13.004268646240234
    5. 'm' → logprob: -13.004268646240234
    6. ',n' → logprob: -13.254268646240234
    7. ' ' → logprob: -13.504268646240234
    8. ',
' → logprob: -13.754268646240234
    9. ')' → logprob: -14.129268646240234
    10. '-' → logprob: -14.879268646240234

Token 70: ' m' (ID: 284)
  Prédit: ' m'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' m' → logprob: -0.018167849630117416
    2. 'm' → logprob: -4.018167972564697
    3. ' ' → logprob: -11.518167495727539
    4. ' n' → logprob: -12.268167495727539
    5. ')' → logprob: -13.518167495727539
    6. ' ' → logprob: -13.893167495727539
    7. 'n' → logprob: -14.893167495727539
    8. ' )' → logprob: -15.768167495727539
    9. '    ' → logprob: -16.01816749572754
    10. ')m' → logprob: -16.64316749572754

Token 71: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1472419600977446e-06
    2. ')
' → logprob: -14.125000953674316
    3. ' )' → logprob: -15.250000953674316
    4. '))' → logprob: -17.750001907348633
    5. '   ' → logprob: -18.500001907348633
    6. ')#' → logprob: -18.750001907348633
    7. ')

' → logprob: -19.000001907348633
    8. ')return' → logprob: -19.000001907348633
    9. '<|end|>' → logprob: -19.000001907348633
    10. '),' → logprob: -19.125001907348633

Token 72: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3669871985912323
    2. '<|end|>' → logprob: -1.7419872283935547
    3. '
' → logprob: -2.1169872283935547
    4. '    
' → logprob: -5.116987228393555
    5. '<|end|>' → logprob: -6.741987228393555
    6. 'if' → logprob: -7.491987228393555
    7. 'return' → logprob: -7.491987228393555
    8. '  
' → logprob: -7.616987228393555
    9. 'print' → logprob: -7.866987228393555
    10. ' ' → logprob: -8.116987228393555

Token 73: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9062876105308533
    2. 'print' → logprob: -0.9062876105308533
    3. 'if' (adapté à ' if') → logprob: -1.781287670135498
    4. ' if' → logprob: -4.781287670135498
    5. 'return' → logprob: -5.156287670135498
    6. '    
' → logprob: -5.406287670135498
    7. ' print' → logprob: -6.781287670135498
    8. '
' → logprob: -6.906287670135498
    9. 'c' → logprob: -8.28128719329834
    10. 'n' → logprob: -8.40628719329834

Token 74: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.0004546254931483418
    2. 'c' → logprob: -8.125454902648926
    3. ' ' → logprob: -8.875454902648926
    4. ' ' → logprob: -11.125454902648926
    5. '  ' → logprob: -13.375454902648926
    6. '	c' → logprob: -13.875454902648926
    7. ' not' → logprob: -14.500454902648926
    8. '    ' → logprob: -14.875454902648926
    9. '   ' → logprob: -15.000454902648926
    10. ' n' → logprob: -16.37545394897461

Token 75: '.is' (ID: 3109)
  Prédit: '.is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.is' → logprob: -0.04325494542717934
    2. '.' → logprob: -3.168254852294922
    3. ' .' → logprob: -8.293254852294922
    4. ' ' → logprob: -13.418254852294922
    5. 'is' → logprob: -14.043254852294922
    6. '.isnan' → logprob: -14.168254852294922
    7. '.eql' → logprob: -15.293254852294922
    8. '.i' → logprob: -15.543254852294922
    9. '.isfile' → logprob: -15.793254852294922
    10. '.e' → logprob: -16.168254852294922

Token 76: '_equal' (ID: 27882)
  Prédit: '_equal'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_equal' → logprob: -7.338466093642637e-05
    2. '_e' → logprob: -10.375073432922363
    3. '_equ' → logprob: -10.875073432922363
    4. '_' → logprob: -11.625073432922363
    5. '_eq' → logprob: -11.625073432922363
    6. '_equals' → logprob: -12.500073432922363
    7. '_EQUAL' → logprob: -14.125073432922363
    8. 'equal' → logprob: -14.625073432922363
    9. '__' → logprob: -16.375072479248047
    10. ' _' → logprob: -16.875072479248047

Token 77: '():
' (ID: 8595)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.3132932484149933
    2. '():' → logprob: -1.313293218612671
    3. '():
' → logprob: -11.31329345703125
    4. '()==' → logprob: -12.31329345703125
    5. ' ()' → logprob: -12.81329345703125
    6. '()(' → logprob: -13.06329345703125
    7. '(' → logprob: -13.43829345703125
    8. '()>' → logprob: -13.56329345703125
    9. '().' → logprob: -13.81329345703125
    10. '()`' → logprob: -13.93829345703125

Token 78: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0010438859462738037
    2. ':' → logprob: -8.126044273376465
    3. '   ' → logprob: -8.501044273376465
    4. ' print' → logprob: -8.751044273376465
    5. 'print' → logprob: -9.001044273376465
    6. ' return' → logprob: -9.126044273376465
    7. '\n' → logprob: -10.251044273376465
    8. '        
' → logprob: -10.626044273376465
    9. '    ' → logprob: -11.126044273376465
    10. ':
' → logprob: -11.376044273376465

Token 79: ' result' (ID: 1534)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.1159575879573822
    2. ' print' → logprob: -2.865957498550415
    3. '   ' → logprob: -3.240957498550415
    4. '       ' → logprob: -4.490957736968994
    5. 'return' → logprob: -6.240957736968994
    6. ' return' → logprob: -8.490957260131836
    7. '	print' → logprob: -10.490957260131836
    8. '           ' → logprob: -11.865957260131836
    9. 'pass' → logprob: -12.240957260131836
    10. '    
' → logprob: -12.365957260131836

Token 80: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.07061348110437393
    2. '=' → logprob: -2.695613384246826
    3. ' ' → logprob: -7.820613384246826
    4. '(' → logprob: -9.320613861083984
    5. '()' → logprob: -9.945613861083984
    6. ':' → logprob: -10.320613861083984
    7. ' +=' → logprob: -10.570613861083984
    8. '<|end|>' → logprob: -11.070613861083984
    9. '_' → logprob: -11.570613861083984
    10. '.' → logprob: -11.695613861083984

Token 81: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.5475611090660095
    2. ' "' → logprob: -0.9225611090660095
    3. ' n' → logprob: -4.547561168670654
    4. ' True' → logprob: -4.922561168670654
    5. 'n' → logprob: -6.547561168670654
    6. ''' → logprob: -6.547561168670654
    7. ' '' → logprob: -6.922561168670654
    8. '   ' → logprob: -7.172561168670654
    9. 'True' → logprob: -7.297561168670654
    10. ' ' → logprob: -8.172560691833496

Token 82: 'Yes' (ID: 13022)
  Prédit: 'Equal'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Equal' → logprob: -0.5615872144699097
    2. 'Yes' → logprob: -1.4365872144699097
    3. 'YES' → logprob: -1.9365872144699097
    4. 'equal' → logprob: -4.311587333679199
    5. 'n' → logprob: -4.436587333679199
    6. '"' → logprob: -4.436587333679199
    7. 'yes' → logprob: -6.061587333679199
    8. 'True' → logprob: -6.311587333679199
    9. ' Equal' → logprob: -6.311587333679199
    10. ' equal' → logprob: -6.811587333679199

Token 83: '"
' (ID: 1092)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0016097202897071838
    2. '"
' → logprob: -6.501609802246094
    3. '\n' → logprob: -9.626609802246094
    4. '")' → logprob: -11.251609802246094
    5. '```' → logprob: -12.251609802246094
    6. 'else' → logprob: -12.376609802246094
    7. '"

' → logprob: -12.876609802246094
    8. '"
' → logprob: -12.876609802246094
    9. '!"' → logprob: -13.126609802246094
    10. '"""' → logprob: -13.251609802246094

Token 84: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.037840183824300766
    2. ' else' → logprob: -3.6628401279449463
    3. 'else' → logprob: -4.787840366363525
    4. '<|end|>' → logprob: -6.287840366363525
    5. '
' → logprob: -7.412840366363525
    6. '	else' → logprob: -8.162839889526367
    7. '    
' → logprob: -8.662839889526367
    8. '<|end|>' → logprob: -8.912839889526367
    9. '       ' → logprob: -10.537839889526367
    10. ' ' → logprob: -11.662839889526367

Token 85: ' else' (ID: 1203)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.297919362783432
    2. ' else' → logprob: -1.6729193925857544
    3. 'else' (adapté à ' else') → logprob: -2.672919273376465
    4. '	else' → logprob: -7.297919273376465
    5. '    
' → logprob: -9.047919273376465
    6. '<|end|>' → logprob: -10.172919273376465
    7. ' ' → logprob: -11.172919273376465
    8. '       ' → logprob: -12.297919273376465
    9. '
' → logprob: -12.422919273376465
    10. '  ' → logprob: -12.422919273376465

Token 86: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0024588911328464746
    2. ':
' → logprob: -6.7524590492248535
    3. '       ' → logprob: -6.7524590492248535
    4. '   ' → logprob: -10.002458572387695
    5. ' :' → logprob: -10.127458572387695
    6. '<|end|>' → logprob: -10.877458572387695
    7. '    ' → logprob: -12.002458572387695
    8. '      ' → logprob: -13.627458572387695
    9. ':

' → logprob: -13.627458572387695
    10. '     ' → logprob: -13.627458572387695

Token 87: '       ' (ID: 309)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.7184478640556335
    2. '       ' → logprob: -0.7184478640556335
    3. ' "' → logprob: -3.8434479236602783
    4. '    ' → logprob: -6.843447685241699
    5. '   ' → logprob: -7.093447685241699
    6. ''' → logprob: -7.843447685241699
    7. '        ' → logprob: -8.2184476852417
    8. ' ' → logprob: -8.4684476852417
    9. ' "\' → logprob: -9.0934476852417
    10. '"\' → logprob: -9.0934476852417

Token 88: ' result' (ID: 1534)
  Prédit: ' result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' result' → logprob: -0.09301033616065979
    2. 'result' (adapté à ' result') → logprob: -2.468010425567627
    3. '       ' → logprob: -5.968010425567627
    4. '"' → logprob: -7.343010425567627
    5. '        ' → logprob: -8.093009948730469
    6. '    ' → logprob: -8.468009948730469
    7. ' ' → logprob: -8.843009948730469
    8. ' "' → logprob: -9.218009948730469
    9. ' ' → logprob: -10.343009948730469
    10. '	result' → logprob: -11.093009948730469

Token 89: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.16023924946784973
    2. '=' → logprob: -1.9102392196655273
    3. ' ' → logprob: -11.285239219665527
    4. ' =
' → logprob: -14.160239219665527
    5. ' +=' → logprob: -14.535239219665527
    6. ' =)' → logprob: -14.660239219665527
    7. ')' → logprob: -15.410239219665527
    8. ' ='' → logprob: -16.035240173339844
    9. ' ="' → logprob: -16.160240173339844
    10. '<|end|>' → logprob: -16.410240173339844

Token 90: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0006846757605671883
    2. ' "' → logprob: -7.37568473815918
    3. ''' → logprob: -9.87568473815918
    4. ' ' → logprob: -12.87568473815918
    5. ' ' → logprob: -12.87568473815918
    6. '"No' → logprob: -15.00068473815918
    7. '    ' → logprob: -15.50068473815918
    8. ' 
' → logprob: -15.62568473815918
    9. '"""' → logprob: -15.75068473815918
    10. '""' → logprob: -16.00068473815918

Token 91: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.47470584511756897
    2. '"No' → logprob: -0.9747058153152466
    3. '"' → logprob: -7.474705696105957
    4. ' No' → logprob: -10.349705696105957
    5. '"N' → logprob: -11.099705696105957
    6. ''' → logprob: -12.224705696105957
    7. '“No' → logprob: -12.849705696105957
    8. '   ' → logprob: -13.349705696105957
    9. ' "' → logprob: -13.599705696105957
    10. 'N' → logprob: -13.974705696105957

Token 92: '"
' (ID: 1092)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0013315484393388033
    2. '"
' → logprob: -6.626331329345703
    3. '```' → logprob: -13.376331329345703
    4. '   ' → logprob: -13.501331329345703
    5. '")' → logprob: -13.876331329345703
    6. '"\' → logprob: -15.001331329345703
    7. '"

' → logprob: -15.126331329345703
    8. '"
' → logprob: -15.376331329345703
    9. '"""' → logprob: -15.626331329345703
    10. '"}' → logprob: -15.751331329345703

Token 93: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.011998703703284264
    2. '<|end|>' → logprob: -4.761998653411865
    3. '
' → logprob: -6.386998653411865
    4. '    
' → logprob: -6.636998653411865
    5. 'print' → logprob: -8.761999130249023
    6. '\n' → logprob: -9.636999130249023
    7. '<|end|>' → logprob: -10.386999130249023
    8. '```' → logprob: -10.386999130249023
    9. ')' → logprob: -10.761999130249023
    10. '\' → logprob: -11.386999130249023

Token 94: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0024158458691090345
    2. 'print' (adapté à ' print') → logprob: -6.127415657043457
    3. '    
' → logprob: -9.127415657043457
    4. '
' → logprob: -9.252415657043457
    5. '<|end|>' → logprob: -11.377415657043457
    6. ' print' → logprob: -11.877415657043457
    7. '\n' → logprob: -13.502415657043457
    8. 'return' → logprob: -13.627415657043457
    9. '	print' → logprob: -13.627415657043457
    10. '```' → logprob: -13.752415657043457

Token 95: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.25223565101623535
    2. '(' → logprob: -1.5022356510162354
    3. '("("' → logprob: -8.377235412597656
    4. '()' → logprob: -10.502235412597656
    5. '(f' → logprob: -10.627235412597656
    6. '("' → logprob: -12.127235412597656
    7. '('' → logprob: -12.252235412597656
    8. ' (' → logprob: -12.377235412597656
    9. '("")' → logprob: -12.627235412597656
    10. 'result' → logprob: -13.377235412597656

Token 96: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.320199877838604e-07
    2. ' )' → logprob: -15.375
    3. ')
' → logprob: -16.375
    4. ')`' → logprob: -17.875
    5. '()' → logprob: -18.5
    6. '))' → logprob: -19.75
    7. '`)' → logprob: -20.25
    8. '')' → logprob: -20.25
    9. ')

' → logprob: -20.875
    10. '(' → logprob: -20.875

Token 97: 'main' (ID: 7731)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 98: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.06995410472154617
    2. '(' → logprob: -2.6949541568756104
    3. '()
' → logprob: -12.194953918457031
    4. '(
' → logprob: -12.819953918457031
    5. '```' → logprob: -12.819953918457031
    6. '()`' → logprob: -13.444953918457031
    7. ' ()' → logprob: -14.194953918457031
    8. ')' → logprob: -14.444953918457031
    9. '();' → logprob: -14.694953918457031
    10. '()

' → logprob: -14.694953918457031


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 96
Tokens correctement prédits (1ère position, stricte): 44
Tokens correctement prédits (1ère position, avec adaptation): 45
Tokens correctement prédits (top 10): 82
Précision stricte (1ère position): 45.83%
Précision adaptée (1ère position): 46.88%
Précision (top 10): 85.42%
================================================================================
