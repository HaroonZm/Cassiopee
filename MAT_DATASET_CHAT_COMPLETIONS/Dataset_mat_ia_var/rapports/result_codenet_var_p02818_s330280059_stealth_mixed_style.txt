================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:32:51
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def X():A,B,K=[int(x)for x in input().split()];r=0
 if K<=A:print(A-K,B)
 elif K<=(A+B):print(r,B-(K-A))
 else:
  for _ in [0]:print(0,0)
X()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' X' (ID: 2127)
  → Token d'amorce (pas de prédiction)

Token 2: '():' (ID: 9442)
  → Token d'amorce (pas de prédiction)

Token 3: 'A' (ID: 32)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.015900744125247
    2. '\' → logprob: -4.265900611877441
    3. ' 
' → logprob: -7.390900611877441
    4. '' → logprob: -8.765900611877441
    5. '    
' → logprob: -8.765900611877441
    6. ' \' → logprob: -9.390900611877441
    7. ''\' → logprob: -9.390900611877441
    8. '<|end|>' → logprob: -9.390900611877441
    9. '\x' → logprob: -9.515900611877441
    10. '```' → logprob: -9.515900611877441

Token 4: ',B' (ID: 19853)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.327828049659729
    2. ':' → logprob: -2.5778279304504395
    3. ' ' → logprob: -2.8278279304504395
    4. ' (' → logprob: -3.3278279304504395
    5. '<|end|>' → logprob: -3.5778279304504395
    6. '[' → logprob: -3.7028279304504395
    7. ')' → logprob: -3.8278279304504395
    8. ''' → logprob: -4.9528279304504395
    9. '()' → logprob: -5.4528279304504395
    10. '.' → logprob: -5.5778279304504395

Token 5: ',K' (ID: 107147)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.42259886860847473
    2. ' =' → logprob: -1.5475988388061523
    3. ',' → logprob: -2.0475988388061523
    4. '[' → logprob: -7.047598838806152
    5. ' ' → logprob: -7.172598838806152
    6. '<|end|>' → logprob: -7.672598838806152
    7. ')' → logprob: -8.297598838806152
    8. ' ,' → logprob: -9.047598838806152
    9. '.' → logprob: -9.422598838806152
    10. ',c' → logprob: -9.922598838806152

Token 6: '=[' (ID: 13370)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.534403383731842
    2. ' =' → logprob: -0.909403383731842
    3. ',' → logprob: -4.659403324127197
    4. '[' → logprob: -7.034403324127197
    5. ' ' → logprob: -8.909403800964355
    6. ')' → logprob: -9.159403800964355
    7. '<|end|>' → logprob: -9.159403800964355
    8. ' ,' → logprob: -9.659403800964355
    9. '```' → logprob: -9.909403800964355
    10. '=[]' → logprob: -10.159403800964355

Token 7: 'int' (ID: 491)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.5634307861328125
    2. ']' → logprob: -1.4384307861328125
    3. '1' → logprob: -2.0634307861328125
    4. '[]' → logprob: -3.6884307861328125
    5. 'int' → logprob: -4.1884307861328125
    6. ' ' → logprob: -4.5634307861328125
    7. '[' → logprob: -5.4384307861328125
    8. ']int' → logprob: -5.8134307861328125
    9. '[int' → logprob: -5.8134307861328125
    10. ' ]' → logprob: -6.4384307861328125

Token 8: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.853219211101532
    2. '(i' → logprob: -1.2282192707061768
    3. ']' → logprob: -1.8532192707061768
    4. '(' → logprob: -2.3532192707061768
    5. '()]' → logprob: -3.8532192707061768
    6. '(s' → logprob: -5.728219032287598
    7. '(a' → logprob: -6.728219032287598
    8. '(input' → logprob: -7.478219032287598
    9. '](' → logprob: -8.353219032287598
    10. ',' → logprob: -8.478219032287598

Token 9: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.10375196486711502
    2. '(x' → logprob: -2.8537518978118896
    3. '(i' → logprob: -3.9787518978118896
    4. '(' → logprob: -4.603752136230469
    5. ' for' → logprob: -5.603752136230469
    6. 'for' → logprob: -5.603752136230469
    7. '(c' → logprob: -6.228752136230469
    8. '(s' → logprob: -7.853752136230469
    9. '()' → logprob: -7.978752136230469
    10. '(a' → logprob: -8.228752136230469

Token 10: 'for' (ID: 1938)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.3805214464664459
    2. '(' → logprob: -1.8805214166641235
    3. ' for' → logprob: -2.505521535873413
    4. 'for' → logprob: -3.380521535873413
    5. '(i' → logprob: -3.755521535873413
    6. '(token' → logprob: -5.005521297454834
    7. '(input' → logprob: -5.630521297454834
    8. '(s' → logprob: -6.005521297454834
    9. '(line' → logprob: -6.255521297454834
    10. '(a' → logprob: -6.380521297454834

Token 11: ' x' (ID: 1215)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.03220213204622269
    2. ' x' → logprob: -3.9072022438049316
    3. 'input' → logprob: -4.532202243804932
    4. 'x' → logprob: -7.532202243804932
    5. ' in' → logprob: -9.407201766967773
    6. ' ' → logprob: -9.657201766967773
    7. ' raw' → logprob: -9.782201766967773
    8. '_' → logprob: -10.532201766967773
    9. ' range' → logprob: -10.657201766967773
    10. ' a' → logprob: -11.407201766967773

Token 12: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.05297916755080223
    2. 'in' → logprob: -3.1779792308807373
    3. ' input' → logprob: -5.177978992462158
    4. ' ' → logprob: -6.552978992462158
    5. 'input' → logprob: -6.927978992462158
    6. '(' → logprob: -7.302978992462158
    7. '<|end|>' → logprob: -7.427978992462158
    8. '(input' → logprob: -8.177979469299316
    9. ' (' → logprob: -9.302979469299316
    10. ' x' → logprob: -9.927979469299316

Token 13: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.3868805766105652
    2. 'input' → logprob: -1.13688063621521
    3. '(input' → logprob: -12.261880874633789
    4. '=input' → logprob: -12.761880874633789
    5. ',input' → logprob: -14.261880874633789
    6. '<input' → logprob: -14.761880874633789
    7. '	input' → logprob: -15.261880874633789
    8. ' ' → logprob: -15.761880874633789
    9. ' open' → logprob: -16.13688087463379
    10. '[input' → logprob: -16.38688087463379

Token 14: '().' (ID: 1454)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.024605995044112206
    2. '().' → logprob: -4.274606227874756
    3. '()' → logprob: -4.649606227874756
    4. '(' → logprob: -7.524606227874756
    5. '()].' → logprob: -9.274605751037598
    6. ']' → logprob: -9.649605751037598
    7. '()],' → logprob: -10.274605751037598
    8. '('' → logprob: -10.524605751037598
    9. '())' → logprob: -10.649605751037598
    10. ']()' → logprob: -11.524605751037598

Token 15: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0002835040504578501
    2. 'strip' → logprob: -8.250283241271973
    3. 'rstrip' → logprob: -10.750283241271973
    4. ' split' → logprob: -14.625283241271973
    5. 'read' → logprob: -16.00028419494629
    6. 'spl' → logprob: -16.50028419494629
    7. '(split' → logprob: -17.37528419494629
    8. 's' → logprob: -17.75028419494629
    9. 'replace' → logprob: -19.00028419494629
    10. '.split' → logprob: -19.50028419494629

Token 16: '()' (ID: 416)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.020704442635178566
    2. '(' → logprob: -4.27070426940918
    3. '('' → logprob: -5.89570426940918
    4. '()' → logprob: -6.14570426940918
    5. '())' → logprob: -6.52070426940918
    6. ']' → logprob: -9.89570426940918
    7. ')]' → logprob: -9.89570426940918
    8. '("' → logprob: -11.14570426940918
    9. '()],' → logprob: -11.39570426940918
    10. '(()' → logprob: -12.64570426940918

Token 17: '];' (ID: 11464)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.020500430837273598
    2. ')]' → logprob: -4.145500659942627
    3. '])' → logprob: -6.020500659942627
    4. '],' → logprob: -6.520500659942627
    5. ')' → logprob: -8.770500183105469
    6. ' ]' → logprob: -9.145500183105469
    7. '])]' → logprob: -9.270500183105469
    8. ')])' → logprob: -9.645500183105469
    9. '`]' → logprob: -9.895500183105469
    10. '()]' → logprob: -10.770500183105469

Token 18: 'r' (ID: 81)
  Prédit: 'C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.6724109649658203
    2. 'n' → logprob: -2.1724109649658203
    3. 'r' → logprob: -2.6724109649658203
    4. 'R' → logprob: -2.9224109649658203
    5. 'c' → logprob: -3.4224109649658203
    6. 'a' → logprob: -3.5474109649658203
    7. 's' → logprob: -4.04741096496582
    8. 'S' → logprob: -4.29741096496582
    9. 'd' → logprob: -4.29741096496582
    10. 'D' → logprob: -4.29741096496582

Token 19: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.08440997451543808
    2. 'eturn' → logprob: -3.7094099521636963
    3. 'ange' → logprob: -4.209410190582275
    4. 'a' → logprob: -4.209410190582275
    5. '=a' → logprob: -4.959410190582275
    6. ' =' → logprob: -5.209410190582275
    7. '=r' → logprob: -5.334410190582275
    8. 'e' → logprob: -6.084410190582275
    9. 'es' → logprob: -6.459410190582275
    10. '=[]' → logprob: -6.834410190582275

Token 20: '0' (ID: 15)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.7770918011665344
    2. '0' → logprob: -1.2770917415618896
    3. 'range' → logprob: -2.2770917415618896
    4. 'K' → logprob: -3.2770917415618896
    5. 'max' → logprob: -3.4020917415618896
    6. '[]' → logprob: -3.6520917415618896
    7. 'min' → logprob: -3.7770917415618896
    8. '1' → logprob: -4.902091979980469
    9. ' A' → logprob: -5.402091979980469
    10. '[A' → logprob: -5.527091979980469

Token 21: '
' (ID: 198)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.9077826738357544
    2. 'for' → logprob: -1.6577826738357544
    3. '' → logprob: -2.032782554626465
    4. '
' → logprob: -2.282782554626465
    5. '<|end|>' → logprob: -2.407782554626465
    6. ';' → logprob: -3.032782554626465
    7. ' ' → logprob: -4.657782554626465
    8. '\n' → logprob: -4.782782554626465
    9. ';if' → logprob: -6.532782554626465
    10. 'r' → logprob: -6.657782554626465

Token 22: ' if' (ID: 538)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.4846998155117035
    2. ' for' → logprob: -1.1096998453140259
    3. 'for' → logprob: -3.3596997261047363
    4. '<|end|>' → logprob: -4.609699726104736
    5. '\n' → logprob: -5.984699726104736
    6. ';' → logprob: -6.234699726104736
    7. '```' → logprob: -6.234699726104736
    8. '' → logprob: -6.609699726104736
    9. '
' → logprob: -7.484699726104736
    10. '	for' → logprob: -8.109700202941895

Token 23: ' K' (ID: 658)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.45036113262176514
    2. 'A' → logprob: -1.7003611326217651
    3. ' K' → logprob: -1.9503611326217651
    4. 'K' → logprob: -3.3253612518310547
    5. ' B' → logprob: -7.450361251831055
    6. ' r' → logprob: -7.575361251831055
    7. 'r' → logprob: -7.950361251831055
    8. 'B' → logprob: -8.700361251831055
    9. ' ' → logprob: -9.450361251831055
    10. ' not' → logprob: -9.700361251831055

Token 24: '<=' (ID: 16672)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.31577610969543457
    2. ' >' → logprob: -1.3157761096954346
    3. '==' → logprob: -7.3157758712768555
    4. ' ' → logprob: -7.6907758712768555
    5. '<' → logprob: -7.9407758712768555
    6. '<=' → logprob: -8.440775871276855
    7. ' <=' → logprob: -9.065775871276855
    8. ' <' → logprob: -9.065775871276855
    9. ' ==' → logprob: -9.065775871276855
    10. ':' → logprob: -9.065775871276855

Token 25: 'A' (ID: 32)
  Prédit: 'A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.2438577264547348
    2. '0' → logprob: -2.1188576221466064
    3. ' A' → logprob: -3.3688576221466064
    4. 'B' → logprob: -3.8688576221466064
    5. ' ' → logprob: -3.9938576221466064
    6. 'min' → logprob: -4.6188578605651855
    7. '1' → logprob: -4.7438578605651855
    8. ' B' → logprob: -6.6188578605651855
    9. ' min' → logprob: -7.1188578605651855
    10. 'r' → logprob: -7.2438578605651855

Token 26: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.02196265198290348
    2. ' :' → logprob: -3.8969626426696777
    3. ':r' → logprob: -7.271962642669678
    4. ':
' → logprob: -8.396963119506836
    5. '+:' → logprob: -9.021963119506836
    6. ':return' → logprob: -9.146963119506836
    7. '+' → logprob: -9.396963119506836
    8. ' and' → logprob: -9.521963119506836
    9. ' r' → logprob: -10.271963119506836
    10. ' :
' → logprob: -11.396963119506836

Token 27: 'print' (ID: 1598)
  Prédit: ' r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' r' → logprob: -0.1846654713153839
    2. 'r' → logprob: -2.0596654415130615
    3. ' ' → logprob: -3.6846654415130615
    4. '
' → logprob: -5.434665679931641
    5. ' 
' → logprob: -5.934665679931641
    6. '    ' → logprob: -5.934665679931641
    7. '\n' → logprob: -6.684665679931641
    8. '   ' → logprob: -7.184665679931641
    9. '	r' → logprob: -7.309665679931641
    10. ' return' → logprob: -7.684665679931641

Token 28: '(A' (ID: 10706)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5499036908149719
    2. '(A' → logprob: -1.2999036312103271
    3. '(K' → logprob: -2.174903631210327
    4. ' (' → logprob: -4.549903869628906
    5. '(r' → logprob: -4.924903869628906
    6. '('' → logprob: -5.049903869628906
    7. '(B' → logprob: -5.424903869628906
    8. '0' → logprob: -5.924903869628906
    9. '("' → logprob: -6.174903869628906
    10. '()' → logprob: -6.799903869628906

Token 29: '-K' (ID: 12249)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.06876292079687119
    2. '-K' → logprob: -2.943763017654419
    3. ' )' → logprob: -5.31876277923584
    4. '-' → logprob: -5.56876277923584
    5. ');' → logprob: -6.56876277923584
    6. '-k' → logprob: -6.94376277923584
    7. '+' → logprob: -7.19376277923584
    8. ')return' → logprob: -7.81876277923584
    9. '-)' → logprob: -8.56876277923584
    10. '-B' → logprob: -8.56876277923584

Token 30: ',B' (ID: 19853)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.010529992170631886
    2. ');' → logprob: -5.3855299949646
    3. ' )' → logprob: -5.6355299949646
    4. ')
' → logprob: -6.3855299949646
    5. '+' → logprob: -9.260529518127441
    6. ')return' → logprob: -9.385529518127441
    7. ' );' → logprob: -9.760529518127441
    8. '*' → logprob: -10.010529518127441
    9. ' ' → logprob: -10.010529518127441
    10. ';' → logprob: -10.385529518127441

Token 31: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0014737951569259167
    2. ')
' → logprob: -7.376473903656006
    3. ');' → logprob: -8.001473426818848
    4. ' )' → logprob: -8.251473426818848
    5. '-' → logprob: -10.001473426818848
    6. '-K' → logprob: -10.376473426818848
    7. ',' → logprob: -10.626473426818848
    8. ' else' → logprob: -10.751473426818848
    9. 'else' → logprob: -11.126473426818848
    10. ')return' → logprob: -11.251473426818848

Token 32: ' elif' (ID: 9497)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.5039348006248474
    2. ' else' → logprob: -1.2539348602294922
    3. '<|end|>' → logprob: -2.628934860229492
    4. '
' → logprob: -4.378934860229492
    5. 'elif' → logprob: -4.753934860229492
    6. '\n' → logprob: -5.003934860229492
    7. '	else' → logprob: -6.003934860229492
    8. ';' → logprob: -6.128934860229492
    9. '```' → logprob: -6.378934860229492
    10. ' elif' → logprob: -6.628934860229492

Token 33: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.03263917192816734
    2. 'K' → logprob: -3.907639265060425
    3. ' B' → logprob: -4.907639026641846
    4. ' A' → logprob: -5.657639026641846
    5. ' ' → logprob: -7.407639026641846
    6. 'B' → logprob: -8.282639503479004
    7. 'A' → logprob: -8.907639503479004
    8. ' r' → logprob: -9.907639503479004
    9. ' (' → logprob: -11.345139503479004
    10. 'r' → logprob: -11.345139503479004

Token 34: '<' (ID: 27)
  Prédit: '<='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<=' → logprob: -0.18215584754943848
    2. '>' → logprob: -2.1821558475494385
    3. ' <=' → logprob: -3.4321558475494385
    4. '<' → logprob: -4.682155609130859
    5. ' >' → logprob: -5.182155609130859
    6. '>=' → logprob: -6.182155609130859
    7. ' <' → logprob: -6.557155609130859
    8. '<K' → logprob: -7.182155609130859
    9. '>K' → logprob: -7.182155609130859
    10. '>B' → logprob: -8.18215560913086

Token 35: '=(' (ID: 9893)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.45405587553977966
    2. 'A' → logprob: -1.079055905342102
    3. '=A' → logprob: -4.2040557861328125
    4. '=' → logprob: -5.4540557861328125
    5. ' B' → logprob: -6.0790557861328125
    6. 'B' → logprob: -6.4540557861328125
    7. ' ' → logprob: -7.4540557861328125
    8. '+A' → logprob: -8.204055786132812
    9. ' =' → logprob: -8.829055786132812
    10. '<=' → logprob: -8.829055786132812

Token 36: 'A' (ID: 32)
  Prédit: 'A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.3486672043800354
    2. ' A' → logprob: -1.2236671447753906
    3. 'B' → logprob: -8.72366714477539
    4. ' B' → logprob: -10.34866714477539
    5. ' ' → logprob: -11.09866714477539
    6. '	A' → logprob: -12.09866714477539
    7. 'a' → logprob: -13.34866714477539
    8. ' ' → logprob: -13.78616714477539
    9. ')' → logprob: -14.53616714477539
    10. '>A' → logprob: -14.59866714477539

Token 37: '+B' (ID: 185895)
  Prédit: '+B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+B' → logprob: -0.5805012583732605
    2. '+' → logprob: -0.8305012583732605
    3. ' +' → logprob: -6.330501079559326
    4. '+:' → logprob: -6.455501079559326
    5. '+)' → logprob: -7.455501079559326
    6. '+C' → logprob: -8.330501556396484
    7. '+
' → logprob: -9.205501556396484
    8. ')+' → logprob: -9.580501556396484
    9. '+

' → logprob: -10.080501556396484
    10. '+A' → logprob: -10.205501556396484

Token 38: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.08174289762973785
    2. ' ):' → logprob: -2.581743001937866
    3. ':' → logprob: -6.081742763519287
    4. ' :' → logprob: -8.831743240356445
    5. ')' → logprob: -9.206743240356445
    6. '-' → logprob: -9.456743240356445
    7. '):
' → logprob: -9.706743240356445
    8. ' )' → logprob: -10.081743240356445
    9. ' ):
' → logprob: -10.206743240356445
    10. ' -' → logprob: -10.956743240356445

Token 39: 'print' (ID: 1598)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7498618364334106
    2. ' ,' → logprob: -1.2498618364334106
    3. ' print' → logprob: -1.9998618364334106
    4. 'print' → logprob: -2.499861717224121
    5. ' ' → logprob: -4.749861717224121
    6. '.print' → logprob: -5.499861717224121
    7. '   ' → logprob: -6.499861717224121
    8. ' r' → logprob: -6.874861717224121
    9. ',r' → logprob: -6.874861717224121
    10. '    ' → logprob: -7.124861717224121

Token 40: '(r' (ID: 4729)
  Prédit: '(A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.1140170693397522
    2. '(' → logprob: -2.2390170097351074
    3. ' (' → logprob: -7.614017009735107
    4. '((' → logprob: -8.739017486572266
    5. '0' → logprob: -8.864017486572266
    6. 'A' → logprob: -8.864017486572266
    7. '(K' → logprob: -8.989017486572266
    8. '(B' → logprob: -9.239017486572266
    9. ' ' → logprob: -11.364017486572266
    10. '(-' → logprob: -12.364017486572266

Token 41: ',B' (ID: 19853)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.4411167502403259
    2. ',A' → logprob: -1.5661168098449707
    3. ',K' → logprob: -2.8161168098449707
    4. ' ,' → logprob: -3.3161168098449707
    5. ',B' → logprob: -3.5661168098449707
    6. 'A' → logprob: -5.316116809844971
    7. '0' → logprob: -5.941116809844971
    8. ' ' → logprob: -6.066116809844971
    9. ',r' → logprob: -6.191116809844971
    10. ')' → logprob: -6.566116809844971

Token 42: '-(' (ID: 18825)
  Prédit: '-A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-A' → logprob: -0.38404420018196106
    2. '-' → logprob: -1.7590441703796387
    3. '-K' → logprob: -2.3840441703796387
    4. ' -' → logprob: -3.3840441703796387
    5. '-B' → logprob: -4.134044170379639
    6. '-)' → logprob: -7.009044170379639
    7. '-C' → logprob: -7.634044170379639
    8. '-r' → logprob: -7.759044170379639
    9. '-(' → logprob: -8.009044647216797
    10. ')' → logprob: -8.134044647216797

Token 43: 'K' (ID: 42)
  Prédit: 'K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.002213180996477604
    2. ' K' → logprob: -6.127213001251221
    3. '(K' → logprob: -10.752213478088379
    4. ' (' → logprob: -12.627213478088379
    5. 'k' → logprob: -13.252213478088379
    6. '>K' → logprob: -15.002213478088379
    7. '	K' → logprob: -15.127213478088379
    8. ')' → logprob: -16.002212524414062
    9. '   ' → logprob: -16.127212524414062
    10. 'r' → logprob: -16.252212524414062

Token 44: '-A' (ID: 9406)
  Prédit: ' -'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.5766223073005676
    2. '-A' → logprob: -0.8266223073005676
    3. '-' → logprob: -7.326622486114502
    4. ')' → logprob: -11.576622009277344
    5. '-)' → logprob: -12.451622009277344
    6. '-a' → logprob: -12.576622009277344
    7. 'A' → logprob: -13.451622009277344
    8. '))' → logprob: -13.451622009277344
    9. ' )' → logprob: -13.576622009277344
    10. ')-' → logprob: -13.951622009277344

Token 45: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.02307075820863247
    2. ')' → logprob: -3.898070812225342
    3. '))
' → logprob: -6.273070812225342
    4. ' ))' → logprob: -7.773070812225342
    5. '),' → logprob: -9.273070335388184
    6. ' )' → logprob: -9.773070335388184
    7. '))

' → logprob: -10.898070335388184
    8. ')
' → logprob: -11.273070335388184
    9. ')))' → logprob: -11.398070335388184
    10. ' ))
' → logprob: -11.648070335388184

Token 46: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.4769941568374634
    2. ' else' → logprob: -1.1019941568374634
    3. '<|end|>' → logprob: -3.726994037628174
    4. ':' → logprob: -3.976994037628174
    5. ')' → logprob: -6.601994037628174
    6. '```' → logprob: -6.976994037628174
    7. 'elif' → logprob: -7.351994037628174
    8. '...' → logprob: -8.101994514465332
    9. '\n' → logprob: -8.476994514465332
    10. ' elif' → logprob: -9.101994514465332

Token 47: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.08800438046455383
    2. ' :' → logprob: -2.5880043506622314
    3. ' :
' → logprob: -5.3380045890808105
    4. ':
' → logprob: -6.3380045890808105
    5. ' print' → logprob: -6.9630045890808105
    6. 'print' → logprob: -7.7130045890808105
    7. ' r' → logprob: -7.8380045890808105
    8. ' ' → logprob: -8.713004112243652
    9. ' :
' → logprob: -8.838004112243652
    10. ':r' → logprob: -8.838004112243652

Token 48: ' ' (ID: 220)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.5746427178382874
    2. 'print' → logprob: -1.1996426582336426
    3. ' r' → logprob: -2.1996426582336426
    4. 'r' → logprob: -4.199642658233643
    5. ' 
' → logprob: -5.574642658233643
    6. ' ' → logprob: -5.824642658233643
    7. '\n' → logprob: -6.574642658233643
    8. '0' → logprob: -8.1996431350708
    9. ' ' → logprob: -8.4496431350708
    10. '```' → logprob: -8.8246431350708

Token 49: ' for' (ID: 395)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.39222198724746704
    2. ' print' → logprob: -1.2672219276428223
    3. ' r' → logprob: -3.7672219276428223
    4. 'r' → logprob: -4.142221927642822
    5. ' ' → logprob: -6.392221927642822
    6. ' 
' → logprob: -7.142221927642822
    7. '\n' → logprob: -7.267221927642822
    8. '```' → logprob: -9.39222240447998
    9. '``' → logprob: -9.51722240447998
    10. '  
' → logprob: -9.64222240447998

Token 50: ' _' (ID: 1175)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.09023819118738174
    2. 'i' → logprob: -2.965238094329834
    3. ' r' → logprob: -4.340238094329834
    4. ' _' → logprob: -5.215238094329834
    5. ' x' → logprob: -5.840238094329834
    6. 'r' → logprob: -5.965238094329834
    7. '_' → logprob: -6.090238094329834
    8. ' B' → logprob: -6.340238094329834
    9. ' k' → logprob: -6.590238094329834
    10. ' K' → logprob: -6.715238094329834

Token 51: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.023985743522644043
    2. 'in' → logprob: -3.7739858627319336
    3. ' ' → logprob: -7.773985862731934
    4. '_' → logprob: -8.648985862731934
    5. 'range' → logprob: -10.148985862731934
    6. ' _' → logprob: -10.398985862731934
    7. ' range' → logprob: -11.461485862731934
    8. '  ' → logprob: -11.523985862731934
    9. ',' → logprob: -12.398985862731934
    10. 's' → logprob: -12.773985862731934

Token 52: ' [' (ID: 723)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.5764261484146118
    2. 'range' → logprob: -0.8264261484146118
    3. '_' → logprob: -7.826426029205322
    4. 'r' → logprob: -11.07642650604248
    5. 'rang' → logprob: -11.32642650604248
    6. ' ' → logprob: -11.57642650604248
    7. ' ran' → logprob: -11.70142650604248
    8. ' _' → logprob: -11.82642650604248
    9. '[' → logprob: -12.20142650604248
    10. '0' → logprob: -12.20142650604248

Token 53: '0' (ID: 15)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.6266441345214844
    2. ' range' → logprob: -1.0016441345214844
    3. '0' → logprob: -2.3766441345214844
    4. ' ' → logprob: -5.626644134521484
    5. '1' → logprob: -7.501644134521484
    6. '[' → logprob: -7.501644134521484
    7. '_' → logprob: -8.126644134521484
    8. '...' → logprob: -8.126644134521484
    9. '-' → logprob: -10.126644134521484
    10. '[]' → logprob: -10.626644134521484

Token 54: ']:' (ID: 12433)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' in' → logprob: -1.1419355869293213
    2. ',' → logprob: -1.6419355869293213
    3. ' ' → logprob: -1.6419355869293213
    4. 'in' → logprob: -1.8919355869293213
    5. ']' → logprob: -3.1419355869293213
    6. 'range' → logprob: -3.1419355869293213
    7. ']*' → logprob: -4.516935348510742
    8. '..' → logprob: -4.641935348510742
    9. ' ]' → logprob: -4.891935348510742
    10. ' range' → logprob: -5.266935348510742

Token 55: 'print' (ID: 1598)
  Prédit: ' r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' r' → logprob: -0.5840650796890259
    2. 'r' → logprob: -1.2090650796890259
    3. ' K' → logprob: -2.8340649604797363
    4. ' A' → logprob: -3.4590649604797363
    5. ' if' → logprob: -4.834064960479736
    6. ' B' → logprob: -4.834064960479736
    7. 'K' → logprob: -4.834064960479736
    8. 'A' → logprob: -4.959064960479736
    9. ' ' → logprob: -5.084064960479736
    10. ' print' → logprob: -5.334064960479736

Token 56: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.452079713344574
    2. '(A' → logprob: -1.4520797729492188
    3. '(B' → logprob: -3.0770797729492188
    4. '(r' → logprob: -3.2020797729492188
    5. '((' → logprob: -3.7020797729492188
    6. '('' → logprob: -4.952079772949219
    7. '(K' → logprob: -5.452079772949219
    8. ' (' → logprob: -6.077079772949219
    9. '("' → logprob: -6.952079772949219
    10. '(f' → logprob: -7.202079772949219

Token 57: '0' (ID: 15)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.6705278158187866
    2. '0' → logprob: -1.5455278158187866
    3. 'B' → logprob: -1.7955278158187866
    4. 'r' → logprob: -2.545527935028076
    5. ' A' → logprob: -4.795527935028076
    6. ' ' → logprob: -4.795527935028076
    7. ' B' → logprob: -6.170527935028076
    8. 'K' → logprob: -6.170527935028076
    9. '"' → logprob: -6.670527935028076
    10. '(A' → logprob: -6.670527935028076

Token 58: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.35646864771842957
    2. ',B' → logprob: -1.231468677520752
    3. ' ,' → logprob: -4.856468677520752
    4. ' ' → logprob: -9.606468200683594
    5. ',K' → logprob: -9.731468200683594
    6. ',b' → logprob: -9.981468200683594
    7. ')' → logprob: -11.856468200683594
    8. ',

' → logprob: -12.481468200683594
    9. ',
' → logprob: -12.606468200683594
    10. ',A' → logprob: -12.731468200683594

Token 59: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.08081717044115067
    2. 'B' → logprob: -2.955817222595215
    3. ' ' → logprob: -3.830817222595215
    4. ' B' → logprob: -5.580817222595215
    5. ')' → logprob: -9.705817222595215
    6. 'max' → logprob: -10.705817222595215
    7. ' max' → logprob: -11.080817222595215
    8. '  ' → logprob: -11.830817222595215
    9. 'K' → logprob: -11.955817222595215
    10. 'r' → logprob: -12.455817222595215

Token 60: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00020807012333534658
    2. ' )' → logprob: -8.500207901000977
    3. '`)' → logprob: -13.625207901000977
    4. ')
' → logprob: -13.625207901000977
    5. '))' → logprob: -14.000207901000977
    6. ' ' → logprob: -15.375207901000977
    7. '```' → logprob: -15.875207901000977
    8. ')#' → logprob: -16.000207901000977
    9. ')`' → logprob: -16.000207901000977
    10. '<|end|>' → logprob: -16.125207901000977

Token 61: 'X' (ID: 55)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 62: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0006035494152456522
    2. '(' → logprob: -7.500603675842285
    3. '()
' → logprob: -10.750603675842285
    4. '`()' → logprob: -11.750603675842285
    5. ' ()' → logprob: -12.250603675842285
    6. '()`' → logprob: -12.750603675842285
    7. '```' → logprob: -12.750603675842285
    8. '();' → logprob: -13.250603675842285
    9. '()

' → logprob: -13.250603675842285
    10. '()(' → logprob: -13.625603675842285


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 60
Tokens correctement prédits (1ère position, stricte): 18
Tokens correctement prédits (1ère position, avec adaptation): 18
Tokens correctement prédits (top 10): 45
Précision stricte (1ère position): 30.00%
Précision adaptée (1ère position): 30.00%
Précision (top 10): 75.00%
================================================================================
