================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:06:38
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
if n == 1:
    print('Hello World')
else:
    a = int(input())
    b = int(input())
    print(a + b)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0004278083215467632
    2. ''' → logprob: -8.625428199768066
    3. '('' → logprob: -9.375428199768066
    4. '(n' → logprob: -9.875428199768066
    5. '```' → logprob: -10.375428199768066
    6. '`' → logprob: -10.750428199768066
    7. '("("' → logprob: -11.125428199768066
    8. '(
' → logprob: -11.125428199768066
    9. ')' → logprob: -11.750428199768066
    10. '()' → logprob: -12.250428199768066

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.11869344860315323
    2. ')' → logprob: -2.2436933517456055
    3. '()' → logprob: -5.3686933517456055
    4. '())' → logprob: -7.4936933517456055
    5. '(
' → logprob: -8.243693351745605
    6. '```' → logprob: -9.993693351745605
    7. '(

' → logprob: -10.368693351745605
    8. '('' → logprob: -10.493693351745605
    9. ''' → logprob: -10.618693351745605
    10. '(n' → logprob: -10.868693351745605

Token 5: 'if' (ID: 366)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.8081278204917908
    2. 'if' → logprob: -1.4331278800964355
    3. 'for' → logprob: -1.9331278800964355
    4. 's' → logprob: -2.3081278800964355
    5. 'f' → logprob: -4.0581278800964355
    6. 'x' → logprob: -4.4331278800964355
    7. 'a' → logprob: -5.0581278800964355
    8. ' ' → logprob: -5.3081278800964355
    9. '\n' → logprob: -5.6831278800964355
    10. '`' → logprob: -5.6831278800964355

Token 6: ' n' (ID: 297)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3156430721282959
    2. ' n' → logprob: -1.315643072128296
    3. 'n' → logprob: -6.190643310546875
    4. ''' → logprob: -8.940643310546875
    5. '  ' → logprob: -9.315643310546875
    6. '"' → logprob: -10.690643310546875
    7. ' not' → logprob: -10.815643310546875
    8. ' )' → logprob: -11.440643310546875
    9. ' ' → logprob: -11.565643310546875
    10. ' (' → logprob: -11.940643310546875

Token 7: ' ==' (ID: 951)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.11459413170814514
    2. ' ' → logprob: -2.9895942211151123
    3. '>' → logprob: -3.7395942211151123
    4. ' <' → logprob: -4.239593982696533
    5. ' >=' → logprob: -4.614593982696533
    6. ' ==' → logprob: -5.739593982696533
    7. ' %' → logprob: -5.864593982696533
    8. ' <=' → logprob: -6.739593982696533
    9. '<' → logprob: -7.239593982696533
    10. '%' → logprob: -7.739593982696533

Token 8: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.08697222918272018
    2. '0' → logprob: -2.586972236633301
    3. '1' → logprob: -4.836972236633301
    4. '2' → logprob: -10.3369722366333
    5. '3' → logprob: -10.7119722366333
    6. ' ' → logprob: -11.2119722366333
    7. '<|end|>' → logprob: -11.4619722366333
    8. ')' → logprob: -11.8369722366333
    9. '10' → logprob: -12.0869722366333
    10. '4' → logprob: -12.2119722366333

Token 9: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.015529107302427292
    2. '1' → logprob: -4.390529155731201
    3. ' ' → logprob: -5.890529155731201
    4. '10' → logprob: -9.390528678894043
    5. '5' → logprob: -9.515528678894043
    6. '3' → logprob: -10.515528678894043
    7. '2' → logprob: -10.765528678894043
    8. '42' → logprob: -10.765528678894043
    9. '4' → logprob: -11.640528678894043
    10. ''' → logprob: -12.015528678894043

Token 10: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -2.339278580620885e-06
    2. ':**' → logprob: -13.750001907348633
    3. '':'' → logprob: -15.375001907348633
    4. ':
' → logprob: -15.375001907348633
    5. ' :' → logprob: -15.500001907348633
    6. '':' → logprob: -16.000001907348633
    7. '():' → logprob: -16.500001907348633
    8. '):' → logprob: -16.500001907348633
    9. ':return' → logprob: -16.500001907348633
    10. '>:' → logprob: -16.875001907348633

Token 11: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4812878370285034
    2. '\n' → logprob: -1.3562878370285034
    3. ' print' → logprob: -2.981287956237793
    4. '\' → logprob: -3.481287956237793
    5. '    ' → logprob: -4.106287956237793
    6. 'print' → logprob: -4.106287956237793
    7. '    
' → logprob: -5.356287956237793
    8. ' 
' → logprob: -6.481287956237793
    9. ' ' → logprob: -6.606287956237793
    10. ' \' → logprob: -7.606287956237793

Token 12: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.03651917353272438
    2. 'print' (adapté à ' print') → logprob: -3.4115192890167236
    3. ' pass' → logprob: -6.4115190505981445
    4. '   ' → logprob: -7.0365190505981445
    5. '    ' → logprob: -8.536519050598145
    6. ' ' → logprob: -10.036519050598145
    7. 'pass' → logprob: -10.161519050598145
    8. ' continue' → logprob: -11.286519050598145
    9. ' \' → logprob: -11.411519050598145
    10. ''' → logprob: -11.411519050598145

Token 13: '('' (ID: 706)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.001433097175322473
    2. '('' → logprob: -7.0014328956604
    3. '("' → logprob: -8.001433372497559
    4. '("("' → logprob: -9.251433372497559
    5. '()' → logprob: -9.501433372497559
    6. '("")' → logprob: -12.376433372497559
    7. '(True' → logprob: -12.376433372497559
    8. '(n' → logprob: -12.626433372497559
    9. '("""' → logprob: -14.126433372497559
    10. '(False' → logprob: -14.251433372497559

Token 14: 'Hello' (ID: 13225)
  Prédit: 'Hello'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Hello' → logprob: -0.4142885208129883
    2. '1' → logprob: -1.4142885208129883
    3. 'a' → logprob: -3.7892885208129883
    4. '0' → logprob: -3.9142885208129883
    5. 'Yes' → logprob: -4.289288520812988
    6. 'hello' → logprob: -4.664288520812988
    7. 'YES' → logprob: -5.414288520812988
    8. 'A' → logprob: -5.789288520812988
    9. 'H' → logprob: -6.039288520812988
    10. '*' → logprob: -6.164288520812988

Token 15: ' World' (ID: 5922)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.010053779929876328
    2. ')' → logprob: -5.135053634643555
    3. '!' → logprob: -5.510053634643555
    4. ' ')' → logprob: -10.885053634643555
    5. '')
' → logprob: -11.635053634643555
    6. '")' → logprob: -11.885053634643555
    7. ' World' → logprob: -11.885053634643555
    8. ''' → logprob: -12.010053634643555
    9. ',' → logprob: -12.135053634643555
    10. 'World' → logprob: -12.260053634643555

Token 16: '')
' (ID: 2515)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.0005526751047000289
    2. '!' → logprob: -7.875552654266357
    3. ')' → logprob: -9.500553131103516
    4. '')
' → logprob: -9.500553131103516
    5. ''' → logprob: -11.000553131103516
    6. '')
' → logprob: -12.500553131103516
    7. '")' → logprob: -13.750553131103516
    8. '')

' → logprob: -14.375553131103516
    9. '!)' → logprob: -15.875553131103516
    10. '('' → logprob: -15.875553131103516

Token 17: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.006129883229732513
    2. 'elif' → logprob: -5.506129741668701
    3. ' else' → logprob: -6.256129741668701
    4. '```' → logprob: -9.50613021850586
    5. '    
' → logprob: -10.63113021850586
    6. '\n' → logprob: -12.00613021850586
    7. '#else' → logprob: -12.13113021850586
    8. '
' → logprob: -12.50613021850586
    9. ')' → logprob: -12.63113021850586
    10. '_else' → logprob: -12.75613021850586

Token 18: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -1.0280383548888494e-06
    2. ' :' → logprob: -14.625000953674316
    3. ':**' → logprob: -15.000000953674316
    4. '():' → logprob: -16.750001907348633
    5. '):' → logprob: -17.375001907348633
    6. ':return' → logprob: -17.625001907348633
    7. '```' → logprob: -17.750001907348633
    8. ':def' → logprob: -17.875001907348633
    9. '':' → logprob: -18.000001907348633
    10. '   ' → logprob: -18.125001907348633

Token 19: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.946905791759491
    2. '    ' → logprob: -1.3219058513641357
    3. '```' → logprob: -2.4469058513641357
    4. '    
' → logprob: -2.6969058513641357
    5. ' print' → logprob: -2.6969058513641357
    6. '\n' → logprob: -3.1969058513641357
    7. 'print' → logprob: -3.5719058513641357
    8. '     
' → logprob: -3.6969058513641357
    9. '<|end|>' → logprob: -4.446905612945557
    10. ' 
' → logprob: -5.321905612945557

Token 20: ' a' (ID: 261)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.7122102379798889
    2. '    ' → logprob: -1.2122101783752441
    3. '   ' → logprob: -2.087210178375244
    4. 'sum' → logprob: -4.087210178375244
    5. 'for' → logprob: -4.337210178375244
    6. ' print' → logprob: -4.337210178375244
    7. '```' → logprob: -4.337210178375244
    8. ' for' → logprob: -4.712210178375244
    9. ' ' → logprob: -5.087210178375244
    10. ' sum' → logprob: -5.337210178375244

Token 21: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5105342864990234
    2. '=' → logprob: -1.6355342864990234
    3. ',b' → logprob: -1.7605342864990234
    4. ',' → logprob: -4.635534286499023
    5. '=int' → logprob: -4.760534286499023
    6. 'b' → logprob: -5.760534286499023
    7. '+b' → logprob: -6.135534286499023
    8. ' ' → logprob: -6.760534286499023
    9. '+=' → logprob: -6.885534286499023
    10. '   ' → logprob: -6.885534286499023

Token 22: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.18573488295078278
    2. ' int' → logprob: -1.9357348680496216
    3. '[int' → logprob: -4.685734748840332
    4. 'list' → logprob: -5.935734748840332
    5. 'n' → logprob: -6.185734748840332
    6. '[]' → logprob: -6.435734748840332
    7. ' n' → logprob: -6.435734748840332
    8. ' list' → logprob: -6.560734748840332
    9. 'sum' → logprob: -6.560734748840332
    10. '0' → logprob: -7.310734748840332

Token 23: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.06197956204414368
    2. '(' → logprob: -2.8119795322418213
    3. '()' → logprob: -11.936979293823242
    4. 'input' → logprob: -12.686979293823242
    5. '('' → logprob: -14.436979293823242
    6. '(in' → logprob: -14.686979293823242
    7. ' (' → logprob: -15.061979293823242
    8. ' input' → logprob: -15.311979293823242
    9. '(inp' → logprob: -15.561979293823242
    10. '(user' → logprob: -16.061979293823242

Token 24: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.20179063081741333
    2. '()' → logprob: -1.7017905712127686
    3. ')' → logprob: -8.076790809631348
    4. '(' → logprob: -10.576790809631348
    5. '()
' → logprob: -11.076790809631348
    6. '())
' → logprob: -11.576790809631348
    7. '()))' → logprob: -11.951790809631348
    8. '();)' → logprob: -12.576790809631348
    9. ' ())' → logprob: -13.451790809631348
    10. '()

' → logprob: -14.201790809631348

Token 25: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01644909754395485
    2. '\n' → logprob: -5.391448974609375
    3. '
' → logprob: -6.141448974609375
    4. '    
' → logprob: -6.266448974609375
    5. '<|end|>' → logprob: -6.266448974609375
    6. '    ' → logprob: -6.641448974609375
    7. 'print' → logprob: -6.641448974609375
    8. ' if' → logprob: -7.516448974609375
    9. ' ' → logprob: -7.516448974609375
    10. '```' → logprob: -7.766448974609375

Token 26: ' b' (ID: 287)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.004365914035588503
    2. 'b' (adapté à ' b') → logprob: -5.754365921020508
    3. '   ' → logprob: -7.504365921020508
    4. ' print' → logprob: -8.004365921020508
    5. 's' → logprob: -8.629365921020508
    6. '    ' → logprob: -10.129365921020508
    7. 'if' → logprob: -10.254365921020508
    8. 'c' → logprob: -10.879365921020508
    9. '+' → logprob: -11.879365921020508
    10. ' ' → logprob: -12.254365921020508

Token 27: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.20517060160636902
    2. ' ' → logprob: -2.3301706314086914
    3. '=' → logprob: -2.7051706314086914
    4. ')' → logprob: -4.455170631408691
    5. '<|end|>' → logprob: -5.205170631408691
    6. ' ==' → logprob: -6.955170631408691
    7. ' )' → logprob: -7.080170631408691
    8. ' >' → logprob: -7.080170631408691
    9. '<|end|>' → logprob: -8.080170631408691
    10. '.' → logprob: -8.205170631408691

Token 28: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.03816060721874237
    2. 'int' → logprob: -3.288160562515259
    3. ' a' → logprob: -9.53816032409668
    4. ' input' → logprob: -10.78816032409668
    5. 'a' → logprob: -11.28816032409668
    6. ' ' → logprob: -11.91316032409668
    7. 'input' → logprob: -13.41316032409668
    8. '[int' → logprob: -13.41316032409668
    9. '=int' → logprob: -13.78816032409668
    10. '<int' → logprob: -13.91316032409668

Token 29: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.000943980470765382
    2. '(' → logprob: -7.250944137573242
    3. '()' → logprob: -8.500944137573242
    4. ' (' → logprob: -11.000944137573242
    5. 'input' → logprob: -12.875944137573242
    6. ')' → logprob: -13.000944137573242
    7. '=input' → logprob: -13.000944137573242
    8. '(a' → logprob: -13.125944137573242
    9. '[input' → logprob: -13.375944137573242
    10. '('' → logprob: -13.875944137573242

Token 30: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.33430981636047363
    2. ')' → logprob: -1.8343098163604736
    3. '()' → logprob: -2.0843098163604736
    4. '())
' → logprob: -11.334309577941895
    5. '')' → logprob: -11.584309577941895
    6. ' ())' → logprob: -11.584309577941895
    7. '(' → logprob: -12.209309577941895
    8. '`)' → logprob: -12.709309577941895
    9. '()
' → logprob: -12.834309577941895
    10. '")' → logprob: -13.209309577941895

Token 31: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10771898180246353
    2. '\n' → logprob: -3.4827189445495605
    3. '    
' → logprob: -3.4827189445495605
    4. 'print' → logprob: -3.7327189445495605
    5. '<|end|>' → logprob: -4.9827189445495605
    6. '    ' → logprob: -5.9827189445495605
    7. '
' → logprob: -5.9827189445495605
    8. '  
' → logprob: -7.2327189445495605
    9. '```' → logprob: -7.2327189445495605
    10. ' print' → logprob: -7.4827189445495605

Token 32: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0070794252678751945
    2. '   ' → logprob: -5.882079601287842
    3. 'if' → logprob: -5.882079601287842
    4. ' print' → logprob: -7.382079601287842
    5. '    
' → logprob: -8.507079124450684
    6. 'c' → logprob: -8.632079124450684
    7. ' if' → logprob: -8.882079124450684
    8. '\n' → logprob: -9.257079124450684
    9. '
' → logprob: -10.007079124450684
    10. '  
' → logprob: -10.632079124450684

Token 33: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.16060884296894073
    2. '(' → logprob: -1.9106088876724243
    3. '('' → logprob: -7.910608768463135
    4. '((' → logprob: -12.160609245300293
    5. '(n' → logprob: -12.410609245300293
    6. '(max' → logprob: -13.160609245300293
    7. '("' → logprob: -13.285609245300293
    8. '()' → logprob: -13.660609245300293
    9. '(s' → logprob: -14.160609245300293
    10. 'a' → logprob: -14.285609245300293

Token 34: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.18143704533576965
    2. ' +' → logprob: -1.8064370155334473
    3. '+b' → logprob: -6.681437015533447
    4. ')' → logprob: -8.056437492370605
    5. ' ' → logprob: -10.056437492370605
    6. '+)' → logprob: -10.431437492370605
    7. ' )' → logprob: -10.931437492370605
    8. '*' → logprob: -11.431437492370605
    9. ' ,' → logprob: -11.681437492370605
    10. '+B' → logprob: -13.306437492370605

Token 35: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.386880099773407
    2. 'b' → logprob: -1.1368801593780518
    3. ' ' → logprob: -12.136879920959473
    4. ')' → logprob: -13.136879920959473
    5. '    ' → logprob: -14.011879920959473
    6. ')b' → logprob: -14.886879920959473
    7. '   ' → logprob: -15.511879920959473
    8. '	b' → logprob: -15.761879920959473
    9. ' )' → logprob: -16.51188087463379
    10. '  ' → logprob: -16.63688087463379

Token 36: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.512236498361744e-07
    2. '')' → logprob: -15.000000953674316
    3. '))' → logprob: -16.125
    4. ' )' → logprob: -16.125
    5. '`)' → logprob: -18.125
    6. ')`' → logprob: -18.75
    7. ')
' → logprob: -18.875
    8. '}' → logprob: -19.0
    9. '")' → logprob: -19.125
    10. '```' → logprob: -19.625


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 34
Tokens correctement prédits (1ère position, stricte): 16
Tokens correctement prédits (1ère position, avec adaptation): 17
Tokens correctement prédits (top 10): 30
Précision stricte (1ère position): 47.06%
Précision adaptée (1ère position): 50.00%
Précision (top 10): 88.24%
================================================================================
