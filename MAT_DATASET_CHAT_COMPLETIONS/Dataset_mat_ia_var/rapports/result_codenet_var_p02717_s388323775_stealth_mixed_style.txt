================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:18:53
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def swapper(vals):
    # Valeurs par référence (puisque liste mutables)
    tmp = vals.pop()
    vals.insert(0, tmp)
    return vals

xyz = list(input().split())
swapped = swapper(xyz)
for i in range(len(swapped)):
    swapped[i] = str(swapped[i])
print(*swapped)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' swap' (ID: 25489)
  → Token d'amorce (pas de prédiction)

Token 2: 'per' (ID: 543)
  → Token d'amorce (pas de prédiction)

Token 3: '(vals' (ID: 167053)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003104154020547867
    2. '():' → logprob: -6.378104209899902
    3. '_' → logprob: -6.878104209899902
    4. '(:' → logprob: -9.378104209899902
    5. ' (' → logprob: -9.503104209899902
    6. '```' → logprob: -9.878104209899902
    7. '()' → logprob: -10.753104209899902
    8. ':' → logprob: -10.878104209899902
    9. '(a' → logprob: -11.003104209899902
    10. '(_:' → logprob: -11.128104209899902

Token 4: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.29874733090400696
    2. ')' → logprob: -1.9237473011016846
    3. '[' → logprob: -2.2987473011016846
    4. ',' → logprob: -4.548747539520264
    5. ':' → logprob: -8.048747062683105
    6. '```' → logprob: -8.923747062683105
    7. '):
' → logprob: -9.173747062683105
    8. '[]):' → logprob: -9.298747062683105
    9. '(' → logprob: -9.798747062683105
    10. '[:,' → logprob: -9.923747062683105

Token 5: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.3093341886997223
    2. '   ' → logprob: -1.4343341588974
    3. '```' → logprob: -4.4343342781066895
    4. '    
' → logprob: -5.5593342781066895
    5. '[:]' → logprob: -6.0593342781066895
    6. '\' → logprob: -6.1843342781066895
    7. '(' → logprob: -6.9343342781066895
    8. ''' → logprob: -6.9343342781066895
    9. '    ' → logprob: -7.1843342781066895
    10. ':return' → logprob: -7.1843342781066895

Token 6: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.17219388484954834
    2. '```' → logprob: -2.797194004058838
    3. '[' → logprob: -3.422194004058838
    4. '\' → logprob: -4.047194004058838
    5. '\t' → logprob: -4.297194004058838
    6. '\n' → logprob: -4.797194004058838
    7. '    ' → logprob: -5.172194004058838
    8. '       ' → logprob: -5.672194004058838
    9. ' ' → logprob: -5.672194004058838
    10. '`' → logprob: -6.297194004058838

Token 7: ' Vale' (ID: 55242)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.051512598991394
    2. ' ' → logprob: -1.426512598991394
    3. ' return' → logprob: -2.8015127182006836
    4. ' vals' → logprob: -2.9265127182006836
    5. ' pass' → logprob: -3.0515127182006836
    6. 's' → logprob: -3.0515127182006836
    7. '    ' → logprob: -3.3015127182006836
    8. 'return' → logprob: -3.9265127182006836
    9. ' if' → logprob: -4.176512718200684
    10. 'n' → logprob: -4.301512718200684

Token 8: 'urs' (ID: 1628)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -1.138776421546936
    2. 'u' → logprob: -1.388776421546936
    3. 'y' → logprob: -2.2637763023376465
    4. 'ue' → logprob: -2.7637763023376465
    5. 'ys' → logprob: -2.7637763023376465
    6. 'r' → logprob: -3.0137763023376465
    7. '   ' → logprob: -3.1387763023376465
    8. 'us' → logprob: -3.1387763023376465
    9. 'ues' → logprob: -3.1387763023376465
    10. ' ' → logprob: -4.2637763023376465

Token 9: ' par' (ID: 686)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.425187349319458
    2. '[' → logprob: -1.425187349319458
    3. '=' → logprob: -2.675187349319458
    4. ' ' → logprob: -4.175187110900879
    5. '   ' → logprob: -4.800187110900879
    6. '[:]' → logprob: -5.050187110900879
    7. '_' → logprob: -5.800187110900879
    8. ',' → logprob: -6.550187110900879
    9. ')' → logprob: -7.675187110900879
    10. '```' → logprob: -7.800187110900879

Token 10: ' référence' (ID: 76252)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.6272763013839722
    2. '=' → logprob: -1.2522763013839722
    3. 's' → logprob: -3.6272764205932617
    4. '[:]' → logprob: -4.127276420593262
    5. ' for' → logprob: -4.377276420593262
    6. ' i' → logprob: -4.377276420593262
    7. 'def' → logprob: -4.377276420593262
    8. '[]' → logprob: -4.502276420593262
    9. ' def' → logprob: -5.002276420593262
    10. 'd' → logprob: -5.002276420593262

Token 11: ' (' (ID: 350)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7781824469566345
    2. '\' → logprob: -1.7781825065612793
    3. ' :' → logprob: -3.1531825065612793
    4. ' ' → logprob: -3.1531825065612793
    5. ':' → logprob: -3.4031825065612793
    6. '\n' → logprob: -3.4031825065612793
    7. '   
' → logprob: -3.5281825065612793
    8. '[' → logprob: -3.6531825065612793
    9. '```' → logprob: -4.028182506561279
    10. '    ' → logprob: -4.028182506561279

Token 12: 'p' (ID: 79)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.40923672914505005
    2. ' )' → logprob: -1.1592366695404053
    3. '   ' → logprob: -5.034236907958984
    4. '):' → logprob: -5.159236907958984
    5. ',' → logprob: -5.909236907958984
    6. ' pass' → logprob: -6.034236907958984
    7. ' ):' → logprob: -6.534236907958984
    8. ' ' → logprob: -7.284236907958984
    9. 'def' → logprob: -7.659236907958984
    10. ' ,' → logprob: -8.159236907958984

Token 13: 'uis' (ID: 4560)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.06854087859392166
    2. ' )' → logprob: -4.193541049957275
    3. '[:]' → logprob: -4.318541049957275
    4. '):' → logprob: -4.693541049957275
    5. '=' → logprob: -4.693541049957275
    6. ' =' → logprob: -4.818541049957275
    7. ',' → logprob: -6.693541049957275
    8. '[' → logprob: -6.818541049957275
    9. 'r' → logprob: -6.943541049957275
    10. ':' → logprob: -7.068541049957275

Token 14: 'que' (ID: 1126)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.6500777006149292
    2. 'def' → logprob: -1.9000777006149292
    3. 's' → logprob: -2.6500778198242188
    4. 'val' → logprob: -3.2750778198242188
    5. '```' → logprob: -3.4000778198242188
    6. ')' → logprob: -3.6500778198242188
    7. 'e' → logprob: -3.7750778198242188
    8. '#' → logprob: -4.150077819824219
    9. 'return' → logprob: -4.400077819824219
    10. '`' → logprob: -4.400077819824219

Token 15: ' liste' (ID: 31719)
  Prédit: ' vals'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' vals' → logprob: -0.4350759983062744
    2. 'vals' → logprob: -1.6850759983062744
    3. ' les' → logprob: -2.8100759983062744
    4. ' Python' → logprob: -3.6850759983062744
    5. ' mutable' → logprob: -3.9350759983062744
    6. ')' → logprob: -4.685075759887695
    7. ' list' → logprob: -4.810075759887695
    8. ' python' → logprob: -5.060075759887695
    9. ' the' → logprob: -5.310075759887695
    10. '[]' → logprob: -5.935075759887695

Token 16: ' mut' (ID: 6505)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02098814770579338
    2. '   ' → logprob: -5.1459879875183105
    3. '):' → logprob: -5.2709879875183105
    4. '[' → logprob: -5.6459879875183105
    5. ' )' → logprob: -5.8959879875183105
    6. '[:]' → logprob: -7.0209879875183105
    7. ')
' → logprob: -7.2709879875183105
    8. 's' → logprob: -8.145988464355469
    9. '):
' → logprob: -8.270988464355469
    10. ',' → logprob: -8.520988464355469

Token 17: 'ables' (ID: 3232)
  Prédit: 'able'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'able' → logprob: -0.08670895546674728
    2. 'e' → logprob: -2.9617090225219727
    3. 'ables' → logprob: -3.5867090225219727
    4. 'a' → logprob: -6.336709022521973
    5. 'ée' → logprob: -7.461709022521973
    6. 'abl' → logprob: -8.086709022521973
    7. 'ées' → logprob: -8.336709022521973
    8. 'ab' → logprob: -8.336709022521973
    9. 'é' → logprob: -9.086709022521973
    10. 'er' → logprob: -9.211709022521973

Token 18: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.004593772813677788
    2. ' )' → logprob: -6.254593849182129
    3. '):' → logprob: -6.504593849182129
    4. ',' → logprob: -8.254593849182129
    5. ')
' → logprob: -8.254593849182129
    6. '   ' → logprob: -8.379593849182129
    7. 's' → logprob: -9.129593849182129
    8. '[' → logprob: -9.379593849182129
    9. '')' → logprob: -9.879593849182129
    10. ' ' → logprob: -10.129593849182129

Token 19: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03299805149435997
    2. '    
' → logprob: -4.407998085021973
    3. '```' → logprob: -5.532998085021973
    4. '    ' → logprob: -5.657998085021973
    5. '     
' → logprob: -6.032998085021973
    6. '
' → logprob: -6.157998085021973
    7. '\n' → logprob: -6.407998085021973
    8. '[' → logprob: -6.532998085021973
    9. '   
' → logprob: -6.907998085021973
    10. ' ' → logprob: -7.157998085021973

Token 20: ' tmp' (ID: 8919)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07598094642162323
    2. '[' → logprob: -3.8259809017181396
    3. ' vals' → logprob: -4.075981140136719
    4. ',' → logprob: -4.325981140136719
    5. 'vals' → logprob: -5.325981140136719
    6. '    
' → logprob: -5.700981140136719
    7. '```' → logprob: -5.700981140136719
    8. ' if' → logprob: -6.325981140136719
    9. ' ' → logprob: -6.325981140136719
    10. '    ' → logprob: -7.325981140136719

Token 21: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.014727369882166386
    2. '=' → logprob: -4.264727592468262
    3. ' ' → logprob: -7.764727592468262
    4. '_' → logprob: -10.139727592468262
    5. ',' → logprob: -10.514727592468262
    6. ')' → logprob: -10.514727592468262
    7. '  ' → logprob: -11.139727592468262
    8. '[' → logprob: -12.014727592468262
    9. '   ' → logprob: -12.014727592468262
    10. 's' → logprob: -12.139727592468262

Token 22: ' vals' (ID: 58985)
  Prédit: ' vals'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' vals' → logprob: -0.008632057346403599
    2. 'vals' → logprob: -4.758632183074951
    3. ' val' → logprob: -11.633631706237793
    4. '(vals' → logprob: -12.508631706237793
    5. ' ' → logprob: -13.258631706237793
    6. '_vals' → logprob: -13.633631706237793
    7. 'val' → logprob: -13.758631706237793
    8. ' values' → logprob: -14.383631706237793
    9. ' vall' → logprob: -16.00863265991211
    10. 'Vals' → logprob: -17.13363265991211

Token 23: '.pop' (ID: 15746)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -6.988221684878226e-06
    2. ' [' → logprob: -12.750006675720215
    3. '\[' → logprob: -13.750006675720215
    4. '[
' → logprob: -14.000006675720215
    5. ' ' → logprob: -14.375006675720215
    6. '[:]' → logprob: -14.500006675720215
    7. '```' → logprob: -14.625006675720215
    8. '   ' → logprob: -16.00000762939453
    9. '0' → logprob: -16.75000762939453
    10. '[-' → logprob: -17.00000762939453

Token 24: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0015931803500279784
    2. '()' → logprob: -6.876593112945557
    3. '(-' → logprob: -7.501593112945557
    4. '(
' → logprob: -13.001593589782715
    5. '0' → logprob: -13.251593589782715
    6. '(

' → logprob: -13.501593589782715
    7. '(len' → logprob: -14.001593589782715
    8. ' (' → logprob: -14.251593589782715
    9. '((' → logprob: -15.251593589782715
    10. '([' → logprob: -16.1265926361084

Token 25: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.5935524702072144
    2. 'vals' → logprob: -1.5935524702072144
    3. '   ' → logprob: -2.093552589416504
    4. ')' → logprob: -2.343552589416504
    5. '\' → logprob: -2.343552589416504
    6. '(vals' → logprob: -2.843552589416504
    7. ' vals' → logprob: -3.093552589416504
    8. ' ' → logprob: -3.343552589416504
    9. '  
' → logprob: -3.718552589416504
    10. '    
' → logprob: -4.218552589416504

Token 26: ' vals' (ID: 58985)
  Prédit: 'vals'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vals' (adapté à ' vals') → logprob: -0.18625441193580627
    2. ' vals' → logprob: -2.9362545013427734
    3. ')' → logprob: -3.3112545013427734
    4. '(vals' → logprob: -3.8112545013427734
    5. '   ' → logprob: -4.186254501342773
    6. '_vals' → logprob: -4.811254501342773
    7. '\n' → logprob: -5.186254501342773
    8. ')
' → logprob: -5.311254501342773
    9. '    
' → logprob: -5.561254501342773
    10. '  
' → logprob: -6.061254501342773

Token 27: '.insert' (ID: 13222)
  Prédit: '.append'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.3507070243358612
    2. '.' → logprob: -1.2257070541381836
    3. '.insert' → logprob: -6.725707054138184
    4. '[' → logprob: -7.600707054138184
    5. ' .' → logprob: -8.100707054138184
    6. '.extend' → logprob: -9.350707054138184
    7. '.pop' → logprob: -9.725707054138184
    8. '.push' → logprob: -10.225707054138184
    9. '.add' → logprob: -10.850707054138184
    10. '.Append' → logprob: -11.975707054138184

Token 28: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0017462196992710233
    2. '(-' → logprob: -6.37674617767334
    3. '(len' → logprob: -10.37674617767334
    4. '0' → logprob: -12.00174617767334
    5. '(
' → logprob: -12.25174617767334
    6. '(

' → logprob: -13.50174617767334
    7. ' (' → logprob: -15.62674617767334
    8. '()' → logprob: -16.876747131347656
    9. '((' → logprob: -17.001747131347656
    10. ')' → logprob: -17.376747131347656

Token 29: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.02809731662273407
    2. '-' → logprob: -3.77809739112854
    3. '1' → logprob: -5.778097152709961
    4. ' ' → logprob: -6.903097152709961
    5. ' -' → logprob: -7.778097152709961
    6. 'len' → logprob: -8.903097152709961
    7. '2' → logprob: -9.278097152709961
    8. ')' → logprob: -10.028097152709961
    9. '   ' → logprob: -11.778097152709961
    10. '(' → logprob: -11.840597152709961

Token 30: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.007067112717777491
    2. ',tmp' → logprob: -5.0070672035217285
    3. '(tmp' → logprob: -8.25706672668457
    4. ' ,' → logprob: -9.63206672668457
    5. '(' → logprob: -11.00706672668457
    6. ',t' → logprob: -12.00706672668457
    7. ')' → logprob: -13.13206672668457
    8. 'tmp' → logprob: -15.00706672668457
    9. ',val' → logprob: -15.00706672668457
    10. '[tmp' → logprob: -15.13206672668457

Token 31: ' tmp' (ID: 8919)
  Prédit: 'tmp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tmp' → logprob: -0.12692958116531372
    2. ' tmp' → logprob: -2.126929521560669
    3. '(tmp' → logprob: -14.50192928314209
    4. '/tmp' → logprob: -14.87692928314209
    5. '	tmp' → logprob: -15.25192928314209
    6. '$tmp' → logprob: -15.50192928314209
    7. '[tmp' → logprob: -16.501930236816406
    8. 'temp' → logprob: -17.251930236816406
    9. 'tm' → logprob: -17.251930236816406
    10. ' ' → logprob: -17.376930236816406

Token 32: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.696889623621246e-06
    2. ')
' → logprob: -13.12500286102295
    3. ' )' → logprob: -14.50000286102295
    4. '   ' → logprob: -16.500001907348633
    5. ')return' → logprob: -17.000001907348633
    6. '`)' → logprob: -17.625001907348633
    7. '')' → logprob: -17.750001907348633
    8. '))' → logprob: -17.750001907348633
    9. ')

' → logprob: -18.250001907348633
    10. ')#' → logprob: -18.250001907348633

Token 33: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 34: ' return' (ID: 622)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.9901126027107239
    2. '<|end|>' → logprob: -1.240112543106079
    3. '
' → logprob: -1.990112543106079
    4. ')' → logprob: -2.865112543106079
    5. ' ' → logprob: -3.115112543106079
    6. 'return' (adapté à ' return') → logprob: -3.490112543106079
    7. '```' → logprob: -3.990112543106079
    8. '\' → logprob: -4.365112781524658
    9. ' return' → logprob: -4.740112781524658
    10. ' 
' → logprob: -5.115112781524658

Token 35: ' vals' (ID: 58985)
  Prédit: ' vals'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' vals' → logprob: -0.5190421938896179
    2. 'vals' → logprob: -1.0190422534942627
    3. ' ' → logprob: -3.5190422534942627
    4. '_vals' → logprob: -5.144042015075684
    5. '(vals' → logprob: -5.144042015075684
    6. ' ' → logprob: -6.644042015075684
    7. '<|end|>' → logprob: -7.394042015075684
    8. 'val' → logprob: -7.894042015075684
    9. ' val' → logprob: -9.394042015075684
    10. ' None' → logprob: -9.769042015075684

Token 36: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 37: 'xyz' (ID: 51089)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.470651388168335
    2. '\n' → logprob: -1.970651388168335
    3. '
' → logprob: -1.970651388168335
    4. '<|end|>' → logprob: -1.970651388168335
    5. '(' → logprob: -2.095651388168335
    6. '[' → logprob: -2.720651388168335
    7. '.' → logprob: -2.845651388168335
    8. '```' → logprob: -3.345651388168335
    9. '#' → logprob: -3.845651388168335
    10. '(
' → logprob: -4.970651626586914

Token 38: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.08731246739625931
    2. '(' → logprob: -3.3373124599456787
    3. '[' → logprob: -3.7123124599456787
    4. ' =' → logprob: -4.462312698364258
    5. '.append' → logprob: -5.087312698364258
    6. '=' → logprob: -6.212312698364258
    7. '[:]' → logprob: -6.587312698364258
    8. ')' → logprob: -7.212312698364258
    9. '.swap' → logprob: -7.837312698364258
    10. '.pop' → logprob: -8.212312698364258

Token 39: ' list' (ID: 1562)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.005808989983052015
    2. '[]' → logprob: -5.3808088302612305
    3. ' [' → logprob: -8.00580883026123
    4. '[x' → logprob: -8.63080883026123
    5. '['' → logprob: -8.75580883026123
    6. 'sw' → logprob: -8.88080883026123
    7. 'swap' → logprob: -9.50580883026123
    8. '[s' → logprob: -9.63080883026123
    9. 'xyz' → logprob: -9.63080883026123
    10. '["' → logprob: -9.88080883026123

Token 40: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.022057687863707542
    2. '(range' → logprob: -3.8970577716827393
    3. '([' → logprob: -7.64705753326416
    4. '(x' → logprob: -8.52205753326416
    5. '()' → logprob: -8.77205753326416
    6. '[' → logprob: -9.02205753326416
    7. '(zip' → logprob: -9.77205753326416
    8. '(`' → logprob: -9.89705753326416
    9. '('' → logprob: -10.14705753326416
    10. '(values' → logprob: -10.27205753326416

Token 41: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.2285243570804596
    2. '()' → logprob: -1.8535243272781372
    3. '(' → logprob: -3.1035244464874268
    4. ')' → logprob: -6.103524208068848
    5. '('' → logprob: -8.853524208068848
    6. '(()' → logprob: -9.478524208068848
    7. '().' → logprob: -9.853524208068848
    8. '();)' → logprob: -9.978524208068848
    9. '()))' → logprob: -10.478524208068848
    10. '(""))' → logprob: -10.853524208068848

Token 42: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0040956162847578526
    2. 'strip' → logprob: -5.504095554351807
    3. 'rstrip' → logprob: -11.129096031188965
    4. ' split' → logprob: -13.629096031188965
    5. ')' → logprob: -14.254096031188965
    6. 'lower' → logprob: -15.004096031188965
    7. 'replace' → logprob: -15.754096031188965
    8. '_split' → logprob: -16.50409507751465
    9. 'spl' → logprob: -16.75409507751465
    10. '(split' → logprob: -17.25409507751465

Token 43: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.018770895898342133
    2. '()))' → logprob: -4.893770694732666
    3. ')' → logprob: -5.643770694732666
    4. '('' → logprob: -5.643770694732666
    5. '()' → logprob: -6.268770694732666
    6. '(' → logprob: -6.393770694732666
    7. '))' → logprob: -8.018771171569824
    8. '(','' → logprob: -10.268771171569824
    9. ' ())' → logprob: -10.393771171569824
    10. '(""))' → logprob: -11.268771171569824

Token 44: 'sw' (ID: 16440)
  Prédit: 'sw'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sw' → logprob: -0.158715158700943
    2. 'xyz' → logprob: -2.15871524810791
    3. 'swap' → logprob: -4.03371524810791
    4. 'print' → logprob: -5.78371524810791
    5. 'x' → logprob: -6.15871524810791
    6. 'vals' → logprob: -6.28371524810791
    7. 'if' → logprob: -6.65871524810791
    8. '```' → logprob: -6.90871524810791
    9. 'xy' → logprob: -7.15871524810791
    10. 'val' → logprob: -8.28371524810791

Token 45: 'apped' (ID: 9035)
  Prédit: 'apper'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'apper' → logprob: -0.001419399632140994
    2. 'ap' → logprob: -6.876419544219971
    3. 'app' → logprob: -8.376419067382812
    4. 'appe' → logprob: -8.876419067382812
    5. 'a' → logprob: -11.626419067382812
    6. 'appear' → logprob: -13.251419067382812
    7. 'apped' → logprob: -13.626419067382812
    8. 'ап' → logprob: -13.876419067382812
    9. 'appen' → logprob: -14.001419067382812
    10. 'aper' → logprob: -14.126419067382812

Token 46: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.059518229216337204
    2. '(x' → logprob: -2.934518337249756
    3. '(vals' → logprob: -5.809518337249756
    4. 'er' → logprob: -7.059518337249756
    5. '(s' → logprob: -8.934517860412598
    6. ' (' → logprob: -9.434517860412598
    7. 's' → logprob: -9.559517860412598
    8. '(y' → logprob: -9.809517860412598
    9. '(val' → logprob: -10.184517860412598
    10. '(nums' → logprob: -10.309517860412598

Token 47: ' swap' (ID: 25489)
  Prédit: 'sw'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sw' → logprob: -0.005681568756699562
    2. 'swap' → logprob: -5.63068151473999
    3. ' sw' → logprob: -6.88068151473999
    4. ' swap' → logprob: -6.88068151473999
    5. ' swapped' → logprob: -12.505681991577148
    6. 's' → logprob: -12.880681991577148
    7. 'sp' → logprob: -12.880681991577148
    8. 'Sw' → logprob: -12.880681991577148
    9. 'xyz' → logprob: -13.380681991577148
    10. ' swapping' → logprob: -13.630681991577148

Token 48: 'per' (ID: 543)
  Prédit: 'per'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'per' → logprob: -0.07153836637735367
    2. 'er' → logprob: -2.6965384483337402
    3. 'p' → logprob: -6.69653844833374
    4. '(' → logprob: -9.321537971496582
    5. 'ped' → logprob: -9.696537971496582
    6. 'pered' → logprob: -10.696537971496582
    7. 'xer' → logprob: -10.821537971496582
    8. 'ed' → logprob: -11.321537971496582
    9. 'pper' → logprob: -11.321537971496582
    10. 'pers' → logprob: -11.446537971496582

Token 49: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.2533470094203949
    2. '(' → logprob: -1.5033470392227173
    3. '(vals' → logprob: -6.878346920013428
    4. '(s' → logprob: -9.253347396850586
    5. '(xs' → logprob: -9.253347396850586
    6. '(open' → logprob: -9.753347396850586
    7. '(y' → logprob: -10.753347396850586
    8. '(val' → logprob: -11.003347396850586
    9. '(nums' → logprob: -11.253347396850586
    10. ' (' → logprob: -11.378347396850586

Token 50: 'yz' (ID: 26947)
  Prédit: 'z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'z' → logprob: -0.515572190284729
    2. 'yz' → logprob: -1.015572190284729
    3. 'xyz' → logprob: -3.5155720710754395
    4. 'zy' → logprob: -4.7655720710754395
    5. 'y' → logprob: -6.5155720710754395
    6. ')' → logprob: -7.7655720710754395
    7. 'zz' → logprob: -9.390572547912598
    8. '{' → logprob: -9.640572547912598
    9. '(' → logprob: -10.015572547912598
    10. '   ' → logprob: -10.390572547912598

Token 51: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.68022444692906e-05
    2. '))' → logprob: -10.000046730041504
    3. ')
' → logprob: -15.000046730041504
    4. '[' → logprob: -15.125046730041504
    5. ' )' → logprob: -15.250046730041504
    6. ')))' → logprob: -15.625046730041504
    7. ')`' → logprob: -16.87504768371582
    8. '())' → logprob: -17.25004768371582
    9. '(' → logprob: -17.37504768371582
    10. ')}' → logprob: -17.50004768371582

Token 52: 'for' (ID: 1938)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0032555500511080027
    2. ')' → logprob: -6.878255367279053
    3. '```' → logprob: -7.378255367279053
    4. '#' → logprob: -7.878255367279053
    5. '<|end|>' → logprob: -7.878255367279053
    6. 'prin' → logprob: -9.003255844116211
    7. '(print' → logprob: -9.003255844116211
    8. ' print' → logprob: -9.378255844116211
    9. '[' → logprob: -9.503255844116211
    10. 'for' → logprob: -9.503255844116211

Token 53: ' i' (ID: 575)
  Prédit: ' val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' val' → logprob: -0.12183654308319092
    2. ' i' → logprob: -3.3718366622924805
    3. ' item' → logprob: -3.6218366622924805
    4. ' word' → logprob: -3.9968366622924805
    5. ' v' → logprob: -4.4968366622924805
    6. ' x' → logprob: -4.9968366622924805
    7. ' element' → logprob: -5.7468366622924805
    8. ' swapped' → logprob: -5.8718366622924805
    9. ' elem' → logprob: -5.9968366622924805
    10. ' w' → logprob: -6.6218366622924805

Token 54: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.11609334498643875
    2. ' ' → logprob: -3.116093397140503
    3. 'n' → logprob: -3.366093397140503
    4. 'in' → logprob: -3.616093397140503
    5. '  ' → logprob: -6.116093158721924
    6. ' n' → logprob: -7.116093158721924
    7. ',' → logprob: -8.366093635559082
    8. '   ' → logprob: -8.991093635559082
    9. '_' → logprob: -9.366093635559082
    10. '	in' → logprob: -9.741093635559082

Token 55: ' range' (ID: 3352)
  Prédit: 'sw'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sw' → logprob: -0.6298880577087402
    2. ' swapped' → logprob: -0.8798880577087402
    3. ' range' → logprob: -3.3798880577087402
    4. 'range' → logprob: -4.25488805770874
    5. ' sw' → logprob: -6.00488805770874
    6. ' ' → logprob: -6.87988805770874
    7. '	sw' → logprob: -8.379888534545898
    8. 'swap' → logprob: -9.504888534545898
    9. '```' → logprob: -9.504888534545898
    10. '  ' → logprob: -9.629888534545898

Token 56: '(len' (ID: 14990)
  Prédit: '(len'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(len' → logprob: -0.07891236990690231
    2. '(' → logprob: -2.5789122581481934
    3. ' (' → logprob: -10.828912734985352
    4. ' len' → logprob: -14.078912734985352
    5. 'len' → logprob: -14.578912734985352
    6. '(
' → logprob: -14.703912734985352
    7. '(

' → logprob: -14.953912734985352
    8. '(s' → logprob: -15.078912734985352
    9. '(length' → logprob: -15.953912734985352
    10. '((' → logprob: -16.45391273498535

Token 57: '(sw' (ID: 132758)
  Prédit: '(sw'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(sw' → logprob: -0.008923942223191261
    2. '(x' → logprob: -4.8839240074157715
    3. '(s' → logprob: -7.0089240074157715
    4. '(' → logprob: -7.8839240074157715
    5. ' (' → logprob: -10.758923530578613
    6. '(vals' → logprob: -12.008923530578613
    7. '(xs' → logprob: -13.008923530578613
    8. '(sl' → logprob: -13.883923530578613
    9. ')' → logprob: -14.508923530578613
    10. '(z' → logprob: -14.508923530578613

Token 58: 'apped' (ID: 9035)
  Prédit: 'apped'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'apped' → logprob: -6.0868278524139896e-05
    2. 'app' → logprob: -9.75006103515625
    3. 'apper' → logprob: -13.25006103515625
    4. 'appe' → logprob: -14.87506103515625
    5. 'APPED' → logprob: -16.25006103515625
    6. 'apping' → logprob: -16.37506103515625
    7. '_app' → logprob: -16.87506103515625
    8. 'aped' → logprob: -17.12506103515625
    9. 'appable' → logprob: -17.87506103515625
    10. 'ipped' → logprob: -18.00006103515625

Token 59: ')):
' (ID: 22530)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.44013962149620056
    2. ')):' → logprob: -1.065139651298523
    3. '))' → logprob: -5.1901397705078125
    4. ')' → logprob: -5.1901397705078125
    5. ' ):' → logprob: -8.815139770507812
    6. ']):' → logprob: -10.690139770507812
    7. '-' → logprob: -11.565139770507812
    8. ')):
' → logprob: -11.815139770507812
    9. '>):' → logprob: -11.940139770507812
    10. ' ))' → logprob: -12.065139770507812

Token 60: '   ' (ID: 271)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.3124808967113495
    2. '   ' → logprob: -1.6874809265136719
    3. 'print' → logprob: -2.562480926513672
    4. '	print' → logprob: -5.937480926513672
    5. '    ' → logprob: -6.312480926513672
    6. '    
' → logprob: -6.687480926513672
    7. '<|end|>' → logprob: -8.812480926513672
    8. '```' → logprob: -9.312480926513672
    9. ' ' → logprob: -10.062480926513672
    10. '(print' → logprob: -10.062480926513672

Token 61: ' swapped' (ID: 125210)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.1269788295030594
    2. ' print' → logprob: -2.126978874206543
    3. '   ' → logprob: -10.001978874206543
    4. '	print' → logprob: -12.751978874206543
    5. '    ' → logprob: -14.751978874206543
    6. 'pr' → logprob: -15.001978874206543
    7. '.print' → logprob: -15.126978874206543
    8. ' prin' → logprob: -15.126978874206543
    9. '```' → logprob: -15.251978874206543
    10. 'prin' → logprob: -15.376978874206543

Token 62: '[i' (ID: 1768)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.16045930981636047
    2. '[i' → logprob: -1.910459280014038
    3. '\[' → logprob: -9.785459518432617
    4. 'print' → logprob: -10.035459518432617
    5. '```' → logprob: -10.160459518432617
    6. '[
' → logprob: -10.285459518432617
    7. '[...]' → logprob: -10.910459518432617
    8. '[j' → logprob: -12.035459518432617
    9. ' [' → logprob: -12.160459518432617
    10. '   ' → logprob: -12.410459518432617

Token 63: ']' (ID: 60)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5645666122436523
    2. ']' → logprob: -0.9395666122436523
    3. '])' → logprob: -4.564566612243652
    4. ' ]' → logprob: -4.939566612243652
    5. ')]' → logprob: -4.939566612243652
    6. ' )' → logprob: -5.439566612243652
    7. '+' → logprob: -5.564566612243652
    8. ',' → logprob: -5.939566612243652
    9. '[' → logprob: -7.064566612243652
    10. '),' → logprob: -7.564566612243652

Token 64: ' =' (ID: 314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 65: ' str' (ID: 989)
  Prédit: 'sw'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sw' → logprob: -0.009128209203481674
    2. 'str' → logprob: -5.134128093719482
    3. 'int' → logprob: -5.884128093719482
    4. ' swapped' → logprob: -8.00912857055664
    5. '	sw' → logprob: -11.00912857055664
    6. '-sw' → logprob: -11.00912857055664
    7. 'swap' → logprob: -11.50912857055664
    8. ' sw' → logprob: -12.13412857055664
    9. '(sw' → logprob: -12.13412857055664
    10. ' str' → logprob: -12.13412857055664

Token 66: '(sw' (ID: 132758)
  Prédit: '(sw'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(sw' → logprob: -0.04245263338088989
    2. '(' → logprob: -3.292452573776245
    3. '(int' → logprob: -5.667452812194824
    4. '(i' → logprob: -8.417452812194824
    5. '(len' → logprob: -8.417452812194824
    6. '(s' → logprob: -8.917452812194824
    7. '(x' → logprob: -9.542452812194824
    8. '(type' → logprob: -10.417452812194824
    9. '(ord' → logprob: -10.417452812194824
    10. '(eval' → logprob: -10.542452812194824

Token 67: 'apped' (ID: 9035)
  Prédit: 'apped'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'apped' → logprob: -0.004823718685656786
    2. 'app' → logprob: -5.379823684692383
    3. 'apper' → logprob: -8.754823684692383
    4. 'aped' → logprob: -11.004823684692383
    5. 'appe' → logprob: -11.254823684692383
    6. 'ap' → logprob: -11.629823684692383
    7. 'apping' → logprob: -13.379823684692383
    8. 'apt' → logprob: -13.504823684692383
    9. '_app' → logprob: -14.254823684692383
    10. '   ' → logprob: -14.754823684692383

Token 68: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -3.7697225252486533e-06
    2. '[' → logprob: -12.875003814697266
    3. ')' → logprob: -14.000003814697266
    4. ')i' → logprob: -16.000003814697266
    5. '   ' → logprob: -17.125003814697266
    6. 'i' → logprob: -17.125003814697266
    7. ' ' → logprob: -17.375003814697266
    8. '[
' → logprob: -17.625003814697266
    9. ')[' → logprob: -18.000003814697266
    10. '[j' → logprob: -18.000003814697266

Token 69: '])
' (ID: 5169)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7127875089645386
    2. '])' → logprob: -0.7127875089645386
    3. '))' → logprob: -4.337787628173828
    4. ']' → logprob: -5.337787628173828
    5. ')])' → logprob: -7.337787628173828
    6. ']))' → logprob: -7.962787628173828
    7. ')]' → logprob: -8.337787628173828
    8. '+' → logprob: -8.962787628173828
    9. '[' → logprob: -10.212787628173828
    10. '])]' → logprob: -10.337787628173828

Token 70: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.027593106031417847
    2. '[' → logprob: -4.65259313583374
    3. '
' → logprob: -4.77759313583374
    4. ')' → logprob: -6.15259313583374
    5. '<|end|>' → logprob: -6.40259313583374
    6. ' print' → logprob: -6.77759313583374
    7. 'for' → logprob: -6.90259313583374
    8. ' ' → logprob: -7.02759313583374
    9. ' 
' → logprob: -7.65259313583374
    10. '   ' → logprob: -8.027592658996582

Token 71: '(*' (ID: 9000)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00019972586596850306
    2. '("("' → logprob: -8.750199317932129
    3. '('' → logprob: -10.500199317932129
    4. '((' → logprob: -12.500199317932129
    5. '(

' → logprob: -12.750199317932129
    6. '(
' → logprob: -13.250199317932129
    7. '()' → logprob: -13.500199317932129
    8. '(*' → logprob: -14.375199317932129
    9. ' (' → logprob: -14.875199317932129
    10. '(`' → logprob: -15.000199317932129

Token 72: 'sw' (ID: 16440)
  Prédit: 'sw'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sw' → logprob: -0.0004842962371185422
    2. ' swapped' → logprob: -7.750484466552734
    3. '(sw' → logprob: -10.000484466552734
    4. 'swap' → logprob: -11.875484466552734
    5. '	sw' → logprob: -14.375484466552734
    6. '-sw' → logprob: -15.375484466552734
    7. 'Sw' → logprob: -15.375484466552734
    8. ' sw' → logprob: -15.875484466552734
    9. '_sw' → logprob: -17.000484466552734
    10. ')' → logprob: -17.375484466552734

Token 73: 'apped' (ID: 9035)
  Prédit: 'apped'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'apped' → logprob: -0.000433291686931625
    2. 'app' → logprob: -7.750433444976807
    3. 'appe' → logprob: -13.375432968139648
    4. 'APPED' → logprob: -14.875432968139648
    5. 'aped' → logprob: -15.250432968139648
    6. 'ap' → logprob: -15.375432968139648
    7. 'apping' → logprob: -16.50043296813965
    8. 'apper' → logprob: -16.75043296813965
    9. 'apt' → logprob: -17.00043296813965
    10. 'appt' → logprob: -19.25043296813965

Token 74: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.173704271830502e-06
    2. '))' → logprob: -13.00000286102295
    3. ' )' → logprob: -14.50000286102295
    4. ')`' → logprob: -15.37500286102295
    5. ',' → logprob: -17.250003814697266
    6. '(' → logprob: -17.375003814697266
    7. ',)' → logprob: -17.625003814697266
    8. ')
' → logprob: -17.625003814697266
    9. '`)' → logprob: -18.000003814697266
    10. '),' → logprob: -18.000003814697266


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 72
Tokens correctement prédits (1ère position, stricte): 22
Tokens correctement prédits (1ère position, avec adaptation): 23
Tokens correctement prédits (top 10): 47
Précision stricte (1ère position): 30.56%
Précision adaptée (1ère position): 31.94%
Précision (top 10): 65.28%
================================================================================
