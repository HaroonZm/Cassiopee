================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:05:16
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
_N = int(input())
B = list(map(int, input().split(' ')))

StackBox = []
fn=lambda z:range(z-1,-1,-1)
class E: s=True
while len(B):
    EndFlag = E()
    for idx in fn(len(B)):
        item = B[idx]
        if idx+1==item:
            StackBox+=[item]
            del B[idx]
            EndFlag.s=False
            break
    else:
        pass
    if EndFlag.s:
        print(-1)
        quit()

P=iter(StackBox[::-1])
try:
    while 1:
        print(next(P))
except StopIteration: pass
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '_N' (ID: 3080)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0038589818868786097
    2. '_' → logprob: -6.253859043121338
    3. ''' → logprob: -6.503859043121338
    4. '"' → logprob: -9.50385856628418
    5. '('' → logprob: -9.62885856628418
    6. '(_' → logprob: -9.75385856628418
    7. '("("' → logprob: -9.87885856628418
    8. '```' → logprob: -10.00385856628418
    9. '(_)' → logprob: -10.25385856628418
    10. '()' → logprob: -10.87885856628418

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4239971935749054
    2. ')' → logprob: -1.298997163772583
    3. '()' → logprob: -3.048997163772583
    4. '())' → logprob: -3.798997163772583
    5. '(
' → logprob: -7.798997402191162
    6. '_' → logprob: -7.923997402191162
    7. '))' → logprob: -8.173996925354004
    8. '[' → logprob: -8.173996925354004
    9. '")' → logprob: -8.423996925354004
    10. '```' → logprob: -8.798996925354004

Token 5: 'B' (ID: 33)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.19246049225330353
    2. 's' → logprob: -2.817460536956787
    3. 'for' → logprob: -3.192460536956787
    4. 'a' → logprob: -3.942460536956787
    5. ')' → logprob: -4.567460536956787
    6. 'if' → logprob: -4.692460536956787
    7. '#' → logprob: -4.942460536956787
    8. ' ' → logprob: -5.567460536956787
    9. '```' → logprob: -5.942460536956787
    10. '_n' → logprob: -6.067460536956787

Token 6: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.13349390029907227
    2. '=' → logprob: -2.8834939002990723
    3. '_' → logprob: -3.0084939002990723
    4. ',' → logprob: -5.383493900299072
    5. ' ' → logprob: -6.133493900299072
    6. '[' → logprob: -6.508493900299072
    7. '[]' → logprob: -6.633493900299072
    8. '=[]' → logprob: -6.633493900299072
    9. '[i' → logprob: -6.758493900299072
    10. '_list' → logprob: -7.008493900299072

Token 7: ' list' (ID: 1562)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.8340690732002258
    2. 'input' → logprob: -2.084069013595581
    3. 'list' → logprob: -2.084069013595581
    4. ' []' → logprob: -2.459069013595581
    5. ' input' → logprob: -2.834069013595581
    6. '_N' → logprob: -2.834069013595581
    7. ' list' → logprob: -3.209069013595581
    8. '[N' → logprob: -3.459069013595581
    9. ' [' → logprob: -4.70906925201416
    10. 'int' → logprob: -5.33406925201416

Token 8: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0001382241171086207
    2. '(range' → logprob: -9.875138282775879
    3. ' (' → logprob: -11.750138282775879
    4. '```' → logprob: -11.750138282775879
    5. '((' → logprob: -11.875138282775879
    6. '(
' → logprob: -11.875138282775879
    7. '("("' → logprob: -12.000138282775879
    8. '[(' → logprob: -12.000138282775879
    9. '_' → logprob: -12.125138282775879
    10. '(B' → logprob: -12.375138282775879

Token 9: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.14600084722042084
    2. '(' → logprob: -2.271000862121582
    3. '(str' → logprob: -3.521000862121582
    4. '(input' → logprob: -6.271000862121582
    5. '(eval' → logprob: -7.771000862121582
    6. '(lambda' → logprob: -7.896000862121582
    7. ')' → logprob: -9.271000862121582
    8. '(list' → logprob: -9.896000862121582
    9. 'int' → logprob: -9.896000862121582
    10. '(
' → logprob: -10.271000862121582

Token 10: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.01327469851821661
    2. '(' → logprob: -4.638274669647217
    3. ',input' → logprob: -5.763274669647217
    4. ')' → logprob: -9.263275146484375
    5. ',' → logprob: -9.263275146484375
    6. '))' → logprob: -10.138275146484375
    7. 'input' → logprob: -10.263275146484375
    8. '(int' → logprob: -10.638275146484375
    9. '=input' → logprob: -11.013275146484375
    10. '(eval' → logprob: -11.138275146484375

Token 11: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.4741075336933136
    2. ' input' → logprob: -0.9741075038909912
    3. '(input' → logprob: -10.97410774230957
    4. ')' → logprob: -12.09910774230957
    5. ',input' → logprob: -12.97410774230957
    6. '_input' → logprob: -13.09910774230957
    7. ' ' → logprob: -13.84910774230957
    8. '=input' → logprob: -14.59910774230957
    9. '	input' → logprob: -15.09910774230957
    10. '_' → logprob: -15.22410774230957

Token 12: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.5527557730674744
    2. '()))' → logprob: -1.5527558326721191
    3. '()' → logprob: -2.052755832672119
    4. '())' → logprob: -2.552755832672119
    5. '()));' → logprob: -5.802755832672119
    6. '(' → logprob: -6.302755832672119
    7. ')' → logprob: -7.802755832672119
    8. '))' → logprob: -7.927755832672119
    9. '());' → logprob: -8.302755355834961
    10. '(),' → logprob: -8.427755355834961

Token 13: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0007805614150129259
    2. 'strip' → logprob: -7.2507805824279785
    3. 'rstrip' → logprob: -9.75078010559082
    4. ' split' → logprob: -11.50078010559082
    5. 'spl' → logprob: -14.12578010559082
    6. '(split' → logprob: -14.25078010559082
    7. ')' → logprob: -14.87578010559082
    8. '_split' → logprob: -15.62578010559082
    9. 'replace' → logprob: -16.50078010559082
    10. 'sp' → logprob: -16.50078010559082

Token 14: '('' (ID: 706)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0548595190048218
    2. '))' → logprob: -1.0548595190048218
    3. '()))' → logprob: -1.8048595190048218
    4. '())' → logprob: -2.0548596382141113
    5. '(' → logprob: -4.929859638214111
    6. '()' → logprob: -5.804859638214111
    7. '('' → logprob: -8.429859161376953
    8. ')))' → logprob: -8.554859161376953
    9. '(','' → logprob: -9.679859161376953
    10. '())))' → logprob: -10.554859161376953

Token 15: ' '' (ID: 461)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7462431192398071
    2. ')))' → logprob: -0.8712431192398071
    3. '')))' → logprob: -2.2462430000305176
    4. ' ' → logprob: -7.496243000030518
    5. '')' → logprob: -8.371243476867676
    6. '))' → logprob: -8.371243476867676
    7. '())))' → logprob: -8.371243476867676
    8. ''))' → logprob: -8.871243476867676
    9. '")))' → logprob: -9.371243476867676
    10. '()' → logprob: -9.621243476867676

Token 16: ')))

' (ID: 46526)
  Prédit: ')))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.16045239567756653
    2. ')' → logprob: -1.9104523658752441
    3. '))' → logprob: -8.785452842712402
    4. '')))' → logprob: -9.785452842712402
    5. '))))' → logprob: -11.785452842712402
    6. ')));' → logprob: -12.910452842712402
    7. ')))
' → logprob: -13.160452842712402
    8. ' ' → logprob: -13.535452842712402
    9. '),' → logprob: -13.660452842712402
    10. ')\' → logprob: -14.535452842712402

Token 17: 'Stack' (ID: 5622)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -1.1806474924087524
    2. '_' → logprob: -1.4306474924087524
    3. 'for' → logprob: -2.680647373199463
    4. 'c' → logprob: -2.930647373199463
    5. 'S' → logprob: -3.055647373199463
    6. 'M' → logprob: -3.180647373199463
    7. 'A' → logprob: -3.305647373199463
    8. 'a' → logprob: -3.430647373199463
    9. 'C' → logprob: -3.930647373199463
    10. 'd' → logprob: -4.055647373199463

Token 18: 'Box' (ID: 2532)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.20983482897281647
    2. ' =' → logprob: -1.9598348140716553
    3. '=[]' → logprob: -4.084835052490234
    4. '_' → logprob: -4.459835052490234
    5. '(' → logprob: -4.459835052490234
    6. ')' → logprob: -6.084835052490234
    7. '.' → logprob: -6.209835052490234
    8. '[' → logprob: -6.459835052490234
    9. '()' → logprob: -6.959835052490234
    10. 's' → logprob: -7.709835052490234

Token 19: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.6555562019348145
    2. '=' → logprob: -1.4055562019348145
    3. '(' → logprob: -2.1555562019348145
    4. '=[]' → logprob: -2.7805562019348145
    5. '()' → logprob: -3.2805562019348145
    6. '[]' → logprob: -5.2805562019348145
    7. '.' → logprob: -5.5305562019348145
    8. '_' → logprob: -5.7805562019348145
    9. '[' → logprob: -6.4055562019348145
    10. '([]' → logprob: -6.5305562019348145

Token 20: ' []
' (ID: 8911)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.0004851306148339063
    2. ' []' → logprob: -7.750484943389893
    3. '[' → logprob: -9.87548542022705
    4. '[]}' → logprob: -13.00048542022705
    5. '[]
' → logprob: -14.87548542022705
    6. '[]>' → logprob: -15.75048542022705
    7. 'list' → logprob: -16.500484466552734
    8. '```' → logprob: -16.750484466552734
    9. '([]' → logprob: -17.125484466552734
    10. '[]

' → logprob: -17.125484466552734

Token 21: 'fn' (ID: 13682)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.12368255108594894
    2. 'result' → logprob: -2.8736824989318848
    3. 'answer' → logprob: -3.7486824989318848
    4. 'max' → logprob: -4.373682498931885
    5. 'ans' → logprob: -5.498682498931885
    6. 'res' → logprob: -5.498682498931885
    7. 'output' → logprob: -5.998682498931885
    8. 'results' → logprob: -6.123682498931885
    9. 'count' → logprob: -6.623682498931885
    10. '_' → logprob: -6.748682498931885

Token 22: '=lambda' (ID: 64865)
  Prédit: '_stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_stack' → logprob: -1.2192187309265137
    2. '_' → logprob: -1.5942187309265137
    3. 't' → logprob: -1.7192187309265137
    4. 'o' → logprob: -1.9692187309265137
    5. ' =' → logprob: -2.8442187309265137
    6. '()' → logprob: -3.4692187309265137
    7. 'c' → logprob: -3.8442187309265137
    8. 'Stack' → logprob: -4.219218730926514
    9. 'ction' → logprob: -5.094218730926514
    10. 'u' → logprob: -5.469218730926514

Token 23: ' z' (ID: 579)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.388023316860199
    2. ' x' → logprob: -1.1380233764648438
    3. 'a' → logprob: -7.763023376464844
    4. ' a' → logprob: -8.888023376464844
    5. '_' → logprob: -9.013023376464844
    6. 's' → logprob: -9.388023376464844
    7. ' s' → logprob: -9.763023376464844
    8. ' stack' → logprob: -9.763023376464844
    9. ' lambda' → logprob: -9.888023376464844
    10. 'lambda' → logprob: -10.138023376464844

Token 24: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.019958019256591797
    2. ' :' → logprob: -4.894958019256592
    3. ':z' → logprob: -5.394958019256592
    4. ':[' → logprob: -6.269958019256592
    5. ':x' → logprob: -6.394958019256592
    6. ':max' → logprob: -6.644958019256592
    7. ',' → logprob: -7.644958019256592
    8. ',z' → logprob: -8.01995849609375
    9. ':i' → logprob: -8.14495849609375
    10. ':_' → logprob: -8.14495849609375

Token 25: 'range' (ID: 20967)
  Prédit: ' z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' z' → logprob: -0.6895932555198669
    2. 'z' → logprob: -0.8145932555198669
    3. ' max' → logprob: -4.189593315124512
    4. ' (' → logprob: -4.939593315124512
    5. 'max' → logprob: -5.439593315124512
    6. '(' → logprob: -5.564593315124512
    7. 'Stack' → logprob: -5.814593315124512
    8. ' Stack' → logprob: -5.814593315124512
    9. ' ' → logprob: -6.064593315124512
    10. 'len' → logprob: -6.439593315124512

Token 26: '(z' (ID: 27674)
  Prédit: '(len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(len' → logprob: -0.7736706137657166
    2. '(_' → logprob: -0.8986706137657166
    3. '(' → logprob: -2.3986706733703613
    4. '(N' → logprob: -3.3986706733703613
    5. '(z' → logprob: -5.773670673370361
    6. '(B' → logprob: -6.398670673370361
    7. '(-' → logprob: -7.273670673370361
    8. '(n' → logprob: -7.898670673370361
    9. '((' → logprob: -8.273670196533203
    10. '(Stack' → logprob: -8.398670196533203

Token 27: '-' (ID: 12)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2701159417629242
    2. ')' → logprob: -2.145115852355957
    3. '(N' → logprob: -3.020115852355957
    4. '(z' → logprob: -3.395115852355957
    5. '(len' → logprob: -3.895115852355957
    6. '(_' → logprob: -4.645115852355957
    7. '_N' → logprob: -5.645115852355957
    8. '(n' → logprob: -7.020115852355957
    9. '):' → logprob: -7.520115852355957
    10. '_n' → logprob: -7.770115852355957

Token 28: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.028811151161789894
    2. '2' → logprob: -3.65381121635437
    3. ' ' → logprob: -6.028810977935791
    4. '_' → logprob: -10.27881145477295
    5. '-' → logprob: -11.02881145477295
    6. '(' → logprob: -11.40381145477295
    7. '3' → logprob: -11.52881145477295
    8. '_N' → logprob: -12.02881145477295
    9. '  ' → logprob: -12.27881145477295
    10. '0' → logprob: -12.90381145477295

Token 29: ',-' (ID: 8202)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.38897809386253357
    2. ',-' → logprob: -1.138978123664856
    3. ')' → logprob: -6.513978004455566
    4. ' ,' → logprob: -8.138978004455566
    5. '-' → logprob: -9.638978004455566
    6. ',None' → logprob: -9.763978004455566
    7. ' ,-' → logprob: -9.763978004455566
    8. ',)' → logprob: -9.888978004455566
    9. ' -' → logprob: -11.263978004455566
    10. ',:)' → logprob: -11.388978004455566

Token 30: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.4121114822482923e-06
    2. ' ' → logprob: -13.000003814697266
    3. '2' → logprob: -15.375003814697266
    4. '１' → logprob: -16.000003814697266
    5. '```' → logprob: -16.062503814697266
    6. '-' → logprob: -16.312503814697266
    7. '  ' → logprob: -16.937503814697266
    8. '۱' → logprob: -17.000003814697266
    9. '   ' → logprob: -17.062503814697266
    10. ' -' → logprob: -17.125003814697266

Token 31: ',-' (ID: 8202)
  Prédit: ',-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',-' → logprob: -0.14295056462287903
    2. ',' → logprob: -2.0179505348205566
    3. '1' → logprob: -9.017951011657715
    4. '-' → logprob: -9.892951011657715
    5. ' ,-' → logprob: -10.517951011657715
    6. ',None' → logprob: -10.767951011657715
    7. ',true' → logprob: -11.517951011657715
    8. '```' → logprob: -11.767951011657715
    9. ',:)' → logprob: -11.892951011657715
    10. ' ,' → logprob: -12.142951011657715

Token 32: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.512236498361744e-07
    2. ' ' → logprob: -14.875000953674316
    3. '１' → logprob: -16.625
    4. '2' → logprob: -17.75
    5. '```' → logprob: -18.0
    6. '۱' → logprob: -18.8125
    7. '   ' → logprob: -19.8125
    8. '১' → logprob: -20.375
    9. ')' → logprob: -20.375
    10. '१' → logprob: -20.4375

Token 33: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.45848218582978e-06
    2. ' )' → logprob: -13.87500286102295
    3. ')
' → logprob: -14.25000286102295
    4. '))' → logprob: -14.87500286102295
    5. '),' → logprob: -15.25000286102295
    6. ')`' → logprob: -17.125001907348633
    7. ')

' → logprob: -17.250001907348633
    8. ' ' → logprob: -17.375001907348633
    9. ')#' → logprob: -17.375001907348633
    10. ')))' → logprob: -17.875001907348633

Token 34: 'class' (ID: 1444)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.7927659749984741
    2. ')' → logprob: -1.5427659749984741
    3. '
' → logprob: -1.9177659749984741
    4. '<|end|>' → logprob: -2.7927660942077637
    5. ' for' → logprob: -3.2927660942077637
    6. '\n' → logprob: -3.5427660942077637
    7. ':' → logprob: -4.167766094207764
    8. '(' → logprob: -4.542766094207764
    9. ' ' → logprob: -4.917766094207764
    10. '_' → logprob: -5.292766094207764

Token 35: ' E' (ID: 457)
  Prédit: ' Solution'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' Solution' → logprob: -0.3762926459312439
    2. ' Stack' → logprob: -2.0012927055358887
    3. ' Node' → logprob: -2.5012927055358887
    4. ' Box' → logprob: -3.7512927055358887
    5. '_' → logprob: -4.626292705535889
    6. ' My' → logprob: -4.626292705535889
    7. ' ' → logprob: -5.001292705535889
    8. ' Segment' → logprob: -5.001292705535889
    9. 'Solution' → logprob: -5.126292705535889
    10. ' Solver' → logprob: -5.501292705535889

Token 36: ':' (ID: 25)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.32501325011253357
    2. 'rror' → logprob: -1.950013279914856
    3. 'm' → logprob: -3.4500131607055664
    4. '{' → logprob: -4.075013160705566
    5. 'r' → logprob: -4.200013160705566
    6. 'valuator' → logprob: -4.575013160705566
    7. ':' → logprob: -4.825013160705566
    8. ' {' → logprob: -5.075013160705566
    9. 'xt' → logprob: -5.450013160705566
    10. 'n' → logprob: -5.512513160705566

Token 37: ' s' (ID: 265)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5661996603012085
    2. '   ' → logprob: -1.5661996603012085
    3. '    ' → logprob: -2.191199779510498
    4. '<|end|>' → logprob: -2.816199779510498
    5. ' def' → logprob: -3.691199779510498
    6. ' 
' → logprob: -4.941199779510498
    7. '  ' → logprob: -6.191199779510498
    8. ' pass' → logprob: -6.191199779510498
    9. 'def' → logprob: -6.441199779510498
    10. '_' → logprob: -6.566199779510498

Token 38: '=True' (ID: 7827)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 't' → logprob: -0.00911390595138073
    2. 'elf' → logprob: -5.134113788604736
    3. '__' → logprob: -6.259113788604736
    4. '_t' → logprob: -8.884114265441895
    5. 'e' → logprob: -9.009114265441895
    6. '_' → logprob: -9.134114265441895
    7. '   ' → logprob: -9.259114265441895
    8. ' __' → logprob: -9.384114265441895
    9. 'def' → logprob: -9.384114265441895
    10. 'top' → logprob: -9.384114265441895

Token 39: '
' (ID: 198)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.6017347574234009
    2. '.' → logprob: -2.6017346382141113
    3. ' ' → logprob: -2.7267346382141113
    4. ',' → logprob: -2.8517346382141113
    5. '_' → logprob: -2.8517346382141113
    6. '
' → logprob: -2.9767346382141113
    7. '[' → logprob: -3.3517346382141113
    8. '(' → logprob: -4.476734638214111
    9. '' → logprob: -4.726734638214111
    10. 'def' → logprob: -4.726734638214111

Token 40: 'while' (ID: 7032)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6622424125671387
    2. ':' → logprob: -1.7872424125671387
    3. ' def' → logprob: -2.0372424125671387
    4. '_' → logprob: -2.4122424125671387
    5. 'def' → logprob: -3.9122424125671387
    6. ')' → logprob: -4.912242412567139
    7. '<|end|>' → logprob: -5.162242412567139
    8. ' for' → logprob: -5.287242412567139
    9. ',' → logprob: -5.287242412567139
    10. 'for' → logprob: -5.412242412567139

Token 41: ' len' (ID: 4631)
  Prédit: ' B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -1.0714863538742065
    2. ' len' → logprob: -1.4464863538742065
    3. ' not' → logprob: -1.9464863538742065
    4. ' _' → logprob: -2.571486473083496
    5. 'B' → logprob: -2.821486473083496
    6. ' N' → logprob: -3.571486473083496
    7. 'len' → logprob: -3.696486473083496
    8. '_' → logprob: -3.821486473083496
    9. ' Stack' → logprob: -4.071486473083496
    10. '_B' → logprob: -4.196486473083496

Token 42: '(B' (ID: 8409)
  Prédit: '(Stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(Stack' → logprob: -0.04460180550813675
    2. '(B' → logprob: -3.2946019172668457
    3. '(' → logprob: -5.044601917266846
    4. '(_' → logprob: -9.919601440429688
    5. '(S' → logprob: -11.044601440429688
    6. ' (' → logprob: -11.794601440429688
    7. 'B' → logprob: -12.419601440429688
    8. '(stack' → logprob: -12.544601440429688
    9. 'Stack' → logprob: -13.044601440429688
    10. '(A' → logprob: -13.169601440429688

Token 43: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.32089266180992126
    2. ')>' → logprob: -1.4458926916122437
    3. ' )' → logprob: -3.320892572402954
    4. ' and' → logprob: -6.820892810821533
    5. '>' → logprob: -6.820892810821533
    6. ')!=' → logprob: -8.570892333984375
    7. '):' → logprob: -8.695892333984375
    8. ' >' → logprob: -9.195892333984375
    9. 'and' → logprob: -9.820892333984375
    10. ')>=' → logprob: -10.445892333984375

Token 44: '   ' (ID: 271)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -1.6480660438537598
    2. ' x' → logprob: -2.0230660438537598
    3. ' v' → logprob: -2.5230660438537598
    4. ' if' → logprob: -2.5230660438537598
    5. ' b' → logprob: -2.6480660438537598
    6. 'v' → logprob: -2.7730660438537598
    7. ' n' → logprob: -3.1480660438537598
    8. 'x' → logprob: -3.1480660438537598
    9. ' t' → logprob: -3.1480660438537598
    10. ' c' → logprob: -3.1480660438537598

Token 45: ' End' (ID: 6437)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -1.7693389654159546
    2. 'v' → logprob: -2.019339084625244
    3. 'b' → logprob: -2.269339084625244
    4. 'i' → logprob: -2.644339084625244
    5. ' x' → logprob: -2.644339084625244
    6. ' b' → logprob: -2.769339084625244
    7. ' v' → logprob: -2.769339084625244
    8. ' i' → logprob: -3.144339084625244
    9. 'a' → logprob: -3.394339084625244
    10. ' if' → logprob: -3.519339084625244

Token 46: 'Flag' (ID: 13267)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.19110649824142456
    2. ' =' → logprob: -1.9411065578460693
    3. '_=' → logprob: -4.81610631942749
    4. '=B' → logprob: -4.94110631942749
    5. '_' → logprob: -5.19110631942749
    6. '=len' → logprob: -6.56610631942749
    7. 'd' → logprob: -6.94110631942749
    8. '=int' → logprob: -7.06610631942749
    9. 'x' → logprob: -7.56610631942749
    10. 'B' → logprob: -7.69110631942749

Token 47: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3874301314353943
    2. ' =' → logprob: -1.137430191040039
    3. '=False' → logprob: -8.512430191040039
    4. '=True' → logprob: -8.637430191040039
    5. ' ' → logprob: -9.637430191040039
    6. '_=' → logprob: -10.637430191040039
    7. '=len' → logprob: -11.262430191040039
    8. '=None' → logprob: -11.262430191040039
    9. '=B' → logprob: -11.387430191040039
    10. '=int' → logprob: -11.887430191040039

Token 48: ' E' (ID: 457)
  Prédit: ' False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' False' → logprob: -0.9845758676528931
    2. 'False' → logprob: -1.109575867652893
    3. ' B' → logprob: -1.859575867652893
    4. 'B' → logprob: -2.9845757484436035
    5. ' not' → logprob: -3.3595757484436035
    6. ' True' → logprob: -3.6095757484436035
    7. 'Stack' → logprob: -4.7345757484436035
    8. 'True' → logprob: -4.9845757484436035
    9. ' Stack' → logprob: -4.9845757484436035
    10. '0' → logprob: -6.2345757484436035

Token 49: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.1283734142780304
    2. '()
' → logprob: -2.128373384475708
    3. '();' → logprob: -7.128373622894287
    4. '()
' → logprob: -8.003373146057129
    5. ';' → logprob: -9.753373146057129
    6. '.' → logprob: -9.753373146057129
    7. '.s' → logprob: -10.128373146057129
    8. '(' → logprob: -10.378373146057129
    9. ' ()' → logprob: -10.878373146057129
    10. '()

' → logprob: -11.003373146057129

Token 50: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16124822199344635
    2. ' ' → logprob: -3.036248207092285
    3. ':' → logprob: -4.036248207092285
    4. '[' → logprob: -4.411248207092285
    5. '    ' → logprob: -4.661248207092285
    6. '.' → logprob: -5.161248207092285
    7. ' while' → logprob: -5.286248207092285
    8. '       ' → logprob: -5.411248207092285
    9. '  ' → logprob: -5.411248207092285
    10. '    
' → logprob: -5.536248207092285

Token 51: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -1.130743384361267
    2. ' while' → logprob: -1.630743384361267
    3. 'for' (adapté à ' for') → logprob: -1.755743384361267
    4. 'i' → logprob: -2.3807435035705566
    5. 'while' → logprob: -2.8807435035705566
    6. '   ' → logprob: -3.3807435035705566
    7. ' i' → logprob: -3.3807435035705566
    8. ' if' → logprob: -4.505743503570557
    9. 'if' → logprob: -4.630743503570557
    10. 'idx' → logprob: -5.005743503570557

Token 52: ' idx' (ID: 14016)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.15183044970035553
    2. 'i' → logprob: -2.5268304347991943
    3. ' x' → logprob: -5.026830673217773
    4. ' j' → logprob: -5.151830673217773
    5. ' _' → logprob: -5.401830673217773
    6. ' k' → logprob: -5.526830673217773
    7. '_' → logprob: -5.651830673217773
    8. 'I' → logprob: -5.651830673217773
    9. ' idx' → logprob: -5.901830673217773
    10. ' n' → logprob: -6.026830673217773

Token 53: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.005273480899631977
    2. 'in' → logprob: -5.380273342132568
    3. ',' → logprob: -7.755273342132568
    4. ' ' → logprob: -8.755273818969727
    5. '_in' → logprob: -10.630273818969727
    6. '	in' → logprob: -11.880273818969727
    7. '_' → logprob: -12.130273818969727
    8. ' ,' → logprob: -12.130273818969727
    9. ' _' → logprob: -12.817773818969727
    10. 'In' → logprob: -13.067773818969727

Token 54: ' fn' (ID: 9784)
  Prédit: 'fn'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fn' → logprob: -0.09059701859951019
    2. ' fn' → logprob: -2.465596914291382
    3. ' range' → logprob: -7.215597152709961
    4. 'range' → logprob: -7.465597152709961
    5. '(fn' → logprob: -9.090597152709961
    6. '_fn' → logprob: -9.465597152709961
    7. '	fn' → logprob: -10.215597152709961
    8. '_' → logprob: -10.340597152709961
    9. 'stack' → logprob: -11.215597152709961
    10. ' ' → logprob: -11.465597152709961

Token 55: '(len' (ID: 14990)
  Prédit: '(len'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(len' → logprob: -0.013890095055103302
    2. '(N' → logprob: -4.888890266418457
    3. '(_' → logprob: -5.138890266418457
    4. '(' → logprob: -8.138890266418457
    5. '(B' → logprob: -10.638890266418457
    6. 'len' → logprob: -11.013890266418457
    7. ')(_' → logprob: -11.388890266418457
    8. ' len' → logprob: -11.638890266418457
    9. '(-' → logprob: -12.013890266418457
    10. '=len' → logprob: -12.138890266418457

Token 56: '(B' (ID: 8409)
  Prédit: '(B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(B' → logprob: -0.0008784697856754065
    2. '(Stack' → logprob: -7.50087833404541
    3. 'B' → logprob: -8.50087833404541
    4. '(' → logprob: -9.87587833404541
    5. ')' → logprob: -10.50087833404541
    6. 'Stack' → logprob: -10.62587833404541
    7. '(S' → logprob: -13.00087833404541
    8. '_B' → logprob: -13.12587833404541
    9. '(A' → logprob: -13.37587833404541
    10. ' (' → logprob: -13.50087833404541

Token 57: ')):
' (ID: 22530)
  Prédit: ')):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')):' → logprob: -0.04604654386639595
    2. '))' → logprob: -3.421046495437622
    3. ')' → logprob: -5.171046733856201
    4. ')):
' → logprob: -5.546046733856201
    5. '):' → logprob: -6.671046733856201
    6. ')-' → logprob: -7.421046733856201
    7. ' ))' → logprob: -8.671046257019043
    8. '-' → logprob: -8.671046257019043
    9. ')):
' → logprob: -8.671046257019043
    10. ' ' → logprob: -9.296046257019043

Token 58: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 59: ' item' (ID: 2169)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.26363134384155273
    2. ' ' → logprob: -1.7636313438415527
    3. 'if' → logprob: -3.8886313438415527
    4. '<|end|>' → logprob: -4.013631343841553
    5. '       ' → logprob: -4.763631343841553
    6. '   ' → logprob: -5.513631343841553
    7. '    ' → logprob: -5.638631343841553
    8. '        ' → logprob: -7.013631343841553
    9. ' 
' → logprob: -7.388631343841553
    10. ')' → logprob: -7.388631343841553

Token 60: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5813210010528564
    2. '=' → logprob: -0.8313210010528564
    3. '=B' → logprob: -6.331320762634277
    4. ' ' → logprob: -6.706320762634277
    5. ')' → logprob: -7.081320762634277
    6. ']' → logprob: -7.581320762634277
    7. '==' → logprob: -8.956320762634277
    8. '>' → logprob: -8.956320762634277
    9. ',' → logprob: -8.956320762634277
    10. ' ==' → logprob: -9.081320762634277

Token 61: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.31327807903289795
    2. 'B' → logprob: -1.313278079032898
    3. '_B' → logprob: -12.563278198242188
    4. ' ' → logprob: -13.063278198242188
    5. 'Stack' → logprob: -13.188278198242188
    6. '	B' → logprob: -13.188278198242188
    7. '>B' → logprob: -13.438278198242188
    8. '   ' → logprob: -13.438278198242188
    9. ' Stack' → logprob: -13.563278198242188
    10. ' ' → logprob: -13.813278198242188

Token 62: '[idx' (ID: 25582)
  Prédit: '[idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[idx' → logprob: -4.5014188799541444e-05
    2. '.pop' → logprob: -11.250044822692871
    3. '   ' → logprob: -11.500044822692871
    4. '```' → logprob: -11.875044822692871
    5. '[' → logprob: -12.250044822692871
    6. 'idx' → logprob: -12.625044822692871
    7. '       ' → logprob: -13.625044822692871
    8. ' [' → logprob: -14.250044822692871
    9. '[id' → logprob: -14.500044822692871
    10. ' idx' → logprob: -14.500044822692871

Token 63: ']
' (ID: 1592)
  Prédit: ')
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -1.207137107849121
    2. '])
' → logprob: -1.457137107849121
    3. '])' → logprob: -1.457137107849121
    4. ')' → logprob: -2.207137107849121
    5. ']' → logprob: -2.707137107849121
    6. ']
' → logprob: -2.957137107849121
    7. ' )
' → logprob: -6.957137107849121
    8. '       ' → logprob: -7.207137107849121
    9. ')
' → logprob: -7.207137107849121
    10. ')]' → logprob: -7.457137107849121

Token 64: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 65: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.05241212621331215
    2. ' ' → logprob: -3.8024120330810547
    3. 'if' (adapté à ' if') → logprob: -4.052412033081055
    4. '<|end|>' → logprob: -5.427412033081055
    5. '        ' → logprob: -5.677412033081055
    6. ' Stack' → logprob: -6.677412033081055
    7. '       ' → logprob: -7.177412033081055
    8. ' stack' → logprob: -8.052412033081055
    9. 'Stack' → logprob: -8.927412033081055
    10. '    ' → logprob: -9.052412033081055

Token 66: ' idx' (ID: 14016)
  Prédit: ' item'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' item' → logprob: -0.15270982682704926
    2. ' Stack' → logprob: -2.402709722518921
    3. 'item' → logprob: -3.777709722518921
    4. ' len' → logprob: -4.5277099609375
    5. ' not' → logprob: -4.6527099609375
    6. 'Stack' → logprob: -5.2777099609375
    7. ' ' → logprob: -7.9027099609375
    8. ' stack' → logprob: -7.9027099609375
    9. 'len' → logprob: -7.9027099609375
    10. '(item' → logprob: -7.9027099609375

Token 67: '+' (ID: 10)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -1.3006229400634766
    2. '==' → logprob: -1.6756229400634766
    3. ' <' → logprob: -2.0506229400634766
    4. '+' → logprob: -2.1756229400634766
    5. ' >' → logprob: -2.1756229400634766
    6. '>' → logprob: -3.0506229400634766
    7. ' +' → logprob: -3.1756229400634766
    8. '<' → logprob: -3.3006229400634766
    9. ' and' → logprob: -3.6756229400634766
    10. ' ' → logprob: -4.675622940063477

Token 68: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.011472763493657112
    2. '2' → logprob: -5.011472702026367
    3. ' ' → logprob: -5.511472702026367
    4. 'len' → logprob: -7.511472702026367
    5. '>' → logprob: -10.886472702026367
    6. '   ' → logprob: -10.886472702026367
    7. '<len' → logprob: -10.886472702026367
    8. ' len' → logprob: -11.261472702026367
    9. '  ' → logprob: -11.511472702026367
    10. '+' → logprob: -11.636472702026367

Token 69: '==' (ID: 560)
  Prédit: '<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<' → logprob: -0.31610482931137085
    2. ' <' → logprob: -1.4411048889160156
    3. ' ==' → logprob: -3.8161048889160156
    4. '==' → logprob: -4.691104888916016
    5. '<len' → logprob: -6.691104888916016
    6. '>=' → logprob: -7.691104888916016
    7. ' >=' → logprob: -7.691104888916016
    8. ' <=' → logprob: -8.566104888916016
    9. '<=' → logprob: -8.691104888916016
    10. ' and' → logprob: -8.816104888916016

Token 70: 'item' (ID: 2057)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.4609716832637787
    2. 'item' → logprob: -1.585971713066101
    3. ' len' → logprob: -2.0859715938568115
    4. ' item' → logprob: -3.3359715938568115
    5. ' B' → logprob: -6.210971832275391
    6. 'B' → logprob: -6.210971832275391
    7. '_B' → logprob: -8.71097183227539
    8. '_N' → logprob: -8.96097183227539
    9. 'N' → logprob: -9.08597183227539
    10. ' ' → logprob: -9.58597183227539

Token 71: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.04057082161307335
    2. ' or' → logprob: -3.9155707359313965
    3. ' and' → logprob: -4.0405707359313965
    4. ':
' → logprob: -6.5405707359313965
    5. '):' → logprob: -8.290571212768555
    6. ' :' → logprob: -8.665571212768555
    7. ')' → logprob: -8.915571212768555
    8. 'and' → logprob: -9.915571212768555
    9. ':return' → logprob: -10.040571212768555
    10. ' ' → logprob: -10.165571212768555

Token 72: '           ' (ID: 352)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.04005419835448265
    2. ':
' → logprob: -3.6650540828704834
    3. ' and' → logprob: -4.9150543212890625
    4. '       ' → logprob: -5.5400543212890625
    5. '   ' → logprob: -7.4150543212890625
    6. ' or' → logprob: -7.4150543212890625
    7. '<|end|>' → logprob: -8.040054321289062
    8. '           ' → logprob: -8.665054321289062
    9. '):' → logprob: -9.165054321289062
    10. 'Stack' → logprob: -9.790054321289062

Token 73: ' Stack' (ID: 25134)
  Prédit: ' Stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Stack' → logprob: -0.6243629455566406
    2. ' B' → logprob: -0.8743629455566406
    3. 'Stack' (adapté à ' Stack') → logprob: -4.124362945556641
    4. '           ' → logprob: -4.374362945556641
    5. 'B' → logprob: -4.999362945556641
    6. '   ' → logprob: -5.749362945556641
    7. '       ' → logprob: -5.999362945556641
    8. ' End' → logprob: -6.374362945556641
    9. '               ' → logprob: -7.249362945556641
    10. ' E' → logprob: -7.249362945556641

Token 74: 'Box' (ID: 2532)
  Prédit: 'Box'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Box' → logprob: -3.128163257315464e-07
    2. 'box' → logprob: -16.125
    3. '<Box' → logprob: -17.375
    4. 'B' → logprob: -18.125
    5. 'Stack' → logprob: -18.125
    6. '...' → logprob: -18.25
    7. '.append' → logprob: -18.375
    8. '_Box' → logprob: -19.25
    9. '   ' → logprob: -19.5
    10. '```' → logprob: -19.5

Token 75: '+' (ID: 10)
  Prédit: '.append'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.000572094286326319
    2. '.' → logprob: -7.500572204589844
    3. '.pop' → logprob: -11.250572204589844
    4. '.extend' → logprob: -12.750572204589844
    5. ' .' → logprob: -13.000572204589844
    6. '.app' → logprob: -14.750572204589844
    7. 'append' → logprob: -15.375572204589844
    8. '.ap' → logprob: -15.875572204589844
    9. '.insert' → logprob: -16.000572204589844
    10. '.push' → logprob: -16.250572204589844

Token 76: '=[' (ID: 13370)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.26327189803123474
    2. '=[' → logprob: -2.1382718086242676
    3. '=B' → logprob: -2.6382718086242676
    4. '[' → logprob: -4.013271808624268
    5. ' B' → logprob: -4.388271808624268
    6. ' [' → logprob: -4.888271808624268
    7. 'B' → logprob: -6.138271808624268
    8. '[B' → logprob: -6.638271808624268
    9. '=item' → logprob: -7.888271808624268
    10. ' item' → logprob: -9.513272285461426

Token 77: 'item' (ID: 2057)
  Prédit: 'item'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'item' → logprob: -0.09289117902517319
    2. 'B' → logprob: -3.092891216278076
    3. ' item' → logprob: -3.217891216278076
    4. ' B' → logprob: -5.842891216278076
    5. '[item' → logprob: -8.217890739440918
    6. ' [' → logprob: -10.967890739440918
    7. '   ' → logprob: -10.967890739440918
    8. '[' → logprob: -11.092890739440918
    9. '(item' → logprob: -11.092890739440918
    10. '[B' → logprob: -11.092890739440918

Token 78: ']
' (ID: 1592)
  Prédit: ']
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']
' → logprob: -0.23124760389328003
    2. ']' → logprob: -1.7312476634979248
    3. ']
' → logprob: -3.606247663497925
    4. ']

' → logprob: -6.356247425079346
    5. '           ' → logprob: -8.106247901916504
    6. ' ]
' → logprob: -9.981247901916504
    7. ']

' → logprob: -10.231247901916504
    8. '];' → logprob: -10.356247901916504
    9. ' ]' → logprob: -11.231247901916504
    10. ')
' → logprob: -11.231247901916504

Token 79: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.020098581910133362
    2. ' B' → logprob: -5.145098686218262
    3. '
' → logprob: -5.270098686218262
    4. '            
' → logprob: -5.520098686218262
    5. '        
' → logprob: -7.020098686218262
    6. 'B' → logprob: -7.270098686218262
    7. '       ' → logprob: -7.395098686218262
    8. '  
' → logprob: -7.770098686218262
    9. '               ' → logprob: -8.020098686218262
    10. ' 
' → logprob: -8.270098686218262

Token 80: ' del' (ID: 1083)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.3500353991985321
    2. ' B' → logprob: -1.2250354290008545
    3. ' del' → logprob: -7.725035190582275
    4. ' 
' → logprob: -8.100035667419434
    5. '```' → logprob: -9.225035667419434
    6. '        
' → logprob: -9.350035667419434
    7. 'del' (adapté à ' del') → logprob: -9.350035667419434
    8. '    
' → logprob: -9.350035667419434
    9. '   ' → logprob: -9.350035667419434
    10. ' ' → logprob: -9.725035667419434

Token 81: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.006742135155946016
    2. 'B' → logprob: -5.006742000579834
    3. '(B' → logprob: -10.631742477416992
    4. '(' → logprob: -13.756742477416992
    5. ' ' → logprob: -13.756742477416992
    6. ' (' → logprob: -16.006742477416992
    7. ' ' → logprob: -16.131742477416992
    8. '[' → logprob: -16.506742477416992
    9. '_B' → logprob: -16.631742477416992
    10. '	B' → logprob: -16.756742477416992

Token 82: '[idx' (ID: 25582)
  Prédit: '[idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[idx' → logprob: -0.0008962165447883308
    2. '[' → logprob: -7.125896453857422
    3. '[B' → logprob: -10.000896453857422
    4. ' [' → logprob: -11.250896453857422
    5. '(idx' → logprob: -11.500896453857422
    6. '[id' → logprob: -12.125896453857422
    7. '[item' → logprob: -12.375896453857422
    8. 'B' → logprob: -12.500896453857422
    9. '[index' → logprob: -13.625896453857422
    10. '[i' → logprob: -13.750896453857422

Token 83: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.10452328622341156
    2. ']
' → logprob: -2.604523181915283
    3. ')]' → logprob: -4.104523181915283
    4. ')' → logprob: -4.979523181915283
    5. ')
' → logprob: -6.979523181915283
    6. ']
' → logprob: -7.979523181915283
    7. '           ' → logprob: -8.229523658752441
    8. ')]
' → logprob: -8.979523658752441
    9. '])' → logprob: -9.604523658752441
    10. ' ]' → logprob: -9.729523658752441

Token 84: '           ' (ID: 352)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 85: ' End' (ID: 6437)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.68367600440979
    2. ' End' → logprob: -1.30867600440979
    3. 'End' (adapté à ' End') → logprob: -1.80867600440979
    4. ' break' → logprob: -3.05867600440979
    5. 'break' → logprob: -4.683675765991211
    6. 'Break' → logprob: -5.933675765991211
    7. '            
' → logprob: -8.058675765991211
    8. '       ' → logprob: -8.058675765991211
    9. ' Break' → logprob: -8.183675765991211
    10. '	End' → logprob: -8.308675765991211

Token 86: 'Flag' (ID: 13267)
  Prédit: 'Flag'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Flag' → logprob: -9.088346359931165e-07
    2. 'flag' → logprob: -14.125000953674316
    3. 'Flags' → logprob: -17.125
    4. '_flag' → logprob: -17.25
    5. '_FLAG' → logprob: -17.375
    6. '.Flag' → logprob: -17.5
    7. 'F' → logprob: -17.625
    8. ' Flag' → logprob: -17.75
    9. '           ' → logprob: -18.5
    10. 'Flg' → logprob: -19.0

Token 87: '.s' (ID: 640)
  Prédit: '.s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.s' → logprob: -0.003344898112118244
    2. '.' → logprob: -5.753345012664795
    3. ' .' → logprob: -9.753344535827637
    4. '..' → logprob: -10.253344535827637
    5. '.=' → logprob: -10.503344535827637
    6. '.a' → logprob: -11.878344535827637
    7. 's' → logprob: -12.378344535827637
    8. ').' → logprob: -13.003344535827637
    9. '=' → logprob: -13.003344535827637
    10. '

' → logprob: -13.128344535827637

Token 88: '=False' (ID: 12148)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5241576433181763
    2. '=False' → logprob: -1.0241576433181763
    3. ' =' → logprob: -3.0241575241088867
    4. '=True' → logprob: -8.774157524108887
    5. 'False' → logprob: -10.149157524108887
    6. ' False' → logprob: -10.274157524108887
    7. '=false' → logprob: -11.774157524108887
    8. 'alse' → logprob: -11.899157524108887
    9. ' ' → logprob: -12.899157524108887
    10. '=
' → logprob: -14.024157524108887

Token 89: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0489393472671509
    2. ' ' → logprob: -1.6739393472671509
    3. '           ' → logprob: -1.6739393472671509
    4. '<|end|>' → logprob: -2.0489392280578613
    5. '       ' → logprob: -2.6739392280578613
    6. ' 
' → logprob: -3.7989392280578613
    7. '    ' → logprob: -4.548939228057861
    8. '    
' → logprob: -4.673939228057861
    9. ' if' → logprob: -4.798939228057861
    10. '  ' → logprob: -5.423939228057861

Token 90: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.2534272372722626
    2. '   ' → logprob: -1.753427267074585
    3. '       ' → logprob: -3.753427267074585
    4. ' if' → logprob: -4.253427028656006
    5. ' ' → logprob: -5.378427028656006
    6. '    ' → logprob: -5.628427028656006
    7. '<|end|>' → logprob: -6.253427028656006
    8. '            ' → logprob: -7.628427028656006
    9. '    
' → logprob: -7.628427028656006
    10. ' 
' → logprob: -8.378427505493164

Token 91: ' break' (ID: 2338)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0049241892993450165
    2. 'break' (adapté à ' break') → logprob: -6.379924297332764
    3. ' break' → logprob: -6.754924297332764
    4. ' if' → logprob: -7.379924297332764
    5. '		' → logprob: -7.754924297332764
    6. '       ' → logprob: -8.629923820495605
    7. 'if' → logprob: -8.629923820495605
    8. '	break' → logprob: -8.879923820495605
    9. '   ' → logprob: -9.129923820495605
    10. '            ' → logprob: -9.254923820495605

Token 92: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 93: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5544355511665344
    2. '<|end|>' → logprob: -2.3044354915618896
    3. '
' → logprob: -2.6794354915618896
    4. ' ' → logprob: -2.9294354915618896
    5. ' if' → logprob: -3.1794354915618896
    6. ' 
' → logprob: -3.5544354915618896
    7. '\n' → logprob: -3.8044354915618896
    8. ' else' → logprob: -4.179435729980469
    9. '    ' → logprob: -4.304435729980469
    10. '_' → logprob: -4.554435729980469

Token 94: ' else' (ID: 1203)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.03407001867890358
    2. ' if' → logprob: -3.7840700149536133
    3. 'else' (adapté à ' else') → logprob: -4.784070014953613
    4. '   ' → logprob: -7.034070014953613
    5. ' else' → logprob: -7.659070014953613
    6. '_' → logprob: -7.909070014953613
    7. 'while' → logprob: -8.159070014953613
    8. 'print' → logprob: -9.034070014953613
    9. ' ' → logprob: -9.534070014953613
    10. '    ' → logprob: -10.409070014953613

Token 95: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.13751879334449768
    2. ':
' → logprob: -2.887518882751465
    3. ' :' → logprob: -3.012518882751465
    4. ' :
' → logprob: -3.762518882751465
    5. '   ' → logprob: -8.887518882751465
    6. ':

' → logprob: -9.512518882751465
    7. '{' → logprob: -10.012518882751465
    8. ' ' → logprob: -10.512518882751465
    9. ' :

' → logprob: -10.512518882751465
    10. ' :
' → logprob: -11.137518882751465

Token 96: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.26157161593437195
    2. '   ' → logprob: -2.1365716457366943
    3. ' if' → logprob: -2.2615716457366943
    4. ' break' → logprob: -5.136571407318115
    5. ' ' → logprob: -7.261571407318115
    6. '    ' → logprob: -7.511571407318115
    7. 'if' → logprob: -8.261571884155273
    8. '           ' → logprob: -8.386571884155273
    9. ' E' → logprob: -10.011571884155273
    10. '     ' → logprob: -10.386571884155273

Token 97: ' pass' (ID: 1853)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'break' → logprob: -0.06401277333498001
    2. ' break' → logprob: -3.9390127658843994
    3. 'if' → logprob: -4.3140130043029785
    4. '   ' → logprob: -4.3140130043029785
    5. 'print' → logprob: -4.6890130043029785
    6. 'Stack' → logprob: -6.4390130043029785
    7. '       ' → logprob: -6.6890130043029785
    8. 'for' → logprob: -6.9390130043029785
    9. 'Break' → logprob: -7.5640130043029785
    10. 'E' → logprob: -7.8140130043029785

Token 98: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3256867229938507
    2. 'if' → logprob: -1.4506866931915283
    3. ' if' → logprob: -3.2006866931915283
    4. '       ' → logprob: -6.700686931610107
    5. 'print' → logprob: -6.825686931610107
    6. '_' → logprob: -8.82568645477295
    7. ' ' → logprob: -9.45068645477295
    8. 'continue' → logprob: -10.20068645477295
    9. 'while' → logprob: -10.45068645477295
    10. '    ' → logprob: -10.45068645477295

Token 99: '   ' (ID: 271)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.2901518940925598
    2. '   ' → logprob: -1.665151834487915
    3. 'print' → logprob: -2.915151834487915
    4. ' if' → logprob: -4.915152072906494
    5. '_' → logprob: -7.665152072906494
    6. '       ' → logprob: -8.415151596069336
    7. '    ' → logprob: -9.665151596069336
    8. ' ' → logprob: -10.290151596069336
    9. 'while' → logprob: -10.290151596069336
    10. '    
' → logprob: -10.415151596069336

Token 100: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14331205189228058
    2. 'if' (adapté à ' if') → logprob: -2.0183119773864746
    3. ' if' → logprob: -7.393311977386475
    4. '       ' → logprob: -12.393312454223633
    5. 'print' → logprob: -12.643312454223633
    6. '	if' → logprob: -12.643312454223633
    7. ' ' → logprob: -12.768312454223633
    8. '```' → logprob: -13.768312454223633
    9. '    
' → logprob: -13.893312454223633
    10. '_' → logprob: -13.893312454223633

Token 101: ' End' (ID: 6437)
  Prédit: ' End'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' End' → logprob: -0.08910872042179108
    2. 'End' → logprob: -2.46410870552063
    3. ' ' → logprob: -9.58910846710205
    4. ' not' → logprob: -10.08910846710205
    5. '	End' → logprob: -10.96410846710205
    6. '_End' → logprob: -11.33910846710205
    7. ' len' → logprob: -11.46410846710205
    8. 'E' → logprob: -11.83910846710205
    9. ' E' → logprob: -12.46410846710205
    10. 'len' → logprob: -12.71410846710205

Token 102: 'Flag' (ID: 13267)
  Prédit: 'Flag'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Flag' → logprob: 0.0
    2. 'Flags' → logprob: -18.0
    3. '_flag' → logprob: -19.125
    4. '.Flag' → logprob: -19.375
    5. '_FLAG' → logprob: -19.5
    6. 'flag' → logprob: -19.625
    7. 'F' → logprob: -20.0
    8. ' Flag' → logprob: -20.75
    9. '_F' → logprob: -21.625
    10. 'Flg' → logprob: -22.25

Token 103: '.s' (ID: 640)
  Prédit: '.s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.s' → logprob: -7.226628895296017e-06
    2. 's' → logprob: -12.250007629394531
    3. '.' → logprob: -13.875007629394531
    4. ').' → logprob: -14.250007629394531
    5. ' .' → logprob: -15.000007629394531
    6. '`.' → logprob: -15.250007629394531
    7. '>.' → logprob: -16.25000762939453
    8. '```' → logprob: -17.12500762939453
    9. '".' → logprob: -17.12500762939453

Token 104: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0025124046951532364
    2. ':
' → logprob: -6.127512454986572
    3. ' :' → logprob: -8.752511978149414
    4. '==' → logprob: -9.252511978149414
    5. '=True' → logprob: -10.502511978149414
    6. ':return' → logprob: -11.002511978149414
    7. '   ' → logprob: -11.877511978149414
    8. ' ==' → logprob: -11.877511978149414
    9. 'True' → logprob: -12.002511978149414
    10. ' ' → logprob: -13.502511978149414

Token 105: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.28239360451698303
    2. '   ' → logprob: -1.4073935747146606
    3. ' break' → logprob: -7.157393455505371
    4. 'break' → logprob: -8.407393455505371
    5. ' ' → logprob: -8.782393455505371
    6. '	break' → logprob: -10.282393455505371
    7. '           ' → logprob: -11.032393455505371
    8. '    ' → logprob: -12.157393455505371
    9. '```' → logprob: -12.282393455505371
    10. '>' → logprob: -12.407393455505371

Token 106: ' print' (ID: 2123)
  Prédit: ' break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' break' → logprob: -0.27949294447898865
    2. 'break' → logprob: -1.654492974281311
    3. 'print' (adapté à ' print') → logprob: -3.5294928550720215
    4. '   ' → logprob: -4.2794928550720215
    5. ' print' → logprob: -4.9044928550720215
    6. '       ' → logprob: -6.2794928550720215
    7. '	break' → logprob: -10.15449333190918
    8. 'Break' → logprob: -10.77949333190918
    9. 'Stack' → logprob: -10.90449333190918
    10. '_break' → logprob: -11.15449333190918

Token 107: '(-' (ID: 8087)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.852491557598114
    2. '("' → logprob: -1.4774916172027588
    3. '('' → logprob: -1.8524916172027588
    4. '(-' → logprob: -1.8524916172027588
    5. '(' → logprob: -4.35249137878418
    6. '"' → logprob: -4.72749137878418
    7. '(len' → logprob: -5.35249137878418
    8. '0' → logprob: -6.22749137878418
    9. ''' → logprob: -6.60249137878418
    10. 'len' → logprob: -7.22749137878418

Token 108: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -7.107425062713446e-06
    2. ' ' → logprob: -12.125006675720215
    3. '2' → logprob: -14.250006675720215
    4. '
' → logprob: -15.750006675720215
    5. '-' → logprob: -16.00000762939453
    6. '   ' → logprob: -16.25000762939453
    7. '１' → logprob: -16.31250762939453
    8. 'len' → logprob: -16.31250762939453
    9. '  ' → logprob: -16.81250762939453
    10. '(' → logprob: -16.81250762939453

Token 109: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.011077644303441048
    2. ')' → logprob: -4.511077880859375
    3. ')
' → logprob: -10.511077880859375
    4. ' )
' → logprob: -14.136077880859375
    5. ');' → logprob: -14.386077880859375
    6. ')return' → logprob: -15.261077880859375
    7. ',' → logprob: -15.386077880859375
    8. '   ' → logprob: -15.511077880859375
    9. ')`
' → logprob: -15.511077880859375
    10. '       ' → logprob: -16.011077880859375

Token 110: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0010410251561552286
    2. '   ' → logprob: -7.001040935516357
    3. '<|end|>' → logprob: -9.751041412353516
    4. 'else' → logprob: -10.376041412353516
    5. ' ' → logprob: -10.751041412353516
    6. ' else' → logprob: -11.501041412353516
    7. '           ' → logprob: -12.626041412353516
    8. '	' → logprob: -13.751041412353516
    9. '  ' → logprob: -14.126041412353516
    10. '0' → logprob: -14.251041412353516

Token 111: ' quit' (ID: 27737)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0015548591036349535
    2. 'break' → logprob: -6.5015549659729
    3. ' break' → logprob: -11.001554489135742
    4. '   ' → logprob: -11.251554489135742
    5. 'exit' → logprob: -11.251554489135742
    6. '	break' → logprob: -12.126554489135742
    7. '        
' → logprob: -13.376554489135742
    8. 'import' → logprob: -14.126554489135742
    9. ' ' → logprob: -14.251554489135742
    10. '_break' → logprob: -14.626554489135742

Token 112: '()

' (ID: 5874)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0003424951864872128
    2. 'Stack' → logprob: -8.87534236907959
    3. 'else' → logprob: -9.50034236907959
    4. 'if' → logprob: -9.62534236907959
    5. '
' → logprob: -11.12534236907959
    6. '```' → logprob: -11.12534236907959
    7. '   ' → logprob: -11.75034236907959
    8. '    
' → logprob: -11.75034236907959
    9. 'for' → logprob: -12.75034236907959
    10. '_' → logprob: -13.12534236907959

Token 113: 'P' (ID: 47)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0005436192732304335
    2. 'for' → logprob: -8.250543594360352
    3. 'while' → logprob: -8.500543594360352
    4. 'if' → logprob: -9.750543594360352
    5. 'else' → logprob: -12.125543594360352
    6. ' print' → logprob: -12.375543594360352
    7. 'Stack' → logprob: -12.750543594360352
    8. '   ' → logprob: -13.500543594360352
    9. '-' → logprob: -13.875543594360352
    10. '```' → logprob: -13.875543594360352

Token 114: '=' (ID: 28)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -3.531315314830863e-06
    2. 'R' → logprob: -13.250003814697266
    3. ' r' → logprob: -13.750003814697266
    4. 'print' → logprob: -14.750003814697266
    5. '_r' → logprob: -16.000003814697266
    6. '(r' → logprob: -16.500003814697266
    7. '[r' → logprob: -17.375003814697266
    8. '```' → logprob: -18.500003814697266
    9. 'int' → logprob: -19.250003814697266
    10. '#' → logprob: -20.250003814697266

Token 115: 'iter' (ID: 2340)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.5746020674705505
    2. 'Stack' → logprob: -0.9496020674705505
    3. '[len' → logprob: -3.9496021270751953
    4. 'max' → logprob: -4.824602127075195
    5. '"' → logprob: -5.574602127075195
    6. '''.' → logprob: -5.699602127075195
    7. '(len' → logprob: -5.949602127075195
    8. '[' → logprob: -6.199602127075195
    9. ' len' → logprob: -6.324602127075195
    10. ''' → logprob: -6.324602127075195

Token 116: '(Stack' (ID: 187305)
  Prédit: '(Stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(Stack' → logprob: -0.00022690063633490354
    2. '(' → logprob: -9.625226974487305
    3. '([' → logprob: -9.875226974487305
    4. 'Stack' → logprob: -10.625226974487305
    5. '([]' → logprob: -10.750226974487305
    6. '(stack' → logprob: -11.000226974487305
    7. '(sorted' → logprob: -11.250226974487305
    8. '(range' → logprob: -11.250226974487305
    9. '(len' → logprob: -11.875226974487305
    10. '((' → logprob: -12.500226974487305

Token 117: 'Box' (ID: 2532)
  Prédit: 'Box'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Box' → logprob: -1.3856492842023727e-06
    2. '(Box' → logprob: -14.125000953674316
    3. 'box' → logprob: -15.375000953674316
    4. 'Stack' → logprob: -15.875000953674316
    5. '<Box' → logprob: -16.125001907348633
    6. ')' → logprob: -16.875001907348633
    7. '_Box' → logprob: -17.375001907348633
    8. '_box' → logprob: -17.750001907348633
    9. 'BOX' → logprob: -17.875001907348633
    10. ' Box' → logprob: -18.000001907348633

Token 118: '[::-' (ID: 159890)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0014897463843226433
    2. ')
' → logprob: -7.001489639282227
    3. '())' → logprob: -7.876489639282227
    4. '()' → logprob: -8.751489639282227
    5. ' )' → logprob: -11.126489639282227
    6. '))' → logprob: -11.126489639282227
    7. ')

' → logprob: -12.501489639282227
    8. '(' → logprob: -13.751489639282227
    9. '()
' → logprob: -13.751489639282227
    10. '())
' → logprob: -14.001489639282227

Token 119: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.1235022023320198
    2. 'd' → logprob: -2.998502254486084
    3. 'er' → logprob: -4.123502254486084
    4. 'ex' → logprob: -4.498502254486084
    5. 'ed' → logprob: -4.623502254486084
    6. ')' → logprob: -4.998502254486084
    7. 'x' → logprob: -5.248502254486084
    8. 'dex' → logprob: -5.748502254486084
    9. 'v' → logprob: -6.748502254486084
    10. 'al' → logprob: -6.998502254486084

Token 120: '])
' (ID: 5169)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0002584785979706794
    2. '())' → logprob: -8.375258445739746
    3. '()' → logprob: -10.625258445739746
    4. '))' → logprob: -13.500258445739746
    5. ')
' → logprob: -14.125258445739746
    6. ' )' → logprob: -14.750258445739746
    7. '])' → logprob: -15.000258445739746
    8. '})' → logprob: -15.750258445739746
    9. ')`' → logprob: -16.250259399414062
    10. ')

' → logprob: -16.375259399414062

Token 121: 'try' (ID: 1806)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.10193730890750885
    2. 'for' → logprob: -2.3519372940063477
    3. 'try' → logprob: -6.726937294006348
    4. 'result' → logprob: -8.351937294006348
    5. 'answer' → logprob: -9.226937294006348
    6. 'while' → logprob: -10.226937294006348
    7. 'pr' → logprob: -10.476937294006348
    8. 'p' → logprob: -10.601937294006348
    9. 'next' → logprob: -10.601937294006348
    10. 'output' → logprob: -11.476937294006348

Token 122: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0062326062470674515
    2. ':
' → logprob: -5.131232738494873
    3. ' :' → logprob: -8.131232261657715
    4. ' :
' → logprob: -13.006232261657715
    5. ':def' → logprob: -13.631232261657715
    6. '(' → logprob: -14.006232261657715
    7. ':
' → logprob: -14.381232261657715
    8. '():' → logprob: -14.506232261657715
    9. 'except' → logprob: -14.506232261657715
    10. ' except' → logprob: -14.506232261657715

Token 123: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5741611123085022
    2. ':' → logprob: -1.6991610527038574
    3. ' print' → logprob: -2.0741610527038574
    4. ' while' → logprob: -3.1991610527038574
    5. ' next' → logprob: -3.5741610527038574
    6. 'print' → logprob: -3.9491610527038574
    7. ' p' → logprob: -4.574161052703857
    8. ' P' → logprob: -4.824161052703857
    9. ':
' → logprob: -4.824161052703857
    10. 'next' → logprob: -5.574161052703857

Token 124: ' while' (ID: 2049)
  Prédit: ' while'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' while' → logprob: -0.7664119601249695
    2. ' print' → logprob: -1.1414120197296143
    3. 'print' → logprob: -2.1414120197296143
    4. '   ' → logprob: -3.0164120197296143
    5. 'while' (adapté à ' while') → logprob: -3.2664120197296143
    6. ' next' → logprob: -5.266411781311035
    7. 'next' → logprob: -6.266411781311035
    8. ':' → logprob: -6.891411781311035
    9. ':
' → logprob: -7.141411781311035
    10. '
' → logprob: -8.141411781311035

Token 125: ' ' (ID: 220)
  Prédit: ' True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.5772393345832825
    2. 'True' → logprob: -0.8272393345832825
    3. '1' → logprob: -7.702239513397217
    4. ' ' → logprob: -7.827239513397217
    5. '(True' → logprob: -7.827239513397217
    6. '   ' → logprob: -10.577239036560059
    7. '  ' → logprob: -10.952239036560059
    8. 'next' → logprob: -13.452239036560059
    9. '=True' → logprob: -13.952239036560059
    10. '    ' → logprob: -14.077239036560059

Token 126: '1' (ID: 16)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.000504062045365572
    2. '1' → logprob: -8.250504493713379
    3. ' True' → logprob: -8.500504493713379
    4. '(True' → logprob: -10.875504493713379
    5. 'next' → logprob: -11.250504493713379
    6. 'len' → logprob: -13.000504493713379
    7. '_true' → logprob: -13.875504493713379
    8. '_' → logprob: -14.000504493713379
    9. 'true' → logprob: -14.250504493713379
    10. 'P' → logprob: -14.500504493713379

Token 127: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.01538296602666378
    2. ':
' → logprob: -4.515382766723633
    3. '():' → logprob: -5.640382766723633
    4. '       ' → logprob: -8.140382766723633
    5. '():
' → logprob: -8.890382766723633
    6. '):' → logprob: -8.890382766723633
    7. '   ' → logprob: -8.890382766723633
    8. ' :' → logprob: -10.265382766723633
    9. '):
' → logprob: -11.890382766723633
    10. '=' → logprob: -12.390382766723633

Token 128: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.21808817982673645
    2. '       ' → logprob: -2.093088150024414
    3. ':' → logprob: -2.968088150024414
    4. ' print' → logprob: -4.093088150024414
    5. ':
' → logprob: -7.093088150024414
    6. ' ' → logprob: -7.343088150024414
    7. ',' → logprob: -7.968088150024414
    8. ' n' → logprob: -8.093088150024414
    9. 'print' → logprob: -8.218088150024414
    10. ' p' → logprob: -8.218088150024414

Token 129: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.2385471612215042
    2. 'next' → logprob: -2.6135470867156982
    3. ' print' → logprob: -3.4885470867156982
    4. 'n' → logprob: -3.6135470867156982
    5. ' next' → logprob: -3.6135470867156982
    6. 'a' → logprob: -4.238547325134277
    7. '   ' → logprob: -4.613547325134277
    8. '_' → logprob: -4.863547325134277
    9. 'x' → logprob: -5.113547325134277
    10. ' nxt' → logprob: -5.363547325134277

Token 130: '(next' (ID: 28757)
  Prédit: '(next'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(next' → logprob: -0.0032434279564768076
    2. '(' → logprob: -5.753243446350098
    3. ' (' → logprob: -10.003243446350098
    4. '('' → logprob: -11.253243446350098
    5. 'next' → logprob: -12.128243446350098
    6. ' next' → logprob: -13.378243446350098
    7. '(
' → logprob: -15.253243446350098
    8. '("' → logprob: -15.628243446350098
    9. '(chr' → logprob: -16.50324249267578
    10. '()' → logprob: -18.00324249267578

Token 131: '(P' (ID: 8952)
  Prédit: '(P'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(P' → logprob: -2.4868770196917467e-05
    2. '(' → logprob: -10.625024795532227
    3. ' (' → logprob: -14.875024795532227
    4. ')' → logprob: -16.000024795532227
    5. 'P' → logprob: -17.250024795532227
    6. '(
' → logprob: -18.250024795532227
    7. ' ' → logprob: -18.500024795532227
    8. '(p' → logprob: -18.500024795532227
    9. ')(' → logprob: -18.875024795532227
    10. '(Py' → logprob: -19.500024795532227

Token 132: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.06587862223386765
    2. ')' → logprob: -3.0658786296844482
    3. '),' → logprob: -4.690878391265869
    4. '()))' → logprob: -4.940878391265869
    5. '())' → logprob: -7.815878391265869
    6. ' ))' → logprob: -8.940878868103027
    7. ')))' → logprob: -9.315878868103027
    8. '()),' → logprob: -9.815878868103027
    9. '()' → logprob: -10.190878868103027
    10. ',' → logprob: -10.190878868103027

Token 133: 'except' (ID: 25035)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 134: ' Stop' (ID: 22535)
  Prédit: ' Stop'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Stop' → logprob: -0.029754776507616043
    2. 'Stop' → logprob: -3.529754877090454
    3. '_Stop' → logprob: -12.404754638671875
    4. '(' → logprob: -16.154754638671875
    5. '_stop' → logprob: -16.904754638671875
    6. '.Stop' → logprob: -17.029754638671875
    7. '   ' → logprob: -18.029754638671875
    8. '
' → logprob: -18.154754638671875
    9. 'STOP' → logprob: -19.154754638671875
    10. '_STOP' → logprob: -19.279754638671875

Token 135: 'Iteration' (ID: 77823)
  Prédit: 'Iteration'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Iteration' → logprob: -3.128163257315464e-07
    2. 'Iterator' → logprob: -16.125
    3. 'Async' → logprob: -16.25
    4. 'iteration' → logprob: -16.875
    5. ' iteration' → logprob: -19.125
    6. 'Exception' → logprob: -19.625
    7. 'Iter' → logprob: -19.625
    8. 'Execution' → logprob: -20.0
    9. 'Iterations' → logprob: -20.125
    10. '_iteration' → logprob: -20.125

Token 136: ':' (ID: 25)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.14743652939796448
    2. ':' → logprob: -2.0224366188049316
    3. '():' → logprob: -5.522436618804932
    4. ':
' → logprob: -8.022436141967773
    5. '   ' → logprob: -8.522436141967773
    6. '():
' → logprob: -9.647436141967773
    7. ')' → logprob: -10.647436141967773
    8. ' break' → logprob: -10.647436141967773
    9. '()
' → logprob: -11.147436141967773
    10. '(' → logprob: -11.272436141967773

Token 137: ' pass' (ID: 1853)
  Prédit: ' pass'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pass' → logprob: -0.011366575956344604
    2. 'pass' → logprob: -4.511366367340088
    3. ' None' → logprob: -8.886366844177246
    4. '...' → logprob: -10.136366844177246
    5. '   ' → logprob: -10.386366844177246
    6. '	pass' → logprob: -10.386366844177246
    7. '    ' → logprob: -10.761366844177246
    8. 'None' → logprob: -10.761366844177246
    9. ' ' → logprob: -10.886366844177246
    10. ' break' → logprob: -12.386366844177246


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 135
Tokens correctement prédits (1ère position, stricte): 49
Tokens correctement prédits (1ère position, avec adaptation): 50
Tokens correctement prédits (top 10): 92
Précision stricte (1ère position): 36.30%
Précision adaptée (1ère position): 37.04%
Précision (top 10): 68.15%
================================================================================
