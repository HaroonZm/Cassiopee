================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:16:21
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
def check(val): return "ABC" if val<=999 else None
class X:
    def __init__(self, v): self.v = v
    def res(self): 
        if self.v>999: 
            return "ABD"
n_val = check(n)
if n_val:
    print(n_val)
else:
    x = X(n)
    print(x.res())
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00015550498210359365
    2. '(n' → logprob: -10.250155448913574
    3. '(
' → logprob: -10.250155448913574
    4. ''' → logprob: -10.625155448913574
    5. '```' → logprob: -11.000155448913574
    6. '('' → logprob: -11.375155448913574
    7. '`' → logprob: -11.500155448913574
    8. '("("' → logprob: -12.250155448913574
    9. '(input' → logprob: -12.750155448913574
    10. ')' → logprob: -12.750155448913574

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.11869344860315323
    2. ')' → logprob: -2.2436933517456055
    3. '()' → logprob: -5.3686933517456055
    4. '())' → logprob: -7.4936933517456055
    5. '(
' → logprob: -8.243693351745605
    6. '```' → logprob: -9.993693351745605
    7. '(

' → logprob: -10.368693351745605
    8. '('' → logprob: -10.493693351745605
    9. ''' → logprob: -10.618693351745605
    10. '(n' → logprob: -10.868693351745605

Token 5: 'def' (ID: 1314)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.7040315866470337
    2. 'if' → logprob: -1.4540315866470337
    3. 'for' → logprob: -2.329031467437744
    4. 's' → logprob: -2.454031467437744
    5. 'f' → logprob: -4.329031467437744
    6. ' ' → logprob: -4.454031467437744
    7. 'x' → logprob: -4.829031467437744
    8. ')' → logprob: -4.954031467437744
    9. 'a' → logprob: -4.954031467437744
    10. ''' → logprob: -5.079031467437744

Token 6: ' check' (ID: 2371)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.05204417556524277
    2. '_' → logprob: -3.927044153213501
    3. ' factorial' → logprob: -4.30204439163208
    4. ' space' → logprob: -4.55204439163208
    5. ' _' → logprob: -6.30204439163208
    6. ' f' → logprob: -7.05204439163208
    7. ' add' → logprob: -7.30204439163208
    8. ' my' → logprob: -7.42704439163208
    9. ' function' → logprob: -7.55204439163208
    10. ' calculate' → logprob: -8.552043914794922

Token 7: '(val' (ID: 17391)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.01442685816437006
    2. '(' → logprob: -4.2644267082214355
    3. '_(' → logprob: -9.764427185058594
    4. ' _' → logprob: -9.889427185058594
    5. ')' → logprob: -10.514427185058594
    6. '_space' → logprob: -10.889427185058594
    7. '_s' → logprob: -11.014427185058594
    8. ' ' → logprob: -11.014427185058594
    9. '(_' → logprob: -11.514427185058594
    10. '(_)' → logprob: -11.639427185058594

Token 8: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.05175488442182541
    2. ')' → logprob: -3.051754951477051
    3. '_' → logprob: -6.426754951477051
    4. '(' → logprob: -7.176754951477051
    5. ' ):' → logprob: -7.926754951477051
    6. ',' → logprob: -9.80175495147705
    7. 's' → logprob: -9.92675495147705
    8. ':' → logprob: -9.92675495147705
    9. ')):' → logprob: -10.05175495147705
    10. '):
' → logprob: -10.17675495147705

Token 9: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0930381491780281
    2. '(' → logprob: -2.9680380821228027
    3. ' ' → logprob: -3.8430380821228027
    4. ':' → logprob: -4.593038082122803
    5. '    ' → logprob: -6.593038082122803
    6. ')' → logprob: -6.718038082122803
    7. ' (' → logprob: -7.593038082122803
    8. '    
' → logprob: -7.718038082122803
    9. '  ' → logprob: -7.968038082122803
    10. ' return' → logprob: -8.093038558959961

Token 10: ' "' (ID: 392)
  Prédit: ' val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' val' → logprob: -0.13278235495090485
    2. ' ' → logprob: -2.507782459259033
    3. 'val' → logprob: -3.382782459259033
    4. ' True' → logprob: -5.132782459259033
    5. ' False' → logprob: -6.882782459259033
    6. ' abs' → logprob: -7.257782459259033
    7. ' isinstance' → logprob: -8.757781982421875
    8. 'True' → logprob: -9.007781982421875
    9. 'False' → logprob: -9.132781982421875
    10. ''' → logprob: -9.132781982421875

Token 11: 'ABC' (ID: 44197)
  Prédit: 'YES'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'YES' → logprob: -1.4128321409225464
    2. 'Yes' → logprob: -1.7878321409225464
    3. ' "' → logprob: -2.162832260131836
    4. 'Even' → logprob: -3.162832260131836
    5. '"' → logprob: -3.162832260131836
    6. ' even' → logprob: -3.287832260131836
    7. ' YES' → logprob: -3.287832260131836
    8. 'even' → logprob: -3.412832260131836
    9. ' Yes' → logprob: -3.787832260131836
    10. 'NO' → logprob: -3.787832260131836

Token 12: '"' (ID: 1)
  Prédit: '"'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.001749434508383274
    2. '")' → logprob: -6.876749515533447
    3. 'def' → logprob: -8.501749038696289
    4. 'D' → logprob: -9.126749038696289
    5. '">' → logprob: -9.626749038696289
    6. '"[' → logprob: -10.126749038696289
    7. '"""' → logprob: -10.251749038696289
    8. '123' → logprob: -10.376749038696289
    9. 'DEF' → logprob: -10.501749038696289
    10. '".' → logprob: -10.876749038696289

Token 13: ' if' (ID: 538)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.051590509712696075
    2. ')' → logprob: -4.926590442657471
    3. '<|end|>' → logprob: -4.926590442657471
    4. '[' → logprob: -5.051590442657471
    5. '(
' → logprob: -5.301590442657471
    6. '(n' → logprob: -5.301590442657471
    7. 'if' → logprob: -5.426590442657471
    8. '()' → logprob: -6.051590442657471
    9. 'n' → logprob: -6.301590442657471
    10. '#' → logprob: -6.551590442657471

Token 14: ' val' (ID: 1459)
  Prédit: ' val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' val' → logprob: -0.0011965400772169232
    2. 'val' → logprob: -6.751196384429932
    3. ' ' → logprob: -11.75119686126709
    4. ' n' → logprob: -11.75119686126709
    5. '(val' → logprob: -12.37619686126709
    6. ' not' → logprob: -12.87619686126709
    7. '[val' → logprob: -13.87619686126709
    8. ' (' → logprob: -14.12619686126709
    9. '	val' → logprob: -14.75119686126709
    10. '_val' → logprob: -15.12619686126709

Token 15: '<=' (ID: 16672)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.3806203603744507
    2. '==' → logprob: -1.5056203603744507
    3. ' >' → logprob: -3.5056204795837402
    4. ' >=' → logprob: -3.6306204795837402
    5. '>' → logprob: -4.00562047958374
    6. ' ' → logprob: -5.25562047958374
    7. '>=' → logprob: -5.38062047958374
    8. ' %' → logprob: -6.13062047958374
    9. '.startswith' → logprob: -6.13062047958374
    10. ' <' → logprob: -6.75562047958374

Token 16: '999' (ID: 9130)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '3' → logprob: -0.36449891328811646
    2. ' ' → logprob: -2.1144988536834717
    3. '10' → logprob: -3.4894988536834717
    4. '18' → logprob: -3.7394988536834717
    5. '100' → logprob: -3.9894988536834717
    6. '99' → logprob: -4.364499092102051
    7. '42' → logprob: -4.489499092102051
    8. '5' → logprob: -4.614499092102051
    9. '0' → logprob: -4.989499092102051
    10. '50' → logprob: -5.114499092102051

Token 17: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.05517732352018356
    2. 'else' → logprob: -2.9301772117614746
    3. '+' → logprob: -9.555177688598633
    4. ' ' → logprob: -9.680177688598633
    5. '-' → logprob: -10.055177688598633
    6. '```' → logprob: -10.430177688598633
    7. '0' → logprob: -11.430177688598633
    8. ' ' → logprob: -11.555177688598633
    9. ' and' → logprob: -11.680177688598633
    10. '3' → logprob: -12.555177688598633

Token 18: ' None' (ID: 4662)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.008843475952744484
    2. ' "' → logprob: -5.008843421936035
    3. ''' → logprob: -6.258843421936035
    4. ' ' → logprob: -9.133843421936035
    5. '`' → logprob: -10.508843421936035
    6. '_' → logprob: -11.508843421936035
    7. ' '' → logprob: -11.633843421936035
    8. '"""' → logprob: -11.758843421936035
    9. '```' → logprob: -11.883843421936035
    10. ' ' → logprob: -11.946343421936035

Token 19: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 20: 'class' (ID: 1444)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.8708203434944153
    2. '\n' → logprob: -1.6208202838897705
    3. '
' → logprob: -2.2458202838897705
    4. '(n' → logprob: -3.1208202838897705
    5. '```' → logprob: -3.1208202838897705
    6. 'print' → logprob: -3.4958202838897705
    7. '(' → logprob: -3.8708202838897705
    8. '\' → logprob: -3.9958202838897705
    9. '<|end|>' → logprob: -3.9958202838897705
    10. ')' → logprob: -4.12082052230835

Token 21: ' X' (ID: 2127)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.1039764881134033
    2. ' Solution' → logprob: -1.8539764881134033
    3. ' My' → logprob: -1.9789764881134033
    4. ' A' → logprob: -2.2289764881134033
    5. ' Checker' → logprob: -2.8539764881134033
    6. ' User' → logprob: -3.1039764881134033
    7. ' Calculator' → logprob: -3.7289764881134033
    8. ' ' → logprob: -3.9789764881134033
    9. ' Test' → logprob: -4.603976249694824
    10. ' Data' → logprob: -4.728976249694824

Token 22: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0028699003159999847
    2. ' :' → logprob: -6.377870082855225
    3. ':
' → logprob: -7.502870082855225
    4. '(' → logprob: -7.877870082855225
    5. '<|end|>' → logprob: -9.627869606018066
    6. '():' → logprob: -9.877869606018066
    7. '):' → logprob: -10.127869606018066
    8. '(object' → logprob: -11.377869606018066
    9. '>:' → logprob: -11.502869606018066
    10. ' ' → logprob: -11.627869606018066

Token 23: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.39401599764823914
    2. '<|end|>' → logprob: -1.3940160274505615
    3. ' ' → logprob: -3.2690160274505615
    4. '    ' → logprob: -4.769015789031982
    5. ' def' → logprob: -5.019015789031982
    6. '    
' → logprob: -5.269015789031982
    7. '  ' → logprob: -5.769015789031982
    8. 'def' → logprob: -5.894015789031982
    9. '
' → logprob: -6.019015789031982
    10. '<|end|>' → logprob: -6.269015789031982

Token 24: ' def' (ID: 1056)
  Prédit: ' def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' def' → logprob: -0.11164530366659164
    2. 'def' (adapté à ' def') → logprob: -2.861645221710205
    3. ' pass' → logprob: -4.236645221710205
    4. '    ' → logprob: -4.611645221710205
    5. '   ' → logprob: -4.861645221710205
    6. ' d' → logprob: -4.986645221710205
    7. 'd' → logprob: -5.611645221710205
    8. ' ' → logprob: -5.861645221710205
    9. ' 
' → logprob: -7.861645221710205
    10. ' _' → logprob: -7.986645221710205

Token 25: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.6837775111198425
    2. ' init' → logprob: -0.8087775111198425
    3. ' check' → logprob: -3.9337775707244873
    4. ' _' → logprob: -4.433777332305908
    5. 'init' → logprob: -4.683777332305908
    6. ' ' → logprob: -4.933777332305908
    7. '__' → logprob: -7.308777332305908
    8. '_init' → logprob: -7.683777332305908
    9. '_' → logprob: -9.058777809143066
    10. ' def' → logprob: -9.308777809143066

Token 26: 'init' (ID: 3287)
  Prédit: 'init'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'init' → logprob: -7.576873758807778e-05
    2. 'ini' → logprob: -9.750075340270996
    3. 'i' → logprob: -11.375075340270996
    4. 'in' → logprob: -12.500075340270996
    5. ' init' → logprob: -13.625075340270996
    6. 'int' → logprob: -15.000075340270996
    7. 'inti' → logprob: -15.250075340270996
    8. 'innit' → logprob: -15.500075340270996
    9. 'inite' → logprob: -16.500076293945312
    10. '	init' → logprob: -16.750076293945312

Token 27: '__(' (ID: 8241)
  Prédit: '__('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__(' → logprob: -0.06201361492276192
    2. '__' → logprob: -2.812013626098633
    3. '__(
' → logprob: -10.437013626098633
    4. '__((' → logprob: -11.937013626098633
    5. '___' → logprob: -12.937013626098633
    6. '__('' → logprob: -13.062013626098633
    7. '(self' → logprob: -13.437013626098633
    8. '_' → logprob: -13.812013626098633
    9. '__(*' → logprob: -13.937013626098633
    10. '(' → logprob: -13.937013626098633

Token 28: 'self' (ID: 1156)
  Prédit: 'self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' → logprob: -0.0036994852125644684
    2. ' self' → logprob: -5.62869930267334
    3. 'val' → logprob: -9.75369930267334
    4. ')' → logprob: -11.12869930267334
    5. ' ' → logprob: -11.12869930267334
    6. '   ' → logprob: -12.87869930267334
    7. 's' → logprob: -12.87869930267334
    8. '0' → logprob: -13.75369930267334
    9. ' val' → logprob: -13.87869930267334
    10. '	self' → logprob: -13.87869930267334

Token 29: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.13289758563041687
    2. ' ,' → logprob: -2.1328976154327393
    3. 'self' → logprob: -5.25789737701416
    4. ',self' → logprob: -7.50789737701416
    5. ',val' → logprob: -9.75789737701416
    6. ' self' → logprob: -10.00789737701416
    7. '_,' → logprob: -10.50789737701416
    8. ',n' → logprob: -10.63289737701416
    9. 'n' → logprob: -11.25789737701416
    10. ' ' → logprob: -12.00789737701416

Token 30: ' v' (ID: 323)
  Prédit: ' val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' val' → logprob: -0.6784663796424866
    2. ' self' → logprob: -1.4284663200378418
    3. 'val' → logprob: -1.9284663200378418
    4. 'self' → logprob: -2.803466320037842
    5. ' value' → logprob: -3.928466320037842
    6. ' n' → logprob: -4.553466320037842
    7. 'value' → logprob: -4.678466320037842
    8. 'n' → logprob: -5.553466320037842
    9. ' x' → logprob: -6.928466320037842
    10. ' a' → logprob: -7.928466320037842

Token 31: '):' (ID: 3127)
  Prédit: 'al'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'al' → logprob: -0.6452929377555847
    2. '):' → logprob: -1.3952929973602295
    3. 'alue' → logprob: -1.5202929973602295
    4. '):
' → logprob: -5.27029275894165
    5. ')' → logprob: -6.27029275894165
    6. 'ALUE' → logprob: -7.64529275894165
    7. '   ' → logprob: -7.64529275894165
    8. 'alu' → logprob: -8.270293235778809
    9. 'a' → logprob: -8.395293235778809
    10. ' alue' → logprob: -9.270293235778809

Token 32: ' self' (ID: 1051)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.04373738914728165
    2. ' self' → logprob: -4.168737411499023
    3. ' ' → logprob: -4.418737411499023
    4. '<|end|>' → logprob: -4.793737411499023
    5. '    ' → logprob: -6.168737411499023
    6. '   ' → logprob: -6.668737411499023
    7. '        ' → logprob: -7.043737411499023
    8. 'self' → logprob: -7.168737411499023
    9. ' 
' → logprob: -8.043737411499023
    10. '        
' → logprob: -8.668737411499023

Token 33: '.v' (ID: 5520)
  Prédit: '.v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.v' → logprob: -0.10590029507875443
    2. '.' → logprob: -2.855900287628174
    3. '.value' → logprob: -3.730900287628174
    4. '.val' → logprob: -3.980900287628174
    5. '._' → logprob: -8.730900764465332
    6. ' .' → logprob: -9.730900764465332
    7. '.i' → logprob: -11.605900764465332
    8. '.iv' → logprob: -11.605900764465332
    9. '.valor' → logprob: -11.605900764465332
    10. '.s' → logprob: -12.105900764465332

Token 34: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4741605818271637
    2. '=' → logprob: -0.9741605520248413
    3. '=v' → logprob: -9.849160194396973
    4. '<|end|>' → logprob: -10.724160194396973
    5. ' ' → logprob: -12.224160194396973
    6. '=value' → logprob: -13.849160194396973
    7. ' =
' → logprob: -14.724160194396973
    8. '=int' → logprob: -15.099160194396973
    9. '_=' → logprob: -15.224160194396973
    10. '=end' → logprob: -15.724160194396973

Token 35: ' v' (ID: 323)
  Prédit: ' v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' v' → logprob: -0.4742673933506012
    2. 'v' → logprob: -0.9742673635482788
    3. ' ' → logprob: -9.59926700592041
    4. 'val' → logprob: -9.72426700592041
    5. ' val' → logprob: -9.97426700592041
    6. '	v' → logprob: -11.84926700592041
    7. '<|end|>' → logprob: -12.59926700592041
    8. '<|end|>' → logprob: -13.22426700592041
    9. ' ' → logprob: -13.59926700592041
    10. '    ' → logprob: -15.47426700592041

Token 36: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.060688551515340805
    2. '<|end|>' → logprob: -3.6856884956359863
    3. '   ' → logprob: -4.935688495635986
    4. '    
' → logprob: -5.060688495635986
    5. '\n' → logprob: -5.560688495635986
    6. 'n' → logprob: -5.685688495635986
    7. 'def' → logprob: -5.810688495635986
    8. '\' → logprob: -6.685688495635986
    9. '  
' → logprob: -6.810688495635986
    10. ' 
' → logprob: -6.935688495635986

Token 37: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.058269038796424866
    2. '<|end|>' → logprob: -3.8082690238952637
    3. 'def' → logprob: -4.183269023895264
    4. '    
' → logprob: -5.433269023895264
    5. '   ' → logprob: -5.683269023895264
    6. '```' → logprob: -6.433269023895264
    7. 'n' → logprob: -6.683269023895264
    8. '  
' → logprob: -6.683269023895264
    9. ' 
' → logprob: -6.808269023895264
    10. '

' → logprob: -7.183269023895264

Token 38: ' def' (ID: 1056)
  Prédit: ' def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' def' → logprob: -0.4164391756057739
    2. 'def' (adapté à ' def') → logprob: -1.541439175605774
    3. '
' → logprob: -2.6664390563964844
    4. '   ' → logprob: -3.0414390563964844
    5. '	def' → logprob: -5.916439056396484
    6. '    
' → logprob: -6.041439056396484
    7. ' 
' → logprob: -6.291439056396484
    8. ' ' → logprob: -7.291439056396484
    9. '<|end|>' → logprob: -7.666439056396484
    10. '    ' → logprob: -8.541439056396484

Token 39: ' res' (ID: 694)
  Prédit: ' check'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' check' → logprob: -0.010248606093227863
    2. ' __' → logprob: -5.38524866104126
    3. 'check' → logprob: -6.01024866104126
    4. ' ' → logprob: -7.01024866104126
    5. ' _' → logprob: -7.26024866104126
    6. '__' → logprob: -7.26024866104126
    7. '_' → logprob: -7.88524866104126
    8. '_check' → logprob: -8.135248184204102
    9. ' def' → logprob: -10.385248184204102
    10. ' get' → logprob: -10.635248184204102

Token 40: '(self' (ID: 2402)
  Prédit: 'ult'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ult' → logprob: -0.009128324687480927
    2. 't' → logprob: -5.634128093719482
    3. 'u' → logprob: -5.759128093719482
    4. 'olve' → logprob: -7.134128093719482
    5. '()' → logprob: -7.759128093719482
    6. '():' → logprob: -8.38412857055664
    7. 'ults' → logprob: -8.50912857055664
    8. 'ultat' → logprob: -8.63412857055664
    9. '=' → logprob: -9.13412857055664
    10. '(self' → logprob: -9.63412857055664

Token 41: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.003856959054246545
    2. '):
' → logprob: -6.253857135772705
    3. ' ):' → logprob: -6.503857135772705
    4. ',' → logprob: -9.253856658935547
    5. ')' → logprob: -9.753856658935547
    6. '   ' → logprob: -10.253856658935547
    7. '  ' → logprob: -10.378856658935547
    8. ' ' → logprob: -10.378856658935547
    9. '.' → logprob: -10.753856658935547
    10. '):
' → logprob: -11.003856658935547

Token 42: ' 
' (ID: 793)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.2615445554256439
    2. '       ' → logprob: -1.6365445852279663
    3. 'return' → logprob: -4.011544704437256
    4. ' ' → logprob: -5.511544704437256
    5. '    ' → logprob: -5.761544704437256
    6. ' self' → logprob: -5.761544704437256
    7. ' 
' → logprob: -6.886544704437256
    8. ' check' → logprob: -7.136544704437256
    9. '\' → logprob: -7.511544704437256
    10. '        
' → logprob: -7.511544704437256

Token 43: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00670897401869297
    2. ' return' → logprob: -5.131709098815918
    3. 'return' → logprob: -8.006709098815918
    4. '   ' → logprob: -9.381709098815918
    5. ' if' → logprob: -9.381709098815918
    6. '	return' → logprob: -9.881709098815918
    7. '    ' → logprob: -10.006709098815918
    8. ' ' → logprob: -10.256709098815918
    9. '	   ' → logprob: -10.881709098815918
    10. '	' → logprob: -11.006709098815918

Token 44: ' if' (ID: 538)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.6937450766563416
    2. ' return' → logprob: -0.8187450766563416
    3. ' if' → logprob: -3.4437451362609863
    4. '       ' → logprob: -4.318745136260986
    5. 'if' (adapté à ' if') → logprob: -4.318745136260986
    6. 'r' → logprob: -8.318744659423828
    7. '        ' → logprob: -9.193744659423828
    8. ' r' → logprob: -9.568744659423828
    9. ' ' → logprob: -9.693744659423828
    10. 'ret' → logprob: -10.443744659423828

Token 45: ' self' (ID: 1051)
  Prédit: ' self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' self' → logprob: -0.005265649873763323
    2. 'self' → logprob: -5.255265712738037
    3. ' ' → logprob: -12.005265235900879
    4. '(self' → logprob: -12.255265235900879
    5. ' check' → logprob: -12.630265235900879
    6. ' not' → logprob: -12.755265235900879
    7. ' ' → logprob: -12.755265235900879
    8. '   ' → logprob: -13.130265235900879
    9. ' isinstance' → logprob: -13.505265235900879
    10. '       ' → logprob: -13.630265235900879

Token 46: '.v' (ID: 5520)
  Prédit: '.v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.v' → logprob: -0.0013876126613467932
    2. '.' → logprob: -6.626387596130371
    3. ' .' → logprob: -9.876387596130371
    4. 'v' → logprob: -12.376387596130371
    5. ' ' → logprob: -13.501387596130371
    6. ').' → logprob: -14.376387596130371
    7. '   ' → logprob: -14.876387596130371
    8. '>.' → logprob: -14.876387596130371
    9. '```' → logprob: -15.126387596130371
    10. '<v' → logprob: -15.188887596130371

Token 47: '>' (ID: 29)
  Prédit: ' <='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.12718720734119415
    2. '<=' → logprob: -2.1271872520446777
    3. ' >' → logprob: -9.50218677520752
    4. ' ' → logprob: -9.87718677520752
    5. ' <' → logprob: -10.25218677520752
    6. '>' → logprob: -10.50218677520752
    7. ' >=' → logprob: -11.12718677520752
    8. '<' → logprob: -11.50218677520752
    9. ' ==' → logprob: -11.50218677520752
    10. '   ' → logprob: -12.12718677520752

Token 48: '999' (ID: 9130)
  Prédit: '999'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '999' → logprob: -0.5811676383018494
    2. ' ' → logprob: -0.8311676383018494
    3. '=' → logprob: -6.706167697906494
    4. '0' → logprob: -7.081167697906494
    5. '100' → logprob: -7.081167697906494
    6. '99' → logprob: -7.206167697906494
    7. 'n' → logprob: -7.456167697906494
    8. '9' → logprob: -8.206167221069336
    9. '  ' → logprob: -8.706167221069336
    10. ' n' → logprob: -8.831167221069336

Token 49: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.004713261034339666
    2. ':return' → logprob: -6.12971305847168
    3. ':
' → logprob: -6.62971305847168
    4. ' :' → logprob: -7.12971305847168
    5. '       ' → logprob: -8.50471305847168
    6. '           ' → logprob: -10.12971305847168
    7. ' return' → logprob: -10.25471305847168
    8. '):' → logprob: -10.37971305847168
    9. ' and' → logprob: -10.62971305847168
    10. ' or' → logprob: -10.62971305847168

Token 50: ' 
' (ID: 793)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.5316960215568542
    2. '           ' → logprob: -1.031696081161499
    3. '\n' → logprob: -3.656696081161499
    4. 'return' → logprob: -4.40669584274292
    5. '<|end|>' → logprob: -5.65669584274292
    6. '
' → logprob: -6.03169584274292
    7. '\' → logprob: -6.15669584274292
    8. ' 
' → logprob: -6.15669584274292
    9. '       ' → logprob: -6.40669584274292
    10. ' ' → logprob: -6.40669584274292

Token 51: '           ' (ID: 352)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.3653096854686737
    2. '           ' → logprob: -1.615309715270996
    3. 'return' → logprob: -2.240309715270996
    4. ' ' → logprob: -8.865309715270996
    5. '       ' → logprob: -9.365309715270996
    6. ' ' → logprob: -9.865309715270996
    7. '            ' → logprob: -10.115309715270996
    8. '            
' → logprob: -10.115309715270996
    9. '<|end|>' → logprob: -10.365309715270996
    10. ' 
' → logprob: -10.365309715270996

Token 52: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.2601735591888428
    2. 'return' (adapté à ' return') → logprob: -1.5101735591888428
    3. '           ' → logprob: -4.885173797607422
    4. ' ' → logprob: -8.260173797607422
    5. ' None' → logprob: -9.135173797607422
    6. '            ' → logprob: -10.010173797607422
    7. ' ' → logprob: -10.385173797607422
    8. '   ' → logprob: -10.510173797607422
    9. '               ' → logprob: -10.510173797607422
    10. '       ' → logprob: -10.635173797607422

Token 53: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.5251020789146423
    2. ' "' → logprob: -1.275102138519287
    3. ' None' → logprob: -2.775102138519287
    4. 'None' → logprob: -3.275102138519287
    5. ' check' → logprob: -4.775102138519287
    6. ' ' → logprob: -5.275102138519287
    7. ' self' → logprob: -5.400102138519287
    8. 'self' → logprob: -5.775102138519287
    9. 'check' → logprob: -6.275102138519287
    10. ' '' → logprob: -6.650102138519287

Token 54: 'ABD' (ID: 193992)
  Prédit: 'ABC'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ABC' → logprob: -0.3276371657848358
    2. 'XYZ' → logprob: -2.077637195587158
    3. 'None' → logprob: -2.202637195587158
    4. 'DEF' → logprob: -4.452637195587158
    5. '"' → logprob: -4.702637195587158
    6. '999' → logprob: -5.577637195587158
    7. 'def' → logprob: -6.202637195587158
    8. 'abc' → logprob: -6.515137195587158
    9. '123' → logprob: -6.577637195587158
    10. ' None' → logprob: -6.765137195587158

Token 55: '"
' (ID: 1092)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.009986859746277332
    2. '"
' → logprob: -4.634986877441406
    3. '"

' → logprob: -9.509986877441406
    4. 'C' → logprob: -9.884986877441406
    5. 'A' → logprob: -10.884986877441406
    6. '"
' → logprob: -11.009986877441406
    7. '"C' → logprob: -11.884986877441406
    8. '")' → logprob: -12.259986877441406
    9. 'ABC' → logprob: -12.259986877441406
    10. ' "' → logprob: -12.259986877441406

Token 56: 'n' (ID: 77)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5760878324508667
    2. '       ' → logprob: -1.0760878324508667
    3. ' else' → logprob: -2.9510879516601562
    4. 'else' → logprob: -3.5760879516601562
    5. '        
' → logprob: -4.826087951660156
    6. 'return' → logprob: -6.201087951660156
    7. '<|end|>' → logprob: -6.576087951660156
    8. '  
' → logprob: -6.826087951660156
    9. ' 
' → logprob: -6.951087951660156
    10. '\n' → logprob: -7.451087951660156

Token 57: '_val' (ID: 13694)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 58: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2580421268939972
    2. '=' → logprob: -1.5080420970916748
    3. '   ' → logprob: -5.758042335510254
    4. 'al' → logprob: -6.883042335510254
    5. 's' → logprob: -7.383042335510254
    6. ' ' → logprob: -8.258042335510254
    7. '_' → logprob: -8.383042335510254
    8. '  ' → logprob: -9.258042335510254
    9. '       ' → logprob: -9.258042335510254
    10. '>' → logprob: -9.383042335510254

Token 59: ' check' (ID: 2371)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.723075807094574
    2. 'n' → logprob: -1.0980758666992188
    3. 'int' → logprob: -3.0980758666992188
    4. ' check' → logprob: -3.0980758666992188
    5. ' int' → logprob: -3.0980758666992188
    6. ' X' → logprob: -4.098075866699219
    7. 'check' → logprob: -4.098075866699219
    8. 'X' → logprob: -4.723075866699219
    9. ' ' → logprob: -6.598075866699219
    10. '100' → logprob: -7.348075866699219

Token 60: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.03370321914553642
    2. '(' → logprob: -3.408703327178955
    3. '(
' → logprob: -11.033702850341797
    4. '(s' → logprob: -11.658702850341797
    5. '((' → logprob: -12.033702850341797
    6. '(val' → logprob: -12.033702850341797
    7. '(v' → logprob: -12.658702850341797
    8. '(value' → logprob: -12.783702850341797
    9. '(int' → logprob: -13.158702850341797
    10. '(None' → logprob: -13.533702850341797

Token 61: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.990154047845863e-05
    2. '))' → logprob: -10.500049591064453
    3. ')n' → logprob: -11.375049591064453
    4. ')
' → logprob: -11.875049591064453
    5. ' )' → logprob: -13.000049591064453
    6. ')))' → logprob: -14.750049591064453
    7. ')

' → logprob: -15.500049591064453
    8. ')#' → logprob: -16.000049591064453
    9. ')<' → logprob: -16.125049591064453
    10. '')' → logprob: -16.250049591064453

Token 62: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.4580431282520294
    2. '
' → logprob: -1.208043098449707
    3. ' if' → logprob: -2.958043098449707
    4. 'print' → logprob: -4.583043098449707
    5. 'n' → logprob: -6.458043098449707
    6. '<|end|>' → logprob: -6.458043098449707
    7. ' 
' → logprob: -7.458043098449707
    8. ' or' → logprob: -7.583043098449707
    9. '```' → logprob: -7.833043098449707
    10. '
' → logprob: -8.208043098449707

Token 63: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.004582853522151709
    2. ' ' → logprob: -5.50458288192749
    3. 'n' → logprob: -7.87958288192749
    4. ' ' → logprob: -10.129582405090332
    5. ' not' → logprob: -10.379582405090332
    6. '_' → logprob: -10.629582405090332
    7. ' isinstance' → logprob: -11.379582405090332
    8. '_n' → logprob: -12.004582405090332
    9. ' _' → logprob: -12.379582405090332
    10. ' val' → logprob: -13.254582405090332

Token 64: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.0019645551219582558
    2. '_' → logprob: -6.251964569091797
    3. ' _' → logprob: -10.626964569091797
    4. '>' → logprob: -12.501964569091797
    5. '_v' → logprob: -13.501964569091797
    6. '<=' → logprob: -14.001964569091797
    7. '__' → logprob: -14.251964569091797
    8. '_va' → logprob: -14.376964569091797
    9. '_value' → logprob: -14.626964569091797
    10. '==' → logprob: -14.751964569091797

Token 65: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.36315417289733887
    2. ' is' → logprob: -1.4881541728973389
    3. ' ==' → logprob: -2.738154172897339
    4. '==' → logprob: -4.363154411315918
    5. ' :' → logprob: -7.238154411315918
    6. ')' → logprob: -8.738154411315918
    7. ' ' → logprob: -9.113154411315918
    8. '):' → logprob: -9.363154411315918
    9. ' !=' → logprob: -9.863154411315918
    10. '<|end|>' → logprob: -10.238154411315918

Token 66: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3363991975784302
    2. ' print' → logprob: -1.4613991975784302
    3. 'print' → logprob: -4.336399078369141
    4. '    ' → logprob: -4.461399078369141
    5. ' n' → logprob: -4.961399078369141
    6. ' x' → logprob: -4.961399078369141
    7. '
' → logprob: -5.461399078369141
    8. ' X' → logprob: -5.711399078369141
    9. ' ' → logprob: -5.836399078369141
    10. '    
' → logprob: -6.461399078369141

Token 67: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.24877364933490753
    2. 'print' (adapté à ' print') → logprob: -1.6237736940383911
    3. ' x' → logprob: -3.9987735748291016
    4. 'x' → logprob: -6.248773574829102
    5. '   ' → logprob: -6.498773574829102
    6. ' class' → logprob: -8.123773574829102
    7. ' n' → logprob: -8.373773574829102
    8. 'class' → logprob: -9.373773574829102
    9. ' result' → logprob: -9.498773574829102
    10. ' p' → logprob: -9.623773574829102

Token 68: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2533727288246155
    2. '(n' → logprob: -1.5033726692199707
    3. '(f' → logprob: -6.753372669219971
    4. '("("' → logprob: -8.628373146057129
    5. '('' → logprob: -9.503373146057129
    6. '((' → logprob: -12.128373146057129
    7. ' (' → logprob: -12.378373146057129
    8. '("' → logprob: -13.128373146057129
    9. '("(' → logprob: -13.253373146057129
    10. '()' → logprob: -13.378373146057129

Token 69: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.00015598179015796632
    2. ')' → logprob: -9.00015640258789
    3. ')_' → logprob: -10.62515640258789
    4. '_' → logprob: -12.75015640258789
    5. '_)' → logprob: -13.00015640258789
    6. 'val' → logprob: -13.50015640258789
    7. ' _' → logprob: -14.12515640258789
    8. ' )' → logprob: -15.75015640258789
    9. '_VAL' → logprob: -16.12515640258789
    10. '_v' → logprob: -16.37515640258789

Token 70: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.7697225252486533e-06
    2. ')
' → logprob: -13.375003814697266
    3. ' )' → logprob: -13.625003814697266
    4. '))' → logprob: -14.375003814697266
    5. '')' → logprob: -16.250003814697266
    6. '")' → logprob: -17.000003814697266
    7. ')n' → logprob: -17.000003814697266
    8. '   ' → logprob: -17.125003814697266
    9. ')#' → logprob: -17.250003814697266
    10. ')}' → logprob: -17.375003814697266

Token 71: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.06323892623186111
    2. ' else' → logprob: -3.5632388591766357
    3. 'elif' → logprob: -3.8132388591766357
    4. '<|end|>' → logprob: -4.688239097595215
    5. '```' → logprob: -7.188239097595215
    6. ')' → logprob: -7.938239097595215
    7. ' elif' → logprob: -8.563239097595215
    8. '
' → logprob: -9.563239097595215
    9. '   ' → logprob: -9.938239097595215
    10. '<|end|>' → logprob: -10.188239097595215

Token 72: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0010840173345059156
    2. ':
' → logprob: -6.876083850860596
    3. ' :' → logprob: -10.001084327697754
    4. ' :
' → logprob: -13.251084327697754
    5. '   ' → logprob: -13.751084327697754
    6. ':

' → logprob: -13.876084327697754
    7. '    ' → logprob: -15.376084327697754
    8. ',' → logprob: -15.376084327697754
    9. '```' → logprob: -15.501084327697754
    10. 'n' → logprob: -15.626084327697754

Token 73: '   ' (ID: 271)
  Prédit: ' X'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' X' → logprob: -0.01447115559130907
    2. '   ' → logprob: -4.764471054077148
    3. ' print' → logprob: -5.389471054077148
    4. 'X' → logprob: -7.639471054077148
    5. '    ' → logprob: -8.264471054077148
    6. ' x' → logprob: -8.889471054077148
    7. ' ' → logprob: -8.889471054077148
    8. 'print' → logprob: -9.014471054077148
    9. '```' → logprob: -9.764471054077148
    10. '    
' → logprob: -10.389471054077148

Token 74: ' x' (ID: 1215)
  Prédit: ' X'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' X' → logprob: -0.49478569626808167
    2. 'X' → logprob: -1.1197856664657593
    3. ' print' → logprob: -3.369785785675049
    4. 'print' → logprob: -3.744785785675049
    5. '   ' → logprob: -5.869785785675049
    6. 'x' (adapté à ' x') → logprob: -6.369785785675049
    7. ' x' → logprob: -6.869785785675049
    8. '```' → logprob: -8.49478530883789
    9. '    ' → logprob: -10.61978530883789
    10. ' ' → logprob: -11.11978530883789

Token 75: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.00576228741556406
    2. ' =' → logprob: -5.755762100219727
    3. ' .' → logprob: -7.255762100219727
    4. '(' → logprob: -7.755762100219727
    5. ').' → logprob: -8.130762100219727
    6. ')' → logprob: -8.130762100219727
    7. '<|end|>' → logprob: -8.130762100219727
    8. '=' → logprob: -8.505762100219727
    9. '().' → logprob: -9.130762100219727
    10. '.n' → logprob: -9.880762100219727

Token 76: ' X' (ID: 2127)
  Prédit: 'X'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'X' → logprob: -0.31328487396240234
    2. ' X' → logprob: -1.3132848739624023
    3. ' ' → logprob: -10.938284873962402
    4. '>X' → logprob: -12.563284873962402
    5. '  ' → logprob: -14.563284873962402
    6. '	X' → logprob: -14.688284873962402
    7. ' ' → logprob: -15.313284873962402
    8. 'x' → logprob: -15.438284873962402
    9. '<|end|>' → logprob: -15.563284873962402
    10. '   ' → logprob: -16.06328582763672

Token 77: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.013629775494337082
    2. '(' → logprob: -4.388629913330078
    3. 'n' → logprob: -7.013629913330078
    4. '(
' → logprob: -8.513629913330078
    5. '(int' → logprob: -11.888629913330078
    6. ' (' → logprob: -12.513629913330078
    7. '(

' → logprob: -13.263629913330078
    8. '()' → logprob: -13.513629913330078
    9. '(x' → logprob: -13.763629913330078
    10. ' n' → logprob: -14.138629913330078

Token 78: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.014265988953411579
    2. '_val' → logprob: -4.264266014099121
    3. 'val' → logprob: -10.014266014099121
    4. '))' → logprob: -11.139266014099121
    5. ')
' → logprob: -11.389266014099121
    6. '_)' → logprob: -11.639266014099121
    7. '_VAL' → logprob: -11.889266014099121
    8. 'Val' → logprob: -12.514266014099121
    9. ')_' → logprob: -13.014266014099121
    10. '.val' → logprob: -13.389266014099121

Token 79: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.11366461217403412
    2. '
' → logprob: -3.2386646270751953
    3. ' print' → logprob: -3.6136646270751953
    4. '   ' → logprob: -3.7386646270751953
    5. '```' → logprob: -5.238664627075195
    6. ' 
' → logprob: -5.613664627075195
    7. ' ' → logprob: -6.488664627075195
    8. '  
' → logprob: -6.488664627075195
    9. '<|end|>' → logprob: -6.613664627075195
    10. '``' → logprob: -7.488664627075195

Token 80: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.001305118203163147
    2. 'result' → logprob: -7.376305103302002
    3. ' print' → logprob: -8.12630558013916
    4. 'r' → logprob: -8.62630558013916
    5. 'res' → logprob: -8.75130558013916
    6. 'pr' → logprob: -10.62630558013916
    7. 't' → logprob: -12.37630558013916
    8. 'p' → logprob: -12.87630558013916
    9. '   ' → logprob: -13.00130558013916
    10. 'ret' → logprob: -13.37630558013916

Token 81: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.02975349873304367
    2. '(' → logprob: -3.5297534465789795
    3. 'x' → logprob: -13.404753684997559
    4. '(
' → logprob: -14.029753684997559
    5. ' (' → logprob: -14.654753684997559
    6. '(s' → logprob: -16.404752731323242
    7. ' x' → logprob: -16.654752731323242
    8. '()' → logprob: -16.654752731323242
    9. '((' → logprob: -17.279752731323242
    10. '(

' → logprob: -17.404752731323242

Token 82: '.res' (ID: 8279)
  Prédit: '.res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.res' → logprob: -0.005264237988740206
    2. '.' → logprob: -5.2552642822265625
    3. ' .' → logprob: -11.255264282226562
    4. ').' → logprob: -11.380264282226562
    5. 'res' → logprob: -13.005264282226562
    6. '.)' → logprob: -13.630264282226562
    7. '   ' → logprob: -15.380264282226562
    8. ')' → logprob: -15.380264282226562
    9. '.
' → logprob: -15.380264282226562
    10. '.v' → logprob: -15.505264282226562

Token 83: '())' (ID: 3516)
  Prédit: '())'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.008701439946889877
    2. '()))' → logprob: -4.758701324462891
    3. '()' → logprob: -9.75870132446289
    4. '())
' → logprob: -11.13370132446289
    5. ')' → logprob: -12.00870132446289
    6. ' ())' → logprob: -12.00870132446289
    7. '))' → logprob: -13.50870132446289
    8. '()))
' → logprob: -15.25870132446289
    9. '(' → logprob: -15.75870132446289
    10. '()).' → logprob: -15.88370132446289


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 81
Tokens correctement prédits (1ère position, stricte): 36
Tokens correctement prédits (1ère position, avec adaptation): 37
Tokens correctement prédits (top 10): 62
Précision stricte (1ère position): 44.44%
Précision adaptée (1ère position): 45.68%
Précision (top 10): 76.54%
================================================================================
