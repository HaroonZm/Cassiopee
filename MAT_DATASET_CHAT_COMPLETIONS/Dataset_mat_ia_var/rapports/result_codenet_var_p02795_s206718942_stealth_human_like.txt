================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:29:43
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import math

# Bon, on va demander les valeurs...
h = int(input())
w = int(input())
n = int(input())
# J'espère que c'est bien ce qu'on veut faire.
mx = max(h, w)
res = n / mx
# On doit arrondir en haut il paraît
print(int(res) + (res != int(res)))
# Voilà, ça devrait marcher, non ?
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' math' (ID: 13324)
  → Token d'amorce (pas de prédiction)

Token 2: '

' (ID: 279)
  → Token d'amorce (pas de prédiction)

Token 3: '#' (ID: 2)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -6.289473822107539e-05
    2. 'import' → logprob: -11.625062942504883
    3. '```' → logprob: -11.625062942504883
    4. '\' → logprob: -11.875062942504883
    5. '<|end|>' → logprob: -12.375062942504883
    6. '.\' → logprob: -12.500062942504883
    7. '.pi' → logprob: -12.625062942504883
    8. '.e' → logprob: -12.625062942504883
    9. '\n' → logprob: -12.875062942504883
    10. 'def' → logprob: -13.250062942504883

Token 4: ' Bon' (ID: 12658)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.8223897814750671
    2. 'sqrt' → logprob: -1.947389841079712
    3. 'def' → logprob: -1.947389841079712
    4. 'pi' → logprob: -3.072389841079712
    5. 'e' → logprob: -3.197389841079712
    6. 'factor' → logprob: -3.322389841079712
    7. 'pow' → logprob: -4.197389602661133
    8. ''s' → logprob: -4.822389602661133
    9. ' sqrt' → logprob: -4.822389602661133
    10. ' ' → logprob: -4.947389602661133

Token 5: ',' (ID: 11)
  Prédit: 'jour'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'jour' → logprob: -0.5826104879379272
    2. 'us' → logprob: -0.9576104879379272
    3. 'f' → logprob: -3.957610607147217
    4. 'd' → logprob: -4.582610607147217
    5. 'def' → logprob: -5.457610607147217
    6. 'jou' → logprob: -5.707610607147217
    7. 'j' → logprob: -6.082610607147217
    8. 'use' → logprob: -6.082610607147217
    9. '```' → logprob: -6.207610607147217
    10. 'usc' → logprob: -6.707610607147217

Token 6: ' on' (ID: 402)
  Prédit: ' je'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' je' → logprob: -0.22755920886993408
    2. ' ' → logprob: -2.7275590896606445
    3. '  ' → logprob: -3.6025590896606445
    4. ' j' → logprob: -3.8525590896606445
    5. ' c' → logprob: -4.1025590896606445
    6. '#' → logprob: -4.9775590896606445
    7. ' mais' → logprob: -5.3525590896606445
    8. ' voici' → logprob: -5.3525590896606445
    9. 'jour' → logprob: -5.3525590896606445
    10. ' ça' → logprob: -5.4775590896606445

Token 7: ' va' (ID: 3423)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6674318313598633
    2. ' va' → logprob: -2.4174318313598633
    3. ' continue' → logprob: -2.5424318313598633
    4. ' a' → logprob: -2.6674318313598633
    5. '_' → logprob: -3.4174318313598633
    6. ' peut' → logprob: -3.4174318313598633
    7. ' space' → logprob: -4.292431831359863
    8. ' veut' → logprob: -4.292431831359863
    9. '```' → logprob: -4.417431831359863
    10. 'n' → logprob: -4.417431831359863

Token 8: ' demander' (ID: 60771)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3631431460380554
    2. ' calcul' → logprob: -2.1131432056427
    3. ' continuer' → logprob: -2.6131432056427
    4. ' y' → logprob: -3.7381432056427
    5. ' faire' → logprob: -4.113142967224121
    6. '_' → logprob: -4.488142967224121
    7. ' utiliser' → logprob: -4.613142967224121
    8. 'contin' → logprob: -5.363142967224121
    9. ' créer' → logprob: -5.863142967224121
    10. ' test' → logprob: -6.113142967224121

Token 9: ' les' (ID: 1341)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.36274582147598267
    2. ' ' → logprob: -2.612745761871338
    3. ',' → logprob: -3.112745761871338
    4. ':' → logprob: -3.112745761871338
    5. '#' → logprob: -3.612745761871338
    6. '`' → logprob: -3.862745761871338
    7. '```' → logprob: -4.237745761871338
    8. '.' → logprob: -4.612745761871338
    9. 's' → logprob: -4.612745761871338
    10. 'l' → logprob: -4.862745761871338

Token 10: ' valeurs' (ID: 73668)
  Prédit: 'math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'math' → logprob: -0.6865519881248474
    2. ' math' → logprob: -1.1865520477294922
    3. ' from' → logprob: -2.811552047729492
    4. 'import' → logprob: -3.811552047729492
    5. 'from' → logprob: -3.936552047729492
    6. 'def' → logprob: -4.561552047729492
    7. 'é' → logprob: -4.811552047729492
    8. 'rés' → logprob: -4.936552047729492
    9. 'd' → logprob: -5.311552047729492
    10. 'val' → logprob: -5.436552047729492

Token 11: '...
' (ID: 4908)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -1.5614415407180786
    2. 'x' → logprob: -1.5614415407180786
    3. '#' → logprob: -1.6864415407180786
    4. ',' → logprob: -2.436441421508789
    5. ':' → logprob: -2.686441421508789
    6. 'a' → logprob: -3.311441421508789
    7. ' ' → logprob: -3.561441421508789
    8. '(' → logprob: -3.686441421508789
    9. '.' → logprob: -3.686441421508789
    10. 'n' → logprob: -4.186441421508789

Token 12: 'h' (ID: 71)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.0593801885843277
    2. 'a' → logprob: -3.309380292892456
    3. 'v' → logprob: -5.309380054473877
    4. 'n' → logprob: -5.684380054473877
    5. 'radius' → logprob: -6.434380054473877
    6. '```' → logprob: -6.434380054473877
    7. 'val' → logprob: -6.559380054473877
    8. 'value' → logprob: -6.559380054473877
    9. '\' → logprob: -6.809380054473877
    10. 'angle' → logprob: -7.059380054473877

Token 13: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.0889338254928589
    2. 'eight' → logprob: -1.0889338254928589
    3. 'e' → logprob: -1.3389338254928589
    4. '=' → logprob: -3.7139339447021484
    5. 't' → logprob: -4.088933944702148
    6. 'ight' → logprob: -4.838933944702148
    7. 'ei' → logprob: -5.838933944702148
    8. ' ' → logprob: -6.088933944702148
    9. 'eig' → logprob: -6.088933944702148
    10. '_e' → logprob: -6.338933944702148

Token 14: ' int' (ID: 677)
  Prédit: ' float'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' float' → logprob: -0.5467601418495178
    2. ' ' → logprob: -1.046760082244873
    3. ' int' → logprob: -3.171760082244873
    4. 'float' → logprob: -4.046760082244873
    5. 'int' → logprob: -6.296760082244873
    6. ' math' → logprob: -6.671760082244873
    7. '10' → logprob: -6.796760082244873
    8. '5' → logprob: -6.796760082244873
    9. ' input' → logprob: -7.046760082244873
    10. '2' → logprob: -7.171760082244873

Token 15: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.576095700263977
    2. '(' → logprob: -0.826095700263977
    3. ' (' → logprob: -9.201095581054688
    4. 'input' → logprob: -10.576095581054688
    5. '(math' → logprob: -11.576095581054688
    6. '(
' → logprob: -12.076095581054688
    7. '('' → logprob: -12.326095581054688
    8. ' ' → logprob: -13.326095581054688
    9. '(s' → logprob: -13.701095581054688
    10. '()' → logprob: -13.826095581054688

Token 16: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004782899748533964
    2. '('' → logprob: -6.254782676696777
    3. '()' → logprob: -6.379782676696777
    4. '("("' → logprob: -7.629782676696777
    5. '("' → logprob: -7.754782676696777
    6. '("")' → logprob: -9.004782676696777
    7. '(""))' → logprob: -10.129782676696777
    8. '(
' → logprob: -11.004782676696777
    9. '())' → logprob: -11.004782676696777
    10. ')' → logprob: -11.129782676696777

Token 17: 'w' (ID: 86)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.09315641969442368
    2. '<|end|>' → logprob: -3.343156337738037
    3. ' ' → logprob: -3.843156337738037
    4. ',' → logprob: -4.468156337738037
    5. ' )' → logprob: -4.468156337738037
    6. '*' → logprob: -5.718156337738037
    7. ' ,' → logprob: -7.218156337738037
    8. '#' → logprob: -7.468156337738037
    9. 's' → logprob: -7.593156337738037
    10. '=' → logprob: -7.968156337738037

Token 18: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.07026307284832001
    2. '=' → logprob: -2.945263147354126
    3. ' ' → logprob: -4.445262908935547
    4. ')' → logprob: -5.945262908935547
    5. '_' → logprob: -7.695262908935547
    6. ' )' → logprob: -9.195262908935547
    7. '<|end|>' → logprob: -9.570262908935547
    8. ' *' → logprob: -10.070262908935547
    9. ',' → logprob: -10.070262908935547
    10. ' ,' → logprob: -10.320262908935547

Token 19: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.1269482672214508
    2. 'int' → logprob: -2.126948356628418
    3. '=int' → logprob: -11.251948356628418
    4. '[int' → logprob: -13.126948356628418
    5. ' ' → logprob: -13.501948356628418
    6. '(int' → logprob: -13.501948356628418
    7. '<int' → logprob: -13.876948356628418
    8. ' ' → logprob: -14.501948356628418
    9. ' h' → logprob: -16.0019474029541
    10. 'h' → logprob: -16.1269474029541

Token 20: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0025093089789152145
    2. '(' → logprob: -6.002509117126465
    3. '()' → logprob: -11.127509117126465
    4. ' (' → logprob: -11.877509117126465
    5. '=input' → logprob: -12.502509117126465
    6. ')' → logprob: -12.877509117126465
    7. 'input' → logprob: -13.377509117126465
    8. '(int' → logprob: -14.127509117126465
    9. ' ' → logprob: -14.502509117126465
    10. '[input' → logprob: -14.752509117126465

Token 21: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.038151539862155914
    2. '()' → logprob: -3.538151502609253
    3. ')' → logprob: -4.788151741027832
    4. '())
' → logprob: -11.163151741027832
    5. ' ())' → logprob: -11.288151741027832
    6. '()
' → logprob: -12.288151741027832
    7. '();)' → logprob: -13.538151741027832
    8. '(' → logprob: -13.538151741027832
    9. '()>' → logprob: -14.163151741027832
    10. '()))' → logprob: -14.413151741027832

Token 22: 'n' (ID: 77)
  Prédit: 'area'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'area' → logprob: -1.1207760572433472
    2. 'l' → logprob: -2.1207761764526367
    3. 'h' → logprob: -2.2457761764526367
    4. 'n' → logprob: -2.3707761764526367
    5. 'for' → logprob: -2.7457761764526367
    6. 'd' → logprob: -2.8707761764526367
    7. 's' → logprob: -3.1207761764526367
    8. 'result' → logprob: -3.3707761764526367
    9. 't' → logprob: -3.9957761764526367
    10. 'r' → logprob: -3.9957761764526367

Token 23: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.17983098328113556
    2. '=' → logprob: -1.8048310279846191
    3. ' ' → logprob: -10.429830551147461
    4. '=int' → logprob: -10.429830551147461
    5. ',' → logprob: -12.304830551147461
    6. ')' → logprob: -12.429830551147461
    7. '  ' → logprob: -12.554830551147461
    8. 'b' → logprob: -13.179830551147461
    9. 'um' → logprob: -13.304830551147461
    10. '_' → logprob: -13.554830551147461

Token 24: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.263699471950531
    2. 'int' → logprob: -1.5136995315551758
    3. ' h' → logprob: -5.138699531555176
    4. '(int' → logprob: -6.638699531555176
    5. ' math' → logprob: -6.763699531555176
    6. ' ' → logprob: -7.013699531555176
    7. 'math' → logprob: -7.388699531555176
    8. '0' → logprob: -7.513699531555176
    9. ' (' → logprob: -7.513699531555176
    10. '1' → logprob: -8.138699531555176

Token 25: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.09309244900941849
    2. '()' → logprob: -2.718092441558838
    3. '(input' → logprob: -3.843092441558838
    4. ' (' → logprob: -7.593092441558838
    5. '(x' → logprob: -8.468092918395996
    6. ' ()' → logprob: -8.593092918395996
    7. '('' → logprob: -8.968092918395996
    8. '(
' → logprob: -9.968092918395996
    9. '(h' → logprob: -10.343092918395996
    10. '(space' → logprob: -10.468092918395996

Token 26: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002666265470907092
    2. '()' → logprob: -6.002666473388672
    3. '())' → logprob: -9.377666473388672
    4. '(' → logprob: -10.377666473388672
    5. ' )' → logprob: -10.752666473388672
    6. ')
' → logprob: -11.002666473388672
    7. '*' → logprob: -11.127666473388672
    8. '`)' → logprob: -12.127666473388672
    9. '))' → logprob: -12.627666473388672
    10. '*)' → logprob: -13.002666473388672

Token 27: '#' (ID: 2)
  Prédit: 'tiles'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tiles' → logprob: -1.2689058780670166
    2. '
' → logprob: -2.3939058780670166
    3. 'for' → logprob: -2.3939058780670166
    4. ')' → logprob: -2.7689058780670166
    5. 's' → logprob: -2.8939058780670166
    6. ' bricks' → logprob: -3.1439058780670166
    7. 't' → logprob: -3.2689058780670166
    8. '<|end|>' → logprob: -3.5189058780670166
    9. 'cells' → logprob: -3.6439058780670166
    10. ' tiles' → logprob: -3.6439058780670166

Token 28: ' J' (ID: 643)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.6618210077285767
    2. ' for' → logprob: -2.286820888519287
    3. 'for' → logprob: -2.411820888519287
    4. 'max' → logprob: -2.661820888519287
    5. ' bricks' → logprob: -2.661820888519287
    6. 's' → logprob: -2.786820888519287
    7. 'x' → logprob: -3.161820888519287
    8. 'm' → logprob: -3.286820888519287
    9. 't' → logprob: -3.411820888519287
    10. ' max' → logprob: -3.536820888519287

Token 29: ''espère' (ID: 116557)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.5927783846855164
    2. '=' → logprob: -2.217778444290161
    3. 'a' → logprob: -2.842778444290161
    4. 'oueur' → logprob: -2.842778444290161
    5. 'i' → logprob: -3.092778444290161
    6. ''ai' → logprob: -3.842778444290161
    7. 'u' → logprob: -4.092778205871582
    8. 'uste' → logprob: -4.217778205871582
    9. 'ust' → logprob: -4.592778205871582
    10. '```' → logprob: -4.592778205871582

Token 30: ' que' (ID: 661)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.1024507284164429
    2. 'for' → logprob: -1.8524507284164429
    3. ')' → logprob: -1.9774507284164429
    4. '<|end|>' → logprob: -2.3524508476257324
    5. ' =' → logprob: -2.7274508476257324
    6. ',' → logprob: -3.6024508476257324
    7. 's' → logprob: -3.7274508476257324
    8. '#' → logprob: -3.9774508476257324
    9. 'def' → logprob: -4.602450847625732
    10. 'x' → logprob: -4.727450847625732

Token 31: ' c' (ID: 274)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.4441455006599426
    2. ' math' → logprob: -1.9441454410552979
    3. ' h' → logprob: -2.819145441055298
    4. ' len' → logprob: -3.069145441055298
    5. ' w' → logprob: -3.819145441055298
    6. ' pouvoir' → logprob: -3.944145441055298
    7. ' ' → logprob: -4.569145679473877
    8. ' (' → logprob: -5.319145679473877
    9. ' les' → logprob: -5.444145679473877
    10. '(n' → logprob: -5.444145679473877

Token 32: ''est' (ID: 6616)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.07678242027759552
    2. 'a' → logprob: -3.326782464981079
    3. ''' → logprob: -4.2017822265625
    4. ''ai' → logprob: -4.8267822265625
    5. 'u' → logprob: -5.9517822265625
    6. ''a' → logprob: -6.4517822265625
    7. 'ai' → logprob: -6.8267822265625
    8. ''est' → logprob: -6.9517822265625
    9. ''aime' → logprob: -7.0767822265625
    10. 'eux' → logprob: -7.0767822265625

Token 33: ' bien' (ID: 5340)
  Prédit: ' tout'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tout' → logprob: -0.9996439218521118
    2. 'tout' → logprob: -1.2496439218521118
    3. ' suff' → logprob: -2.3746438026428223
    4. ' bon' → logprob: -2.8746438026428223
    5. 'pas' → logprob: -3.1246438026428223
    6. ' pas' → logprob: -3.3746438026428223
    7. 'bon' → logprob: -3.7496438026428223
    8. ' bien' → logprob: -4.124643802642822
    9. 't' → logprob: -4.249643802642822
    10. 'bien' → logprob: -4.499643802642822

Token 34: ' ce' (ID: 2357)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.0762382745742798
    2. '<|end|>' → logprob: -1.2012382745742798
    3. '```' → logprob: -2.2012381553649902
    4. ')' → logprob: -3.0762381553649902
    5. 'n' → logprob: -3.9512381553649902
    6. '[' → logprob: -3.9512381553649902
    7. '<|end|>' → logprob: -4.07623815536499
    8. ',' → logprob: -4.45123815536499
    9. 'e' → logprob: -4.45123815536499
    10. ' )' → logprob: -5.01373815536499

Token 35: ' qu' (ID: 474)
  Prédit: ' que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.931458592414856
    2. ' code' → logprob: -0.931458592414856
    3. '_' → logprob: -3.3064584732055664
    4. 'u' → logprob: -3.6814584732055664
    5. '_code' → logprob: -3.8064584732055664
    6. 'c' → logprob: -3.9314584732055664
    7. 'code' → logprob: -3.9314584732055664
    8. 'l' → logprob: -4.181458473205566
    9. '```' → logprob: -4.681458473205566
    10. 'h' → logprob: -4.681458473205566

Token 36: ''on' (ID: 25812)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -1.564914584159851
    2. ''' → logprob: -2.0649147033691406
    3. 'u' → logprob: -2.3149147033691406
    4. ' va' → logprob: -2.4399147033691406
    5. ''il' → logprob: -2.8149147033691406
    6. ' faut' → logprob: -3.1899147033691406
    7. ' ' → logprob: -3.6899147033691406
    8. 's' → logprob: -3.8149147033691406
    9. ' vous' → logprob: -3.8149147033691406
    10. 't' → logprob: -4.064914703369141

Token 37: ' veut' (ID: 41653)
  Prédit: ' veut'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' veut' → logprob: -0.4421921670436859
    2. ' doit' → logprob: -2.4421920776367188
    3. ' fait' → logprob: -2.8171920776367188
    4. 'do' → logprob: -2.9421920776367188
    5. ' demande' → logprob: -3.1921920776367188
    6. 'fait' → logprob: -3.4421920776367188
    7. ' a' → logprob: -3.9421920776367188
    8. 'a' → logprob: -4.067192077636719
    9. ' va' → logprob: -4.567192077636719
    10. ' me' → logprob: -5.317192077636719

Token 38: ' faire' (ID: 8119)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.3491110801696777
    2. 'max' → logprob: -1.3491110801696777
    3. 'tiles' → logprob: -1.5991110801696777
    4. 's' → logprob: -2.4741110801696777
    5. 'x' → logprob: -3.7241110801696777
    6. 'print' → logprob: -3.8491110801696777
    7. 't' → logprob: -4.099111080169678
    8. 'if' → logprob: -4.349111080169678
    9. '=' → logprob: -4.599111080169678
    10. '#' → logprob: -4.599111080169678

Token 39: '.
' (ID: 558)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.5346883535385132
    2. 'for' → logprob: -1.9096883535385132
    3. ' ' → logprob: -2.4096884727478027
    4. '#' → logprob: -2.4096884727478027
    5. 's' → logprob: -2.6596884727478027
    6. 'max' → logprob: -3.2846884727478027
    7. '=' → logprob: -3.4096884727478027
    8. 'print' → logprob: -3.4096884727478027
    9. '
' → logprob: -3.4096884727478027
    10. 't' → logprob: -3.5346884727478027

Token 40: 'mx' (ID: 32467)
  Prédit: 'tiles'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tiles' → logprob: -0.6427333354949951
    2. 'for' → logprob: -1.3927333354949951
    3. 's' → logprob: -3.267733335494995
    4. 'arr' → logprob: -3.392733335494995
    5. 'cards' → logprob: -4.517733573913574
    6. 'print' → logprob: -4.517733573913574
    7. 'if' → logprob: -4.642733573913574
    8. 'boxes' → logprob: -4.642733573913574
    9. 'items' → logprob: -4.642733573913574
    10. 'sizes' → logprob: -4.892733573913574

Token 41: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.6875
    2. '_' → logprob: -1.1875
    3. '=' → logprob: -1.6875
    4. 'h' → logprob: -6.1875
    5. ' ' → logprob: -7.3125
    6. ',' → logprob: -7.4375
    7. 'w' → logprob: -7.9375
    8. '_h' → logprob: -7.9375
    9. '=int' → logprob: -8.0625
    10. '_=' → logprob: -8.0625

Token 42: ' max' (ID: 2999)
  Prédit: ' max'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' max' → logprob: -0.5320413708686829
    2. 'max' → logprob: -1.407041311264038
    3. ' h' → logprob: -3.032041311264038
    4. ' math' → logprob: -3.157041311264038
    5. 'h' → logprob: -3.657041311264038
    6. '0' → logprob: -4.532041549682617
    7. 'math' → logprob: -4.532041549682617
    8. ' ' → logprob: -5.282041549682617
    9. ' int' → logprob: -5.407041549682617
    10. 'int' → logprob: -5.532041549682617

Token 43: '(h' (ID: 8120)
  Prédit: '(h'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(h' → logprob: -0.3885454535484314
    2. '(' → logprob: -1.1385455131530762
    3. '(w' → logprob: -7.013545513153076
    4. '(n' → logprob: -7.638545513153076
    5. '((' → logprob: -9.138545036315918
    6. '([' → logprob: -9.388545036315918
    7. '(s' → logprob: -10.513545036315918
    8. '(max' → logprob: -11.763545036315918
    9. '(m' → logprob: -11.888545036315918
    10. '(
' → logprob: -11.888545036315918

Token 44: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.023818595334887505
    2. ' ,' → logprob: -3.7738184928894043
    3. ',w' → logprob: -7.648818492889404
    4. ',

' → logprob: -10.273818969726562
    5. ')' → logprob: -10.398818969726562
    6. ',
' → logprob: -11.523818969726562
    7. ',n' → logprob: -12.523818969726562
    8. ' ,

' → logprob: -12.773818969726562
    9. ',h' → logprob: -12.898818969726562
    10. '-' → logprob: -13.398818969726562

Token 45: ' w' (ID: 286)
  Prédit: ' w'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' w' → logprob: -0.31330040097236633
    2. 'w' → logprob: -1.313300371170044
    3. ' ' → logprob: -10.438300132751465
    4. ' ' → logprob: -12.188300132751465
    5. '	w' → logprob: -13.313300132751465
    6. '  ' → logprob: -14.438300132751465
    7. ')' → logprob: -14.938300132751465
    8. '(w' → logprob: -15.063300132751465
    9. ',' → logprob: -15.313300132751465
    10. ' ,' → logprob: -16.00080108642578

Token 46: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.001542834215797484
    2. ',' → logprob: -6.751543045043945
    3. ' )' → logprob: -8.126543045043945
    4. ')
' → logprob: -11.376543045043945
    5. '))' → logprob: -11.501543045043945
    6. '//' → logprob: -11.626543045043945
    7. ',)' → logprob: -11.751543045043945
    8. '),' → logprob: -11.876543045043945
    9. ',n' → logprob: -12.001543045043945
    10. ')n' → logprob: -12.376543045043945

Token 47: 'res' (ID: 430)
  Prédit: '**'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '**' → logprob: -0.4496253728866577
    2. '//' → logprob: -2.3246254920959473
    3. '*' → logprob: -2.5746254920959473
    4. ')' → logprob: -2.6996254920959473
    5. '#' → logprob: -3.6996254920959473
    6. 'n' → logprob: -3.9496254920959473
    7. ' ' → logprob: -4.699625492095947
    8. '<|end|>' → logprob: -4.699625492095947
    9. '+' → logprob: -4.824625492095947
    10. '=' → logprob: -4.824625492095947

Token 48: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2931155562400818
    2. '=' → logprob: -1.6681156158447266
    3. 'ult' → logprob: -2.7931156158447266
    4. 'u' → logprob: -6.543115615844727
    5. 'ults' → logprob: -6.793115615844727
    6. 'ultat' → logprob: -6.793115615844727
    7. 'ul' → logprob: -8.918115615844727
    8. 'ULT' → logprob: -9.168115615844727
    9. '_' → logprob: -9.168115615844727
    10. ' ' → logprob: -10.043115615844727

Token 49: ' n' (ID: 297)
  Prédit: ' mx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' mx' → logprob: -0.8840447664260864
    2. ' ' → logprob: -1.8840447664260864
    3. 'mx' → logprob: -2.134044647216797
    4. '1' → logprob: -2.759044647216797
    5. ' math' → logprob: -2.884044647216797
    6. ' n' → logprob: -3.134044647216797
    7. '0' → logprob: -3.134044647216797
    8. 'n' → logprob: -3.634044647216797
    9. ' (' → logprob: -4.009044647216797
    10. '(mx' → logprob: -4.009044647216797

Token 50: ' /' (ID: 820)
  Prédit: ' //'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.12178166955709457
    2. '//' → logprob: -2.746781587600708
    3. '+' → logprob: -4.371781826019287
    4. ' ' → logprob: -4.371781826019287
    5. ' +' → logprob: -4.621781826019287
    6. ' /' → logprob: -5.371781826019287
    7. '*' → logprob: -5.996781826019287
    8. ' if' → logprob: -6.371781826019287
    9. ' *' → logprob: -6.746781826019287
    10. '%' → logprob: -6.871781826019287

Token 51: ' mx' (ID: 28004)
  Prédit: 'mx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'mx' → logprob: -0.6626212000846863
    2. ' mx' → logprob: -0.7876212000846863
    3. '(mx' → logprob: -4.412621021270752
    4. 'min' → logprob: -5.662621021270752
    5. 'max' → logprob: -5.787621021270752
    6. '(' → logprob: -5.787621021270752
    7. ' (' → logprob: -5.787621021270752
    8. ' max' → logprob: -6.912621021270752
    9. ' min' → logprob: -6.912621021270752
    10. ' math' → logprob: -7.537621021270752

Token 52: '
' (ID: 198)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.5495579838752747
    2. '
' → logprob: -1.0495579242706299
    3. 'print' → logprob: -4.049558162689209
    4. '\n' → logprob: -4.299558162689209
    5. ')' → logprob: -4.549558162689209
    6. '+
' → logprob: -4.924558162689209
    7. '#' → logprob: -5.174558162689209
    8. ' ' → logprob: -5.799558162689209
    9. '.' → logprob: -6.299558162689209
    10. 'import' → logprob: -6.299558162689209

Token 53: '#' (ID: 2)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -1.2148795127868652
    2. 'import' → logprob: -1.4648795127868652
    3. 'if' → logprob: -1.9648795127868652
    4. '\n' → logprob: -2.3398795127868652
    5. ' if' → logprob: -2.7148795127868652
    6. '
' → logprob: -2.9648795127868652
    7. '+
' → logprob: -3.3398795127868652
    8. 'print' → logprob: -3.3398795127868652
    9. '(' → logprob: -4.589879512786865
    10. '\' → logprob: -5.214879512786865

Token 54: ' On' (ID: 2160)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.7868500351905823
    2. 'print' → logprob: -1.2868499755859375
    3. ' (' → logprob: -3.1618499755859375
    4. 'int' → logprob: -3.5368499755859375
    5. ' ' → logprob: -3.6618499755859375
    6. ' if' → logprob: -3.7868499755859375
    7. 'res' → logprob: -3.7868499755859375
    8. ' math' → logprob: -4.0368499755859375
    9. 'math' → logprob: -4.0368499755859375
    10. '(math' → logprob: -4.0368499755859375

Token 55: ' doit' (ID: 21822)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.337221622467041
    2. '=' → logprob: -2.337221622467041
    3. ' ' → logprob: -2.337221622467041
    4. 'print' → logprob: -3.337221622467041
    5. 'import' → logprob: -3.712221622467041
    6. ' print' → logprob: -4.587221622467041
    7. '.' → logprob: -5.337221622467041
    8. 'r' → logprob: -6.337221622467041
    9. ''s' → logprob: -6.462221622467041
    10. ' +=' → logprob: -6.587221622467041

Token 56: ' arr' (ID: 1724)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.8813212513923645
    2. 'import' → logprob: -1.6313211917877197
    3. 'ceil' → logprob: -1.6313211917877197
    4. ' ceil' → logprob: -2.0063211917877197
    5. 'math' → logprob: -4.131321430206299
    6. ' import' → logprob: -4.506321430206299
    7. 'print' → logprob: -4.756321430206299
    8. ' print' → logprob: -4.756321430206299
    9. ' ' → logprob: -6.631321430206299
    10. 'int' → logprob: -7.006321430206299

Token 57: 'ond' (ID: 1415)
  Prédit: 'ond'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ond' → logprob: -0.00010354319238103926
    2. 'on' → logprob: -9.750103950500488
    3. 'ondi' → logprob: -10.125103950500488
    4. 'onder' → logprob: -12.625103950500488
    5. 'od' → logprob: -14.500103950500488
    6. 'ondissement' → logprob: -15.125103950500488
    7. 'o' → logprob: -15.250103950500488
    8. 'онд' → logprob: -15.375103950500488
    9. 'indir' → logprob: -16.250102996826172
    10. 'ondon' → logprob: -16.750102996826172

Token 58: 'ir' (ID: 380)
  Prédit: 'ir'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ir' → logprob: -0.017736390233039856
    2. 'i' → logprob: -4.267736434936523
    3. 'er' → logprob: -5.767736434936523
    4. 'ond' → logprob: -8.017736434936523
    5. 'e' → logprob: -10.642736434936523
    6. '```' → logprob: -11.392736434936523
    7. 'dir' → logprob: -11.642736434936523
    8. 'up' → logprob: -12.017736434936523
    9. '(i' → logprob: -12.142736434936523
    10. '[i' → logprob: -12.392736434936523

Token 59: ' en' (ID: 469)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2954785227775574
    2. 'import' → logprob: -2.045478582382202
    3. 'res' → logprob: -4.045478343963623
    4. ')' → logprob: -4.045478343963623
    5. '(
' → logprob: -4.170478343963623
    6. ' =' → logprob: -4.420478343963623
    7. ',' → logprob: -4.545478343963623
    8. '.' → logprob: -4.795478343963623
    9. ' ' → logprob: -5.045478343963623
    10. '(res' → logprob: -5.045478343963623

Token 60: ' haut' (ID: 28223)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.1018362045288086
    2. ' haut' → logprob: -1.6018362045288086
    3. 's' → logprob: -2.1643362045288086
    4. 'haut' → logprob: -3.1018362045288086
    5. '  ' → logprob: -3.2268362045288086
    6. '```' → logprob: -3.9143362045288086
    7. ' ' → logprob: -4.039336204528809
    8. '  

' → logprob: -4.226836204528809
    9. 'dess' → logprob: -4.226836204528809
    10. '   ' → logprob: -4.351836204528809

Token 61: ' il' (ID: 1793)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1498194932937622
    2. 'import' → logprob: -2.3998193740844727
    3. ')' → logprob: -3.2748193740844727
    4. '
' → logprob: -5.524819374084473
    5. ',' → logprob: -6.399819374084473
    6. '(math' → logprob: -6.649819374084473
    7. ' (' → logprob: -6.899819374084473
    8. '()' → logprob: -7.649819374084473
    9. '(
' → logprob: -7.899819374084473
    10. '(res' → logprob: -8.274819374084473

Token 62: ' paraît' (ID: 164516)
  Prédit: ' faut'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' faut' → logprob: -0.19781553745269775
    2. 'a' → logprob: -2.697815418243408
    3. ' faudra' → logprob: -3.072815418243408
    4. 'f' → logprob: -3.572815418243408
    5. ' faudrait' → logprob: -3.697815418243408
    6. ' a' → logprob: -5.697815418243408
    7. 'y' → logprob: -6.322815418243408
    8. ' y' → logprob: -6.447815418243408
    9. ' fallait' → logprob: -6.447815418243408
    10. '```' → logprob: -7.197815418243408

Token 63: '
' (ID: 198)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.042659759521484375
    2. '(' → logprob: -3.9176597595214844
    3. ')' → logprob: -4.792659759521484
    4. '
' → logprob: -5.167659759521484
    5. '()' → logprob: -6.417659759521484
    6. 'res' → logprob: -6.417659759521484
    7. '(math' → logprob: -7.042659759521484
    8. '\' → logprob: -7.292659759521484
    9. '```' → logprob: -7.792659759521484
    10. 'int' → logprob: -7.917659759521484

Token 64: 'print' (ID: 1598)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.028303487226366997
    2. 'res' → logprob: -4.028303623199463
    3. 'result' → logprob: -5.903303623199463
    4. ')' → logprob: -6.278303623199463
    5. '
' → logprob: -6.403303623199463
    6. '```' → logprob: -6.903303623199463
    7. '\' → logprob: -7.528303623199463
    8. '`' → logprob: -7.778303623199463
    9. 'int' → logprob: -7.903303623199463
    10. 'print' → logprob: -8.153303146362305

Token 65: '(int' (ID: 2742)
  Prédit: '(math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(math' → logprob: -0.5777339935302734
    2. '(' → logprob: -0.8277339935302734
    3. '(int' → logprob: -6.327733993530273
    4. '()' → logprob: -13.452733993530273
    5. '(-' → logprob: -13.827733993530273
    6. '(
' → logprob: -13.952733993530273
    7. ' (' → logprob: -14.077733993530273
    8. '(round' → logprob: -14.202733993530273
    9. '(Math' → logprob: -14.327733993530273
    10. '(

' → logprob: -15.077733993530273

Token 66: '(res' (ID: 8331)
  Prédit: '(math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(math' → logprob: -0.06399980932474136
    2. '(' → logprob: -3.063999891281128
    3. '(res' → logprob: -4.313999652862549
    4. '(-' → logprob: -6.313999652862549
    5. '((' → logprob: -9.689000129699707
    6. ' (' → logprob: -11.689000129699707
    7. '(
' → logprob: -11.814000129699707
    8. 'math' → logprob: -12.064000129699707
    9. '(m' → logprob: -12.564000129699707
    10. ' math' → logprob: -12.814000129699707

Token 67: ')' (ID: 8)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.4370226562023163
    2. ' +' → logprob: -1.9370226860046387
    3. ')' → logprob: -2.1870226860046387
    4. '))' → logprob: -2.6870226860046387
    5. '(' → logprob: -4.312022686004639
    6. ')+' → logprob: -4.312022686004639
    7. ' ' → logprob: -6.437022686004639
    8. '(math' → logprob: -7.687022686004639
    9. '))+' → logprob: -9.18702220916748
    10. '()+' → logprob: -9.81202220916748

Token 68: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.30929821729660034
    2. ' +' → logprob: -1.4342982769012451
    3. ')' → logprob: -3.684298276901245
    4. '))' → logprob: -7.309298038482666
    5. ')+' → logprob: -7.684298038482666
    6. '+(' → logprob: -7.684298038482666
    7. '+)' → logprob: -8.059298515319824
    8. ' if' → logprob: -8.184298515319824
    9. '(' → logprob: -8.559298515319824
    10. 'if' → logprob: -8.934298515319824

Token 69: ' (' (ID: 350)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.7419583201408386
    2. '(' → logprob: -0.8669583201408386
    3. ' (' → logprob: -2.7419583797454834
    4. '(int' → logprob: -4.116958141326904
    5. '(res' → logprob: -4.366958141326904
    6. '(n' → logprob: -5.491958141326904
    7. '(h' → logprob: -6.241958141326904
    8. ' ' → logprob: -6.616958141326904
    9. '(math' → logprob: -6.866958141326904
    10. '(bool' → logprob: -6.991958141326904

Token 70: 'res' (ID: 430)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.1401021033525467
    2. '(res' → logprob: -2.3901021480560303
    3. 'res' → logprob: -3.7651021480560303
    4. ' ' → logprob: -5.265101909637451
    5. '(' → logprob: -5.265101909637451
    6. 'int' → logprob: -6.265101909637451
    7. '0' → logprob: -6.640101909637451
    8. ' (' → logprob: -7.140101909637451
    9. ' res' → logprob: -7.265101909637451
    10. ' int' → logprob: -7.640101909637451

Token 71: ' !=' (ID: 1666)
  Prédit: ' !='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.40834301710128784
    2. '!=' → logprob: -1.2833430767059326
    3. '>' → logprob: -3.7833430767059326
    4. ' >' → logprob: -4.0333428382873535
    5. '%' → logprob: -4.1583428382873535
    6. ' %' → logprob: -7.0333428382873535
    7. 'int' → logprob: -7.5333428382873535
    8. '<int' → logprob: -8.283343315124512
    9. '!=(' → logprob: -9.158343315124512
    10. '!' → logprob: -10.033343315124512

Token 72: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.005241106729954481
    2. ' int' → logprob: -5.2552409172058105
    3. ' ' → logprob: -13.005241394042969
    4. '	int' → logprob: -13.380241394042969
    5. '(int' → logprob: -13.755241394042969
    6. '<int' → logprob: -14.130241394042969
    7. '=int' → logprob: -14.255241394042969
    8. '  ' → logprob: -15.005241394042969
    9. '0' → logprob: -15.130241394042969
    10. '   ' → logprob: -15.755241394042969

Token 73: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -0.00023166877508629113
    2. 'res' → logprob: -8.375231742858887
    3. '(' → logprob: -14.375231742858887
    4. ' (' → logprob: -15.000231742858887
    5. ' res' → logprob: -15.750231742858887
    6. '	res' → logprob: -17.00023078918457
    7. ',res' → logprob: -17.75023078918457
    8. '_res' → logprob: -17.75023078918457
    9. ')' → logprob: -18.00023078918457
    10. '$res' → logprob: -18.00023078918457

Token 74: ')))
' (ID: 12562)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.008238069713115692
    2. ')' → logprob: -4.883237838745117
    3. ')))' → logprob: -7.383237838745117
    4. '))
' → logprob: -11.883237838745117
    5. ' ))' → logprob: -14.133237838745117
    6. '))

' → logprob: -14.383237838745117
    7. '))))' → logprob: -14.633237838745117
    8. '1' → logprob: -14.883237838745117
    9. ''))' → logprob: -15.508237838745117
    10. ')
' → logprob: -15.508237838745117

Token 75: '#' (ID: 2)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 76: ' Voilà' (ID: 149427)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.25638312101364136
    2. '<|end|>' → logprob: -1.5063831806182861
    3. ' ' → logprob: -6.756382942199707
    4. '
' → logprob: -7.006382942199707
    5. '#' → logprob: -7.506382942199707
    6. '(' → logprob: -8.006382942199707
    7. '<|end|>' → logprob: -8.006382942199707
    8. '```' → logprob: -8.131382942199707
    9. '+' → logprob: -8.631382942199707
    10. ' )' → logprob: -8.881382942199707

Token 77: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.638112485408783
    2. '<|end|>' → logprob: -0.763112485408783
    3. '
' → logprob: -6.138112545013428
    4. '<|end|>' → logprob: -7.013112545013428
    5. '\n' → logprob: -7.388112545013428
    6. '```' → logprob: -7.638112545013428
    7. '*' → logprob: -7.638112545013428
    8. '#' → logprob: -9.01311206817627
    9. ')
' → logprob: -9.01311206817627
    10. ' ' → logprob: -9.13811206817627

Token 78: ' ça' (ID: 13590)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 79: ' devrait' (ID: 52773)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 80: ' marcher' (ID: 171848)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 81: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3770672678947449
    2. '<|end|>' → logprob: -1.5020673274993896
    3. '*' → logprob: -3.3770673274993896
    4. '
' → logprob: -3.5020673274993896
    5. ' ' → logprob: -4.8770670890808105
    6. '```' → logprob: -5.6270670890808105
    7. '<|end|>' → logprob: -6.0020670890808105
    8. '#' → logprob: -6.0020670890808105
    9. '**' → logprob: -6.2520670890808105
    10. '%' → logprob: -6.5020670890808105

Token 82: ' non' (ID: 2893)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 83: ' ?' (ID: 1423)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 81
Tokens correctement prédits (1ère position, stricte): 18
Tokens correctement prédits (1ère position, avec adaptation): 18
Tokens correctement prédits (top 10): 40
Précision stricte (1ère position): 22.22%
Précision adaptée (1ère position): 22.22%
Précision (top 10): 49.38%
================================================================================
