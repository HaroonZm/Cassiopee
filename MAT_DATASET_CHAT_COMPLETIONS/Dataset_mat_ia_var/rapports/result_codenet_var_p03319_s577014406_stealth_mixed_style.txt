================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:15:35
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
nums = input().split()
n = int(nums[0])
k = int(nums[1])
a = [int(j) for j in input().split()]
def process(n, k):
    n = n - k
    k = k - 1
    if n <= 0:
        return 1
    else:
        from math import ceil
        return 1 + (n // k) if n % k == 0 else 2 + (n // k)
result = (lambda x, y: process(x, y))(n, k)
print(result)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'nums' (ID: 44465)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' input' (ID: 3422)
  → Token d'amorce (pas de prédiction)

Token 3: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.001043647644110024
    2. '('' → logprob: -7.376043796539307
    3. ''' → logprob: -8.126043319702148
    4. '"' → logprob: -10.751043319702148
    5. '()' → logprob: -10.751043319702148
    6. '("("' → logprob: -10.751043319702148
    7. '(
' → logprob: -11.001043319702148
    8. '[' → logprob: -11.876043319702148
    9. '```' → logprob: -12.001043319702148
    10. '.' → logprob: -12.126043319702148

Token 4: 'split' (ID: 13627)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.2672879099845886
    2. '.split' → logprob: -1.5172879695892334
    3. '.strip' → logprob: -5.017287731170654
    4. '()' → logprob: -5.517287731170654
    5. 'split' → logprob: -6.267287731170654
    6. '().' → logprob: -7.142287731170654
    7. ')' → logprob: -7.767287731170654
    8. '.lower' → logprob: -7.892287731170654
    9. '(' → logprob: -8.267288208007812
    10. '.replace' → logprob: -8.642288208007812

Token 5: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0020822163205593824
    2. '()' → logprob: -6.377082347869873
    3. '('' → logprob: -8.502081871032715
    4. '`' → logprob: -10.377081871032715
    5. '(
' → logprob: -10.377081871032715
    6. ''' → logprob: -10.377081871032715
    7. '```' → logprob: -11.002081871032715
    8. '"' → logprob: -11.127081871032715
    9. '(`' → logprob: -11.627081871032715
    10. '(

' → logprob: -11.752081871032715

Token 6: 'n' (ID: 77)
  Prédit: 'nums'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'nums' → logprob: -0.9854409098625183
    2. '=' → logprob: -1.235440969467163
    3. '[' → logprob: -1.235440969467163
    4. ' =' → logprob: -4.235440731048584
    5. '.' → logprob: -4.360440731048584
    6. 'for' → logprob: -4.860440731048584
    7. '[:]' → logprob: -5.360440731048584
    8. 'num' → logprob: -7.360440731048584
    9. 'if' → logprob: -7.985440731048584
    10. '_' → logprob: -7.985440731048584

Token 7: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.017694115638733
    2. 'ums' → logprob: -1.142694115638733
    3. 'um' → logprob: -1.267694115638733
    4. '_' → logprob: -3.5176939964294434
    5. '=' → logprob: -5.892693996429443
    6. '.' → logprob: -6.767693996429443
    7. 'umbers' → logprob: -6.892693996429443
    8. 'u' → logprob: -7.017693996429443
    9. '[u' → logprob: -7.392693996429443
    10. ' =' → logprob: -7.767693996429443

Token 8: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.7937657237052917
    2. 'int' → logprob: -1.4187657833099365
    3. ' len' → logprob: -1.6687657833099365
    4. 'len' → logprob: -2.1687657833099365
    5. '0' → logprob: -6.543765544891357
    6. ' ' → logprob: -6.543765544891357
    7. '[int' → logprob: -9.418766021728516
    8. '[len' → logprob: -10.418766021728516
    9. '1' → logprob: -10.918766021728516
    10. ' nums' → logprob: -11.918766021728516

Token 9: '(nums' (ID: 40372)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.04878164082765579
    2. '(nums' → logprob: -3.048781633377075
    3. '(n' → logprob: -9.048781394958496
    4. '('' → logprob: -10.548781394958496
    5. '(num' → logprob: -11.923781394958496
    6. '()' → logprob: -12.048781394958496
    7. '```' → logprob: -12.423781394958496
    8. ')' → logprob: -12.548781394958496
    9. '`' → logprob: -12.548781394958496
    10. ' (' → logprob: -12.798781394958496

Token 10: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -2.2842308680992573e-05
    2. ')' → logprob: -10.750022888183594
    3. ' [' → logprob: -13.875022888183594
    4. '[
' → logprob: -16.625022888183594
    5. '[n' → logprob: -16.625022888183594
    6. '\[' → logprob: -16.750022888183594
    7. '[len' → logprob: -16.875022888183594
    8. '[i' → logprob: -17.250022888183594
    9. ' )' → logprob: -17.375022888183594
    10. ' ' → logprob: -17.750022888183594

Token 11: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0005470762262120843
    2. '1' → logprob: -7.625546932220459
    3. ' ' → logprob: -9.750547409057617
    4. ']' → logprob: -15.125547409057617
    5. ')' → logprob: -15.250547409057617
    6. '])' → logprob: -16.000547409057617
    7. '```' → logprob: -16.625547409057617
    8. '2' → logprob: -17.125547409057617
    9. '   ' → logprob: -17.125547409057617
    10. '-' → logprob: -17.375547409057617

Token 12: '])
' (ID: 5169)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '])' → logprob: -0.0096021369099617
    2. ')' → logprob: -5.134602069854736
    3. ']' → logprob: -5.634602069854736
    4. ')])' → logprob: -10.384602546691895
    5. ' ])' → logprob: -10.634602546691895
    6. '[' → logprob: -11.259602546691895
    7. ')]' → logprob: -11.384602546691895
    8. ']))' → logprob: -12.259602546691895
    9. ''])' → logprob: -12.634602546691895
    10. '],' → logprob: -13.634602546691895

Token 13: 'k' (ID: 74)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.18572458624839783
    2. 'k' → logprob: -1.8107246160507202
    3. 's' → logprob: -6.43572473526001
    4. ' m' → logprob: -6.93572473526001
    5. 'd' → logprob: -7.31072473526001
    6. 'a' → logprob: -7.31072473526001
    7. 'x' → logprob: -8.310724258422852
    8. 'for' → logprob: -8.685724258422852
    9. 'c' → logprob: -8.810724258422852
    10. 'count' → logprob: -8.935724258422852

Token 14: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1388537734746933
    2. '=' → logprob: -2.6388537883758545
    3. ' ' → logprob: -2.8888537883758545
    4. ')' → logprob: -7.138853549957275
    5. '_' → logprob: -7.763853549957275
    6. '  ' → logprob: -8.013854026794434
    7. '<|end|>' → logprob: -8.013854026794434
    8. '[' → logprob: -9.013854026794434
    9. '.' → logprob: -9.263854026794434
    10. 'space' → logprob: -9.888854026794434

Token 15: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.9707688689231873
    2. ' int' → logprob: -1.220768928527832
    3. ' nums' → logprob: -1.595768928527832
    4. 'nums' → logprob: -2.095768928527832
    5. ' ' → logprob: -8.220768928527832
    6. '1' → logprob: -9.345768928527832
    7. '0' → logprob: -10.595768928527832
    8. 'num' → logprob: -10.720768928527832
    9. '(nums' → logprob: -10.845768928527832
    10. '=int' → logprob: -11.470768928527832

Token 16: '(nums' (ID: 40372)
  Prédit: '(nums'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(nums' → logprob: -0.2257339060306549
    2. '(' → logprob: -1.6007338762283325
    3. '(k' → logprob: -8.350733757019043
    4. '(n' → logprob: -10.100733757019043
    5. '("("' → logprob: -11.600733757019043
    6. '(num' → logprob: -12.100733757019043
    7. ' (' → logprob: -12.350733757019043
    8. '(chars' → logprob: -12.975733757019043
    9. '('' → logprob: -13.225733757019043
    10. '(params' → logprob: -13.225733757019043

Token 17: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -6.392202976712724e-06
    2. ')' → logprob: -13.000006675720215
    3. ' [' → logprob: -13.375006675720215
    4. '```' → logprob: -14.125006675720215
    5. '])' → logprob: -14.250006675720215
    6. ' ' → logprob: -15.500006675720215
    7. '1' → logprob: -15.500006675720215
    8. '   ' → logprob: -15.875006675720215
    9. '))' → logprob: -16.0000057220459
    10. '[
' → logprob: -16.0000057220459

Token 18: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0006411884678527713
    2. '0' → logprob: -7.875641345977783
    3. '])' → logprob: -8.500640869140625
    4. '2' → logprob: -10.000640869140625
    5. 'k' → logprob: -11.750640869140625
    6. ' ' → logprob: -13.375640869140625
    7. ']' → logprob: -13.750640869140625
    8. 'n' → logprob: -15.000640869140625
    9. '```' → logprob: -15.250640869140625
    10. '   ' → logprob: -15.875640869140625

Token 19: '])
' (ID: 5169)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -8.180258191714529e-06
    2. '))' → logprob: -12.750008583068848
    3. '])' → logprob: -13.125008583068848
    4. '`)' → logprob: -13.625008583068848
    5. '）' → logprob: -14.375008583068848
    6. ']' → logprob: -14.750008583068848
    7. '')' → logprob: -15.375008583068848
    8. ')])' → logprob: -15.625008583068848
    9. ')
' → logprob: -16.12500762939453
    10. '),' → logprob: -16.25000762939453

Token 20: 'a' (ID: 64)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -1.5217667818069458
    2. 's' → logprob: -1.6467667818069458
    3. 'for' → logprob: -2.0217666625976562
    4. 'a' → logprob: -2.2717666625976562
    5. 'result' → logprob: -2.3967666625976562
    6. 'x' → logprob: -2.7717666625976562
    7. 'r' → logprob: -3.3967666625976562
    8. 'if' → logprob: -3.7717666625976562
    9. 'd' → logprob: -4.146766662597656
    10. 'n' → logprob: -4.396766662597656

Token 21: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.01048292126506567
    2. '[k' → logprob: -4.7604827880859375
    3. '[n' → logprob: -8.385482788085938
    4. ' =' → logprob: -8.385482788085938
    5. '[:]' → logprob: -8.510482788085938
    6. '[a' → logprob: -8.635482788085938
    7. '[i' → logprob: -8.760482788085938
    8. '=' → logprob: -8.885482788085938
    9. 's' → logprob: -8.885482788085938
    10. '[]' → logprob: -9.135482788085938

Token 22: ' [' (ID: 723)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.27945706248283386
    2. ' []' → logprob: -1.7794570922851562
    3. '[' → logprob: -3.7794570922851562
    4. 'list' → logprob: -4.404457092285156
    5. 'input' → logprob: -4.529457092285156
    6. '[int' → logprob: -4.654457092285156
    7. ' [' → logprob: -4.779457092285156
    8. '[input' → logprob: -5.029457092285156
    9. ' list' → logprob: -5.904457092285156
    10. ' input' → logprob: -7.029457092285156

Token 23: 'int' (ID: 491)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.3532491624355316
    2. 'int' → logprob: -1.228249192237854
    3. ']' → logprob: -5.8532490730285645
    4. ']int' → logprob: -6.3532490730285645
    5. ' int' → logprob: -9.853249549865723
    6. ' ' → logprob: -10.478249549865723
    7. '(int' → logprob: -10.478249549865723
    8. '[int' → logprob: -10.728249549865723
    9. 'input' → logprob: -11.353249549865723
    10. 'i' → logprob: -11.853249549865723

Token 24: '(j' (ID: 4997)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0868852511048317
    2. '(x' → logprob: -2.5868852138519287
    3. '(nums' → logprob: -5.086885452270508
    4. '(a' → logprob: -6.836885452270508
    5. '(i' → logprob: -8.086885452270508
    6. '()]' → logprob: -9.086885452270508
    7. '()' → logprob: -9.211885452270508
    8. '(num' → logprob: -10.086885452270508
    9. ']' → logprob: -10.086885452270508
    10. '(s' → logprob: -10.711885452270508

Token 25: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.012537315487861633
    2. '(x' → logprob: -5.012537479400635
    3. '(a' → logprob: -5.762537479400635
    4. '(nums' → logprob: -7.012537479400635
    5. '(i' → logprob: -7.387537479400635
    6. '(' → logprob: -8.012537002563477
    7. 'a' → logprob: -8.512537002563477
    8. ')]' → logprob: -8.637537002563477
    9. ' )' → logprob: -8.762537002563477
    10. 'or' → logprob: -9.762537002563477

Token 26: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.4457247853279114
    2. ')' → logprob: -1.4457247257232666
    3. ' for' → logprob: -2.5707247257232666
    4. ']' → logprob: -3.9457247257232666
    5. '(nums' → logprob: -4.195724964141846
    6. '(' → logprob: -4.695724964141846
    7. ')]' → logprob: -6.445724964141846
    8. '(x' → logprob: -6.820724964141846
    9. '(i' → logprob: -7.820724964141846
    10. '])' → logprob: -8.445724487304688

Token 27: ' j' (ID: 441)
  Prédit: ' nums'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' nums' → logprob: -0.04823710024356842
    2. ' range' → logprob: -3.1732370853424072
    3. '(nums' → logprob: -6.173237323760986
    4. ' ' → logprob: -6.923237323760986
    5. ' input' → logprob: -7.173237323760986
    6. 'nums' → logprob: -7.423237323760986
    7. '<|end|>' → logprob: -8.173236846923828
    8. ' a' → logprob: -9.298236846923828
    9. ' num' → logprob: -9.673236846923828
    10. '_nums' → logprob: -9.673236846923828

Token 28: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.04304474592208862
    2. 'in' → logprob: -3.1680448055267334
    3. ' ' → logprob: -10.793045043945312
    4. '  ' → logprob: -12.043045043945312
    5. '	in' → logprob: -12.668045043945312
    6. 'a' → logprob: -13.043045043945312
    7. '<|end|>' → logprob: -13.543045043945312
    8. 's' → logprob: -13.668045043945312
    9. 'import' → logprob: -13.668045043945312
    10. 'n' → logprob: -13.793045043945312

Token 29: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.24618053436279297
    2. 'input' → logprob: -1.746180534362793
    3. ' nums' → logprob: -3.246180534362793
    4. 'nums' → logprob: -5.871180534362793
    5. ' range' → logprob: -6.371180534362793
    6. 'range' → logprob: -8.121180534362793
    7. '(nums' → logprob: -11.246180534362793
    8. ' ' → logprob: -12.371180534362793
    9. '(input' → logprob: -12.746180534362793
    10. ' a' → logprob: -13.746180534362793

Token 30: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.7480356097221375
    2. '()]' → logprob: -0.7480356097221375
    3. '().' → logprob: -2.9980356693267822
    4. '())' → logprob: -6.373035430908203
    5. '(' → logprob: -6.498035430908203
    6. '()].' → logprob: -9.123035430908203
    7. '()][' → logprob: -9.623035430908203
    8. '()>' → logprob: -10.748035430908203
    9. '()(' → logprob: -10.873035430908203
    10. ']()' → logprob: -10.998035430908203

Token 31: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -1.843177233240567e-05
    2. 'strip' → logprob: -11.000018119812012
    3. 'rstrip' → logprob: -13.875018119812012
    4. ' split' → logprob: -14.500018119812012
    5. 'spl' → logprob: -15.375018119812012
    6. '(split' → logprob: -16.750019073486328
    7. ')' → logprob: -18.875019073486328
    8. '_split' → logprob: -19.625019073486328
    9. 's' → logprob: -19.750019073486328
    10. 'read' → logprob: -20.375019073486328

Token 32: '()]
' (ID: 67155)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.005756949540227652
    2. '(' → logprob: -5.380756855010986
    3. '()' → logprob: -6.880756855010986
    4. '())' → logprob: -10.130757331848145
    5. '('' → logprob: -10.630757331848145
    6. ']' → logprob: -10.630757331848145
    7. ')]' → logprob: -12.130757331848145
    8. '()][' → logprob: -12.380757331848145
    9. '()]
' → logprob: -13.005757331848145
    10. ']()' → logprob: -13.130757331848145

Token 33: 'def' (ID: 1314)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.42730095982551575
    2. 'c' → logprob: -1.9273009300231934
    3. 's' → logprob: -2.5523009300231934
    4. 'i' → logprob: -3.5523009300231934
    5. 'for' → logprob: -3.6773009300231934
    6. 'r' → logprob: -3.9273009300231934
    7. '.' → logprob: -4.302300930023193
    8. 'count' → logprob: -4.677300930023193
    9. 'm' → logprob: -5.927300930023193
    10. 'd' → logprob: -5.927300930023193

Token 34: ' process' (ID: 2273)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.005319616291671991
    2. ' space' → logprob: -5.880319595336914
    3. ' a' → logprob: -6.880319595336914
    4. ' max' → logprob: -8.255319595336914
    5. '_' → logprob: -8.630319595336914
    6. ' find' → logprob: -9.005319595336914
    7. ' f' → logprob: -9.130319595336914
    8. ' k' → logprob: -9.380319595336914
    9. ' ' → logprob: -9.380319595336914
    10. ' is' → logprob: -9.505319595336914

Token 35: '(n' (ID: 2406)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.252368301153183
    2. '(' → logprob: -1.5023683309555054
    3. '_(' → logprob: -8.627367973327637
    4. '(a' → logprob: -9.002367973327637
    5. '_a' → logprob: -10.377367973327637
    6. '(_)' → logprob: -10.752367973327637
    7. '(_' → logprob: -11.877367973327637
    8. '_data' → logprob: -12.127367973327637
    9. '```' → logprob: -12.127367973327637
    10. ')' → logprob: -12.127367973327637

Token 36: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.011164079420268536
    2. ')' → logprob: -4.63616418838501
    3. '):' → logprob: -7.26116418838501
    4. ' ,' → logprob: -8.636163711547852
    5. ',n' → logprob: -8.761163711547852
    6. ',a' → logprob: -9.011163711547852
    7. 'a' → logprob: -9.886163711547852
    8. 's' → logprob: -10.386163711547852
    9. ',p' → logprob: -10.511163711547852
    10. ',k' → logprob: -10.636163711547852

Token 37: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.22596319019794464
    2. 'k' → logprob: -1.6009632349014282
    3. ' a' → logprob: -8.350963592529297
    4. 'a' → logprob: -8.350963592529297
    5. ' ' → logprob: -9.600963592529297
    6. ')' → logprob: -13.100963592529297
    7. ' )' → logprob: -13.100963592529297
    8. ' ' → logprob: -13.475963592529297
    9. ' n' → logprob: -13.850963592529297
    10. '	k' → logprob: -13.975963592529297

Token 38: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.027981165796518326
    2. '):' → logprob: -3.7779812812805176
    3. ')' → logprob: -5.402981281280518
    4. ' ,' → logprob: -9.65298080444336
    5. ',a' → logprob: -9.90298080444336
    6. ',n' → logprob: -10.02798080444336
    7. ',k' → logprob: -11.40298080444336
    8. ',p' → logprob: -12.15298080444336
    9. ',)' → logprob: -12.27798080444336
    10. ' ):' → logprob: -12.65298080444336

Token 39: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8363603353500366
    2. ' ' → logprob: -1.3363603353500366
    3. '    ' → logprob: -2.336360454559326
    4. '\' → logprob: -3.211360454559326
    5. ':' → logprob: -3.336360454559326
    6. ' 
' → logprob: -3.836360454559326
    7. '
' → logprob: -3.836360454559326
    8. '    
' → logprob: -4.336360454559326
    9. '<|end|>' → logprob: -4.461360454559326
    10. '\n' → logprob: -4.461360454559326

Token 40: ' n' (ID: 297)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3805188536643982
    2. 'r' → logprob: -2.130518913269043
    3. 'a' → logprob: -3.130518913269043
    4. ' 
' → logprob: -3.630518913269043
    5. 'result' → logprob: -4.005518913269043
    6. ' r' → logprob: -4.130518913269043
    7. 'n' (adapté à ' n') → logprob: -4.630518913269043
    8. 'i' → logprob: -4.755518913269043
    9. ' a' → logprob: -4.755518913269043
    10. ' return' → logprob: -5.255518913269043

Token 41: ' =' (ID: 314)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '%' → logprob: -0.569269061088562
    2. ' %' → logprob: -0.944269061088562
    3. ' ' → logprob: -3.8192691802978516
    4. ' *' → logprob: -5.444269180297852
    5. ')' → logprob: -5.694269180297852
    6. '*' → logprob: -5.944269180297852
    7. '-' → logprob: -6.194269180297852
    8. '=' → logprob: -6.194269180297852
    9. ',' → logprob: -6.444269180297852
    10. ' >' → logprob: -6.694269180297852

Token 42: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.26608699560165405
    2. ' k' → logprob: -1.8910870552062988
    3. 'n' → logprob: -3.016087055206299
    4. 'k' → logprob: -3.766087055206299
    5. '0' → logprob: -5.641087055206299
    6. ' ' → logprob: -6.141087055206299
    7. ' len' → logprob: -6.391087055206299
    8. 'len' → logprob: -7.016087055206299
    9. ' max' → logprob: -8.01608657836914
    10. ' int' → logprob: -8.26608657836914

Token 43: ' -' (ID: 533)
  Prédit: ' %'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.4801715314388275
    2. '%' → logprob: -1.23017156124115
    3. ' ' → logprob: -3.7301714420318604
    4. ' *' → logprob: -3.8551714420318604
    5. '+' → logprob: -4.2301716804504395
    6. '-' → logprob: -4.3551716804504395
    7. '*' → logprob: -4.7301716804504395
    8. ' -' → logprob: -5.7301716804504395
    9. ' +' → logprob: -5.9801716804504395
    10. ')' → logprob: -7.8551716804504395

Token 44: ' k' (ID: 372)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.7855958938598633
    2. ' k' → logprob: -1.1605958938598633
    3. ' ' → logprob: -2.1605958938598633
    4. 'k' → logprob: -2.1605958938598633
    5. '2' → logprob: -8.535595893859863
    6. '10' → logprob: -10.660595893859863
    7. '20' → logprob: -11.285595893859863
    8. '0' → logprob: -11.473095893859863
    9. '5' → logprob: -11.473095893859863
    10. '4' → logprob: -11.535595893859863

Token 45: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6798511147499084
    2. '+' → logprob: -1.4298510551452637
    3. ' ' → logprob: -2.1798510551452637
    4. '<|end|>' → logprob: -3.3048510551452637
    5. ' 
' → logprob: -3.4298510551452637
    6. '  
' → logprob: -4.554851055145264
    7. '\n' → logprob: -4.554851055145264
    8. '*' → logprob: -4.804851055145264
    9. ')' → logprob: -4.929851055145264
    10. '   ' → logprob: -4.929851055145264

Token 46: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7878497838973999
    2. '
' → logprob: -1.6628497838974
    3. ' ' → logprob: -2.5378499031066895
    4. '\n' → logprob: -2.6628499031066895
    5. '    
' → logprob: -2.7878499031066895
    6. ' 
' → logprob: -2.7878499031066895
    7. '  
' → logprob: -3.6628499031066895
    8. ')' → logprob: -4.1628499031066895
    9. '\' → logprob: -4.7878499031066895
    10. '   
' → logprob: -5.6628499031066895

Token 47: ' k' (ID: 372)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -1.1846715211868286
    2. ' ' → logprob: -2.184671401977539
    3. ' return' → logprob: -2.184671401977539
    4. 'a' → logprob: -2.309671401977539
    5. '   ' → logprob: -2.559671401977539
    6. 'n' → logprob: -2.809671401977539
    7. 'for' → logprob: -2.934671401977539
    8. ' 
' → logprob: -3.309671401977539
    9. '\n' → logprob: -3.809671401977539
    10. ' for' → logprob: -3.934671401977539

Token 48: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.6676677465438843
    2. '=' → logprob: -1.5426677465438843
    3. ' +=' → logprob: -1.9176677465438843
    4. '%' → logprob: -4.042667865753174
    5. ')' → logprob: -4.167667865753174
    6. '+' → logprob: -4.292667865753174
    7. ' -=' → logprob: -4.542667865753174
    8. ' ' → logprob: -4.667667865753174
    9. '*' → logprob: -4.792667865753174
    10. ' *' → logprob: -4.917667865753174

Token 49: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.6553765535354614
    2. ' n' → logprob: -1.5303765535354614
    3. 'k' → logprob: -2.280376434326172
    4. ' ' → logprob: -2.405376434326172
    5. '0' → logprob: -3.280376434326172
    6. 'n' → logprob: -4.030376434326172
    7. '1' → logprob: -4.530376434326172
    8. ' a' → logprob: -6.030376434326172
    9. '2' → logprob: -7.030376434326172
    10. 'a' → logprob: -7.155376434326172

Token 50: ' -' (ID: 533)
  Prédit: ' +'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.2985847294330597
    2. '+' → logprob: -1.9235846996307373
    3. ' *' → logprob: -2.9235846996307373
    4. '*' → logprob: -3.9235846996307373
    5. ' -' → logprob: -4.048584938049316
    6. ' %' → logprob: -4.798584938049316
    7. '%' → logprob: -5.173584938049316
    8. '-' → logprob: -5.673584938049316
    9. ' ' → logprob: -6.048584938049316
    10. '1' → logprob: -8.048584938049316

Token 51: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.005261152982711792
    2. ' ' → logprob: -5.255260944366455
    3. '2' → logprob: -11.505261421203613
    4. 'n' → logprob: -11.630261421203613
    5. ' n' → logprob: -12.130261421203613
    6. '3' → logprob: -14.505261421203613
    7. ' k' → logprob: -15.130261421203613
    8. 'k' → logprob: -15.130261421203613
    9. '4' → logprob: -15.255261421203613
    10. '0' → logprob: -15.255261421203613

Token 52: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0003346314188092947
    2. 'n' → logprob: -8.875334739685059
    3. ' ' → logprob: -9.125334739685059
    4. '2' → logprob: -10.000334739685059
    5. 'k' → logprob: -11.000334739685059
    6. 'a' → logprob: -12.000334739685059
    7. '0' → logprob: -12.875334739685059
    8. '(n' → logprob: -12.875334739685059
    9. '3' → logprob: -13.000334739685059
    10. 'int' → logprob: -13.125334739685059

Token 53: '
' (ID: 198)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5693046450614929
    2. '<|end|>' → logprob: -1.5693047046661377
    3. '
' → logprob: -2.0693047046661377
    4. '   ' → logprob: -2.6943047046661377
    5. '\n' → logprob: -4.444304466247559
    6. ':' → logprob: -4.444304466247559
    7. ' ' → logprob: -6.194304466247559
    8. '    
' → logprob: -7.069304466247559
    9. ' 
' → logprob: -7.069304466247559
    10. ',' → logprob: -7.319304466247559

Token 54: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6965888738632202
    2. ')' → logprob: -1.0715888738632202
    3. '
' → logprob: -2.3215889930725098
    4. '<|end|>' → logprob: -3.8215889930725098
    5. '\n' → logprob: -4.07158899307251
    6. '    
' → logprob: -5.07158899307251
    7. ' ' → logprob: -5.32158899307251
    8. ':' → logprob: -5.94658899307251
    9. ' 
' → logprob: -6.19658899307251
    10. '  
' → logprob: -6.69658899307251

Token 55: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7758735418319702
    2. '\n' → logprob: -2.2758736610412598
    3. ' ' → logprob: -2.6508736610412598
    4. 'n' → logprob: -2.6508736610412598
    5. ')' → logprob: -2.7758736610412598
    6. 'return' → logprob: -3.0258736610412598
    7. 'r' → logprob: -3.4008736610412598
    8. 'i' → logprob: -3.9008736610412598
    9. 'a' → logprob: -4.27587366104126
    10. '\' → logprob: -4.27587366104126

Token 56: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.0031708183232694864
    2. ' k' → logprob: -5.878170967102051
    3. 'n' → logprob: -8.00317096710205
    4. ' ' → logprob: -11.12817096710205
    5. ' a' → logprob: -11.75317096710205
    6. ' ' → logprob: -12.50317096710205
    7. 'k' → logprob: -13.00317096710205
    8. ' (' → logprob: -13.62817096710205
    9. ' not' → logprob: -14.12817096710205
    10. '(n' → logprob: -14.37817096710205

Token 57: ' <=' (ID: 5017)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.4143131673336029
    2. ' ' → logprob: -2.2893130779266357
    3. ' <=' → logprob: -2.2893130779266357
    4. ' ==' → logprob: -3.0393130779266357
    5. ' >=' → logprob: -3.5393130779266357
    6. ' <' → logprob: -4.164313316345215
    7. '>' → logprob: -4.289313316345215
    8. '%' → logprob: -4.289313316345215
    9. ' %' → logprob: -4.539313316345215
    10. '==' → logprob: -5.789313316345215

Token 58: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.49606993794441223
    2. ' ' → logprob: -0.9960699081420898
    3. 'k' → logprob: -4.12106990814209
    4. ' k' → logprob: -5.37106990814209
    5. '1' → logprob: -7.37106990814209
    6. '2' → logprob: -9.87106990814209
    7. '5' → logprob: -10.30856990814209
    8. '3' → logprob: -10.74606990814209
    9. '9' → logprob: -10.80856990814209
    10. '10' → logprob: -10.99606990814209

Token 59: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.11553053557872772
    2. ' ' → logprob: -2.615530490875244
    3. 'k' → logprob: -3.365530490875244
    4. ' k' → logprob: -7.240530490875244
    5. '1' → logprob: -7.615530490875244
    6. '2' → logprob: -10.115530967712402
    7. '5' → logprob: -10.678030967712402
    8. '9' → logprob: -10.678030967712402
    9. '10' → logprob: -10.740530967712402
    10. '3' → logprob: -10.740530967712402

Token 60: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0028485057409852743
    2. ':return' → logprob: -6.5028486251831055
    3. ':
' → logprob: -7.3778486251831055
    4. ' :' → logprob: -7.5028486251831055
    5. '   ' → logprob: -9.502848625183105
    6. ' or' → logprob: -10.002848625183105
    7. ',' → logprob: -11.502848625183105
    8. ' and' → logprob: -11.627848625183105
    9. '       ' → logprob: -11.877848625183105
    10. ' :
' → logprob: -12.252848625183105

Token 61: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5043862462043762
    2. '   ' → logprob: -1.2543861865997314
    3. ' return' → logprob: -3.0043861865997314
    4. ':' → logprob: -3.1293861865997314
    5. 'return' → logprob: -5.1293864250183105
    6. ':return' → logprob: -5.5043864250183105
    7. '    ' → logprob: -6.3793864250183105
    8. ' ' → logprob: -6.6293864250183105
    9. '	return' → logprob: -6.8793864250183105
    10. '\n' → logprob: -7.3793864250183105

Token 62: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.18557745218276978
    2. 'return' (adapté à ' return') → logprob: -2.060577392578125
    3. '   ' → logprob: -3.560577392578125
    4. '    ' → logprob: -4.810577392578125
    5. '       ' → logprob: -6.310577392578125
    6. ' ' → logprob: -6.810577392578125
    7. '0' → logprob: -6.935577392578125
    8. '    
' → logprob: -8.060577392578125
    9. '\n' → logprob: -8.435577392578125
    10. '	return' → logprob: -8.435577392578125

Token 63: ' ' (ID: 220)
  Prédit: ' None'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' None' → logprob: -0.925277590751648
    2. ' ' → logprob: -1.050277590751648
    3. 'None' → logprob: -2.4252777099609375
    4. '0' → logprob: -3.0502777099609375
    5. ' n' → logprob: -3.1752777099609375
    6. ' k' → logprob: -3.5502777099609375
    7. 'n' → logprob: -4.0502777099609375
    8. ' False' → logprob: -5.3002777099609375
    9. ' -' → logprob: -5.4252777099609375
    10. '1' → logprob: -5.4252777099609375

Token 64: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.2984728515148163
    2. 'k' → logprob: -1.7984728813171387
    3. 'n' → logprob: -3.5484728813171387
    4. '1' → logprob: -3.6734728813171387
    5. '-' → logprob: -3.9234728813171387
    6. 'a' → logprob: -5.298472881317139
    7. '[]' → logprob: -5.923472881317139
    8. 'None' → logprob: -5.923472881317139
    9. 'process' → logprob: -5.923472881317139
    10. 'False' → logprob: -6.548472881317139

Token 65: '
' (ID: 198)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.0851120948791504
    2. '   ' → logprob: -1.4601120948791504
    3. '
' → logprob: -2.4601120948791504
    4. '<|end|>' → logprob: -2.5851120948791504
    5. ' else' → logprob: -2.7101120948791504
    6. '    
' → logprob: -2.7101120948791504
    7. ' 
' → logprob: -3.5851120948791504
    8. '  
' → logprob: -3.7101120948791504
    9. 'n' → logprob: -4.08511209487915
    10. ' ' → logprob: -4.58511209487915

Token 66: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9502304792404175
    2. ' else' → logprob: -1.5752304792404175
    3. '<|end|>' → logprob: -2.325230598449707
    4. '    
' → logprob: -2.825230598449707
    5. '\n' → logprob: -3.075230598449707
    6. ' ' → logprob: -3.200230598449707
    7. 'else' → logprob: -3.700230598449707
    8. '
' → logprob: -3.825230598449707
    9. ')' → logprob: -3.950230598449707
    10. '  
' → logprob: -4.075230598449707

Token 67: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.7462599277496338
    2. 'else' (adapté à ' else') → logprob: -1.4962599277496338
    3. '   ' → logprob: -1.6212599277496338
    4. ' ' → logprob: -4.246259689331055
    5. 'return' → logprob: -4.371259689331055
    6. ' *' → logprob: -4.496259689331055
    7. ' elif' → logprob: -4.621259689331055
    8. ' return' → logprob: -4.746259689331055
    9. 'elif' → logprob: -4.871259689331055
    10. '*' → logprob: -5.371259689331055

Token 68: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0075643910095095634
    2. '   ' → logprob: -5.757564544677734
    3. ':
' → logprob: -5.882564544677734
    4. ':return' → logprob: -7.257564544677734
    5. '       ' → logprob: -8.007564544677734
    6. '    ' → logprob: -9.132564544677734
    7. ' return' → logprob: -9.257564544677734
    8. ' :' → logprob: -9.382564544677734
    9. ',' → logprob: -9.507564544677734
    10. 'return' → logprob: -9.882564544677734

Token 69: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8959768414497375
    2. 'return' → logprob: -1.2709767818450928
    3. ' return' → logprob: -2.1459767818450928
    4. ' process' → logprob: -2.2709767818450928
    5. 'process' → logprob: -2.8959767818450928
    6. ' n' → logprob: -5.145977020263672
    7. 'a' → logprob: -5.645977020263672
    8. ' k' → logprob: -5.770977020263672
    9. '       ' → logprob: -5.770977020263672
    10. ' for' → logprob: -5.770977020263672

Token 70: ' from' (ID: 591)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.5086053013801575
    2. 'process' → logprob: -1.2586052417755127
    3. ' process' → logprob: -2.7586052417755127
    4. ' return' → logprob: -3.5086052417755127
    5. 'k' → logprob: -5.383605480194092
    6. 'n' → logprob: -5.383605480194092
    7. ' n' → logprob: -5.758605480194092
    8. ' k' → logprob: -5.758605480194092
    9. 'a' → logprob: -6.508605480194092
    10. '   ' → logprob: -6.633605480194092

Token 71: ' math' (ID: 13324)
  Prédit: ' math'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.05908425897359848
    2. 'math' → logprob: -3.684084177017212
    3. ' functools' → logprob: -4.059084415435791
    4. ' itertools' → logprob: -5.434084415435791
    5. ' collections' → logprob: -5.684084415435791
    6. ' process' → logprob: -5.809084415435791
    7. 'collections' → logprob: -6.309084415435791
    8. ' sym' → logprob: -7.559084415435791
    9. 'process' → logprob: -7.809084415435791
    10. '_' → logprob: -7.934084415435791

Token 72: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.1334325522184372
    2. 'import' → logprob: -3.008432626724243
    3. '<|end|>' → logprob: -3.008432626724243
    4. '.' → logprob: -4.258432388305664
    5. ' .' → logprob: -5.508432388305664
    6. '.factor' → logprob: -5.633432388305664
    7. '<|end|>' → logprob: -5.883432388305664
    8. '	import' → logprob: -7.383432388305664
    9. '.sqrt' → logprob: -8.258432388305664
    10. ' factorial' → logprob: -9.008432388305664

Token 73: ' ceil' (ID: 35964)
  Prédit: ' factorial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' factorial' → logprob: -0.5663713216781616
    2. ' comb' → logprob: -1.1913713216781616
    3. 'factor' → logprob: -2.316371440887451
    4. 'comb' → logprob: -4.066371440887451
    5. ' ceil' → logprob: -5.066371440887451
    6. 'ceil' → logprob: -5.941371440887451
    7. 'pow' → logprob: -7.066371440887451
    8. ' gcd' → logprob: -7.691371440887451
    9. 'fact' → logprob: -8.191370964050293
    10. 'sqrt' → logprob: -8.316370964050293

Token 74: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.27421361207962036
    2. '(n' → logprob: -1.6492135524749756
    3. ',' → logprob: -3.3992135524749756
    4. '((' → logprob: -5.399213790893555
    5. '(abs' → logprob: -6.524213790893555
    6. '       ' → logprob: -6.649213790893555
    7. ' (' → logprob: -6.774213790893555
    8. '<|end|>' → logprob: -7.024213790893555
    9. '   ' → logprob: -7.149213790893555
    10. '(k' → logprob: -7.399213790893555

Token 75: '       ' (ID: 309)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6039496660232544
    2. '(n' → logprob: -1.1039496660232544
    3. ' (' → logprob: -2.853949546813965
    4. '((' → logprob: -3.228949546813965
    5. '(
' → logprob: -5.353949546813965
    6. ',' → logprob: -5.478949546813965
    7. '(((' → logprob: -5.728949546813965
    8. '(len' → logprob: -6.353949546813965
    9. '(k' → logprob: -6.603949546813965
    10. 'n' → logprob: -6.603949546813965

Token 76: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.15045104920864105
    2. '       ' → logprob: -2.6504509449005127
    3. 'ceil' → logprob: -3.2754509449005127
    4. 'n' → logprob: -4.150451183319092
    5. ' return' → logprob: -4.650451183319092
    6. '(' → logprob: -7.025451183319092
    7. ' ceil' → logprob: -7.525451183319092
    8. 'x' → logprob: -7.900451183319092
    9. '(n' → logprob: -8.025450706481934
    10. 'div' → logprob: -8.025450706481934

Token 77: ' ' (ID: 220)
  Prédit: ' ceil'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ceil' → logprob: -0.010024157352745533
    2. 'ceil' → logprob: -4.635024070739746
    3. ' (' → logprob: -9.010024070739746
    4. ' int' → logprob: -9.635024070739746
    5. '(' → logprob: -10.760024070739746
    6. ' max' → logprob: -10.885024070739746
    7. ' ' → logprob: -11.385024070739746
    8. ' ce' → logprob: -11.760024070739746
    9. ' n' → logprob: -11.885024070739746
    10. ' ' → logprob: -12.760024070739746

Token 78: '1' (ID: 16)
  Prédit: 'ceil'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ceil' → logprob: -0.015933597460389137
    2. ' ceil' → logprob: -4.265933513641357
    3. '(' → logprob: -6.515933513641357
    4. '(n' → logprob: -9.640933990478516
    5. ' (' → logprob: -10.140933990478516
    6. 'n' → logprob: -10.515933990478516
    7. 'max' → logprob: -11.140933990478516
    8. '   ' → logprob: -11.140933990478516
    9. 'int' → logprob: -11.265933990478516
    10. '-' → logprob: -11.390933990478516

Token 79: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.09018012881278992
    2. '+' → logprob: -2.7151801586151123
    3. '<|end|>' → logprob: -4.715179920196533
    4. ' *' → logprob: -5.840179920196533
    5. ' ' → logprob: -5.840179920196533
    6. ' +
' → logprob: -6.465179920196533
    7. '(' → logprob: -6.840179920196533
    8. '0' → logprob: -7.090179920196533
    9. '*' → logprob: -7.590179920196533
    10. '()' → logprob: -8.965180397033691

Token 80: ' (' (ID: 350)
  Prédit: ' ceil'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ceil' → logprob: -0.033710017800331116
    2. 'ceil' → logprob: -3.40871000289917
    3. ' int' → logprob: -10.908710479736328
    4. ' max' → logprob: -11.408710479736328
    5. ' (' → logprob: -11.533710479736328
    6. ' ' → logprob: -12.033710479736328
    7. 'int' → logprob: -12.283710479736328
    8. ' ce' → logprob: -13.158710479736328
    9. ' pow' → logprob: -13.533710479736328
    10. ' n' → logprob: -13.658710479736328

Token 81: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.06659389287233353
    2. '(n' → logprob: -3.566593885421753
    3. 'ceil' → logprob: -3.941593885421753
    4. ' n' → logprob: -4.566594123840332
    5. '-' → logprob: -6.316594123840332
    6. '(' → logprob: -6.441594123840332
    7. ' ceil' → logprob: -7.066594123840332
    8. ' (' → logprob: -7.566594123840332
    9. '-n' → logprob: -7.941594123840332
    10. ' -' → logprob: -8.191594123840332

Token 82: ' //' (ID: 602)
  Prédit: ' +'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.07533783465623856
    2. '+' → logprob: -3.0753378868103027
    3. ' -' → logprob: -4.325337886810303
    4. ' ' → logprob: -4.825337886810303
    5. '-' → logprob: -5.325337886810303
    6. ' //' → logprob: -9.075337409973145
    7. ')' → logprob: -9.450337409973145
    8. ' )' → logprob: -11.075337409973145
    9. ' +
' → logprob: -11.325337409973145
    10. '  ' → logprob: -11.950337409973145

Token 83: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.013629775494337082
    2. ' k' → logprob: -4.388629913330078
    3. '(k' → logprob: -7.513629913330078
    4. ' (' → logprob: -8.888629913330078
    5. 'a' → logprob: -9.013629913330078
    6. '(' → logprob: -9.638629913330078
    7. ' ' → logprob: -9.638629913330078
    8. '2' → logprob: -10.138629913330078
    9. '   ' → logprob: -10.888629913330078
    10. ')' → logprob: -11.138629913330078

Token 84: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.008399914018809795
    2. ' +' → logprob: -5.383399963378906
    3. '+' → logprob: -6.258399963378906
    4. '))' → logprob: -7.133399963378906
    5. ' )' → logprob: -7.758399963378906
    6. ')+' → logprob: -8.133399963378906
    7. ' if' → logprob: -9.383399963378906
    8. ')))' → logprob: -9.383399963378906
    9. 'if' → logprob: -9.758399963378906
    10. ')
' → logprob: -10.008399963378906

Token 85: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7169688940048218
    2. '<|end|>' → logprob: -0.8419688940048218
    3. '#' → logprob: -3.8419690132141113
    4. '
' → logprob: -4.091969013214111
    5. '*' → logprob: -4.841969013214111
    6. '+' → logprob: -4.966969013214111
    7. '<|end|>' → logprob: -5.591969013214111
    8. '```' → logprob: -5.716969013214111
    9. '\n' → logprob: -5.841969013214111
    10. '[' → logprob: -5.841969013214111

Token 86: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.07313404232263565
    2. 'n' → logprob: -2.698133945465088
    3. '(n' → logprob: -5.948133945465088
    4. ' (' → logprob: -7.573133945465088
    5. '(' → logprob: -10.323134422302246
    6. ' ' → logprob: -11.448134422302246
    7. ' not' → logprob: -11.698134422302246
    8. '	n' → logprob: -12.073134422302246
    9. ' ' → logprob: -12.073134422302246
    10. '   ' → logprob: -13.573134422302246

Token 87: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.03384646773338318
    2. '%' → logprob: -3.408846378326416
    3. ' ' → logprob: -8.658846855163574
    4. ' <=' → logprob: -11.033846855163574
    5. '<=' → logprob: -12.908846855163574
    6. ' ' → logprob: -13.283846855163574
    7. '%n' → logprob: -13.783846855163574
    8. '%s' → logprob: -13.908846855163574
    9. '>' → logprob: -14.033846855163574
    10. ' else' → logprob: -14.283846855163574

Token 88: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.6931576132774353
    2. ' k' → logprob: -0.6931576132774353
    3. '	k' → logprob: -12.443157196044922
    4. '<|end|>' → logprob: -12.818157196044922
    5. ' к' → logprob: -13.693157196044922
    6. ' ' → logprob: -14.068157196044922
    7. '*k' → logprob: -14.568157196044922
    8. '-k' → logprob: -15.193157196044922
    9. '_k' → logprob: -15.443157196044922
    10. '<|end|>' → logprob: -15.818157196044922

Token 89: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.6902047395706177
    2. '==' → logprob: -0.8152047395706177
    3. ' else' → logprob: -3.690204620361328
    4. '!=' → logprob: -4.440204620361328
    5. ' !=' → logprob: -4.440204620361328
    6. 'else' → logprob: -5.565204620361328
    7. '=' → logprob: -6.315204620361328
    8. ' ' → logprob: -6.565204620361328
    9. '>' → logprob: -8.690204620361328
    10. ' >' → logprob: -10.190204620361328

Token 90: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.008615635335445404
    2. ' ' → logprob: -4.758615493774414
    3. '   ' → logprob: -15.758615493774414
    4. '  ' → logprob: -15.821115493774414
    5. '<|end|>' → logprob: -15.821115493774414
    6. ' ' → logprob: -16.071115493774414
    7. '```' → logprob: -16.071115493774414
    8. '۰' → logprob: -16.133615493774414
    9. '00' → logprob: -16.508615493774414
    10. ')' → logprob: -16.946115493774414

Token 91: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0003802680876106024
    2. ' ' → logprob: -7.875380039215088
    3. '<|end|>' → logprob: -16.87537956237793
    4. 'o' → logprob: -17.12537956237793
    5. '۰' → logprob: -17.50037956237793
    6. '  ' → logprob: -17.50037956237793
    7. '00' → logprob: -18.00037956237793
    8. '```' → logprob: -18.06287956237793
    9. '1' → logprob: -18.37537956237793
    10. '<|end|>' → logprob: -18.75037956237793

Token 92: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.1605306714773178
    2. 'else' → logprob: -1.910530686378479
    3. '        ' → logprob: -8.410531044006348
    4. '       ' → logprob: -9.785531044006348
    5. '```' → logprob: -12.160531044006348
    6. ' ' → logprob: -12.285531044006348
    7. '   ' → logprob: -12.910531044006348
    8. '	else' → logprob: -12.910531044006348
    9. ' ' → logprob: -12.910531044006348
    10. '    ' → logprob: -13.035531044006348

Token 93: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.13981865346431732
    2. '1' → logprob: -2.8898186683654785
    3. ' (' → logprob: -3.3898186683654785
    4. ' ceil' → logprob: -3.5148186683654785
    5. '(' → logprob: -5.2648186683654785
    6. 'ceil' → logprob: -5.5148186683654785
    7. '    ' → logprob: -6.7648186683654785
    8. '        ' → logprob: -7.7648186683654785
    9. '         ' → logprob: -8.88981819152832
    10. '  ' → logprob: -9.38981819152832

Token 94: '2' (ID: 17)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.3458079695701599
    2. '(' → logprob: -2.2208080291748047
    3. ' ' → logprob: -2.3458080291748047
    4. 'ceil' → logprob: -2.7208080291748047
    5. ' (' → logprob: -4.345808029174805
    6. ' ceil' → logprob: -4.845808029174805
    7. '((' → logprob: -7.595808029174805
    8. '  ' → logprob: -8.095808029174805
    9. '   ' → logprob: -8.470808029174805
    10. '    ' → logprob: -9.095808029174805

Token 95: ' +' (ID: 659)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6694572567939758
    2. '<|end|>' → logprob: -0.9194572567939758
    3. '
' → logprob: -3.044457197189331
    4. '```' → logprob: -5.04445743560791
    5. ' ' → logprob: -5.16945743560791
    6. '<|end|>' → logprob: -5.16945743560791
    7. '[' → logprob: -5.79445743560791
    8. '(' → logprob: -5.79445743560791
    9. 'def' → logprob: -6.04445743560791
    10. ':' → logprob: -6.16945743560791

Token 96: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.8508573770523071
    2. ' n' → logprob: -1.1008573770523071
    3. '(n' → logprob: -1.6008573770523071
    4. 'n' → logprob: -3.3508572578430176
    5. ' ' → logprob: -6.350857257843018
    6. '(' → logprob: -6.475857257843018
    7. '((' → logprob: -9.100857734680176
    8. '   ' → logprob: -10.100857734680176
    9. ' ((' → logprob: -10.100857734680176
    10. '  ' → logprob: -10.350857734680176

Token 97: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.6648101806640625
    2. '(n' → logprob: -1.1648101806640625
    3. ' n' → logprob: -2.2898101806640625
    4. ' (' → logprob: -2.6648101806640625
    5. '(' → logprob: -6.4148101806640625
    6. ' ' → logprob: -7.5398101806640625
    7. '   ' → logprob: -8.289810180664062
    8. '((' → logprob: -9.539810180664062
    9. ')n' → logprob: -9.789810180664062
    10. '	n' → logprob: -10.039810180664062

Token 98: ' //' (ID: 602)
  Prédit: ' //'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.0170679222792387
    2. '//' → logprob: -4.142067909240723
    3. ' ' → logprob: -6.892067909240723
    4. ' //
' → logprob: -11.892067909240723
    5. ' ' → logprob: -13.267067909240723
    6. '  ' → logprob: -13.392067909240723
    7. '```' → logprob: -13.767067909240723
    8. ')' → logprob: -14.142067909240723
    9. '   ' → logprob: -14.142067909240723
    10. '...' → logprob: -14.517067909240723

Token 99: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.523138701915741
    2. ' k' → logprob: -0.898138701915741
    3. ')' → logprob: -12.023138999938965
    4. '	k' → logprob: -12.148138999938965
    5. ' ' → logprob: -13.523138999938965
    6. ' к' → logprob: -14.523138999938965
    7. '   ' → logprob: -14.773138999938965
    8. '    ' → logprob: -15.273138999938965
    9. ' ' → logprob: -15.273138999938965
    10. '(k' → logprob: -15.835638999938965

Token 100: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0070808446034789085
    2. ' )' → logprob: -6.007081031799316
    3. '-' → logprob: -6.257081031799316
    4. '   ' → logprob: -6.632081031799316
    5. '-k' → logprob: -7.882081031799316
    6. ' -' → logprob: -8.257081031799316
    7. '<|end|>' → logprob: -8.632081031799316
    8. '       ' → logprob: -9.507081031799316
    9. ')n' → logprob: -9.757081031799316
    10. 'k' → logprob: -9.882081031799316

Token 101: 'result' (ID: 2521)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.08851031959056854
    2. 'result' → logprob: -2.588510274887085
    3. 'for' → logprob: -6.338510513305664
    4. 'process' → logprob: -6.588510513305664
    5. 'res' → logprob: -6.713510513305664
    6. 'p' → logprob: -6.963510513305664
    7. ')' → logprob: -7.213510513305664
    8. 'r' → logprob: -7.463510513305664
    9. '
' → logprob: -8.338510513305664
    10. 'n' → logprob: -8.338510513305664

Token 102: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2837120592594147
    2. '=' → logprob: -1.4087120294570923
    3. '(' → logprob: -6.033711910247803
    4. ' ' → logprob: -9.658712387084961
    5. ')' → logprob: -10.533712387084961
    6. ',' → logprob: -10.908712387084961
    7. '()' → logprob: -11.158712387084961
    8. '_' → logprob: -11.783712387084961
    9. '  ' → logprob: -11.783712387084961
    10. ' (' → logprob: -11.908712387084961

Token 103: ' (' (ID: 350)
  Prédit: ' process'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' process' → logprob: -0.04863539710640907
    2. 'process' → logprob: -3.048635482788086
    3. '(process' → logprob: -10.298635482788086
    4. '[' → logprob: -12.298635482788086
    5. ' ' → logprob: -12.673635482788086
    6. '	process' → logprob: -13.673635482788086
    7. ' a' → logprob: -14.548635482788086
    8. ' [' → logprob: -14.548635482788086
    9. '0' → logprob: -14.548635482788086
    10. ' result' → logprob: -14.673635482788086

Token 104: 'lambda' (ID: 35280)
  Prédit: 'process'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'process' → logprob: -0.006726737599819899
    2. ' process' → logprob: -5.0067267417907715
    3. ')' → logprob: -12.381726264953613
    4. '(process' → logprob: -12.881726264953613
    5. 'proces' → logprob: -13.881726264953613
    6. '	process' → logprob: -14.131726264953613
    7. 'a' → logprob: -14.381726264953613
    8. 'result' → logprob: -14.506726264953613
    9. ' ' → logprob: -14.631726264953613
    10. '   ' → logprob: -15.131726264953613

Token 105: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.7369293570518494
    2. ' n' → logprob: -0.9869293570518494
    3. 'x' → logprob: -2.861929416656494
    4. 'n' → logprob: -3.361929416656494
    5. ' a' → logprob: -3.736929416656494
    6. ' k' → logprob: -4.361929416656494
    7. 'a' → logprob: -4.861929416656494
    8. ' lambda' → logprob: -5.861929416656494
    9. 'k' → logprob: -5.986929416656494
    10. ' s' → logprob: -6.111929416656494

Token 106: ',' (ID: 11)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.004882431123405695
    2. ' :' → logprob: -5.504882335662842
    3. ':x' → logprob: -8.0048828125
    4. ',' → logprob: -8.7548828125
    5. 'a' → logprob: -9.0048828125
    6. ':n' → logprob: -10.0048828125
    7. ':a' → logprob: -10.1298828125
    8. ' x' → logprob: -10.7548828125
    9. 'x' → logprob: -10.7548828125
    10. ')' → logprob: -11.3798828125

Token 107: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.08471604436635971
    2. ' y' → logprob: -2.5847160816192627
    3. 'k' → logprob: -5.209715843200684
    4. ' k' → logprob: -9.209715843200684
    5. 'x' → logprob: -9.459715843200684
    6. 'n' → logprob: -9.584715843200684
    7. 'a' → logprob: -9.709715843200684
    8. ' n' → logprob: -11.334715843200684
    9. '  ' → logprob: -12.084715843200684
    10. ' x' → logprob: -12.584715843200684

Token 108: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.015044941566884518
    2. ' :' → logprob: -4.640045166015625
    3. ',' → logprob: -5.640045166015625
    4. ':x' → logprob: -6.515045166015625
    5. 'x' → logprob: -9.015045166015625
    6. '   ' → logprob: -10.265045166015625
    7. ',x' → logprob: -10.640045166015625
    8. ' x' → logprob: -12.015045166015625
    9. '(x' → logprob: -12.265045166015625
    10. ':n' → logprob: -12.265045166015625

Token 109: ' process' (ID: 2273)
  Prédit: ' process'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' process' → logprob: -0.5836938619613647
    2. 'process' → logprob: -0.8336938619613647
    3. ' x' → logprob: -5.708693981170654
    4. 'x' → logprob: -6.083693981170654
    5. '1' → logprob: -7.708693981170654
    6. ' (' → logprob: -8.083693504333496
    7. ' ' → logprob: -8.208693504333496
    8. ' max' → logprob: -8.583693504333496
    9. '(process' → logprob: -8.583693504333496
    10. 'max' → logprob: -8.833693504333496

Token 110: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.0011336666066199541
    2. '(' → logprob: -6.876133441925049
    3. 'x' → logprob: -10.126133918762207
    4. ' x' → logprob: -10.626133918762207
    5. ' (' → logprob: -11.126133918762207
    6. ')(' → logprob: -11.501133918762207
    7. ')' → logprob: -11.626133918762207
    8. ')x' → logprob: -13.376133918762207
    9. '(y' → logprob: -14.126133918762207
    10. '(
' → logprob: -15.001133918762207

Token 111: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.025661572813987732
    2. ',y' → logprob: -4.025661468505859
    3. ' ,' → logprob: -4.900661468505859
    4. ' ' → logprob: -10.90066146850586
    5. 'y' → logprob: -12.27566146850586
    6. ',k' → logprob: -12.77566146850586
    7. ',
' → logprob: -12.90066146850586
    8. ')' → logprob: -13.15066146850586
    9. ' y' → logprob: -13.52566146850586
    10. '+' → logprob: -13.77566146850586

Token 112: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.2519318461418152
    2. ' y' → logprob: -1.50193190574646
    3. ' ' → logprob: -14.376932144165039
    4. '    ' → logprob: -14.376932144165039
    5. ')y' → logprob: -14.501932144165039
    6. 'x' → logprob: -15.001932144165039
    7. '	y' → logprob: -15.126932144165039
    8. ')' → logprob: -16.12693214416504
    9. '   ' → logprob: -16.25193214416504
    10. '  ' → logprob: -16.25193214416504

Token 113: '))(' (ID: 72297)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.3879750967025757
    2. '))(' → logprob: -1.1379750967025757
    3. ')' → logprob: -6.887975215911865
    4. ')(' → logprob: -10.012974739074707
    5. ' ))' → logprob: -11.012974739074707
    6. '))[' → logprob: -12.012974739074707
    7. ')))' → logprob: -12.262974739074707
    8. ' ' → logprob: -12.387974739074707
    9. '   ' → logprob: -13.137974739074707
    10. '))
' → logprob: -14.012974739074707

Token 114: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.01815216802060604
    2. ' n' → logprob: -4.018152236938477
    3. 'nums' → logprob: -13.893152236938477
    4. ')n' → logprob: -14.518152236938477
    5. 'k' → logprob: -14.768152236938477
    6. ')' → logprob: -15.893152236938477
    7. ',n' → logprob: -16.268152236938477
    8. '	n' → logprob: -16.893152236938477
    9. ',' → logprob: -17.393152236938477
    10. '(n' → logprob: -17.393152236938477

Token 115: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00013381359167397022
    2. ',k' → logprob: -9.000133514404297
    3. ' ,' → logprob: -12.000133514404297
    4. ',y' → logprob: -13.250133514404297
    5. ',
' → logprob: -13.375133514404297
    6. ')' → logprob: -15.125133514404297
    7. ',n' → logprob: -15.375133514404297
    8. ',

' → logprob: -15.750133514404297
    9. '‌,' → logprob: -16.500133514404297
    10. ',)' → logprob: -16.750133514404297

Token 116: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.008616108447313309
    2. ' k' → logprob: -4.758615970611572
    3. ' ' → logprob: -14.38361644744873
    4. ')' → logprob: -14.50861644744873
    5. '	k' → logprob: -15.50861644744873
    6. '   ' → logprob: -15.88361644744873
    7. '  ' → logprob: -17.258615493774414
    8. '    ' → logprob: -17.383615493774414
    9. 'a' → logprob: -17.508615493774414
    10. '{k' → logprob: -18.258615493774414

Token 117: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.5776860184123507e-06
    2. '))' → logprob: -13.12500286102295
    3. ' )' → logprob: -15.50000286102295
    4. ')
' → logprob: -16.625001907348633
    5. ')))' → logprob: -16.625001907348633
    6. ')#' → logprob: -17.000001907348633
    7. '),' → logprob: -17.250001907348633
    8. ')}' → logprob: -17.500001907348633
    9. ')`' → logprob: -17.750001907348633
    10. ')}}' → logprob: -18.000001907348633

Token 118: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0003190193965565413
    2. '
' → logprob: -8.250319480895996
    3. 'pr' → logprob: -11.500319480895996
    4. ')' → logprob: -11.500319480895996
    5. '#print' → logprob: -11.875319480895996
    6. 'p' → logprob: -11.875319480895996
    7. ' print' → logprob: -12.125319480895996
    8. 'prin' → logprob: -12.750319480895996
    9. '#' → logprob: -12.875319480895996
    10. 'for' → logprob: -13.250319480895996

Token 119: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.20165248215198517
    2. '(' → logprob: -1.7016525268554688
    3. 'result' → logprob: -8.576652526855469
    4. '('' → logprob: -10.701652526855469
    5. '("("' → logprob: -11.201652526855469
    6. '()' → logprob: -11.826652526855469
    7. ' (' → logprob: -13.576652526855469
    8. '((' → logprob: -14.201652526855469
    9. '(res' → logprob: -14.201652526855469
    10. '(`' → logprob: -14.576652526855469

Token 120: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -9.610702363715973e-06
    2. ' )' → logprob: -11.750009536743164
    3. '))' → logprob: -13.625009536743164
    4. ')`' → logprob: -15.750009536743164
    5. ')
' → logprob: -15.875009536743164
    6. '+' → logprob: -16.250009536743164
    7. '(' → logprob: -17.000009536743164
    8. '`)' → logprob: -17.625009536743164
    9. ')}' → logprob: -17.625009536743164
    10. '')' → logprob: -17.875009536743164


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 118
Tokens correctement prédits (1ère position, stricte): 52
Tokens correctement prédits (1ère position, avec adaptation): 53
Tokens correctement prédits (top 10): 94
Précision stricte (1ère position): 44.07%
Précision adaptée (1ère position): 44.92%
Précision (top 10): 79.66%
================================================================================
