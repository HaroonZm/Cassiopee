================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:34:30
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from functools import reduce
from itertools import count, tee, takewhile

n = int(input())
*a, = map(int, input().split())

def chainfinder(sequence, start=1):
    it = iter(sequence)
    c = start
    while True:
        try:
            val = next(it)
            if val == c:
                yield 1
                c += 1
            else:
                yield 0
        except StopIteration:
            break

if 1 in a:
    # Compose products of indicator function and sum them
    indicators = list(chainfinder(a))
    from operator import add
    cnt = reduce(add, indicators, 0)
    print(n - cnt)
else:
    print(~0)  # bitwise complement of 0 is -1
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' functools' (ID: 142636)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' reduce' (ID: 10389)
  Prédit: 'wrap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'wrap' → logprob: -0.3026095926761627
    2. 'partial' → logprob: -1.8026095628738403
    3. 'reduce' → logprob: -2.55260968208313
    4. 'l' → logprob: -4.677609443664551
    5. ' wraps' → logprob: -4.802609443664551
    6. 'cached' → logprob: -8.05260944366455
    7. 'cache' → logprob: -8.55260944366455
    8. 'cmp' → logprob: -9.05260944366455
    9. ' partial' → logprob: -9.42760944366455
    10. ' l' → logprob: -9.80260944366455

Token 4: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.020487118512392044
    2. '(lambda' → logprob: -4.645487308502197
    3. '.' → logprob: -5.270487308502197
    4. ',' → logprob: -5.895487308502197
    5. '\' → logprob: -7.145487308502197
    6. ' (' → logprob: -7.520487308502197
    7. '```' → logprob: -8.020486831665039
    8. 'def' → logprob: -8.645486831665039
    9. 'lambda' → logprob: -8.895486831665039
    10. '`' → logprob: -8.895486831665039

Token 5: 'from' (ID: 2845)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.007019410841166973
    2. '\' → logprob: -5.882019519805908
    3. 'def' → logprob: -7.257019519805908
    4. '```' → logprob: -7.257019519805908
    5. '\(' → logprob: -7.507019519805908
    6. ' ' → logprob: -7.882019519805908
    7. '(
' → logprob: -7.882019519805908
    8. ' (' → logprob: -8.63201904296875
    9. '(lambda' → logprob: -8.75701904296875
    10. ',' → logprob: -8.75701904296875

Token 6: ' itertools' (ID: 103178)
  Prédit: ' operator'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' operator' → logprob: -0.8141523599624634
    2. ' math' → logprob: -0.9391523599624634
    3. 'operator' → logprob: -2.814152240753174
    4. ' itertools' → logprob: -2.814152240753174
    5. 'math' → logprob: -3.689152240753174
    6. ' collections' → logprob: -4.064152240753174
    7. 'collections' → logprob: -6.064152240753174
    8. ' os' → logprob: -6.814152240753174
    9. 'os' → logprob: -8.439152717590332
    10. 'it' → logprob: -9.439152717590332

Token 7: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.12754236161708832
    2. 'import' → logprob: -2.12754225730896
    3. '.' → logprob: -8.002542495727539
    4. '.import' → logprob: -8.627542495727539
    5. '	import' → logprob: -10.252542495727539
    6. ' ' → logprob: -10.502542495727539
    7. ' .' → logprob: -11.252542495727539
    8. '_import' → logprob: -11.627542495727539
    9. '.im' → logprob: -12.502542495727539
    10. ' itertools' → logprob: -13.252542495727539

Token 8: ' count' (ID: 3605)
  Prédit: ' group'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' group' → logprob: -0.7541866302490234
    2. 'group' → logprob: -2.5041866302490234
    3. 'acc' → logprob: -2.5041866302490234
    4. ' cycle' → logprob: -2.6291866302490234
    5. ' accumulate' → logprob: -2.6291866302490234
    6. 'count' → logprob: -2.8791866302490234
    7. 'import' → logprob: -3.3791866302490234
    8. ' chain' → logprob: -3.7541866302490234
    9. 'cycle' → logprob: -3.8791866302490234
    10. 'com' → logprob: -3.8791866302490234

Token 9: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0382971428334713
    2. '\' → logprob: -3.788297176361084
    3. '(
' → logprob: -5.288297176361084
    4. '\n' → logprob: -5.663297176361084
    5. ',' → logprob: -6.413297176361084
    6. '\(' → logprob: -6.538297176361084
    7. '.' → logprob: -7.038297176361084
    8. 'for' → logprob: -7.163297176361084
    9. '```' → logprob: -7.788297176361084
    10. 'def' → logprob: -7.913297176361084

Token 10: ' tee' (ID: 44157)
  Prédit: ' cycle'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' cycle' → logprob: -0.7061612606048584
    2. 'cycle' → logprob: -1.4561612606048584
    3. 'take' → logprob: -2.2061612606048584
    4. ' take' → logprob: -2.7061612606048584
    5. 'acc' → logprob: -3.8311612606048584
    6. ' is' → logprob: -3.8311612606048584
    7. ' accumulate' → logprob: -4.2061614990234375
    8. ' chain' → logprob: -4.7061614990234375
    9. 'chain' → logprob: -4.7061614990234375
    10. 'is' → logprob: -5.4561614990234375

Token 11: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7599542140960693
    2. '(' → logprob: -1.0099542140960693
    3. '\' → logprob: -2.3849542140960693
    4. '\n' → logprob: -3.0099542140960693
    5. ',
' → logprob: -4.884954452514648
    6. '```' → logprob: -5.509954452514648
    7. '(
' → logprob: -5.634954452514648
    8. '#' → logprob: -6.009954452514648
    9. '.' → logprob: -6.259954452514648
    10. '`' → logprob: -6.384954452514648

Token 12: ' take' (ID: 2304)
  Prédit: ' is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.7633930444717407
    2. 'is' → logprob: -1.3883930444717407
    3. 'cycle' → logprob: -2.763392925262451
    4. 'acc' → logprob: -3.013392925262451
    5. ' cycle' → logprob: -3.138392925262451
    6. 'take' → logprob: -3.388392925262451
    7. 'chain' → logprob: -4.013392925262451
    8. 'filter' → logprob: -4.138392925262451
    9. ' accumulate' → logprob: -4.638392925262451
    10. ' chain' → logprob: -4.638392925262451

Token 13: 'while' (ID: 7032)
  Prédit: 'while'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.02886895090341568
    2. 'n' → logprob: -4.028869152069092
    3. '_' → logprob: -5.028869152069092
    4. '_n' → logprob: -6.403869152069092
    5. 'While' → logprob: -7.153869152069092
    6. 'w' → logprob: -8.153868675231934
    7. 'exact' → logprob: -8.403868675231934
    8. 'nth' → logprob: -8.528868675231934
    9. 'until' → logprob: -8.778868675231934
    10. 'from' → logprob: -9.028868675231934

Token 14: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07519454509019852
    2. '(
' → logprob: -3.4501945972442627
    3. 'def' → logprob: -3.8251945972442627
    4. ',' → logprob: -4.450194358825684
    5. '\' → logprob: -5.450194358825684
    6. ',
' → logprob: -8.075194358825684
    7. '```' → logprob: -8.075194358825684
    8. ')' → logprob: -8.200194358825684
    9. '\n' → logprob: -8.200194358825684
    10. '(

' → logprob: -8.325194358825684

Token 15: 'n' (ID: 77)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07606259733438492
    2. 'def' → logprob: -3.2010626792907715
    3. '(
' → logprob: -3.5760626792907715
    4. ',' → logprob: -6.3260626792907715
    5. '```' → logprob: -7.0760626792907715
    6. '\' → logprob: -7.2010626792907715
    7. '#' → logprob: -8.451062202453613
    8. ':' → logprob: -8.951062202453613
    9. '`' → logprob: -9.326062202453613
    10. '(

' → logprob: -9.451062202453613

Token 16: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.9094177484512329
    2. '=' → logprob: -1.159417748451233
    3. 'ext' → logprob: -2.0344176292419434
    4. ',' → logprob: -2.9094176292419434
    5. '_' → logprob: -2.9094176292419434
    6. 'umber' → logprob: -4.284417629241943
    7. ' ' → logprob: -4.659417629241943
    8. 't' → logprob: -5.159417629241943
    9. '(' → logprob: -5.784417629241943
    10. 'a' → logprob: -6.284417629241943

Token 17: ' int' (ID: 677)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.021391384303569794
    2. '1' → logprob: -4.14639139175415
    3. '0' → logprob: -5.64639139175415
    4. ' int' → logprob: -7.64639139175415
    5. '2' → logprob: -7.89639139175415
    6. '10' → logprob: -8.021390914916992
    7. ' next' → logprob: -8.521390914916992
    8. '100' → logprob: -8.646390914916992
    9. ' count' → logprob: -9.521390914916992
    10. 'int' → logprob: -10.646390914916992

Token 18: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00029506313148885965
    2. '('' → logprob: -9.00029468536377
    3. '(input' → logprob: -9.00029468536377
    4. '(n' → logprob: -11.25029468536377
    5. '(
' → logprob: -11.87529468536377
    6. '(`' → logprob: -12.12529468536377
    7. ' (' → logprob: -12.50029468536377
    8. ''' → logprob: -13.00029468536377
    9. '()' → logprob: -13.00029468536377
    10. '("' → logprob: -13.50029468536377

Token 19: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.31274327635765076
    2. ')' → logprob: -1.4377433061599731
    3. '()' → logprob: -3.8127431869506836
    4. '())' → logprob: -4.937743186950684
    5. '('' → logprob: -6.687743186950684
    6. '(
' → logprob: -8.312743186950684
    7. '))' → logprob: -9.562743186950684
    8. '(()' → logprob: -9.562743186950684
    9. '(

' → logprob: -9.812743186950684
    10. '(`' → logprob: -10.437743186950684

Token 20: '*a' (ID: 78448)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5162907242774963
    2. 'for' → logprob: -2.3912906646728516
    3. 'def' → logprob: -2.3912906646728516
    4. 's' → logprob: -2.6412906646728516
    5. 'result' → logprob: -3.6412906646728516
    6. ' ' → logprob: -4.016290664672852
    7. '(' → logprob: -4.141290664672852
    8. 'a' → logprob: -4.766290664672852
    9. ' 
' → logprob: -4.766290664672852
    10. ' for' → logprob: -4.891290664672852

Token 21: ',' (ID: 11)
  Prédit: 'rg'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'rg' → logprob: -0.8230258226394653
    2. 'r' → logprob: -2.073025703430176
    3. 'range' → logprob: -2.198025703430176
    4. ' =' → logprob: -3.073025703430176
    5. ',' → logprob: -3.198025703430176
    6. '_' → logprob: -3.448025703430176
    7. 'rray' → logprob: -3.573025703430176
    8. 'b' → logprob: -3.948025703430176
    9. 'rr' → logprob: -3.948025703430176
    10. 'ns' → logprob: -4.323025703430176

Token 22: ' =' (ID: 314)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.3853963017463684
    2. ' b' → logprob: -1.2603962421417236
    3. '_' → logprob: -3.8853962421417236
    4. '*b' → logprob: -5.135396480560303
    5. ' _' → logprob: -6.260396480560303
    6. ' =' → logprob: -6.760396480560303
    7. '_,' → logprob: -6.760396480560303
    8. 'a' → logprob: -7.135396480560303
    9. 'rest' → logprob: -7.510396480560303
    10. '_b' → logprob: -7.635396480560303

Token 23: ' map' (ID: 4014)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'count' → logprob: -0.01906251721084118
    2. 'range' → logprob: -4.644062519073486
    3. ' count' → logprob: -4.769062519073486
    4. 'take' → logprob: -7.769062519073486
    5. ' range' → logprob: -8.769062042236328
    6. 'map' → logprob: -9.144062042236328
    7. 'filter' → logprob: -10.394062042236328
    8. '(count' → logprob: -10.894062042236328
    9. 'iter' → logprob: -11.769062042236328
    10. ' take' → logprob: -12.019062042236328

Token 24: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.39396893978118896
    2. '(' → logprob: -1.143968939781189
    3. '(lambda' → logprob: -5.1439690589904785
    4. '(str' → logprob: -7.2689690589904785
    5. '(pow' → logprob: -9.01896858215332
    6. '(ord' → logprob: -9.76896858215332
    7. '<|end|>' → logprob: -9.76896858215332
    8. '(float' → logprob: -10.14396858215332
    9. '(abs' → logprob: -10.39396858215332
    10. '(eval' → logprob: -10.39396858215332

Token 25: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.12295955419540405
    2. ',input' → logprob: -2.497959613800049
    3. ',' → logprob: -3.497959613800049
    4. '(' → logprob: -6.122959613800049
    5. 'input' → logprob: -7.997959613800049
    6. '(iter' → logprob: -8.24795913696289
    7. '(),' → logprob: -9.12295913696289
    8. ' ,' → logprob: -9.74795913696289
    9. ')' → logprob: -9.87295913696289
    10. '```' → logprob: -10.62295913696289

Token 26: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.9032909870147705
    2. 'input' → logprob: -1.1532909870147705
    3. ' count' → logprob: -1.9032909870147705
    4. 'count' → logprob: -2.2782909870147705
    5. ' range' → logprob: -4.528290748596191
    6. 'range' → logprob: -5.028290748596191
    7. ' iter' → logprob: -5.153290748596191
    8. 'iter' → logprob: -6.278290748596191
    9. ' ' → logprob: -7.028290748596191
    10. ')' → logprob: -7.528290748596191

Token 27: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -3.309382373117842e-05
    2. '()' → logprob: -10.500033378601074
    3. ' ().' → logprob: -12.625033378601074
    4. '())' → logprob: -14.250033378601074
    5. ')' → logprob: -14.375033378601074
    6. '(' → logprob: -14.375033378601074
    7. '()
' → logprob: -15.625033378601074
    8. '.split' → logprob: -15.875033378601074
    9. 'split' → logprob: -16.625032424926758
    10. '()[' → logprob: -18.250032424926758

Token 28: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0003920655872207135
    2. 'strip' → logprob: -7.875391960144043
    3. ' split' → logprob: -11.750391960144043
    4. 'rstrip' → logprob: -13.375391960144043
    5. '(split' → logprob: -13.500391960144043
    6. 'read' → logprob: -14.375391960144043
    7. 'spl' → logprob: -15.500391960144043
    8. '().' → logprob: -15.750391960144043
    9. ')' → logprob: -15.875391960144043
    10. 's' → logprob: -16.50039291381836

Token 29: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.06485462933778763
    2. ')' → logprob: -2.939854621887207
    3. '()))' → logprob: -5.564854621887207
    4. '()' → logprob: -5.564854621887207
    5. '))' → logprob: -6.189854621887207
    6. '(' → logprob: -9.064854621887207
    7. '(),' → logprob: -10.814854621887207
    8. ' ())' → logprob: -10.814854621887207
    9. '())
' → logprob: -11.189854621887207
    10. '('' → logprob: -11.564854621887207

Token 30: 'def' (ID: 1314)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.1575804054737091
    2. '```' → logprob: -3.1575803756713867
    3. '\n' → logprob: -3.5325803756713867
    4. ')' → logprob: -3.9075803756713867
    5. 'a' → logprob: -4.282580375671387
    6. ' 
' → logprob: -4.407580375671387
    7. 'def' → logprob: -5.532580375671387
    8. '(
' → logprob: -5.532580375671387
    9. '(' → logprob: -6.282580375671387
    10. '\' → logprob: -6.407580375671387

Token 31: ' chain' (ID: 13464)
  Prédit: ' is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' is' → logprob: -2.10109806060791
    2. ' factorial' → logprob: -2.10109806060791
    3. ' reduce' → logprob: -2.22609806060791
    4. ' accumulate' → logprob: -2.47609806060791
    5. ' prime' → logprob: -2.60109806060791
    6. ' gcd' → logprob: -2.97609806060791
    7. ' factor' → logprob: -3.10109806060791
    8. ' prefix' → logprob: -3.35109806060791
    9. ' count' → logprob: -3.60109806060791
    10. ' fibonacci' → logprob: -3.60109806060791

Token 32: 'finder' (ID: 54491)
  Prédit: '(*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(*' → logprob: -0.43799781799316406
    2. '(' → logprob: -1.062997817993164
    3. '.from' → logprob: -4.812997817993164
    4. 'from' → logprob: -7.562997817993164
    5. '(*)' → logprob: -7.687997817993164
    6. '(iter' → logprob: -10.312997817993164
    7. '(a' → logprob: -10.687997817993164
    8. '(from' → logprob: -11.187997817993164
    9. '((*' → logprob: -11.437997817993164
    10. '(.' → logprob: -11.687997817993164

Token 33: '(sequence' (ID: 129991)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0011304517975077033
    2. '(chain' → logprob: -8.126130104064941
    3. '(a' → logprob: -8.376130104064941
    4. '(n' → logprob: -8.626130104064941
    5. '("("' → logprob: -9.501130104064941
    6. ' (' → logprob: -9.876130104064941
    7. '('' → logprob: -9.876130104064941
    8. '(iter' → logprob: -10.376130104064941
    9. '(*' → logprob: -10.751130104064941
    10. '(s' → logprob: -11.126130104064941

Token 34: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.12992100417613983
    2. '):' → logprob: -2.1299209594726562
    3. ')' → logprob: -6.879920959472656
    4. '(' → logprob: -7.129920959472656
    5. '(sequence' → logprob: -7.504920959472656
    6. ' ):' → logprob: -8.129920959472656
    7. ' ,' → logprob: -9.629920959472656
    8. '):
' → logprob: -10.004920959472656
    9. '(n' → logprob: -10.254920959472656
    10. '   ' → logprob: -11.004920959472656

Token 35: ' start' (ID: 1604)
  Prédit: ' start'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' start' → logprob: -2.269505500793457
    2. ' length' → logprob: -2.519505500793457
    3. ' subse' → logprob: -2.894505500793457
    4. 'start' → logprob: -3.019505500793457
    5. ' target' → logprob: -3.144505500793457
    6. 'sub' → logprob: -3.144505500793457
    7. ' n' → logprob: -3.269505500793457
    8. ' k' → logprob: -3.394505500793457
    9. 'length' → logprob: -3.394505500793457
    10. ' pattern' → logprob: -3.394505500793457

Token 36: '=' (ID: 28)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.3944609761238098
    2. ',' → logprob: -1.269460916519165
    3. '=' → logprob: -3.144460916519165
    4. ' ):' → logprob: -7.144461154937744
    5. ')' → logprob: -8.269460678100586
    6. '):
' → logprob: -8.519460678100586
    7. ' ,' → logprob: -8.894460678100586
    8. '=None' → logprob: -9.019460678100586
    9. '   ' → logprob: -9.894460678100586
    10. ' =' → logprob: -10.269460678100586

Token 37: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.02135101519525051
    2. '1' → logprob: -4.771350860595703
    3. ' ' → logprob: -5.521350860595703
    4. ')' → logprob: -5.646350860595703
    5. 'None' → logprob: -6.021350860595703
    6. 'a' → logprob: -7.646350860595703
    7. 'sequence' → logprob: -7.896350860595703
    8. '-' → logprob: -8.021350860595703
    9. 'count' → logprob: -8.146350860595703
    10. ' None' → logprob: -8.896350860595703

Token 38: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.06352569162845612
    2. ',' → logprob: -2.813525676727295
    3. ')' → logprob: -6.688525676727295
    4. ' ):' → logprob: -8.938526153564453
    5. '):
' → logprob: -8.938526153564453
    6. ':' → logprob: -10.563526153564453
    7. '):
' → logprob: -12.688526153564453
    8. '**' → logprob: -13.063526153564453
    9. ' ' → logprob: -13.438526153564453
    10. ' ,' → logprob: -13.438526153564453

Token 39: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.1280355453491211
    2. '   ' → logprob: -2.378035545349121
    3. ',' → logprob: -3.878035545349121
    4. ':
' → logprob: -6.003035545349121
    5. ' :' → logprob: -6.253035545349121
    6. '):' → logprob: -7.878035545349121
    7. ' ' → logprob: -8.253035545349121
    8. ' for' → logprob: -8.503035545349121
    9. '():' → logprob: -8.753035545349121
    10. ' ,' → logprob: -9.003035545349121

Token 40: ' it' (ID: 480)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -1.334884762763977
    2. ' prev' → logprob: -1.459884762763977
    3. 'for' → logprob: -1.959884762763977
    4. 'prev' → logprob: -2.0848846435546875
    5. ' current' → logprob: -3.0848846435546875
    6. '   ' → logprob: -3.3348846435546875
    7. 'current' → logprob: -4.2098846435546875
    8. 'seen' → logprob: -4.7098846435546875
    9. ' previous' → logprob: -4.8348846435546875
    10. ' def' → logprob: -4.9598846435546875

Token 41: ' =' (ID: 314)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.7668365836143494
    2. '=' → logprob: -1.3918366432189941
    3. ',' → logprob: -1.8918366432189941
    4. ' =' → logprob: -2.141836643218994
    5. '1' → logprob: -4.266836643218994
    6. 'ertools' → logprob: -5.891836643218994
    7. 's' → logprob: -6.516836643218994
    8. 'ers' → logprob: -8.891836166381836
    9. 'r' → logprob: -9.266836166381836
    10. '0' → logprob: -11.016836166381836

Token 42: ' iter' (ID: 10621)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'count' → logprob: -0.23986122012138367
    2. 'filter' → logprob: -2.864861249923706
    3. 'tee' → logprob: -2.864861249923706
    4. 'iter' → logprob: -3.364861249923706
    5. 'chain' → logprob: -3.989861249923706
    6. ' count' → logprob: -4.489861011505127
    7. 'enumer' → logprob: -5.114861011505127
    8. 'sequence' → logprob: -5.614861011505127
    9. '(iter' → logprob: -5.614861011505127
    10. '(count' → logprob: -5.989861011505127

Token 43: '(sequence' (ID: 129991)
  Prédit: '(sequence'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(sequence' → logprob: -3.9888433093437925e-05
    2. '(' → logprob: -10.250040054321289
    3. 'sequence' → logprob: -12.500040054321289
    4. '(seq' → logprob: -15.500040054321289
    5. '(chain' → logprob: -15.625040054321289
    6. ' sequence' → logprob: -17.37504005432129
    7. '(s' → logprob: -17.50004005432129
    8. '(sentence' → logprob: -17.50004005432129
    9. '(expression' → logprob: -17.62504005432129
    10. '(count' → logprob: -17.87504005432129

Token 44: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.026553276926279068
    2. ')
' → logprob: -3.6515533924102783
    3. ' )' → logprob: -9.0265531539917
    4. '()' → logprob: -10.4015531539917
    5. '())' → logprob: -10.4015531539917
    6. ')
' → logprob: -10.9015531539917
    7. ',' → logprob: -11.0265531539917
    8. ' )
' → logprob: -11.5265531539917
    9. '())
' → logprob: -12.4015531539917
    10. ')

' → logprob: -12.4015531539917

Token 45: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.17703776061534882
    2. '()' → logprob: -2.5520377159118652
    3. ')' → logprob: -3.4270377159118652
    4. '()
' → logprob: -4.302037715911865
    5. 'next' → logprob: -5.052037715911865
    6. 'def' → logprob: -5.302037715911865
    7. ',' → logprob: -5.552037715911865
    8. ' ' → logprob: -5.677037715911865
    9. 'for' → logprob: -6.177037715911865
    10. 'result' → logprob: -6.427037715911865

Token 46: ' c' (ID: 274)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.2790277004241943
    2. 'prev' → logprob: -1.6540277004241943
    3. 'current' → logprob: -2.1540277004241943
    4. ' current' → logprob: -2.6540277004241943
    5. 'while' → logprob: -3.1540277004241943
    6. 'for' → logprob: -3.2790277004241943
    7. ' prev' → logprob: -3.4040277004241943
    8. ' for' → logprob: -3.6540277004241943
    9. 'try' → logprob: -3.7790277004241943
    10. ' while' → logprob: -3.9040277004241943

Token 47: ' =' (ID: 314)
  Prédit: 'urrent'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'urrent' → logprob: -0.29923558235168457
    2. 'ur' → logprob: -2.0492355823516846
    3. 'ount' → logprob: -3.2992355823516846
    4. 'urr' → logprob: -3.7992355823516846
    5. 'h' → logprob: -3.9242355823516846
    6. 'u' → logprob: -3.9242355823516846
    7. '=' → logprob: -4.7992353439331055
    8. 'ounter' → logprob: -4.9242353439331055
    9. ' =' → logprob: -5.5492353439331055
    10. ' ' → logprob: -5.7992353439331055

Token 48: ' start' (ID: 1604)
  Prédit: 'start'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'start' → logprob: -0.28315961360931396
    2. '0' → logprob: -2.7831597328186035
    3. 'next' → logprob: -3.0331597328186035
    4. ' ' → logprob: -3.1581597328186035
    5. '1' → logprob: -3.2831597328186035
    6. ' start' → logprob: -3.2831597328186035
    7. 'count' → logprob: -4.6581597328186035
    8. ' next' → logprob: -5.1581597328186035
    9. 'ounter' → logprob: -7.1581597328186035
    10. '{}' → logprob: -7.1581597328186035

Token 49: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.42327800393104553
    2. ':' → logprob: -2.7982780933380127
    3. ' ' → logprob: -3.2982780933380127
    4. 'while' → logprob: -3.2982780933380127
    5. '-' → logprob: -3.4232780933380127
    6. '+' → logprob: -3.5482780933380127
    7. '  
' → logprob: -3.6732780933380127
    8. '_' → logprob: -4.173277854919434
    9. ')' → logprob: -4.173277854919434
    10. '   ' → logprob: -4.548277854919434

Token 50: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.4482814073562622
    2. '
' → logprob: -1.8232814073562622
    3. ' while' → logprob: -2.5732812881469727
    4. 'while' → logprob: -2.8232812881469727
    5. ' ' → logprob: -4.198281288146973
    6. '  
' → logprob: -4.323281288146973
    7. ')' → logprob: -4.448281288146973
    8. ',' → logprob: -4.948281288146973
    9. ':
' → logprob: -5.073281288146973
    10. ' 
' → logprob: -5.698281288146973

Token 51: ' while' (ID: 2049)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.205309271812439
    2. 'while' (adapté à ' while') → logprob: -1.330309271812439
    3. ' while' → logprob: -1.330309271812439
    4. '   ' → logprob: -2.7053093910217285
    5. ' ' → logprob: -3.0803093910217285
    6. 'for' → logprob: -4.2053093910217285
    7. ')' → logprob: -4.7053093910217285
    8. ' for' → logprob: -4.8303093910217285
    9. 'try' → logprob: -5.4553093910217285
    10. ',' → logprob: -5.7053093910217285

Token 52: ' True' (ID: 6432)
  Prédit: ' True'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.10149894654750824
    2. 'True' → logprob: -2.35149884223938
    3. ' c' → logprob: -6.976499080657959
    4. 'c' → logprob: -8.3514986038208
    5. '(True' → logprob: -9.9764986038208
    6. ' ' → logprob: -10.1014986038208
    7. ' next' → logprob: -11.2264986038208
    8. '1' → logprob: -11.4764986038208
    9. '   ' → logprob: -13.1014986038208
    10. 'next' → logprob: -13.2264986038208

Token 53: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.004842103458940983
    2. ':
' → logprob: -5.629842281341553
    3. '):' → logprob: -7.879842281341553
    4. ',' → logprob: -8.379841804504395
    5. ' :' → logprob: -8.379841804504395
    6. '       ' → logprob: -8.504841804504395
    7. '   ' → logprob: -9.629841804504395
    8. '<|end|>' → logprob: -10.254841804504395
    9. ')' → logprob: -10.504841804504395
    10. '):
' → logprob: -10.754841804504395

Token 54: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.6046582460403442
    2. ' try' → logprob: -0.9796582460403442
    3. 'try' → logprob: -3.1046581268310547
    4. '   ' → logprob: -3.4796581268310547
    5. ' token' → logprob: -7.229658126831055
    6. 'token' → logprob: -7.854658126831055
    7. '    ' → logprob: -7.979658126831055
    8. ' ' → logprob: -8.229658126831055
    9. '	try' → logprob: -8.729658126831055
    10. '```' → logprob: -8.979658126831055

Token 55: ' try' (ID: 2075)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.9241458773612976
    2. 'try' (adapté à ' try') → logprob: -1.0491459369659424
    3. ' try' → logprob: -1.4241459369659424
    4. 'x' → logprob: -6.174145698547363
    5. 'v' → logprob: -6.424145698547363
    6. '           ' → logprob: -6.549145698547363
    7. '   ' → logprob: -6.674145698547363
    8. 'item' → logprob: -7.174145698547363
    9. 'token' → logprob: -7.299145698547363
    10. ' val' → logprob: -7.674145698547363

Token 56: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.01551901362836361
    2. '           ' → logprob: -4.765519142150879
    3. ':
' → logprob: -5.015519142150879
    4. ' :' → logprob: -8.515519142150879
    5. '   ' → logprob: -12.140519142150879
    6. ' =' → logprob: -12.140519142150879
    7. ':return' → logprob: -12.140519142150879
    8. '):' → logprob: -12.390519142150879
    9. ':
' → logprob: -12.890519142150879
    10. '        ' → logprob: -13.140519142150879

Token 57: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0017737116431817412
    2. '   ' → logprob: -6.876773834228516
    3. '    ' → logprob: -9.626773834228516
    4. 'n' → logprob: -9.626773834228516
    5. ' value' → logprob: -9.751773834228516
    6. ':' → logprob: -9.751773834228516
    7. 'v' → logprob: -9.876773834228516
    8. '       ' → logprob: -9.876773834228516
    9. 'value' → logprob: -10.001773834228516
    10. '```' → logprob: -10.001773834228516

Token 58: ' val' (ID: 1459)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.6939322352409363
    2. '           ' → logprob: -1.193932294845581
    3. ' x' → logprob: -2.193932294845581
    4. 'v' → logprob: -3.693932294845581
    5. 'n' → logprob: -3.818932294845581
    6. ' v' → logprob: -5.443932056427002
    7. ' nxt' → logprob: -5.443932056427002
    8. 'item' → logprob: -5.568932056427002
    9. 's' → logprob: -6.068932056427002
    10. ' item' → logprob: -6.193932056427002

Token 59: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.06258496642112732
    2. '=' → logprob: -2.81258487701416
    3. 'ue' → logprob: -7.43758487701416
    4. '   ' → logprob: -10.93758487701416
    5. ' ' → logprob: -12.56258487701416
    6. '  ' → logprob: -13.18758487701416
    7. 'ues' → logprob: -13.68758487701416
    8. '       ' → logprob: -13.81258487701416
    9. '    ' → logprob: -14.18758487701416
    10. 'uer' → logprob: -14.43758487701416

Token 60: ' next' (ID: 2613)
  Prédit: ' next'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' next' → logprob: -0.07889275997877121
    2. 'next' → logprob: -2.578892707824707
    3. ' nex' → logprob: -13.578892707824707
    4. '(next' → logprob: -13.953892707824707
    5. ' nxt' → logprob: -15.203892707824707
    6. '	next' → logprob: -15.328892707824707
    7. '[next' → logprob: -15.578892707824707
    8. ',next' → logprob: -16.203893661499023
    9. '.next' → logprob: -17.578893661499023
    10. '_next' → logprob: -18.828893661499023

Token 61: '(it' (ID: 29445)
  Prédit: '(it'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(it' → logprob: -9.088346359931165e-07
    2. 'it' → logprob: -14.125000953674316
    3. '(' → logprob: -16.125
    4. '(iter' → logprob: -18.375
    5. '[it' → logprob: -19.875
    6. '	it' → logprob: -20.0
    7. '(i' → logprob: -20.375
    8. 'It' → logprob: -20.875
    9. '(It' → logprob: -21.25
    10. ',it' → logprob: -21.625

Token 62: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.31341663002967834
    2. ')' → logprob: -1.313416600227356
    3. ')
' → logprob: -9.063416481018066
    4. ' )
' → logprob: -11.188416481018066
    5. '           ' → logprob: -11.313416481018066
    6. ' )' → logprob: -12.188416481018066
    7. ')

' → logprob: -12.938416481018066
    8. ')`
' → logprob: -13.438416481018066
    9. '       ' → logprob: -13.938416481018066
    10. '())
' → logprob: -14.313416481018066

Token 63: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.2736058533191681
    2. '       ' → logprob: -1.8986058235168457
    3. '<|end|>' → logprob: -2.5236058235168457
    4. '<|end|>' → logprob: -5.023605823516846
    5. 'except' → logprob: -7.773605823516846
    6. '
' → logprob: -7.898605823516846
    7. ')' → logprob: -8.273606300354004
    8. '            
' → logprob: -8.523606300354004
    9. '	       ' → logprob: -8.523606300354004
    10. ',' → logprob: -8.898606300354004

Token 64: ' if' (ID: 538)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.03694342449307442
    2. ' if' → logprob: -3.5369434356689453
    3. 'if' (adapté à ' if') → logprob: -5.036943435668945
    4. '            ' → logprob: -8.536943435668945
    5. '<|end|>' → logprob: -8.661943435668945
    6. '       ' → logprob: -10.036943435668945
    7. '<|end|>' → logprob: -10.036943435668945
    8. ' ' → logprob: -10.286943435668945
    9. '```' → logprob: -10.411943435668945
    10. '            
' → logprob: -10.911943435668945

Token 65: ' val' (ID: 1459)
  Prédit: ' val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' val' → logprob: -0.0699591115117073
    2. 'val' → logprob: -2.6949591636657715
    3. 'c' → logprob: -11.444958686828613
    4. '(val' → logprob: -12.194958686828613
    5. ' c' → logprob: -13.569958686828613
    6. ' ' → logprob: -13.694958686828613
    7. '[val' → logprob: -13.819958686828613
    8. ' not' → logprob: -13.944958686828613
    9. '	val' → logprob: -14.069958686828613
    10. 'v' → logprob: -14.444958686828613

Token 66: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.4814048409461975
    2. '==' → logprob: -0.9814048409461975
    3. ' !=' → logprob: -5.856404781341553
    4. '!=' → logprob: -6.231404781341553
    5. ' >=' → logprob: -7.106404781341553
    6. '>' → logprob: -7.606404781341553
    7. '>=' → logprob: -7.606404781341553
    8. ' >' → logprob: -8.481405258178711
    9. ' <' → logprob: -8.481405258178711
    10. '<' → logprob: -9.356405258178711

Token 67: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.6931638717651367
    2. ' c' → logprob: -0.6931638717651367
    3. ' ' → logprob: -11.568163871765137
    4. ' ' → logprob: -12.693163871765137
    5. '	c' → logprob: -14.193163871765137
    6. ')c' → logprob: -14.568163871765137
    7. '0' → logprob: -14.943163871765137
    8. '   ' → logprob: -15.193163871765137
    9. '<|end|>' → logprob: -15.443163871765137
    10. '(c' → logprob: -15.505663871765137

Token 68: ':
' (ID: 734)
  Prédit: ':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':
' → logprob: -0.28165552020072937
    2. ':' → logprob: -1.4066555500030518
    3. '+' → logprob: -9.031655311584473
    4. '           ' → logprob: -9.156655311584473
    5. ':
' → logprob: -9.406655311584473
    6. '               ' → logprob: -9.406655311584473
    7. '):
' → logprob: -10.281655311584473
    8. ' or' → logprob: -11.156655311584473
    9. ' :
' → logprob: -11.156655311584473
    10. ':return' → logprob: -11.656655311584473

Token 69: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.09914050996303558
    2. ':' → logprob: -2.5991404056549072
    3. ':
' → logprob: -4.099140644073486
    4. '           ' → logprob: -6.599140644073486
    5. ' :' → logprob: -7.724140644073486
    6. '            ' → logprob: -8.349140167236328
    7. ' and' → logprob: -8.349140167236328
    8. ' c' → logprob: -8.474140167236328
    9. ':return' → logprob: -8.599140167236328
    10. ':c' → logprob: -8.849140167236328

Token 70: ' yield' (ID: 14376)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.15597623586654663
    2. '               ' → logprob: -2.5309762954711914
    3. 'c' → logprob: -2.9059762954711914
    4. '                   ' → logprob: -4.780976295471191
    5. '
' → logprob: -7.655976295471191
    6. '                ' → logprob: -7.905976295471191
    7. '```' → logprob: -8.405976295471191
    8. '	c' → logprob: -8.530976295471191
    9. ' ' → logprob: -8.905976295471191
    10. '           ' → logprob: -8.905976295471191

Token 71: ' ' (ID: 220)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.1003141701221466
    2. 'val' → logprob: -2.350314140319824
    3. ' c' → logprob: -9.475314140319824
    4. ' val' → logprob: -10.600314140319824
    5. '               ' → logprob: -13.100314140319824
    6. '1' → logprob: -13.600314140319824
    7. '           ' → logprob: -13.725314140319824
    8. 'v' → logprob: -14.350314140319824
    9. '                   ' → logprob: -15.100314140319824
    10. 'value' → logprob: -16.22531509399414

Token 72: '1' (ID: 16)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.009802130982279778
    2. 'val' → logprob: -4.634802341461182
    3. '1' → logprob: -10.134801864624023
    4. 'v' → logprob: -12.884801864624023
    5. ' c' → logprob: -13.759801864624023
    6. '           ' → logprob: -14.509801864624023
    7. 'True' → logprob: -14.634801864624023
    8. 'from' → logprob: -14.884801864624023
    9. 'chain' → logprob: -16.134801864624023
    10. '   ' → logprob: -16.134801864624023

Token 73: '
' (ID: 198)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0572173185646534
    2. '
' → logprob: -3.0572173595428467
    3. '                
' → logprob: -4.932217121124268
    4. '           ' → logprob: -8.057217597961426
    5. 'c' → logprob: -8.432217597961426
    6. '                   ' → logprob: -8.682217597961426
    7. '            
' → logprob: -8.807217597961426
    8. '
' → logprob: -9.057217597961426
    9. ',' → logprob: -9.432217597961426
    10. '+' → logprob: -10.057217597961426

Token 74: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.011064205318689346
    2. '
' → logprob: -4.636064052581787
    3. '                
' → logprob: -7.261064052581787
    4. 'c' → logprob: -8.511064529418945
    5. '           ' → logprob: -8.761064529418945
    6. ',' → logprob: -9.261064529418945
    7. '                   ' → logprob: -9.886064529418945
    8. '            
' → logprob: -11.261064529418945
    9. '
' → logprob: -12.011064529418945
    10. ' c' → logprob: -12.136064529418945

Token 75: ' c' (ID: 274)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.06946990638971329
    2. 'c' (adapté à ' c') → logprob: -3.194469928741455
    3. '
' → logprob: -3.694469928741455
    4. ' c' → logprob: -7.819469928741455
    5. '
' → logprob: -8.569469451904297
    6. '           ' → logprob: -8.694469451904297
    7. '                   ' → logprob: -8.694469451904297
    8. '                
' → logprob: -8.819469451904297
    9. ',' → logprob: -9.819469451904297
    10. '                ' → logprob: -10.694469451904297

Token 76: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -6.909333023941144e-05
    2. ' +=' → logprob: -9.750068664550781
    3. '=' → logprob: -11.500068664550781
    4. '+' → logprob: -14.375068664550781
    5. ']+=' → logprob: -16.50006866455078
    6. '*=' → logprob: -18.37506866455078
    7. '+='' → logprob: -18.62506866455078
    8. '+=(' → logprob: -19.12506866455078
    9. '```' → logprob: -19.37506866455078
    10. '+="' → logprob: -19.62506866455078

Token 77: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.306760805164231e-05
    2. ' ' → logprob: -11.25001335144043
    3. '   ' → logprob: -19.87501335144043
    4. '<|end|>' → logprob: -20.12501335144043
    5. '2' → logprob: -20.37501335144043
    6. '```' → logprob: -21.00001335144043
    7. 'a' → logprob: -21.06251335144043
    8. ' ' → logprob: -21.18751335144043
    9. '+' → logprob: -21.93751335144043
    10. 'value' → logprob: -22.12501335144043

Token 78: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -7.941850526549388e-06
    2. ' ' → logprob: -11.750007629394531
    3. '<|end|>' → logprob: -19.00000762939453
    4. '2' → logprob: -19.06250762939453
    5. 'a' → logprob: -19.18750762939453
    6. '```' → logprob: -19.93750762939453
    7. '   ' → logprob: -20.18750762939453
    8. '+' → logprob: -20.50000762939453
    9. '  ' → logprob: -20.56250762939453
    10. ' ' → logprob: -20.56250762939453

Token 79: '
' (ID: 198)
  Prédit: ' else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.3532402813434601
    2. '           ' → logprob: -1.8532402515411377
    3. '<|end|>' → logprob: -2.8532402515411377
    4. 'else' → logprob: -3.1032402515411377
    5. '       ' → logprob: -4.353240489959717
    6. '
' → logprob: -4.603240489959717
    7. ' elif' → logprob: -5.353240489959717
    8. '               ' → logprob: -5.603240489959717
    9. 'elif' → logprob: -5.603240489959717
    10. '<|end|>' → logprob: -6.478240489959717

Token 80: '           ' (ID: 352)
  Prédit: ' else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.5347500443458557
    2. '           ' → logprob: -1.784749984741211
    3. 'else' → logprob: -1.909749984741211
    4. '       ' → logprob: -2.534749984741211
    5. '               ' → logprob: -4.659749984741211
    6. '<|end|>' → logprob: -5.409749984741211
    7. 'elif' → logprob: -6.284749984741211
    8. ' elif' → logprob: -6.534749984741211
    9. '	else' → logprob: -8.159749984741211
    10. '<|end|>' → logprob: -8.534749984741211

Token 81: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.19265754520893097
    2. 'else' (adapté à ' else') → logprob: -1.9426575899124146
    3. ' elif' → logprob: -3.942657470703125
    4. 'elif' → logprob: -4.442657470703125
    5. '	else' → logprob: -8.567657470703125
    6. '<|end|>' → logprob: -8.567657470703125
    7. '	elif' → logprob: -8.817657470703125
    8. '           ' → logprob: -9.317657470703125
    9. '       ' → logprob: -9.567657470703125
    10. '               ' → logprob: -11.067657470703125

Token 82: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.019310209900140762
    2. ':
' → logprob: -4.019309997558594
    3. '       ' → logprob: -7.894309997558594
    4. '           ' → logprob: -8.394309997558594
    5. 'yield' → logprob: -8.894309997558594
    6. '               ' → logprob: -9.269309997558594
    7. ',' → logprob: -9.644309997558594
    8. ':

' → logprob: -10.394309997558594
    9. '1' → logprob: -10.394309997558594
    10. ' :' → logprob: -10.519309997558594

Token 83: '               ' (ID: 506)
  Prédit: 'yield'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'yield' → logprob: -0.9290135502815247
    2. ' yield' → logprob: -1.1790134906768799
    3. '               ' → logprob: -1.5540134906768799
    4. '0' → logprob: -3.30401349067688
    5. '           ' → logprob: -3.67901349067688
    6. '1' → logprob: -4.429013729095459
    7. ' ' → logprob: -5.429013729095459
    8. '	yield' → logprob: -6.554013729095459
    9. '            ' → logprob: -6.679013729095459
    10. '                   ' → logprob: -6.804013729095459

Token 84: ' yield' (ID: 14376)
  Prédit: 'yield'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'yield' (adapté à ' yield') → logprob: -0.529570460319519
    2. ' yield' → logprob: -0.904570460319519
    3. '0' → logprob: -5.529570579528809
    4. '	yield' → logprob: -6.779570579528809
    5. '1' → logprob: -7.904570579528809
    6. ' ' → logprob: -8.654570579528809
    7. '   ' → logprob: -8.779570579528809
    8. '    ' → logprob: -8.904570579528809
    9. '       ' → logprob: -9.029570579528809
    10. '```' → logprob: -9.154570579528809

Token 85: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.009759632870554924
    2. ' ' → logprob: -4.634759426116943
    3. '-' → logprob: -14.634759902954102
    4. '<|end|>' → logprob: -14.634759902954102
    5. '1' → logprob: -14.759759902954102
    6. 'None' → logprob: -14.759759902954102
    7. '   ' → logprob: -14.947259902954102
    8. ' -' → logprob: -15.197259902954102
    9. '  ' → logprob: -15.634759902954102
    10. 'from' → logprob: -15.759759902954102

Token 86: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0001887591351987794
    2. ' ' → logprob: -9.125188827514648
    3. '-' → logprob: -10.000188827514648
    4. 'c' → logprob: -11.375188827514648
    5. 'None' → logprob: -11.875188827514648
    6. 'val' → logprob: -12.000188827514648
    7. '1' → logprob: -13.000188827514648
    8. '2' → logprob: -13.500188827514648
    9. '(' → logprob: -14.062688827514648
    10. 'from' → logprob: -14.437688827514648

Token 87: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 88: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 89: ' except' (ID: 6384)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 90: ' Stop' (ID: 22535)
  Prédit: ' Stop'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Stop' → logprob: -0.20141372084617615
    2. 'Stop' → logprob: -1.7014137506484985
    3. '_Stop' → logprob: -15.201414108276367
    4. ' ' → logprob: -16.701414108276367
    5. 'EOF' → logprob: -16.826414108276367
    6. '(' → logprob: -17.326414108276367
    7. '_stop' → logprob: -17.701414108276367
    8. '.Stop' → logprob: -17.826414108276367
    9. '   ' → logprob: -18.701414108276367
    10. ' EOF' → logprob: -18.826414108276367

Token 91: 'Iteration' (ID: 77823)
  Prédit: 'Iteration'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Iteration' → logprob: -1.1756367712223437e-05
    2. 'iteration' → logprob: -11.500011444091797
    3. 'Iterator' → logprob: -13.625011444091797
    4. ' iteration' → logprob: -15.500011444091797
    5. 'ter' → logprob: -17.125011444091797
    6. 'Iter' → logprob: -17.375011444091797
    7. 'Async' → logprob: -17.500011444091797
    8. 'Iterations' → logprob: -17.875011444091797
    9. '_iteration' → logprob: -18.625011444091797
    10. 'Exception' → logprob: -19.750011444091797

Token 92: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.003613497130572796
    2. ':
' → logprob: -5.628613471984863
    3. '       ' → logprob: -12.253613471984863
    4. ':return' → logprob: -12.503613471984863
    5. '           ' → logprob: -12.753613471984863
    6. ' :' → logprob: -13.753613471984863
    7. ':\' → logprob: -15.503613471984863
    8. ':
' → logprob: -15.628613471984863
    9. ':

' → logprob: -16.00361442565918
    10. '   ' → logprob: -16.37861442565918

Token 93: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.02210479974746704
    2. ' break' → logprob: -4.772104740142822
    3. '       ' → logprob: -5.397104740142822
    4. ' return' → logprob: -5.647104740142822
    5. 'return' → logprob: -5.772104740142822
    6. 'break' → logprob: -6.147104740142822
    7. '```' → logprob: -10.14710521697998
    8. '   ' → logprob: -11.27210521697998
    9. '	break' → logprob: -11.64710521697998
    10. '               ' → logprob: -11.77210521697998

Token 94: ' break' (ID: 2338)
  Prédit: ' break'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' break' → logprob: -1.162238359451294
    2. 'break' (adapté à ' break') → logprob: -1.162238359451294
    3. 'return' → logprob: -1.412238359451294
    4. ' return' → logprob: -2.037238359451294
    5. '   ' → logprob: -8.787238121032715
    6. '           ' → logprob: -8.912238121032715
    7. '```' → logprob: -9.537238121032715
    8. '       ' → logprob: -9.662238121032715
    9. '	break' → logprob: -12.287238121032715
    10. ' ' → logprob: -12.537238121032715

Token 95: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -1.0077896118164062
    2. '<|end|>' → logprob: -1.0077896118164062
    3. '   ' → logprob: -3.2577896118164062
    4. ' ' → logprob: -3.3827896118164062
    5. '\n' → logprob: -3.5077896118164062
    6. '\' → logprob: -3.5077896118164062
    7. ' 
' → logprob: -3.6327896118164062
    8. 'n' → logprob: -3.7577896118164062
    9. '#' → logprob: -4.257789611816406
    10. ')' → logprob: -4.382789611816406

Token 96: 'if' (ID: 366)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.292786717414856
    2. ' ' → logprob: -1.792786717414856
    3. '#' → logprob: -1.917786717414856
    4. 'c' → logprob: -2.0427865982055664
    5. ' 
' → logprob: -3.1677865982055664
    6. ')' → logprob: -3.2927865982055664
    7. 'for' → logprob: -3.2927865982055664
    8. 'def' → logprob: -3.7927865982055664
    9. '  
' → logprob: -4.042786598205566
    10. '*' → logprob: -4.042786598205566

Token 97: ' ' (ID: 220)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.5309266448020935
    2. ' __' → logprob: -1.0309267044067383
    3. '__' → logprob: -3.0309267044067383
    4. 'n' → logprob: -5.155926704406738
    5. ' ' → logprob: -7.280926704406738
    6. ' len' → logprob: -8.280926704406738
    7. ' ' → logprob: -9.780926704406738
    8. '_' → logprob: -9.780926704406738
    9. ' not' → logprob: -10.155926704406738
    10. ' _' → logprob: -10.280926704406738

Token 98: '1' (ID: 16)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.6154438257217407
    2. 'n' → logprob: -1.6154438257217407
    3. ' __' → logprob: -1.7404438257217407
    4. ' n' → logprob: -2.490443706512451
    5. ' len' → logprob: -6.740443706512451
    6. 'len' → logprob: -7.115443706512451
    7. 'c' → logprob: -9.36544418334961
    8. 'a' → logprob: -9.36544418334961
    9. '_' → logprob: -9.49044418334961
    10. 'name' → logprob: -9.61544418334961

Token 99: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.7178264856338501
    2. ' ==' → logprob: -1.21782648563385
    3. ' <' → logprob: -2.3428263664245605
    4. ' <=' → logprob: -3.3428263664245605
    5. ' not' → logprob: -3.8428263664245605
    6. '==' → logprob: -3.8428263664245605
    7. ':' → logprob: -4.4678263664245605
    8. ' >' → logprob: -5.2178263664245605
    9. '+' → logprob: -5.5928263664245605
    10. ' ' → logprob: -5.7178263664245605

Token 100: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.055569153279066086
    2. ' a' → logprob: -2.9305691719055176
    3. '*a' → logprob: -7.430569171905518
    4. 'chain' → logprob: -9.93056869506836
    5. 'c' → logprob: -11.18056869506836
    6. ' chain' → logprob: -11.68056869506836
    7. '[a' → logprob: -12.30556869506836
    8. ' ' → logprob: -12.43056869506836
    9. ' [' → logprob: -12.93056869506836
    10. '[' → logprob: -13.05556869506836

Token 101: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.02188858948647976
    2. ' :' → logprob: -3.896888494491577
    3. ' and' → logprob: -6.646888732910156
    4. ':
' → logprob: -10.896888732910156
    5. 'and' → logprob: -11.396888732910156
    6. '[' → logprob: -12.146888732910156
    7. '[:' → logprob: -12.646888732910156
    8. '.' → logprob: -13.646888732910156
    9. '[:]' → logprob: -13.771888732910156
    10. ' :
' → logprob: -13.896888732910156

Token 102: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09683208167552948
    2. '    
' → logprob: -2.721832036972046
    3. ' 
' → logprob: -5.096832275390625
    4. '
' → logprob: -5.471832275390625
    5. ' ' → logprob: -5.846832275390625
    6. ' n' → logprob: -6.346832275390625
    7. ' print' → logprob: -6.721832275390625
    8. '    ' → logprob: -6.846832275390625
    9. '  
' → logprob: -6.971832275390625
    10. ' c' → logprob: -7.096832275390625

Token 103: ' #' (ID: 1069)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -2.25044846534729
    2. 'for' → logprob: -2.25044846534729
    3. 'idx' → logprob: -2.75044846534729
    4. ' for' → logprob: -2.75044846534729
    5. 'print' → logprob: -2.75044846534729
    6. 'b' → logprob: -3.12544846534729
    7. 'it' → logprob: -3.25044846534729
    8. '   ' → logprob: -3.37544846534729
    9. ' idx' → logprob: -3.37544846534729
    10. ' print' → logprob: -3.62544846534729

Token 104: ' Compose' (ID: 183887)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -2.128862142562866
    2. 'c' → logprob: -2.378862142562866
    3. 'idx' → logprob: -2.753862142562866
    4. ' idx' → logprob: -2.753862142562866
    5. ' for' → logprob: -3.378862142562866
    6. 'for' → logprob: -3.378862142562866
    7. ' c' → logprob: -3.378862142562866
    8. 'b' → logprob: -3.628862142562866
    9. 'it' → logprob: -3.628862142562866
    10. ' it' → logprob: -3.753862142562866

Token 105: ' products' (ID: 3891)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -1.557952642440796
    2. ' result' → logprob: -2.182952642440796
    3. ' chain' → logprob: -2.307952642440796
    4. ' res' → logprob: -2.682952642440796
    5. ' rest' → logprob: -3.057952642440796
    6. 'result' → logprob: -3.057952642440796
    7. ' new' → logprob: -3.307952642440796
    8. ' ans' → logprob: -3.432952642440796
    9. 'for' → logprob: -3.682952642440796
    10. ' c' → logprob: -3.682952642440796

Token 106: ' of' (ID: 328)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.8586111664772034
    2. '=' → logprob: -1.9836111068725586
    3. '   ' → logprob: -2.1086111068725586
    4. '(' → logprob: -2.2336111068725586
    5. 'from' → logprob: -3.1086111068725586
    6. '_' → logprob: -3.6086111068725586
    7. 'for' → logprob: -3.7336111068725586
    8. '    ' → logprob: -3.9836111068725586
    9. 's' → logprob: -4.233611106872559
    10. ':' → logprob: -4.233611106872559

Token 107: ' indicator' (ID: 32003)
  Prédit: 'chain'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'chain' → logprob: -1.3087475299835205
    2. ' chain' → logprob: -1.3087475299835205
    3. '(chain' → logprob: -2.1837475299835205
    4. 'take' → logprob: -3.1837475299835205
    5. 'filter' → logprob: -3.4337475299835205
    6. 'map' → logprob: -3.9337475299835205
    7. 'c' → logprob: -4.183747291564941
    8. 'list' → logprob: -4.183747291564941
    9. ' map' → logprob: -4.183747291564941
    10. ' take' → logprob: -4.433747291564941

Token 108: ' function' (ID: 1114)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.31522950530052185
    2. ' variables' → logprob: -2.8152294158935547
    3. ' sequences' → logprob: -2.9402294158935547
    4. 'variables' → logprob: -3.6902294158935547
    5. ' function' → logprob: -3.9402294158935547
    6. 'function' → logprob: -4.190229415893555
    7. ' vectors' → logprob: -4.440229415893555
    8. 'chains' → logprob: -4.565229415893555
    9. 'vectors' → logprob: -4.690229415893555
    10. ' functions' → logprob: -4.690229415893555

Token 109: ' and' (ID: 326)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.8590188026428223
    2. ' for' → logprob: -1.4840188026428223
    3. 'for' → logprob: -2.4840188026428223
    4. ' from' → logprob: -2.8590188026428223
    5. 'from' → logprob: -2.9840188026428223
    6. ' and' → logprob: -3.4840188026428223
    7. ',' → logprob: -3.9840188026428223
    8. ' s' → logprob: -4.109018802642822
    9. ' =' → logprob: -4.234018802642822
    10. '   ' → logprob: -4.484018802642822

Token 110: ' sum' (ID: 4215)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.8335883617401123
    2. ' chain' → logprob: -0.9585883617401123
    3. 'list' → logprob: -2.5835883617401123
    4. 'chain' → logprob: -3.9585883617401123
    5. ' a' → logprob: -4.458588600158691
    6. ' n' → logprob: -4.708588600158691
    7. 'a' → logprob: -4.958588600158691
    8. ' the' → logprob: -4.958588600158691
    9. ' range' → logprob: -5.458588600158691
    10. ' c' → logprob: -5.583588600158691

Token 111: ' them' (ID: 1373)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -1.4542299509048462
    2. '   ' → logprob: -1.7042299509048462
    3. '(' → logprob: -1.8292299509048462
    4. ' =' → logprob: -2.0792298316955566
    5. '(chain' → logprob: -3.2042298316955566
    6. '(a' → logprob: -3.3292298316955566
    7. '(map' → logprob: -3.5792298316955566
    8. '=' → logprob: -3.5792298316955566
    9. 'from' → logprob: -4.079229831695557
    10. ' of' → logprob: -4.079229831695557

Token 112: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4731965959072113
    2. ':' → logprob: -1.0981966257095337
    3. '
' → logprob: -4.598196506500244
    4. 'sum' → logprob: -5.348196506500244
    5. 'result' → logprob: -5.473196506500244
    6. ' for' → logprob: -5.598196506500244
    7. 'print' → logprob: -5.848196506500244
    8. 'for' → logprob: -5.973196506500244
    9. ',' → logprob: -5.973196506500244
    10. ':
' → logprob: -6.223196506500244

Token 113: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05875115096569061
    2. 'sum' → logprob: -4.058751106262207
    3. 'print' → logprob: -4.933751106262207
    4. '    
' → logprob: -5.058751106262207
    5. '
' → logprob: -5.058751106262207
    6. 'result' → logprob: -5.558751106262207
    7. '    ' → logprob: -5.683751106262207
    8. ' sum' → logprob: -6.308751106262207
    9. ' print' → logprob: -6.558751106262207
    10. 'n' → logprob: -6.683751106262207

Token 114: ' indicators' (ID: 47367)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.42651841044425964
    2. ' print' → logprob: -1.301518440246582
    3. '   ' → logprob: -3.426518440246582
    4. 'result' → logprob: -3.551518440246582
    5. ' result' → logprob: -4.801518440246582
    6. 'res' → logprob: -6.426518440246582
    7. ' ans' → logprob: -7.176518440246582
    8. 's' → logprob: -7.426518440246582
    9. ' res' → logprob: -7.551518440246582
    10. 'r' → logprob: -7.676518440246582

Token 115: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.008683236315846443
    2. '=' → logprob: -4.758683204650879
    3. ',' → logprob: -9.758683204650879
    4. '   ' → logprob: -12.633683204650879
    5. '_' → logprob: -13.133683204650879
    6. 's' → logprob: -13.133683204650879
    7. ' ,' → logprob: -14.008683204650879
    8. '(' → logprob: -14.133683204650879
    9. ' ' → logprob: -14.133683204650879
    10. '  ' → logprob: -15.008683204650879

Token 116: ' list' (ID: 1562)
  Prédit: 'chain'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'chain' → logprob: -0.6310043931007385
    2. '(chain' → logprob: -1.2560043334960938
    3. 'list' → logprob: -2.1310043334960938
    4. 'map' → logprob: -3.1310043334960938
    5. ' chain' → logprob: -4.381004333496094
    6. ' list' → logprob: -6.006004333496094
    7. '(map' → logprob: -6.381004333496094
    8. ' map' → logprob: -6.756004333496094
    9. '(list' → logprob: -6.756004333496094
    10. '[' → logprob: -7.631004333496094

Token 117: '(chain' (ID: 124348)
  Prédit: '(chain'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(chain' → logprob: -1.7120533811976202e-05
    2. '(' → logprob: -11.125017166137695
    3. '(map' → logprob: -13.125017166137695
    4. 'chain' → logprob: -16.000017166137695
    5. '()' → logprob: -16.875017166137695
    6. '(
' → logprob: -17.125017166137695
    7. '(chart' → logprob: -17.375017166137695
    8. '((' → logprob: -17.500017166137695
    9. '(ch' → logprob: -18.250017166137695
    10. '```' → logprob: -18.250017166137695

Token 118: 'finder' (ID: 54491)
  Prédit: 'finder'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'finder' → logprob: -7.896309739408025e-07
    2. 'f' → logprob: -14.875000953674316
    3. 'found' → logprob: -16.125
    4. 'chain' → logprob: -16.25
    5. 'find' → logprob: -17.0
    6. 'fin' → logprob: -17.625
    7. 'filter' → logprob: -18.0
    8. 'inder' → logprob: -18.125
    9. ' finder' → logprob: -18.25
    10. 'fi' → logprob: -18.25

Token 119: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.00012630375567823648
    2. '(' → logprob: -9.000125885009766
    3. ' (' → logprob: -13.875125885009766
    4. '(
' → logprob: -14.125125885009766
    5. '(n' → logprob: -15.125125885009766
    6. 'a' → logprob: -15.375125885009766
    7. ')(' → logprob: -15.375125885009766
    8. '((' → logprob: -15.625125885009766
    9. ')' → logprob: -16.125125885009766
    10. '(s' → logprob: -16.500125885009766

Token 120: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.013998012989759445
    2. ',' → logprob: -5.013998031616211
    3. '()))' → logprob: -6.138998031616211
    4. ')' → logprob: -6.513998031616211
    5. '))
' → logprob: -7.138998031616211
    6. ')))' → logprob: -7.138998031616211
    7. ' ))' → logprob: -7.388998031616211
    8. '(a' → logprob: -8.263998031616211
    9. 'a' → logprob: -8.388998031616211
    10. '(' → logprob: -8.763998031616211

Token 121: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7727604508399963
    2. 'sum' → logprob: -1.3977603912353516
    3. 'result' → logprob: -1.8977603912353516
    4. 'total' → logprob: -2.7727603912353516
    5. 's' → logprob: -3.2727603912353516
    6. '   ' → logprob: -4.772760391235352
    7. '    
' → logprob: -4.772760391235352
    8. ' sum' → logprob: -5.272760391235352
    9. ' total' → logprob: -5.647760391235352
    10. ' 
' → logprob: -5.897760391235352

Token 122: ' from' (ID: 591)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.6349338889122009
    2. 'total' → logprob: -1.5099339485168457
    3. 'print' → logprob: -2.0099339485168457
    4. 'res' → logprob: -3.6349339485168457
    5. 's' → logprob: -3.7599339485168457
    6. 'sum' → logprob: -4.009933948516846
    7. 'answer' → logprob: -4.384933948516846
    8. ' result' → logprob: -4.759933948516846
    9. ' total' → logprob: -5.134933948516846
    10. 'product' → logprob: -5.384933948516846

Token 123: ' operator' (ID: 11019)
  Prédit: 'operator'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'operator' → logprob: -0.16340622305870056
    2. 'math' → logprob: -2.2884061336517334
    3. 'fun' → logprob: -3.5384061336517334
    4. ' operator' → logprob: -4.7884063720703125
    5. ' functools' → logprob: -4.9134063720703125
    6. ' itertools' → logprob: -5.9134063720703125
    7. '_operator' → logprob: -7.1634063720703125
    8. ' math' → logprob: -7.6634063720703125
    9. 'it' → logprob: -8.038406372070312
    10. '_' → logprob: -9.038406372070312

Token 124: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.42924994230270386
    2. 'import' → logprob: -1.0542500019073486
    3. ' ' → logprob: -7.9292497634887695
    4. '	import' → logprob: -8.67924976348877
    5. ' ' → logprob: -12.55424976348877
    6. '<|end|>' → logprob: -12.55424976348877
    7. '.import' → logprob: -13.17924976348877
    8. '_import' → logprob: -13.17924976348877
    9. '.' → logprob: -13.42924976348877
    10. '<|end|>' → logprob: -14.30424976348877

Token 125: ' add' (ID: 1147)
  Prédit: 'mul'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'mul' → logprob: -0.0015852120704948902
    2. 'add' → logprob: -6.876585006713867
    3. ' mul' → logprob: -8.251585006713867
    4. '```' → logprob: -9.126585006713867
    5. 'imul' → logprob: -9.251585006713867
    6. 'item' → logprob: -10.501585006713867
    7. 'import' → logprob: -10.751585006713867
    8. '.mul' → logprob: -11.126585006713867
    9. '_mul' → logprob: -12.001585006713867
    10. 'getitem' → logprob: -12.001585006713867

Token 126: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.015364179387688637
    2. ',' → logprob: -5.015364170074463
    3. '   ' → logprob: -5.515364170074463
    4. '    
' → logprob: -6.390364170074463
    5. '<|end|>' → logprob: -7.265364170074463
    6. '
' → logprob: -7.765364170074463
    7. 'from' → logprob: -7.890364170074463
    8. ')
' → logprob: -8.140364646911621
    9. ')' → logprob: -8.265364646911621
    10. 'sum' → logprob: -8.515364646911621

Token 127: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.21928055584430695
    2. '<|end|>' → logprob: -1.9692806005477905
    3. '   ' → logprob: -3.469280481338501
    4. ',' → logprob: -4.21928071975708
    5. ')' → logprob: -5.34428071975708
    6. '<|end|>' → logprob: -6.09428071975708
    7. '    
' → logprob: -6.59428071975708
    8. ')
' → logprob: -7.34428071975708
    9. ' 
' → logprob: -7.71928071975708
    10. '  
' → logprob: -8.094280242919922

Token 128: ' cnt' (ID: 27340)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.6148618459701538
    2. 'print' → logprob: -1.2398618459701538
    3. 'total' → logprob: -2.6148619651794434
    4. 'res' → logprob: -3.4898619651794434
    5. 'sum' → logprob: -3.7398619651794434
    6. 's' → logprob: -4.864861965179443
    7. 'from' → logprob: -4.989861965179443
    8. 'answer' → logprob: -5.114861965179443
    9. 'product' → logprob: -5.364861965179443
    10. ' result' → logprob: -5.989861965179443

Token 129: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.027154315263032913
    2. '=' → logprob: -3.6521542072296143
    3. 'inue' → logprob: -7.527154445648193
    4. 's' → logprob: -9.402153968811035
    5. '=sum' → logprob: -9.652153968811035
    6. 'sum' → logprob: -10.402153968811035
    7. '_' → logprob: -10.527153968811035
    8. ' ' → logprob: -10.777153968811035
    9. 'inu' → logprob: -11.152153968811035
    10. 'ains' → logprob: -11.527153968811035

Token 130: ' reduce' (ID: 10389)
  Prédit: 'reduce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'reduce' → logprob: -0.40669891238212585
    2. ' reduce' → logprob: -1.1566989421844482
    3. 'sum' → logprob: -4.406698703765869
    4. ' sum' → logprob: -4.906698703765869
    5. ' functools' → logprob: -11.406699180603027
    6. ' ' → logprob: -11.781699180603027
    7. '0' → logprob: -12.031699180603027
    8. 'redu' → logprob: -12.156699180603027
    9. 're' → logprob: -12.906699180603027
    10. '   ' → logprob: -13.156699180603027

Token 131: '(add' (ID: 40159)
  Prédit: '(add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(add' → logprob: -0.004448631778359413
    2. '(lambda' → logprob: -5.754448413848877
    3. '(' → logprob: -7.004448413848877
    4. 'add' → logprob: -8.254448890686035
    5. ' add' → logprob: -10.254448890686035
    6. '(operator' → logprob: -10.254448890686035
    7. ' (' → logprob: -10.629448890686035
    8. '(
' → logprob: -13.129448890686035
    9. ')add' → logprob: -13.379448890686035
    10. '	add' → logprob: -13.879448890686035

Token 132: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.000563042180147022
    2. ' ,' → logprob: -7.500563144683838
    3. ',
' → logprob: -12.25056266784668
    4. '   ' → logprob: -13.37556266784668
    5. ',int' → logprob: -14.12556266784668
    6. '‌,' → logprob: -14.75056266784668
    7. ',[' → logprob: -14.75056266784668
    8. ',index' → logprob: -15.12556266784668
    9. ',

' → logprob: -15.62556266784668
    10. '    ' → logprob: -15.75056266784668

Token 133: ' indicators' (ID: 47367)
  Prédit: 'ind'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ind' → logprob: -0.009822790510952473
    2. ' indicators' → logprob: -4.634822845458984
    3. '[ind' → logprob: -10.384822845458984
    4. 'indicator' → logprob: -11.134822845458984
    5. ')' → logprob: -12.009822845458984
    6. 'indices' → logprob: -12.509822845458984
    7. '(ind' → logprob: -12.884822845458984
    8. '   ' → logprob: -13.259822845458984
    9. '[' → logprob: -13.384822845458984
    10. ' ind' → logprob: -13.509822845458984

Token 134: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.004750153515487909
    2. ',' → logprob: -5.5047502517700195
    3. ' )' → logprob: -7.3797502517700195
    4. ')
' → logprob: -11.00475025177002
    5. ')+' → logprob: -11.25475025177002
    6. ' ,' → logprob: -11.87975025177002
    7. '   ' → logprob: -12.62975025177002
    8. '))' → logprob: -13.12975025177002
    9. '0' → logprob: -14.00475025177002
    10. ',)' → logprob: -14.00475025177002

Token 135: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.003178071230649948
    2. ' ' → logprob: -5.753178119659424
    3. '   ' → logprob: -16.128177642822266
    4. '  ' → logprob: -16.753177642822266
    5. ')' → logprob: -16.878177642822266
    6. '    ' → logprob: -18.065677642822266
    7. '1' → logprob: -18.190677642822266
    8. ' ' → logprob: -18.253177642822266
    9. ',' → logprob: -19.190677642822266
    10. '
' → logprob: -19.440677642822266

Token 136: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00026169343618676066
    2. ' ' → logprob: -8.250261306762695
    3. '   ' → logprob: -16.375261306762695
    4. ')' → logprob: -16.375261306762695
    5. '  ' → logprob: -16.625261306762695
    6. '1' → logprob: -17.125261306762695
    7. '    ' → logprob: -17.375261306762695
    8. '-' → logprob: -18.312761306762695
    9. ' ' → logprob: -18.875261306762695
    10. '۰' → logprob: -18.937761306762695

Token 137: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -9.746380237629637e-05
    2. ')
' → logprob: -9.250097274780273
    3. ' )' → logprob: -14.750097274780273
    4. '   ' → logprob: -15.000097274780273
    5. ')#' → logprob: -15.375097274780273
    6. '))' → logprob: -16.000097274780273
    7. ')

' → logprob: -16.125097274780273
    8. ')
' → logprob: -16.875097274780273
    9. ')`' → logprob: -17.625097274780273
    10. '#' → logprob: -17.625097274780273

Token 138: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.863696813583374
    2. '
' → logprob: -1.238696813583374
    3. 'print' → logprob: -1.363696813583374
    4. '<|end|>' → logprob: -3.738696813583374
    5. ' print' → logprob: -5.488697052001953
    6. ')' → logprob: -5.863697052001953
    7. '    
' → logprob: -6.988697052001953
    8. '#' → logprob: -8.488697052001953
    9. 'else' → logprob: -8.738697052001953
    10. ',' → logprob: -8.988697052001953

Token 139: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0681980773806572
    2. '   ' → logprob: -3.0681979656219482
    3. ' print' → logprob: -4.318198204040527
    4. '
' → logprob: -5.818198204040527
    5. 'else' → logprob: -6.443198204040527
    6. 'if' → logprob: -7.068198204040527
    7. '    
' → logprob: -9.068198204040527
    8. ' if' → logprob: -9.068198204040527
    9. 'for' → logprob: -9.318198204040527
    10. 'elif' → logprob: -9.568198204040527

Token 140: '(n' (ID: 2406)
  Prédit: '(cnt'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(cnt' → logprob: -7.24310302757658e-05
    2. '(' → logprob: -9.750072479248047
    3. 'cnt' → logprob: -11.250072479248047
    4. '(count' → logprob: -14.750072479248047
    5. '[cnt' → logprob: -15.125072479248047
    6. ' (' → logprob: -15.625072479248047
    7. ' cnt' → logprob: -16.500072479248047
    8. '(len' → logprob: -16.750072479248047
    9. '()' → logprob: -16.875072479248047
    10. '(c' → logprob: -17.500072479248047

Token 141: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.11401717364788055
    2. ' -' → logprob: -2.4890172481536865
    3. ')' → logprob: -3.7390172481536865
    4. ',' → logprob: -7.364017009735107
    5. ' ' → logprob: -9.364017486572266
    6. '+' → logprob: -9.489017486572266
    7. '-c' → logprob: -10.614017486572266
    8. ' )' → logprob: -10.739017486572266
    9. '-n' → logprob: -10.864017486572266
    10. ')
' → logprob: -10.864017486572266

Token 142: ' cnt' (ID: 27340)
  Prédit: 'cnt'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cnt' → logprob: -0.0024762547109276056
    2. ' cnt' → logprob: -6.002476215362549
    3. '(cnt' → logprob: -15.002476692199707
    4. '	cnt' → logprob: -15.252476692199707
    5. '[cnt' → logprob: -17.37747573852539
    6. 'count' → logprob: -18.12747573852539
    7. 'cn' → logprob: -19.25247573852539
    8. ' ' → logprob: -19.75247573852539
    9. '_cnt' → logprob: -19.75247573852539
    10. 'ct' → logprob: -19.87747573852539

Token 143: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.749814019713085e-06
    2. ' )' → logprob: -12.125006675720215
    3. ')
' → logprob: -14.625006675720215
    4. ')`' → logprob: -15.125006675720215
    5. '))' → logprob: -15.250006675720215
    6. ')}' → logprob: -16.37500762939453
    7. '`)' → logprob: -17.12500762939453
    8. '),' → logprob: -17.25000762939453
    9. ')}}' → logprob: -17.50000762939453
    10. ')**' → logprob: -17.75000762939453

Token 144: 'else' (ID: 2807)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 145: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.006742492783814669
    2. ':
' → logprob: -5.006742477416992
    3. ' :' → logprob: -10.631742477416992
    4. ' :
' → logprob: -13.006742477416992
    5. ':
' → logprob: -14.506742477416992
    6. ':

' → logprob: -15.756742477416992
    7. '   ' → logprob: -16.381742477416992
    8. ',' → logprob: -17.756742477416992
    9. ':return' → logprob: -17.756742477416992
    10. '.' → logprob: -18.381742477416992

Token 146: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.20614954829216003
    2. 'n' → logprob: -1.7061495780944824
    3. ' n' → logprob: -5.956149578094482
    4. ' print' → logprob: -6.831149578094482
    5. '   ' → logprob: -6.956149578094482
    6. '
' → logprob: -9.831149101257324
    7. '```' → logprob: -10.706149101257324
    8. '    
' → logprob: -11.331149101257324
    9. ' 
' → logprob: -12.581149101257324
    10. '  ' → logprob: -13.331149101257324

Token 147: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -4.739826181321405e-05
    2. 'n' → logprob: -10.00004768371582
    3. ' print' → logprob: -13.25004768371582
    4. '
' → logprob: -16.62504768371582
    5. '```' → logprob: -16.75004768371582
    6. '   ' → logprob: -17.25004768371582
    7. ' n' → logprob: -18.50004768371582
    8. '``' → logprob: -19.12504768371582
    9. 'printf' → logprob: -19.62504768371582
    10. '    
' → logprob: -20.50004768371582

Token 148: '(~' (ID: 114991)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.01254897378385067
    2. '(' → logprob: -4.387548923492432
    3. 'n' → logprob: -10.38754940032959
    4. ' (' → logprob: -12.01254940032959
    5. '(
' → logprob: -13.76254940032959
    6. '('' → logprob: -14.88754940032959
    7. ' n' → logprob: -14.88754940032959
    8. '()' → logprob: -15.76254940032959
    9. '"' → logprob: -16.637548446655273
    10. ''' → logprob: -16.762548446655273

Token 149: '0' (ID: 15)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.03744225576519966
    2. '(n' → logprob: -3.787442207336426
    3. '0' → logprob: -4.287442207336426
    4. '(' → logprob: -8.162442207336426
    5. '-' → logprob: -10.537442207336426
    6. '-n' → logprob: -11.912442207336426
    7. ' (' → logprob: -11.912442207336426
    8. '`' → logprob: -12.037442207336426
    9. ' n' → logprob: -12.037442207336426
    10. ')n' → logprob: -12.412442207336426

Token 150: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002036179881542921
    2. '+' → logprob: -6.752036094665527
    3. ')n' → logprob: -8.252036094665527
    4. ' )' → logprob: -8.502036094665527
    5. '<|end|>' → logprob: -8.752036094665527
    6. 'n' → logprob: -9.377036094665527
    7. ')+' → logprob: -10.502036094665527
    8. '(n' → logprob: -10.502036094665527
    9. '+n' → logprob: -10.502036094665527
    10. ' +' → logprob: -10.877036094665527

Token 151: ' ' (ID: 220)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 152: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 153: ' bit' (ID: 3546)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.223741352558136
    2. '0' → logprob: -1.9737412929534912
    3. '<|end|>' → logprob: -3.848741292953491
    4. ' n' → logprob: -4.34874153137207
    5. '(n' → logprob: -4.59874153137207
    6. ' ' → logprob: -4.97374153137207
    7. '-' → logprob: -5.22374153137207
    8. '1' → logprob: -7.09874153137207
    9. ')' → logprob: -7.34874153137207
    10. ' (' → logprob: -7.34874153137207

Token 154: 'wise' (ID: 7480)
  Prédit: 'wise'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'wise' → logprob: -0.1781308352947235
    2. 'count' → logprob: -2.428130865097046
    3. '-' → logprob: -2.803130865097046
    4. 'invert' → logprob: -5.053130626678467
    5. 'length' → logprob: -6.178130626678467
    6. '-in' → logprob: -6.178130626678467
    7. '~' → logprob: -6.803130626678467
    8. 'flip' → logprob: -6.928130626678467
    9. '-length' → logprob: -7.553130626678467
    10. 'mask' → logprob: -8.928131103515625

Token 155: ' complement' (ID: 21800)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.8449538350105286
    2. '-in' → logprob: -0.9699538350105286
    3. '-not' → logprob: -2.344953775405884
    4. ' -' → logprob: -3.719953775405884
    5. ' complement' → logprob: -4.344954013824463
    6. 'not' → logprob: -4.344954013824463
    7. 'NOT' → logprob: -4.719954013824463
    8. 'invert' → logprob: -4.719954013824463
    9. '~' → logprob: -4.969954013824463
    10. ' not' → logprob: -5.594954013824463

Token 156: ' of' (ID: 328)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 157: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.8398902416229248
    2. '-' → logprob: -1.0898902416229248
    3. 'n' → logprob: -1.4648902416229248
    4. '(n' → logprob: -7.964890480041504
    5. '-n' → logprob: -8.214890480041504
    6. '(' → logprob: -9.589890480041504
    7. '(-' → logprob: -9.589890480041504
    8. ' -' → logprob: -9.964890480041504
    9. '1' → logprob: -10.839890480041504
    10. '~-' → logprob: -11.589890480041504

Token 158: '0' (ID: 15)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.3528640568256378
    2. '0' → logprob: -1.6028640270233154
    3. 'n' → logprob: -2.3528640270233154
    4. '(n' → logprob: -7.7278642654418945
    5. '(-' → logprob: -8.852864265441895
    6. '-n' → logprob: -9.102864265441895
    7. '(' → logprob: -9.352864265441895
    8. '1' → logprob: -10.602864265441895
    9. ' -' → logprob: -10.602864265441895
    10. '~' → logprob: -10.977864265441895

Token 159: ' is' (ID: 382)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 160: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -1.5048530030981055e-06
    2. ' -' → logprob: -14.125001907348633
    3. '0' → logprob: -14.875001907348633
    4. '1' → logprob: -16.250001907348633
    5. '(-' → logprob: -16.500001907348633
    6. '−' → logprob: -16.750001907348633
    7. '-n' → logprob: -16.875001907348633
    8. '\-' → logprob: -17.250001907348633
    9. '`' → logprob: -17.500001907348633
    10. '```' → logprob: -18.250001907348633

Token 161: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -8.41866585687967e-06
    2. ' ' → logprob: -11.875008583068848
    3. '2' → logprob: -14.375008583068848
    4. '0' → logprob: -14.625008583068848
    5. 'n' → logprob: -16.68750762939453
    6. 'print' → logprob: -17.62500762939453
    7. '  ' → logprob: -17.62500762939453
    8. ' -' → logprob: -17.68750762939453
    9. '```' → logprob: -17.81250762939453
    10. '
' → logprob: -17.87500762939453


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 159
Tokens correctement prédits (1ère position, stricte): 50
Tokens correctement prédits (1ère position, avec adaptation): 53
Tokens correctement prédits (top 10): 111
Précision stricte (1ère position): 31.45%
Précision adaptée (1ère position): 33.33%
Précision (top 10): 69.81%
================================================================================
