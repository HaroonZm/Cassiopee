================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:28:53
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def f():
    a, b = (int(x) for x in input().split())
    if a == b:
        print("Yes")
    else:
        from sys import stdout
        stdout.write("No\n")
f()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' f' (ID: 285)
  → Token d'amorce (pas de prédiction)

Token 2: '():
' (ID: 8595)
  → Token d'amorce (pas de prédiction)

Token 3: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.09387513995170593
    2. '\' → logprob: -2.7188751697540283
    3. ' 
' → logprob: -4.968874931335449
    4. '   ' → logprob: -6.343874931335449
    5. '    
' → logprob: -6.468874931335449
    6. ' ' → logprob: -6.468874931335449
    7. '' → logprob: -6.593874931335449
    8. ''' → logprob: -6.593874931335449
    9. ''\' → logprob: -6.593874931335449
    10. '\x' → logprob: -6.843874931335449

Token 4: ' a' (ID: 261)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.1970000267028809
    2. '   ' → logprob: -1.4470000267028809
    3. 'return' → logprob: -1.5720000267028809
    4. '\' → logprob: -2.197000026702881
    5. 'a' (adapté à ' a') → logprob: -3.197000026702881
    6. 'pass' → logprob: -3.447000026702881
    7. '    ' → logprob: -4.322000026702881
    8. '\r' → logprob: -4.947000026702881
    9. ' ' → logprob: -5.072000026702881
    10. '\t' → logprob: -5.072000026702881

Token 5: ',' (ID: 11)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.29838863015174866
    2. '+' → logprob: -1.6733886003494263
    3. '_' → logprob: -4.173388481140137
    4. ' =' → logprob: -4.298388481140137
    5. ' ' → logprob: -4.423388481140137
    6. '.' → logprob: -4.548388481140137
    7. 'f' → logprob: -5.048388481140137
    8. 'n' → logprob: -5.548388481140137
    9. '[' → logprob: -6.423388481140137
    10. 'b' → logprob: -6.548388481140137

Token 6: ' b' (ID: 287)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7133253216743469
    2. ' b' → logprob: -0.7133253216743469
    3. 'b' → logprob: -3.963325262069702
    4. ' a' → logprob: -8.338325500488281
    5. ' =' → logprob: -8.588325500488281
    6. '=' → logprob: -9.463325500488281
    7. 'a' → logprob: -9.588325500488281
    8. '_' → logprob: -9.838325500488281
    9. ' ,' → logprob: -9.838325500488281
    10. ')' → logprob: -9.963325500488281

Token 7: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.31996241211891174
    2. '=' → logprob: -1.3199623823165894
    3. ',' → logprob: -5.069962501525879
    4. ' ,' → logprob: -8.319962501525879
    5. ' ' → logprob: -9.944962501525879
    6. '<|end|>' → logprob: -10.444962501525879
    7. ')' → logprob: -10.944962501525879
    8. '[' → logprob: -11.069962501525879
    9. '  ' → logprob: -11.319962501525879
    10. '   ' → logprob: -11.444962501525879

Token 8: ' (' (ID: 350)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.09587852656841278
    2. '1' → logprob: -2.9708786010742188
    3. '0' → logprob: -3.2208786010742188
    4. '10' → logprob: -9.845878601074219
    5. ' b' → logprob: -10.470878601074219
    6. ' (' → logprob: -10.720878601074219
    7. '[' → logprob: -10.845878601074219
    8. '5' → logprob: -11.095878601074219
    9. ' []' → logprob: -11.095878601074219
    10. '  ' → logprob: -11.220878601074219

Token 9: 'int' (ID: 491)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.11552002280950546
    2. '0' → logprob: -2.4905200004577637
    3. ')' → logprob: -3.7405200004577637
    4. ' ' → logprob: -6.490520000457764
    5. '3' → logprob: -8.115520477294922
    6. '5' → logprob: -8.990520477294922
    7. ')a' → logprob: -9.115520477294922
    8. ' )' → logprob: -9.865520477294922
    9. 'a' → logprob: -9.990520477294922
    10. '10' → logprob: -10.115520477294922

Token 10: '(x' (ID: 4061)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.33879518508911133
    2. ')' → logprob: -1.3387951850891113
    3. 's' → logprob: -5.213795185089111
    4. ',' → logprob: -5.338795185089111
    5. '('' → logprob: -5.588795185089111
    6. ' ' → logprob: -5.713795185089111
    7. ' )' → logprob: -5.963795185089111
    8. 'a' → logprob: -6.963795185089111
    9. '[' → logprob: -7.463795185089111
    10. '()' → logprob: -7.713795185089111

Token 11: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.11560626327991486
    2. '),' → logprob: -2.3656063079833984
    3. '))' → logprob: -4.615606307983398
    4. ',' → logprob: -6.490606307983398
    5. '(x' → logprob: -6.615606307983398
    6. '(' → logprob: -7.865606307983398
    7. 'for' → logprob: -7.990606307983398
    8. ' for' → logprob: -8.365606307983398
    9. '(s' → logprob: -8.615606307983398
    10. '(token' → logprob: -8.990606307983398

Token 12: ' for' (ID: 395)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.1722647249698639
    2. ')' → logprob: -2.297264814376831
    3. '),' → logprob: -3.422264814376831
    4. '[' → logprob: -5.172264575958252
    5. '(x' → logprob: -5.422264575958252
    6. 'for' → logprob: -5.797264575958252
    7. '(' → logprob: -6.297264575958252
    8. '<|end|>' → logprob: -6.297264575958252
    9. '(token' → logprob: -6.422264575958252
    10. ' ,' → logprob: -6.797264575958252

Token 13: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.004721683915704489
    2. 'x' → logprob: -5.754721641540527
    3. ' ' → logprob: -6.879721641540527
    4. '_' → logprob: -8.254721641540527
    5. ' range' → logprob: -9.629721641540527
    6. ' _' → logprob: -10.129721641540527
    7. ' s' → logprob: -10.504721641540527
    8. ' a' → logprob: -10.629721641540527
    9. '  ' → logprob: -10.629721641540527
    10. ' line' → logprob: -10.754721641540527

Token 14: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.001675302512012422
    2. 'in' → logprob: -7.626675128936768
    3. ' (' → logprob: -8.126675605773926
    4. ' )' → logprob: -8.376675605773926
    5. ')' → logprob: -8.751675605773926
    6. ' range' → logprob: -8.751675605773926
    7. '(' → logprob: -8.876675605773926
    8. ' input' → logprob: -9.626675605773926
    9. 'range' → logprob: -10.501675605773926
    10. ' ' → logprob: -11.001675605773926

Token 15: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.09938974678516388
    2. 'input' → logprob: -2.9743897914886475
    3. ' range' → logprob: -3.3493897914886475
    4. 'range' → logprob: -5.099389553070068
    5. ' a' → logprob: -7.974389553070068
    6. ')' → logprob: -7.974389553070068
    7. ' ' → logprob: -8.099390029907227
    8. '[' → logprob: -8.724390029907227
    9. ' ['' → logprob: -9.099390029907227
    10. ' )' → logprob: -9.099390029907227

Token 16: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.11888641864061356
    2. '()' → logprob: -2.7438864707946777
    3. '(' → logprob: -3.3688864707946777
    4. ')' → logprob: -4.618886470794678
    5. '('' → logprob: -5.868886470794678
    6. '().' → logprob: -8.86888599395752
    7. '(""))' → logprob: -8.99388599395752
    8. '(()' → logprob: -9.36888599395752
    9. ' ())' → logprob: -9.74388599395752
    10. '("("' → logprob: -10.36888599395752

Token 17: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -7.588793960167095e-05
    2. 'strip' → logprob: -9.500076293945312
    3. ' split' → logprob: -14.375076293945312
    4. 'rstrip' → logprob: -15.125076293945312
    5. 'spl' → logprob: -17.250076293945312
    6. '(split' → logprob: -18.125076293945312
    7. 's' → logprob: -19.000076293945312
    8. 'replace' → logprob: -21.000076293945312
    9. 'startswith' → logprob: -21.750076293945312
    10. '_split' → logprob: -21.750076293945312

Token 18: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.12816642224788666
    2. ')' → logprob: -2.753166437149048
    3. '()' → logprob: -2.878166437149048
    4. '(' → logprob: -8.253166198730469
    5. '()))' → logprob: -10.878166198730469
    6. ' ())' → logprob: -11.003166198730469
    7. '))' → logprob: -11.628166198730469
    8. '('' → logprob: -12.503166198730469
    9. '())
' → logprob: -12.878166198730469
    10. ' )' → logprob: -13.003166198730469

Token 19: '   ' (ID: 271)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.9596467614173889
    2. ' if' → logprob: -1.7096467018127441
    3. '   ' → logprob: -1.8346467018127441
    4. ',
' → logprob: -2.459646701812744
    5. ':' → logprob: -3.209646701812744
    6. 'if' → logprob: -3.459646701812744
    7. '\n' → logprob: -3.459646701812744
    8. ')' → logprob: -3.959646701812744
    9. '
' → logprob: -4.209646701812744
    10. ' ' → logprob: -4.334646701812744

Token 20: ' if' (ID: 538)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -1.5765026807785034
    2. '+' → logprob: -1.9515026807785034
    3. ',' → logprob: -2.076502799987793
    4. 'if' (adapté à ' if') → logprob: -2.326502799987793
    5. ' ' → logprob: -2.701502799987793
    6. '\n' → logprob: -2.701502799987793
    7. '*' → logprob: -3.076502799987793
    8. 'return' → logprob: -3.201502799987793
    9. ' if' → logprob: -3.451502799987793
    10. '#' → logprob: -3.701502799987793

Token 21: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.005360044538974762
    2. 'a' → logprob: -5.255360126495361
    3. ' ' → logprob: -9.755359649658203
    4. ' not' → logprob: -11.005359649658203
    5. ' (' → logprob: -11.130359649658203
    6. ' ' → logprob: -11.380359649658203
    7. ' b' → logprob: -11.755359649658203
    8. '(a' → logprob: -12.380359649658203
    9. '_a' → logprob: -12.630359649658203
    10. '(' → logprob: -13.630359649658203

Token 22: ' ==' (ID: 951)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.05053669586777687
    2. ' <' → logprob: -3.675536632537842
    3. ' ==' → logprob: -4.425536632537842
    4. '>' → logprob: -5.300536632537842
    5. ' ' → logprob: -5.925536632537842
    6. ' >=' → logprob: -6.425536632537842
    7. ' <=' → logprob: -6.925536632537842
    8. ' %' → logprob: -7.800536632537842
    9. '<' → logprob: -7.925536632537842
    10. '==' → logprob: -7.925536632537842

Token 23: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.4975728690624237
    2. 'b' → logprob: -1.122572898864746
    3. ' ' → logprob: -3.247572898864746
    4. '0' → logprob: -3.622572898864746
    5. '1' → logprob: -6.997572898864746
    6. '3' → logprob: -10.622572898864746
    7. '2' → logprob: -11.872572898864746
    8. '5' → logprob: -12.247572898864746
    9. '7' → logprob: -12.497572898864746
    10. '10' → logprob: -12.622572898864746

Token 24: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -6.051066520740278e-05
    2. ' :' → logprob: -10.000060081481934
    3. ':
' → logprob: -11.625060081481934
    4. ':**' → logprob: -12.875060081481934
    5. ':return' → logprob: -13.250060081481934
    6. ' and' → logprob: -14.375060081481934
    7. '>:' → logprob: -15.125060081481934
    8. '):' → logprob: -15.250060081481934
    9. ',' → logprob: -15.750060081481934
    10. '>' → logprob: -16.50006103515625

Token 25: '       ' (ID: 309)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.20365014672279358
    2. '       ' → logprob: -2.4536502361297607
    3. ':
' → logprob: -2.5786502361297607
    4. ':return' → logprob: -4.578649997711182
    5. ' return' → logprob: -5.578649997711182
    6. '
' → logprob: -5.953649997711182
    7. '   ' → logprob: -5.953649997711182
    8. '\n' → logprob: -7.078649997711182
    9. '    ' → logprob: -7.203649997711182
    10. '.' → logprob: -8.57865047454834

Token 26: ' print' (ID: 2123)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.502208411693573
    2. '       ' → logprob: -1.1272084712982178
    3. 'return' → logprob: -3.2522084712982178
    4. '   ' → logprob: -3.6272084712982178
    5. ' print' → logprob: -6.252208232879639
    6. ' pass' → logprob: -6.877208232879639
    7. '           ' → logprob: -6.877208232879639
    8. 'print' (adapté à ' print') → logprob: -7.752208232879639
    9. '    ' → logprob: -8.502208709716797
    10. 'pass' → logprob: -8.502208709716797

Token 27: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.030578069388866425
    2. '(a' → logprob: -4.155578136444092
    3. '('' → logprob: -5.155578136444092
    4. '()' → logprob: -5.280578136444092
    5. '("' → logprob: -6.155578136444092
    6. '("("' → logprob: -6.780578136444092
    7. '(True' → logprob: -8.530577659606934
    8. '("")' → logprob: -10.155577659606934
    9. 'a' → logprob: -11.030577659606934
    10. '(False' → logprob: -11.280577659606934

Token 28: 'Yes' (ID: 13022)
  Prédit: 'Equal'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Equal' → logprob: -0.6741032004356384
    2. 'a' → logprob: -0.7991032004356384
    3. 'equal' → logprob: -3.674103260040283
    4. 'Yes' → logprob: -5.424103260040283
    5. '=' → logprob: -5.924103260040283
    6. '0' → logprob: -6.299103260040283
    7. '="' → logprob: -7.424103260040283
    8. 'Hello' → logprob: -7.549103260040283
    9. 'Same' → logprob: -7.549103260040283
    10. 'No' → logprob: -7.674103260040283

Token 29: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.00011617878044489771
    2. ')' → logprob: -9.250116348266602
    3. ')")' → logprob: -11.375116348266602
    4. '")
' → logprob: -11.875116348266602
    5. '!")' → logprob: -14.125116348266602
    6. '"' → logprob: -15.125116348266602
    7. '\")' → logprob: -15.625116348266602
    8. ' ")' → logprob: -16.0001163482666
    9. '”)' → logprob: -16.2501163482666
    10. '")

' → logprob: -16.2501163482666

Token 30: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00698188366368413
    2. ' else' → logprob: -5.88198184967041
    3. 'else' → logprob: -6.13198184967041
    4. '       ' → logprob: -7.00698184967041
    5. ' ' → logprob: -8.13198184967041
    6. 'elif' → logprob: -8.50698184967041
    7. '    
' → logprob: -9.00698184967041
    8. ' elif' → logprob: -9.25698184967041
    9. '<|end|>' → logprob: -9.63198184967041
    10. '	else' → logprob: -9.75698184967041

Token 31: ' else' (ID: 1203)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.024618910625576973
    2. 'else' (adapté à ' else') → logprob: -4.524619102478027
    3. ' else' → logprob: -4.649619102478027
    4. '       ' → logprob: -6.024619102478027
    5. 'elif' → logprob: -7.649619102478027
    6. ' ' → logprob: -8.024619102478027
    7. ')' → logprob: -9.024619102478027
    8. '<|end|>' → logprob: -9.024619102478027
    9. ' elif' → logprob: -9.274619102478027
    10. '	else' → logprob: -9.649619102478027

Token 32: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00010020548506872728
    2. ':
' → logprob: -9.625100135803223
    3. '       ' → logprob: -11.000100135803223
    4. ' :' → logprob: -11.625100135803223
    5. '   ' → logprob: -11.875100135803223
    6. '):' → logprob: -15.000100135803223
    7. '    ' → logprob: -15.500100135803223
    8. '():' → logprob: -15.875100135803223
    9. '      ' → logprob: -16.12510108947754
    10. ',' → logprob: -16.37510108947754

Token 33: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0004938178462907672
    2. ' print' → logprob: -8.875494003295898
    3. 'print' → logprob: -9.250494003295898
    4. '   ' → logprob: -9.375494003295898
    5. '<|end|>' → logprob: -9.500494003295898
    6. '    ' → logprob: -10.875494003295898
    7. '```' → logprob: -11.125494003295898
    8. '           ' → logprob: -11.375494003295898
    9. '\n' → logprob: -11.750494003295898
    10. '        ' → logprob: -11.750494003295898

Token 34: ' from' (ID: 591)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -1.017566442489624
    2. ' print' → logprob: -1.142566442489624
    3. 'print' → logprob: -1.142566442489624
    4. '```' → logprob: -8.392566680908203
    5. '   ' → logprob: -9.517566680908203
    6. '        ' → logprob: -9.892566680908203
    7. '           ' → logprob: -10.267566680908203
    8. '    ' → logprob: -10.767566680908203
    9. '"' → logprob: -10.892566680908203
    10. '\n' → logprob: -11.142566680908203

Token 35: ' sys' (ID: 12228)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.25070521235466003
    2. ' sys' → logprob: -1.6257052421569824
    3. ' collections' → logprob: -4.250705242156982
    4. ' itertools' → logprob: -4.875705242156982
    5. ' ' → logprob: -7.250705242156982
    6. ' ' → logprob: -7.375705242156982
    7. ' random' → logprob: -7.875705242156982
    8. '_' → logprob: -8.375704765319824
    9. 'sys' → logprob: -8.500704765319824
    10. 'collections' → logprob: -8.625704765319824

Token 36: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.009886298328638077
    2. ' exit' → logprob: -5.134886264801025
    3. 'import' → logprob: -6.259886264801025
    4. '.exit' → logprob: -6.259886264801025
    5. '.stdout' → logprob: -10.884886741638184
    6. ' ' → logprob: -11.009886741638184
    7. 'exit' → logprob: -11.134886741638184
    8. '	import' → logprob: -11.259886741638184
    9. '.stderr' → logprob: -11.259886741638184
    10. ' .' → logprob: -11.634886741638184

Token 37: ' stdout' (ID: 48014)
  Prédit: ' exit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' exit' → logprob: -0.0019242330454289913
    2. ' stdin' → logprob: -6.50192403793335
    3. 'exit' → logprob: -7.87692403793335
    4. ' stderr' → logprob: -10.876924514770508
    5. '.exit' → logprob: -11.626924514770508
    6. ' stdout' → logprob: -12.751924514770508
    7. 'stdin' → logprob: -12.876924514770508
    8. '	exit' → logprob: -13.001924514770508
    9. ' exits' → logprob: -13.001924514770508
    10. '_exit' → logprob: -13.126924514770508

Token 38: '
' (ID: 198)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.8249691128730774
    2. '.stdout' → logprob: -0.8249691128730774
    3. '.write' → logprob: -2.9499690532684326
    4. '
' → logprob: -3.6999690532684326
    5. 'stdout' → logprob: -4.199969291687012
    6. '   ' → logprob: -4.699969291687012
    7. '       ' → logprob: -5.574969291687012
    8. '.readline' → logprob: -5.699969291687012
    9. '.stderr' → logprob: -5.949969291687012
    10. '.print' → logprob: -6.574969291687012

Token 39: '       ' (ID: 309)
  Prédit: '.stdout'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdout' → logprob: -0.5302695035934448
    2. '.write' → logprob: -1.6552695035934448
    3. '.' → logprob: -2.4052696228027344
    4. 'stdout' → logprob: -2.9052696228027344
    5. '
' → logprob: -3.7802696228027344
    6. '       ' → logprob: -4.405269622802734
    7. '   ' → logprob: -4.655269622802734
    8. '.print' → logprob: -5.155269622802734
    9. '.readline' → logprob: -5.655269622802734
    10. '.stderr' → logprob: -5.655269622802734

Token 40: ' stdout' (ID: 48014)
  Prédit: 'stdout'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdout' (adapté à ' stdout') → logprob: -0.06464758515357971
    2. ' stdout' → logprob: -2.814647674560547
    3. '       ' → logprob: -6.689647674560547
    4. '.stdout' → logprob: -7.189647674560547
    5. 'print' → logprob: -8.189647674560547
    6. 'stderr' → logprob: -8.939647674560547
    7. 'exit' → logprob: -9.189647674560547
    8. '(stdout' → logprob: -10.064647674560547
    9. ' exit' → logprob: -10.564647674560547
    10. 'import' → logprob: -10.939647674560547

Token 41: '.write' (ID: 6765)
  Prédit: '.write'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.write' → logprob: -0.0045211464166641235
    2. '.' → logprob: -5.504521369934082
    3. '.flush' → logprob: -8.004521369934082
    4. '.readline' → logprob: -9.754521369934082
    5. '.stdout' → logprob: -11.754521369934082
    6. '.print' → logprob: -11.754521369934082
    7. '.append' → logprob: -12.254521369934082
    8. '.w' → logprob: -12.504521369934082
    9. '.close' → logprob: -12.754521369934082
    10. '.writerow' → logprob: -12.879521369934082

Token 42: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.4017981290817261
    2. '(' → logprob: -1.526798129081726
    3. '('' → logprob: -2.9017982482910156
    4. '("("' → logprob: -2.9017982482910156
    5. '("")' → logprob: -6.901798248291016
    6. '("(' → logprob: -6.901798248291016
    7. '(str' → logprob: -7.776798248291016
    8. '("\' → logprob: -7.776798248291016
    9. '(">' → logprob: -8.526798248291016
    10. '"' → logprob: -8.776798248291016

Token 43: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.0028545670211315155
    2. '"No' → logprob: -7.002854347229004
    3. 'NO' → logprob: -7.377854347229004
    4. 'Yes' → logprob: -7.502854347229004
    5. '"' → logprob: -8.627854347229004
    6. 'N' → logprob: -9.252854347229004
    7. 'a' → logprob: -9.502854347229004
    8. 'Not' → logprob: -9.752854347229004
    9. 'Hello' → logprob: -10.002854347229004
    10. 'no' → logprob: -10.690354347229004

Token 44: '\n' (ID: 3392)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.31368288397789
    2. '\n' → logprob: -1.3136829137802124
    3. '")
' → logprob: -7.938683032989502
    4. 'n' → logprob: -10.438682556152344
    5. '"' → logprob: -11.813682556152344
    6. '"\' → logprob: -12.063682556152344
    7. '")

' → logprob: -12.063682556152344
    8. '!")' → logprob: -12.063682556152344
    9. ')")' → logprob: -13.188682556152344
    10. ')\' → logprob: -13.688682556152344

Token 45: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.001206423039548099
    2. ')' → logprob: -6.751206398010254
    3. ')")' → logprob: -10.376206398010254
    4. '"' → logprob: -12.751206398010254
    5. '")
' → logprob: -13.501206398010254
    6. ')"' → logprob: -15.501206398010254
    7. '')' → logprob: -15.751206398010254
    8. '}")' → logprob: -16.00120735168457
    9. ' ")' → logprob: -16.37620735168457
    10. '"))' → logprob: -16.75120735168457

Token 46: 'f' (ID: 69)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 47: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.062035802751779556
    2. '(' → logprob: -2.8120357990264893
    3. ')' → logprob: -11.31203556060791
    4. '()
' → logprob: -11.93703556060791
    5. '(
' → logprob: -11.93703556060791
    6. ' ()' → logprob: -12.06203556060791
    7. '```' → logprob: -12.06203556060791
    8. '(

' → logprob: -12.31203556060791
    9. '`()' → logprob: -12.43703556060791
    10. ' (' → logprob: -13.06203556060791


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 45
Tokens correctement prédits (1ère position, stricte): 15
Tokens correctement prédits (1ère position, avec adaptation): 16
Tokens correctement prédits (top 10): 39
Précision stricte (1ère position): 33.33%
Précision adaptée (1ère position): 35.56%
Précision (top 10): 86.67%
================================================================================
