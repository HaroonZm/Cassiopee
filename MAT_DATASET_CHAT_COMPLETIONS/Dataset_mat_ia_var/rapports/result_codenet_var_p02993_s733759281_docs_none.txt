================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:54:26
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
s = input()
for i in range(3):
    if s[i] == s[i+1]:
        print("Bad")
        exit()
print("Good")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 's' (ID: 82)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' input' (ID: 3422)
  → Token d'amorce (pas de prédiction)

Token 3: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0039759352803230286
    2. ''' → logprob: -6.753975868225098
    3. '()' → logprob: -7.128975868225098
    4. '('' → logprob: -7.128975868225098
    5. '`' → logprob: -7.253975868225098
    6. '"' → logprob: -8.878975868225098
    7. '```' → logprob: -8.878975868225098
    8. '("("' → logprob: -9.378975868225098
    9. '(
' → logprob: -9.753975868225098
    10. '(`' → logprob: -10.753975868225098

Token 4: 'for' (ID: 1938)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.30454960465431213
    2. 'if' → logprob: -2.0545496940612793
    3. '[' → logprob: -3.1795496940612793
    4. '+' → logprob: -3.4295496940612793
    5. '[::-' → logprob: -4.179549694061279
    6. 'print' → logprob: -4.804549694061279
    7. '=' → logprob: -5.304549694061279
    8. '_' → logprob: -5.304549694061279
    9. '```' → logprob: -5.304549694061279
    10. ''' → logprob: -5.554549694061279

Token 5: ' i' (ID: 575)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.004595557227730751
    2. ' s' → logprob: -6.129595756530762
    3. '  ' → logprob: -6.629595756530762
    4. ' i' → logprob: -6.879595756530762
    5. ''' → logprob: -11.504595756530762
    6. 'i' → logprob: -11.629595756530762
    7. 's' → logprob: -11.754595756530762
    8. ' n' → logprob: -12.504595756530762
    9. ' ‌' → logprob: -12.504595756530762
    10. ' ' → logprob: -12.629595756530762

Token 6: ' in' (ID: 306)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.20678995549678802
    2. ' in' → logprob: -2.081789970397949
    3. 'in' → logprob: -3.206789970397949
    4. ' n' → logprob: -4.206789970397949
    5. ' ' → logprob: -5.081789970397949
    6. '  ' → logprob: -8.70678997039795
    7. 'nt' → logprob: -9.83178997039795
    8. ',' → logprob: -9.95678997039795
    9. '_' → logprob: -10.20678997039795
    10. '(n' → logprob: -10.33178997039795

Token 7: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.10281600803136826
    2. 'range' → logprob: -2.477816104888916
    3. ' s' → logprob: -4.602816104888916
    4. 's' → logprob: -5.602816104888916
    5. ' ' → logprob: -10.352815628051758
    6. ''' → logprob: -10.852815628051758
    7. '"' → logprob: -11.977815628051758
    8. '(range' → logprob: -12.477815628051758
    9. '	range' → logprob: -13.352815628051758
    10. '_range' → logprob: -13.602815628051758

Token 8: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003747583134099841
    2. '(len' → logprob: -5.628747463226318
    3. '(s' → logprob: -9.003747940063477
    4. '(n' → logprob: -12.003747940063477
    5. '(i' → logprob: -12.003747940063477
    6. ' (' → logprob: -12.378747940063477
    7. '((' → logprob: -13.128747940063477
    8. '(length' → logprob: -13.503747940063477
    9. 's' → logprob: -13.878747940063477
    10. '('' → logprob: -14.378747940063477

Token 9: '3' (ID: 18)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.03461690619587898
    2. '1' → logprob: -3.6596169471740723
    3. '10' → logprob: -5.909616947174072
    4. 's' → logprob: -6.034616947174072
    5. '(len' → logprob: -6.159616947174072
    6. ' len' → logprob: -7.159616947174072
    7. '(' → logprob: -9.534616470336914
    8. '0' → logprob: -9.909616470336914
    9. '5' → logprob: -10.534616470336914
    10. ')' → logprob: -10.534616470336914

Token 10: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0002988776541315019
    2. ')' → logprob: -8.500298500061035
    3. '):
' → logprob: -10.500298500061035
    4. ':' → logprob: -10.500298500061035
    5. ',' → logprob: -11.500298500061035
    6. ' ):' → logprob: -11.625298500061035
    7. '**' → logprob: -11.750298500061035
    8. '*' → logprob: -12.125298500061035
    9. '+' → logprob: -13.000298500061035
    10. '```' → logprob: -13.750298500061035

Token 11: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4981367290019989
    2. ':' → logprob: -0.9981367588043213
    3. '    ' → logprob: -4.123136520385742
    4. '```' → logprob: -6.373136520385742
    5. ' ' → logprob: -6.748136520385742
    6. 'print' → logprob: -6.873136520385742
    7. 's' → logprob: -7.498136520385742
    8. ''' → logprob: -7.498136520385742
    9. '    
' → logprob: -7.998136520385742
    10. ' print' → logprob: -7.998136520385742

Token 12: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0817316770553589
    2. 's' → logprob: -1.4567316770553589
    3. ' print' → logprob: -1.7067316770553589
    4. 'print' → logprob: -1.9567316770553589
    5. ' s' → logprob: -2.4567317962646484
    6. '    ' → logprob: -4.206731796264648
    7. '```' → logprob: -6.331731796264648
    8. ' ' → logprob: -6.456731796264648
    9. '	s' → logprob: -8.706731796264648
    10. ' for' → logprob: -8.831731796264648

Token 13: ' s' (ID: 265)
  Prédit: ' s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.029873251914978027
    2. 's' → logprob: -3.9048733711242676
    3. ' i' → logprob: -4.904873371124268
    4. ' ' → logprob: -6.904873371124268
    5. 'i' → logprob: -7.154873371124268
    6. ' not' → logprob: -9.77987289428711
    7. ' len' → logprob: -11.02987289428711
    8. ' ' → logprob: -11.90487289428711
    9. '  ' → logprob: -12.40487289428711
    10. '    ' → logprob: -14.02987289428711

Token 14: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.1274469792842865
    2. '[' → logprob: -2.1274468898773193
    3. '.startswith' → logprob: -8.502447128295898
    4. ' ==' → logprob: -9.002447128295898
    5. '==' → logprob: -9.002447128295898
    6. ' [' → logprob: -10.752447128295898
    7. '[int' → logprob: -11.627447128295898
    8. '.' → logprob: -11.627447128295898
    9. '[in' → logprob: -12.627447128295898
    10. '[I' → logprob: -12.752447128295898

Token 15: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.024379974231123924
    2. ']==' → logprob: -4.274380207061768
    3. '==' → logprob: -5.149380207061768
    4. ' ]' → logprob: -6.649380207061768
    5. '[' → logprob: -6.899380207061768
    6. ' ==' → logprob: -7.024380207061768
    7. '=' → logprob: -7.899380207061768
    8. ':' → logprob: -8.64937973022461
    9. ')' → logprob: -8.77437973022461
    10. ']=' → logprob: -9.52437973022461

Token 16: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.6413787603378296
    2. ' ==' → logprob: -0.7663787603378296
    3. '!=' → logprob: -5.641378879547119
    4. '=' → logprob: -6.141378879547119
    5. ' !=' → logprob: -6.641378879547119
    6. ' in' → logprob: -7.641378879547119
    7. '[' → logprob: -8.141378402709961
    8. ' ' → logprob: -8.516378402709961
    9. ':' → logprob: -9.016378402709961
    10. ' =' → logprob: -9.141378402709961

Token 17: ' s' (ID: 265)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.14920850098133087
    2. '"' → logprob: -3.0242085456848145
    3. ''a' → logprob: -3.0242085456848145
    4. ''o' → logprob: -4.7742085456848145
    5. ''A' → logprob: -4.8992085456848145
    6. ''s' → logprob: -5.2742085456848145
    7. ''O' → logprob: -5.7742085456848145
    8. 's' → logprob: -6.1492085456848145
    9. '"s' → logprob: -6.1492085456848145
    10. ''x' → logprob: -6.3992085456848145

Token 18: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.00464657275006175
    2. '[' → logprob: -5.6296467781066895
    3. ''' → logprob: -8.129646301269531
    4. '[j' → logprob: -8.379646301269531
    5. ''[' → logprob: -9.004646301269531
    6. ']' → logprob: -9.879646301269531
    7. ''.' → logprob: -10.379646301269531
    8. '[user' → logprob: -10.629646301269531
    9. '```' → logprob: -10.629646301269531
    10. '[s' → logprob: -10.754646301269531

Token 19: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.05025433748960495
    2. '-' → logprob: -3.0502543449401855
    3. ' +' → logprob: -6.6752543449401855
    4. ']' → logprob: -8.800253868103027
    5. ' -' → logprob: -9.300253868103027
    6. ']:' → logprob: -10.175253868103027
    7. '1' → logprob: -10.425253868103027
    8. ']+' → logprob: -10.550253868103027
    9. ' ' → logprob: -10.675253868103027
    10. '   ' → logprob: -11.800253868103027

Token 20: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.5213274309644476e-05
    2. ' ' → logprob: -11.625015258789062
    3. '2' → logprob: -12.375015258789062
    4. '3' → logprob: -14.187515258789062
    5. '```' → logprob: -14.937515258789062
    6. 'i' → logprob: -15.500015258789062
    7. ']' → logprob: -16.375015258789062
    8. '`' → logprob: -16.437515258789062
    9. '   ' → logprob: -16.625015258789062
    10. '-' → logprob: -16.687515258789062

Token 21: ']:
' (ID: 22152)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.06673764437437057
    2. ':' → logprob: -3.191737651824951
    3. ' ):' → logprob: -4.691737651824951
    4. ')' → logprob: -4.816737651824951
    5. ']:' → logprob: -6.191737651824951
    6. ' and' → logprob: -6.816737651824951
    7. ' or' → logprob: -6.816737651824951
    8. ''):' → logprob: -7.816737651824951
    9. '=' → logprob: -8.191737174987793
    10. '==' → logprob: -8.191737174987793

Token 22: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.012103053741157055
    2. '   ' → logprob: -5.512103080749512
    3. ' continue' → logprob: -5.762103080749512
    4. ':' → logprob: -5.887103080749512
    5. '    ' → logprob: -7.137103080749512
    6. 'continue' → logprob: -8.262103080749512
    7. '     ' → logprob: -8.512103080749512
    8. ' and' → logprob: -8.637103080749512
    9. ' or' → logprob: -8.887103080749512
    10. '      ' → logprob: -9.262103080749512

Token 23: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.9570069313049316
    2. ' continue' → logprob: -1.4570069313049316
    3. '   ' → logprob: -1.5820069313049316
    4. 'continue' → logprob: -2.3320069313049316
    5. ' print' → logprob: -3.3320069313049316
    6. '       ' → logprob: -3.8320069313049316
    7. 's' → logprob: -4.207006931304932
    8. '    ' → logprob: -5.832006931304932
    9. ' break' → logprob: -6.707006931304932
    10. ' s' → logprob: -6.707006931304932

Token 24: '("' (ID: 568)
  Prédit: '(s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.13041214644908905
    2. '(' → logprob: -2.3804121017456055
    3. '(i' → logprob: -4.2554121017456055
    4. '("' → logprob: -4.6304121017456055
    5. 's' → logprob: -6.1304121017456055
    6. '('' → logprob: -6.6304121017456055
    7. '()' → logprob: -6.8804121017456055
    8. '(True' → logprob: -7.8804121017456055
    9. '("("' → logprob: -7.8804121017456055
    10. '((' → logprob: -8.380412101745605

Token 25: 'Bad' (ID: 22048)
  Prédit: 'No'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.8105982542037964
    2. 'Yes' → logprob: -1.9355982542037964
    3. 'Bad' → logprob: -2.060598373413086
    4. ')' → logprob: -2.185598373413086
    5. '=' → logprob: -3.185598373413086
    6. '")' → logprob: -3.310598373413086
    7. '"' → logprob: -3.685598373413086
    8. 'NO' → logprob: -3.935598373413086
    9. 's' → logprob: -4.935598373413086
    10. 'Won' → logprob: -4.935598373413086

Token 26: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -0.23776517808437347
    2. 'String' → logprob: -2.237765073776245
    3. ')' → logprob: -3.237765073776245
    4. 'Input' → logprob: -3.237765073776245
    5. ' )' → logprob: -5.362765312194824
    6. 'Word' → logprob: -5.612765312194824
    7. ' input' → logprob: -6.112765312194824
    8. ' String' → logprob: -6.112765312194824
    9. 'Sequence' → logprob: -6.487765312194824
    10. ' ' → logprob: -6.487765312194824

Token 27: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0018953178077936172
    2. '<|end|>' → logprob: -6.876895427703857
    3. '
' → logprob: -8.0018949508667
    4. '           ' → logprob: -8.6268949508667
    5. '   ' → logprob: -8.7518949508667
    6. '```' → logprob: -9.2518949508667
    7. ')' → logprob: -11.0018949508667
    8. '        
' → logprob: -11.2518949508667
    9. '<|end|>' → logprob: -11.7518949508667
    10. '        ' → logprob: -11.8768949508667

Token 28: ' exit' (ID: 10654)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00495207030326128
    2. 'break' → logprob: -5.8799519538879395
    3. ' break' → logprob: -6.3799519538879395
    4. '```' → logprob: -8.129952430725098
    5. '   ' → logprob: -9.879952430725098
    6. 'exit' (adapté à ' exit') → logprob: -10.254952430725098
    7. '	break' → logprob: -10.629952430725098
    8. '           ' → logprob: -11.379952430725098
    9. '``' → logprob: -12.004952430725098
    10. '        
' → logprob: -12.129952430725098

Token 29: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0013403621269389987
    2. '(' → logprob: -6.626340389251709
    3. '()
' → logprob: -11.75133991241455
    4. '()`' → logprob: -12.87633991241455
    5. '()

' → logprob: -13.50133991241455
    6. '())' → logprob: -14.37633991241455
    7. '()\' → logprob: -14.62633991241455
    8. ' ()' → logprob: -15.00133991241455
    9. '();' → logprob: -15.37633991241455
    10. '()]' → logprob: -15.62633991241455

Token 30: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0010303078452125192
    2. ')' → logprob: -7.626030445098877
    3. 'else' → logprob: -8.501029968261719
    4. ' print' → logprob: -8.876029968261719
    5. '```' → logprob: -9.751029968261719
    6. '<|end|>' → logprob: -10.376029968261719
    7. '   ' → logprob: -10.751029968261719
    8. '\n' → logprob: -11.626029968261719
    9. 'for' → logprob: -11.626029968261719
    10. '(print' → logprob: -11.751029968261719

Token 31: '("' (ID: 568)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.8704096078872681
    2. '(' → logprob: -1.120409607887268
    3. '("' → logprob: -1.370409607887268
    4. '("("' → logprob: -7.1204094886779785
    5. '("")' → logprob: -8.995409965515137
    6. '('' → logprob: -9.370409965515137
    7. '(s' → logprob: -10.370409965515137
    8. '(True' → logprob: -11.370409965515137
    9. '()"' → logprob: -13.745409965515137
    10. '"' → logprob: -13.995409965515137

Token 32: 'Good' (ID: 17212)
  Prédit: 'Good'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Good' → logprob: -0.0022154422476887703
    2. 'Yes' → logprob: -6.377215385437012
    3. '"' → logprob: -8.377215385437012
    4. 'OK' → logprob: -9.502215385437012
    5. ')' → logprob: -10.127215385437012
    6. 'Bad' → logprob: -10.502215385437012
    7. 'Ok' → logprob: -10.752215385437012
    8. 'Perfect' → logprob: -10.877215385437012
    9. 'Great' → logprob: -11.127215385437012
    10. 'Three' → logprob: -11.127215385437012

Token 33: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -1.6166903151315637e-05
    2. ')' → logprob: -11.125016212463379
    3. ')")' → logprob: -13.875016212463379
    4. '")
' → logprob: -15.125016212463379
    5. '!")' → logprob: -17.125015258789062
    6. '")

' → logprob: -17.750015258789062
    7. '"' → logprob: -18.125015258789062
    8. '')' → logprob: -18.250015258789062
    9. '()' → logprob: -18.875015258789062
    10. '`)' → logprob: -19.500015258789062


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 31
Tokens correctement prédits (1ère position, stricte): 14
Tokens correctement prédits (1ère position, avec adaptation): 15
Tokens correctement prédits (top 10): 24
Précision stricte (1ère position): 45.16%
Précision adaptée (1ère position): 48.39%
Précision (top 10): 77.42%
================================================================================
