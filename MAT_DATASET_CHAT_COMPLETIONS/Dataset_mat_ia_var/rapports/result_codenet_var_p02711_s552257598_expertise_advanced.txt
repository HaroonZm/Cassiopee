================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:18:16
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
print('Yes' if '7' in input()[:3] else 'No')
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'print' (ID: 1598)
  → Token d'amorce (pas de prédiction)

Token 1: '('' (ID: 706)
  → Token d'amorce (pas de prédiction)

Token 2: 'Yes' (ID: 13022)
  → Token d'amorce (pas de prédiction)

Token 3: ''' (ID: 6)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.00676344521343708
    2. '!' → logprob: -5.131763458251953
    3. ')' → logprob: -7.131763458251953
    4. ''' → logprob: -10.631763458251953
    5. '")' → logprob: -11.881763458251953
    6. '('' → logprob: -14.631763458251953
    7. ''''' → logprob: -14.631763458251953
    8. '"' → logprob: -14.756763458251953
    9. '')
' → logprob: -15.006763458251953
    10. ''))' → logprob: -15.006763458251953

Token 4: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -7.941850526549388e-06
    2. '`)' → logprob: -12.250007629394531
    3. '))' → logprob: -13.750007629394531
    4. '')' → logprob: -14.625007629394531
    5. ')`' → logprob: -14.750007629394531
    6. '```' → logprob: -15.125007629394531
    7. ')
' → logprob: -15.375007629394531
    8. ' )' → logprob: -15.875007629394531
    9. ')")' → logprob: -16.12500762939453
    10. ')">' → logprob: -16.37500762939453

Token 5: ' '' (ID: 461)
  Prédit: ' True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.07853532582521439
    2. ' x' → logprob: -3.328535318374634
    3. ' ' → logprob: -4.328535556793213
    4. ' condition' → logprob: -4.828535556793213
    5. ' a' → logprob: -4.953535556793213
    6. 'True' → logprob: -5.203535556793213
    7. ' user' → logprob: -6.203535556793213
    8. ' not' → logprob: -6.578535556793213
    9. 'x' → logprob: -7.953535556793213
    10. 'condition' → logprob: -8.203535079956055

Token 6: '7' (ID: 22)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.0912874937057495
    2. ' '' → logprob: -1.0912874937057495
    3. ''' → logprob: -1.9662874937057495
    4. '1' → logprob: -2.841287612915039
    5. 'y' → logprob: -3.341287612915039
    6. 'x' → logprob: -4.341287612915039
    7. 'Y' → logprob: -4.591287612915039
    8. 'True' → logprob: -5.216287612915039
    9. 'A' → logprob: -5.341287612915039
    10. 'n' → logprob: -5.466287612915039

Token 7: ''' (ID: 6)
  Prédit: '7'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -0.08408552408218384
    2. ''' → logprob: -2.584085464477539
    3. '0' → logprob: -6.834085464477539
    4. ' in' → logprob: -6.959085464477539
    5. '2' → logprob: -7.709085464477539
    6. ''in' → logprob: -7.709085464477539
    7. ' ' → logprob: -7.959085464477539
    8. '3' → logprob: -8.334085464477539
    9. ' '' → logprob: -8.334085464477539
    10. '>' → logprob: -8.334085464477539

Token 8: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.00446774298325181
    2. 'in' → logprob: -5.504467964172363
    3. ' ' → logprob: -8.629467964172363
    4. ')' → logprob: -9.379467964172363
    5. ' not' → logprob: -10.379467964172363
    6. '==' → logprob: -10.379467964172363
    7. ' ==' → logprob: -10.754467964172363
    8. ' )' → logprob: -11.254467964172363
    9. 'not' → logprob: -12.379467964172363
    10. '```' → logprob: -12.504467964172363

Token 9: ' input' (ID: 3422)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -1.2795817852020264
    2. ' input' → logprob: -1.4045817852020264
    3. 'input' → logprob: -1.6545817852020264
    4. 'str' → logprob: -2.6545817852020264
    5. ' '' → logprob: -2.7795817852020264
    6. ' str' → logprob: -3.1545817852020264
    7. 's' → logprob: -3.6545817852020264
    8. '"' → logprob: -4.2795820236206055
    9. 'x' → logprob: -4.7795820236206055
    10. ' s' → logprob: -4.7795820236206055

Token 10: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.30053502321243286
    2. '(' → logprob: -1.675534963607788
    3. '())' → logprob: -3.175534963607788
    4. '('' → logprob: -4.175535202026367
    5. ')' → logprob: -5.175535202026367
    6. '```' → logprob: -5.300535202026367
    7. '().' → logprob: -6.175535202026367
    8. ' ()' → logprob: -8.175535202026367
    9. '`()' → logprob: -8.425535202026367
    10. 'else' → logprob: -8.550535202026367

Token 11: '[:' (ID: 7808)
  Prédit: ' else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.10835104435682297
    2. ')' → logprob: -2.608350992202759
    3. 'else' → logprob: -3.608350992202759
    4. ' )' → logprob: -7.108351230621338
    5. ' ' → logprob: -7.483351230621338
    6. '```' → logprob: -7.858351230621338
    7. ' and' → logprob: -10.60835075378418
    8. '   ' → logprob: -11.10835075378418
    9. '))' → logprob: -11.10835075378418
    10. '    ' → logprob: -11.10835075378418

Token 12: '3' (ID: 18)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.020341113209724426
    2. '2' → logprob: -4.020340919494629
    3. '3' → logprob: -6.770340919494629
    4. '7' → logprob: -7.145340919494629
    5. ' ' → logprob: -8.520340919494629
    6. '5' → logprob: -10.645340919494629
    7. '6' → logprob: -11.395340919494629
    8. '4' → logprob: -11.395340919494629
    9. '8' → logprob: -13.020340919494629
    10. ']' → logprob: -14.145340919494629

Token 13: ']' (ID: 60)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.04129858687520027
    2. ' else' → logprob: -3.7912986278533936
    3. 'else' → logprob: -4.7912983894348145
    4. ']' → logprob: -4.9162983894348145
    5. ' )' → logprob: -7.1662983894348145
    6. '])' → logprob: -7.4162983894348145
    7. '')' → logprob: -8.041298866271973
    8. '```' → logprob: -8.666298866271973
    9. ' and' → logprob: -8.916298866271973
    10. 'and' → logprob: -9.916298866271973

Token 14: ' else' (ID: 1203)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.19821733236312866
    2. ' else' → logprob: -1.8232173919677734
    3. 'else' → logprob: -4.073217391967773
    4. ' )' → logprob: -7.573217391967773
    5. '')' → logprob: -8.198217391967773
    6. ' ' → logprob: -8.323217391967773
    7. '```' → logprob: -8.948217391967773
    8. '   ' → logprob: -10.698217391967773
    9. '))' → logprob: -10.823217391967773
    10. ' and' → logprob: -11.698217391967773

Token 15: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0006697862991131842
    2. ' '' → logprob: -7.375669956207275
    3. '"' → logprob: -10.625669479370117
    4. ' ' → logprob: -11.250669479370117
    5. '"'' → logprob: -13.000669479370117
    6. '('' → logprob: -14.250669479370117
    7. ')' → logprob: -14.375669479370117
    8. 'print' → logprob: -14.625669479370117
    9. '')' → logprob: -15.125669479370117
    10. '''' → logprob: -15.250669479370117

Token 16: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.004726433660835028
    2. ''' → logprob: -5.379726409912109
    3. 'Yes' → logprob: -9.87972640991211
    4. ' No' → logprob: -10.00472640991211
    5. 'NO' → logprob: -12.12972640991211
    6. '"No' → logprob: -13.00472640991211
    7. 'print' → logprob: -14.87972640991211
    8. 'no' → logprob: -15.25472640991211
    9. '_No' → logprob: -15.50472640991211
    10. '>No' → logprob: -15.62972640991211

Token 17: '')' (ID: 1542)
  Prédit: '')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.00047964724944904447
    2. ')' → logprob: -7.750479698181152
    3. ''' → logprob: -10.000479698181152
    4. '")' → logprob: -13.750479698181152
    5. '')
' → logprob: -14.375479698181152
    6. '('' → logprob: -14.500479698181152
    7. '`)' → logprob: -14.500479698181152
    8. ''))' → logprob: -15.750479698181152
    9. ''){' → logprob: -16.125478744506836
    10. '’)' → logprob: -16.500478744506836


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 15
Tokens correctement prédits (1ère position, stricte): 4
Tokens correctement prédits (1ère position, avec adaptation): 4
Tokens correctement prédits (top 10): 11
Précision stricte (1ère position): 26.67%
Précision adaptée (1ère position): 26.67%
Précision (top 10): 73.33%
================================================================================
