================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:28:59
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n, m = map(int, input().split())

if n == m:
    print("Yes")
else:
    print("No")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' m' (ID: 284)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5041208267211914
    2. ',' → logprob: -1.5041208267211914
    3. ' =' → logprob: -1.7541208267211914
    4. ' ,' → logprob: -8.879120826721191
    5. ' ' → logprob: -9.004120826721191
    6. ')' → logprob: -9.004120826721191
    7. '```' → logprob: -9.629120826721191
    8. ''' → logprob: -10.129120826721191
    9. '#' → logprob: -10.504120826721191
    10. '_' → logprob: -10.879120826721191

Token 4: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.16286484897136688
    2. ' map' → logprob: -2.537864923477173
    3. ' input' → logprob: -3.412864923477173
    4. 'input' → logprob: -4.537864685058594
    5. 'map' → logprob: -4.537864685058594
    6. '0' → logprob: -4.662864685058594
    7. ' n' → logprob: -5.912864685058594
    8. '10' → logprob: -5.912864685058594
    9. '1' → logprob: -7.162864685058594
    10. ' int' → logprob: -7.537864685058594

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3695484697818756
    2. '<|end|>' → logprob: -1.2445484399795532
    3. '(lambda' → logprob: -5.119548320770264
    4. '<|end|>' → logprob: -5.619548320770264
    5. '```' → logprob: -5.869548320770264
    6. ')' → logprob: -6.494548320770264
    7. '(int' → logprob: -6.869548320770264
    8. '(token' → logprob: -7.119548320770264
    9. '(user' → logprob: -7.494548320770264
    10. '[' → logprob: -7.932048320770264

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.7746230959892273
    2. '(' → logprob: -1.149623155593872
    3. ')' → logprob: -1.649623155593872
    4. '(str' → logprob: -4.649622917175293
    5. '(int' → logprob: -5.149622917175293
    6. '<|end|>' → logprob: -5.399622917175293
    7. 'input' → logprob: -6.399622917175293
    8. '```' → logprob: -6.524622917175293
    9. ')(' → logprob: -7.149622917175293
    10. '(raw' → logprob: -7.399622917175293

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.07895368337631226
    2. ' input' → logprob: -2.578953742980957
    3. '(input' → logprob: -9.703953742980957
    4. ')' → logprob: -13.203953742980957
    5. ',input' → logprob: -14.203953742980957
    6. '=input' → logprob: -15.953953742980957
    7. '[input' → logprob: -16.45395278930664
    8. '<input' → logprob: -16.45395278930664
    9. '```' → logprob: -17.32895278930664
    10. '	input' → logprob: -17.95395278930664

Token 8: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -1.0473259687423706
    2. '())' → logprob: -1.1723259687423706
    3. '()' → logprob: -1.7973259687423706
    4. ')' → logprob: -2.17232608795166
    5. '```' → logprob: -4.67232608795166
    6. '('' → logprob: -4.79732608795166
    7. '(token' → logprob: -5.04732608795166
    8. '`()' → logprob: -5.29732608795166
    9. '(""))' → logprob: -5.67232608795166
    10. '`)' → logprob: -5.79732608795166

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0015267637791112065
    2. 'strip' → logprob: -6.501526832580566
    3. 'rstrip' → logprob: -11.126526832580566
    4. ')' → logprob: -12.126526832580566
    5. ' split' → logprob: -13.001526832580566
    6. 'read' → logprob: -13.376526832580566
    7. '(split' → logprob: -15.501526832580566
    8. 'spl' → logprob: -16.62652587890625
    9. 'replace' → logprob: -17.12652587890625
    10. '```' → logprob: -17.62652587890625

Token 10: '())

' (ID: 27654)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02890959195792675
    2. '())' → logprob: -4.028909683227539
    3. '))' → logprob: -4.653909683227539
    4. '()' → logprob: -7.528909683227539
    5. '`)' → logprob: -7.903909683227539
    6. '(' → logprob: -8.653909683227539
    7. '()))' → logprob: -10.403909683227539
    8. ' )' → logprob: -11.653909683227539
    9. ')`' → logprob: -11.653909683227539
    10. '')' → logprob: -11.903909683227539

Token 11: 'if' (ID: 366)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.24893274903297424
    2. 'for' → logprob: -1.8739327192306519
    3. 'x' → logprob: -3.9989328384399414
    4. 'if' → logprob: -4.373932838439941
    5. 'd' → logprob: -5.123932838439941
    6. 'data' → logprob: -5.248932838439941
    7. '#' → logprob: -5.248932838439941
    8. '`' → logprob: -5.623932838439941
    9. 'n' → logprob: -6.123932838439941
    10. 'array' → logprob: -6.123932838439941

Token 12: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.16492213308811188
    2. ' ' → logprob: -1.9149221181869507
    3. 'n' → logprob: -5.53992223739624
    4. ' not' → logprob: -7.91492223739624
    5. ' m' → logprob: -8.414921760559082
    6. ' ' → logprob: -9.539921760559082
    7. '  ' → logprob: -10.289921760559082
    8. ''' → logprob: -11.289921760559082
    9. ' (' → logprob: -11.289921760559082
    10. ' a' → logprob: -11.789921760559082

Token 13: ' ==' (ID: 951)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.020709116011857986
    2. ' <' → logprob: -5.020709037780762
    3. '>' → logprob: -5.145709037780762
    4. ' ' → logprob: -5.645709037780762
    5. ' ==' → logprob: -5.770709037780762
    6. ' >=' → logprob: -7.770709037780762
    7. ' <=' → logprob: -8.270709037780762
    8. ' %' → logprob: -8.895709037780762
    9. '_' → logprob: -9.020709037780762
    10. ' !=' → logprob: -9.145709037780762

Token 14: ' m' (ID: 284)
  Prédit: ' m'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' m' → logprob: -0.24399736523628235
    2. ' ' → logprob: -2.24399733543396
    3. 'm' → logprob: -2.49399733543396
    4. '0' → logprob: -3.61899733543396
    5. '1' → logprob: -6.868997573852539
    6. ' ' → logprob: -10.993997573852539
    7. '2' → logprob: -11.868997573852539
    8. ' n' → logprob: -12.368997573852539
    9. '=' → logprob: -12.618997573852539
    10. '3' → logprob: -12.743997573852539

Token 15: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -4.8351892473874614e-05
    2. ' :' → logprob: -10.500048637390137
    3. ':**' → logprob: -11.250048637390137
    4. '':'' → logprob: -12.625048637390137
    5. '':' → logprob: -13.000048637390137
    6. '":"' → logprob: -14.625048637390137
    7. '>:' → logprob: -14.875048637390137
    8. ':
' → logprob: -15.000048637390137
    9. '):' → logprob: -15.375048637390137
    10. '":' → logprob: -15.625048637390137

Token 16: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.004992751870304346
    2. ':
' → logprob: -5.504992961883545
    3. '   ' → logprob: -8.004992485046387
    4. ' :' → logprob: -8.254992485046387
    5. '\n' → logprob: -8.879992485046387
    6. '\' → logprob: -9.879992485046387
    7. ' :
' → logprob: -10.504992485046387
    8. ' print' → logprob: -10.879992485046387
    9. 'print' → logprob: -11.504992485046387
    10. ':\' → logprob: -11.629992485046387

Token 17: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.37111467123031616
    2. '   ' → logprob: -1.621114730834961
    3. 'print' (adapté à ' print') → logprob: -2.246114730834961
    4. ' pass' → logprob: -5.621114730834961
    5. '    ' → logprob: -6.621114730834961
    6. '\n' → logprob: -7.746114730834961
    7. 'pass' → logprob: -7.871114730834961
    8. '    
' → logprob: -8.371114730834961
    9. '```' → logprob: -9.246114730834961
    10. '\' → logprob: -9.371114730834961

Token 18: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06745856255292892
    2. '("' → logprob: -3.4424586296081543
    3. '()' → logprob: -4.067458629608154
    4. '("("' → logprob: -4.942458629608154
    5. '('' → logprob: -5.317458629608154
    6. '(n' → logprob: -5.692458629608154
    7. '("")' → logprob: -8.067458152770996
    8. '(True' → logprob: -8.817458152770996
    9. '("(' → logprob: -9.192458152770996
    10. '(f' → logprob: -10.317458152770996

Token 19: 'Yes' (ID: 13022)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.10943603515625
    2. 'Equal' → logprob: -1.60943603515625
    3. 'Hello' → logprob: -1.85943603515625
    4. '")' → logprob: -2.60943603515625
    5. 'equal' → logprob: -2.85943603515625
    6. 'Yes' → logprob: -3.23443603515625
    7. '0' → logprob: -3.48443603515625
    8. '=' → logprob: -3.98443603515625
    9. '"' → logprob: -4.10943603515625
    10. 'Same' → logprob: -4.23443603515625

Token 20: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.0001415618316968903
    2. ')' → logprob: -9.000141143798828
    3. ')")' → logprob: -11.625141143798828
    4. '")
' → logprob: -11.750141143798828
    5. '!")' → logprob: -14.625141143798828
    6. '"' → logprob: -15.125141143798828
    7. '")
' → logprob: -15.750141143798828
    8. '”)' → logprob: -15.750141143798828
    9. '")

' → logprob: -16.000141143798828
    10. '\")' → logprob: -16.125141143798828

Token 21: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.06347636133432388
    2. ' else' → logprob: -3.438476324081421
    3. 'elif' → logprob: -3.563476324081421
    4. ' elif' → logprob: -8.3134765625
    5. '```' → logprob: -8.4384765625
    6. '<|end|>' → logprob: -9.0634765625
    7. '
' → logprob: -9.1884765625
    8. '    
' → logprob: -9.4384765625
    9. ')' → logprob: -9.6884765625
    10. '  
' → logprob: -10.0634765625

Token 22: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -8.721228368813172e-05
    2. ' :' → logprob: -9.500086784362793
    3. ':
' → logprob: -11.500086784362793
    4. '   ' → logprob: -13.625086784362793
    5. '):' → logprob: -14.875086784362793
    6. ':**' → logprob: -15.375086784362793
    7. '():' → logprob: -16.62508773803711
    8. ':return' → logprob: -16.75008773803711
    9. '：' → logprob: -16.87508773803711
    10. ' :
' → logprob: -17.12508773803711

Token 23: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0007464984664693475
    2. '    ' → logprob: -8.000746726989746
    3. 'print' → logprob: -9.250746726989746
    4. '"' → logprob: -9.500746726989746
    5. '       ' → logprob: -9.750746726989746
    6. '```' → logprob: -9.750746726989746
    7. ' print' → logprob: -9.875746726989746
    8. '\n' → logprob: -10.625746726989746
    9. ' ' → logprob: -11.500746726989746
    10. '\' → logprob: -11.500746726989746

Token 24: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.265434205532074
    2. ' print' → logprob: -1.8904342651367188
    3. 'print' (adapté à ' print') → logprob: -2.5154342651367188
    4. '"' → logprob: -7.515434265136719
    5. '    ' → logprob: -8.265434265136719
    6. '```' → logprob: -8.265434265136719
    7. ' ' → logprob: -9.140434265136719
    8. '\n' → logprob: -10.515434265136719
    9. '       ' → logprob: -10.765434265136719
    10. '  ' → logprob: -11.390434265136719

Token 25: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.3875243663787842
    2. '(' → logprob: -1.1375243663787842
    3. '("("' → logprob: -7.762524604797363
    4. '("")' → logprob: -8.637524604797363
    5. '(""' → logprob: -11.387524604797363
    6. '()' → logprob: -11.387524604797363
    7. '("""' → logprob: -11.762524604797363
    8. '('' → logprob: -12.012524604797363
    9. '("(' → logprob: -12.137524604797363
    10. '(False' → logprob: -13.137524604797363

Token 26: 'No' (ID: 3160)
  Prédit: '"No'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"No' → logprob: -0.017122182995080948
    2. 'No' → logprob: -4.267122268676758
    3. '"' → logprob: -5.892122268676758
    4. '"N' → logprob: -8.642122268676758
    5. '")' → logprob: -11.267122268676758
    6. '“No' → logprob: -12.892122268676758
    7. '""' → logprob: -15.017122268676758
    8. 'N' → logprob: -15.142122268676758
    9. ' No' → logprob: -15.517122268676758
    10. ''' → logprob: -15.642122268676758

Token 27: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -3.9054008084349334e-05
    2. ')' → logprob: -10.250039100646973
    3. ')")' → logprob: -12.625039100646973
    4. '"' → logprob: -15.625039100646973
    5. '")
' → logprob: -16.375038146972656
    6. '')' → logprob: -19.125038146972656
    7. '!")' → logprob: -19.125038146972656
    8. '”)' → logprob: -19.125038146972656
    9. ')"' → logprob: -19.375038146972656
    10. '\")' → logprob: -19.500038146972656


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 25
Tokens correctement prédits (1ère position, stricte): 8
Tokens correctement prédits (1ère position, avec adaptation): 8
Tokens correctement prédits (top 10): 22
Précision stricte (1ère position): 32.00%
Précision adaptée (1ère position): 32.00%
Précision (top 10): 88.00%
================================================================================
