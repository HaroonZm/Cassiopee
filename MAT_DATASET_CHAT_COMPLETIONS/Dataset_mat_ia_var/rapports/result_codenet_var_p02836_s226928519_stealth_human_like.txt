================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:34:59
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
# bon allez, je tente un truc ici
data = input()
n = len(data)
L = []
for z in data:
    L.append(z)
compteur=0
# là faut vérifier genre si c'est pas pareil des deux côtés
for i in range(n//2):
    if L[i] != L[n-1-i]:
        compteur = compteur + 1 # j'ajoute quand ça va pas
# bon, voilà le résultat
print(compteur)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '#' (ID: 2)
  → Token d'amorce (pas de prédiction)

Token 1: ' bon' (ID: 4846)
  → Token d'amorce (pas de prédiction)

Token 2: ' allez' (ID: 72134)
  → Token d'amorce (pas de prédiction)

Token 3: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.2970737814903259
    2. '!' → logprob: -1.5470738410949707
    3. '```' → logprob: -4.297073841094971
    4. ' ' → logprob: -4.672073841094971
    5. ':' → logprob: -5.172073841094971
    6. '<|end|>' → logprob: -5.547073841094971
    7. '.' → logprob: -6.297073841094971
    8. ' ,' → logprob: -6.547073841094971
    9. '  ' → logprob: -6.672073841094971
    10. '#' → logprob: -6.922073841094971

Token 4: ' je' (ID: 1264)
  Prédit: ' je'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' je' → logprob: -1.198297381401062
    2. 'on' → logprob: -1.448297381401062
    3. 'je' → logprob: -1.823297381401062
    4. ' on' → logprob: -2.5732975006103516
    5. ',' → logprob: -2.9482975006103516
    6. ' ' → logprob: -3.3232975006103516
    7. ' c' → logprob: -3.4482975006103516
    8. 'c' → logprob: -3.8232975006103516
    9. ' continu' → logprob: -3.9482975006103516
    10. 'contin' → logprob: -4.323297500610352

Token 5: ' tente' (ID: 75234)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.9066402316093445
    2. ' continue' → logprob: -1.2816402912139893
    3. 'vais' → logprob: -2.0316402912139893
    4. 'continue' → logprob: -2.4066402912139893
    5. 'veux' → logprob: -3.5316402912139893
    6. ' vais' → logprob: -4.28164005279541
    7. 'contin' → logprob: -4.53164005279541
    8. '#' → logprob: -4.90664005279541
    9. 'viens' → logprob: -5.03164005279541
    10. ' ' → logprob: -5.40664005279541

Token 6: ' un' (ID: 537)
  Prédit: '!'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '!' → logprob: -0.09661639481782913
    2. ' !' → logprob: -4.096616268157959
    3. ' ' → logprob: -4.096616268157959
    4. '```' → logprob: -4.471616268157959
    5. '#' → logprob: -4.721616268157959
    6. ':' → logprob: -5.096616268157959
    7. '\n' → logprob: -5.096616268157959
    8. '\' → logprob: -5.346616268157959
    9. '  
' → logprob: -5.346616268157959
    10. ',' → logprob: -5.346616268157959

Token 7: ' truc' (ID: 58342)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.2459450960159302
    2. 'tr' → logprob: -2.1209449768066406
    3. 'try' → logprob: -2.3709449768066406
    4. 's' → logprob: -2.4959449768066406
    5. '_' → logprob: -2.6209449768066406
    6. 'nou' → logprob: -2.7459449768066406
    7. 'test' → logprob: -3.2459449768066406
    8. 'print' → logprob: -3.3709449768066406
    9. 'import' → logprob: -3.9959449768066406
    10. 'n' → logprob: -3.9959449768066406

Token 8: ' ici' (ID: 27994)
  Prédit: '!'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '!' → logprob: -0.4605955481529236
    2. '#' → logprob: -2.2105956077575684
    3. '\n' → logprob: -2.3355956077575684
    4. ':' → logprob: -2.4605956077575684
    5. '\' → logprob: -3.5855956077575684
    6. 'print' → logprob: -4.460595607757568
    7. '.' → logprob: -4.710595607757568
    8. ',' → logprob: -5.335595607757568
    9. ' ' → logprob: -5.460595607757568
    10. 'import' → logprob: -5.835595607757568

Token 9: '
' (ID: 198)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.9156813025474548
    2. '\' → logprob: -1.6656813621520996
    3. '#' → logprob: -1.7906813621520996
    4. '!' → logprob: -2.4156813621520996
    5. '```' → logprob: -2.6656813621520996
    6. ':' → logprob: -3.1656813621520996
    7. '  
' → logprob: -4.7906813621521
    8. '`' → logprob: -4.9156813621521
    9. '
' → logprob: -5.1656813621521
    10. '.' → logprob: -5.2906813621521

Token 10: 'data' (ID: 1074)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '```' → logprob: -1.4794392585754395
    2. '\n' → logprob: -1.6044392585754395
    3. '\' → logprob: -1.7294392585754395
    4. ':' → logprob: -1.7294392585754395
    5. '!' → logprob: -2.4794392585754395
    6. ' ' → logprob: -3.3544392585754395
    7. '#' → logprob: -3.4794392585754395
    8. '.' → logprob: -3.9794392585754395
    9. '`' → logprob: -4.1044392585754395
    10. ',' → logprob: -5.1044392585754395

Token 11: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.538928210735321
    2. '[' → logprob: -0.913928210735321
    3. '=' → logprob: -4.913928031921387
    4. ' =' → logprob: -5.038928031921387
    5. '['' → logprob: -7.788928031921387
    6. 's' → logprob: -8.288928031921387
    7. '_' → logprob: -8.538928031921387
    8. '[:]' → logprob: -8.913928031921387
    9. 'data' → logprob: -9.538928031921387
    10. ' .' → logprob: -9.538928031921387

Token 12: ' input' (ID: 3422)
  Prédit: ' {}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' {}' → logprob: -1.1725656986236572
    2. '{}' → logprob: -1.2975656986236572
    3. ' []' → logprob: -1.4225656986236572
    4. ' [' → logprob: -2.5475656986236572
    5. '[' → logprob: -2.7975656986236572
    6. ' {' → logprob: -4.422565460205078
    7. '[]' → logprob: -4.422565460205078
    8. '{' → logprob: -5.172565460205078
    9. ' pd' → logprob: -5.297565460205078
    10. ' ' → logprob: -7.172565460205078

Token 13: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0008440529345534742
    2. '()' → logprob: -7.1258440017700195
    3. '(
' → logprob: -11.50084400177002
    4. '('' → logprob: -11.87584400177002
    5. '("("' → logprob: -11.87584400177002
    6. '(`' → logprob: -12.50084400177002
    7. '(

' → logprob: -12.75084400177002
    8. '("' → logprob: -12.87584400177002
    9. '("")' → logprob: -12.87584400177002
    10. ')' → logprob: -14.00084400177002

Token 14: 'n' (ID: 77)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.014566556550562382
    2. '.strip' → logprob: -4.514566421508789
    3. '.split' → logprob: -6.639566421508789
    4. '+' → logprob: -7.639566421508789
    5. 'print' → logprob: -7.889566421508789
    6. '.lower' → logprob: -8.014566421508789
    7. ' ' → logprob: -8.014566421508789
    8. '=' → logprob: -9.139566421508789
    9. ')' → logprob: -9.264566421508789
    10. ',' → logprob: -9.889566421508789

Token 15: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.28233930468559265
    2. '.' → logprob: -2.407339334487915
    3. '_' → logprob: -2.907339334487915
    4. '=' → logprob: -3.282339334487915
    5. 'umber' → logprob: -4.407339096069336
    6. 'um' → logprob: -4.782339096069336
    7. 'ame' → logprob: -4.907339096069336
    8. ' ' → logprob: -5.032339096069336
    9. 'a' → logprob: -5.157339096069336
    10. 'b' → logprob: -5.157339096069336

Token 16: ' len' (ID: 4631)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.1587851345539093
    2. 'int' → logprob: -2.533785104751587
    3. ' len' → logprob: -2.783785104751587
    4. 'len' → logprob: -5.408785343170166
    5. ' ' → logprob: -6.908785343170166
    6. ' data' → logprob: -9.033784866333008
    7. '0' → logprob: -10.658784866333008
    8. 'data' → logprob: -11.408784866333008
    9. '10' → logprob: -11.783784866333008
    10. ' input' → logprob: -12.408784866333008

Token 17: '(data' (ID: 4819)
  Prédit: '(data'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(data' → logprob: -0.03804952651262283
    2. '(' → logprob: -3.2880494594573975
    3. 'data' → logprob: -12.663049697875977
    4. '(
' → logprob: -13.038049697875977
    5. '(n' → logprob: -13.163049697875977
    6. ' (' → logprob: -15.038049697875977
    7. '(s' → logprob: -16.038049697875977
    8. '(dat' → logprob: -16.538049697875977
    9. '(input' → logprob: -16.538049697875977
    10. '(user' → logprob: -16.663049697875977

Token 18: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1398757123970427e-05
    2. ' )' → logprob: -11.750011444091797
    3. '#' → logprob: -14.125011444091797
    4. '()' → logprob: -14.625011444091797
    5. '))' → logprob: -14.625011444091797
    6. '[' → logprob: -14.875011444091797
    7. ')
' → logprob: -15.500011444091797
    8. 'data' → logprob: -15.500011444091797
    9. ')#' → logprob: -15.625011444091797
    10. ')data' → logprob: -15.875011444091797

Token 19: 'L' (ID: 43)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.1960301399230957
    2. 'for' → logprob: -1.1960301399230957
    3. 'if' → logprob: -2.1960301399230957
    4. '+' → logprob: -3.1960301399230957
    5. '#' → logprob: -3.4460301399230957
    6. '_' → logprob: -3.8210301399230957
    7. '.' → logprob: -3.9460301399230957
    8. 'i' → logprob: -3.9460301399230957
    9. '%' → logprob: -4.071030139923096
    10. '-' → logprob: -4.196030139923096

Token 20: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5496069192886353
    2. '=' → logprob: -1.4246069192886353
    3. '_' → logprob: -2.6746068000793457
    4. 'e' → logprob: -3.0496068000793457
    5. 'en' → logprob: -4.424606800079346
    6. 'i' → logprob: -4.549606800079346
    7. '=[]' → logprob: -4.674606800079346
    8. 'ist' → logprob: -5.299606800079346
    9. 'L' → logprob: -5.799606800079346
    10. 'et' → logprob: -5.799606800079346

Token 21: ' []
' (ID: 8911)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.27945128083229065
    2. '[]' → logprob: -2.029451370239258
    3. '[n' → logprob: -3.279451370239258
    4. ' [' → logprob: -3.279451370239258
    5. ' []' → logprob: -4.279451370239258
    6. 'n' → logprob: -4.654451370239258
    7. 'data' → logprob: -5.404451370239258
    8. '0' → logprob: -5.404451370239258
    9. '[data' → logprob: -5.779451370239258
    10. '[int' → logprob: -7.654451370239258

Token 22: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.008131654933094978
    2. 'f' → logprob: -5.508131504058838
    3. 'i' → logprob: -5.758131504058838
    4. ' for' → logprob: -7.258131504058838
    5. ' ' → logprob: -10.008131980895996
    6. '=' → logprob: -10.258131980895996
    7. '_' → logprob: -10.383131980895996
    8. '(' → logprob: -11.258131980895996
    9. 'F' → logprob: -11.383131980895996
    10. ')' → logprob: -12.008131980895996

Token 23: ' z' (ID: 579)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.37886694073677063
    2. ' ' → logprob: -1.5038669109344482
    3. 'i' → logprob: -2.5038669109344482
    4. '_' → logprob: -5.128867149353027
    5. ' _' → logprob: -5.253867149353027
    6. '  ' → logprob: -8.878867149353027
    7. ' ' → logprob: -11.003867149353027
    8. ' data' → logprob: -12.253867149353027
    9. '_i' → logprob: -12.378867149353027
    10. ' ‌' → logprob: -12.628867149353027

Token 24: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.16251298785209656
    2. 'in' → logprob: -1.912513017654419
    3. 'n' → logprob: -6.66251277923584
    4. ' ' → logprob: -7.03751277923584
    5. ',' → logprob: -10.53751277923584
    6. '  ' → logprob: -11.28751277923584
    7. 'i' → logprob: -11.28751277923584
    8. ' i' → logprob: -11.78751277923584
    9. '_' → logprob: -12.03751277923584
    10. 'z' → logprob: -12.16251277923584

Token 25: ' data' (ID: 1238)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.12803292274475098
    2. 'range' → logprob: -2.128032922744751
    3. ' data' → logprob: -7.003032684326172
    4. 'data' → logprob: -8.753032684326172
    5. ' ' → logprob: -10.503032684326172
    6. '  ' → logprob: -13.503032684326172
    7. ' ran' → logprob: -13.753032684326172
    8. 'rang' → logprob: -13.753032684326172
    9. '	range' → logprob: -13.878032684326172
    10. ' rang' → logprob: -14.003032684326172

Token 26: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00865097250789404
    2. ' :' → logprob: -4.758650779724121
    3. '[:]' → logprob: -11.758650779724121
    4. '.' → logprob: -12.008650779724121
    5. '=' → logprob: -12.508650779724121
    6. ':
' → logprob: -12.883650779724121
    7. '[' → logprob: -13.258650779724121
    8. ',' → logprob: -13.258650779724121
    9. '+' → logprob: -13.383650779724121
    10. '[:' → logprob: -13.383650779724121

Token 27: '   ' (ID: 271)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.7265950441360474
    2. '   ' → logprob: -1.7265950441360474
    3. ' L' → logprob: -1.8515950441360474
    4. 'L' → logprob: -2.226594924926758
    5. 'if' → logprob: -3.226594924926758
    6. ' ' → logprob: -3.601594924926758
    7. 'i' → logprob: -6.601594924926758
    8. '[' → logprob: -7.226594924926758
    9. '    ' → logprob: -7.351594924926758
    10. ' i' → logprob: -7.726594924926758

Token 28: ' L' (ID: 451)
  Prédit: 'L'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'L' (adapté à ' L') → logprob: -0.12398125976324081
    2. ' L' → logprob: -2.873981237411499
    3. ' if' → logprob: -3.248981237411499
    4. 'if' → logprob: -3.998981237411499
    5. '   ' → logprob: -6.123981475830078
    6. 'i' → logprob: -7.623981475830078
    7. ' ' → logprob: -9.373981475830078
    8. 'n' → logprob: -9.998981475830078
    9. 'z' → logprob: -10.123981475830078
    10. ' i' → logprob: -10.248981475830078

Token 29: '.append' (ID: 3709)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.5759761929512024
    2. '.append' → logprob: -0.8259761929512024
    3. 'append' → logprob: -11.700976371765137
    4. '.=' → logprob: -11.700976371765137
    5. '.Append' → logprob: -11.825976371765137
    6. '_append' → logprob: -12.575976371765137
    7. ' .' → logprob: -12.700976371765137
    8. '.extend' → logprob: -12.950976371765137
    9. '.app' → logprob: -13.950976371765137
    10. '.add' → logprob: -14.450976371765137

Token 30: '(z' (ID: 27674)
  Prédit: '(z'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(z' → logprob: -0.018512187525629997
    2. '(ord' → logprob: -4.14351224899292
    3. '(' → logprob: -6.01851224899292
    4. '((' → logprob: -10.518511772155762
    5. '(int' → logprob: -12.268511772155762
    6. 'z' → logprob: -13.018511772155762
    7. '('' → logprob: -13.268511772155762
    8. '(chr' → logprob: -13.768511772155762
    9. 'ord' → logprob: -14.143511772155762
    10. '(x' → logprob: -14.143511772155762

Token 31: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.7491250875755213e-05
    2. '))' → logprob: -10.875027656555176
    3. ' )' → logprob: -11.750027656555176
    4. ')
' → logprob: -14.875027656555176
    5. ')))' → logprob: -16.87502670288086
    6. '')' → logprob: -17.00002670288086
    7. '`)' → logprob: -17.25002670288086
    8. '   ' → logprob: -17.50002670288086
    9. ')`' → logprob: -17.62502670288086
    10. ' ' → logprob: -17.75002670288086

Token 32: 'comp' (ID: 3697)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -1.0484416484832764
    2. ' ' → logprob: -1.4234416484832764
    3. '#' → logprob: -1.7984416484832764
    4. '.' → logprob: -2.7984416484832764
    5. ')' → logprob: -3.2984416484832764
    6. '+' → logprob: -3.5484416484832764
    7. 'print' → logprob: -3.5484416484832764
    8. '(' → logprob: -4.0484418869018555
    9. 'for' → logprob: -4.4234418869018555
    10. ']' → logprob: -4.9234418869018555

Token 33: 'teur' (ID: 45262)
  Prédit: 'are'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'are' → logprob: -0.8342996835708618
    2. 'ute' → logprob: -2.3342995643615723
    3. 'ar' → logprob: -2.4592995643615723
    4. 'reh' → logprob: -2.7092995643615723
    5. 'lement' → logprob: -2.8342995643615723
    6. 'len' → logprob: -2.8342995643615723
    7. 'l' → logprob: -3.4592995643615723
    8. 't' → logprob: -3.4592995643615723
    9. 'ile' → logprob: -3.4592995643615723
    10. 're' → logprob: -3.7092995643615723

Token 34: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.8965265154838562
    2. '_' → logprob: -1.521526575088501
    3. 's' → logprob: -1.646526575088501
    4. ' =' → logprob: -2.021526575088501
    5. ')' → logprob: -4.271526336669922
    6. '(' → logprob: -4.271526336669922
    7. ' +=' → logprob: -5.271526336669922
    8. ' ' → logprob: -5.271526336669922
    9. '[' → logprob: -5.896526336669922
    10. '+' → logprob: -6.396526336669922

Token 35: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.000824156915768981
    2. '1' → logprob: -7.625823974609375
    3. ' ' → logprob: -8.000823974609375
    4. '{}' → logprob: -15.250823974609375
    5. 'n' → logprob: -15.375823974609375
    6. 'len' → logprob: -15.875823974609375
    7. '[' → logprob: -17.313323974609375
    8. ' ' → logprob: -17.438323974609375
    9. '`' → logprob: -17.500823974609375
    10. '```' → logprob: -17.688323974609375

Token 36: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7753569483757019
    2. 'for' → logprob: -0.7753569483757019
    3. ' for' → logprob: -3.2753570079803467
    4. '<|end|>' → logprob: -3.4003570079803467
    5. ':' → logprob: -5.775356769561768
    6. ' 
' → logprob: -6.525356769561768
    7. 'n' → logprob: -7.650356769561768
    8. ' ' → logprob: -7.900356769561768
    9. '<|end|>' → logprob: -8.150357246398926
    10. '\n' → logprob: -8.150357246398926

Token 37: '#' (ID: 2)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.15078042447566986
    2. '
' → logprob: -2.400780439376831
    3. ' for' → logprob: -3.275780439376831
    4. '<|end|>' → logprob: -4.650780200958252
    5. '\n' → logprob: -7.275780200958252
    6. ' 
' → logprob: -7.775780200958252
    7. '<|end|>' → logprob: -8.77578067779541
    8. ':' → logprob: -8.90078067779541
    9. 'n' → logprob: -9.15078067779541
    10. '\' → logprob: -9.52578067779541

Token 38: ' là' (ID: 8052)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.077567920088768
    2. ' for' → logprob: -2.7025678157806396
    3. 'n' → logprob: -6.327568054199219
    4. 'i' → logprob: -6.452568054199219
    5. 'f' → logprob: -6.702568054199219
    6. ' ' → logprob: -6.952568054199219
    7. ':' → logprob: -7.577568054199219
    8. '=' → logprob: -7.952568054199219
    9. '_' → logprob: -8.827568054199219
    10. '```' → logprob: -8.827568054199219

Token 39: ' faut' (ID: 17821)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.07973463833332062
    2. ' for' → logprob: -2.5797345638275146
    3. ':' → logprob: -8.079734802246094
    4. ' ' → logprob: -8.579734802246094
    5. 'if' → logprob: -9.454734802246094
    6. 'n' → logprob: -9.454734802246094
    7. 'f' → logprob: -10.204734802246094
    8. 'i' → logprob: -10.204734802246094
    9. '=' → logprob: -10.954734802246094
    10. ',' → logprob: -11.204734802246094

Token 40: ' vérifier' (ID: 93671)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7827030420303345
    2. ' que' → logprob: -2.407702922821045
    3. 'for' → logprob: -3.032702922821045
    4. '   ' → logprob: -3.032702922821045
    5. 're' → logprob: -3.157702922821045
    6. '#' → logprob: -3.282702922821045
    7. '-il' → logprob: -3.407702922821045
    8. '```' → logprob: -3.657702922821045
    9. ' compter' → logprob: -3.782702922821045
    10. ' pas' → logprob: -4.032702922821045

Token 41: ' genre' (ID: 20910)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -1.1572206020355225
    2. 'for' → logprob: -1.1572206020355225
    3. ' if' → logprob: -1.2822206020355225
    4. 'if' → logprob: -2.4072206020355225
    5. ' ' → logprob: -5.782220840454102
    6. '<|end|>' → logprob: -7.907220840454102
    7. '```' → logprob: -9.157220840454102
    8. ':' → logprob: -9.407220840454102
    9. ',' → logprob: -10.157220840454102
    10. ' si' → logprob: -10.282220840454102

Token 42: ' si' (ID: 1784)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.06802290678024292
    2. ' for' → logprob: -3.9430229663848877
    3. 'if' → logprob: -4.193022727966309
    4. ' i' → logprob: -4.318022727966309
    5. ' ' → logprob: -4.693022727966309
    6. ' si' → logprob: -4.943022727966309
    7. 'for' → logprob: -6.818022727966309
    8. 'i' → logprob: -9.193022727966309
    9. ' a' → logprob: -9.443022727966309
    10. 'si' → logprob: -9.443022727966309

Token 43: ' c' (ID: 274)
  Prédit: ' z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' z' → logprob: -1.0866494178771973
    2. ' L' → logprob: -1.4616494178771973
    3. 'z' → logprob: -1.8366494178771973
    4. ' data' → logprob: -2.3366494178771973
    5. 'L' → logprob: -3.0866494178771973
    6. ' n' → logprob: -3.3366494178771973
    7. ' len' → logprob: -3.8366494178771973
    8. ' compteur' → logprob: -3.9616494178771973
    9. 'data' → logprob: -4.461649417877197
    10. 'n' → logprob: -4.586649417877197

Token 44: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.8416008949279785
    2. 'e' → logprob: -1.7166008949279785
    3. 'est' → logprob: -2.0916008949279785
    4. ''' → logprob: -2.3416008949279785
    5. 'a' → logprob: -3.2166008949279785
    6. 'omp' → logprob: -3.5916008949279785
    7. 'ont' → logprob: -4.3416008949279785
    8. ''un' → logprob: -4.7166008949279785
    9. ''''' → logprob: -4.9666008949279785
    10. ''était' → logprob: -4.9666008949279785

Token 45: ' pas' (ID: 2173)
  Prédit: 'une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'une' → logprob: -0.48543238639831543
    2. ' une' → logprob: -1.7354323863983154
    3. 'un' → logprob: -2.4854323863983154
    4. ' un' → logprob: -2.7354323863983154
    5. 'des' → logprob: -4.3604326248168945
    6. 'v' → logprob: -5.1104326248168945
    7. 'le' → logprob: -5.4854326248168945
    8. 'a' → logprob: -5.4854326248168945
    9. 'la' → logprob: -5.6104326248168945
    10. 'e' → logprob: -6.1104326248168945

Token 46: ' pareil' (ID: 155569)
  Prédit: 'une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'une' → logprob: -0.9886241555213928
    2. ' un' → logprob: -1.613624095916748
    3. 'un' → logprob: -1.863624095916748
    4. ' une' → logprob: -2.613624095916748
    5. 'le' → logprob: -2.738624095916748
    6. 'du' → logprob: -3.988624095916748
    7. ' du' → logprob: -4.238624095916748
    8. 'la' → logprob: -4.238624095916748
    9. ' la' → logprob: -4.488624095916748
    10. 'des' → logprob: -4.738624095916748

Token 47: ' des' (ID: 731)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -1.102297306060791
    2. ' ' → logprob: -1.227297306060791
    3. 'for' → logprob: -1.477297306060791
    4. ':' → logprob: -3.102297306060791
    5. 'i' → logprob: -3.727297306060791
    6. ' if' → logprob: -3.977297306060791
    7. ' i' → logprob: -4.477297306060791
    8. '   ' → logprob: -4.852297306060791
    9. 'if' → logprob: -4.852297306060791
    10. '
' → logprob: -4.977297306060791

Token 48: ' deux' (ID: 10301)
  Prédit: ' caractères'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' caractères' → logprob: -1.1407365798950195
    2. 'car' → logprob: -1.3907365798950195
    3. ' ' → logprob: -1.7657365798950195
    4. 'élé' → logprob: -3.1407365798950195
    5. ' car' → logprob: -3.6407365798950195
    6. ' éléments' → logprob: -3.8907365798950195
    7. 'e' → logprob: -3.8907365798950195
    8. ' caracteres' → logprob: -4.0157365798950195
    9. ' caract' → logprob: -4.6407365798950195
    10. 'fois' → logprob: -4.7657365798950195

Token 49: ' côtés' (ID: 103239)
  Prédit: ' côtés'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' côtés' → logprob: -0.053453102707862854
    2. 'c' → logprob: -4.303452968597412
    3. ' for' → logprob: -4.928452968597412
    4. 'for' → logprob: -5.053452968597412
    5. '<|end|>' → logprob: -5.178452968597412
    6. ':' → logprob: -5.553452968597412
    7. ' i' → logprob: -6.303452968597412
    8. 'indices' → logprob: -6.303452968597412
    9. 'i' → logprob: -6.303452968597412
    10. ' c' → logprob: -6.303452968597412

Token 50: '
' (ID: 198)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -1.2538740634918213
    2. 'i' → logprob: -1.3788740634918213
    3. 'for' → logprob: -1.5038740634918213
    4. ' for' → logprob: -2.1288740634918213
    5. 's' → logprob: -2.7538740634918213
    6. 'while' → logprob: -4.253873825073242
    7. ' while' → logprob: -4.628873825073242
    8. ' i' → logprob: -4.753873825073242
    9. ',' → logprob: -4.753873825073242
    10. '<|end|>' → logprob: -4.878873825073242

Token 51: 'for' (ID: 1938)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.9435547590255737
    2. ':' → logprob: -1.0685547590255737
    3. ' :' → logprob: -2.1935548782348633
    4. 's' → logprob: -2.6935548782348633
    5. ' for' → logprob: -3.3185548782348633
    6. 'for' → logprob: -4.193554878234863
    7. ' i' → logprob: -4.943554878234863
    8. ' ,' → logprob: -5.318554878234863
    9. ',' → logprob: -5.443554878234863
    10. 'i' → logprob: -5.568554878234863

Token 52: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.0022488650865852833
    2. 'i' → logprob: -6.127248764038086
    3. ' range' → logprob: -10.002248764038086
    4. ' ' → logprob: -11.752248764038086
    5. ' ' → logprob: -12.877248764038086
    6. ' in' → logprob: -13.502248764038086
    7. ' _' → logprob: -13.502248764038086
    8. ' z' → logprob: -13.877248764038086
    9. '_' → logprob: -14.252248764038086
    10. 'range' → logprob: -14.252248764038086

Token 53: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.011135661974549294
    2. 'in' → logprob: -4.511135578155518
    3. ' ' → logprob: -9.386136054992676
    4. ',' → logprob: -14.011136054992676
    5. ' i' → logprob: -14.886136054992676
    6. '```' → logprob: -15.011136054992676
    7. '  ' → logprob: -15.261136054992676
    8. '+' → logprob: -15.261136054992676
    9. '	in' → logprob: -15.636136054992676
    10. ' ' → logprob: -15.886136054992676

Token 54: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.014164687134325504
    2. 'range' → logprob: -4.264164924621582
    3. ' ' → logprob: -14.514164924621582
    4. '(range' → logprob: -14.764164924621582
    5. ' ' → logprob: -16.014163970947266
    6. '	range' → logprob: -16.014163970947266
    7. ' xrange' → logprob: -16.514163970947266
    8. '  ' → logprob: -17.389163970947266
    9. '   ' → logprob: -18.764163970947266
    10. ' rang' → logprob: -19.264163970947266

Token 55: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.02337813191115856
    2. '(' → logprob: -3.7733781337738037
    3. '(len' → logprob: -9.398378372192383
    4. ' (' → logprob: -10.648378372192383
    5. '(int' → logprob: -11.273378372192383
    6. '((' → logprob: -11.523378372192383
    7. '()' → logprob: -14.023378372192383
    8. '(s' → logprob: -14.148378372192383
    9. '(
' → logprob: -14.273378372192383
    10. 'n' → logprob: -14.398378372192383

Token 56: '//' (ID: 393)
  Prédit: '//'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '//' → logprob: -0.16406364738941193
    2. ' //' → logprob: -2.0390636920928955
    3. '):' → logprob: -3.9140636920928955
    4. ')' → logprob: -7.039063453674316
    5. ' ):' → logprob: -8.664063453674316
    6. ' ' → logprob: -9.789063453674316
    7. '-' → logprob: -10.414063453674316
    8. ')//' → logprob: -10.539063453674316
    9. '):
' → logprob: -11.164063453674316
    10. ' )' → logprob: -11.414063453674316

Token 57: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -9.627176768844947e-05
    2. ' ' → logprob: -9.250096321105957
    3. '1' → logprob: -17.00009536743164
    4. '۲' → logprob: -17.37509536743164
    5. '22' → logprob: -17.87509536743164
    6. ')' → logprob: -18.00009536743164
    7. '```' → logprob: -18.12509536743164
    8. '٢' → logprob: -18.37509536743164
    9. '２' → logprob: -18.75009536743164
    10. '   ' → logprob: -18.75009536743164

Token 58: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.008004295639693737
    2. ' ):' → logprob: -5.508004188537598
    3. ')' → logprob: -6.133004188537598
    4. '+' → logprob: -6.383004188537598
    5. '):
' → logprob: -10.758004188537598
    6. ' +' → logprob: -11.008004188537598
    7. ' )' → logprob: -12.258004188537598
    8. ',' → logprob: -12.883004188537598
    9. ':' → logprob: -13.133004188537598
    10. ' ' → logprob: -13.133004188537598

Token 59: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11004165560007095
    2. ' if' → logprob: -3.110041618347168
    3. ' ' → logprob: -3.985041618347168
    4. '<|end|>' → logprob: -3.985041618347168
    5. ':' → logprob: -4.610041618347168
    6. '    ' → logprob: -5.110041618347168
    7. 'if' → logprob: -5.860041618347168
    8. '       ' → logprob: -6.985041618347168
    9. ' :' → logprob: -7.110041618347168
    10. '  ' → logprob: -7.360041618347168

Token 60: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.25729072093963623
    2. '   ' → logprob: -2.007290840148926
    3. ' if' → logprob: -2.382290840148926
    4. ' ' → logprob: -9.507290840148926
    5. '    ' → logprob: -9.632290840148926
    6. '  ' → logprob: -11.507290840148926
    7. '	if' → logprob: -12.132290840148926
    8. '<|end|>' → logprob: -12.757290840148926
    9. '```' → logprob: -12.882290840148926
    10. '       ' → logprob: -13.257290840148926

Token 61: ' L' (ID: 451)
  Prédit: ' L'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' L' → logprob: -0.055475544184446335
    2. 'L' → logprob: -2.9304754734039307
    3. ' data' → logprob: -7.80547571182251
    4. ' ' → logprob: -8.930475234985352
    5. 'data' → logprob: -10.680475234985352
    6. '   ' → logprob: -11.055475234985352
    7. '    ' → logprob: -11.930475234985352
    8. '  ' → logprob: -12.805475234985352
    9. ' ' → logprob: -12.930475234985352
    10. '	L' → logprob: -13.805475234985352

Token 62: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.0005564896273426712
    2. '[' → logprob: -7.500556468963623
    3. ' [' → logprob: -13.125556945800781
    4. '[I' → logprob: -14.375556945800781
    5. '[n' → logprob: -14.875556945800781
    6. '```' → logprob: -16.00055694580078
    7. '[L' → logprob: -16.50055694580078
    8. '[a' → logprob: -16.62555694580078
    9. '[index' → logprob: -17.50055694580078
    10. '[z' → logprob: -17.62555694580078

Token 63: ']' (ID: 60)
  Prédit: '!='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '!=' → logprob: -0.4627416133880615
    2. ']' → logprob: -1.5877416133880615
    3. ']!=' → logprob: -1.8377416133880615
    4. ' !=' → logprob: -5.212741851806641
    5. '==' → logprob: -7.587741851806641
    6. ']==' → logprob: -7.587741851806641
    7. ')!=' → logprob: -8.83774185180664
    8. '()!=' → logprob: -9.46274185180664
    9. ' ]' → logprob: -9.58774185180664
    10. '!==' → logprob: -10.58774185180664

Token 64: ' !=' (ID: 1666)
  Prédit: '!='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '!=' → logprob: -0.004184298682957888
    2. ' !=' → logprob: -5.629184246063232
    3. '==' → logprob: -7.504184246063232
    4. ']!=' → logprob: -11.50418472290039
    5. '()!=' → logprob: -11.75418472290039
    6. '=' → logprob: -12.25418472290039
    7. '!==' → logprob: -12.25418472290039
    8. ')!=' → logprob: -12.75418472290039
    9. ' ==' → logprob: -13.75418472290039
    10. '!=(' → logprob: -13.75418472290039

Token 65: ' L' (ID: 451)
  Prédit: 'L'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'L' → logprob: -0.011057846248149872
    2. ' L' → logprob: -4.5110578536987305
    3. '   ' → logprob: -12.01105785369873
    4. ' ' → logprob: -12.76105785369873
    5. '	L' → logprob: -15.01105785369873
    6. '  ' → logprob: -15.26105785369873
    7. '    ' → logprob: -15.76105785369873
    8. '>L' → logprob: -16.136056900024414
    9. '<|end|>' → logprob: -16.136056900024414
    10. ')' → logprob: -17.011056900024414

Token 66: '[n' (ID: 15433)
  Prédit: '[n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[n' → logprob: -0.0012198820477351546
    2. '[-' → logprob: -7.126219749450684
    3. 'n' → logprob: -8.376219749450684
    4. '[' → logprob: -8.626219749450684
    5. ']' → logprob: -12.876219749450684
    6. '][' → logprob: -14.001219749450684
    7. '[N' → logprob: -14.501219749450684
    8. '[j' → logprob: -14.626219749450684
    9. ' [' → logprob: -15.001219749450684
    10. ' n' → logprob: -15.376219749450684

Token 67: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.01966315135359764
    2. ' -' → logprob: -4.144663333892822
    3. '-i' → logprob: -5.644663333892822
    4. '1' → logprob: -9.394662857055664
    5. ' ' → logprob: -13.894662857055664
    6. 'i' → logprob: -14.269662857055664
    7. '-(' → logprob: -14.519662857055664
    8. '```' → logprob: -15.644662857055664
    9. '   ' → logprob: -16.082162857055664
    10. ' i' → logprob: -16.394662857055664

Token 68: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.018205426633358
    2. 'i' → logprob: -4.018205642700195
    3. '(i' → logprob: -10.893205642700195
    4. ' ' → logprob: -11.768205642700195
    5. ' i' → logprob: -11.768205642700195
    6. '(' → logprob: -11.768205642700195
    7. '-' → logprob: -12.643205642700195
    8. '{i' → logprob: -12.893205642700195
    9. '-i' → logprob: -13.018205642700195
    10. '   ' → logprob: -13.518205642700195

Token 69: '-i' (ID: 18499)
  Prédit: ' -'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.7252820134162903
    2. '-' → logprob: -0.9752820134162903
    3. '-i' → logprob: -1.9752819538116455
    4. ' ' → logprob: -12.850281715393066
    5. '   ' → logprob: -14.100281715393066
    6. '-
' → logprob: -16.350282669067383
    7. 'i' → logprob: -16.725282669067383
    8. '-I' → logprob: -16.725282669067383
    9. '```' → logprob: -16.725282669067383
    10. ' i' → logprob: -17.100282669067383

Token 70: ']:
' (ID: 22152)
  Prédit: ']:'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']:' → logprob: -0.0032815716695040464
    2. ']' → logprob: -5.753281593322754
    3. '):' → logprob: -9.628281593322754
    4. ':' → logprob: -11.253281593322754
    5. ']:
' → logprob: -11.753281593322754
    6. ' ]' → logprob: -11.753281593322754
    7. ']):' → logprob: -12.128281593322754
    8. '"]:' → logprob: -13.378281593322754
    9. '']:' → logprob: -13.628281593322754
    10. ']:
' → logprob: -14.753281593322754

Token 71: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.09091305732727051
    2. ' compteur' → logprob: -3.2159130573272705
    3. 'comp' → logprob: -3.9659130573272705
    4. '   ' → logprob: -4.465912818908691
    5. ':' → logprob: -4.840912818908691
    6. '    ' → logprob: -5.590912818908691
    7. '	comp' → logprob: -6.590912818908691
    8. '      ' → logprob: -7.465912818908691
    9. 'counter' → logprob: -7.465912818908691
    10. '```' → logprob: -8.090912818908691

Token 72: ' compteur' (ID: 163344)
  Prédit: 'comp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'comp' → logprob: -0.0002537104592192918
    2. ' compteur' → logprob: -8.750253677368164
    3. '   ' → logprob: -9.500253677368164
    4. 'break' → logprob: -11.750253677368164
    5. '	comp' → logprob: -12.750253677368164
    6. '       ' → logprob: -12.750253677368164
    7. 'counter' → logprob: -13.000253677368164
    8. ' ' → logprob: -13.875253677368164
    9. 'compagn' → logprob: -14.500253677368164
    10. 'count' → logprob: -14.625253677368164

Token 73: ' =' (ID: 314)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.13107120990753174
    2. ' +=' → logprob: -2.131071090698242
    3. '+' → logprob: -5.506071090698242
    4. '=' → logprob: -9.631071090698242
    5. ' =' → logprob: -12.756071090698242
    6. '+='' → logprob: -13.506071090698242
    7. ' +' → logprob: -14.006071090698242
    8. '+="' → logprob: -14.256071090698242
    9. ']+=' → logprob: -14.381071090698242
    10. '+=(' → logprob: -15.756071090698242

Token 74: ' compteur' (ID: 163344)
  Prédit: 'comp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'comp' → logprob: -0.14618954062461853
    2. '1' → logprob: -2.3961894512176514
    3. ' compteur' → logprob: -3.1461894512176514
    4. ' ' → logprob: -6.7711896896362305
    5. '+' → logprob: -7.2711896896362305
    6. '0' → logprob: -10.52118968963623
    7. 'counter' → logprob: -11.52118968963623
    8. 'compagn' → logprob: -11.77118968963623
    9. 'count' → logprob: -11.89618968963623
    10. ' compte' → logprob: -12.27118968963623

Token 75: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.0011709370883181691
    2. ' +' → logprob: -6.751171112060547
    3. '1' → logprob: -14.501171112060547
    4. '+=' → logprob: -16.126171112060547
    5. ' plus' → logprob: -16.376171112060547
    6. 'plus' → logprob: -16.751171112060547
    7. '-' → logprob: -18.501171112060547
    8. '+
' → logprob: -18.501171112060547
    9. ' ' → logprob: -18.876171112060547
    10. '()+' → logprob: -18.876171112060547

Token 76: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.8889261304575484e-06
    2. ' ' → logprob: -12.500003814697266
    3. '<|end|>' → logprob: -16.500003814697266
    4. '   ' → logprob: -18.875003814697266
    5. '2' → logprob: -19.250003814697266
    6. '  ' → logprob: -19.375003814697266
    7. '```' → logprob: -20.500003814697266
    8. '۱' → logprob: -20.750003814697266
    9. '<|end|>' → logprob: -21.500003814697266
    10. ' ' → logprob: -21.750003814697266

Token 77: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.6240566083070007e-06
    2. ' ' → logprob: -13.375001907348633
    3. '2' → logprob: -17.250001907348633
    4. '   ' → logprob: -17.750001907348633
    5. '<|end|>' → logprob: -18.000001907348633
    6. '```' → logprob: -18.625001907348633
    7. '  ' → logprob: -18.750001907348633
    8. '0' → logprob: -19.375001907348633
    9. '۱' → logprob: -19.500001907348633
    10. '-' → logprob: -19.625001907348633

Token 78: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 79: ' j' (ID: 441)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 80: ''aj' (ID: 116735)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.11037704348564148
    2. 'ust' → logprob: -2.860377073287964
    3. 'uste' → logprob: -4.610376834869385
    4. '<|end|>' → logprob: -4.985376834869385
    5. ''' → logprob: -5.235376834869385
    6. 'u' → logprob: -5.235376834869385
    7. 'a' → logprob: -5.735376834869385
    8. 'am' → logprob: -5.985376834869385
    9. 'i' → logprob: -6.235376834869385
    10. ' continue' → logprob: -6.485376834869385

Token 81: 'oute' (ID: 3509)
  Prédit: 'oute'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'oute' → logprob: -0.0010638902895152569
    2. 'uste' → logprob: -7.501063823699951
    3. 'outer' → logprob: -8.00106430053711
    4. 'out' → logprob: -9.25106430053711
    5. 'outez' → logprob: -10.12606430053711
    6. 'ute' → logprob: -11.37606430053711
    7. 'ust' → logprob: -11.50106430053711
    8. 'ou' → logprob: -12.62606430053711
    9. 'outes' → logprob: -12.75106430053711
    10. '#' → logprob: -13.25106430053711

Token 82: ' quand' (ID: 18026)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 83: ' ça' (ID: 13590)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 84: ' va' (ID: 3423)
  Prédit: 'ne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ne' → logprob: -0.8248165249824524
    2. 'diff' → logprob: -0.8248165249824524
    3. 'n' → logprob: -3.3248164653778076
    4. 'change' → logprob: -4.074816703796387
    5. 'd' → logprob: -4.324816703796387
    6. ' ne' → logprob: -4.949816703796387
    7. 'co' → logprob: -4.949816703796387
    8. 'continue' → logprob: -5.449816703796387
    9. 's' → logprob: -5.449816703796387
    10. 'pose' → logprob: -5.574816703796387

Token 85: ' pas' (ID: 2173)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 86: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 87: '#' (ID: 2)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 88: ' bon' (ID: 4846)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.11464759707450867
    2. 'if' → logprob: -2.364647626876831
    3. ' if' → logprob: -4.489647388458252
    4. ' print' → logprob: -6.614647388458252
    5. '<|end|>' → logprob: -6.739647388458252
    6. '
' → logprob: -9.11464786529541
    7. '#' → logprob: -9.36464786529541
    8. ')' → logprob: -9.48964786529541
    9. ' ' → logprob: -9.48964786529541
    10. 'return' → logprob: -10.11464786529541

Token 89: ',' (ID: 11)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.5688945055007935
    2. 'print' → logprob: -0.9438945055007935
    3. ' if' → logprob: -3.443894386291504
    4. '<|end|>' → logprob: -4.568894386291504
    5. ' ' → logprob: -7.693894386291504
    6. ' print' → logprob: -7.818894386291504
    7. '```' → logprob: -8.443894386291504
    8. 'return' → logprob: -8.568894386291504
    9. 'comp' → logprob: -8.693894386291504
    10. '#' → logprob: -8.818894386291504

Token 90: ' voilà' (ID: 77612)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.23342527449131012
    2. ' if' → logprob: -1.733425259590149
    3. 'print' → logprob: -3.4834253787994385
    4. ' print' → logprob: -7.233425140380859
    5. 'comp' → logprob: -10.73342514038086
    6. ' ' → logprob: -11.85842514038086
    7. '```' → logprob: -11.85842514038086
    8. '#' → logprob: -11.98342514038086
    9. 'else' → logprob: -12.10842514038086
    10. '#print' → logprob: -12.10842514038086

Token 91: ' le' (ID: 505)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.45147109031677246
    2. 'print' → logprob: -2.0764710903167725
    3. ' if' → logprob: -2.3264710903167725
    4. '<|end|>' → logprob: -2.4514710903167725
    5. '
' → logprob: -3.2014710903167725
    6. ' ' → logprob: -5.076471328735352
    7. '```' → logprob: -6.701471328735352
    8. ' 
' → logprob: -7.076471328735352
    9. ')' → logprob: -7.326471328735352
    10. '  
' → logprob: -7.326471328735352

Token 92: ' résultat' (ID: 62556)
  Prédit: 'comp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'comp' → logprob: -0.022400813177227974
    2. 'print' → logprob: -3.8974008560180664
    3. 'if' → logprob: -7.022400856018066
    4. 'code' → logprob: -8.022400856018066
    5. 'result' → logprob: -8.397400856018066
    6. '"' → logprob: -8.647400856018066
    7. ' compteur' → logprob: -9.647400856018066
    8. 'rés' → logprob: -9.772400856018066
    9. 'count' → logprob: -10.022400856018066
    10. 'score' → logprob: -11.397400856018066

Token 93: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.033485010266304016
    2. 'if' → logprob: -3.658484935760498
    3. '
' → logprob: -5.533484935760498
    4. '<|end|>' → logprob: -6.033484935760498
    5. ' if' → logprob: -7.408484935760498
    6. ' print' → logprob: -9.408485412597656
    7. '\n' → logprob: -10.283485412597656
    8. '```' → logprob: -11.033485412597656
    9. ')' → logprob: -11.158485412597656
    10. '<|end|>' → logprob: -11.783485412597656

Token 94: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00778642762452364
    2. 'comp' → logprob: -5.382786273956299
    3. 'if' → logprob: -5.757786273956299
    4. 'return' → logprob: -14.632786750793457
    5. 'counter' → logprob: -14.632786750793457
    6. '```' → logprob: -14.632786750793457
    7. ' if' → logprob: -14.757786750793457
    8. '(comp' → logprob: -14.757786750793457
    9. ' print' → logprob: -15.257786750793457
    10. ')' → logprob: -15.507786750793457

Token 95: '(comp' (ID: 60272)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10190726816654205
    2. '(comp' → logprob: -2.351907253265381
    3. '()' → logprob: -7.351907253265381
    4. '("' → logprob: -7.726907253265381
    5. '('' → logprob: -7.726907253265381
    6. '(cont' → logprob: -9.976907730102539
    7. '("("' → logprob: -9.976907730102539
    8. '("")' → logprob: -10.601907730102539
    9. '((' → logprob: -10.976907730102539
    10. ' (' → logprob: -11.601907730102539

Token 96: 'teur' (ID: 45262)
  Prédit: 'teur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'teur' → logprob: -4.1080467781284824e-05
    2. 'te' → logprob: -10.250041007995605
    3. 'teurs' → logprob: -12.625041007995605
    4. 'uteur' → logprob: -13.875041007995605
    5. 'ateur' → logprob: -14.250041007995605
    6. 'ter' → logprob: -15.000041007995605
    7. 'eur' → logprob: -15.125041007995605
    8. 't' → logprob: -16.125041961669922
    9. 'reur' → logprob: -17.000041961669922
    10. 'iteur' → logprob: -18.125041961669922

Token 97: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.320199877838604e-07
    2. ' )' → logprob: -15.5
    3. '))' → logprob: -16.25
    4. ')`' → logprob: -18.125
    5. ')}' → logprob: -19.25
    6. ')
' → logprob: -19.5
    7. ')#' → logprob: -20.25
    8. '')' → logprob: -20.25
    9. ')**' → logprob: -20.875
    10. '）' → logprob: -21.25


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 95
Tokens correctement prédits (1ère position, stricte): 31
Tokens correctement prédits (1ère position, avec adaptation): 33
Tokens correctement prédits (top 10): 57
Précision stricte (1ère position): 32.63%
Précision adaptée (1ère position): 34.74%
Précision (top 10): 60.00%
================================================================================
