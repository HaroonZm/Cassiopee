================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:29:50
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def read_int():
    return int(input())

def get_height():
    return read_int()

def get_width():
    return read_int()

def get_n():
    return read_int()

def get_max_value(a, b):
    return max(a, b)

def compute_division(dividend, divisor):
    return dividend / divisor

def apply_ceiling(value):
    import math
    return math.ceil(value)

def print_result(result):
    print(result)

def process():
    h = get_height()
    w = get_width()
    n = get_n()
    m = get_max_value(h, w)
    div = compute_division(n, m)
    res = apply_ceiling(div)
    print_result(res)

process()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' read' (ID: 1729)
  → Token d'amorce (pas de prédiction)

Token 2: '_int' (ID: 12285)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.020488280802965164
    2. '_' → logprob: -4.020488262176514
    3. '```' → logprob: -6.895488262176514
    4. ' (' → logprob: -7.895488262176514
    5. '():' → logprob: -7.895488262176514
    6. '(_' → logprob: -9.145488739013672
    7. '(_:' → logprob: -9.520488739013672
    8. ':' → logprob: -9.520488739013672
    9. '(a' → logprob: -9.770488739013672
    10. 's' → logprob: -10.020488739013672

Token 4: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.3605383634567261
    2. ':' → logprob: -2.1105384826660156
    3. '   ' → logprob: -2.9855384826660156
    4. '\n' → logprob: -3.6105384826660156
    5. '``' → logprob: -3.7355384826660156
    6. '():' → logprob: -4.235538482666016
    7. ':
' → logprob: -4.360538482666016
    8. '    
' → logprob: -4.360538482666016
    9. '\' → logprob: -4.360538482666016
    10. '(' → logprob: -4.985538482666016

Token 5: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.2491570711135864
    2. 'return' (adapté à ' return') → logprob: -1.3741570711135864
    3. '```' → logprob: -1.9991570711135864
    4. 'i' → logprob: -2.124156951904297
    5. 'x' → logprob: -2.124156951904297
    6. 'n' → logprob: -3.124156951904297
    7. 'r' → logprob: -4.249156951904297
    8. '`' → logprob: -4.874156951904297
    9. ' return' → logprob: -5.749156951904297
    10. 'v' → logprob: -5.749156951904297

Token 6: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.05038606375455856
    2. ' ' → logprob: -3.6753859519958496
    3. 'int' → logprob: -3.8003859519958496
    4. '0' → logprob: -7.67538595199585
    5. ' input' → logprob: -8.050386428833008
    6. 'input' → logprob: -8.800386428833008
    7. '  ' → logprob: -8.925386428833008
    8. '<int' → logprob: -9.300386428833008
    9. '(int' → logprob: -9.550386428833008
    10. ' ' → logprob: -9.800386428833008

Token 7: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0008386960835196078
    2. '('' → logprob: -8.000838279724121
    3. '```' → logprob: -8.875838279724121
    4. '("("' → logprob: -9.250838279724121
    5. ''' → logprob: -9.625838279724121
    6. '<|end|>' → logprob: -9.875838279724121
    7. ' (' → logprob: -10.500838279724121
    8. '40' → logprob: -10.875838279724121
    9. '()' → logprob: -10.875838279724121
    10. '(
' → logprob: -11.500838279724121

Token 8: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.11515089124441147
    2. '(' → logprob: -2.8651509284973145
    3. '()' → logprob: -3.1151509284973145
    4. ')' → logprob: -5.7401509284973145
    5. '()))' → logprob: -5.7401509284973145
    6. ' ())' → logprob: -7.8651509284973145
    7. '(""))' → logprob: -8.490150451660156
    8. '('' → logprob: -9.615150451660156
    9. '(()' → logprob: -9.615150451660156
    10. '`()' → logprob: -9.615150451660156

Token 9: 'def' (ID: 1314)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.3066048622131348
    2. '
' → logprob: -1.5566048622131348
    3. 'def' → logprob: -1.5566048622131348
    4. '' → logprob: -2.8066048622131348
    5. '(' → logprob: -3.0566048622131348
    6. '```' → logprob: -3.0566048622131348
    7. '#' → logprob: -3.4316048622131348
    8. '(
' → logprob: -3.8066048622131348
    9. '()' → logprob: -4.556604862213135
    10. '

' → logprob: -4.556604862213135

Token 10: ' get' (ID: 717)
  Prédit: ' read'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' read' → logprob: -1.0236575603485107
    2. ' write' → logprob: -1.2736575603485107
    3. ' calculate' → logprob: -1.2736575603485107
    4. ' add' → logprob: -4.14865779876709
    5. ' sum' → logprob: -4.39865779876709
    6. ' process' → logprob: -4.52365779876709
    7. ' compute' → logprob: -4.52365779876709
    8. ' space' → logprob: -4.77365779876709
    9. '_' → logprob: -4.77365779876709
    10. ' main' → logprob: -5.27365779876709

Token 11: '_height' (ID: 21576)
  Prédit: '_sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.9959707260131836
    2. '_max' → logprob: -1.2459707260131836
    3. '_' → logprob: -1.4959707260131836
    4. '_factor' → logprob: -2.9959707260131836
    5. '_value' → logprob: -4.995970726013184
    6. '_average' → logprob: -4.995970726013184
    7. '_string' → logprob: -5.120970726013184
    8. '_input' → logprob: -5.120970726013184
    9. '_data' → logprob: -5.245970726013184
    10. '_square' → logprob: -5.370970726013184

Token 12: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.39013707637786865
    2. '_' → logprob: -1.1401370763778687
    3. '()' → logprob: -7.140137195587158
    4. ')' → logprob: -7.640137195587158
    5. '(_)' → logprob: -8.01513671875
    6. '```' → logprob: -8.39013671875
    7. '_height' → logprob: -8.64013671875
    8. '_(' → logprob: -9.39013671875
    9. '_parent' → logprob: -9.39013671875
    10. '   ' → logprob: -9.51513671875

Token 13: '   ' (ID: 271)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.6410645842552185
    2. '()' → logprob: -1.2660646438598633
    3. '   ' → logprob: -1.8910646438598633
    4. '(' → logprob: -3.7660646438598633
    5. ' return' → logprob: -5.516064643859863
    6. ':' → logprob: -5.641064643859863
    7. ' ()' → logprob: -5.766064643859863
    8. ' ():' → logprob: -6.266064643859863
    9. '    ' → logprob: -6.891064643859863
    10. 'return' → logprob: -7.016064643859863

Token 14: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.4238038957118988
    2. '   ' → logprob: -1.5488039255142212
    3. 'return' (adapté à ' return') → logprob: -2.4238038063049316
    4. 'height' → logprob: -4.048803806304932
    5. 'int' → logprob: -4.423803806304932
    6. ' height' → logprob: -4.923803806304932
    7. ' int' → logprob: -5.048803806304932
    8. '    ' → logprob: -7.923803806304932
    9. 'input' → logprob: -8.04880428314209
    10. ' ' → logprob: -8.67380428314209

Token 15: ' read' (ID: 1729)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.45268964767456055
    2. ' read' → logprob: -1.0776896476745605
    3. ' ' → logprob: -3.8276896476745605
    4. 'read' → logprob: -6.7026896476745605
    5. 'int' → logprob: -7.7026896476745605
    6. '  ' → logprob: -8.577690124511719
    7. ' ' → logprob: -11.452690124511719
    8. ' space' → logprob: -11.702690124511719
    9. ' input' → logprob: -11.952690124511719
    10. ' []' → logprob: -11.952690124511719

Token 16: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.004310241900384426
    2. '_' → logprob: -5.504310131072998
    3. 'int' → logprob: -10.379310607910156
    4. '(' → logprob: -10.379310607910156
    5. '(_' → logprob: -10.379310607910156
    6. '_in' → logprob: -10.504310607910156
    7. '_integer' → logprob: -10.629310607910156
    8. '_height' → logprob: -11.629310607910156
    9. '_uint' → logprob: -11.629310607910156
    10. '_line' → logprob: -11.629310607910156

Token 17: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -4.68022444692906e-05
    2. '(' → logprob: -10.500046730041504
    3. '`()' → logprob: -11.625046730041504
    4. ' ()' → logprob: -12.125046730041504
    5. '()`' → logprob: -14.250046730041504
    6. '()
' → logprob: -14.250046730041504
    7. '())' → logprob: -14.625046730041504
    8. '()<' → logprob: -14.750046730041504
    9. '()(' → logprob: -15.125046730041504
    10. '```' → logprob: -15.375046730041504

Token 18: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0010161371901631355
    2. '<|end|>' → logprob: -7.626016139984131
    3. 'height' → logprob: -8.626015663146973
    4. '```' → logprob: -9.501015663146973
    5. '\' → logprob: -9.751015663146973
    6. '

' → logprob: -10.126015663146973
    7. '
' → logprob: -10.376015663146973
    8. 'd' → logprob: -10.376015663146973
    9. '<|end|>' → logprob: -10.501015663146973
    10. '#' → logprob: -11.126015663146973

Token 19: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.0016968417912721634
    2. 'get' → logprob: -6.501697063446045
    3. ' calculate' → logprob: -9.501696586608887
    4. '_get' → logprob: -9.876696586608887
    5. ' def' → logprob: -10.251696586608887
    6. ' write' → logprob: -12.001696586608887
    7. '_' → logprob: -12.126696586608887
    8. ' main' → logprob: -12.626696586608887
    9. ' set' → logprob: -12.751696586608887
    10. ' _' → logprob: -12.751696586608887

Token 20: '_width' (ID: 17595)
  Prédit: '_width'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_width' → logprob: -0.016899747774004936
    2. '_area' → logprob: -5.016899585723877
    3. '_' → logprob: -6.391899585723877
    4. '_depth' → logprob: -6.391899585723877
    5. '_weight' → logprob: -6.391899585723877
    6. '_base' → logprob: -6.516899585723877
    7. '_length' → logprob: -7.016899585723877
    8. '_height' → logprob: -7.266899585723877
    9. '_name' → logprob: -8.141900062561035
    10. '_age' → logprob: -8.641900062561035

Token 21: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -2.4987974029500037e-05
    2. ' ():' → logprob: -10.750024795532227
    3. '()' → logprob: -12.875024795532227
    4. '_' → logprob: -15.000024795532227
    5. '():
' → logprob: -16.125024795532227
    6. '()>' → logprob: -16.625024795532227
    7. ':' → logprob: -16.750024795532227
    8. '(' → logprob: -16.875024795532227
    9. '):' → logprob: -17.500024795532227
    10. '()">' → logprob: -17.500024795532227

Token 22: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00018208740220870823
    2. ' return' → logprob: -8.750182151794434
    3. 'return' → logprob: -11.125182151794434
    4. '    ' → logprob: -11.875182151794434
    5. '   ' → logprob: -14.000182151794434
    6. '```' → logprob: -15.125182151794434
    7. '    
' → logprob: -15.375182151794434
    8. ' ' → logprob: -15.750182151794434
    9. '       ' → logprob: -15.875182151794434
    10. '  ' → logprob: -16.250181198120117

Token 23: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3283727765083313
    2. ' return' → logprob: -1.3283727169036865
    3. 'return' (adapté à ' return') → logprob: -4.203372955322266
    4. '```' → logprob: -9.953372955322266
    5. '   ' → logprob: -13.203372955322266
    6. '    ' → logprob: -14.078372955322266
    7. ' ' → logprob: -14.328372955322266
    8. '	return' → logprob: -14.578372955322266
    9. '{return' → logprob: -15.828372955322266
    10. '  ' → logprob: -15.828372955322266

Token 24: ' read' (ID: 1729)
  Prédit: ' read'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.012330337427556515
    2. 'read' → logprob: -4.512330532073975
    3. ' get' → logprob: -7.262330532073975
    4. ' int' → logprob: -7.637330532073975
    5. 'int' → logprob: -9.637330055236816
    6. ' ' → logprob: -10.887330055236816
    7. 'get' → logprob: -11.762330055236816
    8. '  ' → logprob: -12.512330055236816
    9. '(read' → logprob: -13.762330055236816
    10. '	read' → logprob: -14.387330055236816

Token 25: '_int' (ID: 12285)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.049036044627428055
    2. '_int' → logprob: -3.0490360260009766
    3. ' _' → logprob: -9.424036026000977
    4. '_in' → logprob: -9.674036026000977
    5. 'int' → logprob: -9.674036026000977
    6. '_token' → logprob: -9.924036026000977
    7. '```' → logprob: -10.549036026000977
    8. '_uint' → logprob: -11.049036026000977
    9. '_i' → logprob: -11.174036026000977
    10. '_input' → logprob: -11.299036026000977

Token 26: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.007627569139003754
    2. '(' → logprob: -4.882627487182617
    3. '()
' → logprob: -11.632627487182617
    4. '`()' → logprob: -12.882627487182617
    5. '()

' → logprob: -13.007627487182617
    6. '()(' → logprob: -13.382627487182617
    7. '()`' → logprob: -13.507627487182617
    8. ' ()' → logprob: -13.507627487182617
    9. '();' → logprob: -14.507627487182617
    10. '(

' → logprob: -14.757627487182617

Token 27: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.011963486671447754
    2. 'w' → logprob: -4.886963367462158
    3. 'n' → logprob: -6.136963367462158
    4. '#' → logprob: -7.386963367462158
    5. 'height' → logprob: -8.011963844299316
    6. 'width' → logprob: -8.136963844299316
    7. 'h' → logprob: -8.511963844299316
    8. 'd' → logprob: -9.011963844299316
    9. '\' → logprob: -9.261963844299316
    10. '```' → logprob: -9.261963844299316

Token 28: ' get' (ID: 717)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.18019630014896393
    2. ' get' → logprob: -2.5551962852478027
    3. ' area' → logprob: -3.6801962852478027
    4. ' main' → logprob: -3.6801962852478027
    5. ' solve' → logprob: -4.305196285247803
    6. ' is' → logprob: -5.305196285247803
    7. ' compute' → logprob: -5.555196285247803
    8. 'calculate' → logprob: -5.680196285247803
    9. ' build' → logprob: -6.180196285247803
    10. ' find' → logprob: -6.430196285247803

Token 29: '_n' (ID: 2170)
  Prédit: '_area'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_area' → logprob: -0.3222557306289673
    2. '_length' → logprob: -1.9472557306289673
    3. '_color' → logprob: -3.9472556114196777
    4. '_depth' → logprob: -4.072255611419678
    5. '_' → logprob: -4.447255611419678
    6. '_height' → logprob: -4.572255611419678
    7. '_m' → logprob: -4.697255611419678
    8. '_matrix' → logprob: -4.947255611419678
    9. '_map' → logprob: -5.072255611419678
    10. '_rectangle' → logprob: -5.072255611419678

Token 30: '():
' (ID: 8595)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.5793317556381226
    2. 'umber' → logprob: -1.8293317556381226
    3. 'um' → logprob: -2.329331874847412
    4. 'ext' → logprob: -2.704331874847412
    5. '_ext' → logprob: -4.329331874847412
    6. '_rows' → logprob: -4.329331874847412
    7. '_o' → logprob: -4.329331874847412
    8. '_m' → logprob: -4.579331874847412
    9. '_points' → logprob: -4.829331874847412
    10. '_b' → logprob: -5.329331874847412

Token 31: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03489312902092934
    2. ' return' → logprob: -3.909893035888672
    3. 'return' → logprob: -5.409893035888672
    4. 'read' → logprob: -5.534893035888672
    5. ' read' → logprob: -5.659893035888672
    6. ' ' → logprob: -6.659893035888672
    7. '  ' → logprob: -7.784893035888672
    8. '    ' → logprob: -7.909893035888672
    9. '()' → logprob: -8.784893035888672
    10. ' ()' → logprob: -10.159893035888672

Token 32: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.0770215168595314
    2. ' return' → logprob: -3.077021598815918
    3. '   ' → logprob: -3.577021598815918
    4. 'read' → logprob: -9.702021598815918
    5. ' ' → logprob: -11.452021598815918
    6. '  ' → logprob: -13.452021598815918
    7. ' read' → logprob: -14.077021598815918
    8. '```' → logprob: -14.952021598815918
    9. '	return' → logprob: -15.827021598815918
    10. '    ' → logprob: -16.8270206451416

Token 33: ' read' (ID: 1729)
  Prédit: ' read'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.050995834171772
    2. 'read' → logprob: -3.3009958267211914
    3. ' int' → logprob: -4.425995826721191
    4. 'int' → logprob: -7.050995826721191
    5. ' ' → logprob: -10.300995826721191
    6. '  ' → logprob: -11.925995826721191
    7. '(read' → logprob: -14.300995826721191
    8. '	read' → logprob: -14.800995826721191
    9. ' get' → logprob: -14.925995826721191
    10. ' ' → logprob: -15.675995826721191

Token 34: '_int' (ID: 12285)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.14396928250789642
    2. '_int' → logprob: -2.0189692974090576
    3. '_i' → logprob: -7.5189690589904785
    4. '_in' → logprob: -8.643969535827637
    5. 'int' → logprob: -9.018969535827637
    6. '(' → logprob: -9.268969535827637
    7. ' _' → logprob: -9.893969535827637
    8. '_n' → logprob: -10.268969535827637
    9. '_token' → logprob: -10.518969535827637
    10. '```' → logprob: -10.518969535827637

Token 35: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.026514507830142975
    2. '(' → logprob: -3.6515145301818848
    3. '_' → logprob: -8.526514053344727
    4. '_parent' → logprob: -12.401514053344727
    5. '()
' → logprob: -13.026514053344727
    6. ')' → logprob: -13.151514053344727
    7. '()

' → logprob: -13.401514053344727
    8. '(
' → logprob: -14.026514053344727
    9. '(

' → logprob: -14.401514053344727
    10. '```' → logprob: -14.651514053344727

Token 36: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00817481242120266
    2. 'd' → logprob: -5.008174896240234
    3. 'n' → logprob: -7.258174896240234
    4. '#' → logprob: -8.133174896240234
    5. 'class' → logprob: -8.508174896240234
    6. '```' → logprob: -9.883174896240234
    7. 'w' → logprob: -10.383174896240234
    8. 'h' → logprob: -10.383174896240234
    9. 'data' → logprob: -10.758174896240234
    10. 'height' → logprob: -11.008174896240234

Token 37: ' get' (ID: 717)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.24356351792812347
    2. ' solve' → logprob: -1.6185635328292847
    3. ' calculate' → logprob: -5.368563652038574
    4. ' get' → logprob: -5.493563652038574
    5. ' build' → logprob: -6.118563652038574
    6. ' process' → logprob: -6.243563652038574
    7. ' compute' → logprob: -6.993563652038574
    8. ' create' → logprob: -7.493563652038574
    9. ' find' → logprob: -7.618563652038574
    10. ' solution' → logprob: -7.868563652038574

Token 38: '_max' (ID: 13731)
  Prédit: '_m'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_m' → logprob: -2.404697895050049
    2. '_points' → logprob: -2.779697895050049
    3. '_color' → logprob: -2.779697895050049
    4. '_t' → logprob: -2.904697895050049
    5. '_height' → logprob: -3.029697895050049
    6. '_k' → logprob: -3.154697895050049
    7. '_s' → logprob: -3.279697895050049
    8. '_' → logprob: -3.404697895050049
    9. '_h' → logprob: -3.404697895050049
    10. '_n' → logprob: -3.529697895050049

Token 39: '_value' (ID: 6734)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -1.2827670574188232
    2. '_value' → logprob: -1.4077670574188232
    3. '_height' → logprob: -1.5327670574188232
    4. '_length' → logprob: -2.0327670574188232
    5. '_width' → logprob: -2.4077670574188232
    6. '_area' → logprob: -4.532767295837402
    7. '_depth' → logprob: -4.907767295837402
    8. '_size' → logprob: -5.282767295837402
    9. '_val' → logprob: -5.657767295837402
    10. '_count' → logprob: -6.657767295837402

Token 40: '(a' (ID: 6271)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0013690461637452245
    2. '()' → logprob: -7.001368999481201
    3. '(' → logprob: -7.751368999481201
    4. '_' → logprob: -12.25136947631836
    5. ' ():' → logprob: -12.25136947631836
    6. '_parent' → logprob: -12.50136947631836
    7. '():
' → logprob: -13.12636947631836
    8. '()(' → logprob: -13.37636947631836
    9. '()>' → logprob: -13.50136947631836
    10. ':' → logprob: -13.75136947631836

Token 41: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02918657846748829
    2. '):' → logprob: -3.779186487197876
    3. '_' → logprob: -6.654186725616455
    4. ',' → logprob: -6.904186725616455
    5. ')_' → logprob: -6.904186725616455
    6. 'rray' → logprob: -7.904186725616455
    7. 'l' → logprob: -8.029186248779297
    8. '_)' → logprob: -8.279186248779297
    9. 'r' → logprob: -8.529186248779297
    10. '_value' → logprob: -8.654186248779297

Token 42: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.5231300592422485
    2. ' b' → logprob: -0.8981300592422485
    3. ' ' → logprob: -13.148130416870117
    4. ')b' → logprob: -13.523130416870117
    5. ' )' → logprob: -13.648130416870117
    6. ')' → logprob: -13.648130416870117
    7. '<|end|>' → logprob: -15.023130416870117
    8. ' ' → logprob: -15.398130416870117
    9. '	b' → logprob: -16.148130416870117
    10. '>b' → logprob: -16.648130416870117

Token 43: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0019569406285881996
    2. ')' → logprob: -6.251956939697266
    3. ' ):' → logprob: -11.876956939697266
    4. '):
' → logprob: -12.001956939697266
    5. ':' → logprob: -12.376956939697266
    6. ',' → logprob: -12.501956939697266
    7. '_' → logprob: -13.376956939697266
    8. 'a' → logprob: -13.501956939697266
    9. '   ' → logprob: -14.501956939697266
    10. ''):' → logprob: -14.626956939697266

Token 44: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.3524220287799835
    2. '   ' → logprob: -1.7274219989776611
    3. ' :' → logprob: -2.352421998977661
    4. '):' → logprob: -5.22742223739624
    5. ' ' → logprob: -5.35242223739624
    6. ':return' → logprob: -5.60242223739624
    7. ' return' → logprob: -6.22742223739624
    8. ':
' → logprob: -6.35242223739624
    9. '(' → logprob: -6.72742223739624
    10. ')' → logprob: -6.97742223739624

Token 45: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009850762784481049
    2. ' return' → logprob: -4.884850978851318
    3. ' if' → logprob: -6.509850978851318
    4. 'return' (adapté à ' return') → logprob: -8.38485050201416
    5. '    ' → logprob: -8.50985050201416
    6. ' ' → logprob: -9.25985050201416
    7. ' max' → logprob: -9.75985050201416
    8. '    
' → logprob: -10.25985050201416
    9. ' 
' → logprob: -10.25985050201416
    10. ':' → logprob: -11.00985050201416

Token 46: ' max' (ID: 2999)
  Prédit: ' max'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' max' → logprob: -0.1337950974702835
    2. ' a' → logprob: -2.1337950229644775
    3. 'a' → logprob: -5.383795261383057
    4. 'max' → logprob: -6.133795261383057
    5. ' ' → logprob: -9.758794784545898
    6. '   ' → logprob: -10.883794784545898
    7. ' ' → logprob: -13.383794784545898
    8. '(max' → logprob: -13.383794784545898
    9. ' min' → logprob: -13.883794784545898
    10. ' maximum' → logprob: -14.508794784545898

Token 47: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.02976299449801445
    2. '(a' → logprob: -3.5297629833221436
    3. ' (' → logprob: -12.654763221740723
    4. '((' → logprob: -13.029763221740723
    5. '()' → logprob: -13.779763221740723
    6. '(ab' → logprob: -13.779763221740723
    7. '(ai' → logprob: -14.154763221740723
    8. '('' → logprob: -14.154763221740723
    9. '(
' → logprob: -14.529763221740723
    10. '(max' → logprob: -14.654763221740723

Token 48: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.002237566513940692
    2. ',b' → logprob: -6.627237796783447
    3. ' ,' → logprob: -7.002237796783447
    4. 'b' → logprob: -14.252237319946289
    5. ',
' → logprob: -15.502237319946289
    6. ' b' → logprob: -15.627237319946289
    7. ' ' → logprob: -15.627237319946289
    8. ')' → logprob: -15.752237319946289
    9. ',

' → logprob: -17.87723731994629
    10. 'a' → logprob: -18.25223731994629

Token 49: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.3132641315460205
    2. 'b' → logprob: -1.3132641315460205
    3. ')b' → logprob: -13.938263893127441
    4. ' ' → logprob: -14.063263893127441
    5. ')' → logprob: -14.688263893127441
    6. ' )' → logprob: -15.813263893127441
    7. ' ' → logprob: -16.063264846801758
    8. '	b' → logprob: -17.313264846801758
    9. '<|end|>' → logprob: -17.563264846801758
    10. ',' → logprob: -17.563264846801758

Token 50: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.320199877838604e-07
    2. ')
' → logprob: -15.625
    3. '))' → logprob: -15.75
    4. ' )' → logprob: -17.125
    5. '())' → logprob: -18.5
    6. '()' → logprob: -18.625
    7. ')))' → logprob: -19.125
    8. ')return' → logprob: -19.375
    9. ')

' → logprob: -20.0
    10. '}' → logprob: -20.125

Token 51: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.04753734543919563
    2. '
' → logprob: -3.422537326812744
    3. '

' → logprob: -5.047537326812744
    4. '<|end|>' → logprob: -5.297537326812744
    5. '#' → logprob: -7.172537326812744
    6. '(' → logprob: -7.922537326812744
    7. '\n' → logprob: -8.047537803649902
    8. '```' → logprob: -8.797537803649902
    9. '\' → logprob: -8.922537803649902
    10. ' def' → logprob: -8.922537803649902

Token 52: ' compute' (ID: 23864)
  Prédit: ' max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' max' → logprob: -0.8525383472442627
    2. ' get' → logprob: -1.4775383472442627
    3. ' main' → logprob: -1.4775383472442627
    4. ' find' → logprob: -2.9775383472442627
    5. ' calculate' → logprob: -3.7275383472442627
    6. 'max' → logprob: -4.227538108825684
    7. ' compute' → logprob: -4.852538108825684
    8. ' process' → logprob: -5.602538108825684
    9. ' solve' → logprob: -5.977538108825684
    10. 'get' → logprob: -6.352538108825684

Token 53: '_div' (ID: 36926)
  Prédit: '_max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_max' → logprob: -0.19193117320537567
    2. '_sum' → logprob: -2.3169312477111816
    3. '_area' → logprob: -3.3169312477111816
    4. '_' → logprob: -3.9419312477111816
    5. '_value' → logprob: -5.066931247711182
    6. '(' → logprob: -5.941931247711182
    7. '_score' → logprob: -6.191931247711182
    8. '_height' → logprob: -6.191931247711182
    9. '_total' → logprob: -6.316931247711182
    10. '_rectangle' → logprob: -7.566931247711182

Token 54: 'ision' (ID: 3625)
  Prédit: 'ision'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ision' → logprob: -0.615532398223877
    2. 'ide' → logprob: -0.865532398223877
    3. 'mod' → logprob: -3.990532398223877
    4. 'isor' → logprob: -5.115532398223877
    5. '_' → logprob: -5.365532398223877
    6. '_mod' → logprob: -5.490532398223877
    7. 'is' → logprob: -6.365532398223877
    8. 'ider' → logprob: -6.615532398223877
    9. 'isible' → logprob: -6.990532398223877
    10. '```' → logprob: -8.240531921386719

Token 55: '(div' (ID: 73108)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.000931825372390449
    2. '(a' → logprob: -7.625931739807129
    3. '_' → logprob: -8.250931739807129
    4. ' (' → logprob: -10.000931739807129
    5. '()' → logprob: -10.875931739807129
    6. 'def' → logprob: -10.875931739807129
    7. '(n' → logprob: -10.875931739807129
    8. '(x' → logprob: -11.000931739807129
    9. '("("' → logprob: -11.875931739807129
    10. '(value' → logprob: -12.000931739807129

Token 56: 'idend' (ID: 80275)
  Prédit: 'ision'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ision' → logprob: -0.0022879987955093384
    2. 'isor' → logprob: -6.752287864685059
    3. 'ide' → logprob: -7.877287864685059
    4. 'idend' → logprob: -8.377287864685059
    5. 'ider' → logprob: -8.502287864685059
    6. 'isions' → logprob: -9.502287864685059
    7. 's' → logprob: -10.002287864685059
    8. ')' → logprob: -10.377287864685059
    9. '_' → logprob: -10.877287864685059
    10. 'ison' → logprob: -11.002287864685059

Token 57: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.9385402993066236e-05
    2. ' ,' → logprob: -11.250019073486328
    3. '):' → logprob: -12.375019073486328
    4. '_,' → logprob: -13.625019073486328
    5. ',
' → logprob: -15.000019073486328
    6. ')' → logprob: -15.875019073486328
    7. 's' → logprob: -16.000019073486328
    8. ':' → logprob: -16.500019073486328
    9. '_' → logprob: -17.000019073486328
    10. ' ' → logprob: -17.250019073486328

Token 58: ' divisor' (ID: 100482)
  Prédit: ' divisor'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' divisor' → logprob: -0.0790863037109375
    2. 'div' → logprob: -2.5790863037109375
    3. ' divider' → logprob: -9.579086303710938
    4. 'divider' → logprob: -10.079086303710938
    5. 'den' → logprob: -10.704086303710938
    6. ' ' → logprob: -10.829086303710938
    7. ' dividend' → logprob: -11.079086303710938
    8. ' denominator' → logprob: -11.579086303710938
    9. ' divis' → logprob: -12.454086303710938
    10. ' div' → logprob: -12.704086303710938

Token 59: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0001628956088097766
    2. ')' → logprob: -9.000163078308105
    3. ':' → logprob: -10.500163078308105
    4. '):
' → logprob: -12.375163078308105
    5. ' ):' → logprob: -12.625163078308105
    6. ',' → logprob: -13.250163078308105
    7. '   ' → logprob: -13.375163078308105
    8. '=' → logprob: -14.875163078308105
    9. '_' → logprob: -15.625163078308105
    10. '():' → logprob: -15.750163078308105

Token 60: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12953464686870575
    2. ':' → logprob: -2.1295347213745117
    3. ':return' → logprob: -7.129534721374512
    4. ' return' → logprob: -7.629534721374512
    5. ' :' → logprob: -8.004534721374512
    6. ':
' → logprob: -8.129534721374512
    7. 'return' → logprob: -8.379534721374512
    8. '):' → logprob: -8.629534721374512
    9. ' ' → logprob: -9.504534721374512
    10. '    ' → logprob: -9.629534721374512

Token 61: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.01838918961584568
    2. '   ' → logprob: -4.7683892250061035
    3. 'return' (adapté à ' return') → logprob: -4.8933892250061035
    4. ' if' → logprob: -6.6433892250061035
    5. '    ' → logprob: -7.2683892250061035
    6. ' dividend' → logprob: -9.518388748168945
    7. ' ' → logprob: -10.268388748168945
    8. '    
' → logprob: -10.518388748168945
    9. ' 
' → logprob: -10.893388748168945
    10. 'div' → logprob: -11.768388748168945

Token 62: ' dividend' (ID: 53956)
  Prédit: ' dividend'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' dividend' → logprob: -0.3873084783554077
    2. 'div' → logprob: -1.1373084783554077
    3. ' div' → logprob: -8.262308120727539
    4. '	div' → logprob: -10.262308120727539
    5. ' dividends' → logprob: -10.387308120727539
    6. ' divid' → logprob: -10.512308120727539
    7. '(div' → logprob: -10.762308120727539
    8. ' ' → logprob: -11.387308120727539
    9. ' ' → logprob: -11.387308120727539
    10. ' division' → logprob: -12.012308120727539

Token 63: ' /' (ID: 820)
  Prédit: ' /'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' /' → logprob: -0.1506357491016388
    2. '/' → logprob: -2.0256357192993164
    3. ' ' → logprob: -4.900635719299316
    4. ' //' → logprob: -9.525635719299316
    5. ' ' → logprob: -9.525635719299316
    6. 'div' → logprob: -9.775635719299316
    7. ' /
' → logprob: -9.900635719299316
    8. ''' → logprob: -10.025635719299316
    9. '<|end|>' → logprob: -10.275635719299316
    10. '/div' → logprob: -10.525635719299316

Token 64: ' divisor' (ID: 100482)
  Prédit: 'div'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'div' → logprob: -0.0009128939709626138
    2. ' divisor' → logprob: -7.000912666320801
    3. '(div' → logprob: -14.7509126663208
    4. 'dis' → logprob: -15.2509126663208
    5. '	div' → logprob: -15.5009126663208
    6. ' ' → logprob: -16.000913619995117
    7. '<div' → logprob: -16.625913619995117
    8. ' div' → logprob: -16.625913619995117
    9. 'def' → logprob: -16.750913619995117
    10. 'divider' → logprob: -16.875913619995117

Token 65: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.3249305486679077
    2. '
' → logprob: -1.9499305486679077
    3. '

' → logprob: -2.1999306678771973
    4. '<|end|>' → logprob: -4.074930667877197
    5. '*' → logprob: -6.199930667877197
    6. '```' → logprob: -6.449930667877197
    7. '\n' → logprob: -6.824930667877197
    8. '\' → logprob: -7.199930667877197
    9. '<|end|>' → logprob: -7.449930667877197
    10. ' def' → logprob: -8.324930191040039

Token 66: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.2372177541255951
    2. '*' → logprob: -2.362217664718628
    3. 'd' → logprob: -2.487217664718628
    4. '\' → logprob: -4.737217903137207
    5. '#' → logprob: -4.737217903137207
    6. '
' → logprob: -5.612217903137207
    7. '(' → logprob: -5.862217903137207
    8. '

' → logprob: -6.112217903137207
    9. '<|end|>' → logprob: -6.487217903137207
    10. '_' → logprob: -6.987217903137207

Token 67: ' apply' (ID: 6096)
  Prédit: ' compute'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' compute' → logprob: -0.10656564682722092
    2. ' main' → logprob: -2.7315657138824463
    3. ' calculate' → logprob: -4.481565475463867
    4. 'compute' → logprob: -4.856565475463867
    5. ' multiply' → logprob: -4.981565475463867
    6. ' get' → logprob: -5.606565475463867
    7. ' gcd' → logprob: -6.481565475463867
    8. ' find' → logprob: -7.231565475463867
    9. ' max' → logprob: -7.356565475463867
    10. ' factorial' → logprob: -7.481565475463867

Token 68: '_ce' (ID: 137725)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.3891175389289856
    2. '_div' → logprob: -2.389117479324341
    3. '_max' → logprob: -2.639117479324341
    4. '_operation' → logprob: -3.639117479324341
    5. '_factor' → logprob: -3.764117479324341
    6. '_multiplier' → logprob: -4.13911771774292
    7. '_function' → logprob: -4.26411771774292
    8. ' _' → logprob: -4.51411771774292
    9. '_operator' → logprob: -4.51411771774292
    10. '_discount' → logprob: -4.63911771774292

Token 69: 'iling' (ID: 10741)
  Prédit: 'il'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'il' → logprob: -0.011271105147898197
    2. 'iling' → logprob: -4.511270999908447
    3. 'ilm' → logprob: -10.261271476745605
    4. 'ils' → logprob: -10.386271476745605
    5. 'ilor' → logprob: -10.386271476745605
    6. '_il' → logprob: -11.011271476745605
    7. 'ling' → logprob: -11.136271476745605
    8. 'ill' → logprob: -11.761271476745605
    9. 'ilst' → logprob: -11.761271476745605
    10. 'iled' → logprob: -11.886271476745605

Token 70: '(value' (ID: 6333)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.022469591349363327
    2. '(value' → logprob: -4.647469520568848
    3. ' (' → logprob: -5.272469520568848
    4. '(div' → logprob: -5.397469520568848
    5. '_div' → logprob: -7.147469520568848
    6. '_' → logprob: -7.147469520568848
    7. '()' → logprob: -9.022469520568848
    8. '(x' → logprob: -9.022469520568848
    9. '(s' → logprob: -9.272469520568848
    10. '(def' → logprob: -9.397469520568848

Token 71: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.004470235202461481
    2. ')' → logprob: -5.879470348358154
    3. ',' → logprob: -6.629470348358154
    4. '):
' → logprob: -8.754469871520996
    5. ' ):' → logprob: -9.254469871520996
    6. '   ' → logprob: -9.754469871520996
    7. ' ' → logprob: -11.629469871520996
    8. '  ' → logprob: -12.504469871520996
    9. '(' → logprob: -13.004469871520996
    10. ':' → logprob: -13.004469871520996

Token 72: '   ' (ID: 271)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.6657406687736511
    2. '   ' → logprob: -0.9157406687736511
    3. ' import' → logprob: -3.290740728378296
    4. ' return' → logprob: -3.540740728378296
    5. 'int' → logprob: -4.915740489959717
    6. ' int' → logprob: -5.165740489959717
    7. ' math' → logprob: -6.540740489959717
    8. 'return' → logprob: -6.540740489959717
    9. ' (' → logprob: -6.915740489959717
    10. '(' → logprob: -7.415740489959717

Token 73: ' import' (ID: 1588)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' (adapté à ' import') → logprob: -0.2643057107925415
    2. ' return' → logprob: -2.389305591583252
    3. ' import' → logprob: -2.514305591583252
    4. 'int' → logprob: -3.889305591583252
    5. ' int' → logprob: -3.889305591583252
    6. 'return' → logprob: -4.764305591583252
    7. '   ' → logprob: -5.389305591583252
    8. ' math' → logprob: -5.764305591583252
    9. 'math' → logprob: -7.264305591583252
    10. ' -' → logprob: -7.639305591583252

Token 74: ' math' (ID: 13324)
  Prédit: ' math'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -6.511406809295295e-06
    2. 'math' → logprob: -12.000006675720215
    3. ' ' → logprob: -15.500006675720215
    4. ' ' → logprob: -17.5000057220459
    5. '.math' → logprob: -18.0000057220459
    6. '_math' → logprob: -18.2500057220459
    7. '(math' → logprob: -19.7500057220459
    8. '	m' → logprob: -20.7500057220459
    9. ' maths' → logprob: -20.7500057220459
    10. ' mathematics' → logprob: -20.8750057220459

Token 75: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.2002406120300293
    2. '
' → logprob: -1.3252406120300293
    3. '.ceil' → logprob: -2.2002406120300293
    4. '.' → logprob: -2.4502406120300293
    5. ' math' → logprob: -2.7002406120300293
    6. ' return' → logprob: -2.8252406120300293
    7. '.math' → logprob: -2.8252406120300293
    8. '(math' → logprob: -4.325240612030029
    9. 'return' → logprob: -4.450240612030029
    10. 'math' → logprob: -4.700240612030029

Token 76: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5388690829277039
    2. '
' → logprob: -1.0388691425323486
    3. ' return' → logprob: -2.9138691425323486
    4. 'return' → logprob: -5.0388689041137695
    5. '	return' → logprob: -7.1638689041137695
    6. '    
' → logprob: -8.53886890411377
    7. ' 
' → logprob: -8.53886890411377
    8. ' math' → logprob: -8.66386890411377
    9. '  
' → logprob: -8.91386890411377
    10. '
' → logprob: -9.16386890411377

Token 77: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.1256006509065628
    2. 'return' (adapté à ' return') → logprob: -2.250600576400757
    3. '   ' → logprob: -4.375600814819336
    4. '	return' → logprob: -10.125600814819336
    5. '
' → logprob: -11.375600814819336
    6. '    ' → logprob: -11.375600814819336
    7. ' ' → logprob: -11.625600814819336
    8. ' 
' → logprob: -11.625600814819336
    9. '    
' → logprob: -11.875600814819336
    10. '\n' → logprob: -12.375600814819336

Token 78: ' math' (ID: 13324)
  Prédit: ' math'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.0024768433067947626
    2. 'math' → logprob: -6.002476692199707
    3. ' ' → logprob: -14.502476692199707
    4. ' int' → logprob: -15.002476692199707
    5. '(math' → logprob: -15.252476692199707
    6. ' ' → logprob: -16.752477645874023
    7. '.math' → logprob: -17.627477645874023
    8. ' maths' → logprob: -18.377477645874023
    9. ' Math' → logprob: -18.502477645874023
    10. 'int' → logprob: -18.752477645874023

Token 79: '.ceil' (ID: 60295)
  Prédit: '.ceil'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.ceil' → logprob: -0.0008355968166142702
    2. '.' → logprob: -7.125835418701172
    3. '.ce' → logprob: -10.875835418701172
    4. ' .' → logprob: -11.625835418701172
    5. '.floor' → logprob: -13.750835418701172
    6. '.c' → logprob: -14.125835418701172
    7. 'ceil' → logprob: -14.750835418701172
    8. '.py' → logprob: -15.500835418701172
    9. '`.' → logprob: -15.625835418701172
    10. '​.' → logprob: -15.750835418701172

Token 80: '(value' (ID: 6333)
  Prédit: '(value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(value' → logprob: -0.4740993082523346
    2. '(' → logprob: -0.9740992784500122
    3. '(
' → logprob: -11.724099159240723
    4. ' (' → logprob: -11.974099159240723
    5. '(

' → logprob: -12.474099159240723
    6. '(Value' → logprob: -13.974099159240723
    7. '(user' → logprob: -14.349099159240723
    8. '<|end|>' → logprob: -14.474099159240723
    9. '('' → logprob: -15.349099159240723
    10. '(valor' → logprob: -15.349099159240723

Token 81: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.2664456789934775e-06
    2. ')
' → logprob: -13.750000953674316
    3. ' )' → logprob: -15.750000953674316
    4. '<|end|>' → logprob: -17.750001907348633
    5. ')

' → logprob: -18.000001907348633
    6. ')return' → logprob: -18.625001907348633
    7. '   ' → logprob: -18.750001907348633
    8. '))' → logprob: -19.000001907348633
    9. ')`' → logprob: -19.000001907348633
    10. '}' → logprob: -19.125001907348633

Token 82: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0039411443285644054
    2. '<|end|>' → logprob: -6.003941059112549
    3. '#' → logprob: -7.378941059112549
    4. '```' → logprob: -8.253941535949707
    5. '
' → logprob: -8.628941535949707
    6. '\' → logprob: -9.128941535949707
    7. '

' → logprob: -9.753941535949707
    8. '[' → logprob: -10.503941535949707
    9. '<|end|>' → logprob: -10.628941535949707
    10. '*' → logprob: -10.878941535949707

Token 83: ' print' (ID: 2123)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.14413020014762878
    2. ' calculate' → logprob: -2.394130229949951
    3. ' compute' → logprob: -3.519130229949951
    4. ' find' → logprob: -6.144130229949951
    5. ' solve' → logprob: -6.144130229949951
    6. 'calculate' → logprob: -6.269130229949951
    7. ' process' → logprob: -6.394130229949951
    8. ' get' → logprob: -6.644130229949951
    9. 'main' → logprob: -6.644130229949951
    10. 'compute' → logprob: -6.769130229949951

Token 84: '_result' (ID: 11623)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0012760692043229938
    2. '()' → logprob: -7.376276016235352
    3. '('' → logprob: -9.001276016235352
    4. '("("' → logprob: -9.001276016235352
    5. '("")' → logprob: -9.126276016235352
    6. '_' → logprob: -9.126276016235352
    7. '("' → logprob: -9.626276016235352
    8. '("""' → logprob: -10.751276016235352
    9. ' (' → logprob: -11.126276016235352
    10. '<|end|>' → logprob: -11.626276016235352

Token 85: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00033760786755010486
    2. '("("' → logprob: -8.625337600708008
    3. '('' → logprob: -9.125337600708008
    4. '()' → logprob: -11.000337600708008
    5. ' (' → logprob: -11.625337600708008
    6. '(value' → logprob: -12.000337600708008
    7. '("""' → logprob: -12.750337600708008
    8. '("")' → logprob: -12.875337600708008
    9. '(result' → logprob: -13.125337600708008
    10. '(
' → logprob: -13.375337600708008

Token 86: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.31330546736717224
    2. ')' → logprob: -1.3133054971694946
    3. '):
' → logprob: -10.188305854797363
    4. ':' → logprob: -13.563305854797363
    5. '   ' → logprob: -13.563305854797363
    6. '):

' → logprob: -14.563305854797363
    7. ' ):' → logprob: -14.688305854797363
    8. ' )' → logprob: -14.813305854797363
    9. ')**' → logprob: -14.938305854797363
    10. ',' → logprob: -15.063305854797363

Token 87: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02221510000526905
    2. ' print' → logprob: -3.8972151279449463
    3. 'print' → logprob: -6.397214889526367
    4. '    ' → logprob: -13.647214889526367
    5. '(print' → logprob: -13.647214889526367
    6. ' result' → logprob: -14.022214889526367
    7. '```' → logprob: -14.022214889526367
    8. '(' → logprob: -14.272214889526367
    9. '    
' → logprob: -15.022214889526367
    10. '   ' → logprob: -15.772214889526367

Token 88: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.5767856240272522
    2. ' print' → logprob: -0.8267856240272522
    3. '   ' → logprob: -7.076785564422607
    4. '```' → logprob: -13.701786041259766
    5. '	print' → logprob: -16.201786041259766
    6. '    ' → logprob: -16.826786041259766
    7. '.print' → logprob: -17.451786041259766
    8. 'def' → logprob: -17.951786041259766
    9. '(print' → logprob: -18.201786041259766
    10. '    
' → logprob: -18.576786041259766

Token 89: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.12698008120059967
    2. '(' → logprob: -2.1269800662994385
    3. 'result' → logprob: -11.00197982788086
    4. '()' → logprob: -11.00197982788086
    5. ' (' → logprob: -11.12697982788086
    6. '(f' → logprob: -13.75197982788086
    7. '(
' → logprob: -14.75197982788086
    8. '(res' → logprob: -14.75197982788086
    9. '(results' → logprob: -14.87697982788086
    10. '(resultado' → logprob: -14.87697982788086

Token 90: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -9.088346359931165e-07
    2. ')
' → logprob: -14.500000953674316
    3. ' )' → logprob: -15.250000953674316
    4. '))' → logprob: -17.75
    5. ')

' → logprob: -18.375
    6. ')`' → logprob: -18.375
    7. '()' → logprob: -18.75
    8. '')' → logprob: -19.625
    9. '())' → logprob: -20.0
    10. '),' → logprob: -20.5

Token 91: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0019693158101290464
    2. 'if' → logprob: -6.376969337463379
    3. 'height' → logprob: -8.376969337463379
    4. '#' → logprob: -10.876969337463379
    5. 'h' → logprob: -11.626969337463379
    6. 'n' → logprob: -12.126969337463379
    7. 'H' → logprob: -14.251969337463379
    8. 'width' → logprob: -14.376969337463379
    9. 'a' → logprob: -14.751969337463379
    10. '```' → logprob: -15.126969337463379

Token 92: ' process' (ID: 2273)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.0033179267775267363
    2. 'main' → logprob: -6.003317832946777
    3. ' calculate' → logprob: -7.503317832946777
    4. ' solve' → logprob: -8.753317832946777
    5. ' compute' → logprob: -9.628317832946777
    6. 'calculate' → logprob: -10.503317832946777
    7. ' process' → logprob: -10.753317832946777
    8. 'solve' → logprob: -12.003317832946777
    9. 'compute' → logprob: -12.878317832946777
    10. '	main' → logprob: -13.003317832946777

Token 93: '():
' (ID: 8595)
  Prédit: '_input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.7891470789909363
    2. '_data' → logprob: -1.664147138595581
    3. '():' → logprob: -1.914147138595581
    4. '(' → logprob: -2.914147138595581
    5. '_height' → logprob: -3.164147138595581
    6. '(n' → logprob: -3.914147138595581
    7. '_values' → logprob: -4.164146900177002
    8. '()' → logprob: -4.289146900177002
    9. '_' → logprob: -4.664146900177002
    10. '_n' → logprob: -4.789146900177002

Token 94: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0024469965137541294
    2. '    
' → logprob: -6.752447128295898
    3. 'height' → logprob: -7.502447128295898
    4. ' height' → logprob: -8.877447128295898
    5. '    ' → logprob: -9.127447128295898
    6. ' h' → logprob: -9.127447128295898
    7. '(' → logprob: -9.627447128295898
    8. '   ' → logprob: -9.752447128295898
    9. 'n' → logprob: -10.127447128295898
    10. 'h' → logprob: -10.377447128295898

Token 95: ' h' (ID: 312)
  Prédit: ' height'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' height' → logprob: -0.6298115849494934
    2. 'height' → logprob: -1.2548115253448486
    3. ' h' → logprob: -2.5048115253448486
    4. 'h' (adapté à ' h') → logprob: -2.6298115253448486
    5. '   ' → logprob: -3.7548115253448486
    6. ' n' → logprob: -6.004811763763428
    7. 'n' → logprob: -6.254811763763428
    8. ' H' → logprob: -8.25481128692627
    9. 'H' → logprob: -9.12981128692627
    10. ' ' → logprob: -10.25481128692627

Token 96: ' =' (ID: 314)
  Prédit: 'eight'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'eight' → logprob: -0.015282814390957355
    2. ' =' → logprob: -4.26528263092041
    3. 'e' → logprob: -7.51528263092041
    4. '=' → logprob: -7.76528263092041
    5. ' eight' → logprob: -9.01528263092041
    6. ',' → logprob: -11.76528263092041
    7. '=e' → logprob: -12.01528263092041
    8. 'eig' → logprob: -12.26528263092041
    9. '   ' → logprob: -12.51528263092041
    10. 'Eight' → logprob: -12.89028263092041

Token 97: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.1432967633008957
    2. 'get' → logprob: -2.018296718597412
    3. ' read' → logprob: -7.518296718597412
    4. 'read' → logprob: -9.51829719543457
    5. '(get' → logprob: -13.39329719543457
    6. '   ' → logprob: -13.76829719543457
    7. '	get' → logprob: -14.39329719543457
    8. '=get' → logprob: -14.39329719543457
    9. ' ' → logprob: -14.76829719543457
    10. ')get' → logprob: -15.76829719543457

Token 98: '_height' (ID: 21576)
  Prédit: '_height'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_height' → logprob: -0.00019603055261541158
    2. '_' → logprob: -9.25019645690918
    3. '_width' → logprob: -9.37519645690918
    4. ' _' → logprob: -12.00019645690918
    5. '_he' → logprob: -12.25019645690918
    6. '_h' → logprob: -13.37519645690918
    7. '_length' → logprob: -14.12519645690918
    8. '__' → logprob: -14.62519645690918
    9. ')_' → logprob: -15.37519645690918
    10. '_value' → logprob: -15.62519645690918

Token 99: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0003364158037584275
    2. '()
' → logprob: -8.000336647033691
    3. '()

' → logprob: -14.750336647033691
    4. '()
' → logprob: -16.000335693359375
    5. '()\' → logprob: -16.125335693359375
    6. '()`' → logprob: -16.250335693359375
    7. ' ()' → logprob: -16.375335693359375
    8. '()"' → logprob: -17.000335693359375
    9. '()<' → logprob: -17.750335693359375
    10. '()]' → logprob: -18.750335693359375

Token 100: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.020465156063437462
    2. 'w' → logprob: -4.39546537399292
    3. '<|end|>' → logprob: -5.14546537399292
    4. '
' → logprob: -7.52046537399292
    5. '    
' → logprob: -7.77046537399292
    6. ' w' → logprob: -8.020464897155762
    7. 'n' → logprob: -8.395464897155762
    8. '    ' → logprob: -8.895464897155762
    9. ' ' → logprob: -9.020464897155762
    10. '  ' → logprob: -9.520464897155762

Token 101: ' w' (ID: 286)
  Prédit: 'w'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'w' (adapté à ' w') → logprob: -0.0003121056070085615
    2. ' w' → logprob: -8.125311851501465
    3. '   ' → logprob: -11.125311851501465
    4. 'n' → logprob: -13.750311851501465
    5. '	w' → logprob: -17.00031280517578
    6. '```' → logprob: -17.12531280517578
    7. 'b' → logprob: -17.25031280517578
    8. 'h' → logprob: -17.37531280517578
    9. '    
' → logprob: -17.50031280517578
    10. 'a' → logprob: -17.62531280517578

Token 102: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.016048094257712364
    2. '=' → logprob: -4.141047954559326
    3. ')' → logprob: -12.891048431396484
    4. '   ' → logprob: -13.141048431396484
    5. '=get' → logprob: -13.141048431396484
    6. ' ' → logprob: -13.266048431396484
    7. ' =
' → logprob: -13.266048431396484
    8. '()' → logprob: -13.391048431396484
    9. '<|end|>' → logprob: -13.891048431396484
    10. ',' → logprob: -14.141048431396484

Token 103: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.5759475827217102
    2. ' get' → logprob: -0.8259475827217102
    3. '(get' → logprob: -13.075947761535645
    4. ' ' → logprob: -13.200947761535645
    5. '_get' → logprob: -13.450947761535645
    6. '	get' → logprob: -14.075947761535645
    7. '.get' → logprob: -14.450947761535645
    8. '=get' → logprob: -14.575947761535645
    9. ')get' → logprob: -15.200947761535645
    10. '[get' → logprob: -15.200947761535645

Token 104: '_width' (ID: 17595)
  Prédit: '_width'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_width' → logprob: -6.704273118884885e-07
    2. '_w' → logprob: -15.000000953674316
    3. '_' → logprob: -15.625000953674316
    4. '_height' → logprob: -16.0
    5. 'idth' → logprob: -17.75
    6. 'width' → logprob: -18.0
    7. '_depth' → logprob: -19.5
    8. '_length' → logprob: -19.625
    9. '_weight' → logprob: -20.5
    10. '_WIDTH' → logprob: -20.625

Token 105: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -8.64970643306151e-05
    2. '()
' → logprob: -9.375086784362793
    3. '()

' → logprob: -14.125086784362793
    4. '()\' → logprob: -15.375086784362793
    5. ' ()' → logprob: -15.500086784362793
    6. '()`' → logprob: -15.875086784362793
    7. '()]' → logprob: -16.375085830688477
    8. '())' → logprob: -16.875085830688477
    9. '()<' → logprob: -16.875085830688477
    10. '(' → logprob: -17.375085830688477

Token 106: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.017073193565011024
    2. '
' → logprob: -4.892073154449463
    3. 'n' → logprob: -5.267073154449463
    4. '<|end|>' → logprob: -5.767073154449463
    5. '    
' → logprob: -7.142073154449463
    6. '<|end|>' → logprob: -9.267073631286621
    7. '	n' → logprob: -9.392073631286621
    8. '  
' → logprob: -10.142073631286621
    9. '```' → logprob: -10.392073631286621
    10. '  ' → logprob: -10.642073631286621

Token 107: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.014466932974755764
    2. ' n' → logprob: -4.389466762542725
    3. '   ' → logprob: -6.264466762542725
    4. '_n' → logprob: -10.764467239379883
    5. 'def' → logprob: -11.764467239379883
    6. '
' → logprob: -11.889467239379883
    7. '	n' → logprob: -12.264467239379883
    8. 'k' → logprob: -13.139467239379883
    9. 'h' → logprob: -13.889467239379883
    10. 'a' → logprob: -14.139467239379883

Token 108: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.008616581559181213
    2. '=' → logprob: -4.7586164474487305
    3. ' ' → logprob: -13.50861644744873
    4. '()' → logprob: -15.13361644744873
    5. '   ' → logprob: -15.88361644744873
    6. '  ' → logprob: -16.258617401123047
    7. 's' → logprob: -17.008617401123047
    8. ')' → logprob: -17.008617401123047
    9. ' ' → logprob: -17.133617401123047
    10. '	' → logprob: -17.508617401123047

Token 109: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.5759556293487549
    2. ' get' → logprob: -0.8259556293487549
    3. '(get' → logprob: -11.700955390930176
    4. ' read' → logprob: -12.575955390930176
    5. 'read' → logprob: -12.950955390930176
    6. '   ' → logprob: -14.450955390930176
    7. '	get' → logprob: -14.825955390930176
    8. ' ' → logprob: -14.825955390930176
    9. '=get' → logprob: -15.450955390930176
    10. '_get' → logprob: -15.575955390930176

Token 110: '_n' (ID: 2170)
  Prédit: '_n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: -0.012556145898997784
    2. '()' → logprob: -4.387556076049805
    3. '_' → logprob: -10.512556076049805
    4. '()>' → logprob: -11.387556076049805
    5. '())' → logprob: -13.387556076049805
    6. '_int' → logprob: -13.512556076049805
    7. 'n' → logprob: -13.637556076049805
    8. '()<' → logprob: -13.887556076049805
    9. ' ()' → logprob: -14.387556076049805
    10. ' _' → logprob: -14.887556076049805

Token 111: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0004894073354080319
    2. '()
' → logprob: -7.750489234924316
    3. '()

' → logprob: -10.625489234924316
    4. ')' → logprob: -10.875489234924316
    5. '()
' → logprob: -12.375489234924316
    6. '(' → logprob: -12.500489234924316
    7. ' ()' → logprob: -12.875489234924316
    8. '   ' → logprob: -13.875489234924316
    9. '()\' → logprob: -13.875489234924316
    10. '())' → logprob: -14.000489234924316

Token 112: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.016244564205408096
    2. 'result' → logprob: -5.391244411468506
    3. 'rows' → logprob: -6.266244411468506
    4. '    
' → logprob: -6.391244411468506
    5. 'max' → logprob: -6.391244411468506
    6. 'total' → logprob: -7.641244411468506
    7. 'import' → logprob: -7.641244411468506
    8. ' result' → logprob: -7.891244411468506
    9. 'tiles' → logprob: -7.891244411468506
    10. ' rows' → logprob: -8.016244888305664

Token 113: ' m' (ID: 284)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9565211534500122
    2. 'result' → logprob: -1.5815211534500122
    3. 'rows' → logprob: -1.8315211534500122
    4. 'min' → logprob: -3.2065210342407227
    5. 'res' → logprob: -3.5815210342407227
    6. 'import' → logprob: -3.5815210342407227
    7. 'total' → logprob: -4.331521034240723
    8. 'max' → logprob: -4.331521034240723
    9. 'tiles' → logprob: -4.331521034240723
    10. 'div' → logprob: -4.456521034240723

Token 114: ' =' (ID: 314)
  Prédit: 'ax'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ax' → logprob: -0.025419864803552628
    2. ' =' → logprob: -3.7754199504852295
    3. 'a' → logprob: -6.65041971206665
    4. '=' → logprob: -8.025420188903809
    5. ' ax' → logprob: -9.275420188903809
    6. 'ultip' → logprob: -9.525420188903809
    7. 'ult' → logprob: -9.525420188903809
    8. 'ultiply' → logprob: -9.775420188903809
    9. '_ax' → logprob: -9.775420188903809
    10. ' ' → logprob: -10.525420188903809

Token 115: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.3851126432418823
    2. 'max' → logprob: -1.8851126432418823
    3. ' get' → logprob: -2.510112762451172
    4. ' max' → logprob: -3.510112762451172
    5. '(get' → logprob: -4.010112762451172
    6. 'w' → logprob: -4.760112762451172
    7. 'n' → logprob: -4.885112762451172
    8. ' (' → logprob: -5.260112762451172
    9. 'min' → logprob: -5.760112762451172
    10. 'h' → logprob: -6.135112762451172

Token 116: '_max' (ID: 13731)
  Prédit: '_max'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_max' → logprob: -0.2624925971031189
    2. '_value' → logprob: -2.1374926567077637
    3. 'ax' → logprob: -2.3874926567077637
    4. '_n' → logprob: -4.012492656707764
    5. '_ax' → logprob: -6.762492656707764
    6. '(max' → logprob: -8.137492179870605
    7. '_' → logprob: -8.137492179870605
    8. 'max' → logprob: -8.387492179870605
    9. '_val' → logprob: -9.012492179870605
    10. '_x' → logprob: -9.012492179870605

Token 117: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.006234383210539818
    2. '(n' → logprob: -5.756234169006348
    3. '(h' → logprob: -6.506234169006348
    4. '(w' → logprob: -7.506234169006348
    5. '_' → logprob: -7.631234169006348
    6. '(' → logprob: -8.006234169006348
    7. '(value' → logprob: -10.006234169006348
    8. '_val' → logprob: -10.506234169006348
    9. 'value' → logprob: -10.756234169006348
    10. ')' → logprob: -10.881234169006348

Token 118: '(h' (ID: 8120)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.6019634008407593
    2. '(h' → logprob: -0.8519634008407593
    3. '(w' → logprob: -4.101963520050049
    4. '(' → logprob: -4.726963520050049
    5. ' (' → logprob: -9.35196304321289
    6. '(s' → logprob: -9.60196304321289
    7. '((' → logprob: -9.72696304321289
    8. '(
' → logprob: -10.85196304321289
    9. '(m' → logprob: -11.60196304321289
    10. ')' → logprob: -11.60196304321289

Token 119: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.03414294496178627
    2. ' ,' → logprob: -3.4091429710388184
    3. ',w' → logprob: -7.784142971038818
    4. ',n' → logprob: -10.53414249420166
    5. 'w' → logprob: -11.28414249420166
    6. '   ' → logprob: -11.40914249420166
    7. ' ' → logprob: -11.90914249420166
    8. ' w' → logprob: -12.78414249420166
    9. '(),' → logprob: -12.90914249420166
    10. ' n' → logprob: -12.90914249420166

Token 120: ' w' (ID: 286)
  Prédit: 'w'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'w' → logprob: -0.5232635736465454
    2. ' w' → logprob: -0.8982635736465454
    3. '   ' → logprob: -9.523263931274414
    4. ' n' → logprob: -10.648263931274414
    5. 'n' → logprob: -10.773263931274414
    6. ' ' → logprob: -12.023263931274414
    7. ')' → logprob: -12.148263931274414
    8. '	w' → logprob: -12.273263931274414
    9. '    ' → logprob: -13.398263931274414
    10. ' ' → logprob: -13.773263931274414

Token 121: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00024132427643053234
    2. ' )' → logprob: -8.62524127960205
    3. '   ' → logprob: -10.75024127960205
    4. ')
' → logprob: -11.00024127960205
    5. '))' → logprob: -12.50024127960205
    6. ' ' → logprob: -12.62524127960205
    7. '),' → logprob: -12.87524127960205
    8. ')n' → logprob: -13.12524127960205
    9. ',' → logprob: -13.37524127960205
    10. 'n' → logprob: -13.37524127960205

Token 122: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.46751582622528076
    2. 'result' → logprob: -2.2175159454345703
    3. 'tiles' → logprob: -2.9675159454345703
    4. ' result' → logprob: -3.2175159454345703
    5. ' tiles' → logprob: -3.5925159454345703
    6. 'r' → logprob: -4.59251594543457
    7. 'res' → logprob: -4.59251594543457
    8. 'import' → logprob: -4.71751594543457
    9. 'div' → logprob: -5.09251594543457
    10. 'k' → logprob: -5.09251594543457

Token 123: ' div' (ID: 4223)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.7274585962295532
    2. 'res' → logprob: -2.1024584770202637
    3. 'import' → logprob: -2.6024584770202637
    4. 'tiles' → logprob: -2.7274584770202637
    5. 'q' → logprob: -3.1024584770202637
    6. 'r' → logprob: -3.6024584770202637
    7. '   ' → logprob: -4.227458477020264
    8. 'x' → logprob: -4.477458477020264
    9. 'cells' → logprob: -4.477458477020264
    10. 'num' → logprob: -4.852458477020264

Token 124: ' =' (ID: 314)
  Prédit: 'ision'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ision' → logprob: -0.3518995940685272
    2. ' =' → logprob: -1.3518996238708496
    3. '_result' → logprob: -4.22689962387085
    4. '_' → logprob: -4.72689962387085
    5. '=' → logprob: -5.22689962387085
    6. 'isor' → logprob: -5.97689962387085
    7. 'idend' → logprob: -6.10189962387085
    8. 'isions' → logprob: -6.72689962387085
    9. 'isible' → logprob: -7.97689962387085
    10. 'ided' → logprob: -7.97689962387085

Token 125: ' compute' (ID: 23864)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.9850695729255676
    2. 'apply' → logprob: -1.6100695133209229
    3. 'process' → logprob: -1.8600695133209229
    4. 'compute' → logprob: -2.360069513320923
    5. '(n' → logprob: -2.485069513320923
    6. ' (' → logprob: -3.735069513320923
    7. ' n' → logprob: -4.360069751739502
    8. 'm' → logprob: -4.360069751739502
    9. '-' → logprob: -4.735069751739502
    10. ' -' → logprob: -4.860069751739502

Token 126: '_div' (ID: 36926)
  Prédit: '_div'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_div' → logprob: -0.008670353330671787
    2. 'ision' → logprob: -4.758670330047607
    3. 's' → logprob: -10.633670806884766
    4. 'div' → logprob: -11.133670806884766
    5. '_' → logprob: -11.758670806884766
    6. 'division' → logprob: -12.383670806884766
    7. 'ison' → logprob: -14.008670806884766
    8. ' division' → logprob: -14.633670806884766
    9. '_dis' → logprob: -14.633670806884766
    10. '_de' → logprob: -14.633670806884766

Token 127: 'ision' (ID: 3625)
  Prédit: 'ision'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ision' → logprob: -7.386147626675665e-05
    2. 'vision' → logprob: -10.500073432922363
    3. 's' → logprob: -10.750073432922363
    4. 'ion' → logprob: -11.625073432922363
    5. 'ison' → logprob: -11.875073432922363
    6. '   ' → logprob: -12.750073432922363
    7. 'iv' → logprob: -13.000073432922363
    8. 'is' → logprob: -13.875073432922363
    9. 'ission' → logprob: -14.500073432922363
    10. 'isions' → logprob: -14.875073432922363

Token 128: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0020782900974154472
    2. '(' → logprob: -6.502078056335449
    3. '(m' → logprob: -7.752078056335449
    4. '((' → logprob: -9.62707805633545
    5. 'n' → logprob: -9.87707805633545
    6. ' (' → logprob: -11.00207805633545
    7. '(
' → logprob: -12.75207805633545
    8. '   ' → logprob: -13.25207805633545
    9. 'm' → logprob: -13.62707805633545
    10. ')(' → logprob: -14.50207805633545

Token 129: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.006223124917596579
    2. ' ,' → logprob: -5.131223201751709
    3. ',m' → logprob: -8.38122272491455
    4. ',
' → logprob: -11.38122272491455
    5. 'm' → logprob: -11.63122272491455
    6. '   ' → logprob: -12.00622272491455
    7. ',

' → logprob: -12.13122272491455
    8. ',w' → logprob: -12.13122272491455
    9. ' ' → logprob: -12.38122272491455
    10. ')' → logprob: -12.63122272491455

Token 130: ' m' (ID: 284)
  Prédit: ' m'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' m' → logprob: -0.11286043375730515
    2. 'm' → logprob: -2.2378604412078857
    3. ')' → logprob: -11.237860679626465
    4. '   ' → logprob: -12.237860679626465
    5. ')m' → logprob: -12.362860679626465
    6. ' ' → logprob: -12.737860679626465
    7. '	m' → logprob: -12.862860679626465
    8. '<|end|>' → logprob: -13.362860679626465
    9. ' м' → logprob: -14.175360679626465
    10. 'div' → logprob: -14.175360679626465

Token 131: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00025978617486543953
    2. ')
' → logprob: -8.500259399414062
    3. ' )' → logprob: -10.000259399414062
    4. ')

' → logprob: -11.875259399414062
    5. ')
' → logprob: -13.500259399414062
    6. '))' → logprob: -13.875259399414062
    7. ')`' → logprob: -14.875259399414062
    8. '   ' → logprob: -15.000259399414062
    9. '),' → logprob: -15.625259399414062
    10. ' ' → logprob: -15.625259399414062

Token 132: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.005656909663230181
    2. 'result' → logprob: -6.005656719207764
    3. '    
' → logprob: -6.755656719207764
    4. ' result' → logprob: -7.005656719207764
    5. 'res' → logprob: -8.130657196044922
    6. ' res' → logprob: -8.880657196044922
    7. 'r' → logprob: -9.255657196044922
    8. ' 
' → logprob: -9.505657196044922
    9. ')' → logprob: -9.755657196044922
    10. ' ' → logprob: -10.005657196044922

Token 133: ' res' (ID: 694)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' (adapté à ' res') → logprob: -0.14376303553581238
    2. 'result' → logprob: -2.3937630653381348
    3. 'ans' → logprob: -3.8937630653381348
    4. 'ceil' → logprob: -4.768763065338135
    5. 'steps' → logprob: -6.143763065338135
    6. 'import' → logprob: -6.268763065338135
    7. 'tiles' → logprob: -6.268763065338135
    8. ' res' → logprob: -6.893763065338135
    9. '   ' → logprob: -7.018763065338135
    10. 'count' → logprob: -7.018763065338135

Token 134: ' =' (ID: 314)
  Prédit: 'ult'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ult' → logprob: -0.08329611271619797
    2. ' =' → logprob: -2.708296060562134
    3. 'u' → logprob: -4.958296298980713
    4. ' ' → logprob: -5.833296298980713
    5. ' ult' → logprob: -5.958296298980713
    6. '=' → logprob: -8.083295822143555
    7. 'ultat' → logprob: -8.958295822143555
    8. '   ' → logprob: -9.083295822143555
    9. 'ul' → logprob: -9.958295822143555
    10. 'ults' → logprob: -10.583295822143555

Token 135: ' apply' (ID: 6096)
  Prédit: 'apply'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'apply' → logprob: -0.0549791119992733
    2. ' apply' → logprob: -2.929979085922241
    3. 'int' → logprob: -9.55497932434082
    4. '   ' → logprob: -11.05497932434082
    5. ' int' → logprob: -12.30497932434082
    6. '.apply' → logprob: -13.05497932434082
    7. ' ' → logprob: -14.05497932434082
    8. 'app' → logprob: -14.42997932434082
    9. '  ' → logprob: -14.55497932434082
    10. '_apply' → logprob: -14.92997932434082

Token 136: '_ce' (ID: 137725)
  Prédit: '_ce'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_ce' → logprob: -0.0007104054093360901
    2. '_' → logprob: -7.250710487365723
    3. '_che' → logprob: -16.125709533691406
    4. '_floor' → logprob: -16.375709533691406
    5. '_c' → logprob: -16.500709533691406
    6. '_ca' → logprob: -17.500709533691406
    7. '_co' → logprob: -17.625709533691406
    8. '_div' → logprob: -17.875709533691406
    9. ' _' → logprob: -17.875709533691406
    10. '_ci' → logprob: -18.500709533691406

Token 137: 'iling' (ID: 10741)
  Prédit: 'iling'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iling' → logprob: -6.074907287256792e-05
    2. 'ling' → logprob: -10.50006103515625
    3. 'il' → logprob: -10.62506103515625
    4. '
' → logprob: -12.50006103515625
    5. 'ing' → logprob: -13.87506103515625
    6. 'illing' → logprob: -14.37506103515625
    7. 'iled' → logprob: -14.50006103515625
    8. 'ILING' → logprob: -14.50006103515625
    9. '

' → logprob: -15.25006103515625
    10. '(' → logprob: -15.25006103515625

Token 138: '(div' (ID: 73108)
  Prédit: '(div'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(div' → logprob: -3.786196975852363e-05
    2. '(' → logprob: -10.375038146972656
    3. ' (' → logprob: -12.375038146972656
    4. '(res' → logprob: -13.500038146972656
    5. '(di' → logprob: -14.375038146972656
    6. '(dev' → logprob: -16.000038146972656
    7. '(def' → logprob: -16.500038146972656
    8. '(diff' → logprob: -17.000038146972656
    9. '(dist' → logprob: -18.000038146972656
    10. '(int' → logprob: -18.000038146972656

Token 139: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.033730871975421906
    2. ')
' → logprob: -3.408730983734131
    3. ')
' → logprob: -9.658730506896973
    4. ')

' → logprob: -11.283730506896973
    5. '))' → logprob: -13.533730506896973
    6. 'ation' → logprob: -13.783730506896973
    7. 'ent' → logprob: -14.033730506896973
    8. 'ount' → logprob: -14.158730506896973
    9. '   ' → logprob: -14.283730506896973
    10. 't' → logprob: -14.408730506896973

Token 140: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.20205141603946686
    2. '   ' → logprob: -1.7020514011383057
    3. ' print' → logprob: -7.452051639556885
    4. '
' → logprob: -10.827051162719727
    5. '(print' → logprob: -10.827051162719727
    6. '	print' → logprob: -11.702051162719727
    7. '```' → logprob: -12.827051162719727
    8. ' ' → logprob: -12.827051162719727
    9. '    
' → logprob: -13.452051162719727
    10. '  ' → logprob: -13.577051162719727

Token 141: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -8.602024900028482e-05
    2. ' print' → logprob: -10.000085830688477
    3. '   ' → logprob: -10.250085830688477
    4. 'result' → logprob: -13.125085830688477
    5. 'res' → logprob: -13.625085830688477
    6. 'if' → logprob: -14.250085830688477
    7. '```' → logprob: -15.000085830688477
    8. '#print' → logprob: -15.375085830688477
    9. '
' → logprob: -15.625085830688477
    10. '*' → logprob: -15.875085830688477

Token 142: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -4.9424725148128346e-05
    2. '_res' → logprob: -10.250049591064453
    3. '_' → logprob: -11.625049591064453
    4. 'result' → logprob: -13.000049591064453
    5. '_results' → logprob: -13.875049591064453
    6. '(_' → logprob: -14.875049591064453
    7. ' _' → logprob: -15.000049591064453
    8. '```' → logprob: -15.000049591064453
    9. 's' → logprob: -15.875049591064453
    10. '_r' → logprob: -16.250049591064453

Token 143: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -0.06228695809841156
    2. '(' → logprob: -2.812286853790283
    3. ' (' → logprob: -8.062287330627441
    4. '(
' → logprob: -13.187287330627441
    5. ' ' → logprob: -14.062287330627441
    6. 'res' → logprob: -15.062287330627441
    7. '(

' → logprob: -15.312287330627441
    8. '("("' → logprob: -15.687287330627441
    9. '(result' → logprob: -16.062286376953125
    10. '(s' → logprob: -16.312286376953125

Token 144: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.3199920178740285e-05
    2. ')
' → logprob: -10.750022888183594
    3. ' )' → logprob: -13.625022888183594
    4. '()' → logprob: -15.750022888183594
    5. ')

' → logprob: -16.125022888183594
    6. '())' → logprob: -16.500022888183594
    7. '))' → logprob: -16.500022888183594
    8. ')`' → logprob: -16.500022888183594
    9. ')
' → logprob: -17.125022888183594
    10. '`)' → logprob: -18.375022888183594

Token 145: 'process' (ID: 9139)
  Prédit: 'process'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'process' → logprob: -0.03818986937403679
    2. 'if' → logprob: -3.2881898880004883
    3. '(process' → logprob: -9.788189888000488
    4. '
' → logprob: -10.038189888000488
    5. ' process' → logprob: -10.288189888000488
    6. ' if' → logprob: -12.163189888000488
    7. '	process' → logprob: -13.288189888000488
    8. '.process' → logprob: -14.038189888000488
    9. 'def' → logprob: -14.163189888000488
    10. '```' → logprob: -14.163189888000488

Token 146: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.02256866730749607
    2. '(' → logprob: -3.897568702697754
    3. '()
' → logprob: -7.272568702697754
    4. '```' → logprob: -8.147568702697754
    5. '#' → logprob: -8.272568702697754
    6. '\' → logprob: -8.397568702697754
    7. '\n' → logprob: -8.772568702697754
    8. '(
' → logprob: -9.022568702697754
    9. '
' → logprob: -9.147568702697754
    10. '<|end|>' → logprob: -10.022568702697754


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 144
Tokens correctement prédits (1ère position, stricte): 61
Tokens correctement prédits (1ère position, avec adaptation): 68
Tokens correctement prédits (top 10): 123
Précision stricte (1ère position): 42.36%
Précision adaptée (1ère position): 47.22%
Précision (top 10): 85.42%
================================================================================
