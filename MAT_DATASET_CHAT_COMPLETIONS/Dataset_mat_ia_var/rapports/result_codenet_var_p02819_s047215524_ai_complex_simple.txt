================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:33:12
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from functools import reduce
from math import isqrt
from itertools import count

x = int(input())
next(
    map(
        lambda n: print(n),
        filter(
            lambda n: not any(map(lambda d: n % d == 0, range(2, isqrt(n) + 1))),
            count(x)
        )
    ),
    None
)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' functools' (ID: 142636)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' reduce' (ID: 10389)
  Prédit: 'wrap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'wrap' → logprob: -0.25372281670570374
    2. 'partial' → logprob: -1.7537227869033813
    3. 'reduce' → logprob: -3.503722906112671
    4. ' wraps' → logprob: -4.003722667694092
    5. 'l' → logprob: -6.753722667694092
    6. ' partial' → logprob: -7.378722667694092
    7. 'cache' → logprob: -8.37872314453125
    8. '```' → logprob: -8.62872314453125
    9. 'cached' → logprob: -9.00372314453125
    10. 'cmp' → logprob: -9.25372314453125

Token 4: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.019195254892110825
    2. '(lambda' → logprob: -4.394195079803467
    3. '.' → logprob: -5.144195079803467
    4. ',' → logprob: -8.019195556640625
    5. ' (' → logprob: -8.519195556640625
    6. '```' → logprob: -9.519195556640625
    7. '(
' → logprob: -10.144195556640625
    8. '\(' → logprob: -10.269195556640625
    9. '\' → logprob: -10.394195556640625
    10. 'lambda' → logprob: -11.019195556640625

Token 5: 'from' (ID: 2845)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.028644466772675514
    2. '\' → logprob: -4.153644561767578
    3. 'def' → logprob: -5.028644561767578
    4. '(
' → logprob: -6.028644561767578
    5. '(lambda' → logprob: -6.653644561767578
    6. ',' → logprob: -7.653644561767578
    7. '\n' → logprob: -7.778644561767578
    8. '```' → logprob: -7.903644561767578
    9. '\(' → logprob: -8.403644561767578
    10. '`' → logprob: -9.278644561767578

Token 6: ' math' (ID: 13324)
  Prédit: ' operator'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' operator' → logprob: -0.24421319365501404
    2. ' math' → logprob: -2.119213104248047
    3. 'operator' → logprob: -3.244213104248047
    4. ' itertools' → logprob: -3.244213104248047
    5. ' collections' → logprob: -4.494213104248047
    6. 'math' → logprob: -5.494213104248047
    7. ' os' → logprob: -6.369213104248047
    8. 'collections' → logprob: -7.369213104248047
    9. ' ' → logprob: -7.994213104248047
    10. ' typing' → logprob: -8.119213104248047

Token 7: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.01146475039422512
    2. 'import' → logprob: -4.761464595794678
    3. ' ' → logprob: -5.886464595794678
    4. '	import' → logprob: -11.261465072631836
    5. ' sqrt' → logprob: -11.261465072631836
    6. '.sqrt' → logprob: -11.636465072631836
    7. '<|end|>' → logprob: -12.136465072631836
    8. '_import' → logprob: -12.261465072631836
    9. ' imports' → logprob: -12.261465072631836
    10. ' importar' → logprob: -12.386465072631836

Token 8: ' is' (ID: 382)
  Prédit: ' gcd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' gcd' → logprob: -0.3375875949859619
    2. ' sqrt' → logprob: -1.837587594985962
    3. 'sqrt' → logprob: -2.587587594985962
    4. ' factorial' → logprob: -3.587587594985962
    5. ' prod' → logprob: -4.837587356567383
    6. ' ceil' → logprob: -5.087587356567383
    7. 'pow' → logprob: -6.337587356567383
    8. ' floor' → logprob: -6.337587356567383
    9. ' inf' → logprob: -6.837587356567383
    10. ' pow' → logprob: -6.962587356567383

Token 9: 'qrt' (ID: 17629)
  Prédit: 'qrt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'qrt' → logprob: -0.0024294056929647923
    2. 'close' → logprob: -6.252429485321045
    3. 'finite' → logprob: -8.002429008483887
    4. 'n' → logprob: -9.502429008483887
    5. 'nt' → logprob: -10.252429008483887
    6. 'nan' → logprob: -10.877429008483887
    7. 'prime' → logprob: -11.377429008483887
    8. 'inf' → logprob: -11.502429008483887
    9. 'in' → logprob: -12.752429008483887
    10. 'ne' → logprob: -13.377429008483887

Token 10: '
' (ID: 198)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.5144026279449463
    2. '\' → logprob: -1.7644026279449463
    3. '```' → logprob: -1.8894026279449463
    4. '(' → logprob: -2.0144026279449463
    5. '
' → logprob: -2.1394026279449463
    6. 'def' → logprob: -2.2644026279449463
    7. '(
' → logprob: -2.6394026279449463
    8. '`' → logprob: -4.264402389526367
    9. ',' → logprob: -5.514402389526367
    10. '``' → logprob: -6.389402389526367

Token 11: 'from' (ID: 2845)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.23463952541351318
    2. '```' → logprob: -1.8596395254135132
    3. '

' → logprob: -4.109639644622803
    4. '\' → logprob: -4.484639644622803
    5. '
' → logprob: -4.609639644622803
    6. '\n' → logprob: -5.109639644622803
    7. '(' → logprob: -5.859639644622803
    8. '``' → logprob: -5.984639644622803
    9. '(
' → logprob: -6.859639644622803
    10. '(

' → logprob: -7.484639644622803

Token 12: ' itertools' (ID: 103178)
  Prédit: ' operator'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' operator' → logprob: -0.6716930866241455
    2. ' sym' → logprob: -1.1716930866241455
    3. ' itertools' → logprob: -2.5466930866241455
    4. 'operator' → logprob: -2.9216930866241455
    5. ' fractions' → logprob: -4.046692848205566
    6. ' collections' → logprob: -4.546692848205566
    7. ' typing' → logprob: -4.671692848205566
    8. 'sym' → logprob: -5.546692848205566
    9. 'collections' → logprob: -6.046692848205566
    10. ' math' → logprob: -7.296692848205566

Token 13: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.391685426235199
    2. 'import' → logprob: -1.1416854858398438
    3. '.' → logprob: -5.516685485839844
    4. ' .' → logprob: -7.516685485839844
    5. '.import' → logprob: -9.141685485839844
    6. ' ' → logprob: -10.391685485839844
    7. '	import' → logprob: -10.391685485839844
    8. '<|end|>' → logprob: -10.891685485839844
    9. '_import' → logprob: -11.016685485839844
    10. ' itertools' → logprob: -12.016685485839844

Token 14: ' count' (ID: 3605)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'count' → logprob: -0.6129852533340454
    2. 'com' → logprob: -0.9879852533340454
    3. 'acc' → logprob: -3.237985134124756
    4. 'per' → logprob: -4.362985134124756
    5. 'product' → logprob: -4.362985134124756
    6. ' permutations' → logprob: -5.362985134124756
    7. ' combinations' → logprob: -5.487985134124756
    8. 'group' → logprob: -5.612985134124756
    9. 'chain' → logprob: -6.237985134124756
    10. ' count' → logprob: -6.237985134124756

Token 15: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6420024633407593
    2. 'def' → logprob: -1.3920024633407593
    3. '\n' → logprob: -2.142002582550049
    4. '\' → logprob: -3.392002582550049
    5. ',' → logprob: -3.767002582550049
    6. '```' → logprob: -3.892002582550049
    7. '(
' → logprob: -4.267002582550049
    8. '(

' → logprob: -5.642002582550049
    9. ':' → logprob: -5.892002582550049
    10. '
' → logprob: -6.392002582550049

Token 16: 'x' (ID: 87)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5492812991142273
    2. '(' → logprob: -1.299281358718872
    3. ':' → logprob: -2.424281358718872
    4. '\' → logprob: -3.674281358718872
    5. '(
' → logprob: -4.299281120300293
    6. '```' → logprob: -4.299281120300293
    7. ',' → logprob: -5.674281120300293
    8. '\n' → logprob: -6.924281120300293
    9. ':def' → logprob: -7.674281120300293
    10. ':
' → logprob: -7.674281120300293

Token 17: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.3467199802398682
    2. '=' → logprob: -1.7217199802398682
    3. ' ' → logprob: -1.9717199802398682
    4. '_' → logprob: -1.9717199802398682
    5. '.' → logprob: -2.346719980239868
    6. '[' → logprob: -2.471719980239868
    7. ')' → logprob: -3.346719980239868
    8. '(' → logprob: -4.096719741821289
    9. ',' → logprob: -4.096719741821289
    10. 's' → logprob: -4.096719741821289

Token 18: ' int' (ID: 677)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.031284164637327194
    2. '1' → logprob: -3.9062840938568115
    3. '0' → logprob: -5.156284332275391
    4. '2' → logprob: -5.406284332275391
    5. '10' → logprob: -9.28128433227539
    6. ' [' → logprob: -9.40628433227539
    7. ' []' → logprob: -10.03128433227539
    8. ' int' → logprob: -10.78128433227539
    9. '3' → logprob: -10.90628433227539
    10. '[' → logprob: -11.03128433227539

Token 19: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00046141279744915664
    2. '(x' → logprob: -8.25046157836914
    3. '<|end|>' → logprob: -9.75046157836914
    4. '(input' → logprob: -10.25046157836914
    5. ' (' → logprob: -10.37546157836914
    6. '()' → logprob: -10.87546157836914
    7. '('' → logprob: -10.87546157836914
    8. ' ' → logprob: -12.37546157836914
    9. '(user' → logprob: -12.62546157836914
    10. '```' → logprob: -12.62546157836914

Token 20: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.39165517687797546
    2. '()' → logprob: -1.1416552066802979
    3. '())' → logprob: -5.891654968261719
    4. '(()' → logprob: -6.891654968261719
    5. ')' → logprob: -7.266654968261719
    6. '('' → logprob: -9.891654968261719
    7. '(
' → logprob: -10.141654968261719
    8. '("("' → logprob: -10.266654968261719
    9. '(

' → logprob: -10.391654968261719
    10. '(`' → logprob: -10.641654968261719

Token 21: 'next' (ID: 7311)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.8059244751930237
    2. ')' → logprob: -1.430924415588379
    3. 'def' → logprob: -2.305924415588379
    4. 'if' → logprob: -2.805924415588379
    5. 'n' → logprob: -3.430924415588379
    6. 's' → logprob: -3.680924415588379
    7. 'd' → logprob: -3.930924415588379
    8. 'result' → logprob: -4.055924415588379
    9. ':' → logprob: -4.555924415588379
    10. 'div' → logprob: -4.805924415588379

Token 22: '(
' (ID: 1607)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7963995933532715
    2. '_num' → logprob: -1.4213995933532715
    3. '(i' → logprob: -2.7963995933532715
    4. '((' → logprob: -3.0463995933532715
    5. '_val' → logprob: -3.2963995933532715
    6. '_number' → logprob: -3.2963995933532715
    7. '_' → logprob: -3.2963995933532715
    8. '_x' → logprob: -4.0463995933532715
    9. '_value' → logprob: -4.5463995933532715
    10. '_i' → logprob: -4.6713995933532715

Token 23: '   ' (ID: 271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.619987964630127
    2. '(count' → logprob: -1.369987964630127
    3. '(lambda' → logprob: -2.494987964630127
    4. '(i' → logprob: -3.369987964630127
    5. 'count' → logprob: -3.994987964630127
    6. '(c' → logprob: -4.119987964630127
    7. '(is' → logprob: -4.244987964630127
    8. '(filter' → logprob: -4.369987964630127
    9. '(
' → logprob: -4.744987964630127
    10. '(x' → logprob: -4.994987964630127

Token 24: ' map' (ID: 4014)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'count' → logprob: -0.7368003726005554
    2. '(i' → logprob: -2.1118004322052
    3. 'x' → logprob: -2.2368004322052
    4. 'reduce' → logprob: -2.6118004322052
    5. 'i' → logprob: -2.9868004322052
    6. '(count' → logprob: -3.2368004322052
    7. 'filter' → logprob: -3.6118004322052
    8. '(' → logprob: -3.7368004322052
    9. '(x' → logprob: -3.9868004322052
    10. 'n' → logprob: -4.111800193786621

Token 25: '(
' (ID: 1607)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1282358467578888
    2. '(lambda' → logprob: -2.1282358169555664
    3. '(
' → logprob: -6.753235816955566
    4. '(int' → logprob: -9.628235816955566
    5. '(abs' → logprob: -10.378235816955566
    6. ')' → logprob: -12.003235816955566
    7. '(pow' → logprob: -12.003235816955566
    8. 'lambda' → logprob: -12.253235816955566
    9. '(str' → logprob: -12.753235816955566
    10. '(is' → logprob: -12.753235816955566

Token 26: '       ' (ID: 309)
  Prédit: '(lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.3889448046684265
    2. 'lambda' → logprob: -2.0139448642730713
    3. '   ' → logprob: -2.8889448642730713
    4. '(' → logprob: -2.8889448642730713
    5. '(
' → logprob: -3.2639448642730713
    6. 'int' → logprob: -4.638944625854492
    7. 'is' → logprob: -5.013944625854492
    8. ')' → logprob: -5.013944625854492
    9. '(int' → logprob: -5.138944625854492
    10. 'str' → logprob: -5.888944625854492

Token 27: ' lambda' (ID: 27871)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lambda' (adapté à ' lambda') → logprob: -0.19580650329589844
    2. '(lambda' → logprob: -2.5708065032958984
    3. '   ' → logprob: -3.0708065032958984
    4. 'is' → logprob: -3.5708065032958984
    5. ' lambda' → logprob: -3.9458065032958984
    6. 'int' → logprob: -5.445806503295898
    7. ' is' → logprob: -6.945806503295898
    8. 'str' → logprob: -7.445806503295898
    9. ')' → logprob: -7.695806503295898
    10. '       ' → logprob: -8.070806503295898

Token 28: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.23710106313228607
    2. 'n' → logprob: -1.9871010780334473
    3. ' i' → logprob: -3.4871010780334473
    4. ' k' → logprob: -4.737101078033447
    5. ' x' → logprob: -4.737101078033447
    6. 'k' → logprob: -5.612101078033447
    7. 'x' → logprob: -5.862101078033447
    8. 'i' → logprob: -5.862101078033447
    9. ' y' → logprob: -5.987101078033447
    10. 'a' → logprob: -6.362101078033447

Token 29: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.010355977341532707
    2. ' :' → logprob: -5.1353559494018555
    3. ',' → logprob: -6.0103559494018555
    4. ':is' → logprob: -6.8853559494018555
    5. '   ' → logprob: -7.8853559494018555
    6. ',n' → logprob: -9.260355949401855
    7. 'n' → logprob: -10.135355949401855
    8. ':n' → logprob: -10.135355949401855
    9. '       ' → logprob: -10.260355949401855
    10. '=' → logprob: -10.385355949401855

Token 30: ' print' (ID: 2123)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.8492617607116699
    2. 'n' → logprob: -1.84926176071167
    3. '   ' → logprob: -2.22426176071167
    4. 'x' → logprob: -2.34926176071167
    5. ' x' → logprob: -2.34926176071167
    6. ' is' → logprob: -3.22426176071167
    7. 'is' → logprob: -4.09926176071167
    8. ' None' → logprob: -5.22426176071167
    9. 'None' → logprob: -5.22426176071167
    10. 'lambda' → logprob: -5.22426176071167

Token 31: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.3727661073207855
    2. '(' → logprob: -1.247766137123108
    3. '(is' → logprob: -4.622766017913818
    4. '('' → logprob: -5.247766017913818
    5. '(x' → logprob: -5.497766017913818
    6. '(f' → logprob: -6.997766017913818
    7. ')' → logprob: -7.122766017913818
    8. '(
' → logprob: -7.247766017913818
    9. '((' → logprob: -7.372766017913818
    10. '(not' → logprob: -8.497766494750977

Token 32: '),
' (ID: 2313)
  Prédit: '**'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '**' → logprob: -0.2524571120738983
    2. '*' → logprob: -2.7524571418762207
    3. ',' → logprob: -2.8774571418762207
    4. ' *' → logprob: -3.2524571418762207
    5. '*n' → logprob: -3.6274571418762207
    6. ' **' → logprob: -4.502457141876221
    7. ')' → logprob: -4.627457141876221
    8. '),' → logprob: -4.752457141876221
    9. ' if' → logprob: -6.127457141876221
    10. ' +' → logprob: -7.002457141876221

Token 33: '       ' (ID: 309)
  Prédit: ' filter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' filter' → logprob: -0.37300601601600647
    2. 'filter' → logprob: -1.998005986213684
    3. '       ' → logprob: -2.9980061054229736
    4. '    ' → logprob: -3.9980061054229736
    5. ' range' → logprob: -4.2480058670043945
    6. '   ' → logprob: -4.3730058670043945
    7. ' is' → logprob: -4.3730058670043945
    8. ' lambda' → logprob: -4.3730058670043945
    9. ' count' → logprob: -4.4980058670043945
    10. ' itertools' → logprob: -4.6230058670043945

Token 34: ' filter' (ID: 6690)
  Prédit: 'filter'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'filter' (adapté à ' filter') → logprob: -0.009755500592291355
    2. '(filter' → logprob: -5.884755611419678
    3. ' filter' → logprob: -6.134755611419678
    4. '   ' → logprob: -6.259755611419678
    5. 'count' → logprob: -6.759755611419678
    6. '(i' → logprob: -8.25975513458252
    7. 'range' → logprob: -8.38475513458252
    8. 'take' → logprob: -8.38475513458252
    9. '(n' → logprob: -8.75975513458252
    10. 'i' → logprob: -8.75975513458252

Token 35: '(
' (ID: 1607)
  Prédit: '(lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.22582852840423584
    2. '(' → logprob: -1.7258285284042358
    3. '(
' → logprob: -3.7258286476135254
    4. 'lambda' → logprob: -11.475828170776367
    5. '(

' → logprob: -12.350828170776367
    6. '(
' → logprob: -12.850828170776367
    7. ' (' → logprob: -13.475828170776367
    8. '=lambda' → logprob: -13.475828170776367
    9. '(is' → logprob: -13.600828170776367
    10. '(None' → logprob: -14.100828170776367

Token 36: '           ' (ID: 352)
  Prédit: '(lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.01842840015888214
    2. 'lambda' → logprob: -4.143428325653076
    3. '(' → logprob: -6.893428325653076
    4. ' lambda' → logprob: -7.518428325653076
    5. '(
' → logprob: -7.768428325653076
    6. '   ' → logprob: -8.768428802490234
    7. '=lambda' → logprob: -9.018428802490234
    8. ')' → logprob: -10.018428802490234
    9. ' (' → logprob: -10.268428802490234
    10. '(is' → logprob: -10.643428802490234

Token 37: ' lambda' (ID: 27871)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lambda' (adapté à ' lambda') → logprob: -0.022857666015625
    2. '(lambda' → logprob: -3.897857666015625
    3. '   ' → logprob: -6.772857666015625
    4. '           ' → logprob: -7.522857666015625
    5. ' lambda' → logprob: -7.647857666015625
    6. 'None' → logprob: -9.522857666015625
    7. 'is' → logprob: -10.022857666015625
    8. '=lambda' → logprob: -11.522857666015625
    9. '       ' → logprob: -12.272857666015625
    10. ')' → logprob: -12.647857666015625

Token 38: ' n' (ID: 297)
  Prédit: ' lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lambda' → logprob: -0.1019778922200203
    2. 'lambda' → logprob: -2.476977825164795
    3. ' n' → logprob: -5.726977825164795
    4. ' x' → logprob: -5.851977825164795
    5. 'n' → logprob: -5.976977825164795
    6. '(lambda' → logprob: -6.601977825164795
    7. '=lambda' → logprob: -7.101977825164795
    8. 'x' → logprob: -7.476977825164795
    9. 's' → logprob: -7.726977825164795
    10. ' is' → logprob: -7.851977825164795

Token 39: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.16914233565330505
    2. ' :' → logprob: -2.794142246246338
    3. ' lambda' → logprob: -3.294142246246338
    4. '=lambda' → logprob: -4.419142246246338
    5. 'is' → logprob: -4.669142246246338
    6. 'lambda' → logprob: -4.794142246246338
    7. ' x' → logprob: -5.044142246246338
    8. ':is' → logprob: -5.419142246246338
    9. ' n' → logprob: -5.919142246246338
    10. 'n' → logprob: -6.044142246246338

Token 40: ' not' (ID: 625)
  Prédit: ' all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' all' → logprob: -0.8244789838790894
    2. 'n' → logprob: -1.5744789838790894
    3. ' n' → logprob: -1.8244789838790894
    4. 'all' → logprob: -2.449479103088379
    5. 'x' → logprob: -2.824479103088379
    6. ' x' → logprob: -3.824479103088379
    7. 'is' → logprob: -4.824479103088379
    8. '   ' → logprob: -5.449479103088379
    9. ' is' → logprob: -5.449479103088379
    10. 'lambda' → logprob: -6.449479103088379

Token 41: ' any' (ID: 1062)
  Prédit: 'any'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'any' → logprob: -0.05342688411474228
    2. ' any' → logprob: -3.80342698097229
    3. 'n' → logprob: -4.303426742553711
    4. 'x' → logprob: -4.553426742553711
    5. 'all' → logprob: -6.678426742553711
    6. 'reduce' → logprob: -6.678426742553711
    7. '(any' → logprob: -6.928426742553711
    8. 'is' → logprob: -7.803426742553711
    9. '[' → logprob: -8.178426742553711
    10. ' n' → logprob: -8.303426742553711

Token 42: '(map' (ID: 16946)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.15838931500911713
    2. '(' → logprob: -2.4083893299102783
    3. '(
' → logprob: -3.6583893299102783
    4. '(is' → logprob: -4.283389091491699
    5. '(x' → logprob: -5.283389091491699
    6. '((' → logprob: -5.283389091491699
    7. '(lambda' → logprob: -5.783389091491699
    8. 'n' → logprob: -6.033389091491699
    9. '(i' → logprob: -7.408389091491699
    10. '(not' → logprob: -8.2833890914917

Token 43: '(lambda' (ID: 43341)
  Prédit: '(lambda'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.11460253596305847
    2. '(' → logprob: -2.239602565765381
    3. '(
' → logprob: -6.364602565765381
    4. '(n' → logprob: -10.614602088928223
    5. '((' → logprob: -11.364602088928223
    6. 'lambda' → logprob: -12.114602088928223
    7. '(
' → logprob: -12.239602088928223
    8. '   ' → logprob: -13.114602088928223
    9. ' (' → logprob: -13.614602088928223
    10. '(l' → logprob: -13.864602088928223

Token 44: ' d' (ID: 272)
  Prédit: '(lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.4598296284675598
    2. 'lambda' → logprob: -1.584829568862915
    3. ' lambda' → logprob: -2.584829568862915
    4. '   ' → logprob: -3.459829568862915
    5. 'n' → logprob: -4.084829807281494
    6. '(' → logprob: -4.209829807281494
    7. '(n' → logprob: -4.584829807281494
    8. ' (' → logprob: -5.459829807281494
    9. '               ' → logprob: -5.584829807281494
    10. ' n' → logprob: -6.209829807281494

Token 45: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.4703625440597534
    2. '(lambda' → logprob: -1.4703625440597534
    3. '(' → logprob: -3.470362663269043
    4. '=lambda' → logprob: -3.595362663269043
    5. '(n' → logprob: -3.970362663269043
    6. 'lambda' → logprob: -4.220362663269043
    7. 'd' → logprob: -4.345362663269043
    8. ' lambda' → logprob: -4.470362663269043
    9. '   ' → logprob: -5.345362663269043
    10. 'n' → logprob: -5.595362663269043

Token 46: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.09237241744995117
    2. ' n' → logprob: -2.717372417449951
    3. '(n' → logprob: -4.092372417449951
    4. ' (' → logprob: -6.342372417449951
    5. '   ' → logprob: -6.967372417449951
    6. 'lambda' → logprob: -7.467372417449951
    7. '           ' → logprob: -7.842372417449951
    8. ' lambda' → logprob: -8.21737289428711
    9. '(lambda' → logprob: -8.21737289428711
    10. '       ' → logprob: -8.71737289428711

Token 47: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.2167530506849289
    2. '%d' → logprob: -1.7167530059814453
    3. '%' → logprob: -4.216753005981445
    4. ' ' → logprob: -8.341753005981445
    5. '%n' → logprob: -9.841753005981445
    6. '   ' → logprob: -10.216753005981445
    7. ' d' → logprob: -11.154253005981445
    8. 'd' → logprob: -11.216753005981445
    9. '%i' → logprob: -11.216753005981445
    10. ' ' → logprob: -11.404253005981445

Token 48: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.055063389241695404
    2. ' d' → logprob: -2.930063486099243
    3. ' ' → logprob: -9.430063247680664
    4. '   ' → logprob: -10.305063247680664
    5. '(d' → logprob: -10.430063247680664
    6. ' (' → logprob: -11.055063247680664
    7. '  ' → logprob: -11.805063247680664
    8. '	d' → logprob: -12.930063247680664
    9. '    ' → logprob: -13.055063247680664
    10. '(' → logprob: -13.180063247680664

Token 49: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.39864423871040344
    2. '==' → logprob: -1.148644208908081
    3. ' ' → logprob: -4.89864444732666
    4. ' and' → logprob: -6.77364444732666
    5. 'and' → logprob: -7.14864444732666
    6. ' is' → logprob: -7.52364444732666
    7. '**' → logprob: -8.02364444732666
    8. '=' → logprob: -8.14864444732666
    9. ')' → logprob: -8.77364444732666
    10. '   ' → logprob: -8.77364444732666

Token 50: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.004625222180038691
    2. ' ' → logprob: -5.37962532043457
    3. '   ' → logprob: -12.62962532043457
    4. '  ' → logprob: -15.25462532043457
    5. '           ' → logprob: -15.75462532043457
    6. '       ' → logprob: -15.87962532043457
    7. '                           ' → logprob: -15.94212532043457
    8. '1' → logprob: -16.00462532043457
    9. '    ' → logprob: -16.19212532043457
    10. '```' → logprob: -16.25462532043457

Token 51: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0007137430948205292
    2. ' ' → logprob: -7.25071382522583
    3. '1' → logprob: -13.625713348388672
    4. '   ' → logprob: -14.688213348388672
    5. 'n' → logprob: -14.938213348388672
    6. 'd' → logprob: -15.313213348388672
    7. '  ' → logprob: -15.563213348388672
    8. '

' → logprob: -15.688213348388672
    9. 'o' → logprob: -16.750713348388672
    10. '    ' → logprob: -16.813213348388672

Token 52: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0022683741990476847
    2. ' ,' → logprob: -6.627268314361572
    3. '   ' → logprob: -8.12726879119873
    4. ' and' → logprob: -9.12726879119873
    5. '       ' → logprob: -9.25226879119873
    6. 'range' → logprob: -9.62726879119873
    7. '           ' → logprob: -9.75226879119873
    8. ' range' → logprob: -10.25226879119873
    9. ' for' → logprob: -10.37726879119873
    10. '               ' → logprob: -10.37726879119873

Token 53: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.4748842716217041
    2. ' range' → logprob: -0.9748842716217041
    3. ' is' → logprob: -8.349884033203125
    4. '(range' → logprob: -8.724884033203125
    5. '	range' → logprob: -9.099884033203125
    6. 'is' → logprob: -9.224884033203125
    7. '   ' → logprob: -9.724884033203125
    8. 'filter' → logprob: -10.224884033203125
    9. 'map' → logprob: -10.974884033203125
    10. 'count' → logprob: -11.099884033203125

Token 54: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0001669485354796052
    2. '2' → logprob: -9.625166893005371
    3. ' (' → logprob: -10.375166893005371
    4. '   ' → logprob: -10.500166893005371
    5. ' ' → logprob: -11.500166893005371
    6. '(
' → logprob: -11.500166893005371
    7. ')' → logprob: -12.000166893005371
    8. '       ' → logprob: -13.125166893005371
    9. '                           ' → logprob: -13.125166893005371
    10. '                       ' → logprob: -13.250166893005371

Token 55: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.009054131805896759
    2. ' ' → logprob: -4.759054183959961
    3. '   ' → logprob: -8.384054183959961
    4. '(' → logprob: -9.384054183959961
    5. ')' → logprob: -10.009054183959961
    6. '1' → logprob: -11.259054183959961
    7. 'from' → logprob: -12.071554183959961
    8. '       ' → logprob: -12.134054183959961
    9. '           ' → logprob: -12.384054183959961
    10. '))' → logprob: -12.384054183959961

Token 56: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.07319997251033783
    2. ',is' → logprob: -2.698199987411499
    3. ' ,' → logprob: -5.82319974899292
    4. 'is' → logprob: -8.948200225830078
    5. '   ' → logprob: -9.198200225830078
    6. ' ' → logprob: -10.698200225830078
    7. ' is' → logprob: -11.698200225830078
    8. ',int' → logprob: -12.198200225830078
    9. '1' → logprob: -12.448200225830078
    10. '    ' → logprob: -12.698200225830078

Token 57: ' is' (ID: 382)
  Prédit: 'is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'is' → logprob: -0.049034569412469864
    2. ' is' → logprob: -3.049034595489502
    3. '   ' → logprob: -8.549034118652344
    4. ' ' → logprob: -9.549034118652344
    5. '           ' → logprob: -10.049034118652344
    6. ')is' → logprob: -10.174034118652344
    7. '    ' → logprob: -10.299034118652344
    8. '  ' → logprob: -11.424034118652344
    9. '	is' → logprob: -11.549034118652344
    10. '       ' → logprob: -11.674034118652344

Token 58: 'qrt' (ID: 17629)
  Prédit: 'qrt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'qrt' → logprob: -0.0006479830481112003
    2. 'sqrt' → logprob: -7.375648021697998
    3. 'rt' → logprob: -10.87564754486084
    4. ' sqrt' → logprob: -13.87564754486084
    5. 'r' → logprob: -14.50064754486084
    6. 's' → logprob: -14.62564754486084
    7. 'root' → logprob: -15.75064754486084
    8. '√' → logprob: -15.75064754486084
    9. ')' → logprob: -16.750648498535156
    10. 'q' → logprob: -16.875648498535156

Token 59: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.012726247310638428
    2. '(' → logprob: -4.387726306915283
    3. '(x' → logprob: -9.387725830078125
    4. '(
' → logprob: -9.387725830078125
    5. 'n' → logprob: -10.137725830078125
    6. ' (' → logprob: -12.887725830078125
    7. 'x' → logprob: -13.637725830078125
    8. '(

' → logprob: -13.887725830078125
    9. '(s' → logprob: -14.012725830078125
    10. ')' → logprob: -14.012725830078125

Token 60: ')' (ID: 8)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.04788012430071831
    2. ')' → logprob: -3.672880172729492
    3. '(' → logprob: -4.172880172729492
    4. ')+' → logprob: -5.297880172729492
    5. 'n' → logprob: -7.547880172729492
    6. ' (' → logprob: -9.297880172729492
    7. ')n' → logprob: -9.422880172729492
    8. ' ' → logprob: -9.797880172729492
    9. ' )' → logprob: -10.172880172729492
    10. '(
' → logprob: -10.297880172729492

Token 61: ' +' (ID: 659)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.02736509032547474
    2. '(' → logprob: -3.652365207672119
    3. ' (' → logprob: -8.277364730834961
    4. '+' → logprob: -8.777364730834961
    5. ')' → logprob: -9.027364730834961
    6. '()+' → logprob: -9.027364730834961
    7. ')+' → logprob: -9.277364730834961
    8. 'n' → logprob: -9.527364730834961
    9. '(+' → logprob: -9.527364730834961
    10. ' +' → logprob: -9.902364730834961

Token 62: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0012491621309891343
    2. ' ' → logprob: -6.751249313354492
    3. '(' → logprob: -9.876249313354492
    4. '   ' → logprob: -10.876249313354492
    5. '2' → logprob: -12.376249313354492
    6. '  ' → logprob: -13.501249313354492
    7. '(n' → logprob: -14.001249313354492
    8. ')' → logprob: -14.501249313354492
    9. '    ' → logprob: -14.751249313354492
    10. '       ' → logprob: -15.251249313354492

Token 63: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00031425125780515373
    2. ' ' → logprob: -8.125314712524414
    3. '(' → logprob: -12.000314712524414
    4. '   ' → logprob: -12.250314712524414
    5. 'n' → logprob: -12.625314712524414
    6. '(n' → logprob: -13.750314712524414
    7. '2' → logprob: -14.000314712524414
    8. '  ' → logprob: -14.500314712524414
    9. ' n' → logprob: -15.250314712524414
    10. 'd' → logprob: -15.375314712524414

Token 64: '))),
' (ID: 91673)
  Prédit: '))),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))),' → logprob: -0.9948019981384277
    2. '))),
' → logprob: -1.1198019981384277
    3. ')))' → logprob: -1.3698019981384277
    4. ')' → logprob: -3.8698019981384277
    5. '))' → logprob: -4.244801998138428
    6. ')))),' → logprob: -4.869801998138428
    7. ')))
' → logprob: -5.619801998138428
    8. '))))' → logprob: -6.494801998138428
    9. ')),' → logprob: -7.619801998138428
    10. '   ' → logprob: -8.744802474975586

Token 65: '           ' (ID: 352)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'count' → logprob: -0.23674796521663666
    2. ' count' → logprob: -2.111747980117798
    3. '       ' → logprob: -2.486747980117798
    4. 'filter' → logprob: -5.861747741699219
    5. '   ' → logprob: -6.111747741699219
    6. ' filter' → logprob: -8.236747741699219
    7. ' ' → logprob: -8.236747741699219
    8. '(count' → logprob: -8.361747741699219
    9. '	count' → logprob: -8.736747741699219
    10. 'range' → logprob: -9.111747741699219

Token 66: ' count' (ID: 3605)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'count' (adapté à ' count') → logprob: -0.08914699405431747
    2. ' count' → logprob: -2.7141470909118652
    3. '       ' → logprob: -4.589147090911865
    4. '   ' → logprob: -4.839147090911865
    5. 'filter' → logprob: -7.964147090911865
    6. '(count' → logprob: -8.089146614074707
    7. '	count' → logprob: -9.214146614074707
    8. ' ' → logprob: -9.714146614074707
    9. 'range' → logprob: -9.964146614074707
    10. '    ' → logprob: -10.964146614074707

Token 67: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.04943572357296944
    2. '(' → logprob: -3.049435615539551
    3. '(max' → logprob: -7.674435615539551
    4. '(
' → logprob: -9.04943561553955
    5. '(start' → logprob: -9.17443561553955
    6. '((' → logprob: -9.67443561553955
    7. 'x' → logprob: -10.17443561553955
    8. '(n' → logprob: -10.54943561553955
    9. ' (' → logprob: -12.17443561553955
    10. '(s' → logprob: -12.29943561553955

Token 68: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.21031716465950012
    2. ')))' → logprob: -1.7103171348571777
    3. '))))' → logprob: -5.210317134857178
    4. '))' → logprob: -5.960317134857178
    5. ')));' → logprob: -7.960317134857178
    6. ')
' → logprob: -8.710317611694336
    7. ' )' → logprob: -9.335317611694336
    8. '+' → logprob: -9.960317611694336
    9. ')))),' → logprob: -10.335317611694336
    10. '),' → logprob: -10.585317611694336

Token 69: '       ' (ID: 309)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.03652859851717949
    2. ')))' → logprob: -3.6615285873413086
    3. '))' → logprob: -5.161528587341309
    4. '       ' → logprob: -5.911528587341309
    5. ')
' → logprob: -6.661528587341309
    6. '))))' → logprob: -8.411528587341309
    7. '   ' → logprob: -8.661528587341309
    8. ' )' → logprob: -10.911528587341309
    9. ')
' → logprob: -12.036528587341309
    10. ')))
' → logprob: -12.036528587341309

Token 70: ' )
' (ID: 3270)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.05226866900920868
    2. ')
' (adapté à ' )
') → logprob: -4.0522685050964355
    3. ')))' → logprob: -4.1772685050964355
    4. '   ' → logprob: -4.4272685050964355
    5. '))' → logprob: -5.8022685050964355
    6. '       ' → logprob: -5.9272685050964355
    7. ' )' → logprob: -8.177268981933594
    8. '))))' → logprob: -9.177268981933594
    9. ')
' → logprob: -10.302268981933594
    10. ',' → logprob: -10.927268981933594

Token 71: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00384722463786602
    2. '))' → logprob: -5.878847122192383
    3. ')))' → logprob: -7.378847122192383
    4. '   ' → logprob: -8.003847122192383
    5. '       ' → logprob: -9.878847122192383
    6. ')
' → logprob: -11.003847122192383
    7. '))))' → logprob: -12.128847122192383
    8. ' )' → logprob: -13.003847122192383
    9. '0' → logprob: -13.378847122192383
    10. ')`' → logprob: -13.503847122192383

Token 72: ' ),
' (ID: 4954)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.06286543607711792
    2. '))' → logprob: -2.8128654956817627
    3. ')))' → logprob: -7.437865257263184
    4. ')
' → logprob: -8.312865257263184
    5. ',' → logprob: -10.812865257263184
    6. ' )' → logprob: -11.062865257263184
    7. ')`' → logprob: -11.812865257263184
    8. '))
' → logprob: -12.562865257263184
    9. '),' → logprob: -12.812865257263184
    10. '))))' → logprob: -12.937865257263184

Token 73: '   ' (ID: 271)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.003335275687277317
    2. ' ' → logprob: -6.003335475921631
    3. ')' → logprob: -7.753335475921631
    4. '2' → logprob: -8.628334999084473
    5. '10' → logprob: -10.128334999084473
    6. '0' → logprob: -10.253334999084473
    7. 'stop' → logprob: -10.378334999084473
    8. '  ' → logprob: -10.378334999084473
    9. '   ' → logprob: -10.503334999084473
    10. 'limit' → logprob: -10.628334999084473

Token 74: ' None' (ID: 4662)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00016861737822182477
    2. '2' → logprob: -9.125168800354004
    3. ' ' → logprob: -10.375168800354004
    4. '10' → logprob: -11.750168800354004
    5. ')' → logprob: -12.125168800354004
    6. '3' → logprob: -12.625168800354004
    7. '5' → logprob: -12.750168800354004
    8. '100' → logprob: -12.750168800354004
    9. '0' → logprob: -13.000168800354004
    10. 'None' (adapté à ' None') → logprob: -14.250168800354004

Token 75: '
' (ID: 198)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0004947714623995125
    2. ')
' → logprob: -7.625494956970215
    3. '
' → logprob: -12.875494956970215
    4. ' )' → logprob: -13.750494956970215
    5. '#' → logprob: -14.375494956970215
    6. '))' → logprob: -14.500494956970215
    7. ')

' → logprob: -14.625494956970215
    8. '```' → logprob: -15.250494956970215
    9. ')#' → logprob: -15.500494956970215
    10. ')`' → logprob: -15.750494956970215

Token 76: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.755678961984813e-05
    2. ')
' → logprob: -9.500077247619629
    3. ' )' → logprob: -13.875077247619629
    4. '
' → logprob: -14.625077247619629
    5. '))' → logprob: -14.875077247619629
    6. '#' → logprob: -15.500077247619629
    7. ')`' → logprob: -15.625077247619629
    8. ')

' → logprob: -15.750077247619629
    9. '```' → logprob: -15.875077247619629
    10. ']' → logprob: -16.750078201293945


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 74
Tokens correctement prédits (1ère position, stricte): 22
Tokens correctement prédits (1ère position, avec adaptation): 26
Tokens correctement prédits (top 10): 53
Précision stricte (1ère position): 29.73%
Précision adaptée (1ère position): 35.14%
Précision (top 10): 71.62%
================================================================================
