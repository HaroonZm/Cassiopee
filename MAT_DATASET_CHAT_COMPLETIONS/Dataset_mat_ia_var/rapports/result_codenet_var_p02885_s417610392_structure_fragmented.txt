================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:41:41
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def read_input():
    return input()

def parse_input(s):
    return s.split()

def convert_to_ints(lst):
    return list(map(int, lst))

def get_a_b():
    s = read_input()
    lst = parse_input(s)
    ints = convert_to_ints(lst)
    return ints[0], ints[1]

def compute_b_times_2(b):
    return b * 2

def compute_difference(a, val):
    return a - val

def clamp_min_zero(x):
    return max(0, x)

def process():
    a, b = get_a_b()
    b2 = compute_b_times_2(b)
    diff = compute_difference(a, b2)
    result = clamp_min_zero(diff)
    print_result(result)

def print_result(res):
    print(res)

if __name__ == '__main__':
    process()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' read' (ID: 1729)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003238316858187318
    2. '_' → logprob: -6.003238201141357
    3. '():' → logprob: -7.878238201141357
    4. '(:' → logprob: -8.753238677978516
    5. '(_:' → logprob: -9.503238677978516
    6. '```' → logprob: -9.878238677978516
    7. ':' → logprob: -10.378238677978516
    8. ' (' → logprob: -10.878238677978516
    9. '(_' → logprob: -11.253238677978516
    10. '()' → logprob: -12.378238677978516

Token 4: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.7243372797966003
    2. '\n' → logprob: -0.9743372797966003
    3. '\' → logprob: -2.599337339401245
    4. '   ' → logprob: -3.224337339401245
    5. ':' → logprob: -5.224337100982666
    6. '``' → logprob: -5.974337100982666
    7. ''\' → logprob: -5.974337100982666
    8. '    
' → logprob: -5.974337100982666
    9. '
' → logprob: -6.349337100982666
    10. 'newline' → logprob: -6.474337100982666

Token 5: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.49144166707992554
    2. 'input' → logprob: -1.9914417266845703
    3. '```' → logprob: -2.7414417266845703
    4. '   ' → logprob: -2.8664417266845703
    5. 'data' → logprob: -3.2414417266845703
    6. 'x' → logprob: -3.4914417266845703
    7. 'user' → logprob: -4.24144172668457
    8. 'n' → logprob: -4.24144172668457
    9. 'text' → logprob: -4.36644172668457
    10. 'r' → logprob: -5.49144172668457

Token 6: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.509859025478363
    2. ' input' → logprob: -1.2598590850830078
    3. 'input' → logprob: -2.259859085083008
    4. '"' → logprob: -4.884859085083008
    5. ''' → logprob: -7.009859085083008
    6. ' []' → logprob: -7.009859085083008
    7. ' None' → logprob: -7.759859085083008
    8. '  ' → logprob: -7.884859085083008
    9. '(input' → logprob: -8.134859085083008
    10. ' "' → logprob: -8.384859085083008

Token 7: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006807856727391481
    2. '()' → logprob: -5.006807804107666
    3. '(
' → logprob: -10.881808280944824
    4. '.' → logprob: -11.131808280944824
    5. ' (' → logprob: -11.256808280944824
    6. '(

' → logprob: -11.381808280944824
    7. '```' → logprob: -11.381808280944824
    8. '(.)' → logprob: -12.506808280944824
    9. '('' → logprob: -12.631808280944824
    10. '().' → logprob: -13.131808280944824

Token 8: 'def' (ID: 1314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -1.4814282655715942
    2. '\n' → logprob: -1.6064282655715942
    3. '(' → logprob: -1.8564282655715942
    4. '```' → logprob: -1.8564282655715942
    5. '\' → logprob: -2.8564281463623047
    6. '()' → logprob: -2.9814281463623047
    7. '<|end|>' → logprob: -3.3564281463623047
    8. '#' → logprob: -3.9814281463623047
    9. '
' → logprob: -4.231428146362305
    10. '(
' → logprob: -4.606428146362305

Token 9: ' parse' (ID: 8420)
  Prédit: ' process'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' process' → logprob: -1.309850811958313
    2. ' read' → logprob: -1.559850811958313
    3. ' write' → logprob: -1.684850811958313
    4. ' calculate' → logprob: -1.809850811958313
    5. ' main' → logprob: -2.0598506927490234
    6. ' compute' → logprob: -4.559850692749023
    7. ' parse' → logprob: -4.934850692749023
    8. ' space' → logprob: -5.559850692749023
    9. ' print' → logprob: -5.684850692749023
    10. ' add' → logprob: -5.809850692749023

Token 10: '_input' (ID: 12507)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.05310804024338722
    2. '(' → logprob: -3.053107976913452
    3. '_input' → logprob: -5.553108215332031
    4. '_line' → logprob: -8.678108215332031
    5. '_token' → logprob: -10.053108215332031
    6. ' _' → logprob: -10.178108215332031
    7. '_data' → logprob: -10.178108215332031
    8. '_text' → logprob: -10.553108215332031
    9. ' (' → logprob: -10.678108215332031
    10. '_space' → logprob: -10.678108215332031

Token 11: '(s' (ID: 1858)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.32176294922828674
    2. '_' → logprob: -1.3217629194259644
    3. '(_' → logprob: -6.446763038635254
    4. '('_' → logprob: -6.446763038635254
    5. '(_)' → logprob: -6.696763038635254
    6. '(_:' → logprob: -7.696763038635254
    7. '_:' → logprob: -7.821763038635254
    8. '("("' → logprob: -8.071763038635254
    9. '_input' → logprob: -8.196763038635254
    10. '_parent' → logprob: -8.321763038635254

Token 12: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.02366107888519764
    2. ')' → logprob: -3.7736611366271973
    3. ':' → logprob: -8.648660659790039
    4. '):
' → logprob: -9.398660659790039
    5. ' ):' → logprob: -9.898660659790039
    6. '_' → logprob: -10.023660659790039
    7. ',' → logprob: -11.773660659790039
    8. '[' → logprob: -11.898660659790039
    9. '_input' → logprob: -11.898660659790039
    10. 's' → logprob: -12.023660659790039

Token 13: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014427915215492249
    2. ' return' → logprob: -4.88942813873291
    3. '    ' → logprob: -5.38942813873291
    4. ' s' → logprob: -6.76442813873291
    5. 'return' → logprob: -8.13942813873291
    6. '(' → logprob: -8.76442813873291
    7. 's' → logprob: -8.76442813873291
    8. ' ' → logprob: -9.26442813873291
    9. '[' → logprob: -9.63942813873291
    10. '  ' → logprob: -10.13942813873291

Token 14: ' return' (ID: 622)
  Prédit: ' s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.25622498989105225
    2. 's' → logprob: -1.5062249898910522
    3. '   ' → logprob: -5.756225109100342
    4. ' return' → logprob: -7.131225109100342
    5. 'return' (adapté à ' return') → logprob: -9.506224632263184
    6. 'int' → logprob: -9.756224632263184
    7. '    ' → logprob: -10.256224632263184
    8. ' int' → logprob: -10.256224632263184
    9. ' split' → logprob: -10.381224632263184
    10. ' list' → logprob: -10.881224632263184

Token 15: ' s' (ID: 265)
  Prédit: ' s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.5945854783058167
    2. 's' → logprob: -1.4695854187011719
    3. ' int' → logprob: -2.094585418701172
    4. 'int' → logprob: -2.969585418701172
    5. ' list' → logprob: -3.344585418701172
    6. 'list' → logprob: -4.969585418701172
    7. '[int' → logprob: -7.469585418701172
    8. ' ' → logprob: -8.594585418701172
    9. ' tuple' → logprob: -8.719585418701172
    10. ' [' → logprob: -8.969585418701172

Token 16: '.split' (ID: 10347)
  Prédit: '.split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.split' → logprob: -0.08056908845901489
    2. '.strip' → logprob: -3.20556902885437
    3. '<|end|>' → logprob: -3.83056902885437
    4. '<|end|>' → logprob: -5.330569267272949
    5. '[' → logprob: -5.705569267272949
    6. '.lower' → logprob: -6.705569267272949
    7. '```' → logprob: -6.705569267272949
    8. 'def' → logprob: -6.705569267272949
    9. '.upper' → logprob: -7.205569267272949
    10. '.replace' → logprob: -7.830569267272949

Token 17: '()

' (ID: 5874)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '('' → logprob: -0.04730678349733353
    2. '(' → logprob: -3.172306776046753
    3. '("("' → logprob: -5.547307014465332
    4. '()' → logprob: -8.172307014465332
    5. ''' → logprob: -9.797307014465332
    6. '('.')' → logprob: -10.297307014465332
    7. '(`' → logprob: -12.047307014465332
    8. '(',' → logprob: -12.172307014465332
    9. '("' → logprob: -12.672307014465332
    10. '(('' → logprob: -13.172307014465332

Token 18: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00022833107504993677
    2. '```' → logprob: -9.000227928161621
    3. '\' → logprob: -10.125227928161621
    4. '<|end|>' → logprob: -11.125227928161621
    5. '
' → logprob: -12.000227928161621
    6. 'de' → logprob: -12.000227928161621
    7. '#' → logprob: -12.125227928161621
    8. '

' → logprob: -12.250227928161621
    9. 'd' → logprob: -12.250227928161621
    10. '[' → logprob: -12.500227928161621

Token 19: ' convert' (ID: 8452)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.09230252355337143
    2. 'main' → logprob: -2.7173025608062744
    3. ' process' → logprob: -4.092302322387695
    4. 'process' → logprob: -5.342302322387695
    5. ' solve' → logprob: -8.967302322387695
    6. ' calculate' → logprob: -8.967302322387695
    7. 'calculate' → logprob: -9.342302322387695
    8. 'solve' → logprob: -10.217302322387695
    9. ' tokenize' → logprob: -10.592302322387695
    10. ' sum' → logprob: -10.842302322387695

Token 20: '_to' (ID: 5089)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.2304149717092514
    2. '_to' → logprob: -1.6054149866104126
    3. '_token' → logprob: -6.230414867401123
    4. '_tokens' → logprob: -7.355414867401123
    5. '_value' → logprob: -8.105415344238281
    6. '_input' → logprob: -8.105415344238281
    7. '_(' → logprob: -8.355415344238281
    8. '(' → logprob: -8.730415344238281
    9. '(_' → logprob: -8.855415344238281
    10. '```' → logprob: -8.855415344238281

Token 21: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.0003460712905507535
    2. 'int' → logprob: -8.125346183776855
    3. '_' → logprob: -10.750346183776855
    4. '_float' → logprob: -11.375346183776855
    5. '_in' → logprob: -12.625346183776855
    6. '_numbers' → logprob: -13.000346183776855
    7. '_list' → logprob: -13.250346183776855
    8. ' int' → logprob: -13.250346183776855
    9. '_tokens' → logprob: -13.250346183776855
    10. '_string' → logprob: -13.500346183776855

Token 22: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.2035895586013794
    2. '(' → logprob: -2.32858943939209
    3. '(s' → logprob: -2.45358943939209
    4. '()' → logprob: -8.32858943939209
    5. '(token' → logprob: -9.20358943939209
    6. ' (' → logprob: -9.82858943939209
    7. 'def' → logprob: -9.95358943939209
    8. '_' → logprob: -10.07858943939209
    9. '(x' → logprob: -10.57858943939209
    10. '```' → logprob: -10.57858943939209

Token 23: '(lst' (ID: 95688)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.008196686394512653
    2. '(s' → logprob: -5.008196830749512
    3. ' (' → logprob: -6.633196830749512
    4. '("("' → logprob: -9.383196830749512
    5. '('' → logprob: -11.633196830749512
    6. 's' → logprob: -11.758196830749512
    7. '(strings' → logprob: -12.008196830749512
    8. '(tokens' → logprob: -12.133196830749512
    9. '(n' → logprob: -12.258196830749512
    10. '(x' → logprob: -12.383196830749512

Token 24: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.6374929547309875
    2. ')' → logprob: -0.7624929547309875
    3. '(' → logprob: -6.262493133544922
    4. '(lst' → logprob: -6.887493133544922
    5. '):
' → logprob: -6.887493133544922
    6. '):

' → logprob: -8.387493133544922
    7. ' )' → logprob: -8.387493133544922
    8. ' ):' → logprob: -8.887493133544922
    9. '[]):' → logprob: -9.762493133544922
    10. '   ' → logprob: -10.137493133544922

Token 25: '   ' (ID: 271)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.1503298133611679
    2. '   ' → logprob: -2.275329828262329
    3. '[int' → logprob: -3.775329828262329
    4. '[:]' → logprob: -5.15032958984375
    5. '(' → logprob: -5.90032958984375
    6. ' return' → logprob: -6.40032958984375
    7. 'return' → logprob: -7.02532958984375
    8. '[:' → logprob: -7.40032958984375
    9. '[i' → logprob: -7.65032958984375
    10. '[]' → logprob: -7.65032958984375

Token 26: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0867177248001099
    2. ' return' → logprob: -1.3367177248001099
    3. '[int' → logprob: -1.9617177248001099
    4. 'return' (adapté à ' return') → logprob: -2.0867176055908203
    5. ' [' → logprob: -2.7117176055908203
    6. '[' → logprob: -2.7117176055908203
    7. ' list' → logprob: -7.08671760559082
    8. '[i' → logprob: -7.71171760559082
    9. '[list' → logprob: -7.71171760559082
    10. ' lst' → logprob: -8.83671760559082

Token 27: ' list' (ID: 1562)
  Prédit: ' ['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.08945540338754654
    2. ' list' → logprob: -2.7144553661346436
    3. '[' → logprob: -4.214455604553223
    4. '[list' → logprob: -5.714455604553223
    5. '[int' → logprob: -6.839455604553223
    6. 'list' → logprob: -8.714455604553223
    7. '[List' → logprob: -12.214455604553223
    8. '[len' → logprob: -12.964455604553223
    9. ' ' → logprob: -13.464455604553223
    10. ' map' → logprob: -13.714455604553223

Token 28: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2026406228542328
    2. '(map' → logprob: -1.7026406526565552
    3. '(lst' → logprob: -6.952640533447266
    4. '(int' → logprob: -8.702640533447266
    5. '(
' → logprob: -10.202640533447266
    6. '(list' → logprob: -11.202640533447266
    7. '(filter' → logprob: -11.577640533447266
    8. '(

' → logprob: -11.577640533447266
    9. '(range' → logprob: -11.702640533447266
    10. '(convert' → logprob: -12.577640533447266

Token 29: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0015429535415023565
    2. '(' → logprob: -6.501543045043945
    3. 'int' → logprob: -10.626543045043945
    4. ' int' → logprob: -11.876543045043945
    5. '<int' → logprob: -12.626543045043945
    6. ' (' → logprob: -13.126543045043945
    7. '=int' → logprob: -13.876543045043945
    8. ',int' → logprob: -14.126543045043945
    9. '   ' → logprob: -14.251543045043945
    10. '(
' → logprob: -14.626543045043945

Token 30: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.001890210434794426
    2. ',l' → logprob: -7.001890182495117
    3. ' ,' → logprob: -7.626890182495117
    4. '(lst' → logprob: -7.751890182495117
    5. '(' → logprob: -10.251890182495117
    6. ' lst' → logprob: -11.876890182495117
    7. 'lst' → logprob: -12.376890182495117
    8. ',
' → logprob: -12.501890182495117
    9. ',ll' → logprob: -12.876890182495117
    10. ',(' → logprob: -13.501890182495117

Token 31: ' lst' (ID: 33384)
  Prédit: ' lst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lst' → logprob: -0.6931536197662354
    2. 'lst' → logprob: -0.6931536197662354
    3. '(lst' → logprob: -12.193153381347656
    4. '_lst' → logprob: -13.943153381347656
    5. '.lst' → logprob: -15.818153381347656
    6. ' ' → logprob: -16.568153381347656
    7. 'Lst' → logprob: -16.818153381347656
    8. 'list' → logprob: -17.318153381347656
    9. '   ' → logprob: -17.693153381347656
    10. ')' → logprob: -17.818153381347656

Token 32: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -4.036524842376821e-05
    2. ')' → logprob: -10.875040054321289
    3. ')))' → logprob: -10.875040054321289
    4. ' ))' → logprob: -13.250040054321289
    5. '))
' → logprob: -14.625040054321289
    6. '   ' → logprob: -16.75004005432129
    7. '()))' → logprob: -17.00004005432129
    8. ' ' → logprob: -17.62504005432129
    9. '));' → logprob: -17.87504005432129
    10. '))))' → logprob: -18.50004005432129

Token 33: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.9743012671824545e-05
    2. '\' → logprob: -11.625020027160645
    3. '```' → logprob: -12.250020027160645
    4. '#' → logprob: -12.750020027160645
    5. ' def' → logprob: -14.375020027160645
    6. '<|end|>' → logprob: -14.500020027160645
    7. 'de' → logprob: -14.625020027160645
    8. '
' → logprob: -14.875020027160645
    9. '

' → logprob: -15.250020027160645
    10. '<|end|>' → logprob: -15.625020027160645

Token 34: ' get' (ID: 717)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.031269606202840805
    2. ' solve' → logprob: -4.656269550323486
    3. ' process' → logprob: -4.781269550323486
    4. ' calculate' → logprob: -5.156269550323486
    5. ' find' → logprob: -5.656269550323486
    6. ' compute' → logprob: -6.406269550323486
    7. 'main' → logprob: -7.906269550323486
    8. ' sum' → logprob: -7.906269550323486
    9. ' factorial' → logprob: -7.906269550323486
    10. ' count' → logprob: -8.156270027160645

Token 35: '_a' (ID: 10852)
  Prédit: '_max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_max' → logprob: -0.1592371016740799
    2. '_sum' → logprob: -3.0342371463775635
    3. '_input' → logprob: -3.4092371463775635
    4. '_' → logprob: -4.284236907958984
    5. '_unique' → logprob: -4.659236907958984
    6. '_user' → logprob: -5.159236907958984
    7. '_data' → logprob: -5.159236907958984
    8. '_total' → logprob: -5.784236907958984
    9. '_min' → logprob: -5.909236907958984
    10. '_numbers' → logprob: -6.159236907958984

Token 36: '_b' (ID: 1535)
  Prédit: 'dd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dd' → logprob: -0.9481714963912964
    2. 'rray' → logprob: -1.5731714963912964
    3. 'verage' → logprob: -2.323171615600586
    4. 'ns' → logprob: -2.573171615600586
    5. 'vg' → logprob: -3.073171615600586
    6. '_b' → logprob: -3.823171615600586
    7. 'rea' → logprob: -3.948171615600586
    8. 'dv' → logprob: -3.948171615600586
    9. 'v' → logprob: -4.448171615600586
    10. 'nd' → logprob: -4.573171615600586

Token 37: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.000660015270113945
    2. '()' → logprob: -7.875659942626953
    3. '_' → logprob: -9.000659942626953
    4. '(' → logprob: -9.625659942626953
    5. ' ():' → logprob: -10.250659942626953
    6. '():
' → logprob: -10.625659942626953
    7. '_values' → logprob: -11.875659942626953
    8. '()(' → logprob: -12.125659942626953
    9. '_input' → logprob: -12.625659942626953
    10. '(a' → logprob: -13.000659942626953

Token 38: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009913917630910873
    2. 'a' → logprob: -4.884913921356201
    3. ' return' → logprob: -7.009913921356201
    4. 'return' → logprob: -7.384913921356201
    5. ' a' → logprob: -8.009913444519043
    6. 'input' → logprob: -8.634913444519043
    7. '(a' → logprob: -8.884913444519043
    8. ' ' → logprob: -10.634913444519043
    9. '    
' → logprob: -10.759913444519043
    10. '(' → logprob: -11.009913444519043

Token 39: ' s' (ID: 265)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.21865613758563995
    2. '   ' → logprob: -1.8436561822891235
    3. 's' (adapté à ' s') → logprob: -4.093656063079834
    4. 'return' → logprob: -4.593656063079834
    5. 'line' → logprob: -4.968656063079834
    6. ' a' → logprob: -5.968656063079834
    7. ' line' → logprob: -7.218656063079834
    8. 'input' → logprob: -7.718656063079834
    9. ' return' → logprob: -8.218656539916992
    10. ' s' → logprob: -8.468656539916992

Token 40: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.014178205281496048
    2. '=' → logprob: -4.264178276062012
    3. '=input' → logprob: -11.764178276062012
    4. ' ' → logprob: -12.014178276062012
    5. '   ' → logprob: -15.514178276062012
    6. ' ' → logprob: -16.139177322387695
    7. ' =)' → logprob: -16.139177322387695
    8. '_' → logprob: -16.389177322387695
    9. '  ' → logprob: -16.889177322387695
    10. '_input' → logprob: -17.139177322387695

Token 41: ' read' (ID: 1729)
  Prédit: ' read'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.1644776612520218
    2. 'read' → logprob: -2.164477586746216
    3. ' input' → logprob: -3.414477586746216
    4. 'input' → logprob: -5.539477825164795
    5. ' ' → logprob: -10.789477348327637
    6. '	read' → logprob: -12.164477348327637
    7. ' readline' → logprob: -13.039477348327637
    8. '  ' → logprob: -14.039477348327637
    9. '(read' → logprob: -14.289477348327637
    10. ' ' → logprob: -15.351977348327637

Token 42: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -4.4849443838757e-06
    2. '_' → logprob: -12.375004768371582
    3. '_line' → logprob: -17.000003814697266
    4. '_in' → logprob: -17.000003814697266
    5. '_output' → logprob: -17.250003814697266
    6. '_inputs' → logprob: -18.750003814697266
    7. '__' → logprob: -19.000003814697266
    8. ' _' → logprob: -19.125003814697266
    9. '_Input' → logprob: -19.125003814697266
    10. '_user' → logprob: -19.375003814697266

Token 43: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0006572735728695989
    2. '())' → logprob: -7.500657081604004
    3. ')' → logprob: -9.250657081604004
    4. '()
' → logprob: -11.875657081604004
    5. '()

' → logprob: -15.000657081604004
    6. '(' → logprob: -15.125657081604004
    7. ' ()' → logprob: -15.375657081604004
    8. '().' → logprob: -16.00065803527832
    9. '()`' → logprob: -16.75065803527832
    10. '>()' → logprob: -17.00065803527832

Token 44: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.005929863080382347
    2. '<|end|>' → logprob: -6.380929946899414
    3. 'return' → logprob: -6.755929946899414
    4. '    
' → logprob: -7.255929946899414
    5. ' ' → logprob: -7.630929946899414
    6. ' return' → logprob: -7.880929946899414
    7. 'tokens' → logprob: -8.130929946899414
    8. '
' → logprob: -8.255929946899414
    9. '  ' → logprob: -8.380929946899414
    10. 'a' → logprob: -9.255929946899414

Token 45: ' lst' (ID: 33384)
  Prédit: 'lst'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lst' (adapté à ' lst') → logprob: -0.11551428586244583
    2. 'parts' → logprob: -2.8655142784118652
    3. 'tokens' → logprob: -2.9905142784118652
    4. 'parsed' → logprob: -6.990514278411865
    5. 'words' → logprob: -8.740514755249023
    6. 'args' → logprob: -8.990514755249023
    7. 'items' → logprob: -8.990514755249023
    8. 'return' → logprob: -9.365514755249023
    9. '   ' → logprob: -9.365514755249023
    10. 'arr' → logprob: -9.865514755249023

Token 46: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.029754776507616043
    2. '=' → logprob: -3.529754877090454
    3. ')' → logprob: -13.279754638671875
    4. 's' → logprob: -13.529754638671875
    5. ' ' → logprob: -15.279754638671875
    6. '(' → logprob: -15.404754638671875
    7. '  ' → logprob: -15.904754638671875
    8. '()' → logprob: -16.154754638671875
    9. '   ' → logprob: -16.154754638671875
    10. '_' → logprob: -16.404754638671875

Token 47: ' parse' (ID: 8420)
  Prédit: ' parse'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' parse' → logprob: -0.10022705048322678
    2. 'parse' → logprob: -2.350227117538452
    3. '(parse' → logprob: -10.975227355957031
    4. '=parse' → logprob: -13.475227355957031
    5. '	parse' → logprob: -14.225227355957031
    6. ' s' → logprob: -14.975227355957031
    7. 's' → logprob: -15.100227355957031
    8. ' ' → logprob: -15.600227355957031
    9. '_parse' → logprob: -16.22522735595703
    10. '.parse' → logprob: -16.35022735595703

Token 48: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -5.512236498361744e-07
    2. '_' → logprob: -14.500000953674316
    3. '_inputs' → logprob: -18.25
    4. '_output' → logprob: -18.625
    5. '_in' → logprob: -18.625
    6. 'input' → logprob: -19.0
    7. '_s' → logprob: -19.75
    8. '_Input' → logprob: -20.5
    9. '```' → logprob: -20.625
    10. '_INPUT' → logprob: -20.625

Token 49: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.00011021859245374799
    2. '(' → logprob: -9.125110626220703
    3. ' (' → logprob: -13.625110626220703
    4. 's' → logprob: -17.125110626220703
    5. '(lst' → logprob: -18.000110626220703
    6. ')' → logprob: -18.750110626220703
    7. ')(' → logprob: -18.875110626220703
    8. '```' → logprob: -19.000110626220703
    9. ' ' → logprob: -19.375110626220703
    10. '(input' → logprob: -19.875110626220703

Token 50: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00016992862219922245
    2. ')
' → logprob: -8.75016975402832
    3. '   ' → logprob: -11.62516975402832
    4. ' )' → logprob: -13.62516975402832
    5. '))' → logprob: -14.87516975402832
    6. '()' → logprob: -15.37516975402832
    7. '())' → logprob: -15.62516975402832
    8. ' ' → logprob: -16.25016975402832
    9. ')
' → logprob: -16.25016975402832
    10. ')

' → logprob: -16.87516975402832

Token 51: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0066220578737556934
    2. 'return' → logprob: -5.256621837615967
    3. ' return' → logprob: -7.006621837615967
    4. '    
' → logprob: -8.381622314453125
    5. 'a' → logprob: -9.131622314453125
    6. '```' → logprob: -10.006622314453125
    7. '    ' → logprob: -10.756622314453125
    8. ' ' → logprob: -10.881622314453125
    9. '  ' → logprob: -11.131622314453125
    10. 'b' → logprob: -11.381622314453125

Token 52: ' ints' (ID: 121629)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.07895709574222565
    2. ' return' → logprob: -2.8289570808410645
    3. 'a' → logprob: -4.8289570808410645
    4. 'ints' (adapté à ' ints') → logprob: -5.5789570808410645
    5. '   ' → logprob: -6.8289570808410645
    6. 'result' → logprob: -7.0789570808410645
    7. 'lst' → logprob: -7.2039570808410645
    8. ' ints' → logprob: -7.3289570808410645
    9. ' a' → logprob: -7.4539570808410645
    10. 'int' → logprob: -7.8289570808410645

Token 53: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3978479206562042
    2. '=' → logprob: -1.1478478908538818
    3. '_' → logprob: -4.897848129272461
    4. 's' → logprob: -6.522848129272461
    5. ')' → logprob: -7.272848129272461
    6. '(' → logprob: -7.647848129272461
    7. '_lst' → logprob: -8.272848129272461
    8. '_=' → logprob: -8.897848129272461
    9. '<|end|>' → logprob: -9.397848129272461
    10. '   ' → logprob: -9.522848129272461

Token 54: ' convert' (ID: 8452)
  Prédit: ' convert'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' convert' → logprob: -0.00861456897109747
    2. 'convert' → logprob: -4.758614540100098
    3. '(convert' → logprob: -17.508615493774414
    4. '_convert' → logprob: -18.008615493774414
    5. '.convert' → logprob: -18.508615493774414
    6. ' ' → logprob: -20.258615493774414
    7. ' convertible' → logprob: -20.758615493774414
    8. ' convertir' → logprob: -20.758615493774414
    9. ' ' → logprob: -21.508615493774414
    10. ' conversion' → logprob: -21.633615493774414

Token 55: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: -6.704273118884885e-07
    2. '_t' → logprob: -14.750000953674316
    3. '_' → logprob: -16.25
    4. '```' → logprob: -16.75
    5. '_of' → logprob: -17.25
    6. '##_' → logprob: -18.5
    7. ')_' → logprob: -18.75
    8. 'ed' → logprob: -19.125
    9. 't' → logprob: -19.125
    10. 's' → logprob: -19.125

Token 56: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.02575068548321724
    2. 't' → logprob: -4.400750637054443
    3. '_t' → logprob: -4.775750637054443
    4. 'ints' → logprob: -6.150750637054443
    5. 'ts' → logprob: -7.150750637054443
    6. 'int' → logprob: -7.150750637054443
    7. '_ts' → logprob: -7.275750637054443
    8. 'nts' → logprob: -9.275751113891602
    9. ' _' → logprob: -10.025751113891602
    10. 's' → logprob: -10.650751113891602

Token 57: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -9.729906196298543e-06
    2. '_s' → logprob: -12.125009536743164
    3. 'ts' → logprob: -13.000009536743164
    4. 'sts' → logprob: -13.875009536743164
    5. '_to' → logprob: -14.875009536743164
    6. ' s' → logprob: -15.250009536743164
    7. '(s' → logprob: -15.750009536743164
    8. '_ts' → logprob: -16.250009536743164
    9. 'ss' → logprob: -16.750009536743164
    10. ')s' → logprob: -17.125009536743164

Token 58: '(lst' (ID: 95688)
  Prédit: '(lst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lst' → logprob: -0.004100604448467493
    2. '(' → logprob: -5.504100799560547
    3. ' (' → logprob: -11.379100799560547
    4. '(ls' → logprob: -12.129100799560547
    5. '(l' → logprob: -13.754100799560547
    6. '(nums' → logprob: -14.004100799560547
    7. '(len' → logprob: -14.629100799560547
    8. '(list' → logprob: -14.754100799560547
    9. '(lhs' → logprob: -14.754100799560547
    10. '(lista' → logprob: -15.129100799560547

Token 59: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0011745095252990723
    2. ')
' → logprob: -6.751174449920654
    3. ')return' → logprob: -13.001174926757812
    4. ' )' → logprob: -13.751174926757812
    5. '   ' → logprob: -15.251174926757812
    6. ')
' → logprob: -16.126174926757812
    7. '[' → logprob: -16.126174926757812
    8. ')

' → logprob: -16.126174926757812
    9. '()' → logprob: -16.376174926757812
    10. '))' → logprob: -16.626174926757812

Token 60: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.33463266491889954
    2. '
' → logprob: -2.209632635116577
    3. 'return' → logprob: -2.459632635116577
    4. '    
' → logprob: -3.459632635116577
    5. ' return' → logprob: -3.459632635116577
    6. '	return' → logprob: -5.209632873535156
    7. '[' → logprob: -5.209632873535156
    8. '```' → logprob: -5.584632873535156
    9. '  
' → logprob: -6.209632873535156
    10. '(' → logprob: -6.334632873535156

Token 61: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.3882714509963989
    2. ' return' → logprob: -1.388271450996399
    3. '   ' → logprob: -2.6382713317871094
    4. 'a' → logprob: -7.263271331787109
    5. ' a' → logprob: -9.51327133178711
    6. ' ' → logprob: -13.01327133178711
    7. '	return' → logprob: -13.38827133178711
    8. '```' → logprob: -14.13827133178711
    9. '    
' → logprob: -14.88827133178711
    10. '
' → logprob: -15.13827133178711

Token 62: ' ints' (ID: 121629)
  Prédit: ' ints'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ints' → logprob: -0.4747750759124756
    2. 'ints' → logprob: -0.9747750759124756
    3. '(int' → logprob: -8.474775314331055
    4. 'int' → logprob: -8.724775314331055
    5. ' tuple' → logprob: -8.974775314331055
    6. ' (' → logprob: -9.599775314331055
    7. 'tuple' → logprob: -9.724775314331055
    8. ' int' → logprob: -9.849775314331055
    9. 'Ints' → logprob: -12.474775314331055
    10. ' integers' → logprob: -12.724775314331055

Token 63: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.004556153900921345
    2. '()' → logprob: -6.754556179046631
    3. '<|end|>' → logprob: -6.879556179046631
    4. '()[' → logprob: -7.004556179046631
    5. '[]' → logprob: -7.129556179046631
    6. '```' → logprob: -8.754555702209473
    7. '(' → logprob: -9.004555702209473
    8. '[:]' → logprob: -9.254555702209473
    9. '\[' → logprob: -9.254555702209473
    10. '[-' → logprob: -10.629555702209473

Token 64: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -9.088346359931165e-07
    2. ' ' → logprob: -14.250000953674316
    3. '1' → logprob: -16.0
    4. '2' → logprob: -16.5
    5. ']' → logprob: -18.125
    6. '-' → logprob: -18.625
    7. '00' → logprob: -18.75
    8. '۰' → logprob: -18.75
    9. '０' → logprob: -19.5
    10. ':' → logprob: -19.5

Token 65: '],' (ID: 2155)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.04540032520890236
    2. ']' → logprob: -3.420400381088257
    3. '],' → logprob: -5.045400142669678
    4. ' ,' → logprob: -5.295400142669678
    5. ' ]' → logprob: -9.045400619506836
    6. ' ],' → logprob: -9.795400619506836
    7. ')' → logprob: -10.795400619506836
    8. ' ' → logprob: -11.670400619506836
    9. '),' → logprob: -11.795400619506836
    10. '<|end|>' → logprob: -11.795400619506836

Token 66: ' ints' (ID: 121629)
  Prédit: 'ints'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ints' → logprob: -0.10027653723955154
    2. ' ints' → logprob: -2.350276470184326
    3. 'int' → logprob: -9.600276947021484
    4. 'Ints' → logprob: -14.225276947021484
    5. ' int' → logprob: -14.350276947021484
    6. 'inte' → logprob: -14.850276947021484
    7. ' integers' → logprob: -15.475276947021484
    8. '_int' → logprob: -16.350276947021484
    9. ' intents' → logprob: -16.475276947021484
    10. ' ' → logprob: -17.100276947021484

Token 67: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0004399671161081642
    2. '1' → logprob: -7.8754401206970215
    3. '[-' → logprob: -10.000439643859863
    4. '```' → logprob: -12.000439643859863
    5. ' [' → logprob: -12.375439643859863
    6. '<|end|>' → logprob: -13.500439643859863
    7. ']' → logprob: -14.625439643859863
    8. '2' → logprob: -15.000439643859863
    9. '`' → logprob: -15.000439643859863
    10. ')' → logprob: -15.375439643859863

Token 68: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.512236498361744e-07
    2. ']' → logprob: -15.375000953674316
    3. ' ' → logprob: -15.500000953674316
    4. '-' → logprob: -16.75
    5. '0' → logprob: -16.875
    6. '   ' → logprob: -18.25
    7. '```' → logprob: -18.3125
    8. '2' → logprob: -18.5
    9. '' → logprob: -18.5625
    10. '4' → logprob: -18.9375

Token 69: ']

' (ID: 3144)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -4.7755875129951164e-05
    2. ']' → logprob: -10.00004768371582
    3. '}' → logprob: -13.75004768371582
    4. ')
' → logprob: -14.87504768371582
    5. ')]' → logprob: -15.37504768371582
    6. '])' → logprob: -15.50004768371582
    7. ' )' → logprob: -16.12504768371582
    8. '))' → logprob: -16.50004768371582
    9. '<|end|>' → logprob: -16.75004768371582
    10. '）' → logprob: -16.87504768371582

Token 70: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00872199796140194
    2. '
' → logprob: -5.758721828460693
    3. '#' → logprob: -6.383721828460693
    4. 'a' → logprob: -6.883721828460693
    5. '<|end|>' → logprob: -7.008721828460693
    6. '\' → logprob: -7.508721828460693
    7. 'd' → logprob: -8.008722305297852
    8. '\n' → logprob: -8.133722305297852
    9. '

' → logprob: -8.508722305297852
    10. '```' → logprob: -8.633722305297852

Token 71: ' compute' (ID: 23864)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.043654195964336395
    2. ' solve' → logprob: -3.418654203414917
    3. ' calculate' → logprob: -5.168653964996338
    4. ' compute' → logprob: -5.918653964996338
    5. ' process' → logprob: -7.543653964996338
    6. ' find' → logprob: -8.793654441833496
    7. 'main' → logprob: -8.918654441833496
    8. ' solution' → logprob: -8.918654441833496
    9. ' factorial' → logprob: -8.918654441833496
    10. 'solve' → logprob: -9.418654441833496

Token 72: '_b' (ID: 1535)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5836881399154663
    2. '_' → logprob: -1.4586881399154663
    3. '(a' → logprob: -2.458688259124756
    4. '_sum' → logprob: -2.583688259124756
    5. '_a' → logprob: -3.708688259124756
    6. '_max' → logprob: -5.083688259124756
    7. '_total' → logprob: -5.833688259124756
    8. '_area' → logprob: -6.958688259124756
    9. '_result' → logprob: -7.083688259124756
    10. '_space' → logprob: -7.208688259124756

Token 73: '_times' (ID: 53425)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -1.0421642065048218
    2. '_' → logprob: -1.1671642065048218
    3. '(a' → logprob: -2.1671643257141113
    4. '()' → logprob: -2.6671643257141113
    5. '*' → logprob: -2.7921643257141113
    6. '**' → logprob: -4.417164325714111
    7. '-' → logprob: -4.417164325714111
    8. '_sum' → logprob: -4.792164325714111
    9. '   ' → logprob: -4.917164325714111
    10. '+' → logprob: -4.917164325714111

Token 74: '_' (ID: 62)
  Prédit: '(a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.13769559562206268
    2. '_a' → logprob: -2.512695550918579
    3. '(' → logprob: -3.262695550918579
    4. '_' → logprob: -5.137695789337158
    5. '_b' → logprob: -6.262695789337158
    6. '_(' → logprob: -7.512695789337158
    7. 'a' → logprob: -8.0126953125
    8. ' (' → logprob: -8.7626953125
    9. '(_' → logprob: -9.0126953125
    10. '(b' → logprob: -9.1376953125

Token 75: '2' (ID: 17)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.000453910295618698
    2. 'b' → logprob: -8.75045394897461
    3. '2' → logprob: -9.00045394897461
    4. '_a' → logprob: -9.87545394897461
    5. 'two' → logprob: -11.18795394897461
    6. 'A' → logprob: -11.37545394897461
    7. '(a' → logprob: -11.68795394897461
    8. '```' → logprob: -11.81295394897461
    9. '7' → logprob: -12.43795394897461
    10. 'c' → logprob: -12.56295394897461

Token 76: '(b' (ID: 3229)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.15920577943325043
    2. '(' → logprob: -2.409205675125122
    3. '(a' → logprob: -2.909205675125122
    4. '()' → logprob: -6.534205913543701
    5. '(b' → logprob: -6.784205913543701
    6. ' ():' → logprob: -10.909205436706543
    7. '_a' → logprob: -10.909205436706543
    8. 'a' → logprob: -10.909205436706543
    9. '(:' → logprob: -11.034205436706543
    10. '(*' → logprob: -11.034205436706543

Token 77: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.006472948472946882
    2. ')' → logprob: -5.131473064422607
    3. '):
' → logprob: -8.63147258758545
    4. '*' → logprob: -8.63147258758545
    5. ' ):' → logprob: -8.75647258758545
    6. ' *' → logprob: -11.25647258758545
    7. ' )' → logprob: -12.38147258758545
    8. ':' → logprob: -12.50647258758545
    9. ')*' → logprob: -13.25647258758545
    10. ' ' → logprob: -14.00647258758545

Token 78: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.578995943069458
    2. '   ' → logprob: -0.828995943069458
    3. ':
' → logprob: -5.953995704650879
    4. ' return' → logprob: -8.703995704650879
    5. ':return' → logprob: -8.828995704650879
    6. '():' → logprob: -10.078995704650879
    7. 'return' → logprob: -10.203995704650879
    8. '):' → logprob: -10.953995704650879
    9. ' :' → logprob: -11.328995704650879
    10. '(' → logprob: -12.203995704650879

Token 79: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.306365430355072
    2. ' return' → logprob: -1.8063654899597168
    3. 'return' (adapté à ' return') → logprob: -2.306365489959717
    4. '```' → logprob: -12.431365013122559
    5. 'b' → logprob: -13.056365013122559
    6. '    ' → logprob: -13.431365013122559
    7. ' ' → logprob: -14.681365013122559
    8. '	return' → logprob: -14.806365013122559
    9. '    
' → logprob: -15.181365013122559
    10. '
' → logprob: -15.431365013122559

Token 80: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.1269727349281311
    2. ' b' → logprob: -2.1269726753234863
    3. '2' → logprob: -10.376973152160645
    4. ' ' → logprob: -11.251973152160645
    5. ' ' → logprob: -15.751973152160645
    6. '   ' → logprob: -16.626972198486328
    7. '(b' → logprob: -16.876972198486328
    8. '4' → logprob: -17.126972198486328
    9. '`' → logprob: -17.376972198486328
    10. '0' → logprob: -17.501972198486328

Token 81: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.16022889316082
    2. '*' → logprob: -1.9102288484573364
    3. ' ' → logprob: -13.160228729248047
    4. ' **' → logprob: -13.785228729248047
    5. '**' → logprob: -14.535228729248047
    6. ' ' → logprob: -15.035228729248047
    7. ' *
' → logprob: -15.660228729248047
    8. '```' → logprob: -15.660228729248047
    9. '*b' → logprob: -16.035228729248047
    10. '`' → logprob: -16.410228729248047

Token 82: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0024756586644798517
    2. ' ' → logprob: -6.002475738525391
    3. '```' → logprob: -18.00247573852539
    4. '   ' → logprob: -18.12747573852539
    5. '  ' → logprob: -18.87747573852539
    6. ' ' → logprob: -19.25247573852539
    7. '`' → logprob: -20.37747573852539
    8. '۲' → logprob: -20.50247573852539
    9. '²' → logprob: -21.37747573852539
    10. '２' → logprob: -21.50247573852539

Token 83: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -4.246537173457909e-06
    2. ' ' → logprob: -12.375003814697266
    3. '```' → logprob: -19.500003814697266
    4. '`' → logprob: -20.625003814697266
    5. '  ' → logprob: -21.250003814697266
    6. '   ' → logprob: -21.250003814697266
    7. '２' → logprob: -21.500003814697266
    8. '۲' → logprob: -21.625003814697266
    9. '²' → logprob: -22.125003814697266
    10. '(' → logprob: -23.000003814697266

Token 84: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5314970016479492
    2. '<|end|>' → logprob: -1.0314970016479492
    3. '
' → logprob: -4.031497001647949
    4. '\n' → logprob: -4.031497001647949
    5. '\' → logprob: -5.406497001647949
    6. 'a' → logprob: -5.656497001647949
    7. '```' → logprob: -5.656497001647949
    8. '<|end|>' → logprob: -5.656497001647949
    9. 'b' → logprob: -6.281497001647949
    10. '*' → logprob: -6.656497001647949

Token 85: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.019244372844696045
    2. 'a' → logprob: -4.144244194030762
    3. '<|end|>' → logprob: -6.644244194030762
    4. '```' → logprob: -7.394244194030762
    5. '\' → logprob: -7.519244194030762
    6. '

' → logprob: -8.144244194030762
    7. 'b' → logprob: -9.269244194030762
    8. '
' → logprob: -9.894244194030762
    9. '#' → logprob: -10.019244194030762
    10. '\n' → logprob: -10.269244194030762

Token 86: ' compute' (ID: 23864)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.18068020045757294
    2. ' main' → logprob: -1.8056801557540894
    3. 'compute' → logprob: -7.430680274963379
    4. 'solve' → logprob: -8.930680274963379
    5. 'process' → logprob: -10.055680274963379
    6. 'a' → logprob: -10.055680274963379
    7. ' compute' → logprob: -10.430680274963379
    8. 'solution' → logprob: -11.055680274963379
    9. 'calculate' → logprob: -11.305680274963379
    10. ' solve' → logprob: -11.430680274963379

Token 87: '_difference' (ID: 123771)
  Prédit: '_a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_a' → logprob: -0.005822144914418459
    2. '_b' → logprob: -6.13082218170166
    3. 'a' → logprob: -6.75582218170166
    4. '_' → logprob: -7.25582218170166
    5. '_sum' → logprob: -7.75582218170166
    6. '_c' → logprob: -8.13082218170166
    7. '(a' → logprob: -8.25582218170166
    8. '_result' → logprob: -9.00582218170166
    9. '_s' → logprob: -9.13082218170166
    10. '_max' → logprob: -9.25582218170166

Token 88: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.0032524545677006245
    2. '(' → logprob: -5.8782525062561035
    3. ' (' → logprob: -8.128252029418945
    4. '(b' → logprob: -8.878252029418945
    5. '(
' → logprob: -13.128252029418945
    6. '(s' → logprob: -13.128252029418945
    7. 'def' → logprob: -13.128252029418945
    8. '(A' → logprob: -14.003252029418945
    9. '((' → logprob: -14.128252029418945
    10. '()' → logprob: -14.128252029418945

Token 89: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00044437398901209235
    2. ',b' → logprob: -7.750444412231445
    3. ' ,' → logprob: -11.250444412231445
    4. ',
' → logprob: -15.250444412231445
    5. '_,' → logprob: -16.000444412231445
    6. '):' → logprob: -16.750444412231445
    7. ')' → logprob: -16.750444412231445
    8. '-' → logprob: -17.375444412231445
    9. 'b' → logprob: -17.375444412231445
    10. ',a' → logprob: -17.375444412231445

Token 90: ' val' (ID: 1459)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.07011449337005615
    2. ' b' → logprob: -2.6951146125793457
    3. 'compute' → logprob: -8.945114135742188
    4. ' compute' → logprob: -10.320114135742188
    5. '   ' → logprob: -12.445114135742188
    6. '    ' → logprob: -13.070114135742188
    7. ' ' → logprob: -13.195114135742188
    8. '	b' → logprob: -13.445114135742188
    9. 'def' → logprob: -13.695114135742188
    10. 'a' → logprob: -14.382614135742188

Token 91: '):
' (ID: 1883)
  Prédit: 'ue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ue' → logprob: -0.833484411239624
    2. '):' → logprob: -0.958484411239624
    3. '):
' → logprob: -1.708484411239624
    4. '):

' → logprob: -7.583484649658203
    5. '2' → logprob: -9.583484649658203
    6. ')' → logprob: -9.583484649658203
    7. ':' → logprob: -10.333484649658203
    8. '1' → logprob: -10.333484649658203
    9. 'u' → logprob: -10.458484649658203
    10. '):
' → logprob: -10.833484649658203

Token 92: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00526091456413269
    2. ' return' → logprob: -5.380260944366455
    3. 'return' → logprob: -7.380260944366455
    4. '    
' → logprob: -11.880260467529297
    5. '```' → logprob: -12.005260467529297
    6. '	return' → logprob: -13.380260467529297
    7. ':return' → logprob: -14.380260467529297
    8. ' ' → logprob: -15.130260467529297
    9. '       ' → logprob: -15.255260467529297
    10. '    ' → logprob: -15.630260467529297

Token 93: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.10111752152442932
    2. ' return' → logprob: -2.9761176109313965
    3. '   ' → logprob: -3.1011176109313965
    4. 'val' → logprob: -8.851117134094238
    5. ' val' → logprob: -10.976117134094238
    6. 'a' → logprob: -11.601117134094238
    7. '    
' → logprob: -12.476117134094238
    8. '	return' → logprob: -13.351117134094238
    9. ' a' → logprob: -13.726117134094238
    10. ' ' → logprob: -13.726117134094238

Token 94: ' a' (ID: 261)
  Prédit: ' val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' val' → logprob: -1.0688462257385254
    2. 'a' → logprob: -1.4438462257385254
    3. ' a' → logprob: -1.4438462257385254
    4. 'val' → logprob: -1.6938462257385254
    5. ' abs' → logprob: -7.818846225738525
    6. 'abs' → logprob: -8.318845748901367
    7. '   ' → logprob: -9.818845748901367
    8. ' ' → logprob: -11.818845748901367
    9. ' ' → logprob: -12.068845748901367
    10. 'b' → logprob: -12.193845748901367

Token 95: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.08268619328737259
    2. ' -' → logprob: -2.582686185836792
    3. '-val' → logprob: -5.582686424255371
    4. ' val' → logprob: -10.707686424255371
    5. ' ' → logprob: -12.832686424255371
    6. 'val' → logprob: -14.082686424255371
    7. ' ' → logprob: -14.957686424255371
    8. '[val' → logprob: -15.332686424255371
    9. '‌' → logprob: -16.582685470581055
    10. '-Val' → logprob: -16.707685470581055

Token 96: ' val' (ID: 1459)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.0019286326132714748
    2. ' val' → logprob: -6.251928806304932
    3. '	val' → logprob: -19.501928329467773
    4. '_val' → logprob: -20.126928329467773
    5. '(val' → logprob: -21.626928329467773
    6. '[val' → logprob: -21.626928329467773
    7. '```' → logprob: -22.626928329467773
    8. 'v' → logprob: -22.626928329467773
    9. '   ' → logprob: -23.001928329467773
    10. ',val' → logprob: -23.501928329467773

Token 97: '

' (ID: 279)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.26590853929519653
    2. 'def' → logprob: -1.5159084796905518
    3. 'b' → logprob: -5.015908718109131
    4. 'print' → logprob: -5.265908718109131
    5. 'result' → logprob: -6.265908718109131
    6. 'val' → logprob: -9.265908241271973
    7. 'c' → logprob: -10.390908241271973
    8. 'if' → logprob: -10.765908241271973
    9. 'for' → logprob: -11.640908241271973
    10. 'res' → logprob: -11.890908241271973

Token 98: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.08246996998786926
    2. 'a' → logprob: -2.582469940185547
    3. 'print' → logprob: -5.707469940185547
    4. 'if' → logprob: -8.832469940185547
    5. 'b' → logprob: -9.582469940185547
    6. 'result' → logprob: -11.457469940185547
    7. '
' → logprob: -11.832469940185547
    8. 'for' → logprob: -12.207469940185547
    9. 'val' → logprob: -12.582469940185547
    10. '    
' → logprob: -13.207469940185547

Token 99: ' clamp' (ID: 76503)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.2819633483886719
    2. 'main' → logprob: -1.4069633483886719
    3. 'compute' → logprob: -8.156963348388672
    4. ' compute' → logprob: -8.531963348388672
    5. ' solve' → logprob: -9.281963348388672
    6. 'solve' → logprob: -9.281963348388672
    7. 'calculate' → logprob: -9.906963348388672
    8. ' calculate' → logprob: -10.406963348388672
    9. 'process' → logprob: -10.531963348388672
    10. ' process' → logprob: -11.656963348388672

Token 100: '_min' (ID: 15950)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.738884449005127
    2. '(value' → logprob: -0.738884449005127
    3. '(x' → logprob: -4.113884449005127
    4. ' (' → logprob: -4.363884449005127
    5. '(a' → logprob: -4.613884449005127
    6. '(val' → logprob: -5.988884449005127
    7. '(num' → logprob: -7.113884449005127
    8. '(n' → logprob: -7.238884449005127
    9. '(number' → logprob: -8.363883972167969
    10. '_difference' → logprob: -8.488883972167969

Token 101: '_zero' (ID: 53468)
  Prédit: '(value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(value' → logprob: -0.18718500435352325
    2. 'imum' → logprob: -2.687185049057007
    3. '(a' → logprob: -3.062185049057007
    4. '(' → logprob: -3.687185049057007
    5. '(x' → logprob: -4.187184810638428
    6. '(val' → logprob: -5.937184810638428
    7. '_' → logprob: -5.937184810638428
    8. '(def' → logprob: -6.562184810638428
    9. 'def' → logprob: -6.937184810638428
    10. 'imize' → logprob: -7.187184810638428

Token 102: '(x' (ID: 4061)
  Prédit: '(value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(value' → logprob: -0.06347915530204773
    2. '(x' → logprob: -3.06347918510437
    3. '(val' → logprob: -4.563478946685791
    4. '(' → logprob: -5.563478946685791
    5. '(v' → logprob: -8.31347942352295
    6. '(s' → logprob: -9.56347942352295
    7. ' (' → logprob: -10.18847942352295
    8. '(a' → logprob: -10.56347942352295
    9. '(d' → logprob: -10.81347942352295
    10. '(def' → logprob: -10.81347942352295

Token 103: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00865014549344778
    2. '):
' → logprob: -4.758650302886963
    3. ')' → logprob: -10.633649826049805
    4. ' ):' → logprob: -11.883649826049805
    5. '):
' → logprob: -13.258649826049805
    6. ':' → logprob: -13.383649826049805
    7. '):

' → logprob: -14.758649826049805
    8. '   ' → logprob: -15.008649826049805
    9. '=' → logprob: -15.383649826049805
    10. ' ' → logprob: -16.758649826049805

Token 104: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -5.848420551046729e-05
    2. 'return' → logprob: -10.0000581741333
    3. ' return' → logprob: -11.3750581741333
    4. 'if' → logprob: -13.8750581741333
    5. '	return' → logprob: -15.2500581741333
    6. ' if' → logprob: -15.6250581741333
    7. '   ' → logprob: -16.000059127807617
    8. '```' → logprob: -16.750059127807617
    9. '
' → logprob: -17.125059127807617
    10. '    
' → logprob: -18.375059127807617

Token 105: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11362790316343307
    2. 'return' (adapté à ' return') → logprob: -2.3636279106140137
    3. ' return' → logprob: -4.363627910614014
    4. 'if' → logprob: -7.613627910614014
    5. ' if' → logprob: -9.363627433776855
    6. '	return' → logprob: -11.738627433776855
    7. '```' → logprob: -12.238627433776855
    8. '
' → logprob: -12.738627433776855
    9. ' ' → logprob: -12.988627433776855
    10. '  ' → logprob: -14.613627433776855

Token 106: ' max' (ID: 2999)
  Prédit: ' max'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' max' → logprob: -0.005546312779188156
    2. 'max' → logprob: -5.2555460929870605
    3. '0' → logprob: -8.505546569824219
    4. ' x' → logprob: -9.505546569824219
    5. ' ' → logprob: -10.380546569824219
    6. 'x' → logprob: -12.380546569824219
    7. '	max' → logprob: -15.255546569824219
    8. '(max' → logprob: -16.25554656982422
    9. ' ' → logprob: -16.75554656982422
    10. '[max' → logprob: -17.50554656982422

Token 107: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00012523093027994037
    2. '(x' → logprob: -9.00012493133545
    3. '0' → logprob: -13.62512493133545
    4. ' (' → logprob: -14.50012493133545
    5. 'x' → logprob: -17.750125885009766
    6. ')(' → logprob: -18.125125885009766
    7. '((' → logprob: -18.250125885009766
    8. '```' → logprob: -18.500125885009766
    9. ',' → logprob: -18.750125885009766
    10. '(
' → logprob: -19.375125885009766

Token 108: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.004639691673219204
    2. 'x' → logprob: -5.379639625549316
    3. ' ' → logprob: -11.004639625549316
    4. ',' → logprob: -13.879639625549316
    5. ' x' → logprob: -14.004639625549316
    6. ')' → logprob: -14.754639625549316
    7. ',x' → logprob: -15.379639625549316
    8. '(x' → logprob: -15.629639625549316
    9. ')x' → logprob: -16.004640579223633
    10. '(' → logprob: -16.504640579223633

Token 109: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -7.004696090007201e-05
    2. ',x' → logprob: -9.625069618225098
    3. ' ,' → logprob: -12.625069618225098
    4. 'x' → logprob: -15.000069618225098
    5. '   ' → logprob: -15.750069618225098
    6. ',
' → logprob: -15.875069618225098
    7. ')' → logprob: -17.250070571899414
    8. ' x' → logprob: -18.125070571899414
    9. '0' → logprob: -18.625070571899414
    10. ' ' → logprob: -19.250070571899414

Token 110: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.029750484973192215
    2. ' x' → logprob: -3.5297505855560303
    3. ')x' → logprob: -17.65475082397461
    4. '	x' → logprob: -18.15475082397461
    5. '   ' → logprob: -18.65475082397461
    6. ')' → logprob: -19.40475082397461
    7. ' ' → logprob: -20.15475082397461
    8. '(x' → logprob: -21.27975082397461
    9. '  ' → logprob: -23.02975082397461
    10. '"x' → logprob: -23.27975082397461

Token 111: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. ')
' → logprob: -15.125
    3. ' )' → logprob: -17.25
    4. '))' → logprob: -18.25
    5. ')

' → logprob: -18.5
    6. ')}' → logprob: -19.0
    7. '}' → logprob: -19.375
    8. '()' → logprob: -19.75
    9. ')`' → logprob: -19.875
    10. '),' → logprob: -20.0

Token 112: 'def' (ID: 1314)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.005988170392811298
    2. 'def' → logprob: -5.130988121032715
    3. 'if' → logprob: -10.255988121032715
    4. 'print' → logprob: -11.005988121032715
    5. 'result' → logprob: -12.505988121032715
    6. 'b' → logprob: -13.005988121032715
    7. 'for' → logprob: -14.255988121032715
    8. ' a' → logprob: -15.380988121032715
    9. '```' → logprob: -15.505988121032715
    10. 'x' → logprob: -15.630988121032715

Token 113: ' process' (ID: 2273)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.5239502191543579
    2. 'main' → logprob: -0.8989502191543579
    3. 'compute' → logprob: -8.523950576782227
    4. 'solve' → logprob: -8.648950576782227
    5. 'calculate' → logprob: -8.898950576782227
    6. ' solve' → logprob: -9.648950576782227
    7. 'process' → logprob: -9.773950576782227
    8. ' compute' → logprob: -9.773950576782227
    9. 'def' → logprob: -10.148950576782227
    10. ' calculate' → logprob: -10.273950576782227

Token 114: '():
' (ID: 8595)
  Prédit: '_input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.3082217872142792
    2. '(a' → logprob: -1.8082218170166016
    3. '_' → logprob: -3.0582218170166016
    4. '_(' → logprob: -3.8082218170166016
    5. '(' → logprob: -4.558221817016602
    6. '_output' → logprob: -4.808221817016602
    7. '_inputs' → logprob: -5.183221817016602
    8. '_values' → logprob: -5.933221817016602
    9. '()' → logprob: -6.183221817016602
    10. '_result' → logprob: -7.433221817016602

Token 115: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0790412575006485
    2. 'a' → logprob: -2.5790412425994873
    3. ' a' → logprob: -8.829041481018066
    4. '(a' → logprob: -12.454041481018066
    5. ' ' → logprob: -14.704041481018066
    6. '()' → logprob: -15.329041481018066
    7. '  ' → logprob: -15.954041481018066
    8. '	a' → logprob: -16.07904052734375
    9. ',a' → logprob: -16.32904052734375
    10. 'def' → logprob: -16.70404052734375

Token 116: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' (adapté à ' a') → logprob: -0.02062375470995903
    2. ' a' → logprob: -4.145623683929443
    3. '   ' → logprob: -5.395623683929443
    4. 'def' → logprob: -10.145624160766602
    5. ' def' → logprob: -13.895624160766602
    6. ' ' → logprob: -14.145624160766602
    7. '	a' → logprob: -14.395624160766602
    8. '(a' → logprob: -14.520624160766602
    9. '  ' → logprob: -15.145624160766602
    10. '_a' → logprob: -16.1456241607666

Token 117: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -6.623244553338736e-05
    2. ',b' → logprob: -9.875065803527832
    3. ' ,' → logprob: -11.375065803527832
    4. 'b' → logprob: -12.875065803527832
    5. '_,' → logprob: -14.875065803527832
    6. ' b' → logprob: -16.00006675720215
    7. 'a' → logprob: -16.75006675720215
    8. ',
' → logprob: -17.00006675720215
    9. 's' → logprob: -17.00006675720215
    10. '   ' → logprob: -17.25006675720215

Token 118: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.3868710398674011
    2. ' b' → logprob: -1.136871099472046
    3. ' ' → logprob: -18.636871337890625
    4. '_b' → logprob: -18.636871337890625
    5. '	b' → logprob: -19.261871337890625
    6. '   ' → logprob: -20.011871337890625
    7. '<|end|>' → logprob: -20.386871337890625
    8. '>b' → logprob: -20.511871337890625
    9. '    ' → logprob: -20.636871337890625
    10. 'process' → logprob: -21.386871337890625

Token 119: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.007606151048094034
    2. '=' → logprob: -4.882606029510498
    3. ',' → logprob: -17.882606506347656
    4. ' ' → logprob: -18.007606506347656
    5. '   ' → logprob: -18.757606506347656
    6. ')' → logprob: -19.007606506347656
    7. '=get' → logprob: -19.382606506347656
    8. ' =
' → logprob: -19.632606506347656
    9. ' =)' → logprob: -19.632606506347656
    10. '.' → logprob: -19.882606506347656

Token 120: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.3132622241973877
    2. ' get' → logprob: -1.3132622241973877
    3. '	get' → logprob: -15.563261985778809
    4. '(get' → logprob: -15.813261985778809
    5. '_get' → logprob: -16.438262939453125
    6. '   ' → logprob: -16.563262939453125
    7. '=get' → logprob: -17.063262939453125
    8. ' ' → logprob: -17.563262939453125
    9. '[get' → logprob: -17.688262939453125
    10. '  ' → logprob: -18.688262939453125

Token 121: '_a' (ID: 10852)
  Prédit: '_a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_a' → logprob: -2.2200749754119897e-06
    2. 'a' → logprob: -14.000001907348633
    3. ' _' → logprob: -14.500001907348633
    4. '_b' → logprob: -14.750001907348633
    5. '_' → logprob: -15.625001907348633
    6. ' a' → logprob: -17.000001907348633
    7. '(_' → logprob: -17.125001907348633
    8. '"_' → logprob: -17.125001907348633
    9. '```' → logprob: -18.000001907348633
    10. '_input' → logprob: -18.000001907348633

Token 122: '_b' (ID: 1535)
  Prédit: '_b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_b' → logprob: -0.0001097417771234177
    2. 'b' → logprob: -9.500109672546387
    3. '()' → logprob: -11.125109672546387
    4. '_' → logprob: -11.875109672546387
    5. '_input' → logprob: -12.500109672546387
    6. '(b' → logprob: -13.125109672546387
    7. ')' → logprob: -13.375109672546387
    8. '```' → logprob: -14.000109672546387
    9. ',' → logprob: -14.375109672546387
    10. '(' → logprob: -14.750109672546387

Token 123: '()
' (ID: 1234)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.0017995312809944153
    2. '   ' → logprob: -7.251799583435059
    3. '()
' → logprob: -7.876799583435059
    4. '
' → logprob: -8.251799583435059
    5. 'b' → logprob: -8.626799583435059
    6. '    
' → logprob: -9.001799583435059
    7. '  
' → logprob: -9.751799583435059
    8. ' 
' → logprob: -10.751799583435059
    9. '()' → logprob: -11.251799583435059
    10. '```' → logprob: -11.376799583435059

Token 124: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.0592541694641113
    2. '   ' → logprob: -1.3092541694641113
    3. 'result' → logprob: -1.8092541694641113
    4. 'b' → logprob: -2.4342541694641113
    5. ' result' → logprob: -3.1842541694641113
    6. 'val' → logprob: -3.3092541694641113
    7. ' val' → logprob: -3.3092541694641113
    8. ' b' → logprob: -5.059254169464111
    9. 'res' → logprob: -5.934254169464111
    10. ' res' → logprob: -6.059254169464111

Token 125: ' b' (ID: 287)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.046753253787755966
    2. 'result' → logprob: -3.796753168106079
    3. 'b' (adapté à ' b') → logprob: -4.171753406524658
    4. 'diff' → logprob: -5.921753406524658
    5. 'cl' → logprob: -6.546753406524658
    6. 'difference' → logprob: -6.921753406524658
    7. 'res' → logprob: -7.046753406524658
    8. 'temp' → logprob: -7.171753406524658
    9. 'value' → logprob: -8.4217529296875
    10. ' val' → logprob: -8.5467529296875

Token 126: '2' (ID: 17)
  Prédit: '_times'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_times' → logprob: -0.10792446881532669
    2. '_val' → logprob: -2.357924461364746
    3. '_d' → logprob: -5.607924461364746
    4. '_' → logprob: -6.232924461364746
    5. '_double' → logprob: -6.982924461364746
    6. '_tw' → logprob: -7.482924461364746
    7. '_value' → logprob: -8.607924461364746
    8. ' =' → logprob: -8.732924461364746
    9. '_mult' → logprob: -9.232924461364746
    10. '_processed' → logprob: -10.232924461364746

Token 127: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.006624304689466953
    2. '=' → logprob: -5.381624221801758
    3. '_times' → logprob: -6.631624221801758
    4. '_' → logprob: -7.381624221801758
    5. '_val' → logprob: -9.756624221801758
    6. 'times' → logprob: -13.756624221801758
    7. ' ' → logprob: -14.131624221801758
    8. '_value' → logprob: -14.881624221801758
    9. '   ' → logprob: -15.256624221801758
    10. '2' → logprob: -15.381624221801758

Token 128: ' compute' (ID: 23864)
  Prédit: 'compute'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'compute' → logprob: -0.4741024076938629
    2. ' compute' → logprob: -0.9741023778915405
    3. 'b' → logprob: -11.349102020263672
    4. ' b' → logprob: -11.474102020263672
    5. ' ' → logprob: -13.724102020263672
    6. '   ' → logprob: -14.349102020263672
    7. ' process' → logprob: -14.599102020263672
    8. 'process' → logprob: -14.724102020263672
    9. '_compute' → logprob: -15.349102020263672
    10. '.compute' → logprob: -15.474102020263672

Token 129: '_b' (ID: 1535)
  Prédit: '_b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_b' → logprob: -6.704273118884885e-07
    2. 'b' → logprob: -14.875000953674316
    3. '_' → logprob: -15.500000953674316
    4. '_times' → logprob: -16.875
    5. '"_' → logprob: -18.25
    6. ')_' → logprob: -18.75
    7. '(b' → logprob: -19.25
    8. ' _' → logprob: -19.5
    9. '_B' → logprob: -19.625
    10. ''_' → logprob: -20.0

Token 130: '_times' (ID: 53425)
  Prédit: '_times'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_times' → logprob: -1.259079363080673e-05
    2. 'times' → logprob: -11.375012397766113
    3. '_' → logprob: -14.375012397766113
    4. 's' → logprob: -16.00001335144043
    5. '_time' → logprob: -16.87501335144043
    6. '2' → logprob: -17.25001335144043
    7. '*_' → logprob: -17.25001335144043
    8. '```' → logprob: -17.25001335144043
    9. '_t' → logprob: -17.37501335144043
    10. 'imes' → logprob: -17.50001335144043

Token 131: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -9.13388703338569e-06
    2. '2' → logprob: -11.625009536743164
    3. 'b' → logprob: -16.750009536743164
    4. ' ' → logprob: -17.250009536743164
    5. 'imes' → logprob: -17.500009536743164
    6. '_times' → logprob: -17.500009536743164
    7. ' _' → logprob: -18.250009536743164
    8. 'a' → logprob: -18.375009536743164
    9. '```' → logprob: -18.625009536743164
    10. 's' → logprob: -18.625009536743164

Token 132: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -6.749814019713085e-06
    2. ' ' → logprob: -12.125006675720215
    3. 'b' → logprob: -14.000006675720215
    4. '_' → logprob: -15.875006675720215
    5. '(' → logprob: -16.12500762939453
    6. 'a' → logprob: -17.31250762939453
    7. '```' → logprob: -17.43750762939453
    8. '-' → logprob: -17.56250762939453
    9. '   ' → logprob: -17.93750762939453
    10. '(b' → logprob: -17.93750762939453

Token 133: '(b' (ID: 3229)
  Prédit: '(b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(b' → logprob: -8.061054359131958e-06
    2. '(' → logprob: -11.750007629394531
    3. 'b' → logprob: -17.37500762939453
    4. '(B' → logprob: -18.50000762939453
    5. ' (' → logprob: -18.75000762939453
    6. '(
' → logprob: -19.37500762939453
    7. '	b' → logprob: -20.25000762939453
    8. '((' → logprob: -22.12500762939453
    9. '(a' → logprob: -22.12500762939453
    10. ' b' → logprob: -22.37500762939453

Token 134: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.47409096360206604
    2. ')
' → logprob: -0.9740909337997437
    3. ')
' → logprob: -11.474090576171875
    4. '   ' → logprob: -13.224090576171875
    5. ')

' → logprob: -13.599090576171875
    6. ' )
' → logprob: -14.974090576171875
    7. ' )' → logprob: -16.099090576171875
    8. ')`
' → logprob: -17.349090576171875
    9. '),' → logprob: -17.599090576171875
    10. ' ' → logprob: -17.724090576171875

Token 135: '   ' (ID: 271)
  Prédit: 'diff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'diff' → logprob: -0.013532289303839207
    2. '   ' → logprob: -5.3885321617126465
    3. 'res' → logprob: -5.3885321617126465
    4. 'd' → logprob: -5.8885321617126465
    5. 'result' → logprob: -7.0135321617126465
    6. ' diff' → logprob: -8.013532638549805
    7. 'difference' → logprob: -8.638532638549805
    8. 'c' → logprob: -9.513532638549805
    9. 'rest' → logprob: -11.263532638549805
    10. 'val' → logprob: -11.638532638549805

Token 136: ' diff' (ID: 8868)
  Prédit: 'diff'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'diff' (adapté à ' diff') → logprob: -0.0009274221956729889
    2. 'difference' → logprob: -8.000926971435547
    3. 'res' → logprob: -8.375926971435547
    4. 'd' → logprob: -8.625926971435547
    5. 'result' → logprob: -8.750926971435547
    6. ' diff' → logprob: -11.250926971435547
    7. 'dif' → logprob: -12.375926971435547
    8. 'val' → logprob: -12.625926971435547
    9. 'c' → logprob: -13.375926971435547
    10. 'ans' → logprob: -14.625926971435547

Token 137: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.07447081804275513
    2. 'er' → logprob: -2.9494707584381104
    3. '=' → logprob: -3.9494707584381104
    4. '_' → logprob: -9.574470520019531
    5. 'ference' → logprob: -10.324470520019531
    6. 'rence' → logprob: -11.824470520019531
    7. 'e' → logprob: -12.199470520019531
    8. ' ' → logprob: -13.199470520019531
    9. 'eren' → logprob: -13.199470520019531
    10. '_er' → logprob: -13.199470520019531

Token 138: ' compute' (ID: 23864)
  Prédit: 'compute'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'compute' → logprob: -0.1270868480205536
    2. ' compute' → logprob: -2.127086877822876
    3. 'process' → logprob: -9.127086639404297
    4. ' process' → logprob: -10.002086639404297
    5. '_compute' → logprob: -13.127086639404297
    6. '.compute' → logprob: -14.127086639404297
    7. 'cl' → logprob: -14.377086639404297
    8. '   ' → logprob: -14.502086639404297
    9. '(com' → logprob: -14.627086639404297
    10. 'computer' → logprob: -15.752086639404297

Token 139: '_difference' (ID: 123771)
  Prédit: '_difference'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_difference' → logprob: -1.9385402993066236e-05
    2. 'difference' → logprob: -10.875019073486328
    3. 'ence' → logprob: -15.750019073486328
    4. 'ifference' → logprob: -16.625019073486328
    5. ' difference' → logprob: -17.000019073486328
    6. '_diff' → logprob: -17.250019073486328
    7. '_distance' → logprob: -17.375019073486328
    8. 'ance' → logprob: -17.500019073486328
    9. 'Difference' → logprob: -18.000019073486328
    10. '_' → logprob: -18.125019073486328

Token 140: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -9.13388703338569e-06
    2. '(' → logprob: -11.625009536743164
    3. 'a' → logprob: -15.875009536743164
    4. '(
' → logprob: -17.125009536743164
    5. ' (' → logprob: -19.000009536743164
    6. '   ' → logprob: -20.625009536743164
    7. '(A' → logprob: -21.000009536743164
    8. '```' → logprob: -21.125009536743164
    9. '(ai' → logprob: -21.250009536743164
    10. '(an' → logprob: -22.250009536743164

Token 141: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00026634239475242794
    2. ',b' → logprob: -8.250266075134277
    3. ' ,' → logprob: -12.250266075134277
    4. ',
' → logprob: -15.625266075134277
    5. 'b' → logprob: -17.625267028808594
    6. '(' → logprob: -18.875267028808594
    7. ',

' → logprob: -19.250267028808594
    8. '，' → logprob: -19.750267028808594
    9. ',n' → logprob: -20.125267028808594
    10. ',B' → logprob: -20.250267028808594

Token 142: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.04858771339058876
    2. 'b' → logprob: -3.0485877990722656
    3. '(b' → logprob: -15.423587799072266
    4. ')b' → logprob: -16.798587799072266
    5. '	b' → logprob: -17.548587799072266
    6. ')' → logprob: -18.048587799072266
    7. ' ' → logprob: -18.298587799072266
    8. '_b' → logprob: -18.798587799072266
    9. ' ' → logprob: -18.923587799072266
    10. ' б' → logprob: -19.173587799072266

Token 143: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -4.320199877838604e-07
    2. ')' → logprob: -15.75
    3. ' ' → logprob: -16.125
    4. '۲' → logprob: -16.625
    5. '_' → logprob: -18.0
    6. '₂' → logprob: -18.125
    7. '２' → logprob: -18.375
    8. '২' → logprob: -19.0
    9. '٢' → logprob: -19.5
    10. '   ' → logprob: -19.5625

Token 144: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.4742267429828644
    2. ')' → logprob: -0.974226713180542
    3. ')
' → logprob: -8.849226951599121
    4. ')

' → logprob: -12.849226951599121
    5. '   ' → logprob: -13.224226951599121
    6. ' )
' → logprob: -13.724226951599121
    7. ' )' → logprob: -14.849226951599121
    8. '))' → logprob: -16.599225997924805
    9. ' ' → logprob: -16.974225997924805
    10. ')`
' → logprob: -17.099225997924805

Token 145: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3427911698818207
    2. 'result' → logprob: -1.467791199684143
    3. ' result' → logprob: -3.4677910804748535
    4. 'return' → logprob: -4.5927910804748535
    5. 'print' → logprob: -5.0927910804748535
    6. ' return' → logprob: -5.3427910804748535
    7. 'cl' → logprob: -5.8427910804748535
    8. '
' → logprob: -6.0927910804748535
    9. 'res' → logprob: -6.8427910804748535
    10. ' cl' → logprob: -7.9677910804748535

Token 146: ' result' (ID: 1534)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.1445882320404053
    2. 'result' (adapté à ' result') → logprob: -1.1445882320404053
    3. 'cl' → logprob: -1.3945882320404053
    4. 'return' → logprob: -2.3945882320404053
    5. 'print' → logprob: -4.644588470458984
    6. ' result' → logprob: -5.269588470458984
    7. 'res' → logprob: -5.644588470458984
    8. ' return' → logprob: -5.769588470458984
    9. ' cl' → logprob: -6.144588470458984
    10. '
' → logprob: -7.894588470458984

Token 147: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.06197351589798927
    2. '=' → logprob: -2.8119735717773438
    3. '_' → logprob: -12.686973571777344
    4. ' ' → logprob: -13.811973571777344
    5. '   ' → logprob: -14.311973571777344
    6. '  ' → logprob: -14.436973571777344
    7. 's' → logprob: -14.936973571777344
    8. ')' → logprob: -16.186973571777344
    9. ':' → logprob: -16.436973571777344
    10. ' =
' → logprob: -16.811973571777344

Token 148: ' clamp' (ID: 76503)
  Prédit: 'cl'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cl' → logprob: -0.01145154982805252
    2. ' clamp' → logprob: -4.511451721191406
    3. ' cl' → logprob: -8.136451721191406
    4. '   ' → logprob: -10.261451721191406
    5. 'clam' → logprob: -10.261451721191406
    6. ' clam' → logprob: -11.136451721191406
    7. '(cl' → logprob: -11.261451721191406
    8. '	cl' → logprob: -11.511451721191406
    9. ' ' → logprob: -14.386451721191406
    10. 'Clamp' → logprob: -14.386451721191406

Token 149: '_min' (ID: 15950)
  Prédit: '_min'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_min' → logprob: -2.5776860184123507e-06
    2. '_max' → logprob: -13.00000286102295
    3. 'min' → logprob: -15.50000286102295
    4. '_MIN' → logprob: -17.375001907348633
    5. '_m' → logprob: -18.125001907348633
    6. '_' → logprob: -18.250001907348633
    7. 'a' → logprob: -18.500001907348633
    8. '_zero' → logprob: -18.750001907348633
    9. ' _' → logprob: -19.250001907348633
    10. '(_' → logprob: -19.250001907348633

Token 150: '_zero' (ID: 53468)
  Prédit: '_zero'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_zero' → logprob: -4.36574100604048e-06
    2. 'zero' → logprob: -12.750004768371582
    3. '0' → logprob: -14.500004768371582
    4. '_ZERO' → logprob: -14.500004768371582
    5. '_' → logprob: -15.500004768371582
    6. 'Zero' → logprob: -16.000003814697266
    7. '_max' → logprob: -17.750003814697266
    8. ' zero' → logprob: -18.250003814697266
    9. 'o' → logprob: -18.500003814697266
    10. '```' → logprob: -18.625003814697266

Token 151: '(diff' (ID: 84195)
  Prédit: '(diff'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(diff' → logprob: -5.860340752406046e-05
    2. '(' → logprob: -9.7500581741333
    3. ' (' → logprob: -15.1250581741333
    4. '(result' → logprob: -18.500059127807617
    5. '(div' → logprob: -20.375059127807617
    6. ' diff' → logprob: -20.375059127807617
    7. '	diff' → logprob: -20.375059127807617
    8. '(dist' → logprob: -20.625059127807617
    9. 'diff' → logprob: -20.750059127807617
    10. '(
' → logprob: -21.250059127807617

Token 152: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3321133852005005
    2. ')
' → logprob: -1.3321133852005005
    3. '(result' → logprob: -4.082113265991211
    4. '(' → logprob: -7.332113265991211
    5. '   ' → logprob: -7.457113265991211
    6. '())' → logprob: -8.832113265991211
    7. '())
' → logprob: -8.957113265991211
    8. 'result' → logprob: -9.207113265991211
    9. ')
' → logprob: -9.582113265991211
    10. ' )' → logprob: -10.582113265991211

Token 153: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0026560360565781593
    2. 'return' → logprob: -6.127655982971191
    3. 'print' → logprob: -7.752655982971191
    4. ' return' → logprob: -10.877655982971191
    5. '    
' → logprob: -11.127655982971191
    6. '
' → logprob: -12.377655982971191
    7. '	return' → logprob: -13.752655982971191
    8. ')' → logprob: -14.252655982971191
    9. '```' → logprob: -14.377655982971191
    10. '    ' → logprob: -15.127655982971191

Token 154: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.05915459990501404
    2. 'return' → logprob: -3.059154510498047
    3. '   ' → logprob: -4.559154510498047
    4. ' return' → logprob: -10.809154510498047
    5. ' print' → logprob: -10.809154510498047
    6. '```' → logprob: -16.059154510498047
    7. '	print' → logprob: -17.059154510498047
    8. '	return' → logprob: -17.434154510498047
    9. '  ' → logprob: -17.434154510498047
    10. ' ' → logprob: -18.684154510498047

Token 155: '_result' (ID: 11623)
  Prédit: '(result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.011049113236367702
    2. '(' → logprob: -4.511049270629883
    3. ' (' → logprob: -14.136049270629883
    4. 'result' → logprob: -15.636049270629883
    5. '(results' → logprob: -15.886049270629883
    6. '(res' → logprob: -16.761049270629883
    7. '(
' → logprob: -17.136049270629883
    8. '(resultado' → logprob: -17.386049270629883
    9. '()' → logprob: -17.511049270629883
    10. '((' → logprob: -18.011049270629883

Token 156: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.02635405957698822
    2. '(result' → logprob: -3.6513540744781494
    3. '()' → logprob: -11.40135383605957
    4. '("("' → logprob: -11.40135383605957
    5. '(

' → logprob: -11.90135383605957
    6. '(
' → logprob: -12.65135383605957
    7. '((' → logprob: -13.27635383605957
    8. '('' → logprob: -13.52635383605957
    9. ' (' → logprob: -13.52635383605957
    10. '(results' → logprob: -13.65135383605957

Token 157: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -2.339278580620885e-06
    2. '())' → logprob: -13.750001907348633
    3. '()' → logprob: -14.250001907348633
    4. ' )' → logprob: -15.000001907348633
    5. '))' → logprob: -16.750001907348633
    6. ')`' → logprob: -16.750001907348633
    7. ')
' → logprob: -17.250001907348633
    8. '(' → logprob: -18.375001907348633
    9. ')}' → logprob: -19.375001907348633
    10. '   ' → logprob: -19.375001907348633

Token 158: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.004687037784606218
    2. '
' → logprob: -5.5046868324279785
    3. 'd' → logprob: -8.629687309265137
    4. '\' → logprob: -9.004687309265137
    5. ' def' → logprob: -10.004687309265137
    6. 'Name' → logprob: -10.129687309265137
    7. '(' → logprob: -10.254687309265137
    8. '

' → logprob: -10.504687309265137
    9. 'Trace' → logprob: -10.629687309265137
    10. '  
' → logprob: -10.879687309265137

Token 159: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.017350895330309868
    2. ' process' → logprob: -5.017350673675537
    3. 'print' → logprob: -5.267350673675537
    4. '_' → logprob: -6.142350673675537
    5. ' read' → logprob: -6.517350673675537
    6. ' _' → logprob: -7.642350673675537
    7. ' ' → logprob: -7.892350673675537
    8. ' main' → logprob: -8.017351150512695
    9. '_print' → logprob: -8.017351150512695
    10. 'process' → logprob: -9.392351150512695

Token 160: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -0.01275731809437275
    2. '_' → logprob: -4.387757301330566
    3. '(' → logprob: -9.637757301330566
    4. '_output' → logprob: -9.762757301330566
    5. '_results' → logprob: -9.887757301330566
    6. '("_' → logprob: -10.637757301330566
    7. ' _' → logprob: -11.762757301330566
    8. '_value' → logprob: -12.387757301330566
    9. '(_' → logprob: -12.387757301330566
    10. '('_' → logprob: -12.512757301330566

Token 161: '(res' (ID: 8331)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014359879307448864
    2. '(result' → logprob: -4.264359951019287
    3. ' (' → logprob: -8.639359474182129
    4. '((' → logprob: -12.764359474182129
    5. '(value' → logprob: -13.014359474182129
    6. '("("' → logprob: -13.139359474182129
    7. '(
' → logprob: -13.264359474182129
    8. ' ' → logprob: -13.514359474182129
    9. '(

' → logprob: -13.639359474182129
    10. '(results' → logprob: -13.764359474182129

Token 162: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.6017512083053589
    2. ')' → logprob: -1.1017512083053589
    3. '):
' → logprob: -2.8517513275146484
    4. 't' → logprob: -2.8517513275146484
    5. 'ult' → logprob: -5.601751327514648
    6. '):

' → logprob: -8.851751327514648
    7. ')t' → logprob: -8.976751327514648
    8. 'ultat' → logprob: -9.601751327514648
    9. ')**' → logprob: -9.726751327514648
    10. 'т' → logprob: -9.976751327514648

Token 163: '   ' (ID: 271)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.062284160405397415
    2. 'print' → logprob: -2.812284231185913
    3. '   ' → logprob: -8.062284469604492
    4. 'def' → logprob: -14.687284469604492
    5. '```' → logprob: -14.812284469604492
    6. ' def' → logprob: -15.062284469604492
    7. '    ' → logprob: -16.437284469604492
    8. ' prin' → logprob: -17.437284469604492
    9. '	print' → logprob: -17.562284469604492
    10. 'pr' → logprob: -17.562284469604492

Token 164: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0015024791937321424
    2. ' print' → logprob: -6.501502513885498
    3. '   ' → logprob: -15.75150203704834
    4. 'pr' → logprob: -18.751502990722656
    5. '```' → logprob: -19.251502990722656
    6. 'prin' → logprob: -21.001502990722656
    7. '	print' → logprob: -22.126502990722656
    8. 'printf' → logprob: -23.001502990722656
    9. '`' → logprob: -23.626502990722656
    10. '    ' → logprob: -24.001502990722656

Token 165: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -0.00015669701679144055
    2. '(' → logprob: -9.25015640258789
    3. 'res' → logprob: -9.75015640258789
    4. '(result' → logprob: -13.12515640258789
    5. ' res' → logprob: -15.87515640258789
    6. '()' → logprob: -16.12515640258789
    7. ',res' → logprob: -18.87515640258789
    8. '(
' → logprob: -19.25015640258789
    9. '	res' → logprob: -19.25015640258789
    10. '(f' → logprob: -19.50015640258789

Token 166: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9361264946837764e-07
    2. ')
' → logprob: -15.875
    3. ' )' → logprob: -17.5
    4. ')`' → logprob: -17.875
    5. '))' → logprob: -18.0
    6. '())' → logprob: -19.375
    7. ')}' → logprob: -20.0
    8. '')' → logprob: -20.125
    9. '()' → logprob: -20.25
    10. '`)' → logprob: -20.375

Token 167: 'if' (ID: 366)
  Prédit: 'process'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'process' → logprob: -0.0486002042889595
    2. 'if' → logprob: -3.048600196838379
    3. '<|end|>' → logprob: -12.298600196838379
    4. ' process' → logprob: -13.048600196838379
    5. '(process' → logprob: -13.548600196838379
    6. 'print' → logprob: -13.923600196838379
    7. '```' → logprob: -13.923600196838379
    8. '
' → logprob: -14.173600196838379
    9. 'def' → logprob: -14.298600196838379
    10. '	process' → logprob: -14.673600196838379

Token 168: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.005991843529045582
    2. '__' → logprob: -5.1309919357299805
    3. '_' → logprob: -10.38099193572998
    4. ' ' → logprob: -10.63099193572998
    5. ' ' → logprob: -12.88099193572998
    6. '_name' → logprob: -12.88099193572998
    7. ' _' → logprob: -13.75599193572998
    8. 'name' → logprob: -14.13099193572998
    9. '___' → logprob: -14.75599193572998
    10. ' ___' → logprob: -15.13099193572998

Token 169: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.03225141763687134
    2. ' __' → logprob: -3.5322513580322266
    3. ' ==' → logprob: -6.157251358032227
    4. '==' → logprob: -8.282251358032227
    5. '__.__' → logprob: -10.282251358032227
    6. '.__' → logprob: -10.407251358032227
    7. 'name' → logprob: -10.532251358032227
    8. '_' → logprob: -11.532251358032227
    9. '_name' → logprob: -12.032251358032227
    10. '__.' → logprob: -12.282251358032227

Token 170: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -2.081584716506768e-05
    2. '==' → logprob: -11.125020980834961
    3. '__.__' → logprob: -12.625020980834961
    4. '___' → logprob: -13.875020980834961
    5. ' ==' → logprob: -14.500020980834961
    6. '____' → logprob: -15.250020980834961
    7. '__
' → logprob: -15.500020980834961
    8. '=="' → logprob: -15.500020980834961
    9. '__.' → logprob: -16.12502098083496
    10. '_' → logprob: -16.37502098083496

Token 171: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.6266379952430725
    2. ' ==' → logprob: -1.2516379356384277
    3. '==' → logprob: -1.7516379356384277
    4. '=="' → logprob: -5.126637935638428
    5. '=='' → logprob: -9.251638412475586
    6. '"' → logprob: -11.126638412475586
    7. '___' → logprob: -11.626638412475586
    8. '===' → logprob: -12.126638412475586
    9. ' =="' → logprob: -12.501638412475586
    10. ' "__' → logprob: -12.626638412475586

Token 172: ' '__' (ID: 28278)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.011206616647541523
    2. ''' → logprob: -4.51120662689209
    3. ' "__' → logprob: -8.76120662689209
    4. '__' → logprob: -13.63620662689209
    5. ' '__' → logprob: -14.63620662689209
    6. '"user' → logprob: -15.88620662689209
    7. ' "' → logprob: -16.511205673217773
    8. '"name' → logprob: -17.386205673217773
    9. '"I' → logprob: -17.511205673217773
    10. ''"' → logprob: -17.636205673217773

Token 173: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.01849312335252762
    2. 'name' → logprob: -4.143493175506592
    3. '__' → logprob: -6.018493175506592
    4. 'm' → logprob: -11.893492698669434
    5. 'x' → logprob: -12.643492698669434
    6. '__':
' → logprob: -12.643492698669434
    7. 'code' → logprob: -13.018492698669434
    8. 'built' → logprob: -13.893492698669434
    9. 'python' → logprob: -14.018492698669434
    10. '_main' → logprob: -14.018492698669434

Token 174: '__':
' (ID: 39314)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.6932211518287659
    2. '__':
' → logprob: -0.6932211518287659
    3. '__:' → logprob: -9.568221092224121
    4. '__":
' → logprob: -13.068221092224121
    5. '':' → logprob: -13.818221092224121
    6. '_' → logprob: -14.068221092224121
    7. '___' → logprob: -16.568222045898438
    8. '__.' → logprob: -16.943222045898438
    9. '__('' → logprob: -17.443222045898438
    10. ':' → logprob: -18.318222045898438

Token 175: '   ' (ID: 271)
  Prédit: ' process'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' process' → logprob: -0.7120917439460754
    2. '   ' → logprob: -0.8370917439460754
    3. 'process' → logprob: -2.7120916843414307
    4. '	process' → logprob: -5.33709192276001
    5. '
' → logprob: -5.71209192276001
    6. '(process' → logprob: -7.21209192276001
    7. '    
' → logprob: -7.21209192276001
    8. '_process' → logprob: -9.087091445922852
    9. '<|end|>' → logprob: -9.087091445922852
    10. '  
' → logprob: -9.587091445922852

Token 176: ' process' (ID: 2273)
  Prédit: 'process'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'process' (adapté à ' process') → logprob: -0.0007099286303855479
    2. ' process' → logprob: -7.2507100105285645
    3. '	process' → logprob: -17.000709533691406
    4. '   ' → logprob: -18.000709533691406
    5. '_process' → logprob: -19.250709533691406
    6. '.process' → logprob: -20.000709533691406
    7. 'proces' → logprob: -20.125709533691406
    8. '(process' → logprob: -20.500709533691406
    9. 'Process' → logprob: -22.500709533691406
    10. '/process' → logprob: -22.625709533691406

Token 177: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0019048431422561407
    2. '(' → logprob: -6.5019049644470215
    3. '()
' → logprob: -7.8769049644470215
    4. '(
' → logprob: -12.126904487609863
    5. '()\' → logprob: -12.251904487609863
    6. '\' → logprob: -12.876904487609863
    7. '#' → logprob: -12.876904487609863
    8. '\n' → logprob: -13.126904487609863
    9. '()

' → logprob: -13.126904487609863
    10. ' ()' → logprob: -14.251904487609863


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 175
Tokens correctement prédits (1ère position, stricte): 77
Tokens correctement prédits (1ère position, avec adaptation): 86
Tokens correctement prédits (top 10): 148
Précision stricte (1ère position): 44.00%
Précision adaptée (1ère position): 49.14%
Précision (top 10): 84.57%
================================================================================
