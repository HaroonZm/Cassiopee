================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:31:10
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())  # nombre de chansons (enfin je suppose)
songs = []
t = []
res = 0

for i in range(n):

    ligne = input()
    parts = ligne.split(" ")

    songs.append(parts[0])
    t.append(int(parts[1]))

x = input()  # la chanson qui nous intéresse

# Je cherche où elle est
if x in songs:
    idx = songs.index(x)
    for val in t[idx+1:]:
        res += val
else:
    res = 0  # bon, on fait comme ça

print(res)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00038134094211272895
    2. '(n' → logprob: -9.000381469726562
    3. ''' → logprob: -9.500381469726562
    4. '('' → logprob: -10.125381469726562
    5. '```' → logprob: -10.125381469726562
    6. '`' → logprob: -10.750381469726562
    7. '("("' → logprob: -10.750381469726562
    8. '()' → logprob: -11.250381469726562
    9. 'n' → logprob: -11.625381469726562
    10. ')' → logprob: -12.000381469726562

Token 4: '())' (ID: 3516)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03871168941259384
    2. ')' → logprob: -3.5387117862701416
    3. '()' → logprob: -4.9137115478515625
    4. '())' → logprob: -7.1637115478515625
    5. '(
' → logprob: -8.663711547851562
    6. '```' → logprob: -9.163711547851562
    7. '(()' → logprob: -9.413711547851562
    8. '("("' → logprob: -9.663711547851562
    9. '('' → logprob: -9.913711547851562
    10. '`' → logprob: -10.163711547851562

Token 5: ' ' (ID: 220)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.1350957602262497
    2. '\' → logprob: -2.7600958347320557
    3. '```' → logprob: -3.8850958347320557
    4. 'for' → logprob: -4.260095596313477
    5. '\r' → logprob: -5.135095596313477
    6. '`' → logprob: -5.385095596313477
    7. '#' → logprob: -5.760095596313477
    8. '``' → logprob: -6.260095596313477
    9. '' → logprob: -6.385095596313477
    10. '  
' → logprob: -6.510095596313477

Token 6: ' #' (ID: 1069)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.796981155872345
    2. 's' → logprob: -1.9219810962677002
    3. 'if' → logprob: -2.2969810962677
    4. 'for' → logprob: -2.2969810962677
    5. ' ' → logprob: -3.2969810962677
    6. '\n' → logprob: -3.5469810962677
    7. '#' → logprob: -3.7969810962677
    8. 'x' → logprob: -4.046981334686279
    9. 'a' → logprob: -4.296981334686279
    10. ''' → logprob: -4.421981334686279

Token 7: ' nombre' (ID: 9733)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.042658500373363495
    2. ' \' → logprob: -3.667658567428589
    3. '\' → logprob: -5.41765832901001
    4. '  ' → logprob: -5.54265832901001
    5. '\n' → logprob: -6.29265832901001
    6. ''' → logprob: -6.91765832901001
    7. ' n' → logprob: -7.04265832901001
    8. 'n' → logprob: -7.91765832901001
    9. ' )' → logprob: -8.042658805847168
    10. ')' → logprob: -8.042658805847168

Token 8: ' de' (ID: 334)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1477229744195938
    2. ')' → logprob: -3.5227229595184326
    3. '_' → logprob: -3.6477229595184326
    4. '*' → logprob: -4.522723197937012
    5. 's' → logprob: -4.522723197937012
    6. '<|end|>' → logprob: -4.772723197937012
    7. '#' → logprob: -5.022723197937012
    8. '+' → logprob: -5.022723197937012
    9. ''' → logprob: -5.272723197937012
    10. 'for' → logprob: -5.397723197937012

Token 9: ' chansons' (ID: 144439)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'élé' → logprob: -1.098738431930542
    2. 'person' → logprob: -2.973738431930542
    3. ' pommes' → logprob: -2.973738431930542
    4. 'd' → logprob: -3.223738431930542
    5. 'l' → logprob: -3.348738431930542
    6. 'jours' → logprob: -3.598738431930542
    7. ' personnes' → logprob: -3.598738431930542
    8. 'part' → logprob: -3.723738431930542
    9. 'participants' → logprob: -3.848738431930542
    10. 'val' → logprob: -3.848738431930542

Token 10: ' (' (ID: 350)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.4943901598453522
    2. '\' → logprob: -2.6193902492523193
    3. 'for' → logprob: -2.7443902492523193
    4. ' ' → logprob: -2.9943902492523193
    5. ')' → logprob: -3.1193902492523193
    6. 's' → logprob: -3.2443902492523193
    7. '#' → logprob: -3.4943902492523193
    8. 'n' → logprob: -4.36939001083374
    9. '
' → logprob: -4.36939001083374
    10. ' 
' → logprob: -4.74439001083374

Token 11: 'en' (ID: 262)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.006619334686547518
    2. ' )' → logprob: -5.131619453430176
    3. '")' → logprob: -8.506619453430176
    4. '')' → logprob: -9.006619453430176
    5. 's' → logprob: -9.506619453430176
    6. '"' → logprob: -9.631619453430176
    7. ' ' → logprob: -9.756619453430176
    8. '`)' → logprob: -10.631619453430176
    9. ',' → logprob: -11.006619453430176
    10. ' ' → logprob: -11.131619453430176

Token 12: 'fin' (ID: 6994)
  Prédit: 'fr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'fr' → logprob: -0.1765095293521881
    2. 'anglais' → logprob: -2.9265096187591553
    3. 'mus' → logprob: -4.176509380340576
    4. ' français' → logprob: -4.676509380340576
    5. 'tout' → logprob: -5.051509380340576
    6. 'ent' → logprob: -5.051509380340576
    7. 'nombre' → logprob: -5.551509380340576
    8. 'ligne' → logprob: -5.926509380340576
    9. 'suite' → logprob: -5.926509380340576
    10. 'entrée' → logprob: -6.051509380340576

Token 13: ' je' (ID: 1264)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.32313939929008484
    2. ' )' → logprob: -1.3231394290924072
    3. '_' → logprob: -5.448139190673828
    4. ' ' → logprob: -6.823139190673828
    5. ' chansons' → logprob: -6.948139190673828
    6. 's' → logprob: -7.323139190673828
    7. ',' → logprob: -7.573139190673828
    8. ' ' → logprob: -7.823139190673828
    9. ' morceaux' → logprob: -8.323139190673828
    10. '_)' → logprob: -8.698139190673828

Token 14: ' suppose' (ID: 35968)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' continue' → logprob: -1.7008678913116455
    2. 's' → logprob: -1.9508678913116455
    3. ' pense' → logprob: -1.9508678913116455
    4. ' veux' → logprob: -2.0758678913116455
    5. 'n' → logprob: -2.8258678913116455
    6. ' vais' → logprob: -2.9508678913116455
    7. ' joue' → logprob: -3.4508678913116455
    8. 'veux' → logprob: -3.5758678913116455
    9. ' n' → logprob: -3.7008678913116455
    10. ' suppose' → logprob: -3.8258678913116455

Token 15: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00016921341011766344
    2. '#' → logprob: -9.375168800354004
    3. '`)' → logprob: -10.000168800354004
    4. ' )' → logprob: -11.375168800354004
    5. ')n' → logprob: -12.125168800354004
    6. ')#' → logprob: -12.250168800354004
    7. '```' → logprob: -12.250168800354004
    8. '')' → logprob: -12.500168800354004
    9. 'n' → logprob: -12.875168800354004
    10. ')
' → logprob: -13.000168800354004

Token 16: 'songs' (ID: 166105)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.28393152356147766
    2. '#' → logprob: -2.7839314937591553
    3. '\' → logprob: -3.0339314937591553
    4. '
' → logprob: -3.0339314937591553
    5. ')' → logprob: -3.6589314937591553
    6. 'n' → logprob: -4.033931732177734
    7. '```' → logprob: -4.658931732177734
    8. 'for' → logprob: -4.783931732177734
    9. '<|end|>' → logprob: -5.408931732177734
    10. ' ' → logprob: -5.533931732177734

Token 17: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.009242184460163116
    2. '.' → logprob: -5.384242057800293
    3. 's' → logprob: -6.259242057800293
    4. '_' → logprob: -6.634242057800293
    5. '[s' → logprob: -7.134242057800293
    6. '[:]' → logprob: -8.884242057800293
    7. '[]' → logprob: -9.134242057800293
    8. '[n' → logprob: -9.634242057800293
    9. '\[' → logprob: -9.759242057800293
    10. '=' → logprob: -10.384242057800293

Token 18: ' []
' (ID: 8911)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.20348986983299255
    2. '[]' → logprob: -1.703489899635315
    3. '[' → logprob: -6.703489780426025
    4. ' [' → logprob: -7.203489780426025
    5. 'list' → logprob: -9.703490257263184
    6. '[input' → logprob: -11.453490257263184
    7. '{}' → logprob: -11.953490257263184
    8. '[]}' → logprob: -12.078490257263184
    9. ' list' → logprob: -12.328490257263184
    10. ' ' → logprob: -12.953490257263184

Token 19: 't' (ID: 83)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0012098762672394514
    2. ' for' → logprob: -6.751209735870361
    3. '
' → logprob: -10.25121021270752
    4. '```' → logprob: -13.00121021270752
    5. '\n' → logprob: -14.00121021270752
    6. ' 
' → logprob: -15.12621021270752
    7. '' → logprob: -15.12621021270752
    8. 'f' → logprob: -15.50121021270752
    9. 'n' → logprob: -15.87621021270752
    10. '\' → logprob: -16.501209259033203

Token 20: ' =' (ID: 314)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.6642757654190063
    2. ' =' → logprob: -1.7892757654190063
    3. 'o' → logprob: -2.664275646209717
    4. 'for' → logprob: -2.664275646209717
    5. '=' → logprob: -2.914275646209717
    6. '.' → logprob: -2.914275646209717
    7. ' ' → logprob: -3.164275646209717
    8. '.append' → logprob: -5.039275646209717
    9. ' for' → logprob: -5.289275646209717
    10. ' .' → logprob: -6.164275646209717

Token 21: ' []
' (ID: 8911)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.01616000011563301
    2. '0' → logprob: -4.891160011291504
    3. ' n' → logprob: -5.516160011291504
    4. ' []' → logprob: -6.266160011291504
    5. 'n' → logprob: -6.641160011291504
    6. ' int' → logprob: -7.016160011291504
    7. 'int' → logprob: -8.516160011291504
    8. '  ' → logprob: -10.016160011291504
    9. '[]' → logprob: -10.516160011291504
    10. ' len' → logprob: -11.016160011291504

Token 22: 'res' (ID: 430)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -5.598092684522271e-05
    2. ' for' → logprob: -10.000056266784668
    3. 'f' → logprob: -11.500056266784668
    4. '```' → logprob: -16.25005531311035
    5. '
' → logprob: -16.87505531311035
    6. '[' → logprob: -17.00005531311035
    7. 'n' → logprob: -17.25005531311035
    8. ')' → logprob: -17.75005531311035
    9. 'i' → logprob: -17.87505531311035
    10. '=' → logprob: -18.00005531311035

Token 23: ' =' (ID: 314)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.9817217588424683
    2. 'ult' → logprob: -1.3567217588424683
    3. ' =' → logprob: -1.7317217588424683
    4. '=' → logprob: -1.8567217588424683
    5. 'ults' → logprob: -4.106721878051758
    6. '.' → logprob: -4.731721878051758
    7. 'ul' → logprob: -5.356721878051758
    8. 'ultat' → logprob: -5.856721878051758
    9. 't' → logprob: -7.606721878051758
    10. 'ULT' → logprob: -8.481721878051758

Token 24: ' ' (ID: 220)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.3144037425518036
    2. '[]' → logprob: -1.689403772354126
    3. ' ' → logprob: -3.314403772354126
    4. '0' → logprob: -3.439403772354126
    5. ' [' → logprob: -4.814403533935547
    6. '[' → logprob: -5.189403533935547
    7. ' "' → logprob: -7.564403533935547
    8. ' [[]' → logprob: -7.564403533935547
    9. '"' → logprob: -8.189403533935547
    10. ' {}' → logprob: -8.689403533935547

Token 25: '0' (ID: 15)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.3544404208660126
    2. '0' → logprob: -1.354440450668335
    3. '[' → logprob: -3.354440450668335
    4. '""' → logprob: -6.604440212249756
    5. 'float' → logprob: -7.104440212249756
    6. '[]
' → logprob: -7.354440212249756
    7. '"' → logprob: -7.729440212249756
    8. '{}' → logprob: -7.854440212249756
    9. '[int' → logprob: -8.104440689086914
    10. 'int' → logprob: -8.729440689086914

Token 26: '

' (ID: 279)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.029278382658958435
    2. '
' → logprob: -4.02927827835083
    3. ' for' → logprob: -5.02927827835083
    4. '\n' → logprob: -5.77927827835083
    5. '<|end|>' → logprob: -7.15427827835083
    6. '' → logprob: -8.154278755187988
    7. '\' → logprob: -9.029278755187988
    8. ' 
' → logprob: -9.404278755187988
    9. '```' → logprob: -9.529278755187988
    10. ' ' → logprob: -10.779278755187988

Token 27: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -6.825890159234405e-05
    2. 'f' → logprob: -10.125068664550781
    3. ' for' → logprob: -10.625068664550781
    4. '
' → logprob: -13.500068664550781
    5. '```' → logprob: -13.500068664550781
    6. 'i' → logprob: -14.250068664550781
    7. '\n' → logprob: -15.875068664550781
    8. '\' → logprob: -16.75006866455078
    9. '' → logprob: -16.87506866455078
    10. '	for' → logprob: -17.37506866455078

Token 28: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.40469586849212646
    2. ' ' → logprob: -1.1546958684921265
    3. ' _' → logprob: -4.279695987701416
    4. '_' → logprob: -6.279695987701416
    5. 'i' → logprob: -6.779695987701416
    6. ' song' → logprob: -7.904695987701416
    7. '  ' → logprob: -8.779695510864258
    8. ' n' → logprob: -9.404695510864258
    9. ' ‌' → logprob: -9.654695510864258
    10. ' s' → logprob: -9.779695510864258

Token 29: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.04472241923213005
    2. ' ' → logprob: -3.544722318649292
    3. 'in' → logprob: -4.294722557067871
    4. '  ' → logprob: -6.919722557067871
    5. ' n' → logprob: -9.169722557067871
    6. 'n' → logprob: -10.044722557067871
    7. ' i' → logprob: -10.294722557067871
    8. '_' → logprob: -11.044722557067871
    9. 'range' → logprob: -11.919722557067871
    10. '   ' → logprob: -12.419722557067871

Token 30: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.006721417419612408
    2. 'range' → logprob: -5.006721496582031
    3. ' ' → logprob: -12.131721496582031
    4. '	range' → logprob: -15.131721496582031
    5. ' ' → logprob: -16.25672149658203
    6. ' xrange' → logprob: -16.50672149658203
    7. '```' → logprob: -17.00672149658203
    8. '  ' → logprob: -17.50672149658203
    9. '_range' → logprob: -18.13172149658203
    10. ' n' → logprob: -18.38172149658203

Token 31: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.576690673828125
    2. '(' → logprob: -0.826690673828125
    3. ' (' → logprob: -7.201690673828125
    4. ' n' → logprob: -13.201690673828125
    5. '(range' → logprob: -13.201690673828125
    6. '(len' → logprob: -14.951690673828125
    7. '(
' → logprob: -14.951690673828125
    8. ' ' → logprob: -15.076690673828125
    9. '(s' → logprob: -15.451690673828125
    10. 'n' → logprob: -15.826690673828125

Token 32: '):

' (ID: 15626)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.03420538827776909
    2. ')' → logprob: -3.409205436706543
    3. ':' → logprob: -8.284205436706543
    4. ' ):' → logprob: -8.659205436706543
    5. '+' → logprob: -9.409205436706543
    6. '):
' → logprob: -10.409205436706543
    7. ' )' → logprob: -11.534205436706543
    8. ')**' → logprob: -13.659205436706543
    9. ',' → logprob: -13.784205436706543
    10. ')>' → logprob: -13.909205436706543

Token 33: '   ' (ID: 271)
  Prédit: ' s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.5734124779701233
    2. '   ' → logprob: -1.0734124183654785
    3. ' ' → logprob: -2.8234124183654785
    4. 's' → logprob: -4.3234124183654785
    5. '    ' → logprob: -5.5734124183654785
    6. ' ,' → logprob: -5.6984124183654785
    7. ' input' → logprob: -6.3234124183654785
    8. ' songs' → logprob: -6.9484124183654785
    9. '```' → logprob: -7.0734124183654785
    10. ' n' → logprob: -7.0734124183654785

Token 34: ' ligne' (ID: 19583)
  Prédit: ' line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' line' → logprob: -0.8693611025810242
    2. 'song' → logprob: -1.619361162185669
    3. ' song' → logprob: -1.619361162185669
    4. 's' → logprob: -2.494361162185669
    5. ' s' → logprob: -3.244361162185669
    6. 'line' → logprob: -3.494361162185669
    7. 'songs' → logprob: -4.11936092376709
    8. ' songs' → logprob: -5.11936092376709
    9. '   ' → logprob: -5.36936092376709
    10. ' title' → logprob: -6.99436092376709

Token 35: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.018240900710225105
    2. '=' → logprob: -4.018240928649902
    3. 's' → logprob: -9.518240928649902
    4. '=input' → logprob: -11.643240928649902
    5. '_' → logprob: -12.643240928649902
    6. '=line' → logprob: -13.768240928649902
    7. '=[]' → logprob: -13.893240928649902
    8. ')' → logprob: -14.268240928649902
    9. '=s' → logprob: -14.393240928649902
    10. '=int' → logprob: -14.768240928649902

Token 36: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.1602337658405304
    2. 'input' → logprob: -1.910233736038208
    3. '=input' → logprob: -12.535233497619629
    4. ' ' → logprob: -13.160233497619629
    5. 'int' → logprob: -13.285233497619629
    6. ' int' → logprob: -13.910233497619629
    7. '	input' → logprob: -14.410233497619629
    8. '(input' → logprob: -15.535233497619629
    9. ' ' → logprob: -16.285234451293945
    10. ' inputs' → logprob: -16.285234451293945

Token 37: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0017574065132066607
    2. '().' → logprob: -6.376757621765137
    3. '(' → logprob: -10.501757621765137
    4. '())' → logprob: -11.126757621765137
    5. '("")' → logprob: -12.751757621765137
    6. '()`' → logprob: -13.376757621765137
    7. '()>' → logprob: -13.876757621765137
    8. ' ()' → logprob: -13.876757621765137
    9. '()]' → logprob: -13.876757621765137
    10. ')' → logprob: -13.876757621765137

Token 38: '   ' (ID: 271)
  Prédit: '.split'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.split' → logprob: -0.04626112058758736
    2. '.' → logprob: -3.1712610721588135
    3. '.strip' → logprob: -6.296261310577393
    4. '.s' → logprob: -6.921261310577393
    5. ' .' → logprob: -8.546260833740234
    6. 'split' → logprob: -9.296260833740234
    7. 's' → logprob: -9.671260833740234
    8. '.rstrip' → logprob: -10.296260833740234
    9. '().' → logprob: -12.046260833740234
    10. '   ' → logprob: -12.296260833740234

Token 39: ' parts' (ID: 7881)
  Prédit: '.split'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.split' → logprob: -0.013901261612772942
    2. 'split' → logprob: -5.513901233673096
    3. '.' → logprob: -5.888901233673096
    4. '.s' → logprob: -5.888901233673096
    5. 's' → logprob: -6.888901233673096
    6. '.strip' → logprob: -7.138901233673096
    7. ' .' → logprob: -7.888901233673096
    8. ' =' → logprob: -8.013901710510254
    9. '_split' → logprob: -8.138901710510254
    10. ' ' → logprob: -8.263901710510254

Token 40: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.25342240929603577
    2. '=' → logprob: -1.5034223794937134
    3. '.' → logprob: -7.128422260284424
    4. '[' → logprob: -7.753422260284424
    5. '.split' → logprob: -9.128422737121582
    6. ')' → logprob: -10.878422737121582
    7. 'split' → logprob: -11.003422737121582
    8. 's' → logprob: -11.003422737121582
    9. '[:]' → logprob: -11.253422737121582
    10. '_tokens' → logprob: -11.503422737121582

Token 41: ' ligne' (ID: 19583)
  Prédit: 'ligne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ligne' → logprob: -0.22545744478702545
    2. ' ligne' → logprob: -1.6004574298858643
    3. 'line' → logprob: -10.475457191467285
    4. 'l' → logprob: -12.475457191467285
    5. ' ' → logprob: -12.600457191467285
    6. ' lignes' → logprob: -13.100457191467285
    7. '```' → logprob: -13.725457191467285
    8. ' line' → logprob: -13.975457191467285
    9. ' ' → logprob: -13.975457191467285
    10. ' lign' → logprob: -14.100457191467285

Token 42: '.split' (ID: 10347)
  Prédit: '.split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.split' → logprob: -0.18261604011058807
    2. '.' → logprob: -1.8076159954071045
    3. '.strip' → logprob: -6.057616233825684
    4. ' .' → logprob: -7.682616233825684
    5. '.rstrip' → logprob: -10.432616233825684
    6. '.s' → logprob: -10.807616233825684
    7. 'split' → logprob: -12.182616233825684
    8. '().' → logprob: -12.682616233825684
    9. '.replace' → logprob: -13.307616233825684
    10. '.startswith' → logprob: -13.557616233825684

Token 43: '("' (ID: 568)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.20857059955596924
    2. '('' → logprob: -1.7085705995559692
    3. '(' → logprob: -5.83357048034668
    4. '("("' → logprob: -5.83357048034668
    5. '("' → logprob: -6.70857048034668
    6. '()
' → logprob: -11.58357048034668
    7. '(None' → logprob: -11.83357048034668
    8. ''' → logprob: -12.08357048034668
    9. '('.')' → logprob: -12.33357048034668
    10. '"' → logprob: -12.70857048034668

Token 44: ' ")

' (ID: 154069)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.04074456915259361
    2. '(' → logprob: -3.6657445430755615
    3. '())' → logprob: -5.165744781494141
    4. ')' → logprob: -5.540744781494141
    5. ' )' → logprob: -6.790744781494141
    6. '('' → logprob: -6.790744781494141
    7. '("' → logprob: -7.040744781494141
    8. '()[' → logprob: -7.290744781494141
    9. '[' → logprob: -7.540744781494141
    10. '()
' → logprob: -8.66574478149414

Token 45: '   ' (ID: 271)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.6518101692199707
    2. 'duration' → logprob: -1.5268101692199707
    3. 'if' → logprob: -2.4018101692199707
    4. 'title' → logprob: -3.2768101692199707
    5. 's' → logprob: -3.5268101692199707
    6. '   ' → logprob: -3.9018101692199707
    7. 'time' → logprob: -4.026810169219971
    8. 'genre' → logprob: -4.651810169219971
    9. 'song' → logprob: -5.026810169219971
    10. 'songs' → logprob: -5.026810169219971

Token 46: ' songs' (ID: 15374)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.789442777633667
    2. 'title' → logprob: -1.664442777633667
    3. 'duration' → logprob: -2.164442777633667
    4. 'if' → logprob: -2.664442777633667
    5. 's' → logprob: -3.289442777633667
    6. 'd' → logprob: -3.664442777633667
    7. 'song' → logprob: -3.664442777633667
    8. 'titre' → logprob: -3.914442777633667
    9. 'songs' (adapté à ' songs') → logprob: -3.914442777633667
    10. 'artist' → logprob: -4.914443016052246

Token 47: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.0042868610471487045
    2. '.' → logprob: -5.629286766052246
    3. '.extend' → logprob: -7.629286766052246
    4. '[' → logprob: -8.754286766052246
    5. 'append' → logprob: -11.254286766052246
    6. '.setdefault' → logprob: -12.254286766052246
    7. ' .' → logprob: -12.379286766052246
    8. '_append' → logprob: -12.754286766052246
    9. ').' → logprob: -13.379286766052246
    10. '[-' → logprob: -13.379286766052246

Token 48: '(parts' (ID: 102573)
  Prédit: '(parts'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(parts' → logprob: -0.027244912460446358
    2. '(int' → logprob: -3.902244806289673
    3. '((' → logprob: -5.152245044708252
    4. '([' → logprob: -8.027244567871094
    5. '(' → logprob: -8.277244567871094
    6. '(float' → logprob: -9.402244567871094
    7. 'parts' → logprob: -9.777244567871094
    8. 'int' → logprob: -10.027244567871094
    9. '(tuple' → logprob: -10.027244567871094
    10. '(len' → logprob: -10.277244567871094

Token 49: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0550878681242466
    2. ')' → logprob: -2.9300878047943115
    3. '[-' → logprob: -9.05508804321289
    4. '(' → logprob: -10.05508804321289
    5. ' )' → logprob: -11.43008804321289
    6. '0' → logprob: -11.93008804321289
    7. '[
' → logprob: -12.05508804321289
    8. '))' → logprob: -12.55508804321289
    9. ')[' → logprob: -12.93008804321289
    10. '()' → logprob: -13.18008804321289

Token 50: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0345122367143631
    2. '1' → logprob: -4.034512042999268
    3. '-' → logprob: -4.159512042999268
    4. '2' → logprob: -7.534512042999268
    5. '3' → logprob: -10.284512519836426
    6. ' ' → logprob: -10.909512519836426
    7. '])' → logprob: -11.534512519836426
    8. '4' → logprob: -12.034512519836426
    9. '[' → logprob: -12.909512519836426
    10. ']' → logprob: -13.284512519836426

Token 51: '])
' (ID: 5169)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.005931401159614325
    2. '])' → logprob: -5.505931377410889
    3. ',' → logprob: -6.880931377410889
    4. ' )' → logprob: -7.505931377410889
    5. ']' → logprob: -9.505931854248047
    6. ')])' → logprob: -9.880931854248047
    7. '))' → logprob: -10.255931854248047
    8. ',)' → logprob: -10.880931854248047
    9. '[' → logprob: -11.005931854248047
    10. ' ])' → logprob: -11.380931854248047

Token 52: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 53: ' t' (ID: 260)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' (adapté à ' t') → logprob: -0.017258459702134132
    2. ' t' → logprob: -4.517258644104004
    3. ')' → logprob: -5.517258644104004
    4. ',' → logprob: -7.142258644104004
    5. '   ' → logprob: -8.267258644104004
    6. '=' → logprob: -8.517258644104004
    7. ' =' → logprob: -8.892258644104004
    8. 'if' → logprob: -9.142258644104004
    9. 's' → logprob: -9.267258644104004
    10. 'int' → logprob: -9.267258644104004

Token 54: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.01108566578477621
    2. '.' → logprob: -4.511085510253906
    3. '.app' → logprob: -11.261085510253906
    4. '.extend' → logprob: -11.511085510253906
    5. '.ap' → logprob: -11.886085510253906
    6. 'append' → logprob: -12.761085510253906
    7. ' .' → logprob: -12.886085510253906
    8. ' +=' → logprob: -14.261085510253906
    9. '.a' → logprob: -14.261085510253906
    10. 'appen' → logprob: -14.761085510253906

Token 55: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.001367380958981812
    2. '(' → logprob: -6.876367568969727
    3. '(parts' → logprob: -8.126367568969727
    4. '(float' → logprob: -10.876367568969727
    5. 'int' → logprob: -11.626367568969727
    6. '(len' → logprob: -12.001367568969727
    7. '((' → logprob: -13.501367568969727
    8. '(in' → logprob: -14.001367568969727
    9. '(i' → logprob: -14.126367568969727
    10. ' (' → logprob: -14.251367568969727

Token 56: '(parts' (ID: 102573)
  Prédit: '(parts'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(parts' → logprob: -4.596781946020201e-05
    2. '(' → logprob: -10.000045776367188
    3. 'parts' → logprob: -15.875045776367188
    4. '(part' → logprob: -15.875045776367188
    5. ' parts' → logprob: -16.625045776367188
    6. ' (' → logprob: -16.750045776367188
    7. ')' → logprob: -18.625045776367188
    8. '(
' → logprob: -18.875045776367188
    9. '(par' → logprob: -19.125045776367188
    10. '(points' → logprob: -19.750045776367188

Token 57: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0006382156861945987
    2. '(' → logprob: -7.375638008117676
    3. '[-' → logprob: -12.000638008117676
    4. ' [' → logprob: -13.625638008117676
    5. '1' → logprob: -13.875638008117676
    6. '()[' → logprob: -14.750638008117676
    7. '([' → logprob: -15.000638008117676
    8. '[i' → logprob: -15.125638008117676
    9. ']' → logprob: -15.250638008117676
    10. ')' → logprob: -15.375638008117676

Token 58: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -6.885492621222511e-05
    2. '2' → logprob: -10.125068664550781
    3. '-' → logprob: -11.375068664550781
    4. ' ' → logprob: -12.125068664550781
    5. '[' → logprob: -12.500068664550781
    6. '0' → logprob: -12.625068664550781
    7. '])' → logprob: -13.250068664550781
    8. '3' → logprob: -13.625068664550781
    9. ']' → logprob: -14.625068664550781
    10. '4' → logprob: -15.312568664550781

Token 59: ']))

' (ID: 92947)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.03405307978391647
    2. ')' → logprob: -3.409053087234497
    3. '])' → logprob: -8.159052848815918
    4. ']))' → logprob: -9.784052848815918
    5. ')))' → logprob: -10.284052848815918
    6. ' ))' → logprob: -11.284052848815918
    7. ')])' → logprob: -12.409052848815918
    8. '))
' → logprob: -12.659052848815918
    9. ')]' → logprob: -13.409052848815918
    10. '),' → logprob: -13.659052848815918

Token 60: 'x' (ID: 87)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.6016133427619934
    2. 'for' → logprob: -1.6016132831573486
    3. ' if' → logprob: -2.7266132831573486
    4. '<|end|>' → logprob: -3.3516132831573486
    5. 's' → logprob: -3.6016132831573486
    6. ')' → logprob: -3.7266132831573486
    7. '+' → logprob: -4.101613521575928
    8. ' for' → logprob: -4.226613521575928
    9. '
' → logprob: -4.476613521575928
    10. 'i' → logprob: -4.726613521575928

Token 61: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.30079659819602966
    2. '=' → logprob: -1.550796627998352
    3. 'for' → logprob: -4.4257965087890625
    4. '_' → logprob: -5.0507965087890625
    5. '[' → logprob: -5.1757965087890625
    6. ' +=' → logprob: -5.5507965087890625
    7. ')' → logprob: -5.8007965087890625
    8. ',' → logprob: -6.0507965087890625
    9. '[i' → logprob: -6.1757965087890625
    10. 'i' → logprob: -6.1757965087890625

Token 62: ' input' (ID: 3422)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.5746728181838989
    2. 'sum' → logprob: -1.824672818183899
    3. 'max' → logprob: -2.4496726989746094
    4. 'len' → logprob: -2.6996726989746094
    5. 't' → logprob: -2.9496726989746094
    6. 'min' → logprob: -3.8246726989746094
    7. 'int' → logprob: -4.324672698974609
    8. ' ' → logprob: -4.449672698974609
    9. ' sum' → logprob: -5.574672698974609
    10. 'sorted' → logprob: -5.824672698974609

Token 63: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.012880421243607998
    2. '(' → logprob: -4.387880325317383
    3. '().' → logprob: -8.887880325317383
    4. ')' → logprob: -10.137880325317383
    5. '```' → logprob: -10.887880325317383
    6. ' ' → logprob: -11.137880325317383
    7. '('' → logprob: -11.262880325317383
    8. ' ()' → logprob: -11.387880325317383
    9. '`()' → logprob: -11.387880325317383
    10. '"' → logprob: -11.512880325317383

Token 64: ' ' (ID: 220)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 65: ' #' (ID: 1069)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.33758607506752014
    2. 'for' → logprob: -1.9625860452651978
    3. '\n' → logprob: -2.8375861644744873
    4. '
' → logprob: -3.3375861644744873
    5. '<|end|>' → logprob: -4.587585926055908
    6. 'print' → logprob: -5.087585926055908
    7. ' if' → logprob: -5.462585926055908
    8. 'idx' → logprob: -5.962585926055908
    9. 'index' → logprob: -6.087585926055908
    10. 's' → logprob: -6.087585926055908

Token 66: ' la' (ID: 557)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.6549849510192871
    2. ' x' → logprob: -1.904984951019287
    3. 'songs' → logprob: -2.779984951019287
    4. 's' → logprob: -3.279984951019287
    5. '""' → logprob: -3.404984951019287
    6. 'for' → logprob: -3.779984951019287
    7. '"' → logprob: -3.904984951019287
    8. ' for' → logprob: -4.154984951019287
    9. ' songs' → logprob: -4.404984951019287
    10. 't' → logprob: -4.842484951019287

Token 67: ' chanson' (ID: 113239)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5492832064628601
    2. ' chanson' → logprob: -2.174283266067505
    3. ' recherche' → logprob: -3.361783266067505
    4. ' suite' → logprob: -3.424283266067505
    5. 'suite' → logprob: -3.424283266067505
    6. ' variable' → logprob: -3.861783266067505
    7. 's' → logprob: -3.986783266067505
    8. '   ' → logprob: -4.986783027648926
    9. ' playlist' → logprob: -5.111783027648926
    10. '  ' → logprob: -5.111783027648926

Token 68: ' qui' (ID: 2780)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.7733433246612549
    2. '_' → logprob: -1.1483433246612549
    3. '_s' → logprob: -3.273343324661255
    4. '_index' → logprob: -3.398343324661255
    5. ' =' → logprob: -3.398343324661255
    6. '_name' → logprob: -3.773343324661255
    7. '<|end|>' → logprob: -3.773343324661255
    8. '=' → logprob: -4.898343086242676
    9. '.' → logprob: -5.023343086242676
    10. ')' → logprob: -5.273343086242676

Token 69: ' nous' (ID: 6176)
  Prédit: 'su'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'su' → logprob: -2.000960111618042
    2. 's' → logprob: -2.125960111618042
    3. 'do' → logprob: -2.250960111618042
    4. 'vient' → logprob: -2.375960111618042
    5. 'a' → logprob: -2.625960111618042
    6. ' doit' → logprob: -2.875960111618042
    7. ' va' → logprob: -3.375960111618042
    8. 'est' → logprob: -3.625960111618042
    9. 'cherche' → logprob: -3.625960111618042
    10. 'sou' → logprob: -3.750960111618042

Token 70: ' inté' (ID: 25319)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.6985653042793274
    2. 'pl' → logprob: -1.5735652446746826
    3. ' inté' → logprob: -2.3235652446746826
    4. 'inter' → logprob: -2.8235652446746826
    5. ' plaît' → logprob: -3.5735652446746826
    6. ' interesse' → logprob: -4.448565483093262
    7. 'inte' → logprob: -4.698565483093262
    8. ''inté' → logprob: -4.948565483093262
    9. 't' → logprob: -5.073565483093262
    10. 'in' → logprob: -5.198565483093262

Token 71: 'resse' (ID: 15994)
  Prédit: 'resse'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'resse' → logprob: -0.032992172986269
    2. 'r' → logprob: -3.782992124557495
    3. 'rès' → logprob: -4.782992362976074
    4. 'ress' → logprob: -7.782992362976074
    5. 're' → logprob: -8.532992362976074
    6. '\' → logprob: -9.157992362976074
    7. 's' → logprob: -9.157992362976074
    8. '`' → logprob: -9.282992362976074
    9. 'rese' → logprob: -9.532992362976074
    10. 'rés' → logprob: -9.907992362976074

Token 72: '

' (ID: 279)
  Prédit: 'idx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'idx' → logprob: -0.9462159872055054
    2. 'index' → logprob: -1.9462159872055054
    3. 'if' → logprob: -2.321216106414795
    4. 'i' → logprob: -2.571216106414795
    5. 'indice' → logprob: -2.946216106414795
    6. '.' → logprob: -2.946216106414795
    7. 's' → logprob: -3.196216106414795
    8. '\n' → logprob: -3.696216106414795
    9. 'ind' → logprob: -3.946216106414795
    10. 'for' → logprob: -4.196216106414795

Token 73: '#' (ID: 2)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.2368340492248535
    2. 'idx' → logprob: -1.4868340492248535
    3. 'if' → logprob: -1.8618340492248535
    4. 'index' → logprob: -2.1118340492248535
    5. 'pos' → logprob: -2.8618340492248535
    6. 'i' → logprob: -2.9868340492248535
    7. 'try' → logprob: -3.3618340492248535
    8. 'ind' → logprob: -3.6118340492248535
    9. 'd' → logprob: -5.2368340492248535
    10. 'indice' → logprob: -5.6118340492248535

Token 74: ' Je' (ID: 4678)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.7154181599617004
    2. 'idx' → logprob: -1.8404181003570557
    3. 'for' → logprob: -1.8404181003570557
    4. 'index' → logprob: -2.8404181003570557
    5. 'try' → logprob: -2.9654181003570557
    6. 'i' → logprob: -3.4654181003570557
    7. 'pos' → logprob: -3.5904181003570557
    8. 'ind' → logprob: -5.465418338775635
    9. 'found' → logprob: -5.465418338775635
    10. 'total' → logprob: -5.840418338775635

Token 75: ' cherche' (ID: 52345)
  Prédit: ' veux'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' veux' → logprob: -0.7386687397956848
    2. 'veux' → logprob: -1.73866868019104
    3. 'voud' → logprob: -2.48866868019104
    4. ' cherche' → logprob: -2.73866868019104
    5. 'cherche' → logprob: -3.23866868019104
    6. 's' → logprob: -3.61366868019104
    7. ' suppose' → logprob: -3.86366868019104
    8. ' voudrais' → logprob: -3.98866868019104
    9. ' souhaite' → logprob: -4.238668918609619
    10. ' ' → logprob: -5.113668918609619

Token 76: ' où' (ID: 15113)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.2976439297199249
    2. 'for' → logprob: -2.2976438999176025
    3. 'la' → logprob: -3.7976438999176025
    4. 'index' → logprob: -3.9226438999176025
    5. ' l' → logprob: -3.9226438999176025
    6. ' la' → logprob: -3.9226438999176025
    7. 'le' → logprob: -4.172644138336182
    8. ' for' → logprob: -4.547644138336182
    9. 'x' → logprob: -4.797644138336182
    10. 'i' → logprob: -5.297644138336182

Token 77: ' elle' (ID: 11451)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.04357283562421799
    2. 's' → logprob: -4.168572902679443
    3. 'songs' → logprob: -4.293572902679443
    4. ' x' → logprob: -4.418572902679443
    5. ' songs' → logprob: -7.418572902679443
    6. 'i' → logprob: -9.293572425842285
    7. 'for' → logprob: -9.543572425842285
    8. '(x' → logprob: -9.793572425842285
    9. 'is' → logprob: -9.918572425842285
    10. '```' → logprob: -10.043572425842285

Token 78: ' est' (ID: 893)
  Prédit: 'est'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'est' → logprob: -0.14165644347667694
    2. ' est' → logprob: -2.6416563987731934
    3. 's' → logprob: -3.6416563987731934
    4. 'se' → logprob: -3.6416563987731934
    5. 'a' → logprob: -5.766656398773193
    6. ' se' → logprob: -6.516656398773193
    7. '_' → logprob: -7.016656398773193
    8. ' ' → logprob: -7.641656398773193
    9. '_est' → logprob: -8.141656875610352
    10. 'arr' → logprob: -8.391656875610352

Token 79: '
' (ID: 198)
  Prédit: 'idx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'idx' → logprob: -0.5819852948188782
    2. 'for' → logprob: -1.7069852352142334
    3. 'index' → logprob: -1.9569852352142334
    4. 'i' → logprob: -2.8319852352142334
    5. 'pos' → logprob: -3.8319852352142334
    6. 'indice' → logprob: -4.3319854736328125
    7. '```' → logprob: -5.0819854736328125
    8. ' for' → logprob: -5.2069854736328125
    9. 'ind' → logprob: -6.2069854736328125
    10. 'try' → logprob: -6.2069854736328125

Token 80: 'if' (ID: 366)
  Prédit: 'idx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'idx' → logprob: -0.7695095539093018
    2. 'index' → logprob: -1.3945095539093018
    3. 'for' → logprob: -2.0195095539093018
    4. 'pos' → logprob: -2.1445095539093018
    5. 'i' → logprob: -3.6445095539093018
    6. ' idx' → logprob: -5.894509315490723
    7. ' for' → logprob: -5.894509315490723
    8. 'indice' → logprob: -6.394509315490723
    9. 'position' → logprob: -6.519509315490723
    10. ' index' → logprob: -6.769509315490723

Token 81: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.011111720465123653
    2. 'x' → logprob: -4.511111736297607
    3. ' ' → logprob: -10.13611125946045
    4. ' ' → logprob: -11.51111125946045
    5. ' songs' → logprob: -12.13611125946045
    6. 'songs' → logprob: -13.01111125946045
    7. ' not' → logprob: -13.76111125946045
    8. '"x' → logprob: -13.88611125946045
    9. ' '' → logprob: -14.13611125946045
    10. '  ' → logprob: -14.26111125946045

Token 82: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.015896402299404144
    2. 'in' → logprob: -4.390896320343018
    3. ' not' → logprob: -5.765896320343018
    4. ' ' → logprob: -8.640896797180176
    5. 'not' → logprob: -9.890896797180176
    6. ' i' → logprob: -11.515896797180176
    7. '<|end|>' → logprob: -13.015896797180176
    8. 'n' → logprob: -13.265896797180176
    9. 's' → logprob: -13.828396797180176
    10. ')' → logprob: -14.328396797180176

Token 83: ' songs' (ID: 15374)
  Prédit: ' songs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' songs' → logprob: -0.3139566481113434
    2. 'songs' → logprob: -1.313956618309021
    3. 's' → logprob: -7.3139567375183105
    4. '(s' → logprob: -11.438956260681152
    5. ' s' → logprob: -12.313956260681152
    6. 'song' → logprob: -12.438956260681152
    7. ' song' → logprob: -12.438956260681152
    8. '	s' → logprob: -13.563956260681152
    9. ' canciones' → logprob: -14.063956260681152
    10. '`s' → logprob: -14.813956260681152

Token 84: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.03806639462709427
    2. ' :' → logprob: -3.2880663871765137
    3. ':
' → logprob: -11.913066864013672
    4. ':index' → logprob: -11.913066864013672
    5. ':**' → logprob: -12.413066864013672
    6. '):' → logprob: -12.788066864013672
    7. ' :
' → logprob: -13.538066864013672
    8. ' :]' → logprob: -14.913066864013672
    9. ' and' → logprob: -15.038066864013672
    10. '[:]' → logprob: -15.163066864013672

Token 85: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2117948830127716
    2. ' :' → logprob: -2.086794853210449
    3. '   ' → logprob: -4.211794853210449
    4. ' idx' → logprob: -4.461794853210449
    5. 'index' → logprob: -4.836794853210449
    6. ' :
' → logprob: -5.336794853210449
    7. ' ind' → logprob: -5.461794853210449
    8. ' index' → logprob: -5.586794853210449
    9. 'idx' → logprob: -5.586794853210449
    10. ':
' → logprob: -5.836794853210449

Token 86: ' idx' (ID: 14016)
  Prédit: ' idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' idx' → logprob: -0.3137394189834595
    2. ' i' → logprob: -2.18873929977417
    3. 'idx' (adapté à ' idx') → logprob: -3.06373929977417
    4. 'i' → logprob: -3.43873929977417
    5. 'index' → logprob: -3.81373929977417
    6. ' index' → logprob: -3.81373929977417
    7. 'pos' → logprob: -4.31373929977417
    8. ' pos' → logprob: -5.06373929977417
    9. ' ind' → logprob: -5.31373929977417
    10. ' indx' → logprob: -6.31373929977417

Token 87: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.11298821121454239
    2. '=' → logprob: -2.237988233566284
    3. '_' → logprob: -9.362988471984863
    4. ')' → logprob: -10.737988471984863
    5. 's' → logprob: -11.112988471984863
    6. ' ' → logprob: -11.237988471984863
    7. '=s' → logprob: -11.362988471984863
    8. 'x' → logprob: -12.237988471984863
    9. '=index' → logprob: -12.362988471984863
    10. '=_' → logprob: -13.612988471984863

Token 88: ' songs' (ID: 15374)
  Prédit: 'songs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'songs' → logprob: -0.3133561611175537
    2. ' songs' → logprob: -1.3133561611175537
    3. 's' → logprob: -9.313356399536133
    4. 'song' → logprob: -13.188356399536133
    5. '   ' → logprob: -14.063356399536133
    6. '	s' → logprob: -14.688356399536133
    7. ' song' → logprob: -15.188356399536133
    8. ' ' → logprob: -15.438356399536133
    9. '(s' → logprob: -15.688356399536133
    10. ' s' → logprob: -16.063356399536133

Token 89: '.index' (ID: 9736)
  Prédit: '.index'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.index' → logprob: -0.0001126026691053994
    2. '.' → logprob: -9.125112533569336
    3. ' .' → logprob: -13.625112533569336
    4. '.Index' → logprob: -13.875112533569336
    5. 'index' → logprob: -14.375112533569336
    6. '.find' → logprob: -15.000112533569336
    7. '.idx' → logprob: -15.375112533569336
    8. '.tolist' → logprob: -15.750112533569336
    9. '.argmax' → logprob: -16.875112533569336
    10. '.findall' → logprob: -17.000112533569336

Token 90: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.014177612029016018
    2. '(' → logprob: -4.2641777992248535
    3. '(
' → logprob: -11.389177322387695
    4. ' (' → logprob: -13.389177322387695
    5. '(s' → logprob: -14.764177322387695
    6. '('' → logprob: -15.264177322387695
    7. '(

' → logprob: -15.264177322387695
    8. '((' → logprob: -15.639177322387695
    9. '("("' → logprob: -15.639177322387695
    10. '(xs' → logprob: -17.014177322387695

Token 91: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00039849523454904556
    2. ')
' → logprob: -8.125398635864258
    3. ')+' → logprob: -9.750398635864258
    4. ' )' → logprob: -10.125398635864258
    5. '+' → logprob: -13.500398635864258
    6. ')

' → logprob: -14.000398635864258
    7. ')
' → logprob: -14.250398635864258
    8. '   ' → logprob: -14.750398635864258
    9. '))' → logprob: -15.750398635864258
    10. ' )
' → logprob: -16.000398635864258

Token 92: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.19415540993213654
    2. '
' → logprob: -2.56915545463562
    3. 'if' → logprob: -3.44415545463562
    4. 'res' → logprob: -3.44415545463562
    5. '    
' → logprob: -4.444155216217041
    6. 't' → logprob: -4.694155216217041
    7. 'for' → logprob: -5.819155216217041
    8. ' if' → logprob: -6.069155216217041
    9. '  
' → logprob: -6.194155216217041
    10. ' 
' → logprob: -6.819155216217041

Token 93: ' for' (ID: 395)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.8461086750030518
    2. 'for' (adapté à ' for') → logprob: -0.8461086750030518
    3. 'if' → logprob: -2.8461086750030518
    4. 'time' → logprob: -3.8461086750030518
    5. 't' → logprob: -4.221108436584473
    6. 'duration' → logprob: -4.596108436584473
    7. 'i' → logprob: -4.721108436584473
    8. ' for' → logprob: -5.096108436584473
    9. 'total' → logprob: -5.721108436584473
    10. 'current' → logprob: -5.971108436584473

Token 94: ' val' (ID: 1459)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.30314597487449646
    2. ' i' → logprob: -1.4281460046768188
    3. 'range' → logprob: -4.428145885467529
    4. ' range' → logprob: -4.928145885467529
    5. 'j' → logprob: -6.678145885467529
    6. ' ' → logprob: -7.553145885467529
    7. ' j' → logprob: -7.803145885467529
    8. '   ' → logprob: -9.053146362304688
    9. '  ' → logprob: -9.928146362304688
    10. '```' → logprob: -10.053146362304688

Token 95: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.022133134305477142
    2. 'in' → logprob: -3.8971331119537354
    3. ' ' → logprob: -7.7721333503723145
    4. '   ' → logprob: -8.147132873535156
    5. ' i' → logprob: -8.397132873535156
    6. 'i' → logprob: -8.647132873535156
    7. 's' → logprob: -9.272132873535156
    8. ',' → logprob: -9.647132873535156
    9. 't' → logprob: -9.897132873535156
    10. '  ' → logprob: -10.022132873535156

Token 96: ' t' (ID: 260)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.04045359417796135
    2. ' t' → logprob: -3.2904536724090576
    3. 'range' → logprob: -6.4154534339904785
    4. ' range' → logprob: -7.4154534339904785
    5. '   ' → logprob: -9.790453910827637
    6. ' ' → logprob: -10.290453910827637
    7. '(t' → logprob: -10.540453910827637
    8. '[t' → logprob: -11.040453910827637
    9. '	t' → logprob: -11.415453910827637
    10. '  ' → logprob: -12.352953910827637

Token 97: '[idx' (ID: 25582)
  Prédit: '[:'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[:' → logprob: -0.04766158387064934
    2. ':' → logprob: -3.797661542892456
    3. '[idx' → logprob: -3.797661542892456
    4. '[' → logprob: -6.672661781311035
    5. '[:]' → logprob: -8.297661781311035
    6. ':
' → logprob: -10.047661781311035
    7. '[:-' → logprob: -10.797661781311035
    8. '   ' → logprob: -11.297661781311035
    9. ' [:' → logprob: -11.297661781311035
    10. ' :' → logprob: -11.422661781311035

Token 98: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.19564133882522583
    2. ':' → logprob: -2.070641279220581
    3. ' +' → logprob: -3.320641279220581
    4. ':]' → logprob: -5.44564151763916
    5. '-' → logprob: -5.57064151763916
    6. ']:' → logprob: -5.69564151763916
    7. '+:' → logprob: -6.19564151763916
    8. '[' → logprob: -8.44564151763916
    9. ' -' → logprob: -8.44564151763916
    10. 'idx' → logprob: -8.57064151763916

Token 99: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0002979240380227566
    2. ' ' → logprob: -8.250297546386719
    3. ':' → logprob: -11.375297546386719
    4. '   ' → logprob: -12.000297546386719
    5. ']' → logprob: -12.875297546386719
    6. '<|end|>' → logprob: -13.062797546386719
    7. '```' → logprob: -13.125297546386719
    8. ')' → logprob: -13.125297546386719
    9. '...' → logprob: -13.562797546386719
    10. '  ' → logprob: -13.687797546386719

Token 100: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.000556012790184468
    2. ']:' → logprob: -8.125555992126465
    3. ':]' → logprob: -8.625555992126465
    4. ' :' → logprob: -9.750555992126465
    5. '():' → logprob: -11.750555992126465
    6. '：' → logprob: -13.250555992126465
    7. ':n' → logprob: -13.500555992126465
    8. '::' → logprob: -13.500555992126465
    9. ':],' → logprob: -13.750555992126465
    10. ':end' → logprob: -13.875555992126465

Token 101: ']:
' (ID: 22152)
  Prédit: ']:'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']:' → logprob: -0.012315497733652592
    2. ']:
' → logprob: -4.512315273284912
    3. ']' → logprob: -7.137315273284912
    4. ']:
' → logprob: -8.63731575012207
    5. ' ]' → logprob: -8.76231575012207
    6. ']:

' → logprob: -10.01231575012207
    7. '   ' → logprob: -10.26231575012207
    8. ']):' → logprob: -11.51231575012207
    9. ':' → logprob: -11.88731575012207
    10. '       ' → logprob: -12.01231575012207

Token 102: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.2610137164592743
    2. 'res' → logprob: -2.2610137462615967
    3. ' res' → logprob: -3.0110137462615967
    4. 'if' → logprob: -3.1360137462615967
    5. ' if' → logprob: -3.5110137462615967
    6. '   ' → logprob: -6.011013507843018
    7. '```' → logprob: -8.511013984680176
    8. ' ' → logprob: -9.261013984680176
    9. '	res' → logprob: -10.886013984680176
    10. '        
' → logprob: -10.886013984680176

Token 103: ' res' (ID: 694)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.1517980694770813
    2. 'res' (adapté à ' res') → logprob: -2.1517980098724365
    3. '       ' → logprob: -4.651798248291016
    4. ' if' → logprob: -4.776798248291016
    5. '   ' → logprob: -5.526798248291016
    6. '           ' → logprob: -6.276798248291016
    7. ' res' → logprob: -7.401798248291016
    8. ' ' → logprob: -10.401798248291016
    9. '    ' → logprob: -10.901798248291016
    10. '
' → logprob: -10.901798248291016

Token 104: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.016838911920785904
    2. ' +=' → logprob: -4.141839027404785
    3. '=' → logprob: -7.891839027404785
    4. '>' → logprob: -8.516839027404785
    5. '-=' → logprob: -9.641839027404785
    6. '+' → logprob: -10.516839027404785
    7. ']+=' → logprob: -10.766839027404785
    8. '<' → logprob: -10.766839027404785
    9. ' =' → logprob: -11.016839027404785
    10. '   ' → logprob: -11.141839027404785

Token 105: ' val' (ID: 1459)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.0026468830183148384
    2. ' val' → logprob: -6.0026469230651855
    3. '1' → logprob: -8.752646446228027
    4. ' ' → logprob: -12.502646446228027
    5. 'int' → logprob: -12.752646446228027
    6. 'res' → logprob: -13.502646446228027
    7. '   ' → logprob: -13.627646446228027
    8. '	val' → logprob: -13.627646446228027
    9. '(val' → logprob: -14.502646446228027
    10. 't' → logprob: -14.752646446228027

Token 106: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18110249936580658
    2. '       ' → logprob: -2.3061025142669678
    3. 'print' → logprob: -2.9311025142669678
    4. 'else' → logprob: -4.931102275848389
    5. ' else' → logprob: -5.431102275848389
    6. ' print' → logprob: -8.056102752685547
    7. 'elif' → logprob: -8.431102752685547
    8. ' if' → logprob: -9.181102752685547
    9. '    ' → logprob: -9.431102752685547
    10. 'if' → logprob: -9.931102752685547

Token 107: 'else' (ID: 2807)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.806649923324585
    2. 'else' → logprob: -1.056649923324585
    3. ' else' → logprob: -2.056649923324585
    4. 'print' → logprob: -2.681649923324585
    5. '       ' → logprob: -5.056650161743164
    6. 'elif' → logprob: -7.056650161743164
    7. ' print' → logprob: -7.431650161743164
    8. 'if' → logprob: -7.556650161743164
    9. ' if' → logprob: -8.056650161743164
    10. ' elif' → logprob: -8.431650161743164

Token 108: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.014930566772818565
    2. ':
' → logprob: -4.639930725097656
    3. ' :' → logprob: -5.389930725097656
    4. '   ' → logprob: -8.139930725097656
    5. ' :
' → logprob: -8.139930725097656
    6. '    ' → logprob: -13.014930725097656
    7. ' ' → logprob: -13.014930725097656
    8. ':return' → logprob: -13.014930725097656
    9. ':

' → logprob: -13.264930725097656
    10. ':
' → logprob: -13.389930725097656

Token 109: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02589009702205658
    2. 'res' → logprob: -4.150889873504639
    3. ' res' → logprob: -5.150889873504639
    4. 'print' → logprob: -5.775889873504639
    5. ' print' → logprob: -7.525889873504639
    6. '```' → logprob: -9.275890350341797
    7. 'pass' → logprob: -9.400890350341797
    8. ' pass' → logprob: -10.150890350341797
    9. ' ' → logprob: -10.150890350341797
    10. '0' → logprob: -10.525890350341797

Token 110: ' res' (ID: 694)
  Prédit: 'pass'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pass' → logprob: -0.7801358103752136
    2. 'res' (adapté à ' res') → logprob: -1.1551358699798584
    3. 'print' → logprob: -2.2801358699798584
    4. '   ' → logprob: -2.7801358699798584
    5. ' pass' → logprob: -3.1551358699798584
    6. ' res' → logprob: -4.405135631561279
    7. '0' → logprob: -5.780135631561279
    8. ' print' → logprob: -6.030135631561279
    9. 'return' → logprob: -7.155135631561279
    10. '```' → logprob: -8.155136108398438

Token 111: ' =' (ID: 314)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.9593201279640198
    2. '=' → logprob: -1.084320068359375
    3. ' +=' → logprob: -1.334320068359375
    4. ' =' → logprob: -4.459320068359375
    5. '+' → logprob: -5.959320068359375
    6. ' ' → logprob: -7.209320068359375
    7. '<|end|>' → logprob: -7.834320068359375
    8. '0' → logprob: -10.834320068359375
    9. ' +' → logprob: -10.959320068359375
    10. '==' → logprob: -11.084320068359375

Token 112: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.12892958521842957
    2. '-' → logprob: -2.128929615020752
    3. ' ' → logprob: -6.628929615020752
    4. ' -' → logprob: -8.378929138183594
    5. '"' → logprob: -8.878929138183594
    6. 'n' → logprob: -9.378929138183594
    7. 't' → logprob: -9.753929138183594
    8. 'None' → logprob: -9.878929138183594
    9. ''' → logprob: -11.128929138183594
    10. '?' → logprob: -11.253929138183594

Token 113: '0' (ID: 15)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.5293810963630676
    2. '0' → logprob: -0.9043810963630676
    3. '"' → logprob: -5.529381275177002
    4. 'sum' → logprob: -6.779381275177002
    5. 't' → logprob: -8.779380798339844
    6. 'x' → logprob: -9.154380798339844
    7. 'None' → logprob: -9.154380798339844
    8. '100' → logprob: -9.279380798339844
    9. 'len' → logprob: -9.779380798339844
    10. 'n' → logprob: -9.904380798339844

Token 114: ' ' (ID: 220)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -2.117345684382599e-05
    2. ' print' → logprob: -10.875020980834961
    3. '#' → logprob: -14.500020980834961
    4. '```' → logprob: -14.875020980834961
    5. 'return' → logprob: -15.375020980834961
    6. '\' → logprob: -15.375020980834961
    7. ')' → logprob: -15.500020980834961
    8. '
' → logprob: -15.625020980834961
    9. '#print' → logprob: -15.750020980834961
    10. '   ' → logprob: -16.12502098083496

Token 115: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0001126026691053994
    2. ' print' → logprob: -9.125112533569336
    3. '#' → logprob: -14.000112533569336
    4. '   ' → logprob: -14.375112533569336
    5. ')' → logprob: -14.625112533569336
    6. '```' → logprob: -15.000112533569336
    7. '#print' → logprob: -15.000112533569336
    8. 'return' → logprob: -15.375112533569336
    9. '
' → logprob: -15.375112533569336
    10. 'if' → logprob: -16.125112533569336

Token 116: ' bon' (ID: 4846)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0705551728606224
    2. 'pass' → logprob: -2.6955552101135254
    3. '0' → logprob: -8.320554733276367
    4. '#' → logprob: -8.570554733276367
    5. 'return' → logprob: -9.695554733276367
    6. ' print' → logprob: -9.820554733276367
    7. ' pass' → logprob: -9.945554733276367
    8. '...' → logprob: -12.195554733276367
    9. '#print' → logprob: -12.195554733276367
    10. '```' → logprob: -12.695554733276367

Token 117: ',' (ID: 11)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0003044802288059145
    2. ' print' → logprob: -8.125304222106934
    3. 'else' → logprob: -12.750304222106934
    4. '#' → logprob: -13.750304222106934
    5. 'return' → logprob: -13.875304222106934
    6. '#print' → logprob: -14.125304222106934
    7. '   ' → logprob: -14.375304222106934
    8. '```' → logprob: -14.625304222106934
    9. '
' → logprob: -14.750304222106934
    10. ')' → logprob: -15.500304222106934

Token 118: ' on' (ID: 402)
  Prédit: 'pass'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pass' → logprob: -0.5637408494949341
    2. 'print' → logprob: -1.188740849494934
    3. '#' → logprob: -2.1887407302856445
    4. '0' → logprob: -4.5637407302856445
    5. ' pass' → logprob: -7.0637407302856445
    6. '...' → logprob: -7.4387407302856445
    7. '#print' → logprob: -7.5637407302856445
    8. ' print' → logprob: -7.9387407302856445
    9. 'res' → logprob: -8.063740730285645
    10. '   ' → logprob: -8.188740730285645

Token 119: ' fait' (ID: 7473)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'continue' → logprob: -1.0612471103668213
    2. 'pe' → logprob: -1.3112471103668213
    3. 'print' → logprob: -1.9362471103668213
    4. 'ne' → logprob: -2.9362471103668213
    5. 'pas' → logprob: -3.5612471103668213
    6. 'ignore' → logprob: -3.8112471103668213
    7. 's' → logprob: -3.9362471103668213
    8. '#' → logprob: -4.061246871948242
    9. 'n' → logprob: -4.186246871948242
    10. ' continue' → logprob: -4.561246871948242

Token 120: ' comme' (ID: 7971)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -1.2839235067367554
    2. 'print' → logprob: -1.6589235067367554
    3. 'pass' → logprob: -2.033923625946045
    4. 'continue' → logprob: -2.033923625946045
    5. 'comme' → logprob: -2.658923625946045
    6. 'contin' → logprob: -3.158923625946045
    7. '```' → logprob: -3.908923625946045
    8. 'res' → logprob: -4.158923625946045
    9. 'just' → logprob: -4.158923625946045
    10. 'aut' → logprob: -4.283923625946045

Token 121: ' ça' (ID: 13590)
  Prédit: 'ça'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ça' → logprob: -1.078842282295227
    2. 'si' → logprob: -1.078842282295227
    3. 'if' → logprob: -1.328842282295227
    4. 'cela' → logprob: -3.5788421630859375
    5. ' if' → logprob: -4.5788421630859375
    6. ' si' → logprob: -5.4538421630859375
    7. ' ça' → logprob: -5.5788421630859375
    8. 'avant' → logprob: -6.4538421630859375
    9. 'dans' → logprob: -6.4538421630859375
    10. '```' → logprob: -7.0788421630859375

Token 122: '

' (ID: 279)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -2.176947600673884e-05
    2. ' print' → logprob: -11.000021934509277
    3. '#' → logprob: -13.750021934509277
    4. 'return' → logprob: -13.875021934509277
    5. '<|end|>' → logprob: -14.000021934509277
    6. ')' → logprob: -14.250021934509277
    7. '```' → logprob: -14.625021934509277
    8. '#print' → logprob: -14.750021934509277
    9. '   ' → logprob: -16.37502098083496
    10. '
' → logprob: -16.37502098083496

Token 123: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -4.870950215263292e-05
    2. ' print' → logprob: -10.000048637390137
    3. '
' → logprob: -14.125048637390137
    4. '#' → logprob: -14.250048637390137
    5. ')' → logprob: -14.250048637390137
    6. '#print' → logprob: -15.000048637390137
    7. '```' → logprob: -15.125048637390137
    8. '(print' → logprob: -15.500048637390137
    9. '\n' → logprob: -15.875048637390137
    10. '.print' → logprob: -16.250049591064453

Token 124: '(res' (ID: 8331)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014247656799852848
    2. '(res' → logprob: -4.264247894287109
    3. '("' → logprob: -10.13924789428711
    4. '()' → logprob: -10.63924789428711
    5. '('' → logprob: -11.38924789428711
    6. '(sum' → logprob: -12.26424789428711
    7. ' (' → logprob: -13.88924789428711
    8. '(s' → logprob: -13.88924789428711
    9. '(
' → logprob: -14.63924789428711
    10. '("("' → logprob: -14.63924789428711

Token 125: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.512236498361744e-07
    2. '))' → logprob: -15.250000953674316
    3. ' )' → logprob: -15.750000953674316
    4. ')`' → logprob: -15.875000953674316
    5. '())' → logprob: -18.625
    6. ')}' → logprob: -19.0
    7. '()' → logprob: -19.25
    8. ')
' → logprob: -19.75
    9. '`)' → logprob: -20.125
    10. '')' → logprob: -20.125


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 123
Tokens correctement prédits (1ère position, stricte): 37
Tokens correctement prédits (1ère position, avec adaptation): 38
Tokens correctement prédits (top 10): 74
Précision stricte (1ère position): 30.08%
Précision adaptée (1ère position): 30.89%
Précision (top 10): 60.16%
================================================================================
