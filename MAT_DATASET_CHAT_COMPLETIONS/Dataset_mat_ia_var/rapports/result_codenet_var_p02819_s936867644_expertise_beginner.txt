================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:33:26
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def P(n):
    # Vérifie si n est un entier
    if type(n) != int:
        raise TypeError("Le nombre doit être un entier.")
    # Vérifie si n est plus petit que 1
    if n < 1:
        raise ValueError("Le nombre doit être supérieur ou égal à 1.")
    # 1 n'est pas un nombre premier
    if n == 1:
        return -1
    # 2 est le seul nombre premier pair
    if n % 2 == 0 and n != 2:
        return 2
    # Vérifie les diviseurs impairs jusqu'à la racine carrée de n
    a = 3
    while a * a <= n:
        if n % a == 0:
            return a
        a = a + 2
    return 0

a = int(input())
while P(a) != 0:
    a = a + 1
print(a)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' P' (ID: 398)
  → Token d'amorce (pas de prédiction)

Token 2: '(n' (ID: 2406)
  → Token d'amorce (pas de prédiction)

Token 3: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00811781920492649
    2. ')' → logprob: -4.88311767578125
    3. ',' → logprob: -8.38311767578125
    4. ':' → logprob: -9.13311767578125
    5. '):
' → logprob: -9.13311767578125
    6. 'u' → logprob: -11.25811767578125
    7. 'e' → logprob: -11.38311767578125
    8. 'a' → logprob: -11.50811767578125
    9. ' ):' → logprob: -12.13311767578125
    10. 'ython' → logprob: -12.63311767578125

Token 4: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0022028323728591204
    2. '   ' → logprob: -6.502202987670898
    3. '```' → logprob: -7.752202987670898
    4. '):' → logprob: -9.752202987670898
    5. ':return' → logprob: -9.752202987670898
    6. '():' → logprob: -9.877202987670898
    7. ':
' → logprob: -11.127202987670898
    8. ' if' → logprob: -11.252202987670898
    9. ' :' → logprob: -11.252202987670898
    10. '':' → logprob: -11.752202987670898

Token 5: ' #' (ID: 1069)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.0681101083755493
    2. ' if' → logprob: -1.4431101083755493
    3. 'i' → logprob: -1.5681101083755493
    4. '   ' → logprob: -1.9431101083755493
    5. '```' → logprob: -3.8181099891662598
    6. ' i' → logprob: -4.19310998916626
    7. 'if' → logprob: -4.44310998916626
    8. ' 
' → logprob: -5.69310998916626
    9. ' return' → logprob: -5.69310998916626
    10. '`' → logprob: -5.94310998916626

Token 6: ' Vér' (ID: 159169)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.6634759902954102
    2. 'i' → logprob: -1.5384759902954102
    3. 'if' → logprob: -2.16347599029541
    4. ' ' → logprob: -2.66347599029541
    5. ' i' → logprob: -3.16347599029541
    6. 'r' → logprob: -4.03847599029541
    7. 's' → logprob: -5.03847599029541
    8. ' """' → logprob: -5.28847599029541
    9. '   ' → logprob: -5.91347599029541
    10. ' return' → logprob: -5.91347599029541

Token 7: 'ifie' (ID: 46409)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.32540565729141235
    2. 'ifie' → logprob: -1.4504055976867676
    3. 'ification' → logprob: -3.8254055976867676
    4. 'ifier' → logprob: -4.575405597686768
    5. 'if' → logprob: -4.950405597686768
    6. 'ifi' → logprob: -5.825405597686768
    7. 'ifiez' → logprob: -7.950405597686768
    8. 'a' → logprob: -8.200406074523926
    9. 'ifié' → logprob: -9.325406074523926
    10. '```' → logprob: -9.325406074523926

Token 8: ' si' (ID: 1784)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.09499592334032059
    2. 's' → logprob: -2.8449959754943848
    3. '[' → logprob: -5.344995975494385
    4. ''' → logprob: -5.469995975494385
    5. '_' → logprob: -5.594995975494385
    6. ' if' → logprob: -5.844995975494385
    7. '(' → logprob: -6.219995975494385
    8. 'e' → logprob: -6.344995975494385
    9. 'i' → logprob: -6.719995975494385
    10. '(space' → logprob: -6.719995975494385

Token 9: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.2824608385562897
    2. 'n' → logprob: -1.5324608087539673
    3. ' ' → logprob: -3.532460927963257
    4. '   ' → logprob: -7.532460689544678
    5. ' ' → logprob: -8.657461166381836
    6. '  ' → logprob: -10.657461166381836
    7. ' `' → logprob: -11.032461166381836
    8. ' le' → logprob: -11.032461166381836
    9. '(n' → logprob: -11.782461166381836
    10. ' (' → logprob: -11.782461166381836

Token 10: ' est' (ID: 893)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.42417269945144653
    2. ' est' → logprob: -1.5491726398468018
    3. 'est' → logprob: -3.4241726398468018
    4. '_' → logprob: -3.7991726398468018
    5. 'e' → logprob: -4.424172878265381
    6. 'u' → logprob: -4.549172878265381
    7. ')' → logprob: -4.799172878265381
    8. '   ' → logprob: -4.924172878265381
    9. ' is' → logprob: -5.049172878265381
    10. '%' → logprob: -5.424172878265381

Token 11: ' un' (ID: 537)
  Prédit: ' pair'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pair' → logprob: -0.8109724521636963
    2. ' un' → logprob: -1.5609724521636963
    3. 'prem' → logprob: -1.8109724521636963
    4. ' premier' → logprob: -2.3109724521636963
    5. 'pair' → logprob: -2.9359724521636963
    6. ' ' → logprob: -4.810972213745117
    7. 'un' → logprob: -5.060972213745117
    8. ' divisible' → logprob: -5.185972213745117
    9. '   ' → logprob: -5.435972213745117
    10. ' impair' → logprob: -6.310972213745117

Token 12: ' entier' (ID: 80473)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.9665045738220215
    2. 'nombre' → logprob: -1.0915045738220215
    3. ' nombre' → logprob: -1.5915045738220215
    4. 'e' → logprob: -3.3415045738220215
    5. ' ' → logprob: -4.2165045738220215
    6. ' entier' → logprob: -4.7165045738220215
    7. 'prem' → logprob: -5.2165045738220215
    8. '   ' → logprob: -5.5915045738220215
    9. 'n' → logprob: -6.4665045738220215
    10. ' e' → logprob: -6.7165045738220215

Token 13: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.48772284388542175
    2. ' ' → logprob: -1.4877228736877441
    3. ' :' → logprob: -2.362722873687744
    4. ':' → logprob: -3.737722873687744
    5. '  ' → logprob: -5.112722873687744
    6. ' ,' → logprob: -5.112722873687744
    7. ',' → logprob: -5.237722873687744
    8. '_' → logprob: -5.362722873687744
    9. 'e' → logprob: -5.362722873687744
    10. 'u' → logprob: -6.112722873687744

Token 14: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07713054865598679
    2. ':' → logprob: -3.5771305561065674
    3. ' ' → logprob: -3.5771305561065674
    4. ' :' → logprob: -4.327130317687988
    5. '  ' → logprob: -6.077130317687988
    6. ',' → logprob: -7.827130317687988
    7. ')' → logprob: -8.077130317687988
    8. ' ,' → logprob: -8.202130317687988
    9. '```' → logprob: -8.202130317687988
    10. '    ' → logprob: -8.327130317687988

Token 15: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.035833120346069336
    2. ' ' → logprob: -4.285833358764648
    3. ' if' → logprob: -4.410833358764648
    4. '```' → logprob: -6.035833358764648
    5. ':' → logprob: -6.785833358764648
    6. ' :' → logprob: -6.785833358764648
    7. 'if' (adapté à ' if') → logprob: -7.035833358764648
    8. '  ' → logprob: -7.285833358764648
    9. ''' → logprob: -7.535833358764648
    10. '    ' → logprob: -7.785833358764648

Token 16: ' type' (ID: 1490)
  Prédit: ' not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.31756219267845154
    2. ' isinstance' → logprob: -1.317562222480774
    3. ' type' → logprob: -5.942562103271484
    4. ' ' → logprob: -7.567562103271484
    5. 'not' → logprob: -7.692562103271484
    6. ' ' → logprob: -7.692562103271484
    7. ' n' → logprob: -8.567562103271484
    8. 'type' → logprob: -10.192562103271484
    9. 'is' → logprob: -12.942562103271484
    10. '  ' → logprob: -12.942562103271484

Token 17: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.2519400119781494
    2. '(' → logprob: -1.5019400119781494
    3. ' (' → logprob: -12.12693977355957
    4. 'n' → logprob: -12.62693977355957
    5. '(
' → logprob: -13.75193977355957
    6. 's' → logprob: -14.50193977355957
    7. '(

' → logprob: -15.25193977355957
    8. ')' → logprob: -16.62693977355957
    9. ' n' → logprob: -16.75193977355957
    10. '(nn' → logprob: -16.87693977355957

Token 18: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.18261069059371948
    2. '(' → logprob: -1.9326107501983643
    3. ' )' → logprob: -4.557610511779785
    4. '(n' → logprob: -4.557610511779785
    5. ')==' → logprob: -7.807610511779785
    6. ' ==' → logprob: -8.682610511779785
    7. '==' → logprob: -8.807610511779785
    8. ' is' → logprob: -9.182610511779785
    9. 's' → logprob: -10.182610511779785
    10. '()' → logprob: -10.182610511779785

Token 19: ' !=' (ID: 1666)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5200174450874329
    2. ' is' → logprob: -1.020017385482788
    3. ' ==' → logprob: -3.520017385482788
    4. '==' → logprob: -5.145017623901367
    5. ' !=' → logprob: -5.770017623901367
    6. 'is' → logprob: -6.270017623901367
    7. '(n' → logprob: -6.395017623901367
    8. ' ' → logprob: -7.645017623901367
    9. ' not' → logprob: -7.645017623901367
    10. '=' → logprob: -8.145017623901367

Token 20: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.126929372549057
    2. 'int' → logprob: -2.12692928314209
    3. '<int' → logprob: -14.00192928314209
    4. '=int' → logprob: -15.00192928314209
    5. '	int' → logprob: -16.501930236816406
    6. '(int' → logprob: -16.626930236816406
    7. ' in' → logprob: -17.876930236816406
    8. ' ' → logprob: -18.251930236816406
    9. '```' → logprob: -18.501930236816406
    10. '[int' → logprob: -18.876930236816406

Token 21: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.049599539488554
    2. ' :' → logprob: -3.0495996475219727
    3. ' or' → logprob: -7.549599647521973
    4. ':
' → logprob: -8.799599647521973
    5. ' :
' → logprob: -9.174599647521973
    6. '):' → logprob: -9.424599647521973
    7. ':return' → logprob: -10.049599647521973
    8. '    ' → logprob: -10.049599647521973
    9. ' and' → logprob: -10.924599647521973
    10. ' ):' → logprob: -11.424599647521973

Token 22: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.9075404405593872
    2. '    ' → logprob: -1.4075404405593872
    3. ' ' → logprob: -1.9075404405593872
    4. ':' → logprob: -2.0325403213500977
    5. ' :' → logprob: -3.6575403213500977
    6. '   ' → logprob: -4.282540321350098
    7. ' 
' → logprob: -4.907540321350098
    8. ':return' → logprob: -5.407540321350098
    9. ' return' → logprob: -6.032540321350098
    10. ')' → logprob: -6.032540321350098

Token 23: ' raise' (ID: 9338)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.8937339782714844
    2. '    ' → logprob: -1.3937339782714844
    3. ' ' → logprob: -1.6437339782714844
    4. 'return' → logprob: -2.8937339782714844
    5. '       ' → logprob: -3.2687339782714844
    6. ' 
' → logprob: -3.3937339782714844
    7. '   ' → logprob: -4.643733978271484
    8. ' raise' → logprob: -5.268733978271484
    9. 'raise' (adapté à ' raise') → logprob: -6.643733978271484
    10. '     
' → logprob: -6.768733978271484

Token 24: ' Type' (ID: 7003)
  Prédit: ' Value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Value' → logprob: -0.4000558853149414
    2. ' ' → logprob: -1.1500558853149414
    3. ' Type' → logprob: -4.775055885314941
    4. ' ' → logprob: -6.400055885314941
    5. 'Value' → logprob: -6.525055885314941
    6. ' Val' → logprob: -7.275055885314941
    7. '  ' → logprob: -8.400055885314941
    8. '	Value' → logprob: -8.775055885314941
    9. 'Type' → logprob: -9.025055885314941
    10. 'space' → logprob: -9.900055885314941

Token 25: 'Error' (ID: 2255)
  Prédit: 'Error'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Error' → logprob: -3.128163257315464e-07
    2. '   ' → logprob: -16.25
    3. 'rror' → logprob: -16.75
    4. 'Erro' → logprob: -16.875
    5. 'Er' → logprob: -17.125
    6. ' Error' → logprob: -18.375
    7. '       ' → logprob: -19.0
    8. '```' → logprob: -19.5
    9. '    ' → logprob: -19.625
    10. 'E' → logprob: -19.75

Token 26: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.12912017107009888
    2. '("' → logprob: -2.254120111465454
    3. '('' → logprob: -4.379120349884033
    4. '(
' → logprob: -5.754120349884033
    5. '(":' → logprob: -9.129119873046875
    6. '()' → logprob: -9.504119873046875
    7. ':' → logprob: -9.754119873046875
    8. ',' → logprob: -10.504119873046875
    9. '("")' → logprob: -10.504119873046875
    10. '(f' → logprob: -10.629119873046875

Token 27: 'Le' (ID: 2486)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.31456199288368225
    2. ' n' → logprob: -1.8145619630813599
    3. 'L' → logprob: -2.9395620822906494
    4. 'l' → logprob: -3.8145620822906494
    5. 'Le' → logprob: -4.31456184387207
    6. ' L' → logprob: -4.43956184387207
    7. ' l' → logprob: -5.68956184387207
    8. ' Le' → logprob: -7.06456184387207
    9. 'Argument' → logprob: -7.56456184387207
    10. ' le' → logprob: -7.93956184387207

Token 28: ' nombre' (ID: 9733)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5652987957000732
    2. ' nombre' → logprob: -1.3152987957000732
    3. ' n' → logprob: -2.8152987957000732
    4. 'n' → logprob: -2.8152987957000732
    5. ' entier' → logprob: -3.9402987957000732
    6. ' param' → logprob: -4.565299034118652
    7. 'nombre' → logprob: -5.565299034118652
    8. '   ' → logprob: -6.190299034118652
    9. ' type' → logprob: -6.565299034118652
    10. ' ' → logprob: -6.940299034118652

Token 29: ' doit' (ID: 21822)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.07551061362028122
    2. ' doit' → logprob: -2.9505105018615723
    3. ' n' → logprob: -3.9505105018615723
    4. ' ' → logprob: -8.07551097869873
    5. ' entier' → logprob: -8.20051097869873
    6. '  ' → logprob: -9.20051097869873
    7. 'n' → logprob: -9.57551097869873
    8. ' d' → logprob: -9.70051097869873
    9. ' donné' → logprob: -9.70051097869873
    10. ' attendu' → logprob: -9.82551097869873

Token 30: ' être' (ID: 9104)
  Prédit: ' être'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' être' → logprob: -0.05342021584510803
    2. 'être' → logprob: -3.803420305252075
    3. ' ' → logprob: -3.928420305252075
    4. ' etre' → logprob: -5.178420066833496
    5. ' be' → logprob: -6.303420066833496
    6. ' ' → logprob: -7.553420066833496
    7. '’être' → logprob: -7.928420066833496
    8. '<|end|>' → logprob: -8.053420066833496
    9. ''être' → logprob: -8.303420066833496
    10. '  ' → logprob: -8.303420066833496

Token 31: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.03849916160106659
    2. 'un' → logprob: -3.288499116897583
    3. 'ent' → logprob: -8.413498878479004
    4. ' entier' → logprob: -8.663498878479004
    5. ''un' → logprob: -10.913498878479004
    6. ' de' → logprob: -11.413498878479004
    7. ' ent' → logprob: -11.913498878479004
    8. ' an' → logprob: -12.413498878479004
    9. 'int' → logprob: -12.413498878479004
    10. ' ' → logprob: -12.538498878479004

Token 32: ' entier' (ID: 80473)
  Prédit: ' entier'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' entier' → logprob: -0.05791528522968292
    2. 'ent' → logprob: -3.057915210723877
    3. ' ent' → logprob: -5.307915210723877
    4. ' ' → logprob: -6.057915210723877
    5. ' nombre' → logprob: -7.057915210723877
    6. 'e' → logprob: -7.682915210723877
    7. '_ent' → logprob: -8.932915687561035
    8. ' ' → logprob: -9.557915687561035
    9. ' entière' → logprob: -9.557915687561035
    10. ' enti' → logprob: -9.682915687561035

Token 33: '.")
' (ID: 27834)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -0.1214727982878685
    2. ')")' → logprob: -2.7464728355407715
    3. ')' → logprob: -2.9964728355407715
    4. '")
' → logprob: -10.121472358703613
    5. ' ")' → logprob: -10.496472358703613
    6. ')")
' → logprob: -10.621472358703613
    7. '.")' → logprob: -10.621472358703613
    8. 'n' → logprob: -10.996472358703613
    9. '}")' → logprob: -10.996472358703613
    10. '')' → logprob: -11.246472358703613

Token 34: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.9310417771339417
    2. '   ' → logprob: -1.0560417175292969
    3. '\n' → logprob: -2.306041717529297
    4. '    
' → logprob: -3.181041717529297
    5. '\' → logprob: -3.431041717529297
    6. ':
' → logprob: -4.181041717529297
    7. '
' → logprob: -4.181041717529297
    8. ' 
' → logprob: -4.306041717529297
    9. '  
' → logprob: -4.681041717529297
    10. ')' → logprob: -4.931041717529297

Token 35: ' #' (ID: 1069)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.3308374583721161
    2. '   ' → logprob: -2.3308374881744385
    3. '\n' → logprob: -2.9558374881744385
    4. '\' → logprob: -3.2058374881744385
    5. ')' → logprob: -4.080837249755859
    6. ':
' → logprob: -4.080837249755859
    7. '    
' → logprob: -4.455837249755859
    8. '
' → logprob: -4.580837249755859
    9. ' 
' → logprob: -4.580837249755859
    10. '  
' → logprob: -5.080837249755859

Token 36: ' Vér' (ID: 159169)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.41486600041389465
    2. ' n' → logprob: -1.1648659706115723
    3. 'if' → logprob: -4.289865970611572
    4. ' if' → logprob: -4.914865970611572
    5. '   ' → logprob: -6.289865970611572
    6. 'return' → logprob: -6.664865970611572
    7. 'elif' → logprob: -6.914865970611572
    8. ' return' → logprob: -7.414865970611572
    9. ' elif' → logprob: -8.03986644744873
    10. 'abs' → logprob: -8.03986644744873

Token 37: 'ifie' (ID: 46409)
  Prédit: 'ifie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifie' → logprob: -0.0017563373548910022
    2. 'if' → logprob: -6.751756191253662
    3. 'ifier' → logprob: -8.75175666809082
    4. 'éf' → logprob: -8.87675666809082
    5. 'ifiez' → logprob: -9.12675666809082
    6. 'er' → logprob: -10.00175666809082
    7. 'ifié' → logprob: -10.62675666809082
    8. 'ifi' → logprob: -10.87675666809082
    9. 'é' → logprob: -11.12675666809082
    10. 'rif' → logprob: -11.37675666809082

Token 38: ' si' (ID: 1784)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.7894810438156128
    2. ' si' → logprob: -0.9144810438156128
    3. ' ' → logprob: -2.1644811630249023
    4. ' que' → logprob: -4.539481163024902
    5. 's' → logprob: -5.289481163024902
    6. 'si' → logprob: -5.664481163024902
    7. '  ' → logprob: -5.914481163024902
    8. ' (' → logprob: -6.039481163024902
    9. ' ' → logprob: -7.039481163024902
    10. '   ' → logprob: -7.039481163024902

Token 39: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.054893676191568375
    2. 'n' → logprob: -2.929893732070923
    3. ' ' → logprob: -12.179893493652344
    4. ' ' → logprob: -13.179893493652344
    5. ' (' → logprob: -13.804893493652344
    6. '(n' → logprob: -13.804893493652344
    7. ' isinstance' → logprob: -13.929893493652344
    8. '0' → logprob: -15.304893493652344
    9. '	n' → logprob: -15.304893493652344
    10. ' not' → logprob: -15.804893493652344

Token 40: ' est' (ID: 893)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.9660302996635437
    2. ' >' → logprob: -0.9660302996635437
    3. ' <=' → logprob: -2.2160303592681885
    4. ' >=' → logprob: -2.3410303592681885
    5. ' ' → logprob: -3.7160303592681885
    6. ' est' → logprob: -5.966030120849609
    7. '>' → logprob: -6.091030120849609
    8. '<' → logprob: -6.716030120849609
    9. '<=' → logprob: -7.341030120849609
    10. '>=' → logprob: -7.466030120849609

Token 41: ' plus' (ID: 2932)
  Prédit: ' positif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' positif' → logprob: -0.031221892684698105
    2. ' supérieur' → logprob: -4.531221866607666
    3. ' positive' → logprob: -5.156221866607666
    4. ' nég' → logprob: -5.281221866607666
    5. 'strict' → logprob: -5.906221866607666
    6. ' strict' → logprob: -6.531221866607666
    7. ' negatif' → logprob: -7.031221866607666
    8. 'posit' → logprob: -7.156221866607666
    9. ' inférieur' → logprob: -7.281221866607666
    10. ' un' → logprob: -7.531221866607666

Token 42: ' petit' (ID: 20577)
  Prédit: ' grand'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' grand' → logprob: -0.44195955991744995
    2. 'grand' → logprob: -1.0669596195220947
    3. ' petit' → logprob: -5.191959381103516
    4. ' ou' → logprob: -6.566959381103516
    5. '_' → logprob: -6.941959381103516
    6. ' ' → logprob: -7.191959381103516
    7. 'égal' → logprob: -7.441959381103516
    8. ' strict' → logprob: -7.691959381103516
    9. 'ou' → logprob: -7.691959381103516
    10. 'strict' → logprob: -7.691959381103516

Token 43: ' que' (ID: 661)
  Prédit: ' que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.49592581391334534
    2. ' ou' → logprob: -2.1209259033203125
    3. '=' → logprob: -2.2459259033203125
    4. ' ' → logprob: -2.4959259033203125
    5. 'e' → logprob: -3.8709259033203125
    6. '  ' → logprob: -3.9959259033203125
    7. '   ' → logprob: -4.7459259033203125
    8. ' than' → logprob: -5.1209259033203125
    9. ' =' → logprob: -5.3709259033203125
    10. 'que' → logprob: -5.3709259033203125

Token 44: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.32569190859794617
    2. '1' → logprob: -1.9506919384002686
    3. '0' → logprob: -2.2006919384002686
    4. '=' → logprob: -3.9506919384002686
    5. '2' → logprob: -5.2006916999816895
    6. ' =' → logprob: -9.825692176818848
    7. '```' → logprob: -10.075692176818848
    8. '  ' → logprob: -10.575692176818848
    9. 'ou' → logprob: -10.700692176818848
    10. '3' → logprob: -11.013192176818848

Token 45: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.8523302674293518
    2. '2' → logprob: -0.9773302674293518
    3. '0' → logprob: -1.977330207824707
    4. ' ' → logprob: -3.102330207824707
    5. '=' → logprob: -4.352330207824707
    6. 'ou' → logprob: -8.227330207824707
    7. '3' → logprob: -8.352330207824707
    8. ' =' → logprob: -8.977330207824707
    9. '```' → logprob: -9.477330207824707
    10. ' or' → logprob: -10.602330207824707

Token 46: '
' (ID: 198)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2818770408630371
    2. '   ' → logprob: -1.781877040863037
    3. ' :' → logprob: -3.281877040863037
    4. ' ' → logprob: -4.406877040863037
    5. '    ' → logprob: -4.906877040863037
    6. '<|end|>' → logprob: -5.531877040863037
    7. 'n' → logprob: -5.781877040863037
    8. '  ' → logprob: -5.781877040863037
    9. '\n' → logprob: -6.531877040863037
    10. '       ' → logprob: -6.656877040863037

Token 47: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.16898126900196075
    2. '   ' → logprob: -2.4189813137054443
    3. ' :' → logprob: -3.0439813137054443
    4. '    ' → logprob: -5.293981075286865
    5. ' ' → logprob: -5.543981075286865
    6. 'n' → logprob: -6.043981075286865
    7. ' or' → logprob: -6.543981075286865
    8. '  ' → logprob: -6.793981075286865
    9. ',' → logprob: -6.918981075286865
    10. '       ' → logprob: -6.918981075286865

Token 48: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09821433573961258
    2. 'n' → logprob: -3.0982143878936768
    3. '  ' → logprob: -4.473214149475098
    4. '    ' → logprob: -4.598214149475098
    5. ' ' → logprob: -4.973214149475098
    6. ' n' → logprob: -5.223214149475098
    7. ':' → logprob: -5.348214149475098
    8. '       ' → logprob: -6.223214149475098
    9. 'if' (adapté à ' if') → logprob: -6.348214149475098
    10. ' :' → logprob: -6.723214149475098

Token 49: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.0007102862582542002
    2. 'n' → logprob: -7.250710487365723
    3. ' ' → logprob: -16.000709533691406
    4. '	n' → logprob: -16.000709533691406
    5. ' ' → logprob: -16.250709533691406
    6. '<|end|>' → logprob: -19.000709533691406
    7. '(n' → logprob: -19.250709533691406
    8. ' ‌' → logprob: -20.000709533691406
    9. ' (' → logprob: -20.250709533691406
    10. ' н' → logprob: -20.250709533691406

Token 50: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.0072490377351641655
    2. '<' → logprob: -5.007248878479004
    3. ' <=' → logprob: -7.632248878479004
    4. ' ' → logprob: -10.132248878479004
    5. '<=' → logprob: -12.507248878479004
    6. ' >=' → logprob: -13.382248878479004
    7. ' >' → logprob: -13.632248878479004
    8. '   ' → logprob: -14.757248878479004
    9. '1' → logprob: -15.132248878479004
    10. ' <",' → logprob: -15.132248878479004

Token 51: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.47410744428634644
    2. '1' → logprob: -0.9741074442863464
    3. '2' → logprob: -10.97410774230957
    4. ' ' → logprob: -11.97410774230957
    5. '=' → logprob: -12.47410774230957
    6. '0' → logprob: -13.22410774230957
    7. '```' → logprob: -14.59910774230957
    8. ' =' → logprob: -15.91160774230957
    9. '  ' → logprob: -16.34910774230957
    10. '<|end|>' → logprob: -16.59910774230957

Token 52: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00043734462815336883
    2. ' ' → logprob: -7.750437259674072
    3. '2' → logprob: -12.50043773651123
    4. '0' → logprob: -13.75043773651123
    5. '=' → logprob: -13.87543773651123
    6. '   ' → logprob: -14.75043773651123
    7. '```' → logprob: -15.12543773651123
    8. '  ' → logprob: -15.62543773651123
    9. ':' → logprob: -17.375436782836914
    10. '-' → logprob: -18.187936782836914

Token 53: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0006627569673582911
    2. ' :' → logprob: -7.875662803649902
    3. ':
' → logprob: -8.250662803649902
    4. ':return' → logprob: -11.750662803649902
    5. '   ' → logprob: -12.375662803649902
    6. '       ' → logprob: -12.625662803649902
    7. '):' → logprob: -12.875662803649902
    8. ' :
' → logprob: -13.125662803649902
    9. ':**' → logprob: -15.250662803649902
    10. '():' → logprob: -15.750662803649902

Token 54: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.007102859206497669
    2. ' raise' → logprob: -5.632102966308594
    3. ' return' → logprob: -6.632102966308594
    4. '    ' → logprob: -7.632102966308594
    5. 'raise' → logprob: -7.757102966308594
    6. '   ' → logprob: -8.132102966308594
    7. '        ' → logprob: -8.257102966308594
    8. ' ' → logprob: -8.632102966308594
    9. ' 
' → logprob: -9.132102966308594
    10. '        
' → logprob: -9.257102966308594

Token 55: ' raise' (ID: 9338)
  Prédit: ' raise'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' raise' → logprob: -0.07356750965118408
    2. '    ' → logprob: -3.5735673904418945
    3. 'raise' (adapté à ' raise') → logprob: -3.6985673904418945
    4. ' return' → logprob: -4.1985673904418945
    5. ' ' → logprob: -6.6985673904418945
    6. '   ' → logprob: -6.9485673904418945
    7. '	raise' → logprob: -7.9485673904418945
    8. 'return' → logprob: -8.198567390441895
    9. '       ' → logprob: -9.448567390441895
    10. '        ' → logprob: -9.948567390441895

Token 56: ' Value' (ID: 9963)
  Prédit: ' Value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Value' → logprob: -0.0046349456533789635
    2. 'Value' → logprob: -5.379634857177734
    3. '	Value' → logprob: -11.879634857177734
    4. ' Val' → logprob: -12.504634857177734
    5. '_value' → logprob: -13.629634857177734
    6. ' ' → logprob: -13.629634857177734
    7. ' value' → logprob: -14.754634857177734
    8. '_Value' → logprob: -15.254634857177734
    9. '<Value' → logprob: -15.629634857177734
    10. '-value' → logprob: -16.004634857177734

Token 57: 'Error' (ID: 2255)
  Prédit: 'Error'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Error' → logprob: -0.020884603261947632
    2. 'rror' → logprob: -3.8958845138549805
    3. 'ror' → logprob: -8.27088451385498
    4. 'alue' → logprob: -9.64588451385498
    5. '   ' → logprob: -11.27088451385498
    6. 'error' → logprob: -12.02088451385498
    7. 'Value' → logprob: -13.27088451385498
    8. 'SError' → logprob: -14.77088451385498
    9. 'or' → logprob: -15.14588451385498
    10. '	Error' → logprob: -16.020885467529297

Token 58: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.011050770990550518
    2. '(' → logprob: -4.511050701141357
    3. '('' → logprob: -13.136051177978516
    4. '(
' → logprob: -15.386051177978516
    5. '(Value' → logprob: -15.761051177978516
    6. '("'' → logprob: -15.886051177978516
    7. ' ("' → logprob: -16.136051177978516
    8. '("")' → logprob: -17.136051177978516
    9. 'Value' → logprob: -17.261051177978516
    10. '("("' → logprob: -17.386051177978516

Token 59: 'Le' (ID: 2486)
  Prédit: 'Le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Le' → logprob: -0.21466438472270966
    2. ' Le' → logprob: -1.839664340019226
    3. 'n' → logprob: -4.089664459228516
    4. ' n' → logprob: -4.464664459228516
    5. 'L' → logprob: -5.714664459228516
    6. 'La' → logprob: -6.464664459228516
    7. ' L' → logprob: -7.339664459228516
    8. ' La' → logprob: -8.339664459228516
    9. ' le' → logprob: -8.589664459228516
    10. '"' → logprob: -9.839664459228516

Token 60: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.17083147168159485
    2. 'nombre' → logprob: -1.9208314418792725
    3. 'n' → logprob: -5.295831680297852
    4. ' ' → logprob: -5.670831680297852
    5. ' n' → logprob: -6.920831680297852
    6. ' nombres' → logprob: -8.295831680297852
    7. ' entier' → logprob: -8.545831680297852
    8. '   ' → logprob: -9.295831680297852
    9. ' numéro' → logprob: -9.420831680297852
    10. ' param' → logprob: -9.545831680297852

Token 61: ' doit' (ID: 21822)
  Prédit: ' doit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' doit' → logprob: -0.02209324948489666
    2. ' ' → logprob: -3.8970932960510254
    3. ' must' → logprob: -7.647093296051025
    4. ' est' → logprob: -7.897093296051025
    5. ' )' → logprob: -8.272092819213867
    6. ' >' → logprob: -9.272092819213867
    7. '>' → logprob: -10.272092819213867
    8. ' ' → logprob: -10.272092819213867
    9. ' }' → logprob: -10.647092819213867
    10. ' doivent' → logprob: -10.647092819213867

Token 62: ' être' (ID: 9104)
  Prédit: ' être'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' être' → logprob: -0.0156475268304348
    2. ' etre' → logprob: -4.7656474113464355
    3. 'être' → logprob: -5.5156474113464355
    4. ' be' → logprob: -6.8906474113464355
    5. ' ' → logprob: -7.2656474113464355
    6. '<|end|>' → logprob: -7.3906474113464355
    7. '’être' → logprob: -9.015647888183594
    8. ' ' → logprob: -9.140647888183594
    9. ''être' → logprob: -9.390647888183594
    10. ')' → logprob: -9.765647888183594

Token 63: ' supérieur' (ID: 98491)
  Prédit: ' supérieur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' supérieur' → logprob: -0.4923115670681
    2. ' plus' → logprob: -1.9923115968704224
    3. ' un' → logprob: -2.492311477661133
    4. ' au' → logprob: -2.867311477661133
    5. ' positif' → logprob: -3.242311477661133
    6. ' strict' → logprob: -3.492311477661133
    7. 'sup' → logprob: -4.367311477661133
    8. 'strict' → logprob: -4.617311477661133
    9. ' >=' → logprob: -5.492311477661133
    10. ' sup' → logprob: -5.492311477661133

Token 64: ' ou' (ID: 2031)
  Prédit: ' ou'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ou' → logprob: -0.2653832733631134
    2. 'ou' → logprob: -1.515383243560791
    3. ' à' → logprob: -5.265383243560791
    4. 'à' → logprob: -5.390383243560791
    5. '=' → logprob: -6.390383243560791
    6. ' ' → logprob: -7.015383243560791
    7. '```' → logprob: -8.01538372039795
    8. ' ' → logprob: -9.39038372039795
    9. '1' → logprob: -9.89038372039795
    10. '_' → logprob: -10.07788372039795

Token 65: ' égal' (ID: 15059)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.9568869471549988
    2. 'égal' → logprob: -1.2068870067596436
    3. ' égal' → logprob: -1.2068870067596436
    4. ' ég' → logprob: -4.4568867683410645
    5. ' ou' → logprob: -5.4568867683410645
    6. 'é' → logprob: -7.5818867683410645
    7. 'à' → logprob: -7.9568867683410645
    8. 'ou' → logprob: -8.456887245178223
    9. 'ég' → logprob: -8.456887245178223
    10. ' à' → logprob: -8.831887245178223

Token 66: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.04316931962966919
    2. ' ' → logprob: -3.9181692600250244
    3. 'à' → logprob: -3.9181692600250244
    4. ' a' → logprob: -7.1681694984436035
    5. '1' → logprob: -7.5431694984436035
    6. 'a' → logprob: -8.043169021606445
    7. '   ' → logprob: -8.168169021606445
    8. ' ' → logprob: -8.543169021606445
    9. '```' → logprob: -9.043169021606445
    10. ''à' → logprob: -9.168169021606445

Token 67: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4288591742515564
    2. '1' → logprob: -1.0538592338562012
    3. ' ' → logprob: -8.803858757019043
    4. '  ' → logprob: -13.053858757019043
    5. '```' → logprob: -13.178858757019043
    6. '   ' → logprob: -13.553858757019043
    7. ' ' → logprob: -14.928858757019043
    8. '2' → logprob: -15.178858757019043
    9. '0' → logprob: -15.678858757019043
    10. '

' → logprob: -15.928858757019043

Token 68: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.88418151892256e-05
    2. ' ' → logprob: -9.750059127807617
    3. '```' → logprob: -15.500059127807617
    4. '   ' → logprob: -15.750059127807617
    5. ' ' → logprob: -16.500059127807617
    6. '  ' → logprob: -17.000059127807617
    7. '2' → logprob: -17.250059127807617
    8. 'à' → logprob: -17.375059127807617
    9. '0' → logprob: -17.500059127807617
    10. '

' → logprob: -18.375059127807617

Token 69: '.")
' (ID: 27834)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.1970759779214859
    2. '.")' → logprob: -2.0720760822296143
    3. ')")' → logprob: -3.4470760822296143
    4. '")
' → logprob: -5.072075843811035
    5. '.")
' → logprob: -5.322075843811035
    6. ')' → logprob: -5.322075843811035
    7. ')")
' → logprob: -5.447075843811035
    8. '")
' → logprob: -8.822075843811035
    9. '   ' → logprob: -8.822075843811035
    10. '.")
' → logprob: -9.072075843811035

Token 70: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4377952516078949
    2. ':' → logprob: -1.0627952814102173
    3. ':
' → logprob: -5.937795162200928
    4. ' :' → logprob: -6.687795162200928
    5. '    
' → logprob: -7.062795162200928
    6. '
' → logprob: -7.562795162200928
    7. ' 
' → logprob: -7.562795162200928
    8. ')' → logprob: -7.687795162200928
    9. '```' → logprob: -7.687795162200928
    10. ' ' → logprob: -8.187795639038086

Token 71: ' #' (ID: 1069)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.6611852049827576
    2. '   ' → logprob: -1.0361852645874023
    3. ' 
' → logprob: -3.2861852645874023
    4. ')' → logprob: -4.411185264587402
    5. ':
' → logprob: -4.411185264587402
    6. ' ' → logprob: -4.411185264587402
    7. '\' → logprob: -4.661185264587402
    8. ' :' → logprob: -4.911185264587402
    9. '
' → logprob: -5.286185264587402
    10. '```' → logprob: -5.286185264587402

Token 72: ' ' (ID: 220)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -1.1648719310760498
    2. ' if' → logprob: -1.6648719310760498
    3. ' result' → logprob: -2.16487193107605
    4. 'if' → logprob: -2.78987193107605
    5. 'return' → logprob: -2.78987193107605
    6. 's' → logprob: -3.28987193107605
    7. ' return' → logprob: -3.28987193107605
    8. ' for' → logprob: -3.41487193107605
    9. 'for' → logprob: -3.66487193107605
    10. 'def' → logprob: -3.91487193107605

Token 73: '1' (ID: 16)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.8747051358222961
    2. 'result' → logprob: -1.3747050762176514
    3. 'return' → logprob: -2.4997050762176514
    4. 'p' → logprob: -2.9997050762176514
    5. 'r' → logprob: -3.1247050762176514
    6. 's' → logprob: -3.3747050762176514
    7. 'res' → logprob: -3.8747050762176514
    8. '#' → logprob: -3.8747050762176514
    9. 'def' → logprob: -4.1247053146362305
    10. 'i' → logprob: -4.3747053146362305

Token 74: ' n' (ID: 297)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -1.725752592086792
    2. ' :' → logprob: -1.725752592086792
    3. ' ==' → logprob: -1.975752592086792
    4. ' ' → logprob: -2.225752592086792
    5. ' =' → logprob: -2.600752592086792
    6. ')' → logprob: -2.725752592086792
    7. '=' → logprob: -2.975752592086792
    8. ' if' → logprob: -3.475752592086792
    9. 'def' → logprob: -3.725752592086792
    10. '   ' → logprob: -4.225752830505371

Token 75: ''est' (ID: 6616)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.32974007725715637
    2. '==' → logprob: -1.454740047454834
    3. '=' → logprob: -3.454740047454834
    4. ' in' → logprob: -6.079740047454834
    5. '>' → logprob: -6.204740047454834
    6. ' =' → logprob: -6.329740047454834
    7. ' ' → logprob: -6.579740047454834
    8. ':' → logprob: -7.204740047454834
    9. '**' → logprob: -7.329740047454834
    10. 'ot' → logprob: -7.454740047454834

Token 76: ' pas' (ID: 2173)
  Prédit: ' pas'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pas' → logprob: -0.11336494982242584
    2. 'pas' → logprob: -2.2383649349212646
    3. '_pas' → logprob: -8.613365173339844
    4. ' plus' → logprob: -8.988365173339844
    5. 'est' → logprob: -9.613365173339844
    6. 'plus' → logprob: -10.613365173339844
    7. ' not' → logprob: -10.988365173339844
    8. ' jamais' → logprob: -11.113365173339844
    9. 'Pas' → logprob: -11.488365173339844
    10. ' est' → logprob: -11.863365173339844

Token 77: ' un' (ID: 537)
  Prédit: 'prem'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prem' → logprob: -0.15103915333747864
    2. ' premier' → logprob: -2.6510391235351562
    3. ' un' → logprob: -3.5260391235351562
    4. 'un' → logprob: -3.6510391235351562
    5. 'pas' → logprob: -5.401039123535156
    6. ' considéré' → logprob: -6.401039123535156
    7. 'prime' → logprob: -6.651039123535156
    8. ' pas' → logprob: -6.901039123535156
    9. 'pair' → logprob: -7.401039123535156
    10. ' pair' → logprob: -7.526039123535156

Token 78: ' nombre' (ID: 9733)
  Prédit: 'nombre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'nombre' → logprob: -0.459121972322464
    2. ' nombre' → logprob: -1.3341219425201416
    3. 'e' → logprob: -2.7091219425201416
    4. 'prem' → logprob: -4.584122180938721
    5. ' ' → logprob: -5.209122180938721
    6. 'ent' → logprob: -5.334122180938721
    7. ' entier' → logprob: -5.959122180938721
    8. 'n' → logprob: -5.959122180938721
    9. 'p' → logprob: -6.584122180938721
    10. 'é' → logprob: -6.584122180938721

Token 79: ' premier' (ID: 15506)
  Prédit: 'prem'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prem' → logprob: -0.12511122226715088
    2. ' premier' → logprob: -2.3751111030578613
    3. '   ' → logprob: -3.7501111030578613
    4. ' premiers' → logprob: -8.37511157989502
    5. '  ' → logprob: -9.00011157989502
    6. ' ' → logprob: -9.00011157989502
    7. ' premi' → logprob: -9.50011157989502
    8. 'Premier' → logprob: -9.62511157989502
    9. '-prem' → logprob: -9.62511157989502
    10. 'p' → logprob: -10.12511157989502

Token 80: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16881856322288513
    2. ' 
' → logprob: -3.543818473815918
    3. ' ' → logprob: -3.668818473815918
    4. ',' → logprob: -4.293818473815918
    5. ':' → logprob: -4.293818473815918
    6. '    
' → logprob: -4.418818473815918
    7. '   
' → logprob: -4.418818473815918
    8. ' if' → logprob: -4.918818473815918
    9. '  ' → logprob: -4.918818473815918
    10. '    ' → logprob: -5.168818473815918

Token 81: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014795857481658459
    2. ' if' → logprob: -5.514795780181885
    3. 'if' → logprob: -5.514795780181885
    4. ' return' → logprob: -6.764795780181885
    5. ' ' → logprob: -7.014795780181885
    6. '  ' → logprob: -7.264795780181885
    7. '    
' → logprob: -7.389795780181885
    8. ' 
' → logprob: -7.389795780181885
    9. ':' → logprob: -8.139796257019043
    10. '    ' → logprob: -8.264796257019043

Token 82: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.5727982521057129
    2. '   ' → logprob: -0.9477982521057129
    3. 'if' (adapté à ' if') → logprob: -3.197798252105713
    4. ' return' → logprob: -5.072798252105713
    5. ' ' → logprob: -7.447798252105713
    6. 'return' → logprob: -8.447797775268555
    7. '  ' → logprob: -8.822797775268555
    8. ' elif' → logprob: -9.072797775268555
    9. ' i' → logprob: -9.572797775268555
    10. '```' → logprob: -9.947797775268555

Token 83: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.001633762731216848
    2. 'n' → logprob: -6.876633644104004
    3. ' ' → logprob: -8.126633644104004
    4. ' ' → logprob: -8.376633644104004
    5. '1' → logprob: -10.126633644104004
    6. '<|end|>' → logprob: -10.626633644104004
    7. '	n' → logprob: -12.376633644104004
    8. '2' → logprob: -13.001633644104004
    9. ' ‌' → logprob: -14.501633644104004
    10. ' ' → logprob: -14.626633644104004

Token 84: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.06270589679479599
    2. '==' → logprob: -2.9377059936523438
    3. ' <=' → logprob: -4.937705993652344
    4. ' <' → logprob: -8.062705993652344
    5. '<=' → logprob: -8.312705993652344
    6. ' ' → logprob: -10.312705993652344
    7. '=' → logprob: -12.062705993652344
    8. '<' → logprob: -12.062705993652344
    9. ' =' → logprob: -12.687705993652344
    10. ' in' → logprob: -12.812705993652344

Token 85: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0789107233285904
    2. '1' → logprob: -2.5789108276367188
    3. '<|end|>' → logprob: -11.328910827636719
    4. ' ' → logprob: -12.203910827636719
    5. '2' → logprob: -13.203910827636719
    6. '  ' → logprob: -13.953910827636719
    7. '=' → logprob: -15.328910827636719
    8. '0' → logprob: -15.766410827636719
    9. ' 
' → logprob: -15.828910827636719
    10. '   ' → logprob: -16.01641082763672

Token 86: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.001935065840370953
    2. ' ' → logprob: -6.251935005187988
    3. '0' → logprob: -12.626935005187988
    4. '2' → logprob: -13.626935005187988
    5. '  ' → logprob: -14.376935005187988
    6. '<|end|>' → logprob: -14.751935005187988
    7. '```' → logprob: -15.564435005187988
    8. '   ' → logprob: -15.876935005187988
    9. ' ' → logprob: -16.314435958862305
    10. '<' → logprob: -16.314435958862305

Token 87: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.012599836103618145
    2. ' :' → logprob: -4.387599945068359
    3. ':return' → logprob: -9.76259994506836
    4. ':
' → logprob: -10.88759994506836
    5. ' :
' → logprob: -11.38759994506836
    6. ',' → logprob: -14.38759994506836
    7. '):' → logprob: -14.76259994506836
    8. ')' → logprob: -15.26259994506836
    9. ' ' → logprob: -15.63759994506836
    10. ''s' → logprob: -15.63759994506836

Token 88: '       ' (ID: 309)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.443979948759079
    2. '   ' → logprob: -1.9439799785614014
    3. ' :' → logprob: -2.1939799785614014
    4. ' ' → logprob: -2.8189799785614014
    5. ':return' → logprob: -3.9439799785614014
    6. ' return' → logprob: -4.693979740142822
    7. ' :
' → logprob: -4.818979740142822
    8. '    ' → logprob: -6.068979740142822
    9. ':
' → logprob: -6.693979740142822
    10. '  ' → logprob: -7.318979740142822

Token 89: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.08315736055374146
    2. ' ' → logprob: -3.2081573009490967
    3. ' False' → logprob: -4.208157539367676
    4. 'return' (adapté à ' return') → logprob: -4.833157539367676
    5. 'r' → logprob: -5.083157539367676
    6. ' 
' → logprob: -5.458157539367676
    7. ' r' → logprob: -5.708157539367676
    8. '   ' → logprob: -7.208157539367676
    9. ' ' → logprob: -8.208157539367676
    10. ' false' → logprob: -8.208157539367676

Token 90: ' -' (ID: 533)
  Prédit: ' False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' False' → logprob: -0.05335184559226036
    2. 'False' → logprob: -3.053351879119873
    3. ' ' → logprob: -5.803351879119873
    4. ' F' → logprob: -7.178351879119873
    5. 'F' → logprob: -7.303351879119873
    6. ' None' → logprob: -8.678351402282715
    7. ' True' → logprob: -9.428351402282715
    8. ' ' → logprob: -11.428351402282715
    9. ' Fa' → logprob: -11.553351402282715
    10. '0' → logprob: -12.178351402282715

Token 91: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -4.906711546937004e-05
    2. ' ' → logprob: -10.000048637390137
    3. '2' → logprob: -12.875048637390137
    4. '0' → logprob: -14.750048637390137
    5. '１' → logprob: -15.937548637390137
    6. '-' → logprob: -16.250049591064453
    7. '۱' → logprob: -16.375049591064453
    8. '=' → logprob: -16.875049591064453
    9. '9' → logprob: -17.062549591064453
    10. '१' → logprob: -17.437549591064453

Token 92: '
' (ID: 198)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2893531024456024
    2. ' 
' → logprob: -1.7893531322479248
    3. ':' → logprob: -3.289353132247925
    4. '
' → logprob: -4.789352893829346
    5. ' :' → logprob: -5.414352893829346
    6. '   ' → logprob: -5.414352893829346
    7. '0' → logprob: -5.414352893829346
    8. '  
' → logprob: -5.539352893829346
    9. '<|end|>' → logprob: -6.164352893829346
    10. 'e' → logprob: -6.414352893829346

Token 93: '   ' (ID: 271)
  Prédit: ' 
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' 
' → logprob: -0.5895084142684937
    2. ' ' → logprob: -1.8395084142684937
    3. '   ' → logprob: -1.8395084142684937
    4. '    
' → logprob: -3.714508533477783
    5. '  
' → logprob: -3.839508533477783
    6. '
' → logprob: -4.339508533477783
    7. ':' → logprob: -4.464508533477783
    8. '   
' → logprob: -4.589508533477783
    9. '\' → logprob: -5.089508533477783
    10. '0' → logprob: -5.339508533477783

Token 94: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.038059949874878
    2. ' ' → logprob: -1.413059949874878
    3. ' 
' → logprob: -2.163059949874878
    4. '#' (adapté à ' #') → logprob: -3.038059949874878
    5. ' for' → logprob: -3.413059949874878
    6. '    
' → logprob: -3.538059949874878
    7. '   
' → logprob: -3.538059949874878
    8. ':' → logprob: -3.913059949874878
    9. 'e' → logprob: -4.038060188293457
    10. '\' → logprob: -4.288060188293457

Token 95: ' ' (ID: 220)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.386924147605896
    2. 'for' → logprob: -1.761924147605896
    3. ' ' → logprob: -3.5119242668151855
    4. '2' → logprob: -4.0119242668151855
    5. ' f' → logprob: -4.0119242668151855
    6. 'f' → logprob: -4.2619242668151855
    7. 'i' → logprob: -4.3869242668151855
    8. ' i' → logprob: -4.5119242668151855
    9. ' #' → logprob: -4.7619242668151855
    10. '#' → logprob: -4.8869242668151855

Token 96: '2' (ID: 17)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.033950187265872955
    2. 'if' → logprob: -3.908950090408325
    3. 'import' → logprob: -5.158950328826904
    4. ' for' → logprob: -5.158950328826904
    5. 'from' → logprob: -7.408950328826904
    6. 'i' → logprob: -7.783950328826904
    7. 'def' → logprob: -8.158949851989746
    8. '2' → logprob: -8.783949851989746
    9. 'elif' → logprob: -9.033949851989746
    10. ' if' → logprob: -9.908949851989746

Token 97: ' est' (ID: 893)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.7129473090171814
    2. ' ' → logprob: -1.4629473686218262
    3. ' :' → logprob: -1.5879473686218262
    4. ' ==' → logprob: -3.587947368621826
    5. ' is' → logprob: -4.962947368621826
    6. '   ' → logprob: -5.087947368621826
    7. '  ' → logprob: -5.212947368621826
    8. ':return' → logprob: -5.337947368621826
    9. '<|end|>' → logprob: -5.462947368621826
    10. ' return' → logprob: -6.087947368621826

Token 98: ' le' (ID: 505)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.05140548571944237
    2. ' le' → logprob: -3.301405429840088
    3. ' la' → logprob: -5.301405429840088
    4. ' the' → logprob: -6.551405429840088
    5. ' un' → logprob: -6.676405429840088
    6. ' )' → logprob: -6.676405429840088
    7. '<|end|>' → logprob: -6.801405429840088
    8. ' l' → logprob: -7.051405429840088
    9. '  ' → logprob: -7.426405429840088
    10. '2' → logprob: -8.301405906677246

Token 99: ' seul' (ID: 33041)
  Prédit: 'se'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'se' → logprob: -0.7999200820922852
    2. ' seul' → logprob: -1.9249200820922852
    3. ' plus' → logprob: -1.9249200820922852
    4. 'prem' → logprob: -1.9249200820922852
    5. 'plus' → logprob: -2.424920082092285
    6. ' premier' → logprob: -4.049920082092285
    7. ' ' → logprob: -5.799920082092285
    8. '2' → logprob: -6.424920082092285
    9. '1' → logprob: -6.799920082092285
    10. ' only' → logprob: -8.549920082092285

Token 100: ' nombre' (ID: 9733)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.651962161064148
    2. ' premier' → logprob: -1.401962161064148
    3. ' nombre' → logprob: -1.901962161064148
    4. 'prem' → logprob: -3.9019622802734375
    5. ' prime' → logprob: -4.0269622802734375
    6. '  ' → logprob: -4.6519622802734375
    7. ' )' → logprob: -4.9019622802734375
    8. 'prime' → logprob: -5.2769622802734375
    9. 'nombre' → logprob: -5.2769622802734375
    10. '2' → logprob: -5.5269622802734375

Token 101: ' premier' (ID: 15506)
  Prédit: 'prem'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prem' → logprob: -0.06653467565774918
    2. ' premier' → logprob: -2.8165347576141357
    3. ' ' → logprob: -6.191534519195557
    4. '2' → logprob: -6.691534519195557
    5. '  ' → logprob: -7.816534519195557
    6. ' )' → logprob: -8.441534996032715
    7. '   ' → logprob: -8.441534996032715
    8. '1' → logprob: -9.316534996032715
    9. ' premiers' → logprob: -9.566534996032715
    10. '    ' → logprob: -9.691534996032715

Token 102: ' pair' (ID: 10610)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.6413841247558594
    2. ' premier' → logprob: -1.6413841247558594
    3. ',' → logprob: -2.6413841247558594
    4. '   ' → logprob: -2.7663841247558594
    5. ' :' → logprob: -3.3913841247558594
    6. ' ' → logprob: -3.6413841247558594
    7. 'prem' → logprob: -4.516384124755859
    8. '  ' → logprob: -4.641384124755859
    9. '.' → logprob: -5.141384124755859
    10. ' pour' → logprob: -5.141384124755859

Token 103: '
' (ID: 198)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5098907947540283
    2. '   ' → logprob: -1.0098907947540283
    3. '\n' → logprob: -4.134890556335449
    4. ',' → logprob: -5.634890556335449
    5. '\' → logprob: -5.759890556335449
    6. ':
' → logprob: -6.259890556335449
    7. '
' → logprob: -6.384890556335449
    8. '.' → logprob: -6.509890556335449
    9. ')' → logprob: -6.634890556335449
    10. ' ' → logprob: -6.634890556335449

Token 104: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.331798255443573
    2. ':' → logprob: -1.3317983150482178
    3. ' ' → logprob: -4.456798076629639
    4. ' :' → logprob: -5.956798076629639
    5. '    ' → logprob: -7.456798076629639
    6. ' return' → logprob: -7.581798076629639
    7. '  ' → logprob: -7.706798076629639
    8. ')' → logprob: -7.956798076629639
    9. '\' → logprob: -8.081798553466797
    10. ',' → logprob: -8.456798553466797

Token 105: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.7482475638389587
    2. ' if' → logprob: -0.8732475638389587
    3. '   ' → logprob: -2.4982476234436035
    4. ' ' → logprob: -4.1232476234436035
    5. ' elif' → logprob: -5.3732476234436035
    6. ' i' → logprob: -5.4982476234436035
    7. '    ' → logprob: -7.3732476234436035
    8. '  ' → logprob: -7.6232476234436035
    9. 'elif' → logprob: -7.7482476234436035
    10. 'i' → logprob: -8.873247146606445

Token 106: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.0028653775807470083
    2. 'n' → logprob: -5.877865314483643
    3. ' ' → logprob: -9.8778657913208
    4. ' ' → logprob: -11.8778657913208
    5. '	n' → logprob: -13.7528657913208
    6. '2' → logprob: -14.0028657913208
    7. ' (' → logprob: -15.8778657913208
    8. '(n' → logprob: -16.002864837646484
    9. '```' → logprob: -17.065364837646484
    10. '  ' → logprob: -17.440364837646484

Token 107: ' %' (ID: 1851)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.007144767791032791
    2. '==' → logprob: -5.132144927978516
    3. ' ' → logprob: -6.757144927978516
    4. ' %' → logprob: -11.132144927978516
    5. ' !=' → logprob: -11.132144927978516
    6. ' <' → logprob: -11.882144927978516
    7. ' >' → logprob: -12.007144927978516
    8. ' <=' → logprob: -13.007144927978516
    9. '%' → logprob: -13.132144927978516
    10. '2' → logprob: -13.257144927978516

Token 108: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.17975468933582306
    2. '2' → logprob: -1.8047547340393066
    3. '<|end|>' → logprob: -12.304754257202148
    4. '  ' → logprob: -13.054754257202148
    5. ' ' → logprob: -13.679754257202148
    6. '```' → logprob: -14.179754257202148
    7. ')' → logprob: -15.617254257202148
    8. ' ```' → logprob: -15.679754257202148
    9. '   ' → logprob: -15.992254257202148
    10. '<|end|>' → logprob: -16.05475425720215

Token 109: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.00038086410495452583
    2. ' ' → logprob: -7.875380992889404
    3. '  ' → logprob: -15.375380516052246
    4. '   ' → logprob: -15.750380516052246
    5. '```' → logprob: -15.750380516052246
    6. '۲' → logprob: -17.062881469726562
    7. '1' → logprob: -18.000381469726562
    8. '	' → logprob: -18.187881469726562
    9. '{' → logprob: -18.312881469726562
    10. '    ' → logprob: -18.312881469726562

Token 110: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.07113032788038254
    2. '==' → logprob: -3.3211302757263184
    3. ' !=' → logprob: -3.4461302757263184
    4. '!=' → logprob: -7.696130275726318
    5. ' ' → logprob: -8.946130752563477
    6. '=' → logprob: -10.071130752563477
    7. ' ' → logprob: -11.196130752563477
    8. ')' → logprob: -11.446130752563477
    9. ' =' → logprob: -11.446130752563477
    10. '0' → logprob: -11.946130752563477

Token 111: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.11285297572612762
    2. '0' → logprob: -2.2378530502319336
    3. '1' → logprob: -10.612853050231934
    4. '2' → logprob: -12.862853050231934
    5. ' ==' → logprob: -13.737853050231934
    6. '  ' → logprob: -14.487853050231934
    7. ' ' → logprob: -14.675353050231934
    8. '==' → logprob: -15.237853050231934
    9. '```' → logprob: -15.862853050231934
    10. '=' → logprob: -15.987853050231934

Token 112: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.10090868175029755
    2. ' ' → logprob: -2.3509087562561035
    3. '1' → logprob: -7.8509087562561035
    4. '2' → logprob: -8.100908279418945
    5. ' ==' → logprob: -13.225908279418945
    6. '==' → logprob: -13.413408279418945
    7. '=' → logprob: -13.538408279418945
    8. '3' → logprob: -14.225908279418945
    9. '  ' → logprob: -14.475908279418945
    10. ')' → logprob: -14.913408279418945

Token 113: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.47858092188835144
    2. ':' → logprob: -1.1035809516906738
    3. ' :' → logprob: -3.228580951690674
    4. 'and' → logprob: -4.978580951690674
    5. ' ' → logprob: -6.978580951690674
    6. ':return' → logprob: -7.103580951690674
    7. '   ' → logprob: -8.228580474853516
    8. ' ==' → logprob: -10.103580474853516
    9. ':
' → logprob: -10.478580474853516
    10. '==' → logprob: -10.853580474853516

Token 114: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.0034373232629150152
    2. 'n' → logprob: -5.878437519073486
    3. ' ' → logprob: -7.378437519073486
    4. '	n' → logprob: -12.128437042236328
    5. ' ' → logprob: -13.753437042236328
    6. ' not' → logprob: -14.378437042236328
    7. '  ' → logprob: -15.753437042236328
    8. ' н' → logprob: -16.253437042236328
    9. ' (' → logprob: -16.378437042236328
    10. '   ' → logprob: -16.878437042236328

Token 115: ' !=' (ID: 1666)
  Prédit: ' !='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.0100790373980999
    2. ' ==' → logprob: -5.6350789070129395
    3. ' ' → logprob: -5.7600789070129395
    4. '!=' → logprob: -5.7600789070129395
    5. '==' → logprob: -9.135079383850098
    6. ' >' → logprob: -10.385079383850098
    7. ' !' → logprob: -12.010079383850098
    8. ' ' → logprob: -12.885079383850098
    9. '  ' → logprob: -13.760079383850098
    10. '>' → logprob: -13.760079383850098

Token 116: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.20141851902008057
    2. '2' → logprob: -1.7014185190200806
    3. '  ' → logprob: -13.32641887664795
    4. '<|end|>' → logprob: -13.32641887664795
    5. '   ' → logprob: -14.57641887664795
    6. ' ' → logprob: -14.82641887664795
    7. '1' → logprob: -14.82641887664795
    8. '    ' → logprob: -15.20141887664795
    9. '```' → logprob: -16.013917922973633
    10. '	' → logprob: -16.326417922973633

Token 117: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.007607577834278345
    2. ' ' → logprob: -4.882607460021973
    3. '  ' → logprob: -14.507607460021973
    4. '1' → logprob: -14.757607460021973
    5. '   ' → logprob: -15.132607460021973
    6. '    ' → logprob: -16.38260841369629
    7. '```' → logprob: -16.82010841369629
    8. '۲' → logprob: -17.57010841369629
    9. ' ' → logprob: -17.75760841369629
    10. '     ' → logprob: -17.88260841369629

Token 118: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0007772310636937618
    2. ':
' → logprob: -8.000777244567871
    3. ' :' → logprob: -8.000777244567871
    4. ':return' → logprob: -9.250777244567871
    5. '):' → logprob: -12.500777244567871
    6. ' :
' → logprob: -12.625777244567871
    7. '   ' → logprob: -13.125777244567871
    8. '       ' → logprob: -13.875777244567871
    9. ')' → logprob: -16.000776290893555
    10. '):
' → logprob: -16.500776290893555

Token 119: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.002748646307736635
    2. ' return' → logprob: -6.627748489379883
    3. '<|end|>' → logprob: -7.377748489379883
    4. '   ' → logprob: -8.252748489379883
    5. ':return' → logprob: -8.752748489379883
    6. ' ' → logprob: -9.127748489379883
    7. 'return' → logprob: -9.502748489379883
    8. ':' → logprob: -10.002748489379883
    9. ' 
' → logprob: -10.127748489379883
    10. '
' → logprob: -10.252748489379883

Token 120: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.3651826083660126
    2. 'return' (adapté à ' return') → logprob: -1.615182638168335
    3. '       ' → logprob: -2.240182638168335
    4. '   ' → logprob: -8.115182876586914
    5. '	return' → logprob: -8.990182876586914
    6. ' ' → logprob: -8.990182876586914
    7. ':return' → logprob: -11.365182876586914
    8. '<|end|>' → logprob: -11.365182876586914
    9. '    ' → logprob: -11.615182876586914
    10. 'eturn' → logprob: -11.740182876586914

Token 121: ' ' (ID: 220)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.5337660312652588
    2. ' False' → logprob: -1.1587660312652588
    3. '-' → logprob: -3.033766031265259
    4. '0' → logprob: -3.283766031265259
    5. ' -' → logprob: -4.65876579284668
    6. ' ' → logprob: -5.40876579284668
    7. '-F' → logprob: -9.40876579284668
    8. '-f' → logprob: -11.15876579284668
    9. 'F' → logprob: -11.15876579284668
    10. ' F' → logprob: -11.28376579284668

Token 122: '2' (ID: 17)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '-' → logprob: -0.17263613641262054
    2. '0' → logprob: -2.297636032104492
    3. 'False' → logprob: -2.922636032104492
    4. ' False' → logprob: -6.172636032104492
    5. ' -' → logprob: -6.547636032104492
    6. ' ' → logprob: -7.297636032104492
    7. '-f' → logprob: -10.422636032104492
    8. '-F' → logprob: -10.672636032104492
    9. 'false' → logprob: -12.297636032104492
    10. '1' → logprob: -12.547636032104492

Token 123: '
' (ID: 198)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.03912321478128433
    2. '   ' → logprob: -4.289123058319092
    3. ':
' → logprob: -4.664123058319092
    4. ')' → logprob: -5.289123058319092
    5. ' :' → logprob: -5.664123058319092
    6. ',' → logprob: -6.414123058319092
    7. '.' → logprob: -6.789123058319092
    8. ' :
' → logprob: -7.289123058319092
    9. ' ' → logprob: -7.664123058319092
    10. '
' → logprob: -8.16412353515625

Token 124: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.12696599960327148
    2. ')' → logprob: -3.1269659996032715
    3. ' :' → logprob: -3.7519659996032715
    4. ':
' → logprob: -4.1269659996032715
    5. '   ' → logprob: -4.3769659996032715
    6. ' :
' → logprob: -5.0019659996032715
    7. ' ' → logprob: -5.3769659996032715
    8. '.' → logprob: -5.8769659996032715
    9. '):' → logprob: -6.6269659996032715
    10. ',' → logprob: -6.6269659996032715

Token 125: ' #' (ID: 1069)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.019781440496444702
    2. ' :' → logprob: -4.644781589508057
    3. ')' → logprob: -4.894781589508057
    4. ':
' → logprob: -7.394781589508057
    5. ',' → logprob: -7.894781589508057
    6. ' ' → logprob: -8.394781112670898
    7. ' :
' → logprob: -8.519781112670898
    8. ' for' → logprob: -8.644781112670898
    9. '):' → logprob: -8.644781112670898
    10. '   ' → logprob: -8.769781112670898

Token 126: ' Vér' (ID: 159169)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.2362549751996994
    2. 'for' → logprob: -2.236254930496216
    3. ' i' → logprob: -2.736254930496216
    4. '3' → logprob: -4.236255168914795
    5. 'i' → logprob: -5.111255168914795
    6. '2' → logprob: -5.111255168914795
    7. ' ' → logprob: -5.486255168914795
    8. 'def' → logprob: -6.611255168914795
    9. ' p' → logprob: -6.861255168914795
    10. ' def' → logprob: -7.111255168914795

Token 127: 'ifie' (ID: 46409)
  Prédit: 'ifie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifie' → logprob: -0.0010374527191743255
    2. 'if' → logprob: -8.12603759765625
    3. 'ifier' → logprob: -8.25103759765625
    4. '   ' → logprob: -8.37603759765625
    5. 'i' → logprob: -9.12603759765625
    6. 'ifiez' → logprob: -10.25103759765625
    7. 'ify' → logprob: -10.37603759765625
    8. 'ifi' → logprob: -11.00103759765625
    9. ' if' → logprob: -11.12603759765625
    10. 'ifies' → logprob: -11.37603759765625

Token 128: ' les' (ID: 1341)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.46665531396865845
    2. ' ' → logprob: -1.5916552543640137
    3. ' for' → logprob: -2.4666552543640137
    4. ' i' → logprob: -4.216655254364014
    5. ' les' → logprob: -4.716655254364014
    6. ' ' → logprob: -4.716655254364014
    7. ' l' → logprob: -5.091655254364014
    8. ' n' → logprob: -5.216655254364014
    9. 's' → logprob: -5.466655254364014
    10. ' le' → logprob: -5.591655254364014

Token 129: ' div' (ID: 4223)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.7901509404182434
    2. ' ' → logprob: -1.6651508808135986
    3. ' divis' → logprob: -1.6651508808135986
    4. 'div' → logprob: -2.6651508808135986
    5. ' div' → logprob: -4.040151119232178
    6. ' facteurs' → logprob: -4.040151119232178
    7. 'i' → logprob: -4.665151119232178
    8. ' premiers' → logprob: -4.665151119232178
    9. ' divisor' → logprob: -5.415151119232178
    10. ' divisible' → logprob: -5.540151119232178

Token 130: 'ise' (ID: 1096)
  Prédit: 'ise'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ise' → logprob: -0.04420110955834389
    2. 'e' → logprob: -4.169200897216797
    3. 'is' → logprob: -4.794200897216797
    4. 'iseur' → logprob: -4.919200897216797
    5. '   ' → logprob: -5.669200897216797
    6. 'i' → logprob: -6.169200897216797
    7. 'eurs' → logprob: -6.294200897216797
    8. '```' → logprob: -6.669200897216797
    9. 'isible' → logprob: -7.794200897216797
    10. '    ' → logprob: -8.419200897216797

Token 131: 'urs' (ID: 1628)
  Prédit: 'urs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'urs' → logprob: -0.08002661168575287
    2. 'u' → logprob: -3.205026626586914
    3. 'ur' → logprob: -3.330026626586914
    4. 'rs' → logprob: -9.080026626586914
    5. 'eurs' → logprob: -9.705026626586914
    6. '   ' → logprob: -9.955026626586914
    7. 's' → logprob: -10.080026626586914
    8. ' ' → logprob: -10.080026626586914
    9. 'urse' → logprob: -10.205026626586914
    10. 'r' → logprob: -10.455026626586914

Token 132: ' imp' (ID: 3282)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.18616653978824615
    2. ' for' → logprob: -2.686166524887085
    3. ' ' → logprob: -2.811166524887085
    4. '   ' → logprob: -4.811166763305664
    5. ' from' → logprob: -5.311166763305664
    6. ' de' → logprob: -5.436166763305664
    7. 'i' → logprob: -5.561166763305664
    8. ' :' → logprob: -5.561166763305664
    9. ':' → logprob: -5.686166763305664
    10. 'for' → logprob: -6.686166763305664

Token 133: 'airs' (ID: 6498)
  Prédit: 'ise'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ise' → logprob: -0.7320525050163269
    2. 'iseur' → logprob: -0.9820525050163269
    3. 'is' → logprob: -3.1070525646209717
    4. 'ect' → logprob: -3.7320525646209717
    5. 'isible' → logprob: -4.232052326202393
    6. 'ic' → logprob: -5.357052326202393
    7. 'iz' → logprob: -5.357052326202393
    8. '3' → logprob: -5.357052326202393
    9. 'iv' → logprob: -5.357052326202393
    10. 'isateurs' → logprob: -5.482052326202393

Token 134: ' jusqu' (ID: 21961)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.8548136949539185
    2. ':' → logprob: -1.3548136949539185
    3. ' :' → logprob: -1.8548136949539185
    4. ' ' → logprob: -2.479813575744629
    5. '   ' → logprob: -3.604813575744629
    6. ' ,' → logprob: -4.229813575744629
    7. ',' → logprob: -4.854813575744629
    8. '<|end|>' → logprob: -5.104813575744629
    9. '  ' → logprob: -5.604813575744629
    10. ' ' → logprob: -5.729813575744629

Token 135: ''à' (ID: 33688)
  Prédit: ''à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''à' → logprob: -0.8958500027656555
    2. ' à' → logprob: -1.2708499431610107
    3. '(' → logprob: -1.7708499431610107
    4. ' ' → logprob: -3.2708499431610107
    5. '’à' → logprob: -3.7708499431610107
    6. ' a' → logprob: -3.8958499431610107
    7. 'a' → logprob: -4.27085018157959
    8. '   ' → logprob: -4.39585018157959
    9. ''au' → logprob: -5.02085018157959
    10. '(n' → logprob: -5.14585018157959

Token 136: ' la' (ID: 557)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.09111212193965912
    2. 'int' → logprob: -2.4661121368408203
    3. ' n' → logprob: -6.21611213684082
    4. 'n' → logprob: -8.96611213684082
    5. ' ' → logprob: -11.34111213684082
    6. '	int' → logprob: -11.71611213684082
    7. '(int' → logprob: -11.96611213684082
    8. ' i' → logprob: -12.09111213684082
    9. ' ' → logprob: -12.09111213684082
    10. ' in' → logprob: -13.21611213684082

Token 137: ' rac' (ID: 12334)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.6451172232627869
    2. ' int' → logprob: -0.7701172232627869
    3. ' rac' → logprob: -5.020117282867432
    4. 'n' → logprob: -6.020117282867432
    5. ' n' → logprob: -6.770117282867432
    6. ' i' → logprob: -7.270117282867432
    7. ' ' → logprob: -7.395117282867432
    8. '   ' → logprob: -8.270116806030273
    9. 's' → logprob: -8.270116806030273
    10. 'rac' → logprob: -9.270116806030273

Token 138: 'ine' (ID: 514)
  Prédit: 'ine'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ine' → logprob: -0.002512166043743491
    2. '```' → logprob: -6.502511978149414
    3. 'i' → logprob: -8.252511978149414
    4. '``' → logprob: -9.002511978149414
    5. 'ïne' → logprob: -9.002511978149414
    6. '2' → logprob: -9.502511978149414
    7. '**' → logprob: -9.752511978149414
    8. 'e' → logprob: -9.877511978149414
    9. '1' → logprob: -10.252511978149414
    10. 'îne' → logprob: -10.252511978149414

Token 139: ' carr' (ID: 18321)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.09003012627363205
    2. ' int' → logprob: -3.2150301933288574
    3. 'int' → logprob: -4.465030193328857
    4. '   ' → logprob: -4.715030193328857
    5. 'de' → logprob: -4.840030193328857
    6. ' ' → logprob: -5.590030193328857
    7. ' n' → logprob: -5.715030193328857
    8. '(int' → logprob: -5.840030193328857
    9. '2' → logprob: -6.590030193328857
    10. 'n' → logprob: -7.215030193328857

Token 140: 'ée' (ID: 2894)
  Prédit: 'ic'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ic' → logprob: -0.6085858345031738
    2. 'ée' → logprob: -2.608585834503174
    3. 'iné' → logprob: -2.733585834503174
    4. 'i' → logprob: -2.858585834503174
    5. 'ine' → logprob: -2.858585834503174
    6. 'ière' → logprob: -2.858585834503174
    7. 'ère' → logprob: -3.733585834503174
    8. 'ique' → logprob: -3.858585834503174
    9. 'è' → logprob: -3.983585834503174
    10. 'é' → logprob: -4.233585834503174

Token 141: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6207671761512756
    2. ':' → logprob: -1.4957671165466309
    3. ' ' → logprob: -2.495767116546631
    4. ' :' → logprob: -2.995767116546631
    5. '(' → logprob: -3.495767116546631
    6. ' (' → logprob: -3.745767116546631
    7. '    ' → logprob: -3.995767116546631
    8. ',' → logprob: -4.995767116546631
    9. '  ' → logprob: -5.370767116546631
    10. 'n' → logprob: -5.745767116546631

Token 142: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.026319220662117004
    2. 'n' → logprob: -3.6513192653656006
    3. ' ' → logprob: -12.02631950378418
    4. '	n' → logprob: -12.27631950378418
    5. '(n' → logprob: -12.65131950378418
    6. ' ' → logprob: -13.15131950378418
    7. 'int' → logprob: -13.40131950378418
    8. ' int' → logprob: -14.02631950378418
    9. ' (' → logprob: -14.77631950378418
    10. '(' → logprob: -16.52631950378418

Token 143: '
' (ID: 198)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.37560540437698364
    2. ' :
' → logprob: -1.7506053447723389
    3. ' :' → logprob: -2.500605344772339
    4. '   ' → logprob: -3.875605344772339
    5. ' ' → logprob: -4.000605583190918
    6. ':
' → logprob: -4.500605583190918
    7. ' for' → logprob: -6.125605583190918
    8. '(' → logprob: -7.500605583190918
    9. ' (' → logprob: -7.500605583190918
    10. '
' → logprob: -7.750605583190918

Token 144: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.12201287597417831
    2. ' :' → logprob: -2.8720128536224365
    3. '   ' → logprob: -3.4970128536224365
    4. ' :
' → logprob: -4.122013092041016
    5. ':
' → logprob: -5.247013092041016
    6. ' for' → logprob: -6.247013092041016
    7. ' ' → logprob: -6.372013092041016
    8. ',' → logprob: -7.497013092041016
    9. ')' → logprob: -8.122013092041016
    10. '    ' → logprob: -8.247013092041016

Token 145: ' a' (ID: 261)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.8867565393447876
    2. ' :' → logprob: -1.1367565393447876
    3. ' :
' → logprob: -1.8867565393447876
    4. ' ' → logprob: -2.511756420135498
    5. ' for' → logprob: -4.636756420135498
    6. '   ' → logprob: -4.761756420135498
    7. ':
' → logprob: -5.636756420135498
    8. ' 
' → logprob: -5.886756420135498
    9. 'for' → logprob: -6.511756420135498
    10. '    ' → logprob: -6.511756420135498

Token 146: ' =' (ID: 314)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.10769179463386536
    2. '=' → logprob: -2.732691764831543
    3. ' =' → logprob: -4.357691764831543
    4. ' i' → logprob: -4.857691764831543
    5. '   ' → logprob: -5.232691764831543
    6. '  ' → logprob: -5.607691764831543
    7. ':' → logprob: -5.857691764831543
    8. ' :' → logprob: -6.982691764831543
    9. ' for' → logprob: -7.232691764831543
    10. '+' → logprob: -7.607691764831543

Token 147: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.037615977227687836
    2. '2' → logprob: -3.912616014480591
    3. '3' → logprob: -4.162615776062012
    4. ' int' → logprob: -7.162615776062012
    5. 'int' → logprob: -7.787615776062012
    6. 'n' → logprob: -9.537615776062012
    7. ' n' → logprob: -10.037615776062012
    8. '1' → logprob: -11.162615776062012
    9. '  ' → logprob: -11.287615776062012
    10. ' ' → logprob: -12.225115776062012

Token 148: '3' (ID: 18)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.14060406386852264
    2. '3' → logprob: -2.140604019165039
    3. ' ' → logprob: -4.640604019165039
    4. 'int' → logprob: -5.765604019165039
    5. ' int' → logprob: -8.140604019165039
    6. 'n' → logprob: -8.390604019165039
    7. '1' → logprob: -8.890604019165039
    8. ' n' → logprob: -9.890604019165039
    9. '   ' → logprob: -10.515604019165039
    10. 'import' → logprob: -11.328104019165039

Token 149: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.44116342067718506
    2. '<|end|>' → logprob: -1.441163420677185
    3. ':' → logprob: -3.1911635398864746
    4. ' ' → logprob: -3.4411635398864746
    5. ' 
' → logprob: -4.441163539886475
    6. '  
' → logprob: -4.941163539886475
    7. '<|end|>' → logprob: -4.941163539886475
    8. ' while' → logprob: -4.941163539886475
    9. 'while' → logprob: -5.941163539886475
    10. '  ' → logprob: -6.191163539886475

Token 150: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.10216119885444641
    2. '<|end|>' → logprob: -2.477161169052124
    3. '   ' → logprob: -4.977161407470703
    4. '  
' → logprob: -6.602161407470703
    5. '<|end|>' → logprob: -6.727161407470703
    6. ':' → logprob: -6.977161407470703
    7. ' 
' → logprob: -7.102161407470703
    8. ' ' → logprob: -7.352161407470703
    9. '    
' → logprob: -7.977161407470703
    10. ' while' → logprob: -8.102161407470703

Token 151: ' while' (ID: 2049)
  Prédit: ' while'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' while' → logprob: -0.12991933524608612
    2. ':' → logprob: -3.2549192905426025
    3. 'while' (adapté à ' while') → logprob: -3.2549192905426025
    4. ' ' → logprob: -3.8799192905426025
    5. '<|end|>' → logprob: -4.004919528961182
    6. '	while' → logprob: -7.129919528961182
    7. '
' → logprob: -7.379919528961182
    8. '   ' → logprob: -7.379919528961182
    9. '    ' → logprob: -7.629919528961182
    10. ' :' → logprob: -7.754919528961182

Token 152: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.005258779972791672
    2. 'a' → logprob: -5.255258560180664
    3. ' ' → logprob: -11.505258560180664
    4. ' ' → logprob: -11.755258560180664
    5. '	a' → logprob: -12.380258560180664
    6. ' (' → logprob: -12.880258560180664
    7. '(a' → logprob: -15.880258560180664
    8. '(' → logprob: -16.505258560180664
    9. ' n' → logprob: -17.380258560180664
    10. '```' → logprob: -17.630258560180664

Token 153: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.09057458490133286
    2. ' <=' → logprob: -2.9655745029449463
    3. '*' → logprob: -3.8405745029449463
    4. '*a' → logprob: -4.340574741363525
    5. '**' → logprob: -8.215574264526367
    6. '<=' → logprob: -8.340574264526367
    7. ' **' → logprob: -11.215574264526367
    8. 'a' → logprob: -11.590574264526367
    9. ' ' → logprob: -12.090574264526367
    10. ' a' → logprob: -12.590574264526367

Token 154: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.007608755491673946
    2. ' a' → logprob: -4.882608890533447
    3. 'n' → logprob: -14.007608413696289
    4. '	a' → logprob: -14.132608413696289
    5. ' ' → logprob: -15.007608413696289
    6. ''a' → logprob: -15.757608413696289
    7. '<=' → logprob: -15.882608413696289
    8. '_a' → logprob: -16.75760841369629
    9. ' <=' → logprob: -16.75760841369629
    10. '<|end|>' → logprob: -16.75760841369629

Token 155: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.004625341854989529
    2. '<=' → logprob: -5.37962532043457
    3. ' ' → logprob: -12.62962532043457
    4. ')<=' → logprob: -14.37962532043457
    5. ' <' → logprob: -15.12962532043457
    6. '<|end|>' → logprob: -15.25462532043457
    7. ' <=",' → logprob: -15.50462532043457
    8. ']<=' → logprob: -15.75462532043457
    9. 'le' → logprob: -16.87962532043457
    10. ' ≤' → logprob: -17.00462532043457

Token 156: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.16022473573684692
    2. 'n' → logprob: -1.9102246761322021
    3. '	n' → logprob: -14.410224914550781
    4. ' ' → logprob: -16.78522491455078
    5. ' ' → logprob: -17.16022491455078
    6. '(n' → logprob: -18.16022491455078
    7. '_n' → logprob: -18.66022491455078
    8. ')n' → logprob: -19.03522491455078
    9. ' н' → logprob: -19.28522491455078
    10. '[n' → logprob: -19.78522491455078

Token 157: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00038539018714800477
    2. ':
' → logprob: -8.500385284423828
    3. ' :' → logprob: -8.625385284423828
    4. ' and' → logprob: -13.875385284423828
    5. ':**' → logprob: -14.750385284423828
    6. ' :
' → logprob: -15.250385284423828
    7. '):' → logprob: -15.375385284423828
    8. 'and' → logprob: -16.500385284423828
    9. '+:' → logprob: -16.500385284423828
    10. ':return' → logprob: -16.500385284423828

Token 158: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5235428214073181
    2. ':' → logprob: -1.148542881011963
    3. '
' → logprob: -3.023542881011963
    4. '<|end|>' → logprob: -3.898542881011963
    5. '   ' → logprob: -4.898542881011963
    6. ' :' → logprob: -5.523542881011963
    7. ':
' → logprob: -5.648542881011963
    8. ' ' → logprob: -6.773542881011963
    9. '<|end|>' → logprob: -6.898542881011963
    10. ',' → logprob: -7.273542881011963

Token 159: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -1.1823978424072266
    2. '       ' → logprob: -1.4323978424072266
    3. 'if' (adapté à ' if') → logprob: -1.5573978424072266
    4. ' ' → logprob: -1.8073978424072266
    5. '<|end|>' → logprob: -3.1823978424072266
    6. ' 
' → logprob: -4.807397842407227
    7. '   ' → logprob: -4.807397842407227
    8. '
' → logprob: -5.057397842407227
    9. '    ' → logprob: -5.557397842407227
    10. ':' → logprob: -5.807397842407227

Token 160: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.0036182431504130363
    2. 'n' → logprob: -5.628618240356445
    3. '	n' → logprob: -11.628618240356445
    4. ' ' → logprob: -12.253618240356445
    5. ' ' → logprob: -12.628618240356445
    6. ' (' → logprob: -14.628618240356445
    7. '_n' → logprob: -16.003618240356445
    8. ' н' → logprob: -16.378618240356445
    9. '(n' → logprob: -16.441118240356445
    10. '<|end|>' → logprob: -16.566118240356445

Token 161: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.03807971253991127
    2. '%' → logprob: -3.2880797386169434
    3. ' ' → logprob: -10.288079261779785
    4. ' ' → logprob: -12.413079261779785
    5. '%e' → logprob: -17.0380802154541
    6. '   ' → logprob: -17.5380802154541
    7. '%c' → logprob: -17.5380802154541
    8. ' %
' → logprob: -17.6630802154541
    9. '%i' → logprob: -17.6630802154541
    10. '%s' → logprob: -18.5380802154541

Token 162: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.026310862973332405
    2. 'a' → logprob: -3.651310920715332
    3. ' ' → logprob: -12.151310920715332
    4. '	a' → logprob: -12.651310920715332
    5. '<|end|>' → logprob: -13.776310920715332
    6. ' ' → logprob: -13.901310920715332
    7. '<|end|>' → logprob: -16.526309967041016
    8. '  ' → logprob: -17.401309967041016
    9. '>a' → logprob: -17.401309967041016
    10. ' а' → logprob: -17.651309967041016

Token 163: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.054900676012039185
    2. '==' → logprob: -2.929900646209717
    3. ' ' → logprob: -12.054901123046875
    4. ' !=' → logprob: -12.929901123046875
    5. '=' → logprob: -13.054901123046875
    6. ')==' → logprob: -13.054901123046875
    7. '0' → logprob: -13.179901123046875
    8. ')' → logprob: -13.304901123046875
    9. ' =' → logprob: -14.679901123046875
    10. ']==' → logprob: -15.054901123046875

Token 164: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.6931481957435608
    2. ' ' → logprob: -0.6931481957435608
    3. '  ' → logprob: -14.818148612976074
    4. '<|end|>' → logprob: -15.318148612976074
    5. ' ' → logprob: -15.943148612976074
    6. '۰' → logprob: -16.443147659301758
    7. '   ' → logprob: -17.568147659301758
    8. ' a' → logprob: -17.693147659301758
    9. '```' → logprob: -18.130647659301758
    10. '    ' → logprob: -18.193147659301758

Token 165: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0002613358374219388
    2. ' ' → logprob: -8.250261306762695
    3. 'a' → logprob: -16.750261306762695
    4. '۰' → logprob: -17.937761306762695
    5. '  ' → logprob: -17.937761306762695
    6. '   ' → logprob: -18.062761306762695
    7. '    ' → logprob: -19.312761306762695
    8. 'o' → logprob: -19.312761306762695
    9. '```' → logprob: -19.625261306762695
    10. '٠' → logprob: -19.937761306762695

Token 166: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.006667535286396742
    2. ':
' → logprob: -5.131667613983154
    3. ':return' → logprob: -7.256667613983154
    4. ' :' → logprob: -10.881667137145996
    5. '       ' → logprob: -12.131667137145996
    6. ' return' → logprob: -13.131667137145996
    7. ' :
' → logprob: -13.506667137145996
    8. '   ' → logprob: -13.756667137145996
    9. ',' → logprob: -13.756667137145996
    10. '):' → logprob: -13.881667137145996

Token 167: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.5478367805480957
    2. '       ' → logprob: -1.5478367805480957
    3. ' return' → logprob: -1.9228367805480957
    4. 'return' → logprob: -3.0478367805480957
    5. ' ' → logprob: -5.922836780548096
    6. '
' → logprob: -5.922836780548096
    7. ':return' → logprob: -6.047836780548096
    8. ' 
' → logprob: -6.422836780548096
    9. '	       ' → logprob: -6.797836780548096
    10. ':' → logprob: -6.922836780548096

Token 168: ' return' (ID: 622)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.978696346282959
    2. ' a' → logprob: -0.978696346282959
    3. ' return' → logprob: -1.478696346282959
    4. 'return' (adapté à ' return') → logprob: -3.978696346282959
    5. ' ' → logprob: -6.728696346282959
    6. ' 
' → logprob: -7.603696346282959
    7. 'eturn' → logprob: -11.353696823120117
    8. ' ' → logprob: -11.603696823120117
    9. '	return' → logprob: -11.728696823120117
    10. '    ' → logprob: -12.353696823120117

Token 169: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -4.5491004129871726e-05
    2. ' a' → logprob: -10.000045776367188
    3. ' ' → logprob: -17.750045776367188
    4. '	a' → logprob: -18.875045776367188
    5. '<|end|>' → logprob: -19.500045776367188
    6. '   ' → logprob: -20.000045776367188
    7. '  ' → logprob: -21.625045776367188
    8. 'а' → logprob: -21.750045776367188
    9. '_a' → logprob: -22.000045776367188
    10. '3' → logprob: -22.125045776367188

Token 170: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0007227989844977856
    2. '   ' → logprob: -8.500722885131836
    3. 'a' → logprob: -8.875722885131836
    4. '
' → logprob: -9.000722885131836
    5. '<|end|>' → logprob: -9.500722885131836
    6. '        
' → logprob: -10.000722885131836
    7. '	' → logprob: -10.500722885131836
    8. ' a' → logprob: -10.750722885131836
    9. '      ' → logprob: -11.250722885131836
    10. '\
' → logprob: -11.625722885131836

Token 171: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0029829293489456177
    2. 'a' → logprob: -6.002983093261719
    3. '   ' → logprob: -7.877983093261719
    4. '	' → logprob: -9.877983093261719
    5. '
' → logprob: -10.502983093261719
    6. ' a' → logprob: -11.252983093261719
    7. '```' → logprob: -11.877983093261719
    8. '	a' → logprob: -12.627983093261719
    9. '<|end|>' → logprob: -12.627983093261719
    10. '           ' → logprob: -12.752983093261719

Token 172: ' a' (ID: 261)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5187453627586365
    2. 'a' (adapté à ' a') → logprob: -1.5187454223632812
    3. ' a' → logprob: -2.5187454223632812
    4. '       ' → logprob: -2.7687454223632812
    5. ' ' → logprob: -3.6437454223632812
    6. '  ' → logprob: -5.018745422363281
    7. '    ' → logprob: -5.143745422363281
    8. '	a' → logprob: -6.893745422363281
    9. '+' → logprob: -7.143745422363281
    10. '	' → logprob: -7.393745422363281

Token 173: ' =' (ID: 314)
  Prédit: ' +='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.2553679645061493
    2. '+' → logprob: -1.8803679943084717
    3. '+=' → logprob: -2.6303679943084717
    4. ' +' → logprob: -7.380367755889893
    5. ' ' → logprob: -9.13036823272705
    6. '=' → logprob: -10.13036823272705
    7. ' plus' → logprob: -12.25536823272705
    8. ' =' → logprob: -13.25536823272705
    9. '+="' → logprob: -13.25536823272705
    10. '+='' → logprob: -14.13036823272705

Token 174: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.005122157279402018
    2. 'a' → logprob: -5.380122184753418
    3. ' ' → logprob: -7.630122184753418
    4. '	a' → logprob: -11.505122184753418
    5. '+' → logprob: -12.380122184753418
    6. ' ' → logprob: -14.505122184753418
    7. '<|end|>' → logprob: -15.755122184753418
    8. ' +' → logprob: -15.880122184753418
    9. '6' → logprob: -16.0051212310791
    10. '2' → logprob: -16.1301212310791

Token 175: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.3132694363594055
    2. ' +' → logprob: -1.3132693767547607
    3. ' ' → logprob: -12.06326961517334
    4. ' plus' → logprob: -13.31326961517334
    5. ' +=' → logprob: -16.438268661499023
    6. '+=' → logprob: -17.063268661499023
    7. '+a' → logprob: -17.063268661499023
    8. '+
' → logprob: -17.188268661499023
    9. ' +
' → logprob: -17.188268661499023
    10. ' ' → logprob: -17.313268661499023

Token 176: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0010331686353310943
    2. ' ' → logprob: -6.876033306121826
    3. '1' → logprob: -15.251032829284668
    4. '   ' → logprob: -16.626033782958984
    5. '
' → logprob: -17.188533782958984
    6. '```' → logprob: -17.563533782958984
    7. '  ' → logprob: -18.063533782958984
    8. ' ' → logprob: -18.376033782958984
    9. '۲' → logprob: -18.376033782958984
    10. '	' → logprob: -18.501033782958984

Token 177: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -2.2246291337069124e-05
    2. ' ' → logprob: -10.750021934509277
    3. '1' → logprob: -14.750021934509277
    4. '
' → logprob: -15.750021934509277
    5. '22' → logprob: -16.937522888183594
    6. '```' → logprob: -17.000022888183594
    7. '۲' → logprob: -17.437522888183594
    8. '

' → logprob: -18.312522888183594
    9. '٢' → logprob: -18.312522888183594
    10. '  ' → logprob: -18.500022888183594

Token 178: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09738540649414062
    2. 'return' → logprob: -2.7223854064941406
    3. '
' → logprob: -3.9723854064941406
    4. ' return' → logprob: -5.097385406494141
    5. '    
' → logprob: -6.472385406494141
    6. '  
' → logprob: -9.09738540649414
    7. '```' → logprob: -9.22238540649414
    8. ' 
' → logprob: -9.34738540649414
    9. '	return' → logprob: -9.59738540649414
    10. ' ' → logprob: -9.72238540649414

Token 179: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.03880125284194946
    2. '   ' → logprob: -3.5388011932373047
    3. 'return' → logprob: -5.788801193237305
    4. ' return' → logprob: -6.163801193237305
    5. '    
' → logprob: -6.538801193237305
    6. ' 
' → logprob: -6.663801193237305
    7. '  
' → logprob: -7.538801193237305
    8. '\n' → logprob: -8.288801193237305
    9. '
' → logprob: -9.538801193237305
    10. ':return' → logprob: -10.038801193237305

Token 180: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.00326172704808414
    2. ' return' → logprob: -6.503261566162109
    3. '-' → logprob: -7.003261566162109
    4. '   ' → logprob: -7.378261566162109
    5. 'r' → logprob: -10.00326156616211
    6. '    
' → logprob: -10.37826156616211
    7. '	return' → logprob: -10.37826156616211
    8. '0' → logprob: -10.62826156616211
    9. '
' → logprob: -11.25326156616211
    10. ':return' → logprob: -11.25326156616211

Token 181: ' ' (ID: 220)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.27716347575187683
    2. 'n' → logprob: -2.027163505554199
    3. '1' → logprob: -2.527163505554199
    4. 'True' → logprob: -4.027163505554199
    5. ' -' → logprob: -5.277163505554199
    6. '0' → logprob: -5.777163505554199
    7. ' n' → logprob: -6.402163505554199
    8. 'None' → logprob: -6.402163505554199
    9. ' True' → logprob: -7.652163505554199
    10. ' ' → logprob: -7.652163505554199

Token 182: '0' (ID: 15)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.05091109871864319
    2. '1' → logprob: -3.6759111881256104
    3. '0' → logprob: -4.550910949707031
    4. 'n' → logprob: -4.675910949707031
    5. 'True' → logprob: -5.550910949707031
    6. 'None' → logprob: -8.175910949707031
    7. ' -' → logprob: -8.550910949707031
    8. ' ' → logprob: -10.925910949707031
    9. '-n' → logprob: -11.050910949707031
    10. ' n' → logprob: -11.800910949707031

Token 183: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.2051629275083542
    2. '<|end|>' → logprob: -1.7051628828048706
    3. '\n' → logprob: -6.95516300201416
    4. '

' → logprob: -7.33016300201416
    5. '#' → logprob: -7.83016300201416
    6. '```' → logprob: -8.08016300201416
    7. '<|end|>' → logprob: -8.33016300201416
    8. 'newline' → logprob: -8.58016300201416
    9. ' ' → logprob: -8.70516300201416
    10. '(' → logprob: -8.83016300201416

Token 184: 'a' (ID: 64)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.08393382281064987
    2. '<|end|>' → logprob: -3.0839338302612305
    3. '\n' → logprob: -4.5839338302612305
    4. ')' → logprob: -5.0839338302612305
    5. '(' → logprob: -5.2089338302612305
    6. '#' → logprob: -5.9589338302612305
    7. '```' → logprob: -6.2089338302612305
    8. ':' → logprob: -6.7089338302612305
    9. ' 
' → logprob: -6.9589338302612305
    10. 'newline' → logprob: -6.9589338302612305

Token 185: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.6175600290298462
    2. '[' → logprob: -1.8675600290298462
    3. '=' → logprob: -2.4925599098205566
    4. ' ' → logprob: -2.6175599098205566
    5. ',' → logprob: -2.7425599098205566
    6. 'r' → logprob: -3.3675599098205566
    7. ')' → logprob: -4.742559909820557
    8. 'b' → logprob: -4.742559909820557
    9. 'd' → logprob: -5.867559909820557
    10. '.' → logprob: -5.867559909820557

Token 186: ' int' (ID: 677)
  Prédit: 'P'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'P' → logprob: -1.145311951637268
    2. '10' → logprob: -1.770311951637268
    3. ' ' → logprob: -1.895311951637268
    4. ' P' → logprob: -1.895311951637268
    5. 'int' → logprob: -2.3953118324279785
    6. ' int' → logprob: -3.0203118324279785
    7. '5' → logprob: -3.2703118324279785
    8. '20' → logprob: -5.3953118324279785
    9. '1' → logprob: -5.7703118324279785
    10. '0' → logprob: -5.8953118324279785

Token 187: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.005420754197984934
    2. '(input' → logprob: -5.255420684814453
    3. '('' → logprob: -9.255420684814453
    4. '()' → logprob: -9.755420684814453
    5. '("' → logprob: -10.880420684814453
    6. '(
' → logprob: -12.255420684814453
    7. 'input' → logprob: -12.755420684814453
    8. ' (' → logprob: -13.005420684814453
    9. '(**' → logprob: -14.255420684814453
    10. '(

' → logprob: -14.380420684814453

Token 188: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.14489364624023438
    2. '()' → logprob: -2.3948936462402344
    3. '("("' → logprob: -3.5198936462402344
    4. '("' → logprob: -4.894893646240234
    5. '())' → logprob: -5.644893646240234
    6. '('' → logprob: -6.144893646240234
    7. '("")' → logprob: -7.894893646240234
    8. '(""))' → logprob: -8.519893646240234
    9. '(">' → logprob: -8.894893646240234
    10. '("(' → logprob: -9.769893646240234

Token 189: 'while' (ID: 7032)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.07126831263303757
    2. 'if' → logprob: -2.946268320083618
    3. 'b' → logprob: -4.571268081665039
    4. 'result' → logprob: -6.321268081665039
    5. 'r' → logprob: -6.821268081665039
    6. 'p' → logprob: -7.321268081665039
    7. ' if' → logprob: -7.696268081665039
    8. 'res' → logprob: -8.071268081665039
    9. 'pr' → logprob: -8.196268081665039
    10. '
' → logprob: -8.321268081665039

Token 190: ' P' (ID: 398)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.002997196977958083
    2. 'a' → logprob: -6.752997398376465
    3. ' True' → logprob: -6.752997398376465
    4. ' ' → logprob: -7.377997398376465
    5. 'True' → logprob: -11.252997398376465
    6. ' ' → logprob: -11.877997398376465
    7. ' not' → logprob: -11.877997398376465
    8. ' (' → logprob: -12.752997398376465
    9. '  ' → logprob: -14.127997398376465
    10. ' P' → logprob: -14.752997398376465

Token 191: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -2.629921436891891e-05
    2. '(' → logprob: -10.62502670288086
    3. 'a' → logprob: -13.25002670288086
    4. '(n' → logprob: -16.25002670288086
    5. ' (' → logprob: -16.75002670288086
    6. '(
' → logprob: -18.75002670288086
    7. '(int' → logprob: -18.87502670288086
    8. '((' → logprob: -19.00002670288086
    9. '(len' → logprob: -19.37502670288086
    10. '(abs' → logprob: -19.37502670288086

Token 192: ')' (ID: 8)
  Prédit: '(a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.0037794087547808886
    2. '(' → logprob: -6.253779411315918
    3. ')' → logprob: -6.378779411315918
    4. '()' → logprob: -9.003779411315918
    5. 'a' → logprob: -11.628779411315918
    6. '())' → logprob: -11.753779411315918
    7. '(n' → logprob: -12.503779411315918
    8. ')a' → logprob: -13.378779411315918
    9. ' )' → logprob: -13.503779411315918
    10. '   ' → logprob: -14.503779411315918

Token 193: ' !=' (ID: 1666)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.008954782970249653
    2. '(' → logprob: -5.508955001831055
    3. '()>' → logprob: -6.008955001831055
    4. '()!=' → logprob: -6.133955001831055
    5. ' ()' → logprob: -9.008955001831055
    6. '()==' → logprob: -9.383955001831055
    7. '():' → logprob: -11.133955001831055
    8. '()<' → logprob: -12.133955001831055
    9. '()">' → logprob: -12.633955001831055
    10. '>' → logprob: -13.508955001831055

Token 194: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.4740825593471527
    2. ' ' → logprob: -0.9740825891494751
    3. ' ' → logprob: -12.474082946777344
    4. '  ' → logprob: -13.849082946777344
    5. '1' → logprob: -15.349082946777344
    6. '   ' → logprob: -15.474082946777344
    7. '<|end|>' → logprob: -16.224082946777344
    8. '```' → logprob: -16.599082946777344
    9. ' -' → logprob: -17.536582946777344
    10. '(' → logprob: -17.661582946777344

Token 195: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00015943869948387146
    2. ' ' → logprob: -8.75015926361084
    3. '-' → logprob: -14.50015926361084
    4. '   ' → logprob: -15.87515926361084
    5. '1' → logprob: -16.125160217285156
    6. '  ' → logprob: -16.750160217285156
    7. '```' → logprob: -17.250160217285156
    8. 'a' → logprob: -18.000160217285156
    9. ' ' → logprob: -18.125160217285156
    10. '<|end|>' → logprob: -18.187660217285156

Token 196: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.005453243386000395
    2. ':
' → logprob: -5.255453109741211
    3. ' :' → logprob: -8.505453109741211
    4. ' :
' → logprob: -11.255453109741211
    5. ' and' → logprob: -12.755453109741211
    6. ':
' → logprob: -14.630453109741211
    7. ':

' → logprob: -14.880453109741211
    8. ':a' → logprob: -16.25545310974121
    9. 'a' → logprob: -16.50545310974121
    10. ',' → logprob: -17.50545310974121

Token 197: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.010177336633205414
    2. 'a' → logprob: -5.010177135467529
    3. ' a' → logprob: -6.135177135467529
    4. '    
' → logprob: -7.260177135467529
    5. '```' → logprob: -8.260177612304688
    6. '   ' → logprob: -9.510177612304688
    7. '
' → logprob: -10.010177612304688
    8. '	a' → logprob: -10.260177612304688
    9. ' 
' → logprob: -10.510177612304688
    10. '   
' → logprob: -11.135177612304688

Token 198: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' (adapté à ' a') → logprob: -0.35378405451774597
    2. ' a' → logprob: -1.2287840843200684
    3. '   ' → logprob: -5.978784084320068
    4. 'print' → logprob: -6.353784084320068
    5. ' print' → logprob: -6.978784084320068
    6. '    ' → logprob: -10.35378360748291
    7. '	a' → logprob: -10.47878360748291
    8. ' 
' → logprob: -10.97878360748291
    9. ' ' → logprob: -11.35378360748291
    10. '    
' → logprob: -11.85378360748291

Token 199: ' =' (ID: 314)
  Prédit: ' +='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.6981760859489441
    2. ' =' → logprob: -1.0731761455535889
    3. '=' → logprob: -1.9481761455535889
    4. '+=' → logprob: -4.07317590713501
    5. '+' → logprob: -7.69817590713501
    6. ' ' → logprob: -8.323176383972168
    7. ' *=' → logprob: -8.948176383972168
    8. ' +' → logprob: -9.198176383972168
    9. ' -=' → logprob: -10.323176383972168
    10. ' ' → logprob: -10.698176383972168

Token 200: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.6726117730140686
    2. 'a' → logprob: -1.4226117134094238
    3. ' int' → logprob: -2.047611713409424
    4. 'int' → logprob: -2.297611713409424
    5. ' P' → logprob: -4.422611713409424
    6. 'P' → logprob: -5.172611713409424
    7. ' ' → logprob: -6.797611713409424
    8. ' input' → logprob: -10.360112190246582
    9. '<int' → logprob: -10.547612190246582
    10. ' ' → logprob: -10.860112190246582

Token 201: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.003951713442802429
    2. ' +' → logprob: -5.753951549530029
    3. 'a' → logprob: -7.503951549530029
    4. 'P' → logprob: -9.253952026367188
    5. '-' → logprob: -9.878952026367188
    6. '+a' → logprob: -10.253952026367188
    7. 'int' → logprob: -11.378952026367188
    8. ' a' → logprob: -11.378952026367188
    9. ' ' → logprob: -12.503952026367188
    10. ' P' → logprob: -12.628952026367188

Token 202: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.04434879869222641
    2. 'P' → logprob: -3.79434871673584
    3. ' ' → logprob: -4.04434871673584
    4. ' P' → logprob: -5.79434871673584
    5. '2' → logprob: -8.16934871673584
    6. 'a' → logprob: -11.04434871673584
    7. 'p' → logprob: -12.79434871673584
    8. '  ' → logprob: -12.85684871673584
    9. '   ' → logprob: -13.29434871673584
    10. '10' → logprob: -13.79434871673584

Token 203: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.05630557984113693
    2. 'P' → logprob: -2.9313056468963623
    3. ' ' → logprob: -6.931305408477783
    4. ' P' → logprob: -8.056305885314941
    5. '2' → logprob: -9.181305885314941
    6. 'a' → logprob: -11.556305885314941
    7. '-' → logprob: -13.056305885314941
    8. 'p' → logprob: -13.493805885314941
    9. '0' → logprob: -13.743805885314941
    10. '  ' → logprob: -13.743805885314941

Token 204: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.049031615257263184
    2. 'print' → logprob: -3.0490317344665527
    3. '<|end|>' → logprob: -8.799031257629395
    4. '
' → logprob: -9.049031257629395
    5. ' 
' → logprob: -9.674031257629395
    6. '\n' → logprob: -10.049031257629395
    7. ' print' → logprob: -10.424031257629395
    8. '#' → logprob: -11.549031257629395
    9. '```' → logprob: -11.924031257629395
    10. '\' → logprob: -12.424031257629395

Token 205: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0003479785518720746
    2. '
' → logprob: -8.000348091125488
    3. ' print' → logprob: -11.500348091125488
    4. ' 
' → logprob: -14.125348091125488
    5. '
' → logprob: -14.625348091125488
    6. '(print' → logprob: -14.750348091125488
    7. '```' → logprob: -15.750348091125488
    8. '#print' → logprob: -15.875348091125488
    9. '    
' → logprob: -15.875348091125488
    10. '#' → logprob: -16.000347137451172

Token 206: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.041830454021692276
    2. '(a' → logprob: -3.291830539703369
    3. '('' → logprob: -5.791830539703369
    4. '("("' → logprob: -7.291830539703369
    5. '((' → logprob: -10.791830062866211
    6. '("' → logprob: -11.791830062866211
    7. '("(' → logprob: -12.166830062866211
    8. '()' → logprob: -12.416830062866211
    9. 'a' → logprob: -12.791830062866211
    10. '(`' → logprob: -13.291830062866211

Token 207: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.3856492842023727e-06
    2. ' )' → logprob: -14.000000953674316
    3. '))' → logprob: -15.750000953674316
    4. '()' → logprob: -15.875000953674316
    5. ')
' → logprob: -16.375001907348633
    6. ')`' → logprob: -16.500001907348633
    7. '')' → logprob: -17.500001907348633
    8. '())' → logprob: -18.000001907348633
    9. '`)' → logprob: -18.125001907348633
    10. '(' → logprob: -18.375001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 205
Tokens correctement prédits (1ère position, stricte): 90
Tokens correctement prédits (1ère position, avec adaptation): 93
Tokens correctement prédits (top 10): 172
Précision stricte (1ère position): 43.90%
Précision adaptée (1ère position): 45.37%
Précision (top 10): 83.90%
================================================================================
