================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:28:36
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def fun(n):
    if n == 1:
        return 1
    else:
        return 1 + 2 * fun(n // 2)

n = int(input())
result = fun(n)
print(result)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' fun' (ID: 2827)
  → Token d'amorce (pas de prédiction)

Token 2: '(n' (ID: 2406)
  → Token d'amorce (pas de prédiction)

Token 3: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6936455965042114
    2. '):' → logprob: -0.6936455965042114
    3. ':' → logprob: -8.068645477294922
    4. '*' → logprob: -10.068645477294922
    5. ',' → logprob: -10.568645477294922
    6. 'a' → logprob: -10.943645477294922
    7. '[' → logprob: -11.568645477294922
    8. ')n' → logprob: -11.568645477294922
    9. '=' → logprob: -11.818645477294922
    10. '):
' → logprob: -11.943645477294922

Token 4: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.4299447238445282
    2. '   ' → logprob: -1.6799447536468506
    3. '\' → logprob: -2.3049447536468506
    4. '```' → logprob: -4.0549445152282715
    5. '(' → logprob: -4.4299445152282715
    6. ''' → logprob: -4.5549445152282715
    7. '\n' → logprob: -4.8049445152282715
    8. '\t' → logprob: -5.9299445152282715
    9. '    ' → logprob: -6.3049445152282715
    10. ' ' → logprob: -6.4299445152282715

Token 5: ' if' (ID: 538)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.9337434768676758
    2. '   ' → logprob: -1.5587434768676758
    3. '\n' → logprob: -2.308743476867676
    4. '\' → logprob: -2.558743476867676
    5. '    ' → logprob: -3.183743476867676
    6. ' if' → logprob: -3.558743476867676
    7. ' \' → logprob: -3.808743476867676
    8. ' return' → logprob: -4.058743476867676
    9. ' 
' → logprob: -4.058743476867676
    10. '\t' → logprob: -4.183743476867676

Token 6: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.0009957717265933752
    2. ' ' → logprob: -7.625995635986328
    3. 'n' → logprob: -7.750995635986328
    4. ' not' → logprob: -9.500995635986328
    5. ' ' → logprob: -14.250995635986328
    6. '	n' → logprob: -15.000995635986328
    7. 'not' → logprob: -15.375995635986328
    8. '  ' → logprob: -15.500995635986328
    9. ' ‌' → logprob: -15.750995635986328
    10. '(n' → logprob: -15.875995635986328

Token 7: ' ==' (ID: 951)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.17013192176818848
    2. ' <=' → logprob: -2.9201319217681885
    3. ' ==' → logprob: -3.4201319217681885
    4. '>' → logprob: -3.5451319217681885
    5. ' <' → logprob: -3.6701319217681885
    6. ' ' → logprob: -5.170131683349609
    7. ' >=' → logprob: -5.170131683349609
    8. '==' → logprob: -6.420131683349609
    9. ' %' → logprob: -7.420131683349609
    10. '<' → logprob: -7.545131683349609

Token 8: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.31326824426651
    2. '0' → logprob: -1.3132681846618652
    3. '1' → logprob: -12.188268661499023
    4. ' None' → logprob: -14.188268661499023
    5. ' ' → logprob: -15.313268661499023
    6. 'None' → logprob: -15.813268661499023
    7. '=' → logprob: -16.563268661499023
    8. '   ' → logprob: -17.313268661499023
    9. '  ' → logprob: -17.438268661499023
    10. '2' → logprob: -17.813268661499023

Token 9: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.771655115589965e-05
    2. ' ' → logprob: -11.125018119812012
    3. '1' → logprob: -12.750018119812012
    4. '42' → logprob: -18.125017166137695
    5. 'None' → logprob: -19.625017166137695
    6. '10' → logprob: -20.000017166137695
    7. '2' → logprob: -20.125017166137695
    8. '   ' → logprob: -20.125017166137695
    9. '=' → logprob: -20.250017166137695
    10. '```' → logprob: -20.250017166137695

Token 10: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00015062130114529282
    2. ':
' → logprob: -9.000150680541992
    3. ':return' → logprob: -10.750150680541992
    4. '):' → logprob: -12.625150680541992
    5. '':' → logprob: -14.500150680541992
    6. '():' → logprob: -14.875150680541992
    7. ':**' → logprob: -15.000150680541992
    8. ':\' → logprob: -15.250150680541992
    9. ' :' → logprob: -15.625150680541992
    10. '```' → logprob: -16.000150680541992

Token 11: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.28799524903297424
    2. '\n' → logprob: -1.4129952192306519
    3. ' return' → logprob: -5.912995338439941
    4. '\' → logprob: -6.037995338439941
    5. 'return' → logprob: -7.912995338439941
    6. '\r' → logprob: -8.162995338439941
    7. '   ' → logprob: -8.287995338439941
    8. '    ' → logprob: -9.037995338439941
    9. '```' → logprob: -9.287995338439941
    10. ' \' → logprob: -9.537995338439941

Token 12: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.34058183431625366
    2. ' return' → logprob: -1.3405818939208984
    3. '       ' → logprob: -3.7155818939208984
    4. '   ' → logprob: -6.465581893920898
    5. '           ' → logprob: -7.715581893920898
    6. ' ' → logprob: -8.715581893920898
    7. '\' → logprob: -9.465581893920898
    8. ' \' → logprob: -9.590581893920898
    9. '\n' → logprob: -9.715581893920898
    10. '    ' → logprob: -10.215581893920898

Token 13: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.22668901085853577
    2. ' None' → logprob: -2.726689100265503
    3. ' True' → logprob: -2.851689100265503
    4. ' n' → logprob: -3.226689100265503
    5. '1' → logprob: -3.351689100265503
    6. 'n' → logprob: -5.851688861846924
    7. 'None' → logprob: -6.851688861846924
    8. 'True' → logprob: -7.851688861846924
    9. ' False' → logprob: -8.226689338684082
    10. '0' → logprob: -8.601689338684082

Token 14: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0069692134857177734
    2. 'n' → logprob: -5.006969451904297
    3. ' ' → logprob: -8.756969451904297
    4. '0' → logprob: -10.381969451904297
    5. 'True' → logprob: -10.381969451904297
    6. ' n' → logprob: -10.756969451904297
    7. ' True' → logprob: -12.256969451904297
    8. 'None' → logprob: -12.381969451904297
    9. '"' → logprob: -13.506969451904297
    10. '   ' → logprob: -13.506969451904297

Token 15: '
' (ID: 198)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.02473974972963333
    2. '
' → logprob: -4.899739742279053
    3. '   ' → logprob: -5.024739742279053
    4. '    
' → logprob: -5.524739742279053
    5. '\' → logprob: -6.399739742279053
    6. '  
' → logprob: -6.399739742279053
    7. '```' → logprob: -6.649739742279053
    8. ' 
' → logprob: -7.649739742279053
    9. '   
' → logprob: -8.149740219116211
    10. '\r' → logprob: -8.524740219116211

Token 16: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.26609155535697937
    2. '   ' → logprob: -1.8910915851593018
    3. '    
' → logprob: -2.8910915851593018
    4. '
' → logprob: -4.391091346740723
    5. '```' → logprob: -5.266091346740723
    6. '  
' → logprob: -5.516091346740723
    7. '\' → logprob: -6.141091346740723
    8. ''\' → logprob: -7.141091346740723
    9. '   
' → logprob: -7.391091346740723
    10. ' 
' → logprob: -8.141091346740723

Token 17: ' else' (ID: 1203)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.41514816880226135
    2. '\n' → logprob: -1.665148138999939
    3. '    
' → logprob: -2.6651482582092285
    4. '\' → logprob: -3.1651482582092285
    5. '```' → logprob: -3.9151482582092285
    6. '
' → logprob: -5.1651482582092285
    7. ' 
' → logprob: -6.0401482582092285
    8. '  
' → logprob: -6.1651482582092285
    9. '    ' → logprob: -6.2901482582092285
    10. 'n' → logprob: -6.5401482582092285

Token 18: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.03181421756744385
    2. '       ' → logprob: -3.6568140983581543
    3. '   ' → logprob: -6.156814098358154
    4. ':
' → logprob: -6.281814098358154
    5. '    ' → logprob: -7.031814098358154
    6. ':return' → logprob: -8.781814575195312
    7. '     ' → logprob: -9.656814575195312
    8. '\n' → logprob: -9.656814575195312
    9. '      ' → logprob: -9.906814575195312
    10. '        ' → logprob: -10.156814575195312

Token 19: '       ' (ID: 309)
  Prédit: '    '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '    ' → logprob: -0.5376056432723999
    2. ' n' → logprob: -1.4126056432724
    3. '   ' → logprob: -3.0376057624816895
    4. ' ' → logprob: -3.6626057624816895
    5. '       ' → logprob: -3.7876057624816895
    6. ' return' → logprob: -3.7876057624816895
    7. ' 
' → logprob: -4.1626057624816895
    8. 'n' → logprob: -4.1626057624816895
    9. '     
' → logprob: -4.7876057624816895
    10. '\n' → logprob: -5.1626057624816895

Token 20: ' return' (ID: 622)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.6829160451889038
    2. 'return' (adapté à ' return') → logprob: -1.6829160451889038
    3. 'n' → logprob: -1.8079160451889038
    4. ' return' → logprob: -1.9329160451889038
    5. '   ' → logprob: -9.557915687561035
    6. ' ' → logprob: -9.807915687561035
    7. '       ' → logprob: -9.932915687561035
    8. 'fun' → logprob: -10.182915687561035
    9. '1' → logprob: -10.682915687561035
    10. '```' → logprob: -11.057915687561035

Token 21: ' ' (ID: 220)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.15637055039405823
    2. ' fun' → logprob: -2.1563706398010254
    3. 'n' → logprob: -3.6563706398010254
    4. 'fun' → logprob: -5.781370639801025
    5. ' ' → logprob: -9.906370162963867
    6. ' ' → logprob: -10.281370162963867
    7. '(fun' → logprob: -12.781370162963867
    8. '(n' → logprob: -12.781370162963867
    9. ' func' → logprob: -13.281370162963867
    10. '1' → logprob: -13.281370162963867

Token 22: '1' (ID: 16)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.1246626004576683
    2. 'fun' → logprob: -2.3746626377105713
    3. ' n' → logprob: -3.7496626377105713
    4. ' fun' → logprob: -7.374662399291992
    5. ''n' → logprob: -13.499662399291992
    6. '(fun' → logprob: -13.999662399291992
    7. ' ' → logprob: -14.249662399291992
    8. '	n' → logprob: -14.249662399291992
    9. '   ' → logprob: -14.749662399291992
    10. '(n' → logprob: -14.749662399291992

Token 23: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.47825688123703003
    2. '+' → logprob: -0.97825688123703
    3. '*' → logprob: -6.103256702423096
    4. ' *' → logprob: -6.478256702423096
    5. '0' → logprob: -8.603257179260254
    6. ' ' → logprob: -9.103257179260254
    7. '+n' → logprob: -10.478257179260254
    8. '-' → logprob: -10.603257179260254
    9. ' ' → logprob: -11.353257179260254
    10. '    ' → logprob: -11.478257179260254

Token 24: ' ' (ID: 220)
  Prédit: ' fun'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fun' → logprob: -0.3132622241973877
    2. 'fun' → logprob: -1.3132622241973877
    3. '(fun' → logprob: -15.313261985778809
    4. '_fun' → logprob: -16.313262939453125
    5. 'func' → logprob: -16.813262939453125
    6. 'f' → logprob: -16.938262939453125
    7. ' func' → logprob: -17.438262939453125
    8. 'def' → logprob: -18.063262939453125
    9. ' def' → logprob: -18.813262939453125
    10. ' ' → logprob: -18.938262939453125

Token 25: '2' (ID: 17)
  Prédit: 'fun'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'fun' → logprob: -4.842555426876061e-06
    2. ' fun' → logprob: -12.250004768371582
    3. '(fun' → logprob: -20.0000057220459
    4. 'func' → logprob: -20.8750057220459
    5. '_fun' → logprob: -22.0000057220459
    6. 'n' → logprob: -22.3750057220459
    7. '```' → logprob: -22.7500057220459
    8. 'f' → logprob: -23.1250057220459
    9. 'fn' → logprob: -24.0000057220459
    10. 'def' → logprob: -24.2500057220459

Token 26: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.5258190631866455
    2. '*' → logprob: -0.9008190631866455
    3. '*n' → logprob: -6.025818824768066
    4. ' **' → logprob: -9.775818824768066
    5. '**' → logprob: -9.775818824768066
    6. '(n' → logprob: -9.900818824768066
    7. '*(' → logprob: -10.400818824768066
    8. '0' → logprob: -10.900818824768066
    9. ')' → logprob: -11.150818824768066
    10. '*f' → logprob: -11.525818824768066

Token 27: ' fun' (ID: 2827)
  Prédit: 'fun'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fun' → logprob: -0.003606959478929639
    2. ' fun' → logprob: -5.628606796264648
    3. 'n' → logprob: -12.378606796264648
    4. '(fun' → logprob: -13.003606796264648
    5. 'func' → logprob: -15.878606796264648
    6. ' n' → logprob: -16.62860679626465
    7. '(' → logprob: -17.12860679626465
    8. 'f' → logprob: -17.25360679626465
    9. '(n' → logprob: -17.50360679626465
    10. 'Fun' → logprob: -17.62860679626465

Token 28: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.06197004392743111
    2. '(' → logprob: -2.8119699954986572
    3. ' (' → logprob: -13.936969757080078
    4. '(
' → logprob: -14.686969757080078
    5. '((' → logprob: -15.311969757080078
    6. '("("' → logprob: -15.561969757080078
    7. '```' → logprob: -15.811969757080078
    8. '(

' → logprob: -16.436969757080078
    9. '('' → logprob: -16.936969757080078
    10. '(s' → logprob: -17.436969757080078

Token 29: ' //' (ID: 602)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '-' → logprob: -0.007127123884856701
    2. '(' → logprob: -5.382127285003662
    3. ' -' → logprob: -6.632127285003662
    4. '(n' → logprob: -6.757127285003662
    5. '(-' → logprob: -11.632126808166504
    6. ')' → logprob: -12.007126808166504
    7. ' (' → logprob: -12.257126808166504
    8. '-)' → logprob: -13.632126808166504
    9. '−' → logprob: -14.632126808166504
    10. '```' → logprob: -15.007126808166504

Token 30: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0008046258008107543
    2. ' ' → logprob: -7.125804424285889
    3. '3' → logprob: -15.875804901123047
    4. '```' → logprob: -16.875804901123047
    5. '1' → logprob: -17.625804901123047
    6. '4' → logprob: -19.000804901123047
    7. '10' → logprob: -19.125804901123047
    8. '6' → logprob: -19.875804901123047
    9. '5' → logprob: -20.000804901123047
    10. '7' → logprob: -20.125804901123047

Token 31: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -8.959636033978313e-05
    2. '3' → logprob: -9.500089645385742
    3. ' ' → logprob: -11.250089645385742
    4. '```' → logprob: -14.500089645385742
    5. '4' → logprob: -14.750089645385742
    6. '   ' → logprob: -15.625089645385742
    7. '1' → logprob: -15.625089645385742
    8. '10' → logprob: -16.125089645385742
    9. '5' → logprob: -16.375089645385742
    10. '6' → logprob: -16.500089645385742

Token 32: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -3.650518920039758e-06
    2. ' )' → logprob: -13.250003814697266
    3. '))' → logprob: -13.875003814697266
    4. ')`' → logprob: -15.250003814697266
    5. '(' → logprob: -15.625003814697266
    6. ')
' → logprob: -15.875003814697266
    7. ')))' → logprob: -16.250003814697266
    8. '`)' → logprob: -16.250003814697266
    9. '')' → logprob: -16.750003814697266
    10. '   ' → logprob: -17.875003814697266

Token 33: 'n' (ID: 77)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.30157706141471863
    2. '\n' → logprob: -2.801577091217041
    3. '<|end|>' → logprob: -2.801577091217041
    4. '
' → logprob: -3.301577091217041
    5. '\' → logprob: -3.801577091217041
    6. ')' → logprob: -3.801577091217041
    7. ' ' → logprob: -4.176577091217041
    8. '*' → logprob: -4.301577091217041
    9. '```' → logprob: -5.051577091217041
    10. '_' → logprob: -5.426577091217041

Token 34: ' =' (ID: 314)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.0616756677627563
    2. '<|end|>' → logprob: -1.1866756677627563
    3. ')' → logprob: -1.3116756677627563
    4. '[' → logprob: -3.436675548553467
    5. '(' → logprob: -4.186675548553467
    6. '<|end|>' → logprob: -4.311675548553467
    7. ' )' → logprob: -5.811675548553467
    8. ' **' → logprob: -5.936675548553467
    9. '%' → logprob: -6.186675548553467
    10. '=' → logprob: -6.561675548553467

Token 35: ' int' (ID: 677)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.15682047605514526
    2. ' ' → logprob: -2.28182053565979
    3. '16' → logprob: -3.78182053565979
    4. '8' → logprob: -4.656820297241211
    5. ' int' → logprob: -5.406820297241211
    6. '5' → logprob: -5.656820297241211
    7. 'int' → logprob: -6.031820297241211
    8. '7' → logprob: -8.906820297241211
    9. '4' → logprob: -9.031820297241211
    10. '1' → logprob: -9.531820297241211

Token 36: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002977702533826232
    2. '(input' → logprob: -5.8779778480529785
    3. ' (' → logprob: -9.37797737121582
    4. '(n' → logprob: -10.75297737121582
    5. '('' → logprob: -10.87797737121582
    6. 'input' → logprob: -11.12797737121582
    7. '<|end|>' → logprob: -12.00297737121582
    8. '()' → logprob: -12.25297737121582
    9. '(
' → logprob: -12.50297737121582
    10. '(`' → logprob: -13.25297737121582

Token 37: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5425288081169128
    2. '()' → logprob: -1.0425288677215576
    3. '())' → logprob: -3.2925288677215576
    4. '("("' → logprob: -4.5425286293029785
    5. '('' → logprob: -4.6675286293029785
    6. '(""))' → logprob: -5.7925286293029785
    7. ')' → logprob: -6.1675286293029785
    8. '("")' → logprob: -6.5425286293029785
    9. '("' → logprob: -7.0425286293029785
    10. '(()' → logprob: -7.1675286293029785

Token 38: 'result' (ID: 2521)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.5048530030981055e-06
    2. '```' → logprob: -13.875001907348633
    3. 'result' → logprob: -15.125001907348633
    4. ' print' → logprob: -16.625001907348633
    5. 'fun' → logprob: -16.875001907348633
    6. 'pr' → logprob: -17.625001907348633
    7. '(print' → logprob: -17.750001907348633
    8. '``' → logprob: -18.125001907348633
    9. '`' → logprob: -18.125001907348633
    10. '#print' → logprob: -18.250001907348633

Token 39: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.45047369599342346
    2. ' =' → logprob: -1.325473666191101
    3. '(' → logprob: -3.2004737854003906
    4. '.' → logprob: -3.7004737854003906
    5. ')' → logprob: -3.7004737854003906
    6. '()' → logprob: -5.575473785400391
    7. '[' → logprob: -6.700473785400391
    8. ' ' → logprob: -7.575473785400391
    9. '<|end|>' → logprob: -7.825473785400391
    10. ']' → logprob: -9.07547378540039

Token 40: ' fun' (ID: 2827)
  Prédit: ' fun'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fun' → logprob: -0.06197183206677437
    2. 'fun' → logprob: -2.81197190284729
    3. '(fun' → logprob: -12.686971664428711
    4. 'Fun' → logprob: -14.936971664428711
    5. '_fun' → logprob: -15.436971664428711
    6. ' ' → logprob: -16.06197166442871
    7. '.fun' → logprob: -16.06197166442871
    8. ' func' → logprob: -16.18697166442871
    9. ' Fun' → logprob: -16.56197166442871
    10. 'func' → logprob: -16.81197166442871

Token 41: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.012516953982412815
    2. '(n' → logprob: -4.387516975402832
    3. '(
' → logprob: -13.012516975402832
    4. '("("' → logprob: -13.137516975402832
    5. '('' → logprob: -13.762516975402832
    6. '((' → logprob: -14.637516975402832
    7. ' (' → logprob: -14.637516975402832
    8. '(

' → logprob: -15.262516975402832
    9. '(user' → logprob: -16.137516021728516
    10. '(result' → logprob: -16.137516021728516

Token 42: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.045823566731997e-05
    2. '))' → logprob: -11.000020027160645
    3. ' )' → logprob: -13.250020027160645
    4. ')))' → logprob: -13.750020027160645
    5. ')`' → logprob: -15.250020027160645
    6. ')
' → logprob: -15.375020027160645
    7. ')**' → logprob: -15.750020027160645
    8. '`)' → logprob: -15.875020027160645
    9. '**' → logprob: -16.87502098083496
    10. '*' → logprob: -17.50002098083496

Token 43: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.1472419600977446e-06
    2. ' print' → logprob: -14.375000953674316
    3. '
' → logprob: -15.125000953674316
    4. '#print' → logprob: -16.875001907348633
    5. '```' → logprob: -17.000001907348633
    6. '<|end|>' → logprob: -17.000001907348633
    7. '(print' → logprob: -17.375001907348633
    8. '\n' → logprob: -17.500001907348633
    9. 'pr' → logprob: -17.875001907348633
    10. '.print' → logprob: -18.000001907348633

Token 44: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.018167614936828613
    2. '(result' → logprob: -4.018167495727539
    3. '("("' → logprob: -11.643167495727539
    4. '('' → logprob: -11.893167495727539
    5. ' (' → logprob: -14.393167495727539
    6. '(res' → logprob: -15.393167495727539
    7. '()' → logprob: -15.643167495727539
    8. '(f' → logprob: -15.768167495727539
    9. '(

' → logprob: -15.893167495727539
    10. 'result' → logprob: -16.01816749572754

Token 45: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.127333340875339e-06
    2. '(' → logprob: -12.875003814697266
    3. '))' → logprob: -14.250003814697266
    4. ' )' → logprob: -15.125003814697266
    5. '`)' → logprob: -15.500003814697266
    6. '()' → logprob: -16.125003814697266
    7. ')`' → logprob: -16.250003814697266
    8. '')' → logprob: -16.375003814697266
    9. '#' → logprob: -16.500003814697266
    10. ')
' → logprob: -17.750003814697266


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 43
Tokens correctement prédits (1ère position, stricte): 12
Tokens correctement prédits (1ère position, avec adaptation): 13
Tokens correctement prédits (top 10): 35
Précision stricte (1ère position): 27.91%
Précision adaptée (1ère position): 30.23%
Précision (top 10): 81.40%
================================================================================
