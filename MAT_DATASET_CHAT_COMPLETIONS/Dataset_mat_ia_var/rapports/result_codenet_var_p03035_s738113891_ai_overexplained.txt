================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:00:12
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
# Demande à l'utilisateur de saisir deux valeurs séparées par un espace.
# input() lit la saisie de l'utilisateur sous forme de chaîne de caractères (string).
# split() sépare cette chaîne en une liste de deux éléments grâce à l'espace (" ") comme séparateur.
# map(int, ...) applique la fonction int() à chaque élément de cette liste pour les convertir en entiers.
# Enfin, les deux entiers sont stockés dans les variables A et B respectivement grâce à l'affectation multiple.
A, B = map(int, input().split())

# Ici, nous utilisons une instruction conditionnelle pour contrôler le flux du programme selon la valeur de A.
# La première condition vérifie si la valeur de A est supérieure ou égale à 13 à l'aide de l'opérateur de comparaison ">=".
if A >= 13:
    # Si A est supérieur ou égal à 13, on affiche la valeur entière de B.
    # int(B) s'assure que B est bien de type entier, même si ce n'est pas strictement nécessaire ici car B est déjà un entier.
    # print() affiche la valeur sur la sortie standard (écran du terminal).
    print(int(B))
# La clause elif permet de tester une seconde condition si la première n'est pas vérifiée.
# Ici, on vérifie que la valeur de A est comprise entre 6 et 12 inclusivement.
# L'opérateur logique "<=" permet de spécifier une plage de valeurs: 6 <= A <= 12 signifie "A est supérieur ou égal à 6 ET A est inférieur ou égal à 12".
elif 6 <= A <= 12:
    # Si A est compris entre 6 et 12, on affiche la moitié de B (B divisé par 2).
    # L'opération B/2 retourne un nombre à virgule flottante.
    # int(B/2) convertit ce résultat en entier, ce qui tronque la partie décimale.
    print(int(B/2))
# La clause else capture tous les cas non couverts par les if et elif précédents.
# Ici, cela signifie que A est inférieur à 6.
else:
    # Si A est strictement inférieur à 6, on affiche la chaîne de caractères "0".
    # Les guillemets indiquent qu'il s'agit d'une chaîne de caractères, et non d'un nombre.
    print("0")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '#' (ID: 2)
  → Token d'amorce (pas de prédiction)

Token 1: ' Dem' (ID: 9458)
  → Token d'amorce (pas de prédiction)

Token 2: 'ande' (ID: 4102)
  → Token d'amorce (pas de prédiction)

Token 3: ' à' (ID: 1221)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.5254546403884888
    2. ' de' → logprob: -2.025454521179199
    3. ' ' → logprob: -2.400454521179199
    4. ':' → logprob: -2.525454521179199
    5. '_' → logprob: -3.150454521179199
    6. ' :' → logprob: -3.900454521179199
    7. '```' → logprob: -4.525454521179199
    8. ' =' → logprob: -4.900454521179199
    9. ' d' → logprob: -5.025454521179199
    10. ''' → logprob: -5.150454521179199

Token 4: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.0062631662003695965
    2. ' l' → logprob: -5.256263256072998
    3. 'user' → logprob: -7.506263256072998
    4. 'util' → logprob: -8.63126277923584
    5. 'la' → logprob: -10.00626277923584
    6. 'un' → logprob: -10.13126277923584
    7. '`' → logprob: -10.38126277923584
    8. '#' → logprob: -10.50626277923584
    9. '```' → logprob: -10.50626277923584
    10. ' ' → logprob: -11.13126277923584

Token 5: ''utilisateur' (ID: 140803)
  Prédit: ''utilisateur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''utilisateur' → logprob: -0.036522276699543
    2. ''' → logprob: -4.161522388458252
    3. 'u' → logprob: -4.661522388458252
    4. 'util' → logprob: -5.661522388458252
    5. '’utilisateur' → logprob: -5.661522388458252
    6. 'a' → logprob: -6.161522388458252
    7. ' utilisateur' → logprob: -6.786522388458252
    8. ''util' → logprob: -8.661521911621094
    9. ''user' → logprob: -9.161521911621094
    10. ''us' → logprob: -9.411521911621094

Token 6: ' de' (ID: 334)
  Prédit: 'nom'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'nom' → logprob: -0.41761481761932373
    2. 'name' → logprob: -1.9176148176193237
    3. 'user' → logprob: -2.4176149368286133
    4. 'input' → logprob: -3.0426149368286133
    5. 'age' → logprob: -4.292614936828613
    6. 'print' → logprob: -4.542614936828613
    7. 'username' → logprob: -5.167614936828613
    8. 's' → logprob: -5.167614936828613
    9. 'prenom' → logprob: -5.167614936828613
    10. 'n' → logprob: -5.292614936828613

Token 7: ' saisir' (ID: 152120)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.009185493923723698
    2. ' saisir' → logprob: -5.634185314178467
    3. 'r' → logprob: -6.009185314178467
    4. 'entr' → logprob: -6.259185314178467
    5. '```' → logprob: -7.259185314178467
    6. 'sa' → logprob: -9.009185791015625
    7. '#' → logprob: -9.384185791015625
    8. ' entrer' → logprob: -10.259185791015625
    9. ' fournir' → logprob: -10.634185791015625
    10. 'contin' → logprob: -10.759185791015625

Token 8: ' deux' (ID: 10301)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6045976281166077
    2. ' une' → logprob: -1.479597568511963
    3. ' un' → logprob: -1.979597568511963
    4. 'une' → logprob: -3.979597568511963
    5. 's' → logprob: -4.104597568511963
    6. '_' → logprob: -4.604597568511963
    7. 'un' → logprob: -4.729597568511963
    8. ''' → logprob: -4.729597568511963
    9. ' ' → logprob: -5.479597568511963
    10. ''une' → logprob: -5.604597568511963

Token 9: ' valeurs' (ID: 73668)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5745195150375366
    2. ' espaces' → logprob: -0.9495195150375366
    3. ' chaînes' → logprob: -4.199519634246826
    4. ' nombres' → logprob: -4.449519634246826
    5. '_' → logprob: -5.824519634246826
    6. ' espace' → logprob: -5.949519634246826
    7. ' mots' → logprob: -6.074519634246826
    8. 's' → logprob: -6.199519634246826
    9. ' variables' → logprob: -6.699519634246826
    10. ' lignes' → logprob: -6.824519634246826

Token 10: ' sépar' (ID: 97160)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.5474398732185364
    2. '\n' → logprob: -1.2974398136138916
    3. 'x' → logprob: -2.5474398136138916
    4. 'n' → logprob: -3.5474398136138916
    5. 'a' → logprob: -4.797440052032471
    6. '\' → logprob: -4.922440052032471
    7. 'val' → logprob: -4.922440052032471
    8. '```' → logprob: -5.172440052032471
    9. '`' → logprob: -5.797440052032471
    10. 'value' → logprob: -6.172440052032471

Token 11: 'ées' (ID: 5161)
  Prédit: 'ées'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ées' → logprob: -0.0036159895826131105
    2. 'és' → logprob: -5.878615856170654
    3. 'é' → logprob: -7.253615856170654
    4. 'ée' → logprob: -9.253616333007812
    5. '```' → logprob: -12.878616333007812
    6. 'ément' → logprob: -13.378616333007812
    7. '#' → logprob: -13.628616333007812
    8. 'er' → logprob: -14.378616333007812
    9. 'éc' → logprob: -15.253616333007812
    10. 'es' → logprob: -15.378616333007812

Token 12: ' par' (ID: 686)
  Prédit: 'es'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'es' → logprob: -0.7368559837341309
    2. 'par' → logprob: -2.111855983734131
    3. ':' → logprob: -2.361855983734131
    4. 's' → logprob: -2.736855983734131
    5. 'e' → logprob: -3.111855983734131
    6. '```' → logprob: -3.236855983734131
    7. '.' → logprob: -3.361855983734131
    8. ',' → logprob: -3.361855983734131
    9. ' ' → logprob: -3.861855983734131
    10. ' :' → logprob: -4.486855983734131

Token 13: ' un' (ID: 537)
  Prédit: 'un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'un' → logprob: -0.2774304449558258
    2. 'une' → logprob: -1.9024304151535034
    3. ''un' → logprob: -3.152430534362793
    4. ' un' → logprob: -3.527430534362793
    5. ''' → logprob: -5.527430534362793
    6. '```' → logprob: -5.902430534362793
    7. 'des' → logprob: -6.277430534362793
    8. 'es' → logprob: -6.402430534362793
    9. 'space' → logprob: -6.527430534362793
    10. ' ' → logprob: -6.902430534362793

Token 14: ' espace' (ID: 66004)
  Prédit: 'es'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'es' → logprob: -0.031149445101618767
    2. 'esp' → logprob: -4.281149387359619
    3. ''espace' → logprob: -4.531149387359619
    4. ' espace' → logprob: -5.406149387359619
    5. 'space' → logprob: -7.656149387359619
    6. '```' → logprob: -7.906149387359619
    7. 'e' → logprob: -8.906149864196777
    8. '’espace' → logprob: -9.031149864196777
    9. ''esp' → logprob: -9.281149864196777
    10. 's' → logprob: -9.406149864196777

Token 15: '.
' (ID: 558)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.5293700098991394
    2. 'v' → logprob: -1.6543700695037842
    3. 'val' → logprob: -2.529370069503784
    4. '`' → logprob: -3.279370069503784
    5. 'x' → logprob: -4.029369831085205
    6. 's' → logprob: -4.029369831085205
    7. 'user' → logprob: -4.154369831085205
    8. '```' → logprob: -4.154369831085205
    9. 'i' → logprob: -4.654369831085205
    10. 'value' → logprob: -4.904369831085205

Token 16: '#' (ID: 2)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.8990543484687805
    2. 'val' → logprob: -1.1490542888641357
    3. 's' → logprob: -2.7740542888641357
    4. 'user' → logprob: -3.3990542888641357
    5. 'x' → logprob: -3.3990542888641357
    6. 'input' → logprob: -3.5240542888641357
    7. '```' → logprob: -3.6490542888641357
    8. 'i' → logprob: -3.8990542888641357
    9. 'n' → logprob: -4.149054527282715
    10. 'value' → logprob: -4.274054527282715

Token 17: ' input' (ID: 3422)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.17224927246570587
    2. 'values' → logprob: -2.9222493171691895
    3. 'input' → logprob: -3.4222493171691895
    4. 'user' → logprob: -3.5472493171691895
    5. 's' → logprob: -3.6722493171691895
    6. 'value' → logprob: -4.9222493171691895
    7. 'vals' → logprob: -6.0472493171691895
    8. 'inputs' → logprob: -6.7972493171691895
    9. 'x' → logprob: -7.0472493171691895
    10. 'v' → logprob: -7.2972493171691895

Token 18: '()' (ID: 416)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.3287914991378784
    2. 'val' → logprob: -1.8287914991378784
    3. '=' → logprob: -1.9537914991378784
    4. 's' → logprob: -2.203791618347168
    5. 'user' → logprob: -2.203791618347168
    6. 'value' → logprob: -2.953791618347168
    7. 'values' → logprob: -3.328791618347168
    8. '(' → logprob: -3.453791618347168
    9. '_' → logprob: -3.703791618347168
    10. 'input' → logprob: -4.328791618347168

Token 19: ' lit' (ID: 11980)
  Prédit: 'user'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'user' → logprob: -1.6561795473098755
    2. 'v' → logprob: -1.9061795473098755
    3. 'val' → logprob: -1.9061795473098755
    4. 'value' → logprob: -2.281179428100586
    5. '(' → logprob: -2.656179428100586
    6. 'input' → logprob: -2.781179428100586
    7. ' ' → logprob: -3.031179428100586
    8. '.' → logprob: -3.156179428100586
    9. 's' → logprob: -4.031179428100586
    10. '"' → logprob: -4.156179428100586

Token 20: ' la' (ID: 557)
  Prédit: ' une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.2983241677284241
    2. ' la' → logprob: -1.7983241081237793
    3. '()' → logprob: -3.5483241081237793
    4. 'une' → logprob: -3.7983241081237793
    5. ' ' → logprob: -4.548324108123779
    6. ' ' → logprob: -4.673324108123779
    7. ' l' → logprob: -4.798324108123779
    8. ' deux' → logprob: -5.673324108123779
    9. ' les' → logprob: -6.548324108123779
    10. ' un' → logprob: -6.673324108123779

Token 21: ' sais' (ID: 30010)
  Prédit: ' chaîne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' chaîne' → logprob: -0.4096709191799164
    2. ' ligne' → logprob: -1.6596709489822388
    3. 'chaine' → logprob: -3.034670829772949
    4. 'ligne' → logprob: -3.284670829772949
    5. 's' → logprob: -3.784670829772949
    6. ' chaine' → logprob: -4.659670829772949
    7. ' valeur' → logprob: -4.784670829772949
    8. ' ' → logprob: -5.034670829772949
    9. 'cha' → logprob: -5.659670829772949
    10. 'val' → logprob: -6.284670829772949

Token 22: 'ie' (ID: 396)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.36822348833084106
    2. 'e' → logprob: -1.3682234287261963
    3. 'es' → logprob: -3.4932234287261963
    4. 'ie' → logprob: -4.493223667144775
    5. 'sie' → logprob: -4.868223667144775
    6. 't' → logprob: -6.243223667144775
    7. 'ss' → logprob: -6.993223667144775
    8. 'i' → logprob: -8.368223190307617
    9. 'se' → logprob: -8.368223190307617
    10. '#' → logprob: -8.743223190307617

Token 23: ' de' (ID: 334)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.05350203439593315
    2. ',' → logprob: -4.678502082824707
    3. 's' → logprob: -4.678502082824707
    4. ' ,' → logprob: -4.678502082824707
    5. '.' → logprob: -5.928502082824707
    6. ''' → logprob: -5.928502082824707
    7. ' )' → logprob: -5.928502082824707
    8. '_' → logprob: -6.053502082824707
    9. ' d' → logprob: -6.303502082824707
    10. 'es' → logprob: -6.678502082824707

Token 24: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.04378199204802513
    2. ' l' → logprob: -3.1687819957733154
    3. 'util' → logprob: -7.918781757354736
    4. ''utilisateur' → logprob: -8.793782234191895
    5. '	l' → logprob: -9.668782234191895
    6. ' ' → logprob: -10.043782234191895
    7. 'user' → logprob: -10.043782234191895
    8. 's' → logprob: -10.793782234191895
    9. '_l' → logprob: -10.918782234191895
    10. '’utilisateur' → logprob: -11.668782234191895

Token 25: ''utilisateur' (ID: 140803)
  Prédit: ''utilisateur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''utilisateur' → logprob: -0.009864339604973793
    2. ''' → logprob: -5.384864330291748
    3. 'util' → logprob: -5.884864330291748
    4. 'u' → logprob: -7.009864330291748
    5. '’utilisateur' → logprob: -7.009864330291748
    6. ''util' → logprob: -7.884864330291748
    7. 'a' → logprob: -9.509864807128906
    8. ' utilisateur' → logprob: -9.884864807128906
    9. ''us' → logprob: -10.884864807128906
    10. ''u' → logprob: -10.884864807128906

Token 26: ' sous' (ID: 14487)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -1.4314184188842773
    2. 'x' → logprob: -1.5564184188842773
    3. ' ' → logprob: -1.9314184188842773
    4. 'a' → logprob: -2.0564184188842773
    5. 'val' → logprob: -2.1814184188842773
    6. 'u' → logprob: -3.5564184188842773
    7. 's' → logprob: -4.056418418884277
    8. ' x' → logprob: -4.306418418884277
    9. ' )' → logprob: -4.431418418884277
    10. ',' → logprob: -4.556418418884277

Token 27: ' forme' (ID: 27450)
  Prédit: ' forme'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' forme' → logprob: -0.02682640217244625
    2. 'forme' → logprob: -3.6518263816833496
    3. 'form' → logprob: -7.90182638168335
    4. 'chaine' → logprob: -9.651826858520508
    5. 'forma' → logprob: -10.276826858520508
    6. ' form' → logprob: -10.776826858520508
    7. 'la' → logprob: -11.276826858520508
    8. ' la' → logprob: -11.901826858520508
    9. 'ent' → logprob: -12.776826858520508
    10. ' forma' → logprob: -12.901826858520508

Token 28: ' de' (ID: 334)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.0016532829031348228
    2. 'd' → logprob: -6.62665319442749
    3. ' de' → logprob: -8.376653671264648
    4. 's' → logprob: -9.501653671264648
    5. 'str' → logprob: -11.751653671264648
    6. 'de' → logprob: -12.376653671264648
    7. ' ' → logprob: -12.626653671264648
    8. 'string' → logprob: -13.751653671264648
    9. ' string' → logprob: -14.001653671264648
    10. ' s' → logprob: -14.501653671264648

Token 29: ' chaîne' (ID: 89288)
  Prédit: 'chaine'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'chaine' → logprob: -0.0822770819067955
    2. 'cha' → logprob: -3.0822770595550537
    3. ' chaîne' → logprob: -3.5822770595550537
    4. 'string' → logprob: -6.207277297973633
    5. 'texte' → logprob: -6.582277297973633
    6. 'str' → logprob: -6.832277297973633
    7. ' chaine' → logprob: -7.957277297973633
    8. 'une' → logprob: -8.207277297973633
    9. 'chain' → logprob: -9.082277297973633
    10. 's' → logprob: -10.332277297973633

Token 30: ' de' (ID: 334)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.8649886250495911
    2. 's' → logprob: -1.7399885654449463
    3. 'v' → logprob: -1.9899885654449463
    4. 'x' → logprob: -2.6149885654449463
    5. 'val' → logprob: -3.1149885654449463
    6. ' ' → logprob: -3.7399885654449463
    7. 'a' → logprob: -3.9899885654449463
    8. '.' → logprob: -4.114988803863525
    9. ' )' → logprob: -4.489988803863525
    10. 'n' → logprob: -4.614988803863525

Token 31: ' caractères' (ID: 183106)
  Prédit: 'car'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'car' → logprob: -0.08927532285451889
    2. ' caractères' → logprob: -2.464275360107422
    3. 'texte' → logprob: -8.589275360107422
    4. ' caracteres' → logprob: -9.839275360107422
    5. ' caract' → logprob: -10.089275360107422
    6. '#' → logprob: -10.714275360107422
    7. ' caractère' → logprob: -11.339275360107422
    8. ' ' → logprob: -11.839275360107422
    9. 'c' → logprob: -13.214275360107422
    10. 'chaine' → logprob: -13.339275360107422

Token 32: ' (' (ID: 350)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.24179865419864655
    2. 's' → logprob: -2.9917986392974854
    3. 'x' → logprob: -2.9917986392974854
    4. 'n' → logprob: -3.2417986392974854
    5. 'val' → logprob: -3.9917986392974854
    6. ',' → logprob: -4.3667988777160645
    7. 'u' → logprob: -4.6167988777160645
    8. 'a' → logprob: -4.8667988777160645
    9. 'e' → logprob: -5.3667988777160645
    10. 'i' → logprob: -5.7417988777160645

Token 33: 'string' (ID: 1655)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.035198502242565155
    2. ' )' → logprob: -3.410198450088501
    3. ').' → logprob: -7.28519868850708
    4. '),' → logprob: -8.535198211669922
    5. 'string' → logprob: -9.035198211669922
    6. ',' → logprob: -9.035198211669922
    7. 's' → logprob: -10.160198211669922
    8. ' et' → logprob: -10.160198211669922
    9. '')' → logprob: -10.535198211669922
    10. ')s' → logprob: -10.535198211669922

Token 34: ').
' (ID: 6294)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0006236801855266094
    2. ' )' → logprob: -7.75062370300293
    3. ').' → logprob: -9.62562370300293
    4. ',' → logprob: -10.50062370300293
    5. '#' → logprob: -10.75062370300293
    6. ')#' → logprob: -11.00062370300293
    7. 's' → logprob: -11.62562370300293
    8. '')' → logprob: -11.75062370300293
    9. '`)' → logprob: -11.75062370300293
    10. ')`' → logprob: -12.37562370300293

Token 35: '#' (ID: 2)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'val' → logprob: -1.0406612157821655
    2. 'v' → logprob: -1.4156612157821655
    3. 'x' → logprob: -1.6656612157821655
    4. 'a' → logprob: -2.040661334991455
    5. 'n' → logprob: -3.040661334991455
    6. 's' → logprob: -4.415661334991455
    7. '```' → logprob: -4.915661334991455
    8. 'values' → logprob: -5.665661334991455
    9. 'value' → logprob: -5.790661334991455
    10. 'user' → logprob: -5.915661334991455

Token 36: ' split' (ID: 12648)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.7601200342178345
    2. 'v' → logprob: -1.6351200342178345
    3. 'a' → logprob: -2.260119915008545
    4. 'x' → logprob: -2.385119915008545
    5. 's' → logprob: -2.885119915008545
    6. 'n' → logprob: -3.760119915008545
    7. 'values' → logprob: -4.385119915008545
    8. 'value' → logprob: -4.885119915008545
    9. '#' → logprob: -4.885119915008545
    10. 'u' → logprob: -5.010119915008545

Token 37: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.025247611105442047
    2. '(' → logprob: -3.900247573852539
    3. '('' → logprob: -5.400247573852539
    4. '("' → logprob: -9.025247573852539
    5. ' ()' → logprob: -11.525247573852539
    6. '().' → logprob: -11.900247573852539
    7. '("("' → logprob: -12.025247573852539
    8. '()]' → logprob: -12.275247573852539
    9. '(',' → logprob: -12.525247573852539
    10. '('.')' → logprob: -12.775247573852539

Token 38: ' sé' (ID: 7462)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7391678094863892
    2. '()' → logprob: -0.7391678094863892
    3. '('' → logprob: -3.7391676902770996
    4. '<|end|>' → logprob: -4.9891676902771
    5. ')' → logprob: -5.6141676902771
    6. ''' → logprob: -5.8641676902771
    7. ' (' → logprob: -7.1141676902771
    8. ' ()' → logprob: -7.1141676902771
    9. '("' → logprob: -7.2391676902771
    10. '#' → logprob: -7.4891676902771

Token 39: 'pare' (ID: 6900)
  Prédit: 'pare'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pare' → logprob: -0.0002835040504578501
    2. 'par' → logprob: -8.500283241271973
    3. 'parent' → logprob: -10.750283241271973
    4. 'p' → logprob: -10.750283241271973
    5. 'parer' → logprob: -11.000283241271973
    6. 'pa' → logprob: -12.250283241271973
    7. 'paration' → logprob: -12.375283241271973
    8. 'para' → logprob: -12.875283241271973
    9. 'paren' → logprob: -13.375283241271973
    10. 'pares' → logprob: -13.750283241271973

Token 40: ' cette' (ID: 7696)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6745114326477051
    2. '('' → logprob: -1.174511432647705
    3. '()' → logprob: -1.924511432647705
    4. ''' → logprob: -4.049511432647705
    5. ' la' → logprob: -5.549511432647705
    6. 'l' → logprob: -5.674511432647705
    7. ' ' → logprob: -5.799511432647705
    8. '("' → logprob: -6.424511432647705
    9. 'la' → logprob: -6.424511432647705
    10. ' (' → logprob: -7.174511432647705

Token 41: ' chaîne' (ID: 89288)
  Prédit: ' chaîne'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaîne' → logprob: -0.018024682998657227
    2. ' chaine' → logprob: -5.018024444580078
    3. 's' → logprob: -5.893024444580078
    4. ' string' → logprob: -6.018024444580078
    5. 'chaine' → logprob: -6.143024444580078
    6. ' ' → logprob: -7.143024444580078
    7. ' ligne' → logprob: -7.393024444580078
    8. ' ' → logprob: -7.768024444580078
    9. ' phrase' → logprob: -8.143024444580078
    10. ' chaînes' → logprob: -8.268024444580078

Token 42: ' en' (ID: 469)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7586624622344971
    2. '()' → logprob: -1.258662462234497
    3. '('' → logprob: -2.258662462234497
    4. '[' → logprob: -2.383662462234497
    5. ' (' → logprob: -4.633662223815918
    6. ')' → logprob: -4.883662223815918
    7. ''' → logprob: -5.008662223815918
    8. 's' → logprob: -5.508662223815918
    9. ' ' → logprob: -5.758662223815918
    10. '"' → logprob: -5.883662223815918

Token 43: ' une' (ID: 2463)
  Prédit: ' une'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.7712714076042175
    2. 'une' → logprob: -1.3962714672088623
    3. ' un' → logprob: -2.6462714672088623
    4. 'un' → logprob: -2.7712714672088623
    5. ' ' → logprob: -3.1462714672088623
    6. ' espaces' → logprob: -3.3962714672088623
    7. ' des' → logprob: -4.396271228790283
    8. ' ' → logprob: -4.521271228790283
    9. 'des' → logprob: -5.021271228790283
    10. ''une' → logprob: -5.271271228790283

Token 44: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.5812057256698608
    2. 'liste' → logprob: -0.8312057256698608
    3. 'list' → logprob: -5.58120584487915
    4. 's' → logprob: -7.20620584487915
    5. ' list' → logprob: -8.331205368041992
    6. 'ou' → logprob: -9.081205368041992
    7. 'Liste' → logprob: -10.081205368041992
    8. ' ' → logprob: -10.081205368041992
    9. ' ou' → logprob: -10.206205368041992
    10. ' listes' → logprob: -10.581205368041992

Token 45: ' de' (ID: 334)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.9085302948951721
    2. ',' → logprob: -1.9085302352905273
    3. 'tokens' → logprob: -2.7835302352905273
    4. ' =' → logprob: -2.9085302352905273
    5. '```' → logprob: -3.1585302352905273
    6. ')' → logprob: -3.2835302352905273
    7. 's' → logprob: -3.4085302352905273
    8. 'input' → logprob: -3.5335302352905273
    9. '[]' → logprob: -3.7835302352905273
    10. '[:]' → logprob: -3.7835302352905273

Token 46: ' deux' (ID: 10301)
  Prédit: ' chaînes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaînes' → logprob: -0.46719515323638916
    2. 'cha' → logprob: -2.3421950340270996
    3. 'm' → logprob: -2.4671950340270996
    4. 'de' → logprob: -2.5921950340270996
    5. ' deux' → logprob: -3.5921950340270996
    6. 'chain' → logprob: -3.5921950340270996
    7. 'strings' → logprob: -3.9671950340270996
    8. ' mots' → logprob: -4.0921950340271
    9. 'tokens' → logprob: -4.8421950340271
    10. '2' → logprob: -5.8421950340271

Token 47: ' éléments' (ID: 57375)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.8162540197372437
    2. 'élé' → logprob: -0.9412540197372437
    3. ' éléments' → logprob: -2.316254138946533
    4. ' chaînes' → logprob: -3.691254138946533
    5. ' valeurs' → logprob: -4.191254138946533
    6. 'tokens' → logprob: -4.691254138946533
    7. ' val' → logprob: -5.691254138946533
    8. 'strings' → logprob: -5.816254138946533
    9. ' tokens' → logprob: -5.816254138946533
    10. ' mots' → logprob: -5.816254138946533

Token 48: ' grâce' (ID: 31589)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -1.1181343793869019
    2. 'n' → logprob: -1.4931343793869019
    3. ',' → logprob: -1.8681343793869019
    4. 'x' → logprob: -2.3681344985961914
    5. 'a' → logprob: -2.6181344985961914
    6. 'val' → logprob: -2.8681344985961914
    7. 's' → logprob: -4.368134498596191
    8. '[' → logprob: -4.743134498596191
    9. '=' → logprob: -5.118134498596191
    10. 'values' → logprob: -5.243134498596191

Token 49: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.26814860105514526
    2. '=' → logprob: -2.51814866065979
    3. 'au' → logprob: -2.51814866065979
    4. 'à' → logprob: -3.14314866065979
    5. ' au' → logprob: -3.76814866065979
    6. ''à' → logprob: -5.393148422241211
    7. ' ' → logprob: -7.018148422241211
    8. ' =' → logprob: -7.768148422241211
    9. 's' → logprob: -7.768148422241211
    10. '’à' → logprob: -7.893148422241211

Token 50: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.6219873428344727
    2. ''' → logprob: -1.1219873428344727
    3. ' l' → logprob: -2.2469873428344727
    4. 'la' → logprob: -4.746987342834473
    5. '"' → logprob: -4.871987342834473
    6. ' ' → logprob: -5.496987342834473
    7. ''l' → logprob: -5.871987342834473
    8. ' la' → logprob: -6.121987342834473
    9. ''un' → logprob: -6.496987342834473
    10. ' ' → logprob: -6.746987342834473

Token 51: ''espace' (ID: 118124)
  Prédit: ''espace'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''espace' → logprob: -0.3998328745365143
    2. ''' → logprob: -1.274832844734192
    3. 'a' → logprob: -3.5248329639434814
    4. 'e' → logprob: -4.149832725524902
    5. 'es' → logprob: -6.149832725524902
    6. ''esp' → logprob: -6.774832725524902
    7. '’espace' → logprob: -7.649832725524902
    8. ''a' → logprob: -8.524832725524902
    9. ''utilisateur' → logprob: -9.149832725524902
    10. 'u' → logprob: -9.274832725524902

Token 52: ' ("' (ID: 7109)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -1.4045153856277466
    2. 'a' → logprob: -1.5295153856277466
    3. 'x' → logprob: -1.5295153856277466
    4. 'n' → logprob: -1.5295153856277466
    5. 'val' → logprob: -2.779515266418457
    6. ',' → logprob: -4.654515266418457
    7. 'u' → logprob: -5.279515266418457
    8. 'values' → logprob: -5.404515266418457
    9. 's' → logprob: -5.654515266418457
    10. '[' → logprob: -5.779515266418457

Token 53: ' ")' (ID: 25221)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.1584266573190689
    2. ' ")' → logprob: -2.1584267616271973
    3. ')' → logprob: -3.6584267616271973
    4. '"' → logprob: -5.408426761627197
    5. ' )' → logprob: -8.408426284790039
    6. '").' → logprob: -8.533426284790039
    7. '')' → logprob: -8.783426284790039
    8. ' ").' → logprob: -9.658426284790039
    9. ''' → logprob: -10.408426284790039
    10. ' "' → logprob: -10.908426284790039

Token 54: ' comme' (ID: 7971)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.8564234972000122
    2. 'x' → logprob: -1.4814234972000122
    3. 'val' → logprob: -2.2314233779907227
    4. 'n' → logprob: -2.3564233779907227
    5. 'a' → logprob: -3.2314233779907227
    6. ',' → logprob: -3.3564233779907227
    7. 'u' → logprob: -4.106423377990723
    8. 'user' → logprob: -4.231423377990723
    9. 's' → logprob: -4.856423377990723
    10. 'values' → logprob: -5.106423377990723

Token 55: ' sépar' (ID: 97160)
  Prédit: ' sépar'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sépar' → logprob: -0.1387023776769638
    2. 'delimiter' → logprob: -3.263702392578125
    3. 'dé' → logprob: -3.513702392578125
    4. 'sé' → logprob: -3.763702392578125
    5. 's' → logprob: -4.638702392578125
    6. 'se' → logprob: -5.013702392578125
    7. ' dé' → logprob: -5.138702392578125
    8. 'del' → logprob: -5.388702392578125
    9. 'sep' → logprob: -5.888702392578125
    10. '...' → logprob: -6.888702392578125

Token 56: 'ateur' (ID: 12477)
  Prédit: 'ateur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ateur' → logprob: -0.028218310326337814
    2. 'ate' → logprob: -3.6532182693481445
    3. 'ation' → logprob: -7.2782182693481445
    4. 'a' → logprob: -7.6532182693481445
    5. 'ator' → logprob: -8.028218269348145
    6. 'atrice' → logprob: -9.653218269348145
    7. 'ateurs' → logprob: -9.778218269348145
    8. '```' → logprob: -9.903218269348145
    9. 'par' → logprob: -10.153218269348145
    10. 'e' → logprob: -10.278218269348145

Token 57: '.
' (ID: 558)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.8209208846092224
    2. 'x' → logprob: -1.5709209442138672
    3. 'a' → logprob: -1.6959209442138672
    4. 'n' → logprob: -2.820920944213867
    5. 'v' → logprob: -2.820920944213867
    6. 'values' → logprob: -4.195920944213867
    7. ',' → logprob: -4.320920944213867
    8. 'value' → logprob: -5.820920944213867
    9. 's' → logprob: -6.195920944213867
    10. '```' → logprob: -6.445920944213867

Token 58: '#' (ID: 2)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.6551994681358337
    2. 'a' → logprob: -1.6551995277404785
    3. 'x' → logprob: -1.6551995277404785
    4. 'v' → logprob: -3.1551995277404785
    5. 'n' → logprob: -3.7801995277404785
    6. 'values' → logprob: -4.0301995277404785
    7. 'vals' → logprob: -5.7801995277404785
    8. 'value' → logprob: -6.0301995277404785
    9. 'user' → logprob: -6.0301995277404785
    10. '```' → logprob: -6.0301995277404785

Token 59: ' map' (ID: 4014)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.41984954476356506
    2. 'a' → logprob: -1.4198495149612427
    3. 'x' → logprob: -2.9198496341705322
    4. 'values' → logprob: -3.6698496341705322
    5. 'v' → logprob: -5.169849395751953
    6. 'n' → logprob: -5.544849395751953
    7. ' valeurs' → logprob: -5.669849395751953
    8. 'value' → logprob: -6.169849395751953
    9. 'vals' → logprob: -6.419849395751953
    10. '```' → logprob: -7.169849395751953

Token 60: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.027011943981051445
    2. '(int' → logprob: -3.7770118713378906
    3. '(lambda' → logprob: -5.652011871337891
    4. '(str' → logprob: -9.27701187133789
    5. '(float' → logprob: -9.27701187133789
    6. '(
' → logprob: -10.27701187133789
    7. '(list' → logprob: -11.52701187133789
    8. 'int' → logprob: -12.15201187133789
    9. '()' → logprob: -13.27701187133789
    10. '(f' → logprob: -13.77701187133789

Token 61: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.062383171170949936
    2. ',' → logprob: -2.8123831748962402
    3. ',)' → logprob: -9.437382698059082
    4. ' )' → logprob: -9.687382698059082
    5. ',input' → logprob: -10.312382698059082
    6. '(' → logprob: -10.937382698059082
    7. '),' → logprob: -10.937382698059082
    8. '`)' → logprob: -10.937382698059082
    9. '#' → logprob: -11.062382698059082
    10. ' ,' → logprob: -11.062382698059082

Token 62: ' ...)' (ID: 100545)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.5444386005401611
    2. 'input' → logprob: -1.0444386005401611
    3. ')' → logprob: -2.794438600540161
    4. ' )' → logprob: -5.419438362121582
    5. ' user' → logprob: -7.044438362121582
    6. 'user' → logprob: -7.169438362121582
    7. '...)' → logprob: -8.419438362121582
    8. '...' → logprob: -9.794438362121582
    9. '(input' → logprob: -9.919438362121582
    10. ' inputs' → logprob: -10.169438362121582

Token 63: ' applique' (ID: 180579)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.035975951701402664
    2. '(' → logprob: -4.660975933074951
    3. '(values' → logprob: -5.410975933074951
    4. 'user' → logprob: -5.535975933074951
    5. ' )' → logprob: -5.910975933074951
    6. 'values' → logprob: -5.910975933074951
    7. 'convert' → logprob: -6.285975933074951
    8. '()' → logprob: -6.660975933074951
    9. 's' → logprob: -7.035975933074951
    10. 'input' → logprob: -7.160975933074951

Token 64: ' la' (ID: 557)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.03831939026713371
    2. 'int' → logprob: -3.6633193492889404
    3. '(lambda' → logprob: -5.1633195877075195
    4. '(' → logprob: -5.6633195877075195
    5. ' int' → logprob: -6.4133195877075195
    6. 'la' → logprob: -8.16331958770752
    7. '=int' → logprob: -8.41331958770752
    8. ' la' → logprob: -8.66331958770752
    9. '<int' → logprob: -9.53831958770752
    10. '()' → logprob: -9.53831958770752

Token 65: ' fonction' (ID: 17610)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.4218198359012604
    2. ' int' → logprob: -1.671819806098938
    3. 'fonction' → logprob: -1.921819806098938
    4. ' fonction' → logprob: -5.046819686889648
    5. ' function' → logprob: -6.046819686889648
    6. 'function' → logprob: -7.546819686889648
    7. 'convert' → logprob: -9.296819686889648
    8. ' conversion' → logprob: -9.421819686889648
    9. 'split' → logprob: -10.046819686889648
    10. 'ent' → logprob: -10.046819686889648

Token 66: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.387246310710907
    2. 'int' → logprob: -1.1372463703155518
    3. '(int' → logprob: -8.012246131896973
    4. '<int' → logprob: -11.262246131896973
    5. '```' → logprob: -11.512246131896973
    6. '=int' → logprob: -11.762246131896973
    7. ' ' → logprob: -12.512246131896973
    8. '	int' → logprob: -12.887246131896973
    9. ' `' → logprob: -13.262246131896973
    10. '[int' → logprob: -13.762246131896973

Token 67: '()' (ID: 416)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.15427207946777344
    2. '(' → logprob: -2.2792720794677734
    3. '()' → logprob: -3.6542720794677734
    4. 'sur' → logprob: -5.154272079467773
    5. ' )' → logprob: -6.404272079467773
    6. 's' → logprob: -6.404272079467773
    7. '(lambda' → logprob: -6.529272079467773
    8. '(s' → logprob: -7.529272079467773
    9. '(aux' → logprob: -7.529272079467773
    10. ' aux' → logprob: -7.904272079467773

Token 68: ' à' (ID: 1221)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.15263880789279938
    2. ' aux' → logprob: -2.9026389122009277
    3. '(' → logprob: -3.4026389122009277
    4. 'sur' → logprob: -4.027638912200928
    5. '()' → logprob: -4.402638912200928
    6. ' à' → logprob: -4.902638912200928
    7. ' sur' → logprob: -5.027638912200928
    8. '(aux' → logprob: -5.902638912200928
    9. ' )' → logprob: -6.402638912200928
    10. 'aux' → logprob: -6.527638912200928

Token 69: ' chaque' (ID: 21194)
  Prédit: 'cha'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cha' → logprob: -0.8010072708129883
    2. ' chaque' → logprob: -0.8010072708129883
    3. ' chacun' → logprob: -2.9260072708129883
    4. 'ch' → logprob: -3.9260072708129883
    5. ' chacune' → logprob: -3.9260072708129883
    6. ' cha' → logprob: -5.676007270812988
    7. ' each' → logprob: -6.051007270812988
    8. ' la' → logprob: -7.426007270812988
    9. ' ch' → logprob: -7.426007270812988
    10. 'each' → logprob: -7.426007270812988

Token 70: ' élément' (ID: 99627)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.004637673031538725
    2. ' élément' → logprob: -5.379637718200684
    3. 'él' → logprob: -12.379637718200684
    4. 'val' → logprob: -12.504637718200684
    5. 'element' → logprob: -12.879637718200684
    6. ' valeur' → logprob: -13.004637718200684
    7. 'é' → logprob: -13.254637718200684
    8. ' él' → logprob: -14.129637718200684
    9. ' éléments' → logprob: -14.254637718200684
    10. ' element' → logprob: -14.379637718200684

Token 71: ' de' (ID: 334)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08147921413183212
    2. '(' → logprob: -2.70647931098938
    3. ' )' → logprob: -5.456479072570801
    4. ' de' → logprob: -6.206479072570801
    5. 's' → logprob: -6.956479072570801
    6. '(s' → logprob: -7.206479072570801
    7. ',' → logprob: -7.331479072570801
    8. '(
' → logprob: -7.581479072570801
    9. '()' → logprob: -7.581479072570801
    10. ' (' → logprob: -7.831479072570801

Token 72: ' cette' (ID: 7696)
  Prédit: 'la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'la' → logprob: -0.2313402146100998
    2. ' la' → logprob: -1.6063401699066162
    3. 'l' → logprob: -5.231340408325195
    4. ' cette' → logprob: -7.981340408325195
    5. ' l' → logprob: -9.356340408325195
    6. 'a' → logprob: -10.856340408325195
    7. '#' → logprob: -11.231340408325195
    8. 'lam' → logprob: -11.356340408325195
    9. 'the' → logprob: -11.481340408325195
    10. '```' → logprob: -11.481340408325195

Token 73: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.04306621477007866
    2. 'liste' → logprob: -3.1680662631988525
    3. 'list' → logprob: -10.293066024780273
    4. ' list' → logprob: -11.293066024780273
    5. 's' → logprob: -12.043066024780273
    6. 'Liste' → logprob: -13.043066024780273
    7. ' chaîne' → logprob: -13.418066024780273
    8. ' Liste' → logprob: -13.418066024780273
    9. ' ' → logprob: -13.793066024780273
    10. ' ligne' → logprob: -14.043066024780273

Token 74: ' pour' (ID: 1930)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.009842146188020706
    2. ' )' → logprob: -6.0098419189453125
    3. ',' → logprob: -6.8848419189453125
    4. 'val' → logprob: -7.0098419189453125
    5. 'x' → logprob: -7.2598419189453125
    6. ').' → logprob: -7.2598419189453125
    7. 'a' → logprob: -7.5098419189453125
    8. 's' → logprob: -7.7598419189453125
    9. ')
' → logprob: -7.8848419189453125
    10. '),' → logprob: -8.384841918945312

Token 75: ' les' (ID: 1341)
  Prédit: ' convertir'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' convertir' → logprob: -0.27370485663414
    2. ' les' → logprob: -1.6487048864364624
    3. ' transformer' → logprob: -4.148705005645752
    4. ' obtenir' → logprob: -4.398705005645752
    5. 'convert' → logprob: -5.023705005645752
    6. 'les' → logprob: -5.023705005645752
    7. 'transform' → logprob: -5.648705005645752
    8. 'ob' → logprob: -6.898705005645752
    9. ' convert' → logprob: -7.148705005645752
    10. '#' → logprob: -8.648704528808594

Token 76: ' convertir' (ID: 79223)
  Prédit: ' convertir'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' convertir' → logprob: -0.29374006390571594
    2. ' transformer' → logprob: -1.9187400341033936
    3. 'transform' → logprob: -2.6687400341033936
    4. 'convert' → logprob: -3.2937400341033936
    5. ' convert' → logprob: -7.168740272521973
    6. 'con' → logprob: -8.043740272521973
    7. 'converter' → logprob: -10.418740272521973
    8. 'r' → logprob: -10.668740272521973
    9. 'trans' → logprob: -10.918740272521973
    10. ' Transformer' → logprob: -11.043740272521973

Token 77: ' en' (ID: 469)
  Prédit: ' en'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.006596597842872143
    2. 'en' → logprob: -5.381596565246582
    3. ')' → logprob: -6.881596565246582
    4. ' à' → logprob: -7.756596565246582
    5. ' )' → logprob: -9.506596565246582
    6. ' au' → logprob: -9.631596565246582
    7. ' aux' → logprob: -9.631596565246582
    8. ' in' → logprob: -9.756596565246582
    9. ' into' → logprob: -10.256596565246582
    10. ',' → logprob: -10.381596565246582

Token 78: ' ent' (ID: 1121)
  Prédit: 'ent'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ent' → logprob: -0.5776840448379517
    2. ' ent' → logprob: -1.2026840448379517
    3. ' nombres' → logprob: -2.327683925628662
    4. ' entier' → logprob: -3.452683925628662
    5. ' integers' → logprob: -5.202683925628662
    6. ' int' → logprob: -7.077683925628662
    7. ' deux' → logprob: -7.452683925628662
    8. ' nombre' → logprob: -7.577683925628662
    9. ' des' → logprob: -7.577683925628662
    10. ' ' → logprob: -8.07768440246582

Token 79: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.0005398084758780897
    2. 'i' → logprob: -7.875539779663086
    3. 'ières' → logprob: -8.875539779663086
    4. 'ier' → logprob: -11.125539779663086
    5. '```' → logprob: -13.250539779663086
    6. 'ière' → logprob: -13.500539779663086
    7. '#' → logprob: -14.500539779663086
    8. '   ' → logprob: -15.000539779663086
    9. 'ires' → logprob: -15.125539779663086
    10. 'ers' → logprob: -15.625539779663086

Token 80: '.
' (ID: 558)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.47202640771865845
    2. 'x' → logprob: -1.8470263481140137
    3. 'val' → logprob: -1.9720263481140137
    4. ':' → logprob: -3.8470263481140137
    5. 'v' → logprob: -4.347026348114014
    6. '```' → logprob: -4.472026348114014
    7. 'n' → logprob: -4.722026348114014
    8. ' a' → logprob: -5.222026348114014
    9. ',' → logprob: -5.847026348114014
    10. ')' → logprob: -5.972026348114014

Token 81: '#' (ID: 2)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.2789434790611267
    2. 'x' → logprob: -1.5289435386657715
    3. 'val' → logprob: -3.9039435386657715
    4. 'v' → logprob: -6.4039435386657715
    5. '```' → logprob: -6.5289435386657715
    6. ' a' → logprob: -6.6539435386657715
    7. 'n' → logprob: -6.7789435386657715
    8. ' x' → logprob: -7.9039435386657715
    9. 'A' → logprob: -9.528943061828613
    10. 'var' → logprob: -9.903943061828613

Token 82: ' Enfin' (ID: 85274)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.16357597708702087
    2. 'x' → logprob: -2.7885758876800537
    3. 'val' → logprob: -3.0385758876800537
    4. ' a' → logprob: -3.5385758876800537
    5. ' x' → logprob: -5.038576126098633
    6. 'values' → logprob: -6.163576126098633
    7. ' val' → logprob: -6.788576126098633
    8. ' valeurs' → logprob: -7.163576126098633
    9. 'value' → logprob: -8.413576126098633
    10. 'ent' → logprob: -8.413576126098633

Token 83: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.176279678940773
    2. 'x' → logprob: -3.0512797832489014
    3. ' x' → logprob: -3.1762797832489014
    4. 'a' → logprob: -3.4262797832489014
    5. 'val' → logprob: -4.676279544830322
    6. ' ,' → logprob: -4.926279544830322
    7. ' a' → logprob: -5.176279544830322
    8. 's' → logprob: -5.301279544830322
    9. 'result' → logprob: -5.801279544830322
    10. 'values' → logprob: -6.551279544830322

Token 84: ' les' (ID: 1341)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.0928872600197792
    2. ' a' → logprob: -3.0928871631622314
    3. 'x' → logprob: -3.8428871631622314
    4. 'val' → logprob: -3.9678871631622314
    5. ' x' → logprob: -6.3428874015808105
    6. ' val' → logprob: -7.8428874015808105
    7. 'values' → logprob: -9.217886924743652
    8. ' valeurs' → logprob: -9.342886924743652
    9. ' valeur' → logprob: -9.842886924743652
    10. 'value' → logprob: -9.842886924743652

Token 85: ' deux' (ID: 10301)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.8186005353927612
    2. 'val' → logprob: -1.8186005353927612
    3. ' valeurs' → logprob: -2.068600654602051
    4. ' a' → logprob: -2.193600654602051
    5. ' deux' → logprob: -2.568600654602051
    6. 'de' → logprob: -3.443600654602051
    7. 'x' → logprob: -4.068600654602051
    8. 'ent' → logprob: -4.068600654602051
    9. ' x' → logprob: -5.943600654602051
    10. 'n' → logprob: -5.943600654602051

Token 86: ' ent' (ID: 1121)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.6322190165519714
    2. ' valeurs' → logprob: -1.1322190761566162
    3. ' nombres' → logprob: -2.882219076156616
    4. 'ent' → logprob: -3.507219076156616
    5. ' ent' → logprob: -4.132218837738037
    6. 'a' → logprob: -4.632218837738037
    7. 'values' → logprob: -4.632218837738037
    8. 'n' → logprob: -5.007218837738037
    9. 'nombre' → logprob: -5.007218837738037
    10. 'x' → logprob: -6.007218837738037

Token 87: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.0033167421352118254
    2. 'i' → logprob: -6.503316879272461
    3. 'ières' → logprob: -6.628316879272461
    4. 'ier' → logprob: -8.503316879272461
    5. 't' → logprob: -9.378316879272461
    6. 'r' → logprob: -9.378316879272461
    7. 'ités' → logprob: -10.378316879272461
    8. 'ires' → logprob: -10.628316879272461
    9. 'ié' → logprob: -11.128316879272461
    10. '```' → logprob: -11.378316879272461

Token 88: ' sont' (ID: 5242)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.3598531186580658
    2. ' a' → logprob: -1.3598531484603882
    3. 'x' → logprob: -3.9848530292510986
    4. ' x' → logprob: -5.234853267669678
    5. ' =' → logprob: -5.484853267669678
    6. ' ' → logprob: -5.609853267669678
    7. ',' → logprob: -5.734853267669678
    8. 's' → logprob: -5.859853267669678
    9. ' sont' → logprob: -6.484853267669678
    10. 'n' → logprob: -6.734853267669678

Token 89: ' stock' (ID: 6546)
  Prédit: ' affect'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' affect' → logprob: -0.673846423625946
    2. ' assign' → logprob: -1.6738464832305908
    3. ' stock' → logprob: -1.7988464832305908
    4. ' attrib' → logprob: -3.048846483230591
    5. ' unpack' → logprob: -3.548846483230591
    6. 'assign' → logprob: -3.673846483230591
    7. ' assigned' → logprob: -4.548846244812012
    8. ' retourn' → logprob: -5.173846244812012
    9. ' a' → logprob: -5.673846244812012
    10. ' récup' → logprob: -5.673846244812012

Token 90: 'és' (ID: 1756)
  Prédit: 'és'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'és' → logprob: -0.25576773285865784
    2. 'é' → logprob: -1.5057677030563354
    3. 'ées' → logprob: -5.630767822265625
    4. 'ée' → logprob: -8.380767822265625
    5. 'ès' → logprob: -11.630767822265625
    6. 'es' → logprob: -12.505767822265625
    7. 'u' → logprob: -14.005767822265625
    8. ' é' → logprob: -14.255767822265625
    9. 'e' → logprob: -14.755767822265625
    10. 'è' → logprob: -15.255767822265625

Token 91: ' dans' (ID: 2671)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.3775624632835388
    2. ' a' → logprob: -1.5025625228881836
    3. 'x' → logprob: -2.8775625228881836
    4. ' x' → logprob: -4.252562522888184
    5. ',' → logprob: -4.752562522888184
    6. 'n' → logprob: -4.752562522888184
    7. '(a' → logprob: -7.252562522888184
    8. 'val' → logprob: -7.752562522888184
    9. 'v' → logprob: -8.127562522888184
    10. '1' → logprob: -8.252562522888184

Token 92: ' les' (ID: 1341)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.2562894821166992
    2. ' a' → logprob: -1.6312894821166992
    3. 'x' → logprob: -3.756289482116699
    4. ' x' → logprob: -5.131289482116699
    5. ' une' → logprob: -8.0062894821167
    6. 'n' → logprob: -9.0062894821167
    7. ' variables' → logprob: -9.0062894821167
    8. ' la' → logprob: -9.2562894821167
    9. 'b' → logprob: -9.7562894821167
    10. 'une' → logprob: -9.8812894821167

Token 93: ' variables' (ID: 13955)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.2223469316959381
    2. ' a' → logprob: -1.9723469018936157
    3. 'x' → logprob: -3.0973470211029053
    4. ' variables' → logprob: -4.472346782684326
    5. ' x' → logprob: -6.347346782684326
    6. 'variables' → logprob: -7.222346782684326
    7. 'de' → logprob: -8.097347259521484
    8. 'n' → logprob: -8.847347259521484
    9. ' var' → logprob: -8.847347259521484
    10. ' variable' → logprob: -9.222347259521484

Token 94: ' A' (ID: 355)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.13442662358283997
    2. ' a' → logprob: -2.3844265937805176
    3. 'x' → logprob: -3.5094265937805176
    4. ' x' → logprob: -5.634426593780518
    5. 'val' → logprob: -10.384427070617676
    6. '`' → logprob: -10.509427070617676
    7. 'n' → logprob: -10.759427070617676
    8. '```' → logprob: -10.884427070617676
    9. ' val' → logprob: -11.259427070617676
    10. 'nombre' → logprob: -11.384427070617676

Token 95: ' et' (ID: 859)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0001911432045744732
    2. ' ,' → logprob: -9.000190734863281
    3. ',A' → logprob: -10.500190734863281
    4. ',B' → logprob: -11.750190734863281
    5. 'A' → logprob: -11.750190734863281
    6. ',
' → logprob: -12.000190734863281
    7. 'a' → logprob: -12.375190734863281
    8. '1' → logprob: -12.375190734863281
    9. ',

' → logprob: -13.500190734863281
    10. 'e' → logprob: -13.750190734863281

Token 96: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.07905128598213196
    2. 'B' → logprob: -2.5790512561798096
    3. ' ' → logprob: -8.95405101776123
    4. ' ' → logprob: -10.70405101776123
    5. '  ' → logprob: -12.45405101776123
    6. 's' → logprob: -13.70405101776123
    7. ',' → logprob: -14.32905101776123
    8. ' ,' → logprob: -14.45405101776123
    9. ' ' → logprob: -14.70405101776123
    10. '`' → logprob: -14.82905101776123

Token 97: ' respect' (ID: 5618)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.00022809267102275044
    2. 'a' → logprob: -9.000227928161621
    3. '
' → logprob: -10.125227928161621
    4. ' A' → logprob: -10.625227928161621
    5. 'x' → logprob: -10.750227928161621
    6. ' 
' → logprob: -12.625227928161621
    7. ',' → logprob: -12.625227928161621
    8. 's' → logprob: -12.750227928161621
    9. 'n' → logprob: -13.000227928161621
    10. '#' → logprob: -13.375227928161621

Token 98: 'ivement' (ID: 37978)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'u' → logprob: -1.1191604137420654
    2. 'ues' → logprob: -1.3691604137420654
    3. 'ées' → logprob: -1.3691604137420654
    4. 'ue' → logprob: -2.3691604137420654
    5. 'uent' → logprob: -3.9941604137420654
    6. 'uant' → logprob: -4.6191606521606445
    7. 'ent' → logprob: -4.6191606521606445
    8. 'es' → logprob: -5.2441606521606445
    9. 'nées' → logprob: -5.8691606521606445
    10. 'uellement' → logprob: -5.9941606521606445

Token 99: ' grâce' (ID: 31589)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.0014007141580805182
    2. 'a' → logprob: -7.626400947570801
    3. ' A' → logprob: -8.0014009475708
    4. '
' → logprob: -8.2514009475708
    5. ',' → logprob: -8.5014009475708
    6. ' 
' → logprob: -10.6264009475708
    7. 'x' → logprob: -10.7514009475708
    8. '#' → logprob: -11.2514009475708
    9. ',A' → logprob: -11.7514009475708
    10. 'n' → logprob: -12.3764009475708

Token 100: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.06827769428491592
    2. ' au' → logprob: -3.068277597427368
    3. ' aux' → logprob: -4.818277835845947
    4. ' a' → logprob: -5.568277835845947
    5. '=' → logprob: -6.443277835845947
    6. ' ' → logprob: -6.693277835845947
    7. ' =' → logprob: -6.943277835845947
    8. '<|end|>' → logprob: -7.068277835845947
    9. ',' → logprob: -7.568277835845947
    10. 'au' → logprob: -7.693277835845947

Token 101: ' l' (ID: 305)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.6259178519248962
    2. ' l' → logprob: -1.000917911529541
    3. 'la' → logprob: -3.375917911529541
    4. 'l' → logprob: -3.375917911529541
    5. ' unpack' → logprob: -4.375917911529541
    6. 'le' → logprob: -5.500917911529541
    7. 'un' → logprob: -5.625917911529541
    8. ' A' → logprob: -6.000917911529541
    9. ' tuple' → logprob: -6.500917911529541
    10. 'A' → logprob: -6.875917911529541

Token 102: ''aff' (ID: 53397)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.43970581889152527
    2. 'a' → logprob: -1.0647058486938477
    3. 'es' → logprob: -5.439705848693848
    4. 'A' → logprob: -6.314705848693848
    5. ''a' → logprob: -6.439705848693848
    6. ''' → logprob: -6.689705848693848
    7. ''e' → logprob: -7.314705848693848
    8. ''é' → logprob: -8.564705848693848
    9. 'u' → logprob: -9.439705848693848
    10. 'i' → logprob: -9.689705848693848

Token 103: 'ect' (ID: 534)
  Prédit: 'ect'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ect' → logprob: -0.0008280907059088349
    2. 'ection' → logprob: -7.375828266143799
    3. 'irm' → logprob: -9.37582778930664
    4. 'ecta' → logprob: -9.37582778930664
    5. 'ichage' → logprob: -11.37582778930664
    6. 'ected' → logprob: -12.62582778930664
    7. 'ects' → logprob: -12.62582778930664
    8. 'ective' → logprob: -13.00082778930664
    9. 'eg' → logprob: -13.50082778930664
    10. 'A' → logprob: -13.62582778930664

Token 104: 'ation' (ID: 387)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.6480023860931396
    2. 'ation' → logprob: -1.8980023860931396
    3. 'uation' → logprob: -2.0230023860931396
    4. 'uer' → logprob: -3.0230023860931396
    5. ' A' → logprob: -3.1480023860931396
    6. 'uent' → logprob: -4.148002624511719
    7. 'ution' → logprob: -4.273002624511719
    8. 'A' → logprob: -4.648002624511719
    9. '=' → logprob: -4.648002624511719
    10. 'ement' → logprob: -5.023002624511719

Token 105: ' multiple' (ID: 7598)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.0020273735281080008
    2. 'a' → logprob: -7.00202751159668
    3. ' A' → logprob: -7.25202751159668
    4. ',' → logprob: -8.87702751159668
    5. 'x' → logprob: -9.87702751159668
    6. '```' → logprob: -10.50202751159668
    7. ' 
' → logprob: -10.62702751159668
    8. '#' → logprob: -10.75202751159668
    9. '(' → logprob: -10.87702751159668
    10. ')' → logprob: -11.12702751159668

Token 106: '.
' (ID: 558)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.0005650650127790868
    2. 'a' → logprob: -7.875565052032471
    3. ' A' → logprob: -8.750565528869629
    4. 'x' → logprob: -11.250565528869629
    5. 'n' → logprob: -12.750565528869629
    6. ',' → logprob: -13.000565528869629
    7. ' 
' → logprob: -13.375565528869629
    8. '
' → logprob: -14.000565528869629
    9. '#' → logprob: -14.000565528869629
    10. '```' → logprob: -14.000565528869629

Token 107: 'A' (ID: 32)
  Prédit: 'A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -2.963691804325208e-05
    2. 'a' → logprob: -11.125029563903809
    3. ' A' → logprob: -11.375029563903809
    4. 'x' → logprob: -13.875029563903809
    5. '```' → logprob: -14.000029563903809
    6. '#' → logprob: -14.375029563903809
    7. ' 
' → logprob: -14.750029563903809
    8. '  
' → logprob: -15.500029563903809
    9. 'n' → logprob: -16.875030517578125
    10. ',' → logprob: -16.875030517578125

Token 108: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.001984067726880312
    2. ' ,' → logprob: -6.251984119415283
    3. ',B' → logprob: -9.876983642578125
    4. 'B' → logprob: -12.876983642578125
    5. ',
' → logprob: -15.126983642578125
    6. ',A' → logprob: -15.126983642578125
    7. ' =' → logprob: -15.501983642578125
    8. 's' → logprob: -15.626983642578125
    9. ' B' → logprob: -15.876983642578125
    10. ',b' → logprob: -15.876983642578125

Token 109: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.25199970602989197
    2. 'B' → logprob: -1.5019997358322144
    3. ' ' → logprob: -9.626999855041504
    4. ' ' → logprob: -13.251999855041504
    5. '=B' → logprob: -13.376999855041504
    6. '<|end|>' → logprob: -14.876999855041504
    7. '=' → logprob: -15.001999855041504
    8. '  ' → logprob: -15.876999855041504
    9. '_B' → logprob: -15.876999855041504
    10. ' =' → logprob: -16.001998901367188

Token 110: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0788951888680458
    2. '=' → logprob: -2.578895092010498
    3. ',' → logprob: -13.328895568847656
    4. ' =
' → logprob: -13.328895568847656
    5. '=input' → logprob: -13.453895568847656
    6. ' ' → logprob: -15.703895568847656
    7. '=A' → logprob: -15.953895568847656
    8. '=int' → logprob: -16.328895568847656
    9. '=
' → logprob: -16.578895568847656
    10. ' ' → logprob: -16.578895568847656

Token 111: ' map' (ID: 4014)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.04858759790658951
    2. ' map' → logprob: -3.0485875606536865
    3. 'list' → logprob: -15.923587799072266
    4. 'm' → logprob: -16.423587799072266
    5. '	map' → logprob: -17.048587799072266
    6. ' ' → logprob: -18.173587799072266
    7. 'int' → logprob: -18.423587799072266
    8. '(map' → logprob: -18.673587799072266
    9. ' ' → logprob: -18.923587799072266
    10. 'input' → logprob: -19.548587799072266

Token 112: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.1270822286605835
    2. '(' → logprob: -2.127082347869873
    3. ' (' → logprob: -9.752081871032715
    4. '<int' → logprob: -10.002081871032715
    5. '(str' → logprob: -11.127081871032715
    6. '(input' → logprob: -11.377081871032715
    7. '(
' → logprob: -11.877081871032715
    8. '(lambda' → logprob: -12.002081871032715
    9. '(in' → logprob: -12.502081871032715
    10. '[int' → logprob: -12.752081871032715

Token 113: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.01277473196387291
    2. 'input' → logprob: -4.38777494430542
    3. '(' → logprob: -8.762774467468262
    4. ' (' → logprob: -10.012774467468262
    5. ',input' → logprob: -10.262774467468262
    6. ' input' → logprob: -11.137774467468262
    7. ')' → logprob: -11.387774467468262
    8. '=input' → logprob: -13.387774467468262
    9. ',' → logprob: -14.262774467468262
    10. '[input' → logprob: -14.887774467468262

Token 114: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -7.600714161526412e-05
    2. ' input' → logprob: -9.500076293945312
    3. '(input' → logprob: -13.750076293945312
    4. '<input' → logprob: -19.125076293945312
    5. '=input' → logprob: -19.375076293945312
    6. ')' → logprob: -19.750076293945312
    7. '	input' → logprob: -20.125076293945312
    8. '[input' → logprob: -20.375076293945312
    9. ',input' → logprob: -20.750076293945312
    10. ' ' → logprob: -21.000076293945312

Token 115: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.011091449297964573
    2. '()' → logprob: -4.636091232299805
    3. '())' → logprob: -6.761091232299805
    4. '("' → logprob: -8.761091232299805
    5. '(' → logprob: -12.386091232299805
    6. '()).' → logprob: -12.511091232299805
    7. ' ().' → logprob: -12.761091232299805
    8. '('' → logprob: -13.261091232299805
    9. '(()' → logprob: -13.386091232299805
    10. '("").' → logprob: -13.386091232299805

Token 116: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -3.726595241460018e-05
    2. 'strip' → logprob: -10.25003719329834
    3. ' split' → logprob: -13.25003719329834
    4. '(split' → logprob: -17.250038146972656
    5. 'rstrip' → logprob: -17.750038146972656
    6. 'spl' → logprob: -18.875038146972656
    7. ')' → logprob: -21.500038146972656
    8. 'plit' → logprob: -22.250038146972656
    9. '.split' → logprob: -22.625038146972656
    10. '_split' → logprob: -22.750038146972656

Token 117: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.022613653913140297
    2. '()' → logprob: -3.897613763809204
    3. '()))' → logprob: -7.147613525390625
    4. '("' → logprob: -7.772613525390625
    5. '('' → logprob: -7.772613525390625
    6. '(' → logprob: -8.022613525390625
    7. ' ())' → logprob: -9.397613525390625
    8. ')' → logprob: -11.397613525390625
    9. '(""))' → logprob: -12.022613525390625
    10. '(()' → logprob: -12.397613525390625

Token 118: '#' (ID: 2)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.3969711065292358
    2. '
' → logprob: -1.5219711065292358
    3. '<|end|>' → logprob: -1.6469711065292358
    4. '#' → logprob: -2.0219712257385254
    5. ' ' → logprob: -2.5219712257385254
    6. ')' → logprob: -2.8969712257385254
    7. ' 
' → logprob: -3.5219712257385254
    8. '  
' → logprob: -4.021971225738525
    9. 'if' → logprob: -5.271971225738525
    10. '.' → logprob: -6.021971225738525

Token 119: ' Ici' (ID: 145754)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.5844903588294983
    2. 'print' → logprob: -1.0844902992248535
    3. 'result' → logprob: -3.0844902992248535
    4. '#' → logprob: -3.2094902992248535
    5. 'sum' → logprob: -4.5844902992248535
    6. ' if' → logprob: -6.3344902992248535
    7. 's' → logprob: -6.3344902992248535
    8. 'C' → logprob: -6.4594902992248535
    9. 'total' → logprob: -7.4594902992248535
    10. 'for' → logprob: -7.7094902992248535

Token 120: ',' (ID: 11)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5908437967300415
    2. 'print' → logprob: -1.2158437967300415
    3. 'if' → logprob: -2.090843677520752
    4. ' if' → logprob: -3.965843677520752
    5. ' 
' → logprob: -5.840843677520752
    6. '#' → logprob: -6.215843677520752
    7. ' print' → logprob: -7.215843677520752
    8. ',' → logprob: -7.965843677520752
    9. '  
' → logprob: -8.46584415435791
    10. '
' → logprob: -8.71584415435791

Token 121: ' nous' (ID: 6176)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.6346352100372314
    2. 'if' → logprob: -0.7596352100372314
    3. ' si' → logprob: -6.759634971618652
    4. '#' → logprob: -7.759634971618652
    5. 'print' → logprob: -9.134634971618652
    6. 'si' → logprob: -9.134634971618652
    7. ' on' → logprob: -9.384634971618652
    8. ' #' → logprob: -9.759634971618652
    9. ' vous' → logprob: -11.259634971618652
    10. ' print' → logprob: -11.509634971618652

Token 122: ' utilis' (ID: 18688)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.031357765197754
    2. 'if' → logprob: -1.781357765197754
    3. 'v' → logprob: -2.656357765197754
    4. ' if' → logprob: -2.656357765197754
    5. ' vér' → logprob: -2.906357765197754
    6. ' test' → logprob: -3.031357765197754
    7. ' allons' → logprob: -3.531357765197754
    8. ' #' → logprob: -3.781357765197754
    9. ' continu' → logprob: -3.781357765197754
    10. ' calcul' → logprob: -3.781357765197754

Token 123: 'ons' (ID: 1808)
  Prédit: 'ons'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ons' → logprob: -0.00045081099960952997
    2. '#' → logprob: -7.750450611114502
    3. 'sons' → logprob: -12.50045108795166
    4. '```' → logprob: -12.50045108795166
    5. 'on' → logprob: -13.00045108795166
    6. 's' → logprob: -13.37545108795166
    7. 'z' → logprob: -13.62545108795166
    8. '##' → logprob: -14.12545108795166
    9. '   ' → logprob: -14.50045108795166
    10. '\' → logprob: -14.75045108795166

Token 124: ' une' (ID: 2463)
  Prédit: ' une'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.20787692070007324
    2. ' un' → logprob: -2.2078769207000732
    3. 'une' → logprob: -3.7078769207000732
    4. ' if' → logprob: -4.457877159118652
    5. ' ' → logprob: -4.707877159118652
    6. ' l' → logprob: -4.707877159118652
    7. 'if' → logprob: -4.957877159118652
    8. 'un' → logprob: -5.457877159118652
    9. ' an' → logprob: -5.957877159118652
    10. ' A' → logprob: -6.207877159118652

Token 125: ' instruction' (ID: 21179)
  Prédit: 'condition'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'condition' → logprob: -1.0472215414047241
    2. 'instruction' → logprob: -1.5472215414047241
    3. ' instruction' → logprob: -1.9222215414047241
    4. 'structure' → logprob: -2.2972216606140137
    5. ' condition' → logprob: -2.2972216606140137
    6. ' structure' → logprob: -3.1722216606140137
    7. 'struction' → logprob: -3.9222216606140137
    8. ' boucle' → logprob: -4.547221660614014
    9. 'if' → logprob: -5.297221660614014
    10. 'bou' → logprob: -6.297221660614014

Token 126: ' condition' (ID: 7060)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.6946758031845093
    2. ' if' → logprob: -0.6946758031845093
    3. ' condition' → logprob: -6.569675922393799
    4. 'condition' → logprob: -9.06967544555664
    5. ' ' → logprob: -13.06967544555664
    6. ' conditional' → logprob: -13.31967544555664
    7. '_if' → logprob: -13.81967544555664
    8. 'si' → logprob: -14.56967544555664
    9. 'If' → logprob: -14.69467544555664
    10. ' `' → logprob: -14.69467544555664

Token 127: 'nelle' (ID: 30805)
  Prédit: 'nelle'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'nelle' → logprob: -0.0335489958524704
    2. 'if' → logprob: -3.6585490703582764
    3. 'ale' → logprob: -5.158548831939697
    4. ' if' → logprob: -6.658548831939697
    5. 'elle' → logprob: -8.908549308776855
    6. 'al' → logprob: -11.158549308776855
    7. 'elif' → logprob: -11.283549308776855
    8. 'nel' → logprob: -11.533549308776855
    9. 'le' → logprob: -12.158549308776855
    10. 'else' → logprob: -12.408549308776855

Token 128: ' pour' (ID: 1930)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.5759871006011963
    2. 'if' → logprob: -0.8259871006011963
    3. ':' → logprob: -10.825986862182617
    4. '_if' → logprob: -12.200986862182617
    5. 'If' → logprob: -12.450986862182617
    6. 'ifs' → logprob: -12.575986862182617
    7. ' ' → logprob: -13.075986862182617
    8. ' If' → logprob: -13.450986862182617
    9. 's' → logprob: -13.575986862182617
    10. '
' → logprob: -13.575986862182617

Token 129: ' contrôler' (ID: 149219)
  Prédit: ' vérifier'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' vérifier' → logprob: -0.5612687468528748
    2. 'v' → logprob: -1.5612688064575195
    3. ' comparer' → logprob: -1.6862688064575195
    4. ' déterminer' → logprob: -3.8112688064575195
    5. 'aff' → logprob: -6.0612688064575195
    6. ' tester' → logprob: -6.1862688064575195
    7. 'if' → logprob: -6.8112688064575195
    8. 'determ' → logprob: -6.9362688064575195
    9. ' v' → logprob: -7.3112688064575195
    10. 'compare' → logprob: -7.4362688064575195

Token 130: ' le' (ID: 505)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.6887031197547913
    2. ' la' → logprob: -1.3137030601501465
    3. ' le' → logprob: -1.9387030601501465
    4. ' if' → logprob: -3.3137030601501465
    5. ' ' → logprob: -4.3137030601501465
    6. 'le' → logprob: -4.3137030601501465
    7. ' si' → logprob: -4.6887030601501465
    8. ' ' → logprob: -5.4387030601501465
    9. 'l' → logprob: -6.0637030601501465
    10. 'if' → logprob: -6.8137030601501465

Token 131: ' flux' (ID: 36547)
  Prédit: 'flux'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'flux' → logprob: -0.08441304415464401
    2. ' flux' → logprob: -2.5844130516052246
    3. 'if' → logprob: -6.459413051605225
    4. '#' → logprob: -7.334413051605225
    5. 'programme' → logprob: -7.334413051605225
    6. ' résultat' → logprob: -7.834413051605225
    7. 'flow' → logprob: -7.959413051605225
    8. 'print' → logprob: -8.084412574768066
    9. ' flow' → logprob: -8.459412574768066
    10. ' if' → logprob: -8.459412574768066

Token 132: ' du' (ID: 1462)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.23297849297523499
    2. 'if' → logprob: -1.7329784631729126
    3. ' de' → logprob: -4.107978343963623
    4. ' du' → logprob: -5.482978343963623
    5. 'de' → logprob: -5.732978343963623
    6. ' d' → logprob: -5.732978343963623
    7. ' si' → logprob: -6.482978343963623
    8. '#' → logprob: -7.482978343963623
    9. 'e' → logprob: -7.482978343963623
    10. ' ' → logprob: -8.482978820800781

Token 133: ' programme' (ID: 18190)
  Prédit: 'programme'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'programme' → logprob: -0.03988777473568916
    2. ' programme' → logprob: -3.2898876667022705
    3. 'program' → logprob: -6.66488790512085
    4. 'code' → logprob: -7.66488790512085
    5. '#' → logprob: -10.289887428283691
    6. ' code' → logprob: -10.414887428283691
    7. 'Programme' → logprob: -11.914887428283691
    8. 'programma' → logprob: -11.914887428283691
    9. ' program' → logprob: -12.039887428283691
    10. 'jeu' → logprob: -12.664887428283691

Token 134: ' selon' (ID: 27571)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.20841412246227264
    2. 'if' → logprob: -1.958414077758789
    3. ':
' → logprob: -3.458414077758789
    4. ':' → logprob: -4.833414077758789
    5. '
' → logprob: -6.208414077758789
    6. ' :
' → logprob: -6.333414077758789
    7. '.
' → logprob: -6.458414077758789
    8. ' si' → logprob: -7.458414077758789
    9. '.' → logprob: -7.458414077758789
    10. ' 
' → logprob: -8.208414077758789

Token 135: ' la' (ID: 557)
  Prédit: ' la'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.1441338211297989
    2. 'la' → logprob: -2.8941338062286377
    3. 'A' → logprob: -3.0191338062286377
    4. ' A' → logprob: -4.019134044647217
    5. ' les' → logprob: -5.019134044647217
    6. ' l' → logprob: -6.769134044647217
    7. 'l' → logprob: -7.269134044647217
    8. ' ' → logprob: -7.269134044647217
    9. 'les' → logprob: -7.394134044647217
    10. ' ' → logprob: -7.769134044647217

Token 136: ' valeur' (ID: 41664)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.42333436012268066
    2. 'A' → logprob: -1.1733343601226807
    3. 'rés' → logprob: -4.923334121704102
    4. 'result' → logprob: -5.423334121704102
    5. 'B' → logprob: -5.548334121704102
    6. 'if' → logprob: -5.673334121704102
    7. 'type' → logprob: -5.923334121704102
    8. ' A' → logprob: -5.923334121704102
    9. ' résultat' → logprob: -6.048334121704102
    10. 'nombre' → logprob: -6.048334121704102

Token 137: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.02822815626859665
    2. 'de' → logprob: -3.7782280445098877
    3. ' if' → logprob: -6.778228282928467
    4. ' ' → logprob: -6.903228282928467
    5. ' des' → logprob: -7.153228282928467
    6. ' d' → logprob: -7.528228282928467
    7. 'if' → logprob: -7.653228282928467
    8. 'A' → logprob: -8.028227806091309
    9. ' A' → logprob: -8.778227806091309
    10. 's' → logprob: -8.903227806091309

Token 138: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.39718496799468994
    2. ' A' → logprob: -1.14718496799469
    3. 'B' → logprob: -5.0221848487854
    4. ' B' → logprob: -5.6471848487854
    5. ' ' → logprob: -9.647185325622559
    6. ' la' → logprob: -10.772185325622559
    7. 'a' → logprob: -11.147185325622559
    8. 'l' → logprob: -11.897185325622559
    9. ' ' → logprob: -12.022185325622559
    10. 'la' → logprob: -12.147185325622559

Token 139: '.
' (ID: 558)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -1.063109278678894
    2. 'if' → logprob: -1.188109278678894
    3. ' if' → logprob: -1.188109278678894
    4. ':
' → logprob: -3.4381093978881836
    5. ' 
' → logprob: -5.438109397888184
    6. ' :
' → logprob: -5.563109397888184
    7. ' :' → logprob: -6.313109397888184
    8. '
' → logprob: -7.063109397888184
    9. ',' → logprob: -7.688109397888184
    10. 'i' → logprob: -8.188109397888184

Token 140: '#' (ID: 2)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0055934954434633255
    2. ' if' → logprob: -5.255593299865723
    3. 'i' → logprob: -8.130593299865723
    4. ' 
' → logprob: -9.880593299865723
    5. '
' → logprob: -11.380593299865723
    6. ' i' → logprob: -14.130593299865723
    7. 'If' → logprob: -14.380593299865723
    8. '  
' → logprob: -15.130593299865723
    9. '```' → logprob: -15.255593299865723
    10. ' ' → logprob: -15.630593299865723

Token 141: ' La' (ID: 3038)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0031784253660589457
    2. ' if' → logprob: -5.753178596496582
    3. 'If' → logprob: -14.253178596496582
    4. 'Si' → logprob: -17.253177642822266
    5. '```' → logprob: -17.378177642822266
    6. '
' → logprob: -17.503177642822266
    7. 'i' → logprob: -17.878177642822266
    8. '#' → logprob: -18.253177642822266
    9. 'ifs' → logprob: -19.253177642822266
    10. ' 
' → logprob: -19.753177642822266

Token 142: ' première' (ID: 23423)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.18316033482551575
    2. ' if' → logprob: -1.8081603050231934
    3. ' ' → logprob: -7.558160305023193
    4. 'b' → logprob: -7.683160305023193
    5. '
' → logprob: -7.683160305023193
    6. 'n' → logprob: -7.808160305023193
    7. ' valeur' → logprob: -7.808160305023193
    8. 'r' → logprob: -7.933160305023193
    9. ' ' → logprob: -8.933160781860352
    10. ' 
' → logprob: -9.308160781860352

Token 143: ' condition' (ID: 7060)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.8057059645652771
    2. 'if' → logprob: -1.4307060241699219
    3. ' ligne' → logprob: -1.5557060241699219
    4. ' condition' → logprob: -2.555706024169922
    5. ' instruction' → logprob: -4.055706024169922
    6. ' valeur' → logprob: -6.180706024169922
    7. 'condition' → logprob: -6.930706024169922
    8. 'ligne' → logprob: -7.180706024169922
    9. ' line' → logprob: -7.430706024169922
    10. ' partie' → logprob: -7.430706024169922

Token 144: ' vér' (ID: 42524)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.3132953345775604
    2. ' if' → logprob: -1.4382953643798828
    3. ':' → logprob: -3.688295364379883
    4. ' :' → logprob: -5.438295364379883
    5. ' est' → logprob: -7.188295364379883
    6. 'est' → logprob: -7.438295364379883
    7. ':
' → logprob: -8.313295364379883
    8. ',' → logprob: -9.188295364379883
    9. ' ' → logprob: -9.188295364379883
    10. ' suivante' → logprob: -9.438295364379883

Token 145: 'ifie' (ID: 46409)
  Prédit: 'ifie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifie' → logprob: -3.392824874026701e-05
    2. 'if' → logprob: -10.50003433227539
    3. 'ife' → logprob: -12.37503433227539
    4. 'i' → logprob: -14.87503433227539
    5. 'ify' → logprob: -15.00003433227539
    6. '#' → logprob: -15.12503433227539
    7. 'ique' → logprob: -15.62503433227539
    8. 'e' → logprob: -15.87503433227539
    9. 'ite' → logprob: -16.12503433227539
    10. '```' → logprob: -16.25003433227539

Token 146: ' si' (ID: 1784)
  Prédit: ' si'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' si' → logprob: -0.16280265152454376
    2. ' if' → logprob: -2.4128026962280273
    3. 'si' → logprob: -3.1628026962280273
    4. 'if' → logprob: -4.162802696228027
    5. ' A' → logprob: -6.537802696228027
    6. ' ' → logprob: -7.287802696228027
    7. 'A' → logprob: -8.037802696228027
    8. ' ' → logprob: -8.412802696228027
    9. ':' → logprob: -10.412802696228027
    10. 'Si' → logprob: -10.412802696228027

Token 147: ' la' (ID: 557)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.12695519626140594
    2. 'A' → logprob: -2.126955270767212
    3. ' ' → logprob: -10.876955032348633
    4. ' ' → logprob: -12.126955032348633
    5. ' B' → logprob: -13.376955032348633
    6. 'B' → logprob: -14.126955032348633
    7. '	A' → logprob: -15.751955032348633
    8. '  ' → logprob: -16.126955032348633
    9. '   ' → logprob: -16.626955032348633
    10. 'a' → logprob: -16.626955032348633

Token 148: ' valeur' (ID: 41664)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.7483689188957214
    2. ' A' → logprob: -0.9983689188957214
    3. ' valeur' → logprob: -1.8733689785003662
    4. 'val' → logprob: -6.873368740081787
    5. 'B' → logprob: -7.123368740081787
    6. ' B' → logprob: -7.748368740081787
    7. ' ' → logprob: -8.248369216918945
    8. '>' → logprob: -8.498369216918945
    9. ' >' → logprob: -8.498369216918945
    10. 'value' → logprob: -8.623369216918945

Token 149: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.03845648840069771
    2. 'de' → logprob: -3.788456439971924
    3. ' d' → logprob: -5.288456439971924
    4. 'A' → logprob: -5.538456439971924
    5. ' A' → logprob: -5.788456439971924
    6. ' ' → logprob: -6.288456439971924
    7. 'd' → logprob: -7.038456439971924
    8. ' est' → logprob: -9.538456916809082
    9. '#' → logprob: -9.913456916809082
    10. ' #' → logprob: -10.288456916809082

Token 150: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.386933833360672
    2. ' A' → logprob: -1.1369338035583496
    3. ' ' → logprob: -10.261934280395508
    4. 'B' → logprob: -10.886934280395508
    5. ' B' → logprob: -12.261934280395508
    6. ' ' → logprob: -13.261934280395508
    7. 'a' → logprob: -14.136934280395508
    8. '  ' → logprob: -14.511934280395508
    9. '	A' → logprob: -14.636934280395508
    10. 'l' → logprob: -15.886934280395508

Token 151: ' est' (ID: 893)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.6882285475730896
    2. ' est' → logprob: -1.4382286071777344
    3. ' <' → logprob: -1.8132286071777344
    4. ' ==' → logprob: -3.1882286071777344
    5. '>' → logprob: -3.5632286071777344
    6. 'est' → logprob: -4.563228607177734
    7. '<' → logprob: -5.313228607177734
    8. '==' → logprob: -6.188228607177734
    9. ' <=' → logprob: -6.188228607177734
    10. ' >=' → logprob: -6.188228607177734

Token 152: ' supérieure' (ID: 106336)
  Prédit: 'strict'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strict' → logprob: -0.7791655659675598
    2. ' supérieure' → logprob: -1.529165506362915
    3. ' strict' → logprob: -1.779165506362915
    4. ' positive' → logprob: -2.779165506362915
    5. 'positive' → logprob: -3.654165506362915
    6. ' inf' → logprob: -4.279165744781494
    7. 'inf' → logprob: -4.279165744781494
    8. 'sup' → logprob: -4.529165744781494
    9. 'plus' → logprob: -5.279165744781494
    10. '>' → logprob: -5.279165744781494

Token 153: ' ou' (ID: 2031)
  Prédit: ' à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.5796812772750854
    2. 'à' → logprob: -0.8296812772750854
    3. 'au' → logprob: -6.329681396484375
    4. 'a' → logprob: -7.079681396484375
    5. ''à' → logprob: -7.954681396484375
    6. '```' → logprob: -8.454681396484375
    7. ' ' → logprob: -9.329681396484375
    8. ' ' → logprob: -9.329681396484375
    9. '#' → logprob: -10.204681396484375
    10. 'ou' → logprob: -10.329681396484375

Token 154: ' ég' (ID: 33150)
  Prédit: 'ég'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ég' → logprob: -0.5681453347206116
    2. 'à' → logprob: -1.5681452751159668
    3. ' ég' → logprob: -2.318145275115967
    4. 'strict' → logprob: -2.568145275115967
    5. ' à' → logprob: -4.318145275115967
    6. 'égal' → logprob: -4.943145275115967
    7. 'ou' → logprob: -4.943145275115967
    8. '=' → logprob: -5.068145275115967
    9. 'inf' → logprob: -5.443145275115967
    10. '>' → logprob: -5.818145275115967

Token 155: 'ale' (ID: 1167)
  Prédit: 'ale'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ale' → logprob: -0.00010318557906430215
    2. 'al' → logprob: -9.250102996826172
    3. '>' → logprob: -13.000102996826172
    4. 'але' → logprob: -14.125102996826172
    5. 'a' → logprob: -14.375102996826172
    6. '```' → logprob: -14.375102996826172
    7. '</' → logprob: -14.625102996826172
    8. '#' → logprob: -15.000102996826172
    9. 'alee' → logprob: -15.375102996826172
    10. '{' → logprob: -15.625102996826172

Token 156: ' à' (ID: 1221)
  Prédit: 'à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'à' → logprob: -0.5974172353744507
    2. ' à' → logprob: -0.8474172353744507
    3. 'a' → logprob: -4.59741735458374
    4. ' ' → logprob: -5.34741735458374
    5. 'au' → logprob: -6.47241735458374
    6. ' ' → logprob: -6.47241735458374
    7. '0' → logprob: -7.47241735458374
    8. '100' → logprob: -7.84741735458374
    9. ' a' → logprob: -7.97241735458374
    10. '10' → logprob: -8.097416877746582

Token 157: ' ' (ID: 220)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.8034368753433228
    2. '10' → logprob: -1.6784368753433228
    3. ' B' → logprob: -1.8034368753433228
    4. ' ' → logprob: -2.553436756134033
    5. '100' → logprob: -2.553436756134033
    6. '0' → logprob: -3.803436756134033
    7. '20' → logprob: -5.178436756134033
    8. '50' → logprob: -5.178436756134033
    9. '1' → logprob: -5.428436756134033
    10. '5' → logprob: -6.178436756134033

Token 158: '13' (ID: 1311)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.4412514865398407
    2. '10' → logprob: -1.441251516342163
    3. '100' → logprob: -2.691251516342163
    4. '0' → logprob: -4.441251277923584
    5. '20' → logprob: -4.816251277923584
    6. '50' → logprob: -5.066251277923584
    7. '5' → logprob: -5.316251277923584
    8. '1' → logprob: -5.316251277923584
    9. ' B' → logprob: -6.191251277923584
    10. ' ' → logprob: -6.691251277923584

Token 159: ' à' (ID: 1221)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.454037606716156
    2. 'if' → logprob: -1.3290376663208008
    3. ':
' → logprob: -2.329037666320801
    4. ' if' → logprob: -6.204037666320801
    5. '.' → logprob: -8.3290376663208
    6. '
' → logprob: -8.8290376663208
    7. ':

' → logprob: -9.4540376663208
    8. ' :
' → logprob: -9.5790376663208
    9. ' :' → logprob: -9.8290376663208
    10. '```' → logprob: -10.0790376663208

Token 160: ' l' (ID: 305)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.1272936463356018
    2. ' :' → logprob: -2.127293586730957
    3. ':
' → logprob: -8.502293586730957
    4. '.' → logprob: -9.627293586730957
    5. ' :
' → logprob: -10.127293586730957
    6. ' ' → logprob: -11.502293586730957
    7. ' ' → logprob: -12.002293586730957
    8. 'and' → logprob: -12.002293586730957
    9. 'if' → logprob: -12.127293586730957
    10. ' if' → logprob: -12.502293586730957

Token 161: ''aide' (ID: 75684)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.19336460530757904
    2. 'ors' → logprob: -3.1933646202087402
    3. ':' → logprob: -3.6933646202087402
    4. ''aide' → logprob: -4.06836462020874
    5. 'a' → logprob: -4.31836462020874
    6. '#' → logprob: -4.44336462020874
    7. ''âge' → logprob: -4.81836462020874
    8. ' if' → logprob: -4.94336462020874
    9. 'e' → logprob: -5.19336462020874
    10. 'ui' → logprob: -5.56836462020874

Token 162: ' de' (ID: 334)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.08683836460113525
    2. ' de' → logprob: -2.9618382453918457
    3. 'd' → logprob: -3.7118382453918457
    4. 'de' → logprob: -5.336838245391846
    5. 'du' → logprob: -7.086838245391846
    6. ' du' → logprob: -7.086838245391846
    7. 'if' → logprob: -8.086838722229004
    8. ' if' → logprob: -9.461838722229004
    9. ')' → logprob: -10.461838722229004
    10. ' ' → logprob: -11.086838722229004

Token 163: ' l' (ID: 305)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.6333423256874084
    2. 'if' → logprob: -1.6333422660827637
    3. ' une' → logprob: -2.3833422660827637
    4. ' ' → logprob: -3.2583422660827637
    5. ' l' → logprob: -3.3833422660827637
    6. ' un' → logprob: -3.5083422660827637
    7. 'une' → logprob: -3.5083422660827637
    8. ':' → logprob: -4.758342266082764
    9. 'un' → logprob: -4.758342266082764
    10. 'l' → logprob: -4.883342266082764

Token 164: ''op' (ID: 70747)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.7795989513397217
    2. ''' → logprob: -1.0295989513397217
    3. 'e' → logprob: -2.2795989513397217
    4. '`' → logprob: -3.7795989513397217
    5. ''op' → logprob: -3.7795989513397217
    6. ' if' → logprob: -4.029599189758301
    7. 'a' → logprob: -5.279599189758301
    8. 'es' → logprob: -5.904599189758301
    9. ''in' → logprob: -6.154599189758301
    10. ''ex' → logprob: -6.404599189758301

Token 165: 'érateur' (ID: 108528)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.7132859826087952
    2. '(A' → logprob: -1.7132859230041504
    3. 'if' → logprob: -1.7132859230041504
    4. 'A' → logprob: -3.7132859230041504
    5. '(' → logprob: -3.8382859230041504
    6. '<=' → logprob: -4.08828592300415
    7. '>=' → logprob: -4.33828592300415
    8. '>' → logprob: -4.71328592300415
    9. 'érateur' → logprob: -4.71328592300415
    10. 't' → logprob: -4.83828592300415

Token 166: ' de' (ID: 334)
  Prédit: ' >='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.21473823487758636
    2. '>=' → logprob: -2.339738130569458
    3. '>' → logprob: -3.339738130569458
    4. ' >' → logprob: -4.589738368988037
    5. '">' → logprob: -4.839738368988037
    6. 'if' → logprob: -5.214738368988037
    7. ' if' → logprob: -5.214738368988037
    8. ' ">' → logprob: -5.589738368988037
    9. '  ' → logprob: -5.714738368988037
    10. ' ' → logprob: -5.714738368988037

Token 167: ' comparaison' (ID: 170508)
  Prédit: ' comparaison'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' comparaison' → logprob: -1.0556962490081787
    2. 'compar' → logprob: -2.3056962490081787
    3. ':' → logprob: -2.5556962490081787
    4. '>' → logprob: -2.5556962490081787
    5. ' comparison' → logprob: -2.8056962490081787
    6. '>=' → logprob: -2.9306962490081787
    7. 'comparison' → logprob: -3.0556962490081787
    8. ' >=' → logprob: -3.1806962490081787
    9. 'égalité' → logprob: -3.3056962490081787
    10. 'egal' → logprob: -3.5556962490081787

Token 168: ' ">' (ID: 65561)
  Prédit: ' >='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.5493150949478149
    2. '>=' → logprob: -1.174315094947815
    3. '>' → logprob: -3.5493149757385254
    4. '">' → logprob: -3.9243149757385254
    5. 'if' → logprob: -4.174314975738525
    6. ' `' → logprob: -4.299314975738525
    7. ' if' → logprob: -4.924314975738525
    8. ' >' → logprob: -5.424314975738525
    9. ' ">' → logprob: -5.549314975738525
    10. '`' → logprob: -5.674314975738525

Token 169: '="' (ID: 580)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.001116404077038169
    2. '="' → logprob: -7.0011162757873535
    3. '=""' → logprob: -9.501116752624512
    4. '="""' → logprob: -10.001116752624512
    5. '==' → logprob: -10.251116752624512
    6. '=").' → logprob: -11.376116752624512
    7. '=.' → logprob: -12.001116752624512
    8. ' =' → logprob: -12.626116752624512
    9. '=
' → logprob: -12.876116752624512
    10. '="">' → logprob: -13.001116752624512

Token 170: '.
' (ID: 558)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.024037526920437813
    2. ':' → logprob: -3.8990375995635986
    3. ':
' → logprob: -6.1490373611450195
    4. ' if' → logprob: -7.0240373611450195
    5. '```' → logprob: -8.39903736114502
    6. '
' → logprob: -8.52403736114502
    7. ':

' → logprob: -12.14903736114502
    8. ' :' → logprob: -12.14903736114502
    9. 'If' → logprob: -12.39903736114502
    10. '.' → logprob: -12.64903736114502

Token 171: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -8.745069499127567e-05
    2. ' if' → logprob: -9.37508773803711
    3. ':' → logprob: -14.12508773803711
    4. '
' → logprob: -14.25008773803711
    5. '```' → logprob: -14.37508773803711
    6. 'ifs' → logprob: -15.50008773803711
    7. 'If' → logprob: -16.00008773803711
    8. ';if' → logprob: -16.12508773803711
    9. ' 
' → logprob: -17.00008773803711
    10. ':
' → logprob: -17.12508773803711

Token 172: ' A' (ID: 355)
  Prédit: ' A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.0030864477157592773
    2. ' ' → logprob: -5.878086566925049
    3. 'A' → logprob: -8.37808609008789
    4. ' ' → logprob: -9.87808609008789
    5. '	A' → logprob: -15.50308609008789
    6. '  ' → logprob: -15.87808609008789
    7. ' ' → logprob: -17.00308609008789
    8. ' B' → logprob: -17.37808609008789
    9. '_A' → logprob: -17.50308609008789
    10. ' (' → logprob: -17.87808609008789

Token 173: ' >=' (ID: 5064)
  Prédit: ' >='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.14268425107002258
    2. '>=' → logprob: -2.0176842212677
    3. ' ' → logprob: -13.017683982849121
    4. '>' → logprob: -13.142683982849121
    5. ')>=' → logprob: -13.392683982849121
    6. ']>=' → logprob: -14.392683982849121
    7. ' >' → logprob: -14.392683982849121
    8. ':' → logprob: -14.642683982849121
    9. '[' → logprob: -14.892683982849121
    10. ' <' → logprob: -15.017683982849121

Token 174: ' ' (ID: 220)
  Prédit: '13'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '13' → logprob: -0.004079589620232582
    2. ' ' → logprob: -5.504079818725586
    3. '```' → logprob: -14.754079818725586
    4. '1' → logprob: -15.254079818725586
    5. ' ' → logprob: -15.754079818725586
    6. '
' → logprob: -16.254079818725586
    7. '   ' → logprob: -16.254079818725586
    8. '3' → logprob: -16.754079818725586
    9. '14' → logprob: -16.941579818725586
    10. '  ' → logprob: -17.441579818725586

Token 175: '13' (ID: 1311)
  Prédit: '13'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '13' → logprob: -1.318681188422488e-05
    2. ' ' → logprob: -11.25001335144043
    3. '```' → logprob: -17.12501335144043
    4. '1' → logprob: -17.62501335144043
    5. '3' → logprob: -17.87501335144043
    6. '   ' → logprob: -18.50001335144043
    7. '14' → logprob: -19.06251335144043
    8. '
' → logprob: -19.12501335144043
    9. '１３' → logprob: -19.50001335144043
    10. '۱۳' → logprob: -19.56251335144043

Token 176: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.014420284889638424
    2. ':
' → logprob: -4.264420509338379
    3. ' :' → logprob: -8.514420509338379
    4. ' and' → logprob: -10.264420509338379
    5. ' :
' → logprob: -11.139420509338379
    6. ':
' → logprob: -12.514420509338379
    7. 'and' → logprob: -13.389420509338379
    8. ' or' → logprob: -14.514420509338379
    9. ':

' → logprob: -14.639420509338379
    10. '   ' → logprob: -16.014419555664062

Token 177: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6698092818260193
    2. ' print' → logprob: -0.9198092818260193
    3. 'print' → logprob: -2.544809341430664
    4. ':' → logprob: -5.294809341430664
    5. '
' → logprob: -6.044809341430664
    6. ':
' → logprob: -6.544809341430664
    7. ' :' → logprob: -7.419809341430664
    8. ' ' → logprob: -7.544809341430664
    9. '	print' → logprob: -7.794809341430664
    10. ' :
' → logprob: -8.294809341430664

Token 178: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.019835665822029114
    2. ' print' → logprob: -4.019835472106934
    3. '   ' → logprob: -7.394835472106934
    4. 'if' → logprob: -7.769835472106934
    5. 'B' → logprob: -8.769835472106934
    6. 'pr' → logprob: -9.644835472106934
    7. ' if' → logprob: -9.769835472106934
    8. 'prin' → logprob: -9.769835472106934
    9. 'result' → logprob: -10.019835472106934
    10. ' ' → logprob: -10.019835472106934

Token 179: ' Si' (ID: 7832)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.026545042172074318
    2. ' print' → logprob: -3.6515450477600098
    3. 'B' → logprob: -10.026544570922852
    4. 'if' → logprob: -10.026544570922852
    5. '   ' → logprob: -10.276544570922852
    6. 'prin' → logprob: -10.276544570922852
    7. ' if' → logprob: -11.026544570922852
    8. 'pr' → logprob: -11.151544570922852
    9. 'A' → logprob: -11.526544570922852
    10. ' ' → logprob: -11.901544570922852

Token 180: ' A' (ID: 355)
  Prédit: ' B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.06628624349832535
    2. 'B' → logprob: -3.066286325454712
    3. ' A' → logprob: -4.191286087036133
    4. 'A' → logprob: -6.816286087036133
    5. ' ' → logprob: -7.441286087036133
    6. '   ' → logprob: -7.941286087036133
    7. ' print' → logprob: -8.941286087036133
    8. 'print' → logprob: -9.066286087036133
    9. ' ' → logprob: -10.191286087036133
    10. ' la' → logprob: -10.816286087036133

Token 181: ' est' (ID: 893)
  Prédit: ' >='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.028781037777662277
    2. '>=' → logprob: -4.278780937194824
    3. ' >' → logprob: -4.903780937194824
    4. ' <' → logprob: -6.403780937194824
    5. ' ==' → logprob: -6.653780937194824
    6. ' <=' → logprob: -6.778780937194824
    7. ' %' → logprob: -7.153780937194824
    8. '>' → logprob: -7.778780937194824
    9. ' ' → logprob: -8.028780937194824
    10. '%' → logprob: -8.028780937194824

Token 182: ' supérieur' (ID: 98491)
  Prédit: ' supérieur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' supérieur' → logprob: -0.6414092183113098
    2. ' >=' → logprob: -1.516409158706665
    3. ' divisible' → logprob: -2.891409158706665
    4. '>=' → logprob: -3.016409158706665
    5. ' ' → logprob: -3.641409158706665
    6. 'sup' → logprob: -3.891409158706665
    7. '   ' → logprob: -4.141409397125244
    8. ' True' → logprob: -4.266409397125244
    9. ' inférieur' → logprob: -4.891409397125244
    10. ' sup' → logprob: -5.141409397125244

Token 183: ' ou' (ID: 2031)
  Prédit: ' ou'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ou' → logprob: -0.5043807029724121
    2. 'ou' → logprob: -1.004380702972412
    3. '   ' → logprob: -3.754380702972412
    4. 'à' → logprob: -6.254380702972412
    5. ' à' → logprob: -7.004380702972412
    6. ' or' → logprob: -7.254380702972412
    7. '    ' → logprob: -7.504380702972412
    8. 'au' → logprob: -7.504380702972412
    9. 'or' → logprob: -7.629380702972412
    10. '  ' → logprob: -7.879380702972412

Token 184: ' égal' (ID: 15059)
  Prédit: 'égal'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'égal' → logprob: -0.003779051126912236
    2. 'ég' → logprob: -5.87877893447876
    3. ' égal' → logprob: -7.62877893447876
    4. '=' → logprob: -8.253779411315918
    5. 'egal' → logprob: -9.003779411315918
    6. 'égalité' → logprob: -10.378779411315918
    7. ' ég' → logprob: -10.753779411315918
    8. 'é' → logprob: -11.128779411315918
    9. 'à' → logprob: -11.503779411315918
    10. '   ' → logprob: -11.628779411315918

Token 185: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.6442757248878479
    2. 'à' → logprob: -0.7692757248878479
    3. 'e' → logprob: -5.144275665283203
    4. '   ' → logprob: -5.769275665283203
    5. ' ' → logprob: -6.644275665283203
    6. '13' → logprob: -7.269275665283203
    7. 'a' → logprob: -8.269275665283203
    8. '  ' → logprob: -9.394275665283203
    9. ''à' → logprob: -9.644275665283203
    10. '```' → logprob: -9.644275665283203

Token 186: ' ' (ID: 220)
  Prédit: '13'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '13' → logprob: -0.1691727340221405
    2. ' ' → logprob: -2.419172763824463
    3. '18' → logprob: -3.294172763824463
    4. '20' → logprob: -4.294172763824463
    5. '10' → logprob: -5.544172763824463
    6. '15' → logprob: -5.919172763824463
    7. '16' → logprob: -6.169172763824463
    8. '17' → logprob: -6.544172763824463
    9. '14' → logprob: -6.544172763824463
    10. '25' → logprob: -7.169172763824463

Token 187: '13' (ID: 1311)
  Prédit: '13'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '13' → logprob: -0.003539605299010873
    2. ' ' → logprob: -6.378539562225342
    3. '18' → logprob: -7.128539562225342
    4. '12' → logprob: -8.3785400390625
    5. '20' → logprob: -8.6285400390625
    6. '10' → logprob: -8.7535400390625
    7. '14' → logprob: -9.2535400390625
    8. '15' → logprob: -9.3785400390625
    9. '16' → logprob: -9.7535400390625
    10. '17' → logprob: -10.5035400390625

Token 188: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.769745409488678
    2. ':' → logprob: -0.894745409488678
    3. ':
' → logprob: -3.019745349884033
    4. ',' → logprob: -3.394745349884033
    5. 'print' → logprob: -3.894745349884033
    6. ' and' → logprob: -4.644745349884033
    7. ' print' → logprob: -4.894745349884033
    8. ' et' → logprob: -5.769745349884033
    9. ' or' → logprob: -6.519745349884033
    10. ' :' → logprob: -6.519745349884033

Token 189: ' on' (ID: 402)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.26253741979599
    2. 'print' → logprob: -1.5125374794006348
    3. '   ' → logprob: -4.887537479400635
    4. ' if' → logprob: -7.137537479400635
    5. ' B' → logprob: -7.137537479400635
    6. 'B' → logprob: -8.262537002563477
    7. 'if' → logprob: -8.387537002563477
    8. ' ' → logprob: -8.762537002563477
    9. 'prix' → logprob: -9.450037002563477
    10. ' result' → logprob: -9.575037002563477

Token 190: ' affiche' (ID: 127479)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.18584159016609192
    2. 'print' → logprob: -1.8108415603637695
    3. '   ' → logprob: -5.4358415603637695
    4. ' affiche' → logprob: -7.3108415603637695
    5. ' imprime' → logprob: -8.06084156036377
    6. ' ' → logprob: -8.68584156036377
    7. 'aff' → logprob: -8.93584156036377
    8. '    ' → logprob: -9.81084156036377
    9. ' continue' → logprob: -10.31084156036377
    10. '  ' → logprob: -10.37334156036377

Token 191: ' la' (ID: 557)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '("' → logprob: -0.04457763209939003
    2. '(' → logprob: -3.1695775985717773
    3. '('' → logprob: -7.544577598571777
    4. '"' → logprob: -7.919577598571777
    5. '(A' → logprob: -8.544577598571777
    6. '(B' → logprob: -8.794577598571777
    7. '"B' → logprob: -9.544577598571777
    8. 'A' → logprob: -9.669577598571777
    9. ' "' → logprob: -10.044577598571777
    10. '"A' → logprob: -10.669577598571777

Token 192: ' valeur' (ID: 41664)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.26572075486183167
    2. 'print' → logprob: -2.390720844268799
    3. '"B' → logprob: -2.890720844268799
    4. 'B' → logprob: -3.390720844268799
    5. 'message' → logprob: -4.015720844268799
    6. ''' → logprob: -6.015720844268799
    7. '"A' → logprob: -6.015720844268799
    8. 'string' → logprob: -6.265720844268799
    9. 'val' → logprob: -6.515720844268799
    10. 'A' → logprob: -6.515720844268799

Token 193: ' entière' (ID: 61583)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.33697912096977234
    2. 'de' → logprob: -1.9619791507720947
    3. '"' → logprob: -2.4619791507720947
    4. '"B' → logprob: -4.336978912353516
    5. 'B' → logprob: -4.461978912353516
    6. ' "' → logprob: -5.086978912353516
    7. '("' → logprob: -5.211978912353516
    8. ' B' → logprob: -5.336978912353516
    9. ' ' → logprob: -5.586978912353516
    10. '(' → logprob: -5.836978912353516

Token 194: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.7222319841384888
    2. 'de' → logprob: -1.3472319841384888
    3. '(' → logprob: -2.222231864929199
    4. '(B' → logprob: -2.847231864929199
    5. 'B' → logprob: -3.222231864929199
    6. 'A' → logprob: -4.347231864929199
    7. '(A' → logprob: -4.347231864929199
    8. '("' → logprob: -4.847231864929199
    9. '"' → logprob: -5.722231864929199
    10. ' B' → logprob: -5.972231864929199

Token 195: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.22085358202457428
    2. ' B' → logprob: -1.720853567123413
    3. 'A' → logprob: -4.345853805541992
    4. ' A' → logprob: -5.470853805541992
    5. ' (' → logprob: -7.470853805541992
    6. '(B' → logprob: -7.845853805541992
    7. '(' → logprob: -8.470853805541992
    8. ' ' → logprob: -8.970853805541992
    9. '10' → logprob: -9.345853805541992
    10. '20' → logprob: -9.595853805541992

Token 196: '.
' (ID: 558)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.25996217131614685
    2. ' print' → logprob: -2.2599620819091797
    3. '   ' → logprob: -2.6349620819091797
    4. ',' → logprob: -3.1349620819091797
    5. ')' → logprob: -6.00996208190918
    6. '*' → logprob: -6.13496208190918
    7. '+' → logprob: -6.50996208190918
    8. ' ,' → logprob: -7.50996208190918
    9. '.' → logprob: -7.88496208190918
    10. ' //' → logprob: -8.13496208190918

Token 197: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01320247258991003
    2. '
' → logprob: -4.763202667236328
    3. 'print' → logprob: -5.638202667236328
    4. ' print' → logprob: -7.513202667236328
    5. '    
' → logprob: -8.013202667236328
    6. '```' → logprob: -9.513202667236328
    7. '       ' → logprob: -10.638202667236328
    8. '   ' → logprob: -11.263202667236328
    9. '\n' → logprob: -12.013202667236328
    10. ' 
' → logprob: -12.263202667236328

Token 198: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.7439819574356079
    2. '   ' → logprob: -1.118981957435608
    3. ' print' → logprob: -1.618981957435608
    4. '
' → logprob: -10.993982315063477
    5. '```' → logprob: -10.993982315063477
    6. ' ' → logprob: -11.118982315063477
    7. '    ' → logprob: -12.118982315063477
    8. '	print' → logprob: -12.118982315063477
    9. '  ' → logprob: -12.368982315063477
    10. '       ' → logprob: -13.118982315063477

Token 199: ' int' (ID: 677)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.05495687201619148
    2. ' print' → logprob: -2.9299569129943848
    3. '   ' → logprob: -9.554956436157227
    4. '```' → logprob: -12.929956436157227
    5. '
' → logprob: -14.554956436157227
    6. ' ' → logprob: -15.054956436157227
    7. 'pr' → logprob: -15.429956436157227
    8. '	print' → logprob: -15.929956436157227
    9. '    ' → logprob: -16.554956436157227
    10. '  ' → logprob: -16.804956436157227

Token 200: '(B' (ID: 8409)
  Prédit: '(B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(B' → logprob: -0.03619961068034172
    2. '(' → logprob: -3.5361995697021484
    3. 'print' → logprob: -5.661199569702148
    4. '(print' → logprob: -6.286199569702148
    5. '()' → logprob: -7.036199569702148
    6. '(A' → logprob: -9.661199569702148
    7. ' (' → logprob: -10.661199569702148
    8. '   ' → logprob: -10.911199569702148
    9. '(b' → logprob: -11.161199569702148
    10. '(
' → logprob: -11.536199569702148

Token 201: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0024732782039791346
    2. '))' → logprob: -7.1274733543396
    3. ' )' → logprob: -7.3774733543396
    4. '())' → logprob: -7.3774733543396
    5. ')
' → logprob: -8.002472877502441
    6. ')))' → logprob: -10.627472877502441
    7. '()' → logprob: -11.127472877502441
    8. '   ' → logprob: -11.627472877502441
    9. 'print' → logprob: -11.877472877502441
    10. ')#' → logprob: -12.752472877502441

Token 202: ' s' (ID: 265)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5791221857070923
    2. 'print' → logprob: -0.8291221857070923
    3. ' print' → logprob: -6.829122066497803
    4. '   ' → logprob: -7.204122066497803
    5. ' )' → logprob: -7.954122066497803
    6. '()' → logprob: -8.329122543334961
    7. '(print' → logprob: -8.579122543334961
    8. ')
' → logprob: -9.079122543334961
    9. '))' → logprob: -10.329122543334961
    10. '#' → logprob: -10.329122543334961

Token 203: ''ass' (ID: 43919)
  Prédit: 'tr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tr' → logprob: -0.10214430838823318
    2. 'print' → logprob: -3.477144241333008
    3. 'erve' → logprob: -4.102144241333008
    4. 'tring' → logprob: -4.352144241333008
    5. 'er' → logprob: -4.727144241333008
    6. '#' → logprob: -5.352144241333008
    7. 'e' → logprob: -5.727144241333008
    8. '#print' → logprob: -5.852144241333008
    9. 'how' → logprob: -5.977144241333008
    10. 'erves' → logprob: -6.852144241333008

Token 204: 'ure' (ID: 627)
  Prédit: 'ert'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ert' → logprob: -0.004641829989850521
    2. 'ure' → logprob: -5.879642009735107
    3. 'ur' → logprob: -6.629642009735107
    4. 'et' → logprob: -9.00464153289795
    5. 'urer' → logprob: -9.25464153289795
    6. 'eur' → logprob: -9.25464153289795
    7. 'er' → logprob: -9.87964153289795
    8. '#' → logprob: -10.50464153289795
    9. 'e' → logprob: -10.50464153289795
    10. 'uret' → logprob: -10.50464153289795

Token 205: ' que' (ID: 661)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.6125120520591736
    2. ' que' → logprob: -1.8625121116638184
    3. ' ' → logprob: -2.3625121116638184
    4. '(' → logprob: -2.4875121116638184
    5. ')' → logprob: -2.6125121116638184
    6. '<|end|>' → logprob: -4.112512111663818
    7. ' qu' → logprob: -4.612512111663818
    8. '  ' → logprob: -5.237512111663818
    9. '```' → logprob: -5.487512111663818
    10. ' de' → logprob: -5.612512111663818

Token 206: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.12851621210575104
    2. 'B' → logprob: -2.12851619720459
    3. ' ' → logprob: -6.75351619720459
    4. ' str' → logprob: -8.50351619720459
    5. 'print' → logprob: -10.25351619720459
    6. ' print' → logprob: -10.50351619720459
    7. '  ' → logprob: -10.50351619720459
    8. ')' → logprob: -11.37851619720459
    9. ' ' → logprob: -11.37851619720459
    10. ' le' → logprob: -11.62851619720459

Token 207: ' est' (ID: 893)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.13368633389472961
    2. '<|end|>' → logprob: -3.0086863040924072
    3. ' est' → logprob: -3.1336863040924072
    4. ' is' → logprob: -4.133686542510986
    5. ' )' → logprob: -4.758686542510986
    6. ' ' → logprob: -6.133686542510986
    7. '   ' → logprob: -6.633686542510986
    8. 'print' → logprob: -6.883686542510986
    9. '<|end|>' → logprob: -7.383686542510986
    10. ' reste' → logprob: -7.883686542510986

Token 208: ' bien' (ID: 5340)
  Prédit: ' bien'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' bien' → logprob: -0.028397470712661743
    2. ' un' → logprob: -4.278397560119629
    3. 'bien' → logprob: -4.403397560119629
    4. ' une' → logprob: -6.653397560119629
    5. '<|end|>' → logprob: -8.778397560119629
    6. ' int' → logprob: -9.403397560119629
    7. ' toujours' → logprob: -9.653397560119629
    8. 'int' → logprob: -9.778397560119629
    9. ' an' → logprob: -10.028397560119629
    10. ' ' → logprob: -10.403397560119629

Token 209: ' de' (ID: 334)
  Prédit: ' un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.021535253152251244
    2. 'un' → logprob: -4.396535396575928
    3. ' bien' → logprob: -5.771535396575928
    4. ' une' → logprob: -6.146535396575928
    5. 'int' → logprob: -6.521535396575928
    6. 'bien' → logprob: -7.021535396575928
    7. ' an' → logprob: -7.396535396575928
    8. ' int' → logprob: -8.14653491973877
    9. ' affich' → logprob: -9.39653491973877
    10. 'ent' → logprob: -9.64653491973877

Token 210: ' type' (ID: 1490)
  Prédit: ' type'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' type' → logprob: -0.16031013429164886
    2. 'type' → logprob: -1.91031014919281
    3. 'l' → logprob: -10.660309791564941
    4. 'int' → logprob: -10.785309791564941
    5. ' l' → logprob: -11.785309791564941
    6. ' integer' → logprob: -12.410309791564941
    7. '<|end|>' → logprob: -12.535309791564941
    8. ' la' → logprob: -12.660309791564941
    9. ' un' → logprob: -12.660309791564941
    10. ' ' → logprob: -12.910309791564941

Token 211: ' entier' (ID: 80473)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.023346567526459694
    2. 'int' → logprob: -3.7733466625213623
    3. ' integer' → logprob: -9.648346900939941
    4. ' ' → logprob: -11.148346900939941
    5. ' entier' → logprob: -11.273346900939941
    6. '<int' → logprob: -12.773346900939941
    7. 'integer' → logprob: -13.648346900939941
    8. ' str' → logprob: -13.773346900939941
    9. ' ent' → logprob: -14.023346900939941
    10. '=int' → logprob: -14.273346900939941

Token 212: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11577275395393372
    2. ')' → logprob: -2.6157727241516113
    3. ')
' → logprob: -4.615772724151611
    4. 'print' → logprob: -4.865772724151611
    5. '()' → logprob: -5.240772724151611
    6. '()
' → logprob: -5.490772724151611
    7. '
' → logprob: -5.865772724151611
    8. ',' → logprob: -6.240772724151611
    9. '(B' → logprob: -6.490772724151611
    10. '    
' → logprob: -6.740772724151611

Token 213: ' même' (ID: 9679)
  Prédit: ' B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.1171848326921463
    2. 'B' → logprob: -2.61718487739563
    3. ')' → logprob: -3.49218487739563
    4. ' )' → logprob: -5.617184638977051
    5. '   ' → logprob: -6.742184638977051
    6. ' print' → logprob: -7.742184638977051
    7. ' ' → logprob: -7.992184638977051
    8. 'print' → logprob: -7.992184638977051
    9. 'A' → logprob: -7.992184638977051
    10. ' A' → logprob: -8.49218463897705

Token 214: ' si' (ID: 1784)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.5719615817070007
    2. ')' → logprob: -1.9469616413116455
    3. '   ' → logprob: -1.9469616413116455
    4. ' (' → logprob: -3.8219616413116455
    5. ' )' → logprob: -3.9469616413116455
    6. ' if' → logprob: -4.071961402893066
    7. '  ' → logprob: -4.196961402893066
    8. 'print' → logprob: -4.821961402893066
    9. ' ici' → logprob: -4.946961402893066
    10. ' que' → logprob: -5.071961402893066

Token 215: ' ce' (ID: 2357)
  Prédit: ' B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.8919693231582642
    2. ' isinstance' → logprob: -0.8919693231582642
    3. ' type' → logprob: -2.1419692039489746
    4. 'B' → logprob: -3.2669692039489746
    5. 'type' → logprob: -4.391969203948975
    6. ' not' → logprob: -5.391969203948975
    7. ' ' → logprob: -5.891969203948975
    8. '  ' → logprob: -6.641969203948975
    9. ' A' → logprob: -7.141969203948975
    10. ' ' → logprob: -7.516969203948975

Token 216: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.6212682723999023
    2. 'n' → logprob: -1.1212682723999023
    3. 'B' → logprob: -2.2462682723999023
    4. ' B' → logprob: -3.8712682723999023
    5. '#' → logprob: -5.996268272399902
    6. ' is' → logprob: -6.371268272399902
    7. 'A' → logprob: -6.371268272399902
    8. ' est' → logprob: -6.996268272399902
    9. '```' → logprob: -6.996268272399902
    10. ' ' → logprob: -7.871268272399902

Token 217: ''est' (ID: 6616)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.9472628831863403
    2. ')' → logprob: -1.0722628831863403
    3. ' pas' → logprob: -1.9472628831863403
    4. 'n' → logprob: -2.447262763977051
    5. ' est' → logprob: -4.197262763977051
    6. ' )' → logprob: -4.572262763977051
    7. ')n' → logprob: -5.572262763977051
    8. 'pas' → logprob: -6.322262763977051
    9. '(n' → logprob: -7.072262763977051
    10. ''est' → logprob: -7.072262763977051

Token 218: ' pas' (ID: 2173)
  Prédit: ' pas'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pas' → logprob: -0.011441057547926903
    2. 'pas' → logprob: -4.511441230773926
    3. ' not' → logprob: -8.511441230773926
    4. '_pas' → logprob: -9.261441230773926
    5. ' ' → logprob: -10.261441230773926
    6. ' déjà' → logprob: -11.136441230773926
    7. 'not' → logprob: -11.136441230773926
    8. '  ' → logprob: -12.386441230773926
    9. ' a' → logprob: -13.136441230773926
    10. '   ' → logprob: -13.136441230773926

Token 219: ' strict' (ID: 12035)
  Prédit: ' nécessaire'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' nécessaire' → logprob: -0.6263618469238281
    2. ' pas' → logprob: -1.1263618469238281
    3. ' necessary' → logprob: -3.001361846923828
    4. 'necessary' → logprob: -3.626361846923828
    5. 'n' → logprob: -4.376361846923828
    6. 'pas' → logprob: -4.501361846923828
    7. ' necess' → logprob: -4.501361846923828
    8. 'strict' → logprob: -4.876361846923828
    9. ' né' → logprob: -5.501361846923828
    10. ' n' → logprob: -5.626361846923828

Token 220: 'ement' (ID: 962)
  Prédit: 'ement'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ement' → logprob: -0.0011406922712922096
    2. 'e' → logprob: -8.251140594482422
    3. '()' → logprob: -8.501140594482422
    4. 'if' → logprob: -8.626140594482422
    5. 'ly' → logprob: -9.126140594482422
    6. '   ' → logprob: -9.251140594482422
    7. 'int' → logprob: -9.376140594482422
    8. 'ément' → logprob: -10.501140594482422
    9. 'B' → logprob: -10.626140594482422
    10. 'ment' → logprob: -10.876140594482422

Token 221: ' nécessaire' (ID: 43098)
  Prédit: ' nécessaire'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nécessaire' → logprob: -0.020714255049824715
    2. ' necessary' → logprob: -4.645714282989502
    3. 'necessary' → logprob: -4.645714282989502
    4. ' necess' → logprob: -8.020713806152344
    5. 'necess' → logprob: -8.270713806152344
    6. 'né' → logprob: -8.770713806152344
    7. ' nécessaires' → logprob: -8.895713806152344
    8. '必要' → logprob: -9.145713806152344
    9. 'strict' → logprob: -9.395713806152344
    10. 'n' → logprob: -10.395713806152344

Token 222: ' ici' (ID: 27994)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.17143884301185608
    2. 'print' → logprob: -2.6714389324188232
    3. '
' → logprob: -3.0464389324188232
    4. ')' → logprob: -4.171438694000244
    5. ')
' → logprob: -4.171438694000244
    6. '    
' → logprob: -5.421438694000244
    7. ' print' → logprob: -6.171438694000244
    8. 'B' → logprob: -7.421438694000244
    9. '()
' → logprob: -7.796438694000244
    10. '(B' → logprob: -7.796438694000244

Token 223: ' car' (ID: 1669)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.044853728264570236
    2. 'print' → logprob: -3.294853687286377
    3. '
' → logprob: -5.794853687286377
    4. '    
' → logprob: -6.669853687286377
    5. ' print' → logprob: -6.919853687286377
    6. ':' → logprob: -7.669853687286377
    7. ',' → logprob: -7.919853687286377
    8. ')' → logprob: -8.044854164123535
    9. ')
' → logprob: -8.919854164123535
    10. ':
' → logprob: -9.794854164123535

Token 224: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.05492832511663437
    2. 'B' → logprob: -2.9299283027648926
    3. ' ' → logprob: -10.55492877960205
    4. ' il' → logprob: -12.05492877960205
    5. ' ' → logprob: -12.42992877960205
    6. ' déjà' → logprob: -13.67992877960205
    7. ' on' → logprob: -13.80492877960205
    8. ' already' → logprob: -14.05492877960205
    9. ' est' → logprob: -14.42992877960205
    10. ',' → logprob: -14.67992877960205

Token 225: ' est' (ID: 893)
  Prédit: ' est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' est' → logprob: -0.4898758828639984
    2. ' is' → logprob: -1.1148759126663208
    3. ')' → logprob: -2.9898757934570312
    4. 'est' → logprob: -5.989875793457031
    5. 'is' → logprob: -6.114875793457031
    6. ' )' → logprob: -6.864875793457031
    7. '#' → logprob: -7.489875793457031
    8. '   ' → logprob: -7.739875793457031
    9. '```' → logprob: -7.739875793457031
    10. 'already' → logprob: -8.114875793457031

Token 226: ' déjà' (ID: 21229)
  Prédit: 'dé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dé' → logprob: -0.021102432161569595
    2. ' déjà' → logprob: -4.021102428436279
    3. '#' → logprob: -6.896102428436279
    4. 'd' → logprob: -7.521102428436279
    5. 'already' → logprob: -7.521102428436279
    6. ' dé' → logprob: -8.271102905273438
    7. ' already' → logprob: -9.146102905273438
    8. 'de' → logprob: -9.271102905273438
    9. '
' → logprob: -9.521102905273438
    10. 'un' → logprob: -9.896102905273438

Token 227: ' un' (ID: 537)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.2264034003019333
    2. 'un' → logprob: -1.7264033555984497
    3. ' un' → logprob: -4.10140323638916
    4. ' int' → logprob: -5.60140323638916
    5. 'ent' → logprob: -5.85140323638916
    6. 'une' → logprob: -7.97640323638916
    7. 'dé' → logprob: -7.97640323638916
    8. 'de' → logprob: -8.22640323638916
    9. ' une' → logprob: -8.97640323638916
    10. 'an' → logprob: -9.10140323638916

Token 228: ' entier' (ID: 80473)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.003415705170482397
    2. 'ent' → logprob: -6.378415584564209
    3. ' int' → logprob: -6.878415584564209
    4. 'B' → logprob: -7.753415584564209
    5. 'n' → logprob: -8.878416061401367
    6. 'integer' → logprob: -9.878416061401367
    7. 'type' → logprob: -11.253416061401367
    8. ' entier' → logprob: -11.378416061401367
    9. 'A' → logprob: -12.003416061401367
    10. 'print' → logprob: -12.128416061401367

Token 229: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04096611961722374
    2. 'print' → logprob: -3.290966033935547
    3. ')' → logprob: -6.415966033935547
    4. ' print' → logprob: -7.290966033935547
    5. '    
' → logprob: -8.540966033935547
    6. '
' → logprob: -8.540966033935547
    7. ',' → logprob: -9.540966033935547
    8. ')
' → logprob: -9.665966033935547
    9. '  ' → logprob: -11.415966033935547
    10. '    ' → logprob: -11.790966033935547

Token 230: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007357797585427761
    2. 'print' → logprob: -5.007357597351074
    3. ' print' → logprob: -7.382357597351074
    4. '       ' → logprob: -11.757357597351074
    5. '```' → logprob: -12.507357597351074
    6. '    
' → logprob: -12.882357597351074
    7. '
' → logprob: -13.007357597351074
    8. '   ' → logprob: -13.132357597351074
    9. '  ' → logprob: -14.257357597351074
    10. '	print' → logprob: -14.757357597351074

Token 231: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2838815450668335
    2. 'print' → logprob: -1.4088815450668335
    3. ' print' → logprob: -5.908881664276123
    4. '       ' → logprob: -12.658881187438965
    5. '  ' → logprob: -13.158881187438965
    6. '```' → logprob: -13.533881187438965
    7. '	print' → logprob: -13.533881187438965
    8. '    
' → logprob: -13.658881187438965
    9. ' ' → logprob: -13.658881187438965
    10. '   ' → logprob: -14.283881187438965

Token 232: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0216885507106781
    2. ' print' → logprob: -4.021688461303711
    3. '   ' → logprob: -5.646688461303711
    4. '```' → logprob: -14.146688461303711
    5. '
' → logprob: -14.396688461303711
    6. ' ' → logprob: -14.646688461303711
    7. 'else' → logprob: -14.771688461303711
    8. '	print' → logprob: -15.021688461303711
    9. '  ' → logprob: -15.396688461303711
    10. '    
' → logprob: -16.14668846130371

Token 233: '()' (ID: 416)
  Prédit: '(B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(B' → logprob: -0.0161854550242424
    2. '(' → logprob: -4.516185283660889
    3. '(int' → logprob: -5.391185283660889
    4. '()' → logprob: -7.641185283660889
    5. '(print' → logprob: -9.891185760498047
    6. ' (' → logprob: -11.141185760498047
    7. '(b' → logprob: -12.016185760498047
    8. 'int' → logprob: -12.641185760498047
    9. '(A' → logprob: -12.891185760498047
    10. '(f' → logprob: -12.891185760498047

Token 234: ' affiche' (ID: 127479)
  Prédit: '(B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(B' → logprob: -0.16035594046115875
    2. '(' → logprob: -1.9103559255599976
    3. '()' → logprob: -9.785355567932129
    4. '(int' → logprob: -10.660355567932129
    5. '(print' → logprob: -10.785355567932129
    6. '(A' → logprob: -11.035355567932129
    7. ' (' → logprob: -12.410355567932129
    8. '(b' → logprob: -12.535355567932129
    9. 'print' → logprob: -13.910355567932129
    10. '("' → logprob: -13.910355567932129

Token 235: ' la' (ID: 557)
  Prédit: '(B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(B' → logprob: -0.0032645766623318195
    2. '(' → logprob: -6.628264427185059
    3. '(int' → logprob: -6.878264427185059
    4. 'B' → logprob: -7.128264427185059
    5. 'int' → logprob: -9.253264427185059
    6. '(abs' → logprob: -13.003264427185059
    7. '()' → logprob: -13.128264427185059
    8. ' B' → logprob: -13.503264427185059
    9. '(str' → logprob: -13.753264427185059
    10. '(b' → logprob: -14.253264427185059

Token 236: ' valeur' (ID: 41664)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.025925403460860252
    2. 'int' → logprob: -3.775925397872925
    3. ' B' → logprob: -6.525925636291504
    4. 'val' → logprob: -7.400925636291504
    5. 'value' → logprob: -8.150925636291504
    6. '(B' → logprob: -8.775925636291504
    7. 'ent' → logprob: -9.775925636291504
    8. ' int' → logprob: -10.025925636291504
    9. 'b' → logprob: -10.775925636291504
    10. '(int' → logprob: -10.900925636291504

Token 237: ' sur' (ID: 1512)
  Prédit: '(B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(B' → logprob: -0.0063972617499530315
    2. '(' → logprob: -5.131397247314453
    3. '(int' → logprob: -7.881397247314453
    4. 'B' → logprob: -10.256397247314453
    5. 'int' → logprob: -10.381397247314453
    6. ' (' → logprob: -11.381397247314453
    7. '()' → logprob: -12.381397247314453
    8. '(
' → logprob: -13.381397247314453
    9. '(b' → logprob: -13.506397247314453
    10. '(abs' → logprob: -13.631397247314453

Token 238: ' la' (ID: 557)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.554489016532898
    2. 'la' → logprob: -0.929489016532898
    3. 'l' → logprob: -3.9294891357421875
    4. ' la' → logprob: -5.0544891357421875
    5. 'une' → logprob: -6.0544891357421875
    6. ' une' → logprob: -7.8044891357421875
    7. 'le' → logprob: -7.9294891357421875
    8. '(B' → logprob: -7.9294891357421875
    9. 'B' → logprob: -8.554489135742188
    10. '(' → logprob: -8.554489135742188

Token 239: ' sortie' (ID: 52761)
  Prédit: 'console'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'console' → logprob: -0.03371693566441536
    2. 'stdout' → logprob: -4.908717155456543
    3. 'terminal' → logprob: -5.158717155456543
    4. 'screen' → logprob: -5.533717155456543
    5. 'output' → logprob: -5.783717155456543
    6. 'ligne' → logprob: -5.783717155456543
    7. ' console' → logprob: -6.033717155456543
    8. 'é' → logprob: -6.033717155456543
    9. 'fonction' → logprob: -7.158717155456543
    10. 'standard' → logprob: -7.158717155456543

Token 240: ' standard' (ID: 7024)
  Prédit: '(B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(B' → logprob: -0.21173374354839325
    2. '()' → logprob: -1.7117336988449097
    3. '(' → logprob: -4.586733818054199
    4. 'B' → logprob: -10.4617338180542
    5. '("")' → logprob: -10.9617338180542
    6. '   ' → logprob: -12.0867338180542
    7. ')' → logprob: -12.3367338180542
    8. '(A' → logprob: -12.5867338180542
    9. ' B' → logprob: -12.8367338180542
    10. '(b' → logprob: -13.3367338180542

Token 241: ' (' (ID: 350)
  Prédit: '(B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(B' → logprob: -0.006207481492310762
    2. '(' → logprob: -5.131207466125488
    3. 'B' → logprob: -8.881207466125488
    4. '   ' → logprob: -9.756207466125488
    5. '(int' → logprob: -10.506207466125488
    6. ' B' → logprob: -10.631207466125488
    7. '(b' → logprob: -12.006207466125488
    8. ' (' → logprob: -12.131207466125488
    9. 'print' → logprob: -12.256207466125488
    10. '()' → logprob: -12.381207466125488

Token 242: 'é' (ID: 377)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.1474533975124359
    2. ' B' → logprob: -2.2724533081054688
    3. ')' → logprob: -3.3974533081054688
    4. '   ' → logprob: -8.147453308105469
    5. ' )' → logprob: -9.022453308105469
    6. ' ' → logprob: -10.272453308105469
    7. 'b' → logprob: -10.272453308105469
    8. 'end' → logprob: -10.647453308105469
    9. ')
' → logprob: -11.022453308105469
    10. '")' → logprob: -11.897453308105469

Token 243: 'cran' (ID: 58375)
  Prédit: 'cran'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cran' → logprob: -3.8889261304575484e-06
    2. ' cran' → logprob: -13.750003814697266
    3. 'criture' → logprob: -14.375003814697266
    4. '#' → logprob: -15.000003814697266
    5. 'cr' → logprob: -15.125003814697266
    6. ''écran' → logprob: -15.500003814697266
    7. '__' → logprob: -15.750003814697266
    8. 'rance' → logprob: -16.250003814697266
    9. 'crt' → logprob: -16.375003814697266
    10. 'ance' → logprob: -16.500003814697266

Token 244: ' du' (ID: 1462)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.01200883463025093
    2. '(B' → logprob: -4.5120086669921875
    3. ')
' → logprob: -7.2620086669921875
    4. 'B' → logprob: -9.387008666992188
    5. '(' → logprob: -10.012008666992188
    6. ' )' → logprob: -10.637008666992188
    7. '   ' → logprob: -10.637008666992188
    8. '()' → logprob: -11.012008666992188
    9. ').' → logprob: -11.012008666992188
    10. ',' → logprob: -11.262008666992188

Token 245: ' terminal' (ID: 21801)
  Prédit: ' terminal'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' terminal' → logprob: -0.8018974661827087
    2. 'ordinateur' → logprob: -1.4268975257873535
    3. 'terminal' → logprob: -1.6768975257873535
    4. 'console' → logprob: -2.6768975257873535
    5. ' console' → logprob: -3.8018975257873535
    6. 'programme' → logprob: -4.5518975257873535
    7. 'python' → logprob: -5.0518975257873535
    8. ' code' → logprob: -5.6768975257873535
    9. ' ordinateur' → logprob: -5.9268975257873535
    10. ' programme' → logprob: -6.3018975257873535

Token 246: ').
' (ID: 6294)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0016762561863288283
    2. ')
' → logprob: -7.126676082611084
    3. '(B' → logprob: -7.501676082611084
    4. ').' → logprob: -9.376676559448242
    5. '):' → logprob: -9.751676559448242
    6. '   ' → logprob: -9.876676559448242
    7. ',' → logprob: -10.001676559448242
    8. 'B' → logprob: -10.251676559448242
    9. ' )' → logprob: -11.001676559448242
    10. ',B' → logprob: -11.751676559448242

Token 247: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02414156310260296
    2. 'print' → logprob: -3.774141550064087
    3. ' print' → logprob: -7.024141788482666
    4. '```' → logprob: -12.399141311645508
    5. '       ' → logprob: -14.399141311645508
    6. '	print' → logprob: -14.649141311645508
    7. '   ' → logprob: -14.899141311645508
    8. '  ' → logprob: -16.774141311645508
    9. ' ' → logprob: -17.149141311645508
    10. '    
' → logprob: -17.524141311645508

Token 248: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.40088143944740295
    2. 'print' (adapté à ' print') → logprob: -1.1508814096450806
    3. ' print' → logprob: -4.275881290435791
    4. '	print' → logprob: -12.52588176727295
    5. '       ' → logprob: -12.77588176727295
    6. '```' → logprob: -12.90088176727295
    7. '  ' → logprob: -13.77588176727295
    8. ' ' → logprob: -13.90088176727295
    9. '   ' → logprob: -14.02588176727295
    10. '    ' → logprob: -15.15088176727295

Token 249: '(int' (ID: 2742)
  Prédit: '(B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(B' → logprob: -0.0030052734073251486
    2. '(' → logprob: -6.128005504608154
    3. '(int' → logprob: -7.128005504608154
    4. ' (' → logprob: -11.628005027770996
    5. '(A' → logprob: -12.753005027770996
    6. '()' → logprob: -13.378005027770996
    7. 'B' → logprob: -13.753005027770996
    8. '(b' → logprob: -14.253005027770996
    9. '((' → logprob: -14.378005027770996
    10. 'int' → logprob: -14.503005027770996

Token 250: '(B' (ID: 8409)
  Prédit: '(B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(B' → logprob: -0.0031725990120321512
    2. 'B' → logprob: -5.878172397613525
    3. '(' → logprob: -8.003172874450684
    4. ' (' → logprob: -11.128172874450684
    5. ' B' → logprob: -11.253172874450684
    6. ')' → logprob: -12.503172874450684
    7. ' ' → logprob: -14.378172874450684
    8. '(
' → logprob: -14.878172874450684
    9. '   ' → logprob: -15.753172874450684
    10. '	B' → logprob: -15.878172874450684

Token 251: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0142140444368124
    2. ')' → logprob: -4.264214038848877
    3. '))
' → logprob: -10.139214515686035
    4. ')))' → logprob: -12.264214515686035
    5. ' ))' → logprob: -12.764214515686035
    6. '()))' → logprob: -13.639214515686035
    7. ')
' → logprob: -14.639214515686035
    8. '))

' → logprob: -15.139214515686035
    9. ' )' → logprob: -15.139214515686035
    10. '   ' → logprob: -15.389214515686035

Token 252: '#' (ID: 2)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0008110555354505777
    2. 'elif' → logprob: -7.1258111000061035
    3. ' else' → logprob: -12.000810623168945
    4. '```' → logprob: -15.250810623168945
    5. 'elser' → logprob: -16.875810623168945
    6. '#else' → logprob: -17.125810623168945
    7. '<|end|>' → logprob: -17.500810623168945
    8. 'el' → logprob: -17.875810623168945
    9. '    
' → logprob: -18.125810623168945
    10. 'elses' → logprob: -18.125810623168945

Token 253: ' La' (ID: 3038)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0031822288874536753
    2. 'elif' → logprob: -5.753182411193848
    3. ' else' → logprob: -12.378182411193848
    4. 'el' → logprob: -15.878182411193848
    5. 'elseif' → logprob: -16.62818145751953
    6. '```' → logprob: -17.25318145751953
    7. 'els' → logprob: -17.37818145751953
    8. 'elser' → logprob: -17.87818145751953
    9. 'elses' → logprob: -18.00318145751953
    10. 'elsif' → logprob: -18.00318145751953

Token 254: ' clause' (ID: 45470)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.2879221439361572
    2. 'elif' → logprob: -1.4129221439361572
    3. ' else' → logprob: -5.287921905517578
    4. 'el' → logprob: -7.162921905517578
    5. ' elif' → logprob: -7.162921905517578
    6. 'e' → logprob: -9.287921905517578
    7. 'els' → logprob: -11.287921905517578
    8. 'eli' → logprob: -11.287921905517578
    9. 'elser' → logprob: -12.287921905517578
    10. 'elseif' → logprob: -12.537921905517578

Token 255: ' elif' (ID: 9497)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.08612902462482452
    2. ' else' → logprob: -2.7111289501190186
    3. 'elif' → logprob: -4.211129188537598
    4. ' elif' → logprob: -6.711129188537598
    5. 'el' → logprob: -11.586129188537598
    6. 'e' → logprob: -13.211129188537598
    7. '_else' → logprob: -13.461129188537598
    8. 'els' → logprob: -14.586129188537598
    9. 'elser' → logprob: -14.961129188537598
    10. 'elses' → logprob: -15.086129188537598

Token 256: ' permet' (ID: 11798)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.3346942663192749
    2. 'A' → logprob: -2.0846943855285645
    3. ' B' → logprob: -2.7096943855285645
    4. 'elif' → logprob: -2.8346943855285645
    5. ' elif' → logprob: -3.8346943855285645
    6. 'B' → logprob: -4.5846943855285645
    7. ':' → logprob: -7.2096943855285645
    8. ' ' → logprob: -7.4596943855285645
    9. '   ' → logprob: -7.7096943855285645
    10. 'if' → logprob: -8.209693908691406

Token 257: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.3885901868343353
    2. ' d' → logprob: -1.2635902166366577
    3. '   ' → logprob: -4.263590335845947
    4. 'de' → logprob: -4.513590335845947
    5. 'd' → logprob: -5.263590335845947
    6. ' A' → logprob: -5.263590335845947
    7. 'A' → logprob: -6.013590335845947
    8. ' ' → logprob: -7.638590335845947
    9. '    ' → logprob: -8.388589859008789
    10. ' à' → logprob: -8.513589859008789

Token 258: ' tester' (ID: 51819)
  Prédit: ' continuer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' continuer' → logprob: -1.2109026908874512
    2. 'A' → logprob: -1.4609026908874512
    3. ' vérifier' → logprob: -1.7109026908874512
    4. ' tester' → logprob: -2.085902690887451
    5. 'contin' → logprob: -3.085902690887451
    6. ' A' → logprob: -3.335902690887451
    7. 'elif' → logprob: -3.460902690887451
    8. 'tester' → logprob: -4.460902690887451
    9. ' ajouter' → logprob: -5.085902690887451
    10. 's' → logprob: -5.210902690887451

Token 259: ' une' (ID: 2463)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.6327999234199524
    2. ' A' → logprob: -1.0077998638153076
    3. ' une' → logprob: -3.0077998638153076
    4. 'une' → logprob: -3.5077998638153076
    5. ' B' → logprob: -4.507800102233887
    6. 'B' → logprob: -4.757800102233887
    7. 'elif' → logprob: -6.507800102233887
    8. 'if' → logprob: -7.507800102233887
    9. ' un' → logprob: -7.632800102233887
    10. ' ' → logprob: -7.632800102233887

Token 260: ' seconde' (ID: 66204)
  Prédit: ' autre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' autre' → logprob: -0.12353264540433884
    2. ' condition' → logprob: -3.24853253364563
    3. 'condition' → logprob: -3.24853253364563
    4. 'aut' → logprob: -3.62353253364563
    5. ' deuxième' → logprob: -5.998532772064209
    6. 'prem' → logprob: -5.998532772064209
    7. ' ' → logprob: -7.123532772064209
    8. ' seconde' → logprob: -7.123532772064209
    9. ' nouvelle' → logprob: -7.248532772064209
    10. ' valeur' → logprob: -7.248532772064209

Token 261: ' condition' (ID: 7060)
  Prédit: ' condition'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' condition' → logprob: -0.3166656792163849
    2. 'condition' → logprob: -1.3166656494140625
    3. ':' → logprob: -5.8166656494140625
    4. 'fois' → logprob: -8.066665649414062
    5. 'cond' → logprob: -10.066665649414062
    6. ' ' → logprob: -11.066665649414062
    7. '_condition' → logprob: -11.316665649414062
    8. '(condition' → logprob: -12.316665649414062
    9. ' :' → logprob: -12.566665649414062
    10. ' ' → logprob: -12.691665649414062

Token 262: ' si' (ID: 1784)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.07167507708072662
    2. ' elif' → logprob: -3.0716750621795654
    3. ' A' → logprob: -4.6966753005981445
    4. ':' → logprob: -5.0716753005981445
    5. 'A' → logprob: -5.5716753005981445
    6. '   ' → logprob: -6.4466753005981445
    7. ' B' → logprob: -6.9466753005981445
    8. 'B' → logprob: -8.071675300598145
    9. ',' → logprob: -8.821675300598145
    10. 'else' → logprob: -8.821675300598145

Token 263: ' la' (ID: 557)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.407266765832901
    2. ' A' → logprob: -1.2822667360305786
    3. ' la' → logprob: -3.782266855239868
    4. ' not' → logprob: -4.157266616821289
    5. 'not' → logprob: -5.157266616821289
    6. 'la' → logprob: -5.407266616821289
    7. ' B' → logprob: -6.157266616821289
    8. 'B' → logprob: -6.407266616821289
    9. '#' → logprob: -6.907266616821289
    10. ' ' → logprob: -7.782266616821289

Token 264: ' première' (ID: 23423)
  Prédit: 'prem'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prem' → logprob: -0.21549338102340698
    2. 'pr' → logprob: -1.7154934406280518
    3. ' première' → logprob: -5.090493202209473
    4. 'condition' → logprob: -5.965493202209473
    5. 'preced' → logprob: -6.465493202209473
    6. ' précédente' → logprob: -6.965493202209473
    7. 'pré' → logprob: -7.090493202209473
    8. 'if' → logprob: -7.340493202209473
    9. '#' → logprob: -7.715493202209473
    10. 'previous' → logprob: -8.965493202209473

Token 265: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.4539554715156555
    2. 'n' → logprob: -1.2039554119110107
    3. ' condition' → logprob: -3.2039554119110107
    4. 'condition' → logprob: -4.45395565032959
    5. ':' → logprob: -5.32895565032959
    6. 'if' → logprob: -6.32895565032959
    7. 'elif' → logprob: -6.32895565032959
    8. 'est' → logprob: -6.95395565032959
    9. 'ne' → logprob: -7.45395565032959
    10. 'A' → logprob: -7.57895565032959

Token 266: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.37141793966293335
    2. 'est' → logprob: -2.121417999267578
    3. 'n' → logprob: -2.996417999267578
    4. '#' → logprob: -3.246417999267578
    5. 'o' → logprob: -3.496417999267578
    6. 'e' → logprob: -4.121417999267578
    7. 'pas' → logprob: -4.621417999267578
    8. '’est' → logprob: -4.746417999267578
    9. 'a' → logprob: -4.871417999267578
    10. 'on' → logprob: -5.121417999267578

Token 267: ' pas' (ID: 2173)
  Prédit: 'pas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pas' → logprob: -0.005277038086205721
    2. ' pas' → logprob: -5.880277156829834
    3. 'False' → logprob: -6.130277156829834
    4. 'Pas' → logprob: -8.380276679992676
    5. '#' → logprob: -10.880276679992676
    6. '_pas' → logprob: -11.255276679992676
    7. 'not' → logprob: -11.505276679992676
    8. ' False' → logprob: -11.630276679992676
    9. 'True' → logprob: -13.005276679992676
    10. 'f' → logprob: -13.005276679992676

Token 268: ' vér' (ID: 42524)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.06858228147029877
    2. 'True' → logprob: -3.06858229637146
    3. ' True' → logprob: -4.693582057952881
    4. 's' → logprob: -4.693582057952881
    5. 'true' → logprob: -7.443582057952881
    6. 'pas' → logprob: -7.943582057952881
    7. ' vraie' → logprob: -9.068582534790039
    8. 'ré' → logprob: -9.443582534790039
    9. 'valid' → logprob: -9.693582534790039
    10. 'faite' → logprob: -9.818582534790039

Token 269: 'ifiée' (ID: 88506)
  Prédit: 'ifiée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifiée' → logprob: -0.177575021982193
    2. 'ue' → logprob: -3.67757511138916
    3. 'al' → logprob: -3.80257511138916
    4. 'fi' → logprob: -4.17757511138916
    5. 'a' → logprob: -4.30257511138916
    6. 'o' → logprob: -4.80257511138916
    7. 'ifie' → logprob: -4.92757511138916
    8. 'if' → logprob: -5.17757511138916
    9. 'ie' → logprob: -5.30257511138916
    10. 'i' → logprob: -5.30257511138916

Token 270: '.
' (ID: 558)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.005322935525327921
    2. ' elif' → logprob: -5.2553229331970215
    3. ':' → logprob: -9.88032341003418
    4. 'el' → logprob: -10.50532341003418
    5. 'else' → logprob: -12.00532341003418
    6. '   ' → logprob: -13.50532341003418
    7. 'eli' → logprob: -14.63032341003418
    8. 'elsif' → logprob: -14.63032341003418
    9. ',' → logprob: -14.75532341003418
    10. ':
' → logprob: -15.38032341003418

Token 271: '#' (ID: 2)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'elif' → logprob: -4.320199877838604e-07
    2. 'el' → logprob: -15.75
    3. ' elif' → logprob: -15.75
    4. 'else' → logprob: -17.5
    5. 'eli' → logprob: -17.875
    6. 'elseif' → logprob: -20.375
    7. 'elsif' → logprob: -21.75
    8. '#elif' → logprob: -22.125
    9. 'El' → logprob: -22.375
    10. '```' → logprob: -23.125

Token 272: ' Ici' (ID: 145754)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'elif' → logprob: -8.2994620242971e-06
    2. 'el' → logprob: -12.125008583068848
    3. 'else' → logprob: -13.375008583068848
    4. ' elif' → logprob: -13.750008583068848
    5. 'eli' → logprob: -15.750008583068848
    6. 'e' → logprob: -18.75000762939453
    7. 'elseif' → logprob: -19.25000762939453
    8. 'elsif' → logprob: -20.12500762939453
    9. 'elf' → logprob: -20.25000762939453
    10. 'els' → logprob: -20.87500762939453

Token 273: ',' (ID: 11)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.020811282098293304
    2. ' elif' → logprob: -3.8958113193511963
    3. 'el' → logprob: -9.270811080932617
    4. ' A' → logprob: -9.645811080932617
    5. ':' → logprob: -10.520811080932617
    6. ' B' → logprob: -10.895811080932617
    7. 'A' → logprob: -10.895811080932617
    8. '   ' → logprob: -11.145811080932617
    9. ' el' → logprob: -11.270811080932617
    10. 'B' → logprob: -12.395811080932617

Token 274: ' on' (ID: 402)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.2463480830192566
    2. 'elif' → logprob: -1.8713481426239014
    3. ' A' → logprob: -3.3713481426239014
    4. 'B' → logprob: -3.6213481426239014
    5. ' B' → logprob: -6.246347904205322
    6. ' elif' → logprob: -7.996347904205322
    7. 'else' → logprob: -8.12134838104248
    8. ' ' → logprob: -8.49634838104248
    9. 'if' → logprob: -8.62134838104248
    10. '12' → logprob: -9.62134838104248

Token 275: ' vér' (ID: 42524)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.025341415777802467
    2. ' elif' → logprob: -3.775341510772705
    3. 'A' → logprob: -6.900341510772705
    4. ' A' → logprob: -7.775341510772705
    5. 'B' → logprob: -8.650341033935547
    6. 'else' → logprob: -9.275341033935547
    7. ' B' → logprob: -9.275341033935547
    8. 'print' → logprob: -9.275341033935547
    9. 'el' → logprob: -9.525341033935547
    10. ' print' → logprob: -10.650341033935547

Token 276: 'ifie' (ID: 46409)
  Prédit: 'ifie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifie' → logprob: -0.004652742296457291
    2. 'if' → logprob: -5.379652976989746
    3. 'ife' → logprob: -10.879652976989746
    4. 'ifi' → logprob: -12.129652976989746
    5. '#' → logprob: -13.129652976989746
    6. 'ifié' → logprob: -13.504652976989746
    7. 'ifiez' → logprob: -13.754652976989746
    8. 'elif' → logprob: -15.004652976989746
    9. 'ifies' → logprob: -15.129652976989746
    10. '
' → logprob: -15.379652976989746

Token 277: ' que' (ID: 661)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.09104213863611221
    2. ' elif' → logprob: -3.4660420417785645
    3. 'if' → logprob: -3.8410420417785645
    4. ' si' → logprob: -4.5910420417785645
    5. ' if' → logprob: -4.8410420417785645
    6. ' ' → logprob: -5.5910420417785645
    7. 'A' → logprob: -5.8410420417785645
    8. 'B' → logprob: -5.9660420417785645
    9. ' A' → logprob: -6.2160420417785645
    10. 'si' → logprob: -6.2160420417785645

Token 278: ' la' (ID: 557)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.3042864501476288
    2. ' A' → logprob: -1.5542864799499512
    3. 'B' → logprob: -3.429286479949951
    4. ' B' → logprob: -4.429286479949951
    5. ' ' → logprob: -5.679286479949951
    6. '13' → logprob: -6.929286479949951
    7. '12' → logprob: -7.179286479949951
    8. '10' → logprob: -7.554286479949951
    9. '0' → logprob: -8.179286003112793
    10. '1' → logprob: -9.304286003112793

Token 279: ' valeur' (ID: 41664)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.17011111974716187
    2. 'B' → logprob: -2.0451111793518066
    3. '13' → logprob: -5.295111179351807
    4. '12' → logprob: -5.545111179351807
    5. '10' → logprob: -5.795111179351807
    6. '0' → logprob: -5.795111179351807
    7. '7' → logprob: -6.170111179351807
    8. ' A' → logprob: -6.545111179351807
    9. '11' → logprob: -6.545111179351807
    10. 'elif' → logprob: -6.920111179351807

Token 280: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -1.1652863025665283
    2. 'B' → logprob: -1.2902863025665283
    3. 'de' → logprob: -1.4152863025665283
    4. 'A' → logprob: -2.0402863025665283
    5. 'elif' → logprob: -4.040286064147949
    6. ' B' → logprob: -4.415286064147949
    7. ' A' → logprob: -5.415286064147949
    8. '   ' → logprob: -6.040286064147949
    9. 'if' → logprob: -7.290286064147949
    10. ' elif' → logprob: -7.540286064147949

Token 281: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.08152151852846146
    2. 'B' → logprob: -2.581521511077881
    3. '13' → logprob: -6.956521511077881
    4. '0' → logprob: -7.331521511077881
    5. '12' → logprob: -8.206521987915039
    6. ' A' → logprob: -8.331521987915039
    7. '10' → logprob: -9.081521987915039
    8. '1' → logprob: -9.581521987915039
    9. ' B' → logprob: -9.956521987915039
    10. '7' → logprob: -9.956521987915039

Token 282: ' est' (ID: 893)
  Prédit: '<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<' → logprob: -0.6204234957695007
    2. ' <' → logprob: -0.8704234957695007
    3. '>' → logprob: -4.120423316955566
    4. ' >=' → logprob: -4.870423316955566
    5. '>=' → logprob: -4.995423316955566
    6. ' >' → logprob: -5.120423316955566
    7. ' est' → logprob: -6.120423316955566
    8. '<=' → logprob: -6.370423316955566
    9. ' <=' → logprob: -6.495423316955566
    10. ' is' → logprob: -7.995423316955566

Token 283: ' comprise' (ID: 68545)
  Prédit: '<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '<' → logprob: -0.7173672318458557
    2. 'strict' → logprob: -1.342367172241211
    3. 'inf' → logprob: -2.092367172241211
    4. ' inf' → logprob: -3.092367172241211
    5. ' <' → logprob: -3.217367172241211
    6. '>' → logprob: -3.717367172241211
    7. 'infer' → logprob: -5.342367172241211
    8. '>=' → logprob: -5.717367172241211
    9. ' strict' → logprob: -6.467367172241211
    10. ' supérieure' → logprob: -6.842367172241211

Token 284: ' entre' (ID: 3853)
  Prédit: ' entre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' entre' → logprob: -0.677912712097168
    2. 'entre' → logprob: -0.927912712097168
    3. 'between' → logprob: -3.177912712097168
    4. 'strict' → logprob: -3.677912712097168
    5. ' between' → logprob: -3.802912712097168
    6. 'elif' → logprob: -6.052912712097168
    7. ' strictly' → logprob: -6.802912712097168
    8. ' strict' → logprob: -7.052912712097168
    9. '>' → logprob: -7.177912712097168
    10. '>=' → logprob: -7.677912712097168

Token 285: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.1357858031988144
    2. '1' → logprob: -3.0107858180999756
    3. '2' → logprob: -3.8857858180999756
    4. '3' → logprob: -4.1357855796813965
    5. '7' → logprob: -4.2607855796813965
    6. '6' → logprob: -4.5107855796813965
    7. '4' → logprob: -5.1357855796813965
    8. '5' → logprob: -5.7607855796813965
    9. '10' → logprob: -5.7607855796813965
    10. '8' → logprob: -6.2607855796813965

Token 286: '6' (ID: 21)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.07148142904043198
    2. '1' → logprob: -3.196481466293335
    3. '3' → logprob: -5.196481227874756
    4. '6' → logprob: -5.446481227874756
    5. '2' → logprob: -5.571481227874756
    6. '4' → logprob: -5.696481227874756
    7. '10' → logprob: -5.696481227874756
    8. '7' → logprob: -5.696481227874756
    9. '5' → logprob: -6.071481227874756
    10. '8' → logprob: -6.821481227874756

Token 287: ' et' (ID: 859)
  Prédit: 'and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'and' → logprob: -0.7723364233970642
    2. ' and' → logprob: -0.8973364233970642
    3. 'et' → logprob: -2.397336483001709
    4. ' et' → logprob: -3.272336483001709
    5. '<=' → logprob: -7.397336483001709
    6. '```' → logprob: -8.89733600616455
    7. ' ' → logprob: -9.02233600616455
    8. ' (' → logprob: -9.14733600616455
    9. ')' → logprob: -9.52233600616455
    10. '>=' → logprob: -9.64733600616455

Token 288: ' ' (ID: 220)
  Prédit: '12'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '12' → logprob: -0.00866858009248972
    2. ' ' → logprob: -4.758668422698975
    3. '11' → logprob: -10.008668899536133
    4. '1' → logprob: -13.008668899536133
    5. '13' → logprob: -13.633668899536133
    6. '10' → logprob: -13.946168899536133
    7. '
' → logprob: -14.508668899536133
    8. '   ' → logprob: -14.633668899536133
    9. '```' → logprob: -14.883668899536133
    10. '<' → logprob: -15.258668899536133

Token 289: '12' (ID: 899)
  Prédit: '12'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '12' → logprob: -8.08944896562025e-05
    2. '11' → logprob: -10.000081062316895
    3. '1' → logprob: -11.625081062316895
    4. '13' → logprob: -11.625081062316895
    5. ' ' → logprob: -12.125081062316895
    6. '10' → logprob: -12.875081062316895
    7. '2' → logprob: -13.812581062316895
    8. '9' → logprob: -14.125081062316895
    9. '<' → logprob: -14.375081062316895
    10. '0' → logprob: -14.375081062316895

Token 290: ' inclus' (ID: 11891)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.0007706748438067734
    2. '```' → logprob: -8.250770568847656
    3. ' elif' → logprob: -8.375770568847656
    4. 'and' → logprob: -9.500770568847656
    5. ' (' → logprob: -9.625770568847656
    6. '   ' → logprob: -10.000770568847656
    7. 'el' → logprob: -10.125770568847656
    8. ' and' → logprob: -11.125770568847656
    9. ',' → logprob: -11.375770568847656
    10. '(' → logprob: -12.000770568847656

Token 291: 'ivement' (ID: 37978)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.0006660910439677536
    2. ' elif' → logprob: -8.375665664672852
    3. ':' → logprob: -8.625665664672852
    4. '   ' → logprob: -8.625665664672852
    5. 'el' → logprob: -10.250665664672852
    6. '```' → logprob: -11.500665664672852
    7. ' (' → logprob: -11.625665664672852
    8. ',' → logprob: -12.000665664672852
    9. 'and' → logprob: -12.250665664672852
    10. 'if' → logprob: -12.625665664672852

Token 292: '.
' (ID: 558)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.00016480287013109773
    2. ' elif' → logprob: -8.875164985656738
    3. 'el' → logprob: -10.750164985656738
    4. ':' → logprob: -14.250164985656738
    5. '```' → logprob: -14.250164985656738
    6. ',' → logprob: -14.500164985656738
    7. ' (' → logprob: -15.125164985656738
    8. '   ' → logprob: -15.250164985656738
    9. 'and' → logprob: -15.750164985656738
    10. 'e' → logprob: -16.000164031982422

Token 293: '#' (ID: 2)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'elif' → logprob: -1.5048530030981055e-06
    2. 'el' → logprob: -13.625001907348633
    3. ' elif' → logprob: -15.500001907348633
    4. 'eli' → logprob: -17.875001907348633
    5. '```' → logprob: -19.000001907348633
    6. 'El' → logprob: -20.125001907348633
    7. 'elseif' → logprob: -20.500001907348633
    8. 'else' → logprob: -20.500001907348633
    9. '#elif' → logprob: -20.625001907348633
    10. 'e' → logprob: -20.625001907348633

Token 294: ' L' (ID: 451)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'elif' → logprob: -4.320199877838604e-07
    2. 'el' → logprob: -15.25
    3. ' elif' → logprob: -16.25
    4. 'eli' → logprob: -18.5
    5. '```' → logprob: -19.75
    6. 'else' → logprob: -20.125
    7. 'elseif' → logprob: -20.875
    8. '#elif' → logprob: -21.125
    9. 'elsif' → logprob: -21.75
    10. 'El' → logprob: -22.0

Token 295: ''op' (ID: 70747)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.001677675754763186
    2. ' elif' → logprob: -6.626677513122559
    3. 'el' → logprob: -8.126677513122559
    4. 'if' → logprob: -10.126677513122559
    5. 'e' → logprob: -12.126677513122559
    6. 'eli' → logprob: -12.501677513122559
    7. 'El' → logprob: -13.751677513122559
    8. 'a' → logprob: -14.876677513122559
    9. ' ' → logprob: -14.939177513122559
    10. 'else' → logprob: -14.939177513122559

Token 296: 'érateur' (ID: 108528)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.7444233298301697
    2. 'ération' → logprob: -1.7444233894348145
    3. 'ér' → logprob: -1.8694233894348145
    4. 'if' → logprob: -2.3694233894348145
    5. 'elif' → logprob: -3.1194233894348145
    6. 'érateur' → logprob: -3.7444233894348145
    7. 'A' → logprob: -3.8694233894348145
    8. 'or' → logprob: -5.9944233894348145
    9. 'r' → logprob: -6.2444233894348145
    10. '(A' → logprob: -6.9944233894348145

Token 297: ' logique' (ID: 115350)
  Prédit: 'and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'and' → logprob: -0.1642182171344757
    2. '6' → logprob: -2.7892181873321533
    3. '>=' → logprob: -3.2892181873321533
    4. 'elif' → logprob: -4.164218425750732
    5. 'A' → logprob: -5.164218425750732
    6. 'if' → logprob: -5.289218425750732
    7. 'et' → logprob: -5.664218425750732
    8. ' and' → logprob: -5.664218425750732
    9. '7' → logprob: -5.914218425750732
    10. '1' → logprob: -6.039218425750732

Token 298: ' "<' (ID: 8817)
  Prédit: 'and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'and' → logprob: -0.016106626018881798
    2. ' and' → logprob: -4.266106605529785
    3. 'et' → logprob: -6.391106605529785
    4. ' et' → logprob: -8.766106605529785
    5. '(and' → logprob: -10.516106605529785
    6. ' ' → logprob: -10.891106605529785
    7. 'elif' → logprob: -11.141106605529785
    8. '1' → logprob: -11.891106605529785
    9. '```' → logprob: -12.641106605529785
    10. 'a' → logprob: -12.766106605529785

Token 299: '="' (ID: 580)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -9.662937372922897e-05
    2. '=A' → logprob: -10.125096321105957
    3. ' =' → logprob: -10.750096321105957
    4. '=<' → logprob: -11.500096321105957
    5. 'A' → logprob: -11.625096321105957
    6. '<=' → logprob: -12.000096321105957
    7. '=B' → logprob: -12.625096321105957
    8. ' A' → logprob: -13.375096321105957
    9. '="' → logprob: -13.750096321105957
    10. '=int' → logprob: -14.250096321105957

Token 300: ' permet' (ID: 11798)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.9532651901245117
    2. 'and' → logprob: -1.3282651901245117
    3. '<=' → logprob: -1.4532651901245117
    4. '=' → logprob: -3.5782651901245117
    5. ' <=' → logprob: -3.7032651901245117
    6. ' A' → logprob: -3.9532651901245117
    7. 'A' → logprob: -4.078265190124512
    8. ' et' → logprob: -5.078265190124512
    9. 'if' → logprob: -5.078265190124512
    10. 'et' → logprob: -5.703265190124512

Token 301: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.5758383274078369
    2. 'de' → logprob: -1.200838327407837
    3. 'A' → logprob: -2.325838327407837
    4. ' A' → logprob: -3.700838327407837
    5. ' d' → logprob: -5.325838088989258
    6. 'd' → logprob: -5.450838088989258
    7. ' à' → logprob: -6.575838088989258
    8. '(' → logprob: -7.325838088989258
    9. ' ' → logprob: -7.450838088989258
    10. ' (' → logprob: -7.950838088989258

Token 302: ' spéc' (ID: 20135)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.04581177607178688
    2. ' A' → logprob: -3.670811891555786
    3. '(A' → logprob: -4.920811653137207
    4. '6' → logprob: -5.920811653137207
    5. 'B' → logprob: -6.170811653137207
    6. 'and' → logprob: -7.170811653137207
    7. '(' → logprob: -7.170811653137207
    8. ' vérifier' → logprob: -7.295811653137207
    9. ' B' → logprob: -7.545811653137207
    10. 'contin' → logprob: -7.670811653137207

Token 303: 'ifier' (ID: 4550)
  Prédit: 'ifier'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifier' → logprob: -0.02889060229063034
    2. 'i' → logprob: -4.778890609741211
    3. 'ifié' → logprob: -5.153890609741211
    4. 'ier' → logprob: -5.778890609741211
    5. 'ifi' → logprob: -5.903890609741211
    6. 'if' → logprob: -6.028890609741211
    7. 'er' → logprob: -6.278890609741211
    8. 'ié' → logprob: -7.778890609741211
    9. 'ifiée' → logprob: -8.153890609741211
    10. 'ifie' → logprob: -8.153890609741211

Token 304: ' une' (ID: 2463)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.8200883865356445
    2. '6' → logprob: -1.5700883865356445
    3. ' A' → logprob: -1.5700883865356445
    4. ' ' → logprob: -2.5700883865356445
    5. ' que' → logprob: -3.1950883865356445
    6. ' la' → logprob: -4.8200883865356445
    7. 'que' → logprob: -5.8200883865356445
    8. ' de' → logprob: -6.3200883865356445
    9. '7' → logprob: -6.4450883865356445
    10. '12' → logprob: -6.8200883865356445

Token 305: ' plage' (ID: 78241)
  Prédit: 'et'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'et' → logprob: -1.5338481664657593
    2. 'A' → logprob: -1.6588481664657593
    3. ' et' → logprob: -2.033848285675049
    4. 'and' → logprob: -2.408848285675049
    5. ' A' → logprob: -2.658848285675049
    6. ' and' → logprob: -3.033848285675049
    7. 'borne' → logprob: -3.283848285675049
    8. ' ' → logprob: -3.533848285675049
    9. 'condition' → logprob: -3.533848285675049
    10. ' condition' → logprob: -3.658848285675049

Token 306: ' de' (ID: 334)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -1.0817842483520508
    2. 'et' → logprob: -1.4567842483520508
    3. 'de' → logprob: -2.206784248352051
    4. ' A' → logprob: -2.831784248352051
    5. ' et' → logprob: -3.331784248352051
    6. 'entre' → logprob: -3.331784248352051
    7. ' entre' → logprob: -3.706784248352051
    8. '<=' → logprob: -3.956784248352051
    9. ' compris' → logprob: -4.081784248352051
    10. 'if' → logprob: -4.206784248352051

Token 307: ' valeurs' (ID: 73668)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.04241562634706497
    2. 'A' → logprob: -3.2924156188964844
    3. '6' → logprob: -6.417415618896484
    4. ' valeurs' → logprob: -6.542415618896484
    5. ' val' → logprob: -8.292415618896484
    6. ' A' → logprob: -8.667415618896484
    7. 'values' → logprob: -8.917415618896484
    8. 'conditions' → logprob: -9.042415618896484
    9. ' ' → logprob: -9.292415618896484
    10. '7' → logprob: -9.417415618896484

Token 308: ':' (ID: 25)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.9718277454376221
    2. ' if' → logprob: -1.596827745437622
    3. 'elif' → logprob: -1.846827745437622
    4. 'et' → logprob: -2.721827745437622
    5. ' et' → logprob: -2.846827745437622
    6. ' and' → logprob: -2.971827745437622
    7. 'and' → logprob: -3.721827745437622
    8. 'A' → logprob: -3.971827745437622
    9. ' elif' → logprob: -4.596827507019043
    10. '   ' → logprob: -4.971827507019043

Token 309: ' ' (ID: 220)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.2825208008289337
    2. '6' → logprob: -1.4075207710266113
    3. ' elif' → logprob: -7.157520771026611
    4. ' ' → logprob: -8.15752124786377
    5. 'if' → logprob: -8.28252124786377
    6. 'el' → logprob: -11.28252124786377
    7. '   ' → logprob: -11.65752124786377
    8. '```' → logprob: -11.90752124786377
    9. '(' → logprob: -12.40752124786377
    10. '

' → logprob: -12.78252124786377

Token 310: '6' (ID: 21)
  Prédit: '6'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -0.012840296141803265
    2. 'elif' → logprob: -4.512840270996094
    3. 'if' → logprob: -6.512840270996094
    4. ' ' → logprob: -8.637840270996094
    5. 'A' → logprob: -9.387840270996094
    6. '(' → logprob: -10.637840270996094
    7. '```' → logprob: -12.637840270996094
    8. '
' → logprob: -13.012840270996094
    9. '

' → logprob: -13.012840270996094
    10. '   ' → logprob: -13.137840270996094

Token 311: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.42887285351753235
    2. '<=' → logprob: -1.05387282371521
    3. 'and' → logprob: -9.303873062133789
    4. ' and' → logprob: -9.803873062133789
    5. '```' → logprob: -12.053873062133789
    6. ')' → logprob: -12.553873062133789
    7. ')<=' → logprob: -12.553873062133789
    8. 'le' → logprob: -12.678873062133789
    9. '<' → logprob: -13.553873062133789
    10. '≤' → logprob: -13.803873062133789

Token 312: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.0486002042889595
    2. ' A' → logprob: -3.048600196838379
    3. ' ' → logprob: -12.423600196838379
    4. '12' → logprob: -13.423600196838379
    5. '
' → logprob: -13.798600196838379
    6. '	A' → logprob: -13.923600196838379
    7. '6' → logprob: -14.298600196838379
    8. 'B' → logprob: -14.423600196838379
    9. '   ' → logprob: -14.548600196838379
    10. ' ' → logprob: -14.736100196838379

Token 313: ' <=' (ID: 5017)
  Prédit: '<='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<=' → logprob: -0.2243947684764862
    2. ' <=' → logprob: -2.3493947982788086
    3. ' and' → logprob: -2.4743947982788086
    4. 'and' → logprob: -3.8493947982788086
    5. 'et' → logprob: -11.474394798278809
    6. '>=' → logprob: -11.599394798278809
    7. ' et' → logprob: -11.724394798278809
    8. '```' → logprob: -11.849394798278809
    9. '=' → logprob: -12.349394798278809
    10. '≤' → logprob: -12.474394798278809

Token 314: ' ' (ID: 220)
  Prédit: '12'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '12' → logprob: -0.008619185537099838
    2. ' ' → logprob: -4.75861930847168
    3. '   ' → logprob: -13.63361930847168
    4. '  ' → logprob: -14.38361930847168
    5. '1' → logprob: -14.63361930847168
    6. '```' → logprob: -14.63361930847168
    7. 'B' → logprob: -14.94611930847168
    8. '۱۲' → logprob: -15.57111930847168
    9. '2' → logprob: -15.69611930847168
    10. ' ' → logprob: -15.75861930847168

Token 315: '12' (ID: 899)
  Prédit: '12'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '12' → logprob: -0.0007125511183403432
    2. ' ' → logprob: -7.2507123947143555
    3. '1' → logprob: -14.375712394714355
    4. '```' → logprob: -14.625712394714355
    5. '   ' → logprob: -15.063212394714355
    6. '2' → logprob: -15.063212394714355
    7. '  ' → logprob: -15.813212394714355
    8. '13' → logprob: -16.250713348388672
    9. '۱۲' → logprob: -16.313213348388672
    10. '
' → logprob: -16.563213348388672

Token 316: ' signifie' (ID: 81149)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'elif' → logprob: -5.598092684522271e-05
    2. ' elif' → logprob: -9.875056266784668
    3. 'el' → logprob: -12.625056266784668
    4. '   ' → logprob: -14.250056266784668
    5. ':' → logprob: -15.625056266784668
    6. '#elif' → logprob: -16.12505531311035
    7. '```' → logprob: -16.87505531311035
    8. 'eli' → logprob: -17.12505531311035
    9. 'elsif' → logprob: -17.37505531311035
    10. 'elseif' → logprob: -17.50005531311035

Token 317: ' "' (ID: 392)
  Prédit: '6'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '6' → logprob: -0.23458550870418549
    2. 'A' → logprob: -1.7345855236053467
    3. 'if' → logprob: -4.234585285186768
    4. ' A' → logprob: -5.109585285186768
    5. ' ' → logprob: -5.359585285186768
    6. '   ' → logprob: -5.984585285186768
    7. '(' → logprob: -6.109585285186768
    8. 'elif' → logprob: -6.984585285186768
    9. ' (' → logprob: -7.359585285186768
    10. 'B' → logprob: -7.859585285186768

Token 318: 'A' (ID: 32)
  Prédit: 'A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.053602829575538635
    2. '6' → logprob: -3.428602933883667
    3. ' A' → logprob: -4.053602695465088
    4. '(' → logprob: -7.053602695465088
    5. ' ' → logprob: -7.178602695465088
    6. ' (' → logprob: -8.303603172302246
    7. '(A' → logprob: -8.678603172302246
    8. 'B' → logprob: -9.053603172302246
    9. '7' → logprob: -9.303603172302246
    10. '   ' → logprob: -9.928603172302246

Token 319: ' est' (ID: 893)
  Prédit: '<='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '<=' → logprob: -0.7871630191802979
    2. '>=' → logprob: -1.0371630191802979
    3. ' <=' → logprob: -2.037163019180298
    4. ' >=' → logprob: -2.912163019180298
    5. ' and' → logprob: -5.662162780761719
    6. 'and' → logprob: -6.162162780761719
    7. '>' → logprob: -11.287162780761719
    8. '```' → logprob: -11.537162780761719
    9. ' ' → logprob: -11.912162780761719
    10. ')' → logprob: -11.912162780761719

Token 320: ' supérieur' (ID: 98491)
  Prédit: ' compris'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' compris' → logprob: -0.11557896435260773
    2. '6' → logprob: -3.3655788898468018
    3. 'compr' → logprob: -4.490579128265381
    4. ' supérieur' → logprob: -4.865579128265381
    5. ' inférieur' → logprob: -4.990579128265381
    6. ' between' → logprob: -5.115579128265381
    7. ' True' → logprob: -5.115579128265381
    8. '>=' → logprob: -5.240579128265381
    9. 'True' → logprob: -5.490579128265381
    10. 'sup' → logprob: -5.615579128265381

Token 321: ' ou' (ID: 2031)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.49776995182037354
    2. 'ou' → logprob: -1.2477699518203735
    3. 'et' → logprob: -3.122769832611084
    4. ' ou' → logprob: -3.122769832611084
    5. 'or' → logprob: -4.872769832611084
    6. ' or' → logprob: -4.997769832611084
    7. ' et' → logprob: -7.122769832611084
    8. ')' → logprob: -7.372769832611084
    9. 'and' → logprob: -8.247770309448242
    10. '<=' → logprob: -8.747770309448242

Token 322: ' égal' (ID: 15059)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.013336229138076305
    2. 'égal' → logprob: -4.388336181640625
    3. 'egal' → logprob: -8.263336181640625
    4. '=A' → logprob: -8.513336181640625
    5. ' égal' → logprob: -9.513336181640625
    6. '=
' → logprob: -9.638336181640625
    7. 'equal' → logprob: -9.638336181640625
    8. ' ég' → logprob: -10.263336181640625
    9. 'ég' → logprob: -10.638336181640625
    10. 'ou' → logprob: -10.763336181640625

Token 323: ' à' (ID: 1221)
  Prédit: 'à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'à' → logprob: -0.1492309719324112
    2. ' à' → logprob: -2.02423095703125
    3. '6' → logprob: -5.27423095703125
    4. '```' → logprob: -7.64923095703125
    5. 'À' → logprob: -8.14923095703125
    6. 'au' → logprob: -8.77423095703125
    7. ''à' → logprob: -9.14923095703125
    8. ' ' → logprob: -9.39923095703125
    9. '   ' → logprob: -10.02423095703125
    10. 'a' → logprob: -10.27423095703125

Token 324: ' ' (ID: 220)
  Prédit: '6'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -0.003601617179811001
    2. ' ' → logprob: -5.628601551055908
    3. '
' → logprob: -14.753602027893066
    4. '```' → logprob: -14.753602027893066
    5. ' six' → logprob: -15.003602027893066
    6. ' ' → logprob: -16.25360107421875
    7. '

' → logprob: -16.87860107421875
    8. '  ' → logprob: -16.87860107421875
    9. '   ' → logprob: -17.00360107421875
    10. '12' → logprob: -17.25360107421875

Token 325: '6' (ID: 21)
  Prédit: '6'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -3.6312321753939614e-05
    2. ' ' → logprob: -10.250036239624023
    3. '```' → logprob: -14.875036239624023
    4. '12' → logprob: -15.375036239624023
    5. '
' → logprob: -15.750036239624023
    6. 'six' → logprob: -17.500036239624023
    7. '1' → logprob: -17.562536239624023
    8. '

' → logprob: -17.687536239624023
    9. ' six' → logprob: -18.000036239624023
    10. ' ' → logprob: -18.187536239624023

Token 326: ' ET' (ID: 23345)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.5677199363708496
    2. 'and' → logprob: -1.1927199363708496
    3. 'et' → logprob: -2.4427199363708496
    4. ' et' → logprob: -3.5677199363708496
    5. '<=' → logprob: -5.06771993637085
    6. '"' → logprob: -5.69271993637085
    7. ')' → logprob: -5.94271993637085
    8. ' <=' → logprob: -6.69271993637085
    9. '")' → logprob: -7.81771993637085
    10. '   ' → logprob: -8.567720413208008

Token 327: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.22546514868736267
    2. ' A' → logprob: -1.600465178489685
    3. ' ' → logprob: -11.225464820861816
    4. 'B' → logprob: -11.475464820861816
    5. '12' → logprob: -11.975464820861816
    6. ' ' → logprob: -11.975464820861816
    7. '   ' → logprob: -12.850464820861816
    8. ' B' → logprob: -13.100464820861816
    9. '<=' → logprob: -13.350464820861816
    10. ',' → logprob: -13.475464820861816

Token 328: ' est' (ID: 893)
  Prédit: ' <='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.3133794367313385
    2. '<=' → logprob: -1.3133794069290161
    3. '<|end|>' → logprob: -10.063379287719727
    4. ' ' → logprob: -10.188379287719727
    5. '<' → logprob: -11.438379287719727
    6. ')<=' → logprob: -11.688379287719727
    7. ' <' → logprob: -12.813379287719727
    8. ' <=",' → logprob: -12.813379287719727
    9. ' ' → logprob: -13.188379287719727
    10. '>=' → logprob: -13.438379287719727

Token 329: ' inférieur' (ID: 191498)
  Prédit: '<='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<=' → logprob: -0.14095976948738098
    2. ' inférieur' → logprob: -2.7659597396850586
    3. 'inf' → logprob: -3.3909597396850586
    4. '<' → logprob: -4.265959739685059
    5. 'moins' → logprob: -5.015959739685059
    6. ' <=' → logprob: -5.515959739685059
    7. ' ' → logprob: -5.890959739685059
    8. 'infer' → logprob: -6.515959739685059
    9. '   ' → logprob: -6.765959739685059
    10. '<|end|>' → logprob: -6.765959739685059

Token 330: ' ou' (ID: 2031)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.0315302237868309
    2. ' ou' → logprob: -4.906530380249023
    3. ' or' → logprob: -5.031530380249023
    4. 'ou' → logprob: -5.406530380249023
    5. '<=' → logprob: -5.781530380249023
    6. ' à' → logprob: -5.906530380249023
    7. 'à' → logprob: -5.906530380249023
    8. ' =' → logprob: -6.531530380249023
    9. 'or' → logprob: -6.781530380249023
    10. '  ' → logprob: -7.656530380249023

Token 331: ' égal' (ID: 15059)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.7432039380073547
    2. '12' → logprob: -1.49320387840271
    3. 'égal' → logprob: -1.74320387840271
    4. 'ou' → logprob: -3.36820387840271
    5. ' égal' → logprob: -3.36820387840271
    6. '13' → logprob: -3.99320387840271
    7. '<=' → logprob: -4.118204116821289
    8. 'equal' → logprob: -4.368204116821289
    9. ' ' → logprob: -6.993204116821289
    10. 'égalité' → logprob: -7.243204116821289

Token 332: ' à' (ID: 1221)
  Prédit: 'à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'à' → logprob: -0.40319153666496277
    2. ' à' → logprob: -1.1531915664672852
    3. '=' → logprob: -4.653191566467285
    4. ' ' → logprob: -6.528191566467285
    5. ''à' → logprob: -7.028191566467285
    6. '```' → logprob: -7.153191566467285
    7. '  ' → logprob: -7.528191566467285
    8. 'to' → logprob: -7.528191566467285
    9. '   ' → logprob: -7.653191566467285
    10. 'À' → logprob: -7.903191566467285

Token 333: ' ' (ID: 220)
  Prédit: '12'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '12' → logprob: -0.008621077984571457
    2. ' ' → logprob: -4.7586212158203125
    3. '13' → logprob: -12.633621215820312
    4. '1' → logprob: -14.258621215820312
    5. '2' → logprob: -14.258621215820312
    6. '   ' → logprob: -15.071121215820312
    7. '```' → logprob: -15.258621215820312
    8. '11' → logprob: -15.508621215820312
    9. '  ' → logprob: -15.508621215820312
    10. '10' → logprob: -15.571121215820312

Token 334: '12' (ID: 899)
  Prédit: '12'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '12' → logprob: -0.001506409258581698
    2. ' ' → logprob: -6.501506328582764
    3. '13' → logprob: -13.126506805419922
    4. '```' → logprob: -14.626506805419922
    5. '   ' → logprob: -15.001506805419922
    6. '1' → logprob: -15.126506805419922
    7. '2' → logprob: -15.251506805419922
    8. '  ' → logprob: -15.814006805419922
    9. '
' → logprob: -15.939006805419922
    10. '"' → logprob: -16.064006805419922

Token 335: '".
' (ID: 26880)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.9747120141983032
    2. '):' → logprob: -1.3497120141983032
    3. '):
' → logprob: -1.7247120141983032
    4. ')' → logprob: -2.9747118949890137
    5. ':
' → logprob: -3.0997118949890137
    6. '   ' → logprob: -3.3497118949890137
    7. ' and' → logprob: -4.224711894989014
    8. 'elif' → logprob: -4.349711894989014
    9. 'and' → logprob: -5.224711894989014
    10. '"):
' → logprob: -5.349711894989014

Token 336: 'elif' (ID: 29767)
  Prédit: 'elif'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' → logprob: -9.088346359931165e-07
    2. 'el' → logprob: -14.500000953674316
    3. ' elif' → logprob: -15.375000953674316
    4. '```' → logprob: -17.125
    5. 'eli' → logprob: -17.625
    6. '#elif' → logprob: -18.0
    7. 'elseif' → logprob: -18.25
    8. 'else' → logprob: -18.875
    9. 'elsif' → logprob: -19.0
    10. 'El' → logprob: -20.375

Token 337: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.12850069999694824
    2. '6' → logprob: -2.1285006999969482
    3. 'A' → logprob: -7.128500938415527
    4. ' A' → logprob: -7.253500938415527
    5. '   ' → logprob: -10.878500938415527
    6. '7' → logprob: -11.628500938415527
    7. '(' → logprob: -11.878500938415527
    8. '  ' → logprob: -12.128500938415527
    9. 'B' → logprob: -12.503500938415527
    10. ' ' → logprob: -12.878500938415527

Token 338: '6' (ID: 21)
  Prédit: '6'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -0.027469363063573837
    2. ' ' → logprob: -3.6524693965911865
    3. 'A' → logprob: -6.902469158172607
    4. ' A' → logprob: -8.777469635009766
    5. 'B' → logprob: -12.527469635009766
    6. '   ' → logprob: -12.902469635009766
    7. ' B' → logprob: -14.527469635009766
    8. '(' → logprob: -14.902469635009766
    9. '  ' → logprob: -14.902469635009766
    10. '(A' → logprob: -15.402469635009766

Token 339: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.25193166732788086
    2. '<=' → logprob: -1.5019316673278809
    3. ' ' → logprob: -13.626932144165039
    4. '<' → logprob: -14.751932144165039
    5. '   ' → logprob: -15.126932144165039
    6. ' >=' → logprob: -16.25193214416504
    7. '>=' → logprob: -16.25193214416504
    8. ' ' → logprob: -16.50193214416504
    9. ')<=' → logprob: -16.87693214416504
    10. '  ' → logprob: -17.12693214416504

Token 340: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.03364673629403114
    2. ' A' → logprob: -3.408646821975708
    3. '	A' → logprob: -14.658646583557129
    4. ' ' → logprob: -15.033646583557129
    5. '   ' → logprob: -15.783646583557129
    6. 'B' → logprob: -16.783647537231445
    7. ' ' → logprob: -17.033647537231445
    8. 'a' → logprob: -17.158647537231445
    9. '(A' → logprob: -18.096147537231445
    10. '_A' → logprob: -18.283647537231445

Token 341: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.2554014027118683
    2. '<=' → logprob: -1.505401372909546
    3. ' and' → logprob: -5.755401611328125
    4. 'and' → logprob: -8.130401611328125
    5. ' ' → logprob: -13.505401611328125
    6. ':' → logprob: -13.755401611328125
    7. '<' → logprob: -14.255401611328125
    8. ':
' → logprob: -14.880401611328125
    9. ')<=' → logprob: -14.880401611328125
    10. ' ' → logprob: -15.255401611328125

Token 342: ' ' (ID: 220)
  Prédit: '12'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '12' → logprob: -1.688212614681106e-05
    2. ' ' → logprob: -11.000017166137695
    3. '2' → logprob: -16.625017166137695
    4. '1' → logprob: -16.625017166137695
    5. '   ' → logprob: -17.500017166137695
    6. '```' → logprob: -17.875017166137695
    7. '  ' → logprob: -18.625017166137695
    8. '۱۲' → logprob: -18.812517166137695
    9. '
' → logprob: -19.000017166137695
    10. '１２' → logprob: -19.125017166137695

Token 343: '12' (ID: 899)
  Prédit: '12'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '12' → logprob: -1.1472419600977446e-06
    2. '1' → logprob: -14.125000953674316
    3. ' ' → logprob: -15.375000953674316
    4. '2' → logprob: -15.750000953674316
    5. '10' → logprob: -18.625001907348633
    6. '11' → logprob: -18.625001907348633
    7. '9' → logprob: -19.250001907348633
    8. '13' → logprob: -19.625001907348633
    9. '۱۲' → logprob: -19.875001907348633
    10. '１２' → logprob: -20.125001907348633

Token 344: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.575994610786438
    2. ':
' → logprob: -0.825994610786438
    3. '   ' → logprob: -10.200994491577148
    4. ':
' → logprob: -11.575994491577148
    5. ' :
' → logprob: -12.450994491577148
    6. ':

' → logprob: -13.450994491577148
    7. ' :' → logprob: -13.700994491577148
    8. 'print' → logprob: -13.825994491577148
    9. '):
' → logprob: -14.450994491577148
    10. '=' → logprob: -15.825994491577148

Token 345: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007649579551070929
    2. 'print' → logprob: -4.8826494216918945
    3. ' print' → logprob: -10.882649421691895
    4. '```' → logprob: -11.632649421691895
    5. '   ' → logprob: -11.632649421691895
    6. ':' → logprob: -12.632649421691895
    7. '       ' → logprob: -13.757649421691895
    8. '    
' → logprob: -14.007649421691895
    9. '	print' → logprob: -15.257649421691895
    10. '
' → logprob: -15.257649421691895

Token 346: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.023327350616455078
    2. '   ' → logprob: -3.773327350616455
    3. ' print' → logprob: -9.773326873779297
    4. '```' → logprob: -11.273326873779297
    5. 'if' → logprob: -13.273326873779297
    6. '  ' → logprob: -13.898326873779297
    7. ' ' → logprob: -14.023326873779297
    8. 'printf' → logprob: -14.148326873779297
    9. 'for' → logprob: -14.148326873779297
    10. '
' → logprob: -14.148326873779297

Token 347: ' Si' (ID: 7832)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.000344044849043712
    2. '   ' → logprob: -8.250344276428223
    3. ' print' → logprob: -10.125344276428223
    4. 'if' → logprob: -11.250344276428223
    5. 'for' → logprob: -12.250344276428223
    6. 'prin' → logprob: -12.375344276428223
    7. 'pr' → logprob: -12.625344276428223
    8. '
' → logprob: -12.875344276428223
    9. 'pass' → logprob: -13.250344276428223
    10. 'A' → logprob: -13.250344276428223

Token 348: ' A' (ID: 355)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0038621893618255854
    2. '   ' → logprob: -6.753862380981445
    3. ' print' → logprob: -6.878862380981445
    4. 'A' → logprob: -7.003862380981445
    5. 'B' → logprob: -7.378862380981445
    6. 'int' → logprob: -9.628862380981445
    7. '7' → logprob: -11.628862380981445
    8. ' B' → logprob: -11.628862380981445
    9. ' A' → logprob: -12.128862380981445
    10. '5' → logprob: -12.378862380981445

Token 349: ' est' (ID: 893)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.5675886869430542
    2. ' >=' → logprob: -1.6925886869430542
    3. '>=' → logprob: -1.9425886869430542
    4. '%' → logprob: -2.4425888061523438
    5. '>' → logprob: -2.5675888061523438
    6. '==' → logprob: -2.5675888061523438
    7. ' ==' → logprob: -3.1925888061523438
    8. ' >' → logprob: -3.3175888061523438
    9. '*' → logprob: -3.6925888061523438
    10. ' %' → logprob: -3.8175888061523438

Token 350: ' compris' (ID: 49173)
  Prédit: 'sup'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sup' → logprob: -0.525728166103363
    2. 'strict' → logprob: -2.400728225708008
    3. 'inf' → logprob: -2.400728225708008
    4. ' supérieur' → logprob: -2.650728225708008
    5. ' inférieur' → logprob: -3.400728225708008
    6. ' compris' → logprob: -3.525728225708008
    7. 'super' → logprob: -3.650728225708008
    8. 'égal' → logprob: -4.025728225708008
    9. '   ' → logprob: -5.275728225708008
    10. 'plus' → logprob: -5.400728225708008

Token 351: ' entre' (ID: 3853)
  Prédit: ' entre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' entre' → logprob: -0.21187379956245422
    2. 'entre' → logprob: -1.7118737697601318
    3. '   ' → logprob: -4.961874008178711
    4. 'between' → logprob: -6.086874008178711
    5. ' between' → logprob: -7.336874008178711
    6. 'ent' → logprob: -8.461874008178711
    7. 'Entre' → logprob: -8.961874008178711
    8. '>=' → logprob: -10.711874008178711
    9. 'dans' → logprob: -11.336874008178711
    10. ':' → logprob: -11.461874008178711

Token 352: ' ' (ID: 220)
  Prédit: '6'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -0.06853686273097992
    2. '1' → logprob: -3.4435367584228516
    3. ' ' → logprob: -3.8185367584228516
    4. '7' → logprob: -5.193536758422852
    5. '0' → logprob: -6.443536758422852
    6. '10' → logprob: -6.818536758422852
    7. '9' → logprob: -7.193536758422852
    8. '3' → logprob: -7.318536758422852
    9. '8' → logprob: -7.318536758422852
    10. '11' → logprob: -7.443536758422852

Token 353: '6' (ID: 21)
  Prédit: '6'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -0.007283357437700033
    2. '1' → logprob: -5.3822832107543945
    3. '7' → logprob: -7.0072832107543945
    4. '0' → logprob: -8.132283210754395
    5. '10' → logprob: -8.132283210754395
    6. '9' → logprob: -8.132283210754395
    7. '11' → logprob: -8.257283210754395
    8. '13' → logprob: -8.382283210754395
    9. '8' → logprob: -8.882283210754395
    10. '3' → logprob: -9.757283210754395

Token 354: ' et' (ID: 859)
  Prédit: 'et'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'et' → logprob: -0.1331983357667923
    2. ' et' → logprob: -2.1331982612609863
    3. 'and' → logprob: -5.383198261260986
    4. ' and' → logprob: -6.883198261260986
    5. '<=' → logprob: -7.883198261260986
    6. '   ' → logprob: -8.508198738098145
    7. ' ' → logprob: -11.883198738098145
    8. '```' → logprob: -12.008198738098145
    9. ' <=' → logprob: -12.258198738098145
    10. '  ' → logprob: -12.383198738098145

Token 355: ' ' (ID: 220)
  Prédit: '12'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '12' → logprob: -0.003962516784667969
    2. ' ' → logprob: -6.253962516784668
    3. '11' → logprob: -6.503962516784668
    4. '9' → logprob: -7.753962516784668
    5. '10' → logprob: -9.378962516784668
    6. 'B' → logprob: -12.753962516784668
    7. 'b' → logprob: -12.753962516784668
    8. '8' → logprob: -12.941462516784668
    9. '   ' → logprob: -13.253962516784668
    10. 'int' → logprob: -13.316462516784668

Token 356: '12' (ID: 899)
  Prédit: '12'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '12' → logprob: -0.010753141716122627
    2. '11' → logprob: -4.760753154754639
    3. '9' → logprob: -6.760753154754639
    4. '10' → logprob: -7.135753154754639
    5. '8' → logprob: -8.88575267791748
    6. 'B' → logprob: -11.51075267791748
    7. ' ' → logprob: -11.76075267791748
    8. 'int' → logprob: -12.13575267791748
    9. '6' → logprob: -12.13575267791748
    10. '7' → logprob: -12.38575267791748

Token 357: ',' (ID: 11)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.23820480704307556
    2. ':
' → logprob: -1.863204836845398
    3. '   ' → logprob: -3.1132047176361084
    4. ',' → logprob: -5.1132049560546875
    5. 'print' → logprob: -6.6132049560546875
    6. 'and' → logprob: -6.6132049560546875
    7. 'et' → logprob: -6.6132049560546875
    8. ' and' → logprob: -7.1132049560546875
    9. ' et' → logprob: -7.8632049560546875
    10. '*' → logprob: -8.613204956054688

Token 358: ' on' (ID: 402)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.09696807712316513
    2. '   ' → logprob: -2.471968173980713
    3. ' print' → logprob: -4.846968173980713
    4. ' ' → logprob: -9.971967697143555
    5. '  ' → logprob: -10.596967697143555
    6. 'if' → logprob: -10.971967697143555
    7. '
' → logprob: -11.971967697143555
    8. '#' → logprob: -12.159467697143555
    9. '	print' → logprob: -12.534467697143555
    10. 'for' → logprob: -12.721967697143555

Token 359: ' affiche' (ID: 127479)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.12484999746084213
    2. '   ' → logprob: -2.374850034713745
    3. ' print' → logprob: -3.749850034713745
    4. '#' → logprob: -8.874850273132324
    5. ' ' → logprob: -8.999850273132324
    6. '  ' → logprob: -9.124850273132324
    7. 'aff' → logprob: -9.249850273132324
    8. '    ' → logprob: -9.937350273132324
    9. 'printf' → logprob: -10.249850273132324
    10. 'for' → logprob: -10.999850273132324

Token 360: ' la' (ID: 557)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0543212927877903
    2. 'A' → logprob: -3.4293212890625
    3. 'B' → logprob: -5.1793212890625
    4. '(int' → logprob: -5.1793212890625
    5. 'print' → logprob: -6.3043212890625
    6. '2' → logprob: -6.3043212890625
    7. '3' → logprob: -7.0543212890625
    8. '0' → logprob: -7.1793212890625
    9. 'abs' → logprob: -7.6793212890625
    10. '(A' → logprob: -7.6793212890625

Token 361: ' moitié' (ID: 93216)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.1369234025478363
    2. 'int' → logprob: -2.136923313140869
    3. 'A' → logprob: -5.511923313140869
    4. 'B' → logprob: -5.636923313140869
    5. 'float' → logprob: -7.136923313140869
    6. '2' → logprob: -8.136923789978027
    7. 'str' → logprob: -8.136923789978027
    8. ' print' → logprob: -8.761923789978027
    9. 'abs' → logprob: -9.136923789978027
    10. '5' → logprob: -9.761923789978027

Token 362: ' de' (ID: 334)
  Prédit: 'de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'de' → logprob: -0.5279117822647095
    2. ' de' → logprob: -1.5279117822647095
    3. '(B' → logprob: -2.40291166305542
    4. '(int' → logprob: -3.65291166305542
    5. '()' → logprob: -4.02791166305542
    6. '(' → logprob: -4.02791166305542
    7. 'int' → logprob: -4.52791166305542
    8. 'print' → logprob: -4.77791166305542
    9. 'B' → logprob: -4.90291166305542
    10. '   ' → logprob: -4.90291166305542

Token 363: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.000918008794542402
    2. 'int' → logprob: -7.250917911529541
    3. ' B' → logprob: -9.0009183883667
    4. 'A' → logprob: -10.1259183883667
    5. '(B' → logprob: -10.2509183883667
    6. 'print' → logprob: -12.2509183883667
    7. '(int' → logprob: -12.7509183883667
    8. 'float' → logprob: -14.3759183883667
    9. 'b' → logprob: -14.8759183883667
    10. ' int' → logprob: -15.5009183883667

Token 364: ' (' (ID: 350)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11209556460380554
    2. 'print' → logprob: -2.487095594406128
    3. ',' → logprob: -4.737095355987549
    4. '//' → logprob: -5.487095355987549
    5. ' //' → logprob: -5.737095355987549
    6. '/' → logprob: -5.987095355987549
    7. ' /' → logprob: -6.362095355987549
    8. ' print' → logprob: -6.737095355987549
    9. '.' → logprob: -8.237095832824707
    10. '(' → logprob: -9.237095832824707

Token 365: 'B' (ID: 33)
  Prédit: 'B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.018256941810250282
    2. ' B' → logprob: -4.268257141113281
    3. 'print' → logprob: -6.018257141113281
    4. 'int' → logprob: -6.518257141113281
    5. ')' → logprob: -9.768257141113281
    6. '   ' → logprob: -10.268257141113281
    7. ' print' → logprob: -10.643257141113281
    8. 'end' → logprob: -11.268257141113281
    9. 'b' → logprob: -11.393257141113281
    10. ' int' → logprob: -11.518257141113281

Token 366: ' div' (ID: 4223)
  Prédit: '/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '/' → logprob: -0.15201324224472046
    2. ' /' → logprob: -2.2770133018493652
    3. '//' → logprob: -3.9020133018493652
    4. ' //' → logprob: -4.402013301849365
    5. ')' → logprob: -5.277013301849365
    6. ' ' → logprob: -7.652013301849365
    7. 'print' → logprob: -9.027012825012207
    8. '#' → logprob: -9.777012825012207
    9. '   ' → logprob: -9.902012825012207
    10. ' ' → logprob: -10.402012825012207

Token 367: 'isé' (ID: 30065)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.5333037972450256
    2. '/' → logprob: -1.1583037376403809
    3. 'isé' → logprob: -3.158303737640381
    4. '//' → logprob: -3.908303737640381
    5. 'iser' → logprob: -4.533303737640381
    6. 'ise' → logprob: -5.408303737640381
    7. ' /' → logprob: -5.408303737640381
    8. 'isible' → logprob: -5.658303737640381
    9. '   ' → logprob: -5.783303737640381
    10. 'ision' → logprob: -6.408303737640381

Token 368: ' par' (ID: 686)
  Prédit: 'par'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'par' → logprob: -0.29238417744636536
    2. ' par' → logprob: -1.417384147644043
    3. '2' → logprob: -4.917384147644043
    4. '/' → logprob: -6.167384147644043
    5. ')' → logprob: -7.167384147644043
    6. 'by' → logprob: -8.292384147644043
    7. ' ' → logprob: -8.417384147644043
    8. '(par' → logprob: -9.292384147644043
    9. '3' → logprob: -9.542384147644043
    10. '//' → logprob: -9.792384147644043

Token 369: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.16024190187454224
    2. ' ' → logprob: -1.9102418422698975
    3. 'de' → logprob: -11.660242080688477
    4. ' ' → logprob: -12.535242080688477
    5. '```' → logprob: -13.285242080688477
    6. ' deux' → logprob: -14.035242080688477
    7. '   ' → logprob: -14.160242080688477
    8. ')' → logprob: -14.660242080688477
    9. '  ' → logprob: -15.035242080688477
    10. '
' → logprob: -15.597742080688477

Token 370: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0007145775598473847
    2. ' ' → logprob: -7.2507147789001465
    3. 'de' → logprob: -14.000714302062988
    4. '```' → logprob: -14.125714302062988
    5. ')' → logprob: -14.813214302062988
    6. '
' → logprob: -15.125714302062988
    7. ' ' → logprob: -15.125714302062988
    8. '   ' → logprob: -15.188214302062988
    9. ' deux' → logprob: -15.188214302062988
    10. 'print' → logprob: -15.438214302062988

Token 371: ').
' (ID: 6294)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.14064735174179077
    2. ')
' → logprob: -2.5156474113464355
    3. '   ' → logprob: -3.1406474113464355
    4. ',' → logprob: -5.7656474113464355
    5. ' //' → logprob: -6.2656474113464355
    6. '//' → logprob: -7.2656474113464355
    7. ' )' → logprob: -8.140646934509277
    8. ').' → logprob: -8.515646934509277
    9. ')//' → logprob: -8.765646934509277
    10. '),' → logprob: -9.015646934509277

Token 372: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.005288900341838598
    2. 'print' → logprob: -5.255289077758789
    3. ' print' → logprob: -9.880289077758789
    4. '```' → logprob: -12.755289077758789
    5. '   ' → logprob: -14.630289077758789
    6. '       ' → logprob: -15.255289077758789
    7. '  ' → logprob: -16.25528907775879
    8. ' ' → logprob: -16.50528907775879
    9. '
' → logprob: -16.75528907775879
    10. '	print' → logprob: -16.75528907775879

Token 373: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.31486380100250244
    2. '   ' → logprob: -1.3148638010025024
    3. ' print' → logprob: -6.439863681793213
    4. '```' → logprob: -13.314864158630371
    5. '	print' → logprob: -13.939864158630371
    6. ' ' → logprob: -14.314864158630371
    7. '  ' → logprob: -14.689864158630371
    8. '       ' → logprob: -15.939864158630371
    9. '   ' → logprob: -15.939864158630371
    10. '
' → logprob: -16.314863204956055

Token 374: ' L' (ID: 451)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.4974866644479334e-05
    2. ' print' → logprob: -11.750015258789062
    3. '   ' → logprob: -11.875015258789062
    4. '```' → logprob: -18.250015258789062
    5. '
' → logprob: -18.500015258789062
    6. '	print' → logprob: -19.000015258789062
    7. ' ' → logprob: -19.375015258789062
    8. '#' → logprob: -19.500015258789062
    9. '    
' → logprob: -19.500015258789062
    10. '  ' → logprob: -19.625015258789062

Token 375: ''op' (ID: 70747)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.057562876492738724
    2. ' print' → logprob: -2.932562828063965
    3. '   ' → logprob: -6.557562828063965
    4. '#' → logprob: -7.682562828063965
    5. '```' → logprob: -9.182562828063965
    6. 'int' → logprob: -9.307562828063965
    7. ' ' → logprob: -9.682562828063965
    8. ' #' → logprob: -9.870062828063965
    9. '/' → logprob: -9.932562828063965
    10. ' /' → logprob: -10.057562828063965

Token 376: 'ération' (ID: 24977)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.03950899839401245
    2. 'int' → logprob: -3.5395090579986572
    3. '#' → logprob: -5.414508819580078
    4. ' print' → logprob: -7.164508819580078
    5. '```' → logprob: -7.164508819580078
    6. 'us' → logprob: -7.539508819580078
    7. '#print' → logprob: -7.789508819580078
    8. 'r' → logprob: -7.789508819580078
    9. 's' → logprob: -8.164508819580078
    10. '=' → logprob: -8.289508819580078

Token 377: ' B' (ID: 418)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.21037781238555908
    2. '//' → logprob: -2.7103776931762695
    3. 'B' → logprob: -3.2103776931762695
    4. ' print' → logprob: -3.7103776931762695
    5. '/' → logprob: -3.8353776931762695
    6. '#' → logprob: -3.9603776931762695
    7. ' B' → logprob: -5.0853776931762695
    8. ' //' → logprob: -6.2103776931762695
    9. ' ' → logprob: -6.4603776931762695
    10. ' /' → logprob: -6.5853776931762695

Token 378: '/' (ID: 14)
  Prédit: ' //'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.3931231200695038
    2. '//' → logprob: -1.1431231498718262
    3. '#' → logprob: -5.393123149871826
    4. ' ' → logprob: -7.518123149871826
    5. ' #' → logprob: -7.768123149871826
    6. ' ' → logprob: -8.518122673034668
    7. '```' → logprob: -9.018122673034668
    8. '/' → logprob: -9.393122673034668
    9. '   ' → logprob: -9.518122673034668
    10. ')' → logprob: -9.643122673034668

Token 379: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0009145628428086638
    2. ' ' → logprob: -7.000914573669434
    3. '```' → logprob: -14.125914573669434
    4. '
' → logprob: -14.938414573669434
    5. '=' → logprob: -15.250914573669434
    6. '/' → logprob: -15.375914573669434
    7. ' /' → logprob: -15.750914573669434
    8. '3' → logprob: -15.813414573669434
    9. ',' → logprob: -15.813414573669434
    10. '   ' → logprob: -16.125913619995117

Token 380: ' retourne' (ID: 178818)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.053869783878326416
    2. 'print' → logprob: -3.1788697242736816
    3. '),' → logprob: -6.053869724273682
    4. ' )' → logprob: -6.303869724273682
    5. ',' → logprob: -6.553869724273682
    6. '   ' → logprob: -6.678869724273682
    7. ' est' → logprob: -6.678869724273682
    8. '//' → logprob: -7.553869724273682
    9. ' print' → logprob: -7.553869724273682
    10. '/' → logprob: -7.803869724273682

Token 381: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.20503436028957367
    2. 'B' → logprob: -2.7050342559814453
    3. ' B' → logprob: -3.0800342559814453
    4. 'un' → logprob: -3.3300342559814453
    5. ' une' → logprob: -3.9550342559814453
    6. 'une' → logprob: -4.955034255981445
    7. 'a' → logprob: -5.455034255981445
    8. ' a' → logprob: -5.955034255981445
    9. ' ' → logprob: -6.705034255981445
    10. 'int' → logprob: -7.080034255981445

Token 382: ' nombre' (ID: 9733)
  Prédit: 'float'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'float' → logprob: -0.009957597590982914
    2. 'nombre' → logprob: -4.759957790374756
    3. ' float' → logprob: -6.759957790374756
    4. 'fl' → logprob: -9.509957313537598
    5. ' nombre' → logprob: -10.509957313537598
    6. ' flott' → logprob: -11.134957313537598
    7. 'floating' → logprob: -11.384957313537598
    8. '_float' → logprob: -11.759957313537598
    9. '浮' → logprob: -11.759957313537598
    10. 'flo' → logprob: -11.759957313537598

Token 383: ' à' (ID: 1221)
  Prédit: ' entier'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' entier' → logprob: -0.5126491785049438
    2. 'float' → logprob: -1.1376491785049438
    3. 'ent' → logprob: -3.5126490592956543
    4. ' flott' → logprob: -4.137649059295654
    5. ' float' → logprob: -4.762649059295654
    6. ' à' → logprob: -4.887649059295654
    7. 'f' → logprob: -5.387649059295654
    8. 'int' → logprob: -5.762649059295654
    9. '/' → logprob: -6.137649059295654
    10. ' entière' → logprob: -6.512649059295654

Token 384: ' virg' (ID: 165362)
  Prédit: 'vir'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vir' → logprob: -0.004734734073281288
    2. 'float' → logprob: -5.629734516143799
    3. '```' → logprob: -7.504734516143799
    4. 'val' → logprob: -8.879734992980957
    5. ' virg' → logprob: -9.629734992980957
    6. ' ' → logprob: -9.754734992980957
    7. '1' → logprob: -10.254734992980957
    8. '#' → logprob: -10.754734992980957
    9. 'l' → logprob: -10.879734992980957
    10. 'fl' → logprob: -10.879734992980957

Token 385: 'ule' (ID: 1601)
  Prédit: 'ule'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ule' → logprob: -0.3464473783969879
    2. 'g' → logprob: -1.4714473485946655
    3. 'ale' → logprob: -3.346447467803955
    4. 'e' → logprob: -4.221447467803955
    5. 'ille' → logprob: -5.471447467803955
    6. 'ée' → logprob: -5.721447467803955
    7. 'le' → logprob: -5.971447467803955
    8. 'ue' → logprob: -7.471447467803955
    9. 'ulaire' → logprob: -7.721447467803955
    10. 'gle' → logprob: -7.846447467803955

Token 386: ' flott' (ID: 108700)
  Prédit: 'float'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'float' → logprob: -0.14042235910892487
    2. 'f' → logprob: -2.6404223442077637
    3. 'fl' → logprob: -3.7654223442077637
    4. ' flott' → logprob: -4.140422344207764
    5. 'flo' → logprob: -5.015422344207764
    6. 'floating' → logprob: -5.265422344207764
    7. '.' → logprob: -6.265422344207764
    8. 'print' → logprob: -7.515422344207764
    9. 'e' → logprob: -7.640422344207764
    10. 'inaire' → logprob: -8.015422821044922

Token 387: 'ante' (ID: 2116)
  Prédit: 'ante'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ante' → logprob: -0.1281474381685257
    2. 'ée' → logprob: -2.2531473636627197
    3. 'ant' → logprob: -5.628147602081299
    4. 'u' → logprob: -5.753147602081299
    5. 'é' → logprob: -6.128147602081299
    6. 'ule' → logprob: -6.753147602081299
    7. 'o' → logprob: -6.878147602081299
    8. 'e' → logprob: -7.253147602081299
    9. 'ul' → logprob: -7.503147602081299
    10. 'oint' → logprob: -7.753147602081299

Token 388: '.
' (ID: 558)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.22760631144046783
    2. '   ' → logprob: -2.8526062965393066
    3. 'print' → logprob: -2.8526062965393066
    4. '.' → logprob: -2.9776062965393066
    5. ',' → logprob: -3.6026062965393066
    6. ').' → logprob: -5.727606296539307
    7. ' print' → logprob: -6.602606296539307
    8. ' )' → logprob: -6.727606296539307
    9. ')
' → logprob: -7.102606296539307
    10. '),' → logprob: -7.227606296539307

Token 389: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.020988967269659042
    2. 'print' → logprob: -4.020988941192627
    3. ' print' → logprob: -5.895988941192627
    4. '   ' → logprob: -9.895989418029785
    5. '       ' → logprob: -11.520989418029785
    6. ',' → logprob: -12.270989418029785
    7. ' ' → logprob: -12.645989418029785
    8. '    ' → logprob: -12.895989418029785
    9. '```' → logprob: -13.020989418029785
    10. '  ' → logprob: -13.145989418029785

Token 390: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.05235113948583603
    2. '   ' → logprob: -3.177351236343384
    3. ' print' → logprob: -4.677350997924805
    4. ' ' → logprob: -13.552350997924805
    5. '	print' → logprob: -13.552350997924805
    6. '  ' → logprob: -14.177350997924805
    7. '       ' → logprob: -14.677350997924805
    8. '    ' → logprob: -15.302350997924805
    9. '```' → logprob: -15.552350997924805
    10. '   ' → logprob: -15.677350997924805

Token 391: ' int' (ID: 677)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00014191943046171218
    2. ' print' → logprob: -9.250142097473145
    3. '   ' → logprob: -10.000142097473145
    4. '#' → logprob: -16.375141143798828
    5. 'Print' → logprob: -16.625141143798828
    6. ' ' → logprob: -16.750141143798828
    7. '
' → logprob: -17.125141143798828
    8. '	print' → logprob: -17.125141143798828
    9. '```' → logprob: -17.375141143798828
    10. '#print' → logprob: -17.375141143798828

Token 392: '(B' (ID: 8409)
  Prédit: '(B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(B' → logprob: -0.03376061096787453
    2. '(' → logprob: -3.5337605476379395
    3. '(int' → logprob: -5.5337605476379395
    4. '()' → logprob: -10.533761024475098
    5. ' (' → logprob: -11.783761024475098
    6. '(
' → logprob: -12.033761024475098
    7. '(float' → logprob: -12.658761024475098
    8. '(round' → logprob: -13.033761024475098
    9. '((' → logprob: -13.658761024475098
    10. 'B' → logprob: -13.658761024475098

Token 393: '/' (ID: 14)
  Prédit: '(B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(B' → logprob: -0.16712720692157745
    2. '(' → logprob: -2.0421271324157715
    3. '//' → logprob: -4.6671271324157715
    4. ')' → logprob: -5.1671271324157715
    5. '/' → logprob: -5.1671271324157715
    6. ' //' → logprob: -7.1671271324157715
    7. 'B' → logprob: -7.1671271324157715
    8. '   ' → logprob: -7.6671271324157715
    9. '(int' → logprob: -7.7921271324157715
    10. ' (' → logprob: -8.29212760925293

Token 394: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -2.057743949990254e-05
    2. ' ' → logprob: -10.875020980834961
    3. ')' → logprob: -13.500020980834961
    4. '(' → logprob: -16.37502098083496
    5. '۲' → logprob: -17.50002098083496
    6. '２' → logprob: -18.37502098083496
    7. ' )' → logprob: -18.81252098083496
    8. '
' → logprob: -18.87502098083496
    9. '```' → logprob: -19.00002098083496
    10. '   ' → logprob: -19.00002098083496

Token 395: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.001195467310026288
    2. '))' → logprob: -6.751195430755615
    3. ')
' → logprob: -11.376195907592773
    4. ' )' → logprob: -12.376195907592773
    5. ')))' → logprob: -12.501195907592773
    6. '())' → logprob: -12.876195907592773
    7. ')`' → logprob: -13.251195907592773
    8. '   ' → logprob: -15.126195907592773
    9. ')
' → logprob: -15.876195907592773
    10. '()' → logprob: -16.001195907592773

Token 396: ' convert' (ID: 8452)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.014912008307874203
    2. 'print' → logprob: -4.889912128448486
    3. '<|end|>' → logprob: -6.139912128448486
    4. '   ' → logprob: -6.264912128448486
    5. ' )' → logprob: -7.389912128448486
    6. ' =' → logprob: -7.639912128448486
    7. '),' → logprob: -8.139911651611328
    8. ' converts' → logprob: -8.389911651611328
    9. ' print' → logprob: -8.764911651611328
    10. 'convert' → logprob: -8.764911651611328

Token 397: 'it' (ID: 278)
  Prédit: 'it'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'it' → logprob: -0.5856963992118835
    2. '(B' → logprob: -0.8356963992118835
    3. 'i' → logprob: -5.585696220397949
    4. 'int' → logprob: -6.085696220397949
    5. '(int' → logprob: -6.335696220397949
    6. '(' → logprob: -6.585696220397949
    7. ' (' → logprob: -9.08569622039795
    8. ')' → logprob: -9.58569622039795
    9. 'ir' → logprob: -10.08569622039795
    10. 'is' → logprob: -10.21069622039795

Token 398: ' ce' (ID: 2357)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.9051757454872131
    2. 'int' → logprob: -0.9051757454872131
    3. 'le' → logprob: -3.0301756858825684
    4. ' B' → logprob: -3.4051756858825684
    5. '(int' → logprob: -3.6551756858825684
    6. 'la' → logprob: -3.9051756858825684
    7. ' int' → logprob: -3.9051756858825684
    8. '(B' → logprob: -4.405175685882568
    9. ' (' → logprob: -4.655175685882568
    10. ' la' → logprob: -4.780175685882568

Token 399: ' résultat' (ID: 62556)
  Prédit: ' nombre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -1.124218225479126
    2. 'B' → logprob: -1.249218225479126
    3. ' résultat' → logprob: -1.999218225479126
    4. ' B' → logprob: -2.249218225479126
    5. 'nombre' → logprob: -2.749218225479126
    6. 'int' → logprob: -3.624218225479126
    7. ' entier' → logprob: -4.874217987060547
    8. ' float' → logprob: -5.374217987060547
    9. '#' → logprob: -5.374217987060547
    10. 'float' → logprob: -5.499217987060547

Token 400: ' en' (ID: 469)
  Prédit: ' en'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.38696545362472534
    2. 'en' → logprob: -1.1369655132293701
    3. ')' → logprob: -9.51196575164795
    4. '#' → logprob: -11.38696575164795
    5. '   ' → logprob: -13.38696575164795
    6. ''en' → logprob: -13.63696575164795
    7. ' à' → logprob: -13.88696575164795
    8. '(en' → logprob: -14.01196575164795
    9. '	en' → logprob: -14.01196575164795
    10. ',' → logprob: -14.26196575164795

Token 401: ' entier' (ID: 80473)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.3322915732860565
    2. ' int' → logprob: -1.582291603088379
    3. ' entier' → logprob: -2.957291603088379
    4. 'ent' → logprob: -3.832291603088379
    5. ' un' → logprob: -6.207291603088379
    6. ' ent' → logprob: -7.082291603088379
    7. ' integer' → logprob: -7.707291603088379
    8. ' ' → logprob: -9.332291603088379
    9. 'un' → logprob: -9.457291603088379
    10. 'integer' → logprob: -9.957291603088379

Token 402: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4489082098007202
    2. '   ' → logprob: -1.1989082098007202
    3. ')
' → logprob: -2.8239083290100098
    4. '):' → logprob: -8.073907852172852
    5. ').' → logprob: -9.323907852172852
    6. '):
' → logprob: -9.323907852172852
    7. ')
' → logprob: -9.823907852172852
    8. '))' → logprob: -10.073907852172852
    9. ',' → logprob: -10.448907852172852
    10. 'print' → logprob: -10.573907852172852

Token 403: ' ce' (ID: 2357)
  Prédit: ' ce'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ce' → logprob: -0.5153688192367554
    2. '   ' → logprob: -1.0153688192367554
    3. ' en' → logprob: -4.515368938446045
    4. 'ce' → logprob: -4.890368938446045
    5. ' donc' → logprob: -5.390368938446045
    6. ' trunc' → logprob: -5.390368938446045
    7. '```' → logprob: -6.265368938446045
    8. '    
' → logprob: -6.390368938446045
    9. ' car' → logprob: -6.390368938446045
    10. ')' → logprob: -6.515368938446045

Token 404: ' qui' (ID: 2780)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.06571543216705322
    2. ' qui' → logprob: -3.4407153129577637
    3. ' )' → logprob: -3.8157153129577637
    4. ').' → logprob: -6.190715312957764
    5. ' print' → logprob: -6.190715312957764
    6. '.' → logprob: -6.565715312957764
    7. 'print' → logprob: -6.690715312957764
    8. '),' → logprob: -7.315715312957764
    9. 'int' → logprob: -8.440715789794922
    10. '#' → logprob: -8.565715789794922

Token 405: ' tron' (ID: 94018)
  Prédit: ' tron'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tron' → logprob: -1.2768474817276
    2. ' arr' → logprob: -1.7768474817276
    3. 'tr' → logprob: -2.0268473625183105
    4. '#' → logprob: -2.6518473625183105
    5. 'arr' → logprob: -2.9018473625183105
    6. ' sup' → logprob: -3.0268473625183105
    7. 'effect' → logprob: -3.0268473625183105
    8. ' coupe' → logprob: -3.1518473625183105
    9. ' trunc' → logprob: -3.6518473625183105
    10. 'tron' → logprob: -4.1518473625183105

Token 406: 'que' (ID: 1126)
  Prédit: 'que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' → logprob: -0.0022009287495166063
    2. 'ne' → logprob: -7.002201080322266
    3. 'e' → logprob: -8.377201080322266
    4. 'c' → logprob: -8.502201080322266
    5. '**' → logprob: -9.252201080322266
    6. '#' → logprob: -9.877201080322266
    7. '```' → logprob: -9.877201080322266
    8. 'che' → logprob: -10.002201080322266
    9. '   ' → logprob: -10.252201080322266
    10. '>' → logprob: -10.252201080322266

Token 407: ' la' (ID: 557)
  Prédit: ' la'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.653910756111145
    2. 'la' → logprob: -0.778910756111145
    3. ')' → logprob: -5.1539106369018555
    4. '<|end|>' → logprob: -5.5289106369018555
    5. 'l' → logprob: -6.0289106369018555
    6. 'le' → logprob: -6.1539106369018555
    7. ' ' → logprob: -7.0289106369018555
    8. '(B' → logprob: -7.1539106369018555
    9. ' )' → logprob: -7.4039106369018555
    10. '(' → logprob: -7.5289106369018555

Token 408: ' partie' (ID: 22139)
  Prédit: 'part'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'part' → logprob: -0.48811012506484985
    2. ' partie' → logprob: -1.113110065460205
    3. ' part' → logprob: -2.988110065460205
    4. 'par' → logprob: -6.238110065460205
    5. 'val' → logprob: -6.488110065460205
    6. ' valeur' → logprob: -7.238110065460205
    7. 'parte' → logprob: -7.238110065460205
    8. 'decimal' → logprob: -7.488110065460205
    9. 'fraction' → logprob: -7.863110065460205
    10. ' ' → logprob: -8.488110542297363

Token 409: ' déc' (ID: 8498)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.20273473858833313
    2. ' déc' → logprob: -2.5777347087860107
    3. 'fraction' → logprob: -2.5777347087860107
    4. 'decimal' → logprob: -4.07773494720459
    5. '```' → logprob: -5.32773494720459
    6. 'dec' → logprob: -5.82773494720459
    7. ' ' → logprob: -6.32773494720459
    8. '   ' → logprob: -6.45273494720459
    9. ' ' → logprob: -7.95273494720459
    10. ' après' → logprob: -8.07773494720459

Token 410: 'im' (ID: 321)
  Prédit: 'im'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'im' → logprob: -0.004950881935656071
    2. 'imal' → logprob: -5.504951000213623
    3. '```' → logprob: -8.879950523376465
    4. '#' → logprob: -9.629950523376465
    5. '   ' → logprob: -9.629950523376465
    6. 'i' → logprob: -10.004950523376465
    7. 'imane' → logprob: -10.004950523376465
    8. 'p' → logprob: -10.004950523376465
    9. 'imali' → logprob: -10.254950523376465
    10. '    ' → logprob: -10.379950523376465

Token 411: 'ale' (ID: 1167)
  Prédit: 'ale'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ale' → logprob: -0.26078706979751587
    2. 'al' → logprob: -1.510787010192871
    3. 'im' → logprob: -5.260787010192871
    4. 'ée' → logprob: -7.010787010192871
    5. 'alee' → logprob: -8.260787010192871
    6. 'p' → logprob: -8.385787010192871
    7. 'm' → logprob: -8.510787010192871
    8. 'male' → logprob: -8.510787010192871
    9. '"' → logprob: -8.885787010192871
    10. '</' → logprob: -9.010787010192871

Token 412: '.
' (ID: 558)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4972895085811615
    2. ')
' → logprob: -1.3722895383834839
    3. '   ' → logprob: -2.1222894191741943
    4. '):' → logprob: -4.747289657592773
    5. '):
' → logprob: -4.747289657592773
    6. ')
' → logprob: -7.247289657592773
    7. ').' → logprob: -9.497289657592773
    8. '):
' → logprob: -9.747289657592773
    9. ')`
' → logprob: -10.247289657592773
    10. '))' → logprob: -10.247289657592773

Token 413: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0006054567056708038
    2. 'print' → logprob: -7.875605583190918
    3. ' print' → logprob: -9.250605583190918
    4. ':' → logprob: -9.375605583190918
    5. '       ' → logprob: -10.625605583190918
    6. '```' → logprob: -11.750605583190918
    7. '   ' → logprob: -12.000605583190918
    8. ':
' → logprob: -12.625605583190918
    9. ')' → logprob: -14.500605583190918
    10. 'int' → logprob: -15.000605583190918

Token 414: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.019641879945993423
    2. 'print' (adapté à ' print') → logprob: -4.019641876220703
    3. ' print' → logprob: -6.519641876220703
    4. '       ' → logprob: -11.894641876220703
    5. '```' → logprob: -12.394641876220703
    6. '   ' → logprob: -13.144641876220703
    7. '
' → logprob: -13.519641876220703
    8. '    
' → logprob: -14.519641876220703
    9. '  ' → logprob: -14.519641876220703
    10. ' ' → logprob: -14.769641876220703

Token 415: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -5.133198283147067e-05
    2. '(' → logprob: -10.000051498413086
    3. ' (' → logprob: -12.750051498413086
    4. 'int' → logprob: -12.875051498413086
    5. ' int' → logprob: -15.125051498413086
    6. '=int' → logprob: -17.375051498413086
    7. '[int' → logprob: -17.625051498413086
    8. '   ' → logprob: -18.250051498413086
    9. '<int' → logprob: -18.500051498413086
    10. '(
' → logprob: -18.750051498413086

Token 416: '(B' (ID: 8409)
  Prédit: '(B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(B' → logprob: -0.011056310497224331
    2. '(' → logprob: -4.511056423187256
    3. '(
' → logprob: -12.511055946350098
    4. ' (' → logprob: -12.636055946350098
    5. 'B' → logprob: -14.136055946350098
    6. '(b' → logprob: -15.136055946350098
    7. '((' → logprob: -15.261055946350098
    8. '(A' → logprob: -16.011056900024414
    9. ')' → logprob: -16.511056900024414
    10. '(

' → logprob: -16.636056900024414

Token 417: '/' (ID: 14)
  Prédit: '/'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '/' → logprob: -0.0008049834286794066
    2. ' /' → logprob: -7.125804901123047
    3. '/
' → logprob: -15.250804901123047
    4. '   ' → logprob: -16.000804901123047
    5. ')' → logprob: -16.375804901123047
    6. ')/' → logprob: -17.375804901123047
    7. '[' → logprob: -17.750804901123047
    8. '()/' → logprob: -18.000804901123047
    9. '(' → logprob: -18.500804901123047
    10. ' ' → logprob: -18.625804901123047

Token 418: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -2.339278580620885e-06
    2. ' ' → logprob: -13.000001907348633
    3. '   ' → logprob: -18.500001907348633
    4. '```' → logprob: -19.250001907348633
    5. '۲' → logprob: -19.375001907348633
    6. ')' → logprob: -19.375001907348633
    7. '  ' → logprob: -19.750001907348633
    8. '
' → logprob: -20.500001907348633
    9. '２' → logprob: -20.875001907348633
    10. '২' → logprob: -21.250001907348633

Token 419: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.00022165567497722805
    2. ')' → logprob: -8.500221252441406
    3. '))
' → logprob: -11.000221252441406
    4. ')))' → logprob: -14.250221252441406
    5. '()))' → logprob: -14.750221252441406
    6. ' ))' → logprob: -15.500221252441406
    7. '()' → logprob: -17.375221252441406
    8. '))

' → logprob: -17.750221252441406
    9. ')
' → logprob: -18.125221252441406
    10. '))
' → logprob: -18.250221252441406

Token 420: '#' (ID: 2)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.00043126524542458355
    2. 'elif' → logprob: -7.750431060791016
    3. ' else' → logprob: -14.375431060791016
    4. '```' → logprob: -16.875431060791016
    5. 'elseif' → logprob: -19.750431060791016
    6. '#else' → logprob: -19.875431060791016
    7. '#' → logprob: -20.375431060791016
    8. '	else' → logprob: -20.875431060791016
    9. '_else' → logprob: -21.125431060791016
    10. '}else' → logprob: -21.250431060791016

Token 421: ' La' (ID: 3038)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -4.56102097814437e-05
    2. 'elif' → logprob: -10.000045776367188
    3. ' else' → logprob: -15.750045776367188
    4. '```' → logprob: -19.375045776367188
    5. '#' → logprob: -21.125045776367188
    6. '#else' → logprob: -21.250045776367188
    7. 'elses' → logprob: -21.750045776367188
    8. 'elser' → logprob: -21.750045776367188
    9. '_else' → logprob: -22.000045776367188
    10. 'els' → logprob: -22.250045776367188

Token 422: ' clause' (ID: 45470)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.00019388488726690412
    2. ' else' → logprob: -8.62519359588623
    3. 'elif' → logprob: -12.12519359588623
    4. '#' → logprob: -12.25019359588623
    5. 'e' → logprob: -12.75019359588623
    6. 'el' → logprob: -14.50019359588623
    7. 'els' → logprob: -15.75019359588623
    8. 'elser' → logprob: -16.000194549560547
    9. '```' → logprob: -16.625194549560547
    10. 'lse' → logprob: -16.625194549560547

Token 423: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -7.898723561083898e-05
    2. ' else' → logprob: -9.500079154968262
    3. ':' → logprob: -13.125079154968262
    4. '```' → logprob: -14.000079154968262
    5. 'elif' → logprob: -14.750079154968262
    6. 'e' → logprob: -14.750079154968262
    7. '_else' → logprob: -15.875079154968262
    8. 'els' → logprob: -16.375078201293945
    9. 'el' → logprob: -16.875078201293945
    10. 'elser' → logprob: -17.000078201293945

Token 424: ' capture' (ID: 19374)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.018150877207517624
    2. ':
' → logprob: -4.018150806427002
    3. ' :' → logprob: -14.64315128326416
    4. ':
' → logprob: -15.39315128326416
    5. ':

' → logprob: -15.64315128326416
    6. 'print' → logprob: -16.768150329589844
    7. '   ' → logprob: -17.268150329589844
    8. ' :
' → logprob: -17.643150329589844
    9. 'else' → logprob: -17.643150329589844
    10. ':#' → logprob: -18.518150329589844

Token 425: ' tous' (ID: 10688)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0009368319297209382
    2. ':
' → logprob: -7.000936985015869
    3. '#' → logprob: -11.125936508178711
    4. ' :' → logprob: -12.625936508178711
    5. ':#' → logprob: -13.625936508178711
    6. 'le' → logprob: -14.000936508178711
    7. 's' → logprob: -14.125936508178711
    8. ' les' → logprob: -14.500936508178711
    9. ':

' → logprob: -14.625936508178711
    10. '://' → logprob: -14.625936508178711

Token 426: ' les' (ID: 1341)
  Prédit: 'les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'les' → logprob: -0.56639164686203
    2. '#' → logprob: -1.4413917064666748
    3. ':' → logprob: -2.066391706466675
    4. ' les' → logprob: -2.816391706466675
    5. 'le' → logprob: -4.816391468048096
    6. ' le' → logprob: -8.566391944885254
    7. 'aut' → logprob: -8.566391944885254
    8. '```' → logprob: -8.816391944885254
    9. '<|end|>' → logprob: -9.191391944885254
    10. ' ' → logprob: -9.441391944885254

Token 427: ' cas' (ID: 2108)
  Prédit: 'aut'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aut' → logprob: -0.7071648240089417
    2. '#' → logprob: -1.0821647644042969
    3. 'cas' → logprob: -1.9571647644042969
    4. ' autres' → logprob: -3.832164764404297
    5. ' cas' → logprob: -5.582164764404297
    6. ''autres' → logprob: -7.457164764404297
    7. '```' → logprob: -8.207164764404297
    8. ' ' → logprob: -8.832164764404297
    9. 'other' → logprob: -9.457164764404297
    10. 'rest' → logprob: -9.832164764404297

Token 428: ' non' (ID: 2893)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0010799680603668094
    2. ':
' → logprob: -7.50108003616333
    3. 'else' → logprob: -7.87608003616333
    4. '   ' → logprob: -9.126079559326172
    5. 'rest' → logprob: -11.251079559326172
    6. ' else' → logprob: -12.126079559326172
    7. 's' → logprob: -12.376079559326172
    8. '```' → logprob: -12.626079559326172
    9. ' rest' → logprob: -13.001079559326172
    10. ' :' → logprob: -13.376079559326172

Token 429: ' cou' (ID: 3840)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.1449265480041504
    2. 'pris' → logprob: -2.8949265480041504
    3. 'trait' → logprob: -3.8949265480041504
    4. 'cou' → logprob: -4.26992654800415
    5. 'pr' → logprob: -4.39492654800415
    6. 'vus' → logprob: -4.76992654800415
    7. 'prises' → logprob: -4.76992654800415
    8. '#' → logprob: -5.39492654800415
    9. 'pré' → logprob: -6.26992654800415
    10. '```' → logprob: -6.26992654800415

Token 430: 'verts' (ID: 32557)
  Prédit: 'verts'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'verts' → logprob: -0.0024904031306505203
    2. 'vr' → logprob: -6.752490520477295
    3. 'vert' → logprob: -7.002490520477295
    4. 'rt' → logprob: -9.252490043640137
    5. 'erts' → logprob: -9.502490043640137
    6. 'vrt' → logprob: -9.627490043640137
    7. 'v' → logprob: -9.877490043640137
    8. '#' → logprob: -10.377490043640137
    9. 'verture' → logprob: -10.752490043640137
    10. 'r' → logprob: -10.752490043640137

Token 431: ' par' (ID: 686)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00021069261129014194
    2. 'else' → logprob: -9.125210762023926
    3. ':
' → logprob: -9.375210762023926
    4. '   ' → logprob: -11.125210762023926
    5. ' :' → logprob: -15.000210762023926
    6. 's' → logprob: -15.375210762023926
    7. ':

' → logprob: -15.500210762023926
    8. '```' → logprob: -15.500210762023926
    9. ' else' → logprob: -15.750210762023926
    10. '#' → logprob: -15.750210762023926

Token 432: ' les' (ID: 1341)
  Prédit: 'les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'les' → logprob: -0.3147071599960327
    2. 'if' → logprob: -1.9397071599960327
    3. 'la' → logprob: -3.1897072792053223
    4. 'l' → logprob: -3.1897072792053223
    5. 'le' → logprob: -3.8147072792053223
    6. ' les' → logprob: -4.064707279205322
    7. '#' → logprob: -5.689707279205322
    8. ' la' → logprob: -7.564707279205322
    9. 'else' → logprob: -8.314706802368164
    10. ' l' → logprob: -8.689706802368164

Token 433: ' if' (ID: 538)
  Prédit: 'conditions'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'conditions' → logprob: -0.1253785789012909
    2. 'pr' → logprob: -2.2503786087036133
    3. 'if' → logprob: -5.000378608703613
    4. 'prem' → logprob: -6.500378608703613
    5. ' conditions' → logprob: -6.625378608703613
    6. 'tests' → logprob: -7.000378608703613
    7. '#' → logprob: -7.875378608703613
    8. 'preced' → logprob: -7.875378608703613
    9. 'elif' → logprob: -8.250378608703613
    10. 'instructions' → logprob: -8.250378608703613

Token 434: ' et' (ID: 859)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.04669148474931717
    2. 'else' → logprob: -3.171691417694092
    3. ':
' → logprob: -5.671691417694092
    4. ' else' → logprob: -8.79669189453125
    5. '   ' → logprob: -9.92169189453125
    6. '```' → logprob: -10.67169189453125
    7. 'e' → logprob: -12.67169189453125
    8. ':

' → logprob: -13.17169189453125
    9. '.' → logprob: -13.17169189453125
    10. ' :' → logprob: -13.29669189453125

Token 435: ' elif' (ID: 9497)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.010800440795719624
    2. ' elif' → logprob: -4.760800361633301
    3. 'else' → logprob: -6.135800361633301
    4. ' else' → logprob: -11.1358003616333
    5. 'if' → logprob: -13.3858003616333
    6. '#' → logprob: -14.2608003616333
    7. 'elseif' → logprob: -14.7608003616333
    8. 'elsif' → logprob: -15.0108003616333
    9. 'el' → logprob: -15.1358003616333
    10. ' les' → logprob: -15.3858003616333

Token 436: ' précéd' (ID: 55435)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.06757098436355591
    2. ':
' → logprob: -2.817570924758911
    3. 'else' → logprob: -5.19257116317749
    4. '   ' → logprob: -10.817570686340332
    5. 'print' → logprob: -12.692570686340332
    6. ' else' → logprob: -12.817570686340332
    7. ':

' → logprob: -13.567570686340332
    8. '```' → logprob: -13.942570686340332
    9. ' :' → logprob: -14.567570686340332
    10. 'elif' → logprob: -15.067570686340332

Token 437: 'ents' (ID: 1094)
  Prédit: 'ents'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ents' → logprob: -0.0252479650080204
    2. 'entes' → logprob: -4.275248050689697
    3. 'ent' → logprob: -4.525248050689697
    4. 'ente' → logprob: -9.025247573852539
    5. 'else' → logprob: -9.650247573852539
    6. 'emment' → logprob: -12.525247573852539
    7. '#' → logprob: -13.775247573852539
    8. '```' → logprob: -14.025247573852539
    9. 'elif' → logprob: -15.525247573852539
    10. 'ants' → logprob: -16.65024757385254

Token 438: '.
' (ID: 558)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.020759329199790955
    2. ':
' → logprob: -4.520759105682373
    3. 'else' → logprob: -4.645759105682373
    4. '   ' → logprob: -10.020759582519531
    5. ' else' → logprob: -11.270759582519531
    6. ' :' → logprob: -13.270759582519531
    7. 'elif' → logprob: -13.770759582519531
    8. 'print' → logprob: -13.895759582519531
    9. '```' → logprob: -14.270759582519531
    10. ':

' → logprob: -15.645759582519531

Token 439: '#' (ID: 2)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -3.857719275401905e-05
    2. '   ' → logprob: -11.125038146972656
    3. ' else' → logprob: -11.125038146972656
    4. 'print' → logprob: -11.750038146972656
    5. ':' → logprob: -14.125038146972656
    6. 'elif' → logprob: -15.125038146972656
    7. '```' → logprob: -15.875038146972656
    8. ':
' → logprob: -17.625038146972656
    9. '_else' → logprob: -18.375038146972656
    10. '    
' → logprob: -18.750038146972656

Token 440: ' Ici' (ID: 145754)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0002124806633219123
    2. 'print' → logprob: -8.500212669372559
    3. ' else' → logprob: -12.125212669372559
    4. '   ' → logprob: -13.000212669372559
    5. 'elif' → logprob: -13.750212669372559
    6. '```' → logprob: -16.000211715698242
    7. '    
' → logprob: -18.500211715698242
    8. '#else' → logprob: -18.875211715698242
    9. 'elses' → logprob: -19.000211715698242
    10. 'Else' → logprob: -19.000211715698242

Token 441: ',' (ID: 11)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.009339163079857826
    2. ':
' → logprob: -5.009339332580566
    3. 'else' → logprob: -6.134339332580566
    4. '   ' → logprob: -7.759339332580566
    5. ' :' → logprob: -11.009339332580566
    6. ' else' → logprob: -12.134339332580566
    7. 'print' → logprob: -12.884339332580566
    8. ' :
' → logprob: -14.509339332580566
    9. ',' → logprob: -15.134339332580566
    10. ':

' → logprob: -15.134339332580566

Token 442: ' cela' (ID: 17542)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7133026123046875
    2. 'print' → logprob: -0.7133026123046875
    3. 'else' → logprob: -4.4633026123046875
    4. ' print' → logprob: -4.8383026123046875
    5. '#' → logprob: -7.8383026123046875
    6. ' else' → logprob: -9.588302612304688
    7. ' ' → logprob: -11.088302612304688
    8. '  ' → logprob: -11.588302612304688
    9. '```' → logprob: -11.838302612304688
    10. '    
' → logprob: -12.088302612304688

Token 443: ' signifie' (ID: 81149)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.11744986474514008
    2. ':
' → logprob: -2.4924497604370117
    3. 'print' → logprob: -4.367449760437012
    4. 'else' → logprob: -5.242449760437012
    5. '   ' → logprob: -5.742449760437012
    6. ' print' → logprob: -5.867449760437012
    7. ' signifie' → logprob: -5.867449760437012
    8. ' :' → logprob: -8.492449760437012
    9. ' else' → logprob: -8.492449760437012
    10. ' means' → logprob: -8.867449760437012

Token 444: ' que' (ID: 661)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0639629065990448
    2. '#' → logprob: -3.563962936401367
    3. 'else' → logprob: -3.688962936401367
    4. 'print' → logprob: -5.563962936401367
    5. ':' → logprob: -5.938962936401367
    6. ' que' → logprob: -6.688962936401367
    7. ' ' → logprob: -8.688962936401367
    8. '  ' → logprob: -8.813962936401367
    9. ':
' → logprob: -8.813962936401367
    10. '    
' → logprob: -9.188962936401367

Token 445: ' A' (ID: 355)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.011741893365979195
    2. '   ' → logprob: -4.886742115020752
    3. ' print' → logprob: -6.136742115020752
    4. 'A' → logprob: -6.386742115020752
    5. 'else' → logprob: -9.261741638183594
    6. ' A' → logprob: -9.386741638183594
    7. '#' → logprob: -9.761741638183594
    8. ' ' → logprob: -11.136741638183594
    9. 'B' → logprob: -11.636741638183594
    10. '  ' → logprob: -11.886741638183594

Token 446: ' est' (ID: 893)
  Prédit: '<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '<' → logprob: -0.4740861654281616
    2. ' <' → logprob: -0.9740861654281616
    3. ' <=' → logprob: -13.599085807800293
    4. '<int' → logprob: -13.599085807800293
    5. '<=' → logprob: -13.724085807800293
    6. '<
' → logprob: -13.724085807800293
    7. '<s' → logprob: -14.349085807800293
    8. ' <
' → logprob: -14.349085807800293
    9. '<n' → logprob: -14.474085807800293
    10. ' ' → logprob: -14.974085807800293

Token 447: ' inférieur' (ID: 191498)
  Prédit: '<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<' → logprob: -0.0265749990940094
    2. ' <' → logprob: -3.7765750885009766
    3. ' inférieur' → logprob: -5.901575088500977
    4. '#' → logprob: -9.276575088500977
    5. 'moins' → logprob: -9.401575088500977
    6. ' moins' → logprob: -9.526575088500977
    7. 'inf' → logprob: -9.651575088500977
    8. 'strict' → logprob: -9.776575088500977
    9. ' less' → logprob: -10.026575088500977
    10. '5' → logprob: -10.026575088500977

Token 448: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.4636499881744385
    2. 'à' → logprob: -1.3386499881744385
    3. '   ' → logprob: -2.3386499881744385
    4. '13' → logprob: -5.213649749755859
    5. '```' → logprob: -6.213649749755859
    6. '12' → logprob: -7.213649749755859
    7. ' ou' → logprob: -7.463649749755859
    8. '6' → logprob: -8.08864974975586
    9. '14' → logprob: -8.08864974975586
    10. ' to' → logprob: -8.21364974975586

Token 449: ' ' (ID: 220)
  Prédit: '6'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -0.00317783304490149
    2. ' ' → logprob: -5.753177642822266
    3. '```' → logprob: -16.878177642822266
    4. '=' → logprob: -18.190677642822266
    5. ' six' → logprob: -18.190677642822266
    6. '   ' → logprob: -18.315677642822266
    7. ' ' → logprob: -18.753177642822266
    8. '  ' → logprob: -19.128177642822266
    9. '۶' → logprob: -19.128177642822266
    10. 'six' → logprob: -19.128177642822266

Token 450: '6' (ID: 21)
  Prédit: '6'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -1.1756367712223437e-05
    2. ' ' → logprob: -11.375011444091797
    3. '```' → logprob: -16.250011444091797
    4. '0' → logprob: -17.375011444091797
    5. '
' → logprob: -17.750011444091797
    6. '13' → logprob: -18.062511444091797
    7. '=' → logprob: -18.687511444091797
    8. '06' → logprob: -18.812511444091797
    9. '1' → logprob: -18.812511444091797
    10. ' ' → logprob: -18.937511444091797

Token 451: '.
' (ID: 558)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2425318956375122
    2. ':
' → logprob: -1.7425318956375122
    3. '   ' → logprob: -3.4925317764282227
    4. 'print' → logprob: -4.742531776428223
    5. 'else' → logprob: -6.867531776428223
    6. '):
' → logprob: -9.867531776428223
    7. ' print' → logprob: -11.242531776428223
    8. '):' → logprob: -11.367531776428223
    9. ')' → logprob: -11.742531776428223
    10. '```' → logprob: -12.117531776428223

Token 452: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.07241203635931015
    2. 'print' → logprob: -2.8224120140075684
    3. '   ' → logprob: -4.572412014007568
    4. '```' → logprob: -10.447412490844727
    5. ' else' → logprob: -11.072412490844727
    6. 'elif' → logprob: -11.822412490844727
    7. ' print' → logprob: -12.697412490844727
    8. ':' → logprob: -14.322412490844727
    9. '    
' → logprob: -14.322412490844727
    10. '``' → logprob: -15.572412490844727

Token 453: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.12696410715579987
    2. ':
' → logprob: -2.1269640922546387
    3. '   ' → logprob: -10.376964569091797
    4. ':
' → logprob: -12.876964569091797
    5. ' :' → logprob: -13.626964569091797
    6. ' :
' → logprob: -13.876964569091797
    7. ':

' → logprob: -15.751964569091797
    8. 'print' → logprob: -17.126964569091797
    9. ':\' → logprob: -17.626964569091797
    10. '[' → logprob: -17.876964569091797

Token 454: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.313358336687088
    2. '   ' → logprob: -1.3133583068847656
    3. ' print' → logprob: -9.313358306884766
    4. '	print' → logprob: -12.813358306884766
    5. '```' → logprob: -13.313358306884766
    6. '   ' → logprob: -14.688358306884766
    7. ' ' → logprob: -14.938358306884766
    8. '  ' → logprob: -15.063358306884766
    9. '0' → logprob: -15.063358306884766
    10. '       ' → logprob: -15.438358306884766

Token 455: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00011808603449026123
    2. '0' → logprob: -9.500118255615234
    3. '   ' → logprob: -10.875118255615234
    4. ' print' → logprob: -11.750118255615234
    5. 'pr' → logprob: -11.875118255615234
    6. 'prin' → logprob: -11.875118255615234
    7. 'int' → logprob: -14.125118255615234
    8. 'prit' → logprob: -14.750118255615234
    9. 'pri' → logprob: -14.875118255615234
    10. 'printf' → logprob: -15.500118255615234

Token 456: ' Si' (ID: 7832)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -4.084206375409849e-05
    2. '   ' → logprob: -10.750041007995605
    3. ' print' → logprob: -11.250041007995605
    4. 'pr' → logprob: -12.750041007995605
    5. 'prin' → logprob: -13.500041007995605
    6. 'pass' → logprob: -15.000041007995605
    7. '#' → logprob: -15.000041007995605
    8. 'int' → logprob: -15.875041007995605
    9. ' ' → logprob: -15.875041007995605
    10. 'if' → logprob: -16.00004005432129

Token 457: ' A' (ID: 355)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.1245926022529602
    2. ' print' → logprob: -2.3745925426483154
    3. '   ' → logprob: -4.3745927810668945
    4. 'int' → logprob: -5.4995927810668945
    5. 'A' → logprob: -5.6245927810668945
    6. ' int' → logprob: -6.3745927810668945
    7. 'B' → logprob: -6.8745927810668945
    8. ' B' → logprob: -7.6245927810668945
    9. ' A' → logprob: -7.8745927810668945
    10. ' ' → logprob: -9.749592781066895

Token 458: ' est' (ID: 893)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.1792868673801422
    2. ' >=' → logprob: -2.8042869567871094
    3. ' <=' → logprob: -3.0542869567871094
    4. '<' → logprob: -3.5542869567871094
    5. ' >' → logprob: -4.554286956787109
    6. '   ' → logprob: -5.304286956787109
    7. '<=' → logprob: -5.554286956787109
    8. ' ==' → logprob: -6.054286956787109
    9. '>=' → logprob: -6.304286956787109
    10. '>' → logprob: -7.054286956787109

Token 459: ' strict' (ID: 12035)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.3074316084384918
    2. 'int' → logprob: -1.4324315786361694
    3. 'print' → logprob: -4.182431697845459
    4. 'B' → logprob: -5.807431697845459
    5. ' int' → logprob: -6.057431697845459
    6. '1' → logprob: -6.432431697845459
    7. 'A' → logprob: -6.807431697845459
    8. ' ' → logprob: -6.807431697845459
    9. '   ' → logprob: -7.932431697845459
    10. '6' → logprob: -8.1824312210083

Token 460: 'ement' (ID: 962)
  Prédit: 'ement'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ement' → logprob: -3.03521392197581e-05
    2. 'ément' → logprob: -11.750030517578125
    3. 'emen' → logprob: -12.250030517578125
    4. ' inférieur' → logprob: -12.375030517578125
    5. 'e' → logprob: -12.500030517578125
    6. 'ements' → logprob: -13.375030517578125
    7. '<' → logprob: -13.375030517578125
    8. 'ment' → logprob: -13.500030517578125
    9. 'rement' → logprob: -13.625030517578125
    10. '   ' → logprob: -13.875030517578125

Token 461: ' inférieur' (ID: 191498)
  Prédit: 'inf'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'inf' → logprob: -0.5875400900840759
    2. ' inférieur' → logprob: -0.8375400900840759
    3. 'infer' → logprob: -4.962540149688721
    4. '<' → logprob: -5.587540149688721
    5. ' inf' → logprob: -7.587540149688721
    6. 'moins' → logprob: -8.337539672851562
    7. '0' → logprob: -11.462539672851562
    8. 'strict' → logprob: -11.587539672851562
    9. ' <' → logprob: -11.962539672851562
    10. 'sup' → logprob: -12.462539672851562

Token 462: ' à' (ID: 1221)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.38381725549697876
    2. ' à' → logprob: -1.258817195892334
    3. 'à' → logprob: -3.383817195892334
    4. '  ' → logprob: -8.508817672729492
    5. ' ' → logprob: -9.133817672729492
    6. ' to' → logprob: -9.383817672729492
    7. 'A' → logprob: -9.383817672729492
    8. ''à' → logprob: -9.883817672729492
    9. 'a' → logprob: -10.008817672729492
    10. '<' → logprob: -10.008817672729492

Token 463: ' ' (ID: 220)
  Prédit: '6'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -0.00462154159322381
    2. ' ' → logprob: -5.379621505737305
    3. '0' → logprob: -13.879621505737305
    4. 'A' → logprob: -16.129621505737305
    5. '   ' → logprob: -16.504621505737305
    6. '```' → logprob: -16.879621505737305
    7. '1' → logprob: -17.379621505737305
    8. '  ' → logprob: -17.442121505737305
    9. 'print' → logprob: -17.442121505737305
    10. ' ' → logprob: -17.567121505737305

Token 464: '6' (ID: 21)
  Prédit: '6'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -4.842555426876061e-06
    2. ' ' → logprob: -12.250004768371582
    3. '```' → logprob: -17.6250057220459
    4. '0' → logprob: -19.0000057220459
    5. '   ' → logprob: -19.5000057220459
    6. '
' → logprob: -19.7500057220459
    7. '۶' → logprob: -20.3750057220459
    8. '٦' → logprob: -20.5000057220459
    9. 'A' → logprob: -20.8125057220459
    10. '﻿' → logprob: -21.1250057220459

Token 465: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.17178425192832947
    2. 'print' → logprob: -2.1717841625213623
    3. ':
' → logprob: -3.6717841625213623
    4. ':' → logprob: -4.046784400939941
    5. ' print' → logprob: -7.671784400939941
    6. ',' → logprob: -8.171784400939941
    7. '
' → logprob: -9.796784400939941
    8. '       ' → logprob: -10.671784400939941
    9. ' :
' → logprob: -10.921784400939941
    10. '.' → logprob: -11.046784400939941

Token 466: ' on' (ID: 402)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.014197707176208496
    2. '   ' → logprob: -4.389197826385498
    3. ' print' → logprob: -6.389197826385498
    4. ' ' → logprob: -13.13919734954834
    5. '  ' → logprob: -13.26419734954834
    6. '	print' → logprob: -13.63919734954834
    7. '    ' → logprob: -14.63919734954834
    8. '```' → logprob: -15.01419734954834
    9. 'printf' → logprob: -15.51419734954834
    10. '#' → logprob: -15.63919734954834

Token 467: ' affiche' (ID: 127479)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.07157132774591446
    2. ' print' → logprob: -2.6965713500976562
    3. '   ' → logprob: -6.446571350097656
    4. ' ' → logprob: -11.571571350097656
    5. '  ' → logprob: -11.696571350097656
    6. '	print' → logprob: -11.946571350097656
    7. 'aff' → logprob: -11.946571350097656
    8. ' imprime' → logprob: -12.446571350097656
    9. ' affiche' → logprob: -13.071571350097656
    10. '    ' → logprob: -13.071571350097656

Token 468: ' la' (ID: 557)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.01853419654071331
    2. 'int' → logprob: -4.018534183502197
    3. ' ' → logprob: -9.018534660339355
    4. 'B' → logprob: -9.268534660339355
    5. ' int' → logprob: -9.768534660339355
    6. 'A' → logprob: -10.018534660339355
    7. 'print' → logprob: -10.768534660339355
    8. '(int' → logprob: -11.018534660339355
    9. '(' → logprob: -11.143534660339355
    10. '"' → logprob: -11.893534660339355

Token 469: ' chaîne' (ID: 89288)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.01786426641047001
    2. 'int' → logprob: -4.267864227294922
    3. 'print' → logprob: -5.642864227294922
    4. '1' → logprob: -10.392864227294922
    5. '"' → logprob: -10.642864227294922
    6. 'B' → logprob: -11.392864227294922
    7. 'A' → logprob: -11.392864227294922
    8. '(int' → logprob: -11.392864227294922
    9. '(' → logprob: -11.517864227294922
    10. ' int' → logprob: -11.642864227294922

Token 470: ' de' (ID: 334)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.015162250958383083
    2. 'de' → logprob: -5.265162467956543
    3. '"A' → logprob: -5.765162467956543
    4. ''' → logprob: -6.640162467956543
    5. '"D' → logprob: -7.265162467956543
    6. '"C' → logprob: -7.265162467956543
    7. '"B' → logprob: -7.265162467956543
    8. '   ' → logprob: -7.390162467956543
    9. '"d' → logprob: -7.515162467956543
    10. '"La' → logprob: -8.140162467956543

Token 471: ' caractères' (ID: 183106)
  Prédit: 'car'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'car' → logprob: -0.07169926911592484
    2. '"' → logprob: -2.696699380874634
    3. ' caractères' → logprob: -6.696699142456055
    4. ''' → logprob: -9.071699142456055
    5. '"La' → logprob: -9.321699142456055
    6. '"L' → logprob: -10.196699142456055
    7. '"A' → logprob: -10.196699142456055
    8. '"d' → logprob: -10.321699142456055
    9. 'print' → logprob: -10.821699142456055
    10. 'texte' → logprob: -10.946699142456055

Token 472: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.015902386978268623
    2. '"C' → logprob: -5.140902519226074
    3. '"A' → logprob: -6.140902519226074
    4. '"La' → logprob: -6.390902519226074
    5. '"D' → logprob: -7.015902519226074
    6. '"S' → logprob: -7.515902519226074
    7. '"N' → logprob: -7.515902519226074
    8. '"L' → logprob: -7.640902519226074
    9. '"B' → logprob: -7.640902519226074
    10. '"No' → logprob: -7.765902519226074

Token 473: '0' (ID: 15)
  Prédit: 'No'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.21946997940540314
    2. 'pas' → logprob: -3.9694700241088867
    3. 'Encore' → logprob: -4.344470024108887
    4. 'Go' → logprob: -4.469470024108887
    5. 'Too' → logprob: -4.594470024108887
    6. 'en' → logprob: -4.594470024108887
    7. '"' → logprob: -4.719470024108887
    8. 'Pas' → logprob: -4.969470024108887
    9. '0' → logprob: -5.219470024108887
    10. 'Stop' → logprob: -5.219470024108887

Token 474: '".
' (ID: 26880)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -0.003305573482066393
    2. '"' → logprob: -6.003305435180664
    3. '0' → logprob: -7.128305435180664
    4. '")
' → logprob: -11.378305435180664
    5. '").' → logprob: -11.753305435180664
    6. '".' → logprob: -13.003305435180664
    7. '00' → logprob: -13.378305435180664
    8. '")
' → logprob: -13.753305435180664
    9. ')' → logprob: -14.503305435180664
    10. ' ")' → logprob: -14.503305435180664

Token 475: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.029769349843263626
    2. 'print' → logprob: -3.5297694206237793
    3. ' print' → logprob: -11.529768943786621
    4. '```' → logprob: -11.654768943786621
    5. '	print' → logprob: -15.779768943786621
    6. '       ' → logprob: -16.779769897460938
    7. '``' → logprob: -16.779769897460938
    8. '   ' → logprob: -16.904769897460938
    9. '  ' → logprob: -18.654769897460938
    10. '`' → logprob: -19.529769897460938

Token 476: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.029784973710775375
    2. '   ' → logprob: -3.529784917831421
    3. ' print' → logprob: -10.27978515625
    4. '```' → logprob: -16.27978515625
    5. '	print' → logprob: -17.65478515625
    6. '  ' → logprob: -20.52978515625
    7. '       ' → logprob: -20.52978515625
    8. 'Print' → logprob: -20.77978515625
    9. ' ' → logprob: -21.40478515625
    10. '``' → logprob: -21.52978515625

Token 477: ' Les' (ID: 7029)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.004163164179772139
    2. '   ' → logprob: -5.5041632652282715
    3. ' print' → logprob: -9.379162788391113
    4. '```' → logprob: -15.629162788391113
    5. '	print' → logprob: -17.12916374206543
    6. 'Print' → logprob: -19.12916374206543
    7. '  ' → logprob: -19.12916374206543
    8. ' ' → logprob: -19.25416374206543
    9. '``' → logprob: -19.62916374206543
    10. '       ' → logprob: -19.75416374206543

Token 478: ' gu' (ID: 1704)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.001936962129548192
    2. ' print' → logprob: -6.251936912536621
    3. '   ' → logprob: -11.876936912536621
    4. ' ' → logprob: -14.876936912536621
    5. 'pr' → logprob: -15.126936912536621
    6. ')' → logprob: -15.251936912536621
    7. '0' → logprob: -15.626936912536621
    8. '  ' → logprob: -15.876936912536621
    9. '    ' → logprob: -16.751937866210938
    10. '"' → logprob: -17.001937866210938

Token 479: 'ille' (ID: 3301)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -1.0508906841278076
    2. 'illes' → logprob: -1.6758906841278076
    3. 'af' → logprob: -1.9258906841278076
    4. 'ettes' → logprob: -2.8008906841278076
    5. 'ille' → logprob: -2.9258906841278076
    6. 'ches' → logprob: -3.1758906841278076
    7. 'iches' → logprob: -3.9258906841278076
    8. 'if' → logprob: -4.050890922546387
    9. 'i' → logprob: -4.175890922546387
    10. 'a' → logprob: -4.550890922546387

Token 480: 'mets' (ID: 153788)
  Prédit: 'ettes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ettes' → logprob: -0.8363563418388367
    2. 'ttes' → logprob: -1.7113564014434814
    3. 'mets' → logprob: -1.8363564014434814
    4. 'tes' → logprob: -2.2113564014434814
    5. 'etes' → logprob: -2.5863564014434814
    6. 't' → logprob: -4.336356163024902
    7. 'illes' → logprob: -4.711356163024902
    8. 'f' → logprob: -5.461356163024902
    9. 'les' → logprob: -5.586356163024902
    10. 'met' → logprob: -6.461356163024902

Token 481: ' indiqu' (ID: 100773)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.12019824981689453
    2. '""' → logprob: -2.6201982498168945
    3. '")' → logprob: -3.2451982498168945
    4. '"""' → logprob: -7.1201982498168945
    5. ')' → logprob: -7.8701982498168945
    6. '("")' → logprob: -8.995198249816895
    7. 'print' → logprob: -9.870198249816895
    8. '""""' → logprob: -10.745198249816895
    9. '"user' → logprob: -10.870198249816895
    10. ' "' → logprob: -11.370198249816895

Token 482: 'ent' (ID: 299)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.018539221957325935
    2. '")' → logprob: -4.5185394287109375
    3. 's' → logprob: -5.6435394287109375
    4. 'es' → logprob: -6.3935394287109375
    5. 'ent' → logprob: -7.6435394287109375
    6. '"s' → logprob: -7.8935394287109375
    7. '"""' → logprob: -7.8935394287109375
    8. 'z' → logprob: -9.018539428710938
    9. '"user' → logprob: -9.143539428710938
    10. '"La' → logprob: -9.268539428710938

Token 483: ' qu' (ID: 474)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -7.584239938296378e-06
    2. '   ' → logprob: -12.875007629394531
    3. ''' → logprob: -13.125007629394531
    4. '0' → logprob: -14.125007629394531
    5. ' "' → logprob: -14.250007629394531
    6. '"""' → logprob: -15.250007629394531
    7. 'que' → logprob: -15.625007629394531
    8. '")' → logprob: -15.750007629394531
    9. '"user' → logprob: -16.00000762939453
    10. '"a' → logprob: -16.12500762939453

Token 484: ''il' (ID: 14683)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0031196027994155884
    2. 'print' → logprob: -6.253119468688965
    3. '")' → logprob: -7.503119468688965
    4. ''il' → logprob: -9.253119468688965
    5. '0' → logprob: -9.503119468688965
    6. ''' → logprob: -9.503119468688965
    7. '"a' → logprob: -9.878119468688965
    8. 'la' → logprob: -10.003119468688965
    9. ''on' → logprob: -10.253119468688965
    10. '   ' → logprob: -10.253119468688965

Token 485: ' s' (ID: 265)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.450824499130249
    2. 's' → logprob: -1.825824499130249
    3. 'print' → logprob: -1.825824499130249
    4. ' s' → logprob: -4.450824737548828
    5. ' faut' → logprob: -4.575824737548828
    6. ''' → logprob: -4.950824737548828
    7. ' print' → logprob: -5.325824737548828
    8. 'f' → logprob: -5.700824737548828
    9. 'est' → logprob: -7.075824737548828
    10. 'n' → logprob: -8.325824737548828

Token 486: ''agit' (ID: 72975)
  Prédit: ''agit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''agit' → logprob: -0.060023192316293716
    2. 'print' → logprob: -3.060023307800293
    3. ''' → logprob: -4.935023307800293
    4. 'e' → logprob: -6.435023307800293
    5. 's' → logprob: -7.310023307800293
    6. 'agit' → logprob: -7.560023307800293
    7. ''ag' → logprob: -7.935023307800293
    8. ''aff' → logprob: -8.185023307800293
    9. ''est' → logprob: -8.935023307800293
    10. '"' → logprob: -9.185023307800293

Token 487: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.0688595250248909
    2. ' d' → logprob: -3.193859577178955
    3. '"d' → logprob: -4.193859577178955
    4. '"' → logprob: -4.568859577178955
    5. 'de' → logprob: -10.693859100341797
    6. '")' → logprob: -11.068859100341797
    7. 'une' → logprob: -11.318859100341797
    8. '"""' → logprob: -12.568859100341797
    9. ')' → logprob: -13.193859100341797
    10. ' simplement' → logprob: -13.193859100341797

Token 488: ''une' (ID: 13337)
  Prédit: ''une'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''une' → logprob: -0.1680949181318283
    2. ''un' → logprob: -2.4180948734283447
    3. '"' → logprob: -3.4180948734283447
    4. 'une' → logprob: -3.4180948734283447
    5. 'un' → logprob: -10.543094635009766
    6. '"a' → logprob: -10.793094635009766
    7. ''' → logprob: -11.668094635009766
    8. '’une' → logprob: -11.668094635009766
    9. ' une' → logprob: -12.168094635009766
    10. 'e' → logprob: -12.793094635009766

Token 489: ' chaîne' (ID: 89288)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.04450637847185135
    2. 'chaine' → logprob: -3.919506311416626
    3. 'string' → logprob: -4.044506549835205
    4. '0' → logprob: -5.294506549835205
    5. 'texte' → logprob: -7.419506549835205
    6. 'print' → logprob: -8.169506072998047
    7. 'car' → logprob: -9.669506072998047
    8. 'cha' → logprob: -9.669506072998047
    9. ' string' → logprob: -10.294506072998047
    10. ''' → logprob: -10.419506072998047

Token 490: ' de' (ID: 334)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.8691235780715942
    2. 'de' → logprob: -1.2441235780715942
    3. '")' → logprob: -1.2441235780715942
    4. ')' → logprob: -6.369123458862305
    5. ' de' → logprob: -6.494123458862305
    6. '   ' → logprob: -7.869123458862305
    7. '")
' → logprob: -7.994123458862305
    8. '_de' → logprob: -10.244123458862305
    9. '.' → logprob: -10.369123458862305
    10. '"d' → logprob: -10.369123458862305

Token 491: ' caractères' (ID: 183106)
  Prédit: 'car'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'car' → logprob: -0.0006101056351326406
    2. '"' → logprob: -8.1256103515625
    3. ' caractères' → logprob: -8.1256103515625
    4. 'chars' → logprob: -11.6256103515625
    5. 'print' → logprob: -12.7506103515625
    6. 'char' → logprob: -13.0006103515625
    7. 'texte' → logprob: -13.2506103515625
    8. 'characters' → logprob: -13.8756103515625
    9. ' caracteres' → logprob: -15.0006103515625
    10. '0' → logprob: -15.6256103515625

Token 492: ',' (ID: 11)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -0.1280638724565506
    2. '   ' → logprob: -2.378063917160034
    3. '")
' → logprob: -3.753063917160034
    4. '"' → logprob: -6.003063678741455
    5. ')' → logprob: -6.878063678741455
    6. ')
' → logprob: -8.503064155578613
    7. 'print' → logprob: -8.503064155578613
    8. '")
' → logprob: -10.503064155578613
    9. '.' → logprob: -11.128064155578613
    10. '").' → logprob: -11.628064155578613

Token 493: ' et' (ID: 859)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.11624480783939362
    2. '   ' → logprob: -2.2412447929382324
    3. '")' → logprob: -6.116244792938232
    4. ')' → logprob: -8.11624526977539
    5. 'print' → logprob: -8.24124526977539
    6. ''' → logprob: -8.74124526977539
    7. '0' → logprob: -8.99124526977539
    8. ' "' → logprob: -9.11624526977539
    9. '       ' → logprob: -10.11624526977539
    10. '"""' → logprob: -10.24124526977539

Token 494: ' non' (ID: 2893)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.03638894855976105
    2. '   ' → logprob: -3.536388874053955
    3. ' print' → logprob: -5.036388874053955
    4. '#' → logprob: -9.536389350891113
    5. '"' → logprob: -10.786389350891113
    6. ')' → logprob: -11.286389350891113
    7. '    ' → logprob: -13.161389350891113
    8. '")' → logprob: -13.161389350891113
    9. '#print' → logprob: -13.411389350891113
    10. '0' → logprob: -13.661389350891113

Token 495: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.7432610392570496
    2. ')' → logprob: -1.6182610988616943
    3. 'd' → logprob: -2.3682610988616943
    4. '   ' → logprob: -2.7432610988616943
    5. 'une' → logprob: -3.3682610988616943
    6. '"' → logprob: -3.7432610988616943
    7. ' ' → logprob: -4.493260860443115
    8. ' que' → logprob: -4.618260860443115
    9. 'pas' → logprob: -4.618260860443115
    10. ' pas' → logprob: -4.743260860443115

Token 496: ''un' (ID: 9788)
  Prédit: ''un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''un' → logprob: -0.5965356230735779
    2. ''une' → logprob: -0.8465356230735779
    3. 'e' → logprob: -4.096535682678223
    4. 'une' → logprob: -6.596535682678223
    5. ''' → logprob: -6.596535682678223
    6. '"' → logprob: -7.596535682678223
    7. 'u' → logprob: -8.971535682678223
    8. ''u' → logprob: -9.346535682678223
    9. 'print' → logprob: -9.471535682678223
    10. ''ent' → logprob: -9.971535682678223

Token 497: ' nombre' (ID: 9733)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.6033220887184143
    2. '"' → logprob: -0.9783220887184143
    3. 'nombre' → logprob: -3.1033220291137695
    4. 'z' → logprob: -4.3533220291137695
    5. 'string' → logprob: -4.6033220291137695
    6. 'print' → logprob: -5.2283220291137695
    7. 'ent' → logprob: -6.1033220291137695
    8. 'chaine' → logprob: -7.1033220291137695
    9. 'zero' → logprob: -7.9783220291137695
    10. ''' → logprob: -9.60332202911377

Token 498: '.
' (ID: 558)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -0.04248371347784996
    2. '")
' → logprob: -3.7924838066101074
    3. '   ' → logprob: -4.167483806610107
    4. ')' → logprob: -6.167483806610107
    5. '"' → logprob: -6.917483806610107
    6. 'print' → logprob: -8.66748332977295
    7. ')
' → logprob: -8.66748332977295
    8. ')")' → logprob: -10.04248332977295
    9. '")
' → logprob: -10.79248332977295
    10. ')")
' → logprob: -10.79248332977295

Token 499: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2526509463787079
    2. 'print' → logprob: -1.5026509761810303
    3. ' print' → logprob: -7.252650737762451
    4. '```' → logprob: -11.25265121459961
    5. '	print' → logprob: -15.75265121459961
    6. '       ' → logprob: -16.87765121459961
    7. '   ' → logprob: -17.50265121459961
    8. '  ' → logprob: -17.62765121459961
    9. '``' → logprob: -17.75265121459961
    10. ' ' → logprob: -18.37765121459961

Token 500: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.023319199681282043
    2. '   ' → logprob: -3.7733192443847656
    3. ' print' → logprob: -9.523319244384766
    4. '```' → logprob: -14.648319244384766
    5. '	print' → logprob: -16.898319244384766
    6. '  ' → logprob: -18.398319244384766
    7. '       ' → logprob: -19.148319244384766
    8. ' ' → logprob: -19.398319244384766
    9. 'Print' → logprob: -19.648319244384766
    10. '.print' → logprob: -20.398319244384766

Token 501: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -8.613945101387799e-05
    2. '(' → logprob: -9.500085830688477
    3. '('' → logprob: -11.500085830688477
    4. '"' → logprob: -14.000085830688477
    5. '("")' → logprob: -15.750085830688477
    6. ' ("' → logprob: -16.875085830688477
    7. '()' → logprob: -18.000085830688477
    8. '   ' → logprob: -20.250085830688477
    9. '(
' → logprob: -20.625085830688477
    10. '(("' → logprob: -20.750085830688477

Token 502: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: 0.0
    2. ' ' → logprob: -23.5
    3. '۰' → logprob: -25.75
    4. '"' → logprob: -26.625
    5. '")' → logprob: -26.625
    6. '０' → logprob: -27.0
    7. '```' → logprob: -28.25
    8. '﻿' → logprob: -28.375
    9. '00' → logprob: -28.5
    10. ' ' → logprob: -28.75

Token 503: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -1.2664456789934775e-06
    2. ')' → logprob: -14.375000953674316
    3. ')")' → logprob: -15.000000953674316
    4. '")
' → logprob: -15.500000953674316
    5. '"' → logprob: -18.000001907348633
    6. ' ")' → logprob: -19.500001907348633
    7. '}")' → logprob: -19.625001907348633
    8. '”)' → logprob: -20.375001907348633
    9. '')' → logprob: -20.500001907348633
    10. '"))' → logprob: -21.250001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 501
Tokens correctement prédits (1ère position, stricte): 135
Tokens correctement prédits (1ère position, avec adaptation): 136
Tokens correctement prédits (top 10): 310
Précision stricte (1ère position): 26.95%
Précision adaptée (1ère position): 27.15%
Précision (top 10): 61.88%
================================================================================
