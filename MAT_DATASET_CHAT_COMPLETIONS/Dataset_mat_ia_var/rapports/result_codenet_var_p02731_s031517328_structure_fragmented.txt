================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:20:55
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def get_input():
    return input()

def to_int(value):
    return int(value)

def calculate_cube(value):
    return value * value * value

def divide_by_27(value):
    return value / 27

def print_result(result):
    print(result)

def main():
    user_input = get_input()
    int_value = to_int(user_input)
    cube = calculate_cube(int_value)
    divided = divide_by_27(cube)
    print_result(divided)

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' get' (ID: 717)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0032705222256481647
    2. '_' → logprob: -6.253270626068115
    3. '():' → logprob: -7.253270626068115
    4. '```' → logprob: -8.378270149230957
    5. '()' → logprob: -8.628270149230957
    6. ' (' → logprob: -9.878270149230957
    7. '(_' → logprob: -9.878270149230957
    8. '(_:' → logprob: -10.503270149230957
    9. '(:' → logprob: -10.878270149230957
    10. '("("' → logprob: -12.003270149230957

Token 4: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.6345653533935547
    2. '   ' → logprob: -1.6345653533935547
    3. '\' → logprob: -2.0095653533935547
    4. '    
' → logprob: -3.3845653533935547
    5. '\n' → logprob: -3.6345653533935547
    6. '(' → logprob: -3.8845653533935547
    7. '  
' → logprob: -5.134565353393555
    8. '   
' → logprob: -5.259565353393555
    9. '()' → logprob: -5.384565353393555
    10. '(
' → logprob: -5.384565353393555

Token 5: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.1634688824415207
    2. 'input' → logprob: -2.538468837738037
    3. 'user' → logprob: -3.413468837738037
    4. '   ' → logprob: -4.038468837738037
    5. ' return' → logprob: -5.288468837738037
    6. 'x' → logprob: -5.538468837738037
    7. '```' → logprob: -5.538468837738037
    8. ' ' → logprob: -5.663468837738037
    9. 'text' → logprob: -6.788468837738037
    10. 'i' → logprob: -7.288468837738037

Token 6: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.376924067735672
    2. ' input' → logprob: -1.3769240379333496
    3. 'input' → logprob: -3.3769240379333496
    4. '"' → logprob: -4.00192403793335
    5. ''' → logprob: -5.25192403793335
    6. ' "' → logprob: -6.62692403793335
    7. ' '' → logprob: -7.12692403793335
    8. '  ' → logprob: -7.37692403793335
    9. ' None' → logprob: -8.126924514770508
    10. '(input' → logprob: -8.126924514770508

Token 7: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0017678854055702686
    2. '()' → logprob: -6.501768112182617
    3. '('' → logprob: -9.001768112182617
    4. ' (' → logprob: -10.376768112182617
    5. '("("' → logprob: -10.501768112182617
    6. '(
' → logprob: -10.626768112182617
    7. ''' → logprob: -11.376768112182617
    8. '.' → logprob: -11.626768112182617
    9. '```' → logprob: -12.001768112182617
    10. '"' → logprob: -12.251768112182617

Token 8: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.9507591128349304
    2. '(' → logprob: -1.3257591724395752
    3. '()' → logprob: -2.450759172439575
    4. '\n' → logprob: -2.575759172439575
    5. '```' → logprob: -3.325759172439575
    6. '(
' → logprob: -3.450759172439575
    7. '#' → logprob: -3.700759172439575
    8. '<|end|>' → logprob: -3.825759172439575
    9. '\' → logprob: -4.325758934020996
    10. '
' → logprob: -4.700758934020996

Token 9: ' to' (ID: 316)
  Prédit: ' get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.6387852430343628
    2. ' calculate' → logprob: -1.1387852430343628
    3. ' process' → logprob: -2.7637853622436523
    4. ' main' → logprob: -3.3887853622436523
    5. ' print' → logprob: -4.638785362243652
    6. ' add' → logprob: -4.888785362243652
    7. ' space' → logprob: -5.388785362243652
    8. ' user' → logprob: -5.513785362243652
    9. ' validate' → logprob: -5.638785362243652
    10. ' compute' → logprob: -5.763785362243652

Token 10: '_int' (ID: 12285)
  Prédit: '_lower'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_lower' → logprob: -0.5456467270851135
    2. '_upper' → logprob: -1.0456466674804688
    3. '_string' → logprob: -4.045646667480469
    4. '_int' → logprob: -4.045646667480469
    5. '_' → logprob: -4.420646667480469
    6. '_input' → logprob: -5.170646667480469
    7. '_integer' → logprob: -5.545646667480469
    8. 'lower' → logprob: -5.670646667480469
    9. '_str' → logprob: -5.795646667480469
    10. 'ken' → logprob: -6.920646667480469

Token 11: '(value' (ID: 6333)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0032254871912300587
    2. ' (' → logprob: -6.003225326538086
    3. '_' → logprob: -8.628225326538086
    4. '("("' → logprob: -9.378225326538086
    5. '()' → logprob: -9.628225326538086
    6. '(token' → logprob: -10.003225326538086
    7. '(user' → logprob: -10.253225326538086
    8. '<|end|>' → logprob: -10.378225326538086
    9. '```' → logprob: -10.503225326538086
    10. '(convert' → logprob: -10.753225326538086

Token 12: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.07158831506967545
    2. '):' → logprob: -2.6965882778167725
    3. '(' → logprob: -7.571588516235352
    4. '):
' → logprob: -8.071588516235352
    5. ' )' → logprob: -8.696588516235352
    6. ')value' → logprob: -8.946588516235352
    7. '   ' → logprob: -9.071588516235352
    8. '(value' → logprob: -9.196588516235352
    9. '):

' → logprob: -9.571588516235352
    10. ',' → logprob: -10.071588516235352

Token 13: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.049447059631347656
    2. ' return' → logprob: -4.299447059631348
    3. ' int' → logprob: -4.424447059631348
    4. 'int' → logprob: -4.799447059631348
    5. ' value' → logprob: -5.174447059631348
    6. '(int' → logprob: -5.549447059631348
    7. '(' → logprob: -5.924447059631348
    8. '    ' → logprob: -7.174447059631348
    9. ' (' → logprob: -7.799447059631348
    10. '(value' → logprob: -7.799447059631348

Token 14: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3689637780189514
    2. ' int' → logprob: -2.1189637184143066
    3. ' return' → logprob: -2.1189637184143066
    4. '    ' → logprob: -3.6189637184143066
    5. 'int' → logprob: -3.6189637184143066
    6. '(' → logprob: -5.118963718414307
    7. 'return' (adapté à ' return') → logprob: -5.993963718414307
    8. ' ' → logprob: -5.993963718414307
    9. '(int' → logprob: -6.118963718414307
    10. ' (' → logprob: -7.118963718414307

Token 15: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.0021866646129637957
    2. 'int' → logprob: -6.1271867752075195
    3. ' ' → logprob: -14.12718677520752
    4. '   ' → logprob: -14.87718677520752
    5. '(int' → logprob: -15.12718677520752
    6. ' ' → logprob: -16.127185821533203
    7. '=int' → logprob: -17.002185821533203
    8. '	int' → logprob: -17.127185821533203
    9. '<int' → logprob: -17.627185821533203
    10. '```' → logprob: -17.752185821533203

Token 16: '(value' (ID: 6333)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0028719231486320496
    2. '(value' → logprob: -5.877871990203857
    3. '('' → logprob: -10.0028715133667
    4. '(
' → logprob: -11.5028715133667
    5. '("("' → logprob: -12.8778715133667
    6. '(

' → logprob: -13.0028715133667
    7. '()' → logprob: -13.5028715133667
    8. ' (' → logprob: -14.1278715133667
    9. '(return' → logprob: -14.1278715133667
    10. '(user' → logprob: -14.3778715133667

Token 17: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -6.704273118884885e-07
    2. '))' → logprob: -14.750000953674316
    3. ' )' → logprob: -16.125
    4. ')))' → logprob: -16.875
    5. ')
' → logprob: -17.75
    6. '())' → logprob: -18.375
    7. ')`' → logprob: -19.25
    8. '()' → logprob: -19.75
    9. '')' → logprob: -20.0
    10. '   ' → logprob: -20.0

Token 18: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0019217297667637467
    2. '\' → logprob: -7.001921653747559
    3. '\n' → logprob: -8.001921653747559
    4. '```' → logprob: -8.626921653747559
    5. '#' → logprob: -8.751921653747559
    6. '
' → logprob: -9.376921653747559
    7. '<|end|>' → logprob: -9.501921653747559
    8. '

' → logprob: -10.626921653747559
    9. '<|end|>' → logprob: -10.876921653747559
    10. 'a' → logprob: -11.251921653747559

Token 19: ' calculate' (ID: 17950)
  Prédit: ' add'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' add' → logprob: -0.858256459236145
    2. ' calculate' → logprob: -1.233256459236145
    3. ' main' → logprob: -2.7332563400268555
    4. ' multiply' → logprob: -2.9832563400268555
    5. ' square' → logprob: -3.4832563400268555
    6. ' get' → logprob: -3.7332563400268555
    7. ' def' → logprob: -3.8582563400268555
    8. ' sum' → logprob: -3.8582563400268555
    9. ' process' → logprob: -3.9832563400268555
    10. ' convert' → logprob: -4.1082563400268555

Token 20: '_cube' (ID: 171900)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.8348102569580078
    2. '_' → logprob: -1.2098102569580078
    3. '_sum' → logprob: -1.8348102569580078
    4. '_total' → logprob: -2.459810256958008
    5. '(_)' → logprob: -5.209810256958008
    6. '_factor' → logprob: -5.709810256958008
    7. '('_' → logprob: -6.334810256958008
    8. '_amount' → logprob: -6.834810256958008
    9. '_average' → logprob: -7.459810256958008
    10. ' ' → logprob: -7.584810256958008

Token 21: '(value' (ID: 6333)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0014514251379296184
    2. '(value' → logprob: -7.12645149230957
    3. ' (' → logprob: -8.37645149230957
    4. 'def' → logprob: -9.25145149230957
    5. '(x' → logprob: -9.50145149230957
    6. '(def' → logprob: -9.62645149230957
    7. '(n' → logprob: -10.12645149230957
    8. '(number' → logprob: -10.62645149230957
    9. '("("' → logprob: -10.87645149230957
    10. '(user' → logprob: -11.75145149230957

Token 22: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.026551658287644386
    2. ')' → logprob: -3.6515517234802246
    3. '   ' → logprob: -9.276551246643066
    4. '(' → logprob: -10.026551246643066
    5. '):
' → logprob: -10.151551246643066
    6. ' ' → logprob: -10.651551246643066
    7. ' ):' → logprob: -10.901551246643066
    8. '*' → logprob: -12.151551246643066
    9. '**' → logprob: -12.276551246643066
    10. '  ' → logprob: -12.651551246643066

Token 23: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0036783369723707438
    2. ' return' → logprob: -6.128678321838379
    3. 'return' → logprob: -7.003678321838379
    4. 'value' → logprob: -8.378678321838379
    5. ' value' → logprob: -9.503678321838379
    6. ' ' → logprob: -9.878678321838379
    7. '(value' → logprob: -9.878678321838379
    8. '    ' → logprob: -10.003678321838379
    9. '  ' → logprob: -10.253678321838379
    10. '(' → logprob: -10.628678321838379

Token 24: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.6900948882102966
    2. '   ' → logprob: -0.9400948882102966
    3. 'return' (adapté à ' return') → logprob: -2.9400949478149414
    4. ' value' → logprob: -3.1900949478149414
    5. 'value' → logprob: -4.315094947814941
    6. '```' → logprob: -8.690094947814941
    7. ' ' → logprob: -8.815094947814941
    8. '    ' → logprob: -9.190094947814941
    9. ')' → logprob: -10.690094947814941
    10. '  ' → logprob: -11.190094947814941

Token 25: ' value' (ID: 1432)
  Prédit: ' value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' value' → logprob: -0.0010648438474163413
    2. 'value' → logprob: -6.876064777374268
    3. ' ' → logprob: -10.376065254211426
    4. ' ' → logprob: -15.126065254211426
    5. '(value' → logprob: -16.00106430053711
    6. ' (' → logprob: -16.37606430053711
    7. ' pow' → logprob: -16.87606430053711
    8. '	value' → logprob: -17.00106430053711
    9. ' int' → logprob: -17.25106430053711
    10. '```' → logprob: -17.25106430053711

Token 26: ' *' (ID: 425)
  Prédit: ' **'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' **' → logprob: -0.12808431684970856
    2. '**' → logprob: -2.128084421157837
    3. ' *' → logprob: -6.878084182739258
    4. '*' → logprob: -9.378084182739258
    5. ' ***' → logprob: -10.878084182739258
    6. ' ' → logprob: -11.378084182739258
    7. '***' → logprob: -12.378084182739258
    8. '```' → logprob: -13.253084182739258
    9. ' ' → logprob: -13.503084182739258
    10. '  ' → logprob: -13.503084182739258

Token 27: ' value' (ID: 1432)
  Prédit: 'value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'value' → logprob: -0.38690268993377686
    2. ' value' → logprob: -1.1369026899337769
    3. ' ' → logprob: -10.636902809143066
    4. '  ' → logprob: -12.136902809143066
    5. '   ' → logprob: -13.511902809143066
    6. '	value' → logprob: -14.636902809143066
    7. '3' → logprob: -15.761902809143066
    8. '2' → logprob: -16.76190185546875
    9. ' ' → logprob: -17.26190185546875
    10. '4' → logprob: -17.38690185546875

Token 28: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.030353624373674393
    2. '*' → logprob: -3.530353546142578
    3. ' ' → logprob: -8.155353546142578
    4. '<|end|>' → logprob: -8.155353546142578
    5. 'value' → logprob: -11.155353546142578
    6. ' value' → logprob: -13.030353546142578
    7. '<|end|>' → logprob: -13.155353546142578
    8. '   ' → logprob: -13.155353546142578
    9. ' ' → logprob: -13.405353546142578
    10. '  ' → logprob: -13.405353546142578

Token 29: ' value' (ID: 1432)
  Prédit: 'value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'value' → logprob: -7.505351095460355e-05
    2. ' value' → logprob: -9.500075340270996
    3. '<|end|>' → logprob: -17.00007438659668
    4. '"value' → logprob: -18.37507438659668
    5. ')value' → logprob: -18.50007438659668
    6. ''value' → logprob: -18.62507438659668
    7. '	value' → logprob: -18.75007438659668
    8. '.value' → logprob: -19.37507438659668
    9. ' ' → logprob: -19.50007438659668
    10. '$value' → logprob: -19.87507438659668

Token 30: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.9194567799568176
    2. 'def' → logprob: -1.2944567203521729
    3. '\n' → logprob: -1.7944567203521729
    4. '

' → logprob: -2.044456720352173
    5. '\' → logprob: -4.044456958770752
    6. '<|end|>' → logprob: -4.794456958770752
    7. '#' → logprob: -6.294456958770752
    8. '```' → logprob: -6.419456958770752
    9. 'newline' → logprob: -8.169456481933594
    10. '<|end|>' → logprob: -8.419456481933594

Token 31: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.019440336152911186
    2. 'n' → logprob: -4.769440174102783
    3. '\n' → logprob: -5.894440174102783
    4. 'result' → logprob: -6.269440174102783
    5. '\' → logprob: -6.519440174102783
    6. 'value' → logprob: -6.769440174102783
    7. 'print' → logprob: -7.144440174102783
    8. '#' → logprob: -7.519440174102783
    9. 'number' → logprob: -8.019440650939941
    10. '```' → logprob: -8.144440650939941

Token 32: ' divide' (ID: 38484)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.258968710899353
    2. ' calculate' → logprob: -1.508968710899353
    3. ' get' → logprob: -5.758968830108643
    4. ' compute' → logprob: -6.133968830108643
    5. ' print' → logprob: -7.758968830108643
    6. ' factorial' → logprob: -7.883968830108643
    7. ' check' → logprob: -8.758968353271484
    8. ' solve' → logprob: -8.883968353271484
    9. ' find' → logprob: -9.258968353271484
    10. ' cube' → logprob: -9.383968353271484

Token 33: '_by' (ID: 8214)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01915350742638111
    2. '(a' → logprob: -4.769153594970703
    3. '(value' → logprob: -5.144153594970703
    4. '(div' → logprob: -6.519153594970703
    5. '_' → logprob: -6.769153594970703
    6. '_div' → logprob: -7.519153594970703
    7. ' (' → logprob: -7.894153594970703
    8. '_by' → logprob: -7.894153594970703
    9. '()' → logprob: -9.519153594970703
    10. '(x' → logprob: -9.644153594970703

Token 34: '_' (ID: 62)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -1.3172457218170166
    2. '_two' → logprob: -1.4422457218170166
    3. ' ' → logprob: -1.5672457218170166
    4. '_value' → logprob: -2.1922457218170166
    5. ' value' → logprob: -2.9422457218170166
    6. '(value' → logprob: -3.4422457218170166
    7. '_' → logprob: -3.4422457218170166
    8. 'value' → logprob: -3.4422457218170166
    9. '3' → logprob: -4.6922454833984375
    10. '_three' → logprob: -4.8172454833984375

Token 35: '27' (ID: 2092)
  Prédit: 'value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'value' → logprob: -0.6930376291275024
    2. 'input' → logprob: -2.193037509918213
    3. 'two' → logprob: -2.193037509918213
    4. 'three' → logprob: -2.193037509918213
    5. '2' → logprob: -2.443037509918213
    6. '3' → logprob: -3.068037509918213
    7. 'zero' → logprob: -4.443037509918213
    8. 'cube' → logprob: -4.818037509918213
    9. 'number' → logprob: -6.443037509918213
    10. 'five' → logprob: -6.443037509918213

Token 36: '(value' (ID: 6333)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0014138080878183246
    2. '(value' → logprob: -6.876413822174072
    3. '()' → logprob: -8.126413345336914
    4. ' (' → logprob: -10.501413345336914
    5. '("("' → logprob: -11.251413345336914
    6. '(x' → logprob: -12.376413345336914
    7. '(user' → logprob: -12.626413345336914
    8. '(parent' → logprob: -12.751413345336914
    9. '(open' → logprob: -12.876413345336914
    10. '```' → logprob: -12.876413345336914

Token 37: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.47408682107925415
    2. '):' → logprob: -0.9740868210792542
    3. ')value' → logprob: -12.97408676147461
    4. '):
' → logprob: -13.34908676147461
    5. ' )' → logprob: -13.59908676147461
    6. ' ):' → logprob: -14.09908676147461
    7. ')**' → logprob: -14.34908676147461
    8. '(' → logprob: -14.47408676147461
    9. ')：' → logprob: -14.97408676147461
    10. '   ' → logprob: -15.22408676147461

Token 38: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007945041172206402
    2. ' return' → logprob: -4.8829450607299805
    3. 'return' → logprob: -8.00794506072998
    4. '	return' → logprob: -13.75794506072998
    5. '```' → logprob: -13.75794506072998
    6. '    ' → logprob: -13.88294506072998
    7. '       ' → logprob: -14.00794506072998
    8. '   ' → logprob: -14.25794506072998
    9. ' ' → logprob: -14.50794506072998
    10. '    
' → logprob: -15.00794506072998

Token 39: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.41286879777908325
    2. 'return' (adapté à ' return') → logprob: -1.1628687381744385
    3. '   ' → logprob: -3.6628687381744385
    4. ' ' → logprob: -13.28786849975586
    5. ' if' → logprob: -14.41286849975586
    6. '    ' → logprob: -14.53786849975586
    7. '```' → logprob: -14.66286849975586
    8. '	return' → logprob: -15.03786849975586
    9. '  ' → logprob: -15.91286849975586
    10. 'if' → logprob: -16.28786849975586

Token 40: ' value' (ID: 1432)
  Prédit: ' value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' value' → logprob: -0.012511883862316608
    2. 'value' → logprob: -4.387511730194092
    3. '(value' → logprob: -14.13751220703125
    4. ' ' → logprob: -14.38751220703125
    5. '   ' → logprob: -14.88751220703125
    6. ' ' → logprob: -16.01251220703125
    7. ' (' → logprob: -16.51251220703125
    8. '	value' → logprob: -16.76251220703125
    9. ' /' → logprob: -16.88751220703125
    10. ' return' → logprob: -17.01251220703125

Token 41: ' /' (ID: 820)
  Prédit: ' /'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' /' → logprob: -0.10088799148797989
    2. '/' → logprob: -2.3508880138397217
    3. ' ' → logprob: -7.475887775421143
    4. ' //' → logprob: -9.9758882522583
    5. ' ' → logprob: -10.7258882522583
    6. '   ' → logprob: -11.6008882522583
    7. '  ' → logprob: -11.9758882522583
    8. '(' → logprob: -12.1008882522583
    9. '()' → logprob: -12.2258882522583
    10. ' /
' → logprob: -12.9758882522583

Token 42: ' ' (ID: 220)
  Prédit: '27'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '27' → logprob: -0.12693388760089874
    2. ' ' → logprob: -2.1269338130950928
    3. ' ' → logprob: -12.751934051513672
    4. '2' → logprob: -14.376934051513672
    5. '  ' → logprob: -14.876934051513672
    6. '26' → logprob: -15.001934051513672
    7. '   ' → logprob: -15.126934051513672
    8. '```' → logprob: -15.251934051513672
    9. '271' → logprob: -15.251934051513672
    10. '_' → logprob: -15.376934051513672

Token 43: '27' (ID: 2092)
  Prédit: '27'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '27' → logprob: -9.088346359931165e-07
    2. ' ' → logprob: -14.000000953674316
    3. '```' → logprob: -17.625
    4. '   ' → logprob: -18.125
    5. '273' → logprob: -19.5
    6. '2' → logprob: -19.75
    7. '271' → logprob: -19.75
    8. '3' → logprob: -19.8125
    9. '  ' → logprob: -20.0
    10. '`' → logprob: -20.125

Token 44: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.082953691482544
    2. 'def' → logprob: -1.207953691482544
    3. '\n' → logprob: -1.332953691482544
    4. '

' → logprob: -3.582953691482544
    5. '<|end|>' → logprob: -3.582953691482544
    6. '\' → logprob: -4.207953453063965
    7. '```' → logprob: -4.707953453063965
    8. '(' → logprob: -5.332953453063965
    9. '()' → logprob: -5.457953453063965
    10. '#' → logprob: -5.707953453063965

Token 45: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.06602247804403305
    2. 'n' → logprob: -3.4410223960876465
    3. 'result' → logprob: -4.5660223960876465
    4. 'd' → logprob: -4.5660223960876465
    5. '#' → logprob: -5.5660223960876465
    6. 'value' → logprob: -6.5660223960876465
    7. 'print' → logprob: -6.6910223960876465
    8. '\' → logprob: -6.9410223960876465
    9. 'x' → logprob: -6.9410223960876465
    10. 'v' → logprob: -7.3160223960876465

Token 46: ' print' (ID: 2123)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.5811044573783875
    2. ' main' → logprob: -0.9561044573783875
    3. ' process' → logprob: -3.5811045169830322
    4. ' get' → logprob: -4.206104278564453
    5. ' compute' → logprob: -4.581104278564453
    6. ' convert' → logprob: -6.956104278564453
    7. ' cube' → logprob: -7.706104278564453
    8. ' check' → logprob: -8.206104278564453
    9. ' analyze' → logprob: -8.331104278564453
    10. ' find' → logprob: -8.456104278564453

Token 47: '_result' (ID: 11623)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0022638519294559956
    2. '_' → logprob: -6.502264022827148
    3. '(value' → logprob: -8.752264022827148
    4. '()' → logprob: -9.252264022827148
    5. '_result' → logprob: -9.377264022827148
    6. '_output' → logprob: -9.627264022827148
    7. '("("' → logprob: -9.627264022827148
    8. '_value' → logprob: -9.877264022827148
    9. '("")' → logprob: -10.252264022827148
    10. '_parent' → logprob: -10.752264022827148

Token 48: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00036775172338820994
    2. '_' → logprob: -8.125368118286133
    3. '()' → logprob: -10.125368118286133
    4. '("("' → logprob: -12.375368118286133
    5. '_parent' → logprob: -12.625368118286133
    6. '(value' → logprob: -13.250368118286133
    7. '```' → logprob: -13.250368118286133
    8. '('' → logprob: -13.250368118286133
    9. 's' → logprob: -13.625368118286133
    10. '("""' → logprob: -13.750368118286133

Token 49: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.014180435799062252
    2. ')' → logprob: -4.264180660247803
    3. ':' → logprob: -11.389180183410645
    4. '():' → logprob: -13.014180183410645
    5. ' ):' → logprob: -13.514180183410645
    6. '):
' → logprob: -13.764180183410645
    7. '(' → logprob: -15.389180183410645
    8. '   ' → logprob: -15.639180183410645
    9. ' ' → logprob: -16.38918113708496
    10. ')：' → logprob: -16.76418113708496

Token 50: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00011796683247666806
    2. 'print' → logprob: -9.500118255615234
    3. ' print' → logprob: -10.125118255615234
    4. '```' → logprob: -13.500118255615234
    5. '   ' → logprob: -14.625118255615234
    6. '(' → logprob: -14.625118255615234
    7. ')' → logprob: -15.875118255615234
    8. '(print' → logprob: -16.250118255615234
    9. ':' → logprob: -16.375118255615234
    10. '    
' → logprob: -16.375118255615234

Token 51: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5034710764884949
    2. 'print' (adapté à ' print') → logprob: -1.5034711360931396
    3. ' print' → logprob: -1.7534711360931396
    4. '```' → logprob: -10.503471374511719
    5. ' ' → logprob: -12.128471374511719
    6. '  ' → logprob: -12.253471374511719
    7. '	print' → logprob: -13.503471374511719
    8. '    ' → logprob: -13.503471374511719
    9. '       ' → logprob: -14.878471374511719
    10. '   ' → logprob: -15.253471374511719

Token 52: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.5759983658790588
    2. '(' → logprob: -0.8259983658790588
    3. '()' → logprob: -10.575998306274414
    4. 'result' → logprob: -10.950998306274414
    5. '(f' → logprob: -11.825998306274414
    6. ' (' → logprob: -12.700998306274414
    7. '(
' → logprob: -13.950998306274414
    8. '(res' → logprob: -14.325998306274414
    9. '('' → logprob: -14.450998306274414
    10. '(results' → logprob: -14.825998306274414

Token 53: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -5.512236498361744e-07
    2. '))' → logprob: -15.250000953674316
    3. ' )' → logprob: -16.125
    4. '')' → logprob: -17.125
    5. ')
' → logprob: -17.25
    6. '`)' → logprob: -17.625
    7. '())' → logprob: -18.125
    8. '()' → logprob: -18.25
    9. '   ' → logprob: -18.5
    10. ')`' → logprob: -18.5

Token 54: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.09548591822385788
    2. 'n' → logprob: -3.3454859256744385
    3. 'if' → logprob: -3.7204859256744385
    4. 'value' → logprob: -4.095485687255859
    5. 'number' → logprob: -4.845485687255859
    6. 'result' → logprob: -6.220485687255859
    7. '#' → logprob: -6.470485687255859
    8. 'x' → logprob: -6.970485687255859
    9. 'input' → logprob: -7.720485687255859
    10. 'd' → logprob: -7.970485687255859

Token 55: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.0031696297228336334
    2. ' process' → logprob: -5.878169536590576
    3. ' calculate' → logprob: -8.128170013427734
    4. ' compute' → logprob: -10.253170013427734
    5. ' run' → logprob: -11.003170013427734
    6. ' get' → logprob: -12.253170013427734
    7. ' solve' → logprob: -12.378170013427734
    8. '_main' → logprob: -12.878170013427734
    9. ' perform' → logprob: -14.003170013427734
    10. 'main' → logprob: -14.378170013427734

Token 56: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0245352815836668
    2. '(' → logprob: -3.7745351791381836
    3. '()' → logprob: -6.774535179138184
    4. '_' → logprob: -9.274535179138184
    5. '(:' → logprob: -10.524535179138184
    6. ':' → logprob: -11.524535179138184
    7. ' ():' → logprob: -12.399535179138184
    8. '(**' → logprob: -13.274535179138184
    9. '(":' → logprob: -13.524535179138184
    10. '()>' → logprob: -13.774535179138184

Token 57: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.002796199405565858
    2. ' input' → logprob: -7.002796173095703
    3. 'input' → logprob: -7.127796173095703
    4. ' user' → logprob: -7.877796173095703
    5. ' value' → logprob: -8.252796173095703
    6. 'user' → logprob: -8.877796173095703
    7. 'value' → logprob: -9.127796173095703
    8. '    
' → logprob: -10.127796173095703
    9. 'n' → logprob: -10.252796173095703
    10. '       ' → logprob: -10.752796173095703

Token 58: ' user' (ID: 1825)
  Prédit: 'value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'value' → logprob: -0.29008814692497253
    2. 'user' (adapté à ' user') → logprob: -2.040088176727295
    3. '   ' → logprob: -2.540088176727295
    4. 'number' → logprob: -4.415088176727295
    5. 'num' → logprob: -4.790088176727295
    6. ' value' → logprob: -5.040088176727295
    7. 'n' → logprob: -5.165088176727295
    8. 'input' → logprob: -5.290088176727295
    9. ' user' → logprob: -5.915088176727295
    10. 'x' → logprob: -6.415088176727295

Token 59: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.04631893336772919
    2. '_' → logprob: -3.171319007873535
    3. '_value' → logprob: -5.796319007873535
    4. ' =' → logprob: -9.046319007873535
    5. '_val' → logprob: -9.421319007873535
    6. ' _' → logprob: -10.671319007873535
    7. '_in' → logprob: -11.171319007873535
    8. '=' → logprob: -12.171319007873535
    9. '_name' → logprob: -12.296319007873535
    10. '_s' → logprob: -12.671319007873535

Token 60: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0019441033946350217
    2. '=' → logprob: -6.251944065093994
    3. '_' → logprob: -11.626944541931152
    4. ' ' → logprob: -12.251944541931152
    5. '   ' → logprob: -14.626944541931152
    6. '  ' → logprob: -14.751944541931152
    7. '(' → logprob: -16.001943588256836
    8. 'space' → logprob: -16.126943588256836
    9. '_input' → logprob: -16.251943588256836
    10. ' =)' → logprob: -16.251943588256836

Token 61: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.3868834376335144
    2. 'get' → logprob: -1.1368834972381592
    3. '	get' → logprob: -11.886883735656738
    4. ' input' → logprob: -13.261883735656738
    5. ' ' → logprob: -13.511883735656738
    6. 'input' → logprob: -14.136883735656738
    7. '(get' → logprob: -14.136883735656738
    8. '_get' → logprob: -15.511883735656738
    9. '=get' → logprob: -15.636883735656738
    10. '   ' → logprob: -16.136882781982422

Token 62: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.00024477019906044006
    2. '_' → logprob: -8.375245094299316
    3. '_user' → logprob: -11.250245094299316
    4. ' _' → logprob: -14.875245094299316
    5. '_in' → logprob: -15.125245094299316
    6. '_output' → logprob: -15.750245094299316
    7. '_inputs' → logprob: -16.750244140625
    8. '```' → logprob: -16.875244140625
    9. ')_' → logprob: -17.000244140625
    10. '_Input' → logprob: -17.000244140625

Token 63: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -5.836499985889532e-05
    2. '(' → logprob: -9.8750581741333
    3. '()
' → logprob: -13.2500581741333
    4. ' ()' → logprob: -13.2500581741333
    5. '()(' → logprob: -14.7500581741333
    6. '()

' → logprob: -15.0000581741333
    7. '();' → logprob: -15.0000581741333
    8. '_' → logprob: -15.1250581741333
    9. '()`' → logprob: -15.1250581741333
    10. '().' → logprob: -15.3750581741333

Token 64: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.025183798745274544
    2. '    
' → logprob: -4.52518367767334
    3. 'value' → logprob: -5.02518367767334
    4. 'converted' → logprob: -6.40018367767334
    5. '
' → logprob: -6.52518367767334
    6. ' ' → logprob: -7.02518367767334
    7. '  
' → logprob: -7.02518367767334
    8. '   
' → logprob: -7.52518367767334
    9. 'user' → logprob: -7.52518367767334
    10. '  ' → logprob: -8.27518367767334

Token 65: ' int' (ID: 677)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.2958484888076782
    2. 'value' → logprob: -1.4208484888076782
    3. 'number' → logprob: -2.0458483695983887
    4. ' value' → logprob: -2.4208483695983887
    5. 'converted' → logprob: -2.5458483695983887
    6. ' number' → logprob: -2.6708483695983887
    7. 'num' → logprob: -2.9208483695983887
    8. 'int' (adapté à ' int') → logprob: -3.7958483695983887
    9. ' num' → logprob: -4.170848369598389
    10. ' converted' → logprob: -4.295848369598389

Token 66: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.032418083399534225
    2. '_user' → logprob: -4.032418251037598
    3. '_' → logprob: -5.032418251037598
    4. '_input' → logprob: -5.032418251037598
    5. '_val' → logprob: -6.907418251037598
    6. 'ed' → logprob: -9.782418251037598
    7. '_result' → logprob: -11.032418251037598
    8. 'user' → logprob: -11.782418251037598
    9. '_output' → logprob: -12.157418251037598
    10. '_version' → logprob: -12.157418251037598

Token 67: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01257946714758873
    2. '=' → logprob: -4.387579441070557
    3. ' ' → logprob: -9.637579917907715
    4. '   ' → logprob: -13.012579917907715
    5. '_' → logprob: -14.012579917907715
    6. '  ' → logprob: -14.512579917907715
    7. ' =)' → logprob: -15.137579917907715
    8. '()' → logprob: -15.512579917907715
    9. ')' → logprob: -15.512579917907715
    10. '	' → logprob: -16.2625789642334

Token 68: ' to' (ID: 316)
  Prédit: ' to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' to' → logprob: -0.0004306692280806601
    2. 'to' → logprob: -7.750430583953857
    3. ' ' → logprob: -17.875431060791016
    4. '	to' → logprob: -17.875431060791016
    5. ' ' → logprob: -18.000431060791016
    6. ' int' → logprob: -19.625431060791016
    7. '(to' → logprob: -19.875431060791016
    8. '   ' → logprob: -20.750431060791016
    9. '  ' → logprob: -21.125431060791016
    10. ' in' → logprob: -21.250431060791016

Token 69: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -5.478889215737581e-05
    2. '_' → logprob: -10.000054359436035
    3. ' _' → logprob: -12.875054359436035
    4. '_in' → logprob: -13.250054359436035
    5. 'int' → logprob: -13.375054359436035
    6. '_uint' → logprob: -14.125054359436035
    7. '_str' → logprob: -14.500054359436035
    8. '_t' → logprob: -14.875054359436035
    9. '_to' → logprob: -15.375054359436035
    10. '_integer' → logprob: -15.375054359436035

Token 70: '(user' (ID: 7195)
  Prédit: '(user'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(user' → logprob: -0.038047224283218384
    2. '(' → logprob: -3.2880473136901855
    3. '(value' → logprob: -12.788046836853027
    4. ' (' → logprob: -13.788046836853027
    5. '(input' → logprob: -14.788046836853027
    6. 'user' → logprob: -15.038046836853027
    7. '(
' → logprob: -15.538046836853027
    8. '(User' → logprob: -15.538046836853027
    9. '(us' → logprob: -16.163047790527344
    10. '('' → logprob: -16.288047790527344

Token 71: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.052374787628650665
    2. '_value' → logprob: -3.552374839782715
    3. 'put' → logprob: -3.927374839782715
    4. '_put' → logprob: -6.177374839782715
    5. '_' → logprob: -8.677374839782715
    6. ' _' → logprob: -9.052374839782715
    7. 't' → logprob: -10.052374839782715
    8. '(_' → logprob: -10.052374839782715
    9. '```' → logprob: -10.052374839782715
    10. '_p' → logprob: -10.552374839782715

Token 72: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -9.729906196298543e-06
    2. ')
' → logprob: -11.625009536743164
    3. ' )' → logprob: -14.625009536743164
    4. '   ' → logprob: -15.500009536743164
    5. '()' → logprob: -17.625009536743164
    6. '))' → logprob: -18.000009536743164
    7. ' ' → logprob: -18.625009536743164
    8. '),' → logprob: -19.125009536743164
    9. ')

' → logprob: -19.250009536743164
    10. '())' → logprob: -19.375009536743164

Token 73: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00133285962510854
    2. '    
' → logprob: -7.501332759857178
    3. '
' → logprob: -8.376333236694336
    4. 'cube' → logprob: -8.751333236694336
    5. 'result' → logprob: -8.751333236694336
    6. '<|end|>' → logprob: -9.876333236694336
    7. ' cube' → logprob: -10.376333236694336
    8. '  ' → logprob: -10.626333236694336
    9. '```' → logprob: -11.001333236694336
    10. '<|end|>' → logprob: -11.126333236694336

Token 74: ' cube' (ID: 46822)
  Prédit: 'cube'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cube' (adapté à ' cube') → logprob: -0.23309597373008728
    2. '   ' → logprob: -2.23309588432312
    3. ' cube' → logprob: -2.35809588432312
    4. 'result' → logprob: -5.483096122741699
    5. 'cub' → logprob: -7.108096122741699
    6. ' result' → logprob: -7.358096122741699
    7. ' ' → logprob: -8.7330961227417
    8. '  ' → logprob: -8.9830961227417
    9. ' cub' → logprob: -9.8580961227417
    10. '```' → logprob: -9.8580961227417

Token 75: ' =' (ID: 314)
  Prédit: '_value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.007071967236697674
    2. 'd' → logprob: -5.3820719718933105
    3. '_val' → logprob: -6.6320719718933105
    4. '_d' → logprob: -7.2570719718933105
    5. '_' → logprob: -7.8820719718933105
    6. '_result' → logprob: -10.257071495056152
    7. ' =' → logprob: -12.382071495056152
    8. '=' → logprob: -12.757071495056152
    9. '=_' → logprob: -13.382071495056152
    10. 'value' → logprob: -13.757071495056152

Token 76: ' calculate' (ID: 17950)
  Prédit: ' calculate'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.25193437933921814
    2. 'calculate' → logprob: -1.5019344091415405
    3. ' to' → logprob: -13.376934051513672
    4. ' cube' → logprob: -13.626934051513672
    5. 'to' → logprob: -14.001934051513672
    6. '   ' → logprob: -14.251934051513672
    7. 'cube' → logprob: -15.001934051513672
    8. ' compute' → logprob: -15.501934051513672
    9. 'calc' → logprob: -15.751934051513672
    10. '.calculate' → logprob: -15.876934051513672

Token 77: '_cube' (ID: 171900)
  Prédit: '_cube'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cube' → logprob: -0.0009200352360494435
    2. '_' → logprob: -7.000919818878174
    3. '_c' → logprob: -11.750920295715332
    4. '__' → logprob: -16.125919342041016
    5. 'cube' → logprob: -16.125919342041016
    6. 'Cube' → logprob: -16.250919342041016
    7. ' _' → logprob: -16.875919342041016
    8. '_chunk' → logprob: -17.375919342041016
    9. '```' → logprob: -17.500919342041016
    10. ' cube' → logprob: -17.500919342041016

Token 78: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.14139029383659363
    2. '(int' → logprob: -2.141390323638916
    3. '(c' → logprob: -4.266390323638916
    4. ' (' → logprob: -8.641389846801758
    5. '(value' → logprob: -9.391389846801758
    6. '(cpu' → logprob: -11.391389846801758
    7. ' ' → logprob: -12.141389846801758
    8. '(
' → logprob: -12.641389846801758
    9. '(integer' → logprob: -12.766389846801758
    10. '(float' → logprob: -12.891389846801758

Token 79: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.0002181987656513229
    2. '_cube' → logprob: -8.750218391418457
    3. ')' → logprob: -10.000218391418457
    4. ')(' → logprob: -12.625218391418457
    5. '_' → logprob: -12.625218391418457
    6. ')_' → logprob: -12.875218391418457
    7. 'value' → logprob: -13.250218391418457
    8. '(c' → logprob: -14.000218391418457
    9. '_val' → logprob: -14.375218391418457
    10. 'cube' → logprob: -14.500218391418457

Token 80: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -9.29340603761375e-05
    2. ')
' → logprob: -9.375092506408691
    3. '   ' → logprob: -12.250092506408691
    4. ' )' → logprob: -13.250092506408691
    5. ')c' → logprob: -14.750092506408691
    6. ')value' → logprob: -15.500092506408691
    7. ')
' → logprob: -15.625092506408691
    8. ')`' → logprob: -15.875092506408691
    9. ')

' → logprob: -16.000093460083008
    10. ' ' → logprob: -16.000093460083008

Token 81: '   ' (ID: 271)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.5985622406005859
    2. '   ' → logprob: -1.348562240600586
    3. '
' → logprob: -1.973562240600586
    4. ' result' → logprob: -3.848562240600586
    5. '    
' → logprob: -3.973562240600586
    6. 'div' → logprob: -6.098562240600586
    7. ' 
' → logprob: -6.598562240600586
    8. '   
' → logprob: -6.723562240600586
    9. '  
' → logprob: -6.848562240600586
    10. '```' → logprob: -7.098562240600586

Token 82: ' divided' (ID: 28261)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.26854583621025085
    2. ' result' → logprob: -2.2685458660125732
    3. 'div' → logprob: -2.3935458660125732
    4. ' divided' → logprob: -3.6435458660125732
    5. '   ' → logprob: -4.893545627593994
    6. 'division' → logprob: -6.143545627593994
    7. 'divide' → logprob: -7.018545627593994
    8. ' quotient' → logprob: -7.393545627593994
    9. '    
' → logprob: -7.518545627593994
    10. '27' → logprob: -7.643545627593994

Token 83: ' =' (ID: 314)
  Prédit: '_value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.15940004587173462
    2. '_by' → logprob: -2.28439998626709
    3. '_result' → logprob: -3.78439998626709
    4. ' =' → logprob: -4.40939998626709
    5. '_' → logprob: -5.15939998626709
    6. '=' → logprob: -6.15939998626709
    7. '_cube' → logprob: -6.15939998626709
    8. '_val' → logprob: -8.15939998626709
    9. '=_' → logprob: -8.40939998626709
    10. '_output' → logprob: -10.40939998626709

Token 84: ' divide' (ID: 38484)
  Prédit: ' divide'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' divide' → logprob: -0.0017056517535820603
    2. 'divide' → logprob: -6.376705646514893
    3. 'div' → logprob: -13.12670612335205
    4. ' ' → logprob: -14.25170612335205
    5. ' div' → logprob: -15.25170612335205
    6. ' divided' → logprob: -16.126705169677734
    7. ' divid' → logprob: -16.126705169677734
    8. ' dividir' → logprob: -16.376705169677734
    9. '_div' → logprob: -17.001705169677734
    10. ' ' → logprob: -17.251705169677734

Token 85: '_by' (ID: 8214)
  Prédit: '_by'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_by' → logprob: -6.704273118884885e-07
    2. '_b' → logprob: -14.875000953674316
    3. '_' → logprob: -15.125000953674316
    4. ' _' → logprob: -18.375
    5. '_BY' → logprob: -18.625
    6. '_or' → logprob: -18.625
    7. '_div' → logprob: -18.875
    8. '_to' → logprob: -18.875
    9. '_By' → logprob: -19.0
    10. '_value' → logprob: -19.5

Token 86: '_' (ID: 62)
  Prédit: '27'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '27' → logprob: -0.07002191245555878
    2. '_' → logprob: -2.695021867752075
    3. ' ' → logprob: -9.820021629333496
    4. '_cube' → logprob: -11.445021629333496
    5. 'cube' → logprob: -11.820021629333496
    6. '_
' → logprob: -13.445021629333496
    7. 'div' → logprob: -13.570021629333496
    8. '_div' → logprob: -13.570021629333496
    9. '_)' → logprob: -13.820021629333496
    10. '```' → logprob: -13.820021629333496

Token 87: '27' (ID: 2092)
  Prédit: '27'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '27' → logprob: -2.816093228830141e-06
    2. '2' → logprob: -13.50000286102295
    3. ' ' → logprob: -14.25000286102295
    4. 'cube' → logprob: -14.75000286102295
    5. 'value' → logprob: -16.875001907348633
    6. '3' → logprob: -17.375001907348633
    7. '37' → logprob: -17.687501907348633
    8. '```' → logprob: -17.812501907348633
    9. '1' → logprob: -18.125001907348633
    10. '   ' → logprob: -18.812501907348633

Token 88: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.06561373174190521
    2. '(' → logprob: -2.8156137466430664
    3. '(div' → logprob: -5.690613746643066
    4. ' (' → logprob: -8.315613746643066
    5. ' ' → logprob: -12.065613746643066
    6. '(d' → logprob: -12.940613746643066
    7. '(
' → logprob: -13.065613746643066
    8. '()' → logprob: -13.690613746643066
    9. '(`' → logprob: -13.690613746643066
    10. '(

' → logprob: -14.190613746643066

Token 89: 'ube' (ID: 4502)
  Prédit: 'ube'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ube' → logprob: -0.015030961483716965
    2. 'u' → logprob: -4.265030860900879
    3. 'ub' → logprob: -7.265030860900879
    4. '   ' → logprob: -9.140030860900879
    5. '```' → logprob: -11.515030860900879
    6. ')' → logprob: -11.890030860900879
    7. '  ' → logprob: -12.265030860900879
    8. 'ubic' → logprob: -12.515030860900879
    9. 'cube' → logprob: -12.765030860900879
    10. 'b' → logprob: -13.140030860900879

Token 90: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.012525777332484722
    2. ')
' → logprob: -4.38752555847168
    3. ')
' → logprob: -11.76252555847168
    4. '   ' → logprob: -12.26252555847168
    5. ' )' → logprob: -13.13752555847168
    6. ')

' → logprob: -14.01252555847168
    7. ' )
' → logprob: -15.38752555847168
    8. ' ' → logprob: -15.63752555847168
    9. '()' → logprob: -16.01252555847168
    10. ')`' → logprob: -16.88752555847168

Token 91: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012241908349096775
    2. '
' → logprob: -4.637241840362549
    3. '    
' → logprob: -6.637241840362549
    4. ')
' → logprob: -8.262242317199707
    5. ')' → logprob: -8.387242317199707
    6. 'print' → logprob: -8.512242317199707
    7. '  
' → logprob: -9.387242317199707
    8. '```' → logprob: -9.512242317199707
    9. ' 
' → logprob: -9.762242317199707
    10. ' ' → logprob: -10.137242317199707

Token 92: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.010252502746880054
    2. '   ' → logprob: -4.635252475738525
    3. ' print' → logprob: -7.885252475738525
    4. '
' → logprob: -9.635252952575684
    5. '    
' → logprob: -10.385252952575684
    6. ' ' → logprob: -12.010252952575684
    7. '	print' → logprob: -12.260252952575684
    8. '  
' → logprob: -12.635252952575684
    9. ' 
' → logprob: -13.135252952575684
    10. '(print' → logprob: -13.135252952575684

Token 93: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -0.00019471932318992913
    2. '_' → logprob: -8.625194549560547
    3. '_res' → logprob: -11.875194549560547
    4. ' _' → logprob: -13.000194549560547
    5. '```' → logprob: -13.125194549560547
    6. '_results' → logprob: -13.500194549560547
    7. '_Result' → logprob: -14.375194549560547
    8. '_r' → logprob: -14.625194549560547
    9. '(' → logprob: -14.875194549560547
    10. '(_' → logprob: -15.125194549560547

Token 94: '(div' (ID: 73108)
  Prédit: '(div'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(div' → logprob: -0.01818014681339264
    2. '(' → logprob: -4.0181803703308105
    3. '(di' → logprob: -11.018179893493652
    4. ' (' → logprob: -11.768179893493652
    5. '(d' → logprob: -13.518179893493652
    6. '(
' → logprob: -13.643179893493652
    7. '(

' → logprob: -13.768179893493652
    8. ' ' → logprob: -14.643179893493652
    9. '()' → logprob: -14.893179893493652
    10. '(dis' → logprob: -15.393179893493652

Token 95: 'ided' (ID: 6350)
  Prédit: 'ided'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ided' → logprob: -0.0003373694489710033
    2. 'id' → logprob: -8.250337600708008
    3. 'ide' → logprob: -9.750337600708008
    4. ' id' → logprob: -12.500337600708008
    5. '_id' → logprob: -12.625337600708008
    6. 'ed' → logprob: -13.000337600708008
    7. 'i' → logprob: -13.250337600708008
    8. 'ied' → logprob: -13.250337600708008
    9. ')' → logprob: -14.125337600708008
    10. 'ded' → logprob: -14.125337600708008

Token 96: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.463036435074173e-05
    2. ')
' → logprob: -10.625024795532227
    3. ' )' → logprob: -15.375024795532227
    4. ')

' → logprob: -18.000024795532227
    5. '()' → logprob: -19.250024795532227
    6. ')`' → logprob: -19.500024795532227
    7. ')#' → logprob: -19.875024795532227
    8. ')
' → logprob: -19.875024795532227
    9. '))' → logprob: -20.000024795532227
    10. '`)' → logprob: -21.000024795532227

Token 97: 'main' (ID: 7731)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7093579769134521
    2. '\n' → logprob: -1.3343579769134521
    3. 'if' → logprob: -1.8343579769134521
    4. '\' → logprob: -3.209357976913452
    5. '' → logprob: -4.709358215332031
    6. 'main' → logprob: -4.959358215332031
    7. '()' → logprob: -5.084358215332031
    8. '  
' → logprob: -5.459358215332031
    9. '(
' → logprob: -5.959358215332031
    10. '#' → logprob: -6.084358215332031

Token 98: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0036729946732521057
    2. '(' → logprob: -5.628673076629639
    3. '()
' → logprob: -9.62867259979248
    4. '(
' → logprob: -12.75367259979248
    5. '()

' → logprob: -13.62867259979248
    6. '()`' → logprob: -14.25367259979248
    7. ' ()' → logprob: -14.50367259979248
    8. '#' → logprob: -14.87867259979248
    9. '()\' → logprob: -14.87867259979248
    10. '```' → logprob: -15.12867259979248


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 96
Tokens correctement prédits (1ère position, stricte): 45
Tokens correctement prédits (1ère position, avec adaptation): 48
Tokens correctement prédits (top 10): 84
Précision stricte (1ère position): 46.88%
Précision adaptée (1ère position): 50.00%
Précision (top 10): 87.50%
================================================================================
