================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:20:03
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
K, N = (int(x) for x in input().split())
A = list(map(int, input().split()))

def get_diffs(lst, k):
    result = []
    for idx in range(len(lst)-1):
        result += [lst[idx+1] - lst[idx]]
    result.append(k - lst[-1] + lst[0])
    return result

from functools import reduce

d = get_diffs(A, K)
sorted_d = sorted(d)

res = 0
for elem in range(N-1):
    res = res + sorted_d[elem]

print(res)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'K' (ID: 42)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' N' (ID: 478)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.05608706176280975
    2. ',' → logprob: -3.681087017059326
    3. ' =' → logprob: -4.181087017059326
    4. '[' → logprob: -5.181087017059326
    5. '(' → logprob: -5.681087017059326
    6. ')' → logprob: -5.806087017059326
    7. '+' → logprob: -7.431087017059326
    8. '.' → logprob: -8.056087493896484
    9. '*' → logprob: -8.181087493896484
    10. '```' → logprob: -8.681087493896484

Token 4: ' (' (ID: 350)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0656932145357132
    2. '10' → logprob: -3.1906931400299072
    3. ' map' → logprob: -4.315693378448486
    4. 'map' → logprob: -6.315693378448486
    5. 'range' → logprob: -6.690693378448486
    6. '20' → logprob: -6.940693378448486
    7. '100' → logprob: -7.190693378448486
    8. '32' → logprob: -7.315693378448486
    9. '0' → logprob: -7.440693378448486
    10. ' range' → logprob: -7.440693378448486

Token 5: 'int' (ID: 491)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.8047702312469482
    2. '5' → logprob: -1.8047702312469482
    3. ')' → logprob: -2.4297702312469482
    4. 'int' → logprob: -2.5547702312469482
    5. '3' → logprob: -2.6797702312469482
    6. 'K' → logprob: -2.8047702312469482
    7. '100' → logprob: -2.9297702312469482
    8. '2' → logprob: -5.179770469665527
    9. '1' → logprob: -5.304770469665527
    10. 'k' → logprob: -5.304770469665527

Token 6: '(x' (ID: 4061)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.2872464060783386
    2. ')' → logprob: -1.9122464656829834
    3. '(' → logprob: -2.5372464656829834
    4. '(x' → logprob: -5.162246227264404
    5. '(s' → logprob: -5.412246227264404
    6. ')(' → logprob: -5.537246227264404
    7. '(i' → logprob: -6.037246227264404
    8. ',)' → logprob: -6.287246227264404
    9. 'input' → logprob: -6.787246227264404
    10. ',' → logprob: -6.787246227264404

Token 7: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00026205103495158255
    2. '),' → logprob: -9.875262260437012
    3. '(x' → logprob: -10.000262260437012
    4. '(input' → logprob: -10.250262260437012
    5. '(i' → logprob: -10.250262260437012
    6. '(' → logprob: -10.875262260437012
    7. '))' → logprob: -11.125262260437012
    8. '(s' → logprob: -11.375262260437012
    9. 'input' → logprob: -11.375262260437012
    10. '(k' → logprob: -12.250262260437012

Token 8: ' for' (ID: 395)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.8127533197402954
    2. '(input' → logprob: -1.4377533197402954
    3. 'for' → logprob: -1.5627533197402954
    4. 'input' → logprob: -2.937753200531006
    5. ' for' → logprob: -3.937753200531006
    6. '(x' → logprob: -4.062753200531006
    7. ',' → logprob: -4.687753200531006
    8. '<|end|>' → logprob: -5.437753200531006
    9. '),' → logprob: -6.687753200531006
    10. ',input' → logprob: -6.937753200531006

Token 9: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.6796251535415649
    2. 'x' → logprob: -2.0546250343322754
    3. ' line' → logprob: -2.0546250343322754
    4. ' input' → logprob: -2.6796250343322754
    5. ' in' → logprob: -2.9296250343322754
    6. 'input' → logprob: -2.9296250343322754
    7. '_' → logprob: -3.8046250343322754
    8. 'in' → logprob: -4.429625034332275
    9. 'line' → logprob: -4.554625034332275
    10. 'range' → logprob: -5.554625034332275

Token 10: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.45271018147468567
    2. ' input' → logprob: -1.3277101516723633
    3. 'input' → logprob: -2.7027101516723633
    4. '(input' → logprob: -3.9527101516723633
    5. 'in' → logprob: -5.202710151672363
    6. '<|end|>' → logprob: -5.827710151672363
    7. '=input' → logprob: -5.827710151672363
    8. ')' → logprob: -7.952710151672363
    9. '(' → logprob: -8.702710151672363
    10. ' (' → logprob: -9.077710151672363

Token 11: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.38688158988952637
    2. ' input' → logprob: -1.1368815898895264
    3. '(input' → logprob: -12.261881828308105
    4. '<input' → logprob: -13.511881828308105
    5. '=input' → logprob: -14.136881828308105
    6. '```' → logprob: -14.261881828308105
    7. ' ' → logprob: -14.886881828308105
    8. '[input' → logprob: -15.136881828308105
    9. 'range' → logprob: -15.386881828308105
    10. 'user' → logprob: -15.386881828308105

Token 12: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.023455103859305382
    2. '()' → logprob: -3.8984551429748535
    3. '().' → logprob: -6.0234551429748535
    4. ')' → logprob: -8.523454666137695
    5. '();)' → logprob: -9.398454666137695
    6. '());' → logprob: -9.523454666137695
    7. '.readline' → logprob: -11.023454666137695
    8. ' ())' → logprob: -11.148454666137695
    9. '()>' → logprob: -11.273454666137695
    10. '()),' → logprob: -11.398454666137695

Token 13: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0005992617807351053
    2. 'strip' → logprob: -7.500599384307861
    3. ' split' → logprob: -10.625598907470703
    4. 'rstrip' → logprob: -10.750598907470703
    5. '(split' → logprob: -15.125598907470703
    6. 'spl' → logprob: -15.875598907470703
    7. 'read' → logprob: -16.000598907470703
    8. '```' → logprob: -17.750598907470703
    9. ' strip' → logprob: -18.375598907470703
    10. 's' → logprob: -18.375598907470703

Token 14: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0025860045570880175
    2. '()' → logprob: -6.5025858879089355
    3. ')' → logprob: -6.8775858879089355
    4. ' ())' → logprob: -11.002586364746094
    5. '(' → logprob: -11.252586364746094
    6. '()))' → logprob: -11.502586364746094
    7. '();)' → logprob: -13.127586364746094
    8. '('' → logprob: -13.252586364746094
    9. '()]' → logprob: -13.252586364746094
    10. '(()' → logprob: -13.377586364746094

Token 15: 'A' (ID: 32)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.964738667011261
    2. 'for' → logprob: -1.5897386074066162
    3. ',' → logprob: -2.214738607406616
    4. 'if' → logprob: -2.339738607406616
    5. '[' → logprob: -2.714738607406616
    6. '
' → logprob: -3.714738607406616
    7. '```' → logprob: -4.214738845825195
    8. '`' → logprob: -4.589738845825195
    9. '.' → logprob: -4.589738845825195
    10. ')' → logprob: -4.964738845825195

Token 16: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.016655568033456802
    2. '.' → logprob: -4.516655445098877
    3. '[A' → logprob: -6.766655445098877
    4. '[]' → logprob: -6.891655445098877
    5. '[:]' → logprob: -7.266655445098877
    6. '[K' → logprob: -7.516655445098877
    7. '=' → logprob: -7.641655445098877
    8. '.append' → logprob: -7.641655445098877
    9. ' =' → logprob: -7.891655445098877
    10. '_' → logprob: -8.391655921936035

Token 17: ' list' (ID: 1562)
  Prédit: '[int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[int' → logprob: -0.030487187206745148
    2. ' [' → logprob: -4.030487060546875
    3. '[' → logprob: -5.405487060546875
    4. 'list' → logprob: -5.655487060546875
    5. '[]' → logprob: -6.405487060546875
    6. '[list' → logprob: -7.405487060546875
    7. ' list' → logprob: -7.780487060546875
    8. '[i' → logprob: -7.905487060546875
    9. '[input' → logprob: -8.280487060546875
    10. '(int' → logprob: -8.530487060546875

Token 18: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006233906373381615
    2. '(range' → logprob: -5.1312336921691895
    3. '(A' → logprob: -9.256234169006348
    4. '(int' → logprob: -9.506234169006348
    5. '()' → logprob: -10.756234169006348
    6. '(

' → logprob: -11.256234169006348
    7. '(a' → logprob: -11.381234169006348
    8. '[int' → logprob: -11.506234169006348
    9. '[' → logprob: -11.881234169006348
    10. ' (' → logprob: -12.006234169006348

Token 19: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.00045474470243789256
    2. '(' → logprob: -7.750454902648926
    3. 'int' → logprob: -11.250454902648926
    4. '(lambda' → logprob: -12.500454902648926
    5. ' (' → logprob: -13.125454902648926
    6. '<int' → logprob: -13.625454902648926
    7. ')' → logprob: -14.125454902648926
    8. ',int' → logprob: -14.125454902648926
    9. '(
' → logprob: -14.250454902648926
    10. '(str' → logprob: -14.875454902648926

Token 20: ',' (ID: 11)
  Prédit: ',input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',input' → logprob: -0.5141876339912415
    2. '(input' → logprob: -1.0141875743865967
    3. ',' → logprob: -3.2641875743865967
    4. '(' → logprob: -7.139187812805176
    5. ' ,' → logprob: -9.264187812805176
    6. 'input' → logprob: -9.389187812805176
    7. '(),' → logprob: -10.764187812805176
    8. ',(' → logprob: -10.889187812805176
    9. ')' → logprob: -11.014187812805176
    10. '),' → logprob: -11.264187812805176

Token 21: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.043208252638578415
    2. ' input' → logprob: -3.168208360671997
    3. ',input' → logprob: -8.918208122253418
    4. '(input' → logprob: -10.168208122253418
    5. ')' → logprob: -10.543208122253418
    6. '))' → logprob: -12.793208122253418
    7. '=input' → logprob: -13.418208122253418
    8. ',' → logprob: -13.668208122253418
    9. 'list' → logprob: -14.043208122253418
    10. '<input' → logprob: -14.168208122253418

Token 22: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.00020663968462031335
    2. '()' → logprob: -8.62520694732666
    3. '()))' → logprob: -10.87520694732666
    4. '()));' → logprob: -13.12520694732666
    5. '()>' → logprob: -13.50020694732666
    6. '())' → logprob: -13.75020694732666
    7. '().__' → logprob: -14.12520694732666
    8. ' ().' → logprob: -14.25020694732666
    9. ')' → logprob: -14.62520694732666
    10. '())))' → logprob: -14.75020694732666

Token 23: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -7.226628895296017e-06
    2. 'strip' → logprob: -12.250007629394531
    3. ' split' → logprob: -13.250007629394531
    4. 'rstrip' → logprob: -14.750007629394531
    5. 'spl' → logprob: -16.00000762939453
    6. '(split' → logprob: -16.50000762939453
    7. 'read' → logprob: -19.25000762939453
    8. 'sp' → logprob: -19.50000762939453
    9. ' ' → logprob: -19.62500762939453
    10. ')' → logprob: -19.62500762939453

Token 24: '()))

' (ID: 125972)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.037735484540462494
    2. '())' → logprob: -3.4127354621887207
    3. '))' → logprob: -6.037735462188721
    4. '()' → logprob: -6.537735462188721
    5. ')' → logprob: -8.662735939025879
    6. '(' → logprob: -10.662735939025879
    7. '()));' → logprob: -11.162735939025879
    8. '()))
' → logprob: -11.287735939025879
    9. '())))' → logprob: -12.037735939025879
    10. '()),' → logprob: -12.037735939025879

Token 25: 'def' (ID: 1314)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -1.1239548921585083
    2. 'c' → logprob: -1.2489548921585083
    3. 'd' → logprob: -2.4989547729492188
    4. 'count' → logprob: -3.2489547729492188
    5. 'S' → logprob: -3.3739547729492188
    6. 'for' → logprob: -3.3739547729492188
    7. 'M' → logprob: -3.4989547729492188
    8. 'i' → logprob: -3.8739547729492188
    9. 'result' → logprob: -3.8739547729492188
    10. 'dp' → logprob: -3.9989547729492188

Token 26: ' get' (ID: 717)
  Prédit: ' solve'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' solve' → logprob: -0.9613355398178101
    2. ' max' → logprob: -1.21133553981781
    3. ' count' → logprob: -2.2113356590270996
    4. ' solution' → logprob: -2.8363356590270996
    5. ' factorial' → logprob: -3.7113356590270996
    6. ' f' → logprob: -3.9613356590270996
    7. ' binary' → logprob: -3.9613356590270996
    8. ' find' → logprob: -4.5863356590271
    9. ' main' → logprob: -4.7113356590271
    10. ' ' → logprob: -5.0863356590271

Token 27: '_d' (ID: 1565)
  Prédit: '_max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_max' → logprob: -0.36217203736305237
    2. '_min' → logprob: -1.86217200756073
    3. '_div' → logprob: -2.8621721267700195
    4. '_sum' → logprob: -4.3621721267700195
    5. '_' → logprob: -4.4871721267700195
    6. '_l' → logprob: -4.4871721267700195
    7. '_k' → logprob: -4.4871721267700195
    8. '_m' → logprob: -4.9871721267700195
    9. '_g' → logprob: -5.1121721267700195
    10. '_count' → logprob: -5.4871721267700195

Token 28: 'iffs' (ID: 33932)
  Prédit: 'iv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'iv' → logprob: -0.3156832456588745
    2. 'istance' → logprob: -2.065683364868164
    3. '_i' → logprob: -3.940683364868164
    4. 'i' → logprob: -3.940683364868164
    5. 'e' → logprob: -4.065683364868164
    6. '_' → logprob: -4.190683364868164
    7. 'ivid' → logprob: -4.190683364868164
    8. 'ifference' → logprob: -4.565683364868164
    9. 'ist' → logprob: -4.690683364868164
    10. 'ef' → logprob: -5.315683364868164

Token 29: '(lst' (ID: 95688)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00448851240798831
    2. '(_' → logprob: -6.879488468170166
    3. '(a' → logprob: -7.379488468170166
    4. '("("' → logprob: -7.754488468170166
    5. '_' → logprob: -7.879488468170166
    6. '(A' → logprob: -8.129488945007324
    7. '(x' → logprob: -8.379488945007324
    8. '((' → logprob: -8.629488945007324
    9. '('_' → logprob: -8.754488945007324
    10. '('' → logprob: -9.004488945007324

Token 30: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.004248281475156546
    2. ')' → logprob: -5.754248142242432
    3. ',' → logprob: -7.254248142242432
    4. '):
' → logprob: -8.50424861907959
    5. ' ):' → logprob: -9.75424861907959
    6. '[' → logprob: -10.62924861907959
    7. '   ' → logprob: -11.37924861907959
    8. '):

' → logprob: -11.37924861907959
    9. '(' → logprob: -11.50424861907959
    10. '(lst' → logprob: -11.50424861907959

Token 31: ' k' (ID: 372)
  Prédit: 'lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'lst' → logprob: -1.7033830881118774
    2. 'n' → logprob: -2.203382968902588
    3. ' lst' → logprob: -2.453382968902588
    4. ')' → logprob: -2.578382968902588
    5. 'k' → logprob: -2.828382968902588
    6. 'K' → logprob: -3.078382968902588
    7. ' n' → logprob: -3.328382968902588
    8. '):' → logprob: -3.453382968902588
    9. 'i' → logprob: -3.703382968902588
    10. 'start' → logprob: -3.703382968902588

Token 32: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.044828083366155624
    2. ',' → logprob: -3.294828176498413
    3. ')' → logprob: -5.044827938079834
    4. ')):' → logprob: -9.419828414916992
    5. ' ):' → logprob: -9.544828414916992
    6. ',k' → logprob: -10.294828414916992
    7. '):
' → logprob: -10.419828414916992
    8. ''):' → logprob: -10.794828414916992
    9. '=' → logprob: -11.794828414916992
    10. '>):' → logprob: -12.044828414916992

Token 33: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.17632116377353668
    2. '   ' → logprob: -2.051321268081665
    3. '):' → logprob: -5.301321029663086
    4. '_' → logprob: -5.426321029663086
    5. ' ' → logprob: -5.551321029663086
    6. '[]' → logprob: -5.676321029663086
    7. '[:]' → logprob: -5.926321029663086
    8. '_list' → logprob: -6.051321029663086
    9. '[' → logprob: -6.551321029663086
    10. '```' → logprob: -6.676321029663086

Token 34: ' result' (ID: 1534)
  Prédit: ' dif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' dif' → logprob: -0.5625177621841431
    2. 'diff' → logprob: -1.687517762184143
    3. '   ' → logprob: -2.3125176429748535
    4. 'd' → logprob: -3.0625176429748535
    5. ' return' → logprob: -3.8125176429748535
    6. ' ' → logprob: -4.3125176429748535
    7. ' diff' → logprob: -4.3125176429748535
    8. 'dif' → logprob: -4.6875176429748535
    9. ' 
' → logprob: -4.8125176429748535
    10. ' res' → logprob: -5.1875176429748535

Token 35: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5764079093933105
    2. '=' → logprob: -0.8264079093933105
    3. '=[]' → logprob: -8.076408386230469
    4. '[]' → logprob: -10.076408386230469
    5. ' ' → logprob: -10.201408386230469
    6. '[:]' → logprob: -11.076408386230469
    7. '[' → logprob: -11.326408386230469
    8. '   ' → logprob: -11.451408386230469
    9. 's' → logprob: -11.701408386230469
    10. ',' → logprob: -11.951408386230469

Token 36: ' []
' (ID: 8911)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.3905341327190399
    2. ' []' → logprob: -1.1405341625213623
    3. '[' → logprob: -5.890533924102783
    4. ' [' → logprob: -7.140533924102783
    5. '[len' → logprob: -10.015534400939941
    6. ' ' → logprob: -11.015534400939941
    7. 'lst' → logprob: -11.765534400939941
    8. '[]
' → logprob: -12.390534400939941
    9. '[]}' → logprob: -12.390534400939941
    10. '[k' → logprob: -12.640534400939941

Token 37: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.25691312551498413
    2. ' for' → logprob: -1.506913185119629
    3. 'for' → logprob: -5.506913185119629
    4. '    
' → logprob: -7.506913185119629
    5. '
' → logprob: -9.756913185119629
    6. '<|end|>' → logprob: -9.756913185119629
    7. ' ' → logprob: -10.131913185119629
    8. '	for' → logprob: -10.256913185119629
    9. ' last' → logprob: -10.631913185119629
    10. '```' → logprob: -10.756913185119629

Token 38: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.1270585060119629
    2. ' for' → logprob: -2.252058506011963
    3. 'prev' → logprob: -5.002058506011963
    4. '   ' → logprob: -5.127058506011963
    5. 'i' → logprob: -7.627058506011963
    6. ' prev' → logprob: -8.127058029174805
    7. 'last' → logprob: -8.752058029174805
    8. 'current' → logprob: -9.002058029174805
    9. ' i' → logprob: -9.752058029174805
    10. 'n' → logprob: -10.002058029174805

Token 39: ' idx' (ID: 14016)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.2813674807548523
    2. 'i' → logprob: -1.406367540359497
    3. ' ' → logprob: -9.406367301940918
    4. '	i' → logprob: -10.406367301940918
    5. '   ' → logprob: -10.656367301940918
    6. '_' → logprob: -11.406367301940918
    7. ' range' → logprob: -11.781367301940918
    8. '    ' → logprob: -11.906367301940918
    9. ' idx' → logprob: -11.906367301940918
    10. '_i' → logprob: -12.031367301940918

Token 40: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.09162499010562897
    2. 'in' → logprob: -2.9666249752044678
    3. ',' → logprob: -3.3416249752044678
    4. ' ' → logprob: -7.716625213623047
    5. ' ,' → logprob: -8.716625213623047
    6. '	in' → logprob: -10.216625213623047
    7. '+' → logprob: -12.091625213623047
    8. '  ' → logprob: -12.341625213623047
    9. ',in' → logprob: -12.341625213623047
    10. '```' → logprob: -12.341625213623047

Token 41: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0032102763652801514
    2. ' range' → logprob: -5.753210067749023
    3. 'lst' → logprob: -10.378210067749023
    4. '	range' → logprob: -14.503210067749023
    5. 'list' → logprob: -15.503210067749023
    6. '(range' → logprob: -15.878210067749023
    7. 'A' → logprob: -16.128210067749023
    8. 'rang' → logprob: -16.128210067749023
    9. ' lst' → logprob: -16.253210067749023
    10. ')' → logprob: -16.628210067749023

Token 42: '(len' (ID: 14990)
  Prédit: '(len'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(len' → logprob: -0.4079979956150055
    2. '(k' → logprob: -1.407997965812683
    3. '(' → logprob: -2.4079980850219727
    4. '(K' → logprob: -7.907998085021973
    5. 'len' → logprob: -11.907998085021973
    6. '1' → logprob: -12.157998085021973
    7. ' len' → logprob: -12.782998085021973
    8. '(n' → logprob: -12.907998085021973
    9. ' (' → logprob: -13.657998085021973
    10. '(idx' → logprob: -13.907998085021973

Token 43: '(lst' (ID: 95688)
  Prédit: '(lst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lst' → logprob: -0.0005386164411902428
    2. '(' → logprob: -7.7505388259887695
    3. 'lst' → logprob: -9.87553882598877
    4. '(k' → logprob: -10.62553882598877
    5. '(result' → logprob: -11.62553882598877
    6. '(l' → logprob: -11.87553882598877
    7. ')' → logprob: -12.87553882598877
    8. '(A' → logprob: -12.87553882598877
    9. '(ls' → logprob: -13.25053882598877
    10. ' lst' → logprob: -13.37553882598877

Token 44: ')-' (ID: 14080)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.07211539149284363
    2. ')-' → logprob: -2.697115421295166
    3. ')):' → logprob: -6.697115421295166
    4. ')):
' → logprob: -8.072114944458008
    5. '-' → logprob: -8.072114944458008
    6. ' )' → logprob: -8.947114944458008
    7. ' -' → logprob: -9.822114944458008
    8. '-k' → logprob: -9.947114944458008
    9. '):' → logprob: -10.947114944458008
    10. ' ' → logprob: -11.197114944458008

Token 45: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.259569376707077
    2. 'k' → logprob: -1.5095694065093994
    3. ' k' → logprob: -5.00956916809082
    4. ' ' → logprob: -7.00956916809082
    5. '(k' → logprob: -11.00956916809082
    6. '(' → logprob: -11.63456916809082
    7. ' (' → logprob: -12.88456916809082
    8. 'K' → logprob: -13.38456916809082
    9. '	k' → logprob: -13.38456916809082
    10. '2' → logprob: -14.25956916809082

Token 46: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.002911861753091216
    2. '):
' → logprob: -6.0029120445251465
    3. ')' → logprob: -8.877911567687988
    4. ':' → logprob: -9.377911567687988
    5. '-' → logprob: -9.877911567687988
    6. '   ' → logprob: -10.002911567687988
    7. ' ):' → logprob: -10.127911567687988
    8. '):
' → logprob: -10.502911567687988
    9. ' -' → logprob: -10.752911567687988
    10. ',' → logprob: -11.502911567687988

Token 47: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.017084915190935135
    2. ' ' → logprob: -5.142085075378418
    3. '    ' → logprob: -5.142085075378418
    4. '   ' → logprob: -6.142085075378418
    5. '<|end|>' → logprob: -7.017085075378418
    6. ',' → logprob: -8.142085075378418
    7. '        ' → logprob: -8.267085075378418
    8. '        
' → logprob: -8.267085075378418
    9. '1' → logprob: -8.892085075378418
    10. '[' → logprob: -8.892085075378418

Token 48: ' result' (ID: 1534)
  Prédit: ' result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' result' → logprob: -0.20351137220859528
    2. '       ' → logprob: -2.0785114765167236
    3. 'result' (adapté à ' result') → logprob: -2.9535114765167236
    4. '   ' → logprob: -5.4535112380981445
    5. ' if' → logprob: -6.4535112380981445
    6. '    ' → logprob: -7.4535112380981445
    7. 'if' → logprob: -9.203511238098145
    8. '```' → logprob: -9.828511238098145
    9. '        ' → logprob: -10.578511238098145
    10. ' ' → logprob: -10.703511238098145

Token 49: ' +=' (ID: 2757)
  Prédit: '.append'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.04886621609330177
    2. '.' → logprob: -3.0488662719726562
    3. ' .' → logprob: -8.548866271972656
    4. '.extend' → logprob: -9.548866271972656
    5. '   ' → logprob: -12.423866271972656
    6. '.app' → logprob: -13.423866271972656
    7. '.ap' → logprob: -13.548866271972656
    8. '    ' → logprob: -13.673866271972656
    9. '       ' → logprob: -14.048866271972656
    10. ').' → logprob: -14.048866271972656

Token 50: ' [' (ID: 723)
  Prédit: ' ['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.4358315169811249
    2. '[' → logprob: -1.0608315467834473
    3. '[l' → logprob: -5.810831546783447
    4. '[k' → logprob: -7.185831546783447
    5. '[int' → logprob: -7.310831546783447
    6. '[(' → logprob: -7.935831546783447
    7. '   ' → logprob: -8.185831069946289
    8. '[str' → logprob: -8.560831069946289
    9. '[j' → logprob: -8.685831069946289
    10. ' [(' → logprob: -8.685831069946289

Token 51: 'lst' (ID: 65430)
  Prédit: 'lst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lst' → logprob: -0.36466583609580994
    2. ' lst' → logprob: -1.3646658658981323
    3. 'abs' → logprob: -3.2396657466888428
    4. ' abs' → logprob: -5.114665985107422
    5. '(lst' → logprob: -5.614665985107422
    6. '   ' → logprob: -7.614665985107422
    7. ' (' → logprob: -8.114665985107422
    8. ' ' → logprob: -9.114665985107422
    9. '(abs' → logprob: -9.239665985107422
    10. 'max' → logprob: -9.739665985107422

Token 52: '[idx' (ID: 25582)
  Prédit: '[idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[idx' → logprob: -0.00019018957391381264
    2. 'idx' → logprob: -8.875189781188965
    3. ' idx' → logprob: -10.750189781188965
    4. ' [' → logprob: -11.750189781188965
    5. '[' → logprob: -11.875189781188965
    6. '(idx' → logprob: -12.375189781188965
    7. '	idx' → logprob: -13.000189781188965
    8. '   ' → logprob: -13.000189781188965
    9. ']' → logprob: -13.375189781188965
    10. '[i' → logprob: -13.750189781188965

Token 53: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.005303600803017616
    2. ' +' → logprob: -5.880303382873535
    3. ']' → logprob: -6.255303382873535
    4. '+k' → logprob: -7.755303382873535
    5. '+]' → logprob: -9.630303382873535
    6. '   ' → logprob: -10.005303382873535
    7. ']+' → logprob: -11.880303382873535
    8. ' ' → logprob: -12.130303382873535
    9. ' ]' → logprob: -12.130303382873535
    10. ']-' → logprob: -12.755303382873535

Token 54: '1' (ID: 16)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0792917013168335
    2. '1' → logprob: -2.579291820526123
    3. '`]' → logprob: -9.329291343688965
    4. ' ]' → logprob: -9.704291343688965
    5. ']-' → logprob: -9.829291343688965
    6. '0' → logprob: -9.829291343688965
    7. ' ' → logprob: -10.079291343688965
    8. '   ' → logprob: -10.454291343688965
    9. '2' → logprob: -11.204291343688965
    10. '']' → logprob: -11.204291343688965

Token 55: ']' (ID: 60)
  Prédit: ' -'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.6401239037513733
    2. '-' → logprob: -0.7651239037513733
    3. ']' → logprob: -5.1401238441467285
    4. ' ' → logprob: -7.1401238441467285
    5. ')' → logprob: -8.015124320983887
    6. ']-' → logprob: -8.390124320983887
    7. '   ' → logprob: -9.390124320983887
    8. ' ]' → logprob: -9.390124320983887
    9. '	' → logprob: -10.765124320983887
    10. '    ' → logprob: -11.140124320983887

Token 56: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.5761709213256836
    2. '-' → logprob: -0.8261709213256836
    3. ' ' → logprob: -8.701170921325684
    4. '-l' → logprob: -10.451170921325684
    5. ' ' → logprob: -11.076170921325684
    6. '   ' → logprob: -12.701170921325684
    7. ')' → logprob: -12.701170921325684
    8. '    ' → logprob: -12.826170921325684
    9. '  ' → logprob: -12.951170921325684
    10. ']' → logprob: -13.826170921325684

Token 57: ' lst' (ID: 33384)
  Prédit: ' lst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lst' → logprob: -0.5759668946266174
    2. 'lst' → logprob: -0.8259668946266174
    3. '(lst' → logprob: -11.700966835021973
    4. '_lst' → logprob: -11.950966835021973
    5. ' ' → logprob: -12.075966835021973
    6. 'list' → logprob: -13.200966835021973
    7. '.lst' → logprob: -13.575966835021973
    8. '    ' → logprob: -14.638466835021973
    9. '   ' → logprob: -14.763466835021973
    10. 'l' → logprob: -14.825966835021973

Token 58: '[idx' (ID: 25582)
  Prédit: '[idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[idx' → logprob: -8.697387966094539e-05
    2. '][' → logprob: -10.250086784362793
    3. ']' → logprob: -11.500086784362793
    4. '(idx' → logprob: -11.625086784362793
    5. '[' → logprob: -11.750086784362793
    6. ')' → logprob: -12.125086784362793
    7. ')[' → logprob: -12.375086784362793
    8. '_lst' → logprob: -12.875086784362793
    9. '```' → logprob: -12.875086784362793
    10. ')]' → logprob: -13.000086784362793

Token 59: ']]
' (ID: 29446)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.16188578307628632
    2. ']' → logprob: -1.9118857383728027
    3. ')' → logprob: -6.536885738372803
    4. ' ]' → logprob: -9.286886215209961
    5. '])' → logprob: -9.786886215209961
    6. '])]' → logprob: -10.536886215209961
    7. ']]' → logprob: -12.036886215209961
    8. '')]' → logprob: -12.286886215209961
    9. '   ' → logprob: -12.286886215209961
    10. ' )' → logprob: -12.661886215209961

Token 60: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.056842587888240814
    2. '    
' → logprob: -3.181842565536499
    3. ' return' → logprob: -5.306842803955078
    4. ' 
' → logprob: -5.556842803955078
    5. '
' → logprob: -6.431842803955078
    6. 'return' → logprob: -7.306842803955078
    7. '  
' → logprob: -7.431842803955078
    8. '   
' → logprob: -7.431842803955078
    9. '	return' → logprob: -7.681842803955078
    10. ' ' → logprob: -8.556842803955078

Token 61: ' result' (ID: 1534)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009929620660841465
    2. ' return' → logprob: -5.009929656982422
    3. 'return' → logprob: -5.884929656982422
    4. '	return' → logprob: -8.509929656982422
    5. '    
' → logprob: -8.884929656982422
    6. ' ' → logprob: -9.884929656982422
    7. '```' → logprob: -12.134929656982422
    8. '       ' → logprob: -12.509929656982422
    9. ' 
' → logprob: -12.759929656982422
    10. '' → logprob: -12.884929656982422

Token 62: '.append' (ID: 3709)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 63: '(k' (ID: 12125)
  Prédit: '(lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(lst' → logprob: -0.10468315333127975
    2. '(' → logprob: -2.3546831607818604
    3. '((' → logprob: -6.354682922363281
    4. '(result' → logprob: -6.604682922363281
    5. '(len' → logprob: -7.229682922363281
    6. '(A' → logprob: -7.979682922363281
    7. '(ls' → logprob: -9.229682922363281
    8. 'lst' → logprob: -9.354682922363281
    9. '(abs' → logprob: -10.354682922363281
    10. '(l' → logprob: -10.854682922363281

Token 64: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.5836596488952637
    2. ' -' → logprob: -0.8336596488952637
    3. ')' → logprob: -5.083659648895264
    4. '-l' → logprob: -6.583659648895264
    5. '))' → logprob: -10.208660125732422
    6. '-)' → logprob: -10.583660125732422
    7. '-list' → logprob: -10.833660125732422
    8. '-k' → logprob: -12.083660125732422
    9. '-def' → logprob: -12.958660125732422
    10. ' )' → logprob: -13.208660125732422

Token 65: ' lst' (ID: 33384)
  Prédit: 'lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lst' → logprob: -0.0013329789508134127
    2. ' lst' → logprob: -6.626332759857178
    3. 'list' → logprob: -12.626333236694336
    4. 'result' → logprob: -13.376333236694336
    5. '_lst' → logprob: -14.126333236694336
    6. '(lst' → logprob: -14.751333236694336
    7. '   ' → logprob: -15.376333236694336
    8. 'A' → logprob: -15.501333236694336
    9. '1' → logprob: -15.626333236694336
    10. '.lst' → logprob: -15.876333236694336

Token 66: '[-' (ID: 17503)
  Prédit: '[-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[-' → logprob: -0.0001234428636962548
    2. '[' → logprob: -9.000123023986816
    3. '[idx' → logprob: -17.500123977661133
    4. '[len' → logprob: -17.500123977661133
    5. '0' → logprob: -19.500123977661133
    6. '1' → logprob: -20.250123977661133
    7. '```' → logprob: -20.875123977661133
    8. ' [-' → logprob: -21.250123977661133
    9. '   ' → logprob: -21.500123977661133
    10. '[
' → logprob: -21.500123977661133

Token 67: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.1517960956552997e-05
    2. ')' → logprob: -12.625011444091797
    3. '])' → logprob: -13.000011444091797
    4. ' ' → logprob: -13.375011444091797
    5. ']' → logprob: -14.125011444091797
    6. '0' → logprob: -14.250011444091797
    7. '```' → logprob: -14.312511444091797
    8. 'idx' → logprob: -15.125011444091797
    9. '[' → logprob: -15.437511444091797
    10. '<|end|>' → logprob: -16.187511444091797

Token 68: ']' (ID: 60)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -9.507972572464496e-05
    2. '))' → logprob: -10.12509536743164
    3. ')
' → logprob: -10.25009536743164
    4. ' )' → logprob: -11.12509536743164
    5. ')`' → logprob: -13.50009536743164
    6. ')}' → logprob: -14.62509536743164
    7. '+' → logprob: -14.62509536743164
    8. ')return' → logprob: -15.00009536743164
    9. '`)' → logprob: -15.25009536743164
    10. '')' → logprob: -15.25009536743164

Token 69: ' +' (ID: 659)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00019865304057020694
    2. ')
' → logprob: -8.625198364257812
    3. ')return' → logprob: -11.750198364257812
    4. ' )' → logprob: -12.250198364257812
    5. '))' → logprob: -13.000198364257812
    6. ')
' → logprob: -13.875198364257812
    7. '   ' → logprob: -14.250198364257812
    8. ')`' → logprob: -14.250198364257812
    9. '+' → logprob: -14.500198364257812
    10. 'return' → logprob: -15.000198364257812

Token 70: ' lst' (ID: 33384)
  Prédit: ' lst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lst' → logprob: -0.6932575702667236
    2. 'lst' → logprob: -0.6932575702667236
    3. '1' → logprob: -9.818257331848145
    4. '(lst' → logprob: -10.568257331848145
    5. ' ' → logprob: -11.068257331848145
    6. '_lst' → logprob: -12.943257331848145
    7. 'ls' → logprob: -12.943257331848145
    8. ' ls' → logprob: -12.943257331848145
    9. '0' → logprob: -13.068257331848145
    10. '  ' → logprob: -13.943257331848145

Token 71: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -2.339278580620885e-06
    2. '0' → logprob: -13.000001907348633
    3. ' [' → logprob: -18.125001907348633
    4. 's' → logprob: -18.250001907348633
    5. '1' → logprob: -18.875001907348633
    6. '[
' → logprob: -19.500001907348633
    7. 'First' → logprob: -20.500001907348633
    8. '(' → logprob: -20.500001907348633
    9. '[-' → logprob: -20.625001907348633
    10. '][' → logprob: -21.000001907348633

Token 72: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.3544423381972592e-05
    2. '[' → logprob: -12.00001335144043
    3. ' ' → logprob: -12.12501335144043
    4. '-' → logprob: -14.87501335144043
    5. '   ' → logprob: -15.00001335144043
    6. '1' → logprob: -15.37501335144043
    7. '۰' → logprob: -15.50001335144043
    8. ')' → logprob: -15.75001335144043
    9. ']' → logprob: -15.87501335144043
    10. '０' → logprob: -16.68751335144043

Token 73: '])
' (ID: 5169)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -4.246537173457909e-06
    2. ' )' → logprob: -13.250003814697266
    3. '))' → logprob: -13.875003814697266
    4. ')
' → logprob: -14.750003814697266
    5. ')`' → logprob: -14.750003814697266
    6. ')return' → logprob: -16.000003814697266
    7. ')])' → logprob: -16.000003814697266
    8. ')}' → logprob: -16.125003814697266
    9. ')]' → logprob: -16.625003814697266
    10. '')' → logprob: -16.750003814697266

Token 74: '   ' (ID: 271)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.3126046359539032
    2. ' return' → logprob: -1.5626046657562256
    3. '   ' → logprob: -2.9376046657562256
    4. '	return' → logprob: -5.4376044273376465
    5. '```' → logprob: -7.9376044273376465
    6. ':return' → logprob: -8.062604904174805
    7. ' ' → logprob: -8.187604904174805
    8. '
' → logprob: -8.437604904174805
    9. '    
' → logprob: -8.812604904174805
    10. ' 
' → logprob: -9.687604904174805

Token 75: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.1305822730064392
    2. ' return' → logprob: -2.130582332611084
    3. '   ' → logprob: -5.755582332611084
    4. '	return' → logprob: -8.255581855773926
    5. '
' → logprob: -9.755581855773926
    6. ' ' → logprob: -9.880581855773926
    7. ' 
' → logprob: -10.505581855773926
    8. ':return' → logprob: -10.505581855773926
    9. '```' → logprob: -10.505581855773926
    10. '    
' → logprob: -10.880581855773926

Token 76: ' result' (ID: 1534)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.0181526318192482
    2. ' result' → logprob: -4.018152713775635
    3. '[result' → logprob: -13.393152236938477
    4. '(result' → logprob: -14.768152236938477
    5. ' ' → logprob: -15.268152236938477
    6. 'tuple' → logprob: -15.393152236938477
    7. 're' → logprob: -15.893152236938477
    8. 'list' → logprob: -16.768152236938477
    9. '   ' → logprob: -16.768152236938477
    10. '  ' → logprob: -16.893152236938477

Token 77: '

' (ID: 279)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.5804145336151123
    2. '<|end|>' → logprob: -1.4554145336151123
    3. '
' → logprob: -3.0804145336151123
    4. ')' → logprob: -3.0804145336151123
    5. 'N' → logprob: -3.5804145336151123
    6. '#' → logprob: -3.9554145336151123
    7. 'def' → logprob: -4.080414772033691
    8. '```' → logprob: -4.205414772033691
    9. 'A' → logprob: -5.080414772033691
    10. 'for' → logprob: -5.830414772033691

Token 78: 'from' (ID: 2845)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.824207603931427
    2. 'd' → logprob: -1.6992075443267822
    3. 'diff' → logprob: -2.1992075443267822
    4. 'print' → logprob: -3.1992075443267822
    5. 'D' → logprob: -3.4492075443267822
    6. 'sorted' → logprob: -3.6992075443267822
    7. 'dif' → logprob: -4.074207782745361
    8. 'def' → logprob: -4.199207782745361
    9. 'res' → logprob: -4.199207782745361
    10. 'result' → logprob: -4.324207782745361

Token 79: ' functools' (ID: 142636)
  Prédit: ' itertools'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' itertools' → logprob: -0.0927814468741417
    2. 'collections' → logprob: -2.5927815437316895
    3. ' collections' → logprob: -4.4677815437316895
    4. 'it' → logprob: -7.0927815437316895
    5. ' math' → logprob: -7.2177815437316895
    6. 'math' → logprob: -8.092781066894531
    7. '_' → logprob: -9.217781066894531
    8. 'cmath' → logprob: -9.842781066894531
    9. '_it' → logprob: -9.967781066894531
    10. 'heap' → logprob: -9.967781066894531

Token 80: ' import' (ID: 1588)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.3137085735797882
    2. ' import' → logprob: -1.3137085437774658
    3. '_import' → logprob: -8.188708305358887
    4. '	import' → logprob: -9.188708305358887
    5. '<|end|>' → logprob: -10.813708305358887
    6. ' ' → logprob: -11.563708305358887
    7. '_' → logprob: -11.938708305358887
    8. '32' → logprob: -12.438708305358887
    9. '.' → logprob: -12.438708305358887
    10. 'from' → logprob: -12.688708305358887

Token 81: ' reduce' (ID: 10389)
  Prédit: 'reduce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'reduce' → logprob: -0.0009656535112299025
    2. 'l' → logprob: -7.500965595245361
    3. ' reduce' → logprob: -8.37596607208252
    4. 'cmp' → logprob: -9.00096607208252
    5. 'cache' → logprob: -10.00096607208252
    6. 'wrap' → logprob: -12.50096607208252
    7. '.reduce' → logprob: -13.00096607208252
    8. 'redu' → logprob: -13.00096607208252
    9. 'partial' → logprob: -13.37596607208252
    10. ' l' → logprob: -13.50096607208252

Token 82: '

' (ID: 279)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.6871275901794434
    2. 'import' → logprob: -1.8121275901794434
    3. 'def' → logprob: -2.3121275901794434
    4. '
' → logprob: -2.3121275901794434
    5. ',
' → logprob: -3.4371275901794434
    6. ' 
' → logprob: -3.8121275901794434
    7. ')' → logprob: -4.312127590179443
    8. '_' → logprob: -4.562127590179443
    9. 'from' → logprob: -4.562127590179443
    10. 'result' → logprob: -4.937127590179443

Token 83: 'd' (ID: 67)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.0546667575836182
    2. 'diff' → logprob: -1.1796667575836182
    3. 'print' → logprob: -2.179666757583618
    4. 'd' → logprob: -3.304666757583618
    5. 'dif' → logprob: -3.429666757583618
    6. 'dp' → logprob: -3.429666757583618
    7. 'result' → logprob: -3.804666757583618
    8. 'answer' → logprob: -4.429666519165039
    9. 'res' → logprob: -4.429666519165039
    10. 'g' → logprob: -4.429666519165039

Token 84: ' =' (ID: 314)
  Prédit: 'iffs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iffs' → logprob: -0.026847291737794876
    2. 'iff' → logprob: -3.6518473625183105
    3. 'if' → logprob: -8.151846885681152
    4. ' =' → logprob: -9.026846885681152
    5. '=' → logprob: -10.651846885681152
    6. ' ' → logprob: -10.776846885681152
    7. 'ists' → logprob: -10.901846885681152
    8. 'i' → logprob: -11.276846885681152
    9. 'efs' → logprob: -11.776846885681152
    10. 'ifs' → logprob: -11.901846885681152

Token 85: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.5689525604248047
    2. ' get' → logprob: -1.5689525604248047
    3. 'reduce' → logprob: -1.6939525604248047
    4. ' reduce' → logprob: -3.1939525604248047
    5. '[get' → logprob: -8.193952560424805
    6. 'list' → logprob: -8.193952560424805
    7. ' list' → logprob: -8.943952560424805
    8. '(get' → logprob: -9.693952560424805
    9. '   ' → logprob: -11.193952560424805
    10. ' functools' → logprob: -11.943952560424805

Token 86: '_d' (ID: 1565)
  Prédit: '_d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_d' → logprob: -0.00010628487507347018
    2. '_diff' → logprob: -9.750105857849121
    3. 'diff' → logprob: -10.375105857849121
    4. 'iffs' → logprob: -11.625105857849121
    5. '_' → logprob: -12.500105857849121
    6. '_f' → logprob: -13.375105857849121
    7. ' _' → logprob: -14.250105857849121
    8. 'd' → logprob: -14.750105857849121
    9. ' dif' → logprob: -14.875105857849121
    10. '```' → logprob: -15.375105857849121

Token 87: 'iffs' (ID: 33932)
  Prédit: 'iffs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iffs' → logprob: -3.130576806142926e-05
    2. 'ffs' → logprob: -11.000031471252441
    3. 'iff' → logprob: -12.375031471252441
    4. 'if' → logprob: -12.500031471252441
    5. 'ifs' → logprob: -13.875031471252441
    6. 'eff' → logprob: -14.375031471252441
    7. 'diff' → logprob: -14.625031471252441
    8. '   ' → logprob: -15.000031471252441
    9. 'uffs' → logprob: -15.000031471252441
    10. 'i' → logprob: -15.125031471252441

Token 88: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -4.127333340875339e-06
    2. '(K' → logprob: -12.750003814697266
    3. '(' → logprob: -14.375003814697266
    4. ' (' → logprob: -15.125003814697266
    5. '(N' → logprob: -15.500003814697266
    6. '((' → logprob: -17.125003814697266
    7. 'A' → logprob: -17.625003814697266
    8. '(
' → logprob: -17.750003814697266
    9. ')(' → logprob: -18.000003814697266
    10. '(a' → logprob: -18.625003814697266

Token 89: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0008165352046489716
    2. ',K' → logprob: -7.125816345214844
    3. ' ,' → logprob: -11.500816345214844
    4. ',k' → logprob: -13.750816345214844
    5. ')' → logprob: -14.625816345214844
    6. 'K' → logprob: -15.625816345214844
    7. ',
' → logprob: -16.500816345214844
    8. '，' → logprob: -17.000816345214844
    9. ',N' → logprob: -17.000816345214844
    10. ' ' → logprob: -17.125816345214844

Token 90: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.0007585270795971155
    2. ' K' → logprob: -7.250758647918701
    3. 'N' → logprob: -11.250758171081543
    4. 'k' → logprob: -11.625758171081543
    5. '   ' → logprob: -11.625758171081543
    6. ' ' → logprob: -12.250758171081543
    7. ')' → logprob: -12.375758171081543
    8. '	K' → logprob: -12.750758171081543
    9. '>K' → logprob: -13.875758171081543
    10. '    ' → logprob: -13.875758171081543

Token 91: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.2200749754119897e-06
    2. ')
' → logprob: -13.875001907348633
    3. '))' → logprob: -14.125001907348633
    4. ' )' → logprob: -14.875001907348633
    5. ')d' → logprob: -17.500001907348633
    6. ')`' → logprob: -18.000001907348633
    7. '')' → logprob: -18.750001907348633
    8. ')#' → logprob: -18.750001907348633
    9. '),' → logprob: -18.875001907348633
    10. ')

' → logprob: -19.000001907348633

Token 92: 'sorted' (ID: 64288)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.660526692867279
    2. 'answer' → logprob: -2.160526752471924
    3. 'ans' → logprob: -2.535526752471924
    4. 'g' → logprob: -2.660526752471924
    5. 'total' → logprob: -3.035526752471924
    6. 'res' → logprob: -3.535526752471924
    7. 'd' → logprob: -3.910526752471924
    8. 'm' → logprob: -4.160526752471924
    9. 'max' → logprob: -4.410526752471924
    10. 'def' → logprob: -4.410526752471924

Token 93: '_d' (ID: 1565)
  Prédit: '(d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(d' → logprob: -0.202459454536438
    2. '(' → logprob: -1.702459454536438
    3. 'd' → logprob: -7.327459335327148
    4. '_d' → logprob: -7.952459335327148
    5. 's' → logprob: -11.577459335327148
    6. '(
' → logprob: -11.827459335327148
    7. '(s' → logprob: -11.827459335327148
    8. '(D' → logprob: -13.202459335327148
    9. '((' → logprob: -13.327459335327148
    10. '(

' → logprob: -13.702459335327148

Token 94: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.32075178623199463
    2. ' =' → logprob: -1.4457517862319946
    3. '(' → logprob: -3.695751667022705
    4. 'd' → logprob: -4.570751667022705
    5. '_d' → logprob: -6.820751667022705
    6. '(d' → logprob: -7.070751667022705
    7. '=d' → logprob: -7.445751667022705
    8. 'sorted' → logprob: -8.195752143859863
    9. 's' → logprob: -8.195752143859863
    10. '_' → logprob: -8.320752143859863

Token 95: ' sorted' (ID: 20099)
  Prédit: 'sorted'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sorted' → logprob: -0.020576920360326767
    2. ' sorted' → logprob: -3.8955769538879395
    3. '(sorted' → logprob: -11.145576477050781
    4. 'list' → logprob: -11.520576477050781
    5. 'sort' → logprob: -12.020576477050781
    6. 'reduce' → logprob: -13.145576477050781
    7. 'd' → logprob: -13.645576477050781
    8. ' list' → logprob: -15.020576477050781
    9. ' ' → logprob: -15.020576477050781
    10. '   ' → logprob: -15.645576477050781

Token 96: '(d' (ID: 2572)
  Prédit: '(d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(d' → logprob: -0.00043162284418940544
    2. '(' → logprob: -7.750431537628174
    3. '((' → logprob: -15.125432014465332
    4. 'd' → logprob: -15.250432014465332
    5. ' (' → logprob: -16.250431060791016
    6. '(
' → logprob: -16.375431060791016
    7. '([' → logprob: -17.250431060791016
    8. '(de' → logprob: -17.250431060791016
    9. '(D' → logprob: -17.625431060791016
    10. ')d' → logprob: -17.625431060791016

Token 97: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.011109596118330956
    2. ',' → logprob: -4.511109828948975
    3. 'reverse' → logprob: -11.386109352111816
    4. '(reverse' → logprob: -11.511109352111816
    5. '))' → logprob: -11.636109352111816
    6. ' )' → logprob: -11.636109352111816
    7. ' ,' → logprob: -12.261109352111816
    8. '[' → logprob: -12.636109352111816
    9. ')
' → logprob: -12.761109352111816
    10. '[::-' → logprob: -13.261109352111816

Token 98: 'res' (ID: 430)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.0246778726577759
    2. 'max' → logprob: -2.0246777534484863
    3. 'min' → logprob: -2.3996777534484863
    4. 'res' → logprob: -2.7746777534484863
    5. 'result' → logprob: -2.8996777534484863
    6. 'answer' → logprob: -3.1496777534484863
    7. 'diff' → logprob: -3.2746777534484863
    8. 'prefix' → logprob: -3.7746777534484863
    9. 'g' → logprob: -3.8996777534484863
    10. 'from' → logprob: -4.149677753448486

Token 99: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.46083229780197144
    2. 'ult' → logprob: -1.0858323574066162
    3. 'ults' → logprob: -3.835832357406616
    4. '=' → logprob: -4.710832118988037
    5. 'ultat' → logprob: -8.335832595825195
    6. 's' → logprob: -8.460832595825195
    7. 'ulta' → logprob: -9.335832595825195
    8. 'ul' → logprob: -9.585832595825195
    9. 'ulti' → logprob: -9.835832595825195
    10. 'ault' → logprob: -9.960832595825195

Token 100: ' ' (ID: 220)
  Prédit: 'reduce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'reduce' → logprob: -0.4208377003669739
    2. 'sorted' → logprob: -1.420837640762329
    3. ' sorted' → logprob: -2.795837640762329
    4. ' reduce' → logprob: -3.420837640762329
    5. 'sum' → logprob: -6.045837879180908
    6. '0' → logprob: -6.045837879180908
    7. 'max' → logprob: -7.420837879180908
    8. ' K' → logprob: -7.795837879180908
    9. '(sorted' → logprob: -7.795837879180908
    10. 'float' → logprob: -7.920837879180908

Token 101: '0' (ID: 15)
  Prédit: 'reduce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'reduce' → logprob: -0.31486275792121887
    2. 'sum' → logprob: -1.5648627281188965
    3. 'sorted' → logprob: -2.9398627281188965
    4. 'max' → logprob: -5.9398627281188965
    5. 'K' → logprob: -6.3148627281188965
    6. ' reduce' → logprob: -6.5648627281188965
    7. ' sum' → logprob: -7.1898627281188965
    8. 'min' → logprob: -7.6898627281188965
    9. ' sorted' → logprob: -8.064863204956055
    10. '0' → logprob: -8.439863204956055

Token 102: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.02828308567404747
    2. ' for' → logprob: -4.27828311920166
    3. '
' → logprob: -5.27828311920166
    4. '+' → logprob: -5.40328311920166
    5. 'prev' → logprob: -6.02828311920166
    6. 'i' → logprob: -7.77828311920166
    7. '-' → logprob: -8.02828311920166
    8. '+
' → logprob: -8.77828311920166
    9. '<|end|>' → logprob: -8.90328311920166
    10. 'd' → logprob: -9.02828311920166

Token 103: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.03375795856118202
    2. 'i' → logprob: -4.283758163452148
    3. 'current' → logprob: -4.658758163452148
    4. 'prev' → logprob: -5.158758163452148
    5. 'count' → logprob: -7.158758163452148
    6. 'start' → logprob: -7.408758163452148
    7. 'curr' → logprob: -7.658758163452148
    8. 'if' → logprob: -8.033758163452148
    9. 'cur' → logprob: -8.158758163452148
    10. 'group' → logprob: -8.283758163452148

Token 104: ' elem' (ID: 23108)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.1657635122537613
    2. 'i' → logprob: -2.0407636165618896
    3. '_' → logprob: -5.6657633781433105
    4. ' _' → logprob: -5.7907633781433105
    5. ' length' → logprob: -5.7907633781433105
    6. '_i' → logprob: -6.0407633781433105
    7. ' idx' → logprob: -6.2907633781433105
    8. 'diff' → logprob: -6.4157633781433105
    9. ' diff' → logprob: -6.5407633781433105
    10. 'length' → logprob: -6.9157633781433105

Token 105: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.02640015445649624
    2. 'in' → logprob: -3.651400089263916
    3. ' ' → logprob: -10.401400566101074
    4. 's' → logprob: -10.651400566101074
    5. ',' → logprob: -11.151400566101074
    6. 'd' → logprob: -11.401400566101074
    7. '_in' → logprob: -12.901400566101074
    8. 'i' → logprob: -13.213900566101074
    9. '	in' → logprob: -13.463900566101074
    10. '   ' → logprob: -13.588900566101074

Token 106: ' range' (ID: 3352)
  Prédit: ' sorted'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sorted' → logprob: -0.2822309136390686
    2. 'sorted' → logprob: -1.4072308540344238
    3. ' range' → logprob: -7.032230854034424
    4. 'range' → logprob: -9.407231330871582
    5. ' d' → logprob: -10.032231330871582
    6. 'd' → logprob: -10.532231330871582
    7. '(sorted' → logprob: -10.782231330871582
    8. ' reversed' → logprob: -11.407231330871582
    9. ' ' → logprob: -12.407231330871582
    10. ' list' → logprob: -13.532231330871582

Token 107: '(N' (ID: 10564)
  Prédit: '(len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(len' → logprob: -0.17715083062648773
    2. '(' → logprob: -2.0521507263183594
    3. '(N' → logprob: -3.4271507263183594
    4. '(K' → logprob: -6.927150726318359
    5. '(n' → logprob: -8.80215072631836
    6. '(s' → logprob: -9.17715072631836
    7. '(k' → logprob: -10.30215072631836
    8. '(L' → logprob: -10.67715072631836
    9. '((' → logprob: -10.80215072631836
    10. '(l' → logprob: -10.92715072631836

Token 108: '-' (ID: 12)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.5907690525054932
    2. '-' → logprob: -0.9657690525054932
    3. ' -' → logprob: -3.465769052505493
    4. '):
' → logprob: -3.465769052505493
    5. ' ):' → logprob: -6.215768814086914
    6. ')' → logprob: -7.840768814086914
    7. '+' → logprob: -8.215768814086914
    8. ' ):
' → logprob: -9.965768814086914
    9. '   ' → logprob: -10.090768814086914
    10. '-s' → logprob: -10.590768814086914

Token 109: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0008684676722623408
    2. '2' → logprob: -7.750868320465088
    3. ' ' → logprob: -7.750868320465088
    4. '-' → logprob: -13.125868797302246
    5. 'K' → logprob: -13.375868797302246
    6. ')' → logprob: -14.250868797302246
    7. '3' → logprob: -14.375868797302246
    8. 'k' → logprob: -14.625868797302246
    9. '   ' → logprob: -14.625868797302246
    10. '```' → logprob: -15.313368797302246

Token 110: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.07234738767147064
    2. '):
' → logprob: -2.822347402572632
    3. ':' → logprob: -5.697347164154053
    4. ')' → logprob: -5.822347164154053
    5. ' ):' → logprob: -6.072347164154053
    6. ',' → logprob: -7.072347164154053
    7. '+' → logprob: -8.072347640991211
    8. '):
' → logprob: -8.322347640991211
    9. ' ):
' → logprob: -9.447347640991211
    10. ' :' → logprob: -10.072347640991211

Token 111: '   ' (ID: 271)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.3308566212654114
    2. ' res' → logprob: -1.3308565616607666
    3. '   ' → logprob: -4.080856800079346
    4. '	res' → logprob: -8.580856323242188
    5. '
' → logprob: -8.955856323242188
    6. '```' → logprob: -9.330856323242188
    7. '<|end|>' → logprob: -9.830856323242188
    8. '+' → logprob: -10.955856323242188
    9. '    
' → logprob: -11.205856323242188
    10. ' if' → logprob: -11.455856323242188

Token 112: ' res' (ID: 694)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' (adapté à ' res') → logprob: -0.010987215675413609
    2. ' res' → logprob: -5.135987281799316
    3. '   ' → logprob: -5.385987281799316
    4. 'if' → logprob: -7.885987281799316
    5. ' if' → logprob: -10.260987281799316
    6. '
' → logprob: -10.885987281799316
    7. '```' → logprob: -11.385987281799316
    8. '	res' → logprob: -11.760987281799316
    9. ' ' → logprob: -12.260987281799316
    10. '    
' → logprob: -13.510987281799316

Token 113: ' =' (ID: 314)
  Prédit: ' +='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.14359121024608612
    2. '+=' → logprob: -2.0185911655426025
    3. '+' → logprob: -8.143590927124023
    4. ' -=' → logprob: -8.143590927124023
    5. ' =' → logprob: -8.768590927124023
    6. '=' → logprob: -9.018590927124023
    7. '-=' → logprob: -11.268590927124023
    8. ' +' → logprob: -11.268590927124023
    9. ' ' → logprob: -11.518590927124023
    10. ']+=' → logprob: -12.268590927124023

Token 114: ' res' (ID: 694)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.9506540298461914
    2. ' max' → logprob: -1.2006540298461914
    3. 'res' → logprob: -2.2006540298461914
    4. ' sorted' → logprob: -2.4506540298461914
    5. ' res' → logprob: -2.7006540298461914
    6. 'sorted' → logprob: -3.0756540298461914
    7. '+' → logprob: -6.575654029846191
    8. ' ' → logprob: -8.075654029846191
    9. '0' → logprob: -9.075654029846191
    10. '(sorted' → logprob: -9.825654029846191

Token 115: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.18015676736831665
    2. ' +' → logprob: -1.8051567077636719
    3. ' -' → logprob: -8.680156707763672
    4. '-' → logprob: -8.680156707763672
    5. ' ' → logprob: -10.055156707763672
    6. 'max' → logprob: -11.930156707763672
    7. ' ' → logprob: -12.305156707763672
    8. ' max' → logprob: -12.805156707763672
    9. '+d' → logprob: -12.930156707763672
    10. 'sorted' → logprob: -13.430156707763672

Token 116: ' sorted' (ID: 20099)
  Prédit: 'sorted'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sorted' → logprob: -0.06198930740356445
    2. ' sorted' → logprob: -2.8119893074035645
    3. '(sorted' → logprob: -10.936988830566406
    4. '   ' → logprob: -13.811988830566406
    5. 'int' → logprob: -14.811988830566406
    6. '.sorted' → logprob: -14.936988830566406
    7. '-' → logprob: -14.936988830566406
    8. ' -' → logprob: -15.186988830566406
    9. ' ' → logprob: -15.186988830566406
    10. '_sorted' → logprob: -15.311988830566406

Token 117: '_d' (ID: 1565)
  Prédit: '_d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_d' → logprob: -0.00016063073417171836
    2. 'd' → logprob: -8.750160217285156
    3. '(' → logprob: -13.750160217285156
    4. '```' → logprob: -15.375160217285156
    5. '(sorted' → logprob: -15.500160217285156
    6. '(d' → logprob: -15.625160217285156
    7. '_' → logprob: -16.000160217285156
    8. 'res' → logprob: -16.375160217285156
    9. '(_' → logprob: -16.625160217285156
    10. '-d' → logprob: -16.875160217285156

Token 118: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0002682496269699186
    2. 'elem' → logprob: -8.25026798248291
    3. '[-' → logprob: -13.25026798248291
    4. '[
' → logprob: -13.50026798248291
    5. '(elem' → logprob: -13.50026798248291
    6. ' [' → logprob: -14.12526798248291
    7. '```' → logprob: -14.75026798248291
    8. '	elem' → logprob: -15.12526798248291
    9. '[element' → logprob: -15.37526798248291
    10. ' elem' → logprob: -15.75026798248291

Token 119: 'elem' (ID: 35287)
  Prédit: 'elem'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elem' → logprob: -2.4272752852994017e-05
    2. ' elem' → logprob: -11.00002384185791
    3. '0' → logprob: -13.00002384185791
    4. '-' → logprob: -13.50002384185791
    5. ' -' → logprob: -13.87502384185791
    6. 'ele' → logprob: -13.87502384185791
    7. '	elem' → logprob: -14.00002384185791
    8. '(elem' → logprob: -15.00002384185791
    9. ']' → logprob: -15.62502384185791
    10. ')' → logprob: -16.125024795532227

Token 120: ']

' (ID: 3144)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.08673441410064697
    2. ']' → logprob: -2.9617342948913574
    3. ' +' → logprob: -3.8367342948913574
    4. ')' → logprob: -4.961734294891357
    5. ']+' → logprob: -6.336734294891357
    6. '])' → logprob: -8.211734771728516
    7. '+]' → logprob: -8.336734771728516
    8. '+)' → logprob: -8.836734771728516
    9. ')+' → logprob: -9.461734771728516
    10. ' ]' → logprob: -9.586734771728516

Token 121: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -9.968312951968983e-06
    2. 'res' → logprob: -11.875009536743164
    3. '```' → logprob: -14.000009536743164
    4. '-print' → logprob: -14.500009536743164
    5. '+' → logprob: -14.875009536743164
    6. '#print' → logprob: -15.125009536743164
    7. '#' → logprob: -15.500009536743164
    8. ' print' → logprob: -15.625009536743164
    9. 'return' → logprob: -15.750009536743164
    10. '-' → logprob: -16.375009536743164

Token 122: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -0.3869515359401703
    2. '(' → logprob: -1.1369515657424927
    3. 'res' → logprob: -10.386951446533203
    4. '('' → logprob: -10.761951446533203
    5. '(sum' → logprob: -11.011951446533203
    6. '()' → logprob: -12.511951446533203
    7. '(
' → logprob: -12.761951446533203
    8. '("' → logprob: -13.386951446533203
    9. ' (' → logprob: -13.386951446533203
    10. '((' → logprob: -14.386951446533203

Token 123: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.004546776879578829
    2. '-' → logprob: -5.504546642303467
    3. '-)' → logprob: -8.004547119140625
    4. ' )' → logprob: -9.379547119140625
    5. ' -' → logprob: -10.129547119140625
    6. '+' → logprob: -12.129547119140625
    7. ')#' → logprob: -14.129547119140625
    8. '))' → logprob: -14.254547119140625
    9. '-K' → logprob: -14.504547119140625
    10. '-k' → logprob: -15.004547119140625


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 121
Tokens correctement prédits (1ère position, stricte): 43
Tokens correctement prédits (1ère position, avec adaptation): 46
Tokens correctement prédits (top 10): 91
Précision stricte (1ère position): 35.54%
Précision adaptée (1ère position): 38.02%
Précision (top 10): 75.21%
================================================================================
