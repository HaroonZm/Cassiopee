================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:03:33
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
a = int(input())
b = int(input())
c = int(input())
d = int(input())
e = int(input())
k = int(input())
if e - a <= k:
    print("Yay!")
else:
    print(":(")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'a' (ID: 64)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0006926587666384876
    2. '(a' → logprob: -7.875692844390869
    3. 'a' → logprob: -9.125692367553711
    4. '```' → logprob: -9.625692367553711
    5. ''' → logprob: -9.875692367553711
    6. '`' → logprob: -10.375692367553711
    7. ' (' → logprob: -11.375692367553711
    8. '('' → logprob: -11.500692367553711
    9. ')' → logprob: -11.750692367553711
    10. '\(' → logprob: -12.250692367553711

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.11533945053815842
    2. ')' → logprob: -2.240339517593384
    3. '()' → logprob: -6.865339279174805
    4. '())' → logprob: -7.990339279174805
    5. '(
' → logprob: -8.865339279174805
    6. '))' → logprob: -9.115339279174805
    7. '```' → logprob: -9.115339279174805
    8. '(a' → logprob: -9.240339279174805
    9. 'a' → logprob: -9.740339279174805
    10. '`' → logprob: -9.865339279174805

Token 5: 'b' (ID: 65)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.02199716493487358
    2. '*' → logprob: -4.021996974945068
    3. '\n' → logprob: -6.771996974945068
    4. '%' → logprob: -6.896996974945068
    5. '#' → logprob: -7.646996974945068
    6. '+
' → logprob: -8.146997451782227
    7. 'a' → logprob: -8.646997451782227
    8. '**' → logprob: -8.896997451782227
    9. '\' → logprob: -8.896997451782227
    10. ')' → logprob: -9.396997451782227

Token 6: ' =' (ID: 314)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.464385449886322
    2. '=' → logprob: -1.9643855094909668
    3. '[' → logprob: -2.214385509490967
    4. ' =' → logprob: -2.964385509490967
    5. ' ' → logprob: -3.089385509490967
    6. ')' → logprob: -4.464385509490967
    7. ' +' → logprob: -6.214385509490967
    8. ' +=' → logprob: -6.214385509490967
    9. '*' → logprob: -6.464385509490967
    10. '_' → logprob: -6.589385509490967

Token 7: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.027502650395035744
    2. 'int' → logprob: -3.6525025367736816
    3. ' a' → logprob: -7.027502536773682
    4. 'a' → logprob: -8.15250301361084
    5. ' input' → logprob: -11.40250301361084
    6. ' ' → logprob: -12.02750301361084
    7. '=int' → logprob: -13.02750301361084
    8. 'input' → logprob: -13.27750301361084
    9. '<int' → logprob: -13.65250301361084
    10. '(int' → logprob: -14.02750301361084

Token 8: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0006836029351688921
    2. ')' → logprob: -8.000683784484863
    3. '()' → logprob: -9.125683784484863
    4. ' (' → logprob: -9.625683784484863
    5. '```' → logprob: -10.000683784484863
    6. '(a' → logprob: -10.500683784484863
    7. ''' → logprob: -10.625683784484863
    8. '`' → logprob: -11.000683784484863
    9. ' ' → logprob: -11.125683784484863
    10. '('' → logprob: -11.875683784484863

Token 9: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.05383114889264107
    2. '()' → logprob: -3.178831100463867
    3. ')' → logprob: -4.553831100463867
    4. '(' → logprob: -9.178831100463867
    5. ' ())' → logprob: -9.678831100463867
    6. '()))' → logprob: -9.928831100463867
    7. '`)' → logprob: -12.303831100463867
    8. '();)' → logprob: -12.553831100463867
    9. '()>' → logprob: -13.053831100463867
    10. '())
' → logprob: -13.178831100463867

Token 10: 'c' (ID: 66)
  Prédit: 'c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.7165156006813049
    2. 'if' → logprob: -0.7165156006813049
    3. 's' → logprob: -4.21651554107666
    4. '+' → logprob: -5.96651554107666
    5. 'print' → logprob: -5.96651554107666
    6. 'sum' → logprob: -6.71651554107666
    7. 'result' → logprob: -6.84151554107666
    8. ' if' → logprob: -8.59151554107666
    9. '+
' → logprob: -8.59151554107666
    10. '#' → logprob: -8.71651554107666

Token 11: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.641842246055603
    2. '=' → logprob: -0.766842246055603
    3. '+' → logprob: -5.141842365264893
    4. '_' → logprob: -6.641842365264893
    5. ')' → logprob: -7.516842365264893
    6. ' ' → logprob: -7.766842365264893
    7. ' +=' → logprob: -8.141841888427734
    8. 'a' → logprob: -8.766841888427734
    9. ' +' → logprob: -9.016841888427734
    10. '+=' → logprob: -9.266841888427734

Token 12: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.22349035739898682
    2. 'int' → logprob: -2.3484902381896973
    3. ' a' → logprob: -2.3484902381896973
    4. 'a' → logprob: -4.723490238189697
    5. ' input' → logprob: -8.473490715026855
    6. ' ' → logprob: -10.223490715026855
    7. ' max' → logprob: -10.473490715026855
    8. 'input' → logprob: -10.473490715026855
    9. '(int' → logprob: -10.598490715026855
    10. '  ' → logprob: -11.848490715026855

Token 13: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0030031390488147736
    2. ')' → logprob: -7.503003120422363
    3. '()' → logprob: -7.503003120422363
    4. '('' → logprob: -7.628003120422363
    5. '(a' → logprob: -7.878003120422363
    6. ' (' → logprob: -7.878003120422363
    7. 'a' → logprob: -8.878003120422363
    8. ' ' → logprob: -8.878003120422363
    9. '(input' → logprob: -9.503003120422363
    10. ''' → logprob: -10.253003120422363

Token 14: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.32185065746307373
    2. '()' → logprob: -1.5718506574630737
    3. ')' → logprob: -2.6968507766723633
    4. '(' → logprob: -9.571850776672363
    5. ' ())' → logprob: -11.321850776672363
    6. '`)' → logprob: -11.696850776672363
    7. '()>' → logprob: -11.946850776672363
    8. ' )' → logprob: -12.821850776672363
    9. '()))' → logprob: -13.071850776672363
    10. '()
' → logprob: -13.196850776672363

Token 15: 'd' (ID: 67)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.4192591905593872
    2. 'd' → logprob: -1.6692591905593872
    3. 'sum' → logprob: -2.7942590713500977
    4. 's' → logprob: -2.9192590713500977
    5. 'max' → logprob: -3.6692590713500977
    6. 'total' → logprob: -5.294259071350098
    7. 'print' → logprob: -5.544259071350098
    8. 'result' → logprob: -6.544259071350098
    9. 'n' → logprob: -6.794259071350098
    10. 'x' → logprob: -7.419259071350098

Token 16: ' =' (ID: 314)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -1.387460470199585
    2. ' =' → logprob: -1.387460470199585
    3. ' ' → logprob: -1.387460470199585
    4. '=' → logprob: -1.762460470199585
    5. ')' → logprob: -3.887460470199585
    6. ' +' → logprob: -3.887460470199585
    7. '*' → logprob: -5.262460708618164
    8. '[' → logprob: -5.512460708618164
    9. '_' → logprob: -5.512460708618164
    10. '>' → logprob: -5.637460708618164

Token 17: ' int' (ID: 677)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.46062836050987244
    2. 'a' → logprob: -1.2106283903121948
    3. ' int' → logprob: -3.0856282711029053
    4. 'int' → logprob: -3.7106282711029053
    5. ' max' → logprob: -7.460628509521484
    6. 'max' → logprob: -8.710628509521484
    7. ' ' → logprob: -9.710628509521484
    8. '(a' → logprob: -10.085628509521484
    9. '(int' → logprob: -10.835628509521484
    10. ' (' → logprob: -11.210628509521484

Token 18: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0003143704670947045
    2. ' (' → logprob: -8.625314712524414
    3. 'a' → logprob: -10.875314712524414
    4. ')' → logprob: -11.000314712524414
    5. ''' → logprob: -11.125314712524414
    6. '('' → logprob: -11.250314712524414
    7. '(input' → logprob: -11.500314712524414
    8. '(
' → logprob: -11.625314712524414
    9. '()' → logprob: -11.750314712524414
    10. '(a' → logprob: -11.750314712524414

Token 19: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.09796080738306046
    2. '()' → logprob: -2.8479607105255127
    3. '())' → logprob: -3.3479607105255127
    4. '`)' → logprob: -8.847960472106934
    5. ' )' → logprob: -11.472960472106934
    6. '）' → logprob: -11.972960472106934
    7. '()
' → logprob: -12.097960472106934
    8. '')' → logprob: -12.222960472106934
    9. '))' → logprob: -12.347960472106934
    10. '(' → logprob: -12.347960472106934

Token 20: 'e' (ID: 68)
  Prédit: 'e'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.5356608033180237
    2. 'if' → logprob: -1.160660743713379
    3. 'print' → logprob: -3.285660743713379
    4. 'sum' → logprob: -4.285660743713379
    5. 's' → logprob: -4.535660743713379
    6. 'n' → logprob: -4.660660743713379
    7. 'max' → logprob: -4.660660743713379
    8. 'result' → logprob: -5.160660743713379
    9. 'x' → logprob: -5.285660743713379
    10. 'total' → logprob: -5.410660743713379

Token 21: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.09271789342164993
    2. '=' → logprob: -2.4677178859710693
    3. ')' → logprob: -6.842718124389648
    4. '+' → logprob: -7.092718124389648
    5. '_' → logprob: -7.967718124389648
    6. ' ' → logprob: -8.217718124389648
    7. '>' → logprob: -8.842718124389648
    8. '.' → logprob: -9.092718124389648
    9. 'space' → logprob: -9.092718124389648
    10. 'a' → logprob: -9.342718124389648

Token 22: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -1.27680504322052
    2. ' a' → logprob: -1.40180504322052
    3. 'a' → logprob: -1.52680504322052
    4. ' ' → logprob: -1.65180504322052
    5. 'int' → logprob: -2.9018049240112305
    6. ' (' → logprob: -5.9018049240112305
    7. 'e' → logprob: -6.1518049240112305
    8. 'd' → logprob: -6.6518049240112305
    9. ' e' → logprob: -7.4018049240112305
    10. 's' → logprob: -7.5268049240112305

Token 23: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0036857128143310547
    2. '(input' → logprob: -5.75368595123291
    3. ' (' → logprob: -8.62868595123291
    4. '()' → logprob: -9.62868595123291
    5. '('' → logprob: -9.62868595123291
    6. '(
' → logprob: -9.87868595123291
    7. ')' → logprob: -10.87868595123291
    8. '(a' → logprob: -11.25368595123291
    9. '((' → logprob: -11.50368595123291
    10. '(

' → logprob: -11.50368595123291

Token 24: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.46421173214912415
    2. '()' → logprob: -1.3392117023468018
    3. ')' → logprob: -2.2142117023468018
    4. '`)' → logprob: -10.839211463928223
    5. ' ())' → logprob: -10.964211463928223
    6. '(' → logprob: -11.339211463928223
    7. ' )' → logprob: -11.839211463928223
    8. '()
' → logprob: -12.089211463928223
    9. '();)' → logprob: -13.339211463928223
    10. '())
' → logprob: -13.339211463928223

Token 25: 'k' (ID: 74)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.3645506799221039
    2. 's' → logprob: -1.6145507097244263
    3. 'sum' → logprob: -3.6145505905151367
    4. 'if' → logprob: -4.114550590515137
    5. 'max' → logprob: -4.239550590515137
    6. 'n' → logprob: -4.864550590515137
    7. 'print' → logprob: -4.989550590515137
    8. 'x' → logprob: -5.114550590515137
    9. 'p' → logprob: -5.114550590515137
    10. '\n' → logprob: -5.239550590515137

Token 26: ' =' (ID: 314)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6957076787948608
    2. ' =' → logprob: -0.9457076787948608
    3. '=' → logprob: -2.6957077980041504
    4. ' >' → logprob: -4.57070779800415
    5. '<|end|>' → logprob: -4.82070779800415
    6. ')' → logprob: -5.32070779800415
    7. '>' → logprob: -5.69570779800415
    8. ' )' → logprob: -6.07070779800415
    9. '+' → logprob: -6.32070779800415
    10. '[' → logprob: -6.57070779800415

Token 27: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.5725985169410706
    2. ' ' → logprob: -1.1975984573364258
    3. 'int' → logprob: -2.947598457336426
    4. ' a' → logprob: -3.197598457336426
    5. ' abs' → logprob: -4.322598457336426
    6. 'a' → logprob: -4.947598457336426
    7. '10' → logprob: -5.322598457336426
    8. 'abs' → logprob: -5.947598457336426
    9. '5' → logprob: -6.447598457336426
    10. '20' → logprob: -6.822598457336426

Token 28: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004892042838037014
    2. '(input' → logprob: -6.004891872406006
    3. '('' → logprob: -6.754891872406006
    4. ' (' → logprob: -8.004892349243164
    5. '()' → logprob: -8.129892349243164
    6. '(a' → logprob: -9.129892349243164
    7. '(
' → logprob: -9.629892349243164
    8. ' ' → logprob: -9.754892349243164
    9. 'a' → logprob: -9.754892349243164
    10. ''' → logprob: -10.004892349243164

Token 29: '())
' (ID: 4574)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.6099514365196228
    2. '())' → logprob: -1.3599514961242676
    3. ')' → logprob: -1.6099514961242676
    4. '(' → logprob: -11.23495101928711
    5. ' ())' → logprob: -11.35995101928711
    6. '`)' → logprob: -11.60995101928711
    7. ' )' → logprob: -12.35995101928711
    8. '()
' → logprob: -12.60995101928711
    9. '')' → logprob: -13.23495101928711
    10. '())
' → logprob: -13.60995101928711

Token 30: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.15643487870693207
    2. 'f' → logprob: -3.1564347743988037
    3. 's' → logprob: -3.5314347743988037
    4. 'print' → logprob: -3.7814347743988037
    5. 'sum' → logprob: -4.531435012817383
    6. 'max' → logprob: -4.906435012817383
    7. 'x' → logprob: -5.156435012817383
    8. 'i' → logprob: -5.531435012817383
    9. 'n' → logprob: -5.656435012817383
    10. '\n' → logprob: -5.906435012817383

Token 31: ' e' (ID: 319)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.3635280132293701
    2. ' abs' → logprob: -1.3635280132293701
    3. 'a' → logprob: -3.86352801322937
    4. ' (' → logprob: -4.363528251647949
    5. 'abs' → logprob: -4.613528251647949
    6. ' ' → logprob: -5.613528251647949
    7. '(' → logprob: -7.113528251647949
    8. '(abs' → logprob: -7.488528251647949
    9. '(a' → logprob: -8.98852825164795
    10. ' k' → logprob: -9.61352825164795

Token 32: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.07510850578546524
    2. '-' → logprob: -3.200108528137207
    3. ' >' → logprob: -4.950108528137207
    4. ' >=' → logprob: -5.200108528137207
    5. ' <=' → logprob: -5.325108528137207
    6. ' <' → logprob: -5.450108528137207
    7. '<' → logprob: -5.825108528137207
    8. '>' → logprob: -5.950108528137207
    9. ' ' → logprob: -6.950108528137207
    10. '+' → logprob: -7.075108528137207

Token 33: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.07169494032859802
    2. ' a' → logprob: -3.446694850921631
    3. 'k' → logprob: -3.696694850921631
    4. 'd' → logprob: -4.946694850921631
    5. ' k' → logprob: -6.196694850921631
    6. 'b' → logprob: -6.571694850921631
    7. ' d' → logprob: -6.946694850921631
    8. 'c' → logprob: -7.696694850921631
    9. ' ' → logprob: -8.821695327758789
    10. ' b' → logprob: -9.321695327758789

Token 34: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.5775858163833618
    2. ' >' → logprob: -1.0775858163833618
    3. ' >=' → logprob: -2.8275856971740723
    4. '>' → logprob: -3.5775856971740723
    5. '<=' → logprob: -5.327585697174072
    6. ' ' → logprob: -5.577585697174072
    7. ' <' → logprob: -6.702585697174072
    8. '>=' → logprob: -6.827585697174072
    9. '<' → logprob: -8.70258617401123
    10. ' ==' → logprob: -10.32758617401123

Token 35: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.023249205201864243
    2. ' k' → logprob: -3.7732491493225098
    3. '	k' → logprob: -12.898249626159668
    4. ' ' → logprob: -13.773249626159668
    5. '   ' → logprob: -16.64824867248535
    6. ' к' → logprob: -17.64824867248535
    7. '  ' → logprob: -18.27324867248535
    8. ' ' → logprob: -18.52324867248535
    9. '9' → logprob: -18.77324867248535
    10. '"k' → logprob: -19.14824867248535

Token 36: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.006803472060710192
    2. ' :' → logprob: -5.006803512573242
    3. ' and' → logprob: -9.756803512573242
    4. ':
' → logprob: -11.881803512573242
    5. ':**' → logprob: -12.256803512573242
    6. '.' → logprob: -12.381803512573242
    7. ' ' → logprob: -12.631803512573242
    8. 'and' → logprob: -13.256803512573242
    9. '>' → logprob: -13.381803512573242
    10. ' or' → logprob: -13.631803512573242

Token 37: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5020806193351746
    2. ' print' → logprob: -1.1270806789398193
    3. 'print' → logprob: -3.5020806789398193
    4. '\n' → logprob: -3.6270806789398193
    5. '    ' → logprob: -4.87708044052124
    6. '\' → logprob: -6.25208044052124
    7. ' \' → logprob: -7.00208044052124
    8. '	print' → logprob: -7.37708044052124
    9. ':' → logprob: -7.75208044052124
    10. ' ' → logprob: -7.87708044052124

Token 38: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0004551023303065449
    2. ' print' → logprob: -7.875454902648926
    3. '   ' → logprob: -9.875454902648926
    4. 'Yes' → logprob: -11.875454902648926
    5. 'Print' → logprob: -12.375454902648926
    6. '"' → logprob: -13.000454902648926
    7. '`' → logprob: -13.375454902648926
    8. '	print' → logprob: -13.500454902648926
    9. ''' → logprob: -14.250454902648926
    10. 'YES' → logprob: -14.250454902648926

Token 39: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.6531928181648254
    2. '(' → logprob: -0.7781928181648254
    3. '('' → logprob: -4.77819299697876
    4. '("("' → logprob: -5.02819299697876
    5. '(a' → logprob: -5.40319299697876
    6. '(e' → logprob: -8.153192520141602
    7. '("(' → logprob: -8.403192520141602
    8. '()' → logprob: -9.278192520141602
    9. '("")' → logprob: -9.528192520141602
    10. '(":' → logprob: -9.528192520141602

Token 40: 'Y' (ID: 56)
  Prédit: 'Yes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.2700442373752594
    2. 'Y' → logprob: -2.7700443267822266
    3. 'YES' → logprob: -2.8950443267822266
    4. '0' → logprob: -3.2700443267822266
    5. 'True' → logprob: -3.8950443267822266
    6. 'Easy' → logprob: -4.145044326782227
    7. '1' → logprob: -5.145044326782227
    8. '"' → logprob: -5.770044326782227
    9. 'Hello' → logprob: -5.770044326782227
    10. 'П' → logprob: -5.895044326782227

Token 41: 'ay' (ID: 356)
  Prédit: 'ES'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ES' → logprob: -0.4589312672615051
    2. 'es' → logprob: -1.2089312076568604
    3. 'e' → logprob: -3.0839312076568604
    4. 'E' → logprob: -4.4589314460754395
    5. 'ou' → logprob: -5.4589314460754395
    6. '``' → logprob: -6.5839314460754395
    7. '```' → logprob: -6.5839314460754395
    8. 'ес' → logprob: -6.8339314460754395
    9. 'a' → logprob: -7.0839314460754395
    10. 'Es' → logprob: -7.2089314460754395

Token 42: '!")
' (ID: 50941)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.3320204019546509
    2. '!")' → logprob: -1.5820204019546509
    3. '!' → logprob: -2.5820202827453613
    4. ')' → logprob: -6.832020282745361
    5. '!)' → logprob: -8.83202075958252
    6. '"' → logprob: -9.33202075958252
    7. '')' → logprob: -11.83202075958252
    8. '")
' → logprob: -12.08202075958252
    9. '!")
' → logprob: -12.58202075958252
    10. '""' → logprob: -12.70702075958252

Token 43: 'else' (ID: 2807)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.6389140486717224
    2. 'else' → logprob: -0.7639140486717224
    3. ' else' → logprob: -5.638914108276367
    4. ' elif' → logprob: -6.013914108276367
    5. '\n' → logprob: -9.763914108276367
    6. '   ' → logprob: -9.888914108276367
    7. '<|end|>' → logprob: -9.888914108276367
    8. ' ' → logprob: -10.513914108276367
    9. '```' → logprob: -10.638914108276367
    10. 'el' → logprob: -11.138914108276367

Token 44: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -5.931863051955588e-05
    2. ':
' → logprob: -10.125059127807617
    3. ' :' → logprob: -11.125059127807617
    4. '   ' → logprob: -12.375059127807617
    5. '):' → logprob: -15.875059127807617
    6. '():' → logprob: -16.875059127807617
    7. '.' → logprob: -17.375059127807617
    8. ' :
' → logprob: -17.375059127807617
    9. ')' → logprob: -17.500059127807617
    10. '  ' → logprob: -18.000059127807617

Token 45: '   ' (ID: 271)
  Prédit: '":'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '":' → logprob: -0.003821694990620017
    2. ' ":' → logprob: -6.128821849822998
    3. '"' → logprob: -6.753821849822998
    4. '":"' → logprob: -8.75382137298584
    5. ' "' → logprob: -8.87882137298584
    6. '(":' → logprob: -9.12882137298584
    7. '':' → logprob: -11.75382137298584
    8. '   ' → logprob: -12.00382137298584
    9. '"D' → logprob: -12.12882137298584
    10. ' ' → logprob: -12.25382137298584

Token 46: ' print' (ID: 2123)
  Prédit: '":'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '":' → logprob: -0.0006372620700858533
    2. ':(' → logprob: -8.25063705444336
    3. ' ":' → logprob: -9.00063705444336
    4. '':' → logprob: -9.25063705444336
    5. '(":' → logprob: -9.62563705444336
    6. '":"' → logprob: -10.25063705444336
    7. '`:' → logprob: -11.25063705444336
    8. ':' → logprob: -12.00063705444336
    9. '":[' → logprob: -12.00063705444336
    10. ' :(' → logprob: -12.75063705444336

Token 47: '(":' (ID: 40387)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.16349418461322784
    2. '("' → logprob: -1.9134942293167114
    3. '("("' → logprob: -6.413494110107422
    4. '()' → logprob: -6.663494110107422
    5. '("")' → logprob: -8.163494110107422
    6. '"' → logprob: -11.288494110107422
    7. '('' → logprob: -11.538494110107422
    8. '("""' → logprob: -11.788494110107422
    9. '(
' → logprob: -12.163494110107422
    10. ' ' → logprob: -12.413494110107422

Token 48: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.018897240981459618
    2. '(":' → logprob: -5.39389705657959
    3. ':(' → logprob: -5.51889705657959
    4. '("' → logprob: -5.89389705657959
    5. ')' → logprob: -6.39389705657959
    6. '((' → logprob: -6.89389705657959
    7. '(("' → logprob: -7.14389705657959
    8. '-(' → logprob: -7.14389705657959
    9. '-' → logprob: -7.39389705657959
    10. '(No' → logprob: -7.89389705657959

Token 49: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00027825910365208983
    2. ')
' → logprob: -9.00027847290039
    3. '\n' → logprob: -9.62527847290039
    4. '<|end|>' → logprob: -10.25027847290039
    5. '
' → logprob: -10.37527847290039
    6. '")' → logprob: -12.00027847290039
    7. '```' → logprob: -12.00027847290039
    8. '  
' → logprob: -13.12527847290039
    9. '}' → logprob: -13.25027847290039
    10. '')' → logprob: -13.50027847290039


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 47
Tokens correctement prédits (1ère position, stricte): 14
Tokens correctement prédits (1ère position, avec adaptation): 15
Tokens correctement prédits (top 10): 36
Précision stricte (1ère position): 29.79%
Précision adaptée (1ère position): 31.91%
Précision (top 10): 76.60%
================================================================================
