================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:28:10
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
H,N = map(int,input().split())
A = list(map(int,input().split()))
ans = 'Yes' if H<=sum(A) else 'No'
print(ans)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'H' (ID: 39)
  → Token d'amorce (pas de prédiction)

Token 1: ',N' (ID: 49539)
  → Token d'amorce (pas de prédiction)

Token 2: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 3: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7084165215492249
    2. ' map' → logprob: -1.45841646194458
    3. 'map' → logprob: -1.95841646194458
    4. '2' → logprob: -2.95841646194458
    5. '10' → logprob: -3.45841646194458
    6. '5' → logprob: -3.83341646194458
    7. '3' → logprob: -4.95841646194458
    8. '20' → logprob: -5.83341646194458
    9. '1' → logprob: -5.95841646194458
    10. '7' → logprob: -6.08341646194458

Token 4: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.6151489615440369
    2. '(' → logprob: -1.1151490211486816
    3. '(str' → logprob: -2.3651490211486816
    4. '(lambda' → logprob: -3.3651490211486816
    5. '(input' → logprob: -7.115149021148682
    6. '<|end|>' → logprob: -7.990149021148682
    7. '```' → logprob: -8.115148544311523
    8. 'int' → logprob: -8.365148544311523
    9. '[int' → logprob: -8.490148544311523
    10. '<int' → logprob: -8.865148544311523

Token 5: ',input' (ID: 123014)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.014378677122294903
    2. ')' → logprob: -4.514378547668457
    3. '(' → logprob: -6.639378547668457
    4. 'input' → logprob: -6.764378547668457
    5. ',input' → logprob: -7.639378547668457
    6. '=input' → logprob: -9.764378547668457
    7. '`)' → logprob: -10.014378547668457
    8. '```' → logprob: -10.139378547668457
    9. '(raw' → logprob: -10.389378547668457
    10. '`' → logprob: -10.514378547668457

Token 6: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.08700785785913467
    2. '())' → logprob: -2.962007761001587
    3. '().' → logprob: -4.087007999420166
    4. '('' → logprob: -4.462007999420166
    5. '(' → logprob: -6.212007999420166
    6. '()>' → logprob: -8.712007522583008
    7. '()`' → logprob: -8.837007522583008
    8. '(()' → logprob: -9.212007522583008
    9. '();)' → logprob: -9.212007522583008
    10. '()">' → logprob: -9.337007522583008

Token 7: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0007350585656240582
    2. 'strip' → logprob: -7.250735282897949
    3. 'rstrip' → logprob: -10.75073528289795
    4. ')' → logprob: -13.62573528289795
    5. ' split' → logprob: -13.87573528289795
    6. 'read' → logprob: -14.12573528289795
    7. '(split' → logprob: -15.00073528289795
    8. 'replace' → logprob: -15.75073528289795
    9. 'startswith' → logprob: -16.000734329223633
    10. 'spl' → logprob: -16.625734329223633

Token 8: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5385279655456543
    2. '())' → logprob: -0.9135279655456543
    3. '()' → logprob: -4.663527965545654
    4. '('' → logprob: -6.288527965545654
    5. '))' → logprob: -6.538527965545654
    6. '`)' → logprob: -6.663527965545654
    7. '(' → logprob: -7.413527965545654
    8. '()))' → logprob: -8.788528442382812
    9. '(','' → logprob: -9.038528442382812
    10. '')' → logprob: -9.413528442382812

Token 9: 'A' (ID: 32)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.6781737208366394
    2. 'for' → logprob: -1.0531737804412842
    3. 'x' → logprob: -3.553173780441284
    4. '```' → logprob: -3.553173780441284
    5. 'A' → logprob: -4.178173542022705
    6. '`' → logprob: -4.428173542022705
    7. 'matrix' → logprob: -5.178173542022705
    8. ' for' → logprob: -5.303173542022705
    9. 's' → logprob: -5.428173542022705
    10. 'd' → logprob: -5.553173542022705

Token 10: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.07754850387573242
    2. ' =' → logprob: -3.0775485038757324
    3. '=' → logprob: -4.077548503875732
    4. '[i' → logprob: -5.702548503875732
    5. '[A' → logprob: -5.952548503875732
    6. '.' → logprob: -6.827548503875732
    7. ',' → logprob: -7.077548503875732
    8. '[]' → logprob: -7.327548503875732
    9. '[][]' → logprob: -7.702548503875732
    10. '_' → logprob: -7.827548503875732

Token 11: ' list' (ID: 1562)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.5927670001983643
    2. '[' → logprob: -1.0927670001983643
    3. '[list' → logprob: -2.9677670001983643
    4. ' []' → logprob: -3.8427670001983643
    5. ' [' → logprob: -3.9677670001983643
    6. 'list' → logprob: -4.717766761779785
    7. '[int' → logprob: -5.217766761779785
    8. '[input' → logprob: -5.842766761779785
    9. '[][]' → logprob: -7.092766761779785
    10. '[A' → logprob: -7.717766761779785

Token 12: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00019293125660624355
    2. '(int' → logprob: -9.625192642211914
    3. '(input' → logprob: -10.375192642211914
    4. '(range' → logprob: -10.500192642211914
    5. '(A' → logprob: -11.125192642211914
    6. '(
' → logprob: -11.625192642211914
    7. '()' → logprob: -12.125192642211914
    8. '("("' → logprob: -12.250192642211914
    9. '(a' → logprob: -12.625192642211914
    10. '(token' → logprob: -12.625192642211914

Token 13: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.013411621563136578
    2. '(' → logprob: -4.388411521911621
    3. '(input' → logprob: -7.763411521911621
    4. '(str' → logprob: -8.263411521911621
    5. '(eval' → logprob: -10.263411521911621
    6. '<int' → logprob: -10.263411521911621
    7. '```' → logprob: -10.513411521911621
    8. '<|end|>' → logprob: -10.888411521911621
    9. '[int' → logprob: -11.013411521911621
    10. '=int' → logprob: -11.138411521911621

Token 14: ',input' (ID: 123014)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.6390572190284729
    2. ',input' → logprob: -0.7640572190284729
    3. ',' → logprob: -5.264057159423828
    4. '(' → logprob: -6.764057159423828
    5. '=input' → logprob: -10.514057159423828
    6. ',int' → logprob: -11.014057159423828
    7. 'input' → logprob: -11.014057159423828
    8. ' ,' → logprob: -11.514057159423828
    9. '),' → logprob: -11.639057159423828
    10. ')' → logprob: -11.889057159423828

Token 15: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.14129547774791718
    2. '()' → logprob: -2.2662954330444336
    3. '(' → logprob: -4.016295433044434
    4. '(input' → logprob: -5.641295433044434
    5. ')' → logprob: -6.516295433044434
    6. '())' → logprob: -7.016295433044434
    7. '()-' → logprob: -7.891295433044434
    8. '`()' → logprob: -7.891295433044434
    9. '()))' → logprob: -8.016295433044434
    10. '()(' → logprob: -8.141295433044434

Token 16: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -1.3856492842023727e-06
    2. ' split' → logprob: -14.250000953674316
    3. '(split' → logprob: -14.625000953674316
    4. 'strip' → logprob: -15.375000953674316
    5. 'rstrip' → logprob: -16.875001907348633
    6. 'spl' → logprob: -18.250001907348633
    7. 'plit' → logprob: -20.500001907348633
    8. ')' → logprob: -21.250001907348633
    9. '_split' → logprob: -21.375001907348633
    10. 'read' → logprob: -21.625001907348633

Token 17: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.42919763922691345
    2. '))' → logprob: -1.3041976690292358
    3. '())' → logprob: -3.3041975498199463
    4. ')' → logprob: -3.5541975498199463
    5. '(' → logprob: -4.554197788238525
    6. '()' → logprob: -6.554197788238525
    7. ')))' → logprob: -10.054197311401367
    8. '())))' → logprob: -10.429197311401367
    9. '()));' → logprob: -10.679197311401367
    10. '('' → logprob: -10.804197311401367

Token 18: 'ans' (ID: 616)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.715678870677948
    2. 'dp' → logprob: -1.5906789302825928
    3. 's' → logprob: -2.9656789302825928
    4. 'c' → logprob: -3.0906789302825928
    5. 'd' → logprob: -3.4656789302825928
    6. 'B' → logprob: -3.4656789302825928
    7. 'result' → logprob: -3.8406789302825928
    8. 'A' → logprob: -4.215678691864014
    9. 'count' → logprob: -4.340678691864014
    10. 'C' → logprob: -4.340678691864014

Token 19: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4513247609138489
    2. '=' → logprob: -1.076324701309204
    3. '_' → logprob: -4.576324939727783
    4. '[' → logprob: -5.576324939727783
    5. ' +=' → logprob: -6.201324939727783
    6. '+' → logprob: -6.701324939727783
    7. '+=' → logprob: -6.951324939727783
    8. '.append' → logprob: -6.951324939727783
    9. '=[]' → logprob: -7.201324939727783
    10. '.' → logprob: -7.451324939727783

Token 20: ' '' (ID: 461)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.27173709869384766
    2. ' ' → logprob: -2.0217370986938477
    3. '[' → logprob: -3.2717370986938477
    4. ' [' → logprob: -3.3967370986938477
    5. ' max' → logprob: -5.146737098693848
    6. ' []' → logprob: -5.146737098693848
    7. 'max' → logprob: -5.396737098693848
    8. '[]' → logprob: -5.396737098693848
    9. 'float' → logprob: -6.271737098693848
    10. '[max' → logprob: -6.396737098693848

Token 21: 'Yes' (ID: 13022)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.4971454441547394
    2. '0' → logprob: -1.622145414352417
    3. '-' → logprob: -3.372145414352417
    4. '1' → logprob: -4.122145652770996
    5. 'No' → logprob: -4.122145652770996
    6. ''A' → logprob: -4.372145652770996
    7. 'Yes' → logprob: -4.497145652770996
    8. 'YES' → logprob: -4.497145652770996
    9. 'T' → logprob: -4.997145652770996
    10. 'NO' → logprob: -4.997145652770996

Token 22: ''' (ID: 6)
  Prédit: '''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.7940670847892761
    2. 'if' → logprob: -1.919067144393921
    3. '')' → logprob: -2.169067144393921
    4. '<|end|>' → logprob: -2.169067144393921
    5. '\n' → logprob: -2.669067144393921
    6. ')' → logprob: -2.669067144393921
    7. ' if' → logprob: -4.544066905975342
    8. '<|end|>' → logprob: -5.169066905975342
    9. 'print' → logprob: -5.669066905975342
    10. ' or' → logprob: -5.794066905975342

Token 23: ' if' (ID: 538)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.4694121778011322
    2. '<|end|>' → logprob: -1.0944122076034546
    3. '
' → logprob: -3.844412088394165
    4. 'if' → logprob: -4.719412326812744
    5. ' if' → logprob: -5.469412326812744
    6. '<|end|>' → logprob: -5.719412326812744
    7. '\' → logprob: -7.344412326812744
    8. ')' → logprob: -7.969412326812744
    9. 'n' → logprob: -8.594411849975586
    10. ',' → logprob: -8.719411849975586

Token 24: ' H' (ID: 487)
  Prédit: ' all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' all' → logprob: -0.2223224937915802
    2. ' max' → logprob: -2.597322463989258
    3. 'all' → logprob: -3.597322463989258
    4. ' H' → logprob: -3.722322463989258
    5. ' sum' → logprob: -3.722322463989258
    6. ' any' → logprob: -3.972322463989258
    7. ' A' → logprob: -4.597322463989258
    8. 'max' → logprob: -5.347322463989258
    9. 'sum' → logprob: -5.347322463989258
    10. ' len' → logprob: -5.597322463989258

Token 25: '<=' (ID: 16672)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -1.0767637491226196
    2. ' in' → logprob: -1.4517637491226196
    3. ' <=' → logprob: -1.9517637491226196
    4. '<=' → logprob: -1.9517637491226196
    5. '>' → logprob: -3.07676362991333
    6. ' %' → logprob: -3.32676362991333
    7. '>=' → logprob: -3.95176362991333
    8. '==' → logprob: -4.20176362991333
    9. ' >=' → logprob: -4.70176362991333
    10. ' >' → logprob: -4.95176362991333

Token 26: 'sum' (ID: 12298)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.338308185338974
    2. 'sum' → logprob: -1.5883082151412964
    3. 'max' → logprob: -2.713308095932007
    4. 'min' → logprob: -4.713308334350586
    5. 'len' → logprob: -6.338308334350586
    6. ' sum' → logprob: -6.588308334350586
    7. '0' → logprob: -6.838308334350586
    8. ' A' → logprob: -7.213308334350586
    9. ' max' → logprob: -7.838308334350586
    10. 'N' → logprob: -7.838308334350586

Token 27: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.0009207503753714263
    2. '(' → logprob: -7.00092077255249
    3. '(a' → logprob: -11.875920295715332
    4. '([' → logprob: -14.125920295715332
    5. '((' → logprob: -14.125920295715332
    6. 'A' → logprob: -15.375920295715332
    7. ' (' → logprob: -15.625920295715332
    8. '(
' → logprob: -16.00092124938965
    9. '(max' → logprob: -16.00092124938965
    10. '()' → logprob: -17.12592124938965

Token 28: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.32654589228332e-05
    2. ' )' → logprob: -9.625073432922363
    3. 'else' → logprob: -12.875073432922363
    4. ' else' → logprob: -13.500073432922363
    5. '[' → logprob: -14.375073432922363
    6. '*' → logprob: -14.375073432922363
    7. '))' → logprob: -14.875073432922363
    8. '）' → logprob: -15.000073432922363
    9. '`)' → logprob: -15.250073432922363
    10. '')' → logprob: -15.375073432922363

Token 29: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.03805089741945267
    2. 'else' → logprob: -3.288050889968872
    3. '+' → logprob: -12.038050651550293
    4. ' ' → logprob: -13.163050651550293
    5. ' and' → logprob: -14.788050651550293
    6. 'and' → logprob: -15.663050651550293
    7. '	else' → logprob: -15.913050651550293
    8. '_else' → logprob: -15.913050651550293
    9. '>' → logprob: -16.03805160522461
    10. '-' → logprob: -16.03805160522461

Token 30: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -6.468279752880335e-05
    2. ' '' → logprob: -9.750064849853516
    3. '"' → logprob: -12.625064849853516
    4. ' ' → logprob: -13.250064849853516
    5. '`' → logprob: -14.750064849853516
    6. ''\' → logprob: -15.000064849853516
    7. '''' → logprob: -15.750064849853516
    8. ' ' → logprob: -15.875064849853516
    9. '	' → logprob: -16.125064849853516
    10. ''s' → logprob: -17.000064849853516

Token 31: 'No' (ID: 3160)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0008120091515593231
    2. 'No' → logprob: -7.12581205368042
    3. '"No' → logprob: -12.000811576843262
    4. ' '' → logprob: -14.625811576843262
    5. ' No' → logprob: -16.000812530517578
    6. '`' → logprob: -16.000812530517578
    7. 'print' → logprob: -16.125812530517578
    8. '''' → logprob: -16.125812530517578
    9. ''N' → logprob: -16.250812530517578
    10. '   ' → logprob: -16.375812530517578

Token 32: ''
' (ID: 2207)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0004985823179595172
    2. '')' → logprob: -7.6254987716674805
    3. ')' → logprob: -12.37549877166748
    4. '<|end|>' → logprob: -12.75049877166748
    5. '```' → logprob: -13.25049877166748
    6. '"' → logprob: -14.37549877166748
    7. ''''' → logprob: -14.87549877166748
    8. ''
' → logprob: -15.75049877166748
    9. '']' → logprob: -16.125497817993164
    10. ''H' → logprob: -16.250497817993164

Token 33: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.008097600191831589
    2. '\n' → logprob: -5.1330976486206055
    3. '
' → logprob: -7.1330976486206055
    4. ' print' → logprob: -7.5080976486206055
    5. '<|end|>' → logprob: -7.7580976486206055
    6. '\' → logprob: -9.133097648620605
    7. ')' → logprob: -9.258097648620605
    8. '```' → logprob: -10.008097648620605
    9. '' → logprob: -10.383097648620605
    10. '#' → logprob: -11.258097648620605

Token 34: '(ans' (ID: 70054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03808177635073662
    2. '(ans' → logprob: -3.2880818843841553
    3. '()' → logprob: -11.788082122802734
    4. '("("' → logprob: -11.913082122802734
    5. '(`' → logprob: -12.163082122802734
    6. '('' → logprob: -12.413082122802734
    7. '(A' → logprob: -12.413082122802734
    8. '(print' → logprob: -13.163082122802734
    9. '(**' → logprob: -13.413082122802734
    10. '(answer' → logprob: -13.538082122802734

Token 35: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.704273118884885e-07
    2. '))' → logprob: -15.000000953674316
    3. '')' → logprob: -16.125
    4. '`)' → logprob: -16.25
    5. ' )' → logprob: -16.875
    6. '）' → logprob: -17.5
    7. ')`' → logprob: -17.75
    8. ')
' → logprob: -18.5
    9. '")' → logprob: -19.25
    10. ')}' → logprob: -20.0


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 33
Tokens correctement prédits (1ère position, stricte): 12
Tokens correctement prédits (1ère position, avec adaptation): 12
Tokens correctement prédits (top 10): 27
Précision stricte (1ère position): 36.36%
Précision adaptée (1ère position): 36.36%
Précision (top 10): 81.82%
================================================================================
