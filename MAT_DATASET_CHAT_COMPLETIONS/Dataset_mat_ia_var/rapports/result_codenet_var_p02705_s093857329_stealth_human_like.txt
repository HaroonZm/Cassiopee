================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:17:16
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import math
import sys

# Bon, on lit la valeur depuis stdin normalement
nombre = int(sys.stdin.readline()) # J'espère que c'est bien un entier !

# On a besoin de pi, donc j'importe math
perimetre = 2 * math.pi * nombre # je crois que c'est comme ça la formule du cercle

print(perimetre)
# c'est censé afficher le résultat, mais je laisse la précision par défaut
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' math' (ID: 13324)
  → Token d'amorce (pas de prédiction)

Token 2: '
' (ID: 198)
  → Token d'amorce (pas de prédiction)

Token 3: 'import' (ID: 561)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0027468616608530283
    2. '<|end|>' → logprob: -6.627747058868408
    3. '```' → logprob: -7.877747058868408
    4. '\n' → logprob: -8.12774658203125
    5. '\' → logprob: -8.25274658203125
    6. 'import' → logprob: -8.75274658203125
    7. '<|end|>' → logprob: -9.75274658203125
    8. '.e' → logprob: -10.50274658203125
    9. '.pi' → logprob: -10.62774658203125
    10. '
' → logprob: -10.87774658203125

Token 4: ' sys' (ID: 12228)
  Prédit: ' sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.35312536358833313
    2. ' os' → logprob: -1.2281253337860107
    3. ' numpy' → logprob: -6.47812557220459
    4. ' random' → logprob: -6.85312557220459
    5. 'sys' → logprob: -6.85312557220459
    6. 'os' → logprob: -7.47812557220459
    7. ' cm' → logprob: -8.85312557220459
    8. ' ' → logprob: -9.35312557220459
    9. ' statistics' → logprob: -9.47812557220459
    10. ' re' → logprob: -9.47812557220459

Token 5: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -1.024697184562683
    2. '<|end|>' → logprob: -1.399697184562683
    3. '\n' → logprob: -2.0246973037719727
    4. '
' → logprob: -2.0246973037719727
    5. '

' → logprob: -3.0246973037719727
    6. '```' → logprob: -3.8996973037719727
    7. 'import' → logprob: -4.024697303771973
    8. '<|end|>' → logprob: -4.149697303771973
    9. '\' → logprob: -4.399697303771973
    10. 'newline' → logprob: -4.899697303771973

Token 6: '#' (ID: 2)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.776574969291687
    2. '\' → logprob: -1.151574969291687
    3. '\n' → logprob: -2.5265750885009766
    4. 'def' → logprob: -2.9015750885009766
    5. '```' → logprob: -2.9015750885009766
    6. 'import' → logprob: -4.026575088500977
    7. '`' → logprob: -5.401575088500977
    8. '#' → logprob: -5.776575088500977
    9. '
' → logprob: -6.901575088500977
    10. ',' → logprob: -6.901575088500977

Token 7: ' Bon' (ID: 12658)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.1576220542192459
    2. ' def' → logprob: -2.0326220989227295
    3. '#' → logprob: -5.78262186050415
    4. 'import' → logprob: -6.65762186050415
    5. '```' → logprob: -6.78262186050415
    6. ' math' → logprob: -7.03262186050415
    7. 'class' → logprob: -7.15762186050415
    8. ' class' → logprob: -7.28262186050415
    9. 'This' → logprob: -7.40762186050415
    10. 'define' → logprob: -7.65762186050415

Token 8: ',' (ID: 11)
  Prédit: 'us'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'us' → logprob: -0.04772692918777466
    2. '#' → logprob: -4.422727108001709
    3. 'jour' → logprob: -4.922727108001709
    4. 'd' → logprob: -5.297727108001709
    5. 'j' → logprob: -5.922727108001709
    6. 'du' → logprob: -6.297727108001709
    7. 'def' → logprob: -6.422727108001709
    8. 'u' → logprob: -6.547727108001709
    9. 'ja' → logprob: -6.547727108001709
    10. 'di' → logprob: -6.547727108001709

Token 9: ' on' (ID: 402)
  Prédit: ' je'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' je' → logprob: -0.3304476737976074
    2. ' voici' → logprob: -1.8304476737976074
    3. ' c' → logprob: -3.0804476737976074
    4. 'je' → logprob: -3.8304476737976074
    5. ' voilà' → logprob: -4.580447673797607
    6. '#' → logprob: -5.080447673797607
    7. ' j' → logprob: -5.455447673797607
    8. ' ça' → logprob: -5.455447673797607
    9. ' mais' → logprob: -5.830447673797607
    10. ' on' → logprob: -5.955447673797607

Token 10: ' lit' (ID: 11980)
  Prédit: ' va'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' va' → logprob: -0.45306676626205444
    2. ' continue' → logprob: -2.828066825866699
    3. 'ne' → logprob: -3.078066825866699
    4. 'n' → logprob: -3.328066825866699
    5. 's' → logprob: -3.703066825866699
    6. '```' → logprob: -3.703066825866699
    7. 'u' → logprob: -4.203066825866699
    8. ' peut' → logprob: -4.328066825866699
    9. ' dir' → logprob: -4.328066825866699
    10. 'e' → logprob: -4.453066825866699

Token 11: ' la' (ID: 557)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.40246009826660156
    2. ' la' → logprob: -1.9024600982666016
    3. 'le' → logprob: -2.2774600982666016
    4. ' le' → logprob: -3.5274600982666016
    5. 'l' → logprob: -3.9024600982666016
    6. 'la' → logprob: -4.652460098266602
    7. ',' → logprob: -5.652460098266602
    8. ' les' → logprob: -5.777460098266602
    9. ' l' → logprob: -6.152460098266602
    10. 'les' → logprob: -6.277460098266602

Token 12: ' valeur' (ID: 41664)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.8351325988769531
    2. 'ligne' → logprob: -1.9601325988769531
    3. 'l' → logprob: -2.085132598876953
    4. 'suite' → logprob: -2.460132598876953
    5. 'd' → logprob: -2.710132598876953
    6. 's' → logprob: -3.460132598876953
    7. ' ligne' → logprob: -3.460132598876953
    8. 'entrée' → logprob: -3.710132598876953
    9. ' ' → logprob: -4.460132598876953
    10. ' suite' → logprob: -4.585132598876953

Token 13: ' depuis' (ID: 16277)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8020949363708496
    2. 's' → logprob: -1.8020949363708496
    3. ' de' → logprob: -2.4270949363708496
    4. 'd' → logprob: -2.4270949363708496
    5. 'de' → logprob: -2.9270949363708496
    6. 'du' → logprob: -3.0520949363708496
    7. ' d' → logprob: -3.4270949363708496
    8. ' du' → logprob: -5.05209493637085
    9. 'input' → logprob: -5.17709493637085
    10. 'entrée' → logprob: -5.17709493637085

Token 14: ' stdin' (ID: 75143)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.6128541827201843
    2. ' l' → logprob: -1.987854242324829
    3. ' stdin' → logprob: -2.112854242324829
    4. 'la' → logprob: -2.987854242324829
    5. ' la' → logprob: -3.112854242324829
    6. ' input' → logprob: -3.612854242324829
    7. 'le' → logprob: -3.987854242324829
    8. ' sys' → logprob: -4.11285400390625
    9. 'stdin' → logprob: -4.23785400390625
    10. 'sys' → logprob: -4.36285400390625

Token 15: ' normalement' (ID: 164432)
  Prédit: 'value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'value' → logprob: -1.5364607572555542
    2. 'n' → logprob: -1.9114607572555542
    3. 'v' → logprob: -1.9114607572555542
    4. '_' → logprob: -2.2864608764648438
    5. 'val' → logprob: -2.6614608764648438
    6. 'x' → logprob: -2.7864608764648438
    7. ',' → logprob: -3.1614608764648438
    8. '\' → logprob: -3.2864608764648438
    9. '=' → logprob: -3.2864608764648438
    10. '.' → logprob: -3.5364608764648438

Token 16: '
' (ID: 198)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -1.1999216079711914
    2. '#' → logprob: -2.0749216079711914
    3. '_' → logprob: -2.0749216079711914
    4. 'v' → logprob: -2.0749216079711914
    5. 'value' → logprob: -2.8249216079711914
    6. '\' → logprob: -3.0749216079711914
    7. '.' → logprob: -3.3249216079711914
    8. ':' → logprob: -3.4499216079711914
    9. 'val' → logprob: -3.6999216079711914
    10. ' ' → logprob: -3.8249216079711914

Token 17: 'nombre' (ID: 28576)
  Prédit: 'value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'value' → logprob: -0.5068134665489197
    2. 'val' → logprob: -1.6318135261535645
    3. 'x' → logprob: -2.1318135261535645
    4. 'n' → logprob: -3.6318135261535645
    5. 'v' → logprob: -4.6318135261535645
    6. 'number' → logprob: -4.7568135261535645
    7. ',' → logprob: -4.8818135261535645
    8. ':' → logprob: -5.2568135261535645
    9. 'input' → logprob: -5.5068135261535645
    10. 'a' → logprob: -5.5068135261535645

Token 18: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.6143733859062195
    2. '_' → logprob: -0.8643733859062195
    3. '=' → logprob: -3.3643734455108643
    4. ' ' → logprob: -6.989373207092285
    5. '_de' → logprob: -7.489373207092285
    6. 's' → logprob: -7.864373207092285
    7. '_input' → logprob: -8.364373207092285
    8. '_=' → logprob: -8.739373207092285
    9. '_util' → logprob: -8.864373207092285
    10. ')' → logprob: -9.114373207092285

Token 19: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.04635307937860489
    2. ' float' → logprob: -3.4213531017303467
    3. 'int' → logprob: -4.421352863311768
    4. 'float' → logprob: -8.296353340148926
    5. ' input' → logprob: -8.546353340148926
    6. ' ' → logprob: -9.171353340148926
    7. '=int' → logprob: -10.671353340148926
    8. ' math' → logprob: -11.421353340148926
    9. ' sys' → logprob: -11.796353340148926
    10. 'input' → logprob: -11.796353340148926

Token 20: '(sys' (ID: 41042)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.497962087392807
    2. '(' → logprob: -0.9979621171951294
    3. '(sys' → logprob: -3.74796199798584
    4. ' (' → logprob: -11.37296199798584
    5. 'input' → logprob: -11.49796199798584
    6. '(stdin' → logprob: -12.24796199798584
    7. '(s' → logprob: -12.62296199798584
    8. '()' → logprob: -13.99796199798584
    9. '(raw' → logprob: -13.99796199798584
    10. '(

' → logprob: -13.99796199798584

Token 21: '.stdin' (ID: 93480)
  Prédit: '.stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdin' → logprob: -0.001965627772733569
    2. '.' → logprob: -6.251965522766113
    3. '.argv' → logprob: -10.876965522766113
    4. '.readline' → logprob: -11.626965522766113
    5. '.std' → logprob: -12.376965522766113
    6. '.stdout' → logprob: -12.876965522766113
    7. '.st' → logprob: -13.876965522766113
    8. ' .' → logprob: -14.626965522766113
    9. '.read' → logprob: -15.001965522766113
    10. '.standard' → logprob: -15.251965522766113

Token 22: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.49062034487724304
    2. '.' → logprob: -0.9906203746795654
    3. '.read' → logprob: -4.115620136260986
    4. '.)' → logprob: -9.865620613098145
    5. ' .' → logprob: -11.115620613098145
    6. '.Read' → logprob: -11.365620613098145
    7. '.readlines' → logprob: -12.615620613098145
    8. ')' → logprob: -13.115620613098145
    9. '.stdin' → logprob: -13.615620613098145
    10. '.")' → logprob: -13.615620613098145

Token 23: '())' (ID: 3516)
  Prédit: '())'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.00301549956202507
    2. '()' → logprob: -5.878015518188477
    3. ')' → logprob: -9.253015518188477
    4. ' ())' → logprob: -9.878015518188477
    5. '().' → logprob: -10.128015518188477
    6. '()))' → logprob: -11.003015518188477
    7. '())
' → logprob: -12.503015518188477
    8. '(' → logprob: -13.503015518188477
    9. '()[' → logprob: -14.753015518188477
    10. '())

' → logprob: -15.003015518188477

Token 24: ' #' (ID: 1069)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '*' → logprob: -1.368780255317688
    2. '+' → logprob: -1.618780255317688
    3. ')' → logprob: -2.3687801361083984
    4. '#' → logprob: -2.3687801361083984
    5. '
' → logprob: -2.7437801361083984
    6. ' ' → logprob: -2.7437801361083984
    7. '\n' → logprob: -2.8687801361083984
    8. ' 
' → logprob: -2.9937801361083984
    9. '<|end|>' → logprob: -3.4937801361083984
    10. '\' → logprob: -4.118780136108398

Token 25: ' J' (ID: 643)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.2319178581237793
    2. '\' → logprob: -1.4819178581237793
    3. '\n' → logprob: -1.8569178581237793
    4. '*' → logprob: -2.2319178581237793
    5. ')' → logprob: -2.4819178581237793
    6. '<|end|>' → logprob: -3.8569178581237793
    7. '```' → logprob: -3.8569178581237793
    8. ' \' → logprob: -4.106917858123779
    9. '+' → logprob: -4.106917858123779
    10. '#' → logprob: -4.481917858123779

Token 26: ''espère' (ID: 116557)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.047520969063043594
    2. 'uste' → logprob: -3.172520875930786
    3. ''aime' → logprob: -6.797521114349365
    4. 'ust' → logprob: -6.922521114349365
    5. 'a' → logprob: -8.047520637512207
    6. ''espère' → logprob: -8.422520637512207
    7. 'eux' → logprob: -8.422520637512207
    8. 'oueur' → logprob: -8.547520637512207
    9. 'u' → logprob: -8.547520637512207
    10. ''adore' → logprob: -8.672520637512207

Token 27: ' que' (ID: 661)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -1.058608889579773
    2. '*' → logprob: -1.308608889579773
    3. '<|end|>' → logprob: -2.5586090087890625
    4. ')' → logprob: -2.9336090087890625
    5. '\n' → logprob: -3.0586090087890625
    6. '  
' → logprob: -3.1836090087890625
    7. ' ' → logprob: -3.3086090087890625
    8. '#' → logprob: -3.4336090087890625
    9. ' 
' → logprob: -3.5586090087890625
    10. '+' → logprob: -4.1836090087890625

Token 28: ' c' (ID: 274)
  Prédit: ' vous'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' vous' → logprob: -1.014064908027649
    2. ' ce' → logprob: -1.514064908027649
    3. ' c' → logprob: -2.3890647888183594
    4. ' tu' → logprob: -2.3890647888183594
    5. ' la' → logprob: -3.1390647888183594
    6. ' len' → logprob: -3.3890647888183594
    7. ' ça' → logprob: -3.7640647888183594
    8. ' le' → logprob: -3.8890647888183594
    9. ' nombre' → logprob: -3.8890647888183594
    10. 'c' → logprob: -3.8890647888183594

Token 29: ''est' (ID: 6616)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.19295276701450348
    2. 'e' → logprob: -2.067952871322632
    3. ''' → logprob: -3.567952871322632
    4. ''a' → logprob: -4.442952632904053
    5. ' '' → logprob: -6.442952632904053
    6. 'ela' → logprob: -6.692952632904053
    7. 'est' → logprob: -6.942952632904053
    8. ' ' → logprob: -7.317952632904053
    9. ''est' → logprob: -7.442952632904053
    10. 'l' → logprob: -7.942952632904053

Token 30: ' bien' (ID: 5340)
  Prédit: ' suff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' suff' → logprob: -0.2756206691265106
    2. ' un' → logprob: -2.525620698928833
    3. ' bien' → logprob: -3.025620698928833
    4. ' tout' → logprob: -3.900620698928833
    5. ' entier' → logprob: -3.900620698928833
    6. ' correct' → logprob: -4.025620460510254
    7. ' ' → logprob: -4.525620460510254
    8. ' le' → logprob: -5.275620460510254
    9. 'tout' → logprob: -5.275620460510254
    10. ' pas' → logprob: -5.775620460510254

Token 31: ' un' (ID: 537)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.5949872136116028
    2. ' un' → logprob: -1.469987154006958
    3. ' suff' → logprob: -2.719987154006958
    4. ' \' → logprob: -3.719987154006958
    5. ' le' → logprob: -3.844987154006958
    6. ' la' → logprob: -4.094987392425537
    7. ' ' → logprob: -4.219987392425537
    8. ' l' → logprob: -4.219987392425537
    9. ' ce' → logprob: -4.844987392425537
    10. ' divisible' → logprob: -4.969987392425537

Token 32: ' entier' (ID: 80473)
  Prédit: ' entier'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' entier' → logprob: -0.4146203398704529
    2. ' nombre' → logprob: -1.2896203994750977
    3. 'e' → logprob: -3.4146203994750977
    4. 'ent' → logprob: -4.289620399475098
    5. 'nombre' → logprob: -4.664620399475098
    6. ' ' → logprob: -5.414620399475098
    7. ' ent' → logprob: -7.164620399475098
    8. ' integer' → logprob: -7.789620399475098
    9. ' int' → logprob: -8.039620399475098
    10. ' entière' → logprob: -8.039620399475098

Token 33: ' !

' (ID: 13547)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\' → logprob: -1.242431879043579
    2. '\n' → logprob: -1.617431879043579
    3. 's' → logprob: -2.117431879043579
    4. '
' → logprob: -2.867431879043579
    5. 'n' → logprob: -2.992431879043579
    6. '*' → logprob: -3.117431879043579
    7. '+' → logprob: -3.117431879043579
    8. ' 
' → logprob: -3.117431879043579
    9. '  
' → logprob: -3.492431879043579
    10. '.' → logprob: -3.742431879043579

Token 34: '#' (ID: 2)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -1.6822631359100342
    2. ',' → logprob: -2.182263135910034
    3. 'n' → logprob: -2.182263135910034
    4. '\n' → logprob: -2.682263135910034
    5. '#' → logprob: -2.807263135910034
    6. 'if' → logprob: -2.932263135910034
    7. ' 
' → logprob: -2.932263135910034
    8. '
' → logprob: -3.057263135910034
    9. 'factor' → logprob: -3.307263135910034
    10. ' ' → logprob: -3.432263135910034

Token 35: ' On' (ID: 2160)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.0228770971298218
    2. 'factor' → logprob: -1.6478770971298218
    3. 'result' → logprob: -1.7728770971298218
    4. ' if' → logprob: -2.2728772163391113
    5. 'rac' → logprob: -3.1478772163391113
    6. 'fact' → logprob: -3.2728772163391113
    7. ' rac' → logprob: -4.272877216339111
    8. 'r' → logprob: -4.522877216339111
    9. 'car' → logprob: -4.897877216339111
    10. 'for' → logprob: -5.022877216339111

Token 36: ' a' (ID: 261)
  Prédit: ' calc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' calc' → logprob: -1.4843143224716187
    2. ' va' → logprob: -2.234314441680908
    3. 's' → logprob: -3.109314441680908
    4. ' peut' → logprob: -3.109314441680908
    5. 'v' → logprob: -3.359314441680908
    6. ' a' → logprob: -3.359314441680908
    7. 'fait' → logprob: -3.484314441680908
    8. ' fait' → logprob: -3.484314441680908
    9. 'cal' → logprob: -3.609314441680908
    10. ' trouve' → logprob: -3.609314441680908

Token 37: ' besoin' (ID: 27703)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.9151503443717957
    2. ' la' → logprob: -1.6651504039764404
    3. ' une' → logprob: -2.2901504039764404
    4. ' math' → logprob: -2.9151504039764404
    5. ' plus' → logprob: -3.0401504039764404
    6. ' a' → logprob: -3.1651504039764404
    7. ' un' → logprob: -3.2901504039764404
    8. 'f' → logprob: -4.665150165557861
    9. '_' → logprob: -4.790150165557861
    10. ' pas' → logprob: -5.040150165557861

Token 38: ' de' (ID: 334)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.4677407145500183
    2. 'd' → logprob: -1.592740774154663
    3. ' de' → logprob: -1.967740774154663
    4. 'de' → logprob: -3.967740774154663
    5. ' ' → logprob: -4.592740535736084
    6. ' du' → logprob: -7.342740535736084
    7. '  ' → logprob: -9.092741012573242
    8. 'du' → logprob: -9.217741012573242
    9. ',' → logprob: -9.717741012573242
    10. ' des' → logprob: -9.842741012573242

Token 39: ' pi' (ID: 6404)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.45225608348846436
    2. 'math' → logprob: -1.3272560834884644
    3. ' la' → logprob: -3.202256202697754
    4. ' calcul' → logprob: -4.327256202697754
    5. 'la' → logprob: -4.577256202697754
    6. 'factor' → logprob: -5.077256202697754
    7. ' ' → logprob: -5.202256202697754
    8. ' trouver' → logprob: -5.827256202697754
    9. 'calcul' → logprob: -6.077256202697754
    10. 'l' → logprob: -6.327256202697754

Token 40: ',' (ID: 11)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.6348052620887756
    2. ' *' → logprob: -1.6348052024841309
    3. ',' → logprob: -2.134805202484131
    4. 'math' → logprob: -3.009805202484131
    5. ' =' → logprob: -3.259805202484131
    6. 'pi' → logprob: -4.134805202484131
    7. 'import' → logprob: -4.509805202484131
    8. '=' → logprob: -4.884805202484131
    9. ' ' → logprob: -4.884805202484131
    10. ')' → logprob: -5.634805202484131

Token 41: ' donc' (ID: 14206)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.07935138791799545
    2. 'math' → logprob: -2.7043514251708984
    3. ' ' → logprob: -6.204351425170898
    4. ' on' → logprob: -6.204351425170898
    5. ' donc' → logprob: -6.829351425170898
    6. 'pi' → logprob: -6.954351425170898
    7. ' pi' → logprob: -7.329351425170898
    8. 'import' → logprob: -7.704351425170898
    9. ' alors' → logprob: -8.579351425170898
    10. ' mais' → logprob: -8.579351425170898

Token 42: ' j' (ID: 441)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.005076141096651554
    2. 'math' → logprob: -5.505075931549072
    3. ' pi' → logprob: -7.505075931549072
    4. ' ' → logprob: -8.50507640838623
    5. ' import' → logprob: -9.63007640838623
    6. 'import' → logprob: -9.63007640838623
    7. 'pi' → logprob: -10.13007640838623
    8. ' print' → logprob: -11.13007640838623
    9. ' ' → logprob: -11.25507640838623
    10. ' `' → logprob: -11.50507640838623

Token 43: ''importe' (ID: 103032)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.850914716720581
    2. 'import' → logprob: -1.350914716720581
    3. ' import' → logprob: -2.725914716720581
    4. ''util' → logprob: -3.225914716720581
    5. ''import' → logprob: -3.225914716720581
    6. ''ai' → logprob: -3.350914716720581
    7. 'util' → logprob: -3.350914716720581
    8. 'uste' → logprob: -4.35091495513916
    9. '`' → logprob: -4.72591495513916
    10. ' =' → logprob: -4.97591495513916

Token 44: ' math' (ID: 13324)
  Prédit: ' math'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.001226062304340303
    2. 'math' → logprob: -7.12622594833374
    3. ' ' → logprob: -8.001226425170898
    4. ' ' → logprob: -9.876226425170898
    5. '(math' → logprob: -11.251226425170898
    6. ' pi' → logprob: -12.126226425170898
    7. ' la' → logprob: -12.751226425170898
    8. '```' → logprob: -13.001226425170898
    9. '_math' → logprob: -13.126226425170898
    10. ' import' → logprob: -13.626226425170898

Token 45: '
' (ID: 198)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.3872879147529602
    2. '.pi' → logprob: -1.1372878551483154
    3. '.sqrt' → logprob: -9.262288093566895
    4. '.PI' → logprob: -9.887288093566895
    5. 'import' → logprob: -10.137288093566895
    6. ',' → logprob: -10.387288093566895
    7. '.atan' → logprob: -10.762288093566895
    8. ' .' → logprob: -10.887288093566895
    9. 'pi' → logprob: -11.012288093566895
    10. '.pyplot' → logprob: -11.137288093566895

Token 46: 'per' (ID: 543)
  Prédit: 'pi'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pi' → logprob: -0.12442978471517563
    2. 'print' → logprob: -2.624429702758789
    3. '.pi' → logprob: -4.374429702758789
    4. 'angle' → logprob: -4.874429702758789
    5. '*pi' → logprob: -5.499429702758789
    6. ',' → logprob: -5.499429702758789
    7. '_pi' → logprob: -5.749429702758789
    8. '```' → logprob: -5.999429702758789
    9. 'import' → logprob: -6.374429702758789
    10. '.' → logprob: -6.499429702758789

Token 47: 'imet' (ID: 29890)
  Prédit: 'imeter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'imeter' → logprob: -0.13954050838947296
    2. 'imet' → logprob: -2.764540433883667
    3. 'im' → logprob: -3.139540433883667
    4. '```' → logprob: -4.889540672302246
    5. 'i' → logprob: -5.264540672302246
    6. 'imiter' → logprob: -5.264540672302246
    7. '1' → logprob: -6.389540672302246
    8. 'ime' → logprob: -6.764540672302246
    9. '#' → logprob: -6.764540672302246
    10. '=' → logprob: -7.889540672302246

Token 48: 're' (ID: 264)
  Prédit: 'ètre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ètre' → logprob: -0.41987988352775574
    2. 'etre' → logprob: -1.1698799133300781
    3. 'e' → logprob: -3.919879913330078
    4. 're' → logprob: -5.044879913330078
    5. 'er' → logprob: -6.294879913330078
    6. 'tre' → logprob: -6.794879913330078
    7. 'eter' → logprob: -6.794879913330078
    8. '`' → logprob: -7.419879913330078
    9. ' =' → logprob: -7.669879913330078
    10. '=' → logprob: -8.294879913330078

Token 49: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4857136309146881
    2. '(' → logprob: -1.6107136011123657
    3. '=' → logprob: -1.9857136011123657
    4. '_' → logprob: -3.1107137203216553
    5. ' ' → logprob: -6.610713481903076
    6. '_per' → logprob: -7.610713481903076
    7. '_pi' → logprob: -7.860713481903076
    8. ')' → logprob: -8.360713958740234
    9. '_p' → logprob: -9.360713958740234
    10. '_math' → logprob: -9.485713958740234

Token 50: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.20471645891666412
    2. '2' → logprob: -1.704716444015503
    3. ' nombre' → logprob: -6.329716682434082
    4. 'nombre' → logprob: -6.829716682434082
    5. ' math' → logprob: -7.954716682434082
    6. 'math' → logprob: -9.954716682434082
    7. ' nombres' → logprob: -11.204716682434082
    8. ' ' → logprob: -12.204716682434082
    9. '```' → logprob: -12.329716682434082
    10. '6' → logprob: -12.829716682434082

Token 51: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.003071829676628113
    2. 'nombre' → logprob: -6.2530717849731445
    3. ' ' → logprob: -6.8780717849731445
    4. 'math' → logprob: -9.253071784973145
    5. ' nombre' → logprob: -11.378071784973145
    6. '```' → logprob: -13.878071784973145
    7. 'n' → logprob: -14.253071784973145
    8. 'float' → logprob: -14.753071784973145
    9. '   ' → logprob: -15.003071784973145
    10. ' math' → logprob: -15.128071784973145

Token 52: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.023337488994002342
    2. '*' → logprob: -3.7733376026153564
    3. ' ' → logprob: -10.523337364196777
    4. '*pi' → logprob: -10.648337364196777
    5. '*Math' → logprob: -10.648337364196777
    6. ' ' → logprob: -11.398337364196777
    7. '*object' → logprob: -12.523337364196777
    8. ' math' → logprob: -13.898337364196777
    9. '.' → logprob: -14.523337364196777
    10. ' **' → logprob: -15.023337364196777

Token 53: ' math' (ID: 13324)
  Prédit: ' math'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.0019373197574168444
    2. 'math' → logprob: -6.251937389373779
    3. ' ' → logprob: -12.626936912536621
    4. ' pi' → logprob: -12.751936912536621
    5. ' ' → logprob: -13.501936912536621
    6. 'pi' → logprob: -15.126936912536621
    7. ' ma' → logprob: -15.501936912536621
    8. '(math' → logprob: -15.751936912536621
    9. ' m' → logprob: -16.126937866210938
    10. '.math' → logprob: -16.251937866210938

Token 54: '.pi' (ID: 55497)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.25198236107826233
    2. '.pi' → logprob: -1.50198233127594
    3. '.PI' → logprob: -10.251982688903809
    4. '.sqrt' → logprob: -12.251982688903809
    5. ' .' → logprob: -12.376982688903809
    6. '.p' → logprob: -13.251982688903809
    7. '.sin' → logprob: -13.376982688903809
    8. '.cos' → logprob: -13.626982688903809
    9. '.atan' → logprob: -13.876982688903809
    10. '.s' → logprob: -14.751982688903809

Token 55: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.03823874145746231
    2. '*' → logprob: -3.288238763809204
    3. ' ' → logprob: -9.038238525390625
    4. '<|end|>' → logprob: -9.913238525390625
    5. '*r' → logprob: -11.538238525390625
    6. '*object' → logprob: -12.663238525390625
    7. ' *
' → logprob: -12.788238525390625
    8. '*n' → logprob: -13.038238525390625
    9. ' ' → logprob: -13.538238525390625
    10. ' *

' → logprob: -14.163238525390625

Token 56: ' nombre' (ID: 9733)
  Prédit: 'nombre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'nombre' → logprob: -0.11297979950904846
    2. ' nombre' → logprob: -2.2379798889160156
    3. ' ' → logprob: -9.362979888916016
    4. 'r' → logprob: -10.112979888916016
    5. 'n' → logprob: -11.237979888916016
    6. '(nombre' → logprob: -12.112979888916016
    7. ' ' → logprob: -12.862979888916016
    8. '_nombre' → logprob: -13.112979888916016
    9. 'nom' → logprob: -13.237979888916016
    10. ' nomb' → logprob: -13.612979888916016

Token 57: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.34442031383514404
    2. '
' → logprob: -1.594420313835144
    3. '<|end|>' → logprob: -3.3444204330444336
    4. '*' → logprob: -4.094420433044434
    5. ' 
' → logprob: -4.344420433044434
    6. ' print' → logprob: -4.844420433044434
    7. ' ' → logprob: -5.594420433044434
    8. '  
' → logprob: -5.844420433044434
    9. '+' → logprob: -6.469420433044434
    10. ')' → logprob: -6.594420433044434

Token 58: ' je' (ID: 1264)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.3933669626712799
    2. ' print' → logprob: -1.7683669328689575
    3. ' ' → logprob: -2.018367052078247
    4. ' 
' → logprob: -4.643366813659668
    5. '<|end|>' → logprob: -6.393366813659668
    6. 'n' → logprob: -6.768366813659668
    7. '  
' → logprob: -7.143366813659668
    8. ')' → logprob: -7.143366813659668
    9. ' 

' → logprob: -7.518366813659668
    10. ' prin' → logprob: -7.643366813659668

Token 59: ' crois' (ID: 65485)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.0751451253890991
    2. ' vais' → logprob: -2.2001452445983887
    3. ' veux' → logprob: -2.2001452445983887
    4. ' pense' → logprob: -2.5751452445983887
    5. 's' → logprob: -2.7001452445983887
    6. ' continue' → logprob: -3.2001452445983887
    7. ' suis' → logprob: -3.2001452445983887
    8. '_' → logprob: -3.5751452445983887
    9. ' m' → logprob: -3.8251452445983887
    10. ' calc' → logprob: -4.075145244598389

Token 60: ' que' (ID: 661)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '*' → logprob: -0.2975696325302124
    2. '\n' → logprob: -2.297569751739502
    3. '\' → logprob: -2.797569751739502
    4. '<|end|>' → logprob: -3.297569751739502
    5. ' ' → logprob: -4.047569751739502
    6. '.' → logprob: -4.422569751739502
    7. '+' → logprob: -5.172569751739502
    8. '
' → logprob: -5.922569751739502
    9. '**' → logprob: -6.047569751739502
    10. ' 
' → logprob: -6.297569751739502

Token 61: ' c' (ID: 274)
  Prédit: ' nombre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.11919797956943512
    2. 'nombre' → logprob: -2.6191980838775635
    3. ' ' → logprob: -3.4941980838775635
    4. ' rayon' → logprob: -6.244197845458984
    5. ' le' → logprob: -6.744197845458984
    6. ' math' → logprob: -6.994197845458984
    7. ' j' → logprob: -7.619197845458984
    8. ' radius' → logprob: -7.744197845458984
    9. ' ' → logprob: -7.869197845458984
    10. ' number' → logprob: -7.869197845458984

Token 62: ''est' (ID: 6616)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.07202665507793427
    2. 'a' → logprob: -4.19702672958374
    3. ' '' → logprob: -4.19702672958374
    4. 'e' → logprob: -4.44702672958374
    5. ''a' → logprob: -4.44702672958374
    6. ''est' → logprob: -4.69702672958374
    7. ''é' → logprob: -6.19702672958374
    8. ''e' → logprob: -6.57202672958374
    9. ''#' → logprob: -6.57202672958374
    10. ''s' → logprob: -7.82202672958374

Token 63: ' comme' (ID: 7971)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' la' → logprob: -1.3099043369293213
    2. ' radius' → logprob: -1.5599043369293213
    3. ' le' → logprob: -2.0599043369293213
    4. 'radius' → logprob: -2.3099043369293213
    5. 'le' → logprob: -2.4349043369293213
    6. ' ' → logprob: -3.4349043369293213
    7. 'r' → logprob: -3.4349043369293213
    8. ' correct' → logprob: -3.5599043369293213
    9. 'ray' → logprob: -4.184904098510742
    10. ' rayon' → logprob: -4.184904098510742

Token 64: ' ça' (ID: 13590)
  Prédit: 'ça'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ça' → logprob: -0.34916791319847107
    2. ' ça' → logprob: -1.4741679430007935
    3. 'ç' → logprob: -3.099167823791504
    4. ' ç' → logprob: -4.474167823791504
    5. '```' → logprob: -6.474167823791504
    6. ' ca' → logprob: -6.599167823791504
    7. ' ' → logprob: -6.849167823791504
    8. 'cela' → logprob: -6.974167823791504
    9. 'r' → logprob: -7.099167823791504
    10. 'le' → logprob: -7.224167823791504

Token 65: ' la' (ID: 557)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 66: ' formule' (ID: 84316)
  Prédit: 'ray'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ray' → logprob: -0.6349902749061584
    2. 'suite' → logprob: -2.5099902153015137
    3. ' suite' → logprob: -2.6349902153015137
    4. 'radius' → logprob: -2.6349902153015137
    5. 'circ' → logprob: -2.8849902153015137
    6. '.' → logprob: -3.5099902153015137
    7. ' rayon' → logprob: -3.8849902153015137
    8. ' ' → logprob: -4.009990215301514
    9. 'r' → logprob: -4.134990215301514
    10. 'per' → logprob: -4.384990215301514

Token 67: ' du' (ID: 1462)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5973544120788574
    2. '*' → logprob: -1.7223544120788574
    3. '\n' → logprob: -2.0973544120788574
    4. '.' → logprob: -3.2223544120788574
    5. '\' → logprob: -3.4723544120788574
    6. '#' → logprob: -3.9723544120788574
    7. '
' → logprob: -4.722354412078857
    8. 'n' → logprob: -4.972354412078857
    9. ' 
' → logprob: -5.347354412078857
    10. '+' → logprob: -5.472354412078857

Token 68: ' cercle' (ID: 172399)
  Prédit: ' cercle'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cercle' → logprob: -0.1423708200454712
    2. ' ' → logprob: -2.7673707008361816
    3. 'c' → logprob: -3.2673707008361816
    4. ' pér' → logprob: -4.892370700836182
    5. ' rayon' → logprob: -5.267370700836182
    6. ' cer' → logprob: -5.267370700836182
    7. ' c' → logprob: -5.392370700836182
    8. 'r' → logprob: -6.267370700836182
    9. ' r' → logprob: -6.267370700836182
    10. ' circle' → logprob: -6.642370700836182

Token 69: '

' (ID: 279)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.05222364142537117
    2. '*' → logprob: -4.3022236824035645
    3. ' print' → logprob: -4.6772236824035645
    4. '.' → logprob: -5.0522236824035645
    5. '
' → logprob: -5.3022236824035645
    6. ' 
' → logprob: -5.5522236824035645
    7. '\n' → logprob: -5.9272236824035645
    8. 'r' → logprob: -6.4272236824035645
    9. '\' → logprob: -6.5522236824035645
    10. '#' → logprob: -6.6772236824035645

Token 70: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.01392701268196106
    2. 'r' → logprob: -5.013926982879639
    3. 'ray' → logprob: -5.513926982879639
    4. '*' → logprob: -7.388926982879639
    5. 'p' → logprob: -7.388926982879639
    6. '\n' → logprob: -7.388926982879639
    7. 'radius' → logprob: -8.013927459716797
    8. '#' → logprob: -8.888927459716797
    9. 'area' → logprob: -8.888927459716797
    10. ' print' → logprob: -9.138927459716797

Token 71: '(per' (ID: 96497)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00019138160860165954
    2. '("("' → logprob: -9.500191688537598
    3. '(per' → logprob: -9.750191688537598
    4. '('' → logprob: -10.875191688537598
    5. ' (' → logprob: -11.250191688537598
    6. '()' → logprob: -12.125191688537598
    7. '(math' → logprob: -12.625191688537598
    8. ' ' → logprob: -12.875191688537598
    9. '(paren' → logprob: -12.875191688537598
    10. '(parent' → logprob: -13.250191688537598

Token 72: 'imet' (ID: 29890)
  Prédit: 'imet'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'imet' → logprob: -0.14845716953277588
    2. 'etre' → logprob: -2.0234570503234863
    3. 'im' → logprob: -5.273457050323486
    4. 'itre' → logprob: -8.398457527160645
    5. 'met' → logprob: -8.898457527160645
    6. 'et' → logprob: -9.148457527160645
    7. 'emet' → logprob: -9.523457527160645
    8. 'ime' → logprob: -10.023457527160645
    9. ')' → logprob: -12.023457527160645
    10. '#' → logprob: -12.273457527160645

Token 73: 're' (ID: 264)
  Prédit: 'etre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'etre' → logprob: -0.23040170967578888
    2. 're' → logprob: -1.7304017543792725
    3. 'e' → logprob: -3.7304017543792725
    4. 'tre' → logprob: -5.605401515960693
    5. 'ètre' → logprob: -7.230401515960693
    6. 'ere' → logprob: -9.230401992797852
    7. 'er' → logprob: -10.855401992797852
    8. 'è' → logprob: -10.855401992797852
    9. '`' → logprob: -11.230401992797852
    10. 'et' → logprob: -11.855401992797852

Token 74: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.896309739408025e-07
    2. ' )' → logprob: -14.875000953674316
    3. '))' → logprob: -15.125000953674316
    4. ')`' → logprob: -17.375
    5. ')
' → logprob: -18.25
    6. '')' → logprob: -18.375
    7. ')**' → logprob: -18.5
    8. ')}' → logprob: -18.75
    9. '`)' → logprob: -19.125
    10. '+' → logprob: -19.375

Token 75: '#' (ID: 2)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.6507247090339661
    2. '<|end|>' → logprob: -0.9007247090339661
    3. ')' → logprob: -3.2757246494293213
    4. '
' → logprob: -4.5257248878479
    5. '```' → logprob: -4.6507248878479
    6. '\' → logprob: -5.6507248878479
    7. '<|end|>' → logprob: -6.0257248878479
    8. ' ' → logprob: -6.1507248878479
    9. '#' → logprob: -6.1507248878479
    10. 'newline' → logprob: -6.9007248878479

Token 76: ' c' (ID: 274)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 77: ''est' (ID: 6616)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.06596711277961731
    2. 'o' → logprob: -2.940967082977295
    3. 'e' → logprob: -5.690967082977295
    4. 'r' → logprob: -6.815967082977295
    5. 'a' → logprob: -6.940967082977295
    6. 'i' → logprob: -7.065967082977295
    7. 'al' → logprob: -7.190967082977295
    8. 'ont' → logprob: -7.315967082977295
    9. 'u' → logprob: -7.815967082977295
    10. 'ode' → logprob: -7.815967082977295

Token 78: ' cens' (ID: 55288)
  Prédit: 'tout'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tout' → logprob: -0.493732750415802
    2. ' tout' → logprob: -0.993732750415802
    3. ' fini' → logprob: -4.368732929229736
    4. ' bon' → logprob: -6.493732929229736
    5. ' la' → logprob: -7.368732929229736
    6. 'f' → logprob: -7.618732929229736
    7. 'bon' → logprob: -7.743732929229736
    8. 'le' → logprob: -7.868732929229736
    9. 'l' → logprob: -7.993732929229736
    10. ' terminé' → logprob: -8.118732452392578

Token 79: 'é' (ID: 377)
  Prédit: 'é'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'é' → logprob: -2.856408536899835e-05
    2. 'ée' → logprob: -11.125028610229492
    3. 'e' → logprob: -11.625028610229492
    4. '#' → logprob: -13.000028610229492
    5. 'ément' → logprob: -13.375028610229492
    6. '```' → logprob: -15.125028610229492
    7. 'és' → logprob: -15.500028610229492
    8. 'ed' → logprob: -16.250028610229492
    9. 'è' → logprob: -16.250028610229492
    10. '�' → logprob: -16.750028610229492

Token 80: ' afficher' (ID: 146524)
  Prédit: 'être'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'être' → logprob: -0.4652771055698395
    2. ' être' → logprob: -1.965277075767517
    3. ' fonctionner' → logprob: -2.3402771949768066
    4. 'print' → logprob: -3.9652771949768066
    5. ' afficher' → logprob: -4.090277194976807
    6. 's' → logprob: -4.340277194976807
    7. ' ' → logprob: -4.715277194976807
    8. 'faire' → logprob: -4.840277194976807
    9. 'fonction' → logprob: -4.965277194976807
    10. 'aff' → logprob: -5.215277194976807

Token 81: ' le' (ID: 505)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.20775529742240906
    2. ' \' → logprob: -2.4577553272247314
    3. '"\' → logprob: -3.7077553272247314
    4. '\' → logprob: -3.8327553272247314
    5. ''\' → logprob: -3.9577553272247314
    6. ' ' → logprob: -4.707755088806152
    7. '.' → logprob: -4.957755088806152
    8. ''' → logprob: -6.082755088806152
    9. '*' → logprob: -6.332755088806152
    10. '\u' → logprob: -6.332755088806152

Token 82: ' résultat' (ID: 62556)
  Prédit: ' pér'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' pér' → logprob: -0.7950131893157959
    2. ' ' → logprob: -1.670013189315796
    3. ' p' → logprob: -1.920013189315796
    4. ' per' → logprob: -2.545013189315796
    5. ' diamètre' → logprob: -3.045013189315796
    6. ' rayon' → logprob: -3.420013189315796
    7. ' ' → logprob: -4.295013427734375
    8. ' cercle' → logprob: -4.420013427734375
    9. ' perí' → logprob: -5.920013427734375
    10. ' perimeter' → logprob: -6.045013427734375

Token 83: ',' (ID: 11)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.5090776681900024
    2. '<|end|>' → logprob: -1.2590776681900024
    3. '
' → logprob: -2.384077548980713
    4. '```' → logprob: -4.884077548980713
    5. ' ' → logprob: -5.134077548980713
    6. 'newline' → logprob: -5.634077548980713
    7. '' → logprob: -6.884077548980713
    8. '<|end|>' → logprob: -6.884077548980713
    9. ')' → logprob: -7.134077548980713
    10. '\' → logprob: -7.509077548980713

Token 84: ' mais' (ID: 2899)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.02516147680580616
    2. '<|end|>' → logprob: -4.150161266326904
    3. '```' → logprob: -5.025161266326904
    4. '\' → logprob: -7.025161266326904
    5. '
' → logprob: -7.400161266326904
    6. 'newline' → logprob: -8.025161743164062
    7. '<|end|>' → logprob: -9.025161743164062
    8. ' ' → logprob: -9.400161743164062
    9. ')' → logprob: -9.650161743164062
    10. '``' → logprob: -9.650161743164062

Token 85: ' je' (ID: 1264)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.0735626295208931
    2. ' ' → logprob: -3.6985626220703125
    3. '\' → logprob: -3.9485626220703125
    4. ' \' → logprob: -4.9485626220703125
    5. '```' → logprob: -5.3235626220703125
    6. ' rien' → logprob: -5.4485626220703125
    7. '<|end|>' → logprob: -7.3235626220703125
    8. 'n' → logprob: -7.4485626220703125
    9. ''' → logprob: -7.4485626220703125
    10. ')' → logprob: -7.4485626220703125

Token 86: ' laisse' (ID: 66691)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4820254445075989
    2. ' n' → logprob: -2.107025384902954
    3. 'n' → logprob: -2.357025384902954
    4. 's' → logprob: -2.857025384902954
    5. ' pense' → logprob: -3.732025384902954
    6. '.' → logprob: -3.857025384902954
    7. ''' → logprob: -4.607025623321533
    8. '#' → logprob: -4.732025623321533
    9. ' #' → logprob: -4.857025623321533
    10. ' t' → logprob: -5.107025623321533

Token 87: ' la' (ID: 557)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.06965772807598114
    2. ' un' → logprob: -4.194657802581787
    3. '<|end|>' → logprob: -4.194657802581787
    4. '  ' → logprob: -5.069657802581787
    5. ' 
' → logprob: -5.069657802581787
    6. '  
' → logprob: -5.194657802581787
    7. ' ' → logprob: -5.819657802581787
    8. '\n' → logprob: -5.944657802581787
    9. '   
' → logprob: -6.319657802581787
    10. ' 

' → logprob: -6.319657802581787

Token 88: ' précision' (ID: 130591)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.3224213421344757
    2. 'n' → logprob: -1.5724213123321533
    3. '
' → logprob: -3.4474213123321533
    4. ' ' → logprob: -4.697421550750732
    5. 'newline' → logprob: -5.197421550750732
    6. 'r' → logprob: -5.447421550750732
    7. '  
' → logprob: -5.447421550750732
    8. ' 
' → logprob: -5.822421550750732
    9. '#' → logprob: -6.072421550750732
    10. ' 

' → logprob: -6.447421550750732

Token 89: ' par' (ID: 686)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3568304479122162
    2. '.' → logprob: -1.2318304777145386
    3. '<|end|>' → logprob: -6.356830596923828
    4. 'e' → logprob: -6.606830596923828
    5. ')' → logprob: -6.856830596923828
    6. ',' → logprob: -7.856830596923828
    7. '<|end|>' → logprob: -7.981830596923828
    8. ' .' → logprob: -7.981830596923828
    9. '  ' → logprob: -8.106830596923828
    10. ' à' → logprob: -8.231830596923828

Token 90: ' défaut' (ID: 79375)
  Prédit: 'dé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dé' → logprob: -0.4292091131210327
    2. ' défaut' → logprob: -1.3042091131210327
    3. 'default' → logprob: -3.3042092323303223
    4. 'd' → logprob: -3.9292092323303223
    5. 'def' → logprob: -4.179209232330322
    6. 'fait' → logprob: -6.429209232330322
    7. ' default' → logprob: -7.304209232330322
    8. 'faite' → logprob: -7.554209232330322
    9. '#' → logprob: -7.679209232330322
    10. 'fois' → logprob: -7.804209232330322


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 88
Tokens correctement prédits (1ère position, stricte): 18
Tokens correctement prédits (1ère position, avec adaptation): 18
Tokens correctement prédits (top 10): 47
Précision stricte (1ère position): 20.45%
Précision adaptée (1ère position): 20.45%
Précision (top 10): 53.41%
================================================================================
