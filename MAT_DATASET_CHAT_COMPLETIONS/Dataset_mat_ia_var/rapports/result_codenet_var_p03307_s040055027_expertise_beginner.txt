================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:14:27
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())

if n % 2 == 0:
    print(n)
else:
    print(n * 2)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00042768914136104286
    2. ''' → logprob: -8.62542724609375
    3. '('' → logprob: -9.37542724609375
    4. '(n' → logprob: -9.87542724609375
    5. '```' → logprob: -10.37542724609375
    6. '`' → logprob: -10.75042724609375
    7. '("("' → logprob: -11.12542724609375
    8. '(
' → logprob: -11.12542724609375
    9. ')' → logprob: -11.75042724609375
    10. '()' → logprob: -12.25042724609375

Token 4: '())

' (ID: 27654)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.11869344860315323
    2. ')' → logprob: -2.2436933517456055
    3. '()' → logprob: -5.3686933517456055
    4. '())' → logprob: -7.4936933517456055
    5. '(
' → logprob: -8.243693351745605
    6. '```' → logprob: -9.993693351745605
    7. '(

' → logprob: -10.368693351745605
    8. '('' → logprob: -10.493693351745605
    9. ''' → logprob: -10.618693351745605
    10. '(n' → logprob: -10.868693351745605

Token 5: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.21269886195659637
    2. 'for' → logprob: -2.2126989364624023
    3. 'i' → logprob: -2.5876989364624023
    4. 's' → logprob: -5.337698936462402
    5. 'f' → logprob: -7.337698936462402
    6. ' if' → logprob: -7.962698936462402
    7. 'x' → logprob: -8.337698936462402
    8. '#' → logprob: -9.087698936462402
    9. '*' → logprob: -9.337698936462402
    10. '`' → logprob: -9.462698936462402

Token 6: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.5241800546646118
    2. ' ' → logprob: -0.8991800546646118
    3. 'n' → logprob: -7.024179935455322
    4. '  ' → logprob: -9.02418041229248
    5. ''' → logprob: -11.64918041229248
    6. ' (' → logprob: -11.89918041229248
    7. ' '' → logprob: -12.14918041229248
    8. ' )' → logprob: -12.39918041229248
    9. ' not' → logprob: -12.77418041229248
    10. ' "' → logprob: -12.77418041229248

Token 7: ' %' (ID: 1851)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.057852182537317276
    2. ' ' → logprob: -3.932852268218994
    3. '>' → logprob: -4.057852268218994
    4. ' <' → logprob: -4.432852268218994
    5. ' %' → logprob: -6.182852268218994
    6. ' ==' → logprob: -6.307852268218994
    7. ' >=' → logprob: -6.432852268218994
    8. '%' → logprob: -7.932852268218994
    9. '  ' → logprob: -7.932852268218994
    10. ' <=' → logprob: -8.182851791381836

Token 8: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.47418609261512756
    2. '2' → logprob: -0.9741860628128052
    3. '4' → logprob: -9.849185943603516
    4. '32' → logprob: -10.974185943603516
    5. '3' → logprob: -11.974185943603516
    6. ')' → logprob: -12.099185943603516
    7. '```' → logprob: -12.099185943603516
    8. '==' → logprob: -12.599185943603516
    9. '1' → logprob: -12.724185943603516
    10. '=' → logprob: -12.724185943603516

Token 9: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0008879951201379299
    2. '3' → logprob: -7.250887870788574
    3. ' ' → logprob: -9.250887870788574
    4. '4' → logprob: -10.500887870788574
    5. '5' → logprob: -10.750887870788574
    6. '1' → logprob: -11.000887870788574
    7. '10' → logprob: -11.250887870788574
    8. '7' → logprob: -13.250887870788574
    9. '```' → logprob: -14.500887870788574
    10. '6' → logprob: -15.125887870788574

Token 10: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.20156730711460114
    2. ' !=' → logprob: -1.82656729221344
    3. '==' → logprob: -4.07656717300415
    4. ' ' → logprob: -5.95156717300415
    5. '!=' → logprob: -6.57656717300415
    6. ')' → logprob: -8.451567649841309
    7. '=' → logprob: -8.826567649841309
    8. ' =' → logprob: -9.076567649841309
    9. ':' → logprob: -9.326567649841309
    10. '!' → logprob: -11.576567649841309

Token 11: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.04859350249171257
    2. '0' → logprob: -3.048593521118164
    3. '1' → logprob: -12.298593521118164
    4. '2' → logprob: -14.048593521118164
    5. ' ' → logprob: -14.423593521118164
    6. ''' → logprob: -17.048593521118164
    7. ')' → logprob: -17.298593521118164
    8. '"' → logprob: -17.423593521118164
    9. '```' → logprob: -17.423593521118164
    10. '3' → logprob: -17.548593521118164

Token 12: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.20144638419151306
    2. ' ' → logprob: -1.7014464139938354
    3. '1' → logprob: -10.326446533203125
    4. '2' → logprob: -15.576446533203125
    5. '```' → logprob: -17.076446533203125
    6. ' ' → logprob: -17.326446533203125
    7. '  ' → logprob: -18.076446533203125
    8. '3' → logprob: -18.076446533203125
    9. '4' → logprob: -18.201446533203125
    10. ''' → logprob: -18.638946533203125

Token 13: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -7.703443770878948e-06
    2. ' :' → logprob: -12.750007629394531
    3. ':**' → logprob: -12.750007629394531
    4. '):' → logprob: -14.500007629394531
    5. '':'' → logprob: -14.875007629394531
    6. '':' → logprob: -15.125007629394531
    7. '>:' → logprob: -15.375007629394531
    8. ':
' → logprob: -16.12500762939453
    9. '":"' → logprob: -16.37500762939453
    10. '":' → logprob: -17.00000762939453

Token 14: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05941411107778549
    2. '\n' → logprob: -3.4344141483306885
    3. ' print' → logprob: -4.684413909912109
    4. '\' → logprob: -5.309413909912109
    5. 'print' → logprob: -5.309413909912109
    6. '    ' → logprob: -5.809413909912109
    7. '    
' → logprob: -6.184413909912109
    8. ' ' → logprob: -7.934413909912109
    9. ''' → logprob: -8.18441390991211
    10. '"' → logprob: -9.30941390991211

Token 15: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.058372609317302704
    2. 'print' (adapté à ' print') → logprob: -2.9333724975585938
    3. '   ' → logprob: -5.683372497558594
    4. '    ' → logprob: -10.933372497558594
    5. '\n' → logprob: -10.933372497558594
    6. ' \' → logprob: -11.058372497558594
    7. ' ' → logprob: -12.058372497558594
    8. '```' → logprob: -12.058372497558594
    9. '\' → logprob: -12.308372497558594
    10. ''' → logprob: -12.683372497558594

Token 16: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.011039459146559238
    2. '("' → logprob: -4.8860392570495605
    3. '("("' → logprob: -6.2610392570495605
    4. '('' → logprob: -6.5110392570495605
    5. '("")' → logprob: -11.511039733886719
    6. '()' → logprob: -12.261039733886719
    7. '"' → logprob: -12.261039733886719
    8. '("(' → logprob: -12.761039733886719
    9. '(n' → logprob: -13.011039733886719
    10. '("""' → logprob: -13.261039733886719

Token 17: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00021951000962872058
    2. '*' → logprob: -8.875219345092773
    3. '+' → logprob: -9.875219345092773
    4. '))' → logprob: -11.750219345092773
    5. ' )' → logprob: -12.250219345092773
    6. '**' → logprob: -12.500219345092773
    7. ')
' → logprob: -12.875219345092773
    8. '")' → logprob: -13.500219345092773
    9. '')' → logprob: -13.625219345092773
    10. ' ' → logprob: -14.000219345092773

Token 18: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.02807169407606125
    2. ' else' → logprob: -3.653071641921997
    3. ')' → logprob: -7.653071880340576
    4. '```' → logprob: -7.653071880340576
    5. 'elif' → logprob: -8.153071403503418
    6. ' ' → logprob: -8.778071403503418
    7. '<|end|>' → logprob: -9.278071403503418
    8. 'e' → logprob: -9.778071403503418
    9. ':' → logprob: -10.403071403503418
    10. '   ' → logprob: -10.403071403503418

Token 19: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.8670179997570813e-05
    2. ' :' → logprob: -11.750019073486328
    3. ':
' → logprob: -12.625019073486328
    4. '   ' → logprob: -12.750019073486328
    5. '):' → logprob: -13.000019073486328
    6. '():' → logprob: -13.625019073486328
    7. ':**' → logprob: -15.000019073486328
    8. '':' → logprob: -15.750019073486328
    9. '":' → logprob: -15.875019073486328
    10. '>:' → logprob: -16.000019073486328

Token 20: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.017172103747725487
    2. '    ' → logprob: -4.642172336578369
    3. ' print' → logprob: -6.392172336578369
    4. 'print' → logprob: -6.642172336578369
    5. ' n' → logprob: -7.017172336578369
    6. '"' → logprob: -7.142172336578369
    7. '    
' → logprob: -7.267172336578369
    8. ''' → logprob: -7.767172336578369
    9. '(n' → logprob: -7.767172336578369
    10. '```' → logprob: -8.267171859741211

Token 21: ' print' (ID: 2123)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.6164546012878418
    2. 'print' (adapté à ' print') → logprob: -1.3664546012878418
    3. ' print' → logprob: -1.9914546012878418
    4. 'n' → logprob: -3.366454601287842
    5. '(n' → logprob: -4.116454601287842
    6. '   ' → logprob: -4.491454601287842
    7. '    ' → logprob: -5.366454601287842
    8. ' ' → logprob: -6.991454601287842
    9. '\n' → logprob: -8.116455078125
    10. '0' → logprob: -8.366455078125

Token 22: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.16037806868553162
    2. '(n' → logprob: -1.910378098487854
    3. '()' → logprob: -9.160378456115723
    4. '('' → logprob: -10.410378456115723
    5. '((' → logprob: -11.785378456115723
    6. ' (' → logprob: -12.910378456115723
    7. '("' → logprob: -13.160378456115723
    8. '(abs' → logprob: -13.785378456115723
    9. '(`' → logprob: -13.785378456115723
    10. '(-' → logprob: -14.285378456115723

Token 23: ' *' (ID: 425)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.19052742421627045
    2. ' +' → logprob: -1.8155274391174316
    3. ')' → logprob: -4.690527439117432
    4. '-' → logprob: -6.690527439117432
    5. ' -' → logprob: -8.690526962280273
    6. ' )' → logprob: -10.315526962280273
    7. '+)' → logprob: -10.440526962280273
    8. ' ' → logprob: -10.690526962280273
    9. '))' → logprob: -11.315526962280273
    10. '   ' → logprob: -11.440526962280273

Token 24: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.19314321875572205
    2. '2' → logprob: -1.8181432485580444
    3. ' ' → logprob: -4.443143367767334
    4. 'n' → logprob: -6.568143367767334
    5. ' n' → logprob: -9.193142890930176
    6. '5' → logprob: -11.318142890930176
    7. '1' → logprob: -11.818142890930176
    8. ')' → logprob: -11.943142890930176
    9. '   ' → logprob: -12.193142890930176
    10. ')n' → logprob: -12.818142890930176

Token 25: '2' (ID: 17)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.024575412273406982
    2. '2' → logprob: -3.8995754718780518
    3. 'n' → logprob: -5.524575233459473
    4. ' ' → logprob: -10.649575233459473
    5. '5' → logprob: -12.774575233459473
    6. '1' → logprob: -12.899575233459473
    7. ' n' → logprob: -13.024575233459473
    8. '-' → logprob: -13.524575233459473
    9. '9' → logprob: -13.774575233459473
    10. ')n' → logprob: -13.774575233459473

Token 26: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0280383548888494e-06
    2. ' )' → logprob: -14.875000953674316
    3. '))' → logprob: -15.375000953674316
    4. ')
' → logprob: -16.000001907348633
    5. '')' → logprob: -16.375001907348633
    6. '`)' → logprob: -16.375001907348633
    7. '*' → logprob: -16.875001907348633
    8. ')`' → logprob: -17.250001907348633
    9. '   ' → logprob: -18.000001907348633
    10. '```' → logprob: -18.625001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 24
Tokens correctement prédits (1ère position, stricte): 12
Tokens correctement prédits (1ère position, avec adaptation): 12
Tokens correctement prédits (top 10): 21
Précision stricte (1ère position): 50.00%
Précision adaptée (1ère position): 50.00%
Précision (top 10): 87.50%
================================================================================
