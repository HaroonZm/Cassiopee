================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:00:08
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from sys import stdin

def calcul_tarif(age: int, prix: int) -> int:
    return prix if age >= 13 else prix // 2 if age >= 6 else 0

if __name__ == "__main__":
    age, prix = map(int, stdin.readline().split())
    print(calcul_tarif(age, prix))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' stdin' (ID: 75143)
  Prédit: 'argv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'argv' → logprob: -0.05142802372574806
    2. ' argv' → logprob: -3.4264280796051025
    3. 'exit' → logprob: -4.176427841186523
    4. ' exit' → logprob: -6.801427841186523
    5. 'stdout' → logprob: -7.301427841186523
    6. 'stdin' → logprob: -8.426427841186523
    7. 'path' → logprob: -8.801427841186523
    8. 'import' → logprob: -10.176427841186523
    9. 'stderr' → logprob: -10.426427841186523
    10. 'version' → logprob: -10.676427841186523

Token 4: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0006454797694459558
    2. '.readline' → logprob: -8.250645637512207
    3. '\n' → logprob: -8.500645637512207
    4. '.
' → logprob: -10.125645637512207
    5. 'import' → logprob: -10.250645637512207
    6. '\' → logprob: -10.375645637512207
    7. '```' → logprob: -10.875645637512207
    8. '.read' → logprob: -10.875645637512207
    9. '' → logprob: -12.000645637512207
    10. ',' → logprob: -12.125645637512207

Token 5: 'def' (ID: 1314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0316447988152504
    2. '.readline' → logprob: -3.781644821166992
    3. '.read' → logprob: -6.031644821166992
    4. '\n' → logprob: -6.781644821166992
    5. 'for' → logprob: -6.781644821166992
    6. 'print' → logprob: -7.156644821166992
    7. 'import' → logprob: -7.406644821166992
    8. ',' → logprob: -7.531644821166992
    9. '
' → logprob: -7.781644821166992
    10. '```' → logprob: -8.156644821166992

Token 6: ' calcul' (ID: 7559)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.52972811460495
    2. ' read' → logprob: -1.4047281742095947
    3. ' process' → logprob: -2.0297281742095947
    4. ' parse' → logprob: -4.779727935791016
    5. ' space' → logprob: -4.779727935791016
    6. ' main' → logprob: -5.904727935791016
    7. ' readline' → logprob: -5.904727935791016
    8. ' ' → logprob: -6.654727935791016
    9. '_read' → logprob: -7.029727935791016
    10. 'read' → logprob: -7.154727935791016

Token 7: '_tar' (ID: 168378)
  Prédit: 'ate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ate' → logprob: -0.00013727048644796014
    2. 'ator' → logprob: -9.375137329101562
    3. 'ation' → logprob: -10.375137329101562
    4. 'a' → logprob: -12.000137329101562
    5. 'ATE' → logprob: -12.500137329101562
    6. 'at' → logprob: -12.625137329101562
    7. ' ate' → logprob: -13.000137329101562
    8. '```' → logprob: -13.250137329101562
    9. 'ating' → logprob: -13.500137329101562
    10. 'ateur' → logprob: -14.375137329101562

Token 8: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.011929559521377087
    2. 'i' → logprob: -4.636929512023926
    3. ' if' → logprob: -7.011929512023926
    4. 'iff' → logprob: -7.011929512023926
    5. '_' → logprob: -9.011929512023926
    6. '```' → logprob: -10.011929512023926
    7. '_if' → logprob: -10.136929512023926
    8. 'ifs' → logprob: -10.386929512023926
    9. 'iffe' → logprob: -11.136929512023926
    10. '   ' → logprob: -11.386929512023926

Token 9: '(age' (ID: 130744)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.013017630204558372
    2. '():' → logprob: -5.388017654418945
    3. 's' → logprob: -5.888017654418945
    4. '):' → logprob: -6.138017654418945
    5. ':' → logprob: -6.763017654418945
    6. '_' → logprob: -6.763017654418945
    7. ' (' → logprob: -8.263017654418945
    8. '(s' → logprob: -8.763017654418945
    9. ')' → logprob: -9.888017654418945
    10. 'ation' → logprob: -9.888017654418945

Token 10: ':' (ID: 25)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.014979537576436996
    2. ',' → logprob: -4.889979362487793
    3. ')' → logprob: -5.014979362487793
    4. ':' → logprob: -7.389979362487793
    5. '_' → logprob: -10.389979362487793
    6. '=' → logprob: -10.514979362487793
    7. ' ):' → logprob: -12.014979362487793
    8. '   ' → logprob: -12.514979362487793
    9. '):
' → logprob: -12.639979362487793
    10. ' ' → logprob: -13.264979362487793

Token 11: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.07010004669427872
    2. 'int' → logprob: -2.6951000690460205
    3. ')' → logprob: -9.320099830627441
    4. ' ' → logprob: -10.070099830627441
    5. ' )' → logprob: -10.570099830627441
    6. ':int' → logprob: -12.945099830627441
    7. '=int' → logprob: -13.820099830627441
    8. '  ' → logprob: -15.320099830627441
    9. '	int' → logprob: -15.320099830627441
    10. ' in' → logprob: -15.445099830627441

Token 12: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.07493101805448532
    2. ',' → logprob: -2.6999309062957764
    3. '):' → logprob: -5.4499311447143555
    4. ')->' → logprob: -7.3249311447143555
    5. ' )' → logprob: -12.574931144714355
    6. '->' → logprob: -12.824931144714355
    7. ' ,' → logprob: -12.949931144714355
    8. ':' → logprob: -12.949931144714355
    9. '=' → logprob: -13.324931144714355
    10. ')>' → logprob: -13.324931144714355

Token 13: ' prix' (ID: 18771)
  Prédit: ' tarif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tarif' → logprob: -0.40570783615112305
    2. ' prix' → logprob: -3.030707836151123
    3. 'tar' → logprob: -3.030707836151123
    4. ' jour' → logprob: -3.280707836151123
    5. ' tarifs' → logprob: -3.280707836151123
    6. ' dure' → logprob: -3.530707836151123
    7. ' poids' → logprob: -4.655707836151123
    8. ' sexe' → logprob: -4.655707836151123
    9. 'jour' → logprob: -4.905707836151123
    10. ')' → logprob: -4.905707836151123

Token 14: ':' (ID: 25)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.4868307113647461
    2. '_base' → logprob: -1.111830711364746
    3. ':' → logprob: -3.736830711364746
    4. '_unit' → logprob: -4.236830711364746
    5. ' ):' → logprob: -5.111830711364746
    6. '_' → logprob: -5.486830711364746
    7. ')' → logprob: -5.861830711364746
    8. ',' → logprob: -6.486830711364746
    9. '_un' → logprob: -7.111830711364746
    10. 'base' → logprob: -7.236830711364746

Token 15: ' int' (ID: 677)
  Prédit: ' )'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' )' → logprob: -1.1201602220535278
    2. ' int' → logprob: -1.6201602220535278
    3. ' float' → logprob: -1.7451602220535278
    4. 'int' → logprob: -1.9951602220535278
    5. 'float' → logprob: -3.1201601028442383
    6. ')' → logprob: -3.4951601028442383
    7. ' ' → logprob: -3.8701601028442383
    8. ' ):' → logprob: -3.9951601028442383
    9. 'unit' → logprob: -4.370160102844238
    10. ' unit' → logprob: -4.995160102844238

Token 16: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.043682727962732315
    2. '):' → logprob: -3.168682813644409
    3. ',' → logprob: -7.66868257522583
    4. ')->' → logprob: -8.543683052062988
    5. ':' → logprob: -11.918683052062988
    6. '->' → logprob: -13.043683052062988
    7. '):
' → logprob: -13.168683052062988
    8. '   ' → logprob: -13.293683052062988
    9. ' )' → logprob: -13.418683052062988
    10. '=' → logprob: -13.668683052062988

Token 17: ' ->' (ID: 2747)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0002015139180002734
    2. '):' → logprob: -9.000201225280762
    3. ' :' → logprob: -10.500201225280762
    4. ':return' → logprob: -10.500201225280762
    5. ':**' → logprob: -11.625201225280762
    6. ':def' → logprob: -12.875201225280762
    7. '':' → logprob: -12.875201225280762
    8. '():' → logprob: -13.500201225280762
    9. ':void' → logprob: -13.625201225280762
    10. '>:' → logprob: -13.875201225280762

Token 18: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.0899389311671257
    2. 'int' → logprob: -2.4649388790130615
    3. ' float' → logprob: -7.339939117431641
    4. ' str' → logprob: -8.08993911743164
    5. 'float' → logprob: -10.46493911743164
    6. ' None' → logprob: -12.21493911743164
    7. 'str' → logprob: -12.21493911743164
    8. ' ' → logprob: -13.21493911743164
    9. ' ' → logprob: -13.46493911743164
    10. ' bool' → logprob: -14.46493911743164

Token 19: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -2.975612187583465e-05
    2. ':return' → logprob: -11.125029563903809
    3. '):' → logprob: -11.625029563903809
    4. ':**' → logprob: -13.000029563903809
    5. ' :' → logprob: -14.250029563903809
    6. ':def' → logprob: -14.375029563903809
    7. '':' → logprob: -14.500029563903809
    8. '():' → logprob: -14.500029563903809
    9. ':
' → logprob: -14.750029563903809
    10. '   ' → logprob: -15.000029563903809

Token 20: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5300804376602173
    2. ':' → logprob: -0.9050804376602173
    3. '    
' → logprob: -6.780080318450928
    4. ':
' → logprob: -6.905080318450928
    5. ' ' → logprob: -7.030080318450928
    6. '    ' → logprob: -7.655080318450928
    7. '
' → logprob: -7.655080318450928
    8. ' :' → logprob: -7.905080318450928
    9. '```' → logprob: -7.905080318450928
    10. '  
' → logprob: -8.405080795288086

Token 21: ' return' (ID: 622)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6229730844497681
    2. '   ' → logprob: -1.122973084449768
    3. ' 
' → logprob: -2.7479729652404785
    4. '    ' → logprob: -3.4979729652404785
    5. ' if' → logprob: -3.8729729652404785
    6. '    
' → logprob: -5.6229729652404785
    7. '<|end|>' → logprob: -5.7479729652404785
    8. 'if' → logprob: -6.2479729652404785
    9. '     
' → logprob: -6.4979729652404785
    10. '  ' → logprob: -6.4979729652404785

Token 22: ' prix' (ID: 18771)
  Prédit: ' prix'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' prix' → logprob: -0.6451350450515747
    2. ' ' → logprob: -0.8951350450515747
    3. ' max' → logprob: -3.520134925842285
    4. 'prix' → logprob: -4.145134925842285
    5. ' age' → logprob: -4.520134925842285
    6. '0' → logprob: -5.270134925842285
    7. ' (' → logprob: -5.770134925842285
    8. ' int' → logprob: -7.645134925842285
    9. ' price' → logprob: -7.645134925842285
    10. '    ' → logprob: -8.395134925842285

Token 23: ' if' (ID: 538)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 24: ' age' (ID: 5744)
  Prédit: ' age'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' age' → logprob: -0.2521010637283325
    2. 'age' → logprob: -1.5021010637283325
    3. '(age' → logprob: -9.127100944519043
    4. ' âge' → logprob: -11.002100944519043
    5. ' ' → logprob: -11.127100944519043
    6. 'âge' → logprob: -11.752100944519043
    7. '18' → logprob: -11.752100944519043
    8. ' not' → logprob: -13.252100944519043
    9. ' ' → logprob: -13.252100944519043
    10. '20' → logprob: -13.377100944519043

Token 25: ' >=' (ID: 5064)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.5326629281044006
    2. '<' → logprob: -0.9076629281044006
    3. ' >=' → logprob: -5.282662868499756
    4. ' <=' → logprob: -6.407662868499756
    5. '>=' → logprob: -7.032662868499756
    6. ' >' → logprob: -7.282662868499756
    7. '>' → logprob: -7.282662868499756
    8. '<=' → logprob: -7.782662868499756
    9. ' ' → logprob: -10.157663345336914
    10. '   ' → logprob: -10.282663345336914

Token 26: ' ' (ID: 220)
  Prédit: '18'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '18' → logprob: -0.011677202768623829
    2. '60' → logprob: -5.136677265167236
    3. '65' → logprob: -5.261677265167236
    4. '12' → logprob: -7.761677265167236
    5. '16' → logprob: -10.886676788330078
    6. '10' → logprob: -10.886676788330078
    7. '0' → logprob: -11.136676788330078
    8. ' ' → logprob: -11.636676788330078
    9. '1' → logprob: -11.761676788330078
    10. 'age' → logprob: -12.011676788330078

Token 27: '13' (ID: 1311)
  Prédit: '18'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '18' → logprob: -0.0013996411580592394
    2. '65' → logprob: -7.251399517059326
    3. '12' → logprob: -7.751399517059326
    4. '60' → logprob: -8.501399993896484
    5. '16' → logprob: -11.126399993896484
    6. '0' → logprob: -11.251399993896484
    7. ' ' → logprob: -12.501399993896484
    8. '3' → logprob: -12.501399993896484
    9. '10' → logprob: -12.876399993896484
    10. 'age' → logprob: -13.126399993896484

Token 28: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.317904531955719
    2. 'else' → logprob: -1.3179044723510742
    3. '   ' → logprob: -5.567904472351074
    4. '    ' → logprob: -8.067904472351074
    5. '  ' → logprob: -8.692904472351074
    6. ' ' → logprob: -8.817904472351074
    7. '-' → logprob: -10.067904472351074
    8. '```' → logprob: -10.567904472351074
    9. ' or' → logprob: -10.817904472351074
    10. '+' → logprob: -10.817904472351074

Token 29: ' prix' (ID: 18771)
  Prédit: 'prix'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prix' → logprob: -0.6671301126480103
    2. '0' → logprob: -1.5421301126480103
    3. ' prix' → logprob: -1.5421301126480103
    4. ' ' → logprob: -3.1671299934387207
    5. 'int' → logprob: -5.042129993438721
    6. ' int' → logprob: -5.667129993438721
    7. 'pris' → logprob: -6.292129993438721
    8. '(pr' → logprob: -6.542129993438721
    9. 'pr' → logprob: -6.542129993438721
    10. '   ' → logprob: -7.792129993438721

Token 30: ' //' (ID: 602)
  Prédit: ' //'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.28708261251449585
    2. '//' → logprob: -1.5370826721191406
    3. ' *' → logprob: -4.037082672119141
    4. ' ' → logprob: -4.537082672119141
    5. '0' → logprob: -6.037082672119141
    6. '*' → logprob: -6.537082672119141
    7. ' /' → logprob: -8.16208267211914
    8. '10' → logprob: -8.28708267211914
    9. '   ' → logprob: -8.41208267211914
    10. '20' → logprob: -8.53708267211914

Token 31: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -3.8219583075260743e-05
    2. '3' → logprob: -11.375038146972656
    3. '4' → logprob: -11.625038146972656
    4. 'de' → logprob: -12.000038146972656
    5. '10' → logprob: -12.500038146972656
    6. ' ' → logprob: -12.875038146972656
    7. '5' → logprob: -12.875038146972656
    8. '20' → logprob: -14.125038146972656
    9. '   ' → logprob: -14.812538146972656
    10. '  ' → logprob: -15.000038146972656

Token 32: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -5.621933451038785e-05
    2. '3' → logprob: -10.500056266784668
    3. '4' → logprob: -11.250056266784668
    4. '5' → logprob: -12.250056266784668
    5. 'de' → logprob: -12.500056266784668
    6. '10' → logprob: -12.500056266784668
    7. ' ' → logprob: -14.187556266784668
    8. '20' → logprob: -14.250056266784668
    9. '

' → logprob: -14.687556266784668
    10. '```' → logprob: -15.125056266784668

Token 33: ' if' (ID: 538)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.505098819732666
    2. '<|end|>' → logprob: -1.005098819732666
    3. '\n' → logprob: -4.380098819732666
    4. '

' → logprob: -4.505098819732666
    5. '<|end|>' → logprob: -5.630098819732666
    6. '```' → logprob: -6.755098819732666
    7. 'newline' → logprob: -7.630098819732666
    8. '
' → logprob: -7.755098819732666
    9. '\' → logprob: -8.380098342895508
    10. '


' → logprob: -8.505098342895508

Token 34: ' age' (ID: 5744)
  Prédit: ' age'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' age' → logprob: -0.3166111409664154
    2. 'age' → logprob: -1.3166111707687378
    3. ' ' → logprob: -6.566611289978027
    4. '13' → logprob: -6.816611289978027
    5. '12' → logprob: -8.441611289978027
    6. ' âge' → logprob: -8.441611289978027
    7. '(age' → logprob: -8.566611289978027
    8. 'âge' → logprob: -9.441611289978027
    9. '10' → logprob: -10.566611289978027
    10. '1' → logprob: -10.941611289978027

Token 35: ' >=' (ID: 5064)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.04184165596961975
    2. '<' → logprob: -3.291841745376587
    3. ' ' → logprob: -6.291841506958008
    4. ' >=' → logprob: -6.416841506958008
    5. ' >' → logprob: -8.791841506958008
    6. ' <=' → logprob: -9.541841506958008
    7. '>=' → logprob: -10.041841506958008
    8. '>' → logprob: -11.166841506958008
    9. '<|end|>' → logprob: -12.541841506958008
    10. '<=' → logprob: -12.791841506958008

Token 36: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.7770596742630005
    2. '6' → logprob: -1.0270596742630005
    3. ' ' → logprob: -2.527059555053711
    4. '7' → logprob: -2.902059555053711
    5. '2' → logprob: -3.902059555053711
    6. '0' → logprob: -4.527059555053711
    7. '1' → logprob: -4.777059555053711
    8. '8' → logprob: -5.652059555053711
    9. '5' → logprob: -5.902059555053711
    10. '10' → logprob: -7.277059555053711

Token 37: '6' (ID: 21)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.5954986214637756
    2. '6' → logprob: -0.9704986214637756
    3. '7' → logprob: -3.345498561859131
    4. '0' → logprob: -4.470498561859131
    5. '5' → logprob: -4.845498561859131
    6. '2' → logprob: -5.220498561859131
    7. '1' → logprob: -5.720498561859131
    8. '8' → logprob: -5.720498561859131
    9. '4' → logprob: -6.595498561859131
    10. '10' → logprob: -6.720498561859131

Token 38: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.011144381016492844
    2. 'else' → logprob: -4.511144161224365
    3. ' and' → logprob: -10.011144638061523
    4. '6' → logprob: -11.261144638061523
    5. ' ' → logprob: -11.261144638061523
    6. '0' → logprob: -11.636144638061523
    7. '    ' → logprob: -12.511144638061523
    8. '	else' → logprob: -13.011144638061523
    9. '   ' → logprob: -13.261144638061523
    10. '  ' → logprob: -13.386144638061523

Token 39: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0021396710071712732
    2. ' ' → logprob: -6.377139568328857
    3. 'prix' → logprob: -8.752140045166016
    4. '10' → logprob: -9.377140045166016
    5. '1' → logprob: -9.502140045166016
    6. '5' → logprob: -9.752140045166016
    7. '2' → logprob: -11.127140045166016
    8. '3' → logprob: -11.627140045166016
    9. '4' → logprob: -11.939640045166016
    10. '   ' → logprob: -12.064640045166016

Token 40: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.008373082615435123
    2. 'prix' → logprob: -5.258373260498047
    3. '10' → logprob: -7.258373260498047
    4. '5' → logprob: -7.258373260498047
    5. '1' → logprob: -7.383373260498047
    6. ' ' → logprob: -8.383373260498047
    7. '3' → logprob: -8.383373260498047
    8. '2' → logprob: -8.633373260498047
    9. '4' → logprob: -9.383373260498047
    10. '100' → logprob: -9.758373260498047

Token 41: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.12780772149562836
    2. '<|end|>' → logprob: -2.2528076171875
    3. '

' → logprob: -5.1278076171875
    4. '\n' → logprob: -5.3778076171875
    5. '```' → logprob: -6.3778076171875
    6. '<|end|>' → logprob: -7.2528076171875
    7. ' ' → logprob: -7.7528076171875
    8. '' → logprob: -8.3778076171875
    9. 'newline' → logprob: -8.3778076171875
    10. '
' → logprob: -8.6278076171875

Token 42: 'if' (ID: 366)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 43: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.0056278700940310955
    2. '__' → logprob: -5.505627632141113
    3. ' ' → logprob: -7.255627632141113
    4. ' ' → logprob: -7.380627632141113
    5. ' stdin' → logprob: -8.880627632141113
    6. ' True' → logprob: -10.630627632141113
    7. '  ' → logprob: -10.880627632141113
    8. '_' → logprob: -11.880627632141113
    9. ' name' → logprob: -12.130627632141113
    10. ' _' → logprob: -12.130627632141113

Token 44: 'name' (ID: 897)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.6554087400436401
    2. '__' → logprob: -1.0304087400436401
    3. ' ==' → logprob: -2.9054088592529297
    4. '_' → logprob: -3.7804088592529297
    5. '==' → logprob: -3.9054088592529297
    6. '.__' → logprob: -4.28040885925293
    7. '__.' → logprob: -5.90540885925293
    8. ' .' → logprob: -6.03040885925293
    9. '.name' → logprob: -6.78040885925293
    10. ' __' → logprob: -6.78040885925293

Token 45: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -3.6312321753939614e-05
    2. '==' → logprob: -11.375036239624023
    3. '_' → logprob: -11.500036239624023
    4. '__.__' → logprob: -11.875036239624023
    5. ' ==' → logprob: -12.875036239624023
    6. '___' → logprob: -13.000036239624023
    7. '____' → logprob: -14.500036239624023
    8. '__
' → logprob: -14.750036239624023
    9. '__["' → logprob: -15.125036239624023
    10. '__.' → logprob: -15.500036239624023

Token 46: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.2600582242012024
    2. '__' → logprob: -1.6350581645965576
    3. '==' → logprob: -3.6350581645965576
    4. '=="' → logprob: -5.135058403015137
    5. '_' → logprob: -7.635058403015137
    6. '"' → logprob: -7.635058403015137
    7. '=='' → logprob: -8.135058403015137
    8. ' =="' → logprob: -8.760058403015137
    9. '[' → logprob: -9.760058403015137
    10. '=' → logprob: -10.135058403015137

Token 47: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.043038468807935715
    2. ''' → logprob: -3.1680383682250977
    3. ' "' → logprob: -10.543038368225098
    4. '__' → logprob: -11.918038368225098
    5. ' "__' → logprob: -12.418038368225098
    6. '_' → logprob: -14.168038368225098
    7. ' '' → logprob: -14.668038368225098
    8. '"user' → logprob: -15.043038368225098
    9. ' ' → logprob: -15.793038368225098
    10. '"name' → logprob: -16.418039321899414

Token 48: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -1.306760805164231e-05
    2. 'name' → logprob: -11.37501335144043
    3. 'ma' → logprob: -13.87501335144043
    4. 'm' → logprob: -15.12501335144043
    5. 'mai' → logprob: -16.37501335144043
    6. 'maine' → logprob: -16.75001335144043
    7. ' main' → logprob: -16.87501335144043
    8. '_main' → logprob: -17.50001335144043
    9. '__' → logprob: -18.00001335144043
    10. 'mp' → logprob: -18.12501335144043

Token 49: '__":
' (ID: 49892)
  Prédit: '__":
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__":
' → logprob: -0.5759707689285278
    2. '__' → logprob: -0.8259707689285278
    3. '__':
' → logprob: -11.075970649719238
    4. '__:' → logprob: -11.200970649719238
    5. '__["' → logprob: -14.200970649719238
    6. '__("' → logprob: -14.450970649719238
    7. '"' → logprob: -14.950970649719238
    8. '_' → logprob: -15.575970649719238
    9. '```' → logprob: -15.825970649719238
    10. '__",' → logprob: -15.825970649719238

Token 50: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.826826810836792
    2. '   ' → logprob: -0.826826810836792
    3. '    
' → logprob: -2.451826810836792
    4. '(stdin' → logprob: -4.326827049255371
    5. ' 
' → logprob: -5.201827049255371
    6. '<|end|>' → logprob: -5.451827049255371
    7. ' stdin' → logprob: -5.826827049255371
    8. '```' → logprob: -6.076827049255371
    9. '  
' → logprob: -6.576827049255371
    10. ' readline' → logprob: -6.701827049255371

Token 51: ' age' (ID: 5744)
  Prédit: ' age'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' age' → logprob: -1.0565800666809082
    2. ' for' → logprob: -1.3065800666809082
    3. 'for' → logprob: -2.181580066680908
    4. 'age' (adapté à ' age') → logprob: -2.181580066680908
    5. ' line' → logprob: -2.681580066680908
    6. ' lines' → logprob: -4.056580066680908
    7. '   ' → logprob: -4.306580066680908
    8. ' input' → logprob: -4.806580066680908
    9. ' ligne' → logprob: -4.806580066680908
    10. 'line' → logprob: -4.806580066680908

Token 52: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0018641414353623986
    2. '=' → logprob: -6.376863956451416
    3. ' ==' → logprob: -9.876864433288574
    4. ' ' → logprob: -10.376864433288574
    5. '_' → logprob: -11.376864433288574
    6. '  ' → logprob: -11.501864433288574
    7. ' >' → logprob: -11.626864433288574
    8. '   ' → logprob: -11.751864433288574
    9. '_input' → logprob: -12.001864433288574
    10. ' ' → logprob: -12.376864433288574

Token 53: ' prix' (ID: 18771)
  Prédit: 'prix'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prix' → logprob: -0.2849344313144684
    2. ' prix' → logprob: -1.409934401512146
    3. ' ' → logprob: -5.7849345207214355
    4. 'pr' → logprob: -8.159934043884277
    5. '  ' → logprob: -9.034934043884277
    6. '   ' → logprob: -9.909934043884277
    7. 'price' → logprob: -10.034934043884277
    8. ' =' → logprob: -10.409934043884277
    9. 'pri' → logprob: -10.784934043884277
    10. '=' → logprob: -10.784934043884277

Token 54: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.018150877207517624
    2. '=' → logprob: -4.018150806427002
    3. ',' → logprob: -14.64315128326416
    4. '=input' → logprob: -15.26815128326416
    5. ' ' → logprob: -15.89315128326416
    6. '=int' → logprob: -16.768150329589844
    7. 's' → logprob: -17.268150329589844
    8. ')' → logprob: -17.893150329589844
    9. '_' → logprob: -18.518150329589844
    10. 'input' → logprob: -18.580650329589844

Token 55: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.038127098232507706
    2. 'map' → logprob: -3.2881271839141846
    3. '[' → logprob: -10.788126945495605
    4. ' ' → logprob: -10.788126945495605
    5. ' [' → logprob: -10.788126945495605
    6. ' stdin' → logprob: -12.163126945495605
    7. ' list' → logprob: -12.413126945495605
    8. ' ' → logprob: -12.663126945495605
    9. '(map' → logprob: -13.038126945495605
    10. '	map' → logprob: -13.038126945495605

Token 56: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.022664932534098625
    2. '(' → logprob: -3.897665023803711
    3. '(str' → logprob: -7.022665023803711
    4. '(stdin' → logprob: -7.022665023803711
    5. '(lambda' → logprob: -8.272665023803711
    6. '(list' → logprob: -10.272665023803711
    7. '(input' → logprob: -11.022665023803711
    8. '(st' → logprob: -11.272665023803711
    9. 'int' → logprob: -12.647665023803711
    10. ' (' → logprob: -12.647665023803711

Token 57: ',' (ID: 11)
  Prédit: '(stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(stdin' → logprob: -0.0017432469176128507
    2. ')' → logprob: -6.876743316650391
    3. 'stdin' → logprob: -7.501743316650391
    4. ',' → logprob: -9.12674331665039
    5. ' stdin' → logprob: -11.00174331665039
    6. '(' → logprob: -11.25174331665039
    7. '.stdin' → logprob: -12.12674331665039
    8. '(st' → logprob: -12.25174331665039
    9. '(std' → logprob: -13.00174331665039
    10. ')(' → logprob: -13.12674331665039

Token 58: ' stdin' (ID: 75143)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.3149987459182739
    2. ' stdin' → logprob: -1.314998745918274
    3. '(stdin' → logprob: -6.439998626708984
    4. '.stdin' → logprob: -9.314998626708984
    5. 'input' → logprob: -10.689998626708984
    6. ')' → logprob: -11.314998626708984
    7. ' input' → logprob: -12.189998626708984
    8. '   ' → logprob: -12.564998626708984
    9. 'st' → logprob: -13.439998626708984
    10. ' readline' → logprob: -14.189998626708984

Token 59: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.00043257648940198123
    2. '.read' → logprob: -7.87543249130249
    3. '.' → logprob: -10.250432968139648
    4. '.readlines' → logprob: -11.625432968139648
    5. '().' → logprob: -12.000432968139648
    6. ').' → logprob: -13.375432968139648
    7. ')' → logprob: -15.375432968139648
    8. ' .' → logprob: -15.500432968139648
    9. ' readline' → logprob: -17.12543296813965
    10. 'read' → logprob: -18.00043296813965

Token 60: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.039281852543354034
    2. '().' → logprob: -3.5392818450927734
    3. '()' → logprob: -4.664281845092773
    4. ')' → logprob: -10.539281845092773
    5. ' ())' → logprob: -11.039281845092773
    6. '()[' → logprob: -12.164281845092773
    7. '()))' → logprob: -12.539281845092773
    8. '()]' → logprob: -13.164281845092773
    9. '(' → logprob: -13.414281845092773
    10. '())
' → logprob: -13.539281845092773

Token 61: 'split' (ID: 13627)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.38848748803138733
    2. 'split' → logprob: -1.138487458229065
    3. 'rstrip' → logprob: -6.513487339019775
    4. 'read' → logprob: -9.138487815856934
    5. ')' → logprob: -11.763487815856934
    6. ' strip' → logprob: -12.138487815856934
    7. ' split' → logprob: -12.638487815856934
    8. '().' → logprob: -12.763487815856934
    9. '(split' → logprob: -14.013487815856934
    10. '.strip' → logprob: -14.138487815856934

Token 62: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.002923160558566451
    2. '()' → logprob: -6.877923011779785
    3. '()))' → logprob: -6.877923011779785
    4. ')' → logprob: -7.127923011779785
    5. '))' → logprob: -10.127923011779785
    6. '())
' → logprob: -11.502923011779785
    7. ' ())' → logprob: -12.752923011779785
    8. '(' → logprob: -13.877923011779785
    9. '())

' → logprob: -14.752923011779785
    10. '()))
' → logprob: -15.002923011779785

Token 63: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.005566702224314213
    2. '   ' → logprob: -5.255566596984863
    3. ' print' → logprob: -8.380566596984863
    4. ')' → logprob: -10.255566596984863
    5. '<|end|>' → logprob: -10.880566596984863
    6. '    
' → logprob: -11.380566596984863
    7. '#print' → logprob: -11.755566596984863
    8. '```' → logprob: -12.130566596984863
    9. '
' → logprob: -12.630566596984863
    10. '	print' → logprob: -12.755566596984863

Token 64: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0001992490579141304
    2. ' print' → logprob: -8.750199317932129
    3. 'prix' → logprob: -10.750199317932129
    4. '   ' → logprob: -11.125199317932129
    5. 'result' → logprob: -13.000199317932129
    6. 'tar' → logprob: -13.500199317932129
    7. 'price' → logprob: -15.000199317932129
    8. 'pr' → logprob: -15.375199317932129
    9. '```' → logprob: -15.500199317932129
    10. 'prin' → logprob: -16.625198364257812

Token 65: '(cal' (ID: 92785)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0392889566719532
    2. '(cal' → logprob: -3.2892889976501465
    3. '(calc' → logprob: -6.7892889976501465
    4. '(c' → logprob: -9.789288520812988
    5. '((' → logprob: -10.789288520812988
    6. '(pr' → logprob: -11.164288520812988
    7. '()' → logprob: -11.414288520812988
    8. '(f' → logprob: -12.289288520812988
    9. '('' → logprob: -13.164288520812988
    10. '(
' → logprob: -13.289288520812988

Token 66: 'cul' (ID: 2885)
  Prédit: 'cul'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cul' → logprob: -0.0002266622323077172
    2. 'ul' → logprob: -8.875226974487305
    3. 'c' → logprob: -9.625226974487305
    4. '_' → logprob: -12.625226974487305
    5. 'culation' → logprob: -12.875226974487305
    6. 'cule' → logprob: -12.875226974487305
    7. '```' → logprob: -13.125226974487305
    8. 'culate' → logprob: -13.250226974487305
    9. 'cular' → logprob: -13.500226974487305
    10. 'cu' → logprob: -13.750226974487305

Token 67: '_tar' (ID: 168378)
  Prédit: '_tar'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_tar' → logprob: -5.431207682704553e-05
    2. '_' → logprob: -10.000054359436035
    3. 'tar' → logprob: -12.250054359436035
    4. '_t' → logprob: -12.500054359436035
    5. '_tax' → logprob: -16.87505340576172
    6. ' _' → logprob: -17.25005340576172
    7. 'Tar' → logprob: -17.25005340576172
    8. '.tar' → logprob: -17.75005340576172
    9. 't' → logprob: -17.87505340576172
    10. 'ar' → logprob: -18.62505340576172

Token 68: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -3.941161776310764e-05
    2. ' if' → logprob: -10.625039100646973
    3. '_if' → logprob: -12.250039100646973
    4. '_' → logprob: -12.375039100646973
    5. 'i' → logprob: -13.000039100646973
    6. 'f' → logprob: -13.625039100646973
    7. '   ' → logprob: -13.750039100646973
    8. 'иф' → logprob: -15.125039100646973
    9. ' ' → logprob: -16.12504005432129
    10. 'If' → logprob: -16.12504005432129

Token 69: '(age' (ID: 130744)
  Prédit: '(age'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(age' → logprob: -0.003212888026610017
    2. '(' → logprob: -5.753212928771973
    3. ')' → logprob: -10.503212928771973
    4. '(angle' → logprob: -12.253212928771973
    5. ' (' → logprob: -13.128212928771973
    6. '(
' → logprob: -15.878212928771973
    7. ')(' → logprob: -16.128211975097656
    8. '(amount' → logprob: -16.253211975097656
    9. '(

' → logprob: -16.253211975097656
    10. '(ad' → logprob: -16.503211975097656

Token 70: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.7954958821064793e-05
    2. ' ,' → logprob: -11.125018119812012
    3. ')' → logprob: -12.750018119812012
    4. '(pr' → logprob: -16.000017166137695
    5. ',p' → logprob: -17.000017166137695
    6. ',

' → logprob: -17.875017166137695
    7. '),' → logprob: -18.000017166137695
    8. ',)' → logprob: -18.000017166137695
    9. '‌,' → logprob: -18.000017166137695
    10. ',
' → logprob: -18.375017166137695

Token 71: ' prix' (ID: 18771)
  Prédit: ' prix'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' prix' → logprob: -0.05536705628037453
    2. 'prix' → logprob: -2.9303669929504395
    3. ' ' → logprob: -8.805367469787598
    4. 'pr' → logprob: -8.805367469787598
    5. ' )' → logprob: -9.680367469787598
    6. ')' → logprob: -9.680367469787598
    7. ' ' → logprob: -10.305367469787598
    8. ' pr' → logprob: -12.180367469787598
    9. ' pris' → logprob: -12.555367469787598
    10. '(pr' → logprob: -12.555367469787598

Token 72: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.47407931089401245
    2. ')' → logprob: -0.9740793108940125
    3. ')))' → logprob: -13.349079132080078
    4. ' )' → logprob: -15.099079132080078
    5. ' ))' → logprob: -15.724079132080078
    6. ')}' → logprob: -16.224079132080078
    7. '))
' → logprob: -16.349079132080078
    8. ')
' → logprob: -16.849079132080078
    9. '),' → logprob: -17.474079132080078
    10. '})' → logprob: -17.849079132080078


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 70
Tokens correctement prédits (1ère position, stricte): 30
Tokens correctement prédits (1ère position, avec adaptation): 31
Tokens correctement prédits (top 10): 56
Précision stricte (1ère position): 42.86%
Précision adaptée (1ère position): 44.29%
Précision (top 10): 80.00%
================================================================================
