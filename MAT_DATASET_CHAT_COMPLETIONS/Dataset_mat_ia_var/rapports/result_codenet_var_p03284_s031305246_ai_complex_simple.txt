================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:11:21
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from functools import reduce
N, K = list(map(int, input().split()))
print(reduce(lambda x, y: (y - x) ** 0, [N % K, 0]) if all([(N % K) != 0]) else int(str(False)[-1]))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' functools' (ID: 142636)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' reduce' (ID: 10389)
  Prédit: 'partial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'partial' → logprob: -0.612085223197937
    2. 'wrap' → logprob: -0.862085223197937
    3. 'reduce' → logprob: -3.4870853424072266
    4. 'l' → logprob: -6.112085342407227
    5. ' wraps' → logprob: -6.487085342407227
    6. 'cached' → logprob: -7.612085342407227
    7. 'cache' → logprob: -8.112085342407227
    8. 'cmp' → logprob: -9.237085342407227
    9. '```' → logprob: -9.237085342407227
    10. ' partial' → logprob: -9.612085342407227

Token 4: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.010317044332623482
    2. '(lambda' → logprob: -4.760316848754883
    3. ' (' → logprob: -7.385316848754883
    4. ',' → logprob: -7.885316848754883
    5. 'def' → logprob: -8.135316848754883
    6. '.' → logprob: -8.635316848754883
    7. '```' → logprob: -10.135316848754883
    8. '(
' → logprob: -10.385316848754883
    9. 'lambda' → logprob: -10.635316848754883
    10. ' ' → logprob: -10.760316848754883

Token 5: 'N' (ID: 45)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01442087721079588
    2. '(
' → logprob: -5.139420986175537
    3. '(lambda' → logprob: -5.389420986175537
    4. 'def' → logprob: -6.639420986175537
    5. ',' → logprob: -7.139420986175537
    6. '\' → logprob: -8.139420509338379
    7. ' ' → logprob: -8.264420509338379
    8. ' (' → logprob: -8.389420509338379
    9. '' → logprob: -9.139420509338379
    10. '
' → logprob: -9.139420509338379

Token 6: ',' (ID: 11)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.40150031447410583
    2. ' =' → logprob: -1.7765003442764282
    3. ',' → logprob: -2.1515002250671387
    4. '_' → logprob: -3.7765002250671387
    5. ' ' → logprob: -4.276500225067139
    6. 'umber' → logprob: -5.901500225067139
    7. '.' → logprob: -6.901500225067139
    8. 'um' → logprob: -6.901500225067139
    9. ' ,' → logprob: -7.276500225067139
    10. '[' → logprob: -8.026500701904297

Token 7: ' K' (ID: 658)
  Prédit: ' M'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' M' → logprob: -0.8661623597145081
    2. 'M' → logprob: -1.9911623001098633
    3. ' K' → logprob: -2.3661623001098633
    4. ' ' → logprob: -2.6161623001098633
    5. 'K' → logprob: -2.8661623001098633
    6. ''' → logprob: -3.3661623001098633
    7. 'a' → logprob: -3.4911623001098633
    8. 'input' → logprob: -3.8661623001098633
    9. 'data' → logprob: -4.116162300109863
    10. 'lst' → logprob: -4.491162300109863

Token 8: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6937647461891174
    2. ' =' → logprob: -0.6937647461891174
    3. ',' → logprob: -7.443764686584473
    4. '<|end|>' → logprob: -11.568764686584473
    5. ')' → logprob: -11.693764686584473
    6. '```' → logprob: -12.943764686584473
    7. ' =
' → logprob: -13.318764686584473
    8. ' ' → logprob: -13.568764686584473
    9. ' ,' → logprob: -13.568764686584473
    10. '=
' → logprob: -13.818764686584473

Token 9: ' list' (ID: 1562)
  Prédit: ' map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.22315692901611328
    2. ' ' → logprob: -1.9731569290161133
    3. 'map' → logprob: -2.9731569290161133
    4. ' int' → logprob: -5.723156929016113
    5. '0' → logprob: -6.098156929016113
    6. ' input' → logprob: -6.098156929016113
    7. '10' → logprob: -7.098156929016113
    8. 'int' → logprob: -7.598156929016113
    9. 'input' → logprob: -7.598156929016113
    10. '20' → logprob: -9.348156929016113

Token 10: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.001969077391549945
    2. '(range' → logprob: -7.126968860626221
    3. '(
' → logprob: -7.501968860626221
    4. '[' → logprob: -8.126969337463379
    5. ' (' → logprob: -9.126969337463379
    6. '```' → logprob: -10.126969337463379
    7. ')' → logprob: -10.376969337463379
    8. '(

' → logprob: -11.376969337463379
    9. '((' → logprob: -11.626969337463379
    10. '("("' → logprob: -11.751969337463379

Token 11: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06812402606010437
    2. '(int' → logprob: -3.3181240558624268
    3. '(lambda' → logprob: -3.9431240558624268
    4. '(str' → logprob: -4.818123817443848
    5. ')' → logprob: -7.693123817443848
    6. '(range' → logprob: -7.943123817443848
    7. '<|end|>' → logprob: -7.943123817443848
    8. '(input' → logprob: -8.193123817443848
    9. '(eval' → logprob: -9.068123817443848
    10. 'int' → logprob: -9.193123817443848

Token 12: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.013161055743694305
    2. '(' → logprob: -4.8881611824035645
    3. 'input' → logprob: -6.0131611824035645
    4. ',input' → logprob: -6.7631611824035645
    5. ')' → logprob: -7.1381611824035645
    6. '))' → logprob: -7.7631611824035645
    7. ',' → logprob: -8.763160705566406
    8. '=input' → logprob: -9.263160705566406
    9. ' input' → logprob: -9.263160705566406
    10. '(range' → logprob: -9.388160705566406

Token 13: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.02976449765264988
    2. ' input' → logprob: -3.529764413833618
    3. '(input' → logprob: -11.654764175415039
    4. ')' → logprob: -12.779764175415039
    5. ',input' → logprob: -13.654764175415039
    6. '```' → logprob: -15.029764175415039
    7. '=input' → logprob: -15.279764175415039
    8. 'str' → logprob: -15.529764175415039
    9. '	input' → logprob: -15.779764175415039
    10. ' ' → logprob: -15.904764175415039

Token 14: '().' (ID: 1454)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.6619102358818054
    2. '().' → logprob: -1.2869102954864502
    3. '()' → logprob: -2.28691029548645
    4. '())' → logprob: -2.91191029548645
    5. '(' → logprob: -3.78691029548645
    6. '()));' → logprob: -4.161910057067871
    7. '())))' → logprob: -5.286910057067871
    8. '()),' → logprob: -6.161910057067871
    9. '());' → logprob: -6.661910057067871
    10. '`()' → logprob: -7.036910057067871

Token 15: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00675989082083106
    2. 'strip' → logprob: -5.006760120391846
    3. 'rstrip' → logprob: -10.131759643554688
    4. ' split' → logprob: -13.256759643554688
    5. 'read' → logprob: -13.256759643554688
    6. '(split' → logprob: -14.006759643554688
    7. ')' → logprob: -15.381759643554688
    8. 'spl' → logprob: -15.881759643554688
    9. 'startswith' → logprob: -17.631759643554688
    10. '```' → logprob: -17.756759643554688

Token 16: '()))
' (ID: 24521)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.019413912668824196
    2. '()))' → logprob: -4.019413948059082
    3. ')' → logprob: -7.269413948059082
    4. ')))' → logprob: -7.769413948059082
    5. '())' → logprob: -10.144413948059082
    6. ''))' → logprob: -10.269413948059082
    7. '()' → logprob: -10.394413948059082
    8. '(' → logprob: -11.144413948059082
    9. '),' → logprob: -12.644413948059082
    10. '()));' → logprob: -12.769413948059082

Token 17: 'print' (ID: 1598)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.5566983222961426
    2. 'arr' → logprob: -1.8066983222961426
    3. 'A' → logprob: -2.3066983222961426
    4. 'data' → logprob: -2.9316983222961426
    5. 'numbers' → logprob: -3.3066983222961426
    6. ' A' → logprob: -3.6816983222961426
    7. 'result' → logprob: -4.806698322296143
    8. 'array' → logprob: -5.681698322296143
    9. 's' → logprob: -5.806698322296143
    10. ' numbers' → logprob: -5.806698322296143

Token 18: '(re' (ID: 8178)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0006402421277016401
    2. '("("' → logprob: -7.625640392303467
    3. '('' → logprob: -9.500639915466309
    4. '((' → logprob: -10.875639915466309
    5. '(sum' → logprob: -11.125639915466309
    6. '(lambda' → logprob: -11.625639915466309
    7. '(max' → logprob: -12.000639915466309
    8. '(end' → logprob: -12.625639915466309
    9. '(list' → logprob: -12.750639915466309
    10. '(len' → logprob: -12.750639915466309

Token 19: 'duce' (ID: 21375)
  Prédit: 'duce'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'duce' → logprob: -0.0002967320033349097
    2. 'du' → logprob: -8.750296592712402
    3. 'd' → logprob: -9.000296592712402
    4. 'duc' → logprob: -11.500296592712402
    5. 'duct' → logprob: -12.750296592712402
    6. 'duced' → logprob: -14.125296592712402
    7. 'dux' → logprob: -14.750296592712402
    8. 'reduce' → logprob: -15.125296592712402
    9. 'ducer' → logprob: -16.37529754638672
    10. 'verse' → logprob: -16.37529754638672

Token 20: '(lambda' (ID: 43341)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.47425493597984314
    2. '(lambda' → logprob: -0.9742549657821655
    3. '(operator' → logprob: -9.849254608154297
    4. '((' → logprob: -10.224254608154297
    5. '(()' → logprob: -10.974254608154297
    6. ')' → logprob: -11.099254608154297
    7. '(+' → logprob: -11.349254608154297
    8. '(function' → logprob: -11.599254608154297
    9. '(
' → logprob: -11.599254608154297
    10. '(func' → logprob: -12.349254608154297

Token 21: ' x' (ID: 1215)
  Prédit: ' lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lambda' → logprob: -0.27080607414245605
    2. ' x' → logprob: -1.770806074142456
    3. 'lambda' → logprob: -3.145806074142456
    4. ' a' → logprob: -4.645806312561035
    5. 'x' → logprob: -4.895806312561035
    6. 'a' → logprob: -5.395806312561035
    7. '(lambda' → logprob: -6.770806312561035
    8. ' ' → logprob: -7.020806312561035
    9. 'l' → logprob: -9.270806312561035
    10. ',' → logprob: -9.520806312561035

Token 22: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.02943512424826622
    2. ' ,' → logprob: -3.779435157775879
    3. ' lambda' → logprob: -5.404435157775879
    4. ' x' → logprob: -7.404435157775879
    5. 'lambda' → logprob: -7.529435157775879
    6. ' ' → logprob: -8.279435157775879
    7. '+' → logprob: -9.654435157775879
    8. '=lambda' → logprob: -9.779435157775879
    9. ' +' → logprob: -10.154435157775879
    10. '(lambda' → logprob: -10.654435157775879

Token 23: ' y' (ID: 342)
  Prédit: ' y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.11347105354070663
    2. 'y' → logprob: -2.238471031188965
    3. ' x' → logprob: -8.613471031188965
    4. 'a' → logprob: -8.988471031188965
    5. 'x' → logprob: -8.988471031188965
    6. ' a' → logprob: -9.363471031188965
    7. ' ' → logprob: -9.738471031188965
    8. ' lambda' → logprob: -10.113471031188965
    9. ',' → logprob: -11.738471031188965
    10. 'lambda' → logprob: -12.488471031188965

Token 24: ':' (ID: 25)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.05994472652673721
    2. ':' → logprob: -4.0599446296691895
    3. ' lambda' → logprob: -4.3099446296691895
    4. ' x' → logprob: -4.5599446296691895
    5. ' ,' → logprob: -5.3099446296691895
    6. 'lambda' → logprob: -5.3099446296691895
    7. ' :' → logprob: -5.5599446296691895
    8. '+' → logprob: -6.5599446296691895
    9. '=lambda' → logprob: -7.9349446296691895
    10. ')' → logprob: -8.559945106506348

Token 25: ' (' (ID: 350)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.25266233086586
    2. ' x' → logprob: -1.5026623010635376
    3. '(x' → logprob: -8.127662658691406
    4. ' (' → logprob: -8.502662658691406
    5. ' ' → logprob: -9.627662658691406
    6. '(' → logprob: -9.877662658691406
    7. 'max' → logprob: -10.252662658691406
    8. ' max' → logprob: -11.002662658691406
    9. '  ' → logprob: -11.627662658691406
    10. '   ' → logprob: -11.627662658691406

Token 26: 'y' (ID: 88)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.011136840097606182
    2. ' x' → logprob: -4.636137008666992
    3. '(x' → logprob: -6.761137008666992
    4. ' (' → logprob: -8.761137008666992
    5. '(' → logprob: -10.886137008666992
    6. '10' → logprob: -11.011137008666992
    7. ' ' → logprob: -11.636137008666992
    8. '   ' → logprob: -11.761137008666992
    9. '  ' → logprob: -12.886137008666992
    10. '((' → logprob: -13.761137008666992

Token 27: ' -' (ID: 533)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '*' → logprob: -0.8710508346557617
    2. ' if' → logprob: -1.3710508346557617
    3. '+' → logprob: -1.7460508346557617
    4. '%' → logprob: -3.3710508346557617
    5. ' %' → logprob: -3.6210508346557617
    6. ' *' → logprob: -3.8710508346557617
    7. '**' → logprob: -4.121050834655762
    8. ' +' → logprob: -4.496050834655762
    9. '-' → logprob: -4.746050834655762
    10. ',' → logprob: -4.746050834655762

Token 28: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.10346447676420212
    2. ' x' → logprob: -2.728464365005493
    3. '1' → logprob: -3.478464365005493
    4. ' ' → logprob: -6.228464603424072
    5. '2' → logprob: -9.978464126586914
    6. ' (' → logprob: -10.353464126586914
    7. '(x' → logprob: -10.478464126586914
    8. '(' → logprob: -12.228464126586914
    9. 'y' → logprob: -12.603464126586914
    10. ')' → logprob: -12.603464126586914

Token 29: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2868764102458954
    2. '),' → logprob: -2.1618764400482178
    3. ',' → logprob: -3.0368764400482178
    4. ')**' → logprob: -3.2868764400482178
    5. ' if' → logprob: -4.411876201629639
    6. ' )' → logprob: -4.911876201629639
    7. ' ,' → logprob: -5.036876201629639
    8. '+' → logprob: -5.161876201629639
    9. ')*' → logprob: -5.161876201629639
    10. ' ),' → logprob: -6.161876201629639

Token 30: ' **' (ID: 6240)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.3850803077220917
    2. '))' → logprob: -1.510080337524414
    3. ')' → logprob: -2.510080337524414
    4. '+' → logprob: -5.010080337524414
    5. ')))' → logprob: -5.885080337524414
    6. ' ,' → logprob: -6.135080337524414
    7. ' +' → logprob: -6.260080337524414
    8. '),' → logprob: -7.010080337524414
    9. ' if' → logprob: -7.260080337524414
    10. '>' → logprob: -8.385080337524414

Token 31: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.1381479799747467
    2. ' ' → logprob: -2.138148069381714
    3. 'K' → logprob: -5.263147830963135
    4. '1' → logprob: -5.763147830963135
    5. '3' → logprob: -6.763147830963135
    6. '(' → logprob: -7.013147830963135
    7. ' K' → logprob: -7.763147830963135
    8. '0' → logprob: -9.513148307800293
    9. 'N' → logprob: -10.013148307800293
    10. '<|end|>' → logprob: -10.450648307800293

Token 32: '0' (ID: 15)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.006437184289097786
    2. '3' → logprob: -5.381437301635742
    3. 'K' → logprob: -6.756437301635742
    4. '-' → logprob: -8.506437301635742
    5. '(' → logprob: -8.756437301635742
    6. ' ' → logprob: -9.631437301635742
    7. '1' → logprob: -9.756437301635742
    8. 'N' → logprob: -9.756437301635742
    9. '0' → logprob: -9.881437301635742
    10. '5' → logprob: -12.131437301635742

Token 33: ',' (ID: 11)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -3.225939872208983e-05
    2. ',' → logprob: -11.875032424926758
    3. '0' → logprob: -11.875032424926758
    4. '1' → logprob: -11.875032424926758
    5. '5' → logprob: -13.000032424926758
    6. ' .' → logprob: -13.000032424926758
    7. '(' → logprob: -13.125032424926758
    8. '```' → logprob: -13.875032424926758
    9. '2' → logprob: -14.375032424926758
    10. ' ' → logprob: -14.750032424926758

Token 34: ' [' (ID: 723)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '2' → logprob: -0.8353070616722107
    2. ' ' → logprob: -0.9603070616722107
    3. '1' → logprob: -2.4603071212768555
    4. ' K' → logprob: -2.7103071212768555
    5. 'K' → logprob: -4.4603071212768555
    6. ')' → logprob: -5.3353071212768555
    7. '0' → logprob: -5.5853071212768555
    8. ' N' → logprob: -6.2103071212768555
    9. ' y' → logprob: -6.4603071212768555
    10. ' range' → logprob: -7.2103071212768555

Token 35: 'N' (ID: 45)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.22024288773536682
    2. 'N' → logprob: -2.595242977142334
    3. 'int' → logprob: -3.220242977142334
    4. '0' → logprob: -3.595242977142334
    5. ' range' → logprob: -4.095242977142334
    6. '1' → logprob: -4.345242977142334
    7. 'K' → logprob: -4.845242977142334
    8. 'i' → logprob: -5.095242977142334
    9. 'input' → logprob: -5.720242977142334
    10. 'x' → logprob: -6.095242977142334

Token 36: ' %' (ID: 1851)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.041774436831474304
    2. '-' → logprob: -3.9167745113372803
    3. ' ,' → logprob: -4.791774272918701
    4. ',K' → logprob: -5.291774272918701
    5. ' -' → logprob: -5.791774272918701
    6. ' ' → logprob: -7.041774272918701
    7. '-,' → logprob: -7.416774272918701
    8. '+' → logprob: -7.416774272918701
    9. '-K' → logprob: -7.666774272918701
    10. ')' → logprob: -7.791774272918701

Token 37: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.14643494784832
    2. 'i' → logprob: -2.646435022354126
    3. ' K' → logprob: -3.271435022354126
    4. 'k' → logprob: -4.646434783935547
    5. ' ' → logprob: -5.271434783935547
    6. '2' → logprob: -5.771434783935547
    7. ' i' → logprob: -6.021434783935547
    8. '1' → logprob: -6.896434783935547
    9. 'x' → logprob: -7.396434783935547
    10. '10' → logprob: -7.396434783935547

Token 38: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.007785839028656483
    2. '2' → logprob: -6.257785797119141
    3. ')' → logprob: -6.757785797119141
    4. ' ,' → logprob: -6.757785797119141
    5. '])' → logprob: -7.757785797119141
    6. ')])' → logprob: -7.757785797119141
    7. '-' → logprob: -7.882785797119141
    8. ']))' → logprob: -8.00778579711914
    9. ' ' → logprob: -8.13278579711914
    10. '),' → logprob: -8.25778579711914

Token 39: ' ' (ID: 220)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.8048040270805359
    2. 'K' → logprob: -1.3048040866851807
    3. ' N' → logprob: -2.3048040866851807
    4. ' K' → logprob: -2.4298040866851807
    5. '2' → logprob: -3.6798040866851807
    6. ' ' → logprob: -4.054803848266602
    7. '1' → logprob: -4.054803848266602
    8. ' (' → logprob: -5.054803848266602
    9. 'y' → logprob: -5.429803848266602
    10. 'abs' → logprob: -5.679803848266602

Token 40: '0' (ID: 15)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.5275899171829224
    2. 'N' → logprob: -1.1525899171829224
    3. '2' → logprob: -3.652589797973633
    4. '1' → logprob: -4.277589797973633
    5. ' K' → logprob: -4.652589797973633
    6. 'y' → logprob: -4.777589797973633
    7. 'abs' → logprob: -4.902589797973633
    8. ' N' → logprob: -5.402589797973633
    9. '(N' → logprob: -5.402589797973633
    10. '(' → logprob: -5.652589797973633

Token 41: '])' (ID: 4636)
  Prédit: ']))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']))' → logprob: -0.11026151478290558
    2. ',' → logprob: -2.8602614402770996
    3. ']' → logprob: -3.8602614402770996
    4. '],' → logprob: -4.6102614402771
    5. '])' → logprob: -4.9852614402771
    6. '2' → logprob: -6.3602614402771
    7. '))' → logprob: -6.7352614402771
    8. '1' → logprob: -6.8602614402771
    9. ')' → logprob: -6.8602614402771
    10. '),' → logprob: -7.6102614402771

Token 42: ' if' (ID: 538)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.6199294924736023
    2. '2' → logprob: -1.119929552078247
    3. ')' → logprob: -2.619929552078247
    4. '.' → logprob: -3.744929552078247
    5. '1' → logprob: -3.869929552078247
    6. '(' → logprob: -4.994929313659668
    7. ' ' → logprob: -5.244929313659668
    8. '**' → logprob: -5.994929313659668
    9. '-' → logprob: -6.744929313659668
    10. '5' → logprob: -7.744929313659668

Token 43: ' all' (ID: 722)
  Prédit: ' N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.5076683759689331
    2. 'N' → logprob: -1.257668375968933
    3. ' K' → logprob: -2.6326684951782227
    4. 'K' → logprob: -3.8826684951782227
    5. ' len' → logprob: -5.132668495178223
    6. ' (' → logprob: -5.757668495178223
    7. '(N' → logprob: -5.757668495178223
    8. 'len' → logprob: -5.882668495178223
    9. ' y' → logprob: -6.757668495178223
    10. ' not' → logprob: -6.882668495178223

Token 44: '([(' (ID: 156282)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7162177562713623
    2. '([' → logprob: -1.2162177562713623
    3. '(lambda' → logprob: -2.7162177562713623
    4. '(N' → logprob: -2.9662177562713623
    5. '((' → logprob: -3.5912177562713623
    6. '(map' → logprob: -3.8412177562713623
    7. '(range' → logprob: -4.466217994689941
    8. ')' → logprob: -4.841217994689941
    9. '([(' → logprob: -5.091217994689941
    10. '(list' → logprob: -5.216217994689941

Token 45: 'N' (ID: 45)
  Prédit: 'N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.5909820795059204
    2. 'x' → logprob: -1.3409820795059204
    3. ' N' → logprob: -2.965981960296631
    4. ' x' → logprob: -3.340981960296631
    5. 'K' → logprob: -3.840981960296631
    6. 'n' → logprob: -4.340981960296631
    7. 'i' → logprob: -4.465981960296631
    8. '(N' → logprob: -5.090981960296631
    9. 'k' → logprob: -5.340981960296631
    10. ' K' → logprob: -5.590981960296631

Token 46: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.1278124451637268
    2. '%' → logprob: -2.127812385559082
    3. ' ' → logprob: -7.377812385559082
    4. ' %
' → logprob: -10.002812385559082
    5. ')' → logprob: -10.377812385559082
    6. ' >' → logprob: -10.627812385559082
    7. ' >=' → logprob: -10.877812385559082
    8. '<|end|>' → logprob: -10.877812385559082
    9. '%i' → logprob: -11.127812385559082
    10. '-' → logprob: -11.127812385559082

Token 47: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.04332514852285385
    2. ' K' → logprob: -3.168325185775757
    3. ')' → logprob: -8.918325424194336
    4. 'N' → logprob: -9.668325424194336
    5. ' ' → logprob: -10.293325424194336
    6. '2' → logprob: -10.293325424194336
    7. '1' → logprob: -11.668325424194336
    8. 'k' → logprob: -11.793325424194336
    9. ' (' → logprob: -11.918325424194336
    10. ',' → logprob: -12.043325424194336

Token 48: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.09941057860851288
    2. ')==' → logprob: -3.4744105339050293
    3. '),' → logprob: -3.7244105339050293
    4. ' )' → logprob: -4.474410533905029
    5. '==' → logprob: -4.724410533905029
    6. ')!=' → logprob: -4.974410533905029
    7. ' ==' → logprob: -5.474410533905029
    8. ' !=' → logprob: -5.724410533905029
    9. '!=' → logprob: -6.349410533905029
    10. ',' → logprob: -6.849410533905029

Token 49: ' !=' (ID: 1666)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -1.0603679418563843
    2. ',' → logprob: -1.4353679418563843
    3. ' !=' → logprob: -2.060368061065674
    4. ')' → logprob: -2.310368061065674
    5. ' ,' → logprob: -2.560368061065674
    6. '==' → logprob: -2.935368061065674
    7. ' ' → logprob: -4.060368061065674
    8. '),' → logprob: -4.185368061065674
    9. '!=' → logprob: -4.810368061065674
    10. ' )' → logprob: -5.185368061065674

Token 50: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.15036755800247192
    2. ' ' → logprob: -2.150367498397827
    3. ' y' → logprob: -4.275367736816406
    4. 'y' → logprob: -4.775367736816406
    5. 'x' → logprob: -8.150367736816406
    6. ' x' → logprob: -8.525367736816406
    7. '1' → logprob: -9.650367736816406
    8. 'K' → logprob: -9.775367736816406
    9. ' K' → logprob: -9.775367736816406
    10. 'i' → logprob: -10.712867736816406

Token 51: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.021514253690838814
    2. 'y' → logprob: -4.271514415740967
    3. ' ' → logprob: -5.271514415740967
    4. ' y' → logprob: -6.646514415740967
    5. 'K' → logprob: -7.521514415740967
    6. 'x' → logprob: -9.021513938903809
    7. '1' → logprob: -9.396513938903809
    8. ' K' → logprob: -10.146513938903809
    9. 'i' → logprob: -10.834013938903809
    10. 'N' → logprob: -10.959013938903809

Token 52: '])' (ID: 4636)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.16121576726436615
    2. '])' → logprob: -2.9112157821655273
    3. ' else' → logprob: -2.9112157821655273
    4. ')' → logprob: -3.7862157821655273
    5. ' and' → logprob: -5.661215782165527
    6. ')])' → logprob: -5.661215782165527
    7. 'else' → logprob: -5.786215782165527
    8. ']' → logprob: -6.161215782165527
    9. ' ,' → logprob: -6.411215782165527
    10. ',
' → logprob: -7.536215782165527

Token 53: ' else' (ID: 1203)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6047793626785278
    2. '**' → logprob: -2.1047792434692383
    3. ' else' → logprob: -2.2297792434692383
    4. '2' → logprob: -2.3547792434692383
    5. '0' → logprob: -2.9797792434692383
    6. '1' → logprob: -3.4797792434692383
    7. 'else' → logprob: -4.104779243469238
    8. ',' → logprob: -4.354779243469238
    9. ' ' → logprob: -5.229779243469238
    10. '-' → logprob: -5.729779243469238

Token 54: ' int' (ID: 677)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.4997688829898834
    2. ' ' → logprob: -1.749768853187561
    3. '1' → logprob: -1.999768853187561
    4. '(' → logprob: -4.1247687339782715
    5. 'abs' → logprob: -4.4997687339782715
    6. ''' → logprob: -4.6247687339782715
    7. ' K' → logprob: -4.8747687339782715
    8. 'K' → logprob: -4.9997687339782715
    9. ' (' → logprob: -5.3747687339782715
    10. ' abs' → logprob: -5.4997687339782715

Token 55: '(str' (ID: 7946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5544497966766357
    2. '(N' → logprob: -1.0544497966766357
    3. '((' → logprob: -3.1794497966766357
    4. ')' → logprob: -4.679450035095215
    5. '(abs' → logprob: -4.929450035095215
    6. '(True' → logprob: -5.429450035095215
    7. '(False' → logprob: -5.554450035095215
    8. '(K' → logprob: -6.054450035095215
    9. 'abs' → logprob: -6.179450035095215
    10. '(n' → logprob: -6.429450035095215

Token 56: '(False' (ID: 55925)
  Prédit: '(N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.4657323360443115
    2. '(K' → logprob: -1.3407323360443115
    3. '(' → logprob: -2.9657323360443115
    4. '((' → logprob: -3.2157323360443115
    5. '(abs' → logprob: -4.340732574462891
    6. 'K' → logprob: -6.590732574462891
    7. '(int' → logprob: -7.340732574462891
    8. '(pow' → logprob: -7.590732574462891
    9. 'N' → logprob: -7.715732574462891
    10. '('' → logprob: -7.965732574462891

Token 57: ')[' (ID: 13637)
  Prédit: ')))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.21225033700466156
    2. ')' → logprob: -2.087250232696533
    3. '))' → logprob: -3.087250232696533
    4. ')[' → logprob: -4.837250232696533
    5. ').' → logprob: -5.837250232696533
    6. '))))' → logprob: -6.212250232696533
    7. '1' → logprob: -6.337250232696533
    8. ')+' → logprob: -7.087250232696533
    9. ')(' → logprob: -7.337250232696533
    10. 'False' → logprob: -7.337250232696533

Token 58: '-' (ID: 12)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.8117861747741699
    2. '0' → logprob: -0.9367861747741699
    3. '-' → logprob: -2.06178617477417
    4. ':' → logprob: -4.68678617477417
    5. '::-' → logprob: -4.68678617477417
    6. '])' → logprob: -5.31178617477417
    7. ' ' → logprob: -5.43678617477417
    8. ')' → logprob: -7.06178617477417
    9. ' :' → logprob: -7.18678617477417
    10. ' -' → logprob: -7.31178617477417

Token 59: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.010476783849298954
    2. '2' → logprob: -4.635476589202881
    3. '4' → logprob: -8.260477066040039
    4. '5' → logprob: -9.010477066040039
    5. '3' → logprob: -9.135477066040039
    6. '6' → logprob: -9.260477066040039
    7. '7' → logprob: -11.197977066040039
    8. '0' → logprob: -11.197977066040039
    9. ' ' → logprob: -11.760477066040039
    10. '```' → logprob: -11.885477066040039

Token 60: ']))' (ID: 20259)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.46508169174194336
    2. ']))' → logprob: -1.7150816917419434
    3. '])' → logprob: -1.9650816917419434
    4. '))' → logprob: -3.8400816917419434
    5. ')])' → logprob: -3.8400816917419434
    6. ']' → logprob: -5.215081691741943
    7. ')))' → logprob: -6.215081691741943
    8. ')]' → logprob: -6.965081691741943
    9. '1' → logprob: -9.090082168579102
    10. '0' → logprob: -9.840082168579102


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 58
Tokens correctement prédits (1ère position, stricte): 11
Tokens correctement prédits (1ère position, avec adaptation): 11
Tokens correctement prédits (top 10): 39
Précision stricte (1ère position): 18.97%
Précision adaptée (1ère position): 18.97%
Précision (top 10): 67.24%
================================================================================
