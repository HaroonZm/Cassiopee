================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:01:05
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys
from collections import deque

def get_input():
    return sys.stdin.readline().strip()

def map_ints():
    return map(int, get_input().split())

def list_map_ints():
    return list(map(int, get_input().split()))

def initialize_tree(n):
    return [[] for _ in range(n + 1)]

def read_edges(tree, n):
    for _ in range(n - 1):
        add_edge(tree)

def add_edge(tree):
    a, b, c = map_ints()
    tree[a].append([a, b, c])
    tree[b].append([b, a, c])

def initialize_ans(n):
    ans = [-1] * (n + 1)
    ans[1] = 0
    return ans

def initialize_queue(tree):
    que = deque()
    que.append(tree[1])
    return que

def process_queue(que, tree, ans):
    while queue_not_empty(que):
        process_node(que, tree, ans)

def queue_not_empty(que):
    return len(que) > 0

def process_node(que, tree, ans):
    q = que.popleft()
    process_edges(q, que, tree, ans)

def process_edges(q, que, tree, ans):
    for x, y, z in q:
        process_edge(x, y, z, que, tree, ans)

def process_edge(x, y, z, que, tree, ans):
    if ans[y] == -1:
        ans[y] = (ans[x] + z) % 2
        que.append(tree[y])

def print_answer(ans):
    for value in ans[1:]:
        print(value)

def main():
    n = int(get_input())
    tree = initialize_tree(n)
    read_edges(tree, n)
    ans = initialize_ans(n)
    que = initialize_queue(tree)
    process_queue(que, tree, ans)
    print_answer(ans)

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '
' (ID: 198)
  → Token d'amorce (pas de prédiction)

Token 3: 'from' (ID: 2845)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.18225857615470886
    2. '\n' → logprob: -2.0572586059570312
    3. '<|end|>' → logprob: -4.182258605957031
    4. '\' → logprob: -4.432258605957031
    5. 'newline' → logprob: -5.557258605957031
    6. 'import' → logprob: -6.057258605957031
    7. '<|end|>' → logprob: -6.682258605957031
    8. '```' → logprob: -7.432258605957031
    9. ';' → logprob: -7.557258605957031
    10. '' → logprob: -7.682258605957031

Token 4: ' collections' (ID: 22690)
  Prédit: ' os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' os' → logprob: -0.01873229257762432
    2. 'os' → logprob: -4.143732070922852
    3. ' collections' → logprob: -7.393732070922852
    4. ' pathlib' → logprob: -7.768732070922852
    5. ' Py' → logprob: -7.893732070922852
    6. ' ' → logprob: -8.393732070922852
    7. ' math' → logprob: -8.393732070922852
    8. 'collections' → logprob: -8.893732070922852
    9. ' datetime' → logprob: -9.143732070922852
    10. ' typing' → logprob: -9.518732070922852

Token 5: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.33297017216682434
    2. 'import' → logprob: -1.332970142364502
    3. '.' → logprob: -3.957970142364502
    4. ' ' → logprob: -9.08297061920166
    5. '```' → logprob: -9.20797061920166
    6. '.import' → logprob: -10.08297061920166
    7. '<|end|>' → logprob: -10.08297061920166
    8. '_' → logprob: -10.70797061920166
    9. '	import' → logprob: -10.83297061920166
    10. '_import' → logprob: -11.70797061920166

Token 6: ' deque' (ID: 90347)
  Prédit: ' deque'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' deque' → logprob: -0.7468933463096619
    2. ' defaultdict' → logprob: -0.7468933463096619
    3. 'deque' → logprob: -2.9968934059143066
    4. ' abc' → logprob: -6.871893405914307
    5. ' named' → logprob: -7.246893405914307
    6. 'default' → logprob: -8.621892929077148
    7. 'named' → logprob: -8.621892929077148
    8. 'abc' → logprob: -8.871892929077148
    9. ' Counter' → logprob: -9.246892929077148
    10. 'Counter' → logprob: -11.621892929077148

Token 7: '

' (ID: 279)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.8526584506034851
    2. '

' → logprob: -0.9776584506034851
    3. '
' → logprob: -2.35265851020813
    4. '```' → logprob: -3.35265851020813
    5. 'import' → logprob: -3.60265851020813
    6. '\' → logprob: -3.72765851020813
    7. '<|end|>' → logprob: -4.852658271789551
    8. '<|end|>' → logprob: -6.227658271789551
    9. 'newline' → logprob: -6.477658271789551
    10. '' → logprob: -7.102658271789551

Token 8: 'def' (ID: 1314)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -1.060631275177002
    2. 'def' → logprob: -1.685631275177002
    3. '\' → logprob: -2.435631275177002
    4. '`' → logprob: -2.560631275177002
    5. 'import' → logprob: -2.685631275177002
    6. '\n' → logprob: -2.810631275177002
    7. '
' → logprob: -3.310631275177002
    8. 'data' → logprob: -3.560631275177002
    9. 'd' → logprob: -3.685631275177002
    10. 'queue' → logprob: -4.185631275177002

Token 9: ' get' (ID: 717)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.04758122190833092
    2. ' bfs' → logprob: -3.172581195831299
    3. ' process' → logprob: -6.422581195831299
    4. ' breadth' → logprob: -7.797581195831299
    5. ' BFS' → logprob: -7.797581195831299
    6. ' space' → logprob: -8.047581672668457
    7. ' dfs' → logprob: -8.172581672668457
    8. ' main' → logprob: -8.297581672668457
    9. ' ' → logprob: -9.047581672668457
    10. ' ```' → logprob: -9.422581672668457

Token 10: '_input' (ID: 12507)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.15751533210277557
    2. '_max' → logprob: -3.157515287399292
    3. ' _' → logprob: -3.407515287399292
    4. '_input' → logprob: -3.907515287399292
    5. '_queue' → logprob: -4.032515525817871
    6. '_data' → logprob: -4.657515525817871
    7. '_next' → logprob: -5.157515525817871
    8. '_path' → logprob: -6.782515525817871
    9. '_items' → logprob: -6.782515525817871
    10. '_item' → logprob: -6.907515525817871

Token 11: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.49752867221832275
    2. '():' → logprob: -0.9975286722183228
    3. '_' → logprob: -4.122528553009033
    4. '_line' → logprob: -6.372528553009033
    5. '(prompt' → logprob: -6.747528553009033
    6. '()' → logprob: -6.997528553009033
    7. '(_' → logprob: -7.122528553009033
    8. '_data' → logprob: -7.872528553009033
    9. '_input' → logprob: -8.872529029846191
    10. '```' → logprob: -8.872529029846191

Token 12: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12122436612844467
    2. ' return' → logprob: -3.1212244033813477
    3. '    ' → logprob: -3.7462244033813477
    4. '    
' → logprob: -4.871224403381348
    5. '<|end|>' → logprob: -5.371224403381348
    6. '\' → logprob: -5.496224403381348
    7. ' ' → logprob: -5.496224403381348
    8. 'return' → logprob: -5.496224403381348
    9. '\n' → logprob: -5.746224403381348
    10. '()' → logprob: -6.246224403381348

Token 13: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4257776141166687
    2. 'return' (adapté à ' return') → logprob: -1.1757776737213135
    3. ' return' → logprob: -3.9257776737213135
    4. 'input' → logprob: -4.300777435302734
    5. 'user' → logprob: -6.800777435302734
    6. 'data' → logprob: -6.925777435302734
    7. ' input' → logprob: -7.300777435302734
    8. '```' → logprob: -7.550777435302734
    9. ' ' → logprob: -8.300777435302734
    10. 'try' → logprob: -8.425777435302734

Token 14: ' sys' (ID: 12228)
  Prédit: ' sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.1880735456943512
    2. ' ' → logprob: -2.4380736351013184
    3. ' input' → logprob: -2.5630736351013184
    4. 'input' → logprob: -5.313073635101318
    5. 'sys' → logprob: -6.438073635101318
    6. ' int' → logprob: -8.31307315826416
    7. ' list' → logprob: -9.06307315826416
    8. '  ' → logprob: -9.93807315826416
    9. ' []' → logprob: -11.06307315826416
    10. '"' → logprob: -11.18807315826416

Token 15: '.stdin' (ID: 93480)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.01550762727856636
    2. '.stdin' → logprob: -4.640507698059082
    3. '.argv' → logprob: -5.765507698059082
    4. ' .' → logprob: -6.640507698059082
    5. '.exit' → logprob: -7.640507698059082
    6. '.stdout' → logprob: -8.015507698059082
    7. '.import' → logprob: -8.640507698059082
    8. '.readline' → logprob: -9.140507698059082
    9. '.path' → logprob: -10.390507698059082
    10. '.next' → logprob: -10.515507698059082

Token 16: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.08822028338909149
    2. '.read' → logprob: -2.9632203578948975
    3. '.' → logprob: -3.4632203578948975
    4. 'read' → logprob: -6.963220119476318
    5. '.Read' → logprob: -8.713220596313477
    6. '.readlines' → logprob: -8.838220596313477
    7. ' .' → logprob: -9.463220596313477
    8. ' readline' → logprob: -10.463220596313477
    9. '```' → logprob: -10.713220596313477
    10. '().' → logprob: -10.963220596313477

Token 17: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.010041034780442715
    2. '().' → logprob: -4.635041236877441
    3. '(' → logprob: -8.760041236877441
    4. '()
' → logprob: -10.385041236877441
    5. '()

' → logprob: -10.385041236877441
    6. '()\' → logprob: -10.635041236877441
    7. '()(' → logprob: -11.010041236877441
    8. ' ()' → logprob: -11.760041236877441
    9. '())' → logprob: -12.260041236877441
    10. ')' → logprob: -12.510041236877441

Token 18: 'strip' (ID: 23905)
  Prédit: 'strip'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.0007104054093360901
    2. 'rstrip' → logprob: -7.250710487365723
    3. '_strip' → logprob: -15.500710487365723
    4. ' strip' → logprob: -15.875710487365723
    5. 'str' → logprob: -16.625709533691406
    6. 'rst' → logprob: -18.000709533691406
    7. '-strip' → logprob: -18.250709533691406
    8. 'read' → logprob: -18.625709533691406
    9. 'replace' → logprob: -19.125709533691406
    10. 'split' → logprob: -20.125709533691406

Token 19: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.2255638837814331
    2. '(' → logprob: -1.600563883781433
    3. '(
' → logprob: -10.350564002990723
    4. '(\' → logprob: -10.600564002990723
    5. ' ()' → logprob: -11.225564002990723
    6. '()
' → logprob: -11.475564002990723
    7. '(

' → logprob: -11.850564002990723
    8. '()(' → logprob: -12.225564002990723
    9. '`()' → logprob: -12.225564002990723
    10. '()

' → logprob: -12.350564002990723

Token 20: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.017695743590593338
    2. 'n' → logprob: -4.267695903778076
    3. 'N' → logprob: -6.767695903778076
    4. 'q' → logprob: -7.392695903778076
    5. 'd' → logprob: -7.642695903778076
    6. 'class' → logprob: -8.017695426940918
    7. 'queue' → logprob: -8.142695426940918
    8. 'deque' → logprob: -8.892695426940918
    9. '\' → logprob: -9.392695426940918
    10. 'for' → logprob: -9.767695426940918

Token 21: ' map' (ID: 4014)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.03995146229863167
    2. ' bfs' → logprob: -3.5399515628814697
    3. ' solve' → logprob: -5.539951324462891
    4. ' process' → logprob: -5.789951324462891
    5. ' parse' → logprob: -7.414951324462891
    6. ' calculate' → logprob: -7.539951324462891
    7. ' get' → logprob: -7.914951324462891
    8. ' queue' → logprob: -8.66495132446289
    9. ' is' → logprob: -8.78995132446289
    10. ' split' → logprob: -9.03995132446289

Token 22: '_int' (ID: 12285)
  Prédit: 'per'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'per' → logprob: -0.3856984078884125
    2. '_' → logprob: -1.5106984376907349
    3. '(' → logprob: -3.0106983184814453
    4. '_data' → logprob: -3.8856983184814453
    5. '_per' → logprob: -4.510698318481445
    6. '_input' → logprob: -5.760698318481445
    7. 's' → logprob: -5.760698318481445
    8. '_line' → logprob: -6.635698318481445
    9. 'ping' → logprob: -6.760698318481445
    10. '_list' → logprob: -6.885698318481445

Token 23: 's' (ID: 82)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.3913722634315491
    2. 'eger' → logprob: -1.5163722038269043
    3. '[]' → logprob: -4.391372203826904
    4. 's' → logprob: -4.391372203826904
    5. ')' → logprob: -4.641372203826904
    6. '_list' → logprob: -4.766372203826904
    7. 'erval' → logprob: -4.891372203826904
    8. '_array' → logprob: -5.016372203826904
    9. '(' → logprob: -5.141372203826904
    10. 'o' → logprob: -5.641372203826904

Token 24: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0018805658910423517
    2. '()' → logprob: -7.126880645751953
    3. ' (' → logprob: -7.251880645751953
    4. '(()' → logprob: -9.251880645751953
    5. '():' → logprob: -9.501880645751953
    6. '("("' → logprob: -10.001880645751953
    7. '(line' → logprob: -10.501880645751953
    8. ' ()' → logprob: -11.251880645751953
    9. '(lambda' → logprob: -11.501880645751953
    10. '((' → logprob: -11.751880645751953

Token 25: '   ' (ID: 271)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.5315900444984436
    2. '   ' → logprob: -1.1565899848937988
    3. 'return' → logprob: -3.031589984893799
    4. '(' → logprob: -4.406589984893799
    5. '()' → logprob: -4.656589984893799
    6. '[]' → logprob: -5.031589984893799
    7. ' map' → logprob: -5.656589984893799
    8. ' (' → logprob: -6.031589984893799
    9. '():' → logprob: -6.031589984893799
    10. ':return' → logprob: -6.156589984893799

Token 26: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.02723737806081772
    2. 'return' (adapté à ' return') → logprob: -3.6522374153137207
    3. '   ' → logprob: -7.527237415313721
    4. ' map' → logprob: -7.902237415313721
    5. ' ' → logprob: -11.152236938476562
    6. '	return' → logprob: -12.527236938476562
    7. 'map' → logprob: -12.527236938476562
    8. ' list' → logprob: -12.527236938476562
    9. '  ' → logprob: -13.902236938476562
    10. '    ' → logprob: -14.027236938476562

Token 27: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.49076902866363525
    2. ' list' → logprob: -0.9907690286636353
    3. 'list' → logprob: -4.740768909454346
    4. 'map' → logprob: -4.865768909454346
    5. ' ' → logprob: -9.615769386291504
    6. '[' → logprob: -11.365769386291504
    7. '   ' → logprob: -11.490769386291504
    8. ' [' → logprob: -11.865769386291504
    9. '(map' → logprob: -11.865769386291504
    10. '  ' → logprob: -11.865769386291504

Token 28: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.038065019994974136
    2. '(' → logprob: -3.288064956665039
    3. '<int' → logprob: -11.538064956665039
    4. 'int' → logprob: -11.663064956665039
    5. '[int' → logprob: -13.538064956665039
    6. '(lambda' → logprob: -13.913064956665039
    7. '(
' → logprob: -14.038064956665039
    8. '(str' → logprob: -14.413064956665039
    9. '(in' → logprob: -14.413064956665039
    10. '=int' → logprob: -15.038064956665039

Token 29: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.0319643020629883
    2. '(sys' → logprob: -1.5319643020629883
    3. '(get' → logprob: -1.5319643020629883
    4. ',get' → logprob: -1.7819643020629883
    5. ')' → logprob: -3.9069643020629883
    6. '(' → logprob: -4.781964302062988
    7. 'get' → logprob: -5.281964302062988
    8. 'sys' → logprob: -6.031964302062988
    9. '(),' → logprob: -6.406964302062988
    10. ',input' → logprob: -7.156964302062988

Token 30: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.6332065463066101
    2. 'get' → logprob: -0.7582065463066101
    3. '(get' → logprob: -8.383206367492676
    4. ')' → logprob: -9.258206367492676
    5. 'sys' → logprob: -9.258206367492676
    6. ')get' → logprob: -9.383206367492676
    7. ' sys' → logprob: -9.508206367492676
    8. '	get' → logprob: -11.883206367492676
    9. '[get' → logprob: -12.133206367492676
    10. ' input' → logprob: -12.383206367492676

Token 31: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -4.60414821645827e-06
    2. '_inputs' → logprob: -12.875004768371582
    3. '(_' → logprob: -14.375004768371582
    4. '_' → logprob: -14.500004768371582
    5. '_line' → logprob: -14.750004768371582
    6. '_in' → logprob: -15.500004768371582
    7. '_output' → logprob: -15.750004768371582
    8. 'input' → logprob: -16.250003814697266
    9. ' _' → logprob: -16.875003814697266
    10. '_int' → logprob: -17.875003814697266

Token 32: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.012720365077257156
    2. '()))' → logprob: -4.762720584869385
    3. '()' → logprob: -5.512720584869385
    4. ')' → logprob: -10.387720108032227
    5. '().' → logprob: -11.137720108032227
    6. ' ())' → logprob: -12.137720108032227
    7. '())
' → logprob: -12.762720108032227
    8. '());' → logprob: -13.262720108032227
    9. '()),' → logprob: -13.637720108032227
    10. '();)' → logprob: -13.887720108032227

Token 33: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.002010837197303772
    2. 'strip' → logprob: -6.252010822296143
    3. 'rstrip' → logprob: -10.0020112991333
    4. ')' → logprob: -10.2520112991333
    5. 'spl' → logprob: -14.7520112991333
    6. ' split' → logprob: -15.0020112991333
    7. 'replace' → logprob: -15.0020112991333
    8. '())' → logprob: -15.3770112991333
    9. 's' → logprob: -16.002010345458984
    10. '(split' → logprob: -16.002010345458984

Token 34: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.001544022699818015
    2. '()' → logprob: -7.251543998718262
    3. '()))' → logprob: -7.626543998718262
    4. ')' → logprob: -8.001543998718262
    5. '))' → logprob: -12.251543998718262
    6. '())
' → logprob: -12.376543998718262
    7. ' ())' → logprob: -13.626543998718262
    8. '()]' → logprob: -15.001543998718262
    9. '();)' → logprob: -15.626543998718262
    10. '(' → logprob: -15.751543998718262

Token 35: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.003963585942983627
    2. 'class' → logprob: -6.128963470458984
    3. '\' → logprob: -7.128963470458984
    4. '```' → logprob: -8.128963470458984
    5. '#' → logprob: -8.378963470458984
    6. 'd' → logprob: -8.628963470458984
    7. 'n' → logprob: -9.253963470458984
    8. '\n' → logprob: -9.753963470458984
    9. 'de' → logprob: -10.753963470458984
    10. '
' → logprob: -11.128963470458984

Token 36: ' list' (ID: 1562)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.37639904022216797
    2. ' bfs' → logprob: -1.501399040222168
    3. 'main' → logprob: -2.626399040222168
    4. ' solve' → logprob: -4.751399040222168
    5. 'solve' → logprob: -5.251399040222168
    6. 'b' → logprob: -5.876399040222168
    7. '_b' → logprob: -8.251399040222168
    8. ' is' → logprob: -8.376399040222168
    9. 'deque' → logprob: -8.876399040222168
    10. ' process' → logprob: -9.001399040222168

Token 37: '_map' (ID: 11824)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.05420566722750664
    2. '(' → logprob: -3.8042056560516357
    3. '<|end|>' → logprob: -4.554205894470215
    4. 's' → logprob: -5.179205894470215
    5. '<|end|>' → logprob: -6.054205894470215
    6. '_of' → logprob: -6.429205894470215
    7. '()' → logprob: -6.679205894470215
    8. '_append' → logprob: -7.054205894470215
    9. '_to' → logprob: -7.304205894470215
    10. '```' → logprob: -7.554205894470215

Token 38: '_int' (ID: 12285)
  Prédit: '(lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.5868865251541138
    2. '(' → logprob: -0.9618865251541138
    3. '(int' → logprob: -2.836886405944824
    4. '(func' → logprob: -7.211886405944824
    5. '(()' → logprob: -7.211886405944824
    6. '()' → logprob: -8.336886405944824
    7. '(_' → logprob: -8.711886405944824
    8. '("("' → logprob: -8.711886405944824
    9. ' (' → logprob: -9.086886405944824
    10. 's' → logprob: -9.336886405944824

Token 39: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -3.190178904333152e-05
    2. '()' → logprob: -10.375031471252441
    3. '```' → logprob: -15.750031471252441
    4. '(' → logprob: -16.125032424926758
    5. '_s' → logprob: -16.250032424926758
    6. '(s' → logprob: -16.500032424926758
    7. ' s' → logprob: -16.875032424926758
    8. 'ints' → logprob: -17.000032424926758
    9. 'ents' → logprob: -17.125032424926758
    10. '`s' → logprob: -18.000032424926758

Token 40: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.005972523242235184
    2. '()' → logprob: -5.130972385406494
    3. '(' → logprob: -10.755972862243652
    4. '():
' → logprob: -11.630972862243652
    5. ' ():' → logprob: -12.880972862243652
    6. '()">' → logprob: -12.880972862243652
    7. '(()' → logprob: -13.255972862243652
    8. ' ()' → logprob: -13.505972862243652
    9. '()>' → logprob: -13.755972862243652
    10. '()*' → logprob: -14.380972862243652

Token 41: '   ' (ID: 271)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.020673150196671486
    2. '()' → logprob: -4.8956732749938965
    3. '   ' → logprob: -5.2706732749938965
    4. 'return' → logprob: -6.0206732749938965
    5. ':' → logprob: -6.1456732749938965
    6. '():
' → logprob: -7.1456732749938965
    7. 'list' → logprob: -7.7706732749938965
    8. ' return' → logprob: -7.7706732749938965
    9. ':list' → logprob: -7.7706732749938965
    10. '[]' → logprob: -7.8956732749938965

Token 42: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.4072627127170563
    2. ' return' → logprob: -1.1572626829147339
    3. '   ' → logprob: -4.032262802124023
    4. ' list' → logprob: -6.657262802124023
    5. 'list' → logprob: -6.782262802124023
    6. ' ' → logprob: -11.782262802124023
    7. 'def' → logprob: -12.157262802124023
    8. '    ' → logprob: -12.282262802124023
    9. '  ' → logprob: -12.407262802124023
    10. '	return' → logprob: -12.532262802124023

Token 43: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.16042214632034302
    2. ' list' → logprob: -1.9104220867156982
    3. '[list' → logprob: -8.535422325134277
    4. '(list' → logprob: -14.535422325134277
    5. '	list' → logprob: -15.285422325134277
    6. '[' → logprob: -15.285422325134277
    7. ' [' → logprob: -15.535422325134277
    8. '=list' → logprob: -15.785422325134277
    9. 'List' → logprob: -17.03542137145996
    10. ' ' → logprob: -17.03542137145996

Token 44: '(map' (ID: 16946)
  Prédit: '_map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_map' → logprob: -0.20230501890182495
    2. '(map' → logprob: -1.7023050785064697
    3. '(_' → logprob: -7.577304840087891
    4. '(' → logprob: -7.952304840087891
    5. 'map' → logprob: -10.82730484008789
    6. '_' → logprob: -12.07730484008789
    7. '(int' → logprob: -14.82730484008789
    8. ' map' → logprob: -15.32730484008789
    9. '	map' → logprob: -15.32730484008789
    10. '_maps' → logprob: -15.82730484008789

Token 45: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.12054385989904404
    2. '_int' → logprob: -2.495543956756592
    3. 'int' → logprob: -3.495543956756592
    4. '<int' → logprob: -7.620543956756592
    5. '(' → logprob: -8.495543479919434
    6. '[int' → logprob: -10.870543479919434
    7. '=int' → logprob: -10.995543479919434
    8. ',int' → logprob: -11.120543479919434
    9. ' int' → logprob: -11.120543479919434
    10. 'ints' → logprob: -12.495543479919434

Token 46: ',' (ID: 11)
  Prédit: '(get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(get' → logprob: -0.05160069838166237
    2. '))' → logprob: -4.426600933074951
    3. '()))' → logprob: -4.426600933074951
    4. '(' → logprob: -4.551600933074951
    5. ')' → logprob: -5.551600933074951
    6. ',get' → logprob: -5.801600933074951
    7. '(),' → logprob: -6.176600933074951
    8. ',' → logprob: -6.301600933074951
    9. '())' → logprob: -6.551600933074951
    10. '(map' → logprob: -6.801600933074951

Token 47: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.06253166496753693
    2. ' get' → logprob: -2.8125317096710205
    3. '(get' → logprob: -7.562531471252441
    4. ')get' → logprob: -10.312531471252441
    5. ')' → logprob: -11.937531471252441
    6. ',get' → logprob: -13.562531471252441
    7. 'list' → logprob: -14.187531471252441
    8. '	get' → logprob: -14.562531471252441
    9. '[get' → logprob: -14.687531471252441
    10. 'map' → logprob: -14.937531471252441

Token 48: '_input' (ID: 12507)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.485494464635849
    2. '_int' → logprob: -1.1104944944381714
    3. 'ints' → logprob: -3.860494375228882
    4. '_s' → logprob: -3.985494375228882
    5. '_input' → logprob: -4.485494613647461
    6. 'int' → logprob: -5.860494613647461
    7. '(s' → logprob: -7.235494613647461
    8. '_map' → logprob: -8.110494613647461
    9. ')' → logprob: -9.360494613647461
    10. '(_' → logprob: -9.735494613647461

Token 49: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -3.7146746763028204e-05
    2. '()))' → logprob: -10.75003719329834
    3. '()' → logprob: -11.25003719329834
    4. '())' → logprob: -13.75003719329834
    5. ' ().' → logprob: -15.00003719329834
    6. '())))' → logprob: -15.00003719329834
    7. '().__' → logprob: -15.62503719329834
    8. '))' → logprob: -15.87503719329834
    9. '()[' → logprob: -16.250036239624023
    10. ')' → logprob: -16.500036239624023

Token 50: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -9.088346359931165e-07
    2. ' split' → logprob: -14.875000953674316
    3. 'strip' → logprob: -15.375000953674316
    4. ')' → logprob: -15.500000953674316
    5. '(split' → logprob: -17.625
    6. 'spl' → logprob: -17.75
    7. 'rstrip' → logprob: -18.125
    8. '.split' → logprob: -18.875
    9. 's' → logprob: -19.0
    10. '))' → logprob: -19.75

Token 51: '()))

' (ID: 125972)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.04136756435036659
    2. '))' → logprob: -3.291367530822754
    3. '())' → logprob: -6.041367530822754
    4. '()' → logprob: -7.041367530822754
    5. ')' → logprob: -9.916367530822754
    6. '()))
' → logprob: -11.791367530822754
    7. '(' → logprob: -12.666367530822754
    8. '())))' → logprob: -12.916367530822754
    9. '()));' → logprob: -13.416367530822754
    10. '()))

' → logprob: -14.041367530822754

Token 52: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.4097583591938019
    2. 'd' → logprob: -2.2847583293914795
    3. 'n' → logprob: -2.5347583293914795
    4. '
' → logprob: -2.9097583293914795
    5. 'class' → logprob: -3.1597583293914795
    6. '\' → logprob: -3.6597583293914795
    7. '#' → logprob: -4.534758567810059
    8. '\n' → logprob: -4.534758567810059
    9. '```' → logprob: -5.784758567810059
    10. '' → logprob: -6.534758567810059

Token 53: ' initialize' (ID: 18400)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.32870253920555115
    2. ' bfs' → logprob: -1.4537025690078735
    3. ' solve' → logprob: -3.453702449798584
    4. 'main' → logprob: -4.703702449798584
    5. 'solve' → logprob: -5.953702449798584
    6. ' dfs' → logprob: -7.453702449798584
    7. ' process' → logprob: -7.953702449798584
    8. ' is' → logprob: -8.078702926635742
    9. ' max' → logprob: -8.078702926635742
    10. ' solution' → logprob: -8.328702926635742

Token 54: '_tree' (ID: 27118)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.4957020878791809
    2. '()' → logprob: -1.2457020282745361
    3. '(' → logprob: -2.745702028274536
    4. '():' → logprob: -5.120702266693115
    5. '_array' → logprob: -5.745702266693115
    6. '_map' → logprob: -5.870702266693115
    7. '_states' → logprob: -5.870702266693115
    8. '(_' → logprob: -6.120702266693115
    9. '_parameters' → logprob: -6.495702266693115
    10. '_queue' → logprob: -6.495702266693115

Token 55: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.41485631465911865
    2. '():' → logprob: -1.1648563146591187
    3. '(size' → logprob: -4.664856433868408
    4. '(n' → logprob: -5.039856433868408
    5. '()' → logprob: -5.414856433868408
    6. '(node' → logprob: -6.164856433868408
    7. '(depth' → logprob: -7.039856433868408
    8. ' (' → logprob: -7.414856433868408
    9. '(num' → logprob: -7.539856433868408
    10. ' ():' → logprob: -7.789856433868408

Token 56: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.039567094296216965
    2. ',' → logprob: -3.289566993713379
    3. '):
' → logprob: -7.289566993713379
    4. ')' → logprob: -8.039566993713379
    5. ' ):' → logprob: -8.164566993713379
    6. ',n' → logprob: -8.914566993713379
    7. ' ,' → logprob: -10.414566993713379
    8. '(n' → logprob: -10.664566993713379
    9. '   ' → logprob: -11.039566993713379
    10. ':' → logprob: -11.289566993713379

Token 57: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -6.110668618930504e-05
    2. '	return' → logprob: -11.50006103515625
    3. ' return' → logprob: -11.87506103515625
    4. '   ' → logprob: -11.87506103515625
    5. '	tree' → logprob: -11.87506103515625
    6. 'return' → logprob: -12.25006103515625
    7. '    
' → logprob: -12.25006103515625
    8. '```' → logprob: -12.37506103515625
    9. '
' → logprob: -12.75006103515625
    10. '(tree' → logprob: -12.87506103515625

Token 58: ' return' (ID: 622)
  Prédit: ' ['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.2667355239391327
    2. '[' → logprob: -2.016735553741455
    3. ' return' → logprob: -3.016735553741455
    4. '   ' → logprob: -3.266735553741455
    5. 'return' (adapté à ' return') → logprob: -5.266735553741455
    6. ' [[]' → logprob: -5.641735553741455
    7. ' tree' → logprob: -6.266735553741455
    8. 'tree' → logprob: -7.141735553741455
    9. '[node' → logprob: -7.641735553741455
    10. '[]' → logprob: -7.891735553741455

Token 59: ' [[]' (ID: 182908)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.6336179375648499
    2. ' [' → logprob: -0.7586179375648499
    3. ' [[]' → logprob: -7.383617877960205
    4. '[n' → logprob: -8.633618354797363
    5. '[node' → logprob: -9.883618354797363
    6. '[-' → logprob: -10.008618354797363
    7. '{' → logprob: -10.883618354797363
    8. ' [{}' → logprob: -11.008618354797363
    9. 'deque' → logprob: -11.133618354797363
    10. ' defaultdict' → logprob: -11.258618354797363

Token 60: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.4743625819683075
    2. ' for' → logprob: -0.9743626117706299
    3. ')' → logprob: -8.59936237335205
    4. ']' → logprob: -9.59936237335205
    5. ' ' → logprob: -11.09936237335205
    6. '	for' → logprob: -11.47436237335205
    7. '   ' → logprob: -12.34936237335205
    8. '```' → logprob: -14.34936237335205
    9. 'n' → logprob: -14.47436237335205
    10. ',' → logprob: -14.59936237335205

Token 61: ' _' (ID: 1175)
  Prédit: ' _'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.3902603089809418
    2. '_' → logprob: -1.2652603387832642
    3. ' ' → logprob: -3.7652602195739746
    4. ' range' → logprob: -4.265260219573975
    5. ' in' → logprob: -6.140260219573975
    6. ' i' → logprob: -7.015260219573975
    7. 'range' → logprob: -7.390260219573975
    8. '_range' → logprob: -10.515260696411133
    9. '(range' → logprob: -11.765260696411133
    10. 'i' → logprob: -12.265260696411133

Token 62: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.10108745098114014
    2. ' in' → logprob: -2.3510875701904297
    3. 'range' → logprob: -7.10108757019043
    4. ' ' → logprob: -10.22608757019043
    5. 'n' → logprob: -11.85108757019043
    6. 'i' → logprob: -12.60108757019043
    7. ' range' → logprob: -12.72608757019043
    8. '  ' → logprob: -13.60108757019043
    9. ' _' → logprob: -13.85108757019043
    10. '   ' → logprob: -13.97608757019043

Token 63: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0003384422743692994
    2. ' range' → logprob: -8.000338554382324
    3. '(range' → logprob: -13.625338554382324
    4. '	range' → logprob: -14.125338554382324
    5. '   ' → logprob: -15.375338554382324
    6. ' ' → logprob: -15.375338554382324
    7. '```' → logprob: -16.250337600708008
    8. ')' → logprob: -16.375337600708008
    9. '  ' → logprob: -16.375337600708008
    10. 'rang' → logprob: -16.500337600708008

Token 64: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.000912774819880724
    2. '(' → logprob: -7.000912666320801
    3. ' (' → logprob: -13.6259126663208
    4. '((' → logprob: -19.000913619995117
    5. '(N' → logprob: -19.000913619995117
    6. ')(' → logprob: -19.250913619995117
    7. '(
' → logprob: -19.500913619995117
    8. '(s' → logprob: -19.750913619995117
    9. '(nn' → logprob: -19.750913619995117
    10. '](' → logprob: -19.875913619995117

Token 65: ' +' (ID: 659)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')]' → logprob: -9.014684110297821e-06
    2. ' )' → logprob: -11.875008583068848
    3. ')' → logprob: -13.500008583068848
    4. ')]
' → logprob: -14.750008583068848
    5. ']' → logprob: -15.875008583068848
    6. '+' → logprob: -16.500009536743164
    7. ')}' → logprob: -17.625009536743164
    8. ')].' → logprob: -17.625009536743164
    9. ' ]' → logprob: -17.875009536743164
    10. '))' → logprob: -17.875009536743164

Token 66: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.004622611217200756
    2. ' ' → logprob: -5.379622459411621
    3. '2' → logprob: -13.004622459411621
    4. ')' → logprob: -16.004623413085938
    5. '   ' → logprob: -17.379623413085938
    6. '(' → logprob: -18.504623413085938
    7. '7' → logprob: -18.629623413085938
    8. '  ' → logprob: -18.879623413085938
    9. '```' → logprob: -19.004623413085938
    10. '１' → logprob: -19.629623413085938

Token 67: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.1008713702030946e-06
    2. ' ' → logprob: -13.250001907348633
    3. '2' → logprob: -15.250001907348633
    4. '```' → logprob: -18.250001907348633
    5. ')' → logprob: -18.375001907348633
    6. '   ' → logprob: -19.187501907348633
    7. '１' → logprob: -19.625001907348633
    8. '(' → logprob: -19.812501907348633
    9. '7' → logprob: -20.187501907348633
    10. '0' → logprob: -20.437501907348633

Token 68: ')]

' (ID: 56882)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.000629279064014554
    2. ')' → logprob: -7.500629425048828
    3. ']' → logprob: -9.500629425048828
    4. ')]
' → logprob: -15.000629425048828
    5. ' )' → logprob: -15.375629425048828
    6. ')])' → logprob: -15.500629425048828
    7. '])' → logprob: -15.625629425048828
    8. ')],' → logprob: -15.750629425048828
    9. ')
' → logprob: -16.625629425048828
    10. '])]' → logprob: -16.750629425048828

Token 69: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0013111939188092947
    2. '
' → logprob: -6.751311302185059
    3. '```' → logprob: -9.126311302185059
    4. '

' → logprob: -11.751311302185059
    5. 'de' → logprob: -12.001311302185059
    6. '<|end|>' → logprob: -12.376311302185059
    7. 'class' → logprob: -12.626311302185059
    8. 'ndef' → logprob: -12.751311302185059
    9. '
' → logprob: -13.251311302185059
    10. '\' → logprob: -13.376311302185059

Token 70: ' read' (ID: 1729)
  Prédit: ' bfs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' bfs' → logprob: -0.09686443209648132
    2. ' add' → logprob: -2.5968644618988037
    3. 'b' → logprob: -4.471864223480225
    4. ' build' → logprob: -5.346864223480225
    5. 'add' → logprob: -6.971864223480225
    6. ' dfs' → logprob: -8.346864700317383
    7. ' BFS' → logprob: -8.846864700317383
    8. 'build' → logprob: -9.596864700317383
    9. ' read' → logprob: -10.096864700317383
    10. 'dfs' → logprob: -10.346864700317383

Token 71: '_edges' (ID: 68870)
  Prédit: '_edges'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_edges' → logprob: -0.25907793641090393
    2. '_tree' → logprob: -1.5090779066085815
    3. '_nodes' → logprob: -5.759078025817871
    4. '_edge' → logprob: -6.384078025817871
    5. '_' → logprob: -7.009078025817871
    6. '_parent' → logprob: -7.634078025817871
    7. '()' → logprob: -9.009078025817871
    8. '_graph' → logprob: -9.384078025817871
    9. '_connections' → logprob: -9.384078025817871
    10. '_input' → logprob: -9.509078025817871

Token 72: '(tree' (ID: 44909)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0014517827657982707
    2. '(' → logprob: -6.6264519691467285
    3. ' (' → logprob: -9.12645149230957
    4. '(num' → logprob: -12.12645149230957
    5. '```' → logprob: -12.37645149230957
    6. '():' → logprob: -14.12645149230957
    7. '(N' → logprob: -14.12645149230957
    8. '}(' → logprob: -14.37645149230957
    9. '("("' → logprob: -14.50145149230957
    10. '>(' → logprob: -14.50145149230957

Token 73: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00894603505730629
    2. ',n' → logprob: -4.883945941925049
    3. '(n' → logprob: -7.008945941925049
    4. ' ,' → logprob: -7.758945941925049
    5. '   ' → logprob: -12.383946418762207
    6. ',num' → logprob: -13.883946418762207
    7. 'n' → logprob: -14.258946418762207
    8. ' (' → logprob: -15.008946418762207
    9. ',size' → logprob: -15.133946418762207
    10. '):' → logprob: -15.133946418762207

Token 74: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.032988596707582474
    2. ' n' → logprob: -3.5329885482788086
    3. 'edges' → logprob: -6.407988548278809
    4. 'num' → logprob: -7.407988548278809
    5. ' edges' → logprob: -7.907988548278809
    6. 'm' → logprob: -8.157988548278809
    7. '   ' → logprob: -8.282988548278809
    8. 'edge' → logprob: -11.032988548278809
    9. '```' → logprob: -11.032988548278809
    10. 'count' → logprob: -11.407988548278809

Token 75: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.09045524150133133
    2. '):
' → logprob: -2.4654552936553955
    3. ',' → logprob: -6.590455055236816
    4. ')' → logprob: -9.840455055236816
    5. ' ):' → logprob: -10.090455055236816
    6. '):
' → logprob: -10.215455055236816
    7. '   ' → logprob: -12.590455055236816
    8. ' ):
' → logprob: -13.215455055236816
    9. ':' → logprob: -13.590455055236816
    10. ',n' → logprob: -14.090455055236816

Token 76: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.26439833641052246
    2. 'for' → logprob: -1.8893983364105225
    3. ' for' → logprob: -2.6393983364105225
    4. '	for' → logprob: -4.764398574829102
    5. '
' → logprob: -7.139398574829102
    6. '    
' → logprob: -8.014398574829102
    7. '```' → logprob: -10.264398574829102
    8. ' ' → logprob: -11.389398574829102
    9. ')' → logprob: -11.389398574829102
    10. '<|end|>' → logprob: -11.889398574829102

Token 77: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.3874953091144562
    2. ' for' → logprob: -1.3874952793121338
    3. '   ' → logprob: -2.637495279312134
    4. '	for' → logprob: -12.637495040893555
    5. ' ' → logprob: -13.512495040893555
    6. '```' → logprob: -15.137495040893555
    7. '
' → logprob: -16.637495040893555
    8. '  ' → logprob: -16.762495040893555
    9. '    
' → logprob: -17.387495040893555
    10. '    ' → logprob: -18.762495040893555

Token 78: ' _' (ID: 1175)
  Prédit: ' _'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.0005044196150265634
    2. '_' → logprob: -7.625504493713379
    3. ' i' → logprob: -11.250504493713379
    4. ' ' → logprob: -12.750504493713379
    5. ' ' → logprob: -14.750504493713379
    6. ' in' → logprob: -16.000503540039062
    7. ' range' → logprob: -17.000503540039062
    8. '_i' → logprob: -18.375503540039062
    9. ' ‌' → logprob: -18.500503540039062
    10. '_range' → logprob: -18.625503540039062

Token 79: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.16784721612930298
    2. 'in' → logprob: -1.9178471565246582
    3. ' ' → logprob: -5.167847156524658
    4. 'n' → logprob: -7.167847156524658
    5. 's' → logprob: -8.292847633361816
    6. '_' → logprob: -8.292847633361816
    7. 'range' → logprob: -8.292847633361816
    8. ' _' → logprob: -10.042847633361816
    9. '  ' → logprob: -10.417847633361816
    10. '```' → logprob: -10.542847633361816

Token 80: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.00044592362246476114
    2. ' range' → logprob: -8.125446319580078
    3. '(range' → logprob: -8.875446319580078
    4. '	range' → logprob: -11.875446319580078
    5. 'ange' → logprob: -13.875446319580078
    6. '```' → logprob: -14.250446319580078
    7. '.range' → logprob: -15.000446319580078
    8. ' ' → logprob: -15.250446319580078
    9. '_range' → logprob: -15.250446319580078
    10. 'x' → logprob: -15.875446319580078

Token 81: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0010379294399172068
    2. '(' → logprob: -6.876038074493408
    3. ' (' → logprob: -12.37603759765625
    4. ' n' → logprob: -14.12603759765625
    5. '(
' → logprob: -17.37603759765625
    6. 'n' → logprob: -17.37603759765625
    7. '	n' → logprob: -18.00103759765625
    8. ' ' → logprob: -18.37603759765625
    9. '(nn' → logprob: -19.25103759765625
    10. '(

' → logprob: -19.25103759765625

Token 82: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.3869231939315796
    2. '-' → logprob: -1.1369231939315796
    3. ')' → logprob: -10.761922836303711
    4. '1' → logprob: -11.136922836303711
    5. ' ' → logprob: -11.761922836303711
    6. '   ' → logprob: -12.886922836303711
    7. ' )' → logprob: -13.261922836303711
    8. '):' → logprob: -14.511922836303711
    9. '):
' → logprob: -14.511922836303711
    10. ' ' → logprob: -14.824422836303711

Token 83: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.03804895281791687
    2. ' ' → logprob: -3.2880489826202393
    3. '<|end|>' → logprob: -11.91304874420166
    4. ')' → logprob: -14.91304874420166
    5. '<|end|>' → logprob: -16.413049697875977
    6. '   ' → logprob: -16.538049697875977
    7. '  ' → logprob: -16.663049697875977
    8. '2' → logprob: -17.350549697875977
    9. '0' → logprob: -17.350549697875977
    10. '```' → logprob: -17.975549697875977

Token 84: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -8.061054359131958e-06
    2. ' ' → logprob: -11.750007629394531
    3. ')' → logprob: -15.875007629394531
    4. '<|end|>' → logprob: -17.62500762939453
    5. '```' → logprob: -18.87500762939453
    6. '2' → logprob: -19.00000762939453
    7. '۱' → logprob: -19.37500762939453
    8. '１' → logprob: -19.43750762939453
    9. '...' → logprob: -19.62500762939453
    10. '0' → logprob: -19.68750762939453

Token 85: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0018529583467170596
    2. ':' → logprob: -6.751852989196777
    3. ')' → logprob: -8.001852989196777
    4. '):
' → logprob: -8.126852989196777
    5. ' ):' → logprob: -10.001852989196777
    6. '():' → logprob: -13.126852989196777
    7. ',' → logprob: -13.251852989196777
    8. '   ' → logprob: -13.751852989196777
    9. '):
' → logprob: -14.251852989196777
    10. ' )' → logprob: -15.251852989196777

Token 86: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.016840782016515732
    2. ',' → logprob: -4.891840934753418
    3. '<|end|>' → logprob: -5.141840934753418
    4. '   ' → logprob: -7.016840934753418
    5. '        
' → logprob: -7.641840934753418
    6. ')' → logprob: -7.891840934753418
    7. '    ' → logprob: -8.516840934753418
    8. ':' → logprob: -8.766840934753418
    9. ' ' → logprob: -8.891840934753418
    10. '    
' → logprob: -9.016840934753418

Token 87: ' add' (ID: 1147)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.12856149673461914
    2. ' u' → logprob: -2.128561496734619
    3. 'a' → logprob: -6.503561496734619
    4. '   ' → logprob: -9.628561019897461
    5. ' a' → logprob: -9.878561019897461
    6. '	u' → logprob: -12.128561019897461
    7. '       ' → logprob: -12.253561019897461
    8. '```' → logprob: -13.003561019897461
    9. '    ' → logprob: -13.753561019897461
    10. ' node' → logprob: -14.003561019897461

Token 88: '_edge' (ID: 43226)
  Prédit: '_edge'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_edge' → logprob: -0.05626309663057327
    2. 'ed' → logprob: -3.4312632083892822
    3. '_' → logprob: -4.181262969970703
    4. '_edges' → logprob: -6.306262969970703
    5. '(' → logprob: -6.806262969970703
    6. 'edge' → logprob: -7.056262969970703
    7. '_line' → logprob: -7.306262969970703
    8. '(_' → logprob: -7.431262969970703
    9. '_child' → logprob: -8.056262969970703
    10. '_node' → logprob: -8.431262969970703

Token 89: '(tree' (ID: 44909)
  Prédit: '(tree'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(tree' → logprob: -0.09301174432039261
    2. '(' → logprob: -2.4680118560791016
    3. '<|end|>' → logprob: -6.468011856079102
    4. '(*' → logprob: -6.593011856079102
    5. ' (' → logprob: -8.218011856079102
    6. '_' → logprob: -8.843011856079102
    7. '<|end|>' → logprob: -8.968011856079102
    8. ')' → logprob: -9.093011856079102
    9. '(
' → logprob: -9.968011856079102
    10. '(_' → logprob: -10.343011856079102

Token 90: ')

' (ID: 1029)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.2851059138774872
    2. '<|end|>' → logprob: -2.1601059436798096
    3. ')' → logprob: -2.9101059436798096
    4. '(' → logprob: -3.0351059436798096
    5. ' ,' → logprob: -4.5351057052612305
    6. '<|end|>' → logprob: -5.6601057052612305
    7. '(get' → logprob: -5.9101057052612305
    8. '(next' → logprob: -6.4101057052612305
    9. '(read' → logprob: -6.6601057052612305
    10. ',get' → logprob: -7.0351057052612305

Token 91: 'def' (ID: 1314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.49519896507263184
    2. '(tree' → logprob: -0.9951989650726318
    3. 'def' → logprob: -4.870199203491211
    4. '()' → logprob: -5.245199203491211
    5. '(sys' → logprob: -5.995199203491211
    6. '<|end|>' → logprob: -6.745199203491211
    7. '(
' → logprob: -6.870199203491211
    8. '(def' → logprob: -7.370199203491211
    9. '(s' → logprob: -7.745199203491211
    10. '```' → logprob: -7.870199203491211

Token 92: ' add' (ID: 1147)
  Prédit: ' add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' add' → logprob: -0.0028312690556049347
    2. 'add' → logprob: -6.37783145904541
    3. ' read' → logprob: -7.75283145904541
    4. '_add' → logprob: -8.25283145904541
    5. ' def' → logprob: -8.37783145904541
    6. '(add' → logprob: -9.87783145904541
    7. ' _' → logprob: -10.00283145904541
    8. 'def' → logprob: -10.37783145904541
    9. '_' → logprob: -11.00283145904541
    10. ' ' → logprob: -11.62783145904541

Token 93: '_edge' (ID: 43226)
  Prédit: '_edge'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_edge' → logprob: -0.0017252764664590359
    2. '_' → logprob: -6.876725196838379
    3. '_edges' → logprob: -7.501725196838379
    4. ' _' → logprob: -10.501725196838379
    5. '_node' → logprob: -11.001725196838379
    6. ')_' → logprob: -11.501725196838379
    7. '```' → logprob: -11.501725196838379
    8. '_ed' → logprob: -11.626725196838379
    9. '_line' → logprob: -12.126725196838379
    10. '_e' → logprob: -12.251725196838379

Token 94: '(tree' (ID: 44909)
  Prédit: '(tree'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(tree' → logprob: -0.003807669272646308
    2. '(' → logprob: -5.628807544708252
    3. ' (' → logprob: -8.50380802154541
    4. '(Tree' → logprob: -13.37880802154541
    5. '(table' → logprob: -14.25380802154541
    6. '(parent' → logprob: -15.00380802154541
    7. '(node' → logprob: -15.00380802154541
    8. '(t' → logprob: -15.12880802154541
    9. '(thread' → logprob: -15.87880802154541
    10. '	tree' → logprob: -15.87880802154541

Token 95: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00023965541913639754
    2. ' ,' → logprob: -8.750239372253418
    3. '):' → logprob: -9.625239372253418
    4. ',node' → logprob: -12.375239372253418
    5. ',t' → logprob: -12.750239372253418
    6. '   ' → logprob: -13.125239372253418
    7. '):
' → logprob: -13.875239372253418
    8. '(tree' → logprob: -14.000239372253418
    9. ',line' → logprob: -14.375239372253418
    10. ')' → logprob: -14.375239372253418

Token 96: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1119178831577301
    2. ' line' → logprob: -2.4869179725646973
    3. ' u' → logprob: -5.361917972564697
    4. 'line' → logprob: -5.486917972564697
    5. ' node' → logprob: -5.486917972564697
    6. ' (' → logprob: -6.986917972564697
    7. ' edge' → logprob: -7.111917972564697
    8. '(line' → logprob: -7.111917972564697
    9. ' a' → logprob: -7.486917972564697
    10. '(u' → logprob: -7.611917972564697

Token 97: ' a' (ID: 261)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.15714530646800995
    2. ' u' → logprob: -2.6571452617645264
    3. 'a' (adapté à ' a') → logprob: -3.1571452617645264
    4. '   ' → logprob: -3.5321452617645264
    5. ' a' → logprob: -6.0321455001831055
    6. 'node' → logprob: -8.532145500183105
    7. '	u' → logprob: -8.657145500183105
    8. '    
' → logprob: -9.032145500183105
    9. 'from' → logprob: -9.532145500183105
    10. ' node' → logprob: -9.657145500183105

Token 98: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.016383538022637367
    2. ' ,' → logprob: -4.141383647918701
    3. ',b' → logprob: -8.141383171081543
    4. ',a' → logprob: -11.016383171081543
    5. ' ' → logprob: -11.141383171081543
    6. '<|end|>' → logprob: -11.516383171081543
    7. ',d' → logprob: -13.016383171081543
    8. ',int' → logprob: -13.266383171081543
    9. '_,' → logprob: -13.391383171081543
    10. ',p' → logprob: -13.391383171081543

Token 99: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.011048054322600365
    2. ' b' → logprob: -4.511047840118408
    3. ' ' → logprob: -16.01104736328125
    4. '*b' → logprob: -17.13604736328125
    5. ',b' → logprob: -17.26104736328125
    6. '<|end|>' → logprob: -17.38604736328125
    7. ',' → logprob: -17.88604736328125
    8. '=' → logprob: -18.01104736328125
    9. '*' → logprob: -18.63604736328125
    10. '   ' → logprob: -18.76104736328125

Token 100: ',' (ID: 11)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3869137167930603
    2. ' =' → logprob: -1.136913776397705
    3. ',' → logprob: -10.261913299560547
    4. ')' → logprob: -12.261913299560547
    5. ')=' → logprob: -13.511913299560547
    6. '=int' → logprob: -15.386913299560547
    7. ' ' → logprob: -15.511913299560547
    8. '<|end|>' → logprob: -15.886913299560547
    9. '   ' → logprob: -16.011913299560547
    10. ' =
' → logprob: -16.261913299560547

Token 101: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.20442236959934235
    2. ' c' → logprob: -2.4544224739074707
    3. 'w' → logprob: -2.5794224739074707
    4. ' w' → logprob: -3.8294224739074707
    5. 'weight' → logprob: -7.704422473907471
    6. ' =' → logprob: -8.204421997070312
    7. ' ' → logprob: -8.704421997070312
    8. ' weight' → logprob: -9.079421997070312
    9. 'cost' → logprob: -9.329421997070312
    10. '=' → logprob: -9.454421997070312

Token 102: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6931495666503906
    2. ' =' → logprob: -0.6931495666503906
    3. ',' → logprob: -13.19314956665039
    4. ')' → logprob: -15.19314956665039
    5. '＝' → logprob: -16.31814956665039
    6. ' ' → logprob: -16.56814956665039
    7. ')=' → logprob: -17.19314956665039
    8. '   ' → logprob: -17.56814956665039
    9. ' =)' → logprob: -17.56814956665039
    10. '=

' → logprob: -17.69314956665039

Token 103: ' map' (ID: 4014)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.3761695623397827
    2. ' map' → logprob: -1.5011695623397827
    3. 'list' → logprob: -2.5011696815490723
    4. 'map' → logprob: -4.751169681549072
    5. ' ' → logprob: -12.501169204711914
    6. ' tuple' → logprob: -12.626169204711914
    7. '	list' → logprob: -13.376169204711914
    8. '	map' → logprob: -13.626169204711914
    9. 'tuple' → logprob: -14.001169204711914
    10. 'int' → logprob: -15.001169204711914

Token 104: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.019103677943348885
    2. '(int' → logprob: -4.019103527069092
    3. 'int' → logprob: -7.144103527069092
    4. '_' → logprob: -9.64410400390625
    5. '(' → logprob: -10.14410400390625
    6. '(_' → logprob: -10.39410400390625
    7. '<int' → logprob: -12.14410400390625
    8. '_(' → logprob: -12.14410400390625
    9. 'Int' → logprob: -12.26910400390625
    10. '```' → logprob: -12.64410400390625

Token 105: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -1.1472419600977446e-06
    2. ' s' → logprob: -14.000000953674316
    3. '```' → logprob: -16.375001907348633
    4. '(s' → logprob: -16.625001907348633
    5. 'ss' → logprob: -17.500001907348633
    6. '()' → logprob: -17.625001907348633
    7. '   ' → logprob: -17.750001907348633
    8. '_s' → logprob: -18.000001907348633
    9. 'с' → logprob: -18.125001907348633
    10. ',' → logprob: -18.125001907348633

Token 106: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0006945623317733407
    2. '()
' → logprob: -7.375694751739502
    3. '();' → logprob: -10.500694274902344
    4. '(' → logprob: -11.125694274902344
    5. '()

' → logprob: -11.250694274902344
    6. ' ()' → logprob: -13.250694274902344
    7. '())' → logprob: -13.375694274902344
    8. '()\' → logprob: -13.500694274902344
    9. '<|end|>' → logprob: -13.625694274902344
    10. '(),' → logprob: -13.625694274902344

Token 107: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.032326556742191315
    2. '<|end|>' → logprob: -4.157326698303223
    3. '	tree' → logprob: -5.032326698303223
    4. 'tree' → logprob: -5.282326698303223
    5. '
' → logprob: -6.282326698303223
    6. '    
' → logprob: -7.407326698303223
    7. '(tree' → logprob: -7.657326698303223
    8. '```' → logprob: -7.782326698303223
    9. 'def' → logprob: -8.407326698303223
    10. ' tree' → logprob: -8.532326698303223

Token 108: ' tree' (ID: 8165)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8895387053489685
    2. 'tree' (adapté à ' tree') → logprob: -1.2645387649536133
    3. ' tree' → logprob: -1.2645387649536133
    4. '	tree' → logprob: -4.014538764953613
    5. '(tree' → logprob: -6.264538764953613
    6. ' ' → logprob: -6.889538764953613
    7. '<|end|>' → logprob: -6.889538764953613
    8. '
' → logprob: -7.514538764953613
    9. '```' → logprob: -7.889538764953613
    10. ' 
' → logprob: -8.264538764953613

Token 109: '[a' (ID: 32035)
  Prédit: '[a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[a' → logprob: -3.7697225252486533e-06
    2. '[' → logprob: -13.000003814697266
    3. 'a' → logprob: -13.875003814697266
    4. '[b' → logprob: -15.250003814697266
    5. '```' → logprob: -16.250003814697266
    6. ' [' → logprob: -16.750003814697266
    7. '[c' → logprob: -17.500003814697266
    8. '[A' → logprob: -18.250003814697266
    9. ')[' → logprob: -18.250003814697266
    10. '[s' → logprob: -18.875003814697266

Token 110: '].' (ID: 1651)
  Prédit: '].'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '].' → logprob: -0.0022907331585884094
    2. ']' → logprob: -6.502290725708008
    3. '][' → logprob: -7.252290725708008
    4. '[a' → logprob: -10.377290725708008
    5. '[' → logprob: -10.752290725708008
    6. ' ].' → logprob: -11.002290725708008
    7. '   ' → logprob: -13.127290725708008
    8. '```' → logprob: -13.377290725708008
    9. '.append' → logprob: -13.502290725708008
    10. '[b' → logprob: -13.752290725708008

Token 111: 'append' (ID: 9132)
  Prédit: 'append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'append' → logprob: -1.6240566083070007e-06
    2. '.append' → logprob: -13.500001907348633
    3. ' append' → logprob: -15.375001907348633
    4. 'app' → logprob: -17.250001907348633
    5. '_append' → logprob: -19.250001907348633
    6. 'Append' → logprob: -19.375001907348633
    7. '	append' → logprob: -19.750001907348633
    8. 'appen' → logprob: -20.375001907348633
    9. '```' → logprob: -21.000001907348633
    10. ' ' → logprob: -21.375001907348633

Token 112: '([' (ID: 5194)
  Prédit: '(('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '((' → logprob: -6.76628842484206e-05
    2. '(' → logprob: -9.625067710876465
    3. '([' → logprob: -14.000067710876465
    4. '(b' → logprob: -14.125067710876465
    5. '(
' → logprob: -18.12506675720215
    6. '(('' → logprob: -18.25006675720215
    7. ' (' → logprob: -18.75006675720215
    8. '({'' → logprob: -19.00006675720215
    9. '   ' → logprob: -19.00006675720215
    10. '(B' → logprob: -19.25006675720215

Token 113: 'a' (ID: 64)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'b' → logprob: -2.939851037808694e-05
    2. ' b' → logprob: -10.500029563903809
    3. '   ' → logprob: -13.375029563903809
    4. '
' → logprob: -16.000028610229492
    5. '	b' → logprob: -16.625028610229492
    6. ')b' → logprob: -17.500028610229492
    7. '(b' → logprob: -18.000028610229492
    8. '```' → logprob: -18.375028610229492
    9. '  ' → logprob: -18.875028610229492
    10. '    
' → logprob: -19.000028610229492

Token 114: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.02229216694831848
    2. ',b' → logprob: -4.022292137145996
    3. 'b' → logprob: -6.022292137145996
    4. ' ,' → logprob: -6.772292137145996
    5. ' b' → logprob: -7.522292137145996
    6. ',
' → logprob: -11.772292137145996
    7. '<|end|>' → logprob: -12.272292137145996
    8. ',c' → logprob: -13.147292137145996
    9. ' ' → logprob: -13.397292137145996
    10. 'c' → logprob: -13.647292137145996

Token 115: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.06197250634431839
    2. ' b' → logprob: -2.8119726181030273
    3. '   ' → logprob: -13.561972618103027
    4. ' ' → logprob: -13.686972618103027
    5. '    ' → logprob: -14.311972618103027
    6. 'c' → logprob: -14.561972618103027
    7. '<|end|>' → logprob: -14.811972618103027
    8. ',b' → logprob: -15.186972618103027
    9. ',' → logprob: -15.436972618103027
    10. '	b' → logprob: -15.686972618103027

Token 116: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0012959542218595743
    2. ' ,' → logprob: -7.126296043395996
    3. ',c' → logprob: -7.626296043395996
    4. 'c' → logprob: -12.876296043395996
    5. ',
' → logprob: -14.501296043395996
    6. ' c' → logprob: -15.626296043395996
    7. '‌,' → logprob: -15.626296043395996
    8. ' ' → logprob: -16.12629508972168
    9. '   ' → logprob: -16.37629508972168
    10. ',

' → logprob: -16.87629508972168

Token 117: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.08897021412849426
    2. ' c' → logprob: -2.463970184326172
    3. '   ' → logprob: -11.463970184326172
    4. ' ' → logprob: -12.088970184326172
    5. '
' → logprob: -12.838970184326172
    6. '    ' → logprob: -12.963970184326172
    7. ')c' → logprob: -13.338970184326172
    8. '	c' → logprob: -13.463970184326172
    9. ',c' → logprob: -13.463970184326172
    10. ',' → logprob: -13.838970184326172

Token 118: '])
' (ID: 5169)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.0005171707598492503
    2. '])
' → logprob: -7.75051736831665
    3. ' ])' → logprob: -10.125516891479492
    4. ',' → logprob: -10.625516891479492
    5. ')' → logprob: -11.375516891479492
    6. ']' → logprob: -12.500516891479492
    7. '])

' → logprob: -12.500516891479492
    8. '])
' → logprob: -13.875516891479492
    9. ']);' → logprob: -14.625516891479492
    10. '   ' → logprob: -14.875516891479492

Token 119: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0005610156804323196
    2. '	tree' → logprob: -7.875561237335205
    3. 'tree' → logprob: -9.375560760498047
    4. '<|end|>' → logprob: -10.375560760498047
    5. ',' → logprob: -10.875560760498047
    6. ' tree' → logprob: -11.125560760498047
    7. ' ' → logprob: -12.000560760498047
    8. '```' → logprob: -12.250560760498047
    9. '(tree' → logprob: -12.375560760498047
    10. '.' → logprob: -12.750560760498047

Token 120: ' tree' (ID: 8165)
  Prédit: 'tree'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tree' (adapté à ' tree') → logprob: -0.232048898935318
    2. '   ' → logprob: -1.6070488691329956
    3. ' tree' → logprob: -5.232048988342285
    4. '	tree' → logprob: -6.732048988342285
    5. ' ' → logprob: -10.607048988342285
    6. '-tree' → logprob: -11.607048988342285
    7. '(tree' → logprob: -11.732048988342285
    8. '.tree' → logprob: -11.857048988342285
    9. '  ' → logprob: -12.107048988342285
    10. '```' → logprob: -12.482048988342285

Token 121: '[b' (ID: 40800)
  Prédit: '[b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[b' → logprob: -3.702754474943504e-05
    2. 'b' → logprob: -10.75003719329834
    3. '[' → logprob: -12.00003719329834
    4. '][' → logprob: -13.00003719329834
    5. '[a' → logprob: -13.25003719329834
    6. ' [' → logprob: -13.37503719329834
    7. '```' → logprob: -13.37503719329834
    8. ')[' → logprob: -14.37503719329834
    9. ' ' → logprob: -14.62503719329834
    10. '}[' → logprob: -15.75003719329834

Token 122: '].' (ID: 1651)
  Prédit: '].'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '].' → logprob: -0.0002273774443892762
    2. ' ].' → logprob: -9.750226974487305
    3. '.' → logprob: -9.875226974487305
    4. '.append' → logprob: -10.125226974487305
    5. ']' → logprob: -10.125226974487305
    6. '   ' → logprob: -10.500226974487305
    7. ').' → logprob: -12.625226974487305
    8. '][' → logprob: -12.750226974487305
    9. '[' → logprob: -13.750226974487305
    10. ' ' → logprob: -14.375226974487305

Token 123: 'append' (ID: 9132)
  Prédit: 'append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'append' → logprob: -4.008129963040119e-06
    2. ' append' → logprob: -13.375003814697266
    3. '.append' → logprob: -13.500003814697266
    4. 'appen' → logprob: -14.000003814697266
    5. '	append' → logprob: -15.875003814697266
    6. 'app' → logprob: -17.000003814697266
    7. '   ' → logprob: -17.125003814697266
    8. 'Append' → logprob: -18.625003814697266
    9. '```' → logprob: -18.750003814697266
    10. ' ' → logprob: -18.875003814697266

Token 124: '([' (ID: 5194)
  Prédit: '(['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '([' → logprob: -0.0009938681032508612
    2. '[' → logprob: -7.000993728637695
    3. '[a' → logprob: -10.000993728637695
    4. ' [' → logprob: -11.000993728637695
    5. '<|end|>' → logprob: -11.250993728637695
    6. ' ([' → logprob: -12.625993728637695
    7. '(' → logprob: -13.375993728637695
    8. '   ' → logprob: -14.375993728637695
    9. '[b' → logprob: -14.750993728637695
    10. '[A' → logprob: -15.500993728637695

Token 125: 'b' (ID: 65)
  Prédit: 'b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.1142440140247345
    2. 'a' → logprob: -2.239243984222412
    3. ' b' → logprob: -6.864243984222412
    4. ' a' → logprob: -8.86424446105957
    5. '[a' → logprob: -9.36424446105957
    6. '[b' → logprob: -9.48924446105957
    7. '   ' → logprob: -10.86424446105957
    8. '[' → logprob: -11.11424446105957
    9. ' ' → logprob: -11.73924446105957
    10. '    ' → logprob: -11.86424446105957

Token 126: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0006707399734295905
    2. ' ,' → logprob: -7.375670909881592
    3. ',a' → logprob: -10.250670433044434
    4. 'a' → logprob: -12.125670433044434
    5. '   ' → logprob: -13.250670433044434
    6. ' ' → logprob: -14.875670433044434
    7. ',
' → logprob: -14.875670433044434
    8. ',b' → logprob: -15.375670433044434
    9. ',c' → logprob: -15.625670433044434
    10. ' a' → logprob: -16.50067138671875

Token 127: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -8.590104698669165e-05
    2. ' a' → logprob: -9.375085830688477
    3. '<|end|>' → logprob: -14.875085830688477
    4. '   ' → logprob: -15.375085830688477
    5. ' ' → logprob: -15.375085830688477
    6. '  ' → logprob: -16.125085830688477
    7. 'c' → logprob: -16.625085830688477
    8. '    ' → logprob: -17.625085830688477
    9. ',a' → logprob: -17.875085830688477
    10. '
' → logprob: -17.875085830688477

Token 128: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0006192696164362133
    2. ' ,' → logprob: -7.500619411468506
    3. ',c' → logprob: -9.875618934631348
    4. 'c' → logprob: -11.250618934631348
    5. ',
' → logprob: -14.250618934631348
    6. ' c' → logprob: -15.000618934631348
    7. '```' → logprob: -15.375618934631348
    8. ' ' → logprob: -15.375618934631348
    9. '‌,' → logprob: -15.625618934631348
    10. '<|end|>' → logprob: -16.125619888305664

Token 129: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.003601974807679653
    2. ' c' → logprob: -5.628602027893066
    3. '   ' → logprob: -13.628602027893066
    4. ' ' → logprob: -15.253602027893066
    5. '  ' → logprob: -16.00360107421875
    6. '	c' → logprob: -16.00360107421875
    7. '
' → logprob: -16.87860107421875
    8. '    ' → logprob: -17.12860107421875
    9. ',c' → logprob: -17.50360107421875
    10. '```' → logprob: -17.50360107421875

Token 130: '])

' (ID: 21045)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -4.0484450437361374e-05
    2. '])
' → logprob: -10.375040054321289
    3. ')' → logprob: -12.500040054321289
    4. ' ])' → logprob: -12.500040054321289
    5. '   ' → logprob: -14.250040054321289
    6. '])
' → logprob: -15.375040054321289
    7. ')])' → logprob: -15.375040054321289
    8. ']' → logprob: -15.750040054321289
    9. '])

' → logprob: -16.37504005432129
    10. '])]' → logprob: -16.62504005432129

Token 131: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -4.5252596464706585e-05
    2. '
' → logprob: -10.250044822692871
    3. '```' → logprob: -13.000044822692871
    4. 'deque' → logprob: -13.125044822692871
    5. '<|end|>' → logprob: -13.875044822692871
    6. 'visited' → logprob: -14.000044822692871
    7. '#' → logprob: -14.250044822692871
    8. ':def' → logprob: -14.375044822692871
    9. 'ndef' → logprob: -14.750044822692871
    10. ' def' → logprob: -14.875044822692871

Token 132: ' initialize' (ID: 18400)
  Prédit: ' bfs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' bfs' → logprob: -0.01650947704911232
    2. 'b' → logprob: -4.141509532928467
    3. ' dfs' → logprob: -8.391509056091309
    4. ' find' → logprob: -9.516509056091309
    5. 'dfs' → logprob: -9.641509056091309
    6. 'd' → logprob: -10.141509056091309
    7. ' solve' → logprob: -11.016509056091309
    8. ' main' → logprob: -11.766509056091309
    9. 'def' → logprob: -12.016509056091309
    10. ' d' → logprob: -12.391509056091309

Token 133: '_ans' (ID: 146254)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -1.1310759782791138
    2. '_dist' → logprob: -1.1310759782791138
    3. '_queue' → logprob: -1.8810759782791138
    4. '(n' → logprob: -2.881075859069824
    5. '_distance' → logprob: -2.881075859069824
    6. '(' → logprob: -4.506075859069824
    7. '_par' → logprob: -4.756075859069824
    8. '_depth' → logprob: -4.881075859069824
    9. '_parent' → logprob: -5.006075859069824
    10. ' (' → logprob: -5.256075859069824

Token 134: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.003712784731760621
    2. '(' → logprob: -6.0037126541137695
    3. ' (' → logprob: -7.2537126541137695
    4. ',' → logprob: -8.87871265411377
    5. '(s' → logprob: -9.87871265411377
    6. 's' → logprob: -9.87871265411377
    7. '():' → logprob: -9.87871265411377
    8. '():
' → logprob: -10.00371265411377
    9. '   ' → logprob: -10.50371265411377
    10. '(N' → logprob: -11.00371265411377

Token 135: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.05622467026114464
    2. '):
' → logprob: -2.9312245845794678
    3. ',' → logprob: -7.556224822998047
    4. ')' → logprob: -7.681224822998047
    5. ' ):' → logprob: -8.181224822998047
    6. '):
' → logprob: -10.056224822998047
    7. '=' → logprob: -10.931224822998047
    8. ':' → logprob: -12.431224822998047
    9. ' ):
' → logprob: -12.556224822998047
    10. '):

' → logprob: -13.306224822998047

Token 136: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.005568244494497776
    2. 'return' → logprob: -5.880568027496338
    3. ' return' → logprob: -6.130568027496338
    4. '[' → logprob: -7.755568027496338
    5. '[-' → logprob: -10.130568504333496
    6. ' [' → logprob: -10.380568504333496
    7. '[]' → logprob: -10.505568504333496
    8. ' [-' → logprob: -11.380568504333496
    9. ' =' → logprob: -11.755568504333496
    10. '    ' → logprob: -11.755568504333496

Token 137: ' ans' (ID: 3345)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -1.3419219255447388
    2. '   ' → logprob: -1.5919219255447388
    3. ' return' → logprob: -1.7169219255447388
    4. ' [' → logprob: -1.8419219255447388
    5. 'return' → logprob: -2.466921806335449
    6. '[-' → logprob: -2.716921806335449
    7. ' [-' → logprob: -3.091921806335449
    8. '[n' → logprob: -8.96692180633545
    9. ' ' → logprob: -9.09192180633545
    10. '[]' → logprob: -10.09192180633545

Token 138: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3133270740509033
    2. ' =' → logprob: -1.3133270740509033
    3. '=[]' → logprob: -11.188326835632324
    4. '[' → logprob: -11.313326835632324
    5. 's' → logprob: -11.688326835632324
    6. '=[' → logprob: -11.938326835632324
    7. '[]' → logprob: -12.688326835632324
    8. '```' → logprob: -12.688326835632324
    9. '=[]
' → logprob: -13.313326835632324
    10. ')' → logprob: -13.313326835632324

Token 139: ' [-' (ID: 20191)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.7561120986938477
    2. ' [' → logprob: -1.0061120986938477
    3. '[-' → logprob: -2.2561120986938477
    4. ' [-' → logprob: -2.8811120986938477
    5. '[n' → logprob: -6.131112098693848
    6. '[a' → logprob: -7.631112098693848
    7. '[int' → logprob: -8.131112098693848
    8. '[[' → logprob: -8.381112098693848
    9. '   ' → logprob: -9.006112098693848
    10. '['' → logprob: -9.256112098693848

Token 140: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0004223323194310069
    2. '10' → logprob: -8.375422477722168
    3. 'float' → logprob: -8.875422477722168
    4. '2' → logprob: -10.375422477722168
    5. '100' → logprob: -12.500422477722168
    6. 'int' → logprob: -12.500422477722168
    7. 'sys' → logprob: -13.250422477722168
    8. 'inf' → logprob: -13.250422477722168
    9. ' ' → logprob: -13.375422477722168
    10. '(' → logprob: -13.500422477722168

Token 141: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.004509988706558943
    2. ' for' → logprob: -5.754509925842285
    3. ' ]' → logprob: -7.504509925842285
    4. ']*' → logprob: -7.629509925842285
    5. ']*(' → logprob: -8.629509925842285
    6. 'for' → logprob: -9.254509925842285
    7. ')' → logprob: -11.879509925842285
    8. ',' → logprob: -12.004509925842285
    9. ']+' → logprob: -12.379509925842285
    10. '']' → logprob: -14.254509925842285

Token 142: ' *' (ID: 425)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.7993864417076111
    2. ']' → logprob: -1.2993865013122559
    3. ' *' → logprob: -2.299386501312256
    4. '*' → logprob: -2.674386501312256
    5. 'for' → logprob: -2.799386501312256
    6. '*(' → logprob: -3.799386501312256
    7. ')' → logprob: -4.549386501312256
    8. ']*(' → logprob: -5.049386501312256
    9. ' ]' → logprob: -5.799386501312256
    10. '(n' → logprob: -6.549386501312256

Token 143: ' (' (ID: 350)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.1445908099412918
    2. ' (' → logprob: -2.0195908546447754
    3. '(' → logprob: -6.269590854644775
    4. 'n' → logprob: -11.269590377807617
    5. ' n' → logprob: -12.769590377807617
    6. '
' → logprob: -13.144590377807617
    7. '((' → logprob: -14.269590377807617
    8. '   ' → logprob: -14.894590377807617
    9. '(
' → logprob: -15.269590377807617
    10. '(len' → logprob: -15.394590377807617

Token 144: 'n' (ID: 77)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.03027939423918724
    2. 'n' → logprob: -4.030279159545898
    3. ' (' → logprob: -4.530279159545898
    4. '(' → logprob: -7.155279159545898
    5. ' n' → logprob: -7.905279159545898
    6. '   ' → logprob: -9.655279159545898
    7. '
' → logprob: -10.280279159545898
    8. ')' → logprob: -11.780279159545898
    9. ' ' → logprob: -12.530279159545898
    10. ')n' → logprob: -12.655279159545898

Token 145: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.062035687267780304
    2. ' +' → logprob: -2.8120357990264893
    3. '<|end|>' → logprob: -10.68703556060791
    4. ')' → logprob: -11.18703556060791
    5. ' +
' → logprob: -11.43703556060791
    6. '+
' → logprob: -11.43703556060791
    7. ' ' → logprob: -12.31203556060791
    8. '1' → logprob: -13.31203556060791
    9. '+)' → logprob: -13.56203556060791
    10. ' )' → logprob: -14.56203556060791

Token 146: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -7.922563963802531e-05
    2. ' ' → logprob: -9.500079154968262
    3. '2' → logprob: -13.750079154968262
    4. '   ' → logprob: -13.875079154968262
    5. '```' → logprob: -14.125079154968262
    6. '0' → logprob: -14.375079154968262
    7. '<|end|>' → logprob: -15.000079154968262
    8. ')' → logprob: -16.375080108642578
    9. 'def' → logprob: -16.812580108642578
    10. '  ' → logprob: -17.062580108642578

Token 147: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -4.084206375409849e-05
    2. ' ' → logprob: -10.250041007995605
    3. '2' → logprob: -12.750041007995605
    4. '0' → logprob: -14.062541007995605
    5. '   ' → logprob: -14.625041007995605
    6. '```' → logprob: -14.875041007995605
    7. ')' → logprob: -15.000041007995605
    8. '
' → logprob: -16.56254005432129
    9. '  ' → logprob: -16.81254005432129
    10. '１' → logprob: -16.81254005432129

Token 148: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0001628956088097766
    2. ')
' → logprob: -8.750163078308105
    3. ')return' → logprob: -13.125163078308105
    4. '<|end|>' → logprob: -13.875163078308105
    5. ' )' → logprob: -14.250163078308105
    6. ')

' → logprob: -15.125163078308105
    7. '),' → logprob: -16.25016212463379
    8. ')
' → logprob: -16.25016212463379
    9. '   ' → logprob: -16.87516212463379
    10. ')`' → logprob: -17.50016212463379

Token 149: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0382821261882782
    2. '
' → logprob: -3.9132821559906006
    3. 'return' → logprob: -4.5382819175720215
    4. ' return' → logprob: -5.2882819175720215
    5. '<|end|>' → logprob: -6.5382819175720215
    6. '	return' → logprob: -8.78828239440918
    7. '    
' → logprob: -9.41328239440918
    8. ' ans' → logprob: -10.53828239440918
    9. ' ' → logprob: -10.66328239440918
    10. 'def' → logprob: -11.03828239440918

Token 150: ' ans' (ID: 3345)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' (adapté à ' ans') → logprob: -0.01478410605341196
    2. 'return' → logprob: -4.514784336090088
    3. ' ans' → logprob: -6.139784336090088
    4. '   ' → logprob: -6.764784336090088
    5. '	ans' → logprob: -9.01478385925293
    6. 'queue' → logprob: -9.26478385925293
    7. ' return' → logprob: -9.88978385925293
    8. '0' → logprob: -10.13978385925293
    9. 'def' → logprob: -10.38978385925293
    10. '_ans' → logprob: -11.51478385925293

Token 151: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.009863277897238731
    2. '<|end|>' → logprob: -4.634863376617432
    3. '[
' → logprob: -10.884862899780273
    4. '<|end|>' → logprob: -11.009862899780273
    5. '```' → logprob: -11.384862899780273
    6. '\[' → logprob: -11.509862899780273
    7. ',' → logprob: -11.634862899780273
    8. '[:]' → logprob: -12.009862899780273
    9. 'def' → logprob: -12.134862899780273
    10. '[n' → logprob: -12.134862899780273

Token 152: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.03366436809301376
    2. '0' → logprob: -3.4086644649505615
    3. ' ' → logprob: -11.40866470336914
    4. '[' → logprob: -12.65866470336914
    5. '2' → logprob: -13.40866470336914
    6. ']' → logprob: -14.03366470336914
    7. '-' → logprob: -14.53366470336914
    8. ')' → logprob: -15.15866470336914
    9. '=' → logprob: -15.40866470336914
    10. '```' → logprob: -15.53366470336914

Token 153: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0003047186473850161
    2. ' ]' → logprob: -8.25030517578125
    3. ']=' → logprob: -10.37530517578125
    4. ')' → logprob: -11.62530517578125
    5. ')]' → logprob: -13.50030517578125
    6. '[' → logprob: -14.37530517578125
    7. '=' → logprob: -14.50030517578125
    8. '`]' → logprob: -15.75030517578125
    9. ' =' → logprob: -15.87530517578125
    10. '']' → logprob: -16.50030517578125

Token 154: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4740835428237915
    2. '=' → logprob: -0.9740835428237915
    3. ' ' → logprob: -12.09908390045166
    4. '[' → logprob: -14.97408390045166
    5. ',' → logprob: -15.22408390045166
    6. '<|end|>' → logprob: -16.349082946777344
    7. ']' → logprob: -16.474082946777344
    8. ' =
' → logprob: -16.849082946777344
    9. '0' → logprob: -17.099082946777344
    10. ']=' → logprob: -17.224082946777344

Token 155: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -3.690834273584187e-05
    2. ' ' → logprob: -10.25003719329834
    3. '1' → logprob: -14.00003719329834
    4. '000' → logprob: -14.87503719329834
    5. '00' → logprob: -17.125036239624023
    6. '10' → logprob: -17.187536239624023
    7. '2' → logprob: -17.187536239624023
    8. '<|end|>' → logprob: -18.062536239624023
    9. '```' → logprob: -18.062536239624023
    10. '۰' → logprob: -18.187536239624023

Token 156: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.5048530030981055e-06
    2. ' ' → logprob: -13.750001907348633
    3. '1' → logprob: -15.125001907348633
    4. '000' → logprob: -17.250001907348633
    5. '2' → logprob: -17.937501907348633
    6. '10' → logprob: -18.187501907348633
    7. '[' → logprob: -18.437501907348633
    8. '-' → logprob: -19.125001907348633
    9. '```' → logprob: -19.187501907348633
    10. '00' → logprob: -19.250001907348633

Token 157: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 158: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 159: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.28495416045188904
    2. 'def' → logprob: -1.9099541902542114
    3. '<|end|>' → logprob: -2.784954071044922
    4. ' return' → logprob: -4.409954071044922
    5. 'queue' → logprob: -4.409954071044922
    6. 'deque' → logprob: -5.409954071044922
    7. '   ' → logprob: -5.784954071044922
    8. '```' → logprob: -6.034954071044922
    9. '
' → logprob: -6.534954071044922
    10. '0' → logprob: -7.534954071044922

Token 160: ' ans' (ID: 3345)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.008616226725280285
    2. ' ans' → logprob: -4.7586164474487305
    3. '(ans' → logprob: -13.50861644744873
    4. '	ans' → logprob: -14.88361644744873
    5. 'anst' → logprob: -17.758615493774414
    6. '_ans' → logprob: -18.508615493774414
    7. 'answer' → logprob: -20.133615493774414
    8. ' ' → logprob: -20.258615493774414
    9. 'ann' → logprob: -20.758615493774414
    10. ' ' → logprob: -20.758615493774414

Token 161: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 162: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -3.5954712075181305e-05
    2. '
' → logprob: -10.750036239624023
    3. '<|end|>' → logprob: -11.375036239624023
    4. 'deque' → logprob: -13.250036239624023
    5. ' def' → logprob: -14.875036239624023
    6. '```' → logprob: -15.125036239624023
    7. '  
' → logprob: -16.125036239624023
    8. '#' → logprob: -16.500036239624023
    9. 'ndef' → logprob: -16.625036239624023
    10. 'de' → logprob: -16.750036239624023

Token 163: ' initialize' (ID: 18400)
  Prédit: ' bfs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' bfs' → logprob: -0.036803483963012695
    2. 'b' → logprob: -3.4118034839630127
    3. ' solve' → logprob: -6.411803245544434
    4. ' dfs' → logprob: -7.036803245544434
    5. 'dfs' → logprob: -8.786803245544434
    6. 'solve' → logprob: -8.786803245544434
    7. ' find' → logprob: -9.536803245544434
    8. 'd' → logprob: -9.786803245544434
    9. ' d' → logprob: -10.661803245544434
    10. ' ' → logprob: -10.661803245544434

Token 164: '_queue' (ID: 25622)
  Prédit: '_queue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_queue' → logprob: -0.012544618919491768
    2. '_' → logprob: -5.137544631958008
    3. '_q' → logprob: -5.637544631958008
    4. '_de' → logprob: -6.387544631958008
    5. '_d' → logprob: -8.137544631958008
    6. 'queue' → logprob: -8.637544631958008
    7. '_dist' → logprob: -8.637544631958008
    8. '_par' → logprob: -8.887544631958008
    9. '_stack' → logprob: -9.387544631958008
    10. 'deque' → logprob: -9.512544631958008

Token 165: '(tree' (ID: 44909)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.477809876203537
    2. '():
' → logprob: -0.9778099060058594
    3. ' ():' → logprob: -5.977809906005859
    4. '()' → logprob: -7.602809906005859
    5. ' ()' → logprob: -7.727809906005859
    6. '(n' → logprob: -9.10280990600586
    7. '():
' → logprob: -9.10280990600586
    8. '():

' → logprob: -10.85280990600586
    9. '(queue' → logprob: -12.60280990600586
    10. '(' → logprob: -12.97780990600586

Token 166: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.014542016200721264
    2. '):' → logprob: -4.264542102813721
    3. ' ,' → logprob: -8.639541625976562
    4. '):
' → logprob: -9.014541625976562
    5. ')' → logprob: -10.639541625976562
    6. ' ):' → logprob: -10.889541625976562
    7. ',n' → logprob: -11.139541625976562
    8. ',start' → logprob: -13.202041625976562
    9. ')):' → logprob: -13.264541625976562
    10. '   ' → logprob: -13.452041625976562

Token 167: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2607033848762512
    2. 'deque' → logprob: -1.8857033252716064
    3. 'return' → logprob: -3.2607033252716064
    4. ' return' → logprob: -4.0107035636901855
    5. ' deque' → logprob: -4.0107035636901855
    6. 'queue' → logprob: -6.8857035636901855
    7. 'de' → logprob: -7.1357035636901855
    8. 'dq' → logprob: -8.010703086853027
    9. '
' → logprob: -8.760703086853027
    10. 'q' → logprob: -8.885703086853027

Token 168: ' que' (ID: 661)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.7276076674461365
    2. 'deque' → logprob: -0.9776076674461365
    3. 'queue' → logprob: -2.6026077270507812
    4. '   ' → logprob: -3.8526077270507812
    5. ' return' → logprob: -3.9776077270507812
    6. 'q' → logprob: -4.602607727050781
    7. 'dq' → logprob: -4.852607727050781
    8. ' deque' → logprob: -5.227607727050781
    9. ' queue' → logprob: -6.477607727050781
    10. '```' → logprob: -7.727607727050781

Token 169: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.23378057777881622
    2. 'ue' → logprob: -1.7337806224822998
    3. ' =' → logprob: -3.4837806224823
    4. 'u' → logprob: -6.858780384063721
    5. 'uer' → logprob: -10.108780860900879
    6. 'e' → logprob: -10.358780860900879
    7. '   ' → logprob: -10.983780860900879
    8. 'ues' → logprob: -11.858780860900879
    9. 'UE' → logprob: -13.233780860900879
    10. 'ued' → logprob: -13.358780860900879

Token 170: ' deque' (ID: 90347)
  Prédit: 'deque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'deque' → logprob: -0.0028057026211172342
    2. ' deque' → logprob: -5.877805709838867
    3. 'Deque' → logprob: -15.502805709838867
    4. '   ' → logprob: -15.627805709838867
    5. 'de' → logprob: -15.877805709838867
    6. '	de' → logprob: -16.502805709838867
    7. 'collections' → logprob: -16.502805709838867
    8. ' ' → logprob: -16.752805709838867
    9. '  ' → logprob: -16.752805709838867
    10. '```' → logprob: -17.502805709838867

Token 171: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.005166985560208559
    2. '([(' → logprob: -6.005167007446289
    3. '([' → logprob: -6.130167007446289
    4. '([]' → logprob: -8.380167007446289
    5. '()
' → logprob: -9.130167007446289
    6. '(' → logprob: -9.130167007446289
    7. '()

' → logprob: -11.130167007446289
    8. '((' → logprob: -11.630167007446289
    9. '()\' → logprob: -11.630167007446289
    10. '(tree' → logprob: -12.005167007446289

Token 172: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009184551425278187
    2. 'que' → logprob: -5.00918436050415
    3. 'for' → logprob: -6.63418436050415
    4. ' que' → logprob: -7.38418436050415
    5. ' for' → logprob: -8.759184837341309
    6. '    
' → logprob: -9.134184837341309
    7. 'queue' → logprob: -9.509184837341309
    8. 'def' → logprob: -10.509184837341309
    9. '```' → logprob: -10.509184837341309
    10. ',' → logprob: -10.634184837341309

Token 173: ' que' (ID: 661)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5805426239967346
    2. 'que' (adapté à ' que') → logprob: -0.8305426239967346
    3. '   ' → logprob: -5.58054256439209
    4. 'queue' → logprob: -8.58054256439209
    5. ' for' → logprob: -9.08054256439209
    6. ' que' → logprob: -9.33054256439209
    7. 'def' → logprob: -9.33054256439209
    8. '```' → logprob: -9.70554256439209
    9. '    
' → logprob: -10.20554256439209
    10. '
' → logprob: -10.45554256439209

Token 174: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.013366571627557278
    2. '.extend' → logprob: -4.51336669921875
    3. '.' → logprob: -6.63836669921875
    4. '=' → logprob: -7.51336669921875
    5. ' =' → logprob: -8.51336669921875
    6. 'append' → logprob: -9.13836669921875
    7. '_append' → logprob: -9.38836669921875
    8. '.clear' → logprob: -11.01336669921875
    9. '.push' → logprob: -11.26336669921875
    10. '.enqueue' → logprob: -11.51336669921875

Token 175: '(tree' (ID: 44909)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.016156600788235664
    2. '((' → logprob: -4.1411566734313965
    3. '([' → logprob: -9.391156196594238
    4. '(tree' → logprob: -10.516156196594238
    5. '1' → logprob: -12.141156196594238
    6. '([(' → logprob: -13.141156196594238
    7. ' (' → logprob: -14.016156196594238
    8. 'left' → logprob: -14.016156196594238
    9. '(([' → logprob: -14.016156196594238
    10. '(((' → logprob: -15.141156196594238

Token 176: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -4.4418171455617994e-05
    2. ')' → logprob: -10.250044822692871
    3. '1' → logprob: -12.750044822692871
    4. '```' → logprob: -13.625044822692871
    5. '(' → logprob: -14.000044822692871
    6. ',' → logprob: -14.000044822692871
    7. ')[' → logprob: -14.125044822692871
    8. ' [' → logprob: -14.500044822692871
    9. '\[' → logprob: -15.500044822692871
    10. '   ' → logprob: -15.687544822692871

Token 177: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.4378848391061183e-05
    2. '[' → logprob: -11.500014305114746
    3. '0' → logprob: -13.000014305114746
    4. ' ' → logprob: -13.625014305114746
    5. '   ' → logprob: -15.750014305114746
    6. '
' → logprob: -16.375015258789062
    7. ']' → logprob: -16.375015258789062
    8. '][' → logprob: -16.875015258789062
    9. '```' → logprob: -17.250015258789062
    10. ''s' → logprob: -17.375015258789062

Token 178: '])
' (ID: 5169)
  Prédit: ']['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '][' → logprob: -0.180295929312706
    2. '])' → logprob: -1.8052959442138672
    3. ']' → logprob: -8.180295944213867
    4. '])
' → logprob: -9.055295944213867
    5. '[' → logprob: -9.180295944213867
    6. '])

' → logprob: -11.430295944213867
    7. ')' → logprob: -11.555295944213867
    8. '0' → logprob: -12.305295944213867
    9. '][:' → logprob: -12.430295944213867
    10. ')[' → logprob: -12.430295944213867

Token 179: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 180: ' return' (ID: 622)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.46374398469924927
    2. ')' → logprob: -2.2137439250946045
    3. '   ' → logprob: -2.2137439250946045
    4. '<|end|>' → logprob: -2.4637439250946045
    5. 'return' (adapté à ' return') → logprob: -3.7137439250946045
    6. ' return' → logprob: -4.088744163513184
    7. 'def' → logprob: -5.338744163513184
    8. '  
' → logprob: -5.713744163513184
    9. '<|end|>' → logprob: -6.088744163513184
    10. ' 
' → logprob: -6.213744163513184

Token 181: ' que' (ID: 661)
  Prédit: 'que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' → logprob: -0.026367761194705963
    2. ' que' → logprob: -3.651367664337158
    3. 'queue' → logprob: -11.526368141174316
    4. 'deque' → logprob: -11.526368141174316
    5. '```' → logprob: -11.776368141174316
    6. ' ' → logprob: -11.901368141174316
    7. ' ' → logprob: -12.276368141174316
    8. 'ques' → logprob: -12.526368141174316
    9. 'quel' → logprob: -12.776368141174316
    10. 'qu' → logprob: -13.026368141174316

Token 182: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 183: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.004550577141344547
    2. '<|end|>' → logprob: -5.504550457000732
    3. '
' → logprob: -8.50455093383789
    4. ')' → logprob: -9.12955093383789
    5. 'while' → logprob: -9.62955093383789
    6. '<|end|>' → logprob: -10.37955093383789
    7. '```' → logprob: -10.75455093383789
    8. '  
' → logprob: -11.37955093383789
    9. ' def' → logprob: -12.12955093383789
    10. '

' → logprob: -12.12955093383789

Token 184: ' process' (ID: 2273)
  Prédit: ' bfs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' bfs' → logprob: -0.008378998376429081
    2. 'b' → logprob: -5.758378982543945
    3. ' solve' → logprob: -6.133378982543945
    4. ' process' → logprob: -6.758378982543945
    5. ' main' → logprob: -7.508378982543945
    6. ' dfs' → logprob: -7.883378982543945
    7. ' initialize' → logprob: -8.258378982543945
    8. '_b' → logprob: -8.758378982543945
    9. 'solve' → logprob: -9.508378982543945
    10. ' update' → logprob: -9.883378982543945

Token 185: '_queue' (ID: 25622)
  Prédit: '_queue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_queue' → logprob: -0.005675991531461477
    2. '_' → logprob: -6.130675792694092
    3. '_node' → logprob: -6.755675792694092
    4. '_nodes' → logprob: -7.130675792694092
    5. '()' → logprob: -7.505675792694092
    6. '_tree' → logprob: -7.755675792694092
    7. '(queue' → logprob: -8.75567626953125
    8. '_b' → logprob: -9.13067626953125
    9. '_edges' → logprob: -9.25567626953125
    10. '_next' → logprob: -10.75567626953125

Token 186: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.013008330017328262
    2. '(queue' → logprob: -4.388008117675781
    3. '():' → logprob: -7.888008117675781
    4. '():
' → logprob: -9.388008117675781
    5. '(tree' → logprob: -11.138008117675781
    6. '(ans' → logprob: -11.513008117675781
    7. '(q' → logprob: -12.013008117675781
    8. ' (' → logprob: -12.388008117675781
    9. '()' → logprob: -13.513008117675781
    10. '(
' → logprob: -14.138008117675781

Token 187: 'que' (ID: 1126)
  Prédit: 'que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' → logprob: -0.15758386254310608
    2. 'tree' → logprob: -2.6575839519500732
    3. 'queue' → logprob: -3.6575839519500732
    4. 'ans' → logprob: -3.7825839519500732
    5. ' que' → logprob: -4.532583713531494
    6. '):
' → logprob: -5.407583713531494
    7. 'ques' → logprob: -6.157583713531494
    8. ',' → logprob: -6.282583713531494
    9. '):' → logprob: -6.282583713531494
    10. '   ' → logprob: -6.782583713531494

Token 188: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.010520431213080883
    2. ',' → logprob: -4.7605204582214355
    3. ')' → logprob: -6.6355204582214355
    4. '):
' → logprob: -7.5105204582214355
    5. ':' → logprob: -10.510519981384277
    6. ' ):' → logprob: -11.510519981384277
    7. '):
' → logprob: -13.010519981384277
    8. '   ' → logprob: -13.260519981384277
    9. ' ' → logprob: -15.260519981384277
    10. '():' → logprob: -15.385519981384277

Token 189: ' tree' (ID: 8165)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.05065116658806801
    2. ' ans' → logprob: -3.6756510734558105
    3. 'tree' → logprob: -3.8006510734558105
    4. ' tree' → logprob: -6.8006510734558105
    5. '   ' → logprob: -9.050651550292969
    6. 'graph' → logprob: -9.175651550292969
    7. 'visited' → logprob: -9.675651550292969
    8. 'adj' → logprob: -9.800651550292969
    9. ' ' → logprob: -10.113151550292969
    10. '	ans' → logprob: -10.613151550292969

Token 190: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.012853005900979042
    2. '):' → logprob: -4.387853145599365
    3. ' ,' → logprob: -8.762852668762207
    4. '):
' → logprob: -9.137852668762207
    5. ')' → logprob: -9.887852668762207
    6. ' ):' → logprob: -11.137852668762207
    7. ',
' → logprob: -12.887852668762207
    8. '   ' → logprob: -13.012852668762207
    9. ':' → logprob: -13.887852668762207
    10. 'def' → logprob: -14.137852668762207

Token 191: ' ans' (ID: 3345)
  Prédit: ' ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ans' → logprob: -0.3876262307167053
    2. 'ans' → logprob: -1.1376261711120605
    3. 'n' → logprob: -8.012626647949219
    4. ' n' → logprob: -8.887626647949219
    5. '	ans' → logprob: -9.637626647949219
    6. '   ' → logprob: -10.387626647949219
    7. ' ' → logprob: -10.450126647949219
    8. '(ans' → logprob: -10.700126647949219
    9. 'visited' → logprob: -11.012626647949219
    10. ' visited' → logprob: -11.075126647949219

Token 192: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.5332173109054565
    2. ',' → logprob: -0.9082173109054565
    3. '):
' → logprob: -4.658217430114746
    4. ')' → logprob: -7.783217430114746
    5. '):
' → logprob: -10.033217430114746
    6. '   ' → logprob: -10.408217430114746
    7. ':' → logprob: -10.533217430114746
    8. ' ):' → logprob: -11.033217430114746
    9. 'def' → logprob: -12.033217430114746
    10. ' ,' → logprob: -12.408217430114746

Token 193: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08096472918987274
    2. 'while' → logprob: -3.0809648036956787
    3. ' while' → logprob: -3.4559648036956787
    4. 'if' → logprob: -9.205965042114258
    5. ' if' → logprob: -9.580965042114258
    6. '    
' → logprob: -10.455965042114258
    7. '	while' → logprob: -10.455965042114258
    8. '```' → logprob: -10.455965042114258
    9. '
' → logprob: -11.205965042114258
    10. ',' → logprob: -11.455965042114258

Token 194: ' while' (ID: 2049)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' (adapté à ' while') → logprob: -0.040517136454582214
    2. ' while' → logprob: -3.7905170917510986
    3. '   ' → logprob: -4.665517330169678
    4. 'if' → logprob: -5.790517330169678
    5. 'node' → logprob: -5.915517330169678
    6. 'current' → logprob: -6.540517330169678
    7. 'edge' → logprob: -8.91551685333252
    8. ' if' → logprob: -9.29051685333252
    9. ' node' → logprob: -9.41551685333252
    10. 'u' → logprob: -9.66551685333252

Token 195: ' queue' (ID: 13661)
  Prédit: 'que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' → logprob: -0.3869090974330902
    2. ' que' → logprob: -1.1369091272354126
    3. 'len' → logprob: -10.886909484863281
    4. ' len' → logprob: -12.261909484863281
    5. 'ques' → logprob: -12.511909484863281
    6. 'queue' → logprob: -13.136909484863281
    7. '   ' → logprob: -13.261909484863281
    8. ' queue' → logprob: -13.261909484863281
    9. ' ' → logprob: -13.761909484863281
    10. '
' → logprob: -14.136909484863281

Token 196: '_not' (ID: 17599)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.16902153193950653
    2. ':
' → logprob: -1.919021487236023
    3. ' and' → logprob: -5.5440216064453125
    4. '   ' → logprob: -6.4190216064453125
    5. '):' → logprob: -6.9190216064453125
    6. '):
' → logprob: -7.6690216064453125
    7. 'que' → logprob: -8.044021606445312
    8. 'and' → logprob: -8.294021606445312
    9. ':

' → logprob: -9.044021606445312
    10. '.' → logprob: -9.169021606445312

Token 197: '_empty' (ID: 35051)
  Prédit: 'empty'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'empty' → logprob: -0.6345424652099609
    2. '_empty' → logprob: -0.7595424652099609
    3. 'Empty' → logprob: -7.384542465209961
    4. 'not' → logprob: -7.509542465209961
    5. '_not' → logprob: -8.384542465209961
    6. 'que' → logprob: -9.134542465209961
    7. 'empt' → logprob: -9.634542465209961
    8. '
' → logprob: -9.884542465209961
    9. '-empty' → logprob: -9.884542465209961
    10. ' empty' → logprob: -10.009542465209961

Token 198: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004273088648915291
    2. '():' → logprob: -5.629272937774658
    3. ':' → logprob: -8.504273414611816
    4. '():
' → logprob: -9.004273414611816
    5. '()' → logprob: -9.004273414611816
    6. ' (' → logprob: -9.379273414611816
    7. 'que' → logprob: -10.129273414611816
    8. 'and' → logprob: -11.004273414611816
    9. '   ' → logprob: -11.254273414611816
    10. '(queue' → logprob: -11.254273414611816

Token 199: 'que' (ID: 1126)
  Prédit: 'que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' → logprob: -0.2873111665248871
    2. '(' → logprob: -1.5373111963272095
    3. ' que' → logprob: -3.41231107711792
    4. ')' → logprob: -6.53731107711792
    5. '   ' → logprob: -9.662311553955078
    6. '())' → logprob: -10.162311553955078
    7. 'ques' → logprob: -10.412311553955078
    8. ' )' → logprob: -10.537311553955078
    9. 'quee' → logprob: -10.662311553955078
    10. '
' → logprob: -10.787311553955078

Token 200: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0023009662982076406
    2. ')' → logprob: -6.37730073928833
    3. '):
' → logprob: -7.87730073928833
    4. ':' → logprob: -9.377301216125488
    5. ' ):' → logprob: -9.377301216125488
    6. '():' → logprob: -10.127301216125488
    7. '()' → logprob: -12.752301216125488
    8. ' and' → logprob: -13.752301216125488
    9. '[' → logprob: -13.877301216125488
    10. '[]):' → logprob: -13.877301216125488

Token 201: '       ' (ID: 309)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.028167547658085823
    2. '   ' → logprob: -5.028167724609375
    3. ':
' → logprob: -5.028167724609375
    4. '():' → logprob: -5.278167724609375
    5. '       ' → logprob: -5.778167724609375
    6. ',' → logprob: -6.028167724609375
    7. ' :' → logprob: -6.278167724609375
    8. '):' → logprob: -6.403167724609375
    9. ' and' → logprob: -9.403167724609375
    10. '):
' → logprob: -9.528167724609375

Token 202: ' process' (ID: 2273)
  Prédit: 'current'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'current' → logprob: -0.3074358105659485
    2. 'cur' → logprob: -2.4324357509613037
    3. 'node' → logprob: -2.5574357509613037
    4. 'curr' → logprob: -3.0574357509613037
    5. 'u' → logprob: -4.182435989379883
    6. ' current' → logprob: -4.432435989379883
    7. 'edges' → logprob: -4.432435989379883
    8. 'nodes' → logprob: -5.682435989379883
    9. 'path' → logprob: -6.432435989379883
    10. ' node' → logprob: -6.557435989379883

Token 203: '_node' (ID: 11390)
  Prédit: '_queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_queue' → logprob: -0.5026220083236694
    2. '_' → logprob: -1.1276220083236694
    3. '_token' → logprob: -3.377622127532959
    4. '_node' → logprob: -4.252622127532959
    5. '(' → logprob: -4.877622127532959
    6. '(queue' → logprob: -5.752622127532959
    7. '(_' → logprob: -6.502622127532959
    8. '_item' → logprob: -6.502622127532959
    9. '_line' → logprob: -6.752622127532959
    10. '_element' → logprob: -7.127622127532959

Token 204: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.007833742536604404
    2. ' =' → logprob: -5.382833957672119
    3. '(queue' → logprob: -7.007833957672119
    4. 's' → logprob: -7.132833957672119
    5. '()' → logprob: -7.757833957672119
    6. '=' → logprob: -7.882833957672119
    7. '(
' → logprob: -8.632833480834961
    8. '_(' → logprob: -9.882833480834961
    9. ',' → logprob: -10.007833480834961
    10. ')' → logprob: -10.132833480834961

Token 205: 'que' (ID: 1126)
  Prédit: 'que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' → logprob: -0.006955245975404978
    2. ' que' → logprob: -5.631955146789551
    3. ')' → logprob: -5.756955146789551
    4. 'ques' → logprob: -10.13195514678955
    5. '(' → logprob: -10.63195514678955
    6. '))' → logprob: -10.63195514678955
    7. 'quee' → logprob: -10.75695514678955
    8. 'queue' → logprob: -11.00695514678955
    9. '   ' → logprob: -11.50695514678955
    10. 'deque' → logprob: -11.75695514678955

Token 206: ',' (ID: 11)
  Prédit: '.p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.p' → logprob: -0.10412783920764923
    2. ')' → logprob: -2.604127883911133
    3. '.pop' → logprob: -4.479127883911133
    4. '[' → logprob: -4.854127883911133
    5. '.' → logprob: -5.979127883911133
    6. '.peek' → logprob: -6.104127883911133
    7. ',' → logprob: -7.979127883911133
    8. '.dequeue' → logprob: -8.479127883911133
    9. '   ' → logprob: -8.854127883911133
    10. '))' → logprob: -9.479127883911133

Token 207: ' tree' (ID: 8165)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.5275076031684875
    2. ' ans' → logprob: -1.6525075435638428
    3. 'tree' → logprob: -1.7775075435638428
    4. ' tree' → logprob: -3.0275075435638428
    5. ')' → logprob: -7.777507781982422
    6. '   ' → logprob: -9.715007781982422
    7. '(ans' → logprob: -9.777507781982422
    8. ' ' → logprob: -9.965007781982422
    9. '	ans' → logprob: -10.340007781982422
    10. '(tree' → logprob: -11.027507781982422

Token 208: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.006099788937717676
    2. ',' → logprob: -5.381099700927734
    3. '[' → logprob: -6.756099700927734
    4. '   ' → logprob: -8.756099700927734
    5. ')
' → logprob: -9.631099700927734
    6. '<|end|>' → logprob: -10.631099700927734
    7. ' )' → logprob: -10.881099700927734
    8. '       ' → logprob: -11.381099700927734
    9. '.pop' → logprob: -12.256099700927734
    10. '))' → logprob: -12.381099700927734

Token 209: ' ans' (ID: 3345)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.03366252779960632
    2. ' ans' → logprob: -3.4086625576019287
    3. '	ans' → logprob: -12.408662796020508
    4. '(ans' → logprob: -12.408662796020508
    5. '   ' → logprob: -12.908662796020508
    6. 'que' → logprob: -13.533662796020508
    7. ')' → logprob: -14.033662796020508
    8. ' ' → logprob: -14.033662796020508
    9. 'queue' → logprob: -14.283662796020508
    10. '
' → logprob: -14.908662796020508

Token 210: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00038562860572710633
    2. '   ' → logprob: -8.875385284423828
    3. ')
' → logprob: -9.250385284423828
    4. ',' → logprob: -9.875385284423828
    5. '())' → logprob: -10.500385284423828
    6. '[' → logprob: -10.625385284423828
    7. ' )' → logprob: -10.750385284423828
    8. '       ' → logprob: -11.500385284423828
    9. '))' → logprob: -13.125385284423828
    10. '):' → logprob: -13.250385284423828

Token 211: 'def' (ID: 1314)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.1402453184127808
    2. 'def' → logprob: -1.1402453184127808
    3. '<|end|>' → logprob: -1.1402453184127808
    4. ':' → logprob: -5.14024543762207
    5. '_' → logprob: -5.39024543762207
    6. '(' → logprob: -5.39024543762207
    7. '(
' → logprob: -5.39024543762207
    8. ')' → logprob: -5.39024543762207
    9. '[' → logprob: -5.89024543762207
    10. '<|end|>' → logprob: -6.01524543762207

Token 212: ' queue' (ID: 13661)
  Prédit: ' queue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' queue' → logprob: -0.025705605745315552
    2. 'queue' → logprob: -4.150705814361572
    3. ' process' → logprob: -4.775705814361572
    4. ' space' → logprob: -7.900705814361572
    5. 'process' → logprob: -8.150705337524414
    6. 'space' → logprob: -8.525705337524414
    7. '_queue' → logprob: -9.775705337524414
    8. ' define' → logprob: -9.900705337524414
    9. ' _' → logprob: -10.275705337524414
    10. '_' → logprob: -10.275705337524414

Token 213: '_not' (ID: 17599)
  Prédit: '_not'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_not' → logprob: -3.35706390615087e-05
    2. '._' → logprob: -10.875033378601074
    3. 'not' → logprob: -13.125033378601074
    4. '_' → logprob: -13.250033378601074
    5. '.' → logprob: -13.500033378601074
    6. '_empty' → logprob: -13.750033378601074
    7. '_if' → logprob: -13.875033378601074
    8. '_NOT' → logprob: -13.875033378601074
    9. '_is' → logprob: -13.875033378601074
    10. '_to' → logprob: -14.000033378601074

Token 214: '_empty' (ID: 35051)
  Prédit: '_empty'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_empty' → logprob: -0.0007111206650733948
    2. 'empty' → logprob: -7.250710964202881
    3. 'Empty' → logprob: -14.000711441040039
    4. '_EMPTY' → logprob: -15.875711441040039
    5. ' empty' → logprob: -16.87571144104004
    6. 'EMPTY' → logprob: -17.12571144104004
    7. '-empty' → logprob: -17.25071144104004
    8. 'isempty' → logprob: -17.25071144104004
    9. '.empty' → logprob: -19.00071144104004
    10. '_equal' → logprob: -19.25071144104004

Token 215: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -9.253090865968261e-06
    2. '(queue' → logprob: -11.875009536743164
    3. '(q' → logprob: -14.500009536743164
    4. ' (' → logprob: -14.500009536743164
    5. '(
' → logprob: -14.750009536743164
    6. '():' → logprob: -15.500009536743164
    7. '(qu' → logprob: -15.625009536743164
    8. '((' → logprob: -16.125009536743164
    9. '(`' → logprob: -16.375009536743164
    10. ':' → logprob: -16.875009536743164

Token 216: 'que' (ID: 1126)
  Prédit: 'que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' → logprob: -0.0005006087594665587
    2. '(' → logprob: -8.125500679016113
    3. ')' → logprob: -9.000500679016113
    4. 'quee' → logprob: -10.375500679016113
    5. ' que' → logprob: -10.625500679016113
    6. 'ques' → logprob: -11.625500679016113
    7. 'queue' → logprob: -11.750500679016113
    8. 'qu' → logprob: -12.875500679016113
    9. ')(' → logprob: -13.625500679016113
    10. '):' → logprob: -13.625500679016113

Token 217: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.020593509078025818
    2. '):
' → logprob: -4.020593643188477
    3. ')' → logprob: -6.020593643188477
    4. '():' → logprob: -12.145593643188477
    5. '():
' → logprob: -13.645593643188477
    6. '):

' → logprob: -13.770593643188477
    7. '()' → logprob: -13.895593643188477
    8. ' ):' → logprob: -14.020593643188477
    9. '):
' → logprob: -14.145593643188477
    10. ':' → logprob: -14.645593643188477

Token 218: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4048546850681305
    2. ' return' → logprob: -1.154854655265808
    3. 'return' → logprob: -4.029854774475098
    4. '	return' → logprob: -10.779854774475098
    5. '    ' → logprob: -10.904854774475098
    6. ' len' → logprob: -12.904854774475098
    7. '  ' → logprob: -14.279854774475098
    8. 'len' → logprob: -14.279854774475098
    9. '    
' → logprob: -14.529854774475098
    10. ' ' → logprob: -14.529854774475098

Token 219: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.004163637757301331
    2. ' return' → logprob: -5.50416374206543
    3. 'len' → logprob: -9.37916374206543
    4. '   ' → logprob: -15.12916374206543
    5. ' len' → logprob: -15.50416374206543
    6. '
' → logprob: -16.12916374206543
    7. '```' → logprob: -16.75416374206543
    8. 'eturn' → logprob: -17.25416374206543
    9. '`' → logprob: -17.50416374206543
    10. 'bool' → logprob: -17.75416374206543

Token 220: ' len' (ID: 4631)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.0486181378364563
    2. ' len' → logprob: -3.0486180782318115
    3. 'bool' → logprob: -10.54861831665039
    4. ' bool' → logprob: -12.54861831665039
    5. '(len' → logprob: -14.54861831665039
    6. ' ' → logprob: -15.54861831665039
    7. 'que' → logprob: -16.04861831665039
    8. '	len' → logprob: -16.04861831665039
    9. ' que' → logprob: -17.29861831665039
    10. '   ' → logprob: -17.79861831665039

Token 221: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -6.630610641877865e-06
    2. '(queue' → logprob: -12.500006675720215
    3. ' (' → logprob: -12.875006675720215
    4. 'que' → logprob: -16.5000057220459
    5. '(
' → logprob: -16.8750057220459
    6. '()' → logprob: -18.6250057220459
    7. '```' → logprob: -19.3750057220459
    8. ' que' → logprob: -19.5000057220459
    9. 'queue' → logprob: -20.0000057220459
    10. ')' → logprob: -20.0000057220459

Token 222: 'que' (ID: 1126)
  Prédit: 'que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' → logprob: -9.758300438988954e-05
    2. ' que' → logprob: -9.250097274780273
    3. 'queue' → logprob: -14.500097274780273
    4. 'qu' → logprob: -15.250097274780273
    5. '```' → logprob: -15.375097274780273
    6. ')' → logprob: -16.375097274780273
    7. 'quee' → logprob: -16.625097274780273
    8. 'ques' → logprob: -16.875097274780273
    9. '[' → logprob: -17.125097274780273
    10. 'Que' → logprob: -17.375097274780273

Token 223: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0029208993073552847
    2. ')>' → logprob: -5.877921104431152
    3. ' )' → logprob: -9.377921104431152
    4. '>' → logprob: -11.002921104431152
    5. ' >' → logprob: -12.127921104431152
    6. '[' → logprob: -12.502921104431152
    7. ')!=' → logprob: -12.627921104431152
    8. ' ' → logprob: -14.627921104431152
    9. ')
' → logprob: -15.127921104431152
    10. '   ' → logprob: -15.377921104431152

Token 224: ' >' (ID: 1424)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.4317834973335266
    2. ' >' → logprob: -1.0567834377288818
    3. ')' → logprob: -6.431783676147461
    4. '()>' → logprob: -7.056783676147461
    5. ')>' → logprob: -7.806783676147461
    6. '()' → logprob: -10.181783676147461
    7. '   ' → logprob: -10.306783676147461
    8. ' !=' → logprob: -10.556783676147461
    9. '[' → logprob: -10.681783676147461
    10. '<|end|>' → logprob: -11.181783676147461

Token 225: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -6.670925358776003e-05
    2. ' ' → logprob: -9.625066757202148
    3. '```' → logprob: -15.250066757202148
    4. '۰' → logprob: -16.43756675720215
    5. ')' → logprob: -17.06256675720215
    6. '

' → logprob: -17.50006675720215
    7. 'zero' → logprob: -17.68756675720215
    8. '=' → logprob: -17.81256675720215
    9. '
' → logprob: -17.87506675720215
    10. '<|end|>' → logprob: -17.87506675720215

Token 226: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -2.696889623621246e-06
    2. ' ' → logprob: -12.87500286102295
    3. '```' → logprob: -17.500001907348633
    4. '۰' → logprob: -19.250001907348633
    5. '<|end|>' → logprob: -19.625001907348633
    6. ')' → logprob: -20.125001907348633
    7. '[' → logprob: -20.125001907348633
    8. '０' → logprob: -20.875001907348633
    9. '=' → logprob: -21.000001907348633
    10. '1' → logprob: -21.062501907348633

Token 227: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.05079122260212898
    2. '<|end|>' → logprob: -3.1757912635803223
    3. '   ' → logprob: -5.550791263580322
    4. '<|end|>' → logprob: -6.050791263580322
    5. '\' → logprob: -8.550790786743164
    6. ' def' → logprob: -8.550790786743164
    7. ':' → logprob: -8.675790786743164
    8. '_' → logprob: -8.800790786743164
    9. '```' → logprob: -9.050790786743164
    10. '	def' → logprob: -9.300790786743164

Token 228: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.06439590454101562
    2. '   ' → logprob: -3.5643959045410156
    3. '<|end|>' → logprob: -3.5643959045410156
    4. '<|end|>' → logprob: -6.439395904541016
    5. ':' → logprob: -6.814395904541016
    6. '       ' → logprob: -7.439395904541016
    7. '```' → logprob: -7.564395904541016
    8. ' def' → logprob: -7.939395904541016
    9. ':def' → logprob: -8.439395904541016
    10. '    ' → logprob: -8.689395904541016

Token 229: ' process' (ID: 2273)
  Prédit: 'process'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'process' → logprob: -0.005245141219347715
    2. ' process' → logprob: -5.255245208740234
    3. 'pop' → logprob: -11.880245208740234
    4. 'def' → logprob: -12.880245208740234
    5. 'enqueue' → logprob: -14.380245208740234
    6. 'get' → logprob: -14.880245208740234
    7. '	process' → logprob: -15.755245208740234
    8. 'add' → logprob: -15.880245208740234
    9. 'main' → logprob: -16.005245208740234
    10. '_process' → logprob: -16.005245208740234

Token 230: '_node' (ID: 11390)
  Prédit: '_node'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_node' → logprob: -0.0004354373668320477
    2. '_queue' → logprob: -7.7504353523254395
    3. '_' → logprob: -12.875435829162598
    4. '_n' → logprob: -13.375435829162598
    5. '_nodes' → logprob: -14.750435829162598
    6. '_Node' → logprob: -17.25043487548828
    7. '_no' → logprob: -17.62543487548828
    8. '_q' → logprob: -17.87543487548828
    9. '```' → logprob: -18.12543487548828
    10. ' _' → logprob: -18.12543487548828

Token 231: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -5.512236498361744e-07
    2. ' (' → logprob: -15.000000953674316
    3. '(queue' → logprob: -16.625
    4. 'def' → logprob: -18.375
    5. '(
' → logprob: -20.0
    6. '((' → logprob: -21.5
    7. '```' → logprob: -21.75
    8. '(def' → logprob: -21.875
    9. '(q' → logprob: -22.375
    10. '()' → logprob: -22.5

Token 232: 'que' (ID: 1126)
  Prédit: 'que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' → logprob: -0.0002477502857800573
    2. ' que' → logprob: -8.500247955322266
    3. '(' → logprob: -10.250247955322266
    4. 'queue' → logprob: -11.875247955322266
    5. 'ques' → logprob: -14.750247955322266
    6. '   ' → logprob: -15.000247955322266
    7. ' (' → logprob: -15.250247955322266
    8. '(queue' → logprob: -15.375247955322266
    9. 'qu' → logprob: -15.750247955322266
    10. 'q' → logprob: -16.000247955322266

Token 233: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.027046876028180122
    2. '):' → logprob: -3.6520469188690186
    3. ')' → logprob: -7.2770466804504395
    4. '):
' → logprob: -10.527047157287598
    5. ' ,' → logprob: -11.777047157287598
    6. ' ):' → logprob: -12.402047157287598
    7. ',)' → logprob: -12.902047157287598
    8. ':' → logprob: -13.152047157287598
    9. '   ' → logprob: -13.277047157287598
    10. '):
' → logprob: -13.527047157287598

Token 234: ' tree' (ID: 8165)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.5902088284492493
    2. ' ans' → logprob: -0.8402088284492493
    3. 'tree' → logprob: -4.590209007263184
    4. ' tree' → logprob: -5.590209007263184
    5. '(ans' → logprob: -9.465209007263184
    6. ' ' → logprob: -10.215209007263184
    7. '	ans' → logprob: -10.215209007263184
    8. ')' → logprob: -10.590209007263184
    9. '_ans' → logprob: -10.590209007263184
    10. '   ' → logprob: -10.965209007263184

Token 235: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.38935527205467224
    2. ',' → logprob: -1.1393553018569946
    3. ')' → logprob: -6.139355182647705
    4. '):
' → logprob: -8.639355659484863
    5. ' ):' → logprob: -9.889355659484863
    6. '   ' → logprob: -10.014355659484863
    7. '.pop' → logprob: -11.764355659484863
    8. ' ,' → logprob: -12.014355659484863
    9. '[' → logprob: -12.014355659484863
    10. '):

' → logprob: -12.139355659484863

Token 236: ' ans' (ID: 3345)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.04859338700771332
    2. ' ans' → logprob: -3.048593282699585
    3. '	ans' → logprob: -12.923593521118164
    4. '(ans' → logprob: -13.423593521118164
    5. '_ans' → logprob: -14.423593521118164
    6. '   ' → logprob: -14.798593521118164
    7. '0' → logprob: -14.798593521118164
    8. ' ' → logprob: -15.423593521118164
    9. '```' → logprob: -16.048593521118164
    10. 'que' → logprob: -16.298593521118164

Token 237: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0059584262780845165
    2. '):
' → logprob: -5.130958557128906
    3. ')' → logprob: -10.630958557128906
    4. '):
' → logprob: -12.755958557128906
    5. '   ' → logprob: -13.380958557128906
    6. ':' → logprob: -14.755958557128906
    7. ' ):' → logprob: -15.130958557128906
    8. '():' → logprob: -15.130958557128906
    9. '):

' → logprob: -15.630958557128906
    10. ' ' → logprob: -17.755958557128906

Token 238: '   ' (ID: 271)
  Prédit: 'cur'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cur' → logprob: -1.2178175449371338
    2. 'node' → logprob: -1.4678175449371338
    3. 'u' → logprob: -1.7178175449371338
    4. 'current' → logprob: -2.467817544937134
    5. 'curr' → logprob: -2.717817544937134
    6. '   ' → logprob: -2.842817544937134
    7. 'a' → logprob: -3.092817544937134
    8. 'p' → logprob: -4.467817306518555
    9. 'parent' → logprob: -4.967817306518555
    10. 'v' → logprob: -5.717817306518555

Token 239: ' q' (ID: 2335)
  Prédit: 'current'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'current' → logprob: -0.8811338543891907
    2. 'cur' → logprob: -1.381133794784546
    3. 'node' → logprob: -1.506133794784546
    4. 'curr' → logprob: -2.631133794784546
    5. 'u' → logprob: -3.881133794784546
    6. 'now' → logprob: -4.881134033203125
    7. 'a' → logprob: -5.256134033203125
    8. 'parent' → logprob: -6.381134033203125
    9. 'v' → logprob: -6.881134033203125
    10. 'nodes' → logprob: -7.256134033203125

Token 240: ' =' (ID: 314)
  Prédit: 'node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'node' → logprob: -0.9680059552192688
    2. ' =' → logprob: -1.468005895614624
    3. '_node' → logprob: -1.843005895614624
    4. '=' → logprob: -1.843005895614624
    5. 'ode' → logprob: -3.843005895614624
    6. 'u' → logprob: -4.218006134033203
    7. 'ue' → logprob: -4.343006134033203
    8. 'item' → logprob: -5.593006134033203
    9. '_item' → logprob: -5.718006134033203
    10. '   ' → logprob: -5.968006134033203

Token 241: ' que' (ID: 661)
  Prédit: 'que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' → logprob: -0.00010986098641296849
    2. 'ue' → logprob: -9.625109672546387
    3. ' que' → logprob: -10.125109672546387
    4. 'deque' → logprob: -13.000109672546387
    5. 'de' → logprob: -15.250109672546387
    6. '
' → logprob: -15.250109672546387
    7. '[' → logprob: -15.375109672546387
    8. '```' → logprob: -15.875109672546387
    9. '	' → logprob: -16.125110626220703
    10. '   ' → logprob: -16.125110626220703

Token 242: '.p' (ID: 1201)
  Prédit: '.p'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.p' → logprob: -6.749814019713085e-06
    2. '.pop' → logprob: -12.500006675720215
    3. '.' → logprob: -13.000006675720215
    4. '[' → logprob: -14.500006675720215
    5. 'p' → logprob: -17.00000762939453
    6. '```' → logprob: -18.00000762939453
    7. '   ' → logprob: -18.12500762939453
    8. ' .' → logprob: -18.62500762939453
    9. 'opleft' → logprob: -18.87500762939453
    10. '.dequeue' → logprob: -20.87500762939453

Token 243: 'opleft' (ID: 182170)
  Prédit: 'opleft'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'opleft' → logprob: -0.019931849092245102
    2. 'op' → logprob: -4.019931793212891
    3. 'ople' → logprob: -6.394931793212891
    4. 'opl' → logprob: -9.14493179321289
    5. '[' → logprob: -14.39493179321289
    6. 'opf' → logprob: -14.64493179321289
    7. 'opt' → logprob: -14.64493179321289
    8. 'o' → logprob: -14.76993179321289
    9. 'oplevel' → logprob: -15.01993179321289
    10. 'ope' → logprob: -15.26993179321289

Token 244: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0031929241959005594
    2. '()
' → logprob: -5.753192901611328
    3. '()[' → logprob: -12.003192901611328
    4. '()

' → logprob: -12.628192901611328
    5. '()]' → logprob: -13.628192901611328
    6. '   ' → logprob: -13.878192901611328
    7. '()
' → logprob: -14.253192901611328
    8. '())' → logprob: -14.253192901611328
    9. ' ()' → logprob: -14.253192901611328
    10. '()`' → logprob: -14.503192901611328

Token 245: '   ' (ID: 271)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0015622387873008847
    2. '   ' → logprob: -6.626562118530273
    3. 'current' → logprob: -9.501562118530273
    4. 'u' → logprob: -10.001562118530273
    5. ' for' → logprob: -10.001562118530273
    6. 'from' → logprob: -10.626562118530273
    7. 'node' → logprob: -10.626562118530273
    8. 'parent' → logprob: -11.001562118530273
    9. 'p' → logprob: -13.001562118530273
    10. 'a' → logprob: -14.126562118530273

Token 246: ' process' (ID: 2273)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.005615177098661661
    2. 'current' → logprob: -6.130615234375
    3. 'node' → logprob: -6.880615234375
    4. 'parent' → logprob: -7.130615234375
    5. 'u' → logprob: -7.630615234375
    6. 'start' → logprob: -8.005615234375
    7. 'if' → logprob: -8.880615234375
    8. 'from' → logprob: -9.005615234375
    9. 'a' → logprob: -9.130615234375
    10. 'cur' → logprob: -9.255615234375

Token 247: '_edges' (ID: 68870)
  Prédit: '_node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_node' → logprob: -0.49015137553215027
    2. 'q' → logprob: -1.9901514053344727
    3. '_edges' → logprob: -2.3651514053344727
    4. 'edges' → logprob: -2.9901514053344727
    5. '(q' → logprob: -4.240151405334473
    6. '[q' → logprob: -4.240151405334473
    7. '_neighbors' → logprob: -4.240151405334473
    8. '_edge' → logprob: -4.365151405334473
    9. 'neighbors' → logprob: -4.490151405334473
    10. 'node' → logprob: -4.490151405334473

Token 248: '(q' (ID: 21479)
  Prédit: '(q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(q' → logprob: -0.5219155550003052
    2. ' =' → logprob: -1.1469155550003052
    3. '(' → logprob: -3.1469154357910156
    4. '   ' → logprob: -3.5219154357910156
    5. '=' → logprob: -4.896915435791016
    6. '(tree' → logprob: -5.521915435791016
    7. 'for' → logprob: -6.146915435791016
    8. ' for' → logprob: -6.771915435791016
    9. ',' → logprob: -8.021915435791016
    10. ':' → logprob: -8.396915435791016

Token 249: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.004763568751513958
    2. ')' → logprob: -5.379763603210449
    3. ' ,' → logprob: -9.25476360321045
    4. '):' → logprob: -10.12976360321045
    5. ' )' → logprob: -13.37976360321045
    6. ',)' → logprob: -13.62976360321045
    7. ',:)' → logprob: -13.87976360321045
    8. '   ' → logprob: -13.87976360321045
    9. ':' → logprob: -14.00476360321045
    10. '[' → logprob: -14.62976360321045

Token 250: ' que' (ID: 661)
  Prédit: 'tree'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tree' → logprob: -0.06048392131924629
    2. 'que' → logprob: -3.060483932495117
    3. ' tree' → logprob: -4.685483932495117
    4. ' que' → logprob: -6.435483932495117
    5. 'queue' → logprob: -7.810483932495117
    6. 'tre' → logprob: -8.435483932495117
    7. 'ans' → logprob: -8.560483932495117
    8. 'q' → logprob: -10.560483932495117
    9. 't' → logprob: -10.935483932495117
    10. '	tree' → logprob: -10.935483932495117

Token 251: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -4.179569077678025e-05
    2. ' ,' → logprob: -10.125041961669922
    3. ')' → logprob: -14.000041961669922
    4. '   ' → logprob: -14.625041961669922
    5. '(tree' → logprob: -15.875041961669922
    6. ',
' → logprob: -16.375041961669922
    7. '),' → logprob: -17.250041961669922
    8. '[' → logprob: -17.750041961669922
    9. ',t' → logprob: -17.875041961669922
    10. 'import' → logprob: -17.875041961669922

Token 252: ' tree' (ID: 8165)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.3210159242153168
    2. 'tree' → logprob: -1.6960159540176392
    3. ' ans' → logprob: -2.5710158348083496
    4. ' tree' → logprob: -4.32101583480835
    5. '   ' → logprob: -6.82101583480835
    6. ' ' → logprob: -9.446016311645508
    7. '	ans' → logprob: -9.696016311645508
    8. '  ' → logprob: -10.133516311645508
    9. 'tre' → logprob: -10.696016311645508
    10. 'answer' → logprob: -11.071016311645508

Token 253: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -7.20734242349863e-05
    2. ' ,' → logprob: -9.750072479248047
    3. ')' → logprob: -11.250072479248047
    4. '   ' → logprob: -14.875072479248047
    5. '[' → logprob: -15.250072479248047
    6. 'def' → logprob: -17.000072479248047
    7. ' ' → logprob: -18.750072479248047
    8. ' def' → logprob: -18.875072479248047
    9. ' ans' → logprob: -19.000072479248047
    10. ' )' → logprob: -19.000072479248047

Token 254: ' ans' (ID: 3345)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.011050059460103512
    2. ' ans' → logprob: -4.511050224304199
    3. '	ans' → logprob: -13.7610502243042
    4. '   ' → logprob: -14.2610502243042
    5. '(ans' → logprob: -15.0110502243042
    6. '
' → logprob: -17.011049270629883
    7. '_ans' → logprob: -17.011049270629883
    8. ' ' → logprob: -17.136049270629883
    9. 'Ans' → logprob: -17.761049270629883
    10. 'answer' → logprob: -18.386049270629883

Token 255: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0004353181866463274
    2. ')

' → logprob: -7.7504353523254395
    3. ',' → logprob: -12.875434875488281
    4. ' )' → logprob: -14.125434875488281
    5. 'def' → logprob: -14.750434875488281
    6. ',)' → logprob: -14.875434875488281
    7. ')
' → logprob: -15.125434875488281
    8. ' ' → logprob: -16.12543487548828
    9. '),' → logprob: -16.50043487548828
    10. '[' → logprob: -17.00043487548828

Token 256: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.006023838184773922
    2. '<|end|>' → logprob: -5.13102388381958
    3. '   ' → logprob: -10.131023406982422
    4. '```' → logprob: -10.631023406982422
    5. '<|end|>' → logprob: -10.881023406982422
    6. ' def' → logprob: -11.881023406982422
    7. 'for' → logprob: -14.006023406982422
    8. '    
' → logprob: -14.506023406982422
    9. '[]' → logprob: -14.631023406982422
    10. ')' → logprob: -14.631023406982422

Token 257: ' process' (ID: 2273)
  Prédit: 'process'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'process' → logprob: -0.1270589381456375
    2. ' process' → logprob: -2.127058982849121
    3. 'def' → logprob: -9.252058982849121
    4. '(process' → logprob: -11.377058982849121
    5. 'for' → logprob: -11.377058982849121
    6. '_process' → logprob: -12.752058982849121
    7. 'q' → logprob: -13.502058982849121
    8. '	process' → logprob: -13.627058982849121
    9. 'rocess' → logprob: -13.752058982849121
    10. '.process' → logprob: -13.752058982849121

Token 258: '_edges' (ID: 68870)
  Prédit: '_edges'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_edges' → logprob: -9.960946772480384e-05
    2. '_edge' → logprob: -9.500099182128906
    3. '_' → logprob: -11.500099182128906
    4. '_node' → logprob: -11.625099182128906
    5. '_nodes' → logprob: -12.250099182128906
    6. '_ed' → logprob: -15.750099182128906
    7. '_s' → logprob: -16.375099182128906
    8. '_lines' → logprob: -16.625099182128906
    9. '_elements' → logprob: -16.875099182128906
    10. '_a' → logprob: -16.875099182128906

Token 259: '(q' (ID: 21479)
  Prédit: '(q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(q' → logprob: -0.02644091099500656
    2. '(edges' → logprob: -4.1514410972595215
    3. '(node' → logprob: -5.1514410972595215
    4. '(queue' → logprob: -5.7764410972595215
    5. '(current' → logprob: -7.2764410972595215
    6. '(' → logprob: -7.6514410972595215
    7. '(nodes' → logprob: -9.526440620422363
    8. '(edge' → logprob: -9.651440620422363
    9. '(cur' → logprob: -10.151440620422363
    10. '(curr' → logprob: -10.276440620422363

Token 260: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -2.8087270038668066e-05
    2. ' ,' → logprob: -10.625027656555176
    3. '   ' → logprob: -13.375027656555176
    4. '):' → logprob: -14.250027656555176
    5. '[' → logprob: -14.500027656555176
    6. ')' → logprob: -15.250027656555176
    7. '[],' → logprob: -15.500027656555176
    8. ',
' → logprob: -15.750027656555176
    9. ',q' → logprob: -15.750027656555176
    10. ' ' → logprob: -16.625028610229492

Token 261: ' que' (ID: 661)
  Prédit: 'que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' → logprob: -0.16043198108673096
    2. ' que' → logprob: -1.910431981086731
    3. 'queue' → logprob: -9.410431861877441
    4. ' queue' → logprob: -10.285431861877441
    5. 'q' → logprob: -10.785431861877441
    6. 'tree' → logprob: -11.535431861877441
    7. ' ' → logprob: -11.660431861877441
    8. ' q' → logprob: -11.785431861877441
    9. ' tree' → logprob: -11.785431861877441
    10. 'ques' → logprob: -11.910431861877441

Token 262: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -2.3199920178740285e-05
    2. ' ,' → logprob: -10.750022888183594
    3. '   ' → logprob: -13.875022888183594
    4. '[],' → logprob: -15.875022888183594
    5. ',
' → logprob: -16.125022888183594
    6. '[' → logprob: -16.375022888183594
    7. '):' → logprob: -16.625022888183594
    8. ' ' → logprob: -17.375022888183594
    9. ',q' → logprob: -17.375022888183594
    10. ')' → logprob: -17.500022888183594

Token 263: ' tree' (ID: 8165)
  Prédit: 'tree'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tree' → logprob: -0.012513656169176102
    2. ' tree' → logprob: -4.387513637542725
    3. 'ans' → logprob: -13.637514114379883
    4. '	tree' → logprob: -13.637514114379883
    5. '   ' → logprob: -14.387514114379883
    6. ' ' → logprob: -15.137514114379883
    7. ' ans' → logprob: -15.262514114379883
    8. '(tree' → logprob: -15.637514114379883
    9. 'trees' → logprob: -16.637514114379883
    10. 't' → logprob: -17.137514114379883

Token 264: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -2.117345684382599e-05
    2. ' ,' → logprob: -11.250020980834961
    3. '):' → logprob: -12.625020980834961
    4. '   ' → logprob: -12.875020980834961
    5. '[' → logprob: -14.000020980834961
    6. '):
' → logprob: -14.875020980834961
    7. ')' → logprob: -15.375020980834961
    8. ',q' → logprob: -15.375020980834961
    9. 'q' → logprob: -16.25002098083496
    10. '[],' → logprob: -16.37502098083496

Token 265: ' ans' (ID: 3345)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.011066564358770847
    2. ' ans' → logprob: -4.511066436767578
    3. 'q' → logprob: -12.011066436767578
    4. '   ' → logprob: -12.511066436767578
    5. '	ans' → logprob: -12.761066436767578
    6. '
' → logprob: -13.386066436767578
    7. ' ' → logprob: -14.011066436767578
    8. '(ans' → logprob: -14.136066436767578
    9. ' q' → logprob: -14.636066436767578
    10. 'que' → logprob: -14.761066436767578

Token 266: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.006778373382985592
    2. '):
' → logprob: -5.006778240203857
    3. ')' → logprob: -10.756778717041016
    4. ',' → logprob: -11.006778717041016
    5. '   ' → logprob: -11.131778717041016
    6. '):
' → logprob: -12.256778717041016
    7. ' ):' → logprob: -13.131778717041016
    8. ':' → logprob: -13.506778717041016
    9. '[' → logprob: -14.131778717041016
    10. '[]):' → logprob: -14.756778717041016

Token 267: '   ' (ID: 271)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5927782654762268
    2. '   ' → logprob: -0.8427782654762268
    3. ' for' → logprob: -4.092778205871582
    4. '	for' → logprob: -12.342778205871582
    5. '```' → logprob: -15.592778205871582
    6. '    
' → logprob: -15.842778205871582
    7. ' ' → logprob: -15.842778205871582
    8. 'while' → logprob: -16.4677791595459
    9. '  ' → logprob: -16.5927791595459
    10. '       ' → logprob: -16.9677791595459

Token 268: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -8.292095299111679e-05
    2. '   ' → logprob: -9.500082969665527
    3. 'while' → logprob: -12.000082969665527
    4. ' for' → logprob: -13.250082969665527
    5. '	for' → logprob: -19.12508201599121
    6. 'current' → logprob: -21.62508201599121
    7. 'node' → logprob: -22.00008201599121
    8. 'if' → logprob: -22.12508201599121
    9. '  ' → logprob: -22.25008201599121
    10. '```' → logprob: -22.37508201599121

Token 269: ' x' (ID: 1215)
  Prédit: 'edge'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'edge' → logprob: -0.5479061007499695
    2. 'a' → logprob: -1.2979061603546143
    3. ' edge' → logprob: -2.7979061603546143
    4. 'u' → logprob: -3.6729061603546143
    5. 'node' → logprob: -4.047905921936035
    6. 'neighbor' → logprob: -5.172905921936035
    7. 'x' → logprob: -5.297905921936035
    8. 'v' → logprob: -5.547905921936035
    9. 'e' → logprob: -5.547905921936035
    10. ' a' → logprob: -5.672905921936035

Token 270: ',' (ID: 11)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.5766909122467041
    2. 'in' → logprob: -0.8266909122467041
    3. ',' → logprob: -7.826690673828125
    4. '[' → logprob: -9.076690673828125
    5. '_in' → logprob: -9.326690673828125
    6. ' ' → logprob: -10.201690673828125
    7. 'x' → logprob: -10.576690673828125
    8. '	in' → logprob: -10.951690673828125
    9. ',in' → logprob: -11.826690673828125
    10. 's' → logprob: -12.076690673828125

Token 271: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.06441859155893326
    2. '_,' → logprob: -2.9394185543060303
    3. 'b' → logprob: -5.314418792724609
    4. ' y' → logprob: -6.814418792724609
    5. '_' → logprob: -7.314418792724609
    6. 'neighbor' → logprob: -8.06441879272461
    7. 'w' → logprob: -8.18941879272461
    8. 'next' → logprob: -8.31441879272461
    9. '__,' → logprob: -8.56441879272461
    10. 'cost' → logprob: -8.68941879272461

Token 272: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.008355586789548397
    2. ',c' → logprob: -4.883355617523193
    3. ',z' → logprob: -7.883355617523193
    4. ' ,' → logprob: -8.508355140686035
    5. ' in' → logprob: -9.633355140686035
    6. ',_' → logprob: -10.508355140686035
    7. '_,' → logprob: -10.883355140686035
    8. ',length' → logprob: -11.008355140686035
    9. 'c' → logprob: -11.883355140686035
    10. '[' → logprob: -12.508355140686035

Token 273: ' z' (ID: 579)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.12403075397014618
    2. 'z' → logprob: -2.499030828475952
    3. 'w' → logprob: -3.874030828475952
    4. 'cost' → logprob: -4.374030590057373
    5. 'weight' → logprob: -7.374030590057373
    6. 'd' → logprob: -8.874031066894531
    7. ' c' → logprob: -9.124031066894531
    8. 'dist' → logprob: -9.624031066894531
    9. 'color' → logprob: -10.249031066894531
    10. 'length' → logprob: -10.374031066894531

Token 274: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.3484731912612915
    2. 'in' → logprob: -1.2234731912612915
    3. '  ' → logprob: -12.59847354888916
    4. '	in' → logprob: -12.59847354888916
    5. '
' → logprob: -12.72347354888916
    6. ' ' → logprob: -12.72347354888916
    7. '_in' → logprob: -12.84847354888916
    8. '```' → logprob: -12.97347354888916
    9. '   ' → logprob: -13.22347354888916
    10. ')' → logprob: -13.22347354888916

Token 275: ' q' (ID: 2335)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.0007759197615087032
    2. ' q' → logprob: -7.3757758140563965
    3. 'tree' → logprob: -9.125776290893555
    4. '[q' → logprob: -11.375776290893555
    5. '[' → logprob: -11.625776290893555
    6. 'queue' → logprob: -12.625776290893555
    7. ' ' → logprob: -13.125776290893555
    8. '   ' → logprob: -13.375776290893555
    9. 'x' → logprob: -13.375776290893555
    10. '[(' → logprob: -13.625776290893555

Token 276: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.3425219549390022e-05
    2. '):' → logprob: -11.75001335144043
    3. ' :' → logprob: -12.87501335144043
    4. ':
' → logprob: -13.75001335144043
    5. ':**' → logprob: -14.00001335144043
    6. '[:]' → logprob: -15.62501335144043
    7. '():' → logprob: -15.75001335144043
    8. '.' → logprob: -16.12501335144043
    9. ']:' → logprob: -16.25001335144043
    10. '[' → logprob: -16.62501335144043

Token 277: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.03952733427286148
    2. 'if' → logprob: -3.414527416229248
    3. ' if' → logprob: -5.164527416229248
    4. '   ' → logprob: -9.16452693939209
    5. '<|end|>' → logprob: -10.91452693939209
    6. ',' → logprob: -11.28952693939209
    7. '```' → logprob: -12.66452693939209
    8. '#' → logprob: -13.66452693939209
    9. '.' → logprob: -13.91452693939209
    10. '	if' → logprob: -13.91452693939209

Token 278: ' process' (ID: 2273)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0005632805987261236
    2. ' if' → logprob: -8.125563621520996
    3. '       ' → logprob: -8.375563621520996
    4. '           ' → logprob: -10.500563621520996
    5. '   ' → logprob: -11.875563621520996
    6. 'If' → logprob: -14.250563621520996
    7. '	if' → logprob: -14.625563621520996
    8. '```' → logprob: -15.500563621520996
    9. '
' → logprob: -15.625563621520996
    10. '#' → logprob: -15.875563621520996

Token 279: '_edge' (ID: 43226)
  Prédit: '_edge'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_edge' → logprob: -0.8032785058021545
    2. '_node' → logprob: -1.4282784461975098
    3. 'edge' → logprob: -2.3032784461975098
    4. 'node' → logprob: -2.6782784461975098
    5. 'edges' → logprob: -3.1782784461975098
    6. '_edges' → logprob: -3.5532784461975098
    7. 'neighbor' → logprob: -3.6782784461975098
    8. '_neighbor' → logprob: -4.05327844619751
    9. 'neighbors' → logprob: -4.42827844619751
    10. '_neighbors' → logprob: -4.55327844619751

Token 280: '(x' (ID: 4061)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.26578500866889954
    2. '(x' → logprob: -2.515784978866577
    3. '(q' → logprob: -2.640784978866577
    4. '(y' → logprob: -2.640784978866577
    5. ' (' → logprob: -5.265785217285156
    6. '(z' → logprob: -6.015785217285156
    7. '(queue' → logprob: -6.890785217285156
    8. '()' → logprob: -8.015785217285156
    9. '(
' → logprob: -8.015785217285156
    10. '((' → logprob: -8.515785217285156

Token 281: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -8.0536883615423e-05
    2. ' ,' → logprob: -9.500080108642578
    3. ',y' → logprob: -12.250080108642578
    4. '   ' → logprob: -15.750080108642578
    5. 'y' → logprob: -15.875080108642578
    6. ',
' → logprob: -16.000080108642578
    7. ' y' → logprob: -16.000080108642578
    8. ')' → logprob: -16.375080108642578
    9. '       ' → logprob: -17.000080108642578
    10. '```' → logprob: -17.125080108642578

Token 282: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.02328391931951046
    2. ' y' → logprob: -3.7732839584350586
    3. 'que' → logprob: -10.648283958435059
    4. ' que' → logprob: -12.148283958435059
    5. '   ' → logprob: -12.898283958435059
    6. 'z' → logprob: -13.398283958435059
    7. '    ' → logprob: -13.773283958435059
    8. ' ' → logprob: -14.273283958435059
    9. '  ' → logprob: -14.273283958435059
    10. '
' → logprob: -14.523283958435059

Token 283: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -7.803360495017841e-05
    2. ' ,' → logprob: -9.500078201293945
    3. ',z' → logprob: -13.375078201293945
    4. '```' → logprob: -14.875078201293945
    5. 'z' → logprob: -15.375078201293945
    6. '   ' → logprob: -15.625078201293945
    7. ',
' → logprob: -15.875078201293945
    8. '`,' → logprob: -16.250078201293945
    9. ')' → logprob: -16.250078201293945
    10. '‌,' → logprob: -16.625078201293945

Token 284: ' z' (ID: 579)
  Prédit: 'z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'z' → logprob: -0.0057710581459105015
    2. 'que' → logprob: -5.755771160125732
    3. ' z' → logprob: -6.005771160125732
    4. ' que' → logprob: -9.380770683288574
    5. 'queue' → logprob: -11.630770683288574
    6. '	z' → logprob: -12.130770683288574
    7. 'ques' → logprob: -12.380770683288574
    8. '   ' → logprob: -12.630770683288574
    9. '```' → logprob: -12.630770683288574
    10. ' ' → logprob: -12.755770683288574

Token 285: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0032145457807928324
    2. ')' → logprob: -5.753214359283447
    3. ' ,' → logprob: -10.878214836120605
    4. '   ' → logprob: -11.753214836120605
    5. '       ' → logprob: -12.253214836120605
    6. ',)' → logprob: -13.253214836120605
    7. ' )' → logprob: -13.628214836120605
    8. ')
' → logprob: -13.753214836120605
    9. ',
' → logprob: -14.128214836120605
    10. '),' → logprob: -16.37821388244629

Token 286: ' que' (ID: 661)
  Prédit: 'que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' → logprob: -0.08027681708335876
    2. ' que' → logprob: -2.5802767276763916
    3. 'tree' → logprob: -7.580276966094971
    4. 'queue' → logprob: -7.830276966094971
    5. 'ans' → logprob: -8.830276489257812
    6. ' tree' → logprob: -8.955276489257812
    7. ' queue' → logprob: -10.205276489257812
    8. 'ques' → logprob: -10.330276489257812
    9. ' ans' → logprob: -10.455276489257812
    10. ' ' → logprob: -10.705276489257812

Token 287: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -3.6312321753939614e-05
    2. ' ,' → logprob: -10.250036239624023
    3. ')' → logprob: -14.625036239624023
    4. '   ' → logprob: -15.125036239624023
    5. ',
' → logprob: -16.250036239624023
    6. '),' → logprob: -18.375036239624023
    7. '‌,' → logprob: -18.750036239624023
    8. '```' → logprob: -18.750036239624023
    9. '       ' → logprob: -19.125036239624023
    10. '  ' → logprob: -19.375036239624023

Token 288: ' tree' (ID: 8165)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.044734273105859756
    2. ' ans' → logprob: -3.294734239578247
    3. 'tree' → logprob: -5.044734477996826
    4. ' tree' → logprob: -8.544734001159668
    5. '	ans' → logprob: -11.544734001159668
    6. '   ' → logprob: -12.419734001159668
    7. '(ans' → logprob: -12.419734001159668
    8. ' ' → logprob: -12.419734001159668
    9. '_ans' → logprob: -13.794734001159668
    10. 'answer' → logprob: -13.857234001159668

Token 289: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -3.643152740551159e-05
    2. ' ,' → logprob: -10.250036239624023
    3. ')' → logprob: -14.500036239624023
    4. '   ' → logprob: -14.625036239624023
    5. ',
' → logprob: -16.875036239624023
    6. '  ' → logprob: -18.125036239624023
    7. '),' → logprob: -18.375036239624023
    8. ' ' → logprob: -18.500036239624023
    9. ' ans' → logprob: -18.875036239624023
    10. '```' → logprob: -19.125036239624023

Token 290: ' ans' (ID: 3345)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.008617766201496124
    2. ' ans' → logprob: -4.758617877960205
    3. '	ans' → logprob: -13.258617401123047
    4. '(ans' → logprob: -14.008617401123047
    5. '   ' → logprob: -15.008617401123047
    6. '_ans' → logprob: -16.258617401123047
    7. ' ' → logprob: -16.508617401123047
    8. 'Ans' → logprob: -17.133617401123047
    9. 'answer' → logprob: -17.258617401123047
    10. '
' → logprob: -17.758617401123047

Token 291: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1398757123970427e-05
    2. ')
' → logprob: -12.000011444091797
    3. '<|end|>' → logprob: -13.750011444091797
    4. '   ' → logprob: -13.875011444091797
    5. ' )' → logprob: -13.875011444091797
    6. ',' → logprob: -14.125011444091797
    7. ')

' → logprob: -14.500011444091797
    8. ')#' → logprob: -15.000011444091797
    9. 'def' → logprob: -15.125011444091797
    10. '       ' → logprob: -15.750011444091797

Token 292: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0032086113933473825
    2. '<|end|>' → logprob: -5.878208637237549
    3. '   ' → logprob: -8.50320816040039
    4. ' def' → logprob: -9.50320816040039
    5. '```' → logprob: -10.00320816040039
    6. '       ' → logprob: -10.25320816040039
    7. 'if' → logprob: -10.87820816040039
    8. '...' → logprob: -11.87820816040039
    9. ' if' → logprob: -11.87820816040039
    10. '<|end|>' → logprob: -12.75320816040039

Token 293: ' process' (ID: 2273)
  Prédit: 'process'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'process' → logprob: -0.008037878200411797
    2. ' process' → logprob: -4.88303804397583
    3. 'def' → logprob: -7.75803804397583
    4. 'rocess' → logprob: -13.758037567138672
    5. ' def' → logprob: -13.883037567138672
    6. '	process' → logprob: -14.758037567138672
    7. '.process' → logprob: -15.008037567138672
    8. 'proces' → logprob: -15.258037567138672
    9. '(process' → logprob: -15.258037567138672
    10. '_process' → logprob: -15.633037567138672

Token 294: '_edge' (ID: 43226)
  Prédit: '_edge'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_edge' → logprob: -0.00013798571308143437
    2. 'edge' → logprob: -9.000138282775879
    3. '_edges' → logprob: -11.500138282775879
    4. '_node' → logprob: -12.750138282775879
    5. '_' → logprob: -15.250138282775879
    6. 'edges' → logprob: -15.375138282775879
    7. ' edge' → logprob: -15.375138282775879
    8. 'def' → logprob: -15.750138282775879
    9. 'ed' → logprob: -16.000137329101562
    10. 'Edge' → logprob: -16.375137329101562

Token 295: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -4.787507714354433e-05
    2. '(' → logprob: -10.00004768371582
    3. '(
' → logprob: -13.62504768371582
    4. 'def' → logprob: -14.37504768371582
    5. '(a' → logprob: -14.87504768371582
    6. 'x' → logprob: -16.25004768371582
    7. ' (' → logprob: -16.25004768371582
    8. '   ' → logprob: -17.75004768371582
    9. '((' → logprob: -18.50004768371582
    10. '(edge' → logprob: -19.25004768371582

Token 296: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.7120533811976202e-05
    2. ',y' → logprob: -11.500017166137695
    3. ' ,' → logprob: -12.000017166137695
    4. ',
' → logprob: -14.625017166137695
    5. 'y' → logprob: -15.625017166137695
    6. '<|end|>' → logprob: -17.125017166137695
    7. ',user' → logprob: -17.750017166137695
    8. '‌,' → logprob: -18.000017166137695
    9. '```' → logprob: -18.375017166137695
    10. ' y' → logprob: -18.500017166137695

Token 297: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.0005577972042374313
    2. ' y' → logprob: -7.500557899475098
    3. 'que' → logprob: -13.250557899475098
    4. 'z' → logprob: -13.250557899475098
    5. 'x' → logprob: -14.375557899475098
    6. '
' → logprob: -15.875557899475098
    7. ',y' → logprob: -16.25055694580078
    8. '   ' → logprob: -16.37555694580078
    9. '<|end|>' → logprob: -16.50055694580078
    10. ',' → logprob: -16.50055694580078

Token 298: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -8.537868779967539e-06
    2. ' ,' → logprob: -11.750008583068848
    3. ',
' → logprob: -14.875008583068848
    4. ',z' → logprob: -15.375008583068848
    5. '```' → logprob: -18.75000762939453
    6. '‌,' → logprob: -19.00000762939453
    7. '   ' → logprob: -19.00000762939453
    8. 'z' → logprob: -19.25000762939453
    9. ',y' → logprob: -19.62500762939453
    10. '),' → logprob: -19.62500762939453

Token 299: ' z' (ID: 579)
  Prédit: 'z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'z' → logprob: -0.00043162284418940544
    2. ' z' → logprob: -7.750431537628174
    3. '	z' → logprob: -15.000432014465332
    4. 'que' → logprob: -15.250432014465332
    5. '```' → logprob: -16.500431060791016
    6. ',z' → logprob: -16.750431060791016
    7. 'y' → logprob: -17.125431060791016
    8. 'x' → logprob: -17.125431060791016
    9. '   ' → logprob: -17.125431060791016
    10. ',' → logprob: -17.375431060791016

Token 300: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -2.339278580620885e-06
    2. ' ,' → logprob: -13.000001907348633
    3. '   ' → logprob: -18.375001907348633
    4. ',
' → logprob: -18.875001907348633
    5. '‌,' → logprob: -19.000001907348633
    6. '`,' → logprob: -20.750001907348633
    7. '_,' → logprob: -20.875001907348633
    8. '),' → logprob: -20.875001907348633
    9. '```' → logprob: -21.312501907348633
    10. '،' → logprob: -21.312501907348633

Token 301: ' que' (ID: 661)
  Prédit: 'que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' → logprob: -0.38709405064582825
    2. ' que' → logprob: -1.1370940208435059
    3. 'queue' → logprob: -9.012094497680664
    4. ' queue' → logprob: -9.887094497680664
    5. ' ' → logprob: -11.012094497680664
    6. '   ' → logprob: -11.887094497680664
    7. 'ans' → logprob: -12.512094497680664
    8. 'ques' → logprob: -12.637094497680664
    9. 'tree' → logprob: -12.887094497680664
    10. ' ans' → logprob: -13.387094497680664

Token 302: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -6.630610641877865e-06
    2. ' ,' → logprob: -12.000006675720215
    3. ',
' → logprob: -15.125006675720215
    4. '   ' → logprob: -17.0000057220459
    5. '),' → logprob: -18.2500057220459
    6. '‌,' → logprob: -18.6250057220459
    7. '):' → logprob: -18.7500057220459
    8. ',

' → logprob: -18.7500057220459
    9. ',
' → logprob: -18.8750057220459
    10. '_,' → logprob: -19.2500057220459

Token 303: ' tree' (ID: 8165)
  Prédit: 'tree'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tree' → logprob: -0.22175607085227966
    2. 'ans' → logprob: -1.721756100654602
    3. ' tree' → logprob: -4.2217559814453125
    4. ' ans' → logprob: -5.2217559814453125
    5. ' ' → logprob: -10.971755981445312
    6. '   ' → logprob: -11.096755981445312
    7. 'tre' → logprob: -12.221755981445312
    8. '	ans' → logprob: -12.471755981445312
    9. '	tree' → logprob: -12.596755981445312
    10. '  ' → logprob: -12.596755981445312

Token 304: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -7.107425062713446e-06
    2. ' ,' → logprob: -11.875006675720215
    3. ',
' → logprob: -17.87500762939453
    4. '   ' → logprob: -18.50000762939453
    5. '_,' → logprob: -19.00000762939453
    6. 'def' → logprob: -19.25000762939453
    7. '‌,' → logprob: -19.37500762939453
    8. '),' → logprob: -19.75000762939453
    9. 's' → logprob: -20.18750762939453
    10. ')' → logprob: -20.31250762939453

Token 305: ' ans' (ID: 3345)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.0001093841710826382
    2. ' ans' → logprob: -9.125109672546387
    3. '	ans' → logprob: -15.000109672546387
    4. '   ' → logprob: -16.87510871887207
    5. '(ans' → logprob: -17.25010871887207
    6. '_ans' → logprob: -18.37510871887207
    7. ' ' → logprob: -18.37510871887207
    8. '```' → logprob: -18.62510871887207
    9. 'a' → logprob: -19.37510871887207
    10. 'anz' → logprob: -19.50010871887207

Token 306: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.576296865940094
    2. '):
' → logprob: -0.826296865940094
    3. ',' → logprob: -8.70129680633545
    4. '   ' → logprob: -9.57629680633545
    5. '):
' → logprob: -9.70129680633545
    6. ':' → logprob: -10.20129680633545
    7. ')' → logprob: -11.32629680633545
    8. '):

' → logprob: -11.57629680633545
    9. ':
' → logprob: -14.20129680633545
    10. ' ):' → logprob: -15.20129680633545

Token 307: '   ' (ID: 271)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.20281825959682465
    2. '   ' → logprob: -1.7028182744979858
    3. ' if' → logprob: -6.577818393707275
    4. '       ' → logprob: -11.827817916870117
    5. 'If' → logprob: -13.077817916870117
    6. '	if' → logprob: -13.077817916870117
    7. '```' → logprob: -13.577817916870117
    8. '<|end|>' → logprob: -16.827817916870117
    9. '    
' → logprob: -17.202817916870117
    10. ' ' → logprob: -17.327817916870117

Token 308: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -6.289473822107539e-05
    2. '   ' → logprob: -10.125062942504883
    3. ' if' → logprob: -10.750062942504883
    4. 'If' → logprob: -14.625062942504883
    5. '```' → logprob: -14.750062942504883
    6. '       ' → logprob: -16.250062942504883
    7. '#' → logprob: -16.500062942504883
    8. 'new' → logprob: -16.500062942504883
    9. '
' → logprob: -16.500062942504883
    10. '	if' → logprob: -17.125062942504883

Token 309: ' ans' (ID: 3345)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.0013351208763197064
    2. ' ans' → logprob: -6.626335144042969
    3. '(ans' → logprob: -12.126335144042969
    4. '	ans' → logprob: -12.751335144042969
    5. '   ' → logprob: -14.626335144042969
    6. 'z' → logprob: -15.751335144042969
    7. 'x' → logprob: -16.25133514404297
    8. 'y' → logprob: -17.25133514404297
    9. ' ' → logprob: -17.25133514404297
    10. '_ans' → logprob: -17.25133514404297

Token 310: '[y' (ID: 34551)
  Prédit: '[y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[y' → logprob: -4.584861744660884e-05
    2. 'y' → logprob: -10.625045776367188
    3. '[x' → logprob: -11.000045776367188
    4. '[' → logprob: -13.125045776367188
    5. '   ' → logprob: -13.875045776367188
    6. '```' → logprob: -14.500045776367188
    7. '
' → logprob: -15.000045776367188
    8. '[z' → logprob: -15.750045776367188
    9. ' [' → logprob: -16.375045776367188
    10. '[
' → logprob: -16.750045776367188

Token 311: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.07483047991991043
    2. ']==' → logprob: -2.6998305320739746
    3. '==' → logprob: -5.574830532073975
    4. ')' → logprob: -7.699830532073975
    5. ' ==' → logprob: -8.449830055236816
    6. ' ]' → logprob: -8.574830055236816
    7. '==-' → logprob: -8.949830055236816
    8. ')==' → logprob: -10.574830055236816
    9. '[' → logprob: -10.699830055236816
    10. '```' → logprob: -11.074830055236816

Token 312: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.03562676161527634
    2. ' ==' → logprob: -3.7856266498565674
    3. '==-' → logprob: -4.4106268882751465
    4. '<' → logprob: -9.785626411437988
    5. '===' → logprob: -10.535626411437988
    6. '[' → logprob: -10.535626411437988
    7. ']==' → logprob: -11.410626411437988
    8. '=' → logprob: -11.785626411437988
    9. '```' → logprob: -11.785626411437988
    10. 'is' → logprob: -11.910626411437988

Token 313: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -3.583550642360933e-05
    2. ' -' → logprob: -10.250036239624023
    3. '   ' → logprob: -14.875036239624023
    4. ' ' → logprob: -17.250036239624023
    5. '  ' → logprob: -18.125036239624023
    6. '−' → logprob: -19.250036239624023
    7. '```' → logprob: -19.500036239624023
    8. '	' → logprob: -19.750036239624023
    9. '-
' → logprob: -20.500036239624023
    10. ''-' → logprob: -20.750036239624023

Token 314: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.650518920039758e-06
    2. ' ' → logprob: -12.750003814697266
    3. '   ' → logprob: -15.687503814697266
    4. ' -' → logprob: -16.375003814697266
    5. '2' → logprob: -16.437503814697266
    6. '```' → logprob: -16.625003814697266
    7. '<|end|>' → logprob: -16.687503814697266
    8. ',' → logprob: -16.937503814697266
    9. '-' → logprob: -17.375003814697266
    10. '１' → logprob: -17.500003814697266

Token 315: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.013160820119082928
    2. ':
' → logprob: -4.388160705566406
    3. ' and' → logprob: -8.013160705566406
    4. '       ' → logprob: -9.388160705566406
    5. ' or' → logprob: -9.763160705566406
    6. ' :' → logprob: -9.763160705566406
    7. '):' → logprob: -10.138160705566406
    8. '<|end|>' → logprob: -10.513160705566406
    9. '   ' → logprob: -11.263160705566406
    10. '):
' → logprob: -11.388160705566406

Token 316: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0005090686026960611
    2. ' ans' → logprob: -8.000509262084961
    3. ' if' → logprob: -9.875509262084961
    4. '   ' → logprob: -10.625509262084961
    5. ',' → logprob: -11.125509262084961
    6. 'ans' → logprob: -11.125509262084961
    7. '<|end|>' → logprob: -11.125509262084961
    8. '           ' → logprob: -11.250509262084961
    9. '
' → logprob: -12.000509262084961
    10. ' and' → logprob: -12.000509262084961

Token 317: ' ans' (ID: 3345)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' (adapté à ' ans') → logprob: -0.00834636576473713
    2. ' ans' → logprob: -5.3833465576171875
    3. '           ' → logprob: -5.7583465576171875
    4. 'if' → logprob: -7.7583465576171875
    5. '       ' → logprob: -10.008346557617188
    6. '	ans' → logprob: -10.633346557617188
    7. ' if' → logprob: -10.758346557617188
    8. '   ' → logprob: -11.508346557617188
    9. 'answer' → logprob: -11.633346557617188
    10. '(ans' → logprob: -12.008346557617188

Token 318: '[y' (ID: 34551)
  Prédit: '[y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[y' → logprob: -1.4617256056226324e-05
    2. '[' → logprob: -11.625014305114746
    3. 'y' → logprob: -12.250014305114746
    4. '```' → logprob: -14.375014305114746
    5. ' [' → logprob: -16.000015258789062
    6. ' y' → logprob: -16.625015258789062
    7. '[x' → logprob: -17.000015258789062
    8. '][' → logprob: -17.500015258789062
    9. '[j' → logprob: -17.875015258789062
    10. '(y' → logprob: -18.125015258789062

Token 319: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.00028064317302778363
    2. ']=' → logprob: -8.625280380249023
    3. '=' → logprob: -9.750280380249023
    4. ' ]' → logprob: -10.250280380249023
    5. ' =' → logprob: -12.000280380249023
    6. ')' → logprob: -13.875280380249023
    7. '}' → logprob: -16.625280380249023
    8. '[' → logprob: -16.875280380249023
    9. '```' → logprob: -17.000280380249023
    10. ',' → logprob: -17.750280380249023

Token 320: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.25193166732788086
    2. ' =' → logprob: -1.5019316673278809
    3. ' ' → logprob: -13.876932144165039
    4. '[' → logprob: -15.126932144165039
    5. ' ^=' → logprob: -15.126932144165039
    6. ')' → logprob: -15.376932144165039
    7. ',' → logprob: -15.376932144165039
    8. ']' → logprob: -15.876932144165039
    9. '＝' → logprob: -16.37693214416504
    10. '```' → logprob: -16.50193214416504

Token 321: ' (' (ID: 350)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.3175137937068939
    2. '(ans' → logprob: -1.3175138235092163
    3. ' ans' → logprob: -6.067513942718506
    4. 'z' → logprob: -7.317513942718506
    5. '(z' → logprob: -7.442513942718506
    6. '(' → logprob: -8.317513465881348
    7. ' (' → logprob: -8.442513465881348
    8. '	ans' → logprob: -9.192513465881348
    9. '_ans' → logprob: -10.942513465881348
    10. '   ' → logprob: -10.942513465881348

Token 322: 'ans' (ID: 616)
  Prédit: 'ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.0001322639436693862
    2. '(ans' → logprob: -9.75013256072998
    3. ' ans' → logprob: -10.25013256072998
    4. 'z' → logprob: -10.37513256072998
    5. '	ans' → logprob: -12.37513256072998
    6. '_ans' → logprob: -13.75013256072998
    7. '   ' → logprob: -14.12513256072998
    8. '           ' → logprob: -15.00013256072998
    9. 'Ans' → logprob: -15.50013256072998
    10. 'anz' → logprob: -16.000131607055664

Token 323: '[x' (ID: 17295)
  Prédit: '[x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[x' → logprob: -0.038073278963565826
    2. 'x' → logprob: -3.2880733013153076
    3. ' x' → logprob: -11.288073539733887
    4. '   ' → logprob: -12.038073539733887
    5. '[' → logprob: -12.288073539733887
    6. '[y' → logprob: -13.288073539733887
    7. '	x' → logprob: -13.288073539733887
    8. '```' → logprob: -13.413073539733887
    9. '(x' → logprob: -14.163073539733887
    10. ' ' → logprob: -14.413073539733887

Token 324: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.19339202344417572
    2. '+' → logprob: -1.943392038345337
    3. '^' → logprob: -4.068391799926758
    4. ')' → logprob: -4.943391799926758
    5. ' +' → logprob: -5.693391799926758
    6. ']+' → logprob: -5.943391799926758
    7. ' ^' → logprob: -6.568391799926758
    8. ',' → logprob: -8.818391799926758
    9. '}' → logprob: -9.193391799926758
    10. ' ' → logprob: -9.193391799926758

Token 325: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.1160513162612915
    2. ' +' → logprob: -2.366051197052002
    3. ' ^' → logprob: -4.866051197052002
    4. '^' → logprob: -4.866051197052002
    5. ')' → logprob: -8.74105167388916
    6. ' ' → logprob: -9.74105167388916
    7. '*' → logprob: -11.36605167388916
    8. '|' → logprob: -11.61605167388916
    9. ' xor' → logprob: -11.61605167388916
    10. '%' → logprob: -11.86605167388916

Token 326: ' z' (ID: 579)
  Prédit: 'z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'z' → logprob: -0.026738904416561127
    2. ' z' → logprob: -3.6517388820648193
    3. '1' → logprob: -8.651739120483398
    4. '   ' → logprob: -9.276739120483398
    5. ' ' → logprob: -10.026739120483398
    6. ')' → logprob: -11.026739120483398
    7. '	z' → logprob: -11.276739120483398
    8. ''z' → logprob: -11.651739120483398
    9. '(z' → logprob: -11.714239120483398
    10. '           ' → logprob: -11.714239120483398

Token 327: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00018458699923940003
    2. ')%' → logprob: -9.000185012817383
    3. ' )' → logprob: -9.875185012817383
    4. ')
' → logprob: -12.625185012817383
    5. '%' → logprob: -13.250185012817383
    6. '
' → logprob: -14.000185012817383
    7. '   ' → logprob: -14.250185012817383
    8. '```' → logprob: -14.500185012817383
    9. ')

' → logprob: -14.625185012817383
    10. ' ' → logprob: -14.625185012817383

Token 328: ' %' (ID: 1851)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -0.0739261656999588
    2. ' %' → logprob: -3.5739262104034424
    3. '       ' → logprob: -3.9489262104034424
    4. '
' → logprob: -4.198925971984863
    5. 'que' → logprob: -4.823925971984863
    6. '        
' → logprob: -8.198925971984863
    7. 'if' → logprob: -9.198925971984863
    8. 'queue' → logprob: -9.198925971984863
    9. ' que' → logprob: -9.573925971984863
    10. '   ' → logprob: -9.573925971984863

Token 329: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -2.5776860184123507e-06
    2. ' ' → logprob: -13.87500286102295
    3. '   ' → logprob: -14.12500286102295
    4. '100' → logprob: -15.50000286102295
    5. '  ' → logprob: -16.000001907348633
    6. '```' → logprob: -16.250001907348633
    7. '201' → logprob: -16.375001907348633
    8. '123' → logprob: -16.500001907348633
    9. '10' → logprob: -16.500001907348633
    10. '_' → logprob: -17.625001907348633

Token 330: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -7.896309739408025e-07
    2. '100' → logprob: -15.125000953674316
    3. '123' → logprob: -16.125
    4. '10' → logprob: -16.125
    5. '201' → logprob: -16.625
    6. '998' → logprob: -16.875
    7. '   ' → logprob: -17.25
    8. ' ' → logprob: -17.5
    9. '２' → logprob: -18.125
    10. '1' → logprob: -18.125

Token 331: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.010817649774253368
    2. ' if' → logprob: -5.135817527770996
    3. 'if' → logprob: -6.010817527770996
    4. '
' → logprob: -6.635817527770996
    5. 'que' → logprob: -8.135817527770996
    6. ' que' → logprob: -8.510817527770996
    7. '        
' → logprob: -8.760817527770996
    8. '   ' → logprob: -8.885817527770996
    9. '           ' → logprob: -9.635817527770996
    10. '0' → logprob: -10.135817527770996

Token 332: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.06258518993854523
    2. 'que' → logprob: -2.8125851154327393
    3. '   ' → logprob: -8.18758487701416
    4. ' que' → logprob: -9.43758487701416
    5. 'queue' → logprob: -9.43758487701416
    6. '           ' → logprob: -9.81258487701416
    7. 'if' → logprob: -9.93758487701416
    8. '```' → logprob: -10.81258487701416
    9. '               ' → logprob: -10.93758487701416
    10. 'ques' → logprob: -11.18758487701416

Token 333: ' que' (ID: 661)
  Prédit: 'que'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' (adapté à ' que') → logprob: -9.400689305039123e-05
    2. '   ' → logprob: -9.625094413757324
    3. ' que' → logprob: -11.375094413757324
    4. 'if' → logprob: -12.125094413757324
    5. '       ' → logprob: -12.750094413757324
    6. 'queue' → logprob: -13.250094413757324
    7. 'ques' → logprob: -13.250094413757324
    8. 'deque' → logprob: -14.625094413757324
    9. '  ' → logprob: -14.875094413757324
    10. 'q' → logprob: -14.875094413757324

Token 334: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.001589250285178423
    2. '.' → logprob: -6.501589298248291
    3. ').' → logprob: -10.501588821411133
    4. ' .' → logprob: -11.251588821411133
    5. '.add' → logprob: -11.376588821411133
    6. '.py' → logprob: -11.501588821411133
    7. '.app' → logprob: -11.751588821411133
    8. '.enqueue' → logprob: -11.876588821411133
    9. '.put' → logprob: -13.251588821411133
    10. '.push' → logprob: -13.251588821411133

Token 335: '(tree' (ID: 44909)
  Prédit: '(tree'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(tree' → logprob: -6.704273118884885e-07
    2. '([' → logprob: -14.625000953674316
    3. '(' → logprob: -15.875000953674316
    4. 'tree' → logprob: -17.625
    5. '(table' → logprob: -18.0
    6. '(Tree' → logprob: -18.5
    7. '	tree' → logprob: -18.75
    8. '((' → logprob: -19.25
    9. '(t' → logprob: -19.25
    10. '(tile' → logprob: -20.875

Token 336: '[y' (ID: 34551)
  Prédit: '[y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[y' → logprob: -9.253090865968261e-06
    2. 'y' → logprob: -11.750009536743164
    3. '[' → logprob: -13.750009536743164
    4. '   ' → logprob: -16.000009536743164
    5. '(y' → logprob: -17.000009536743164
    6. ' [' → logprob: -17.500009536743164
    7. ' y' → logprob: -17.750009536743164
    8. '```' → logprob: -18.000009536743164
    9. ' ' → logprob: -18.500009536743164
    10. '[next' → logprob: -18.625009536743164

Token 337: '])

' (ID: 21045)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '])' → logprob: -0.16043320298194885
    2. ')' → logprob: -1.9104331731796265
    3. ']' → logprob: -9.160432815551758
    4. '[' → logprob: -10.410432815551758
    5. ')]' → logprob: -10.410432815551758
    6. ')])' → logprob: -10.660432815551758
    7. ' ])' → logprob: -12.535432815551758
    8. '])
' → logprob: -12.785432815551758
    9. '))' → logprob: -12.910432815551758
    10. ' )' → logprob: -13.035432815551758

Token 338: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.33272552490234375
    2. '<|end|>' → logprob: -1.5827255249023438
    3. 'if' → logprob: -2.7077255249023438
    4. '```' → logprob: -5.457725524902344
    5. '#' → logprob: -5.957725524902344
    6. 'print' → logprob: -6.207725524902344
    7. 'n' → logprob: -7.707725524902344
    8. 'for' → logprob: -7.707725524902344
    9. ')' → logprob: -7.832725524902344
    10. '<|end|>' → logprob: -8.707725524902344

Token 339: ' print' (ID: 2123)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.11994030326604843
    2. ' main' → logprob: -2.3699402809143066
    3. 'def' → logprob: -4.119940280914307
    4. 'get' → logprob: -6.994940280914307
    5. 'if' → logprob: -7.119940280914307
    6. '__' → logprob: -7.744940280914307
    7. '_main' → logprob: -7.744940280914307
    8. ' __' → logprob: -8.869940757751465
    9. ' def' → logprob: -8.869940757751465
    10. 'process' → logprob: -9.119940757751465

Token 340: '_answer' (ID: 65702)
  Prédit: '_ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_ans' → logprob: -0.6090054512023926
    2. '_result' → logprob: -1.1090054512023926
    3. '_results' → logprob: -2.6090054512023926
    4. '_' → logprob: -3.9840054512023926
    5. '_answer' → logprob: -4.234005451202393
    6. '_answers' → logprob: -5.359005451202393
    7. '()' → logprob: -5.609005451202393
    8. '_tree' → logprob: -5.984005451202393
    9. '_output' → logprob: -6.359005451202393
    10. '(' → logprob: -6.734005451202393

Token 341: '(ans' (ID: 70054)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.4651249945163727
    2. '(ans' → logprob: -1.2151249647140503
    3. '(' → logprob: -3.34012508392334
    4. '():
' → logprob: -3.71512508392334
    5. '()' → logprob: -4.21512508392334
    6. '()(' → logprob: -7.71512508392334
    7. '(def' → logprob: -9.59012508392334
    8. '(n' → logprob: -9.71512508392334
    9. '():

' → logprob: -10.96512508392334
    10. ' ():' → logprob: -11.09012508392334

Token 342: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.185787633061409
    2. '):
' → logprob: -1.9357876777648926
    3. ')' → logprob: -3.6857876777648926
    4. ')
' → logprob: -9.560787200927734
    5. '[' → logprob: -9.810787200927734
    6. '):
' → logprob: -10.310787200927734
    7. '):

' → logprob: -13.685787200927734
    8. '   ' → logprob: -14.560787200927734
    9. ' ):' → logprob: -14.935787200927734
    10. ':' → logprob: -15.560787200927734

Token 343: '   ' (ID: 271)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.17203892767429352
    2. '   ' → logprob: -2.422039031982422
    3. 'print' → logprob: -2.672039031982422
    4. ' for' → logprob: -8.547039031982422
    5. ' print' → logprob: -11.922039031982422
    6. '```' → logprob: -14.547039031982422
    7. 'def' → logprob: -14.797039031982422
    8. '	for' → logprob: -15.797039031982422
    9. '	print' → logprob: -17.797039031982422
    10. '   ' → logprob: -18.047039031982422

Token 344: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.252116322517395
    2. 'print' → logprob: -1.502116322517395
    3. '   ' → logprob: -8.752116203308105
    4. ' for' → logprob: -10.627116203308105
    5. ' print' → logprob: -12.252116203308105
    6. '```' → logprob: -17.752117156982422
    7. 'def' → logprob: -18.752117156982422
    8. '	for' → logprob: -19.252117156982422
    9. ' ' → logprob: -19.502117156982422
    10. '    
' → logprob: -19.627117156982422

Token 345: ' value' (ID: 1432)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.04554121568799019
    2. 'v' → logprob: -4.170541286468506
    3. 'x' → logprob: -4.420541286468506
    4. 'a' → logprob: -4.420541286468506
    5. 'val' → logprob: -6.420541286468506
    6. 'ans' → logprob: -7.045541286468506
    7. ' i' → logprob: -7.170541286468506
    8. 'res' → logprob: -7.295541286468506
    9. 'value' → logprob: -7.420541286468506
    10. 'color' → logprob: -8.170540809631348

Token 346: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.2811676263809204
    2. 'in' → logprob: -1.4061676263809204
    3. '_in' → logprob: -12.156167984008789
    4. '```' → logprob: -12.906167984008789
    5. 'n' → logprob: -13.031167984008789
    6. ' ' → logprob: -13.281167984008789
    7. 's' → logprob: -14.281167984008789
    8. '	in' → logprob: -14.281167984008789
    9. 'i' → logprob: -14.531167984008789
    10. 'd' → logprob: -14.781167984008789

Token 347: ' ans' (ID: 3345)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -1.3544423381972592e-05
    2. ' ans' → logprob: -11.25001335144043
    3. '(ans' → logprob: -14.75001335144043
    4. '	ans' → logprob: -16.62501335144043
    5. '_ans' → logprob: -19.87501335144043
    6. 'answer' → logprob: -20.87501335144043
    7. '   ' → logprob: -21.00001335144043
    8. 'ann' → logprob: -21.62501335144043
    9. 'ansi' → logprob: -22.12501335144043
    10. 'range' → logprob: -22.50001335144043

Token 348: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0003890854713972658
    2. ':' → logprob: -7.875389099121094
    3. ':
' → logprob: -11.750389099121094
    4. 'if' → logprob: -14.625389099121094
    5. '   ' → logprob: -15.750389099121094
    6. '```' → logprob: -16.250389099121094
    7. 'def' → logprob: -16.375389099121094
    8. '1' → logprob: -16.500389099121094
    9. ' [' → logprob: -16.500389099121094
    10. 'print' → logprob: -16.625389099121094

Token 349: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.0280383548888494e-06
    2. ' ' → logprob: -14.875000953674316
    3. '   ' → logprob: -15.375000953674316
    4. '2' → logprob: -16.125001907348633
    5. ':' → logprob: -16.500001907348633
    6. '
' → logprob: -16.625001907348633
    7. '```' → logprob: -17.125001907348633
    8. 'range' → logprob: -18.000001907348633
    9. '(' → logprob: -18.500001907348633
    10. ':]' → logprob: -18.750001907348633

Token 350: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -2.15310683415737e-05
    2. ':]' → logprob: -10.875021934509277
    3. ']:' → logprob: -13.000021934509277
    4. ':].' → logprob: -15.875021934509277
    5. ' :' → logprob: -16.25002098083496
    6. ':],' → logprob: -16.37502098083496
    7. '():' → logprob: -17.12502098083496
    8. '[' → logprob: -18.62502098083496
    9. '：' → logprob: -18.75002098083496
    10. '_:' → logprob: -19.00002098083496

Token 351: ']:
' (ID: 22152)
  Prédit: ']:
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']:
' → logprob: -0.2529151737689972
    2. ']:' → logprob: -1.5029151439666748
    3. ']' → logprob: -7.377915382385254
    4. ']:
' → logprob: -8.502915382385254
    5. '   ' → logprob: -9.752915382385254
    6. '):
' → logprob: -10.127915382385254
    7. 'print' → logprob: -11.252915382385254
    8. '():
' → logprob: -11.377915382385254
    9. ':' → logprob: -11.627915382385254
    10. '       ' → logprob: -12.002915382385254

Token 352: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.05039014667272568
    2. '   ' → logprob: -3.4253902435302734
    3. 'print' → logprob: -4.300390243530273
    4. ' print' → logprob: -5.800390243530273
    5. '	print' → logprob: -11.675390243530273
    6. '```' → logprob: -12.300390243530273
    7. '	   ' → logprob: -14.425390243530273
    8. '.print' → logprob: -15.175390243530273
    9. '           ' → logprob: -15.300390243530273
    10. '	' → logprob: -15.300390243530273

Token 353: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -4.246537173457909e-06
    2. '   ' → logprob: -13.000003814697266
    3. ' print' → logprob: -13.250003814697266
    4. '       ' → logprob: -16.250003814697266
    5. '```' → logprob: -17.875003814697266
    6. '           ' → logprob: -20.500003814697266
    7. '	print' → logprob: -21.250003814697266
    8. 'printf' → logprob: -21.375003814697266
    9. '  ' → logprob: -22.125003814697266
    10. '#print' → logprob: -23.625003814697266

Token 354: '(value' (ID: 6333)
  Prédit: 'value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'value' → logprob: -0.5759447813034058
    2. '(value' → logprob: -0.8259447813034058
    3. ' value' → logprob: -12.575944900512695
    4. ')value' → logprob: -14.075944900512695
    5. 'int' → logprob: -15.075944900512695
    6. '$value' → logprob: -15.200944900512695
    7. '=value' → logprob: -16.075944900512695
    8. '[value' → logprob: -16.325944900512695
    9. ''value' → logprob: -16.575944900512695
    10. 'alue' → logprob: -16.575944900512695

Token 355: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.3856492842023727e-06
    2. ')
' → logprob: -13.750000953674316
    3. ' )' → logprob: -15.875000953674316
    4. '))' → logprob: -17.250001907348633
    5. ')}' → logprob: -17.250001907348633
    6. ')`' → logprob: -17.875001907348633
    7. '),' → logprob: -18.250001907348633
    8. '   ' → logprob: -18.750001907348633
    9. ',' → logprob: -18.875001907348633
    10. '}' → logprob: -19.000001907348633

Token 356: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.006894393358379602
    2. 'if' → logprob: -5.006894588470459
    3. 'n' → logprob: -8.6318941116333
    4. 'ndef' → logprob: -14.7568941116333
    5. '```' → logprob: -16.506895065307617
    6. ' def' → logprob: -16.506895065307617
    7. ' if' → logprob: -16.631895065307617
    8. 'import' → logprob: -16.881895065307617
    9. '#' → logprob: -17.881895065307617
    10. '10' → logprob: -18.506895065307617

Token 357: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.0019914438016712666
    2. ' main' → logprob: -6.376991271972656
    3. 'def' → logprob: -8.251991271972656
    4. 'solve' → logprob: -10.501991271972656
    5. 'b' → logprob: -15.251991271972656
    6. ' def' → logprob: -15.751991271972656
    7. ' solve' → logprob: -16.001991271972656
    8. '	main' → logprob: -16.001991271972656
    9. 'dfs' → logprob: -16.501991271972656
    10. 'if' → logprob: -16.876991271972656

Token 358: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -3.173704271830502e-06
    2. '():
' → logprob: -13.00000286102295
    3. ' ():' → logprob: -14.25000286102295
    4. '()' → logprob: -15.62500286102295
    5. '(' → logprob: -17.125003814697266
    6. '():
' → logprob: -17.250003814697266
    7. '():

' → logprob: -19.500003814697266
    8. '(:' → logprob: -20.375003814697266
    9. '()>' → logprob: -20.625003814697266
    10. '(":' → logprob: -20.750003814697266

Token 359: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16137219965457916
    2. 'n' → logprob: -1.911372184753418
    3. ' n' → logprob: -6.786372184753418
    4. '```' → logprob: -11.286372184753418
    5. '	n' → logprob: -12.286372184753418
    6. 'import' → logprob: -14.536372184753418
    7. ' ' → logprob: -15.161372184753418
    8. ',n' → logprob: -16.036373138427734
    9. '  ' → logprob: -16.161373138427734
    10. '    
' → logprob: -16.411373138427734

Token 360: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.00039944887976162136
    2. '   ' → logprob: -8.000399589538574
    3. 'N' → logprob: -9.750399589538574
    4. ' n' → logprob: -12.625399589538574
    5. 't' → logprob: -13.375399589538574
    6. 'import' → logprob: -14.750399589538574
    7. 'if' → logprob: -15.875399589538574
    8. 'sys' → logprob: -15.875399589538574
    9. '	n' → logprob: -16.000398635864258
    10. 'num' → logprob: -16.250398635864258

Token 361: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1602339744567871
    2. '=' → logprob: -1.910233974456787
    3. '=int' → logprob: -12.285234451293945
    4. ',' → logprob: -13.285234451293945
    5. ' =
' → logprob: -13.535234451293945
    6. ' ' → logprob: -13.910234451293945
    7. '   ' → logprob: -14.785234451293945
    8. '  ' → logprob: -15.410234451293945
    9. ')' → logprob: -16.285234451293945
    10. ' =
' → logprob: -16.410234451293945

Token 362: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.038042180240154266
    2. ' int' → logprob: -3.2880420684814453
    3. 'list' → logprob: -15.038042068481445
    4. ' ' → logprob: -16.288042068481445
    5. 'get' → logprob: -16.538042068481445
    6. 'map' → logprob: -16.788042068481445
    7. '(int' → logprob: -16.788042068481445
    8. '=int' → logprob: -16.913042068481445
    9. '<int' → logprob: -17.038042068481445
    10. 'in' → logprob: -17.663042068481445

Token 363: '(get' (ID: 7119)
  Prédit: '(get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(get' → logprob: -0.053314436227083206
    2. '(input' → logprob: -3.553314447402954
    3. '(sys' → logprob: -3.803314447402954
    4. 'input' → logprob: -7.678314208984375
    5. 'get' → logprob: -7.928314208984375
    6. 'sys' → logprob: -8.928314208984375
    7. '(' → logprob: -10.803314208984375
    8. '()' → logprob: -11.303314208984375
    9. ' (' → logprob: -13.803314208984375
    10. ' get' → logprob: -14.178314208984375

Token 364: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.12675736844539642
    2. '()' → logprob: -3.0017573833465576
    3. '())' → logprob: -3.1267573833465576
    4. 'input' → logprob: -4.0017571449279785
    5. '_' → logprob: -5.5017571449279785
    6. ')' → logprob: -5.8767571449279785
    7. 'Input' → logprob: -9.001757621765137
    8. '()
' → logprob: -10.001757621765137
    9. '_line' → logprob: -10.626757621765137
    10. '().' → logprob: -11.001757621765137

Token 365: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.001540450262837112
    2. '()' → logprob: -6.501540660858154
    3. '())
' → logprob: -10.251540184020996
    4. ')' → logprob: -13.376540184020996
    5. '()
' → logprob: -14.376540184020996
    6. ' ())' → logprob: -15.001540184020996
    7. '())

' → logprob: -15.626540184020996
    8. '().' → logprob: -16.251541137695312
    9. '(' → logprob: -17.376541137695312
    10. '())
' → logprob: -17.501541137695312

Token 366: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.002995055168867111
    2. 'tree' → logprob: -6.127995014190674
    3. '	tree' → logprob: -7.252995014190674
    4. '```' → logprob: -10.627995491027832
    5. '   ' → logprob: -10.752995491027832
    6. ' tree' → logprob: -10.877995491027832
    7. '
' → logprob: -11.377995491027832
    8. '    
' → logprob: -12.002995491027832
    9. '  ' → logprob: -12.127995491027832
    10. '(tree' → logprob: -12.252995491027832

Token 367: ' tree' (ID: 8165)
  Prédit: 'tree'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tree' (adapté à ' tree') → logprob: -0.0011578429257497191
    2. '   ' → logprob: -7.001157760620117
    3. ' tree' → logprob: -8.376157760620117
    4. '	tree' → logprob: -11.251157760620117
    5. '```' → logprob: -14.251157760620117
    6. '(tree' → logprob: -14.751157760620117
    7. '
' → logprob: -14.751157760620117
    8. '  ' → logprob: -15.126157760620117
    9. '    
' → logprob: -15.376157760620117
    10. 'tre' → logprob: -15.376157760620117

Token 368: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.07889088988304138
    2. '=' → logprob: -2.578890800476074
    3. ',' → logprob: -14.203890800476074
    4. ' ' → logprob: -16.20389175415039
    5. '   ' → logprob: -16.20389175415039
    6. ')' → logprob: -16.82889175415039
    7. '```' → logprob: -17.20389175415039
    8. '=create' → logprob: -17.32889175415039
    9. '  ' → logprob: -17.57889175415039
    10. '＝' → logprob: -17.57889175415039

Token 369: ' initialize' (ID: 18400)
  Prédit: 'initialize'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'initialize' → logprob: -0.02325211651623249
    2. ' initialize' → logprob: -3.773252010345459
    3. '	initialize' → logprob: -12.773252487182617
    4. '   ' → logprob: -13.148252487182617
    5. '.initialize' → logprob: -13.773252487182617
    6. '_initialize' → logprob: -14.273252487182617
    7. 'itialize' → logprob: -16.773252487182617
    8. ' ' → logprob: -17.273252487182617
    9. 'Initialize' → logprob: -17.648252487182617
    10. '[' → logprob: -17.773252487182617

Token 370: '_tree' (ID: 27118)
  Prédit: '_tree'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_tree' → logprob: -1.700132997939363e-05
    2. 'tree' → logprob: -11.000017166137695
    3. '(tree' → logprob: -15.875017166137695
    4. '_t' → logprob: -17.625017166137695
    5. ' tree' → logprob: -17.750017166137695
    6. '```' → logprob: -18.250017166137695
    7. '_TREE' → logprob: -18.750017166137695
    8. '<Tree' → logprob: -19.250017166137695
    9. '	tree' → logprob: -19.375017166137695
    10. 'Tree' → logprob: -19.875017166137695

Token 371: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -7.896309739408025e-07
    2. '(' → logprob: -14.375000953674316
    3. 'n' → logprob: -16.5
    4. ' (' → logprob: -16.625
    5. '
' → logprob: -21.5
    6. '(
' → logprob: -22.125
    7. '```' → logprob: -22.25
    8. '(noun' → logprob: -22.375
    9. '(N' → logprob: -22.5
    10. ')(' → logprob: -22.625

Token 372: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.25195419788360596
    2. ')
' → logprob: -1.501954197883606
    3. '   ' → logprob: -11.126954078674316
    4. ')
' → logprob: -11.626954078674316
    5. ')n' → logprob: -14.376954078674316
    6. ')

' → logprob: -14.876954078674316
    7. '
' → logprob: -15.751954078674316
    8. ' )' → logprob: -15.751954078674316
    9. ' )
' → logprob: -16.376955032348633
    10. '),' → logprob: -17.501955032348633

Token 373: '   ' (ID: 271)
  Prédit: 'read'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'read' → logprob: -0.08380720764398575
    2. '   ' → logprob: -2.5838072299957275
    3. ' read' → logprob: -5.333806991577148
    4. '	read' → logprob: -10.083806991577148
    5. '<|end|>' → logprob: -11.458806991577148
    6. '```' → logprob: -11.833806991577148
    7. '(read' → logprob: -12.208806991577148
    8. 'for' → logprob: -12.708806991577148
    9. '.read' → logprob: -12.833806991577148
    10. '
' → logprob: -12.958806991577148

Token 374: ' read' (ID: 1729)
  Prédit: 'read'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'read' (adapté à ' read') → logprob: -0.0001589618914294988
    2. '   ' → logprob: -9.00015926361084
    3. ' read' → logprob: -10.25015926361084
    4. '	read' → logprob: -16.125158309936523
    5. '    
' → logprob: -17.875158309936523
    6. '(read' → logprob: -18.375158309936523
    7. '  ' → logprob: -18.375158309936523
    8. '
' → logprob: -18.500158309936523
    9. '.read' → logprob: -18.500158309936523
    10. '```' → logprob: -19.000158309936523

Token 375: '_edges' (ID: 68870)
  Prédit: '_edges'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_edges' → logprob: -3.702754474943504e-05
    2. '(tree' → logprob: -10.37503719329834
    3. 'edges' → logprob: -13.62503719329834
    4. '_' → logprob: -14.12503719329834
    5. '_tree' → logprob: -14.12503719329834
    6. 'tree' → logprob: -14.25003719329834
    7. '_ed' → logprob: -14.50003719329834
    8. '```' → logprob: -14.87503719329834
    9. '_lines' → logprob: -15.00003719329834
    10. '_edge' → logprob: -15.25003719329834

Token 376: '(tree' (ID: 44909)
  Prédit: '(tree'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(tree' → logprob: -3.128163257315464e-07
    2. '(' → logprob: -15.125
    3. '(
' → logprob: -18.25
    4. ' (' → logprob: -18.625
    5. '(Tree' → logprob: -20.25
    6. '(t' → logprob: -20.625
    7. '(tr' → logprob: -20.875
    8. '(table' → logprob: -21.125
    9. '(train' → logprob: -21.125
    10. '```' → logprob: -21.5

Token 377: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -3.2378600735682994e-05
    2. ',n' → logprob: -10.625032424926758
    3. ' ,' → logprob: -12.500032424926758
    4. ',
' → logprob: -12.625032424926758
    5. ')' → logprob: -14.875032424926758
    6. '   ' → logprob: -15.625032424926758
    7. '
' → logprob: -16.500032424926758
    8. '(tree' → logprob: -16.500032424926758
    9. '‌,' → logprob: -16.625032424926758
    10. '(n' → logprob: -16.625032424926758

Token 378: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.10020893067121506
    2. ' n' → logprob: -2.3502089977264404
    3. '   ' → logprob: -13.72520923614502
    4. ')n' → logprob: -14.60020923614502
    5. ')' → logprob: -14.72520923614502
    6. '	n' → logprob: -15.22520923614502
    7. '
' → logprob: -17.100208282470703
    8. ' ' → logprob: -17.350208282470703
    9. '(n' → logprob: -17.725208282470703
    10. '```' → logprob: -17.725208282470703

Token 379: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0012382064014673233
    2. ')
' → logprob: -6.7512383460998535
    3. '   ' → logprob: -9.626237869262695
    4. ' )' → logprob: -14.126237869262695
    5. ')n' → logprob: -14.501237869262695
    6. ')

' → logprob: -15.001237869262695
    7. '
' → logprob: -16.376237869262695
    8. ')
' → logprob: -16.626237869262695
    9. '))' → logprob: -16.751237869262695
    10. ')#' → logprob: -16.876237869262695

Token 380: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.035049907863140106
    2. 'ans' → logprob: -3.4100499153137207
    3. ' ans' → logprob: -7.410049915313721
    4. 'que' → logprob: -8.160049438476562
    5. '
' → logprob: -8.660049438476562
    6. '	ans' → logprob: -9.160049438476562
    7. '    
' → logprob: -9.535049438476562
    8. '```' → logprob: -10.285049438476562
    9. 'queue' → logprob: -10.535049438476562
    10. ' que' → logprob: -10.660049438476562

Token 381: ' ans' (ID: 3345)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' (adapté à ' ans') → logprob: -0.000639169302303344
    2. '   ' → logprob: -7.375638961791992
    3. ' ans' → logprob: -11.500638961791992
    4. '
' → logprob: -13.625638961791992
    5. '	ans' → logprob: -14.125638961791992
    6. '    
' → logprob: -15.750638961791992
    7. '  ' → logprob: -16.000638961791992
    8. ' ' → logprob: -16.750638961791992
    9. '(ans' → logprob: -16.750638961791992
    10. 'answer' → logprob: -17.000638961791992

Token 382: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01416350994259119
    2. '=' → logprob: -4.264163494110107
    3. ',' → logprob: -18.139163970947266
    4. '＝' → logprob: -18.389163970947266
    5. '```' → logprob: -18.514163970947266
    6. ' =
' → logprob: -18.889163970947266
    7. '=create' → logprob: -18.889163970947266
    8. ')' → logprob: -19.389163970947266
    9. '=int' → logprob: -19.514163970947266
    10. ' ' → logprob: -19.889163970947266

Token 383: ' initialize' (ID: 18400)
  Prédit: 'initialize'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'initialize' → logprob: -0.07889188081026077
    2. ' initialize' → logprob: -2.5788919925689697
    3. '	initialize' → logprob: -13.95389175415039
    4. '_initialize' → logprob: -14.45389175415039
    5. '   ' → logprob: -15.20389175415039
    6. '.initialize' → logprob: -15.20389175415039
    7. ' ' → logprob: -16.82889175415039
    8. 'itialize' → logprob: -17.20389175415039
    9. 'Initialize' → logprob: -17.32889175415039
    10. 'initial' → logprob: -17.32889175415039

Token 384: '_ans' (ID: 146254)
  Prédit: '_ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_ans' → logprob: -6.034592388459714e-06
    2. 'ans' → logprob: -12.125005722045898
    3. '_answer' → logprob: -14.750005722045898
    4. '_queue' → logprob: -16.0000057220459
    5. 'Ans' → logprob: -17.1250057220459
    6. '(ans' → logprob: -17.8750057220459
    7. '```' → logprob: -18.3750057220459
    8. 'queue' → logprob: -18.8750057220459
    9. '_answers' → logprob: -19.2500057220459
    10. '	ans' → logprob: -19.5000057220459

Token 385: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -2.339278580620885e-06
    2. ' (' → logprob: -13.875001907348633
    3. 'n' → logprob: -14.250001907348633
    4. '(' → logprob: -14.500001907348633
    5. '```' → logprob: -15.750001907348633
    6. '
' → logprob: -18.750001907348633
    7. '(
' → logprob: -19.000001907348633
    8. '   ' → logprob: -19.500001907348633
    9. '`' → logprob: -19.750001907348633
    10. '<n' → logprob: -19.875001907348633

Token 386: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.20178158581256866
    2. ')
' → logprob: -1.7017816305160522
    3. '   ' → logprob: -7.951781749725342
    4. ')
' → logprob: -11.326781272888184
    5. ' )' → logprob: -13.451781272888184
    6. '
' → logprob: -13.576781272888184
    7. ' )
' → logprob: -14.451781272888184
    8. ')

' → logprob: -14.951781272888184
    9. ' ' → logprob: -15.826781272888184
    10. ')\
' → logprob: -16.3267822265625

Token 387: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01711292564868927
    2. 'que' → logprob: -4.142112731933594
    3. ' que' → logprob: -6.892112731933594
    4. '
' → logprob: -10.892112731933594
    5. '```' → logprob: -11.017112731933594
    6. 'queue' → logprob: -11.517112731933594
    7. '  ' → logprob: -12.392112731933594
    8. '    
' → logprob: -12.392112731933594
    9. '       ' → logprob: -13.642112731933594
    10. ' ' → logprob: -13.767112731933594

Token 388: ' que' (ID: 661)
  Prédit: 'que'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' (adapté à ' que') → logprob: -0.0017155165551230311
    2. '   ' → logprob: -6.876715660095215
    3. ' que' → logprob: -7.501715660095215
    4. 'queue' → logprob: -9.251715660095215
    5. '```' → logprob: -11.251715660095215
    6. '  ' → logprob: -12.126715660095215
    7. '
' → logprob: -12.501715660095215
    8. ' ' → logprob: -12.626715660095215
    9. 'qu' → logprob: -13.376715660095215
    10. '``' → logprob: -13.626715660095215

Token 389: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2033558487892151
    2. '=' → logprob: -1.7033557891845703
    3. 'u' → logprob: -6.57835578918457
    4. 'ue' → logprob: -7.57835578918457
    5. '   ' → logprob: -11.20335578918457
    6. '=u' → logprob: -11.70335578918457
    7. 'ues' → logprob: -12.07835578918457
    8. 'uer' → logprob: -12.70335578918457
    9. '.append' → logprob: -13.20335578918457
    10. '_' → logprob: -13.82835578918457

Token 390: ' initialize' (ID: 18400)
  Prédit: 'initialize'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'initialize' → logprob: -0.005971692036837339
    2. ' initialize' → logprob: -5.130971908569336
    3. 'deque' → logprob: -10.255971908569336
    4. '	initialize' → logprob: -12.130971908569336
    5. ' deque' → logprob: -13.880971908569336
    6. '_initialize' → logprob: -15.255971908569336
    7. '   ' → logprob: -15.380971908569336
    8. 'initial' → logprob: -15.380971908569336
    9. 'itialize' → logprob: -15.380971908569336
    10. 'de' → logprob: -15.755971908569336

Token 391: '_queue' (ID: 25622)
  Prédit: '_queue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_queue' → logprob: -0.0003034074034076184
    2. '_tree' → logprob: -8.125303268432617
    3. 'queue' → logprob: -11.875303268432617
    4. '```' → logprob: -15.875303268432617
    5. '_list' → logprob: -16.875303268432617
    6. 'Queue' → logprob: -17.250303268432617
    7. '_q' → logprob: -17.375303268432617
    8. '_array' → logprob: -17.625303268432617
    9. 'que' → logprob: -17.750303268432617
    10. '_stack' → logprob: -18.000303268432617

Token 392: '(tree' (ID: 44909)
  Prédit: '(tree'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(tree' → logprob: -1.9361264946837764e-07
    2. 'tree' → logprob: -16.625
    3. '(' → logprob: -17.625
    4. '	tree' → logprob: -20.25
    5. '(Tree' → logprob: -21.0
    6. '(queue' → logprob: -21.125
    7. '(t' → logprob: -21.625
    8. ' tree' → logprob: -22.0
    9. '/tree' → logprob: -22.125
    10. ' (' → logprob: -22.625

Token 393: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002685990883037448
    2. ')
' → logprob: -6.502686023712158
    3. '   ' → logprob: -6.752686023712158
    4. '())' → logprob: -11.877685546875
    5. '()' → logprob: -12.002685546875
    6. ' )' → logprob: -14.502685546875
    7. ')
' → logprob: -15.002685546875
    8. '(' → logprob: -15.252685546875
    9. ' ' → logprob: -15.377685546875
    10. '))' → logprob: -15.877685546875

Token 394: '   ' (ID: 271)
  Prédit: 'process'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'process' → logprob: -0.587806224822998
    2. '   ' → logprob: -0.837806224822998
    3. ' process' → logprob: -4.462806224822998
    4. '	process' → logprob: -8.587806701660156
    5. '(process' → logprob: -10.087806701660156
    6. '
' → logprob: -10.462806701660156
    7. '_process' → logprob: -12.587806701660156
    8. '.process' → logprob: -12.712806701660156
    9. '```' → logprob: -13.712806701660156
    10. '    
' → logprob: -14.587806701660156

Token 395: ' process' (ID: 2273)
  Prédit: 'process'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'process' (adapté à ' process') → logprob: -1.5048530030981055e-06
    2. ' process' → logprob: -13.500001907348633
    3. '   ' → logprob: -19.000001907348633
    4. '	process' → logprob: -21.375001907348633
    5. 'proces' → logprob: -22.625001907348633
    6. '.process' → logprob: -23.750001907348633
    7. '(process' → logprob: -23.750001907348633
    8. 'while' → logprob: -25.625001907348633
    9. '_process' → logprob: -25.875001907348633
    10. '
' → logprob: -27.125001907348633

Token 396: '_queue' (ID: 25622)
  Prédit: '_queue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_queue' → logprob: 0.0
    2. 'queue' → logprob: -16.875
    3. '_' → logprob: -17.125
    4. '```' → logprob: -20.75
    5. '_QUEUE' → logprob: -21.125
    6. '_stack' → logprob: -21.125
    7. ' queue' → logprob: -21.375
    8. 'Queue' → logprob: -21.875
    9. '_process' → logprob: -22.375
    10. '(queue' → logprob: -22.5

Token 397: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.9361264946837764e-07
    2. ' (' → logprob: -15.625
    3. '(
' → logprob: -16.75
    4. '((' → logprob: -18.75
    5. '(queue' → logprob: -19.625
    6. '```' → logprob: -20.0
    7. '(

' → logprob: -21.625
    8. '('' → logprob: -22.375
    9. '(qu' → logprob: -22.625
    10. '   ' → logprob: -22.75

Token 398: 'que' (ID: 1126)
  Prédit: 'que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' → logprob: -4.644463479053229e-05
    2. '(' → logprob: -10.000046730041504
    3. ' que' → logprob: -13.875046730041504
    4. 'queue' → logprob: -18.125045776367188
    5. 'ques' → logprob: -18.250045776367188
    6. '```' → logprob: -18.250045776367188
    7. ')' → logprob: -18.500045776367188
    8. 'Que' → logprob: -18.750045776367188
    9. 'qui' → logprob: -19.125045776367188
    10. '
' → logprob: -19.125045776367188

Token 399: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.9862216504407115e-05
    2. '(' → logprob: -11.625020027160645
    3. '(tree' → logprob: -11.875020027160645
    4. ' ,' → logprob: -12.625020027160645
    5. ',
' → logprob: -15.375020027160645
    6. '(queue' → logprob: -16.125019073486328
    7. ')' → logprob: -16.500019073486328
    8. '   ' → logprob: -16.875019073486328
    9. '(),' → logprob: -17.250019073486328
    10. 'que' → logprob: -18.750019073486328

Token 400: ' tree' (ID: 8165)
  Prédit: 'tree'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tree' → logprob: -0.0009115827269852161
    2. ' tree' → logprob: -7.000911712646484
    3. '	tree' → logprob: -17.625911712646484
    4. '   ' → logprob: -18.000911712646484
    5. '(tree' → logprob: -18.375911712646484
    6. ' ' → logprob: -19.750911712646484
    7. 'Tree' → logprob: -20.125911712646484
    8. 'tre' → logprob: -20.250911712646484
    9. 'trees' → logprob: -20.375911712646484
    10. 't' → logprob: -21.250911712646484

Token 401: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -5.5577775128767826e-06
    2. ' ,' → logprob: -12.125005722045898
    3. '```' → logprob: -18.5000057220459
    4. '‌,' → logprob: -18.7500057220459
    5. '`,' → logprob: -19.5000057220459
    6. ')' → logprob: -19.5000057220459
    7. ',
' → logprob: -19.5000057220459
    8. '   ' → logprob: -19.7500057220459
    9. '[' → logprob: -20.3750057220459
    10. '),' → logprob: -20.3750057220459

Token 402: ' ans' (ID: 3345)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.0002613358374219388
    2. ' ans' → logprob: -8.250261306762695
    3. '	ans' → logprob: -17.750261306762695
    4. '(ans' → logprob: -18.250261306762695
    5. '   ' → logprob: -20.625261306762695
    6. '_ans' → logprob: -20.875261306762695
    7. 'ann' → logprob: -21.875261306762695
    8. ' ' → logprob: -22.125261306762695
    9. 'Ans' → logprob: -22.750261306762695
    10. '
' → logprob: -22.875261306762695

Token 403: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.5761574506759644
    2. ')' → logprob: -0.8261574506759644
    3. '   ' → logprob: -8.451157569885254
    4. ')
' → logprob: -12.826157569885254
    5. ')

' → logprob: -13.826157569885254
    6. ' )
' → logprob: -15.701157569885254
    7. ')#' → logprob: -16.826156616210938
    8. ' )' → logprob: -16.826156616210938
    9. ')`
' → logprob: -16.826156616210938
    10. '),' → logprob: -16.951156616210938

Token 404: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06276623904705048
    2. 'print' → logprob: -3.0627663135528564
    3. '
' → logprob: -4.312766075134277
    4. ' print' → logprob: -7.562766075134277
    5. '    
' → logprob: -9.312766075134277
    6. '```' → logprob: -9.937766075134277
    7. '	print' → logprob: -11.187766075134277
    8. '(print' → logprob: -12.437766075134277
    9. '
' → logprob: -12.812766075134277
    10. ' 
' → logprob: -14.187766075134277

Token 405: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -1.2664456789934775e-06
    2. ' print' → logprob: -14.000000953674316
    3. '   ' → logprob: -15.000000953674316
    4. '
' → logprob: -20.375001907348633
    5. '```' → logprob: -21.000001907348633
    6. '	print' → logprob: -23.000001907348633
    7. '.print' → logprob: -23.000001907348633
    8. '(print' → logprob: -23.125001907348633
    9. '#print' → logprob: -23.750001907348633
    10. '  ' → logprob: -24.500001907348633

Token 406: '_answer' (ID: 65702)
  Prédit: '_answer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_answer' → logprob: -4.842555426876061e-06
    2. '_ans' → logprob: -13.125004768371582
    3. '_' → logprob: -13.250004768371582
    4. '_answers' → logprob: -15.250004768371582
    5. 'Answer' → logprob: -15.375004768371582
    6. '(_' → logprob: -15.500004768371582
    7. 'answer' → logprob: -15.625004768371582
    8. '```' → logprob: -17.0000057220459
    9. '(answer' → logprob: -17.3750057220459
    10. '_question' → logprob: -17.3750057220459

Token 407: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -4.320199877838604e-07
    2. '(' → logprob: -15.0
    3. '(answer' → logprob: -16.25
    4. ' (' → logprob: -16.875
    5. 'ans' → logprob: -19.5
    6. '(arr' → logprob: -20.0
    7. '```' → logprob: -20.0
    8. '(an' → logprob: -20.5
    9. '(ord' → logprob: -20.875
    10. '(args' → logprob: -21.125

Token 408: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0280383548888494e-06
    2. ')
' → logprob: -14.500000953674316
    3. '())' → logprob: -15.375000953674316
    4. '))' → logprob: -15.750000953674316
    5. ')`' → logprob: -16.250001907348633
    6. ' )' → logprob: -17.125001907348633
    7. '()' → logprob: -17.500001907348633
    8. ')

' → logprob: -18.875001907348633
    9. ')#' → logprob: -19.125001907348633
    10. '`)' → logprob: -19.750001907348633

Token 409: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.00013488641707226634
    2. 'main' → logprob: -9.000134468078613
    3. ' if' → logprob: -11.750134468078613
    4. '
' → logprob: -13.250134468078613
    5. '```' → logprob: -13.750134468078613
    6. '#' → logprob: -15.500134468078613
    7. '<|end|>' → logprob: -16.00013542175293
    8. '\' → logprob: -16.12513542175293
    9. '\n' → logprob: -16.12513542175293
    10. '(main' → logprob: -17.25013542175293

Token 410: '()' (ID: 416)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 408
Tokens correctement prédits (1ère position, stricte): 182
Tokens correctement prédits (1ère position, avec adaptation): 202
Tokens correctement prédits (top 10): 365
Précision stricte (1ère position): 44.61%
Précision adaptée (1ère position): 49.51%
Précision (top 10): 89.46%
================================================================================
