================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:38:04
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
r = int(input())
print(r ** 2)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'r' (ID: 81)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004195455927401781
    2. 'r' → logprob: -6.254195690155029
    3. '(r' → logprob: -6.254195690155029
    4. '```' → logprob: -8.629195213317871
    5. ''' → logprob: -9.879195213317871
    6. '('' → logprob: -10.254195213317871
    7. '`' → logprob: -11.379195213317871
    8. '("("' → logprob: -11.629195213317871
    9. '(
' → logprob: -12.129195213317871
    10. '()' → logprob: -12.129195213317871

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06202247366309166
    2. ')' → logprob: -2.9370224475860596
    3. '()' → logprob: -6.062022686004639
    4. '(
' → logprob: -7.312022686004639
    5. ''' → logprob: -7.437022686004639
    6. 'r' → logprob: -7.437022686004639
    7. '```' → logprob: -7.437022686004639
    8. '`' → logprob: -7.687022686004639
    9. '(r' → logprob: -8.06202220916748
    10. '('' → logprob: -8.31202220916748

Token 5: 'print' (ID: 1598)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.9932829737663269
    2. 'if' → logprob: -1.7432830333709717
    3. '*' → logprob: -1.9932830333709717
    4. 's' → logprob: -2.3682830333709717
    5. ''' → logprob: -2.9932830333709717
    6. '%' → logprob: -3.1182830333709717
    7. 'i' → logprob: -3.7432830333709717
    8. '`' → logprob: -3.8682830333709717
    9. 'x' → logprob: -4.618282794952393
    10. '\n' → logprob: -4.618282794952393

Token 6: '(r' (ID: 4729)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.005143985152244568
    2. '('' → logprob: -5.380144119262695
    3. '("("' → logprob: -7.755144119262695
    4. '(r' → logprob: -9.380144119262695
    5. '()' → logprob: -12.755144119262695
    6. '(f' → logprob: -12.880144119262695
    7. '("""' → logprob: -13.505144119262695
    8. '("")' → logprob: -14.255144119262695
    9. '(
' → logprob: -14.505144119262695
    10. '((' → logprob: -14.505144119262695

Token 7: ' **' (ID: 6240)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0002406090497970581
    2. '))' → logprob: -8.625240325927734
    3. '`)' → logprob: -10.000240325927734
    4. '')' → logprob: -11.625240325927734
    5. '")' → logprob: -12.875240325927734
    6. ' )' → logprob: -13.875240325927734
    7. ')`' → logprob: -14.625240325927734
    8. '[' → logprob: -14.750240325927734
    9. 'r' → logprob: -14.875240325927734
    10. ')))' → logprob: -15.375240325927734

Token 8: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.22568584978580475
    2. ' ' → logprob: -1.6006858348846436
    3. '3' → logprob: -8.350686073303223
    4. ')' → logprob: -10.850686073303223
    5. ' )' → logprob: -11.600686073303223
    6. '0' → logprob: -11.850686073303223
    7. ' r' → logprob: -15.100686073303223
    8. '(' → logprob: -15.225686073303223
    9. '1' → logprob: -15.350686073303223
    10. 'r' → logprob: -15.850686073303223

Token 9: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.004659503698348999
    2. '3' → logprob: -5.379659652709961
    3. ' ' → logprob: -10.629659652709961
    4. '0' → logprob: -11.629659652709961
    5. 'r' → logprob: -12.504659652709961
    6. ')' → logprob: -13.879659652709961
    7. '1' → logprob: -14.129659652709961
    8. '(' → logprob: -15.129659652709961
    9. '4' → logprob: -15.754659652709961
    10. '-' → logprob: -15.879659652709961

Token 10: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.2352385965641588e-05
    2. '))' → logprob: -11.750012397766113
    3. '`)' → logprob: -12.625012397766113
    4. ')`' → logprob: -14.750012397766113
    5. ' )' → logprob: -15.000012397766113
    6. '')' → logprob: -15.875012397766113
    7. ')
' → logprob: -16.375011444091797
    8. ')**' → logprob: -16.500011444091797
    9. ')))' → logprob: -17.750011444091797
    10. '```' → logprob: -17.750011444091797


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 8
Tokens correctement prédits (1ère position, stricte): 2
Tokens correctement prédits (1ère position, avec adaptation): 2
Tokens correctement prédits (top 10): 4
Précision stricte (1ère position): 25.00%
Précision adaptée (1ère position): 25.00%
Précision (top 10): 50.00%
================================================================================
