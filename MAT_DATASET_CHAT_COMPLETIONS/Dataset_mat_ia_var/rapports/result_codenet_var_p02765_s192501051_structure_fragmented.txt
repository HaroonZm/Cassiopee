================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:24:40
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def read_input():
    return input()

def parse_input(line):
    return map(int, line.split())

def get_k_r():
    line = read_input()
    k, r = parse_input(line)
    return k, r

def check_condition(k):
    return k >= 10

def compute_output(r, k):
    if check_condition(k):
        return r
    else:
        return r + 100 * (10 - k)

def print_result(result):
    print(result)

def main():
    k, r = get_k_r()
    result = compute_output(r, k)
    print_result(result)

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' read' (ID: 1729)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.013885974884033203
    2. '():' → logprob: -4.513885974884033
    3. '_' → logprob: -6.388885974884033
    4. '(:' → logprob: -7.888885974884033
    5. '(_:' → logprob: -8.138885498046875
    6. '```' → logprob: -8.388885498046875
    7. ':' → logprob: -10.013885498046875
    8. '()' → logprob: -10.138885498046875
    9. '(_' → logprob: -10.388885498046875
    10. ' (' → logprob: -10.388885498046875

Token 4: '   ' (ID: 271)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\' → logprob: -1.202744960784912
    2. '```' → logprob: -1.202744960784912
    3. '\n' → logprob: -1.577744960784912
    4. '   ' → logprob: -2.077744960784912
    5. '    
' → logprob: -4.452744960784912
    6. '(' → logprob: -4.452744960784912
    7. ':' → logprob: -4.577744960784912
    8. '``' → logprob: -4.827744960784912
    9. '():' → logprob: -5.702744960784912
    10. ''\' → logprob: -6.327744960784912

Token 5: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.4959542751312256
    2. 'input' → logprob: -1.4959542751312256
    3. 'data' → logprob: -3.6209542751312256
    4. 'x' → logprob: -3.6209542751312256
    5. '   ' → logprob: -3.6209542751312256
    6. '```' → logprob: -3.8709542751312256
    7. 'n' → logprob: -3.9959542751312256
    8. 'user' → logprob: -4.120954513549805
    9. 'text' → logprob: -4.370954513549805
    10. 'r' → logprob: -5.745954513549805

Token 6: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.509859025478363
    2. ' input' → logprob: -1.2598590850830078
    3. 'input' → logprob: -2.259859085083008
    4. '"' → logprob: -4.884859085083008
    5. ''' → logprob: -7.009859085083008
    6. ' []' → logprob: -7.009859085083008
    7. ' None' → logprob: -7.759859085083008
    8. '  ' → logprob: -7.884859085083008
    9. '(input' → logprob: -8.134859085083008
    10. ' "' → logprob: -8.384859085083008

Token 7: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0061619896441698074
    2. '()' → logprob: -5.131162166595459
    3. '```' → logprob: -9.8811616897583
    4. '(
' → logprob: -10.2561616897583
    5. '.' → logprob: -10.3811616897583
    6. ' (' → logprob: -10.7561616897583
    7. '('' → logprob: -11.2561616897583
    8. '(

' → logprob: -11.3811616897583
    9. '("("' → logprob: -11.6311616897583
    10. '(.)' → logprob: -11.8811616897583

Token 8: 'def' (ID: 1314)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.5337697267532349
    2. '(' → logprob: -1.6587697267532349
    3. '()' → logprob: -3.0337696075439453
    4. ':' → logprob: -3.2837696075439453
    5. 'def' → logprob: -3.2837696075439453
    6. '\' → logprob: -3.7837696075439453
    7. '```' → logprob: -4.033769607543945
    8. '(
' → logprob: -4.283769607543945
    9. '#' → logprob: -4.908769607543945
    10. '
' → logprob: -5.033769607543945

Token 9: ' parse' (ID: 8420)
  Prédit: ' process'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' process' → logprob: -0.8695198893547058
    2. ' calculate' → logprob: -1.4945199489593506
    3. ' read' → logprob: -1.9945199489593506
    4. ' main' → logprob: -2.4945199489593506
    5. ' write' → logprob: -2.4945199489593506
    6. ' compute' → logprob: -4.3695197105407715
    7. ' user' → logprob: -4.7445197105407715
    8. ' space' → logprob: -5.1195197105407715
    9. ' parse' → logprob: -5.1195197105407715
    10. ' print' → logprob: -5.6195197105407715

Token 10: '_input' (ID: 12507)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.046623338013887405
    2. '_input' → logprob: -3.2966232299804688
    3. '(' → logprob: -5.046623229980469
    4. '_line' → logprob: -6.921623229980469
    5. '_text' → logprob: -8.421623229980469
    6. '_user' → logprob: -8.796623229980469
    7. '_data' → logprob: -9.296623229980469
    8. '_token' → logprob: -9.546623229980469
    9. '_string' → logprob: -9.921623229980469
    10. '_function' → logprob: -9.921623229980469

Token 11: '(line' (ID: 18178)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.02983587421476841
    2. '_' → logprob: -3.6548359394073486
    3. '("("' → logprob: -6.9048357009887695
    4. '(_' → logprob: -7.6548357009887695
    5. '('_' → logprob: -7.9048357009887695
    6. '(_)' → logprob: -8.40483570098877
    7. 'def' → logprob: -8.77983570098877
    8. '_parent' → logprob: -8.77983570098877
    9. '_line' → logprob: -9.15483570098877
    10. '_input' → logprob: -9.40483570098877

Token 12: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0007048065308481455
    2. ')' → logprob: -8.000704765319824
    3. '):
' → logprob: -8.250704765319824
    4. ':' → logprob: -9.375704765319824
    5. ',' → logprob: -11.750704765319824
    6. ' ):' → logprob: -12.625704765319824
    7. '   ' → logprob: -12.750704765319824
    8. '):
' → logprob: -12.875704765319824
    9. '=' → logprob: -13.750704765319824
    10. '_line' → logprob: -14.125704765319824

Token 13: '   ' (ID: 271)
  Prédit: ' line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' line' → logprob: -0.23314514756202698
    2. '   ' → logprob: -1.6081451177597046
    3. 'line' → logprob: -5.858145236968994
    4. '    ' → logprob: -5.983145236968994
    5. ' return' → logprob: -6.858145236968994
    6. '(line' → logprob: -8.108144760131836
    7. ' split' → logprob: -8.733144760131836
    8. '	line' → logprob: -8.733144760131836
    9. '=line' → logprob: -8.858144760131836
    10. ' ' → logprob: -9.358144760131836

Token 14: ' return' (ID: 622)
  Prédit: ' line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' line' → logprob: -0.2727506756782532
    2. '   ' → logprob: -2.2727506160736084
    3. 'line' → logprob: -2.2727506160736084
    4. ' return' → logprob: -3.8977506160736084
    5. 'return' (adapté à ' return') → logprob: -4.8977508544921875
    6. ' tokens' → logprob: -6.0227508544921875
    7. 'int' → logprob: -7.1477508544921875
    8. ' int' → logprob: -7.6477508544921875
    9. 'tokens' → logprob: -7.6477508544921875
    10. ' parts' → logprob: -7.8977508544921875

Token 15: ' map' (ID: 4014)
  Prédit: ' line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' line' → logprob: -0.15853755176067352
    2. 'line' → logprob: -2.1585376262664795
    3. ' int' → logprob: -3.7835376262664795
    4. ' list' → logprob: -5.5335373878479
    5. 'int' → logprob: -5.9085373878479
    6. 'list' → logprob: -7.4085373878479
    7. ' ' → logprob: -7.6585373878479
    8. '[line' → logprob: -8.533537864685059
    9. ' tuple' → logprob: -8.783537864685059
    10. ' map' → logprob: -9.658537864685059

Token 16: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.27029091119766235
    2. '(' → logprob: -1.5202908515930176
    3. '(str' → logprob: -4.020290851593018
    4. '(lambda' → logprob: -8.770291328430176
    5. '(float' → logprob: -9.895291328430176
    6. '(input' → logprob: -11.270291328430176
    7. '(eval' → logprob: -12.020291328430176
    8. '(
' → logprob: -12.520291328430176
    9. '(

' → logprob: -12.770291328430176
    10. '(s' → logprob: -12.895291328430176

Token 17: ',' (ID: 11)
  Prédit: '(line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(line' → logprob: -0.029985245317220688
    2. '(' → logprob: -3.529985189437866
    3. ' (' → logprob: -9.279985427856445
    4. ')' → logprob: -9.654985427856445
    5. ' line' → logprob: -10.779985427856445
    6. ',line' → logprob: -10.779985427856445
    7. ',' → logprob: -11.029985427856445
    8. '(input' → logprob: -12.404985427856445
    9. '(
' → logprob: -12.404985427856445
    10. '(split' → logprob: -13.029985427856445

Token 18: ' line' (ID: 2543)
  Prédit: ' line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' line' → logprob: -0.4740951359272003
    2. 'line' → logprob: -0.9740951061248779
    3. '(line' → logprob: -11.224095344543457
    4. '	line' → logprob: -12.974095344543457
    5. '#line' → logprob: -14.224095344543457
    6. ')' → logprob: -14.349095344543457
    7. '   ' → logprob: -14.474095344543457
    8. '[line' → logprob: -14.974095344543457
    9. '=line' → logprob: -15.724095344543457
    10. ',line' → logprob: -16.47409439086914

Token 19: '.split' (ID: 10347)
  Prédit: '().'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.08769627660512924
    2. '.' → logprob: -2.8376963138580322
    3. '.split' → logprob: -3.8376963138580322
    4. '.strip' → logprob: -6.087696075439453
    5. ' .' → logprob: -6.587696075439453
    6. '()' → logprob: -9.462696075439453
    7. ' ().' → logprob: -9.712696075439453
    8. '   ' → logprob: -10.462696075439453
    9. 'split' → logprob: -10.837696075439453
    10. ')' → logprob: -11.837696075439453

Token 20: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.018995376303792
    2. '()))' → logprob: -4.39399528503418
    3. '()' → logprob: -5.76899528503418
    4. '('' → logprob: -6.14399528503418
    5. '(' → logprob: -6.76899528503418
    6. ')' → logprob: -11.26899528503418
    7. ' ())' → logprob: -11.39399528503418
    8. '(()' → logprob: -12.64399528503418
    9. '()),' → logprob: -12.64399528503418
    10. '("' → logprob: -13.14399528503418

Token 21: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.001890672487206757
    2. 'd' → logprob: -6.626890659332275
    3. '

' → logprob: -8.376891136169434
    4. '
' → logprob: -8.876891136169434
    5. '```' → logprob: -9.251891136169434
    6. '\' → logprob: -9.501891136169434
    7. ' 

' → logprob: -12.376891136169434
    8. 'de' → logprob: -12.626891136169434
    9. '<|end|>' → logprob: -13.126891136169434
    10. 'for' → logprob: -13.126891136169434

Token 22: ' get' (ID: 717)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.04213438928127289
    2. ' solve' → logprob: -3.7921342849731445
    3. ' process' → logprob: -5.0421342849731445
    4. ' sum' → logprob: -5.6671342849731445
    5. 'main' → logprob: -5.6671342849731445
    6. ' calculate' → logprob: -5.7921342849731445
    7. ' compute' → logprob: -7.5421342849731445
    8. ' read' → logprob: -7.6671342849731445
    9. 'solve' → logprob: -7.7921342849731445
    10. ' add' → logprob: -8.792134284973145

Token 23: '_k' (ID: 11637)
  Prédit: '_max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_max' → logprob: -0.2638596296310425
    2. '_sum' → logprob: -1.7638596296310425
    3. '_' → logprob: -3.888859748840332
    4. '_data' → logprob: -4.888859748840332
    5. '_input' → logprob: -5.388859748840332
    6. '_numbers' → logprob: -5.638859748840332
    7. '_factor' → logprob: -6.138859748840332
    8. '_pr' → logprob: -6.263859748840332
    9. '_next' → logprob: -6.263859748840332
    10. '_prime' → logprob: -6.638859748840332

Token 24: '_r' (ID: 3442)
  Prédit: 'th'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'th' → logprob: -0.8431437015533447
    2. '_sum' → logprob: -2.4681437015533447
    3. 'ernel' → logprob: -2.8431437015533447
    4. '_ne' → logprob: -2.9681437015533447
    5. '_cl' → logprob: -2.9681437015533447
    6. '_th' → logprob: -2.9681437015533447
    7. '_value' → logprob: -3.5931437015533447
    8. '_elements' → logprob: -3.8431437015533447
    9. '_' → logprob: -3.9681437015533447
    10. '_next' → logprob: -4.093143463134766

Token 25: '():
' (ID: 8595)
  Prédit: 'ange'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ange' → logprob: -0.6248727440834045
    2. 'adius' → logprob: -2.1248726844787598
    3. 'es' → logprob: -2.8748726844787598
    4. 'e' → logprob: -3.2498726844787598
    5. 'anges' → logprob: -3.2498726844787598
    6. 'ead' → logprob: -3.2498726844787598
    7. 'em' → logprob: -3.3748726844787598
    8. 'el' → logprob: -3.8748726844787598
    9. 'ow' → logprob: -3.8748726844787598
    10. 'at' → logprob: -4.62487268447876

Token 26: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.26777079701423645
    2. 'line' → logprob: -2.267770767211914
    3. ' line' → logprob: -2.392770767211914
    4. 'return' → logprob: -4.392770767211914
    5. ' return' → logprob: -4.642770767211914
    6. '(line' → logprob: -5.267770767211914
    7. '    
' → logprob: -5.517770767211914
    8. '```' → logprob: -5.892770767211914
    9. 'input' → logprob: -6.267770767211914
    10. 'def' → logprob: -7.142770767211914

Token 27: ' line' (ID: 2543)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'line' (adapté à ' line') → logprob: -0.6997107863426208
    2. '   ' → logprob: -1.3247108459472656
    3. 'return' → logprob: -1.8247108459472656
    4. 'k' → logprob: -2.6997108459472656
    5. ' line' → logprob: -5.324710845947266
    6. ' return' → logprob: -6.449710845947266
    7. ' k' → logprob: -6.699710845947266
    8. 'try' → logprob: -8.074710845947266
    9. '```' → logprob: -8.324710845947266
    10. ' ' → logprob: -9.074710845947266

Token 28: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.029752103611826897
    2. '=' → logprob: -3.529752016067505
    3. '_' → logprob: -14.404751777648926
    4. ' ' → logprob: -14.529751777648926
    5. 's' → logprob: -15.279751777648926
    6. '.' → logprob: -16.529752731323242
    7. ' =
' → logprob: -16.904752731323242
    8. ')' → logprob: -17.029752731323242
    9. '_=' → logprob: -17.154752731323242
    10. ',' → logprob: -17.279752731323242

Token 29: ' read' (ID: 1729)
  Prédit: ' read'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.6215566396713257
    2. ' input' → logprob: -0.8715566396713257
    3. 'input' → logprob: -3.7465567588806152
    4. 'read' → logprob: -3.8715567588806152
    5. ' ' → logprob: -8.746556282043457
    6. ' readline' → logprob: -12.996556282043457
    7. '	read' → logprob: -12.996556282043457
    8. '  ' → logprob: -13.746556282043457
    9. ' get' → logprob: -14.496556282043457
    10. '	input' → logprob: -14.934056282043457

Token 30: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -4.2987729102605954e-05
    2. '_' → logprob: -10.250042915344238
    3. '_line' → logprob: -12.000042915344238
    4. '_output' → logprob: -15.000042915344238
    5. ' _' → logprob: -15.625042915344238
    6. '_in' → logprob: -15.750042915344238
    7. '_inputs' → logprob: -16.250043869018555
    8. '_user' → logprob: -16.250043869018555
    9. '```' → logprob: -16.500043869018555
    10. '_Input' → logprob: -16.625043869018555

Token 31: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -1.6240566083070007e-06
    2. '()
' → logprob: -13.875001907348633
    3. '())' → logprob: -15.250001907348633
    4. '()

' → logprob: -16.250001907348633
    5. '()`' → logprob: -16.750001907348633
    6. ' ()' → logprob: -16.875001907348633
    7. ')' → logprob: -17.250001907348633
    8. '().' → logprob: -17.375001907348633
    9. '()]' → logprob: -18.000001907348633
    10. '`()' → logprob: -18.375001907348633

Token 32: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08364615589380264
    2. 'return' → logprob: -3.083646059036255
    3. ' return' → logprob: -4.208646297454834
    4. 'k' → logprob: -4.708646297454834
    5. ' ' → logprob: -5.458646297454834
    6. '    
' → logprob: -5.583646297454834
    7. '  ' → logprob: -7.708646297454834
    8. ' k' → logprob: -8.083645820617676
    9. 'tokens' → logprob: -8.208645820617676
    10. 'r' → logprob: -8.458645820617676

Token 33: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' (adapté à ' k') → logprob: -1.150520920753479
    2. 'return' → logprob: -1.275520920753479
    3. ' return' → logprob: -1.275520920753479
    4. ' k' → logprob: -2.5255208015441895
    5. '   ' → logprob: -3.4005208015441895
    6. ' ' → logprob: -5.1505208015441895
    7. 'r' → logprob: -6.6505208015441895
    8. ' parts' → logprob: -6.7755208015441895
    9. 'tokens' → logprob: -6.9005208015441895
    10. '    ' → logprob: -7.0255208015441895

Token 34: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0005348019185476005
    2. ' ,' → logprob: -8.750535011291504
    3. ',k' → logprob: -8.875535011291504
    4. ',r' → logprob: -9.000535011291504
    5. '_,' → logprob: -9.750535011291504
    6. ',_' → logprob: -10.250535011291504
    7. '_r' → logprob: -12.125535011291504
    8. '_' → logprob: -12.375535011291504
    9. ',s' → logprob: -13.500535011291504
    10. ' ' → logprob: -13.750535011291504

Token 35: ' r' (ID: 428)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.06679674983024597
    2. ' r' → logprob: -2.9417967796325684
    3. ' line' → logprob: -4.816796779632568
    4. 'r' → logprob: -6.816796779632568
    5. '<|end|>' → logprob: -7.066796779632568
    6. ' space' → logprob: -8.06679630279541
    7. 'space' → logprob: -8.44179630279541
    8. '_' → logprob: -8.44179630279541
    9. 'line' → logprob: -8.94179630279541
    10. '  ' → logprob: -8.94179630279541

Token 36: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.06197945028543472
    2. '=' → logprob: -2.8119795322418213
    3. ',' → logprob: -11.436979293823242
    4. ' ' → logprob: -13.936979293823242
    5. ' =
' → logprob: -17.061979293823242
    6. '=line' → logprob: -17.436979293823242
    7. ' ,' → logprob: -17.561979293823242
    8. '＝' → logprob: -17.561979293823242
    9. 's' → logprob: -17.686979293823242
    10. '  ' → logprob: -17.811979293823242

Token 37: ' parse' (ID: 8420)
  Prédit: ' parse'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' parse' → logprob: -0.023702412843704224
    2. ' next' → logprob: -4.398702621459961
    3. 'parse' → logprob: -5.148702621459961
    4. ' map' → logprob: -5.273702621459961
    5. ' k' → logprob: -9.273702621459961
    6. ' list' → logprob: -10.398702621459961
    7. ' tuple' → logprob: -11.023702621459961
    8. ' ' → logprob: -11.023702621459961
    9. '=parse' → logprob: -11.273702621459961
    10. 'map' → logprob: -11.398702621459961

Token 38: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -2.1008713702030946e-06
    2. 'input' → logprob: -13.375001907348633
    3. '(input' → logprob: -15.875001907348633
    4. '_' → logprob: -16.375001907348633
    5. '_in' → logprob: -16.750001907348633
    6. '_line' → logprob: -16.875001907348633
    7. '_int' → logprob: -17.125001907348633
    8. '_inputs' → logprob: -17.625001907348633
    9. '_output' → logprob: -17.750001907348633
    10. '(_' → logprob: -18.000001907348633

Token 39: '(line' (ID: 18178)
  Prédit: '(line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(line' → logprob: -3.726595241460018e-05
    2. '(' → logprob: -10.25003719329834
    3. ' (' → logprob: -13.25003719329834
    4. '=line' → logprob: -17.375038146972656
    5. '(lines' → logprob: -17.500038146972656
    6. '[line' → logprob: -17.500038146972656
    7. ' line' → logprob: -17.750038146972656
    8. ')(' → logprob: -18.000038146972656
    9. '(
' → logprob: -18.125038146972656
    10. '(Line' → logprob: -18.625038146972656

Token 40: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.842555426876061e-06
    2. '()' → logprob: -13.125004768371582
    3. '))' → logprob: -14.000004768371582
    4. '   ' → logprob: -14.625004768371582
    5. ')
' → logprob: -14.875004768371582
    6. ')`' → logprob: -14.875004768371582
    7. ' )' → logprob: -15.000004768371582
    8. '())' → logprob: -15.250004768371582
    9. '`)' → logprob: -15.875004768371582
    10. ')return' → logprob: -17.0000057220459

Token 41: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.523568868637085
    2. 'return' → logprob: -1.648568868637085
    3. '
' → logprob: -2.273568868637085
    4. ' return' → logprob: -2.523568868637085
    5. '    
' → logprob: -4.148569107055664
    6. '	return' → logprob: -4.648569107055664
    7. '<|end|>' → logprob: -6.398569107055664
    8. ' ' → logprob: -6.648569107055664
    9. ' 
' → logprob: -6.898569107055664
    10. '  
' → logprob: -7.898569107055664

Token 42: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.7320043444633484
    2. 'return' (adapté à ' return') → logprob: -0.8570043444633484
    3. '   ' → logprob: -2.482004404067993
    4. '	return' → logprob: -4.732004165649414
    5. ' ' → logprob: -6.982004165649414
    6. '    
' → logprob: -7.982004165649414
    7. ':return' → logprob: -8.357004165649414
    8. ' 
' → logprob: -8.857004165649414
    9. '    ' → logprob: -9.232004165649414
    10. '
' → logprob: -9.357004165649414

Token 43: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.6335973143577576
    2. ' k' → logprob: -0.7585973143577576
    3. '(k' → logprob: -7.508597373962402
    4. ' (' → logprob: -7.883597373962402
    5. ' ' → logprob: -10.258597373962402
    6. '	k' → logprob: -11.133597373962402
    7. '(' → logprob: -11.508597373962402
    8. ' ' → logprob: -12.258597373962402
    9. '   ' → logprob: -12.883597373962402
    10. '  ' → logprob: -13.008597373962402

Token 44: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.000735177774913609
    2. ' ,' → logprob: -7.500735282897949
    3. ' ' → logprob: -9.37573528289795
    4. ',
' → logprob: -10.12573528289795
    5. ',r' → logprob: -10.25073528289795
    6. ',k' → logprob: -11.00073528289795
    7. '<|end|>' → logprob: -12.87573528289795
    8. '  ' → logprob: -14.75073528289795
    9. ',

' → logprob: -15.12573528289795
    10. '```' → logprob: -15.25073528289795

Token 45: ' r' (ID: 428)
  Prédit: ' r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' r' → logprob: -0.07889793813228607
    2. 'r' → logprob: -2.5788979530334473
    3. ' ' → logprob: -12.453897476196289
    4. ' ' → logprob: -12.453897476196289
    5. ' (' → logprob: -15.828897476196289
    6. '	r' → logprob: -16.70389747619629
    7. '_r' → logprob: -16.82889747619629
    8. 'space' → logprob: -17.32889747619629
    9. '(r' → logprob: -17.70389747619629
    10. 'k' → logprob: -17.70389747619629

Token 46: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.102122463285923
    2. 'def' → logprob: -2.7271225452423096
    3. '<|end|>' → logprob: -3.7271225452423096
    4. '

' → logprob: -5.6021223068237305
    5. '```' → logprob: -6.1021223068237305
    6. '\n' → logprob: -7.7271223068237305
    7. '
' → logprob: -8.10212230682373
    8. '<|end|>' → logprob: -8.22712230682373
    9. 'newline' → logprob: -9.10212230682373
    10. '' → logprob: -9.35212230682373

Token 47: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.08641280233860016
    2. '
' → logprob: -2.8364129066467285
    3. '<|end|>' → logprob: -4.0864129066467285
    4. 'k' → logprob: -5.4614129066467285
    5. '```' → logprob: -7.3364129066467285
    6. '#' → logprob: -7.4614129066467285
    7. 'd' → logprob: -7.4614129066467285
    8. '

' → logprob: -7.8364129066467285
    9. '<|end|>' → logprob: -8.21141242980957
    10. '\' → logprob: -8.83641242980957

Token 48: ' check' (ID: 2371)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.38078492879867554
    2. ' solve' → logprob: -2.0057849884033203
    3. ' get' → logprob: -3.0057849884033203
    4. ' is' → logprob: -3.3807849884033203
    5. ' find' → logprob: -3.6307849884033203
    6. ' check' → logprob: -4.00578498840332
    7. ' compute' → logprob: -4.13078498840332
    8. ' main' → logprob: -4.25578498840332
    9. ' buy' → logprob: -5.00578498840332
    10. ' ' → logprob: -5.63078498840332

Token 49: '_condition' (ID: 64948)
  Prédit: '_payment'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_payment' → logprob: -0.46903562545776367
    2. '_' → logprob: -2.2190356254577637
    3. '(k' → logprob: -2.4690356254577637
    4. '(' → logprob: -3.3440356254577637
    5. '_pay' → logprob: -3.7190356254577637
    6. '_cash' → logprob: -4.094035625457764
    7. '_purchase' → logprob: -4.219035625457764
    8. '_coin' → logprob: -4.344035625457764
    9. '_k' → logprob: -4.469035625457764
    10. '_price' → logprob: -4.469035625457764

Token 50: '(k' (ID: 12125)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.20278730988502502
    2. '(k' → logprob: -1.7027872800827026
    3. ' (' → logprob: -7.327787399291992
    4. '():' → logprob: -8.577787399291992
    5. '(s' → logprob: -9.452787399291992
    6. 's' → logprob: -9.452787399291992
    7. '_' → logprob: -9.452787399291992
    8. '(n' → logprob: -9.952787399291992
    9. '(r' → logprob: -11.202787399291992
    10. '(def' → logprob: -11.202787399291992

Token 51: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.011003728955984116
    2. ',r' → logprob: -4.761003494262695
    3. ' ,' → logprob: -6.511003494262695
    4. '):' → logprob: -7.136003494262695
    5. ',k' → logprob: -10.386003494262695
    6. ')' → logprob: -10.636003494262695
    7. ',n' → logprob: -11.386003494262695
    8. ' ):' → logprob: -12.636003494262695
    9. ',b' → logprob: -12.761003494262695
    10. ',re' → logprob: -12.761003494262695

Token 52: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4409654140472412
    2. '    ' → logprob: -1.1909654140472412
    3. ' ' → logprob: -3.565965414047241
    4. ' 
' → logprob: -5.19096565246582
    5. '    
' → logprob: -5.31596565246582
    6. '     
' → logprob: -5.44096565246582
    7. ' for' → logprob: -5.56596565246582
    8. '```' → logprob: -6.19096565246582
    9. ' k' → logprob: -7.31596565246582
    10. ' return' → logprob: -7.69096565246582

Token 53: ' return' (ID: 622)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.03525052219629288
    2. '   ' → logprob: -3.660250425338745
    3. 'for' → logprob: -5.285250663757324
    4. ' i' → logprob: -5.660250663757324
    5. ' n' → logprob: -8.785250663757324
    6. 'i' → logprob: -9.785250663757324
    7. '```' → logprob: -9.785250663757324
    8. ' return' → logprob: -10.285250663757324
    9. 'n' → logprob: -10.785250663757324
    10. ' value' → logprob: -11.785250663757324

Token 54: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -1.332297682762146
    2. ' k' → logprob: -1.332297682762146
    3. '(k' → logprob: -1.582297682762146
    4. ' any' → logprob: -2.2072978019714355
    5. ' (' → logprob: -2.5822978019714355
    6. 'any' → logprob: -3.7072978019714355
    7. '(' → logprob: -4.4572978019714355
    8. 'True' → logprob: -4.5822978019714355
    9. 'lambda' → logprob: -4.5822978019714355
    10. ' True' → logprob: -4.9572978019714355

Token 55: ' >=' (ID: 5064)
  Prédit: ' %'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.033665526658296585
    2. '%' → logprob: -3.408665418624878
    3. '<|end|>' → logprob: -11.533665657043457
    4. ' ' → logprob: -12.283665657043457
    5. ' *' → logprob: -13.283665657043457
    6. ' ==' → logprob: -14.533665657043457
    7. '```' → logprob: -15.283665657043457
    8. ' %#' → logprob: -15.283665657043457
    9. ' %=' → logprob: -15.408665657043457
    10. '%i' → logprob: -15.533665657043457

Token 56: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.6705144643783569
    2. '0' → logprob: -1.170514464378357
    3. '10' → logprob: -2.1705145835876465
    4. ' ' → logprob: -2.7955145835876465
    5. '100' → logprob: -6.4205145835876465
    6. '2' → logprob: -6.7955145835876465
    7. '   ' → logprob: -9.170514106750488
    8. '  ' → logprob: -9.920514106750488
    9. 'r' → logprob: -9.920514106750488
    10. '20' → logprob: -10.483014106750488

Token 57: '10' (ID: 702)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.6146034598350525
    2. '1' → logprob: -0.8646034598350525
    3. '10' → logprob: -3.4896035194396973
    4. '100' → logprob: -5.739603519439697
    5. ' ' → logprob: -6.114603519439697
    6. '2' → logprob: -6.364603519439697
    7. '   ' → logprob: -9.989603042602539
    8. 'r' → logprob: -10.239603042602539
    9. '3' → logprob: -10.364603042602539
    10. '5' → logprob: -10.364603042602539

Token 58: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 59: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.008509492501616478
    2. '<|end|>' → logprob: -5.258509635925293
    3. '
' → logprob: -5.883509635925293
    4. '```' → logprob: -9.258509635925293
    5. ':' → logprob: -9.508509635925293
    6. ' def' → logprob: -9.633509635925293
    7. ':def' → logprob: -9.758509635925293
    8. '\n' → logprob: -10.383509635925293
    9. 'ndef' → logprob: -10.508509635925293
    10. '<|end|>' → logprob: -10.758509635925293

Token 60: ' compute' (ID: 23864)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.819153904914856
    2. ' check' → logprob: -1.194153904914856
    3. ' get' → logprob: -2.1941537857055664
    4. ' def' → logprob: -2.6941537857055664
    5. ' find' → logprob: -3.6941537857055664
    6. ' calculate' → logprob: -3.8191537857055664
    7. ' solve' → logprob: -4.194153785705566
    8. ' run' → logprob: -5.694153785705566
    9. ' compute' → logprob: -5.694153785705566
    10. ' test' → logprob: -6.319153785705566

Token 61: '_output' (ID: 16732)
  Prédit: '_result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_result' → logprob: -0.6947972774505615
    2. '(k' → logprob: -1.9447972774505615
    3. '_value' → logprob: -2.4447972774505615
    4. '(' → logprob: -2.5697972774505615
    5. '_total' → logprob: -3.0697972774505615
    6. '_sum' → logprob: -3.3197972774505615
    7. '_' → logprob: -3.4447972774505615
    8. '_k' → logprob: -3.8197972774505615
    9. '_factor' → logprob: -4.569797515869141
    10. '_answer' → logprob: -5.444797515869141

Token 62: '(r' (ID: 4729)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.43111345171928406
    2. '(k' → logprob: -1.0561134815216064
    3. '()' → logprob: -7.181113243103027
    4. ' (' → logprob: -7.431113243103027
    5. 'def' → logprob: -7.556113243103027
    6. '():' → logprob: -8.806113243103027
    7. '(n' → logprob: -9.181113243103027
    8. '_' → logprob: -9.306113243103027
    9. '   ' → logprob: -9.806113243103027
    10. '```' → logprob: -10.306113243103027

Token 63: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.08544138818979263
    2. ',' → logprob: -2.5854413509368896
    3. '):
' → logprob: -5.210441589355469
    4. ' ):' → logprob: -7.960441589355469
    5. ')' → logprob: -8.085441589355469
    6. '*' → logprob: -9.085441589355469
    7. ' ,' → logprob: -9.960441589355469
    8. '**' → logprob: -10.335441589355469
    9. ' *' → logprob: -10.335441589355469
    10. '=' → logprob: -10.335441589355469

Token 64: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.2021777331829071
    2. ' k' → logprob: -1.7021777629852295
    3. 'r' → logprob: -8.077178001403809
    4. '10' → logprob: -8.827178001403809
    5. ' r' → logprob: -8.952178001403809
    6. ' ' → logprob: -9.452178001403809
    7. ')' → logprob: -10.077178001403809
    8. '1' → logprob: -11.764678001403809
    9. '0' → logprob: -12.327178001403809
    10. '7' → logprob: -12.327178001403809

Token 65: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0002751598076429218
    2. '):
' → logprob: -8.500275611877441
    3. ')' → logprob: -10.625275611877441
    4. ' ):' → logprob: -10.875275611877441
    5. ',' → logprob: -11.000275611877441
    6. ':' → logprob: -12.000275611877441
    7. '*' → logprob: -13.250275611877441
    8. '):
' → logprob: -13.375275611877441
    9. '   ' → logprob: -14.250275611877441
    10. '=' → logprob: -14.625275611877441

Token 66: '   ' (ID: 271)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.6110920310020447
    2. '   ' → logprob: -1.1110920906066895
    3. 'return' → logprob: -2.2360920906066895
    4. ' if' → logprob: -4.6110920906066895
    5. ' for' → logprob: -5.4860920906066895
    6. ' result' → logprob: -6.1110920906066895
    7. 'if' → logprob: -6.9860920906066895
    8. 'result' → logprob: -7.1110920906066895
    9. 'for' → logprob: -7.1110920906066895
    10. '    ' → logprob: -7.3610920906066895

Token 67: ' if' (ID: 538)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.5118851065635681
    2. 'for' → logprob: -2.261885166168213
    3. 'if' (adapté à ' if') → logprob: -2.386885166168213
    4. ' return' → logprob: -2.511885166168213
    5. 'result' → logprob: -2.511885166168213
    6. ' for' → logprob: -4.761885166168213
    7. ' if' → logprob: -5.011885166168213
    8. ' result' → logprob: -5.511885166168213
    9. '   ' → logprob: -5.761885166168213
    10. 'while' → logprob: -6.136885166168213

Token 68: ' check' (ID: 2371)
  Prédit: ' r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' r' → logprob: -0.2214186042547226
    2. ' k' → logprob: -1.9714186191558838
    3. 'r' → logprob: -3.096418619155884
    4. 'k' → logprob: -4.596418380737305
    5. ' (' → logprob: -6.471418380737305
    6. ' check' → logprob: -6.471418380737305
    7. ' ' → logprob: -7.471418380737305
    8. 'check' → logprob: -9.221418380737305
    9. '(r' → logprob: -9.346418380737305
    10. '(k' → logprob: -9.846418380737305

Token 69: '_condition' (ID: 64948)
  Prédit: '_condition'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_condition' → logprob: -5.574251918005757e-05
    2. '(k' → logprob: -10.375055313110352
    3. '_' → logprob: -11.000055313110352
    4. '_conditions' → logprob: -13.375055313110352
    5. '(r' → logprob: -13.625055313110352
    6. '(' → logprob: -14.000055313110352
    7. '_(' → logprob: -14.375055313110352
    8. 'condition' → logprob: -14.625055313110352
    9. '_r' → logprob: -14.625055313110352
    10. ' condition' → logprob: -14.750055313110352

Token 70: '(k' (ID: 12125)
  Prédit: '(k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(k' → logprob: -0.014158341102302074
    2. '(' → logprob: -4.389158248901367
    3. ' (' → logprob: -6.639158248901367
    4. '(r' → logprob: -8.014158248901367
    5. ' ' → logprob: -13.014158248901367
    6. ')' → logprob: -13.014158248901367
    7. '(s' → logprob: -13.514158248901367
    8. '((' → logprob: -14.639158248901367
    9. '(

' → logprob: -15.264158248901367
    10. '   ' → logprob: -15.389158248901367

Token 71: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.18997468054294586
    2. ' ):' → logprob: -1.8149746656417847
    3. ' >=' → logprob: -5.314974784851074
    4. ' ==' → logprob: -6.564974784851074
    5. '==' → logprob: -6.939974784851074
    6. '>=' → logprob: -7.564974784851074
    7. '):
' → logprob: -7.814974784851074
    8. ' and' → logprob: -8.314974784851074
    9. ' %' → logprob: -8.439974784851074
    10. '%' → logprob: -8.564974784851074

Token 72: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.012239903211593628
    2. ' return' → logprob: -4.887239933013916
    3. '   ' → logprob: -5.762239933013916
    4. '    ' → logprob: -7.387239933013916
    5. 'return' → logprob: -7.887239933013916
    6. ' ' → logprob: -9.387239456176758
    7. '        ' → logprob: -9.887239456176758
    8. '0' → logprob: -9.887239456176758
    9. ':' → logprob: -10.012239456176758
    10. ' r' → logprob: -10.137239456176758

Token 73: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.1603352129459381
    2. 'return' (adapté à ' return') → logprob: -2.7853353023529053
    3. '       ' → logprob: -3.0353353023529053
    4. '   ' → logprob: -3.2853353023529053
    5. ' result' → logprob: -8.160335540771484
    6. ' ' → logprob: -9.160335540771484
    7. '           ' → logprob: -9.285335540771484
    8. 'result' → logprob: -9.410335540771484
    9. '    ' → logprob: -9.535335540771484
    10. '	return' → logprob: -9.785335540771484

Token 74: ' r' (ID: 428)
  Prédit: ' r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' r' → logprob: -0.526955783367157
    2. 'r' → logprob: -0.901955783367157
    3. ' k' → logprob: -6.151955604553223
    4. 'k' → logprob: -7.026955604553223
    5. ' (' → logprob: -8.276955604553223
    6. ' ' → logprob: -8.651955604553223
    7. '10' → logprob: -9.776955604553223
    8. '(r' → logprob: -9.776955604553223
    9. ' str' → logprob: -10.651955604553223
    10. ' f' → logprob: -10.714455604553223

Token 75: '
' (ID: 198)
  Prédit: ' *'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.29218676686286926
    2. '*' → logprob: -2.292186737060547
    3. ' +' → logprob: -2.667186737060547
    4. ' %' → logprob: -2.917186737060547
    5. '+' → logprob: -4.167186737060547
    6. '%' → logprob: -5.167186737060547
    7. '*k' → logprob: -6.167186737060547
    8. ' else' → logprob: -6.417186737060547
    9. '   ' → logprob: -6.792186737060547
    10. 'else' → logprob: -6.917186737060547

Token 76: '   ' (ID: 271)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.5945776700973511
    2. ' else' → logprob: -1.844577670097351
    3. ' *' → logprob: -1.969577670097351
    4. '*' → logprob: -3.0945777893066406
    5. '   ' → logprob: -3.2195777893066406
    6. ' +' → logprob: -3.4695777893066406
    7. '+' → logprob: -3.9695777893066406
    8. ' %' → logprob: -5.469577789306641
    9. '%' → logprob: -5.844577789306641
    10. '<|end|>' → logprob: -6.219577789306641

Token 77: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.833395779132843
    2. ' *' → logprob: -1.4583957195281982
    3. ' else' → logprob: -1.9583957195281982
    4. '*' → logprob: -2.8333957195281982
    5. ' +' → logprob: -3.0833957195281982
    6. '   ' → logprob: -3.0833957195281982
    7. '+' → logprob: -3.7083957195281982
    8. 'return' → logprob: -5.958395957946777
    9. ' -' → logprob: -6.083395957946777
    10. ' %' → logprob: -6.208395957946777

Token 78: ':
' (ID: 734)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -1.1278256177902222
    2. ' +' → logprob: -1.3778256177902222
    3. '0' → logprob: -2.3778257369995117
    4. ' ' → logprob: -2.6278257369995117
    5. ' *' → logprob: -2.7528257369995117
    6. ' -' → logprob: -3.2528257369995117
    7. ' r' → logprob: -3.3778257369995117
    8. ' k' → logprob: -3.7528257369995117
    9. '   ' → logprob: -3.7528257369995117
    10. ' return' → logprob: -4.502825736999512

Token 79: '       ' (ID: 309)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.649088442325592
    2. 'k' → logprob: -1.2740883827209473
    3. '0' → logprob: -2.7740883827209473
    4. ' r' → logprob: -3.0240883827209473
    5. ' ' → logprob: -3.2740883827209473
    6. 'r' → logprob: -3.7740883827209473
    7. '10' → logprob: -3.8990883827209473
    8. '   ' → logprob: -7.149088382720947
    9. '    ' → logprob: -7.149088382720947
    10. ' (' → logprob: -7.274088382720947

Token 80: ' return' (ID: 622)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.6564181447029114
    2. ' k' → logprob: -1.7814180850982666
    3. '0' → logprob: -2.1564180850982666
    4. 'r' → logprob: -2.2814180850982666
    5. ' r' → logprob: -2.7814180850982666
    6. ' ' → logprob: -4.031418323516846
    7. '10' → logprob: -4.531418323516846
    8. ' return' → logprob: -7.031418323516846
    9. 'return' (adapté à ' return') → logprob: -7.031418323516846
    10. '1' → logprob: -7.531418323516846

Token 81: ' r' (ID: 428)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.5067042112350464
    2. 'k' → logprob: -1.6317042112350464
    3. '0' → logprob: -2.756704330444336
    4. ' r' → logprob: -2.881704330444336
    5. ' ' → logprob: -2.881704330444336
    6. 'r' → logprob: -4.006704330444336
    7. '10' → logprob: -5.381704330444336
    8. ' None' → logprob: -6.756704330444336
    9. ' (' → logprob: -7.131704330444336
    10. 'None' → logprob: -7.756704330444336

Token 82: ' +' (ID: 659)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 83: ' ' (ID: 220)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.5815517902374268
    2. ' k' → logprob: -1.3315517902374268
    3. '1' → logprob: -2.2065517902374268
    4. '10' → logprob: -2.9565517902374268
    5. ' ' → logprob: -4.331551551818848
    6. '5' → logprob: -7.081551551818848
    7. '2' → logprob: -8.706551551818848
    8. '20' → logprob: -9.206551551818848
    9. '100' → logprob: -9.581551551818848
    10. '9' → logprob: -9.581551551818848

Token 84: '100' (ID: 1353)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.12350229918956757
    2. '1' → logprob: -2.873502254486084
    3. '10' → logprob: -2.873502254486084
    4. ' k' → logprob: -6.748502254486084
    5. '5' → logprob: -6.998502254486084
    6. '100' → logprob: -8.498502731323242
    7. ' ' → logprob: -8.623502731323242
    8. '2' → logprob: -8.748502731323242
    9. 'r' → logprob: -8.998502731323242
    10. '20' → logprob: -9.498502731323242

Token 85: ' *' (ID: 425)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.6481843590736389
    2. '<|end|>' → logprob: -1.1481842994689941
    3. '
' → logprob: -1.8981842994689941
    4. '<|end|>' → logprob: -5.273184299468994
    5. '

' → logprob: -6.398184299468994
    6. '```' → logprob: -6.398184299468994
    7. '\n' → logprob: -7.898184299468994
    8. '#' → logprob: -8.148184776306152
    9. 'k' → logprob: -8.398184776306152
    10. 'newline' → logprob: -9.023184776306152

Token 86: ' (' (ID: 350)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.025499122217297554
    2. ' k' → logprob: -3.775499105453491
    3. '(' → logprob: -6.90049934387207
    4. '(k' → logprob: -7.40049934387207
    5. ' (' → logprob: -8.02549934387207
    6. '0' → logprob: -9.40049934387207
    7. '10' → logprob: -9.52549934387207
    8. '1' → logprob: -9.77549934387207
    9. ' ' → logprob: -10.27549934387207
    10. 'r' → logprob: -10.52549934387207

Token 87: '10' (ID: 702)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.16252250969409943
    2. '(' → logprob: -2.537522554397583
    3. '10' → logprob: -2.787522554397583
    4. '(k' → logprob: -5.787522315979004
    5. ' k' → logprob: -6.287522315979004
    6. ' (' → logprob: -6.287522315979004
    7. '1' → logprob: -6.662522315979004
    8. '   ' → logprob: -7.537522315979004
    9. ' ' → logprob: -7.912522315979004
    10. '0' → logprob: -8.787522315979004

Token 88: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.015135012567043304
    2. '-' → logprob: -4.515134811401367
    3. '-k' → logprob: -5.515134811401367
    4. ' ' → logprob: -10.265134811401367
    5. '-r' → logprob: -11.640134811401367
    6. '0' → logprob: -12.515134811401367
    7. 'k' → logprob: -13.640134811401367
    8. '   ' → logprob: -14.265134811401367
    9. '-m' → logprob: -14.890134811401367
    10. ' k' → logprob: -15.015134811401367

Token 89: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.007607577834278345
    2. ' k' → logprob: -4.882607460021973
    3. '	k' → logprob: -14.257607460021973
    4. '   ' → logprob: -15.632607460021973
    5. ' ' → logprob: -15.632607460021973
    6. '(k' → logprob: -16.00760841369629
    7. ' (' → logprob: -16.75760841369629
    8. '    ' → logprob: -16.75760841369629
    9. ' к' → logprob: -17.25760841369629
    10. '(' → logprob: -17.63260841369629

Token 90: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00015264409012161195
    2. ' )' → logprob: -9.000152587890625
    3. '))' → logprob: -11.250152587890625
    4. ')
' → logprob: -11.625152587890625
    5. ')))' → logprob: -12.625152587890625
    6. '   ' → logprob: -13.500152587890625
    7. ')}}' → logprob: -14.625152587890625
    8. ')}' → logprob: -14.750152587890625
    9. ')return' → logprob: -15.000152587890625
    10. ')

' → logprob: -15.125152587890625

Token 91: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.2775954604148865
    2. '<|end|>' → logprob: -2.0275955200195312
    3. '
' → logprob: -2.6525955200195312
    4. '```' → logprob: -4.777595520019531
    5. '#' → logprob: -5.027595520019531
    6. '\n' → logprob: -5.152595520019531
    7. '

' → logprob: -5.527595520019531
    8. 'r' → logprob: -5.652595520019531
    9. 'k' → logprob: -5.652595520019531
    10. '<|end|>' → logprob: -5.902595520019531

Token 92: ' print' (ID: 2123)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.03313622996211052
    2. ' compute' → logprob: -3.5331361293792725
    3. ' solve' → logprob: -7.033136367797852
    4. ' calculate' → logprob: -7.158136367797852
    5. ' read' → logprob: -7.533136367797852
    6. ' get' → logprob: -8.533136367797852
    7. ' print' → logprob: -8.658136367797852
    8. ' test' → logprob: -8.658136367797852
    9. ' write' → logprob: -8.908136367797852
    10. ' run' → logprob: -8.908136367797852

Token 93: '_result' (ID: 11623)
  Prédit: '_output'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_output' → logprob: -0.09947092086076736
    2. '(' → logprob: -3.099470853805542
    3. '_' → logprob: -3.099470853805542
    4. '(output' → logprob: -6.099471092224121
    5. '_(' → logprob: -7.099471092224121
    6. '(_' → logprob: -7.349471092224121
    7. '("_' → logprob: -8.099471092224121
    8. 'output' → logprob: -9.349471092224121
    9. '('_' → logprob: -9.599471092224121
    10. '_out' → logprob: -9.849471092224121

Token 94: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004459674004465342
    2. '(result' → logprob: -6.004459857940674
    3. '(output' → logprob: -7.129459857940674
    4. '()' → logprob: -7.254459857940674
    5. '(line' → logprob: -8.754459381103516
    6. '():' → logprob: -9.379459381103516
    7. '(r' → logprob: -10.004459381103516
    8. ' (' → logprob: -11.004459381103516
    9. '(data' → logprob: -11.129459381103516
    10. '(print' → logprob: -11.254459381103516

Token 95: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.127566397190094
    2. ')' → logprob: -2.127566337585449
    3. '):
' → logprob: -7.377566337585449
    4. '):
' → logprob: -12.62756633758545
    5. '(result' → logprob: -12.62756633758545
    6. '   ' → logprob: -13.25256633758545
    7. '):

' → logprob: -13.37756633758545
    8. '(' → logprob: -14.50256633758545
    9. ')**' → logprob: -14.62756633758545
    10. ':' → logprob: -14.75256633758545

Token 96: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03834761679172516
    2. ' print' → logprob: -3.2883477210998535
    3. 'print' → logprob: -8.163347244262695
    4. '```' → logprob: -10.788347244262695
    5. ' def' → logprob: -15.288347244262695
    6. 'def' → logprob: -15.413347244262695
    7. '   ' → logprob: -16.288347244262695
    8. ' for' → logprob: -16.788347244262695
    9. '`' → logprob: -17.538347244262695
    10. '    ' → logprob: -17.663347244262695

Token 97: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.004137053620070219
    2. ' print' → logprob: -5.50413703918457
    3. '   ' → logprob: -9.75413703918457
    4. '```' → logprob: -14.37913703918457
    5. 'def' → logprob: -18.00413703918457
    6. 'pass' → logprob: -18.87913703918457
    7. '`' → logprob: -19.00413703918457
    8. '    ' → logprob: -19.62913703918457
    9. '	print' → logprob: -19.87913703918457
    10. '``' → logprob: -20.00413703918457

Token 98: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.0006403613369911909
    2. '(' → logprob: -7.375640392303467
    3. 'result' → logprob: -11.250639915466309
    4. '()' → logprob: -15.375639915466309
    5. ' (' → logprob: -15.500639915466309
    6. '=result' → logprob: -15.625639915466309
    7. '(f' → logprob: -16.875640869140625
    8. ',result' → logprob: -17.000640869140625
    9. '_result' → logprob: -17.125640869140625
    10. 'Result' → logprob: -18.375640869140625

Token 99: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.512236498361744e-07
    2. ')
' → logprob: -14.750000953674316
    3. ' )' → logprob: -17.25
    4. '))' → logprob: -17.75
    5. ')`' → logprob: -18.25
    6. '()' → logprob: -18.875
    7. '')' → logprob: -19.0
    8. '```' → logprob: -19.125
    9. ')

' → logprob: -19.25
    10. ')}' → logprob: -19.625

Token 100: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -9.13388703338569e-06
    2. 'if' → logprob: -12.125009536743164
    3. '```' → logprob: -12.750009536743164
    4. 'for' → logprob: -15.250009536743164
    5. '
' → logprob: -16.125009536743164
    6. '    
' → logprob: -16.375009536743164
    7. '<|end|>' → logprob: -16.750009536743164
    8. ' def' → logprob: -17.000009536743164
    9. '\' → logprob: -17.125009536743164
    10. '#' → logprob: -17.250009536743164

Token 101: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.3132818341255188
    2. ' main' → logprob: -1.313281774520874
    3. 'run' → logprob: -11.813282012939453
    4. ' run' → logprob: -12.313282012939453
    5. 'process' → logprob: -12.813282012939453
    6. 'solve' → logprob: -13.063282012939453
    7. ' solve' → logprob: -13.313282012939453
    8. ' process' → logprob: -14.063282012939453
    9. 'calculate' → logprob: -15.438282012939453
    10. 'solution' → logprob: -15.688282012939453

Token 102: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -2.6060808522743173e-05
    2. ' ():' → logprob: -11.250025749206543
    3. '():
' → logprob: -11.375025749206543
    4. '()' → logprob: -14.125025749206543
    5. '(' → logprob: -14.500025749206543
    6. '_' → logprob: -16.12502670288086
    7. '():
' → logprob: -16.25002670288086
    8. ':' → logprob: -17.87502670288086
    9. '():

' → logprob: -18.12502670288086
    10. '(":' → logprob: -18.50002670288086

Token 103: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.016630474478006363
    2. 'k' → logprob: -4.39163064956665
    3. ' k' → logprob: -5.51663064956665
    4. ' line' → logprob: -9.891630172729492
    5. 'line' → logprob: -10.141630172729492
    6. '	k' → logprob: -13.766630172729492
    7. '  ' → logprob: -14.766630172729492
    8. '       ' → logprob: -15.016630172729492
    9. ' ' → logprob: -15.016630172729492
    10. '   ' → logprob: -15.391630172729492

Token 104: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' (adapté à ' k') → logprob: -0.013985199853777885
    2. '   ' → logprob: -4.7639851570129395
    3. ' k' → logprob: -5.2639851570129395
    4. 'line' → logprob: -8.763985633850098
    5. ' line' → logprob: -10.888985633850098
    6. '	k' → logprob: -13.263985633850098
    7. ' ' → logprob: -13.388985633850098
    8. '  ' → logprob: -13.388985633850098
    9. '    
' → logprob: -14.513985633850098
    10. '       ' → logprob: -14.638985633850098

Token 105: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00016754455282352865
    2. ' ,' → logprob: -9.375167846679688
    3. ' =' → logprob: -9.750167846679688
    4. '=' → logprob: -11.250167846679688
    5. ',k' → logprob: -12.250167846679688
    6. ')' → logprob: -12.750167846679688
    7. ',r' → logprob: -13.500167846679688
    8. '   ' → logprob: -15.375167846679688
    9. '_,' → logprob: -15.500167846679688
    10. ',s' → logprob: -15.500167846679688

Token 106: ' r' (ID: 428)
  Prédit: ' r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' r' → logprob: -0.005939343944191933
    2. 'r' → logprob: -5.130939483642578
    3. ' ' → logprob: -12.505939483642578
    4. ' ' → logprob: -12.880939483642578
    5. '<|end|>' → logprob: -13.255939483642578
    6. '"' → logprob: -14.505939483642578
    7. '    ' → logprob: -15.005939483642578
    8. '_r' → logprob: -15.130939483642578
    9. 'space' → logprob: -15.255939483642578
    10. ')' → logprob: -15.755939483642578

Token 107: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.07889220863580704
    2. '=' → logprob: -2.578892230987549
    3. ',' → logprob: -13.95389175415039
    4. '   ' → logprob: -14.20389175415039
    5. ' ' → logprob: -14.82889175415039
    6. ')' → logprob: -14.82889175415039
    7. '<|end|>' → logprob: -16.70389175415039
    8. '＝' → logprob: -17.57889175415039
    9. '	' → logprob: -17.57889175415039
    10. '  ' → logprob: -17.82889175415039

Token 108: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.029753033071756363
    2. 'get' → logprob: -3.5297529697418213
    3. ' ' → logprob: -14.279752731323242
    4. '	get' → logprob: -14.404752731323242
    5. '   ' → logprob: -14.529752731323242
    6. '(get' → logprob: -15.279752731323242
    7. '  ' → logprob: -15.404752731323242
    8. '=get' → logprob: -15.404752731323242
    9. '    ' → logprob: -16.279752731323242
    10. ' read' → logprob: -16.779752731323242

Token 109: '_k' (ID: 11637)
  Prédit: '_k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_k' → logprob: -1.7954958821064793e-05
    2. '_' → logprob: -12.125018119812012
    3. '_r' → logprob: -12.625018119812012
    4. '```' → logprob: -13.000018119812012
    5. ' _' → logprob: -14.000018119812012
    6. '_input' → logprob: -14.250018119812012
    7. 'k' → logprob: -14.375018119812012
    8. '_a' → logprob: -14.500018119812012
    9. ')_' → logprob: -14.625018119812012
    10. '_key' → logprob: -15.000018119812012

Token 110: '_r' (ID: 3442)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.05496476590633392
    2. '()
' → logprob: -2.929964780807495
    3. '()
' → logprob: -10.429965019226074
    4. '   ' → logprob: -10.804965019226074
    5. '()\' → logprob: -11.554965019226074
    6. '(),' → logprob: -11.804965019226074
    7. '()

' → logprob: -12.054965019226074
    8. ' ()' → logprob: -12.679965019226074
    9. '())' → logprob: -13.679965019226074
    10. 'r' → logprob: -13.804965019226074

Token 111: '()
' (ID: 1234)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.02187424525618553
    2. '   ' → logprob: -3.896874189376831
    3. '<|end|>' → logprob: -8.02187442779541
    4. '    
' → logprob: -8.14687442779541
    5. '()
' → logprob: -8.39687442779541
    6. '
' → logprob: -9.02187442779541
    7. 'def' → logprob: -9.14687442779541
    8. '  
' → logprob: -9.27187442779541
    9. '```' → logprob: -10.02187442779541
    10. '<|end|>' → logprob: -10.77187442779541

Token 112: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04112459346652031
    2. ' result' → logprob: -3.4161245822906494
    3. 'result' → logprob: -4.9161248207092285
    4. '
' → logprob: -9.41612434387207
    5. '	result' → logprob: -11.16612434387207
    6. '```' → logprob: -11.29112434387207
    7. '    
' → logprob: -12.04112434387207
    8. ' ' → logprob: -12.54112434387207
    9. ',result' → logprob: -14.29112434387207
    10. '_result' → logprob: -14.41612434387207

Token 113: ' result' (ID: 1534)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' (adapté à ' result') → logprob: -0.0630745217204094
    2. ' result' → logprob: -2.8130745887756348
    3. '   ' → logprob: -6.813074588775635
    4. '	result' → logprob: -13.188074111938477
    5. '```' → logprob: -13.313074111938477
    6. 'print' → logprob: -14.063074111938477
    7. 'output' → logprob: -14.188074111938477
    8. 'res' → logprob: -14.438074111938477
    9. '_result' → logprob: -14.813074111938477
    10. '
' → logprob: -15.688074111938477

Token 114: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.014163747429847717
    2. '=' → logprob: -4.264163970947266
    3. ' ' → logprob: -15.764163970947266
    4. ' =
' → logprob: -17.264163970947266
    5. ' ' → logprob: -18.639163970947266
    6. '	' → logprob: -19.014163970947266
    7. ' =)' → logprob: -19.514163970947266
    8. ' =
' → logprob: -19.764163970947266
    9. ',' → logprob: -19.889163970947266
    10. ')' → logprob: -20.014163970947266

Token 115: ' compute' (ID: 23864)
  Prédit: ' compute'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' compute' → logprob: -0.25192973017692566
    2. 'compute' → logprob: -1.501929759979248
    3. '.compute' → logprob: -15.12692928314209
    4. '_compute' → logprob: -15.37692928314209
    5. '   ' → logprob: -16.251930236816406
    6. ' computer' → logprob: -17.251930236816406
    7. 'comput' → logprob: -17.251930236816406
    8. 'computer' → logprob: -17.501930236816406
    9. ' ' → logprob: -17.751930236816406
    10. 'computed' → logprob: -19.001930236816406

Token 116: '_output' (ID: 16732)
  Prédit: '_output'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_output' → logprob: -5.796184723294573e-06
    2. '_' → logprob: -12.250005722045898
    3. '_out' → logprob: -15.000005722045898
    4. '_result' → logprob: -15.875005722045898
    5. 'output' → logprob: -16.1250057220459
    6. '_input' → logprob: -16.6250057220459
    7. '_o' → logprob: -16.7500057220459
    8. ' _' → logprob: -16.8750057220459
    9. '_outputs' → logprob: -16.8750057220459
    10. '_OUTPUT' → logprob: -18.0000057220459

Token 117: '(r' (ID: 4729)
  Prédit: '(r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(r' → logprob: -0.0017432469176128507
    2. '(' → logprob: -6.376743316650391
    3. ' (' → logprob: -10.12674331665039
    4. '(f' → logprob: -14.37674331665039
    5. '(
' → logprob: -15.87674331665039
    6. ' ' → logprob: -16.25174331665039
    7. '(k' → logprob: -16.87674331665039
    8. '(s' → logprob: -16.87674331665039
    9. '```' → logprob: -16.87674331665039
    10. '   ' → logprob: -17.12674331665039

Token 118: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0003931384126190096
    2. ',k' → logprob: -8.12539291381836
    3. ' ,' → logprob: -9.25039291381836
    4. '   ' → logprob: -14.37539291381836
    5. ',
' → logprob: -15.75039291381836
    6. 'k' → logprob: -16.12539291381836
    7. ')' → logprob: -16.75039291381836
    8. ' ' → logprob: -16.87539291381836
    9. ',r' → logprob: -18.25039291381836
    10. '  ' → logprob: -18.37539291381836

Token 119: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.06994132697582245
    2. ' k' → logprob: -2.694941282272339
    3. ')' → logprob: -12.694941520690918
    4. '	k' → logprob: -14.069941520690918
    5. ' ' → logprob: -14.569941520690918
    6. '   ' → logprob: -14.944941520690918
    7. ',k' → logprob: -16.4449405670166
    8. '"k' → logprob: -16.6949405670166
    9. '    ' → logprob: -16.8199405670166
    10. '(k' → logprob: -17.1949405670166

Token 120: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.008626393973827362
    2. ')
' → logprob: -4.758626461029053
    3. '   ' → logprob: -11.383625984191895
    4. ' )' → logprob: -15.383625984191895
    5. ')
' → logprob: -16.00862693786621
    6. ')

' → logprob: -16.25862693786621
    7. ' )
' → logprob: -18.25862693786621
    8. ')`' → logprob: -18.38362693786621
    9. ' ' → logprob: -18.88362693786621
    10. '))' → logprob: -19.00862693786621

Token 121: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07937826216220856
    2. 'print' → logprob: -2.579378366470337
    3. '
' → logprob: -8.204378128051758
    4. ' print' → logprob: -8.954378128051758
    5. '    
' → logprob: -9.829378128051758
    6. '	print' → logprob: -11.454378128051758
    7. '```' → logprob: -11.454378128051758
    8. '  ' → logprob: -12.954378128051758
    9. '(print' → logprob: -13.329378128051758
    10. ' ' → logprob: -13.329378128051758

Token 122: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0015056940028443933
    2. '   ' → logprob: -6.7515058517456055
    3. ' print' → logprob: -8.001505851745605
    4. '  ' → logprob: -15.251505851745605
    5. ' ' → logprob: -16.12650489807129
    6. '	print' → logprob: -17.00150489807129
    7. '
' → logprob: -17.12650489807129
    8. '.print' → logprob: -18.12650489807129
    9. '```' → logprob: -18.12650489807129
    10. '#print' → logprob: -19.25150489807129

Token 123: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -7.3458322731312364e-06
    2. '_' → logprob: -12.000007629394531
    3. '_results' → logprob: -14.625007629394531
    4. '(_' → logprob: -15.500007629394531
    5. 'result' → logprob: -16.12500762939453
    6. '_res' → logprob: -16.12500762939453
    7. '(' → logprob: -16.25000762939453
    8. '```' → logprob: -16.50000762939453
    9. ' _' → logprob: -16.62500762939453
    10. '_output' → logprob: -17.00000762939453

Token 124: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.00020497082732617855
    2. '(' → logprob: -8.500205039978027
    3. ' (' → logprob: -13.750205039978027
    4. 'result' → logprob: -15.375205039978027
    5. '(
' → logprob: -17.00020408630371
    6. '(results' → logprob: -17.50020408630371
    7. '(resultado' → logprob: -18.12520408630371
    8. '(res' → logprob: -18.25020408630371
    9. '```' → logprob: -18.50020408630371
    10. '=result' → logprob: -18.62520408630371

Token 125: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.2352385965641588e-05
    2. ')
' → logprob: -11.375012397766113
    3. '()' → logprob: -14.750012397766113
    4. ' )' → logprob: -15.125012397766113
    5. ')`' → logprob: -16.000011444091797
    6. '())' → logprob: -16.750011444091797
    7. ')

' → logprob: -17.375011444091797
    8. '))' → logprob: -17.625011444091797
    9. '(' → logprob: -18.250011444091797
    10. '`)' → logprob: -18.875011444091797

Token 126: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.007019649259746075
    2. 'main' → logprob: -5.007019519805908
    3. '
' → logprob: -8.757019996643066
    4. '\n' → logprob: -9.632019996643066
    5. ' if' → logprob: -10.382019996643066
    6. '_' → logprob: -11.257019996643066
    7. '```' → logprob: -11.632019996643066
    8. '<|end|>' → logprob: -11.757019996643066
    9. '__' → logprob: -12.007019996643066
    10. '\' → logprob: -12.632019996643066

Token 127: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0006675214972347021
    2. '(' → logprob: -7.375667572021484
    3. '()
' → logprob: -10.250667572021484
    4. '(
' → logprob: -13.875667572021484
    5. '()

' → logprob: -14.000667572021484
    6. '()`' → logprob: -14.000667572021484
    7. ' ()' → logprob: -14.500667572021484
    8. '();' → logprob: -14.625667572021484
    9. '```' → logprob: -15.000667572021484
    10. '()"' → logprob: -15.250667572021484


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 125
Tokens correctement prédits (1ère position, stricte): 46
Tokens correctement prédits (1ère position, avec adaptation): 54
Tokens correctement prédits (top 10): 104
Précision stricte (1ère position): 36.80%
Précision adaptée (1ère position): 43.20%
Précision (top 10): 83.20%
================================================================================
