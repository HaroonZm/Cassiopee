================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:03:56
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
value_first, value_second, value_third = map(int, input().split())
print("Yes" if value_first == value_second and value_second == value_third else "No")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'value' (ID: 1594)
  → Token d'amorce (pas de prédiction)

Token 1: '_first' (ID: 29347)
  → Token d'amorce (pas de prédiction)

Token 2: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 3: ' value' (ID: 1432)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5329578518867493
    2. '_' → logprob: -1.4079577922821045
    3. '_value' → logprob: -2.9079577922821045
    4. '```' → logprob: -3.1579577922821045
    5. 'value' → logprob: -3.4079577922821045
    6. ',' → logprob: -4.907958030700684
    7. ')' → logprob: -5.032958030700684
    8. '=value' → logprob: -5.157958030700684
    9. '_=' → logprob: -5.407958030700684
    10. ':' → logprob: -6.157958030700684

Token 4: '_second' (ID: 67724)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.9436714053153992
    2. '_' → logprob: -0.9436714053153992
    3. '=' → logprob: -1.568671464920044
    4. ')' → logprob: -5.568671226501465
    5. '[' → logprob: -5.693671226501465
    6. ' =' → logprob: -6.193671226501465
    7. '_,' → logprob: -6.693671226501465
    8. '+' → logprob: -6.943671226501465
    9. '```' → logprob: -7.693671226501465
    10. '.' → logprob: -7.943671226501465

Token 5: ',' (ID: 11)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.6430270671844482
    2. ',' → logprob: -1.0180270671844482
    3. '=' → logprob: -2.2680270671844482
    4. '```' → logprob: -5.393027305603027
    5. '_,' → logprob: -6.518027305603027
    6. ' =' → logprob: -7.268027305603027
    7. ')' → logprob: -7.393027305603027
    8. '.' → logprob: -7.643027305603027
    9. '+' → logprob: -7.893027305603027
    10. '[' → logprob: -8.268027305603027

Token 6: ' value' (ID: 1432)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6628623008728027
    2. 'value' → logprob: -1.1628623008728027
    3. ' ' → logprob: -3.5378623008728027
    4. '```' → logprob: -3.5378623008728027
    5. '_value' → logprob: -3.6628623008728027
    6. '_' → logprob: -3.9128623008728027
    7. ' =' → logprob: -4.037862300872803
    8. ',' → logprob: -4.162862300872803
    9. '=value' → logprob: -4.537862300872803
    10. '<|end|>' → logprob: -5.412862300872803

Token 7: '_th' (ID: 16038)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.2667807340621948
    2. '=' → logprob: -1.5167807340621948
    3. ' =' → logprob: -4.516780853271484
    4. ')' → logprob: -6.766780853271484
    5. '```' → logprob: -6.891780853271484
    6. '_=' → logprob: -8.016780853271484
    7. '[' → logprob: -8.141780853271484
    8. ''' → logprob: -8.516780853271484
    9. ',' → logprob: -8.641780853271484
    10. '+' → logprob: -8.891780853271484

Token 8: 'ird' (ID: 2716)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.5507916212081909
    2. '_' → logprob: -1.050791621208191
    3. 'r' → logprob: -2.9257917404174805
    4. '_r' → logprob: -5.0507917404174805
    5. '_i' → logprob: -5.1757917404174805
    6. 'ird' → logprob: -5.3007917404174805
    7. '```' → logprob: -6.5507917404174805
    8. 'e' → logprob: -7.8007917404174805
    9. 'ir' → logprob: -8.80079174041748
    10. '__' → logprob: -8.92579174041748

Token 9: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.1082213893532753
    2. ',' → logprob: -2.7332212924957275
    3. '=' → logprob: -4.108221530914307
    4. '```' → logprob: -4.108221530914307
    5. '_,' → logprob: -6.358221530914307
    6. ' =' → logprob: -7.233221530914307
    7. ')' → logprob: -7.233221530914307
    8. ',_' → logprob: -8.608221054077148
    9. '_=' → logprob: -8.608221054077148
    10. '`' → logprob: -9.233221054077148

Token 10: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6407114267349243
    2. ' None' → logprob: -1.2657114267349243
    3. ' [' → logprob: -2.7657113075256348
    4. ' []' → logprob: -3.0157113075256348
    5. '0' → logprob: -3.3907113075256348
    6. 'None' → logprob: -4.140711307525635
    7. '[' → logprob: -5.015711307525635
    8. ' input' → logprob: -5.515711307525635
    9. ' (' → logprob: -5.640711307525635
    10. '[]' → logprob: -5.890711307525635

Token 11: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.45811763405799866
    2. '<|end|>' → logprob: -1.5831176042556763
    3. '(lambda' → logprob: -1.9581176042556763
    4. '```' → logprob: -4.583117485046387
    5. '<|end|>' → logprob: -5.708117485046387
    6. ')' → logprob: -6.333117485046387
    7. 'user' → logprob: -7.083117485046387
    8. '(token' → logprob: -7.833117485046387
    9. '[' → logprob: -8.208117485046387
    10. '(user' → logprob: -8.333117485046387

Token 12: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.7341156005859375
    2. '(' → logprob: -1.4841156005859375
    3. ')' → logprob: -1.4841156005859375
    4. '(value' → logprob: -3.2341156005859375
    5. '(user' → logprob: -4.1091156005859375
    6. '('' → logprob: -5.9841156005859375
    7. '<|end|>' → logprob: -6.3591156005859375
    8. 'input' → logprob: -6.9841156005859375
    9. '(raw' → logprob: -7.3591156005859375
    10. '(range' → logprob: -7.4841156005859375

Token 13: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.20169156789779663
    2. ' input' → logprob: -1.7016916275024414
    3. '(input' → logprob: -8.576691627502441
    4. ')' → logprob: -9.451691627502441
    5. 'value' → logprob: -13.076691627502441
    6. ',input' → logprob: -13.451691627502441
    7. '=input' → logprob: -13.576691627502441
    8. ' )' → logprob: -13.951691627502441
    9. 'user' → logprob: -13.951691627502441
    10. '[input' → logprob: -14.451691627502441

Token 14: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.2748163342475891
    2. '())' → logprob: -1.6498162746429443
    3. '().' → logprob: -3.3998162746429443
    4. '(' → logprob: -5.024816513061523
    5. ')' → logprob: -6.149816513061523
    6. '(()' → logprob: -6.274816513061523
    7. '('' → logprob: -6.649816513061523
    8. '());' → logprob: -7.399816513061523
    9. '();)' → logprob: -7.524816513061523
    10. '`()' → logprob: -7.774816513061523

Token 15: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.001529620960354805
    2. 'strip' → logprob: -6.501529693603516
    3. 'rstrip' → logprob: -11.001529693603516
    4. ' split' → logprob: -11.501529693603516
    5. '(split' → logprob: -15.501529693603516
    6. ')' → logprob: -16.126529693603516
    7. 'spl' → logprob: -16.751529693603516
    8. 'replace' → logprob: -17.001529693603516
    9. 'startswith' → logprob: -17.251529693603516
    10. 'read' → logprob: -17.376529693603516

Token 16: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.02009800262749195
    2. ')' → logprob: -4.5200982093811035
    3. '()))' → logprob: -5.1450982093811035
    4. '()' → logprob: -6.2700982093811035
    5. '))' → logprob: -6.8950982093811035
    6. '(' → logprob: -8.895097732543945
    7. '('' → logprob: -9.645097732543945
    8. ' ())' → logprob: -10.020097732543945
    9. '()));' → logprob: -12.770097732543945
    10. '();)' → logprob: -12.770097732543945

Token 17: 'print' (ID: 1598)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -1.2098901271820068
    2. 'if' → logprob: -1.5848901271820068
    3. '#' → logprob: -1.8348901271820068
    4. '<|end|>' → logprob: -2.834890127182007
    5. '*' → logprob: -2.959890127182007
    6. '
' → logprob: -3.084890127182007
    7. ',' → logprob: -3.459890127182007
    8. ':' → logprob: -3.709890127182007
    9. ')' → logprob: -3.834890127182007
    10. '+
' → logprob: -3.959890127182007

Token 18: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0014448761940002441
    2. '(value' → logprob: -6.8764448165893555
    3. '('' → logprob: -8.251444816589355
    4. '("("' → logprob: -9.001444816589355
    5. '((' → logprob: -11.626444816589355
    6. '("""' → logprob: -12.751444816589355
    7. '(f' → logprob: -12.876444816589355
    8. '()' → logprob: -12.876444816589355
    9. '(`' → logprob: -13.251444816589355
    10. '(**' → logprob: -14.126444816589355

Token 19: 'Yes' (ID: 13022)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -0.7263274192810059
    2. 'Value' → logprob: -1.8513274192810059
    3. 'value' → logprob: -2.226327419281006
    4. 'Enter' → logprob: -2.726327419281006
    5. 'The' → logprob: -3.101327419281006
    6. ')' → logprob: -3.351327419281006
    7. '{' → logprob: -3.976327419281006
    8. '"' → logprob: -3.976327419281006
    9. 'First' → logprob: -3.976327419281006
    10. 'Sum' → logprob: -3.976327419281006

Token 20: '"' (ID: 1)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.38776353001594543
    2. '")' → logprob: -1.137763500213623
    3. ')")' → logprob: -7.512763500213623
    4. ' if' → logprob: -8.762763977050781
    5. 'if' → logprob: -9.387763977050781
    6. ',' → logprob: -10.012763977050781
    7. ' )' → logprob: -11.387763977050781
    8. '"' → logprob: -11.637763977050781
    9. '!")' → logprob: -11.637763977050781
    10. ',)' → logprob: -12.137763977050781

Token 21: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -6.897412822581828e-05
    2. ',' → logprob: -10.625068664550781
    3. '))' → logprob: -11.125068664550781
    4. ',)' → logprob: -11.500068664550781
    5. 'if' → logprob: -12.000068664550781
    6. '()' → logprob: -12.500068664550781
    7. '())' → logprob: -12.875068664550781
    8. '")' → logprob: -13.125068664550781
    9. ' )' → logprob: -13.875068664550781
    10. '),' → logprob: -14.375068664550781

Token 22: ' value' (ID: 1432)
  Prédit: ' value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' value' → logprob: -0.0068187350407242775
    2. 'value' → logprob: -5.006818771362305
    3. ' ' → logprob: -10.006818771362305
    4. '(value' → logprob: -10.381818771362305
    5. ' (' → logprob: -11.256818771362305
    6. ' all' → logprob: -12.256818771362305
    7. ' any' → logprob: -12.381818771362305
    8. '"value' → logprob: -13.256818771362305
    9. ')value' → logprob: -14.006818771362305
    10. ''value' → logprob: -14.131818771362305

Token 23: '_first' (ID: 29347)
  Prédit: '_first'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_first' → logprob: -0.0001830410328693688
    2. '_second' → logprob: -9.00018310546875
    3. '_' → logprob: -9.87518310546875
    4. '_f' → logprob: -12.87518310546875
    5. '_FIRST' → logprob: -13.37518310546875
    6. '_First' → logprob: -13.50018310546875
    7. ' _' → logprob: -13.62518310546875
    8. 'First' → logprob: -14.62518310546875
    9. ')_' → logprob: -15.25018310546875
    10. '__' → logprob: -15.87518310546875

Token 24: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.19134429097175598
    2. ' >' → logprob: -1.9413442611694336
    3. '==' → logprob: -4.566344261169434
    4. ' <' → logprob: -5.066344261169434
    5. ' <=' → logprob: -5.316344261169434
    6. ' ' → logprob: -5.941344261169434
    7. ' >=' → logprob: -6.066344261169434
    8. '>' → logprob: -6.316344261169434
    9. ')' → logprob: -7.066344261169434
    10. ' !=' → logprob: -7.816344261169434

Token 25: ' value' (ID: 1432)
  Prédit: ' value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' value' → logprob: -0.16025082767009735
    2. 'value' → logprob: -1.9102507829666138
    3. ' ' → logprob: -10.910250663757324
    4. ')value' → logprob: -12.910250663757324
    5. '"value' → logprob: -13.410250663757324
    6. ')' → logprob: -13.535250663757324
    7. '(value' → logprob: -13.910250663757324
    8. ''value' → logprob: -14.285250663757324
    9. '0' → logprob: -14.785250663757324
    10. '	value' → logprob: -15.410250663757324

Token 26: '_second' (ID: 67724)
  Prédit: '_second'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_second' → logprob: -0.03285248205065727
    2. '_first' → logprob: -3.7828524112701416
    3. '_th' → logprob: -4.657852649688721
    4. '_' → logprob: -9.907852172851562
    5. ' _' → logprob: -11.907852172851562
    6. '_three' → logprob: -12.782852172851562
    7. '_next' → logprob: -13.032852172851562
    8. '_last' → logprob: -13.157852172851562
    9. '_sec' → logprob: -13.282852172851562
    10. '_four' → logprob: -13.282852172851562

Token 27: ' and' (ID: 326)
  Prédit: ' else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.06325123459100723
    2. ' and' → logprob: -3.188251256942749
    3. 'else' → logprob: -4.81325101852417
    4. '==' → logprob: -5.43825101852417
    5. ' ==' → logprob: -5.93825101852417
    6. ' ' → logprob: -6.06325101852417
    7. 'and' → logprob: -6.31325101852417
    8. ')' → logprob: -7.93825101852417
    9. '<|end|>' → logprob: -8.063251495361328
    10. ' or' → logprob: -9.688251495361328

Token 28: ' value' (ID: 1432)
  Prédit: ' value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' value' → logprob: -0.008754727430641651
    2. 'value' → logprob: -5.383754730224609
    3. ' ' → logprob: -5.508754730224609
    4. ' ' → logprob: -10.00875473022461
    5. '(value' → logprob: -11.88375473022461
    6. '  ' → logprob: -12.00875473022461
    7. '"value' → logprob: -12.50875473022461
    8. '    ' → logprob: -13.38375473022461
    9. ''value' → logprob: -13.38375473022461
    10. '"' → logprob: -13.63375473022461

Token 29: '_second' (ID: 67724)
  Prédit: '_th'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_th' → logprob: -0.002659958554431796
    2. '_second' → logprob: -6.252659797668457
    3. '_first' → logprob: -7.252659797668457
    4. '_' → logprob: -11.877659797668457
    5. '```' → logprob: -12.502659797668457
    6. ' _' → logprob: -12.752659797668457
    7. ''_' → logprob: -13.752659797668457
    8. '_three' → logprob: -13.877659797668457
    9. '_thr' → logprob: -14.002659797668457
    10. '__' → logprob: -14.127659797668457

Token 30: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.008769615553319454
    2. '==' → logprob: -4.758769512176514
    3. ' ' → logprob: -8.883769989013672
    4. '<|end|>' → logprob: -12.508769989013672
    5. ' ' → logprob: -12.883769989013672
    6. ' =' → logprob: -13.258769989013672
    7. ')' → logprob: -13.758769989013672
    8. '=' → logprob: -13.758769989013672
    9. '<|end|>' → logprob: -14.008769989013672
    10. '_' → logprob: -14.133769989013672

Token 31: ' value' (ID: 1432)
  Prédit: ' value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' value' → logprob: -0.6931619644165039
    2. 'value' → logprob: -0.6931619644165039
    3. ' ' → logprob: -11.693161964416504
    4. '"value' → logprob: -12.943161964416504
    5. ''value' → logprob: -13.193161964416504
    6. ')value' → logprob: -13.568161964416504
    7. ')' → logprob: -15.318161964416504
    8. '    ' → logprob: -15.943161964416504
    9. '	value' → logprob: -16.068161010742188
    10. '$value' → logprob: -16.443161010742188

Token 32: '_th' (ID: 16038)
  Prédit: '_th'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_th' → logprob: -0.12429071962833405
    2. '_first' → logprob: -2.249290704727173
    3. '_second' → logprob: -5.624290943145752
    4. ''_' → logprob: -5.749290943145752
    5. '_' → logprob: -5.874290943145752
    6. '_thr' → logprob: -7.749290943145752
    7. ')_' → logprob: -7.999290943145752
    8. '"_' → logprob: -8.249290466308594
    9. '_three' → logprob: -8.499290466308594
    10. ' _' → logprob: -8.874290466308594

Token 33: 'ird' (ID: 2716)
  Prédit: 'ird'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ird' → logprob: -3.893480243277736e-05
    2. 'i' → logprob: -11.250039100646973
    3. 'ir' → logprob: -11.500039100646973
    4. '_' → logprob: -11.500039100646973
    5. 'rid' → logprob: -14.000039100646973
    6. '__' → logprob: -14.125039100646973
    7. ' ' → logprob: -14.250039100646973
    8. '_value' → logprob: -14.750039100646973
    9. 'rd' → logprob: -14.750039100646973
    10. 'value' → logprob: -15.000039100646973

Token 34: ' else' (ID: 1203)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5329795479774475
    2. ' else' → logprob: -0.9079795479774475
    3. ' and' → logprob: -5.157979488372803
    4. ' )' → logprob: -6.407979488372803
    5. 'else' → logprob: -6.657979488372803
    6. ' ' → logprob: -7.407979488372803
    7. 'and' → logprob: -7.657979488372803
    8. '```' → logprob: -11.532979965209961
    9. ' or' → logprob: -11.782979965209961
    10. '")' → logprob: -12.282979965209961

Token 35: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.00024500858853571117
    2. ' "' → logprob: -8.750245094299316
    3. ')' → logprob: -10.000245094299316
    4. '"No' → logprob: -10.500245094299316
    5. ''' → logprob: -11.875245094299316
    6. '")' → logprob: -12.250245094299316
    7. ' ' → logprob: -14.250245094299316
    8. '""' → logprob: -14.875245094299316
    9. '"value' → logprob: -15.500245094299316
    10. ')"' → logprob: -15.750245094299316

Token 36: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.16033419966697693
    2. '"No' → logprob: -1.9103342294692993
    3. ' No' → logprob: -9.785334587097168
    4. '"' → logprob: -10.035334587097168
    5. 'Yes' → logprob: -11.910334587097168
    6. ''' → logprob: -13.910334587097168
    7. ' ' → logprob: -14.410334587097168
    8. 'NO' → logprob: -14.910334587097168
    9. '_No' → logprob: -15.160334587097168
    10. '```' → logprob: -15.285334587097168

Token 37: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.0009201543871313334
    2. ')' → logprob: -7.000920295715332
    3. ')")' → logprob: -11.750920295715332
    4. '"' → logprob: -15.000920295715332
    5. '")
' → logprob: -15.500920295715332
    6. ')"' → logprob: -16.500919342041016
    7. '”)' → logprob: -17.375919342041016
    8. '`)' → logprob: -17.875919342041016
    9. '')' → logprob: -18.000919342041016
    10. ' )' → logprob: -18.250919342041016


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 35
Tokens correctement prédits (1ère position, stricte): 13
Tokens correctement prédits (1ère position, avec adaptation): 13
Tokens correctement prédits (top 10): 23
Précision stricte (1ère position): 37.14%
Précision adaptée (1ère position): 37.14%
Précision (top 10): 65.71%
================================================================================
