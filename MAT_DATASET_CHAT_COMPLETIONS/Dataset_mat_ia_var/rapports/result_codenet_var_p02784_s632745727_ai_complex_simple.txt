================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:28:11
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from functools import reduce
from itertools import repeat, islice, count

H, N = map(int, input().split())
A = list(map(int, input().split()))

K = reduce(lambda x, y: x + y, islice(A, 0, len(A)))

verdict = (lambda: "Yes", lambda: "No")[(K < H)]()
print(verdict)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' functools' (ID: 142636)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' reduce' (ID: 10389)
  Prédit: 'wrap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'wrap' → logprob: -0.3606022894382477
    2. 'partial' → logprob: -1.3606022596359253
    3. 'reduce' → logprob: -3.610602378845215
    4. ' wraps' → logprob: -4.110602378845215
    5. 'l' → logprob: -6.735602378845215
    6. ' partial' → logprob: -7.610602378845215
    7. 'cached' → logprob: -7.985602378845215
    8. 'cmp' → logprob: -8.235602378845215
    9. 'cache' → logprob: -8.485602378845215
    10. '```' → logprob: -8.985602378845215

Token 4: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.020487118512392044
    2. '(lambda' → logprob: -4.645487308502197
    3. '.' → logprob: -5.270487308502197
    4. ',' → logprob: -5.895487308502197
    5. '\' → logprob: -7.145487308502197
    6. ' (' → logprob: -7.520487308502197
    7. '```' → logprob: -8.020486831665039
    8. 'def' → logprob: -8.645486831665039
    9. 'lambda' → logprob: -8.895486831665039
    10. '`' → logprob: -8.895486831665039

Token 5: 'from' (ID: 2845)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.028644466772675514
    2. '\' → logprob: -4.153644561767578
    3. 'def' → logprob: -5.028644561767578
    4. '(
' → logprob: -6.028644561767578
    5. '(lambda' → logprob: -6.653644561767578
    6. ',' → logprob: -7.653644561767578
    7. '\n' → logprob: -7.778644561767578
    8. '```' → logprob: -7.903644561767578
    9. '\(' → logprob: -8.403644561767578
    10. '`' → logprob: -9.278644561767578

Token 6: ' itertools' (ID: 103178)
  Prédit: ' operator'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' operator' → logprob: -0.8141523599624634
    2. ' math' → logprob: -0.9391523599624634
    3. 'operator' → logprob: -2.814152240753174
    4. ' itertools' → logprob: -2.814152240753174
    5. 'math' → logprob: -3.689152240753174
    6. ' collections' → logprob: -4.064152240753174
    7. 'collections' → logprob: -6.064152240753174
    8. ' os' → logprob: -6.814152240753174
    9. 'os' → logprob: -8.439152717590332
    10. 'it' → logprob: -9.439152717590332

Token 7: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.06406097859144211
    2. 'import' → logprob: -2.814060926437378
    3. '.' → logprob: -6.564061164855957
    4. '.import' → logprob: -8.064061164855957
    5. ' .' → logprob: -8.439061164855957
    6. ' ' → logprob: -9.939061164855957
    7. '	import' → logprob: -9.939061164855957
    8. ' itertools' → logprob: -10.939061164855957
    9. '_import' → logprob: -11.814061164855957
    10. '.groupby' → logprob: -11.939061164855957

Token 8: ' repeat' (ID: 22962)
  Prédit: ' group'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' group' → logprob: -0.8000409603118896
    2. 'group' → logprob: -2.0500409603118896
    3. 'acc' → logprob: -2.3000409603118896
    4. 'count' → logprob: -2.4250409603118896
    5. ' cycle' → logprob: -2.6750409603118896
    6. ' accumulate' → logprob: -3.1750409603118896
    7. 'cycle' → logprob: -3.3000409603118896
    8. ' chain' → logprob: -3.6750409603118896
    9. 'chain' → logprob: -4.175041198730469
    10. 'com' → logprob: -4.300041198730469

Token 9: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.022697217762470245
    2. '\' → logprob: -5.272697448730469
    3. '.' → logprob: -5.272697448730469
    4. '(
' → logprob: -5.522697448730469
    5. 'def' → logprob: -5.647697448730469
    6. ',' → logprob: -6.272697448730469
    7. '\n' → logprob: -6.397697448730469
    8. '\(' → logprob: -8.397697448730469
    9. '`' → logprob: -8.897697448730469
    10. '```' → logprob: -9.022697448730469

Token 10: ' is' (ID: 382)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'count' → logprob: -0.523539125919342
    2. 'cycle' → logprob: -1.8985390663146973
    3. 'chain' → logprob: -2.1485390663146973
    4. 'acc' → logprob: -3.3985390663146973
    5. ' count' → logprob: -4.148539066314697
    6. 'product' → logprob: -4.273539066314697
    7. ' cycle' → logprob: -4.523539066314697
    8. ' chain' → logprob: -4.523539066314697
    9. 'group' → logprob: -4.648539066314697
    10. 'st' → logprob: -4.773539066314697

Token 11: 'lice' (ID: 7321)
  Prédit: 'lice'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lice' → logprob: -3.7697225252486533e-06
    2. 'lic' → logprob: -12.750003814697266
    3. 'l' → logprob: -14.750003814697266
    4. '

' → logprob: -16.375003814697266
    5. 'li' → logprob: -16.375003814697266
    6. '
' → logprob: -16.750003814697266
    7. 'liced' → logprob: -17.000003814697266
    8. '```' → logprob: -17.375003814697266
    9. '_' → logprob: -17.625003814697266
    10. 'lices' → logprob: -17.750003814697266

Token 12: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10032280534505844
    2. '(
' → logprob: -2.725322723388672
    3. 'def' → logprob: -4.475322723388672
    4. ',' → logprob: -4.850322723388672
    5. '\' → logprob: -5.350322723388672
    6. '\n' → logprob: -5.725322723388672
    7. '.' → logprob: -7.975322723388672
    8. ')' → logprob: -7.975322723388672
    9. '`' → logprob: -8.100322723388672
    10. ',
' → logprob: -8.225322723388672

Token 13: ' count' (ID: 3605)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'count' → logprob: -1.1847225427627563
    2. 'chain' → logprob: -1.3097225427627563
    3. ' chain' → logprob: -2.184722423553467
    4. 'cycle' → logprob: -2.434722423553467
    5. 'acc' → logprob: -2.684722423553467
    6. ' count' → logprob: -3.684722423553467
    7. 'group' → logprob: -3.809722423553467
    8. ' cycle' → logprob: -3.809722423553467
    9. 'take' → logprob: -3.934722423553467
    10. 'zip' → logprob: -4.309722423553467

Token 14: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06825141608715057
    2. '(
' → logprob: -3.443251371383667
    3. 'def' → logprob: -4.318251609802246
    4. '\n' → logprob: -4.943251609802246
    5. '\' → logprob: -5.443251609802246
    6. ',' → logprob: -5.693251609802246
    7. 'newline' → logprob: -7.318251609802246
    8. '```' → logprob: -7.443251609802246
    9. '[' → logprob: -7.568251609802246
    10. '`' → logprob: -7.568251609802246

Token 15: 'H' (ID: 39)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.35610276460647583
    2. 'def' → logprob: -1.356102705001831
    3. '(
' → logprob: -4.35610294342041
    4. ',' → logprob: -4.85610294342041
    5. '\' → logprob: -4.85610294342041
    6. 'd' → logprob: -5.35610294342041
    7. ':' → logprob: -6.73110294342041
    8. '#' → logprob: -6.85610294342041
    9. ')' → logprob: -6.85610294342041
    10. '_' → logprob: -6.85610294342041

Token 16: ',' (ID: 11)
  Prédit: 'ex'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ex' → logprob: -0.8196418285369873
    2. 'e' → logprob: -1.1946418285369873
    3. 'elper' → logprob: -1.6946418285369873
    4. 'E' → logprob: -4.194642066955566
    5. 'H' → logprob: -4.944642066955566
    6. 'ash' → logprob: -5.069642066955566
    7. 'as' → logprob: -5.569642066955566
    8. 'el' → logprob: -5.694642066955566
    9. 'ello' → logprob: -5.819642066955566
    10. 'a' → logprob: -5.819642066955566

Token 17: ' N' (ID: 478)
  Prédit: 'W'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'W' → logprob: -0.1845267117023468
    2. ' W' → logprob: -1.9345266819000244
    3. 'T' → logprob: -5.5595269203186035
    4. 'V' → logprob: -5.6845269203186035
    5. 'L' → logprob: -6.3095269203186035
    6. ' =' → logprob: -6.4345269203186035
    7. 'S' → logprob: -6.4970269203186035
    8. 'N' → logprob: -6.5595269203186035
    9. 'D' → logprob: -6.5595269203186035
    10. 'w' → logprob: -7.1845269203186035

Token 18: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.10180801153182983
    2. '=' → logprob: -2.3518080711364746
    3. ',' → logprob: -6.476808071136475
    4. ' ' → logprob: -10.101807594299316
    5. ' ,' → logprob: -11.976807594299316
    6. '_' → logprob: -12.101807594299316
    7. ')' → logprob: -12.601807594299316
    8. '.' → logprob: -13.976807594299316
    9. ' =
' → logprob: -14.101807594299316
    10. '  ' → logprob: -14.351807594299316

Token 19: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2445741444826126
    2. '10' → logprob: -2.3695740699768066
    3. '0' → logprob: -3.7445740699768066
    4. '5' → logprob: -3.7445740699768066
    5. '1' → logprob: -4.119574069976807
    6. '100' → logprob: -4.619574069976807
    7. '3' → logprob: -4.619574069976807
    8. ' map' → logprob: -5.369574069976807
    9. '8' → logprob: -5.494574069976807
    10. 'map' → logprob: -5.869574069976807

Token 20: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.21811924874782562
    2. '(' → logprob: -1.7181192636489868
    3. '(str' → logprob: -4.218119144439697
    4. '(lambda' → logprob: -6.468119144439697
    5. 'int' → logprob: -9.218119621276855
    6. '(input' → logprob: -9.468119621276855
    7. '(eval' → logprob: -10.343119621276855
    8. '(
' → logprob: -11.218119621276855
    9. '<int' → logprob: -11.343119621276855
    10. '(tuple' → logprob: -11.468119621276855

Token 21: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0656420886516571
    2. '(' → logprob: -3.5656421184539795
    3. ',input' → logprob: -4.1906418800354
    4. ',' → logprob: -4.8156418800354
    5. 'input' → logprob: -4.9406418800354
    6. ')' → logprob: -5.8156418800354
    7. '(int' → logprob: -6.6906418800354
    8. '=input' → logprob: -8.440642356872559
    9. '```' → logprob: -9.440642356872559
    10. ' input' → logprob: -9.690642356872559

Token 22: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.029758475720882416
    2. ' input' → logprob: -3.5297584533691406
    3. ')' → logprob: -12.15475845336914
    4. ',input' → logprob: -13.77975845336914
    5. '(input' → logprob: -13.77975845336914
    6. '=input' → logprob: -15.77975845336914
    7. 'open' → logprob: -15.77975845336914
    8. '	input' → logprob: -16.27975845336914
    9. 'lambda' → logprob: -16.27975845336914
    10. ' ' → logprob: -16.65475845336914

Token 23: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.3984015882015228
    2. '()' → logprob: -1.5234016180038452
    3. '().' → logprob: -2.3984014987945557
    4. ')' → logprob: -4.273401737213135
    5. '());' → logprob: -6.023401737213135
    6. '(' → logprob: -6.648401737213135
    7. '(),' → logprob: -7.148401737213135
    8. '();' → logprob: -8.148401260375977
    9. '()>' → logprob: -8.148401260375977
    10. '();)' → logprob: -8.273401260375977

Token 24: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0009267069399356842
    2. 'strip' → logprob: -7.000926494598389
    3. ')' → logprob: -11.625926971435547
    4. 'read' → logprob: -13.000926971435547
    5. ' split' → logprob: -13.250926971435547
    6. 'rstrip' → logprob: -13.375926971435547
    7. '(split' → logprob: -14.625926971435547
    8. '())' → logprob: -16.250926971435547
    9. 'spl' → logprob: -16.250926971435547
    10. '_split' → logprob: -17.375926971435547

Token 25: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.07055450230836868
    2. '))' → logprob: -2.695554494857788
    3. '())' → logprob: -7.945554733276367
    4. '),' → logprob: -8.820554733276367
    5. '()' → logprob: -9.445554733276367
    6. '()))' → logprob: -11.820554733276367
    7. ')`' → logprob: -11.820554733276367
    8. '(' → logprob: -12.320554733276367
    9. ')))' → logprob: -12.445554733276367
    10. '`)' → logprob: -13.070554733276367

Token 26: 'A' (ID: 32)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.26231780648231506
    2. ')' → logprob: -2.5123178958892822
    3. ' 
' → logprob: -2.6373178958892822
    4. 'for' → logprob: -4.512317657470703
    5. 'data' → logprob: -4.762317657470703
    6. '[' → logprob: -4.887317657470703
    7. ',' → logprob: -5.137317657470703
    8. ':' → logprob: -5.262317657470703
    9. '<|end|>' → logprob: -5.387317657470703
    10. ' for' → logprob: -5.887317657470703

Token 27: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4216060936450958
    2. '=' → logprob: -1.2966060638427734
    3. ',' → logprob: -2.7966060638427734
    4. 's' → logprob: -4.921606063842773
    5. ' ' → logprob: -6.421606063842773
    6. '[' → logprob: -8.421606063842773
    7. '_list' → logprob: -9.921606063842773
    8. ' ,' → logprob: -10.046606063842773
    9. ' +=' → logprob: -10.296606063842773
    10. '.' → logprob: -10.296606063842773

Token 28: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.2835734784603119
    2. ' list' → logprob: -1.4085735082626343
    3. '[' → logprob: -7.158573627471924
    4. ' [' → logprob: -7.283573627471924
    5. '[list' → logprob: -7.783573627471924
    6. '[]' → logprob: -8.408573150634766
    7. '[*' → logprob: -8.408573150634766
    8. ' []' → logprob: -10.783573150634766
    9. 'tuple' → logprob: -10.908573150634766
    10. ' tuple' → logprob: -11.283573150634766

Token 29: '(map' (ID: 16946)
  Prédit: '(is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(is' → logprob: -0.4445975720882416
    2. '(map' → logprob: -1.569597601890564
    3. '(' → logprob: -1.944597601890564
    4. '(re' → logprob: -5.8195977210998535
    5. '(int' → logprob: -6.6945977210998535
    6. '(range' → logprob: -6.6945977210998535
    7. '(input' → logprob: -7.6945977210998535
    8. '(iter' → logprob: -7.8195977210998535
    9. '(chain' → logprob: -8.319597244262695
    10. 'is' → logprob: -8.694597244262695

Token 30: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0004757135466206819
    2. '(' → logprob: -8.000475883483887
    3. 'int' → logprob: -9.125475883483887
    4. '[int' → logprob: -11.625475883483887
    5. '(input' → logprob: -11.875475883483887
    6. '(lambda' → logprob: -12.000475883483887
    7. '<int' → logprob: -12.875475883483887
    8. '(str' → logprob: -13.250475883483887
    9. '=int' → logprob: -13.625475883483887
    10. '```' → logprob: -13.750475883483887

Token 31: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.196111261844635
    2. ',input' → logprob: -1.8211112022399902
    3. ',' → logprob: -4.44611120223999
    4. '(' → logprob: -5.44611120223999
    5. 'input' → logprob: -9.321111679077148
    6. ' ,' → logprob: -10.446111679077148
    7. '```' → logprob: -11.196111679077148
    8. '=input' → logprob: -11.196111679077148
    9. ' (' → logprob: -11.321111679077148
    10. ' input' → logprob: -11.946111679077148

Token 32: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.07889397442340851
    2. ' input' → logprob: -2.5788938999176025
    3. '(input' → logprob: -13.828893661499023
    4. ' ' → logprob: -14.203893661499023
    5. ',input' → logprob: -14.328893661499023
    6. 'is' → logprob: -14.703893661499023
    7. 'repeat' → logprob: -14.703893661499023
    8. '	input' → logprob: -15.203893661499023
    9. '=input' → logprob: -15.453893661499023
    10. ')' → logprob: -15.828893661499023

Token 33: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -2.9875325708417222e-05
    2. '()' → logprob: -10.625029563903809
    3. '(' → logprob: -13.750029563903809
    4. '.' → logprob: -13.875029563903809
    5. '().__' → logprob: -14.000029563903809
    6. ' .' → logprob: -14.125029563903809
    7. ' ().' → logprob: -14.500029563903809
    8. ')' → logprob: -15.125029563903809
    9. '.readline' → logprob: -15.500029563903809
    10. '>().' → logprob: -15.500029563903809

Token 34: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -6.392202976712724e-06
    2. 'strip' → logprob: -12.000006675720215
    3. '(split' → logprob: -16.2500057220459
    4. ' split' → logprob: -17.0000057220459
    5. 'rstrip' → logprob: -18.6250057220459
    6. 'read' → logprob: -19.0000057220459
    7. 'spl' → logprob: -19.1250057220459
    8. 'plit' → logprob: -20.1250057220459
    9. '.split' → logprob: -20.3750057220459
    10. '_split' → logprob: -20.6250057220459

Token 35: '()))

' (ID: 125972)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.112387515604496
    2. '()))' → logprob: -2.6123874187469482
    3. ')' → logprob: -3.4873874187469482
    4. '(' → logprob: -6.862387657165527
    5. '())' → logprob: -7.112387657165527
    6. '()' → logprob: -7.862387657165527
    7. ')))' → logprob: -9.737387657165527
    8. '),' → logprob: -10.487387657165527
    9. ')>' → logprob: -12.612387657165527
    10. '()));' → logprob: -12.612387657165527

Token 36: 'K' (ID: 42)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.509895384311676
    2. 'for' → logprob: -1.5098953247070312
    3. 'def' → logprob: -3.2598953247070312
    4. 'dp' → logprob: -3.5098953247070312
    5. 'a' → logprob: -4.134895324707031
    6. '*' → logprob: -4.134895324707031
    7. ',' → logprob: -4.259895324707031
    8. 'A' → logprob: -4.634895324707031
    9. 'result' → logprob: -4.884895324707031
    10. '=' → logprob: -5.134895324707031

Token 37: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.20190228521823883
    2. '=' → logprob: -1.7019022703170776
    3. ',' → logprob: -7.826902389526367
    4. '=int' → logprob: -9.826902389526367
    5. '=len' → logprob: -11.826902389526367
    6. ' ' → logprob: -12.326902389526367
    7. ' =)' → logprob: -12.701902389526367
    8. ' ,' → logprob: -12.951902389526367
    9. ' =
' → logprob: -13.326902389526367
    10. '=[]' → logprob: -13.576902389526367

Token 38: ' reduce' (ID: 10389)
  Prédit: ' N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' N' → logprob: -1.3339159488677979
    2. 'len' → logprob: -2.333915948867798
    3. ' len' → logprob: -2.458915948867798
    4. '0' → logprob: -2.833915948867798
    5. ' A' → logprob: -2.833915948867798
    6. ' ' → logprob: -2.958915948867798
    7. ' H' → logprob: -3.333915948867798
    8. ' min' → logprob: -3.333915948867798
    9. ' max' → logprob: -3.333915948867798
    10. '1' → logprob: -3.458915948867798

Token 39: '(lambda' (ID: 43341)
  Prédit: '(lambda'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.003515137592330575
    2. '(' → logprob: -6.003515243530273
    3. '(operator' → logprob: -7.003515243530273
    4. '(int' → logprob: -9.378515243530273
    5. '(max' → logprob: -10.753515243530273
    6. 'lambda' → logprob: -11.628515243530273
    7. '```' → logprob: -12.378515243530273
    8. '((' → logprob: -12.628515243530273
    9. '(pow' → logprob: -12.753515243530273
    10. '(min' → logprob: -14.003515243530273

Token 40: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.3021639585494995
    2. ' a' → logprob: -1.5521639585494995
    3. 'x' → logprob: -4.052164077758789
    4. ' lambda' → logprob: -4.177164077758789
    5. 'a' → logprob: -4.427164077758789
    6. ' acc' → logprob: -6.552164077758789
    7. 'lambda' → logprob: -6.677164077758789
    8. ' ' → logprob: -7.302164077758789
    9. ',' → logprob: -8.552164077758789
    10. ' ,' → logprob: -8.802164077758789

Token 41: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0004485461104195565
    2. ',x' → logprob: -8.000448226928711
    3. ',y' → logprob: -10.000448226928711
    4. ' ,' → logprob: -11.250448226928711
    5. ',k' → logprob: -11.500448226928711
    6. '1' → logprob: -11.875448226928711
    7. 'lambda' → logprob: -12.250448226928711
    8. 'x' → logprob: -12.500448226928711
    9. '+' → logprob: -13.125448226928711
    10. 'a' → logprob: -13.250448226928711

Token 42: ' y' (ID: 342)
  Prédit: ' y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.2815004289150238
    2. 'y' → logprob: -1.4065004587173462
    3. ' lambda' → logprob: -8.906500816345215
    4. ' ' → logprob: -9.781500816345215
    5. 'lambda' → logprob: -10.156500816345215
    6. 'a' → logprob: -10.281500816345215
    7. 'x' → logprob: -10.781500816345215
    8. ' x' → logprob: -11.156500816345215
    9. ' a' → logprob: -11.281500816345215
    10. ',' → logprob: -11.656500816345215

Token 43: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.03885652869939804
    2. ',' → logprob: -3.2888565063476562
    3. ' :' → logprob: -8.538856506347656
    4. ',:' → logprob: -8.663856506347656
    5. ',x' → logprob: -9.163856506347656
    6. ':x' → logprob: -9.163856506347656
    7. '=' → logprob: -9.288856506347656
    8. ',y' → logprob: -10.038856506347656
    9. 'x' → logprob: -10.663856506347656
    10. '1' → logprob: -11.038856506347656

Token 44: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.527582585811615
    2. ' x' → logprob: -1.0275826454162598
    3. ' max' → logprob: -3.5275826454162598
    4. 'max' → logprob: -3.9025826454162598
    5. 'lambda' → logprob: -7.77758264541626
    6. ' ' → logprob: -7.90258264541626
    7. ' min' → logprob: -8.027582168579102
    8. ' (' → logprob: -8.277582168579102
    9. ' lambda' → logprob: -8.402582168579102
    10. 'min' → logprob: -8.402582168579102

Token 45: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.15283916890621185
    2. '*' → logprob: -2.527839183807373
    3. '|' → logprob: -3.652839183807373
    4. '+y' → logprob: -4.027839183807373
    5. ' +' → logprob: -4.527839183807373
    6. '*y' → logprob: -6.277839183807373
    7. '^' → logprob: -6.652839183807373
    8. ' *' → logprob: -6.652839183807373
    9. ' |' → logprob: -7.027839183807373
    10. '-' → logprob: -7.652839183807373

Token 46: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.290691077709198
    2. ' y' → logprob: -1.4156911373138428
    3. '1' → logprob: -5.790690898895264
    4. ' max' → logprob: -6.915690898895264
    5. 'max' → logprob: -7.165690898895264
    6. ' ' → logprob: -7.290690898895264
    7. '(y' → logprob: -7.290690898895264
    8. ' (' → logprob: -7.415690898895264
    9. 'abs' → logprob: -7.540690898895264
    10. '[' → logprob: -8.165691375732422

Token 47: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00550208380445838
    2. '*' → logprob: -6.505502223968506
    3. '+' → logprob: -6.755502223968506
    4. '*A' → logprob: -6.755502223968506
    5. 'A' → logprob: -7.505502223968506
    6. ',A' → logprob: -7.755502223968506
    7. ' +' → logprob: -8.505501747131348
    8. '+A' → logprob: -8.880501747131348
    9. ' *' → logprob: -9.005501747131348
    10. '(A' → logprob: -9.505501747131348

Token 48: ' is' (ID: 382)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.2853397727012634
    2. ' A' → logprob: -1.4103398323059082
    3. 'is' → logprob: -6.785339832305908
    4. ' is' → logprob: -7.035339832305908
    5. ')' → logprob: -7.535339832305908
    6. '(A' → logprob: -8.28533935546875
    7. '[A' → logprob: -8.28533935546875
    8. ' (' → logprob: -8.53533935546875
    9. '[' → logprob: -8.66033935546875
    10. 'repeat' → logprob: -8.91033935546875

Token 49: 'lice' (ID: 7321)
  Prédit: 'lice'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lice' → logprob: -1.5570885807392187e-05
    2. 'lace' → logprob: -12.750015258789062
    3. 'ice' → logprob: -12.875015258789062
    4. '```' → logprob: -13.000015258789062
    5. '>' → logprob: -13.625015258789062
    6. 'l' → logprob: -14.125015258789062
    7. 'slice' → logprob: -14.125015258789062
    8. 'li' → logprob: -14.500015258789062
    9. 'liced' → logprob: -14.625015258789062
    10. '_slice' → logprob: -14.625015258789062

Token 50: '(A' (ID: 10706)
  Prédit: '(re'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(re' → logprob: -0.7023249268531799
    2. '(count' → logprob: -0.7023249268531799
    3. '(' → logprob: -4.827324867248535
    4. '(A' → logprob: -7.327324867248535
    5. '(it' → logprob: -8.827324867248535
    6. '(iter' → logprob: -9.202324867248535
    7. ')' → logprob: -9.952324867248535
    8. '(chain' → logprob: -10.702324867248535
    9. '(K' → logprob: -10.827324867248535
    10. '(c' → logprob: -10.952324867248535

Token 51: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.04425288736820221
    2. '(' → logprob: -4.044252872467041
    3. '(H' → logprob: -4.669252872467041
    4. '(count' → logprob: -5.169252872467041
    5. ',count' → logprob: -5.669252872467041
    6. ' ,' → logprob: -5.794252872467041
    7. '(N' → logprob: -6.294252872467041
    8. ',H' → logprob: -7.044252872467041
    9. '(K' → logprob: -7.794252872467041
    10. ',K' → logprob: -7.919252872467041

Token 52: ' ' (ID: 220)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.09714831411838531
    2. ' N' → logprob: -2.4721484184265137
    3. '0' → logprob: -5.597148418426514
    4. 'K' → logprob: -5.722148418426514
    5. 'H' → logprob: -7.847148418426514
    6. ' ' → logprob: -8.222147941589355
    7. ' K' → logprob: -8.222147941589355
    8. 'len' → logprob: -9.472147941589355
    9. '1' → logprob: -10.097147941589355
    10. ' H' → logprob: -10.347147941589355

Token 53: '0' (ID: 15)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.0353093259036541
    2. 'K' → logprob: -3.535309314727783
    3. '0' → logprob: -5.910309314727783
    4. ' N' → logprob: -6.660309314727783
    5. 'H' → logprob: -7.160309314727783
    6. 'len' → logprob: -8.285309791564941
    7. ' ' → logprob: -8.785309791564941
    8. '1' → logprob: -9.285309791564941
    9. ' K' → logprob: -10.035309791564941
    10. 'min' → logprob: -10.160309791564941

Token 54: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0021673901937901974
    2. ',N' → logprob: -6.627167224884033
    3. ' ,' → logprob: -7.877167224884033
    4. ',K' → logprob: -8.377167701721191
    5. ',H' → logprob: -8.502167701721191
    6. ' ' → logprob: -12.127167701721191
    7. 'N' → logprob: -12.377167701721191
    8. ',n' → logprob: -12.502167701721191
    9. 'H' → logprob: -12.502167701721191
    10. ',len' → logprob: -13.002167701721191

Token 55: ' len' (ID: 4631)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.025480415672063828
    2. ' N' → logprob: -4.150480270385742
    3. 'K' → logprob: -5.025480270385742
    4. 'H' → logprob: -6.150480270385742
    5. ' K' → logprob: -8.775480270385742
    6. ' ' → logprob: -8.775480270385742
    7. 'min' → logprob: -9.025480270385742
    8. ' H' → logprob: -9.525480270385742
    9. 'len' → logprob: -9.900480270385742
    10. ' min' → logprob: -10.650480270385742

Token 56: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.023527534678578377
    2. '(' → logprob: -3.7735276222229004
    3. '(H' → logprob: -8.523527145385742
    4. '(K' → logprob: -10.398527145385742
    5. ')' → logprob: -10.773527145385742
    6. '(N' → logprob: -11.273527145385742
    7. '(B' → logprob: -12.523527145385742
    8. '(S' → logprob: -12.898527145385742
    9. ',' → logprob: -12.898527145385742
    10. '(
' → logprob: -13.273527145385742

Token 57: ')))

' (ID: 46526)
  Prédit: ')))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.028528615832328796
    2. ')' → logprob: -4.028528690338135
    3. '),' → logprob: -5.028528690338135
    4. '))' → logprob: -6.028528690338135
    5. ')),' → logprob: -7.903528690338135
    6. ')))
' → logprob: -8.278528213500977
    7. ' ' → logprob: -8.528528213500977
    8. ',' → logprob: -8.903528213500977
    9. '))))' → logprob: -9.528528213500977
    10. ')));' → logprob: -9.528528213500977

Token 58: 'ver' (ID: 445)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.008385619148612022
    2. '+' → logprob: -5.25838565826416
    3. ',' → logprob: -7.25838565826416
    4. ' )' → logprob: -7.50838565826416
    5. '%' → logprob: -7.75838565826416
    6. '(' → logprob: -8.25838565826416
    7. '0' → logprob: -8.63338565826416
    8. '[' → logprob: -8.63338565826416
    9. '-' → logprob: -9.38338565826416
    10. '*' → logprob: -9.50838565826416

Token 59: 'dict' (ID: 20993)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -1.0307211875915527
    2. 'r' → logprob: -1.1557211875915527
    3. 'ify' → logprob: -1.4057211875915527
    4. 'rs' → logprob: -3.6557211875915527
    5. 'if' → logprob: -4.405721187591553
    6. 'dict' → logprob: -4.655721187591553
    7. '```' → logprob: -5.405721187591553
    8. 'y' → logprob: -5.530721187591553
    9. 'i' → logprob: -5.655721187591553
    10. 't' → logprob: -5.780721187591553

Token 60: ' =' (ID: 314)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08161677420139313
    2. '(' → logprob: -3.4566168785095215
    3. '+' → logprob: -3.5816168785095215
    4. '%' → logprob: -4.8316168785095215
    5. '*' → logprob: -6.0816168785095215
    6. '<|end|>' → logprob: -6.0816168785095215
    7. '-' → logprob: -6.4566168785095215
    8. '#' → logprob: -6.9566168785095215
    9. ' ' → logprob: -7.7066168785095215
    10. '**' → logprob: -7.9566168785095215

Token 61: ' (' (ID: 350)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.9191803336143494
    2. ' H' → logprob: -2.044180393218994
    3. 'H' → logprob: -2.169180393218994
    4. ''' → logprob: -2.294180393218994
    5. '"H' → logprob: -2.669180393218994
    6. ''H' → logprob: -3.169180393218994
    7. ' "' → logprob: -3.419180393218994
    8. ' '' → logprob: -3.919180393218994
    9. 'K' → logprob: -3.919180393218994
    10. ' K' → logprob: -4.044180393218994

Token 62: 'lambda' (ID: 35280)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.4572316110134125
    2. 'K' → logprob: -1.4572316408157349
    3. ' H' → logprob: -3.4572315216064453
    4. 'sum' → logprob: -3.4572315216064453
    5. ' K' → logprob: -3.7072315216064453
    6. 'A' → logprob: -4.707231521606445
    7. '0' → logprob: -4.707231521606445
    8. '   ' → logprob: -5.457231521606445
    9. 'N' → logprob: -5.957231521606445
    10. 'count' → logprob: -6.082231521606445

Token 63: ':' (ID: 25)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -1.005445957183838
    2. ' h' → logprob: -1.505445957183838
    3. 'h' → logprob: -2.630445957183838
    4. ' H' → logprob: -2.755445957183838
    5. 'x' → logprob: -2.755445957183838
    6. 'H' → logprob: -3.130445957183838
    7. ' n' → logprob: -3.630445957183838
    8. ' a' → logprob: -3.880445957183838
    9. ' k' → logprob: -4.505445957183838
    10. ' lambda' → logprob: -4.630445957183838

Token 64: ' "' (ID: 392)
  Prédit: ' H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' H' → logprob: -0.8134986758232117
    2. 'H' → logprob: -1.1884987354278564
    3. ' max' → logprob: -2.9384987354278564
    4. ' ' → logprob: -3.9384987354278564
    5. ' True' → logprob: -3.9384987354278564
    6. ' K' → logprob: -4.063498497009277
    7. 'True' → logprob: -4.438498497009277
    8. 'max' → logprob: -4.563498497009277
    9. ' None' → logprob: -4.688498497009277
    10. ' A' → logprob: -4.813498497009277

Token 65: 'Yes' (ID: 13022)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.9585393667221069
    2. 'Yes' → logprob: -2.0835394859313965
    3. 'IMP' → logprob: -2.8335394859313965
    4. 'H' → logprob: -2.8335394859313965
    5. 'YES' → logprob: -2.9585394859313965
    6. 'Impossible' → logprob: -3.3335394859313965
    7. 'NO' → logprob: -3.5835394859313965
    8. 'No' → logprob: -3.9585394859313965
    9. '"H' → logprob: -3.9585394859313965
    10. 'FAIL' → logprob: -4.0835394859313965

Token 66: '",' (ID: 672)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.002113977912813425
    2. '\n' → logprob: -6.2521138191223145
    3. '")' → logprob: -9.252114295959473
    4. 'if' → logprob: -9.877114295959473
    5. ' "' → logprob: -10.877114295959473
    6. ' if' → logprob: -11.877114295959473
    7. '()' → logprob: -13.502114295959473
    8. '```' → logprob: -13.627114295959473
    9. 'Yes' → logprob: -13.877114295959473
    10. ''' → logprob: -14.252114295959473

Token 67: ' lambda' (ID: 27871)
  Prédit: ' lambda'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lambda' → logprob: -0.5354403853416443
    2. 'lambda' → logprob: -1.035440444946289
    3. ' "' → logprob: -3.535440444946289
    4. '"' → logprob: -3.910440444946289
    5. '(lambda' → logprob: -4.660440444946289
    6. '=lambda' → logprob: -8.160440444946289
    7. ')' → logprob: -8.410440444946289
    8. ' ' → logprob: -8.660440444946289
    9. '"No' → logprob: -10.285440444946289
    10. 'False' → logprob: -10.535440444946289

Token 68: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -8.625866030342877e-05
    2. ' :' → logprob: -9.625085830688477
    3. ' x' → logprob: -11.500085830688477
    4. '():' → logprob: -12.375085830688477
    5. ' "' → logprob: -14.000085830688477
    6. '"' → logprob: -14.687585830688477
    7. '=' → logprob: -14.750085830688477
    8. ' _:' → logprob: -14.750085830688477
    9. ' ():' → logprob: -14.750085830688477
    10. 'x' → logprob: -14.812585830688477

Token 69: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.775664746761322
    2. ' "' → logprob: -0.900664746761322
    3. '"No' → logprob: -2.025664806365967
    4. ')' → logprob: -7.025664806365967
    5. ' ' → logprob: -8.400664329528809
    6. 'print' → logprob: -9.650664329528809
    7. ' lambda' → logprob: -10.525664329528809
    8. ''' → logprob: -10.525664329528809
    9. '"You' → logprob: -10.775664329528809
    10. 'lambda' → logprob: -10.900664329528809

Token 70: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.01933920942246914
    2. ' No' → logprob: -4.019339084625244
    3. '"No' → logprob: -7.144339084625244
    4. '"' → logprob: -8.394339561462402
    5. 'Yes' → logprob: -9.019339561462402
    6. ' ' → logprob: -10.269339561462402
    7. 'Impossible' → logprob: -12.894339561462402
    8. ' "' → logprob: -13.394339561462402
    9. 'NO' → logprob: -13.394339561462402
    10. '_No' → logprob: -13.394339561462402

Token 71: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.17400988936424255
    2. '")[' → logprob: -2.4240097999572754
    3. ')' → logprob: -2.6740097999572754
    4. ')")' → logprob: -6.549009799957275
    5. ')("' → logprob: -8.549010276794434
    6. '")(' → logprob: -8.674010276794434
    7. '"))' → logprob: -8.924010276794434
    8. ')[' → logprob: -9.174010276794434
    9. ')"' → logprob: -10.174010276794434
    10. '"' → logprob: -10.424010276794434

Token 72: '[(' (ID: 20542)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.11145421862602234
    2. '()' → logprob: -2.6114542484283447
    3. '()[' → logprob: -3.6114542484283447
    4. '(' → logprob: -6.111454010009766
    5. '[(' → logprob: -7.486454010009766
    6. '<|end|>' → logprob: -7.861454010009766
    7. '[
' → logprob: -8.486454010009766
    8. '[]' → logprob: -8.736454010009766
    9. '[K' → logprob: -8.861454010009766
    10. '()
' → logprob: -9.361454010009766

Token 73: 'K' (ID: 42)
  Prédit: 'K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.20664848387241364
    2. 'H' → logprob: -1.7066484689712524
    3. ' K' → logprob: -5.831648349761963
    4. 'N' → logprob: -7.331648349761963
    5. ' H' → logprob: -8.081648826599121
    6. 'not' → logprob: -8.206648826599121
    7. ' ' → logprob: -8.456648826599121
    8. ')' → logprob: -8.706648826599121
    9. 'sum' → logprob: -8.706648826599121
    10. 'reduce' → logprob: -8.831648826599121

Token 74: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.01694709062576294
    2. '<' → logprob: -4.391947269439697
    3. '<H' → logprob: -5.891947269439697
    4. ' <=' → logprob: -7.266947269439697
    5. ' >=' → logprob: -8.016946792602539
    6. ' ' → logprob: -8.516946792602539
    7. ')' → logprob: -8.766946792602539
    8. '<K' → logprob: -8.891946792602539
    9. '<=' → logprob: -10.266946792602539
    10. '<N' → logprob: -10.641946792602539

Token 75: ' H' (ID: 487)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.08900392055511475
    2. ' H' → logprob: -2.4640040397644043
    3. ' ' → logprob: -10.089003562927246
    4. ')' → logprob: -11.714003562927246
    5. '	H' → logprob: -12.839003562927246
    6. '<|end|>' → logprob: -13.089003562927246
    7. '100' → logprob: -13.464003562927246
    8. '   ' → logprob: -13.714003562927246
    9. '  ' → logprob: -14.026503562927246
    10. '>' → logprob: -14.089003562927246

Token 76: ')]' (ID: 15710)
  Prédit: ')]'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.0005048964521847665
    2. ')' → logprob: -8.000504493713379
    3. ' )' → logprob: -9.000504493713379
    4. ']' → logprob: -11.000504493713379
    5. ')])' → logprob: -11.625504493713379
    6. ')]

' → logprob: -12.000504493713379
    7. ')][' → logprob: -12.625504493713379
    8. '])]' → logprob: -13.000504493713379
    9. ')]
' → logprob: -13.250504493713379
    10. '])' → logprob: -13.875504493713379

Token 77: '()
' (ID: 1234)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.6998198628425598
    2. ')' → logprob: -1.199819803237915
    3. '
' → logprob: -2.199819803237915
    4. '()' → logprob: -3.074819803237915
    5. '(' → logprob: -4.199820041656494
    6. '<|end|>' → logprob: -4.699820041656494
    7. '()
' → logprob: -5.699820041656494
    8. '\n' → logprob: -5.824820041656494
    9. '```' → logprob: -5.949820041656494
    10. '#' → logprob: -5.949820041656494

Token 78: 'print' (ID: 1598)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 79: '(ver' (ID: 185185)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004307038150727749
    2. '(print' → logprob: -6.129307270050049
    3. '(ver' → logprob: -6.629307270050049
    4. '()' → logprob: -7.754307270050049
    5. '('' → logprob: -9.00430679321289
    6. '(A' → logprob: -9.62930679321289
    7. '((' → logprob: -10.00430679321289
    8. '("' → logprob: -10.25430679321289
    9. '(`' → logprob: -10.62930679321289
    10. '(K' → logprob: -11.62930679321289

Token 80: 'dict' (ID: 20993)
  Prédit: 'dict'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dict' → logprob: -1.0802738870552275e-05
    2. 'd' → logprob: -11.50001049041748
    3. 'dit' → logprob: -15.12501049041748
    4. 'ict' → logprob: -16.000011444091797
    5. 'Dict' → logprob: -16.500011444091797
    6. ' dict' → logprob: -16.500011444091797
    7. 'dic' → logprob: -16.875011444091797
    8. 'DICT' → logprob: -17.625011444091797
    9. '(dict' → logprob: -19.125011444091797
    10. 'dice' → logprob: -19.625011444091797

Token 81: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.1008713702030946e-06
    2. '))' → logprob: -13.250001907348633
    3. ' )' → logprob: -15.375001907348633
    4. ')
' → logprob: -17.625001907348633
    5. ')`' → logprob: -17.875001907348633
    6. ')#' → logprob: -18.125001907348633
    7. ')))' → logprob: -18.375001907348633
    8. '）' → logprob: -19.000001907348633
    9. '`)' → logprob: -19.250001907348633
    10. '())' → logprob: -19.500001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 79
Tokens correctement prédits (1ère position, stricte): 29
Tokens correctement prédits (1ère position, avec adaptation): 29
Tokens correctement prédits (top 10): 55
Précision stricte (1ère position): 36.71%
Précision adaptée (1ère position): 36.71%
Précision (top 10): 69.62%
================================================================================
