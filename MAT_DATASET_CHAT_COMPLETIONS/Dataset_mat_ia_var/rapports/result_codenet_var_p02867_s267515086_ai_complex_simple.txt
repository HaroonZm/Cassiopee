================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:39:29
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys
from bisect import bisect as br
from collections import Counter
from itertools import starmap, accumulate, permutations, chain
from functools import reduce, partial
from operator import eq, le, gt, add

readline = sys.stdin.readline

def check(A, B):
    SA, SB = map(sorted, (A, B))
    
    # 1. Remplacez la comparaison par zip en utilisant starmap, map, any, etc.
    if any(starmap(gt, zip(SA, SB))):
        return 'No'
    
    # 2. Vérifiez all(a <= b) en utilisant reduce et map.
    le_checker = lambda x, y: x and y
    if reduce(le_checker, map(le, A, B), True):
        return 'Yes'
    
    # 3. Cas du bisect
    fancy_bisect = lambda i: br(SA, SB[i]) == i+1
    if not all(map(fancy_bisect, range(len(A)))):
        return 'Yes'
    
    # 4. Ensemble et unicité via permutations + set comprehension
    uniqify = lambda X: len({*X})
    if any(map(lambda X: uniqify(X) != len(A), (A, B))):
        return 'Yes'
    
    # 5. Substitution indices avec Counter, combine zip, dict, enumerate, chain!
    idxA = dict(chain.from_iterable([[(v, i)] for i, v in enumerate(A)]))
    idxB = dict(chain.from_iterable([[(v, i)] for i, v in enumerate(B)]))
    P = list(map(idxB.get, SA))
    P = list(map(P.__getitem__, list(map(idxA.get, SA))))
    
    # 6. Cycle détection de permutation par accumulate + set comprehension & all
    t, seen = 0, set()
    seq = []
    while t not in seen:
        seen |= {t}
        seq.append(t)
        t = P[t]
    if len(seen) == len(A):
        return 'No'
    return 'Yes'

N = int(readline())
A = list(map(int, readline().split()))
B = list(map(int, readline().split()))
print(check(A, B))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '
' (ID: 198)
  → Token d'amorce (pas de prédiction)

Token 3: 'from' (ID: 2845)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.5435490608215332
    2. '.' → logprob: -1.0435490608215332
    3. '<|end|>' → logprob: -3.918549060821533
    4. '\' → logprob: -4.043549060821533
    5. 'import' → logprob: -4.418549060821533
    6. 'newline' → logprob: -5.293549060821533
    7. '' → logprob: -6.043549060821533
    8. '\r' → logprob: -6.168549060821533
    9. '
' → logprob: -6.293549060821533
    10. '<|end|>' → logprob: -6.418549060821533

Token 4: ' bis' (ID: 7204)
  Prédit: ' os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' os' → logprob: -0.012081976048648357
    2. 'os' → logprob: -4.762082099914551
    3. ' collections' → logprob: -6.887082099914551
    4. ' ' → logprob: -7.512082099914551
    5. ' math' → logprob: -7.887082099914551
    6. ' Py' → logprob: -7.887082099914551
    7. ' pathlib' → logprob: -8.01208209991455
    8. ' typing' → logprob: -8.63708209991455
    9. 'collections' → logprob: -9.38708209991455
    10. ' datetime' → logprob: -9.38708209991455

Token 5: 'ect' (ID: 534)
  Prédit: 'ect'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ect' → logprob: -3.881560041918419e-05
    2. 'e' → logprob: -10.625039100646973
    3. 'ectl' → logprob: -12.250039100646973
    4. 'ected' → logprob: -12.750039100646973
    5. 'ector' → logprob: -13.250039100646973
    6. 'ec' → logprob: -13.375039100646973
    7. 't' → logprob: -13.750039100646973
    8. '>' → logprob: -14.500039100646973
    9. '```' → logprob: -15.000039100646973
    10. 'ection' → logprob: -15.125039100646973

Token 6: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.03808658942580223
    2. 'import' → logprob: -3.2880866527557373
    3. '_import' → logprob: -10.913086891174316
    4. ' ' → logprob: -11.413086891174316
    5. '	import' → logprob: -11.538086891174316
    6. ' ' → logprob: -13.288086891174316
    7. 'ort' → logprob: -13.288086891174316
    8. '_' → logprob: -13.913086891174316
    9. ' importar' → logprob: -15.413086891174316
    10. ' impor' → logprob: -15.538086891174316

Token 7: ' bis' (ID: 7204)
  Prédit: ' bis'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' bis' → logprob: -0.32460281252861023
    2. 'bis' → logprob: -1.3246028423309326
    3. 'ins' → logprob: -4.5746026039123535
    4. ' ins' → logprob: -6.9496026039123535
    5. 'b' → logprob: -12.199603080749512
    6. 'in' → logprob: -14.074603080749512
    7. ' b' → logprob: -14.699603080749512
    8. 'is' → logprob: -14.824603080749512
    9. 'he' → logprob: -15.449603080749512
    10. '_ins' → logprob: -15.824603080749512

Token 8: 'ect' (ID: 534)
  Prédit: 'ect'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ect' → logprob: -2.2246291337069124e-05
    2. 'e' → logprob: -10.875021934509277
    3. 'ec' → logprob: -13.250021934509277
    4. 'ectl' → logprob: -14.875021934509277
    5. 'ected' → logprob: -15.250021934509277
    6. 'sect' → logprob: -16.125022888183594
    7. '{' → logprob: -16.250022888183594
    8. '```' → logprob: -16.375022888183594
    9. 'ecta' → logprob: -16.500022888183594
    10. '\' → logprob: -16.625022888183594

Token 9: ' as' (ID: 472)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.37179675698280334
    2. '(' → logprob: -1.996796727180481
    3. '.' → logprob: -2.1217968463897705
    4. 'import' → logprob: -4.121796607971191
    5. ' import' → logprob: -4.371796607971191
    6. ' ' → logprob: -4.496796607971191
    7. ',' → logprob: -5.246796607971191
    8. ' (' → logprob: -6.121796607971191
    9. '\' → logprob: -7.246796607971191
    10. '```' → logprob: -7.371796607971191

Token 10: ' br' (ID: 1294)
  Prédit: '_left'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_left' → logprob: -0.38709473609924316
    2. '_right' → logprob: -1.3870947360992432
    3. ' bis' → logprob: -2.887094736099243
    4. '_' → logprob: -5.137094497680664
    5. 'bis' → logprob: -6.012094497680664
    6. ' _' → logprob: -6.262094497680664
    7. '_ins' → logprob: -6.637094497680664
    8. '_b' → logprob: -6.762094497680664
    9. 'ins' → logprob: -7.262094497680664
    10. ' b' → logprob: -7.512094497680664

Token 11: '
' (ID: 198)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.599698543548584
    2. '(' → logprob: -0.974698543548584
    3. '()' → logprob: -3.849698543548584
    4. '```' → logprob: -4.099698543548584
    5. ')' → logprob: -4.474698543548584
    6. 'a' → logprob: -4.599698543548584
    7. '_' → logprob: -5.849698543548584
    8. 'acket' → logprob: -5.849698543548584
    9. '(e' → logprob: -6.224698543548584
    10. ']' → logprob: -6.474698543548584

Token 12: 'from' (ID: 2845)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.08196049928665161
    2. '(' → logprob: -2.581960439682007
    3. '.' → logprob: -7.081960678100586
    4. 'r' → logprob: -7.206960678100586
    5. '' → logprob: -8.206960678100586
    6. '._' → logprob: -8.706960678100586
    7. ',' → logprob: -8.706960678100586
    8. '_left' → logprob: -9.081960678100586
    9. ' (' → logprob: -9.581960678100586
    10. ')' → logprob: -9.831960678100586

Token 13: ' collections' (ID: 22690)
  Prédit: 'collections'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'collections' → logprob: -1.2173999547958374
    2. 'math' → logprob: -1.4673999547958374
    3. ' math' → logprob: -1.8423999547958374
    4. ' itertools' → logprob: -2.217400074005127
    5. 'heap' → logprob: -2.342400074005127
    6. ' collections' → logprob: -2.592400074005127
    7. ' heap' → logprob: -4.092400074005127
    8. ' typing' → logprob: -5.217400074005127
    9. 'typing' → logprob: -5.217400074005127
    10. 'bis' → logprob: -6.342400074005127

Token 14: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.3851923942565918
    2. 'import' → logprob: -1.6351923942565918
    3. '.' → logprob: -2.260192394256592
    4. '.Counter' → logprob: -4.260192394256592
    5. '_' → logprob: -5.385192394256592
    6. ' ' → logprob: -7.260192394256592
    7. '```' → logprob: -7.385192394256592
    8. '	import' → logprob: -9.01019287109375
    9. '.import' → logprob: -9.26019287109375
    10. '_import' → logprob: -10.76019287109375

Token 15: ' Counter' (ID: 32251)
  Prédit: ' defaultdict'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' defaultdict' → logprob: -0.16002261638641357
    2. 'deque' → logprob: -2.535022735595703
    3. ' deque' → logprob: -2.785022735595703
    4. 'default' → logprob: -6.035022735595703
    5. ' abc' → logprob: -6.160022735595703
    6. 'abc' → logprob: -6.660022735595703
    7. ' Counter' → logprob: -7.910022735595703
    8. ' named' → logprob: -8.160022735595703
    9. 'Counter' → logprob: -8.660022735595703
    10. 'named' → logprob: -9.285022735595703

Token 16: '
' (ID: 198)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.5883277654647827
    2. ',' → logprob: -1.8383277654647827
    3. '\n' → logprob: -2.7133278846740723
    4. '
' → logprob: -2.9633278846740723
    5. '(' → logprob: -3.2133278846740723
    6. '\' → logprob: -3.3383278846740723
    7. 'def' → logprob: -4.088327884674072
    8. '

' → logprob: -4.588327884674072
    9. 'newline' → logprob: -4.838327884674072
    10. 'print' → logprob: -4.963327884674072

Token 17: 'from' (ID: 2845)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.945898711681366
    2. 'import' → logprob: -1.5708987712860107
    3. '\n' → logprob: -1.6958987712860107
    4. ',' → logprob: -3.0708987712860107
    5. 'n' → logprob: -3.4458987712860107
    6. '
' → logprob: -3.6958987712860107
    7. '```' → logprob: -3.6958987712860107
    8. 'a' → logprob: -4.070898532867432
    9. 'newline' → logprob: -4.445898532867432
    10. '\' → logprob: -4.570898532867432

Token 18: ' itertools' (ID: 103178)
  Prédit: ' itertools'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' itertools' → logprob: -0.051399942487478256
    2. ' math' → logprob: -3.1763999462127686
    3. ' typing' → logprob: -5.1763997077941895
    4. ' heap' → logprob: -6.3013997077941895
    5. ' functools' → logprob: -7.5513997077941895
    6. 'math' → logprob: -8.551400184631348
    7. 'heap' → logprob: -9.676400184631348
    8. 'typing' → logprob: -10.426400184631348
    9. ' ' → logprob: -11.051400184631348
    10. 'it' → logprob: -11.426400184631348

Token 19: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.055120691657066345
    2. 'import' → logprob: -2.9301207065582275
    3. '	import' → logprob: -9.930120468139648
    4. ' ' → logprob: -10.180120468139648
    5. 'ertools' → logprob: -10.680120468139648
    6. ' itertools' → logprob: -10.805120468139648
    7. '.com' → logprob: -11.055120468139648
    8. '.' → logprob: -11.055120468139648
    9. '.groupby' → logprob: -11.055120468139648
    10. '```' → logprob: -11.680120468139648

Token 20: ' st' (ID: 420)
  Prédit: 'per'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'per' → logprob: -1.1097880601882935
    2. 'acc' → logprob: -1.4847880601882935
    3. 'group' → logprob: -1.7347880601882935
    4. 'com' → logprob: -2.734787940979004
    5. ' permutations' → logprob: -2.734787940979004
    6. 'product' → logprob: -2.984787940979004
    7. 'count' → logprob: -3.609787940979004
    8. 'chain' → logprob: -4.109787940979004
    9. ' accumulate' → logprob: -4.359787940979004
    10. 'is' → logprob: -4.484787940979004

Token 21: 'arm' (ID: 2218)
  Prédit: 'arm'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'arm' → logprob: -0.09503550827503204
    2. 'ar' → logprob: -2.4700355529785156
    3. 'art' → logprob: -5.595035552978516
    4. 'ertools' → logprob: -6.970035552978516
    5. 'arp' → logprob: -8.345035552978516
    6. 'ep' → logprob: -8.345035552978516
    7. 'arl' → logprob: -8.595035552978516
    8. 'r' → logprob: -8.720035552978516
    9. 'ur' → logprob: -9.345035552978516
    10. 'ee' → logprob: -9.595035552978516

Token 22: 'ap' (ID: 403)
  Prédit: 'ap'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ap' → logprob: -0.0010367410723119974
    2. 'atch' → logprob: -7.001036643981934
    3. 'ep' → logprob: -9.251036643981934
    4. 'ach' → logprob: -11.876036643981934
    5. 'atches' → logprob: -12.376036643981934
    6. 'atching' → logprob: -12.876036643981934
    7. 'atched' → logprob: -13.001036643981934
    8. 'apse' → logprob: -13.126036643981934
    9. 'e' → logprob: -13.251036643981934
    10. 'at' → logprob: -13.376036643981934

Token 23: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6000770330429077
    2. ',' → logprob: -1.6000770330429077
    3. '(
' → logprob: -2.1000771522521973
    4. '\n' → logprob: -3.6000771522521973
    5. 'def' → logprob: -3.6000771522521973
    6. 'import' → logprob: -3.8500771522521973
    7. ' (' → logprob: -4.725077152252197
    8. '
' → logprob: -4.975077152252197
    9. ',
' → logprob: -5.475077152252197
    10. '(range' → logprob: -5.475077152252197

Token 24: ' accumulate' (ID: 74226)
  Prédit: 'acc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'acc' → logprob: -0.8130108118057251
    2. ' accumulate' → logprob: -1.688010811805725
    3. 'group' → logprob: -2.1880106925964355
    4. ' group' → logprob: -2.5630106925964355
    5. 'product' → logprob: -3.0630106925964355
    6. 'chain' → logprob: -3.4380106925964355
    7. ' product' → logprob: -3.9380106925964355
    8. 'repeat' → logprob: -4.0630106925964355
    9. ' chain' → logprob: -4.1880106925964355
    10. 'is' → logprob: -4.6880106925964355

Token 25: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.0103394985198975
    2. '(
' → logprob: -1.7603394985198975
    3. '\n' → logprob: -1.8853394985198975
    4. '(' → logprob: -1.8853394985198975
    5. '\' → logprob: -3.0103394985198975
    6. ',
' → logprob: -3.1353394985198975
    7. 'def' → logprob: -3.8853394985198975
    8. '
' → logprob: -4.010339736938477
    9. 'import' → logprob: -5.385339736938477
    10. '<|end|>' → logprob: -5.760339736938477

Token 26: ' permutations' (ID: 174595)
  Prédit: ' group'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' group' → logprob: -1.1330499649047852
    2. ' chain' → logprob: -1.1330499649047852
    3. 'group' → logprob: -2.008049964904785
    4. 'chain' → logprob: -2.633049964904785
    5. ' product' → logprob: -2.883049964904785
    6. 'product' → logprob: -3.508049964904785
    7. 'com' → logprob: -4.508049964904785
    8. ' cycle' → logprob: -4.883049964904785
    9. ' permutations' → logprob: -5.258049964904785
    10. 'cycle' → logprob: -5.383049964904785

Token 27: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7513924241065979
    2. '(' → logprob: -1.0013923645019531
    3. '(
' → logprob: -2.626392364501953
    4. '<|end|>' → logprob: -2.751392364501953
    5. '
' → logprob: -4.751392364501953
    6. ')' → logprob: -5.751392364501953
    7. '\n' → logprob: -5.876392364501953
    8. ',
' → logprob: -6.126392364501953
    9. 'def' → logprob: -6.501392364501953
    10. 'import' → logprob: -6.751392364501953

Token 28: ' chain' (ID: 13464)
  Prédit: 'com'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'com' → logprob: -0.7398062348365784
    2. ' product' → logprob: -1.6148061752319336
    3. 'product' → logprob: -2.1148061752319336
    4. ' combinations' → logprob: -2.1148061752319336
    5. ' chain' → logprob: -3.1148061752319336
    6. ' group' → logprob: -4.239806175231934
    7. 'chain' → logprob: -4.614806175231934
    8. 'group' → logprob: -5.364806175231934
    9. ' cycle' → logprob: -6.614806175231934
    10. ' is' → logprob: -6.864806175231934

Token 29: '
' (ID: 198)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.11994558572769165
    2. '<|end|>' → logprob: -2.369945526123047
    3. ' ' → logprob: -4.869945526123047
    4. ',
' → logprob: -5.369945526123047
    5. ' ,' → logprob: -6.744945526123047
    6. '(' → logprob: -6.744945526123047
    7. 'import' → logprob: -6.994945526123047
    8. '(
' → logprob: -7.244945526123047
    9. ')' → logprob: -7.369945526123047
    10. '
' → logprob: -7.494945526123047

Token 30: 'from' (ID: 2845)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.35936737060546875
    2. '

' → logprob: -2.3593673706054688
    3. ',
' → logprob: -2.8593673706054688
    4. 'import' → logprob: -2.9843673706054688
    5. ',

' → logprob: -3.1093673706054688
    6. '
' → logprob: -3.8593673706054688
    7. 'def' → logprob: -4.109367370605469
    8. '\n' → logprob: -5.359367370605469
    9. 'from' → logprob: -5.734367370605469
    10. '


' → logprob: -6.609367370605469

Token 31: ' functools' (ID: 142636)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.6139588952064514
    2. 'math' → logprob: -1.3639588356018066
    3. ' operator' → logprob: -1.9889588356018066
    4. 'operator' → logprob: -3.3639588356018066
    5. ' functools' → logprob: -3.8639588356018066
    6. ' heap' → logprob: -5.488958835601807
    7. 'heap' → logprob: -5.488958835601807
    8. 'fun' → logprob: -7.238958835601807
    9. ' typing' → logprob: -8.238959312438965
    10. ' ' → logprob: -8.363959312438965

Token 32: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.09047777950763702
    2. 'import' → logprob: -2.465477705001831
    3. ' ' → logprob: -6.71547794342041
    4. '_import' → logprob: -8.84047794342041
    5. '	import' → logprob: -9.46547794342041
    6. '<|end|>' → logprob: -9.59047794342041
    7. ' ' → logprob: -11.71547794342041
    8. '_' → logprob: -12.34047794342041
    9. ' importar' → logprob: -13.34047794342041
    10. ' impor' → logprob: -13.34047794342041

Token 33: ' reduce' (ID: 10389)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.4704679846763611
    2. ' reduce' → logprob: -1.0954680442810059
    3. 'reduce' → logprob: -3.720468044281006
    4. 'l' → logprob: -4.470468044281006
    5. ' partial' → logprob: -5.720468044281006
    6. ' wraps' → logprob: -6.720468044281006
    7. ' cmp' → logprob: -8.595467567443848
    8. 'partial' → logprob: -8.720467567443848
    9. ' ' → logprob: -9.345467567443848
    10. ' cache' → logprob: -9.470467567443848

Token 34: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.12433893233537674
    2. '<|end|>' → logprob: -2.6243388652801514
    3. 'import' → logprob: -3.6243388652801514
    4. ' ' → logprob: -5.6243391036987305
    5. ',
' → logprob: -5.8743391036987305
    6. 'def' → logprob: -6.1243391036987305
    7. '
' → logprob: -6.3743391036987305
    8. ' ,' → logprob: -6.3743391036987305
    9. '<|end|>' → logprob: -6.9993391036987305
    10. ')' → logprob: -7.2493391036987305

Token 35: ' partial' (ID: 13664)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.994554340839386
    2. 'partial' → logprob: -1.2445542812347412
    3. ' l' → logprob: -1.4945542812347412
    4. ' partial' → logprob: -2.244554281234741
    5. 'cmp' → logprob: -5.61955451965332
    6. ' wraps' → logprob: -5.86955451965332
    7. 'wrap' → logprob: -5.86955451965332
    8. 'cache' → logprob: -6.86955451965332
    9. ' cmp' → logprob: -7.11955451965332
    10. ' cache' → logprob: -7.99455451965332

Token 36: '
' (ID: 198)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5375814437866211
    2. 'import' → logprob: -1.787581443786621
    3. '<|end|>' → logprob: -2.412581443786621
    4. 'def' → logprob: -3.412581443786621
    5. '
' → logprob: -3.412581443786621
    6. ',
' → logprob: -3.662581443786621
    7. ' ' → logprob: -4.537581443786621
    8. ' 
' → logprob: -4.787581443786621
    9. '

' → logprob: -4.912581443786621
    10. '' → logprob: -5.287581443786621

Token 37: 'from' (ID: 2845)
  Prédit: '

'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '

' → logprob: -0.9555184841156006
    2. ',' → logprob: -1.3305184841156006
    3. '
' → logprob: -1.8305184841156006
    4. 'import' → logprob: -2.7055184841156006
    5. 'def' → logprob: -2.8305184841156006
    6. ',
' → logprob: -4.08051872253418
    7. ',

' → logprob: -4.70551872253418
    8. ' 

' → logprob: -5.08051872253418
    9. '\n' → logprob: -5.45551872253418
    10. '(' → logprob: -5.70551872253418

Token 38: ' operator' (ID: 11019)
  Prédit: ' operator'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' operator' → logprob: -0.1119951531291008
    2. ' math' → logprob: -2.361995220184326
    3. 'operator' → logprob: -4.611995220184326
    4. 'math' → logprob: -6.611995220184326
    5. ' ' → logprob: -8.736994743347168
    6. '_operator' → logprob: -9.236994743347168
    7. ' typing' → logprob: -9.486994743347168
    8. ' itertools' → logprob: -10.736994743347168
    9. ' heap' → logprob: -10.861994743347168
    10. ' os' → logprob: -11.486994743347168

Token 39: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.010170615278184414
    2. 'import' → logprob: -4.8851704597473145
    3. ' ' → logprob: -6.7601704597473145
    4. '<|end|>' → logprob: -7.2601704597473145
    5. '.' → logprob: -7.5101704597473145
    6. ' as' → logprob: -9.135170936584473
    7. '	import' → logprob: -10.885170936584473
    8. '<|end|>' → logprob: -11.760170936584473
    9. '_import' → logprob: -13.135170936584473
    10. ' .' → logprob: -13.135170936584473

Token 40: ' eq' (ID: 18955)
  Prédit: ' item'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' item' → logprob: -0.2193148136138916
    2. 'item' → logprob: -2.8443148136138916
    3. ' mul' → logprob: -2.9693148136138916
    4. ' add' → logprob: -3.2193148136138916
    5. ' ' → logprob: -4.2193145751953125
    6. 'mul' → logprob: -4.7193145751953125
    7. 'getitem' → logprob: -5.3443145751953125
    8. 'add' → logprob: -5.5943145751953125
    9. ' method' → logprob: -5.8443145751953125
    10. ' or' → logprob: -6.3443145751953125

Token 41: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.018996434286236763
    2. ',
' → logprob: -4.393996238708496
    3. ')' → logprob: -6.893996238708496
    4. '(' → logprob: -7.018996238708496
    5. ',

' → logprob: -7.018996238708496
    6. 'import' → logprob: -7.268996238708496
    7. '.' → logprob: -7.643996238708496
    8. ' ,' → logprob: -8.018996238708496
    9. '<|end|>' → logprob: -8.268996238708496
    10. ' ' → logprob: -8.393996238708496

Token 42: ' le' (ID: 505)
  Prédit: 'item'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'item' → logprob: -0.9660617709159851
    2. ' item' → logprob: -1.3410618305206299
    3. 'add' → logprob: -2.46606183052063
    4. 'lt' → logprob: -3.09106183052063
    5. ' add' → logprob: -3.34106183052063
    6. ' ne' → logprob: -3.84106183052063
    7. ' mul' → logprob: -3.84106183052063
    8. ' lt' → logprob: -3.84106183052063
    9. 'le' → logprob: -4.091061592102051
    10. ' le' → logprob: -4.216061592102051

Token 43: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.009319435805082321
    2. '<|end|>' → logprob: -5.884319305419922
    3. ',
' → logprob: -6.634319305419922
    4. ' ,' → logprob: -7.259319305419922
    5. ')' → logprob: -7.259319305419922
    6. 'w' → logprob: -7.384319305419922
    7. ' ' → logprob: -7.509319305419922
    8. '.' → logprob: -7.759319305419922
    9. 'from' → logprob: -8.134319305419922
    10. 'import' → logprob: -8.134319305419922

Token 44: ' gt' (ID: 47532)
  Prédit: 'lt'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lt' → logprob: -1.3752057552337646
    2. 'gt' → logprob: -1.5002057552337646
    3. 'ge' → logprob: -1.8752057552337646
    4. ' ge' → logprob: -2.0002057552337646
    5. ' lt' → logprob: -2.6252057552337646
    6. 'add' → logprob: -3.0002057552337646
    7. ' gt' → logprob: -3.2502057552337646
    8. ' ne' → logprob: -4.500205993652344
    9. 'item' → logprob: -4.500205993652344
    10. ' add' → logprob: -4.500205993652344

Token 45: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.171686053276062
    2. '<|end|>' → logprob: -2.0466861724853516
    3. '
' → logprob: -4.171686172485352
    4. ',
' → logprob: -5.046686172485352
    5. 'import' → logprob: -6.671686172485352
    6. ' ' → logprob: -6.671686172485352
    7. ')' → logprob: -7.046686172485352
    8. '\n' → logprob: -7.171686172485352
    9. '<|end|>' → logprob: -7.921686172485352
    10. '

' → logprob: -8.671686172485352

Token 46: ' add' (ID: 1147)
  Prédit: 'lt'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lt' → logprob: -0.592139482498169
    2. 'ge' → logprob: -2.092139482498169
    3. 'add' → logprob: -2.092139482498169
    4. ' lt' → logprob: -2.842139482498169
    5. ' ge' → logprob: -3.092139482498169
    6. 'mul' → logprob: -3.967139482498169
    7. ' add' → logprob: -4.21713924407959
    8. 'is' → logprob: -4.46713924407959
    9. 'item' → logprob: -4.46713924407959
    10. 'ne' → logprob: -5.34213924407959

Token 47: '

' (ID: 279)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.036301348358392715
    2. '<|end|>' → logprob: -4.161301136016846
    3. ',
' → logprob: -5.036301136016846
    4. '
' → logprob: -5.036301136016846
    5. 'import' → logprob: -5.786301136016846
    6. ' ' → logprob: -6.411301136016846
    7. '' → logprob: -7.911301136016846
    8. '

' → logprob: -8.411301612854004
    9. 'def' → logprob: -8.411301612854004
    10. 'from' → logprob: -8.536301612854004

Token 48: 'read' (ID: 1293)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.8125278353691101
    2. ',' → logprob: -1.0625278949737549
    3. '(' → logprob: -2.437527894973755
    4. '(
' → logprob: -3.562527894973755
    5. ',
' → logprob: -3.812527894973755
    6. '#' → logprob: -3.812527894973755
    7. ')' → logprob: -4.187527656555176
    8. 'import' → logprob: -4.937527656555176
    9. '_' → logprob: -5.812527656555176
    10. '
' → logprob: -6.062527656555176

Token 49: 'line' (ID: 1137)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1238962709903717
    2. ')' → logprob: -2.498896360397339
    3. ' =' → logprob: -4.87389612197876
    4. '()' → logprob: -4.87389612197876
    5. '_line' → logprob: -5.49889612197876
    6. '<|end|>' → logprob: -6.12389612197876
    7. '_' → logprob: -6.37389612197876
    8. '_input' → logprob: -6.37389612197876
    9. 'line' → logprob: -6.62389612197876
    10. '=' → logprob: -6.74889612197876

Token 50: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.22466808557510376
    2. '=' → logprob: -1.974668025970459
    3. ' =' → logprob: -2.974668025970459
    4. ')' → logprob: -5.849668025970459
    5. '()' → logprob: -5.849668025970459
    6. '<|end|>' → logprob: -5.974668025970459
    7. '(
' → logprob: -7.224668025970459
    8. '.' → logprob: -7.599668025970459
    9. ',' → logprob: -7.599668025970459
    10. ' (' → logprob: -7.724668025970459

Token 51: ' sys' (ID: 12228)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.0009181279456242919
    2. ' sys' → logprob: -7.000917911529541
    3. 'input' → logprob: -13.0009183883667
    4. 'lambda' → logprob: -13.1259183883667
    5. '	sys' → logprob: -13.6259183883667
    6. '=sys' → logprob: -14.1259183883667
    7. '(sys' → logprob: -14.8759183883667
    8. 'stdin' → logprob: -17.250917434692383
    9. '_sys' → logprob: -18.625917434692383
    10. 'system' → logprob: -19.500917434692383

Token 52: '.stdin' (ID: 93480)
  Prédit: '.stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdin' → logprob: -0.016056658700108528
    2. '.' → logprob: -4.266056537628174
    3. '.readline' → logprob: -6.766056537628174
    4. '.stdout' → logprob: -7.516056537628174
    5. '.argv' → logprob: -8.891057014465332
    6. ' .' → logprob: -10.766057014465332
    7. '.std' → logprob: -11.391057014465332
    8. '.input' → logprob: -11.766057014465332
    9. '.stderr' → logprob: -12.891057014465332
    10. '.path' → logprob: -12.891057014465332

Token 53: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.0004044554370921105
    2. '.' → logprob: -9.000404357910156
    3. '.buffer' → logprob: -9.250404357910156
    4. '.read' → logprob: -9.250404357910156
    5. 'read' → logprob: -10.000404357910156
    6. 'buffer' → logprob: -10.125404357910156
    7. '.readlines' → logprob: -12.875404357910156
    8. 'reader' → logprob: -14.875404357910156
    9. ' readline' → logprob: -16.750404357910156
    10. '```' → logprob: -16.875404357910156

Token 54: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.4518100917339325
    2. '()' → logprob: -1.3268101215362549
    3. '(' → logprob: -3.951810121536255
    4. '' → logprob: -4.326809883117676
    5. '\n' → logprob: -4.326809883117676
    6. '(
' → logprob: -4.701809883117676
    7. 'def' → logprob: -4.826809883117676
    8. '

' → logprob: -4.826809883117676
    9. ')' → logprob: -5.326809883117676
    10. ',' → logprob: -5.701809883117676

Token 55: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.23370887339115143
    2. 'n' → logprob: -1.9837088584899902
    3. 'a' → logprob: -3.8587088584899902
    4. '
' → logprob: -3.9837088584899902
    5. 'class' → logprob: -5.35870885848999
    6. 'data' → logprob: -5.60870885848999
    7. '```' → logprob: -5.60870885848999
    8. 's' → logprob: -5.98370885848999
    9. '\n' → logprob: -5.98370885848999
    10. 'd' → logprob: -6.10870885848999

Token 56: ' check' (ID: 2371)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.06349503248929977
    2. '_' → logprob: -3.438494920730591
    3. ' main' → logprob: -4.06349515914917
    4. ' _' → logprob: -5.06349515914917
    5. ' solve' → logprob: -5.81349515914917
    6. ' space' → logprob: -7.18849515914917
    7. ' solution' → logprob: -8.438494682312012
    8. ' split' → logprob: -8.563494682312012
    9. ' ' → logprob: -8.688494682312012
    10. ' my' → logprob: -8.688494682312012

Token 57: '(A' (ID: 10706)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5928759574890137
    2. '_' → logprob: -0.9678759574890137
    3. '_space' → logprob: -4.342875957489014
    4. '_parent' → logprob: -4.717875957489014
    5. '_size' → logprob: -5.592875957489014
    6. '_equal' → logprob: -5.717875957489014
    7. '_overlap' → logprob: -5.717875957489014
    8. '_in' → logprob: -6.342875957489014
    9. '_pal' → logprob: -6.467875957489014
    10. '_valid' → logprob: -6.592875957489014

Token 58: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.07169727236032486
    2. '):' → logprob: -2.696697235107422
    3. ' ,' → logprob: -6.946697235107422
    4. ')' → logprob: -8.446697235107422
    5. ':' → logprob: -8.446697235107422
    6. ' ):' → logprob: -8.821697235107422
    7. '[' → logprob: -9.446697235107422
    8. '[]):' → logprob: -11.071697235107422
    9. ',n' → logprob: -11.196697235107422
    10. ',p' → logprob: -11.446697235107422

Token 59: ' B' (ID: 418)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -2.00044846534729
    2. ' k' → logprob: -2.12544846534729
    3. ' x' → logprob: -2.25044846534729
    4. 'x' → logprob: -2.50044846534729
    5. ' K' → logprob: -2.75044846534729
    6. ' B' → logprob: -2.75044846534729
    7. 'B' → logprob: -3.00044846534729
    8. ' M' → logprob: -3.12544846534729
    9. ' mid' → logprob: -3.12544846534729
    10. 'K' → logprob: -3.25044846534729

Token 60: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.035268355160951614
    2. ',' → logprob: -3.4102683067321777
    3. ')' → logprob: -6.535268306732178
    4. ' ):' → logprob: -9.410268783569336
    5. ':' → logprob: -10.660268783569336
    6. '):
' → logprob: -11.035268783569336
    7. ' ,' → logprob: -11.535268783569336
    8. '[]):' → logprob: -11.910268783569336
    9. '=' → logprob: -12.410268783569336
    10. '[' → logprob: -12.410268783569336

Token 61: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18995024263858795
    2. ':' → logprob: -1.9399502277374268
    3. '    ' → logprob: -5.314950466156006
    4. ' (' → logprob: -5.439950466156006
    5. '():' → logprob: -5.814950466156006
    6. '(' → logprob: -5.814950466156006
    7. '):' → logprob: -5.939950466156006
    8. '    
' → logprob: -5.939950466156006
    9. ' :' → logprob: -6.314950466156006
    10. ' ' → logprob: -6.814950466156006

Token 62: ' SA' (ID: 19609)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.8055005073547363
    2. ' for' → logprob: -1.0555005073547363
    3. '   ' → logprob: -2.5555005073547363
    4. 'n' → logprob: -2.9305005073547363
    5. ' return' → logprob: -3.0555005073547363
    6. 'for' → logprob: -4.305500507354736
    7. ' if' → logprob: -5.805500507354736
    8. ' l' → logprob: -6.180500507354736
    9. 'return' → logprob: -6.305500507354736
    10. ' s' → logprob: -6.930500507354736

Token 63: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5936796069145203
    2. '=' → logprob: -1.093679666519165
    3. ',' → logprob: -2.468679666519165
    4. '==' → logprob: -5.093679428100586
    5. ' ==' → logprob: -5.468679428100586
    6. '.' → logprob: -5.718679428100586
    7. '   ' → logprob: -6.343679428100586
    8. ' ' → logprob: -6.593679428100586
    9. 'S' → logprob: -6.718679428100586
    10. 'lice' → logprob: -6.843679428100586

Token 64: ' SB' (ID: 41915)
  Prédit: 'SB'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'SB' → logprob: -0.28234219551086426
    2. ' SB' → logprob: -1.4073421955108643
    3. '_SB' → logprob: -8.032341957092285
    4. 'len' → logprob: -8.407341957092285
    5. ' len' → logprob: -8.782341957092285
    6. 'B' → logprob: -9.657341957092285
    7. ' ' → logprob: -9.907341957092285
    8. ' =' → logprob: -10.094841957092285
    9. 'sb' → logprob: -10.094841957092285
    10. ' B' → logprob: -10.469841957092285

Token 65: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4741838574409485
    2. '=' → logprob: -0.9741838574409485
    3. ',' → logprob: -9.349184036254883
    4. '=len' → logprob: -11.724184036254883
    5. '=set' → logprob: -12.224184036254883
    6. '   ' → logprob: -13.099184036254883
    7. '=int' → logprob: -14.224184036254883
    8. ' ' → logprob: -14.599184036254883
    9. '    ' → logprob: -14.599184036254883
    10. '=sum' → logprob: -14.724184036254883

Token 66: ' map' (ID: 4014)
  Prédit: ' set'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' set' → logprob: -1.2598135471343994
    2. 'set' → logprob: -1.7598135471343994
    3. ' map' → logprob: -2.0098135471343994
    4. 'sum' → logprob: -2.7598135471343994
    5. ' sum' → logprob: -2.7598135471343994
    6. ' list' → logprob: -3.1348135471343994
    7. 'map' → logprob: -3.2598135471343994
    8. ' sorted' → logprob: -3.2598135471343994
    9. 'sorted' → logprob: -3.5098135471343994
    10. ' accumulate' → logprob: -3.8848135471343994

Token 67: '(sorted' (ID: 92488)
  Prédit: '(sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(sum' → logprob: -0.3446093499660492
    2. '(len' → logprob: -1.9696093797683716
    3. '(int' → logprob: -2.844609260559082
    4. '(add' → logprob: -2.969609260559082
    5. '(lambda' → logprob: -4.094609260559082
    6. '(str' → logprob: -4.344609260559082
    7. '(' → logprob: -5.344609260559082
    8. '(list' → logprob: -6.469609260559082
    9. '(ord' → logprob: -6.469609260559082
    10. '(sorted' → logprob: -6.844609260559082

Token 68: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.05517427623271942
    2. '(A' → logprob: -3.8051743507385254
    3. ',A' → logprob: -3.9301743507385254
    4. ',(' → logprob: -5.555174350738525
    5. ' ,' → logprob: -5.680174350738525
    6. '(' → logprob: -5.805174350738525
    7. ')' → logprob: -8.055173873901367
    8. ',B' → logprob: -8.430173873901367
    9. ',set' → logprob: -8.430173873901367
    10. ',[' → logprob: -8.805173873901367

Token 69: ' (' (ID: 350)
  Prédit: '(A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.04761815816164017
    2. '[A' → logprob: -3.4226181507110596
    3. '([' → logprob: -5.172618389129639
    4. '[' → logprob: -5.547618389129639
    5. '(' → logprob: -5.672618389129639
    6. ' (' → logprob: -7.547618389129639
    7. '(lambda' → logprob: -9.17261791229248
    8. '(B' → logprob: -9.17261791229248
    9. '   ' → logprob: -10.92261791229248
    10. '(abs' → logprob: -11.04761791229248

Token 70: 'A' (ID: 32)
  Prédit: '(A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.06321173161268234
    2. '[A' → logprob: -2.813211679458618
    3. '([' → logprob: -7.188211917877197
    4. '[' → logprob: -8.563211441040039
    5. 'A' → logprob: -9.063211441040039
    6. ' (' → logprob: -9.938211441040039
    7. '(' → logprob: -10.188211441040039
    8. '   ' → logprob: -10.813211441040039
    9. '((' → logprob: -11.313211441040039
    10. ')' → logprob: -11.563211441040039

Token 71: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -3.011373155459296e-05
    2. ',B' → logprob: -10.875030517578125
    3. ' ,' → logprob: -11.500030517578125
    4. 'B' → logprob: -14.125030517578125
    5. ',
' → logprob: -16.000030517578125
    6. '),' → logprob: -16.500030517578125
    7. ' B' → logprob: -17.250030517578125
    8. ',b' → logprob: -17.625030517578125
    9. '[::-' → logprob: -17.875030517578125
    10. '(),' → logprob: -17.875030517578125

Token 72: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.08906248211860657
    2. ' B' → logprob: -2.464062452316284
    3. '   ' → logprob: -9.464062690734863
    4. ' ' → logprob: -10.464062690734863
    5. '  ' → logprob: -11.839062690734863
    6. '[B' → logprob: -13.214062690734863
    7. 'b' → logprob: -13.464062690734863
    8. '	B' → logprob: -13.589062690734863
    9. '    ' → logprob: -14.089062690734863
    10. ')' → logprob: -14.401562690734863

Token 73: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.026703376322984695
    2. '))
' → logprob: -3.651703357696533
    3. '))

' → logprob: -8.401703834533691
    4. ' ))' → logprob: -9.276703834533691
    5. ')' → logprob: -10.401703834533691
    6. '));' → logprob: -10.901703834533691
    7. '))
' → logprob: -11.401703834533691
    8. ' ))
' → logprob: -11.526703834533691
    9. ')))' → logprob: -12.651703834533691
    10. '),' → logprob: -13.026703834533691

Token 74: '    
' (ID: 1944)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.21184785664081573
    2. '   ' → logprob: -2.5868477821350098
    3. ')' → logprob: -2.8368477821350098
    4. ')
' → logprob: -3.8368477821350098
    5. '    
' → logprob: -4.96184778213501
    6. 'def' → logprob: -4.96184778213501
    7. ',' → logprob: -4.96184778213501
    8. '<|end|>' → logprob: -5.96184778213501
    9. '  
' → logprob: -6.33684778213501
    10. ' 
' → logprob: -7.08684778213501

Token 75: '   ' (ID: 271)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.6343638896942139
    2. '   ' → logprob: -1.8843638896942139
    3. ' i' → logprob: -2.259363889694214
    4. 'for' → logprob: -2.759363889694214
    5. 'i' → logprob: -3.134363889694214
    6. ' return' → logprob: -3.634363889694214
    7. ' if' → logprob: -4.384364128112793
    8. ' def' → logprob: -4.759364128112793
    9. ' l' → logprob: -4.884364128112793
    10. 'l' → logprob: -5.009364128112793

Token 76: ' #' (ID: 1069)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.34292837977409363
    2. 'i' → logprob: -2.467928409576416
    3. 'if' → logprob: -2.842928409576416
    4. 'return' → logprob: -3.342928409576416
    5. ' for' → logprob: -3.342928409576416
    6. 'n' → logprob: -4.467928409576416
    7. 'l' → logprob: -4.842928409576416
    8. 'idx' → logprob: -5.092928409576416
    9. 'j' → logprob: -5.217928409576416
    10. '   ' → logprob: -5.467928409576416

Token 77: ' ' (ID: 220)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.49867287278175354
    2. 'for' → logprob: -1.2486728429794312
    3. ' i' → logprob: -3.3736729621887207
    4. 'i' → logprob: -3.6236729621887207
    5. ' return' → logprob: -4.498672962188721
    6. 'l' → logprob: -5.623672962188721
    7. '   ' → logprob: -5.748672962188721
    8. 'return' → logprob: -5.748672962188721
    9. ' if' → logprob: -5.748672962188721
    10. 'n' → logprob: -6.123672962188721

Token 78: '1' (ID: 16)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.6762564778327942
    2. 'i' → logprob: -1.1762564182281494
    3. 'if' → logprob: -2.6762564182281494
    4. 'l' → logprob: -3.8012564182281494
    5. 'return' → logprob: -4.0512566566467285
    6. 'j' → logprob: -4.6762566566467285
    7. 'n' → logprob: -4.6762566566467285
    8. 'idx' → logprob: -4.8012566566467285
    9. 'p' → logprob: -5.1762566566467285
    10. 'pos' → logprob: -5.4262566566467285

Token 79: '.' (ID: 13)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.33744803071022034
    2. 'for' → logprob: -2.2124481201171875
    3. ' if' → logprob: -2.8374481201171875
    4. '   ' → logprob: -3.3374481201171875
    5. '.' → logprob: -4.0874481201171875
    6. '    ' → logprob: -4.8374481201171875
    7. ':' → logprob: -5.3374481201171875
    8. ' ' → logprob: -5.3374481201171875
    9. '2' → logprob: -5.7124481201171875
    10. 'st' → logprob: -5.7124481201171875

Token 80: ' Rem' (ID: 6890)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.6090162992477417
    2. ' if' → logprob: -1.3590162992477417
    3. 'for' → logprob: -2.4840164184570312
    4. 'if' → logprob: -2.9840164184570312
    5. ' all' → logprob: -4.484016418457031
    6. ' i' → logprob: -4.984016418457031
    7. ' def' → logprob: -5.484016418457031
    8. ' idx' → logprob: -5.984016418457031
    9. ' n' → logprob: -6.109016418457031
    10. ' prev' → logprob: -6.234016418457031

Token 81: 'place' (ID: 3243)
  Prédit: 'ove'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ove' → logprob: -0.5386063456535339
    2. 'ember' → logprob: -1.2886064052581787
    3. 'ain' → logprob: -2.2886064052581787
    4. 'ains' → logprob: -4.1636061668396
    5. 'aining' → logprob: -4.5386061668396
    6. 'oved' → logprob: -6.0386061668396
    7. 'a' → logprob: -6.1636061668396
    8. 'ark' → logprob: -6.2886061668396
    9. 'oves' → logprob: -6.6636061668396
    10. 'oving' → logprob: -6.7886061668396

Token 82: 'z' (ID: 89)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.2737969756126404
    2. 'ment' → logprob: -2.273797035217285
    3. 'd' → logprob: -2.648797035217285
    4. 'm' → logprob: -3.523797035217285
    5. 's' → logprob: -4.273797035217285
    6. 'ments' → logprob: -4.523797035217285
    7. ' ' → logprob: -5.398797035217285
    8. 'z' → logprob: -6.148797035217285
    9. ' A' → logprob: -6.523797035217285
    10. ' les' → logprob: -7.273797035217285

Token 83: ' la' (ID: 557)
  Prédit: ' les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.5872517824172974
    2. ' ' → logprob: -2.087251663208008
    3. ' A' → logprob: -3.087251663208008
    4. ' "' → logprob: -3.337251663208008
    5. ' la' → logprob: -3.337251663208008
    6. ' le' → logprob: -3.587251663208008
    7. '(' → logprob: -3.837251663208008
    8. ' SA' → logprob: -3.837251663208008
    9. ' all' → logprob: -4.337251663208008
    10. ' '' → logprob: -4.462251663208008

Token 84: ' comparaison' (ID: 170508)
  Prédit: ' ligne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ligne' → logprob: -1.086450219154358
    2. 'ligne' → logprob: -1.086450219154358
    3. 'prem' → logprob: -2.4614500999450684
    4. 'fonction' → logprob: -3.2114500999450684
    5. 'comment' → logprob: -3.4614500999450684
    6. ' première' → logprob: -3.8364500999450684
    7. 'def' → logprob: -4.461450099945068
    8. 's' → logprob: -4.461450099945068
    9. '   ' → logprob: -4.711450099945068
    10. 'part' → logprob: -4.711450099945068

Token 85: ' par' (ID: 686)
  Prédit: ' par'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' par' → logprob: -0.5400724411010742
    2. '   ' → logprob: -1.6650724411010742
    3. 'par' → logprob: -2.915072441101074
    4. '(' → logprob: -3.040072441101074
    5. ' ' → logprob: -4.040072441101074
    6. '(s' → logprob: -4.415072441101074
    7. 's' → logprob: -4.915072441101074
    8. ' by' → logprob: -5.040072441101074
    9. ' de' → logprob: -5.165072441101074
    10. ' des' → logprob: -5.165072441101074

Token 86: ' zip' (ID: 16216)
  Prédit: ' all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' all' → logprob: -1.160754919052124
    2. ' len' → logprob: -2.160754919052124
    3. ' la' → logprob: -2.660754919052124
    4. ' une' → logprob: -2.785754919052124
    5. ' sum' → logprob: -2.910754919052124
    6. 'all' → logprob: -3.285754919052124
    7. ' l' → logprob: -3.535754919052124
    8. ' le' → logprob: -3.535754919052124
    9. ' zip' → logprob: -3.660754919052124
    10. ' lambda' → logprob: -3.660754919052124

Token 87: ' en' (ID: 469)
  Prédit: '(S'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(S' → logprob: -0.05991441011428833
    2. '   ' → logprob: -3.3099143505096436
    3. '(' → logprob: -4.809914588928223
    4. 'for' → logprob: -5.809914588928223
    5. '(*' → logprob: -6.059914588928223
    6. '(zip' → logprob: -6.309914588928223
    7. ')' → logprob: -6.809914588928223
    8. ',' → logprob: -7.309914588928223
    9. ':' → logprob: -7.559914588928223
    10. '(
' → logprob: -7.684914588928223

Token 88: ' utilisant' (ID: 92474)
  Prédit: 'st'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'st' → logprob: -1.1530754566192627
    2. 'map' → logprob: -1.7780754566192627
    3. 'SA' → logprob: -2.1530754566192627
    4. 'it' → logprob: -2.4030754566192627
    5. 'zip' → logprob: -2.9030754566192627
    6. 'enumer' → logprob: -2.9030754566192627
    7. 'com' → logprob: -3.4030754566192627
    8. '```' → logprob: -3.7780754566192627
    9. 'sorted' → logprob: -4.153075218200684
    10. 'reverse' → logprob: -4.903075218200684

Token 89: ' st' (ID: 420)
  Prédit: 'st'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'st' → logprob: -1.0495483875274658
    2. ' st' → logprob: -2.049548387527466
    3. 'map' → logprob: -2.424548387527466
    4. 'chain' → logprob: -2.674548387527466
    5. ' itertools' → logprob: -2.799548387527466
    6. ' zip' → logprob: -2.924548387527466
    7. 'it' → logprob: -2.924548387527466
    8. 'zip' → logprob: -2.924548387527466
    9. ' map' → logprob: -2.924548387527466
    10. ' chain' → logprob: -3.424548387527466

Token 90: 'arm' (ID: 2218)
  Prédit: 'arm'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'arm' → logprob: -0.005249648820608854
    2. 'map' → logprob: -6.005249500274658
    3. '   ' → logprob: -7.505249500274658
    4. 'ar' → logprob: -8.005249977111816
    5. 'arp' → logprob: -8.130249977111816
    6. ' ' → logprob: -8.755249977111816
    7. 'zip' → logprob: -8.755249977111816
    8. '  ' → logprob: -9.067749977111816
    9. 'import' → logprob: -9.130249977111816
    10. 'a' → logprob: -9.192749977111816

Token 91: 'ap' (ID: 403)
  Prédit: 'ap'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ap' → logprob: -2.7252845029579476e-05
    2. 'map' → logprob: -11.000027656555176
    3. '   ' → logprob: -12.000027656555176
    4. ' ' → logprob: -13.875027656555176
    5. ' map' → logprob: -14.000027656555176
    6. 'app' → logprob: -14.500027656555176
    7. '  ' → logprob: -14.625027656555176
    8. '_map' → logprob: -15.125027656555176
    9. 'ап' → logprob: -15.125027656555176
    10. ' ap' → logprob: -15.250027656555176

Token 92: ',' (ID: 11)
  Prédit: '(eq'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(eq' → logprob: -0.6442759037017822
    2. 'st' → logprob: -1.8942759037017822
    3. 'eq' → logprob: -2.0192759037017822
    4. '(st' → logprob: -2.1442759037017822
    5. 'with' → logprob: -4.519275665283203
    6. ' st' → logprob: -4.644275665283203
    7. 'partial' → logprob: -4.769275665283203
    8. '(lambda' → logprob: -5.019275665283203
    9. '   ' → logprob: -5.019275665283203
    10. 'lt' → logprob: -5.019275665283203

Token 93: ' map' (ID: 4014)
  Prédit: 'eq'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'eq' → logprob: -0.4342326819896698
    2. 'le' → logprob: -1.5592327117919922
    3. ' eq' → logprob: -2.934232711791992
    4. 'lt' → logprob: -3.559232711791992
    5. 'partial' → logprob: -3.559232711791992
    6. ' partial' → logprob: -4.559232711791992
    7. '   ' → logprob: -5.059232711791992
    8. ' le' → logprob: -5.309232711791992
    9. 'gt' → logprob: -6.059232711791992
    10. 'st' → logprob: -6.434232711791992

Token 94: ',' (ID: 11)
  Prédit: '(st'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(st' → logprob: -0.9428530335426331
    2. 'st' → logprob: -1.0678529739379883
    3. '(part' → logprob: -3.0678529739379883
    4. 'partial' → logprob: -3.0678529739379883
    5. ' st' → logprob: -3.1928529739379883
    6. '   ' → logprob: -3.1928529739379883
    7. 'def' → logprob: -3.6928529739379883
    8. '(lambda' → logprob: -4.192852973937988
    9. 'eq' → logprob: -4.817852973937988
    10. '(eq' → logprob: -5.192852973937988

Token 95: ' any' (ID: 1062)
  Prédit: 'partial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'partial' → logprob: -0.4372372627258301
    2. 'st' → logprob: -1.93723726272583
    3. ' partial' → logprob: -2.06223726272583
    4. 'lambda' → logprob: -3.93723726272583
    5. ' st' → logprob: -4.06223726272583
    6. 'zip' → logprob: -4.43723726272583
    7. 'filter' → logprob: -4.56223726272583
    8. 'eq' → logprob: -5.56223726272583
    9. ' and' → logprob: -5.81223726272583
    10. ' lambda' → logprob: -5.93723726272583

Token 96: ',' (ID: 11)
  Prédit: 'st'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'st' → logprob: -0.7133473753929138
    2. '(st' → logprob: -1.4633474349975586
    3. ' st' → logprob: -2.7133474349975586
    4. '   ' → logprob: -3.0883474349975586
    5. 'def' → logprob: -3.3383474349975586
    6. ',' → logprob: -3.8383474349975586
    7. 'zip' → logprob: -4.088347434997559
    8. 'eq' → logprob: -4.463347434997559
    9. '(eq' → logprob: -4.588347434997559
    10. ')' → logprob: -4.713347434997559

Token 97: ' etc' (ID: 5178)
  Prédit: 'partial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'partial' → logprob: -0.797631025314331
    2. 'all' → logprob: -0.922631025314331
    3. 'filter' → logprob: -3.422631025314331
    4. 'zip' → logprob: -3.672631025314331
    5. 'st' → logprob: -4.04763126373291
    6. ' partial' → logprob: -4.29763126373291
    7. 'lambda' → logprob: -4.29763126373291
    8. 'any' → logprob: -4.67263126373291
    9. ' all' → logprob: -4.79763126373291
    10. 'and' → logprob: -4.79763126373291

Token 98: '.
' (ID: 558)
  Prédit: 'st'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'st' → logprob: -1.1248046159744263
    2. '   ' → logprob: -1.3748046159744263
    3. ' st' → logprob: -2.4998044967651367
    4. ' return' → logprob: -2.4998044967651367
    5. 'return' → logprob: -2.6248044967651367
    6. 'def' → logprob: -2.8748044967651367
    7. 'zip' → logprob: -3.2498044967651367
    8. 'from' → logprob: -3.9998044967651367
    9. ' for' → logprob: -4.124804496765137
    10. 'for' → logprob: -4.624804496765137

Token 99: '   ' (ID: 271)
  Prédit: 'st'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'st' → logprob: -0.5445032715797424
    2. '   ' → logprob: -1.6695032119750977
    3. 'def' → logprob: -2.9195032119750977
    4. 'eq' → logprob: -3.0445032119750977
    5. 'zip' → logprob: -3.2945032119750977
    6. ' st' → logprob: -3.4195032119750977
    7. ' eq' → logprob: -4.669503211975098
    8. 'partial' → logprob: -4.919503211975098
    9. 'return' → logprob: -5.169503211975098
    10. 'diff' → logprob: -5.419503211975098

Token 100: ' if' (ID: 538)
  Prédit: 'st'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'st' → logprob: -0.3605296313762665
    2. '   ' → logprob: -2.360529661178589
    3. ' st' → logprob: -2.735529661178589
    4. 'eq' → logprob: -3.235529661178589
    5. 'partial' → logprob: -3.485529661178589
    6. 'def' → logprob: -3.985529661178589
    7. 'zip' → logprob: -4.11052942276001
    8. ' eq' → logprob: -4.61052942276001
    9. ' partial' → logprob: -5.11052942276001
    10. 'le' → logprob: -5.61052942276001

Token 101: ' any' (ID: 1062)
  Prédit: 'any'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'any' → logprob: -0.06393271684646606
    2. ' any' → logprob: -3.3139326572418213
    3. 'not' → logprob: -3.9389326572418213
    4. ' not' → logprob: -5.4389328956604
    5. '   ' → logprob: -6.5639328956604
    6. 'st' → logprob: -9.063932418823242
    7. ' ' → logprob: -9.313932418823242
    8. ' st' → logprob: -10.063932418823242
    9. '(any' → logprob: -10.313932418823242
    10. '  ' → logprob: -11.438932418823242

Token 102: '(st' (ID: 4065)
  Prédit: '(st'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(st' → logprob: -0.08994624018669128
    2. '(part' → logprob: -2.4649462699890137
    3. '(' → logprob: -8.089945793151855
    4. 'partial' → logprob: -8.464945793151855
    5. '(map' → logprob: -9.089945793151855
    6. '(gt' → logprob: -9.339945793151855
    7. '(lambda' → logprob: -9.464945793151855
    8. '((' → logprob: -9.964945793151855
    9. 'st' → logprob: -10.089945793151855
    10. '(
' → logprob: -10.339945793151855

Token 103: 'arm' (ID: 2218)
  Prédit: 'arm'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'arm' → logprob: -0.0004436587623786181
    2. 'map' → logprob: -7.750443458557129
    3. 'ar' → logprob: -11.875443458557129
    4. 'arp' → logprob: -12.625443458557129
    5. '   ' → logprob: -13.625443458557129
    6. 'am' → logprob: -14.375443458557129
    7. ' ' → logprob: -14.875443458557129
    8. ' map' → logprob: -16.125444412231445
    9. '  ' → logprob: -16.375444412231445
    10. ' arm' → logprob: -16.500444412231445

Token 104: 'ap' (ID: 403)
  Prédit: 'ap'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ap' → logprob: -4.961759259458631e-06
    2. 'map' → logprob: -12.375004768371582
    3. '   ' → logprob: -14.625004768371582
    4. 'atch' → logprob: -16.2500057220459
    5. ' ' → logprob: -17.3750057220459
    6. 'app' → logprob: -17.7500057220459
    7. '(ap' → logprob: -17.8750057220459
    8. '
' → logprob: -18.1250057220459
    9. '(map' → logprob: -18.1250057220459
    10. 'apped' → logprob: -18.3750057220459

Token 105: '(gt' (ID: 165888)
  Prédit: '(gt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(gt' → logprob: -0.4716896116733551
    2. '(le' → logprob: -1.7216895818710327
    3. '(' → logprob: -1.9716895818710327
    4. '(ne' → logprob: -3.9716897010803223
    5. '(eq' → logprob: -4.096689701080322
    6. '(lambda' → logprob: -4.221689701080322
    7. 'lt' → logprob: -5.221689701080322
    8. 'gt' → logprob: -7.221689701080322
    9. 'ne' → logprob: -7.721689701080322
    10. '(gr' → logprob: -8.471689224243164

Token 106: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.002057950245216489
    2. ' ,' → logprob: -7.252058029174805
    3. ',(' → logprob: -7.252058029174805
    4. '   ' → logprob: -8.377058029174805
    5. '(S' → logprob: -9.252058029174805
    6. 'zip' → logprob: -9.502058029174805
    7. '(zip' → logprob: -9.627058029174805
    8. '),' → logprob: -10.252058029174805
    9. '(' → logprob: -10.502058029174805
    10. ' ' → logprob: -11.252058029174805

Token 107: ' zip' (ID: 16216)
  Prédit: 'zip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'zip' → logprob: -0.05325780808925629
    2. ' zip' → logprob: -3.678257703781128
    3. 'SA' → logprob: -4.303257942199707
    4. '(zip' → logprob: -4.678257942199707
    5. '   ' → logprob: -6.428257942199707
    6. '(S' → logprob: -6.803257942199707
    7. ' SA' → logprob: -8.803257942199707
    8. 'chain' → logprob: -8.928257942199707
    9. '  ' → logprob: -9.053257942199707
    10. ')' → logprob: -9.053257942199707

Token 108: '(S' (ID: 6181)
  Prédit: '(S'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(S' → logprob: -0.00022237090161070228
    2. '   ' → logprob: -9.500222206115723
    3. '((' → logprob: -9.625222206115723
    4. '(' → logprob: -10.250222206115723
    5. 'SA' → logprob: -10.625222206115723
    6. ' ' → logprob: -11.875222206115723
    7. '  ' → logprob: -12.625222206115723
    8. ' (' → logprob: -12.750222206115723
    9. 'S' → logprob: -13.250222206115723
    10. ')(' → logprob: -13.750222206115723

Token 109: 'A' (ID: 32)
  Prédit: 'A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.0002434699417790398
    2. 'SA' → logprob: -8.750243186950684
    3. ' A' → logprob: -10.625243186950684
    4. 'B' → logprob: -11.500243186950684
    5. '(A' → logprob: -11.625243186950684
    6. '(' → logprob: -11.750243186950684
    7. '[' → logprob: -12.625243186950684
    8. '_A' → logprob: -12.750243186950684
    9. 'Q' → logprob: -13.250243186950684
    10. 'a' → logprob: -13.375243186950684

Token 110: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0034756974782794714
    2. ' ,' → logprob: -5.878475666046143
    3. ',B' → logprob: -7.878475666046143
    4. ',S' → logprob: -8.6284761428833
    5. '   ' → logprob: -10.1284761428833
    6. '[' → logprob: -11.1284761428833
    7. ',
' → logprob: -11.5034761428833
    8. 'SB' → logprob: -11.6284761428833
    9. '  ' → logprob: -12.3784761428833
    10. ' ' → logprob: -12.6909761428833

Token 111: ' SB' (ID: 41915)
  Prédit: 'SB'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'SB' → logprob: -0.0028247274458408356
    2. ' SB' → logprob: -5.877824783325195
    3. ' ' → logprob: -11.627824783325195
    4. '   ' → logprob: -12.127824783325195
    5. '_SB' → logprob: -12.877824783325195
    6. 'sb' → logprob: -14.002824783325195
    7. '  ' → logprob: -14.377824783325195
    8. ')' → logprob: -15.752824783325195
    9. ',' → logprob: -15.877824783325195
    10. 'SA' → logprob: -16.127824783325195

Token 112: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.027533847838640213
    2. ')))' → logprob: -3.652533769607544
    3. ')):' → logprob: -7.152534008026123
    4. '))))' → logprob: -8.527533531188965
    5. ')' → logprob: -9.277533531188965
    6. '   ' → logprob: -9.902533531188965
    7. ' ))' → logprob: -10.152533531188965
    8. ')));' → logprob: -10.402533531188965
    9. '):' → logprob: -11.777533531188965
    10. '()))' → logprob: -12.152533531188965

Token 113: '):
' (ID: 1883)
  Prédit: ')):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')):' → logprob: -0.06635864824056625
    2. ')):
' → logprob: -2.9413585662841797
    3. '))' → logprob: -4.56635856628418
    4. ')):
' → logprob: -7.69135856628418
    5. '   ' → logprob: -8.31635856628418
    6. '):' → logprob: -8.69135856628418
    7. ' ' → logprob: -10.06635856628418
    8. '       ' → logprob: -10.31635856628418
    9. ':' → logprob: -10.94135856628418
    10. ' ))' → logprob: -10.94135856628418

Token 114: '       ' (ID: 309)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.015741880983114243
    2. '):
' → logprob: -4.89074182510376
    3. '       ' → logprob: -5.39074182510376
    4. ':' → logprob: -6.39074182510376
    5. ')' → logprob: -7.26574182510376
    6. '   ' → logprob: -7.51574182510376
    7. ' ):' → logprob: -7.76574182510376
    8. ',' → logprob: -10.390742301940918
    9. '[]):' → logprob: -10.890742301940918
    10. '):
' → logprob: -11.140742301940918

Token 115: ' return' (ID: 622)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.3256605565547943
    2. ' return' → logprob: -1.5756605863571167
    3. 'return' (adapté à ' return') → logprob: -2.825660467147827
    4. '           ' → logprob: -4.575660705566406
    5. '
' → logprob: -7.200660705566406
    6. '   ' → logprob: -8.325660705566406
    7. ' ' → logprob: -9.700660705566406
    8. ':return' → logprob: -9.825660705566406
    9. '        
' → logprob: -9.950660705566406
    10. '               ' → logprob: -10.200660705566406

Token 116: ' '' (ID: 461)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.2526416778564453
    2. ' False' → logprob: -1.5026416778564453
    3. 'None' → logprob: -8.002641677856445
    4. ' None' → logprob: -8.877641677856445
    5. 'True' → logprob: -9.252641677856445
    6. '"' → logprob: -10.002641677856445
    7. ' True' → logprob: -10.252641677856445
    8. ' ' → logprob: -10.627641677856445
    9. '(False' → logprob: -10.627641677856445
    10. '  ' → logprob: -13.002641677856445

Token 117: 'No' (ID: 3160)
  Prédit: 'NO'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'NO' → logprob: -0.410226970911026
    2. 'No' → logprob: -2.035227060317993
    3. 'KO' → logprob: -3.160227060317993
    4. 'False' → logprob: -3.410227060317993
    5. 'IMP' → logprob: -3.410227060317993
    6. '-' → logprob: -3.910227060317993
    7. 'B' → logprob: -4.285226821899414
    8. '0' → logprob: -4.535226821899414
    9. 'N' → logprob: -4.910226821899414
    10. 'NE' → logprob: -5.035226821899414

Token 118: ''
' (ID: 2207)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.034660786390304565
    2. ''
' → logprob: -3.409660816192627
    3. '\n' → logprob: -7.159660816192627
    4. ''
' → logprob: -8.784660339355469
    5. '')' → logprob: -9.659660339355469
    6. ' '' → logprob: -11.784660339355469
    7. ''

' → logprob: -13.409660339355469
    8. '   ' → logprob: -13.534660339355469
    9. ''\' → logprob: -13.534660339355469
    10. '"' → logprob: -13.534660339355469

Token 119: '    
' (ID: 1944)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8459154963493347
    2. '    
' → logprob: -1.3459155559539795
    3. '<|end|>' → logprob: -1.5959155559539795
    4. ' 
' → logprob: -3.4709155559539795
    5. '  
' → logprob: -3.5959155559539795
    6. '
' → logprob: -3.9709155559539795
    7. ')' → logprob: -4.9709153175354
    8. '   
' → logprob: -5.2209153175354
    9. '\n' → logprob: -5.4709153175354
    10. ' return' → logprob: -5.5959153175354

Token 120: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.025783339515328407
    2. '    
' → logprob: -4.025783538818359
    3. '<|end|>' → logprob: -5.275783538818359
    4. '  
' → logprob: -7.775783538818359
    5. ')' → logprob: -8.15078353881836
    6. ' 
' → logprob: -8.27578353881836
    7. '    ' → logprob: -8.40078353881836
    8. ' ' → logprob: -8.40078353881836
    9. '  ' → logprob: -8.52578353881836
    10. ' if' → logprob: -8.90078353881836

Token 121: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.44101351499557495
    2. '   ' → logprob: -1.3160135746002197
    3. ' return' → logprob: -2.8160135746002197
    4. 'if' → logprob: -3.9410135746002197
    5. ' if' → logprob: -5.066013336181641
    6. '    
' → logprob: -7.191013336181641
    7. ' ' → logprob: -7.316013336181641
    8. 'def' → logprob: -7.816013336181641
    9. 'for' → logprob: -8.19101333618164
    10. '  ' → logprob: -8.56601333618164

Token 122: ' ' (ID: 220)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.1131459474563599
    2. '   ' → logprob: -1.3631459474563599
    3. 'return' → logprob: -1.4881459474563599
    4. ' if' → logprob: -2.2381458282470703
    5. ' return' → logprob: -2.6131458282470703
    6. ' ' → logprob: -5.36314582824707
    7. '  ' → logprob: -6.86314582824707
    8. '#' → logprob: -6.86314582824707
    9. 'def' → logprob: -6.86314582824707
    10. ' #' → logprob: -8.11314582824707

Token 123: '2' (ID: 17)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.33609071373939514
    2. 'return' → logprob: -1.3360906839370728
    3. '   ' → logprob: -4.211090564727783
    4. ' if' → logprob: -6.086090564727783
    5. '#' → logprob: -6.211090564727783
    6. ' return' → logprob: -6.586090564727783
    7. ' ' → logprob: -7.461090564727783
    8. 'elif' → logprob: -7.586090564727783
    9. 'for' → logprob: -8.836091041564941
    10. '  ' → logprob: -8.836091041564941

Token 124: '.' (ID: 13)
  Prédit: '.'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.10092819482088089
    2. '   ' → logprob: -2.35092830657959
    3. 'def' → logprob: -7.97592830657959
    4. ' if' → logprob: -9.22592830657959
    5. ')' → logprob: -9.60092830657959
    6. 'elif' → logprob: -9.97592830657959
    7. ' elif' → logprob: -10.35092830657959
    8. '.
' → logprob: -10.60092830657959
    9. ' .' → logprob: -10.60092830657959
    10. '  ' → logprob: -10.72592830657959

Token 125: ' Vér' (ID: 159169)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.398317813873291
    2. 'return' → logprob: -2.523317813873291
    3. 'for' → logprob: -2.773317813873291
    4. '   ' → logprob: -3.523317813873291
    5. ' if' → logprob: -3.523317813873291
    6. 'result' → logprob: -3.523317813873291
    7. ' return' → logprob: -4.398317813873291
    8. '#' → logprob: -4.523317813873291
    9. 'res' → logprob: -4.523317813873291
    10. 'count' → logprob: -4.898317813873291

Token 126: 'ifiez' (ID: 143917)
  Prédit: 'ifiez'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifiez' → logprob: -0.008008673787117004
    2. 'if' → logprob: -5.5080084800720215
    3. 'ify' → logprob: -6.2580084800720215
    4. 'ifier' → logprob: -7.0080084800720215
    5. 'ifie' → logprob: -7.3830084800720215
    6. 'ife' → logprob: -9.75800895690918
    7. '```' → logprob: -9.88300895690918
    8. 'f' → logprob: -10.00800895690918
    9. 'ification' → logprob: -10.25800895690918
    10. 'sum' → logprob: -10.50800895690918

Token 127: ' all' (ID: 722)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.39863985776901245
    2. 'if' → logprob: -2.5236399173736572
    3. ' all' → logprob: -2.5236399173736572
    4. 'len' → logprob: -3.1486399173736572
    5. 'all' → logprob: -3.2736399173736572
    6. ' not' → logprob: -3.7736399173736572
    7. '(len' → logprob: -4.148639678955078
    8. 'not' → logprob: -4.398639678955078
    9. ' len' → logprob: -4.523639678955078
    10. ' le' → logprob: -5.148639678955078

Token 128: '(a' (ID: 6271)
  Prédit: '(st'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(st' → logprob: -0.00012368128227535635
    2. '   ' → logprob: -9.750123977661133
    3. '(' → logprob: -10.500123977661133
    4. '(
' → logprob: -11.750123977661133
    5. ',' → logprob: -11.875123977661133
    6. ' ' → logprob: -12.125123977661133
    7. '(S' → logprob: -12.375123977661133
    8. '(s' → logprob: -13.500123977661133
    9. '  ' → logprob: -13.625123977661133
    10. '       ' → logprob: -13.750123977661133

Token 129: ' <=' (ID: 5017)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.5301794409751892
    2. 'le' → logprob: -1.405179500579834
    3. '(le' → logprob: -2.655179500579834
    4. ',' → logprob: -2.905179500579834
    5. '<=' → logprob: -3.780179500579834
    6. ' <=' → logprob: -5.155179500579834
    7. '_le' → logprob: -6.030179500579834
    8. '(st' → logprob: -6.280179500579834
    9. 'eq' → logprob: -6.530179500579834
    10. '(S' → logprob: -6.780179500579834

Token 130: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.009525509551167488
    2. ' b' → logprob: -4.884525299072266
    3. 'st' → logprob: -7.509525299072266
    4. 'sb' → logprob: -7.884525299072266
    5. '(b' → logprob: -8.259525299072266
    6. ',' → logprob: -8.509525299072266
    7. ' st' → logprob: -8.759525299072266
    8. 's' → logprob: -9.134525299072266
    9. ' ' → logprob: -9.259525299072266
    10. '   ' → logprob: -9.509525299072266

Token 131: ')' (ID: 8)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.018268637359142303
    2. ' for' → logprob: -4.518268585205078
    3. 'for' → logprob: -5.393268585205078
    4. '   ' → logprob: -6.643268585205078
    5. ' ,' → logprob: -7.018268585205078
    6. ')' → logprob: -8.768268585205078
    7. '(S' → logprob: -9.893268585205078
    8. '  ' → logprob: -10.018268585205078
    9. ' ' → logprob: -10.018268585205078
    10. '(st' → logprob: -10.143268585205078

Token 132: ' en' (ID: 469)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.023407474160194397
    2. ' if' → logprob: -3.898407459259033
    3. 'if' → logprob: -6.523407459259033
    4. ',' → logprob: -7.898407459259033
    5. 'def' → logprob: -8.273407936096191
    6. ' =' → logprob: -8.898407936096191
    7. '(S' → logprob: -9.023407936096191
    8. '(st' → logprob: -9.148407936096191
    9. '  ' → logprob: -9.773407936096191
    10. '(' → logprob: -10.023407936096191

Token 133: ' utilisant' (ID: 92474)
  Prédit: 'using'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'using' → logprob: -0.3966544270515442
    2. ' using' → logprob: -1.6466543674468994
    3. 'all' → logprob: -2.3966543674468994
    4. 'st' → logprob: -4.1466546058654785
    5. 'any' → logprob: -4.3966546058654785
    6. ' all' → logprob: -5.0216546058654785
    7. ' st' → logprob: -5.5216546058654785
    8. ' any' → logprob: -6.1466546058654785
    9. ' utilisant' → logprob: -6.7716546058654785
    10. 'util' → logprob: -7.6466546058654785

Token 134: ' reduce' (ID: 10389)
  Prédit: 'st'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'st' → logprob: -0.5430487394332886
    2. 'all' → logprob: -0.9180487394332886
    3. ' st' → logprob: -4.668048858642578
    4. 'partial' → logprob: -5.293048858642578
    5. ' all' → logprob: -5.668048858642578
    6. '   ' → logprob: -6.918048858642578
    7. 'not' → logprob: -8.418048858642578
    8. 'map' → logprob: -8.793048858642578
    9. ' partial' → logprob: -9.168048858642578
    10. 'any' → logprob: -9.293048858642578

Token 135: ' et' (ID: 859)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.35802555084228516
    2. '   ' → logprob: -1.2330255508422852
    3. '(re' → logprob: -5.108025550842285
    4. '(st' → logprob: -7.233025550842285
    5. ' and' → logprob: -7.733025550842285
    6. ' ,' → logprob: -7.858025550842285
    7. ' =' → logprob: -8.108025550842285
    8. 'def' → logprob: -8.233025550842285
    9. '=' → logprob: -8.358025550842285
    10. ' (' → logprob: -8.483025550842285

Token 136: ' map' (ID: 4014)
  Prédit: 'partial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'partial' → logprob: -0.02729804813861847
    2. ' partial' → logprob: -4.0272979736328125
    3. 'le' → logprob: -4.7772979736328125
    4. 'lt' → logprob: -8.527297973632812
    5. ' le' → logprob: -9.027297973632812
    6. 'part' → logprob: -9.277297973632812
    7. '(part' → logprob: -9.277297973632812
    8. 'lambda' → logprob: -10.027297973632812
    9. 'eq' → logprob: -10.152297973632812
    10. 'st' → logprob: -10.527297973632812

Token 137: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0011908221058547497
    2. ' if' → logprob: -7.251190662384033
    3. 'if' → logprob: -8.376191139221191
    4. ',' → logprob: -9.251191139221191
    5. '
' → logprob: -9.251191139221191
    6. '    
' → logprob: -10.876191139221191
    7. 'def' → logprob: -11.876191139221191
    8. '```' → logprob: -11.876191139221191
    9. 'import' → logprob: -12.501191139221191
    10. 'return' → logprob: -12.626191139221191

Token 138: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00841823685914278
    2. ' if' → logprob: -5.383418083190918
    3. 'if' → logprob: -5.633418083190918
    4. '
' → logprob: -8.633418083190918
    5. '    
' → logprob: -11.133418083190918
    6. '```' → logprob: -11.258418083190918
    7. 'return' → logprob: -12.883418083190918
    8. 'from' → logprob: -13.008418083190918
    9. ' return' → logprob: -14.133418083190918
    10. 'import' → logprob: -14.258418083190918

Token 139: ' le' (ID: 505)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.6362131834030151
    2. ' if' → logprob: -1.3862131834030151
    3. '   ' → logprob: -1.5112131834030151
    4. '```' → logprob: -11.511213302612305
    5. 'return' → logprob: -11.636213302612305
    6. 'from' → logprob: -11.761213302612305
    7. '
' → logprob: -12.136213302612305
    8. 'result' → logprob: -12.761213302612305
    9. ' return' → logprob: -12.886213302612305
    10. 'def' → logprob: -13.136213302612305

Token 140: '_checker' (ID: 158562)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.8493627905845642
    2. '_result' → logprob: -0.8493627905845642
    3. 'def' → logprob: -3.474362850189209
    4. 'result' → logprob: -3.724362850189209
    5. '=' → logprob: -3.974362850189209
    6. 't' → logprob: -4.224362850189209
    7. 's' → logprob: -4.474362850189209
    8. 'n' → logprob: -4.599362850189209
    9. '   ' → logprob: -5.099362850189209
    10. ' ' → logprob: -5.224362850189209

Token 141: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.05935165658593178
    2. '=' → logprob: -3.184351682662964
    3. '   ' → logprob: -4.184351444244385
    4. 'r' → logprob: -7.184351444244385
    5. 'd' → logprob: -9.059351921081543
    6. ' ' → logprob: -9.934351921081543
    7. '  ' → logprob: -10.934351921081543
    8. 'er' → logprob: -12.059351921081543
    9. 'def' → logprob: -12.059351921081543
    10. ',' → logprob: -12.184351921081543

Token 142: ' lambda' (ID: 27871)
  Prédit: 'partial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'partial' → logprob: -0.4665747880935669
    2. 'reduce' → logprob: -1.091574788093567
    3. 'lambda' → logprob: -3.4665746688842773
    4. ' partial' → logprob: -5.716574668884277
    5. '   ' → logprob: -6.591574668884277
    6. 'all' → logprob: -7.341574668884277
    7. ' reduce' → logprob: -8.216574668884277
    8. ' lambda' → logprob: -8.341574668884277
    9. ' ' → logprob: -9.966574668884277
    10. '(part' → logprob: -10.716574668884277

Token 143: ' x' (ID: 1215)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.8855075836181641
    2. 'lambda' → logprob: -1.385507583618164
    3. 'A' → logprob: -2.135507583618164
    4. ' a' → logprob: -2.635507583618164
    5. 'SA' → logprob: -3.260507583618164
    6. ' lambda' → logprob: -3.510507583618164
    7. ':' → logprob: -3.885507583618164
    8. ' A' → logprob: -4.510507583618164
    9. ' SA' → logprob: -4.635507583618164
    10. 'x' → logprob: -4.885507583618164

Token 144: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.04216456413269043
    2. ':' → logprob: -3.2921645641326904
    3. ',y' → logprob: -6.5421648025512695
    4. ',x' → logprob: -7.0421648025512695
    5. 'a' → logprob: -7.4171648025512695
    6. 'x' → logprob: -7.6671648025512695
    7. ' :' → logprob: -8.54216480255127
    8. ',a' → logprob: -9.29216480255127
    9. ' ,' → logprob: -9.41716480255127
    10. 'y' → logprob: -9.54216480255127

Token 145: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.009509091265499592
    2. ' y' → logprob: -5.009509086608887
    3. 'lambda' → logprob: -6.509509086608887
    4. 'b' → logprob: -7.384509086608887
    5. 'a' → logprob: -9.134509086608887
    6. 'ab' → logprob: -9.509509086608887
    7. 'SA' → logprob: -10.009509086608887
    8. 'pair' → logprob: -10.134509086608887
    9. '(S' → logprob: -10.134509086608887
    10. 'all' → logprob: -10.259509086608887

Token 146: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0010600793175399303
    2. ' :' → logprob: -7.6260600090026855
    3. ',' → logprob: -7.7510600090026855
    4. '=' → logprob: -9.376060485839844
    5. ':add' → logprob: -10.751060485839844
    6. 'le' → logprob: -11.876060485839844
    7. ':(' → logprob: -12.126060485839844
    8. '   ' → logprob: -12.376060485839844
    9. ':x' → logprob: -12.376060485839844
    10. 'x' → logprob: -13.001060485839844

Token 147: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.49623221158981323
    2. 'le' → logprob: -1.121232271194458
    3. ' le' → logprob: -3.621232271194458
    4. ' x' → logprob: -3.746232271194458
    5. 'add' → logprob: -4.746232032775879
    6. 'lambda' → logprob: -5.371232032775879
    7. ' add' → logprob: -6.871232032775879
    8. ' lambda' → logprob: -8.996232032775879
    9. '   ' → logprob: -9.246232032775879
    10. 'reduce' → logprob: -9.496232032775879

Token 148: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.1603219211101532
    2. 'and' → logprob: -1.9103219509124756
    3. '+' → logprob: -10.660322189331055
    4. ' ' → logprob: -10.785322189331055
    5. '   ' → logprob: -11.160322189331055
    6. ' or' → logprob: -11.785322189331055
    7. '*' → logprob: -11.910322189331055
    8. '	and' → logprob: -12.285322189331055
    9. '[' → logprob: -12.660322189331055
    10. 'le' → logprob: -13.035322189331055

Token 149: ' y' (ID: 342)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'le' → logprob: -0.004353217780590057
    2. '(le' → logprob: -6.254353046417236
    3. '(y' → logprob: -6.754353046417236
    4. 'y' → logprob: -6.879353046417236
    5. ' le' → logprob: -8.879353523254395
    6. '(' → logprob: -10.504353523254395
    7. '(x' → logprob: -10.754353523254395
    8. 'eq' → logprob: -11.629353523254395
    9. ' y' → logprob: -11.629353523254395
    10. 'lt' → logprob: -12.129353523254395

Token 150: '
' (ID: 198)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.6503276824951172
    2. 'le' → logprob: -1.7753276824951172
    3. ' <=' → logprob: -2.400327682495117
    4. 'and' → logprob: -2.775327682495117
    5. '<=' → logprob: -3.025327682495117
    6. '[' → logprob: -3.650327682495117
    7. '(le' → logprob: -3.775327682495117
    8. ' ' → logprob: -4.150327682495117
    9. ' (' → logprob: -4.400327682495117
    10. '   ' → logprob: -5.025327682495117

Token 151: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6619197726249695
    2. ',' → logprob: -1.5369198322296143
    3. '(re' → logprob: -1.7869198322296143
    4. '
' → logprob: -2.7869198322296143
    5. 'reduce' → logprob: -4.536919593811035
    6. ' ' → logprob: -5.411919593811035
    7. ' and' → logprob: -5.786919593811035
    8. 'def' → logprob: -6.161919593811035
    9. ',
' → logprob: -6.286919593811035
    10. 'return' → logprob: -6.411919593811035

Token 152: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1722424477338791
    2. 'reduce' → logprob: -2.4222424030303955
    3. ' reduce' → logprob: -3.0472424030303955
    4. 'def' → logprob: -5.547242641448975
    5. ' all' → logprob: -5.797242641448975
    6. 'all' → logprob: -5.922242641448975
    7. '(re' → logprob: -6.422242641448975
    8. ' def' → logprob: -6.422242641448975
    9. ' return' → logprob: -6.797242641448975
    10. ' le' → logprob: -6.797242641448975

Token 153: ' reduce' (ID: 10389)
  Prédit: 'not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'not' → logprob: -0.24367302656173706
    2. ' not' → logprob: -1.6186730861663818
    3. 'reduce' → logprob: -4.868672847747803
    4. '   ' → logprob: -4.993672847747803
    5. 'all' → logprob: -6.118672847747803
    6. ' reduce' → logprob: -7.493672847747803
    7. ' all' → logprob: -7.743672847747803
    8. ' ' → logprob: -8.493673324584961
    9. 're' → logprob: -9.118673324584961
    10. '(not' → logprob: -9.868673324584961

Token 154: '(le' (ID: 135521)
  Prédit: '(le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(le' → logprob: -0.3144143521785736
    2. '(lambda' → logprob: -1.314414381980896
    3. '(' → logprob: -7.1894145011901855
    4. '(part' → logprob: -9.064414024353027
    5. ' (' → logprob: -9.314414024353027
    6. '(add' → logprob: -10.189414024353027
    7. '(eq' → logprob: -10.314414024353027
    8. '   ' → logprob: -10.564414024353027
    9. '(
' → logprob: -10.689414024353027
    10. '(map' → logprob: -11.064414024353027

Token 155: '_checker' (ID: 158562)
  Prédit: '_checker'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_checker' → logprob: -0.23314166069030762
    2. ',' → logprob: -1.6081416606903076
    3. ',map' → logprob: -5.858141899108887
    4. ' ,' → logprob: -6.233141899108887
    5. '(map' → logprob: -6.483141899108887
    6. ' Checker' → logprob: -8.233141899108887
    7. 'checker' → logprob: -8.358141899108887
    8. '(lambda' → logprob: -8.608141899108887
    9. '   ' → logprob: -8.858141899108887
    10. ' checker' → logprob: -8.858141899108887

Token 156: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.010227484628558159
    2. ',map' → logprob: -4.760227680206299
    3. ' ,' → logprob: -6.635227680206299
    4. '(map' → logprob: -8.88522720336914
    5. ',
' → logprob: -9.38522720336914
    6. '   ' → logprob: -9.88522720336914
    7. ' (' → logprob: -11.76022720336914
    8. '(' → logprob: -12.13522720336914
    9. ',(' → logprob: -12.88522720336914
    10. 'map' → logprob: -13.13522720336914

Token 157: ' map' (ID: 4014)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.02692864090204239
    2. ' map' → logprob: -3.776928663253784
    3. '   ' → logprob: -6.026928424835205
    4. 'st' → logprob: -7.151928424835205
    5. ' ' → logprob: -9.151928901672363
    6. '(map' → logprob: -9.276928901672363
    7. '  ' → logprob: -9.651928901672363
    8. ' st' → logprob: -9.651928901672363
    9. '    ' → logprob: -9.776928901672363
    10. 'chain' → logprob: -10.901928901672363

Token 158: '(le' (ID: 135521)
  Prédit: '(le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(le' → logprob: -0.3440512716770172
    2. '(lambda' → logprob: -1.5940512418746948
    3. '(eq' → logprob: -2.4690513610839844
    4. '(' → logprob: -6.094051361083984
    5. 'le' → logprob: -7.469051361083984
    6. '(part' → logprob: -8.719051361083984
    7. '(gt' → logprob: -8.844051361083984
    8. '(add' → logprob: -9.969051361083984
    9. '((' → logprob: -10.344051361083984
    10. '(e' → logprob: -10.594051361083984

Token 159: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.001252134912647307
    2. ',S' → logprob: -8.126252174377441
    3. ' ,' → logprob: -8.126252174377441
    4. 'lambda' → logprob: -8.376252174377441
    5. 'eq' → logprob: -9.251252174377441
    6. '(lambda' → logprob: -9.501252174377441
    7. '   ' → logprob: -10.376252174377441
    8. ',
' → logprob: -10.751252174377441
    9. ',map' → logprob: -10.751252174377441
    10. '(S' → logprob: -11.001252174377441

Token 160: ' A' (ID: 355)
  Prédit: 'SA'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'SA' → logprob: -0.003966197371482849
    2. ' SA' → logprob: -5.878966331481934
    3. '(S' → logprob: -7.378966331481934
    4. 'zip' → logprob: -7.753966331481934
    5. '   ' → logprob: -10.003966331481934
    6. ' zip' → logprob: -10.878966331481934
    7. ' ' → logprob: -11.253966331481934
    8. 'SB' → logprob: -11.253966331481934
    9. '  ' → logprob: -12.378966331481934
    10. 'S' → logprob: -13.378966331481934

Token 161: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.009540267288684845
    2. ' ,' → logprob: -5.00954008102417
    3. '(S' → logprob: -6.25954008102417
    4. '(B' → logprob: -8.259540557861328
    5. ',B' → logprob: -8.759540557861328
    6. 'B' → logprob: -8.884540557861328
    7. '[' → logprob: -9.384540557861328
    8. 'SB' → logprob: -9.634540557861328
    9. '(' → logprob: -10.259540557861328
    10. ',S' → logprob: -10.259540557861328

Token 162: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.10032517462968826
    2. ' B' → logprob: -2.350325107574463
    3. ' ' → logprob: -9.975325584411621
    4. 'SB' → logprob: -10.225325584411621
    5. '   ' → logprob: -10.600325584411621
    6. '  ' → logprob: -12.600325584411621
    7. ' SB' → logprob: -13.287825584411621
    8. '	B' → logprob: -13.912825584411621
    9. '    ' → logprob: -14.412825584411621
    10. 'BB' → logprob: -14.787825584411621

Token 163: '),' (ID: 936)
  Prédit: ')):
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')):
' → logprob: -0.06769298762083054
    2. ')):' → logprob: -3.317692995071411
    3. '),' → logprob: -3.692692995071411
    4. '))' → logprob: -5.817692756652832
    5. '   ' → logprob: -7.317692756652832
    6. ' ' → logprob: -7.692692756652832
    7. ')):
' → logprob: -9.567692756652832
    8. ' ),' → logprob: -10.567692756652832
    9. '))
' → logprob: -10.692692756652832
    10. ' ))' → logprob: -10.817692756652832

Token 164: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.062033675611019135
    2. ' True' → logprob: -2.8120336532592773
    3. '   ' → logprob: -9.812033653259277
    4. '       ' → logprob: -12.187033653259277
    5. '  ' → logprob: -13.312033653259277
    6. '           ' → logprob: -13.562033653259277
    7. '    ' → logprob: -13.562033653259277
    8. '      ' → logprob: -15.062033653259277
    9. '               ' → logprob: -15.187033653259277
    10. ' ' → logprob: -15.437033653259277

Token 165: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.021502001211047173
    2. '):' → logprob: -3.8965020179748535
    3. '   ' → logprob: -7.5215020179748535
    4. ' ):
' → logprob: -8.021501541137695
    5. ')' → logprob: -10.021501541137695
    6. '):
' → logprob: -10.896501541137695
    7. '):

' → logprob: -11.271501541137695
    8. ')):
' → logprob: -12.146501541137695
    9. ' ):' → logprob: -12.396501541137695
    10. ')==' → logprob: -13.396501541137695

Token 166: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0009016924886964262
    2. ':' → logprob: -8.125901222229004
    3. ':
' → logprob: -8.250901222229004
    4. ' return' → logprob: -8.875901222229004
    5. '):
' → logprob: -9.625901222229004
    6. '   ' → logprob: -10.375901222229004
    7. 'return' → logprob: -10.625901222229004
    8. ',' → logprob: -10.875901222229004
    9. ')' → logprob: -11.875901222229004
    10. '=True' → logprob: -11.875901222229004

Token 167: ' return' (ID: 622)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.1727103441953659
    2. 'return' (adapté à ' return') → logprob: -2.297710418701172
    3. ' return' → logprob: -2.922710418701172
    4. '   ' → logprob: -5.547710418701172
    5. '           ' → logprob: -8.672710418701172
    6. ' ' → logprob: -9.172710418701172
    7. '     ' → logprob: -9.922710418701172
    8. '
' → logprob: -10.172710418701172
    9. '      ' → logprob: -10.547710418701172
    10. '    ' → logprob: -10.797710418701172

Token 168: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.06312891840934753
    2. ' '' → logprob: -2.81312894821167
    3. ' "' → logprob: -7.68812894821167
    4. '"' → logprob: -8.063128471374512
    5. '"No' → logprob: -8.188128471374512
    6. '   ' → logprob: -9.563128471374512
    7. ' ' → logprob: -11.063128471374512
    8. ' ' → logprob: -11.813128471374512
    9. ' No' → logprob: -12.188128471374512
    10. '	' → logprob: -13.063128471374512

Token 169: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -4.334533878136426e-05
    2. 'No' → logprob: -10.500042915344238
    3. ''' → logprob: -11.125042915344238
    4. 'Oui' → logprob: -14.875042915344238
    5. ' Yes' → logprob: -15.250042915344238
    6. 'YES' → logprob: -16.375043869018555
    7. 'Ok' → logprob: -16.750043869018555
    8. 'Ye' → logprob: -16.750043869018555
    9. '   ' → logprob: -17.500043869018555
    10. '"' → logprob: -18.250043869018555

Token 170: ''
' (ID: 2207)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.306683212518692
    2. '')' → logprob: -1.5566831827163696
    3. ')' → logprob: -3.056683301925659
    4. '')
' → logprob: -5.68168306350708
    5. ''' → logprob: -6.30668306350708
    6. ')
' → logprob: -7.18168306350708
    7. 'def' → logprob: -9.556683540344238
    8. ')'' → logprob: -9.681683540344238
    9. ''
' → logprob: -11.056683540344238
    10. 'return' → logprob: -11.056683540344238

Token 171: '    
' (ID: 1944)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07615140825510025
    2. '<|end|>' → logprob: -2.8261513710021973
    3. '    
' → logprob: -4.826151371002197
    4. '
' → logprob: -5.826151371002197
    5. '  
' → logprob: -7.076151371002197
    6. ')' → logprob: -7.701151371002197
    7. ' ' → logprob: -8.076151847839355
    8. '  ' → logprob: -8.326151847839355
    9. '<|end|>' → logprob: -8.576151847839355
    10. 'return' → logprob: -8.576151847839355

Token 172: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0011866572313010693
    2. '<|end|>' → logprob: -7.126186847686768
    3. 'return' → logprob: -8.37618637084961
    4. '    
' → logprob: -10.00118637084961
    5. 'else' → logprob: -10.87618637084961
    6. ' ' → logprob: -11.00118637084961
    7. ')' → logprob: -11.50118637084961
    8. ' return' → logprob: -11.50118637084961
    9. '...' → logprob: -12.37618637084961
    10. 'No' → logprob: -12.37618637084961

Token 173: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.01150752604007721
    2. '   ' → logprob: -5.011507511138916
    3. ' return' → logprob: -5.386507511138916
    4. 'else' → logprob: -8.886507987976074
    5. ' ' → logprob: -10.886507987976074
    6. '    
' → logprob: -11.011507987976074
    7. 'def' → logprob: -11.886507987976074
    8. '  ' → logprob: -11.886507987976074
    9. '	return' → logprob: -12.261507987976074
    10. '```' → logprob: -13.136507987976074

Token 174: ' ' (ID: 220)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.37982186675071716
    2. '   ' → logprob: -1.5048218965530396
    3. ' return' → logprob: -3.37982177734375
    4. '#' → logprob: -3.50482177734375
    5. 'le' → logprob: -4.25482177734375
    6. 'if' → logprob: -5.12982177734375
    7. ' ' → logprob: -5.87982177734375
    8. 'result' → logprob: -6.62982177734375
    9. ' #' → logprob: -6.87982177734375
    10. ' le' → logprob: -7.50482177734375

Token 175: '3' (ID: 18)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.24247314035892487
    2. '#' → logprob: -2.2424731254577637
    3. 'le' → logprob: -2.8674731254577637
    4. 'if' → logprob: -3.2424731254577637
    5. '   ' → logprob: -5.242473125457764
    6. ' return' → logprob: -5.867473125457764
    7. 'result' → logprob: -7.242473125457764
    8. 'sorted' → logprob: -7.242473125457764
    9. ' #' → logprob: -7.867473125457764
    10. 'reverse' → logprob: -8.242473602294922

Token 176: '.' (ID: 13)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3908732235431671
    2. '.' → logprob: -1.1408731937408447
    3. '#' → logprob: -6.640873432159424
    4. 'def' → logprob: -7.140873432159424
    5. ' if' → logprob: -7.265873432159424
    6. '  ' → logprob: -8.140872955322266
    7. ' #' → logprob: -8.390872955322266
    8. 'if' → logprob: -9.015872955322266
    9. '    
' → logprob: -9.015872955322266
    10. ',' → logprob: -9.390872955322266

Token 177: ' Cas' (ID: 8066)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.8262109160423279
    2. 'return' → logprob: -1.8262109756469727
    3. '   ' → logprob: -2.5762109756469727
    4. ' return' → logprob: -3.2012109756469727
    5. 'diff' → logprob: -3.2012109756469727
    6. 'if' → logprob: -3.4512109756469727
    7. 'result' → logprob: -3.5762109756469727
    8. 'le' → logprob: -3.7012109756469727
    9. 'max' → logprob: -4.076210975646973
    10. 'count' → logprob: -4.326210975646973

Token 178: ' du' (ID: 1462)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.761532187461853
    2. 'def' → logprob: -1.386532187461853
    3. ' par' → logprob: -2.3865323066711426
    4. ' where' → logprob: -2.7615323066711426
    5. ' où' → logprob: -3.5115323066711426
    6. ' def' → logprob: -3.6365323066711426
    7. '#' → logprob: -3.6365323066711426
    8. 'elif' → logprob: -5.136532306671143
    9. ' elif' → logprob: -5.261532306671143
    10. ' else' → logprob: -5.511532306671143

Token 179: ' bis' (ID: 7204)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -1.8740161657333374
    2. ' else' → logprob: -2.374016284942627
    3. 'None' → logprob: -2.374016284942627
    4. 'def' → logprob: -2.499016284942627
    5. 'len' → logprob: -2.874016284942627
    6. ' zip' → logprob: -2.999016284942627
    7. 'zip' → logprob: -3.249016284942627
    8. 'elif' → logprob: -3.374016284942627
    9. ' None' → logprob: -3.499016284942627
    10. 'A' → logprob: -3.999016284942627

Token 180: 'ect' (ID: 534)
  Prédit: 'ect'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ect' → logprob: -0.0007928356644697487
    2. 'e' → logprob: -7.625792980194092
    3. 'ec' → logprob: -9.125792503356934
    4. 'sect' → logprob: -9.750792503356934
    5. '
' → logprob: -11.125792503356934
    6. '```' → logprob: -11.563292503356934
    7. 'est' → logprob: -11.750792503356934
    8. '#' → logprob: -11.813292503356934
    9. '   ' → logprob: -11.938292503356934
    10. '\' → logprob: -12.063292503356934

Token 181: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.27088281512260437
    2. 'idx' → logprob: -3.1458828449249268
    3. 'if' → logprob: -3.3958828449249268
    4. ' if' → logprob: -3.6458828449249268
    5. 'def' → logprob: -3.7708828449249268
    6. 'index' → logprob: -3.7708828449249268
    7. 'pos' → logprob: -4.770882606506348
    8. ' ' → logprob: -4.770882606506348
    9. '(S' → logprob: -4.770882606506348
    10. '(A' → logprob: -5.145882606506348

Token 182: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16426274180412292
    2. 'def' → logprob: -3.5392627716064453
    3. 'idx' → logprob: -3.6642627716064453
    4. '<|end|>' → logprob: -3.9142627716064453
    5. 'index' → logprob: -4.289262771606445
    6. '#' → logprob: -4.664262771606445
    7. ' ' → logprob: -4.789262771606445
    8. '...' → logprob: -4.789262771606445
    9. ' if' → logprob: -5.039262771606445
    10. '    ' → logprob: -5.414262771606445

Token 183: ' fancy' (ID: 39357)
  Prédit: ' idx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' idx' → logprob: -1.1174051761627197
    2. 'pos' → logprob: -1.6174051761627197
    3. ' pos' → logprob: -1.6174051761627197
    4. 'idx' → logprob: -1.8674051761627197
    5. '   ' → logprob: -3.6174051761627197
    6. 'i' → logprob: -3.7424051761627197
    7. ' index' → logprob: -4.117404937744141
    8. ' i' → logprob: -4.117404937744141
    9. 'index' → logprob: -4.992404937744141
    10. 'if' → logprob: -5.242404937744141

Token 184: '_b' (ID: 1535)
  Prédit: '_idx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_idx' → logprob: -0.7400283813476562
    2. '_pos' → logprob: -1.7400283813476562
    3. '_index' → logprob: -1.7400283813476562
    4. ' =' → logprob: -2.1150283813476562
    5. '=' → logprob: -3.4900283813476562
    6. 'pos' → logprob: -5.365028381347656
    7. '_point' → logprob: -5.365028381347656
    8. 'idx' → logprob: -5.990028381347656
    9. 'index' → logprob: -6.615028381347656
    10. '_' → logprob: -6.990028381347656

Token 185: 'is' (ID: 276)
  Prédit: 'is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'is' → logprob: -0.0019103118684142828
    2. 'r' → logprob: -6.376910209655762
    3. '=' → logprob: -9.376910209655762
    4. 'in' → logprob: -10.251910209655762
    5. ' =' → logprob: -11.126910209655762
    6. 'sect' → logprob: -11.126910209655762
    7. 'ect' → logprob: -11.626910209655762
    8. 'ise' → logprob: -11.626910209655762
    9. 'ct' → logprob: -12.376910209655762
    10. 'i' → logprob: -12.751910209655762

Token 186: 'ect' (ID: 534)
  Prédit: 'ect'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ect' → logprob: -5.7888184528565034e-05
    2. 'e' → logprob: -10.6250581741333
    3. 'ec' → logprob: -11.0000581741333
    4. 'ects' → logprob: -12.5000581741333
    5. '
' → logprob: -12.7500581741333
    6. 'ct' → logprob: -13.3750581741333
    7. 'ected' → logprob: -13.7500581741333
    8. '=' → logprob: -14.0000581741333
    9. '

' → logprob: -14.3750581741333
    10. '```' → logprob: -14.5000581741333

Token 187: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.42806437611579895
    2. '=' → logprob: -1.5530643463134766
    3. '_idx' → logprob: -2.8030643463134766
    4. '(' → logprob: -3.8030643463134766
    5. '_index' → logprob: -4.553064346313477
    6. '_' → logprob: -4.553064346313477
    7. '(S' → logprob: -4.803064346313477
    8. '_pos' → logprob: -5.178064346313477
    9. '(
' → logprob: -6.053064346313477
    10. 'idx' → logprob: -6.303064346313477

Token 188: ' lambda' (ID: 27871)
  Prédit: 'partial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'partial' → logprob: -0.24225273728370667
    2. ' partial' → logprob: -2.242252826690674
    3. 'lambda' → logprob: -2.492252826690674
    4. ' lambda' → logprob: -3.867252826690674
    5. 'br' → logprob: -5.492252826690674
    6. ' br' → logprob: -8.117252349853516
    7. '   ' → logprob: -8.242252349853516
    8. '(part' → logprob: -8.367252349853516
    9. '(lambda' → logprob: -8.867252349853516
    10. 'part' → logprob: -9.992252349853516

Token 189: ' i' (ID: 575)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.7966042757034302
    2. ' x' → logprob: -0.7966042757034302
    3. 'a' → logprob: -3.4216041564941406
    4. 'A' → logprob: -3.6716041564941406
    5. 'arr' → logprob: -4.421604156494141
    6. ' A' → logprob: -4.671604156494141
    7. ' arr' → logprob: -4.796604156494141
    8. ' a' → logprob: -4.921604156494141
    9. ' lst' → logprob: -7.421604156494141
    10. 'lst' → logprob: -7.421604156494141

Token 190: ':' (ID: 25)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.28505393862724304
    2. ':' → logprob: -1.4100539684295654
    3. ' :' → logprob: -6.785053730010986
    4. 'x' → logprob: -7.910053730010986
    5. ' ,' → logprob: -8.160054206848145
    6. ',x' → logprob: -8.285054206848145
    7. ',i' → logprob: -8.285054206848145
    8. ' x' → logprob: -8.660054206848145
    9. '=' → logprob: -8.660054206848145
    10. ' i' → logprob: -9.035054206848145

Token 191: ' br' (ID: 1294)
  Prédit: 'br'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'br' → logprob: -0.6358127593994141
    2. ' br' → logprob: -0.7608127593994141
    3. ' bis' → logprob: -7.135812759399414
    4. '   ' → logprob: -7.260812759399414
    5. '(br' → logprob: -8.135812759399414
    6. ' ' → logprob: -8.260812759399414
    7. 'bis' → logprob: -8.260812759399414
    8. 'len' → logprob: -8.635812759399414
    9. ' len' → logprob: -8.760812759399414
    10. '	br' → logprob: -9.135812759399414

Token 192: '(S' (ID: 6181)
  Prédit: '(A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.4432086944580078
    2. '(B' → logprob: -1.1932086944580078
    3. '(S' → logprob: -2.943208694458008
    4. '(' → logprob: -7.193208694458008
    5. '(i' → logprob: -7.818208694458008
    6. 'A' → logprob: -7.818208694458008
    7. '([' → logprob: -8.693208694458008
    8. 'B' → logprob: -9.193208694458008
    9. '(I' → logprob: -10.068208694458008
    10. '([],' → logprob: -10.068208694458008

Token 193: 'A' (ID: 32)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.050405219197273254
    2. 'A' → logprob: -3.050405263900757
    3. '(B' → logprob: -6.675405025482178
    4. '(A' → logprob: -8.175405502319336
    5. ',' → logprob: -9.050405502319336
    6. ' B' → logprob: -10.175405502319336
    7. '(' → logprob: -10.925405502319336
    8. '(S' → logprob: -11.175405502319336
    9. '	B' → logprob: -11.550405502319336
    10. ')' → logprob: -11.675405502319336

Token 194: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.002559733809903264
    2. '(S' → logprob: -6.127559661865234
    3. ',i' → logprob: -8.752559661865234
    4. '(i' → logprob: -9.627559661865234
    5. ' ,' → logprob: -9.627559661865234
    6. ',S' → logprob: -10.752559661865234
    7. 'A' → logprob: -10.877559661865234
    8. '(A' → logprob: -12.002559661865234
    9. ',A' → logprob: -12.002559661865234
    10. 'i' → logprob: -12.252559661865234

Token 195: ' SB' (ID: 41915)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.9945388436317444
    2. 'SB' → logprob: -1.2445387840270996
    3. ' SB' → logprob: -1.4945387840270996
    4. ' i' → logprob: -2.9945387840270996
    5. 'SA' → logprob: -3.3695387840270996
    6. 'B' → logprob: -4.1195387840271
    7. ' SA' → logprob: -4.8695387840271
    8. ' B' → logprob: -5.4945387840271
    9. 'A' → logprob: -5.6195387840271
    10. ' A' → logprob: -6.8695387840271

Token 196: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.043201744556427
    2. '(i' → logprob: -3.2932016849517822
    3. '[' → logprob: -6.293201923370361
    4. '(S' → logprob: -6.418201923370361
    5. '[S' → logprob: -7.168201923370361
    6. ',' → logprob: -7.668201923370361
    7. ',i' → logprob: -9.168201446533203
    8. '[A' → logprob: -9.543201446533203
    9. '(' → logprob: -9.918201446533203
    10. '[B' → logprob: -9.918201446533203

Token 197: '])' (ID: 4636)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5275310277938843
    2. '])' → logprob: -1.1525310277938843
    3. '[i' → logprob: -2.527531147003174
    4. ' )' → logprob: -5.277531147003174
    5. '))' → logprob: -5.402531147003174
    6. '[' → logprob: -6.652531147003174
    7. ']' → logprob: -6.902531147003174
    8. ')+' → logprob: -7.402531147003174
    9. ')-' → logprob: -7.902531147003174
    10. ' ])' → logprob: -8.402530670166016

Token 198: ' ==' (ID: 951)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 199: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.2845683991909027
    2. 'len' → logprob: -1.534568428993225
    3. 'br' → logprob: -4.1595683097839355
    4. '0' → logprob: -4.4095683097839355
    5. ' i' → logprob: -6.0345683097839355
    6. 'bis' → logprob: -7.0345683097839355
    7. ' len' → logprob: -7.5345683097839355
    8. ' ' → logprob: -9.284568786621094
    9. ' br' → logprob: -9.659568786621094
    10. '1' → logprob: -9.659568786621094

Token 200: '+' (ID: 10)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 201: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00010986098641296849
    2. ' ' → logprob: -9.125109672546387
    3. '<|end|>' → logprob: -15.000109672546387
    4. '0' → logprob: -15.625109672546387
    5. '```' → logprob: -16.375110626220703
    6. '2' → logprob: -16.625110626220703
    7. '
' → logprob: -17.750110626220703
    8. ' ' → logprob: -18.187610626220703
    9. '  ' → logprob: -18.312610626220703
    10. '   ' → logprob: -18.437610626220703

Token 202: '
' (ID: 198)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5295709371566772
    2. '<|end|>' → logprob: -0.9045709371566772
    3. ':' → logprob: -5.654571056365967
    4. '<|end|>' → logprob: -7.279571056365967
    5. ')
' → logprob: -7.529571056365967
    6. '):' → logprob: -7.779571056365967
    7. '
' → logprob: -8.404570579528809
    8. '```' → logprob: -9.029570579528809
    9. '\n' → logprob: -9.154570579528809
    10. '   ' → logprob: -9.154570579528809

Token 203: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 204: ' if' (ID: 538)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6231862902641296
    2. '<|end|>' → logprob: -1.1231863498687744
    3. '   ' → logprob: -2.8731863498687744
    4. ' for' → logprob: -3.6231863498687744
    5. 'for' → logprob: -4.248186111450195
    6. 'return' → logprob: -4.498186111450195
    7. ')' → logprob: -4.748186111450195
    8. ' if' → logprob: -4.748186111450195
    9. 'if' (adapté à ' if') → logprob: -5.748186111450195
    10. ' return' → logprob: -6.123186111450195

Token 205: ' not' (ID: 625)
  Prédit: ' any'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' any' → logprob: -0.7603112459182739
    2. 'any' → logprob: -0.7603112459182739
    3. 'all' → logprob: -3.2603111267089844
    4. ' all' → logprob: -3.6353111267089844
    5. ' not' → logprob: -9.260311126708984
    6. 'not' → logprob: -10.385311126708984
    7. ' fancy' → logprob: -10.635311126708984
    8. '(any' → logprob: -10.885311126708984
    9. 'f' → logprob: -11.885311126708984
    10. 'reduce' → logprob: -12.010311126708984

Token 206: ' all' (ID: 722)
  Prédit: 'all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'all' → logprob: -0.7775024771690369
    2. ' all' → logprob: -0.9025024771690369
    3. 'any' → logprob: -2.5275025367736816
    4. ' any' → logprob: -2.9025025367736816
    5. 'f' → logprob: -9.652502059936523
    6. ' fancy' → logprob: -9.902502059936523
    7. '(any' → logprob: -11.527502059936523
    8. 'reduce' → logprob: -11.777502059936523
    9. ' f' → logprob: -12.027502059936523
    10. '(all' → logprob: -12.027502059936523

Token 207: '(map' (ID: 16946)
  Prédit: '(f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(f' → logprob: -0.07935832440853119
    2. '(map' → logprob: -2.5793583393096924
    3. '(st' → logprob: -7.829358100891113
    4. '(' → logprob: -10.204358100891113
    5. '(part' → logprob: -10.579358100891113
    6. '(chain' → logprob: -12.829358100891113
    7. 'map' → logprob: -13.454358100891113
    8. 'f' → logprob: -13.579358100891113
    9. '((' → logprob: -13.954358100891113
    10. '(
' → logprob: -14.704358100891113

Token 208: '(f' (ID: 1526)
  Prédit: '(f'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(f' → logprob: -0.001392496284097433
    2. 'f' → logprob: -6.626392364501953
    3. '(' → logprob: -10.376392364501953
    4. '(lambda' → logprob: -10.376392364501953
    5. '(
' → logprob: -13.876392364501953
    6. '   ' → logprob: -14.001392364501953
    7. ' (' → logprob: -15.126392364501953
    8. ' f' → logprob: -15.501392364501953
    9. '(part' → logprob: -16.001392364501953
    10. '(le' → logprob: -16.001392364501953

Token 209: 'ancy' (ID: 8830)
  Prédit: 'ancy'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ancy' → logprob: -3.297462171758525e-05
    2. 'anc' → logprob: -10.875033378601074
    3. 'lambda' → logprob: -13.250033378601074
    4. 'ant' → logprob: -13.250033378601074
    5. 'n' → logprob: -13.500033378601074
    6. '(lambda' → logprob: -13.500033378601074
    7. 'f' → logprob: -13.625033378601074
    8. 'an' → logprob: -13.750033378601074
    9. 'ancybox' → logprob: -14.125033378601074
    10. 'ambda' → logprob: -14.250033378601074

Token 210: '_b' (ID: 1535)
  Prédit: '_b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_b' → logprob: -0.000422570708906278
    2. 'bis' → logprob: -8.125422477722168
    3. 'b' → logprob: -9.625422477722168
    4. 'f' → logprob: -10.500422477722168
    5. 'lambda' → logprob: -11.750422477722168
    6. '(b' → logprob: -12.125422477722168
    7. '_f' → logprob: -12.625422477722168
    8. '(lambda' → logprob: -13.000422477722168
    9. ')' → logprob: -13.125422477722168
    10. '(f' → logprob: -13.625422477722168

Token 211: 'is' (ID: 276)
  Prédit: 'is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'is' → logprob: -0.0007001649355515838
    2. 'ect' → logprob: -8.000699996948242
    3. 'sect' → logprob: -8.000699996948242
    4. 'lect' → logprob: -12.000699996948242
    5. 'ist' → logprob: -12.500699996948242
    6. 'ict' → logprob: -12.500699996948242
    7. 'ise' → logprob: -12.750699996948242
    8. 'bis' → logprob: -13.250699996948242
    9. ')' → logprob: -13.625699996948242
    10. '_is' → logprob: -13.625699996948242

Token 212: 'ect' (ID: 534)
  Prédit: 'ect'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ect' → logprob: -0.31428995728492737
    2. 'ct' → logprob: -1.314289927482605
    3. 'ict' → logprob: -8.314290046691895
    4. 'sect' → logprob: -8.314290046691895
    5. 't' → logprob: -8.689290046691895
    6. 'lect' → logprob: -9.189290046691895
    7. 'is' → logprob: -9.564290046691895
    8. 'map' → logprob: -9.814290046691895
    9. '_ct' → logprob: -11.064290046691895
    10. 'act' → logprob: -11.189290046691895

Token 213: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0014704647473990917
    2. 'range' → logprob: -6.626470565795898
    3. '(range' → logprob: -8.876470565795898
    4. ' ,' → logprob: -12.626470565795898
    5. ' range' → logprob: -14.126470565795898
    6. ',len' → logprob: -14.876470565795898
    7. '),' → logprob: -15.626470565795898
    8. '))' → logprob: -16.1264705657959
    9. '(' → logprob: -16.6264705657959
    10. ',S' → logprob: -16.8764705657959

Token 214: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0067167943343520164
    2. ' range' → logprob: -5.006716728210449
    3. ' ' → logprob: -14.75671672821045
    4. '   ' → logprob: -14.75671672821045
    5. '	range' → logprob: -15.13171672821045
    6. '(range' → logprob: -15.50671672821045
    7. '  ' → logprob: -16.131717681884766
    8. 'rang' → logprob: -18.256717681884766
    9. ')' → logprob: -18.381717681884766
    10. '    ' → logprob: -18.506717681884766

Token 215: '(len' (ID: 14990)
  Prédit: '(len'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(len' → logprob: -5.8961017202818766e-05
    2. 'len' → logprob: -9.750059127807617
    3. '(' → logprob: -14.875059127807617
    4. '(n' → logprob: -15.500059127807617
    5. ',len' → logprob: -18.000059127807617
    6. ' len' → logprob: -18.125059127807617
    7. '   ' → logprob: -19.375059127807617
    8. '(l' → logprob: -19.375059127807617
    9. '(min' → logprob: -19.750059127807617
    10. '((' → logprob: -20.125059127807617

Token 216: '(A' (ID: 10706)
  Prédit: '(B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(B' → logprob: -0.09198779612779617
    2. '(S' → logprob: -2.4669878482818604
    3. '(A' → logprob: -5.841987609863281
    4. 'B' → logprob: -9.466987609863281
    5. 'SB' → logprob: -10.466987609863281
    6. '(' → logprob: -11.216987609863281
    7. 'A' → logprob: -11.466987609863281
    8. ')' → logprob: -13.341987609863281
    9. '(sb' → logprob: -13.591987609863281
    10. ' SB' → logprob: -13.841987609863281

Token 217: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.20507164299488068
    2. '))))' → logprob: -1.7050716876983643
    3. ')))' → logprob: -5.955071449279785
    4. ')' → logprob: -7.205071449279785
    5. ')):' → logprob: -9.080071449279785
    6. ' ))' → logprob: -9.455071449279785
    7. ')))),' → logprob: -10.580071449279785
    8. '))))
' → logprob: -11.080071449279785
    9. '):' → logprob: -11.080071449279785
    10. '   ' → logprob: -11.455071449279785

Token 218: ')):
' (ID: 22530)
  Prédit: ')):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')):
' → logprob: -0.017687078565359116
    2. ')):' → logprob: -4.14268684387207
    3. '))' → logprob: -6.51768684387207
    4. ')):
' → logprob: -9.14268684387207
    5. '):
' → logprob: -10.51768684387207
    6. '   ' → logprob: -11.01768684387207
    7. ' ' → logprob: -12.01768684387207
    8. ')))' → logprob: -12.39268684387207
    9. ':' → logprob: -12.64268684387207
    10. ':
' → logprob: -12.89268684387207

Token 219: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00011868205183418468
    2. ' return' → logprob: -9.375118255615234
    3. 'return' → logprob: -10.750118255615234
    4. '   ' → logprob: -12.250118255615234
    5. ':
' → logprob: -13.375118255615234
    6. ':return' → logprob: -13.500118255615234
    7. ':' → logprob: -13.875118255615234
    8. '	' → logprob: -14.250118255615234
    9. ')' → logprob: -14.250118255615234
    10. '	   ' → logprob: -14.500118255615234

Token 220: ' return' (ID: 622)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.11643251776695251
    2. ' return' → logprob: -2.4914324283599854
    3. '   ' → logprob: -4.2414326667785645
    4. 'return' (adapté à ' return') → logprob: -4.3664326667785645
    5. ' ' → logprob: -11.366432189941406
    6. '	return' → logprob: -11.491432189941406
    7. '
' → logprob: -12.241432189941406
    8. '    ' → logprob: -12.741432189941406
    9. '           ' → logprob: -13.491432189941406
    10. '      ' → logprob: -14.366432189941406

Token 221: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.002326767658814788
    2. ' '' → logprob: -6.127326965332031
    3. 'No' → logprob: -9.877326965332031
    4. '   ' → logprob: -10.002326965332031
    5. '"No' → logprob: -10.377326965332031
    6. ' No' → logprob: -11.877326965332031
    7. ' ' → logprob: -12.877326965332031
    8. 'None' → logprob: -13.377326965332031
    9. '  ' → logprob: -14.002326965332031
    10. '	' → logprob: -14.377326965332031

Token 222: 'Yes' (ID: 13022)
  Prédit: 'No'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.0013446388766169548
    2. ''' → logprob: -6.626344680786133
    3. ' No' → logprob: -11.126344680786133
    4. 'Yes' → logprob: -12.751344680786133
    5. '"No' → logprob: -14.126344680786133
    6. '   ' → logprob: -16.376344680786133
    7. '"' → logprob: -17.501344680786133
    8. '
' → logprob: -17.626344680786133
    9. ' ' → logprob: -17.626344680786133
    10. '_No' → logprob: -17.626344680786133

Token 223: ''
' (ID: 2207)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.025697825476527214
    2. ')' → logprob: -3.775697708129883
    3. '')' → logprob: -6.525697708129883
    4. '<|end|>' → logprob: -7.775697708129883
    5. '
' → logprob: -8.525697708129883
    6. ')
' → logprob: -8.900697708129883
    7. ''' → logprob: -9.525697708129883
    8. '    
' → logprob: -10.025697708129883
    9. 'return' → logprob: -10.400697708129883
    10. '\n' → logprob: -11.150697708129883

Token 224: '    
' (ID: 1944)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0002695608709473163
    2. 'return' → logprob: -9.250269889831543
    3. '<|end|>' → logprob: -9.500269889831543
    4. '    
' → logprob: -10.000269889831543
    5. '
' → logprob: -10.000269889831543
    6. ' return' → logprob: -12.625269889831543
    7. '	return' → logprob: -13.000269889831543
    8. '       ' → logprob: -14.500269889831543
    9. 'def' → logprob: -15.375269889831543
    10. '  ' → logprob: -15.500269889831543

Token 225: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5262427926063538
    2. 'return' → logprob: -1.026242733001709
    3. 'No' → logprob: -3.026242733001709
    4. ' return' → logprob: -6.401242733001709
    5. '	return' → logprob: -9.026243209838867
    6. '    
' → logprob: -9.026243209838867
    7. 'Yes' → logprob: -9.026243209838867
    8. ' No' → logprob: -9.776243209838867
    9. '
' → logprob: -9.901243209838867
    10. '```' → logprob: -10.026243209838867

Token 226: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.0015922266757115722
    2. '   ' → logprob: -6.50159215927124
    3. ' return' → logprob: -9.376592636108398
    4. '	return' → logprob: -12.501592636108398
    5. 'No' → logprob: -14.501592636108398
    6. '    
' → logprob: -15.251592636108398
    7. '
' → logprob: -15.501592636108398
    8. '```' → logprob: -15.626592636108398
    9. ' ' → logprob: -15.876592636108398
    10. '  ' → logprob: -16.3765926361084

Token 227: ' ' (ID: 220)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.00017147827020380646
    2. '   ' → logprob: -9.250171661376953
    3. ' return' → logprob: -9.500171661376953
    4. '
' → logprob: -15.875171661376953
    5. '#' → logprob: -16.125171661376953
    6. '	return' → logprob: -16.500171661376953
    7. '    
' → logprob: -16.625171661376953
    8. ' ' → logprob: -16.750171661376953
    9. '  ' → logprob: -16.750171661376953
    10. '```' → logprob: -18.000171661376953

Token 228: '4' (ID: 19)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -5.2762428822461516e-05
    2. ' return' → logprob: -10.375052452087402
    3. '   ' → logprob: -11.375052452087402
    4. ''' → logprob: -11.625052452087402
    5. 'No' → logprob: -15.375052452087402
    6. '    
' → logprob: -15.750052452087402
    7. '"' → logprob: -16.12505340576172
    8. ' ' → logprob: -16.37505340576172
    9. '	return' → logprob: -16.37505340576172
    10. '
' → logprob: -16.50005340576172

Token 229: '.' (ID: 13)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06678882986307144
    2. 'return' → logprob: -3.066788911819458
    3. ' return' → logprob: -4.816788673400879
    4. 'def' → logprob: -5.191788673400879
    5. '    
' → logprob: -6.191788673400879
    6. '
' → logprob: -6.316788673400879
    7. ' ' → logprob: -9.441788673400879
    8. '  
' → logprob: -9.566788673400879
    9. ':' → logprob: -9.941788673400879
    10. '	return' → logprob: -10.191788673400879

Token 230: ' Ensemble' (ID: 102359)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.002261590678244829
    2. ' return' → logprob: -6.252261638641357
    3. '#' → logprob: -8.6272611618042
    4. '   ' → logprob: -9.2522611618042
    5. '
' → logprob: -11.3772611618042
    6. 'if' → logprob: -11.5022611618042
    7. 'for' → logprob: -11.8772611618042
    8. 'def' → logprob: -12.0022611618042
    9. 'result' → logprob: -12.2522611618042
    10. 'raise' → logprob: -12.6272611618042

Token 231: ' et' (ID: 859)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.21818163990974426
    2. 'SA' → logprob: -3.593181610107422
    3. 'return' → logprob: -3.593181610107422
    4. 's' → logprob: -3.843181610107422
    5. 'set' → logprob: -4.093181610107422
    6. 'diff' → logprob: -4.218181610107422
    7. '   ' → logprob: -4.218181610107422
    8. ' return' → logprob: -4.343181610107422
    9. ' A' → logprob: -4.968181610107422
    10. 'if' → logprob: -4.968181610107422

Token 232: ' unic' (ID: 159186)
  Prédit: ' subset'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' subset' → logprob: -1.9566744565963745
    2. ' set' → logprob: -2.081674575805664
    3. ' counter' → logprob: -2.206674575805664
    4. 'subset' → logprob: -2.456674575805664
    5. 'Counter' → logprob: -2.831674575805664
    6. 'set' → logprob: -2.956674575805664
    7. 'len' → logprob: -3.081674575805664
    8. 'counter' → logprob: -3.081674575805664
    9. ' not' → logprob: -3.081674575805664
    10. 'intersection' → logprob: -3.206674575805664

Token 233: 'ité' (ID: 3761)
  Prédit: 'ité'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ité' → logprob: -0.1020447388291359
    2. 'es' → logprob: -2.8520448207855225
    3. 'e' → logprob: -4.602044582366943
    4. 'ity' → logprob: -4.852044582366943
    5. 'ités' → logprob: -5.227044582366943
    6. 'on' → logprob: -5.977044582366943
    7. 'alité' → logprob: -6.477044582366943
    8. 's' → logprob: -6.477044582366943
    9. 'om' → logprob: -6.602044582366943
    10. 'té' → logprob: -6.977044582366943

Token 234: ' via' (ID: 4493)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9042578935623169
    2. ' if' → logprob: -1.279257893562317
    3. 'if' → logprob: -1.904257893562317
    4. ' SA' → logprob: -2.9042577743530273
    5. 'SA' → logprob: -3.2792577743530273
    6. 'A' → logprob: -3.6542577743530273
    7. ' A' → logprob: -4.154257774353027
    8. 'set' → logprob: -4.404257774353027
    9. ' set' → logprob: -5.154257774353027
    10. ' ' → logprob: -5.779257774353027

Token 235: ' permutations' (ID: 174595)
  Prédit: 'set'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'set' → logprob: -0.11808168143033981
    2. ' set' → logprob: -2.618081569671631
    3. 'len' → logprob: -3.493081569671631
    4. 'Counter' → logprob: -5.868081569671631
    5. 'sets' → logprob: -6.368081569671631
    6. ' len' → logprob: -6.618081569671631
    7. ' Counter' → logprob: -7.118081569671631
    8. ' sets' → logprob: -7.868081569671631
    9. 'collections' → logprob: -7.993081569671631
    10. '
' → logprob: -8.868082046508789

Token 236: ' +' (ID: 659)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3902330696582794
    2. ' if' → logprob: -1.640233039855957
    3. 'if' → logprob: -2.765233039855957
    4. 'A' → logprob: -4.390233039855957
    5. ' A' → logprob: -5.140233039855957
    6. 'SA' → logprob: -5.140233039855957
    7. ' return' → logprob: -5.265233039855957
    8. 'def' → logprob: -5.265233039855957
    9. ' sets' → logprob: -5.390233039855957
    10. ' SA' → logprob: -5.390233039855957

Token 237: ' set' (ID: 920)
  Prédit: 'chain'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'chain' → logprob: -0.4604540467262268
    2. 'set' → logprob: -1.585453987121582
    3. ' chain' → logprob: -2.585453987121582
    4. 'Counter' → logprob: -3.335453987121582
    5. 'counter' → logprob: -4.085453987121582
    6. 'len' → logprob: -4.335453987121582
    7. ' set' → logprob: -4.835453987121582
    8. 'com' → logprob: -6.335453987121582
    9. ' Counter' → logprob: -6.335453987121582
    10. ' counter' → logprob: -6.710453987121582

Token 238: ' comprehension' (ID: 91423)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -1.044365644454956
    2. '   ' → logprob: -1.419365644454956
    3. 'if' → logprob: -1.794365644454956
    4. ' return' → logprob: -3.169365644454956
    5. 'A' → logprob: -3.794365644454956
    6. ' SA' → logprob: -3.919365644454956
    7. ' A' → logprob: -4.419365882873535
    8. 'return' → logprob: -4.419365882873535
    9. 'SA' → logprob: -4.544365882873535
    10. ' sets' → logprob: -4.794365882873535

Token 239: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9608673453330994
    2. ' return' → logprob: -1.2108674049377441
    3. 'return' → logprob: -2.210867404937744
    4. ' unique' → logprob: -3.960867404937744
    5. ' sets' → logprob: -3.960867404937744
    6. ' if' → logprob: -4.085867404937744
    7. 'unique' → logprob: -4.210867404937744
    8. 'result' → logprob: -4.335867404937744
    9. ' result' → logprob: -4.460867404937744
    10. 'S' → logprob: -4.585867404937744

Token 240: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16838911175727844
    2. ' return' → logprob: -2.793389081954956
    3. 'return' → logprob: -4.043389320373535
    4. ' if' → logprob: -4.168389320373535
    5. ' sets' → logprob: -5.168389320373535
    6. ' U' → logprob: -5.168389320373535
    7. ' S' → logprob: -5.418389320373535
    8. 'if' → logprob: -5.918389320373535
    9. ' unique' → logprob: -5.918389320373535
    10. 'C' → logprob: -5.918389320373535

Token 241: ' uniq' (ID: 130316)
  Prédit: 'S'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'S' → logprob: -1.1116634607315063
    2. 'U' → logprob: -2.736663341522217
    3. ' S' → logprob: -2.736663341522217
    4. 'C' → logprob: -2.861663341522217
    5. ' perms' → logprob: -3.236663341522217
    6. ' U' → logprob: -3.361663341522217
    7. 'return' → logprob: -3.486663341522217
    8. '   ' → logprob: -3.611663341522217
    9. 'P' → logprob: -3.611663341522217
    10. 's' → logprob: -3.736663341522217

Token 242: 'ify' (ID: 1985)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.19965055584907532
    2. 'u' → logprob: -2.699650526046753
    3. '_set' → logprob: -2.949650526046753
    4. 's' → logprob: -4.074650764465332
    5. 'A' → logprob: -4.449650764465332
    6. '=' → logprob: -4.699650764465332
    7. '_sets' → logprob: -5.449650764465332
    8. '=set' → logprob: -5.449650764465332
    9. 'uity' → logprob: -5.449650764465332
    10. 'ue' → logprob: -6.699650764465332

Token 243: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.23227310180664062
    2. 'd' → logprob: -2.1072731018066406
    3. '=' → logprob: -2.4822731018066406
    4. 'ed' → logprob: -7.357273101806641
    5. 'ied' → logprob: -7.482273101806641
    6. '_' → logprob: -8.60727310180664
    7. 'e' → logprob: -8.73227310180664
    8. 'y' → logprob: -8.85727310180664
    9. ' ' → logprob: -9.48227310180664
    10. '=set' → logprob: -9.73227310180664

Token 244: ' lambda' (ID: 27871)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lambda' → logprob: -0.09941964596509933
    2. ' lambda' → logprob: -2.474419593811035
    3. '{' → logprob: -5.474419593811035
    4. 'set' → logprob: -5.474419593811035
    5. '(lambda' → logprob: -6.474419593811035
    6. '   ' → logprob: -8.849419593811035
    7. ' set' → logprob: -9.224419593811035
    8. ' {' → logprob: -9.599419593811035
    9. 'partial' → logprob: -9.849419593811035
    10. ' ' → logprob: -9.974419593811035

Token 245: ' X' (ID: 2127)
  Prédit: '{'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '{' → logprob: -0.8527226448059082
    2. 'x' → logprob: -1.1027226448059082
    3. '{x' → logprob: -2.352722644805908
    4. 'A' → logprob: -3.227722644805908
    5. 'set' → logprob: -3.727722644805908
    6. 'perm' → logprob: -3.852722644805908
    7. 'lambda' → logprob: -4.102722644805908
    8. ' x' → logprob: -4.102722644805908
    9. 's' → logprob: -5.227722644805908
    10. 'p' → logprob: -5.727722644805908

Token 246: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0004996551433578134
    2. '{' → logprob: -8.750499725341797
    3. ':set' → logprob: -9.000499725341797
    4. ' :' → logprob: -9.250499725341797
    5. 'set' → logprob: -10.375499725341797
    6. ':X' → logprob: -10.375499725341797
    7. 'X' → logprob: -11.125499725341797
    8. ',' → logprob: -11.625499725341797
    9. ':{' → logprob: -11.875499725341797
    10. 'len' → logprob: -12.375499725341797

Token 247: ' len' (ID: 4631)
  Prédit: '{'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '{' → logprob: -0.03524534031748772
    2. ' {' → logprob: -3.660245418548584
    3. 'set' → logprob: -5.035245418548584
    4. 'len' → logprob: -6.535245418548584
    5. ' set' → logprob: -7.785245418548584
    6. '{x' → logprob: -8.410244941711426
    7. ' len' → logprob: -9.660244941711426
    8. '{i' → logprob: -9.910244941711426
    9. '   ' → logprob: -10.160244941711426
    10. '{s' → logprob: -10.285244941711426

Token 248: '({' (ID: 3972)
  Prédit: '{'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '{' → logprob: -0.006201449781656265
    2. '{x' → logprob: -6.131201267242432
    3. 'set' → logprob: -6.631201267242432
    4. ' {' → logprob: -6.881201267242432
    5. '(set' → logprob: -7.256201267242432
    6. '({' → logprob: -7.381201267242432
    7. '{s' → logprob: -8.63120174407959
    8. '{
' → logprob: -9.63120174407959
    9. '{i' → logprob: -9.88120174407959
    10. '{k' → logprob: -11.25620174407959

Token 249: '*' (ID: 9)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.3125659227371216
    2. 'tuple' → logprob: -1.6875659227371216
    3. 'p' → logprob: -3.062565803527832
    4. ' x' → logprob: -4.312565803527832
    5. 'fro' → logprob: -5.187565803527832
    6. 'e' → logprob: -5.812565803527832
    7. ' tuple' → logprob: -5.812565803527832
    8. '*' → logprob: -6.062565803527832
    9. 'elem' → logprob: -6.187565803527832
    10. '*x' → logprob: -6.687565803527832

Token 250: 'X' (ID: 55)
  Prédit: 'per'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'per' → logprob: -0.10888521373271942
    2. 'X' → logprob: -2.3588852882385254
    3. '(per' → logprob: -5.858885288238525
    4. ' permutations' → logprob: -5.983885288238525
    5. 'perm' → logprob: -6.608885288238525
    6. 'chain' → logprob: -6.733885288238525
    7. 'map' → logprob: -8.358884811401367
    8. ' X' → logprob: -8.358884811401367
    9. '(X' → logprob: -9.108884811401367
    10. 'p' → logprob: -10.608884811401367

Token 251: '})
' (ID: 6795)
  Prédit: '})'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '})' → logprob: -0.00019829542725346982
    2. ' })' → logprob: -8.625198364257812
    3. '})
' → logprob: -11.375198364257812
    4. '}))' → logprob: -13.625198364257812
    5. '})

' → logprob: -13.750198364257812
    6. ' ' → logprob: -14.125198364257812
    7. ')' → logprob: -14.250198364257812
    8. '   ' → logprob: -14.625198364257812
    9. '])' → logprob: -14.625198364257812
    10. '}' → logprob: -14.750198364257812

Token 252: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6323412656784058
    2. ' ==' → logprob: -1.2573412656784058
    3. '<|end|>' → logprob: -1.8823412656784058
    4. '==' → logprob: -4.132341384887695
    5. ' >=' → logprob: -5.507341384887695
    6. ')' → logprob: -6.382341384887695
    7. '()' → logprob: -6.382341384887695
    8. ' >' → logprob: -6.382341384887695
    9. ' ' → logprob: -6.507341384887695
    10. '  ' → logprob: -6.757341384887695

Token 253: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.22129634022712708
    2. 'return' → logprob: -1.9712963104248047
    3. ' return' → logprob: -3.4712963104248047
    4. '<|end|>' → logprob: -4.596296310424805
    5. ' if' → logprob: -5.096296310424805
    6. 'if' (adapté à ' if') → logprob: -5.471296310424805
    7. '    
' → logprob: -6.721296310424805
    8. 'unique' → logprob: -6.721296310424805
    9. '
' → logprob: -7.221296310424805
    10. 'def' → logprob: -7.346296310424805

Token 254: ' any' (ID: 1062)
  Prédit: 'uniq'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'uniq' → logprob: -0.040777307003736496
    2. ' uniq' → logprob: -3.4157772064208984
    3. '   ' → logprob: -5.790777206420898
    4. 'len' → logprob: -6.040777206420898
    5. ' len' → logprob: -7.540777206420898
    6. 'not' → logprob: -8.040777206420898
    7. '  ' → logprob: -8.915777206420898
    8. ' not' → logprob: -9.040777206420898
    9. 'uni' → logprob: -9.165777206420898
    10. ' ' → logprob: -9.165777206420898

Token 255: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.2813953757286072
    2. '(per' → logprob: -2.156395435333252
    3. '(st' → logprob: -2.406395435333252
    4. '(' → logprob: -3.406395435333252
    5. '(len' → logprob: -6.406395435333252
    6. '(not' → logprob: -6.531395435333252
    7. '(set' → logprob: -6.781395435333252
    8. '(part' → logprob: -7.156395435333252
    9. '(le' → logprob: -7.531395435333252
    10. '(unique' → logprob: -8.656394958496094

Token 256: '(lambda' (ID: 43341)
  Prédit: '(lambda'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.85943204164505
    2. '(' → logprob: -1.6094319820404053
    3. '(part' → logprob: -1.6094319820404053
    4. '(per' → logprob: -2.8594319820404053
    5. '(eq' → logprob: -2.9844319820404053
    6. '(gt' → logprob: -3.1094319820404053
    7. 'partial' → logprob: -4.734432220458984
    8. '(le' → logprob: -5.484432220458984
    9. 'lambda' → logprob: -6.109432220458984
    10. 'eq' → logprob: -6.359432220458984

Token 257: ' X' (ID: 2127)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.7455401420593262
    2. ' x' → logprob: -1.6205401420593262
    3. 'p' → logprob: -2.495540142059326
    4. 'lambda' → logprob: -3.120540142059326
    5. 'uniq' → logprob: -3.245540142059326
    6. 'X' → logprob: -3.370540142059326
    7. 'A' → logprob: -4.120540142059326
    8. ' p' → logprob: -4.370540142059326
    9. ' uniq' → logprob: -4.370540142059326
    10. 'perm' → logprob: -4.370540142059326

Token 258: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0024027663748711348
    2. ' :' → logprob: -6.3774027824401855
    3. ':X' → logprob: -7.7524027824401855
    4. ':set' → logprob: -8.627402305603027
    5. 'len' → logprob: -10.752402305603027
    6. ':
' → logprob: -11.002402305603027
    7. ',' → logprob: -11.252402305603027
    8. ':Set' → logprob: -12.127402305603027
    9. ':A' → logprob: -12.252402305603027
    10. 'X' → logprob: -12.502402305603027

Token 259: ' uniq' (ID: 130316)
  Prédit: 'uniq'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'uniq' → logprob: -0.05899324268102646
    2. 'len' → logprob: -3.183993339538574
    3. ' uniq' → logprob: -4.308993339538574
    4. ' len' → logprob: -6.308993339538574
    5. 'uni' → logprob: -8.808993339538574
    6. 'perm' → logprob: -8.933993339538574
    7. '   ' → logprob: -9.683993339538574
    8. 'not' → logprob: -10.183993339538574
    9. 'all' → logprob: -10.808993339538574
    10. ' ' → logprob: -10.933993339538574

Token 260: 'ify' (ID: 1985)
  Prédit: 'ify'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ify' → logprob: -0.008798216469585896
    2. '{' → logprob: -5.133798122406006
    3. 'e' → logprob: -7.258798122406006
    4. '(X' → logprob: -7.383798122406006
    5. 'ofy' → logprob: -7.508798122406006
    6. 'if' → logprob: -7.883798122406006
    7. 'er' → logprob: -9.133798599243164
    8. 'X' → logprob: -9.258798599243164
    9. 'fy' → logprob: -9.383798599243164
    10. 'ity' → logprob: -9.508798599243164

Token 261: '(X' (ID: 17061)
  Prédit: '(X'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(X' → logprob: -0.04696847125887871
    2. '(per' → logprob: -3.171968460083008
    3. '(list' → logprob: -7.046968460083008
    4. 'per' → logprob: -7.421968460083008
    5. '(set' → logprob: -7.421968460083008
    6. 'X' → logprob: -7.671968460083008
    7. '(S' → logprob: -7.796968460083008
    8. '((' → logprob: -8.296968460083008
    9. '(' → logprob: -8.546968460083008
    10. '(p' → logprob: -9.171968460083008

Token 262: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.021112702786922455
    2. ')==' → logprob: -4.27111291885376
    3. ')!=' → logprob: -5.27111291885376
    4. ')<' → logprob: -7.14611291885376
    5. ')>' → logprob: -8.146112442016602
    6. '):' → logprob: -8.771112442016602
    7. '),' → logprob: -8.896112442016602
    8. ')>=' → logprob: -9.146112442016602
    9. '(X' → logprob: -9.271112442016602
    10. ')},' → logprob: -10.146112442016602

Token 263: ' !=' (ID: 1666)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.28210118412971497
    2. '()' → logprob: -3.0321011543273926
    3. ')==' → logprob: -3.2821011543273926
    4. '==' → logprob: -3.4071011543273926
    5. ')>' → logprob: -3.9071011543273926
    6. '()<' → logprob: -4.032101154327393
    7. ' ==' → logprob: -4.282101154327393
    8. ')<' → logprob: -4.282101154327393
    9. ' <' → logprob: -4.532101154327393
    10. '(X' → logprob: -4.657101154327393

Token 264: ' len' (ID: 4631)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.00161555758677423
    2. ' len' → logprob: -6.751615524291992
    3. '0' → logprob: -9.251615524291992
    4. '3' → logprob: -9.751615524291992
    5. '4' → logprob: -9.876615524291992
    6. 'uniq' → logprob: -10.001615524291992
    7. '1' → logprob: -10.501615524291992
    8. '5' → logprob: -10.626615524291992
    9. ' ' → logprob: -10.751615524291992
    10. '{' → logprob: -10.876615524291992

Token 265: '(A' (ID: 10706)
  Prédit: '(X'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(X' → logprob: -0.025833632797002792
    2. 'X' → logprob: -3.7758336067199707
    3. '(A' → logprob: -6.275833606719971
    4. '(' → logprob: -8.275834083557129
    5. '(S' → logprob: -8.525834083557129
    6. '(set' → logprob: -9.525834083557129
    7. 'A' → logprob: -9.650834083557129
    8. '(B' → logprob: -10.025834083557129
    9. ' X' → logprob: -11.400834083557129
    10. '(x' → logprob: -11.400834083557129

Token 266: '),' (ID: 936)
  Prédit: '),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.00970203336328268
    2. '):
' → logprob: -5.509702205657959
    3. '):' → logprob: -5.884702205657959
    4. ')),' → logprob: -6.634702205657959
    5. ' ),' → logprob: -7.634702205657959
    6. ')):
' → logprob: -8.0097017288208
    7. '),
' → logprob: -8.3847017288208
    8. ',' → logprob: -9.5097017288208
    9. ')' → logprob: -9.6347017288208
    10. '   ' → logprob: -9.7597017288208

Token 267: ' (' (ID: 350)
  Prédit: 'per'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'per' → logprob: -0.142849400639534
    2. ' permutations' → logprob: -2.3928494453430176
    3. '(per' → logprob: -3.2678494453430176
    4. '[' → logprob: -6.392849445343018
    5. '   ' → logprob: -7.142849445343018
    6. '	per' → logprob: -7.892849445343018
    7. 'perm' → logprob: -8.76784896850586
    8. ' ' → logprob: -9.26784896850586
    9. 'map' → logprob: -9.26784896850586
    10. 'filter' → logprob: -9.76784896850586

Token 268: 'A' (ID: 32)
  Prédit: 'per'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'per' → logprob: -0.0062586660496890545
    2. ' permutations' → logprob: -5.881258487701416
    3. 'perm' → logprob: -7.006258487701416
    4. 'A' → logprob: -7.256258487701416
    5. '(per' → logprob: -7.256258487701416
    6. '   ' → logprob: -8.631258964538574
    7. 'chain' → logprob: -8.881258964538574
    8. '(A' → logprob: -9.006258964538574
    9. 'list' → logprob: -9.256258964538574
    10. 'filter' → logprob: -9.381258964538574

Token 269: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0045427423901855946
    2. ',B' → logprob: -5.504542827606201
    3. ' ,' → logprob: -7.879542827606201
    4. 'B' → logprob: -10.254542350769043
    5. ',A' → logprob: -11.254542350769043
    6. ',
' → logprob: -11.379542350769043
    7. ' permutations' → logprob: -12.754542350769043
    8. 'A' → logprob: -12.879542350769043
    9. ')),' → logprob: -13.254542350769043
    10. 'per' → logprob: -13.379542350769043

Token 270: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.012513887137174606
    2. ' B' → logprob: -4.387514114379883
    3. '   ' → logprob: -12.887514114379883
    4. ' ' → logprob: -14.262514114379883
    5. '  ' → logprob: -15.512514114379883
    6. '	B' → logprob: -15.512514114379883
    7. 'b' → logprob: -16.012514114379883
    8. '    ' → logprob: -16.387514114379883
    9. '       ' → logprob: -16.450014114379883
    10. ' ' → logprob: -16.575014114379883

Token 271: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.03118191473186016
    2. ')):
' → logprob: -3.531181812286377
    3. ')):' → logprob: -7.031181812286377
    4. ' ))' → logprob: -8.281182289123535
    5. ')))' → logprob: -8.906182289123535
    6. '   ' → logprob: -9.656182289123535
    7. ')):
' → logprob: -10.031182289123535
    8. ')' → logprob: -11.781182289123535
    9. ')))
' → logprob: -11.781182289123535
    10. '))))' → logprob: -12.281182289123535

Token 272: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.03020097129046917
    2. '):' → logprob: -3.530200958251953
    3. ')):
' → logprob: -8.030200958251953
    4. '   ' → logprob: -9.405200958251953
    5. ')' → logprob: -10.905200958251953
    6. ')):' → logprob: -11.280200958251953
    7. ' ):
' → logprob: -12.530200958251953
    8. '):
' → logprob: -12.905200958251953
    9. '       ' → logprob: -13.655200958251953
    10. ':
' → logprob: -13.780200958251953

Token 273: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -3.392824874026701e-05
    2. '
' → logprob: -10.75003433227539
    3. 'return' → logprob: -11.87503433227539
    4. ' return' → logprob: -12.37503433227539
    5. '           ' → logprob: -15.62503433227539
    6. '   ' → logprob: -15.62503433227539
    7. ',' → logprob: -15.75003433227539
    8. '	' → logprob: -15.87503433227539
    9. ')' → logprob: -16.25003433227539
    10. '      ' → logprob: -16.25003433227539

Token 274: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.7355991005897522
    2. '       ' → logprob: -1.2355990409851074
    3. ' return' → logprob: -1.4855990409851074
    4. '   ' → logprob: -5.860599040985107
    5. '	return' → logprob: -7.610599040985107
    6. '           ' → logprob: -8.360599517822266
    7. ' ' → logprob: -9.360599517822266
    8. '
' → logprob: -10.485599517822266
    9. '  ' → logprob: -11.360599517822266
    10. '	' → logprob: -11.485599517822266

Token 275: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0003501242317724973
    2. ' '' → logprob: -8.125349998474121
    3. '   ' → logprob: -10.375349998474121
    4. 'No' → logprob: -11.625349998474121
    5. '"No' → logprob: -11.625349998474121
    6. ' ' → logprob: -13.250349998474121
    7. '  ' → logprob: -13.750349998474121
    8. '	' → logprob: -13.750349998474121
    9. ' No' → logprob: -14.250349998474121
    10. '       ' → logprob: -15.625349998474121

Token 276: 'Yes' (ID: 13022)
  Prédit: 'No'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.010035599581897259
    2. ''' → logprob: -4.635035514831543
    3. 'Yes' → logprob: -8.260035514831543
    4. '"No' → logprob: -11.385035514831543
    5. ' No' → logprob: -12.260035514831543
    6. '''' → logprob: -13.260035514831543
    7. '"' → logprob: -14.135035514831543
    8. '```' → logprob: -14.510035514831543
    9. '
' → logprob: -15.135035514831543
    10. ''N' → logprob: -15.885035514831543

Token 277: ''
' (ID: 2207)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4508780241012573
    2. ')' → logprob: -1.3258780241012573
    3. '')' → logprob: -2.950878143310547
    4. '<|end|>' → logprob: -3.200878143310547
    5. ')
' → logprob: -5.950878143310547
    6. '
' → logprob: -7.200878143310547
    7. '')
' → logprob: -8.325878143310547
    8. '<|end|>' → logprob: -8.450878143310547
    9. '    
' → logprob: -8.700878143310547
    10. ''' → logprob: -9.700878143310547

Token 278: '    
' (ID: 1944)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0009762406698428094
    2. '<|end|>' → logprob: -7.375976085662842
    3. '    
' → logprob: -8.1259765625
    4. 'return' → logprob: -10.1259765625
    5. '
' → logprob: -11.8759765625
    6. ' return' → logprob: -13.7509765625
    7. '       ' → logprob: -13.7509765625
    8. '  
' → logprob: -14.0009765625
    9. '```' → logprob: -14.3759765625
    10. ')' → logprob: -14.5009765625

Token 279: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0009381395066156983
    2. '    
' → logprob: -7.8759379386901855
    3. 'return' → logprob: -7.8759379386901855
    4. ' return' → logprob: -9.125938415527344
    5. '<|end|>' → logprob: -10.125938415527344
    6. '	return' → logprob: -11.625938415527344
    7. '
' → logprob: -12.125938415527344
    8. ')' → logprob: -13.000938415527344
    9. '  
' → logprob: -13.125938415527344
    10. ' 
' → logprob: -13.250938415527344

Token 280: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.0034853199031203985
    2. '   ' → logprob: -5.753485202789307
    3. ' return' → logprob: -8.253485679626465
    4. '    
' → logprob: -10.628485679626465
    5. 'No' → logprob: -11.878485679626465
    6. '
' → logprob: -12.128485679626465
    7. '	return' → logprob: -12.753485679626465
    8. ' ' → logprob: -13.753485679626465
    9. '  ' → logprob: -13.753485679626465
    10. '```' → logprob: -13.753485679626465

Token 281: ' ' (ID: 220)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.0007956892368383706
    2. '   ' → logprob: -7.500795841217041
    3. ' return' → logprob: -8.375795364379883
    4. '
' → logprob: -12.250795364379883
    5. 'def' → logprob: -13.375795364379883
    6. '#' → logprob: -13.500795364379883
    7. '```' → logprob: -13.625795364379883
    8. '    
' → logprob: -13.875795364379883
    9. 'for' → logprob: -14.375795364379883
    10. '	return' → logprob: -14.625795364379883

Token 282: '5' (ID: 20)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.000146687583765015
    2. ' return' → logprob: -9.625146865844727
    3. '   ' → logprob: -10.000146865844727
    4. ''' → logprob: -10.875146865844727
    5. '```' → logprob: -12.500146865844727
    6. 'No' → logprob: -12.875146865844727
    7. '    
' → logprob: -13.375146865844727
    8. '
' → logprob: -13.500146865844727
    9. '	return' → logprob: -13.625146865844727
    10. '#' → logprob: -13.625146865844727

Token 283: '.' (ID: 13)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16364844143390656
    2. ' return' → logprob: -2.4136483669281006
    3. 'return' → logprob: -3.2886483669281006
    4. '    
' → logprob: -4.41364860534668
    5. 'def' → logprob: -5.03864860534668
    6. '
' → logprob: -5.78864860534668
    7. ' 
' → logprob: -7.78864860534668
    8. '  
' → logprob: -8.16364860534668
    9. '#' → logprob: -8.28864860534668
    10. '   
' → logprob: -8.28864860534668

Token 284: ' Sub' (ID: 5934)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.011353490874171257
    2. ' return' → logprob: -4.636353492736816
    3. '#' → logprob: -7.136353492736816
    4. 'result' → logprob: -8.511353492736816
    5. 'for' → logprob: -8.886353492736816
    6. '   ' → logprob: -9.261353492736816
    7. '
' → logprob: -9.261353492736816
    8. 'if' → logprob: -9.511353492736816
    9. 'from' → logprob: -10.136353492736816
    10. 'pass' → logprob: -10.511353492736816

Token 285: 'stitution' (ID: 20066)
  Prédit: 'set'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'set' → logprob: -0.21690122783184052
    2. 'sets' → logprob: -2.2169013023376465
    3. 'sequence' → logprob: -2.5919013023376465
    4. 'se' → logprob: -5.2169013023376465
    5. ' sequences' → logprob: -5.7169013023376465
    6. 'seq' → logprob: -7.2169013023376465
    7. 'def' → logprob: -7.4669013023376465
    8. 'stract' → logprob: -8.716900825500488
    9. 's' → logprob: -8.966900825500488
    10. 'A' → logprob: -9.216900825500488

Token 286: ' indices' (ID: 30378)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3563729226589203
    2. 'return' → logprob: -1.8563729524612427
    3. ' return' → logprob: -3.106372833251953
    4. 'for' → logprob: -3.231372833251953
    5. ' for' → logprob: -4.356372833251953
    6. 'A' → logprob: -4.481372833251953
    7. 'def' → logprob: -4.856372833251953
    8. '...' → logprob: -5.606372833251953
    9. '(A' → logprob: -5.606372833251953
    10. ' A' → logprob: -5.981372833251953

Token 287: ' avec' (ID: 3937)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.8446053266525269
    2. '   ' → logprob: -1.5946053266525269
    3. ',' → logprob: -2.7196054458618164
    4. '=' → logprob: -2.8446054458618164
    5. 'for' → logprob: -2.8446054458618164
    6. ' for' → logprob: -3.0946054458618164
    7. 'def' → logprob: -3.8446054458618164
    8. 'indices' → logprob: -3.9696054458618164
    9. 'return' → logprob: -4.094605445861816
    10. ' return' → logprob: -4.344605445861816

Token 288: ' Counter' (ID: 32251)
  Prédit: 'zip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'zip' → logprob: -1.2972979545593262
    2. 'per' → logprob: -1.5472979545593262
    3. 'lambda' → logprob: -1.6722979545593262
    4. 'range' → logprob: -2.422297954559326
    5. 'enumer' → logprob: -2.797297954559326
    6. 'partial' → logprob: -3.047297954559326
    7. ' permutations' → logprob: -3.797297954559326
    8. 'chain' → logprob: -3.922297954559326
    9. 'dict' → logprob: -4.047297954559326
    10. 'st' → logprob: -4.297297954559326

Token 289: ',' (ID: 11)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'count' → logprob: -1.2174136638641357
    2. ' counter' → logprob: -1.7174136638641357
    3. ' count' → logprob: -1.9674136638641357
    4. '   ' → logprob: -2.4674136638641357
    5. 'counter' → logprob: -2.8424136638641357
    6. ' counts' → logprob: -2.8424136638641357
    7. 'counts' → logprob: -3.2174136638641357
    8. ' return' → logprob: -3.3424136638641357
    9. ' cnt' → logprob: -3.8424136638641357
    10. ' if' → logprob: -4.342413902282715

Token 290: ' combine' (ID: 21700)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.21962465345859528
    2. 'return' → logprob: -2.0946247577667236
    3. '#' → logprob: -5.0946245193481445
    4. ' counts' → logprob: -5.2196245193481445
    5. ' indices' → logprob: -5.3446245193481445
    6. ' for' → logprob: -5.3446245193481445
    7. '   ' → logprob: -5.4696245193481445
    8. 'def' → logprob: -5.4696245193481445
    9. 'counts' → logprob: -5.5946245193481445
    10. 'indices' → logprob: -5.7196245193481445

Token 291: ' zip' (ID: 16216)
  Prédit: '(A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.9094583988189697
    2. ',' → logprob: -2.1594583988189697
    3. '_counter' → logprob: -2.5344583988189697
    4. 'd' → logprob: -2.7844583988189697
    5. '(C' → logprob: -2.7844583988189697
    6. ' =' → logprob: -3.6594583988189697
    7. 'with' → logprob: -3.7844583988189697
    8. 'counter' → logprob: -3.7844583988189697
    9. '=' → logprob: -3.9094583988189697
    10. '(
' → logprob: -3.9094583988189697

Token 292: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.2569777965545654
    2. ',' → logprob: -1.6319777965545654
    3. '(A' → logprob: -1.6319777965545654
    4. ' and' → logprob: -3.1319777965545654
    5. 'for' → logprob: -3.1319777965545654
    6. 'from' → logprob: -3.8819777965545654
    7. ' for' → logprob: -3.8819777965545654
    8. 'and' → logprob: -3.8819777965545654
    9. 'counts' → logprob: -4.1319780349731445
    10. 'indices' → logprob: -4.2569780349731445

Token 293: ' dict' (ID: 11878)
  Prédit: 'chain'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'chain' → logprob: -0.786871612071991
    2. 'filter' → logprob: -1.7868716716766357
    3. '   ' → logprob: -2.4118716716766357
    4. ' chain' → logprob: -2.6618716716766357
    5. 'map' → logprob: -3.4118716716766357
    6. 'all' → logprob: -3.6618716716766357
    7. 'partial' → logprob: -3.9118716716766357
    8. 'zip' → logprob: -4.036871433258057
    9. 'set' → logprob: -4.036871433258057
    10. 'len' → logprob: -4.661871433258057

Token 294: ',' (ID: 11)
  Prédit: '(A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.7997798919677734
    2. ',' → logprob: -1.4247798919677734
    3. '   ' → logprob: -2.1747798919677734
    4. ' =' → logprob: -2.7997798919677734
    5. 'def' → logprob: -4.174779891967773
    6. 'A' → logprob: -4.174779891967773
    7. 's' → logprob: -4.299779891967773
    8. '(C' → logprob: -4.799779891967773
    9. ' and' → logprob: -4.924779891967773
    10. 'return' → logprob: -5.049779891967773

Token 295: ' enumerate' (ID: 29671)
  Prédit: 'chain'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'chain' → logprob: -0.6351518034934998
    2. 'filter' → logprob: -1.8851518630981445
    3. 'Counter' → logprob: -2.2601518630981445
    4. ' chain' → logprob: -3.0101518630981445
    5. 'set' → logprob: -3.6351518630981445
    6. 'partial' → logprob: -4.0101518630981445
    7. 'counter' → logprob: -4.2601518630981445
    8. 'zip' → logprob: -4.2601518630981445
    9. 'enumer' → logprob: -4.3851518630981445
    10. 'update' → logprob: -4.5101518630981445

Token 296: ',' (ID: 11)
  Prédit: '(A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.5601502656936646
    2. '   ' → logprob: -1.8101502656936646
    3. ',' → logprob: -2.310150146484375
    4. 'def' → logprob: -2.935150146484375
    5. ' and' → logprob: -4.685150146484375
    6. ')' → logprob: -4.685150146484375
    7. 'indices' → logprob: -4.685150146484375
    8. 'A' → logprob: -5.060150146484375
    9. ' return' → logprob: -5.310150146484375
    10. ' for' → logprob: -5.310150146484375

Token 297: ' chain' (ID: 13464)
  Prédit: 'chain'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'chain' → logprob: -1.2448065280914307
    2. 'filter' → logprob: -1.4948065280914307
    3. 'set' → logprob: -1.7448065280914307
    4. 'Counter' → logprob: -2.4948065280914307
    5. 'partial' → logprob: -2.9948065280914307
    6. 'zip' → logprob: -3.1198065280914307
    7. 'lambda' → logprob: -3.6198065280914307
    8. 'sum' → logprob: -3.7448065280914307
    9. 'len' → logprob: -4.619806289672852
    10. ' chain' → logprob: -4.744806289672852

Token 298: '!
' (ID: 4175)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16911989450454712
    2. 'counts' → logprob: -3.0441198348999023
    3. ',' → logprob: -3.5441198348999023
    4. 'count' → logprob: -4.044119834899902
    5. 'indices' → logprob: -4.169119834899902
    6. 'counter' → logprob: -4.794119834899902
    7. ' counts' → logprob: -5.044119834899902
    8. '    
' → logprob: -5.419119834899902
    9. 'freq' → logprob: -6.044119834899902
    10. ' counter' → logprob: -6.419119834899902

Token 299: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09005573391914368
    2. ' indices' → logprob: -3.3400557041168213
    3. 'indices' → logprob: -3.8400557041168213
    4. 'count' → logprob: -5.2150559425354
    5. ' counter' → logprob: -5.7150559425354
    6. ' return' → logprob: -5.9650559425354
    7. 'counts' → logprob: -6.2150559425354
    8. ' counts' → logprob: -6.3400559425354
    9. 'idx' → logprob: -6.3400559425354
    10. ' idx' → logprob: -6.5900559425354

Token 300: ' idx' (ID: 14016)
  Prédit: 'counter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'counter' → logprob: -1.443679928779602
    2. 'count' → logprob: -1.568679928779602
    3. 'counts' → logprob: -1.568679928779602
    4. 'indices' → logprob: -2.6936798095703125
    5. 'C' → logprob: -3.0686798095703125
    6. 'cnt' → logprob: -3.0686798095703125
    7. 'freq' → logprob: -3.0686798095703125
    8. 'idx' (adapté à ' idx') → logprob: -3.1936798095703125
    9. 'c' → logprob: -4.4436798095703125
    10. 'd' → logprob: -4.9436798095703125

Token 301: 'A' (ID: 32)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.034720659255981445
    2. ' =' → logprob: -3.7847206592559814
    3. '_map' → logprob: -5.659720420837402
    4. '_counter' → logprob: -5.909720420837402
    5. '=' → logprob: -6.534720420837402
    6. '_counts' → logprob: -6.784720420837402
    7. '_s' → logprob: -7.034720420837402
    8. '_' → logprob: -8.159720420837402
    9. 'ects' → logprob: -8.284720420837402
    10. ',' → logprob: -8.784720420837402

Token 302: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2814095914363861
    2. '=' → logprob: -1.4064096212387085
    3. ',' → logprob: -9.15640926361084
    4. 'A' → logprob: -9.40640926361084
    5. 's' → logprob: -10.15640926361084
    6. '_counter' → logprob: -11.65640926361084
    7. ' counter' → logprob: -12.65640926361084
    8. '_counts' → logprob: -12.78140926361084
    9. '   ' → logprob: -12.90640926361084
    10. ' ' → logprob: -13.03140926361084

Token 303: ' dict' (ID: 11878)
  Prédit: 'Counter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Counter' → logprob: -0.1307174265384674
    2. ' Counter' → logprob: -2.1307175159454346
    3. 'dict' → logprob: -6.0057172775268555
    4. ' dict' → logprob: -7.2557172775268555
    5. '{' → logprob: -7.8807172775268555
    6. 'Chain' → logprob: -9.380717277526855
    7. ' defaultdict' → logprob: -9.880717277526855
    8. 'counter' → logprob: -11.505717277526855
    9. ' {' → logprob: -11.505717277526855
    10. 'Dict' → logprob: -11.630717277526855

Token 304: '(chain' (ID: 124348)
  Prédit: '(chain'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(chain' → logprob: -0.03798709064722061
    2. '(zip' → logprob: -3.412986993789673
    3. '(en' → logprob: -5.662987232208252
    4. '(C' → logprob: -7.787987232208252
    5. '((' → logprob: -8.162986755371094
    6. 'chain' → logprob: -10.287986755371094
    7. '(' → logprob: -10.787986755371094
    8. 'enumer' → logprob: -10.787986755371094
    9. 'zip' → logprob: -11.287986755371094
    10. '(map' → logprob: -11.537986755371094

Token 305: '.from' (ID: 10935)
  Prédit: '(en'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(en' → logprob: -0.04016472026705742
    2. '.from' → logprob: -3.2901647090911865
    3. 'from' → logprob: -6.290164947509766
    4. '(
' → logprob: -9.290164947509766
    5. '(zip' → logprob: -9.790164947509766
    6. '(' → logprob: -9.915164947509766
    7. 'enumer' → logprob: -10.040164947509766
    8. '(from' → logprob: -11.790164947509766
    9. '(map' → logprob: -12.290164947509766
    10. ',en' → logprob: -12.665164947509766

Token 306: '_iter' (ID: 27043)
  Prédit: 'enumer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'enumer' → logprob: -0.06541980057954788
    2. '(en' → logprob: -2.815419912338257
    3. 'iter' → logprob: -6.065419673919678
    4. '_iter' → logprob: -7.565419673919678
    5. 'enum' → logprob: -8.690420150756836
    6. '(' → logprob: -9.190420150756836
    7. '_en' → logprob: -9.565420150756836
    8. 'zip' → logprob: -10.315420150756836
    9. ' enumerate' → logprob: -10.315420150756836
    10. '(iter' → logprob: -10.565420150756836

Token 307: 'able' (ID: 562)
  Prédit: 'able'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'able' → logprob: -1.6240566083070007e-06
    2. 'tools' → logprob: -14.625001907348633
    3. 'chain' → logprob: -15.000001907348633
    4. 'ble' → logprob: -15.000001907348633
    5. 'ate' → logprob: -15.875001907348633
    6. 'ABLE' → logprob: -17.125001907348633
    7. '(chain' → logprob: -17.125001907348633
    8. '```' → logprob: -17.375001907348633
    9. 'ools' → logprob: -17.625001907348633
    10. '(' → logprob: -17.625001907348633

Token 308: '([' (ID: 5194)
  Prédit: '(en'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(en' → logprob: -0.19199138879776
    2. '((' → logprob: -2.6919913291931152
    3. '(map' → logprob: -2.6919913291931152
    4. 'map' → logprob: -3.9419913291931152
    5. '(zip' → logprob: -5.066991329193115
    6. '(
' → logprob: -5.316991329193115
    7. 'enumer' → logprob: -5.566991329193115
    8. '(' → logprob: -6.191991329193115
    9. '(((' → logprob: -6.941991329193115
    10. '(st' → logprob: -7.066991329193115

Token 309: '[(' (ID: 20542)
  Prédit: '[('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[(' → logprob: -0.8893275856971741
    2. 'enumer' → logprob: -0.8893275856971741
    3. 'zip' → logprob: -2.7643275260925293
    4. '((' → logprob: -2.8893275260925293
    5. '(en' → logprob: -3.2643275260925293
    6. ' enumerate' → logprob: -5.139327526092529
    7. '(zip' → logprob: -5.139327526092529
    8. '[((' → logprob: -6.139327526092529
    9. 'map' → logprob: -6.264327526092529
    10. ' [(' → logprob: -6.639327526092529

Token 310: 'v' (ID: 85)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.9052152633666992
    2. 'k' → logprob: -1.1552152633666992
    3. 'i' → logprob: -2.655215263366699
    4. 'x' → logprob: -3.280215263366699
    5. '(i' → logprob: -3.530215263366699
    6. '(k' → logprob: -3.655215263366699
    7. '(a' → logprob: -3.780215263366699
    8. 'e' → logprob: -4.280215263366699
    9. 'elem' → logprob: -4.655215263366699
    10. 'v' → logprob: -4.780215263366699

Token 311: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.02801571600139141
    2. ',k' → logprob: -3.778015613555908
    3. ',i' → logprob: -6.153015613555908
    4. ' ,' → logprob: -6.278015613555908
    5. 'k' → logprob: -8.278016090393066
    6. ',j' → logprob: -9.778016090393066
    7. ',a' → logprob: -9.903016090393066
    8. ',index' → logprob: -10.028016090393066
    9. ',n' → logprob: -10.153016090393066
    10. ',y' → logprob: -10.153016090393066

Token 312: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.016652049496769905
    2. ' i' → logprob: -4.2666521072387695
    3. '(i' → logprob: -6.3916521072387695
    4. 'k' → logprob: -7.6416521072387695
    5. 'j' → logprob: -8.64165210723877
    6. ' (' → logprob: -10.26665210723877
    7. '   ' → logprob: -10.39165210723877
    8. ' ' → logprob: -10.89165210723877
    9. 'idx' → logprob: -11.14165210723877
    10. '
' → logprob: -11.76665210723877

Token 313: ')]' (ID: 15710)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.01835501752793789
    2. ')]' → logprob: -4.018354892730713
    3. ' )' → logprob: -9.143355369567871
    4. '),' → logprob: -10.268355369567871
    5. ')],' → logprob: -11.018355369567871
    6. '+' → logprob: -11.518355369567871
    7. 'n' → logprob: -11.643355369567871
    8. ')])' → logprob: -12.143355369567871
    9. ')
' → logprob: -12.518355369567871
    10. ']' → logprob: -12.768355369567871

Token 314: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.3494167625904083
    2. 'for' → logprob: -1.224416732788086
    3. ')' → logprob: -8.224416732788086
    4. ',' → logprob: -8.349416732788086
    5. '   ' → logprob: -8.599416732788086
    6. ' ' → logprob: -9.599416732788086
    7. '       ' → logprob: -10.099416732788086
    8. ']' → logprob: -10.224416732788086
    9. '    ' → logprob: -10.474416732788086
    10. '  ' → logprob: -10.849416732788086

Token 315: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.2923016846179962
    2. ' i' → logprob: -1.5423016548156738
    3. 'v' → logprob: -3.417301654815674
    4. ' v' → logprob: -5.042301654815674
    5. ',' → logprob: -8.667302131652832
    6. 'enumer' → logprob: -10.917302131652832
    7. 'k' → logprob: -11.042302131652832
    8. ',i' → logprob: -11.292302131652832
    9. '	i' → logprob: -11.542302131652832
    10. 'idx' → logprob: -12.042302131652832

Token 316: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0013309523928910494
    2. ',v' → logprob: -7.126330852508545
    3. 'in' → logprob: -8.376331329345703
    4. ' ,' → logprob: -8.501331329345703
    5. ' in' → logprob: -9.376331329345703
    6. 'v' → logprob: -12.501331329345703
    7. ',n' → logprob: -13.751331329345703
    8. ',A' → logprob: -14.126331329345703
    9. ',value' → logprob: -15.376331329345703
    10. ',x' → logprob: -15.376331329345703

Token 317: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.006723064463585615
    2. ' v' → logprob: -5.006722927093506
    3. '(v' → logprob: -12.381723403930664
    4. ',' → logprob: -14.256723403930664
    5. '	v' → logprob: -14.256723403930664
    6. ' (' → logprob: -14.381723403930664
    7. 'a' → logprob: -14.381723403930664
    8. ',v' → logprob: -14.506723403930664
    9. '(' → logprob: -15.256723403930664
    10. ' in' → logprob: -15.881723403930664

Token 318: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.14286933839321136
    2. 'in' → logprob: -2.017869234085083
    3. 'A' → logprob: -8.892868995666504
    4. 'enumer' → logprob: -11.267868995666504
    5. ' ' → logprob: -11.517868995666504
    6. 'import' → logprob: -11.642868995666504
    7. ')' → logprob: -12.955368995666504
    8. ',' → logprob: -12.955368995666504
    9. '
' → logprob: -13.017868995666504
    10. 'In' → logprob: -13.080368995666504

Token 319: ' enumerate' (ID: 29671)
  Prédit: 'enumer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'enumer' → logprob: -0.2254423052072525
    2. ' enumerate' → logprob: -1.6004422903060913
    3. 'A' → logprob: -11.225441932678223
    4. 'en' → logprob: -12.225441932678223
    5. '(en' → logprob: -12.850441932678223
    6. 'enum' → logprob: -13.100441932678223
    7. 'zip' → logprob: -13.850441932678223
    8. ' ' → logprob: -14.350441932678223
    9. '
' → logprob: -14.725441932678223
    10. ',' → logprob: -14.850441932678223

Token 320: '(A' (ID: 10706)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.15417052805423737
    2. '(A' → logprob: -2.029170513153076
    3. 'SA' → logprob: -5.404170513153076
    4. 'B' → logprob: -6.029170513153076
    5. ' A' → logprob: -6.279170513153076
    6. '(S' → logprob: -6.404170513153076
    7. '(B' → logprob: -7.279170513153076
    8. 'SB' → logprob: -10.279170989990234
    9. '(' → logprob: -10.404170989990234
    10. '
' → logprob: -10.654170989990234

Token 321: ')]' (ID: 15710)
  Prédit: ']))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']))' → logprob: -0.3622828722000122
    2. ')]' → logprob: -1.7372828722000122
    3. '])' → logprob: -2.4872827529907227
    4. ')])' → logprob: -3.3622827529907227
    5. '])]' → logprob: -5.612282752990723
    6. ']))
' → logprob: -6.237282752990723
    7. ']' → logprob: -6.737282752990723
    8. '])))' → logprob: -7.112282752990723
    9. ' ]' → logprob: -7.237282752990723
    10. '   ' → logprob: -7.737282752990723

Token 322: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0038979414384812117
    2. '))
' → logprob: -6.5038981437683105
    3. ')))' → logprob: -6.5038981437683105
    4. ' ))' → logprob: -8.003897666931152
    5. ']))' → logprob: -8.128897666931152
    6. '   ' → logprob: -9.128897666931152
    7. ',' → logprob: -10.253897666931152
    8. ')' → logprob: -10.378897666931152
    9. ' ' → logprob: -10.503897666931152
    10. ')),' → logprob: -11.128897666931152

Token 323: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.010867771692574024
    2. '<|end|>' → logprob: -5.385867595672607
    3. '
' → logprob: -5.635867595672607
    4. ')
' → logprob: -6.760867595672607
    5. '   ' → logprob: -7.010867595672607
    6. ' )' → logprob: -9.260868072509766
    7. '[' → logprob: -9.760868072509766
    8. '<|end|>' → logprob: -9.885868072509766
    9. '))' → logprob: -10.010868072509766
    10. ',' → logprob: -10.135868072509766

Token 324: ' idx' (ID: 14016)
  Prédit: 'idx'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'idx' (adapté à ' idx') → logprob: -0.5193860530853271
    2. ' idx' → logprob: -1.2693860530853271
    3. '   ' → logprob: -2.394386053085327
    4. '<|end|>' → logprob: -3.894386053085327
    5. ')' → logprob: -5.644386291503906
    6. '
' → logprob: -5.894386291503906
    7. ' return' → logprob: -6.769386291503906
    8. 'return' → logprob: -7.394386291503906
    9. '	idx' → logprob: -7.394386291503906
    10. ' ' → logprob: -7.644386291503906

Token 325: 'B' (ID: 33)
  Prédit: 'B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.005027982871979475
    2. 'A' → logprob: -5.380027770996094
    3. ' =' → logprob: -8.005027770996094
    4. '=' → logprob: -10.005027770996094
    5. ',' → logprob: -10.880027770996094
    6. '<|end|>' → logprob: -12.380027770996094
    7. ' B' → logprob: -13.130027770996094
    8. 's' → logprob: -13.630027770996094
    9. '_B' → logprob: -14.505027770996094
    10. '_' → logprob: -15.130027770996094

Token 326: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1269282102584839
    2. '=' → logprob: -2.1269283294677734
    3. ' ' → logprob: -16.626928329467773
    4. ' =
' → logprob: -17.001928329467773
    5. ' ' → logprob: -17.626928329467773
    6. '=
' → logprob: -17.751928329467773
    7. '=dict' → logprob: -18.251928329467773
    8. ' =
' → logprob: -18.251928329467773
    9. '=}' → logprob: -18.376928329467773
    10. '＝' → logprob: -18.501928329467773

Token 327: ' dict' (ID: 11878)
  Prédit: ' dict'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' dict' → logprob: -0.3133452832698822
    2. 'dict' → logprob: -1.3133453130722046
    3. '{' → logprob: -9.563344955444336
    4. '(dict' → logprob: -12.063344955444336
    5. ' {' → logprob: -12.938344955444336
    6. '=dict' → logprob: -13.813344955444336
    7. 'collections' → logprob: -14.188344955444336
    8. 'Dict' → logprob: -14.438344955444336
    9. '{}' → logprob: -14.688344955444336
    10. 'chain' → logprob: -15.188344955444336

Token 328: '(chain' (ID: 124348)
  Prédit: '(chain'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(chain' → logprob: -1.318681188422488e-05
    2. '(ch' → logprob: -12.25001335144043
    3. 'chain' → logprob: -12.37501335144043
    4. '(' → logprob: -12.62501335144043
    5. '(
' → logprob: -14.75001335144043
    6. ' chain' → logprob: -16.37501335144043
    7. '.chain' → logprob: -16.75001335144043
    8. ' (' → logprob: -16.75001335144043
    9. '(counter' → logprob: -17.50001335144043
    10. '(dict' → logprob: -17.62501335144043

Token 329: '.from' (ID: 10935)
  Prédit: '.from'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.from' → logprob: -0.00010568885772954673
    2. 'from' → logprob: -9.250105857849121
    3. '.' → logprob: -11.750105857849121
    4. ' .' → logprob: -14.000105857849121
    5. '(chain' → logprob: -15.000105857849121
    6. '.chain' → logprob: -15.125105857849121
    7. '(from' → logprob: -15.750105857849121
    8. '#from' → logprob: -17.375104904174805
    9. '[from' → logprob: -17.750104904174805
    10. ' from' → logprob: -18.250104904174805

Token 330: '_iter' (ID: 27043)
  Prédit: '_iter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_iter' → logprob: -0.012630193494260311
    2. 'iter' → logprob: -4.387629985809326
    3. 'Iter' → logprob: -10.512630462646484
    4. 'chain' → logprob: -10.637630462646484
    5. 'from' → logprob: -10.762630462646484
    6. 'import' → logprob: -11.012630462646484
    7. 'flatten' → logprob: -12.012630462646484
    8. 'enumer' → logprob: -12.137630462646484
    9. '(iter' → logprob: -12.637630462646484
    10. '(' → logprob: -12.762630462646484

Token 331: 'able' (ID: 562)
  Prédit: 'able'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'able' → logprob: -1.581364631652832
    2. '(chain' → logprob: -1.581364631652832
    3. 'chain' → logprob: -1.706364631652832
    4. 'from' → logprob: -1.831364631652832
    5. 'iter' → logprob: -2.331364631652832
    6. '_iter' → logprob: -2.956364631652832
    7. 'umer' → logprob: -3.206364631652832
    8. 'ter' → logprob: -4.206364631652832
    9. '_chain' → logprob: -5.206364631652832
    10. '[(' → logprob: -5.331364631652832

Token 332: '([' (ID: 5194)
  Prédit: '(['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '([' → logprob: -0.5240022540092468
    2. '[' → logprob: -0.8990022540092468
    3. '[[' → logprob: -7.5240020751953125
    4. '([[' → logprob: -8.774002075195312
    5. '([(' → logprob: -8.899002075195312
    6. '       ' → logprob: -11.774002075195312
    7. '(' → logprob: -11.899002075195312
    8. '[(' → logprob: -12.024002075195312
    9. '((' → logprob: -12.024002075195312
    10. '   ' → logprob: -12.524002075195312

Token 333: '[(' (ID: 20542)
  Prédit: '[('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[(' → logprob: -0.001708732801489532
    2. '[' → logprob: -6.501708507537842
    3. '[[' → logprob: -9.001708984375
    4. '([(' → logprob: -9.501708984375
    5. '[((' → logprob: -12.126708984375
    6. ' [(' → logprob: -13.626708984375
    7. '((' → logprob: -14.626708984375
    8. '([' → logprob: -14.751708984375
    9. '   ' → logprob: -15.501708984375
    10. '       ' → logprob: -15.626708984375

Token 334: 'v' (ID: 85)
  Prédit: 'v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.0008132012444548309
    2. '(v' → logprob: -7.125813007354736
    3. ' v' → logprob: -12.625813484191895
    4. 'b' → logprob: -13.125813484191895
    5. 'w' → logprob: -13.250813484191895
    6. '   ' → logprob: -14.125813484191895
    7. ' (' → logprob: -14.750813484191895
    8. '       ' → logprob: -16.375812530517578
    9. '  ' → logprob: -16.625812530517578
    10. '(b' → logprob: -16.625812530517578

Token 335: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0008538239635527134
    2. ',i' → logprob: -7.125854015350342
    3. ' ,' → logprob: -10.000853538513184
    4. 'i' → logprob: -12.500853538513184
    5. ' i' → logprob: -15.625853538513184
    6. ',j' → logprob: -17.0008544921875
    7. ',
' → logprob: -17.1258544921875
    8. 'B' → logprob: -17.2508544921875
    9. 'b' → logprob: -17.7508544921875
    10. '   ' → logprob: -17.8758544921875

Token 336: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.1797574758529663
    2. ' i' → logprob: -1.8047574758529663
    3. 'j' → logprob: -11.929757118225098
    4. 'b' → logprob: -13.929757118225098
    5. ' j' → logprob: -13.929757118225098
    6. ' ' → logprob: -14.054757118225098
    7. 'B' → logprob: -14.429757118225098
    8. '   ' → logprob: -14.429757118225098
    9. '    ' → logprob: -15.179757118225098
    10. ',' → logprob: -15.179757118225098

Token 337: ')]' (ID: 15710)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.06278707832098007
    2. ')]' → logprob: -2.8127870559692383
    3. ']' → logprob: -7.312787055969238
    4. ' )' → logprob: -9.562787055969238
    5. 'for' → logprob: -9.812787055969238
    6. ' for' → logprob: -12.062787055969238
    7. ')])' → logprob: -12.312787055969238
    8. ')
' → logprob: -12.687787055969238
    9. '   ' → logprob: -13.062787055969238
    10. ')],' → logprob: -13.187787055969238

Token 338: ' for' (ID: 395)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1775410771369934
    2. 'for' → logprob: -2.1775410175323486
    3. ' for' → logprob: -3.0525410175323486
    4. ']' → logprob: -7.177541255950928
    5. ')]' → logprob: -7.427541255950928
    6. '   ' → logprob: -8.17754077911377
    7. ')])' → logprob: -8.67754077911377
    8. ' )' → logprob: -8.67754077911377
    9. '])' → logprob: -10.80254077911377
    10. '  ' → logprob: -11.17754077911377

Token 339: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.003337886882945895
    2. ' i' → logprob: -5.753337860107422
    3. ',' → logprob: -8.753337860107422
    4. 'enumer' → logprob: -13.378337860107422
    5. ',i' → logprob: -15.003337860107422
    6. 'B' → logprob: -15.753337860107422
    7. ' ,' → logprob: -16.753337860107422
    8. '   ' → logprob: -16.878337860107422
    9. '
' → logprob: -17.003337860107422
    10. '	i' → logprob: -17.628337860107422

Token 340: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.1756367712223437e-05
    2. ' ,' → logprob: -11.625011444091797
    3. ',B' → logprob: -13.875011444091797
    4. ',
' → logprob: -14.500011444091797
    5. ',b' → logprob: -14.625011444091797
    6. ' in' → logprob: -15.000011444091797
    7. 'B' → logprob: -15.375011444091797
    8. 'enumer' → logprob: -15.875011444091797
    9. 'in' → logprob: -16.125011444091797
    10. 'b' → logprob: -18.125011444091797

Token 341: ' v' (ID: 323)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.01655520871281624
    2. ' B' → logprob: -4.141555309295654
    3. 'enumer' → logprob: -7.891555309295654
    4. ' enumerate' → logprob: -8.891554832458496
    5. 'b' → logprob: -11.766554832458496
    6. ' ' → logprob: -15.141554832458496
    7. ',' → logprob: -15.391554832458496
    8. '(B' → logprob: -15.641554832458496
    9. ' in' → logprob: -15.641554832458496
    10. 'zip' → logprob: -16.141555786132812

Token 342: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.35004451870918274
    2. 'in' → logprob: -1.2250444889068604
    3. 'enumer' → logprob: -6.7250447273254395
    4. 'B' → logprob: -8.475044250488281
    5. ',' → logprob: -9.100044250488281
    6. ' enumerate' → logprob: -9.975044250488281
    7. ')' → logprob: -11.600044250488281
    8. ' ' → logprob: -11.975044250488281
    9. '  ' → logprob: -12.600044250488281
    10. '   ' → logprob: -12.850044250488281

Token 343: ' enumerate' (ID: 29671)
  Prédit: 'enumer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'enumer' → logprob: -0.049508340656757355
    2. 'B' → logprob: -3.0495083332061768
    3. ' enumerate' → logprob: -7.174508571624756
    4. 'b' → logprob: -8.924508094787598
    5. 'per' → logprob: -11.424508094787598
    6. ' B' → logprob: -12.174508094787598
    7. '
' → logprob: -13.049508094787598
    8. 'enum' → logprob: -14.049508094787598
    9. 'perm' → logprob: -14.549508094787598
    10. '_B' → logprob: -15.299508094787598

Token 344: '(B' (ID: 8409)
  Prédit: '(B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(B' → logprob: -0.016041642054915428
    2. 'B' → logprob: -4.1410417556762695
    3. '(' → logprob: -13.01604175567627
    4. 'b' → logprob: -13.39104175567627
    5. ' B' → logprob: -13.39104175567627
    6. ' (' → logprob: -14.14104175567627
    7. '(b' → logprob: -14.64104175567627
    8. '(A' → logprob: -15.51604175567627
    9. '_B' → logprob: -16.016040802001953
    10. 'def' → logprob: -16.516040802001953

Token 345: ')]' (ID: 15710)
  Prédit: ')]'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.8071736693382263
    2. ']))' → logprob: -0.8071736693382263
    3. '])' → logprob: -2.682173728942871
    4. '])]' → logprob: -3.682173728942871
    5. ')])' → logprob: -4.557173728942871
    6. ']' → logprob: -6.307173728942871
    7. '()' → logprob: -7.307173728942871
    8. '])))' → logprob: -7.807173728942871
    9. '])):
' → logprob: -9.307173728942871
    10. '()]' → logprob: -9.307173728942871

Token 346: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.00011772842844948173
    2. '))
' → logprob: -9.125117301940918
    3. ')))' → logprob: -12.375117301940918
    4. '   ' → logprob: -13.375117301940918
    5. ')' → logprob: -13.625117301940918
    6. ' ))' → logprob: -14.375117301940918
    7. '()))' → logprob: -14.375117301940918
    8. '));' → logprob: -15.375117301940918
    9. '))

' → logprob: -16.625118255615234
    10. ']))' → logprob: -17.375118255615234

Token 347: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4970223903656006
    2. ')' → logprob: -1.1220223903656006
    3. '<|end|>' → logprob: -2.7470223903656006
    4. '    
' → logprob: -8.37202262878418
    5. '       ' → logprob: -8.37202262878418
    6. ',' → logprob: -8.74702262878418
    7. ':' → logprob: -8.74702262878418
    8. '[' → logprob: -8.87202262878418
    9. '
' → logprob: -8.87202262878418
    10. '<|end|>' → logprob: -9.12202262878418

Token 348: ' P' (ID: 398)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.33048322796821594
    2. '<|end|>' → logprob: -1.8304831981658936
    3. '   ' → logprob: -2.2054831981658936
    4. '{' → logprob: -6.330483436584473
    5. '}' → logprob: -6.830483436584473
    6. 'return' → logprob: -6.830483436584473
    7. '<|end|>' → logprob: -6.830483436584473
    8. ']' → logprob: -7.205483436584473
    9. ' return' → logprob: -7.455483436584473
    10. 'idx' → logprob: -7.455483436584473

Token 349: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.38697999715805054
    2. '=' → logprob: -1.1369800567626953
    3. 'A' → logprob: -10.011980056762695
    4. ',' → logprob: -11.136980056762695
    5. ')' → logprob: -11.636980056762695
    6. '[' → logprob: -11.886980056762695
    7. ' ' → logprob: -12.261980056762695
    8. '(' → logprob: -12.386980056762695
    9. ' =)' → logprob: -12.636980056762695
    10. '[:]' → logprob: -13.011980056762695

Token 350: ' list' (ID: 1562)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.48556244373321533
    2. ' [' → logprob: -1.7355624437332153
    3. '[list' → logprob: -2.235562324523926
    4. 'list' → logprob: -3.110562324523926
    5. ' list' → logprob: -3.485562324523926
    6. '[p' → logprob: -4.985562324523926
    7. '[(' → logprob: -5.360562324523926
    8. 'tuple' → logprob: -5.610562324523926
    9. '[A' → logprob: -5.860562324523926
    10. '{' → logprob: -6.235562324523926

Token 351: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.2813180685043335
    2. '(st' → logprob: -1.5313180685043335
    3. '(chain' → logprob: -3.906318187713623
    4. '(zip' → logprob: -4.781318187713623
    5. '(per' → logprob: -8.531317710876465
    6. '(' → logprob: -9.156317710876465
    7. 'st' → logprob: -10.281317710876465
    8. '(range' → logprob: -10.406317710876465
    9. '(acc' → logprob: -10.531317710876465
    10. '(br' → logprob: -10.656317710876465

Token 352: '(idx' (ID: 42793)
  Prédit: '(lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.5478796362876892
    2. '(idx' → logprob: -1.047879695892334
    3. '(part' → logprob: -2.672879695892334
    4. '(' → logprob: -6.297879695892334
    5. '(
' → logprob: -9.172879219055176
    6. '((' → logprob: -9.922879219055176
    7. '(eq' → logprob: -10.297879219055176
    8. '(B' → logprob: -10.672879219055176
    9. '(operator' → logprob: -11.797879219055176
    10. '(add' → logprob: -11.922879219055176

Token 353: 'B' (ID: 33)
  Prédit: 'B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.17974551022052765
    2. 'A' → logprob: -1.8047455549240112
    3. ' B' → logprob: -14.4297456741333
    4. ' A' → logprob: -15.9297456741333
    5. 'a' → logprob: -16.929744720458984
    6. 'b' → logprob: -17.304744720458984
    7. '_B' → logprob: -17.429744720458984
    8. 'А' → logprob: -17.992244720458984
    9. '_A' → logprob: -18.242244720458984
    10. 'lambda' → logprob: -18.492244720458984

Token 354: '.get' (ID: 775)
  Prédit: '.get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.get' → logprob: -0.093687042593956
    2. ',' → logprob: -2.468687057495117
    3. '.__' → logprob: -5.593687057495117
    4. 'get' → logprob: -7.593687057495117
    5. ',A' → logprob: -8.218687057495117
    6. ',get' → logprob: -8.968687057495117
    7. ' ,' → logprob: -10.093687057495117
    8. '   ' → logprob: -11.218687057495117
    9. 'A' → logprob: -11.343687057495117
    10. '.' → logprob: -12.218687057495117

Token 355: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.002014167606830597
    2. ',A' → logprob: -6.37701416015625
    3. ' ,' → logprob: -8.25201416015625
    4. 'A' → logprob: -10.12701416015625
    5. ',P' → logprob: -12.25201416015625
    6. '(A' → logprob: -12.25201416015625
    7. ',
' → logprob: -14.50201416015625
    8. '(' → logprob: -14.62701416015625
    9. ',(' → logprob: -15.75201416015625
    10. ',B' → logprob: -16.50201416015625

Token 356: ' SA' (ID: 19609)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.0018383220303803682
    2. '(A' → logprob: -6.876838207244873
    3. ' A' → logprob: -7.251838207244873
    4. 'SA' → logprob: -9.626838684082031
    5. '(S' → logprob: -12.001838684082031
    6. '(' → logprob: -12.251838684082031
    7. '[A' → logprob: -12.751838684082031
    8. '   ' → logprob: -13.126838684082031
    9. '[' → logprob: -13.251838684082031
    10. 'map' → logprob: -13.251838684082031

Token 357: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0004037402104586363
    2. '))
' → logprob: -8.37540340423584
    3. ' ))' → logprob: -8.87540340423584
    4. ')))' → logprob: -11.00040340423584
    5. '   ' → logprob: -12.25040340423584
    6. ',' → logprob: -12.75040340423584
    7. ' ' → logprob: -13.00040340423584
    8. '()))' → logprob: -13.50040340423584
    9. '[' → logprob: -13.62540340423584
    10. '(S' → logprob: -13.87540340423584

Token 358: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0012388024479150772
    2. '<|end|>' → logprob: -7.001238822937012
    3. '[::-' → logprob: -9.626238822937012
    4. ')
' → logprob: -10.126238822937012
    5. ' )' → logprob: -10.376238822937012
    6. '[' → logprob: -10.376238822937012
    7. '   ' → logprob: -10.626238822937012
    8. ')return' → logprob: -10.751238822937012
    9. '
' → logprob: -10.876238822937012
    10. ')]' → logprob: -11.251238822937012

Token 359: ' P' (ID: 398)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.018066123127937317
    2. '   ' → logprob: -4.268065929412842
    3. '<|end|>' → logprob: -6.268065929412842
    4. '[' → logprob: -7.268065929412842
    5. 'return' → logprob: -7.643065929412842
    6. ')return' → logprob: -9.14306640625
    7. ']' → logprob: -9.51806640625
    8. ' )' → logprob: -9.64306640625
    9. '[]' → logprob: -9.64306640625
    10. '#' → logprob: -9.76806640625

Token 360: ' =' (ID: 314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 361: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.006537973415106535
    2. ' list' → logprob: -5.256537914276123
    3. '[' → logprob: -7.256537914276123
    4. '[list' → logprob: -7.881537914276123
    5. ' [' → logprob: -9.756538391113281
    6. 'P' → logprob: -10.631538391113281
    7. 'tuple' → logprob: -10.756538391113281
    8. 'reduce' → logprob: -10.881538391113281
    9. '(list' → logprob: -10.881538391113281
    10. '[P' → logprob: -11.006538391113281

Token 362: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.028537768870592117
    2. '(acc' → logprob: -3.9035377502441406
    3. '(chain' → logprob: -5.653537750244141
    4. '(per' → logprob: -6.278537750244141
    5. '(re' → logprob: -7.528537750244141
    6. '(st' → logprob: -7.778537750244141
    7. '(part' → logprob: -7.903537750244141
    8. '(' → logprob: -7.903537750244141
    9. '(sorted' → logprob: -8.02853775024414
    10. '(zip' → logprob: -8.40353775024414

Token 363: '(P' (ID: 8952)
  Prédit: '(idx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(idx' → logprob: -0.00272189499810338
    2. '(lambda' → logprob: -6.377721786499023
    3. '(part' → logprob: -7.377721786499023
    4. '(P' → logprob: -8.877721786499023
    5. '(' → logprob: -9.127721786499023
    6. '(add' → logprob: -10.377721786499023
    7. 'idx' → logprob: -10.502721786499023
    8. '(S' → logprob: -10.502721786499023
    9. '(A' → logprob: -11.002721786499023
    10. '((' → logprob: -11.127721786499023

Token 364: '.__' (ID: 10210)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.03505623713135719
    2. '))' → logprob: -4.535056114196777
    3. 'index' → logprob: -5.535056114196777
    4. 'get' → logprob: -5.660056114196777
    5. 'eq' → logprob: -5.660056114196777
    6. ',index' → logprob: -6.410056114196777
    7. 'lambda' → logprob: -6.660056114196777
    8. ',P' → logprob: -6.910056114196777
    9. ',get' → logprob: -7.035056114196777
    10. '.index' → logprob: -7.160056114196777

Token 365: 'getitem' (ID: 147767)
  Prédit: 'getitem'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'getitem' → logprob: -0.007180622313171625
    2. 'index' → logprob: -5.132180690765381
    3. 'contains' → logprob: -7.257180690765381
    4. 'get' → logprob: -7.882180690765381
    5. 'item' → logprob: -10.257180213928223
    6. '__' → logprob: -10.632180213928223
    7. 'invert' → logprob: -10.757180213928223
    8. 'set' → logprob: -11.007180213928223
    9. 'mul' → logprob: -11.257180213928223
    10. 'call' → logprob: -11.507180213928223

Token 366: '__,' (ID: 23783)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -8.351697033504024e-05
    2. ',
' → logprob: -11.125083923339844
    3. ' ,' → logprob: -11.125083923339844
    4. ',[' → logprob: -11.500083923339844
    5. ',i' → logprob: -11.875083923339844
    6. '(' → logprob: -12.000083923339844
    7. ',index' → logprob: -12.125083923339844
    8. ',p' → logprob: -12.750083923339844
    9. ',int' → logprob: -12.750083923339844
    10. 'range' → logprob: -13.000083923339844

Token 367: ' list' (ID: 1562)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.02650185115635395
    2. 'P' → logprob: -4.026501655578613
    3. ' range' → logprob: -5.776501655578613
    4. 'idx' → logprob: -6.651501655578613
    5. 'map' → logprob: -6.651501655578613
    6. '[' → logprob: -7.026501655578613
    7. '(range' → logprob: -7.401501655578613
    8. 'list' → logprob: -8.151501655578613
    9. 'SA' → logprob: -8.276501655578613
    10. 'A' → logprob: -8.401501655578613

Token 368: '(map' (ID: 16946)
  Prédit: '(range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(range' → logprob: -0.03382342681288719
    2. '(P' → logprob: -4.158823490142822
    3. '(map' → logprob: -4.533823490142822
    4. '(idx' → logprob: -5.658823490142822
    5. '(S' → logprob: -6.283823490142822
    6. 'range' → logprob: -6.658823490142822
    7. '(' → logprob: -9.158823013305664
    8. '(A' → logprob: -10.283823013305664
    9. '([' → logprob: -11.158823013305664
    10. '(chain' → logprob: -11.158823013305664

Token 369: '(idx' (ID: 42793)
  Prédit: '(idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(idx' → logprob: -0.2066744714975357
    2. '(range' → logprob: -1.7066744565963745
    3. '(S' → logprob: -5.831674575805664
    4. '(' → logprob: -7.331674575805664
    5. '(P' → logprob: -7.831674575805664
    6. '(part' → logprob: -7.831674575805664
    7. '(list' → logprob: -8.706674575805664
    8. '(acc' → logprob: -8.956674575805664
    9. '(sorted' → logprob: -9.331674575805664
    10. '(map' → logprob: -9.331674575805664

Token 370: 'A' (ID: 32)
  Prédit: '(S'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(S' → logprob: -1.50361168384552
    2. 'A' → logprob: -1.75361168384552
    3. 'SA' → logprob: -1.75361168384552
    4. '(range' → logprob: -2.3786115646362305
    5. '(dict' → logprob: -2.3786115646362305
    6. '(br' → logprob: -2.6286115646362305
    7. '(idx' → logprob: -2.7536115646362305
    8. '(B' → logprob: -3.5036115646362305
    9. 'B' → logprob: -3.5036115646362305
    10. '(A' → logprob: -3.8786115646362305

Token 371: '.get' (ID: 775)
  Prédit: '.get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.get' → logprob: -0.016643375158309937
    2. 'get' → logprob: -4.266643524169922
    3. '.__' → logprob: -7.141643524169922
    4. ',' → logprob: -7.266643524169922
    5. 'range' → logprob: -8.141643524169922
    6. ')))' → logprob: -9.016643524169922
    7. '.values' → logprob: -9.266643524169922
    8. '.keys' → logprob: -9.266643524169922
    9. '))' → logprob: -9.391643524169922
    10. '(S' → logprob: -9.516643524169922

Token 372: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0643383339047432
    2. '(S' → logprob: -2.814338445663452
    3. '(P' → logprob: -7.314338207244873
    4. '(range' → logprob: -7.564338207244873
    5. ',S' → logprob: -7.564338207244873
    6. ',P' → logprob: -8.939338684082031
    7. ' ,' → logprob: -8.939338684082031
    8. ')))' → logprob: -9.439338684082031
    9. 'range' → logprob: -9.939338684082031
    10. '(list' → logprob: -9.939338684082031

Token 373: ' SA' (ID: 19609)
  Prédit: 'SA'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'SA' → logprob: -0.002118023345246911
    2. ' SA' → logprob: -6.752118110656738
    3. 'SB' → logprob: -7.127118110656738
    4. '(S' → logprob: -9.502118110656738
    5. 'S' → logprob: -10.877118110656738
    6. '   ' → logprob: -11.127118110656738
    7. ' ' → logprob: -11.252118110656738
    8. '  ' → logprob: -12.627118110656738
    9. '[' → logprob: -13.002118110656738
    10. '
' → logprob: -13.252118110656738

Token 374: '))))
' (ID: 55084)
  Prédit: ')))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.034049857407808304
    2. '))))' → logprob: -3.4090497493743896
    3. ')))
' → logprob: -8.409049987792969
    4. '))' → logprob: -9.284049987792969
    5. '))))
' → logprob: -10.284049987792969
    6. ')' → logprob: -10.909049987792969
    7. ' ' → logprob: -10.909049987792969
    8. '())))' → logprob: -12.159049987792969
    9. ')))

' → logprob: -12.409049987792969
    10. ')));' → logprob: -13.159049987792969

Token 375: '    
' (ID: 1944)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00443878211081028
    2. '<|end|>' → logprob: -5.629438877105713
    3. '   ' → logprob: -8.879438400268555
    4. '[' → logprob: -9.004438400268555
    5. ':' → logprob: -9.254438400268555
    6. '
' → logprob: -9.379438400268555
    7. ':return' → logprob: -9.629438400268555
    8. ')return' → logprob: -9.754438400268555
    9. ']' → logprob: -10.629438400268555
    10. ')
' → logprob: -10.754438400268555

Token 376: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.015534857288002968
    2. ':' → logprob: -4.5155348777771
    3. '   ' → logprob: -5.8905348777771
    4. ':return' → logprob: -7.6405348777771
    5. '):' → logprob: -7.8905348777771
    6. ':)' → logprob: -8.765534400939941
    7. ' return' → logprob: -9.015534400939941
    8. ')return' → logprob: -9.265534400939941
    9. '<|end|>' → logprob: -9.390534400939941
    10. 'return' → logprob: -9.640534400939941

Token 377: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.03257882595062256
    2. ')' → logprob: -3.907578945159912
    3. '   ' → logprob: -5.157578945159912
    4. ' return' → logprob: -5.407578945159912
    5. 'P' → logprob: -7.407578945159912
    6. '[' → logprob: -8.282578468322754
    7. 'if' → logprob: -8.782578468322754
    8. 'for' → logprob: -9.032578468322754
    9. 'result' → logprob: -9.157578468322754
    10. ']' → logprob: -9.782578468322754

Token 378: ' ' (ID: 220)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.26235431432724
    2. '   ' → logprob: -1.8873543739318848
    3. ' return' → logprob: -3.1373543739318848
    4. ')' → logprob: -3.3873543739318848
    5. 'P' → logprob: -8.137353897094727
    6. 'pass' → logprob: -8.387353897094727
    7. '<|end|>' → logprob: -8.637353897094727
    8. '#' → logprob: -8.762353897094727
    9. 'result' → logprob: -9.012353897094727
    10. 'def' → logprob: -9.137353897094727

Token 379: '6' (ID: 21)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.39369750022888184
    2. 'P' → logprob: -1.8936975002288818
    3. 'if' → logprob: -3.143697500228882
    4. 'p' → logprob: -3.643697500228882
    5. 'from' → logprob: -3.893697500228882
    6. 'in' → logprob: -4.393697738647461
    7. 'inv' → logprob: -4.893697738647461
    8. 'result' → logprob: -4.893697738647461
    9. 'per' → logprob: -5.018697738647461
    10. '#' → logprob: -5.268697738647461

Token 380: '.' (ID: 13)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7754217982292175
    2. ' return' → logprob: -0.7754217982292175
    3. 'return' → logprob: -2.9004218578338623
    4. ' if' → logprob: -5.150421619415283
    5. '#' → logprob: -5.150421619415283
    6. ' #' → logprob: -5.900421619415283
    7. '
' → logprob: -6.025421619415283
    8. 'def' → logprob: -7.025421619415283
    9. 'result' → logprob: -7.150421619415283
    10. ')' → logprob: -7.275421619415283

Token 381: ' Cycle' (ID: 65262)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.9401766657829285
    2. 'P' → logprob: -2.5651767253875732
    3. ' return' → logprob: -2.8151767253875732
    4. 'inv' → logprob: -2.8151767253875732
    5. 'result' → logprob: -2.9401767253875732
    6. 'in' → logprob: -3.0651767253875732
    7. 'res' → logprob: -3.5651767253875732
    8. 'from' → logprob: -3.5651767253875732
    9. 'count' → logprob: -4.065176486968994
    10. 'cycle' → logprob: -4.065176486968994

Token 382: ' dé' (ID: 2393)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.5430545210838318
    2. ' decomposition' → logprob: -2.0430545806884766
    3. 'd' → logprob: -2.2930545806884766
    4. 'de' → logprob: -2.5430545806884766
    5. ' detection' → logprob: -3.9180545806884766
    6. 'def' → logprob: -4.543054580688477
    7. 'for' → logprob: -4.543054580688477
    8. '_detection' → logprob: -4.668054580688477
    9. '_' → logprob: -4.793054580688477
    10. '_count' → logprob: -4.918054580688477

Token 383: 'tection' (ID: 90592)
  Prédit: 'tection'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tection' → logprob: -0.030184200033545494
    2. 'composition' → logprob: -3.530184268951416
    3. 'com' → logprob: -8.280183792114258
    4. 'fin' → logprob: -9.780183792114258
    5. 'te' → logprob: -10.155183792114258
    6. 'comp' → logprob: -10.905183792114258
    7. 'duction' → logprob: -11.780183792114258
    8. 'c' → logprob: -11.780183792114258
    9. 'TECTION' → logprob: -11.780183792114258
    10. 'f' → logprob: -12.155183792114258

Token 384: ' de' (ID: 334)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.3425779938697815
    2. 'def' → logprob: -1.5925779342651367
    3. 'cycles' → logprob: -3.3425779342651367
    4. '   ' → logprob: -4.092577934265137
    5. 'seen' → logprob: -4.592577934265137
    6. 'P' → logprob: -4.717577934265137
    7. 'from' → logprob: -5.592577934265137
    8. ')' → logprob: -6.342577934265137
    9. 'perm' → logprob: -6.842577934265137
    10. ' visited' → logprob: -6.842577934265137

Token 385: ' permutation' (ID: 135200)
  Prédit: 'P'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'P' → logprob: -1.2620607614517212
    2. ' permutations' → logprob: -1.3870607614517212
    3. ' permutation' → logprob: -2.2620606422424316
    4. ' P' → logprob: -2.3870606422424316
    5. 'len' → logprob: -3.3870606422424316
    6. ' graph' → logprob: -3.3870606422424316
    7. ' la' → logprob: -3.6370606422424316
    8. 'graph' → logprob: -3.7620606422424316
    9. 'length' → logprob: -4.012060642242432
    10. 'perm' → logprob: -4.012060642242432

Token 386: ' par' (ID: 686)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.71823650598526
    2. 'def' → logprob: -1.5932364463806152
    3. '   ' → logprob: -1.7182364463806152
    4. ' visited' → logprob: -2.4682364463806152
    5. 'cycles' → logprob: -4.218236446380615
    6. ' def' → logprob: -4.468236446380615
    7. ' cycles' → logprob: -5.718236446380615
    8. 'from' → logprob: -5.718236446380615
    9. ' seen' → logprob: -6.343236446380615
    10. ' from' → logprob: -6.343236446380615

Token 387: ' accumulate' (ID: 74226)
  Prédit: 'partial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'partial' → logprob: -0.782235860824585
    2. 'lambda' → logprob: -1.282235860824585
    3. 'def' → logprob: -2.157235860824585
    4. 'Counter' → logprob: -3.282235860824585
    5. 'list' → logprob: -3.282235860824585
    6. 'visited' → logprob: -4.282236099243164
    7. 'reduce' → logprob: -4.282236099243164
    8. 'chain' → logprob: -4.907236099243164
    9. 'len' → logprob: -5.282236099243164
    10. 'set' → logprob: -5.407236099243164

Token 388: ' +' (ID: 659)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.6815152168273926
    2. ',' → logprob: -1.9315152168273926
    3. ' cycle' → logprob: -2.0565152168273926
    4. '(lambda' → logprob: -2.4315152168273926
    5. 'cycle' → logprob: -2.6815152168273926
    6. 'def' → logprob: -3.1815152168273926
    7. '(acc' → logprob: -3.4315152168273926
    8. ' from' → logprob: -3.5565152168273926
    9. ' def' → logprob: -3.5565152168273926
    10. 'from' → logprob: -3.6815152168273926

Token 389: ' set' (ID: 920)
  Prédit: 'partial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'partial' → logprob: -0.3640297055244446
    2. 'lambda' → logprob: -1.7390296459197998
    3. 'eq' → logprob: -2.4890296459198
    4. '(lambda' → logprob: -3.9890296459198
    5. 'add' → logprob: -4.989029884338379
    6. 'chain' → logprob: -5.239029884338379
    7. 'st' → logprob: -5.364029884338379
    8. 'gt' → logprob: -6.114029884338379
    9. ' partial' → logprob: -6.489029884338379
    10. 'operator' → logprob: -6.614029884338379

Token 390: ' comprehension' (ID: 91423)
  Prédit: 'P'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'P' → logprob: -1.622973918914795
    2. 'visited' → logprob: -1.747973918914795
    3. ' P' → logprob: -2.247973918914795
    4. ',' → logprob: -2.247973918914795
    5. 'def' → logprob: -2.747973918914795
    6. ' cycle' → logprob: -2.997973918914795
    7. 'cycle' → logprob: -3.622973918914795
    8. '()' → logprob: -3.622973918914795
    9. ' def' → logprob: -3.997973918914795
    10. ' visited' → logprob: -4.122973918914795

Token 391: ' &' (ID: 827)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6547207236289978
    2. ' cycle' → logprob: -1.7797207832336426
    3. 'cycle' → logprob: -2.5297207832336426
    4. 'visited' → logprob: -3.2797207832336426
    5. ' visited' → logprob: -3.7797207832336426
    6. 'def' → logprob: -3.9047207832336426
    7. ' def' → logprob: -3.9047207832336426
    8. ')' → logprob: -4.279720783233643
    9. ' return' → logprob: -4.404720783233643
    10. ',' → logprob: -4.779720783233643

Token 392: ' all' (ID: 722)
  Prédit: ' lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' lambda' → logprob: -1.607537865638733
    2. ' chain' → logprob: -1.982537865638733
    3. ' partial' → logprob: -2.6075377464294434
    4. 'lambda' → logprob: -2.7325377464294434
    5. 'reduce' → logprob: -2.8575377464294434
    6. ' len' → logprob: -3.1075377464294434
    7. 'chain' → logprob: -3.1075377464294434
    8. ' any' → logprob: -3.2325377464294434
    9. 'len' → logprob: -3.2325377464294434
    10. 'partial' → logprob: -3.3575377464294434

Token 393: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4496736526489258
    2. ' cycle' → logprob: -2.824673652648926
    3. 'def' → logprob: -2.949673652648926
    4. ' def' → logprob: -3.199673652648926
    5. '(
' → logprob: -3.324673652648926
    6. 'cycle' → logprob: -3.699673652648926
    7. 'cycles' → logprob: -4.199673652648926
    8. ' P' → logprob: -4.449673652648926
    9. 'P' → logprob: -4.574673652648926
    10. ',' → logprob: -4.574673652648926

Token 394: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0158785581588745
    2. ' cycle' → logprob: -2.015878677368164
    3. ')' → logprob: -2.140878677368164
    4. 'def' → logprob: -3.015878677368164
    5. 'cycle' → logprob: -3.140878677368164
    6. '(
' → logprob: -3.390878677368164
    7. ' P' → logprob: -3.640878677368164
    8. 'P' → logprob: -3.890878677368164
    9. ' def' → logprob: -4.140878677368164
    10. 'range' → logprob: -4.265878677368164

Token 395: ' t' (ID: 260)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'visited' → logprob: -1.1289395093917847
    2. '   ' → logprob: -1.6289395093917847
    3. 'cycles' → logprob: -1.7539395093917847
    4. 'def' → logprob: -2.253939628601074
    5. 'seen' → logprob: -2.878939628601074
    6. 'pos' → logprob: -3.253939628601074
    7. 'cycle' → logprob: -4.003939628601074
    8. 'inv' → logprob: -4.253939628601074
    9. 'C' → logprob: -4.628939628601074
    10. 'P' → logprob: -5.003939628601074

Token 396: ',' (ID: 11)
  Prédit: 'P'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'P' → logprob: -0.9866403341293335
    2. ' =' → logprob: -1.4866403341293335
    3. ' P' → logprob: -2.361640453338623
    4. 'emp' → logprob: -2.486640453338623
    5. '=' → logprob: -3.111640453338623
    6. 'r' → logprob: -3.361640453338623
    7. 'def' → logprob: -3.861640453338623
    8. ' def' → logprob: -4.111640453338623
    9. 'arget' → logprob: -4.361640453338623
    10. '=P' → logprob: -4.861640453338623

Token 397: ' seen' (ID: 6177)
  Prédit: 'P'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'P' → logprob: -0.6237014532089233
    2. 'set' → logprob: -2.373701572418213
    3. '0' → logprob: -2.623701572418213
    4. '{' → logprob: -2.873701572418213
    5. 's' → logprob: -3.123701572418213
    6. 'acc' → logprob: -3.373701572418213
    7. 'visited' → logprob: -3.873701572418213
    8. ' P' → logprob: -4.123701572418213
    9. 'seen' → logprob: -4.498701572418213
    10. 'False' → logprob: -4.623701572418213

Token 398: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.20161351561546326
    2. ' =' → logprob: -1.7016135454177856
    3. ',' → logprob: -9.076613426208496
    4. '=set' → logprob: -9.451613426208496
    5. '={}' → logprob: -12.951613426208496
    6. '={},' → logprob: -13.576613426208496
    7. '=[]' → logprob: -13.576613426208496
    8. ' ' → logprob: -14.451613426208496
    9. '=[],' → logprob: -14.451613426208496
    10. ' ,' → logprob: -14.826613426208496

Token 399: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.002395390532910824
    2. ' ' → logprob: -6.627395153045654
    3. '(' → logprob: -7.502395153045654
    4. '[],' → logprob: -9.252395629882812
    5. '-' → logprob: -9.377395629882812
    6. '[' → logprob: -9.627395629882812
    7. '1' → logprob: -10.002395629882812
    8. 'acc' → logprob: -10.252395629882812
    9. 'range' → logprob: -10.627395629882812
    10. 'lambda' → logprob: -10.752395629882812

Token 400: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00167470658197999
    2. '1' → logprob: -8.37667465209961
    3. '[' → logprob: -8.37667465209961
    4. '(' → logprob: -8.50167465209961
    5. '[],' → logprob: -8.75167465209961
    6. 'range' → logprob: -8.87667465209961
    7. 'reduce' → logprob: -9.00167465209961
    8. 'len' → logprob: -9.50167465209961
    9. '-' → logprob: -9.62667465209961
    10. 'set' → logprob: -9.75167465209961

Token 401: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.011892330832779408
    2. 'set' → logprob: -5.761892318725586
    3. ' ,' → logprob: -5.886892318725586
    4. ',set' → logprob: -6.261892318725586
    5. '=set' → logprob: -6.511892318725586
    6. ' set' → logprob: -6.636892318725586
    7. ' =' → logprob: -7.636892318725586
    8. '=' → logprob: -8.011892318725586
    9. ',
' → logprob: -8.886892318725586
    10. '
' → logprob: -9.761892318725586

Token 402: ' set' (ID: 920)
  Prédit: 'set'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'set' → logprob: -0.04395461082458496
    2. ' set' → logprob: -3.668954610824585
    3. '{' → logprob: -4.293954849243164
    4. '{}' → logprob: -5.793954849243164
    5. '0' → logprob: -8.293954849243164
    6. '[]' → logprob: -8.918954849243164
    7. ' ' → logprob: -9.293954849243164
    8. ' {' → logprob: -9.418954849243164
    9. '(set' → logprob: -9.418954849243164
    10. '[' → logprob: -10.418954849243164

Token 403: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.25205934047698975
    2. '()
' → logprob: -1.5020593404769897
    3. '()

' → logprob: -9.627058982849121
    4. '(range' → logprob: -10.877058982849121
    5. '()
' → logprob: -10.877058982849121
    6. '(),' → logprob: -11.627058982849121
    7. '([]' → logprob: -13.127058982849121
    8. '();' → logprob: -13.127058982849121
    9. '(' → logprob: -13.252058982849121
    10. '()\' → logprob: -13.252058982849121

Token 404: '   ' (ID: 271)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.7557322978973389
    2. ' while' → logprob: -1.2557322978973389
    3. '   ' → logprob: -1.8807322978973389
    4. 'for' → logprob: -3.505732297897339
    5. 'while' → logprob: -3.755732297897339
    6. ' range' → logprob: -3.880732297897339
    7. 'range' → logprob: -5.255732536315918
    8. '(range' → logprob: -5.880732536315918
    9. ',' → logprob: -6.505732536315918
    10. ')' → logprob: -6.755732536315918

Token 405: ' seq' (ID: 26775)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.09333669394254684
    2. 'while' → logprob: -2.718336582183838
    3. ' for' → logprob: -4.343336582183838
    4. '   ' → logprob: -4.718336582183838
    5. ' while' → logprob: -7.093336582183838
    6. 'i' → logprob: -9.468337059020996
    7. 'n' → logprob: -9.468337059020996
    8. 'P' → logprob: -9.718337059020996
    9. 'range' → logprob: -9.718337059020996
    10. '_' → logprob: -10.343337059020996

Token 406: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.08354286849498749
    2. '=' → logprob: -2.833542823791504
    3. 'u' → logprob: -3.958542823791504
    4. ',' → logprob: -7.208542823791504
    5. 'ence' → logprob: -8.208542823791504
    6. '   ' → logprob: -8.458542823791504
    7. ' ' → logprob: -8.583542823791504
    8. 'uel' → logprob: -8.583542823791504
    9. 'ue' → logprob: -8.958542823791504
    10. 'uer' → logprob: -9.583542823791504

Token 407: ' []
' (ID: 8911)
  Prédit: 'acc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'acc' → logprob: -0.18153774738311768
    2. 'range' → logprob: -2.806537628173828
    3. '(acc' → logprob: -3.306537628173828
    4. 'list' → logprob: -4.306537628173828
    5. ' accumulate' → logprob: -4.431537628173828
    6. 'P' → logprob: -4.431537628173828
    7. 'SA' → logprob: -4.681537628173828
    8. '(range' → logprob: -5.306537628173828
    9. 'chain' → logprob: -5.931537628173828
    10. 'map' → logprob: -6.306537628173828

Token 408: '   ' (ID: 271)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.5291746258735657
    2. ' while' → logprob: -1.904174566268921
    3. '   ' → logprob: -2.029174566268921
    4. 'for' → logprob: -2.529174566268921
    5. 'while' → logprob: -3.654174566268921
    6. '[' → logprob: -5.2791748046875
    7. '[]' → logprob: -5.5291748046875
    8. ' range' → logprob: -5.6541748046875
    9. 'range' → logprob: -5.9041748046875
    10. '(range' → logprob: -6.4041748046875

Token 409: ' while' (ID: 2049)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.7817424535751343
    2. ' for' → logprob: -1.1567424535751343
    3. 'while' (adapté à ' while') → logprob: -2.406742572784424
    4. ' while' → logprob: -2.781742572784424
    5. 'range' → logprob: -3.406742572784424
    6. '(range' → logprob: -4.156742572784424
    7. ' range' → logprob: -4.281742572784424
    8. '(' → logprob: -5.656742572784424
    9. '[' → logprob: -6.281742572784424
    10. ' (' → logprob: -6.531742572784424

Token 410: ' t' (ID: 260)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.13239440321922302
    2. 'len' → logprob: -2.132394313812256
    3. ' t' → logprob: -5.632394313812256
    4. ' len' → logprob: -6.882394313812256
    5. 'P' → logprob: -8.007394790649414
    6. 'seen' → logprob: -8.257394790649414
    7. 'True' → logprob: -8.882394790649414
    8. 'not' → logprob: -9.882394790649414
    9. '   ' → logprob: -11.132394790649414
    10. '(len' → logprob: -11.882394790649414

Token 411: ' not' (ID: 625)
  Prédit: ' not'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.12860530614852905
    2. 'not' → logprob: -2.128605365753174
    3. ' in' → logprob: -7.128605365753174
    4. '<' → logprob: -8.628604888916016
    5. '!=' → logprob: -8.628604888916016
    6. 'in' → logprob: -8.753604888916016
    7. ' <' → logprob: -9.503604888916016
    8. '=' → logprob: -9.628604888916016
    9. ' !=' → logprob: -9.878604888916016
    10. '<n' → logprob: -10.753604888916016

Token 412: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.11289140582084656
    2. ' in' → logprob: -2.237891435623169
    3. 'seen' → logprob: -10.11289119720459
    4. ' ' → logprob: -11.61289119720459
    5. ' seen' → logprob: -12.36289119720459
    6. '  ' → logprob: -12.61289119720459
    7. '   ' → logprob: -12.98789119720459
    8. '
' → logprob: -12.98789119720459
    9. 't' → logprob: -13.86289119720459
    10. ',' → logprob: -14.11289119720459

Token 413: ' seen' (ID: 6177)
  Prédit: 'seen'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'seen' → logprob: -0.0032260757870972157
    2. ' seen' → logprob: -5.753226280212402
    3. 'seq' → logprob: -10.003226280212402
    4. '   ' → logprob: -13.753226280212402
    5. 's' → logprob: -15.003226280212402
    6. 'se' → logprob: -15.128226280212402
    7. 'visited' → logprob: -15.128226280212402
    8. ' ' → logprob: -15.378226280212402
    9. 'see' → logprob: -15.503226280212402
    10. 'set' → logprob: -15.503226280212402

Token 414: ':
' (ID: 734)
  Prédit: ':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':
' → logprob: -0.38742581009864807
    2. ':' → logprob: -1.1374257802963257
    3. ' and' → logprob: -8.762425422668457
    4. '   ' → logprob: -8.887425422668457
    5. '):
' → logprob: -9.262425422668457
    6. ' :
' → logprob: -9.387425422668457
    7. ',' → logprob: -9.887425422668457
    8. ' :' → logprob: -11.512425422668457
    9. ':

' → logprob: -12.137425422668457
    10. '):' → logprob: -12.637425422668457

Token 415: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0017397936899214983
    2. '<|end|>' → logprob: -7.001739978790283
    3. '
' → logprob: -8.001739501953125
    4. '   ' → logprob: -8.501739501953125
    5. ',' → logprob: -9.501739501953125
    6. '<|end|>' → logprob: -9.876739501953125
    7. '	   ' → logprob: -10.126739501953125
    8. ' seen' → logprob: -10.376739501953125
    9. '	' → logprob: -11.626739501953125
    10. '):
' → logprob: -11.751739501953125

Token 416: ' seen' (ID: 6177)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4051794111728668
    2. ' seen' → logprob: -1.6551793813705444
    3. 'seen' (adapté à ' seen') → logprob: -2.155179500579834
    4. '       ' → logprob: -3.655179500579834
    5. '
' → logprob: -8.905179023742676
    6. '_seen' → logprob: -9.655179023742676
    7. '    ' → logprob: -9.780179023742676
    8. 'se' → logprob: -10.405179023742676
    9. '    
' → logprob: -12.030179023742676
    10. '  ' → logprob: -12.280179023742676

Token 417: ' |=' (ID: 19917)
  Prédit: '.add'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.add' → logprob: -2.6895233531831764e-05
    2. '.' → logprob: -11.25002670288086
    3. 'add' → logprob: -11.75002670288086
    4. ' .' → logprob: -12.12502670288086
    5. '.update' → logprob: -15.75002670288086
    6. '	add' → logprob: -16.75002670288086
    7. ' add' → logprob: -16.87502670288086
    8. ',' → logprob: -17.12502670288086
    9. ' |=' → logprob: -17.75002670288086
    10. '|' → logprob: -17.87502670288086

Token 418: ' {' (ID: 354)
  Prédit: '{'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '{' → logprob: -0.0008360736537724733
    2. ' {' → logprob: -7.25083589553833
    3. '{s' → logprob: -9.000836372375488
    4. '{text' → logprob: -13.500836372375488
    5. '{i' → logprob: -14.250836372375488
    6. '{x' → logprob: -15.000836372375488
    7. '{return' → logprob: -15.250836372375488
    8. '{id' → logprob: -16.375835418701172
    9. '{name' → logprob: -16.875835418701172
    10. '{sub' → logprob: -17.125835418701172

Token 419: 't' (ID: 83)
  Prédit: 't'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.00015920029545668513
    2. 'P' → logprob: -9.00015926361084
    3. ' t' → logprob: -10.25015926361084
    4. '   ' → logprob: -15.00015926361084
    5. ' P' → logprob: -16.375158309936523
    6. '	t' → logprob: -17.375158309936523
    7. '`t' → logprob: -17.750158309936523
    8. 'p' → logprob: -18.625158309936523
    9. ' ' → logprob: -18.625158309936523
    10. '(t' → logprob: -19.125158309936523

Token 420: '}
' (ID: 739)
  Prédit: '}
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}
' → logprob: -0.23428763449192047
    2. '}' → logprob: -1.6092876195907593
    3. ' }
' → logprob: -5.109287738800049
    4. ' }' → logprob: -6.109287738800049
    5. ',' → logprob: -8.10928726196289
    6. '}
' → logprob: -8.60928726196289
    7. ',
' → logprob: -10.60928726196289
    8. 't' → logprob: -11.23428726196289
    9. '}

' → logprob: -11.73428726196289
    10. '+' → logprob: -11.73428726196289

Token 421: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.27309104800224304
    2. '       ' → logprob: -1.6480910778045654
    3. 't' → logprob: -4.523090839385986
    4. '<|end|>' → logprob: -4.523090839385986
    5. '	t' → logprob: -4.773090839385986
    6. ' t' → logprob: -4.773090839385986
    7. ',' → logprob: -5.773090839385986
    8. '<|end|>' → logprob: -7.148090839385986
    9. '	' → logprob: -7.398090839385986
    10. '
' → logprob: -7.523090839385986

Token 422: ' seq' (ID: 26775)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.022013140842318535
    2. 'seq' (adapté à ' seq') → logprob: -4.522013187408447
    3. ' t' → logprob: -4.772013187408447
    4. '       ' → logprob: -6.147013187408447
    5. ' seq' → logprob: -8.272012710571289
    6. '   ' → logprob: -10.397012710571289
    7. '           ' → logprob: -11.772012710571289
    8. 'sequence' → logprob: -13.022012710571289
    9. '	t' → logprob: -13.647012710571289
    10. '        ' → logprob: -14.147012710571289

Token 423: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.0023442539386451244
    2. '=' → logprob: -6.252344131469727
    3. '.' → logprob: -8.002344131469727
    4. '+=' → logprob: -9.877344131469727
    5. ' =' → logprob: -11.502344131469727
    6. '.=' → logprob: -11.502344131469727
    7. ' +=' → logprob: -12.377344131469727
    8. 'append' → logprob: -12.877344131469727
    9. '.extend' → logprob: -13.877344131469727
    10. ' append' → logprob: -14.377344131469727

Token 424: '(t' (ID: 2025)
  Prédit: '(P'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(P' → logprob: -0.06895242631435394
    2. '(t' → logprob: -2.8189523220062256
    3. 'P' → logprob: -5.318952560424805
    4. 't' → logprob: -6.568952560424805
    5. '(S' → logprob: -8.568952560424805
    6. '((' → logprob: -8.818952560424805
    7. '(' → logprob: -8.818952560424805
    8. '(p' → logprob: -9.568952560424805
    9. '(A' → logprob: -10.193952560424805
    10. ' P' → logprob: -10.568952560424805

Token 425: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.0029607040341943502
    2. ')' → logprob: -5.877960681915283
    3. ' )
' → logprob: -9.502961158752441
    4. ')
' → logprob: -10.127961158752441
    5. '=' → logprob: -11.377961158752441
    6. ' =' → logprob: -11.877961158752441
    7. '=P' → logprob: -11.877961158752441
    8. 'P' → logprob: -12.127961158752441
    9. '       ' → logprob: -12.252961158752441
    10. ')

' → logprob: -13.502961158752441

Token 426: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.7407078742980957
    2. '   ' → logprob: -0.9907078742980957
    3. 't' → logprob: -1.9907078742980957
    4. ' t' → logprob: -4.240707874298096
    5. '	t' → logprob: -7.740707874298096
    6. ',' → logprob: -8.490707397460938
    7. '<|end|>' → logprob: -9.365707397460938
    8. 'token' → logprob: -9.615707397460938
    9. '<|end|>' → logprob: -10.865707397460938
    10. ',t' → logprob: -11.115707397460938

Token 427: ' t' (ID: 260)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' (adapté à ' t') → logprob: -6.492120155598968e-05
    2. '       ' → logprob: -10.125064849853516
    3. ' t' → logprob: -10.625064849853516
    4. '   ' → logprob: -15.250064849853516
    5. 'P' → logprob: -16.125064849853516
    6. '
' → logprob: -16.750064849853516
    7. '           ' → logprob: -17.000064849853516
    8. '`t' → logprob: -17.625064849853516
    9. '        
' → logprob: -19.000064849853516
    10. '	t' → logprob: -19.125064849853516

Token 428: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.0009153862483799458
    2. ' =' → logprob: -7.00091552734375
    3. '=P' → logprob: -12.75091552734375
    4. '+=' → logprob: -13.87591552734375
    5. '.=' → logprob: -17.50091552734375
    6. '=}' → logprob: -17.62591552734375
    7. 'P' → logprob: -17.87591552734375
    8. ' +=' → logprob: -18.25091552734375
    9. '%=' → logprob: -18.87591552734375
    10. ':=' → logprob: -19.37591552734375

Token 429: ' P' (ID: 398)
  Prédit: 'P'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'P' → logprob: -1.688212614681106e-05
    2. ' P' → logprob: -11.000017166137695
    3. '   ' → logprob: -16.875017166137695
    4. '[P' → logprob: -17.750017166137695
    5. '	P' → logprob: -18.000017166137695
    6. ' ' → logprob: -18.375017166137695
    7. '(P' → logprob: -18.500017166137695
    8. '  ' → logprob: -18.500017166137695
    9. '=P' → logprob: -18.875017166137695
    10. 'p' → logprob: -18.875017166137695

Token 430: '[t' (ID: 32184)
  Prédit: '[t'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[t' → logprob: -2.7610454708337784e-05
    2. 't' → logprob: -10.500027656555176
    3. '[' → logprob: -17.12502670288086
    4. '(t' → logprob: -18.12502670288086
    5. '	t' → logprob: -18.75002670288086
    6. '[
' → logprob: -19.62502670288086
    7. ' [' → logprob: -19.62502670288086
    8. '`t' → logprob: -19.87502670288086
    9. '```' → logprob: -20.00002670288086
    10. '[T' → logprob: -20.37502670288086

Token 431: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0003663212701212615
    2. '}' → logprob: -9.6253662109375
    3. ']
' → logprob: -9.6253662109375
    4. ' ]' → logprob: -9.6253662109375
    5. ')]' → logprob: -9.7503662109375
    6. ']+' → logprob: -10.3753662109375
    7. ')' → logprob: -10.3753662109375
    8. '])' → logprob: -10.8753662109375
    9. ']}' → logprob: -11.0003662109375
    10. '<|end|>' → logprob: -12.2503662109375

Token 432: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7268633842468262
    2. ')' → logprob: -0.8518633842468262
    3. '<|end|>' → logprob: -2.476863384246826
    4. ')
' → logprob: -6.851863384246826
    5. ' while' → logprob: -7.226863384246826
    6. '    
' → logprob: -7.476863384246826
    7. ' if' → logprob: -7.601863384246826
    8. '    ' → logprob: -7.976863384246826
    9. ' )' → logprob: -7.976863384246826
    10. '[]' → logprob: -8.101863861083984

Token 433: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2585703432559967
    2. ')' → logprob: -1.7585703134536743
    3. '<|end|>' → logprob: -3.133570432662964
    4. ' if' → logprob: -5.383570194244385
    5. ']' → logprob: -6.008570194244385
    6. 'if' (adapté à ' if') → logprob: -6.758570194244385
    7. '[' → logprob: -7.633570194244385
    8. '       ' → logprob: -7.633570194244385
    9. '[]' → logprob: -7.758570194244385
    10. '#' → logprob: -8.133570671081543

Token 434: ' len' (ID: 4631)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.2622483968734741
    2. ' len' → logprob: -1.5122483968734741
    3. 'set' → logprob: -6.137248516082764
    4. 'seq' → logprob: -6.512248516082764
    5. ' not' → logprob: -6.637248516082764
    6. 'all' → logprob: -6.887248516082764
    7. 'not' → logprob: -7.012248516082764
    8. ' set' → logprob: -7.262248516082764
    9. ' seq' → logprob: -7.387248516082764
    10. 't' → logprob: -7.387248516082764

Token 435: '(se' (ID: 19430)
  Prédit: '(seq'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(seq' → logprob: -0.0019555140752345324
    2. '(se' → logprob: -6.251955509185791
    3. '(' → logprob: -11.37695598602295
    4. '(S' → logprob: -12.00195598602295
    5. '(set' → logprob: -12.00195598602295
    6. 'seq' → logprob: -14.00195598602295
    7. ' (' → logprob: -14.12695598602295
    8. '(P' → logprob: -14.62695598602295
    9. '(A' → logprob: -14.75195598602295
    10. '(sa' → logprob: -15.50195598602295

Token 436: 'en' (ID: 262)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.01983121782541275
    2. 'en' → logprob: -4.14483118057251
    3. 't' → logprob: -5.89483118057251
    4. '(seq' → logprob: -7.89483118057251
    5. 'eq' → logprob: -8.269831657409668
    6. 'e' → logprob: -8.644831657409668
    7. 'seq' → logprob: -9.144831657409668
    8. '{' → logprob: -11.019831657409668
    9. 'Q' → logprob: -11.394831657409668
    10. 'seen' → logprob: -11.519831657409668

Token 437: ')' (ID: 8)
  Prédit: '!='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '!=' → logprob: -0.7147482633590698
    2. ')' → logprob: -0.8397482633590698
    3. ' !=' → logprob: -3.3397483825683594
    4. '==' → logprob: -3.7147483825683594
    5. '<' → logprob: -4.464748382568359
    6. ')!=' → logprob: -5.089748382568359
    7. ' ==' → logprob: -7.589748382568359
    8. '()!=' → logprob: -8.71474838256836
    9. '<len' → logprob: -8.83974838256836
    10. ')==' → logprob: -8.83974838256836

Token 438: ' ==' (ID: 951)
  Prédit: ' !='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.7316066026687622
    2. '!=' → logprob: -0.8566066026687622
    3. '==' → logprob: -3.1066064834594727
    4. '<' → logprob: -3.6066064834594727
    5. ' ==' → logprob: -4.231606483459473
    6. ' <' → logprob: -4.981606483459473
    7. '<len' → logprob: -7.231606483459473
    8. ')' → logprob: -9.731606483459473
    9. ' ' → logprob: -9.856606483459473
    10. '   ' → logprob: -10.481606483459473

Token 439: ' len' (ID: 4631)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.0004634392389561981
    2. '0' → logprob: -8.625463485717773
    3. '1' → logprob: -8.750463485717773
    4. ' len' → logprob: -9.125463485717773
    5. '   ' → logprob: -11.625463485717773
    6. ' ' → logprob: -13.125463485717773
    7. '7' → logprob: -13.875463485717773
    8. 'n' → logprob: -14.125463485717773
    9. '6' → logprob: -14.500463485717773
    10. '(len' → logprob: -14.875463485717773

Token 440: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.03312849625945091
    2. '(P' → logprob: -3.533128499984741
    3. '(S' → logprob: -5.908128261566162
    4. '(seq' → logprob: -8.03312873840332
    5. '(B' → logprob: -8.78312873840332
    6. 'A' → logprob: -9.28312873840332
    7. '(t' → logprob: -10.65812873840332
    8. '(se' → logprob: -11.03312873840332
    9. '(' → logprob: -11.28312873840332
    10. '(set' → logprob: -11.90812873840332

Token 441: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.5234244465827942
    2. '):' → logprob: -0.8984244465827942
    3. ')' → logprob: -8.27342414855957
    4. '   ' → logprob: -11.27342414855957
    5. ' ):
' → logprob: -11.77342414855957
    6. ' ):' → logprob: -12.02342414855957
    7. '):
' → logprob: -12.27342414855957
    8. '):

' → logprob: -12.52342414855957
    9. ')==' → logprob: -12.89842414855957
    10. ':' → logprob: -13.52342414855957

Token 442: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0006199848721735179
    2. '   ' → logprob: -7.500619888305664
    3. 'return' → logprob: -10.250619888305664
    4. ' return' → logprob: -10.375619888305664
    5. '           ' → logprob: -15.625619888305664
    6. '	return' → logprob: -15.625619888305664
    7. '
' → logprob: -17.375619888305664
    8. ':return' → logprob: -17.500619888305664
    9. '	   ' → logprob: -18.250619888305664
    10. '<|end|>' → logprob: -18.875619888305664

Token 443: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.08682230114936829
    2. '       ' → logprob: -2.836822271347046
    3. ' return' → logprob: -3.836822271347046
    4. '   ' → logprob: -5.836822509765625
    5. '	return' → logprob: -9.711822509765625
    6. '           ' → logprob: -12.211822509765625
    7. '
' → logprob: -13.836822509765625
    8. ' ' → logprob: -14.086822509765625
    9. ':return' → logprob: -15.711822509765625
    10. '  ' → logprob: -15.961822509765625

Token 444: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.029832057654857635
    2. ' '' → logprob: -3.529832124710083
    3. '"' → logprob: -10.029831886291504
    4. ' ' → logprob: -11.529831886291504
    5. '   ' → logprob: -11.904831886291504
    6. ' Yes' → logprob: -12.029831886291504
    7. 'Yes' → logprob: -12.029831886291504
    8. ' "' → logprob: -13.654831886291504
    9. ''s' → logprob: -13.904831886291504
    10. '	' → logprob: -14.029831886291504

Token 445: 'No' (ID: 3160)
  Prédit: 'Yes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.013416554778814316
    2. ''' → logprob: -4.388416767120361
    3. 'No' → logprob: -7.263416767120361
    4. '"' → logprob: -8.638416290283203
    5. ' Yes' → logprob: -11.138416290283203
    6. 'YES' → logprob: -12.638416290283203
    7. 'Oui' → logprob: -13.138416290283203
    8. '   ' → logprob: -13.263416290283203
    9. '```' → logprob: -14.013416290283203
    10. '"No' → logprob: -14.388416290283203

Token 446: ''
' (ID: 2207)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 447: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6693198084831238
    2. ':' → logprob: -1.4193198680877686
    3. '<|end|>' → logprob: -1.6693198680877686
    4. '   ' → logprob: -3.5443198680877686
    5. '\n' → logprob: -4.6693196296691895
    6. ' ' → logprob: -5.2943196296691895
    7. ':return' → logprob: -6.4193196296691895
    8. ' )' → logprob: -6.5443196296691895
    9. '\' → logprob: -6.5443196296691895
    10. '#' → logprob: -6.7943196296691895

Token 448: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16474542021751404
    2. '<|end|>' → logprob: -2.164745330810547
    3. ')' → logprob: -5.164745330810547
    4. ' return' → logprob: -5.289745330810547
    5. '    
' → logprob: -5.414745330810547
    6. ' ' → logprob: -5.789745330810547
    7. '\n' → logprob: -5.789745330810547
    8. ' 
' → logprob: -5.914745330810547
    9. '
' → logprob: -5.914745330810547
    10. '    ' → logprob: -6.164745330810547

Token 449: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.12694953382015228
    2. ' '' → logprob: -2.1269495487213135
    3. '"' → logprob: -12.126949310302734
    4. ' ' → logprob: -12.376949310302734
    5. ' ' → logprob: -12.626949310302734
    6. '   ' → logprob: -12.751949310302734
    7. '	' → logprob: -13.251949310302734
    8. ' "' → logprob: -13.376949310302734
    9. ' Yes' → logprob: -13.876949310302734
    10. '"No' → logprob: -15.126949310302734

Token 450: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.000838576874230057
    2. 'No' → logprob: -7.125838756561279
    3. ''' → logprob: -10.625838279724121
    4. ' Yes' → logprob: -11.750838279724121
    5. 'Oui' → logprob: -14.625838279724121
    6. '"' → logprob: -15.375838279724121
    7. 'Ye' → logprob: -15.500838279724121
    8. 'YES' → logprob: -15.625838279724121
    9. '```' → logprob: -16.125839233398438
    10. ''''' → logprob: -16.500839233398438

Token 451: ''

' (ID: 7497)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.000782826216891408
    2. '
' → logprob: -7.7507829666137695
    3. ')
' → logprob: -8.75078296661377
    4. '<|end|>' → logprob: -9.25078296661377
    5. '}' → logprob: -10.00078296661377
    6. '\n' → logprob: -11.12578296661377
    7. '```' → logprob: -11.12578296661377
    8. ':' → logprob: -12.25078296661377
    9. '(' → logprob: -12.37578296661377
    10. ']' → logprob: -12.75078296661377

Token 452: 'N' (ID: 45)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.046340785920619965
    2. ':' → logprob: -3.2963407039642334
    3. '(' → logprob: -5.4213409423828125
    4. '<|end|>' → logprob: -6.4213409423828125
    5. '
' → logprob: -7.5463409423828125
    6. '```' → logprob: -7.6713409423828125
    7. '#' → logprob: -7.9213409423828125
    8. '}' → logprob: -8.671340942382812
    9. '):' → logprob: -9.421340942382812
    10. '[' → logprob: -9.421340942382812

Token 453: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.09714356064796448
    2. '=' → logprob: -2.4721436500549316
    3. ',' → logprob: -4.847143650054932
    4. ' ' → logprob: -8.972143173217773
    5. '=int' → logprob: -9.847143173217773
    6. ')' → logprob: -10.347143173217773
    7. ' =
' → logprob: -10.972143173217773
    8. ' ,' → logprob: -11.097143173217773
    9. '   ' → logprob: -11.222143173217773
    10. '<|end|>' → logprob: -11.347143173217773

Token 454: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0011872532777488232
    2. ' int' → logprob: -6.751187324523926
    3. '[int' → logprob: -12.126187324523926
    4. '10' → logprob: -12.251187324523926
    5. '0' → logprob: -12.376187324523926
    6. '5' → logprob: -14.126187324523926
    7. '1' → logprob: -14.626187324523926
    8. 'len' → logprob: -14.876187324523926
    9. '3' → logprob: -15.001187324523926
    10. '<int' → logprob: -15.376187324523926

Token 455: '(read' (ID: 45738)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.04130292683839798
    2. '(read' → logprob: -3.5413029193878174
    3. '(sys' → logprob: -4.5413031578063965
    4. 'input' → logprob: -7.5413031578063965
    5. 'read' → logprob: -8.916302680969238
    6. '()' → logprob: -9.291302680969238
    7. '(' → logprob: -10.166302680969238
    8. 'sys' → logprob: -10.666302680969238
    9. ' (' → logprob: -12.666302680969238
    10. '(stdin' → logprob: -13.416302680969238

Token 456: 'line' (ID: 1137)
  Prédit: 'line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'line' → logprob: -1.9361264946837764e-07
    2. 'ine' → logprob: -16.25
    3. 'lin' → logprob: -17.375
    4. 'lines' → logprob: -18.25
    5. 'Line' → logprob: -18.5
    6. 'l' → logprob: -19.125
    7. 'ln' → logprob: -19.25
    8. '_line' → logprob: -19.375
    9. 'input' → logprob: -19.5
    10. '()' → logprob: -19.5

Token 457: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0408690869808197
    2. '()' → logprob: -3.5408689975738525
    3. '())
' → logprob: -4.540869235992432
    4. '().' → logprob: -8.415868759155273
    5. '()
' → logprob: -8.790868759155273
    6. ')' → logprob: -11.290868759155273
    7. ' ())' → logprob: -12.915868759155273
    8. '(' → logprob: -13.290868759155273
    9. '())

' → logprob: -13.665868759155273
    10. '())
' → logprob: -13.790868759155273

Token 458: 'A' (ID: 32)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.021128110587596893
    2. 'A' → logprob: -3.8961281776428223
    3. 'results' → logprob: -8.021127700805664
    4. ' for' → logprob: -9.271127700805664
    5. 'answers' → logprob: -9.521127700805664
    6. '```' → logprob: -10.021127700805664
    7. 'result' → logprob: -11.146127700805664
    8. '[' → logprob: -12.396127700805664
    9. 'while' → logprob: -12.396127700805664
    10. '[A' → logprob: -12.646127700805664

Token 459: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.05169149115681648
    2. ' =' → logprob: -3.3016915321350098
    3. ',' → logprob: -4.30169153213501
    4. ' ,' → logprob: -12.426691055297852
    5. ',B' → logprob: -12.676691055297852
    6. ',A' → logprob: -14.426691055297852
    7. '=[]' → logprob: -14.676691055297852
    8. ',N' → logprob: -14.801691055297852
    9. ',b' → logprob: -14.926691055297852
    10. '=list' → logprob: -14.926691055297852

Token 460: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.00672211404889822
    2. ' list' → logprob: -5.0067219734191895
    3. '[list' → logprob: -12.756722450256348
    4. '[' → logprob: -13.256722450256348
    5. 'map' → logprob: -13.506722450256348
    6. 'read' → logprob: -14.756722450256348
    7. '[*' → logprob: -15.756722450256348
    8. ' [' → logprob: -16.50672149658203
    9. '=list' → logprob: -17.50672149658203
    10. '(list' → logprob: -17.63172149658203

Token 461: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -6.392202976712724e-06
    2. 'map' → logprob: -12.250006675720215
    3. '()' → logprob: -13.750006675720215
    4. '(' → logprob: -15.000006675720215
    5. '(int' → logprob: -16.1250057220459
    6. '(m' → logprob: -17.6250057220459
    7. '(range' → logprob: -18.1250057220459
    8. '()
' → logprob: -18.5000057220459
    9. '(read' → logprob: -18.8750057220459
    10. '(ma' → logprob: -19.2500057220459

Token 462: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.012526365928351879
    2. 'int' → logprob: -4.387526512145996
    3. '(' → logprob: -11.762526512145996
    4. '[int' → logprob: -12.762526512145996
    5. ' int' → logprob: -13.137526512145996
    6. 'read' → logprob: -14.012526512145996
    7. '<int' → logprob: -14.262526512145996
    8. ',int' → logprob: -14.512526512145996
    9. '```' → logprob: -14.887526512145996
    10. '=int' → logprob: -14.887526512145996

Token 463: ',' (ID: 11)
  Prédit: '(read'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(read' → logprob: -0.012105880305171013
    2. ',' → logprob: -5.012105941772461
    3. 'read' → logprob: -5.262105941772461
    4. '(),' → logprob: -8.887105941772461
    5. '(sys' → logprob: -10.887105941772461
    6. ' ,' → logprob: -12.012105941772461
    7. 'sys' → logprob: -12.637105941772461
    8. '(' → logprob: -12.887105941772461
    9. '(
' → logprob: -12.887105941772461
    10. '   ' → logprob: -13.012105941772461

Token 464: ' readline' (ID: 179561)
  Prédit: 'read'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'read' → logprob: -3.054500666621607e-06
    2. ' readline' → logprob: -12.87500286102295
    3. ' read' → logprob: -15.00000286102295
    4. '(read' → logprob: -16.000003814697266
    5. 'map' → logprob: -17.375003814697266
    6. 'readonly' → logprob: -17.875003814697266
    7. '	read' → logprob: -18.000003814697266
    8. '.readline' → logprob: -18.125003814697266
    9. '
' → logprob: -19.875003814697266
    10. ' ' → logprob: -20.000003814697266

Token 465: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -5.5577775128767826e-06
    2. '()' → logprob: -12.500005722045898
    3. '()))' → logprob: -13.500005722045898
    4. '.readline' → logprob: -15.375005722045898
    5. 'split' → logprob: -17.2500057220459
    6. '())' → logprob: -17.3750057220459
    7. '.strip' → logprob: -17.5000057220459
    8. '.split' → logprob: -17.5000057220459
    9. '().__' → logprob: -17.8750057220459
    10. '))' → logprob: -17.8750057220459

Token 466: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.048725321888923645
    2. 'strip' → logprob: -3.0487253665924072
    3. 'rstrip' → logprob: -9.173725128173828
    4. 'read' → logprob: -10.423725128173828
    5. ' split' → logprob: -12.673725128173828
    6. '(split' → logprob: -14.298725128173828
    7. '().' → logprob: -14.673725128173828
    8. ' strip' → logprob: -15.173725128173828
    9. '.split' → logprob: -16.923725128173828
    10. ')' → logprob: -17.798725128173828

Token 467: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.024010175839066505
    2. '()))
' → logprob: -4.024010181427002
    3. '()' → logprob: -5.274010181427002
    4. '))' → logprob: -7.274010181427002
    5. '(' → logprob: -11.774009704589844
    6. '()))

' → logprob: -11.899009704589844
    7. '()));' → logprob: -12.649009704589844
    8. '()))
' → logprob: -12.899009704589844
    9. '(),' → logprob: -13.524009704589844
    10. '())' → logprob: -13.649009704589844

Token 468: 'B' (ID: 33)
  Prédit: 'B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -7.896309739408025e-07
    2. ' B' → logprob: -14.875000953674316
    3. 'b' → logprob: -15.875000953674316
    4. 'print' → logprob: -16.0
    5. '<|end|>' → logprob: -16.625
    6. '[' → logprob: -17.375
    7. '#' → logprob: -17.75
    8. 'A' → logprob: -17.875
    9. '```' → logprob: -18.5
    10. 'for' → logprob: -18.625

Token 469: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.10020849853754044
    2. '=' → logprob: -2.3502085208892822
    3. '=list' → logprob: -13.350208282470703
    4. ' ' → logprob: -15.850208282470703
    5. ' ' → logprob: -17.475208282470703
    6. ')' → logprob: -17.475208282470703
    7. ' =)' → logprob: -17.475208282470703
    8. ' =
' → logprob: -18.225208282470703
    9. ',' → logprob: -18.475208282470703
    10. '＝' → logprob: -18.975208282470703

Token 470: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.0005530327325686812
    2. ' list' → logprob: -7.500553131103516
    3. 'map' → logprob: -20.125553131103516
    4. 'A' → logprob: -20.875553131103516
    5. '(list' → logprob: -21.125553131103516
    6. '=list' → logprob: -21.875553131103516
    7. 'List' → logprob: -22.500553131103516
    8. '
' → logprob: -23.500553131103516
    9. '[' → logprob: -23.500553131103516
    10. '	list' → logprob: -23.750553131103516

Token 471: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.018071506172418594
    2. '(int' → logprob: -4.39307165145874
    3. 'map' → logprob: -5.26807165145874
    4. 'int' → logprob: -7.89307165145874
    5. '(list' → logprob: -12.018071174621582
    6. ',map' → logprob: -12.393071174621582
    7. '(' → logprob: -13.268071174621582
    8. ' map' → logprob: -13.768071174621582
    9. '.map' → logprob: -13.768071174621582
    10. '	map' → logprob: -14.143071174621582

Token 472: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.2014637291431427
    2. 'int' → logprob: -1.7014636993408203
    3. '[int' → logprob: -10.57646369934082
    4. ' int' → logprob: -11.20146369934082
    5. ',int' → logprob: -11.95146369934082
    6. '=int' → logprob: -12.82646369934082
    7. '<int' → logprob: -14.20146369934082
    8. ']int' → logprob: -14.95146369934082
    9. '```' → logprob: -15.32646369934082
    10. ':int' → logprob: -15.57646369934082

Token 473: ',' (ID: 11)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.08879125118255615
    2. ',' → logprob: -3.3387913703918457
    3. 'int' → logprob: -3.3387913703918457
    4. ',int' → logprob: -5.088791370391846
    5. '(read' → logprob: -5.088791370391846
    6. 'read' → logprob: -6.838791370391846
    7. '[int' → logprob: -8.463790893554688
    8. '=int' → logprob: -8.963790893554688
    9. '(sys' → logprob: -9.588790893554688
    10. '.readline' → logprob: -9.713790893554688

Token 474: ' readline' (ID: 179561)
  Prédit: 'read'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'read' → logprob: -6.110668618930504e-05
    2. ' readline' → logprob: -9.75006103515625
    3. 'int' → logprob: -13.50006103515625
    4. '(read' → logprob: -13.87506103515625
    5. 'readonly' → logprob: -15.75006103515625
    6. ' read' → logprob: -16.00006103515625
    7. '.readline' → logprob: -16.62506103515625
    8. 'sys' → logprob: -17.75006103515625
    9. 'stdin' → logprob: -17.87506103515625
    10. 'list' → logprob: -18.62506103515625

Token 475: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -3.128163257315464e-07
    2. '()' → logprob: -15.375
    3. '.split' → logprob: -17.375
    4. ' ().' → logprob: -18.125
    5. '()[' → logprob: -18.375
    6. '()))' → logprob: -18.5
    7. '(' → logprob: -20.25
    8. '()
' → logprob: -21.625
    9. '.' → logprob: -21.75
    10. '().__' → logprob: -22.125

Token 476: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -5.438573680294212e-06
    2. 'strip' → logprob: -12.250005722045898
    3. ' split' → logprob: -14.500005722045898
    4. '().' → logprob: -16.3750057220459
    5. '(split' → logprob: -18.1250057220459
    6. '.split' → logprob: -19.0000057220459
    7. 'rstrip' → logprob: -19.0000057220459
    8. ')' → logprob: -20.2500057220459
    9. '()' → logprob: -20.7500057220459
    10. 'plit' → logprob: -20.8750057220459

Token 477: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.20271606743335724
    2. '))' → logprob: -1.7027161121368408
    3. '()' → logprob: -6.827715873718262
    4. '())' → logprob: -8.952715873718262
    5. '()))
' → logprob: -9.452715873718262
    6. ')' → logprob: -12.452715873718262
    7. '()));' → logprob: -12.702715873718262
    8. '))
' → logprob: -13.827715873718262
    9. '(' → logprob: -13.952715873718262
    10. '()))

' → logprob: -14.702715873718262

Token 478: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: 0.0
    2. '```' → logprob: -16.875
    3. ' print' → logprob: -19.375
    4. '``' → logprob: -21.75
    5. '
' → logprob: -21.875
    6. '#print' → logprob: -22.125
    7. '(print' → logprob: -23.875
    8. '	print' → logprob: -24.0
    9. 'result' → logprob: -24.125
    10. 'for' → logprob: -24.5

Token 479: '(check' (ID: 40506)
  Prédit: '(check'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(check' → logprob: -0.001085566938854754
    2. '(' → logprob: -6.8760857582092285
    3. '('' → logprob: -10.25108528137207
    4. '(f' → logprob: -12.25108528137207
    5. '(Check' → logprob: -12.25108528137207
    6. '((' → logprob: -12.75108528137207
    7. '(call' → logprob: -13.50108528137207
    8. '(C' → logprob: -14.12608528137207
    9. '("("' → logprob: -14.25108528137207
    10. '()' → logprob: -14.50108528137207

Token 480: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -3.214019307051785e-05
    2. '(' → logprob: -10.500032424926758
    3. ' (' → logprob: -13.000032424926758
    4. '((' → logprob: -13.375032424926758
    5. ')' → logprob: -14.875032424926758
    6. '(
' → logprob: -15.750032424926758
    7. ')(' → logprob: -16.625032424926758
    8. 'A' → logprob: -16.875032424926758
    9. '(B' → logprob: -17.000032424926758
    10. '(`' → logprob: -18.375032424926758

Token 481: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00030841029365547
    2. ',B' → logprob: -8.1253080368042
    3. ' ,' → logprob: -11.5003080368042
    4. 'B' → logprob: -13.2503080368042
    5. ',
' → logprob: -15.1253080368042
    6. '(' → logprob: -16.750308990478516
    7. ')' → logprob: -17.000308990478516
    8. '(),' → logprob: -17.000308990478516
    9. ',b' → logprob: -17.000308990478516
    10. '(B' → logprob: -17.250308990478516

Token 482: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.011047814972698689
    2. ' B' → logprob: -4.511047840118408
    3. '	B' → logprob: -20.51104736328125
    4. 'b' → logprob: -20.63604736328125
    5. '   ' → logprob: -20.63604736328125
    6. ' ' → logprob: -20.88604736328125
    7. ' ' → logprob: -21.01104736328125
    8. '(B' → logprob: -21.76104736328125
    9. ')' → logprob: -21.88604736328125
    10. ',B' → logprob: -22.38604736328125

Token 483: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.04859974980354309
    2. ')' → logprob: -3.0485997200012207
    3. '))
' → logprob: -12.173600196838379
    4. ')))' → logprob: -12.298600196838379
    5. '()))' → logprob: -14.048600196838379
    6. '())' → logprob: -14.173600196838379
    7. '(A' → logprob: -15.423600196838379
    8. '()' → logprob: -15.923600196838379
    9. ' ))' → logprob: -15.923600196838379
    10. '])' → logprob: -16.298599243164062


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 481
Tokens correctement prédits (1ère position, stricte): 164
Tokens correctement prédits (1ère position, avec adaptation): 168
Tokens correctement prédits (top 10): 354
Précision stricte (1ère position): 34.10%
Précision adaptée (1ère position): 34.93%
Précision (top 10): 73.60%
================================================================================
