================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:53:20
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def is_two_pairs(s):
    """
    Détermine si la chaîne d'entrée contient exactement deux paires de caractères différents.

    Args:
        s (str): Une chaîne de 4 caractères.

    Returns:
        str: "Yes" si la chaîne contient deux paires de caractères différents (par exemple AABB), sinon "No".
    """
    # Convertir la chaîne en liste de caractères pour permettre le tri
    chars = list(s)
    # Trier la liste pour regrouper les caractères identiques
    chars.sort()

    # Après le tri, la chaîne doit être de la forme XXYY où X != Y
    # Cela signifie : 
    # - les deux premiers caractères sont identiques
    # - les deux derniers caractères sont identiques
    # - le caractère du milieu n'est pas le même que le premier
    if chars[0] == chars[1] and chars[2] == chars[3] and chars[1] != chars[2]:
        return "Yes"
    else:
        return "No"

def main():
    """
    Fonction principale qui lit l'entrée utilisateur, appelle la fonction de vérification 
    puis affiche le résultat.
    """
    # Lire la chaîne entrée par l'utilisateur
    s = input()
    # Vérifier la condition et afficher "Yes" ou "No"
    result = is_two_pairs(s)
    print(result)

# Appel du point d'entrée principal du programme
if __name__ == "__main__":
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' is' (ID: 382)
  → Token d'amorce (pas de prédiction)

Token 2: '_two' (ID: 54305)
  → Token d'amorce (pas de prédiction)

Token 3: '_pairs' (ID: 90005)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.18871310353279114
    2. '(' → logprob: -1.9387130737304688
    3. '(_' → logprob: -3.8137130737304688
    4. '_(' → logprob: -6.063713073730469
    5. '```' → logprob: -7.563713073730469
    6. '(_:' → logprob: -7.563713073730469
    7. ' _' → logprob: -7.688713073730469
    8. '_space' → logprob: -7.813713073730469
    9. '(_)' → logprob: -7.938713073730469
    10. '_:' → logprob: -8.438713073730469

Token 4: '(s' (ID: 1858)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0010098267812281847
    2. '():' → logprob: -8.626009941101074
    3. '(_' → logprob: -8.626009941101074
    4. '_' → logprob: -8.751009941101074
    5. '(:' → logprob: -8.751009941101074
    6. ' (' → logprob: -9.001009941101074
    7. ':' → logprob: -9.501009941101074
    8. '(_:' → logprob: -10.001009941101074
    9. '```' → logprob: -11.126009941101074
    10. '(a' → logprob: -11.501009941101074

Token 5: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.07919732481241226
    2. ')' → logprob: -2.579197406768799
    3. ':' → logprob: -8.70419692993164
    4. '(' → logprob: -9.82919692993164
    5. ''):' → logprob: -11.07919692993164
    6. '_' → logprob: -11.45419692993164
    7. '):
' → logprob: -11.57919692993164
    8. 'e' → logprob: -11.70419692993164
    9. ':)' → logprob: -12.20419692993164
    10. '[' → logprob: -12.20419692993164

Token 6: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.18355846405029297
    2. '(' → logprob: -2.308558464050293
    3. '():' → logprob: -3.558558464050293
    4. '   ' → logprob: -3.933558464050293
    5. '(':' → logprob: -5.558558464050293
    6. '(:' → logprob: -5.683558464050293
    7. '```' → logprob: -6.183558464050293
    8. '):' → logprob: -6.308558464050293
    9. '(":' → logprob: -6.558558464050293
    10. ' (' → logprob: -6.683558464050293

Token 7: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.19492165744304657
    2. ' ' → logprob: -2.1949217319488525
    3. '(' → logprob: -3.8199217319488525
    4. ':' → logprob: -4.819921493530273
    5. '```' → logprob: -4.819921493530273
    6. ' if' → logprob: -5.319921493530273
    7. 'return' → logprob: -5.819921493530273
    8. 'if' → logprob: -6.319921493530273
    9. '"' → logprob: -6.319921493530273
    10. '    ' → logprob: -6.319921493530273

Token 8: '   ' (ID: 271)
  Prédit: '"""'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"""' → logprob: -1.2024284601211548
    2. 'Returns' → logprob: -1.5774284601211548
    3. '   ' → logprob: -1.7024284601211548
    4. 'Detect' → logprob: -2.4524283409118652
    5. ' Detect' → logprob: -3.0774283409118652
    6. ' Checks' → logprob: -3.5774283409118652
    7. ' Returns' → logprob: -3.5774283409118652
    8. 'Check' → logprob: -3.7024283409118652
    9. 'Checks' → logprob: -3.7024283409118652
    10. ''''' → logprob: -3.9524283409118652

Token 9: ' Dé' (ID: 27247)
  Prédit: 'Returns'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Returns' → logprob: -0.6479216814041138
    2. '"""' → logprob: -1.8979216814041138
    3. 'Checks' → logprob: -2.522921562194824
    4. 'Check' → logprob: -2.772921562194824
    5. 'Return' → logprob: -2.897921562194824
    6. 'Detect' → logprob: -3.272921562194824
    7. '   ' → logprob: -3.397921562194824
    8. '"""
' → logprob: -3.897921562194824
    9. 'Count' → logprob: -4.772921562194824
    10. ''''' → logprob: -5.522921562194824

Token 10: 'term' (ID: 8044)
  Prédit: 'tect'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tect' → logprob: -0.008639862760901451
    2. 'te' → logprob: -5.633639812469482
    3. 'f' → logprob: -6.758639812469482
    4. 'tection' → logprob: -6.758639812469482
    5. '   ' → logprob: -6.883639812469482
    6. 'tec' → logprob: -7.133639812469482
    7. 't' → logprob: -8.63364028930664
    8. 'term' → logprob: -8.63364028930664
    9. '
' → logprob: -8.88364028930664
    10. 'tected' → logprob: -9.25864028930664

Token 11: 'ine' (ID: 514)
  Prédit: 'ine'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ine' → logprob: -0.01216795016080141
    2. '   ' → logprob: -4.512167930603027
    3. 'i' → logprob: -7.512167930603027
    4. 'e' → logprob: -8.387167930603027
    5. ' ine' → logprob: -9.387167930603027
    6. '  ' → logprob: -10.387167930603027
    7. '```' → logprob: -10.512167930603027
    8. ' ' → logprob: -10.637167930603027
    9. '    ' → logprob: -10.762167930603027
    10. 'iné' → logprob: -10.762167930603027

Token 12: ' si' (ID: 1784)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.7270777821540833
    2. ' si' → logprob: -1.2270777225494385
    3. 'si' → logprob: -2.2270777225494385
    4. ' ' → logprob: -2.4770777225494385
    5. '   ' → logprob: -4.477077960968018
    6. 'if' → logprob: -4.727077960968018
    7. 's' → logprob: -5.477077960968018
    8. '  ' → logprob: -5.727077960968018
    9. ' s' → logprob: -6.102077960968018
    10. ' ' → logprob: -7.227077960968018

Token 13: ' la' (ID: 557)
  Prédit: ' s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -1.0084178447723389
    2. ' la' → logprob: -1.3834178447723389
    3. 's' → logprob: -2.258417844772339
    4. '   ' → logprob: -2.508417844772339
    5. ' ' → logprob: -2.508417844772339
    6. ' deux' → logprob: -3.008417844772339
    7. 'de' → logprob: -3.633417844772339
    8. ' le' → logprob: -4.133418083190918
    9. ' il' → logprob: -5.133418083190918
    10. 'string' → logprob: -5.633418083190918

Token 14: ' chaîne' (ID: 89288)
  Prédit: ' chaîne'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaîne' → logprob: -0.18108052015304565
    2. 'chaine' → logprob: -2.8060805797576904
    3. ' ' → logprob: -3.5560805797576904
    4. 's' → logprob: -3.8060805797576904
    5. ' chaine' → logprob: -4.056080341339111
    6. 'cha' → logprob: -4.181080341339111
    7. '   ' → logprob: -5.056080341339111
    8. ' string' → logprob: -5.556080341339111
    9. 'string' → logprob: -5.681080341339111
    10. ' s' → logprob: -5.681080341339111

Token 15: ' d' (ID: 272)
  Prédit: ' est'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' est' → logprob: -1.0045738220214844
    2. ' ' → logprob: -1.3795738220214844
    3. 's' → logprob: -2.3795738220214844
    4. ''' → logprob: -2.5045738220214844
    5. ' s' → logprob: -2.5045738220214844
    6. 'est' → logprob: -3.5045738220214844
    7. ' contient' → logprob: -3.6295738220214844
    8. ' a' → logprob: -3.7545738220214844
    9. ' '' → logprob: -4.379573822021484
    10. '   ' → logprob: -5.004573822021484

Token 16: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -1.3283138275146484
    2. 'e' → logprob: -1.4533138275146484
    3. 's' → logprob: -1.4533138275146484
    4. ''' → logprob: -2.7033138275146484
    5. ''s' → logprob: -2.9533138275146484
    6. ' caractères' → logprob: -3.0783138275146484
    7. 'car' → logprob: -3.7033138275146484
    8. 'es' → logprob: -4.203313827514648
    9. 'est' → logprob: -4.828313827514648
    10. ' s' → logprob: -5.078313827514648

Token 17: ' contient' (ID: 89067)
  Prédit: ' est'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' est' → logprob: -0.344732403755188
    2. ' contient' → logprob: -1.594732403755188
    3. ' ' → logprob: -3.4697322845458984
    4. 'est' → logprob: -4.094732284545898
    5. ' a' → logprob: -4.219732284545898
    6. ' '' → logprob: -4.969732284545898
    7. ''' → logprob: -5.094732284545898
    8. 's' → logprob: -5.594732284545898
    9. '   ' → logprob: -5.719732284545898
    10. ' possède' → logprob: -6.969732284545898

Token 18: ' exactement' (ID: 108701)
  Prédit: 'de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'de' → logprob: -0.4454253911972046
    2. ' deux' → logprob: -1.1954253911972046
    3. ' ' → logprob: -3.320425510406494
    4. 'au' → logprob: -4.695425510406494
    5. '   ' → logprob: -5.195425510406494
    6. ' au' → logprob: -6.070425510406494
    7. '"' → logprob: -6.320425510406494
    8. 'une' → logprob: -7.695425510406494
    9. ' two' → logprob: -7.945425510406494
    10. ' de' → logprob: -8.695425033569336

Token 19: ' deux' (ID: 10301)
  Prédit: 'de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'de' → logprob: -0.19597867131233215
    2. ' deux' → logprob: -1.8209786415100098
    3. ' ' → logprob: -4.19597864151001
    4. 'au' → logprob: -8.445979118347168
    5. ''' → logprob: -9.445979118347168
    6. '2' → logprob: -9.445979118347168
    7. '   ' → logprob: -9.445979118347168
    8. ' un' → logprob: -9.445979118347168
    9. '"' → logprob: -9.570979118347168
    10. ' de' → logprob: -9.570979118347168

Token 20: ' p' (ID: 275)
  Prédit: ' p'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' p' → logprob: -0.756594717502594
    2. ' espaces' → logprob: -1.7565946578979492
    3. ' pairs' → logprob: -2.131594657897949
    4. ' ' → logprob: -2.256594657897949
    5. 'esp' → logprob: -2.631594657897949
    6. 'p' → logprob: -3.881594657897949
    7. 'pairs' → logprob: -4.131594657897949
    8. ' mots' → logprob: -4.756594657897949
    9. 'm' → logprob: -5.256594657897949
    10. '_pairs' → logprob: -5.631594657897949

Token 21: 'aires' (ID: 8507)
  Prédit: 'aires'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aires' → logprob: -0.22540433704853058
    2. 'a' → logprob: -1.9754043817520142
    3. 'airs' → logprob: -3.7254042625427246
    4. 'air' → logprob: -4.475404262542725
    5. 'ai' → logprob: -4.725404262542725
    6. 'r' → logprob: -5.475404262542725
    7. 'aire' → logprob: -5.850404262542725
    8. ' a' → logprob: -6.350404262542725
    9. 'ar' → logprob: -6.600404262542725
    10. ' p' → logprob: -6.600404262542725

Token 22: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.06642736494541168
    2. 'de' → logprob: -3.81642746925354
    3. ' ' → logprob: -3.94142746925354
    4. '   ' → logprob: -4.816427230834961
    5. 'def' → logprob: -5.816427230834961
    6. ''' → logprob: -5.941427230834961
    7. ' d' → logprob: -6.066427230834961
    8. '"' → logprob: -6.566427230834961
    9. 'e' → logprob: -6.691427230834961
    10. ' of' → logprob: -7.066427230834961

Token 23: ' caractères' (ID: 183106)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.5203773379325867
    2. ' caractères' → logprob: -1.8953773975372314
    3. ' mots' → logprob: -2.2703773975372314
    4. 'car' → logprob: -2.5203773975372314
    5. 'lett' → logprob: -4.145377159118652
    6. ' lettres' → logprob: -4.270377159118652
    7. ' ' → logprob: -4.520377159118652
    8. 'mot' → logprob: -5.270377159118652
    9. ' caracteres' → logprob: -5.520377159118652
    10. '   ' → logprob: -5.770377159118652

Token 24: ' différents' (ID: 36009)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.879522979259491
    2. '   ' → logprob: -1.5045230388641357
    3. ' ' → logprob: -1.8795230388641357
    4. ')' → logprob: -3.2545230388641357
    5. ',' → logprob: -3.5045230388641357
    6. ''' → logprob: -3.5045230388641357
    7. ':' → logprob: -3.8795230388641357
    8. 'e' → logprob: -4.504522800445557
    9. '```' → logprob: -4.629522800445557
    10. ' )' → logprob: -4.754522800445557

Token 25: '.

' (ID: 364)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -1.0074586868286133
    2. '   ' → logprob: -1.0074586868286133
    3. ' ' → logprob: -2.3824586868286133
    4. ':' → logprob: -3.0074586868286133
    5. ':
' → logprob: -3.6324586868286133
    6. 'e' → logprob: -4.132458686828613
    7. '.
' → logprob: -4.257458686828613
    8. ' :
' → logprob: -4.632458686828613
    9. ' :' → logprob: -4.757458686828613
    10. ',' → logprob: -4.882458686828613

Token 26: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08925755321979523
    2. '"""
' → logprob: -2.7142574787139893
    3. '"""' → logprob: -5.214257717132568
    4. '\n' → logprob: -5.589257717132568
    5. '
' → logprob: -6.089257717132568
    6. ')
' → logprob: -6.089257717132568
    7. ')' → logprob: -7.089257717132568
    8. ' 
' → logprob: -7.089257717132568
    9. '```' → logprob: -7.339257717132568
    10. '"' → logprob: -7.464257717132568

Token 27: ' Args' (ID: 39185)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5975338816642761
    2. '"""
' → logprob: -1.097533941268921
    3. '"""' → logprob: -2.347533941268921
    4. '```' → logprob: -5.222533702850342
    5. '\n' → logprob: -5.347533702850342
    6. '"' → logprob: -6.222533702850342
    7. ' """
' → logprob: -6.222533702850342
    8. 'return' → logprob: -6.972533702850342
    9. ''''
' → logprob: -6.972533702850342
    10. '
' → logprob: -7.347533702850342

Token 28: ':
' (ID: 734)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7611395120620728
    2. '(s' → logprob: -0.7611395120620728
    3. ' s' → logprob: -3.886139392852783
    4. 's' → logprob: -4.636139392852783
    5. ' (' → logprob: -5.011139392852783
    6. '):' → logprob: -5.011139392852783
    7. ')' → logprob: -5.136139392852783
    8. '```' → logprob: -5.261139392852783
    9. ':' → logprob: -5.761139392852783
    10. ',' → logprob: -6.511139392852783

Token 29: '       ' (ID: 309)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.5657400488853455
    2. ' s' → logprob: -0.9407400488853455
    3. '   ' → logprob: -3.5657401084899902
    4. ')' → logprob: -4.69074010848999
    5. ' string' → logprob: -6.31574010848999
    6. ' )' → logprob: -6.81574010848999
    7. 'string' → logprob: -7.44074010848999
    8. '```' → logprob: -8.440739631652832
    9. ' token' → logprob: -9.315739631652832
    10. '    ' → logprob: -9.440739631652832

Token 30: ' s' (ID: 265)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' (adapté à ' s') → logprob: -0.0016683997819200158
    2. 'string' → logprob: -7.376668453216553
    3. '   ' → logprob: -7.501668453216553
    4. 'str' → logprob: -8.376667976379395
    5. ' s' → logprob: -8.376667976379395
    6. '```' → logprob: -11.501667976379395
    7. 'chaine' → logprob: -12.251667976379395
    8. '       ' → logprob: -13.001667976379395
    9. ')' → logprob: -13.001667976379395
    10. '`s' → logprob: -13.501667976379395

Token 31: ' (' (ID: 350)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.21564127504825592
    2. ')' → logprob: -1.7156412601470947
    3. ':' → logprob: -5.715641498565674
    4. '   ' → logprob: -5.965641498565674
    5. ' )' → logprob: -5.965641498565674
    6. ' ):' → logprob: -5.965641498565674
    7. '[' → logprob: -6.465641498565674
    8. ',' → logprob: -7.965641498565674
    9. ' ' → logprob: -8.340641021728516
    10. '.startswith' → logprob: -8.590641021728516

Token 32: 'str' (ID: 689)
  Prédit: 'str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'str' → logprob: -6.313314952421933e-05
    2. ' str' → logprob: -10.125062942504883
    3. 'string' → logprob: -10.750062942504883
    4. 's' → logprob: -14.125062942504883
    5. ')' → logprob: -14.750062942504883
    6. '   ' → logprob: -15.000062942504883
    7. 'stri' → logprob: -16.125062942504883
    8. '```' → logprob: -16.500062942504883
    9. '[str' → logprob: -16.750062942504883
    10. ':str' → logprob: -17.250062942504883

Token 33: '):' (ID: 3127)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3134499192237854
    2. '):' → logprob: -1.3134498596191406
    3. ' )' → logprob: -10.18844985961914
    4. '   ' → logprob: -10.31344985961914
    5. ' ):' → logprob: -10.31344985961914
    6. '):
' → logprob: -10.81344985961914
    7. '```' → logprob: -10.93844985961914
    8. '<|end|>' → logprob: -11.56344985961914
    9. ')**' → logprob: -11.81344985961914
    10. ' ' → logprob: -11.81344985961914

Token 34: ' Une' (ID: 19758)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18452323973178864
    2. ' La' → logprob: -2.809523344039917
    3. ')' → logprob: -3.559523344039917
    4. '    ' → logprob: -3.684523344039917
    5. ' str' → logprob: -3.809523344039917
    6. 'La' → logprob: -4.809523105621338
    7. 'str' → logprob: -4.934523105621338
    8. ' la' → logprob: -5.809523105621338
    9. ' Une' → logprob: -6.184523105621338
    10. ' une' → logprob: -6.684523105621338

Token 35: ' chaîne' (ID: 89288)
  Prédit: ' chaîne'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaîne' → logprob: -0.3755865693092346
    2. ' ' → logprob: -1.2505865097045898
    3. 'chaine' → logprob: -4.75058650970459
    4. ' chaine' → logprob: -5.00058650970459
    5. ' string' → logprob: -5.12558650970459
    6. '   ' → logprob: -6.00058650970459
    7. 'cha' → logprob: -6.87558650970459
    8. ' cha' → logprob: -7.62558650970459
    9. 'string' → logprob: -7.75058650970459
    10. 's' → logprob: -8.00058650970459

Token 36: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.5172544717788696
    2. '   ' → logprob: -1.3922544717788696
    3. ')' → logprob: -2.76725435256958
    4. 'de' → logprob: -3.14225435256958
    5. ' )' → logprob: -4.14225435256958
    6. ' ' → logprob: -4.51725435256958
    7. ' contenant' → logprob: -4.89225435256958
    8. '):' → logprob: -5.39225435256958
    9. ' d' → logprob: -6.26725435256958
    10. 'cont' → logprob: -6.51725435256958

Token 37: ' ' (ID: 220)
  Prédit: 'car'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'car' → logprob: -0.16121555864810944
    2. ' caractères' → logprob: -1.9112155437469482
    3. ' caract' → logprob: -7.911215782165527
    4. ' caracteres' → logprob: -8.911215782165527
    5. ' ' → logprob: -9.161215782165527
    6. 'texte' → logprob: -9.161215782165527
    7. ' car' → logprob: -9.286215782165527
    8. ' caractère' → logprob: -9.911215782165527
    9. 'c' → logprob: -10.286215782165527
    10. 'char' → logprob: -10.786215782165527

Token 38: '4' (ID: 19)
  Prédit: 'car'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'car' → logprob: -0.0001158211671281606
    2. 'texte' → logprob: -9.875115394592285
    3. ' caractères' → logprob: -10.000115394592285
    4. '```' → logprob: -12.625115394592285
    5. 'c' → logprob: -13.000115394592285
    6. 'text' → logprob: -13.250115394592285
    7. 'cha' → logprob: -13.250115394592285
    8. 'chars' → logprob: -13.375115394592285
    9. '   ' → logprob: -13.625115394592285
    10. 'de' → logprob: -13.750115394592285

Token 39: ' caractères' (ID: 183106)
  Prédit: 'car'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'car' → logprob: -0.18441353738307953
    2. ' caractères' → logprob: -1.8094135522842407
    3. ' caract' → logprob: -6.059413433074951
    4. ' car' → logprob: -7.434413433074951
    5. ' caracteres' → logprob: -7.434413433074951
    6. ' ' → logprob: -8.30941390991211
    7. ')' → logprob: -8.55941390991211
    8. 'c' → logprob: -8.93441390991211
    9. 'chars' → logprob: -9.18441390991211
    10. 'char' → logprob: -9.30941390991211

Token 40: '.

' (ID: 364)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.12745998799800873
    2. '   ' → logprob: -2.50246000289917
    3. '):' → logprob: -3.37746000289917
    4. '")' → logprob: -6.62746000289917
    5. '"""' → logprob: -7.25246000289917
    6. ' )' → logprob: -7.37746000289917
    7. '')' → logprob: -8.752459526062012
    8. '"' → logprob: -9.252459526062012
    9. '):
' → logprob: -9.252459526062012
    10. '```' → logprob: -9.252459526062012

Token 41: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03043827973306179
    2. '"""
' → logprob: -4.155438423156738
    3. ')' → logprob: -5.280438423156738
    4. '"""' → logprob: -5.905438423156738
    5. '```' → logprob: -6.530438423156738
    6. '    ' → logprob: -6.780438423156738
    7. '
' → logprob: -6.780438423156738
    8. ')
' → logprob: -7.030438423156738
    9. ' """
' → logprob: -7.530438423156738
    10. '    
' → logprob: -8.155438423156738

Token 42: ' Returns' (ID: 9609)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2333974987268448
    2. 'Returns' (adapté à ' Returns') → logprob: -1.6083974838256836
    3. '"""' → logprob: -5.608397483825684
    4. ' Returns' → logprob: -6.608397483825684
    5. '"""
' → logprob: -6.733397483825684
    6. ')' → logprob: -7.983397483825684
    7. 'Retour' → logprob: -8.233397483825684
    8. 'Return' → logprob: -8.608397483825684
    9. '```' → logprob: -8.608397483825684
    10. '    
' → logprob: -8.733397483825684

Token 43: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.08526910841464996
    2. '   ' → logprob: -3.2102692127227783
    3. ' :' → logprob: -3.8352692127227783
    4. '<|end|>' → logprob: -4.460268974304199
    5. '```' → logprob: -5.960268974304199
    6. ' True' → logprob: -6.585268974304199
    7. '):' → logprob: -7.210268974304199
    8. '  ' → logprob: -7.460268974304199
    9. 'True' → logprob: -7.710268974304199
    10. '<|end|>' → logprob: -7.835268974304199

Token 44: '       ' (ID: 309)
  Prédit: ' bool'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' bool' → logprob: -0.9397439956665039
    2. ' True' → logprob: -1.064743995666504
    3. '   ' → logprob: -1.689743995666504
    4. '    ' → logprob: -2.939743995666504
    5. 'True' → logprob: -3.939743995666504
    6. 'bool' → logprob: -5.064743995666504
    7. ' ' → logprob: -7.564743995666504
    8. '       ' → logprob: -8.564743995666504
    9. ' `' → logprob: -9.439743995666504
    10. '(bool' → logprob: -9.689743995666504

Token 45: ' str' (ID: 989)
  Prédit: 'bool'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bool' → logprob: -0.00917309895157814
    2. ' bool' → logprob: -5.0091729164123535
    3. '   ' → logprob: -6.1341729164123535
    4. 'True' → logprob: -8.259173393249512
    5. '       ' → logprob: -11.009173393249512
    6. ' True' → logprob: -12.259173393249512
    7. 'Bool' → logprob: -12.759173393249512
    8. 'boolean' → logprob: -13.634173393249512
    9. '(bool' → logprob: -13.884173393249512
    10. '```' → logprob: -14.259173393249512

Token 46: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.005299573298543692
    2. '"' → logprob: -6.6302995681762695
    3. ''' → logprob: -6.7552995681762695
    4. '   ' → logprob: -6.7552995681762695
    5. '":' → logprob: -7.8802995681762695
    6. ' :' → logprob: -8.00529956817627
    7. ':
' → logprob: -8.00529956817627
    8. '':' → logprob: -8.38029956817627
    9. '"""' → logprob: -10.00529956817627
    10. ':return' → logprob: -10.00529956817627

Token 47: ' "' (ID: 392)
  Prédit: ' True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.7859053611755371
    2. ' '' → logprob: -1.160905361175537
    3. ' "' → logprob: -2.285905361175537
    4. 'True' → logprob: -3.160905361175537
    5. ''' → logprob: -3.285905361175537
    6. '   ' → logprob: -3.660905361175537
    7. '"' → logprob: -4.535905361175537
    8. ''O' → logprob: -6.410905361175537
    9. ''T' → logprob: -6.410905361175537
    10. 'bool' → logprob: -6.785905361175537

Token 48: 'Yes' (ID: 13022)
  Prédit: 'Oui'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Oui' → logprob: -1.184484601020813
    2. 'True' → logprob: -1.309484601020813
    3. 'Deux' → logprob: -1.934484601020813
    4. 'de' → logprob: -2.3094844818115234
    5. 'Yes' → logprob: -2.8094844818115234
    6. '2' → logprob: -3.0594844818115234
    7. 'YES' → logprob: -4.059484481811523
    8. 'O' → logprob: -4.559484481811523
    9. 'DE' → logprob: -4.684484481811523
    10. 'Two' → logprob: -4.809484481811523

Token 49: '"' (ID: 1)
  Prédit: '"'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -7.32654589228332e-05
    2. ' or' → logprob: -10.750073432922363
    3. ' "' → logprob: -11.250073432922363
    4. ' ou' → logprob: -11.875073432922363
    5. '\n' → logprob: -12.250073432922363
    6. '```' → logprob: -12.250073432922363
    7. ',' → logprob: -12.375073432922363
    8. '"""' → logprob: -12.500073432922363
    9. '   ' → logprob: -12.625073432922363
    10. ':' → logprob: -12.750073432922363

Token 50: ' si' (ID: 1784)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11025083810091019
    2. ' or' → logprob: -3.360250949859619
    3. ' if' → logprob: -3.485250949859619
    4. '```' → logprob: -4.235250949859619
    5. '"' → logprob: -5.360250949859619
    6. 'if' → logprob: -5.485250949859619
    7. '<|end|>' → logprob: -5.485250949859619
    8. '"""' → logprob: -5.860250949859619
    9. ' ' → logprob: -6.360250949859619
    10. '    ' → logprob: -6.485250949859619

Token 51: ' la' (ID: 557)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.785966157913208
    2. ' il' → logprob: -1.285966157913208
    3. ' s' → logprob: -1.660966157913208
    4. ' there' → logprob: -3.535966157913208
    5. ' deux' → logprob: -4.285965919494629
    6. ' la' → logprob: -4.410965919494629
    7. 's' → logprob: -4.785965919494629
    8. '  ' → logprob: -4.785965919494629
    9. '   ' → logprob: -6.285965919494629
    10. ' exactement' → logprob: -7.410965919494629

Token 52: ' chaîne' (ID: 89288)
  Prédit: 're'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 're' → logprob: -0.0015252141747623682
    2. 'r' → logprob: -7.251525402069092
    3. 'ré' → logprob: -8.376524925231934
    4. 's' → logprob: -9.001524925231934
    5. 'ere' → logprob: -9.001524925231934
    6. ' s' → logprob: -9.126524925231934
    7. '   ' → logprob: -10.126524925231934
    8. ' re' → logprob: -10.251524925231934
    9. ' chaîne' → logprob: -10.626524925231934
    10. ' string' → logprob: -10.751524925231934

Token 53: ' contient' (ID: 89067)
  Prédit: ' contient'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' contient' → logprob: -0.028605429455637932
    2. ' a' → logprob: -4.6536054611206055
    3. ' cont' → logprob: -4.6536054611206055
    4. ' est' → logprob: -5.1536054611206055
    5. ' contains' → logprob: -6.4036054611206055
    6. 'cont' → logprob: -7.4036054611206055
    7. ' ' → logprob: -7.7786054611206055
    8. '   ' → logprob: -8.403605461120605
    9. ' comporte' → logprob: -9.028605461120605
    10. ' contain' → logprob: -9.403605461120605

Token 54: ' deux' (ID: 10301)
  Prédit: ' deux'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' deux' → logprob: -0.545161247253418
    2. ' exactement' → logprob: -1.420161247253418
    3. ' ' → logprob: -2.045161247253418
    4. ' exactly' → logprob: -3.420161247253418
    5. 'exact' → logprob: -4.545161247253418
    6. ' exact' → logprob: -6.420161247253418
    7. ' two' → logprob: -6.545161247253418
    8. '_exact' → logprob: -7.045161247253418
    9. ' "' → logprob: -7.545161247253418
    10. 'de' → logprob: -7.670161247253418

Token 55: ' p' (ID: 275)
  Prédit: ' pairs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pairs' → logprob: -0.8375204801559448
    2. ' p' → logprob: -1.0875204801559448
    3. ' espaces' → logprob: -1.5875204801559448
    4. ' ' → logprob: -4.587520599365234
    5. '_pairs' → logprob: -5.087520599365234
    6. ' spaces' → logprob: -5.712520599365234
    7. 'pairs' → logprob: -6.212520599365234
    8. 'p' → logprob: -7.462520599365234
    9. '<|end|>' → logprob: -7.587520599365234
    10. 'spaces' → logprob: -7.712520599365234

Token 56: 'aires' (ID: 8507)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.0065030320547521114
    2. 'ai' → logprob: -5.381503105163574
    3. ''a' → logprob: -7.381503105163574
    4. 'aires' → logprob: -7.631503105163574
    5. 'air' → logprob: -8.381503105163574
    6. ''' → logprob: -8.506503105163574
    7. 'à' → logprob: -10.506503105163574
    8. '`' → logprob: -10.631503105163574
    9. '``' → logprob: -10.631503105163574
    10. 'airs' → logprob: -10.881503105163574

Token 57: ' de' (ID: 334)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.9842537045478821
    2. ' ' → logprob: -0.9842537045478821
    3. ',' → logprob: -2.1092536449432373
    4. ' de' → logprob: -2.4842536449432373
    5. ' "' → logprob: -3.4842536449432373
    6. '   ' → logprob: -4.984253883361816
    7. ' ,' → logprob: -5.109253883361816
    8. 'de' → logprob: -7.359253883361816
    9. ''' → logprob: -7.359253883361816
    10. '  ' → logprob: -7.484253883361816

Token 58: ' caractères' (ID: 183106)
  Prédit: ' caractères'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' caractères' → logprob: -0.015460661612451077
    2. 'car' → logprob: -4.39046049118042
    3. ' caracteres' → logprob: -6.64046049118042
    4. ' caract' → logprob: -7.26546049118042
    5. ' car' → logprob: -8.390460968017578
    6. ' caractère' → logprob: -8.515460968017578
    7. ' characters' → logprob: -8.765460968017578
    8. ' lettres' → logprob: -9.640460968017578
    9. ' ' → logprob: -9.890460968017578
    10. 's' → logprob: -10.015460968017578

Token 59: ' différents' (ID: 36009)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.7744136452674866
    2. ',' → logprob: -1.5244135856628418
    3. '",' → logprob: -1.5244135856628418
    4. ' ' → logprob: -3.149413585662842
    5. 's' → logprob: -3.524413585662842
    6. ' ",' → logprob: -3.899413585662842
    7. '   ' → logprob: -5.399413585662842
    8. ' "' → logprob: -5.899413585662842
    9. ' ,' → logprob: -6.399413585662842
    10. '","' → logprob: -7.899413585662842

Token 60: ' (' (ID: 350)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.6913111209869385
    2. '",' → logprob: -1.4413111209869385
    3. '"' → logprob: -1.8163111209869385
    4. '   ' → logprob: -2.3163111209869385
    5. ' ,' → logprob: -8.19131088256836
    6. '"\' → logprob: -8.19131088256836
    7. ' ",' → logprob: -8.81631088256836
    8. 's' → logprob: -9.69131088256836
    9. '","' → logprob: -9.69131088256836
    10. '```' → logprob: -9.69131088256836

Token 61: 'par' (ID: 796)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.6107037663459778
    2. '),' → logprob: -0.9857037663459778
    3. ')' → logprob: -3.360703706741333
    4. '")' → logprob: -3.360703706741333
    5. '"' → logprob: -4.360703945159912
    6. ')",' → logprob: -7.360703945159912
    7. ')"' → logprob: -7.985703945159912
    8. '",' → logprob: -8.985703468322754
    9. 'e' → logprob: -8.985703468322754
    10. 'de' → logprob: -8.985703468322754

Token 62: ' exemple' (ID: 26320)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.7632759213447571
    2. 'ce' → logprob: -1.3882758617401123
    3. 'ex' → logprob: -2.1382758617401123
    4. 'fait' → logprob: -3.7632758617401123
    5. ' e' → logprob: -4.138276100158691
    6. ' ex' → logprob: -4.263276100158691
    7. '```' → logprob: -4.388276100158691
    8. 'fois' → logprob: -4.638276100158691
    9. ' exc' → logprob: -4.763276100158691
    10. '	ex' → logprob: -4.888276100158691

Token 63: ' A' (ID: 355)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.9296829700469971
    2. '"),' → logprob: -2.054682970046997
    3. ' "),' → logprob: -2.179682970046997
    4. ' "' → logprob: -2.554682970046997
    5. '),' → logprob: -2.679682970046997
    6. ' '' → logprob: -2.804682970046997
    7. ''' → logprob: -3.179682970046997
    8. ' ' → logprob: -3.429682970046997
    9. '   ' → logprob: -3.554682970046997
    10. ',' → logprob: -4.554682731628418

Token 64: 'ABB' (ID: 78701)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.46724939346313477
    2. 'B' → logprob: -1.2172493934631348
    3. ')' → logprob: -3.5922493934631348
    4. '"' → logprob: -4.342249393463135
    5. 'C' → logprob: -5.092249393463135
    6. ''' → logprob: -5.217249393463135
    7. '2' → logprob: -5.717249393463135
    8. '")' → logprob: -5.717249393463135
    9. 's' → logprob: -5.842249393463135
    10. 'K' → logprob: -6.217249393463135

Token 65: '),' (ID: 936)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.9341563582420349
    2. ')' → logprob: -1.3091564178466797
    3. '),' → logprob: -1.8091564178466797
    4. '"),' → logprob: -1.9341564178466797
    5. '"' → logprob: -3.9341564178466797
    6. '",' → logprob: -6.18415641784668
    7. ' or' → logprob: -6.43415641784668
    8. ')"' → logprob: -6.43415641784668
    9. ',' → logprob: -6.68415641784668
    10. ' ou' → logprob: -7.05915641784668

Token 66: ' sinon' (ID: 52915)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02525772899389267
    2. '"' → logprob: -4.150257587432861
    3. '       ' → logprob: -5.525257587432861
    4. '\n' → logprob: -6.150257587432861
    5. '"\' → logprob: -6.775257587432861
    6. '    ' → logprob: -8.02525806427002
    7. '
' → logprob: -8.15025806427002
    8. '    
' → logprob: -8.40025806427002
    9. ' ' → logprob: -8.52525806427002
    10. ' 
' → logprob: -8.65025806427002

Token 67: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.024540048092603683
    2. ' "' → logprob: -3.7745399475097656
    3. '"No' → logprob: -7.024539947509766
    4. ''' → logprob: -8.399539947509766
    5. ' No' → logprob: -9.524539947509766
    6. '   ' → logprob: -10.524539947509766
    7. ' return' → logprob: -10.774539947509766
    8. ' ' → logprob: -11.274539947509766
    9. '"N' → logprob: -11.649539947509766
    10. '"""' → logprob: -11.899539947509766

Token 68: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.00025406808708794415
    2. ' No' → logprob: -8.750253677368164
    3. '"No' → logprob: -9.500253677368164
    4. 'Non' → logprob: -11.375253677368164
    5. '"' → logprob: -11.875253677368164
    6. 'N' → logprob: -13.875253677368164
    7. 'Yes' → logprob: -14.625253677368164
    8. 'NO' → logprob: -15.125253677368164
    9. '   ' → logprob: -15.625253677368164
    10. ' ' → logprob: -15.750253677368164

Token 69: '".
' (ID: 26880)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.16072162985801697
    2. '"""' → logprob: -1.9107216596603394
    3. '```' → logprob: -8.410721778869629
    4. '   ' → logprob: -8.785721778869629
    5. '"""
' → logprob: -9.285721778869629
    6. ' """' → logprob: -11.410721778869629
    7. '"
' → logprob: -12.035721778869629
    8. '".' → logprob: -13.035721778869629
    9. '"""
' → logprob: -13.035721778869629
    10. '""' → logprob: -13.160721778869629

Token 70: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13366129994392395
    2. '"""' → logprob: -2.1336612701416016
    3. '"""
' → logprob: -5.383661270141602
    4. '
' → logprob: -7.133661270141602
    5. '"' → logprob: -7.383661270141602
    6. '```' → logprob: -8.133661270141602
    7. '""' → logprob: -8.383661270141602
    8. ')' → logprob: -9.133661270141602
    9. ' """' → logprob: -10.883661270141602
    10. '    
' → logprob: -11.383661270141602

Token 71: ' """
' (ID: 7037)
  Prédit: '"""'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"""' → logprob: -0.5614120364189148
    2. '   ' → logprob: -1.0614120960235596
    3. '"""
' (adapté à ' """
') → logprob: -3.1864120960235596
    4. '
' → logprob: -4.0614118576049805
    5. '```' → logprob: -4.3114118576049805
    6. '"' → logprob: -5.0614118576049805
    7. ')' → logprob: -5.8114118576049805
    8. '""' → logprob: -6.5614118576049805
    9. '`' → logprob: -8.81141185760498
    10. ''''' → logprob: -8.93641185760498

Token 72: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0034686902072280645
    2. 'from' → logprob: -5.8784685134887695
    3. ' from' → logprob: -7.6284685134887695
    4. '```' → logprob: -9.75346851348877
    5. '
' → logprob: -10.00346851348877
    6. 'import' → logprob: -10.87846851348877
    7. '    
' → logprob: -11.12846851348877
    8. 'counts' → logprob: -11.50346851348877
    9. ' frequencies' → logprob: -12.12846851348877
    10. ' counts' → logprob: -12.25346851348877

Token 73: ' #' (ID: 1069)
  Prédit: 'from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'from' → logprob: -0.45795929431915283
    2. ' from' → logprob: -1.3329592943191528
    3. '   ' → logprob: -2.9579591751098633
    4. 'counts' → logprob: -3.4579591751098633
    5. ' if' → logprob: -4.957959175109863
    6. 'if' → logprob: -5.207959175109863
    7. ' counts' → logprob: -6.207959175109863
    8. 'counter' → logprob: -6.332959175109863
    9. 'freq' → logprob: -6.582959175109863
    10. 'count' → logprob: -6.957959175109863

Token 74: ' Convert' (ID: 15629)
  Prédit: ' from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' from' → logprob: -0.19948679208755493
    2. 'from' → logprob: -1.8244867324829102
    3. '   ' → logprob: -4.69948673248291
    4. ' f' → logprob: -6.07448673248291
    5. 'f' → logprob: -6.32448673248291
    6. ' if' → logprob: -6.32448673248291
    7. 'c' → logprob: -6.57448673248291
    8. ' counter' → logprob: -7.19948673248291
    9. ' c' → logprob: -7.44948673248291
    10. ' counts' → logprob: -8.19948673248291

Token 75: 'ir' (ID: 380)
  Prédit: 'ions'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ions' → logprob: -0.9937463998794556
    2. '   ' → logprob: -1.1187463998794556
    3. 'ion' → logprob: -1.2437463998794556
    4. 'from' → logprob: -5.618746280670166
    5. 's' → logprob: -5.868746280670166
    6. ' from' → logprob: -6.368746280670166
    7. 'ing' → logprob: -6.743746280670166
    8. 'ation' → logprob: -7.493746280670166
    9. 'i' → logprob: -7.743746280670166
    10. 'e' → logprob: -7.993746280670166

Token 76: ' la' (ID: 557)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.5313009023666382
    2. ' s' → logprob: -1.4063009023666382
    3. 'from' → logprob: -3.5313010215759277
    4. ' collections' → logprob: -3.7813010215759277
    5. 'collections' → logprob: -3.7813010215759277
    6. ' from' → logprob: -3.9063010215759277
    7. '   ' → logprob: -4.031301021575928
    8. ' la' → logprob: -4.031301021575928
    9. ' le' → logprob: -4.781301021575928
    10. ' les' → logprob: -5.156301021575928

Token 77: ' chaîne' (ID: 89288)
  Prédit: 'from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'from' → logprob: -0.24921898543834686
    2. 'collections' → logprob: -1.9992189407348633
    3. 's' → logprob: -2.7492189407348633
    4. ' from' → logprob: -3.9992189407348633
    5. 'set' → logprob: -7.499218940734863
    6. ' collections' → logprob: -7.499218940734863
    7. 'c' → logprob: -7.624218940734863
    8. ' s' → logprob: -7.999218940734863
    9. '```' → logprob: -8.124218940734863
    10. 'collection' → logprob: -8.749218940734863

Token 78: ' en' (ID: 469)
  Prédit: ' en'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.30990657210350037
    2. '   ' → logprob: -1.5599066019058228
    3. ' ' → logprob: -3.809906482696533
    4. 's' → logprob: -4.559906482696533
    5. '_' → logprob: -4.934906482696533
    6. ' s' → logprob: -5.184906482696533
    7. 'en' → logprob: -5.559906482696533
    8. ' in' → logprob: -6.809906482696533
    9. '    ' → logprob: -7.309906482696533
    10. ' into' → logprob: -7.434906482696533

Token 79: ' liste' (ID: 31719)
  Prédit: 'collections'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'collections' → logprob: -0.5868110060691833
    2. ' une' → logprob: -1.9618110656738281
    3. 'une' → logprob: -2.336811065673828
    4. 'list' → logprob: -2.586811065673828
    5. ' un' → logprob: -3.211811065673828
    6. 'un' → logprob: -3.336811065673828
    7. 'a' → logprob: -4.086811065673828
    8. ' a' → logprob: -4.461811065673828
    9. 'liste' → logprob: -5.086811065673828
    10. 'set' → logprob: -5.336811065673828

Token 80: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4033530056476593
    2. 's' → logprob: -1.403352975845337
    3. ' s' → logprob: -2.903352975845337
    4. 'tokens' → logprob: -4.903353214263916
    5. ' =' → logprob: -5.153353214263916
    6. '(s' → logprob: -6.028353214263916
    7. '[' → logprob: -6.153353214263916
    8. '()' → logprob: -6.653353214263916
    9. '[]' → logprob: -6.653353214263916
    10. '(' → logprob: -6.778353214263916

Token 81: ' caractères' (ID: 183106)
  Prédit: 'car'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'car' → logprob: -0.7087841033935547
    2. ' caractères' → logprob: -0.7087841033935547
    3. 'collections' → logprob: -4.833784103393555
    4. 'list' → logprob: -6.458784103393555
    5. ' car' → logprob: -6.833784103393555
    6. ' caract' → logprob: -7.208784103393555
    7. ' caracteres' → logprob: -7.208784103393555
    8. 'chars' → logprob: -7.333784103393555
    9. 'characters' → logprob: -7.458784103393555
    10. 's' → logprob: -7.708784103393555

Token 82: ' pour' (ID: 1930)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03117891028523445
    2. 's' → logprob: -4.031178951263428
    3. '    
' → logprob: -5.031178951263428
    4. '\n' → logprob: -6.531178951263428
    5. '
' → logprob: -7.156178951263428
    6. '```' → logprob: -7.156178951263428
    7. '    ' → logprob: -7.781178951263428
    8. 'n' → logprob: -7.781178951263428
    9. 'c' → logprob: -7.906178951263428
    10. '\' → logprob: -8.28117847442627

Token 83: ' permettre' (ID: 55483)
  Prédit: ' compter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' compter' → logprob: -0.4390886127948761
    2. ' faciliter' → logprob: -1.5640885829925537
    3. 's' → logprob: -3.1890885829925537
    4. ' pouvoir' → logprob: -3.4390885829925537
    5. 'fac' → logprob: -4.939088821411133
    6. ' ' → logprob: -5.064088821411133
    7. 'an' → logprob: -5.189088821411133
    8. ' permettre' → logprob: -5.439088821411133
    9. ' analyser' → logprob: -5.439088821411133
    10. 'comp' → logprob: -5.564088821411133

Token 84: ' le' (ID: 505)
  Prédit: ' compter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' compter' → logprob: -0.17741909623146057
    2. ' la' → logprob: -3.0524191856384277
    3. ' l' → logprob: -3.3024191856384277
    4. ' une' → logprob: -3.5524191856384277
    5. ' le' → logprob: -4.052419185638428
    6. ' un' → logprob: -4.927419185638428
    7. '   ' → logprob: -5.052419185638428
    8. ' len' → logprob: -5.302419185638428
    9. 'l' → logprob: -6.427419185638428
    10. ' les' → logprob: -6.427419185638428

Token 85: ' tri' (ID: 12665)
  Prédit: 'com'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'com' → logprob: -0.5371087193489075
    2. ' compt' → logprob: -1.2871086597442627
    3. 's' → logprob: -2.6621086597442627
    4. 'comp' → logprob: -3.1621086597442627
    5. 'count' → logprob: -4.537108898162842
    6. 'collections' → logprob: -5.662108898162842
    7. ' compte' → logprob: -5.787108898162842
    8. ' traitement' → logprob: -5.912108898162842
    9. 'trait' → logprob: -7.537108898162842
    10. '```' → logprob: -7.537108898162842

Token 86: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.41748031973838806
    2. 's' → logprob: -1.1674803495407104
    3. '\n' → logprob: -4.54248046875
    4. '    
' → logprob: -5.66748046875
    5. '[' → logprob: -5.79248046875
    6. 'chars' → logprob: -5.91748046875
    7. 'c' → logprob: -6.41748046875
    8. ' s' → logprob: -7.04248046875
    9. '```' → logprob: -7.29248046875
    10. 'tokens' → logprob: -7.41748046875

Token 87: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10764352232217789
    2. 's' → logprob: -2.4826436042785645
    3. '\n' → logprob: -5.4826436042785645
    4. '[' → logprob: -5.4826436042785645
    5. '    
' → logprob: -5.4826436042785645
    6. 'n' → logprob: -6.7326436042785645
    7. '\' → logprob: -6.8576436042785645
    8. 'c' → logprob: -7.4826436042785645
    9. ',' → logprob: -7.8576436042785645
    10. ' ' → logprob: -7.9826436042785645

Token 88: ' chars' (ID: 47991)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.8149303793907166
    2. 'chars' (adapté à ' chars') → logprob: -1.3149304389953613
    3. 'c' → logprob: -2.5649304389953613
    4. ' s' → logprob: -2.8149304389953613
    5. ' chars' → logprob: -3.3149304389953613
    6. '   ' → logprob: -3.3149304389953613
    7. ' c' → logprob: -3.5649304389953613
    8. 'char' → logprob: -4.689930438995361
    9. '[' → logprob: -4.939930438995361
    10. ' ' → logprob: -5.314930438995361

Token 89: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.016529642045497894
    2. '=' → logprob: -4.141529560089111
    3. '_' → logprob: -8.39153003692627
    4. 's' → logprob: -8.64153003692627
    5. '[:]' → logprob: -10.76653003692627
    6. '.' → logprob: -11.76653003692627
    7. ')' → logprob: -11.76653003692627
    8. '_list' → logprob: -11.89153003692627
    9. '=[]' → logprob: -12.01653003692627
    10. '[' → logprob: -12.01653003692627

Token 90: ' list' (ID: 1562)
  Prédit: ' list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.31555604934692383
    2. 'list' → logprob: -1.4405560493469238
    3. ' sorted' → logprob: -3.815556049346924
    4. 'sorted' → logprob: -4.440556049346924
    5. '   ' → logprob: -13.940555572509766
    6. '```' → logprob: -14.065555572509766
    7. ' ' → logprob: -14.190555572509766
    8. '	list' → logprob: -14.315555572509766
    9. ' ' → logprob: -14.315555572509766
    10. 's' → logprob: -14.565555572509766

Token 91: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.005344043951481581
    2. '(' → logprob: -5.255343914031982
    3. 's' → logprob: -9.13034439086914
    4. '(
' → logprob: -13.63034439086914
    5. ' (' → logprob: -14.63034439086914
    6. ')' → logprob: -16.25534439086914
    7. '(ss' → logprob: -17.25534439086914
    8. '(S' → logprob: -18.00534439086914
    9. ' ' → logprob: -18.13034439086914
    10. '()' → logprob: -18.13034439086914

Token 92: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.988221684878226e-06
    2. '))' → logprob: -12.625006675720215
    3. ' )' → logprob: -13.750006675720215
    4. '[' → logprob: -14.500006675720215
    5. ')
' → logprob: -14.500006675720215
    6. '   ' → logprob: -15.000006675720215
    7. ').' → logprob: -15.125006675720215
    8. ')`' → logprob: -16.00000762939453
    9. ')))' → logprob: -16.37500762939453
    10. 's' → logprob: -16.37500762939453

Token 93: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.19255027174949646
    2. 'chars' → logprob: -1.8175503015518188
    3. ' chars' → logprob: -5.442550182342529
    4. '
' → logprob: -5.567550182342529
    5. '    
' → logprob: -6.567550182342529
    6. '```' → logprob: -7.067550182342529
    7. '(chars' → logprob: -7.067550182342529
    8. ')' → logprob: -7.942550182342529
    9. '\' → logprob: -8.692550659179688
    10. '\n' → logprob: -8.942550659179688

Token 94: ' #' (ID: 1069)
  Prédit: 'chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'chars' → logprob: -0.014925048686563969
    2. '   ' → logprob: -4.764925003051758
    3. ' chars' → logprob: -5.264925003051758
    4. '    
' → logprob: -8.139925003051758
    5. '(chars' → logprob: -8.139925003051758
    6. '_chars' → logprob: -9.014925003051758
    7. '
' → logprob: -9.514925003051758
    8. 'char' → logprob: -9.764925003051758
    9. ')' → logprob: -9.764925003051758
    10. ' 
' → logprob: -10.139925003051758

Token 95: ' Trier' (ID: 191551)
  Prédit: 'chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'chars' → logprob: -0.08933603763580322
    2. ' chars' → logprob: -2.4643359184265137
    3. 'sorted' → logprob: -9.089336395263672
    4. '(chars' → logprob: -9.714336395263672
    5. 'sort' → logprob: -9.839336395263672
    6. 'char' → logprob: -10.276836395263672
    7. '```' → logprob: -10.589336395263672
    8. '   ' → logprob: -10.776836395263672
    9. 'Chars' → logprob: -11.214336395263672
    10. 'characters' → logprob: -11.714336395263672

Token 96: ' la' (ID: 557)
  Prédit: '(chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(chars' → logprob: -0.0013329789508134127
    2. 'chars' → logprob: -7.126332759857178
    3. '(' → logprob: -8.001333236694336
    4. ' chars' → logprob: -8.751333236694336
    5. '()' → logprob: -10.626333236694336
    6. '(char' → logprob: -12.126333236694336
    7. ' (' → logprob: -13.251333236694336
    8. ')' → logprob: -13.626333236694336
    9. '(
' → logprob: -14.251333236694336
    10. '_chars' → logprob: -14.626333236694336

Token 97: ' liste' (ID: 31719)
  Prédit: 'chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'chars' → logprob: -0.013140703551471233
    2. ' chars' → logprob: -4.388140678405762
    3. '(chars' → logprob: -8.638140678405762
    4. 'liste' → logprob: -8.763140678405762
    5. '_chars' → logprob: -9.513140678405762
    6. ' liste' → logprob: -9.763140678405762
    7. 's' → logprob: -9.888140678405762
    8. 'char' → logprob: -10.513140678405762
    9. 'characters' → logprob: -11.138140678405762
    10. 'chaine' → logprob: -11.138140678405762

Token 98: ' pour' (ID: 1930)
  Prédit: '(chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(chars' → logprob: -0.2252987027168274
    2. '   ' → logprob: -1.9752986431121826
    3. 'chars' → logprob: -3.4752986431121826
    4. '()' → logprob: -3.6002986431121826
    5. ' chars' → logprob: -6.350298881530762
    6. ')' → logprob: -6.475298881530762
    7. '(' → logprob: -6.975298881530762
    8. '.' → logprob: -9.475298881530762
    9. '_chars' → logprob: -9.475298881530762
    10. '(sorted' → logprob: -9.725298881530762

Token 99: ' reg' (ID: 1324)
  Prédit: ' faciliter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' faciliter' → logprob: -0.01798240840435028
    2. ' facil' → logprob: -4.767982482910156
    3. 'fac' → logprob: -5.392982482910156
    4. ' pouvoir' → logprob: -7.142982482910156
    5. ' facilitar' → logprob: -7.267982482910156
    6. ' permettre' → logprob: -7.517982482910156
    7. ' rendre' → logprob: -7.767982482910156
    8. ' que' → logprob: -7.892982482910156
    9. ' facilit' → logprob: -8.142982482910156
    10. ' garantir' → logprob: -8.392982482910156

Token 100: 'rou' (ID: 691)
  Prédit: 'arder'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'arder' → logprob: -0.02803448773920536
    2. 'rou' → logprob: -3.9030344486236572
    3. 'ard' → logprob: -5.778034687042236
    4. 'ar' → logprob: -7.153034687042236
    5. 'agner' → logprob: -7.153034687042236
    6. 'roup' → logprob: -7.528034687042236
    7. 'ler' → logprob: -7.778034687042236
    8. 'al' → logprob: -8.028034210205078
    9. 'arnir' → logprob: -8.153034210205078
    10. '   ' → logprob: -8.528034210205078

Token 101: 'per' (ID: 543)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.014705288223922253
    2. 'per' → logprob: -4.264705181121826
    3. 'e' → logprob: -9.139705657958984
    4. '   ' → logprob: -9.514705657958984
    5. 'ner' → logprob: -9.514705657958984
    6. 'p' → logprob: -9.639705657958984
    7. 'ler' → logprob: -9.889705657958984
    8. 'ement' → logprob: -10.014705657958984
    9. 'erer' → logprob: -10.264705657958984
    10. 'mer' → logprob: -11.014705657958984

Token 102: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.13294580578804016
    2. 'les' → logprob: -2.1329457759857178
    3. ' ident' → logprob: -6.132946014404297
    4. ' identical' → logprob: -6.757946014404297
    5. 'ident' → logprob: -7.382946014404297
    6. '   ' → logprob: -7.382946014404297
    7. ' ' → logprob: -8.382946014404297
    8. ' similaires' → logprob: -8.382946014404297
    9. ' chars' → logprob: -8.757946014404297
    10. ' des' → logprob: -8.757946014404297

Token 103: ' caractères' (ID: 183106)
  Prédit: 'car'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'car' → logprob: -0.1121593788266182
    2. ' caractères' → logprob: -2.612159490585327
    3. 'chars' → logprob: -4.112159252166748
    4. 'm' → logprob: -5.112159252166748
    5. ' mêmes' → logprob: -5.487159252166748
    6. 'élé' → logprob: -5.612159252166748
    7. 'pairs' → logprob: -7.612159252166748
    8. 'characters' → logprob: -8.112159729003906
    9. ' pairs' → logprob: -8.362159729003906
    10. ' caracteres' → logprob: -8.487159729003906

Token 104: ' ident' (ID: 3951)
  Prédit: 'chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'chars' → logprob: -0.4744456112384796
    2. '   ' → logprob: -1.5994455814361572
    3. ' chars' → logprob: -1.9744455814361572
    4. '(chars' → logprob: -3.3494455814361572
    5. ')' → logprob: -7.349445819854736
    6. '_chars' → logprob: -7.599445819854736
    7. 's' → logprob: -8.349445343017578
    8. '.' → logprob: -9.224445343017578
    9. 'sorted' → logprob: -10.349445343017578
    10. ' )' → logprob: -10.474445343017578

Token 105: 'iques' (ID: 11654)
  Prédit: 'iques'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iques' → logprob: -0.0039039766415953636
    2. 'ical' → logprob: -6.503903865814209
    3. 'ic' → logprob: -7.628903865814209
    4. 'ique' → logprob: -7.753903865814209
    5. 'ics' → logprob: -8.128904342651367
    6. '```' → logprob: -8.128904342651367
    7. 'ques' → logprob: -8.628904342651367
    8. 's' → logprob: -8.628904342651367
    9. 'icals' → logprob: -9.378904342651367
    10. 'iquement' → logprob: -9.878904342651367

Token 106: '
' (ID: 198)
  Prédit: 'chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'chars' → logprob: -0.2716042697429657
    2. '   ' → logprob: -1.521604299545288
    3. '(chars' → logprob: -4.396604061126709
    4. ' chars' → logprob: -5.146604061126709
    5. ')' → logprob: -7.271604061126709
    6. '_chars' → logprob: -8.521604537963867
    7. ',' → logprob: -9.021604537963867
    8. '    
' → logprob: -9.021604537963867
    9. '
' → logprob: -9.896604537963867
    10. ')
' → logprob: -10.271604537963867

Token 107: '   ' (ID: 271)
  Prédit: 'chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'chars' → logprob: -0.31046822667121887
    2. '   ' → logprob: -1.4354681968688965
    3. ' chars' → logprob: -3.5604681968688965
    4. '(chars' → logprob: -7.9354681968688965
    5. '```' → logprob: -10.435468673706055
    6. '_chars' → logprob: -10.560468673706055
    7. '    
' → logprob: -10.810468673706055
    8. 'Chars' → logprob: -11.685468673706055
    9. 'char' → logprob: -12.310468673706055
    10. '
' → logprob: -12.310468673706055

Token 108: ' chars' (ID: 47991)
  Prédit: 'chars'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'chars' (adapté à ' chars') → logprob: -0.01606663130223751
    2. ' chars' → logprob: -4.141066551208496
    3. '   ' → logprob: -10.766066551208496
    4. '(chars' → logprob: -11.891066551208496
    5. 'sorted' → logprob: -13.516066551208496
    6. 'char' → logprob: -14.016066551208496
    7. '_chars' → logprob: -14.266066551208496
    8. 'Chars' → logprob: -14.891066551208496
    9. 'characters' → logprob: -15.141066551208496
    10. '    
' → logprob: -15.641066551208496

Token 109: '.sort' (ID: 19551)
  Prédit: '.sort'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.sort' → logprob: -0.023267026990652084
    2. '.' → logprob: -3.7732670307159424
    3. '.sorted' → logprob: -11.898266792297363
    4. 'sort' → logprob: -12.148266792297363
    5. ' .' → logprob: -12.398266792297363
    6. ').' → logprob: -13.648266792297363
    7. ')' → logprob: -13.773266792297363
    8. '.Sort' → logprob: -13.773266792297363
    9. ' sort' → logprob: -14.148266792297363
    10. '.s' → logprob: -14.523266792297363

Token 110: '()

' (ID: 5874)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7610192894935608
    2. '
' → logprob: -0.8860192894935608
    3. '    
' → logprob: -2.886019229888916
    4. '<|end|>' → logprob: -3.886019229888916
    5. '  
' → logprob: -4.261019229888916
    6. '<|end|>' → logprob: -4.636019229888916
    7. ',' → logprob: -5.136019229888916
    8. '\n' → logprob: -5.511019229888916
    9. '#' → logprob: -6.136019229888916
    10. ')' → logprob: -6.386019229888916

Token 111: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0904124453663826
    2. '
' → logprob: -2.7154123783111572
    3. '    
' → logprob: -4.090412616729736
    4. 'if' → logprob: -6.465412616729736
    5. ',' → logprob: -8.090412139892578
    6. '  
' → logprob: -8.215412139892578
    7. '   
' → logprob: -8.215412139892578
    8. ' if' → logprob: -8.465412139892578
    9. 'from' → logprob: -8.840412139892578
    10. '#' → logprob: -8.840412139892578

Token 112: ' #' (ID: 1069)
  Prédit: 'from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'from' → logprob: -1.0638009309768677
    2. 'counts' → logprob: -1.0638009309768677
    3. 'if' → logprob: -1.4388009309768677
    4. 'pairs' → logprob: -3.313800811767578
    5. '   ' → logprob: -4.188800811767578
    6. 'count' → logprob: -4.313800811767578
    7. 'freq' → logprob: -5.688800811767578
    8. 'counter' → logprob: -6.188800811767578
    9. '#' (adapté à ' #') → logprob: -7.313800811767578
    10. 'char' → logprob: -7.813800811767578

Token 113: ' Après' (ID: 47562)
  Prédit: 'from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'from' → logprob: -0.47369474172592163
    2. 'counts' → logprob: -1.9736948013305664
    3. 'if' → logprob: -2.2236948013305664
    4. ' from' → logprob: -2.9736948013305664
    5. 'count' → logprob: -3.3486948013305664
    6. ' if' → logprob: -4.098694801330566
    7. 'freq' → logprob: -4.973694801330566
    8. 'comp' → logprob: -5.348694801330566
    9. ' counts' → logprob: -5.598694801330566
    10. 'pairs' → logprob: -5.973694801330566

Token 114: ' le' (ID: 505)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'le' → logprob: -0.38720640540122986
    2. ' le' → logprob: -1.5122064352035522
    3. 'tri' → logprob: -2.7622063159942627
    4. ' tri' → logprob: -3.7622063159942627
    5. 'tr' → logprob: -5.137206554412842
    6. '#' → logprob: -6.387206554412842
    7. ' avoir' → logprob: -6.762206554412842
    8. 't' → logprob: -6.887206554412842
    9. '```' → logprob: -7.574706554412842
    10. 'avoir' → logprob: -7.824706554412842

Token 115: ' tri' (ID: 12665)
  Prédit: 'tri'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tri' → logprob: -0.004288403782993555
    2. ' tri' → logprob: -5.879288196563721
    3. 'sort' → logprob: -8.004288673400879
    4. '#' → logprob: -8.504288673400879
    5. 'prem' → logprob: -8.629288673400879
    6. 't' → logprob: -8.754288673400879
    7. 'tr' → logprob: -8.879288673400879
    8. 'tris' → logprob: -9.129288673400879
    9. 'sorting' → logprob: -10.004288673400879
    10. 'trait' → logprob: -10.254288673400879

Token 116: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.2583358883857727
    2. '   ' → logprob: -1.508335828781128
    3. ' ,' → logprob: -6.133336067199707
    4. 'if' → logprob: -6.383336067199707
    5. ' if' → logprob: -6.508336067199707
    6. ':' → logprob: -7.383336067199707
    7. 'def' → logprob: -9.758336067199707
    8. '    
' → logprob: -9.883336067199707
    9. ',
' → logprob: -10.133336067199707
    10. '#' → logprob: -10.508336067199707

Token 117: ' la' (ID: 557)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.916040301322937
    2. ' if' → logprob: -1.041040301322937
    3. 'if' → logprob: -1.541040301322937
    4. ' il' → logprob: -4.291040420532227
    5. '#' → logprob: -5.291040420532227
    6. ' on' → logprob: -6.291040420532227
    7. 'le' → logprob: -6.291040420532227
    8. 'len' → logprob: -6.291040420532227
    9. ' la' → logprob: -6.416040420532227
    10. ' si' → logprob: -6.666040420532227

Token 118: ' chaîne' (ID: 89288)
  Prédit: ' longueur'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' longueur' → logprob: -1.4932985305786133
    2. 's' → logprob: -2.1182985305786133
    3. 'fonction' → logprob: -2.1182985305786133
    4. 'prem' → logprob: -2.4932985305786133
    5. ' première' → logprob: -2.7432985305786133
    6. 'long' → logprob: -2.8682985305786133
    7. 'if' → logprob: -3.2432985305786133
    8. 'len' → logprob: -3.6182985305786133
    9. ' fonction' → logprob: -3.7432985305786133
    10. 'def' → logprob: -3.9932985305786133

Token 119: ' doit' (ID: 21822)
  Prédit: ' s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' s' → logprob: -1.4385924339294434
    2. 's' → logprob: -1.5635924339294434
    3. ' est' → logprob: -2.3135924339294434
    4. 'est' → logprob: -2.9385924339294434
    5. ' tri' → logprob: -3.0635924339294434
    6. '[' → logprob: -3.1885924339294434
    7. 'sorted' → logprob: -3.1885924339294434
    8. 'pe' → logprob: -3.4385924339294434
    9. ' a' → logprob: -3.5635924339294434
    10. ' has' → logprob: -3.6885924339294434

Token 120: ' être' (ID: 9104)
  Prédit: ' res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' res' → logprob: -0.18607579171657562
    2. ' être' → logprob: -2.1860756874084473
    3. ' avoir' → logprob: -3.5610756874084473
    4. 'res' → logprob: -4.561075687408447
    5. 'être' → logprob: -4.811075687408447
    6. ' soit' → logprob: -6.186075687408447
    7. ' ' → logprob: -6.311075687408447
    8. 'avoir' → logprob: -6.686075687408447
    9. ''avoir' → logprob: -7.561075687408447
    10. ' either' → logprob: -7.561075687408447

Token 121: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -1.126639723777771
    2. 'chars' → logprob: -1.376639723777771
    3. 'de' → logprob: -1.876639723777771
    4. ' chars' → logprob: -2.0016398429870605
    5. 'so' → logprob: -3.6266398429870605
    6. ' soit' → logprob: -3.6266398429870605
    7. '(chars' → logprob: -3.8766398429870605
    8. 'len' → logprob: -4.7516398429870605
    9. ' exactement' → logprob: -5.1266398429870605
    10. 's' → logprob: -5.2516398429870605

Token 122: ' la' (ID: 557)
  Prédit: ' longueur'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' longueur' → logprob: -0.320236474275589
    2. 'long' → logprob: -1.9452364444732666
    3. ' la' → logprob: -3.0702364444732666
    4. 'la' → logprob: -3.5702364444732666
    5. ' ' → logprob: -3.8202364444732666
    6. 'length' → logprob: -4.820236682891846
    7. '4' → logprob: -4.820236682891846
    8. ' long' → logprob: -4.945236682891846
    9. 'tail' → logprob: -6.070236682891846
    10. ' length' → logprob: -6.195236682891846

Token 123: ' forme' (ID: 27450)
  Prédit: 'forme'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'forme' → logprob: -0.0041230423375964165
    2. 'form' → logprob: -6.129123210906982
    3. ' forme' → logprob: -6.629123210906982
    4. 'long' → logprob: -8.379122734069824
    5. 'forma' → logprob: -9.004122734069824
    6. 'f' → logprob: -10.254122734069824
    7. 'formes' → logprob: -10.254122734069824
    8. 'format' → logprob: -10.629122734069824
    9. 'tail' → logprob: -10.879122734069824
    10. '   ' → logprob: -11.129122734069824

Token 124: ' XX' (ID: 27568)
  Prédit: 'chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'chars' → logprob: -0.6880870461463928
    2. 'XX' → logprob: -1.938086986541748
    3. ' chars' → logprob: -2.563086986541748
    4. '[' → logprob: -2.688086986541748
    5. '['' → logprob: -3.188086986541748
    6. '(chars' → logprob: -3.688086986541748
    7. ' XX' → logprob: -3.688086986541748
    8. '"' → logprob: -3.688086986541748
    9. 'A' → logprob: -3.813086986541748
    10. ' ' → logprob: -4.188086986541748

Token 125: 'YY' (ID: 17848)
  Prédit: 'YY'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'YY' → logprob: -0.004859192296862602
    2. 'Y' → logprob: -5.75485897064209
    3. 'XX' → logprob: -6.50485897064209
    4. 'YYYY' → logprob: -9.50485897064209
    5. ' YY' → logprob: -9.75485897064209
    6. ' ' → logprob: -11.00485897064209
    7. 'YYY' → logprob: -12.25485897064209
    8. 'BB' → logprob: -12.25485897064209
    9. ',' → logprob: -12.37985897064209
    10. 'ZZ' → logprob: -12.75485897064209

Token 126: ' où' (ID: 15113)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06103144958615303
    2. ' or' → logprob: -3.4360313415527344
    3. ' ou' → logprob: -5.061031341552734
    4. ' if' → logprob: -5.186031341552734
    5. ',' → logprob: -5.311031341552734
    6. 'or' → logprob: -5.936031341552734
    7. ' ' → logprob: -5.936031341552734
    8. 'if' → logprob: -6.311031341552734
    9. '  ' → logprob: -6.936031341552734
    10. '    ' → logprob: -7.311031341552734

Token 127: ' X' (ID: 2127)
  Prédit: '(chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(chars' → logprob: -0.24367809295654297
    2. ' (' → logprob: -1.743678092956543
    3. 'chars' → logprob: -3.368678092956543
    4. ' chars' → logprob: -5.118678092956543
    5. '(ch' → logprob: -8.118678092956543
    6. '(char' → logprob: -8.868678092956543
    7. '(' → logprob: -8.868678092956543
    8. ' ' → logprob: -9.368678092956543
    9. '(chr' → logprob: -9.493678092956543
    10. '(len' → logprob: -9.868678092956543

Token 128: ' !=' (ID: 1666)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.2754157781600952
    2. '==' → logprob: -1.7754157781600952
    3. ' chars' → logprob: -3.2754158973693848
    4. 'chars' → logprob: -3.6504158973693848
    5. ' ' → logprob: -5.525415897369385
    6. ' and' → logprob: -7.025415897369385
    7. ' or' → logprob: -7.400415897369385
    8. ' !=' → logprob: -7.400415897369385
    9. '[' → logprob: -8.275415420532227
    10. '(chars' → logprob: -8.650415420532227

Token 129: ' Y' (ID: 865)
  Prédit: 'Y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Y' → logprob: -0.007645083125680685
    2. ' Y' → logprob: -4.882645130157471
    3. ' ' → logprob: -10.632644653320312
    4. '<|end|>' → logprob: -12.382644653320312
    5. '	Y' → logprob: -12.757644653320312
    6. 'y' → logprob: -12.757644653320312
    7. 'Ys' → logprob: -13.757644653320312
    8. '
' → logprob: -14.132644653320312
    9. ' ' → logprob: -14.257644653320312
    10. 'X' → logprob: -14.757644653320312

Token 130: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.010359043255448341
    2. ':' → logprob: -6.385358810424805
    3. ' if' → logprob: -6.510358810424805
    4. ' or' → logprob: -6.510358810424805
    5. ' ' → logprob: -6.635358810424805
    6. ',' → logprob: -6.635358810424805
    7. 'if' → logprob: -7.260358810424805
    8. '
' → logprob: -7.385358810424805
    9. '    
' → logprob: -8.010358810424805
    10. '  ' → logprob: -8.135358810424805

Token 131: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05091211572289467
    2. '
' → logprob: -3.6759121417999268
    3. ':' → logprob: -4.550911903381348
    4. '    
' → logprob: -4.925911903381348
    5. ',' → logprob: -6.550911903381348
    6. ' if' → logprob: -6.925911903381348
    7. '  
' → logprob: -7.300911903381348
    8. 'if' → logprob: -7.425911903381348
    9. '   
' → logprob: -7.675911903381348
    10. ' ' → logprob: -7.800911903381348

Token 132: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.632941722869873
    2. 'if' → logprob: -0.882941722869873
    3. ' if' → logprob: -3.382941722869873
    4. 'return' → logprob: -3.882941722869873
    5. ' return' → logprob: -7.382941722869873
    6. '    
' → logprob: -9.507942199707031
    7. ' ' → logprob: -10.007942199707031
    8. '    ' → logprob: -10.632942199707031
    9. 'for' → logprob: -11.007942199707031
    10. '  ' → logprob: -11.007942199707031

Token 133: ' Cela' (ID: 44403)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.11780791729688644
    2. ' if' → logprob: -2.8678078651428223
    3. 'return' → logprob: -3.1178078651428223
    4. ' return' → logprob: -5.117807865142822
    5. '   ' → logprob: -5.742807865142822
    6. ' (' → logprob: -7.492807865142822
    7. '((' → logprob: -9.61780834197998
    8. '(' → logprob: -9.74280834197998
    9. '(len' → logprob: -10.24280834197998
    10. '(
' → logprob: -10.36780834197998

Token 134: ' signifie' (ID: 81149)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.972058117389679
    2. ' if' → logprob: -1.2220580577850342
    3. 'if' → logprob: -1.7220580577850342
    4. ' return' → logprob: -2.347058057785034
    5. 'return' → logprob: -3.847058057785034
    6. ' n' → logprob: -4.347058296203613
    7. ':' → logprob: -5.347058296203613
    8. 'n' → logprob: -5.722058296203613
    9. '    ' → logprob: -6.597058296203613
    10. ' a' → logprob: -6.847058296203613

Token 135: ' :' (ID: 712)
  Prédit: '(chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(chars' → logprob: -0.5860246419906616
    2. 'chars' → logprob: -1.2110246419906616
    3. ' (' → logprob: -2.586024761199951
    4. ' chars' → logprob: -2.711024761199951
    5. '   ' → logprob: -6.836024761199951
    6. '(' → logprob: -6.961024761199951
    7. '(len' → logprob: -7.211024761199951
    8. 'len' → logprob: -8.086024284362793
    9. 'return' → logprob: -8.461024284362793
    10. ' ' → logprob: -8.961024284362793

Token 136: ' 
' (ID: 793)
  Prédit: '(chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(chars' → logprob: -0.19073981046676636
    2. ' (' → logprob: -1.9407398700714111
    3. 'chars' → logprob: -4.065739631652832
    4. '(len' → logprob: -4.940739631652832
    5. ' chars' → logprob: -5.940739631652832
    6. '((' → logprob: -6.940739631652832
    7. 'len' → logprob: -7.440739631652832
    8. '   ' → logprob: -7.815739631652832
    9. '(ch' → logprob: -7.940739631652832
    10. 'return' → logprob: -8.440739631652832

Token 137: '   ' (ID: 271)
  Prédit: '(chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(chars' → logprob: -0.10716191679239273
    2. '   ' → logprob: -3.3571619987487793
    3. 'return' → logprob: -3.4821619987487793
    4. ' (' → logprob: -4.107161998748779
    5. 'chars' → logprob: -4.232161998748779
    6. ' return' → logprob: -6.357161998748779
    7. 'if' → logprob: -6.857161998748779
    8. ' chars' → logprob: -7.232161998748779
    9. '(' → logprob: -7.357161998748779
    10. '((' → logprob: -7.732161998748779

Token 138: ' #' (ID: 1069)
  Prédit: '(chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(chars' → logprob: -0.36128678917884827
    2. ' (' → logprob: -1.8612867593765259
    3. 'return' → logprob: -2.6112868785858154
    4. ' return' → logprob: -3.6112868785858154
    5. 'chars' → logprob: -3.8612868785858154
    6. '(len' → logprob: -4.611286640167236
    7. ' chars' → logprob: -5.236286640167236
    8. '   ' → logprob: -5.736286640167236
    9. 'if' → logprob: -5.861286640167236
    10. 'len' → logprob: -6.361286640167236

Token 139: ' -' (ID: 533)
  Prédit: '(chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(chars' → logprob: -0.14028270542621613
    2. 'chars' → logprob: -2.14028263092041
    3. 'return' → logprob: -4.89028263092041
    4. '(len' → logprob: -6.64028263092041
    5. ' (' → logprob: -6.76528263092041
    6. 'if' → logprob: -7.01528263092041
    7. 'len' → logprob: -7.01528263092041
    8. '((' → logprob: -7.51528263092041
    9. ' chars' → logprob: -7.89028263092041
    10. '(ch' → logprob: -8.64028263092041

Token 140: ' les' (ID: 1341)
  Prédit: 'chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'chars' → logprob: -0.1342223435640335
    2. '(chars' → logprob: -2.1342222690582275
    3. ' chars' → logprob: -5.259222507476807
    4. ' (' → logprob: -6.759222507476807
    5. 'len' → logprob: -7.509222507476807
    6. '(len' → logprob: -8.384222030639648
    7. '(ch' → logprob: -10.884222030639648
    8. '(' → logprob: -10.884222030639648
    9. 'ch' → logprob: -11.134222030639648
    10. 'char' → logprob: -11.384222030639648

Token 141: ' deux' (ID: 10301)
  Prédit: 'chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'chars' → logprob: -0.6356617212295532
    2. ' chars' → logprob: -0.7606617212295532
    3. ' ' → logprob: -6.385661602020264
    4. '2' → logprob: -7.635661602020264
    5. ' deux' → logprob: -8.260662078857422
    6. '4' → logprob: -8.760662078857422
    7. '3' → logprob: -8.885662078857422
    8. '(chars' → logprob: -9.135662078857422
    9. 'de' → logprob: -9.885662078857422
    10. '0' → logprob: -10.510662078857422

Token 142: ' premiers' (ID: 59140)
  Prédit: ' premiers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' premiers' → logprob: -0.27705496549606323
    2. 'chars' → logprob: -2.152055025100708
    3. 'prem' → logprob: -2.152055025100708
    4. ' chars' → logprob: -5.027054786682129
    5. ' premières' → logprob: -6.777054786682129
    6. 'first' → logprob: -7.902054786682129
    7. 's' → logprob: -8.402054786682129
    8. ' primeros' → logprob: -8.402054786682129
    9. ' ' → logprob: -8.527054786682129
    10. ' first' → logprob: -9.027054786682129

Token 143: ' caractères' (ID: 183106)
  Prédit: 'chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'chars' → logprob: -0.333753377199173
    2. ' caractères' → logprob: -1.5837533473968506
    3. ' chars' → logprob: -3.3337533473968506
    4. 'car' → logprob: -3.3337533473968506
    5. ' caracteres' → logprob: -5.83375358581543
    6. 'élé' → logprob: -6.33375358581543
    7. ' éléments' → logprob: -6.83375358581543
    8. 'characters' → logprob: -8.33375358581543
    9. 'char' → logprob: -8.45875358581543
    10. ' characters' → logprob: -8.70875358581543

Token 144: ' sont' (ID: 5242)
  Prédit: ' sont'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sont' → logprob: -0.9399226903915405
    2. 'chars' → logprob: -1.4399226903915405
    3. ' chars' → logprob: -1.8149226903915405
    4. 's' → logprob: -2.06492280960083
    5. ' are' → logprob: -2.93992280960083
    6. ' ==' → logprob: -4.43992280960083
    7. 'are' → logprob: -4.81492280960083
    8. ' doivent' → logprob: -6.06492280960083
    9. '==' → logprob: -6.31492280960083
    10. ' ' → logprob: -6.68992280960083

Token 145: ' ident' (ID: 3951)
  Prédit: 'ident'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ident' → logprob: -0.3268567621707916
    2. ' ident' → logprob: -2.076856851577759
    3. ' ég' → logprob: -2.951856851577759
    4. 'les' → logprob: -3.076856851577759
    5. ' les' → logprob: -3.451856851577759
    6. 'ég' → logprob: -3.951856851577759
    7. ' iguales' → logprob: -6.95185661315918
    8. 'égal' → logprob: -7.45185661315918
    9. 'chars' → logprob: -7.95185661315918
    10. 'eg' → logprob: -8.07685661315918

Token 146: 'iques' (ID: 11654)
  Prédit: 'ques'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ques' → logprob: -0.0005766240647062659
    2. 'iques' → logprob: -7.750576496124268
    3. 'que' → logprob: -9.250576972961426
    4. 'QUES' → logprob: -11.500576972961426
    5. '#' → logprob: -11.875576972961426
    6. 'c' → logprob: -12.375576972961426
    7. '```' → logprob: -12.375576972961426
    8. 'cal' → logprob: -12.750576972961426
    9. 'tiques' → logprob: -12.750576972961426
    10. 'cs' → logprob: -13.000576972961426

Token 147: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5326056480407715
    2. ' and' → logprob: -1.6576056480407715
    3. 'and' → logprob: -2.0326056480407715
    4. ' et' → logprob: -2.6576056480407715
    5. 'et' → logprob: -4.0326056480407715
    6. ',' → logprob: -5.9076056480407715
    7. ' ' → logprob: -8.15760612487793
    8. '    ' → logprob: -8.78260612487793
    9. '  ' → logprob: -9.03260612487793
    10. ' ,' → logprob: -10.53260612487793

Token 148: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.46654456853866577
    2. ' and' → logprob: -1.2165446281433105
    3. 'and' → logprob: -2.8415446281433105
    4. ' et' → logprob: -5.2165446281433105
    5. '    ' → logprob: -5.4665446281433105
    6. 'et' → logprob: -5.7165446281433105
    7. ' ' → logprob: -5.8415446281433105
    8. ',' → logprob: -6.9665446281433105
    9. '  ' → logprob: -7.9665446281433105
    10. 's' → logprob: -8.466544151306152

Token 149: ' #' (ID: 1069)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.46052882075309753
    2. 'and' → logprob: -1.46052885055542
    3. '   ' → logprob: -2.08552885055542
    4. ' chars' → logprob: -5.08552885055542
    5. 'chars' → logprob: -6.21052885055542
    6. ' et' → logprob: -6.33552885055542
    7. 'et' → logprob: -6.83552885055542
    8. 'if' → logprob: -7.71052885055542
    9. '    ' → logprob: -8.210528373718262
    10. ' if' → logprob: -8.335528373718262

Token 150: ' -' (ID: 533)
  Prédit: ' chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' chars' → logprob: -0.7462552785873413
    2. 'chars' → logprob: -0.8712552785873413
    3. ' and' → logprob: -3.121255397796631
    4. '   ' → logprob: -3.496255397796631
    5. 'and' → logprob: -3.496255397796631
    6. '(chars' → logprob: -6.871255397796631
    7. 'if' → logprob: -7.246255397796631
    8. ' if' → logprob: -8.246254920959473
    9. ' et' → logprob: -9.121254920959473
    10. 'et' → logprob: -9.371254920959473

Token 151: ' les' (ID: 1341)
  Prédit: 'chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'chars' → logprob: -0.426788866519928
    2. ' chars' → logprob: -1.4267888069152832
    3. ' les' → logprob: -2.551788806915283
    4. 'les' → logprob: -3.676788806915283
    5. '(chars' → logprob: -5.926788806915283
    6. 'le' → logprob: -7.551788806915283
    7. ' le' → logprob: -8.426789283752441
    8. '   ' → logprob: -8.426789283752441
    9. ' la' → logprob: -9.426789283752441
    10. ' ' → logprob: -9.676789283752441

Token 152: ' deux' (ID: 10301)
  Prédit: 'de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'de' → logprob: -0.056751593947410583
    2. ' deux' → logprob: -3.3067514896392822
    3. 'tro' → logprob: -4.056751728057861
    4. ' ' → logprob: -7.556751728057861
    5. ' tro' → logprob: -8.431751251220703
    6. ' trois' → logprob: -8.681751251220703
    7. '2' → logprob: -9.806751251220703
    8. '3' → logprob: -10.369251251220703
    9. 'qu' → logprob: -10.619251251220703
    10. '#' → logprob: -10.806751251220703

Token 153: ' derniers' (ID: 61275)
  Prédit: ' suivants'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' suivants' → logprob: -0.1517670452594757
    2. ' premiers' → logprob: -3.2767670154571533
    3. ' derniers' → logprob: -3.2767670154571533
    4. ' prochains' → logprob: -3.5267670154571533
    5. ' caractères' → logprob: -3.9017670154571533
    6. ' ' → logprob: -5.651767253875732
    7. ' ' → logprob: -5.776767253875732
    8. '#' → logprob: -6.151767253875732
    9. '   ' → logprob: -6.401767253875732
    10. 'prem' → logprob: -6.526767253875732

Token 154: ' caractères' (ID: 183106)
  Prédit: ' caractères'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' caractères' → logprob: -0.16766487061977386
    2. 'car' → logprob: -1.917664885520935
    3. ' sont' → logprob: -5.792665004730225
    4. ' caracteres' → logprob: -6.917665004730225
    5. 'chars' → logprob: -7.417665004730225
    6. ' car' → logprob: -7.542665004730225
    7. 's' → logprob: -7.667665004730225
    8. ' ' → logprob: -7.917665004730225
    9. 'characters' → logprob: -7.917665004730225
    10. ' characters' → logprob: -8.292664527893066

Token 155: ' sont' (ID: 5242)
  Prédit: ' sont'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sont' → logprob: -0.3103542625904083
    2. ' are' → logprob: -1.810354232788086
    3. 'are' → logprob: -2.810354232788086
    4. 's' → logprob: -3.185354232788086
    5. '<|end|>' → logprob: -7.435354232788086
    6. ' ' → logprob: -8.560354232788086
    7. '   ' → logprob: -8.560354232788086
    8. '#' → logprob: -8.810354232788086
    9. '...' → logprob: -9.810354232788086
    10. 'ont' → logprob: -10.185354232788086

Token 156: ' ident' (ID: 3951)
  Prédit: 'ident'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ident' → logprob: -0.3886379897594452
    2. ' ident' → logprob: -1.1386380195617676
    3. ' différents' → logprob: -7.638638019561768
    4. ' distinct' → logprob: -7.888638019561768
    5. 'égal' → logprob: -7.888638019561768
    6. ' également' → logprob: -8.88863754272461
    7. ' aussi' → logprob: -9.26363754272461
    8. '_ident' → logprob: -9.51363754272461
    9. 'distinct' → logprob: -9.88863754272461
    10. 'diff' → logprob: -10.01363754272461

Token 157: 'iques' (ID: 11654)
  Prédit: 'ques'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ques' → logprob: -0.47519224882125854
    2. 'iques' → logprob: -0.9751922488212585
    3. 'tiques' → logprob: -7.225192070007324
    4. 'que' → logprob: -8.850192070007324
    5. 'fi' → logprob: -9.600192070007324
    6. 'di' → logprob: -9.975192070007324
    7. 'aux' → logprob: -10.725192070007324
    8. 'ic' → logprob: -10.725192070007324
    9. 'c' → logprob: -10.850192070007324
    10. 'ci' → logprob: -11.225192070007324

Token 158: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0006078407750464976
    2. '    
' → logprob: -8.00060749053955
    3. '    ' → logprob: -9.50060749053955
    4. ',' → logprob: -10.50060749053955
    5. '  ' → logprob: -10.50060749053955
    6. '   
' → logprob: -10.50060749053955
    7. ' ' → logprob: -10.62560749053955
    8. '
' → logprob: -11.12560749053955
    9. '       ' → logprob: -11.12560749053955
    10. '\n' → logprob: -11.25060749053955

Token 159: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00011355629976605996
    2. '    
' → logprob: -9.500113487243652
    3. '    ' → logprob: -10.875113487243652
    4. '  ' → logprob: -12.625113487243652
    5. '
' → logprob: -12.750113487243652
    6. '   
' → logprob: -13.000113487243652
    7. '       ' → logprob: -13.125113487243652
    8. ' ' → logprob: -13.125113487243652
    9. ' if' → logprob: -13.250113487243652
    10. ',' → logprob: -13.500113487243652

Token 160: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006505047436803579
    2. 'if' → logprob: -5.381505012512207
    3. ' if' → logprob: -6.381505012512207
    4. '    
' → logprob: -9.131505012512207
    5. '    ' → logprob: -10.256505012512207
    6. ' ' → logprob: -11.631505012512207
    7. '  ' → logprob: -11.631505012512207
    8. '
' → logprob: -11.881505012512207
    9. '   
' → logprob: -12.256505012512207
    10. '       ' → logprob: -12.506505012512207

Token 161: ' -' (ID: 533)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.030224677175283432
    2. '   ' → logprob: -3.780224561691284
    3. 'return' → logprob: -5.405224800109863
    4. ' if' → logprob: -6.030224800109863
    5. ' return' → logprob: -10.030224800109863
    6. ' ' → logprob: -12.530224800109863
    7. '  ' → logprob: -12.905224800109863
    8. '```' → logprob: -13.780224800109863
    9. '       ' → logprob: -14.280224800109863
    10. 'If' → logprob: -14.530224800109863

Token 162: ' le' (ID: 505)
  Prédit: ' chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' chars' → logprob: -0.11284806579351425
    2. 'chars' → logprob: -2.2378480434417725
    3. '(chars' → logprob: -11.237848281860352
    4. ' characters' → logprob: -12.112848281860352
    5. '   ' → logprob: -13.612848281860352
    6. ' ' → logprob: -13.862848281860352
    7. 'Chars' → logprob: -13.987848281860352
    8. ' les' → logprob: -14.362848281860352
    9. ' ' → logprob: -14.362848281860352
    10. '_chars' → logprob: -14.862848281860352

Token 163: ' caractère' (ID: 80509)
  Prédit: ' chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' chars' → logprob: -0.03880343213677406
    2. 'chars' → logprob: -3.2888033390045166
    3. 's' → logprob: -7.788803577423096
    4. ' premier' → logprob: -9.038803100585938
    5. ' first' → logprob: -9.288803100585938
    6. ' s' → logprob: -10.413803100585938
    7. '(chars' → logprob: -10.663803100585938
    8. ' ' → logprob: -11.038803100585938
    9. ' characters' → logprob: -11.413803100585938
    10. ' ' → logprob: -12.163803100585938

Token 164: ' du' (ID: 1462)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.0011041370453312993
    2. ' s' → logprob: -7.626104354858398
    3. 'chars' → logprob: -8.251104354858398
    4. ' chars' → logprob: -8.751104354858398
    5. '[' → logprob: -9.001104354858398
    6. ' ' → logprob: -10.126104354858398
    7. '[s' → logprob: -11.501104354858398
    8. '#' → logprob: -11.751104354858398
    9. '   ' → logprob: -12.501104354858398
    10. ' ' → logprob: -13.626104354858398

Token 165: ' milieu' (ID: 43149)
  Prédit: 'chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'chars' → logprob: -0.633884072303772
    2. 's' → logprob: -1.258884072303772
    3. ' chars' → logprob: -3.0088839530944824
    4. '[' → logprob: -3.2588839530944824
    5. '0' → logprob: -3.7588839530944824
    6. ' ' → logprob: -4.133883953094482
    7. '1' → logprob: -4.633883953094482
    8. '2' → logprob: -5.133883953094482
    9. ' premier' → logprob: -5.258883953094482
    10. ' milieu' → logprob: -5.508883953094482

Token 166: ' n' (ID: 297)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.14734724164009094
    2. '0' → logprob: -2.3973472118377686
    3. '[' → logprob: -3.7723472118377686
    4. ' ' → logprob: -4.397347450256348
    5. 'n' → logprob: -6.147347450256348
    6. '2' → logprob: -6.647347450256348
    7. ' s' → logprob: -6.647347450256348
    8. ' n' → logprob: -6.647347450256348
    9. '   ' → logprob: -7.397347450256348
    10. '1' → logprob: -7.397347450256348

Token 167: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.1550375372171402
    2. ''' → logprob: -2.6550376415252686
    3. 'est' → logprob: -3.5300376415252686
    4. 'e' → logprob: -4.6550374031066895
    5. ' est' → logprob: -4.9050374031066895
    6. '```' → logprob: -5.1550374031066895
    7. 'u' → logprob: -5.7800374031066895
    8. 'ont' → logprob: -6.5300374031066895
    9. '=' → logprob: -6.5300374031066895
    10. '’est' → logprob: -6.6550374031066895

Token 168: ' pas' (ID: 2173)
  Prédit: ' pas'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pas' → logprob: -0.027045829221606255
    2. 'pas' → logprob: -3.652045726776123
    3. ' not' → logprob: -7.902045726776123
    4. ' ' → logprob: -9.402046203613281
    5. 'not' → logprob: -10.027046203613281
    6. 's' → logprob: -10.027046203613281
    7. '=' → logprob: -10.152046203613281
    8. ' different' → logprob: -10.402046203613281
    9. '0' → logprob: -10.777046203613281
    10. '1' → logprob: -10.902046203613281

Token 169: ' le' (ID: 505)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'le' → logprob: -1.3914722204208374
    2. ' le' → logprob: -1.5164722204208374
    3. ' égal' → logprob: -1.5164722204208374
    4. ' equal' → logprob: -2.141472339630127
    5. '=' → logprob: -2.641472339630127
    6. 'equal' → logprob: -3.516472339630127
    7. '_' → logprob: -3.891472339630127
    8. 'égal' → logprob: -4.141472339630127
    9. 'ident' → logprob: -4.891472339630127
    10. ' pas' → logprob: -5.016472339630127

Token 170: ' même' (ID: 9679)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.03301743417978287
    2. ' même' → logprob: -4.033017635345459
    3. 'prem' → logprob: -4.408017635345459
    4. 'same' → logprob: -7.033017635345459
    5. 'Même' → logprob: -8.1580171585083
    6. 'car' → logprob: -8.1580171585083
    7. '0' → logprob: -8.7830171585083
    8. '#' → logprob: -8.9080171585083
    9. '-même' → logprob: -9.0330171585083
    10. '1' → logprob: -9.0330171585083

Token 171: ' que' (ID: 661)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.5834705233573914
    2. ' ' → logprob: -1.5834705829620361
    3. 's' → logprob: -2.083470582962036
    4. ' des' → logprob: -3.208470582962036
    5. ' s' → logprob: -4.083470344543457
    6. 'e' → logprob: -4.958470344543457
    7. '   ' → logprob: -5.208470344543457
    8. '_' → logprob: -5.333470344543457
    9. 'de' → logprob: -5.458470344543457
    10. ' chars' → logprob: -5.708470344543457

Token 172: ' le' (ID: 505)
  Prédit: 'chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'chars' → logprob: -0.15173539519309998
    2. 'le' → logprob: -2.776735305786133
    3. ' chars' → logprob: -2.776735305786133
    4. ' le' → logprob: -4.526735305786133
    5. ' celui' → logprob: -5.901735305786133
    6. 'les' → logprob: -6.651735305786133
    7. ' les' → logprob: -8.026735305786133
    8. '(chars' → logprob: -8.151735305786133
    9. ' the' → logprob: -9.026735305786133
    10. 'char' → logprob: -9.151735305786133

Token 173: ' premier' (ID: 15506)
  Prédit: 'prem'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prem' → logprob: -0.21958868205547333
    2. 'car' → logprob: -2.0945887565612793
    3. 'de' → logprob: -2.8445887565612793
    4. 'char' → logprob: -5.594588756561279
    5. 'preced' → logprob: -5.844588756561279
    6. 'pr' → logprob: -5.969588756561279
    7. 'tro' → logprob: -5.969588756561279
    8. 'second' → logprob: -7.219588756561279
    9. '2' → logprob: -7.469588756561279
    10. ' premier' → logprob: -7.969588756561279

Token 174: '
' (ID: 198)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.2831769585609436
    2. ' or' → logprob: -2.158176898956299
    3. 'and' → logprob: -2.408176898956299
    4. 's' → logprob: -3.658176898956299
    5. '   ' → logprob: -4.908176898956299
    6. ' et' → logprob: -5.783176898956299
    7. 'et' → logprob: -6.908176898956299
    8. ' ' → logprob: -7.158176898956299
    9. 'or' → logprob: -7.283176898956299
    10. ',' → logprob: -7.533176898956299

Token 175: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0025709024630486965
    2. ' ' → logprob: -7.502571105957031
    3. '    ' → logprob: -7.627571105957031
    4. '    
' → logprob: -7.752571105957031
    5. '   
' → logprob: -8.627571105957031
    6. ' 
' → logprob: -8.752571105957031
    7. '  ' → logprob: -8.877571105957031
    8. ' if' → logprob: -9.377571105957031
    9. ')' → logprob: -9.377571105957031
    10. ',' → logprob: -9.627571105957031

Token 176: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07245572656393051
    2. 'if' (adapté à ' if') → logprob: -2.822455644607544
    3. ' if' → logprob: -4.572455883026123
    4. '    ' → logprob: -10.572455406188965
    5. 'return' → logprob: -10.697455406188965
    6. ' ' → logprob: -10.947455406188965
    7. '    
' → logprob: -11.197455406188965
    8. '  ' → logprob: -11.697455406188965
    9. ' return' → logprob: -12.572455406188965
    10. '       ' → logprob: -13.822455406188965

Token 177: ' chars' (ID: 47991)
  Prédit: ' chars'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chars' → logprob: -0.20205657184123993
    2. 'chars' → logprob: -1.7020565271377563
    3. '(chars' → logprob: -7.452056407928467
    4. ' (' → logprob: -10.577056884765625
    5. ' len' → logprob: -10.952056884765625
    6. '   ' → logprob: -11.952056884765625
    7. ' ' → logprob: -12.202056884765625
    8. 'len' → logprob: -12.827056884765625
    9. '_chars' → logprob: -13.452056884765625
    10. ' characters' → logprob: -13.702056884765625

Token 178: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.7432603272027336e-06
    2. '0' → logprob: -14.125001907348633
    3. ' ' → logprob: -14.375001907348633
    4. ' [' → logprob: -15.375001907348633
    5. '   ' → logprob: -17.375001907348633
    6. '1' → logprob: -17.500001907348633
    7. '```' → logprob: -17.625001907348633
    8. '[
' → logprob: -17.750001907348633
    9. '
' → logprob: -17.875001907348633
    10. '[:' → logprob: -17.875001907348633

Token 179: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -7.226628895296017e-06
    2. '1' → logprob: -12.250007629394531
    3. ' ' → logprob: -13.625007629394531
    4. '   ' → logprob: -14.875007629394531
    5. '[' → logprob: -15.437507629394531
    6. '2' → logprob: -15.875007629394531
    7. '```' → logprob: -16.31250762939453
    8. ']' → logprob: -16.75000762939453
    9. '۰' → logprob: -16.93750762939453
    10. '00' → logprob: -17.00000762939453

Token 180: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.036929406225681305
    2. ']==' → logprob: -3.5369293689727783
    3. '==' → logprob: -5.536929607391357
    4. ' ]' → logprob: -6.286929607391357
    5. ' ==' → logprob: -6.661929607391357
    6. '[' → logprob: -10.4119291305542
    7. '=' → logprob: -11.1619291305542
    8. '']' → logprob: -11.2869291305542
    9. ' ' → logprob: -12.2869291305542
    10. ']=' → logprob: -12.9119291305542

Token 181: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.009909666143357754
    2. ' ==' → logprob: -4.634909629821777
    3. '=' → logprob: -9.134909629821777
    4. '==
' → logprob: -10.759909629821777
    5. 'chars' → logprob: -11.259909629821777
    6. ']==' → logprob: -12.384909629821777
    7. '```' → logprob: -13.134909629821777
    8. '[' → logprob: -13.384909629821777
    9. ' ' → logprob: -13.634909629821777
    10. '===' → logprob: -14.259909629821777

Token 182: ' chars' (ID: 47991)
  Prédit: 'chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'chars' → logprob: -0.001171652227640152
    2. ' chars' → logprob: -6.751171588897705
    3. '(chars' → logprob: -14.001172065734863
    4. 'char' → logprob: -15.626172065734863
    5. '   ' → logprob: -15.751172065734863
    6. '_chars' → logprob: -16.251171112060547
    7. ' ' → logprob: -16.751171112060547
    8. 'Chars' → logprob: -17.126171112060547
    9. 'characters' → logprob: -17.751171112060547
    10. '
' → logprob: -18.876171112060547

Token 183: '[' (ID: 58)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.38714078068733215
    2. '[' → logprob: -1.1371407508850098
    3. ' ' → logprob: -8.762141227722168
    4. ' [' → logprob: -9.887141227722168
    5. 'chars' → logprob: -10.137141227722168
    6. ']' → logprob: -12.262141227722168
    7. '   ' → logprob: -12.387141227722168
    8. '[
' → logprob: -12.512141227722168
    9. ' chars' → logprob: -12.762141227722168
    10. '```' → logprob: -13.262141227722168

Token 184: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.9361264946837764e-07
    2. 'chars' → logprob: -16.875
    3. '2' → logprob: -17.375
    4. '0' → logprob: -17.375
    5. '```' → logprob: -18.5
    6. ' ' → logprob: -18.625
    7. '3' → logprob: -19.0
    8. '   ' → logprob: -19.125
    9. '１' → logprob: -19.6875
    10. '[' → logprob: -19.9375

Token 185: ']' (ID: 60)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.03810230270028114
    2. 'and' → logprob: -3.288102388381958
    3. ')' → logprob: -9.788102149963379
    4. ' ' → logprob: -13.038102149963379
    5. '   ' → logprob: -14.163102149963379
    6. ']' → logprob: -14.663102149963379
    7. '    ' → logprob: -14.788102149963379
    8. ' et' → logprob: -15.163102149963379
    9. ' )' → logprob: -15.538102149963379
    10. ' и' → logprob: -15.788102149963379

Token 186: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.1602250337600708
    2. 'and' → logprob: -1.9102250337600708
    3. ' et' → logprob: -15.160224914550781
    4. ' ' → logprob: -15.410224914550781
    5. 'et' → logprob: -15.910224914550781
    6. '   ' → logprob: -16.41022491455078
    7. ' и' → logprob: -17.28522491455078
    8. ' ' → logprob: -17.66022491455078
    9. ' a' → logprob: -17.78522491455078
    10. ')' → logprob: -18.16022491455078

Token 187: ' chars' (ID: 47991)
  Prédit: ' chars'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chars' → logprob: -0.023269355297088623
    2. 'chars' → logprob: -3.7732694149017334
    3. '(chars' → logprob: -10.773269653320312
    4. '_chars' → logprob: -13.523269653320312
    5. ' ' → logprob: -14.148269653320312
    6. 'Chars' → logprob: -15.273269653320312
    7. '   ' → logprob: -15.398269653320312
    8. ' ' → logprob: -16.148269653320312
    9. ' characters' → logprob: -16.648269653320312
    10. ' cols' → logprob: -17.148269653320312

Token 188: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0015003408771008253
    2. '2' → logprob: -7.376500129699707
    3. '[
' → logprob: -7.751500129699707
    4. ' ' → logprob: -8.251500129699707
    5. ']' → logprob: -9.126500129699707
    6. '   ' → logprob: -10.751500129699707
    7. ' [' → logprob: -11.376500129699707
    8. '```' → logprob: -11.501500129699707
    9. ''' → logprob: -11.626500129699707
    10. '_' → logprob: -13.001500129699707

Token 189: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -4.4849443838757e-06
    2. '3' → logprob: -12.625004768371582
    3. ' ' → logprob: -14.250004768371582
    4. '
' → logprob: -15.000004768371582
    5. '```' → logprob: -17.000003814697266
    6. '1' → logprob: -17.125003814697266
    7. '-' → logprob: -17.375003814697266
    8. '   ' → logprob: -17.875003814697266
    9. '0' → logprob: -18.500003814697266
    10. '２' → logprob: -18.500003814697266

Token 190: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.025466933846473694
    2. ']==' → logprob: -3.9004669189453125
    3. '==' → logprob: -5.4004669189453125
    4. ' ==' → logprob: -8.150466918945312
    5. ' ]' → logprob: -9.400466918945312
    6. ')' → logprob: -12.275466918945312
    7. '[' → logprob: -12.275466918945312
    8. '=' → logprob: -12.400466918945312
    9. ' ' → logprob: -12.400466918945312
    10. '']' → logprob: -13.150466918945312

Token 191: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.033800262957811356
    2. ' ==' → logprob: -3.4088003635406494
    3. '!=' → logprob: -9.53380012512207
    4. '=' → logprob: -9.65880012512207
    5. ' !=' → logprob: -11.90880012512207
    6. ' ' → logprob: -12.03380012512207
    7. '==
' → logprob: -13.53380012512207
    8. ']==' → logprob: -13.65880012512207
    9. '[' → logprob: -14.15880012512207
    10. ' ' → logprob: -14.53380012512207

Token 192: ' chars' (ID: 47991)
  Prédit: 'chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'chars' → logprob: -0.31326964497566223
    2. ' chars' → logprob: -1.3132696151733398
    3. '(chars' → logprob: -12.06326961517334
    4. '_chars' → logprob: -13.18826961517334
    5. 'Chars' → logprob: -15.68826961517334
    6. 'char' → logprob: -16.688270568847656
    7. 'characters' → logprob: -17.313270568847656
    8. ' ' → logprob: -17.313270568847656
    9. '<|end|>' → logprob: -17.438270568847656
    10. ' characters' → logprob: -18.063270568847656

Token 193: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -9.805981972021982e-05
    2. '3' → logprob: -9.62509822845459
    3. ']' → logprob: -11.37509822845459
    4. '[
' → logprob: -11.37509822845459
    5. ' [' → logprob: -12.75009822845459
    6. '2' → logprob: -13.50009822845459
    7. '```' → logprob: -13.87509822845459
    8. '-' → logprob: -14.00009822845459
    9. '(' → logprob: -14.25009822845459
    10. 's' → logprob: -14.50009822845459

Token 194: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: 0.0
    2. '۳' → logprob: -18.0
    3. '３' → logprob: -18.0
    4. ' ' → logprob: -18.125
    5. '```' → logprob: -19.5
    6. '৩' → logprob: -19.75
    7. '2' → logprob: -20.375
    8. '३' → logprob: -20.5
    9. '٣' → logprob: -20.5
    10. '[' → logprob: -20.75

Token 195: ']' (ID: 60)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.02387063018977642
    2. 'and' → logprob: -3.7738707065582275
    3. ')' → logprob: -7.398870468139648
    4. ']' → logprob: -11.898870468139648
    5. ' ' → logprob: -12.773870468139648
    6. ' )' → logprob: -12.898870468139648
    7. '   ' → logprob: -14.898870468139648
    8. ' и' → logprob: -15.898870468139648
    9. '}' → logprob: -16.02387046813965
    10. '    ' → logprob: -16.52387046813965

Token 196: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.0019291093340143561
    2. 'and' → logprob: -6.25192928314209
    3. ' ' → logprob: -16.251928329467773
    4. '   ' → logprob: -16.376928329467773
    5. '    ' → logprob: -17.001928329467773
    6. '	and' → logprob: -17.001928329467773
    7. ' an' → logprob: -17.876928329467773
    8. ' и' → logprob: -18.001928329467773
    9. ' a' → logprob: -18.376928329467773
    10. ' ' → logprob: -18.501928329467773

Token 197: ' chars' (ID: 47991)
  Prédit: ' chars'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chars' → logprob: -0.0031793788075447083
    2. 'chars' → logprob: -5.753179550170898
    3. '(chars' → logprob: -13.503179550170898
    4. 'Chars' → logprob: -16.2531795501709
    5. ' ' → logprob: -16.3781795501709
    6. ' ' → logprob: -16.5031795501709
    7. '_chars' → logprob: -17.5031795501709
    8. '   ' → logprob: -17.5031795501709
    9. '	' → logprob: -18.7531795501709
    10. ' characters' → logprob: -18.7531795501709

Token 198: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -3.531315314830863e-06
    2. '[
' → logprob: -13.250003814697266
    3. '```' → logprob: -14.250003814697266
    4. '_' → logprob: -14.875003814697266
    5. '0' → logprob: -15.500003814697266
    6. '_[' → logprob: -16.125003814697266
    7. ' [' → logprob: -16.125003814697266
    8. '   ' → logprob: -17.250003814697266
    9. '...' → logprob: -17.625003814697266
    10. ' ' → logprob: -17.750003814697266

Token 199: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0024779161904007196
    2. '0' → logprob: -6.002478122711182
    3. '2' → logprob: -13.502477645874023
    4. '[' → logprob: -15.252477645874023
    5. '```' → logprob: -15.627477645874023
    6. '-' → logprob: -15.877477645874023
    7. ' ' → logprob: -16.814977645874023
    8. '   ' → logprob: -16.877477645874023
    9. '
' → logprob: -16.939977645874023
    10. '１' → logprob: -17.689977645874023

Token 200: ']' (ID: 60)
  Prédit: ' !='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.10092010349035263
    2. '!=' → logprob: -2.3509202003479004
    3. ' <' → logprob: -8.600919723510742
    4. ' ' → logprob: -8.725919723510742
    5. '<' → logprob: -8.975919723510742
    6. ']' → logprob: -9.100919723510742
    7. ' ' → logprob: -9.725919723510742
    8. ']!=' → logprob: -10.225919723510742
    9. '<>' → logprob: -12.350919723510742
    10. ')!=' → logprob: -12.475919723510742

Token 201: ' !=' (ID: 1666)
  Prédit: ' !='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.38773179054260254
    2. '!=' → logprob: -1.1377317905426025
    3. '<' → logprob: -7.512731552124023
    4. ' <' → logprob: -8.512731552124023
    5. ' ' → logprob: -9.762731552124023
    6. ' ' → logprob: -10.262731552124023
    7. '<>' → logprob: -12.137731552124023
    8. '()!=' → logprob: -12.762731552124023
    9. ')!=' → logprob: -12.762731552124023
    10. ']!=' → logprob: -13.387731552124023

Token 202: ' chars' (ID: 47991)
  Prédit: 'chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'chars' → logprob: -0.0007101670489646494
    2. ' chars' → logprob: -7.2507100105285645
    3. '(chars' → logprob: -15.625710487365723
    4. 'char' → logprob: -18.000709533691406
    5. '_chars' → logprob: -19.625709533691406
    6. 'Chars' → logprob: -19.750709533691406
    7. 'characters' → logprob: -20.125709533691406
    8. 'chr' → logprob: -20.875709533691406
    9. '[' → logprob: -21.500709533691406
    10. 'colors' → logprob: -21.625709533691406

Token 203: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.00016682932619005442
    2. '2' → logprob: -8.750166893005371
    3. '[
' → logprob: -11.875166893005371
    4. '(' → logprob: -15.000166893005371
    5. '```' → logprob: -15.250166893005371
    6. '()[' → logprob: -15.375166893005371
    7. '_' → logprob: -15.875166893005371
    8. ' ' → logprob: -16.750165939331055
    9. '_[' → logprob: -16.750165939331055
    10. '<|end|>' → logprob: -16.750165939331055

Token 204: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: 0.0
    2. '۲' → logprob: -17.25
    3. '２' → logprob: -19.0
    4. ' ' → logprob: -19.0
    5. '```' → logprob: -19.75
    6. '२' → logprob: -20.0
    7. '২' → logprob: -21.0
    8. '٢' → logprob: -21.1875
    9. '   ' → logprob: -21.4375
    10. '
' → logprob: -21.625

Token 205: ']:
' (ID: 22152)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.2544133961200714
    2. ':' → logprob: -1.504413366317749
    3. ']:' → logprob: -6.754413604736328
    4. ')' → logprob: -6.879413604736328
    5. '):
' → logprob: -8.754413604736328
    6. '}:' → logprob: -10.004413604736328
    7. ':
' → logprob: -10.754413604736328
    8. ']' → logprob: -11.129413604736328
    9. '   ' → logprob: -11.754413604736328
    10. ' ):' → logprob: -11.754413604736328

Token 206: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.23037123680114746
    2. ':' → logprob: -1.7303712368011475
    3. '   ' → logprob: -4.105371475219727
    4. ':
' → logprob: -4.480371475219727
    5. ':return' → logprob: -7.855371475219727
    6. ' return' → logprob: -8.480371475219727
    7. 'return' → logprob: -9.980371475219727
    8. ' :' → logprob: -9.980371475219727
    9. ' :
' → logprob: -11.730371475219727
    10. '
' → logprob: -11.730371475219727

Token 207: ' return' (ID: 622)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.10673023760318756
    2. ' return' → logprob: -2.6067302227020264
    3. 'return' (adapté à ' return') → logprob: -3.6067302227020264
    4. '   ' → logprob: -8.106730461120605
    5. '
' → logprob: -11.606730461120605
    6. '	return' → logprob: -13.106730461120605
    7. ' ' → logprob: -13.856730461120605
    8. ' ' → logprob: -14.106730461120605
    9. '     ' → logprob: -15.106730461120605
    10. '      ' → logprob: -15.106730461120605

Token 208: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.12696360051631927
    2. ' "' → logprob: -2.1269636154174805
    3. ''' → logprob: -10.37696361541748
    4. '"No' → logprob: -13.37696361541748
    5. ' '' → logprob: -13.50196361541748
    6. ' ' → logprob: -14.62696361541748
    7. '   ' → logprob: -14.87696361541748
    8. ' ' → logprob: -15.37696361541748
    9. '"You' → logprob: -15.62696361541748
    10. ' Yes' → logprob: -17.001962661743164

Token 209: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -1.9361264946837764e-07
    2. ' Yes' → logprob: -17.0
    3. 'No' → logprob: -17.5
    4. '"' → logprob: -18.75
    5. 'Oui' → logprob: -18.75
    6. 'Ye' → logprob: -19.875
    7. 'Y' → logprob: -19.875
    8. 'YES' → logprob: -20.0
    9. 'True' → logprob: -20.125
    10. 'Yeah' → logprob: -21.5

Token 210: '"
' (ID: 1092)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.014649730175733566
    2. '   ' → logprob: -4.264649868011475
    3. '"
' → logprob: -7.639649868011475
    4. '")' → logprob: -13.014649391174316
    5. '```' → logprob: -14.514649391174316
    6. '"
' → logprob: -14.889649391174316
    7. 'return' → logprob: -15.139649391174316
    8. '
' → logprob: -15.389649391174316
    9. '\n' → logprob: -15.514649391174316
    10. '       ' → logprob: -15.764649391174316

Token 211: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0011235489509999752
    2. 'return' → logprob: -7.376123428344727
    3. 'else' → logprob: -8.251123428344727
    4. '    
' → logprob: -9.376123428344727
    5. ' else' → logprob: -9.501123428344727
    6. ' return' → logprob: -9.751123428344727
    7. '
' → logprob: -11.126123428344727
    8. ' 
' → logprob: -14.126123428344727
    9. '  
' → logprob: -14.126123428344727
    10. '   
' → logprob: -14.126123428344727

Token 212: ' else' (ID: 1203)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.048987455666065216
    2. 'return' → logprob: -3.04898738861084
    3. 'else' (adapté à ' else') → logprob: -8.04898738861084
    4. ' return' → logprob: -9.79898738861084
    5. '
' → logprob: -10.67398738861084
    6. ' else' → logprob: -13.67398738861084
    7. '    
' → logprob: -14.04898738861084
    8. '```' → logprob: -17.048988342285156
    9. '	return' → logprob: -17.423988342285156
    10. '       ' → logprob: -17.423988342285156

Token 213: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.07368367910385132
    2. '       ' → logprob: -3.323683738708496
    3. ':
' → logprob: -4.073683738708496
    4. '   ' → logprob: -4.323683738708496
    5. ' return' → logprob: -6.198683738708496
    6. ':return' → logprob: -6.198683738708496
    7. ' :' → logprob: -8.073683738708496
    8. 'return' → logprob: -8.448683738708496
    9. '    ' → logprob: -9.448683738708496
    10. ' :
' → logprob: -10.073683738708496

Token 214: '       ' (ID: 309)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.2722893953323364
    2. '       ' → logprob: -1.8972893953323364
    3. 'return' → logprob: -3.272289276123047
    4. '"' → logprob: -3.272289276123047
    5. '   ' → logprob: -4.397289276123047
    6. '    ' → logprob: -8.647289276123047
    7. ''' → logprob: -10.272289276123047
    8. ' "' → logprob: -11.772289276123047
    9. '     ' → logprob: -12.397289276123047
    10. ' ' → logprob: -12.522289276123047

Token 215: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.5239570736885071
    2. ' return' → logprob: -1.0239570140838623
    3. '"' → logprob: -3.0239570140838623
    4. ' "' → logprob: -10.773957252502441
    5. '"No' → logprob: -10.773957252502441
    6. '   ' → logprob: -12.898957252502441
    7. ''' → logprob: -13.773957252502441
    8. '       ' → logprob: -13.773957252502441
    9. '	return' → logprob: -14.898957252502441
    10. ' ' → logprob: -15.148957252502441

Token 216: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.004178598523139954
    2. ' "' → logprob: -5.504178524017334
    3. '"No' → logprob: -9.254179000854492
    4. ''' → logprob: -12.629179000854492
    5. ' ' → logprob: -13.879179000854492
    6. ' No' → logprob: -16.629179000854492
    7. '("' → logprob: -17.254179000854492
    8. ' ' → logprob: -17.504179000854492
    9. '`' → logprob: -17.629179000854492
    10. ')' → logprob: -18.129179000854492

Token 217: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -4.5491004129871726e-05
    2. '"No' → logprob: -10.000045776367188
    3. ' No' → logprob: -19.250045776367188
    4. '"' → logprob: -21.000045776367188
    5. ''' → logprob: -21.625045776367188
    6. '_No' → logprob: -23.500045776367188
    7. '“No' → logprob: -23.500045776367188
    8. 'N' → logprob: -24.125045776367188
    9. 'NO' → logprob: -24.875045776367188
    10. '```' → logprob: -25.250045776367188

Token 218: '"

' (ID: 2678)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.2125333696603775
    2. '```' → logprob: -2.337533473968506
    3. ')' → logprob: -3.087533473968506
    4. '<|end|>' → logprob: -3.212533473968506
    5. '")' → logprob: -5.712533473968506
    6. '}' → logprob: -6.212533473968506
    7. '\n' → logprob: -6.462533473968506
    8. '"""' → logprob: -6.962533473968506
    9. '"}' → logprob: -8.087532997131348
    10. '
' → logprob: -8.462532997131348

Token 219: 'def' (ID: 1314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 220: ' main' (ID: 2758)
  Prédit: ' is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.0603327639400959
    2. ' check' → logprob: -3.560332775115967
    3. ' count' → logprob: -5.310332775115967
    4. ' main' → logprob: -5.560332775115967
    5. ' has' → logprob: -5.560332775115967
    6. 'is' → logprob: -5.685332775115967
    7. ' test' → logprob: -5.935332775115967
    8. ' three' → logprob: -6.560332775115967
    9. ' calculate' → logprob: -6.685332775115967
    10. ' reverse' → logprob: -7.185332775115967

Token 221: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0006877713603898883
    2. '(' → logprob: -7.875687599182129
    3. '_' → logprob: -8.625687599182129
    4. '()' → logprob: -9.250687599182129
    5. '():
' → logprob: -11.125687599182129
    6. ' ():' → logprob: -11.375687599182129
    7. '()>' → logprob: -13.750687599182129
    8. '_:' → logprob: -14.250687599182129
    9. '(":' → logprob: -14.375687599182129
    10. ':' → logprob: -14.625687599182129

Token 222: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.026931550353765488
    2. 's' → logprob: -4.6519317626953125
    3. ' s' → logprob: -4.9019317626953125
    4. '(s' → logprob: -5.0269317626953125
    5. '(' → logprob: -6.5269317626953125
    6. 'input' → logprob: -8.026931762695312
    7. '    ' → logprob: -8.776931762695312
    8. '    
' → logprob: -8.901931762695312
    9. 'n' → logprob: -9.151931762695312
    10. ' for' → logprob: -9.276931762695312

Token 223: ' """
' (ID: 7037)
  Prédit: ' s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.14010657370090485
    2. 's' → logprob: -2.890106678009033
    3. '   ' → logprob: -3.515106678009033
    4. ' test' → logprob: -3.515106678009033
    5. ' input' → logprob: -5.265106678009033
    6. ' user' → logprob: -5.390106678009033
    7. ' n' → logprob: -6.015106678009033
    8. 'n' → logprob: -7.015106678009033
    9. ' string' → logprob: -7.140106678009033
    10. ' inputs' → logprob: -8.015106201171875

Token 224: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -8.613945101387799e-05
    2. '    ' → logprob: -10.500085830688477
    3. ' test' → logprob: -11.000085830688477
    4. 'def' → logprob: -11.000085830688477
    5. '  ' → logprob: -11.625085830688477
    6. '    
' → logprob: -13.250085830688477
    7. ' ' → logprob: -13.250085830688477
    8. ' def' → logprob: -13.250085830688477
    9. '"""' → logprob: -13.500085830688477
    10. 'n' → logprob: -13.875085830688477

Token 225: ' Fonction' (ID: 189149)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20217618346214294
    2. 'Tester' → logprob: -3.327176094055176
    3. ' test' → logprob: -3.577176094055176
    4. 'Tests' → logprob: -3.702176094055176
    5. 'Test' → logprob: -3.952176094055176
    6. ' Tester' → logprob: -4.327176094055176
    7. ' tests' → logprob: -4.702176094055176
    8. 'def' → logprob: -5.327176094055176
    9. ' for' → logprob: -5.327176094055176
    10. '#' → logprob: -5.577176094055176

Token 226: ' principale' (ID: 68926)
  Prédit: ' principale'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' principale' → logprob: -0.8637396097183228
    2. ' de' → logprob: -1.4887396097183228
    3. ' test' → logprob: -1.4887396097183228
    4. '   ' → logprob: -2.738739490509033
    5. ' main' → logprob: -4.113739490509033
    6. ' def' → logprob: -4.488739490509033
    7. ' d' → logprob: -4.613739490509033
    8. ' principal' → logprob: -4.613739490509033
    9. 'def' → logprob: -5.238739490509033
    10. ' ' → logprob: -5.488739490509033

Token 227: ' qui' (ID: 2780)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03238923102617264
    2. 'def' → logprob: -3.5323891639709473
    3. ':' → logprob: -6.407389163970947
    4. ' def' → logprob: -8.032389640808105
    5. '
' → logprob: -8.532389640808105
    6. '    
' → logprob: -8.782389640808105
    7. ' :' → logprob: -9.782389640808105
    8. ':
' → logprob: -9.907389640808105
    9. '()' → logprob: -10.032389640808105
    10. '():' → logprob: -10.657389640808105

Token 228: ' lit' (ID: 11980)
  Prédit: ' lit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lit' → logprob: -0.22253188490867615
    2. ' demande' → logprob: -2.472531795501709
    3. '   ' → logprob: -3.722531795501709
    4. 'lit' → logprob: -3.722531795501709
    5. ' teste' → logprob: -4.597531795501709
    6. ' prend' → logprob: -4.722531795501709
    7. ' appelle' → logprob: -4.722531795501709
    8. 'dem' → logprob: -5.097531795501709
    9. 'l' → logprob: -5.222531795501709
    10. ' permet' → logprob: -5.847531795501709

Token 229: ' l' (ID: 305)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.8892607092857361
    2. ' une' → logprob: -1.0142607688903809
    3. '   ' → logprob: -2.264260768890381
    4. ' l' → logprob: -2.389260768890381
    5. '()' → logprob: -4.889260768890381
    6. ' le' → logprob: -5.139260768890381
    7. ' des' → logprob: -5.389260768890381
    8. ' un' → logprob: -5.764260768890381
    9. ' les' → logprob: -6.014260768890381
    10. ' ' → logprob: -6.264260768890381

Token 230: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.05875823274254799
    2. 'a' → logprob: -3.05875825881958
    3. 'e' → logprob: -5.18375825881958
    4. 'entrée' → logprob: -6.05875825881958
    5. ''' → logprob: -7.30875825881958
    6. 'input' → logprob: -7.43375825881958
    7. '   ' → logprob: -8.058757781982422
    8. '’entrée' → logprob: -8.558757781982422
    9. ''ent' → logprob: -9.058757781982422
    10. 'es' → logprob: -9.808757781982422

Token 231: ' utilisateur' (ID: 115595)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0707843154668808
    2. '()' → logprob: -2.820784330368042
    3. ',' → logprob: -6.195784091949463
    4. 's' → logprob: -7.195784091949463
    5. '():' → logprob: -7.195784091949463
    6. 'string' → logprob: -7.320784091949463
    7. '```' → logprob: -7.445784091949463
    8. 'def' → logprob: -7.445784091949463
    9. ' ' → logprob: -7.820784091949463
    10. ' string' → logprob: -8.070784568786621

Token 232: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.049151238054037094
    2. ',' → logprob: -3.1741511821746826
    3. ' et' → logprob: -5.424151420593262
    4. ' ,' → logprob: -7.174151420593262
    5. '()' → logprob: -7.924151420593262
    6. ':' → logprob: -9.299151420593262
    7. '(' → logprob: -9.799151420593262
    8. '(),' → logprob: -10.174151420593262
    9. 'et' → logprob: -10.299151420593262
    10. ' ' → logprob: -10.299151420593262

Token 233: ' appelle' (ID: 111796)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009245965629816055
    2. ' s' → logprob: -4.884245872497559
    3. 's' → logprob: -6.884245872497559
    4. '    ' → logprob: -8.259245872497559
    5. 'def' → logprob: -8.759245872497559
    6. ' def' → logprob: -10.259245872497559
    7. '    
' → logprob: -10.509245872497559
    8. '  ' → logprob: -11.384245872497559
    9. 'chaine' → logprob: -11.384245872497559
    10. ' input' → logprob: -11.634245872497559

Token 234: ' la' (ID: 557)
  Prédit: ' is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.24772457778453827
    2. 'is' → logprob: -1.9977245330810547
    3. ' la' → logprob: -2.4977245330810547
    4. '   ' → logprob: -7.122724533081055
    5. 'la' → logprob: -7.747724533081055
    6. ' ' → logprob: -8.622724533081055
    7. ' the' → logprob: -10.372724533081055
    8. '	is' → logprob: -11.372724533081055
    9. 'def' → logprob: -11.497724533081055
    10. 'l' → logprob: -11.622724533081055

Token 235: ' fonction' (ID: 17610)
  Prédit: 'is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'is' → logprob: -0.015008303336799145
    2. 'fonction' → logprob: -4.265008449554443
    3. 'function' → logprob: -7.140008449554443
    4. 'def' → logprob: -11.015007972717285
    5. ' fonction' → logprob: -11.390007972717285
    6. ' is' → logprob: -11.390007972717285
    7. 'func' → logprob: -11.890007972717285
    8. 'print' → logprob: -13.140007972717285
    9. ' function' → logprob: -13.640007972717285
    10. '```' → logprob: -14.140007972717285

Token 236: ' de' (ID: 334)
  Prédit: 'is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'is' → logprob: -0.006716555915772915
    2. ' is' → logprob: -5.006716728210449
    3. '`' → logprob: -14.13171672821045
    4. 'd' → logprob: -16.381715774536133
    5. '   ' → logprob: -16.506715774536133
    6. '```' → logprob: -16.506715774536133
    7. 'def' → logprob: -17.006715774536133
    8. '	is' → logprob: -17.631715774536133
    9. ' `' → logprob: -17.756715774536133
    10. ' ' → logprob: -17.881715774536133

Token 237: ' vér' (ID: 42524)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.18519051373004913
    2. 'is' → logprob: -2.685190439224243
    3. 'test' → logprob: -2.935190439224243
    4. 'validation' → logprob: -3.810190439224243
    5. 'verification' → logprob: -4.060190677642822
    6. ' vér' → logprob: -5.685190677642822
    7. 'dé' → logprob: -6.560190677642822
    8. 'ver' → logprob: -7.310190677642822
    9. 'vé' → logprob: -7.685190677642822
    10. 'controle' → logprob: -7.810190677642822

Token 238: 'ification' (ID: 3166)
  Prédit: 'ification'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ification' → logprob: -0.00010652327910065651
    2. 'if' → logprob: -9.875106811523438
    3. 'ifie' → logprob: -9.875106811523438
    4. 'ication' → logprob: -13.750106811523438
    5. 'ifier' → logprob: -14.125106811523438
    6. 'ifi' → logprob: -14.250106811523438
    7. '   ' → logprob: -15.625106811523438
    8. 'ifiez' → logprob: -15.750106811523438
    9. 'ifica' → logprob: -16.125106811523438
    10. '```' → logprob: -16.250106811523438

Token 239: ' 
' (ID: 793)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.23151150345802307
    2. ',' → logprob: -1.7315114736557007
    3. ' et' → logprob: -3.9815115928649902
    4. 'is' → logprob: -5.85651159286499
    5. 'def' → logprob: -6.23151159286499
    6. 'et' → logprob: -6.35651159286499
    7. ' is' → logprob: -6.85651159286499
    8. 'de' → logprob: -7.10651159286499
    9. ' de' → logprob: -7.23151159286499
    10. ' ,' → logprob: -7.60651159286499

Token 240: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012481987476348877
    2. ' et' → logprob: -4.637482166290283
    3. ',' → logprob: -6.512482166290283
    4. 'def' → logprob: -8.012481689453125
    5. 'et' → logprob: -8.262481689453125
    6. 'is' → logprob: -8.887481689453125
    7. ' de' → logprob: -9.012481689453125
    8. ' and' → logprob: -9.137481689453125
    9. 'de' → logprob: -9.762481689453125
    10. ' is' → logprob: -9.762481689453125

Token 241: ' puis' (ID: 18766)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.728661298751831
    2. 'is' → logprob: -1.478661298751831
    3. ',' → logprob: -1.978661298751831
    4. ' et' → logprob: -2.978661298751831
    5. ' is' → logprob: -3.478661298751831
    6. 'et' → logprob: -3.603661298751831
    7. 'pour' → logprob: -4.47866153717041
    8. 'de' → logprob: -4.85366153717041
    9. 'def' → logprob: -4.97866153717041
    10. 'd' → logprob: -5.85366153717041

Token 242: ' affiche' (ID: 127479)
  Prédit: ' affiche'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' affiche' → logprob: -0.7230281233787537
    2. 'aff' → logprob: -1.7230281829833984
    3. ' imprime' → logprob: -1.9730281829833984
    4. 'print' → logprob: -2.2230281829833984
    5. '   ' → logprob: -2.8480281829833984
    6. 'im' → logprob: -4.223028182983398
    7. ' print' → logprob: -4.223028182983398
    8. ' impr' → logprob: -7.098028182983398
    9. ' affich' → logprob: -8.848028182983398
    10. ' afficher' → logprob: -8.973028182983398

Token 243: ' le' (ID: 505)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.6533159613609314
    2. '(' → logprob: -1.0283160209655762
    3. ' la' → logprob: -3.028316020965576
    4. ' le' → logprob: -3.403316020965576
    5. '()' → logprob: -4.153316020965576
    6. '   ' → logprob: -4.153316020965576
    7. '(
' → logprob: -5.903316020965576
    8. 'le' → logprob: -6.403316020965576
    9. '('' → logprob: -6.653316020965576
    10. 'la' → logprob: -6.778316020965576

Token 244: ' résultat' (ID: 62556)
  Prédit: 'rés'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'rés' → logprob: -0.16596782207489014
    2. ' résultat' → logprob: -2.1659679412841797
    3. 'result' → logprob: -3.2909679412841797
    4. '"' → logprob: -7.41596794128418
    5. 'ré' → logprob: -9.04096794128418
    6. '   ' → logprob: -9.16596794128418
    7. 'Rés' → logprob: -9.41596794128418
    8. ' resultat' → logprob: -9.79096794128418
    9. 'resultado' → logprob: -10.41596794128418
    10. 'r' → logprob: -10.41596794128418

Token 245: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.003818606724962592
    2. '.' → logprob: -5.628818511962891
    3. ')' → logprob: -9.50381851196289
    4. '```' → logprob: -10.00381851196289
    5. '    
' → logprob: -10.87881851196289
    6. '
' → logprob: -11.00381851196289
    7. ',' → logprob: -11.25381851196289
    8. 'def' → logprob: -11.37881851196289
    9. ':' → logprob: -11.62881851196289
    10. '):' → logprob: -12.50381851196289

Token 246: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00010115911572938785
    2. '    
' → logprob: -9.625101089477539
    3. '
' → logprob: -10.625101089477539
    4. '```' → logprob: -11.750101089477539
    5. 'def' → logprob: -14.250101089477539
    6. '       ' → logprob: -14.750101089477539
    7. '"""' → logprob: -15.125101089477539
    8. '  
' → logprob: -15.125101089477539
    9. '    ' → logprob: -15.375101089477539
    10. '\' → logprob: -15.875101089477539

Token 247: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0003377270477358252
    2. '
' → logprob: -8.875337600708008
    3. '"""' → logprob: -9.250337600708008
    4. '    
' → logprob: -10.000337600708008
    5. '```' → logprob: -10.375337600708008
    6. '"""
' (adapté à ' """
') → logprob: -10.875337600708008
    7. '    ' → logprob: -13.000337600708008
    8. 'user' → logprob: -14.750337600708008
    9. '       ' → logprob: -14.750337600708008
    10. '""' → logprob: -14.875337600708008

Token 248: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008926304057240486
    2. 's' → logprob: -5.1339263916015625
    3. ' s' → logprob: -6.1339263916015625
    4. 'input' → logprob: -7.8839263916015625
    5. 'user' → logprob: -8.758926391601562
    6. ' user' → logprob: -8.883926391601562
    7. ' input' → logprob: -9.258926391601562
    8. 'n' → logprob: -10.883926391601562
    9. 'try' → logprob: -11.633926391601562
    10. 'import' → logprob: -12.258926391601562

Token 249: ' #' (ID: 1069)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.011559978127479553
    2. 'input' → logprob: -5.261559963226318
    3. 'user' → logprob: -5.386559963226318
    4. ' s' → logprob: -6.761559963226318
    5. '   ' → logprob: -7.761559963226318
    6. ' user' → logprob: -10.011560440063477
    7. ' input' → logprob: -10.136560440063477
    8. 'n' → logprob: -10.761560440063477
    9. 'inp' → logprob: -10.886560440063477
    10. 'try' → logprob: -12.261560440063477

Token 250: ' Lire' (ID: 57624)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.13726681470870972
    2. 'input' → logprob: -2.3872668743133545
    3. 'user' → logprob: -3.3872668743133545
    4. 'string' → logprob: -6.387266635894775
    5. 'inp' → logprob: -8.137267112731934
    6. ' s' → logprob: -8.512267112731934
    7. 'word' → logprob: -9.012267112731934
    8. 'code' → logprob: -9.762267112731934
    9. 'chaine' → logprob: -10.012267112731934
    10. 'n' → logprob: -10.012267112731934

Token 251: ' la' (ID: 557)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.33569401502609253
    2. ' s' → logprob: -1.7106940746307373
    3. 'input' → logprob: -2.7106940746307373
    4. ' la' → logprob: -4.210693836212158
    5. 's' → logprob: -4.835693836212158
    6. ' user' → logprob: -4.960693836212158
    7. ' l' → logprob: -5.460693836212158
    8. '   ' → logprob: -6.710693836212158
    9. ' une' → logprob: -7.210693836212158
    10. 'user' → logprob: -7.585693836212158

Token 252: ' chaîne' (ID: 89288)
  Prédit: 'chaine'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'chaine' → logprob: -0.21185903251171112
    2. 'entrée' → logprob: -2.0868589878082275
    3. 'cha' → logprob: -3.5868589878082275
    4. ' chaîne' → logprob: -4.086859226226807
    5. 's' → logprob: -4.336859226226807
    6. 'input' → logprob: -4.961859226226807
    7. 'string' → logprob: -6.836859226226807
    8. ' chaine' → logprob: -8.086858749389648
    9. 'chain' → logprob: -8.336858749389648
    10. 'ligne' → logprob: -8.711858749389648

Token 253: ' entrée' (ID: 95590)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.1518146991729736
    2. '   ' → logprob: -1.2768146991729736
    3. ' s' → logprob: -1.4018146991729736
    4. 's' → logprob: -2.1518146991729736
    5. 'input' → logprob: -4.6518144607543945
    6. ' user' → logprob: -4.7768144607543945
    7. ' input' → logprob: -4.9018144607543945
    8. '=' → logprob: -5.2768144607543945
    9. 'user' → logprob: -5.2768144607543945
    10. ' d' → logprob: -6.0268144607543945

Token 254: ' par' (ID: 686)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.8047831654548645
    2. '   ' → logprob: -1.0547831058502197
    3. ' s' → logprob: -1.8047831058502197
    4. ' =' → logprob: -3.4297831058502197
    5. 'user' → logprob: -5.679783344268799
    6. 'input' → logprob: -6.804783344268799
    7. '=' → logprob: -6.929783344268799
    8. 'string' → logprob: -7.679783344268799
    9. ' user' → logprob: -7.804783344268799
    10. '=s' → logprob: -8.42978286743164

Token 255: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.7368660569190979
    2. ' l' → logprob: -1.3618659973144531
    3. 'input' → logprob: -1.4868659973144531
    4. ' input' → logprob: -3.611865997314453
    5. 'util' → logprob: -5.111865997314453
    6. ' utilisateur' → logprob: -5.736865997314453
    7. 'user' → logprob: -6.486865997314453
    8. '=input' → logprob: -7.611865997314453
    9. '   ' → logprob: -8.236865997314453
    10. ' ' → logprob: -8.986865997314453

Token 256: ''utilisateur' (ID: 140803)
  Prédit: ''utilisateur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''utilisateur' → logprob: -0.015589552000164986
    2. 'util' → logprob: -4.265589714050293
    3. '’utilisateur' → logprob: -6.890589714050293
    4. 'user' → logprob: -8.640589714050293
    5. ' utilisateur' → logprob: -10.015589714050293
    6. '   ' → logprob: -10.015589714050293
    7. ''util' → logprob: -10.265589714050293
    8. ''user' → logprob: -10.390589714050293
    9. ''' → logprob: -10.515589714050293
    10. '_util' → logprob: -11.265589714050293

Token 257: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20833969116210938
    2. ' s' → logprob: -1.8333396911621094
    3. 's' → logprob: -3.5833396911621094
    4. ' input' → logprob: -8.58333969116211
    5. 'input' → logprob: -8.70833969116211
    6. ' user' → logprob: -11.58333969116211
    7. '    
' → logprob: -11.70833969116211
    8. 'n' → logprob: -11.70833969116211
    9. '    ' → logprob: -12.33333969116211
    10. ' line' → logprob: -12.45833969116211

Token 258: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6807992458343506
    2. ' s' → logprob: -1.1807992458343506
    3. 's' → logprob: -1.6807992458343506
    4. ' input' → logprob: -8.43079948425293
    5. 'input' → logprob: -8.68079948425293
    6. ' user' → logprob: -9.93079948425293
    7. ' string' → logprob: -10.55579948425293
    8. 'user' → logprob: -10.68079948425293
    9. 'string' → logprob: -10.93079948425293
    10. ' line' → logprob: -11.55579948425293

Token 259: ' s' (ID: 265)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' (adapté à ' s') → logprob: -0.017625126987695694
    2. ' s' → logprob: -4.267625331878662
    3. 'user' → logprob: -6.017625331878662
    4. 'input' → logprob: -7.517625331878662
    5. ' user' → logprob: -8.142624855041504
    6. '   ' → logprob: -9.017624855041504
    7. ' input' → logprob: -9.892624855041504
    8. 'inp' → logprob: -12.517624855041504
    9. 'string' → logprob: -12.642624855041504
    10. 'chaine' → logprob: -13.017624855041504

Token 260: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6931516528129578
    2. ' =' → logprob: -0.6931516528129578
    3. '=input' → logprob: -12.818151473999023
    4. 's' → logprob: -13.693151473999023
    5. 'input' → logprob: -16.068151473999023
    6. '_' → logprob: -16.318151473999023
    7. '.' → logprob: -16.568151473999023
    8. ')' → logprob: -16.568151473999023
    9. ' ' → logprob: -16.943151473999023
    10. '   ' → logprob: -17.193151473999023

Token 261: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.048587486147880554
    2. ' input' → logprob: -3.0485875606536865
    3. '=input' → logprob: -17.673587799072266
    4. '	input' → logprob: -17.923587799072266
    5. '(input' → logprob: -18.298587799072266
    6. '   ' → logprob: -19.548587799072266
    7. '<input' → logprob: -19.798587799072266
    8. '```' → logprob: -20.423587799072266
    9. ' ' → logprob: -21.048587799072266
    10. '.input' → logprob: -21.173587799072266

Token 262: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.005595864728093147
    2. '(' → logprob: -5.630595684051514
    3. '().' → logprob: -6.255595684051514
    4. '("' → logprob: -9.880596160888672
    5. '("")' → logprob: -11.880596160888672
    6. '())' → logprob: -12.130596160888672
    7. ' ()' → logprob: -12.255596160888672
    8. '()
' → logprob: -13.630596160888672
    9. '()>' → logprob: -13.755596160888672
    10. '(">' → logprob: -14.380596160888672

Token 263: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04952286183834076
    2. '
' → logprob: -3.174522876739502
    3. '    
' → logprob: -5.424522876739502
    4. 'if' → logprob: -7.174522876739502
    5. '<|end|>' → logprob: -7.299522876739502
    6. ' if' → logprob: -8.049522399902344
    7. '  
' → logprob: -8.674522399902344
    8. '<|end|>' → logprob: -10.424522399902344
    9. ' ' → logprob: -10.674522399902344
    10. ' 
' → logprob: -10.799522399902344

Token 264: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1755029261112213
    2. 'result' → logprob: -2.1755030155181885
    3. ' result' → logprob: -3.6755030155181885
    4. 'print' → logprob: -3.9255030155181885
    5. ' print' → logprob: -6.175502777099609
    6. '
' → logprob: -9.30050277709961
    7. 'if' → logprob: -9.92550277709961
    8. ' if' → logprob: -10.05050277709961
    9. '    
' → logprob: -10.30050277709961
    10. '```' → logprob: -11.80050277709961

Token 265: ' Vér' (ID: 159169)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.5923886895179749
    2. 'print' → logprob: -0.8423886895179749
    3. ' result' → logprob: -4.34238862991333
    4. ' print' → logprob: -5.71738862991333
    5. 'res' → logprob: -12.092389106750488
    6. ' resultat' → logprob: -12.592389106750488
    7. 'answer' → logprob: -12.967389106750488
    8. 'resultado' → logprob: -13.467389106750488
    9. 'rés' → logprob: -13.592389106750488
    10. 'response' → logprob: -13.592389106750488

Token 266: 'ifier' (ID: 4550)
  Prédit: 'ifier'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifier' → logprob: -0.024089206010103226
    2. 'ifie' → logprob: -3.7740890979766846
    3. 'if' → logprob: -7.399089336395264
    4. 'ifer' → logprob: -8.774088859558105
    5. 'ify' → logprob: -10.649088859558105
    6. '   ' → logprob: -10.649088859558105
    7. 'ifiez' → logprob: -11.024088859558105
    8. 'ifi' → logprob: -12.524088859558105
    9. 'IFIER' → logprob: -12.524088859558105
    10. '#' → logprob: -13.774088859558105

Token 267: ' la' (ID: 557)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.42393746972084045
    2. '_result' → logprob: -1.673937439918518
    3. '   ' → logprob: -2.7989375591278076
    4. 'if' → logprob: -3.6739375591278076
    5. ' is' → logprob: -4.2989373207092285
    6. 'result' → logprob: -4.2989373207092285
    7. '(is' → logprob: -4.4239373207092285
    8. '_two' → logprob: -4.9239373207092285
    9. 'is' → logprob: -5.1739373207092285
    10. ' two' → logprob: -6.0489373207092285

Token 268: ' condition' (ID: 7060)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.2649095058441162
    2. 'print' → logprob: -1.5149095058441162
    3. 'two' → logprob: -5.014909744262695
    4. ' two' → logprob: -5.764909744262695
    5. 'Two' → logprob: -7.014909744262695
    6. 'is' → logprob: -7.639909744262695
    7. 's' → logprob: -7.889909744262695
    8. 'de' → logprob: -8.014909744262695
    9. ' result' → logprob: -8.264909744262695
    10. '_two' → logprob: -8.639909744262695

Token 269: ' et' (ID: 859)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.34585705399513245
    2. 'result' → logprob: -1.47085702419281
    3. ' if' → logprob: -3.3458571434020996
    4. ' result' → logprob: -3.9708571434020996
    5. 'if' → logprob: -4.9708571434021
    6. '_result' → logprob: -7.3458571434021
    7. '    
' → logprob: -8.470856666564941
    8. ' ' → logprob: -9.345856666564941
    9. ' =' → logprob: -9.470856666564941
    10. '  ' → logprob: -9.595856666564941

Token 270: ' afficher' (ID: 146524)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.2519422471523285
    2. ' print' → logprob: -1.5019422769546509
    3. '   ' → logprob: -11.87694263458252
    4. 'result' → logprob: -12.75194263458252
    5. '_print' → logprob: -14.25194263458252
    6. '
' → logprob: -14.37694263458252
    7. ' result' → logprob: -14.37694263458252
    8. 'pr' → logprob: -15.12694263458252
    9. '	print' → logprob: -15.12694263458252
    10. ' afficher' → logprob: -15.37694263458252

Token 271: ' "' (ID: 392)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5772732496261597
    2. '(is' → logprob: -0.8272732496261597
    3. '("' → logprob: -6.702273368835449
    4. '(
' → logprob: -10.07727336883545
    5. '()' → logprob: -10.57727336883545
    6. 'is' → logprob: -11.20227336883545
    7. '('' → logprob: -11.57727336883545
    8. '   ' → logprob: -12.57727336883545
    9. ' is' → logprob: -13.32727336883545
    10. '(`' → logprob: -13.57727336883545

Token 272: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.16245421767234802
    2. 'is' → logprob: -1.9124542474746704
    3. '"' → logprob: -6.662454128265381
    4. '"is' → logprob: -7.537454128265381
    5. ' is' → logprob: -8.287454605102539
    6. 'Oui' → logprob: -9.787454605102539
    7. ' Yes' → logprob: -9.912454605102539
    8. 'No' → logprob: -10.287454605102539
    9. 'Is' → logprob: -11.912454605102539
    10. '(is' → logprob: -12.287454605102539

Token 273: '"' (ID: 1)
  Prédit: '"'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0016756601398810744
    2. '")' → logprob: -6.626675605773926
    3. '()"' → logprob: -8.751675605773926
    4. '   ' → logprob: -10.126675605773926
    5. '```' → logprob: -10.251675605773926
    6. '()' → logprob: -10.751675605773926
    7. 'if' → logprob: -10.751675605773926
    8. ')"' → logprob: -10.876675605773926
    9. '("' → logprob: -11.251675605773926
    10. ')' → logprob: -11.376675605773926

Token 274: ' ou' (ID: 2031)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1129293143749237
    2. ' if' → logprob: -3.112929344177246
    3. ',' → logprob: -3.237929344177246
    4. 'if' → logprob: -4.112929344177246
    5. 'print' → logprob: -5.737929344177246
    6. ')' → logprob: -6.862929344177246
    7. '(' → logprob: -6.862929344177246
    8. '()' → logprob: -7.112929344177246
    9. 'def' → logprob: -9.362929344177246
    10. ' or' → logprob: -9.862929344177246

Token 275: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.17970895767211914
    2. '"No' → logprob: -1.9297089576721191
    3. '   ' → logprob: -4.679708957672119
    4. '("' → logprob: -5.429708957672119
    5. 'No' → logprob: -5.679708957672119
    6. ' ' → logprob: -6.679708957672119
    7. ' "' → logprob: -7.679708957672119
    8. ' No' → logprob: -8.429708480834961
    9. '  ' → logprob: -9.554708480834961
    10. '(' → logprob: -10.054708480834961

Token 276: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.0002165299083571881
    2. ' No' → logprob: -8.625216484069824
    3. '"No' → logprob: -10.250216484069824
    4. '"' → logprob: -13.750216484069824
    5. '   ' → logprob: -14.625216484069824
    6. ' ' → logprob: -17.00021743774414
    7. '_No' → logprob: -17.75021743774414
    8. 'Non' → logprob: -17.87521743774414
    9. 'Yes' → logprob: -18.50021743774414
    10. 'def' → logprob: -18.87521743774414

Token 277: '"
' (ID: 1092)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -1.1083062887191772
    2. '")' → logprob: -1.1083062887191772
    3. ')' → logprob: -1.6083062887191772
    4. '   ' → logprob: -2.483306407928467
    5. '"' → logprob: -3.233306407928467
    6. '(s' → logprob: -4.858306407928467
    7. '(' → logprob: -5.733306407928467
    8. ')"' → logprob: -6.483306407928467
    9. '()"' → logprob: -6.858306407928467
    10. '("' → logprob: -7.108306407928467

Token 278: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.005456559360027313
    2. 'print' → logprob: -5.255456447601318
    3. ' print' → logprob: -9.130456924438477
    4. 'result' → logprob: -9.755456924438477
    5. '
' → logprob: -10.130456924438477
    6. '    
' → logprob: -11.755456924438477
    7. '```' → logprob: -12.505456924438477
    8. ' result' → logprob: -13.130456924438477
    9. '	print' → logprob: -13.880456924438477
    10. 'if' → logprob: -14.880456924438477

Token 279: ' result' (ID: 1534)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00016897499153856188
    2. ' print' → logprob: -9.000168800354004
    3. 'result' (adapté à ' result') → logprob: -10.250168800354004
    4. '   ' → logprob: -11.500168800354004
    5. 'if' → logprob: -17.12516975402832
    6. '```' → logprob: -17.12516975402832
    7. ' result' → logprob: -17.87516975402832
    8. '	print' → logprob: -18.87516975402832
    9. 'prin' → logprob: -20.00016975402832
    10. 'pr' → logprob: -20.25016975402832

Token 280: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.47407761216163635
    2. '=' → logprob: -0.974077582359314
    3. ')' → logprob: -14.849077224731445
    4. '＝' → logprob: -16.099077224731445
    5. '=s' → logprob: -16.974077224731445
    6. ' ' → logprob: -17.224077224731445
    7. 's' → logprob: -17.224077224731445
    8. '   ' → logprob: -17.724077224731445
    9. '_' → logprob: -17.974077224731445
    10. ' =)' → logprob: -17.974077224731445

Token 281: ' is' (ID: 382)
  Prédit: 'is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'is' → logprob: -0.575939416885376
    2. ' is' → logprob: -0.825939416885376
    3. '	is' → logprob: -19.325939178466797
    4. '   ' → logprob: -19.700939178466797
    5. '"is' → logprob: -21.075939178466797
    6. '(is' → logprob: -21.325939178466797
    7. ')is' → logprob: -21.950939178466797
    8. '```' → logprob: -21.950939178466797
    9. '`' → logprob: -22.825939178466797
    10. '=is' → logprob: -23.450939178466797

Token 282: '_two' (ID: 54305)
  Prédit: '_two'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_two' → logprob: -2.696889623621246e-06
    2. 'two' → logprob: -12.87500286102295
    3. 'Two' → logprob: -17.250001907348633
    4. '_TWO' → logprob: -17.625001907348633
    5. ' two' → logprob: -19.125001907348633
    6. '_tw' → logprob: -19.250001907348633
    7. '_' → logprob: -19.250001907348633
    8. '_t' → logprob: -20.875001907348633
    9. '```' → logprob: -21.750001907348633
    10. 's' → logprob: -21.875001907348633

Token 283: '_pairs' (ID: 90005)
  Prédit: '_pairs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_pairs' → logprob: -1.2664456789934775e-06
    2. '_pair' → logprob: -14.500000953674316
    3. '_' → logprob: -15.000000953674316
    4. '_two' → logprob: -15.500000953674316
    5. 'pairs' → logprob: -15.625000953674316
    6. '_p' → logprob: -18.125001907348633
    7. '_parts' → logprob: -18.250001907348633
    8. ')_' → logprob: -19.000001907348633
    9. ''_' → logprob: -19.375001907348633
    10. '_patterns' → logprob: -19.500001907348633

Token 284: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -2.696889623621246e-06
    2. '(' → logprob: -12.87500286102295
    3. ' (' → logprob: -17.125001907348633
    4. 's' → logprob: -17.375001907348633
    5. '(
' → logprob: -18.625001907348633
    6. '(es' → logprob: -21.875001907348633
    7. ')' → logprob: -22.250001907348633
    8. '```' → logprob: -22.375001907348633
    9. '(S' → logprob: -22.625001907348633
    10. '(ss' → logprob: -23.000001907348633

Token 285: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0009326597792096436
    2. '(s' → logprob: -7.000932693481445
    3. ')
' → logprob: -12.125932693481445
    4. 's' → logprob: -12.125932693481445
    5. '(' → logprob: -12.375932693481445
    6. '   ' → logprob: -12.750932693481445
    7. ')s' → logprob: -13.000932693481445
    8. ' )' → logprob: -15.125932693481445
    9. ' ' → logprob: -15.625932693481445
    10. ')`' → logprob: -15.750932693481445

Token 286: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07917365431785583
    2. 'print' → logprob: -2.5791735649108887
    3. '
' → logprob: -8.829174041748047
    4. ' print' → logprob: -9.079174041748047
    5. '```' → logprob: -11.579174041748047
    6. '    
' → logprob: -12.079174041748047
    7. '	print' → logprob: -12.329174041748047
    8. '\n' → logprob: -13.329174041748047
    9. '(print' → logprob: -14.579174041748047
    10. '.print' → logprob: -14.704174041748047

Token 287: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.04151909425854683
    2. '   ' → logprob: -3.2915191650390625
    3. ' print' → logprob: -5.7915191650390625
    4. '
' → logprob: -7.7915191650390625
    5. '    
' → logprob: -13.041519165039062
    6. '```' → logprob: -13.541519165039062
    7. '	print' → logprob: -13.791519165039062
    8. '\n' → logprob: -16.166519165039062
    9. '  
' → logprob: -16.416519165039062
    10. '.print' → logprob: -16.416519165039062

Token 288: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.07889661937952042
    2. '(' → logprob: -2.5788965225219727
    3. '(res' → logprob: -13.453896522521973
    4. '()' → logprob: -13.953896522521973
    5. '(resultado' → logprob: -13.953896522521973
    6. 'result' → logprob: -14.203896522521973
    7. '(results' → logprob: -14.328896522521973
    8. '('' → logprob: -14.453896522521973
    9. '("("' → logprob: -14.453896522521973
    10. ' (' → logprob: -14.703896522521973

Token 289: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. '()' → logprob: -16.375
    3. ' )' → logprob: -16.375
    4. ')`' → logprob: -17.0
    5. '())' → logprob: -17.5
    6. '))' → logprob: -18.625
    7. '')' → logprob: -18.75
    8. ')
' → logprob: -19.125
    9. '`)' → logprob: -19.25
    10. '(' → logprob: -19.25

Token 290: '#' (ID: 2)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0002572865632828325
    2. '
' → logprob: -8.62525749206543
    3. ' if' → logprob: -10.25025749206543
    4. '\n' → logprob: -11.37525749206543
    5. 'main' → logprob: -11.50025749206543
    6. '```' → logprob: -11.75025749206543
    7. '<|end|>' → logprob: -11.87525749206543
    8. '#' → logprob: -13.00025749206543
    9. '\' → logprob: -13.87525749206543
    10. '  
' → logprob: -13.87525749206543

Token 291: ' App' (ID: 2583)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -7.107425062713446e-06
    2. 'main' → logprob: -12.000006675720215
    3. ' if' → logprob: -14.000006675720215
    4. 'If' → logprob: -21.25000762939453
    5. '__' → logprob: -22.12500762939453
    6. ' main' → logprob: -23.50000762939453
    7. '```' → logprob: -23.50000762939453
    8. '#' → logprob: -23.87500762939453
    9. '#if' → logprob: -24.75000762939453
    10. '	if' → logprob: -25.75000762939453

Token 292: 'el' (ID: 296)
  Prédit: 'el'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'el' → logprob: -0.10449911653995514
    2. 'if' → logprob: -2.479499101638794
    3. 'le' → logprob: -4.479499340057373
    4. 'end' → logprob: -7.104499340057373
    5. 'ly' → logprob: -7.229499340057373
    6. 'ear' → logprob: -7.604499340057373
    7. 'en' → logprob: -7.729499340057373
    8. 'e' → logprob: -7.729499340057373
    9. 'elf' → logprob: -8.104498863220215
    10. 'elif' → logprob: -8.229498863220215

Token 293: ' du' (ID: 1462)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.033551983535289764
    2. 'main' → logprob: -4.033552169799805
    3. ' main' → logprob: -5.283552169799805
    4. '(main' → logprob: -5.533552169799805
    5. ' if' → logprob: -5.658552169799805
    6. '_main' → logprob: -6.533552169799805
    7. '_' → logprob: -6.783552169799805
    8. '(' → logprob: -9.408552169799805
    9. '()' → logprob: -10.533552169799805
    10. '__' → logprob: -10.783552169799805

Token 294: ' point' (ID: 2438)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.004237005021423101
    2. ' main' → logprob: -5.504237174987793
    3. 'if' → logprob: -8.754237174987793
    4. '__' → logprob: -15.254237174987793
    5. '	main' → logprob: -15.754237174987793
    6. '_main' → logprob: -16.254236221313477
    7. 'def' → logprob: -16.504236221313477
    8. '(main' → logprob: -16.504236221313477
    9. ' if' → logprob: -16.879236221313477
    10. '```' → logprob: -17.004236221313477

Token 295: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.07057582587003708
    2. 'd' → logprob: -2.695575714111328
    3. '_' → logprob: -7.695575714111328
    4. '_d' → logprob: -8.820575714111328
    5. 'entrée' → logprob: -11.070575714111328
    6. 'entry' → logprob: -12.320575714111328
    7. ' entry' → logprob: -12.445575714111328
    8. '	d' → logprob: -13.195575714111328
    9. 'entr' → logprob: -13.320575714111328
    10. '   ' → logprob: -13.445575714111328

Token 296: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.5764513611793518
    2. 'entrée' → logprob: -0.8264513611793518
    3. '_' → logprob: -8.701451301574707
    4. 'entr' → logprob: -9.076451301574707
    5. '’entrée' → logprob: -9.326451301574707
    6. ''' → logprob: -9.826451301574707
    7. 'entry' → logprob: -10.826451301574707
    8. ''ex' → logprob: -11.326451301574707
    9. '__' → logprob: -11.326451301574707
    10. ''ent' → logprob: -11.451451301574707

Token 297: ' principal' (ID: 10589)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0005044196150265634
    2. 'main' → logprob: -7.750504493713379
    3. '
' → logprob: -9.625504493713379
    4. ' if' → logprob: -11.875504493713379
    5. '```' → logprob: -15.250504493713379
    6. '(main' → logprob: -15.375504493713379
    7. '_main' → logprob: -16.375503540039062
    8. '

' → logprob: -16.625503540039062
    9. ' main' → logprob: -17.375503540039062
    10. '    
' → logprob: -17.625503540039062

Token 298: ' du' (ID: 1462)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.04869966581463814
    2. '
' → logprob: -3.0486996173858643
    3. 'main' → logprob: -9.173699378967285
    4. ' if' → logprob: -12.423699378967285
    5. '

' → logprob: -12.798699378967285
    6. '    
' → logprob: -14.673699378967285
    7. '```' → logprob: -14.673699378967285
    8. '
' → logprob: -15.048699378967285
    9. '  
' → logprob: -15.173699378967285
    10. '\n' → logprob: -15.798699378967285

Token 299: ' programme' (ID: 18190)
  Prédit: 'programme'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'programme' → logprob: -0.02605944126844406
    2. 'script' → logprob: -4.526059627532959
    3. 'program' → logprob: -4.526059627532959
    4. ' programme' → logprob: -5.526059627532959
    5. ' script' → logprob: -9.5260591506958
    6. 'programm' → logprob: -12.1510591506958
    7. 'module' → logprob: -12.5260591506958
    8. 'code' → logprob: -12.6510591506958
    9. 'programma' → logprob: -12.7760591506958
    10. 'python' → logprob: -13.1510591506958

Token 300: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5768123865127563
    2. 'if' → logprob: -0.8268123865127563
    3. '

' → logprob: -7.326812267303467
    4. 'main' → logprob: -8.826812744140625
    5. ' if' → logprob: -9.951812744140625
    6. '
' → logprob: -11.951812744140625
    7. '```' → logprob: -12.326812744140625
    8. '\n' → logprob: -12.701812744140625
    9. '  
' → logprob: -12.951812744140625
    10. '    
' → logprob: -13.326812744140625

Token 301: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.07889000326395035
    2. 'main' → logprob: -2.578890085220337
    3. ' if' → logprob: -15.703889846801758
    4. ' main' → logprob: -16.578889846801758
    5. '```' → logprob: -17.703889846801758
    6. '
' → logprob: -18.828889846801758
    7. '(main' → logprob: -19.203889846801758
    8. '_main' → logprob: -21.578889846801758
    9. '	main' → logprob: -21.578889846801758
    10. '__' → logprob: -22.203889846801758

Token 302: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.004087066277861595
    2. '__' → logprob: -5.504086971282959
    3. ' ' → logprob: -11.754087448120117
    4. ' ' → logprob: -15.254087448120117
    5. '_' → logprob: -15.504087448120117
    6. 'name' → logprob: -16.004087448120117
    7. ' ' → logprob: -16.254087448120117
    8. '_name' → logprob: -16.504087448120117
    9. '___' → logprob: -17.004087448120117
    10. ' _' → logprob: -17.754087448120117

Token 303: 'name' (ID: 897)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.16551432013511658
    2. '__' → logprob: -2.1655142307281494
    3. ' __' → logprob: -3.7905142307281494
    4. 'name' → logprob: -4.9155144691467285
    5. '==' → logprob: -4.9155144691467285
    6. '_' → logprob: -8.54051399230957
    7. ' =="' → logprob: -8.54051399230957
    8. ' ' → logprob: -10.16551399230957
    9. '=="' → logprob: -10.16551399230957
    10. ' _' → logprob: -10.54051399230957

Token 304: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -1.2471589798224159e-05
    2. '==' → logprob: -11.375012397766113
    3. '_' → logprob: -14.500012397766113
    4. ' ==' → logprob: -15.500012397766113
    5. '__.__' → logprob: -16.50001335144043
    6. '___' → logprob: -17.12501335144043
    7. '=="' → logprob: -17.50001335144043
    8. '____' → logprob: -17.87501335144043
    9. ' __' → logprob: -18.00001335144043
    10. '=' → logprob: -18.25001335144043

Token 305: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.282283216714859
    2. '==' → logprob: -1.6572831869125366
    3. ' ==' → logprob: -2.907283306121826
    4. '=="' → logprob: -7.407283306121826
    5. '=='' → logprob: -10.532282829284668
    6. '"' → logprob: -12.032282829284668
    7. '_' → logprob: -12.282282829284668
    8. '=' → logprob: -12.407282829284668
    9. ' __' → logprob: -13.032282829284668
    10. '===' → logprob: -13.032282829284668

Token 306: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.004132303409278393
    2. ''' → logprob: -5.504132270812988
    3. ' "__' → logprob: -9.879132270812988
    4. '__' → logprob: -13.004132270812988
    5. ' '__' → logprob: -14.879132270812988
    6. '("__' → logprob: -17.629133224487305
    7. '"name' → logprob: -17.629133224487305
    8. '"user' → logprob: -17.879133224487305
    9. '"_' → logprob: -18.504133224487305
    10. ''"' → logprob: -18.879133224487305

Token 307: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -2.935296834039036e-06
    2. 'name' → logprob: -12.75000286102295
    3. ' main' → logprob: -18.000003814697266
    4. '_main' → logprob: -18.625003814697266
    5. '__' → logprob: -19.375003814697266
    6. 'm' → logprob: -21.875003814697266
    7. 'ma' → logprob: -22.000003814697266
    8. 'built' → logprob: -22.500003814697266
    9. '-main' → logprob: -22.625003814697266
    10. '	main' → logprob: -22.625003814697266

Token 308: '__":
' (ID: 49892)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.10020915418863297
    2. '__":
' → logprob: -2.3502092361450195
    3. '__':
' → logprob: -13.22520923614502
    4. '__["' → logprob: -14.97520923614502
    5. '_' → logprob: -15.85020923614502
    6. '_"' → logprob: -16.725208282470703
    7. '"' → logprob: -17.350208282470703
    8. '__("' → logprob: -17.350208282470703
    9. '__",' → logprob: -17.475208282470703
    10. '___' → logprob: -17.600208282470703

Token 309: '   ' (ID: 271)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.475524365901947
    2. ' main' → logprob: -1.1005244255065918
    3. 'main' → logprob: -3.475524425506592
    4. '__' → logprob: -4.725524425506592
    5. ''' → logprob: -5.850524425506592
    6. ' __' → logprob: -6.725524425506592
    7. ' "__' → logprob: -6.975524425506592
    8. '   ' → logprob: -7.725524425506592
    9. '	main' → logprob: -8.350523948669434
    10. '_main' → logprob: -9.225523948669434

Token 310: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' (adapté à ' main') → logprob: -0.0009115827269852161
    2. ' main' → logprob: -7.000911712646484
    3. '	main' → logprob: -15.750911712646484
    4. '   ' → logprob: -20.125911712646484
    5. '_main' → logprob: -20.250911712646484
    6. '(main' → logprob: -21.500911712646484
    7. '.main' → logprob: -22.250911712646484
    8. ' ' → logprob: -23.625911712646484
    9. 'Main' → logprob: -24.375911712646484
    10. '  ' → logprob: -25.125911712646484

Token 311: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -2.081584716506768e-05
    2. '(' → logprob: -11.500020980834961
    3. '()
' → logprob: -11.500020980834961
    4. ' ()' → logprob: -15.625020980834961
    5. '()

' → logprob: -16.25002098083496
    6. '()`' → logprob: -16.62502098083496
    7. '()"' → logprob: -17.62502098083496
    8. '(
' → logprob: -18.12502098083496
    9. '()
' → logprob: -18.12502098083496
    10. '()\' → logprob: -18.37502098083496


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 309
Tokens correctement prédits (1ère position, stricte): 98
Tokens correctement prédits (1ère position, avec adaptation): 104
Tokens correctement prédits (top 10): 214
Précision stricte (1ère position): 31.72%
Précision adaptée (1ère position): 33.66%
Précision (top 10): 69.26%
================================================================================
