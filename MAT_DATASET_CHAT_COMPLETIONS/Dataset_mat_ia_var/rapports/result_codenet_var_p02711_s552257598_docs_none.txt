================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:18:15
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = input()
ns = [n[i] for i in range(3)]
if '7' in ns:
    print('Yes')
else:
    print('No')
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' input' (ID: 3422)
  → Token d'amorce (pas de prédiction)

Token 3: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003321603639051318
    2. ''' → logprob: -6.378321647644043
    3. '('' → logprob: -6.878321647644043
    4. '"' → logprob: -8.128321647644043
    5. '("("' → logprob: -9.128321647644043
    6. '(
' → logprob: -9.253321647644043
    7. '()' → logprob: -10.628321647644043
    8. '[' → logprob: -11.128321647644043
    9. '`' → logprob: -11.878321647644043
    10. ' (' → logprob: -12.003321647644043

Token 4: 'ns' (ID: 6097)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.43857887387275696
    2. '.' → logprob: -1.9385788440704346
    3. '\n' → logprob: -2.4385788440704346
    4. '*' → logprob: -3.3135788440704346
    5. '.strip' → logprob: -3.9385788440704346
    6. '```' → logprob: -3.9385788440704346
    7. '**' → logprob: -4.813579082489014
    8. '=' → logprob: -4.813579082489014
    9. '\' → logprob: -5.063579082489014
    10. 'if' → logprob: -5.438579082489014

Token 5: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.203144833445549
    2. '[' → logprob: -2.0781447887420654
    3. 't' → logprob: -3.9531447887420654
    4. '[:' → logprob: -4.9531450271606445
    5. '.strip' → logprob: -5.0781450271606445
    6. '.split' → logprob: -5.4531450271606445
    7. 'trip' → logprob: -5.4531450271606445
    8. 'um' → logprob: -5.5781450271606445
    9. '.lower' → logprob: -5.9531450271606445
    10. '+' → logprob: -6.4531450271606445

Token 6: ' [' (ID: 723)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.524537205696106
    2. ' n' → logprob: -1.774537205696106
    3. 'int' → logprob: -1.899537205696106
    4. ' int' → logprob: -3.7745370864868164
    5. 'list' → logprob: -4.149537086486816
    6. ' list' → logprob: -4.274537086486816
    7. 'input' → logprob: -4.274537086486816
    8. '[int' → logprob: -4.774537086486816
    9. '[]' → logprob: -5.524537086486816
    10. ' input' → logprob: -6.024537086486816

Token 7: 'n' (ID: 77)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.11352139711380005
    2. 'n' → logprob: -2.2385213375091553
    3. ']' → logprob: -8.113521575927734
    4. ' int' → logprob: -9.363521575927734
    5. ' n' → logprob: -9.488521575927734
    6. '0' → logprob: -9.613521575927734
    7. '(int' → logprob: -9.738521575927734
    8. 'x' → logprob: -10.238521575927734
    9. ']int' → logprob: -10.988521575927734
    10. 'i' → logprob: -11.113521575927734

Token 8: '[i' (ID: 1768)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.09712668508291245
    2. ')]' → logprob: -2.5971267223358154
    3. ',' → logprob: -4.722126483917236
    4. ')' → logprob: -4.972126483917236
    5. '[' → logprob: -7.347126483917236
    6. '+' → logprob: -8.222126960754395
    7. '.]' → logprob: -8.347126960754395
    8. '+]' → logprob: -8.472126960754395
    9. '])' → logprob: -8.847126960754395
    10. '.split' → logprob: -8.972126960754395

Token 9: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.012628190219402313
    2. '+' → logprob: -4.887628078460693
    3. ':]' → logprob: -6.637628078460693
    4. ':' → logprob: -6.887628078460693
    5. ':i' → logprob: -7.387628078460693
    6. ' ]' → logprob: -7.637628078460693
    7. '+]' → logprob: -7.637628078460693
    8. ']]' → logprob: -7.887628078460693
    9. ']+' → logprob: -8.387628555297852
    10. '-' → logprob: -8.637628555297852

Token 10: ' for' (ID: 395)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.21098637580871582
    2. '+' → logprob: -1.7109863758087158
    3. '[' → logprob: -5.585986137390137
    4. ' for' → logprob: -6.585986137390137
    5. 'for' → logprob: -6.960986137390137
    6. '+]' → logprob: -6.960986137390137
    7. ' ]' → logprob: -7.585986137390137
    8. '[i' → logprob: -7.835986137390137
    9. '-' → logprob: -7.835986137390137
    10. ' ' → logprob: -8.210986137390137

Token 11: ' i' (ID: 575)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.3025093376636505
    2. ' i' → logprob: -1.4275093078613281
    3. ' ' → logprob: -4.177509307861328
    4. 'range' → logprob: -5.177509307861328
    5. 'i' → logprob: -9.427509307861328
    6. ' in' → logprob: -9.927509307861328
    7. ' xrange' → logprob: -11.427509307861328
    8. '  ' → logprob: -12.177509307861328
    9. '	range' → logprob: -12.677509307861328
    10. 'Range' → logprob: -13.552509307861328

Token 12: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.015797728672623634
    2. 'in' → logprob: -4.6407976150512695
    3. '+' → logprob: -5.2657976150512695
    4. ' ' → logprob: -8.01579761505127
    5. ']' → logprob: -8.64079761505127
    6. 'range' → logprob: -9.26579761505127
    7. ')' → logprob: -9.76579761505127
    8. '1' → logprob: -10.64079761505127
    9. '<|end|>' → logprob: -11.01579761505127
    10. '  ' → logprob: -11.01579761505127

Token 13: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.16028617322444916
    2. ' range' → logprob: -1.9102861881256104
    3. ' ' → logprob: -10.160285949707031
    4. 'len' → logprob: -11.160285949707031
    5. ' len' → logprob: -12.160285949707031
    6. '	range' → logprob: -13.410285949707031
    7. '  ' → logprob: -13.785285949707031
    8. '   ' → logprob: -14.785285949707031
    9. '(range' → logprob: -15.160285949707031
    10. ' xrange' → logprob: -15.410285949707031

Token 14: '(' (ID: 7)
  Prédit: '(len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(len' → logprob: -0.16023346781730652
    2. '(' → logprob: -1.910233497619629
    3. '(
' → logprob: -11.910233497619629
    4. 'len' → logprob: -14.285233497619629
    5. ' (' → logprob: -14.535233497619629
    6. '(n' → logprob: -14.535233497619629
    7. '(length' → logprob: -14.785233497619629
    8. '(

' → logprob: -14.910233497619629
    9. '((' → logprob: -16.410232543945312
    10. ' len' → logprob: -16.910232543945312

Token 15: '3' (ID: 18)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.35023242235183716
    2. 'len' → logprob: -1.2252323627471924
    3. ' len' → logprob: -6.7252326011657715
    4. '3' → logprob: -8.850232124328613
    5. '6' → logprob: -9.350232124328613
    6. '0' → logprob: -9.350232124328613
    7. '(len' → logprob: -9.350232124328613
    8. '2' → logprob: -9.600232124328613
    9. ')' → logprob: -10.725232124328613
    10. '4' → logprob: -10.850232124328613

Token 16: ')]
' (ID: 11587)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.00012356207298580557
    2. ')' → logprob: -9.750123977661133
    3. ']' → logprob: -10.000123977661133
    4. '-' → logprob: -12.125123977661133
    5. ' )' → logprob: -12.625123977661133
    6. '+' → logprob: -12.750123977661133
    7. ')])' → logprob: -12.750123977661133
    8. '])]' → logprob: -13.625123977661133
    9. '**' → logprob: -14.125123977661133
    10. '')]' → logprob: -14.250123977661133

Token 17: 'if' (ID: 366)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.07686212658882141
    2. '+' → logprob: -3.326862096786499
    3. '[' → logprob: -3.451862096786499
    4. ')' → logprob: -6.076862335205078
    5. '.' → logprob: -6.201862335205078
    6. '*' → logprob: -7.451862335205078
    7. '=' → logprob: -8.201862335205078
    8. '+]' → logprob: -8.451862335205078
    9. 's' → logprob: -8.951862335205078
    10. ',' → logprob: -9.576862335205078

Token 18: ' '' (ID: 461)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.7323169708251953
    2. ' ns' → logprob: -0.8573169708251953
    3. ' ' → logprob: -2.8573169708251953
    4. 'n' → logprob: -3.6073169708251953
    5. ' len' → logprob: -6.107316970825195
    6. 'ns' → logprob: -6.107316970825195
    7. ' ' → logprob: -6.357316970825195
    8. 's' → logprob: -6.482316970825195
    9. ' int' → logprob: -6.857316970825195
    10. ' s' → logprob: -7.232316970825195

Token 19: '7' (ID: 22)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.24516884982585907
    2. 'n' → logprob: -1.9951688051223755
    3. '0' → logprob: -2.995168924331665
    4. '1' → logprob: -5.495168685913086
    5. '9' → logprob: -5.620168685913086
    6. '3' → logprob: -5.620168685913086
    7. ''s' → logprob: -5.870168685913086
    8. '7' → logprob: -6.120168685913086
    9. '2' → logprob: -6.120168685913086
    10. '>' → logprob: -6.370168685913086

Token 20: ''' (ID: 6)
  Prédit: '''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.004758699797093868
    2. ''in' → logprob: -5.754758834838867
    3. ' in' → logprob: -7.629758834838867
    4. ' '' → logprob: -8.004758834838867
    5. ']' → logprob: -8.254758834838867
    6. '7' → logprob: -9.004758834838867
    7. 'in' → logprob: -9.504758834838867
    8. ')' → logprob: -9.629758834838867
    9. ']'' → logprob: -10.129758834838867
    10. ' not' → logprob: -10.379758834838867

Token 21: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.04032502323389053
    2. ' ' → logprob: -4.040325164794922
    3. 'in' → logprob: -4.290325164794922
    4. ' not' → logprob: -5.040325164794922
    5. ' ==' → logprob: -6.790325164794922
    6. '==' → logprob: -8.415325164794922
    7. 'not' → logprob: -8.665325164794922
    8. ' n' → logprob: -9.415325164794922
    9. ' i' → logprob: -9.665325164794922
    10. ')' → logprob: -11.040325164794922

Token 22: ' ns' (ID: 18343)
  Prédit: ' ns'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ns' → logprob: -0.47783589363098145
    2. 'ns' → logprob: -0.9778358936309814
    3. 'n' → logprob: -6.227835655212402
    4. ' n' → logprob: -6.352835655212402
    5. '(ns' → logprob: -10.852835655212402
    6. '	ns' → logprob: -11.477835655212402
    7. '_ns' → logprob: -14.165335655212402
    8. 'ms' → logprob: -14.540335655212402
    9. ' ' → logprob: -14.665335655212402
    10. ' ' → logprob: -14.665335655212402

Token 23: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -6.76628842484206e-05
    2. ' :' → logprob: -9.625067710876465
    3. ':**' → logprob: -14.000067710876465
    4. ' and' → logprob: -15.750067710876465
    5. ',' → logprob: -16.00006675720215
    6. '):' → logprob: -16.12506675720215
    7. ':
' → logprob: -16.25006675720215
    8. ':]' → logprob: -17.00006675720215
    9. '.' → logprob: -17.37506675720215
    10. ':n' → logprob: -17.75006675720215

Token 24: '   ' (ID: 271)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.10786186158657074
    2. '   ' → logprob: -2.3578617572784424
    3. 'print' → logprob: -5.2328619956970215
    4. ' n' → logprob: -7.3578619956970215
    5. ':' → logprob: -7.9828619956970215
    6. '    ' → logprob: -7.9828619956970215
    7. ' ' → logprob: -8.232861518859863
    8. '	print' → logprob: -8.857861518859863
    9. '    
' → logprob: -9.232861518859863
    10. '\n' → logprob: -9.357861518859863

Token 25: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.00893386360257864
    2. 'print' (adapté à ' print') → logprob: -4.758934020996094
    3. '   ' → logprob: -8.883934020996094
    4. ' n' → logprob: -9.133934020996094
    5. ' pass' → logprob: -10.008934020996094
    6. 'n' → logprob: -11.883934020996094
    7. '    ' → logprob: -12.008934020996094
    8. ' ' → logprob: -12.133934020996094
    9. ' p' → logprob: -13.758934020996094
    10. ' prin' → logprob: -13.883934020996094

Token 26: '('' (ID: 706)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.036309629678726196
    2. '('' → logprob: -3.4113097190856934
    3. '("' → logprob: -6.411309719085693
    4. '(n' → logprob: -7.536309719085693
    5. '(True' → logprob: -7.911309719085693
    6. '()' → logprob: -9.661309242248535
    7. '("("' → logprob: -10.911309242248535
    8. '(ns' → logprob: -11.161309242248535
    9. ' (' → logprob: -11.911309242248535
    10. '((' → logprob: -12.786309242248535

Token 27: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.0833573117852211
    2. 'YES' → logprob: -2.583357334136963
    3. 'yes' → logprob: -6.083357334136963
    4. ' Yes' → logprob: -6.833357334136963
    5. ' yes' → logprob: -7.458357334136963
    6. 'Lucky' → logprob: -8.958356857299805
    7. '7' → logprob: -9.333356857299805
    8. '777' → logprob: -9.583356857299805
    9. 'BO' → logprob: -10.208356857299805
    10. 'Boom' → logprob: -10.583356857299805

Token 28: '')
' (ID: 2515)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.038054123520851135
    2. ')' → logprob: -3.2880542278289795
    3. '')
' → logprob: -11.538054466247559
    4. '")' → logprob: -13.163054466247559
    5. ''' → logprob: -15.663054466247559
    6. '}')' → logprob: -15.788054466247559
    7. '!' → logprob: -15.913054466247559
    8. '')
' → logprob: -16.163053512573242
    9. '`)' → logprob: -16.413053512573242
    10. ')
' → logprob: -16.538053512573242

Token 29: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.02442837506532669
    2. ' else' → logprob: -3.774428367614746
    3. 'elif' → logprob: -7.024428367614746
    4. '<|end|>' → logprob: -8.524428367614746
    5. ')' → logprob: -10.149428367614746
    6. '```' → logprob: -11.149428367614746
    7. 'e' → logprob: -11.649428367614746
    8. ' elif' → logprob: -11.774428367614746
    9. '_else' → logprob: -12.524428367614746
    10. ' ' → logprob: -12.774428367614746

Token 30: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -3.531315314830863e-06
    2. ':
' → logprob: -12.750003814697266
    3. ' :' → logprob: -15.000003814697266
    4. '   ' → logprob: -15.250003814697266
    5. '):' → logprob: -17.125003814697266
    6. ':def' → logprob: -17.875003814697266
    7. '：' → logprob: -18.250003814697266
    8. ':**' → logprob: -18.375003814697266
    9. ':return' → logprob: -18.500003814697266
    10. '():' → logprob: -18.625003814697266

Token 31: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0001601539261173457
    2. ' print' → logprob: -9.125160217285156
    3. 'print' → logprob: -10.750160217285156
    4. '    ' → logprob: -11.250160217285156
    5. '       ' → logprob: -12.500160217285156
    6. ''' → logprob: -12.625160217285156
    7. ' ' → logprob: -12.875160217285156
    8. '    
' → logprob: -13.250160217285156
    9. '```' → logprob: -13.250160217285156
    10. '  ' → logprob: -13.750160217285156

Token 32: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.26443740725517273
    2. ' print' → logprob: -1.5144374370574951
    3. '   ' → logprob: -4.389437198638916
    4. ''' → logprob: -12.139437675476074
    5. ' ' → logprob: -12.264437675476074
    6. '    ' → logprob: -12.514437675476074
    7. 'Print' → logprob: -12.889437675476074
    8. '	print' → logprob: -13.514437675476074
    9. ' No' → logprob: -13.764437675476074
    10. 'No' → logprob: -13.764437675476074

Token 33: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.062166206538677216
    2. '(' → logprob: -2.812166213989258
    3. '()' → logprob: -8.562166213989258
    4. '('(' → logprob: -12.437166213989258
    5. '("' → logprob: -13.312166213989258
    6. '(None' → logprob: -14.687166213989258
    7. '('.')' → logprob: -15.062166213989258
    8. '(False' → logprob: -15.062166213989258
    9. '(
' → logprob: -15.937166213989258
    10. '(('' → logprob: -15.937166213989258

Token 34: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.00043102685594931245
    2. ''' → logprob: -7.750431060791016
    3. ' No' → logprob: -15.875431060791016
    4. ''N' → logprob: -16.125431060791016
    5. '"No' → logprob: -16.375431060791016
    6. '')' → logprob: -16.875431060791016
    7. 'N' → logprob: -18.250431060791016
    8. '(No' → logprob: -18.875431060791016
    9. 'NO' → logprob: -19.500431060791016
    10. ')' → logprob: -19.750431060791016

Token 35: '')' (ID: 1542)
  Prédit: '')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.00861681904643774
    2. ')' → logprob: -4.758616924285889
    3. ''' → logprob: -13.88361644744873
    4. '")' → logprob: -14.25861644744873
    5. '')
' → logprob: -14.63361644744873
    6. '`)' → logprob: -15.63361644744873
    7. '}')' → logprob: -16.758617401123047
    8. ')'' → logprob: -18.258617401123047
    9. '’)' → logprob: -18.383617401123047
    10. '('' → logprob: -18.383617401123047


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 33
Tokens correctement prédits (1ère position, stricte): 12
Tokens correctement prédits (1ère position, avec adaptation): 13
Tokens correctement prédits (top 10): 25
Précision stricte (1ère position): 36.36%
Précision adaptée (1ère position): 39.39%
Précision (top 10): 75.76%
================================================================================
