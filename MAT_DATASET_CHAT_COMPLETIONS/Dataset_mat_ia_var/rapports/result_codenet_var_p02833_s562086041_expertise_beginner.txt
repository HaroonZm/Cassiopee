================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:34:37
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())

if n < 10:
    print(0)
    exit()

if n % 2 == 1:
    print(0)
    exit()
else:
    ans = n // 10
    tmp = 10
    while n // tmp > 0:
        tmp = tmp * 5
        ans = ans + (n // tmp)
    print(ans)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -5.7530574849806726e-05
    2. ''' → logprob: -10.750057220458984
    3. '('' → logprob: -11.125057220458984
    4. '(
' → logprob: -11.750057220458984
    5. '(n' → logprob: -13.000057220458984
    6. '```' → logprob: -13.125057220458984
    7. '("("' → logprob: -13.125057220458984
    8. '()' → logprob: -13.500057220458984
    9. '`' → logprob: -13.500057220458984
    10. '[' → logprob: -14.125057220458984

Token 4: '())

' (ID: 27654)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0733630508184433
    2. ')' → logprob: -2.8233630657196045
    3. '()' → logprob: -4.698362827301025
    4. '())' → logprob: -6.948362827301025
    5. '```' → logprob: -8.198363304138184
    6. '(
' → logprob: -8.448363304138184
    7. '('' → logprob: -8.948363304138184
    8. '(()' → logprob: -9.073363304138184
    9. '`' → logprob: -9.198363304138184
    10. '("("' → logprob: -9.698363304138184

Token 5: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.5543400049209595
    2. 'for' → logprob: -0.9293400049209595
    3. 'i' → logprob: -4.30433988571167
    4. 's' → logprob: -4.55433988571167
    5. 'result' → logprob: -6.42933988571167
    6. 'total' → logprob: -6.67933988571167
    7. 'factor' → logprob: -6.80433988571167
    8. 'f' → logprob: -7.17933988571167
    9. 'sum' → logprob: -7.55433988571167
    10. 'x' → logprob: -7.55433988571167

Token 6: ' n' (ID: 297)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3493368923664093
    2. ' n' → logprob: -1.224336862564087
    3. 'n' → logprob: -7.224337100982666
    4. '  ' → logprob: -9.474336624145508
    5. ''' → logprob: -10.349336624145508
    6. ' ' → logprob: -11.599336624145508
    7. ' (' → logprob: -11.724336624145508
    8. ' )' → logprob: -11.974336624145508
    9. ' not' → logprob: -12.099336624145508
    10. '"' → logprob: -12.224336624145508

Token 7: ' <' (ID: 464)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.04111463576555252
    2. ' <' → logprob: -4.166114807128906
    3. '>' → logprob: -4.666114807128906
    4. ' ' → logprob: -4.666114807128906
    5. ' ==' → logprob: -6.166114807128906
    6. ' >=' → logprob: -6.416114807128906
    7. ' %' → logprob: -6.666114807128906
    8. ' <=' → logprob: -8.041114807128906
    9. '  ' → logprob: -8.541114807128906
    10. '<' → logprob: -9.166114807128906

Token 8: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.025831079110503197
    2. '=' → logprob: -4.40083122253418
    3. '10' → logprob: -5.15083122253418
    4. '0' → logprob: -5.15083122253418
    5. '20' → logprob: -7.27583122253418
    6. '5' → logprob: -7.65083122253418
    7. '"' → logprob: -9.02583122253418
    8. ' =' → logprob: -9.52583122253418
    9. '50' → logprob: -9.77583122253418
    10. '1' → logprob: -9.90083122253418

Token 9: '10' (ID: 702)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.17521780729293823
    2. '10' → logprob: -2.300217866897583
    3. ' ' → logprob: -3.050217866897583
    4. '=' → logprob: -5.175217628479004
    5. '100' → logprob: -6.300217628479004
    6. '50' → logprob: -6.425217628479004
    7. '20' → logprob: -6.550217628479004
    8. '5' → logprob: -6.675217628479004
    9. '1' → logprob: -7.175217628479004
    10. '3' → logprob: -9.050217628479004

Token 10: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.5332478142227046e-05
    2. ' :' → logprob: -12.125015258789062
    3. ':**' → logprob: -12.875015258789062
    4. ':
' → logprob: -13.000015258789062
    5. '>:' → logprob: -13.375015258789062
    6. '):' → logprob: -13.500015258789062
    7. '':' → logprob: -13.875015258789062
    8. '':'' → logprob: -15.000015258789062
    9. '":' → logprob: -15.250015258789062
    10. '：' → logprob: -16.250015258789062

Token 11: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.32722628116607666
    2. '    ' → logprob: -1.9522262811660767
    3. '\n' → logprob: -3.077226161956787
    4. '\' → logprob: -3.202226161956787
    5. ' print' → logprob: -3.827226161956787
    6. 'print' → logprob: -4.452226161956787
    7. '    
' → logprob: -5.327226161956787
    8. ':' → logprob: -6.077226161956787
    9. ' ' → logprob: -6.077226161956787
    10. ' \' → logprob: -6.077226161956787

Token 12: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.1531125158071518
    2. 'print' (adapté à ' print') → logprob: -2.1531124114990234
    3. '   ' → logprob: -3.7781124114990234
    4. '    ' → logprob: -6.028112411499023
    5. ' ' → logprob: -8.653112411499023
    6. '\' → logprob: -9.528112411499023
    7. '\n' → logprob: -9.653112411499023
    8. ' \' → logprob: -10.403112411499023
    9. '```' → logprob: -10.403112411499023
    10. ' 
' → logprob: -10.653112411499023

Token 13: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.009519604966044426
    2. '(n' → logprob: -4.759519577026367
    3. '('' → logprob: -7.759519577026367
    4. '("' → logprob: -8.384519577026367
    5. '("("' → logprob: -9.009519577026367
    6. '()' → logprob: -9.134519577026367
    7. '(
' → logprob: -12.009519577026367
    8. '("")' → logprob: -12.634519577026367
    9. '((' → logprob: -13.009519577026367
    10. '(f' → logprob: -13.134519577026367

Token 14: '0' (ID: 15)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.15084439516067505
    2. 'n' → logprob: -2.4008443355560303
    3. ''n' → logprob: -4.025844573974609
    4. ''"' → logprob: -4.025844573974609
    5. '"'' → logprob: -5.025844573974609
    6. ''' → logprob: -5.650844573974609
    7. '")' → logprob: -5.900844573974609
    8. ' n' → logprob: -8.27584457397461
    9. '(n' → logprob: -8.40084457397461
    10. ')n' → logprob: -9.52584457397461

Token 15: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.6457742175552994e-05
    2. '0' → logprob: -10.000056266784668
    3. ')
' → logprob: -12.125056266784668
    4. '')' → logprob: -13.625056266784668
    5. '`)' → logprob: -13.875056266784668
    6. '")' → logprob: -14.125056266784668
    7. '))' → logprob: -14.125056266784668
    8. '1' → logprob: -14.500056266784668
    9. ' )' → logprob: -14.500056266784668
    10. ')

' → logprob: -15.250056266784668

Token 16: '   ' (ID: 271)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.041011784225702286
    2. 'elif' → logprob: -3.6660118103027344
    3. '0' → logprob: -4.666011810302734
    4. ' else' → logprob: -6.166011810302734
    5. 'n' → logprob: -7.041011810302734
    6. ')' → logprob: -7.541011810302734
    7. '```' → logprob: -7.791011810302734
    8. '<|end|>' → logprob: -8.166011810302734
    9. 's' → logprob: -8.666011810302734
    10. '    
' → logprob: -8.916011810302734

Token 17: ' exit' (ID: 10654)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.012671037577092648
    2. 'elif' → logprob: -4.762670993804932
    3. '\n' → logprob: -6.887670993804932
    4. '0' → logprob: -6.887670993804932
    5. '```' → logprob: -7.637670993804932
    6. ' else' → logprob: -7.637670993804932
    7. ')' → logprob: -7.762670993804932
    8. '    
' → logprob: -9.13767147064209
    9. '   ' → logprob: -9.13767147064209
    10. '
' → logprob: -9.13767147064209

Token 18: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.003989711869508028
    2. '(' → logprob: -6.0039896965026855
    3. '()
' → logprob: -6.6289896965026855
    4. '()

' → logprob: -8.878990173339844
    5. '()\' → logprob: -10.753990173339844
    6. ')' → logprob: -11.378990173339844
    7. '(
' → logprob: -11.878990173339844
    8. '())' → logprob: -12.753990173339844
    9. '()
' → logprob: -13.253990173339844
    10. '```' → logprob: -13.378990173339844

Token 19: 'if' (ID: 366)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.44105929136276245
    2. 'n' → logprob: -1.6910593509674072
    3. 's' → logprob: -2.6910593509674072
    4. '0' → logprob: -3.4410593509674072
    5. 'elif' → logprob: -3.9410593509674072
    6. 'i' → logprob: -4.191059112548828
    7. '```' → logprob: -4.316059112548828
    8. 'for' → logprob: -4.816059112548828
    9. '    
' → logprob: -5.691059112548828
    10. '  
' → logprob: -6.316059112548828

Token 20: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.005400714930146933
    2. 'n' → logprob: -5.255400657653809
    3. ' ' → logprob: -9.005400657653809
    4. ' ' → logprob: -10.505400657653809
    5. '_' → logprob: -11.630400657653809
    6. '_n' → logprob: -13.005400657653809
    7. ' not' → logprob: -13.880400657653809
    8. '(n' → logprob: -14.505400657653809
    9. '	n' → logprob: -14.630400657653809
    10. '  ' → logprob: -14.755400657653809

Token 21: ' %' (ID: 1851)
  Prédit: ' >='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.07044052332639694
    2. ' <' → logprob: -3.9454405307769775
    3. '%' → logprob: -4.195440292358398
    4. '>=' → logprob: -4.445440292358398
    5. ' %' → logprob: -5.070440292358398
    6. ' >' → logprob: -5.445440292358398
    7. ' ' → logprob: -5.570440292358398
    8. ' ==' → logprob: -5.570440292358398
    9. ' <=' → logprob: -6.570440292358398
    10. '>' → logprob: -7.070440292358398

Token 22: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.28624215722084045
    2. '10' → logprob: -1.911242127418518
    3. ' ' → logprob: -2.4112422466278076
    4. '3' → logprob: -5.0362420082092285
    5. '5' → logprob: -5.7862420082092285
    6. '4' → logprob: -7.2862420082092285
    7. '100' → logprob: -7.6612420082092285
    8. '7' → logprob: -8.786242485046387
    9. '9' → logprob: -8.786242485046387
    10. '6' → logprob: -9.536242485046387

Token 23: '2' (ID: 17)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.30470237135887146
    2. '2' → logprob: -1.5547024011611938
    3. '5' → logprob: -3.9297022819519043
    4. '3' → logprob: -3.9297022819519043
    5. '9' → logprob: -5.429702281951904
    6. '4' → logprob: -5.929702281951904
    7. '7' → logprob: -6.179702281951904
    8. '1' → logprob: -6.804702281951904
    9. ' ' → logprob: -7.929702281951904
    10. '6' → logprob: -8.179702758789062

Token 24: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.15187202394008636
    2. '==' → logprob: -2.026871919631958
    3. ' !=' → logprob: -4.776872158050537
    4. '!=' → logprob: -7.651872158050537
    5. ':' → logprob: -8.901871681213379
    6. '=' → logprob: -9.776871681213379
    7. ' ' → logprob: -10.276871681213379
    8. ' :' → logprob: -11.276871681213379
    9. ' =' → logprob: -11.776871681213379
    10. '>' → logprob: -12.776871681213379

Token 25: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.16045169532299042
    2. '0' → logprob: -1.9104516506195068
    3. '2' → logprob: -9.035451889038086
    4. '1' → logprob: -9.160451889038086
    5. '=' → logprob: -14.160451889038086
    6. ' ==' → logprob: -14.285451889038086
    7. ' ' → logprob: -14.535451889038086
    8. '==' → logprob: -14.597951889038086
    9. ' =' → logprob: -15.410451889038086
    10. '```' → logprob: -16.160451889038086

Token 26: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.005787651054561138
    2. ' ' → logprob: -5.2557878494262695
    3. '1' → logprob: -7.5057878494262695
    4. '2' → logprob: -12.63078784942627
    5. '=' → logprob: -16.505786895751953
    6. '  ' → logprob: -16.755786895751953
    7. '==' → logprob: -16.755786895751953
    8. ')' → logprob: -17.130786895751953
    9. '4' → logprob: -17.318286895751953
    10. '```' → logprob: -17.380786895751953

Token 27: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.9862216504407115e-05
    2. ':
' → logprob: -11.625020027160645
    3. ' :' → logprob: -11.750020027160645
    4. '):' → logprob: -13.500020027160645
    5. ':**' → logprob: -13.875020027160645
    6. '>:' → logprob: -15.125020027160645
    7. ':

' → logprob: -16.500019073486328
    8. '':' → logprob: -17.000019073486328
    9. ':return' → logprob: -17.250019073486328
    10. '：' → logprob: -17.375019073486328

Token 28: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00046033994294703007
    2. ' ' → logprob: -8.875460624694824
    3. '    ' → logprob: -8.875460624694824
    4. '\n' → logprob: -10.250460624694824
    5. '\' → logprob: -10.500460624694824
    6. 'n' → logprob: -10.875460624694824
    7. '       ' → logprob: -11.000460624694824
    8. ' print' → logprob: -11.250460624694824
    9. '```' → logprob: -11.375460624694824
    10. ' n' → logprob: -11.500460624694824

Token 29: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.31994035840034485
    2. ' print' → logprob: -1.4449403285980225
    3. '    ' → logprob: -4.319940567016602
    4. ' n' → logprob: -4.819940567016602
    5. ' ' → logprob: -5.194940567016602
    6. 'print' (adapté à ' print') → logprob: -5.319940567016602
    7. '```' → logprob: -6.194940567016602
    8. ' ```' → logprob: -6.694940567016602
    9. 'n' → logprob: -6.944940567016602
    10. ' pass' → logprob: -8.194940567016602

Token 30: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.009380022063851357
    2. '(n' → logprob: -4.759379863739014
    3. '0' → logprob: -7.759379863739014
    4. '(-' → logprob: -9.259380340576172
    5. '((' → logprob: -9.259380340576172
    6. '('' → logprob: -10.009380340576172
    7. '1' → logprob: -10.384380340576172
    8. '()' → logprob: -10.384380340576172
    9. '("' → logprob: -11.384380340576172
    10. ' (' → logprob: -12.259380340576172

Token 31: '0' (ID: 15)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.5020991563796997
    2. 'n' → logprob: -1.3770991563796997
    3. '0' → logprob: -2.25209903717041
    4. '(' → logprob: -3.87709903717041
    5. ')' → logprob: -5.12709903717041
    6. '"' → logprob: -5.25209903717041
    7. ''' → logprob: -6.37709903717041
    8. '(n' → logprob: -7.12709903717041
    9. '")' → logprob: -7.25209903717041
    10. '2' → logprob: -7.25209903717041

Token 32: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00011212585377506912
    2. ')
' → logprob: -9.125112533569336
    3. '   ' → logprob: -13.375112533569336
    4. ' )' → logprob: -13.750112533569336
    5. ')
' → logprob: -16.000112533569336
    6. '')' → logprob: -16.500112533569336
    7. '）' → logprob: -16.500112533569336
    8. ')

' → logprob: -16.750112533569336
    9. '```' → logprob: -17.125112533569336
    10. ' ' → logprob: -17.375112533569336

Token 33: '   ' (ID: 271)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.30758458375930786
    2. '\n' → logprob: -1.807584524154663
    3. '
' → logprob: -3.557584524154663
    4. '   ' → logprob: -4.432584762573242
    5. ' else' → logprob: -4.432584762573242
    6. '```' → logprob: -4.557584762573242
    7. 'elif' → logprob: -4.682584762573242
    8. '<|end|>' → logprob: -4.932584762573242
    9. '\' → logprob: -5.432584762573242
    10. '  
' → logprob: -5.557584762573242

Token 34: ' exit' (ID: 10654)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.7018699645996094
    2. '\n' → logprob: -1.9518699645996094
    3. ')' → logprob: -2.0768699645996094
    4. '   ' → logprob: -2.2018699645996094
    5. '```' → logprob: -2.8268699645996094
    6. 'exit' (adapté à ' exit') → logprob: -3.7018699645996094
    7. '<|end|>' → logprob: -4.201869964599609
    8. ' else' → logprob: -4.826869964599609
    9. 'elif' → logprob: -5.701869964599609
    10. '
' → logprob: -5.826869964599609

Token 35: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -9.507972572464496e-05
    2. '(' → logprob: -9.37509536743164
    3. '()
' → logprob: -12.25009536743164
    4. '()

' → logprob: -13.12509536743164
    5. '()`' → logprob: -13.37509536743164
    6. '`()' → logprob: -14.75009536743164
    7. ' ()' → logprob: -14.87509536743164
    8. '())' → logprob: -16.00009536743164
    9. '();' → logprob: -16.00009536743164
    10. '()<' → logprob: -16.12509536743164

Token 36: 'else' (ID: 2807)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.4180977940559387
    2. 'n' → logprob: -2.418097734451294
    3. '```' → logprob: -2.668097734451294
    4. '\' → logprob: -2.793097734451294
    5. 'else' → logprob: -3.918097734451294
    6. '0' → logprob: -4.043097972869873
    7. ' 
' → logprob: -4.168097972869873
    8. '  
' → logprob: -4.793097972869873
    9. 'i' → logprob: -5.043097972869873
    10. 's' → logprob: -5.168097972869873

Token 37: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -4.723352049040841e-06
    2. ' :' → logprob: -12.750004768371582
    3. ':
' → logprob: -13.500004768371582
    4. ':**' → logprob: -15.750004768371582
    5. ':

' → logprob: -17.000003814697266
    6. '   ' → logprob: -17.250003814697266
    7. ':def' → logprob: -17.750003814697266
    8. ':return' → logprob: -17.875003814697266
    9. ':block' → logprob: -18.250003814697266
    10. '：' → logprob: -18.375003814697266

Token 38: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.019652048125863075
    2. '\n' → logprob: -5.144651889801025
    3. '    
' → logprob: -5.269651889801025
    4. 'n' → logprob: -6.269651889801025
    5. ' ' → logprob: -6.394651889801025
    6. ' 
' → logprob: -6.519651889801025
    7. '    ' → logprob: -6.519651889801025
    8. ' n' → logprob: -7.269651889801025
    9. '\' → logprob: -7.394651889801025
    10. '```' → logprob: -9.019652366638184

Token 39: ' ans' (ID: 3345)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.3630913496017456
    2. ' n' → logprob: -1.4880913496017456
    3. ' print' → logprob: -1.7380913496017456
    4. 'n' → logprob: -1.9880913496017456
    5. 'print' → logprob: -1.9880913496017456
    6. ' ' → logprob: -4.613091468811035
    7. ' for' → logprob: -4.863091468811035
    8. '    ' → logprob: -4.988091468811035
    9. 'count' → logprob: -5.488091468811035
    10. ' pass' → logprob: -5.613091468811035

Token 40: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.029234500601887703
    2. '=' → logprob: -3.6542344093322754
    3. ' +=' → logprob: -6.404234409332275
    4. ' ' → logprob: -6.779234409332275
    5. ' *=' → logprob: -10.029234886169434
    6. ':' → logprob: -11.029234886169434
    7. '.' → logprob: -11.154234886169434
    8. '[' → logprob: -11.404234886169434
    9. ')' → logprob: -11.404234886169434
    10. '_' → logprob: -11.779234886169434

Token 41: ' n' (ID: 297)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5018497109413147
    2. '1' → logprob: -1.62684965133667
    3. ' n' → logprob: -2.00184965133667
    4. '0' → logprob: -3.12684965133667
    5. 'n' → logprob: -4.75184965133667
    6. '2' → logprob: -5.25184965133667
    7. ' (' → logprob: -5.87684965133667
    8. '"' → logprob: -8.001850128173828
    9. '(n' → logprob: -8.001850128173828
    10. ' []' → logprob: -8.001850128173828

Token 42: ' //' (ID: 602)
  Prédit: ' //'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.48021528124809265
    2. '//' → logprob: -2.105215311050415
    3. '-' → logprob: -2.355215311050415
    4. ' ' → logprob: -2.980215311050415
    5. '   ' → logprob: -3.605215311050415
    6. ' -' → logprob: -3.730215311050415
    7. '<|end|>' → logprob: -4.105215072631836
    8. ' =' → logprob: -5.230215072631836
    9. ' 
' → logprob: -5.230215072631836
    10. '
' → logprob: -5.230215072631836

Token 43: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0020849506836384535
    2. '10' → logprob: -6.502084732055664
    3. ' ' → logprob: -7.877084732055664
    4. '4' → logprob: -9.127084732055664
    5. '3' → logprob: -9.752084732055664
    6. '6' → logprob: -10.752084732055664
    7. '5' → logprob: -11.877084732055664
    8. '20' → logprob: -12.752084732055664
    9. '   ' → logprob: -13.627084732055664
    10. '8' → logprob: -14.002084732055664

Token 44: '10' (ID: 702)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.004571103490889072
    2. '10' → logprob: -5.629570960998535
    3. '6' → logprob: -7.629570960998535
    4. '4' → logprob: -7.879570960998535
    5. '3' → logprob: -9.754570960998535
    6. ' ' → logprob: -10.879570960998535
    7. '   ' → logprob: -11.879570960998535
    8. '20' → logprob: -12.129570960998535
    9. '5' → logprob: -12.379570960998535
    10. '  ' → logprob: -12.879570960998535

Token 45: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15715883672237396
    2. '*' → logprob: -2.407158851623535
    3. '+' → logprob: -4.032158851623535
    4. '-' → logprob: -4.782158851623535
    5. '**' → logprob: -5.157158851623535
    6. '%' → logprob: -5.282158851623535
    7. '
' → logprob: -5.782158851623535
    8. 'print' → logprob: -5.907158851623535
    9. '\n' → logprob: -6.407158851623535
    10. ')' → logprob: -6.657158851623535

Token 46: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.051036156713962555
    2. 'print' → logprob: -3.0510361194610596
    3. '*' → logprob: -6.801036357879639
    4. '
' → logprob: -8.30103588104248
    5. ')' → logprob: -8.67603588104248
    6. '    
' → logprob: -8.67603588104248
    7. ' print' → logprob: -9.05103588104248
    8. '\n' → logprob: -9.17603588104248
    9. '    ' → logprob: -9.67603588104248
    10. ' ' → logprob: -9.67603588104248

Token 47: ' tmp' (ID: 8919)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.05059506371617317
    2. '   ' → logprob: -3.0505950450897217
    3. ' print' → logprob: -7.050595283508301
    4. 'if' → logprob: -7.675595283508301
    5. 'for' → logprob: -7.925595283508301
    6. 'while' → logprob: -9.6755952835083
    7. '```' → logprob: -9.6755952835083
    8. 'ans' → logprob: -10.3005952835083
    9. 'n' → logprob: -10.4255952835083
    10. '    
' → logprob: -10.9255952835083

Token 48: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.15921635925769806
    2. '=' → logprob: -2.2842164039611816
    3. ' *=' → logprob: -4.034216403961182
    4. '_' → logprob: -4.659216403961182
    5. ' -=' → logprob: -5.284216403961182
    6. ' +=' → logprob: -5.284216403961182
    7. ' %=' → logprob: -6.159216403961182
    8. ' //' → logprob: -6.284216403961182
    9. ' ' → logprob: -6.534216403961182
    10. '%' → logprob: -7.534216403961182

Token 49: ' ' (ID: 220)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.5018215775489807
    2. ' ans' → logprob: -1.751821517944336
    3. 'n' → logprob: -2.501821517944336
    4. '10' → logprob: -3.626821517944336
    5. ' n' → logprob: -3.751821517944336
    6. '0' → logprob: -3.876821517944336
    7. '1' → logprob: -3.876821517944336
    8. ' ' → logprob: -4.251821517944336
    9. '(ans' → logprob: -4.376821517944336
    10. '2' → logprob: -4.751821517944336

Token 50: '10' (ID: 702)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.2937016785144806
    2. 'n' → logprob: -1.6687016487121582
    3. '10' → logprob: -4.293701648712158
    4. '2' → logprob: -4.418701648712158
    5. '(ans' → logprob: -4.543701648712158
    6. '5' → logprob: -5.168701648712158
    7. '1' → logprob: -5.418701648712158
    8. '100' → logprob: -5.543701648712158
    9. '(n' → logprob: -5.793701648712158
    10. '(' → logprob: -5.793701648712158

Token 51: '
' (ID: 198)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '*' → logprob: -0.4836863577365875
    2. '**' → logprob: -1.2336863279342651
    3. ' *' → logprob: -2.9836864471435547
    4. ' ' → logprob: -4.108686447143555
    5. ' **' → logprob: -4.233686447143555
    6. '0' → logprob: -5.233686447143555
    7. '+' → logprob: -6.858686447143555
    8. '   ' → logprob: -7.483686447143555
    9. '    ' → logprob: -7.608686447143555
    10. '*
' → logprob: -7.983686447143555

Token 52: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006102981511503458
    2. 'while' → logprob: -6.131103038787842
    3. '    
' → logprob: -7.006103038787842
    4. '*' → logprob: -7.631103038787842
    5. '    ' → logprob: -7.631103038787842
    6. 'for' → logprob: -7.881103038787842
    7. '
' → logprob: -8.131102561950684
    8. ' while' → logprob: -8.506102561950684
    9. 'if' → logprob: -8.881102561950684
    10. ' ' → logprob: -9.006102561950684

Token 53: ' while' (ID: 2049)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' (adapté à ' while') → logprob: -0.23722688853740692
    2. '   ' → logprob: -2.362226963043213
    3. 'for' → logprob: -2.862226963043213
    4. ' while' → logprob: -3.362226963043213
    5. 'if' → logprob: -4.112226963043213
    6. '*' → logprob: -5.612226963043213
    7. ' for' → logprob: -6.487226963043213
    8. '    ' → logprob: -7.487226963043213
    9. ' ' → logprob: -7.487226963043213
    10. '**' → logprob: -7.737226963043213

Token 54: ' n' (ID: 297)
  Prédit: ' tmp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tmp' → logprob: -0.1684640645980835
    2. 'tmp' → logprob: -2.418464183807373
    3. ' ans' → logprob: -2.918464183807373
    4. ' n' → logprob: -4.668464183807373
    5. 'n' → logprob: -6.543464183807373
    6. 'ans' → logprob: -7.668464183807373
    7. ' ' → logprob: -8.668463706970215
    8. '(tmp' → logprob: -8.793463706970215
    9. '(ans' → logprob: -9.543463706970215
    10. '   ' → logprob: -9.793463706970215

Token 55: ' //' (ID: 602)
  Prédit: ' %'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.13325844705104828
    2. ' >=' → logprob: -2.63325834274292
    3. '%' → logprob: -3.13325834274292
    4. '>=' → logprob: -4.88325834274292
    5. ' //' → logprob: -7.13325834274292
    6. ' >' → logprob: -8.008258819580078
    7. ' ' → logprob: -8.133258819580078
    8. '>' → logprob: -8.508258819580078
    9. '//' → logprob: -9.508258819580078
    10. '   ' → logprob: -11.133258819580078

Token 56: ' tmp' (ID: 8919)
  Prédit: 'tmp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tmp' → logprob: -0.08996257930994034
    2. ' tmp' → logprob: -2.4649624824523926
    3. '(tmp' → logprob: -6.964962482452393
    4. '10' → logprob: -10.71496295928955
    5. ' (' → logprob: -10.83996295928955
    6. '(' → logprob: -11.71496295928955
    7. '	tmp' → logprob: -11.71496295928955
    8. ' ' → logprob: -11.83996295928955
    9. '/tmp' → logprob: -12.21496295928955
    10. '100' → logprob: -13.33996295928955

Token 57: ' >' (ID: 1424)
  Prédit: ' >='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.012141567654907703
    2. ' >' → logprob: -5.262141704559326
    3. '>=' → logprob: -5.512141704559326
    4. ' <=' → logprob: -6.512141704559326
    5. ' <' → logprob: -7.262141704559326
    6. ' ' → logprob: -7.887141704559326
    7. '>' → logprob: -8.387141227722168
    8. ' ==' → logprob: -10.762141227722168
    9. ' !=' → logprob: -11.637141227722168
    10. ' ≥' → logprob: -12.012141227722168

Token 58: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.34669142961502075
    2. '9' → logprob: -1.346691370010376
    3. '1' → logprob: -4.221691608428955
    4. '99' → logprob: -4.221691608428955
    5. ' ' → logprob: -6.096691608428955
    6. '10' → logprob: -7.471691608428955
    7. 'ans' → logprob: -7.971691608428955
    8. '999' → logprob: -9.596691131591797
    9. '   ' → logprob: -9.846691131591797
    10. '90' → logprob: -10.159191131591797

Token 59: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.1639520525932312
    2. '9' → logprob: -2.038952112197876
    3. '99' → logprob: -4.538951873779297
    4. '1' → logprob: -4.788951873779297
    5. ' ' → logprob: -7.038951873779297
    6. 'ans' → logprob: -7.163951873779297
    7. '10' → logprob: -8.663951873779297
    8. '   ' → logprob: -9.913951873779297
    9. '999' → logprob: -10.038951873779297
    10. '=' → logprob: -11.101451873779297

Token 60: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.013525117188692093
    2. ':
' → logprob: -5.138525009155273
    3. ' and' → logprob: -5.513525009155273
    4. ' :' → logprob: -6.138525009155273
    5. '   ' → logprob: -7.013525009155273
    6. 'and' → logprob: -8.763525009155273
    7. '    ' → logprob: -9.013525009155273
    8. ' :
' → logprob: -9.013525009155273
    9. '       ' → logprob: -10.138525009155273
    10. ' ' → logprob: -11.638525009155273

Token 61: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.028604969382286072
    2. '   ' → logprob: -4.153604984283447
    3. '<|end|>' → logprob: -5.653604984283447
    4. ' ' → logprob: -6.278604984283447
    5. '    ' → logprob: -6.278604984283447
    6. '
' → logprob: -6.653604984283447
    7. 'n' → logprob: -7.278604984283447
    8. '        
' → logprob: -7.403604984283447
    9. '<|end|>' → logprob: -7.778604984283447
    10. ' 
' → logprob: -8.153604507446289

Token 62: ' tmp' (ID: 8919)
  Prédit: 'tmp'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tmp' (adapté à ' tmp') → logprob: -0.36456966400146484
    2. ' tmp' → logprob: -2.239569664001465
    3. '   ' → logprob: -2.364569664001465
    4. 'if' → logprob: -2.989569664001465
    5. ' if' → logprob: -3.989569664001465
    6. 'ans' → logprob: -4.364569664001465
    7. '       ' → logprob: -4.864569664001465
    8. ' ans' → logprob: -4.864569664001465
    9. 'print' → logprob: -5.989569664001465
    10. 'n' → logprob: -5.989569664001465

Token 63: ' =' (ID: 314)
  Prédit: '*='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*=' → logprob: -0.3143140971660614
    2. ' *=' → logprob: -1.3143141269683838
    3. ' <<=' → logprob: -7.439313888549805
    4. '*' → logprob: -8.564313888549805
    5. '   ' → logprob: -9.189313888549805
    6. '=' → logprob: -9.189313888549805
    7. ' ' → logprob: -10.439313888549805
    8. '```' → logprob: -11.314313888549805
    9. '	' → logprob: -12.064313888549805
    10. ' =' → logprob: -12.189313888549805

Token 64: ' tmp' (ID: 8919)
  Prédit: 'tmp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tmp' → logprob: -0.030062051489949226
    2. ' tmp' → logprob: -3.655061960220337
    3. '10' → logprob: -5.655062198638916
    4. '	tmp' → logprob: -9.655061721801758
    5. '(tmp' → logprob: -10.405061721801758
    6. ' ' → logprob: -10.655061721801758
    7. '100' → logprob: -10.655061721801758
    8. '/tmp' → logprob: -10.780061721801758
    9. 'temp' → logprob: -11.030061721801758
    10. '[tmp' → logprob: -11.280061721801758

Token 65: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.005266838241368532
    2. ' *' → logprob: -5.2552666664123535
    3. '0' → logprob: -10.505267143249512
    4. '10' → logprob: -12.755267143249512
    5. '**' → logprob: -13.255267143249512
    6. ' ' → logprob: -15.255267143249512
    7. '	' → logprob: -15.380267143249512
    8. '*=' → logprob: -15.880267143249512
    9. '1' → logprob: -16.505266189575195
    10. '   ' → logprob: -16.505266189575195

Token 66: ' ' (ID: 220)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.2245539128780365
    2. '5' → logprob: -1.8495539426803589
    3. '2' → logprob: -3.2245538234710693
    4. '20' → logprob: -6.349554061889648
    5. ' ' → logprob: -6.474554061889648
    6. '1' → logprob: -8.474554061889648
    7. '11' → logprob: -9.099554061889648
    8. '6' → logprob: -9.224554061889648
    9. '100' → logprob: -9.474554061889648
    10. '25' → logprob: -10.099554061889648

Token 67: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.4040695130825043
    2. '10' → logprob: -1.1540695428848267
    3. '2' → logprob: -4.404069423675537
    4. '20' → logprob: -5.529069423675537
    5. '100' → logprob: -8.529069900512695
    6. '6' → logprob: -9.029069900512695
    7. '11' → logprob: -9.029069900512695
    8. '50' → logprob: -9.029069900512695
    9. '3' → logprob: -9.279069900512695
    10. ' ' → logprob: -10.404069900512695

Token 68: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 69: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15172114968299866
    2. '       ' → logprob: -2.151721239089966
    3. '
' → logprob: -4.026721000671387
    4. '    
' → logprob: -5.776721000671387
    5. 'print' → logprob: -6.276721000671387
    6. '        
' → logprob: -7.526721000671387
    7. 'ans' → logprob: -8.151721000671387
    8. 'if' → logprob: -8.401721000671387
    9. 'n' → logprob: -9.026721000671387
    10. '    ' → logprob: -9.651721000671387

Token 70: ' ans' (ID: 3345)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' (adapté à ' ans') → logprob: -0.07405945658683777
    2. ' ans' → logprob: -2.69905948638916
    3. '   ' → logprob: -5.69905948638916
    4. 'if' → logprob: -7.94905948638916
    5. 'print' → logprob: -8.82405948638916
    6. '	ans' → logprob: -9.19905948638916
    7. ' if' → logprob: -10.32405948638916
    8. '(ans' → logprob: -10.69905948638916
    9. 'n' → logprob: -10.82405948638916
    10. '    ' → logprob: -10.94905948638916

Token 71: ' =' (ID: 314)
  Prédit: ' +='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.1839030683040619
    2. '+=' → logprob: -2.0589029788970947
    3. ' =' → logprob: -3.8089029788970947
    4. '=' → logprob: -4.058903217315674
    5. ' *=' → logprob: -7.683903217315674
    6. '+' → logprob: -8.558902740478516
    7. '*=' → logprob: -9.683902740478516
    8. ' ' → logprob: -9.808902740478516
    9. ' -=' → logprob: -9.933902740478516
    10. '   ' → logprob: -10.058902740478516

Token 72: ' ans' (ID: 3345)
  Prédit: ' ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ans' → logprob: -0.2663719058036804
    2. 'ans' → logprob: -1.5163719654083252
    3. '(ans' → logprob: -4.516371726989746
    4. ' (' → logprob: -7.391371726989746
    5. ' max' → logprob: -7.641371726989746
    6. 'n' → logprob: -7.766371726989746
    7. ' min' → logprob: -8.266371726989746
    8. 'max' → logprob: -8.391371726989746
    9. ' n' → logprob: -8.516371726989746
    10. ' tmp' → logprob: -8.641371726989746

Token 73: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.19834767282009125
    2. ' +' → logprob: -1.9483476877212524
    3. '*' → logprob: -3.323347568511963
    4. ' *' → logprob: -6.698347568511963
    5. ' ' → logprob: -9.448348045349121
    6. '//' → logprob: -10.573348045349121
    7. '5' → logprob: -11.823348045349121
    8. '-' → logprob: -12.198348045349121
    9. ' //' → logprob: -12.323348045349121
    10. '+n' → logprob: -13.198348045349121

Token 74: ' (' (ID: 350)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.36386626958847046
    2. 'n' → logprob: -1.2388663291931152
    3. ' (' → logprob: -4.863866329193115
    4. '(n' → logprob: -4.988866329193115
    5. '(' → logprob: -7.738866329193115
    6. '1' → logprob: -8.488865852355957
    7. ' ' → logprob: -9.363865852355957
    8. '((' → logprob: -11.863865852355957
    9. '	n' → logprob: -11.863865852355957
    10. 'int' → logprob: -11.988865852355957

Token 75: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.00519189378246665
    2. ' n' → logprob: -5.630191802978516
    3. '(n' → logprob: -6.505191802978516
    4. '(' → logprob: -10.380191802978516
    5. ' (' → logprob: -10.505191802978516
    6. '   ' → logprob: -10.755191802978516
    7. ')n' → logprob: -12.630191802978516
    8. ' ' → logprob: -12.755191802978516
    9. '	n' → logprob: -13.005191802978516
    10. '1' → logprob: -13.755191802978516

Token 76: ' //' (ID: 602)
  Prédit: ' //'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.07715658843517303
    2. '//' → logprob: -2.7021565437316895
    3. ' ' → logprob: -4.9521565437316895
    4. '/tmp' → logprob: -10.202157020568848
    5. ' /' → logprob: -10.577157020568848
    6. ' ' → logprob: -11.577157020568848
    7. '/' → logprob: -11.577157020568848
    8. ')' → logprob: -11.702157020568848
    9. ' )' → logprob: -12.327157020568848
    10. '  ' → logprob: -12.452157020568848

Token 77: ' tmp' (ID: 8919)
  Prédit: 'tmp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tmp' → logprob: -0.01822580024600029
    2. ' tmp' → logprob: -4.01822566986084
    3. '/tmp' → logprob: -10.26822566986084
    4. '(tmp' → logprob: -11.14322566986084
    5. '[tmp' → logprob: -11.51822566986084
    6. '	tmp' → logprob: -12.14322566986084
    7. 'mp' → logprob: -12.39322566986084
    8. ' ' → logprob: -13.26822566986084
    9. '10' → logprob: -13.64322566986084
    10. '$tmp' → logprob: -13.76822566986084

Token 78: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00030829108436591923
    2. ')//' → logprob: -8.8753080368042
    3. ' )' → logprob: -9.3753080368042
    4. ')
' → logprob: -9.7503080368042
    5. ')*' → logprob: -12.0003080368042
    6. '*' → logprob: -12.3753080368042
    7. '//' → logprob: -12.6253080368042
    8. '))' → logprob: -12.8753080368042
    9. ' ' → logprob: -13.3753080368042
    10. '0' → logprob: -13.6253080368042

Token 79: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.10351553559303284
    2. '   ' → logprob: -2.978515625
    3. '
' → logprob: -3.103515625
    4. '<|end|>' → logprob: -7.103515625
    5. '\n' → logprob: -7.603515625
    6. '    
' → logprob: -7.728515625
    7. ' print' → logprob: -7.853515625
    8. '  
' → logprob: -9.103515625
    9. '```' → logprob: -9.728515625
    10. ')' → logprob: -9.853515625

Token 80: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0320349782705307
    2. ')' → logprob: -3.6570348739624023
    3. '<|end|>' → logprob: -6.032034873962402
    4. '   ' → logprob: -6.407034873962402
    5. ' print' → logprob: -7.282034873962402
    6. '\n' → logprob: -7.907034873962402
    7. '
' → logprob: -8.032034873962402
    8. ')
' → logprob: -9.782034873962402
    9. '(print' → logprob: -9.782034873962402
    10. '```' → logprob: -9.782034873962402

Token 81: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -0.0031790214125066996
    2. '(' → logprob: -5.75317907333374
    3. '(answer' → logprob: -14.753178596496582
    4. 'ans' → logprob: -14.878178596496582
    5. '(
' → logprob: -15.503178596496582
    6. ' (' → logprob: -15.878178596496582
    7. '(abs' → logprob: -16.6281795501709
    8. '((' → logprob: -16.7531795501709
    9. '(an' → logprob: -17.6281795501709
    10. '(`' → logprob: -17.7531795501709

Token 82: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.512236498361744e-07
    2. ' )' → logprob: -15.000000953674316
    3. ')
' → logprob: -16.375
    4. '))' → logprob: -17.25
    5. ')`' → logprob: -18.375
    6. ')#' → logprob: -18.875
    7. '')' → logprob: -19.0
    8. '）' → logprob: -19.125
    9. '`)' → logprob: -19.25
    10. '```' → logprob: -19.75


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 80
Tokens correctement prédits (1ère position, stricte): 24
Tokens correctement prédits (1ère position, avec adaptation): 28
Tokens correctement prédits (top 10): 70
Précision stricte (1ère position): 30.00%
Précision adaptée (1ère position): 35.00%
Précision (top 10): 87.50%
================================================================================
