================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:09:15
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
q = n // 2
r = n % 2
s = q * (q + r)
print(s)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00042768914136104286
    2. ''' → logprob: -8.62542724609375
    3. '('' → logprob: -9.37542724609375
    4. '(n' → logprob: -9.87542724609375
    5. '```' → logprob: -10.37542724609375
    6. '`' → logprob: -10.75042724609375
    7. '("("' → logprob: -11.12542724609375
    8. '(
' → logprob: -11.12542724609375
    9. ')' → logprob: -11.75042724609375
    10. '()' → logprob: -12.25042724609375

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.11869344860315323
    2. ')' → logprob: -2.2436933517456055
    3. '()' → logprob: -5.3686933517456055
    4. '())' → logprob: -7.4936933517456055
    5. '(
' → logprob: -8.243693351745605
    6. '```' → logprob: -9.993693351745605
    7. '(

' → logprob: -10.368693351745605
    8. '('' → logprob: -10.493693351745605
    9. ''' → logprob: -10.618693351745605
    10. '(n' → logprob: -10.868693351745605

Token 5: 'q' (ID: 80)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.7040315866470337
    2. 'if' → logprob: -1.4540315866470337
    3. 'for' → logprob: -2.329031467437744
    4. 's' → logprob: -2.454031467437744
    5. 'f' → logprob: -4.329031467437744
    6. ' ' → logprob: -4.454031467437744
    7. 'x' → logprob: -4.829031467437744
    8. ')' → logprob: -4.954031467437744
    9. 'a' → logprob: -4.954031467437744
    10. ''' → logprob: -5.079031467437744

Token 6: ' =' (ID: 314)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.08439858257770538
    2. ' =' → logprob: -2.8343985080718994
    3. '=' → logprob: -4.5843987464904785
    4. 'uer' → logprob: -5.2093987464904785
    5. 'ue' → logprob: -5.4593987464904785
    6. '.' → logprob: -7.2093987464904785
    7. ' ' → logprob: -8.33439826965332
    8. 'uir' → logprob: -8.45939826965332
    9. 'ual' → logprob: -9.08439826965332
    10. '[' → logprob: -9.33439826965332

Token 7: ' n' (ID: 297)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.6246616840362549
    2. 'int' → logprob: -1.6246616840362549
    3. 'n' → logprob: -2.124661684036255
    4. ' []' → logprob: -2.249661684036255
    5. '0' → logprob: -4.124661445617676
    6. ' int' → logprob: -4.499661445617676
    7. ' n' → logprob: -4.499661445617676
    8. 'input' → logprob: -6.124661445617676
    9. '[int' → logprob: -7.249661445617676
    10. ' ' → logprob: -7.499661445617676

Token 8: ' //' (ID: 602)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '-' → logprob: -0.8386806845664978
    2. '+' → logprob: -1.7136807441711426
    3. ' ' → logprob: -1.9636807441711426
    4. '%' → logprob: -2.0886807441711426
    5. ''' → logprob: -3.3386807441711426
    6. '*' → logprob: -4.338680744171143
    7. '```' → logprob: -4.338680744171143
    8. ')' → logprob: -4.463680744171143
    9. '>' → logprob: -4.838680744171143
    10. '=' → logprob: -5.338680744171143

Token 9: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.022839723154902458
    2. ' ' → logprob: -4.022839546203613
    3. '10' → logprob: -5.647839546203613
    4. '3' → logprob: -7.522839546203613
    5. '5' → logprob: -7.897839546203613
    6. '4' → logprob: -8.522839546203613
    7. '100' → logprob: -11.022839546203613
    8. '1' → logprob: -11.397839546203613
    9. '7' → logprob: -12.022839546203613
    10. '6' → logprob: -13.522839546203613

Token 10: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.06984594464302063
    2. '10' → logprob: -2.8198459148406982
    3. '3' → logprob: -5.444846153259277
    4. '5' → logprob: -5.944846153259277
    5. '4' → logprob: -7.819846153259277
    6. '7' → logprob: -8.694846153259277
    7. '1' → logprob: -8.819846153259277
    8. '100' → logprob: -9.319846153259277
    9. ' ' → logprob: -10.819846153259277
    10. 'q' → logprob: -11.444846153259277

Token 11: '
' (ID: 198)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.010235155932605267
    2. '+
' → logprob: -5.51023530960083
    3. '*' → logprob: -6.88523530960083
    4. ' ' → logprob: -7.01023530960083
    5. '
' → logprob: -7.38523530960083
    6. ' +' → logprob: -7.51023530960083
    7. '\n' → logprob: -7.51023530960083
    8. 'if' → logprob: -7.76023530960083
    9. '\' → logprob: -7.76023530960083
    10. '%' → logprob: -7.88523530960083

Token 12: 'r' (ID: 81)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.4695008099079132
    2. '+' → logprob: -1.9695007801055908
    3. 'r' → logprob: -2.719500780105591
    4. 'print' → logprob: -2.719500780105591
    5. ' if' → logprob: -2.969500780105591
    6. 'n' → logprob: -4.71950101852417
    7. 'for' → logprob: -4.84450101852417
    8. 'i' → logprob: -4.84450101852417
    9. '*' → logprob: -5.46950101852417
    10. ' ' → logprob: -5.71950101852417

Token 13: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.07487482577562332
    2. '=' → logprob: -2.9498748779296875
    3. ' ' → logprob: -3.9498748779296875
    4. '  ' → logprob: -8.949874877929688
    5. '_' → logprob: -9.074874877929688
    6. 'e' → logprob: -10.074874877929688
    7. 's' → logprob: -10.199874877929688
    8. ')' → logprob: -10.324874877929688
    9. ',' → logprob: -10.949874877929688
    10. '```' → logprob: -11.199874877929688

Token 14: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.20142892003059387
    2. 'n' → logprob: -1.7014288902282715
    3. '0' → logprob: -12.07642936706543
    4. ' ' → logprob: -12.32642936706543
    5. '`' → logprob: -13.95142936706543
    6. '2' → logprob: -14.45142936706543
    7. ' ' → logprob: -14.57642936706543
    8. '1' → logprob: -14.82642936706543
    9. '	n' → logprob: -15.07642936706543
    10. ')' → logprob: -15.07642936706543

Token 15: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.38922417163848877
    2. '%' → logprob: -1.1392241716384888
    3. ' ' → logprob: -6.389224052429199
    4. ')' → logprob: -8.5142240524292
    5. '```' → logprob: -9.8892240524292
    6. '_' → logprob: -10.1392240524292
    7. ''' → logprob: -10.1392240524292
    8. '`' → logprob: -10.1392240524292
    9. '-' → logprob: -10.2642240524292
    10. '[' → logprob: -10.3892240524292

Token 16: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.012516596354544163
    2. ' ' → logprob: -4.387516498565674
    3. '10' → logprob: -12.637516975402832
    4. 'q' → logprob: -13.637516975402832
    5. '1' → logprob: -14.512516975402832
    6. '3' → logprob: -14.887516975402832
    7. '4' → logprob: -14.887516975402832
    8. '6' → logprob: -15.762516975402832
    9. ' q' → logprob: -16.012516021728516
    10. '26' → logprob: -16.137516021728516

Token 17: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -1.282920129597187e-05
    2. ' ' → logprob: -11.500012397766113
    3. 'q' → logprob: -13.875012397766113
    4. '10' → logprob: -14.625012397766113
    5. '3' → logprob: -14.750012397766113
    6. '1' → logprob: -15.125012397766113
    7. '5' → logprob: -16.00001335144043
    8. '```' → logprob: -16.12501335144043
    9. '4' → logprob: -16.50001335144043
    10. '6' → logprob: -16.87501335144043

Token 18: '
' (ID: 198)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.5806651711463928
    2. '
' → logprob: -1.080665111541748
    3. '\' → logprob: -2.830665111541748
    4. '+' → logprob: -4.330665111541748
    5. 'n' → logprob: -5.205665111541748
    6. '*' → logprob: -5.330665111541748
    7. ' 
' → logprob: -5.580665111541748
    8. 'i' → logprob: -5.955665111541748
    9. '' → logprob: -6.080665111541748
    10. ' ' → logprob: -6.330665111541748

Token 19: 's' (ID: 82)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.19052927196025848
    2. 'i' → logprob: -2.3155293464660645
    3. 'print' → logprob: -3.8155293464660645
    4. 'p' → logprob: -4.4405293464660645
    5. ' if' → logprob: -4.5655293464660645
    6. '
' → logprob: -4.5655293464660645
    7. 's' → logprob: -4.9405293464660645
    8. ' 
' → logprob: -5.5655293464660645
    9. '\n' → logprob: -6.3155293464660645
    10. 'n' → logprob: -6.6905293464660645

Token 20: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6410300731658936
    2. ' =' → logprob: -1.3910300731658936
    3. '+' → logprob: -1.7660300731658936
    4. ' ' → logprob: -4.141030311584473
    5. ' +' → logprob: -4.266030311584473
    6. ' +=' → logprob: -4.391030311584473
    7. '+=' → logprob: -5.266030311584473
    8. '_' → logprob: -5.516030311584473
    9. 'um' → logprob: -7.516030311584473
    10. ',' → logprob: -7.891030311584473

Token 21: ' q' (ID: 2335)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.20654679834842682
    2. ' q' → logprob: -1.7065467834472656
    3. '0' → logprob: -6.456546783447266
    4. 'n' → logprob: -6.831546783447266
    5. ' n' → logprob: -6.831546783447266
    6. ' (' → logprob: -8.206546783447266
    7. ' ' → logprob: -8.206546783447266
    8. '"' → logprob: -8.581546783447266
    9. '2' → logprob: -8.831546783447266
    10. '(q' → logprob: -9.206546783447266

Token 22: ' *' (ID: 425)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.10882213711738586
    2. ' +' → logprob: -2.6088221073150635
    3. '*' → logprob: -3.7338221073150635
    4. ' *' → logprob: -6.483822345733643
    5. '-' → logprob: -6.858822345733643
    6. ' ' → logprob: -6.858822345733643
    7. '+
' → logprob: -7.858822345733643
    8. '>' → logprob: -8.483821868896484
    9. ' +
' → logprob: -8.483821868896484
    10. ')' → logprob: -9.108821868896484

Token 23: ' (' (ID: 350)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '2' → logprob: -0.04641805589199066
    2. '4' → logprob: -4.421418190002441
    3. '3' → logprob: -4.421418190002441
    4. '5' → logprob: -5.546418190002441
    5. '10' → logprob: -5.796418190002441
    6. ''*' → logprob: -5.796418190002441
    7. '"*' → logprob: -6.046418190002441
    8. 'q' → logprob: -6.171418190002441
    9. '"' → logprob: -6.671418190002441
    10. '1' → logprob: -7.171418190002441

Token 24: 'q' (ID: 80)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.82085120677948
    2. 'q' → logprob: -0.82085120677948
    3. '10' → logprob: -3.0708513259887695
    4. '3' → logprob: -4.3208513259887695
    5. '4' → logprob: -4.5708513259887695
    6. '5' → logprob: -4.6958513259887695
    7. '1' → logprob: -4.9458513259887695
    8. 'n' → logprob: -5.1958513259887695
    9. '7' → logprob: -5.3208513259887695
    10. '9' → logprob: -5.5708513259887695

Token 25: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.10032065212726593
    2. ' +' → logprob: -2.35032057762146
    3. '-' → logprob: -9.975320816040039
    4. '+)' → logprob: -10.600320816040039
    5. ' -' → logprob: -11.350320816040039
    6. '1' → logprob: -11.850320816040039
    7. '+r' → logprob: -11.850320816040039
    8. '+
' → logprob: -12.975320816040039
    9. ')' → logprob: -13.100320816040039
    10. '+s' → logprob: -13.725320816040039

Token 26: ' r' (ID: 428)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0007819918682798743
    2. ')' → logprob: -7.500782012939453
    3. ' ' → logprob: -8.875782012939453
    4. 'r' → logprob: -10.500782012939453
    5. '2' → logprob: -10.750782012939453
    6. '`' → logprob: -11.375782012939453
    7. '```' → logprob: -11.750782012939453
    8. '<|end|>' → logprob: -12.500782012939453
    9. 'q' → logprob: -13.000782012939453
    10. ' r' → logprob: -13.500782012939453

Token 27: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0025743518490344286
    2. ' )' → logprob: -6.377574443817139
    3. '`)' → logprob: -7.502574443817139
    4. '')' → logprob: -9.37757396697998
    5. '")' → logprob: -10.12757396697998
    6. ')`' → logprob: -10.75257396697998
    7. '```' → logprob: -10.87757396697998
    8. ')**' → logprob: -11.00257396697998
    9. '*)' → logprob: -11.12757396697998
    10. ')
' → logprob: -11.12757396697998

Token 28: 'print' (ID: 1598)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.03553713858127594
    2. '*' → logprob: -4.035537242889404
    3. '\n' → logprob: -5.035537242889404
    4. '\' → logprob: -5.660537242889404
    5. '+
' → logprob: -6.285537242889404
    6. '#' → logprob: -6.660537242889404
    7. '**' → logprob: -7.285537242889404
    8. ' ' → logprob: -7.535537242889404
    9. ')' → logprob: -7.660537242889404
    10. '```' → logprob: -7.785537242889404

Token 29: '(s' (ID: 1858)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.08955154567956924
    2. '(s' → logprob: -2.4645514488220215
    3. 's' → logprob: -8.46455192565918
    4. '('' → logprob: -8.71455192565918
    5. '("("' → logprob: -9.21455192565918
    6. '()' → logprob: -9.46455192565918
    7. '(q' → logprob: -10.58955192565918
    8. '((' → logprob: -11.08955192565918
    9. '(n' → logprob: -12.21455192565918
    10. '(f' → logprob: -12.96455192565918

Token 30: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.2729995988775045e-06
    2. '))' → logprob: -12.250006675720215
    3. ' )' → logprob: -14.500006675720215
    4. '`)' → logprob: -14.750006675720215
    5. ')`' → logprob: -15.375006675720215
    6. '')' → logprob: -15.750006675720215
    7. '*' → logprob: -16.7500057220459
    8. ')
' → logprob: -17.5000057220459
    9. ')))' → logprob: -17.7500057220459
    10. '）' → logprob: -17.8750057220459


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 28
Tokens correctement prédits (1ère position, stricte): 6
Tokens correctement prédits (1ère position, avec adaptation): 6
Tokens correctement prédits (top 10): 22
Précision stricte (1ère position): 21.43%
Précision adaptée (1ère position): 21.43%
Précision (top 10): 78.57%
================================================================================
