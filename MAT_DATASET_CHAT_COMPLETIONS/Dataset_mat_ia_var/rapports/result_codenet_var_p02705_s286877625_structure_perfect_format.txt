================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:17:21
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import math

R = int(input())
print(R * 2.0 * math.pi)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' math' (ID: 13324)
  → Token d'amorce (pas de prédiction)

Token 2: '

' (ID: 279)
  → Token d'amorce (pas de prédiction)

Token 3: 'R' (ID: 49)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0005667338264174759
    2. '\' → logprob: -9.000566482543945
    3. 'import' → logprob: -9.125566482543945
    4. '\n' → logprob: -9.125566482543945
    5. '```' → logprob: -9.375566482543945
    6. '<|end|>' → logprob: -10.875566482543945
    7. 'def' → logprob: -11.375566482543945
    8. '#' → logprob: -11.500566482543945
    9. '*' → logprob: -11.625566482543945
    10. 'a' → logprob: -11.750566482543945

Token 4: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -1.1161408424377441
    2. '(' → logprob: -1.2411408424377441
    3. 'a' → logprob: -1.3661408424377441
    4. 'A' → logprob: -3.366140842437744
    5. ')' → logprob: -3.616140842437744
    6. '_' → logprob: -4.241140842437744
    7. '=' → logprob: -4.491140842437744
    8. 'E' → logprob: -4.616140842437744
    9. ',' → logprob: -4.741140842437744
    10. 'O' → logprob: -5.116140842437744

Token 5: ' int' (ID: 677)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.017047064378857613
    2. ' math' → logprob: -4.642046928405762
    3. '5' → logprob: -5.767046928405762
    4. '10' → logprob: -6.142046928405762
    5. 'math' → logprob: -6.767046928405762
    6. '3' → logprob: -8.017046928405762
    7. '2' → logprob: -8.892046928405762
    8. '100' → logprob: -9.142046928405762
    9. ' float' → logprob: -9.892046928405762
    10. '1' → logprob: -10.017046928405762

Token 6: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0005044196150265634
    2. '('' → logprob: -8.500504493713379
    3. ''' → logprob: -9.625504493713379
    4. ')' → logprob: -9.750504493713379
    5. '```' → logprob: -9.750504493713379
    6. '[' → logprob: -10.875504493713379
    7. ' (' → logprob: -11.375504493713379
    8. '(R' → logprob: -11.375504493713379
    9. 'R' → logprob: -11.500504493713379
    10. '`' → logprob: -11.500504493713379

Token 7: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.02520599775016308
    2. ')' → logprob: -3.7752060890197754
    3. '('' → logprob: -7.525206089019775
    4. '()' → logprob: -7.900206089019775
    5. ''' → logprob: -8.150205612182617
    6. '(
' → logprob: -8.525205612182617
    7. '("("' → logprob: -8.900205612182617
    8. '`' → logprob: -9.525205612182617
    9. '```' → logprob: -9.775205612182617
    10. '")' → logprob: -9.775205612182617

Token 8: 'print' (ID: 1598)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.7898491621017456
    2. 'for' → logprob: -1.9148491621017456
    3. 'area' → logprob: -1.9148491621017456
    4. ')' → logprob: -2.039849281311035
    5. 'result' → logprob: -2.289849281311035
    6. 'r' → logprob: -2.664849281311035
    7. 'factor' → logprob: -2.914849281311035
    8. '*' → logprob: -3.289849281311035
    9. 'd' → logprob: -3.914849281311035
    10. 'radius' → logprob: -4.039849281311035

Token 9: '(R' (ID: 4092)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0006115250871516764
    2. '('' → logprob: -8.250611305236816
    3. '("("' → logprob: -8.375611305236816
    4. '(math' → logprob: -9.125611305236816
    5. '(
' → logprob: -13.250611305236816
    6. '(f' → logprob: -13.750611305236816
    7. '(round' → logprob: -13.875611305236816
    8. ' (' → logprob: -14.000611305236816
    9. '((' → logprob: -14.125611305236816
    10. '("""' → logprob: -14.125611305236816

Token 10: ' *' (ID: 425)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08405876904726028
    2. '*' → logprob: -2.5840587615966797
    3. ' *' → logprob: -6.33405876159668
    4. '**' → logprob: -6.58405876159668
    5. ',' → logprob: -7.33405876159668
    6. '))' → logprob: -7.58405876159668
    7. ')**' → logprob: -8.20905876159668
    8. '*)' → logprob: -8.33405876159668
    9. ')*' → logprob: -9.08405876159668
    10. ' )' → logprob: -9.33405876159668

Token 11: ' ' (ID: 220)
  Prédit: ' R'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' R' → logprob: -0.21211333572864532
    2. 'R' → logprob: -2.087113380432129
    3. '2' → logprob: -3.462113380432129
    4. ' math' → logprob: -4.087113380432129
    5. ' ' → logprob: -4.212113380432129
    6. 'math' → logprob: -5.712113380432129
    7. '*' → logprob: -7.337113380432129
    8. ')' → logprob: -10.212113380432129
    9. ' *' → logprob: -10.337113380432129
    10. '3' → logprob: -10.712113380432129

Token 12: '2' (ID: 17)
  Prédit: 'R'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'R' → logprob: -0.4021841287612915
    2. '2' → logprob: -1.5271841287612915
    3. 'math' → logprob: -2.902184009552002
    4. ' R' → logprob: -3.027184009552002
    5. ' math' → logprob: -4.902184009552002
    6. ' ' → logprob: -6.277184009552002
    7. '*' → logprob: -7.027184009552002
    8. '3' → logprob: -8.27718448638916
    9. '**' → logprob: -10.02718448638916
    10. ')' → logprob: -10.52718448638916

Token 13: '.' (ID: 13)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0005375436157919466
    2. '*' → logprob: -8.000537872314453
    3. '*)' → logprob: -8.875537872314453
    4. '))' → logprob: -10.250537872314453
    5. '`)' → logprob: -11.375537872314453
    6. ' )' → logprob: -11.875537872314453
    7. '```' → logprob: -13.500537872314453
    8. ')))' → logprob: -13.625537872314453
    9. ')*' → logprob: -13.875537872314453
    10. '')' → logprob: -14.000537872314453

Token 14: '0' (ID: 15)
  Prédit: 'pi'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pi' → logprob: -0.7926287651062012
    2. 'math' → logprob: -1.0426287651062012
    3. ')' → logprob: -1.7926287651062012
    4. ' math' → logprob: -3.917628765106201
    5. '.pi' → logprob: -5.917628765106201
    6. ' pi' → logprob: -6.292628765106201
    7. '*pi' → logprob: -6.667628765106201
    8. 'import' → logprob: -7.917628765106201
    9. '*' → logprob: -8.04262924194336
    10. 'cmath' → logprob: -8.29262924194336

Token 15: ' *' (ID: 425)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0006303519476205111
    2. '*' → logprob: -7.6256303787231445
    3. '))' → logprob: -9.250630378723145
    4. '*)' → logprob: -10.750630378723145
    5. ' )' → logprob: -11.250630378723145
    6. ')))' → logprob: -12.375630378723145
    7. ' *' → logprob: -12.875630378723145
    8. ')*' → logprob: -13.500630378723145
    9. '*Math' → logprob: -14.625630378723145
    10. ')**' → logprob: -14.875630378723145

Token 16: ' math' (ID: 13324)
  Prédit: 'math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'math' → logprob: -0.07889176905155182
    2. ' math' → logprob: -2.5788917541503906
    3. '(math' → logprob: -13.70389175415039
    4. '3' → logprob: -15.45389175415039
    5. ' ' → logprob: -16.20389175415039
    6. '\xf0\x9d' → logprob: -16.32889175415039
    7. 'pi' → logprob: -16.32889175415039
    8. 'ma' → logprob: -16.45389175415039
    9. 'cmath' → logprob: -16.70389175415039
    10. '.math' → logprob: -16.82889175415039

Token 17: '.pi' (ID: 55497)
  Prédit: '.pi'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.pi' → logprob: -0.0011729635298252106
    2. '.' → logprob: -6.75117301940918
    3. '.sqrt' → logprob: -13.62617301940918
    4. '.PI' → logprob: -13.75117301940918
    5. '.sin' → logprob: -15.87617301940918
    6. '.cos' → logprob: -16.00117301940918
    7. '.p' → logprob: -16.62617301940918
    8. ' .' → logprob: -17.00117301940918
    9. '.atan' → logprob: -18.00117301940918
    10. '.circle' → logprob: -18.75117301940918

Token 18: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.35706390615087e-05
    2. '))' → logprob: -10.375033378601074
    3. '`)' → logprob: -14.000033378601074
    4. ' )' → logprob: -14.250033378601074
    5. '')' → logprob: -14.875033378601074
    6. ')))' → logprob: -16.37503433227539
    7. ')`' → logprob: -16.37503433227539
    8. '*' → logprob: -16.62503433227539
    9. ')**' → logprob: -16.75003433227539
    10. '*)' → logprob: -16.87503433227539


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 16
Tokens correctement prédits (1ère position, stricte): 2
Tokens correctement prédits (1ère position, avec adaptation): 2
Tokens correctement prédits (top 10): 7
Précision stricte (1ère position): 12.50%
Précision adaptée (1ère position): 12.50%
Précision (top 10): 43.75%
================================================================================
