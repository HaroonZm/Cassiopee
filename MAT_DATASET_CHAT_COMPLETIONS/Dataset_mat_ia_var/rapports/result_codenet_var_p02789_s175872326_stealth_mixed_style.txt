================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:28:51
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N, M = (int(x) for x in input().split())

def check(a, b):
    return "Yes" if a == b else "No"

result = None
if N == M:
    result = check(N, M)
else:
    def f(): print("No")
    f()
if result:
    print(result)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' M' (ID: 391)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.17474547028541565
    2. ',' → logprob: -1.9247454404830933
    3. ' =' → logprob: -4.299745559692383
    4. '```' → logprob: -7.799745559692383
    5. ';' → logprob: -8.799745559692383
    6. ')' → logprob: -9.299745559692383
    7. '.' → logprob: -10.049745559692383
    8. '#' → logprob: -10.549745559692383
    9. '[' → logprob: -10.674745559692383
    10. ',
' → logprob: -11.049745559692383

Token 4: ' (' (ID: 350)
  Prédit: ' map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.14698144793510437
    2. 'map' → logprob: -2.0219814777374268
    3. ' ' → logprob: -6.646981239318848
    4. ' input' → logprob: -6.646981239318848
    5. '10' → logprob: -7.146981239318848
    6. 'input' → logprob: -7.646981239318848
    7. ' int' → logprob: -8.521981239318848
    8. 'int' → logprob: -9.396981239318848
    9. ' list' → logprob: -9.896981239318848
    10. '0' → logprob: -10.146981239318848

Token 5: 'int' (ID: 491)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.5214269757270813
    2. 'int' → logprob: -1.0214269161224365
    3. '10' → logprob: -4.146427154541016
    4. '100' → logprob: -4.646427154541016
    5. ' map' → logprob: -4.896427154541016
    6. ')' → logprob: -5.521427154541016
    7. 'input' → logprob: -5.646427154541016
    8. '5' → logprob: -6.271427154541016
    9. '50' → logprob: -6.646427154541016
    10. ' int' → logprob: -7.646427154541016

Token 6: '(x' (ID: 4061)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6870537400245667
    2. '(input' → logprob: -0.8120537400245667
    3. '(' → logprob: -3.437053680419922
    4. ',' → logprob: -4.437053680419922
    5. '()' → logprob: -5.687053680419922
    6. ',)' → logprob: -6.312053680419922
    7. 'input' → logprob: -7.062053680419922
    8. '(x' → logprob: -7.312053680419922
    9. ' )' → logprob: -7.437053680419922
    10. '())' → logprob: -8.312053680419922

Token 7: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1981719732284546
    2. '(input' → logprob: -2.073172092437744
    3. '(x' → logprob: -3.698172092437744
    4. '(token' → logprob: -3.948172092437744
    5. '(i' → logprob: -5.823172092437744
    6. '(' → logprob: -6.448172092437744
    7. 'input' → logprob: -6.573172092437744
    8. '(s' → logprob: -7.198172092437744
    9. 'token' → logprob: -7.698172092437744
    10. '(code' → logprob: -8.073171615600586

Token 8: ' for' (ID: 395)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5330679416656494
    2. ',' → logprob: -1.5330679416656494
    3. '(x' → logprob: -2.0330679416656494
    4. '(input' → logprob: -4.28306770324707
    5. '<|end|>' → logprob: -4.40806770324707
    6. '(token' → logprob: -4.65806770324707
    7. 'for' → logprob: -4.90806770324707
    8. '(' → logprob: -5.40806770324707
    9. '[' → logprob: -5.78306770324707
    10. 'input' → logprob: -5.90806770324707

Token 9: ' x' (ID: 1215)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.4737001657485962
    2. ' x' → logprob: -1.5987001657485962
    3. 'input' → logprob: -2.8487000465393066
    4. '_' → logprob: -2.9737000465393066
    5. ' user' → logprob: -3.8487000465393066
    6. ' line' → logprob: -3.8487000465393066
    7. 'user' → logprob: -5.473700046539307
    8. 'x' → logprob: -5.973700046539307
    9. ' ' → logprob: -5.973700046539307
    10. ' ' → logprob: -5.973700046539307

Token 10: ' in' (ID: 306)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.3900911509990692
    2. 'input' → logprob: -1.1400911808013916
    3. ' in' → logprob: -6.0150909423828125
    4. '=input' → logprob: -8.140090942382812
    5. '(input' → logprob: -8.515090942382812
    6. ')' → logprob: -8.765090942382812
    7. 'in' → logprob: -9.765090942382812
    8. ' range' → logprob: -11.390090942382812
    9. 'range' → logprob: -11.640090942382812
    10. '<input' → logprob: -11.890090942382812

Token 11: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.6931501030921936
    2. ' input' → logprob: -0.6931501030921936
    3. '(input' → logprob: -13.568150520324707
    4. '=input' → logprob: -15.068150520324707
    5. ' ' → logprob: -15.193150520324707
    6. '<input' → logprob: -15.193150520324707
    7. '```' → logprob: -15.568150520324707
    8. ')' → logprob: -15.693150520324707
    9. '[input' → logprob: -16.06814956665039
    10. '	input' → logprob: -16.81814956665039

Token 12: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.5296530723571777
    2. '()' → logprob: -0.9046530723571777
    3. '(' → logprob: -6.029653072357178
    4. ')' → logprob: -6.404653072357178
    5. '().' → logprob: -6.654653072357178
    6. '('' → logprob: -7.404653072357178
    7. '());' → logprob: -9.154653549194336
    8. '();)' → logprob: -9.154653549194336
    9. '(""))' → logprob: -9.279653549194336
    10. ' ())' → logprob: -10.279653549194336

Token 13: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0005626845522783697
    2. 'strip' → logprob: -7.50056266784668
    3. ' split' → logprob: -12.12556266784668
    4. 'rstrip' → logprob: -12.50056266784668
    5. 'read' → logprob: -15.12556266784668
    6. '(split' → logprob: -15.62556266784668
    7. 'replace' → logprob: -17.62556266784668
    8. ')' → logprob: -17.75056266784668
    9. 'plit' → logprob: -18.12556266784668
    10. '_split' → logprob: -18.25056266784668

Token 14: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.009947206825017929
    2. '()' → logprob: -5.009947299957275
    3. ')' → logprob: -5.759947299957275
    4. '(' → logprob: -10.384946823120117
    5. ' ())' → logprob: -10.884946823120117
    6. '()))' → logprob: -11.759946823120117
    7. '()]' → logprob: -12.509946823120117
    8. '()),' → logprob: -12.759946823120117
    9. '();)' → logprob: -12.884946823120117
    10. '`)' → logprob: -13.634946823120117

Token 15: 'def' (ID: 1314)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.22244393825531
    2. '#' → logprob: -1.34744393825531
    3. 'for' → logprob: -2.0974440574645996
    4. ':' → logprob: -2.4724440574645996
    5. '<|end|>' → logprob: -2.9724440574645996
    6. ')' → logprob: -3.0974440574645996
    7. ' ' → logprob: -3.5974440574645996
    8. ',' → logprob: -3.7224440574645996
    9. '```' → logprob: -4.2224440574646
    10. '.' → logprob: -4.3474440574646

Token 16: ' check' (ID: 2371)
  Prédit: ' solution'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' solution' → logprob: -1.134122371673584
    2. ' main' → logprob: -1.634122371673584
    3. ' solve' → logprob: -1.884122371673584
    4. ' ' → logprob: -2.509122371673584
    5. ' dfs' → logprob: -2.759122371673584
    6. ' process' → logprob: -2.884122371673584
    7. ' factorial' → logprob: -3.134122371673584
    8. ' space' → logprob: -3.884122371673584
    9. ' my' → logprob: -4.134122371673584
    10. ' calculate' → logprob: -5.134122371673584

Token 17: '(a' (ID: 6271)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.39926275610923767
    2. '(' → logprob: -1.14926278591156
    3. '_parent' → logprob: -5.52426290512085
    4. '_valid' → logprob: -6.27426290512085
    5. '_space' → logprob: -6.39926290512085
    6. '_pal' → logprob: -8.024262428283691
    7. '_(' → logprob: -8.149262428283691
    8. '_balance' → logprob: -8.149262428283691
    9. '_equal' → logprob: -8.524262428283691
    10. '_size' → logprob: -8.774262428283691

Token 18: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4424870014190674
    2. '):' → logprob: -1.5674870014190674
    3. ',' → logprob: -2.1924870014190674
    4. '[' → logprob: -3.5674870014190674
    5. '_' → logprob: -5.567486763000488
    6. ' ,' → logprob: -6.942486763000488
    7. ' )' → logprob: -7.067486763000488
    8. ' ):' → logprob: -7.692486763000488
    9. 'a' → logprob: -8.192486763000488
    10. ')_' → logprob: -8.317486763000488

Token 19: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.2274651974439621
    2. ' b' → logprob: -1.6024651527404785
    3. 'k' → logprob: -7.4774651527404785
    4. ' k' → logprob: -8.352465629577637
    5. 'n' → logprob: -8.727465629577637
    6. 'l' → logprob: -9.102465629577637
    7. ' n' → logprob: -9.414965629577637
    8. 'm' → logprob: -9.477465629577637
    9. ' l' → logprob: -9.727465629577637
    10. 'x' → logprob: -9.789965629577637

Token 20: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.023597868159413338
    2. ')' → logprob: -3.7735979557037354
    3. ',' → logprob: -8.148597717285156
    4. ':' → logprob: -10.398597717285156
    5. '):
' → logprob: -12.023597717285156
    6. ')):' → logprob: -12.273597717285156
    7. ' ):' → logprob: -12.523597717285156
    8. ''):' → logprob: -13.023597717285156
    9. '**' → logprob: -13.523597717285156
    10. '[]):' → logprob: -13.898597717285156

Token 21: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.005708593409508467
    2. '   ' → logprob: -5.380708694458008
    3. ':
' → logprob: -7.880708694458008
    4. ':return' → logprob: -8.005708694458008
    5. '):' → logprob: -9.005708694458008
    6. ' ' → logprob: -9.505708694458008
    7. ' :' → logprob: -10.130708694458008
    8. '  ' → logprob: -10.880708694458008
    9. '    ' → logprob: -11.130708694458008
    10. ''s' → logprob: -11.130708694458008

Token 22: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1386442631483078
    2. ' return' → logprob: -2.638644218444824
    3. '       ' → logprob: -3.388644218444824
    4. ' if' → logprob: -4.888644218444824
    5. 'return' (adapté à ' return') → logprob: -5.138644218444824
    6. '    ' → logprob: -5.513644218444824
    7. '```' → logprob: -5.888644218444824
    8. ' for' → logprob: -6.638644218444824
    9. ' ' → logprob: -6.638644218444824
    10. ' 
' → logprob: -8.263644218444824

Token 23: ' "' (ID: 392)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.499227911233902
    2. 'a' → logprob: -0.9992278814315796
    3. ' abs' → logprob: -4.499228000640869
    4. ' (' → logprob: -4.999228000640869
    5. ' ' → logprob: -6.124228000640869
    6. '(a' → logprob: -6.374228000640869
    7. 'abs' → logprob: -6.999228000640869
    8. ' max' → logprob: -7.499228000640869
    9. '(' → logprob: -7.624228000640869
    10. ' all' → logprob: -8.249227523803711

Token 24: 'Yes' (ID: 13022)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.13109934329986572
    2. 'abs' → logprob: -2.881099224090576
    3. '"' → logprob: -3.631099224090576
    4. 'True' → logprob: -4.131099224090576
    5. ' a' → logprob: -4.631099224090576
    6. '(a' → logprob: -5.881099224090576
    7. '"a' → logprob: -6.256099224090576
    8. 'False' → logprob: -6.381099224090576
    9. ' abs' → logprob: -6.381099224090576
    10. ' True' → logprob: -6.881099224090576

Token 25: '"' (ID: 1)
  Prédit: '"'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0008378617349080741
    2. '\n' → logprob: -8.125838279724121
    3. ' if' → logprob: -8.125838279724121
    4. ' "' → logprob: -8.750838279724121
    5. '")' → logprob: -10.000838279724121
    6. 'if' → logprob: -10.625838279724121
    7. ' ' → logprob: -12.500838279724121
    8. '```' → logprob: -12.500838279724121
    9. ')' → logprob: -13.000838279724121
    10. ''' → logprob: -13.750838279724121

Token 26: ' if' (ID: 538)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 27: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.13737893104553223
    2. 'a' → logprob: -2.1373789310455322
    3. ' (' → logprob: -5.387378692626953
    4. ' abs' → logprob: -5.887378692626953
    5. ' b' → logprob: -6.887378692626953
    6. '(a' → logprob: -6.887378692626953
    7. ' ' → logprob: -8.262378692626953
    8. ' all' → logprob: -8.512378692626953
    9. 'b' → logprob: -8.887378692626953
    10. '(' → logprob: -9.387378692626953

Token 28: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.5999845266342163
    2. ' ==' → logprob: -1.3499845266342163
    3. '>' → logprob: -2.724984645843506
    4. ' >' → logprob: -3.599984645843506
    5. '>=' → logprob: -3.599984645843506
    6. '<=' → logprob: -3.724984645843506
    7. ' <=' → logprob: -4.224984645843506
    8. '%' → logprob: -4.349984645843506
    9. ' >=' → logprob: -4.349984645843506
    10. ' %' → logprob: -6.099984645843506

Token 29: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.4741087257862091
    2. ' b' → logprob: -0.9741086959838867
    3. ' ' → logprob: -11.099108695983887
    4. '=b' → logprob: -12.349108695983887
    5. '=' → logprob: -12.599108695983887
    6. 'a' → logprob: -13.099108695983887
    7. '0' → logprob: -14.036608695983887
    8. '1' → logprob: -14.536608695983887
    9. '>b' → logprob: -14.661608695983887
    10. '  ' → logprob: -14.974108695983887

Token 30: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.014188887551426888
    2. 'else' → logprob: -4.264188766479492
    3. ' ' → logprob: -10.889188766479492
    4. '	else' → logprob: -14.014188766479492
    5. ' and' → logprob: -14.139188766479492
    6. '   ' → logprob: -14.264188766479492
    7. '<|end|>' → logprob: -14.389188766479492
    8. ' 
' → logprob: -14.639188766479492
    9. '  ' → logprob: -14.764188766479492
    10. ')' → logprob: -14.764188766479492

Token 31: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0010936654871329665
    2. ' "' → logprob: -7.251093864440918
    3. '"No' → logprob: -8.001093864440918
    4. ''' → logprob: -10.751093864440918
    5. ' ' → logprob: -11.626093864440918
    6. '   ' → logprob: -11.876093864440918
    7. ' No' → logprob: -12.126093864440918
    8. '""' → logprob: -13.126093864440918
    9. 'No' → logprob: -14.251093864440918
    10. '"\' → logprob: -14.376093864440918

Token 32: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.11386421322822571
    2. '"No' → logprob: -2.2388641834259033
    3. ' No' → logprob: -6.988864421844482
    4. '"' → logprob: -9.238863945007324
    5. ' ' → logprob: -11.363863945007324
    6. '   ' → logprob: -12.613863945007324
    7. '""' → logprob: -13.613863945007324
    8. ''' → logprob: -13.613863945007324
    9. ' "' → logprob: -13.738863945007324
    10. '.No' → logprob: -14.363863945007324

Token 33: '"

' (ID: 2678)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.004085524007678032
    2. '")' → logprob: -5.504085540771484
    3. ')' → logprob: -12.879085540771484
    4. '```' → logprob: -13.129085540771484
    5. '"
' → logprob: -14.129085540771484
    6. ')"' → logprob: -14.504085540771484
    7. '"""' → logprob: -14.629085540771484
    8. '"}' → logprob: -15.754085540771484
    9. ''' → logprob: -16.129085540771484
    10. ' "' → logprob: -16.254085540771484

Token 34: 'result' (ID: 2521)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.962140679359436
    2. 'for' → logprob: -1.212140679359436
    3. 'print' → logprob: -2.0871405601501465
    4. '\n' → logprob: -3.4621405601501465
    5. 'N' → logprob: -3.5871405601501465
    6. 'n' → logprob: -3.8371405601501465
    7. 'p' → logprob: -3.8371405601501465
    8. 'x' → logprob: -4.0871405601501465
    9. 'i' → logprob: -4.2121405601501465
    10. '<|end|>' → logprob: -4.4621405601501465

Token 35: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2732868790626526
    2. '=' → logprob: -1.6482868194580078
    3. 's' → logprob: -4.023286819458008
    4. ')' → logprob: -4.148286819458008
    5. '(' → logprob: -5.023286819458008
    6. ' ' → logprob: -6.273286819458008
    7. '<|end|>' → logprob: -6.898286819458008
    8. '(s' → logprob: -7.023286819458008
    9. '[:]' → logprob: -7.523286819458008
    10. '.' → logprob: -7.773286819458008

Token 36: ' None' (ID: 4662)
  Prédit: 'check'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'check' → logprob: -0.014353068545460701
    2. ' check' → logprob: -4.639353275299072
    3. '[' → logprob: -5.514353275299072
    4. '"' → logprob: -8.514352798461914
    5. ' [' → logprob: -8.889352798461914
    6. '[]' → logprob: -10.014352798461914
    7. 'result' → logprob: -10.389352798461914
    8. '[N' → logprob: -10.389352798461914
    9. '(check' → logprob: -10.514352798461914
    10. '[int' → logprob: -10.889352798461914

Token 37: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.2810203731060028
    2. '<|end|>' → logprob: -1.5310204029083252
    3. ' for' → logprob: -4.281020164489746
    4. '
' → logprob: -4.656020164489746
    5. ' ' → logprob: -7.031020164489746
    6. '<|end|>' → logprob: -7.281020164489746
    7. 'if' → logprob: -7.656020164489746
    8. '\n' → logprob: -7.781020164489746
    9. '#' → logprob: -7.906020164489746
    10. ' 
' → logprob: -8.281020164489746

Token 38: 'if' (ID: 366)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.3755553662776947
    2. 'if' → logprob: -1.625555396080017
    3. 'a' → logprob: -3.7505552768707275
    4. 'i' → logprob: -3.7505552768707275
    5. '<|end|>' → logprob: -3.7505552768707275
    6. ' ' → logprob: -4.750555515289307
    7. ' for' → logprob: -5.000555515289307
    8. 'result' → logprob: -5.125555515289307
    9. 'n' → logprob: -5.375555515289307
    10. '
' → logprob: -5.750555515289307

Token 39: ' N' (ID: 478)
  Prédit: ' N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.060078658163547516
    2. 'N' → logprob: -2.9350786209106445
    3. ' M' → logprob: -5.5600786209106445
    4. ' ' → logprob: -7.4350786209106445
    5. ' result' → logprob: -8.185078620910645
    6. 'result' → logprob: -8.310078620910645
    7. 'M' → logprob: -8.560078620910645
    8. ' a' → logprob: -12.560078620910645
    9. '  ' → logprob: -12.685078620910645
    10. ' ' → logprob: -12.872578620910645

Token 40: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.31021782755851746
    2. ' >' → logprob: -1.4352178573608398
    3. ' <=' → logprob: -4.81021785736084
    4. ' >=' → logprob: -5.06021785736084
    5. '==' → logprob: -5.18521785736084
    6. ' <' → logprob: -5.18521785736084
    7. '>' → logprob: -6.18521785736084
    8. ' ' → logprob: -7.68521785736084
    9. ' %' → logprob: -8.43521785736084
    10. ' !=' → logprob: -9.56021785736084

Token 41: ' M' (ID: 391)
  Prédit: ' M'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' M' → logprob: -0.22587209939956665
    2. 'M' → logprob: -1.6008720397949219
    3. ' ' → logprob: -7.850872039794922
    4. '0' → logprob: -10.600872039794922
    5. '1' → logprob: -10.600872039794922
    6. ' N' → logprob: -12.975872039794922
    7. ' ' → logprob: -13.100872039794922
    8. 'N' → logprob: -13.475872039794922
    9. '  ' → logprob: -13.475872039794922
    10. '100' → logprob: -13.663372039794922

Token 42: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0015137888258323073
    2. ':
' → logprob: -6.501513957977295
    3. ' :' → logprob: -11.501513481140137
    4. ' :
' → logprob: -15.251513481140137
    5. ':
' → logprob: -15.251513481140137
    6. ' and' → logprob: -15.376513481140137
    7. '):' → logprob: -15.876513481140137
    8. '   ' → logprob: -16.001514434814453
    9. ':

' → logprob: -16.126514434814453
    10. ':return' → logprob: -16.126514434814453

Token 43: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0319385752081871
    2. ':' → logprob: -4.281938552856445
    3. 'result' → logprob: -5.031938552856445
    4. '    
' → logprob: -5.781938552856445
    5. ':
' → logprob: -5.906938552856445
    6. '
' → logprob: -6.156938552856445
    7. ' result' → logprob: -6.406938552856445
    8. '       ' → logprob: -8.031938552856445
    9. '	result' → logprob: -8.531938552856445
    10. '<|end|>' → logprob: -8.531938552856445

Token 44: ' result' (ID: 1534)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' (adapté à ' result') → logprob: -0.05360531061887741
    2. '   ' → logprob: -3.428605318069458
    3. ' result' → logprob: -3.928605318069458
    4. '
' → logprob: -10.428605079650879
    5. '```' → logprob: -11.178605079650879
    6. '	result' → logprob: -11.303605079650879
    7. ' ' → logprob: -11.803605079650879
    8. '       ' → logprob: -12.303605079650879
    9. '    
' → logprob: -12.303605079650879
    10. '  ' → logprob: -12.553605079650879

Token 45: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.004622372332960367
    2. '=' → logprob: -5.379622459411621
    3. ' ' → logprob: -13.129622459411621
    4. ' =
' → logprob: -16.754621505737305
    5. ' ' → logprob: -17.379621505737305
    6. ' =)' → logprob: -17.379621505737305
    7. ')' → logprob: -17.629621505737305
    8. ' ="' → logprob: -18.004621505737305
    9. '   ' → logprob: -18.254621505737305
    10. '  ' → logprob: -18.754621505737305

Token 46: ' check' (ID: 2371)
  Prédit: 'check'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'check' → logprob: -0.2247636616230011
    2. '"' → logprob: -2.0997636318206787
    3. ' check' → logprob: -2.5997636318206787
    4. ' "' → logprob: -5.474763870239258
    5. '"N' → logprob: -9.224763870239258
    6. '   ' → logprob: -9.349763870239258
    7. ' ' → logprob: -9.974763870239258
    8. ''' → logprob: -10.724763870239258
    9. '"No' → logprob: -10.724763870239258
    10. '(check' → logprob: -11.599763870239258

Token 47: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.0036239505279809237
    2. '(' → logprob: -5.628623962402344
    3. ' (' → logprob: -11.378623962402344
    4. '(M' → logprob: -12.378623962402344
    5. '(
' → logprob: -13.253623962402344
    6. '(n' → logprob: -13.253623962402344
    7. '((' → logprob: -13.753623962402344
    8. ' ' → logprob: -13.753623962402344
    9. ')' → logprob: -14.753623962402344
    10. '('' → logprob: -15.128623962402344

Token 48: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0006386925233528018
    2. ' ,' → logprob: -7.500638484954834
    3. ')' → logprob: -10.500638961791992
    4. ',M' → logprob: -10.625638961791992
    5. ',N' → logprob: -10.875638961791992
    6. ' ' → logprob: -12.250638961791992
    7. '   ' → logprob: -12.625638961791992
    8. 'N' → logprob: -13.000638961791992
    9. 'M' → logprob: -13.750638961791992
    10. '  ' → logprob: -14.500638961791992

Token 49: ' M' (ID: 391)
  Prédit: 'M'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'M' → logprob: -0.03309735655784607
    2. ' M' → logprob: -3.533097267150879
    3. 'N' → logprob: -5.783097267150879
    4. ' ' → logprob: -8.908097267150879
    5. ' N' → logprob: -9.283097267150879
    6. '   ' → logprob: -10.908097267150879
    7. '  ' → logprob: -11.908097267150879
    8. '    ' → logprob: -12.658097267150879
    9. '1' → logprob: -14.283097267150879
    10. ')' → logprob: -14.345597267150879

Token 50: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.600714161526412e-05
    2. ')
' → logprob: -9.500076293945312
    3. ' )' → logprob: -14.750076293945312
    4. '))' → logprob: -15.125076293945312
    5. ')
' → logprob: -16.125076293945312
    6. ' ' → logprob: -16.125076293945312
    7. '   ' → logprob: -16.250076293945312
    8. ')

' → logprob: -17.375076293945312
    9. '')' → logprob: -17.875076293945312
    10. ')return' → logprob: -18.000076293945312

Token 51: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.02074473537504673
    2. 'print' → logprob: -4.020744800567627
    3. 'elif' → logprob: -6.520744800567627
    4. '```' → logprob: -7.520744800567627
    5. ' else' → logprob: -8.145744323730469
    6. '
' → logprob: -8.520744323730469
    7. '    
' → logprob: -11.395744323730469
    8. '<|end|>' → logprob: -11.395744323730469
    9. '   ' → logprob: -11.520744323730469
    10. 'result' → logprob: -11.520744323730469

Token 52: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0008450066088698804
    2. ':
' → logprob: -7.375844955444336
    3. '   ' → logprob: -8.625844955444336
    4. ' :' → logprob: -10.875844955444336
    5. '    ' → logprob: -12.375844955444336
    6. 'if' → logprob: -12.375844955444336
    7. ' if' → logprob: -12.625844955444336
    8. ',' → logprob: -13.250844955444336
    9. '{' → logprob: -14.000844955444336
    10. '  ' → logprob: -14.250844955444336

Token 53: '   ' (ID: 271)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.5234755873680115
    2. '   ' → logprob: -1.6484756469726562
    3. '"' → logprob: -2.3984756469726562
    4. ' result' → logprob: -2.7734756469726562
    5. 'check' → logprob: -4.023475646972656
    6. ' check' → logprob: -4.148475646972656
    7. ' None' → logprob: -4.273475646972656
    8. 'None' → logprob: -4.648475646972656
    9. 'print' → logprob: -6.398475646972656
    10. ' "' → logprob: -6.398475646972656

Token 54: ' def' (ID: 1056)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.04614274576306343
    2. 'print' → logprob: -3.296142816543579
    3. 'for' → logprob: -5.796142578125
    4. ' result' → logprob: -5.921142578125
    5. 'None' → logprob: -7.171142578125
    6. 'pass' → logprob: -7.671142578125
    7. '   ' → logprob: -7.796142578125
    8. 'check' → logprob: -8.546142578125
    9. ' print' → logprob: -8.796142578125
    10. ' for' → logprob: -9.046142578125

Token 55: ' f' (ID: 285)
  Prédit: ' check'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' check' → logprob: -0.008917083963751793
    2. ' ' → logprob: -5.008916854858398
    3. ' compare' → logprob: -8.008916854858398
    4. '  ' → logprob: -8.383916854858398
    5. ' _' → logprob: -8.633916854858398
    6. ' find' → logprob: -8.883916854858398
    7. ' f' → logprob: -9.133916854858398
    8. ' abs' → logprob: -9.133916854858398
    9. '   ' → logprob: -9.258916854858398
    10. 'check' → logprob: -9.508916854858398

Token 56: '():' (ID: 9442)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7585827708244324
    2. '(n' → logprob: -1.5085828304290771
    3. ' (' → logprob: -1.5085828304290771
    4. '(N' → logprob: -3.633582830429077
    5. '(a' → logprob: -3.633582830429077
    6. '(x' → logprob: -4.633582592010498
    7. 'unction' → logprob: -4.633582592010498
    8. ')' → logprob: -5.883582592010498
    9. ' ' → logprob: -6.508582592010498
    10. '  ' → logprob: -6.633582592010498

Token 57: ' print' (ID: 2123)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.604228138923645
    2. '
' → logprob: -1.854228138923645
    3. '       ' → logprob: -1.979228138923645
    4. ' 
' → logprob: -2.2292280197143555
    5. '<|end|>' → logprob: -4.3542280197143555
    6. '    ' → logprob: -4.9792280197143555
    7. '' → logprob: -5.1042280197143555
    8. '    
' → logprob: -5.4792280197143555
    9. 'n' → logprob: -5.7292280197143555
    10. '        
' → logprob: -5.7292280197143555

Token 58: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1987457573413849
    2. '("' → logprob: -2.4487457275390625
    3. '(N' → logprob: -2.9487457275390625
    4. '()' → logprob: -3.5737457275390625
    5. '('' → logprob: -5.0737457275390625
    6. '(f' → logprob: -6.0737457275390625
    7. '(
' → logprob: -6.8237457275390625
    8. '("")' → logprob: -6.8237457275390625
    9. '("("' → logprob: -7.3237457275390625
    10. '(M' → logprob: -7.4487457275390625

Token 59: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.026209378615021706
    2. '-' → logprob: -5.276209354400635
    3. 'Hello' → logprob: -5.776209354400635
    4. 'Error' → logprob: -6.151209354400635
    5. 'Yes' → logprob: -6.401209354400635
    6. 'Impossible' → logprob: -6.526209354400635
    7. ':' → logprob: -6.651209354400635
    8. '("' → logprob: -7.026209354400635
    9. '0' → logprob: -7.151209354400635
    10. ' No' → logprob: -7.276209354400635

Token 60: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.0009956525173038244
    2. ')")' → logprob: -7.000995635986328
    3. ')' → logprob: -9.750995635986328
    4. '")
' → logprob: -11.000995635986328
    5. '()' → logprob: -12.875995635986328
    6. '\")' → logprob: -13.375995635986328
    7. '")

' → logprob: -14.125995635986328
    8. '");' → logprob: -14.250995635986328
    9. '}")' → logprob: -14.375995635986328
    10. '”)' → logprob: -14.500995635986328

Token 61: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 62: ' f' (ID: 285)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' (adapté à ' f') → logprob: -0.5565844774246216
    2. ' f' → logprob: -1.6815844774246216
    3. '<|end|>' → logprob: -2.306584358215332
    4. '
' → logprob: -2.681584358215332
    5. '   ' → logprob: -3.181584358215332
    6. '\n' → logprob: -4.681584358215332
    7. '<|end|>' → logprob: -5.056584358215332
    8. '(f' → logprob: -5.306584358215332
    9. '()' → logprob: -6.056584358215332
    10. '```' → logprob: -6.681584358215332

Token 63: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -4.723352049040841e-06
    2. '()
' → logprob: -12.750004768371582
    3. ']()' → logprob: -14.625004768371582
    4. '(' → logprob: -14.750004768371582
    5. '`()' → logprob: -15.000004768371582
    6. '()`' → logprob: -16.000003814697266
    7. '()

' → logprob: -16.375003814697266
    8. '()<' → logprob: -16.500003814697266
    9. ' ()' → logprob: -16.750003814697266
    10. '|()
' → logprob: -16.750003814697266

Token 64: 'if' (ID: 366)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 65: ' result' (ID: 1534)
  Prédit: ' result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' result' → logprob: -0.004127672873437405
    2. 'result' → logprob: -5.504127502441406
    3. ' ' → logprob: -11.129127502441406
    4. ' N' → logprob: -11.129127502441406
    5. ' not' → logprob: -11.379127502441406
    6. ' ' → logprob: -12.504127502441406
    7. ' __' → logprob: -13.254127502441406
    8. ' None' → logprob: -14.004127502441406
    9. '(result' → logprob: -14.879127502441406
    10. ' True' → logprob: -15.254127502441406

Token 66: ':
' (ID: 734)
  Prédit: ' is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.011329567059874535
    2. ':' → logprob: -4.511329650878906
    3. 'is' → logprob: -8.636329650878906
    4. '==' → logprob: -10.011329650878906
    5. ' ==' → logprob: -10.261329650878906
    6. '!=' → logprob: -12.011329650878906
    7. ' :' → logprob: -12.136329650878906
    8. ' !=' → logprob: -12.261329650878906
    9. '<|end|>' → logprob: -13.261329650878906
    10. ' ' → logprob: -13.761329650878906

Token 67: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08794454485177994
    2. ' print' → logprob: -2.587944507598877
    3. 'print' → logprob: -4.712944507598877
    4. '```' → logprob: -11.087944984436035
    5. '	print' → logprob: -11.837944984436035
    6. '    ' → logprob: -12.587944984436035
    7. '       ' → logprob: -12.962944984436035
    8. '    
' → logprob: -13.212944984436035
    9. '   ' → logprob: -13.212944984436035
    10. '
' → logprob: -13.712944984436035

Token 68: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.030362537130713463
    2. ' print' → logprob: -3.530362606048584
    3. '   ' → logprob: -7.405362606048584
    4. '```' → logprob: -12.905362129211426
    5. '	print' → logprob: -13.905362129211426
    6. '
' → logprob: -15.780362129211426
    7. ' ' → logprob: -16.155363082885742
    8. '.print' → logprob: -16.655363082885742
    9. '  ' → logprob: -16.905363082885742
    10. 'pr' → logprob: -17.155363082885742

Token 69: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.32074642181396484
    2. '(result' → logprob: -1.3207464218139648
    3. '("("' → logprob: -5.445746421813965
    4. '(f' → logprob: -5.945746421813965
    5. '("' → logprob: -7.820746421813965
    6. '('' → logprob: -9.445746421813965
    7. '()' → logprob: -11.445746421813965
    8. '(
' → logprob: -11.695746421813965
    9. ' (' → logprob: -12.195746421813965
    10. '("")' → logprob: -12.320746421813965

Token 70: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.512236498361744e-07
    2. ')
' → logprob: -15.375000953674316
    3. '))' → logprob: -15.750000953674316
    4. ')`' → logprob: -16.5
    5. ' )' → logprob: -17.125
    6. ')}' → logprob: -17.375
    7. '())' → logprob: -18.0
    8. '()' → logprob: -18.5
    9. '(' → logprob: -19.0
    10. ')**' → logprob: -19.25


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 68
Tokens correctement prédits (1ère position, stricte): 19
Tokens correctement prédits (1ère position, avec adaptation): 22
Tokens correctement prédits (top 10): 50
Précision stricte (1ère position): 27.94%
Précision adaptée (1ère position): 32.35%
Précision (top 10): 73.53%
================================================================================
