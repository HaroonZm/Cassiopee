================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:39:23
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = input()
n = int(n)
if n % 2 == 0:
    print(n // 2 - 1)
else:
    print(n // 2)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' input' (ID: 3422)
  → Token d'amorce (pas de prédiction)

Token 3: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.001609005150385201
    2. '('' → logprob: -7.251608848571777
    3. ''' → logprob: -7.376608848571777
    4. '"' → logprob: -9.376608848571777
    5. '(
' → logprob: -9.376608848571777
    6. '("("' → logprob: -10.126608848571777
    7. '[' → logprob: -10.751608848571777
    8. '()' → logprob: -11.501608848571777
    9. '`' → logprob: -12.376608848571777
    10. ' (' → logprob: -12.501608848571777

Token 4: 'n' (ID: 77)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.393809050321579
    2. '.' → logprob: -1.5188090801239014
    3. '=' → logprob: -3.6438090801239014
    4. '*' → logprob: -4.393808841705322
    5. '\n' → logprob: -4.393808841705322
    6. '.strip' → logprob: -4.393808841705322
    7. '()' → logprob: -4.518808841705322
    8. ')' → logprob: -5.143808841705322
    9. '\' → logprob: -5.393808841705322
    10. '**' → logprob: -5.768808841705322

Token 5: ' =' (ID: 314)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.8422781229019165
    2. '\n' → logprob: -1.7172781229019165
    3. '```' → logprob: -2.217278003692627
    4. '[' → logprob: -2.467278003692627
    5. '*' → logprob: -2.842278003692627
    6. ')' → logprob: -3.342278003692627
    7. '\' → logprob: -3.967278003692627
    8. '.' → logprob: -4.217278003692627
    9. '#' → logprob: -4.342278003692627
    10. ''' → logprob: -5.217278003692627

Token 6: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.18992649018764496
    2. 'int' → logprob: -1.9399265050888062
    3. ' input' → logprob: -4.189926624298096
    4. ' n' → logprob: -4.689926624298096
    5. 'input' → logprob: -6.064926624298096
    6. 'n' → logprob: -6.314926624298096
    7. ' ' → logprob: -7.439926624298096
    8. ' float' → logprob: -9.814926147460938
    9. ' len' → logprob: -11.064926147460938
    10. 'float' → logprob: -11.439926147460938

Token 7: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.04902014508843422
    2. '(n' → logprob: -3.0490200519561768
    3. '('' → logprob: -8.424019813537598
    4. '()' → logprob: -9.299019813537598
    5. '("("' → logprob: -10.799019813537598
    6. '(
' → logprob: -10.924019813537598
    7. '```' → logprob: -11.049019813537598
    8. '`' → logprob: -11.424019813537598
    9. ' (' → logprob: -11.799019813537598
    10. '(`' → logprob: -12.174019813537598

Token 8: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.4849443838757e-06
    2. ' )' → logprob: -13.625004768371582
    3. '))' → logprob: -14.250004768371582
    4. '`)' → logprob: -14.375004768371582
    5. '')' → logprob: -14.750004768371582
    6. ')
' → logprob: -14.875004768371582
    7. '*' → logprob: -15.500004768371582
    8. ')`' → logprob: -15.500004768371582
    9. '[' → logprob: -15.625004768371582
    10. '**' → logprob: -15.875004768371582

Token 9: 'if' (ID: 366)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.060675088316202164
    2. '*' → logprob: -3.8106751441955566
    3. '%' → logprob: -4.435675144195557
    4. 'if' → logprob: -4.935675144195557
    5. '+
' → logprob: -5.435675144195557
    6. '\n' → logprob: -5.560675144195557
    7. '#' → logprob: -5.935675144195557
    8. 'i' → logprob: -6.685675144195557
    9. '**' → logprob: -7.185675144195557
    10. ' if' → logprob: -7.310675144195557

Token 10: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.008261250331997871
    2. ' ' → logprob: -5.008261203765869
    3. 'n' → logprob: -6.508261203765869
    4. ' ' → logprob: -10.008261680603027
    5. ' not' → logprob: -12.508261680603027
    6. ' (' → logprob: -13.383261680603027
    7. '_' → logprob: -14.883261680603027
    8. ' a' → logprob: -15.133261680603027
    9. '(n' → logprob: -15.133261680603027
    10. ' isinstance' → logprob: -15.258261680603027

Token 11: ' %' (ID: 1851)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.03163544461131096
    2. '>' → logprob: -4.031635284423828
    3. ' <' → logprob: -5.281635284423828
    4. ' ' → logprob: -5.906635284423828
    5. ' ==' → logprob: -5.906635284423828
    6. ' >=' → logprob: -6.656635284423828
    7. ' <=' → logprob: -7.281635284423828
    8. ' %' → logprob: -7.906635284423828
    9. '==' → logprob: -8.906635284423828
    10. '<' → logprob: -9.031635284423828

Token 12: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.428744375705719
    2. '2' → logprob: -1.0537443161010742
    3. '4' → logprob: -11.178744316101074
    4. '1' → logprob: -11.178744316101074
    5. '3' → logprob: -11.553744316101074
    6. '```' → logprob: -12.928744316101074
    7. ' ' → logprob: -14.178744316101074
    8. '10' → logprob: -14.428744316101074
    9. '32' → logprob: -14.678744316101074
    10. '=' → logprob: -15.178744316101074

Token 13: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0005704291397705674
    2. '3' → logprob: -7.750570297241211
    3. '5' → logprob: -10.250570297241211
    4. ' ' → logprob: -10.250570297241211
    5. '10' → logprob: -10.500570297241211
    6. '4' → logprob: -10.625570297241211
    7. '1' → logprob: -11.625570297241211
    8. '7' → logprob: -12.500570297241211
    9. '```' → logprob: -13.750570297241211
    10. '6' → logprob: -14.000570297241211

Token 14: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.05929986387491226
    2. '==' → logprob: -3.059299945831299
    3. ' !=' → logprob: -4.684299945831299
    4. '=' → logprob: -7.559299945831299
    5. ' ' → logprob: -8.05929946899414
    6. '!=' → logprob: -8.18429946899414
    7. ' =' → logprob: -8.43429946899414
    8. ':' → logprob: -10.18429946899414
    9. ')' → logprob: -11.05929946899414
    10. ' ===' → logprob: -12.18429946899414

Token 15: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.313264936208725
    2. '0' → logprob: -1.3132649660110474
    3. '1' → logprob: -13.063264846801758
    4. ' ' → logprob: -14.438264846801758
    5. '=' → logprob: -15.438264846801758
    6. '2' → logprob: -16.188264846801758
    7. '==' → logprob: -16.688264846801758
    8. ')' → logprob: -16.938264846801758
    9. ''' → logprob: -17.188264846801758
    10. '  ' → logprob: -17.438264846801758

Token 16: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.02060600370168686
    2. ' ' → logprob: -3.89560604095459
    3. '1' → logprob: -9.77060604095459
    4. '2' → logprob: -11.89560604095459
    5. '```' → logprob: -17.270605087280273
    6. '4' → logprob: -17.520605087280273
    7. ' ' → logprob: -17.833105087280273
    8. '=' → logprob: -18.083105087280273
    9. '  ' → logprob: -18.145605087280273
    10. '==' → logprob: -18.208105087280273

Token 17: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.5048530030981055e-06
    2. ':**' → logprob: -14.375001907348633
    3. ' :' → logprob: -14.625001907348633
    4. ':
' → logprob: -15.000001907348633
    5. '':'' → logprob: -17.375001907348633
    6. '>:' → logprob: -17.625001907348633
    7. '):' → logprob: -17.625001907348633
    8. '':' → logprob: -17.750001907348633
    9. '：' → logprob: -18.000001907348633
    10. ':return' → logprob: -18.125001907348633

Token 18: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.3854636251926422
    2. '   ' → logprob: -1.5104635953903198
    3. 'print' → logprob: -3.1354637145996094
    4. ' print' → logprob: -3.7604637145996094
    5. '\' → logprob: -4.135463714599609
    6. ' 
' → logprob: -5.260463714599609
    7. ' ' → logprob: -6.135463714599609
    8. '    
' → logprob: -6.260463714599609
    9. ''' → logprob: -6.510463714599609
    10. '\r' → logprob: -6.635463714599609

Token 19: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.0458238460123539
    2. 'print' (adapté à ' print') → logprob: -3.420823812484741
    3. '   ' → logprob: -4.42082405090332
    4. '\n' → logprob: -10.92082405090332
    5. ' \' → logprob: -11.04582405090332
    6. '    ' → logprob: -11.17082405090332
    7. '\' → logprob: -11.17082405090332
    8. '    
' → logprob: -12.42082405090332
    9. '```' → logprob: -12.79582405090332
    10. ' ' → logprob: -12.92082405090332

Token 20: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.049105722457170486
    2. '("' → logprob: -3.174105644226074
    3. '('' → logprob: -5.424105644226074
    4. '("("' → logprob: -6.424105644226074
    5. '("")' → logprob: -10.674105644226074
    6. '()' → logprob: -11.424105644226074
    7. '"' → logprob: -12.049105644226074
    8. '(n' → logprob: -12.174105644226074
    9. '(True' → logprob: -13.049105644226074
    10. '("(' → logprob: -13.174105644226074

Token 21: ' //' (ID: 602)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -3.7385154428193346e-05
    2. '*' → logprob: -10.75003719329834
    3. '))' → logprob: -12.00003719329834
    4. ' )' → logprob: -12.62503719329834
    5. '+' → logprob: -13.25003719329834
    6. ')
' → logprob: -13.62503719329834
    7. '**' → logprob: -14.37503719329834
    8. '')' → logprob: -14.50003719329834
    9. ')`' → logprob: -14.62503719329834
    10. ',' → logprob: -15.50003719329834

Token 22: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.005234832875430584
    2. ' ' → logprob: -5.255234718322754
    3. ' ' → logprob: -15.505234718322754
    4. '```' → logprob: -15.505234718322754
    5. ')' → logprob: -16.00523567199707
    6. '   ' → logprob: -16.06773567199707
    7. '۲' → logprob: -16.69273567199707
    8. '  ' → logprob: -16.81773567199707
    9. '２' → logprob: -16.88023567199707
    10. '4' → logprob: -16.94273567199707

Token 23: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -2.165027217415627e-05
    2. ' ' → logprob: -10.750021934509277
    3. '   ' → logprob: -16.75002098083496
    4. '```' → logprob: -17.62502098083496
    5. '  ' → logprob: -17.87502098083496
    6. ')' → logprob: -18.00002098083496
    7. '۲' → logprob: -18.00002098083496
    8. '２' → logprob: -18.43752098083496
    9. '22' → logprob: -18.50002098083496
    10. '3' → logprob: -18.62502098083496

Token 24: ' -' (ID: 533)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1756367712223437e-05
    2. ')
' → logprob: -12.000011444091797
    3. ' )' → logprob: -12.625011444091797
    4. '*' → logprob: -13.500011444091797
    5. '')' → logprob: -15.500011444091797
    6. '))' → logprob: -16.000011444091797
    7. '`)' → logprob: -16.625011444091797
    8. '+' → logprob: -16.625011444091797
    9. '```' → logprob: -16.875011444091797
    10. ')

' → logprob: -17.125011444091797

Token 25: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.014170088805258274
    2. ' ' → logprob: -4.264170169830322
    3. '0' → logprob: -12.514169692993164
    4. '2' → logprob: -13.764169692993164
    5. ')' → logprob: -14.139169692993164
    6. '   ' → logprob: -15.326669692993164
    7. '3' → logprob: -15.764169692993164
    8. '  ' → logprob: -15.889169692993164
    9. '(' → logprob: -15.951669692993164
    10. '5' → logprob: -16.264169692993164

Token 26: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.621933451038785e-05
    2. ' ' → logprob: -9.875056266784668
    3. '2' → logprob: -13.000056266784668
    4. '0' → logprob: -13.625056266784668
    5. ')' → logprob: -15.062556266784668
    6. '(' → logprob: -15.187556266784668
    7. '   ' → logprob: -15.687556266784668
    8. '-' → logprob: -15.875056266784668
    9. '3' → logprob: -16.43755531311035
    10. '  ' → logprob: -16.43755531311035

Token 27: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.8908587662735954e-05
    2. ')
' → logprob: -11.000019073486328
    3. ' )' → logprob: -13.750019073486328
    4. '```' → logprob: -15.375019073486328
    5. '')' → logprob: -15.750019073486328
    6. '*' → logprob: -15.750019073486328
    7. 'else' → logprob: -16.250019073486328
    8. '))' → logprob: -16.625019073486328
    9. ')

' → logprob: -16.750019073486328
    10. '   ' → logprob: -16.875019073486328

Token 28: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.001933873863890767
    2. ' else' → logprob: -6.626934051513672
    3. 'elif' → logprob: -8.376934051513672
    4. '```' → logprob: -8.751934051513672
    5. '<|end|>' → logprob: -9.626934051513672
    6. '\n' → logprob: -10.001934051513672
    7. '
' → logprob: -10.376934051513672
    8. ')' → logprob: -10.626934051513672
    9. '    
' → logprob: -11.626934051513672
    10. '  
' → logprob: -11.751934051513672

Token 29: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.3425219549390022e-05
    2. ':
' → logprob: -11.50001335144043
    3. ' :' → logprob: -12.75001335144043
    4. '   ' → logprob: -15.87501335144043
    5. ':**' → logprob: -17.37501335144043
    6. ':return' → logprob: -17.37501335144043
    7. '):' → logprob: -17.87501335144043
    8. '>' → logprob: -18.00001335144043
    9. ':

' → logprob: -18.12501335144043
    10. '：' → logprob: -18.25001335144043

Token 30: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0009056262206286192
    2. 'print' → logprob: -7.500905513763428
    3. '    ' → logprob: -9.125905990600586
    4. '```' → logprob: -9.125905990600586
    5. ' print' → logprob: -9.500905990600586
    6. '       ' → logprob: -10.750905990600586
    7. ' ' → logprob: -11.500905990600586
    8. '    
' → logprob: -12.000905990600586
    9. '``' → logprob: -12.625905990600586
    10. '  ' → logprob: -13.125905990600586

Token 31: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.017569255083799362
    2. ' print' → logprob: -4.142569065093994
    3. '   ' → logprob: -6.517569065093994
    4. '(print' → logprob: -10.892569541931152
    5. ' ' → logprob: -11.017569541931152
    6. '(n' → logprob: -11.642569541931152
    7. '```' → logprob: -12.642569541931152
    8. '(' → logprob: -12.892569541931152
    9. '	print' → logprob: -13.267569541931152
    10. '0' → logprob: -13.642569541931152

Token 32: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3878038823604584
    2. '(n' → logprob: -1.1378039121627808
    3. '((' → logprob: -7.01280403137207
    4. '('' → logprob: -11.38780403137207
    5. '()' → logprob: -12.13780403137207
    6. ' (' → logprob: -12.26280403137207
    7. '(
' → logprob: -12.76280403137207
    8. '("' → logprob: -13.63780403137207
    9. '(int' → logprob: -13.63780403137207
    10. 'n' → logprob: -13.88780403137207

Token 33: ' //' (ID: 602)
  Prédit: ' //'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.10113108903169632
    2. ')' → logprob: -2.4761312007904053
    3. '//' → logprob: -4.726130962371826
    4. ' )' → logprob: -6.726130962371826
    5. ' ' → logprob: -7.101130962371826
    6. '-' → logprob: -7.976130962371826
    7. ' -' → logprob: -7.976130962371826
    8. '))' → logprob: -8.851131439208984
    9. ' #' → logprob: -9.476131439208984
    10. '+' → logprob: -9.476131439208984

Token 34: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.007650522515177727
    2. ' ' → logprob: -4.882650375366211
    3. '1' → logprob: -10.132650375366211
    4. '3' → logprob: -13.257650375366211
    5. '   ' → logprob: -13.882650375366211
    6. '  ' → logprob: -14.382650375366211
    7. '```' → logprob: -15.007650375366211
    8. '0' → logprob: -15.382650375366211
    9. '(' → logprob: -15.507650375366211
    10. ')' → logprob: -15.820150375366211

Token 35: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0005985465249978006
    2. ' ' → logprob: -8.000598907470703
    3. '1' → logprob: -8.250598907470703
    4. '0' → logprob: -14.688098907470703
    5. '3' → logprob: -15.000598907470703
    6. '```' → logprob: -15.500598907470703
    7. '(' → logprob: -15.625598907470703
    8. '   ' → logprob: -16.250598907470703
    9. '  ' → logprob: -16.438098907470703
    10. '-' → logprob: -16.688098907470703

Token 36: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0025666221044957638
    2. '+' → logprob: -6.002566814422607
    3. ' )' → logprob: -10.12756633758545
    4. ' +' → logprob: -10.50256633758545
    5. '))' → logprob: -11.87756633758545
    6. ')
' → logprob: -12.12756633758545
    7. '')' → logprob: -12.75256633758545
    8. '+)' → logprob: -12.75256633758545
    9. '`)' → logprob: -13.37756633758545
    10. '   ' → logprob: -14.50256633758545


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 34
Tokens correctement prédits (1ère position, stricte): 15
Tokens correctement prédits (1ère position, avec adaptation): 16
Tokens correctement prédits (top 10): 29
Précision stricte (1ère position): 44.12%
Précision adaptée (1ère position): 47.06%
Précision (top 10): 85.29%
================================================================================
