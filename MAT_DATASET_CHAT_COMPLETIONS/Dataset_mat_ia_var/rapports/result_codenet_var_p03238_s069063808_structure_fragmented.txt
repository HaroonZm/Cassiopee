================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:06:35
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def get_first_input():
    return input()

def convert_to_int(value):
    return int(value)

def is_one(value):
    return value == 1

def get_second_input():
    return input()

def get_third_input():
    return input()

def compute_sum(a, b):
    return a + b

def print_result(result):
    print(result)

def process_branch_one():
    print_result("Hello World")

def process_branch_two():
    second = convert_to_int(get_second_input())
    third = convert_to_int(get_third_input())
    result = compute_sum(second, third)
    print_result(result)

def main():
    first_input = get_first_input()
    first_value = convert_to_int(first_input)
    if is_one(first_value):
        process_branch_one()
    else:
        process_branch_two()

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' get' (ID: 717)
  → Token d'amorce (pas de prédiction)

Token 2: '_first' (ID: 29347)
  → Token d'amorce (pas de prédiction)

Token 3: '_input' (ID: 12507)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0019348275382071733
    2. '_token' → logprob: -7.376935005187988
    3. '_name' → logprob: -8.376935005187988
    4. '(' → logprob: -8.501935005187988
    5. '_character' → logprob: -8.501935005187988
    6. '```' → logprob: -8.501935005187988
    7. '_(' → logprob: -9.251935005187988
    8. '_char' → logprob: -9.501935005187988
    9. '_s' → logprob: -9.876935005187988
    10. '(_' → logprob: -10.751935005187988

Token 4: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003067314624786377
    2. '_' → logprob: -5.878067493438721
    3. '():' → logprob: -9.503067016601562
    4. '(:' → logprob: -10.253067016601562
    5. '```' → logprob: -10.253067016601562
    6. '(_' → logprob: -10.628067016601562
    7. '(_:' → logprob: -10.878067016601562
    8. ':' → logprob: -11.253067016601562
    9. ' (' → logprob: -11.503067016601562
    10. '()' → logprob: -11.628067016601562

Token 5: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.9534687995910645
    2. '(' → logprob: -1.4534687995910645
    3. '\' → logprob: -1.7034687995910645
    4. '\n' → logprob: -2.8284687995910645
    5. ''' → logprob: -2.9534687995910645
    6. '   ' → logprob: -3.8284687995910645
    7. ':' → logprob: -3.8284687995910645
    8. ''\' → logprob: -5.2034687995910645
    9. '    
' → logprob: -5.3284687995910645
    10. '"' → logprob: -5.3284687995910645

Token 6: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.3841434717178345
    2. 'input' → logprob: -2.134143352508545
    3. 'i' → logprob: -2.759143352508545
    4. 'r' → logprob: -2.759143352508545
    5. 'x' → logprob: -4.009143352508545
    6. '   ' → logprob: -4.009143352508545
    7. 'user' → logprob: -4.259143352508545
    8. 'a' → logprob: -5.259143352508545
    9. 'n' → logprob: -5.634143352508545
    10. '_' → logprob: -5.759143352508545

Token 7: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.5825525522232056
    2. 'input' → logprob: -1.4575525522232056
    3. ' ' → logprob: -1.5825525522232056
    4. '"' → logprob: -6.582552433013916
    5. '  ' → logprob: -7.207552433013916
    6. ' "' → logprob: -8.332552909851074
    7. ''' → logprob: -8.707552909851074
    8. ' None' → logprob: -8.957552909851074
    9. '(input' → logprob: -8.957552909851074
    10. ' '' → logprob: -9.332552909851074

Token 8: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002769571030512452
    2. '('' → logprob: -6.877769470214844
    3. '()' → logprob: -7.127769470214844
    4. ''' → logprob: -7.502769470214844
    5. '("("' → logprob: -8.502769470214844
    6. '"' → logprob: -9.877769470214844
    7. '```' → logprob: -10.377769470214844
    8. '(
' → logprob: -10.627769470214844
    9. ' (' → logprob: -11.127769470214844
    10. ' ' → logprob: -11.877769470214844

Token 9: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.7810884714126587
    2. '(' → logprob: -2.156088352203369
    3. '#' → logprob: -2.531088352203369
    4. '```' → logprob: -2.781088352203369
    5. '\n' → logprob: -2.906088352203369
    6. '()' → logprob: -3.406088352203369
    7. '<|end|>' → logprob: -3.531088352203369
    8. '' → logprob: -3.781088352203369
    9. ' ' → logprob: -4.156088352203369
    10. '.' → logprob: -4.281088352203369

Token 10: ' convert' (ID: 8452)
  Prédit: ' get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.0009354014764539897
    2. ' calculate' → logprob: -7.5009355545043945
    3. 'get' → logprob: -9.250935554504395
    4. ' add' → logprob: -9.500935554504395
    5. ' process' → logprob: -9.750935554504395
    6. ' user' → logprob: -10.625935554504395
    7. ' print' → logprob: -10.875935554504395
    8. ' check' → logprob: -11.000935554504395
    9. ' greet' → logprob: -11.125935554504395
    10. ' main' → logprob: -11.125935554504395

Token 11: '_to' (ID: 5089)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.13341575860977173
    2. '_to' → logprob: -2.133415699005127
    3. '(' → logprob: -5.508415699005127
    4. '_input' → logprob: -8.383416175842285
    5. '_string' → logprob: -8.383416175842285
    6. '_token' → logprob: -8.508416175842285
    7. '_lower' → logprob: -8.633416175842285
    8. '_space' → logprob: -8.758416175842285
    9. ' _' → logprob: -9.008416175842285
    10. '_name' → logprob: -9.133416175842285

Token 12: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.10953108221292496
    2. '_string' → logprob: -3.2345311641693115
    3. '_lower' → logprob: -3.8595311641693115
    4. '_upper' → logprob: -3.8595311641693115
    5. '_float' → logprob: -5.109530925750732
    6. '_integer' → logprob: -5.234530925750732
    7. '_str' → logprob: -5.359530925750732
    8. '_' → logprob: -5.734530925750732
    9. '_number' → logprob: -6.484530925750732
    10. '_seconds' → logprob: -8.73453140258789

Token 13: '(value' (ID: 6333)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.09065362811088562
    2. '_' → logprob: -2.465653657913208
    3. '("("' → logprob: -7.715653419494629
    4. '(_' → logprob: -8.590653419494629
    5. '(_)' → logprob: -8.715653419494629
    6. '```' → logprob: -9.215653419494629
    7. 's' → logprob: -9.215653419494629
    8. ' (' → logprob: -9.465653419494629
    9. '()' → logprob: -9.590653419494629
    10. '   ' → logprob: -9.965653419494629

Token 14: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.05706994608044624
    2. ')' → logprob: -2.932070016860962
    3. '   ' → logprob: -7.807069778442383
    4. '=' → logprob: -7.807069778442383
    5. ' ):' → logprob: -7.807069778442383
    6. '):
' → logprob: -7.932069778442383
    7. '(' → logprob: -8.807069778442383
    8. ':' → logprob: -9.057069778442383
    9. 'value' → logprob: -9.807069778442383
    10. ' ' → logprob: -9.932069778442383

Token 15: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2836025357246399
    2. '(' → logprob: -1.7836024761199951
    3. '(int' → logprob: -3.533602476119995
    4. 'int' → logprob: -3.783602476119995
    5. '    ' → logprob: -4.408602714538574
    6. ' int' → logprob: -4.533602714538574
    7. ' (' → logprob: -6.283602714538574
    8. ' return' → logprob: -7.283602714538574
    9. ' ' → logprob: -8.408602714538574
    10. '(
' → logprob: -8.408602714538574

Token 16: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03592110797762871
    2. ' int' → logprob: -4.035921096801758
    3. ' return' → logprob: -4.535921096801758
    4. 'int' → logprob: -5.535921096801758
    5. '    ' → logprob: -6.035921096801758
    6. 'return' (adapté à ' return') → logprob: -8.160921096801758
    7. ' try' → logprob: -8.785921096801758
    8. ' ' → logprob: -10.785921096801758
    9. '    
' → logprob: -10.785921096801758
    10. '```' → logprob: -10.785921096801758

Token 17: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -5.204720582696609e-05
    2. 'int' → logprob: -10.000052452087402
    3. ' ' → logprob: -12.125052452087402
    4. '   ' → logprob: -14.500052452087402
    5. '(int' → logprob: -15.375052452087402
    6. ' ' → logprob: -15.625052452087402
    7. '	int' → logprob: -16.125051498413086
    8. '```' → logprob: -16.750051498413086
    9. '  ' → logprob: -17.500051498413086
    10. ' in' → logprob: -17.625051498413086

Token 18: '(value' (ID: 6333)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3133009076118469
    2. '(value' → logprob: -1.3133008480072021
    3. ' (' → logprob: -11.188301086425781
    4. '('' → logprob: -11.688301086425781
    5. '(user' → logprob: -12.688301086425781
    6. '("("' → logprob: -12.688301086425781
    7. '(convert' → logprob: -13.063301086425781
    8. '(
' → logprob: -13.688301086425781
    9. 'value' → logprob: -14.063301086425781
    10. '(`' → logprob: -14.313301086425781

Token 19: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -9.088346359931165e-07
    2. '))' → logprob: -14.500000953674316
    3. ' )' → logprob: -15.500000953674316
    4. ')
' → logprob: -16.875
    5. ')))' → logprob: -17.125
    6. '())' → logprob: -18.5
    7. '   ' → logprob: -19.125
    8. '}' → logprob: -19.25
    9. ')return' → logprob: -19.5
    10. '')' → logprob: -19.625

Token 20: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.003058992326259613
    2. 'd' → logprob: -7.003058910369873
    3. '
' → logprob: -7.128058910369873
    4. '

' → logprob: -7.503058910369873
    5. '\' → logprob: -8.253059387207031
    6. '#' → logprob: -8.628059387207031
    7. '```' → logprob: -8.753059387207031
    8. 'x' → logprob: -10.628059387207031
    9. '\n' → logprob: -10.878059387207031
    10. ' def' → logprob: -10.878059387207031

Token 21: ' is' (ID: 382)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.5447090268135071
    2. ' add' → logprob: -2.2947089672088623
    3. ' get' → logprob: -2.6697089672088623
    4. ' main' → logprob: -2.9197089672088623
    5. ' convert' → logprob: -2.9197089672088623
    6. ' multiply' → logprob: -3.0447089672088623
    7. ' process' → logprob: -3.7947089672088623
    8. ' is' → logprob: -4.169709205627441
    9. ' square' → logprob: -4.169709205627441
    10. ' sum' → logprob: -4.669709205627441

Token 22: '_one' (ID: 26979)
  Prédit: '_even'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_even' → logprob: -0.6586993932723999
    2. '_' → logprob: -2.0336995124816895
    3. '_prime' → logprob: -2.0336995124816895
    4. '_pal' → logprob: -2.4086995124816895
    5. '_valid' → logprob: -2.7836995124816895
    6. '_positive' → logprob: -2.9086995124816895
    7. '_div' → logprob: -5.9086995124816895
    8. ' _' → logprob: -5.9086995124816895
    9. ' even' → logprob: -6.0336995124816895
    10. '_digit' → logprob: -6.6586995124816895

Token 23: '(value' (ID: 6333)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.35668182373046875
    2. '_' → logprob: -1.4816818237304688
    3. '_(' → logprob: -3.8566818237304688
    4. '_equal' → logprob: -3.8566818237304688
    5. ' (' → logprob: -5.231681823730469
    6. '(_' → logprob: -5.481681823730469
    7. '(x' → logprob: -5.856681823730469
    8. '_of' → logprob: -5.981681823730469
    9. '_div' → logprob: -6.606681823730469
    10. '(a' → logprob: -6.731681823730469

Token 24: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.395149290561676
    2. '):' → logprob: -1.3951492309570312
    3. '==' → logprob: -2.7701492309570312
    4. '=' → logprob: -4.520149230957031
    5. ')==' → logprob: -5.770149230957031
    6. ' ==' → logprob: -7.770149230957031
    7. '(' → logprob: -7.770149230957031
    8. '_' → logprob: -8.395149230957031
    9. '===' → logprob: -8.395149230957031
    10. ')=' → logprob: -9.020149230957031

Token 25: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6375515460968018
    2. '(value' → logprob: -1.2625515460968018
    3. '(' → logprob: -2.2625515460968018
    4. ' value' → logprob: -2.6375515460968018
    5. 'value' → logprob: -5.012551307678223
    6. ' (' → logprob: -5.637551307678223
    7. '    ' → logprob: -6.637551307678223
    8. ' return' → logprob: -7.387551307678223
    9. ':' → logprob: -8.637551307678223
    10. ')' → logprob: -9.137551307678223

Token 26: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13088257610797882
    2. ' value' → logprob: -2.505882501602173
    3. ' return' → logprob: -3.380882501602173
    4. 'value' → logprob: -5.005882740020752
    5. 'return' (adapté à ' return') → logprob: -8.505882263183594
    6. '    ' → logprob: -9.755882263183594
    7. ' if' → logprob: -10.130882263183594
    8. ' ' → logprob: -11.380882263183594
    9. '(value' → logprob: -11.380882263183594
    10. '  ' → logprob: -11.880882263183594

Token 27: ' value' (ID: 1432)
  Prédit: ' value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' value' → logprob: -0.0015066476771607995
    2. 'value' → logprob: -6.501506805419922
    3. ' ' → logprob: -12.876506805419922
    4. '(value' → logprob: -14.001506805419922
    5. ' ' → logprob: -14.751506805419922
    6. ' True' → logprob: -15.376506805419922
    7. '	value' → logprob: -16.501506805419922
    8. ' (' → logprob: -17.001506805419922
    9. '1' → logprob: -17.251506805419922
    10. '"value' → logprob: -17.251506805419922

Token 28: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.05510196089744568
    2. '==' → logprob: -2.9301018714904785
    3. '=' → logprob: -8.805102348327637
    4. ' ' → logprob: -11.055102348327637
    5. '[' → logprob: -11.180102348327637
    6. '.' → logprob: -11.180102348327637
    7. ')' → logprob: -11.430102348327637
    8. '===' → logprob: -12.555102348327637
    9. ' =' → logprob: -13.180102348327637
    10. '1' → logprob: -13.555102348327637

Token 29: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5231618285179138
    2. '1' → logprob: -0.8981618285179138
    3. '"' → logprob: -11.148161888122559
    4. ''' → logprob: -11.273161888122559
    5. ' '' → logprob: -12.148161888122559
    6. ' "' → logprob: -12.523161888122559
    7. ' ' → logprob: -13.648161888122559
    8. '   ' → logprob: -15.148161888122559
    9. '`' → logprob: -15.398161888122559
    10. ' one' → logprob: -15.648161888122559

Token 30: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -7.469590491382405e-05
    2. ' ' → logprob: -10.12507438659668
    3. ''' → logprob: -10.75007438659668
    4. '"' → logprob: -11.25007438659668
    5. '   ' → logprob: -16.25007438659668
    6. ' '' → logprob: -17.62507438659668
    7. '`' → logprob: -17.75007438659668
    8. ''s' → logprob: -18.50007438659668
    9. ' "' → logprob: -18.62507438659668
    10. '  ' → logprob: -18.75007438659668

Token 31: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.07305648922920227
    2. '<|end|>' → logprob: -3.69805645942688
    3. '\' → logprob: -4.323056697845459
    4. '

' → logprob: -4.698056697845459
    5. ':' → logprob: -4.698056697845459
    6. '
' → logprob: -5.323056697845459
    7. '\n' → logprob: -5.573056697845459
    8. '#' → logprob: -6.198056697845459
    9. '<|end|>' → logprob: -7.323056697845459
    10. ':def' → logprob: -7.323056697845459

Token 32: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.7556376457214355
    2. '
' → logprob: -1.2556376457214355
    3. '\n' → logprob: -2.8806376457214355
    4. '\' → logprob: -3.1306376457214355
    5. '

' → logprob: -3.1306376457214355
    6. 'd' → logprob: -3.6306376457214355
    7. '#' → logprob: -3.7556376457214355
    8. ':' → logprob: -3.8806376457214355
    9. 'e' → logprob: -4.8806376457214355
    10. '```' → logprob: -5.0056376457214355

Token 33: ' get' (ID: 717)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.19072799384593964
    2. ' is' → logprob: -2.565727949142456
    3. ' check' → logprob: -3.190727949142456
    4. ' get' → logprob: -3.440727949142456
    5. ' calculate' → logprob: -4.190728187561035
    6. ' convert' → logprob: -5.815728187561035
    7. ' factorial' → logprob: -6.690728187561035
    8. ' multiply' → logprob: -6.940728187561035
    9. 'main' → logprob: -7.065728187561035
    10. ' def' → logprob: -7.565728187561035

Token 34: '_second' (ID: 67724)
  Prédit: '_second'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_second' → logprob: -0.25254666805267334
    2. '_first' → logprob: -2.002546787261963
    3. '_' → logprob: -3.002546787261963
    4. '_input' → logprob: -3.377546787261963
    5. ' _' → logprob: -6.877546787261963
    6. '_user' → logprob: -7.252546787261963
    7. '_two' → logprob: -7.377546787261963
    8. '_last' → logprob: -7.877546787261963
    9. '_value' → logprob: -8.377546310424805
    10. '_number' → logprob: -8.377546310424805

Token 35: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.023568637669086456
    2. '_' → logprob: -3.773568630218506
    3. ' _' → logprob: -8.273569107055664
    4. '_in' → logprob: -11.398569107055664
    5. '_value' → logprob: -11.398569107055664
    6. '##_' → logprob: -11.648569107055664
    7. '_output' → logprob: -11.773569107055664
    8. '_inputs' → logprob: -12.648569107055664
    9. '_Input' → logprob: -12.648569107055664
    10. '_user' → logprob: -13.023569107055664

Token 36: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -7.612634362885728e-05
    2. '()' → logprob: -9.875076293945312
    3. ' ():' → logprob: -11.125076293945312
    4. '(' → logprob: -12.000076293945312
    5. '()>' → logprob: -13.375076293945312
    6. '()">' → logprob: -14.875076293945312
    7. '():
' → logprob: -15.125076293945312
    8. '_' → logprob: -15.625076293945312
    9. '()*' → logprob: -15.875076293945312
    10. ':' → logprob: -16.000076293945312

Token 37: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -7.171581091824919e-05
    2. 'return' → logprob: -10.00007152557373
    3. ' return' → logprob: -10.75007152557373
    4. '    ' → logprob: -12.75007152557373
    5. '```' → logprob: -14.12507152557373
    6. '       ' → logprob: -15.25007152557373
    7. '   ' → logprob: -15.25007152557373
    8. '  ' → logprob: -15.50007152557373
    9. '    
' → logprob: -15.87507152557373
    10. 'input' → logprob: -15.87507152557373

Token 38: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.5603983998298645
    2. ' return' → logprob: -0.9353983998298645
    3. '   ' → logprob: -3.3103983402252197
    4. 'input' → logprob: -9.81039810180664
    5. ' input' → logprob: -10.68539810180664
    6. ' ' → logprob: -11.93539810180664
    7. '	return' → logprob: -14.43539810180664
    8. '```' → logprob: -14.43539810180664
    9. '  ' → logprob: -14.81039810180664
    10. '    ' → logprob: -14.93539810180664

Token 39: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.00596398813650012
    2. 'input' → logprob: -5.1309638023376465
    3. ' ' → logprob: -10.505964279174805
    4. ' int' → logprob: -13.005964279174805
    5. '(input' → logprob: -13.505964279174805
    6. '_input' → logprob: -13.755964279174805
    7. ' ' → logprob: -13.755964279174805
    8. 'space' → logprob: -14.630964279174805
    9. ' space' → logprob: -14.880964279174805
    10. 'Input' → logprob: -15.380964279174805

Token 40: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00386801571585238
    2. '(' → logprob: -5.628868103027344
    3. '_' → logprob: -8.753868103027344
    4. '()
' → logprob: -10.753868103027344
    5. ' ()' → logprob: -10.878868103027344
    6. '_parent' → logprob: -10.878868103027344
    7. '`()' → logprob: -11.628868103027344
    8. ')' → logprob: -11.753868103027344
    9. ' ' → logprob: -12.003868103027344
    10. '   ' → logprob: -12.503868103027344

Token 41: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0036523377057164907
    2. 'd' → logprob: -5.753652572631836
    3. '\' → logprob: -8.753652572631836
    4. '```' → logprob: -8.753652572631836
    5. '<|end|>' → logprob: -9.628652572631836
    6. '
' → logprob: -10.128652572631836
    7. '#' → logprob: -10.753652572631836
    8. 'n' → logprob: -11.628652572631836
    9. '

' → logprob: -12.003652572631836
    10. ' def' → logprob: -12.753652572631836

Token 42: ' get' (ID: 717)
  Prédit: ' convert'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' convert' → logprob: -0.05021250993013382
    2. 'convert' → logprob: -3.0502126216888428
    3. '_convert' → logprob: -7.300212383270264
    4. ' get' → logprob: -8.300212860107422
    5. '_' → logprob: -8.425212860107422
    6. ' def' → logprob: -9.175212860107422
    7. 'def' → logprob: -9.675212860107422
    8. ' add' → logprob: -10.050212860107422
    9. ' calculate' → logprob: -10.300212860107422
    10. ' return' → logprob: -10.425212860107422

Token 43: '_th' (ID: 16038)
  Prédit: '_second'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_second' → logprob: -0.19441759586334229
    2. '_' → logprob: -2.1944174766540527
    3. '_first' → logprob: -3.3194174766540527
    4. '_th' → logprob: -3.5694174766540527
    5. '_input' → logprob: -8.694417953491211
    6. '_two' → logprob: -9.069417953491211
    7. '_value' → logprob: -9.569417953491211
    8. '_space' → logprob: -9.694417953491211
    9. ' _' → logprob: -10.069417953491211
    10. '_int' → logprob: -10.319417953491211

Token 44: 'ird' (ID: 2716)
  Prédit: 'ird'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ird' → logprob: -0.0002738522016443312
    2. 'ree' → logprob: -9.250273704528809
    3. 'i' → logprob: -9.500273704528809
    4. '```' → logprob: -10.375273704528809
    5. '_' → logprob: -11.000273704528809
    6. 'ir' → logprob: -11.125273704528809
    7. 'rid' → logprob: -11.250273704528809
    8. 'e' → logprob: -12.125273704528809
    9. '``' → logprob: -12.625273704528809
    10. 'irds' → logprob: -13.000273704528809

Token 45: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.00250217504799366
    2. '_' → logprob: -6.002501964569092
    3. ' _' → logprob: -12.25250244140625
    4. '_output' → logprob: -12.37750244140625
    5. '_value' → logprob: -12.50250244140625
    6. '_inputs' → logprob: -13.00250244140625
    7. '_token' → logprob: -13.12750244140625
    8. '(' → logprob: -13.50250244140625
    9. '_in' → logprob: -13.87750244140625
    10. '_user' → logprob: -14.00250244140625

Token 46: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0001217813478433527
    2. '()' → logprob: -9.6251220703125
    3. '(' → logprob: -9.8751220703125
    4. ' ():' → logprob: -13.6251220703125
    5. '_' → logprob: -13.7501220703125
    6. '()>' → logprob: -15.0001220703125
    7. ':' → logprob: -15.2501220703125
    8. '()(' → logprob: -15.3751220703125
    9. '():
' → logprob: -15.6251220703125
    10. 'def' → logprob: -16.1251220703125

Token 47: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.011705954559147358
    2. ' return' → logprob: -4.7617058753967285
    3. '    ' → logprob: -6.1367058753967285
    4. 'return' → logprob: -7.1367058753967285
    5. ' input' → logprob: -9.761706352233887
    6. 'input' → logprob: -10.636706352233887
    7. ' ' → logprob: -11.636706352233887
    8. '```' → logprob: -11.761706352233887
    9. '  ' → logprob: -12.011706352233887
    10. '   ' → logprob: -12.386706352233887

Token 48: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.010394318960607052
    2. 'return' (adapté à ' return') → logprob: -4.885394096374512
    3. ' return' → logprob: -5.885394096374512
    4. '    ' → logprob: -13.260394096374512
    5. ' ' → logprob: -14.135394096374512
    6. '```' → logprob: -14.135394096374512
    7. '       ' → logprob: -14.760394096374512
    8. '   ' → logprob: -15.260394096374512
    9. '  ' → logprob: -15.260394096374512
    10. '	return' → logprob: -15.885394096374512

Token 49: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.03882854804396629
    2. 'input' → logprob: -3.2888286113739014
    3. ' None' → logprob: -7.663828372955322
    4. ' ' → logprob: -8.66382884979248
    5. 'None' → logprob: -10.66382884979248
    6. '  ' → logprob: -10.78882884979248
    7. '(input' → logprob: -10.91382884979248
    8. ' int' → logprob: -11.41382884979248
    9. '<|end|>' → logprob: -11.53882884979248
    10. '()' → logprob: -11.53882884979248

Token 50: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -7.219262624857947e-05
    2. '(' → logprob: -9.875072479248047
    3. '()
' → logprob: -11.375072479248047
    4. '`()' → logprob: -13.250072479248047
    5. '()

' → logprob: -13.500072479248047
    6. ' ()' → logprob: -13.625072479248047
    7. '()<' → logprob: -13.750072479248047
    8. '()`' → logprob: -14.375072479248047
    9. '()(' → logprob: -14.875072479248047
    10. ')' → logprob: -15.000072479248047

Token 51: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.011666364967823029
    2. '\' → logprob: -5.511666297912598
    3. '\n' → logprob: -6.511666297912598
    4. 'a' → logprob: -6.886666297912598
    5. '
' → logprob: -6.886666297912598
    6. '```' → logprob: -7.261666297912598
    7. '<|end|>' → logprob: -7.386666297912598
    8. 'n' → logprob: -7.636666297912598
    9. '#' → logprob: -8.011666297912598
    10. 'd' → logprob: -8.261666297912598

Token 52: ' compute' (ID: 23864)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.49819132685661316
    2. ' process' → logprob: -2.1231913566589355
    3. ' check' → logprob: -2.2481913566589355
    4. ' convert' → logprob: -2.7481913566589355
    5. ' multiply' → logprob: -3.7481913566589355
    6. ' get' → logprob: -4.2481913566589355
    7. ' main' → logprob: -4.2481913566589355
    8. ' add' → logprob: -4.6231913566589355
    9. ' compute' → logprob: -4.6231913566589355
    10. ' validate' → logprob: -5.1231913566589355

Token 53: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.6444278955459595
    2. '_' → logprob: -0.8944278955459595
    3. '_value' → logprob: -3.76942777633667
    4. '_factor' → logprob: -3.89442777633667
    5. '_result' → logprob: -5.51942777633667
    6. '_total' → logprob: -5.51942777633667
    7. '(' → logprob: -5.89442777633667
    8. '_s' → logprob: -6.89442777633667
    9. '_product' → logprob: -7.01942777633667
    10. '_add' → logprob: -7.01942777633667

Token 54: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0015580703038722277
    2. '()' → logprob: -7.251558303833008
    3. '(a' → logprob: -8.376558303833008
    4. ' (' → logprob: -8.626558303833008
    5. '(user' → logprob: -9.626558303833008
    6. '():' → logprob: -9.876558303833008
    7. 'def' → logprob: -10.126558303833008
    8. '   ' → logprob: -10.376558303833008
    9. '(x' → logprob: -10.376558303833008
    10. '(value' → logprob: -10.626558303833008

Token 55: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0006830069469287992
    2. ' ,' → logprob: -7.875682830810547
    3. ',b' → logprob: -8.625682830810547
    4. ')' → logprob: -9.375682830810547
    5. ',a' → logprob: -10.375682830810547
    6. ',
' → logprob: -13.000682830810547
    7. ',)' → logprob: -13.500682830810547
    8. 'a' → logprob: -14.125682830810547
    9. '):' → logprob: -15.125682830810547
    10. '_,' → logprob: -15.125682830810547

Token 56: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.5759432315826416
    2. ' b' → logprob: -0.8259432315826416
    3. ' ' → logprob: -12.825942993164062
    4. ' ' → logprob: -15.575942993164062
    5. '	b' → logprob: -15.700942993164062
    6. '   ' → logprob: -15.825942993164062
    7. ',b' → logprob: -16.200942993164062
    8. ')b' → logprob: -16.200942993164062
    9. '    ' → logprob: -16.700942993164062
    10. '  ' → logprob: -16.700942993164062

Token 57: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.04516015946865082
    2. '):' → logprob: -3.1701600551605225
    3. ')' → logprob: -6.170160293579102
    4. ' ,' → logprob: -10.420160293579102
    5. ',c' → logprob: -11.545160293579102
    6. ',b' → logprob: -12.045160293579102
    7. '):
' → logprob: -12.545160293579102
    8. ':' → logprob: -12.670160293579102
    9. '),' → logprob: -12.670160293579102
    10. ',a' → logprob: -12.920160293579102

Token 58: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04591243714094162
    2. ' a' → logprob: -3.920912504196167
    3. ' return' → logprob: -4.295912265777588
    4. 'a' → logprob: -4.545912265777588
    5. 'return' → logprob: -7.920912265777588
    6. '    ' → logprob: -8.045912742614746
    7. '	return' → logprob: -10.545912742614746
    8. ' ' → logprob: -10.670912742614746
    9. '    
' → logprob: -11.045912742614746
    10. ')' → logprob: -11.420912742614746

Token 59: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.29676637053489685
    2. ' return' → logprob: -1.4217664003372192
    3. 'return' (adapté à ' return') → logprob: -4.17176628112793
    4. ' a' → logprob: -10.67176628112793
    5. '	return' → logprob: -11.42176628112793
    6. '    ' → logprob: -11.67176628112793
    7. 'a' → logprob: -11.79676628112793
    8. '   ' → logprob: -11.92176628112793
    9. '    
' → logprob: -12.67176628112793
    10. '```' → logprob: -12.92176628112793

Token 60: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.1002088338136673
    2. 'a' → logprob: -2.3502087593078613
    3. '   ' → logprob: -14.10020923614502
    4. '	a' → logprob: -14.60020923614502
    5. ' ' → logprob: -14.72520923614502
    6. ' ' → logprob: -14.85020923614502
    7. '(a' → logprob: -17.225208282470703
    8. '    ' → logprob: -17.350208282470703
    9. ' (' → logprob: -17.600208282470703
    10. '  ' → logprob: -17.725208282470703

Token 61: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.018152866512537003
    2. '+' → logprob: -4.018152713775635
    3. '+b' → logprob: -13.393153190612793
    4. ' ' → logprob: -13.768153190612793
    5. ' +
' → logprob: -15.143153190612793
    6. ' plus' → logprob: -16.518152236938477
    7. ' ' → logprob: -17.518152236938477
    8. ')' → logprob: -17.768152236938477
    9. '+B' → logprob: -17.893152236938477
    10. '<|end|>' → logprob: -18.518152236938477

Token 62: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.07889033854007721
    2. ' b' → logprob: -2.578890323638916
    3. '   ' → logprob: -15.328890800476074
    4. ' ' → logprob: -15.328890800476074
    5. '	b' → logprob: -15.703890800476074
    6. 'c' → logprob: -17.078889846801758
    7. ')b' → logprob: -17.953889846801758
    8. ' ' → logprob: -18.078889846801758
    9. ' б' → logprob: -18.203889846801758
    10. '    ' → logprob: -18.203889846801758

Token 63: '

' (ID: 279)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.40923434495925903
    2. '(' → logprob: -1.2842342853546143
    3. 'def' → logprob: -3.1592342853546143
    4. '<|end|>' → logprob: -5.534234523773193
    5. '
' → logprob: -5.659234523773193
    6. '()
' → logprob: -6.159234523773193
    7. '(
' → logprob: -6.159234523773193
    8. '()

' → logprob: -6.659234523773193
    9. '*' → logprob: -6.659234523773193
    10. '\' → logprob: -7.784234523773193

Token 64: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.03464546799659729
    2. 'if' → logprob: -4.6596455574035645
    3. 'a' → logprob: -5.0346455574035645
    4. '
' → logprob: -5.5346455574035645
    5. '#' → logprob: -5.7846455574035645
    6. '<|end|>' → logprob: -6.2846455574035645
    7. '*' → logprob: -6.4096455574035645
    8. '```' → logprob: -6.9096455574035645
    9. 'x' → logprob: -7.0346455574035645
    10. '\' → logprob: -7.0346455574035645

Token 65: ' print' (ID: 2123)
  Prédit: ' compute'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' compute' → logprob: -0.1726885885000229
    2. ' main' → logprob: -2.1726884841918945
    3. ' multiply' → logprob: -3.5476884841918945
    4. ' get' → logprob: -5.0476884841918945
    5. ' is' → logprob: -5.5476884841918945
    6. 'compute' → logprob: -6.4226884841918945
    7. ' check' → logprob: -6.5476884841918945
    8. ' def' → logprob: -7.2976884841918945
    9. ' calculate' → logprob: -7.7976884841918945
    10. 'multiply' → logprob: -7.9226884841918945

Token 66: '_result' (ID: 11623)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0008182040764950216
    2. '_' → logprob: -8.000818252563477
    3. '()' → logprob: -8.250818252563477
    4. '('' → logprob: -9.875818252563477
    5. '("")' → logprob: -10.000818252563477
    6. '_parent' → logprob: -11.000818252563477
    7. '("("' → logprob: -11.000818252563477
    8. ' (' → logprob: -11.375818252563477
    9. '<|end|>' → logprob: -11.750818252563477
    10. ')' → logprob: -11.875818252563477

Token 67: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00011129142512800172
    2. '()' → logprob: -9.87511157989502
    3. '("("' → logprob: -10.50011157989502
    4. '('' → logprob: -11.25011157989502
    5. '("")' → logprob: -12.62511157989502
    6. '("""' → logprob: -13.00011157989502
    7. '():' → logprob: -13.37511157989502
    8. ':' → logprob: -13.62511157989502
    9. '(result' → logprob: -13.75011157989502
    10. '(def' → logprob: -14.00011157989502

Token 68: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.026321083307266235
    2. ')' → logprob: -3.6513211727142334
    3. ':' → logprob: -11.526321411132812
    4. '):
' → logprob: -12.026321411132812
    5. ' ):' → logprob: -12.651321411132812
    6. '(' → logprob: -14.776321411132812
    7. '():' → logprob: -15.151321411132812
    8. ',' → logprob: -15.151321411132812
    9. '   ' → logprob: -15.651321411132812
    10. ' ' → logprob: -15.776321411132812

Token 69: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.005789900664240122
    2. 'print' → logprob: -5.505789756774902
    3. ' print' → logprob: -6.380789756774902
    4. '```' → logprob: -12.130789756774902
    5. '(print' → logprob: -12.630789756774902
    6. '(' → logprob: -12.880789756774902
    7. '    ' → logprob: -13.755789756774902
    8. '   ' → logprob: -13.880789756774902
    9. ':' → logprob: -14.130789756774902
    10. ')' → logprob: -14.130789756774902

Token 70: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.018370823934674263
    2. 'print' (adapté à ' print') → logprob: -4.393370628356934
    3. '   ' → logprob: -5.143370628356934
    4. '    ' → logprob: -13.018370628356934
    5. '```' → logprob: -13.393370628356934
    6. 'pr' → logprob: -14.393370628356934
    7. 'p' → logprob: -14.643370628356934
    8. ' p' → logprob: -14.643370628356934
    9. '	print' → logprob: -15.018370628356934
    10. ' prin' → logprob: -15.393370628356934

Token 71: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.009783241897821426
    2. '(result' → logprob: -4.6347832679748535
    3. ' (' → logprob: -10.759782791137695
    4. '("("' → logprob: -13.759782791137695
    5. ' ' → logprob: -14.134782791137695
    6. '(

' → logprob: -14.384782791137695
    7. '(
' → logprob: -14.634782791137695
    8. '('' → logprob: -14.634782791137695
    9. '(f' → logprob: -14.884782791137695
    10. '()' → logprob: -14.884782791137695

Token 72: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9361264946837764e-07
    2. ')
' → logprob: -16.875
    3. ' )' → logprob: -17.625
    4. ')`' → logprob: -17.75
    5. '))' → logprob: -18.625
    6. '()' → logprob: -19.75
    7. '),' → logprob: -20.625
    8. ')}' → logprob: -20.75
    9. '')' → logprob: -20.75
    10. '())' → logprob: -20.75

Token 73: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.06309936940670013
    2. 'a' → logprob: -4.063099384307861
    3. 'first' → logprob: -4.063099384307861
    4. 'result' → logprob: -4.688099384307861
    5. 'value' → logprob: -4.938099384307861
    6. 'if' → logprob: -5.313099384307861
    7. 'input' → logprob: -6.188099384307861
    8. 'x' → logprob: -7.063099384307861
    9. 'n' → logprob: -7.313099384307861
    10. 'number' → logprob: -7.688099384307861

Token 74: ' process' (ID: 2273)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.00012916464766021818
    2. ' def' → logprob: -9.750128746032715
    3. ' run' → logprob: -10.750128746032715
    4. ' process' → logprob: -11.000128746032715
    5. 'main' → logprob: -11.250128746032715
    6. '_main' → logprob: -12.000128746032715
    7. ' __' → logprob: -12.875128746032715
    8. ' _' → logprob: -13.250128746032715
    9. ' execute' → logprob: -13.375128746032715
    10. ' calculate' → logprob: -13.500128746032715

Token 75: '_branch' (ID: 71162)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1081148311495781
    2. '_input' → logprob: -2.983114719390869
    3. '_' → logprob: -3.483114719390869
    4. '_first' → logprob: -4.983114719390869
    5. '(_' → logprob: -6.108114719390869
    6. ' (' → logprob: -6.233114719390869
    7. '_(' → logprob: -6.733114719390869
    8. '_inputs' → logprob: -6.733114719390869
    9. '()' → logprob: -6.983114719390869
    10. '(_)' → logprob: -6.983114719390869

Token 76: '_one' (ID: 26979)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.4268024265766144
    2. '(' → logprob: -1.551802396774292
    3. '_' → logprob: -2.551802396774292
    4. '1' → logprob: -3.551802396774292
    5. '()' → logprob: -4.801802635192871
    6. '_one' → logprob: -5.301802635192871
    7. '(a' → logprob: -5.426802635192871
    8. '_a' → logprob: -5.801802635192871
    9. '(_' → logprob: -6.176802635192871
    10. '(value' → logprob: -6.426802635192871

Token 77: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.010992052033543587
    2. '(' → logprob: -4.635992050170898
    3. '()' → logprob: -7.385992050170898
    4. ' ():' → logprob: -8.260992050170898
    5. '_' → logprob: -8.760992050170898
    6. '():
' → logprob: -9.885992050170898
    7. '(_' → logprob: -10.635992050170898
    8. ':' → logprob: -10.635992050170898
    9. '(_:' → logprob: -11.260992050170898
    10. '```' → logprob: -11.385992050170898

Token 78: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0010373335098847747
    2. '    
' → logprob: -7.251037120819092
    3. ' input' → logprob: -9.50103759765625
    4. 'value' → logprob: -9.50103759765625
    5. ' value' → logprob: -9.62603759765625
    6. 'input' → logprob: -10.25103759765625
    7. ':' → logprob: -11.37603759765625
    8. '
' → logprob: -11.62603759765625
    9. '```' → logprob: -11.87603759765625
    10. '(value' → logprob: -12.00103759765625

Token 79: ' print' (ID: 2123)
  Prédit: 'value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'value' → logprob: -0.9080485701560974
    2. 'first' → logprob: -1.5330486297607422
    3. '   ' → logprob: -2.033048629760742
    4. 'a' → logprob: -2.033048629760742
    5. 'val' → logprob: -3.658048629760742
    6. 'input' → logprob: -3.908048629760742
    7. 'x' → logprob: -3.908048629760742
    8. 'second' → logprob: -4.158048629760742
    9. ' first' → logprob: -4.283048629760742
    10. ' value' → logprob: -4.658048629760742

Token 80: '_result' (ID: 11623)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.08344768732786179
    2. '("' → logprob: -2.9584476947784424
    3. '("("' → logprob: -3.7084476947784424
    4. '('' → logprob: -5.958447456359863
    5. '()' → logprob: -7.833447456359863
    6. '("")' → logprob: -8.583447456359863
    7. ' (' → logprob: -8.708447456359863
    8. '("(' → logprob: -9.458447456359863
    9. '((' → logprob: -10.583447456359863
    10. ' ' → logprob: -10.708447456359863

Token 81: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07811149209737778
    2. '(convert' → logprob: -3.453111410140991
    3. '(get' → logprob: -3.703111410140991
    4. '(com' → logprob: -4.20311164855957
    5. '('' → logprob: -6.57811164855957
    6. '((' → logprob: -7.07811164855957
    7. '(()' → logprob: -7.57811164855957
    8. '("("' → logprob: -7.70311164855957
    9. ' (' → logprob: -8.07811164855957
    10. '(
' → logprob: -9.32811164855957

Token 82: 'Hello' (ID: 13225)
  Prédit: 'Branch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Branch' → logprob: -0.6586992144584656
    2. 'One' → logprob: -1.2836992740631104
    3. 'First' → logprob: -2.2836992740631104
    4. 'Hello' → logprob: -3.7836992740631104
    5. 'Option' → logprob: -4.158699035644531
    6. 'Input' → logprob: -4.783699035644531
    7. 'Processing' → logprob: -5.033699035644531
    8. 'Enter' → logprob: -5.158699035644531
    9. 'True' → logprob: -5.408699035644531
    10. 'Success' → logprob: -5.533699035644531

Token 83: ' World' (ID: 5922)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.33764374256134033
    2. ' World' → logprob: -1.5876437425613403
    3. ' ")' → logprob: -3.212643623352051
    4. '")' → logprob: -4.087643623352051
    5. 'World' → logprob: -4.712643623352051
    6. ' world' → logprob: -4.962643623352051
    7. '!")' → logprob: -6.212643623352051
    8. ' ' → logprob: -6.462643623352051
    9. ' there' → logprob: -6.587643623352051
    10. '!' → logprob: -7.087643623352051

Token 84: '")

' (ID: 10822)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -0.002213777042925358
    2. '!")' → logprob: -6.127213954925537
    3. ')' → logprob: -11.752213478088379
    4. '\")' → logprob: -12.002213478088379
    5. '"' → logprob: -12.127213478088379
    6. ')")' → logprob: -12.627213478088379
    7. '")
' → logprob: -13.252213478088379
    8. '\"' → logprob: -13.627213478088379
    9. 'def' → logprob: -14.377213478088379
    10. '\n' → logprob: -14.752213478088379

Token 85: 'def' (ID: 1314)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5517833828926086
    2. 'def' → logprob: -1.1767833232879639
    3. '\' → logprob: -3.051783323287964
    4. '

' → logprob: -3.551783323287964
    5. '\n' → logprob: -3.551783323287964
    6. '(' → logprob: -5.926783561706543
    7. '()' → logprob: -6.676783561706543
    8. '<|end|>' → logprob: -6.676783561706543
    9. '' → logprob: -6.801783561706543
    10. '```' → logprob: -7.176783561706543

Token 86: ' process' (ID: 2273)
  Prédit: ' process'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' process' → logprob: -0.010863174684345722
    2. 'process' → logprob: -4.635863304138184
    3. ' def' → logprob: -6.885863304138184
    4. 'def' → logprob: -10.010863304138184
    5. ' ' → logprob: -11.510863304138184
    6. '_process' → logprob: -11.760863304138184
    7. '_' → logprob: -12.385863304138184
    8. '	process' → logprob: -12.510863304138184
    9. '(process' → logprob: -12.885863304138184
    10. ' branch' → logprob: -13.135863304138184

Token 87: '_branch' (ID: 71162)
  Prédit: '_branch'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_branch' → logprob: -0.021387532353401184
    2. '_two' → logprob: -4.146387577056885
    3. '_' → logprob: -5.271387577056885
    4. '_second' → logprob: -9.521387100219727
    5. '_three' → logprob: -9.896387100219727
    6. '_one' → logprob: -10.896387100219727
    7. ' _' → logprob: -11.021387100219727
    8. '_br' → logprob: -11.271387100219727
    9. '_b' → logprob: -11.896387100219727
    10. '__' → logprob: -11.896387100219727

Token 88: '_two' (ID: 54305)
  Prédit: '_two'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_two' → logprob: -0.000529202981851995
    2. '_one' → logprob: -8.000529289245605
    3. '_' → logprob: -8.750529289245605
    4. '_three' → logprob: -11.000529289245605
    5. '_t' → logprob: -12.750529289245605
    6. 'two' → logprob: -13.000529289245605
    7. ' _' → logprob: -13.375529289245605
    8. '_tw' → logprob: -13.375529289245605
    9. 'Two' → logprob: -13.875529289245605
    10. '_TWO' → logprob: -14.000529289245605

Token 89: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -9.93710636976175e-05
    2. ' ():' → logprob: -9.375099182128906
    3. '()' → logprob: -12.125099182128906
    4. '():
' → logprob: -12.125099182128906
    5. '(' → logprob: -13.250099182128906
    6. ':' → logprob: -14.000099182128906
    7. ' ()' → logprob: -15.500099182128906
    8. 'def' → logprob: -15.500099182128906
    9. '_' → logprob: -15.625099182128906
    10. '()>' → logprob: -16.125099182128906

Token 90: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.21208316087722778
    2. 'result' → logprob: -2.462083101272583
    3. 'value' → logprob: -3.462083101272583
    4. 'print' → logprob: -3.837083101272583
    5. 'a' → logprob: -4.337083339691162
    6. ' result' → logprob: -4.587083339691162
    7. 'x' → logprob: -5.212083339691162
    8. ' value' → logprob: -5.462083339691162
    9. ' a' → logprob: -5.712083339691162
    10. ' x' → logprob: -5.837083339691162

Token 91: ' second' (ID: 3099)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.8735890984535217
    2. 'value' → logprob: -1.373589038848877
    3. 'x' → logprob: -2.248589038848877
    4. 'first' → logprob: -2.373589038848877
    5. 'val' → logprob: -3.248589038848877
    6. 'print' → logprob: -3.373589038848877
    7. 'result' → logprob: -3.748589038848877
    8. 'second' (adapté à ' second') → logprob: -4.748589038848877
    9. 'num' → logprob: -4.873589038848877
    10. 'input' → logprob: -5.623589038848877

Token 92: ' =' (ID: 314)
  Prédit: '_input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.09080899506807327
    2. '_value' → logprob: -2.5908091068267822
    3. '_' → logprob: -5.090808868408203
    4. '_val' → logprob: -5.465808868408203
    5. ' =' → logprob: -6.965808868408203
    6. '_result' → logprob: -9.215808868408203
    7. '_s' → logprob: -9.590808868408203
    8. '_second' → logprob: -9.590808868408203
    9. '=' → logprob: -9.715808868408203
    10. '_number' → logprob: -10.465808868408203

Token 93: ' convert' (ID: 8452)
  Prédit: ' get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.3407265841960907
    2. ' convert' → logprob: -1.340726613998413
    3. ' input' → logprob: -4.590726375579834
    4. ' int' → logprob: -4.840726375579834
    5. 'convert' → logprob: -5.340726375579834
    6. 'get' → logprob: -5.590726375579834
    7. ' ' → logprob: -8.215726852416992
    8. 'int' → logprob: -8.965726852416992
    9. 'input' → logprob: -9.840726852416992
    10. '  ' → logprob: -10.340726852416992

Token 94: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: -7.107425062713446e-06
    2. '_' → logprob: -12.750006675720215
    3. '_t' → logprob: -13.000006675720215
    4. ' _' → logprob: -14.125006675720215
    5. '(_' → logprob: -14.500006675720215
    6. 'to' → logprob: -15.375006675720215
    7. 't' → logprob: -15.500006675720215
    8. '__' → logprob: -16.37500762939453
    9. '_(' → logprob: -17.00000762939453
    10. '(' → logprob: -17.37500762939453

Token 95: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.0004235243541188538
    2. '_' → logprob: -8.625423431396484
    3. 'int' → logprob: -8.875423431396484
    4. '_input' → logprob: -9.750423431396484
    5. '_str' → logprob: -10.500423431396484
    6. '_string' → logprob: -12.375423431396484
    7. '_in' → logprob: -13.250423431396484
    8. '(_' → logprob: -13.375423431396484
    9. '_second' → logprob: -13.375423431396484
    10. '_float' → logprob: -13.500423431396484

Token 96: '(get' (ID: 7119)
  Prédit: '(get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(get' → logprob: -0.0031917323358356953
    2. '(' → logprob: -5.753191947937012
    3. ' (' → logprob: -11.628191947937012
    4. '(
' → logprob: -12.503191947937012
    5. '(

' → logprob: -14.378191947937012
    6. '(convert' → logprob: -15.128191947937012
    7. '((' → logprob: -16.128190994262695
    8. '(g' → logprob: -16.253190994262695
    9. '(generate' → logprob: -16.503190994262695
    10. '(Get' → logprob: -16.753190994262695

Token 97: '_second' (ID: 67724)
  Prédit: '_second'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_second' → logprob: -3.7697225252486533e-06
    2. '_' → logprob: -12.750003814697266
    3. '_first' → logprob: -14.500003814697266
    4. '_s' → logprob: -16.500003814697266
    5. '_se' → logprob: -16.625003814697266
    6. '_seconds' → logprob: -17.125003814697266
    7. '_sec' → logprob: -17.250003814697266
    8. '```' → logprob: -17.500003814697266
    9. '_secondary' → logprob: -18.500003814697266
    10. 'second' → logprob: -19.000003814697266

Token 98: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -7.941850526549388e-06
    2. '_' → logprob: -11.875007629394531
    3. 'input' → logprob: -14.375007629394531
    4. '()' → logprob: -16.87500762939453
    5. ')' → logprob: -17.12500762939453
    6. '```' → logprob: -17.12500762939453
    7. '_Input' → logprob: -17.25000762939453
    8. '_inputs' → logprob: -17.50000762939453
    9. ' _' → logprob: -17.62500762939453
    10. '_INPUT' → logprob: -17.75000762939453

Token 99: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0012208210537210107
    2. '()' → logprob: -6.751220703125
    3. '())
' → logprob: -10.876220703125
    4. '()))' → logprob: -10.876220703125
    5. ')' → logprob: -11.751220703125
    6. ' ())' → logprob: -12.626220703125
    7. '())

' → logprob: -13.751220703125
    8. '()
' → logprob: -15.501220703125
    9. '();)' → logprob: -16.126220703125
    10. '(' → logprob: -16.626220703125

Token 100: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7336135506629944
    2. '   ' → logprob: -1.6086134910583496
    3. '<|end|>' → logprob: -1.9836134910583496
    4. ')' → logprob: -2.4836134910583496
    5. ' ' → logprob: -3.7336134910583496
    6. '()' → logprob: -3.9836134910583496
    7. '    
' → logprob: -3.9836134910583496
    8. ' 
' → logprob: -5.10861349105835
    9. '  
' → logprob: -5.23361349105835
    10. '<|end|>' → logprob: -5.48361349105835

Token 101: ' third' (ID: 6914)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5988292694091797
    2. 'third' (adapté à ' third') → logprob: -0.8488292694091797
    3. ' third' → logprob: -4.09882926940918
    4. 'if' → logprob: -5.84882926940918
    5. ' if' → logprob: -6.34882926940918
    6. ' ' → logprob: -7.47382926940918
    7. 'first' → logprob: -7.84882926940918
    8. ' first' → logprob: -9.34882926940918
    9. 'second' → logprob: -9.59882926940918
    10. '  ' → logprob: -9.97382926940918

Token 102: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.06206739321351051
    2. '=' → logprob: -2.8120675086975098
    3. ' ' → logprob: -10.312067031860352
    4. '_' → logprob: -10.437067031860352
    5. ')' → logprob: -10.562067031860352
    6. '  ' → logprob: -12.312067031860352
    7. '   ' → logprob: -12.437067031860352
    8. '    ' → logprob: -13.937067031860352
    9. '	' → logprob: -15.187067031860352
    10. ',' → logprob: -15.562067031860352

Token 103: ' convert' (ID: 8452)
  Prédit: ' convert'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' convert' → logprob: -0.023250950500369072
    2. 'convert' → logprob: -3.7732510566711426
    3. '(convert' → logprob: -12.898250579833984
    4. ' get' → logprob: -13.023250579833984
    5. ' compute' → logprob: -15.398250579833984
    6. ' ' → logprob: -15.398250579833984
    7. '.convert' → logprob: -15.898250579833984
    8. '_convert' → logprob: -16.523250579833984
    9. 'get' → logprob: -17.023250579833984
    10. '    ' → logprob: -17.023250579833984

Token 104: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: 0.0
    2. 'to' → logprob: -17.5
    3. '```' → logprob: -17.5
    4. 'To' → logprob: -18.625
    5. '##_' → logprob: -19.125
    6. '   ' → logprob: -19.375
    7. '"_' → logprob: -19.5
    8. ''_' → logprob: -19.75
    9. ' _' → logprob: -20.125
    10. ' to' → logprob: -20.375

Token 105: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.25203564763069153
    2. 'int' → logprob: -1.5020356178283691
    3. 'convert' → logprob: -9.627036094665527
    4. ' int' → logprob: -10.877036094665527
    5. 'get' → logprob: -11.252036094665527
    6. 'input' → logprob: -12.502036094665527
    7. 'Int' → logprob: -13.252036094665527
    8. '_input' → logprob: -13.627036094665527
    9. 't' → logprob: -15.502036094665527
    10. ' ' → logprob: -15.627036094665527

Token 106: '(get' (ID: 7119)
  Prédit: '(get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(get' → logprob: -0.0001239196863025427
    2. '(' → logprob: -9.000123977661133
    3. ' (' → logprob: -14.875123977661133
    4. 'get' → logprob: -18.250123977661133
    5. '(
' → logprob: -18.625123977661133
    6. '('' → logprob: -18.750123977661133
    7. '("("' → logprob: -18.750123977661133
    8. '(Get' → logprob: -20.000123977661133
    9. '(find' → logprob: -20.125123977661133
    10. '=get' → logprob: -20.125123977661133

Token 107: '_th' (ID: 16038)
  Prédit: '_th'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_th' → logprob: -1.3856492842023727e-06
    2. '_second' → logprob: -14.000000953674316
    3. '_first' → logprob: -15.125000953674316
    4. 'third' → logprob: -16.250001907348633
    5. '_input' → logprob: -16.625001907348633
    6. '_' → logprob: -17.500001907348633
    7. '_three' → logprob: -17.750001907348633
    8. 'th' → logprob: -18.750001907348633
    9. '_TH' → logprob: -19.000001907348633
    10. ' third' → logprob: -19.875001907348633

Token 108: 'ird' (ID: 2716)
  Prédit: 'ird'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ird' → logprob: -4.978233846486546e-05
    2. 'rd' → logprob: -10.750049591064453
    3. 'd' → logprob: -11.000049591064453
    4. 'rid' → logprob: -12.750049591064453
    5. 'third' → logprob: -12.875049591064453
    6. '_' → logprob: -13.625049591064453
    7. 'ir' → logprob: -13.875049591064453
    8. 'irdi' → logprob: -14.125049591064453
    9. 'id' → logprob: -14.625049591064453
    10. '```' → logprob: -14.875049591064453

Token 109: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -8.41866585687967e-06
    2. 'Input' → logprob: -12.000008583068848
    3. 'input' → logprob: -13.250008583068848
    4. '_INPUT' → logprob: -15.875008583068848
    5. '_value' → logprob: -17.12500762939453
    6. ')' → logprob: -17.37500762939453
    7. '_Input' → logprob: -17.37500762939453
    8. '-input' → logprob: -17.50000762939453
    9. '_inputs' → logprob: -17.87500762939453
    10. '_in' → logprob: -17.87500762939453

Token 110: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0032017158810049295
    2. '()' → logprob: -5.753201484680176
    3. ')' → logprob: -11.253201484680176
    4. '())
' → logprob: -12.128201484680176
    5. ' ())' → logprob: -12.128201484680176
    6. '()))' → logprob: -16.253202438354492
    7. '()
' → logprob: -16.753202438354492
    8. '())

' → logprob: -16.753202438354492
    9. '(' → logprob: -17.253202438354492
    10. '()]' → logprob: -17.628202438354492

Token 111: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.04101578891277313
    2. '   ' → logprob: -3.291015863418579
    3. '<|end|>' → logprob: -6.791015625
    4. '    
' → logprob: -7.291015625
    5. '  
' → logprob: -7.791015625
    6. ')' → logprob: -8.666015625
    7. '<|end|>' → logprob: -8.666015625
    8. ' 
' → logprob: -9.541015625
    9. '
' → logprob: -9.666015625
    10. '\n' → logprob: -9.791015625

Token 112: ' result' (ID: 1534)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' (adapté à ' result') → logprob: -0.3871608376502991
    2. ' result' → logprob: -1.5121607780456543
    3. '   ' → logprob: -2.5121607780456543
    4. 'sum' → logprob: -5.137160778045654
    5. '
' → logprob: -5.262160778045654
    6. 'print' → logprob: -5.637160778045654
    7. ' return' → logprob: -6.637160778045654
    8. ' sum' → logprob: -6.762160778045654
    9. 'return' → logprob: -6.887160778045654
    10. ' print' → logprob: -7.262160778045654

Token 113: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.008617646060883999
    2. '=' → logprob: -4.758617877960205
    3. 's' → logprob: -13.633617401123047
    4. '_' → logprob: -13.883617401123047
    5. ' ' → logprob: -15.258617401123047
    6. ')' → logprob: -15.258617401123047
    7. '  ' → logprob: -15.883617401123047
    8. ',' → logprob: -16.258617401123047
    9. '   ' → logprob: -16.508617401123047
    10. ' ' → logprob: -17.258617401123047

Token 114: ' compute' (ID: 23864)
  Prédit: ' compute'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' compute' → logprob: -0.18038980662822723
    2. 'compute' → logprob: -1.8053897619247437
    3. ' second' → logprob: -7.680389881134033
    4. 'second' → logprob: -9.305389404296875
    5. ' third' → logprob: -10.430389404296875
    6. ' first' → logprob: -10.805389404296875
    7. '   ' → logprob: -11.055389404296875
    8. ' ' → logprob: -11.305389404296875
    9. ' computer' → logprob: -13.055389404296875
    10. 'third' → logprob: -13.305389404296875

Token 115: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -6.704273118884885e-07
    2. '_second' → logprob: -15.375000953674316
    3. '_s' → logprob: -15.500000953674316
    4. '_' → logprob: -16.5
    5. 'sum' → logprob: -17.625
    6. ' _' → logprob: -17.625
    7. 's' → logprob: -19.0
    8. '__' → logprob: -19.0
    9. '_SUM' → logprob: -20.0
    10. '_result' → logprob: -20.0

Token 116: '(second' (ID: 78627)
  Prédit: '(second'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(second' → logprob: -4.310693111619912e-05
    2. '(' → logprob: -10.125042915344238
    3. '(first' → logprob: -13.625042915344238
    4. ' (' → logprob: -13.625042915344238
    5. '(
' → logprob: -14.750042915344238
    6. '(th' → logprob: -16.875043869018555
    7. 'second' → logprob: -17.375043869018555
    8. ' ' → logprob: -17.375043869018555
    9. '(se' → logprob: -17.375043869018555
    10. '(seconds' → logprob: -17.500043869018555

Token 117: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00015955790877342224
    2. ' ,' → logprob: -8.75015926361084
    3. ' ' → logprob: -14.25015926361084
    4. 'third' → logprob: -15.87515926361084
    5. ')' → logprob: -16.750160217285156
    6. ',
' → logprob: -16.875160217285156
    7. '   ' → logprob: -17.250160217285156
    8. '`,' → logprob: -17.625160217285156
    9. '‌,' → logprob: -17.875160217285156
    10. '3' → logprob: -18.375160217285156

Token 118: ' third' (ID: 6914)
  Prédit: ' third'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' third' → logprob: -0.428705632686615
    2. 'third' → logprob: -1.0537056922912598
    3. '3' → logprob: -13.428705215454102
    4. ' ' → logprob: -13.678705215454102
    5. '.third' → logprob: -14.303705215454102
    6. '   ' → logprob: -14.928705215454102
    7. 'th' → logprob: -15.178705215454102
    8. '第三' → logprob: -16.0537052154541
    9. ' треть' → logprob: -16.1787052154541
    10. '  ' → logprob: -16.3037052154541

Token 119: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.12702059745788574
    2. ')
' → logprob: -2.1270205974578857
    3. '   ' → logprob: -9.502020835876465
    4. ')

' → logprob: -11.877020835876465
    5. ')
' → logprob: -12.002020835876465
    6. ' )' → logprob: -13.127020835876465
    7. ' )
' → logprob: -13.627020835876465
    8. ' ' → logprob: -14.002020835876465
    9. ')return' → logprob: -14.877020835876465
    10. '()' → logprob: -15.752020835876465

Token 120: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00012594614236149937
    2. 'print' → logprob: -9.125125885009766
    3. ' print' → logprob: -12.000125885009766
    4. '
' → logprob: -12.375125885009766
    5. '    
' → logprob: -12.875125885009766
    6. 'process' → logprob: -13.125125885009766
    7. ' process' → logprob: -14.250125885009766
    8. ')' → logprob: -15.000125885009766
    9. '       ' → logprob: -15.250125885009766
    10. '(print' → logprob: -15.250125885009766

Token 121: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.03484247252345085
    2. ' print' → logprob: -3.5348424911499023
    3. '   ' → logprob: -5.284842491149902
    4. '	print' → logprob: -12.409842491149902
    5. '(print' → logprob: -13.034842491149902
    6. '
' → logprob: -13.534842491149902
    7. '  ' → logprob: -14.159842491149902
    8. '.print' → logprob: -14.159842491149902
    9. ' ' → logprob: -14.409842491149902
    10. '    
' → logprob: -14.534842491149902

Token 122: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -9.088346359931165e-07
    2. '_' → logprob: -14.250000953674316
    3. 'result' → logprob: -16.5
    4. '(result' → logprob: -17.625
    5. '_res' → logprob: -18.375
    6. '_RESULT' → logprob: -18.5
    7. '_Result' → logprob: -18.875
    8. '_results' → logprob: -19.0
    9. '(_' → logprob: -19.25
    10. ' _' → logprob: -19.375

Token 123: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.018169023096561432
    2. '(' → logprob: -4.018168926239014
    3. ' (' → logprob: -11.018169403076172
    4. '(results' → logprob: -13.643169403076172
    5. '(resultado' → logprob: -14.768169403076172
    6. '(res' → logprob: -15.268169403076172
    7. '(return' → logprob: -15.643169403076172
    8. '('' → logprob: -15.768169403076172
    9. '("("' → logprob: -15.893169403076172
    10. '(
' → logprob: -16.643169403076172

Token 124: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.200166469876422e-06
    2. ')
' → logprob: -12.250004768371582
    3. ')

' → logprob: -16.5000057220459
    4. ' )' → logprob: -16.6250057220459
    5. '<|end|>' → logprob: -17.2500057220459
    6. '()' → logprob: -18.0000057220459
    7. '   ' → logprob: -18.2500057220459
    8. '}' → logprob: -18.2500057220459
    9. '())' → logprob: -18.6250057220459
    10. '))' → logprob: -18.6250057220459

Token 125: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0031881670001894236
    2. 'if' → logprob: -5.878188133239746
    3. 'value' → logprob: -8.128188133239746
    4. '
' → logprob: -10.128188133239746
    5. 'input' → logprob: -10.628188133239746
    6. 'first' → logprob: -12.128188133239746
    7. 'x' → logprob: -12.628188133239746
    8. '#' → logprob: -13.378188133239746
    9. 'n' → logprob: -13.378188133239746
    10. 'choice' → logprob: -13.503188133239746

Token 126: ' main' (ID: 2758)
  Prédit: ' process'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' process' → logprob: -0.3579040467739105
    2. ' get' → logprob: -1.982904076576233
    3. ' main' → logprob: -2.1079039573669434
    4. 'process' → logprob: -3.3579039573669434
    5. 'get' → logprob: -6.482903957366943
    6. ' convert' → logprob: -6.607903957366943
    7. ' def' → logprob: -6.607903957366943
    8. ' ' → logprob: -7.357903957366943
    9. 'main' → logprob: -7.607903957366943
    10. 'def' → logprob: -7.982903957366943

Token 127: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -4.870950215263292e-05
    2. ' ():' → logprob: -10.125048637390137
    3. '():
' → logprob: -12.500048637390137
    4. '()' → logprob: -12.625048637390137
    5. '(' → logprob: -13.500048637390137
    6. '()>' → logprob: -16.375049591064453
    7. ':' → logprob: -17.000049591064453
    8. '_' → logprob: -17.000049591064453
    9. '():
' → logprob: -17.375049591064453
    10. '(:' → logprob: -18.125049591064453

Token 128: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7076877355575562
    2. ' first' → logprob: -0.7076877355575562
    3. 'first' → logprob: -4.457687854766846
    4. '    
' → logprob: -7.582687854766846
    5. ' value' → logprob: -7.707687854766846
    6. ' choice' → logprob: -7.832687854766846
    7. '
' → logprob: -7.832687854766846
    8. ' input' → logprob: -8.082687377929688
    9. 'value' → logprob: -8.707687377929688
    10. 'input' → logprob: -9.082687377929688

Token 129: ' first' (ID: 1577)
  Prédit: ' first'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' first' → logprob: -0.3185996413230896
    2. 'first' (adapté à ' first') → logprob: -1.3185997009277344
    3. ' choice' → logprob: -6.193599700927734
    4. ' value' → logprob: -6.818599700927734
    5. ' user' → logprob: -7.193599700927734
    6. 'value' → logprob: -7.443599700927734
    7. 'choice' → logprob: -7.943599700927734
    8. 'user' → logprob: -8.443599700927734
    9. '   ' → logprob: -9.943599700927734
    10. 'val' → logprob: -10.318599700927734

Token 130: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.6337510347366333
    2. '_value' → logprob: -1.2587510347366333
    3. ' =' → logprob: -1.8837510347366333
    4. '_' → logprob: -3.7587509155273438
    5. '_val' → logprob: -4.758750915527344
    6. '=' → logprob: -6.758750915527344
    7. ' ' → logprob: -9.258750915527344
    8. '()' → logprob: -9.258750915527344
    9. '(' → logprob: -11.133750915527344
    10. '=input' → logprob: -11.258750915527344

Token 131: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.007858703844249249
    2. '=' → logprob: -5.257858753204346
    3. '()' → logprob: -6.257858753204346
    4. '_' → logprob: -7.632858753204346
    5. '(' → logprob: -9.507858276367188
    6. '_value' → logprob: -9.632858276367188
    7. ' ' → logprob: -9.882858276367188
    8. ' ()' → logprob: -10.882858276367188
    9. '_val' → logprob: -12.507858276367188
    10. '   ' → logprob: -13.007858276367188

Token 132: ' get' (ID: 717)
  Prédit: 'convert'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'convert' → logprob: -0.3380376994609833
    2. ' convert' → logprob: -1.3380377292633057
    3. ' get' → logprob: -4.213037490844727
    4. 'get' → logprob: -4.713037490844727
    5. ' input' → logprob: -8.213037490844727
    6. 'input' → logprob: -9.088037490844727
    7. '   ' → logprob: -9.088037490844727
    8. 'int' → logprob: -9.713037490844727
    9. ' int' → logprob: -9.713037490844727
    10. '  ' → logprob: -10.588037490844727

Token 133: '_first' (ID: 29347)
  Prédit: '_first'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_first' → logprob: -1.580929347255733e-05
    2. '_second' → logprob: -11.125016212463379
    3. '_' → logprob: -15.000016212463379
    4. ' _' → logprob: -15.500016212463379
    5. '_FIRST' → logprob: -15.625016212463379
    6. '_one' → logprob: -16.250015258789062
    7. 'first' → logprob: -17.000015258789062
    8. '_First' → logprob: -17.125015258789062
    9. '_f' → logprob: -17.375015258789062
    10. ' first' → logprob: -17.750015258789062

Token 134: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -6.134509021649137e-05
    2. '_' → logprob: -9.75006103515625
    3. '_token' → logprob: -13.87506103515625
    4. ' _' → logprob: -14.75006103515625
    5. '_value' → logprob: -15.25006103515625
    6. '_line' → logprob: -15.25006103515625
    7. '_output' → logprob: -15.37506103515625
    8. '_inputs' → logprob: -15.62506103515625
    9. '_user' → logprob: -16.00006103515625
    10. '_space' → logprob: -16.12506103515625

Token 135: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -7.822646693966817e-06
    2. '()
' → logprob: -12.125007629394531
    3. '())' → logprob: -14.000007629394531
    4. '()

' → logprob: -15.000007629394531
    5. ' ()' → logprob: -15.000007629394531
    6. '()`' → logprob: -15.375007629394531
    7. '()]' → logprob: -15.750007629394531
    8. '()<' → logprob: -16.62500762939453
    9. '().' → logprob: -16.75000762939453
    10. '();' → logprob: -16.75000762939453

Token 136: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.0666594505310059
    2. ' if' → logprob: -1.0666594505310059
    3. '   ' → logprob: -1.6916594505310059
    4. 'if' → logprob: -2.566659450531006
    5. '    
' → logprob: -3.566659450531006
    6. ' 
' → logprob: -4.691659450531006
    7. '  
' → logprob: -5.316659450531006
    8. '\n' → logprob: -5.316659450531006
    9. '   
' → logprob: -7.191659450531006
    10. '<|end|>' → logprob: -7.316659450531006

Token 137: ' first' (ID: 1577)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.0835384875535965
    2. 'if' → logprob: -2.83353853225708
    3. '
' → logprob: -4.33353853225708
    4. ' 
' → logprob: -5.83353853225708
    5. '   ' → logprob: -6.58353853225708
    6. ' first' → logprob: -6.70853853225708
    7. ' try' → logprob: -7.20853853225708
    8. '    
' → logprob: -7.45853853225708
    9. ' value' → logprob: -7.70853853225708
    10. 'value' → logprob: -8.083538055419922

Token 138: '_value' (ID: 6734)
  Prédit: '_input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.3265315294265747
    2. '_' → logprob: -1.3265315294265747
    3. '_value' → logprob: -4.451531410217285
    4. '_token' → logprob: -8.201531410217285
    5. '_val' → logprob: -8.201531410217285
    6. '_space' → logprob: -9.076531410217285
    7. '_output' → logprob: -9.201531410217285
    8. '_lower' → logprob: -9.451531410217285
    9. '_int' → logprob: -9.951531410217285
    10. ' =' → logprob: -9.951531410217285

Token 139: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0012465433683246374
    2. '=' → logprob: -6.751246452331543
    3. '_' → logprob: -9.876246452331543
    4. ' ' → logprob: -10.751246452331543
    5. ')' → logprob: -12.751246452331543
    6. ' )' → logprob: -15.876246452331543
    7. '   ' → logprob: -16.25124740600586
    8. '_space' → logprob: -16.25124740600586
    9. ' =)' → logprob: -16.75124740600586
    10. ' ==' → logprob: -16.87624740600586

Token 140: ' convert' (ID: 8452)
  Prédit: ' convert'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' convert' → logprob: -0.10027233511209488
    2. 'convert' → logprob: -2.3502724170684814
    3. ' int' → logprob: -9.850272178649902
    4. 'int' → logprob: -11.350272178649902
    5. '(convert' → logprob: -14.600272178649902
    6. '   ' → logprob: -15.225272178649902
    7. '_convert' → logprob: -15.850272178649902
    8. '.convert' → logprob: -16.35027313232422
    9. ' conversion' → logprob: -16.35027313232422
    10. ' ' → logprob: -17.22527313232422

Token 141: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: 0.0
    2. '_' → logprob: -17.25
    3. 'to' → logprob: -19.125
    4. '_t' → logprob: -19.5
    5. '_first' → logprob: -19.5
    6. '_from' → logprob: -19.625
    7. '_of' → logprob: -19.75
    8. '##_' → logprob: -20.0
    9. '_into' → logprob: -20.25
    10. '_this' → logprob: -20.25

Token 142: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.00033832306507974863
    2. 'int' → logprob: -8.000338554382324
    3. ' int' → logprob: -14.000338554382324
    4. '_' → logprob: -14.250338554382324
    5. '_first' → logprob: -14.750338554382324
    6. ' _' → logprob: -15.125338554382324
    7. 't' → logprob: -15.750338554382324
    8. '<int' → logprob: -16.000337600708008
    9. 'nt' → logprob: -16.125337600708008
    10. '_t' → logprob: -16.250337600708008

Token 143: '(first' (ID: 31998)
  Prédit: '(first'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(first' → logprob: -0.014171270653605461
    2. '(' → logprob: -4.264171123504639
    3. ' (' → logprob: -12.264171600341797
    4. '(second' → logprob: -13.639171600341797
    5. '(get' → logprob: -15.014171600341797
    6. '(f' → logprob: -15.264171600341797
    7. '(
' → logprob: -15.514171600341797
    8. '(parent' → logprob: -15.639171600341797
    9. '('' → logprob: -15.764171600341797
    10. '(convert' → logprob: -16.264171600341797

Token 144: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.018629441037774086
    2. '(first' → logprob: -4.018629550933838
    3. '(input' → logprob: -8.76862907409668
    4. 'input' → logprob: -9.26862907409668
    5. '(' → logprob: -9.51862907409668
    6. ')' → logprob: -10.01862907409668
    7. ')(' → logprob: -10.39362907409668
    8. '_(' → logprob: -10.51862907409668
    9. '_' → logprob: -10.89362907409668
    10. '_value' → logprob: -11.51862907409668

Token 145: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0010596063220873475
    2. ')
' → logprob: -6.876059532165527
    3. '()' → logprob: -11.501059532165527
    4. '())' → logprob: -11.626059532165527
    5. ')

' → logprob: -12.876059532165527
    6. ' )' → logprob: -13.001059532165527
    7. '   ' → logprob: -13.251059532165527
    8. ' ' → logprob: -14.626059532165527
    9. '()
' → logprob: -15.376059532165527
    10. '())
' → logprob: -16.126060485839844

Token 146: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.046960968524217606
    2. '   ' → logprob: -4.171960830688477
    3. '    
' → logprob: -4.671960830688477
    4. '  
' → logprob: -4.671960830688477
    5. ' if' → logprob: -5.046960830688477
    6. 'if' → logprob: -6.046960830688477
    7. '\n' → logprob: -7.171960830688477
    8. ' 
' → logprob: -7.421960830688477
    9. '```' → logprob: -7.421960830688477
    10. '<|end|>' → logprob: -7.796960830688477

Token 147: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.6920157074928284
    2. ' if' → logprob: -0.8170157074928284
    3. '
' → logprob: -3.3170156478881836
    4. '   ' → logprob: -3.9420156478881836
    5. '    
' → logprob: -6.942015647888184
    6. ' 
' → logprob: -7.192015647888184
    7. '  
' → logprob: -9.192015647888184
    8. '	if' → logprob: -9.942015647888184
    9. 'i' → logprob: -10.192015647888184
    10. ' ' → logprob: -10.442015647888184

Token 148: ' is' (ID: 382)
  Prédit: ' is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.0013421354815363884
    2. '_' → logprob: -6.751342296600342
    3. ' ' → logprob: -9.126341819763184
    4. ' ' → logprob: -10.126341819763184
    5. 'is' → logprob: -11.126341819763184
    6. ' (' → logprob: -12.376341819763184
    7. ' _' → logprob: -13.876341819763184
    8. '_is' → logprob: -14.001341819763184
    9. ' not' → logprob: -14.126341819763184
    10. '	is' → logprob: -14.501341819763184

Token 149: '_one' (ID: 26979)
  Prédit: '_one'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_one' → logprob: 0.0
    2. 'one' → logprob: -17.875
    3. '_' → logprob: -18.875
    4. '_ONE' → logprob: -18.875
    5. 'One' → logprob: -19.75
    6. '_first' → logprob: -20.875
    7. '_once' → logprob: -21.0
    8. ' one' → logprob: -21.75
    9. '_two' → logprob: -21.875
    10. '_on' → logprob: -22.0

Token 150: '(first' (ID: 31998)
  Prédit: '(first'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(first' → logprob: -0.011172904632985592
    2. '(' → logprob: -4.511172771453857
    3. ' (' → logprob: -9.011173248291016
    4. '(second' → logprob: -13.136173248291016
    5. '(value' → logprob: -14.761173248291016
    6. ' ' → logprob: -15.386173248291016
    7. 'first' → logprob: -16.011173248291016
    8. '(parent' → logprob: -17.011173248291016
    9. '(

' → logprob: -17.136173248291016
    10. ' first' → logprob: -17.386173248291016

Token 151: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.31646251678466797
    2. '(first' → logprob: -1.316462516784668
    3. '(' → logprob: -5.941462516784668
    4. ' (' → logprob: -8.066462516784668
    5. ')' → logprob: -9.316462516784668
    6. '(value' → logprob: -9.941462516784668
    7. ')(' → logprob: -10.066462516784668
    8. ' ' → logprob: -10.441462516784668
    9. 'value' → logprob: -11.691462516784668
    10. '_(' → logprob: -12.316462516784668

Token 152: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0006041454034857452
    2. '):
' → logprob: -8.000603675842285
    3. ')' → logprob: -9.125603675842285
    4. '():' → logprob: -9.375603675842285
    5. ' ):' → logprob: -9.750603675842285
    6. '()' → logprob: -11.750603675842285
    7. '(' → logprob: -12.500603675842285
    8. ':' → logprob: -13.000603675842285
    9. '(first' → logprob: -14.000603675842285
    10. '   ' → logprob: -14.250603675842285

Token 153: '       ' (ID: 309)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.1115533858537674
    2. ':' → logprob: -2.736553430557251
    3. '():
' → logprob: -3.486553430557251
    4. '       ' → logprob: -4.986553192138672
    5. '()' → logprob: -6.236553192138672
    6. ':
' → logprob: -7.861553192138672
    7. '):' → logprob: -8.111553192138672
    8. '(' → logprob: -8.361553192138672
    9. '   ' → logprob: -8.361553192138672
    10. ' ():' → logprob: -8.736553192138672

Token 154: ' process' (ID: 2273)
  Prédit: ' process'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' process' → logprob: -0.6260281205177307
    2. 'process' (adapté à ' process') → logprob: -0.8760281205177307
    3. '       ' → logprob: -3.126028060913086
    4. '   ' → logprob: -5.376028060913086
    5. '	process' → logprob: -8.626028060913086
    6. '(process' → logprob: -9.001028060913086
    7. '
' → logprob: -11.251028060913086
    8. '_process' → logprob: -11.876028060913086
    9. '        
' → logprob: -12.626028060913086
    10. '.process' → logprob: -12.751028060913086

Token 155: '_branch' (ID: 71162)
  Prédit: '_branch'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_branch' → logprob: -1.8624639324116288e-06
    2. '_' → logprob: -13.625001907348633
    3. ' _' → logprob: -15.250001907348633
    4. '_br' → logprob: -15.875001907348633
    5. '_b' → logprob: -16.750001907348633
    6. '_bridge' → logprob: -16.875001907348633
    7. '"_' → logprob: -16.875001907348633
    8. '_line' → logprob: -16.875001907348633
    9. '__' → logprob: -18.000001907348633
    10. '_block' → logprob: -18.750001907348633

Token 156: '_one' (ID: 26979)
  Prédit: '_one'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_one' → logprob: -5.848420551046729e-05
    2. '_two' → logprob: -9.7500581741333
    3. '_on' → logprob: -16.125059127807617
    4. '_once' → logprob: -17.875059127807617
    5. 'one' → logprob: -18.375059127807617
    6. '_o' → logprob: -20.000059127807617
    7. '_ONE' → logprob: -20.000059127807617
    8. '_' → logprob: -20.125059127807617
    9. ' one' → logprob: -20.625059127807617
    10. ' _' → logprob: -20.750059127807617

Token 157: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.008616581559181213
    2. '()
' → logprob: -4.7586164474487305
    3. '()
' → logprob: -14.25861644744873
    4. ' ()' → logprob: -14.50861644744873
    5. '()

' → logprob: -14.50861644744873
    6. '()`' → logprob: -15.25861644744873
    7. '()"' → logprob: -16.008617401123047
    8. '()\' → logprob: -16.758617401123047
    9. '()<' → logprob: -18.258617401123047
    10. '(' → logprob: -18.383617401123047

Token 158: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.025064177811145782
    2. 'else' → logprob: -4.275063991546631
    3. ' else' → logprob: -4.525063991546631
    4. '	else' → logprob: -12.775064468383789
    5. '    
' → logprob: -13.150064468383789
    6. ' ' → logprob: -14.275064468383789
    7. 'elif' → logprob: -14.275064468383789
    8. '```' → logprob: -14.900064468383789
    9. '<|end|>' → logprob: -15.025064468383789
    10. '_else' → logprob: -15.650064468383789

Token 159: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.5975227355957031
    2. '   ' → logprob: -0.8475227355957031
    3. ' else' → logprob: -3.847522735595703
    4. ' ' → logprob: -11.597522735595703
    5. '	else' → logprob: -11.847522735595703
    6. 'elif' → logprob: -13.347522735595703
    7. '_else' → logprob: -14.472522735595703
    8. '  ' → logprob: -14.597522735595703
    9. '```' → logprob: -15.347522735595703
    10. 'elser' → logprob: -16.472522735595703

Token 160: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0028065370861440897
    2. ':
' → logprob: -5.877806663513184
    3. ' :' → logprob: -13.752806663513184
    4. ':

' → logprob: -15.877806663513184
    5. '   ' → logprob: -16.002805709838867
    6. ' :
' → logprob: -16.002805709838867
    7. '       ' → logprob: -16.127805709838867
    8. '<|end|>' → logprob: -16.877805709838867
    9. ':
' → logprob: -17.127805709838867
    10. '():' → logprob: -17.377805709838867

Token 161: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0014280942268669605
    2. 'process' → logprob: -6.626428127288818
    3. ' process' → logprob: -9.25142765045166
    4. '   ' → logprob: -12.87642765045166
    5. '(process' → logprob: -14.00142765045166
    6. '        
' → logprob: -14.25142765045166
    7. '<|end|>' → logprob: -15.00142765045166
    8. '	process' → logprob: -15.12642765045166
    9. '      ' → logprob: -15.75142765045166
    10. '     ' → logprob: -15.87642765045166

Token 162: ' process' (ID: 2273)
  Prédit: 'process'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'process' (adapté à ' process') → logprob: -0.20146742463111877
    2. ' process' → logprob: -1.7014673948287964
    3. '       ' → logprob: -9.951467514038086
    4. '   ' → logprob: -12.576467514038086
    5. '	process' → logprob: -12.951467514038086
    6. ' ' → logprob: -14.826467514038086
    7. '_process' → logprob: -15.826467514038086
    8. '.process' → logprob: -16.576467514038086
    9. ' proces' → logprob: -16.951467514038086
    10. 'proces' → logprob: -17.076467514038086

Token 163: '_branch' (ID: 71162)
  Prédit: '_branch'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_branch' → logprob: -6.2729995988775045e-06
    2. '_br' → logprob: -12.500006675720215
    3. '_' → logprob: -13.375006675720215
    4. '_b' → logprob: -15.000006675720215
    5. 'branch' → logprob: -16.2500057220459
    6. '_bridge' → logprob: -16.2500057220459
    7. '_process' → logprob: -16.3750057220459
    8. ' _' → logprob: -17.1250057220459
    9. '"_' → logprob: -17.3750057220459
    10. '_block' → logprob: -17.5000057220459

Token 164: '_two' (ID: 54305)
  Prédit: '_two'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_two' → logprob: -1.6240566083070007e-06
    2. 'two' → logprob: -13.500001907348633
    3. '_tw' → logprob: -15.625001907348633
    4. '_t' → logprob: -17.875001907348633
    5. '_three' → logprob: -18.625001907348633
    6. '_one' → logprob: -18.750001907348633
    7. '_TWO' → logprob: -19.875001907348633
    8. ' two' → logprob: -20.375001907348633
    9. '_to' → logprob: -20.750001907348633
    10. '(two' → logprob: -21.250001907348633

Token 165: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0011927293380722404
    2. '()
' → logprob: -6.751192569732666
    3. '()

' → logprob: -10.876193046569824
    4. '(' → logprob: -13.376193046569824
    5. '()\' → logprob: -13.876193046569824
    6. ' ()' → logprob: -15.001193046569824
    7. '(
' → logprob: -15.376193046569824
    8. '()`' → logprob: -15.751193046569824
    9. '()
' → logprob: -15.876193046569824
    10. '()<' → logprob: -16.376192092895508

Token 166: 'main' (ID: 7731)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.005200793966650963
    2. '\n' → logprob: -5.6302008628845215
    3. 'if' → logprob: -6.7552008628845215
    4. '(
' → logprob: -9.255200386047363
    5. '()
' → logprob: -9.255200386047363
    6. '  
' → logprob: -9.880200386047363
    7. '

' → logprob: -10.380200386047363
    8. '
' → logprob: -10.380200386047363
    9. 'main' → logprob: -10.380200386047363
    10. '\' → logprob: -10.755200386047363

Token 167: '()' (ID: 416)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.08895647525787354
    2. '()' → logprob: -2.463956356048584
    3. '(
' → logprob: -11.588956832885742
    4. '(

' → logprob: -12.713956832885742
    5. '();' → logprob: -13.838956832885742
    6. ' (' → logprob: -14.088956832885742
    7. ')' → logprob: -14.838956832885742
    8. '.' → logprob: -15.088956832885742
    9. '(**' → logprob: -15.338956832885742
    10. '('' → logprob: -15.588956832885742


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 165
Tokens correctement prédits (1ère position, stricte): 82
Tokens correctement prédits (1ère position, avec adaptation): 89
Tokens correctement prédits (top 10): 146
Précision stricte (1ère position): 49.70%
Précision adaptée (1ère position): 53.94%
Précision (top 10): 88.48%
================================================================================
