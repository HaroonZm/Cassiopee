================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:15:42
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def input_n_and_k():
    return map(int, input().split())

def initialize_A(n):
    return [-1] * n

def input_d():
    return int(input())

def input_a():
    return list(map(int, input().split()))

def update_A_for_a(A, a):
    d = len(a)
    for j in range(d):
        x = to_zero_indexed(a[j])
        set_A_if_unset(A, x)

def to_zero_indexed(val):
    return val - 1

def set_A_if_unset(A, idx):
    if A[idx] == -1:
        A[idx] = 1

def count_minus_ones(A):
    cnt = 0
    for i in range(len(A)):
        if is_minus_one(A[i]):
            cnt += 1
    return cnt

def is_minus_one(val):
    return val == -1

def solve():
    n, k = input_n_and_k()
    A = initialize_A(n)
    for i in range(k):
        d = input_d()
        a = input_a()
        update_A_for_a(A, a)
    ans = count_minus_ones(A)
    print(ans)

solve()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' input' (ID: 3422)
  → Token d'amorce (pas de prédiction)

Token 2: '_n' (ID: 2170)
  → Token d'amorce (pas de prédiction)

Token 3: '_and' (ID: 18645)
  Prédit: 'ame'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ame' → logprob: -0.6969605088233948
    2. '_' → logprob: -1.69696044921875
    3. '(' → logprob: -2.19696044921875
    4. 'u' → logprob: -2.32196044921875
    5. 'a' → logprob: -2.82196044921875
    6. 'umber' → logprob: -4.07196044921875
    7. '```' → logprob: -4.69696044921875
    8. '()' → logprob: -5.44696044921875
    9. '(a' → logprob: -5.69696044921875
    10. 'put' → logprob: -5.69696044921875

Token 4: '_k' (ID: 11637)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.3639346957206726
    2. 'return' → logprob: -1.9889347553253174
    3. 'output' → logprob: -2.3639347553253174
    4. 'process' → logprob: -3.1139347553253174
    5. 'sum' → logprob: -4.863934516906738
    6. 'calculate' → logprob: -5.613934516906738
    7. '_output' → logprob: -5.863934516906738
    8. '_print' → logprob: -6.113934516906738
    9. '_return' → logprob: -6.488934516906738
    10. 'compute' → logprob: -6.613934516906738

Token 5: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.018649449571967125
    2. '(' → logprob: -4.018649578094482
    3. '(:' → logprob: -8.768649101257324
    4. '()' → logprob: -8.893649101257324
    5. ' ():' → logprob: -9.143649101257324
    6. ':' → logprob: -9.518649101257324
    7. '(":' → logprob: -12.393649101257324
    8. ' (' → logprob: -12.893649101257324
    9. '_' → logprob: -12.893649101257324
    10. '(n' → logprob: -13.143649101257324

Token 6: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.5663018226623535
    2. ':' → logprob: -1.3163018226623535
    3. '():' → logprob: -2.5663018226623535
    4. '   ' → logprob: -2.6913018226623535
    5. '``' → logprob: -5.8163018226623535
    6. '    
' → logprob: -5.9413018226623535
    7. '(' → logprob: -6.0663018226623535
    8. ':return' → logprob: -6.6913018226623535
    9. ':
' → logprob: -6.8163018226623535
    10. '(
' → logprob: -7.0663018226623535

Token 7: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.39185217022895813
    2. 'n' → logprob: -1.6418521404266357
    3. 'return' (adapté à ' return') → logprob: -2.5168521404266357
    4. '```' → logprob: -4.141852378845215
    5. 'x' → logprob: -4.391852378845215
    6. ' ' → logprob: -5.266852378845215
    7. 'i' → logprob: -5.641852378845215
    8. 'r' → logprob: -6.141852378845215
    9. ' return' → logprob: -6.516852378845215
    10. '    ' → logprob: -6.516852378845215

Token 8: ' map' (ID: 4014)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.1314995139837265
    2. ' ' → logprob: -2.7564995288848877
    3. ' input' → logprob: -3.0064995288848877
    4. ' map' → logprob: -5.631499290466309
    5. 'int' → logprob: -5.756499290466309
    6. ' None' → logprob: -6.756499290466309
    7. 'input' → logprob: -6.881499290466309
    8. '  ' → logprob: -7.631499290466309
    9. ' []' → logprob: -7.756499290466309
    10. ' list' → logprob: -8.756499290466309

Token 9: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.021520081907510757
    2. '(lambda' → logprob: -4.771520137786865
    3. '(int' → logprob: -4.896520137786865
    4. '<|end|>' → logprob: -5.896520137786865
    5. '(str' → logprob: -7.521520137786865
    6. '(None' → logprob: -8.271519660949707
    7. ' (' → logprob: -8.396519660949707
    8. '```' → logprob: -8.646519660949707
    9. '(
' → logprob: -9.334019660949707
    10. '<|end|>' → logprob: -9.521519660949707

Token 10: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.2753731608390808
    2. '(' → logprob: -1.9003732204437256
    3. ')' → logprob: -2.6503732204437256
    4. 'input' → logprob: -4.0253729820251465
    5. '('' → logprob: -7.5253729820251465
    6. ' input' → logprob: -7.5253729820251465
    7. '(user' → logprob: -8.400373458862305
    8. '<|end|>' → logprob: -8.400373458862305
    9. '```' → logprob: -8.525373458862305
    10. ' (' → logprob: -8.900373458862305

Token 11: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.07007481157779694
    2. ' input' → logprob: -2.6950747966766357
    3. ')' → logprob: -9.070075035095215
    4. '(input' → logprob: -10.945075035095215
    5. '	input' → logprob: -13.320075035095215
    6. '=input' → logprob: -13.945075035095215
    7. ' )' → logprob: -13.945075035095215
    8. ' ' → logprob: -13.945075035095215
    9. ',input' → logprob: -15.320075035095215
    10. '[input' → logprob: -15.320075035095215

Token 12: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.6355292797088623
    2. '('' → logprob: -1.3855292797088623
    3. '())' → logprob: -1.6355292797088623
    4. '(' → logprob: -4.260529518127441
    5. '(()' → logprob: -5.635529518127441
    6. '().' → logprob: -6.635529518127441
    7. '("("' → logprob: -6.635529518127441
    8. '("' → logprob: -7.010529518127441
    9. '`()' → logprob: -7.260529518127441
    10. ' ())' → logprob: -7.635529518127441

Token 13: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0001438266917830333
    2. 'strip' → logprob: -9.000144004821777
    3. ' split' → logprob: -10.875144004821777
    4. 'rstrip' → logprob: -13.625144004821777
    5. '(split' → logprob: -16.12514305114746
    6. 'spl' → logprob: -16.37514305114746
    7. 'startswith' → logprob: -17.37514305114746
    8. 's' → logprob: -18.37514305114746
    9. ')' → logprob: -18.75014305114746
    10. ' strip' → logprob: -19.25014305114746

Token 14: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.014833083376288414
    2. '()))' → logprob: -4.389832973480225
    3. '()' → logprob: -6.264832973480225
    4. ')' → logprob: -8.139833450317383
    5. '))' → logprob: -9.389833450317383
    6. '(' → logprob: -11.264833450317383
    7. ' ())' → logprob: -11.389833450317383
    8. '('' → logprob: -12.764833450317383
    9. '()),' → logprob: -12.889833450317383
    10. '`()' → logprob: -13.014833450317383

Token 15: 'def' (ID: 1314)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.6684179306030273
    2. 'def' → logprob: -2.0434179306030273
    3. '#' → logprob: -2.2934179306030273
    4. '(' → logprob: -2.4184179306030273
    5. '()' → logprob: -2.9184179306030273
    6. '(n' → logprob: -3.2934179306030273
    7. '(
' → logprob: -4.168417930603027
    8. '```' → logprob: -4.293417930603027
    9. 'x' → logprob: -4.543417930603027
    10. 'a' → logprob: -5.293417930603027

Token 16: ' initialize' (ID: 18400)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.12282829731702805
    2. ' input' → logprob: -3.247828245162964
    3. ' calculate' → logprob: -3.872828245162964
    4. ' solve' → logprob: -4.372828483581543
    5. ' factorial' → logprob: -4.872828483581543
    6. ' find' → logprob: -5.122828483581543
    7. ' output' → logprob: -5.122828483581543
    8. ' process' → logprob: -5.247828483581543
    9. ' space' → logprob: -5.372828483581543
    10. ' solution' → logprob: -5.872828483581543

Token 17: '_A' (ID: 6829)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.49893271923065186
    2. '_' → logprob: -0.9989327192306519
    3. '_variables' → logprob: -4.748932838439941
    4. '_parameters' → logprob: -6.248932838439941
    5. '_array' → logprob: -6.748932838439941
    6. '_values' → logprob: -6.748932838439941
    7. '_(' → logprob: -6.873932838439941
    8. '(_' → logprob: -6.873932838439941
    9. '_arrays' → logprob: -6.873932838439941
    10. ' (' → logprob: -7.373932838439941

Token 18: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.010264652781188488
    2. '_' → logprob: -5.385264873504639
    3. '()' → logprob: -6.510264873504639
    4. '(A' → logprob: -6.635264873504639
    5. '```' → logprob: -6.885264873504639
    6. '():' → logprob: -7.760264873504639
    7. '_A' → logprob: -8.01026439666748
    8. 'A' → logprob: -8.51026439666748
    9. '[' → logprob: -9.01026439666748
    10. '("("' → logprob: -9.38526439666748

Token 19: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0011128316400572658
    2. ',' → logprob: -7.251112937927246
    3. '):
' → logprob: -8.376112937927246
    4. ')' → logprob: -8.751112937927246
    5. ':' → logprob: -12.001112937927246
    6. ' ):' → logprob: -12.626112937927246
    7. '   ' → logprob: -13.876112937927246
    8. '=' → logprob: -14.251112937927246
    9. ',n' → logprob: -14.376112937927246
    10. '):

' → logprob: -14.501112937927246

Token 20: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0002302383363712579
    2. 'A' → logprob: -8.875229835510254
    3. ' return' → logprob: -10.375229835510254
    4. '    
' → logprob: -10.500229835510254
    5. 'return' → logprob: -11.750229835510254
    6. ' A' → logprob: -12.500229835510254
    7. '   ' → logprob: -12.500229835510254
    8. '       ' → logprob: -12.625229835510254
    9. '    ' → logprob: -13.125229835510254
    10. '
' → logprob: -13.250229835510254

Token 21: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -1.017865777015686
    2. ' return' → logprob: -1.392865777015686
    3. '   ' → logprob: -1.642865777015686
    4. '[' → logprob: -1.767865777015686
    5. ' [' → logprob: -3.8928656578063965
    6. 'A' → logprob: -5.7678656578063965
    7. '[A' → logprob: -6.1428656578063965
    8. '[]' → logprob: -8.517866134643555
    9. ' A' → logprob: -9.267866134643555
    10. '[
' → logprob: -9.392866134643555

Token 22: ' [-' (ID: 20191)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.038252633064985275
    2. ' [' → logprob: -3.288252592086792
    3. '[n' → logprob: -9.038252830505371
    4. '[[' → logprob: -9.663252830505371
    5. ' [[' → logprob: -11.663252830505371
    6. '[int' → logprob: -11.788252830505371
    7. '[list' → logprob: -13.413252830505371
    8. '[A' → logprob: -13.538252830505371
    9. '[len' → logprob: -13.663252830505371
    10. '[]' → logprob: -13.663252830505371

Token 23: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.02021249197423458
    2. '(' → logprob: -4.145212650299072
    3. 'float' → logprob: -6.145212650299072
    4. 'int' → logprob: -8.020212173461914
    5. 'n' → logprob: -8.145212173461914
    6. '10' → logprob: -8.145212173461914
    7. '-' → logprob: -8.270212173461914
    8. '(n' → logprob: -8.770212173461914
    9. '100' → logprob: -9.270212173461914
    10. '2' → logprob: -9.270212173461914

Token 24: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.051054392009973526
    2. ' for' → logprob: -3.4260544776916504
    3. ']*' → logprob: -4.17605447769165
    4. ' ]' → logprob: -6.42605447769165
    5. 'for' → logprob: -8.676054000854492
    6. ']*(' → logprob: -9.426054000854492
    7. ']+' → logprob: -12.301054000854492
    8. ',' → logprob: -12.426054000854492
    9. '0' → logprob: -12.551054000854492
    10. '1' → logprob: -12.676054000854492

Token 25: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.23187156021595
    2. '*' → logprob: -1.6068716049194336
    3. '*n' → logprob: -5.981871604919434
    4. '+' → logprob: -6.481871604919434
    5. ' ' → logprob: -6.981871604919434
    6. '0' → logprob: -7.606871604919434
    7. ' for' → logprob: -8.481871604919434
    8. '[' → logprob: -8.606871604919434
    9. '*[' → logprob: -8.731871604919434
    10. ' +' → logprob: -8.856871604919434

Token 26: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.3134138584136963
    2. ' n' → logprob: -1.3134138584136963
    3. '(n' → logprob: -8.813413619995117
    4. ' (' → logprob: -12.938413619995117
    5. '(' → logprob: -14.438413619995117
    6. '	n' → logprob: -14.813413619995117
    7. ')n' → logprob: -15.938413619995117
    8. ' ' → logprob: -18.188413619995117
    9. '_n' → logprob: -18.938413619995117
    10. ' ' → logprob: -20.313413619995117

Token 27: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.2889169752597809
    2. '

' → logprob: -1.6639169454574585
    3. '
' → logprob: -2.913917064666748
    4. '<|end|>' → logprob: -5.538917064666748
    5. '\' → logprob: -7.163917064666748
    6. '```' → logprob: -7.288917064666748
    7. ' def' → logprob: -7.913917064666748
    8. 'n' → logprob: -8.16391658782959
    9. 'newline' → logprob: -8.16391658782959
    10. '<|end|>' → logprob: -8.28891658782959

Token 28: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.005412927363067865
    2. '

' → logprob: -6.130413055419922
    3. '
' → logprob: -6.255413055419922
    4. '<|end|>' → logprob: -7.130413055419922
    5. ' def' → logprob: -9.005413055419922
    6. '\' → logprob: -9.130413055419922
    7. '```' → logprob: -9.130413055419922
    8. '<|end|>' → logprob: -10.130413055419922
    9. '#' → logprob: -10.380413055419922
    10. 'n' → logprob: -10.755413055419922

Token 29: ' input' (ID: 3422)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.9073127508163452
    2. ' solve' → logprob: -1.6573127508163452
    3. ' update' → logprob: -2.4073128700256348
    4. ' process' → logprob: -2.5323128700256348
    5. ' input' → logprob: -3.0323128700256348
    6. ' find' → logprob: -3.5323128700256348
    7. 'main' → logprob: -4.032312870025635
    8. ' count' → logprob: -4.032312870025635
    9. 'solve' → logprob: -4.157312870025635
    10. ' initialize' → logprob: -4.282312870025635

Token 30: '_d' (ID: 1565)
  Prédit: '_n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_n' → logprob: -0.6761577725410461
    2. '_' → logprob: -0.9261577725410461
    3. '_k' → logprob: -3.4261577129364014
    4. '_array' → logprob: -3.8011577129364014
    5. '()' → logprob: -4.3011579513549805
    6. '_list' → logprob: -5.0511579513549805
    7. '_a' → logprob: -5.3011579513549805
    8. '_data' → logprob: -5.6761579513549805
    9. '_values' → logprob: -6.1761579513549805
    10. '(' → logprob: -6.3011579513549805

Token 31: '():
' (ID: 8595)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.53415447473526
    2. '_' → logprob: -1.7841544151306152
    3. '_array' → logprob: -2.4091544151306152
    4. '_and' → logprob: -3.1591544151306152
    5. '_i' → logprob: -4.034154415130615
    6. '_values' → logprob: -4.659154415130615
    7. 'ata' → logprob: -4.659154415130615
    8. '_e' → logprob: -4.784154415130615
    9. 'e' → logprob: -5.034154415130615
    10. ' ()' → logprob: -5.159154415130615

Token 32: '   ' (ID: 271)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.4549882411956787
    2. '   ' → logprob: -2.0799882411956787
    3. 'return' → logprob: -2.4549882411956787
    4. ' ()' → logprob: -2.9549882411956787
    5. 'int' → logprob: -3.9549882411956787
    6. 'def' → logprob: -4.079988479614258
    7. ' return' → logprob: -4.204988479614258
    8. 'd' → logprob: -4.329988479614258
    9. ')' → logprob: -4.329988479614258
    10. '():' → logprob: -4.954988479614258

Token 33: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.012665153481066227
    2. ' return' → logprob: -4.637665271759033
    3. 'int' → logprob: -6.512665271759033
    4. '   ' → logprob: -6.637665271759033
    5. 'd' → logprob: -10.137664794921875
    6. 'def' → logprob: -10.387664794921875
    7. 'n' → logprob: -10.887664794921875
    8. ' int' → logprob: -12.012664794921875
    9. 'input' → logprob: -12.512664794921875
    10. '  ' → logprob: -13.512664794921875

Token 34: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.07865675538778305
    2. 'list' → logprob: -3.2036566734313965
    3. '[int' → logprob: -4.3286566734313965
    4. 'map' → logprob: -4.7036566734313965
    5. ' int' → logprob: -4.7036566734313965
    6. ' list' → logprob: -6.4536566734313965
    7. '[]' → logprob: -7.0786566734313965
    8. ' map' → logprob: -7.3286566734313965
    9. 'input' → logprob: -8.078657150268555
    10. '[' → logprob: -9.703657150268555

Token 35: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.12697754800319672
    2. '(' → logprob: -2.1269774436950684
    3. 'input' → logprob: -10.626977920532227
    4. ' (' → logprob: -11.126977920532227
    5. '()' → logprob: -12.001977920532227
    6. '(
' → logprob: -13.501977920532227
    7. '(

' → logprob: -14.126977920532227
    8. '(int' → logprob: -15.251977920532227
    9. '(in' → logprob: -15.251977920532227
    10. ' ' → logprob: -15.376977920532227

Token 36: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0032252485398203135
    2. '()' → logprob: -5.753225326538086
    3. ')' → logprob: -10.253225326538086
    4. ' ())' → logprob: -12.003225326538086
    5. '()))' → logprob: -12.628225326538086
    6. '(' → logprob: -14.003225326538086
    7. '().' → logprob: -14.378225326538086
    8. '())
' → logprob: -14.503225326538086
    9. '();)' → logprob: -14.753225326538086
    10. '())

' → logprob: -15.378225326538086

Token 37: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5172402858734131
    2. '

' → logprob: -1.142240285873413
    3. '
' → logprob: -2.767240285873413
    4. '\n' → logprob: -4.642240524291992
    5. '\' → logprob: -5.517240524291992
    6. '<|end|>' → logprob: -6.142240524291992
    7. 'd' → logprob: -6.517240524291992
    8. ' 

' → logprob: -6.892240524291992
    9. '```' → logprob: -6.892240524291992
    10. 'n' → logprob: -7.267240524291992

Token 38: ' input' (ID: 3422)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.1313924789428711
    2. ' solve' → logprob: -3.006392478942871
    3. ' process' → logprob: -3.756392478942871
    4. ' input' → logprob: -4.381392478942871
    5. 'main' → logprob: -4.881392478942871
    6. ' calculate' → logprob: -5.006392478942871
    7. 'solve' → logprob: -5.631392478942871
    8. ' dfs' → logprob: -6.131392478942871
    9. ' update' → logprob: -6.381392478942871
    10. '_' → logprob: -6.506392478942871

Token 39: '_a' (ID: 10852)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.402381956577301
    2. '()' → logprob: -1.5273818969726562
    3. '_d' → logprob: -3.6523818969726562
    4. '_n' → logprob: -3.7773818969726562
    5. '_a' → logprob: -3.9023818969726562
    6. '_s' → logprob: -4.277381896972656
    7. '_data' → logprob: -4.527381896972656
    8. '_k' → logprob: -5.527381896972656
    9. '_array' → logprob: -5.902381896972656
    10. '(' → logprob: -6.277381896972656

Token 40: '():
' (ID: 8595)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.2274330109357834
    2. '():' → logprob: -2.2274329662323
    3. '_' → logprob: -2.4774329662323
    4. '_n' → logprob: -5.352433204650879
    5. '_and' → logprob: -5.977433204650879
    6. '_i' → logprob: -7.102433204650879
    7. '_k' → logprob: -7.852433204650879
    8. '_a' → logprob: -7.977433204650879
    9. ' ()' → logprob: -8.102433204650879
    10. '[]' → logprob: -8.102433204650879

Token 41: '   ' (ID: 271)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.4069061875343323
    2. 'return' → logprob: -1.5319061279296875
    3. 'int' → logprob: -2.6569061279296875
    4. '   ' → logprob: -3.4069061279296875
    5. '[]' → logprob: -5.1569061279296875
    6. ' return' → logprob: -5.6569061279296875
    7. '():' → logprob: -6.0319061279296875
    8. '()
' → logprob: -7.2819061279296875
    9. '(int' → logprob: -7.4069061279296875
    10. '():
' → logprob: -7.9069061279296875

Token 42: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.1372644305229187
    2. 'map' → logprob: -2.2622644901275635
    3. ' return' → logprob: -4.387264251708984
    4. 'list' → logprob: -5.387264251708984
    5. 'int' → logprob: -5.512264251708984
    6. ' map' → logprob: -6.137264251708984
    7. '   ' → logprob: -7.637264251708984
    8. '[]' → logprob: -8.137264251708984
    9. 'def' → logprob: -9.637264251708984
    10. ' list' → logprob: -10.512264251708984

Token 43: ' list' (ID: 1562)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.6603041291236877
    2. 'list' → logprob: -1.910304069519043
    3. ' int' → logprob: -2.285304069519043
    4. ' list' → logprob: -2.285304069519043
    5. ' map' → logprob: -2.535304069519043
    6. 'map' → logprob: -3.035304069519043
    7. '[int' → logprob: -5.910304069519043
    8. '[]' → logprob: -6.910304069519043
    9. ' []' → logprob: -7.660304069519043
    10. '(int' → logprob: -9.910304069519043

Token 44: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.9860153198242188
    2. '(' → logprob: -1.2360153198242188
    3. '(int' → logprob: -1.2360153198242188
    4. '(input' → logprob: -3.2360153198242188
    5. '(list' → logprob: -5.736015319824219
    6. '()' → logprob: -6.236015319824219
    7. '_map' → logprob: -8.361015319824219
    8. '(_' → logprob: -8.611015319824219
    9. '(eval' → logprob: -8.611015319824219
    10. '(range' → logprob: -8.736015319824219

Token 45: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0007050448912195861
    2. 'int' → logprob: -7.875705242156982
    3. '(' → logprob: -8.125704765319824
    4. '<int' → logprob: -11.375704765319824
    5. '[int' → logprob: -11.500704765319824
    6. '=int' → logprob: -12.750704765319824
    7. '(lambda' → logprob: -13.875704765319824
    8. ']int' → logprob: -13.875704765319824
    9. '```' → logprob: -14.625704765319824
    10. ')' → logprob: -14.750704765319824

Token 46: ',' (ID: 11)
  Prédit: ',input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',input' → logprob: -0.08064903318881989
    2. ',' → logprob: -2.7056491374969482
    3. '(input' → logprob: -4.580648899078369
    4. '(' → logprob: -8.330649375915527
    5. 'input' → logprob: -9.705649375915527
    6. ' ,' → logprob: -9.705649375915527
    7. '(),' → logprob: -10.330649375915527
    8. ',(' → logprob: -12.705649375915527
    9. ' input' → logprob: -13.580649375915527
    10. ' (' → logprob: -13.830649375915527

Token 47: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.011061026714742184
    2. ' input' → logprob: -4.511061191558838
    3. '(input' → logprob: -11.63606071472168
    4. ')' → logprob: -12.88606071472168
    5. ',input' → logprob: -13.51106071472168
    6. '=input' → logprob: -15.76106071472168
    7. '_input' → logprob: -16.26106071472168
    8. '	input' → logprob: -16.26106071472168
    9. '[input' → logprob: -16.38606071472168
    10. '))' → logprob: -17.26106071472168

Token 48: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.00016158436483237892
    2. '()' → logprob: -8.750161170959473
    3. '(' → logprob: -13.750161170959473
    4. '().__' → logprob: -14.125161170959473
    5. ' ().' → logprob: -14.375161170959473
    6. '.' → logprob: -15.250161170959473
    7. '()))' → logprob: -15.625161170959473
    8. '().'' → logprob: -16.37516212463379
    9. '()[' → logprob: -16.75016212463379
    10. '()
' → logprob: -16.87516212463379

Token 49: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -8.41866585687967e-06
    2. 'strip' → logprob: -11.750008583068848
    3. ' split' → logprob: -14.750008583068848
    4. '(split' → logprob: -17.62500762939453
    5. 'rstrip' → logprob: -17.62500762939453
    6. 'spl' → logprob: -17.87500762939453
    7. 'plit' → logprob: -19.75000762939453
    8. ')' → logprob: -19.87500762939453
    9. 's' → logprob: -19.87500762939453
    10. '.split' → logprob: -21.00000762939453

Token 50: '()))

' (ID: 125972)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.47895506024360657
    2. '))' → logprob: -0.9789550304412842
    3. '())' → logprob: -5.978955268859863
    4. '()' → logprob: -6.603955268859863
    5. ')' → logprob: -6.978955268859863
    6. '(' → logprob: -10.478955268859863
    7. '()))
' → logprob: -12.103955268859863
    8. ')))' → logprob: -12.478955268859863
    9. '   ' → logprob: -13.103955268859863
    10. '()));' → logprob: -13.103955268859863

Token 51: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.19553780555725098
    2. 'n' → logprob: -1.945537805557251
    3. '```' → logprob: -4.195537567138672
    4. '
' → logprob: -4.570537567138672
    5. '

' → logprob: -5.195537567138672
    6. '\' → logprob: -6.695537567138672
    7. '\n' → logprob: -7.320537567138672
    8. '#' → logprob: -7.445537567138672
    9. 'd' → logprob: -7.570537567138672
    10. '<|end|>' → logprob: -8.570537567138672

Token 52: ' update' (ID: 4027)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.4344441890716553
    2. ' input' → logprob: -1.8094441890716553
    3. ' solve' → logprob: -2.6844441890716553
    4. ' process' → logprob: -3.1844441890716553
    5. ' output' → logprob: -4.184444427490234
    6. ' calculate' → logprob: -4.434444427490234
    7. ' binary' → logprob: -5.184444427490234
    8. 'input' → logprob: -5.434444427490234
    9. 'main' → logprob: -5.434444427490234
    10. ' find' → logprob: -5.559444427490234

Token 53: '_A' (ID: 6829)
  Prédit: '_A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_A' → logprob: -0.018639499321579933
    2. '_' → logprob: -4.14363956451416
    3. '_(' → logprob: -6.14363956451416
    4. '```' → logprob: -9.14363956451416
    5. '(_' → logprob: -9.76863956451416
    6. '_B' → logprob: -9.76863956451416
    7. '_a' → logprob: -10.14363956451416
    8. '__' → logprob: -10.39363956451416
    9. ' _' → logprob: -10.51863956451416
    10. '(' → logprob: -10.89363956451416

Token 54: '_for' (ID: 11903)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.09326404333114624
    2. '(A' → logprob: -2.468264102935791
    3. '(n' → logprob: -5.843264102935791
    4. '(_' → logprob: -7.593264102935791
    5. '(i' → logprob: -7.843264102935791
    6. '(a' → logprob: -8.593263626098633
    7. '(N' → logprob: -8.968263626098633
    8. '((' → logprob: -10.218263626098633
    9. '_A' → logprob: -10.218263626098633
    10. '(k' → logprob: -10.718263626098633

Token 55: '_a' (ID: 10852)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -1.3010324239730835
    2. '_d' → logprob: -1.6760324239730835
    3. '_k' → logprob: -1.6760324239730835
    4. '_i' → logprob: -2.301032543182373
    5. '(i' → logprob: -2.801032543182373
    6. '_a' → logprob: -2.801032543182373
    7. '_b' → logprob: -4.051032543182373
    8. '(' → logprob: -4.051032543182373
    9. '_j' → logprob: -4.301032543182373
    10. '_day' → logprob: -4.676032543182373

Token 56: '(A' (ID: 10706)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1614239364862442
    2. '(a' → logprob: -2.036423921585083
    3. '_a' → logprob: -5.036424160003662
    4. '_(' → logprob: -5.161424160003662
    5. '_' → logprob: -5.411424160003662
    6. '(A' → logprob: -7.411424160003662
    7. '(_' → logprob: -8.286423683166504
    8. 'a' → logprob: -8.536423683166504
    9. '(n' → logprob: -8.661423683166504
    10. ' (' → logprob: -8.911423683166504

Token 57: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.006215543020516634
    2. ',a' → logprob: -5.131215572357178
    3. ' ,' → logprob: -8.25621509552002
    4. ',n' → logprob: -11.75621509552002
    5. 'a' → logprob: -11.88121509552002
    6. '[' → logprob: -12.13121509552002
    7. '[a' → logprob: -13.13121509552002
    8. ',A' → logprob: -13.88121509552002
    9. ' a' → logprob: -14.38121509552002
    10. '   ' → logprob: -14.63121509552002

Token 58: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.02473638206720352
    2. ' a' → logprob: -3.7747364044189453
    3. 'i' → logprob: -7.274736404418945
    4. 'k' → logprob: -8.399736404418945
    5. 'n' → logprob: -8.524736404418945
    6. 'd' → logprob: -8.899736404418945
    7. ' i' → logprob: -9.399736404418945
    8. ' k' → logprob: -10.274736404418945
    9. ' n' → logprob: -10.399736404418945
    10. '   ' → logprob: -10.774736404418945

Token 59: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.1665884554386139
    2. ',' → logprob: -1.9165884256362915
    3. '[' → logprob: -6.416588306427002
    4. '[i' → logprob: -7.041588306427002
    5. ',i' → logprob: -7.666588306427002
    6. ')):' → logprob: -7.791588306427002
    7. ' ,' → logprob: -7.916588306427002
    8. ')' → logprob: -7.916588306427002
    9. 's' → logprob: -7.916588306427002
    10. ' ):' → logprob: -8.29158878326416

Token 60: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0057096583768725395
    2. ' for' → logprob: -6.005709648132324
    3. ':' → logprob: -6.130709648132324
    4. 'for' → logprob: -7.380709648132324
    5. '```' → logprob: -8.630709648132324
    6. '[' → logprob: -9.255709648132324
    7. '    
' → logprob: -10.255709648132324
    8. ',' → logprob: -10.630709648132324
    9. ':
' → logprob: -10.755709648132324
    10. '):' → logprob: -11.130709648132324

Token 61: ' d' (ID: 272)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.1358916312456131
    2. '   ' → logprob: -2.7608916759490967
    3. 'for' → logprob: -2.7608916759490967
    4. ' A' → logprob: -8.510891914367676
    5. '```' → logprob: -8.635891914367676
    6. '[' → logprob: -10.135891914367676
    7. 'A' → logprob: -10.635891914367676
    8. '	for' → logprob: -10.885891914367676
    9. 'n' → logprob: -11.135891914367676
    10. ' ' → logprob: -11.260891914367676

Token 62: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.17922548949718475
    2. '=' → logprob: -1.9292254447937012
    3. ',' → logprob: -4.429225444793701
    4. 'ef' → logprob: -5.679225444793701
    5. ' ' → logprob: -7.679225444793701
    6. 'for' → logprob: -8.17922592163086
    7. 'iff' → logprob: -8.55422592163086
    8. '[' → logprob: -8.55422592163086
    9. 'f' → logprob: -8.67922592163086
    10. 'x' → logprob: -8.67922592163086

Token 63: ' len' (ID: 4631)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.6482809782028198
    2. ' a' → logprob: -1.2732809782028198
    3. 'len' → logprob: -2.0232810974121094
    4. ' len' → logprob: -2.7732810974121094
    5. '   ' → logprob: -7.648281097412109
    6. '0' → logprob: -7.648281097412109
    7. ' ' → logprob: -7.898281097412109
    8. ' input' → logprob: -8.52328109741211
    9. 'input' → logprob: -8.89828109741211
    10. '1' → logprob: -9.27328109741211

Token 64: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.001631378778256476
    2. '(' → logprob: -6.501631259918213
    3. '(A' → logprob: -9.001631736755371
    4. 'a' → logprob: -12.251631736755371
    5. '(s' → logprob: -14.626631736755371
    6. ' (' → logprob: -15.626631736755371
    7. '(d' → logprob: -15.876631736755371
    8. '(
' → logprob: -16.376630783081055
    9. '((' → logprob: -16.876630783081055
    10. '(ai' → logprob: -17.126630783081055

Token 65: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.468279752880335e-05
    2. ' )' → logprob: -10.125064849853516
    3. ')
' → logprob: -11.000064849853516
    4. ')a' → logprob: -13.000064849853516
    5. '))' → logprob: -13.125064849853516
    6. ')

' → logprob: -14.500064849853516
    7. '`)' → logprob: -14.750064849853516
    8. ')-' → logprob: -14.750064849853516
    9. ' ' → logprob: -14.875064849853516
    10. '())' → logprob: -15.000064849853516

Token 66: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6960911750793457
    2. '   ' → logprob: -0.8210911750793457
    3. ' for' → logprob: -3.1960911750793457
    4. 'for' → logprob: -4.446091175079346
    5. '    
' → logprob: -5.696091175079346
    6. '```' → logprob: -6.321091175079346
    7. '<|end|>' → logprob: -6.571091175079346
    8. '  
' → logprob: -7.321091175079346
    9. ')' → logprob: -7.696091175079346
    10. '	for' → logprob: -8.571090698242188

Token 67: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.3246736526489258
    2. 'for' (adapté à ' for') → logprob: -1.3246736526489258
    3. '   ' → logprob: -5.199673652648926
    4. '
' → logprob: -5.324673652648926
    5. '	for' → logprob: -7.824673652648926
    6. 'n' → logprob: -8.699673652648926
    7. '    
' → logprob: -9.074673652648926
    8. '```' → logprob: -9.449673652648926
    9. '\n' → logprob: -10.449673652648926
    10. ' ' → logprob: -11.074673652648926

Token 68: ' j' (ID: 441)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.0034903085324913263
    2. ' _' → logprob: -6.253490447998047
    3. ' ' → logprob: -7.128490447998047
    4. '_' → logprob: -7.628490447998047
    5. ' d' → logprob: -8.503490447998047
    6. ' range' → logprob: -10.628490447998047
    7. '_i' → logprob: -10.753490447998047
    8. 'i' → logprob: -11.128490447998047
    9. ' idx' → logprob: -13.253490447998047
    10. ' ' → logprob: -13.378490447998047

Token 69: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.007009352091699839
    2. 'in' → logprob: -5.007009506225586
    3. ' ' → logprob: -8.257009506225586
    4. ',' → logprob: -11.257009506225586
    5. '_' → logprob: -12.382009506225586
    6. 'range' → logprob: -12.632009506225586
    7. ')' → logprob: -12.882009506225586
    8. '0' → logprob: -13.382009506225586
    9. 'd' → logprob: -13.382009506225586
    10. ' ,' → logprob: -13.507009506225586

Token 70: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.1602286994457245
    2. 'range' → logprob: -1.9102287292480469
    3. '	range' → logprob: -13.160228729248047
    4. ' ' → logprob: -13.785228729248047
    5. '(range' → logprob: -13.785228729248047
    6. ' xrange' → logprob: -15.410228729248047
    7. 'ange' → logprob: -16.160228729248047
    8. '_range' → logprob: -16.660228729248047
    9. ' ' → logprob: -17.160228729248047
    10. 'rang' → logprob: -17.285228729248047

Token 71: '(d' (ID: 2572)
  Prédit: '(d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(d' → logprob: -0.06244601309299469
    2. '(' → logprob: -2.812446117401123
    3. ' (' → logprob: -7.937446117401123
    4. '(len' → logprob: -9.437445640563965
    5. ' d' → logprob: -10.312445640563965
    6. 'd' → logprob: -12.437445640563965
    7. ' ' → logprob: -13.062445640563965
    8. '(n' → logprob: -14.437445640563965
    9. '	d' → logprob: -14.937445640563965
    10. '   ' → logprob: -14.937445640563965

Token 72: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0017102824058383703
    2. '):
' → logprob: -6.751710414886475
    3. ' ):' → logprob: -7.626710414886475
    4. '-' → logprob: -10.751709938049316
    5. '   ' → logprob: -11.376709938049316
    6. '+' → logprob: -12.001709938049316
    7. ')' → logprob: -12.126709938049316
    8. ':' → logprob: -12.626709938049316
    9. '):
' → logprob: -14.126709938049316
    10. ',' → logprob: -14.501709938049316

Token 73: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.24021117389202118
    2. '   ' → logprob: -2.240211248397827
    3. ':' → logprob: -2.615211248397827
    4. '    ' → logprob: -3.990211248397827
    5. ' ' → logprob: -4.740211009979248
    6. '):' → logprob: -6.365211009979248
    7. ' :' → logprob: -6.615211009979248
    8. ' if' → logprob: -7.115211009979248
    9. '     ' → logprob: -8.240211486816406
    10. ' A' → logprob: -8.365211486816406

Token 74: ' x' (ID: 1215)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.6323182582855225
    2. 'A' → logprob: -1.3823182582855225
    3. ' if' → logprob: -1.6323182582855225
    4. 'if' → logprob: -4.132318496704102
    5. '   ' → logprob: -5.382318496704102
    6. '    ' → logprob: -7.507318496704102
    7. '       ' → logprob: -7.757318496704102
    8. ' ' → logprob: -8.382318496704102
    9. '           ' → logprob: -9.757318496704102
    10. ' a' → logprob: -10.007318496704102

Token 75: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.03397668898105621
    2. '=' → logprob: -3.4089767932891846
    3. ',' → logprob: -8.783976554870605
    4. ')' → logprob: -9.658976554870605
    5. '=a' → logprob: -9.908976554870605
    6. ' ' → logprob: -10.908976554870605
    7. '=A' → logprob: -11.658976554870605
    8. '=int' → logprob: -11.658976554870605
    9. 'a' → logprob: -12.408976554870605
    10. ']' → logprob: -12.533976554870605

Token 76: ' to' (ID: 316)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.08894949406385422
    2. ' a' → logprob: -2.46394944190979
    3. '_a' → logprob: -12.588949203491211
    4. '	a' → logprob: -13.088949203491211
    5. '   ' → logprob: -13.713949203491211
    6. '>a' → logprob: -14.338949203491211
    7. 'A' → logprob: -14.463949203491211
    8. ' ' → logprob: -14.588949203491211
    9. '(a' → logprob: -15.088949203491211
    10. ')a' → logprob: -15.213949203491211

Token 77: '_zero' (ID: 53468)
  Prédit: 'tal'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tal' → logprob: -0.5998294949531555
    2. 'rch' → logprob: -1.3498294353485107
    3. 'ken' → logprob: -2.9748294353485107
    4. 'uch' → logprob: -3.4748294353485107
    5. 'p' → logprob: -3.8498294353485107
    6. '_int' → logprob: -4.22482967376709
    7. '_update' → logprob: -4.47482967376709
    8. 'lower' → logprob: -4.59982967376709
    9. 'r' → logprob: -4.84982967376709
    10. 't' → logprob: -5.22482967376709

Token 78: '_index' (ID: 7748)
  Prédit: '_index'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_index' → logprob: -0.2334974706172943
    2. '_based' → logprob: -1.8584975004196167
    3. 'index' → logprob: -3.858497381210327
    4. 'based' → logprob: -4.358497619628906
    5. 'indexed' → logprob: -5.483497619628906
    6. 'ed' → logprob: -6.108497619628906
    7. '_idx' → logprob: -6.358497619628906
    8. 'd' → logprob: -6.608497619628906
    9. 'x' → logprob: -6.608497619628906
    10. '_base' → logprob: -6.733497619628906

Token 79: 'ed' (ID: 295)
  Prédit: '(a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.21049043536186218
    2. 'ed' → logprob: -1.7104904651641846
    3. 'ing' → logprob: -4.7104902267456055
    4. '[a' → logprob: -11.835490226745605
    5. '(x' → logprob: -12.085490226745605
    6. 'e' → logprob: -12.085490226745605
    7. 'a' → logprob: -12.085490226745605
    8. '(A' → logprob: -12.210490226745605
    9. 'd' → logprob: -12.835490226745605
    10. '(i' → logprob: -14.585490226745605

Token 80: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.0003936152206733823
    2. '(' → logprob: -7.875393390655518
    3. '(A' → logprob: -11.875393867492676
    4. ' (' → logprob: -13.250393867492676
    5. '(x' → logprob: -13.750393867492676
    6. '(
' → logprob: -14.125393867492676
    7. 'a' → logprob: -14.625393867492676
    8. '((' → logprob: -14.750393867492676
    9. '```' → logprob: -14.750393867492676
    10. '[a' → logprob: -15.250393867492676

Token 81: '[j' (ID: 7895)
  Prédit: '[j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[j' → logprob: -0.00027921271976083517
    2. '[' → logprob: -8.250279426574707
    3. '[a' → logprob: -11.875279426574707
    4. ')[' → logprob: -12.875279426574707
    5. ')' → logprob: -13.125279426574707
    6. ' [' → logprob: -13.375279426574707
    7. '[x' → logprob: -13.500279426574707
    8. '[
' → logprob: -14.500279426574707
    9. '[J' → logprob: -14.750279426574707
    10. '[i' → logprob: -14.875279426574707

Token 82: '])
' (ID: 5169)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.032517436891794205
    2. ']' → logprob: -4.157517433166504
    3. ')' → logprob: -4.282517433166504
    4. '[j' → logprob: -6.657517433166504
    5. '])-' → logprob: -8.157517433166504
    6. '])
' → logprob: -8.282517433166504
    7. ''])' → logprob: -8.782517433166504
    8. ')])' → logprob: -9.032517433166504
    9. ']-' → logprob: -9.282517433166504
    10. '())' → logprob: -9.907517433166504

Token 83: '       ' (ID: 309)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4532168209552765
    2. '       ' → logprob: -1.703216791152954
    3. '   ' → logprob: -2.328216791152954
    4. ')
' → logprob: -3.203216791152954
    5. '
' → logprob: -5.203217029571533
    6. ' ' → logprob: -5.453217029571533
    7. '    
' → logprob: -5.578217029571533
    8. '```' → logprob: -5.828217029571533
    9. '(A' → logprob: -5.953217029571533
    10. '        
' → logprob: -6.078217029571533

Token 84: ' set' (ID: 920)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.9804480075836182
    2. '
' → logprob: -2.105448007583618
    3. ' if' → logprob: -2.105448007583618
    4. '        
' → logprob: -2.480448007583618
    5. 'A' → logprob: -2.730448007583618
    6. 'if' → logprob: -2.730448007583618
    7. '<|end|>' → logprob: -2.980448007583618
    8. ' ' → logprob: -3.230448007583618
    9. ')' → logprob: -4.355447769165039
    10. ' 
' → logprob: -4.605447769165039

Token 85: '_A' (ID: 6829)
  Prédit: '(A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.16622155904769897
    2. '_A' → logprob: -2.5412216186523438
    3. '_index' → logprob: -3.4162216186523438
    4. '_value' → logprob: -4.166221618652344
    5. '_item' → logprob: -4.916221618652344
    6. '_' → logprob: -4.916221618652344
    7. 'A' → logprob: -7.041221618652344
    8. '```' → logprob: -7.041221618652344
    9. '_val' → logprob: -7.416221618652344
    10. '_at' → logprob: -7.416221618652344

Token 86: '_if' (ID: 25821)
  Prédit: '(A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.03892853856086731
    2. '[A' → logprob: -3.913928508758545
    3. '_value' → logprob: -4.913928508758545
    4. '_for' → logprob: -5.038928508758545
    5. '_A' → logprob: -7.163928508758545
    6. '_x' → logprob: -7.538928508758545
    7. '_at' → logprob: -7.663928508758545
    8. '[' → logprob: -8.038928985595703
    9. '_' → logprob: -8.038928985595703
    10. '```' → logprob: -8.163928985595703

Token 87: '_un' (ID: 11119)
  Prédit: '(A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.029555268585681915
    2. '_needed' → logprob: -5.154555320739746
    3. '_less' → logprob: -5.654555320739746
    4. '```' → logprob: -5.904555320739746
    5. '_possible' → logprob: -6.029555320739746
    6. '_none' → logprob: -6.279555320739746
    7. 'A' → logprob: -6.404555320739746
    8. '_not' → logprob: -6.779555320739746
    9. 'not' → logprob: -6.904555320739746
    10. 'empty' → logprob: -6.904555320739746

Token 88: 'set' (ID: 977)
  Prédit: 'set'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'set' → logprob: -0.3092605769634247
    2. 'assigned' → logprob: -1.934260606765747
    3. 'defined' → logprob: -3.059260606765747
    4. 'occupied' → logprob: -3.184260606765747
    5. 'initialized' → logprob: -4.184260368347168
    6. 'efined' → logprob: -4.809260368347168
    7. 'filled' → logprob: -5.309260368347168
    8. 'p' → logprob: -6.559260368347168
    9. 'valu' → logprob: -7.809260368347168
    10. 't' → logprob: -8.059260368347168

Token 89: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -7.815280696377158e-05
    2. '(' → logprob: -9.500078201293945
    3. '```' → logprob: -13.875078201293945
    4. ' (' → logprob: -14.875078201293945
    5. '_value' → logprob: -15.000078201293945
    6. '   ' → logprob: -15.875078201293945
    7. '(B' → logprob: -16.250078201293945
    8. '_at' → logprob: -16.250078201293945
    9. '_or' → logprob: -16.250078201293945
    10. '(
' → logprob: -16.250078201293945

Token 90: ',' (ID: 11)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.04222021996974945
    2. ',' → logprob: -3.667220115661621
    3. '(' → logprob: -4.292220115661621
    4. ',x' → logprob: -6.292220115661621
    5. ')' → logprob: -9.292220115661621
    6. ' ,' → logprob: -9.417220115661621
    7. ')(' → logprob: -10.542220115661621
    8. '<|end|>' → logprob: -10.792220115661621
    9. ' (' → logprob: -11.417220115661621
    10. ',j' → logprob: -11.917220115661621

Token 91: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.02056162618100643
    2. ' x' → logprob: -3.895561695098877
    3. '<|end|>' → logprob: -11.645561218261719
    4. ')' → logprob: -12.145561218261719
    5. ')x' → logprob: -12.645561218261719
    6. ',' → logprob: -14.395561218261719
    7. ',x' → logprob: -14.395561218261719
    8. '	x' → logprob: -14.520561218261719
    9. '(x' → logprob: -15.020561218261719
    10. ' ' → logprob: -15.645561218261719

Token 92: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.016649819910526276
    2. ',' → logprob: -4.1416497230529785
    3. ' )' → logprob: -8.391650199890137
    4. ',x' → logprob: -8.641650199890137
    5. ')x' → logprob: -9.266650199890137
    6. '   ' → logprob: -10.391650199890137
    7. '(x' → logprob: -10.641650199890137
    8. '       ' → logprob: -11.516650199890137
    9. ',)' → logprob: -11.766650199890137
    10. ' ,' → logprob: -11.766650199890137

Token 93: 'def' (ID: 1314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3028121590614319
    2. '()' → logprob: -2.302812099456787
    3. '(
' → logprob: -2.927812099456787
    4. ')' → logprob: -3.677812099456787
    5. '
' → logprob: -3.927812099456787
    6. '<|end|>' → logprob: -3.927812099456787
    7. '   ' → logprob: -4.177812099456787
    8. 'def' → logprob: -4.677812099456787
    9. '()
' → logprob: -5.052812099456787
    10. '```' → logprob: -5.927812099456787

Token 94: ' to' (ID: 316)
  Prédit: ' update'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' update' → logprob: -0.0021396710071712732
    2. '_update' → logprob: -7.127139568328857
    3. 'update' → logprob: -7.752139568328857
    4. ' _' → logprob: -8.252140045166016
    5. ' set' → logprob: -8.502140045166016
    6. ' ' → logprob: -9.002140045166016
    7. '_' → logprob: -9.002140045166016
    8. ' initialize' → logprob: -10.002140045166016
    9. ' input' → logprob: -10.252140045166016
    10. ' def' → logprob: -10.377140045166016

Token 95: '_zero' (ID: 53468)
  Prédit: '_zero'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_zero' → logprob: -0.0025630532763898373
    2. '_' → logprob: -6.002562999725342
    3. '_to' → logprob: -10.8775634765625
    4. '__' → logprob: -11.1275634765625
    5. ' _' → logprob: -12.1275634765625
    6. '_none' → logprob: -12.2525634765625
    7. '_you' → logprob: -12.3775634765625
    8. '_ZERO' → logprob: -12.7525634765625
    9. '_two' → logprob: -12.7525634765625
    10. '_lower' → logprob: -12.8775634765625

Token 96: '_index' (ID: 7748)
  Prédit: '_index'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_index' → logprob: -0.0004996551433578134
    2. '_' → logprob: -7.750499725341797
    3. '_idx' → logprob: -10.500499725341797
    4. '_indices' → logprob: -11.875499725341797
    5. '_ind' → logprob: -12.000499725341797
    6. ' _' → logprob: -12.125499725341797
    7. '_lower' → logprob: -12.250499725341797
    8. '_indexes' → logprob: -13.250499725341797
    9. '_offset' → logprob: -13.375499725341797
    10. '_to' → logprob: -13.625499725341797

Token 97: 'ed' (ID: 295)
  Prédit: 'ed'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ed' → logprob: -0.0013990452280268073
    2. 'xed' → logprob: -6.626399040222168
    3. 'ex' → logprob: -9.751399040222168
    4. 'eded' → logprob: -11.626399040222168
    5. 'zed' → logprob: -13.376399040222168
    6. 'edf' → logprob: -13.876399040222168
    7. 'dex' → logprob: -14.001399040222168
    8. '_ed' → logprob: -14.376399040222168
    9. '```' → logprob: -14.626399040222168
    10. '   ' → logprob: -15.501399040222168

Token 98: '(val' (ID: 17391)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6419347524642944
    2. '(x' → logprob: -1.1419347524642944
    3. '(a' → logprob: -1.8919347524642944
    4. '(n' → logprob: -6.141934871673584
    5. '(index' → logprob: -7.391934871673584
    6. '(i' → logprob: -8.141934394836426
    7. '(num' → logprob: -8.641934394836426
    8. '(value' → logprob: -8.641934394836426
    9. '(s' → logprob: -9.766934394836426
    10. '("("' → logprob: -9.891934394836426

Token 99: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.01011915598064661
    2. '):
' → logprob: -4.6351189613342285
    3. ')' → logprob: -8.135119438171387
    4. '   ' → logprob: -10.885119438171387
    5. ' ):' → logprob: -11.135119438171387
    6. '(' → logprob: -11.385119438171387
    7. '):
' → logprob: -12.010119438171387
    8. ':' → logprob: -12.385119438171387
    9. '():' → logprob: -12.635119438171387
    10. '```' → logprob: -12.885119438171387

Token 100: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05042675882577896
    2. ' return' → logprob: -3.050426721572876
    3. 'return' → logprob: -6.300426959991455
    4. '	return' → logprob: -13.425426483154297
    5. '    ' → logprob: -14.800426483154297
    6. '{return' → logprob: -16.050426483154297
    7. ':return' → logprob: -16.925426483154297
    8. '       ' → logprob: -17.425426483154297
    9. ' ' → logprob: -17.800426483154297
    10. '```' → logprob: -18.175426483154297

Token 101: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.0033849377650767565
    2. ' return' → logprob: -6.003385066986084
    3. '   ' → logprob: -7.003385066986084
    4. '	return' → logprob: -17.128385543823242
    5. '    
' → logprob: -17.503385543823242
    6. '```' → logprob: -17.503385543823242
    7. '{return' → logprob: -18.378385543823242
    8. '    ' → logprob: -18.753385543823242
    9. '
' → logprob: -19.253385543823242
    10. '  ' → logprob: -19.878385543823242

Token 102: ' val' (ID: 1459)
  Prédit: ' val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' val' → logprob: -0.5759395956993103
    2. 'val' → logprob: -0.8259395956993103
    3. '	val' → logprob: -16.450939178466797
    4. 'int' → logprob: -17.200939178466797
    5. '(val' → logprob: -17.700939178466797
    6. '[val' → logprob: -17.700939178466797
    7. '_val' → logprob: -19.450939178466797
    8. '.val' → logprob: -19.950939178466797
    9. '```' → logprob: -20.075939178466797
    10. ' int' → logprob: -20.325939178466797

Token 103: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.31327033042907715
    2. '-' → logprob: -1.3132703304290771
    3. ' ' → logprob: -11.688270568847656
    4. ' ' → logprob: -16.688270568847656
    5. '1' → logprob: -17.188270568847656
    6. '  ' → logprob: -17.563270568847656
    7. '   ' → logprob: -17.813270568847656
    8. '<|end|>' → logprob: -17.813270568847656
    9. '...' → logprob: -17.938270568847656
    10. ')' → logprob: -18.313270568847656

Token 104: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.15310683415737e-05
    2. ' ' → logprob: -10.750021934509277
    3. '```' → logprob: -17.87502098083496
    4. '<|end|>' → logprob: -19.00002098083496
    5. '   ' → logprob: -19.37502098083496
    6. '１' → logprob: -19.37502098083496
    7. '۱' → logprob: -20.00002098083496
    8. '১' → logprob: -20.75002098083496
    9. '१' → logprob: -20.81252098083496
    10. '`' → logprob: -20.93752098083496

Token 105: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -9.088346359931165e-07
    2. ' ' → logprob: -14.125000953674316
    3. '<|end|>' → logprob: -16.875
    4. '```' → logprob: -17.625
    5. 'def' → logprob: -18.125
    6. '１' → logprob: -18.5
    7. '   ' → logprob: -19.625
    8. '۱' → logprob: -19.625
    9. '১' → logprob: -20.0625
    10. '१' → logprob: -20.25

Token 106: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.0637297630310059
    2. 'def' → logprob: -1.0637297630310059
    3. '<|end|>' → logprob: -1.1887297630310059
    4. '<|end|>' → logprob: -6.438729763031006
    5. '```' → logprob: -6.688729763031006
    6. '

' → logprob: -6.938729763031006
    7. '    
' → logprob: -7.438729763031006
    8. '  
' → logprob: -8.938730239868164
    9. ' def' → logprob: -8.938730239868164
    10. ')' → logprob: -9.188730239868164

Token 107: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.2664456789934775e-06
    2. '```' → logprob: -14.375000953674316
    3. ' def' → logprob: -14.750000953674316
    4. '<|end|>' → logprob: -16.000001907348633
    5. '    
' → logprob: -17.125001907348633
    6. '``' → logprob: -17.500001907348633
    7. '<|end|>' → logprob: -17.875001907348633
    8. '   ' → logprob: -18.250001907348633
    9. '  
' → logprob: -18.375001907348633
    10. '
' → logprob: -18.625001907348633

Token 108: ' set' (ID: 920)
  Prédit: 'set'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'set' → logprob: -0.001978118671104312
    2. ' set' → logprob: -6.251977920532227
    3. 'def' → logprob: -10.126977920532227
    4. '_set' → logprob: -12.626977920532227
    5. '```' → logprob: -14.001977920532227
    6. '
' → logprob: -14.251977920532227
    7. ' ' → logprob: -14.251977920532227
    8. '	set' → logprob: -14.251977920532227
    9. 'get' → logprob: -14.376977920532227
    10. 'is' → logprob: -14.689477920532227

Token 109: '_A' (ID: 6829)
  Prédit: '_A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_A' → logprob: -1.8670179997570813e-05
    2. '_' → logprob: -11.000019073486328
    3. '```' → logprob: -13.875019073486328
    4. 'A' → logprob: -14.250019073486328
    5. ' _' → logprob: -16.500019073486328
    6. '_a' → logprob: -17.000019073486328
    7. 'def' → logprob: -17.250019073486328
    8. '_B' → logprob: -17.375019073486328
    9. '##_' → logprob: -17.625019073486328
    10. '(A' → logprob: -18.125019073486328

Token 110: '_if' (ID: 25821)
  Prédit: '_if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_if' → logprob: -1.0445127372804563e-05
    2. 'if' → logprob: -11.50001049041748
    3. '```' → logprob: -17.125009536743164
    4. 'If' → logprob: -17.250009536743164
    5. '_for' → logprob: -17.375009536743164
    6. ' if' → logprob: -17.375009536743164
    7. '_is' → logprob: -17.625009536743164
    8. '_' → logprob: -18.125009536743164
    9. '_IF' → logprob: -18.500009536743164
    10. '(_' → logprob: -19.125009536743164

Token 111: '_un' (ID: 11119)
  Prédit: '_un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_un' → logprob: -6.635164754698053e-05
    2. 'unset' → logprob: -10.125066757202148
    3. 'un' → logprob: -10.625066757202148
    4. '_unref' → logprob: -13.500066757202148
    5. '_' → logprob: -15.375066757202148
    6. '(A' → logprob: -16.75006675720215
    7. '_uns' → logprob: -16.87506675720215
    8. '```' → logprob: -17.00006675720215
    9. '_unused' → logprob: -17.37506675720215
    10. 'Unset' → logprob: -17.75006675720215

Token 112: 'set' (ID: 977)
  Prédit: 'set'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'set' → logprob: -1.0280383548888494e-06
    2. 'def' → logprob: -14.750000953674316
    3. 'et' → logprob: -15.875000953674316
    4. 't' → logprob: -16.125001907348633
    5. '```' → logprob: -16.500001907348633
    6. 'sert' → logprob: -16.750001907348633
    7. '   ' → logprob: -17.500001907348633
    8. 'sent' → logprob: -17.500001907348633
    9. 'A' → logprob: -18.000001907348633
    10. 's' → logprob: -18.250001907348633

Token 113: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -8.518582762917504e-05
    2. '(' → logprob: -9.37508487701416
    3. '(
' → logprob: -16.000085830688477
    4. '(a' → logprob: -16.125085830688477
    5. 'def' → logprob: -17.500085830688477
    6. '```' → logprob: -17.500085830688477
    7. ' (' → logprob: -17.875085830688477
    8. 'A' → logprob: -18.750085830688477
    9. ' ' → logprob: -19.125085830688477
    10. '((' → logprob: -19.125085830688477

Token 114: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -4.8590300139039755e-05
    2. ' ,' → logprob: -10.625048637390137
    3. ',x' → logprob: -11.000048637390137
    4. ',A' → logprob: -12.625048637390137
    5. ',index' → logprob: -14.000048637390137
    6. 'A' → logprob: -14.250048637390137
    7. '(x' → logprob: -14.625048637390137
    8. '   ' → logprob: -14.875048637390137
    9. ',val' → logprob: -15.000048637390137
    10. 'x' → logprob: -15.125048637390137

Token 115: ' idx' (ID: 14016)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.8296279311180115
    2. 'index' → logprob: -1.3296279907226562
    3. 'idx' → logprob: -1.8296279907226562
    4. 'i' → logprob: -2.4546279907226562
    5. ' idx' → logprob: -3.4546279907226562
    6. ' index' → logprob: -4.704627990722656
    7. ' x' → logprob: -5.079627990722656
    8. ' i' → logprob: -5.329627990722656
    9. 'pos' → logprob: -6.954627990722656
    10. '```' → logprob: -10.454627990722656

Token 116: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.020742982625961304
    2. '):
' → logprob: -3.895742893218994
    3. ',' → logprob: -9.020743370056152
    4. ')' → logprob: -10.270743370056152
    5. '):
' → logprob: -10.770743370056152
    6. '   ' → logprob: -11.020743370056152
    7. ' ):' → logprob: -12.520743370056152
    8. '):

' → logprob: -12.895743370056152
    9. ':' → logprob: -14.145743370056152
    10. ']:' → logprob: -15.020743370056152

Token 117: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.49271807074546814
    2. 'if' → logprob: -0.9927181005477905
    3. ' if' → logprob: -3.992717981338501
    4. '```' → logprob: -10.992717742919922
    5. '	if' → logprob: -13.242717742919922
    6. ' ' → logprob: -16.367717742919922
    7. '``' → logprob: -16.367717742919922
    8. '  ' → logprob: -17.117717742919922
    9. 'If' → logprob: -17.367717742919922
    10. '       ' → logprob: -17.617717742919922

Token 118: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.004400921054184437
    2. ' if' → logprob: -6.004400730133057
    3. '   ' → logprob: -6.254400730133057
    4. '```' → logprob: -13.754401206970215
    5. '	if' → logprob: -15.504401206970215
    6. ' ' → logprob: -16.5044002532959
    7. 'If' → logprob: -17.5044002532959
    8. '  ' → logprob: -17.8794002532959
    9. '``' → logprob: -18.0044002532959
    10. '    
' → logprob: -19.7544002532959

Token 119: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.693183958530426
    2. ' A' → logprob: -0.693183958530426
    3. '   ' → logprob: -10.318183898925781
    4. ' ' → logprob: -13.193183898925781
    5. '	A' → logprob: -14.193183898925781
    6. '(A' → logprob: -14.693183898925781
    7. '0' → logprob: -14.818183898925781
    8. ' idx' → logprob: -16.06818389892578
    9. 'idx' → logprob: -16.31818389892578
    10. '  ' → logprob: -16.56818389892578

Token 120: '[idx' (ID: 25582)
  Prédit: '[idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[idx' → logprob: -0.00016241880075540394
    2. '[' → logprob: -8.750162124633789
    3. '```' → logprob: -13.125162124633789
    4. 'idx' → logprob: -14.250162124633789
    5. ' [' → logprob: -14.500162124633789
    6. '   ' → logprob: -15.875162124633789
    7. 'A' → logprob: -15.875162124633789
    8. '[
' → logprob: -16.00016212463379
    9. ' idx' → logprob: -16.12516212463379
    10. '[A' → logprob: -16.25016212463379

Token 121: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.31831735372543335
    2. ')' → logprob: -1.8183174133300781
    3. ']==' → logprob: -3.068317413330078
    4. '==' → logprob: -3.318317413330078
    5. '[idx' → logprob: -4.318317413330078
    6. '[' → logprob: -4.693317413330078
    7. '==-' → logprob: -6.443317413330078
    8. ')==' → logprob: -6.568317413330078
    9. ' ==' → logprob: -6.693317413330078
    10. '```' → logprob: -8.443317413330078

Token 122: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.14893172681331635
    2. ' ==' → logprob: -2.0239317417144775
    3. '==-' → logprob: -5.398931503295898
    4. '[' → logprob: -6.898931503295898
    5. ')' → logprob: -8.148931503295898
    6. ')==' → logprob: -8.523931503295898
    7. ']==' → logprob: -9.148931503295898
    8. '=' → logprob: -10.398931503295898
    9. '===' → logprob: -11.023931503295898
    10. ' ' → logprob: -11.398931503295898

Token 123: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -6.992775888647884e-05
    2. ' -' → logprob: -9.750069618225098
    3. '   ' → logprob: -11.375069618225098
    4. '  ' → logprob: -16.125070571899414
    5. '[-' → logprob: -18.625070571899414
    6. ' ' → logprob: -18.750070571899414
    7. '(-' → logprob: -19.625070571899414
    8. '<|end|>' → logprob: -20.125070571899414
    9. '```' → logprob: -20.250070571899414
    10. '−' → logprob: -20.375070571899414

Token 124: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.1472419600977446e-06
    2. ' ' → logprob: -14.000000953674316
    3. '```' → logprob: -16.000001907348633
    4. '   ' → logprob: -16.375001907348633
    5. '<|end|>' → logprob: -17.125001907348633
    6. '１' → logprob: -18.062501907348633
    7. '2' → logprob: -18.250001907348633
    8. '
' → logprob: -18.437501907348633
    9. '۱' → logprob: -18.562501907348633
    10. '  ' → logprob: -18.812501907348633

Token 125: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.010085050016641617
    2. ':
' → logprob: -4.635085105895996
    3. '):' → logprob: -8.135085105895996
    4. '):
' → logprob: -10.635085105895996
    5. ' :' → logprob: -12.385085105895996
    6. '   ' → logprob: -13.135085105895996
    7. ')' → logprob: -13.510085105895996
    8. '       ' → logprob: -13.885085105895996
    9. ',' → logprob: -14.010085105895996
    10. ':return' → logprob: -14.135085105895996

Token 126: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.05396692454814911
    2. ':' → logprob: -3.928966999053955
    3. 'A' → logprob: -4.678966999053955
    4. '   ' → logprob: -4.803966999053955
    5. ' A' → logprob: -5.178966999053955
    6. ':
' → logprob: -5.803966999053955
    7. '0' → logprob: -6.053966999053955
    8. '):' → logprob: -6.428966999053955
    9. '):
' → logprob: -6.553966999053955
    10. ' :' → logprob: -8.678966522216797

Token 127: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' (adapté à ' A') → logprob: -0.0049194470047950745
    2. '   ' → logprob: -6.129919528961182
    3. ' A' → logprob: -6.379919528961182
    4. '0' → logprob: -7.879919528961182
    5. '           ' → logprob: -8.379919052124023
    6. '       ' → logprob: -8.879919052124023
    7. 'return' → logprob: -9.629919052124023
    8. 'idx' → logprob: -9.629919052124023
    9. 'import' → logprob: -10.629919052124023
    10. ' ' → logprob: -10.754919052124023

Token 128: '[idx' (ID: 25582)
  Prédit: '[idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[idx' → logprob: -1.0564331205387134e-05
    2. '[' → logprob: -12.00001049041748
    3. 'idx' → logprob: -13.25001049041748
    4. '```' → logprob: -13.62501049041748
    5. '[index' → logprob: -15.12501049041748
    6. '[
' → logprob: -15.50001049041748
    7. ' [' → logprob: -15.87501049041748
    8. '	idx' → logprob: -15.87501049041748
    9. '[int' → logprob: -16.375011444091797
    10. '[ind' → logprob: -16.625011444091797

Token 129: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.005695911590009928
    2. ' =' → logprob: -5.755695819854736
    3. '=' → logprob: -6.505695819854736
    4. ')' → logprob: -7.255695819854736
    5. ']=' → logprob: -8.505696296691895
    6. ' ]' → logprob: -9.880696296691895
    7. '<|end|>' → logprob: -10.255696296691895
    8. '   ' → logprob: -11.755696296691895
    9. '}' → logprob: -13.255696296691895
    10. '<|end|>' → logprob: -13.380696296691895

Token 130: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.4740891754627228
    2. ' =' → logprob: -0.9740891456604004
    3. '[idx' → logprob: -13.099089622497559
    4. '<|end|>' → logprob: -13.224089622497559
    5. ')' → logprob: -13.349089622497559
    6. ' ' → logprob: -13.599089622497559
    7. ' =
' → logprob: -13.724089622497559
    8. '[' → logprob: -13.849089622497559
    9. '=
' → logprob: -14.224089622497559
    10. ')=' → logprob: -14.724089622497559

Token 131: ' ' (ID: 220)
  Prédit: 'idx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'idx' → logprob: -0.07107225805521011
    2. '0' → logprob: -2.8210723400115967
    3. ' idx' → logprob: -4.821072101593018
    4. '1' → logprob: -7.696072101593018
    5. ' ' → logprob: -8.071072578430176
    6. '	idx' → logprob: -9.696072578430176
    7. '(idx' → logprob: -9.946072578430176
    8. '[idx' → logprob: -10.696072578430176
    9. 'max' → logprob: -10.821072578430176
    10. '   ' → logprob: -11.696072578430176

Token 132: '1' (ID: 16)
  Prédit: 'idx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'idx' → logprob: -0.11377452313899994
    2. '0' → logprob: -2.238774538040161
    3. '1' → logprob: -7.613774299621582
    4. ' idx' → logprob: -7.988774299621582
    5. ' ' → logprob: -10.488774299621582
    6. '(idx' → logprob: -10.738774299621582
    7. '	idx' → logprob: -11.488774299621582
    8. 'max' → logprob: -11.863774299621582
    9. '_idx' → logprob: -11.988774299621582
    10. 'd' → logprob: -12.363774299621582

Token 133: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 134: 'def' (ID: 1314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 135: ' count' (ID: 3605)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.3532300591468811
    2. ' update' → logprob: -1.9782299995422363
    3. ' input' → logprob: -2.3532299995422363
    4. ' ' → logprob: -4.103229999542236
    5. ' calculate' → logprob: -4.353229999542236
    6. ' def' → logprob: -4.728229999542236
    7. ' set' → logprob: -4.978229999542236
    8. ' compute' → logprob: -5.603229999542236
    9. ' initialize' → logprob: -6.103229999542236
    10. ' check' → logprob: -6.228229999542236

Token 136: '_minus' (ID: 101055)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.7470933794975281
    2. '_A' → logprob: -0.8720933794975281
    3. '_un' → logprob: -3.372093439102173
    4. '_non' → logprob: -4.122093200683594
    5. '_elements' → logprob: -4.247093200683594
    6. '_set' → logprob: -4.997093200683594
    7. '_occ' → logprob: -5.372093200683594
    8. '_not' → logprob: -5.372093200683594
    9. '(A' → logprob: -5.872093200683594
    10. '_unique' → logprob: -5.872093200683594

Token 137: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.12837687134742737
    2. '_one' → logprob: -2.1283769607543945
    3. '_on' → logprob: -7.3783769607543945
    4. '1' → logprob: -7.6283769607543945
    5. 'ones' → logprob: -9.253376960754395
    6. '(A' → logprob: -9.503376960754395
    7. '```' → logprob: -9.878376960754395
    8. '_A' → logprob: -10.003376960754395
    9. 'one' → logprob: -10.503376960754395
    10. 'One' → logprob: -10.753376960754395

Token 138: 'ones' (ID: 3617)
  Prédit: 'ones'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ones' → logprob: -0.041941456496715546
    2. 'one' → logprob: -3.5419414043426514
    3. '1' → logprob: -4.4169416427612305
    4. 'A' → logprob: -10.79194164276123
    5. 'One' → logprob: -11.54194164276123
    6. '```' → logprob: -12.29194164276123
    7. 'on' → logprob: -13.16694164276123
    8. ' ones' → logprob: -13.29194164276123
    9. '_one' → logprob: -13.41694164276123
    10. 'oned' → logprob: -13.54194164276123

Token 139: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.0002326224057469517
    2. '(' → logprob: -8.375232696533203
    3. ' (' → logprob: -13.500232696533203
    4. 'def' → logprob: -15.500232696533203
    5. '(B' → logprob: -15.750232696533203
    6. '(
' → logprob: -16.000232696533203
    7. '((' → logprob: -17.000232696533203
    8. '(I' → logprob: -17.125232696533203
    9. '(def' → logprob: -17.750232696533203
    10. '(E' → logprob: -17.875232696533203

Token 140: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.018321549519896507
    2. '):
' → logprob: -4.018321514129639
    3. '(A' → logprob: -9.018321990966797
    4. ' ):' → logprob: -10.393321990966797
    5. ')' → logprob: -11.643321990966797
    6. '):
' → logprob: -12.018321990966797
    7. '):

' → logprob: -12.643321990966797
    8. '   ' → logprob: -14.143321990966797
    9. ' ):
' → logprob: -14.893321990966797
    10. 'def' → logprob: -15.393321990966797

Token 141: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14985695481300354
    2. 'return' → logprob: -2.1498570442199707
    3. ' return' → logprob: -4.524857044219971
    4. 'def' → logprob: -4.649857044219971
    5. 'A' → logprob: -6.274857044219971
    6. '```' → logprob: -8.649856567382812
    7. '
' → logprob: -8.899856567382812
    8. 'sum' → logprob: -10.274856567382812
    9. '    
' → logprob: -11.274856567382812
    10. '``' → logprob: -11.774856567382812

Token 142: ' cnt' (ID: 27340)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.0659700259566307
    2. 'A' → logprob: -2.815969944000244
    3. ' return' → logprob: -5.690969944000244
    4. 'def' → logprob: -7.690969944000244
    5. 'sum' → logprob: -8.940970420837402
    6. '   ' → logprob: -10.690970420837402
    7. ' A' → logprob: -12.565970420837402
    8. '```' → logprob: -13.065970420837402
    9. '0' → logprob: -14.065970420837402
    10. ' ' → logprob: -15.190970420837402

Token 143: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3138311505317688
    2. '=' → logprob: -1.313831090927124
    3. '_' → logprob: -7.563831329345703
    4. '   ' → logprob: -10.188831329345703
    5. '  ' → logprob: -12.438831329345703
    6. 'def' → logprob: -13.313831329345703
    7. ')' → logprob: -13.438831329345703
    8. ' ' → logprob: -13.563831329345703
    9. '_=' → logprob: -13.813831329345703
    10. ',' → logprob: -13.938831329345703

Token 144: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.012703996151685715
    2. 'A' → logprob: -4.637703895568848
    3. ' ' → logprob: -6.012703895568848
    4. ' A' → logprob: -7.637703895568848
    5. '   ' → logprob: -11.762703895568848
    6. 'sum' → logprob: -12.387703895568848
    7. ' sum' → logprob: -13.262703895568848
    8. '  ' → logprob: -15.887703895568848
    9. '	A' → logprob: -16.325204849243164
    10. 'len' → logprob: -16.387704849243164

Token 145: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.10039494186639786
    2. 'A' → logprob: -2.3503949642181396
    3. ' ' → logprob: -9.475395202636719
    4. ' A' → logprob: -9.600395202636719
    5. 'sum' → logprob: -10.100395202636719
    6. 'len' → logprob: -13.975395202636719
    7. ' sum' → logprob: -14.225395202636719
    8. '```' → logprob: -14.975395202636719
    9. '   ' → logprob: -15.350395202636719
    10. '1' → logprob: -15.475395202636719

Token 146: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11593147367238998
    2. 'for' → logprob: -3.115931510925293
    3. ' for' → logprob: -3.365931510925293
    4. '
' → logprob: -3.490931510925293
    5. '	for' → logprob: -9.615931510925293
    6. 'def' → logprob: -10.615931510925293
    7. '    
' → logprob: -11.115931510925293
    8. '
' → logprob: -12.240931510925293
    9. '<|end|>' → logprob: -12.990931510925293
    10. ',' → logprob: -12.990931510925293

Token 147: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007184884510934353
    2. 'for' → logprob: -5.257184982299805
    3. ' for' → logprob: -6.257184982299805
    4. '
' → logprob: -10.382184982299805
    5. '	for' → logprob: -13.632184982299805
    6. '    
' → logprob: -15.757184982299805
    7. 'def' → logprob: -16.882184982299805
    8. '       ' → logprob: -16.882184982299805
    9. ' ' → logprob: -17.007184982299805
    10. ',' → logprob: -18.257184982299805

Token 148: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -7.896309739408025e-07
    2. '   ' → logprob: -14.500000953674316
    3. ' for' → logprob: -15.125000953674316
    4. '
' → logprob: -19.5
    5. '	for' → logprob: -20.375
    6. '```' → logprob: -22.125
    7. 'return' → logprob: -22.5
    8. '    
' → logprob: -24.25
    9. '
' → logprob: -24.375
    10. ' ' → logprob: -24.75

Token 149: ' i' (ID: 575)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.14017733931541443
    2. 'val' → logprob: -2.8901772499084473
    3. 'i' → logprob: -3.6401772499084473
    4. 'value' → logprob: -4.140177249908447
    5. ' val' → logprob: -4.640177249908447
    6. 'a' → logprob: -4.765177249908447
    7. 'v' → logprob: -4.890177249908447
    8. 'elem' → logprob: -5.390177249908447
    9. ' x' → logprob: -6.640177249908447
    10. 'element' → logprob: -7.390177249908447

Token 150: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.10025983303785324
    2. 'in' → logprob: -2.350259780883789
    3. ',' → logprob: -10.475259780883789
    4. ' ' → logprob: -10.850259780883789
    5. '  ' → logprob: -13.225259780883789
    6. '   ' → logprob: -13.600259780883789
    7. 'A' → logprob: -13.850259780883789
    8. 'range' → logprob: -14.100259780883789
    9. ' ,' → logprob: -15.725259780883789
    10. ' range' → logprob: -15.725259780883789

Token 151: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.6993266344070435
    2. 'range' → logprob: -0.6993266344070435
    3. 'A' → logprob: -5.324326515197754
    4. ' A' → logprob: -6.699326515197754
    5. '   ' → logprob: -10.699326515197754
    6. ' ' → logprob: -10.949326515197754
    7. '  ' → logprob: -11.824326515197754
    8. '(range' → logprob: -13.324326515197754
    9. 'len' → logprob: -13.574326515197754
    10. '    ' → logprob: -13.949326515197754

Token 152: '(len' (ID: 14990)
  Prédit: '(len'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(len' → logprob: -0.06229345500469208
    2. 'len' → logprob: -2.812293529510498
    3. ' len' → logprob: -8.06229305267334
    4. '   ' → logprob: -11.56229305267334
    5. ',len' → logprob: -14.31229305267334
    6. '	len' → logprob: -14.93729305267334
    7. '(' → logprob: -16.062294006347656
    8. '[len' → logprob: -17.312294006347656
    9. '<len' → logprob: -17.437294006347656
    10. '=len' → logprob: -17.687294006347656

Token 153: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -1.1637164789135568e-05
    2. '(' → logprob: -11.625011444091797
    3. 'A' → logprob: -13.000011444091797
    4. ' (' → logprob: -15.250011444091797
    5. ')' → logprob: -16.375011444091797
    6. '(
' → logprob: -16.750011444091797
    7. 'def' → logprob: -16.750011444091797
    8. '```' → logprob: -18.250011444091797
    9. '[A' → logprob: -18.250011444091797
    10. 's' → logprob: -18.500011444091797

Token 154: ')):
' (ID: 22530)
  Prédit: '):
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.21658775210380554
    2. ')):
' → logprob: -1.841587781906128
    3. '):' → logprob: -3.466587781906128
    4. ')):' → logprob: -5.341587543487549
    5. '):
' → logprob: -10.466588020324707
    6. '   ' → logprob: -10.591588020324707
    7. '():
' → logprob: -10.591588020324707
    8. ')' → logprob: -10.966588020324707
    9. '))' → logprob: -11.091588020324707
    10. '()):
' → logprob: -11.341588020324707

Token 155: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00912997405976057
    2. ' if' → logprob: -5.134130001068115
    3. 'if' → logprob: -5.759130001068115
    4. '   ' → logprob: -10.384129524230957
    5. ':' → logprob: -12.884129524230957
    6. '```' → logprob: -13.009129524230957
    7. '      ' → logprob: -14.134129524230957
    8. ',' → logprob: -14.259129524230957
    9. '	if' → logprob: -14.509129524230957
    10. '<|end|>' → logprob: -14.634129524230957

Token 156: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.0042036441154778
    2. ' if' → logprob: -5.504203796386719
    3. '   ' → logprob: -9.379203796386719
    4. '       ' → logprob: -10.129203796386719
    5. '
' → logprob: -15.004203796386719
    6. '	if' → logprob: -15.629203796386719
    7. 'cnt' → logprob: -16.00420379638672
    8. '```' → logprob: -16.50420379638672
    9. ' ' → logprob: -16.75420379638672
    10. 'If' → logprob: -17.62920379638672

Token 157: ' is' (ID: 382)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.02324722334742546
    2. 'A' → logprob: -3.773247241973877
    3. ' ' → logprob: -14.398246765136719
    4. '   ' → logprob: -14.398246765136719
    5. '(A' → logprob: -14.898246765136719
    6. '	A' → logprob: -15.523246765136719
    7. '  ' → logprob: -18.02324676513672
    8. '    ' → logprob: -18.27324676513672
    9. ' ' → logprob: -19.02324676513672
    10. '_A' → logprob: -19.39824676513672

Token 158: '_minus' (ID: 101055)
  Prédit: '_minus'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_minus' → logprob: -0.9088282585144043
    2. '(A' → logprob: -1.1588282585144043
    3. 'A' → logprob: -1.6588282585144043
    4. ' A' → logprob: -2.7838282585144043
    5. '_A' → logprob: -4.908828258514404
    6. '-' → logprob: -5.158828258514404
    7. '_' → logprob: -5.158828258514404
    8. '_un' → logprob: -5.783828258514404
    9. 'minus' → logprob: -6.158828258514404
    10. '_negative' → logprob: -6.533828258514404

Token 159: '_one' (ID: 26979)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.652482807636261
    2. '_one' → logprob: -0.777482807636261
    3. '1' → logprob: -4.027482986450195
    4. '(A' → logprob: -7.152482986450195
    5. 'one' → logprob: -7.527482986450195
    6. 'One' → logprob: -7.652482986450195
    7. '_A' → logprob: -11.527482986450195
    8. '```' → logprob: -11.527482986450195
    9. 'ones' → logprob: -11.652482986450195
    10. 'A' → logprob: -11.902482986450195

Token 160: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -5.6457742175552994e-05
    2. '(' → logprob: -10.000056266784668
    3. ' (' → logprob: -12.000056266784668
    4. ')' → logprob: -13.000056266784668
    5. 'A' → logprob: -13.375056266784668
    6. '(
' → logprob: -14.750056266784668
    7. '
' → logprob: -16.125057220458984
    8. '   ' → logprob: -16.250057220458984
    9. ' A' → logprob: -16.250057220458984
    10. ' ' → logprob: -16.875057220458984

Token 161: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.016779951751232147
    2. '[A' → logprob: -4.391779899597168
    3. '(A' → logprob: -6.266779899597168
    4. '(i' → logprob: -6.516779899597168
    5. '[idx' → logprob: -8.141779899597168
    6. '[' → logprob: -8.141779899597168
    7. ')' → logprob: -9.266779899597168
    8. ')[' → logprob: -10.016779899597168
    9. '```' → logprob: -10.266779899597168
    10. 'A' → logprob: -10.766779899597168

Token 162: ']):
' (ID: 51989)
  Prédit: '):
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.39166975021362305
    2. '):' → logprob: -1.141669750213623
    3. ')' → logprob: -5.641669750213623
    4. ' ):
' → logprob: -8.266670227050781
    5. ' ):' → logprob: -8.891670227050781
    6. '()):
' → logprob: -8.891670227050781
    7. ')):
' → logprob: -9.141670227050781
    8. ']):' → logprob: -9.391670227050781
    9. ')):' → logprob: -9.391670227050781
    10. ']):
' → logprob: -9.516670227050781

Token 163: '           ' (ID: 352)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.4456808269023895
    2. '           ' → logprob: -1.070680856704712
    3. ':
' → logprob: -4.195680618286133
    4. '():' → logprob: -7.695680618286133
    5. '):' → logprob: -7.695680618286133
    6. '       ' → logprob: -8.195680618286133
    7. '():
' → logprob: -9.195680618286133
    8. ',' → logprob: -9.695680618286133
    9. '):
' → logprob: -9.695680618286133
    10. ' :' → logprob: -9.695680618286133

Token 164: ' cnt' (ID: 27340)
  Prédit: 'cnt'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cnt' (adapté à ' cnt') → logprob: -0.009432218968868256
    2. ' cnt' → logprob: -4.759432315826416
    3. '       ' → logprob: -7.259432315826416
    4. '           ' → logprob: -9.384431838989258
    5. '	cnt' → logprob: -11.134431838989258
    6. '(cnt' → logprob: -12.009431838989258
    7. '               ' → logprob: -12.509431838989258
    8. '   ' → logprob: -13.009431838989258
    9. '[cnt' → logprob: -13.759431838989258
    10. 'count' → logprob: -13.884431838989258

Token 165: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.00469083059579134
    2. ' +=' → logprob: -5.379690647125244
    3. '=' → logprob: -10.004691123962402
    4. '+' → logprob: -11.129691123962402
    5. ']+=' → logprob: -11.754691123962402
    6. '           ' → logprob: -13.754691123962402
    7. '   ' → logprob: -14.754691123962402
    8. '++' → logprob: -15.004691123962402
    9. 'inue' → logprob: -16.004690170288086
    10. 'cnt' → logprob: -16.129690170288086

Token 166: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.029750604182481766
    2. ' ' → logprob: -3.5297505855560303
    3. '   ' → logprob: -16.65475082397461
    4. ' ' → logprob: -17.27975082397461
    5. '
' → logprob: -18.52975082397461
    6. '  ' → logprob: -19.02975082397461
    7. '<|end|>' → logprob: -19.77975082397461
    8. '```' → logprob: -20.15475082397461
    9. 'def' → logprob: -20.46725082397461
    10. '    ' → logprob: -20.46725082397461

Token 167: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.438573680294212e-06
    2. ' ' → logprob: -12.125005722045898
    3. '   ' → logprob: -19.0000057220459
    4. '
' → logprob: -21.6250057220459
    5. '  ' → logprob: -21.7500057220459
    6. '```' → logprob: -22.0000057220459
    7. '       ' → logprob: -22.5000057220459
    8. '-' → logprob: -22.8750057220459
    9. '１' → logprob: -23.1250057220459
    10. '<|end|>' → logprob: -23.2500057220459

Token 168: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012887361459434032
    2. '
' → logprob: -5.012887477874756
    3. 'return' → logprob: -5.637887477874756
    4. ' return' → logprob: -6.012887477874756
    5. '	return' → logprob: -9.387887001037598
    6. '       ' → logprob: -10.512887001037598
    7. 'def' → logprob: -11.012887001037598
    8. '    
' → logprob: -11.137887001037598
    9. ' ' → logprob: -14.637887001037598
    10. ':return' → logprob: -14.637887001037598

Token 169: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.011130588129162788
    2. 'return' → logprob: -4.7611308097839355
    3. ' return' → logprob: -6.0111308097839355
    4. '
' → logprob: -10.636130332946777
    5. '       ' → logprob: -11.011130332946777
    6. 'def' → logprob: -11.011130332946777
    7. '	return' → logprob: -12.636130332946777
    8. ' ' → logprob: -14.261130332946777
    9. '  ' → logprob: -15.636130332946777
    10. '```' → logprob: -15.636130332946777

Token 170: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.03895318880677223
    2. '   ' → logprob: -3.2889533042907715
    3. ' return' → logprob: -7.0389533042907715
    4. 'def' → logprob: -10.538952827453613
    5. '	return' → logprob: -13.038952827453613
    6. '       ' → logprob: -13.163952827453613
    7. '
' → logprob: -13.288952827453613
    8. ' ' → logprob: -13.413952827453613
    9. '```' → logprob: -15.538952827453613
    10. 'eturn' → logprob: -15.788952827453613

Token 171: ' cnt' (ID: 27340)
  Prédit: 'cnt'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cnt' → logprob: -0.07889287173748016
    2. ' cnt' → logprob: -2.578892946243286
    3. '(cnt' → logprob: -12.828892707824707
    4. '	cnt' → logprob: -15.078892707824707
    5. '[cnt' → logprob: -16.828893661499023
    6. 'count' → logprob: -18.203893661499023
    7. ' ' → logprob: -19.453893661499023
    8. ' ' → logprob: -19.953893661499023
    9. '   ' → logprob: -20.078893661499023
    10. '_cnt' → logprob: -20.203893661499023

Token 172: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.016248434782028198
    2. '
' → logprob: -4.1412482261657715
    3. '

' → logprob: -8.89124870300293
    4. ' def' → logprob: -10.01624870300293
    5. '    
' → logprob: -11.14124870300293
    6. '  
' → logprob: -12.01624870300293
    7. '<|end|>' → logprob: -12.26624870300293
    8. '(
' → logprob: -13.89124870300293
    9. '(' → logprob: -13.89124870300293
    10. ' 
' → logprob: -14.26624870300293

Token 173: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -3.128163257315464e-07
    2. '
' → logprob: -16.0
    3. ' def' → logprob: -16.0
    4. 'd' → logprob: -17.375
    5. '    
' → logprob: -18.875
    6. 'ndef' → logprob: -18.875
    7. 'de' → logprob: -18.875
    8. '```' → logprob: -19.0
    9. '_def' → logprob: -19.375
    10. ' 
' → logprob: -20.25

Token 174: ' is' (ID: 382)
  Prédit: 'is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'is' → logprob: -0.034908778965473175
    2. ' is' → logprob: -3.4099087715148926
    3. 'main' → logprob: -6.784908771514893
    4. ' main' → logprob: -9.65990924835205
    5. 'input' → logprob: -10.03490924835205
    6. 'def' → logprob: -12.15990924835205
    7. 'count' → logprob: -12.78490924835205
    8. 'all' → logprob: -12.90990924835205
    9. ' input' → logprob: -13.15990924835205
    10. 'print' → logprob: -13.53490924835205

Token 175: '_minus' (ID: 101055)
  Prédit: '_minus'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_minus' → logprob: -1.8624639324116288e-06
    2. 'minus' → logprob: -14.000001907348633
    3. '_' → logprob: -14.375001907348633
    4. '_-' → logprob: -16.125001907348633
    5. '_MINUS' → logprob: -16.250001907348633
    6. '_is' → logprob: -17.000001907348633
    7. '```' → logprob: -17.125001907348633
    8. '_min' → logprob: -17.875001907348633
    9. 'is' → logprob: -18.500001907348633
    10. '_plus' → logprob: -18.625001907348633

Token 176: '_one' (ID: 26979)
  Prédit: '_one'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_one' → logprob: -3.128163257315464e-07
    2. '_ONE' → logprob: -16.625
    3. '_' → logprob: -16.875
    4. 'one' → logprob: -17.0
    5. 'One' → logprob: -17.875
    6. '_minus' → logprob: -18.5
    7. '```' → logprob: -19.25
    8. ' one' → logprob: -19.5
    9. '1' → logprob: -19.625
    10. '_once' → logprob: -20.375

Token 177: '(val' (ID: 17391)
  Prédit: '(value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(value' → logprob: -0.27278488874435425
    2. '(val' → logprob: -1.772784948348999
    3. '(A' → logprob: -3.022784948348999
    4. '(x' → logprob: -4.27278470993042
    5. '(' → logprob: -5.64778470993042
    6. '(a' → logprob: -6.39778470993042
    7. '(num' → logprob: -7.02278470993042
    8. '(i' → logprob: -9.647785186767578
    9. '(v' → logprob: -9.897785186767578
    10. '(element' → logprob: -10.772785186767578

Token 178: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.008632057346403599
    2. '):
' → logprob: -4.758632183074951
    3. ')' → logprob: -11.258631706237793
    4. ' ):' → logprob: -13.258631706237793
    5. '():' → logprob: -14.383631706237793
    6. '):
' → logprob: -14.383631706237793
    7. '   ' → logprob: -14.383631706237793
    8. '):

' → logprob: -14.508631706237793
    9. ':' → logprob: -15.008631706237793
    10. '=' → logprob: -15.758631706237793

Token 179: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.055478595197200775
    2. 'return' → logprob: -3.055478572845459
    3. ' return' → logprob: -5.055478572845459
    4. 'val' → logprob: -7.805478572845459
    5. ' val' → logprob: -9.430479049682617
    6. '	return' → logprob: -12.805479049682617
    7. '  ' → logprob: -13.805479049682617
    8. ' ' → logprob: -14.305479049682617
    9. '	val' → logprob: -14.680479049682617
    10. '    ' → logprob: -14.805479049682617

Token 180: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.0320449061691761
    2. 'val' → logprob: -3.5320448875427246
    3. '   ' → logprob: -6.782044887542725
    4. ' return' → logprob: -6.782044887542725
    5. ' val' → logprob: -10.657045364379883
    6. '	return' → logprob: -16.157045364379883
    7. '[val' → logprob: -16.282045364379883
    8. '```' → logprob: -16.407045364379883
    9. '(val' → logprob: -16.782045364379883
    10. ' ' → logprob: -17.157045364379883

Token 181: ' val' (ID: 1459)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.2519291639328003
    2. ' val' → logprob: -1.5019291639328003
    3. '(val' → logprob: -16.626928329467773
    4. '	val' → logprob: -17.876928329467773
    5. '_val' → logprob: -20.751928329467773
    6. '   ' → logprob: -21.126928329467773
    7. '.val' → logprob: -21.626928329467773
    8. '[val' → logprob: -21.626928329467773
    9. ' ' → logprob: -22.126928329467773
    10. ' (' → logprob: -23.251928329467773

Token 182: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.23014028370380402
    2. '==' → logprob: -2.105140209197998
    3. '==-' → logprob: -2.480140209197998
    4. '-' → logprob: -12.480140686035156
    5. '=' → logprob: -12.730140686035156
    6. ')==' → logprob: -12.980140686035156
    7. ' ' → logprob: -13.230140686035156
    8. '()==' → logprob: -13.480140686035156
    9. ')' → logprob: -13.605140686035156
    10. ' ' → logprob: -13.980140686035156

Token 183: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.011047935113310814
    2. ' -' → logprob: -4.511047840118408
    3. ' ' → logprob: -16.26104736328125
    4. '   ' → logprob: -17.13604736328125
    5. '1' → logprob: -18.26104736328125
    6. '  ' → logprob: -19.13604736328125
    7. '(-' → logprob: -19.63604736328125
    8. '−' → logprob: -19.76104736328125
    9. '```' → logprob: -20.38604736328125
    10. ' ' → logprob: -20.51104736328125

Token 184: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.128163257315464e-07
    2. ' ' → logprob: -15.25
    3. '-' → logprob: -17.125
    4. '<|end|>' → logprob: -17.875
    5. '```' → logprob: -18.625
    6. 'def' → logprob: -19.75
    7. '   ' → logprob: -19.75
    8. '۱' → logprob: -20.3125
    9. '１' → logprob: -20.5
    10. '१' → logprob: -20.5625

Token 185: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.53204345703125
    2. '<|end|>' → logprob: -1.03204345703125
    3. 'n' → logprob: -3.53204345703125
    4. '```' → logprob: -4.78204345703125
    5. '#' → logprob: -4.90704345703125
    6. ')' → logprob: -5.65704345703125
    7. '()' → logprob: -5.90704345703125
    8. '[' → logprob: -7.15704345703125
    9. 'a' → logprob: -7.40704345703125
    10. '
' → logprob: -7.40704345703125

Token 186: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -9.849109119386412e-06
    2. 'n' → logprob: -12.250009536743164
    3. '<|end|>' → logprob: -13.250009536743164
    4. 'if' → logprob: -13.625009536743164
    5. '#' → logprob: -13.625009536743164
    6. 'ndef' → logprob: -15.125009536743164
    7. '```' → logprob: -15.375009536743164
    8. '
' → logprob: -16.625009536743164
    9. '(n' → logprob: -16.625009536743164
    10. 'for' → logprob: -16.750009536743164

Token 187: ' solve' (ID: 17722)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.030503610149025917
    2. ' main' → logprob: -3.530503511428833
    3. 'input' → logprob: -7.405503749847412
    4. 'def' → logprob: -9.655503273010254
    5. ' input' → logprob: -10.280503273010254
    6. 'solve' → logprob: -11.280503273010254
    7. 'process' → logprob: -11.655503273010254
    8. 'count' → logprob: -12.030503273010254
    9. 'calculate' → logprob: -12.280503273010254
    10. '_main' → logprob: -12.780503273010254

Token 188: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0002506111632101238
    2. ' ():' → logprob: -8.875250816345215
    3. '():
' → logprob: -9.125250816345215
    4. '(n' → logprob: -13.250250816345215
    5. '()' → logprob: -16.5002498626709
    6. '(' → logprob: -17.0002498626709
    7. '():
' → logprob: -18.0002498626709
    8. '()(' → logprob: -18.5002498626709
    9. '():

' → logprob: -19.0002498626709
    10. '_n' → logprob: -19.1252498626709

Token 189: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07083495706319809
    2. 'n' → logprob: -3.0708348751068115
    3. ' n' → logprob: -3.8208348751068115
    4. '(n' → logprob: -9.57083511352539
    5. '	n' → logprob: -10.94583511352539
    6. '_n' → logprob: -13.69583511352539
    7. '    ' → logprob: -13.94583511352539
    8. ',n' → logprob: -14.19583511352539
    9. '()' → logprob: -14.57083511352539
    10. ' (' → logprob: -14.94583511352539

Token 190: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.00018685187387745827
    2. '   ' → logprob: -8.625186920166016
    3. ' n' → logprob: -11.875186920166016
    4. '	n' → logprob: -15.750186920166016
    5. '```' → logprob: -16.750186920166016
    6. 'def' → logprob: -17.000186920166016
    7. '_n' → logprob: -17.125186920166016
    8. '(n' → logprob: -17.125186920166016
    9. '
' → logprob: -17.500186920166016
    10. ' ' → logprob: -17.875186920166016

Token 191: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.007793763652443886
    2. ',k' → logprob: -4.88279390335083
    3. ' ,' → logprob: -8.632793426513672
    4. 'k' → logprob: -11.757793426513672
    5. ' k' → logprob: -14.257793426513672
    6. ',K' → logprob: -14.757793426513672
    7. ',
' → logprob: -16.007793426513672
    8. '_,' → logprob: -16.382793426513672
    9. ',n' → logprob: -16.882793426513672
    10. '，' → logprob: -17.132793426513672

Token 192: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.02975187823176384
    2. ' k' → logprob: -3.529751777648926
    3. 'K' → logprob: -14.029751777648926
    4. ',k' → logprob: -16.029752731323242
    5. '	k' → logprob: -16.654752731323242
    6. ' K' → logprob: -16.779752731323242
    7. ' ' → logprob: -17.279752731323242
    8. '_k' → logprob: -17.279752731323242
    9. 'input' → logprob: -17.404752731323242
    10. 'm' → logprob: -17.404752731323242

Token 193: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3868745267391205
    2. '=' → logprob: -1.1368745565414429
    3. ',' → logprob: -12.886874198913574
    4. '   ' → logprob: -14.511874198913574
    5. '＝' → logprob: -15.761874198913574
    6. ')' → logprob: -15.886874198913574
    7. ' ' → logprob: -16.01187515258789
    8. '    ' → logprob: -17.26187515258789
    9. '=input' → logprob: -17.63687515258789
    10. '  ' → logprob: -18.26187515258789

Token 194: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.5759410262107849
    2. ' input' → logprob: -0.8259410262107849
    3. '   ' → logprob: -13.57594108581543
    4. '    ' → logprob: -15.95094108581543
    5. ' ' → logprob: -16.70094108581543
    6. '	input' → logprob: -17.70094108581543
    7. ' map' → logprob: -17.95094108581543
    8. '=input' → logprob: -17.95094108581543
    9. '(input' → logprob: -18.07594108581543
    10. '<input' → logprob: -18.07594108581543

Token 195: '_n' (ID: 2170)
  Prédit: '_n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: -8.061054359131958e-06
    2. '_' → logprob: -12.250007629394531
    3. '()' → logprob: -12.750007629394531
    4. '("_' → logprob: -16.37500762939453
    5. 'n' → logprob: -17.00000762939453
    6. '('_' → logprob: -17.12500762939453
    7. '(' → logprob: -17.50000762939453
    8. ' _' → logprob: -17.62500762939453
    9. '_k' → logprob: -17.87500762939453
    10. '"_' → logprob: -17.87500762939453

Token 196: '_and' (ID: 18645)
  Prédit: '_and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_and' → logprob: -0.0005418312503024936
    2. '_n' → logprob: -7.625541687011719
    3. '_' → logprob: -10.250541687011719
    4. 'and' → logprob: -11.000541687011719
    5. '_or' → logprob: -14.250541687011719
    6. '_for' → logprob: -14.875541687011719
    7. ' and' → logprob: -16.00054168701172
    8. '_AND' → logprob: -16.12554168701172
    9. '_k' → logprob: -16.37554168701172
    10. 'n' → logprob: -16.87554168701172

Token 197: '_k' (ID: 11637)
  Prédit: '_k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_k' → logprob: -0.011422323994338512
    2. '_' → logprob: -4.886422157287598
    3. 'k' → logprob: -5.636422157287598
    4. '()' → logprob: -8.761422157287598
    5. '(k' → logprob: -9.761422157287598
    6. '(' → logprob: -10.886422157287598
    7. '(_)' → logprob: -12.886422157287598
    8. '_spaces' → logprob: -13.386422157287598
    9. '```' → logprob: -14.136422157287598
    10. ')' → logprob: -14.511422157287598

Token 198: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -1.282920129597187e-05
    2. '()
' → logprob: -11.625012397766113
    3. '()`' → logprob: -13.500012397766113
    4. '()"' → logprob: -14.625012397766113
    5. '()]' → logprob: -14.750012397766113
    6. ' ()' → logprob: -15.250012397766113
    7. '()[' → logprob: -15.750012397766113
    8. '(),' → logprob: -15.750012397766113
    9. '()}' → logprob: -15.750012397766113
    10. '()<' → logprob: -16.00001335144043

Token 199: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0697556808590889
    2. 'A' → logprob: -2.944755792617798
    3. '
' → logprob: -5.069755554199219
    4. ' A' → logprob: -5.194755554199219
    5. '    
' → logprob: -6.069755554199219
    6. 'a' → logprob: -7.819755554199219
    7. 'for' → logprob: -10.194755554199219
    8. '```' → logprob: -10.569755554199219
    9. '   
' → logprob: -10.694755554199219
    10. ' ' → logprob: -10.944755554199219

Token 200: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' (adapté à ' A') → logprob: -3.941161776310764e-05
    2. '   ' → logprob: -11.125039100646973
    3. ' A' → logprob: -11.625039100646973
    4. 'for' → logprob: -11.875039100646973
    5. 'a' → logprob: -12.625039100646973
    6. 'result' → logprob: -13.750039100646973
    7. 'd' → logprob: -14.000039100646973
    8. 'results' → logprob: -14.125039100646973
    9. '```' → logprob: -14.875039100646973
    10. ' ' → logprob: -15.500039100646973

Token 201: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.10020699352025986
    2. '=' → logprob: -2.3502070903778076
    3. ')' → logprob: -15.975207328796387
    4. ',' → logprob: -16.60020637512207
    5. '   ' → logprob: -17.10020637512207
    6. '_' → logprob: -17.10020637512207
    7. '```' → logprob: -17.47520637512207
    8. ' ' → logprob: -17.85020637512207
    9. '＝' → logprob: -17.85020637512207
    10. '[' → logprob: -17.97520637512207

Token 202: ' initialize' (ID: 18400)
  Prédit: 'initialize'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'initialize' → logprob: -0.2519410252571106
    2. ' initialize' → logprob: -1.5019409656524658
    3. '[-' → logprob: -12.501940727233887
    4. '	initialize' → logprob: -12.626940727233887
    5. '_initialize' → logprob: -13.626940727233887
    6. ' [-' → logprob: -13.751940727233887
    7. '.initialize' → logprob: -13.876940727233887
    8. '[' → logprob: -14.376940727233887
    9. ' initialized' → logprob: -14.876940727233887
    10. 'initialized' → logprob: -15.001940727233887

Token 203: '_A' (ID: 6829)
  Prédit: '_A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_A' → logprob: -9.088346359931165e-07
    2. 'A' → logprob: -14.750000953674316
    3. '```' → logprob: -15.250000953674316
    4. '(A' → logprob: -16.0
    5. '(n' → logprob: -16.875
    6. '`' → logprob: -17.75
    7. '(' → logprob: -17.875
    8. '_' → logprob: -18.0
    9. '_(' → logprob: -19.25
    10. '_N' → logprob: -19.5

Token 204: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -2.45848218582978e-06
    2. '(' → logprob: -13.00000286102295
    3. ' (' → logprob: -15.87500286102295
    4. 'n' → logprob: -17.000001907348633
    5. '(k' → logprob: -18.000001907348633
    6. '(len' → logprob: -19.750001907348633
    7. '
' → logprob: -20.250001907348633
    8. '(
' → logprob: -20.625001907348633
    9. '```' → logprob: -20.625001907348633
    10. '((' → logprob: -20.875001907348633

Token 205: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00017982252757064998
    2. ')
' → logprob: -8.6251802444458
    3. ')

' → logprob: -15.6251802444458
    4. ')
' → logprob: -17.250179290771484
    5. '   ' → logprob: -17.625179290771484
    6. ' )' → logprob: -17.625179290771484
    7. ')#' → logprob: -18.625179290771484
    8. '))' → logprob: -18.625179290771484
    9. ')n' → logprob: -18.625179290771484
    10. '),' → logprob: -19.500179290771484

Token 206: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1373184621334076
    2. ' for' → logprob: -2.6373183727264404
    3. 'for' → logprob: -2.8873183727264404
    4. 'd' → logprob: -7.2623186111450195
    5. '    
' → logprob: -9.26231861114502
    6. '```' → logprob: -9.76231861114502
    7. '
' → logprob: -10.01231861114502
    8. ' while' → logprob: -10.51231861114502
    9. 'while' → logprob: -10.51231861114502
    10. '<|end|>' → logprob: -10.63731861114502

Token 207: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -5.5577775128767826e-06
    2. ' for' → logprob: -12.250005722045898
    3. '   ' → logprob: -14.250005722045898
    4. 'while' → logprob: -17.3750057220459
    5. 'k' → logprob: -18.5000057220459
    6. 'total' → logprob: -19.0000057220459
    7. 'i' → logprob: -19.2500057220459
    8. '    
' → logprob: -19.2500057220459
    9. 'count' → logprob: -19.6250057220459
    10. 'd' → logprob: -19.7500057220459

Token 208: ' i' (ID: 575)
  Prédit: ' _'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.07891535013914108
    2. '_' → logprob: -2.5789153575897217
    3. ' i' → logprob: -10.7039155960083
    4. '_i' → logprob: -12.8289155960083
    5. 'i' → logprob: -15.8289155960083
    6. ' ' → logprob: -16.078914642333984
    7. ' ' → logprob: -16.203914642333984
    8. ' range' → logprob: -17.328914642333984
    9. ' _
' → logprob: -18.203914642333984
    10. '_range' → logprob: -18.328914642333984

Token 209: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.023290783166885376
    2. 'in' → logprob: -3.7732908725738525
    3. ' ' → logprob: -10.648290634155273
    4. '_' → logprob: -11.398290634155273
    5. 'range' → logprob: -12.648290634155273
    6. 'n' → logprob: -13.398290634155273
    7. ' _' → logprob: -13.648290634155273
    8. '   ' → logprob: -13.773290634155273
    9. '    ' → logprob: -14.023290634155273
    10. '(' → logprob: -14.773290634155273

Token 210: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0024774393532425165
    2. ' range' → logprob: -6.002477645874023
    3. ' ' → logprob: -14.252477645874023
    4. '   ' → logprob: -14.377477645874023
    5. '  ' → logprob: -15.127477645874023
    6. '(range' → logprob: -15.752477645874023
    7. '	range' → logprob: -16.252477645874023
    8. 'rang' → logprob: -17.002477645874023
    9. '    ' → logprob: -18.127477645874023
    10. '
' → logprob: -18.502477645874023

Token 211: '(k' (ID: 12125)
  Prédit: '(k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(k' → logprob: -0.00039706481038592756
    2. 'k' → logprob: -8.000396728515625
    3. '(' → logprob: -10.500396728515625
    4. ' k' → logprob: -10.875396728515625
    5. ' (' → logprob: -11.125396728515625
    6. '   ' → logprob: -15.375396728515625
    7. '(
' → logprob: -16.250396728515625
    8. '	k' → logprob: -16.375396728515625
    9. '
' → logprob: -17.250396728515625
    10. ',k' → logprob: -17.875396728515625

Token 212: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0001266613689949736
    2. '):
' → logprob: -9.125126838684082
    3. ' ):' → logprob: -11.125126838684082
    4. ':' → logprob: -13.000126838684082
    5. '():' → logprob: -15.000126838684082
    6. ')' → logprob: -15.375126838684082
    7. '):
' → logprob: -17.375125885009766
    8. '   ' → logprob: -17.625125885009766
    9. '}:' → logprob: -18.125125885009766
    10. '+' → logprob: -19.250125885009766

Token 213: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0013521412620320916
    2. '   ' → logprob: -7.251352310180664
    3. 'd' → logprob: -8.376352310180664
    4. '
' → logprob: -8.751352310180664
    5. ' d' → logprob: -9.376352310180664
    6. '        
' → logprob: -9.751352310180664
    7. '    
' → logprob: -10.126352310180664
    8. '  
' → logprob: -10.626352310180664
    9. '      ' → logprob: -12.001352310180664
    10. '     ' → logprob: -12.376352310180664

Token 214: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' (adapté à ' d') → logprob: -0.037429165095090866
    2. ' d' → logprob: -3.412429094314575
    3. '       ' → logprob: -5.787429332733154
    4. '   ' → logprob: -7.287429332733154
    5. '	d' → logprob: -11.787428855895996
    6. '
' → logprob: -12.287428855895996
    7. '_d' → logprob: -12.537428855895996
    8. ' ' → logprob: -12.662428855895996
    9. '           ' → logprob: -13.412428855895996
    10. 'def' → logprob: -13.662428855895996

Token 215: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.16022635996341705
    2. '=' → logprob: -1.9102263450622559
    3. ' ' → logprob: -13.785226821899414
    4. '   ' → logprob: -15.160226821899414
    5. '    ' → logprob: -15.285226821899414
    6. '=int' → logprob: -15.285226821899414
    7. '  ' → logprob: -16.035226821899414
    8. ')' → logprob: -16.160226821899414
    9. ',' → logprob: -16.910226821899414
    10. '=input' → logprob: -16.910226821899414

Token 216: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.079154372215271
    2. ' input' → logprob: -2.5791544914245605
    3. 'int' → logprob: -8.329154014587402
    4. ' int' → logprob: -11.204154014587402
    5. '=input' → logprob: -12.079154014587402
    6. '(input' → logprob: -13.329154014587402
    7. '   ' → logprob: -13.954154014587402
    8. 'd' → logprob: -15.204154014587402
    9. '_input' → logprob: -15.329154014587402
    10. '[input' → logprob: -15.829154014587402

Token 217: '_d' (ID: 1565)
  Prédit: '_d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_d' → logprob: -0.1989150047302246
    2. '_' → logprob: -1.8239150047302246
    3. '()' → logprob: -4.073915004730225
    4. 'd' → logprob: -6.323915004730225
    5. '```' → logprob: -10.198915481567383
    6. ' _' → logprob: -10.573915481567383
    7. '(' → logprob: -10.573915481567383
    8. ')' → logprob: -10.698915481567383
    9. '}_' → logprob: -11.823915481567383
    10. '`()' → logprob: -11.823915481567383

Token 218: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00594479450955987
    2. '()
' → logprob: -5.130944728851318
    3. '())' → logprob: -12.130945205688477
    4. ')' → logprob: -12.630945205688477
    5. '       ' → logprob: -12.880945205688477
    6. '()
' → logprob: -13.380945205688477
    7. '()

' → logprob: -13.630945205688477
    8. '()\' → logprob: -13.880945205688477
    9. '()<' → logprob: -14.880945205688477
    10. ' ()' → logprob: -15.005945205688477

Token 219: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.05665460601449013
    2. 'a' → logprob: -2.931654691696167
    3. ' a' → logprob: -7.181654453277588
    4. '<|end|>' → logprob: -7.681654453277588
    5. '   ' → logprob: -8.056654930114746
    6. ',a' → logprob: -9.181654930114746
    7. '	a' → logprob: -10.306654930114746
    8. '        
' → logprob: -10.806654930114746
    9. ')' → logprob: -11.306654930114746
    10. ')a' → logprob: -11.556654930114746

Token 220: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' (adapté à ' a') → logprob: -0.00034237600630149245
    2. ' a' → logprob: -8.62534236907959
    3. '       ' → logprob: -8.75034236907959
    4. '   ' → logprob: -13.00034236907959
    5. '	a' → logprob: -13.12534236907959
    6. '_a' → logprob: -16.875343322753906
    7. '#a' → logprob: -17.750343322753906
    8. ',a' → logprob: -18.000343322753906
    9. '        
' → logprob: -18.125343322753906
    10. '```' → logprob: -18.250343322753906

Token 221: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.054899662733078
    2. '=' → logprob: -2.9298996925354004
    3. '()' → logprob: -11.054899215698242
    4. '   ' → logprob: -14.554899215698242
    5. '(' → logprob: -15.179899215698242
    6. ')' → logprob: -15.429899215698242
    7. ' ' → logprob: -15.554899215698242
    8. '=input' → logprob: -16.179899215698242
    9. '_' → logprob: -16.679899215698242
    10. '    ' → logprob: -17.054899215698242

Token 222: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.005234121344983578
    2. ' input' → logprob: -5.255234241485596
    3. '(input' → logprob: -16.380233764648438
    4. '=input' → logprob: -16.880233764648438
    5. '<input' → logprob: -17.380233764648438
    6. '	input' → logprob: -17.630233764648438
    7. '_input' → logprob: -17.755233764648438
    8. ' ' → logprob: -18.630233764648438
    9. '[input' → logprob: -18.630233764648438
    10. '   ' → logprob: -19.005233764648438

Token 223: '_a' (ID: 10852)
  Prédit: '_a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_a' → logprob: -1.8624639324116288e-06
    2. '_' → logprob: -13.750001907348633
    3. '()' → logprob: -14.375001907348633
    4. ' _' → logprob: -16.750001907348633
    5. 'a' → logprob: -17.750001907348633
    6. '_d' → logprob: -18.375001907348633
    7. '(' → logprob: -18.875001907348633
    8. '().' → logprob: -19.500001907348633
    9. '(_' → logprob: -20.000001907348633
    10. '(a' → logprob: -20.000001907348633

Token 224: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.6943157315254211
    2. '()
' → logprob: -0.6943157315254211
    3. '       ' → logprob: -6.8193159103393555
    4. '()
' → logprob: -9.944315910339355
    5. ')' → logprob: -11.194315910339355
    6. '   ' → logprob: -12.194315910339355
    7. ')
' → logprob: -12.444315910339355
    8. '()

' → logprob: -12.819315910339355
    9. '())' → logprob: -14.444315910339355
    10. '()\' → logprob: -15.194315910339355

Token 225: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.000995890935882926
    2. 'update' → logprob: -7.625996112823486
    3. '   ' → logprob: -7.875996112823486
    4. ' update' → logprob: -9.125995635986328
    5. '```' → logprob: -12.000995635986328
    6. '(update' → logprob: -12.375995635986328
    7. '        
' → logprob: -13.125995635986328
    8. '
' → logprob: -13.250995635986328
    9. '.update' → logprob: -13.375995635986328
    10. '           ' → logprob: -13.750995635986328

Token 226: ' update' (ID: 4027)
  Prédit: 'update'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'update' (adapté à ' update') → logprob: -0.03717604652047157
    2. ' update' → logprob: -3.7871761322021484
    3. '       ' → logprob: -4.287176132202148
    4. '   ' → logprob: -9.412176132202148
    5. '	update' → logprob: -12.662176132202148
    6. '.update' → logprob: -13.412176132202148
    7. '```' → logprob: -13.662176132202148
    8. ' ' → logprob: -13.912176132202148
    9. '(update' → logprob: -14.412176132202148
    10. '_update' → logprob: -14.912176132202148

Token 227: '_A' (ID: 6829)
  Prédit: '_A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_A' → logprob: -6.704273118884885e-07
    2. '```' → logprob: -14.750000953674316
    3. '(A' → logprob: -15.250000953674316
    4. '_' → logprob: -17.75
    5. '_F' → logprob: -18.125
    6. ' _' → logprob: -18.5
    7. 'A' → logprob: -18.5
    8. '(_' → logprob: -18.875
    9. ')_' → logprob: -19.0
    10. '_for' → logprob: -19.25

Token 228: '_for' (ID: 11903)
  Prédit: '_for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_for' → logprob: -3.3451433409936726e-05
    2. '_A' → logprob: -10.375033378601074
    3. '_For' → logprob: -14.000033378601074
    4. '_' → logprob: -14.125033378601074
    5. '```' → logprob: -15.250033378601074
    6. 'For' → logprob: -15.625033378601074
    7. '_FOR' → logprob: -16.62503433227539
    8. ' _' → logprob: -17.62503433227539
    9. 'for' → logprob: -17.75003433227539
    10. '
' → logprob: -18.50003433227539

Token 229: '_a' (ID: 10852)
  Prédit: '_a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_a' → logprob: -0.0016954151215031743
    2. 'a' → logprob: -6.50169563293457
    3. '_A' → logprob: -9.00169563293457
    4. 'A' → logprob: -9.62669563293457
    5. '_' → logprob: -13.62669563293457
    6. ' a' → logprob: -14.00169563293457
    7. '(A' → logprob: -14.62669563293457
    8. '```' → logprob: -14.87669563293457
    9. '(a' → logprob: -15.12669563293457
    10. ' A' → logprob: -15.75169563293457

Token 230: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.00015586259542033076
    2. 'A' → logprob: -9.750155448913574
    3. '(' → logprob: -10.125155448913574
    4. '_A' → logprob: -10.625155448913574
    5. '```' → logprob: -11.000155448913574
    6. '(a' → logprob: -12.000155448913574
    7. 'a' → logprob: -12.875155448913574
    8. '
' → logprob: -13.625155448913574
    9. ' (' → logprob: -13.750155448913574
    10. '(
' → logprob: -13.750155448913574

Token 231: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -9.491498531133402e-06
    2. ',a' → logprob: -12.375009536743164
    3. ' ,' → logprob: -12.625009536743164
    4. 'a' → logprob: -14.250009536743164
    5. ',A' → logprob: -14.500009536743164
    6. ',
' → logprob: -14.750009536743164
    7. ')' → logprob: -16.000009536743164
    8. '   ' → logprob: -16.000009536743164
    9. 'A' → logprob: -16.125009536743164
    10. '```' → logprob: -17.500009536743164

Token 232: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.0003802680876106024
    2. ' a' → logprob: -7.875380039215088
    3. ')' → logprob: -16.62537956237793
    4. ')a' → logprob: -17.25037956237793
    5. '	a' → logprob: -17.87537956237793
    6. '   ' → logprob: -18.12537956237793
    7. '_a' → logprob: -19.00037956237793
    8. '[a' → logprob: -19.12537956237793
    9. '
' → logprob: -20.00037956237793
    10. ' ' → logprob: -20.25037956237793

Token 233: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0002703953068703413
    2. ')
' → logprob: -8.25027084350586
    3. '   ' → logprob: -12.00027084350586
    4. ')return' → logprob: -14.00027084350586
    5. ')

' → logprob: -14.75027084350586
    6. '<|end|>' → logprob: -14.87527084350586
    7. ' )' → logprob: -15.12527084350586
    8. '
' → logprob: -15.25027084350586
    9. '       ' → logprob: -15.37527084350586
    10. '())' → logprob: -15.75027084350586

Token 234: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10704667866230011
    2. '
' → logprob: -2.357046604156494
    3. '    
' → logprob: -5.482046604156494
    4. '<|end|>' → logprob: -6.732046604156494
    5. 'print' → logprob: -6.857046604156494
    6. '  
' → logprob: -9.357047080993652
    7. '```' → logprob: -9.357047080993652
    8. 'return' → logprob: -9.732047080993652
    9. 'count' → logprob: -10.607047080993652
    10. ' return' → logprob: -10.857047080993652

Token 235: ' ans' (ID: 3345)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.2857869267463684
    2. '   ' → logprob: -1.5357868671417236
    3. '
' → logprob: -3.7857868671417236
    4. 'return' → logprob: -5.535787105560303
    5. ' print' → logprob: -5.785787105560303
    6. 'result' → logprob: -6.410787105560303
    7. '```' → logprob: -7.035787105560303
    8. '    
' → logprob: -7.410787105560303
    9. 'answer' → logprob: -9.285786628723145
    10. 'count' → logprob: -9.410786628723145

Token 236: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.030007457360625267
    2. '=' → logprob: -3.5300073623657227
    3. '_' → logprob: -8.405007362365723
    4. ' ' → logprob: -11.030007362365723
    5. '_space' → logprob: -12.155007362365723
    6. ')' → logprob: -13.280007362365723
    7. '_=' → logprob: -13.530007362365723
    8. 'space' → logprob: -13.780007362365723
    9. ' =
' → logprob: -14.155007362365723
    10. ',' → logprob: -14.155007362365723

Token 237: ' count' (ID: 3605)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'count' → logprob: -0.023250719532370567
    2. ' count' → logprob: -3.7732508182525635
    3. 'str' → logprob: -12.273250579833984
    4. ' str' → logprob: -15.523250579833984
    5. '   ' → logprob: -16.398250579833984
    6. '(count' → logprob: -16.523250579833984
    7. '[count' → logprob: -17.898250579833984
    8. ' ' → logprob: -18.023250579833984
    9. 'sum' → logprob: -18.148250579833984
    10. 'len' → logprob: -18.273250579833984

Token 238: '_minus' (ID: 101055)
  Prédit: '_minus'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_minus' → logprob: -1.3782830137643032e-05
    2. '_' → logprob: -11.75001335144043
    3. 'minus' → logprob: -13.00001335144043
    4. '_-' → logprob: -13.25001335144043
    5. '_MINUS' → logprob: -13.87501335144043
    6. '_m' → logprob: -14.75001335144043
    7. '_plus' → logprob: -14.87501335144043
    8. '_min' → logprob: -17.62501335144043
    9. '-minus' → logprob: -17.62501335144043
    10. '   ' → logprob: -18.25001335144043

Token 239: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -2.1008713702030946e-06
    2. '_on' → logprob: -13.625001907348633
    3. '_one' → logprob: -14.250001907348633
    4. 'On' → logprob: -15.750001907348633
    5. 'ones' → logprob: -17.000001907348633
    6. '```' → logprob: -17.875001907348633
    7. '.ones' → logprob: -18.125001907348633
    8. '_On' → logprob: -18.375001907348633
    9. '_once' → logprob: -18.625001907348633
    10. ' ones' → logprob: -18.875001907348633

Token 240: 'ones' (ID: 3617)
  Prédit: 'ones'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ones' → logprob: -1.2664456789934775e-06
    2. 'ines' → logprob: -13.750000953674316
    3. ' ones' → logprob: -15.625000953674316
    4. 'one' → logprob: -17.000001907348633
    5. 'unes' → logprob: -17.125001907348633
    6. '.ones' → logprob: -18.125001907348633
    7. '1' → logprob: -18.875001907348633
    8. '```' → logprob: -19.125001907348633
    9. 'ONES' → logprob: -19.625001907348633
    10. 'On' → logprob: -21.125001907348633

Token 241: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -2.618001053633634e-05
    2. '(' → logprob: -10.625025749206543
    3. ' (' → logprob: -13.750025749206543
    4. '```' → logprob: -14.875025749206543
    5. '(
' → logprob: -15.125025749206543
    6. '(AST' → logprob: -16.62502670288086
    7. '(B' → logprob: -17.25002670288086
    8. '(C' → logprob: -17.62502670288086
    9. '\(' → logprob: -17.75002670288086
    10. '(E' → logprob: -17.87502670288086

Token 242: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.03238207474350929
    2. ')' → logprob: -3.532382011413574
    3. '()
' → logprob: -6.407382011413574
    4. '()' → logprob: -7.282382011413574
    5. '())
' → logprob: -8.407382011413574
    6. ')
' → logprob: -10.282382011413574
    7. '   ' → logprob: -11.157382011413574
    8. ' )
' → logprob: -11.657382011413574
    9. '())' → logprob: -12.032382011413574
    10. ')

' → logprob: -12.657382011413574

Token 243: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.030153673142194748
    2. 'print' → logprob: -3.530153751373291
    3. ' print' → logprob: -7.905153751373291
    4. '
' → logprob: -10.780153274536133
    5. '    
' → logprob: -12.405153274536133
    6. '```' → logprob: -12.655153274536133
    7. 'return' → logprob: -13.405153274536133
    8. '	print' → logprob: -13.405153274536133
    9. '<|end|>' → logprob: -13.405153274536133
    10. ' return' → logprob: -14.530153274536133

Token 244: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0009165783412754536
    2. '   ' → logprob: -7.250916481018066
    3. '
' → logprob: -8.750916481018066
    4. ' print' → logprob: -10.375916481018066
    5. '```' → logprob: -11.250916481018066
    6. '\n' → logprob: -14.000916481018066
    7. '    
' → logprob: -14.125916481018066
    8. '	print' → logprob: -14.250916481018066
    9. 'return' → logprob: -14.250916481018066
    10. '\' → logprob: -14.750916481018066

Token 245: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -0.0024874303489923477
    2. '(' → logprob: -6.002487659454346
    3. 'ans' → logprob: -11.752487182617188
    4. '('' → logprob: -13.002487182617188
    5. '()' → logprob: -14.002487182617188
    6. '("' → logprob: -15.252487182617188
    7. ' (' → logprob: -15.252487182617188
    8. '(
' → logprob: -16.252487182617188
    9. '(answer' → logprob: -16.752487182617188
    10. '(len' → logprob: -16.877487182617188

Token 246: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.2664456789934775e-06
    2. ')
' → logprob: -13.875000953674316
    3. ' )' → logprob: -16.000001907348633
    4. '()' → logprob: -16.500001907348633
    5. ')`' → logprob: -17.000001907348633
    6. '())' → logprob: -17.750001907348633
    7. '   ' → logprob: -18.750001907348633
    8. '')' → logprob: -19.000001907348633
    9. '))' → logprob: -19.375001907348633
    10. '(' → logprob: -19.500001907348633

Token 247: 'solve' (ID: 117273)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.4303775131702423
    2. '<|end|>' → logprob: -1.43037748336792
    3. '
' → logprob: -3.18037748336792
    4. 'n' → logprob: -3.80537748336792
    5. 'if' → logprob: -4.30537748336792
    6. '```' → logprob: -4.93037748336792
    7. '\n' → logprob: -5.18037748336792
    8. '\' → logprob: -5.68037748336792
    9. ')' → logprob: -5.93037748336792
    10. '[' → logprob: -6.18037748336792

Token 248: '()' (ID: 416)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 246
Tokens correctement prédits (1ère position, stricte): 108
Tokens correctement prédits (1ère position, avec adaptation): 126
Tokens correctement prédits (top 10): 206
Précision stricte (1ère position): 43.90%
Précision adaptée (1ère position): 51.22%
Précision (top 10): 83.74%
================================================================================
