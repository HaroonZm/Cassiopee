================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:43:27
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n, k = map(int, input().split())
h = list(map(int, input().split()))

cnt = 0

for i in range(n):
    if h[i] >= k:
        cnt += 1

print(cnt)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' k' (ID: 372)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.18331654369831085
    2. ' =' → logprob: -1.9333165884017944
    3. ',' → logprob: -3.933316469192505
    4. ' ' → logprob: -6.433316707611084
    5. '+' → logprob: -7.558316707611084
    6. ')' → logprob: -7.808316707611084
    7. '*' → logprob: -9.308316230773926
    8. ' =
' → logprob: -9.308316230773926
    9. ':' → logprob: -9.433316230773926
    10. '```' → logprob: -9.558316230773926

Token 4: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3693707287311554
    2. ' map' → logprob: -2.244370698928833
    3. ' input' → logprob: -2.494370698928833
    4. ' n' → logprob: -3.244370698928833
    5. 'input' → logprob: -3.369370698928833
    6. '0' → logprob: -3.869370698928833
    7. 'map' → logprob: -3.994370698928833
    8. '10' → logprob: -5.869370937347412
    9. ' int' → logprob: -6.244370937347412
    10. 'int' → logprob: -7.119370937347412

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7028917074203491
    2. '<|end|>' → logprob: -0.8278917074203491
    3. '```' → logprob: -3.7028918266296387
    4. '(int' → logprob: -4.452891826629639
    5. '<|end|>' → logprob: -4.702891826629639
    6. '(lambda' → logprob: -4.827891826629639
    7. ')' → logprob: -6.077891826629639
    8. '(str' → logprob: -6.702891826629639
    9. '(user' → logprob: -7.077891826629639
    10. '(input' → logprob: -7.327891826629639

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.23998454213142395
    2. '(' → logprob: -1.9899845123291016
    3. ')' → logprob: -2.8649845123291016
    4. '(str' → logprob: -4.739984512329102
    5. '(int' → logprob: -5.239984512329102
    6. 'input' → logprob: -6.739984512329102
    7. '(user' → logprob: -6.864984512329102
    8. '(n' → logprob: -7.489984512329102
    9. '```' → logprob: -7.739984512329102
    10. '`)' → logprob: -7.989984512329102

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.3133276700973511
    2. ' input' → logprob: -1.313327670097351
    3. '(input' → logprob: -9.68832778930664
    4. ')' → logprob: -12.81332778930664
    5. ',input' → logprob: -14.18832778930664
    6. '=input' → logprob: -15.93832778930664
    7. '```' → logprob: -16.18832778930664
    8. '[input' → logprob: -16.56332778930664
    9. '<input' → logprob: -17.06332778930664
    10. '	input' → logprob: -17.81332778930664

Token 8: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.1419504880905151
    2. '()' → logprob: -1.5169504880905151
    3. ')' → logprob: -1.8919504880905151
    4. '())' → logprob: -2.0169506072998047
    5. '('' → logprob: -2.7669506072998047
    6. '().' → logprob: -2.7669506072998047
    7. '```' → logprob: -5.016950607299805
    8. '(()' → logprob: -5.266950607299805
    9. '`()' → logprob: -5.391950607299805
    10. '(""))' → logprob: -5.766950607299805

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0011930868495255709
    2. 'strip' → logprob: -6.751193046569824
    3. ' split' → logprob: -11.376193046569824
    4. 'rstrip' → logprob: -11.501193046569824
    5. ')' → logprob: -14.626193046569824
    6. '(split' → logprob: -14.876193046569824
    7. 'read' → logprob: -15.251193046569824
    8. 'spl' → logprob: -15.626193046569824
    9. 'startswith' → logprob: -17.00119400024414
    10. ' strip' → logprob: -17.50119400024414

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08386377990245819
    2. '())' → logprob: -2.9588637351989746
    3. '))' → logprob: -3.5838637351989746
    4. '()' → logprob: -7.708863735198975
    5. '()))' → logprob: -8.583864212036133
    6. '`)' → logprob: -9.458864212036133
    7. '(' → logprob: -10.958864212036133
    8. ')`' → logprob: -11.333864212036133
    9. '')' → logprob: -11.833864212036133
    10. ')))' → logprob: -11.833864212036133

Token 11: 'h' (ID: 71)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.25480756163597107
    2. '
' → logprob: -2.254807472229004
    3. '```' → logprob: -3.254807472229004
    4. 'if' → logprob: -3.629807472229004
    5. '\' → logprob: -4.504807472229004
    6. 'for' → logprob: -4.879807472229004
    7. 'x' → logprob: -5.379807472229004
    8. '#' → logprob: -5.629807472229004
    9. '`' → logprob: -5.754807472229004
    10. 'i' → logprob: -5.879807472229004

Token 12: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.06584926694631577
    2. '[i' → logprob: -3.1908493041992188
    3. ' =' → logprob: -4.690849304199219
    4. 'e' → logprob: -5.315849304199219
    5. 's' → logprob: -6.065849304199219
    6. '=' → logprob: -6.565849304199219
    7. '[]' → logprob: -6.815849304199219
    8. '[e' → logprob: -6.940849304199219
    9. '[n' → logprob: -7.190849304199219
    10. '[:]' → logprob: -7.315849304199219

Token 13: ' list' (ID: 1562)
  Prédit: ' ['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.8828330636024475
    2. ' list' → logprob: -1.2578330039978027
    3. '[int' → logprob: -2.2578330039978027
    4. 'list' → logprob: -2.3828330039978027
    5. '[' → logprob: -2.5078330039978027
    6. ' []' → logprob: -4.132833003997803
    7. '[]' → logprob: -5.382833003997803
    8. '[list' → logprob: -6.132833003997803
    9. '[n' → logprob: -7.882833003997803
    10. 'int' → logprob: -9.132833480834961

Token 14: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.018755685538053513
    2. '(range' → logprob: -4.393755912780762
    3. '(h' → logprob: -5.518755912780762
    4. '()' → logprob: -7.643755912780762
    5. '(map' → logprob: -7.643755912780762
    6. '(int' → logprob: -8.143755912780762
    7. '(n' → logprob: -8.518755912780762
    8. '(np' → logprob: -9.018755912780762
    9. '(input' → logprob: -9.393755912780762
    10. '```' → logprob: -9.393755912780762

Token 15: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.023430535569787025
    2. '(' → logprob: -3.773430585861206
    3. '<int' → logprob: -9.523430824279785
    4. '[int' → logprob: -10.648430824279785
    5. 'int' → logprob: -10.898430824279785
    6. '(input' → logprob: -11.273430824279785
    7. ')(' → logprob: -11.398430824279785
    8. '=int' → logprob: -11.648430824279785
    9. '(str' → logprob: -11.898430824279785
    10. '```' → logprob: -12.148430824279785

Token 16: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.1537572145462036
    2. ',input' → logprob: -2.028757095336914
    3. ',int' → logprob: -5.028757095336914
    4. '(input' → logprob: -5.903757095336914
    5. '(' → logprob: -6.778757095336914
    6. '(int' → logprob: -8.153757095336914
    7. ' ,' → logprob: -8.403757095336914
    8. ',(' → logprob: -10.778757095336914
    9. ',float' → logprob: -10.778757095336914
    10. '`,' → logprob: -11.153757095336914

Token 17: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.2014147937297821
    2. ' input' → logprob: -1.7014148235321045
    3. '(input' → logprob: -13.826415061950684
    4. ',input' → logprob: -15.076415061950684
    5. '=input' → logprob: -16.451414108276367
    6. ')' → logprob: -16.701414108276367
    7. '	input' → logprob: -16.826414108276367
    8. '<input' → logprob: -17.076414108276367
    9. 'list' → logprob: -17.701414108276367
    10. '_input' → logprob: -17.951414108276367

Token 18: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.004994294140487909
    2. '()' → logprob: -5.3799943923950195
    3. '()))' → logprob: -8.75499439239502
    4. '(' → logprob: -9.37999439239502
    5. '())' → logprob: -10.00499439239502
    6. '(),' → logprob: -10.50499439239502
    7. ' ().' → logprob: -11.50499439239502
    8. '()));' → logprob: -11.50499439239502
    9. '(.' → logprob: -12.25499439239502
    10. '()-' → logprob: -12.37999439239502

Token 19: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -1.1472419600977446e-06
    2. ' split' → logprob: -14.375000953674316
    3. 'strip' → logprob: -15.000000953674316
    4. 'rstrip' → logprob: -16.625001907348633
    5. '(split' → logprob: -16.750001907348633
    6. 'spl' → logprob: -18.125001907348633
    7. ')' → logprob: -21.375001907348633
    8. 'plit' → logprob: -22.000001907348633
    9. 's' → logprob: -22.250001907348633
    10. '.split' → logprob: -22.375001907348633

Token 20: '()))

' (ID: 125972)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.1203124150633812
    2. '))' → logprob: -2.245312452316284
    3. '())' → logprob: -5.120312213897705
    4. '()' → logprob: -7.120312213897705
    5. ')' → logprob: -7.620312213897705
    6. '(' → logprob: -8.745312690734863
    7. '()));' → logprob: -11.745312690734863
    8. '()))
' → logprob: -11.870312690734863
    9. '()))

' → logprob: -12.870312690734863
    10. '()),' → logprob: -13.245312690734863

Token 21: 'cnt' (ID: 33160)
  Prédit: 'h'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'h' → logprob: -0.25353455543518066
    2. 'd' → logprob: -3.3785345554351807
    3. 'dp' → logprob: -3.3785345554351807
    4. 'sorted' → logprob: -3.7535345554351807
    5. 'for' → logprob: -4.128534317016602
    6. 'result' → logprob: -4.253534317016602
    7. 'c' → logprob: -4.378534317016602
    8. 's' → logprob: -4.378534317016602
    9. 'count' → logprob: -4.503534317016602
    10. 'if' → logprob: -4.503534317016602

Token 22: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.25025495886802673
    2. '_' → logprob: -2.0002548694610596
    3. '=' → logprob: -3.0002548694610596
    4. ' =' → logprob: -3.3752548694610596
    5. ' +=' → logprob: -7.375255107879639
    6. ' ' → logprob: -7.875255107879639
    7. '[' → logprob: -8.12525463104248
    8. ' (' → logprob: -8.50025463104248
    9. '_space' → logprob: -8.75025463104248
    10. ')' → logprob: -9.62525463104248

Token 23: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.004772110842168331
    2. ' ' → logprob: -5.379772186279297
    3. '1' → logprob: -9.004772186279297
    4. 'k' → logprob: -12.004772186279297
    5. 'n' → logprob: -12.004772186279297
    6. 'h' → logprob: -12.129772186279297
    7. ' n' → logprob: -13.129772186279297
    8. 'sum' → logprob: -13.254772186279297
    9. '{}' → logprob: -13.254772186279297
    10. ' h' → logprob: -13.504772186279297

Token 24: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.005027863662689924
    2. '1' → logprob: -5.380027770996094
    3. 'n' → logprob: -8.880027770996094
    4. 'k' → logprob: -9.005027770996094
    5. 'sum' → logprob: -9.630027770996094
    6. 'h' → logprob: -10.505027770996094
    7. '{}' → logprob: -11.130027770996094
    8. '{' → logprob: -11.255027770996094
    9. ' ' → logprob: -11.505027770996094
    10. '[' → logprob: -12.380027770996094

Token 25: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7741397023200989
    2. '\n' → logprob: -1.274139642715454
    3. 'for' → logprob: -1.774139642715454
    4. ' for' → logprob: -2.649139642715454
    5. '<|end|>' → logprob: -4.524139881134033
    6. ' 
' → logprob: -5.399139881134033
    7. '\' → logprob: -6.399139881134033
    8. '' → logprob: -7.274139881134033
    9. '
' → logprob: -8.149139404296875
    10. '```' → logprob: -8.524139404296875

Token 26: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -3.531315314830863e-06
    2. ' for' → logprob: -13.250003814697266
    3. '```' → logprob: -13.625003814697266
    4. '
' → logprob: -15.625003814697266
    5. 'if' → logprob: -15.750003814697266
    6. 'f' → logprob: -15.750003814697266
    7. '``' → logprob: -18.250003814697266
    8. 'i' → logprob: -18.750003814697266
    9. '\n' → logprob: -19.000003814697266
    10. '   ' → logprob: -19.375003814697266

Token 27: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.003380783833563328
    2. ' ' → logprob: -5.75338077545166
    3. 'i' → logprob: -8.75338077545166
    4. ' h' → logprob: -10.50338077545166
    5. ' _' → logprob: -11.87838077545166
    6. ' x' → logprob: -12.25338077545166
    7. '_' → logprob: -12.62838077545166
    8. '  ' → logprob: -14.50338077545166
    9. '	i' → logprob: -14.50338077545166
    10. ' ‌' → logprob: -15.25338077545166

Token 28: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.016807733103632927
    2. 'in' → logprob: -4.141807556152344
    3. ' ' → logprob: -7.266807556152344
    4. '  ' → logprob: -10.391807556152344
    5. '+' → logprob: -11.016807556152344
    6. ' i' → logprob: -11.891807556152344
    7. ' n' → logprob: -12.891807556152344
    8. 'range' → logprob: -13.266807556152344
    9. ')' → logprob: -13.391807556152344
    10. ',' → logprob: -13.391807556152344

Token 29: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.02325398102402687
    2. 'range' → logprob: -3.773253917694092
    3. ' ' → logprob: -11.89825439453125
    4. '	range' → logprob: -14.27325439453125
    5. ' xrange' → logprob: -15.52325439453125
    6. ' n' → logprob: -15.64825439453125
    7. '(range' → logprob: -15.89825439453125
    8. ' r' → logprob: -16.14825439453125
    9. ')' → logprob: -16.27325439453125
    10. ' h' → logprob: -16.77325439453125

Token 30: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4766751825809479
    2. '(n' → logprob: -0.9766751527786255
    3. '(k' → logprob: -5.976675033569336
    4. '(len' → logprob: -10.101675033569336
    5. ' (' → logprob: -11.726675033569336
    6. '(cnt' → logprob: -12.476675033569336
    7. '(i' → logprob: -13.851675033569336
    8. '(s' → logprob: -14.351675033569336
    9. '(range' → logprob: -14.476675033569336
    10. '(
' → logprob: -14.476675033569336

Token 31: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.1430865228176117
    2. '-' → logprob: -2.1430864334106445
    3. '-k' → logprob: -4.2680864334106445
    4. ' -' → logprob: -6.6430864334106445
    5. '):
' → logprob: -7.3930864334106445
    6. ' ):' → logprob: -9.768086433410645
    7. ')' → logprob: -11.018086433410645
    8. ':' → logprob: -11.393086433410645
    9. ' ' → logprob: -12.393086433410645
    10. '):
' → logprob: -12.643086433410645

Token 32: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.013831314630806446
    2. ' if' → logprob: -4.63883113861084
    3. ' ' → logprob: -5.88883113861084
    4. ':' → logprob: -7.51383113861084
    5. '    ' → logprob: -8.51383113861084
    6. '<|end|>' → logprob: -8.76383113861084
    7. 'if' → logprob: -8.88883113861084
    8. '  ' → logprob: -9.63883113861084
    9. '[' → logprob: -10.38883113861084
    10. '    
' → logprob: -10.51383113861084

Token 33: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.20587265491485596
    2. 'if' (adapté à ' if') → logprob: -2.0808725357055664
    3. '   ' → logprob: -2.8308725357055664
    4. '    ' → logprob: -7.455872535705566
    5. ' for' → logprob: -7.455872535705566
    6. ' h' → logprob: -8.455872535705566
    7. '```' → logprob: -8.580872535705566
    8. 'for' → logprob: -8.955872535705566
    9. ' i' → logprob: -8.955872535705566
    10. ' ' → logprob: -9.205872535705566

Token 34: ' h' (ID: 312)
  Prédit: ' h'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' h' → logprob: -0.0318041667342186
    2. 'h' → logprob: -3.531804084777832
    3. ' i' → logprob: -6.781804084777832
    4. ' ' → logprob: -7.656804084777832
    5. ' k' → logprob: -8.281804084777832
    6. 'i' → logprob: -10.031804084777832
    7. '    ' → logprob: -10.406804084777832
    8. '   ' → logprob: -10.406804084777832
    9. ' n' → logprob: -10.406804084777832
    10. 'k' → logprob: -11.156804084777832

Token 35: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -5.657694418914616e-05
    2. '[' → logprob: -9.875056266784668
    3. ' [' → logprob: -12.875056266784668
    4. 'i' → logprob: -15.000056266784668
    5. '[j' → logprob: -15.250056266784668
    6. '```' → logprob: -15.250056266784668
    7. '[h' → logprob: -15.500056266784668
    8. ')' → logprob: -15.500056266784668
    9. '\[' → logprob: -15.500056266784668
    10. '[n' → logprob: -15.625056266784668

Token 36: ']' (ID: 60)
  Prédit: '>='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>=' → logprob: -0.32042381167411804
    2. '>' → logprob: -2.3204238414764404
    3. ']>=' → logprob: -2.6954238414764404
    4. ' >=' → logprob: -3.0704238414764404
    5. ']' → logprob: -3.1954238414764404
    6. '<' → logprob: -4.695423603057861
    7. '<=' → logprob: -5.195423603057861
    8. '+' → logprob: -6.570423603057861
    9. '%' → logprob: -6.570423603057861
    10. ' ' → logprob: -7.195423603057861

Token 37: ' >=' (ID: 5064)
  Prédit: '>='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>=' → logprob: -0.1546323597431183
    2. ' >=' → logprob: -2.404632329940796
    3. '<=' → logprob: -3.529632329940796
    4. '<' → logprob: -4.404632568359375
    5. '>' → logprob: -5.279632568359375
    6. ' <=' → logprob: -5.529632568359375
    7. ' <' → logprob: -6.779632568359375
    8. '%' → logprob: -7.904632568359375
    9. ' >' → logprob: -8.279632568359375
    10. ' ' → logprob: -8.279632568359375

Token 38: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.004103927407413721
    2. ' k' → logprob: -5.504104137420654
    3. ' ' → logprob: -11.129103660583496
    4. '   ' → logprob: -12.379103660583496
    5. '  ' → logprob: -13.504103660583496
    6. '	k' → logprob: -14.004103660583496
    7. 'h' → logprob: -14.379103660583496
    8. '2' → logprob: -14.754103660583496
    9. '5' → logprob: -15.129103660583496
    10. '1' → logprob: -15.504103660583496

Token 39: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.002233044244349003
    2. ':
' → logprob: -6.127233028411865
    3. '       ' → logprob: -10.877233505249023
    4. ' :' → logprob: -11.127233505249023
    5. '   ' → logprob: -11.627233505249023
    6. ':
' → logprob: -13.377233505249023
    7. '-' → logprob: -14.002233505249023
    8. '+' → logprob: -14.127233505249023
    9. '+:' → logprob: -14.377233505249023
    10. ' :
' → logprob: -15.252233505249023

Token 40: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0049873050302267075
    2. '   ' → logprob: -6.3799872398376465
    3. 'cnt' → logprob: -6.3799872398376465
    4. ' cnt' → logprob: -7.1299872398376465
    5. ' ' → logprob: -8.754987716674805
    6. '	cnt' → logprob: -9.254987716674805
    7. '    ' → logprob: -9.379987716674805
    8. '	' → logprob: -9.629987716674805
    9. '     ' → logprob: -9.754987716674805
    10. '	   ' → logprob: -10.004987716674805

Token 41: ' cnt' (ID: 27340)
  Prédit: 'cnt'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cnt' (adapté à ' cnt') → logprob: -0.05353570729494095
    2. ' cnt' → logprob: -3.0535356998443604
    3. '   ' → logprob: -5.6785359382629395
    4. '       ' → logprob: -7.0535359382629395
    5. '	cnt' → logprob: -7.8035359382629395
    6. '[cnt' → logprob: -10.178535461425781
    7. '
' → logprob: -10.303535461425781
    8. 'count' → logprob: -10.303535461425781
    9. ' ' → logprob: -10.553535461425781
    10. '(cnt' → logprob: -10.553535461425781

Token 42: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.06201854720711708
    2. ' +=' → logprob: -2.812018632888794
    3. '+' → logprob: -10.437018394470215
    4. '=' → logprob: -10.812018394470215
    5. '   ' → logprob: -14.562018394470215
    6. ']+=' → logprob: -14.812018394470215
    7. ' =' → logprob: -15.187018394470215
    8. '++' → logprob: -16.56201934814453
    9. '+='' → logprob: -16.81201934814453
    10. '```' → logprob: -17.18701934814453

Token 43: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0009118211455643177
    2. ' ' → logprob: -7.000911712646484
    3. '   ' → logprob: -16.750911712646484
    4. '0' → logprob: -16.813411712646484
    5. '2' → logprob: -17.188411712646484
    6. '100' → logprob: -17.250911712646484
    7. '１' → logprob: -18.000911712646484
    8. '  ' → logprob: -18.063411712646484
    9. '```' → logprob: -18.313411712646484
    10. '10' → logprob: -18.688411712646484

Token 44: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -7.517272024415433e-05
    2. ' ' → logprob: -9.500075340270996
    3. '100' → logprob: -16.12507438659668
    4. 'h' → logprob: -16.37507438659668
    5. '0' → logprob: -17.00007438659668
    6. '   ' → logprob: -17.37507438659668
    7. '2' → logprob: -17.81257438659668
    8. '１' → logprob: -18.00007438659668
    9. 'i' → logprob: -18.31257438659668
    10. '10' → logprob: -18.50007438659668

Token 45: '

' (ID: 279)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.2233183042553719e-05
    2. ' print' → logprob: -11.625012397766113
    3. '<|end|>' → logprob: -13.625012397766113
    4. '```' → logprob: -14.000012397766113
    5. '
' → logprob: -14.250012397766113
    6. ')' → logprob: -15.375012397766113
    7. '#' → logprob: -17.000011444091797
    8. '#print' → logprob: -17.000011444091797
    9. '(print' → logprob: -17.000011444091797
    10. '   ' → logprob: -17.125011444091797

Token 46: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -8.613945101387799e-05
    2. '
' → logprob: -9.375085830688477
    3. ' print' → logprob: -14.250085830688477
    4. '
' → logprob: -15.250085830688477
    5. '\n' → logprob: -15.750085830688477
    6. '  
' → logprob: -16.375085830688477
    7. '    
' → logprob: -17.000085830688477
    8. ')' → logprob: -17.500085830688477
    9. '' → logprob: -18.000085830688477
    10. '```' → logprob: -18.000085830688477

Token 47: '(cnt' (ID: 102125)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10022974759340286
    2. '(cnt' → logprob: -2.3502297401428223
    3. '()' → logprob: -11.10023021697998
    4. '(count' → logprob: -13.22523021697998
    5. '(sum' → logprob: -13.72523021697998
    6. '(len' → logprob: -13.97523021697998
    7. '((' → logprob: -14.60023021697998
    8. '(C' → logprob: -14.60023021697998
    9. '(print' → logprob: -14.72523021697998
    10. '(max' → logprob: -14.85023021697998

Token 48: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: 0.0
    2. ' )' → logprob: -16.75
    3. ')
' → logprob: -17.75
    4. '))' → logprob: -18.125
    5. ')`' → logprob: -18.5
    6. '`)' → logprob: -19.5
    7. '')' → logprob: -19.5
    8. '）' → logprob: -19.625
    9. '#' → logprob: -20.625
    10. '")' → logprob: -21.25


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 46
Tokens correctement prédits (1ère position, stricte): 18
Tokens correctement prédits (1ère position, avec adaptation): 19
Tokens correctement prédits (top 10): 40
Précision stricte (1ère position): 39.13%
Précision adaptée (1ère position): 41.30%
Précision (top 10): 86.96%
================================================================================
