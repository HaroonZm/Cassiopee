================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:00:30
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from sys import stdout

n, k = map(int, input().split())
s = list(input())
s[k - 1] = s[k - 1].lower()
stdout.write(''.join(s))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' stdout' (ID: 48014)
  Prédit: 'argv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'argv' → logprob: -0.03872855752706528
    2. ' argv' → logprob: -4.038728713989258
    3. 'exit' → logprob: -4.163728713989258
    4. 'stdout' → logprob: -6.288728713989258
    5. 'path' → logprob: -7.038728713989258
    6. ' exit' → logprob: -7.038728713989258
    7. 'stdin' → logprob: -7.163728713989258
    8. 'import' → logprob: -8.413728713989258
    9. 'stderr' → logprob: -9.663728713989258
    10. 'version' → logprob: -9.663728713989258

Token 4: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -6.20603168499656e-05
    2. '.write' → logprob: -10.875061988830566
    3. '.stdout' → logprob: -11.375061988830566
    4. '.print' → logprob: -11.500061988830566
    5. '.
' → logprob: -12.125061988830566
    6. '.import' → logprob: -12.750061988830566
    7. '.readline' → logprob: -12.875061988830566
    8. '.pr' → logprob: -13.125061988830566
    9. 'import' → logprob: -13.250061988830566
    10. '.

' → logprob: -13.750061988830566

Token 5: 'n' (ID: 77)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.00011677479778882116
    2. '.write' → logprob: -10.250116348266602
    3. 'import' → logprob: -10.500116348266602
    4. '.
' → logprob: -10.875116348266602
    5. ',' → logprob: -12.000116348266602
    6. ';' → logprob: -12.000116348266602
    7. '' → logprob: -12.625116348266602
    8. '.

' → logprob: -12.750116348266602
    9. 'print' → logprob: -12.750116348266602
    10. '```' → logprob: -12.750116348266602

Token 6: ',' (ID: 11)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.7106720209121704
    2. '=' → logprob: -1.2106720209121704
    3. ' =' → logprob: -2.460671901702881
    4. ' ' → logprob: -2.710671901702881
    5. 'u' → logprob: -3.710671901702881
    6. '_' → logprob: -4.460671901702881
    7. ',' → logprob: -4.585671901702881
    8. ')' → logprob: -5.460671901702881
    9. 'o' → logprob: -6.335671901702881
    10. 'e' → logprob: -6.710671901702881

Token 7: ' k' (ID: 372)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -1.0687522888183594
    2. ' m' → logprob: -1.0687522888183594
    3. ' ' → logprob: -1.6937522888183594
    4. ' k' → logprob: -2.3187522888183594
    5. ' =' → logprob: -4.568752288818359
    6. '=' → logprob: -5.068752288818359
    7. 'k' → logprob: -6.068752288818359
    8. ' n' → logprob: -6.068752288818359
    9. 'end' → logprob: -6.193752288818359
    10. 'stdout' → logprob: -6.818752288818359

Token 8: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.10034167766571045
    2. '=' → logprob: -2.350341796875
    3. ',' → logprob: -9.100341796875
    4. ' ' → logprob: -11.475341796875
    5. ')' → logprob: -12.600341796875
    6. ' ,' → logprob: -12.850341796875
    7. '<|end|>' → logprob: -13.100341796875
    8. ' =
' → logprob: -13.725341796875
    9. '  ' → logprob: -14.475341796875
    10. '.' → logprob: -14.725341796875

Token 9: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.052085030823946
    2. 'map' → logprob: -3.0520849227905273
    3. ' ' → logprob: -5.802084922790527
    4. ' input' → logprob: -8.177084922790527
    5. 'input' → logprob: -9.302084922790527
    6. '0' → logprob: -10.177084922790527
    7. ' list' → logprob: -10.552084922790527
    8. '5' → logprob: -12.052084922790527
    9. '1' → logprob: -12.302084922790527
    10. 'list' → logprob: -12.302084922790527

Token 10: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03158832713961601
    2. '(int' → logprob: -3.656588315963745
    3. '(str' → logprob: -5.531588554382324
    4. '(lambda' → logprob: -6.906588554382324
    5. '()' → logprob: -9.406588554382324
    6. '<|end|>' → logprob: -9.906588554382324
    7. 'int' → logprob: -10.531588554382324
    8. ' (' → logprob: -10.781588554382324
    9. '(n' → logprob: -11.156588554382324
    10. '(input' → logprob: -11.406588554382324

Token 11: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.46804437041282654
    2. '(input' → logprob: -1.593044400215149
    3. '(stdin' → logprob: -2.4680442810058594
    4. ')' → logprob: -2.5930442810058594
    5. '(stdout' → logprob: -5.843044281005859
    6. '(str' → logprob: -6.718044281005859
    7. '```' → logprob: -6.843044281005859
    8. '(int' → logprob: -7.218044281005859
    9. '(n' → logprob: -7.343044281005859
    10. 'input' → logprob: -7.593044281005859

Token 12: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.16028769314289093
    2. ' input' → logprob: -1.9102877378463745
    3. 'stdin' → logprob: -9.910287857055664
    4. ' stdin' → logprob: -12.410287857055664
    5. ')' → logprob: -12.535287857055664
    6. 'stdout' → logprob: -12.910287857055664
    7. '(input' → logprob: -13.285287857055664
    8. ' ' → logprob: -13.660287857055664
    9. ',input' → logprob: -15.535287857055664
    10. '	input' → logprob: -15.910287857055664

Token 13: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.18161243200302124
    2. '()' → logprob: -2.681612491607666
    3. ')' → logprob: -2.931612491607666
    4. '().' → logprob: -3.181612491607666
    5. '(' → logprob: -7.181612491607666
    6. '()))' → logprob: -7.306612491607666
    7. '());' → logprob: -7.681612491607666
    8. '();)' → logprob: -8.806612014770508
    9. '()));' → logprob: -9.181612014770508
    10. ' ())' → logprob: -9.306612014770508

Token 14: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.005270041991025209
    2. 'strip' → logprob: -5.255270004272461
    3. 'rstrip' → logprob: -11.005270004272461
    4. 'read' → logprob: -11.630270004272461
    5. ')' → logprob: -11.880270004272461
    6. ' split' → logprob: -12.755270004272461
    7. '(split' → logprob: -14.380270004272461
    8. '_split' → logprob: -16.88027000427246
    9. 'spl' → logprob: -17.13027000427246
    10. '```' → logprob: -17.25527000427246

Token 15: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.029775140807032585
    2. '))' → logprob: -3.5297751426696777
    3. '()' → logprob: -12.02977466583252
    4. '())' → logprob: -12.15477466583252
    5. ')))' → logprob: -12.65477466583252
    6. '(' → logprob: -12.90477466583252
    7. '`)' → logprob: -13.02977466583252
    8. ' )' → logprob: -13.65477466583252
    9. '),' → logprob: -13.77977466583252
    10. '')' → logprob: -14.40477466583252

Token 16: 's' (ID: 82)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.3635510504245758
    2. '\n' → logprob: -1.7385510206222534
    3. '```' → logprob: -3.988551139831543
    4. ' for' → logprob: -4.113551139831543
    5. 'a' → logprob: -4.363551139831543
    6. 's' → logprob: -4.613551139831543
    7. ' 
' → logprob: -4.613551139831543
    8. 'if' → logprob: -4.863551139831543
    9. '\' → logprob: -4.863551139831543
    10. '
' → logprob: -4.988551139831543

Token 17: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5943558812141418
    2. '=' → logprob: -1.344355821609497
    3. '[' → logprob: -1.844355821609497
    4. '[:' → logprob: -4.469356060028076
    5. '.' → logprob: -4.844356060028076
    6. '[:]' → logprob: -5.344356060028076
    7. '[i' → logprob: -7.344356060028076
    8. ' ' → logprob: -7.469356060028076
    9. 'paces' → logprob: -7.719356060028076
    10. '[end' → logprob: -7.844356060028076

Token 18: ' list' (ID: 1562)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.3869607448577881
    2. 'input' → logprob: -1.136960744857788
    3. ' list' → logprob: -9.636960983276367
    4. 'list' → logprob: -11.136960983276367
    5. '=input' → logprob: -13.261960983276367
    6. ' ' → logprob: -13.511960983276367
    7. '<input' → logprob: -13.636960983276367
    8. 'str' → logprob: -13.886960983276367
    9. ' str' → logprob: -14.636960983276367
    10. 's' → logprob: -14.636960983276367

Token 19: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.34733304381370544
    2. '(input' → logprob: -1.5973330736160278
    3. '(str' → logprob: -2.4723329544067383
    4. '(s' → logprob: -5.097332954406738
    5. '()' → logprob: -9.222332954406738
    6. '(int' → logprob: -9.472332954406738
    7. '('' → logprob: -9.597332954406738
    8. '(range' → logprob: -9.847332954406738
    9. '(list' → logprob: -10.097332954406738
    10. '(stdin' → logprob: -11.097332954406738

Token 20: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.008666928857564926
    2. '()' → logprob: -4.7586669921875
    3. '().' → logprob: -10.1336669921875
    4. ')' → logprob: -12.5086669921875
    5. '()))' → logprob: -12.6336669921875
    6. '();)' → logprob: -13.0086669921875
    7. ' ())' → logprob: -13.5086669921875
    8. '());' → logprob: -14.2586669921875
    9. '()]' → logprob: -14.2586669921875
    10. '()>' → logprob: -15.5086669921875

Token 21: 's' (ID: 82)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.30662715435028076
    2. ' 
' → logprob: -2.6816272735595703
    3. ':' → logprob: -3.0566272735595703
    4. '\n' → logprob: -3.0566272735595703
    5. '```' → logprob: -3.3066272735595703
    6. 'for' → logprob: -3.8066272735595703
    7. '' → logprob: -4.55662727355957
    8. '
' → logprob: -5.05662727355957
    9. '[' → logprob: -5.30662727355957
    10. ':
' → logprob: -5.55662727355957

Token 22: '[k' (ID: 14298)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.3297497034072876
    2. '.' → logprob: -2.204749584197998
    3. '[k' → logprob: -3.204749584197998
    4. '<|end|>' → logprob: -3.204749584197998
    5. '[:]' → logprob: -3.454749584197998
    6. '.sort' → logprob: -3.579749584197998
    7. '[n' → logprob: -4.579749584197998
    8. '[::-' → logprob: -5.329749584197998
    9. '[token' → logprob: -6.204749584197998
    10. ')' → logprob: -6.829749584197998

Token 23: ' -' (ID: 533)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.09215174615383148
    2. '.lower' → logprob: -3.717151641845703
    3. ' =' → logprob: -4.092151641845703
    4. ')' → logprob: -4.717151641845703
    5. '-=' → logprob: -4.717151641845703
    6. '-' → logprob: -4.717151641845703
    7. '.upper' → logprob: -5.467151641845703
    8. ']' → logprob: -5.717151641845703
    9. '=k' → logprob: -5.842151641845703
    10. '.' → logprob: -6.217151641845703

Token 24: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0019397038267925382
    2. ' ' → logprob: -6.25193977355957
    3. '<|end|>' → logprob: -12.12693977355957
    4. '=' → logprob: -13.25193977355957
    5. '0' → logprob: -13.87693977355957
    6. '<|end|>' → logprob: -14.00193977355957
    7. '>' → logprob: -14.12693977355957
    8. ')' → logprob: -15.00193977355957
    9. '...' → logprob: -15.62693977355957
    10. '```' → logprob: -16.06443977355957

Token 25: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00026741522015072405
    2. '=' → logprob: -8.250267028808594
    3. ' ' → logprob: -12.125267028808594
    4. ' =' → logprob: -15.625267028808594
    5. '```' → logprob: -15.875267028808594
    6. ')' → logprob: -16.500267028808594
    7. '１' → logprob: -17.312767028808594
    8. '...' → logprob: -17.375267028808594
    9. '=int' → logprob: -17.437767028808594
    10. '=k' → logprob: -18.125267028808594

Token 26: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.28916171193122864
    2. '=' → logprob: -1.9141616821289062
    3. ']=' → logprob: -2.5391616821289062
    4. ' =' → logprob: -3.9141616821289062
    5. ' ]' → logprob: -6.164161682128906
    6. '].' → logprob: -7.039161682128906
    7. ')' → logprob: -7.164161682128906
    8. ')=' → logprob: -8.789161682128906
    9. 's' → logprob: -8.914161682128906
    10. ')]' → logprob: -9.039161682128906

Token 27: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.008711841888725758
    2. ' =' → logprob: -4.758711814880371
    3. '=}' → logprob: -11.258711814880371
    4. 'lower' → logprob: -11.508711814880371
    5. '=A' → logprob: -11.508711814880371
    6. '=

' → logprob: -12.008711814880371
    7. '='' → logprob: -12.133711814880371
    8. '=a' → logprob: -12.133711814880371
    9. 's' → logprob: -12.133711814880371
    10. '.=' → logprob: -12.258711814880371

Token 28: ' s' (ID: 265)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.8669379949569702
    2. ''s' → logprob: -0.9919379949569702
    3. ''' → logprob: -1.8669379949569702
    4. ''a' → logprob: -3.9919381141662598
    5. ''\' → logprob: -5.24193811416626
    6. ''x' → logprob: -5.49193811416626
    7. 'stdout' → logprob: -5.86693811416626
    8. 'chr' → logprob: -6.49193811416626
    9. ''''' → logprob: -6.74193811416626
    10. '```' → logprob: -6.74193811416626

Token 29: '[k' (ID: 14298)
  Prédit: '[k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[k' → logprob: -0.009264161810278893
    2. ''' → logprob: -5.50926399230957
    3. '[' → logprob: -5.88426399230957
    4. ''[' → logprob: -7.13426399230957
    5. '[key' → logprob: -7.38426399230957
    6. ''.' → logprob: -8.75926399230957
    7. '"' → logprob: -9.25926399230957
    8. 'k' → logprob: -9.25926399230957
    9. ''s' → logprob: -9.75926399230957
    10. '```' → logprob: -9.88426399230957

Token 30: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.06374191492795944
    2. ' -' → logprob: -2.81374192237854
    3. '1' → logprob: -7.563741683959961
    4. ' ' → logprob: -7.938741683959961
    5. '2' → logprob: -8.188741683959961
    6. '<|end|>' → logprob: -8.563741683959961
    7. '...' → logprob: -9.313741683959961
    8. '0' → logprob: -9.813741683959961
    9. '<|end|>' → logprob: -9.938741683959961
    10. '[' → logprob: -10.438741683959961

Token 31: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.006851416081190109
    2. ' ' → logprob: -5.0068511962890625
    3. '2' → logprob: -9.756851196289062
    4. '<|end|>' → logprob: -10.881851196289062
    5. ''' → logprob: -11.381851196289062
    6. ']' → logprob: -11.756851196289062
    7. '```' → logprob: -11.881851196289062
    8. '<|end|>' → logprob: -11.881851196289062
    9. ''s' → logprob: -12.006851196289062
    10. 'space' → logprob: -13.006851196289062

Token 32: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.558399319241289e-05
    2. ' ' → logprob: -11.500025749206543
    3. ''' → logprob: -12.125025749206543
    4. ''s' → logprob: -13.125025749206543
    5. '0' → logprob: -13.500025749206543
    6. '2' → logprob: -13.875025749206543
    7. '```' → logprob: -13.875025749206543
    8. 'lower' → logprob: -14.625025749206543
    9. '}' → logprob: -14.687525749206543
    10. 'ord' → logprob: -14.687525749206543

Token 33: '].' (ID: 1651)
  Prédit: '.lower'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.lower' → logprob: -0.4328277111053467
    2. '.upper' → logprob: -1.0578277111053467
    3. '.' → logprob: -5.557827949523926
    4. '.capitalize' → logprob: -8.932827949523926
    5. '.replace' → logprob: -9.932827949523926
    6. ').' → logprob: -10.432827949523926
    7. ' .' → logprob: -10.682827949523926
    8. 'lower' → logprob: -12.182827949523926
    9. '.swap' → logprob: -12.557827949523926
    10. ')' → logprob: -12.807827949523926

Token 34: 'lower' (ID: 30330)
  Prédit: 'lower'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lower' → logprob: -0.010862935334444046
    2. 'upper' → logprob: -5.010862827301025
    3. 'swap' → logprob: -5.510862827301025
    4. 'replace' → logprob: -10.010863304138184
    5. 'isl' → logprob: -10.510863304138184
    6. 'capitalize' → logprob: -11.135863304138184
    7. 'low' → logprob: -12.135863304138184
    8. '.lower' → logprob: -13.260863304138184
    9. 'rstrip' → logprob: -15.010863304138184
    10. 'l' → logprob: -15.010863304138184

Token 35: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.01819419115781784
    2. '(' → logprob: -4.018194198608398
    3. '()`' → logprob: -11.393194198608398
    4. '()(' → logprob: -11.643194198608398
    5. '`()' → logprob: -12.393194198608398
    6. '()]' → logprob: -12.893194198608398
    7. '()
' → logprob: -13.018194198608398
    8. '```' → logprob: -13.143194198608398
    9. '(
' → logprob: -13.393194198608398
    10. '()

' → logprob: -13.518194198608398

Token 36: 'stdout' (ID: 90151)
  Prédit: 'stdout'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdout' → logprob: -0.2078789621591568
    2. 'print' → logprob: -2.582879066467285
    3. '```' → logprob: -2.582879066467285
    4. 'for' → logprob: -3.707879066467285
    5. '#' → logprob: -4.957879066467285
    6. '''' → logprob: -6.832879066467285
    7. '"' → logprob: -7.207879066467285
    8. '``' → logprob: -7.957879066467285
    9. '.' → logprob: -8.082879066467285
    10. '.stdout' → logprob: -8.207879066467285

Token 37: '.write' (ID: 6765)
  Prédit: '.write'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.write' → logprob: -0.0009384971344843507
    2. '.' → logprob: -7.000938415527344
    3. '.w' → logprob: -10.875938415527344
    4. '.Write' → logprob: -12.375938415527344
    5. '.put' → logprob: -13.750938415527344
    6. '.append' → logprob: -14.250938415527344
    7. '.extend' → logprob: -14.375938415527344
    8. '.print' → logprob: -14.500938415527344
    9. '.writerow' → logprob: -15.000938415527344
    10. '.flush' → logprob: -15.500938415527344

Token 38: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.2195829302072525
    2. '("' → logprob: -1.7195829153060913
    3. '(' → logprob: -4.219583034515381
    4. '("("' → logprob: -5.844583034515381
    5. '"' → logprob: -8.719582557678223
    6. '("'"' → logprob: -9.219582557678223
    7. '('"' → logprob: -9.594582557678223
    8. '(s' → logprob: -10.344582557678223
    9. '("'' → logprob: -11.594582557678223
    10. '("\"' → logprob: -11.969582557678223

Token 39: ''.' (ID: 6120)
  Prédit: '''.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '''.' → logprob: -0.003286209423094988
    2. '"' → logprob: -6.003286361694336
    3. '''' → logprob: -7.753286361694336
    4. ' ''.' → logprob: -8.503286361694336
    5. ''' → logprob: -9.378286361694336
    6. ''.' → logprob: -9.878286361694336
    7. '('' → logprob: -11.003286361694336
    8. '```' → logprob: -11.253286361694336
    9. '".' → logprob: -11.753286361694336
    10. '""' → logprob: -13.628286361694336

Token 40: 'join' (ID: 10891)
  Prédit: 'join'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'join' → logprob: -3.4121114822482923e-06
    2. 'j' → logprob: -12.875003814697266
    3. 'jo' → logprob: -15.125003814697266
    4. 'concat' → logprob: -15.250003814697266
    5. ' join' → logprob: -16.500003814697266
    6. 'write' → logprob: -17.000003814697266
    7. 'w' → logprob: -17.125003814697266
    8. '.join' → logprob: -17.875003814697266
    9. 'print' → logprob: -18.000003814697266
    10. '''.' → logprob: -18.500003814697266

Token 41: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.0002647927321959287
    2. 's' → logprob: -8.250265121459961
    3. '(' → logprob: -12.750265121459961
    4. ')' → logprob: -14.500265121459961
    5. ')s' → logprob: -16.25026512145996
    6. '`s' → logprob: -19.50026512145996
    7. ' (' → logprob: -19.75026512145996
    8. '```' → logprob: -20.37526512145996
    9. ' s' → logprob: -20.62526512145996
    10. '(ss' → logprob: -20.75026512145996

Token 42: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.01417174469679594
    2. ')' → logprob: -4.264171600341797
    3. '))
' → logprob: -12.139171600341797
    4. ')))' → logprob: -13.139171600341797
    5. ''))' → logprob: -15.264171600341797
    6. '()))' → logprob: -15.389171600341797
    7. ' ))' → logprob: -16.514171600341797
    8. ')
' → logprob: -16.639171600341797
    9. ')\' → logprob: -16.639171600341797
    10. '),' → logprob: -17.014171600341797


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 40
Tokens correctement prédits (1ère position, stricte): 15
Tokens correctement prédits (1ère position, avec adaptation): 15
Tokens correctement prédits (top 10): 30
Précision stricte (1ère position): 37.50%
Précision adaptée (1ère position): 37.50%
Précision (top 10): 75.00%
================================================================================
