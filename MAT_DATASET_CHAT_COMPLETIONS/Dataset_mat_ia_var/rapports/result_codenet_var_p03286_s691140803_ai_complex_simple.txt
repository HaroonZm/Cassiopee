================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:11:44
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from functools import reduce
from operator import add

n = int(input())
result = []

def next_step(pair):
    x, acc = pair
    if x == 0:
        return (0, acc)
    digit = - (x % -2)
    next_x = (x - digit) // -2
    acc.append(str(digit))
    return (next_x, acc)

def compute(n):
    if n == 0:
        print(0)
        return
    state = (n, [])
    while state[0] != 0:
        state = next_step(state)
    # Reversing with reduce just for fun
    rev = reduce(lambda x, y: [y] + x, state[1], [])
    print(''.join(rev))

compute(n)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' functools' (ID: 142636)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' reduce' (ID: 10389)
  Prédit: 'partial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'partial' → logprob: -0.6123510599136353
    2. 'wrap' → logprob: -0.8623510599136353
    3. 'reduce' → logprob: -3.4873509407043457
    4. 'l' → logprob: -6.112350940704346
    5. ' wraps' → logprob: -6.362350940704346
    6. 'cached' → logprob: -7.612350940704346
    7. 'cache' → logprob: -7.987350940704346
    8. 'cmp' → logprob: -9.112351417541504
    9. '```' → logprob: -9.237351417541504
    10. ' partial' → logprob: -9.487351417541504

Token 4: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.010317044332623482
    2. '(lambda' → logprob: -4.760316848754883
    3. ' (' → logprob: -7.385316848754883
    4. ',' → logprob: -7.885316848754883
    5. 'def' → logprob: -8.135316848754883
    6. '.' → logprob: -8.635316848754883
    7. '```' → logprob: -10.135316848754883
    8. '(
' → logprob: -10.385316848754883
    9. 'lambda' → logprob: -10.635316848754883
    10. ' ' → logprob: -10.760316848754883

Token 5: 'from' (ID: 2845)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014403714798390865
    2. '(
' → logprob: -5.139403820037842
    3. '(lambda' → logprob: -5.389403820037842
    4. 'def' → logprob: -6.639403820037842
    5. ',' → logprob: -7.139403820037842
    6. '\' → logprob: -8.139403343200684
    7. ' ' → logprob: -8.264403343200684
    8. ' (' → logprob: -8.389403343200684
    9. '
' → logprob: -9.139403343200684
    10. '' → logprob: -9.139403343200684

Token 6: ' operator' (ID: 11019)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.9289020299911499
    2. ' operator' → logprob: -1.42890202999115
    3. ' itertools' → logprob: -1.55390202999115
    4. ' collections' → logprob: -1.92890202999115
    5. ' os' → logprob: -4.9289021492004395
    6. 'operator' → logprob: -7.4289021492004395
    7. ' sys' → logprob: -8.553901672363281
    8. ' typing' → logprob: -8.553901672363281
    9. 'collections' → logprob: -8.928901672363281
    10. 'math' → logprob: -9.053901672363281

Token 7: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.044668834656476974
    2. 'import' → logprob: -3.6696689128875732
    3. '.' → logprob: -4.169668674468994
    4. ' ' → logprob: -6.044668674468994
    5. ' .' → logprob: -8.419669151306152
    6. '.import' → logprob: -9.169669151306152
    7. '	import' → logprob: -11.419669151306152
    8. '_import' → logprob: -11.544669151306152
    9. '<|end|>' → logprob: -11.794669151306152
    10. ' Import' → logprob: -13.169669151306152

Token 8: ' add' (ID: 1147)
  Prédit: ' add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' add' → logprob: -0.31903505325317383
    2. ' import' → logprob: -1.9440350532531738
    3. 'add' → logprob: -2.444035053253174
    4. ' ' → logprob: -4.069035053253174
    5. ' mul' → logprob: -4.194035053253174
    6. 'import' → logprob: -4.819035053253174
    7. 'mul' → logprob: -6.194035053253174
    8. ' item' → logprob: -8.694034576416016
    9. 'item' → logprob: -9.569034576416016
    10. ' ad' → logprob: -9.819034576416016

Token 9: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2547340989112854
    2. '\' → logprob: -2.6297340393066406
    3. '(
' → logprob: -3.2547340393066406
    4. '\n' → logprob: -3.2547340393066406
    5. ',' → logprob: -3.7547340393066406
    6. '#' → logprob: -4.629734039306641
    7. ' ' → logprob: -5.254734039306641
    8. 'def' → logprob: -5.254734039306641
    9. ')' → logprob: -5.504734039306641
    10. '
' → logprob: -5.754734039306641

Token 10: 'n' (ID: 77)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03062465414404869
    2. '(
' → logprob: -3.9056246280670166
    3. '#' → logprob: -5.530624866485596
    4. 'def' → logprob: -6.655624866485596
    5. 'a' → logprob: -6.780624866485596
    6. '\' → logprob: -6.905624866485596
    7. 'result' → logprob: -7.405624866485596
    8. ',' → logprob: -7.530624866485596
    9. '(

' → logprob: -8.655624389648438
    10. '(a' → logprob: -8.905624389648438

Token 11: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -1.268945336341858
    2. '_' → logprob: -1.393945336341858
    3. ' =' → logprob: -1.643945336341858
    4. 'u' → logprob: -2.2689452171325684
    5. ' ' → logprob: -2.5189452171325684
    6. 'umber' → logprob: -3.6439452171325684
    7. 'um' → logprob: -3.7689452171325684
    8. 'a' → logprob: -4.018945217132568
    9. ',' → logprob: -4.893945217132568
    10. 'umbers' → logprob: -5.393945217132568

Token 12: ' int' (ID: 677)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.01192072220146656
    2. '0' → logprob: -4.886920928955078
    3. '1' → logprob: -6.011920928955078
    4. '10' → logprob: -6.636920928955078
    5. '5' → logprob: -8.636920928955078
    6. ''' → logprob: -9.261920928955078
    7. '20' → logprob: -9.511920928955078
    8. ' '' → logprob: -9.636920928955078
    9. 'int' → logprob: -10.886920928955078
    10. '100' → logprob: -11.136920928955078

Token 13: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0002619318547658622
    2. '(n' → logprob: -8.500262260437012
    3. '(input' → logprob: -10.750262260437012
    4. ' (' → logprob: -10.875262260437012
    5. '('' → logprob: -12.375262260437012
    6. '(`' → logprob: -12.875262260437012
    7. '(
' → logprob: -13.125262260437012
    8. '()' → logprob: -13.500262260437012
    9. '```' → logprob: -13.625262260437012
    10. '(user' → logprob: -14.250262260437012

Token 14: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.16534316539764404
    2. ')' → logprob: -2.2903432846069336
    3. '()' → logprob: -3.1653432846069336
    4. '())' → logprob: -5.165343284606934
    5. '('' → logprob: -6.290343284606934
    6. '(
' → logprob: -7.540343284606934
    7. '("("' → logprob: -8.665343284606934
    8. '(()' → logprob: -9.040343284606934
    9. '))' → logprob: -9.290343284606934
    10. '(

' → logprob: -9.415343284606934

Token 15: 'result' (ID: 2521)
  Prédit: 'result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.3000141978263855
    2. 'numbers' → logprob: -2.3000142574310303
    3. 'lst' → logprob: -2.9250142574310303
    4. 'total' → logprob: -3.3000142574310303
    5. 'arr' → logprob: -4.050014019012451
    6. 's' → logprob: -4.300014019012451
    7. 'sequence' → logprob: -4.800014019012451
    8. 'data' → logprob: -4.925014019012451
    9. 'a' → logprob: -5.050014019012451
    10. 'nums' → logprob: -5.300014019012451

Token 16: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0048499382100999355
    2. '=' → logprob: -5.379849910736084
    3. ' ' → logprob: -8.629850387573242
    4. '_' → logprob: -10.379850387573242
    5. ' +=' → logprob: -12.004850387573242
    6. '(' → logprob: -12.129850387573242
    7. '.' → logprob: -13.379850387573242
    8. 's' → logprob: -13.879850387573242
    9. ')' → logprob: -14.004850387573242
    10. '  ' → logprob: -14.254850387573242

Token 17: ' []

' (ID: 32833)
  Prédit: ' reduce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' reduce' → logprob: -0.07001768052577972
    2. 'reduce' → logprob: -2.6950175762176514
    3. ' functools' → logprob: -9.82001781463623
    4. ' sum' → logprob: -11.82001781463623
    5. ' n' → logprob: -12.44501781463623
    6. ' list' → logprob: -12.57001781463623
    7. 'fun' → logprob: -12.94501781463623
    8. ' fun' → logprob: -13.07001781463623
    9. 'sum' → logprob: -13.69501781463623
    10. '.reduce' → logprob: -14.07001781463623

Token 18: 'def' (ID: 1314)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0002668192028068006
    2. ' for' → logprob: -8.250267028808594
    3. '[' → logprob: -12.375267028808594
    4. '
' → logprob: -15.000267028808594
    5. '```' → logprob: -15.625267028808594
    6. 'f' → logprob: -16.250267028808594
    7. '\n' → logprob: -16.250267028808594
    8. 'def' → logprob: -16.625267028808594
    9. '[
' → logprob: -17.000267028808594
    10. '(' → logprob: -17.000267028808594

Token 19: ' next' (ID: 2613)
  Prédit: ' factorial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' factorial' → logprob: -0.351775586605072
    2. ' accumulate' → logprob: -2.101775646209717
    3. ' add' → logprob: -2.726775646209717
    4. ' sum' → logprob: -3.726775646209717
    5. ' multiply' → logprob: -3.726775646209717
    6. ' reduce' → logprob: -4.226775646209717
    7. ' ' → logprob: -5.101775646209717
    8. ' square' → logprob: -5.601775646209717
    9. ' fibonacci' → logprob: -5.726775646209717
    10. ' my' → logprob: -5.851775646209717

Token 20: '_step' (ID: 27360)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.052014634013175964
    2. '_val' → logprob: -4.0520148277282715
    3. '_number' → logprob: -4.4270148277282715
    4. '_value' → logprob: -5.3020148277282715
    5. '_element' → logprob: -5.8020148277282715
    6. '_num' → logprob: -5.9270148277282715
    7. '_token' → logprob: -5.9270148277282715
    8. '_item' → logprob: -6.4270148277282715
    9. '_sum' → logprob: -6.8020148277282715
    10. '_step' → logprob: -6.8020148277282715

Token 21: '(pair' (ID: 84884)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0028956905007362366
    2. '_' → logprob: -6.002895832061768
    3. '(_)' → logprob: -9.25289535522461
    4. 's' → logprob: -9.87789535522461
    5. '(_' → logprob: -9.87789535522461
    6. '(n' → logprob: -10.00289535522461
    7. '(s' → logprob: -10.50289535522461
    8. ')' → logprob: -10.75289535522461
    9. ' (' → logprob: -11.12789535522461
    10. '()' → logprob: -11.25289535522461

Token 22: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0006411884678527713
    2. ',' → logprob: -8.250640869140625
    3. ':' → logprob: -8.500640869140625
    4. ')' → logprob: -9.500640869140625
    5. '):
' → logprob: -10.250640869140625
    6. ' ):' → logprob: -10.375640869140625
    7. '[' → logprob: -11.375640869140625
    8. '   ' → logprob: -12.375640869140625
    9. '=' → logprob: -12.625640869140625
    10. ' ' → logprob: -13.125640869140625

Token 23: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.039169181138277054
    2. ':' → logprob: -4.0391693115234375
    3. '(a' → logprob: -4.7891693115234375
    4. '):' → logprob: -5.2891693115234375
    5. ',' → logprob: -5.4141693115234375
    6. 'a' → logprob: -7.5391693115234375
    7. '(p' → logprob: -7.6641693115234375
    8. ' (' → logprob: -7.6641693115234375
    9. '(' → logprob: -7.7891693115234375
    10. ')' → logprob: -8.414169311523438

Token 24: ' x' (ID: 1215)
  Prédit: ' pair'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pair' → logprob: -0.922684907913208
    2. 'pair' → logprob: -1.172684907913208
    3. '(pair' → logprob: -2.172684907913208
    4. 'a' → logprob: -2.922684907913208
    5. '   ' → logprob: -3.172684907913208
    6. ' return' → logprob: -3.797684907913208
    7. 'return' → logprob: -4.047684669494629
    8. ' a' → logprob: -4.297684669494629
    9. '(a' → logprob: -4.547684669494629
    10. 'x' (adapté à ' x') → logprob: -5.172684669494629

Token 25: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0334073044359684
    2. '[' → logprob: -3.533407211303711
    3. ' ,' → logprob: -6.408407211303711
    4. ' ' → logprob: -8.158407211303711
    5. '1' → logprob: -8.283407211303711
    6. ')' → logprob: -8.283407211303711
    7. '=' → logprob: -8.533407211303711
    8. '+' → logprob: -8.658407211303711
    9. ',y' → logprob: -8.658407211303711
    10. '0' → logprob: -8.908407211303711

Token 26: ' acc' (ID: 1259)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.033668868243694305
    2. ' y' → logprob: -3.4086687564849854
    3. 'x' → logprob: -12.033668518066406
    4. 'count' → logprob: -12.658668518066406
    5. 'n' → logprob: -12.783668518066406
    6. 's' → logprob: -13.408668518066406
    7. ' ' → logprob: -13.533668518066406
    8. '   ' → logprob: -14.283668518066406
    9. 'acc' → logprob: -14.408668518066406
    10. '_' → logprob: -14.533668518066406

Token 27: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5760838985443115
    2. '=' → logprob: -0.8260838985443115
    3. ')' → logprob: -9.07608413696289
    4. ',' → logprob: -10.95108413696289
    5. ')=' → logprob: -12.07608413696289
    6. ' ' → logprob: -13.82608413696289
    7. ']' → logprob: -14.07608413696289
    8. 'u' → logprob: -14.57608413696289
    9. '),' → logprob: -14.82608413696289
    10. ' =
' → logprob: -14.95108413696289

Token 28: ' pair' (ID: 10610)
  Prédit: ' pair'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pair' → logprob: -0.4077862501144409
    2. 'pair' → logprob: -1.157786250114441
    3. 'x' → logprob: -4.5327863693237305
    4. ' x' → logprob: -4.6577863693237305
    5. '0' → logprob: -9.15778636932373
    6. ' ' → logprob: -9.28278636932373
    7. '(pair' → logprob: -9.90778636932373
    8. ' add' → logprob: -10.03278636932373
    9. 'add' → logprob: -10.15778636932373
    10. 'acc' → logprob: -10.53278636932373

Token 29: '
' (ID: 198)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4548940062522888
    2. '=' → logprob: -1.7048940658569336
    3. '   ' → logprob: -2.0798940658569336
    4. '
' → logprob: -3.3298940658569336
    5. ',' → logprob: -4.704894065856934
    6. ')' → logprob: -5.329894065856934
    7. ':' → logprob: -5.954894065856934
    8. 'return' → logprob: -6.079894065856934
    9. '):
' → logprob: -6.829894065856934
    10. '    
' → logprob: -7.204894065856934

Token 30: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6763526797294617
    2. '
' → logprob: -1.4263527393341064
    3. ':' → logprob: -1.6763527393341064
    4. 'return' → logprob: -3.8013527393341064
    5. '    
' → logprob: -4.801352500915527
    6. ',' → logprob: -4.801352500915527
    7. ')' → logprob: -5.051352500915527
    8. ':
' → logprob: -5.301352500915527
    9. ' return' → logprob: -6.051352500915527
    10. ' 
' → logprob: -6.426352500915527

Token 31: ' if' (ID: 538)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.44909095764160156
    2. ' return' → logprob: -1.5740909576416016
    3. '   ' → logprob: -2.0740909576416016
    4. 'result' → logprob: -4.324090957641602
    5. ' result' → logprob: -5.449090957641602
    6. 'x' → logprob: -6.074090957641602
    7. 'if' (adapté à ' if') → logprob: -6.324090957641602
    8. ' if' → logprob: -6.449090957641602
    9. 'acc' → logprob: -6.699090957641602
    10. ' acc' → logprob: -6.824090957641602

Token 32: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.04357796534895897
    2. 'x' → logprob: -3.1685779094696045
    3. ' n' → logprob: -8.043578147888184
    4. 'n' → logprob: -9.168578147888184
    5. ' not' → logprob: -9.668578147888184
    6. '(x' → logprob: -10.918578147888184
    7. ' acc' → logprob: -10.918578147888184
    8. ' (' → logprob: -10.918578147888184
    9. ' ' → logprob: -11.418578147888184
    10. ' isinstance' → logprob: -11.543578147888184

Token 33: ' ==' (ID: 951)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -1.3436307907104492
    2. ' %' → logprob: -1.4686307907104492
    3. '%' → logprob: -1.8436307907104492
    4. '>' → logprob: -1.8436307907104492
    5. ' ==' → logprob: -2.218630790710449
    6. '==' → logprob: -2.718630790710449
    7. ' <' → logprob: -5.093630790710449
    8. ' ' → logprob: -6.093630790710449
    9. '+' → logprob: -6.218630790710449
    10. ' <=' → logprob: -6.343630790710449

Token 34: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.46451956033706665
    2. '0' → logprob: -1.3395195007324219
    3. ' n' → logprob: -2.589519500732422
    4. 'n' → logprob: -3.464519500732422
    5. '1' → logprob: -5.839519500732422
    6. '  ' → logprob: -9.714519500732422
    7. '   ' → logprob: -10.027019500732422
    8. '2' → logprob: -10.027019500732422
    9. '	n' → logprob: -10.402019500732422
    10. '3' → logprob: -10.964519500732422

Token 35: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.29381319880485535
    2. 'n' → logprob: -1.4188132286071777
    3. '1' → logprob: -4.543813228607178
    4. ' ' → logprob: -6.668813228607178
    5. ' n' → logprob: -8.41881275177002
    6. '2' → logprob: -9.29381275177002
    7. '[]' → logprob: -9.91881275177002
    8. '   ' → logprob: -10.16881275177002
    9. '3' → logprob: -10.35631275177002
    10. '-' → logprob: -10.48131275177002

Token 36: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0015702145174145699
    2. ':return' → logprob: -7.126570224761963
    3. ':
' → logprob: -7.376570224761963
    4. ' :' → logprob: -9.126569747924805
    5. ' or' → logprob: -11.126569747924805
    6. ',' → logprob: -12.001569747924805
    7. '   ' → logprob: -12.876569747924805
    8. '):' → logprob: -13.251569747924805
    9. ' and' → logprob: -13.376569747924805
    10. ' :
' → logprob: -14.001569747924805

Token 37: '       ' (ID: 309)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.9750349521636963
    2. '   ' → logprob: -1.2250349521636963
    3. '       ' → logprob: -1.2250349521636963
    4. 'return' → logprob: -4.475034713745117
    5. '    ' → logprob: -4.725034713745117
    6. '    
' → logprob: -4.725034713745117
    7. ' 
' → logprob: -6.850034713745117
    8. '0' → logprob: -6.975034713745117
    9. '        
' → logprob: -6.975034713745117
    10. ' ' → logprob: -7.100034713745117

Token 38: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.15678255259990692
    2. 'return' (adapté à ' return') → logprob: -2.656782627105713
    3. '       ' → logprob: -3.031782627105713
    4. '   ' → logprob: -3.656782627105713
    5. ' ' → logprob: -8.656782150268555
    6. '	return' → logprob: -9.031782150268555
    7. ' acc' → logprob: -9.031782150268555
    8. 'acc' → logprob: -9.156782150268555
    9. '    ' → logprob: -9.656782150268555
    10. ':return' → logprob: -10.031782150268555

Token 39: ' (' (ID: 350)
  Prédit: 'None'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'None' → logprob: -0.7143751382827759
    2. ' None' → logprob: -2.2143750190734863
    3. '(' → logprob: -2.3393750190734863
    4. '(None' → logprob: -2.3393750190734863
    5. '(acc' → logprob: -2.7143750190734863
    6. '0' → logprob: -2.8393750190734863
    7. 'acc' → logprob: -2.9643750190734863
    8. ' (' → logprob: -4.464375019073486
    9. '(x' → logprob: -4.964375019073486
    10. 'x' → logprob: -5.339375019073486

Token 40: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.6041659712791443
    2. 'acc' → logprob: -1.229166030883789
    3. 'x' → logprob: -2.979166030883789
    4. '(' → logprob: -2.979166030883789
    5. '(acc' → logprob: -3.604166030883789
    6. '1' → logprob: -4.479166030883789
    7. 'None' → logprob: -4.729166030883789
    8. '(x' → logprob: -6.104166030883789
    9. ')' → logprob: -6.229166030883789
    10. '(None' → logprob: -6.479166030883789

Token 41: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00014013137842994183
    2. ' ,' → logprob: -9.250140190124512
    3. 'x' → logprob: -12.000140190124512
    4. ' ' → logprob: -12.375140190124512
    5. ')' → logprob: -12.375140190124512
    6. '+' → logprob: -12.500140190124512
    7. '),' → logprob: -12.500140190124512
    8. ',
' → logprob: -12.750140190124512
    9. '0' → logprob: -13.125140190124512
    10. '1' → logprob: -13.312640190124512

Token 42: ' acc' (ID: 1259)
  Prédit: 'acc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'acc' → logprob: -0.20556114614009857
    2. ' acc' → logprob: -1.9555611610412598
    3. 'add' → logprob: -3.4555611610412598
    4. ' add' → logprob: -5.33056116104126
    5. '0' → logprob: -5.83056116104126
    6. 'result' → logprob: -7.08056116104126
    7. ' ' → logprob: -7.33056116104126
    8. '[' → logprob: -7.58056116104126
    9. '[]' → logprob: -7.58056116104126
    10. '(acc' → logprob: -7.95556116104126

Token 43: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.31510284543037415
    2. '+' → logprob: -1.9401028156280518
    3. ')
' → logprob: -2.6901028156280518
    4. ' +' → logprob: -2.9401028156280518
    5. ' )' → logprob: -5.815103054046631
    6. '   ' → logprob: -6.690103054046631
    7. ' )
' → logprob: -7.065103054046631
    8. ')

' → logprob: -8.690102577209473
    9. '+)' → logprob: -8.940102577209473
    10. ')
' → logprob: -9.190102577209473

Token 44: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.369188904762268
    2. '+' → logprob: -1.619188904762268
    3. '   ' → logprob: -1.619188904762268
    4. ' else' → logprob: -1.994188904762268
    5. 'else' → logprob: -2.3691887855529785
    6. ' +' → logprob: -3.1191887855529785
    7. ')
' → logprob: -3.7441887855529785
    8. ')' → logprob: -4.1191887855529785
    9. '+
' → logprob: -4.4941887855529785
    10. '    
' → logprob: -4.8691887855529785

Token 45: ' digit' (ID: 19181)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.703472912311554
    2. ' else' → logprob: -1.2034728527069092
    3. 'else' → logprob: -2.453472852706909
    4. ' ,' → logprob: -2.828472852706909
    5. '   ' → logprob: -3.328472852706909
    6. ' (' → logprob: -4.828473091125488
    7. 'return' → logprob: -5.203473091125488
    8. ' return' → logprob: -5.703473091125488
    9. '(' → logprob: -6.203473091125488
    10. ',
' → logprob: -6.578473091125488

Token 46: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.08214675635099411
    2. 's' → logprob: -2.957146644592285
    3. '=' → logprob: -3.832146644592285
    4. ',' → logprob: -5.582146644592285
    5. ' ' → logprob: -7.457146644592285
    6. '_sum' → logprob: -8.082146644592285
    7. '   ' → logprob: -8.582146644592285
    8. '_' → logprob: -8.957146644592285
    9. '  ' → logprob: -9.707146644592285
    10. '_s' → logprob: -9.832146644592285

Token 47: ' -' (ID: 533)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.16137747466564178
    2. 'x' → logprob: -1.9113774299621582
    3. ' acc' → logprob: -7.786377429962158
    4. ' ' → logprob: -8.036377906799316
    5. 'acc' → logprob: -8.786377906799316
    6. ' (' → logprob: -10.036377906799316
    7. ' digit' → logprob: -10.411377906799316
    8. 'n' → logprob: -10.661377906799316
    9. ' n' → logprob: -10.786377906799316
    10. '	x' → logprob: -10.911377906799316

Token 48: ' (' (ID: 350)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.04941212758421898
    2. '1' → logprob: -3.9244120121002197
    3. '(' → logprob: -4.299412250518799
    4. '(-' → logprob: -4.799412250518799
    5. '(x' → logprob: -5.924412250518799
    6. 'acc' → logprob: -6.799412250518799
    7. '(~' → logprob: -7.299412250518799
    8. '((-' → logprob: -7.924412250518799
    9. 'int' → logprob: -8.29941177368164
    10. '~' → logprob: -8.54941177368164

Token 49: 'x' (ID: 87)
  Prédit: 'x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.04284193739295006
    2. '(x' → logprob: -3.292841911315918
    3. '(' → logprob: -5.792841911315918
    4. ' (' → logprob: -7.667841911315918
    5. ' x' → logprob: -7.667841911315918
    6. '(acc' → logprob: -8.292841911315918
    7. '(-' → logprob: -9.417841911315918
    8. '((' → logprob: -9.542841911315918
    9. 'acc' → logprob: -9.667841911315918
    10. '1' → logprob: -10.167841911315918

Token 50: ' %' (ID: 1851)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -0.2559511959552765
    2. ' %' → logprob: -1.505951166152954
    3. ' ' → logprob: -6.380951404571533
    4. ' //' → logprob: -7.130951404571533
    5. ')' → logprob: -7.380951404571533
    6. ' &' → logprob: -8.630950927734375
    7. '[' → logprob: -8.880950927734375
    8. '&' → logprob: -9.005950927734375
    9. '//' → logprob: -9.630950927734375
    10. '%x' → logprob: -9.630950927734375

Token 51: ' -' (ID: 533)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.5786086916923523
    2. '2' → logprob: -1.578608751296997
    3. ' ' → logprob: -2.203608751296997
    4. '-' → logprob: -2.453608751296997
    5. ' -' → logprob: -4.203608512878418
    6. '5' → logprob: -4.953608512878418
    7. '7' → logprob: -5.828608512878418
    8. '1' → logprob: -5.953608512878418
    9. '4' → logprob: -6.453608512878418
    10. '3' → logprob: -6.703608512878418

Token 52: '2' (ID: 17)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.18065601587295532
    2. '2' → logprob: -1.9306559562683105
    3. '3' → logprob: -5.3056559562683105
    4. '5' → logprob: -5.4306559562683105
    5. '9' → logprob: -5.6806559562683105
    6. '7' → logprob: -6.0556559562683105
    7. '4' → logprob: -6.4306559562683105
    8. '8' → logprob: -6.4306559562683105
    9. '6' → logprob: -7.4306559562683105
    10. ' ' → logprob: -8.180656433105469

Token 53: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.010924969799816608
    2. ' )' → logprob: -4.635924816131592
    3. ')
' → logprob: -6.885924816131592
    4. ' )
' → logprob: -9.88592529296875
    5. '),' → logprob: -10.26092529296875
    6. '   ' → logprob: -11.01092529296875
    7. '))' → logprob: -11.63592529296875
    8. ' ' → logprob: -11.88592529296875
    9. ')

' → logprob: -11.88592529296875
    10. '0' → logprob: -12.63592529296875

Token 54: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.49879249930381775
    2. '   ' → logprob: -1.7487925291061401
    3. ',' → logprob: -2.2487924098968506
    4. 'x' → logprob: -3.4987924098968506
    5. ' x' → logprob: -3.7487924098968506
    6. ' ,' → logprob: -4.37379264831543
    7. 'result' → logprob: -4.99879264831543
    8. ' ' → logprob: -5.24879264831543
    9. '    
' → logprob: -5.49879264831543
    10. ',
' → logprob: -5.49879264831543

Token 55: ' next' (ID: 2613)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8915581107139587
    2. ' x' → logprob: -1.5165581703186035
    3. ' acc' → logprob: -2.7665581703186035
    4. ' return' → logprob: -2.7665581703186035
    5. 'x' → logprob: -2.8915581703186035
    6. '
' → logprob: -2.8915581703186035
    7. ' new' → logprob: -3.5165581703186035
    8. ' remainder' → logprob: -3.7665581703186035
    9. ',' → logprob: -4.0165581703186035
    10. 'return' → logprob: -4.1415581703186035

Token 56: '_x' (ID: 7054)
  Prédit: '_step'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_step' → logprob: -0.26869073510169983
    2. '_x' → logprob: -1.7686907052993774
    3. 'x' → logprob: -3.143690824508667
    4. '_pair' → logprob: -4.893690586090088
    5. '_' → logprob: -5.143690586090088
    6. 'step' → logprob: -5.268690586090088
    7. 'pair' → logprob: -6.768690586090088
    8. '_val' → logprob: -7.518690586090088
    9. '_value' → logprob: -8.018691062927246
    10. '   ' → logprob: -8.143691062927246

Token 57: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.28163501620292664
    2. '=' → logprob: -1.406635046005249
    3. ',' → logprob: -7.65663480758667
    4. ' ' → logprob: -12.031635284423828
    5. 's' → logprob: -14.031635284423828
    6. '<|end|>' → logprob: -14.156635284423828
    7. '```' → logprob: -14.406635284423828
    8. '=int' → logprob: -14.531635284423828
    9. ')' → logprob: -14.531635284423828
    10. '  ' → logprob: -14.906635284423828

Token 58: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.16049139201641083
    2. '(x' → logprob: -1.9104913473129272
    3. 'x' → logprob: -9.410490989685059
    4. ' x' → logprob: -9.535490989685059
    5. '(' → logprob: -9.910490989685059
    6. ' ' → logprob: -10.035490989685059
    7. '-' → logprob: -11.910490989685059
    8. '(n' → logprob: -13.035490989685059
    9. '   ' → logprob: -13.535490989685059
    10. '  ' → logprob: -13.785490989685059

Token 59: 'x' (ID: 87)
  Prédit: 'x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.08119721710681915
    2. ' x' → logprob: -2.5811972618103027
    3. '(x' → logprob: -6.206197261810303
    4. ' (' → logprob: -8.456196784973145
    5. '(' → logprob: -11.081196784973145
    6. '-x' → logprob: -11.206196784973145
    7. ' ' → logprob: -11.331196784973145
    8. ')x' → logprob: -11.456196784973145
    9. ')' → logprob: -11.706196784973145
    10. '-' → logprob: -12.956196784973145

Token 60: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.18066197633743286
    2. '-' → logprob: -1.805661916732788
    3. '-digit' → logprob: -8.305662155151367
    4. '+' → logprob: -8.930662155151367
    5. '-d' → logprob: -8.930662155151367
    6. ')' → logprob: -8.930662155151367
    7. ' +' → logprob: -9.555662155151367
    8. ' ' → logprob: -9.680662155151367
    9. ' //' → logprob: -10.805662155151367
    10. '-x' → logprob: -10.805662155151367

Token 61: ' digit' (ID: 19181)
  Prédit: 'digit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'digit' → logprob: -0.20159918069839478
    2. ' digit' → logprob: -1.70159912109375
    3. '-digit' → logprob: -9.70159912109375
    4. ' ' → logprob: -9.82659912109375
    5. ')' → logprob: -10.95159912109375
    6. '  ' → logprob: -11.45159912109375
    7. '   ' → logprob: -11.57659912109375
    8. 'd' → logprob: -11.70159912109375
    9. 'igit' → logprob: -12.07659912109375
    10. '_digit' → logprob: -12.32659912109375

Token 62: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00019007037917617708
    2. ' )' → logprob: -9.250189781188965
    3. ')//' → logprob: -9.375189781188965
    4. ' ' → logprob: -11.875189781188965
    5. '   ' → logprob: -14.000189781188965
    6. ')
' → logprob: -15.500189781188965
    7. ')>>' → logprob: -15.625189781188965
    8. '    ' → logprob: -15.875189781188965
    9. '     ' → logprob: -16.25019073486328
    10. '")' → logprob: -16.25019073486328

Token 63: ' //' (ID: 602)
  Prédit: '//'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '//' → logprob: -0.7762432098388672
    2. ')' → logprob: -1.0262432098388672
    3. ' //' → logprob: -1.7762432098388672
    4. ')//' → logprob: -5.276243209838867
    5. ' ' → logprob: -6.151243209838867
    6. '```' → logprob: -6.776243209838867
    7. '   ' → logprob: -6.901243209838867
    8. '`' → logprob: -7.651243209838867
    9. 'div' → logprob: -7.776243209838867
    10. ' ' → logprob: -8.026243209838867

Token 64: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.006920088082551956
    2. '2' → logprob: -5.131919860839844
    3. ' -' → logprob: -7.131919860839844
    4. '(-' → logprob: -8.631919860839844
    5. ' ' → logprob: -12.381919860839844
    6. '   ' → logprob: -13.006919860839844
    7. '```' → logprob: -13.381919860839844
    8. '
' → logprob: -13.756919860839844
    9. '[-' → logprob: -13.881919860839844
    10. ' (-' → logprob: -13.881919860839844

Token 65: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -1.1472419600977446e-06
    2. ' ' → logprob: -14.375000953674316
    3. '<|end|>' → logprob: -14.875000953674316
    4. '```' → logprob: -16.375001907348633
    5. '<|end|>' → logprob: -17.250001907348633
    6. '
' → logprob: -17.625001907348633
    7. '   ' → logprob: -17.750001907348633
    8. '۲' → logprob: -17.875001907348633
    9. '２' → logprob: -18.437501907348633
    10. '`' → logprob: -18.562501907348633

Token 66: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05183389410376549
    2. 'return' → logprob: -3.0518338680267334
    3. ' return' → logprob: -5.8018341064453125
    4. '
' → logprob: -9.176834106445312
    5. '    
' → logprob: -9.426834106445312
    6. '	return' → logprob: -12.051834106445312
    7. ')' → logprob: -12.176834106445312
    8. '(' → logprob: -12.301834106445312
    9. ' (' → logprob: -12.426834106445312
    10. '(return' → logprob: -12.676834106445312

Token 67: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.015034601092338562
    2. 'return' → logprob: -4.2650346755981445
    3. ' return' → logprob: -7.8900346755981445
    4. '
' → logprob: -8.390034675598145
    5. '(acc' → logprob: -8.765034675598145
    6. '    
' → logprob: -9.390034675598145
    7. '(' → logprob: -11.515034675598145
    8. ')' → logprob: -12.390034675598145
    9. 'acc' → logprob: -12.515034675598145
    10. ' (' → logprob: -12.640034675598145

Token 68: ' acc' (ID: 1259)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.16931171715259552
    2. '   ' → logprob: -1.919311761856079
    3. ' return' → logprob: -4.7943115234375
    4. '
' → logprob: -7.6693115234375
    5. '    
' → logprob: -8.5443115234375
    6. '(' → logprob: -10.6693115234375
    7. '(return' → logprob: -10.7943115234375
    8. '(acc' → logprob: -11.2943115234375
    9. ' ' → logprob: -11.4193115234375
    10. ' (' → logprob: -11.4193115234375

Token 69: '.append' (ID: 3709)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3538898229598999
    2. '.append' → logprob: -2.3538899421691895
    3. '+=' → logprob: -2.6038899421691895
    4. ' +=' → logprob: -2.7288899421691895
    5. ' =' → logprob: -2.9788899421691895
    6. '+' → logprob: -4.7288899421691895
    7. ' +' → logprob: -5.7288899421691895
    8. '.add' → logprob: -8.228889465332031
    9. 'append' → logprob: -8.728889465332031
    10. '.extend' → logprob: -9.228889465332031

Token 70: '(str' (ID: 7946)
  Prédit: '(str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(str' → logprob: -0.10059913247823715
    2. '(d' → logprob: -2.3505990505218506
    3. '(' → logprob: -8.22559928894043
    4. 'str' → logprob: -9.47559928894043
    5. '(chr' → logprob: -11.22559928894043
    6. 'digit' → logprob: -11.35059928894043
    7. '(int' → logprob: -11.47559928894043
    8. '('' → logprob: -12.10059928894043
    9. '((' → logprob: -13.72559928894043
    10. 'left' → logprob: -13.72559928894043

Token 71: '(d' (ID: 2572)
  Prédit: '(d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(d' → logprob: -0.00016027313540689647
    2. '(' → logprob: -8.750160217285156
    3. ')' → logprob: -14.125160217285156
    4. '(abs' → logprob: -15.250160217285156
    5. 'digit' → logprob: -15.250160217285156
    6. ' (' → logprob: -15.750160217285156
    7. '(
' → logprob: -16.250160217285156
    8. '	d' → logprob: -16.625160217285156
    9. ')d' → logprob: -16.625160217285156
    10. ')(' → logprob: -16.750160217285156

Token 72: 'igit' (ID: 16673)
  Prédit: 'git'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'git' → logprob: -0.05087948590517044
    2. 'igit' → logprob: -3.05087947845459
    3. 'it' → logprob: -6.30087947845459
    4. 'digit' → logprob: -7.80087947845459
    5. 'g' → logprob: -10.55087947845459
    6. ')' → logprob: -12.67587947845459
    7. 'ight' → logprob: -13.17587947845459
    8. 't' → logprob: -13.17587947845459
    9. 'gt' → logprob: -13.92587947845459
    10. '.git' → logprob: -14.17587947845459

Token 73: '))
' (ID: 2210)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.001877351081930101
    2. ')
' → logprob: -6.376877307891846
    3. '))' → logprob: -8.751877784729004
    4. ')
' → logprob: -12.001877784729004
    5. '))
' → logprob: -12.001877784729004
    6. '   ' → logprob: -12.751877784729004
    7. ')

' → logprob: -14.626877784729004
    8. ' )' → logprob: -14.626877784729004
    9. ')`' → logprob: -15.501877784729004
    10. ')))' → logprob: -15.626877784729004

Token 74: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.036604221910238266
    2. ' return' → logprob: -3.536604166030884
    3. 'return' → logprob: -5.411604404449463
    4. ' (' → logprob: -6.411604404449463
    5. '(' → logprob: -7.786604404449463
    6. '	return' → logprob: -9.286603927612305
    7. '(return' → logprob: -9.536603927612305
    8. '(next' → logprob: -10.036603927612305
    9. ')' → logprob: -10.286603927612305
    10. '    
' → logprob: -10.411603927612305

Token 75: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.47653791308403015
    2. 'return' (adapté à ' return') → logprob: -0.9765379428863525
    3. '   ' → logprob: -6.351537704467773
    4. '(' → logprob: -7.976537704467773
    5. ' (' → logprob: -8.101537704467773
    6. '(return' → logprob: -10.476537704467773
    7. '(next' → logprob: -11.851537704467773
    8. ' next' → logprob: -12.101537704467773
    9. '
' → logprob: -12.351537704467773
    10. '    
' → logprob: -12.476537704467773

Token 76: ' (' (ID: 350)
  Prédit: '(next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(next' → logprob: -0.07894553244113922
    2. ' (' → logprob: -2.5789456367492676
    3. '(' → logprob: -10.82894515991211
    4. ' next' → logprob: -10.95394515991211
    5. 'next' → logprob: -11.45394515991211
    6. '[next' → logprob: -12.45394515991211
    7. '((' → logprob: -13.45394515991211
    8. '(n' → logprob: -13.95394515991211
    9. ' ' → logprob: -14.20394515991211
    10. '   ' → logprob: -15.70394515991211

Token 77: 'next' (ID: 7311)
  Prédit: 'next'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'next' → logprob: -0.008416350930929184
    2. '(next' → logprob: -5.258416175842285
    3. ' next' → logprob: -5.758416175842285
    4. '[next' → logprob: -11.133416175842285
    5. ',next' → logprob: -12.508416175842285
    6. ')' → logprob: -13.508416175842285
    7. '	next' → logprob: -14.008416175842285
    8. ' (' → logprob: -14.508416175842285
    9. '(' → logprob: -16.3834171295166
    10. 'Next' → logprob: -17.0084171295166

Token 78: '_x' (ID: 7054)
  Prédit: '_x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_x' → logprob: -3.128163257315464e-07
    2. '_step' → logprob: -15.75
    3. '_' → logprob: -16.625
    4. 'x' → logprob: -17.625
    5. '_next' → logprob: -19.625
    6. '```' → logprob: -22.125
    7. ')_' → logprob: -22.125
    8. ')' → logprob: -22.5
    9. '_xt' → logprob: -22.5
    10. '_s' → logprob: -22.875

Token 79: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.3663626305060461e-05
    2. ' ,' → logprob: -11.25001335144043
    3. 'acc' → logprob: -15.37501335144043
    4. ',
' → logprob: -16.25001335144043
    5. '(acc' → logprob: -16.50001335144043
    6. '`,' → logprob: -17.50001335144043
    7. '‌,' → logprob: -17.50001335144043
    8. ' acc' → logprob: -17.62501335144043
    9. ',

' → logprob: -17.87501335144043
    10. '

' → logprob: -18.12501335144043

Token 80: ' acc' (ID: 1259)
  Prédit: 'acc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'acc' → logprob: -0.061977315694093704
    2. ' acc' → logprob: -2.8119773864746094
    3. ' ' → logprob: -12.68697738647461
    4. '	acc' → logprob: -12.68697738647461
    5. '(acc' → logprob: -13.18697738647461
    6. 'ac' → logprob: -14.56197738647461
    7. ')' → logprob: -15.31197738647461
    8. '_acc' → logprob: -15.56197738647461
    9. ''acc' → logprob: -15.81197738647461
    10. '.acc' → logprob: -15.93697738647461

Token 81: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.5776860184123507e-06
    2. ')
' → logprob: -13.12500286102295
    3. ' )' → logprob: -15.50000286102295
    4. ')

' → logprob: -16.000001907348633
    5. ')return' → logprob: -16.250001907348633
    6. '))' → logprob: -17.375001907348633
    7. '<|end|>' → logprob: -18.250001907348633
    8. ')
' → logprob: -19.000001907348633
    9. ')))' → logprob: -19.125001907348633
    10. '),' → logprob: -19.125001907348633

Token 82: 'def' (ID: 1314)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.04441618546843529
    2. 'next' → logprob: -3.9194161891937256
    3. '(result' → logprob: -4.7944159507751465
    4. 'n' → logprob: -5.6694159507751465
    5. 'res' → logprob: -5.9194159507751465
    6. 'reduce' → logprob: -6.0444159507751465
    7. ')' → logprob: -6.4194159507751465
    8. '(n' → logprob: -6.6694159507751465
    9. '
' → logprob: -7.6694159507751465
    10. 'for' → logprob: -7.7944159507751465

Token 83: ' compute' (ID: 23864)
  Prédit: ' convert'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' convert' → logprob: -0.4737192392349243
    2. 'convert' → logprob: -1.2237192392349243
    3. 'to' → logprob: -3.7237191200256348
    4. ' to' → logprob: -4.223719120025635
    5. ' binary' → logprob: -4.473719120025635
    6. ' bin' → logprob: -4.848719120025635
    7. 'binary' → logprob: -5.348719120025635
    8. ' main' → logprob: -5.348719120025635
    9. ' solution' → logprob: -6.598719120025635
    10. ' fib' → logprob: -7.098719120025635

Token 84: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.179134801030159
    2. '(' → logprob: -2.3041348457336426
    3. '(result' → logprob: -3.5541348457336426
    4. '_result' → logprob: -4.054134845733643
    5. '(number' → logprob: -5.679134845733643
    6. '(x' → logprob: -5.804134845733643
    7. '_binary' → logprob: -6.429134845733643
    8. 'result' → logprob: -6.554134845733643
    9. '_' → logprob: -6.804134845733643
    10. '_next' → logprob: -6.804134845733643

Token 85: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.02339024469256401
    2. '):
' → logprob: -3.773390293121338
    3. ')' → logprob: -9.39838981628418
    4. '):
' → logprob: -10.14838981628418
    5. ':' → logprob: -11.27338981628418
    6. ' ):' → logprob: -12.14838981628418
    7. '):

' → logprob: -13.39838981628418
    8. '=' → logprob: -14.02338981628418
    9. ',' → logprob: -14.39838981628418
    10. '   ' → logprob: -14.77338981628418

Token 86: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05872383713722229
    2. ' return' → logprob: -3.0587239265441895
    3. ' result' → logprob: -5.4337239265441895
    4. 'return' → logprob: -5.8087239265441895
    5. ' reduce' → logprob: -7.0587239265441895
    6. 'result' → logprob: -7.6837239265441895
    7. ' pair' → logprob: -7.8087239265441895
    8. 'reduce' → logprob: -8.058723449707031
    9. ' if' → logprob: -8.683723449707031
    10. ' for' → logprob: -8.933723449707031

Token 87: ' if' (ID: 538)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.27798306941986084
    2. '   ' → logprob: -2.2779831886291504
    3. 'reduce' → logprob: -2.9029831886291504
    4. ' return' → logprob: -3.0279831886291504
    5. 'result' → logprob: -3.5279831886291504
    6. ' reduce' → logprob: -6.02798318862915
    7. ' result' → logprob: -6.40298318862915
    8. 'pair' → logprob: -6.90298318862915
    9. 'if' (adapté à ' if') → logprob: -7.52798318862915
    10. 'res' → logprob: -7.77798318862915

Token 88: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.02630099281668663
    2. ' n' → logprob: -3.6513009071350098
    3. '	n' → logprob: -15.526301383972168
    4. ' ' → logprob: -15.776301383972168
    5. ')n' → logprob: -15.901301383972168
    6. '0' → logprob: -16.27630043029785
    7. '(n' → logprob: -16.65130043029785
    8. '   ' → logprob: -16.77630043029785
    9. 'not' → logprob: -17.27630043029785
    10. ')' → logprob: -17.40130043029785

Token 89: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.6377782225608826
    2. ' ==' → logprob: -0.7627782225608826
    3. '<' → logprob: -6.012778282165527
    4. ' <' → logprob: -6.262778282165527
    5. '<=' → logprob: -7.887778282165527
    6. ' <=' → logprob: -8.387778282165527
    7. '=' → logprob: -9.512778282165527
    8. ' ' → logprob: -9.762778282165527
    9. '>' → logprob: -11.137778282165527
    10. ')' → logprob: -11.450278282165527

Token 90: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.038061000406742096
    2. ' ' → logprob: -3.2880609035491943
    3. '   ' → logprob: -11.913061141967773
    4. '-' → logprob: -12.663061141967773
    5. ')' → logprob: -13.413061141967773
    6. '```' → logprob: -13.413061141967773
    7. '  ' → logprob: -13.725561141967773
    8. '۰' → logprob: -14.475561141967773
    9. '    ' → logprob: -14.600561141967773
    10. '1' → logprob: -14.913061141967773

Token 91: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00012689977302215993
    2. ' ' → logprob: -9.000126838684082
    3. '-' → logprob: -14.125126838684082
    4. ')' → logprob: -14.250126838684082
    5. '۰' → logprob: -14.812626838684082
    6. '1' → logprob: -15.000126838684082
    7. '```' → logprob: -15.750126838684082
    8. '   ' → logprob: -15.875126838684082
    9. '०' → logprob: -16.3126277923584
    10. '০' → logprob: -16.7501277923584

Token 92: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.019148822873830795
    2. ':
' → logprob: -4.144148826599121
    3. ':return' → logprob: -6.019148826599121
    4. '   ' → logprob: -7.644148826599121
    5. '):' → logprob: -9.394148826599121
    6. ' :' → logprob: -9.769148826599121
    7. ')' → logprob: -10.769148826599121
    8. '):
' → logprob: -11.394148826599121
    9. ' :
' → logprob: -11.769148826599121
    10. '    ' → logprob: -12.269148826599121

Token 93: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15832428634166718
    2. 'return' → logprob: -2.9083242416381836
    3. ' return' → logprob: -3.0333242416381836
    4. ':' → logprob: -3.7833242416381836
    5. ':return' → logprob: -4.658324241638184
    6. ':
' → logprob: -6.158324241638184
    7. '[]' → logprob: -6.158324241638184
    8. '       ' → logprob: -6.283324241638184
    9. '    
' → logprob: -6.658324241638184
    10. '[' → logprob: -7.283324241638184

Token 94: ' print' (ID: 2123)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.28462472558021545
    2. 'return' → logprob: -1.409624695777893
    3. '   ' → logprob: -5.7846245765686035
    4. 'result' → logprob: -8.409625053405762
    5. ' ' → logprob: -10.534625053405762
    6. ' result' → logprob: -10.659625053405762
    7. ':return' → logprob: -10.909625053405762
    8. '	return' → logprob: -11.159625053405762
    9. '['' → logprob: -11.409625053405762
    10. '    ' → logprob: -11.659625053405762

Token 95: '(' (ID: 7)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.13802358508110046
    2. '("' → logprob: -2.138023614883423
    3. '(' → logprob: -4.513023376464844
    4. ''' → logprob: -10.263023376464844
    5. '0' → logprob: -10.888023376464844
    6. '"' → logprob: -11.763023376464844
    7. ' ('' → logprob: -12.638023376464844
    8. ' ("' → logprob: -13.263023376464844
    9. ' (' → logprob: -14.013023376464844
    10. '("'' → logprob: -14.138023376464844

Token 96: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.2572505474090576
    2. ''' → logprob: -2.0072505474090576
    3. '"' → logprob: -2.3822505474090576
    4. ' ' → logprob: -10.132250785827637
    5. '[' → logprob: -10.132250785827637
    6. ')' → logprob: -10.882250785827637
    7. '1' → logprob: -11.632250785827637
    8. '   ' → logprob: -12.757250785827637
    9. '['' → logprob: -12.882250785827637
    10. ' '' → logprob: -13.382250785827637

Token 97: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.38827329874038696
    2. ')' → logprob: -1.1382732391357422
    3. '   ' → logprob: -7.013273239135742
    4. ')
' → logprob: -7.763273239135742
    5. ' )
' → logprob: -11.263273239135742
    6. ')return' → logprob: -11.263273239135742
    7. '")' → logprob: -11.388273239135742
    8. ' ' → logprob: -11.888273239135742
    9. ' )' → logprob: -11.888273239135742
    10. '")
' → logprob: -12.138273239135742

Token 98: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18872612714767456
    2. '
' → logprob: -1.8137261867523193
    3. '    
' → logprob: -5.06372594833374
    4. '<|end|>' → logprob: -6.43872594833374
    5. ' else' → logprob: -7.81372594833374
    6. ')' → logprob: -8.438726425170898
    7. '<|end|>' → logprob: -9.563726425170898
    8. 'else' → logprob: -10.063726425170898
    9. ',' → logprob: -10.188726425170898
    10. '  
' → logprob: -10.313726425170898

Token 99: ' return' (ID: 622)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.19146311283111572
    2. 'return' (adapté à ' return') → logprob: -2.191462993621826
    3. ' return' → logprob: -3.066462993621826
    4. '   ' → logprob: -4.191462993621826
    5. '
' → logprob: -8.066463470458984
    6. '	return' → logprob: -8.691463470458984
    7. ' ' → logprob: -9.066463470458984
    8. 'eturn' → logprob: -9.566463470458984
    9. ':return' → logprob: -11.191463470458984
    10. '    
' → logprob: -11.191463470458984

Token 100: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5925471782684326
    2. '   ' → logprob: -0.9675471782684326
    3. '    
' → logprob: -3.3425471782684326
    4. ' result' → logprob: -4.217547416687012
    5. 'result' → logprob: -5.092547416687012
    6. ' 
' → logprob: -5.342547416687012
    7. '  
' → logprob: -6.342547416687012
    8. ' ' → logprob: -7.217547416687012
    9. '\n' → logprob: -7.342547416687012
    10. 'n' → logprob: -7.592547416687012

Token 101: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.015618894249200821
    2. '    
' → logprob: -5.265618801116943
    3. ' result' → logprob: -5.390618801116943
    4. 'result' → logprob: -6.390618801116943
    5. ' for' → logprob: -6.640618801116943
    6. '
' → logprob: -7.265618801116943
    7. ' pair' → logprob: -7.640618801116943
    8. ' (' → logprob: -7.765618801116943
    9. 'n' → logprob: -8.390619277954102
    10. 'for' → logprob: -9.140619277954102

Token 102: ' state' (ID: 2608)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5895221829414368
    2. 'result' → logprob: -1.464522123336792
    3. 'pair' → logprob: -2.589522123336792
    4. ' result' → logprob: -3.214522123336792
    5. ' pair' → logprob: -3.589522123336792
    6. 'return' → logprob: -4.214522361755371
    7. ' for' → logprob: -4.714522361755371
    8. 'for' → logprob: -4.714522361755371
    9. 'acc' → logprob: -4.964522361755371
    10. ' return' → logprob: -5.214522361755371

Token 103: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0059771426022052765
    2. '=' → logprob: -5.130977153778076
    3. ',' → logprob: -10.005976676940918
    4. ')' → logprob: -13.505976676940918
    5. ' =
' → logprob: -14.380976676940918
    6. ' ' → logprob: -14.755976676940918
    7. 's' → logprob: -14.755976676940918
    8. ' =(' → logprob: -15.380976676940918
    9. '  ' → logprob: -16.005977630615234
    10. '_' → logprob: -16.505977630615234

Token 104: ' (' (ID: 350)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.16029155254364014
    2. ' (' → logprob: -1.9102915525436401
    3. '(' → logprob: -9.91029167175293
    4. '   ' → logprob: -11.66029167175293
    5. '(next' → logprob: -12.41029167175293
    6. '((' → logprob: -13.03529167175293
    7. 'n' → logprob: -13.78529167175293
    8. ')' → logprob: -14.53529167175293
    9. ' n' → logprob: -14.91029167175293
    10. ' ' → logprob: -15.66029167175293

Token 105: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -8.470901229884475e-05
    2. ' n' → logprob: -9.50008487701416
    3. '   ' → logprob: -12.00008487701416
    4. ')n' → logprob: -13.25008487701416
    5. '(n' → logprob: -14.50008487701416
    6. ')' → logprob: -14.87508487701416
    7. '	n' → logprob: -15.25008487701416
    8. 'abs' → logprob: -15.62508487701416
    9. '[n' → logprob: -16.125083923339844
    10. ',n' → logprob: -16.375083923339844

Token 106: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -4.727905979962088e-05
    2. ',result' → logprob: -11.25004768371582
    3. ' ,' → logprob: -11.37504768371582
    4. '[],' → logprob: -11.87504768371582
    5. ',[' → logprob: -12.12504768371582
    6. ',
' → logprob: -13.00004768371582
    7. ',)' → logprob: -13.25004768371582
    8. '),' → logprob: -13.62504768371582
    9. '[]' → logprob: -13.75004768371582
    10. ')' → logprob: -14.25004768371582

Token 107: ' [])
' (ID: 64395)
  Prédit: '[])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[])' → logprob: -0.1261800229549408
    2. ' [])' → logprob: -2.2511799335479736
    3. '[]' → logprob: -4.501180171966553
    4. ')' → logprob: -7.001180171966553
    5. '[])
' → logprob: -7.251180171966553
    6. 'result' → logprob: -8.751179695129395
    7. ' []' → logprob: -8.876179695129395
    8. '[]
' → logprob: -9.126179695129395
    9. ' [])
' → logprob: -10.376179695129395
    10. ' result' → logprob: -10.376179695129395

Token 108: '   ' (ID: 271)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.0435575395822525
    2. ' while' → logprob: -3.793557643890381
    3. '   ' → logprob: -4.043557643890381
    4. '
' → logprob: -6.168557643890381
    5. '	while' → logprob: -8.918557167053223
    6. '    
' → logprob: -8.918557167053223
    7. '<|end|>' → logprob: -9.043557167053223
    8. 'While' → logprob: -10.793557167053223
    9. '```' → logprob: -10.793557167053223
    10. ')' → logprob: -11.168557167053223

Token 109: ' while' (ID: 2049)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' (adapté à ' while') → logprob: -0.002014048397541046
    2. ' while' → logprob: -6.25201416015625
    3. '   ' → logprob: -9.50201416015625
    4. 'state' → logprob: -12.37701416015625
    5. '    
' → logprob: -12.87701416015625
    6. '
' → logprob: -12.87701416015625
    7. 'While' → logprob: -14.62701416015625
    8. '```' → logprob: -15.00201416015625
    9. ' 
' → logprob: -15.62701416015625
    10. 'for' → logprob: -15.75201416015625

Token 110: ' state' (ID: 2608)
  Prédit: 'state'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'state' → logprob: -0.021523237228393555
    2. ' state' → logprob: -3.8965232372283936
    3. ' True' → logprob: -7.521523475646973
    4. 'True' → logprob: -7.771523475646973
    5. '(state' → logprob: -11.646523475646973
    6. '	state' → logprob: -12.896523475646973
    7. '   ' → logprob: -13.146523475646973
    8. ' ' → logprob: -13.771523475646973
    9. '(True' → logprob: -14.146523475646973
    10. 'n' → logprob: -14.834023475646973

Token 111: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.6058842539787292
    2. ' =' → logprob: -0.9808842539787292
    3. '=' → logprob: -2.605884313583374
    4. ' !=' → logprob: -5.730884075164795
    5. ' :=' → logprob: -6.730884075164795
    6. '!=' → logprob: -7.105884075164795
    7. ' [' → logprob: -9.105884552001953
    8. ':=' → logprob: -9.480884552001953
    9. '0' → logprob: -9.730884552001953
    10. ' ' → logprob: -10.855884552001953

Token 112: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -3.0948158382670954e-05
    2. '1' → logprob: -10.500030517578125
    3. ' ' → logprob: -13.625030517578125
    4. '   ' → logprob: -15.000030517578125
    5. '
' → logprob: -15.187530517578125
    6. '[' → logprob: -15.312530517578125
    7. '```' → logprob: -15.437530517578125
    8. ')' → logprob: -15.812530517578125
    9. 'x' → logprob: -16.437530517578125
    10. '

' → logprob: -16.562530517578125

Token 113: ']' (ID: 60)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.9257241487503052
    2. '!=' → logprob: -1.0507241487503052
    3. ' !=' → logprob: -1.6757241487503052
    4. ']' → logprob: -3.5507240295410156
    5. ')!=' → logprob: -4.050724029541016
    6. '>' → logprob: -4.425724029541016
    7. ']!=' → logprob: -4.800724029541016
    8. ' )' → logprob: -8.800724029541016
    9. ')>' → logprob: -9.175724029541016
    10. ' >' → logprob: -9.925724029541016

Token 114: ' !=' (ID: 1666)
  Prédit: '!='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '!=' → logprob: -0.012651734054088593
    2. ' !=' → logprob: -4.3876519203186035
    3. '>' → logprob: -9.012651443481445
    4. ':' → logprob: -11.887651443481445
    5. '!' → logprob: -12.887651443481445
    6. '!=-' → logprob: -12.887651443481445
    7. ')!=' → logprob: -13.012651443481445
    8. '!==' → logprob: -13.387651443481445
    9. '()!=' → logprob: -13.762651443481445
    10. '!=(' → logprob: -14.012651443481445

Token 115: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.054890185594558716
    2. ' ' → logprob: -2.9298901557922363
    3. '   ' → logprob: -12.804890632629395
    4. '  ' → logprob: -12.804890632629395
    5. '    ' → logprob: -14.304890632629395
    6. ')' → logprob: -14.992390632629395
    7. '۰' → logprob: -15.554890632629395
    8. '```' → logprob: -15.617390632629395
    9. '1' → logprob: -15.742390632629395
    10. '     ' → logprob: -16.117389678955078

Token 116: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0001093841710826382
    2. ' ' → logprob: -9.125109672546387
    3. '   ' → logprob: -16.12510871887207
    4. '  ' → logprob: -16.43760871887207
    5. '۰' → logprob: -16.56260871887207
    6. '1' → logprob: -17.87510871887207
    7. '    ' → logprob: -17.93760871887207
    8. ')' → logprob: -17.93760871887207
    9. '```' → logprob: -18.31260871887207
    10. '０' → logprob: -18.62510871887207

Token 117: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.012936200946569443
    2. ':
' → logprob: -4.387936115264893
    3. '):' → logprob: -8.13793659210205
    4. ',' → logprob: -9.63793659210205
    5. '):
' → logprob: -10.26293659210205
    6. '   ' → logprob: -11.26293659210205
    7. ')' → logprob: -11.51293659210205
    8. ' :' → logprob: -12.13793659210205
    9. '=' → logprob: -12.51293659210205
    10. ' :
' → logprob: -14.26293659210205

Token 118: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.004385729320347309
    2. ' state' → logprob: -6.254385948181152
    3. 'state' → logprob: -6.504385948181152
    4. '   ' → logprob: -7.379385948181152
    5. '
' → logprob: -8.254385948181152
    6. ',' → logprob: -11.504385948181152
    7. '```' → logprob: -12.004385948181152
    8. ',state' → logprob: -12.129385948181152
    9. ' ' → logprob: -12.254385948181152
    10. '        
' → logprob: -12.254385948181152

Token 119: ' state' (ID: 2608)
  Prédit: 'state'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'state' (adapté à ' state') → logprob: -0.4779026508331299
    2. ' state' → logprob: -0.9779026508331299
    3. '       ' → logprob: -5.852902412414551
    4. '   ' → logprob: -6.977902412414551
    5. '	state' → logprob: -11.60290241241455
    6. ' ' → logprob: -13.35290241241455
    7. ',state' → logprob: -14.10290241241455
    8. '(state' → logprob: -14.22790241241455
    9. '_state' → logprob: -14.47790241241455
    10. '    ' → logprob: -14.72790241241455

Token 120: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5759409070014954
    2. ' =' → logprob: -0.8259409070014954
    3. ',' → logprob: -14.20094108581543
    4. '=

' → logprob: -15.20094108581543
    5. '＝' → logprob: -15.32594108581543
    6. ' =)' → logprob: -16.57594108581543
    7. ')' → logprob: -16.70094108581543
    8. ' ' → logprob: -17.20094108581543
    9. ')=' → logprob: -17.20094108581543
    10. ' =
' → logprob: -17.95094108581543

Token 121: ' next' (ID: 2613)
  Prédit: 'next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'next' → logprob: -0.575941264629364
    2. ' next' → logprob: -0.825941264629364
    3. '(next' → logprob: -13.70094108581543
    4. '	next' → logprob: -14.82594108581543
    5. '   ' → logprob: -15.32594108581543
    6. '.next' → logprob: -17.32594108581543
    7. '[next' → logprob: -17.95094108581543
    8. ' ' → logprob: -18.07594108581543
    9. '_next' → logprob: -19.45094108581543
    10. 'Next' → logprob: -19.82594108581543

Token 122: '_step' (ID: 27360)
  Prédit: '_step'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_step' → logprob: -4.723352049040841e-06
    2. '_state' → logprob: -12.375004768371582
    3. '_steps' → logprob: -15.625004768371582
    4. '_' → logprob: -15.875004768371582
    5. '_s' → logprob: -17.375003814697266
    6. '_line' → logprob: -17.375003814697266
    7. '_STEP' → logprob: -18.000003814697266
    8. '_token' → logprob: -18.500003814697266
    9. ' _' → logprob: -18.625003814697266
    10. ')_' → logprob: -19.000003814697266

Token 123: '(state' (ID: 16114)
  Prédit: '(state'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(state' → logprob: -5.919942486798391e-05
    2. '(' → logprob: -9.750059127807617
    3. 'state' → logprob: -15.250059127807617
    4. '(
' → logprob: -15.250059127807617
    5. ' (' → logprob: -15.500059127807617
    6. '(states' → logprob: -17.000059127807617
    7. '(stat' → logprob: -17.250059127807617
    8. ',state' → logprob: -17.500059127807617
    9. '(step' → logprob: -18.250059127807617
    10. '(st' → logprob: -18.375059127807617

Token 124: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.796184723294573e-06
    2. ')
' → logprob: -12.125005722045898
    3. ' )' → logprob: -15.125005722045898
    4. ')

' → logprob: -16.7500057220459
    5. ')`' → logprob: -17.5000057220459
    6. '   ' → logprob: -19.0000057220459
    7. '))' → logprob: -19.1250057220459
    8. ')return' → logprob: -19.2500057220459
    9. ')
' → logprob: -19.7500057220459
    10. ' ' → logprob: -20.0000057220459

Token 125: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03981870040297508
    2. 'print' → logprob: -3.78981876373291
    3. ' print' → logprob: -4.28981876373291
    4. 'result' → logprob: -6.41481876373291
    5. ' result' → logprob: -7.28981876373291
    6. '```' → logprob: -9.03981876373291
    7. '    
' → logprob: -9.41481876373291
    8. '
' → logprob: -9.53981876373291
    9. ' return' → logprob: -10.16481876373291
    10. 'return' → logprob: -10.41481876373291

Token 126: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.020529983565211296
    2. ' print' → logprob: -4.145529747009277
    3. '   ' → logprob: -5.520529747009277
    4. 'result' → logprob: -7.770529747009277
    5. ' result' → logprob: -10.895529747009277
    6. '    
' → logprob: -11.395529747009277
    7. 'acc' → logprob: -12.020529747009277
    8. '```' → logprob: -12.145529747009277
    9. ' ' → logprob: -12.270529747009277
    10. '
' → logprob: -12.395529747009277

Token 127: ' Re' (ID: 907)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.03260086849331856
    2. ' print' → logprob: -3.5326008796691895
    3. '   ' → logprob: -6.5326008796691895
    4. 'result' → logprob: -6.7826008796691895
    5. ' result' → logprob: -8.907600402832031
    6. 'binary' → logprob: -9.782600402832031
    7. 'res' → logprob: -11.282600402832031
    8. 'state' → logprob: -11.782600402832031
    9. ' binary' → logprob: -11.782600402832031
    10. 'acc' → logprob: -11.782600402832031

Token 128: 'vers' (ID: 3674)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.01793089136481285
    2. 'turn' → logprob: -4.26793098449707
    3. ' s' → logprob: -6.26793098449707
    4. 'verse' → logprob: -6.64293098449707
    5. '   ' → logprob: -7.76793098449707
    6. ' ' → logprob: -10.64293098449707
    7. '    ' → logprob: -10.89293098449707
    8. ' turn' → logprob: -11.01793098449707
    9. 'solve' → logprob: -11.01793098449707
    10. '  ' → logprob: -11.14293098449707

Token 129: 'ing' (ID: 289)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.0008793042507022619
    2. 'se' → logprob: -7.250879287719727
    3. 'ed' → logprob: -9.000879287719727
    4. 'ing' → logprob: -11.000879287719727
    5. 'state' → logprob: -11.625879287719727
    6. 'es' → logprob: -11.750879287719727
    7. ' e' → logprob: -12.375879287719727
    8. 'sed' → logprob: -13.125879287719727
    9. '   ' → logprob: -13.375879287719727
    10. '```' → logprob: -13.375879287719727

Token 130: ' with' (ID: 483)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.08753977715969086
    2. ' result' → logprob: -3.2125396728515625
    3. 'print' → logprob: -3.7125396728515625
    4. 'state' → logprob: -4.2125396728515625
    5. 'acc' → logprob: -6.8375396728515625
    6. '()' → logprob: -6.8375396728515625
    7. '   ' → logprob: -7.0875396728515625
    8. ' print' → logprob: -8.087539672851562
    9. '(result' → logprob: -8.337539672851562
    10. ' state' → logprob: -8.337539672851562

Token 131: ' reduce' (ID: 10389)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.7616721987724304
    2. 'state' → logprob: -0.8866721987724304
    3. '''.' → logprob: -2.636672258377075
    4. '"' → logprob: -4.386672019958496
    5. ' state' → logprob: -5.011672019958496
    6. ' ''.' → logprob: -5.511672019958496
    7. 're' → logprob: -5.511672019958496
    8. 'lambda' → logprob: -5.511672019958496
    9. 'reduce' → logprob: -5.886672019958496
    10. 'reverse' → logprob: -5.886672019958496

Token 132: ' just' (ID: 1327)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.08841682225465775
    2. 'print' → logprob: -3.213416814804077
    3. ' result' → logprob: -4.213417053222656
    4. '(result' → logprob: -4.338417053222656
    5. '(' → logprob: -5.463417053222656
    6. '(lambda' → logprob: -5.463417053222656
    7. '   ' → logprob: -6.088417053222656
    8. ' print' → logprob: -6.588417053222656
    9. 'state' → logprob: -7.088417053222656
    10. '(acc' → logprob: -7.088417053222656

Token 133: ' for' (ID: 395)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -1.1620473861694336
    2. ' result' → logprob: -1.6620473861694336
    3. '(lambda' → logprob: -1.7870473861694336
    4. '(' → logprob: -2.6620473861694336
    5. 'reduce' → logprob: -2.9120473861694336
    6. 'print' → logprob: -3.2870473861694336
    7. '(result' → logprob: -3.6620473861694336
    8. 'reverse' → logprob: -3.6620473861694336
    9. 'lambda' → logprob: -4.162047386169434
    10. 'append' → logprob: -4.787047386169434

Token 134: ' fun' (ID: 2827)
  Prédit: 'fun'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fun' → logprob: -1.0891754627227783
    2. ' fun' → logprob: -1.9641754627227783
    3. 'conc' → logprob: -2.3391754627227783
    4. ' practice' → logprob: -2.4641754627227783
    5. 'dem' → logprob: -2.7141754627227783
    6. 'lambda' → logprob: -2.8391754627227783
    7. ' conc' → logprob: -2.9641754627227783
    8. ' demonstration' → logprob: -3.4641754627227783
    9. 'practice' → logprob: -3.7141754627227783
    10. ' lambda' → logprob: -4.589175224304199

Token 135: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6444844603538513
    2. 'result' → logprob: -1.144484519958496
    3. ' result' → logprob: -3.019484519958496
    4. 'print' → logprob: -3.269484519958496
    5. ' print' → logprob: -3.769484519958496
    6. ')' → logprob: -3.894484519958496
    7. ',' → logprob: -4.269484519958496
    8. ')
' → logprob: -5.144484519958496
    9. ',
' → logprob: -6.769484519958496
    10. 'output' → logprob: -7.019484519958496

Token 136: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9883785247802734
    2. ' print' → logprob: -1.1133785247802734
    3. ' result' → logprob: -1.9883785247802734
    4. 'result' → logprob: -2.3633785247802734
    5. 'print' → logprob: -2.7383785247802734
    6. ' res' → logprob: -7.363378524780273
    7. ' output' → logprob: -7.488378524780273
    8. ' reverse' → logprob: -8.113378524780273
    9. 'res' → logprob: -8.238378524780273
    10. 're' → logprob: -8.238378524780273

Token 137: ' rev' (ID: 10808)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.7880085110664368
    2. 'print' → logprob: -1.038008451461792
    3. 'binary' → logprob: -2.663008451461792
    4. '   ' → logprob: -3.288008451461792
    5. 'res' → logprob: -3.788008451461792
    6. 're' → logprob: -3.913008451461792
    7. ' print' → logprob: -4.038008689880371
    8. ' result' → logprob: -4.538008689880371
    9. 'number' → logprob: -5.788008689880371
    10. 'state' → logprob: -6.413008689880371

Token 138: ' =' (ID: 314)
  Prédit: 'erse'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'erse' → logprob: -1.078456163406372
    2. 'ers' → logprob: -1.453456163406372
    3. '_result' → logprob: -2.078456163406372
    4. ' =' → logprob: -2.203456163406372
    5. 'result' → logprob: -2.453456163406372
    6. 'res' → logprob: -3.703456163406372
    7. '=' → logprob: -4.203455924987793
    8. '   ' → logprob: -4.453455924987793
    9. 'er' → logprob: -4.453455924987793
    10. '_state' → logprob: -5.078455924987793

Token 139: ' reduce' (ID: 10389)
  Prédit: 'reduce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'reduce' → logprob: -0.3896578550338745
    2. ' reduce' → logprob: -1.1396578550338745
    3. ' ''.' → logprob: -7.014657974243164
    4. '   ' → logprob: -7.639657974243164
    5. 're' → logprob: -7.764657974243164
    6. ' "".' → logprob: -8.389657974243164
    7. '''.' → logprob: -8.514657974243164
    8. 'reverse' → logprob: -8.889657974243164
    9. 'list' → logprob: -9.264657974243164
    10. ' list' → logprob: -9.264657974243164

Token 140: '(lambda' (ID: 43341)
  Prédit: '(lambda'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.47450754046440125
    2. '(add' → logprob: -0.9745075702667236
    3. '(' → logprob: -8.099507331848145
    4. '(re' → logprob: -10.099507331848145
    5. '(str' → logprob: -10.474507331848145
    6. 'lambda' → logprob: -10.974507331848145
    7. '(reverse' → logprob: -11.349507331848145
    8. 'add' → logprob: -11.849507331848145
    9. '(operator' → logprob: -11.974507331848145
    10. '```' → logprob: -12.349507331848145

Token 141: ' x' (ID: 1215)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'lambda' → logprob: -0.11690828949213028
    2. ' lambda' → logprob: -2.241908311843872
    3. '(lambda' → logprob: -5.866908073425293
    4. 'acc' → logprob: -7.491908073425293
    5. ' acc' → logprob: -7.741908073425293
    6. '   ' → logprob: -8.866908073425293
    7. ' ' → logprob: -10.491908073425293
    8. 'add' → logprob: -10.616908073425293
    9. '  ' → logprob: -11.241908073425293
    10. '=lambda' → logprob: -11.366908073425293

Token 142: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.10753250867128372
    2. 'lambda' → logprob: -2.357532501220703
    3. ' lambda' → logprob: -5.482532501220703
    4. 'acc' → logprob: -7.107532501220703
    5. '=lambda' → logprob: -7.357532501220703
    6. 'a' → logprob: -7.357532501220703
    7. '(lambda' → logprob: -7.982532501220703
    8. ' ,' → logprob: -8.732532501220703
    9. ' acc' → logprob: -8.982532501220703
    10. '   ' → logprob: -9.232532501220703

Token 143: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.035800911486148834
    2. 'lambda' → logprob: -3.7858009338378906
    3. ' y' → logprob: -5.160800933837891
    4. 'acc' → logprob: -5.285800933837891
    5. ' lambda' → logprob: -6.660800933837891
    6. ' acc' → logprob: -9.03580093383789
    7. '   ' → logprob: -9.53580093383789
    8. '(lambda' → logprob: -9.66080093383789
    9. 'add' → logprob: -10.28580093383789
    10. 'yll' → logprob: -10.91080093383789

Token 144: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00399731146171689
    2. ',' → logprob: -6.753997325897217
    3. ',y' → logprob: -7.003997325897217
    4. '=lambda' → logprob: -7.378997325897217
    5. 'y' → logprob: -7.878997325897217
    6. 'lambda' → logprob: -8.378996849060059
    7. ':y' → logprob: -8.503996849060059
    8. ' y' → logprob: -8.628996849060059
    9. ' :' → logprob: -9.378996849060059
    10. '=' → logprob: -9.628996849060059

Token 145: ' [' (ID: 723)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.009409310296177864
    2. ' y' → logprob: -5.259409427642822
    3. 'lambda' → logprob: -5.884409427642822
    4. ' lambda' → logprob: -7.384409427642822
    5. 'ys' → logprob: -8.759408950805664
    6. '(lambda' → logprob: -8.759408950805664
    7. 'yll' → logprob: -9.009408950805664
    8. 'yl' → logprob: -9.634408950805664
    9. 'yly' → logprob: -9.634408950805664
    10. '=lambda' → logprob: -10.009408950805664

Token 146: 'y' (ID: 88)
  Prédit: 'y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.0020499820820987225
    2. ' y' → logprob: -6.627049922943115
    3. ']' → logprob: -7.627049922943115
    4. '*y' → logprob: -9.752050399780273
    5. 'str' → logprob: -10.252050399780273
    6. '(y' → logprob: -10.627050399780273
    7. '[y' → logprob: -10.877050399780273
    8. '*' → logprob: -11.127050399780273
    9. '   ' → logprob: -11.127050399780273
    10. ' ' → logprob: -11.252050399780273

Token 147: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.03804860636591911
    2. ']+' → logprob: -3.288048505783081
    3. ' ]' → logprob: -12.41304874420166
    4. ']+=' → logprob: -13.28804874420166
    5. '+' → logprob: -14.16304874420166
    6. '+]' → logprob: -16.288047790527344
    7. ']*' → logprob: -16.413047790527344
    8. '+x' → logprob: -16.663047790527344
    9. '*' → logprob: -16.788047790527344
    10. '
' → logprob: -17.288047790527344

Token 148: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.6374866366386414
    2. '+' → logprob: -0.7624866366386414
    3. '+x' → logprob: -5.387486457824707
    4. '(x' → logprob: -10.012486457824707
    5. '+[' → logprob: -10.262486457824707
    6. '   ' → logprob: -10.387486457824707
    7. ']+' → logprob: -10.387486457824707
    8. '+y' → logprob: -10.512486457824707
    9. '[x' → logprob: -10.637486457824707
    10. ',' → logprob: -10.762486457824707

Token 149: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -4.5491004129871726e-05
    2. ' x' → logprob: -10.000045776367188
    3. ')x' → logprob: -20.000045776367188
    4. '(x' → logprob: -21.625045776367188
    5. '	x' → logprob: -21.750045776367188
    6. '[x' → logprob: -21.875045776367188
    7. '{x' → logprob: -22.250045776367188
    8. '   ' → logprob: -23.125045776367188
    9. '[' → logprob: -23.250045776367188
    10. ' ' → logprob: -23.375045776367188

Token 150: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0009951756801456213
    2. ' ,' → logprob: -7.62599515914917
    3. ',state' → logprob: -7.75099515914917
    4. ',result' → logprob: -9.875995635986328
    5. ')' → logprob: -12.000995635986328
    6. '   ' → logprob: -12.000995635986328
    7. '),' → logprob: -12.125995635986328
    8. 'state' → logprob: -12.500995635986328
    9. ',
' → logprob: -14.125995635986328
    10. 'result' → logprob: -14.500995635986328

Token 151: ' state' (ID: 2608)
  Prédit: 'state'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'state' → logprob: -0.055287763476371765
    2. ' state' → logprob: -2.9302878379821777
    3. '   ' → logprob: -8.43028736114502
    4. 'result' → logprob: -8.68028736114502
    5. '    ' → logprob: -12.55528736114502
    6. '       ' → logprob: -12.55528736114502
    7. ' result' → logprob: -12.68028736114502
    8. ' ' → logprob: -13.30528736114502
    9. '           ' → logprob: -13.68028736114502
    10. ')' → logprob: -13.68028736114502

Token 152: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0001294030516874045
    2. '1' → logprob: -9.000129699707031
    3. '```' → logprob: -13.250129699707031
    4. '[-' → logprob: -14.125129699707031
    5. '(' → logprob: -14.375129699707031
    6. ' [' → logprob: -14.375129699707031
    7. '[
' → logprob: -14.875129699707031
    8. '][' → logprob: -15.000129699707031
    9. ']' → logprob: -15.250129699707031
    10. ',' → logprob: -15.625129699707031

Token 153: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -4.930552313453518e-05
    2. '[' → logprob: -10.375049591064453
    3. '```' → logprob: -11.875049591064453
    4. '
' → logprob: -12.250049591064453
    5. '-' → logprob: -13.375049591064453
    6. ']' → logprob: -13.750049591064453
    7. '   ' → logprob: -14.500049591064453
    8. '0' → logprob: -14.500049591064453
    9. ' ' → logprob: -15.000049591064453
    10. '(' → logprob: -15.187549591064453

Token 154: '],' (ID: 2155)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.2527191638946533
    2. '],' → logprob: -1.8777191638946533
    3. ',' → logprob: -2.7527191638946533
    4. ' ])' → logprob: -6.252718925476074
    5. ')' → logprob: -6.627718925476074
    6. '),' → logprob: -7.002718925476074
    7. ']' → logprob: -7.002718925476074
    8. '][' → logprob: -8.377718925476074
    9. '[::-' → logprob: -8.502718925476074
    10. ' ,' → logprob: -8.502718925476074

Token 155: ' [])
' (ID: 64395)
  Prédit: '[])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[])' → logprob: -0.008657476864755154
    2. '[]' → logprob: -4.758657455444336
    3. ' [])' → logprob: -10.383657455444336
    4. '[])
' → logprob: -12.008657455444336
    5. ')' → logprob: -12.258657455444336
    6. '[]
' → logprob: -14.258657455444336
    7. '[]):' → logprob: -16.008657455444336
    8. '[]

' → logprob: -16.008657455444336
    9. '[]}' → logprob: -16.258657455444336
    10. '[' → logprob: -16.508657455444336

Token 156: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.44732221961021423
    2. 'print' → logprob: -1.0723222494125366
    3. ' print' → logprob: -4.197322368621826
    4. 'result' → logprob: -5.947322368621826
    5. 'return' → logprob: -7.822322368621826
    6. ')' → logprob: -8.447321891784668
    7. ' result' → logprob: -10.322321891784668
    8. ' return' → logprob: -10.572321891784668
    9. 'rev' → logprob: -10.947321891784668
    10. '    
' → logprob: -11.322321891784668

Token 157: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.03836459666490555
    2. ' print' → logprob: -3.9133646488189697
    3. '   ' → logprob: -4.038364410400391
    4. 'result' → logprob: -10.91336441040039
    5. '```' → logprob: -12.28836441040039
    6. '  ' → logprob: -12.66336441040039
    7. 'rev' → logprob: -13.16336441040039
    8. '    
' → logprob: -13.28836441040039
    9. 'return' → logprob: -13.28836441040039
    10. 'for' → logprob: -13.53836441040039

Token 158: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.04089415445923805
    2. '("' → logprob: -3.2908942699432373
    3. '(' → logprob: -5.915894031524658
    4. '(int' → logprob: -9.040894508361816
    5. ' (' → logprob: -11.290894508361816
    6. '''.' → logprob: -11.915894508361816
    7. '(
' → logprob: -13.040894508361816
    8. '('').' → logprob: -13.415894508361816
    9. '(""' → logprob: -13.665894508361816
    10. '(('' → logprob: -13.790894508361816

Token 159: ''.' (ID: 6120)
  Prédit: '''.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '''.' → logprob: -0.00037490393151529133
    2. '"' → logprob: -9.125374794006348
    3. ''' → logprob: -9.125374794006348
    4. ' ''.' → logprob: -9.250374794006348
    5. '''' → logprob: -9.750374794006348
    6. ''',' → logprob: -13.500374794006348
    7. ''.' → logprob: -15.000374794006348
    8. '('' → logprob: -15.125374794006348
    9. ')' → logprob: -15.500374794006348
    10. ' "".' → logprob: -15.875374794006348

Token 160: 'join' (ID: 10891)
  Prédit: 'join'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'join' → logprob: -9.088346359931165e-07
    2. '.' → logprob: -15.250000953674316
    3. ' join' → logprob: -15.750000953674316
    4. '(join' → logprob: -16.625
    5. 'strip' → logprob: -16.625
    6. ''.' → logprob: -16.625
    7. '''.' → logprob: -16.75
    8. '```' → logprob: -16.75
    9. 'jo' → logprob: -16.875
    10. 'j' → logprob: -17.0

Token 161: '(re' (ID: 8178)
  Prédit: '(re'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(re' → logprob: -0.00010556964843999594
    2. 'rev' → logprob: -9.375105857849121
    3. ')' → logprob: -11.375105857849121
    4. '(' → logprob: -11.875105857849121
    5. ' (' → logprob: -14.125105857849121
    6. ')(' → logprob: -14.625105857849121
    7. '(
' → logprob: -15.125105857849121
    8. '.rev' → logprob: -15.625105857849121
    9. '   ' → logprob: -15.750105857849121
    10. '(reverse' → logprob: -16.875104904174805

Token 162: 'v' (ID: 85)
  Prédit: 'v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -9.088346359931165e-07
    2. '[' → logprob: -15.375000953674316
    3. ' v' → logprob: -15.875000953674316
    4. 'verse' → logprob: -16.625
    5. '(' → logprob: -16.75
    6. 's' → logprob: -16.875
    7. 'V' → logprob: -17.25
    8. 'p' → logprob: -17.375
    9. '[v' → logprob: -17.375
    10. '(v' → logprob: -17.5

Token 163: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.10021012276411057
    2. ')' → logprob: -2.350210189819336
    3. ')))' → logprob: -12.975210189819336
    4. '))
' → logprob: -14.600210189819336
    5. '()))' → logprob: -15.600210189819336
    6. ' ))' → logprob: -15.850210189819336
    7. '())' → logprob: -16.225210189819336
    8. ')
' → logprob: -16.725210189819336
    9. '})' → logprob: -16.725210189819336
    10. ')}' → logprob: -16.725210189819336

Token 164: 'compute' (ID: 54521)
  Prédit: 'compute'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'compute' → logprob: -0.0004820313479285687
    2. '
' → logprob: -8.125481605529785
    3. '(com' → logprob: -10.250481605529785
    4. '(
' → logprob: -10.500481605529785
    5. ' compute' → logprob: -10.625481605529785
    6. '\n' → logprob: -10.875481605529785
    7. ')' → logprob: -11.000481605529785
    8. '```' → logprob: -11.125481605529785
    9. 'n' → logprob: -12.125481605529785
    10. '\' → logprob: -12.375481605529785

Token 165: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.386890709400177
    2. '(' → logprob: -1.1368906497955322
    3. '(
' → logprob: -11.511890411376953
    4. ' (' → logprob: -12.636890411376953
    5. '((' → logprob: -12.761890411376953
    6. '("("' → logprob: -14.386890411376953
    7. '(user' → logprob: -14.636890411376953
    8. '(

' → logprob: -14.636890411376953
    9. '(`' → logprob: -14.886890411376953
    10. '```' → logprob: -15.636890411376953

Token 166: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.896309739408025e-07
    2. ' )' → logprob: -14.625000953674316
    3. '))' → logprob: -15.875000953674316
    4. ')
' → logprob: -17.5
    5. ')`' → logprob: -17.625
    6. '())' → logprob: -18.125
    7. ')#' → logprob: -18.75
    8. ')**' → logprob: -19.25
    9. ')}' → logprob: -20.125
    10. '),' → logprob: -20.25


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 164
Tokens correctement prédits (1ère position, stricte): 66
Tokens correctement prédits (1ère position, avec adaptation): 69
Tokens correctement prédits (top 10): 130
Précision stricte (1ère position): 40.24%
Précision adaptée (1ère position): 42.07%
Précision (top 10): 79.27%
================================================================================
