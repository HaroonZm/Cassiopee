================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:15:19
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
print(next(filter(lambda x: x != input(), ["ARC", "ABC"])))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'print' (ID: 1598)
  → Token d'amorce (pas de prédiction)

Token 1: '(next' (ID: 28757)
  → Token d'amorce (pas de prédiction)

Token 2: '(filter' (ID: 36366)
  → Token d'amorce (pas de prédiction)

Token 3: '(lambda' (ID: 43341)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.11444008350372314
    2. '(lambda' → logprob: -2.2394399642944336
    3. '(
' → logprob: -7.364439964294434
    4. '(()' → logprob: -7.489439964294434
    5. '((' → logprob: -9.239439964294434
    6. '(open' → logprob: -9.614439964294434
    7. '```' → logprob: -9.614439964294434
    8. '(

' → logprob: -9.739439964294434
    9. '("("' → logprob: -10.989439964294434
    10. '(None' → logprob: -10.989439964294434

Token 4: ' x' (ID: 1215)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1616635024547577
    2. ' (' → logprob: -2.53666353225708
    3. ' ' → logprob: -3.16166353225708
    4. '(lambda' → logprob: -3.91166353225708
    5. ' )' → logprob: -5.78666353225708
    6. '<|end|>' → logprob: -6.41166353225708
    7. '(space' → logprob: -7.16166353225708
    8. ')' → logprob: -7.28666353225708
    9. '    ' → logprob: -8.911663055419922
    10. ' ))' → logprob: -9.161663055419922

Token 5: ':' (ID: 25)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5202807784080505
    2. '(lambda' → logprob: -1.8952808380126953
    3. ',' → logprob: -2.7702808380126953
    4. '=lambda' → logprob: -3.1452808380126953
    5. '=' → logprob: -3.5202808380126953
    6. '<|end|>' → logprob: -3.6452808380126953
    7. ' ' → logprob: -3.7702808380126953
    8. '==' → logprob: -4.145280838012695
    9. ' ==' → logprob: -4.145280838012695
    10. ' (' → logprob: -4.395280838012695

Token 6: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.07435131072998047
    2. 'x' → logprob: -2.6993513107299805
    3. ' not' → logprob: -5.8243513107299805
    4. ' lambda' → logprob: -7.4493513107299805
    5. 'lambda' → logprob: -8.07435131072998
    6. 'not' → logprob: -8.44935131072998
    7. ' True' → logprob: -9.19935131072998
    8. 'True' → logprob: -10.07435131072998
    9. ' ' → logprob: -10.07435131072998
    10. ' isinstance' → logprob: -10.19935131072998

Token 7: ' !=' (ID: 1666)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '%' → logprob: -0.911801278591156
    2. ' %' → logprob: -1.4118013381958008
    3. '.startswith' → logprob: -1.4118013381958008
    4. '>' → logprob: -3.411801338195801
    5. ' >' → logprob: -3.661801338195801
    6. ' ' → logprob: -4.036801338195801
    7. '.' → logprob: -4.661801338195801
    8. ' ==' → logprob: -4.786801338195801
    9. '==' → logprob: -5.036801338195801
    10. ' in' → logprob: -5.411801338195801

Token 8: ' input' (ID: 3422)
  Prédit: ' None'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' None' → logprob: -1.1337794065475464
    2. ' ' → logprob: -1.2587794065475464
    3. ' '' → logprob: -2.008779525756836
    4. 'None' → logprob: -2.383779525756836
    5. '0' → logprob: -2.508779525756836
    6. ''' → logprob: -2.758779525756836
    7. '"' → logprob: -5.008779525756836
    8. ''\' → logprob: -5.383779525756836
    9. ' "' → logprob: -5.508779525756836
    10. '-' → logprob: -6.883779525756836

Token 9: '(),' (ID: 2547)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.9921525120735168
    2. ')' → logprob: -1.492152452468872
    3. ')))' → logprob: -2.117152452468872
    4. ',' → logprob: -2.742152452468872
    5. '),' → logprob: -3.242152452468872
    6. '')' → logprob: -3.617152452468872
    7. '")' → logprob: -3.992152452468872
    8. '"' → logprob: -4.367152690887451
    9. '(','' → logprob: -4.367152690887451
    10. ''s' → logprob: -4.617152690887451

Token 10: ' ["' (ID: 9129)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.6995335221290588
    2. 'iter' → logprob: -0.9495335221290588
    3. ' iter' → logprob: -2.824533462524414
    4. ' range' → logprob: -3.449533462524414
    5. 'input' → logprob: -5.074533462524414
    6. 'map' → logprob: -5.199533462524414
    7. 'enumer' → logprob: -5.324533462524414
    8. 'filter' → logprob: -6.449533462524414
    9. ' map' → logprob: -7.074533462524414
    10. '[' → logprob: -7.199533462524414

Token 11: 'ARC' (ID: 64758)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -1.1134650707244873
    2. '"]))' → logprob: -1.8634650707244873
    3. ''a' → logprob: -1.9884650707244873
    4. 'a' → logprob: -1.9884650707244873
    5. ''' → logprob: -2.3634650707244873
    6. '"a' → logprob: -2.6134650707244873
    7. ']))' → logprob: -4.363465309143066
    8. '"]' → logprob: -4.488465309143066
    9. '']))' → logprob: -4.613465309143066
    10. '",' → logprob: -5.738465309143066

Token 12: '",' (ID: 672)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -1.3577148914337158
    2. '"]))' → logprob: -1.9827148914337158
    3. '123' → logprob: -2.232714891433716
    4. '","' → logprob: -2.357714891433716
    5. '0' → logprob: -2.607714891433716
    6. 'ABC' → logprob: -2.732714891433716
    7. 'A' → logprob: -3.357714891433716
    8. '"' → logprob: -3.732714891433716
    9. '012' → logprob: -3.857714891433716
    10. 'abc' → logprob: -3.982714891433716

Token 13: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.15248897671699524
    2. ' "' → logprob: -2.027488946914673
    3. ''' → logprob: -5.027489185333252
    4. ' '' → logprob: -6.527489185333252
    5. '"A' → logprob: -7.152489185333252
    6. '"D' → logprob: -8.777488708496094
    7. '"B' → logprob: -9.027488708496094
    8. '"H' → logprob: -9.277488708496094
    9. '"AT' → logprob: -9.402488708496094
    10. ' ' → logprob: -9.402488708496094

Token 14: 'ABC' (ID: 44197)
  Prédit: 'AG'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'AG' → logprob: -0.4914187788963318
    2. 'ABC' → logprob: -0.9914187788963318
    3. '"' → logprob: -5.366418838500977
    4. 'ARC' → logprob: -5.741418838500977
    5. 'abc' → logprob: -6.241418838500977
    6. 'A' → logprob: -6.991418838500977
    7. 'B' → logprob: -7.741418838500977
    8. 'BC' → logprob: -7.866418838500977
    9. 'AH' → logprob: -7.866418838500977
    10. '123' → logprob: -7.928918838500977

Token 15: '"]' (ID: 2601)
  Prédit: '"]))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"]))' → logprob: -0.605300784111023
    2. '",' → logprob: -0.855300784111023
    3. '"]' → logprob: -4.1053009033203125
    4. ']))' → logprob: -5.7303009033203125
    5. '"' → logprob: -5.9803009033203125
    6. ',' → logprob: -6.1053009033203125
    7. '","' → logprob: -6.7303009033203125
    8. '"])' → logprob: -8.480300903320312
    9. '']))' → logprob: -8.605300903320312
    10. '])))' → logprob: -8.605300903320312

Token 16: ')))' (ID: 15975)
  Prédit: ')))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.00669678021222353
    2. '))' → logprob: -5.381696701049805
    3. ')' → logprob: -6.256696701049805
    4. '))))' → logprob: -9.506696701049805
    5. '),' → logprob: -10.006696701049805
    6. '[' → logprob: -11.256696701049805
    7. ')));' → logprob: -11.881696701049805
    8. ')))
' → logprob: -12.381696701049805
    9. '')))' → logprob: -12.506696701049805
    10. ' ' → logprob: -13.256696701049805


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 14
Tokens correctement prédits (1ère position, stricte): 2
Tokens correctement prédits (1ère position, avec adaptation): 2
Tokens correctement prédits (top 10): 6
Précision stricte (1ère position): 14.29%
Précision adaptée (1ère position): 14.29%
Précision (top 10): 42.86%
================================================================================
