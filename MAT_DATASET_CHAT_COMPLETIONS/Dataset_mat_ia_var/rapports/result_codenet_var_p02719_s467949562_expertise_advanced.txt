================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:19:23
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from sys import exit

def main():
    N, K = map(int, input().split())

    if not N or K == 1:
        print(0)
        exit()

    N %= K
    print(min(N, K - N))

if __name__ == "__main__":
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' exit' (ID: 10654)
  Prédit: 'argv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'argv' → logprob: -0.056505121290683746
    2. ' argv' → logprob: -3.1815052032470703
    3. 'exit' → logprob: -4.80650520324707
    4. ' exit' → logprob: -6.30650520324707
    5. 'stdout' → logprob: -6.68150520324707
    6. 'path' → logprob: -7.30650520324707
    7. 'import' → logprob: -7.43150520324707
    8. 'stdin' → logprob: -7.68150520324707
    9. 'version' → logprob: -8.55650520324707
    10. ' path' → logprob: -9.93150520324707

Token 4: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.09384974092245102
    2. '\n' → logprob: -3.0938496589660645
    3. '()' → logprob: -4.2188496589660645
    4. '\' → logprob: -4.7188496589660645
    5. '.' → logprob: -4.8438496589660645
    6. '
' → logprob: -5.4688496589660645
    7. '```' → logprob: -6.2188496589660645
    8. '(
' → logprob: -6.7188496589660645
    9. 'newline' → logprob: -6.7188496589660645
    10. '\(' → logprob: -7.0938496589660645

Token 5: 'def' (ID: 1314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0013773757964372635
    2. '\(' → logprob: -7.501377582550049
    3. '.' → logprob: -8.62637710571289
    4. '(
' → logprob: -8.75137710571289
    5. '\n' → logprob: -8.75137710571289
    6. '()' → logprob: -8.87637710571289
    7. '\' → logprob: -9.25137710571289
    8. '```' → logprob: -10.37637710571289
    9. '(

' → logprob: -11.50137710571289
    10. ',' → logprob: -11.50137710571289

Token 6: ' main' (ID: 2758)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.008321180939674377
    2. ' main' → logprob: -5.008321285247803
    3. ' space' → logprob: -7.633321285247803
    4. ' exit' → logprob: -8.008320808410645
    5. ' process' → logprob: -8.383320808410645
    6. ' def' → logprob: -9.383320808410645
    7. '_' → logprob: -10.258320808410645
    8. ' check' → logprob: -10.383320808410645
    9. ' hello' → logprob: -10.383320808410645
    10. '_exit' → logprob: -10.383320808410645

Token 7: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.06765276193618774
    2. '(' → logprob: -2.817652702331543
    3. '(:' → logprob: -5.942652702331543
    4. ':' → logprob: -6.067652702331543
    5. ' ():' → logprob: -7.817652702331543
    6. '(":' → logprob: -8.692652702331543
    7. '(
' → logprob: -10.317652702331543
    8. '()' → logprob: -10.567652702331543
    9. '():
' → logprob: -10.817652702331543
    10. '(':' → logprob: -10.817652702331543

Token 8: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08161512762308121
    2. '    ' → logprob: -3.5816152095794678
    3. ' ' → logprob: -4.206614971160889
    4. '\' → logprob: -4.206614971160889
    5. '(' → logprob: -4.456614971160889
    6. '    
' → logprob: -5.456614971160889
    7. '\n' → logprob: -6.706614971160889
    8. ''' → logprob: -7.831614971160889
    9. ' 
' → logprob: -7.831614971160889
    10. '()' → logprob: -8.081615447998047

Token 9: ' N' (ID: 478)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1337657868862152
    2. 'print' → logprob: -2.508765697479248
    3. 'pass' → logprob: -4.508765697479248
    4. ' print' → logprob: -4.883765697479248
    5. '    ' → logprob: -4.883765697479248
    6. ' pass' → logprob: -5.508765697479248
    7. 'exit' → logprob: -5.508765697479248
    8. ' exit' → logprob: -6.008765697479248
    9. 'return' → logprob: -6.133765697479248
    10. ' return' → logprob: -6.383765697479248

Token 10: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.30167317390441895
    2. '=' → logprob: -1.926673173904419
    3. ' ' → logprob: -3.176673173904419
    4. '_' → logprob: -3.926673173904419
    5. ')' → logprob: -4.42667293548584
    6. '  ' → logprob: -4.42667293548584
    7. '   ' → logprob: -4.42667293548584
    8. ',' → logprob: -5.30167293548584
    9. ' )' → logprob: -5.80167293548584
    10. '.' → logprob: -6.42667293548584

Token 11: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.8026669025421143
    2. ' M' → logprob: -1.3026669025421143
    3. 'K' → logprob: -1.9276669025421143
    4. 'M' → logprob: -2.4276669025421143
    5. ' ' → logprob: -3.5526669025421143
    6. 'input' → logprob: -5.552666664123535
    7. 'a' → logprob: -6.177666664123535
    8. 'x' → logprob: -6.427666664123535
    9. ' input' → logprob: -6.927666664123535
    10. 'space' → logprob: -7.177666664123535

Token 12: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.28117212653160095
    2. '=' → logprob: -1.4061721563339233
    3. ',' → logprob: -11.156171798706055
    4. ')' → logprob: -12.656171798706055
    5. ' ' → logprob: -13.531171798706055
    6. '=int' → logprob: -14.031171798706055
    7. '=input' → logprob: -14.281171798706055
    8. '<|end|>' → logprob: -14.531171798706055
    9. ' =
' → logprob: -16.031171798706055
    10. '  ' → logprob: -16.156171798706055

Token 13: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.0053455824963748455
    2. 'map' → logprob: -5.255345344543457
    3. ' input' → logprob: -9.880345344543457
    4. ' list' → logprob: -10.630345344543457
    5. ' ' → logprob: -10.755345344543457
    6. 'input' → logprob: -11.630345344543457
    7. '	map' → logprob: -13.505345344543457
    8. ' [' → logprob: -13.755345344543457
    9. 'list' → logprob: -14.005345344543457
    10. '(map' → logprob: -14.130345344543457

Token 14: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.5304722189903259
    2. '(' → logprob: -0.9054722189903259
    3. '(str' → logprob: -5.155472278594971
    4. '(lambda' → logprob: -6.530472278594971
    5. '(
' → logprob: -10.155471801757812
    6. '(input' → logprob: -10.655471801757812
    7. 'int' → logprob: -11.905471801757812
    8. '()' → logprob: -12.530471801757812
    9. ' (' → logprob: -12.655471801757812
    10. '(list' → logprob: -12.780471801757812

Token 15: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.026983868330717087
    2. ',input' → logprob: -3.6519839763641357
    3. '(input' → logprob: -7.901983737945557
    4. 'input' → logprob: -9.276984214782715
    5. ',int' → logprob: -9.526984214782715
    6. '(' → logprob: -9.776984214782715
    7. ')' → logprob: -9.901984214782715
    8. ' ,' → logprob: -11.026984214782715
    9. '<|end|>' → logprob: -12.276984214782715
    10. ' input' → logprob: -12.651984214782715

Token 16: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.20142561197280884
    2. 'input' → logprob: -1.701425552368164
    3. ')' → logprob: -11.576425552368164
    4. ' )' → logprob: -13.451425552368164
    5. '(input' → logprob: -14.201425552368164
    6. ' ' → logprob: -14.826425552368164
    7. '=input' → logprob: -15.576425552368164
    8. ',input' → logprob: -15.701425552368164
    9. '	input' → logprob: -16.201425552368164
    10. '<input' → logprob: -17.951425552368164

Token 17: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.018347177654504776
    2. '())' → logprob: -4.768347263336182
    3. '()' → logprob: -4.893347263336182
    4. ')' → logprob: -6.268347263336182
    5. '(' → logprob: -8.893346786499023
    6. '()))' → logprob: -9.768346786499023
    7. '(),' → logprob: -9.893346786499023
    8. '))' → logprob: -11.393346786499023
    9. '());' → logprob: -12.018346786499023
    10. '()>' → logprob: -12.268346786499023

Token 18: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00034630970912985504
    2. 'strip' → logprob: -8.000346183776855
    3. 'rstrip' → logprob: -11.500346183776855
    4. 'spl' → logprob: -15.125346183776855
    5. '(split' → logprob: -15.625346183776855
    6. ' split' → logprob: -15.750346183776855
    7. 'read' → logprob: -16.375347137451172
    8. ')' → logprob: -16.625347137451172
    9. 'rs' → logprob: -18.125347137451172
    10. 's' → logprob: -18.375347137451172

Token 19: '())

' (ID: 27654)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2520851194858551
    2. '))' → logprob: -1.5020850896835327
    3. '())' → logprob: -9.502084732055664
    4. '()))' → logprob: -10.627084732055664
    5. '()' → logprob: -10.877084732055664
    6. ')))' → logprob: -11.377084732055664
    7. '),' → logprob: -11.377084732055664
    8. ')
' → logprob: -12.377084732055664
    9. '))
' → logprob: -12.627084732055664
    10. '(' → logprob: -13.627084732055664

Token 20: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008200944401323795
    2. '```' → logprob: -5.6332011222839355
    3. ' if' → logprob: -6.8832011222839355
    4. '    
' → logprob: -7.3832011222839355
    5. ' for' → logprob: -7.3832011222839355
    6. 'for' → logprob: -7.8832011222839355
    7. '    ' → logprob: -8.133200645446777
    8. 'if' → logprob: -8.383200645446777
    9. '
' → logprob: -8.883200645446777
    10. ')' → logprob: -8.883200645446777

Token 21: ' if' (ID: 538)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.3469815254211426
    2. 'for' → logprob: -1.5969815254211426
    3. 'arr' → logprob: -1.8469815254211426
    4. 'dp' → logprob: -1.9719815254211426
    5. 'A' → logprob: -2.2219815254211426
    6. 'if' (adapté à ' if') → logprob: -3.0969815254211426
    7. 's' → logprob: -4.471981525421143
    8. 'numbers' → logprob: -4.596981525421143
    9. 'd' → logprob: -4.971981525421143
    10. 'S' → logprob: -5.096981525421143

Token 22: ' not' (ID: 625)
  Prédit: ' K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.2284533977508545
    2. ' N' → logprob: -1.6034533977508545
    3. ' ' → logprob: -6.603453636169434
    4. 'K' → logprob: -6.978453636169434
    5. 'N' → logprob: -7.353453636169434
    6. ' not' → logprob: -9.478453636169434
    7. ' (' → logprob: -11.353453636169434
    8. ' ' → logprob: -11.603453636169434
    9. ' abs' → logprob: -13.478453636169434
    10. '   ' → logprob: -13.603453636169434

Token 23: ' N' (ID: 478)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.14287470281124115
    2. '(' → logprob: -2.7678747177124023
    3. ' ' → logprob: -3.0178747177124023
    4. ' isinstance' → logprob: -4.517874717712402
    5. ' N' → logprob: -4.767874717712402
    6. ' K' → logprob: -7.017874717712402
    7. '0' → logprob: -7.892874717712402
    8. '(N' → logprob: -8.142874717712402
    9. '1' → logprob: -8.267874717712402
    10. ' all' → logprob: -10.142874717712402

Token 24: ' or' (ID: 503)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -1.3567029237747192
    2. ' %' → logprob: -1.6067029237747192
    3. ' >=' → logprob: -1.9817029237747192
    4. '>' → logprob: -2.4817028045654297
    5. ' >' → logprob: -2.6067028045654297
    6. '=' → logprob: -2.6067028045654297
    7. ':' → logprob: -3.1067028045654297
    8. ' or' → logprob: -3.2317028045654297
    9. '>=' → logprob: -3.2317028045654297
    10. ' ' → logprob: -4.35670280456543

Token 25: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.04567812383174896
    2. 'K' → logprob: -3.29567813873291
    3. ' not' → logprob: -5.17067813873291
    4. ' N' → logprob: -6.54567813873291
    5. ' ' → logprob: -8.42067813873291
    6. 'N' → logprob: -9.17067813873291
    7. 'not' → logprob: -9.29567813873291
    8. '  ' → logprob: -10.92067813873291
    9. ' ' → logprob: -11.17067813873291
    10. ' (' → logprob: -11.29567813873291

Token 26: ' ==' (ID: 951)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.019234083592891693
    2. '==' → logprob: -5.3942341804504395
    3. ' :' → logprob: -5.5192341804504395
    4. ' ==' → logprob: -5.7692341804504395
    5. ' >' → logprob: -6.0192341804504395
    6. '):' → logprob: -6.3942341804504395
    7. '>' → logprob: -6.6442341804504395
    8. ' >=' → logprob: -7.6442341804504395
    9. ' <=' → logprob: -7.8942341804504395
    10. '>:' → logprob: -8.019233703613281

Token 27: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2519511282444
    2. '0' → logprob: -1.5019510984420776
    3. '1' → logprob: -11.501951217651367
    4. '  ' → logprob: -12.251951217651367
    5. ' N' → logprob: -13.001951217651367
    6. ' ' → logprob: -13.126951217651367
    7. '   ' → logprob: -13.876951217651367
    8. 'N' → logprob: -14.751951217651367
    9. '2' → logprob: -15.376951217651367
    10. '100' → logprob: -16.439451217651367

Token 28: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0549292229115963
    2. ' ' → logprob: -2.929929256439209
    3. '1' → logprob: -10.55492877960205
    4. '  ' → logprob: -11.55492877960205
    5. 'N' → logprob: -12.92992877960205
    6. '   ' → logprob: -12.92992877960205
    7. ' N' → logprob: -13.30492877960205
    8. ')' → logprob: -14.11742877960205
    9. ' ' → logprob: -14.42992877960205
    10. '2' → logprob: -14.80492877960205

Token 29: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00011653638648567721
    2. ':
' → logprob: -9.500116348266602
    3. ':return' → logprob: -10.625116348266602
    4. '):' → logprob: -11.750116348266602
    5. ' :' → logprob: -12.250116348266602
    6. ' or' → logprob: -13.250116348266602
    7. '   ' → logprob: -13.750116348266602
    8. ':**' → logprob: -14.250116348266602
    9. ',' → logprob: -14.375116348266602
    10. '       ' → logprob: -16.3751163482666

Token 30: '       ' (ID: 309)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.17229622602462769
    2. '       ' → logprob: -2.5472962856292725
    3. ':
' → logprob: -3.0472962856292725
    4. '   ' → logprob: -3.9222962856292725
    5. ':return' → logprob: -4.547296047210693
    6. ' return' → logprob: -6.672296047210693
    7. ' exit' → logprob: -8.422296524047852
    8. '    ' → logprob: -9.547296524047852
    9. ',' → logprob: -9.547296524047852
    10. '\n' → logprob: -9.797296524047852

Token 31: ' print' (ID: 2123)
  Prédit: ' exit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' exit' → logprob: -0.3197742998600006
    2. ' return' → logprob: -2.0697743892669678
    3. '       ' → logprob: -2.4447743892669678
    4. 'exit' → logprob: -3.0697743892669678
    5. 'return' → logprob: -5.069774150848389
    6. '   ' → logprob: -6.069774150848389
    7. '    ' → logprob: -6.194774150848389
    8. ' 
' → logprob: -7.444774150848389
    9. ' ' → logprob: -7.569774150848389
    10. '\n' → logprob: -7.819774150848389

Token 32: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.09740692377090454
    2. '(N' → logprob: -2.8474068641662598
    3. '()' → logprob: -3.5974068641662598
    4. '("' → logprob: -5.47240686416626
    5. '('' → logprob: -6.97240686416626
    6. '0' → logprob: -7.09740686416626
    7. '(-' → logprob: -7.09740686416626
    8. '("")' → logprob: -7.84740686416626
    9. '((' → logprob: -9.972407341003418
    10. ' (' → logprob: -10.472407341003418

Token 33: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.09295374900102615
    2. 'N' → logprob: -2.717953681945801
    3. ' N' → logprob: -4.592953681945801
    4. ' ' → logprob: -4.967953681945801
    5. '1' → logprob: -5.467953681945801
    6. ')' → logprob: -8.2179536819458
    7. '-' → logprob: -8.2179536819458
    8. '"' → logprob: -8.2179536819458
    9. '(' → logprob: -8.9679536819458
    10. '   ' → logprob: -9.2179536819458

Token 34: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.546478935983032e-05
    2. ')
' → logprob: -10.625025749206543
    3. ' )' → logprob: -14.375025749206543
    4. '   ' → logprob: -15.375025749206543
    5. ')return' → logprob: -15.750025749206543
    6. '))' → logprob: -16.875024795532227
    7. '()' → logprob: -17.000024795532227
    8. '`)' → logprob: -17.000024795532227
    9. ')
' → logprob: -17.500024795532227
    10. '')' → logprob: -18.000024795532227

Token 35: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11152108013629913
    2. '       ' → logprob: -2.486521005630493
    3. ')' → logprob: -4.986521244049072
    4. '<|end|>' → logprob: -4.986521244049072
    5. '
' → logprob: -5.236521244049072
    6. '    
' → logprob: -6.611521244049072
    7. '```' → logprob: -7.736521244049072
    8. '\n' → logprob: -7.736521244049072
    9. '\' → logprob: -8.611520767211914
    10. ':' → logprob: -8.736520767211914

Token 36: ' exit' (ID: 10654)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.007227262482047081
    2. '   ' → logprob: -5.132227420806885
    3. ' return' → logprob: -7.757227420806885
    4. '
' → logprob: -7.882227420806885
    5. 'return' → logprob: -7.882227420806885
    6. '	return' → logprob: -10.632226943969727
    7. '\n' → logprob: -10.882226943969727
    8. ' ' → logprob: -11.007226943969727
    9. '```' → logprob: -11.257226943969727
    10. ')' → logprob: -11.882226943969727

Token 37: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.003626558231189847
    2. '(' → logprob: -5.628626346588135
    3. '()
' → logprob: -11.003626823425293
    4. '()`' → logprob: -12.878626823425293
    5. '()

' → logprob: -13.503626823425293
    6. '()\' → logprob: -13.503626823425293
    7. '())' → logprob: -13.878626823425293
    8. ' ()' → logprob: -14.253626823425293
    9. '(
' → logprob: -14.503626823425293
    10. '();' → logprob: -14.628626823425293

Token 38: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.3173936605453491
    2. '   ' → logprob: -1.4423936605453491
    3. '
' → logprob: -1.9423936605453491
    4. '<|end|>' → logprob: -2.3173937797546387
    5. '    
' → logprob: -2.4423937797546387
    6. ' 
' → logprob: -2.4423937797546387
    7. '  
' → logprob: -3.4423937797546387
    8. '\' → logprob: -3.9423937797546387
    9. '   
' → logprob: -5.442393779754639
    10. ' ' → logprob: -5.442393779754639

Token 39: ' N' (ID: 478)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.47254469990730286
    2. 'for' → logprob: -2.0975446701049805
    3. 'result' → logprob: -2.9725446701049805
    4. ' for' → logprob: -3.2225446701049805
    5. ' 
' → logprob: -3.8475446701049805
    6. 'n' → logprob: -4.0975446701049805
    7. 's' → logprob: -4.0975446701049805
    8. 'i' → logprob: -4.2225446701049805
    9. '    
' → logprob: -4.2225446701049805
    10. '```' → logprob: -4.3475446701049805

Token 40: ' %=' (ID: 117035)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '%' → logprob: -1.0278230905532837
    2. ' %' → logprob: -1.4028230905532837
    3. ' *' → logprob: -2.402822971343994
    4. ' ' → logprob: -2.652822971343994
    5. ' ==' → logprob: -3.277822971343994
    6. '-' → logprob: -3.402822971343994
    7. '*' → logprob: -3.402822971343994
    8. '**' → logprob: -3.527822971343994
    9. ' **' → logprob: -4.027822971343994
    10. ' >' → logprob: -4.152822971343994

Token 41: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.0004002832865808159
    2. ' K' → logprob: -8.25040054321289
    3. '100' → logprob: -9.75040054321289
    4. '10' → logprob: -10.37540054321289
    5. '(K' → logprob: -11.25040054321289
    6. '(' → logprob: -11.37540054321289
    7. '2' → logprob: -12.12540054321289
    8. ' ' → logprob: -12.87540054321289
    9. ' (' → logprob: -13.37540054321289
    10. 'mod' → logprob: -13.62540054321289

Token 42: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5888347029685974
    2. '<|end|>' → logprob: -0.9638347029685974
    3. '   ' → logprob: -4.088834762573242
    4. '%' → logprob: -4.338834762573242
    5. '+' → logprob: -4.713834762573242
    6. '<|end|>' → logprob: -4.713834762573242
    7. '*' → logprob: -5.588834762573242
    8. '```' → logprob: -5.713834762573242
    9. '    
' → logprob: -6.588834762573242
    10. '#' → logprob: -6.713834762573242

Token 43: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.43377912044525146
    2. '
' → logprob: -1.8087791204452515
    3. '<|end|>' → logprob: -2.058779239654541
    4. '    
' → logprob: -3.683779239654541
    5. '```' → logprob: -3.808779239654541
    6. '  
' → logprob: -6.183779239654541
    7. '\n' → logprob: -6.683779239654541
    8. '*' → logprob: -7.058779239654541
    9. '\' → logprob: -7.058779239654541
    10. 'if' → logprob: -7.183779239654541

Token 44: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2353961020708084
    2. 'if' → logprob: -2.485396146774292
    3. ' if' → logprob: -2.735396146774292
    4. '```' → logprob: -4.110395908355713
    5. '*' → logprob: -4.735395908355713
    6. '    
' → logprob: -5.235395908355713
    7. '+' → logprob: -5.360395908355713
    8. '0' → logprob: -5.610395908355713
    9. 'print' (adapté à ' print') → logprob: -5.860395908355713
    10. ':' → logprob: -5.985395908355713

Token 45: '(min' (ID: 26035)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.08339372277259827
    2. '(N' → logprob: -2.5833938121795654
    3. '((' → logprob: -5.458393573760986
    4. '()' → logprob: -8.708394050598145
    5. '('' → logprob: -11.333394050598145
    6. ' (' → logprob: -11.708394050598145
    7. '(n' → logprob: -11.958394050598145
    8. '(min' → logprob: -12.083394050598145
    9. '(((' → logprob: -12.208394050598145
    10. '(abs' → logprob: -12.208394050598145

Token 46: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.01252284087240696
    2. '(' → logprob: -4.3875226974487305
    3. '(n' → logprob: -12.26252269744873
    4. '(
' → logprob: -13.01252269744873
    5. ' (' → logprob: -13.38752269744873
    6. ')' → logprob: -13.88752269744873
    7. '()' → logprob: -14.01252269744873
    8. '(K' → logprob: -14.13752269744873
    9. '((' → logprob: -14.38752269744873
    10. '(abs' → logprob: -14.76252269744873

Token 47: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.006868702359497547
    2. ',K' → logprob: -5.131868839263916
    3. ' ,' → logprob: -7.131868839263916
    4. ',)' → logprob: -9.506868362426758
    5. ',N' → logprob: -10.131868362426758
    6. ',len' → logprob: -11.506868362426758
    7. ',k' → logprob: -12.256868362426758
    8. 'K' → logprob: -13.006868362426758
    9. ',min' → logprob: -13.006868362426758
    10. ' K' → logprob: -13.256868362426758

Token 48: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.31435203552246094
    2. 'K' → logprob: -1.314352035522461
    3. 'abs' → logprob: -7.314352035522461
    4. ' ' → logprob: -8.189352035522461
    5. ' abs' → logprob: -9.564352035522461
    6. ')' → logprob: -10.189352035522461
    7. '   ' → logprob: -11.439352035522461
    8. '	K' → logprob: -12.189352035522461
    9. '(K' → logprob: -12.564352035522461
    10. '1' → logprob: -12.939352035522461

Token 49: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.22929127514362335
    2. '-' → logprob: -1.604291319847107
    3. '-N' → logprob: -5.6042914390563965
    4. ')' → logprob: -9.229290962219238
    5. ' ' → logprob: -9.354290962219238
    6. ' )' → logprob: -13.604290962219238
    7. ' ' → logprob: -14.479290962219238
    8. '‌' → logprob: -14.729290962219238
    9. '-n' → logprob: -14.979290962219238
    10. '-)' → logprob: -14.979290962219238

Token 50: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.02975349873304367
    2. ' N' → logprob: -3.5297534465789795
    3. ' ' → logprob: -13.529753684997559
    4. ')' → logprob: -14.154753684997559
    5. '	N' → logprob: -14.529753684997559
    6. '   ' → logprob: -16.529752731323242
    7. '_N' → logprob: -16.529752731323242
    8. '<|end|>' → logprob: -16.529752731323242
    9. '  ' → logprob: -16.779752731323242
    10. ' )' → logprob: -17.529752731323242

Token 51: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.3868747651576996
    2. ')' → logprob: -1.136874794960022
    3. '))
' → logprob: -13.26187515258789
    4. ')))' → logprob: -13.51187515258789
    5. ')
' → logprob: -15.38687515258789
    6. ' )' → logprob: -16.01187515258789
    7. ')`' → logprob: -16.51187515258789
    8. ')}' → logprob: -16.63687515258789
    9. ' ))' → logprob: -16.76187515258789
    10. '})' → logprob: -17.26187515258789

Token 52: 'if' (ID: 366)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 53: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.11289545893669128
    2. '__' → logprob: -2.2378954887390137
    3. ' ' → logprob: -10.612895011901855
    4. ' ' → logprob: -10.737895011901855
    5. 'name' → logprob: -11.237895011901855
    6. '_' → logprob: -12.112895011901855
    7. '_name' → logprob: -12.487895011901855
    8. ' True' → logprob: -13.612895011901855
    9. ' name' → logprob: -13.862895011901855
    10. '  ' → logprob: -14.612895011901855

Token 54: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.067249596118927
    2. ' ==' → logprob: -3.4422495365142822
    3. ' __' → logprob: -4.317249774932861
    4. '.' → logprob: -5.067249774932861
    5. ' .' → logprob: -5.067249774932861
    6. '==' → logprob: -5.692249774932861
    7. '.__' → logprob: -6.442249774932861
    8. '__.__' → logprob: -6.567249774932861
    9. '__.' → logprob: -8.567249298095703
    10. '_' → logprob: -8.942249298095703

Token 55: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -6.988221684878226e-06
    2. '==' → logprob: -12.625006675720215
    3. '__.__' → logprob: -13.125006675720215
    4. '___' → logprob: -14.375006675720215
    5. '_' → logprob: -14.500006675720215
    6. ' ==' → logprob: -16.12500762939453
    7. '____' → logprob: -16.37500762939453
    8. '__('' → logprob: -16.62500762939453
    9. '__["' → logprob: -16.75000762939453
    10. '__[' → logprob: -17.12500762939453

Token 56: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.01592409610748291
    2. '==' → logprob: -4.515923976898193
    3. '__' → logprob: -5.390923976898193
    4. '=="' → logprob: -8.515924453735352
    5. '=='' → logprob: -10.390924453735352
    6. ' =' → logprob: -10.765924453735352
    7. ' =="' → logprob: -10.765924453735352
    8. '_' → logprob: -11.640924453735352
    9. '<|end|>' → logprob: -12.265924453735352
    10. '[' → logprob: -12.515924453735352

Token 57: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.25200432538986206
    2. ''' → logprob: -1.5020043849945068
    3. ' "' → logprob: -10.002004623413086
    4. '__' → logprob: -11.127004623413086
    5. ' "__' → logprob: -11.752004623413086
    6. ' '' → logprob: -12.127004623413086
    7. ' '__' → logprob: -14.252004623413086
    8. '"user' → logprob: -14.877004623413086
    9. '_' → logprob: -15.127004623413086
    10. ' __' → logprob: -16.002004623413086

Token 58: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -1.8908587662735954e-05
    2. 'name' → logprob: -11.125019073486328
    3. 'ma' → logprob: -12.625019073486328
    4. ' main' → logprob: -14.250019073486328
    5. 'm' → logprob: -16.500019073486328
    6. 'built' → logprob: -17.625019073486328
    7. '_main' → logprob: -17.750019073486328
    8. '	main' → logprob: -18.250019073486328
    9. 'mp' → logprob: -18.875019073486328
    10. 'maine' → logprob: -18.875019073486328

Token 59: '__":
' (ID: 49892)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.1270153522491455
    2. '__":
' → logprob: -2.1270153522491455
    3. '__:' → logprob: -10.377015113830566
    4. '__.' → logprob: -10.377015113830566
    5. '__["' → logprob: -11.752015113830566
    6. '_' → logprob: -12.002015113830566
    7. '"' → logprob: -12.627015113830566
    8. '__':
' → logprob: -12.627015113830566
    9. '__",' → logprob: -13.877015113830566
    10. '__.__' → logprob: -14.002015113830566

Token 60: '   ' (ID: 271)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.0062956297770142555
    2. 'main' → logprob: -5.631295680999756
    3. '	main' → logprob: -6.381295680999756
    4. '   ' → logprob: -7.006295680999756
    5. ' ' → logprob: -10.006295204162598
    6. '_main' → logprob: -10.881295204162598
    7. '<|end|>' → logprob: -11.131295204162598
    8. '    
' → logprob: -13.131295204162598
    9. '   ' → logprob: -13.256295204162598
    10. '(main' → logprob: -13.381295204162598

Token 61: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' (adapté à ' main') → logprob: -0.3132629096508026
    2. ' main' → logprob: -1.313262939453125
    3. '	main' → logprob: -13.813262939453125
    4. '_main' → logprob: -16.563262939453125
    5. ' ma' → logprob: -18.188262939453125
    6. '.main' → logprob: -18.313262939453125
    7. '(main' → logprob: -18.438262939453125
    8. 'ma' → logprob: -18.688262939453125
    9. '   ' → logprob: -18.813262939453125
    10. 'mai' → logprob: -18.938262939453125

Token 62: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0005191935342736542
    2. '(' → logprob: -7.625519275665283
    3. '()
' → logprob: -10.500518798828125
    4. ' ()' → logprob: -14.000518798828125
    5. '()`' → logprob: -14.000518798828125
    6. '()

' → logprob: -14.500518798828125
    7. '`()' → logprob: -15.000518798828125
    8. '()\' → logprob: -15.250518798828125
    9. '```' → logprob: -15.375518798828125
    10. '(
' → logprob: -15.875518798828125


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 60
Tokens correctement prédits (1ère position, stricte): 25
Tokens correctement prédits (1ère position, avec adaptation): 26
Tokens correctement prédits (top 10): 49
Précision stricte (1ère position): 41.67%
Précision adaptée (1ère position): 43.33%
Précision (top 10): 81.67%
================================================================================
