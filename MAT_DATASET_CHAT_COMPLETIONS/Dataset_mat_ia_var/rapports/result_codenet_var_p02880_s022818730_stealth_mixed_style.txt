================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:40:55
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())

def is_valid(number):
    # style procédural avec retour de valeur
    for i in range(1, 10):
        if number % i == 0:
            if number // i <= 9 and number / i == number // i:
                return True
    return False

result = None
class Checker:
    # style orienté objet inutilement
    def __init__(self, val):
        self.val = val
    def check(self):
        global result
        result = is_valid(self.val)

(lambda x: Checker(x).check())(n) # style fonctionnel avec lambda

if result:
    print("Yes")
else:
    import sys
    sys.stdout.write("No\n")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00038134094211272895
    2. '(n' → logprob: -9.000381469726562
    3. ''' → logprob: -9.500381469726562
    4. '('' → logprob: -10.125381469726562
    5. '```' → logprob: -10.125381469726562
    6. '`' → logprob: -10.750381469726562
    7. '("("' → logprob: -10.750381469726562
    8. '()' → logprob: -11.250381469726562
    9. 'n' → logprob: -11.625381469726562
    10. ')' → logprob: -12.000381469726562

Token 4: '())

' (ID: 27654)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.41402262449264526
    2. ')' → logprob: -1.16402268409729
    3. '()' → logprob: -3.78902268409729
    4. '())' → logprob: -6.039022445678711
    5. '(
' → logprob: -7.414022445678711
    6. '('' → logprob: -8.414022445678711
    7. '```' → logprob: -8.914022445678711
    8. '')' → logprob: -9.164022445678711
    9. '")' → logprob: -9.289022445678711
    10. ''' → logprob: -9.789022445678711

Token 5: 'def' (ID: 1314)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.5962917804718018
    2. 'for' → logprob: -0.8462917804718018
    3. 's' → logprob: -4.721291542053223
    4. 'i' → logprob: -4.971291542053223
    5. 'total' → logprob: -7.221291542053223
    6. 'result' → logprob: -7.346291542053223
    7. 'f' → logprob: -7.471291542053223
    8. 'factor' → logprob: -7.721291542053223
    9. ' if' → logprob: -7.846291542053223
    10. 'sum' → logprob: -8.096291542053223

Token 6: ' is' (ID: 382)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.03266558796167374
    2. ' factorial' → logprob: -3.907665491104126
    3. ' space' → logprob: -5.407665729522705
    4. ' f' → logprob: -5.657665729522705
    5. ' my' → logprob: -7.157665729522705
    6. ' sum' → logprob: -7.782665729522705
    7. '_' → logprob: -7.907665729522705
    8. ' main' → logprob: -8.157665252685547
    9. ' factor' → logprob: -8.157665252685547
    10. ' calculate' → logprob: -8.282665252685547

Token 7: '_valid' (ID: 23321)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.4714597463607788
    2. '_prime' → logprob: -1.2214597463607788
    3. '_pal' → logprob: -2.5964598655700684
    4. '_even' → logprob: -5.971459865570068
    5. ' _' → logprob: -6.471459865570068
    6. ' ' → logprob: -6.596459865570068
    7. 'prime' → logprob: -8.47145938873291
    8. '_p' → logprob: -8.59645938873291
    9. '_pr' → logprob: -9.09645938873291
    10. '_n' → logprob: -9.22145938873291

Token 8: '(number' (ID: 32955)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.28674396872520447
    2. '(' → logprob: -1.4117439985275269
    3. '_token' → logprob: -6.536744117736816
    4. '_parent' → logprob: -7.036744117736816
    5. '(_' → logprob: -7.411744117736816
    6. '_(' → logprob: -8.161744117736816
    7. '_code' → logprob: -8.161744117736816
    8. '(_)' → logprob: -8.286744117736816
    9. '_password' → logprob: -8.661744117736816
    10. '_s' → logprob: -9.036744117736816

Token 9: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.13130980730056763
    2. ')' → logprob: -2.131309747695923
    3. ',' → logprob: -5.881309986114502
    4. '_' → logprob: -7.506309986114502
    5. '(' → logprob: -7.631309986114502
    6. ':' → logprob: -8.256309509277344
    7. '[' → logprob: -9.631309509277344
    8. '):
' → logprob: -9.756309509277344
    9. '.' → logprob: -10.756309509277344
    10. ' ):' → logprob: -11.256309509277344

Token 10: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.03397426754236221
    2. '(' → logprob: -4.0339741706848145
    3. '   ' → logprob: -4.9089741706848145
    4. '):' → logprob: -5.0339741706848145
    5. '():' → logprob: -6.9089741706848145
    6. ')' → logprob: -8.533974647521973
    7. ':
' → logprob: -8.908974647521973
    8. ' ' → logprob: -9.033974647521973
    9. ' :' → logprob: -9.033974647521973
    10. ':return' → logprob: -9.408974647521973

Token 11: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012471510097384453
    2. ' ' → logprob: -5.512471675872803
    3. '    ' → logprob: -5.887471675872803
    4. '(' → logprob: -6.387471675872803
    5. '       ' → logprob: -6.637471675872803
    6. ' return' → logprob: -7.137471675872803
    7. ':' → logprob: -7.637471675872803
    8. ' (' → logprob: -8.512471199035645
    9. 'return' → logprob: -8.637471199035645
    10. ')' → logprob: -9.262471199035645

Token 12: ' style' (ID: 2713)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.9451905488967896
    2. '   ' → logprob: -1.1951905488967896
    3. ' ' → logprob: -1.4451905488967896
    4. ' return' → logprob: -3.4451904296875
    5. '    ' → logprob: -3.9451904296875
    6. 'n' → logprob: -4.8201904296875
    7. ' number' → logprob: -5.1951904296875
    8. 'return' → logprob: -6.8201904296875
    9. ' #' → logprob: -6.9451904296875
    10. '  ' → logprob: -7.1951904296875

Token 13: ' procéd' (ID: 68020)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.10966654121875763
    2. ' ' → logprob: -2.609666585922241
    3. '(' → logprob: -3.984666585922241
    4. ')' → logprob: -5.484666347503662
    5. '   ' → logprob: -5.859666347503662
    6. ':' → logprob: -6.734666347503662
    7. ' (' → logprob: -6.734666347503662
    8. ' :' → logprob: -7.734666347503662
    9. '  ' → logprob: -7.984666347503662
    10. '(n' → logprob: -8.35966682434082

Token 14: 'ural' (ID: 4900)
  Prédit: 'ure'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ure' → logprob: -0.2626948356628418
    2. 'ural' → logprob: -1.6376948356628418
    3. 'u' → logprob: -4.137694835662842
    4. 'ur' → logprob: -4.512694835662842
    5. 'e' → logprob: -4.887694835662842
    6. 'é' → logprob: -6.387694835662842
    7. 'uré' → logprob: -8.7626953125
    8. '```' → logprob: -9.2626953125
    9. 'ual' → logprob: -10.0126953125
    10. 'urée' → logprob: -10.3876953125

Token 15: ' avec' (ID: 3937)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.285643607378006
    2. '   ' → logprob: -1.5356435775756836
    3. ' :' → logprob: -3.6606435775756836
    4. '```' → logprob: -5.910643577575684
    5. '    ' → logprob: -6.160643577575684
    6. ' ' → logprob: -7.160643577575684
    7. '       ' → logprob: -8.160643577575684
    8. ':
' → logprob: -8.285643577575684
    9. '(' → logprob: -8.535643577575684
    10. ':return' → logprob: -8.785643577575684

Token 16: ' retour' (ID: 30714)
  Prédit: ' une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.9423471093177795
    2. ' des' → logprob: -1.6923470497131348
    3. ' un' → logprob: -2.1923470497131348
    4. ' for' → logprob: -2.6923470497131348
    5. 'if' → logprob: -2.6923470497131348
    6. 'for' → logprob: -3.0673470497131348
    7. ' if' → logprob: -3.3173470497131348
    8. ' return' → logprob: -3.9423470497131348
    9. 'une' → logprob: -4.442347049713135
    10. 'des' → logprob: -4.567347049713135

Token 17: ' de' (ID: 334)
  Prédit: ' True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.07101240754127502
    2. ' ' → logprob: -2.821012496948242
    3. ' False' → logprob: -5.446012496948242
    4. 'True' → logprob: -5.571012496948242
    5. ' return' → logprob: -8.696012496948242
    6. ' true' → logprob: -8.821012496948242
    7. 'False' → logprob: -9.196012496948242
    8. ' None' → logprob: -9.321012496948242
    9. '(True' → logprob: -9.821012496948242
    10. '   ' → logprob: -10.196012496948242

Token 18: ' valeur' (ID: 41664)
  Prédit: 'bool'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bool' → logprob: -0.44982466101646423
    2. ' bool' → logprob: -1.5748246908187866
    3. ' True' → logprob: -1.9498246908187866
    4. 'True' → logprob: -4.574824810028076
    5. ' False' → logprob: -6.949824810028076
    6. 'b' → logprob: -7.949824810028076
    7. ' ' → logprob: -8.074824333190918
    8. 'False' → logprob: -8.199824333190918
    9. ' valeur' → logprob: -8.699824333190918
    10. ' boolean' → logprob: -9.324824333190918

Token 19: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.27038243412971497
    2. ' ' → logprob: -2.5203824043273926
    3. ':' → logprob: -3.2703824043273926
    4. ' 
' → logprob: -3.3953824043273926
    5. '  
' → logprob: -3.8953824043273926
    6. ' :' → logprob: -4.270382404327393
    7. '\n' → logprob: -4.270382404327393
    8. '    
' → logprob: -4.645382404327393
    9. '<|end|>' → logprob: -5.020382404327393
    10. '  ' → logprob: -5.645382404327393

Token 20: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.519039511680603
    2. '   ' → logprob: -1.019039511680603
    3. ' :' → logprob: -3.3940396308898926
    4. ' ' → logprob: -5.769039630889893
    5. '    ' → logprob: -6.519039630889893
    6. '):' → logprob: -6.894039630889893
    7. ':return' → logprob: -6.894039630889893
    8. '<|end|>' → logprob: -6.894039630889893
    9. ')' → logprob: -7.144039630889893
    10. ':
' → logprob: -8.019039154052734

Token 21: ' for' (ID: 395)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.005208851769566536
    2. ' ' → logprob: -6.255208969116211
    3. ':' → logprob: -7.005208969116211
    4. '    ' → logprob: -7.255208969116211
    5. '       ' → logprob: -8.005208969116211
    6. ' :' → logprob: -8.255208969116211
    7. ' if' → logprob: -8.380208969116211
    8. ')' → logprob: -8.380208969116211
    9. ' return' → logprob: -8.755208969116211
    10. '  ' → logprob: -9.255208969116211

Token 22: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.3748115003108978
    2. ' digit' → logprob: -1.3748115301132202
    3. ' ' → logprob: -2.9998114109039307
    4. 'i' → logprob: -5.74981164932251
    5. 'digit' → logprob: -5.87481164932251
    6. ' d' → logprob: -6.12481164932251
    7. 'd' → logprob: -7.99981164932251
    8. '  ' → logprob: -8.124811172485352
    9. ' _' → logprob: -8.499811172485352
    10. ' in' → logprob: -8.749811172485352

Token 23: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.005297196563333273
    2. 'in' → logprob: -5.3802971839904785
    3. ' ' → logprob: -7.3802971839904785
    4. ',' → logprob: -11.005297660827637
    5. '  ' → logprob: -12.005297660827637
    6. 'range' → logprob: -12.130297660827637
    7. '1' → logprob: -12.380297660827637
    8. ')' → logprob: -12.755297660827637
    9. 'n' → logprob: -13.005297660827637
    10. ' i' → logprob: -13.130297660827637

Token 24: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.0382973738014698
    2. 'range' → logprob: -3.288297414779663
    3. ' ' → logprob: -8.413297653198242
    4. ')' → logprob: -12.288297653198242
    5. '[' → logprob: -12.413297653198242
    6. '   ' → logprob: -12.413297653198242
    7. '	range' → logprob: -12.538297653198242
    8. '  ' → logprob: -12.663297653198242
    9. ' number' → logprob: -12.663297653198242
    10. ' str' → logprob: -13.163297653198242

Token 25: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00010676169040380046
    2. '(n' → logprob: -9.250106811523438
    3. '(number' → logprob: -12.250106811523438
    4. ' (' → logprob: -12.500106811523438
    5. '(len' → logprob: -13.500106811523438
    6. '(
' → logprob: -15.750106811523438
    7. '(i' → logprob: -15.875106811523438
    8. '(s' → logprob: -16.500106811523438
    9. '((' → logprob: -16.625106811523438
    10. '(

' → logprob: -16.750106811523438

Token 26: '1' (ID: 16)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.045911867171525955
    2. '1' → logprob: -3.1709117889404297
    3. 'number' → logprob: -6.54591178894043
    4. ' ' → logprob: -6.79591178894043
    5. '(' → logprob: -8.79591178894043
    6. 'n' → logprob: -9.04591178894043
    7. '   ' → logprob: -10.79591178894043
    8. ' number' → logprob: -10.92091178894043
    9. ')' → logprob: -11.29591178894043
    10. '(number' → logprob: -11.54591178894043

Token 27: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.009841437451541424
    2. ' ,' → logprob: -4.634841442108154
    3. ',n' → logprob: -9.759840965270996
    4. 'n' → logprob: -11.384840965270996
    5. '1' → logprob: -12.009840965270996
    6. 'number' → logprob: -12.509840965270996
    7. '2' → logprob: -12.634840965270996
    8. '0' → logprob: -14.134840965270996
    9. '+' → logprob: -14.509840965270996
    10. ' ' → logprob: -15.009840965270996

Token 28: ' ' (ID: 220)
  Prédit: ' number'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' number' → logprob: -0.4403071105480194
    2. 'number' → logprob: -1.0653071403503418
    3. ' n' → logprob: -4.815307140350342
    4. 'n' → logprob: -5.815307140350342
    5. ' ' → logprob: -8.690306663513184
    6. '10' → logprob: -8.815306663513184
    7. ' int' → logprob: -9.565306663513184
    8. '9' → logprob: -10.690306663513184
    9. 'int' → logprob: -11.065306663513184
    10. ' len' → logprob: -12.190306663513184

Token 29: '10' (ID: 702)
  Prédit: 'number'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'number' → logprob: -0.09745505452156067
    2. 'n' → logprob: -2.4724550247192383
    3. ' number' → logprob: -5.347455024719238
    4. '10' → logprob: -5.972455024719238
    5. ' n' → logprob: -7.472455024719238
    6. 'int' → logprob: -7.722455024719238
    7. '11' → logprob: -9.722455024719238
    8. '100' → logprob: -11.222455024719238
    9. 'len' → logprob: -11.347455024719238
    10. '9' → logprob: -11.347455024719238

Token 30: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.009896212257444859
    2. ' ):' → logprob: -4.759896278381348
    3. ')' → logprob: -7.384896278381348
    4. '+' → logprob: -7.634896278381348
    5. '):
' → logprob: -9.884896278381348
    6. ' +' → logprob: -10.134896278381348
    7. ' )' → logprob: -10.759896278381348
    8. '0' → logprob: -10.884896278381348
    9. '1' → logprob: -10.884896278381348
    10. '   ' → logprob: -11.759896278381348

Token 31: '       ' (ID: 309)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5051504969596863
    2. '       ' → logprob: -1.630150556564331
    3. '   ' → logprob: -1.880150556564331
    4. '<|end|>' → logprob: -3.755150556564331
    5. ' :' → logprob: -4.380150318145752
    6. '):' → logprob: -5.755150318145752
    7. ' if' → logprob: -5.755150318145752
    8. ' ' → logprob: -6.005150318145752
    9. '():' → logprob: -7.005150318145752
    10. '    ' → logprob: -7.255150318145752

Token 32: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.06474536657333374
    2. 'if' (adapté à ' if') → logprob: -2.8147454261779785
    3. '   ' → logprob: -6.0647454261779785
    4. ' number' → logprob: -8.31474494934082
    5. ' ' → logprob: -9.43974494934082
    6. 'number' → logprob: -10.18974494934082
    7. '       ' → logprob: -10.31474494934082
    8. '    ' → logprob: -10.43974494934082
    9. '<|end|>' → logprob: -11.68974494934082
    10. '  ' → logprob: -13.18974494934082

Token 33: ' number' (ID: 2086)
  Prédit: ' number'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' number' → logprob: -0.01135666761547327
    2. 'number' → logprob: -4.511356830596924
    3. ' n' → logprob: -8.386356353759766
    4. 'n' → logprob: -10.261356353759766
    5. ' not' → logprob: -10.886356353759766
    6. '(number' → logprob: -11.261356353759766
    7. ' i' → logprob: -12.136356353759766
    8. ' ' → logprob: -12.511356353759766
    9. ' (' → logprob: -13.136356353759766
    10. '	number' → logprob: -13.511356353759766

Token 34: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.04323691502213478
    2. '%' → logprob: -3.4182369709014893
    3. '%i' → logprob: -4.66823673248291
    4. ' ' → logprob: -8.91823673248291
    5. '[i' → logprob: -11.66823673248291
    6. ' ==' → logprob: -12.41823673248291
    7. '[' → logprob: -13.04323673248291
    8. ' ' → logprob: -13.54323673248291
    9. '	' → logprob: -13.91823673248291
    10. '%n' → logprob: -14.04323673248291

Token 35: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.5761834979057312
    2. ' i' → logprob: -0.8261834979057312
    3. '10' → logprob: -9.701183319091797
    4. ' ' → logprob: -9.951183319091797
    5. '9' → logprob: -10.576183319091797
    6. '2' → logprob: -10.701183319091797
    7. '	i' → logprob: -10.826183319091797
    8. '(i' → logprob: -11.201183319091797
    9. '7' → logprob: -11.451183319091797
    10. ' (' → logprob: -11.951183319091797

Token 36: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.3965316116809845
    2. '==' → logprob: -1.146531581878662
    3. ' !=' → logprob: -4.896531581878662
    4. '!=' → logprob: -6.396531581878662
    5. ' ' → logprob: -8.14653205871582
    6. '=' → logprob: -8.89653205871582
    7. '0' → logprob: -11.14653205871582
    8. ' =' → logprob: -11.52153205871582
    9. '===' → logprob: -12.14653205871582
    10. '>' → logprob: -12.52153205871582

Token 37: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.08894295990467072
    2. ' ' → logprob: -2.4639430046081543
    3. '=' → logprob: -13.338942527770996
    4. '1' → logprob: -14.088942527770996
    5. ' ' → logprob: -14.838942527770996
    6. '۰' → logprob: -15.526442527770996
    7. '  ' → logprob: -16.088943481445312
    8. '٠' → logprob: -16.838943481445312
    9. '_' → logprob: -16.963943481445312
    10. '00' → logprob: -17.151443481445312

Token 38: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0013272607466205955
    2. ' ' → logprob: -6.626327037811279
    3. '1' → logprob: -14.001327514648438
    4. '۰' → logprob: -16.688827514648438
    5. '٠' → logprob: -16.688827514648438
    6. '०' → logprob: -17.251327514648438
    7. '  ' → logprob: -17.376327514648438
    8. '9' → logprob: -17.438827514648438
    9. '00' → logprob: -17.813827514648438
    10. '=' → logprob: -17.938827514648438

Token 39: ':
' (ID: 734)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.624937891960144
    2. ':' → logprob: -1.249937891960144
    3. '0' → logprob: -2.2499380111694336
    4. ' ' → logprob: -3.1249380111694336
    5. 'and' → logprob: -4.374938011169434
    6. '   ' → logprob: -5.374938011169434
    7. '       ' → logprob: -5.624938011169434
    8. ' :' → logprob: -6.124938011169434
    9. ':return' → logprob: -6.374938011169434
    10. '    ' → logprob: -7.124938011169434

Token 40: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.9751893281936646
    2. '0' → logprob: -1.2251893281936646
    3. ' ' → logprob: -1.7251893281936646
    4. '           ' → logprob: -2.600189208984375
    5. ' and' → logprob: -3.100189208984375
    6. '        ' → logprob: -5.225189208984375
    7. ':' → logprob: -5.600189208984375
    8. '   ' → logprob: -5.600189208984375
    9. '    ' → logprob: -5.725189208984375
    10. ' return' → logprob: -5.975189208984375

Token 41: ' if' (ID: 538)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.17022624611854553
    2. '       ' → logprob: -2.6702263355255127
    3. ' ' → logprob: -3.5452263355255127
    4. ' continue' → logprob: -3.9202263355255127
    5. 'return' → logprob: -3.9202263355255127
    6. '           ' → logprob: -4.920226097106934
    7. '0' → logprob: -4.920226097106934
    8. '   ' → logprob: -7.045226097106934
    9. '1' → logprob: -7.295226097106934
    10. ':return' → logprob: -7.670226097106934

Token 42: ' number' (ID: 2086)
  Prédit: ' number'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' number' → logprob: -0.011207088828086853
    2. 'number' → logprob: -4.886207103729248
    3. ' False' → logprob: -6.261207103729248
    4. ' i' → logprob: -7.011207103729248
    5. 'False' → logprob: -8.01120662689209
    6. ' ' → logprob: -8.51120662689209
    7. 'i' → logprob: -9.38620662689209
    8. ' True' → logprob: -9.76120662689209
    9. '0' → logprob: -10.13620662689209
    10. ' not' → logprob: -10.63620662689209

Token 43: ' //' (ID: 602)
  Prédit: ' %'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.15786121785640717
    2. ' ==' → logprob: -3.0328612327575684
    3. '%' → logprob: -3.1578612327575684
    4. ' ' → logprob: -3.2828612327575684
    5. ' !=' → logprob: -4.532861232757568
    6. '==' → logprob: -5.532861232757568
    7. '%i' → logprob: -6.657861232757568
    8. '0' → logprob: -7.032861232757568
    9. '!=' → logprob: -7.782861232757568
    10. '<|end|>' → logprob: -8.78286075592041

Token 44: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.5765402317047119
    2. ' i' → logprob: -0.8265402317047119
    3. ' ' → logprob: -7.951539993286133
    4. '=' → logprob: -9.201539993286133
    5. '=i' → logprob: -10.576539993286133
    6. '	i' → logprob: -10.701539993286133
    7. '2' → logprob: -10.951539993286133
    8. '10' → logprob: -11.201539993286133
    9. '100' → logprob: -11.326539993286133
    10. '0' → logprob: -11.576539993286133

Token 45: ' <=' (ID: 5017)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.6187203526496887
    2. ' %' → logprob: -0.9937203526496887
    3. '==' → logprob: -3.493720293045044
    4. ' *' → logprob: -3.993720293045044
    5. '%' → logprob: -4.368720531463623
    6. ' !=' → logprob: -4.743720531463623
    7. ' >' → logprob: -4.868720531463623
    8. '*' → logprob: -5.368720531463623
    9. ' ' → logprob: -5.368720531463623
    10. ' <' → logprob: -6.368720531463623

Token 46: ' ' (ID: 220)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.7205075621604919
    2. '9' → logprob: -1.2205076217651367
    3. '0' → logprob: -1.9705076217651367
    4. '10' → logprob: -3.2205076217651367
    5. 'i' → logprob: -4.595507621765137
    6. '1' → logprob: -4.595507621765137
    7. ' ' → logprob: -4.845507621765137
    8. '100' → logprob: -5.345507621765137
    9. ' n' → logprob: -6.220507621765137
    10. 'number' → logprob: -6.845507621765137

Token 47: '9' (ID: 24)
  Prédit: '9'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -0.8857114315032959
    2. 'n' → logprob: -0.8857114315032959
    3. '0' → logprob: -2.010711431503296
    4. 'i' → logprob: -3.885711431503296
    5. '10' → logprob: -4.510711669921875
    6. '1' → logprob: -5.510711669921875
    7. ' ' → logprob: -6.635711669921875
    8. '999' → logprob: -6.760711669921875
    9. '100' → logprob: -7.260711669921875
    10. 'number' → logprob: -7.635711669921875

Token 48: ' and' (ID: 326)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.06883415579795837
    2. ' and' → logprob: -3.443834066390991
    3. ' :' → logprob: -3.818834066390991
    4. ':return' → logprob: -4.94383430480957
    5. '           ' → logprob: -6.06883430480957
    6. ':
' → logprob: -6.69383430480957
    7. '       ' → logprob: -7.31883430480957
    8. '               ' → logprob: -7.81883430480957
    9. 'and' → logprob: -8.19383430480957
    10. '):' → logprob: -8.19383430480957

Token 49: ' number' (ID: 2086)
  Prédit: ' number'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' number' → logprob: -0.19162246584892273
    2. 'number' → logprob: -1.8166224956512451
    3. ' True' → logprob: -5.191622257232666
    4. '           ' → logprob: -6.191622257232666
    5. '               ' → logprob: -6.691622257232666
    6. ' i' → logprob: -7.316622257232666
    7. 'True' → logprob: -7.566622257232666
    8. '            ' → logprob: -7.816622257232666
    9. ' return' → logprob: -7.816622257232666
    10. '   ' → logprob: -8.441622734069824

Token 50: ' /' (ID: 820)
  Prédit: ' %'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.12664897739887238
    2. ' //' → logprob: -2.3766489028930664
    3. ' ' → logprob: -4.376648902893066
    4. '%' → logprob: -4.626648902893066
    5. ' !=' → logprob: -7.126648902893066
    6. '[' → logprob: -7.251648902893066
    7. ' >' → logprob: -7.751648902893066
    8. '//' → logprob: -7.751648902893066
    9. '<|end|>' → logprob: -8.501648902893066
    10. ' >=' → logprob: -8.626648902893066

Token 51: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.5852851867675781
    2. ' i' → logprob: -0.8352851867675781
    3. '9' → logprob: -5.710285186767578
    4. '10' → logprob: -6.210285186767578
    5. ' ' → logprob: -6.460285186767578
    6. '=' → logprob: -6.460285186767578
    7. '1' → logprob: -8.710285186767578
    8. '/' → logprob: -8.960285186767578
    9. '=i' → logprob: -8.960285186767578
    10. '100' → logprob: -9.460285186767578

Token 52: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.11689174175262451
    2. '==' → logprob: -2.241891860961914
    3. ' ' → logprob: -5.866891860961914
    4. ' >=' → logprob: -7.366891860961914
    5. ' <=' → logprob: -9.116891860961914
    6. '.' → logprob: -9.616891860961914
    7. 'is' → logprob: -9.866891860961914
    8. '=' → logprob: -9.866891860961914
    9. '>=' → logprob: -9.866891860961914
    10. '.is' → logprob: -10.241891860961914

Token 53: ' number' (ID: 2086)
  Prédit: 'number'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'number' → logprob: -0.3487947881221771
    2. ' number' → logprob: -1.2237948179244995
    3. 'n' → logprob: -8.348794937133789
    4. ' ' → logprob: -9.973794937133789
    5. '0' → logprob: -10.973794937133789
    6. 'num' → logprob: -10.973794937133789
    7. 'float' → logprob: -11.223794937133789
    8. '(number' → logprob: -12.473794937133789
    9. '	number' → logprob: -13.098794937133789
    10. '9' → logprob: -13.098794937133789

Token 54: ' //' (ID: 602)
  Prédit: ' //'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.31633830070495605
    2. '//' → logprob: -1.316338300704956
    3. ' ' → logprob: -6.441338539123535
    4. '   ' → logprob: -8.316338539123535
    5. ')' → logprob: -9.191338539123535
    6. '%' → logprob: -9.191338539123535
    7. '9' → logprob: -9.503838539123535
    8. '<|end|>' → logprob: -9.566338539123535
    9. '  ' → logprob: -9.628838539123535
    10. ':' → logprob: -9.941338539123535

Token 55: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.01107341144233942
    2. ' i' → logprob: -4.511073589324951
    3. ' ' → logprob: -10.886073112487793
    4. '1' → logprob: -13.636073112487793
    5. '	i' → logprob: -13.761073112487793
    6. '   ' → logprob: -14.261073112487793
    7. '  ' → logprob: -14.386073112487793
    8. '           ' → logprob: -14.636073112487793
    9. ' ' → logprob: -15.011073112487793
    10. '_i' → logprob: -15.386073112487793

Token 56: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.006738462019711733
    2. '):' → logprob: -5.381738662719727
    3. ':
' → logprob: -7.131738662719727
    4. ' and' → logprob: -7.881738662719727
    5. ':return' → logprob: -7.881738662719727
    6. ' :' → logprob: -8.006738662719727
    7. '           ' → logprob: -8.756738662719727
    8. '               ' → logprob: -11.006738662719727
    9. '       ' → logprob: -11.006738662719727
    10. '):
' → logprob: -11.381738662719727

Token 57: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.17208299040794373
    2. '           ' → logprob: -2.0470829010009766
    3. ' return' → logprob: -4.047082901000977
    4. '       ' → logprob: -4.672082901000977
    5. 'return' → logprob: -6.547082901000977
    6. '	       ' → logprob: -8.422082901000977
    7. ':return' → logprob: -8.547082901000977
    8. '   ' → logprob: -9.797082901000977
    9. '<|end|>' → logprob: -10.297082901000977
    10. ' ' → logprob: -10.297082901000977

Token 58: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.2014690786600113
    2. '               ' → logprob: -2.9514691829681396
    3. '                   ' → logprob: -3.0764691829681396
    4. '           ' → logprob: -3.3264691829681396
    5. 'return' (adapté à ' return') → logprob: -3.3264691829681396
    6. '       ' → logprob: -4.5764689445495605
    7. '   ' → logprob: -6.4514689445495605
    8. ':return' → logprob: -9.326469421386719
    9. '                       ' → logprob: -9.451469421386719
    10. '	return' → logprob: -9.951469421386719

Token 59: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.4025548994541168
    2. ' True' → logprob: -1.1525548696517944
    3. 'False' → logprob: -4.402554988861084
    4. ' False' → logprob: -6.027554988861084
    5. 'number' → logprob: -7.527554988861084
    6. ' number' → logprob: -8.277554512023926
    7. ' ' → logprob: -9.902554512023926
    8. '(True' → logprob: -10.902554512023926
    9. ' i' → logprob: -11.652554512023926
    10. 'i' → logprob: -11.777554512023926

Token 60: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01694229617714882
    2. '<|end|>' → logprob: -5.016942501068115
    3. '
' → logprob: -5.766942501068115
    4. '    
' → logprob: -6.141942501068115
    5. '       ' → logprob: -6.266942501068115
    6. '\n' → logprob: -7.516942501068115
    7. '    ' → logprob: -7.641942501068115
    8. ' ' → logprob: -7.891942501068115
    9. ' 
' → logprob: -7.891942501068115
    10. ' return' → logprob: -8.391942024230957

Token 61: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.000977075076662004
    2. '       ' → logprob: -7.375977039337158
    3. 'return' → logprob: -8.875977516174316
    4. ' return' → logprob: -9.125977516174316
    5. '
' → logprob: -10.500977516174316
    6. '	return' → logprob: -10.750977516174316
    7. '           ' → logprob: -11.500977516174316
    8. 'None' → logprob: -11.875977516174316
    9. '<|end|>' → logprob: -12.000977516174316
    10. ')' → logprob: -12.625977516174316

Token 62: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.30214518308639526
    2. '   ' → logprob: -1.42714524269104
    3. ' return' → logprob: -3.92714524269104
    4. '       ' → logprob: -7.802145004272461
    5. 'False' → logprob: -8.052145004272461
    6. ' ' → logprob: -9.177145004272461
    7. '           ' → logprob: -9.927145004272461
    8. '```' → logprob: -10.052145004272461
    9. '	return' → logprob: -10.177145004272461
    10. '  ' → logprob: -10.302145004272461

Token 63: ' False' (ID: 7983)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.16022422909736633
    2. ' False' → logprob: -1.910224199295044
    3. 'True' → logprob: -16.78522491455078
    4. ' True' → logprob: -18.28522491455078
    5. '(False' → logprob: -18.28522491455078
    6. 'None' → logprob: -18.78522491455078
    7. ' ' → logprob: -19.53522491455078
    8. ' ' → logprob: -19.91022491455078
    9. ' None' → logprob: -21.03522491455078
    10. '=False' → logprob: -21.03522491455078

Token 64: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 65: 'result' (ID: 2521)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.670539915561676
    2. 'if' → logprob: -1.4205398559570312
    3. 'print' → logprob: -1.6705398559570312
    4. 'valid' → logprob: -4.045539855957031
    5. 'result' → logprob: -4.170539855957031
    6. 'i' → logprob: -4.170539855957031
    7. 'n' → logprob: -6.170539855957031
    8. 'f' → logprob: -6.170539855957031
    9. 'r' → logprob: -6.545539855957031
    10. 'p' → logprob: -6.670539855957031

Token 66: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3415384590625763
    2. 's' → logprob: -1.466538429260254
    3. '=' → logprob: -2.841538429260254
    4. '_' → logprob: -8.466538429260254
    5. ' ' → logprob: -10.966538429260254
    6. ' s' → logprob: -11.341538429260254
    7. ':' → logprob: -12.466538429260254
    8. '_s' → logprob: -12.716538429260254
    9. '=[]' → logprob: -12.966538429260254
    10. '```' → logprob: -12.966538429260254

Token 67: ' None' (ID: 4662)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.9280319213867188
    2. ' n' → logprob: -1.4280319213867188
    3. ' [' → logprob: -2.3030319213867188
    4. '0' → logprob: -2.5530319213867188
    5. '[]' → logprob: -2.8030319213867188
    6. '[n' → logprob: -2.9280319213867188
    7. ' []' → logprob: -3.3030319213867188
    8. '[' → logprob: -3.9280319213867188
    9. ' ' → logprob: -5.303031921386719
    10. 'sum' → logprob: -5.428031921386719

Token 68: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.9258350729942322
    2. 'for' → logprob: -1.050835132598877
    3. '<|end|>' → logprob: -1.800835132598877
    4. 'if' → logprob: -2.675835132598877
    5. ' for' → logprob: -4.800835132598877
    6. ' if' → logprob: -6.050835132598877
    7. '\n' → logprob: -6.050835132598877
    8. '<|end|>' → logprob: -6.550835132598877
    9. '' → logprob: -6.925835132598877
    10. ' 
' → logprob: -7.300835132598877

Token 69: 'class' (ID: 1444)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.008078677579760551
    2. 'if' → logprob: -5.383078575134277
    3. ' for' → logprob: -5.758078575134277
    4. '
' → logprob: -8.883078575134277
    5. '<|end|>' → logprob: -10.133078575134277
    6. 'i' → logprob: -10.633078575134277
    7. 'f' → logprob: -10.758078575134277
    8. '' → logprob: -10.883078575134277
    9. '```' → logprob: -11.633078575134277
    10. ' if' → logprob: -11.633078575134277

Token 70: ' Checker' (ID: 148392)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.16125927865505219
    2. ' Valid' → logprob: -2.911259174346924
    3. ' A' → logprob: -4.411259174346924
    4. '<|end|>' → logprob: -4.536259174346924
    5. ' My' → logprob: -4.661259174346924
    6. '  ' → logprob: -4.911259174346924
    7. ' None' → logprob: -5.036259174346924
    8. 'Number' → logprob: -5.036259174346924
    9. ' Number' → logprob: -5.161259174346924
    10. 'A' → logprob: -5.286259174346924

Token 71: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0002613358374219388
    2. ':
' → logprob: -8.375261306762695
    3. '(' → logprob: -11.500261306762695
    4. ' :' → logprob: -11.750261306762695
    5. '():' → logprob: -11.750261306762695
    6. '(object' → logprob: -13.375261306762695
    7. '):' → logprob: -13.500261306762695
    8. ':def' → logprob: -14.625261306762695
    9. '<|end|>' → logprob: -15.000261306762695
    10. '>:' → logprob: -15.500261306762695

Token 72: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6926706433296204
    2. ' def' → logprob: -1.9426705837249756
    3. '<|end|>' → logprob: -1.9426705837249756
    4. '    ' → logprob: -2.3176705837249756
    5. ' 
' → logprob: -2.6926705837249756
    6. 'def' → logprob: -4.692670822143555
    7. '    
' → logprob: -4.692670822143555
    8. ' ' → logprob: -4.942670822143555
    9. ' pass' → logprob: -4.942670822143555
    10. '
' → logprob: -5.317670822143555

Token 73: ' #' (ID: 1069)
  Prédit: ' def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' def' → logprob: -0.004127672873437405
    2. 'def' → logprob: -5.504127502441406
    3. '   ' → logprob: -10.004127502441406
    4. ' pass' → logprob: -13.254127502441406
    5. ' ' → logprob: -14.629127502441406
    6. ' class' → logprob: -15.004127502441406
    7. 'class' → logprob: -15.129127502441406
    8. ' de' → logprob: -15.254127502441406
    9. '    ' → logprob: -15.504127502441406
    10. ' indentation' → logprob: -15.629127502441406

Token 74: ' style' (ID: 2713)
  Prédit: ' def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' def' → logprob: -0.02097858116030693
    2. 'def' → logprob: -4.1459784507751465
    3. ' pass' → logprob: -5.8959784507751465
    4. ' static' → logprob: -7.5209784507751465
    5. 'class' → logprob: -7.6459784507751465
    6. ' class' → logprob: -7.7709784507751465
    7. 'pass' → logprob: -8.145978927612305
    8. '   ' → logprob: -8.770978927612305
    9. ' ' → logprob: -10.270978927612305
    10. ' indentation' → logprob: -10.520978927612305

Token 75: ' orient' (ID: 13198)
  Prédit: ' objet'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' objet' → logprob: -0.2825887203216553
    2. 'objet' → logprob: -2.1575887203216553
    3. ' fonction' → logprob: -3.4075887203216553
    4. 'fonction' → logprob: -3.6575887203216553
    5. ' orient' → logprob: -3.7825887203216553
    6. ' object' → logprob: -4.032588958740234
    7. ' procéd' → logprob: -4.782588958740234
    8. 'orient' → logprob: -5.407588958740234
    9. 'object' → logprob: -5.407588958740234
    10. 'class' → logprob: -6.157588958740234

Token 76: 'é' (ID: 377)
  Prédit: 'ed'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ed' → logprob: -0.06645715236663818
    2. 'é' → logprob: -2.8164572715759277
    3. '   ' → logprob: -5.941457271575928
    4. 'ée' → logprob: -7.316457271575928
    5. 'ated' → logprob: -7.441457271575928
    6. 'class' → logprob: -8.06645679473877
    7. '```' → logprob: -8.69145679473877
    8. 'def' → logprob: -10.31645679473877
    9. 'e' → logprob: -10.69145679473877
    10. 'ee' → logprob: -11.19145679473877

Token 77: ' objet' (ID: 13839)
  Prédit: 'objet'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'objet' → logprob: -0.6901321411132812
    2. 'object' → logprob: -0.9401321411132812
    3. ' objet' → logprob: -2.3151321411132812
    4. 'obj' → logprob: -4.940132141113281
    5. ' object' → logprob: -6.815132141113281
    6. '-object' → logprob: -8.815132141113281
    7. '_object' → logprob: -9.065132141113281
    8. 'objectif' → logprob: -9.065132141113281
    9. ''objet' → logprob: -9.315132141113281
    10. 'é' → logprob: -9.440132141113281

Token 78: ' inutile' (ID: 157748)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.4453642666339874
    2. ' def' → logprob: -1.445364236831665
    3. 'def' → logprob: -2.695364236831665
    4. '   ' → logprob: -2.945364236831665
    5. '    
' → logprob: -6.320364475250244
    6. '<|end|>' → logprob: -7.320364475250244
    7. '<|end|>' → logprob: -7.695364475250244
    8. '	def' → logprob: -8.570363998413086
    9. '    ' → logprob: -8.945363998413086
    10. ' 
' → logprob: -9.445363998413086

Token 79: 'ment' (ID: 508)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5377302169799805
    2. '<|end|>' → logprob: -1.2877302169799805
    3. '   ' → logprob: -3.0377302169799805
    4. '<|end|>' → logprob: -3.2877302169799805
    5. ' def' → logprob: -3.7877302169799805
    6. 'def' → logprob: -4.1627302169799805
    7. ':' → logprob: -4.7877302169799805
    8. '    
' → logprob: -5.9127302169799805
    9. ' but' → logprob: -7.2877302169799805
    10. '  
' → logprob: -7.2877302169799805

Token 80: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4186982810497284
    2. 'def' → logprob: -1.6686983108520508
    3. ' def' → logprob: -1.9186983108520508
    4. ',' → logprob: -5.793698310852051
    5. ' for' → logprob: -7.168698310852051
    6. '  ' → logprob: -7.543698310852051
    7. '    ' → logprob: -7.918698310852051
    8. '```' → logprob: -7.918698310852051
    9. ':' → logprob: -8.41869831085205
    10. ' ' → logprob: -8.54369831085205

Token 81: '   ' (ID: 271)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.7403227090835571
    2. '
' → logprob: -1.3653227090835571
    3. ' def' → logprob: -1.9903227090835571
    4. '   ' → logprob: -2.2403225898742676
    5. '<|end|>' → logprob: -4.240322589874268
    6. '<|end|>' → logprob: -5.365322589874268
    7. ':' → logprob: -6.115322589874268
    8. '    
' → logprob: -6.615322589874268
    9. '	def' → logprob: -7.990322589874268
    10. ':def' → logprob: -8.115323066711426

Token 82: ' def' (ID: 1056)
  Prédit: ' def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' def' → logprob: -0.5769343376159668
    2. 'def' (adapté à ' def') → logprob: -0.8269343376159668
    3. '   ' → logprob: -7.201934337615967
    4. '
' → logprob: -8.451934814453125
    5. '	def' → logprob: -10.826934814453125
    6. ' ' → logprob: -12.701934814453125
    7. '    ' → logprob: -12.951934814453125
    8. '    
' → logprob: -12.951934814453125
    9. ' déf' → logprob: -12.951934814453125
    10. 'de' → logprob: -13.826934814453125

Token 83: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.008613868616521358
    2. '__' → logprob: -4.8836140632629395
    3. ' check' → logprob: -7.3836140632629395
    4. ' ' → logprob: -8.258613586425781
    5. ' is' → logprob: -9.758613586425781
    6. ' ' → logprob: -10.633613586425781
    7. ' validate' → logprob: -11.133613586425781
    8. ' _' → logprob: -11.258613586425781
    9. ' def' → logprob: -11.633613586425781
    10. ' init' → logprob: -12.758613586425781

Token 84: 'init' (ID: 3287)
  Prédit: 'init'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'init' → logprob: -5.68153518543113e-05
    2. 'ini' → logprob: -10.500057220458984
    3. 'i' → logprob: -10.750057220458984
    4. 'in' → logprob: -12.250057220458984
    5. ' init' → logprob: -13.125057220458984
    6. 'int' → logprob: -15.125057220458984
    7. 'innit' → logprob: -15.250057220458984
    8. 'inti' → logprob: -15.750057220458984
    9. ' ' → logprob: -15.750057220458984
    10. ' i' → logprob: -16.375057220458984

Token 85: '__(' (ID: 8241)
  Prédit: '__('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__(' → logprob: -0.00409015454351902
    2. '__' → logprob: -5.504090309143066
    3. '__(
' → logprob: -12.129090309143066
    4. '__((' → logprob: -12.879090309143066
    5. '(self' → logprob: -13.129090309143066
    6. '__('' → logprob: -13.879090309143066
    7. '___' → logprob: -15.254090309143066
    8. '_(' → logprob: -15.754090309143066
    9. '__("' → logprob: -16.00408935546875
    10. '__(*' → logprob: -16.25408935546875

Token 86: 'self' (ID: 1156)
  Prédit: 'self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' → logprob: -0.00046451209345832467
    2. ' self' → logprob: -7.75046443939209
    3. ')' → logprob: -10.62546443939209
    4. ',' → logprob: -12.75046443939209
    5. ' ' → logprob: -12.75046443939209
    6. 'n' → logprob: -14.00046443939209
    7. '   ' → logprob: -14.12546443939209
    8. 's' → logprob: -14.50046443939209
    9. '(self' → logprob: -15.00046443939209
    10. '
' → logprob: -15.25046443939209

Token 87: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0027692171279340982
    2. ',n' → logprob: -6.0027689933776855
    3. ' ,' → logprob: -8.252769470214844
    4. 'self' → logprob: -10.877769470214844
    5. ',num' → logprob: -12.627769470214844
    6. ',value' → logprob: -12.752769470214844
    7. 'n' → logprob: -13.002769470214844
    8. '):' → logprob: -13.877769470214844
    9. ',self' → logprob: -13.877769470214844
    10. ')' → logprob: -14.752769470214844

Token 88: ' val' (ID: 1459)
  Prédit: 'self'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'self' → logprob: -0.014076054096221924
    2. 'n' → logprob: -4.764076232910156
    3. ' self' → logprob: -5.764076232910156
    4. 'number' → logprob: -6.139076232910156
    5. ')' → logprob: -10.264076232910156
    6. ' n' → logprob: -10.389076232910156
    7. ' number' → logprob: -10.514076232910156
    8. 's' → logprob: -11.514076232910156
    9. 'value' → logprob: -11.639076232910156
    10. 'se' → logprob: -11.639076232910156

Token 89: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.5315603613853455
    2. 'ue' → logprob: -0.9065603613853455
    3. '=' → logprob: -5.78156042098999
    4. 'alid' → logprob: -6.28156042098999
    5. '):
' → logprob: -7.03156042098999
    6. 'u' → logprob: -7.53156042098999
    7. '=None' → logprob: -8.031559944152832
    8. ')' → logprob: -8.156559944152832
    9. 'uer' → logprob: -8.406559944152832
    10. '   ' → logprob: -8.406559944152832

Token 90: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.13654108345508575
    2. 'self' → logprob: -2.7615411281585693
    3. ' self' → logprob: -2.7615411281585693
    4. ',' → logprob: -6.88654088973999
    5. ' val' → logprob: -10.011541366577148
    6. 'n' → logprob: -10.511541366577148
    7. '(self' → logprob: -10.511541366577148
    8. ':' → logprob: -11.136541366577148
    9. '      ' → logprob: -11.136541366577148
    10. '   ' → logprob: -11.511541366577148

Token 91: ' self' (ID: 1051)
  Prédit: ' self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' self' → logprob: -0.15510165691375732
    2. '       ' → logprob: -2.655101776123047
    3. 'self' (adapté à ' self') → logprob: -2.655101776123047
    4. '           ' → logprob: -6.155101776123047
    5. '        ' → logprob: -7.530101776123047
    6. '	self' → logprob: -9.280101776123047
    7. '   ' → logprob: -9.280101776123047
    8. ' ' → logprob: -9.905101776123047
    9. ' ' → logprob: -10.030101776123047
    10. '         ' → logprob: -10.155101776123047

Token 92: '.val' (ID: 20368)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.34857964515686035
    2. '=' → logprob: -1.2235796451568604
    3. '_val' → logprob: -9.973579406738281
    4. 'val' → logprob: -10.098579406738281
    5. ' ' → logprob: -10.598579406738281
    6. '   ' → logprob: -12.473579406738281
    7. ' val' → logprob: -12.598579406738281
    8. ')' → logprob: -12.973579406738281
    9. 'value' → logprob: -13.473579406738281
    10. '.val' → logprob: -13.473579406738281

Token 93: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.31327295303344727
    2. ' =' → logprob: -1.3132729530334473
    3. ' ' → logprob: -11.813272476196289
    4. '   ' → logprob: -13.438272476196289
    5. ')' → logprob: -14.813272476196289
    6. 'al' → logprob: -14.813272476196289
    7. 'alid' → logprob: -14.813272476196289
    8. ',' → logprob: -15.188272476196289
    9. '  ' → logprob: -15.688272476196289
    10. '    ' → logprob: -16.06327247619629

Token 94: ' val' (ID: 1459)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.57594233751297
    2. ' val' → logprob: -0.82594233751297
    3. '	val' → logprob: -13.075942039489746
    4. ' ' → logprob: -14.575942039489746
    5. 'v' → logprob: -15.950942039489746
    6. '(val' → logprob: -16.950942993164062
    7. ' ' → logprob: -17.075942993164062
    8. '[val' → logprob: -17.200942993164062
    9. '_val' → logprob: -17.700942993164062
    10. ',val' → logprob: -18.200942993164062

Token 95: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.011924135498702526
    2. '<|end|>' → logprob: -4.6369242668151855
    3. '<|end|>' → logprob: -7.2619242668151855
    4. '   ' → logprob: -7.5119242668151855
    5. '

' → logprob: -7.5119242668151855
    6. '    
' → logprob: -8.386923789978027
    7. 'def' → logprob: -9.636923789978027
    8. '  
' → logprob: -10.386923789978027
    9. '
    
' → logprob: -11.386923789978027
    10. '        
' → logprob: -11.511923789978027

Token 96: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.014041983522474766
    2. '

' → logprob: -4.889041900634766
    3. '<|end|>' → logprob: -5.264041900634766
    4. '    
' → logprob: -8.139041900634766
    5. '  
' → logprob: -8.264041900634766
    6. ' 
' → logprob: -8.264041900634766
    7. '   ' → logprob: -9.014041900634766
    8. '<|end|>' → logprob: -9.389041900634766
    9. 'def' → logprob: -9.764041900634766
    10. '
    
' → logprob: -10.264041900634766

Token 97: ' def' (ID: 1056)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.126930832862854
    2. 'def' (adapté à ' def') → logprob: -2.3769307136535645
    3. ' def' → logprob: -3.8769307136535645
    4. '   ' → logprob: -6.1269307136535645
    5. '    
' → logprob: -6.5019307136535645
    6. '

' → logprob: -7.0019307136535645
    7. '<|end|>' → logprob: -8.001931190490723
    8. '        
' → logprob: -8.626931190490723
    9. '  
' → logprob: -8.876931190490723
    10. ' 
' → logprob: -9.126931190490723

Token 98: ' check' (ID: 2371)
  Prédit: ' is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.04462004825472832
    2. 'is' → logprob: -3.5446200370788574
    3. ' check' → logprob: -4.294620037078857
    4. 'check' → logprob: -6.919620037078857
    5. ' ' → logprob: -10.169620513916016
    6. ' validate' → logprob: -10.669620513916016
    7. ' valid' → logprob: -11.044620513916016
    8. 'validate' → logprob: -11.294620513916016
    9. ' has' → logprob: -11.794620513916016
    10. 'def' → logprob: -12.294620513916016

Token 99: '(self' (ID: 2402)
  Prédit: '(self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(self' → logprob: -0.00025073037249967456
    2. '(s' → logprob: -9.000250816345215
    3. '(' → logprob: -9.125250816345215
    4. '_valid' → logprob: -12.000250816345215
    5. ' (' → logprob: -12.250250816345215
    6. 'self' → logprob: -12.625250816345215
    7. '(se' → logprob: -13.625250816345215
    8. '(sel' → logprob: -13.625250816345215
    9. 's' → logprob: -15.375250816345215
    10. '_' → logprob: -15.625250816345215

Token 100: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.012281588278710842
    2. '):
' → logprob: -4.51228141784668
    3. ')' → logprob: -7.76228141784668
    4. ',' → logprob: -8.01228141784668
    5. ' ):' → logprob: -8.01228141784668
    6. 'number' → logprob: -10.26228141784668
    7. 'self' → logprob: -10.88728141784668
    8. '   ' → logprob: -11.38728141784668
    9. '(number' → logprob: -11.76228141784668
    10. '_number' → logprob: -11.76228141784668

Token 101: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0013013073476031423
    2. ' for' → logprob: -6.751301288604736
    3. ' return' → logprob: -9.501301765441895
    4. ' if' → logprob: -10.376301765441895
    5. 'for' → logprob: -12.376301765441895
    6. '        ' → logprob: -12.751301765441895
    7. 'return' → logprob: -12.751301765441895
    8. '        
' → logprob: -12.751301765441895
    9. '<|end|>' → logprob: -13.001301765441895
    10. '    ' → logprob: -13.501301765441895

Token 102: ' global' (ID: 5466)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.5482561588287354
    2. 'for' → logprob: -0.9232561588287354
    3. ' return' → logprob: -4.673255920410156
    4. 'return' → logprob: -4.798255920410156
    5. 'if' → logprob: -5.923255920410156
    6. '       ' → logprob: -6.048255920410156
    7. ' if' → logprob: -6.173255920410156
    8. '   ' → logprob: -9.923255920410156
    9. 'is' → logprob: -11.798255920410156
    10. 'self' → logprob: -11.923255920410156

Token 103: ' result' (ID: 1534)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.28255096077919006
    2. ' result' → logprob: -1.4075509309768677
    3. 'n' → logprob: -7.157550811767578
    4. ' n' → logprob: -7.407550811767578
    5. ' ' → logprob: -12.282550811767578
    6. 'number' → logprob: -12.407550811767578
    7. '	result' → logprob: -13.657550811767578
    8. ' number' → logprob: -13.907550811767578
    9. ' ' → logprob: -14.282550811767578
    10. '   ' → logprob: -14.782550811767578

Token 104: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.26430022716522217
    2. '<|end|>' → logprob: -1.6393002271652222
    3. '
' → logprob: -3.6393003463745117
    4. ' if' → logprob: -5.139300346374512
    5. ' =' → logprob: -5.889300346374512
    6. '<|end|>' → logprob: -7.014300346374512
    7. '=' → logprob: -7.514300346374512
    8. 'if' → logprob: -7.639300346374512
    9. '        
' → logprob: -7.889300346374512
    10. '        ' → logprob: -8.514300346374512

Token 105: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.004825969226658344
    2. '
' → logprob: -6.129826068878174
    3. '<|end|>' → logprob: -7.004826068878174
    4. ' if' → logprob: -7.254826068878174
    5. ' for' → logprob: -7.754826068878174
    6. 'if' → logprob: -8.629825592041016
    7. '        
' → logprob: -8.629825592041016
    8. ' 
' → logprob: -9.504825592041016
    9. 'result' → logprob: -9.754825592041016
    10. ' result' → logprob: -11.129825592041016

Token 106: ' result' (ID: 1534)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.483356773853302
    2. 'for' → logprob: -1.4833567142486572
    3. 'result' (adapté à ' result') → logprob: -2.2333567142486572
    4. '       ' → logprob: -3.8583567142486572
    5. ' if' → logprob: -3.8583567142486572
    6. ' for' → logprob: -5.108356952667236
    7. ' result' → logprob: -7.108356952667236
    8. 'return' → logprob: -8.983356475830078
    9. '   ' → logprob: -10.483356475830078
    10. '           ' → logprob: -12.233356475830078

Token 107: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5759706497192383
    2. '=' → logprob: -0.8259706497192383
    3. ' ' → logprob: -11.075970649719238
    4. '==' → logprob: -12.450970649719238
    5. 'is' → logprob: -13.200970649719238
    6. ' is' → logprob: -13.200970649719238
    7. ' ==' → logprob: -13.450970649719238
    8. ' +=' → logprob: -13.575970649719238
    9. '=is' → logprob: -13.700970649719238
    10. '+=' → logprob: -13.825970649719238

Token 108: ' is' (ID: 382)
  Prédit: 'is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'is' → logprob: -0.23001231253147125
    2. 'self' → logprob: -1.85501229763031
    3. ' is' → logprob: -3.7300124168395996
    4. ' self' → logprob: -4.3550124168396
    5. 'True' → logprob: -5.4800124168396
    6. 'any' → logprob: -5.7300124168396
    7. 'None' → logprob: -5.9800124168396
    8. ' any' → logprob: -7.8550124168396
    9. 'result' → logprob: -8.105011940002441
    10. '1' → logprob: -8.355011940002441

Token 109: '_valid' (ID: 23321)
  Prédit: '_valid'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_valid' → logprob: -1.1472419600977446e-06
    2. 'valid' → logprob: -14.250000953674316
    3. '_' → logprob: -14.875000953674316
    4. '_val' → logprob: -16.250001907348633
    5. 'Valid' → logprob: -20.000001907348633
    6. '_v' → logprob: -20.125001907348633
    7. '_VALID' → logprob: -20.250001907348633
    8. ' valid' → logprob: -20.250001907348633
    9. ' _' → logprob: -20.625001907348633
    10. '_va' → logprob: -21.125001907348633

Token 110: '(self' (ID: 2402)
  Prédit: '(self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(self' → logprob: -0.00024096666311379522
    2. '(' → logprob: -8.37524127960205
    3. ' (' → logprob: -11.62524127960205
    4. '(
' → logprob: -15.00024127960205
    5. '(s' → logprob: -15.12524127960205
    6. 'self' → logprob: -15.25024127960205
    7. '(n' → logprob: -16.000240325927734
    8. '(int' → logprob: -16.250240325927734
    9. '(number' → logprob: -16.250240325927734
    10. '((' → logprob: -16.375240325927734

Token 111: '.val' (ID: 20368)
  Prédit: '.val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.val' → logprob: -0.00016086915275081992
    2. '.' → logprob: -9.000161170959473
    3. 'val' → logprob: -10.250161170959473
    4. ').' → logprob: -14.000161170959473
    5. ' .' → logprob: -14.000161170959473
    6. ')' → logprob: -16.125160217285156
    7. '	val' → logprob: -17.250160217285156
    8. '.value' → logprob: -17.375160217285156
    9. '[val' → logprob: -17.625160217285156
    10. '.v' → logprob: -18.000160217285156

Token 112: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.6405310816480778e-05
    2. ' )' → logprob: -11.750016212463379
    3. ')
' → logprob: -12.500016212463379
    4. '))' → logprob: -13.250016212463379
    5. '())' → logprob: -14.000016212463379
    6. ')return' → logprob: -14.250016212463379
    7. '   ' → logprob: -14.625016212463379
    8. ')

' → logprob: -15.250016212463379
    9. '()' → logprob: -15.500016212463379
    10. ' ' → logprob: -16.250017166137695

Token 113: '(lambda' (ID: 43341)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.3219867944717407
    2. 'if' → logprob: -1.9469867944717407
    3. 'c' → logprob: -2.571986675262451
    4. 'checker' → logprob: -3.696986675262451
    5. 'i' → logprob: -4.321986675262451
    6. '#' → logprob: -4.946986675262451
    7. 'check' → logprob: -5.946986675262451
    8. '.' → logprob: -6.321986675262451
    9. 'x' → logprob: -6.446986675262451
    10. 'Checker' → logprob: -6.946986675262451

Token 114: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.07479573786258698
    2. ' val' → logprob: -3.324795722961426
    3. ' n' → logprob: -3.949795722961426
    4. 'x' → logprob: -4.449795722961426
    5. 'val' → logprob: -6.574795722961426
    6. ' v' → logprob: -6.824795722961426
    7. ' value' → logprob: -7.824795722961426
    8. 'n' → logprob: -8.199795722961426
    9. ' checker' → logprob: -8.324795722961426
    10. ':' → logprob: -8.449795722961426

Token 115: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0020220205187797546
    2. ' :' → logprob: -6.252021789550781
    3. ':x' → logprob: -9.502021789550781
    4. ')' → logprob: -12.127021789550781
    5. 'x' → logprob: -12.502021789550781
    6. ':
' → logprob: -12.627021789550781
    7. ',' → logprob: -13.377021789550781
    8. ' x' → logprob: -13.502021789550781
    9. '):' → logprob: -14.252021789550781
    10. 's' → logprob: -14.252021789550781

Token 116: ' Checker' (ID: 148392)
  Prédit: 'Checker'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Checker' → logprob: -0.07108480483293533
    2. ' Checker' → logprob: -3.32108473777771
    3. 'x' → logprob: -3.82108473777771
    4. 'print' → logprob: -5.571084976196289
    5. ' x' → logprob: -5.821084976196289
    6. 'None' → logprob: -7.196084976196289
    7. 'result' → logprob: -7.446084976196289
    8. 'is' → logprob: -8.071084976196289
    9. '(' → logprob: -8.071084976196289
    10. 'True' → logprob: -8.321084976196289

Token 117: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.00013262155698612332
    2. '(' → logprob: -9.50013256072998
    3. ')(' → logprob: -10.25013256072998
    4. 'x' → logprob: -11.00013256072998
    5. ' (' → logprob: -13.00013256072998
    6. ')' → logprob: -13.25013256072998
    7. ')x' → logprob: -13.87513256072998
    8. ' x' → logprob: -15.00013256072998
    9. '(
' → logprob: -15.75013256072998
    10. '(n' → logprob: -16.125133514404297

Token 118: ').' (ID: 741)
  Prédit: ').'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ').' → logprob: -0.0002681304467841983
    2. ')' → logprob: -8.62526798248291
    3. ' ).' → logprob: -10.12526798248291
    4. '))' → logprob: -10.75026798248291
    5. ')).' → logprob: -11.25026798248291
    6. '()).' → logprob: -11.87526798248291
    7. ' ' → logprob: -13.25026798248291
    8. '(x' → logprob: -14.00026798248291
    9. ')(' → logprob: -14.00026798248291
    10. '   ' → logprob: -14.37526798248291

Token 119: 'check' (ID: 3416)
  Prédit: 'check'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'check' → logprob: -4.127333340875339e-06
    2. ' check' → logprob: -12.500003814697266
    3. 'chec' → logprob: -16.125003814697266
    4. '```' → logprob: -16.875003814697266
    5. ' ' → logprob: -17.000003814697266
    6. 'che' → logprob: -17.375003814697266
    7. 'c' → logprob: -17.625003814697266
    8. 'ch' → logprob: -17.875003814697266
    9. '  ' → logprob: -18.375003814697266
    10. '   ' → logprob: -18.750003814697266

Token 120: '())' (ID: 3516)
  Prédit: ')('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')(' → logprob: -0.04398130998015404
    2. ')' → logprob: -3.2939813137054443
    3. '(n' → logprob: -5.168981075286865
    4. '(' → logprob: -8.668981552124023
    5. ')n' → logprob: -10.543981552124023
    6. ')((' → logprob: -11.418981552124023
    7. ')(
' → logprob: -12.043981552124023
    8. ' )(' → logprob: -12.043981552124023
    9. ' )' → logprob: -12.418981552124023
    10. '))(' → logprob: -13.293981552124023

Token 121: '(' (ID: 7)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.01421439554542303
    2. '(' → logprob: -4.264214515686035
    3. '(
' → logprob: -10.264214515686035
    4. ' (' → logprob: -11.514214515686035
    5. '((' → logprob: -13.389214515686035
    6. 'n' → logprob: -14.014214515686035
    7. '()' → logprob: -14.014214515686035
    8. '(s' → logprob: -14.389214515686035
    9. ')' → logprob: -15.264214515686035
    10. '(

' → logprob: -15.264214515686035

Token 122: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.005234832875430584
    2. ' n' → logprob: -5.255234718322754
    3. ')' → logprob: -14.755234718322754
    4. ')n' → logprob: -14.755234718322754
    5. '9' → logprob: -16.25523567199707
    6. '10' → logprob: -16.50523567199707
    7. ' ' → logprob: -17.63023567199707
    8. '   ' → logprob: -17.75523567199707
    9. 'int' → logprob: -18.25523567199707
    10. '
' → logprob: -18.25523567199707

Token 123: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1472419600977446e-06
    2. ' )' → logprob: -13.875000953674316
    3. ')
' → logprob: -17.000001907348633
    4. '))' → logprob: -17.875001907348633
    5. ')`' → logprob: -18.625001907348633
    6. ')}' → logprob: -19.250001907348633
    7. '+' → logprob: -19.375001907348633
    8. ')#' → logprob: -19.625001907348633
    9. ')n' → logprob: -19.750001907348633
    10. ')**' → logprob: -19.750001907348633

Token 124: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 125: ' style' (ID: 2713)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.07650373876094818
    2. 'result' → logprob: -2.7015037536621094
    3. ' print' → logprob: -5.826503753662109
    4. ' result' → logprob: -6.201503753662109
    5. 'None' → logprob: -7.201503753662109
    6. '<|end|>' → logprob: -8.82650375366211
    7. 'if' → logprob: -9.07650375366211
    8. '#' → logprob: -9.32650375366211
    9. 'n' → logprob: -9.70150375366211
    10. ' None' → logprob: -9.70150375366211

Token 126: ' fonction' (ID: 17610)
  Prédit: ' inutile'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' inutile' → logprob: -0.7022789716720581
    2. ' procéd' → logprob: -2.0772790908813477
    3. ' inutil' → logprob: -2.8272790908813477
    4. ' fonction' → logprob: -2.9522790908813477
    5. 'fonction' → logprob: -3.2022790908813477
    6. ' procedural' → logprob: -3.4522790908813477
    7. 'pro' → logprob: -4.077279090881348
    8. 'proced' → logprob: -4.202279090881348
    9. ' python' → logprob: -4.452279090881348
    10. 'proc' → logprob: -4.452279090881348

Token 127: 'nel' (ID: 10085)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 128: ' avec' (ID: 3937)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 129: ' lambda' (ID: 27871)
  Prédit: ' effet'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' effet' → logprob: -1.3133269548416138
    2. 'side' → logprob: -1.4383269548416138
    3. ' side' → logprob: -1.6883269548416138
    4. 'eff' → logprob: -2.063326835632324
    5. ' un' → logprob: -3.563326835632324
    6. 'objet' → logprob: -3.813326835632324
    7. ' une' → logprob: -4.063326835632324
    8. ' effets' → logprob: -4.063326835632324
    9. 'c' → logprob: -4.813326835632324
    10. 'un' → logprob: -4.938326835632324

Token 130: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 131: 'if' (ID: 366)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.002785384887829423
    2. '#' → logprob: -6.2527852058410645
    3. 'result' → logprob: -8.752785682678223
    4. '
' → logprob: -8.877785682678223
    5. 'p' → logprob: -9.002785682678223
    6. '<|end|>' → logprob: -9.127785682678223
    7. '.' → logprob: -9.627785682678223
    8. 'if' → logprob: -9.752785682678223
    9. ')' → logprob: -10.252785682678223
    10. '#print' → logprob: -10.377785682678223

Token 132: ' result' (ID: 1534)
  Prédit: ' result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' result' → logprob: -0.004101315978914499
    2. 'result' → logprob: -5.504101276397705
    3. ' not' → logprob: -11.504101753234863
    4. ' ' → logprob: -11.754101753234863
    5. ' ' → logprob: -12.879101753234863
    6. '(result' → logprob: -13.629101753234863
    7. '	result' → logprob: -14.879101753234863
    8. ' res' → logprob: -15.504101753234863
    9. ' __' → logprob: -16.129100799560547
    10. 'not' → logprob: -16.254100799560547

Token 133: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0040823169983923435
    2. ' :' → logprob: -5.504082202911377
    3. ':
' → logprob: -12.629082679748535
    4. ' ==' → logprob: -14.754082679748535
    5. '==' → logprob: -15.629082679748535
    6. ' is' → logprob: -17.25408172607422
    7. ' :
' → logprob: -17.62908172607422
    8. ':

' → logprob: -18.62908172607422
    9. '：' → logprob: -19.12908172607422
    10. '=' → logprob: -19.50408172607422

Token 134: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18894965946674347
    2. ' print' → logprob: -2.1889495849609375
    3. 'print' → logprob: -2.8139495849609375
    4. '	print' → logprob: -9.438949584960938
    5. ':' → logprob: -10.188949584960938
    6. '```' → logprob: -11.188949584960938
    7. '       ' → logprob: -11.313949584960938
    8. '\' → logprob: -12.688949584960938
    9. '    ' → logprob: -12.813949584960938
    10. '
' → logprob: -12.813949584960938

Token 135: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.1269436478614807
    2. ' print' → logprob: -2.126943588256836
    3. '   ' → logprob: -11.126943588256836
    4. '	print' → logprob: -14.876943588256836
    5. 'pr' → logprob: -16.376943588256836
    6. '
' → logprob: -16.376943588256836
    7. ' prin' → logprob: -16.876943588256836
    8. '.print' → logprob: -16.876943588256836
    9. 'prin' → logprob: -17.001943588256836
    10. ' for' → logprob: -17.376943588256836

Token 136: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.0792943462729454
    2. '(' → logprob: -2.579294443130493
    3. '('' → logprob: -8.954294204711914
    4. '(n' → logprob: -9.079294204711914
    5. '(True' → logprob: -9.204294204711914
    6. '("("' → logprob: -10.454294204711914
    7. '(":' → logprob: -11.579294204711914
    8. '("")' → logprob: -12.079294204711914
    9. '()' → logprob: -12.454294204711914
    10. '(
' → logprob: -12.704294204711914

Token 137: 'Yes' (ID: 13022)
  Prédit: 'Valid'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Valid' → logprob: -0.23655979335308075
    2. 'YES' → logprob: -2.6115598678588867
    3. 'valid' → logprob: -3.2365598678588867
    4. 'Yes' → logprob: -3.7365598678588867
    5. 'VALID' → logprob: -3.7365598678588867
    6. 'Val' → logprob: -4.486559867858887
    7. 'Oui' → logprob: -4.861559867858887
    8. 'val' → logprob: -5.361559867858887
    9. 'OK' → logprob: -5.361559867858887
    10. 'Possible' → logprob: -5.736559867858887

Token 138: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.2519820034503937
    2. '")
' → logprob: -1.5019819736480713
    3. '!")' → logprob: -10.251981735229492
    4. '")
' → logprob: -11.751981735229492
    5. '!")
' → logprob: -12.376981735229492
    6. '"' → logprob: -12.876981735229492
    7. '")

' → logprob: -13.376981735229492
    8. ')' → logprob: -15.126981735229492
    9. ')")' → logprob: -15.501981735229492
    10. ' ")' → logprob: -15.501981735229492

Token 139: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -1.981667537620524e-06
    2. ' else' → logprob: -13.250001907348633
    3. 'elif' → logprob: -16.250001907348633
    4. 'Else' → logprob: -18.500001907348633
    5. '```' → logprob: -19.375001907348633
    6. 'elser' → logprob: -21.750001907348633
    7. '}else' → logprob: -21.875001907348633
    8. 'els' → logprob: -22.625001907348633
    9. '#else' → logprob: -22.625001907348633
    10. '_else' → logprob: -22.750001907348633

Token 140: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.10069604218006134
    2. ':
' → logprob: -2.350696086883545
    3. '   ' → logprob: -7.725696086883545
    4. ' :
' → logprob: -10.600695610046387
    5. ' :' → logprob: -10.725695610046387
    6. ':

' → logprob: -14.725695610046387
    7. ':
' → logprob: -15.350695610046387
    8. '):
' → logprob: -16.225696563720703
    9. '  ' → logprob: -17.100696563720703
    10. '{' → logprob: -17.100696563720703

Token 141: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.030557595193386078
    2. ' print' → logprob: -3.530557632446289
    3. 'print' → logprob: -7.155557632446289
    4. '    ' → logprob: -11.405557632446289
    5. '	print' → logprob: -12.530557632446289
    6. '"' → logprob: -13.030557632446289
    7. ' "' → logprob: -13.405557632446289
    8. ' ' → logprob: -13.655557632446289
    9. '```' → logprob: -13.655557632446289
    10. ' ' → logprob: -14.030557632446289

Token 142: ' import' (ID: 1588)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.006829513236880302
    2. ' print' → logprob: -5.006829738616943
    3. '"' → logprob: -9.256829261779785
    4. '   ' → logprob: -11.131829261779785
    5. 'No' → logprob: -13.131829261779785
    6. 'Print' → logprob: -14.256829261779785
    7. '("' → logprob: -14.381829261779785
    8. '"No' → logprob: -15.131829261779785
    9. ' "' → logprob: -15.506829261779785
    10. '(print' → logprob: -16.3818302154541

Token 143: ' sys' (ID: 12228)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.029128216207027435
    2. ' sys' → logprob: -3.654128313064575
    3. 'math' → logprob: -6.154128074645996
    4. ' math' → logprob: -7.404128074645996
    5. 'random' → logprob: -10.029128074645996
    6. 'os' → logprob: -10.404128074645996
    7. 'keyword' → logprob: -12.529128074645996
    8. ' random' → logprob: -12.779128074645996
    9. 'cmath' → logprob: -13.154128074645996
    10. 're' → logprob: -13.279128074645996

Token 144: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7357258200645447
    2. '
' → logprob: -0.8607258200645447
    3. ' sys' → logprob: -2.9857258796691895
    4. 'sys' → logprob: -3.2357258796691895
    5. '(sys' → logprob: -6.1107258796691895
    6. 'print' → logprob: -6.4857258796691895
    7. '    
' → logprob: -6.6107258796691895
    8. '	sys' → logprob: -6.7357258796691895
    9. '
' → logprob: -7.6107258796691895
    10. ' print' → logprob: -7.9857258796691895

Token 145: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10403728485107422
    2. ' sys' → logprob: -2.729037284851074
    3. 'sys' → logprob: -3.479037284851074
    4. 'exit' → logprob: -6.729037284851074
    5. ' exit' → logprob: -7.354037284851074
    6. 'print' → logprob: -7.854037284851074
    7. ' print' → logprob: -8.229037284851074
    8. '	sys' → logprob: -9.104037284851074
    9. '	exit' → logprob: -10.479037284851074
    10. '(sys' → logprob: -10.979037284851074

Token 146: ' sys' (ID: 12228)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sys' (adapté à ' sys') → logprob: -0.002281695604324341
    2. 'print' → logprob: -6.252281665802002
    3. '   ' → logprob: -8.25228214263916
    4. ' sys' → logprob: -9.87728214263916
    5. 'exit' → logprob: -10.12728214263916
    6. '	sys' → logprob: -14.50228214263916
    7. '=sys' → logprob: -16.002281188964844
    8. '(sys' → logprob: -16.752281188964844
    9. ' ' → logprob: -16.752281188964844
    10. 'quit' → logprob: -16.877281188964844

Token 147: '.stdout' (ID: 59462)
  Prédit: '.exit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.exit' → logprob: -0.0024821963161230087
    2. '.stderr' → logprob: -6.7524824142456055
    3. '.stdout' → logprob: -7.0024824142456055
    4. '.' → logprob: -7.8774824142456055
    5. 'exit' → logprob: -11.252482414245605
    6. '.stdin' → logprob: -13.127482414245605
    7. '.ex' → logprob: -13.377482414245605
    8. '	exit' → logprob: -13.502482414245605
    9. ' .' → logprob: -14.002482414245605
    10. '.Exit' → logprob: -14.127482414245605

Token 148: '.write' (ID: 6765)
  Prédit: '.write'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.write' → logprob: -0.40683940052986145
    2. '.flush' → logprob: -1.156839370727539
    3. '.' → logprob: -4.031839370727539
    4. '.close' → logprob: -6.281839370727539
    5. ' .' → logprob: -9.156839370727539
    6. '   ' → logprob: -10.781839370727539
    7. '.seek' → logprob: -11.406839370727539
    8. '.clear' → logprob: -12.281839370727539
    9. '.w' → logprob: -12.406839370727539
    10. '.f' → logprob: -12.906839370727539

Token 149: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.34372416138648987
    2. '("")' → logprob: -1.3437241315841675
    3. '('' → logprob: -4.218724250793457
    4. '(' → logprob: -4.468724250793457
    5. '(""' → logprob: -5.968724250793457
    6. '("\' → logprob: -7.843724250793457
    7. '""' → logprob: -8.593724250793457
    8. '("("' → logprob: -8.718724250793457
    9. '"' → logprob: -9.343724250793457
    10. '(""+' → logprob: -9.593724250793457

Token 150: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.004222520627081394
    2. '"No' → logprob: -5.629222393035889
    3. '"' → logprob: -8.254222869873047
    4. 'N' → logprob: -8.879222869873047
    5. 'NO' → logprob: -10.254222869873047
    6. 'no' → logprob: -10.379222869873047
    7. '0' → logprob: -10.504222869873047
    8. '""' → logprob: -11.004222869873047
    9. 'n' → logprob: -11.379222869873047
    10. '")' → logprob: -11.379222869873047

Token 151: '\n' (ID: 3392)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.10023298859596252
    2. '\n' → logprob: -2.3502330780029297
    3. '")
' → logprob: -10.72523307800293
    4. 'n' → logprob: -13.60023307800293
    5. '"' → logprob: -13.85023307800293
    6. '"))' → logprob: -13.97523307800293
    7. ')")' → logprob: -14.85023307800293
    8. ')\' → logprob: -15.22523307800293
    9. '"\' → logprob: -15.60023307800293
    10. ')' → logprob: -15.85023307800293

Token 152: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.048762910068035126
    2. ')' → logprob: -3.048762798309326
    3. ')")' → logprob: -8.673763275146484
    4. '")
' → logprob: -12.923763275146484
    5. ')"' → logprob: -14.673763275146484
    6. '')' → logprob: -14.798763275146484
    7. '}")' → logprob: -15.048763275146484
    8. ')
' → logprob: -15.673763275146484
    9. '"' → logprob: -16.048763275146484
    10. '"))' → logprob: -16.173763275146484


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 150
Tokens correctement prédits (1ère position, stricte): 54
Tokens correctement prédits (1ère position, avec adaptation): 57
Tokens correctement prédits (top 10): 111
Précision stricte (1ère position): 36.00%
Précision adaptée (1ère position): 38.00%
Précision (top 10): 74.00%
================================================================================
