================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:00:54
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from math import log2, ceil
from sys import stdin

def solve():
    n, k = map(int, stdin.readline().split())
    result = sum((1/n) * 0.5**max(0, ceil(log2(k/i))) for i in range(1, n+1))
    print(result)

if __name__ == "__main__":
    solve()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' math' (ID: 13324)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' log' (ID: 2142)
  Prédit: 'sqrt'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sqrt' → logprob: -0.22550995647907257
    2. ' sqrt' → logprob: -1.8505100011825562
    3. 'pow' → logprob: -4.100510120391846
    4. 'pi' → logprob: -4.850510120391846
    5. 'sin' → logprob: -4.850510120391846
    6. ' pi' → logprob: -5.100510120391846
    7. 'import' → logprob: -6.350510120391846
    8. 'ceil' → logprob: -7.100510120391846
    9. ' sin' → logprob: -7.225510120391846
    10. 'log' → logprob: -7.725510120391846

Token 4: '2' (ID: 17)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00018565983918961138
    2. ',' → logprob: -9.7501859664917
    3. '\(' → logprob: -10.1251859664917
    4. '```' → logprob: -10.3751859664917
    5. ' (' → logprob: -11.1251859664917
    6. '10' → logprob: -12.0001859664917
    7. '"' → logprob: -12.2501859664917
    8. '(
' → logprob: -12.2501859664917
    9. '1' → logprob: -12.5001859664917
    10. '_' → logprob: -12.6251859664917

Token 5: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0006064103217795491
    2. '(
' → logprob: -8.375606536865234
    3. '\(' → logprob: -9.000606536865234
    4. ',' → logprob: -9.250606536865234
    5. '\n' → logprob: -9.750606536865234
    6. ' (' → logprob: -10.000606536865234
    7. '```' → logprob: -11.500606536865234
    8. '#' → logprob: -12.000606536865234
    9. 'a' → logprob: -12.500606536865234
    10. ''' → logprob: -12.625606536865234

Token 6: ' ceil' (ID: 35964)
  Prédit: 'log'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'log' → logprob: -0.6462835073471069
    2. 'ceil' → logprob: -1.271283507347107
    3. ' log' → logprob: -2.0212836265563965
    4. ' ceil' → logprob: -2.8962836265563965
    5. 'sqrt' → logprob: -5.5212836265563965
    6. ' factorial' → logprob: -6.6462836265563965
    7. ' sqrt' → logprob: -7.1462836265563965
    8. 'pow' → logprob: -8.021283149719238
    9. 'sin' → logprob: -8.396283149719238
    10. '```' → logprob: -8.521283149719238

Token 7: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002885237103328109
    2. '(
' → logprob: -6.627885341644287
    3. '\(' → logprob: -6.877885341644287
    4. 'def' → logprob: -8.127884864807129
    5. '\' → logprob: -9.502884864807129
    6. 'd' → logprob: -9.752884864807129
    7. '#' → logprob: -10.377884864807129
    8. ',' → logprob: -11.252884864807129
    9. '```' → logprob: -11.877884864807129
    10. 'a' → logprob: -12.127884864807129

Token 8: 'from' (ID: 2845)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.018158137798309326
    2. '(
' → logprob: -4.143157958984375
    3. '\(' → logprob: -7.393157958984375
    4. 'def' → logprob: -7.518157958984375
    5. '\' → logprob: -8.268157958984375
    6. 'd' → logprob: -8.268157958984375
    7. '`' → logprob: -9.143157958984375
    8. '```' → logprob: -10.018157958984375
    9. '(

' → logprob: -10.143157958984375
    10. 'a' → logprob: -10.518157958984375

Token 9: ' sys' (ID: 12228)
  Prédit: ' random'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' random' → logprob: -1.6596369743347168
    2. ' collections' → logprob: -1.7846369743347168
    3. 'random' → logprob: -1.9096369743347168
    4. 'collections' → logprob: -2.159636974334717
    5. ' typing' → logprob: -2.409636974334717
    6. ' itertools' → logprob: -2.409636974334717
    7. 'math' → logprob: -3.034636974334717
    8. ' math' → logprob: -3.534636974334717
    9. 'cmath' → logprob: -3.659636974334717
    10. 'typing' → logprob: -3.909636974334717

Token 10: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.014210288412868977
    2. 'import' → logprob: -4.264210224151611
    3. '<|end|>' → logprob: -10.51421070098877
    4. '	import' → logprob: -11.76421070098877
    5. ' ' → logprob: -13.01421070098877
    6. '<|end|>' → logprob: -13.13921070098877
    7. '_import' → logprob: -13.38921070098877
    8. ' im' → logprob: -13.38921070098877
    9. ' imports' → logprob: -13.51421070098877
    10. ' importar' → logprob: -13.88921070098877

Token 11: ' stdin' (ID: 75143)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.14873819053173065
    2. 'argv' → logprob: -2.398738145828247
    3. 'stdout' → logprob: -3.898738145828247
    4. 'exit' → logprob: -4.273738384246826
    5. ' stdin' → logprob: -4.648738384246826
    6. 'stderr' → logprob: -5.773738384246826
    7. 'max' → logprob: -8.648737907409668
    8. ' argv' → logprob: -8.773737907409668
    9. ' exit' → logprob: -9.148737907409668
    10. '.stdin' → logprob: -11.523737907409668

Token 12: '

' (ID: 279)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.4678793251514435
    2. '
' → logprob: -1.592879295349121
    3. 'for' → logprob: -2.467879295349121
    4. '\' → logprob: -3.717879295349121
    5. '

' → logprob: -4.342879295349121
    6. '```' → logprob: -4.467879295349121
    7. 'newline' → logprob: -4.717879295349121
    8. '' → logprob: -5.467879295349121
    9. 'n' → logprob: -5.592879295349121
    10. 'print' → logprob: -5.842879295349121

Token 13: 'def' (ID: 1314)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.4192041754722595
    2. 'd' → logprob: -2.0442042350769043
    3. 'def' → logprob: -2.2942042350769043
    4. 'for' → logprob: -2.2942042350769043
    5. '`' → logprob: -5.169204235076904
    6. '\' → logprob: -6.294204235076904
    7. '```' → logprob: -6.919204235076904
    8. 'f' → logprob: -7.294204235076904
    9. '\n' → logprob: -7.419204235076904
    10. 'a' → logprob: -7.669204235076904

Token 14: ' solve' (ID: 17722)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.41410431265830994
    2. ' calculate' → logprob: -2.2891042232513428
    3. ' main' → logprob: -2.6641042232513428
    4. ' space' → logprob: -3.1641042232513428
    5. ' read' → logprob: -3.1641042232513428
    6. ' binary' → logprob: -3.9141042232513428
    7. ' solve' → logprob: -4.539104461669922
    8. ' compute' → logprob: -4.914104461669922
    9. ' bin' → logprob: -5.414104461669922
    10. ' decode' → logprob: -5.414104461669922

Token 15: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.04951276257634163
    2. '():' → logprob: -3.0495128631591797
    3. '(:' → logprob: -8.54951286315918
    4. '_' → logprob: -8.54951286315918
    5. ':' → logprob: -8.79951286315918
    6. '```' → logprob: -8.92451286315918
    7. '()' → logprob: -10.42451286315918
    8. ' (' → logprob: -10.92451286315918
    9. '(line' → logprob: -11.04951286315918
    10. '(":' → logprob: -11.04951286315918

Token 16: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04462369158864021
    2. '    
' → logprob: -4.044623851776123
    3. 'n' → logprob: -4.794623851776123
    4. 'input' → logprob: -5.294623851776123
    5. ' readline' → logprob: -5.919623851776123
    6. 'data' → logprob: -6.794623851776123
    7. '```' → logprob: -6.919623851776123
    8. '    ' → logprob: -7.044623851776123
    9. '(stdin' → logprob: -7.044623851776123
    10. '<|end|>' → logprob: -7.419623851776123

Token 17: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.5512086749076843
    2. 'n' (adapté à ' n') → logprob: -1.051208734512329
    3. '   ' → logprob: -3.051208734512329
    4. 'data' → logprob: -4.92620849609375
    5. ' input' → logprob: -4.92620849609375
    6. 'input' → logprob: -5.30120849609375
    7. ' data' → logprob: -5.55120849609375
    8. ' line' → logprob: -6.55120849609375
    9. ' lines' → logprob: -6.67620849609375
    10. 'line' → logprob: -8.05120849609375

Token 18: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.004281396511942148
    2. '=' → logprob: -5.504281520843506
    3. ' ' → logprob: -8.754281044006348
    4. ',' → logprob: -10.629281044006348
    5. '=int' → logprob: -11.629281044006348
    6. ' ,' → logprob: -12.004281044006348
    7. '  ' → logprob: -13.004281044006348
    8. ' =
' → logprob: -13.754281044006348
    9. ' >' → logprob: -14.254281044006348
    10. ' )' → logprob: -14.754281044006348

Token 19: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.8018044233322144
    2. ' k' → logprob: -1.1768044233322144
    3. 'm' → logprob: -1.9268044233322144
    4. ' m' → logprob: -2.926804542541504
    5. '=' → logprob: -3.801804542541504
    6. 'q' → logprob: -5.051804542541504
    7. ' q' → logprob: -5.676804542541504
    8. ' =' → logprob: -5.926804542541504
    9. 'x' → logprob: -6.301804542541504
    10. 'a' → logprob: -6.676804542541504

Token 20: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1002078503370285
    2. '=' → logprob: -2.350207805633545
    3. ',' → logprob: -14.725208282470703
    4. '=input' → logprob: -14.725208282470703
    5. ' ' → logprob: -15.350208282470703
    6. '=int' → logprob: -16.100208282470703
    7. '=line' → logprob: -16.975208282470703
    8. '   ' → logprob: -17.600208282470703
    9. ')' → logprob: -17.725208282470703
    10. '=list' → logprob: -17.975208282470703

Token 21: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.0430159755051136
    2. 'map' → logprob: -3.168015956878662
    3. '[' → logprob: -11.54301643371582
    4. ' ' → logprob: -12.91801643371582
    5. ' [' → logprob: -13.04301643371582
    6. ' list' → logprob: -14.54301643371582
    7. '	map' → logprob: -14.54301643371582
    8. '(map' → logprob: -14.66801643371582
    9. '   ' → logprob: -15.16801643371582
    10. ' ' → logprob: -15.41801643371582

Token 22: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.04141983017325401
    2. '(' → logprob: -3.291419744491577
    3. '(input' → logprob: -6.416419982910156
    4. '(stdin' → logprob: -6.541419982910156
    5. '(str' → logprob: -9.041419982910156
    6. '(lambda' → logprob: -9.416419982910156
    7. '(list' → logprob: -9.416419982910156
    8. '(in' → logprob: -12.916419982910156
    9. '(st' → logprob: -13.041419982910156
    10. 'list' → logprob: -13.416419982910156

Token 23: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.6977240443229675
    2. '(stdin' → logprob: -0.8227240443229675
    3. ',input' → logprob: -3.6977241039276123
    4. '(input' → logprob: -3.6977241039276123
    5. '(' → logprob: -5.322723865509033
    6. 'stdin' → logprob: -5.947723865509033
    7. 'input' → logprob: -5.947723865509033
    8. ')' → logprob: -6.572723865509033
    9. ' ,' → logprob: -6.572723865509033
    10. ' stdin' → logprob: -8.572724342346191

Token 24: ' stdin' (ID: 75143)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.03895479440689087
    2. ' stdin' → logprob: -3.288954734802246
    3. '(stdin' → logprob: -7.038954734802246
    4. ')' → logprob: -11.038954734802246
    5. '.stdin' → logprob: -11.038954734802246
    6. 'input' → logprob: -13.538954734802246
    7. 'stdout' → logprob: -14.163954734802246
    8. '   ' → logprob: -14.538954734802246
    9. ' ' → logprob: -15.413954734802246
    10. 'std' → logprob: -15.538954734802246

Token 25: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.0003258103388361633
    2. '().' → logprob: -8.125326156616211
    3. '.read' → logprob: -10.875326156616211
    4. '.' → logprob: -11.625326156616211
    5. ').' → logprob: -14.125326156616211
    6. '.readlines' → logprob: -14.250326156616211
    7. ' .' → logprob: -15.500326156616211
    8. '.next' → logprob: -16.12532615661621
    9. '.stdin' → logprob: -16.25032615661621
    10. '.write' → logprob: -18.25032615661621

Token 26: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0013804715126752853
    2. '())' → logprob: -7.126380443572998
    3. '()' → logprob: -7.501380443572998
    4. '()))' → logprob: -11.001380920410156
    5. ')' → logprob: -12.876380920410156
    6. ' ().' → logprob: -13.126380920410156
    7. '(' → logprob: -14.376380920410156
    8. ' ())' → logprob: -15.376380920410156
    9. '()[' → logprob: -15.626380920410156
    10. ' ()' → logprob: -15.751380920410156

Token 27: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.399348646402359
    2. 'strip' → logprob: -1.1493486166000366
    3. 'read' → logprob: -5.024348735809326
    4. 'rstrip' → logprob: -5.149348735809326
    5. ')' → logprob: -11.274348258972168
    6. '().' → logprob: -13.149348258972168
    7. ' split' → logprob: -13.649348258972168
    8. ' strip' → logprob: -14.024348258972168
    9. '(split' → logprob: -14.149348258972168
    10. '.readline' → logprob: -14.399348258972168

Token 28: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002236970467492938
    2. '())' → logprob: -6.502236843109131
    3. '))' → logprob: -7.752236843109131
    4. '()' → logprob: -8.127237319946289
    5. ' )' → logprob: -13.502237319946289
    6. '),' → logprob: -13.502237319946289
    7. ')`' → logprob: -13.502237319946289
    8. '(' → logprob: -13.752237319946289
    9. ')")' → logprob: -13.752237319946289
    10. ')
' → logprob: -14.502237319946289

Token 29: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4306343197822571
    2. ')' → logprob: -2.4306342601776123
    3. '<|end|>' → logprob: -2.6806342601776123
    4. '
' → logprob: -2.8056342601776123
    5. '    
' → logprob: -3.3056342601776123
    6. '```' → logprob: -3.6806342601776123
    7. ' if' → logprob: -3.9306342601776123
    8. ',' → logprob: -4.180634498596191
    9. '\' → logprob: -5.055634498596191
    10. '<|end|>' → logprob: -5.680634498596191

Token 30: ' result' (ID: 1534)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0489847660064697
    2. ' if' → logprob: -1.7989847660064697
    3. ' ans' → logprob: -2.4239847660064697
    4. 'result' (adapté à ' result') → logprob: -2.9239847660064697
    5. ' result' → logprob: -3.2989847660064697
    6. '
' → logprob: -3.6739847660064697
    7. 'n' → logprob: -4.048984527587891
    8. '    
' → logprob: -4.048984527587891
    9. ' lines' → logprob: -4.048984527587891
    10. ' res' → logprob: -4.173984527587891

Token 31: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01817171648144722
    2. '=' → logprob: -4.018171787261963
    3. '_' → logprob: -11.268171310424805
    4. ' ' → logprob: -12.268171310424805
    5. ' =)' → logprob: -13.393171310424805
    6. ' =
' → logprob: -14.643171310424805
    7. ')' → logprob: -15.393171310424805
    8. 's' → logprob: -15.768171310424805
    9. ' |=' → logprob: -15.768171310424805
    10. '_=' → logprob: -15.768171310424805

Token 32: ' sum' (ID: 4215)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -1.3097656965255737
    2. ' k' → logprob: -1.8097656965255737
    3. ' ceil' → logprob: -1.8097656965255737
    4. ' ' → logprob: -2.3097658157348633
    5. ' n' → logprob: -2.4347658157348633
    6. ' log' → logprob: -3.0597658157348633
    7. ' max' → logprob: -3.4347658157348633
    8. ' (' → logprob: -3.6847658157348633
    9. 'ceil' → logprob: -3.6847658157348633
    10. 'k' → logprob: -3.8097658157348633

Token 33: '((' (ID: 2054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.034154463559389114
    2. '((' → logprob: -3.7841544151306152
    3. '(log' → logprob: -5.034154415130615
    4. '(range' → logprob: -6.284154415130615
    5. '(i' → logprob: -7.159154415130615
    6. '(k' → logprob: -7.159154415130615
    7. '(pow' → logprob: -8.034154891967773
    8. '([' → logprob: -9.034154891967773
    9. '(int' → logprob: -9.159154891967773
    10. '(max' → logprob: -9.659154891967773

Token 34: '1' (ID: 16)
  Prédit: 'ceil'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ceil' → logprob: -0.5354517102241516
    2. 'k' → logprob: -1.2854516506195068
    3. '1' → logprob: -3.160451650619507
    4. ' ceil' → logprob: -3.785451650619507
    5. 'n' → logprob: -4.285451889038086
    6. '(' → logprob: -4.410451889038086
    7. '(k' → logprob: -4.410451889038086
    8. 'min' → logprob: -4.910451889038086
    9. '2' → logprob: -5.285451889038086
    10. ' k' → logprob: -5.535451889038086

Token 35: '/n' (ID: 18292)
  Prédit: '<<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '<<' → logprob: -1.022508978843689
    2. ' <<' → logprob: -1.272508978843689
    3. '+' → logprob: -1.522508978843689
    4. ' +' → logprob: -2.3975090980529785
    5. ')' → logprob: -4.1475090980529785
    6. ' for' → logprob: -4.2725090980529785
    7. '-' → logprob: -5.8975090980529785
    8. '<<(' → logprob: -5.8975090980529785
    9. ' -' → logprob: -6.2725090980529785
    10. '/' → logprob: -6.3975090980529785

Token 36: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.015911655500531197
    2. ')*' → logprob: -5.01591157913208
    3. ' )' → logprob: -5.14091157913208
    4. ' *' → logprob: -7.01591157913208
    5. '*' → logprob: -7.01591157913208
    6. '**' → logprob: -7.51591157913208
    7. ')**' → logprob: -7.51591157913208
    8. '*)' → logprob: -9.390912055969238
    9. ')*(' → logprob: -9.515912055969238
    10. ' -' → logprob: -10.015912055969238

Token 37: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.16016186773777008
    2. '*' → logprob: -2.4101619720458984
    3. ')' → logprob: -2.9101619720458984
    4. ' )' → logprob: -6.160161972045898
    5. ')*' → logprob: -6.660161972045898
    6. ' **' → logprob: -9.285161972045898
    7. '**' → logprob: -10.035161972045898
    8. ' for' → logprob: -10.160161972045898
    9. ' ' → logprob: -10.285161972045898
    10. '*)' → logprob: -10.785161972045898

Token 38: ' ' (ID: 220)
  Prédit: 'log'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'log' → logprob: -0.6409154534339905
    2. 'ceil' → logprob: -1.3909153938293457
    3. '(' → logprob: -2.3909153938293457
    4. 'k' → logprob: -3.1409153938293457
    5. '(k' → logprob: -3.6409153938293457
    6. ' ceil' → logprob: -3.8909153938293457
    7. '(log' → logprob: -4.265915393829346
    8. '(i' → logprob: -4.890915393829346
    9. ' log' → logprob: -4.890915393829346
    10. ' (' → logprob: -5.890915393829346

Token 39: '0' (ID: 15)
  Prédit: 'log'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'log' → logprob: -0.3203423023223877
    2. '(' → logprob: -2.1953423023223877
    3. 'ceil' → logprob: -2.4453423023223877
    4. 'k' → logprob: -3.4453423023223877
    5. '(k' → logprob: -3.9453423023223877
    6. '(log' → logprob: -4.945342063903809
    7. '(i' → logprob: -5.320342063903809
    8. 'min' → logprob: -5.695342063903809
    9. '((' → logprob: -5.945342063903809
    10. '(n' → logprob: -6.695342063903809

Token 40: '.' (ID: 13)
  Prédit: '**'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '**' → logprob: -0.24347783625125885
    2. ')' → logprob: -3.1184778213500977
    3. ' for' → logprob: -3.3684778213500977
    4. ',' → logprob: -3.4934778213500977
    5. ' **' → logprob: -3.4934778213500977
    6. 'log' → logprob: -4.118477821350098
    7. 'for' → logprob: -4.243477821350098
    8. '.' → logprob: -4.618477821350098
    9. ')**' → logprob: -4.868477821350098
    10. 'i' → logprob: -5.493477821350098

Token 41: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.5134478211402893
    2. 'log' → logprob: -1.6384477615356445
    3. '693' → logprob: -1.8884477615356445
    4. '6' → logprob: -4.2634477615356445
    5. '9' → logprob: -4.5134477615356445
    6. '3' → logprob: -5.0134477615356445
    7. '7' → logprob: -5.2634477615356445
    8. '1' → logprob: -5.5134477615356445
    9. '666' → logprob: -5.6384477615356445
    10. '301' → logprob: -6.1384477615356445

Token 42: '**' (ID: 410)
  Prédit: '**'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '**' → logprob: -0.02506755106151104
    2. ' **' → logprob: -3.7750675678253174
    3. ')' → logprob: -7.025067329406738
    4. ')**' → logprob: -7.775067329406738
    5. '**)' → logprob: -8.025067329406738
    6. '*' → logprob: -8.900067329406738
    7. ' **)' → logprob: -11.025067329406738
    8. ' )' → logprob: -11.650067329406738
    9. '),' → logprob: -12.025067329406738
    10. ' *' → logprob: -12.025067329406738

Token 43: 'max' (ID: 3228)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.39657872915267944
    2. 'k' → logprob: -1.2715787887573242
    3. '(' → logprob: -3.771578788757324
    4. '(i' → logprob: -4.646578788757324
    5. 'ceil' → logprob: -5.021578788757324
    6. '(k' → logprob: -5.521578788757324
    7. 'log' → logprob: -6.271578788757324
    8. 'x' → logprob: -7.771578788757324
    9. 'n' → logprob: -8.396578788757324
    10. 'j' → logprob: -8.396578788757324

Token 44: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7127984166145325
    2. '(k' → logprob: -0.9627984166145325
    3. '(i' → logprob: -2.0877983570098877
    4. '((' → logprob: -5.962798595428467
    5. '(n' → logprob: -7.212798595428467
    6. '(j' → logprob: -8.337798118591309
    7. '(log' → logprob: -8.337798118591309
    8. '(-' → logprob: -9.962798118591309
    9. '(x' → logprob: -10.462798118591309
    10. ' (' → logprob: -11.587798118591309

Token 45: '0' (ID: 15)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7925751805305481
    2. '(i' → logprob: -1.2925751209259033
    3. '0' → logprob: -1.7925751209259033
    4. '(k' → logprob: -2.7925751209259033
    5. 'i' → logprob: -3.7925751209259033
    6. 'k' → logprob: -4.542575359344482
    7. '(log' → logprob: -6.167575359344482
    8. ' ' → logprob: -6.542575359344482
    9. ' (' → logprob: -6.792575359344482
    10. ' i' → logprob: -6.792575359344482

Token 46: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.16767404973506927
    2. ',k' → logprob: -1.9176740646362305
    3. ',i' → logprob: -6.0426740646362305
    4. ',(' → logprob: -6.2926740646362305
    5. ' ,' → logprob: -7.0426740646362305
    6. '(k' → logprob: -7.1676740646362305
    7. ',n' → logprob: -7.5426740646362305
    8. ',int' → logprob: -7.9176740646362305
    9. ',max' → logprob: -8.29267406463623
    10. ',j' → logprob: -10.04267406463623

Token 47: ' ceil' (ID: 35964)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.33869946002960205
    2. ' k' → logprob: -2.0886993408203125
    3. 'ceil' → logprob: -2.9636993408203125
    4. '(k' → logprob: -3.7136993408203125
    5. ' (' → logprob: -3.9636993408203125
    6. ' ceil' → logprob: -4.0886993408203125
    7. 'i' → logprob: -4.2136993408203125
    8. '(' → logprob: -4.2136993408203125
    9. ' i' → logprob: -4.7136993408203125
    10. '(i' → logprob: -5.2136993408203125

Token 48: '(log' (ID: 25116)
  Prédit: '(log'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(log' → logprob: -0.04695402830839157
    2. '(k' → logprob: -3.7969539165496826
    3. '((' → logprob: -3.9219539165496826
    4. '(' → logprob: -5.921954154968262
    5. 'log' → logprob: -8.046954154968262
    6. '(-' → logprob: -8.296954154968262
    7. '(n' → logprob: -8.796954154968262
    8. '(((' → logprob: -9.421954154968262
    9. '(i' → logprob: -10.046954154968262
    10. ' (' → logprob: -10.421954154968262

Token 49: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.00015229015843942761
    2. ' ' → logprob: -9.875152587890625
    3. '(' → logprob: -10.125152587890625
    4. '(k' → logprob: -11.250152587890625
    5. 'k' → logprob: -11.625152587890625
    6. ' (' → logprob: -11.750152587890625
    7. '_' → logprob: -11.750152587890625
    8. '₂' → logprob: -12.250152587890625
    9. ' k' → logprob: -12.375152587890625
    10. '(n' → logprob: -12.375152587890625

Token 50: '(k' (ID: 12125)
  Prédit: '(k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(k' → logprob: -0.04553290084004402
    2. '(i' → logprob: -3.2955329418182373
    3. '(' → logprob: -5.670532703399658
    4. '((' → logprob: -6.420532703399658
    5. '(n' → logprob: -6.420532703399658
    6. '(j' → logprob: -7.795532703399658
    7. '(x' → logprob: -9.045533180236816
    8. 'k' → logprob: -9.295533180236816
    9. ')(' → logprob: -10.045533180236816
    10. '(s' → logprob: -10.670533180236816

Token 51: '/i' (ID: 32242)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.639582633972168
    2. ' -' → logprob: -1.139582633972168
    3. '-' → logprob: -3.014582633972168
    4. ' )' → logprob: -3.389582633972168
    5. ' /' → logprob: -4.139582633972168
    6. '))' → logprob: -4.389582633972168
    7. ')-' → logprob: -4.639582633972168
    8. '/n' → logprob: -4.889582633972168
    9. '/i' → logprob: -5.514582633972168
    10. '/' → logprob: -5.764582633972168

Token 52: ')))' (ID: 15975)
  Prédit: ')))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.07881036400794983
    2. '))))' → logprob: -3.203810453414917
    3. '))' → logprob: -3.703810453414917
    4. ')' → logprob: -5.453810214996338
    5. ' ' → logprob: -5.578810214996338
    6. ' ))' → logprob: -7.078810214996338
    7. '+' → logprob: -7.453810214996338
    8. '))-' → logprob: -8.953810691833496
    9. '))),' → logprob: -9.203810691833496
    10. ' )' → logprob: -9.203810691833496

Token 53: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.02181907556951046
    2. 'for' → logprob: -3.8968191146850586
    3. ' ' → logprob: -7.021819114685059
    4. ')' → logprob: -8.521819114685059
    5. ' )' → logprob: -9.021819114685059
    6. ' i' → logprob: -10.521819114685059
    7. '    ' → logprob: -11.396819114685059
    8. '  ' → logprob: -11.521819114685059
    9. '   ' → logprob: -11.896819114685059
    10. '     ' → logprob: -13.771819114685059

Token 54: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.02639782801270485
    2. 'i' → logprob: -3.651397943496704
    3. ' range' → logprob: -9.901397705078125
    4. ' in' → logprob: -11.401397705078125
    5. ' ' → logprob: -11.401397705078125
    6. '<|end|>' → logprob: -12.026397705078125
    7. ')' → logprob: -12.276397705078125
    8. 'range' → logprob: -12.526397705078125
    9. '<|end|>' → logprob: -12.776397705078125
    10. '	i' → logprob: -12.901397705078125

Token 55: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.023815801367163658
    2. 'in' → logprob: -3.773815870285034
    3. 'range' → logprob: -7.773815631866455
    4. ' range' → logprob: -9.398816108703613
    5. ' ' → logprob: -10.023816108703613
    6. ')' → logprob: -11.398816108703613
    7. ' )' → logprob: -13.148816108703613
    8. ',' → logprob: -13.336316108703613
    9. 'n' → logprob: -14.148816108703613
    10. '  ' → logprob: -14.273816108703613

Token 56: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.2814366817474365
    2. ' range' → logprob: -1.4064366817474365
    3. '(range' → logprob: -8.281436920166016
    4. '[' → logprob: -11.781436920166016
    5. ' ' → logprob: -12.031436920166016
    6. 'filter' → logprob: -12.656436920166016
    7. '	range' → logprob: -12.656436920166016
    8. 'n' → logprob: -13.406436920166016
    9. '(' → logprob: -13.531436920166016
    10. 'k' → logprob: -13.781436920166016

Token 57: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.9266199160483666e-05
    2. ' (' → logprob: -11.250019073486328
    3. '1' → logprob: -12.500019073486328
    4. ' ' → logprob: -14.250019073486328
    5. ',' → logprob: -14.500019073486328
    6. ')' → logprob: -14.875019073486328
    7. ')(' → logprob: -15.125019073486328
    8. '(
' → logprob: -15.250019073486328
    9. '(i' → logprob: -16.750019073486328
    10. ' ,' → logprob: -17.000019073486328

Token 58: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00021105022460687906
    2. ' ' → logprob: -9.000210762023926
    3. '(' → logprob: -10.000210762023926
    4. 'n' → logprob: -10.500210762023926
    5. 'k' → logprob: -12.000210762023926
    6. '   ' → logprob: -12.375210762023926
    7. ',' → logprob: -13.500210762023926
    8. '2' → logprob: -14.250210762023926
    9. '(n' → logprob: -14.500210762023926
    10. ' n' → logprob: -15.000210762023926

Token 59: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.01566254533827305
    2. ',n' → logprob: -4.640662670135498
    3. ' ,' → logprob: -5.140662670135498
    4. ',k' → logprob: -10.64066219329834
    5. 'n' → logprob: -11.64066219329834
    6. '1' → logprob: -14.14066219329834
    7. ',i' → logprob: -14.89066219329834
    8. ',
' → logprob: -15.26566219329834
    9. ',num' → logprob: -15.76566219329834
    10. ' ' → logprob: -15.89066219329834

Token 60: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.08034338057041168
    2. ' n' → logprob: -2.58034348487854
    3. 'k' → logprob: -6.580343246459961
    4. ' k' → logprob: -9.705343246459961
    5. '(n' → logprob: -13.330343246459961
    6. '	n' → logprob: -13.830343246459961
    7. ' ' → logprob: -14.205343246459961
    8. ')n' → logprob: -14.955343246459961
    9. '   ' → logprob: -15.455343246459961
    10. '<n' → logprob: -16.08034324645996

Token 61: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.03808750957250595
    2. ' +' → logprob: -3.2880876064300537
    3. '+n' → logprob: -11.538087844848633
    4. '+k' → logprob: -12.038087844848633
    5. '+i' → logprob: -12.163087844848633
    6. '))' → logprob: -12.413087844848633
    7. '```' → logprob: -12.663087844848633
    8. '+
' → logprob: -12.663087844848633
    9. 'n' → logprob: -13.288087844848633
    10. ' ' → logprob: -13.288087844848633

Token 62: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.306760805164231e-05
    2. ' ' → logprob: -11.25001335144043
    3. '   ' → logprob: -17.87501335144043
    4. '```' → logprob: -18.12501335144043
    5. 'n' → logprob: -18.50001335144043
    6. '2' → logprob: -18.62501335144043
    7. ')' → logprob: -19.18751335144043
    8. 'k' → logprob: -19.43751335144043
    9. '۱' → logprob: -19.81251335144043
    10. '))' → logprob: -19.93751335144043

Token 63: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0071058208122849464
    2. ')' → logprob: -5.007105827331543
    3. ')))' → logprob: -7.882105827331543
    4. ' ))' → logprob: -11.882105827331543
    5. '))
' → logprob: -12.757105827331543
    6. '),' → logprob: -14.257105827331543
    7. '   ' → logprob: -14.757105827331543
    8. ' ' → logprob: -15.007105827331543
    9. '):' → logprob: -15.007105827331543
    10. ' )' → logprob: -15.257105827331543

Token 64: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06694593280553818
    2. '
' → logprob: -2.941946029663086
    3. ')' → logprob: -4.941946029663086
    4. 'print' → logprob: -5.816946029663086
    5. ')
' → logprob: -6.566946029663086
    6. ' print' → logprob: -9.191946029663086
    7. '    
' → logprob: -9.316946029663086
    8. '<|end|>' → logprob: -9.816946029663086
    9. '
' → logprob: -10.191946029663086
    10. '```' → logprob: -10.441946029663086

Token 65: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.5584490895271301
    2. '   ' → logprob: -0.9334490895271301
    3. ' print' → logprob: -3.4334490299224854
    4. 'return' → logprob: -6.4334492683410645
    5. ' return' → logprob: -7.9334492683410645
    6. '
' → logprob: -8.683448791503906
    7. ' ' → logprob: -9.558448791503906
    8. '	print' → logprob: -9.683448791503906
    9. ')' → logprob: -9.808448791503906
    10. '  ' → logprob: -10.058448791503906

Token 66: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.14283855259418488
    2. '(' → logprob: -2.017838478088379
    3. '(f' → logprob: -9.642838478088379
    4. '(round' → logprob: -10.017838478088379
    5. '('' → logprob: -11.517838478088379
    6. 'result' → logprob: -12.017838478088379
    7. ' (' → logprob: -12.017838478088379
    8. '((' → logprob: -12.017838478088379
    9. '()' → logprob: -12.017838478088379
    10. '(results' → logprob: -12.517838478088379

Token 67: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00018804390856530517
    2. '))' → logprob: -8.625187873840332
    3. ' )' → logprob: -12.000187873840332
    4. ')))' → logprob: -14.000187873840332
    5. '`)' → logprob: -14.625187873840332
    6. ')
' → logprob: -15.125187873840332
    7. ')`' → logprob: -15.375187873840332
    8. '')' → logprob: -15.500187873840332
    9. ')")' → logprob: -16.62518882751465
    10. '()' → logprob: -17.25018882751465

Token 68: 'if' (ID: 366)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 69: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.0024787469301372766
    2. '__' → logprob: -6.00247859954834
    3. ' ' → logprob: -13.75247859954834
    4. ' ' → logprob: -14.25247859954834
    5. ' _' → logprob: -14.50247859954834
    6. '_' → logprob: -14.87747859954834
    7. ' ___' → logprob: -15.75247859954834
    8. '_name' → logprob: -16.252479553222656
    9. '  ' → logprob: -16.502479553222656
    10. '___' → logprob: -16.627479553222656

Token 70: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.01088404655456543
    2. ' ==' → logprob: -4.7608842849731445
    3. '==' → logprob: -6.6358842849731445
    4. '__.__' → logprob: -7.7608842849731445
    5. ' __' → logprob: -8.135884284973145
    6. '=="' → logprob: -9.635884284973145
    7. '__["' → logprob: -10.635884284973145
    8. '=='' → logprob: -10.760884284973145
    9. '___' → logprob: -11.260884284973145
    10. '<|end|>' → logprob: -11.510884284973145

Token 71: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -5.5577775128767826e-06
    2. '__.__' → logprob: -12.875005722045898
    3. '==' → logprob: -13.625005722045898
    4. ' ==' → logprob: -14.750005722045898
    5. '_' → logprob: -15.000005722045898
    6. '___' → logprob: -15.125005722045898
    7. '____' → logprob: -15.500005722045898
    8. '=="' → logprob: -15.750005722045898
    9. '__["' → logprob: -16.2500057220459
    10. '__.' → logprob: -16.7500057220459

Token 72: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.023494234308600426
    2. '==' → logprob: -4.023494243621826
    3. '=="' → logprob: -5.648494243621826
    4. '__' → logprob: -6.648494243621826
    5. '=='' → logprob: -8.273493766784668
    6. ' =="' → logprob: -8.648493766784668
    7. ' ' → logprob: -10.273493766784668
    8. '```' → logprob: -11.523493766784668
    9. '"' → logprob: -11.898493766784668
    10. ' =='' → logprob: -12.148493766784668

Token 73: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0486345998942852
    2. ''' → logprob: -3.0486345291137695
    3. ' "__' → logprob: -10.29863452911377
    4. ' "' → logprob: -11.79863452911377
    5. '__' → logprob: -12.54863452911377
    6. ' '__' → logprob: -13.42363452911377
    7. ' '' → logprob: -15.29863452911377
    8. '"user' → logprob: -15.29863452911377
    9. ' ' → logprob: -16.548635482788086
    10. '"name' → logprob: -17.048635482788086

Token 74: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -9.496052371105179e-05
    2. 'name' → logprob: -9.37509536743164
    3. '__' → logprob: -12.00009536743164
    4. '"' → logprob: -12.87509536743164
    5. ' main' → logprob: -14.12509536743164
    6. '_main' → logprob: -15.62509536743164
    7. 'mp' → logprob: -15.75009536743164
    8. 'built' → logprob: -15.87509536743164
    9. 'file' → logprob: -17.12509536743164
    10. 'python' → logprob: -17.50009536743164

Token 75: '__":
' (ID: 49892)
  Prédit: '__":
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__":
' → logprob: -0.43223220109939575
    2. '__' → logprob: -1.057232141494751
    3. '__:' → logprob: -5.80723237991333
    4. '__':
' → logprob: -7.68223237991333
    5. '__["' → logprob: -10.932231903076172
    6. '__.' → logprob: -11.557231903076172
    7. '__
' → logprob: -12.057231903076172
    8. ':' → logprob: -12.432231903076172
    9. '__("' → logprob: -12.557231903076172
    10. '__.__' → logprob: -12.932231903076172

Token 76: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.38865771889686584
    2. ' solve' → logprob: -1.1386576890945435
    3. 'solve' → logprob: -6.888657569885254
    4. '    
' → logprob: -8.263657569885254
    5. '.solve' → logprob: -8.388657569885254
    6. '```' → logprob: -8.763657569885254
    7. '	s' → logprob: -10.013657569885254
    8. '   ' → logprob: -11.388657569885254
    9. '<|end|>' → logprob: -11.763657569885254
    10. ' ' → logprob: -11.763657569885254

Token 77: ' solve' (ID: 17722)
  Prédit: 'solve'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'solve' (adapté à ' solve') → logprob: -0.00671584764495492
    2. ' solve' → logprob: -5.006715774536133
    3. '   ' → logprob: -15.006715774536133
    4. '.solve' → logprob: -15.881715774536133
    5. 's' → logprob: -18.381715774536133
    6. ' ' → logprob: -19.256715774536133
    7. 'save' → logprob: -19.881715774536133
    8. 'resolve' → logprob: -20.006715774536133
    9. '	s' → logprob: -20.131715774536133
    10. '```' → logprob: -20.381715774536133

Token 78: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0007048065308481455
    2. '(' → logprob: -7.375704765319824
    3. '()
' → logprob: -9.875704765319824
    4. '()\' → logprob: -11.875704765319824
    5. '()`' → logprob: -12.125704765319824
    6. '()

' → logprob: -13.125704765319824
    7. ' ()' → logprob: -13.250704765319824
    8. '```' → logprob: -13.375704765319824
    9. '()<' → logprob: -13.875704765319824
    10. '(
' → logprob: -14.000704765319824


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 76
Tokens correctement prédits (1ère position, stricte): 39
Tokens correctement prédits (1ère position, avec adaptation): 41
Tokens correctement prédits (top 10): 61
Précision stricte (1ère position): 51.32%
Précision adaptée (1ère position): 53.95%
Précision (top 10): 80.26%
================================================================================
