================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:56:00
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def read_input():
    return input()

def parse_input(s):
    return map(int, s.split())

def get_n_k():
    s = read_input()
    return parse_input(s)

def check_k_equals_one(k):
    return k == 1

def compute_result(n, k):
    if check_k_equals_one(k):
        return 0
    else:
        return n - k

def display_result(res):
    print(res)

def main():
    n, k = get_n_k()
    res = compute_result(n, k)
    display_result(res)

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' read' (ID: 1729)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.013885974884033203
    2. '():' → logprob: -4.513885974884033
    3. '_' → logprob: -6.388885974884033
    4. '(:' → logprob: -7.888885974884033
    5. '(_:' → logprob: -8.138885498046875
    6. '```' → logprob: -8.388885498046875
    7. ':' → logprob: -10.013885498046875
    8. '()' → logprob: -10.138885498046875
    9. '(_' → logprob: -10.388885498046875
    10. ' (' → logprob: -10.388885498046875

Token 4: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.8140061497688293
    2. '\' → logprob: -1.6890060901641846
    3. '\n' → logprob: -1.8140060901641846
    4. '   ' → logprob: -1.8140060901641846
    5. ':' → logprob: -5.064006328582764
    6. '``' → logprob: -5.189006328582764
    7. '<|end|>' → logprob: -5.189006328582764
    8. '    
' → logprob: -5.314006328582764
    9. '
' → logprob: -5.814006328582764
    10. '    ' → logprob: -5.939006328582764

Token 5: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5753816962242126
    2. 'return' (adapté à ' return') → logprob: -1.2003817558288574
    3. 'input' → logprob: -3.2003817558288574
    4. '```' → logprob: -3.5753817558288574
    5. '    ' → logprob: -4.200381755828857
    6. 'x' → logprob: -4.325381755828857
    7. 'data' → logprob: -4.700381755828857
    8. '\' → logprob: -5.200381755828857
    9. '       ' → logprob: -5.825381755828857
    10. 'r' → logprob: -5.825381755828857

Token 6: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.509859025478363
    2. ' input' → logprob: -1.2598590850830078
    3. 'input' → logprob: -2.259859085083008
    4. '"' → logprob: -4.884859085083008
    5. ''' → logprob: -7.009859085083008
    6. ' []' → logprob: -7.009859085083008
    7. ' None' → logprob: -7.759859085083008
    8. '  ' → logprob: -7.884859085083008
    9. '(input' → logprob: -8.134859085083008
    10. ' "' → logprob: -8.384859085083008

Token 7: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006807856727391481
    2. '()' → logprob: -5.006807804107666
    3. '(
' → logprob: -10.881808280944824
    4. '.' → logprob: -11.131808280944824
    5. ' (' → logprob: -11.256808280944824
    6. '(

' → logprob: -11.381808280944824
    7. '```' → logprob: -11.381808280944824
    8. '(.)' → logprob: -12.506808280944824
    9. '('' → logprob: -12.631808280944824
    10. '().' → logprob: -13.131808280944824

Token 8: 'def' (ID: 1314)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.5101717114448547
    2. '(' → logprob: -1.76017165184021
    3. '()' → logprob: -3.01017165184021
    4. ':' → logprob: -3.26017165184021
    5. 'def' → logprob: -3.26017165184021
    6. '\' → logprob: -3.76017165184021
    7. '```' → logprob: -4.010171890258789
    8. '(
' → logprob: -4.260171890258789
    9. '#' → logprob: -4.885171890258789
    10. '<|end|>' → logprob: -5.010171890258789

Token 9: ' parse' (ID: 8420)
  Prédit: ' write'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' write' → logprob: -1.0810298919677734
    2. ' calculate' → logprob: -1.3310298919677734
    3. ' process' → logprob: -1.4560298919677734
    4. ' read' → logprob: -2.7060298919677734
    5. ' main' → logprob: -3.3310298919677734
    6. ' compute' → logprob: -4.456029891967773
    7. ' space' → logprob: -4.581029891967773
    8. ' parse' → logprob: -4.706029891967773
    9. ' user' → logprob: -5.331029891967773
    10. ' validate' → logprob: -5.831029891967773

Token 10: '_input' (ID: 12507)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.016805389896035194
    2. '_input' → logprob: -4.391805171966553
    3. '(' → logprob: -5.891805171966553
    4. '_line' → logprob: -7.141805171966553
    5. '_data' → logprob: -8.391805648803711
    6. '_token' → logprob: -9.141805648803711
    7. '_instruction' → logprob: -10.391805648803711
    8. '_output' → logprob: -10.766805648803711
    9. '_text' → logprob: -10.766805648803711
    10. '(_' → logprob: -10.766805648803711

Token 11: '(s' (ID: 1858)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.005402022507041693
    2. '_' → logprob: -6.505402088165283
    3. '("("' → logprob: -6.880402088165283
    4. '(_' → logprob: -7.380402088165283
    5. '():' → logprob: -7.630402088165283
    6. '('_' → logprob: -8.130401611328125
    7. '_text' → logprob: -8.630401611328125
    8. '_parent' → logprob: -8.755401611328125
    9. '(_:' → logprob: -8.755401611328125
    10. '('' → logprob: -9.130401611328125

Token 12: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00566141027957201
    2. ')' → logprob: -5.255661487579346
    3. ':' → logprob: -8.130661010742188
    4. '):
' → logprob: -9.505661010742188
    5. ' ):' → logprob: -10.755661010742188
    6. '_input' → logprob: -11.630661010742188
    7. '_' → logprob: -11.880661010742188
    8. ' :' → logprob: -13.005661010742188
    9. '_string' → logprob: -13.130661010742188
    10. ',' → logprob: -13.255661010742188

Token 13: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.020605772733688354
    2. '    ' → logprob: -4.520605564117432
    3. ' return' → logprob: -5.020605564117432
    4. ' s' → logprob: -6.895605564117432
    5. '(' → logprob: -7.520605564117432
    6. 'return' → logprob: -8.27060604095459
    7. 's' → logprob: -8.39560604095459
    8. '[' → logprob: -8.77060604095459
    9. ' ' → logprob: -8.77060604095459
    10. '    
' → logprob: -9.64560604095459

Token 14: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3766755759716034
    2. ' s' → logprob: -1.7516756057739258
    3. 's' → logprob: -2.126675605773926
    4. ' return' → logprob: -4.751675605773926
    5. 'return' (adapté à ' return') → logprob: -5.626675605773926
    6. ' tokens' → logprob: -6.126675605773926
    7. 'int' → logprob: -6.501675605773926
    8. '    ' → logprob: -6.501675605773926
    9. 'tokens' → logprob: -7.126675605773926
    10. ' int' → logprob: -7.376675605773926

Token 15: ' map' (ID: 4014)
  Prédit: ' s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.7987883687019348
    2. ' int' → logprob: -1.54878830909729
    3. 's' → logprob: -1.92378830909729
    4. ' list' → logprob: -2.29878830909729
    5. 'int' → logprob: -2.54878830909729
    6. 'list' → logprob: -4.673788547515869
    7. ' map' → logprob: -6.673788547515869
    8. '[int' → logprob: -7.173788547515869
    9. ' tuple' → logprob: -7.798788547515869
    10. ' [' → logprob: -7.923788547515869

Token 16: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3154352009296417
    2. '(int' → logprob: -1.3154351711273193
    3. '(str' → logprob: -6.190435409545898
    4. '(lambda' → logprob: -9.440435409545898
    5. '(
' → logprob: -10.940435409545898
    6. '(float' → logprob: -11.690435409545898
    7. 'int' → logprob: -12.190435409545898
    8. '(

' → logprob: -12.315435409545898
    9. '(s' → logprob: -12.690435409545898
    10. ' (' → logprob: -14.190435409545898

Token 17: ',' (ID: 11)
  Prédit: '(s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.3246030807495117
    2. '(' → logprob: -1.3246030807495117
    3. 's' → logprob: -4.574603080749512
    4. ')' → logprob: -7.199603080749512
    5. ',' → logprob: -9.324603080749512
    6. ' (' → logprob: -9.699603080749512
    7. ' s' → logprob: -10.449603080749512
    8. '   ' → logprob: -11.324603080749512
    9. '(
' → logprob: -11.324603080749512
    10. ',s' → logprob: -12.824603080749512

Token 18: ' s' (ID: 265)
  Prédit: ' s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.06197698414325714
    2. 's' → logprob: -2.811976909637451
    3. ')' → logprob: -11.81197738647461
    4. ')s' → logprob: -13.81197738647461
    5. '(s' → logprob: -14.56197738647461
    6. '	s' → logprob: -16.31197738647461
    7. ' ' → logprob: -16.43697738647461
    8. ' )' → logprob: -16.56197738647461
    9. '   ' → logprob: -17.06197738647461
    10. '`s' → logprob: -17.06197738647461

Token 19: '.split' (ID: 10347)
  Prédit: '.split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.split' → logprob: -0.4807190001010895
    2. '.' → logprob: -1.230718970298767
    3. '.strip' → logprob: -2.4807190895080566
    4. '().' → logprob: -5.730719089508057
    5. ' .' → logprob: -5.980719089508057
    6. ')' → logprob: -10.230718612670898
    7. '   ' → logprob: -10.480718612670898
    8. ').' → logprob: -10.605718612670898
    9. 'split' → logprob: -10.855718612670898
    10. '.rstrip' → logprob: -12.730718612670898

Token 20: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.21562474966049194
    2. '('' → logprob: -1.7156248092651367
    3. '()' → logprob: -5.215624809265137
    4. '(' → logprob: -5.340624809265137
    5. '()))' → logprob: -5.590624809265137
    6. '("' → logprob: -9.840624809265137
    7. ')' → logprob: -10.465624809265137
    8. '("("' → logprob: -11.090624809265137
    9. ' ())' → logprob: -11.215624809265137
    10. '(','' → logprob: -11.465624809265137

Token 21: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0027394930366426706
    2. '<|end|>' → logprob: -6.127739429473877
    3. '<|end|>' → logprob: -8.752739906311035
    4. 'for' → logprob: -9.002739906311035
    5. '
' → logprob: -9.252739906311035
    6. '```' → logprob: -9.377739906311035
    7. '\' → logprob: -9.877739906311035
    8. '  
' → logprob: -12.002739906311035
    9. '\n' → logprob: -12.377739906311035
    10. 'data' → logprob: -12.502739906311035

Token 22: ' get' (ID: 717)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.009760101325809956
    2. ' solve' → logprob: -5.134759902954102
    3. 'main' → logprob: -6.009759902954102
    4. ' process' → logprob: -7.134759902954102
    5. 'solve' → logprob: -8.634759902954102
    6. ' sum' → logprob: -8.759759902954102
    7. ' calculate' → logprob: -9.134759902954102
    8. ' compute' → logprob: -10.134759902954102
    9. 'process' → logprob: -10.884759902954102
    10. ' write' → logprob: -11.134759902954102

Token 23: '_n' (ID: 2170)
  Prédit: '_max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_max' → logprob: -0.14770899713039398
    2. '_sum' → logprob: -2.3977088928222656
    3. '_input' → logprob: -4.522708892822266
    4. '_' → logprob: -4.772708892822266
    5. '_data' → logprob: -5.522708892822266
    6. '_numbers' → logprob: -6.147708892822266
    7. '_div' → logprob: -6.272708892822266
    8. '_f' → logprob: -6.272708892822266
    9. '_pr' → logprob: -6.397708892822266
    10. '_next' → logprob: -6.397708892822266

Token 24: '_k' (ID: 11637)
  Prédit: 'ext'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ext' → logprob: -0.30293789505958557
    2. '_' → logprob: -1.9279378652572632
    3. 'ame' → logprob: -3.4279379844665527
    4. 'um' → logprob: -3.5529379844665527
    5. '_ext' → logprob: -3.6779379844665527
    6. 'umber' → logprob: -3.9279379844665527
    7. 'umbers' → logprob: -5.802937984466553
    8. '()' → logprob: -6.552937984466553
    9. 'ames' → logprob: -6.927937984466553
    10. 'a' → logprob: -7.052937984466553

Token 25: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.05247851833701134
    2. '()' → logprob: -3.052478551864624
    3. '_' → logprob: -6.427478313446045
    4. ' (' → logprob: -7.052478313446045
    5. '(n' → logprob: -8.052478790283203
    6. ')' → logprob: -8.552478790283203
    7. ' ()' → logprob: -9.177478790283203
    8. '():' → logprob: -9.552478790283203
    9. ' ' → logprob: -9.927478790283203
    10. '```' → logprob: -9.927478790283203

Token 26: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.005229848437011242
    2. 'return' → logprob: -6.005229949951172
    3. ' return' → logprob: -6.255229949951172
    4. '    
' → logprob: -8.005229949951172
    5. 'n' → logprob: -8.630229949951172
    6. '    ' → logprob: -9.255229949951172
    7. ' n' → logprob: -9.880229949951172
    8. 's' → logprob: -10.380229949951172
    9. 'line' → logprob: -10.755229949951172
    10. '  ' → logprob: -10.880229949951172

Token 27: ' s' (ID: 265)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' (adapté à ' s') → logprob: -0.3191641569137573
    2. 'line' → logprob: -1.4441641569137573
    3. '   ' → logprob: -4.194164276123047
    4. 'return' → logprob: -4.569164276123047
    5. 'n' → logprob: -4.694164276123047
    6. ' line' → logprob: -6.819164276123047
    7. ' s' → logprob: -7.069164276123047
    8. 'input' → logprob: -8.819164276123047
    9. 'lines' → logprob: -8.944164276123047
    10. 'raw' → logprob: -8.944164276123047

Token 28: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.006719759665429592
    2. '=' → logprob: -5.006719589233398
    3. ' ' → logprob: -12.881719589233398
    4. ',' → logprob: -14.631719589233398
    5. '  ' → logprob: -14.756719589233398
    6. '   ' → logprob: -15.381719589233398
    7. '.' → logprob: -15.756719589233398
    8. '=input' → logprob: -15.756719589233398
    9. ' ' → logprob: -16.3817195892334
    10. ' =
' → logprob: -16.3817195892334

Token 29: ' read' (ID: 1729)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.37631359696388245
    2. ' read' → logprob: -1.25131356716156
    3. 'input' → logprob: -3.8763136863708496
    4. 'read' → logprob: -5.00131368637085
    5. ' ' → logprob: -10.876313209533691
    6. ' readline' → logprob: -12.876313209533691
    7. '	read' → logprob: -13.001313209533691
    8. '	input' → logprob: -13.501313209533691
    9. '=input' → logprob: -14.001313209533691
    10. '  ' → logprob: -14.251313209533691

Token 30: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.00012713817704934627
    2. '_' → logprob: -9.000126838684082
    3. '_put' → logprob: -13.875126838684082
    4. '_in' → logprob: -13.875126838684082
    5. 'input' → logprob: -14.500126838684082
    6. 'put' → logprob: -14.625126838684082
    7. '_output' → logprob: -15.625126838684082
    8. '_line' → logprob: -16.0001277923584
    9. '_Input' → logprob: -16.6251277923584
    10. '_inputs' → logprob: -16.6251277923584

Token 31: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -4.47757811343763e-05
    2. '())' → logprob: -10.500044822692871
    3. ')' → logprob: -11.625044822692871
    4. ' ()' → logprob: -12.625044822692871
    5. '()
' → logprob: -13.000044822692871
    6. '(' → logprob: -13.875044822692871
    7. '()

' → logprob: -14.500044822692871
    8. '`()' → logprob: -15.500044822692871
    9. '()`' → logprob: -15.625044822692871
    10. '();' → logprob: -15.625044822692871

Token 32: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.021888237446546555
    2. 'return' → logprob: -4.021888256072998
    3. ' return' → logprob: -5.896888256072998
    4. 'n' → logprob: -8.39688777923584
    5. '    
' → logprob: -8.52188777923584
    6. '
' → logprob: -8.89688777923584
    7. '<|end|>' → logprob: -8.89688777923584
    8. '	return' → logprob: -9.39688777923584
    9. ' ' → logprob: -9.77188777923584
    10. 'def' → logprob: -10.77188777923584

Token 33: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.46530991792678833
    2. '   ' → logprob: -1.2153098583221436
    3. ' return' → logprob: -2.5903098583221436
    4. 'n' → logprob: -8.215310096740723
    5. ' n' → logprob: -9.965310096740723
    6. ' ' → logprob: -10.215310096740723
    7. '```' → logprob: -10.340310096740723
    8. '	return' → logprob: -10.840310096740723
    9. '    ' → logprob: -11.465310096740723
    10. '`' → logprob: -11.965310096740723

Token 34: ' parse' (ID: 8420)
  Prédit: ' parse'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' parse' → logprob: -0.2057207077741623
    2. 'parse' → logprob: -1.9557206630706787
    3. ' tuple' → logprob: -3.2057206630706787
    4. 'tuple' → logprob: -6.205720901489258
    5. ' map' → logprob: -6.580720901489258
    6. 'map' → logprob: -7.580720901489258
    7. ' list' → logprob: -11.330720901489258
    8. 'list' → logprob: -11.830720901489258
    9. ' ' → logprob: -12.580720901489258
    10. '*' → logprob: -12.830720901489258

Token 35: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -6.704273118884885e-07
    2. '_' → logprob: -15.125000953674316
    3. '_inputs' → logprob: -15.500000953674316
    4. '_output' → logprob: -17.0
    5. '_in' → logprob: -17.375
    6. '_Input' → logprob: -18.75
    7. '```' → logprob: -19.0
    8. '_INPUT' → logprob: -19.25
    9. '_data' → logprob: -19.75
    10. '_token' → logprob: -20.0

Token 36: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.1272195428609848
    2. '(' → logprob: -2.1272194385528564
    3. ' (' → logprob: -8.502219200134277
    4. '("("' → logprob: -10.127219200134277
    5. '(
' → logprob: -11.502219200134277
    6. '('' → logprob: -11.752219200134277
    7. '(ss' → logprob: -12.127219200134277
    8. '((' → logprob: -12.377219200134277
    9. 's' → logprob: -12.502219200134277
    10. ')(' → logprob: -12.752219200134277

Token 37: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -5.512236498361744e-07
    2. '))' → logprob: -14.875000953674316
    3. ' )' → logprob: -16.375
    4. ')
' → logprob: -17.75
    5. '())' → logprob: -19.625
    6. ')`' → logprob: -19.625
    7. ')}' → logprob: -19.875
    8. '),' → logprob: -20.0
    9. '()' → logprob: -20.5
    10. ')))' → logprob: -20.625

Token 38: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.4129500985145569
    2. 'n' → logprob: -1.287950038909912
    3. 'd' → logprob: -3.662950038909912
    4. '
' → logprob: -3.787950038909912
    5. '#' → logprob: -5.537950038909912
    6. '

' → logprob: -6.162950038909912
    7. '<|end|>' → logprob: -6.412950038909912
    8. '\n' → logprob: -6.537950038909912
    9. '```' → logprob: -6.537950038909912
    10. '[' → logprob: -7.287950038909912

Token 39: ' check' (ID: 2371)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.6021546721458435
    2. ' solve' → logprob: -1.1021547317504883
    3. ' get' → logprob: -2.4771547317504883
    4. ' calculate' → logprob: -3.9771547317504883
    5. ' find' → logprob: -4.977154731750488
    6. ' compute' → logprob: -5.352154731750488
    7. ' process' → logprob: -6.102154731750488
    8. ' run' → logprob: -7.102154731750488
    9. ' count' → logprob: -7.602154731750488
    10. ' generate' → logprob: -8.227154731750488

Token 40: '_k' (ID: 11637)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.14915981888771057
    2. '(' → logprob: -2.7741599082946777
    3. '_valid' → logprob: -4.524159908294678
    4. '_space' → logprob: -4.774159908294678
    5. '(k' → logprob: -5.524159908294678
    6. '_condition' → logprob: -5.649159908294678
    7. '_k' → logprob: -5.649159908294678
    8. '_sub' → logprob: -5.649159908294678
    9. '_possible' → logprob: -5.649159908294678
    10. '_constraints' → logprob: -5.899159908294678

Token 41: '_equals' (ID: 165870)
  Prédit: '(k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(k' → logprob: -0.37706685066223145
    2. '(' → logprob: -1.2520668506622314
    3. '_div' → logprob: -5.002066612243652
    4. '(n' → logprob: -5.377066612243652
    5. '(_' → logprob: -5.377066612243652
    6. '_(' → logprob: -5.627066612243652
    7. '_less' → logprob: -6.252066612243652
    8. '_valid' → logprob: -6.377066612243652
    9. '_' → logprob: -7.377066612243652
    10. '(a' → logprob: -8.002066612243652

Token 42: '_one' (ID: 26979)
  Prédit: '_k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_k' → logprob: -0.36276039481163025
    2. '_' → logprob: -1.8627604246139526
    3. '(k' → logprob: -2.612760305404663
    4. '(n' → logprob: -3.237760305404663
    5. '_n' → logprob: -3.737760305404663
    6. '(' → logprob: -4.737760543823242
    7. '_(' → logprob: -6.862760543823242
    8. ' ' → logprob: -7.112760543823242
    9. '_zero' → logprob: -7.612760543823242
    10. '(s' → logprob: -8.362760543823242

Token 43: '(k' (ID: 12125)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.5302357077598572
    2. '(' → logprob: -0.9052357077598572
    3. '()' → logprob: -6.030235767364502
    4. '_' → logprob: -6.280235767364502
    5. '(:' → logprob: -6.905235767364502
    6. '(_:' → logprob: -7.530235767364502
    7. '(_)' → logprob: -7.655235767364502
    8. ':' → logprob: -8.280235290527344
    9. '(_' → logprob: -8.780235290527344
    10. '(k' → logprob: -9.780235290527344

Token 44: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.005270991940051317
    2. ')' → logprob: -5.255270957946777
    3. '):
' → logprob: -11.005270957946777
    4. ':' → logprob: -11.380270957946777
    5. ' ):' → logprob: -11.880270957946777
    6. ''):' → logprob: -14.380270957946777
    7. '():' → logprob: -15.005270957946777
    8. ',' → logprob: -15.505270957946777
    9. ' ' → logprob: -16.005271911621094
    10. '   ' → logprob: -16.130271911621094

Token 45: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0554712638258934
    2. ':' → logprob: -2.930471181869507
    3. ' if' → logprob: -8.680471420288086
    4. '():' → logprob: -9.055471420288086
    5. ':
' → logprob: -9.305471420288086
    6. ':return' → logprob: -9.555471420288086
    7. 'if' → logprob: -9.805471420288086
    8. '```' → logprob: -10.805471420288086
    9. ' return' → logprob: -11.305471420288086
    10. '    
' → logprob: -11.305471420288086

Token 46: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01741768606007099
    2. ' if' → logprob: -4.267417907714844
    3. ' return' → logprob: -6.267417907714844
    4. 'if' → logprob: -7.017417907714844
    5. '    ' → logprob: -8.642417907714844
    6. 'return' (adapté à ' return') → logprob: -9.392417907714844
    7. ' ' → logprob: -9.767417907714844
    8. ':' → logprob: -10.142417907714844
    9. '    
' → logprob: -10.892417907714844
    10. '```' → logprob: -11.267417907714844

Token 47: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.008824214339256287
    2. 'k' → logprob: -4.758824348449707
    3. ' True' → logprob: -9.133824348449707
    4. ' ' → logprob: -9.883824348449707
    5. '(k' → logprob: -11.133824348449707
    6. ' (' → logprob: -11.633824348449707
    7. 'True' → logprob: -11.758824348449707
    8. '(' → logprob: -12.133824348449707
    9. '1' → logprob: -12.133824348449707
    10. ' False' → logprob: -12.258824348449707

Token 48: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.1815168857574463
    2. '==' → logprob: -1.8065168857574463
    3. '>' → logprob: -7.556516647338867
    4. ' ' → logprob: -7.556516647338867
    5. '=' → logprob: -8.181516647338867
    6. ' >' → logprob: -8.431516647338867
    7. ' !=' → logprob: -9.056516647338867
    8. '1' → logprob: -10.681516647338867
    9. '!=' → logprob: -10.931516647338867
    10. ' =' → logprob: -11.306516647338867

Token 49: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.12692978978157043
    2. '1' → logprob: -2.126929759979248
    3. ' ' → logprob: -13.626930236816406
    4. '```' → logprob: -16.001930236816406
    5. '_' → logprob: -16.251930236816406
    6. '0' → logprob: -16.939430236816406
    7. ' one' → logprob: -17.251930236816406
    8. '`' → logprob: -17.501930236816406
    9. 'One' → logprob: -18.314430236816406
    10. '   ' → logprob: -18.814430236816406

Token 50: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.130576806142926e-05
    2. ' ' → logprob: -10.375031471252441
    3. '```' → logprob: -19.000030517578125
    4. '   ' → logprob: -19.250030517578125
    5. '`' → logprob: -20.125030517578125
    6. '' → logprob: -20.125030517578125
    7. '0' → logprob: -20.250030517578125
    8. '１' → logprob: -20.500030517578125
    9. '  ' → logprob: -21.125030517578125
    10. '2' → logprob: -21.500030517578125

Token 51: '

' (ID: 279)
  Prédit: '

'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '

' → logprob: -0.4372568726539612
    2. 'def' → logprob: -1.6872568130493164
    3. '<|end|>' → logprob: -2.4372568130493164
    4. '
' → logprob: -2.5622568130493164
    5. '\n' → logprob: -6.312256813049316
    6. '<|end|>' → logprob: -6.937256813049316
    7. '```' → logprob: -7.312256813049316
    8. ' def' → logprob: -8.187256813049316
    9. 'newline' → logprob: -8.437256813049316
    10. '\' → logprob: -8.937256813049316

Token 52: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.01210023183375597
    2. '<|end|>' → logprob: -5.0121002197265625
    3. '
' → logprob: -5.5121002197265625
    4. '<|end|>' → logprob: -7.3871002197265625
    5. '

' → logprob: -7.7621002197265625
    6. '```' → logprob: -9.137100219726562
    7. '\n' → logprob: -9.137100219726562
    8. '\' → logprob: -10.387100219726562
    9. '  
' → logprob: -11.387100219726562
    10. ' def' → logprob: -12.012100219726562

Token 53: ' compute' (ID: 23864)
  Prédit: ' check'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' check' → logprob: -0.046198856085538864
    2. ' solve' → logprob: -4.296198844909668
    3. ' get' → logprob: -4.546198844909668
    4. ' main' → logprob: -4.796198844909668
    5. ' is' → logprob: -5.671198844909668
    6. ' calculate' → logprob: -6.046198844909668
    7. ' find' → logprob: -6.546198844909668
    8. ' def' → logprob: -6.546198844909668
    9. ' factorial' → logprob: -7.171198844909668
    10. ' compute' → logprob: -7.421198844909668

Token 54: '_result' (ID: 11623)
  Prédit: '_sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -1.0144050121307373
    2. '_result' → logprob: -1.1394050121307373
    3. '_max' → logprob: -1.8894050121307373
    4. '(' → logprob: -3.3894050121307373
    5. '_factor' → logprob: -3.3894050121307373
    6. '(n' → logprob: -3.5144050121307373
    7. '_' → logprob: -3.8894050121307373
    8. '_answer' → logprob: -5.014405250549316
    9. '_total' → logprob: -5.139405250549316
    10. '_product' → logprob: -5.764405250549316

Token 55: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.03403913974761963
    2. '(' → logprob: -3.40903902053833
    3. ' (' → logprob: -8.659039497375488
    4. '(k' → logprob: -9.284039497375488
    5. '(N' → logprob: -10.159039497375488
    6. '(s' → logprob: -10.659039497375488
    7. 'def' → logprob: -11.159039497375488
    8. '()' → logprob: -11.409039497375488
    9. '():' → logprob: -12.159039497375488
    10. '(def' → logprob: -12.534039497375488

Token 56: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0011934408685192466
    2. ',k' → logprob: -6.751193523406982
    3. ' ,' → logprob: -10.751193046569824
    4. ')' → logprob: -14.626193046569824
    5. ',
' → logprob: -14.751193046569824
    6. ' k' → logprob: -15.626193046569824
    7. ',n' → logprob: -15.876193046569824
    8. 'k' → logprob: -16.12619400024414
    9. '):' → logprob: -16.50119400024414
    10. ' ' → logprob: -16.75119400024414

Token 57: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.08894655108451843
    2. ' k' → logprob: -2.463946580886841
    3. ' ' → logprob: -12.088946342468262
    4. '   ' → logprob: -15.213946342468262
    5. 'n' → logprob: -15.713946342468262
    6. ')' → logprob: -15.776446342468262
    7. '	k' → logprob: -15.838946342468262
    8. '  ' → logprob: -16.026447296142578
    9. '```' → logprob: -16.276447296142578
    10. ' ' → logprob: -16.338947296142578

Token 58: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -6.480199954239652e-05
    2. ',' → logprob: -10.625064849853516
    3. ':' → logprob: -10.875064849853516
    4. ')' → logprob: -11.250064849853516
    5. '):
' → logprob: -11.875064849853516
    6. ' ):' → logprob: -14.125064849853516
    7. '   ' → logprob: -15.250064849853516
    8. '):
' → logprob: -16.500064849853516
    9. '():' → logprob: -16.500064849853516
    10. '=' → logprob: -16.625064849853516

Token 59: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10203482955694199
    2. ' if' → logprob: -2.7270348072052
    3. ' return' → logprob: -4.102035045623779
    4. 'if' → logprob: -4.852035045623779
    5. 'return' → logprob: -5.852035045623779
    6. ' result' → logprob: -6.102035045623779
    7. 'result' → logprob: -7.602035045623779
    8. '0' → logprob: -7.602035045623779
    9. ' for' → logprob: -7.852035045623779
    10. ' n' → logprob: -8.602034568786621

Token 60: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.44816282391548157
    2. 'return' → logprob: -1.3231627941131592
    3. ' if' → logprob: -2.948162794113159
    4. 'result' → logprob: -3.573162794113159
    5. ' return' → logprob: -4.698163032531738
    6. '   ' → logprob: -6.573163032531738
    7. '1' → logprob: -6.698163032531738
    8. ' result' → logprob: -6.823163032531738
    9. '0' → logprob: -6.948163032531738
    10. '[' → logprob: -8.948163032531738

Token 61: ' check' (ID: 2371)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.001831538276746869
    2. ' n' → logprob: -6.501831531524658
    3. 'k' → logprob: -8.376832008361816
    4. ' ' → logprob: -9.501832008361816
    5. ' ' → logprob: -10.876832008361816
    6. ' (' → logprob: -13.501832008361816
    7. 'n' → logprob: -13.501832008361816
    8. ' not' → logprob: -14.126832008361816
    9. '_' → logprob: -14.501832008361816
    10. '	k' → logprob: -15.689332008361816

Token 62: '_k' (ID: 11637)
  Prédit: '_k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_k' → logprob: -5.676981345459353e-06
    2. '_' → logprob: -12.375005722045898
    3. '(k' → logprob: -14.250005722045898
    4. ' _' → logprob: -14.375005722045898
    5. '_n' → logprob: -17.6250057220459
    6. '(_' → logprob: -18.2500057220459
    7. '```' → logprob: -18.5000057220459
    8. ' ' → logprob: -18.6250057220459
    9. '(' → logprob: -18.6250057220459
    10. 'k' → logprob: -18.7500057220459

Token 63: '_equals' (ID: 165870)
  Prédit: '_equals'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_equals' → logprob: -0.1419951319694519
    2. ' ==' → logprob: -2.6419951915740967
    3. '_' → logprob: -3.6419951915740967
    4. ' _' → logprob: -4.141994953155518
    5. '==' → logprob: -4.141994953155518
    6. ' ' → logprob: -7.141994953155518
    7. '_EQUALS' → logprob: -7.141994953155518
    8. '_equal' → logprob: -7.391994953155518
    9. ' ' → logprob: -7.641994953155518
    10. '=' → logprob: -9.516995429992676

Token 64: '_one' (ID: 26979)
  Prédit: '_one'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_one' → logprob: -0.024460598826408386
    2. '_' → logprob: -3.774460554122925
    3. ' _' → logprob: -7.899460792541504
    4. ' ' → logprob: -8.524460792541504
    5. '_once' → logprob: -9.149460792541504
    6. '1' → logprob: -9.774460792541504
    7. ''_' → logprob: -9.774460792541504
    8. '_k' → logprob: -10.149460792541504
    9. '_two' → logprob: -10.149460792541504
    10. '_space' → logprob: -10.399460792541504

Token 65: '(k' (ID: 12125)
  Prédit: '(k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(k' → logprob: -0.0004487844998948276
    2. '(' → logprob: -8.125449180603027
    3. '(n' → logprob: -9.250449180603027
    4. ' (' → logprob: -10.125449180603027
    5. ':' → logprob: -11.125449180603027
    6. '(s' → logprob: -14.375449180603027
    7. '((' → logprob: -15.125449180603027
    8. ')' → logprob: -15.375449180603027
    9. '):' → logprob: -15.625449180603027
    10. '():' → logprob: -16.00044822692871

Token 66: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.02988273836672306
    2. '):
' → logprob: -3.5298826694488525
    3. ':' → logprob: -9.654882431030273
    4. ' ):' → logprob: -10.529882431030273
    5. '):
' → logprob: -11.029882431030273
    6. '   ' → logprob: -11.529882431030273
    7. ')' → logprob: -11.529882431030273
    8. ' ' → logprob: -13.904882431030273
    9. '):

' → logprob: -13.904882431030273
    10. ' ):
' → logprob: -13.904882431030273

Token 67: '       ' (ID: 309)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.06511671096086502
    2. ':
' → logprob: -2.9401166439056396
    3. '       ' → logprob: -4.815116882324219
    4. ':return' → logprob: -6.440116882324219
    5. '   ' → logprob: -8.815116882324219
    6. '):' → logprob: -9.440116882324219
    7. '):
' → logprob: -9.940116882324219
    8. '<|end|>' → logprob: -10.190116882324219
    9. ' return' → logprob: -10.315116882324219
    10. ',' → logprob: -10.690116882324219

Token 68: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -1.0751169919967651
    2. 'return' (adapté à ' return') → logprob: -1.2001169919967651
    3. '       ' → logprob: -1.2001169919967651
    4. '           ' → logprob: -3.5751171112060547
    5. ':' → logprob: -4.950117111206055
    6. ':
' → logprob: -5.200117111206055
    7. '   ' → logprob: -5.325117111206055
    8. '
' → logprob: -5.450117111206055
    9. ':return' → logprob: -6.450117111206055
    10. '0' → logprob: -6.575117111206055

Token 69: ' ' (ID: 220)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.3835650682449341
    2. 'n' → logprob: -1.633565068244934
    3. ' ' → logprob: -3.0085649490356445
    4. '1' → logprob: -3.2585649490356445
    5. '0' → logprob: -3.5085649490356445
    6. ' (' → logprob: -6.7585649490356445
    7. '"' → logprob: -7.1335649490356445
    8. ' "' → logprob: -7.2585649490356445
    9. '2' → logprob: -7.8835649490356445
    10. '(n' → logprob: -8.008564949035645

Token 70: '0' (ID: 15)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.23629441857337952
    2. '0' → logprob: -2.3612945079803467
    3. '1' → logprob: -2.3612945079803467
    4. '(n' → logprob: -4.861294269561768
    5. '-' → logprob: -5.486294269561768
    6. '(' → logprob: -5.611294269561768
    7. '"' → logprob: -6.361294269561768
    8. '2' → logprob: -6.361294269561768
    9. '[n' → logprob: -7.986294269561768
    10. 'pow' → logprob: -8.111294746398926

Token 71: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.2629425823688507
    2. '   ' → logprob: -2.1379425525665283
    3. '<|end|>' → logprob: -2.3879425525665283
    4. '    
' → logprob: -4.012942790985107
    5. '<|end|>' → logprob: -6.762942790985107
    6. '  
' → logprob: -7.387942790985107
    7. '\n' → logprob: -7.887942790985107
    8. ' else' → logprob: -8.01294231414795
    9. '   
' → logprob: -8.38794231414795
    10. 'else' → logprob: -9.26294231414795

Token 72: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008701439946889877
    2. '
' → logprob: -5.508701324462891
    3. '    
' → logprob: -5.508701324462891
    4. '<|end|>' → logprob: -8.63370132446289
    5. ' else' → logprob: -8.88370132446289
    6. 'else' → logprob: -9.75870132446289
    7. '\n' → logprob: -10.00870132446289
    8. 'elif' → logprob: -10.38370132446289
    9. ' elif' → logprob: -10.88370132446289
    10. 'return' → logprob: -11.88370132446289

Token 73: ' else' (ID: 1203)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03974709287285805
    2. '    
' → logprob: -3.4147469997406006
    3. ' else' → logprob: -6.28974723815918
    4. '
' → logprob: -6.41474723815918
    5. ' elif' → logprob: -7.78974723815918
    6. 'else' (adapté à ' else') → logprob: -8.03974723815918
    7. ' 
' → logprob: -8.16474723815918
    8. 'n' → logprob: -8.16474723815918
    9. 'elif' → logprob: -8.66474723815918
    10. '    ' → logprob: -8.91474723815918

Token 74: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5382985472679138
    2. '       ' → logprob: -0.9132985472679138
    3. ':
' → logprob: -4.913298606872559
    4. '   ' → logprob: -5.413298606872559
    5. '    ' → logprob: -7.163298606872559
    6. ':return' → logprob: -7.538298606872559
    7. ' return' → logprob: -8.038298606872559
    8. ',' → logprob: -8.163298606872559
    9. ' :' → logprob: -8.413298606872559
    10. '
' → logprob: -9.038298606872559

Token 75: '       ' (ID: 309)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.1769208312034607
    2. '   ' → logprob: -2.5519208908081055
    3. 'n' → logprob: -3.6769208908081055
    4. ' return' → logprob: -4.1769208908081055
    5. '1' → logprob: -4.8019208908081055
    6. ' (' → logprob: -4.8019208908081055
    7. '    ' → logprob: -4.8019208908081055
    8. '       ' → logprob: -5.0519208908081055
    9. ' ' → logprob: -5.5519208908081055
    10. '(n' → logprob: -5.9269208908081055

Token 76: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.291365385055542
    2. 'return' (adapté à ' return') → logprob: -1.416365385055542
    3. '       ' → logprob: -5.291365623474121
    4. ' n' → logprob: -5.791365623474121
    5. '   ' → logprob: -6.916365623474121
    6. 'n' → logprob: -7.291365623474121
    7. '        
' → logprob: -9.791365623474121
    8. '1' → logprob: -9.916365623474121
    9. ' k' → logprob: -10.291365623474121
    10. ' ' → logprob: -10.541365623474121

Token 77: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.6173083186149597
    2. 'n' → logprob: -1.6173083782196045
    3. ' (' → logprob: -1.8673083782196045
    4. '(n' → logprob: -2.4923083782196045
    5. '1' → logprob: -4.992308139801025
    6. '(' → logprob: -5.117308139801025
    7. ' k' → logprob: -5.867308139801025
    8. 'k' → logprob: -6.242308139801025
    9. '(k' → logprob: -6.367308139801025
    10. ' max' → logprob: -6.617308139801025

Token 78: ' -' (ID: 533)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 79: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.08859553933143616
    2. '1' → logprob: -2.5885956287384033
    3. '2' → logprob: -5.088595390319824
    4. ' k' → logprob: -5.838595390319824
    5. ' ' → logprob: -8.088595390319824
    6. '(k' → logprob: -8.838595390319824
    7. ' (' → logprob: -9.963595390319824
    8. '(' → logprob: -10.588595390319824
    9. '3' → logprob: -11.463595390319824
    10. 'n' → logprob: -11.588595390319824

Token 80: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 81: 'def' (ID: 1314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 82: ' display' (ID: 4589)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.0039648935198783875
    2. ' compute' → logprob: -6.378964900970459
    3. ' solve' → logprob: -7.253964900970459
    4. ' run' → logprob: -7.878964900970459
    5. ' calculate' → logprob: -7.878964900970459
    6. ' read' → logprob: -8.2539644241333
    7. ' check' → logprob: -8.5039644241333
    8. ' process' → logprob: -9.1289644241333
    9. ' test' → logprob: -9.3789644241333
    10. ' get' → logprob: -9.6289644241333

Token 83: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -0.00014537633978761733
    2. '(result' → logprob: -9.625144958496094
    3. '(' → logprob: -10.000144958496094
    4. '_output' → logprob: -11.500144958496094
    5. '_' → logprob: -11.625144958496094
    6. '_results' → logprob: -11.750144958496094
    7. '(_' → logprob: -13.000144958496094
    8. '_RESULT' → logprob: -13.500144958496094
    9. '_Result' → logprob: -13.625144958496094
    10. 'result' → logprob: -13.750144958496094

Token 84: '(res' (ID: 8331)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.028259916231036186
    2. '(result' → logprob: -3.6532599925994873
    3. '()' → logprob: -6.653259754180908
    4. '():' → logprob: -8.778260231018066
    5. '(results' → logprob: -9.153260231018066
    6. '(def' → logprob: -9.153260231018066
    7. '(n' → logprob: -9.903260231018066
    8. '(res' → logprob: -10.153260231018066
    9. '(output' → logprob: -10.403260231018066
    10. ' (' → logprob: -10.528260231018066

Token 85: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08406437188386917
    2. '):
' → logprob: -3.459064483642578
    3. '):' → logprob: -3.959064483642578
    4. 'ult' → logprob: -3.959064483642578
    5. 't' → logprob: -4.584064483642578
    6. ')**' → logprob: -8.834064483642578
    7. '):

' → logprob: -8.834064483642578
    8. ')t' → logprob: -8.959064483642578
    9. '):
' → logprob: -9.584064483642578
    10. ')
' → logprob: -10.084064483642578

Token 86: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0038568400777876377
    2. 'print' → logprob: -6.253856658935547
    3. ' print' → logprob: -6.253856658935547
    4. '```' → logprob: -12.628856658935547
    5. '   ' → logprob: -16.628856658935547
    6. '       ' → logprob: -18.128856658935547
    7. '	print' → logprob: -18.378856658935547
    8. '`' → logprob: -18.753856658935547
    9. '    ' → logprob: -18.753856658935547
    10. '  ' → logprob: -19.003856658935547

Token 87: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.02357737347483635
    2. ' print' → logprob: -3.7735774517059326
    3. '   ' → logprob: -8.023577690124512
    4. '```' → logprob: -12.398577690124512
    5. '	print' → logprob: -17.648576736450195
    6. '``' → logprob: -17.773576736450195
    7. '    ' → logprob: -17.898576736450195
    8. '`' → logprob: -17.898576736450195
    9. '  ' → logprob: -18.523576736450195
    10. 'def' → logprob: -19.523576736450195

Token 88: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -0.0003377270477358252
    2. '(' → logprob: -8.000337600708008
    3. '(result' → logprob: -13.750337600708008
    4. 'res' → logprob: -14.250337600708008
    5. '()' → logprob: -15.375337600708008
    6. ' (' → logprob: -15.500337600708008
    7. '(f' → logprob: -16.125337600708008
    8. '=res' → logprob: -17.875337600708008
    9. '(re' → logprob: -18.125337600708008
    10. '(results' → logprob: -18.125337600708008

Token 89: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9361264946837764e-07
    2. ')
' → logprob: -16.25
    3. '))' → logprob: -18.25
    4. ' )' → logprob: -18.375
    5. ')

' → logprob: -19.625
    6. ')`' → logprob: -19.75
    7. ')}' → logprob: -20.0
    8. '()' → logprob: -20.125
    9. '')' → logprob: -20.375
    10. '}' → logprob: -20.625

Token 90: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -7.982165698194876e-05
    2. 'if' → logprob: -9.750080108642578
    3. '```' → logprob: -11.125080108642578
    4. 'n' → logprob: -12.625080108642578
    5. '\' → logprob: -13.625080108642578
    6. '#' → logprob: -14.625080108642578
    7. 'for' → logprob: -14.625080108642578
    8. 'ndef' → logprob: -14.875080108642578
    9. '<|end|>' → logprob: -15.000080108642578
    10. '\n' → logprob: -15.500080108642578

Token 91: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.0004925066023133695
    2. 'main' → logprob: -7.750492572784424
    3. '_main' → logprob: -9.875492095947266
    4. ' run' → logprob: -11.875492095947266
    5. '_' → logprob: -13.625492095947266
    6. ' process' → logprob: -13.750492095947266
    7. ' _' → logprob: -14.500492095947266
    8. ' solve' → logprob: -15.375492095947266
    9. ' def' → logprob: -15.375492095947266
    10. '	main' → logprob: -16.875492095947266

Token 92: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -8.180258191714529e-06
    2. ' ():' → logprob: -12.125008583068848
    3. '():
' → logprob: -13.750008583068848
    4. '()' → logprob: -14.375008583068848
    5. '(' → logprob: -14.500008583068848
    6. '_' → logprob: -14.750008583068848
    7. '(:' → logprob: -17.62500762939453
    8. ':' → logprob: -17.87500762939453
    9. '():
' → logprob: -18.12500762939453
    10. '(":' → logprob: -18.50000762939453

Token 93: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.025024764239788055
    2. 'n' → logprob: -3.775024652481079
    3. ' n' → logprob: -7.025024890899658
    4. '(n' → logprob: -7.275024890899658
    5. '	n' → logprob: -9.1500244140625
    6. '_n' → logprob: -10.6500244140625
    7. '(' → logprob: -11.0250244140625
    8. '    
' → logprob: -11.4000244140625
    9. 's' → logprob: -11.9000244140625
    10. ',n' → logprob: -12.0250244140625

Token 94: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.0039855544455349445
    2. '   ' → logprob: -5.753985404968262
    3. ' n' → logprob: -7.128985404968262
    4. 's' → logprob: -13.128985404968262
    5. '	n' → logprob: -13.378985404968262
    6. ' ' → logprob: -13.878985404968262
    7. '  ' → logprob: -14.253985404968262
    8. '    
' → logprob: -15.003985404968262
    9. '
' → logprob: -15.628985404968262
    10. '```' → logprob: -15.878985404968262

Token 95: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00037228144356049597
    2. ',k' → logprob: -8.000371932983398
    3. ' ,' → logprob: -10.250371932983398
    4. 'k' → logprob: -13.750371932983398
    5. '‌,' → logprob: -16.3753719329834
    6. '_,' → logprob: -16.6253719329834
    7. '，' → logprob: -16.7503719329834
    8. ',
' → logprob: -17.1253719329834
    9. ' k' → logprob: -17.3753719329834
    10. ' ' → logprob: -17.7503719329834

Token 96: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.05489864572882652
    2. 'k' → logprob: -2.929898738861084
    3. ' ' → logprob: -12.429898262023926
    4. '<|end|>' → logprob: -12.429898262023926
    5. 'space' → logprob: -12.554898262023926
    6. '_k' → logprob: -13.804898262023926
    7. ' ' → logprob: -13.929898262023926
    8. '	k' → logprob: -13.929898262023926
    9. ',k' → logprob: -15.117398262023926
    10. ' к' → logprob: -15.304898262023926

Token 97: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0017023178515955806
    2. '=' → logprob: -6.376702308654785
    3. ' ' → logprob: -16.0017032623291
    4. ' =
' → logprob: -18.6267032623291
    5. ' =)' → logprob: -19.0017032623291
    6. ',' → logprob: -19.1267032623291
    7. ')' → logprob: -19.5017032623291
    8. '   ' → logprob: -19.7517032623291
    9. '＝' → logprob: -20.1267032623291
    10. '  ' → logprob: -20.1267032623291

Token 98: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.07889155298471451
    2. 'get' → logprob: -2.5788915157318115
    3. '	get' → logprob: -14.32889175415039
    4. '=get' → logprob: -14.45389175415039
    5. '   ' → logprob: -15.32889175415039
    6. '(get' → logprob: -15.57889175415039
    7. ' ' → logprob: -15.82889175415039
    8. ')get' → logprob: -16.57889175415039
    9. '  ' → logprob: -17.45389175415039
    10. '_get' → logprob: -17.70389175415039

Token 99: '_n' (ID: 2170)
  Prédit: '_n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: -2.0100624169572257e-05
    2. ' _' → logprob: -12.750020027160645
    3. 'n' → logprob: -12.875020027160645
    4. '_' → logprob: -12.875020027160645
    5. '(_' → logprob: -12.875020027160645
    6. '('_' → logprob: -13.750020027160645
    7. '"_' → logprob: -13.875020027160645
    8. ' ' → logprob: -14.250020027160645
    9. '```' → logprob: -14.500020027160645
    10. '(n' → logprob: -14.500020027160645

Token 100: '_k' (ID: 11637)
  Prédit: '_k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_k' → logprob: -0.04318724200129509
    2. '_' → logprob: -3.168187141418457
    3. '()' → logprob: -9.168187141418457
    4. 'k' → logprob: -11.168187141418457
    5. ' _' → logprob: -11.793187141418457
    6. '(' → logprob: -11.793187141418457
    7. '_key' → logprob: -11.918187141418457
    8. '_K' → logprob: -12.293187141418457
    9. '()
' → logprob: -12.543187141418457
    10. '__' → logprob: -12.918187141418457

Token 101: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0001593195047462359
    2. '()
' → logprob: -8.75015926361084
    3. '()

' → logprob: -15.25015926361084
    4. '()
' → logprob: -15.75015926361084
    5. ' ()' → logprob: -16.125160217285156
    6. '()`' → logprob: -16.500160217285156
    7. '()\' → logprob: -16.750160217285156
    8. '()"' → logprob: -17.000160217285156
    9. '(' → logprob: -18.000160217285156
    10. '()]' → logprob: -19.250160217285156

Token 102: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0009346862207166851
    2. '
' → logprob: -7.375934600830078
    3. '    
' → logprob: -8.875934600830078
    4. ' res' → logprob: -9.625934600830078
    5. 'res' → logprob: -9.625934600830078
    6. '  ' → logprob: -11.750934600830078
    7. '  
' → logprob: -11.875934600830078
    8. '<|end|>' → logprob: -11.875934600830078
    9. '```' → logprob: -12.375934600830078
    10. 'result' → logprob: -12.625934600830078

Token 103: ' res' (ID: 694)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' (adapté à ' res') → logprob: -0.46210387349128723
    2. ' res' → logprob: -1.2121038436889648
    3. 'result' → logprob: -3.212103843688965
    4. ' result' → logprob: -3.462103843688965
    5. '   ' → logprob: -7.087103843688965
    6. '	res' → logprob: -14.837103843688965
    7. '```' → logprob: -15.087103843688965
    8. '
' → logprob: -15.962103843688965
    9. ' ' → logprob: -16.33710479736328
    10. '    
' → logprob: -16.46210479736328

Token 104: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.12733657658100128
    2. '=' → logprob: -2.1273365020751953
    3. 'ult' → logprob: -8.002336502075195
    4. '   ' → logprob: -10.252336502075195
    5. ' ' → logprob: -10.502336502075195
    6. 'ault' → logprob: -13.252336502075195
    7. ' ' → logprob: -13.502336502075195
    8. 'u' → logprob: -13.627336502075195
    9. ' ult' → logprob: -13.752336502075195
    10. '  ' → logprob: -13.752336502075195

Token 105: ' compute' (ID: 23864)
  Prédit: ' compute'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' compute' → logprob: -0.1002068892121315
    2. 'compute' → logprob: -2.3502068519592285
    3. '   ' → logprob: -16.72520637512207
    4. '.compute' → logprob: -16.72520637512207
    5. '_compute' → logprob: -17.47520637512207
    6. ' computer' → logprob: -18.35020637512207
    7. ' ' → logprob: -18.35020637512207
    8. 'computer' → logprob: -19.22520637512207
    9. 'comput' → logprob: -19.60020637512207
    10. ' computed' → logprob: -19.60020637512207

Token 106: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -1.9361264946837764e-07
    2. '_res' → logprob: -16.0
    3. 'result' → logprob: -17.0
    4. '_' → logprob: -17.25
    5. '_results' → logprob: -17.625
    6. '_RESULT' → logprob: -18.125
    7. ' _' → logprob: -18.625
    8. '_Result' → logprob: -19.0
    9. '__' → logprob: -20.0
    10. '_response' → logprob: -21.5

Token 107: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0002072357019642368
    2. '(' → logprob: -8.62520694732666
    3. ' (' → logprob: -10.50020694732666
    4. '(
' → logprob: -16.500207901000977
    5. '   ' → logprob: -17.375207901000977
    6. ' ' → logprob: -17.625207901000977
    7. '```' → logprob: -18.875207901000977
    8. '(N' → logprob: -19.750207901000977
    9. '(noun' → logprob: -20.375207901000977
    10. '<n' → logprob: -20.500207901000977

Token 108: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0004984631086699665
    2. ',k' → logprob: -7.625498294830322
    3. ' ,' → logprob: -11.50049877166748
    4. ',
' → logprob: -15.62549877166748
    5. '   ' → logprob: -15.75049877166748
    6. ',n' → logprob: -17.125497817993164
    7. ')' → logprob: -17.250497817993164
    8. 'k' → logprob: -17.875497817993164
    9. '‌,' → logprob: -18.375497817993164
    10. ' ' → logprob: -18.375497817993164

Token 109: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.22545193135738373
    2. 'k' → logprob: -1.600451946258545
    3. ')' → logprob: -10.475451469421387
    4. ' ' → logprob: -11.850451469421387
    5. '   ' → logprob: -13.600451469421387
    6. '	k' → logprob: -14.350451469421387
    7. ' )' → logprob: -14.850451469421387
    8. '    ' → logprob: -14.850451469421387
    9. ',' → logprob: -15.787951469421387
    10. ' ' → logprob: -15.912951469421387

Token 110: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1602458506822586
    2. ')
' → logprob: -1.9102458953857422
    3. ')
' → logprob: -10.785245895385742
    4. '   ' → logprob: -14.410245895385742
    5. ')

' → logprob: -15.410245895385742
    6. ' )
' → logprob: -16.035245895385742
    7. ' )' → logprob: -16.410245895385742
    8. ' ' → logprob: -17.535245895385742
    9. ')`
' → logprob: -18.035245895385742
    10. '),' → logprob: -18.910245895385742

Token 111: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.016117068007588387
    2. '
' → logprob: -4.141117095947266
    3. '    
' → logprob: -10.016117095947266
    4. 'display' → logprob: -10.516117095947266
    5. '
' → logprob: -12.766117095947266
    6. '	display' → logprob: -13.141117095947266
    7. '```' → logprob: -13.516117095947266
    8. ' display' → logprob: -13.891117095947266
    9. '  
' → logprob: -14.016117095947266
    10. '"display' → logprob: -14.641117095947266

Token 112: ' display' (ID: 4589)
  Prédit: 'display'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'display' (adapté à ' display') → logprob: -0.006747581530362368
    2. '   ' → logprob: -5.256747722625732
    3. ' display' → logprob: -6.506747722625732
    4. '	display' → logprob: -11.006747245788574
    5. '"display' → logprob: -13.506747245788574
    6. ' ' → logprob: -14.256747245788574
    7. '  ' → logprob: -15.131747245788574
    8. '
' → logprob: -15.381747245788574
    9. '.display' → logprob: -15.631747245788574
    10. '(display' → logprob: -16.13174819946289

Token 113: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -4.008129963040119e-06
    2. '_res' → logprob: -12.500003814697266
    3. '_' → logprob: -16.375003814697266
    4. '_results' → logprob: -17.375003814697266
    5. ' _' → logprob: -17.625003814697266
    6. '_RESULT' → logprob: -20.000003814697266
    7. '_output' → logprob: -20.000003814697266
    8. '_Result' → logprob: -20.000003814697266
    9. '"_' → logprob: -20.875003814697266
    10. '_r' → logprob: -20.875003814697266

Token 114: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -9.639096970204264e-05
    2. '(' → logprob: -9.250096321105957
    3. ' (' → logprob: -15.375096321105957
    4. '(
' → logprob: -19.000097274780273
    5. '(resp' → logprob: -19.000097274780273
    6. '(re' → logprob: -19.375097274780273
    7. ' ' → logprob: -19.500097274780273
    8. '(rest' → logprob: -20.000097274780273
    9. '(ret' → logprob: -20.125097274780273
    10. '(result' → logprob: -20.250097274780273

Token 115: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.392202976712724e-06
    2. ')
' → logprob: -12.000006675720215
    3. '()' → logprob: -16.5000057220459
    4. '())' → logprob: -16.5000057220459
    5. ' )' → logprob: -17.0000057220459
    6. ')

' → logprob: -17.2500057220459
    7. ')`' → logprob: -20.0000057220459
    8. '))' → logprob: -20.2500057220459
    9. ')add' → logprob: -20.6250057220459
    10. '`)' → logprob: -20.6250057220459

Token 116: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.12782324850559235
    2. '
' → logprob: -2.1278233528137207
    3. '\n' → logprob: -7.252823352813721
    4. ' if' → logprob: -9.877822875976562
    5. '

' → logprob: -10.002822875976562
    6. '```' → logprob: -10.377822875976562
    7. '  
' → logprob: -10.627822875976562
    8. '    
' → logprob: -11.627822875976562
    9. '<|end|>' → logprob: -11.752822875976562
    10. '\' → logprob: -12.627822875976562

Token 117: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00209803762845695
    2. '(' → logprob: -6.252098083496094
    3. '()
' → logprob: -8.752098083496094
    4. '(
' → logprob: -12.752098083496094
    5. '()

' → logprob: -13.377098083496094
    6. '```' → logprob: -13.627098083496094
    7. '();' → logprob: -13.877098083496094
    8. ' ()' → logprob: -14.127098083496094
    9. '()`' → logprob: -14.127098083496094
    10. '()\' → logprob: -14.252098083496094


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 115
Tokens correctement prédits (1ère position, stricte): 54
Tokens correctement prédits (1ère position, avec adaptation): 61
Tokens correctement prédits (top 10): 97
Précision stricte (1ère position): 46.96%
Précision adaptée (1ère position): 53.04%
Précision (top 10): 84.35%
================================================================================
