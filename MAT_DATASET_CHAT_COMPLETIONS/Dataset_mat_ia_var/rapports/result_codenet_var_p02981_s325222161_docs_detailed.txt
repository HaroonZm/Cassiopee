================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:52:24
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def main():
    """
    Point d'entrée du programme. Lit une liste d'entiers depuis l'entrée standard,
    puis affiche le minimum entre le produit des deux premiers entiers et le troisième entier.
    """
    # Lire une ligne de l'entrée standard, la découper en éléments séparés par des espaces,
    # convertir chaque élément en entier et construire une liste 'a'
    a = read_integer_list_from_input()
    
    # Calculer le produit des deux premiers éléments de la liste
    product = a[0] * a[1]
    
    # Prendre le minimum entre ce produit et le troisième élément de la liste
    minimum_value = min(product, a[2])
    
    # Afficher le résultat
    print(minimum_value)

def read_integer_list_from_input():
    """
    Lit une ligne d'entrée utilisateur composée d'entiers séparés par des espaces et renvoie la liste correspondante.

    Returns:
        list[int]: Liste des entiers lus depuis l'entrée standard.
    """
    # Demander la saisie utilisateur, découper la chaîne par espaces, 
    # convertir chaque élément en entier, et construire la liste.
    return list(map(int, input().split()))

# Exécuter la fonction principale si ce fichier est exécuté comme script principal
if __name__ == "__main__":
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' main' (ID: 2758)
  → Token d'amorce (pas de prédiction)

Token 2: '():
' (ID: 8595)
  → Token d'amorce (pas de prédiction)

Token 3: '   ' (ID: 271)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\' → logprob: -0.2743290662765503
    2. '\n' → logprob: -1.7743290662765503
    3. '   ' → logprob: -3.52432918548584
    4. '(' → logprob: -4.39932918548584
    5. ' 
' → logprob: -5.14932918548584
    6. '    
' → logprob: -5.27432918548584
    7. ' ' → logprob: -5.52432918548584
    8. ''' → logprob: -5.64932918548584
    9. '    ' → logprob: -6.39932918548584
    10. '```' → logprob: -6.39932918548584

Token 4: ' """
' (ID: 7037)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.20469899475574493
    2. 'pass' → logprob: -2.3296990394592285
    3. '   ' → logprob: -2.8296990394592285
    4. 'return' → logprob: -4.0796990394592285
    5. 'p' → logprob: -5.3296990394592285
    6. '#' → logprob: -6.3296990394592285
    7. 'r' → logprob: -6.4546990394592285
    8. 'a' → logprob: -7.3296990394592285
    9. '```' → logprob: -7.3296990394592285
    10. 'n' → logprob: -8.07969856262207

Token 5: '   ' (ID: 271)
  Prédit: '"""'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"""' → logprob: -0.9128408432006836
    2. 'Calculate' → logprob: -2.1628408432006836
    3. 'Initialize' → logprob: -2.4128408432006836
    4. 'This' → logprob: -2.4128408432006836
    5. 'Run' → logprob: -3.7878408432006836
    6. 'T' → logprob: -3.7878408432006836
    7. '   ' → logprob: -4.037840843200684
    8. 'Initial' → logprob: -4.037840843200684
    9. 'Runs' → logprob: -4.037840843200684
    10. 'Main' → logprob: -4.162840843200684

Token 6: ' Point' (ID: 9971)
  Prédit: 'This'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'This' → logprob: -1.4658902883529663
    2. 'Run' → logprob: -1.7158902883529663
    3. 'Calculate' → logprob: -1.9658902883529663
    4. '"""' → logprob: -2.715890407562256
    5. 'Initialize' → logprob: -2.965890407562256
    6. 'Main' → logprob: -3.215890407562256
    7. 'Process' → logprob: -3.340890407562256
    8. '   ' → logprob: -3.715890407562256
    9. 'Start' → logprob: -4.090890407562256
    10. 'Runs' → logprob: -4.090890407562256

Token 7: ' d' (ID: 272)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.39630749821662903
    2. 's' → logprob: -1.3963074684143066
    3. '.' → logprob: -4.021307468414307
    4. ' to' → logprob: -4.521307468414307
    5. ' cloud' → logprob: -4.771307468414307
    6. '    ' → logprob: -5.271307468414307
    7. '()' → logprob: -5.521307468414307
    8. ':' → logprob: -5.646307468414307
    9. '(s' → logprob: -5.896307468414307
    10. '(' → logprob: -5.896307468414307

Token 8: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.015347501263022423
    2. 'entrée' → logprob: -4.515347480773926
    3. ''accès' → logprob: -6.140347480773926
    4. ''ent' → logprob: -6.890347480773926
    5. 'e' → logprob: -7.765347480773926
    6. '’entrée' → logprob: -9.140347480773926
    7. 'entr' → logprob: -9.515347480773926
    8. ''' → logprob: -9.515347480773926
    9. ''arrivée' → logprob: -9.515347480773926
    10. ''intérêt' → logprob: -9.640347480773926

Token 9: ' du' (ID: 1462)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.18866147100925446
    2. '   ' → logprob: -2.688661575317383
    3. ' du' → logprob: -2.688661575317383
    4. ' :' → logprob: -4.813661575317383
    5. '    ' → logprob: -5.063661575317383
    6. '```' → logprob: -5.313661575317383
    7. ' d' → logprob: -5.813661575317383
    8. ' ' → logprob: -6.313661575317383
    9. ' pour' → logprob: -6.438661575317383
    10. ':' → logprob: -6.688661575317383

Token 10: ' programme' (ID: 18190)
  Prédit: 'programme'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'programme' → logprob: -0.23435193300247192
    2. ' programme' → logprob: -1.7343518733978271
    3. 'program' → logprob: -3.484351873397827
    4. ' script' → logprob: -7.359352111816406
    5. 'script' → logprob: -7.484352111816406
    6. ' program' → logprob: -8.109352111816406
    7. 'prog' → logprob: -9.859352111816406
    8. 'programm' → logprob: -9.984352111816406
    9. 'pro' → logprob: -10.609352111816406
    10. 'code' → logprob: -10.984352111816406

Token 11: '.' (ID: 13)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16829976439476013
    2. '```' → logprob: -2.793299674987793
    3. '\n' → logprob: -3.418299674987793
    4. '"""' → logprob: -4.043299674987793
    5. ')' → logprob: -5.168299674987793
    6. '\' → logprob: -5.418299674987793
    7. '    
' → logprob: -5.418299674987793
    8. '`' → logprob: -5.668299674987793
    9. ' ' → logprob: -5.668299674987793
    10. '.' → logprob: -5.918299674987793

Token 12: ' Lit' (ID: 45595)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6997230648994446
    2. '\n' → logprob: -0.8247230648994446
    3. '\' → logprob: -3.4497230052948
    4. '```' → logprob: -4.574723243713379
    5. '    
' → logprob: -4.699723243713379
    6. '"""' → logprob: -5.949723243713379
    7. '`' → logprob: -6.324723243713379
    8. '    ' → logprob: -6.574723243713379
    9. ' ' → logprob: -6.824723243713379
    10. ')' → logprob: -6.949723243713379

Token 13: ' une' (ID: 2463)
  Prédit: ' les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.7043089270591736
    2. ' le' → logprob: -1.3293089866638184
    3. '   ' → logprob: -2.4543089866638184
    4. ' ' → logprob: -2.7043089866638184
    5. ' et' → logprob: -3.7043089866638184
    6. ' la' → logprob: -4.204308986663818
    7. 'le' → logprob: -4.204308986663818
    8. ' l' → logprob: -4.704308986663818
    9. 'l' → logprob: -4.954308986663818
    10. '    ' → logprob: -5.079308986663818

Token 14: ' liste' (ID: 31719)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7291081547737122
    2. ' chaîne' → logprob: -0.8541081547737122
    3. ' chaine' → logprob: -3.8541080951690674
    4. ' description' → logprob: -3.8541080951690674
    5. '   ' → logprob: -4.4791083335876465
    6. ' ligne' → logprob: -4.9791083335876465
    7. ' source' → logprob: -5.1041083335876465
    8. 'chaine' → logprob: -5.3541083335876465
    9. ' string' → logprob: -5.4791083335876465
    10. ' fichier' → logprob: -6.2291083335876465

Token 15: ' d' (ID: 272)
  Prédit: ' des'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.1844710260629654
    2. ' de' → logprob: -2.0594711303710938
    3. ' complète' → logprob: -4.559471130371094
    4. ' ' → logprob: -4.934471130371094
    5. ' d' → logprob: -4.934471130371094
    6. '   ' → logprob: -5.809471130371094
    7. ',' → logprob: -6.184471130371094
    8. 'de' → logprob: -6.184471130371094
    9. 'e' → logprob: -6.309471130371094
    10. '```' → logprob: -6.934471130371094

Token 16: ''ent' (ID: 53422)
  Prédit: ''ent'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''ent' → logprob: -0.3428458273410797
    2. 'e' → logprob: -1.3428457975387573
    3. ''ex' → logprob: -4.842845916748047
    4. ''ident' → logprob: -5.592845916748047
    5. ''' → logprob: -5.842845916748047
    6. ''entrée' → logprob: -6.342845916748047
    7. ''ad' → logprob: -6.592845916748047
    8. '’ent' → logprob: -6.592845916748047
    9. ''é' → logprob: -6.717845916748047
    10. 'élé' → logprob: -6.967845916748047

Token 17: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.0018897335976362228
    2. 'i' → logprob: -7.251889705657959
    3. 'ières' → logprob: -7.376889705657959
    4. 'ier' → logprob: -8.501890182495117
    5. 'r' → logprob: -9.126890182495117
    6. 'ités' → logprob: -9.501890182495117
    7. '```' → logprob: -9.626890182495117
    8. 'êtes' → logprob: -10.751890182495117
    9. 'ées' → logprob: -10.876890182495117
    10. 'ers' → logprob: -11.126890182495117

Token 18: ' depuis' (ID: 16277)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5324952602386475
    2. '   ' → logprob: -1.4074952602386475
    3. 's' → logprob: -2.5324952602386475
    4. ' et' → logprob: -3.7824952602386475
    5. ' ,' → logprob: -3.9074952602386475
    6. ' ' → logprob: -4.532495498657227
    7. ' en' → logprob: -4.782495498657227
    8. '.' → logprob: -5.032495498657227
    9. ' à' → logprob: -5.907495498657227
    10. ')' → logprob: -6.032495498657227

Token 19: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.8081837296485901
    2. ' l' → logprob: -1.3081836700439453
    3. ' stdin' → logprob: -2.0581836700439453
    4. ' input' → logprob: -2.5581836700439453
    5. 'le' → logprob: -3.4331836700439453
    6. '   ' → logprob: -4.558183670043945
    7. ' ' → logprob: -4.808183670043945
    8. ' un' → logprob: -5.308183670043945
    9. 'input' → logprob: -5.558183670043945
    10. ' standard' → logprob: -5.808183670043945

Token 20: ''entrée' (ID: 115820)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.05001771077513695
    2. ''entrée' → logprob: -3.4250175952911377
    3. 'e' → logprob: -4.425017833709717
    4. '_' → logprob: -6.300017833709717
    5. ''' → logprob: -6.925017833709717
    6. 'input' → logprob: -7.425017833709717
    7. 'entrée' → logprob: -8.175017356872559
    8. ''utilisateur' → logprob: -9.300017356872559
    9. '_input' → logprob: -9.550017356872559
    10. ''a' → logprob: -9.800017356872559

Token 21: ' standard' (ID: 7024)
  Prédit: ' standard'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' standard' → logprob: -1.1630170345306396
    2. ',' → logprob: -1.2880170345306396
    3. ' ,' → logprob: -2.4130170345306396
    4. '   ' → logprob: -2.4130170345306396
    5. ' ' → logprob: -2.7880170345306396
    6. 'standard' → logprob: -3.2880170345306396
    7. '.' → logprob: -4.163017272949219
    8. '\n' → logprob: -4.538017272949219
    9. ' et' → logprob: -4.538017272949219
    10. '```' → logprob: -4.663017272949219

Token 22: ',
' (ID: 412)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03901923447847366
    2. ',' → logprob: -3.9140193462371826
    3. '\n' → logprob: -4.7890191078186035
    4. '\' → logprob: -5.9140191078186035
    5. '.' → logprob: -6.2890191078186035
    6. '    
' → logprob: -6.2890191078186035
    7. '    ' → logprob: -6.9140191078186035
    8. '```' → logprob: -7.7890191078186035
    9. ' ' → logprob: -7.9140191078186035
    10. ',
' → logprob: -8.164019584655762

Token 23: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09060713648796082
    2. '    ' → logprob: -2.840607166290283
    3. ' et' → logprob: -4.090607166290283
    4. ' puis' → logprob: -4.715607166290283
    5. 'et' → logprob: -6.965607166290283
    6. '       ' → logprob: -8.590606689453125
    7. ' and' → logprob: -8.590606689453125
    8. 'p' → logprob: -8.840606689453125
    9. ',' → logprob: -8.965606689453125
    10. ' ' → logprob: -9.090606689453125

Token 24: ' puis' (ID: 18766)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03513440117239952
    2. '    ' → logprob: -3.6601343154907227
    3. ' et' → logprob: -6.785134315490723
    4. 'et' → logprob: -7.160134315490723
    5. '\n' → logprob: -7.285134315490723
    6. ' ' → logprob: -7.285134315490723
    7. ' ' → logprob: -7.535134315490723
    8. '\' → logprob: -7.535134315490723
    9. '    
' → logprob: -7.660134315490723
    10. 's' → logprob: -7.660134315490723

Token 25: ' affiche' (ID: 127479)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.675167202949524
    2. ' calc' → logprob: -1.675167202949524
    3. ' appelle' → logprob: -2.3001670837402344
    4. ' effect' → logprob: -2.3001670837402344
    5. ' les' → logprob: -2.4251670837402344
    6. ' affiche' → logprob: -2.5501670837402344
    7. ' trie' → logprob: -2.8001670837402344
    8. ' traite' → logprob: -3.1751670837402344
    9. ' retourne' → logprob: -3.3001670837402344
    10. 'aff' → logprob: -3.9251670837402344

Token 26: ' le' (ID: 505)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.2402847558259964
    2. ' leur' → logprob: -1.99028480052948
    3. ' le' → logprob: -3.3652846813201904
    4. ' les' → logprob: -3.9902846813201904
    5. ' l' → logprob: -4.8652849197387695
    6. ' ' → logprob: -5.7402849197387695
    7. 'leur' → logprob: -5.8652849197387695
    8. ' leurs' → logprob: -5.9902849197387695
    9. '   ' → logprob: -6.1152849197387695
    10. 'la' → logprob: -6.4902849197387695

Token 27: ' minimum' (ID: 11085)
  Prédit: ' nombre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -1.2143182754516602
    2. ' résultat' → logprob: -1.2143182754516602
    3. 'ur' → logprob: -1.8393182754516602
    4. ' maximum' → logprob: -2.21431827545166
    5. 's' → logprob: -2.96431827545166
    6. ' resultat' → logprob: -3.83931827545166
    7. ' max' → logprob: -4.21431827545166
    8. ' plus' → logprob: -4.71431827545166
    9. ' ' → logprob: -4.83931827545166
    10. '   ' → logprob: -5.58931827545166

Token 28: ' entre' (ID: 3853)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.251547247171402
    2. ',' → logprob: -2.876547336578369
    3. '.' → logprob: -3.001547336578369
    4. '\' → logprob: -3.251547336578369
    5. ' ' → logprob: -4.376547336578369
    6. '\n' → logprob: -4.501547336578369
    7. 's' → logprob: -5.126547336578369
    8. '    
' → logprob: -5.126547336578369
    9. ')' → logprob: -5.376547336578369
    10. '
' → logprob: -5.501547336578369

Token 29: ' le' (ID: 505)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.9146654605865479
    2. ' ces' → logprob: -1.6646654605865479
    3. 'la' → logprob: -2.164665460586548
    4. ' ' → logprob: -2.289665460586548
    5. ' les' → logprob: -3.039665460586548
    6. 'ces' → logprob: -3.539665460586548
    7. ' eux' → logprob: -3.664665460586548
    8. ' cette' → logprob: -4.289665222167969
    9. ' tous' → logprob: -4.414665222167969
    10. ' le' → logprob: -4.664665222167969

Token 30: ' produit' (ID: 29429)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.3741602897644043
    2. ' deux' → logprob: -1.4991602897644043
    3. 's' → logprob: -1.9991602897644043
    4. ' nombre' → logprob: -2.3741602897644043
    5. 'de' → logprob: -2.8741602897644043
    6. 'nombre' → logprob: -3.3741602897644043
    7. '   ' → logprob: -3.6241602897644043
    8. ' maximum' → logprob: -3.8741602897644043
    9. ' nombres' → logprob: -3.8741602897644043
    10. 'élé' → logprob: -4.249160289764404

Token 31: ' des' (ID: 731)
  Prédit: ' des'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.015450097620487213
    2. ' entre' → logprob: -5.2654500007629395
    3. 'des' → logprob: -6.0154500007629395
    4. '   ' → logprob: -6.1404500007629395
    5. ' et' → logprob: -6.2654500007629395
    6. ' de' → logprob: -6.3904500007629395
    7. ' ' → logprob: -7.5154500007629395
    8. '  ' → logprob: -8.015450477600098
    9. 'de' → logprob: -8.140450477600098
    10. 'entre' → logprob: -8.765450477600098

Token 32: ' deux' (ID: 10301)
  Prédit: ' deux'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' deux' → logprob: -1.1452012062072754
    2. ' éléments' → logprob: -1.1452012062072754
    3. ' ' → logprob: -1.5202012062072754
    4. 'élé' → logprob: -2.8952012062072754
    5. 'de' → logprob: -3.0202012062072754
    6. ' nombres' → logprob: -4.270201206207275
    7. '   ' → logprob: -4.770201206207275
    8. ' valeurs' → logprob: -5.270201206207275
    9. ' elements' → logprob: -6.270201206207275
    10. '  ' → logprob: -6.645201206207275

Token 33: ' premiers' (ID: 59140)
  Prédit: ' premiers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' premiers' → logprob: -0.41444694995880127
    2. ' nombres' → logprob: -2.1644468307495117
    3. 'prem' → logprob: -2.4144468307495117
    4. ' plus' → logprob: -2.7894468307495117
    5. ' éléments' → logprob: -3.6644468307495117
    6. ' premier' → logprob: -3.9144468307495117
    7. ' ' → logprob: -5.414446830749512
    8. ' ' → logprob: -5.539446830749512
    9. '```' → logprob: -5.789446830749512
    10. ' premières' → logprob: -6.039446830749512

Token 34: ' ent' (ID: 1121)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.11240413039922714
    2. ' espaces' → logprob: -3.6124041080474854
    3. ' éléments' → logprob: -3.7374041080474854
    4. ' nombres' → logprob: -4.1124043464660645
    5. ' et' → logprob: -4.3624043464660645
    6. ' mots' → logprob: -5.4874043464660645
    7. '  ' → logprob: -6.1124043464660645
    8. ' caractères' → logprob: -6.1124043464660645
    9. ' ent' → logprob: -6.2374043464660645
    10. '  
' → logprob: -6.3624043464660645

Token 35: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.012601356022059917
    2. 'i' → logprob: -4.387601375579834
    3. '```' → logprob: -10.387600898742676
    4. 'ières' → logprob: -10.637600898742676
    5. 'ié' → logprob: -11.387600898742676
    6. ' i' → logprob: -12.512600898742676
    7. 'ière' → logprob: -13.137600898742676
    8. '   ' → logprob: -13.262600898742676
    9. 'î' → logprob: -13.387600898742676
    10. '*i' → logprob: -13.512600898742676

Token 36: ' et' (ID: 859)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.5026382803916931
    2. ' ' → logprob: -1.502638339996338
    3. ',' → logprob: -3.127638339996338
    4. '_' → logprob: -3.502638339996338
    5. ' ,' → logprob: -4.252638339996338
    6. '\' → logprob: -4.877638339996338
    7. ' et' → logprob: -4.877638339996338
    8. ')' → logprob: -4.877638339996338
    9. ' )' → logprob: -4.877638339996338
    10. '   ' → logprob: -5.002638339996338

Token 37: ' le' (ID: 505)
  Prédit: ' le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.3524499237537384
    2. ' la' → logprob: -1.852449893951416
    3. 'le' → logprob: -2.727449893951416
    4. ' ' → logprob: -2.977449893951416
    5. ' l' → logprob: -4.602449893951416
    6. 'l' → logprob: -5.602449893951416
    7. ' celui' → logprob: -5.727449893951416
    8. ' les' → logprob: -6.477449893951416
    9. 'la' → logprob: -6.727449893951416
    10. ' ' → logprob: -7.602449893951416

Token 38: ' troisième' (ID: 75373)
  Prédit: ' produit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' produit' → logprob: -0.01490824855864048
    2. 'produ' → logprob: -5.264908313751221
    3. ' premier' → logprob: -6.264908313751221
    4. ' maximum' → logprob: -6.264908313751221
    5. ' minimum' → logprob: -6.264908313751221
    6. ' ' → logprob: -7.389908313751221
    7. '   ' → logprob: -7.764908313751221
    8. 's' → logprob: -8.014907836914062
    9. '```' → logprob: -8.139907836914062
    10. ' plus' → logprob: -8.764907836914062

Token 39: ' entier' (ID: 80473)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.9501832723617554
    2. ' ,' → logprob: -1.8251832723617554
    3. ' 
' → logprob: -2.825183391571045
    4. ' )' → logprob: -2.950183391571045
    5. '_' → logprob: -3.075183391571045
    6. '   
' → logprob: -3.075183391571045
    7. '\' → logprob: -3.200183391571045
    8. ',' → logprob: -3.450183391571045
    9. '  
' → logprob: -3.700183391571045
    10. ' \' → logprob: -4.075183391571045

Token 40: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6477311253547668
    2. '\n' → logprob: -1.147731065750122
    3. '\' → logprob: -2.397731065750122
    4. '
' → logprob: -2.897731065750122
    5. '```' → logprob: -5.397731304168701
    6. '    
' → logprob: -5.647731304168701
    7. '"\' → logprob: -6.772731304168701
    8. '  
' → logprob: -7.522731304168701
    9. '  ' → logprob: -7.647731304168701
    10. ''\' → logprob: -7.772731304168701

Token 41: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03434787690639496
    2. '"""' → logprob: -3.5343477725982666
    3. '```' → logprob: -5.784348011016846
    4. '"""
' → logprob: -7.159348011016846
    5. '"' → logprob: -7.909348011016846
    6. '""' → logprob: -8.659347534179688
    7. ' """' → logprob: -9.784347534179688
    8. '  ' → logprob: -10.534347534179688
    9. ' """
' → logprob: -10.534347534179688
    10. '`' → logprob: -10.784347534179688

Token 42: ' """
' (ID: 7037)
  Prédit: '"""'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"""' → logprob: -0.4524833858013153
    2. '   ' → logprob: -1.2024834156036377
    3. '```' → logprob: -3.7024834156036377
    4. '\n' → logprob: -4.452483177185059
    5. '"""
' (adapté à ' """
') → logprob: -4.702483177185059
    6. '"' → logprob: -4.702483177185059
    7. '""' → logprob: -5.327483177185059
    8. '\' → logprob: -6.452483177185059
    9. '
' → logprob: -7.452483177185059
    10. '`' → logprob: -7.577483177185059

Token 43: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0010657975217327476
    2. '
' → logprob: -8.126066207885742
    3. '    
' → logprob: -8.626066207885742
    4. 'n' → logprob: -8.751066207885742
    5. '```' → logprob: -9.001066207885742
    6. '\n' → logprob: -9.626066207885742
    7. 'def' → logprob: -9.876066207885742
    8. 'input' → logprob: -10.126066207885742
    9. 'result' → logprob: -10.251066207885742
    10. '    ' → logprob: -10.501066207885742

Token 44: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9176263213157654
    2. 'n' → logprob: -1.1676263809204102
    3. 'numbers' → logprob: -2.41762638092041
    4. 'input' → logprob: -2.91762638092041
    5. 'try' → logprob: -3.79262638092041
    6. 'data' → logprob: -3.91762638092041
    7. 'import' → logprob: -4.29262638092041
    8. ' numbers' → logprob: -4.29262638092041
    9. ' n' → logprob: -4.66762638092041
    10. 'nums' → logprob: -5.04262638092041

Token 45: ' Lire' (ID: 57624)
  Prédit: ' numbers'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' numbers' → logprob: -1.4518181085586548
    2. 'numbers' → logprob: -1.4518181085586548
    3. 'n' → logprob: -1.5768181085586548
    4. 'data' → logprob: -2.2018179893493652
    5. 'input' → logprob: -2.4518179893493652
    6. ' data' → logprob: -3.4518179893493652
    7. 'nums' → logprob: -3.9518179893493652
    8. ' input' → logprob: -4.076817989349365
    9. '   ' → logprob: -4.326817989349365
    10. ' n' → logprob: -4.451817989349365

Token 46: ' une' (ID: 2463)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.1015898585319519
    2. ' les' → logprob: -3.3515899181365967
    3. ' ' → logprob: -3.6015899181365967
    4. ' l' → logprob: -4.351589679718018
    5. ' une' → logprob: -4.601589679718018
    6. ' ' → logprob: -5.726589679718018
    7. 'l' → logprob: -6.726589679718018
    8. 's' → logprob: -6.976589679718018
    9. '_' → logprob: -7.101589679718018
    10. '   ' → logprob: -7.226589679718018

Token 47: ' ligne' (ID: 19583)
  Prédit: ' liste'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.7848289012908936
    2. ' ' → logprob: -0.9098289012908936
    3. 'liste' → logprob: -2.5348289012908936
    4. ' ligne' → logprob: -3.2848289012908936
    5. 'ligne' → logprob: -4.409829139709473
    6. 'l' → logprob: -5.284829139709473
    7. 'entrée' → logprob: -6.909829139709473
    8. 's' → logprob: -7.034829139709473
    9. ' list' → logprob: -7.034829139709473
    10. 'list' → logprob: -7.409829139709473

Token 48: ' de' (ID: 334)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1797703057527542
    2. ' de' → logprob: -2.9297702312469482
    3. '   ' → logprob: -3.0547702312469482
    4. 's' → logprob: -4.179770469665527
    5. ' d' → logprob: -5.179770469665527
    6. ' ' → logprob: -5.179770469665527
    7. '=input' → logprob: -5.179770469665527
    8. '    ' → logprob: -5.304770469665527
    9. 'input' → logprob: -5.554770469665527
    10. ' input' → logprob: -5.554770469665527

Token 49: ' l' (ID: 305)
  Prédit: ' code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' code' → logprob: -0.27961599826812744
    2. 'code' → logprob: -1.7796159982681274
    3. ' input' → logprob: -3.154615879058838
    4. 'entrée' → logprob: -4.029615879058838
    5. 'input' → logprob: -5.279615879058838
    6. 'texte' → logprob: -6.279615879058838
    7. 's' → logprob: -6.279615879058838
    8. ' texte' → logprob: -6.529615879058838
    9. 'stdin' → logprob: -7.029615879058838
    10. 'l' → logprob: -7.279615879058838

Token 50: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.031709250062704086
    2. 'entrée' → logprob: -3.6567091941833496
    3. ''' → logprob: -6.03170919418335
    4. 'a' → logprob: -6.78170919418335
    5. 'input' → logprob: -7.28170919418335
    6. 'e' → logprob: -7.65670919418335
    7. ''ent' → logprob: -8.656709671020508
    8. ''utilisateur' → logprob: -8.781709671020508
    9. ' entrée' → logprob: -9.156709671020508
    10. '’entrée' → logprob: -9.906709671020508

Token 51: ' standard' (ID: 7024)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.8813100457191467
    2. ' standard' → logprob: -1.006309986114502
    3. '   ' → logprob: -2.506309986114502
    4. 'input' → logprob: -2.631309986114502
    5. ' =' → logprob: -4.381309986114502
    6. ' ' → logprob: -4.381309986114502
    7. 'standard' → logprob: -4.756309986114502
    8. ' stdin' → logprob: -5.381309986114502
    9. '=input' → logprob: -5.756309986114502
    10. 's' → logprob: -5.881309986114502

Token 52: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07157399505376816
    2. ' line' → logprob: -3.3215739727020264
    3. 'input' → logprob: -4.1965742111206055
    4. 'line' → logprob: -5.0715742111206055
    5. ' input' → logprob: -5.1965742111206055
    6. 's' → logprob: -6.5715742111206055
    7. '    
' → logprob: -6.9465742111206055
    8. ' ligne' → logprob: -6.9465742111206055
    9. 'ligne' → logprob: -7.1965742111206055
    10. 'n' → logprob: -7.3215742111206055

Token 53: ' la' (ID: 557)
  Prédit: ' line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' line' → logprob: -0.7633427381515503
    2. '   ' → logprob: -1.2633427381515503
    3. ' ligne' → logprob: -2.13834285736084
    4. ' input' → logprob: -3.38834285736084
    5. ' data' → logprob: -3.88834285736084
    6. ' lignes' → logprob: -4.38834285736084
    7. ' tokens' → logprob: -5.01334285736084
    8. ' import' → logprob: -5.26334285736084
    9. ' ent' → logprob: -5.26334285736084
    10. ' puis' → logprob: -5.38834285736084

Token 54: ' décou' (ID: 68302)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.18545933067798615
    2. 'split' → logprob: -2.3104593753814697
    3. ' =' → logprob: -2.9354593753814697
    4. 's' → logprob: -5.185459136962891
    5. 'rstrip' → logprob: -6.185459136962891
    6. 'input' → logprob: -6.435459136962891
    7. 'str' → logprob: -7.185459136962891
    8. '=' → logprob: -7.310459136962891
    9. 'liste' → logprob: -7.310459136962891
    10. '.strip' → logprob: -7.435459136962891

Token 55: 'per' (ID: 543)
  Prédit: 'per'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'per' → logprob: -0.06386706233024597
    2. 'pe' → logprob: -2.8138670921325684
    3. 'page' → logprob: -6.688867092132568
    4. 'p' → logprob: -8.18886661529541
    5. ' per' → logprob: -9.81386661529541
    6. 'pez' → logprob: -10.31386661529541
    7. 'de' → logprob: -10.68886661529541
    8. 'pé' → logprob: -10.93886661529541
    9. '```' → logprob: -11.31386661529541
    10. ']' → logprob: -11.31386661529541

Token 56: ' en' (ID: 469)
  Prédit: ' en'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.00483380351215601
    2. 'en' → logprob: -5.379833698272705
    3. ' ' → logprob: -9.629834175109863
    4. ' et' → logprob: -9.879834175109863
    5. ' par' → logprob: -10.379834175109863
    6. ' avec' → logprob: -10.754834175109863
    7. ',' → logprob: -11.879834175109863
    8. '   ' → logprob: -11.879834175109863
    9. ' ,' → logprob: -12.754834175109863
    10. ' puis' → logprob: -13.004834175109863

Token 57: ' éléments' (ID: 57375)
  Prédit: ' tokens'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' tokens' → logprob: -0.9495773315429688
    2. 'tokens' → logprob: -1.0745773315429688
    3. 'ent' → logprob: -2.4495773315429688
    4. ' ent' → logprob: -2.6995773315429688
    5. ' des' → logprob: -3.6995773315429688
    6. 'm' → logprob: -3.8245773315429688
    7. ' mots' → logprob: -3.9495773315429688
    8. ' nombres' → logprob: -4.449577331542969
    9. ' une' → logprob: -5.074577331542969
    10. '```' → logprob: -5.199577331542969

Token 58: ' sépar' (ID: 97160)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0105459690093994
    2. 'tokens' → logprob: -1.5105459690093994
    3. 's' → logprob: -2.1355459690093994
    4. 'input' → logprob: -3.2605459690093994
    5. ' tokens' → logprob: -3.3855459690093994
    6. ' input' → logprob: -3.3855459690093994
    7. ',' → logprob: -3.5105459690093994
    8. ' line' → logprob: -3.5105459690093994
    9. ' en' → logprob: -4.13554573059082
    10. ' integers' → logprob: -4.51054573059082

Token 59: 'és' (ID: 1756)
  Prédit: 'és'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'és' → logprob: -8.93579563125968e-05
    2. 'é' → logprob: -9.875089645385742
    3. 'es' → logprob: -10.625089645385742
    4. '```' → logprob: -12.500089645385742
    5. 'par' → logprob: -12.625089645385742
    6. 'ès' → logprob: -13.625089645385742
    7. 'ées' → logprob: -13.750089645385742
    8. 'ÉS' → logprob: -14.000089645385742
    9. 's' → logprob: -14.250089645385742
    10. ' par' → logprob: -14.375089645385742

Token 60: ' par' (ID: 686)
  Prédit: 'par'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'par' → logprob: -0.5753047466278076
    2. ' par' → logprob: -0.9503047466278076
    3. '   ' → logprob: -3.7003047466278076
    4. ',' → logprob: -4.825304985046387
    5. 's' → logprob: -4.825304985046387
    6. '```' → logprob: -6.325304985046387
    7. 'et' → logprob: -7.200304985046387
    8. 'str' → logprob: -7.325304985046387
    9. ' ' → logprob: -7.450304985046387
    10. '.' → logprob: -7.575304985046387

Token 61: ' des' (ID: 731)
  Prédit: ' des'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.5906317234039307
    2. 'des' → logprob: -1.2156317234039307
    3. 'un' → logprob: -2.9656317234039307
    4. ' un' → logprob: -3.2156317234039307
    5. ' ' → logprob: -4.340631484985352
    6. ''' → logprob: -4.465631484985352
    7. ' espaces' → logprob: -4.965631484985352
    8. ''un' → logprob: -5.090631484985352
    9. ''espace' → logprob: -5.340631484985352
    10. 'es' → logprob: -5.340631484985352

Token 62: ' espaces' (ID: 98361)
  Prédit: 'esp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'esp' → logprob: -0.6990554332733154
    2. ''esp' → logprob: -1.3240554332733154
    3. ' espaces' → logprob: -2.0740554332733154
    4. ''espace' → logprob: -2.8240554332733154
    5. 'es' → logprob: -3.1990554332733154
    6. 'spaces' → logprob: -5.9490556716918945
    7. ' espace' → logprob: -6.4490556716918945
    8. ''' → logprob: -6.4490556716918945
    9. ' ' → logprob: -6.8240556716918945
    10. 'des' → logprob: -7.3240556716918945

Token 63: ',
' (ID: 412)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07034885138273239
    2. 'l' → logprob: -3.9453487396240234
    3. 's' → logprob: -4.070348739624023
    4. 'n' → logprob: -4.445348739624023
    5. 'line' → logprob: -5.195348739624023
    6. 'input' → logprob: -5.695348739624023
    7. 'ligne' → logprob: -5.820348739624023
    8. '    
' → logprob: -6.320348739624023
    9. ' line' → logprob: -6.445348739624023
    10. 'data' → logprob: -7.695348739624023

Token 64: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11114663630723953
    2. ' puis' → logprob: -2.4861466884613037
    3. ' la' → logprob: -5.861146450042725
    4. 'tokens' → logprob: -5.861146450042725
    5. 't' → logprob: -5.986146450042725
    6. 'et' → logprob: -6.361146450042725
    7. ' tokens' → logprob: -6.361146450042725
    8. 's' → logprob: -6.611146450042725
    9. '    ' → logprob: -6.736146450042725
    10. 'p' → logprob: -6.861146450042725

Token 65: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6150854825973511
    2. ' puis' → logprob: -0.8650854825973511
    3. 'et' → logprob: -5.240085601806641
    4. ' la' → logprob: -5.615085601806641
    5. ' et' → logprob: -5.990085601806641
    6. 'l' → logprob: -5.990085601806641
    7. 't' → logprob: -5.990085601806641
    8. ' integers' → logprob: -6.115085601806641
    9. ' tokens' → logprob: -6.365085601806641
    10. 'p' → logprob: -6.365085601806641

Token 66: ' convertir' (ID: 79223)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5992165803909302
    2. ' integers' → logprob: -1.5992165803909302
    3. ' numbers' → logprob: -2.8492164611816406
    4. ' tokens' → logprob: -3.5992164611816406
    5. 'numbers' → logprob: -3.8492164611816406
    6. ' puis' → logprob: -4.349216461181641
    7. ' convertir' → logprob: -4.599216461181641
    8. ' elements' → logprob: -4.599216461181641
    9. 'ints' → logprob: -4.724216461181641
    10. ' ent' → logprob: -4.724216461181641

Token 67: ' chaque' (ID: 21194)
  Prédit: ' chaque'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaque' → logprob: -0.1261713057756424
    2. ' les' → logprob: -2.626171350479126
    3. ' la' → logprob: -4.376171112060547
    4. ' chacun' → logprob: -4.376171112060547
    5. ' each' → logprob: -4.626171112060547
    6. ' en' → logprob: -5.751171112060547
    7. 'les' → logprob: -6.501171112060547
    8. ' ' → logprob: -6.876171112060547
    9. ' chacune' → logprob: -7.126171112060547
    10. 'each' → logprob: -7.126171112060547

Token 68: ' élément' (ID: 99627)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.07697240263223648
    2. 'int' → logprob: -3.326972484588623
    3. ' élément' → logprob: -3.451972484588623
    4. '_' → logprob: -6.326972484588623
    5. ' token' → logprob: -6.951972484588623
    6. ' element' → logprob: -7.326972484588623
    7. ' int' → logprob: -7.326972484588623
    8. 'element' → logprob: -7.451972484588623
    9. ' ' → logprob: -7.826972484588623
    10. 'token' → logprob: -8.076972007751465

Token 69: ' en' (ID: 469)
  Prédit: ' en'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.03196847811341286
    2. 'en' → logprob: -4.031968593597412
    3. '_en' → logprob: -4.656968593597412
    4. '_' → logprob: -5.906968593597412
    5. 's' → logprob: -7.906968593597412
    6. ' _' → logprob: -8.281968116760254
    7. '```' → logprob: -8.656968116760254
    8. ' ' → logprob: -9.406968116760254
    9. ' in' → logprob: -9.406968116760254
    10. ')' → logprob: -9.406968116760254

Token 70: ' entier' (ID: 80473)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.5340968370437622
    2. 'int' → logprob: -1.1590968370437622
    3. 'ent' → logprob: -3.0340967178344727
    4. ' ent' → logprob: -3.1590967178344727
    5. ' entier' → logprob: -5.159096717834473
    6. ' des' → logprob: -5.909096717834473
    7. ' un' → logprob: -7.534096717834473
    8. ' integers' → logprob: -8.534096717834473
    9. ' integer' → logprob: -9.659096717834473
    10. ' ' → logprob: -9.659096717834473

Token 71: ' et' (ID: 859)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.357807457447052
    2. 's' → logprob: -1.6078073978424072
    3. ',' → logprob: -3.1078073978424072
    4. '    
' → logprob: -4.607807636260986
    5. ' integers' → logprob: -4.732807636260986
    6. 'n' → logprob: -4.857807636260986
    7. ' line' → logprob: -5.482807636260986
    8. 'l' → logprob: -5.607807636260986
    9. 'input' → logprob: -6.232807636260986
    10. 'tokens' → logprob: -6.482807636260986

Token 72: ' construire' (ID: 92473)
  Prédit: ' stock'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' stock' → logprob: -0.16253052651882172
    2. ' les' → logprob: -2.0375304222106934
    3. 'assign' → logprob: -5.412530422210693
    4. ' créer' → logprob: -5.412530422210693
    5. 'stock' → logprob: -5.662530422210693
    6. ' retourner' → logprob: -6.537530422210693
    7. ' affect' → logprob: -6.662530422210693
    8. ' assign' → logprob: -6.662530422210693
    9. 's' → logprob: -6.912530422210693
    10. ' mettre' → logprob: -8.162530899047852

Token 73: ' une' (ID: 2463)
  Prédit: ' une'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.4220554530620575
    2. ' la' → logprob: -1.1720554828643799
    3. 'une' → logprob: -3.54705548286438
    4. ' un' → logprob: -5.797055244445801
    5. ' ' → logprob: -7.047055244445801
    6. ' a' → logprob: -7.297055244445801
    7. ' ' → logprob: -8.2970552444458
    8. 'la' → logprob: -8.5470552444458
    9. '   ' → logprob: -8.6720552444458
    10. 'a' → logprob: -9.0470552444458

Token 74: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.010708206333220005
    2. 'liste' → logprob: -4.885708332061768
    3. ' list' → logprob: -5.885708332061768
    4. 'list' → logprob: -8.13570785522461
    5. 's' → logprob: -12.38570785522461
    6. ' listes' → logprob: -12.38570785522461
    7. 'Liste' → logprob: -12.51070785522461
    8. ' lista' → logprob: -12.88570785522461
    9. ' Liste' → logprob: -13.38570785522461
    10. 'l' → logprob: -13.76070785522461

Token 75: ' '' (ID: 461)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1397809237241745
    2. ' integers' → logprob: -3.5147809982299805
    3. 'n' → logprob: -3.7647809982299805
    4. 'numbers' → logprob: -4.3897809982299805
    5. 'input' → logprob: -4.6397809982299805
    6. 'l' → logprob: -4.6397809982299805
    7. 'data' → logprob: -5.0147809982299805
    8. '[' → logprob: -5.0147809982299805
    9. ' numbers' → logprob: -5.6397809982299805
    10. 's' → logprob: -5.7647809982299805

Token 76: 'a' (ID: 64)
  Prédit: 'ent'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ent' → logprob: -0.34121063351631165
    2. ' ent' → logprob: -1.9662106037139893
    3. 'n' → logprob: -2.4662106037139893
    4. 'numbers' → logprob: -4.466210842132568
    5. 'lst' → logprob: -4.466210842132568
    6. ' nombres' → logprob: -4.716210842132568
    7. 'ints' → logprob: -4.966210842132568
    8. 'nums' → logprob: -5.341210842132568
    9. ' lst' → logprob: -5.841210842132568
    10. '   ' → logprob: -6.341210842132568

Token 77: ''
' (ID: 2207)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.7231128215789795
    2. ''' → logprob: -0.8481128215789795
    3. ' ='' → logprob: -3.7231128215789795
    4. ')'' → logprob: -4.098113059997559
    5. 'a' → logprob: -4.723113059997559
    6. '='' → logprob: -5.348113059997559
    7. '['' → logprob: -5.348113059997559
    8. '[]' → logprob: -5.473113059997559
    9. ']'' → logprob: -5.473113059997559
    10. '=' → logprob: -5.723113059997559

Token 78: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1432189792394638
    2. 'a' → logprob: -2.018218994140625
    3. ' a' → logprob: -8.518218994140625
    4. '
' → logprob: -8.643218994140625
    5. '    
' → logprob: -9.018218994140625
    6. '	a' → logprob: -11.518218994140625
    7. '[' → logprob: -11.893218994140625
    8. '```' → logprob: -11.893218994140625
    9. '[a' → logprob: -11.893218994140625
    10. '       ' → logprob: -12.518218994140625

Token 79: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' (adapté à ' a') → logprob: -0.12422575801610947
    2. '   ' → logprob: -2.2492258548736572
    3. ' a' → logprob: -4.499225616455078
    4. '    
' → logprob: -8.749225616455078
    5. '	a' → logprob: -10.999225616455078
    6. '
' → logprob: -11.624225616455078
    7. '[a' → logprob: -11.749225616455078
    8. '[' → logprob: -11.874225616455078
    9. ' 
' → logprob: -12.624225616455078
    10. 'n' → logprob: -12.749225616455078

Token 80: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.10021745413541794
    2. '=' → logprob: -2.350217342376709
    3. '=[]' → logprob: -13.100217819213867
    4. ' =[' → logprob: -13.100217819213867
    5. '[' → logprob: -13.350217819213867
    6. 's' → logprob: -13.350217819213867
    7. ',' → logprob: -14.100217819213867
    8. '.' → logprob: -14.475217819213867
    9. ' =
' → logprob: -14.600217819213867
    10. ' ' → logprob: -14.725217819213867

Token 81: ' read' (ID: 1729)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.5760368704795837
    2. 'list' → logprob: -0.8260368704795837
    3. '[list' → logprob: -9.82603645324707
    4. '[' → logprob: -10.32603645324707
    5. ' [' → logprob: -11.57603645324707
    6. '	list' → logprob: -15.07603645324707
    7. '=list' → logprob: -15.57603645324707
    8. '(list' → logprob: -15.95103645324707
    9. ' ' → logprob: -15.95103645324707
    10. ' liste' → logprob: -16.07603645324707

Token 82: '_integer' (ID: 82911)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.3194327652454376
    2. '().' → logprob: -1.4444327354431152
    3. '()' → logprob: -4.194432735443115
    4. 'l' → logprob: -4.194432735443115
    5. '_line' → logprob: -5.819432735443115
    6. 'lin' → logprob: -6.694432735443115
    7. 'li' → logprob: -7.319432735443115
    8. 't' → logprob: -7.444432735443115
    9. 'lines' → logprob: -7.569432735443115
    10. 'ln' → logprob: -7.694432735443115

Token 83: '_list' (ID: 4162)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.01027161255478859
    2. '_list' → logprob: -5.5102715492248535
    3. '()' → logprob: -5.8852715492248535
    4. 'list' → logprob: -6.0102715492248535
    5. '_line' → logprob: -7.5102715492248535
    6. 'line' → logprob: -8.385272026062012
    7. '_s' → logprob: -9.885272026062012
    8. 'ls' → logprob: -10.885272026062012
    9. 'List' → logprob: -11.260272026062012
    10. '_ls' → logprob: -11.385272026062012

Token 84: '_from' (ID: 12526)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.003979735542088747
    2. '(' → logprob: -5.753979682922363
    3. ' ()' → logprob: -8.003979682922363
    4. 'from' → logprob: -8.378979682922363
    5. '('' → logprob: -9.753979682922363
    6. '(input' → logprob: -10.253979682922363
    7. '("("' → logprob: -10.503979682922363
    8. '("' → logprob: -10.628979682922363
    9. '(stdin' → logprob: -10.628979682922363
    10. 's' → logprob: -11.128979682922363

Token 85: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.6103477478027344
    2. 'input' → logprob: -1.3603477478027344
    3. '_' → logprob: -2.4853477478027344
    4. 's' → logprob: -3.1103477478027344
    5. '_st' → logprob: -3.1103477478027344
    6. ' input' → logprob: -4.860347747802734
    7. 'stdin' → logprob: -5.110347747802734
    8. '()' → logprob: -5.485347747802734
    9. 'line' → logprob: -6.110347747802734
    10. ' ' → logprob: -6.360347747802734

Token 86: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0013345248298719525
    2. '(' → logprob: -6.8763346672058105
    3. ' ()' → logprob: -8.751334190368652
    4. '_' → logprob: -10.376334190368652
    5. '("' → logprob: -11.001334190368652
    6. '('' → logprob: -11.126334190368652
    7. '_line' → logprob: -11.376334190368652
    8. '()"' → logprob: -11.751334190368652
    9. 's' → logprob: -11.876334190368652
    10. '()`' → logprob: -12.126334190368652

Token 87: '    
' (ID: 1944)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6264037489891052
    2. '   ' → logprob: -1.12640380859375
    3. '    
' → logprob: -3.25140380859375
    4. '[' → logprob: -3.50140380859375
    5. ' ' → logprob: -4.12640380859375
    6. ' if' → logprob: -4.25140380859375
    7. '\' → logprob: -4.62640380859375
    8. '\n' → logprob: -4.62640380859375
    9. 'if' → logprob: -5.25140380859375
    10. '  
' → logprob: -5.62640380859375

Token 88: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.43394288420677185
    2. 'if' → logprob: -1.9339429140090942
    3. ' if' → logprob: -1.9339429140090942
    4. 'min' → logprob: -3.6839427947998047
    5. 'result' → logprob: -4.183942794799805
    6. '    
' → logprob: -5.058942794799805
    7. ' min' → logprob: -5.058942794799805
    8. ' result' → logprob: -5.933942794799805
    9. 'minimum' → logprob: -6.183942794799805
    10. '
' → logprob: -6.683942794799805

Token 89: ' #' (ID: 1069)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.8319834470748901
    2. 'if' → logprob: -1.3319834470748901
    3. 'min' → logprob: -1.3319834470748901
    4. 'minimum' → logprob: -3.9569835662841797
    5. 'm' → logprob: -5.08198356628418
    6. '#' (adapté à ' #') → logprob: -5.33198356628418
    7. 'product' → logprob: -5.95698356628418
    8. 'res' → logprob: -6.33198356628418
    9. ' if' → logprob: -7.08198356628418
    10. 'prod' → logprob: -8.70698356628418

Token 90: ' Calcul' (ID: 57243)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.8425518870353699
    2. ' if' → logprob: -0.8425518870353699
    3. 'result' → logprob: -2.8425519466400146
    4. 'min' → logprob: -3.2175519466400146
    5. 'product' → logprob: -3.8425519466400146
    6. ' result' → logprob: -5.0925517082214355
    7. ' product' → logprob: -5.2175517082214355
    8. ' min' → logprob: -5.9675517082214355
    9. 'minimum' → logprob: -6.0925517082214355
    10. '#' → logprob: -6.9675517082214355

Token 91: 'er' (ID: 259)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.9552822709083557
    2. 'er' → logprob: -1.205282211303711
    3. ' =' → logprob: -1.830282211303711
    4. '   ' → logprob: -3.205282211303711
    5. '_product' → logprob: -3.830282211303711
    6. 's' → logprob: -4.080282211303711
    7. '_result' → logprob: -4.705282211303711
    8. ' product' → logprob: -4.705282211303711
    9. 'a' → logprob: -4.830282211303711
    10. '=' → logprob: -4.830282211303711

Token 92: ' le' (ID: 505)
  Prédit: ' le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.2494247555732727
    2. 'le' → logprob: -1.624424695968628
    3. '_le' → logprob: -4.624424934387207
    4. ' product' → logprob: -5.624424934387207
    5. ' la' → logprob: -5.999424934387207
    6. 'product' → logprob: -6.499424934387207
    7. ' ' → logprob: -6.874424934387207
    8. '_product' → logprob: -6.874424934387207
    9. ' l' → logprob: -6.999424934387207
    10. '_' → logprob: -7.624424934387207

Token 93: ' produit' (ID: 29429)
  Prédit: ' minimum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' minimum' → logprob: -0.610107958316803
    2. ' produit' → logprob: -0.985107958316803
    3. ' min' → logprob: -2.985107898712158
    4. 'minimum' → logprob: -4.360107898712158
    5. 'min' → logprob: -4.485107898712158
    6. ' product' → logprob: -5.735107898712158
    7. 'produ' → logprob: -5.860107898712158
    8. ' prod' → logprob: -7.110107898712158
    9. 'product' → logprob: -7.985107898712158
    10. 'prod' → logprob: -8.735108375549316

Token 94: ' des' (ID: 731)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -1.3138923645019531
    2. ' des' → logprob: -1.3138923645019531
    3. '_des' → logprob: -1.4388923645019531
    4. 'des' → logprob: -2.688892364501953
    5. '   ' → logprob: -2.813892364501953
    6. ' =' → logprob: -3.438892364501953
    7. 'a' → logprob: -4.188892364501953
    8. 'de' → logprob: -4.563892364501953
    9. '    
' → logprob: -5.188892364501953
    10. ' a' → logprob: -5.188892364501953

Token 95: ' deux' (ID: 10301)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.3883313536643982
    2. ' a' → logprob: -1.138331413269043
    3. 'de' → logprob: -6.888331413269043
    4. ' deux' → logprob: -8.138331413269043
    5. ' ' → logprob: -9.388331413269043
    6. ' two' → logprob: -10.513331413269043
    7. '2' → logprob: -11.888331413269043
    8. ' ' → logprob: -12.575831413269043
    9. '  ' → logprob: -12.700831413269043
    10. '	a' → logprob: -12.825831413269043

Token 96: ' premiers' (ID: 59140)
  Prédit: ' premiers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' premiers' → logprob: -0.48004603385925293
    2. 'prem' → logprob: -1.480046033859253
    3. '[' → logprob: -2.105046033859253
    4. ' ' → logprob: -4.855046272277832
    5. '_' → logprob: -5.230046272277832
    6. ' premier' → logprob: -5.230046272277832
    7. ' a' → logprob: -6.105046272277832
    8. 'a' → logprob: -6.230046272277832
    9. '[a' → logprob: -6.230046272277832
    10. ' ' → logprob: -6.480046272277832

Token 97: ' éléments' (ID: 57375)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.7898421287536621
    2. ' a' → logprob: -1.164842128753662
    3. '_' → logprob: -1.664842128753662
    4. '[' → logprob: -4.289842128753662
    5. ' ' → logprob: -4.414842128753662
    6. '_a' → logprob: -5.789842128753662
    7. 's' → logprob: -5.789842128753662
    8. ' éléments' → logprob: -5.914842128753662
    9. '[a' → logprob: -5.914842128753662
    10. '  ' → logprob: -6.289842128753662

Token 98: ' de' (ID: 334)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.5985180735588074
    2. '   ' → logprob: -1.5985181331634521
    3. ' *' → logprob: -2.598518133163452
    4. ' ' → logprob: -2.848518133163452
    5. '[' → logprob: -3.223518133163452
    6. ' a' → logprob: -3.598518133163452
    7. '*' → logprob: -3.848518133163452
    8. '_' → logprob: -4.598517894744873
    9. '    
' → logprob: -5.098517894744873
    10. '  ' → logprob: -5.848517894744873

Token 99: ' la' (ID: 557)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.25200656056404114
    2. 'a' → logprob: -1.5020065307617188
    3. ' la' → logprob: -9.627006530761719
    4. ' ' → logprob: -12.627006530761719
    5. ' ' → logprob: -13.502006530761719
    6. '	a' → logprob: -13.502006530761719
    7. '`' → logprob: -13.752006530761719
    8. ''a' → logprob: -13.877006530761719
    9. ' l' → logprob: -13.877006530761719
    10. 'l' → logprob: -14.502006530761719

Token 100: ' liste' (ID: 31719)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.1412259340286255
    2. ' liste' → logprob: -2.516225814819336
    3. ' a' → logprob: -3.516225814819336
    4. 'liste' → logprob: -3.891225814819336
    5. ' list' → logprob: -8.391225814819336
    6. '   ' → logprob: -8.516225814819336
    7. 'list' → logprob: -9.266225814819336
    8. 's' → logprob: -10.016225814819336
    9. 'l' → logprob: -10.266225814819336
    10. '`' → logprob: -10.391225814819336

Token 101: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3083451986312866
    2. 'a' → logprob: -1.5583451986312866
    3. ' a' → logprob: -3.683345317840576
    4. '    
' → logprob: -4.558345317840576
    5. ' *' → logprob: -5.183345317840576
    6. '*' → logprob: -5.683345317840576
    7. '[' → logprob: -5.808345317840576
    8. ' ' → logprob: -6.433345317840576
    9. '_' → logprob: -7.058345317840576
    10. 's' → logprob: -7.433345317840576

Token 102: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1280037760734558
    2. '    
' → logprob: -2.6280038356781006
    3. 'p' → logprob: -4.2530035972595215
    4. 'a' → logprob: -4.6280035972595215
    5. '*' → logprob: -5.6280035972595215
    6. '   
' → logprob: -5.7530035972595215
    7. 'product' → logprob: -5.8780035972595215
    8. ' p' → logprob: -5.8780035972595215
    9. ' *' → logprob: -6.5030035972595215
    10. ' product' → logprob: -6.7530035972595215

Token 103: ' product' (ID: 1888)
  Prédit: ' p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' p' → logprob: -0.5014128088951111
    2. ' product' → logprob: -1.5014128684997559
    3. 'p' → logprob: -2.626412868499756
    4. ' prod' → logprob: -3.251412868499756
    5. 'product' (adapté à ' product') → logprob: -3.501412868499756
    6. ' produit' → logprob: -4.251412868499756
    7. '   ' → logprob: -5.626412868499756
    8. 'prod' → logprob: -5.751412868499756
    9. ' result' → logprob: -5.876412868499756
    10. '    
' → logprob: -6.501412868499756

Token 104: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.007425245363265276
    2. '=' → logprob: -5.007425308227539
    3. '_' → logprob: -7.507425308227539
    4. 's' → logprob: -9.257425308227539
    5. ' ' → logprob: -10.382425308227539
    6. '_of' → logprob: -11.257425308227539
    7. '   ' → logprob: -11.882425308227539
    8. '  ' → logprob: -12.757425308227539
    9. ' ' → logprob: -12.882425308227539
    10. '	' → logprob: -13.132425308227539

Token 105: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.47408294677734375
    2. 'a' → logprob: -0.9740829467773438
    3. '   ' → logprob: -12.474082946777344
    4. '	a' → logprob: -13.349082946777344
    5. ' ' → logprob: -15.474082946777344
    6. ' ' → logprob: -15.849082946777344
    7. '(a' → logprob: -16.849082946777344
    8. '_a' → logprob: -17.224082946777344
    9. '    ' → logprob: -17.474082946777344
    10. '  ' → logprob: -17.974082946777344

Token 106: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.981667537620524e-06
    2. ' [' → logprob: -13.375001907348633
    3. '0' → logprob: -14.750001907348633
    4. '1' → logprob: -18.750001907348633
    5. ' ' → logprob: -19.125001907348633
    6. '[
' → logprob: -19.250001907348633
    7. '```' → logprob: -19.375001907348633
    8. '[:' → logprob: -20.125001907348633
    9. 's' → logprob: -20.250001907348633
    10. '\[' → logprob: -20.500001907348633

Token 107: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -4.320199877838604e-07
    2. ' ' → logprob: -14.75
    3. '1' → logprob: -17.625
    4. '   ' → logprob: -19.25
    5. '[' → logprob: -19.5
    6. '```' → logprob: -20.25
    7. '۰' → logprob: -20.25
    8. '
' → logprob: -20.75
    9. '  ' → logprob: -21.125
    10. ']' → logprob: -21.1875

Token 108: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0007173155900090933
    2. ']*' → logprob: -7.7507171630859375
    3. ' ]' → logprob: -8.500717163085938
    4. ' *' → logprob: -9.500717163085938
    5. '*' → logprob: -11.875717163085938
    6. ' ' → logprob: -14.000717163085938
    7. '1' → logprob: -16.000717163085938
    8. '[' → logprob: -16.000717163085938
    9. ' ' → logprob: -16.125717163085938
    10. '']' → logprob: -16.375717163085938

Token 109: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.016107095405459404
    2. '*' → logprob: -4.141107082366943
    3. ' ' → logprob: -10.016107559204102
    4. ' ' → logprob: -11.391107559204102
    5. '`' → logprob: -12.141107559204102
    6. ' *
' → logprob: -12.141107559204102
    7. '  ' → logprob: -13.516107559204102
    8. '*a' → logprob: -14.141107559204102
    9. '   ' → logprob: -14.391107559204102
    10. ' **' → logprob: -14.516107559204102

Token 110: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.16022798418998718
    2. 'a' → logprob: -1.9102280139923096
    3. ' ' → logprob: -12.91022777557373
    4. '	a' → logprob: -14.03522777557373
    5. ' ' → logprob: -14.53522777557373
    6. '_a' → logprob: -17.535228729248047
    7. '  ' → logprob: -18.285228729248047
    8. '```' → logprob: -18.535228729248047
    9. ' а' → logprob: -18.660228729248047
    10. ''a' → logprob: -19.035228729248047

Token 111: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0006280870293267071
    2. '1' → logprob: -7.3756279945373535
    3. ' [' → logprob: -14.000628471374512
    4. '[
' → logprob: -15.250628471374512
    5. '```' → logprob: -15.250628471374512
    6. ' ' → logprob: -16.375627517700195
    7. '   ' → logprob: -17.000627517700195
    8. '2' → logprob: -17.250627517700195
    9. 's' → logprob: -17.875627517700195
    10. '`' → logprob: -18.375627517700195

Token 112: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.3856492842023727e-06
    2. ' ' → logprob: -13.625000953674316
    3. '2' → logprob: -16.750001907348633
    4. '```' → logprob: -16.875001907348633
    5. ']' → logprob: -17.125001907348633
    6. '   ' → logprob: -18.125001907348633
    7. '<|end|>' → logprob: -18.500001907348633
    8. '[' → logprob: -18.750001907348633
    9. '  ' → logprob: -18.875001907348633
    10. '-' → logprob: -19.250001907348633

Token 113: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -6.349075556499884e-05
    2. ' ]' → logprob: -9.7500638961792
    3. ')' → logprob: -12.8750638961792
    4. ']
' → logprob: -13.5000638961792
    5. '   ' → logprob: -14.7500638961792
    6. '']' → logprob: -15.5000638961792
    7. '[' → logprob: -15.8750638961792
    8. '}' → logprob: -16.625062942504883
    9. '])' → logprob: -16.625062942504883
    10. ']

' → logprob: -16.750062942504883

Token 114: '    
' (ID: 1944)
  Prédit: '    
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '    
' → logprob: -0.2230272889137268
    2. '
' → logprob: -2.348027229309082
    3. '   ' → logprob: -2.473027229309082
    4. ' 
' → logprob: -4.973027229309082
    5. '   
' → logprob: -5.098027229309082
    6. '  
' → logprob: -5.848027229309082
    7. '\n' → logprob: -6.223027229309082
    8. '    ' → logprob: -7.348027229309082
    9. '  ' → logprob: -7.473027229309082
    10. ' ' → logprob: -8.598027229309082

Token 115: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.29337188601493835
    2. ' min' → logprob: -2.6683719158172607
    3. '    
' → logprob: -3.1683719158172607
    4. ' result' → logprob: -3.2933719158172607
    5. 'result' → logprob: -3.2933719158172607
    6. 'min' → logprob: -4.043371677398682
    7. ' minimum' → logprob: -4.043371677398682
    8. '
' → logprob: -4.418371677398682
    9. ' if' → logprob: -4.793371677398682
    10. 'minimum' → logprob: -4.918371677398682

Token 116: ' #' (ID: 1069)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.6015377044677734
    2. 'min' → logprob: -1.3515377044677734
    3. 'minimum' → logprob: -2.3515377044677734
    4. 'if' → logprob: -2.9765377044677734
    5. 'print' → logprob: -3.7265377044677734
    6. '#' (adapté à ' #') → logprob: -4.226537704467773
    7. 'third' → logprob: -5.726537704467773
    8. 'comparison' → logprob: -6.226537704467773
    9. '   ' → logprob: -6.351537704467773
    10. ' if' → logprob: -8.226537704467773

Token 117: ' Pr' (ID: 2284)
  Prédit: ' minimum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' minimum' → logprob: -0.7687257528305054
    2. ' min' → logprob: -1.3937257528305054
    3. ' result' → logprob: -2.268725872039795
    4. 'min' → logprob: -2.643725872039795
    5. 'minimum' → logprob: -2.768725872039795
    6. 'result' → logprob: -3.768725872039795
    7. ' comparer' → logprob: -4.768725872039795
    8. ' if' → logprob: -5.518725872039795
    9. ' minimal' → logprob: -6.018725872039795
    10. '#' → logprob: -6.518725872039795

Token 118: 'endre' (ID: 9574)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.006764040794223547
    2. 'nt' → logprob: -5.881763935089111
    3. '#' → logprob: -6.381763935089111
    4. 'ints' → logprob: -7.631763935089111
    5. '   ' → logprob: -8.00676441192627
    6. 'inter' → logprob: -8.88176441192627
    7. 'i' → logprob: -9.13176441192627
    8. 'ent' → logprob: -9.25676441192627
    9. 't' → logprob: -9.38176441192627
    10. 'inth' → logprob: -9.38176441192627

Token 119: ' le' (ID: 505)
  Prédit: ' le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.5901352167129517
    2. ' ' → logprob: -1.8401352167129517
    3. ' a' → logprob: -2.090135097503662
    4. ' max' → logprob: -2.965135097503662
    5. ' min' → logprob: -3.215135097503662
    6. 'le' → logprob: -3.590135097503662
    7. 'a' → logprob: -4.215135097503662
    8. ' l' → logprob: -4.715135097503662
    9. 'min' → logprob: -5.340135097503662
    10. ' la' → logprob: -5.340135097503662

Token 120: ' minimum' (ID: 11085)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.21601027250289917
    2. 'minimum' → logprob: -1.716010332107544
    3. ' minimum' → logprob: -4.591010093688965
    4. ' min' → logprob: -5.591010093688965
    5. 'max' → logprob: -8.466010093688965
    6. 'maximum' → logprob: -8.966010093688965
    7. 'plus' → logprob: -9.091010093688965
    8. '3' → logprob: -10.341010093688965
    9. 'moins' → logprob: -10.341010093688965
    10. 'a' → logprob: -10.841010093688965

Token 121: ' entre' (ID: 3853)
  Prédit: ' entre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' entre' → logprob: -0.14098377525806427
    2. ' between' → logprob: -2.515983819961548
    3. 'entre' → logprob: -4.015983581542969
    4. '(' → logprob: -4.390983581542969
    5. '(product' → logprob: -4.515983581542969
    6. 'between' → logprob: -5.390983581542969
    7. ' product' → logprob: -6.765983581542969
    8. 'product' → logprob: -7.015983581542969
    9. ' de' → logprob: -7.390983581542969
    10. ' (' → logprob: -7.515983581542969

Token 122: ' ce' (ID: 2357)
  Prédit: ' product'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' product' → logprob: -0.20989762246608734
    2. 'product' → logprob: -1.7098976373672485
    3. ' le' → logprob: -5.209897518157959
    4. '(product' → logprob: -5.834897518157959
    5. 'le' → logprob: -10.459897994995117
    6. ' ' → logprob: -11.334897994995117
    7. '	product' → logprob: -12.084897994995117
    8. ' la' → logprob: -12.334897994995117
    9. '$product' → logprob: -13.084897994995117
    10. ' produit' → logprob: -13.084897994995117

Token 123: ' produit' (ID: 29429)
  Prédit: ' product'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' product' → logprob: -0.04104450345039368
    2. 'product' → logprob: -3.9160444736480713
    3. ' produit' → logprob: -3.9160444736480713
    4. ' ' → logprob: -9.166044235229492
    5. ' ' → logprob: -9.291044235229492
    6. 's' → logprob: -9.541044235229492
    7. '  ' → logprob: -9.791044235229492
    8. '	product' → logprob: -10.916044235229492
    9. '_product' → logprob: -11.666044235229492
    10. '(product' → logprob: -11.791044235229492

Token 124: ' et' (ID: 859)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7271257042884827
    2. ' et' → logprob: -0.9771257042884827
    3. ' and' → logprob: -2.727125644683838
    4. ' ,' → logprob: -3.102125644683838
    5. ' ' → logprob: -3.602125644683838
    6. 'et' → logprob: -6.852125644683838
    7. 'and' → logprob: -7.477125644683838
    8. 'a' → logprob: -8.352126121520996
    9. ' и' → logprob: -8.477126121520996
    10. ' ' → logprob: -8.727126121520996

Token 125: ' le' (ID: 505)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.037048425525426865
    2. 'a' → logprob: -3.41204833984375
    3. ' ' → logprob: -6.16204833984375
    4. ' ' → logprob: -6.66204833984375
    5. ' la' → logprob: -13.03704833984375
    6. '  ' → logprob: -13.03704833984375
    7. '	a' → logprob: -13.03704833984375
    8. ' l' → logprob: -13.41204833984375
    9. ' the' → logprob: -14.28704833984375
    10. ' le' → logprob: -14.91204833984375

Token 126: ' troisième' (ID: 75373)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.09047941118478775
    2. ' a' → logprob: -2.4654793739318848
    3. ' troisième' → logprob: -6.965479373931885
    4. '3' → logprob: -8.340479850769043
    5. ' ' → logprob: -8.590479850769043
    6. ' third' → logprob: -9.090479850769043
    7. 'third' → logprob: -10.965479850769043
    8. '   ' → logprob: -11.590479850769043
    9. ' ' → logprob: -12.090479850769043
    10. '  ' → logprob: -12.215479850769043

Token 127: ' élément' (ID: 99627)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.07418132573366165
    2. ' a' → logprob: -3.199181318283081
    3. ' élément' → logprob: -4.32418155670166
    4. 'élé' → logprob: -4.57418155670166
    5. 'element' → logprob: -5.69918155670166
    6. '_' → logprob: -6.69918155670166
    7. ' ' → logprob: -7.07418155670166
    8. 'ent' → logprob: -7.69918155670166
    9. ' entier' → logprob: -7.82418155670166
    10. ' ' → logprob: -7.94918155670166

Token 128: ' de' (ID: 334)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.0023770332336426
    2. '   ' → logprob: -1.3773770332336426
    3. ' a' → logprob: -1.6273770332336426
    4. 'min' → logprob: -2.1273770332336426
    5. ' min' → logprob: -3.8773770332336426
    6. '
' → logprob: -4.377377033233643
    7. ',' → logprob: -4.502377033233643
    8. ' ' → logprob: -4.752377033233643
    9. '    
' → logprob: -5.502377033233643
    10. ' 
' → logprob: -6.877377033233643

Token 129: ' la' (ID: 557)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.351703405380249
    2. 'a' → logprob: -1.226703405380249
    3. ' la' → logprob: -5.976703643798828
    4. ' ' → logprob: -7.601703643798828
    5. ' ' → logprob: -8.976703643798828
    6. 'la' → logprob: -10.601703643798828
    7. ' l' → logprob: -10.976703643798828
    8. ' the' → logprob: -11.101703643798828
    9. 'l' → logprob: -11.601703643798828
    10. '  ' → logprob: -12.351703643798828

Token 130: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.19802384078502655
    2. 'liste' → logprob: -2.448023796081543
    3. 'a' → logprob: -2.573023796081543
    4. ' a' → logprob: -4.573023796081543
    5. ' list' → logprob: -5.323023796081543
    6. ' ' → logprob: -7.323023796081543
    7. 'list' → logprob: -7.323023796081543
    8. '   ' → logprob: -9.323023796081543
    9. ' ' → logprob: -9.698023796081543
    10. ' lista' → logprob: -10.073023796081543

Token 131: '
' (ID: 198)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: -1.1021716594696045
    2. '   ' → logprob: -1.4771716594696045
    3. 'result' → logprob: -1.4771716594696045
    4. ' result' → logprob: -2.6021716594696045
    5. ' min' → logprob: -2.6021716594696045
    6. '
' → logprob: -3.1021716594696045
    7. 'minimum' → logprob: -5.727171897888184
    8. ' minimum' → logprob: -5.977171897888184
    9. 'return' → logprob: -6.477171897888184
    10. 'print' → logprob: -6.477171897888184

Token 132: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6026991009712219
    2. ' result' → logprob: -1.4776990413665771
    3. 'result' → logprob: -1.8526990413665771
    4. 'min' → logprob: -3.727699041366577
    5. ' min' → logprob: -4.102699279785156
    6. '
' → logprob: -4.102699279785156
    7. ' minimum' → logprob: -5.227699279785156
    8. '    
' → logprob: -5.977699279785156
    9. 'minimum' → logprob: -6.602699279785156
    10. ' return' → logprob: -7.977699279785156

Token 133: ' minimum' (ID: 11085)
  Prédit: ' min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.11336303502321243
    2. ' result' → logprob: -3.238363027572632
    3. 'min' → logprob: -3.363363027572632
    4. ' a' → logprob: -4.113363265991211
    5. ' minimum' → logprob: -4.613363265991211
    6. 'a' → logprob: -5.738363265991211
    7. 'result' → logprob: -5.988363265991211
    8. 'minimum' (adapté à ' minimum') → logprob: -7.863363265991211
    9. '   ' → logprob: -8.363363265991211
    10. ' b' → logprob: -8.488363265991211

Token 134: '_value' (ID: 6734)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.039058323949575424
    2. '=' → logprob: -3.289058208465576
    3. '_' → logprob: -6.914058208465576
    4. '_value' → logprob: -11.914058685302734
    5. ' ' → logprob: -12.414058685302734
    6. '_val' → logprob: -12.789058685302734
    7. ' ' → logprob: -13.039058685302734
    8. '	' → logprob: -13.414058685302734
    9. 's' → logprob: -13.914058685302734
    10. '   ' → logprob: -13.914058685302734

Token 135: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01815134845674038
    2. '=' → logprob: -4.01815128326416
    3. ' ' → logprob: -14.51815128326416
    4. '_' → logprob: -14.51815128326416
    5. ' =
' → logprob: -15.26815128326416
    6. ' ' → logprob: -15.89315128326416
    7. 's' → logprob: -16.893152236938477
    8. ')' → logprob: -18.018152236938477
    9. '   ' → logprob: -18.143152236938477
    10. '	' → logprob: -18.393152236938477

Token 136: ' min' (ID: 1349)
  Prédit: ' min'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.004088373854756355
    2. 'min' → logprob: -5.504088401794434
    3. ' a' → logprob: -12.129088401794434
    4. 'a' → logprob: -13.379088401794434
    5. ' ' → logprob: -13.629088401794434
    6. '	min' → logprob: -14.129088401794434
    7. ' ' → logprob: -15.129088401794434
    8. ' minimum' → logprob: -15.129088401794434
    9. ' max' → logprob: -15.379088401794434
    10. '   ' → logprob: -15.754088401794434

Token 137: '(product' (ID: 31697)
  Prédit: '(product'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(product' → logprob: -0.004676472395658493
    2. '(a' → logprob: -5.754676342010498
    3. '(' → logprob: -6.504676342010498
    4. 'product' → logprob: -15.004676818847656
    5. 'a' → logprob: -15.129676818847656
    6. ' (' → logprob: -15.754676818847656
    7. '(
' → logprob: -15.754676818847656
    8. '(products' → logprob: -16.129676818847656
    9. '(prod' → logprob: -16.629676818847656
    10. ' product' → logprob: -17.004676818847656

Token 138: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0020560468547046185
    2. ' ,' → logprob: -6.252056121826172
    3. ',a' → logprob: -9.502056121826172
    4. 'a' → logprob: -9.877056121826172
    5. '   ' → logprob: -14.252056121826172
    6. ' a' → logprob: -14.752056121826172
    7. ',
' → logprob: -15.502056121826172
    8. ')' → logprob: -16.752056121826172
    9. '`,' → logprob: -17.752056121826172
    10. ' ' → logprob: -18.252056121826172

Token 139: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.11284317076206207
    2. 'a' → logprob: -2.2378432750701904
    3. ' ' → logprob: -11.36284351348877
    4. ' ' → logprob: -12.36284351348877
    5. '	a' → logprob: -12.86284351348877
    6. ')' → logprob: -13.73784351348877
    7. ')a' → logprob: -15.11284351348877
    8. '   ' → logprob: -15.23784351348877
    9. '    ' → logprob: -15.61284351348877
    10. '(a' → logprob: -16.362842559814453

Token 140: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -3.7697225252486533e-06
    2. '2' → logprob: -12.750003814697266
    3. ' [' → logprob: -14.625003814697266
    4. '3' → logprob: -15.625003814697266
    5. '[
' → logprob: -16.375003814697266
    6. '   ' → logprob: -17.250003814697266
    7. '```' → logprob: -17.375003814697266
    8. ')[' → logprob: -17.625003814697266
    9. ')' → logprob: -18.000003814697266
    10. '
' → logprob: -18.125003814697266

Token 141: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -7.226628895296017e-06
    2. ' ' → logprob: -12.500007629394531
    3. '[' → logprob: -12.750007629394531
    4. '   ' → logprob: -15.250007629394531
    5. '```' → logprob: -15.750007629394531
    6. '
' → logprob: -16.12500762939453
    7. '  ' → logprob: -17.12500762939453
    8. '    ' → logprob: -17.62500762939453
    9. '２' → logprob: -18.25000762939453
    10. '۲' → logprob: -18.87500762939453

Token 142: '])
' (ID: 5169)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.0012792840134352446
    2. ')' → logprob: -6.751279354095459
    3. ' ])' → logprob: -10.2512788772583
    4. '])
' → logprob: -10.6262788772583
    5. '))' → logprob: -10.6262788772583
    6. ']' → logprob: -11.2512788772583
    7. ')])' → logprob: -12.6262788772583
    8. ' )' → logprob: -13.0012788772583
    9. ']))' → logprob: -13.2512788772583
    10. ''])' → logprob: -14.1262788772583

Token 143: '    
' (ID: 1944)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.8203510642051697
    2. '   ' → logprob: -0.8203510642051697
    3. 'print' → logprob: -2.8203511238098145
    4. '    
' → logprob: -2.8203511238098145
    5. '  
' → logprob: -9.070350646972656
    6. '```' → logprob: -9.445350646972656
    7. '   
' → logprob: -10.945350646972656
    8. ' print' → logprob: -11.445350646972656
    9. '\n' → logprob: -11.695350646972656
    10. ' 
' → logprob: -11.695350646972656

Token 144: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08060163259506226
    2. '
' → logprob: -3.580601692199707
    3. 'print' → logprob: -3.580601692199707
    4. '    
' → logprob: -3.830601692199707
    5. ' print' → logprob: -11.205601692199707
    6. '  
' → logprob: -12.330601692199707
    7. '```' → logprob: -12.830601692199707
    8. '   
' → logprob: -13.205601692199707
    9. '    
    
' → logprob: -14.205601692199707
    10. '
' → logprob: -15.080601692199707

Token 145: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5912735462188721
    2. 'print' → logprob: -0.8412735462188721
    3. '    
' → logprob: -4.841273307800293
    4. '
' → logprob: -5.091273307800293
    5. ' print' → logprob: -6.841273307800293
    6. '```' → logprob: -9.966273307800293
    7. '  
' → logprob: -11.091273307800293
    8. '   
' → logprob: -11.216273307800293
    9. '#' (adapté à ' #') → logprob: -12.091273307800293
    10. '

' → logprob: -12.341273307800293

Token 146: ' Aff' (ID: 13741)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.11505240947008133
    2. ' print' → logprob: -2.2400524616241455
    3. '   ' → logprob: -6.115052223205566
    4. '```' → logprob: -12.240052223205566
    5. 'aff' → logprob: -13.115052223205566
    6. 'pr' → logprob: -13.115052223205566
    7. 'Afficher' → logprob: -13.490052223205566
    8. '#' → logprob: -13.865052223205566
    9. '  ' → logprob: -13.990052223205566
    10. ' afficher' → logprob: -13.990052223205566

Token 147: 'icher' (ID: 13617)
  Prédit: 'icher'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'icher' → logprob: -0.0005405236734077334
    2. 'iche' → logprob: -7.750540733337402
    3. '   ' → logprob: -10.750540733337402
    4. 'ic' → logprob: -10.750540733337402
    5. '#' → logprob: -10.875540733337402
    6. 'cher' → logprob: -11.000540733337402
    7. 'ich' → logprob: -11.250540733337402
    8. 'ichage' → logprob: -12.125540733337402
    9. 'icer' → logprob: -12.625540733337402
    10. 'i' → logprob: -12.625540733337402

Token 148: ' le' (ID: 505)
  Prédit: '(min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(min' → logprob: -0.3133988678455353
    2. '(' → logprob: -1.313398838043213
    3. '("' → logprob: -10.188399314880371
    4. ' minimum' → logprob: -10.438399314880371
    5. '('' → logprob: -10.563399314880371
    6. '(f' → logprob: -10.688399314880371
    7. 'minimum' → logprob: -11.313399314880371
    8. '(
' → logprob: -12.313399314880371
    9. ' (' → logprob: -13.438399314880371
    10. '(

' → logprob: -13.938399314880371

Token 149: ' résultat' (ID: 62556)
  Prédit: ' minimum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' minimum' → logprob: -0.6326907277107239
    2. 'minimum' → logprob: -0.7576907277107239
    3. 'min' → logprob: -10.3826904296875
    4. 'result' → logprob: -10.5076904296875
    5. ' result' → logprob: -11.1326904296875
    6. ' résultat' → logprob: -12.7576904296875
    7. ' minimal' → logprob: -12.8826904296875
    8. 'r' → logprob: -12.8826904296875
    9. '.minimum' → logprob: -13.5076904296875
    10. ' ' → logprob: -13.6326904296875

Token 150: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5049088001251221
    2. '   ' → logprob: -1.004908800125122
    3. 'print' → logprob: -3.879908800125122
    4. '    
' → logprob: -5.129908561706543
    5. ' print' → logprob: -5.629908561706543
    6. '  
' → logprob: -9.754908561706543
    7. '
' → logprob: -10.129908561706543
    8. '\n' → logprob: -10.129908561706543
    9. ' 
' → logprob: -10.629908561706543
    10. '```' → logprob: -11.379908561706543

Token 151: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004568134900182486
    2. 'print' → logprob: -5.879568099975586
    3. ' print' → logprob: -6.379568099975586
    4. '    
' → logprob: -10.004568099975586
    5. '
' → logprob: -10.879568099975586
    6. '```' → logprob: -14.004568099975586
    7. '   ' → logprob: -15.004568099975586
    8. '	print' → logprob: -15.254568099975586
    9. ' 
' → logprob: -15.879568099975586
    10. '       ' → logprob: -16.379568099975586

Token 152: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.015182554721832275
    2. ' print' → logprob: -4.2651824951171875
    3. '   ' → logprob: -6.8901824951171875
    4. '```' → logprob: -14.390182495117188
    5. 'pr' → logprob: -16.140182495117188
    6. '	print' → logprob: -16.765182495117188
    7. '    
' → logprob: -17.640182495117188
    8. 'prin' → logprob: -18.015182495117188
    9. '  ' → logprob: -18.140182495117188
    10. ' ' → logprob: -18.265182495117188

Token 153: '(min' (ID: 26035)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2519516944885254
    2. '(min' → logprob: -1.5019516944885254
    3. '(
' → logprob: -10.876951217651367
    4. '(

' → logprob: -12.876951217651367
    5. '()' → logprob: -14.626951217651367
    6. '("("' → logprob: -15.626951217651367
    7. ' (' → logprob: -15.751951217651367
    8. '(max' → logprob: -16.376951217651367
    9. '('' → logprob: -16.501951217651367
    10. '(M' → logprob: -16.876951217651367

Token 154: 'imum' (ID: 4556)
  Prédit: 'imum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'imum' → logprob: -0.02830510400235653
    2. '(min' → logprob: -3.9033050537109375
    3. 'minimum' → logprob: -5.5283050537109375
    4. 'im' → logprob: -5.7783050537109375
    5. '(' → logprob: -8.403305053710938
    6. ' minimum' → logprob: -9.028305053710938
    7. ')' → logprob: -9.153305053710938
    8. 'um' → logprob: -9.528305053710938
    9. 'min' → logprob: -9.903305053710938
    10. 'imin' → logprob: -10.528305053710938

Token 155: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -1.1472419600977446e-06
    2. '_' → logprob: -14.375000953674316
    3. '_val' → logprob: -14.625000953674316
    4. ')' → logprob: -16.750001907348633
    5. '_Value' → logprob: -17.625001907348633
    6. 'value' → logprob: -17.875001907348633
    7. ')_' → logprob: -18.000001907348633
    8. '_VALUE' → logprob: -18.000001907348633
    9. 'Value' → logprob: -19.000001907348633
    10. '_values' → logprob: -19.500001907348633

Token 156: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9361264946837764e-07
    2. ' )' → logprob: -15.625
    3. ')
' → logprob: -17.375
    4. ')`' → logprob: -18.375
    5. '))' → logprob: -18.75
    6. '')' → logprob: -19.5
    7. '`)' → logprob: -19.75
    8. '()' → logprob: -20.0
    9. '())' → logprob: -20.75
    10. '")' → logprob: -20.875

Token 157: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.013586025685071945
    2. '
' → logprob: -4.513586044311523
    3. '\' → logprob: -6.763586044311523
    4. '#' → logprob: -7.263586044311523
    5. '<|end|>' → logprob: -8.388586044311523
    6. 'a' → logprob: -9.013586044311523
    7. '```' → logprob: -9.513586044311523
    8. '\n' → logprob: -9.513586044311523
    9. '

' → logprob: -10.013586044311523
    10. ' def' → logprob: -10.388586044311523

Token 158: ' read' (ID: 1729)
  Prédit: ' read'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.020566880702972412
    2. 'read' → logprob: -3.895566940307617
    3. '_read' → logprob: -11.020566940307617
    4. ' ' → logprob: -12.145566940307617
    5. '_' → logprob: -13.395566940307617
    6. '	read' → logprob: -14.020566940307617
    7. ' main' → logprob: -15.020566940307617
    8. ' def' → logprob: -15.270566940307617
    9. 'def' → logprob: -16.020566940307617
    10. ' _' → logprob: -16.645566940307617

Token 159: '_integer' (ID: 82911)
  Prédit: '_integer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_integer' → logprob: -5.676981345459353e-06
    2. '_' → logprob: -13.625005722045898
    3. '_INTEGER' → logprob: -13.750005722045898
    4. 'def' → logprob: -13.750005722045898
    5. '_in' → logprob: -14.500005722045898
    6. '_int' → logprob: -14.500005722045898
    7. '```' → logprob: -15.625005722045898
    8. '_Integer' → logprob: -15.625005722045898
    9. '_string' → logprob: -15.750005722045898
    10. '_float' → logprob: -16.7500057220459

Token 160: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -3.054500666621607e-06
    2. '_from' → logprob: -14.25000286102295
    3. '_lists' → logprob: -14.37500286102295
    4. '_line' → logprob: -14.37500286102295
    5. '_lst' → logprob: -15.37500286102295
    6. ' _' → logprob: -15.62500286102295
    7. '_string' → logprob: -15.75000286102295
    8. '_lista' → logprob: -15.75000286102295
    9. '_l' → logprob: -16.125003814697266
    10. '_li' → logprob: -16.250003814697266

Token 161: '_from' (ID: 12526)
  Prédit: '_from'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_from' → logprob: -3.128163257315464e-07
    2. 'from' → logprob: -15.375
    3. '_to' → logprob: -18.125
    4. '_FROM' → logprob: -18.5
    5. '_' → logprob: -19.0
    6. '_f' → logprob: -19.25
    7. '_form' → logprob: -19.5
    8. ' _' → logprob: -20.25
    9. '_fr' → logprob: -20.625
    10. '_of' → logprob: -20.75

Token 162: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.0003362966235727072
    2. 'input' → logprob: -8.000336647033691
    3. '_user' → logprob: -15.750336647033691
    4. 'import' → logprob: -16.125335693359375
    5. 'Input' → logprob: -16.125335693359375
    6. ' input' → logprob: -16.250335693359375
    7. '_' → logprob: -16.250335693359375
    8. '```' → logprob: -17.000335693359375
    9. '_string' → logprob: -17.250335693359375
    10. 'def' → logprob: -17.375335693359375

Token 163: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.000578292878344655
    2. '():
' → logprob: -8.375577926635742
    3. '()' → logprob: -8.500577926635742
    4. ' ():' → logprob: -9.375577926635742
    5. '_from' → logprob: -10.000577926635742
    6. '_' → logprob: -12.000577926635742
    7. 'from' → logprob: -12.125577926635742
    8. ' ()' → logprob: -13.750577926635742
    9. '():
' → logprob: -14.625577926635742
    10. '(' → logprob: -15.000577926635742

Token 164: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00023596010578330606
    2. ' line' → logprob: -8.750235557556152
    3. '   ' → logprob: -10.500235557556152
    4. ' return' → logprob: -10.750235557556152
    5. 'line' → logprob: -11.375235557556152
    6. 'return' → logprob: -12.375235557556152
    7. '    
' → logprob: -12.875235557556152
    8. ' input' → logprob: -13.000235557556152
    9. ' lines' → logprob: -13.250235557556152
    10. 'input' → logprob: -13.250235557556152

Token 165: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2525063753128052
    2. ' return' → logprob: -1.7525063753128052
    3. 'return' → logprob: -3.2525062561035156
    4. ' line' → logprob: -5.377506256103516
    5. ' input' → logprob: -5.627506256103516
    6. 'input' → logprob: -6.752506256103516
    7. 'import' → logprob: -7.877506256103516
    8. 'line' → logprob: -8.002506256103516
    9. 'try' → logprob: -8.252506256103516
    10. ' try' → logprob: -8.502506256103516

Token 166: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.014112949371338
    2. 'return' → logprob: -1.389112949371338
    3. 'line' → logprob: -1.389112949371338
    4. 'int' → logprob: -3.014112949371338
    5. 'list' → logprob: -3.389112949371338
    6. 'input' → logprob: -3.639112949371338
    7. ' line' → logprob: -4.514112949371338
    8. ' return' → logprob: -5.264112949371338
    9. 'try' → logprob: -5.264112949371338
    10. 'import' → logprob: -6.639112949371338

Token 167: ' Lit' (ID: 45595)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.4008610248565674
    2. ' line' → logprob: -1.7758610248565674
    3. '   ' → logprob: -2.9008610248565674
    4. 'ligne' → logprob: -3.0258610248565674
    5. 'return' → logprob: -3.7758610248565674
    6. 'l' → logprob: -4.775860786437988
    7. ' ligne' → logprob: -4.900860786437988
    8. '#' → logprob: -5.025860786437988
    9. 'input' → logprob: -5.650860786437988
    10. 'L' → logprob: -5.650860786437988

Token 168: ' une' (ID: 2463)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.10885752737522125
    2. ' une' → logprob: -3.1088576316833496
    3. ' la' → logprob: -3.7338576316833496
    4. '   ' → logprob: -4.10885763168335
    5. ' l' → logprob: -4.98385763168335
    6. 'l' → logprob: -5.35885763168335
    7. ' ' → logprob: -6.23385763168335
    8. 'une' → logprob: -6.85885763168335
    9. 's' → logprob: -6.98385763168335
    10. ' line' → logprob: -7.85885763168335

Token 169: ' ligne' (ID: 19583)
  Prédit: ' ligne'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ligne' → logprob: -0.3583935797214508
    2. 'ligne' → logprob: -1.2333935499191284
    3. ' liste' → logprob: -5.483393669128418
    4. 'liste' → logprob: -5.608393669128418
    5. 'entrée' → logprob: -7.733393669128418
    6. ' ' → logprob: -7.733393669128418
    7. 'l' → logprob: -7.733393669128418
    8. 'line' → logprob: -8.108393669128418
    9. ' line' → logprob: -8.358393669128418
    10. ' chaîne' → logprob: -9.983393669128418

Token 170: ' d' (ID: 272)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.36458832025527954
    2. '   ' → logprob: -1.2395882606506348
    3. 'de' → logprob: -5.114588260650635
    4. 'from' → logprob: -5.989588260650635
    5. ' depuis' → logprob: -6.114588260650635
    6. ' from' → logprob: -6.239588260650635
    7. '()' → logprob: -6.864588260650635
    8. ' ' → logprob: -6.989588260650635
    9. ' standard' → logprob: -7.989588260650635
    10. '    ' → logprob: -8.614588737487793

Token 171: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.04306724667549133
    2. 'entrée' → logprob: -3.418067216873169
    3. 'l' → logprob: -4.918067455291748
    4. ' l' → logprob: -7.043067455291748
    5. ''ent' → logprob: -8.16806697845459
    6. 'e' → logprob: -8.41806697845459
    7. '’entrée' → logprob: -8.41806697845459
    8. ' entrée' → logprob: -8.79306697845459
    9. ''l' → logprob: -10.04306697845459
    10. ''' → logprob: -10.04306697845459

Token 172: ' utilisateur' (ID: 115595)
  Prédit: ' standard'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' standard' → logprob: -0.012168892659246922
    2. '   ' → logprob: -4.762168884277344
    3. 'standard' → logprob: -6.012168884277344
    4. '()' → logprob: -7.012168884277344
    5. ',' → logprob: -10.137168884277344
    6. '_standard' → logprob: -10.387168884277344
    7. ' ' → logprob: -10.512168884277344
    8. ' de' → logprob: -10.637168884277344
    9. ' ()' → logprob: -11.887168884277344
    10. ' depuis' → logprob: -12.262168884277344

Token 173: ' composée' (ID: 146865)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.44621366262435913
    2. '()' → logprob: -1.071213722229004
    3. ' ' → logprob: -4.946213722229004
    4. ' ()' → logprob: -5.696213722229004
    5. ' et' → logprob: -6.071213722229004
    6. ')' → logprob: -6.946213722229004
    7. '().' → logprob: -7.071213722229004
    8. ' )' → logprob: -7.196213722229004
    9. ',' → logprob: -7.821213722229004
    10. 'def' → logprob: -8.696213722229004

Token 174: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.19025424122810364
    2. 'd' → logprob: -1.8152542114257812
    3. ' de' → logprob: -5.190254211425781
    4. 'de' → logprob: -5.440254211425781
    5. 'def' → logprob: -8.315254211425781
    6. 'e' → logprob: -9.440254211425781
    7. ' uniquement' → logprob: -9.690254211425781
    8. 's' → logprob: -10.440254211425781
    9. ' of' → logprob: -10.815254211425781
    10. ' ' → logprob: -10.815254211425781

Token 175: ''ent' (ID: 53422)
  Prédit: ''ent'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''ent' → logprob: -0.7166875004768372
    2. 'e' → logprob: -1.2166874408721924
    3. 'ent' → logprob: -3.2166874408721924
    4. ''au' → logprob: -3.3416874408721924
    5. ''un' → logprob: -3.5916874408721924
    6. ''une' → logprob: -3.7166874408721924
    7. 'des' → logprob: -3.8416874408721924
    8. ' des' → logprob: -3.9666874408721924
    9. ''' → logprob: -4.5916876792907715
    10. 'u' → logprob: -4.9666876792907715

Token 176: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.002079240046441555
    2. 'ières' → logprob: -6.377079010009766
    3. 'i' → logprob: -8.377079010009766
    4. 'ires' → logprob: -9.752079010009766
    5. 'ers' → logprob: -11.127079010009766
    6. 't' → logprob: -11.127079010009766
    7. 'res' → logprob: -11.252079010009766
    8. 'ié' → logprob: -11.377079010009766
    9. 'ères' → logprob: -12.127079010009766
    10. 'ière' → logprob: -12.502079010009766

Token 177: ' sépar' (ID: 97160)
  Prédit: ' sépar'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sépar' → logprob: -0.2036670744419098
    2. ',' → logprob: -1.8286670446395874
    3. 's' → logprob: -4.453667163848877
    4. 'sé' → logprob: -4.578667163848877
    5. 'se' → logprob: -7.328667163848877
    6. ' ,' → logprob: -7.703667163848877
    7. ' sur' → logprob: -9.078666687011719
    8. 'sur' → logprob: -9.328666687011719
    9. ' et' → logprob: -9.453666687011719
    10. ' separated' → logprob: -10.203666687011719

Token 178: 'és' (ID: 1756)
  Prédit: 'és'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'és' → logprob: -0.002797391265630722
    2. 'é' → logprob: -6.377797603607178
    3. 'is' → logprob: -8.00279712677002
    4. ' par' → logprob: -8.25279712677002
    5. 'es' → logprob: -8.75279712677002
    6. 'ée' → logprob: -8.87779712677002
    7. 's' → logprob: -9.50279712677002
    8. 'par' → logprob: -9.75279712677002
    9. 'ées' → logprob: -10.50279712677002
    10. 'e' → logprob: -10.75279712677002

Token 179: ' par' (ID: 686)
  Prédit: ' par'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' par' → logprob: -0.474165141582489
    2. 'par' → logprob: -0.974165141582489
    3. 'es' → logprob: -9.849164962768555
    4. '(par' → logprob: -11.349164962768555
    5. '_par' → logprob: -11.724164962768555
    6. 's' → logprob: -12.599164962768555
    7. 'Par' → logprob: -12.849164962768555
    8. ' ' → logprob: -13.224164962768555
    9. '	par' → logprob: -13.349164962768555
    10. '```' → logprob: -13.724164962768555

Token 180: ' des' (ID: 731)
  Prédit: ' des'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.20627129077911377
    2. 'des' → logprob: -2.331271171569824
    3. ' espaces' → logprob: -2.581271171569824
    4. ' un' → logprob: -5.206271171569824
    5. 'esp' → logprob: -5.581271171569824
    6. 'un' → logprob: -6.206271171569824
    7. 'spaces' → logprob: -7.581271171569824
    8. ' ' → logprob: -7.831271171569824
    9. ' espace' → logprob: -7.956271171569824
    10. ''esp' → logprob: -7.956271171569824

Token 181: ' espaces' (ID: 98361)
  Prédit: ' espaces'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' espaces' → logprob: -0.20297835767269135
    2. 'esp' → logprob: -1.7029783725738525
    3. 'spaces' → logprob: -7.577978134155273
    4. 'es' → logprob: -7.577978134155273
    5. ''esp' → logprob: -7.827978134155273
    6. ' espace' → logprob: -9.952978134155273
    7. ' spaces' → logprob: -10.327978134155273
    8. ''espace' → logprob: -11.077978134155273
    9. 'paces' → logprob: -11.702978134155273
    10. ' espacios' → logprob: -11.827978134155273

Token 182: ' et' (ID: 859)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0018721171654760838
    2. ',' → logprob: -6.6268720626831055
    3. '    
' → logprob: -8.376872062683105
    4. ' ,' → logprob: -9.626872062683105
    5. ')' → logprob: -9.876872062683105
    6. '
' → logprob: -9.876872062683105
    7. ' et' → logprob: -10.251872062683105
    8. '    ' → logprob: -10.626872062683105
    9. 'def' → logprob: -11.376872062683105
    10. '.' → logprob: -11.626872062683105

Token 183: ' ren' (ID: 5427)
  Prédit: ' retourne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' retourne' → logprob: -0.5973610877990723
    2. ' la' → logprob: -1.4723610877990723
    3. ' ren' → logprob: -2.3473610877990723
    4. ' return' → logprob: -2.9723610877990723
    5. 'return' → logprob: -3.5973610877990723
    6. 'la' → logprob: -4.472361087799072
    7. ' returns' → logprob: -4.722361087799072
    8. ' les' → logprob: -4.722361087799072
    9. 'ren' → logprob: -4.972361087799072
    10. ' convert' → logprob: -5.472361087799072

Token 184: 'voie' (ID: 70072)
  Prédit: 'voie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'voie' → logprob: -0.00014489953173324466
    2. 'voit' → logprob: -9.375144958496094
    3. 'v' → logprob: -10.375144958496094
    4. 'voy' → logprob: -10.750144958496094
    5. 'voi' → logprob: -12.125144958496094
    6. 'vo' → logprob: -13.500144958496094
    7. 't' → logprob: -14.375144958496094
    8. '
' → logprob: -17.750144958496094
    9. '__' → logprob: -18.125144958496094
    10. '```' → logprob: -18.250144958496094

Token 185: ' la' (ID: 557)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.04347160458564758
    2. ' la' → logprob: -3.543471574783325
    3. '   ' → logprob: -5.043471813201904
    4. 'list' → logprob: -5.168471813201904
    5. ' une' → logprob: -6.793471813201904
    6. ' a' → logprob: -9.668471336364746
    7. '    ' → logprob: -9.793471336364746
    8. ' l' → logprob: -9.918471336364746
    9. ' ' → logprob: -10.043471336364746
    10. ' [' → logprob: -10.293471336364746

Token 186: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.18940146267414093
    2. 'liste' → logprob: -2.314401388168335
    3. ' list' → logprob: -3.314401388168335
    4. 'list' → logprob: -3.314401388168335
    5. '[' → logprob: -7.189401626586914
    6. ' [' → logprob: -9.064401626586914
    7. '   ' → logprob: -9.314401626586914
    8. ' ' → logprob: -11.689401626586914
    9. 'Liste' → logprob: -11.939401626586914
    10. 'lis' → logprob: -12.314401626586914

Token 187: ' correspond' (ID: 11095)
  Prédit: ' des'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.014172324910759926
    2. ' d' → logprob: -5.264172554016113
    3. '[int' → logprob: -5.514172554016113
    4. ' list' → logprob: -6.514172554016113
    5. ' de' → logprob: -7.014172554016113
    6. '[' → logprob: -7.264172554016113
    7. '   ' → logprob: -7.264172554016113
    8. ' [' → logprob: -7.639172554016113
    9. ' ' → logprob: -8.514172554016113
    10. 'des' → logprob: -8.639172554016113

Token 188: 'ante' (ID: 2116)
  Prédit: 'ante'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ante' → logprob: -0.027854343876242638
    2. 'ant' → logprob: -3.6528544425964355
    3. ' à' → logprob: -6.5278544425964355
    4. '   ' → logprob: -11.027853965759277
    5. 'a' → logprob: -11.277853965759277
    6. ' a' → logprob: -11.277853965759277
    7. ' ' → logprob: -11.902853965759277
    8. 'à' → logprob: -11.902853965759277
    9. 'ance' → logprob: -12.402853965759277
    10. ' au' → logprob: -12.527853965759277

Token 189: '.

' (ID: 364)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0028866638895124197
    2. ' :' → logprob: -7.377886772155762
    3. ':
' → logprob: -7.502886772155762
    4. ':' → logprob: -7.627886772155762
    5. '.' → logprob: -7.752886772155762
    6. ' :
' → logprob: -8.252886772155762
    7. '    
' → logprob: -9.252886772155762
    8. ' en' → logprob: -9.377886772155762
    9. '.
' → logprob: -9.627886772155762
    10. ' ' → logprob: -9.627886772155762

Token 190: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -3.7146746763028204e-05
    2. 'def' → logprob: -10.37503719329834
    3. ' line' → logprob: -13.25003719329834
    4. '    ' → logprob: -14.25003719329834
    5. '"""' → logprob: -14.62503719329834
    6. '   ' → logprob: -14.62503719329834
    7. ' return' → logprob: -14.75003719329834
    8. 'return' → logprob: -14.87503719329834
    9. '```' → logprob: -14.87503719329834
    10. ' def' → logprob: -15.12503719329834

Token 191: ' Returns' (ID: 9609)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012626546435058117
    2. 'return' → logprob: -4.762626647949219
    3. '"""
' → logprob: -6.762626647949219
    4. ' return' → logprob: -7.387626647949219
    5. 'ligne' → logprob: -7.637626647949219
    6. 'def' → logprob: -7.762626647949219
    7. '"""' → logprob: -8.012626647949219
    8. 'line' → logprob: -8.762626647949219
    9. ' line' → logprob: -8.762626647949219
    10. '
' → logprob: -9.512626647949219

Token 192: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.8158854842185974
    2. ' :' → logprob: -0.8158854842185974
    3. '[List' → logprob: -3.565885543823242
    4. 'List' → logprob: -3.690885543823242
    5. ' List' → logprob: -4.065885543823242
    6. ':list' → logprob: -4.440885543823242
    7. ' []' → logprob: -4.565885543823242
    8. ' list' → logprob: -4.940885543823242
    9. '[]' → logprob: -5.315885543823242
    10. '[' → logprob: -6.440885543823242

Token 193: '       ' (ID: 309)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.2684011161327362
    2. '   ' → logprob: -2.1434011459350586
    3. ' List' → logprob: -2.2684011459350586
    4. 'List' → logprob: -4.518401145935059
    5. 'list' → logprob: -5.768401145935059
    6. '    ' → logprob: -7.768401145935059
    7. ' [' → logprob: -9.143401145935059
    8. '[List' → logprob: -9.893401145935059
    9. ' []' → logprob: -10.643401145935059
    10. '       ' → logprob: -11.893401145935059

Token 194: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' (adapté à ' list') → logprob: -0.12772168219089508
    2. 'List' → logprob: -2.3777217864990234
    3. ' list' → logprob: -3.6277217864990234
    4. ' List' → logprob: -7.877721786499023
    5. '   ' → logprob: -8.627721786499023
    6. '[List' → logprob: -13.127721786499023
    7. '[list' → logprob: -13.752721786499023
    8. 'Liste' → logprob: -14.877721786499023
    9. 'liste' → logprob: -15.127721786499023
    10. '```' → logprob: -15.127721786499023

Token 195: '[int' (ID: 40124)
  Prédit: '[int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[int' → logprob: -1.6047699318733066e-05
    2. '<int' → logprob: -11.250016212463379
    3. ' of' → logprob: -13.250016212463379
    4. 'int' → logprob: -14.125016212463379
    5. '[' → logprob: -15.375016212463379
    6. '(int' → logprob: -15.875016212463379
    7. '[Int' → logprob: -17.000015258789062
    8. ':' → logprob: -17.125015258789062
    9. '```' → logprob: -17.125015258789062
    10. 'of' → logprob: -17.375015258789062

Token 196: ']:' (ID: 12433)
  Prédit: ']:'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']:' → logprob: -0.25224483013153076
    2. ']' → logprob: -1.5022448301315308
    3. '[int' → logprob: -8.25224494934082
    4. ']:
' → logprob: -10.37724494934082
    5. ']:
' → logprob: -11.75224494934082
    6. ']int' → logprob: -12.00224494934082
    7. ']>' → logprob: -13.00224494934082
    8. ' ]' → logprob: -13.50224494934082
    9. ']):' → logprob: -13.75224494934082
    10. ']:

' → logprob: -13.87724494934082

Token 197: ' Liste' (ID: 61030)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7936194539070129
    2. ' La' → logprob: -1.2936193943023682
    3. 'La' → logprob: -1.9186193943023682
    4. ' list' → logprob: -3.168619394302368
    5. '[int' → logprob: -3.168619394302368
    6. 'List' → logprob: -4.418619632720947
    7. ' la' → logprob: -4.668619632720947
    8. ' Liste' → logprob: -5.043619632720947
    9. 'Liste' → logprob: -5.543619632720947
    10. 'list' → logprob: -5.793619632720947

Token 198: ' des' (ID: 731)
  Prédit: '[int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[int' → logprob: -0.03905683383345604
    2. ' des' → logprob: -3.2890567779541016
    3. ' d' → logprob: -7.664056777954102
    4. '<int' → logprob: -8.414056777954102
    5. ' of' → logprob: -8.789056777954102
    6. 'des' → logprob: -9.664056777954102
    7. '[' → logprob: -10.289056777954102
    8. 'd' → logprob: -10.914056777954102
    9. '<|end|>' → logprob: -11.164056777954102
    10. '[Int' → logprob: -11.414056777954102

Token 199: ' ent' (ID: 1121)
  Prédit: ' ent'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ent' → logprob: -0.3524724841117859
    2. 'ent' → logprob: -1.3524725437164307
    3. 'int' → logprob: -3.4774725437164307
    4. ' int' → logprob: -5.102472305297852
    5. ' integers' → logprob: -7.602472305297852
    6. ' nombres' → logprob: -7.602472305297852
    7. 'ints' → logprob: -8.227472305297852
    8. ' entier' → logprob: -9.477472305297852
    9. 'inte' → logprob: -9.977472305297852
    10. ''ent' → logprob: -10.602472305297852

Token 200: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -4.246537173457909e-06
    2. 'i' → logprob: -13.750003814697266
    3. 'ers' → logprob: -14.000003814697266
    4. '   ' → logprob: -14.125003814697266
    5. 'ier' → logprob: -14.250003814697266
    6. '       ' → logprob: -15.250003814697266
    7. '```' → logprob: -15.250003814697266
    8. 'I' → logprob: -15.500003814697266
    9. 'ières' → logprob: -16.250003814697266
    10. 'gers' → logprob: -17.375003814697266

Token 201: ' lus' (ID: 54762)
  Prédit: ' des'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.47580599784851074
    2. ' lus' → logprob: -2.1008059978485107
    3. 'ent' → logprob: -2.6008059978485107
    4. ' d' → logprob: -3.3508059978485107
    5. '   ' → logprob: -3.4758059978485107
    6. ']' → logprob: -3.8508059978485107
    7. '```' → logprob: -3.9758059978485107
    8. '"""' → logprob: -4.22580623626709
    9. 'import' → logprob: -5.22580623626709
    10. '"""
' → logprob: -5.22580623626709

Token 202: ' depuis' (ID: 16277)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04270579293370247
    2. ':' → logprob: -4.79270601272583
    3. 'def' → logprob: -4.91770601272583
    4. ':
' → logprob: -4.91770601272583
    5. ']' → logprob: -5.04270601272583
    6. '
' → logprob: -5.66770601272583
    7. ' ' → logprob: -6.16770601272583
    8. '```' → logprob: -6.54270601272583
    9. ' =' → logprob: -6.91770601272583
    10. '    
' → logprob: -7.16770601272583

Token 203: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.16887031495571136
    2. ' l' → logprob: -1.9188703298568726
    3. '   ' → logprob: -5.418870449066162
    4. 'la' → logprob: -6.793870449066162
    5. 'input' → logprob: -6.918870449066162
    6. ' input' → logprob: -7.043870449066162
    7. ' la' → logprob: -7.043870449066162
    8. ' ' → logprob: -9.918869972229004
    9. ' ' → logprob: -9.918869972229004
    10. '	l' → logprob: -10.043869972229004

Token 204: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.003465713933110237
    2. 'entrée' → logprob: -5.87846565246582
    3. ''' → logprob: -8.37846565246582
    4. 'a' → logprob: -8.87846565246582
    5. ''utilisateur' → logprob: -9.00346565246582
    6. 'e' → logprob: -9.75346565246582
    7. '’entrée' → logprob: -10.25346565246582
    8. ' entrée' → logprob: -10.50346565246582
    9. ''ent' → logprob: -10.75346565246582
    10. 'input' → logprob: -12.12846565246582

Token 205: ' standard' (ID: 7024)
  Prédit: ' standard'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' standard' → logprob: -0.0381726510822773
    2. 'standard' → logprob: -3.288172721862793
    3. '   ' → logprob: -9.538172721862793
    4. 'Standard' → logprob: -11.038172721862793
    5. '_standard' → logprob: -11.413172721862793
    6. ' utilisateur' → logprob: -11.538172721862793
    7. '()' → logprob: -12.038172721862793
    8. ' стандарт' → logprob: -12.663172721862793
    9. ' ' → logprob: -12.788172721862793
    10. '    
' → logprob: -13.538172721862793

Token 206: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.013356568291783333
    2. '
' → logprob: -5.263356685638428
    3. ']' → logprob: -5.513356685638428
    4. 'def' → logprob: -6.388356685638428
    5. ']
' → logprob: -7.138356685638428
    6. '"""
' → logprob: -7.263356685638428
    7. ')' → logprob: -8.38835620880127
    8. '```' → logprob: -9.13835620880127
    9. '"""' → logprob: -9.13835620880127
    10. '    ' → logprob: -9.26335620880127

Token 207: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00020139472326263785
    2. '"""' → logprob: -8.875201225280762
    3. '"""
' → logprob: -9.875201225280762
    4. '```' → logprob: -12.375201225280762
    5. 'def' → logprob: -13.125201225280762
    6. '
' → logprob: -13.625201225280762
    7. ' """
' → logprob: -13.875201225280762
    8. ' """' → logprob: -14.875201225280762
    9. ')' → logprob: -14.875201225280762
    10. '""' → logprob: -15.000201225280762

Token 208: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00015157493180595338
    2. '"""' → logprob: -9.000151634216309
    3. '"""
' (adapté à ' """
') → logprob: -11.000151634216309
    4. '
' → logprob: -12.625151634216309
    5. 'def' → logprob: -13.125151634216309
    6. ' """' → logprob: -13.250151634216309
    7. '```' → logprob: -13.500151634216309
    8. ' """
' → logprob: -13.750151634216309
    9. ')' → logprob: -13.875151634216309
    10. '    ' → logprob: -15.125151634216309

Token 209: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.001295000547543168
    2. 'return' → logprob: -7.75129508972168
    3. ' line' → logprob: -7.75129508972168
    4. 'line' → logprob: -7.87629508972168
    5. ' return' → logprob: -11.00129508972168
    6. 'input' → logprob: -11.12629508972168
    7. 'import' → logprob: -12.12629508972168
    8. 'try' → logprob: -12.50129508972168
    9. 's' → logprob: -12.75129508972168
    10. 'ligne' → logprob: -12.75129508972168

Token 210: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.47439441084861755
    2. 'line' → logprob: -1.47439444065094
    3. ' line' → logprob: -2.5993943214416504
    4. ' return' → logprob: -2.8493943214416504
    5. '   ' → logprob: -4.34939432144165
    6. 'input' → logprob: -6.09939432144165
    7. 'user' → logprob: -7.72439432144165
    8. 'ligne' → logprob: -7.72439432144165
    9. ' ligne' → logprob: -8.724394798278809
    10. ' input' → logprob: -8.849394798278809

Token 211: ' Dem' (ID: 9458)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.34801414608955383
    2. 'return' → logprob: -1.3480141162872314
    3. ' line' → logprob: -3.9730141162872314
    4. 'input' → logprob: -4.8480143547058105
    5. ' return' → logprob: -5.5980143547058105
    6. 'ligne' → logprob: -5.9730143547058105
    7. 'user' → logprob: -7.7230143547058105
    8. ' ligne' → logprob: -9.098013877868652
    9. 'entry' → logprob: -9.348013877868652
    10. 'data' → logprob: -9.348013877868652

Token 212: 'ander' (ID: 9330)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.8663800358772278
    2. '   ' → logprob: -1.491379976272583
    3. ' line' → logprob: -2.366379976272583
    4. 'ande' → logprob: -2.616379976272583
    5. 'def' → logprob: -2.741379976272583
    6. 'e' → logprob: -3.491379976272583
    7. 'import' → logprob: -4.116380214691162
    8. 'ander' → logprob: -4.616380214691162
    9. 'ligne' → logprob: -4.616380214691162
    10. 'ine' → logprob: -4.741380214691162

Token 213: ' la' (ID: 557)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7805715203285217
    2. '()' → logprob: -1.030571460723877
    3. 'input' → logprob: -2.405571460723877
    4. 'user' → logprob: -2.655571460723877
    5. 'l' → logprob: -5.405571460723877
    6. 'line' → logprob: -5.655571460723877
    7. 's' → logprob: -5.780571460723877
    8. '(' → logprob: -6.155571460723877
    9. 'return' → logprob: -6.655571460723877
    10. 'une' → logprob: -6.780571460723877

Token 214: ' sais' (ID: 30010)
  Prédit: 'ligne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ligne' → logprob: -0.5536769032478333
    2. 'entrée' → logprob: -1.6786768436431885
    3. 'input' → logprob: -1.9286768436431885
    4. 'line' → logprob: -2.9286768436431885
    5. ' ligne' → logprob: -4.428677082061768
    6. 'l' → logprob: -4.428677082061768
    7. 's' → logprob: -4.803677082061768
    8. 'ent' → logprob: -6.428677082061768
    9. '   ' → logprob: -6.428677082061768
    10. 'user' → logprob: -6.553677082061768

Token 215: 'ie' (ID: 396)
  Prédit: 'ie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ie' → logprob: -0.005505287554115057
    2. 'e' → logprob: -5.255505084991455
    3. 'ue' → logprob: -9.755505561828613
    4. 'te' → logprob: -9.755505561828613
    5. 'ise' → logprob: -10.255505561828613
    6. 'i' → logprob: -10.505505561828613
    7. '   ' → logprob: -10.755505561828613
    8. 'sie' → logprob: -10.880505561828613
    9. 'ine' → logprob: -11.130505561828613
    10. 'is' → logprob: -11.505505561828613

Token 216: ' utilisateur' (ID: 115595)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012015541084110737
    2. 'line' → logprob: -5.137015342712402
    3. 'user' → logprob: -5.887015342712402
    4. 'input' → logprob: -6.887015342712402
    5. ' line' → logprob: -7.387015342712402
    6. 'return' → logprob: -7.387015342712402
    7. '()' → logprob: -8.262015342712402
    8. 's' → logprob: -8.262015342712402
    9. 'ligne' → logprob: -8.512015342712402
    10. '(' → logprob: -9.762015342712402

Token 217: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.023974213749170303
    2. 'input' → logprob: -4.648974418640137
    3. 'line' → logprob: -5.273974418640137
    4. 'return' → logprob: -5.273974418640137
    5. ' line' → logprob: -6.273974418640137
    6. 'user' → logprob: -7.148974418640137
    7. 's' → logprob: -8.148974418640137
    8. 'ligne' → logprob: -8.523974418640137
    9. ' =' → logprob: -8.898974418640137
    10. ' return' → logprob: -9.148974418640137

Token 218: ' décou' (ID: 68302)
  Prédit: ' line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' line' → logprob: -0.050085410475730896
    2. 'line' → logprob: -3.3000853061676025
    3. ' ligne' → logprob: -5.550085544586182
    4. ' input' → logprob: -6.050085544586182
    5. ' user' → logprob: -6.550085544586182
    6. ' return' → logprob: -6.800085544586182
    7. 'input' → logprob: -7.050085544586182
    8. 'ligne' → logprob: -7.550085544586182
    9. 'return' → logprob: -7.800085544586182
    10. 'user' → logprob: -7.925085544586182

Token 219: 'per' (ID: 543)
  Prédit: 'per'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'per' → logprob: -0.0016412617405876517
    2. 'p' → logprob: -6.501641273498535
    3. 'page' → logprob: -9.126641273498535
    4. 'pe' → logprob: -11.126641273498535
    5. 'pper' → logprob: -13.126641273498535
    6. ' per' → logprob: -13.251641273498535
    7. '   ' → logprob: -13.626641273498535
    8. 'pier' → logprob: -13.751641273498535
    9. 'uper' → logprob: -13.876641273498535
    10. 'v' → logprob: -14.001641273498535

Token 220: ' la' (ID: 557)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.011064444668591022
    2. '   ' → logprob: -4.761064529418945
    3. 'input' → logprob: -7.136064529418945
    4. 'line' → logprob: -7.636064529418945
    5. 'la' → logprob: -8.261064529418945
    6. '().' → logprob: -8.261064529418945
    7. '(' → logprob: -8.886064529418945
    8. 's' → logprob: -9.136064529418945
    9. '(input' → logprob: -9.511064529418945
    10. ' la' → logprob: -9.761064529418945

Token 221: ' chaîne' (ID: 89288)
  Prédit: 'ligne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ligne' → logprob: -0.8022076487541199
    2. 'input' → logprob: -1.0522077083587646
    3. 'chaine' → logprob: -2.5522077083587646
    4. ' ligne' → logprob: -2.6772077083587646
    5. 'entrée' → logprob: -3.8022077083587646
    6. ' chaîne' → logprob: -4.3022074699401855
    7. ' input' → logprob: -4.6772074699401855
    8. 'line' → logprob: -5.5522074699401855
    9. 'l' → logprob: -6.0522074699401855
    10. ' chaine' → logprob: -6.4272074699401855

Token 222: ' par' (ID: 686)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008036931976675987
    2. '()' → logprob: -5.133037090301514
    3. 's' → logprob: -7.133037090301514
    4. 'input' → logprob: -7.383037090301514
    5. 'line' → logprob: -8.508036613464355
    6. 'user' → logprob: -8.758036613464355
    7. '(' → logprob: -10.133036613464355
    8. ' =' → logprob: -10.258036613464355
    9. '       ' → logprob: -10.258036613464355
    10. ',' → logprob: -10.633036613464355

Token 223: ' espaces' (ID: 98361)
  Prédit: ' espaces'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' espaces' → logprob: -0.0887833908200264
    2. ' des' → logprob: -2.9637835025787354
    3. ' espace' → logprob: -4.463783264160156
    4. 'spaces' → logprob: -5.213783264160156
    5. ' spaces' → logprob: -5.463783264160156
    6. 'esp' → logprob: -5.963783264160156
    7. 'des' → logprob: -5.963783264160156
    8. ''esp' → logprob: -6.588783264160156
    9. ' les' → logprob: -6.963783264160156
    10. 'les' → logprob: -7.088783264160156

Token 224: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00039015832589939237
    2. ',' → logprob: -8.87539005279541
    3. 'input' → logprob: -9.00039005279541
    4. 'line' → logprob: -10.00039005279541
    5. ' line' → logprob: -10.62539005279541
    6. 'return' → logprob: -11.25039005279541
    7. '    
' → logprob: -11.50039005279541
    8. 's' → logprob: -12.00039005279541
    9. 'user' → logprob: -12.12539005279541
    10. ' =' → logprob: -12.50039005279541

Token 225: ' 
' (ID: 793)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.24609264731407166
    2. ' return' → logprob: -2.7460925579071045
    3. ' convertir' → logprob: -3.2460925579071045
    4. ' puis' → logprob: -3.4960925579071045
    5. ' line' → logprob: -4.121092796325684
    6. 'return' → logprob: -4.371092796325684
    7. ' convert' → logprob: -4.871092796325684
    8. ' map' → logprob: -4.996092796325684
    9. ' integers' → logprob: -4.996092796325684
    10. ' tokens' → logprob: -5.371092796325684

Token 226: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.028797369450330734
    2. ' line' → logprob: -4.778797149658203
    3. ' puis' → logprob: -5.278797149658203
    4. ' return' → logprob: -5.528797149658203
    5. 'return' → logprob: -5.903797149658203
    6. 'line' → logprob: -6.278797149658203
    7. 'split' → logprob: -7.153797149658203
    8. ' input' → logprob: -7.278797149658203
    9. 'input' → logprob: -7.528797149658203
    10. 'convert' → logprob: -7.778797149658203

Token 227: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -1.1573326587677002
    2. '   ' → logprob: -1.4073326587677002
    3. 'line' → logprob: -2.2823326587677
    4. 'l' → logprob: -2.5323326587677
    5. ' return' → logprob: -2.7823326587677
    6. ' line' → logprob: -3.0323326587677
    7. 'ligne' → logprob: -3.2823326587677
    8. 'split' → logprob: -3.9073326587677
    9. 'entr' → logprob: -4.407332420349121
    10. 'input' → logprob: -4.407332420349121

Token 228: ' convertir' (ID: 79223)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.23910661041736603
    2. ' return' → logprob: -2.4891066551208496
    3. '   ' → logprob: -2.9891066551208496
    4. 'line' → logprob: -3.9891066551208496
    5. 'l' → logprob: -4.36410665512085
    6. 'ent' → logprob: -4.48910665512085
    7. ' integers' → logprob: -5.23910665512085
    8. ' line' → logprob: -5.36410665512085
    9. 'convert' → logprob: -5.36410665512085
    10. 'entr' → logprob: -5.73910665512085

Token 229: ' chaque' (ID: 21194)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.689506471157074
    2. 'la' → logprob: -1.4395065307617188
    3. '   ' → logprob: -1.6895065307617188
    4. 'l' → logprob: -3.5645065307617188
    5. '(' → logprob: -4.314506530761719
    6. 'input' → logprob: -4.439506530761719
    7. ' input' → logprob: -5.939506530761719
    8. '()' → logprob: -6.064506530761719
    9. 'int' → logprob: -6.314506530761719
    10. ' chaque' → logprob: -6.439506530761719

Token 230: ' élément' (ID: 99627)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.46709108352661133
    2. 'element' → logprob: -2.0920910835266113
    3. 'int' → logprob: -2.8420910835266113
    4. 'token' → logprob: -3.0920910835266113
    5. ' token' → logprob: -3.3420910835266113
    6. 'x' → logprob: -3.7170910835266113
    7. 'part' → logprob: -3.7170910835266113
    8. ' element' → logprob: -3.8420910835266113
    9. 'elem' → logprob: -4.092091083526611
    10. ' élément' → logprob: -4.092091083526611

Token 231: ' en' (ID: 469)
  Prédit: ' en'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.23801890015602112
    2. 'en' → logprob: -1.6130188703536987
    3. '   ' → logprob: -4.863018989562988
    4. '(en' → logprob: -6.613018989562988
    5. '(' → logprob: -6.988018989562988
    6. 'int' → logprob: -7.488018989562988
    7. '()' → logprob: -7.738018989562988
    8. '(int' → logprob: -8.238018989562988
    9. ',' → logprob: -8.488018989562988
    10. 'map' → logprob: -8.613018989562988

Token 232: ' entier' (ID: 80473)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.03641216829419136
    2. ' int' → logprob: -3.536412239074707
    3. 'ent' → logprob: -5.036412239074707
    4. ' ent' → logprob: -9.786412239074707
    5. 'ints' → logprob: -10.286412239074707
    6. ' entier' → logprob: -10.286412239074707
    7. 'inte' → logprob: -11.536412239074707
    8. ' integers' → logprob: -12.661412239074707
    9. '[int' → logprob: -13.286412239074707
    10. '(int' → logprob: -13.536412239074707

Token 233: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.001996323699131608
    2. 'return' → logprob: -6.5019965171813965
    3. ',' → logprob: -8.126996040344238
    4. ' return' → logprob: -9.251996040344238
    5. '    
' → logprob: -10.376996040344238
    6. ' =' → logprob: -10.876996040344238
    7. '    ' → logprob: -12.001996040344238
    8. ' et' → logprob: -12.126996040344238
    9. 'def' → logprob: -12.251996040344238
    10. '
' → logprob: -12.251996040344238

Token 234: ' et' (ID: 859)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3321884572505951
    2. ' et' → logprob: -2.582188367843628
    3. ' puis' → logprob: -2.582188367843628
    4. ' return' → logprob: -2.957188367843628
    5. ' and' → logprob: -3.582188367843628
    6. 'return' → logprob: -4.082188606262207
    7. 'et' → logprob: -4.832188606262207
    8. ' map' → logprob: -4.832188606262207
    9. ' retourner' → logprob: -4.957188606262207
    10. 'map' → logprob: -6.207188606262207

Token 235: ' construire' (ID: 92473)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.31935471296310425
    2. 'return' → logprob: -1.319354772567749
    3. ' retourner' → logprob: -5.19435453414917
    4. '[' → logprob: -8.944355010986328
    5. '   ' → logprob: -8.944355010986328
    6. ' retour' → logprob: -9.444355010986328
    7. ' convertir' → logprob: -9.944355010986328
    8. ' [' → logprob: -10.069355010986328
    9. ' revenir' → logprob: -11.069355010986328
    10. ' retourne' → logprob: -11.194355010986328

Token 236: ' la' (ID: 557)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8298941254615784
    2. ' la' → logprob: -1.2048940658569336
    3. '[' → logprob: -1.8298940658569336
    4. 'list' → logprob: -3.3298940658569336
    5. ' list' → logprob: -3.7048940658569336
    6. ' [' → logprob: -4.079894065856934
    7. 'la' → logprob: -4.454894065856934
    8. ' une' → logprob: -5.454894065856934
    9. '[int' → logprob: -5.954894065856934
    10. '[
' → logprob: -6.579894065856934

Token 237: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.368699312210083
    2. 'liste' → logprob: -1.618699312210083
    3. ' list' → logprob: -2.868699312210083
    4. 'list' → logprob: -2.993699312210083
    5. '[' → logprob: -5.993699073791504
    6. ' [' → logprob: -7.743699073791504
    7. 'a' → logprob: -9.243699073791504
    8. '[int' → logprob: -9.618699073791504
    9. '   ' → logprob: -9.993699073791504
    10. '[
' → logprob: -10.243699073791504

Token 238: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0003199730417691171
    2. 'return' → logprob: -9.000320434570312
    3. '    
' → logprob: -9.500320434570312
    4. ' return' → logprob: -10.000320434570312
    5. 'def' → logprob: -10.500320434570312
    6. '
' → logprob: -11.875320434570312
    7. 'input' → logprob: -12.000320434570312
    8. ' line' → logprob: -12.125320434570312
    9. '       ' → logprob: -12.375320434570312
    10. '   ' → logprob: -12.500320434570312

Token 239: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02106776088476181
    2. 'return' → logprob: -4.2710676193237305
    3. ' return' → logprob: -5.0210676193237305
    4. ' line' → logprob: -8.52106761932373
    5. 'line' → logprob: -10.52106761932373
    6. 'input' → logprob: -10.64606761932373
    7. 'user' → logprob: -11.64606761932373
    8. ' input' → logprob: -12.14606761932373
    9. 'def' → logprob: -12.14606761932373
    10. '    
' → logprob: -12.52106761932373

Token 240: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.11597403883934021
    2. '   ' → logprob: -2.740973949432373
    3. ' return' → logprob: -3.115973949432373
    4. 'line' → logprob: -7.990973949432373
    5. 'input' → logprob: -8.615974426269531
    6. ' line' → logprob: -9.615974426269531
    7. 'user' → logprob: -9.990974426269531
    8. ' input' → logprob: -11.865974426269531
    9. '    
' → logprob: -12.240974426269531
    10. ' user' → logprob: -12.990974426269531

Token 241: ' list' (ID: 1562)
  Prédit: ' list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.5864886045455933
    2. 'list' → logprob: -0.8364886045455933
    3. '[list' → logprob: -4.586488723754883
    4. ' [' → logprob: -8.461488723754883
    5. '[' → logprob: -9.336488723754883
    6. '[int' → logprob: -12.836488723754883
    7. '[input' → logprob: -13.586488723754883
    8. '[List' → logprob: -14.836488723754883
    9. '(list' → logprob: -15.086488723754883
    10. '=list' → logprob: -15.586488723754883

Token 242: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -2.236549335066229e-05
    2. '(' → logprob: -10.750021934509277
    3. 'map' → logprob: -14.125021934509277
    4. '(int' → logprob: -16.625022888183594
    5. '.map' → logprob: -18.500022888183594
    6. '(
' → logprob: -19.375022888183594
    7. '	map' → logprob: -19.500022888183594
    8. ' map' → logprob: -19.625022888183594
    9. '_map' → logprob: -20.375022888183594
    10. ',map' → logprob: -20.500022888183594

Token 243: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.062081288546323776
    2. '(' → logprob: -2.8120813369750977
    3. 'int' → logprob: -9.687081336975098
    4. '(
' → logprob: -10.187081336975098
    5. ' int' → logprob: -12.187081336975098
    6. '<int' → logprob: -12.312081336975098
    7. '[int' → logprob: -14.062081336975098
    8. ' (' → logprob: -14.187081336975098
    9. '=int' → logprob: -14.187081336975098
    10. '(lambda' → logprob: -14.687081336975098

Token 244: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.890230655670166
    2. ',' → logprob: -1.140230655670166
    3. ',input' → logprob: -1.515230655670166
    4. 'input' → logprob: -3.015230655670166
    5. '(' → logprob: -7.390230655670166
    6. ' input' → logprob: -9.015230178833008
    7. ' ,' → logprob: -9.390230178833008
    8. '   ' → logprob: -10.390230178833008
    9. ' (' → logprob: -10.390230178833008
    10. '<input' → logprob: -12.765230178833008

Token 245: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.0788949653506279
    2. ' input' → logprob: -2.578894853591919
    3. '   ' → logprob: -12.32889461517334
    4. '(input' → logprob: -14.45389461517334
    5. '	input' → logprob: -16.328895568847656
    6. '<input' → logprob: -16.578895568847656
    7. ' ' → logprob: -17.078895568847656
    8. ',input' → logprob: -17.953895568847656
    9. '=input' → logprob: -17.953895568847656
    10. '.input' → logprob: -18.828895568847656

Token 246: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -4.596781946020201e-05
    2. '()' → logprob: -10.000045776367188
    3. ' ().' → logprob: -15.000045776367188
    4. '()
' → logprob: -16.000045776367188
    5. '()))' → logprob: -19.500045776367188
    6. '(' → logprob: -19.750045776367188
    7. '().
' → logprob: -20.000045776367188
    8. '())))' → logprob: -20.000045776367188
    9. '   ' → logprob: -20.250045776367188
    10. '()

' → logprob: -20.375045776367188

Token 247: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.10020667314529419
    2. 'strip' → logprob: -2.3502066135406494
    3. ' split' → logprob: -17.47520637512207
    4. 'rstrip' → logprob: -17.47520637512207
    5. ' strip' → logprob: -19.10020637512207
    6. 'spl' → logprob: -19.22520637512207
    7. '(split' → logprob: -19.47520637512207
    8. '.strip' → logprob: -19.72520637512207
    9. '.split' → logprob: -19.85020637512207
    10. '(strip' → logprob: -22.47520637512207

Token 248: '()))

' (ID: 125972)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.030812326818704605
    2. '()' → logprob: -3.5308122634887695
    3. '())))' → logprob: -7.4058122634887695
    4. '())' → logprob: -8.28081226348877
    5. '))' → logprob: -8.78081226348877
    6. '(' → logprob: -10.78081226348877
    7. '()))
' → logprob: -11.15581226348877
    8. ')))' → logprob: -12.53081226348877
    9. '()));' → logprob: -12.65581226348877
    10. '()))

' → logprob: -14.03081226348877

Token 249: '#' (ID: 2)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.07803156226873398
    2. '
' → logprob: -3.203031539916992
    3. '<|end|>' → logprob: -3.828031539916992
    4. 'main' → logprob: -4.828031539916992
    5. '```' → logprob: -5.953031539916992
    6. '\n' → logprob: -7.328031539916992
    7. '#' → logprob: -7.453031539916992
    8. ' if' → logprob: -7.578031539916992
    9. '<|end|>' → logprob: -9.578031539916992
    10. '

' → logprob: -10.328031539916992

Token 250: ' Ex' (ID: 1771)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.5332478142227046e-05
    2. 'main' → logprob: -11.375015258789062
    3. ' if' → logprob: -12.500015258789062
    4. '
' → logprob: -17.000015258789062
    5. '```' → logprob: -17.000015258789062
    6. '#' → logprob: -17.625015258789062
    7. 'If' → logprob: -18.500015258789062
    8. '

' → logprob: -19.875015258789062
    9. '\n' → logprob: -19.875015258789062
    10. '(main' → logprob: -20.000015258789062

Token 251: 'éc' (ID: 5675)
  Prédit: 'ecute'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ecute' → logprob: -0.5289613008499146
    2. 'if' → logprob: -1.0289613008499146
    3. 'ec' → logprob: -3.278961181640625
    4. 'éc' → logprob: -5.278961181640625
    5. 'ecut' → logprob: -5.528961181640625
    6. 'e' → logprob: -5.528961181640625
    7. 'ecution' → logprob: -6.653961181640625
    8. 'ecu' → logprob: -7.403961181640625
    9. 'ecutable' → logprob: -8.153961181640625
    10. 'port' → logprob: -9.028961181640625

Token 252: 'uter' (ID: 23469)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.02739246003329754
    2. 'ecute' → logprob: -3.9023923873901367
    3. 'ec' → logprob: -5.277392387390137
    4. 'éc' → logprob: -7.152392387390137
    5. 'ecut' → logprob: -7.777392387390137
    6. 'e' → logprob: -8.777392387390137
    7. 'ecution' → logprob: -9.152392387390137
    8. ' if' → logprob: -9.527392387390137
    9. 'ecu' → logprob: -10.402392387390137
    10. 'emple' → logprob: -10.527392387390137

Token 253: ' la' (ID: 557)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.014922459609806538
    2. 'main' → logprob: -4.264922618865967
    3. ' main' → logprob: -7.764922618865967
    4. ' if' → logprob: -8.014922142028809
    5. '__' → logprob: -13.264922142028809
    6. '_main' → logprob: -13.764922142028809
    7. '(main' → logprob: -14.139922142028809
    8. '
' → logprob: -16.264923095703125
    9. '	main' → logprob: -16.764923095703125
    10. '```' → logprob: -17.264923095703125

Token 254: ' fonction' (ID: 17610)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.3720480799674988
    2. ' main' → logprob: -1.7470481395721436
    3. 'if' → logprob: -1.9970481395721436
    4. ' if' → logprob: -7.9970479011535645
    5. '__' → logprob: -8.122048377990723
    6. ' __' → logprob: -12.122048377990723
    7. '
' → logprob: -12.997048377990723
    8. '_main' → logprob: -13.122048377990723
    9. '```' → logprob: -13.122048377990723
    10. '_' → logprob: -13.247048377990723

Token 255: ' principale' (ID: 68926)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.052188336849212646
    2. 'main' → logprob: -3.0521883964538574
    3. ' if' → logprob: -6.177188396453857
    4. ' main' → logprob: -6.677188396453857
    5. '

' → logprob: -8.9271879196167
    6. '
' → logprob: -9.0521879196167
    7. '(main' → logprob: -12.1771879196167
    8. '```' → logprob: -13.9271879196167
    9. '_main' → logprob: -14.0521879196167
    10. '
    
' → logprob: -15.0521879196167

Token 256: ' si' (ID: 1784)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.03500974178314209
    2. 'if' → logprob: -3.5350098609924316
    3. '

' → logprob: -5.285009860992432
    4. 'main' → logprob: -8.785009384155273
    5. '
' → logprob: -10.660009384155273
    6. '\n' → logprob: -14.785009384155273
    7. '
    
' → logprob: -14.785009384155273
    8. ' 
' → logprob: -15.035009384155273
    9. '  
' → logprob: -15.285009384155273
    10. ' if' → logprob: -15.285009384155273

Token 257: ' ce' (ID: 2357)
  Prédit: ' __'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.31326326727867126
    2. '__' → logprob: -1.3132632970809937
    3. ' ' → logprob: -13.563262939453125
    4. 'name' → logprob: -15.563262939453125
    5. ' ' → logprob: -16.438262939453125
    6. '/__' → logprob: -16.938262939453125
    7. '```' → logprob: -17.188262939453125
    8. '_name' → logprob: -17.438262939453125
    9. '___' → logprob: -18.688262939453125
    10. ' "__' → logprob: -18.688262939453125

Token 258: ' fichier' (ID: 69637)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.06174536049365997
    2. ' __' → logprob: -2.9367454051971436
    3. '_' → logprob: -5.6867451667785645
    4. ' ==' → logprob: -6.9367451667785645
    5. '==' → logprob: -7.3117451667785645
    6. 'name' → logprob: -8.061745643615723
    7. '  ' → logprob: -8.311745643615723
    8. 'n' → logprob: -8.311745643615723
    9. '_name' → logprob: -8.311745643615723
    10. ' ' → logprob: -8.561745643615723

Token 259: ' est' (ID: 893)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.27147915959358215
    2. ' __' → logprob: -1.6464791297912598
    3. ' ==' → logprob: -3.5214791297912598
    4. '==' → logprob: -4.27147912979126
    5. 'name' → logprob: -7.14647912979126
    6. 'if' → logprob: -8.646479606628418
    7. '.__' → logprob: -9.146479606628418
    8. '_name' → logprob: -9.396479606628418
    9. ' is' → logprob: -9.521479606628418
    10. 'est' → logprob: -9.771479606628418

Token 260: ' exécut' (ID: 165350)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.38692420721054077
    2. ' __' → logprob: -1.1369242668151855
    3. ' "__' → logprob: -10.636923789978027
    4. 'name' → logprob: -11.011923789978027
    5. '_name' → logprob: -12.886923789978027
    6. ' exécut' → logprob: -13.011923789978027
    7. ' run' → logprob: -13.136923789978027
    8. 'import' → logprob: -14.136923789978027
    9. ' executed' → logprob: -14.636923789978027
    10. ' '__' → logprob: -14.636923789978027

Token 261: 'é' (ID: 377)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.3666593134403229
    2. ' en' → logprob: -1.2416592836380005
    3. 'é' → logprob: -5.866659164428711
    4. 'd' → logprob: -5.866659164428711
    5. ' __' → logprob: -5.866659164428711
    6. ' as' → logprob: -5.991659164428711
    7. ' comme' → logprob: -6.741659164428711
    8. 'if' → logprob: -6.866659164428711
    9. 'dans' → logprob: -7.116659164428711
    10. ' directement' → logprob: -7.491659164428711

Token 262: ' comme' (ID: 7971)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.19097237288951874
    2. ' en' → logprob: -2.315972328186035
    3. ' __' → logprob: -2.815972328186035
    4. ' directement' → logprob: -5.440972328186035
    5. 'direct' → logprob: -5.815972328186035
    6. 'if' → logprob: -5.940972328186035
    7. ' as' → logprob: -6.565972328186035
    8. ' directly' → logprob: -6.940972328186035
    9. '```' → logprob: -7.440972328186035
    10. 'dans' → logprob: -7.940972328186035

Token 263: ' script' (ID: 11713)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.6934838891029358
    2. ' __' → logprob: -0.6934838891029358
    3. ' le' → logprob: -8.44348430633545
    4. ' un' → logprob: -10.19348430633545
    5. ' script' → logprob: -10.44348430633545
    6. ' main' → logprob: -10.81848430633545
    7. '_le' → logprob: -11.69348430633545
    8. ' ' → logprob: -12.31848430633545
    9. 'le' → logprob: -12.69348430633545
    10. ' "__' → logprob: -12.69348430633545

Token 264: ' principal' (ID: 10589)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.07924281060695648
    2. 'if' → logprob: -2.829242706298828
    3. '

' → logprob: -4.079242706298828
    4. ' if' → logprob: -8.829242706298828
    5. '
' → logprob: -10.454242706298828
    6. '\n' → logprob: -11.579242706298828
    7. '
    
' → logprob: -11.704242706298828
    8. ' 
' → logprob: -12.329242706298828
    9. '  
' → logprob: -12.829242706298828
    10. '    
' → logprob: -12.829242706298828

Token 265: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.03375024348497391
    2. 'if' → logprob: -3.533750295639038
    3. '

' → logprob: -5.533750057220459
    4. '
' → logprob: -11.033750534057617
    5. ' if' → logprob: -11.533750534057617
    6. '\n' → logprob: -11.658750534057617
    7. '  
' → logprob: -13.408750534057617
    8. ' 
' → logprob: -13.408750534057617
    9. '
    
' → logprob: -13.533750534057617
    10. '    
' → logprob: -13.908750534057617

Token 266: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -4.8351892473874614e-05
    2. '
' → logprob: -10.000048637390137
    3. ' if' → logprob: -12.750048637390137
    4. '

' → logprob: -17.25004768371582
    5. '```' → logprob: -18.25004768371582
    6. '\n' → logprob: -19.12504768371582
    7. '    
' → logprob: -20.12504768371582
    8. '  
' → logprob: -20.37504768371582
    9. ' 
' → logprob: -20.50004768371582
    10. '\
' → logprob: -21.37504768371582

Token 267: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.008706163614988327
    2. '__' → logprob: -4.758706092834473
    3. ' ' → logprob: -9.383706092834473
    4. ' ' → logprob: -12.383706092834473
    5. ' ' → logprob: -13.508706092834473
    6. '_' → logprob: -13.758706092834473
    7. ' _' → logprob: -14.258706092834473
    8. ' ‌' → logprob: -15.883706092834473
    9. ' ​' → logprob: -16.88370704650879
    10. '_name' → logprob: -16.88370704650879

Token 268: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.3025025725364685
    2. ' ==' → logprob: -1.5525026321411133
    3. '==' → logprob: -3.5525026321411133
    4. 'name' → logprob: -4.177502632141113
    5. ' __' → logprob: -5.302502632141113
    6. '_' → logprob: -8.427502632141113
    7. '=="' → logprob: -10.302502632141113
    8. '=' → logprob: -10.927502632141113
    9. '_name' → logprob: -10.927502632141113
    10. ' ' → logprob: -11.052502632141113

Token 269: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -4.320199877838604e-07
    2. '==' → logprob: -15.25
    3. '_' → logprob: -15.875
    4. '__
' → logprob: -18.5
    5. '___' → logprob: -18.75
    6. '__.__' → logprob: -18.75
    7. '____' → logprob: -19.0
    8. ' __' → logprob: -19.375
    9. ' ==' → logprob: -19.5
    10. '__

' → logprob: -20.0

Token 270: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.006894989404827356
    2. '==' → logprob: -5.006895065307617
    3. '=="' → logprob: -8.881895065307617
    4. ' ==' → logprob: -10.256895065307617
    5. '=='' → logprob: -12.631895065307617
    6. '_' → logprob: -14.256895065307617
    7. '"' → logprob: -14.756895065307617
    8. '=' → logprob: -14.756895065307617
    9. '___' → logprob: -14.756895065307617
    10. '===' → logprob: -15.881895065307617

Token 271: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.01442733034491539
    2. ''' → logprob: -4.264427185058594
    3. ' "__' → logprob: -8.264427185058594
    4. '__' → logprob: -12.514427185058594
    5. ' '__' → logprob: -12.889427185058594
    6. '("__' → logprob: -17.514427185058594
    7. '"name' → logprob: -17.764427185058594
    8. '"user' → logprob: -17.764427185058594
    9. '"_' → logprob: -18.389427185058594
    10. ''"' → logprob: -18.514427185058594

Token 272: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: 0.0
    2. 'name' → logprob: -16.75
    3. ' main' → logprob: -22.625
    4. 'ma' → logprob: -23.25
    5. 'm' → logprob: -23.875
    6. 'mai' → logprob: -24.125
    7. 'maine' → logprob: -24.625
    8. '	main' → logprob: -25.0
    9. '_main' → logprob: -26.125
    10. '(main' → logprob: -26.625

Token 273: '__":
' (ID: 49892)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.10020774602890015
    2. '__":
' → logprob: -2.350207805633545
    3. '__':
' → logprob: -14.725207328796387
    4. '_' → logprob: -14.850207328796387
    5. '_"' → logprob: -15.475207328796387
    6. '__["' → logprob: -16.850208282470703
    7. '"' → logprob: -16.975208282470703
    8. '__",' → logprob: -17.600208282470703
    9. '__("' → logprob: -17.850208282470703
    10. '__:' → logprob: -18.225208282470703

Token 274: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.25476595759391785
    2. ' main' → logprob: -1.5047659873962402
    3. 'main' → logprob: -6.00476598739624
    4. '	main' → logprob: -8.129765510559082
    5. '   ' → logprob: -10.504765510559082
    6. '    
' → logprob: -10.754765510559082
    7. '_main' → logprob: -11.629765510559082
    8. '(main' → logprob: -12.004765510559082
    9. ' ' → logprob: -13.254765510559082
    10. '   ' → logprob: -13.754765510559082

Token 275: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.575950026512146
    2. 'main' (adapté à ' main') → logprob: -0.825950026512146
    3. '   ' → logprob: -11.825949668884277
    4. '	main' → logprob: -12.700949668884277
    5. '(main' → logprob: -16.200950622558594
    6. '_main' → logprob: -16.575950622558594
    7. '.main' → logprob: -17.575950622558594
    8. '    
' → logprob: -18.700950622558594
    9. 'Main' → logprob: -18.950950622558594
    10. ' ' → logprob: -19.075950622558594

Token 276: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -3.845798710244708e-05
    2. '()
' → logprob: -10.375038146972656
    3. '(' → logprob: -12.000038146972656
    4. ' ()' → logprob: -14.375038146972656
    5. '()`' → logprob: -15.875038146972656
    6. '()

' → logprob: -16.000038146972656
    7. '()"' → logprob: -16.375038146972656
    8. '()\' → logprob: -16.750038146972656
    9. '()<' → logprob: -17.125038146972656
    10. '()">' → logprob: -17.875038146972656


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 274
Tokens correctement prédits (1ère position, stricte): 107
Tokens correctement prédits (1ère position, avec adaptation): 111
Tokens correctement prédits (top 10): 196
Précision stricte (1ère position): 39.05%
Précision adaptée (1ère position): 40.51%
Précision (top 10): 71.53%
================================================================================
