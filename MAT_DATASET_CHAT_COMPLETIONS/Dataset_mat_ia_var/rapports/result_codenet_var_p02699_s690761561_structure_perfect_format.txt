================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:16:44
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
S, W = map(int, input().split())
if S > W:
    print('safe')
else:
    print('unsafe')
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'S' (ID: 50)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' W' (ID: 486)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.1619909107685089
    2. ' =' → logprob: -2.4119908809661865
    3. ',' → logprob: -3.1619908809661865
    4. '.' → logprob: -5.286991119384766
    5. ')' → logprob: -6.036991119384766
    6. ' ' → logprob: -6.161991119384766
    7. '(' → logprob: -6.161991119384766
    8. '[' → logprob: -6.411991119384766
    9. '+' → logprob: -6.661991119384766
    10. '*' → logprob: -6.911991119384766

Token 4: ' map' (ID: 4014)
  Prédit: 'S'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'S' → logprob: -1.676324725151062
    2. ' S' → logprob: -1.801324725151062
    3. 'input' → logprob: -2.0513248443603516
    4. 'map' → logprob: -2.0513248443603516
    5. ' map' → logprob: -2.6763248443603516
    6. ' input' → logprob: -3.1763248443603516
    7. ' ' → logprob: -3.1763248443603516
    8. '0' → logprob: -3.1763248443603516
    9. 'torch' → logprob: -3.5513248443603516
    10. 'np' → logprob: -3.9263248443603516

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.026074307039380074
    2. '(lambda' → logprob: -4.151074409484863
    3. '(int' → logprob: -4.901074409484863
    4. '(str' → logprob: -6.901074409484863
    5. '<|end|>' → logprob: -7.901074409484863
    6. '(user' → logprob: -8.276074409484863
    7. '(input' → logprob: -8.901074409484863
    8. '(token' → logprob: -9.526074409484863
    9. '```' → logprob: -9.526074409484863
    10. '(S' → logprob: -9.776074409484863

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0437355600297451
    2. ')' → logprob: -3.9187355041503906
    3. '(' → logprob: -4.043735504150391
    4. '(user' → logprob: -6.543735504150391
    5. '(str' → logprob: -6.668735504150391
    6. '(int' → logprob: -7.168735504150391
    7. 'input' → logprob: -8.04373550415039
    8. '(range' → logprob: -8.29373550415039
    9. '(S' → logprob: -8.91873550415039
    10. '(raw' → logprob: -9.16873550415039

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.2519529163837433
    2. ' input' → logprob: -1.501952886581421
    3. '(input' → logprob: -10.751953125
    4. ',input' → logprob: -14.251953125
    5. ')' → logprob: -14.376953125
    6. '<input' → logprob: -14.876953125
    7. '=input' → logprob: -15.251953125
    8. ' ' → logprob: -15.376953125
    9. '	input' → logprob: -15.751953125
    10. 'raw' → logprob: -16.876953125

Token 8: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.698196530342102
    2. '(' → logprob: -0.948196530342102
    3. '('' → logprob: -2.9481964111328125
    4. '())' → logprob: -3.1981964111328125
    5. ')' → logprob: -4.6981964111328125
    6. '().' → logprob: -5.0731964111328125
    7. '`()' → logprob: -6.1981964111328125
    8. '(
' → logprob: -7.5731964111328125
    9. '("("' → logprob: -7.8231964111328125
    10. '(()' → logprob: -7.9481964111328125

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00011951648048125207
    2. 'strip' → logprob: -9.12511920928955
    3. ')' → logprob: -12.37511920928955
    4. ' split' → logprob: -12.50011920928955
    5. 'rstrip' → logprob: -13.50011920928955
    6. 'read' → logprob: -14.00011920928955
    7. '(split' → logprob: -15.37511920928955
    8. 'spl' → logprob: -16.625120162963867
    9. 'replace' → logprob: -17.125120162963867
    10. 'startswith' → logprob: -17.875120162963867

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2112320363521576
    2. '())' → logprob: -1.83623206615448
    3. '))' → logprob: -3.5862319469451904
    4. '()' → logprob: -6.0862321853637695
    5. '()))' → logprob: -7.7112321853637695
    6. '`)' → logprob: -8.08623218536377
    7. '(' → logprob: -9.21123218536377
    8. '')' → logprob: -10.46123218536377
    9. ')`' → logprob: -10.46123218536377
    10. '('' → logprob: -10.96123218536377

Token 11: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.7822046279907227
    2. '#' → logprob: -1.9072046279907227
    3. 'a' → logprob: -2.0322046279907227
    4. '\n' → logprob: -2.4072046279907227
    5. 'x' → logprob: -2.5322046279907227
    6. 'for' → logprob: -2.9072046279907227
    7. ',' → logprob: -3.2822046279907227
    8. '*' → logprob: -3.2822046279907227
    9. 'i' → logprob: -3.5322046279907227
    10. '`' → logprob: -3.6572046279907227

Token 12: ' S' (ID: 336)
  Prédit: ' S'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' S' → logprob: -0.08396188169717789
    2. ' ' → logprob: -2.7089619636535645
    3. 'S' → logprob: -4.5839619636535645
    4. ' W' → logprob: -5.9589619636535645
    5. ' not' → logprob: -7.0839619636535645
    6. '  ' → logprob: -9.833961486816406
    7. ' ' → logprob: -9.833961486816406
    8. 'W' → logprob: -9.958961486816406
    9. ' (' → logprob: -10.583961486816406
    10. 's' → logprob: -10.708961486816406

Token 13: ' >' (ID: 1424)
  Prédit: ' >'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.4979662597179413
    2. '>' → logprob: -1.2479662895202637
    3. ' >=' → logprob: -3.4979662895202637
    4. ' <' → logprob: -3.6229662895202637
    5. '<' → logprob: -4.122966289520264
    6. ' ==' → logprob: -4.747966289520264
    7. '==' → logprob: -4.872966289520264
    8. '>=' → logprob: -4.997966289520264
    9. ' <=' → logprob: -5.122966289520264
    10. '<=' → logprob: -6.747966289520264

Token 14: ' W' (ID: 486)
  Prédit: ' W'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' W' → logprob: -0.3163342773914337
    2. 'W' → logprob: -1.3163342475891113
    3. ' ' → logprob: -6.066334247589111
    4. '0' → logprob: -8.06633472442627
    5. '=' → logprob: -8.06633472442627
    6. '10' → logprob: -10.19133472442627
    7. '100' → logprob: -10.81633472442627
    8. '=W' → logprob: -10.81633472442627
    9. '20' → logprob: -11.56633472442627
    10. '50' → logprob: -11.69133472442627

Token 15: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -7.064297824399546e-05
    2. ' :' → logprob: -9.750070571899414
    3. ':**' → logprob: -12.125070571899414
    4. '':' → logprob: -13.000070571899414
    5. '>:' → logprob: -13.625070571899414
    6. ':
' → logprob: -14.250070571899414
    7. '):' → logprob: -14.625070571899414
    8. '>' → logprob: -14.750070571899414
    9. '':'' → logprob: -14.875070571899414
    10. ',' → logprob: -15.125070571899414

Token 16: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.9145422577857971
    2. ':' → logprob: -1.0395421981811523
    3. ' ' → logprob: -2.2895421981811523
    4. ' print' → logprob: -3.2895421981811523
    5. '   ' → logprob: -3.5395421981811523
    6. '"' → logprob: -3.5395421981811523
    7. 'print' → logprob: -4.414542198181152
    8. ' :' → logprob: -4.414542198181152
    9. '    ' → logprob: -5.164542198181152
    10. '\' → logprob: -5.664542198181152

Token 17: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.23275437951087952
    2. 'print' (adapté à ' print') → logprob: -1.6077543497085571
    3. ' pass' → logprob: -5.232754230499268
    4. ' ' → logprob: -7.482754230499268
    5. ''' → logprob: -7.857754230499268
    6. '   ' → logprob: -8.107754707336426
    7. 'pass' → logprob: -8.357754707336426
    8. '    ' → logprob: -9.232754707336426
    9. '"' → logprob: -9.732754707336426
    10. ' continue' → logprob: -9.857754707336426

Token 18: '('' (ID: 706)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10059956461191177
    2. '("' → logprob: -2.600599527359009
    3. '('' → logprob: -4.225599765777588
    4. '("("' → logprob: -5.225599765777588
    5. '(S' → logprob: -7.225599765777588
    6. '(True' → logprob: -8.60059928894043
    7. '"' → logprob: -8.97559928894043
    8. '("")' → logprob: -8.97559928894043
    9. '()' → logprob: -9.47559928894043
    10. '(False' → logprob: -9.97559928894043

Token 19: 'safe' (ID: 46891)
  Prédit: 'Yes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.054789524525403976
    2. 'safe' → logprob: -3.3047895431518555
    3. 'Safe' → logprob: -4.8047895431518555
    4. 'yes' → logprob: -5.9297895431518555
    5. ''' → logprob: -6.3047895431518555
    6. 'unsafe' → logprob: -6.4297895431518555
    7. 'YES' → logprob: -6.9297895431518555
    8. 'SAFE' → logprob: -8.054789543151855
    9. 'Unsafe' → logprob: -8.429789543151855
    10. ' Yes' → logprob: -8.429789543151855

Token 20: '')
' (ID: 2515)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -4.215330409351736e-05
    2. ')' → logprob: -10.250041961669922
    3. ''' → logprob: -12.375041961669922
    4. '")' → logprob: -13.750041961669922
    5. '')
' → logprob: -13.750041961669922
    6. '')
' → logprob: -16.500041961669922
    7. '!' → logprob: -16.500041961669922
    8. '')

' → logprob: -16.625041961669922
    9. '('' → logprob: -17.250041961669922
    10. '()' → logprob: -18.000041961669922

Token 21: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.1341346800327301
    2. ' else' → logprob: -2.1341347694396973
    3. 'elif' → logprob: -5.384134769439697
    4. '<|end|>' → logprob: -6.509134769439697
    5. '```' → logprob: -7.759134769439697
    6. ')' → logprob: -8.384134292602539
    7. ' elif' → logprob: -9.009134292602539
    8. ' ' → logprob: -9.634134292602539
    9. '<|end|>' → logprob: -10.259134292602539
    10. '   ' → logprob: -10.509134292602539

Token 22: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -2.7014437364414334e-05
    2. ':
' → logprob: -10.62502670288086
    3. ' :' → logprob: -13.37502670288086
    4. '   ' → logprob: -14.00002670288086
    5. ':**' → logprob: -16.75002670288086
    6. ':return' → logprob: -16.75002670288086
    7. '.' → logprob: -17.12502670288086
    8. '```' → logprob: -17.12502670288086
    9. ':

' → logprob: -17.25002670288086
    10. ':def' → logprob: -17.50002670288086

Token 23: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5718277096748352
    2. ''' → logprob: -1.5718276500701904
    3. ' print' → logprob: -1.6968276500701904
    4. '   ' → logprob: -3.8218276500701904
    5. ''s' → logprob: -4.4468278884887695
    6. ' '' → logprob: -4.8218278884887695
    7. ''d' → logprob: -7.3218278884887695
    8. ' ' → logprob: -8.07182788848877
    9. ' safe' → logprob: -8.44682788848877
    10. ''import' → logprob: -8.82182788848877

Token 24: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0023170113563537598
    2. ' print' → logprob: -6.127316951751709
    3. ''' → logprob: -9.002317428588867
    4. '   ' → logprob: -12.252317428588867
    5. ' ' → logprob: -13.877317428588867
    6. '('' → logprob: -14.252317428588867
    7. ''s' → logprob: -14.877317428588867
    8. ''d' → logprob: -15.127317428588867
    9. '	print' → logprob: -15.252317428588867
    10. '(print' → logprob: -15.252317428588867

Token 25: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.10022488981485367
    2. '(' → logprob: -2.3502249717712402
    3. '('(' → logprob: -11.975224494934082
    4. '()' → logprob: -12.225224494934082
    5. '("' → logprob: -12.975224494934082
    6. '(('' → logprob: -13.725224494934082
    7. ''' → logprob: -13.850224494934082
    8. '(
' → logprob: -14.475224494934082
    9. '('.')' → logprob: -15.350224494934082
    10. '('_' → logprob: -15.475224494934082

Token 26: 'unsafe' (ID: 66907)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.09047288447618484
    2. 'unsafe' → logprob: -2.840472936630249
    3. ''un' → logprob: -4.09047269821167
    4. ''ins' → logprob: -5.71547269821167
    5. ''ob' → logprob: -6.09047269821167
    6. 'danger' → logprob: -6.84047269821167
    7. ''im' → logprob: -7.21547269821167
    8. ''d' → logprob: -7.34047269821167
    9. 'uns' → logprob: -7.46547269821167
    10. ''us' → logprob: -7.46547269821167

Token 27: '')' (ID: 1542)
  Prédit: '')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.0007323168683797121
    2. ')' → logprob: -7.250732421875
    3. ''' → logprob: -10.750732421875
    4. '')
' → logprob: -14.125732421875
    5. '")' → logprob: -15.750732421875
    6. '('' → logprob: -18.000732421875
    7. '')

' → logprob: -18.250732421875
    8. '}')' → logprob: -18.750732421875
    9. '`)' → logprob: -18.750732421875
    10. ')'' → logprob: -18.875732421875


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 25
Tokens correctement prédits (1ère position, stricte): 9
Tokens correctement prédits (1ère position, avec adaptation): 10
Tokens correctement prédits (top 10): 23
Précision stricte (1ère position): 36.00%
Précision adaptée (1ère position): 40.00%
Précision (top 10): 92.00%
================================================================================
