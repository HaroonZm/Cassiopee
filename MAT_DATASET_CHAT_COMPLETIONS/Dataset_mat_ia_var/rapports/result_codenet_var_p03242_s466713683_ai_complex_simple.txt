================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:07:06
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from functools import reduce
from operator import add, mul

N = input()
map_dict = {'1': 9}
default = 1

def f(x):
    return map_dict.get(x, default)

ans = list(map(f, N))

# Pour rendre le print inutilement complexe :
def joiner(seq, sep=""):
    return reduce(lambda a,b: a+sep+str(b), map(str, seq))

print(joiner(ans))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' functools' (ID: 142636)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' reduce' (ID: 10389)
  Prédit: 'partial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'partial' → logprob: -0.6123510599136353
    2. 'wrap' → logprob: -0.8623510599136353
    3. 'reduce' → logprob: -3.4873509407043457
    4. 'l' → logprob: -6.112350940704346
    5. ' wraps' → logprob: -6.362350940704346
    6. 'cached' → logprob: -7.612350940704346
    7. 'cache' → logprob: -7.987350940704346
    8. 'cmp' → logprob: -9.112351417541504
    9. '```' → logprob: -9.237351417541504
    10. ' partial' → logprob: -9.487351417541504

Token 4: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.010283653624355793
    2. '(lambda' → logprob: -4.760283470153809
    3. ' (' → logprob: -7.385283470153809
    4. ',' → logprob: -7.885283470153809
    5. 'def' → logprob: -8.135283470153809
    6. '.' → logprob: -8.760283470153809
    7. '```' → logprob: -10.260283470153809
    8. '(
' → logprob: -10.510283470153809
    9. 'lambda' → logprob: -10.635283470153809
    10. 'a' → logprob: -10.760283470153809

Token 5: 'from' (ID: 2845)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01442087721079588
    2. '(
' → logprob: -5.139420986175537
    3. '(lambda' → logprob: -5.389420986175537
    4. 'def' → logprob: -6.639420986175537
    5. ',' → logprob: -7.139420986175537
    6. '\' → logprob: -8.139420509338379
    7. ' ' → logprob: -8.264420509338379
    8. ' (' → logprob: -8.389420509338379
    9. '' → logprob: -9.139420509338379
    10. '
' → logprob: -9.139420509338379

Token 6: ' operator' (ID: 11019)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.8743318915367126
    2. ' operator' → logprob: -1.4993319511413574
    3. ' itertools' → logprob: -1.6243319511413574
    4. ' collections' → logprob: -1.8743319511413574
    5. ' os' → logprob: -4.874331951141357
    6. 'operator' → logprob: -7.499331951141357
    7. ' typing' → logprob: -8.4993314743042
    8. ' sys' → logprob: -8.6243314743042
    9. 'collections' → logprob: -8.9993314743042
    10. 'math' → logprob: -8.9993314743042

Token 7: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.02128998003900051
    2. 'import' → logprob: -4.021289825439453
    3. '.' → logprob: -6.396289825439453
    4. ' ' → logprob: -6.646289825439453
    5. ' .' → logprob: -9.021289825439453
    6. '.import' → logprob: -10.396289825439453
    7. '	import' → logprob: -12.021289825439453
    8. '<|end|>' → logprob: -12.896289825439453
    9. '_import' → logprob: -13.396289825439453
    10. '-import' → logprob: -13.896289825439453

Token 8: ' add' (ID: 1147)
  Prédit: ' add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' add' → logprob: -0.22591231763362885
    2. ' import' → logprob: -1.97591233253479
    3. ' mul' → logprob: -3.60091233253479
    4. 'add' → logprob: -3.97591233253479
    5. ' ' → logprob: -4.350912094116211
    6. 'import' → logprob: -5.975912094116211
    7. 'mul' → logprob: -6.600912094116211
    8. ' item' → logprob: -8.100912094116211
    9. ' icon' → logprob: -9.475912094116211
    10. ' ad' → logprob: -10.100912094116211

Token 9: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2564718425273895
    2. '\' → logprob: -2.631471872329712
    3. '(
' → logprob: -3.256471872329712
    4. '\n' → logprob: -3.256471872329712
    5. ',' → logprob: -3.756471872329712
    6. '#' → logprob: -4.631471633911133
    7. ' ' → logprob: -5.131471633911133
    8. 'def' → logprob: -5.131471633911133
    9. ')' → logprob: -5.506471633911133
    10. '
' → logprob: -5.756471633911133

Token 10: ' mul' (ID: 9975)
  Prédit: ' mul'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' mul' → logprob: -0.6506623029708862
    2. 'mul' → logprob: -0.7756623029708862
    3. ' sub' → logprob: -4.775662422180176
    4. 'sub' → logprob: -4.775662422180176
    5. '```' → logprob: -8.650662422180176
    6. 'getitem' → logprob: -8.775662422180176
    7. ' i' → logprob: -8.900662422180176
    8. 'item' → logprob: -9.025662422180176
    9. ' ' → logprob: -9.275662422180176
    10. 'i' → logprob: -9.525662422180176

Token 11: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.026002654805779457
    2. '(
' → logprob: -4.651002883911133
    3. ',' → logprob: -4.901002883911133
    4. '#' → logprob: -5.651002883911133
    5. '\' → logprob: -6.276002883911133
    6. 'def' → logprob: -6.526002883911133
    7. '(

' → logprob: -8.276002883911133
    8. ')' → logprob: -8.526002883911133
    9. '```' → logprob: -8.526002883911133
    10. '*' → logprob: -8.651002883911133

Token 12: 'N' (ID: 45)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06855756789445877
    2. '#' → logprob: -3.3185575008392334
    3. ',' → logprob: -4.6935577392578125
    4. '(
' → logprob: -5.1935577392578125
    5. 'def' → logprob: -5.8185577392578125
    6. 'result' → logprob: -6.1935577392578125
    7. '[' → logprob: -6.3185577392578125
    8. '\' → logprob: -6.3185577392578125
    9. 'a' → logprob: -6.3185577392578125
    10. '`' → logprob: -6.9435577392578125

Token 13: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.47121039032936096
    2. '=' → logprob: -1.2212103605270386
    3. ' ' → logprob: -3.346210479736328
    4. '_' → logprob: -3.721210479736328
    5. ',' → logprob: -4.221210479736328
    6. '  ' → logprob: -6.346210479736328
    7. ')' → logprob: -7.096210479736328
    8. 'u' → logprob: -7.221210479736328
    9. ' )' → logprob: -7.221210479736328
    10. '.' → logprob: -7.346210479736328

Token 14: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.267855167388916
    2. '10' → logprob: -1.517855167388916
    3. '100' → logprob: -4.767855167388916
    4. '5' → logprob: -5.517855167388916
    5. 'int' → logprob: -6.892855167388916
    6. '20' → logprob: -7.267855167388916
    7. '0' → logprob: -7.267855167388916
    8. ' int' → logprob: -7.892855167388916
    9. '1' → logprob: -9.142854690551758
    10. '50' → logprob: -9.392854690551758

Token 15: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0013463040813803673
    2. '()' → logprob: -7.751346111297607
    3. '(
' → logprob: -8.126346588134766
    4. ')' → logprob: -8.751346588134766
    5. '('' → logprob: -8.876346588134766
    6. '```' → logprob: -9.626346588134766
    7. '("("' → logprob: -10.126346588134766
    8. '(

' → logprob: -10.251346588134766
    9. '`' → logprob: -10.751346588134766
    10. '(`' → logprob: -10.751346588134766

Token 16: 'map' (ID: 3726)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.8133474588394165
    2. ')' → logprob: -1.8133474588394165
    3. '(' → logprob: -2.438347339630127
    4. '()' → logprob: -2.438347339630127
    5. '=' → logprob: -2.938347339630127
    6. '*' → logprob: -3.813347339630127
    7. '[' → logprob: -4.188347339630127
    8. '```' → logprob: -4.313347339630127
    9. ' ' → logprob: -4.438347339630127
    10. '_' → logprob: -4.438347339630127

Token 17: '_dict' (ID: 11295)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00019138160860165954
    2. '(lambda' → logprob: -8.750191688537598
    3. '(
' → logprob: -11.375191688537598
    4. ' (' → logprob: -12.125191688537598
    5. '(int' → logprob: -12.500191688537598
    6. '(

' → logprob: -12.750191688537598
    7. '('' → logprob: -13.625191688537598
    8. '()' → logprob: -13.875191688537598
    9. '(`' → logprob: -13.875191688537598
    10. ')' → logprob: -14.000191688537598

Token 18: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.6810833811759949
    2. '=' → logprob: -0.8060833811759949
    3. '[' → logprob: -3.3060834407806396
    4. '(' → logprob: -5.0560832023620605
    5. '.' → logprob: -6.4310832023620605
    6. '_' → logprob: -6.8060832023620605
    7. '{' → logprob: -7.6810832023620605
    8. ')' → logprob: -8.431083679199219
    9. ',' → logprob: -8.556083679199219
    10. '.setdefault' → logprob: -8.681083679199219

Token 19: ' {'' (ID: 11881)
  Prédit: '{'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '{' → logprob: -0.3993770480155945
    2. ' {' → logprob: -1.2743771076202393
    3. '{}' → logprob: -3.1493771076202393
    4. ' {}' → logprob: -5.27437686920166
    5. 'dict' → logprob: -7.39937686920166
    6. '{
' → logprob: -7.77437686920166
    7. '{'' → logprob: -8.52437686920166
    8. '{"' → logprob: -8.89937686920166
    9. ' {
' → logprob: -9.39937686920166
    10. ' dict' → logprob: -9.64937686920166

Token 20: '1' (ID: 16)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.4629700481891632
    2. '0' → logprob: -1.9629700183868408
    3. 'a' → logprob: -2.337970018386841
    4. '1' → logprob: -3.462970018386841
    5. ''' → logprob: -3.587970018386841
    6. '*' → logprob: -3.962970018386841
    7. ''+' → logprob: -4.21297025680542
    8. 'A' → logprob: -4.96297025680542
    9. ')' → logprob: -5.33797025680542
    10. ''*' → logprob: -5.33797025680542

Token 21: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.031152566894888878
    2. '':'' → logprob: -3.7811524868011475
    3. ''' → logprob: -5.031152725219727
    4. '1' → logprob: -7.656152725219727
    5. '2' → logprob: -8.156152725219727
    6. '0' → logprob: -8.656152725219727
    7. ' ':' → logprob: -9.156152725219727
    8. '+' → logprob: -9.406152725219727
    9. '6' → logprob: -9.906152725219727
    10. '7' → logprob: -10.156152725219727

Token 22: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.4017620086669922
    2. ''' → logprob: -1.5267620086669922
    3. ' ' → logprob: -2.901762008666992
    4. ' '' → logprob: -3.526762008666992
    5. '0' → logprob: -4.526762008666992
    6. ''s' → logprob: -4.901762008666992
    7. '2' → logprob: -5.526762008666992
    8. ''m' → logprob: -6.276762008666992
    9. '[' → logprob: -6.401762008666992
    10. '3' → logprob: -8.026762008666992

Token 23: '9' (ID: 24)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.5382134318351746
    2. ''' → logprob: -1.5382134914398193
    3. 'mul' → logprob: -3.0382134914398193
    4. 'add' → logprob: -3.5382134914398193
    5. '0' → logprob: -3.6632134914398193
    6. ''+' → logprob: -4.16321325302124
    7. ' ' → logprob: -4.28821325302124
    8. ''m' → logprob: -4.28821325302124
    9. 'lambda' → logprob: -5.03821325302124
    10. 'int' → logprob: -5.03821325302124

Token 24: '}
' (ID: 739)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.040636636316776276
    2. '}' → logprob: -4.0406365394592285
    3. ','' → logprob: -4.0406365394592285
    4. '',' → logprob: -6.0406365394592285
    5. ')' → logprob: -7.6656365394592285
    6. ''' → logprob: -7.6656365394592285
    7. ''}' → logprob: -8.040637016296387
    8. ',
' → logprob: -8.915637016296387
    9. '9' → logprob: -8.915637016296387
    10. '')' → logprob: -9.040637016296387

Token 25: 'default' (ID: 4211)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.8690446615219116
    2. '[' → logprob: -1.7440446615219116
    3. '.' → logprob: -1.7440446615219116
    4. ' ' → logprob: -2.869044780731201
    5. ')' → logprob: -2.994044780731201
    6. 'for' → logprob: -3.619044780731201
    7. ':' → logprob: -4.619044780731201
    8. ']' → logprob: -4.619044780731201
    9. '*' → logprob: -4.869044780731201
    10. 'print' → logprob: -4.994044780731201

Token 26: ' =' (ID: 314)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.09294712543487549
    2. 'dict' → logprob: -2.967947006225586
    3. ' =' → logprob: -4.342947006225586
    4. '=' → logprob: -4.342947006225586
    5. ' :' → logprob: -5.467947006225586
    6. '_dict' → logprob: -6.092947006225586
    7. '':' → logprob: -6.342947006225586
    8. '_:' → logprob: -6.967947006225586
    9. '_' → logprob: -7.842947006225586
    10. ' ' → logprob: -7.842947006225586

Token 27: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.8534008860588074
    2. ' ' → logprob: -0.8534008860588074
    3. '1' → logprob: -2.353400945663452
    4. '10' → logprob: -4.478400707244873
    5. '9' → logprob: -4.853400707244873
    6. ''' → logprob: -5.103400707244873
    7. 'lambda' → logprob: -5.478400707244873
    8. '8' → logprob: -5.978400707244873
    9. '2' → logprob: -5.978400707244873
    10. '5' → logprob: -6.103400707244873

Token 28: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.29499679803848267
    2. '1' → logprob: -1.919996738433838
    3. '10' → logprob: -3.794996738433838
    4. '9' → logprob: -4.044996738433838
    5. ' ' → logprob: -4.169996738433838
    6. ''' → logprob: -4.669996738433838
    7. 'lambda' → logprob: -4.919996738433838
    8. '5' → logprob: -5.544996738433838
    9. 'None' → logprob: -5.669996738433838
    10. '2' → logprob: -5.669996738433838

Token 29: '

' (ID: 279)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -1.6653403043746948
    2. '.' → logprob: -1.7903403043746948
    3. '
' → logprob: -2.1653404235839844
    4. '<|end|>' → logprob: -2.1653404235839844
    5. '*' → logprob: -2.2903404235839844
    6. '+' → logprob: -2.4153404235839844
    7. ' ' → logprob: -2.5403404235839844
    8. ',' → logprob: -3.1653404235839844
    9. '#' → logprob: -4.290340423583984
    10. '```' → logprob: -4.665340423583984

Token 30: 'def' (ID: 1314)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '*' → logprob: -0.6286462545394897
    2. '+' → logprob: -1.6286462545394897
    3. '.' → logprob: -3.2536463737487793
    4. ',' → logprob: -3.3786463737487793
    5. '=' → logprob: -3.3786463737487793
    6. '
' → logprob: -3.6286463737487793
    7. '0' → logprob: -3.7536463737487793
    8. ':' → logprob: -3.8786463737487793
    9. ' ' → logprob: -4.253646373748779
    10. '_' → logprob: -4.628646373748779

Token 31: ' f' (ID: 285)
  Prédit: ' multiply'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' multiply' → logprob: -0.6041570901870728
    2. ' calculate' → logprob: -1.8541570901870728
    3. ' factorial' → logprob: -1.9791570901870728
    4. ' compute' → logprob: -2.979156970977783
    5. ' process' → logprob: -3.854156970977783
    6. ' map' → logprob: -3.979156970977783
    7. ' transform' → logprob: -4.104156970977783
    8. ' my' → logprob: -5.229156970977783
    9. ' product' → logprob: -5.354156970977783
    10. ' decode' → logprob: -5.354156970977783

Token 32: '(x' (ID: 4061)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2772316038608551
    2. '(x' → logprob: -2.0272316932678223
    3. '(a' → logprob: -2.5272316932678223
    4. '(n' → logprob: -4.277231693267822
    5. 'a' → logprob: -5.652231693267822
    6. '(i' → logprob: -5.652231693267822
    7. '(u' → logprob: -6.027231693267822
    8. '(key' → logprob: -6.402231693267822
    9. 'actor' → logprob: -7.527231693267822
    10. '(num' → logprob: -7.652231693267822

Token 33: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.39072370529174805
    2. '):' → logprob: -1.140723705291748
    3. ')' → logprob: -5.890723705291748
    4. ' ,' → logprob: -7.640723705291748
    5. ' ):' → logprob: -8.140724182128906
    6. ':' → logprob: -9.015724182128906
    7. ',x' → logprob: -10.390724182128906
    8. ',y' → logprob: -10.515724182128906
    9. '=' → logprob: -10.890724182128906
    10. '):
' → logprob: -11.140724182128906

Token 34: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.474554181098938
    2. ' return' → logprob: -1.474554181098938
    3. 'return' → logprob: -2.3495540618896484
    4. ' if' → logprob: -4.599554061889648
    5. ':' → logprob: -4.724554061889648
    6. ')' → logprob: -5.099554061889648
    7. ' ' → logprob: -5.224554061889648
    8. ' map' → logprob: -5.724554061889648
    9. 'map' → logprob: -5.849554061889648
    10. '):' → logprob: -5.849554061889648

Token 35: ' return' (ID: 622)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.791060209274292
    2. 'return' (adapté à ' return') → logprob: -1.166060209274292
    3. ' map' → logprob: -2.166060209274292
    4. ' return' → logprob: -2.916060209274292
    5. 'x' → logprob: -3.916060209274292
    6. 'if' → logprob: -4.166060447692871
    7. 'int' → logprob: -4.416060447692871
    8. ' if' → logprob: -5.291060447692871
    9. '   ' → logprob: -5.791060447692871
    10. ' x' → logprob: -5.916060447692871

Token 36: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.8831794261932373
    2. 'map' → logprob: -1.2581794261932373
    3. 'mul' → logprob: -1.8831794261932373
    4. ' x' → logprob: -3.2581794261932373
    5. ' mul' → logprob: -3.3831794261932373
    6. 'x' → logprob: -3.3831794261932373
    7. ' add' → logprob: -5.008179664611816
    8. 'default' → logprob: -5.133179664611816
    9. 'add' → logprob: -5.133179664611816
    10. '1' → logprob: -5.508179664611816

Token 37: '_dict' (ID: 11295)
  Prédit: '_dict'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_dict' → logprob: -1.7954958821064793e-05
    2. 'dict' → logprob: -11.625018119812012
    3. '_' → logprob: -12.125018119812012
    4. '_dic' → logprob: -13.375018119812012
    5. '_map' → logprob: -14.000018119812012
    6. '_d' → logprob: -14.375018119812012
    7. '_DICT' → logprob: -15.875018119812012
    8. 'd' → logprob: -16.250017166137695
    9. '_df' → logprob: -17.250017166137695
    10. '_doc' → logprob: -17.250017166137695

Token 38: '.get' (ID: 775)
  Prédit: '.get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.get' → logprob: -0.033749084919691086
    2. '.' → logprob: -3.4087491035461426
    3. 'get' → logprob: -9.658748626708984
    4. '.setdefault' → logprob: -11.158748626708984
    5. ' .' → logprob: -11.533748626708984
    6. '   ' → logprob: -12.658748626708984
    7. '[' → logprob: -13.283748626708984
    8. '[x' → logprob: -13.408748626708984
    9. '[get' → logprob: -13.658748626708984
    10. ').' → logprob: -13.658748626708984

Token 39: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.006716913543641567
    2. '(' → logprob: -5.006716728210449
    3. '(str' → logprob: -14.25671672821045
    4. 'x' → logprob: -14.75671672821045
    5. '(
' → logprob: -15.13171672821045
    6. ' (' → logprob: -15.88171672821045
    7. '(

' → logprob: -16.881717681884766
    8. '(int' → logprob: -18.006717681884766
    9. '((' → logprob: -18.131717681884766
    10. ' ' → logprob: -18.381717681884766

Token 40: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0001923352392623201
    2. ')' → logprob: -8.750192642211914
    3. ' ,' → logprob: -11.500192642211914
    4. ','' → logprob: -12.250192642211914
    5. 'x' → logprob: -12.625192642211914
    6. ',x' → logprob: -12.750192642211914
    7. '',' → logprob: -12.875192642211914
    8. '),' → logprob: -13.375192642211914
    9. ',None' → logprob: -13.625192642211914
    10. 'default' → logprob: -13.750192642211914

Token 41: ' default' (ID: 2787)
  Prédit: 'default'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'default' → logprob: -0.0024936108384281397
    2. ' default' → logprob: -6.002493381500244
    3. '1' → logprob: -11.377493858337402
    4. 'x' → logprob: -12.502493858337402
    5. ' ' → logprob: -14.377493858337402
    6. 'def' → logprob: -14.877493858337402
    7. '(default' → logprob: -14.877493858337402
    8. '0' → logprob: -15.127493858337402
    9. '"default' → logprob: -15.252493858337402
    10. '   ' → logprob: -15.627493858337402

Token 42: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00014191943046171218
    2. '*' → logprob: -9.375142097473145
    3. ')*' → logprob: -10.625142097473145
    4. ' )' → logprob: -10.875142097473145
    5. '*)' → logprob: -12.750142097473145
    6. '))' → logprob: -12.875142097473145
    7. ' *' → logprob: -13.250142097473145
    8. '0' → logprob: -14.125142097473145
    9. '}' → logprob: -14.500142097473145
    10. '*x' → logprob: -14.625142097473145

Token 43: 'ans' (ID: 616)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '*' → logprob: -0.15892963111400604
    2. ')' → logprob: -2.6589295864105225
    3. '+' → logprob: -3.0339295864105225
    4. '.' → logprob: -5.408929824829102
    5. '(' → logprob: -5.533929824829102
    6. '[' → logprob: -5.658929824829102
    7. '#' → logprob: -5.908929824829102
    8. ' ' → logprob: -5.908929824829102
    9. '_' → logprob: -6.283929824829102
    10. 'result' → logprob: -6.533929824829102

Token 44: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.026306800544261932
    2. '=' → logprob: -3.6513068675994873
    3. ',' → logprob: -12.901307106018066
    4. '.' → logprob: -14.151307106018066
    5. ':' → logprob: -14.651307106018066
    6. '_' → logprob: -14.651307106018066
    7. ' +=' → logprob: -14.776307106018066
    8. ' =)' → logprob: -14.776307106018066
    9. ' ' → logprob: -15.151307106018066
    10. 's' → logprob: -15.526307106018066

Token 45: ' list' (ID: 1562)
  Prédit: 'reduce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'reduce' → logprob: -0.03366667777299881
    2. ' reduce' → logprob: -3.6586666107177734
    3. 'mul' → logprob: -5.283666610717773
    4. 'sum' → logprob: -7.283666610717773
    5. 'str' → logprob: -7.408666610717773
    6. '1' → logprob: -8.658666610717773
    7. 'int' → logprob: -8.658666610717773
    8. ' mul' → logprob: -9.033666610717773
    9. ' str' → logprob: -9.033666610717773
    10. 'list' → logprob: -9.408666610717773

Token 46: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.06199973449110985
    2. '(' → logprob: -2.811999797821045
    3. '(re' → logprob: -11.436999320983887
    4. '(
' → logprob: -12.186999320983887
    5. '(filter' → logprob: -12.436999320983887
    6. ')' → logprob: -12.561999320983887
    7. '(

' → logprob: -12.686999320983887
    8. 'map' → logprob: -13.311999320983887
    9. '(range' → logprob: -13.561999320983887
    10. '(m' → logprob: -13.936999320983887

Token 47: '(f' (ID: 1526)
  Prédit: '(f'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(f' → logprob: -0.0013910694979131222
    2. '(lambda' → logprob: -6.7513909339904785
    3. 'f' → logprob: -9.001391410827637
    4. '(' → logprob: -9.501391410827637
    5. ')' → logprob: -11.501391410827637
    6. ' (' → logprob: -12.251391410827637
    7. ' f' → logprob: -13.251391410827637
    8. '(str' → logprob: -13.376391410827637
    9. ')(' → logprob: -14.126391410827637
    10. '(func' → logprob: -14.126391410827637

Token 48: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00895785354077816
    2. ',N' → logprob: -4.758957862854004
    3. '(N' → logprob: -8.508957862854004
    4. ' ,' → logprob: -9.258957862854004
    5. ',input' → logprob: -11.258957862854004
    6. ',(' → logprob: -12.008957862854004
    7. 'N' → logprob: -12.008957862854004
    8. '(' → logprob: -12.008957862854004
    9. ',map' → logprob: -12.383957862854004
    10. ',list' → logprob: -13.258957862854004

Token 49: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.001611866056919098
    2. ' N' → logprob: -6.626611709594727
    3. 'list' → logprob: -8.251611709594727
    4. 'str' → logprob: -11.501611709594727
    5. ' list' → logprob: -12.001611709594727
    6. '   ' → logprob: -12.751611709594727
    7. ' ' → logprob: -13.126611709594727
    8. 'input' → logprob: -13.251611709594727
    9. ' str' → logprob: -15.001611709594727
    10. 'range' → logprob: -15.126611709594727

Token 50: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.00019769940990954638
    2. ')))' → logprob: -8.750197410583496
    3. ')' → logprob: -10.375197410583496
    4. ' ))' → logprob: -12.125197410583496
    5. '))
' → logprob: -13.375197410583496
    6. '),' → logprob: -15.500197410583496
    7. '));' → logprob: -15.750197410583496
    8. '()))' → logprob: -16.000198364257812
    9. '))))' → logprob: -16.000198364257812
    10. ' ' → logprob: -16.250198364257812

Token 51: '#' (ID: 2)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.006684468127787113
    2. 'print' → logprob: -6.006684303283691
    3. '<|end|>' → logprob: -6.381684303283691
    4. 'for' → logprob: -7.506684303283691
    5. '*' → logprob: -7.881684303283691
    6. ')
' → logprob: -8.006684303283691
    7. 'ans' → logprob: -8.006684303283691
    8. '
' → logprob: -8.381684303283691
    9. '```' → logprob: -9.381684303283691
    10. '<|end|>' → logprob: -9.631684303283691

Token 52: ' Pour' (ID: 13931)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.4866724908351898
    2. ')' → logprob: -1.6116725206375122
    3. 'reduce' → logprob: -2.9866724014282227
    4. 'sum' → logprob: -3.3616724014282227
    5. 'ans' → logprob: -3.6116724014282227
    6. '[' → logprob: -4.361672401428223
    7. ' ' → logprob: -4.361672401428223
    8. ' print' → logprob: -5.236672401428223
    9. 'for' → logprob: -5.236672401428223
    10. ' ans' → logprob: -5.236672401428223

Token 53: ' rendre' (ID: 44629)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.25826820731163025
    2. 'i' → logprob: -2.383268117904663
    3. ' ans' → logprob: -3.383268117904663
    4. ' result' → logprob: -4.758268356323242
    5. ' la' → logprob: -5.008268356323242
    6. 'ans' → logprob: -5.008268356323242
    7. ' token' → logprob: -5.008268356323242
    8. 'reduce' → logprob: -5.258268356323242
    9. 'result' → logprob: -5.508268356323242
    10. ' x' → logprob: -5.883268356323242

Token 54: ' le' (ID: 505)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.5710612535476685
    2. ' ans' → logprob: -1.6960612535476685
    3. ' la' → logprob: -2.446061134338379
    4. 'la' → logprob: -3.196061134338379
    5. ' le' → logprob: -3.321061134338379
    6. 'le' → logprob: -3.571061134338379
    7. 'l' → logprob: -3.946061134338379
    8. ' l' → logprob: -4.196061134338379
    9. 'les' → logprob: -4.821061134338379
    10. ' les' → logprob: -4.946061134338379

Token 55: ' print' (ID: 2123)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.6903617978096008
    2. 'code' → logprob: -0.9403617978096008
    3. ' code' → logprob: -3.690361738204956
    4. 'result' → logprob: -3.815361738204956
    5. 'rés' → logprob: -4.190361976623535
    6. 'texte' → logprob: -4.815361976623535
    7. '#' → logprob: -5.565361976623535
    8. 'liste' → logprob: -5.815361976623535
    9. ' résultat' → logprob: -6.065361976623535
    10. 'list' → logprob: -6.065361976623535

Token 56: ' inutile' (ID: 157748)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6893045902252197
    2. '('' → logprob: -1.5643045902252197
    3. '(ans' → logprob: -1.5643045902252197
    4. 'print' → logprob: -3.8143045902252197
    5. '("' → logprob: -3.9393045902252197
    6. 'ans' → logprob: -4.314304351806641
    7. '(int' → logprob: -5.314304351806641
    8. '(print' → logprob: -5.689304351806641
    9. '('\' → logprob: -6.189304351806641
    10. '(str' → logprob: -6.314304351806641

Token 57: 'ment' (ID: 508)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.1277330070734024
    2. 'print' → logprob: -2.252732992172241
    3. 'from' → logprob: -5.37773323059082
    4. 'reduce' → logprob: -5.62773323059082
    5. 'for' → logprob: -6.00273323059082
    6. 'result' → logprob: -7.50273323059082
    7. '[' → logprob: -7.62773323059082
    8. '=' → logprob: -7.87773323059082
    9. 'import' → logprob: -8.00273323059082
    10. ' ans' → logprob: -8.00273323059082

Token 58: ' complexe' (ID: 78615)
  Prédit: 'verbose'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'verbose' → logprob: -0.7580255270004272
    2. 'print' → logprob: -2.133025646209717
    3. 'fac' → logprob: -3.633025646209717
    4. 'mult' → logprob: -3.633025646209717
    5. 'com' → logprob: -3.883025646209717
    6. 'efficient' → logprob: -3.883025646209717
    7. 'explicit' → logprob: -4.008025646209717
    8. 'long' → logprob: -4.133025646209717
    9. 'import' → logprob: -4.133025646209717
    10. 'list' → logprob: -4.258025646209717

Token 59: ' :
' (ID: 10039)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.6506816744804382
    2. ')' → logprob: -2.025681734085083
    3. 'ans' → logprob: -2.025681734085083
    4. ':' → logprob: -2.150681734085083
    5. '[' → logprob: -4.150681495666504
    6. '(ans' → logprob: -4.150681495666504
    7. '(' → logprob: -4.275681495666504
    8. 's' → logprob: -4.900681495666504
    9. ' ans' → logprob: -5.025681495666504
    10. '):' → logprob: -5.150681495666504

Token 60: 'def' (ID: 1314)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.06518963724374771
    2. 'result' → logprob: -3.5651895999908447
    3. 'ans' → logprob: -3.6901895999908447
    4. 'res' → logprob: -6.065189838409424
    5. 'for' → logprob: -6.065189838409424
    6. 'reduce' → logprob: -6.815189838409424
    7. 's' → logprob: -7.065189838409424
    8. 'r' → logprob: -7.065189838409424
    9. 'answer' → logprob: -7.940189838409424
    10. 're' → logprob: -7.940189838409424

Token 61: ' join' (ID: 5863)
  Prédit: ' g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' g' → logprob: -0.8685396909713745
    2. 'g' → logprob: -1.6185396909713745
    3. ' combine' → logprob: -1.8685396909713745
    4. ' compose' → logprob: -2.743539810180664
    5. ' reduce' → logprob: -3.743539810180664
    6. ' complex' → logprob: -3.868539810180664
    7. 'compose' → logprob: -4.243539810180664
    8. 'combine' → logprob: -4.368539810180664
    9. ' multiply' → logprob: -4.493539810180664
    10. ' factorial' → logprob: -4.618539810180664

Token 62: 'er' (ID: 259)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.19627299904823303
    2. '_' → logprob: -2.4462730884552
    3. '('_' → logprob: -4.196272850036621
    4. '_(' → logprob: -4.321272850036621
    5. '(s' → logprob: -4.571272850036621
    6. '(*' → logprob: -4.571272850036621
    7. '('' → logprob: -4.821272850036621
    8. '("")' → logprob: -5.571272850036621
    9. '(str' → logprob: -5.696272850036621
    10. '(lst' → logprob: -5.821272850036621

Token 63: '(seq' (ID: 78669)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.833355724811554
    2. '(s' → logprob: -1.2083556652069092
    3. '(separator' → logprob: -2.083355665206909
    4. '(lst' → logprob: -2.583355665206909
    5. '(se' → logprob: -4.458355903625488
    6. '(seq' → logprob: -4.833355903625488
    7. '(del' → logprob: -4.958355903625488
    8. '(part' → logprob: -5.083355903625488
    9. '(x' → logprob: -5.083355903625488
    10. '(token' → logprob: -5.833355903625488

Token 64: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.15063470602035522
    2. '):' → logprob: -2.025634765625
    3. '):
' → logprob: -5.025634765625
    4. ')' → logprob: -7.025634765625
    5. '):
' → logprob: -8.775634765625
    6. ' ,' → logprob: -9.025634765625
    7. '   ' → logprob: -9.525634765625
    8. '=' → logprob: -10.900634765625
    9. ' ):' → logprob: -11.275634765625
    10. '):

' → logprob: -11.525634765625

Token 65: ' sep' (ID: 31529)
  Prédit: 'sep'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sep' → logprob: -0.22147411108016968
    2. ' sep' → logprob: -1.7214741706848145
    3. 'func' → logprob: -5.3464741706848145
    4. 'del' → logprob: -5.3464741706848145
    5. ' op' → logprob: -6.2214741706848145
    6. 'separator' → logprob: -6.2214741706848145
    7. ' delim' → logprob: -6.4714741706848145
    8. 'op' → logprob: -6.7214741706848145
    9. 'delimiter' → logprob: -6.8464741706848145
    10. ' func' → logprob: -7.0964741706848145

Token 66: '="' (ID: 580)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.10375583171844482
    2. '='' → logprob: -3.1037559509277344
    3. '=' → logprob: -3.2287559509277344
    4. '=None' → logprob: -4.603755950927734
    5. ')' → logprob: -6.728755950927734
    6. '=lambda' → logprob: -7.103755950927734
    7. '):
' → logprob: -7.228755950927734
    8. '="' → logprob: -7.728755950927734
    9. '=',' → logprob: -8.353755950927734
    10. '='.' → logprob: -9.728755950927734

Token 67: '"):
' (ID: 33645)
  Prédit: '"):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"):' → logprob: -0.10336139053106308
    2. '+' → logprob: -3.7283613681793213
    3. ',' → logprob: -3.8533613681793213
    4. ' +' → logprob: -4.2283616065979
    5. ' "' → logprob: -4.8533616065979
    6. '")' → logprob: -4.9783616065979
    7. '*' → logprob: -5.1033616065979
    8. '"):
' → logprob: -5.7283616065979
    9. ''):' → logprob: -5.8533616065979
    10. '):' → logprob: -6.2283616065979

Token 68: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.001470345538109541
    2. ' return' → logprob: -7.251470565795898
    3. 'return' → logprob: -7.376470565795898
    4. 'result' → logprob: -9.501470565795898
    5. '	return' → logprob: -11.251470565795898
    6. ' result' → logprob: -11.251470565795898
    7. ':return' → logprob: -12.376470565795898
    8. '  ' → logprob: -12.626470565795898
    9. ' ' → logprob: -12.751470565795898
    10. ':' → logprob: -12.751470565795898

Token 69: ' return' (ID: 622)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.756313145160675
    2. 'res' → logprob: -1.6313130855560303
    3. ' res' → logprob: -2.2563130855560303
    4. 'return' (adapté à ' return') → logprob: -2.2563130855560303
    5. ' result' → logprob: -3.1313130855560303
    6. '   ' → logprob: -3.3813130855560303
    7. 'if' → logprob: -4.006313323974609
    8. ' return' → logprob: -4.256313323974609
    9. 'out' → logprob: -5.881313323974609
    10. ' if' → logprob: -5.881313323974609

Token 70: ' reduce' (ID: 10389)
  Prédit: 'sep'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sep' → logprob: -0.06429742276668549
    2. 'reduce' → logprob: -2.8142974376678467
    3. ' sep' → logprob: -6.189297199249268
    4. ' reduce' → logprob: -8.939297676086426
    5. 'se' → logprob: -9.314297676086426
    6. '(se' → logprob: -11.314297676086426
    7. '""' → logprob: -11.439297676086426
    8. 'redu' → logprob: -12.189297676086426
    9. 're' → logprob: -12.439297676086426
    10. 'seq' → logprob: -12.564297676086426

Token 71: '(lambda' (ID: 43341)
  Prédit: '(add'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(add' → logprob: -0.02357422560453415
    2. '(lambda' → logprob: -3.773574113845825
    3. '(' → logprob: -9.023573875427246
    4. 'add' → logprob: -9.148573875427246
    5. '(operator' → logprob: -9.523573875427246
    6. 'lambda' → logprob: -11.773573875427246
    7. ' add' → logprob: -12.273573875427246
    8. '(m' → logprob: -12.648573875427246
    9. '```' → logprob: -12.898573875427246
    10. '(
' → logprob: -12.898573875427246

Token 72: ' a' (ID: 261)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.7605149745941162
    2. 'x' → logprob: -1.0105149745941162
    3. ' acc' → logprob: -2.135514974594116
    4. 'acc' → logprob: -3.885514974594116
    5. 'a' → logprob: -4.635515213012695
    6. ' lambda' → logprob: -4.760515213012695
    7. ' a' → logprob: -4.885515213012695
    8. 'lambda' → logprob: -5.885515213012695
    9. ' ' → logprob: -7.385515213012695
    10. ',' → logprob: -9.385515213012695

Token 73: ',b' (ID: 17568)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0005405236734077334
    2. ',b' → logprob: -7.625540733337402
    3. ' ,' → logprob: -11.500540733337402
    4. 'a' → logprob: -11.625540733337402
    5. ',a' → logprob: -11.750540733337402
    6. ',c' → logprob: -11.750540733337402
    7. 'b' → logprob: -12.250540733337402
    8. ',x' → logprob: -12.375540733337402
    9. 'x' → logprob: -13.375540733337402
    10. 'acc' → logprob: -13.625540733337402

Token 74: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0029096081852912903
    2. ' :' → logprob: -6.6279096603393555
    3. ',' → logprob: -6.7529096603393555
    4. 'a' → logprob: -8.002909660339355
    5. ':a' → logprob: -9.752909660339355
    6. ',a' → logprob: -11.502909660339355
    7. ':add' → logprob: -12.377909660339355
    8. ' a' → logprob: -13.377909660339355
    9. ',b' → logprob: -13.877909660339355
    10. 'b' → logprob: -14.002909660339355

Token 75: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.005880202632397413
    2. 'str' → logprob: -5.380880355834961
    3. ' a' → logprob: -6.880880355834961
    4. 'f' → logprob: -8.755880355834961
    5. ' str' → logprob: -9.755880355834961
    6. 'add' → logprob: -11.755880355834961
    7. '	a' → logprob: -13.005880355834961
    8. ' f' → logprob: -13.380880355834961
    9. ' ' → logprob: -13.755880355834961
    10. '(a' → logprob: -13.880880355834961

Token 76: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.11288758367300034
    2. ' +' → logprob: -2.2378876209259033
    3. ' ' → logprob: -9.987887382507324
    4. '+b' → logprob: -11.487887382507324
    5. ' ' → logprob: -13.737887382507324
    6. 'b' → logprob: -13.862887382507324
    7. '{' → logprob: -13.987887382507324
    8. 'a' → logprob: -14.112887382507324
    9. 'sep' → logprob: -14.487887382507324
    10. 'f' → logprob: -14.612887382507324

Token 77: 'sep' (ID: 46643)
  Prédit: 'sep'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sep' → logprob: -0.0025085974484682083
    2. ' sep' → logprob: -6.252508640289307
    3. 'b' → logprob: -7.502508640289307
    4. ' b' → logprob: -11.127508163452148
    5. 'se' → logprob: -12.377508163452148
    6. ' ' → logprob: -12.502508163452148
    7. '_sep' → logprob: -13.627508163452148
    8. 'seb' → logprob: -14.127508163452148
    9. 'separator' → logprob: -14.252508163452148
    10. '  ' → logprob: -14.377508163452148

Token 78: '+' (ID: 10)
  Prédit: '+b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+b' → logprob: -0.15183721482753754
    2. 'b' → logprob: -2.026837110519409
    3. '+' → logprob: -4.776837348937988
    4. ' b' → logprob: -7.651837348937988
    5. ' +' → logprob: -8.526837348937988
    6. ')b' → logprob: -11.651837348937988
    7. '*b' → logprob: -12.526837348937988
    8. 'str' → logprob: -12.901837348937988
    9. '	b' → logprob: -13.026837348937988
    10. ',b' → logprob: -13.026837348937988

Token 79: 'str' (ID: 689)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -3.309382373117842e-05
    2. 'str' → logprob: -10.500033378601074
    3. ' b' → logprob: -12.125033378601074
    4. ' str' → logprob: -16.625032424926758
    5. ')b' → logprob: -17.125032424926758
    6. ' ' → logprob: -18.000032424926758
    7. ')' → logprob: -19.750032424926758
    8. '   ' → logprob: -20.000032424926758
    9. '	b' → logprob: -20.000032424926758
    10. '  ' → logprob: -20.125032424926758

Token 80: '(b' (ID: 3229)
  Prédit: '(b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(b' → logprob: -0.10022909194231033
    2. 'b' → logprob: -2.350229024887085
    3. ')b' → logprob: -11.100229263305664
    4. '	b' → logprob: -12.725229263305664
    5. '(' → logprob: -13.100229263305664
    6. ' b' → logprob: -13.225229263305664
    7. ' (' → logprob: -16.225229263305664
    8. ',b' → logprob: -16.475229263305664
    9. ')' → logprob: -16.725229263305664
    10. ':b' → logprob: -17.350229263305664

Token 81: '),' (ID: 936)
  Prédit: '),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.012808280065655708
    2. ')' → logprob: -4.387808322906494
    3. ',' → logprob: -8.137807846069336
    4. ' ),' → logprob: -13.012807846069336
    5. '))' → logprob: -13.137807846069336
    6. ' ,' → logprob: -15.012807846069336
    7. ' ' → logprob: -15.137807846069336
    8. '},' → logprob: -15.262807846069336
    9. '   ' → logprob: -15.512807846069336
    10. ')
' → logprob: -15.512807846069336

Token 82: ' map' (ID: 4014)
  Prédit: 'seq'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'seq' → logprob: -0.3877435326576233
    2. ' seq' → logprob: -1.1377434730529785
    3. ' ans' → logprob: -7.1377434730529785
    4. '(seq' → logprob: -10.137743949890137
    5. 'ans' → logprob: -10.637743949890137
    6. ' sequence' → logprob: -12.262743949890137
    7. '[' → logprob: -12.387743949890137
    8. 'sequence' → logprob: -13.887743949890137
    9. ' sequ' → logprob: -14.012743949890137
    10. 'map' → logprob: -14.387743949890137

Token 83: '(str' (ID: 7946)
  Prédit: '(str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(str' → logprob: -0.10597192496061325
    2. '(seq' → logprob: -2.3559718132019043
    3. '(int' → logprob: -5.730971813201904
    4. '(lambda' → logprob: -6.230971813201904
    5. '(f' → logprob: -8.480972290039062
    6. '(' → logprob: -8.605972290039062
    7. '(sequence' → logprob: -10.480972290039062
    8. '(ans' → logprob: -10.605972290039062
    9. 'str' → logprob: -10.730972290039062
    10. '(iter' → logprob: -10.980972290039062

Token 84: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.04402363300323486
    2. '(seq' → logprob: -3.1690235137939453
    3. '(ans' → logprob: -8.044023513793945
    4. ' ,' → logprob: -8.169023513793945
    5. '<|end|>' → logprob: -8.544023513793945
    6. '),' → logprob: -9.169023513793945
    7. ',(' → logprob: -10.919023513793945
    8. '
' → logprob: -11.544023513793945
    9. ',...' → logprob: -11.669023513793945
    10. '<|end|>' → logprob: -11.669023513793945

Token 85: ' seq' (ID: 26775)
  Prédit: 'seq'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'seq' → logprob: -0.0006460758158937097
    2. ' seq' → logprob: -7.750646114349365
    3. '(seq' → logprob: -8.500645637512207
    4. 'ans' → logprob: -12.375645637512207
    5. ' ans' → logprob: -12.625645637512207
    6. '<|end|>' → logprob: -12.875645637512207
    7. '_seq' → logprob: -14.500645637512207
    8. ')' → logprob: -14.875645637512207
    9. '
' → logprob: -14.875645637512207
    10. 'se' → logprob: -15.375645637512207

Token 86: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.019212331622838974
    2. '),' → logprob: -4.019212245941162
    3. ')' → logprob: -7.019212245941162
    4. ')))' → logprob: -8.76921272277832
    5. '))
' → logprob: -12.14421272277832
    6. ' ))' → logprob: -12.51921272277832
    7. '))

' → logprob: -14.39421272277832
    8. ')),' → logprob: -15.26921272277832
    9. '))))' → logprob: -15.39421272277832
    10. ' ' → logprob: -15.39421272277832

Token 87: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0007981925155036151
    2. ')' → logprob: -7.250798225402832
    3. 'for' → logprob: -9.875798225402832
    4. ' print' → logprob: -11.750798225402832
    5. '#' → logprob: -12.625798225402832
    6. 'pr' → logprob: -12.750798225402832
    7. '[' → logprob: -13.000798225402832
    8. ')
' → logprob: -13.250798225402832
    9. '#print' → logprob: -13.250798225402832
    10. '```' → logprob: -13.375798225402832

Token 88: '(join' (ID: 117738)
  Prédit: '(join'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(join' → logprob: -0.03374343737959862
    2. '(' → logprob: -3.408743381500244
    3. '(ans' → logprob: -10.283743858337402
    4. 'join' → logprob: -10.408743858337402
    5. ' (' → logprob: -11.533743858337402
    6. '(print' → logprob: -12.033743858337402
    7. '(j' → logprob: -12.158743858337402
    8. '((' → logprob: -12.283743858337402
    9. '()' → logprob: -14.033743858337402
    10. '(f' → logprob: -14.033743858337402

Token 89: 'er' (ID: 259)
  Prédit: 'er'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -7.896309739408025e-07
    2. ' er' → logprob: -15.625000953674316
    3. 'r' → logprob: -15.750000953674316
    4. ')' → logprob: -16.5
    5. '(er' → logprob: -16.625
    6. 'e' → logprob: -16.75
    7. '(' → logprob: -17.0
    8. '```' → logprob: -17.125
    9. 'ner' → logprob: -17.5
    10. 'rer' → logprob: -17.625

Token 90: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -0.00012535012501757592
    2. '(' → logprob: -9.50012493133545
    3. ' (' → logprob: -10.12512493133545
    4. ')' → logprob: -12.25012493133545
    5. ')(' → logprob: -13.00012493133545
    6. ',' → logprob: -13.12512493133545
    7. '(N' → logprob: -15.25012493133545
    8. '((' → logprob: -15.62512493133545
    9. '(answer' → logprob: -15.62512493133545
    10. '(nums' → logprob: -15.75012493133545

Token 91: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.048615068197250366
    2. ')' → logprob: -3.048614978790283
    3. ')))' → logprob: -10.548615455627441
    4. ' ))' → logprob: -14.673615455627441
    5. '),' → logprob: -15.298615455627441
    6. '))
' → logprob: -15.423615455627441
    7. ' )' → logprob: -15.673615455627441
    8. ',' → logprob: -16.173614501953125
    9. '])' → logprob: -16.673614501953125
    10. ')
' → logprob: -16.798614501953125


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 89
Tokens correctement prédits (1ère position, stricte): 30
Tokens correctement prédits (1ère position, avec adaptation): 30
Tokens correctement prédits (top 10): 57
Précision stricte (1ère position): 33.71%
Précision adaptée (1ère position): 33.71%
Précision (top 10): 64.04%
================================================================================
