================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:47:28
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
input_num = int(input())
input_str = input()
if input_num >= 3200:
    print(input_str)
if input_num < 3200:
    print('red')
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'input' (ID: 2586)
  → Token d'amorce (pas de prédiction)

Token 1: '_num' (ID: 9834)
  → Token d'amorce (pas de prédiction)

Token 2: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 3: ' int' (ID: 677)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.020018314942717552
    2. '0' → logprob: -4.145018100738525
    3. ' int' → logprob: -6.895018100738525
    4. ' input' → logprob: -6.895018100738525
    5. 'input' → logprob: -7.145018100738525
    6. '42' → logprob: -8.395018577575684
    7. '"' → logprob: -8.520018577575684
    8. '1' → logprob: -8.645018577575684
    9. 'int' → logprob: -8.895018577575684
    10. '10' → logprob: -8.895018577575684

Token 4: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006391218863427639
    2. '(input' → logprob: -5.1313910484313965
    3. '```' → logprob: -8.881391525268555
    4. '(user' → logprob: -9.881391525268555
    5. '`' → logprob: -9.881391525268555
    6. '("("' → logprob: -10.256391525268555
    7. ' (' → logprob: -10.381391525268555
    8. '()' → logprob: -10.631391525268555
    9. '(open' → logprob: -10.756391525268555
    10. 'input' → logprob: -10.881391525268555

Token 5: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3176306486129761
    2. '(' → logprob: -1.317630648612976
    3. '())' → logprob: -6.317630767822266
    4. '()' → logprob: -6.567630767822266
    5. '))' → logprob: -8.067630767822266
    6. '")' → logprob: -8.942630767822266
    7. '')' → logprob: -9.067630767822266
    8. '">' → logprob: -9.442630767822266
    9. '```' → logprob: -9.692630767822266
    10. '`)' → logprob: -9.942630767822266

Token 6: 'input' (ID: 2586)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.22196079790592194
    2. '%' → logprob: -1.7219607830047607
    3. '*' → logprob: -4.84696102142334
    4. 'if' → logprob: -5.22196102142334
    5. '\n' → logprob: -5.97196102142334
    6. '+
' → logprob: -6.84696102142334
    7. '#' → logprob: -7.09696102142334
    8. ')' → logprob: -7.72196102142334
    9. '**' → logprob: -7.72196102142334
    10. '\' → logprob: -8.22196102142334

Token 7: '_str' (ID: 6182)
  Prédit: '_num'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_num' → logprob: -0.8499616980552673
    2. '(' → logprob: -0.9749616980552673
    3. '_' → logprob: -1.724961757659912
    4. '('_' → logprob: -4.849961757659912
    5. '("_' → logprob: -5.349961757659912
    6. '```' → logprob: -7.099961757659912
    7. '('' → logprob: -7.474961757659912
    8. '()' → logprob: -7.974961757659912
    9. '_number' → logprob: -8.349961280822754
    10. 'num' → logprob: -8.474961280822754

Token 8: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.6126423478126526
    2. '(' → logprob: -1.3626422882080078
    3. '_' → logprob: -2.237642288208008
    4. '()' → logprob: -3.112642288208008
    5. '```' → logprob: -4.612642288208008
    6. '[]' → logprob: -4.987642288208008
    7. ')' → logprob: -4.987642288208008
    8. ' =' → logprob: -5.112642288208008
    9. '[:]' → logprob: -5.237642288208008
    10. '=' → logprob: -5.612642288208008

Token 9: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.17996053397655487
    2. 'input' → logprob: -1.8049604892730713
    3. ' ' → logprob: -9.179960250854492
    4. '"' → logprob: -10.554960250854492
    5. ''' → logprob: -10.929960250854492
    6. ' str' → logprob: -11.304960250854492
    7. '(input' → logprob: -11.679960250854492
    8. ' "' → logprob: -11.679960250854492
    9. ' '' → logprob: -11.804960250854492
    10. '""' → logprob: -11.929960250854492

Token 10: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.02517961524426937
    2. '(' → logprob: -4.025179386138916
    3. '())' → logprob: -5.275179386138916
    4. ')' → logprob: -6.775179386138916
    5. '().' → logprob: -8.150179862976074
    6. '```' → logprob: -9.150179862976074
    7. '_str' → logprob: -9.775179862976074
    8. ' ()' → logprob: -10.025179862976074
    9. '()`' → logprob: -10.275179862976074
    10. '('' → logprob: -10.650179862976074

Token 11: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.1025172770023346
    2. 'for' → logprob: -2.8525173664093018
    3. 'result' → logprob: -3.9775173664093018
    4. 'i' → logprob: -4.977517127990723
    5. ' if' → logprob: -5.977517127990723
    6. 'print' → logprob: -6.227517127990723
    7. '[' → logprob: -6.352517127990723
    8. 'count' → logprob: -6.352517127990723
    9. 'output' → logprob: -7.102517127990723
    10. ')' → logprob: -7.477517127990723

Token 12: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.24197761714458466
    2. ' input' → logprob: -1.616977572441101
    3. 'input' → logprob: -4.116977691650391
    4. '  ' → logprob: -10.11697769165039
    5. ' ' → logprob: -10.49197769165039
    6. '(input' → logprob: -10.74197769165039
    7. ' (' → logprob: -11.24197769165039
    8. '_input' → logprob: -12.24197769165039
    9. '=input' → logprob: -12.74197769165039
    10. ' not' → logprob: -12.86697769165039

Token 13: '_num' (ID: 9834)
  Prédit: '_num'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_num' → logprob: -0.20523302257061005
    2. '_' → logprob: -1.7052329778671265
    3. '_str' → logprob: -5.705233097076416
    4. ' _' → logprob: -8.455232620239258
    5. '_n' → logprob: -9.580232620239258
    6. '_nums' → logprob: -10.705232620239258
    7. ' ' → logprob: -10.955232620239258
    8. '```' → logprob: -11.080232620239258
    9. '_number' → logprob: -11.455232620239258
    10. '[' → logprob: -11.455232620239258

Token 14: ' >=' (ID: 5064)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.05407082661986351
    2. ' ==' → logprob: -3.5540707111358643
    3. ' ' → logprob: -4.929070949554443
    4. '>' → logprob: -5.054070949554443
    5. ' >=' → logprob: -5.429070949554443
    6. ' <' → logprob: -5.679070949554443
    7. ' <=' → logprob: -6.429070949554443
    8. ' %' → logprob: -7.929070949554443
    9. '==' → logprob: -8.054070472717285
    10. '  ' → logprob: -9.304070472717285

Token 15: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6087766289710999
    2. '0' → logprob: -1.608776569366455
    3. '10' → logprob: -1.733776569366455
    4. '18' → logprob: -2.733776569366455
    5. '100' → logprob: -5.108776569366455
    6. '1' → logprob: -5.233776569366455
    7. '5' → logprob: -6.358776569366455
    8. '20' → logprob: -7.858776569366455
    9. '3' → logprob: -7.983776569366455
    10. '50' → logprob: -8.858777046203613

Token 16: '320' (ID: 15415)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.8629863262176514
    2. '10' → logprob: -1.2379863262176514
    3. '18' → logprob: -1.9879863262176514
    4. ' ' → logprob: -2.3629863262176514
    5. '100' → logprob: -3.3629863262176514
    6. '1' → logprob: -4.2379865646362305
    7. '5' → logprob: -5.4879865646362305
    8. '3' → logprob: -6.7379865646362305
    9. '20' → logprob: -7.2379865646362305
    10. '50' → logprob: -7.3629865646362305

Token 17: '0' (ID: 15)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.043155964463949203
    2. ' :' → logprob: -3.1681559085845947
    3. ' and' → logprob: -9.168155670166016
    4. '0' → logprob: -11.543155670166016
    5. ':**' → logprob: -11.668155670166016
    6. '>:' → logprob: -12.293155670166016
    7. '):' → logprob: -12.543155670166016
    8. ':
' → logprob: -12.793155670166016
    9. 'and' → logprob: -13.168155670166016
    10. '[:]' → logprob: -13.168155670166016

Token 18: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0013348824577406049
    2. ' :' → logprob: -6.6263346672058105
    3. ':
' → logprob: -13.376335144042969
    4. '：' → logprob: -13.376335144042969
    5. ':**' → logprob: -13.376335144042969
    6. ' and' → logprob: -14.126335144042969
    7. '):' → logprob: -14.126335144042969
    8. '>:' → logprob: -14.501335144042969
    9. '':' → logprob: -14.751335144042969
    10. '':'' → logprob: -15.001335144042969

Token 19: '   ' (ID: 271)
  Prédit: ' :'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' :' → logprob: -0.6060062050819397
    2. ':' → logprob: -1.356006145477295
    3. ' print' → logprob: -2.731006145477295
    4. 'print' → logprob: -2.856006145477295
    5. ' :
' → logprob: -3.231006145477295
    6. '\n' → logprob: -4.481006145477295
    7. '   ' → logprob: -4.856006145477295
    8. ' ' → logprob: -5.356006145477295
    9. ':
' → logprob: -5.981006145477295
    10. '\' → logprob: -6.106006145477295

Token 20: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.23671577870845795
    2. 'print' (adapté à ' print') → logprob: -1.7367157936096191
    3. ' pass' → logprob: -3.486715793609619
    4. '\n' → logprob: -6.486715793609619
    5. '   ' → logprob: -7.361715793609619
    6. '    ' → logprob: -7.736715793609619
    7. ' ' → logprob: -7.861715793609619
    8. 'pass' → logprob: -7.986715793609619
    9. ' \' → logprob: -8.736715316772461
    10. ' if' → logprob: -8.986715316772461

Token 21: '(input' (ID: 10054)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.5047285556793213
    2. '(' → logprob: -1.1297285556793213
    3. '('' → logprob: -2.8797285556793213
    4. '("("' → logprob: -4.629728317260742
    5. '("")' → logprob: -5.379728317260742
    6. '()' → logprob: -6.129728317260742
    7. '(input' → logprob: -8.879728317260742
    8. '("(' → logprob: -9.004728317260742
    9. '("""' → logprob: -9.629728317260742
    10. '(""' → logprob: -9.754728317260742

Token 22: '_str' (ID: 6182)
  Prédit: '_str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_str' → logprob: -0.001048412173986435
    2. '_num' → logprob: -7.001048564910889
    3. ')' → logprob: -9.62604808807373
    4. '_' → logprob: -10.25104808807373
    5. '_)' → logprob: -10.37604808807373
    6. ')_' → logprob: -12.75104808807373
    7. ' _' → logprob: -14.87604808807373
    8. '_sn' → logprob: -15.37604808807373
    9. '))' → logprob: -15.62604808807373
    10. 'str' → logprob: -15.62604808807373

Token 23: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.842555426876061e-06
    2. '))' → logprob: -13.000004768371582
    3. ' )' → logprob: -13.750004768371582
    4. '')' → logprob: -14.000004768371582
    5. '")' → logprob: -15.125004768371582
    6. '`)' → logprob: -15.875004768371582
    7. ')
' → logprob: -16.2500057220459
    8. ')`' → logprob: -17.0000057220459
    9. '()' → logprob: -17.1250057220459
    10. '）' → logprob: -17.2500057220459

Token 24: 'if' (ID: 366)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 25: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.08734841644763947
    2. ' ' → logprob: -3.212348461151123
    3. 'input' → logprob: -3.712348461151123
    4. ' not' → logprob: -4.212348461151123
    5. ' False' → logprob: -6.087348461151123
    6. ' _' → logprob: -7.962348461151123
    7. ' True' → logprob: -8.087347984313965
    8. 'False' → logprob: -8.087347984313965
    9. ' ' → logprob: -8.212347984313965
    10. ' __' → logprob: -8.587347984313965

Token 26: '_num' (ID: 9834)
  Prédit: '_num'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_num' → logprob: -0.0015951994573697448
    2. '_' → logprob: -6.7515950202941895
    3. '_str' → logprob: -8.376595497131348
    4. ' _' → logprob: -8.626595497131348
    5. ' <' → logprob: -12.751595497131348
    6. '_n' → logprob: -13.126595497131348
    7. '<num' → logprob: -13.376595497131348
    8. '__' → logprob: -13.501595497131348
    9. '<' → logprob: -13.876595497131348
    10. 'num' → logprob: -14.376595497131348

Token 27: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.02196778729557991
    2. '<' → logprob: -4.021967887878418
    3. ' >=' → logprob: -6.271967887878418
    4. ' <=' → logprob: -7.396967887878418
    5. ' ==' → logprob: -7.396967887878418
    6. ' >' → logprob: -8.146967887878418
    7. ' ' → logprob: -8.396967887878418
    8. '>' → logprob: -9.896967887878418
    9. '>=' → logprob: -10.146967887878418
    10. '==' → logprob: -10.396967887878418

Token 28: ' ' (ID: 220)
  Prédit: '320'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '320' → logprob: -0.009775093756616116
    2. ' ' → logprob: -4.634775161743164
    3. '   ' → logprob: -12.384775161743164
    4. '32' → logprob: -12.634775161743164
    5. '330' → logprob: -13.009775161743164
    6. '160' → logprob: -13.634775161743164
    7. '  ' → logprob: -13.634775161743164
    8. '400' → logprob: -13.634775161743164
    9. '300' → logprob: -14.134775161743164
    10. '120' → logprob: -14.259775161743164

Token 29: '320' (ID: 15415)
  Prédit: '320'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '320' → logprob: -0.00030066570616327226
    2. ' ' → logprob: -8.250300407409668
    3. '400' → logprob: -11.250300407409668
    4. '160' → logprob: -11.750300407409668
    5. '300' → logprob: -12.500300407409668
    6. '330' → logprob: -12.875300407409668
    7. '120' → logprob: -13.000300407409668
    8. '100' → logprob: -13.250300407409668
    9. '32' → logprob: -13.500300407409668
    10. '   ' → logprob: -14.000300407409668

Token 30: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -4.4849443838757e-06
    2. ' ' → logprob: -12.875004768371582
    3. '00' → logprob: -14.375004768371582
    4. '   ' → logprob: -14.625004768371582
    5. '000' → logprob: -16.000003814697266
    6. '```' → logprob: -16.125003814697266
    7. '1' → logprob: -16.625003814697266
    8. ',' → logprob: -16.812503814697266
    9. '  ' → logprob: -16.812503814697266
    10. '{' → logprob: -16.812503814697266

Token 31: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00037466554204002023
    2. ':
' → logprob: -8.250374794006348
    3. ' :' → logprob: -9.250374794006348
    4. '   ' → logprob: -11.375374794006348
    5. ' and' → logprob: -13.750374794006348
    6. ' :
' → logprob: -14.250374794006348
    7. 'else' → logprob: -14.750374794006348
    8. ':**' → logprob: -14.750374794006348
    9. ' else' → logprob: -15.000374794006348
    10. ':\' → logprob: -15.000374794006348

Token 32: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.46307772397994995
    2. '   ' → logprob: -1.5880777835845947
    3. 'print' → logprob: -3.2130777835845947
    4. '    ' → logprob: -3.4630777835845947
    5. '\' → logprob: -3.8380777835845947
    6. ''\' → logprob: -4.213077545166016
    7. ' pass' → logprob: -4.838077545166016
    8. '    
' → logprob: -4.963077545166016
    9. '"\' → logprob: -5.088077545166016
    10. ' print' → logprob: -5.463077545166016

Token 33: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.014247183687984943
    2. ' print' → logprob: -4.264247417449951
    3. 'prin' → logprob: -10.639246940612793
    4. '   ' → logprob: -11.389246940612793
    5. 'pr' → logprob: -11.639246940612793
    6. ' ' → logprob: -12.014246940612793
    7. 'prit' → logprob: -12.014246940612793
    8. 'pass' → logprob: -12.389246940612793
    9. '	print' → logprob: -12.389246940612793
    10. ' prin' → logprob: -12.639246940612793

Token 34: '('' (ID: 706)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.6748694777488708
    2. '("")' → logprob: -0.9248694777488708
    3. '()' → logprob: -2.9248695373535156
    4. '(' → logprob: -3.7998695373535156
    5. '('' → logprob: -4.049869537353516
    6. '("\"' → logprob: -8.674869537353516
    7. '(""' → logprob: -9.424869537353516
    8. '("\' → logprob: -9.674869537353516
    9. '("("' → logprob: -9.674869537353516
    10. '('"' → logprob: -9.799869537353516

Token 35: 'red' (ID: 1291)
  Prédit: 'red'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'red' → logprob: -0.0032947517465800047
    2. 'a' → logprob: -7.878294944763184
    3. 'light' → logprob: -8.128294944763184
    4. 'white' → logprob: -8.128294944763184
    5. 'Red' → logprob: -8.253294944763184
    6. 'color' → logprob: -8.378294944763184
    7. 'c' → logprob: -8.503294944763184
    8. '赤' → logprob: -8.628294944763184
    9. ''' → logprob: -8.878294944763184
    10. 'redd' → logprob: -9.378294944763184

Token 36: '')' (ID: 1542)
  Prédit: '')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.35091233253479004
    2. ''' → logprob: -1.22591233253479
    3. ')' → logprob: -6.600912094116211
    4. ''s' → logprob: -7.975912094116211
    5. '''' → logprob: -8.475912094116211
    6. 'print' → logprob: -8.600912094116211
    7. ''''' → logprob: -9.475912094116211
    8. '")' → logprob: -9.600912094116211
    9. '```' → logprob: -10.225912094116211
    10. '"' → logprob: -10.975912094116211


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 34
Tokens correctement prédits (1ère position, stricte): 13
Tokens correctement prédits (1ère position, avec adaptation): 14
Tokens correctement prédits (top 10): 28
Précision stricte (1ère position): 38.24%
Précision adaptée (1ère position): 41.18%
Précision (top 10): 82.35%
================================================================================
