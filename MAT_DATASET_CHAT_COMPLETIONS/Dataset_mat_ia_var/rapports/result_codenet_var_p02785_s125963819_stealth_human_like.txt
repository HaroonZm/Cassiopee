================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:28:18
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
# ok alors je commence par lire les valeurs
N, K = map(int, input().split())
heights = list(map(int, input().split()))

# euh, je crois qu'il faut trier du plus grand au plus petit ici
heights.sort(reverse=True)

# je crois que je dois enlever les K premiers... ouais je pense
for i in range(K):
    if heights:
        heights.pop(0)

# on somme le reste des hauteurs...
result = 0
for h in heights:
    result += h
print(result)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '#' (ID: 2)
  → Token d'amorce (pas de prédiction)

Token 1: ' ok' (ID: 4763)
  → Token d'amorce (pas de prédiction)

Token 2: ' alors' (ID: 17971)
  → Token d'amorce (pas de prédiction)

Token 3: ' je' (ID: 1264)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -1.2065540552139282
    2. '#' → logprob: -1.3315540552139282
    3. '\n' → logprob: -1.7065540552139282
    4. ',' → logprob: -2.2065539360046387
    5. ' ' → logprob: -3.3315539360046387
    6. '```' → logprob: -3.4565539360046387
    7. '
' → logprob: -3.7065539360046387
    8. '!' → logprob: -4.456553936004639
    9. '<|end|>' → logprob: -4.831553936004639
    10. ' #' → logprob: -5.081553936004639

Token 4: ' commence' (ID: 44755)
  Prédit: 'veux'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'veux' → logprob: -1.0392032861709595
    2. 's' → logprob: -1.2892032861709595
    3. 'vais' → logprob: -2.03920316696167
    4. ' veux' → logprob: -2.66420316696167
    5. ' vais' → logprob: -3.03920316696167
    6. ' continue' → logprob: -3.28920316696167
    7. ' ' → logprob: -3.53920316696167
    8. 'voud' → logprob: -4.28920316696167
    9. 'continue' → logprob: -4.78920316696167
    10. ' peux' → logprob: -5.16420316696167

Token 5: ' par' (ID: 686)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.0431170463562012
    2. ':' → logprob: -1.0431170463562012
    3. '```' → logprob: -2.043117046356201
    4. '!' → logprob: -3.543117046356201
    5. '\' → logprob: -3.793117046356201
    6. ',' → logprob: -3.918117046356201
    7. '_' → logprob: -4.043117046356201
    8. '.' → logprob: -4.043117046356201
    9. '`' → logprob: -4.168117046356201
    10. '\n' → logprob: -4.418117046356201

Token 6: ' lire' (ID: 46082)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.1586052179336548
    2. 'une' → logprob: -1.2836052179336548
    3. 'import' → logprob: -2.5336050987243652
    4. '```' → logprob: -2.5336050987243652
    5. 'faire' → logprob: -2.5336050987243652
    6. ' #' → logprob: -3.9086050987243652
    7. ' une' → logprob: -4.158605098724365
    8. 'le' → logprob: -4.158605098724365
    9. 'la' → logprob: -4.158605098724365
    10. 'mettre' → logprob: -4.283605098724365

Token 7: ' les' (ID: 1341)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.10434083640575409
    2. '_' → logprob: -3.3543407917022705
    3. 'le' → logprob: -4.22934103012085
    4. ' #' → logprob: -4.85434103012085
    5. ' le' → logprob: -4.97934103012085
    6. ',' → logprob: -5.22934103012085
    7. 'l' → logprob: -5.60434103012085
    8. '.' → logprob: -5.72934103012085
    9. '```' → logprob: -5.85434103012085
    10. ' :' → logprob: -6.10434103012085

Token 8: ' valeurs' (ID: 73668)
  Prédit: ' fichiers'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' fichiers' → logprob: -1.3755539655685425
    2. ' ' → logprob: -1.5005539655685425
    3. '_' → logprob: -2.000554084777832
    4. 'f' → logprob: -2.125554084777832
    5. '_f' → logprob: -3.125554084777832
    6. ' _' → logprob: -3.375554084777832
    7. 'l' → logprob: -3.500554084777832
    8. ' données' → logprob: -3.625554084777832
    9. ' data' → logprob: -3.875554084777832
    10. 'd' → logprob: -4.000554084777832

Token 9: '
' (ID: 198)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.893464207649231
    2. '_' → logprob: -1.518464207649231
    3. '#' → logprob: -2.0184640884399414
    4. ',' → logprob: -2.7684640884399414
    5. '.' → logprob: -3.2684640884399414
    6. ':' → logprob: -3.6434640884399414
    7. '\n' → logprob: -3.8934640884399414
    8. 's' → logprob: -4.143464088439941
    9. '```' → logprob: -4.518464088439941
    10. '\' → logprob: -4.893464088439941

Token 10: 'N' (ID: 45)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.46406275033950806
    2. '_' → logprob: -1.2140626907348633
    3. ',' → logprob: -3.8390626907348633
    4. ':' → logprob: -4.464062690734863
    5. '.' → logprob: -5.089062690734863
    6. 's' → logprob: -5.089062690734863
    7. ' =' → logprob: -5.589062690734863
    8. '#' → logprob: -5.964062690734863
    9. '```' → logprob: -6.089062690734863
    10. ' :' → logprob: -6.339062690734863

Token 11: ',' (ID: 11)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.5363991856575012
    2. ' =' → logprob: -1.6613991260528564
    3. 'ombre' → logprob: -2.1613991260528564
    4. '=' → logprob: -3.2863991260528564
    5. 'ombres' → logprob: -3.9113991260528564
    6. 'umber' → logprob: -4.2863993644714355
    7. ',' → logprob: -4.6613993644714355
    8. '_' → logprob: -4.9113993644714355
    9. ' ' → logprob: -5.2863993644714355
    10. '[' → logprob: -5.5363993644714355

Token 12: ' K' (ID: 658)
  Prédit: ' M'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' M' → logprob: -0.5764822959899902
    2. 'M' → logprob: -0.9514822959899902
    3. ' ' → logprob: -3.2014822959899902
    4. 'm' → logprob: -5.70148229598999
    5. ' =' → logprob: -6.07648229598999
    6. '"' → logprob: -6.20148229598999
    7. ''' → logprob: -7.32648229598999
    8. '  ' → logprob: -7.95148229598999
    9. 'space' → logprob: -7.95148229598999
    10. '=' → logprob: -8.201482772827148

Token 13: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.03392621874809265
    2. '=' → logprob: -3.408926248550415
    3. ',' → logprob: -8.283926010131836
    4. ' ' → logprob: -11.783926010131836
    5. '=input' → logprob: -11.908926010131836
    6. ' ,' → logprob: -12.033926010131836
    7. '<|end|>' → logprob: -13.158926010131836
    8. ' =
' → logprob: -13.533926010131836
    9. '=int' → logprob: -13.908926010131836
    10. ')' → logprob: -14.408926010131836

Token 14: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.04899948835372925
    2. 'map' → logprob: -3.048999547958374
    3. ' input' → logprob: -8.048999786376953
    4. 'input' → logprob: -9.923999786376953
    5. ' ' → logprob: -10.798999786376953
    6. ' list' → logprob: -10.923999786376953
    7. 'list' → logprob: -13.048999786376953
    8. 'int' → logprob: -13.548999786376953
    9. ' int' → logprob: -14.048999786376953
    10. '10' → logprob: -15.298999786376953

Token 15: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.07503441721200943
    2. '(' → logprob: -2.7000343799591064
    3. '(str' → logprob: -5.3250346183776855
    4. 'int' → logprob: -9.325034141540527
    5. '(lambda' → logprob: -9.825034141540527
    6. '(input' → logprob: -10.825034141540527
    7. '(
' → logprob: -10.825034141540527
    8. '<int' → logprob: -11.700034141540527
    9. '[int' → logprob: -11.825034141540527
    10. '(list' → logprob: -12.950034141540527

Token 16: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.1279878169298172
    2. ')' → logprob: -2.752987861633301
    3. '(' → logprob: -3.377987861633301
    4. 'input' → logprob: -3.877987861633301
    5. ',input' → logprob: -7.252987861633301
    6. ' input' → logprob: -7.877987861633301
    7. ',' → logprob: -9.1279878616333
    8. '=input' → logprob: -9.6279878616333
    9. '```' → logprob: -9.8779878616333
    10. '[input' → logprob: -10.1279878616333

Token 17: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.07891678065061569
    2. ' input' → logprob: -2.5789167881011963
    3. '(input' → logprob: -11.203916549682617
    4. ')' → logprob: -11.328916549682617
    5. ',input' → logprob: -14.328916549682617
    6. '=input' → logprob: -14.578916549682617
    7. '	input' → logprob: -15.828916549682617
    8. ' )' → logprob: -16.078916549682617
    9. '<input' → logprob: -16.828916549682617
    10. ' ' → logprob: -17.078916549682617

Token 18: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.7483454942703247
    2. '())' → logprob: -0.7483454942703247
    3. '().' → logprob: -2.998345375061035
    4. '());' → logprob: -6.623345375061035
    5. '()))' → logprob: -7.373345375061035
    6. '(' → logprob: -7.748345375061035
    7. ')' → logprob: -8.123345375061035
    8. '()>' → logprob: -8.123345375061035
    9. '();)' → logprob: -8.623345375061035
    10. '()-' → logprob: -9.498345375061035

Token 19: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0019335162360221148
    2. 'strip' → logprob: -6.251933574676514
    3. 'rstrip' → logprob: -12.626933097839355
    4. ' split' → logprob: -13.876933097839355
    5. '(split' → logprob: -14.626933097839355
    6. 'read' → logprob: -16.001934051513672
    7. ')' → logprob: -16.751934051513672
    8. 'spl' → logprob: -17.126934051513672
    9. 's' → logprob: -17.876934051513672
    10. ' strip' → logprob: -18.001934051513672

Token 20: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3165286183357239
    2. '())' → logprob: -1.816528558731079
    3. '))' → logprob: -2.316528558731079
    4. '()))' → logprob: -5.066528797149658
    5. '()' → logprob: -5.941528797149658
    6. '('' → logprob: -7.191528797149658
    7. '(' → logprob: -9.1915283203125
    8. '')' → logprob: -9.3165283203125
    9. '(','' → logprob: -9.8165283203125
    10. ''))' → logprob: -10.0665283203125

Token 21: 'he' (ID: 273)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.2576088309288025
    2. ' ' → logprob: -2.7576088905334473
    3. ')' → logprob: -3.1326088905334473
    4. ' for' → logprob: -3.3826088905334473
    5. '#' → logprob: -3.8826088905334473
    6. '
' → logprob: -4.382608890533447
    7. '\n' → logprob: -4.507608890533447
    8. 'while' → logprob: -4.507608890533447
    9. '[' → logprob: -5.382608890533447
    10. 'a' → logprob: -5.632608890533447

Token 22: 'ights' (ID: 3635)
  Prédit: 'ights'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ights' → logprob: -0.3144259452819824
    2. 'ight' → logprob: -1.3144259452819824
    3. 'ig' → logprob: -7.939425945281982
    4. 'ap' → logprob: -8.18942642211914
    5. 'aps' → logprob: -8.68942642211914
    6. 'igh' → logprob: -9.31442642211914
    7. 'i' → logprob: -9.68942642211914
    8. 'igth' → logprob: -9.81442642211914
    9. 'igts' → logprob: -9.93942642211914
    10. 'a' → logprob: -10.93942642211914

Token 23: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.011969020590186119
    2. '[]' → logprob: -4.761969089508057
    3. '[:]' → logprob: -7.386969089508057
    4. ')' → logprob: -7.636969089508057
    5. '<|end|>' → logprob: -8.136968612670898
    6. ' =' → logprob: -8.136968612670898
    7. '[i' → logprob: -8.261968612670898
    8. '=' → logprob: -8.511968612670898
    9. '[N' → logprob: -8.511968612670898
    10. '```' → logprob: -8.511968612670898

Token 24: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.25202488899230957
    2. ' list' → logprob: -1.5020248889923096
    3. '[' → logprob: -9.75202465057373
    4. '[list' → logprob: -10.87702465057373
    5. '(list' → logprob: -11.50202465057373
    6. ' [' → logprob: -12.50202465057373
    7. '[]' → logprob: -12.62702465057373
    8. 'map' → logprob: -14.50202465057373
    9. ' []' → logprob: -14.87702465057373
    10. '=list' → logprob: -15.75202465057373

Token 25: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03380187600851059
    2. '(int' → logprob: -3.533801794052124
    3. '(input' → logprob: -5.908802032470703
    4. '(range' → logprob: -8.158802032470703
    5. '(.' → logprob: -8.658802032470703
    6. '(map' → logprob: -8.783802032470703
    7. '(

' → logprob: -8.783802032470703
    8. '()' → logprob: -9.033802032470703
    9. '(eval' → logprob: -9.658802032470703
    10. '(
' → logprob: -9.908802032470703

Token 26: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.3137701153755188
    2. '(' → logprob: -1.313770055770874
    3. '(input' → logprob: -8.688770294189453
    4. '<int' → logprob: -8.938770294189453
    5. '(str' → logprob: -9.688770294189453
    6. '(
' → logprob: -10.188770294189453
    7. '(lambda' → logprob: -10.688770294189453
    8. '<|end|>' → logprob: -10.938770294189453
    9. '[int' → logprob: -11.563770294189453
    10. '(eval' → logprob: -11.688770294189453

Token 27: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7349900603294373
    2. '(input' → logprob: -1.234990119934082
    3. ',input' → logprob: -1.484990119934082
    4. '(' → logprob: -5.859990119934082
    5. ' ,' → logprob: -9.234990119934082
    6. 'input' → logprob: -9.359990119934082
    7. '),' → logprob: -10.359990119934082
    8. '=input' → logprob: -10.734990119934082
    9. ')' → logprob: -10.984990119934082
    10. '<input' → logprob: -11.484990119934082

Token 28: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.576005756855011
    2. ' input' → logprob: -0.826005756855011
    3. '(input' → logprob: -9.701005935668945
    4. ',input' → logprob: -12.701005935668945
    5. '=input' → logprob: -13.576005935668945
    6. '	input' → logprob: -14.826005935668945
    7. ')' → logprob: -16.076005935668945
    8. '[input' → logprob: -16.451005935668945
    9. '<input' → logprob: -16.576005935668945
    10. '(' → logprob: -16.951005935668945

Token 29: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0007252985378727317
    2. '()' → logprob: -7.250725269317627
    3. '())' → logprob: -12.375725746154785
    4. '()))' → logprob: -12.500725746154785
    5. '(' → logprob: -12.625725746154785
    6. '()).' → logprob: -13.625725746154785
    7. ' ().' → logprob: -13.750725746154785
    8. '()>' → logprob: -15.000725746154785
    9. ')' → logprob: -15.625725746154785
    10. '().__' → logprob: -15.625725746154785

Token 30: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -1.0280383548888494e-06
    2. 'strip' → logprob: -14.500000953674316
    3. '(split' → logprob: -15.750000953674316
    4. ' split' → logprob: -15.750000953674316
    5. 'spl' → logprob: -16.000001907348633
    6. 'rstrip' → logprob: -16.750001907348633
    7. 's' → logprob: -19.875001907348633
    8. '.split' → logprob: -20.250001907348633
    9. ')' → logprob: -20.750001907348633
    10. 'plit' → logprob: -21.250001907348633

Token 31: '()))

' (ID: 125972)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.06141246482729912
    2. '())' → logprob: -3.0614125728607178
    3. '()' → logprob: -4.936412334442139
    4. '))' → logprob: -5.311412334442139
    5. ')' → logprob: -7.936412334442139
    6. '(' → logprob: -8.561412811279297
    7. '()));' → logprob: -10.436412811279297
    8. '())))' → logprob: -10.811412811279297
    9. '()))
' → logprob: -11.436412811279297
    10. '()>' → logprob: -12.561412811279297

Token 32: '#' (ID: 2)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.8465942740440369
    2. 'he' → logprob: -1.2215943336486816
    3. 'max' → logprob: -2.4715943336486816
    4. 'count' → logprob: -3.0965943336486816
    5. 's' → logprob: -3.8465943336486816
    6. 'dp' → logprob: -4.471594333648682
    7. 'h' → logprob: -4.471594333648682
    8. 'i' → logprob: -4.471594333648682
    9. 'result' → logprob: -4.596594333648682
    10. 'sum' → logprob: -4.596594333648682

Token 33: ' e' (ID: 319)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'max' → logprob: -1.2035950422286987
    2. 'for' → logprob: -1.4535950422286987
    3. 'he' → logprob: -2.2035951614379883
    4. 'dp' → logprob: -2.8285951614379883
    5. 'min' → logprob: -2.9535951614379883
    6. ' for' → logprob: -3.0785951614379883
    7. ' max' → logprob: -3.3285951614379883
    8. 'count' → logprob: -3.5785951614379883
    9. 'result' → logprob: -3.9535951614379883
    10. 'total' → logprob: -4.328595161437988

Token 34: 'uh' (ID: 4370)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.8580176830291748
    2. 'n' → logprob: -1.6080176830291748
    3. '#' → logprob: -1.7330176830291748
    4. 'x' → logprob: -2.733017683029175
    5. 'l' → logprob: -2.983017683029175
    6. 'm' → logprob: -3.608017683029175
    7. 'for' → logprob: -3.733017683029175
    8. 'i' → logprob: -5.233017921447754
    9. 't' → logprob: -5.358017921447754
    10. 's' → logprob: -5.858017921447754

Token 35: ',' (ID: 11)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.7764767408370972
    2. 'for' → logprob: -0.9014767408370972
    3. 'max' → logprob: -4.151476860046387
    4. 'i' → logprob: -4.276476860046387
    5. ' max' → logprob: -4.276476860046387
    6. 's' → logprob: -4.276476860046387
    7. ' i' → logprob: -4.651476860046387
    8. ' heights' → logprob: -4.776476860046387
    9. '```' → logprob: -4.901476860046387
    10. ' if' → logprob: -5.026476860046387

Token 36: ' je' (ID: 1264)
  Prédit: ' heights'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' heights' → logprob: -1.4151874780654907
    2. ' max' → logprob: -1.9151874780654907
    3. 'he' → logprob: -2.290187358856201
    4. 'max' → logprob: -2.665187358856201
    5. ' result' → logprob: -2.915187358856201
    6. 'dp' → logprob: -3.165187358856201
    7. ' min' → logprob: -3.415187358856201
    8. ' sorted' → logprob: -3.540187358856201
    9. ' dp' → logprob: -3.540187358856201
    10. ' i' → logprob: -3.665187358856201

Token 37: ' crois' (ID: 65485)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.7525489330291748
    2. 's' → logprob: -1.7525489330291748
    3. ' for' → logprob: -1.7525489330291748
    4. ' veux' → logprob: -3.002548933029175
    5. ' vais' → logprob: -3.377548933029175
    6. ' pense' → logprob: -4.627549171447754
    7. '=' → logprob: -4.627549171447754
    8. '.' → logprob: -4.627549171447754
    9. 'v' → logprob: -4.877549171447754
    10. '#' → logprob: -5.252549171447754

Token 38: ' qu' (ID: 474)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.08159413933753967
    2. ',' → logprob: -2.831594228744507
    3. 's' → logprob: -4.956593990325928
    4. ' ,' → logprob: -5.956593990325928
    5. '_' → logprob: -6.581593990325928
    6. ' for' → logprob: -6.831593990325928
    7. '(' → logprob: -6.956593990325928
    8. 'for' → logprob: -7.081593990325928
    9. '#' → logprob: -7.206593990325928
    10. '  ' → logprob: -7.331593990325928

Token 39: ''il' (ID: 14683)
  Prédit: ' que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.2254195511341095
    2. ' qu' → logprob: -1.975419521331787
    3. 'que' → logprob: -3.350419521331787
    4. ''il' → logprob: -4.850419521331787
    5. ' ' → logprob: -5.350419521331787
    6. ''' → logprob: -5.725419521331787
    7. '```' → logprob: -5.975419521331787
    8. 'qu' → logprob: -6.350419521331787
    9. ' il' → logprob: -6.475419521331787
    10. ' y' → logprob: -6.600419521331787

Token 40: ' faut' (ID: 17821)
  Prédit: ' faut'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' faut' → logprob: -0.20634286105632782
    2. 'f' → logprob: -2.331342935562134
    3. ' f' → logprob: -3.581342935562134
    4. ' faudra' → logprob: -3.956342935562134
    5. ' manque' → logprob: -4.081342697143555
    6. ' faudrait' → logprob: -4.331342697143555
    7. '_f' → logprob: -6.081342697143555
    8. ' falt' → logprob: -6.331342697143555
    9. ' faud' → logprob: -6.456342697143555
    10. 's' → logprob: -6.456342697143555

Token 41: ' tr' (ID: 498)
  Prédit: ' tr'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tr' → logprob: -0.32667404413223267
    2. 'tr' → logprob: -1.326673984527588
    3. ' calcul' → logprob: -5.576673984527588
    4. 'calcul' → logprob: -6.326673984527588
    5. ' trie' → logprob: -6.826673984527588
    6. ' trouver' → logprob: -7.076673984527588
    7. '_tr' → logprob: -7.576673984527588
    8. ' max' → logprob: -7.701673984527588
    9. ' les' → logprob: -7.701673984527588
    10. 'max' → logprob: -7.701673984527588

Token 42: 'ier' (ID: 905)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.4384985864162445
    2. 'y' → logprob: -1.563498616218567
    3. 'ier' → logprob: -2.8134984970092773
    4. 'ie' → logprob: -3.4384984970092773
    5. 'ié' → logprob: -3.4384984970092773
    6. 'e' → logprob: -4.813498497009277
    7. 'ies' → logprob: -6.188498497009277
    8. 'ans' → logprob: -6.313498497009277
    9. 'iangle' → logprob: -6.938498497009277
    10. '```' → logprob: -7.063498497009277

Token 43: ' du' (ID: 1462)
  Prédit: 'he'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'he' → logprob: -0.006395368836820126
    2. 's' → logprob: -5.88139533996582
    3. ' heights' → logprob: -5.88139533996582
    4. '(' → logprob: -8.50639533996582
    5. ')' → logprob: -8.50639533996582
    6. '```' → logprob: -9.13139533996582
    7. ',' → logprob: -10.00639533996582
    8. '(
' → logprob: -10.00639533996582
    9. '.' → logprob: -10.13139533996582
    10. '_he' → logprob: -10.25639533996582

Token 44: ' plus' (ID: 2932)
  Prédit: ' plus'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' plus' → logprob: -0.006691918708384037
    2. 'plus' → logprob: -5.756691932678223
    3. 's' → logprob: -6.631691932678223
    4. 'c' → logprob: -8.006691932678223
    5. ' ' → logprob: -8.131691932678223
    6. ' c' → logprob: -8.381691932678223
    7. 'ha' → logprob: -8.631691932678223
    8. '+' → logprob: -9.006691932678223
    9. ',' → logprob: -9.131691932678223
    10. ' haut' → logprob: -9.256691932678223

Token 45: ' grand' (ID: 6363)
  Prédit: 'grand'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'grand' → logprob: -0.07361092418432236
    2. ' grand' → logprob: -2.69861102104187
    3. '```' → logprob: -6.823610782623291
    4. 'gr' → logprob: -7.198610782623291
    5. 'haut' → logprob: -8.07361125946045
    6. ' ' → logprob: -8.19861125946045
    7. ',' → logprob: -8.57361125946045
    8. 'pet' → logprob: -8.69861125946045
    9. 'é' → logprob: -9.32361125946045
    10. ' haut' → logprob: -9.32361125946045

Token 46: ' au' (ID: 2791)
  Prédit: 'he'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'he' → logprob: -0.15114973485469818
    2. ',' → logprob: -2.5261497497558594
    3. ' heights' → logprob: -3.4011497497558594
    4. 's' → logprob: -4.401149749755859
    5. ' ,' → logprob: -4.776149749755859
    6. '_he' → logprob: -6.276149749755859
    7. '```' → logprob: -6.401149749755859
    8. 'e' → logprob: -7.526149749755859
    9. ')' → logprob: -7.901149749755859
    10. ' ' → logprob: -8.15114974975586

Token 47: ' plus' (ID: 2932)
  Prédit: 'plus'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'plus' → logprob: -0.43421295285224915
    2. 'grand' → logprob: -2.4342129230499268
    3. '#' → logprob: -2.5592129230499268
    4. '```' → logprob: -3.0592129230499268
    5. 'ordre' → logprob: -3.1842129230499268
    6. ' plus' → logprob: -3.6842129230499268
    7. '>' → logprob: -3.9342129230499268
    8. 'au' → logprob: -4.184213161468506
    9. '>>>' → logprob: -5.059213161468506
    10. 'moins' → logprob: -5.684213161468506

Token 48: ' petit' (ID: 20577)
  Prédit: 'grand'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'grand' → logprob: -0.5268705487251282
    2. '-' → logprob: -1.6518704891204834
    3. 'he' → logprob: -2.6518704891204834
    4. '<|end|>' → logprob: -3.9018704891204834
    5. '_' → logprob: -4.0268707275390625
    6. ',' → logprob: -4.1518707275390625
    7. '```' → logprob: -4.1518707275390625
    8. 'ha' → logprob: -4.5268707275390625
    9. '>>>' → logprob: -4.5268707275390625
    10. 'haut' → logprob: -5.0268707275390625

Token 49: ' ici' (ID: 27994)
  Prédit: 'he'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'he' → logprob: -0.020965391770005226
    2. ')
' → logprob: -4.020965576171875
    3. ')' → logprob: -6.145965576171875
    4. '
' → logprob: -8.395965576171875
    5. ' heights' → logprob: -8.520965576171875
    6. 's' → logprob: -9.520965576171875
    7. 'sorted' → logprob: -9.770965576171875
    8. '```' → logprob: -10.145965576171875
    9. 'height' → logprob: -10.645965576171875
    10. '),' → logprob: -12.020965576171875

Token 50: '
' (ID: 198)
  Prédit: 'he'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'he' → logprob: -0.005994916893541813
    2. ')' → logprob: -5.63099479675293
    3. ')
' → logprob: -6.50599479675293
    4. ' heights' → logprob: -7.50599479675293
    5. 's' → logprob: -8.88099479675293
    6. 'sorted' → logprob: -9.50599479675293
    7. 'height' → logprob: -10.00599479675293
    8. ',' → logprob: -10.38099479675293
    9. '
' → logprob: -11.25599479675293
    10. '```' → logprob: -11.63099479675293

Token 51: 'he' (ID: 273)
  Prédit: 'he'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'he' → logprob: -1.8193366486229934e-05
    2. 'sorted' → logprob: -11.875018119812012
    3. ' heights' → logprob: -12.250018119812012
    4. 'height' → logprob: -12.625018119812012
    5. '```' → logprob: -13.625018119812012
    6. ')' → logprob: -13.750018119812012
    7. ',' → logprob: -15.875018119812012
    8. 's' → logprob: -15.875018119812012
    9. ')
' → logprob: -16.000019073486328
    10. '_he' → logprob: -16.375019073486328

Token 52: 'ights' (ID: 3635)
  Prédit: 'ights'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ights' → logprob: -6.630610641877865e-06
    2. 'ght' → logprob: -12.750006675720215
    3. 'ight' → logprob: -13.375006675720215
    4. 'igts' → logprob: -14.000006675720215
    5. 'igh' → logprob: -14.375006675720215
    6. 'ig' → logprob: -14.875006675720215
    7. 'IGHTS' → logprob: -15.125006675720215
    8. 'i' → logprob: -16.3750057220459
    9. 'ught' → logprob: -17.8750057220459
    10. '```' → logprob: -18.7500057220459

Token 53: '.sort' (ID: 19551)
  Prédit: '.sort'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.sort' → logprob: -0.014928923919796944
    2. '.' → logprob: -4.264928817749023
    3. '[::-' → logprob: -8.139928817749023
    4. '.reverse' → logprob: -8.889928817749023
    5. '_sorted' → logprob: -9.389928817749023
    6. '.sorted' → logprob: -9.514928817749023
    7. 'sorted' → logprob: -9.764928817749023
    8. '=' → logprob: -9.764928817749023
    9. '[:]' → logprob: -10.889928817749023
    10. 'sort' → logprob: -11.514928817749023

Token 54: '(reverse' (ID: 110806)
  Prédit: '(reverse'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(reverse' → logprob: -0.0008273754501715302
    2. '(' → logprob: -7.625827312469482
    3. 'reverse' → logprob: -8.00082778930664
    4. '(re' → logprob: -13.87582778930664
    5. '_reverse' → logprob: -13.87582778930664
    6. ' reverse' → logprob: -14.37582778930664
    7. 'Reverse' → logprob: -14.75082778930664
    8. '()' → logprob: -14.87582778930664
    9. '.reverse' → logprob: -15.12582778930664
    10. '(key' → logprob: -15.37582778930664

Token 55: '=True' (ID: 7827)
  Prédit: '=True'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=True' → logprob: -0.005056922324001789
    2. '=' → logprob: -6.005056858062744
    3. ')' → logprob: -6.130056858062744
    4. '())' → logprob: -8.880057334899902
    5. '(True' → logprob: -8.880057334899902
    6. '()' → logprob: -9.130057334899902
    7. '(' → logprob: -11.755057334899902
    8. 'True' → logprob: -12.755057334899902
    9. ')=' → logprob: -12.880057334899902
    10. ' =' → logprob: -14.380057334899902

Token 56: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.36574100604048e-06
    2. ')
' → logprob: -13.250004768371582
    3. '))' → logprob: -13.375004768371582
    4. ' )' → logprob: -14.125004768371582
    5. ')#' → logprob: -16.875003814697266
    6. '#' → logprob: -17.000003814697266
    7. ')

' → logprob: -17.250003814697266
    8. '`)' → logprob: -17.250003814697266
    9. '()' → logprob: -17.875003814697266
    10. '),' → logprob: -18.000003814697266

Token 57: '#' (ID: 2)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'max' → logprob: -1.4283455610275269
    2. 'total' → logprob: -1.6783455610275269
    3. 'for' → logprob: -1.8033455610275269
    4. 'result' → logprob: -2.4283456802368164
    5. 'if' → logprob: -2.6783456802368164
    6. 'sum' → logprob: -2.9283456802368164
    7. 'count' → logprob: -3.3033456802368164
    8. 'answer' → logprob: -3.6783456802368164
    9. 'selected' → logprob: -4.178345680236816
    10. 'current' → logprob: -4.178345680236816

Token 58: ' je' (ID: 1264)
  Prédit: ' sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' sum' → logprob: -1.6309555768966675
    2. ' total' → logprob: -2.130955696105957
    3. ' result' → logprob: -2.380955696105957
    4. 'sum' → logprob: -2.505955696105957
    5. ' answer' → logprob: -2.755955696105957
    6. 'total' → logprob: -2.755955696105957
    7. 'result' → logprob: -2.755955696105957
    8. 'selected' → logprob: -2.880955696105957
    9. ' selected' → logprob: -3.505955696105957
    10. ' max' → logprob: -3.505955696105957

Token 59: ' crois' (ID: 65485)
  Prédit: ' vais'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' vais' → logprob: -1.0564781427383423
    2. 'for' → logprob: -1.5564781427383423
    3. 's' → logprob: -1.9314781427383423
    4. ' for' → logprob: -2.3064780235290527
    5. ' pense' → logprob: -3.0564780235290527
    6. ' #' → logprob: -3.3064780235290527
    7. ' veux' → logprob: -3.9314780235290527
    8. '#' → logprob: -4.181478023529053
    9. 'p' → logprob: -4.431478023529053
    10. 'if' → logprob: -4.931478023529053

Token 60: ' que' (ID: 661)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.33344653248786926
    2. 'for' → logprob: -2.708446502685547
    3. '<|end|>' → logprob: -3.583446502685547
    4. 's' → logprob: -3.708446502685547
    5. ':' → logprob: -3.958446502685547
    6. '#' → logprob: -4.083446502685547
    7. 'def' → logprob: -4.208446502685547
    8. '()' → logprob: -4.208446502685547
    9. '(
' → logprob: -4.333446502685547
    10. ' (' → logprob: -4.333446502685547

Token 61: ' je' (ID: 1264)
  Prédit: ' on'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' on' → logprob: -0.7584823369979858
    2. ' K' → logprob: -1.8834823369979858
    3. ' c' → logprob: -2.2584824562072754
    4. ' j' → logprob: -2.6334824562072754
    5. ' je' → logprob: -3.3834824562072754
    6. ' que' → logprob: -3.7584824562072754
    7. 'K' → logprob: -3.8834824562072754
    8. ' len' → logprob: -4.133482456207275
    9. ' le' → logprob: -4.383482456207275
    10. 'je' → logprob: -4.383482456207275

Token 62: ' dois' (ID: 18435)
  Prédit: ' vais'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' vais' → logprob: -1.136505365371704
    2. ' dois' → logprob: -1.511505365371704
    3. '#' → logprob: -2.011505365371704
    4. 's' → logprob: -2.261505365371704
    5. ' peux' → logprob: -2.386505365371704
    6. ' n' → logprob: -3.261505365371704
    7. 'do' → logprob: -3.386505365371704
    8. 'n' → logprob: -4.386505126953125
    9. 'vais' → logprob: -4.886505126953125
    10. ' #' → logprob: -5.136505126953125

Token 63: ' enlever' (ID: 196982)
  Prédit: ' prendre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' prendre' → logprob: -1.388418436050415
    2. ' calcul' → logprob: -2.013418436050415
    3. 'sum' → logprob: -2.513418436050415
    4. 's' → logprob: -2.513418436050415
    5. ' sélectionner' → logprob: -2.888418436050415
    6. 'prendre' → logprob: -3.013418436050415
    7. 'calcul' → logprob: -3.388418436050415
    8. ' sum' → logprob: -3.513418436050415
    9. '#' → logprob: -3.513418436050415
    10. ' garder' → logprob: -3.763418436050415

Token 64: ' les' (ID: 1341)
  Prédit: ' K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.24294047057628632
    2. ' les' → logprob: -1.9929404258728027
    3. 'K' → logprob: -2.7429404258728027
    4. 'les' → logprob: -4.367940425872803
    5. 's' → logprob: -7.367940425872803
    6. 'le' → logprob: -7.742940425872803
    7. ' la' → logprob: -8.117940902709961
    8. '<|end|>' → logprob: -8.867940902709961
    9. ' ' → logprob: -8.992940902709961
    10. ' ' → logprob: -9.117940902709961

Token 65: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.24649976193904877
    2. 'K' → logprob: -1.62149977684021
    3. ' plus' → logprob: -4.371499538421631
    4. 'plus' → logprob: -5.496499538421631
    5. 'élé' → logprob: -7.246499538421631
    6. ' ' → logprob: -7.621499538421631
    7. ' derniers' → logprob: -7.871499538421631
    8. 'prem' → logprob: -7.996499538421631
    9. '```' → logprob: -8.621500015258789
    10. 'ha' → logprob: -8.746500015258789

Token 66: ' premiers' (ID: 59140)
  Prédit: 'he'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'he' → logprob: -0.03381812572479248
    2. ' heights' → logprob: -4.283818244934082
    3. '[:' → logprob: -4.658818244934082
    4. '[' → logprob: -5.283818244934082
    5. '[-' → logprob: -6.283818244934082
    6. '[:-' → logprob: -7.533818244934082
    7. ' he' → logprob: -7.783818244934082
    8. '[:]' → logprob: -7.908818244934082
    9. '```' → logprob: -8.158818244934082
    10. '_he' → logprob: -8.533818244934082

Token 67: '...' (ID: 1008)
  Prédit: 'he'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'he' → logprob: -0.1659722626209259
    2. ' heights' → logprob: -1.9159722328186035
    3. '[' → logprob: -5.5409722328186035
    4. 'for' → logprob: -7.6659722328186035
    5. 'height' → logprob: -8.165972709655762
    6. ' for' → logprob: -8.415972709655762
    7. '```' → logprob: -8.665972709655762
    8. 's' → logprob: -8.915972709655762
    9. ',' → logprob: -9.290972709655762
    10. '.' → logprob: -9.290972709655762

Token 68: ' ou' (ID: 2031)
  Prédit: ' heights'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' heights' → logprob: -0.6347002387046814
    2. 'he' → logprob: -0.7597002387046814
    3. ' for' → logprob: -7.009700298309326
    4. 'for' → logprob: -7.759700298309326
    5. ' he' → logprob: -8.384699821472168
    6. '```' → logprob: -8.634699821472168
    7. 'h' → logprob: -9.509699821472168
    8. 'height' → logprob: -9.634699821472168
    9. ',' → logprob: -9.634699821472168
    10. '.' → logprob: -10.634699821472168

Token 69: 'ais' (ID: 1873)
  Prédit: 'he'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'he' → logprob: -0.7659626007080078
    2. ' heights' → logprob: -0.7659626007080078
    3. ' non' → logprob: -3.390962600708008
    4. ' pas' → logprob: -4.390962600708008
    5. ' les' → logprob: -5.390962600708008
    6. ' K' → logprob: -5.390962600708008
    7. 'K' → logprob: -5.765962600708008
    8. ' peut' → logprob: -6.015962600708008
    9. '#' → logprob: -6.265962600708008
    10. ':' → logprob: -6.765962600708008

Token 70: ' je' (ID: 1264)
  Prédit: 'he'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'he' → logprob: -0.1575482338666916
    2. ' heights' → logprob: -2.032548189163208
    3. ',' → logprob: -5.407548427581787
    4. 'for' → logprob: -5.532548427581787
    5. ' for' → logprob: -5.907548427581787
    6. '.' → logprob: -7.282548427581787
    7. '```' → logprob: -7.407548427581787
    8. 'del' → logprob: -7.907548427581787
    9. 'height' → logprob: -8.032547950744629
    10. '[' → logprob: -8.157547950744629

Token 71: ' pense' (ID: 29077)
  Prédit: 'pe'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pe' → logprob: -0.5457643270492554
    2. 'vais' → logprob: -2.295764446258545
    3. 'he' → logprob: -2.920764446258545
    4. 's' → logprob: -2.920764446258545
    5. 'les' → logprob: -3.295764446258545
    6. 'n' → logprob: -3.420764446258545
    7. ' peux' → logprob: -3.545764446258545
    8. ' heights' → logprob: -3.920764446258545
    9. 'len' → logprob: -4.045764446258545
    10. 'continue' → logprob: -4.295764446258545

Token 72: '
' (ID: 198)
  Prédit: 'he'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'he' → logprob: -0.03366011008620262
    2. ' heights' → logprob: -3.5336601734161377
    3. ':' → logprob: -6.658659934997559
    4. '```' → logprob: -7.533659934997559
    5. '.' → logprob: -7.783659934997559
    6. ' he' → logprob: -7.908659934997559
    7. ',' → logprob: -7.908659934997559
    8. ' for' → logprob: -8.783659934997559
    9. 'height' → logprob: -9.033659934997559
    10. 'for' → logprob: -9.408659934997559

Token 73: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.865300714969635
    2. 'he' → logprob: -0.990300714969635
    3. 'remaining' → logprob: -2.4903006553649902
    4. ' for' → logprob: -2.9903006553649902
    5. 'rest' → logprob: -3.4903006553649902
    6. 'filtered' → logprob: -3.4903006553649902
    7. ' heights' → logprob: -5.74030065536499
    8. 'del' → logprob: -5.86530065536499
    9. 'result' → logprob: -6.24030065536499
    10. 'removed' → logprob: -6.36530065536499

Token 74: ' i' (ID: 575)
  Prédit: ' _'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.7387237548828125
    2. ' i' → logprob: -1.2387237548828125
    3. '_' → logprob: -1.4887237548828125
    4. 'i' → logprob: -5.1137237548828125
    5. '_i' → logprob: -7.4887237548828125
    6. ' ' → logprob: -8.238723754882812
    7. ' ' → logprob: -10.988723754882812
    8. '	i' → logprob: -12.863723754882812
    9. '  ' → logprob: -13.113723754882812
    10. ' ‌' → logprob: -13.363723754882812

Token 75: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.026370784267783165
    2. 'in' → logprob: -3.6513707637786865
    3. ' ' → logprob: -9.901371002197266
    4. 'n' → logprob: -12.963871002197266
    5. ' i' → logprob: -12.963871002197266
    6. '  ' → logprob: -13.588871002197266
    7. ',' → logprob: -13.588871002197266
    8. 's' → logprob: -13.588871002197266
    9. '```' → logprob: -13.651371002197266
    10. '   ' → logprob: -13.901371002197266

Token 76: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.07889506965875626
    2. 'range' → logprob: -2.578895092010498
    3. '	range' → logprob: -12.45389461517334
    4. '```' → logprob: -14.57889461517334
    5. ' ' → logprob: -14.95389461517334
    6. '(range' → logprob: -15.82889461517334
    7. 'rang' → logprob: -16.578895568847656
    8. ' rang' → logprob: -16.703895568847656
    9. '   ' → logprob: -16.703895568847656
    10. ' xrange' → logprob: -16.828895568847656

Token 77: '(K' (ID: 28797)
  Prédit: '(K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(K' → logprob: -0.0232679583132267
    2. '(' → logprob: -3.773267984390259
    3. '(i' → logprob: -11.52326774597168
    4. '(N' → logprob: -11.89826774597168
    5. '(KERN' → logprob: -13.27326774597168
    6. '(k' → logprob: -13.64826774597168
    7. ' (' → logprob: -13.89826774597168
    8. ' K' → logprob: -14.77326774597168
    9. '(
' → logprob: -14.89826774597168
    10. 'K' → logprob: -15.39826774597168

Token 78: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.008964705280959606
    2. ' ):' → logprob: -4.883964538574219
    3. ':' → logprob: -7.758964538574219
    4. ')' → logprob: -7.883964538574219
    5. ',' → logprob: -7.883964538574219
    6. '+' → logprob: -8.883964538574219
    7. '):
' → logprob: -11.633964538574219
    8. ' :' → logprob: -12.008964538574219
    9. '>' → logprob: -12.383964538574219
    10. ' ' → logprob: -12.508964538574219

Token 79: '   ' (ID: 271)
  Prédit: ' heights'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' heights' → logprob: -0.18475398421287537
    2. 'he' → logprob: -2.184753894805908
    3. '   ' → logprob: -3.059753894805908
    4. ' he' → logprob: -5.559753894805908
    5. '```' → logprob: -5.809753894805908
    6. ' del' → logprob: -7.184753894805908
    7. '    
' → logprob: -7.809753894805908
    8. '<|end|>' → logprob: -8.184754371643066
    9. '``' → logprob: -8.809754371643066
    10. ' 
' → logprob: -8.809754371643066

Token 80: ' if' (ID: 538)
  Prédit: 'he'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'he' → logprob: -0.0011329513508826494
    2. ' heights' → logprob: -6.876132965087891
    3. '   ' → logprob: -9.50113296508789
    4. ' he' → logprob: -11.62613296508789
    5. 'height' → logprob: -11.87613296508789
    6. 'del' → logprob: -12.37613296508789
    7. '```' → logprob: -13.00113296508789
    8. '_he' → logprob: -14.12613296508789
    9. '    
' → logprob: -15.00113296508789
    10. 'hev' → logprob: -15.00113296508789

Token 81: ' heights' (ID: 57359)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.32880327105522156
    2. ' heights' → logprob: -1.453803300857544
    3. 'i' → logprob: -3.203803300857544
    4. 'he' → logprob: -5.328803062438965
    5. ' ' → logprob: -7.453803062438965
    6. ' len' → logprob: -8.453803062438965
    7. '   ' → logprob: -9.328803062438965
    8. 'len' → logprob: -10.328803062438965
    9. ' K' → logprob: -10.328803062438965
    10. '  ' → logprob: -10.578803062438965

Token 82: ':
' (ID: 734)
  Prédit: '[i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.0006606113165616989
    2. '[' → logprob: -7.750660419464111
    3. ':' → logprob: -9.00066089630127
    4. '<|end|>' → logprob: -11.12566089630127
    5. '[K' → logprob: -11.25066089630127
    6. '```' → logprob: -11.25066089630127
    7. '>' → logprob: -11.87566089630127
    8. '#' → logprob: -12.12566089630127
    9. '[-' → logprob: -12.25066089630127
    10. '.pop' → logprob: -12.50066089630127

Token 83: '       ' (ID: 309)
  Prédit: ' heights'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' heights' → logprob: -0.18269598484039307
    2. '   ' → logprob: -2.4326958656311035
    3. 'he' → logprob: -2.5576958656311035
    4. ' he' → logprob: -7.1826958656311035
    5. '```' → logprob: -7.6826958656311035
    6. '.pop' → logprob: -8.432696342468262
    7. '.he' → logprob: -9.932696342468262
    8. ' del' → logprob: -10.307696342468262
    9. '_he' → logprob: -10.432696342468262
    10. '       ' → logprob: -10.557696342468262

Token 84: ' heights' (ID: 57359)
  Prédit: 'he'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'he' → logprob: -0.08939512819051743
    2. ' heights' → logprob: -2.464395046234131
    3. '   ' → logprob: -8.464395523071289
    4. ' he' → logprob: -8.714395523071289
    5. 'height' → logprob: -10.589395523071289
    6. 'pop' → logprob: -11.339395523071289
    7. '```' → logprob: -11.339395523071289
    8. '_he' → logprob: -12.214395523071289
    9. '    
' → logprob: -12.214395523071289
    10. 'del' → logprob: -12.714395523071289

Token 85: '.pop' (ID: 15746)
  Prédit: '.pop'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.pop' → logprob: -3.7697225252486533e-06
    2. '.' → logprob: -12.625003814697266
    3. '.remove' → logprob: -14.750003814697266
    4. 'pop' → logprob: -16.750003814697266
    5. '.po' → logprob: -17.875003814697266
    6. '	pop' → logprob: -18.500003814697266
    7. '.p' → logprob: -19.000003814697266
    8. '.Pop' → logprob: -19.000003814697266
    9. '.poll' → logprob: -19.125003814697266
    10. ' .' → logprob: -19.250003814697266

Token 86: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.048599522560834885
    2. '()' → logprob: -3.0485994815826416
    3. '0' → logprob: -11.798599243164062
    4. '(i' → logprob: -12.798599243164062
    5. '()
' → logprob: -14.423599243164062
    6. '(-' → logprob: -14.923599243164062
    7. '()-' → logprob: -15.048599243164062
    8. '()

' → logprob: -15.798599243164062
    9. '())' → logprob: -16.173599243164062
    10. '()(' → logprob: -16.298599243164062

Token 87: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -5.512236498361744e-07
    2. ')' → logprob: -14.750000953674316
    3. 'i' → logprob: -16.375
    4. ' ' → logprob: -17.25
    5. '۰' → logprob: -21.625
    6. ')i' → logprob: -22.0
    7. '```' → logprob: -22.0
    8. '-' → logprob: -22.125
    9. '))' → logprob: -22.25
    10. ' i' → logprob: -22.375

Token 88: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.4121114822482923e-06
    2. ' )' → logprob: -13.250003814697266
    3. ')
' → logprob: -13.500003814697266
    4. '))' → logprob: -15.875003814697266
    5. ')#' → logprob: -17.375003814697266
    6. '`)' → logprob: -17.500003814697266
    7. ')`' → logprob: -18.125003814697266
    8. ')

' → logprob: -18.500003814697266
    9. '   ' → logprob: -18.500003814697266
    10. '')' → logprob: -18.625003814697266

Token 89: '#' (ID: 2)
  Prédit: '#'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -1.1122113466262817
    2. 'print' → logprob: -1.2372113466262817
    3. 'sum' → logprob: -1.7372113466262817
    4. 'if' → logprob: -2.612211227416992
    5. 'total' → logprob: -2.862211227416992
    6. 'max' → logprob: -3.737211227416992
    7. 'for' → logprob: -4.487211227416992
    8. 's' → logprob: -4.612211227416992
    9. 'result' → logprob: -4.737211227416992
    10. 'remaining' → logprob: -5.487211227416992

Token 90: ' on' (ID: 402)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.06415947526693344
    2. 'if' → logprob: -3.564159393310547
    3. 'result' → logprob: -4.564159393310547
    4. 'total' → logprob: -4.939159393310547
    5. 'sum' → logprob: -5.314159393310547
    6. '#' → logprob: -6.314159393310547
    7. 'answer' → logprob: -6.439159393310547
    8. 'for' → logprob: -6.439159393310547
    9. 'max' → logprob: -6.439159393310547
    10. ' if' → logprob: -6.814159393310547

Token 91: ' somme' (ID: 64484)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.11071837693452835
    2. 'if' → logprob: -3.4857184886932373
    3. '#' → logprob: -3.6107184886932373
    4. 'for' → logprob: -4.110718250274658
    5. ' print' → logprob: -4.360718250274658
    6. 'pr' → logprob: -5.110718250274658
    7. ' if' → logprob: -5.485718250274658
    8. '.' → logprob: -6.360718250274658
    9. ' for' → logprob: -7.235718250274658
    10. 'r' → logprob: -7.610718250274658

Token 92: ' le' (ID: 505)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5520260334014893
    2. '(' → logprob: -0.9270260334014893
    3. 's' → logprob: -5.17702579498291
    4. 'sum' → logprob: -5.17702579498291
    5. 'result' → logprob: -5.42702579498291
    6. '(sum' → logprob: -5.92702579498291
    7. ')' → logprob: -6.05202579498291
    8. '()' → logprob: -6.42702579498291
    9. ' heights' → logprob: -6.67702579498291
    10. '#' → logprob: -6.80202579498291

Token 93: ' reste' (ID: 26769)
  Prédit: ' reste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' reste' → logprob: -0.5623213648796082
    2. 'reste' → logprob: -1.562321424484253
    3. 's' → logprob: -1.687321424484253
    4. 'rest' → logprob: -3.937321424484253
    5. 'remaining' → logprob: -5.312321186065674
    6. ' restant' → logprob: -5.562321186065674
    7. 'sum' → logprob: -6.437321186065674
    8. 'res' → logprob: -6.562321186065674
    9. ' remaining' → logprob: -6.812321186065674
    10. 'max' → logprob: -7.187321186065674

Token 94: ' des' (ID: 731)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.1051400676369667
    2. 'result' → logprob: -2.980139970779419
    3. 'sum' → logprob: -3.855139970779419
    4. 'total' → logprob: -4.230140209197998
    5. 's' → logprob: -4.480140209197998
    6. ')' → logprob: -7.605140209197998
    7. 'answer' → logprob: -8.35513973236084
    8. 'remaining' → logprob: -8.35513973236084
    9. ',' → logprob: -8.60513973236084
    10. '#' → logprob: -9.23013973236084

Token 95: ' haute' (ID: 49646)
  Prédit: 'he'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'he' → logprob: -0.21733950078487396
    2. ' heights' → logprob: -1.8423395156860352
    3. 'ha' → logprob: -3.342339515686035
    4. 'height' → logprob: -7.342339515686035
    5. ' haute' → logprob: -7.842339515686035
    6. 'val' → logprob: -9.717339515686035
    7. ' alturas' → logprob: -9.967339515686035
    8. ' he' → logprob: -10.092339515686035
    9. ' hauteur' → logprob: -10.217339515686035
    10. 'élé' → logprob: -10.279839515686035

Token 96: 'urs' (ID: 1628)
  Prédit: 'urs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'urs' → logprob: -1.8074162653647363e-05
    2. 's' → logprob: -11.125018119812012
    3. 'ur' → logprob: -12.875018119812012
    4. 'rs' → logprob: -15.750018119812012
    5. 'uts' → logprob: -15.750018119812012
    6. '```' → logprob: -16.375017166137695
    7. '#' → logprob: -16.625017166137695
    8. 'URS' → logprob: -17.000017166137695
    9. 'u' → logprob: -17.125017166137695
    10. 'urts' → logprob: -17.250017166137695

Token 97: '...
' (ID: 4908)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.4647166132926941
    2. 'result' → logprob: -1.8397166728973389
    3. 'sum' → logprob: -2.339716672897339
    4. 'total' → logprob: -2.464716672897339
    5. 's' → logprob: -3.589716672897339
    6. 'answer' → logprob: -7.46471643447876
    7. 'remaining' → logprob: -7.71471643447876
    8. ',' → logprob: -7.71471643447876
    9. ')' → logprob: -7.83971643447876
    10. '
' → logprob: -7.96471643447876

Token 98: 'result' (ID: 2521)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.4842788875102997
    2. 'result' → logprob: -1.109278917312622
    3. 'total' → logprob: -3.109278917312622
    4. 'sum' → logprob: -5.234278678894043
    5. 'answer' → logprob: -5.859278678894043
    6. 'remaining' → logprob: -7.484278678894043
    7. 's' → logprob: -7.734278678894043
    8. 'res' → logprob: -9.984278678894043
    9. 'ans' → logprob: -9.984278678894043
    10. ' result' → logprob: -10.609278678894043

Token 99: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.4747023284435272
    2. ' =' → logprob: -0.9747023582458496
    3. '_' → logprob: -7.72470235824585
    4. 's' → logprob: -8.849701881408691
    5. ' +=' → logprob: -11.099701881408691
    6. ' ' → logprob: -11.474701881408691
    7. ' ' → logprob: -12.224701881408691
    8. ')' → logprob: -12.974701881408691
    9. '=sum' → logprob: -13.974701881408691
    10. 'es' → logprob: -14.099701881408691

Token 100: ' ' (ID: 220)
  Prédit: ' sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sum' → logprob: -0.3868723213672638
    2. 'sum' → logprob: -1.1368722915649414
    3. '0' → logprob: -14.261872291564941
    4. ' ' → logprob: -15.886872291564941
    5. '(sum' → logprob: -16.011873245239258
    6. ' ' → logprob: -16.011873245239258
    7. '	sum' → logprob: -16.261873245239258
    8. '   ' → logprob: -17.011873245239258
    9. '=sum' → logprob: -17.136873245239258
    10. '```' → logprob: -17.386873245239258

Token 101: '0' (ID: 15)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sum' → logprob: -2.5776860184123507e-06
    2. ' sum' → logprob: -12.87500286102295
    3. '(sum' → logprob: -20.500001907348633
    4. '	sum' → logprob: -20.750001907348633
    5. '```' → logprob: -21.875001907348633
    6. '=sum' → logprob: -22.000001907348633
    7. '   ' → logprob: -22.375001907348633
    8. '0' → logprob: -22.375001907348633
    9. '.sum' → logprob: -22.750001907348633
    10. 's' → logprob: -23.000001907348633

Token 102: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.007071728352457285
    2. ' for' → logprob: -5.632071495056152
    3. '
' → logprob: -5.757071495056152
    4. '+' → logprob: -8.882071495056152
    5. '+
' → logprob: -9.007071495056152
    6. '```' → logprob: -10.882071495056152
    7. 'sum' → logprob: -11.632071495056152
    8. 'result' → logprob: -12.007071495056152
    9. '<|end|>' → logprob: -12.632071495056152
    10. '``' → logprob: -14.007071495056152

Token 103: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0007174347410909832
    2. ' for' → logprob: -7.250717639923096
    3. '+' → logprob: -12.875717163085938
    4. '
' → logprob: -13.000717163085938
    5. '<|end|>' → logprob: -13.500717163085938
    6. 'sum' → logprob: -14.625717163085938
    7. '```' → logprob: -14.750717163085938
    8. '+
' → logprob: -15.125717163085938
    9. 'result' → logprob: -16.125717163085938
    10. '*' → logprob: -17.625717163085938

Token 104: ' h' (ID: 312)
  Prédit: ' height'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' height' → logprob: -0.8203537464141846
    2. ' h' → logprob: -0.9453537464141846
    3. 'h' → logprob: -2.1953537464141846
    4. 'height' → logprob: -2.8203537464141846
    5. ' i' → logprob: -8.945353507995605
    6. 'i' → logprob: -10.070353507995605
    7. ' ' → logprob: -10.570353507995605
    8. '	height' → logprob: -11.320353507995605
    9. '   ' → logprob: -11.445353507995605
    10. ' x' → logprob: -11.820353507995605

Token 105: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.007782642729580402
    2. 'in' → logprob: -4.882782459259033
    3. ' ' → logprob: -8.757782936096191
    4. 's' → logprob: -11.507782936096191
    5. '  ' → logprob: -12.632782936096191
    6. 'n' → logprob: -14.007782936096191
    7. ',' → logprob: -14.507782936096191
    8. ' ' → logprob: -14.632782936096191
    9. '   ' → logprob: -14.757782936096191
    10. 'e' → logprob: -14.882782936096191

Token 106: ' heights' (ID: 57359)
  Prédit: 'he'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'he' → logprob: -0.12703068554401398
    2. ' heights' → logprob: -2.127030611038208
    3. 'height' → logprob: -9.252030372619629
    4. ' he' → logprob: -12.877030372619629
    5. 'h' → logprob: -13.752030372619629
    6. '_he' → logprob: -14.627030372619629
    7. 'hei' → logprob: -14.752030372619629
    8. ' ' → logprob: -15.002030372619629
    9. 'He' → logprob: -15.627030372619629
    10. ' Heights' → logprob: -15.752030372619629

Token 107: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.014527787454426289
    2. ':
' → logprob: -4.389527797698975
    3. '+' → logprob: -6.264527797698975
    4. '+:' → logprob: -9.639527320861816
    5. '   ' → logprob: -11.514527320861816
    6. '+=' → logprob: -11.764527320861816
    7. '=' → logprob: -12.139527320861816
    8. ' :' → logprob: -12.139527320861816
    9. ' +=' → logprob: -12.264527320861816
    10. ' +' → logprob: -12.514527320861816

Token 108: '   ' (ID: 271)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.7286437749862671
    2. '   ' → logprob: -0.9786437749862671
    3. ' result' → logprob: -1.978643774986267
    4. '
' → logprob: -5.978643894195557
    5. '    
' → logprob: -8.603643417358398
    6. '+' → logprob: -8.728643417358398
    7. '```' → logprob: -8.728643417358398
    8. '	result' → logprob: -8.978643417358398
    9. ' 
' → logprob: -9.228643417358398
    10. '    ' → logprob: -10.853643417358398

Token 109: ' result' (ID: 1534)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' (adapté à ' result') → logprob: -0.0487855039536953
    2. ' result' → logprob: -3.048785448074341
    3. '
' → logprob: -9.173785209655762
    4. '   ' → logprob: -9.298785209655762
    5. '	result' → logprob: -13.173785209655762
    6. '```' → logprob: -15.048785209655762
    7. ' 
' → logprob: -16.173786163330078
    8. '_result' → logprob: -16.173786163330078
    9. '    
' → logprob: -16.673786163330078
    10. '  ' → logprob: -17.048786163330078

Token 110: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.13942810893058777
    2. ' +=' → logprob: -2.13942813873291
    3. '+' → logprob: -4.38942813873291
    4. ']+=' → logprob: -12.26442813873291
    5. '+='' → logprob: -12.76442813873291
    6. ' +' → logprob: -13.13942813873291
    7. '+="' → logprob: -13.26442813873291
    8. '=' → logprob: -13.38942813873291
    9. ' ' → logprob: -14.13942813873291
    10. '+=(' → logprob: -14.63942813873291

Token 111: ' h' (ID: 312)
  Prédit: 'h'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'h' → logprob: -0.01814994215965271
    2. ' h' → logprob: -4.0181498527526855
    3. ' ' → logprob: -18.768150329589844
    4. '	h' → logprob: -19.268150329589844
    5. ' ' → logprob: -19.768150329589844
    6. '   ' → logprob: -19.893150329589844
    7. '```' → logprob: -22.018150329589844
    8. '(h' → logprob: -22.518150329589844
    9. '+h' → logprob: -23.018150329589844
    10. '*h' → logprob: -23.018150329589844

Token 112: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.023460345342755318
    2. '
' → logprob: -3.7734603881835938
    3. ' print' → logprob: -9.148460388183594
    4. '<|end|>' → logprob: -9.898460388183594
    5. '  
' → logprob: -11.273460388183594
    6. ' 
' → logprob: -11.273460388183594
    7. '
' → logprob: -11.398460388183594
    8. '```' → logprob: -11.523460388183594
    9. '#' → logprob: -12.773460388183594
    10. '    
' → logprob: -13.273460388183594

Token 113: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0002019907406065613
    2. '
' → logprob: -8.875202178955078
    3. ' print' → logprob: -9.750202178955078
    4. '<|end|>' → logprob: -13.250202178955078
    5. '```' → logprob: -14.125202178955078
    6. '#print' → logprob: -15.125202178955078
    7. '#' → logprob: -15.250202178955078
    8. '
' → logprob: -15.500202178955078
    9. '  
' → logprob: -16.000202178955078
    10. '.print' → logprob: -16.000202178955078

Token 114: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03804493322968483
    2. '(result' → logprob: -3.2880449295043945
    3. '()' → logprob: -13.163044929504395
    4. '(sum' → logprob: -15.163044929504395
    5. '("("' → logprob: -15.538044929504395
    6. '(results' → logprob: -15.663044929504395
    7. '(
' → logprob: -15.788044929504395
    8. '((' → logprob: -15.913044929504395
    9. '(res' → logprob: -15.913044929504395
    10. ' (' → logprob: -16.28804588317871

Token 115: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.704273118884885e-07
    2. ' )' → logprob: -14.875000953674316
    3. ')
' → logprob: -15.750000953674316
    4. ')`' → logprob: -17.625
    5. '))' → logprob: -17.875
    6. '),' → logprob: -20.25
    7. ')#' → logprob: -20.375
    8. '()' → logprob: -20.5
    9. ')}' → logprob: -20.625
    10. '(' → logprob: -20.875


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 113
Tokens correctement prédits (1ère position, stricte): 32
Tokens correctement prédits (1ère position, avec adaptation): 33
Tokens correctement prédits (top 10): 71
Précision stricte (1ère position): 28.32%
Précision adaptée (1ère position): 29.20%
Précision (top 10): 62.83%
================================================================================
