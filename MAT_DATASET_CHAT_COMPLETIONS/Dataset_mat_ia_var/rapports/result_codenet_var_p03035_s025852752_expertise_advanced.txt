================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:00:05
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from sys import stdin

def calculate_fee(age: int, fee: int) -> int:
    return fee if age >= 13 else (fee // 2 if age >= 6 else 0)

if __name__ == "__main__":
    age, fee = map(int, stdin.readline().split())
    print(calculate_fee(age, fee))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' stdin' (ID: 75143)
  Prédit: 'argv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'argv' → logprob: -0.05142802372574806
    2. ' argv' → logprob: -3.4264280796051025
    3. 'exit' → logprob: -4.176427841186523
    4. ' exit' → logprob: -6.801427841186523
    5. 'stdout' → logprob: -7.301427841186523
    6. 'stdin' → logprob: -8.426427841186523
    7. 'path' → logprob: -8.801427841186523
    8. 'import' → logprob: -10.176427841186523
    9. 'stderr' → logprob: -10.426427841186523
    10. 'version' → logprob: -10.676427841186523

Token 4: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0006422612932510674
    2. '.readline' → logprob: -8.250641822814941
    3. '\n' → logprob: -8.500641822814941
    4. '.
' → logprob: -10.125641822814941
    5. 'import' → logprob: -10.250641822814941
    6. '\' → logprob: -10.500641822814941
    7. '```' → logprob: -10.875641822814941
    8. '.read' → logprob: -10.875641822814941
    9. '' → logprob: -12.000641822814941
    10. ',' → logprob: -12.125641822814941

Token 5: 'def' (ID: 1314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0644008219242096
    2. '.readline' → logprob: -3.1894009113311768
    3. '\n' → logprob: -4.814400672912598
    4. 'for' → logprob: -5.814400672912598
    5. '.read' → logprob: -6.189400672912598
    6. 'import' → logprob: -6.189400672912598
    7. '
' → logprob: -6.689400672912598
    8. ',' → logprob: -7.064400672912598
    9. 'print' → logprob: -7.314400672912598
    10. '\' → logprob: -7.314400672912598

Token 6: ' calculate' (ID: 17950)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.07206425070762634
    2. ' read' → logprob: -2.822064161300659
    3. ' process' → logprob: -5.572064399719238
    4. '_read' → logprob: -6.697064399719238
    5. ' readline' → logprob: -7.072064399719238
    6. ' ' → logprob: -7.197064399719238
    7. ' space' → logprob: -7.197064399719238
    8. ' parse' → logprob: -7.447064399719238
    9. 'read' → logprob: -8.197064399719238
    10. ' main' → logprob: -8.322064399719238

Token 7: '_fee' (ID: 75685)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.8097503185272217
    2. '_' → logprob: -0.8097503185272217
    3. '_total' → logprob: -2.3097503185272217
    4. '_sum' → logprob: -6.684750556945801
    5. '_length' → logprob: -6.809750556945801
    6. '_price' → logprob: -7.434750556945801
    7. '_size' → logprob: -7.434750556945801
    8. '_amount' → logprob: -7.559750556945801
    9. '_area' → logprob: -7.809750556945801
    10. '_average' → logprob: -7.934750556945801

Token 8: '(age' (ID: 130744)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0036706142127513885
    2. '_' → logprob: -5.878670692443848
    3. '(:' → logprob: -8.253670692443848
    4. '():' → logprob: -8.628670692443848
    5. ':' → logprob: -8.753670692443848
    6. '(user' → logprob: -10.253670692443848
    7. '```' → logprob: -10.378670692443848
    8. '(token' → logprob: -10.878670692443848
    9. '_:' → logprob: -11.003670692443848
    10. '):' → logprob: -11.003670692443848

Token 9: ':' (ID: 25)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.018062956631183624
    2. ',' → logprob: -4.518063068389893
    3. ')' → logprob: -5.018063068389893
    4. ':' → logprob: -8.018062591552734
    5. '):
' → logprob: -10.768062591552734
    6. '=' → logprob: -11.518062591552734
    7. '):
' → logprob: -13.268062591552734
    8. ' ):' → logprob: -13.643062591552734
    9. '),' → logprob: -13.893062591552734
    10. '_' → logprob: -13.893062591552734

Token 10: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.22215555608272552
    2. 'int' → logprob: -2.2221555709838867
    3. ' )' → logprob: -2.7221555709838867
    4. ')' → logprob: -4.347155570983887
    5. ' ' → logprob: -4.472155570983887
    6. ':int' → logprob: -8.347155570983887
    7. ' ):' → logprob: -8.597155570983887
    8. '   ' → logprob: -9.722155570983887
    9. ' ' → logprob: -10.097155570983887
    10. '  ' → logprob: -10.347155570983887

Token 11: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.013973326422274113
    2. '):' → logprob: -4.513973236083984
    3. ',' → logprob: -5.888973236083984
    4. ')->' → logprob: -9.013973236083984
    5. '):
' → logprob: -12.263973236083984
    6. ')>' → logprob: -12.513973236083984
    7. '   ' → logprob: -12.763973236083984
    8. '),' → logprob: -12.888973236083984
    9. ' )' → logprob: -13.138973236083984
    10. ':' → logprob: -13.138973236083984

Token 12: ' fee' (ID: 12711)
  Prédit: ' membership'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' membership' → logprob: -1.3194881677627563
    2. ' fee' → logprob: -1.4444881677627563
    3. ' is' → logprob: -1.8194881677627563
    4. ' senior' → logprob: -3.069488048553467
    5. ' years' → logprob: -3.444488048553467
    6. ' price' → logprob: -3.694488048553467
    7. ')' → logprob: -3.694488048553467
    8. ' weight' → logprob: -3.819488048553467
    9. ' ticket' → logprob: -3.819488048553467
    10. ' gender' → logprob: -3.819488048553467

Token 13: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.18166619539260864
    2. '):' → logprob: -1.8066661357879639
    3. ')' → logprob: -6.931666374206543
    4. '_type' → logprob: -8.306666374206543
    5. '):
' → logprob: -8.931666374206543
    6. '=' → logprob: -9.056666374206543
    7. '_per' → logprob: -9.181666374206543
    8. ' ):' → logprob: -9.806666374206543
    9. '_amount' → logprob: -10.306666374206543
    10. '_rate' → logprob: -10.431666374206543

Token 14: ' int' (ID: 677)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1877254247665405
    2. ' int' → logprob: -1.1877254247665405
    3. 'int' → logprob: -1.1877254247665405
    4. ' )' → logprob: -3.68772554397583
    5. ':int' → logprob: -3.68772554397583
    6. ' float' → logprob: -4.06272554397583
    7. 'float' → logprob: -4.43772554397583
    8. ':' → logprob: -6.43772554397583
    9. '):' → logprob: -6.68772554397583
    10. '=int' → logprob: -7.43772554397583

Token 15: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.062124304473400116
    2. '):' → logprob: -2.812124252319336
    3. ')->' → logprob: -9.062124252319336
    4. ',' → logprob: -10.937124252319336
    5. '):
' → logprob: -11.312124252319336
    6. ':' → logprob: -13.062124252319336
    7. ')>' → logprob: -13.562124252319336
    8. '   ' → logprob: -13.687124252319336
    9. ')=' → logprob: -13.937124252319336
    10. '')' → logprob: -14.312124252319336

Token 16: ' ->' (ID: 2747)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0003751423500943929
    2. '):' → logprob: -8.500374794006348
    3. ':return' → logprob: -9.250374794006348
    4. '':' → logprob: -10.750374794006348
    5. '`:' → logprob: -11.875374794006348
    6. '   ' → logprob: -12.000374794006348
    7. ':**' → logprob: -12.250374794006348
    8. '():' → logprob: -12.250374794006348
    9. ':
' → logprob: -12.500374794006348
    10. '```' → logprob: -12.875374794006348

Token 17: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.023257939144968987
    2. 'int' → logprob: -3.7732579708099365
    3. ' None' → logprob: -11.523258209228516
    4. ' ' → logprob: -14.398258209228516
    5. ' ' → logprob: -14.648258209228516
    6. ' float' → logprob: -14.773258209228516
    7. '	int' → logprob: -15.273258209228516
    8. ':int' → logprob: -15.523258209228516
    9. '[int' → logprob: -15.648258209228516
    10. '(int' → logprob: -15.898258209228516

Token 18: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -3.845798710244708e-05
    2. '):' → logprob: -11.250038146972656
    3. ':return' → logprob: -11.500038146972656
    4. '':' → logprob: -12.250038146972656
    5. ':**' → logprob: -13.125038146972656
    6. '():' → logprob: -13.500038146972656
    7. ' :' → logprob: -14.125038146972656
    8. '   ' → logprob: -14.250038146972656
    9. ':
' → logprob: -14.375038146972656
    10. '```' → logprob: -14.500038146972656

Token 19: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.09431305527687073
    2. '   ' → logprob: -2.594313144683838
    3. '):' → logprob: -5.219313144683838
    4. '```' → logprob: -5.844313144683838
    5. ':
' → logprob: -5.969313144683838
    6. ' :' → logprob: -7.594313144683838
    7. ' ' → logprob: -7.719313144683838
    8. '    
' → logprob: -7.719313144683838
    9. ''' → logprob: -7.844313144683838
    10. '`:' → logprob: -7.969313144683838

Token 20: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.011011389084160328
    2. '    ' → logprob: -5.636011600494385
    3. ' if' → logprob: -6.261011600494385
    4. '```' → logprob: -6.636011600494385
    5. '    
' → logprob: -6.761011600494385
    6. ' ' → logprob: -6.886011600494385
    7. ' return' → logprob: -7.636011600494385
    8. ' 
' → logprob: -7.886011600494385
    9. '       ' → logprob: -8.011011123657227
    10. '
' → logprob: -9.011011123657227

Token 21: ' fee' (ID: 12711)
  Prédit: ' fee'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fee' → logprob: -0.8540412187576294
    2. ' ' → logprob: -1.3540412187576294
    3. ' max' → logprob: -2.10404109954834
    4. ' age' → logprob: -2.10404109954834
    5. '0' → logprob: -2.97904109954834
    6. 'fee' → logprob: -4.10404109954834
    7. 'age' → logprob: -5.97904109954834
    8. ' int' → logprob: -6.97904109954834
    9. 'max' → logprob: -7.35404109954834
    10. ' (' → logprob: -8.22904109954834

Token 22: ' if' (ID: 538)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 23: ' age' (ID: 5744)
  Prédit: ' age'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' age' → logprob: -0.00174158182926476
    2. 'age' → logprob: -6.376741409301758
    3. '(age' → logprob: -10.376741409301758
    4. '   ' → logprob: -12.751741409301758
    5. ' ' → logprob: -13.251741409301758
    6. '.age' → logprob: -14.501741409301758
    7. '_age' → logprob: -14.626741409301758
    8. '18' → logprob: -14.876741409301758
    9. ' (' → logprob: -15.439241409301758
    10. '>' → logprob: -15.689241409301758

Token 24: ' >=' (ID: 5064)
  Prédit: '<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<' → logprob: -0.9932575821876526
    2. ' <' → logprob: -1.3682575225830078
    3. ' >=' → logprob: -1.6182575225830078
    4. '>=' → logprob: -1.8682575225830078
    5. '>' → logprob: -4.243257522583008
    6. ' >' → logprob: -5.743257522583008
    7. '<=' → logprob: -5.993257522583008
    8. ' <=' → logprob: -6.368257522583008
    9. '   ' → logprob: -8.243257522583008
    10. ' ' → logprob: -8.243257522583008

Token 25: ' ' (ID: 220)
  Prédit: '18'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '18' → logprob: -0.2248309850692749
    2. '65' → logprob: -1.724830985069275
    3. '60' → logprob: -3.8498311042785645
    4. '20' → logprob: -7.8498311042785645
    5. '70' → logprob: -8.349830627441406
    6. '6' → logprob: -8.349830627441406
    7. ' ' → logprob: -8.599830627441406
    8. '5' → logprob: -8.974830627441406
    9. '13' → logprob: -9.099830627441406
    10. '16' → logprob: -9.224830627441406

Token 26: '13' (ID: 1311)
  Prédit: '18'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '18' → logprob: -0.3988535702228546
    2. '65' → logprob: -1.2738535404205322
    3. '20' → logprob: -3.5238535404205322
    4. '60' → logprob: -4.148853778839111
    5. '6' → logprob: -7.148853778839111
    6. '70' → logprob: -7.398853778839111
    7. '13' → logprob: -7.523853778839111
    8. '3' → logprob: -7.898853778839111
    9. '16' → logprob: -8.023853302001953
    10. '12' → logprob: -8.273853302001953

Token 27: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.04334433004260063
    2. 'else' → logprob: -3.168344259262085
    3. '   ' → logprob: -8.918344497680664
    4. '    ' → logprob: -9.043344497680664
    5. ' ' → logprob: -10.043344497680664
    6. ' and' → logprob: -11.293344497680664
    7. '-' → logprob: -11.543344497680664
    8. '	else' → logprob: -11.918344497680664
    9. 'and' → logprob: -12.168344497680664
    10. '+' → logprob: -12.543344497680664

Token 28: ' (' (ID: 350)
  Prédit: 'fee'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'fee' → logprob: -0.19928865134716034
    2. '0' → logprob: -1.8242886066436768
    3. ' fee' → logprob: -4.199288845062256
    4. ' ' → logprob: -5.699288845062256
    5. 'fe' → logprob: -7.824288845062256
    6. 'int' → logprob: -8.199288368225098
    7. 'free' → logprob: -9.324288368225098
    8. ' int' → logprob: -10.074288368225098
    9. '   ' → logprob: -10.199288368225098
    10. '1' → logprob: -10.949288368225098

Token 29: 'fee' (ID: 52018)
  Prédit: 'fee'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fee' → logprob: -0.01585264317691326
    2. '0' → logprob: -4.515852451324463
    3. ' fee' → logprob: -5.640852451324463
    4. 'fe' → logprob: -7.515852451324463
    5. ' ' → logprob: -8.265852928161621
    6. 'int' → logprob: -8.390852928161621
    7. '   ' → logprob: -9.890852928161621
    8. 'free' → logprob: -10.515852928161621
    9. '1' → logprob: -11.078352928161621
    10. ' int' → logprob: -11.328352928161621

Token 30: ' //' (ID: 602)
  Prédit: ' //'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.049054767936468124
    2. '//' → logprob: -3.0490548610687256
    3. ' ' → logprob: -8.674055099487305
    4. ' *' → logprob: -9.424055099487305
    5. '   ' → logprob: -9.799055099487305
    6. ')' → logprob: -9.799055099487305
    7. ' /' → logprob: -10.674055099487305
    8. '*' → logprob: -10.799055099487305
    9. '>>' → logprob: -11.174055099487305
    10. ' >>' → logprob: -11.424055099487305

Token 31: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0023642287123948336
    2. ' ' → logprob: -6.127364158630371
    3. '3' → logprob: -9.002364158630371
    4. '10' → logprob: -10.502364158630371
    5. '4' → logprob: -11.752364158630371
    6. ')' → logprob: -11.877364158630371
    7. '5' → logprob: -12.002364158630371
    8. '  ' → logprob: -13.377364158630371
    9. '   ' → logprob: -13.377364158630371
    10. '20' → logprob: -14.189864158630371

Token 32: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0004384174826554954
    2. '10' → logprob: -8.250438690185547
    3. '5' → logprob: -9.750438690185547
    4. '3' → logprob: -9.875438690185547
    5. '4' → logprob: -10.375438690185547
    6. '20' → logprob: -11.250438690185547
    7. ' ' → logprob: -11.625438690185547
    8. '

' → logprob: -13.062938690185547
    9. '100' → logprob: -13.437938690185547
    10. '  ' → logprob: -13.562938690185547

Token 33: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1041145626222715e-05
    2. ' )' → logprob: -12.250011444091797
    3. '<|end|>' → logprob: -12.250011444091797
    4. ')return' → logprob: -14.875011444091797
    5. '))' → logprob: -15.250011444091797
    6. ')
' → logprob: -15.625011444091797
    7. ')))' → logprob: -15.625011444091797
    8. ')#' → logprob: -16.250011444091797
    9. '<|end|>' → logprob: -16.375011444091797
    10. '())' → logprob: -16.500011444091797

Token 34: ' age' (ID: 5744)
  Prédit: 'age'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'age' → logprob: -0.7013466954231262
    2. ' age' → logprob: -0.7013466954231262
    3. ' ' → logprob: -5.4513468742370605
    4. '6' → logprob: -6.2013468742370605
    5. '7' → logprob: -7.2013468742370605
    6. '3' → logprob: -8.576346397399902
    7. '(age' → logprob: -8.576346397399902
    8. '5' → logprob: -8.826346397399902
    9. '1' → logprob: -9.451346397399902
    10. '  ' → logprob: -9.576346397399902

Token 35: ' >=' (ID: 5064)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.4044370949268341
    2. '<' → logprob: -1.4044370651245117
    3. ' >=' → logprob: -2.7794370651245117
    4. '>=' → logprob: -4.279437065124512
    5. ' >' → logprob: -5.654437065124512
    6. ' <=' → logprob: -5.904437065124512
    7. '>' → logprob: -6.029437065124512
    8. ' ' → logprob: -6.404437065124512
    9. '<=' → logprob: -7.154437065124512
    10. '   ' → logprob: -10.029437065124512

Token 36: ' ' (ID: 220)
  Prédit: '6'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -0.4864635467529297
    2. '7' → logprob: -1.1114635467529297
    3. '3' → logprob: -3.1114635467529297
    4. '8' → logprob: -5.36146354675293
    5. ' ' → logprob: -5.48646354675293
    6. '5' → logprob: -7.23646354675293
    7. '13' → logprob: -7.23646354675293
    8. '1' → logprob: -7.98646354675293
    9. '4' → logprob: -8.11146354675293
    10. '10' → logprob: -8.36146354675293

Token 37: '6' (ID: 21)
  Prédit: '6'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -0.35800284147262573
    2. '7' → logprob: -1.3580029010772705
    3. '3' → logprob: -3.4830029010772705
    4. '8' → logprob: -4.858002662658691
    5. '5' → logprob: -6.483002662658691
    6. ' ' → logprob: -7.108002662658691
    7. '10' → logprob: -7.483002662658691
    8. '4' → logprob: -7.608002662658691
    9. '1' → logprob: -7.608002662658691
    10. '13' → logprob: -7.608002662658691

Token 38: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.023321647197008133
    2. 'else' → logprob: -3.7733216285705566
    3. ' and' → logprob: -9.648322105407715
    4. 'and' → logprob: -12.523322105407715
    5. ' ' → logprob: -12.898322105407715
    6. ')' → logprob: -13.023322105407715
    7. '   ' → logprob: -13.398322105407715
    8. '    ' → logprob: -14.898322105407715
    9. '	else' → logprob: -15.148322105407715
    10. '```' → logprob: -15.148322105407715

Token 39: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.18116030097007751
    2. ' ' → logprob: -1.8061603307724
    3. 'fee' → logprob: -7.6811604499816895
    4. '1' → logprob: -7.8061604499816895
    5. ' fee' → logprob: -8.181159973144531
    6. '10' → logprob: -9.806159973144531
    7. '   ' → logprob: -9.806159973144531
    8. '5' → logprob: -10.806159973144531
    9. '  ' → logprob: -10.931159973144531
    10. '3' → logprob: -10.993659973144531

Token 40: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0021380058024078608
    2. 'fee' → logprob: -7.002138137817383
    3. ' ' → logprob: -7.377138137817383
    4. '1' → logprob: -8.252138137817383
    5. '10' → logprob: -8.877138137817383
    6. '100' → logprob: -9.627138137817383
    7. '5' → logprob: -10.502138137817383
    8. '(' → logprob: -11.002138137817383
    9. ' fee' → logprob: -11.377138137817383
    10. '3' → logprob: -11.439638137817383

Token 41: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -5.9153885558771435e-06
    2. ' )' → logprob: -12.250005722045898
    3. '))' → logprob: -15.000005722045898
    4. ')return' → logprob: -15.625005722045898
    5. ')
' → logprob: -15.875005722045898
    6. '`)' → logprob: -15.875005722045898
    7. '   ' → logprob: -16.0000057220459
    8. '）' → logprob: -16.3750057220459
    9. ')))' → logprob: -17.0000057220459
    10. '')' → logprob: -17.2500057220459

Token 42: 'if' (ID: 366)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.19681988656520844
    2. 'for' → logprob: -2.07181978225708
    3. '
' → logprob: -3.32181978225708
    4. '\n' → logprob: -4.57181978225708
    5. 'age' → logprob: -6.69681978225708
    6. '<|end|>' → logprob: -6.69681978225708
    7. '```' → logprob: -6.94681978225708
    8. '

' → logprob: -7.32181978225708
    9. ' for' → logprob: -8.071820259094238
    10. '#' → logprob: -8.071820259094238

Token 43: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.0068480996415019035
    2. ' ' → logprob: -5.381848335266113
    3. '__' → logprob: -6.631848335266113
    4. ' ' → logprob: -7.881848335266113
    5. ' stdin' → logprob: -8.381848335266113
    6. ' name' → logprob: -8.631848335266113
    7. ' len' → logprob: -10.506848335266113
    8. ' _' → logprob: -11.006848335266113
    9. ' isinstance' → logprob: -11.131848335266113
    10. ' not' → logprob: -11.131848335266113

Token 44: 'name' (ID: 897)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.6175221800804138
    2. '__' → logprob: -1.8675222396850586
    3. '.name' → logprob: -1.9925222396850586
    4. 'name' → logprob: -3.1175222396850586
    5. '.__' → logprob: -3.1175222396850586
    6. '__.__' → logprob: -3.3675222396850586
    7. '__.' → logprob: -3.7425222396850586
    8. ' ==' → logprob: -4.867522239685059
    9. '```' → logprob: -5.242522239685059
    10. '==' → logprob: -5.617522239685059

Token 45: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.0001443035143893212
    2. '==' → logprob: -9.000144004821777
    3. ' ==' → logprob: -12.000144004821777
    4. '_' → logprob: -12.375144004821777
    5. '___' → logprob: -13.000144004821777
    6. '```' → logprob: -13.125144004821777
    7. '=="' → logprob: -13.375144004821777
    8. '__.__' → logprob: -14.500144004821777
    9. '__["' → logprob: -15.000144004821777
    10. '__[' → logprob: -15.125144004821777

Token 46: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.2486894279718399
    2. ' ==' → logprob: -1.7486894130706787
    3. '==' → logprob: -3.1236894130706787
    4. '=="' → logprob: -6.248689651489258
    5. '=='' → logprob: -9.123689651489258
    6. '_' → logprob: -9.498689651489258
    7. '___' → logprob: -11.123689651489258
    8. '"' → logprob: -11.623689651489258
    9. '__.__' → logprob: -11.623689651489258
    10. '=' → logprob: -11.998689651489258

Token 47: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.11298885196447372
    2. ''' → logprob: -2.2379889488220215
    3. '__' → logprob: -9.237988471984863
    4. ' "' → logprob: -10.362988471984863
    5. ' "__' → logprob: -10.362988471984863
    6. ' '__' → logprob: -13.487988471984863
    7. ' '' → logprob: -13.987988471984863
    8. '`' → logprob: -14.237988471984863
    9. ' ' → logprob: -14.362988471984863
    10. '_' → logprob: -14.362988471984863

Token 48: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -7.3458322731312364e-06
    2. 'name' → logprob: -11.875007629394531
    3. 'ma' → logprob: -15.625007629394531
    4. '__' → logprob: -16.62500762939453
    5. ' main' → logprob: -16.87500762939453
    6. 'm' → logprob: -17.37500762939453
    7. '_main' → logprob: -18.00000762939453
    8. 'built' → logprob: -18.50000762939453
    9. 'mp' → logprob: -19.25000762939453
    10. 'init' → logprob: -19.62500762939453

Token 49: '__":
' (ID: 49892)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.47411248087882996
    2. '__":
' → logprob: -0.9741125106811523
    3. '_' → logprob: -10.849112510681152
    4. '__:' → logprob: -11.849112510681152
    5. '__':
' → logprob: -11.974112510681152
    6. '"' → logprob: -13.974112510681152
    7. '__["' → logprob: -14.099112510681152
    8. '__("' → logprob: -15.099112510681152
    9. '___' → logprob: -15.599112510681152
    10. '":' → logprob: -15.724112510681152

Token 50: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2701933979988098
    2. '<|end|>' → logprob: -2.770193338394165
    3. '    
' → logprob: -2.895193338394165
    4. '
' → logprob: -2.895193338394165
    5. '\n' → logprob: -3.770193338394165
    6. ' 
' → logprob: -3.770193338394165
    7. '```' → logprob: -5.270193576812744
    8. '<|end|>' → logprob: -6.020193576812744
    9. 'n' → logprob: -6.895193576812744
    10. '  
' → logprob: -7.020193576812744

Token 51: ' age' (ID: 5744)
  Prédit: ' age'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' age' → logprob: -0.3631981313228607
    2. 'age' (adapté à ' age') → logprob: -1.988198161125183
    3. 'for' → logprob: -2.6131980419158936
    4. ' for' → logprob: -3.4881980419158936
    5. ' input' → logprob: -3.9881980419158936
    6. ' line' → logprob: -4.863198280334473
    7. ' lines' → logprob: -4.863198280334473
    8. '   ' → logprob: -5.113198280334473
    9. 'input' → logprob: -5.238198280334473
    10. 'line' → logprob: -5.363198280334473

Token 52: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.16430774331092834
    2. ' ' → logprob: -1.914307713508606
    3. ' ,' → logprob: -6.289307594299316
    4. ',' → logprob: -7.664307594299316
    5. '=' → logprob: -7.664307594299316
    6. '  ' → logprob: -7.789307594299316
    7. ' ==' → logprob: -8.289307594299316
    8. ' >' → logprob: -9.164307594299316
    9. '_input' → logprob: -9.539307594299316
    10. ')' → logprob: -9.789307594299316

Token 53: ' fee' (ID: 12711)
  Prédit: ' fee'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fee' → logprob: -0.007752011064440012
    2. 'fee' → logprob: -4.882751941680908
    3. ' ' → logprob: -9.007752418518066
    4. '_fee' → logprob: -11.757752418518066
    5. ' ' → logprob: -12.632752418518066
    6. ' f' → logprob: -12.757752418518066
    7. ' input' → logprob: -13.132752418518066
    8. ' space' → logprob: -13.632752418518066
    9. 'space' → logprob: -13.757752418518066
    10. 'fe' → logprob: -13.882752418518066

Token 54: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.002806656062602997
    2. '=' → logprob: -5.877806663513184
    3. ',' → logprob: -13.627806663513184
    4. '=input' → logprob: -15.502806663513184
    5. ' ' → logprob: -16.127805709838867
    6. ')' → logprob: -16.502805709838867
    7. 'input' → logprob: -17.877805709838867
    8. '  ' → logprob: -17.877805709838867
    9. ' =)' → logprob: -17.877805709838867
    10. '_' → logprob: -18.002805709838867

Token 55: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.016087748110294342
    2. 'map' → logprob: -4.141087532043457
    3. ' ' → logprob: -11.016087532043457
    4. ' list' → logprob: -11.266087532043457
    5. '[' → logprob: -11.391087532043457
    6. ' [' → logprob: -12.391087532043457
    7. '   ' → logprob: -13.016087532043457
    8. '	map' → logprob: -13.016087532043457
    9. 'list' → logprob: -13.891087532043457
    10. '  ' → logprob: -14.141087532043457

Token 56: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.10233253240585327
    2. '(' → logprob: -2.352332592010498
    3. '(str' → logprob: -6.477332592010498
    4. '(stdin' → logprob: -8.35233211517334
    5. '(lambda' → logprob: -8.47733211517334
    6. '(list' → logprob: -10.35233211517334
    7. '(input' → logprob: -10.72733211517334
    8. '(st' → logprob: -11.10233211517334
    9. '(
' → logprob: -11.22733211517334
    10. '<|end|>' → logprob: -11.47733211517334

Token 57: ',' (ID: 11)
  Prédit: '(stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(stdin' → logprob: -0.0019231601618230343
    2. ')' → logprob: -6.626923084259033
    3. 'stdin' → logprob: -8.251923561096191
    4. '(input' → logprob: -8.876923561096191
    5. '(' → logprob: -9.501923561096191
    6. ',' → logprob: -9.751923561096191
    7. '(st' → logprob: -10.501923561096191
    8. ')(' → logprob: -11.001923561096191
    9. 'input' → logprob: -12.126923561096191
    10. ' stdin' → logprob: -12.251923561096191

Token 58: ' stdin' (ID: 75143)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.387957364320755
    2. ' stdin' → logprob: -1.1379573345184326
    3. '(stdin' → logprob: -6.887957572937012
    4. '.stdin' → logprob: -9.762957572937012
    5. ')' → logprob: -12.262957572937012
    6. 'std' → logprob: -13.637957572937012
    7. 'input' → logprob: -14.762957572937012
    8. 'st' → logprob: -14.762957572937012
    9. ' std' → logprob: -15.262957572937012
    10. 'stdout' → logprob: -15.762957572937012

Token 59: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.0001749351795297116
    2. '.read' → logprob: -8.875174522399902
    3. '.' → logprob: -11.000174522399902
    4. '().' → logprob: -11.250174522399902
    5. '.readlines' → logprob: -12.375174522399902
    6. ' .' → logprob: -14.500174522399902
    7. ')' → logprob: -14.875174522399902
    8. ').' → logprob: -15.625174522399902
    9. '.Read' → logprob: -18.00017547607422
    10. '.write' → logprob: -18.00017547607422

Token 60: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.17583023011684418
    2. '().' → logprob: -1.9258302450180054
    3. '()' → logprob: -4.175830364227295
    4. ')' → logprob: -9.550829887390137
    5. ' ())' → logprob: -10.550829887390137
    6. '()))' → logprob: -12.300829887390137
    7. '()[' → logprob: -12.425829887390137
    8. '()]' → logprob: -12.800829887390137
    9. '(' → logprob: -12.925829887390137
    10. '())
' → logprob: -13.050829887390137

Token 61: 'split' (ID: 13627)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.2522701919078827
    2. 'split' → logprob: -1.502270221710205
    3. 'rstrip' → logprob: -8.002269744873047
    4. 'read' → logprob: -12.127269744873047
    5. ' strip' → logprob: -14.627269744873047
    6. ' split' → logprob: -15.127269744873047
    7. ')' → logprob: -16.752269744873047
    8. '(split' → logprob: -17.002269744873047
    9. '(strip' → logprob: -17.752269744873047
    10. '_strip' → logprob: -18.377269744873047

Token 62: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.018411308526992798
    2. ')' → logprob: -4.268411159515381
    3. '()' → logprob: -5.643411159515381
    4. '()))' → logprob: -7.643411159515381
    5. '))' → logprob: -8.518411636352539
    6. '())
' → logprob: -11.768411636352539
    7. ' ())' → logprob: -12.393411636352539
    8. '(' → logprob: -12.768411636352539
    9. '(),' → logprob: -14.018411636352539
    10. '()]' → logprob: -14.893411636352539

Token 63: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0438518263399601
    2. '   ' → logprob: -3.668851852416992
    3. '
' → logprob: -4.418851852416992
    4. '    
' → logprob: -6.418851852416992
    5. ' print' → logprob: -7.418851852416992
    6. 'fee' → logprob: -7.418851852416992
    7. '```' → logprob: -7.543851852416992
    8. ')' → logprob: -7.793851852416992
    9. '\n' → logprob: -7.918851852416992
    10. '<|end|>' → logprob: -8.668851852416992

Token 64: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -5.6100132496794686e-05
    2. ' print' → logprob: -9.875056266784668
    3. 'price' → logprob: -13.500056266784668
    4. 'fee' → logprob: -13.750056266784668
    5. '   ' → logprob: -14.000056266784668
    6. '```' → logprob: -14.375056266784668
    7. 'result' → logprob: -15.375056266784668
    8. 'pr' → logprob: -16.37505531311035
    9. 'total' → logprob: -16.50005531311035
    10. 'cost' → logprob: -16.62505531311035

Token 65: '(c' (ID: 2410)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06348497420549393
    2. '(c' → logprob: -2.8134849071502686
    3. '(calc' → logprob: -6.563485145568848
    4. '((' → logprob: -10.063485145568848
    5. '(cal' → logprob: -10.688485145568848
    6. '("("' → logprob: -10.938485145568848
    7. '('' → logprob: -11.438485145568848
    8. ' (' → logprob: -13.063485145568848
    9. '(f' → logprob: -13.313485145568848
    10. '()' → logprob: -13.563485145568848

Token 66: 'alculate' (ID: 80190)
  Prédit: 'alculate'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'alculate' → logprob: -1.9504606825648807e-05
    2. 'al' → logprob: -11.625019073486328
    3. 'alc' → logprob: -12.000019073486328
    4. 'calculate' → logprob: -12.500019073486328
    5. 'aculate' → logprob: -14.375019073486328
    6. 'alu' → logprob: -17.625019073486328
    7. 'culate' → logprob: -18.125019073486328
    8. 'alk' → logprob: -18.625019073486328
    9. 'ulate' → logprob: -18.625019073486328
    10. '.calculate' → logprob: -19.250019073486328

Token 67: '_fee' (ID: 75685)
  Prédit: '_fee'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_fee' → logprob: -0.0001307142956648022
    2. '_' → logprob: -9.250130653381348
    3. '_f' → logprob: -10.375130653381348
    4. '_fe' → logprob: -13.500130653381348
    5. '_F' → logprob: -14.625130653381348
    6. ' _' → logprob: -14.750130653381348
    7. ')_' → logprob: -15.125130653381348
    8. ')' → logprob: -15.125130653381348
    9. '```' → logprob: -16.500131607055664
    10. '_token' → logprob: -17.125131607055664

Token 68: '(age' (ID: 130744)
  Prédit: '(age'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(age' → logprob: -3.047134305234067e-05
    2. '(' → logprob: -10.500030517578125
    3. ' (' → logprob: -13.125030517578125
    4. ')' → logprob: -14.500030517578125
    5. '(angle' → logprob: -15.000030517578125
    6. '(amount' → logprob: -16.750030517578125
    7. '(
' → logprob: -18.375030517578125
    8. ')(' → logprob: -18.375030517578125
    9. '(price' → logprob: -19.125030517578125
    10. '(year' → logprob: -19.500030517578125

Token 69: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -5.872261317563243e-05
    2. ' ,' → logprob: -9.750059127807617
    3. ',
' → logprob: -16.125059127807617
    4. ')' → logprob: -16.750059127807617
    5. ' ' → logprob: -17.250059127807617
    6. 'fee' → logprob: -17.500059127807617
    7. '   ' → logprob: -17.625059127807617
    8. ' fee' → logprob: -18.000059127807617
    9. ',
' → logprob: -18.250059127807617
    10. '‌,' → logprob: -18.625059127807617

Token 70: ' fee' (ID: 12711)
  Prédit: ' fee'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fee' → logprob: -0.01815333589911461
    2. 'fee' → logprob: -4.018153190612793
    3. '_fee' → logprob: -14.018153190612793
    4. 'fe' → logprob: -14.143153190612793
    5. ')' → logprob: -14.643153190612793
    6. ' )' → logprob: -14.768153190612793
    7. ' ' → logprob: -15.143153190612793
    8. ' fe' → logprob: -15.393153190612793
    9. 'Fee' → logprob: -15.768153190612793
    10. ' Fee' → logprob: -16.26815414428711

Token 71: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.31326571106910706
    2. ')' → logprob: -1.3132656812667847
    3. ')))' → logprob: -13.063265800476074
    4. '))
' → logprob: -13.938265800476074
    5. ' ))' → logprob: -15.063265800476074
    6. ' )' → logprob: -15.188265800476074
    7. ')
' → logprob: -15.688265800476074
    8. ')}' → logprob: -16.688264846801758
    9. '),' → logprob: -17.063264846801758
    10. '())' → logprob: -17.188264846801758


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 69
Tokens correctement prédits (1ère position, stricte): 29
Tokens correctement prédits (1ère position, avec adaptation): 30
Tokens correctement prédits (top 10): 57
Précision stricte (1ère position): 42.03%
Précision adaptée (1ère position): 43.48%
Précision (top 10): 82.61%
================================================================================
