================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:01:40
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import queue

def get_node_count():
    return int(input())

def initialize_tree(n):
    return {i: [] for i in range(n)}

def read_edge():
    t = input().split()
    return int(t[0]), int(t[1])

def add_edge(tree, u, v):
    tree[u-1].append(v-1)
    tree[v-1].append(u-1)

def build_tree(n):
    tree = initialize_tree(n)
    for _ in range(n-1):
        u, v = read_edge()
        add_edge(tree, u, v)
    return tree

def initialize_visited(n):
    return [0 for _ in range(n)]

def mark_visited(visited, node):
    visited[node] = 1

def create_queue():
    return queue.Queue()

def enqueue(q, item):
    q.put(item)

def dequeue(q):
    return q.get()

def has_children(tree, node):
    return len(tree[node]) > 1

def bfs_first(tree, n):
    a = 0
    q = create_queue()
    enqueue(q, a)
    v = initialize_visited(n)
    mark_visited(v, a)
    while not q.empty():
        a = dequeue(q)
        for b in tree[a]:
            if v[b] == 0 and has_children(tree, b):
                enqueue(q, b)
                mark_visited(v, b)
    return a

def prepare_visits(n, a):
    v = initialize_visited(n)
    mark_visited(v, a)
    return v

def bfs_second(tree, n, a):
    q = create_queue()
    enqueue(q, [a, 1])
    v = prepare_visits(n, a)
    last = None
    while not q.empty():
        a_item = dequeue(q)
        node, depth = a_item[0], a_item[1]
        last = a_item
        for b in tree[node]:
            if v[b] == 0 and has_children(tree, b):
                enqueue(q, [b, depth + 1])
                mark_visited(v, b)
    return last

def compute_l(n, second_bfs_result):
    if n <= 3:
        return n
    else:
        return second_bfs_result[1] + 2

def output_result(l):
    if l % 3 == 2:
        print("Second")
    else:
        print("First")

def main():
    n = get_node_count()
    tree = build_tree(n)
    a = bfs_first(tree, n)
    result = bfs_second(tree, n, a)
    l = compute_l(n, result)
    output_result(l)

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' queue' (ID: 13661)
  → Token d'amorce (pas de prédiction)

Token 2: '

' (ID: 279)
  → Token d'amorce (pas de prédiction)

Token 3: 'def' (ID: 1314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.013064110651612282
    2. '.Queue' → logprob: -4.388063907623291
    3. '\' → logprob: -8.38806438446045
    4. '\n' → logprob: -9.51306438446045
    5. '.\' → logprob: -10.13806438446045
    6. '```' → logprob: -10.76306438446045
    7. '

' → logprob: -10.88806438446045
    8. '.Q' → logprob: -11.01306438446045
    9. '.
' → logprob: -11.13806438446045
    10. ',' → logprob: -11.13806438446045

Token 4: ' get' (ID: 717)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.05998210608959198
    2. ' process' → logprob: -3.8099820613861084
    3. ' ' → logprob: -4.6849822998046875
    4. '_' → logprob: -5.4349822998046875
    5. ')' → logprob: -6.1849822998046875
    6. '_process' → logprob: -6.4349822998046875
    7. ' space' → logprob: -6.5599822998046875
    8. 'process' → logprob: -6.6849822998046875
    9. '  ' → logprob: -6.6849822998046875
    10. ' q' → logprob: -6.9349822998046875

Token 5: '_node' (ID: 11390)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.518114447593689
    2. '_queue' → logprob: -1.143114447593689
    3. '(queue' → logprob: -3.3931145668029785
    4. ' _' → logprob: -3.5181145668029785
    5. ' ' → logprob: -5.3931145668029785
    6. '(' → logprob: -5.7681145668029785
    7. '_q' → logprob: -5.8931145668029785
    8. ' (' → logprob: -6.5181145668029785
    9. ' queue' → logprob: -6.5181145668029785
    10. '_item' → logprob: -6.6431145668029785

Token 6: '_count' (ID: 7536)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.3271227180957794
    2. '(' → logprob: -1.452122688293457
    3. '_name' → logprob: -4.202122688293457
    4. ' (' → logprob: -5.827122688293457
    5. '_nodes' → logprob: -5.827122688293457
    6. '```' → logprob: -5.827122688293457
    7. '_queue' → logprob: -6.202122688293457
    8. ')' → logprob: -6.202122688293457
    9. ' _' → logprob: -6.452122688293457
    10. '_parent' → logprob: -6.577122688293457

Token 7: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0006454797694459558
    2. '_' → logprob: -7.875645637512207
    3. ':' → logprob: -9.500645637512207
    4. ')' → logprob: -10.125645637512207
    5. '():' → logprob: -10.625645637512207
    6. ' (' → logprob: -10.875645637512207
    7. 's' → logprob: -11.000645637512207
    8. '):' → logprob: -11.625645637512207
    9. '```' → logprob: -11.625645637512207
    10. '(user' → logprob: -11.875645637512207

Token 8: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5884032845497131
    2. '(' → logprob: -1.3384032249450684
    3. '():' → logprob: -1.8384032249450684
    4. '   ' → logprob: -4.588403224945068
    5. '```' → logprob: -4.838403224945068
    6. '(
' → logprob: -6.338403224945068
    7. '(q' → logprob: -6.838403224945068
    8. '(:' → logprob: -7.463403224945068
    9. '):' → logprob: -7.963403224945068
    10. '(":' → logprob: -8.338403701782227

Token 9: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6306989192962646
    2. ' ' → logprob: -2.0056989192962646
    3. '(' → logprob: -2.1306989192962646
    4. 'q' → logprob: -3.0056989192962646
    5. 'return' (adapté à ' return') → logprob: -3.0056989192962646
    6. ' return' → logprob: -3.2556989192962646
    7. '    ' → logprob: -3.5056989192962646
    8. ' (' → logprob: -3.8806989192962646
    9. 'r' → logprob: -4.630699157714844
    10. ' q' → logprob: -5.755699157714844

Token 10: ' int' (ID: 677)
  Prédit: ' queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' queue' → logprob: -0.5919945240020752
    2. ' ' → logprob: -1.0919945240020752
    3. ' len' → logprob: -3.091994524002075
    4. 'queue' → logprob: -3.466994524002075
    5. ' None' → logprob: -4.216994285583496
    6. '(queue' → logprob: -4.841994285583496
    7. ' q' → logprob: -5.216994285583496
    8. '0' → logprob: -6.591994285583496
    9. '  ' → logprob: -6.591994285583496
    10. 'len' → logprob: -6.591994285583496

Token 11: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0011397423222661018
    2. '('' → logprob: -6.8761396408081055
    3. ''' → logprob: -10.376139640808105
    4. '(
' → logprob: -11.251139640808105
    5. '("("' → logprob: -11.501139640808105
    6. ' (' → logprob: -11.751139640808105
    7. '(queue' → logprob: -12.376139640808105
    8. '```' → logprob: -12.626139640808105
    9. '40' → logprob: -12.751139640808105
    10. '(`' → logprob: -12.751139640808105

Token 12: '())

' (ID: 27654)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.02521366812288761
    2. '()' → logprob: -4.275213718414307
    3. '('' → logprob: -4.775213718414307
    4. '())' → logprob: -6.900213718414307
    5. '("("' → logprob: -7.275213718414307
    6. ')' → logprob: -8.025213241577148
    7. '(()' → logprob: -8.525213241577148
    8. '(""))' → logprob: -9.025213241577148
    9. '(
' → logprob: -10.150213241577148
    10. '("")' → logprob: -10.275213241577148

Token 13: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.24595879018306732
    2. 'q' → logprob: -2.3709588050842285
    3. '\n' → logprob: -3.2459588050842285
    4. '\' → logprob: -4.1209588050842285
    5. '
' → logprob: -4.1209588050842285
    6. 'n' → logprob: -4.3709588050842285
    7. ')' → logprob: -4.6209588050842285
    8. 'node' → logprob: -4.9959588050842285
    9. '```' → logprob: -5.1209588050842285
    10. '   ' → logprob: -5.8709588050842285

Token 14: ' initialize' (ID: 18400)
  Prédit: ' get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.020424623042345047
    2. ' main' → logprob: -5.020424842834473
    3. ' process' → logprob: -5.270424842834473
    4. ' calculate' → logprob: -6.145424842834473
    5. ' add' → logprob: -6.520424842834473
    6. '_' → logprob: -6.895424842834473
    7. ' create' → logprob: -6.895424842834473
    8. ' find' → logprob: -7.645424842834473
    9. ' space' → logprob: -7.645424842834473
    10. ' enqueue' → logprob: -8.395424842834473

Token 15: '_tree' (ID: 27118)
  Prédit: '_queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_queue' → logprob: -0.052979614585638046
    2. '_' → logprob: -3.8029797077178955
    3. '_nodes' → logprob: -4.302979469299316
    4. '_tree' → logprob: -5.052979469299316
    5. '_node' → logprob: -5.177979469299316
    6. '(' → logprob: -6.052979469299316
    7. '(queue' → logprob: -8.802979469299316
    8. '_parent' → logprob: -8.927979469299316
    9. '_stack' → logprob: -8.927979469299316
    10. '_buffer' → logprob: -9.802979469299316

Token 16: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.08219451457262039
    2. '_' → logprob: -2.5821945667266846
    3. '_tree' → logprob: -6.4571943283081055
    4. '_parent' → logprob: -8.082194328308105
    5. '_nodes' → logprob: -8.207194328308105
    6. '()' → logprob: -8.832194328308105
    7. ' (' → logprob: -9.082194328308105
    8. '(_' → logprob: -9.082194328308105
    9. '_node' → logprob: -9.332194328308105
    10. '_space' → logprob: -9.832194328308105

Token 17: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.008635961450636387
    2. ')' → logprob: -5.008635997772217
    3. ',' → logprob: -7.258635997772217
    4. ' ):' → logprob: -7.383635997772217
    5. '_nodes' → logprob: -7.758635997772217
    6. '):
' → logprob: -9.383635520935059
    7. ')):' → logprob: -11.258635520935059
    8. ':' → logprob: -11.758635520935059
    9. ' )' → logprob: -11.758635520935059
    10. '_' → logprob: -11.758635520935059

Token 18: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.028669601306319237
    2. '(tree' → logprob: -4.653669834136963
    3. '_tree' → logprob: -5.028669834136963
    4. 'tree' → logprob: -5.653669834136963
    5. '	tree' → logprob: -6.028669834136963
    6. ' tree' → logprob: -6.403669834136963
    7. ':' → logprob: -6.528669834136963
    8. ')' → logprob: -7.778669834136963
    9. '```' → logprob: -8.028669357299805
    10. 'nodes' → logprob: -8.278669357299805

Token 19: ' return' (ID: 622)
  Prédit: ' tree'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tree' → logprob: -0.2123003751039505
    2. 'tree' → logprob: -2.3373003005981445
    3. '   ' → logprob: -3.4623003005981445
    4. ' {' → logprob: -4.0873003005981445
    5. ' {}' → logprob: -4.5873003005981445
    6. ' [' → logprob: -4.8373003005981445
    7. ' {
' → logprob: -5.2123003005981445
    8. '{}' → logprob: -5.2123003005981445
    9. ' return' → logprob: -5.5873003005981445
    10. ' nodes' → logprob: -6.0873003005981445

Token 20: ' {' (ID: 354)
  Prédit: ' ['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.18427948653697968
    2. '[' → logprob: -2.184279441833496
    3. ' [{}' → logprob: -4.309279441833496
    4. ' [[]' → logprob: -4.309279441833496
    5. ' {' → logprob: -4.559279441833496
    6. ' {}' → logprob: -4.684279441833496
    7. '{}' → logprob: -6.059279441833496
    8. '{' → logprob: -6.309279441833496
    9. ' []' → logprob: -6.934279441833496
    10. ' [{'' → logprob: -7.434279441833496

Token 21: 'i' (ID: 72)
  Prédit: 'i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.023959780111908913
    2. '}' → logprob: -3.8989598751068115
    3. ' i' → logprob: -5.898959636688232
    4. 'node' → logprob: -8.14896011352539
    5. 'k' → logprob: -8.77396011352539
    6. 'key' → logprob: -9.14896011352539
    7. ' node' → logprob: -10.02396011352539
    8. '   ' → logprob: -10.64896011352539
    9. ' key' → logprob: -11.27396011352539
    10. '}}' → logprob: -11.77396011352539

Token 22: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -8.911954500945285e-05
    2. ' :' → logprob: -9.375088691711426
    3. ':[' → logprob: -13.375088691711426
    4. ':list' → logprob: -14.000088691711426
    5. '   ' → logprob: -15.125088691711426
    6. '+' → logprob: -15.375088691711426
    7. ':{}' → logprob: -15.625088691711426
    8. ':i' → logprob: -15.750088691711426
    9. ':set' → logprob: -15.875088691711426
    10. '```' → logprob: -16.125089645385742

Token 23: ' []' (ID: 6126)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.06832056492567062
    2. ' []' → logprob: -3.1933205127716064
    3. '[]}' → logprob: -3.6933205127716064
    4. '[' → logprob: -10.568320274353027
    5. '{"' → logprob: -10.818320274353027
    6. '{}' → logprob: -11.318320274353027
    7. 'set' → logprob: -11.443320274353027
    8. '{'' → logprob: -11.693320274353027
    9. 'None' → logprob: -12.193320274353027
    10. '{' → logprob: -12.443320274353027

Token 24: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.012437008321285248
    2. 'for' → logprob: -4.887436866760254
    3. '   ' → logprob: -6.637436866760254
    4. '<|end|>' → logprob: -6.637436866760254
    5. '}' → logprob: -7.137436866760254
    6. '	for' → logprob: -7.262436866760254
    7. ' ' → logprob: -8.137436866760254
    8. ',' → logprob: -8.137436866760254
    9. ')' → logprob: -10.012436866760254
    10. '<|end|>' → logprob: -10.762436866760254

Token 25: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.00028529210248962045
    2. 'i' → logprob: -8.500285148620605
    3. ' range' → logprob: -10.000285148620605
    4. ' ' → logprob: -10.875285148620605
    5. '	i' → logprob: -11.250285148620605
    6. 'range' → logprob: -13.125285148620605
    7. ' ' → logprob: -13.875285148620605
    8. ' in' → logprob: -14.500285148620605
    9. '<|end|>' → logprob: -15.125285148620605
    10. '  ' → logprob: -15.875285148620605

Token 26: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.02632097154855728
    2. 'in' → logprob: -3.6513209342956543
    3. ' ' → logprob: -12.401321411132812
    4. '	in' → logprob: -12.651321411132812
    5. 'range' → logprob: -13.151321411132812
    6. 'n' → logprob: -13.213821411132812
    7. '<|end|>' → logprob: -13.901321411132812
    8. 'i' → logprob: -14.276321411132812
    9. ' i' → logprob: -14.338821411132812
    10. ' ' → logprob: -14.463821411132812

Token 27: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.20141363143920898
    2. 'range' → logprob: -1.701413631439209
    3. '	range' → logprob: -15.201414108276367
    4. '(range' → logprob: -18.076414108276367
    5. ' ' → logprob: -18.076414108276367
    6. '_range' → logprob: -18.576414108276367
    7. 'Range' → logprob: -19.201414108276367
    8. 'rang' → logprob: -19.201414108276367
    9. ' xrange' → logprob: -19.951414108276367
    10. '```' → logprob: -20.451414108276367

Token 28: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.20141927897930145
    2. '(' → logprob: -1.7014192342758179
    3. ' (' → logprob: -12.07641887664795
    4. '1' → logprob: -15.82641887664795
    5. ' n' → logprob: -16.576419830322266
    6. 'n' → logprob: -16.701419830322266
    7. '(nn' → logprob: -17.451419830322266
    8. '   ' → logprob: -17.701419830322266
    9. '(
' → logprob: -17.701419830322266
    10. ' ' → logprob: -17.701419830322266

Token 29: ')}

' (ID: 184554)
  Prédit: ')}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')}' → logprob: -0.0002043748099822551
    2. ')' → logprob: -8.625204086303711
    3. ' )' → logprob: -11.625204086303711
    4. ')}}' → logprob: -12.250204086303711
    5. '}' → logprob: -12.750204086303711
    6. ');}' → logprob: -12.750204086303711
    7. '   ' → logprob: -13.625204086303711
    8. '})' → logprob: -13.875204086303711
    9. ')}

' → logprob: -14.000204086303711
    10. '))' → logprob: -14.000204086303711

Token 30: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.4403136372566223
    2. '
' → logprob: -1.4403135776519775
    3. '

' → logprob: -2.1903135776519775
    4. '<|end|>' → logprob: -6.440313816070557
    5. '```' → logprob: -6.565313816070557
    6. '\' → logprob: -6.690313816070557
    7. ' def' → logprob: -7.190313816070557
    8. '\n' → logprob: -7.315313816070557
    9. 'd' → logprob: -7.940313816070557
    10. '
' → logprob: -8.065313339233398

Token 31: ' read' (ID: 1729)
  Prédit: ' add'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' add' → logprob: -0.0984693318605423
    2. ' bfs' → logprob: -2.8484692573547363
    3. ' build' → logprob: -3.7234692573547363
    4. 'add' → logprob: -5.723469257354736
    5. ' insert' → logprob: -6.098469257354736
    6. ' level' → logprob: -6.348469257354736
    7. ' create' → logprob: -6.973469257354736
    8. '_add' → logprob: -7.098469257354736
    9. ' initialize' → logprob: -7.348469257354736
    10. ' breadth' → logprob: -7.473469257354736

Token 32: '_edge' (ID: 43226)
  Prédit: '_nodes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_nodes' → logprob: -1.0437686443328857
    2. '_tree' → logprob: -1.2937686443328857
    3. '_children' → logprob: -1.7937686443328857
    4. '_edges' → logprob: -2.0437686443328857
    5. '_child' → logprob: -3.9187686443328857
    6. '_node' → logprob: -3.9187686443328857
    7. '_parent' → logprob: -4.793768882751465
    8. '_' → logprob: -4.793768882751465
    9. '_data' → logprob: -4.918768882751465
    10. '_edge' → logprob: -5.543768882751465

Token 33: '():
' (ID: 8595)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.007759823463857174
    2. '(' → logprob: -5.007760047912598
    3. '()' → logprob: -7.882760047912598
    4. '_s' → logprob: -7.882760047912598
    5. '(s' → logprob: -8.882760047912598
    6. '_' → logprob: -9.382760047912598
    7. '():' → logprob: -11.507760047912598
    8. '```' → logprob: -11.632760047912598
    9. '(_' → logprob: -12.257760047912598
    10. '_list' → logprob: -12.382760047912598

Token 34: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0005516022793017328
    2. 'return' → logprob: -8.250551223754883
    3. '()' → logprob: -9.500551223754883
    4. '():' → logprob: -9.625551223754883
    5. ' return' → logprob: -9.875551223754883
    6. ')' → logprob: -10.625551223754883
    7. '    
' → logprob: -11.250551223754883
    8. 'def' → logprob: -11.500551223754883
    9. '):' → logprob: -12.000551223754883
    10. '	return' → logprob: -12.125551223754883

Token 35: ' t' (ID: 260)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.3911372423171997
    2. '   ' → logprob: -1.1411372423171997
    3. ' return' → logprob: -6.51613712310791
    4. 'node' → logprob: -6.76613712310791
    5. 'int' → logprob: -6.89113712310791
    6. 'line' → logprob: -8.76613712310791
    7. 'edge' → logprob: -8.89113712310791
    8. '```' → logprob: -9.76613712310791
    9. ' ' → logprob: -10.39113712310791
    10. 'a' → logprob: -10.39113712310791

Token 36: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.7234529256820679
    2. ',' → logprob: -1.9734529256820679
    3. 'uple' → logprob: -2.2234530448913574
    4. '=' → logprob: -2.4734530448913574
    5. 'arget' → logprob: -2.8484530448913574
    6. 'up' → logprob: -3.7234530448913574
    7. 'ype' → logprob: -3.8484530448913574
    8. 'oken' → logprob: -3.9734530448913574
    9. 'o' → logprob: -4.348453044891357
    10. '=int' → logprob: -4.473453044891357

Token 37: ' input' (ID: 3422)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.6357898116111755
    2. 'int' → logprob: -0.7607898116111755
    3. ' input' → logprob: -6.76078987121582
    4. 'input' → logprob: -6.88578987121582
    5. ' tuple' → logprob: -7.26078987121582
    6. 'tuple' → logprob: -9.26078987121582
    7. '(int' → logprob: -9.76078987121582
    8. 'uple' → logprob: -9.88578987121582
    9. ' ' → logprob: -10.26078987121582
    10. '=int' → logprob: -11.13578987121582

Token 38: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.3889765739440918
    2. '().' → logprob: -1.1389765739440918
    3. '(' → logprob: -6.888976573944092
    4. '())' → logprob: -7.263976573944092
    5. '("' → logprob: -9.51397705078125
    6. ')' → logprob: -10.13897705078125
    7. '.' → logprob: -10.26397705078125
    8. '('' → logprob: -10.26397705078125
    9. ' ' → logprob: -10.51397705078125
    10. '()
' → logprob: -10.76397705078125

Token 39: 'split' (ID: 13627)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.2520708441734314
    2. 'split' → logprob: -1.5020709037780762
    3. 'rstrip' → logprob: -8.877070426940918
    4. ' strip' → logprob: -14.502070426940918
    5. ' split' → logprob: -14.752070426940918
    6. 'str' → logprob: -15.002070426940918
    7. 'spl' → logprob: -15.127070426940918
    8. ' ' → logprob: -15.752070426940918
    9. 'read' → logprob: -15.877070426940918
    10. 's' → logprob: -16.377071380615234

Token 40: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.16893315315246582
    2. '('' → logprob: -1.9189331531524658
    3. '(' → logprob: -4.793932914733887
    4. '("("' → logprob: -8.418932914733887
    5. '("' → logprob: -8.918932914733887
    6. '())' → logprob: -11.168932914733887
    7. '(',' → logprob: -12.168932914733887
    8. '('.')' → logprob: -12.793932914733887
    9. '()]' → logprob: -13.168932914733887
    10. ' ()' → logprob: -13.543932914733887

Token 41: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4141746759414673
    2. '   ' → logprob: -1.5391746759414673
    3. '<|end|>' → logprob: -3.0391745567321777
    4. '    ' → logprob: -3.4141745567321777
    5. '[' → logprob: -4.039174556732178
    6. '  ' → logprob: -4.664174556732178
    7. ' 
' → logprob: -5.914174556732178
    8. ')' → logprob: -6.289174556732178
    9. '    
' → logprob: -6.414174556732178
    10. ' )' → logprob: -6.789174556732178

Token 42: ' return' (ID: 622)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.05688269063830376
    2. ' u' → logprob: -2.931882619857788
    3. 'a' → logprob: -7.181882858276367
    4. 'return' (adapté à ' return') → logprob: -7.306882858276367
    5. '   ' → logprob: -8.556882858276367
    6. ' return' → logprob: -8.931882858276367
    7. 'p' → logprob: -10.056882858276367
    8. 't' → logprob: -10.056882858276367
    9. 'v' → logprob: -10.306882858276367
    10. 'r' → logprob: -10.806882858276367

Token 43: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.070705346763134
    2. ' int' → logprob: -3.1957054138183594
    3. '(int' → logprob: -3.6957054138183594
    4. '[int' → logprob: -6.070705413818359
    5. 'tuple' → logprob: -9.57070541381836
    6. ' (' → logprob: -9.94570541381836
    7. 'list' → logprob: -10.69570541381836
    8. ' tuple' → logprob: -11.07070541381836
    9. '(t' → logprob: -11.57070541381836
    10. ' list' → logprob: -12.32070541381836

Token 44: '(t' (ID: 2025)
  Prédit: '(t'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(t' → logprob: -0.16023722290992737
    2. '(' → logprob: -1.910237193107605
    3. ' (' → logprob: -11.410237312316895
    4. '(s' → logprob: -15.035237312316895
    5. '(
' → logprob: -15.160237312316895
    6. '((' → logprob: -15.285237312316895
    7. 't' → logprob: -15.410237312316895
    8. '(tokens' → logprob: -15.410237312316895
    9. '('' → logprob: -15.660237312316895
    10. '(

' → logprob: -15.910237312316895

Token 45: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.700132997939363e-05
    2. '0' → logprob: -11.375017166137695
    3. ' [' → logprob: -12.375017166137695
    4. '(' → logprob: -14.750017166137695
    5. ')' → logprob: -15.500017166137695
    6. '1' → logprob: -15.750017166137695
    7. '\[' → logprob: -15.875017166137695
    8. '[
' → logprob: -16.250017166137695
    9. '   ' → logprob: -16.375017166137695
    10. '[-' → logprob: -16.750017166137695

Token 46: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -6.253713218029588e-05
    2. '1' → logprob: -10.125062942504883
    3. ' ' → logprob: -10.750062942504883
    4. '-' → logprob: -14.625062942504883
    5. '   ' → logprob: -15.625062942504883
    6. '[' → logprob: -15.625062942504883
    7. ')' → logprob: -15.750062942504883
    8. '```' → logprob: -17.312562942504883
    9. '  ' → logprob: -17.375062942504883
    10. ']' → logprob: -17.812562942504883

Token 47: ']),' (ID: 19560)
  Prédit: ']),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']),' → logprob: -0.3509652018547058
    2. '])' → logprob: -1.2259652614593506
    3. ']' → logprob: -6.9759650230407715
    4. ')' → logprob: -7.8509650230407715
    5. ' ])' → logprob: -7.8509650230407715
    6. ' ]' → logprob: -8.22596549987793
    7. '])-' → logprob: -8.35096549987793
    8. '),' → logprob: -9.22596549987793
    9. '],' → logprob: -9.60096549987793
    10. '']),' → logprob: -10.60096549987793

Token 48: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.2519311308860779
    2. ' int' → logprob: -1.5019311904907227
    3. '=int' → logprob: -14.376931190490723
    4. '(int' → logprob: -14.876931190490723
    5. ' ' → logprob: -15.001931190490723
    6. '<int' → logprob: -15.376931190490723
    7. '	int' → logprob: -16.001930236816406
    8. ' ' → logprob: -16.251930236816406
    9. '[int' → logprob: -16.376930236816406
    10. ',int' → logprob: -16.376930236816406

Token 49: '(t' (ID: 2025)
  Prédit: '(t'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(t' → logprob: -0.012534845620393753
    2. '(' → logprob: -4.3875346183776855
    3. ')(' → logprob: -11.637535095214844
    4. ')' → logprob: -12.137535095214844
    5. ' (' → logprob: -12.387535095214844
    6. 't' → logprob: -13.512535095214844
    7. '()' → logprob: -13.637535095214844
    8. '(token' → logprob: -13.637535095214844
    9. '(s' → logprob: -14.762535095214844
    10. '(
' → logprob: -14.762535095214844

Token 50: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.009955115616321564
    2. '1' → logprob: -4.634954929351807
    3. ')' → logprob: -9.634955406188965
    4. ' [' → logprob: -9.884955406188965
    5. '(' → logprob: -10.384955406188965
    6. '-' → logprob: -10.634955406188965
    7. '   ' → logprob: -12.509955406188965
    8. '[-' → logprob: -12.634955406188965
    9. ')[' → logprob: -12.884955406188965
    10. ' ' → logprob: -13.009955406188965

Token 51: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.082895273109898e-05
    2. '0' → logprob: -11.125030517578125
    3. ' ' → logprob: -11.250030517578125
    4. '   ' → logprob: -13.750030517578125
    5. '])' → logprob: -14.375030517578125
    6. '-' → logprob: -14.750030517578125
    7. '  ' → logprob: -15.250030517578125
    8. '[' → logprob: -15.687530517578125
    9. '2' → logprob: -16.312530517578125
    10. ')' → logprob: -16.312530517578125

Token 52: '])

' (ID: 21045)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '])' → logprob: -0.0013403621269389987
    2. ')' → logprob: -6.751340389251709
    3. ')])' → logprob: -9.50133991241455
    4. '])]' → logprob: -10.62633991241455
    5. ' ])' → logprob: -10.75133991241455
    6. ']' → logprob: -10.87633991241455
    7. ']))' → logprob: -11.87633991241455
    8. ')]' → logprob: -11.87633991241455
    9. ']),' → logprob: -12.25133991241455
    10. ''])' → logprob: -12.75133991241455

Token 53: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.025705605745315552
    2. '
' → logprob: -3.900705575942993
    3. '

' → logprob: -5.775705814361572
    4. '<|end|>' → logprob: -6.775705814361572
    5. '```' → logprob: -8.150705337524414
    6. '<|end|>' → logprob: -8.900705337524414
    7. '\' → logprob: -9.400705337524414
    8. ' def' → logprob: -9.650705337524414
    9. '\n' → logprob: -9.650705337524414
    10. '
' → logprob: -10.025705337524414

Token 54: ' add' (ID: 1147)
  Prédit: ' bfs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' bfs' → logprob: -0.02454330585896969
    2. 'b' → logprob: -4.274543285369873
    3. ' level' → logprob: -5.524543285369873
    4. ' breadth' → logprob: -5.899543285369873
    5. ' build' → logprob: -6.774543285369873
    6. ' main' → logprob: -7.774543285369873
    7. ' find' → logprob: -7.774543285369873
    8. ' add' → logprob: -7.899543285369873
    9. ' BFS' → logprob: -8.149543762207031
    10. ' calculate' → logprob: -8.524543762207031

Token 55: '_edge' (ID: 43226)
  Prédit: '_edge'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_edge' → logprob: -0.009054489433765411
    2. '_' → logprob: -5.134054660797119
    3. '_node' → logprob: -5.884054660797119
    4. '_child' → logprob: -8.509054183959961
    5. '_connection' → logprob: -10.509054183959961
    6. '_edges' → logprob: -10.759054183959961
    7. '_to' → logprob: -10.884054183959961
    8. '_branch' → logprob: -10.884054183959961
    9. ' _' → logprob: -11.009054183959961
    10. '_parent' → logprob: -11.634054183959961

Token 56: '(tree' (ID: 44909)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6794548630714417
    2. '(node' → logprob: -1.1794548034667969
    3. '(u' → logprob: -2.679454803466797
    4. '(parent' → logprob: -3.054454803466797
    5. '(a' → logprob: -3.304454803466797
    6. ' (' → logprob: -3.929454803466797
    7. '(tree' → logprob: -5.429454803466797
    8. '(n' → logprob: -6.054454803466797
    9. '(root' → logprob: -6.054454803466797
    10. '(nodes' → logprob: -6.804454803466797

Token 57: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.007033262401819229
    2. ' ,' → logprob: -5.882033348083496
    3. ')' → logprob: -6.132033348083496
    4. '):' → logprob: -7.632033348083496
    5. ',u' → logprob: -7.632033348083496
    6. ',node' → logprob: -8.382033348083496
    7. ',parent' → logprob: -8.632033348083496
    8. '(' → logprob: -9.007033348083496
    9. '(u' → logprob: -9.257033348083496
    10. '   ' → logprob: -9.257033348083496

Token 58: ' u' (ID: 337)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.6496343016624451
    2. ' u' → logprob: -0.7746343016624451
    3. ' parent' → logprob: -5.14963436126709
    4. 'parent' → logprob: -5.64963436126709
    5. 'from' → logprob: -6.27463436126709
    6. ' node' → logprob: -6.52463436126709
    7. 'node' → logprob: -6.89963436126709
    8. 'a' → logprob: -6.89963436126709
    9. ' from' → logprob: -7.64963436126709
    10. ' a' → logprob: -7.89963436126709

Token 59: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00011999329581158236
    2. ' ,' → logprob: -9.125120162963867
    3. ',u' → logprob: -11.500120162963867
    4. ',v' → logprob: -14.750120162963867
    5. '‌,' → logprob: -15.875120162963867
    6. ')' → logprob: -16.250120162963867
    7. '),' → logprob: -17.375120162963867
    8. ',node' → logprob: -17.625120162963867
    9. ',user' → logprob: -17.750120162963867
    10. ',e' → logprob: -17.750120162963867

Token 60: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.6931543946266174
    2. ' v' → logprob: -0.6931543946266174
    3. '	v' → logprob: -12.568154335021973
    4. ' ' → logprob: -13.568154335021973
    5. ')' → logprob: -14.818154335021973
    6. 'vq' → logprob: -15.068154335021973
    7. ')v' → logprob: -15.193154335021973
    8. '   ' → logprob: -15.443154335021973
    9. ',v' → logprob: -15.568154335021973
    10. '_v' → logprob: -16.06815528869629

Token 61: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0002651503309607506
    2. ')' → logprob: -8.625265121459961
    3. '):
' → logprob: -9.875265121459961
    4. ' ):' → logprob: -10.375265121459961
    5. ':' → logprob: -13.750265121459961
    6. '):
' → logprob: -13.875265121459961
    7. '   ' → logprob: -15.625265121459961
    8. '):

' → logprob: -15.875265121459961
    9. ',' → logprob: -16.25026512145996
    10. ''):' → logprob: -16.62526512145996

Token 62: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.013261877931654453
    2. ' tree' → logprob: -4.388261795043945
    3. '	tree' → logprob: -7.888261795043945
    4. '(tree' → logprob: -8.513261795043945
    5. '    
' → logprob: -9.763261795043945
    6. 'tree' → logprob: -10.263261795043945
    7. ')' → logprob: -11.013261795043945
    8. '<|end|>' → logprob: -11.138261795043945
    9. '/tree' → logprob: -11.388261795043945
    10. ' 
' → logprob: -11.763261795043945

Token 63: ' tree' (ID: 8165)
  Prédit: ' tree'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tree' → logprob: -0.016131849959492683
    2. 'tree' (adapté à ' tree') → logprob: -4.14113187789917
    3. '   ' → logprob: -9.641131401062012
    4. '	tree' → logprob: -10.641131401062012
    5. '(tree' → logprob: -12.266131401062012
    6. '.tree' → logprob: -13.266131401062012
    7. '_tree' → logprob: -14.391131401062012
    8. '-tree' → logprob: -14.391131401062012
    9. '/tree' → logprob: -14.766131401062012
    10. ' trees' → logprob: -15.391131401062012

Token 64: '[u' (ID: 48750)
  Prédit: '[u'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[u' → logprob: -0.00024096666311379522
    2. '[' → logprob: -8.37524127960205
    3. '[v' → logprob: -11.62524127960205
    4. ' [' → logprob: -14.25024127960205
    5. '```' → logprob: -15.37524127960205
    6. '   ' → logprob: -15.62524127960205
    7. '\[' → logprob: -16.000240325927734
    8. 'u' → logprob: -16.125240325927734
    9. '.setdefault' → logprob: -17.000240325927734
    10. '[user' → logprob: -17.250240325927734

Token 65: '-' (ID: 12)
  Prédit: '].'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '].' → logprob: -0.0002887490263674408
    2. ']' → logprob: -8.250288963317871
    3. ' ].' → logprob: -10.750288963317871
    4. ''].' → logprob: -12.625288963317871
    5. '   ' → logprob: -14.000288963317871
    6. ']).' → logprob: -15.000288963317871
    7. '"].' → logprob: -15.000288963317871
    8. '.append' → logprob: -15.125288963317871
    9. ').' → logprob: -15.250288963317871
    10. '.' → logprob: -15.375288963317871

Token 66: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.531315314830863e-06
    2. ' ' → logprob: -13.375003814697266
    3. ']' → logprob: -14.375003814697266
    4. ')' → logprob: -14.500003814697266
    5. '>' → logprob: -15.250003814697266
    6. 'append' → logprob: -15.750003814697266
    7. '.append' → logprob: -15.750003814697266
    8. '<|end|>' → logprob: -16.125003814697266
    9. 'to' → logprob: -17.125003814697266
    10. ':' → logprob: -17.125003814697266

Token 67: '].' (ID: 1651)
  Prédit: '].'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '].' → logprob: -0.00040934275602921844
    2. ']' → logprob: -7.875409126281738
    3. ' ].' → logprob: -10.750409126281738
    4. ').' → logprob: -12.250409126281738
    5. '.append' → logprob: -13.875409126281738
    6. ')].' → logprob: -14.500409126281738
    7. '   ' → logprob: -14.750409126281738
    8. ''].' → logprob: -15.000409126281738
    9. ']).' → logprob: -15.250409126281738
    10. '])' → logprob: -15.625409126281738

Token 68: 'append' (ID: 9132)
  Prédit: 'append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'append' → logprob: -3.128163257315464e-07
    2. '.append' → logprob: -15.75
    3. ' append' → logprob: -16.0
    4. 'appen' → logprob: -18.5
    5. 'app' → logprob: -19.5
    6. 'add' → logprob: -20.25
    7. '_append' → logprob: -20.75
    8. '	append' → logprob: -20.75
    9. 'Append' → logprob: -22.375
    10. 'appe' → logprob: -23.0

Token 69: '(v' (ID: 6932)
  Prédit: '(v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(v' → logprob: -1.759734732331708e-05
    2. '(' → logprob: -11.125017166137695
    3. 'v' → logprob: -12.875017166137695
    4. '((' → logprob: -16.000017166137695
    5. ' (' → logprob: -16.875017166137695
    6. '(
' → logprob: -17.250017166137695
    7. '	v' → logprob: -18.375017166137695
    8. ' v' → logprob: -18.625017166137695
    9. '(u' → logprob: -20.000017166137695
    10. ')v' → logprob: -20.250017166137695

Token 70: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.004085643216967583
    2. ' -' → logprob: -5.504085540771484
    3. ')' → logprob: -12.129085540771484
    4. '-)' → logprob: -13.754085540771484
    5. '<|end|>' → logprob: -15.379085540771484
    6. '1' → logprob: -15.629085540771484
    7. ' ' → logprob: -16.379085540771484
    8. '   ' → logprob: -16.879085540771484
    9. '<|end|>' → logprob: -17.504085540771484
    10. ')-' → logprob: -17.879085540771484

Token 71: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.128163257315464e-07
    2. ' ' → logprob: -15.75
    3. '2' → logprob: -15.75
    4. ')' → logprob: -18.125
    5. '```' → logprob: -18.125
    6. '<|end|>' → logprob: -18.25
    7. '>' → logprob: -19.125
    8. '-' → logprob: -19.25
    9. '１' → logprob: -19.4375
    10. '   ' → logprob: -19.6875

Token 72: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.0100624169572257e-05
    2. ' )' → logprob: -11.125020027160645
    3. ')
' → logprob: -12.250020027160645
    4. '   ' → logprob: -15.625020027160645
    5. ')return' → logprob: -16.37502098083496
    6. ')

' → logprob: -16.62502098083496
    7. '),' → logprob: -16.87502098083496
    8. ')#' → logprob: -17.00002098083496
    9. '))' → logprob: -17.25002098083496
    10. ')}}' → logprob: -17.37502098083496

Token 73: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.8129265308380127
    2. '   ' → logprob: -0.9379265308380127
    3. '<|end|>' → logprob: -2.3129265308380127
    4. '
' → logprob: -3.0629265308380127
    5. 'def' → logprob: -4.937926292419434
    6. ')
' → logprob: -4.937926292419434
    7. '    
' → logprob: -6.812926292419434
    8. '<|end|>' → logprob: -7.062926292419434
    9. ' ' → logprob: -7.187926292419434
    10. '```' → logprob: -7.187926292419434

Token 74: ' tree' (ID: 8165)
  Prédit: 'tree'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tree' (adapté à ' tree') → logprob: -0.004248519893735647
    2. '   ' → logprob: -5.62924861907959
    3. '	tree' → logprob: -8.00424861907959
    4. ' tree' → logprob: -8.87924861907959
    5. 'def' → logprob: -10.00424861907959
    6. ')' → logprob: -10.12924861907959
    7. '(tree' → logprob: -10.50424861907959
    8. '```' → logprob: -10.87924861907959
    9. '<|end|>' → logprob: -11.50424861907959
    10. ' ' → logprob: -11.87924861907959

Token 75: '[v' (ID: 36561)
  Prédit: '[v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[v' → logprob: -0.00012737659562844783
    2. '[u' → logprob: -9.125127792358398
    3. '[' → logprob: -11.250127792358398
    4. 'v' → logprob: -12.500127792358398
    5. '```' → logprob: -14.625127792358398
    6. '   ' → logprob: -16.2501277923584
    7. '[V' → logprob: -16.2501277923584
    8. '	v' → logprob: -16.2501277923584
    9. ' [' → logprob: -16.3751277923584
    10. '(v' → logprob: -16.6251277923584

Token 76: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.00015359772078227252
    2. '[' → logprob: -9.375153541564941
    3. ' -' → logprob: -9.625153541564941
    4. '[-' → logprob: -13.125153541564941
    5. ']-' → logprob: -15.750153541564941
    6. ''-' → logprob: -16.000154495239258
    7. '1' → logprob: -16.125154495239258
    8. '   ' → logprob: -16.875154495239258
    9. '][' → logprob: -17.500154495239258
    10. '()-' → logprob: -17.500154495239258

Token 77: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.1008713702030946e-06
    2. ' ' → logprob: -13.500001907348633
    3. '<|end|>' → logprob: -14.750001907348633
    4. '```' → logprob: -16.687501907348633
    5. '2' → logprob: -16.812501907348633
    6. '<|end|>' → logprob: -17.750001907348633
    7. '१' → logprob: -17.937501907348633
    8. '   ' → logprob: -17.937501907348633
    9. '`' → logprob: -18.000001907348633
    10. '১' → logprob: -18.125001907348633

Token 78: '].' (ID: 1651)
  Prédit: '].'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '].' → logprob: -0.025346994400024414
    2. ').' → logprob: -4.150346755981445
    3. ']' → logprob: -4.775346755981445
    4. ')' → logprob: -7.150346755981445
    5. '.' → logprob: -10.525346755981445
    6. ' ].' → logprob: -12.025346755981445
    7. '[' → logprob: -12.150346755981445
    8. '])' → logprob: -12.775346755981445
    9. ']).' → logprob: -13.150346755981445
    10. '.append' → logprob: -13.650346755981445

Token 79: 'append' (ID: 9132)
  Prédit: 'append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'append' → logprob: -2.45848218582978e-06
    2. 'appen' → logprob: -13.62500286102295
    3. ' append' → logprob: -13.75000286102295
    4. '.append' → logprob: -16.125001907348633
    5. '	append' → logprob: -16.875001907348633
    6. 'add' → logprob: -18.125001907348633
    7. 'app' → logprob: -19.000001907348633
    8. 'appe' → logprob: -19.250001907348633
    9. '   ' → logprob: -19.625001907348633
    10. ' ' → logprob: -19.625001907348633

Token 80: '(u' (ID: 17057)
  Prédit: '(u'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(u' → logprob: -0.038054004311561584
    2. '(' → logprob: -3.2880539894104004
    3. ' (' → logprob: -11.538054466247559
    4. '(
' → logprob: -14.038054466247559
    5. 'u' → logprob: -14.413054466247559
    6. '((' → logprob: -14.788054466247559
    7. '('' → logprob: -15.038054466247559
    8. '(v' → logprob: -15.788054466247559
    9. '(s' → logprob: -15.913054466247559
    10. '(`' → logprob: -16.663053512573242

Token 81: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.10783350467681885
    2. ')' → logprob: -2.4828333854675293
    3. '-)' → logprob: -3.9828333854675293
    4. ' -' → logprob: -9.732833862304688
    5. '[' → logprob: -11.857833862304688
    6. '[-' → logprob: -12.732833862304688
    7. ')-' → logprob: -12.857833862304688
    8. '1' → logprob: -12.857833862304688
    9. ']' → logprob: -13.232833862304688
    10. ')
' → logprob: -13.857833862304688

Token 82: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.0280383548888494e-06
    2. ')' → logprob: -14.625000953674316
    3. ' ' → logprob: -14.625000953674316
    4. '<|end|>' → logprob: -17.000001907348633
    5. '```' → logprob: -18.750001907348633
    6. '-' → logprob: -19.000001907348633
    7. '   ' → logprob: -20.250001907348633
    8. '0' → logprob: -20.625001907348633
    9. ']' → logprob: -20.750001907348633
    10. '')' → logprob: -20.750001907348633

Token 83: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.7968066206085496e-05
    2. ')
' → logprob: -10.500027656555176
    3. ')

' → logprob: -16.250028610229492
    4. ' )' → logprob: -16.375028610229492
    5. ')`' → logprob: -17.500028610229492
    6. ')}' → logprob: -17.750028610229492
    7. '))' → logprob: -17.750028610229492
    8. '')' → logprob: -17.750028610229492
    9. ')return' → logprob: -18.000028610229492
    10. '   ' → logprob: -18.000028610229492

Token 84: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.005244191270321608
    2. 'd' → logprob: -5.380244255065918
    3. '\' → logprob: -8.130244255065918
    4. '```' → logprob: -8.630244255065918
    5. '
' → logprob: -9.505244255065918
    6. '#' → logprob: -10.255244255065918
    7. 'de' → logprob: -11.630244255065918
    8. '

' → logprob: -12.005244255065918
    9. '\n' → logprob: -12.380244255065918
    10. ' def' → logprob: -12.505244255065918

Token 85: ' build' (ID: 3024)
  Prédit: ' bfs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' bfs' → logprob: -0.03515211492776871
    2. 'b' → logprob: -3.4101521968841553
    3. ' breadth' → logprob: -7.160151958465576
    4. ' dfs' → logprob: -8.285152435302734
    5. ' BFS' → logprob: -8.660152435302734
    6. ' b' → logprob: -9.660152435302734
    7. ' main' → logprob: -9.910152435302734
    8. ' find' → logprob: -10.285152435302734
    9. ' level' → logprob: -10.410152435302734
    10. 'dfs' → logprob: -10.660152435302734

Token 86: '_tree' (ID: 27118)
  Prédit: '_tree'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_tree' → logprob: -0.1304890662431717
    2. '_' → logprob: -2.1304891109466553
    3. '_t' → logprob: -6.505488872528076
    4. '```' → logprob: -7.505488872528076
    5. ' _' → logprob: -7.630488872528076
    6. ''_' → logprob: -8.505489349365234
    7. '"_' → logprob: -8.880489349365234
    8. '(_' → logprob: -9.380489349365234
    9. ')_' → logprob: -9.880489349365234
    10. '_TREE' → logprob: -10.005489349365234

Token 87: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.3133934438228607
    2. '(' → logprob: -1.313393473625183
    3. ' (' → logprob: -9.063393592834473
    4. '(tree' → logprob: -12.313393592834473
    5. '(N' → logprob: -12.813393592834473
    6. '("("' → logprob: -13.688393592834473
    7. '(node' → logprob: -13.813393592834473
    8. '(num' → logprob: -14.313393592834473
    9. '(t' → logprob: -14.563393592834473
    10. '(
' → logprob: -14.813393592834473

Token 88: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.008142538368701935
    2. ',' → logprob: -4.883142471313477
    3. ')' → logprob: -8.008142471313477
    4. '):
' → logprob: -8.883142471313477
    5. ' ):' → logprob: -9.758142471313477
    6. ',n' → logprob: -13.133142471313477
    7. ':' → logprob: -13.383142471313477
    8. '   ' → logprob: -14.008142471313477
    9. '):
' → logprob: -14.133142471313477
    10. '),' → logprob: -15.133142471313477

Token 89: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.030783196911215782
    2. ' tree' → logprob: -4.530783176422119
    3. '	tree' → logprob: -4.780783176422119
    4. 'tree' → logprob: -4.905783176422119
    5. '    
' → logprob: -6.780783176422119
    6. '
' → logprob: -6.905783176422119
    7. '(tree' → logprob: -7.655783176422119
    8. '```' → logprob: -7.780783176422119
    9. '   ' → logprob: -8.655783653259277
    10. '  ' → logprob: -9.155783653259277

Token 90: ' tree' (ID: 8165)
  Prédit: 'tree'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tree' (adapté à ' tree') → logprob: -0.06388003379106522
    2. ' tree' → logprob: -2.81387996673584
    3. '   ' → logprob: -6.68887996673584
    4. 'tre' → logprob: -8.68887996673584
    5. 't' → logprob: -9.06387996673584
    6. '	tree' → logprob: -9.06387996673584
    7. '
' → logprob: -9.18887996673584
    8. '```' → logprob: -9.68887996673584
    9. '    
' → logprob: -10.68887996673584
    10. ' 
' → logprob: -10.68887996673584

Token 91: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01252683810889721
    2. '=' → logprob: -4.387526988983154
    3. ' ' → logprob: -11.637526512145996
    4. ',' → logprob: -12.387526512145996
    5. ')' → logprob: -13.012526512145996
    6. ' =)' → logprob: -15.012526512145996
    7. '   ' → logprob: -15.262526512145996
    8. ' =
' → logprob: -15.262526512145996
    9. '  ' → logprob: -15.637526512145996
    10. ' =
' → logprob: -16.137527465820312

Token 92: ' initialize' (ID: 18400)
  Prédit: ' initialize'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' initialize' → logprob: -0.5243793725967407
    2. 'initialize' → logprob: -0.8993793725967407
    3. '{}' → logprob: -6.899379253387451
    4. ' {}' → logprob: -8.64937973022461
    5. '	initialize' → logprob: -10.02437973022461
    6. ' ' → logprob: -11.14937973022461
    7. '.initialize' → logprob: -12.64937973022461
    8. 'itialize' → logprob: -13.02437973022461
    9. '_initialize' → logprob: -14.02437973022461
    10. ' ' → logprob: -14.27437973022461

Token 93: '_tree' (ID: 27118)
  Prédit: '_tree'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_tree' → logprob: -0.00027301779482513666
    2. '_t' → logprob: -8.625272750854492
    3. '_' → logprob: -9.375272750854492
    4. ' _' → logprob: -12.625272750854492
    5. '_TREE' → logprob: -14.000272750854492
    6. '```' → logprob: -14.000272750854492
    7. '_tr' → logprob: -14.625272750854492
    8. ''_' → logprob: -14.750272750854492
    9. '<Tree' → logprob: -14.875272750854492
    10. '"_' → logprob: -15.125272750854492

Token 94: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.010696062818169594
    2. '(' → logprob: -5.135695934295654
    3. '_tree' → logprob: -5.385695934295654
    4. '_' → logprob: -9.385696411132812
    5. ' (' → logprob: -10.135696411132812
    6. '_(' → logprob: -10.510696411132812
    7. '(tree' → logprob: -11.885696411132812
    8. 'tree' → logprob: -12.760696411132812
    9. '```' → logprob: -12.885696411132812
    10. '(_' → logprob: -13.135696411132812

Token 95: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.9153885558771435e-06
    2. ')
' → logprob: -12.125005722045898
    3. ' )' → logprob: -15.750005722045898
    4. ')return' → logprob: -16.0000057220459
    5. ')

' → logprob: -16.2500057220459
    6. '),' → logprob: -17.5000057220459
    7. ')n' → logprob: -17.5000057220459
    8. '))' → logprob: -17.7500057220459
    9. ')
' → logprob: -18.1250057220459
    10. '   ' → logprob: -18.5000057220459

Token 96: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13942737877368927
    2. 'for' → logprob: -2.514427423477173
    3. ' for' → logprob: -3.014427423477173
    4. '	for' → logprob: -10.139427185058594
    5. '<|end|>' → logprob: -10.139427185058594
    6. '    
' → logprob: -10.514427185058594
    7. 'n' → logprob: -10.514427185058594
    8. '
' → logprob: -11.639427185058594
    9. ' ' → logprob: -11.889427185058594
    10. '  ' → logprob: -13.389427185058594

Token 97: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.02975858747959137
    2. ' for' → logprob: -3.5297586917877197
    3. '   ' → logprob: -11.77975845336914
    4. '
' → logprob: -15.65475845336914
    5. '	for' → logprob: -16.27975845336914
    6. 'n' → logprob: -16.40475845336914
    7. '```' → logprob: -16.65475845336914
    8. '    
' → logprob: -17.15475845336914
    9. ' ' → logprob: -17.40475845336914
    10. ' 
' → logprob: -18.27975845336914

Token 98: ' _' (ID: 1175)
  Prédit: ' _'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.005155839025974274
    2. '_' → logprob: -5.50515604019165
    3. ' ' → logprob: -7.13015604019165
    4. ' i' → logprob: -8.755155563354492
    5. ' range' → logprob: -9.130155563354492
    6. ' ' → logprob: -12.005155563354492
    7. 'range' → logprob: -13.255155563354492
    8. ' ‌' → logprob: -13.880155563354492
    9. '_range' → logprob: -14.630155563354492
    10. ' ▁' → logprob: -15.005155563354492

Token 99: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.32555055618286133
    2. 'in' → logprob: -1.3255505561828613
    3. ' ' → logprob: -4.575550556182861
    4. 'i' → logprob: -7.325550556182861
    5. 'n' → logprob: -7.575550556182861
    6. 'range' → logprob: -8.200550079345703
    7. ' i' → logprob: -8.450550079345703
    8. '  ' → logprob: -8.700550079345703
    9. '   ' → logprob: -10.825550079345703
    10. '    ' → logprob: -11.325550079345703

Token 100: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.016208916902542114
    2. ' range' → logprob: -4.266209125518799
    3. 'ange' → logprob: -6.266209125518799
    4. '(range' → logprob: -9.51620864868164
    5. 'ge' → logprob: -10.76620864868164
    6. 'nge' → logprob: -11.14120864868164
    7. '	range' → logprob: -12.26620864868164
    8. 'n' → logprob: -12.39120864868164
    9. 'rage' → logprob: -12.76620864868164
    10. ' ' → logprob: -13.14120864868164

Token 101: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0023255792912095785
    2. ' (' → logprob: -6.752325534820557
    3. '(' → logprob: -6.877325534820557
    4. ' n' → logprob: -9.127326011657715
    5. 'n' → logprob: -11.127326011657715
    6. '(
' → logprob: -15.002326011657715
    7. '((' → logprob: -16.2523250579834
    8. ' ' → logprob: -17.1273250579834
    9. '	n' → logprob: -17.8773250579834
    10. '1' → logprob: -18.6273250579834

Token 102: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.31335511803627014
    2. ' -' → logprob: -1.3133550882339478
    3. ' ' → logprob: -9.438355445861816
    4. '1' → logprob: -11.563355445861816
    5. ' ' → logprob: -12.813355445861816
    6. ')' → logprob: -14.938355445861816
    7. '  ' → logprob: -15.313355445861816
    8. '   ' → logprob: -15.438355445861816
    9. '2' → logprob: -15.688355445861816
    10. ' -
' → logprob: -15.688355445861816

Token 103: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -9.85366350505501e-05
    2. ' ' → logprob: -9.87509822845459
    3. '2' → logprob: -10.62509822845459
    4. ')' → logprob: -11.50009822845459
    5. '-' → logprob: -11.62509822845459
    6. '<|end|>' → logprob: -13.93759822845459
    7. '```' → logprob: -14.25009822845459
    8. '
' → logprob: -15.25009822845459
    9. '۱' → logprob: -15.31259822845459
    10. '   ' → logprob: -15.68759822845459

Token 104: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.16258351504802704
    2. ')' → logprob: -1.9125834703445435
    3. ' ):' → logprob: -6.787583351135254
    4. ' )' → logprob: -7.662583351135254
    5. '):
' → logprob: -7.787583351135254
    6. ':' → logprob: -8.037583351135254
    7. '   ' → logprob: -12.037583351135254
    8. '):
' → logprob: -12.662583351135254
    9. ' ' → logprob: -12.912583351135254
    10. ' ):
' → logprob: -13.912583351135254

Token 105: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.11661860346794128
    2. '   ' → logprob: -2.6166186332702637
    3. ' u' → logprob: -4.241618633270264
    4. '<|end|>' → logprob: -4.366618633270264
    5. 'u' → logprob: -6.366618633270264
    6. ' ' → logprob: -6.491618633270264
    7. '    ' → logprob: -6.741618633270264
    8. ',' → logprob: -6.741618633270264
    9. '        
' → logprob: -6.991618633270264
    10. '    
' → logprob: -7.241618633270264

Token 106: ' u' (ID: 337)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' (adapté à ' u') → logprob: -0.048601455986499786
    2. ' u' → logprob: -3.0486013889312744
    3. '   ' → logprob: -12.173601150512695
    4. '       ' → logprob: -12.423601150512695
    5. '	u' → logprob: -12.548601150512695
    6. '(u' → logprob: -14.673601150512695
    7. ',u' → logprob: -15.423601150512695
    8. ' ' → logprob: -15.548601150512695
    9. 'e' → logprob: -16.173601150512695
    10. '_u' → logprob: -16.298601150512695

Token 107: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0008364312816411257
    2. ' ,' → logprob: -7.250836372375488
    3. ',v' → logprob: -9.375836372375488
    4. ',u' → logprob: -10.250836372375488
    5. '=' → logprob: -13.625836372375488
    6. ',user' → logprob: -13.875836372375488
    7. ',input' → logprob: -14.375836372375488
    8. ',
' → logprob: -14.750836372375488
    9. ')' → logprob: -15.000836372375488
    10. '<|end|>' → logprob: -15.125836372375488

Token 108: ' v' (ID: 323)
  Prédit: ' v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' v' → logprob: -0.1129344254732132
    2. 'v' → logprob: -2.2379343509674072
    3. ' ' → logprob: -9.612934112548828
    4. '<|end|>' → logprob: -10.112934112548828
    5. ' 
' → logprob: -13.487934112548828
    6. '	v' → logprob: -13.487934112548828
    7. ' ' → logprob: -14.737934112548828
    8. '_v' → logprob: -15.737934112548828
    9. 'space' → logprob: -15.737934112548828
    10. ',v' → logprob: -15.987934112548828

Token 109: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.02630273625254631
    2. '=' → logprob: -3.6513028144836426
    3. ')' → logprob: -13.276302337646484
    4. '<|end|>' → logprob: -15.401302337646484
    5. ' =)' → logprob: -16.151302337646484
    6. ')=' → logprob: -16.151302337646484
    7. ' =
' → logprob: -16.526302337646484
    8. ',' → logprob: -16.651302337646484
    9. '=get' → logprob: -17.401302337646484
    10. '=create' → logprob: -17.401302337646484

Token 110: ' read' (ID: 1729)
  Prédit: ' read'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.0024758970830589533
    2. 'read' → logprob: -6.002475738525391
    3. '	read' → logprob: -15.37747573852539
    4. '(read' → logprob: -18.00247573852539
    5. ' ' → logprob: -18.50247573852539
    6. ' get' → logprob: -18.50247573852539
    7. '_read' → logprob: -18.87747573852539
    8. ' input' → logprob: -19.12747573852539
    9. ' readline' → logprob: -20.25247573852539
    10. ' ' → logprob: -20.87747573852539

Token 111: '_edge' (ID: 43226)
  Prédit: '_edge'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_edge' → logprob: -0.10027438402175903
    2. '_' → logprob: -2.3502743244171143
    3. '_e' → logprob: -10.350274085998535
    4. '_ed' → logprob: -11.475274085998535
    5. '_edges' → logprob: -12.100274085998535
    6. '_line' → logprob: -12.725274085998535
    7. ' _' → logprob: -12.850274085998535
    8. ')' → logprob: -13.100274085998535
    9. ')_' → logprob: -13.225274085998535
    10. '_EDGE' → logprob: -13.225274085998535

Token 112: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00015121731848921627
    2. '()
' → logprob: -8.875151634216309
    3. ')' → logprob: -11.750151634216309
    4. '(' → logprob: -14.000151634216309
    5. '()
' → logprob: -14.000151634216309
    6. '()

' → logprob: -14.625151634216309
    7. '();' → logprob: -14.875151634216309
    8. '())' → logprob: -15.000151634216309
    9. ' ()' → logprob: -15.375151634216309
    10. '()`' → logprob: -16.625150680541992

Token 113: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.26790329813957214
    2. '   ' → logprob: -1.6429033279418945
    3. 'add' → logprob: -3.6429033279418945
    4. ' add' → logprob: -4.5179033279418945
    5. '
' → logprob: -6.5179033279418945
    6. '        
' → logprob: -7.0179033279418945
    7. '    
' → logprob: -7.5179033279418945
    8. '  
' → logprob: -7.8929033279418945
    9. '(add' → logprob: -8.392903327941895
    10. ')add' → logprob: -8.517903327941895

Token 114: ' add' (ID: 1147)
  Prédit: ' add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' add' → logprob: -0.004200917202979326
    2. 'add' (adapté à ' add') → logprob: -5.5042009353637695
    3. '   ' → logprob: -9.50420093536377
    4. '	add' → logprob: -11.00420093536377
    5. '       ' → logprob: -11.37920093536377
    6. '.add' → logprob: -12.00420093536377
    7. ')add' → logprob: -12.37920093536377
    8. ' ' → logprob: -12.62920093536377
    9. '_add' → logprob: -13.37920093536377
    10. '(add' → logprob: -13.62920093536377

Token 115: '_edge' (ID: 43226)
  Prédit: '_edge'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_edge' → logprob: -0.006261157803237438
    2. '_' → logprob: -5.131261348724365
    3. '_ed' → logprob: -8.506260871887207
    4. '_edges' → logprob: -9.381260871887207
    5. '_e' → logprob: -10.506260871887207
    6. ' _' → logprob: -12.006260871887207
    7. '```' → logprob: -13.006260871887207
    8. '_
' → logprob: -14.131260871887207
    9. '_line' → logprob: -14.131260871887207
    10. '(_' → logprob: -14.131260871887207

Token 116: '(tree' (ID: 44909)
  Prédit: '(tree'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(tree' → logprob: -0.014165983535349369
    2. '(' → logprob: -4.264165878295898
    3. '(
' → logprob: -14.264165878295898
    4. ' (' → logprob: -14.514165878295898
    5. '(t' → logprob: -15.639165878295898
    6. '(Tree' → logprob: -15.639165878295898
    7. '(tr' → logprob: -15.889165878295898
    8. '(train' → logprob: -16.0141658782959
    9. '(queue' → logprob: -16.2641658782959
    10. '(team' → logprob: -16.5141658782959

Token 117: ',' (ID: 11)
  Prédit: '(tree'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(tree' → logprob: -0.6438217163085938
    2. ',' → logprob: -0.7688217163085938
    3. '(' → logprob: -4.643821716308594
    4. ')' → logprob: -6.518821716308594
    5. ' ,' → logprob: -10.893821716308594
    6. '),' → logprob: -11.893821716308594
    7. ')(' → logprob: -12.393821716308594
    8. '(Tree' → logprob: -12.518821716308594
    9. '/tree' → logprob: -12.518821716308594
    10. '```' → logprob: -12.518821716308594

Token 118: ' u' (ID: 337)
  Prédit: 'tree'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tree' → logprob: -0.1269969791173935
    2. ' tree' → logprob: -2.1269969940185547
    3. '(tree' → logprob: -10.126996994018555
    4. '	tree' → logprob: -11.376996994018555
    5. 't' → logprob: -11.876996994018555
    6. ')' → logprob: -12.626996994018555
    7. 'tre' → logprob: -12.876996994018555
    8. ' ' → logprob: -13.001996994018555
    9. 'u' → logprob: -14.501996994018555
    10. ' t' → logprob: -14.751996994018555

Token 119: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.000354769523255527
    2. ',v' → logprob: -8.000354766845703
    3. ' ,' → logprob: -11.000354766845703
    4. ')' → logprob: -13.625354766845703
    5. 'v' → logprob: -14.375354766845703
    6. ',
' → logprob: -15.625354766845703
    7. ',u' → logprob: -15.750354766845703
    8. ',

' → logprob: -16.875354766845703
    9. '‌,' → logprob: -17.125354766845703
    10. ' ' → logprob: -17.250354766845703

Token 120: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.16022595763206482
    2. ' v' → logprob: -1.9102259874343872
    3. ' ' → logprob: -14.160225868225098
    4. ')v' → logprob: -14.910225868225098
    5. '	v' → logprob: -15.160225868225098
    6. '<|end|>' → logprob: -15.660225868225098
    7. 'u' → logprob: -16.910226821899414
    8. ')' → logprob: -16.910226821899414
    9. ' ' → logprob: -17.035226821899414
    10. ' 
' → logprob: -17.285226821899414

Token 121: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002485288307070732
    2. ')
' → logprob: -6.002485275268555
    3. '   ' → logprob: -12.377485275268555
    4. ')
' → logprob: -13.002485275268555
    5. ' )' → logprob: -13.377485275268555
    6. ')return' → logprob: -14.502485275268555
    7. ')

' → logprob: -14.752485275268555
    8. ')`' → logprob: -16.127485275268555
    9. '')' → logprob: -16.502485275268555
    10. '))' → logprob: -16.502485275268555

Token 122: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009948387742042542
    2. ' return' → logprob: -5.884948253631592
    3. '    
' → logprob: -6.009948253631592
    4. '
' → logprob: -6.134948253631592
    5. 'return' → logprob: -6.259948253631592
    6. '	return' → logprob: -8.50994873046875
    7. ' 
' → logprob: -8.75994873046875
    8. '  
' → logprob: -9.38494873046875
    9. ')' → logprob: -10.63494873046875
    10. '\n' → logprob: -10.88494873046875

Token 123: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.022758392617106438
    2. ' return' → logprob: -4.272758483886719
    3. '   ' → logprob: -4.772758483886719
    4. ' ' → logprob: -9.522758483886719
    5. 'r' → logprob: -11.022758483886719
    6. '	return' → logprob: -11.897758483886719
    7. '```' → logprob: -13.772758483886719
    8. 'ret' → logprob: -14.022758483886719
    9. ':return' → logprob: -14.147758483886719
    10. '  ' → logprob: -14.522758483886719

Token 124: ' tree' (ID: 8165)
  Prédit: ' tree'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tree' → logprob: -0.25209057331085205
    2. 'tree' → logprob: -1.502090573310852
    3. '(tree' → logprob: -8.752090454101562
    4. '	tree' → logprob: -12.877090454101562
    5. '_tree' → logprob: -14.877090454101562
    6. 'tre' → logprob: -15.627090454101562
    7. ' tre' → logprob: -16.127090454101562
    8. 't' → logprob: -16.877090454101562
    9. '.tree' → logprob: -17.377090454101562
    10. 'Tree' → logprob: -17.752090454101562

Token 125: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.05647290125489235
    2. '<|end|>' → logprob: -3.1814730167388916
    3. '
' → logprob: -4.8064727783203125
    4. '#' → logprob: -6.5564727783203125
    5. '<|end|>' → logprob: -7.1814727783203125
    6. '

' → logprob: -7.3064727783203125
    7. '(' → logprob: -7.6814727783203125
    8. '```' → logprob: -7.8064727783203125
    9. ')' → logprob: -7.9314727783203125
    10. '\' → logprob: -8.056472778320312

Token 126: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00012630375567823648
    2. 'from' → logprob: -9.375125885009766
    3. '```' → logprob: -11.250125885009766
    4. 'visited' → logprob: -11.625125885009766
    5. 'import' → logprob: -12.250125885009766
    6. '
' → logprob: -12.250125885009766
    7. 'deque' → logprob: -12.500125885009766
    8. '

' → logprob: -13.250125885009766
    9. '#' → logprob: -13.875125885009766
    10. 'queue' → logprob: -14.250125885009766

Token 127: ' initialize' (ID: 18400)
  Prédit: ' bfs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' bfs' → logprob: -0.07200547307729721
    2. 'b' → logprob: -2.6970055103302
    3. ' breadth' → logprob: -6.822005271911621
    4. ' level' → logprob: -7.822005271911621
    5. ' BFS' → logprob: -8.822005271911621
    6. ' main' → logprob: -9.197005271911621
    7. 'bread' → logprob: -9.447005271911621
    8. ' dfs' → logprob: -9.697005271911621
    9. ' find' → logprob: -9.947005271911621
    10. '_b' → logprob: -10.697005271911621

Token 128: '_' (ID: 62)
  Prédit: '_queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_queue' → logprob: -0.09521879255771637
    2. '_' → logprob: -2.5952188968658447
    3. '_distance' → logprob: -6.095218658447266
    4. '(queue' → logprob: -6.345218658447266
    5. '_depth' → logprob: -6.470218658447266
    6. '_dist' → logprob: -6.470218658447266
    7. '_parent' → logprob: -6.470218658447266
    8. '_q' → logprob: -6.720218658447266
    9. '_visit' → logprob: -6.720218658447266
    10. '_vis' → logprob: -7.095218658447266

Token 129: 'visited' (ID: 52453)
  Prédit: 'queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'queue' → logprob: -0.1667332500219345
    2. 'visited' → logprob: -2.2917332649230957
    3. 'b' → logprob: -3.5417332649230957
    4. 'dist' → logprob: -4.166733264923096
    5. 'distance' → logprob: -5.916733264923096
    6. 'depth' → logprob: -7.041733264923096
    7. 'q' → logprob: -7.291733264923096
    8. 'visit' → logprob: -7.666733264923096
    9. 'deque' → logprob: -7.916733264923096
    10. 'queues' → logprob: -8.291732788085938

Token 130: '(n' (ID: 2406)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0005413581384345889
    2. '()' → logprob: -8.500541687011719
    3. ' ():' → logprob: -8.500541687011719
    4. '(n' → logprob: -9.250541687011719
    5. '():
' → logprob: -10.500541687011719
    6. '(' → logprob: -12.000541687011719
    7. ' ()' → logprob: -13.250541687011719
    8. '(size' → logprob: -13.500541687011719
    9. '():
' → logprob: -14.250541687011719
    10. '():

' → logprob: -14.375541687011719

Token 131: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.022228622809052467
    2. '):
' → logprob: -3.897228717803955
    3. ')' → logprob: -6.522228717803955
    4. ' ):' → logprob: -8.772228240966797
    5. '):
' → logprob: -9.897228240966797
    6. '   ' → logprob: -12.772228240966797
    7. '():' → logprob: -13.147228240966797
    8. ' ):
' → logprob: -13.772228240966797
    9. '():
' → logprob: -14.147228240966797
    10. '）：' → logprob: -14.522228240966797

Token 132: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3569668233394623
    2. ' return' → logprob: -2.231966733932495
    3. '[' → logprob: -2.356966733932495
    4. ' [' → logprob: -2.481966733932495
    5. 'return' → logprob: -4.231966972351074
    6. ' ' → logprob: -10.106966972351074
    7. '[]' → logprob: -11.481966972351074
    8. '  ' → logprob: -12.106966972351074
    9. '    ' → logprob: -12.606966972351074
    10. '[n' → logprob: -12.731966972351074

Token 133: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.7206711173057556
    2. '[' → logprob: -1.3456711769104004
    3. ' [' → logprob: -2.0956711769104004
    4. ' return' → logprob: -2.0956711769104004
    5. '   ' → logprob: -4.9706711769104
    6. '{return' → logprob: -8.470670700073242
    7. '{' → logprob: -10.470670700073242
    8. ' ' → logprob: -11.095670700073242
    9. '[n' → logprob: -11.095670700073242
    10. '  ' → logprob: -12.095670700073242

Token 134: ' [' (ID: 723)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.12701085209846497
    2. ' [' → logprob: -2.1270108222961426
    3. '{' → logprob: -9.7520112991333
    4. '[n' → logprob: -11.2520112991333
    5. ' {' → logprob: -13.2520112991333
    6. 'set' → logprob: -13.2520112991333
    7. '   ' → logprob: -13.6270112991333
    8. '[node' → logprob: -13.6270112991333
    9. ' set' → logprob: -13.8770112991333
    10. '[int' → logprob: -14.1270112991333

Token 135: '0' (ID: 15)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.0005533903022296727
    2. ' False' → logprob: -7.500553607940674
    3. '0' → logprob: -14.875553131103516
    4. '(False' → logprob: -17.000553131103516
    5. 'True' → logprob: -18.250553131103516
    6. '   ' → logprob: -18.750553131103516
    7. 'F' → logprob: -18.875553131103516
    8. '.False' → logprob: -20.250553131103516
    9. '=False' → logprob: -20.750553131103516
    10. 'Fal' → logprob: -21.625553131103516

Token 136: ' for' (ID: 395)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.5113410949707031
    2. ' for' → logprob: -1.0113410949707031
    3. ']*' → logprob: -3.511341094970703
    4. 'for' → logprob: -5.261341094970703
    5. ' ]' → logprob: -6.511341094970703
    6. '   ' → logprob: -11.011341094970703
    7. ' ' → logprob: -11.636341094970703
    8. ')' → logprob: -11.761341094970703
    9. '}' → logprob: -12.511341094970703
    10. '	for' → logprob: -12.636341094970703

Token 137: ' _' (ID: 1175)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.04423247277736664
    2. ' _' → logprob: -3.1692323684692383
    3. ' range' → logprob: -7.044232368469238
    4. 'range' → logprob: -8.919232368469238
    5. ' ' → logprob: -9.294232368469238
    6. '_range' → logprob: -9.294232368469238
    7. ' i' → logprob: -10.669232368469238
    8. 'i' → logprob: -11.794232368469238
    9. ' in' → logprob: -12.294232368469238
    10. '(range' → logprob: -12.669232368469238

Token 138: ' in' (ID: 306)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.03981904312968254
    2. ' range' → logprob: -3.7898190021514893
    3. ' in' → logprob: -4.539819240570068
    4. 'in' → logprob: -5.164819240570068
    5. ' ' → logprob: -10.66481876373291
    6. 'n' → logprob: -11.78981876373291
    7. 'ange' → logprob: -12.16481876373291
    8. '(range' → logprob: -12.66481876373291
    9. '	range' → logprob: -13.16481876373291
    10. '  ' → logprob: -13.28981876373291

Token 139: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.632620632648468
    2. 'range' → logprob: -0.757620632648468
    3. '(range' → logprob: -12.257620811462402
    4. 'ange' → logprob: -12.257620811462402
    5. '	range' → logprob: -12.382620811462402
    6. ' ' → logprob: -12.632620811462402
    7. 'rang' → logprob: -14.257620811462402
    8. ' xrange' → logprob: -14.507620811462402
    9. '   ' → logprob: -14.632620811462402
    10. '  ' → logprob: -14.757620811462402

Token 140: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0005221736500971019
    2. '(' → logprob: -8.00052261352539
    3. 'n' → logprob: -8.75052261352539
    4. ' (' → logprob: -10.62552261352539
    5. ' n' → logprob: -12.62552261352539
    6. ')n' → logprob: -15.37552261352539
    7. ' ' → logprob: -15.87552261352539
    8. ')' → logprob: -15.87552261352539
    9. '	n' → logprob: -16.62552261352539
    10. '(
' → logprob: -16.87552261352539

Token 141: ')]

' (ID: 56882)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.0008130819769576192
    2. ']' → logprob: -7.125813007354736
    3. ')' → logprob: -12.375813484191895
    4. ')]
' → logprob: -13.500813484191895
    5. '])' → logprob: -13.625813484191895
    6. ']
' → logprob: -14.750813484191895
    7. '}]' → logprob: -15.250813484191895
    8. ' ]' → logprob: -15.375813484191895
    9. '])]' → logprob: -15.375813484191895
    10. '')]' → logprob: -16.250812530517578

Token 142: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.6781748533248901
    2. '
' → logprob: -1.0531748533248901
    3. '

' → logprob: -2.0531749725341797
    4. '<|end|>' → logprob: -4.67817497253418
    5. ' def' → logprob: -5.92817497253418
    6. '
' → logprob: -6.05317497253418
    7. '```' → logprob: -8.67817497253418
    8. '<|end|>' → logprob: -8.67817497253418
    9. '  
' → logprob: -8.80317497253418
    10. '(' → logprob: -9.05317497253418

Token 143: ' mark' (ID: 1983)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.24187634885311127
    2. ' bfs' → logprob: -1.6168763637542725
    3. 'def' → logprob: -4.491876125335693
    4. 'dfs' → logprob: -6.491876125335693
    5. 'bread' → logprob: -6.491876125335693
    6. 'initialize' → logprob: -8.366876602172852
    7. ' def' → logprob: -8.491876602172852
    8. 'is' → logprob: -8.491876602172852
    9. ' breadth' → logprob: -8.616876602172852
    10. 'find' → logprob: -8.741876602172852

Token 144: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.00022237090161070228
    2. ' _' → logprob: -9.125222206115723
    3. '_as' → logprob: -9.250222206115723
    4. 'ed' → logprob: -12.000222206115723
    5. '(' → logprob: -13.250222206115723
    6. '[' → logprob: -13.875222206115723
    7. '_all' → logprob: -14.125222206115723
    8. '_seen' → logprob: -14.125222206115723
    9. '_vis' → logprob: -14.375222206115723
    10. ' ' → logprob: -14.500222206115723

Token 145: 'visited' (ID: 52453)
  Prédit: 'visited'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.00011021859245374799
    2. 'all' → logprob: -10.125110626220703
    3. 'node' → logprob: -10.125110626220703
    4. ' visited' → logprob: -10.750110626220703
    5. 'vis' → logprob: -13.250110626220703
    6. 'as' → logprob: -14.000110626220703
    7. 'start' → logprob: -14.000110626220703
    8. 'connected' → logprob: -14.250110626220703
    9. 'queue' → logprob: -14.500110626220703
    10. 'Visited' → logprob: -14.500110626220703

Token 146: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.005243833642452955
    2. ' (' → logprob: -6.00524377822876
    3. '(node' → logprob: -6.00524377822876
    4. '(v' → logprob: -9.130244255065918
    5. '(n' → logprob: -9.630244255065918
    6. '(index' → logprob: -10.880244255065918
    7. '(space' → logprob: -10.880244255065918
    8. '(i' → logprob: -11.255244255065918
    9. '(vis' → logprob: -11.380244255065918
    10. '(user' → logprob: -12.005244255065918

Token 147: 'visited' (ID: 52453)
  Prédit: 'visited'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.056594349443912506
    2. ')' → logprob: -3.3065943717956543
    3. ' visited' → logprob: -4.431594371795654
    4. 'node' → logprob: -5.931594371795654
    5. ' node' → logprob: -7.306594371795654
    6. '(' → logprob: -7.431594371795654
    7. ' )' → logprob: -7.431594371795654
    8. ',' → logprob: -7.681594371795654
    9. 'index' → logprob: -7.806594371795654
    10. 'v' → logprob: -8.181593894958496

Token 148: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.008319173008203506
    2. ')' → logprob: -5.50831937789917
    3. '[' → logprob: -5.75831937789917
    4. ' ,' → logprob: -7.75831937789917
    5. '[node' → logprob: -8.633318901062012
    6. '[u' → logprob: -9.133318901062012
    7. ']' → logprob: -9.508318901062012
    8. ')]' → logprob: -9.758318901062012
    9. ',node' → logprob: -9.758318901062012
    10. '(' → logprob: -10.758318901062012

Token 149: ' node' (ID: 4596)
  Prédit: ' node'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' node' → logprob: -0.1770472526550293
    2. 'node' → logprob: -1.9270472526550293
    3. 'index' → logprob: -5.052047252655029
    4. ' index' → logprob: -5.052047252655029
    5. ' idx' → logprob: -6.552047252655029
    6. 'u' → logprob: -7.302047252655029
    7. ' u' → logprob: -7.302047252655029
    8. ' v' → logprob: -7.927047252655029
    9. 'idx' → logprob: -8.177047729492188
    10. 'v' → logprob: -8.677047729492188

Token 150: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0650886669754982
    2. ',' → logprob: -2.8150887489318848
    3. ')' → logprob: -6.065088748931885
    4. '):
' → logprob: -7.565088748931885
    5. ']:' → logprob: -9.190088272094727
    6. ' ):' → logprob: -9.565088272094727
    7. '[node' → logprob: -10.190088272094727
    8. ',node' → logprob: -10.565088272094727
    9. ' ,' → logprob: -11.565088272094727
    10. '[' → logprob: -12.065088272094727

Token 151: '   ' (ID: 271)
  Prédit: ' visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' visited' → logprob: -0.3257119655609131
    2. 'visited' → logprob: -1.325711965560913
    3. '   ' → logprob: -4.575712203979492
    4. ' =' → logprob: -6.825712203979492
    5. ' 
' → logprob: -7.950712203979492
    6. '=' → logprob: -7.950712203979492
    7. ' ' → logprob: -9.075712203979492
    8. 'Visited' → logprob: -9.825712203979492
    9. '    
' → logprob: -10.325712203979492
    10. '    ' → logprob: -10.450712203979492

Token 152: ' visited' (ID: 18416)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'visited' (adapté à ' visited') → logprob: -0.25452375411987305
    2. ' visited' → logprob: -1.504523754119873
    3. '1' → logprob: -6.004523754119873
    4. ' ' → logprob: -10.004524230957031
    5. '   ' → logprob: -10.129524230957031
    6. 'Visited' → logprob: -11.129524230957031
    7. ' =' → logprob: -11.379524230957031
    8. ' 
' → logprob: -12.254524230957031
    9. '=' → logprob: -13.004524230957031
    10. '0' → logprob: -13.629524230957031

Token 153: '[node' (ID: 67268)
  Prédit: '[node'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[node' → logprob: -2.4391956685576588e-05
    2. '[' → logprob: -10.625024795532227
    3. ' [' → logprob: -17.875024795532227
    4. '[token' → logprob: -19.125024795532227
    5. '=node' → logprob: -19.375024795532227
    6. '[n' → logprob: -19.750024795532227
    7. '(node' → logprob: -20.125024795532227
    8. ' node' → logprob: -20.125024795532227
    9. '[module' → logprob: -20.250024795532227
    10. '```' → logprob: -20.500024795532227

Token 154: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0030461661517620087
    2. ']=' → logprob: -6.128046035766602
    3. ' ]' → logprob: -7.128046035766602
    4. '=' → logprob: -10.253046035766602
    5. ')' → logprob: -10.878046035766602
    6. ']+=' → logprob: -13.378046035766602
    7. ' =' → logprob: -13.503046035766602
    8. ')]' → logprob: -14.628046035766602
    9. '])' → logprob: -16.1280460357666
    10. ']
' → logprob: -16.1280460357666

Token 155: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.02324792370200157
    2. ' =' → logprob: -3.7732479572296143
    3. '=True' → logprob: -13.523247718811035
    4. '=
' → logprob: -15.273247718811035
    5. ' ' → logprob: -15.398247718811035
    6. '=int' → logprob: -15.648247718811035
    7. '+=' → logprob: -16.39824867248535
    8. ' =
' → logprob: -16.77324867248535
    9. 's' → logprob: -16.89824867248535
    10. '＝' → logprob: -17.02324867248535

Token 156: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.9795445849886164e-05
    2. ' ' → logprob: -9.875060081481934
    3. 'True' → logprob: -11.875060081481934
    4. ' True' → logprob: -13.625060081481934
    5. '   ' → logprob: -15.875060081481934
    6. '  ' → logprob: -18.625059127807617
    7. '=True' → logprob: -19.812559127807617
    8. '+' → logprob: -20.187559127807617
    9. '(True' → logprob: -20.500059127807617
    10. '=' → logprob: -20.625059127807617

Token 157: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.2233183042553719e-05
    2. 'True' → logprob: -11.375012397766113
    3. ' ' → logprob: -14.375012397766113
    4. ' True' → logprob: -16.625011444091797
    5. '   ' → logprob: -20.125011444091797
    6. '  ' → logprob: -21.625011444091797
    7. 'true' → logprob: -21.875011444091797
    8. '`' → logprob: -22.375011444091797
    9. '7' → logprob: -23.000011444091797
    10. '(True' → logprob: -23.250011444091797

Token 158: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.029247820377349854
    2. 'def' → logprob: -3.779247760772705
    3. '

' → logprob: -5.529247760772705
    4. '\n' → logprob: -7.404247760772705
    5. '
' → logprob: -7.904247760772705
    6. '<|end|>' → logprob: -8.279248237609863
    7. '  
' → logprob: -8.529248237609863
    8. ' 
' → logprob: -8.654248237609863
    9. 'newline' → logprob: -9.154248237609863
    10. '\' → logprob: -9.154248237609863

Token 159: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0004791704413946718
    2. '
' → logprob: -8.000478744506836
    3. ' def' → logprob: -9.375478744506836
    4. '

' → logprob: -10.500478744506836
    5. '<|end|>' → logprob: -12.000478744506836
    6. '\' → logprob: -12.375478744506836
    7. ' 
' → logprob: -12.625478744506836
    8. ' 

' → logprob: -13.000478744506836
    9. '  
' → logprob: -13.125478744506836
    10. '#' → logprob: -13.125478744506836

Token 160: ' create' (ID: 2501)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.073007732629776
    2. ' bfs' → logprob: -2.948007822036743
    3. 'is' → logprob: -4.698007583618164
    4. 'bread' → logprob: -6.073007583618164
    5. 'def' → logprob: -6.323007583618164
    6. 'get' → logprob: -6.573007583618164
    7. 'dfs' → logprob: -6.823007583618164
    8. 'enqueue' → logprob: -7.448007583618164
    9. 'initialize' → logprob: -8.073007583618164
    10. 'queue' → logprob: -8.323007583618164

Token 161: '_queue' (ID: 25622)
  Prédit: '_queue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_queue' → logprob: -0.01896543614566326
    2. '_' → logprob: -4.018965244293213
    3. '_node' → logprob: -8.393965721130371
    4. '(queue' → logprob: -9.018965721130371
    5. '_q' → logprob: -9.143965721130371
    6. 'queue' → logprob: -9.643965721130371
    7. ' queue' → logprob: -9.643965721130371
    8. '_b' → logprob: -9.893965721130371
    9. ' _' → logprob: -10.893965721130371
    10. '_space' → logprob: -11.518965721130371

Token 162: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0044263205491006374
    2. '()' → logprob: -6.2544264793396
    3. ' ():' → logprob: -6.2544264793396
    4. '():
' → logprob: -7.8794264793396
    5. ' ()' → logprob: -8.629426002502441
    6. '(' → logprob: -11.379426002502441
    7. '(queue' → logprob: -13.254426002502441
    8. '():

' → logprob: -14.004426002502441
    9. '():
' → logprob: -14.004426002502441
    10. '().' → logprob: -16.379426956176758

Token 163: '   ' (ID: 271)
  Prédit: ' queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' queue' → logprob: -0.04358767345547676
    2. ' return' → logprob: -3.5435876846313477
    3. 'queue' → logprob: -4.418587684631348
    4. '	queue' → logprob: -7.043587684631348
    5. 'return' → logprob: -8.168587684631348
    6. '   ' → logprob: -8.543587684631348
    7. '(queue' → logprob: -8.543587684631348
    8. 'Queue' → logprob: -10.293587684631348
    9. '.queue' → logprob: -11.043587684631348
    10. '_queue' → logprob: -11.168587684631348

Token 164: ' return' (ID: 622)
  Prédit: 'queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'queue' → logprob: -0.048593729734420776
    2. ' queue' → logprob: -3.048593759536743
    3. '	queue' → logprob: -12.173593521118164
    4. '(queue' → logprob: -14.798593521118164
    5. '.queue' → logprob: -15.298593521118164
    6. 'que' → logprob: -15.298593521118164
    7. 'q' → logprob: -15.798593521118164
    8. 'Queue' → logprob: -15.923593521118164
    9. ' ' → logprob: -16.798593521118164
    10. 'deque' → logprob: -17.048593521118164

Token 165: ' queue' (ID: 13661)
  Prédit: 'queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'queue' → logprob: -0.004080897197127342
    2. ' queue' → logprob: -5.504080772399902
    3. '	queue' → logprob: -13.504080772399902
    4. 'que' → logprob: -14.879080772399902
    5. '(queue' → logprob: -14.879080772399902
    6. 'deque' → logprob: -15.504080772399902
    7. '.queue' → logprob: -16.62908172607422
    8. 'Queue' → logprob: -16.75408172607422
    9. 'q' → logprob: -17.37908172607422
    10. '_queue' → logprob: -17.75408172607422

Token 166: '.Queue' (ID: 97551)
  Prédit: '.Queue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.Queue' → logprob: -0.2031031847000122
    2. '.' → logprob: -1.7031031847000122
    3. ' .' → logprob: -6.953103065490723
    4. '.Priority' → logprob: -7.703103065490723
    5. '.Q' → logprob: -9.078103065490723
    6. '.Qt' → logprob: -9.703103065490723
    7. '.q' → logprob: -11.078103065490723
    8. '.Simple' → logprob: -11.328103065490723
    9. '.Enqueue' → logprob: -11.578103065490723
    10. '.queue' → logprob: -11.953103065490723

Token 167: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -9.460291767027229e-05
    2. '().' → logprob: -9.875094413757324
    3. '(' → logprob: -10.375094413757324
    4. ' ()' → logprob: -12.125094413757324
    5. '()
' → logprob: -13.000094413757324
    6. '()

' → logprob: -14.000094413757324
    7. '.' → logprob: -14.250094413757324
    8. '()`' → logprob: -14.375094413757324
    9. '()(' → logprob: -15.125094413757324
    10. '()]' → logprob: -15.125094413757324

Token 168: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0012061846209689975
    2. '<|end|>' → logprob: -6.876206398010254
    3. '
' → logprob: -9.751206398010254
    4. ' def' → logprob: -9.876206398010254
    5. '<|end|>' → logprob: -11.001206398010254
    6. '```' → logprob: -11.501206398010254
    7. '(' → logprob: -11.751206398010254
    8. '

' → logprob: -11.876206398010254
    9. '#' → logprob: -11.876206398010254
    10. '(def' → logprob: -12.501206398010254

Token 169: ' enqueue' (ID: 117229)
  Prédit: 'enqueue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'enqueue' → logprob: -0.6902426481246948
    2. ' bfs' → logprob: -1.1902426481246948
    3. ' enqueue' → logprob: -2.0652427673339844
    4. 'b' → logprob: -2.9402427673339844
    5. 'def' → logprob: -5.690242767333984
    6. 'de' → logprob: -5.690242767333984
    7. 'initialize' → logprob: -6.815242767333984
    8. ' initialize' → logprob: -7.315242767333984
    9. 'bread' → logprob: -7.440242767333984
    10. ' dequeue' → logprob: -7.440242767333984

Token 170: '(q' (ID: 21479)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.008539159782230854
    2. ' (' → logprob: -5.258539199829102
    3. '()' → logprob: -6.008539199829102
    4. '(queue' → logprob: -7.758539199829102
    5. '(q' → logprob: -9.758539199829102
    6. ' ()' → logprob: -9.758539199829102
    7. '(create' → logprob: -10.008539199829102
    8. '(value' → logprob: -10.008539199829102
    9. '(user' → logprob: -10.508539199829102
    10. '(node' → logprob: -10.758539199829102

Token 171: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.2826204299926758
    2. ')' → logprob: -1.4076204299926758
    3. ',q' → logprob: -7.532620429992676
    4. '(' → logprob: -8.532620429992676
    5. ' ,' → logprob: -8.532620429992676
    6. ' )' → logprob: -8.532620429992676
    7. ',)' → logprob: -8.782620429992676
    8. '(q' → logprob: -9.907620429992676
    9. ')(' → logprob: -9.907620429992676
    10. '(queue' → logprob: -11.157620429992676

Token 172: ' item' (ID: 2169)
  Prédit: ' node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' node' → logprob: -0.18636007606983185
    2. 'node' → logprob: -2.1863601207733154
    3. ')' → logprob: -3.4363601207733154
    4. ' ' → logprob: -5.186359882354736
    5. ' None' → logprob: -5.186359882354736
    6. '0' → logprob: -5.436359882354736
    7. ' )' → logprob: -5.561359882354736
    8. '1' → logprob: -5.686359882354736
    9. ' q' → logprob: -6.936359882354736
    10. ' item' → logprob: -7.811359882354736

Token 173: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.009918168187141418
    2. ')' → logprob: -4.634918212890625
    3. '):
' → logprob: -8.884918212890625
    4. ' ):' → logprob: -10.759918212890625
    5. '):

' → logprob: -13.884918212890625
    6. '):
' → logprob: -14.259918212890625
    7. ' )' → logprob: -14.759918212890625
    8. ')：' → logprob: -15.759918212890625
    9. ',' → logprob: -16.259918212890625
    10. ').' → logprob: -16.509918212890625

Token 174: '   ' (ID: 271)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.03819641098380089
    2. ' q' → logprob: -3.288196325302124
    3. '(q' → logprob: -8.788196563720703
    4. '	q' → logprob: -14.038196563720703
    5. '.q' → logprob: -14.288196563720703
    6. '_q' → logprob: -14.538196563720703
    7. '   ' → logprob: -15.913196563720703
    8. 'item' → logprob: -16.163196563720703
    9. ',q' → logprob: -16.538196563720703
    10. '?q' → logprob: -16.788196563720703

Token 175: ' q' (ID: 2335)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' (adapté à ' q') → logprob: -0.31326597929000854
    2. ' q' → logprob: -1.3132660388946533
    3. 'enqueue' → logprob: -13.688265800476074
    4. '	q' → logprob: -13.813265800476074
    5. 'put' → logprob: -13.938265800476074
    6. '.q' → logprob: -14.813265800476074
    7. '_q' → logprob: -14.938265800476074
    8. '(q' → logprob: -15.938265800476074
    9. ' ' → logprob: -16.18826675415039
    10. ' enqueue' → logprob: -16.81326675415039

Token 176: '.put' (ID: 5133)
  Prédit: '.put'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.put' → logprob: -0.00022010602697264403
    2. '.' → logprob: -9.00022029876709
    3. '.enqueue' → logprob: -9.25022029876709
    4. '.q' → logprob: -15.00022029876709
    5. '.queue' → logprob: -15.37522029876709
    6. '.append' → logprob: -17.250219345092773
    7. '.Put' → logprob: -17.625219345092773
    8. ' .' → logprob: -17.625219345092773
    9. '.push' → logprob: -17.750219345092773
    10. ').' → logprob: -18.375219345092773

Token 177: '(item' (ID: 10016)
  Prédit: '(item'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(item' → logprob: -0.2014540582895279
    2. '(' → logprob: -1.7014540433883667
    3. '(Item' → logprob: -11.826454162597656
    4. '(items' → logprob: -11.951454162597656
    5. '<|end|>' → logprob: -12.076454162597656
    6. ' (' → logprob: -12.326454162597656
    7. ')item' → logprob: -12.701454162597656
    8. '(object' → logprob: -12.701454162597656
    9. '=item' → logprob: -13.576454162597656
    10. 'item' → logprob: -13.826454162597656

Token 178: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.339278580620885e-06
    2. ')
' → logprob: -13.250001907348633
    3. ' )' → logprob: -14.875001907348633
    4. ')

' → logprob: -16.375001907348633
    5. '),' → logprob: -19.000001907348633
    6. ')return' → logprob: -19.000001907348633
    7. '<|end|>' → logprob: -19.125001907348633
    8. ')}' → logprob: -20.125001907348633
    9. ')#' → logprob: -20.125001907348633
    10. '))' → logprob: -20.375001907348633

Token 179: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -6.968934758333489e-05
    2. '
' → logprob: -10.625069618225098
    3. '```' → logprob: -10.750069618225098
    4. '<|end|>' → logprob: -10.875069618225098
    5. ' def' → logprob: -13.750069618225098
    6. '

' → logprob: -14.375069618225098
    7. '<|end|>' → logprob: -14.375069618225098
    8. ')' → logprob: -14.500069618225098
    9. '    
' → logprob: -14.875069618225098
    10. '  
' → logprob: -15.000069618225098

Token 180: ' dequeue' (ID: 118122)
  Prédit: 'de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'de' → logprob: -0.0020810244604945183
    2. 'def' → logprob: -6.877080917358398
    3. ' dequeue' → logprob: -7.127080917358398
    4. 'deque' → logprob: -8.877080917358398
    5. 'create' → logprob: -10.377080917358398
    6. 'enqueue' → logprob: -10.627080917358398
    7. '```' → logprob: -10.752080917358398
    8. 'initialize' → logprob: -12.252080917358398
    9. '
' → logprob: -12.377080917358398
    10. '.dequeue' → logprob: -12.752080917358398

Token 181: '(q' (ID: 21479)
  Prédit: '(q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(q' → logprob: -0.1003810316324234
    2. '(' → logprob: -2.3503811359405518
    3. '()' → logprob: -8.725380897521973
    4. '(queue' → logprob: -11.850380897521973
    5. ' (' → logprob: -12.850380897521973
    6. '(
' → logprob: -14.100380897521973
    7. '(Q' → logprob: -14.975380897521973
    8. '<|end|>' → logprob: -15.600380897521973
    9. ')' → logprob: -15.725380897521973
    10. '(

' → logprob: -15.975380897521973

Token 182: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00010020548506872728
    2. '):' → logprob: -10.000100135803223
    3. '()' → logprob: -10.500100135803223
    4. '())' → logprob: -10.750100135803223
    5. ' )' → logprob: -12.375100135803223
    6. ')
' → logprob: -13.750100135803223
    7. '):
' → logprob: -16.00010108947754
    8. '),' → logprob: -16.25010108947754
    9. '))' → logprob: -16.87510108947754
    10. ').' → logprob: -17.37510108947754

Token 183: '   ' (ID: 271)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.22474510967731476
    2. 'return' → logprob: -1.9747451543807983
    3. ' q' → logprob: -2.974745035171509
    4. 'q' → logprob: -4.474745273590088
    5. '   ' → logprob: -10.84974479675293
    6. '(q' → logprob: -12.09974479675293
    7. '	return' → logprob: -13.59974479675293
    8. '()' → logprob: -13.59974479675293
    9. '	q' → logprob: -14.59974479675293
    10. ' ' → logprob: -14.84974479675293

Token 184: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.6509214639663696
    2. ' return' → logprob: -0.9009214639663696
    3. 'q' → logprob: -3.15092134475708
    4. ' q' → logprob: -3.52592134475708
    5. '   ' → logprob: -13.650921821594238
    6. 'ret' → logprob: -14.650921821594238
    7. '	return' → logprob: -15.400921821594238
    8. ' ' → logprob: -16.025920867919922
    9. 'Return' → logprob: -16.275920867919922
    10. 'r' → logprob: -16.400920867919922

Token 185: ' q' (ID: 2335)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.693149745464325
    2. ' q' → logprob: -0.693149745464325
    3. '	q' → logprob: -13.81814956665039
    4. 'None' → logprob: -14.19314956665039
    5. '(q' → logprob: -14.69314956665039
    6. '_q' → logprob: -16.31814956665039
    7. ' None' → logprob: -16.94314956665039
    8. '.q' → logprob: -16.94314956665039
    9. 'queue' → logprob: -17.06814956665039
    10. ' ' → logprob: -17.31814956665039

Token 186: '.get' (ID: 775)
  Prédit: '.get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.get' → logprob: -3.054500666621607e-06
    2. '.' → logprob: -13.37500286102295
    3. 'get' → logprob: -13.50000286102295
    4. ' .' → logprob: -16.875003814697266
    5. '.q' → logprob: -17.875003814697266
    6. '.dequeue' → logprob: -19.375003814697266
    7. '.Get' → logprob: -19.750003814697266
    8. '#get' → logprob: -20.125003814697266
    9. '.ge' → logprob: -20.250003814697266
    10. '```' → logprob: -20.375003814697266

Token 187: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.012515892274677753
    2. '(' → logprob: -4.387516021728516
    3. '()
' → logprob: -13.262516021728516
    4. '()

' → logprob: -13.887516021728516
    5. '(
' → logprob: -14.387516021728516
    6. ' ()' → logprob: -14.387516021728516
    7. '();' → logprob: -14.512516021728516
    8. '()`' → logprob: -14.887516021728516
    9. '(),' → logprob: -15.137516021728516
    10. '(

' → logprob: -15.262516021728516

Token 188: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -4.4656579120783135e-05
    2. '
' → logprob: -10.875044822692871
    3. '<|end|>' → logprob: -11.125044822692871
    4. '

' → logprob: -12.125044822692871
    5. ' def' → logprob: -13.500044822692871
    6. '  
' → logprob: -13.875044822692871
    7. '<|end|>' → logprob: -14.000044822692871
    8. '```' → logprob: -14.125044822692871
    9. '#' → logprob: -14.625044822692871
    10. '    
' → logprob: -15.000044822692871

Token 189: ' has' (ID: 853)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.054291028529405594
    2. ' bfs' → logprob: -3.054291009902954
    3. 'bread' → logprob: -5.304291248321533
    4. 'def' → logprob: -8.429290771484375
    5. 'find' → logprob: -8.804290771484375
    6. ' breadth' → logprob: -8.804290771484375
    7. 'is' → logprob: -10.054290771484375
    8. 'get' → logprob: -10.054290771484375
    9. 'level' → logprob: -10.304290771484375
    10. ' find' → logprob: -11.179290771484375

Token 190: '_children' (ID: 78282)
  Prédit: '_queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_queue' → logprob: -0.567091166973114
    2. '_items' → logprob: -1.1920912265777588
    3. '_more' → logprob: -2.442091226577759
    4. '_next' → logprob: -3.692091226577759
    5. '_' → logprob: -4.81709098815918
    6. '_elements' → logprob: -5.81709098815918
    7. '_q' → logprob: -6.06709098815918
    8. '_item' → logprob: -6.94209098815918
    9. '_key' → logprob: -7.56709098815918
    10. '_nodes' → logprob: -8.06709098815918

Token 191: '(tree' (ID: 44909)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.48049041628837585
    2. '(q' → logprob: -0.9804904460906982
    3. '(queue' → logprob: -5.855490207672119
    4. '(tree' → logprob: -6.105490207672119
    5. '(node' → logprob: -7.105490207672119
    6. ' (' → logprob: -8.230490684509277
    7. '(parent' → logprob: -9.730490684509277
    8. '(s' → logprob: -10.480490684509277
    9. '(query' → logprob: -10.730490684509277
    10. '(n' → logprob: -11.105490684509277

Token 192: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0001601539261173457
    2. ',node' → logprob: -8.875160217285156
    3. '[node' → logprob: -11.375160217285156
    4. ' ,' → logprob: -11.750160217285156
    5. '(node' → logprob: -14.750160217285156
    6. ',
' → logprob: -16.125160217285156
    7. ',n' → logprob: -16.250160217285156
    8. ',parent' → logprob: -16.375160217285156
    9. '[' → logprob: -16.500160217285156
    10. '):' → logprob: -17.750160217285156

Token 193: ' node' (ID: 4596)
  Prédit: 'node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'node' → logprob: -0.633179783821106
    2. ' node' → logprob: -0.758179783821106
    3. ')' → logprob: -8.133179664611816
    4. '<|end|>' → logprob: -9.258179664611816
    5. 'parent' → logprob: -10.758179664611816
    6. 'current' → logprob: -10.758179664611816
    7. 'queue' → logprob: -10.883179664611816
    8. '   ' → logprob: -11.258179664611816
    9. '[node' → logprob: -11.258179664611816
    10. ' current' → logprob: -11.383179664611816

Token 194: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.06614644080400467
    2. ',' → logprob: -2.8161463737487793
    3. ')' → logprob: -5.566146373748779
    4. '):
' → logprob: -8.941146850585938
    5. '[node' → logprob: -9.066146850585938
    6. ',node' → logprob: -9.691146850585938
    7. ' ):' → logprob: -11.566146850585938
    8. '[' → logprob: -11.691146850585938
    9. '(node' → logprob: -12.816146850585938
    10. '[]):' → logprob: -12.941146850585938

Token 195: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4777025282382965
    2. ' return' → logprob: -0.9777024984359741
    3. 'return' → logprob: -5.852702617645264
    4. ' len' → logprob: -7.477702617645264
    5. 'len' → logprob: -10.227702140808105
    6. ' ' → logprob: -10.227702140808105
    7. '    ' → logprob: -10.727702140808105
    8. '	return' → logprob: -10.727702140808105
    9. ')' → logprob: -10.852702140808105
    10. '  ' → logprob: -11.602702140808105

Token 196: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.49563008546829224
    2. ' return' → logprob: -0.9956300854682922
    3. '   ' → logprob: -4.245630264282227
    4. 'len' → logprob: -5.245630264282227
    5. ' len' → logprob: -6.370630264282227
    6. '	return' → logprob: -12.495630264282227
    7. 'if' → logprob: -12.495630264282227
    8. ' ' → logprob: -13.495630264282227
    9. 'bool' → logprob: -13.870630264282227
    10. '(len' → logprob: -14.120630264282227

Token 197: ' len' (ID: 4631)
  Prédit: ' len'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' len' → logprob: -0.01981288194656372
    2. 'len' → logprob: -4.019813060760498
    3. ' bool' → logprob: -6.519813060760498
    4. ' tree' → logprob: -9.14481258392334
    5. ' ' → logprob: -10.14481258392334
    6. 'bool' → logprob: -10.39481258392334
    7. 'tree' → logprob: -12.89481258392334
    8. '	len' → logprob: -13.01981258392334
    9. '(len' → logprob: -13.26981258392334
    10. ' True' → logprob: -13.26981258392334

Token 198: '(tree' (ID: 44909)
  Prédit: '(tree'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(tree' → logprob: -0.014165272004902363
    2. '(' → logprob: -4.26416540145874
    3. '(
' → logprob: -14.389164924621582
    4. '(queue' → logprob: -14.639164924621582
    5. '(Tree' → logprob: -15.514164924621582
    6. ' (' → logprob: -15.889164924621582
    7. 'tree' → logprob: -16.5141658782959
    8. '(tr' → logprob: -16.7641658782959
    9. '	tree' → logprob: -16.8891658782959
    10. '(t' → logprob: -17.0141658782959

Token 199: '[node' (ID: 67268)
  Prédit: '[node'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[node' → logprob: -0.00026419671485200524
    2. '[' → logprob: -8.250264167785645
    3. ' [' → logprob: -13.250264167785645
    4. ')' → logprob: -15.375264167785645
    5. '[user' → logprob: -15.375264167785645
    6. '[n' → logprob: -15.625264167785645
    7. ')[' → logprob: -15.750264167785645
    8. '(node' → logprob: -16.62526512145996
    9. '[token' → logprob: -17.00026512145996
    10. '[module' → logprob: -17.37526512145996

Token 200: '])' (ID: 4636)
  Prédit: '])'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.00045962471631355584
    2. ')' → logprob: -7.875459671020508
    3. ' ])' → logprob: -10.125459671020508
    4. ''])' → logprob: -10.625459671020508
    5. ']' → logprob: -12.375459671020508
    6. '"])' → logprob: -12.750459671020508
    7. '))' → logprob: -13.375459671020508
    8. '[' → logprob: -13.375459671020508
    9. '})' → logprob: -13.875459671020508
    10. ' )' → logprob: -14.125459671020508

Token 201: ' >' (ID: 1424)
  Prédit: ' >'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.2542763948440552
    2. '>' → logprob: -1.5042763948440552
    3. '()>' → logprob: -6.629276275634766
    4. '<|end|>' → logprob: -7.754276275634766
    5. ' ' → logprob: -8.879276275634766
    6. ')' → logprob: -9.129276275634766
    7. ')>' → logprob: -9.379276275634766
    8. '()' → logprob: -9.379276275634766
    9. ' !=' → logprob: -9.504276275634766
    10. '   ' → logprob: -10.379276275634766

Token 202: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00029637437546625733
    2. ' ' → logprob: -8.125296592712402
    3. '۰' → logprob: -16.250295639038086
    4. '<|end|>' → logprob: -16.250295639038086
    5. '1' → logprob: -17.437795639038086
    6. '=' → logprob: -17.750295639038086
    7. '```' → logprob: -18.000295639038086
    8. '>' → logprob: -18.000295639038086
    9. '  ' → logprob: -18.750295639038086
    10. ' ' → logprob: -18.812795639038086

Token 203: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.5048530030981055e-06
    2. ' ' → logprob: -13.500001907348633
    3. '۰' → logprob: -17.250001907348633
    4. '０' → logprob: -19.000001907348633
    5. '```' → logprob: -19.187501907348633
    6. '00' → logprob: -19.750001907348633
    7. '٠' → logprob: -19.750001907348633
    8. 'zero' → logprob: -19.812501907348633
    9. '>' → logprob: -20.062501907348633
    10. '1' → logprob: -20.187501907348633

Token 204: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6721285581588745
    2. '<|end|>' → logprob: -0.7971285581588745
    3. 'def' → logprob: -3.672128677368164
    4. '

' → logprob: -4.547128677368164
    5. '<|end|>' → logprob: -7.047128677368164
    6. '  
' → logprob: -8.047128677368164
    7. ' def' → logprob: -8.297128677368164
    8. '\n' → logprob: -8.547128677368164
    9. ':' → logprob: -8.547128677368164
    10. '```' → logprob: -8.672128677368164

Token 205: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0005196703714318573
    2. '<|end|>' → logprob: -7.625519752502441
    3. '<|end|>' → logprob: -11.250519752502441
    4. '```' → logprob: -11.500519752502441
    5. ' def' → logprob: -12.875519752502441
    6. '#' → logprob: -12.875519752502441
    7. ')' → logprob: -14.375519752502441
    8. '.' → logprob: -14.625519752502441
    9. ':' → logprob: -15.375519752502441
    10. '[' → logprob: -15.500519752502441

Token 206: ' bfs' (ID: 147571)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.42343056201934814
    2. ' bfs' → logprob: -1.7984305620193481
    3. 'b' → logprob: -2.7984304428100586
    4. ' is' → logprob: -3.0484304428100586
    5. 'is' → logprob: -3.2984304428100586
    6. ' def' → logprob: -4.298430442810059
    7. 'has' → logprob: -5.298430442810059
    8. ' has' → logprob: -5.548430442810059
    9. 'get' → logprob: -5.923430442810059
    10. ' get' → logprob: -6.173430442810059

Token 207: '_first' (ID: 29347)
  Prédit: '(tree'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(tree' → logprob: -0.024112366139888763
    2. '(' → logprob: -3.7741124629974365
    3. '(node' → logprob: -7.399112224578857
    4. '(root' → logprob: -8.899112701416016
    5. '(queue' → logprob: -9.774112701416016
    6. '(graph' → logprob: -10.899112701416016
    7. '(Tree' → logprob: -11.399112701416016
    8. '(q' → logprob: -12.024112701416016
    9. ' (' → logprob: -12.024112701416016
    10. '_tree' → logprob: -12.649112701416016

Token 208: '(tree' (ID: 44909)
  Prédit: '_child'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_child' → logprob: -1.3490461111068726
    2. '_node' → logprob: -1.8490461111068726
    3. '(tree' → logprob: -1.9740461111068726
    4. '_parent' → logprob: -2.349046230316162
    5. '(' → logprob: -2.474046230316162
    6. '_level' → logprob: -2.599046230316162
    7. '(node' → logprob: -3.224046230316162
    8. '(_' → logprob: -3.474046230316162
    9. '_step' → logprob: -3.849046230316162
    10. '_layer' → logprob: -3.974046230316162

Token 209: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -2.856408536899835e-05
    2. ',node' → logprob: -10.750028610229492
    3. ' ,' → logprob: -12.250028610229492
    4. ',n' → logprob: -13.500028610229492
    5. ',
' → logprob: -14.875028610229492
    6. '):' → logprob: -15.625028610229492
    7. ',start' → logprob: -16.250028610229492
    8. '   ' → logprob: -16.750028610229492
    9. '(node' → logprob: -17.125028610229492
    10. ')' → logprob: -17.375028610229492

Token 210: ' n' (ID: 297)
  Prédit: ' start'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' start' → logprob: -0.8090980648994446
    2. 'start' → logprob: -0.9340980648994446
    3. '0' → logprob: -2.4340980052948
    4. 'visited' → logprob: -3.4340980052948
    5. ' root' → logprob: -4.434098243713379
    6. 'root' → logprob: -4.559098243713379
    7. ' visited' → logprob: -5.184098243713379
    8. ' node' → logprob: -5.434098243713379
    9. 'node' → logprob: -5.934098243713379
    10. ' ' → logprob: -5.934098243713379

Token 211: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.20245672762393951
    2. '):' → logprob: -1.7024567127227783
    3. ')' → logprob: -6.952456951141357
    4. ',node' → logprob: -9.7024564743042
    5. '):
' → logprob: -11.0774564743042
    6. '   ' → logprob: -13.3274564743042
    7. '(node' → logprob: -13.4524564743042
    8. ',n' → logprob: -13.5774564743042
    9. '(tree' → logprob: -13.9524564743042
    10. ':' → logprob: -14.0774564743042

Token 212: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02604748122394085
    2. ' visited' → logprob: -4.276047706604004
    3. 'visited' → logprob: -4.526047706604004
    4. ' q' → logprob: -7.651047706604004
    5. 'q' → logprob: -8.276047706604004
    6. ' queue' → logprob: -8.901047706604004
    7. 'queue' → logprob: -9.776047706604004
    8. ' from' → logprob: -11.151047706604004
    9. 'from' → logprob: -11.276047706604004
    10. '   ' → logprob: -11.651047706604004

Token 213: ' a' (ID: 261)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.01741158775985241
    2. 'q' → logprob: -4.392411708831787
    3. ' visited' → logprob: -5.767411708831787
    4. '   ' → logprob: -7.142411708831787
    5. 'queue' → logprob: -8.017411231994629
    6. ' q' → logprob: -8.517411231994629
    7. 'def' → logprob: -8.642411231994629
    8. 'from' → logprob: -8.642411231994629
    9. 'dist' → logprob: -10.892411231994629
    10. 'depth' → logprob: -11.767411231994629

Token 214: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.8981833457946777
    2. 'll' → logprob: -1.6481833457946777
    3. '   ' → logprob: -2.1481833457946777
    4. 'queue' → logprob: -2.5231833457946777
    5. 'def' → logprob: -2.7731833457946777
    6. '=' → logprob: -2.7731833457946777
    7. ':' → logprob: -4.648183345794678
    8. '_queue' → logprob: -4.773183345794678
    9. 'deque' → logprob: -5.023183345794678
    10. 'ct' → logprob: -5.148183345794678

Token 215: ' ' (ID: 220)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -1.5635343790054321
    2. '[' → logprob: -1.8135343790054321
    3. ' [' → logprob: -1.8135343790054321
    4. ' queue' → logprob: -2.1885342597961426
    5. ' create' → logprob: -2.4385342597961426
    6. ' []' → logprob: -2.6885342597961426
    7. 'create' → logprob: -2.8135342597961426
    8. '0' → logprob: -2.9385342597961426
    9. 'queue' → logprob: -3.1885342597961426
    10. ' ' → logprob: -4.313534259796143

Token 216: '0' (ID: 15)
  Prédit: 'queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'queue' → logprob: -0.45490655303001404
    2. 'create' → logprob: -1.0799065828323364
    3. 'initialize' → logprob: -4.579906463623047
    4. '[' → logprob: -5.079906463623047
    5. '[]' → logprob: -5.079906463623047
    6. ' queue' → logprob: -6.579906463623047
    7. '0' → logprob: -7.579906463623047
    8. ' create' → logprob: -7.829906463623047
    9. 'deque' → logprob: -8.079906463623047
    10. '{' → logprob: -8.704906463623047

Token 217: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.2959583103656769
    2. '   ' → logprob: -1.7959582805633545
    3. '<|end|>' → logprob: -3.0459582805633545
    4. ',' → logprob: -4.295958518981934
    5. ')' → logprob: -5.670958518981934
    6. ' ' → logprob: -6.045958518981934
    7. 'visited' → logprob: -6.045958518981934
    8. 'a' → logprob: -6.170958518981934
    9. 'def' → logprob: -6.170958518981934
    10. ' 
' → logprob: -6.170958518981934

Token 218: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6532920002937317
    2. '
' → logprob: -0.9032920002937317
    3. 'visited' → logprob: -3.528291940689087
    4. ',' → logprob: -4.278292179107666
    5. '    
' → logprob: -4.903292179107666
    6. ' visited' → logprob: -5.028292179107666
    7. 'def' → logprob: -6.028292179107666
    8. '<|end|>' → logprob: -6.028292179107666
    9. '  ' → logprob: -6.278292179107666
    10. '  
' → logprob: -6.278292179107666

Token 219: ' q' (ID: 2335)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.08254362642765045
    2. ' visited' → logprob: -3.2075436115264893
    3. 'q' (adapté à ' q') → logprob: -3.7075436115264893
    4. 'queue' → logprob: -5.082543849945068
    5. ' q' → logprob: -5.832543849945068
    6. '   ' → logprob: -5.832543849945068
    7. ' queue' → logprob: -7.207543849945068
    8. 'v' → logprob: -8.33254337310791
    9. 'depth' → logprob: -8.70754337310791
    10. 'b' → logprob: -8.83254337310791

Token 220: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.16873377561569214
    2. '=' → logprob: -1.918733835220337
    3. '.' → logprob: -4.793733596801758
    4. '.enqueue' → logprob: -9.293733596801758
    5. '.put' → logprob: -10.543733596801758
    6. ' =
' → logprob: -11.293733596801758
    7. ' .' → logprob: -11.293733596801758
    8. ' ' → logprob: -11.418733596801758
    9. '.=' → logprob: -11.668733596801758
    10. ',' → logprob: -11.793733596801758

Token 221: ' create' (ID: 2501)
  Prédit: 'create'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'create' → logprob: -0.06223924085497856
    2. ' create' → logprob: -2.812239170074463
    3. 'queue' → logprob: -8.312239646911621
    4. ' queue' → logprob: -10.687239646911621
    5. '(create' → logprob: -12.937239646911621
    6. '=create' → logprob: -15.187239646911621
    7. '	create' → logprob: -15.562239646911621
    8. '.create' → logprob: -15.687239646911621
    9. ' ' → logprob: -16.812238693237305
    10. '_create' → logprob: -17.437238693237305

Token 222: '_queue' (ID: 25622)
  Prédit: '_queue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_queue' → logprob: -0.004486492834985256
    2. '_' → logprob: -5.504486560821533
    3. '()' → logprob: -8.254486083984375
    4. 'Queue' → logprob: -9.879486083984375
    5. 'queue' → logprob: -10.004486083984375
    6. '_q' → logprob: -10.504486083984375
    7. '(queue' → logprob: -11.504486083984375
    8. ' queue' → logprob: -12.504486083984375
    9. '_QUEUE' → logprob: -12.754486083984375
    10. 'q' → logprob: -13.504486083984375

Token 223: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0005566088366322219
    2. '()
' → logprob: -7.500556468963623
    3. '()

' → logprob: -13.500556945800781
    4. '(' → logprob: -14.000556945800781
    5. '()
' → logprob: -14.375556945800781
    6. '()`' → logprob: -15.375556945800781
    7. ' ()' → logprob: -15.500556945800781
    8. '()"' → logprob: -15.750556945800781
    9. '();' → logprob: -16.75055694580078
    10. '())' → logprob: -16.87555694580078

Token 224: '   ' (ID: 271)
  Prédit: 'enqueue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'enqueue' → logprob: -0.11633861064910889
    2. ' mark' → logprob: -3.2413387298583984
    3. ' enqueue' → logprob: -3.2413387298583984
    4. '   ' → logprob: -4.366338729858398
    5. 'mark' → logprob: -4.366338729858398
    6. ' 
' → logprob: -6.241338729858398
    7. '.enqueue' → logprob: -7.116338729858398
    8. '    
' → logprob: -7.241338729858398
    9. 'q' → logprob: -7.366338729858398
    10. ' q' → logprob: -7.616338729858398

Token 225: ' enqueue' (ID: 117229)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.28407198190689087
    2. 'enqueue' (adapté à ' enqueue') → logprob: -1.409071922302246
    3. 'mark' → logprob: -6.284071922302246
    4. ' visited' → logprob: -7.409071922302246
    5. ' enqueue' → logprob: -8.784071922302246
    6. '   ' → logprob: -8.784071922302246
    7. 'initialize' → logprob: -10.284071922302246
    8. 'visit' → logprob: -10.409071922302246
    9. ' mark' → logprob: -11.034071922302246
    10. 'en' → logprob: -11.409071922302246

Token 226: '(q' (ID: 21479)
  Prédit: '(q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(q' → logprob: -9.65101717156358e-05
    2. '(' → logprob: -9.250096321105957
    3. ' (' → logprob: -15.125096321105957
    4. '(queue' → logprob: -16.875097274780273
    5. '(s' → logprob: -19.125097274780273
    6. '()' → logprob: -19.625097274780273
    7. ')' → logprob: -19.875097274780273
    8. '```' → logprob: -20.000097274780273
    9. '(
' → logprob: -20.500097274780273
    10. '(n' → logprob: -20.750097274780273

Token 227: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.46202459931373596
    2. '(q' → logprob: -1.9620245695114136
    3. '(' → logprob: -2.087024688720703
    4. '(a' → logprob: -2.337024688720703
    5. ' ,' → logprob: -5.462024688720703
    6. ' (' → logprob: -6.337024688720703
    7. '(tree' → logprob: -6.587024688720703
    8. ')' → logprob: -7.962024688720703
    9. ' (,' → logprob: -7.962024688720703
    10. ',q' → logprob: -8.587024688720703

Token 228: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.0022218646481633186
    2. '0' → logprob: -6.877222061157227
    3. ' a' → logprob: -7.127222061157227
    4. '(' → logprob: -8.252222061157227
    5. '(a' → logprob: -9.127222061157227
    6. ' (' → logprob: -11.752222061157227
    7. ' ' → logprob: -12.627222061157227
    8. ')a' → logprob: -13.252222061157227
    9. ')' → logprob: -13.627222061157227
    10. '[a' → logprob: -14.939722061157227

Token 229: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00011284107313258573
    2. ')
' → logprob: -9.125112533569336
    3. ' )' → logprob: -12.625112533569336
    4. ')

' → logprob: -15.625112533569336
    5. '   ' → logprob: -16.125112533569336
    6. ')#' → logprob: -16.500112533569336
    7. '))' → logprob: -17.000112533569336
    8. ')return' → logprob: -17.250112533569336
    9. ')
' → logprob: -17.375112533569336
    10. '),' → logprob: -17.750112533569336

Token 230: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13134105503559113
    2. 'visited' → logprob: -2.256340980529785
    3. 'mark' → logprob: -4.381340980529785
    4. ' visited' → logprob: -7.006340980529785
    5. '```' → logprob: -7.006340980529785
    6. ' mark' → logprob: -7.006340980529785
    7. 'def' → logprob: -7.131340980529785
    8. 'while' → logprob: -7.256340980529785
    9. '    
' → logprob: -7.381340980529785
    10. '
' → logprob: -8.131340980529785

Token 231: ' v' (ID: 323)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.007885674014687538
    2. ' visited' → logprob: -4.882885456085205
    3. 'def' → logprob: -8.632885932922363
    4. '   ' → logprob: -9.882885932922363
    5. '```' → logprob: -11.757885932922363
    6. ' ' → logprob: -12.007885932922363
    7. 'Visited' → logprob: -12.257885932922363
    8. 'depth' → logprob: -12.507885932922363
    9. 'v' (adapté à ' v') → logprob: -12.757885932922363
    10. '  ' → logprob: -13.007885932922363

Token 232: ' =' (ID: 314)
  Prédit: 'is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'is' → logprob: -0.0038114727940410376
    2. 'isted' → logprob: -5.753811359405518
    3. 'visited' → logprob: -8.128811836242676
    4. 'isit' → logprob: -9.128811836242676
    5. '[' → logprob: -9.253811836242676
    6. ' =' → logprob: -9.753811836242676
    7. '=' → logprob: -10.503811836242676
    8. 'isible' → logprob: -11.628811836242676
    9. 's' → logprob: -12.003811836242676
    10. '_' → logprob: -12.628811836242676

Token 233: ' initialize' (ID: 18400)
  Prédit: 'initialize'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'initialize' → logprob: -0.04929797723889351
    2. ' initialize' → logprob: -3.049298048019409
    3. '[' → logprob: -7.54929780960083
    4. ' [' → logprob: -8.924298286437988
    5. '	initialize' → logprob: -10.799298286437988
    6. 'itialize' → logprob: -11.549298286437988
    7. '0' → logprob: -12.424298286437988
    8. '[]' → logprob: -12.674298286437988
    9. '_initialize' → logprob: -13.049298286437988
    10. '.initialize' → logprob: -13.299298286437988

Token 234: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.00015979631280060858
    2. 'visited' → logprob: -8.750160217285156
    3. '_vis' → logprob: -13.750160217285156
    4. 'Visited' → logprob: -16.000160217285156
    5. '_visit' → logprob: -16.500160217285156
    6. '_v' → logprob: -17.375160217285156
    7. ' visited' → logprob: -17.750160217285156
    8. '[' → logprob: -17.875160217285156
    9. '```' → logprob: -18.375160217285156
    10. 'v' → logprob: -18.500160217285156

Token 235: 'visited' (ID: 52453)
  Prédit: 'visited'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'visited' → logprob: -1.1472419600977446e-06
    2. ' visited' → logprob: -13.750000953674316
    3. '[' → logprob: -20.000001907348633
    4. 'Visited' → logprob: -20.000001907348633
    5. '_' → logprob: -21.125001907348633
    6. 'visit' → logprob: -22.250001907348633
    7. 'vis' → logprob: -22.500001907348633
    8. 'list' → logprob: -22.625001907348633
    9. '[]' → logprob: -22.875001907348633
    10. 'v' → logprob: -23.000001907348633

Token 236: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -1.27099974633893e-05
    2. '(' → logprob: -11.625012397766113
    3. ' (' → logprob: -12.750012397766113
    4. 'n' → logprob: -14.375012397766113
    5. ',' → logprob: -16.25001335144043
    6. ')(' → logprob: -17.00001335144043
    7. '```' → logprob: -17.12501335144043
    8. ',n' → logprob: -17.25001335144043
    9. ')' → logprob: -17.25001335144043
    10. '
' → logprob: -18.37501335144043

Token 237: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.038049984723329544
    2. ')
' → logprob: -3.2880499362945557
    3. ')
' → logprob: -12.288049697875977
    4. ')

' → logprob: -13.288049697875977
    5. '())' → logprob: -14.288049697875977
    6. ' )' → logprob: -14.538049697875977
    7. '()' → logprob: -14.913049697875977
    8. '   ' → logprob: -15.163049697875977
    9. '())
' → logprob: -15.913049697875977
    10. '))' → logprob: -16.038049697875977

Token 238: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9721488356590271
    2. '
' → logprob: -1.2221488952636719
    3. 'mark' → logprob: -1.7221488952636719
    4. ' mark' → logprob: -1.9721488952636719
    5. '    
' → logprob: -5.972148895263672
    6. '<|end|>' → logprob: -6.222148895263672
    7. '(mark' → logprob: -6.722148895263672
    8. '  
' → logprob: -7.847148895263672
    9. ' 
' → logprob: -8.097148895263672
    10. '```' → logprob: -8.222148895263672

Token 239: ' mark' (ID: 1983)
  Prédit: 'mark'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'mark' (adapté à ' mark') → logprob: -0.0003159201005473733
    2. ' mark' → logprob: -8.12531566619873
    3. 'while' → logprob: -10.87531566619873
    4. '   ' → logprob: -15.25031566619873
    5. 'markup' → logprob: -16.000316619873047
    6. '(mark' → logprob: -16.125316619873047
    7. 'mask' → logprob: -16.375316619873047
    8. 'marker' → logprob: -17.000316619873047
    9. '```' → logprob: -17.000316619873047
    10. 'marked' → logprob: -17.125316619873047

Token 240: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -1.5048530030981055e-06
    2. 'visited' → logprob: -13.625001907348633
    3. '_v' → logprob: -17.375001907348633
    4. '_vis' → logprob: -17.625001907348633
    5. ' _' → logprob: -18.125001907348633
    6. 'v' → logprob: -18.250001907348633
    7. 'ed' → logprob: -18.375001907348633
    8. 'Visited' → logprob: -18.375001907348633
    9. '_completed' → logprob: -18.625001907348633
    10. '_mark' → logprob: -18.750001907348633

Token 241: 'visited' (ID: 52453)
  Prédit: 'visited'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'visited' → logprob: -3.650518920039758e-06
    2. '_' → logprob: -13.000003814697266
    3. ' visited' → logprob: -14.000003814697266
    4. 'v' → logprob: -14.625003814697266
    5. 'Visited' → logprob: -17.875003814697266
    6. 'vist' → logprob: -19.375003814697266
    7. 'vis' → logprob: -19.875003814697266
    8. 'visit' → logprob: -20.000003814697266
    9. 'vised' → logprob: -20.750003814697266
    10. '```' → logprob: -20.750003814697266

Token 242: '(v' (ID: 6932)
  Prédit: '(v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(v' → logprob: -0.00046546570956707
    2. '(' → logprob: -8.250465393066406
    3. ' (' → logprob: -8.500465393066406
    4. '(q' → logprob: -14.375465393066406
    5. ',' → logprob: -15.625465393066406
    6. '```' → logprob: -17.000465393066406
    7. '(vis' → logprob: -17.250465393066406
    8. '(
' → logprob: -18.125465393066406
    9. 'v' → logprob: -18.250465393066406
    10. ' v' → logprob: -18.750465393066406

Token 243: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00034058792516589165
    2. ' ,' → logprob: -8.125340461730957
    3. ',q' → logprob: -10.750340461730957
    4. ',v' → logprob: -11.000340461730957
    5. '(v' → logprob: -13.500340461730957
    6. ',
' → logprob: -13.500340461730957
    7. ')' → logprob: -13.750340461730957
    8. '(q' → logprob: -14.000340461730957
    9. '(' → logprob: -14.250340461730957
    10. ',a' → logprob: -15.000340461730957

Token 244: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.012242850847542286
    2. ' a' → logprob: -4.887242794036865
    3. '0' → logprob: -5.387242794036865
    4. ' ' → logprob: -9.887243270874023
    5. '   ' → logprob: -15.387243270874023
    6. '	a' → logprob: -16.012243270874023
    7. ')a' → logprob: -16.887243270874023
    8. ' ' → logprob: -17.012243270874023
    9. 'а' → logprob: -17.574743270874023
    10. ')' → logprob: -17.637243270874023

Token 245: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0008073674980551004
    2. ')
' → logprob: -7.125807285308838
    3. ' )' → logprob: -13.625807762145996
    4. '   ' → logprob: -13.750807762145996
    5. ')

' → logprob: -15.000807762145996
    6. ')
' → logprob: -15.625807762145996
    7. '))' → logprob: -16.00080680847168
    8. '),' → logprob: -17.37580680847168
    9. ')return' → logprob: -17.62580680847168
    10. '
' → logprob: -18.00080680847168

Token 246: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10953983664512634
    2. ' while' → logprob: -2.734539747238159
    3. '
' → logprob: -4.234539985656738
    4. '    
' → logprob: -4.359539985656738
    5. 'while' → logprob: -4.984539985656738
    6. '	while' → logprob: -6.234539985656738
    7. ')' → logprob: -7.234539985656738
    8. ' 
' → logprob: -7.734539985656738
    9. '<|end|>' → logprob: -7.984539985656738
    10. ' ' → logprob: -8.484539985656738

Token 247: ' while' (ID: 2049)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' (adapté à ' while') → logprob: -0.10337729007005692
    2. 'max' → logprob: -3.353377342224121
    3. 'dist' → logprob: -4.228377342224121
    4. 'last' → logprob: -4.728377342224121
    5. ' while' → logprob: -4.978377342224121
    6. 'fur' → logprob: -5.103377342224121
    7. 'far' → logprob: -5.103377342224121
    8. 'd' → logprob: -5.228377342224121
    9. 'distance' → logprob: -5.478377342224121
    10. 'res' → logprob: -5.728377342224121

Token 248: ' not' (ID: 625)
  Prédit: ' not'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.42900437116622925
    2. 'not' → logprob: -1.054004430770874
    3. ' q' → logprob: -9.429004669189453
    4. '(not' → logprob: -9.429004669189453
    5. 'q' → logprob: -9.679004669189453
    6. '	not' → logprob: -10.554004669189453
    7. '   ' → logprob: -11.554004669189453
    8. 'has' → logprob: -11.804004669189453
    9. ' has' → logprob: -11.804004669189453
    10. ' ' → logprob: -11.929004669189453

Token 249: ' q' (ID: 2335)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.4741458296775818
    2. ' q' → logprob: -0.9741458296775818
    3. 'queue' → logprob: -10.974145889282227
    4. 'enqueue' → logprob: -11.224145889282227
    5. '(q' → logprob: -11.599145889282227
    6. '	q' → logprob: -11.724145889282227
    7. ' queue' → logprob: -12.099145889282227
    8. ' enqueue' → logprob: -12.224145889282227
    9. ' ' → logprob: -12.349145889282227
    10. ' dequeue' → logprob: -13.224145889282227

Token 250: '.empty' (ID: 18962)
  Prédit: '.empty'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.empty' → logprob: -0.00015467056073248386
    2. '.q' → logprob: -9.250154495239258
    3. '.' → logprob: -9.875154495239258
    4. ' .' → logprob: -12.250154495239258
    5. '.Empty' → logprob: -13.875154495239258
    6. 'empty' → logprob: -14.500154495239258
    7. '.queue' → logprob: -15.375154495239258
    8. '.EMPTY' → logprob: -15.750154495239258
    9. '.em' → logprob: -16.250154495239258
    10. '.full' → logprob: -16.375154495239258

Token 251: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0052758571691811085
    2. '()' → logprob: -5.255275726318359
    3. '():
' → logprob: -10.88027572631836
    4. '(' → logprob: -11.38027572631836
    5. ' ():' → logprob: -11.50527572631836
    6. ' ()' → logprob: -14.50527572631836
    7. '()>' → logprob: -14.75527572631836
    8. '():
' → logprob: -15.88027572631836
    9. '():

' → logprob: -15.88027572631836
    10. '()==' → logprob: -16.13027572631836

Token 252: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.006174670998007059
    2. '   ' → logprob: -5.506174564361572
    3. '    ' → logprob: -7.256174564361572
    4. ' node' → logprob: -7.756174564361572
    5. ' current' → logprob: -8.13117504119873
    6. '        
' → logprob: -8.38117504119873
    7. '```' → logprob: -9.13117504119873
    8. 'node' → logprob: -10.13117504119873
    9. '    
' → logprob: -10.50617504119873
    10. 'current' → logprob: -10.88117504119873

Token 253: ' a' (ID: 261)
  Prédit: ' node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' node' → logprob: -0.4102977216243744
    2. ' current' → logprob: -1.5352977514266968
    3. ' u' → logprob: -2.5352976322174072
    4. 'node' → logprob: -3.6602976322174072
    5. 'current' → logprob: -4.910297870635986
    6. ' curr' → logprob: -5.535297870635986
    7. 'u' → logprob: -5.785297870635986
    8. '   ' → logprob: -7.410297870635986
    9. ' cur' → logprob: -8.035297393798828
    10. ' x' → logprob: -8.410297393798828

Token 254: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4872954487800598
    2. '=' → logprob: -0.9872954487800598
    3. ',' → logprob: -4.362295627593994
    4. ')' → logprob: -8.612295150756836
    5. '   ' → logprob: -9.237295150756836
    6. ' ,' → logprob: -10.362295150756836
    7. ')=' → logprob: -11.362295150756836
    8. ' =
' → logprob: -11.487295150756836
    9. ' ' → logprob: -11.612295150756836
    10. '2' → logprob: -12.112295150756836

Token 255: ' dequeue' (ID: 118122)
  Prédit: 'de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'de' → logprob: -0.07905393093824387
    2. ' dequeue' → logprob: -2.5790538787841797
    3. '.dequeue' → logprob: -9.20405387878418
    4. 'deque' → logprob: -10.32905387878418
    5. ' de' → logprob: -10.57905387878418
    6. ' deque' → logprob: -12.95405387878418
    7. '	de' → logprob: -13.70405387878418
    8. '(de' → logprob: -14.20405387878418
    9. ' ' → logprob: -14.45405387878418
    10. '   ' → logprob: -15.70405387878418

Token 256: '(q' (ID: 21479)
  Prédit: '(q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(q' → logprob: -0.00014096579980105162
    2. '(' → logprob: -8.875141143798828
    3. ' (' → logprob: -14.000141143798828
    4. '(queue' → logprob: -16.250141143798828
    5. ')' → logprob: -16.500141143798828
    6. '(
' → logprob: -17.000141143798828
    7. '()' → logprob: -18.500141143798828
    8. '(s' → logprob: -18.625141143798828
    9. ',q' → logprob: -19.500141143798828
    10. '(n' → logprob: -19.500141143798828

Token 257: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.38727134466171265
    2. ')' → logprob: -1.1372714042663574
    3. ')
' → logprob: -7.887271404266357
    4. ' )
' → logprob: -11.2622709274292
    5. '   ' → logprob: -12.6372709274292
    6. '       ' → logprob: -12.6372709274292
    7. ')

' → logprob: -13.2622709274292
    8. ' )' → logprob: -13.5122709274292
    9. ')`
' → logprob: -13.7622709274292
    10. '())
' → logprob: -15.0122709274292

Token 258: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.11662762612104416
    2. '   ' → logprob: -2.9916276931762695
    3. ' for' → logprob: -2.9916276931762695
    4. '<|end|>' → logprob: -4.8666276931762695
    5. '        
' → logprob: -7.2416276931762695
    6. 'for' → logprob: -8.11662769317627
    7. '    
' → logprob: -8.36662769317627
    8. '  
' → logprob: -8.74162769317627
    9. ',' → logprob: -9.49162769317627
    10. ' ' → logprob: -9.49162769317627

Token 259: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.5446798205375671
    2. ' for' → logprob: -0.9196798205375671
    3. '   ' → logprob: -4.294679641723633
    4. 'print' → logprob: -5.669679641723633
    5. 'if' → logprob: -6.294679641723633
    6. ' if' → logprob: -6.669679641723633
    7. ' print' → logprob: -7.044679641723633
    8. '       ' → logprob: -8.794679641723633
    9. 'children' → logprob: -10.794679641723633
    10. ' children' → logprob: -11.044679641723633

Token 260: ' b' (ID: 287)
  Prédit: ' child'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' child' → logprob: -1.709176778793335
    2. 'u' → logprob: -2.459176778793335
    3. ' node' → logprob: -2.459176778793335
    4. ' i' → logprob: -2.459176778793335
    5. 'i' → logprob: -2.584176778793335
    6. 'b' → logprob: -2.709176778793335
    7. ' b' → logprob: -2.959176778793335
    8. ' neighbor' → logprob: -2.959176778793335
    9. 'neighbor' → logprob: -3.084176778793335
    10. ' u' → logprob: -3.084176778793335

Token 261: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.07895301282405853
    2. 'in' → logprob: -2.5789530277252197
    3. '	in' → logprob: -10.32895278930664
    4. ' ' → logprob: -10.70395278930664
    5. ',' → logprob: -13.07895278930664
    6. ' ' → logprob: -13.32895278930664
    7. '<|end|>' → logprob: -14.45395278930664
    8. 'n' → logprob: -14.45395278930664
    9. 'space' → logprob: -14.57895278930664
    10. '   ' → logprob: -15.07895278930664

Token 262: ' tree' (ID: 8165)
  Prédit: 'tree'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tree' → logprob: -0.4745728373527527
    2. ' tree' → logprob: -0.9745728373527527
    3. '(tree' → logprob: -7.974572658538818
    4. '	tree' → logprob: -9.474573135375977
    5. ' range' → logprob: -10.349573135375977
    6. 'range' → logprob: -10.474573135375977
    7. '   ' → logprob: -12.349573135375977
    8. ' ' → logprob: -12.349573135375977
    9. '[' → logprob: -13.474573135375977
    10. '_tree' → logprob: -13.974573135375977

Token 263: '[a' (ID: 32035)
  Prédit: '[a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[a' → logprob: -7.946405094116926e-05
    2. 'a' → logprob: -9.625079154968262
    3. '[' → logprob: -11.500079154968262
    4. ' [' → logprob: -13.875079154968262
    5. '   ' → logprob: -14.000079154968262
    6. '[
' → logprob: -14.625079154968262
    7. '(a' → logprob: -15.375079154968262
    8. ',a' → logprob: -15.500079154968262
    9. ' a' → logprob: -16.000080108642578
    10. '[node' → logprob: -16.250080108642578

Token 264: ']:
' (ID: 22152)
  Prédit: ']:'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']:' → logprob: -0.0024732782039791346
    2. ']:
' → logprob: -6.1274733543396
    3. ']' → logprob: -8.627472877502441
    4. ']:
' → logprob: -9.627472877502441
    5. ']>' → logprob: -11.502472877502441
    6. ' ]' → logprob: -11.627472877502441
    7. ':' → logprob: -11.627472877502441
    8. ']:

' → logprob: -12.252472877502441
    9. '']:' → logprob: -13.252472877502441
    10. ']:


' → logprob: -13.377472877502441

Token 265: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.006422729231417179
    2. ' if' → logprob: -5.256422519683838
    3. '       ' → logprob: -8.131422996520996
    4. '<|end|>' → logprob: -8.631422996520996
    5. '            ' → logprob: -9.131422996520996
    6. '        ' → logprob: -9.131422996520996
    7. ',' → logprob: -9.381422996520996
    8. '               ' → logprob: -9.506422996520996
    9. '	       ' → logprob: -9.631422996520996
    10. ':' → logprob: -10.381422996520996

Token 266: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.003741767955943942
    2. '               ' → logprob: -5.87874174118042
    3. 'if' (adapté à ' if') → logprob: -7.25374174118042
    4. '                ' → logprob: -9.503742218017578
    5. '            ' → logprob: -10.003742218017578
    6. ' ' → logprob: -10.253742218017578
    7. '        ' → logprob: -10.378742218017578
    8. '       ' → logprob: -10.753742218017578
    9. '    ' → logprob: -11.878742218017578
    10. '           ' → logprob: -12.253742218017578

Token 267: ' v' (ID: 323)
  Prédit: ' not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.3013555407524109
    2. 'not' → logprob: -1.9263556003570557
    3. 'v' → logprob: -2.8013556003570557
    4. ' v' → logprob: -2.9263556003570557
    5. '	not' → logprob: -9.801355361938477
    6. '(not' → logprob: -10.051355361938477
    7. 'visited' → logprob: -10.926355361938477
    8. '	v' → logprob: -11.051355361938477
    9. '   ' → logprob: -11.488855361938477
    10. '(v' → logprob: -11.988855361938477

Token 268: '[b' (ID: 40800)
  Prédit: '[b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[b' → logprob: -5.512236498361744e-07
    2. 'b' → logprob: -14.875000953674316
    3. '[' → logprob: -16.625
    4. ' [' → logprob: -18.125
    5. '[v' → logprob: -18.25
    6. '[a' → logprob: -19.25
    7. ' b' → logprob: -19.5
    8. '	b' → logprob: -19.625
    9. '[
' → logprob: -20.375
    10. '   ' → logprob: -20.75

Token 269: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.023951170966029167
    2. ']==' → logprob: -3.7739510536193848
    3. '==' → logprob: -7.648951053619385
    4. ' ]' → logprob: -8.898951530456543
    5. ' ==' → logprob: -9.523951530456543
    6. '[' → logprob: -11.023951530456543
    7. '']==' → logprob: -13.898951530456543
    8. '']' → logprob: -14.148951530456543
    9. '[]' → logprob: -14.898951530456543
    10. ')' → logprob: -15.898951530456543

Token 270: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.1602717489004135
    2. ' ==' → logprob: -1.9102717638015747
    3. ']==' → logprob: -10.910271644592285
    4. '=' → logprob: -11.160271644592285
    5. '==
' → logprob: -11.410271644592285
    6. ')==' → logprob: -13.285271644592285
    7. '[' → logprob: -14.660271644592285
    8. ')' → logprob: -14.660271644592285
    9. '0' → logprob: -15.160271644592285
    10. '!=' → logprob: -15.285271644592285

Token 271: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0019289902411401272
    2. ' ' → logprob: -6.251928806304932
    3. '   ' → logprob: -15.12692928314209
    4. '  ' → logprob: -17.751928329467773
    5. '
' → logprob: -18.251928329467773
    6. '۰' → logprob: -18.376928329467773
    7. '    ' → logprob: -19.001928329467773
    8. 'False' → logprob: -19.251928329467773
    9. '	' → logprob: -19.314428329467773
    10. '=' → logprob: -20.314428329467773

Token 272: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -5.438573680294212e-06
    2. ' ' → logprob: -12.125005722045898
    3. '   ' → logprob: -19.2500057220459
    4. '<|end|>' → logprob: -19.6250057220459
    5. '۰' → logprob: -20.7500057220459
    6. '  ' → logprob: -21.5000057220459
    7. 'False' → logprob: -21.7500057220459
    8. '00' → logprob: -22.3750057220459
    9. '    ' → logprob: -22.3750057220459
    10. '
' → logprob: -22.7500057220459

Token 273: ' and' (ID: 326)
  Prédit: ':
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':
' → logprob: -0.2638612687587738
    2. ':' → logprob: -1.5138612985610962
    3. '               ' → logprob: -4.513861179351807
    4. '           ' → logprob: -7.888861179351807
    5. '):
' → logprob: -8.013861656188965
    6. ' :
' → logprob: -9.263861656188965
    7. ' and' → logprob: -10.513861656188965
    8. ':
' → logprob: -10.763861656188965
    9. ',' → logprob: -11.388861656188965
    10. ' :' → logprob: -11.638861656188965

Token 274: ' has' (ID: 853)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.3894256353378296
    2. ' b' → logprob: -2.389425754547119
    3. 'has' → logprob: -2.389425754547119
    4. ' has' → logprob: -2.639425754547119
    5. ' not' → logprob: -3.389425754547119
    6. 'not' → logprob: -4.014425754547119
    7. 'len' → logprob: -5.014425754547119
    8. ' len' → logprob: -6.264425754547119
    9. 'a' → logprob: -6.389425754547119
    10. 'True' → logprob: -6.514425754547119

Token 275: '_children' (ID: 78282)
  Prédit: '_children'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_children' → logprob: -3.5716304410016164e-05
    2. 'children' → logprob: -10.750035285949707
    3. '(tree' → logprob: -12.125035285949707
    4. '_child' → logprob: -12.750035285949707
    5. '
' → logprob: -13.625035285949707
    6. 'tree' → logprob: -14.500035285949707
    7. ' _' → logprob: -14.625035285949707
    8. ' children' → logprob: -14.875035285949707
    9. '(children' → logprob: -14.875035285949707
    10. '```' → logprob: -15.000035285949707

Token 276: '(tree' (ID: 44909)
  Prédit: '(tree'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(tree' → logprob: -0.001345115713775158
    2. '(' → logprob: -6.626345157623291
    3. '(
' → logprob: -11.376344680786133
    4. ' (' → logprob: -12.001344680786133
    5. '(t' → logprob: -14.376344680786133
    6. '(tr' → logprob: -14.751344680786133
    7. '(table' → logprob: -15.126344680786133
    8. '(

' → logprob: -15.876344680786133
    9. '(Tree' → logprob: -16.376344680786133
    10. '(queue' → logprob: -17.126344680786133

Token 277: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0002378673671046272
    2. ',b' → logprob: -8.750237464904785
    3. ' ,' → logprob: -9.875237464904785
    4. ',a' → logprob: -10.875237464904785
    5. ',
' → logprob: -12.500237464904785
    6. 'a' → logprob: -13.500237464904785
    7. ')' → logprob: -13.750237464904785
    8. 'b' → logprob: -14.375237464904785
    9. ',node' → logprob: -15.000237464904785
    10. ',n' → logprob: -15.250237464904785

Token 278: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.18058228492736816
    2. ' b' → logprob: -1.8055822849273682
    3. 'a' → logprob: -7.180582046508789
    4. ' a' → logprob: -9.680582046508789
    5. ' ' → logprob: -12.180582046508789
    6. '   ' → logprob: -13.118082046508789
    7. '	b' → logprob: -13.493082046508789
    8. ')b' → logprob: -13.805582046508789
    9. '(b' → logprob: -14.243082046508789
    10. ')' → logprob: -14.243082046508789

Token 279: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.11590440571308136
    2. '):
' → logprob: -2.2409043312072754
    3. ')' → logprob: -5.990904331207275
    4. '           ' → logprob: -8.490904808044434
    5. '               ' → logprob: -8.865904808044434
    6. ':' → logprob: -9.490904808044434
    7. ' ):' → logprob: -9.865904808044434
    8. '):
' → logprob: -10.365904808044434
    9. '):

' → logprob: -11.115904808044434
    10. '       ' → logprob: -11.490904808044434

Token 280: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0007398230955004692
    2. '                
' → logprob: -8.250740051269531
    3. '<|end|>' → logprob: -9.125740051269531
    4. '           ' → logprob: -9.250740051269531
    5. '                   ' → logprob: -10.000740051269531
    6. '                ' → logprob: -10.250740051269531
    7. '              ' → logprob: -10.375740051269531
    8. ':' → logprob: -10.875740051269531
    9. ',' → logprob: -11.250740051269531
    10. ' 
' → logprob: -11.375740051269531

Token 281: ' enqueue' (ID: 117229)
  Prédit: ' mark'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' mark' → logprob: -0.7110297679901123
    2. '                   ' → logprob: -1.0860297679901123
    3. 'mark' → logprob: -2.0860297679901123
    4. ' enqueue' → logprob: -4.086030006408691
    5. 'enqueue' (adapté à ' enqueue') → logprob: -4.211030006408691
    6. '   ' → logprob: -4.961030006408691
    7. '               ' → logprob: -5.211030006408691
    8. '           ' → logprob: -6.586030006408691
    9. ' ' → logprob: -7.711030006408691
    10. '                  ' → logprob: -8.336030006408691

Token 282: '(q' (ID: 21479)
  Prédit: '(q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(q' → logprob: -0.00033665422233752906
    2. '(' → logprob: -8.000336647033691
    3. '(queue' → logprob: -14.750336647033691
    4. '(
' → logprob: -14.750336647033691
    5. ' (' → logprob: -15.125336647033691
    6. '<|end|>' → logprob: -17.375337600708008
    7. '(s' → logprob: -17.750337600708008
    8. '```' → logprob: -19.375337600708008
    9. ',q' → logprob: -19.625337600708008
    10. '(

' → logprob: -19.750337600708008

Token 283: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0002831464516930282
    2. ',b' → logprob: -8.750283241271973
    3. '(b' → logprob: -9.750283241271973
    4. ' ,' → logprob: -9.875283241271973
    5. ',q' → logprob: -12.125283241271973
    6. ')' → logprob: -12.750283241271973
    7. ',
' → logprob: -13.125283241271973
    8. '(' → logprob: -13.500283241271973
    9. '(q' → logprob: -14.000283241271973
    10. ',(' → logprob: -14.375283241271973

Token 284: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.016034485772252083
    2. ' b' → logprob: -4.1410346031188965
    3. '	b' → logprob: -15.641034126281738
    4. ')b' → logprob: -16.891035079956055
    5. '(b' → logprob: -17.141035079956055
    6. 'q' → logprob: -17.891035079956055
    7. '   ' → logprob: -18.016035079956055
    8. ' ' → logprob: -18.391035079956055
    9. 'a' → logprob: -18.641035079956055
    10. ' б' → logprob: -18.953535079956055

Token 285: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.03488196060061455
    2. ')' → logprob: -3.534882068634033
    3. '               ' → logprob: -5.284882068634033
    4. ')
' → logprob: -10.534881591796875
    5. '                   ' → logprob: -11.409881591796875
    6. '           ' → logprob: -12.534881591796875
    7. ' )
' → logprob: -12.659881591796875
    8. ')

' → logprob: -12.909881591796875
    9. '              ' → logprob: -14.784881591796875
    10. '<|end|>' → logprob: -14.784881591796875

Token 286: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0006838412955403328
    2. '
' → logprob: -8.125683784484863
    3. '           ' → logprob: -9.250683784484863
    4. '                   ' → logprob: -9.375683784484863
    5. '                
' → logprob: -9.875683784484863
    6. '       ' → logprob: -10.250683784484863
    7. ')' → logprob: -10.500683784484863
    8. ',' → logprob: -10.625683784484863
    9. '```' → logprob: -11.250683784484863
    10. '              ' → logprob: -11.250683784484863

Token 287: ' mark' (ID: 1983)
  Prédit: 'mark'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'mark' (adapté à ' mark') → logprob: -0.03805537521839142
    2. ' mark' → logprob: -3.288055419921875
    3. '               ' → logprob: -11.288055419921875
    4. '           ' → logprob: -14.038055419921875
    5. '                   ' → logprob: -14.663055419921875
    6. '   ' → logprob: -16.413055419921875
    7. 'v' → logprob: -18.163055419921875
    8. '       ' → logprob: -18.288055419921875
    9. '(mark' → logprob: -18.788055419921875
    10. '.mark' → logprob: -19.413055419921875

Token 288: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -4.320199877838604e-07
    2. 'visited' → logprob: -14.875
    3. ' _' → logprob: -17.125
    4. '_vis' → logprob: -18.375
    5. 'Visited' → logprob: -18.875
    6. ' visited' → logprob: -19.5
    7. 'v' → logprob: -20.25
    8. '_visit' → logprob: -20.25
    9. '\' → logprob: -20.5
    10. '_v' → logprob: -20.625

Token 289: 'visited' (ID: 52453)
  Prédit: 'visited'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.00026300468016415834
    2. '_' → logprob: -8.250263214111328
    3. ' visited' → logprob: -13.500263214111328
    4. 'v' → logprob: -15.625263214111328
    5. 'Visited' → logprob: -15.750263214111328
    6. 'visit' → logprob: -18.000263214111328
    7. 'visitor' → logprob: -19.875263214111328
    8. '```' → logprob: -20.500263214111328
    9. '(' → logprob: -21.000263214111328
    10. 'vist' → logprob: -21.000263214111328

Token 290: '(v' (ID: 6932)
  Prédit: '(v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(v' → logprob: -6.468279752880335e-05
    2. '(' → logprob: -9.750064849853516
    3. ' (' → logprob: -12.000064849853516
    4. '(q' → logprob: -16.125064849853516
    5. '(
' → logprob: -17.875064849853516
    6. '```' → logprob: -18.125064849853516
    7. 'v' → logprob: -18.250064849853516
    8. ')' → logprob: -19.000064849853516
    9. '(u' → logprob: -19.375064849853516
    10. ' v' → logprob: -20.250064849853516

Token 291: ',' (ID: 11)
  Prédit: '(v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(v' → logprob: -0.3908860981464386
    2. ',' → logprob: -1.1408860683441162
    3. '(' → logprob: -6.015886306762695
    4. ',v' → logprob: -6.765886306762695
    5. ')' → logprob: -8.140886306762695
    6. 'v' → logprob: -10.140886306762695
    7. ' (' → logprob: -10.390886306762695
    8. ' ,' → logprob: -10.640886306762695
    9. ' v' → logprob: -11.015886306762695
    10. '(q' → logprob: -12.640886306762695

Token 292: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.0067156096920371056
    2. ' b' → logprob: -5.006715774536133
    3. '	b' → logprob: -16.631715774536133
    4. '   ' → logprob: -16.881715774536133
    5. ')b' → logprob: -17.131715774536133
    6. ' ' → logprob: -17.381715774536133
    7. ')' → logprob: -18.256715774536133
    8. '(b' → logprob: -18.256715774536133
    9. ' б' → logprob: -18.506715774536133
    10. 'a' → logprob: -18.506715774536133

Token 293: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00035572313936427236
    2. ')
' → logprob: -8.00035572052002
    3. '<|end|>' → logprob: -11.37535572052002
    4. '())' → logprob: -12.50035572052002
    5. ')return' → logprob: -13.25035572052002
    6. ' )' → logprob: -13.75035572052002
    7. '()' → logprob: -14.25035572052002
    8. '
' → logprob: -15.00035572052002
    9. ')#' → logprob: -15.25035572052002
    10. ')

' → logprob: -15.50035572052002

Token 294: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 295: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.14753589034080505
    2. '   ' → logprob: -2.272535800933838
    3. ' return' → logprob: -3.647535800933838
    4. '<|end|>' → logprob: -5.022535800933838
    5. 'print' → logprob: -7.647535800933838
    6. ' ' → logprob: -8.022536277770996
    7. 'for' → logprob: -8.647536277770996
    8. '#' → logprob: -8.897536277770996
    9. 'def' → logprob: -9.522536277770996
    10. ' for' → logprob: -9.897536277770996

Token 296: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.00595522578805685
    2. ' a' → logprob: -5.130955219268799
    3. 'v' → logprob: -11.755955696105957
    4. 'b' → logprob: -12.005955696105957
    5. 'q' → logprob: -12.505955696105957
    6. '   ' → logprob: -13.130955696105957
    7. '[a' → logprob: -13.630955696105957
    8. '0' → logprob: -13.755955696105957
    9. ' ' → logprob: -14.255955696105957
    10. 'None' → logprob: -14.380955696105957

Token 297: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 298: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.15527813136577606
    2. '<|end|>' → logprob: -2.030278205871582
    3. '#' → logprob: -5.280278205871582
    4. '
' → logprob: -5.655278205871582
    5. '```' → logprob: -6.655278205871582
    6. '<|end|>' → logprob: -6.655278205871582
    7. 'b' → logprob: -7.530278205871582
    8. 'a' → logprob: -8.280278205871582
    9. ')' → logprob: -9.155278205871582
    10. '  
' → logprob: -9.530278205871582

Token 299: ' prepare' (ID: 13708)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.12346457690000534
    2. ' bfs' → logprob: -2.748464584350586
    3. 'main' → logprob: -3.748464584350586
    4. ' main' → logprob: -4.373464584350586
    5. 'dfs' → logprob: -4.498464584350586
    6. 'def' → logprob: -6.498464584350586
    7. 'find' → logprob: -6.873464584350586
    8. ' find' → logprob: -7.373464584350586
    9. ' dfs' → logprob: -7.623464584350586
    10. 'f' → logprob: -8.623464584350586

Token 300: '_vis' (ID: 113669)
  Prédit: '_tree'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_tree' → logprob: -0.4644237160682678
    2. '(tree' → logprob: -2.339423656463623
    3. '()' → logprob: -2.714423656463623
    4. '(' → logprob: -2.714423656463623
    5. '(n' → logprob: -2.964423656463623
    6. '_nodes' → logprob: -3.339423656463623
    7. '_' → logprob: -4.839423656463623
    8. '_for' → logprob: -4.839423656463623
    9. '_input' → logprob: -5.214423656463623
    10. '_b' → logprob: -5.464423656463623

Token 301: 'its' (ID: 1348)
  Prédit: 'ited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ited' → logprob: -0.011721274815499783
    2. 'it' → logprob: -4.511721134185791
    3. '_' → logprob: -7.761721134185791
    4. 'itor' → logprob: -9.51172161102295
    5. '(it' → logprob: -10.51172161102295
    6. '_it' → logprob: -10.51172161102295
    7. '(' → logprob: -11.01172161102295
    8. ' it' → logprob: -11.63672161102295
    9. '[' → logprob: -11.88672161102295
    10. '```' → logprob: -12.01172161102295

Token 302: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.06438125669956207
    2. '(' → logprob: -2.9393813610076904
    3. '():' → logprob: -5.189381122589111
    4. '(v' → logprob: -6.564381122589111
    5. '(_' → logprob: -7.439381122589111
    6. '():
' → logprob: -7.689381122589111
    7. '_' → logprob: -7.689381122589111
    8. '()' → logprob: -8.81438159942627
    9. '(s' → logprob: -9.18938159942627
    10. '(size' → logprob: -9.43938159942627

Token 303: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.07931593060493469
    2. '):
' → logprob: -2.5793159008026123
    3. ')' → logprob: -8.579316139221191
    4. ',' → logprob: -9.204316139221191
    5. '):
' → logprob: -10.204316139221191
    6. ' ):' → logprob: -10.829316139221191
    7. '(n' → logprob: -10.954316139221191
    8. '():' → logprob: -10.954316139221191
    9. '():
' → logprob: -11.204316139221191
    10. '   ' → logprob: -11.454316139221191

Token 304: ' a' (ID: 261)
  Prédit: 'tree'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tree' → logprob: -0.33350351452827454
    2. 'v' → logprob: -2.708503484725952
    3. ' tree' → logprob: -2.833503484725952
    4. 'a' → logprob: -3.083503484725952
    5. 'visited' → logprob: -4.083503723144531
    6. 'root' → logprob: -4.333503723144531
    7. 'start' → logprob: -4.458503723144531
    8. 'q' → logprob: -4.583503723144531
    9. 'k' → logprob: -4.583503723144531
    10. 'm' → logprob: -4.583503723144531

Token 305: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.17415732145309448
    2. '):' → logprob: -1.9241573810577393
    3. ',' → logprob: -4.29915714263916
    4. ')' → logprob: -8.54915714263916
    5. '):
' → logprob: -10.67415714263916
    6. '):

' → logprob: -11.17415714263916
    7. '=' → logprob: -12.92415714263916
    8. '_' → logprob: -13.17415714263916
    9. 'v' → logprob: -13.17415714263916
    10. 'a' → logprob: -13.17415714263916

Token 306: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0005029928870499134
    2. '    
' → logprob: -8.500502586364746
    3. 'v' → logprob: -9.500502586364746
    4. '
' → logprob: -9.625502586364746
    5. ' return' → logprob: -10.250502586364746
    6. '	return' → logprob: -10.500502586364746
    7. 'return' → logprob: -11.000502586364746
    8. '	v' → logprob: -11.125502586364746
    9. '   ' → logprob: -11.375502586364746
    10. '```' → logprob: -11.750502586364746

Token 307: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' (adapté à ' v') → logprob: -0.59909588098526
    2. 'return' → logprob: -0.97409588098526
    3. '   ' → logprob: -2.9740958213806152
    4. 'visited' → logprob: -4.099095821380615
    5. ' return' → logprob: -6.224095821380615
    6. 'def' → logprob: -6.724095821380615
    7. 'vis' → logprob: -7.224095821380615
    8. ' v' → logprob: -7.724095821380615
    9. 'a' → logprob: -8.224096298217773
    10. 'q' → logprob: -8.724096298217773

Token 308: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.17979532480239868
    2. ' =' → logprob: -1.804795265197754
    3. '=[' → logprob: -11.804795265197754
    4. ',' → logprob: -11.804795265197754
    5. '[' → logprob: -11.929795265197754
    6. '   ' → logprob: -12.179795265197754
    7. '=[]
' → logprob: -12.804795265197754
    8. '=create' → logprob: -12.804795265197754
    9. '=
' → logprob: -12.929795265197754
    10. ' ' → logprob: -13.054795265197754

Token 309: ' initialize' (ID: 18400)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0033281452488154173
    2. ' [' → logprob: -6.378328323364258
    3. '[a' → logprob: -6.503328323364258
    4. '[n' → logprob: -9.878328323364258
    5. 'initialize' → logprob: -10.878328323364258
    6. '   ' → logprob: -11.003328323364258
    7. '[b' → logprob: -12.128328323364258
    8. '[i' → logprob: -12.128328323364258
    9. '[-' → logprob: -12.128328323364258
    10. '[v' → logprob: -12.253328323364258

Token 310: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -8.73314929776825e-05
    2. 'visited' → logprob: -9.37508773803711
    3. '_vis' → logprob: -13.50008773803711
    4. '(' → logprob: -14.87508773803711
    5. 'Visited' → logprob: -15.37508773803711
    6. ' _' → logprob: -15.87508773803711
    7. '_v' → logprob: -16.00008773803711
    8. ' visited' → logprob: -16.87508773803711
    9. '_visit' → logprob: -16.87508773803711
    10. '_visible' → logprob: -17.00008773803711

Token 311: 'visited' (ID: 52453)
  Prédit: 'visited'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'visited' → logprob: -2.2200749754119897e-06
    2. ' visited' → logprob: -13.125001907348633
    3. '[' → logprob: -16.000001907348633
    4. 'Visited' → logprob: -17.625001907348633
    5. 'v' → logprob: -18.000001907348633
    6. 'vist' → logprob: -18.750001907348633
    7. '_' → logprob: -19.125001907348633
    8. '```' → logprob: -19.375001907348633
    9. 'visible' → logprob: -19.625001907348633
    10. '   ' → logprob: -19.875001907348633

Token 312: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -4.1318875446449965e-05
    2. '(' → logprob: -10.250041007995605
    3. 'n' → logprob: -12.250041007995605
    4. ' (' → logprob: -13.875041007995605
    5. ',n' → logprob: -16.500041961669922
    6. ',' → logprob: -16.750041961669922
    7. ' n' → logprob: -16.875041961669922
    8. ')' → logprob: -17.875041961669922
    9. '(
' → logprob: -18.000041961669922
    10. ')(' → logprob: -18.500041961669922

Token 313: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.07894795387983322
    2. ')' → logprob: -2.5789480209350586
    3. '())
' → logprob: -10.828948020935059
    4. ')
' → logprob: -10.953948020935059
    5. '()
' → logprob: -11.703948020935059
    6. ' )
' → logprob: -12.203948020935059
    7. '()' → logprob: -12.703948020935059
    8. ')

' → logprob: -13.078948020935059
    9. '   ' → logprob: -14.078948020935059
    10. '())' → logprob: -14.203948020935059

Token 314: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08070544898509979
    2. 'mark' → logprob: -2.705705404281616
    3. 'v' → logprob: -4.830705642700195
    4. ' mark' → logprob: -6.080705642700195
    5. '
' → logprob: -9.080705642700195
    6. '    
' → logprob: -9.830705642700195
    7. 'return' → logprob: -9.830705642700195
    8. '```' → logprob: -10.205705642700195
    9. ' v' → logprob: -10.330705642700195
    10. 'def' → logprob: -11.080705642700195

Token 315: ' mark' (ID: 1983)
  Prédit: 'mark'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'mark' (adapté à ' mark') → logprob: -0.004690591711550951
    2. 'enqueue' → logprob: -6.254690647125244
    3. 'v' → logprob: -6.754690647125244
    4. 'queue' → logprob: -7.129690647125244
    5. 'q' → logprob: -7.754690647125244
    6. 'return' → logprob: -8.754690170288086
    7. '   ' → logprob: -9.129690170288086
    8. ' mark' → logprob: -10.629690170288086
    9. 'from' → logprob: -11.879690170288086
    10. 'def' → logprob: -11.879690170288086

Token 316: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -1.5048530030981055e-06
    2. 'visited' → logprob: -13.750001907348633
    3. '_vis' → logprob: -15.250001907348633
    4. 'v' → logprob: -17.375001907348633
    5. '_visit' → logprob: -17.375001907348633
    6. '_v' → logprob: -18.250001907348633
    7. 'Visited' → logprob: -18.500001907348633
    8. ' visited' → logprob: -18.500001907348633
    9. '_mark' → logprob: -19.250001907348633
    10. '_visible' → logprob: -19.875001907348633

Token 317: 'visited' (ID: 52453)
  Prédit: 'visited'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'visited' → logprob: -9.627176768844947e-05
    2. 'v' → logprob: -9.500096321105957
    3. '_' → logprob: -11.500096321105957
    4. 'Visited' → logprob: -11.875096321105957
    5. ' visited' → logprob: -13.375096321105957
    6. 'vist' → logprob: -13.500096321105957
    7. 'vis' → logprob: -14.125096321105957
    8. 'visit' → logprob: -14.500096321105957
    9. '_vis' → logprob: -16.87509536743164
    10. '_v' → logprob: -17.00009536743164

Token 318: '(v' (ID: 6932)
  Prédit: '(v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(v' → logprob: -0.0008060562540777028
    2. '(' → logprob: -7.125805854797363
    3. ' (' → logprob: -13.750805854797363
    4. '(vis' → logprob: -15.000805854797363
    5. '```' → logprob: -16.50080680847168
    6. '<|end|>' → logprob: -17.37580680847168
    7. '(
' → logprob: -17.50080680847168
    8. '()' → logprob: -17.87580680847168
    9. ',' → logprob: -18.00080680847168
    10. ',v' → logprob: -18.00080680847168

Token 319: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0006791924242861569
    2. '(v' → logprob: -7.875679016113281
    3. ' ,' → logprob: -8.375679016113281
    4. ',v' → logprob: -10.250679016113281
    5. ')' → logprob: -11.000679016113281
    6. '(' → logprob: -11.375679016113281
    7. '(a' → logprob: -13.250679016113281
    8. ' (' → logprob: -13.500679016113281
    9. ',a' → logprob: -14.625679016113281
    10. '),' → logprob: -15.250679016113281

Token 320: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.16022635996341705
    2. ' a' → logprob: -1.9102263450622559
    3. '	a' → logprob: -14.035226821899414
    4. ')a' → logprob: -14.160226821899414
    5. '(a' → logprob: -14.660226821899414
    6. ' ' → logprob: -16.535226821899414
    7. '[a' → logprob: -16.660226821899414
    8. ')' → logprob: -17.035226821899414
    9. '   ' → logprob: -17.285226821899414
    10. '_a' → logprob: -17.660226821899414

Token 321: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002196763874962926
    2. ')
' → logprob: -6.127196788787842
    3. ' )' → logprob: -12.002196311950684
    4. '   ' → logprob: -12.377196311950684
    5. ',' → logprob: -14.502196311950684
    6. ')
' → logprob: -15.127196311950684
    7. ')

' → logprob: -15.252196311950684
    8. ')return' → logprob: -16.627197265625
    9. '),' → logprob: -16.752197265625
    10. ' )
' → logprob: -16.752197265625

Token 322: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00025954778539016843
    2. 'return' → logprob: -8.625259399414062
    3. 'def' → logprob: -10.000259399414062
    4. '	return' → logprob: -11.125259399414062
    5. '<|end|>' → logprob: -11.750259399414062
    6. ' return' → logprob: -12.000259399414062
    7. '       ' → logprob: -13.875259399414062
    8. '```' → logprob: -14.000259399414062
    9. ' ' → logprob: -14.125259399414062
    10. '    
' → logprob: -14.375259399414062

Token 323: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.15784533321857452
    2. 'q' → logprob: -2.1578452587127686
    3. '   ' → logprob: -3.9078452587127686
    4. ' return' → logprob: -5.407845497131348
    5. 'def' → logprob: -6.532845497131348
    6. 'for' → logprob: -7.157845497131348
    7. 'a' → logprob: -7.282845497131348
    8. 'while' → logprob: -7.282845497131348
    9. ' ' → logprob: -7.782845497131348
    10. 'd' → logprob: -7.782845497131348

Token 324: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.10021055489778519
    2. ' v' → logprob: -2.350210666656494
    3. '(v' → logprob: -12.600210189819336
    4. '	v' → logprob: -15.100210189819336
    5. '[v' → logprob: -16.225210189819336
    6. ' ' → logprob: -16.475210189819336
    7. ' (' → logprob: -17.350210189819336
    8. ' ' → logprob: -18.600210189819336
    9. '(' → logprob: -18.725210189819336
    10. '   ' → logprob: -18.850210189819336

Token 325: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 326: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0025298797991126776
    2. '<|end|>' → logprob: -6.002530097961426
    3. '```' → logprob: -10.377530097961426
    4. '<|end|>' → logprob: -11.752530097961426
    5. ')' → logprob: -12.127530097961426
    6. '
' → logprob: -12.877530097961426
    7. ' def' → logprob: -13.127530097961426
    8. '#' → logprob: -13.377530097961426
    9. '(defun' → logprob: -14.877530097961426
    10. 'ndef' → logprob: -15.252530097961426

Token 327: ' bfs' (ID: 147571)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.3569059371948242
    2. 'dfs' → logprob: -2.231905937194824
    3. 'find' → logprob: -2.606905937194824
    4. ' bfs' → logprob: -2.606905937194824
    5. 'def' → logprob: -4.481905937194824
    6. ' find' → logprob: -4.981905937194824
    7. 'get' → logprob: -5.731905937194824
    8. 'second' → logprob: -5.731905937194824
    9. 'prepare' → logprob: -5.856905937194824
    10. 'l' → logprob: -6.106905937194824

Token 328: '_second' (ID: 67724)
  Prédit: '_second'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_second' → logprob: -0.037194427102804184
    2. '_last' → logprob: -3.5371944904327393
    3. '_first' → logprob: -5.66219425201416
    4. '(tree' → logprob: -6.16219425201416
    5. '_next' → logprob: -7.28719425201416
    6. '_final' → logprob: -8.03719425201416
    7. '_' → logprob: -8.41219425201416
    8. '_(' → logprob: -8.66219425201416
    9. '_tree' → logprob: -9.53719425201416
    10. '_two' → logprob: -9.91219425201416

Token 329: '(tree' (ID: 44909)
  Prédit: '(tree'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(tree' → logprob: -0.0007143391412682831
    2. '(' → logprob: -7.250714302062988
    3. '(Tree' → logprob: -13.125714302062988
    4. ' (' → logprob: -13.500714302062988
    5. '(t' → logprob: -14.500714302062988
    6. '(team' → logprob: -16.125715255737305
    7. '(tr' → logprob: -16.250715255737305
    8. '(queue' → logprob: -16.500715255737305
    9. '(train' → logprob: -17.250715255737305
    10. '(table' → logprob: -17.250715255737305

Token 330: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.8624639324116288e-06
    2. ' ,' → logprob: -13.500001907348633
    3. ',n' → logprob: -15.000001907348633
    4. ',
' → logprob: -16.500001907348633
    5. 'n' → logprob: -18.625001907348633
    6. '   ' → logprob: -18.875001907348633
    7. ',t' → logprob: -19.500001907348633
    8. ',

' → logprob: -19.875001907348633
    9. '‌,' → logprob: -19.875001907348633
    10. '(tree' → logprob: -20.000001907348633

Token 331: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.47428497672080994
    2. 'n' → logprob: -0.9742850065231323
    3. '   ' → logprob: -9.724285125732422
    4. 'tree' → logprob: -10.349285125732422
    5. 'a' → logprob: -10.724285125732422
    6. ',' → logprob: -10.974285125732422
    7. 'v' → logprob: -11.474285125732422
    8. ' a' → logprob: -11.599285125732422
    9. ' tree' → logprob: -11.599285125732422
    10. ' ' → logprob: -11.849285125732422

Token 332: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.981667537620524e-06
    2. ' ,' → logprob: -13.625001907348633
    3. ',a' → logprob: -14.375001907348633
    4. '   ' → logprob: -16.375001907348633
    5. ',
' → logprob: -17.000001907348633
    6. 'a' → logprob: -17.875001907348633
    7. '):
' → logprob: -19.625001907348633
    8. 'def' → logprob: -19.875001907348633
    9. '):' → logprob: -20.250001907348633
    10. '‌,' → logprob: -20.375001907348633

Token 333: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.0346013642847538
    2. ' a' → logprob: -3.4096014499664307
    3. 'start' → logprob: -7.784601211547852
    4. 'v' → logprob: -8.034601211547852
    5. ' start' → logprob: -9.284601211547852
    6. ' v' → logprob: -9.784601211547852
    7. 's' → logprob: -11.159601211547852
    8. 'visited' → logprob: -11.909601211547852
    9. ')' → logprob: -12.034601211547852
    10. 'node' → logprob: -12.159601211547852

Token 334: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.004998328629881144
    2. '):' → logprob: -5.879998207092285
    3. '):
' → logprob: -6.129998207092285
    4. '   ' → logprob: -12.379998207092285
    5. ' ,' → logprob: -12.504998207092285
    6. ',v' → logprob: -12.629998207092285
    7. ')' → logprob: -13.754998207092285
    8. '):
' → logprob: -13.879998207092285
    9. '):

' → logprob: -14.379998207092285
    10. ',
' → logprob: -15.879998207092285

Token 335: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2617938816547394
    2. 'q' → logprob: -1.636793851852417
    3. 'v' → logprob: -3.636793851852417
    4. ' q' → logprob: -4.761794090270996
    5. ' v' → logprob: -7.386794090270996
    6. '	q' → logprob: -9.386794090270996
    7. ' ' → logprob: -10.011794090270996
    8. 'a' → logprob: -10.636794090270996
    9. '```' → logprob: -10.761794090270996
    10. 'def' → logprob: -11.386794090270996

Token 336: ' q' (ID: 2335)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' (adapté à ' q') → logprob: -0.038294050842523575
    2. 'a' → logprob: -4.163293838500977
    3. 'v' → logprob: -4.413293838500977
    4. 'd' → logprob: -5.288293838500977
    5. 'dist' → logprob: -6.413293838500977
    6. '   ' → logprob: -6.913293838500977
    7. 'distance' → logprob: -7.538293838500977
    8. 'max' → logprob: -7.663293838500977
    9. 'queue' → logprob: -8.538293838500977
    10. 'visited' → logprob: -9.038293838500977

Token 337: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.25193020701408386
    2. ' =' → logprob: -1.5019302368164062
    3. '=create' → logprob: -13.876930236816406
    4. ')' → logprob: -16.126930236816406
    5. '=
' → logprob: -16.376930236816406
    6. ' ' → logprob: -17.001930236816406
    7. '   ' → logprob: -17.376930236816406
    8. ' =
' → logprob: -17.501930236816406
    9. ',' → logprob: -17.876930236816406
    10. '=

' → logprob: -18.501930236816406

Token 338: ' create' (ID: 2501)
  Prédit: 'create'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'create' → logprob: -0.1269349306821823
    2. ' create' → logprob: -2.1269350051879883
    3. 'queue' → logprob: -12.251935005187988
    4. ' queue' → logprob: -14.376935005187988
    5. ' ' → logprob: -14.501935005187988
    6. '	create' → logprob: -15.251935005187988
    7. '(create' → logprob: -15.251935005187988
    8. '   ' → logprob: -15.251935005187988
    9. '.create' → logprob: -16.126934051513672
    10. '=create' → logprob: -16.501934051513672

Token 339: '_queue' (ID: 25622)
  Prédit: '_queue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_queue' → logprob: -0.004153076093643904
    2. '()' → logprob: -5.879153251647949
    3. 'Queue' → logprob: -7.129153251647949
    4. '(queue' → logprob: -8.25415325164795
    5. 'queue' → logprob: -8.62915325164795
    6. '()
' → logprob: -10.25415325164795
    7. ' queue' → logprob: -11.12915325164795
    8. 'q' → logprob: -11.12915325164795
    9. '_q' → logprob: -11.12915325164795
    10. '(q' → logprob: -11.75415325164795

Token 340: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.6730147004127502
    2. '()
' → logprob: -1.2980146408081055
    3. '   ' → logprob: -1.5480146408081055
    4. ')' → logprob: -5.7980146408081055
    5. ')
' → logprob: -7.5480146408081055
    6. '(q' → logprob: -9.423014640808105
    7. '()
' → logprob: -9.673014640808105
    8. '
' → logprob: -9.798014640808105
    9. ',' → logprob: -9.923014640808105
    10. '())' → logprob: -10.048014640808105

Token 341: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12797020375728607
    2. 'enqueue' → logprob: -2.1279702186584473
    3. '.enqueue' → logprob: -8.002969741821289
    4. '_enqueue' → logprob: -8.502969741821289
    5. '    
' → logprob: -8.502969741821289
    6. '
' → logprob: -9.127969741821289
    7. ' enqueue' → logprob: -9.252969741821289
    8. '```' → logprob: -10.627969741821289
    9. 'en' → logprob: -11.127969741821289
    10. 'q' → logprob: -11.627969741821289

Token 342: ' enqueue' (ID: 117229)
  Prédit: 'enqueue'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'enqueue' (adapté à ' enqueue') → logprob: -0.00014764121442567557
    2. ' enqueue' → logprob: -9.375147819519043
    3. '   ' → logprob: -10.000147819519043
    4. 'en' → logprob: -11.375147819519043
    5. '.enqueue' → logprob: -12.500147819519043
    6. 'q' → logprob: -13.875147819519043
    7. '_enqueue' → logprob: -13.875147819519043
    8. '```' → logprob: -16.000146865844727
    9. 'queue' → logprob: -16.125146865844727
    10. 'a' → logprob: -17.625146865844727

Token 343: '(q' (ID: 21479)
  Prédit: '(q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(q' → logprob: -9.088346359931165e-07
    2. '(' → logprob: -14.000000953674316
    3. '(queue' → logprob: -17.75
    4. 'q' → logprob: -18.75
    5. '(
' → logprob: -19.875
    6. ' (' → logprob: -20.125
    7. '<|end|>' → logprob: -21.125
    8. '```' → logprob: -21.375
    9. '[q' → logprob: -21.625
    10. ',q' → logprob: -21.875

Token 344: ',' (ID: 11)
  Prédit: '(q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(q' → logprob: -0.10121738910675049
    2. ',' → logprob: -2.351217269897461
    3. '(' → logprob: -7.226217269897461
    4. ',q' → logprob: -8.226217269897461
    5. ' ,' → logprob: -11.726217269897461
    6. ' (' → logprob: -12.476217269897461
    7. ')' → logprob: -13.476217269897461
    8. '),' → logprob: -14.226217269897461
    9. '(queue' → logprob: -14.851217269897461
    10. '   ' → logprob: -15.101217269897461

Token 345: ' [' (ID: 723)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.056131359189748764
    2. 'q' → logprob: -2.931131362915039
    3. ' a' → logprob: -6.806131362915039
    4. ' q' → logprob: -8.931131362915039
    5. '(q' → logprob: -12.431131362915039
    6. '(a' → logprob: -13.306131362915039
    7. '	a' → logprob: -14.431131362915039
    8. ' ' → logprob: -14.431131362915039
    9. '	q' → logprob: -14.993631362915039
    10. '   ' → logprob: -15.181131362915039

Token 346: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -3.011373155459296e-05
    2. '0' → logprob: -12.000030517578125
    3. ' a' → logprob: -12.000030517578125
    4. 'b' → logprob: -12.250030517578125
    5. '[a' → logprob: -12.750030517578125
    6. '(a' → logprob: -13.250030517578125
    7. '[' → logprob: -13.375030517578125
    8. '
' → logprob: -14.000030517578125
    9. '(' → logprob: -14.000030517578125
    10. 'tree' → logprob: -14.125030517578125

Token 347: ',' (ID: 11)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.22774529457092285
    2. ',' → logprob: -1.6027452945709229
    3. ']' → logprob: -6.727745056152344
    4. ')' → logprob: -7.977745056152344
    5. '])
' → logprob: -7.977745056152344
    6. ' ])' → logprob: -8.102745056152344
    7. '   ' → logprob: -10.602745056152344
    8. ',
' → logprob: -10.727745056152344
    9. ' ,' → logprob: -11.227745056152344
    10. ']);' → logprob: -11.477745056152344

Token 348: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0016011487459763885
    2. ' ' → logprob: -6.876601219177246
    3. '1' → logprob: -7.626601219177246
    4. 'a' → logprob: -10.251601219177246
    5. '-' → logprob: -11.001601219177246
    6. '   ' → logprob: -12.376601219177246
    7. '[' → logprob: -12.439101219177246
    8. 'None' → logprob: -12.564101219177246
    9. '2' → logprob: -12.814101219177246
    10. 'b' → logprob: -13.064101219177246

Token 349: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00048310417332686484
    2. ' ' → logprob: -8.500483512878418
    3. '1' → logprob: -8.625483512878418
    4. 'a' → logprob: -10.250483512878418
    5. '-' → logprob: -10.250483512878418
    6. '[' → logprob: -12.125483512878418
    7. '(' → logprob: -12.437983512878418
    8. '
' → logprob: -12.875483512878418
    9. 'None' → logprob: -13.000483512878418
    10. '   ' → logprob: -13.437983512878418

Token 350: '])
' (ID: 5169)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.0009774327045306563
    2. '])
' → logprob: -7.000977516174316
    3. ')' → logprob: -10.125977516174316
    4. ']' → logprob: -11.500977516174316
    5. ' ])' → logprob: -12.000977516174316
    6. '])

' → logprob: -12.750977516174316
    7. '])
' → logprob: -12.750977516174316
    8. ')]' → logprob: -14.000977516174316
    9. ',' → logprob: -14.125977516174316
    10. ')
' → logprob: -14.750977516174316

Token 351: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02335425838828087
    2. 'v' → logprob: -4.0233540534973145
    3. ' v' → logprob: -5.7733540534973145
    4. '
' → logprob: -6.2733540534973145
    5. '	v' → logprob: -9.273354530334473
    6. '    
' → logprob: -10.648354530334473
    7. ' ' → logprob: -10.648354530334473
    8. ' while' → logprob: -11.023354530334473
    9. 'while' → logprob: -11.773354530334473
    10. ' 
' → logprob: -12.273354530334473

Token 352: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' (adapté à ' v') → logprob: -0.0014635729603469372
    2. ' v' → logprob: -6.751463413238525
    3. '   ' → logprob: -8.751463890075684
    4. 'visited' → logprob: -9.251463890075684
    5. 'while' → logprob: -10.501463890075684
    6. '
' → logprob: -13.126463890075684
    7. ' ' → logprob: -13.251463890075684
    8. 'vis' → logprob: -13.751463890075684
    9. ' while' → logprob: -13.876463890075684
    10. 'def' → logprob: -13.876463890075684

Token 353: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.048659466207027435
    2. '=' → logprob: -3.048659563064575
    3. ',' → logprob: -9.548659324645996
    4. ')' → logprob: -15.673659324645996
    5. ' ,' → logprob: -15.798659324645996
    6. '[' → logprob: -15.798659324645996
    7. ' ' → logprob: -16.173660278320312
    8. '  ' → logprob: -16.548660278320312
    9. ' =
' → logprob: -17.298660278320312
    10. ' ' → logprob: -17.298660278320312

Token 354: ' prepare' (ID: 13708)
  Prédit: 'initialize'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'initialize' → logprob: -0.23109310865402222
    2. 'prepare' → logprob: -2.481093168258667
    3. ' initialize' → logprob: -2.731093168258667
    4. ' prepare' → logprob: -2.856093168258667
    5. ' ' → logprob: -11.356093406677246
    6. '[' → logprob: -11.731093406677246
    7. '   ' → logprob: -11.981093406677246
    8. '	initialize' → logprob: -11.981093406677246
    9. ' [' → logprob: -13.231093406677246
    10. '  ' → logprob: -13.356093406677246

Token 355: '_vis' (ID: 113669)
  Prédit: '_vis'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_vis' → logprob: -0.00044151677866466343
    2. 'vis' → logprob: -7.750441551208496
    3. '(vis' → logprob: -12.125441551208496
    4. '_' → logprob: -12.875441551208496
    5. 'visited' → logprob: -14.250441551208496
    6. '_VIS' → logprob: -14.750441551208496
    7. 's' → logprob: -14.875441551208496
    8. '```' → logprob: -14.875441551208496
    9. 'Vis' → logprob: -16.00044059753418
    10. '_visit' → logprob: -16.12544059753418

Token 356: 'its' (ID: 1348)
  Prédit: 'its'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'its' → logprob: -0.03430664911866188
    2. 'ited' → logprob: -3.409306764602661
    3. 'it' → logprob: -8.534306526184082
    4. '(' → logprob: -9.284306526184082
    5. '[' → logprob: -9.409306526184082
    6. '
' → logprob: -10.409306526184082
    7. 'isted' → logprob: -10.659306526184082
    8. '_' → logprob: -10.784306526184082
    9. 'ists' → logprob: -10.909306526184082
    10. 's' → logprob: -11.034306526184082

Token 357: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -1.664371848164592e-05
    2. '(' → logprob: -11.125016212463379
    3. ' (' → logprob: -13.500016212463379
    4. '(v' → logprob: -15.125016212463379
    5. '```' → logprob: -16.750017166137695
    6. '(tree' → logprob: -17.750017166137695
    7. '(
' → logprob: -18.125017166137695
    8. 'n' → logprob: -18.375017166137695
    9. '(q' → logprob: -18.750017166137695
    10. '((' → logprob: -18.875017166137695

Token 358: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.011599683202803135
    2. '(n' → logprob: -4.511599540710449
    3. ',n' → logprob: -7.636599540710449
    4. 'n' → logprob: -9.76159954071045
    5. ' ,' → logprob: -11.63659954071045
    6. '(' → logprob: -13.51159954071045
    7. ',
' → logprob: -14.38659954071045
    8. ' (' → logprob: -15.01159954071045
    9. ' n' → logprob: -15.63659954071045
    10. '```' → logprob: -15.76159954071045

Token 359: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.003178071230649948
    2. ' a' → logprob: -5.753178119659424
    3. '	a' → logprob: -16.378177642822266
    4. '   ' → logprob: -16.503177642822266
    5. '(a' → logprob: -16.503177642822266
    6. ')a' → logprob: -17.003177642822266
    7. ' ' → logprob: -17.503177642822266
    8. '_a' → logprob: -19.003177642822266
    9. ')' → logprob: -19.128177642822266
    10. '#a' → logprob: -20.003177642822266

Token 360: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3132685720920563
    2. ')
' → logprob: -1.3132685422897339
    3. ')
' → logprob: -12.563268661499023
    4. ')

' → logprob: -12.938268661499023
    5. '   ' → logprob: -14.188268661499023
    6. ' )
' → logprob: -16.313268661499023
    7. ' )' → logprob: -16.438268661499023
    8. ' ' → logprob: -17.438268661499023
    9. ')
/' → logprob: -17.688268661499023
    10. '),' → logprob: -17.813268661499023

Token 361: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01573014445602894
    2. 'while' → logprob: -4.515730381011963
    3. ' while' → logprob: -5.390730381011963
    4. '
' → logprob: -9.890729904174805
    5. '```' → logprob: -9.890729904174805
    6. '    
' → logprob: -12.140729904174805
    7. '	while' → logprob: -12.140729904174805
    8. '``' → logprob: -14.765729904174805
    9. ' ' → logprob: -16.265729904174805
    10. '   ' → logprob: -16.390729904174805

Token 362: ' last' (ID: 2174)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.9106022119522095
    2. 'max' → logprob: -1.4106022119522095
    3. 'while' → logprob: -2.03560209274292
    4. 'ans' → logprob: -2.41060209274292
    5. 'last' (adapté à ' last') → logprob: -2.91060209274292
    6. 'f' → logprob: -3.66060209274292
    7. 'd' → logprob: -4.28560209274292
    8. 'result' → logprob: -4.41060209274292
    9. 'dist' → logprob: -4.66060209274292
    10. 'far' → logprob: -5.03560209274292

Token 363: ' =' (ID: 314)
  Prédit: '_node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_node' → logprob: -0.21119505167007446
    2. ' =' → logprob: -2.3361949920654297
    3. '_' → logprob: -2.8361949920654297
    4. '=' → logprob: -4.58619499206543
    5. '_item' → logprob: -4.58619499206543
    6. ',' → logprob: -4.58619499206543
    7. 'node' → logprob: -6.96119499206543
    8. '_element' → logprob: -6.96119499206543
    9. '_a' → logprob: -8.33619499206543
    10. ' ' → logprob: -8.58619499206543

Token 364: ' None' (ID: 4662)
  Prédit: '[a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[a' → logprob: -0.7541181445121765
    2. 'a' → logprob: -1.6291182041168213
    3. '0' → logprob: -2.0041182041168213
    4. '1' → logprob: -2.2541182041168213
    5. '[' → logprob: -2.8791182041168213
    6. ' [' → logprob: -4.379117965698242
    7. ' a' → logprob: -5.129117965698242
    8. 'None' → logprob: -5.129117965698242
    9. ' ' → logprob: -5.254117965698242
    10. '(a' → logprob: -5.379117965698242

Token 365: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.17252598702907562
    2. '   ' → logprob: -2.2975258827209473
    3. '	while' → logprob: -3.2975258827209473
    4. '	
' → logprob: -4.297525882720947
    5. ' while' → logprob: -5.672525882720947
    6. '    
' → logprob: -7.172525882720947
    7. 'while' → logprob: -7.422525882720947
    8. '  
' → logprob: -7.797525882720947
    9. ' 
' → logprob: -8.047526359558105
    10. '```' → logprob: -8.047526359558105

Token 366: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10495054721832275
    2. '	while' → logprob: -2.479950428009033
    3. '
' → logprob: -4.479950428009033
    4. ' while' → logprob: -5.854950428009033
    5. '	
' → logprob: -7.479950428009033
    6. 'while' → logprob: -7.604950428009033
    7. '    
' → logprob: -8.104950904846191
    8. ' ' → logprob: -9.854950904846191
    9. '```' → logprob: -10.354950904846191
    10. ',' → logprob: -10.479950904846191

Token 367: ' while' (ID: 2049)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' (adapté à ' while') → logprob: -0.10778052359819412
    2. ' while' → logprob: -2.8577804565429688
    3. '   ' → logprob: -3.1077804565429688
    4. '	while' → logprob: -9.482780456542969
    5. ' ' → logprob: -13.607780456542969
    6. '```' → logprob: -14.107780456542969
    7. 'While' → logprob: -14.982780456542969
    8. '  ' → logprob: -15.107780456542969
    9. '
' → logprob: -15.232780456542969
    10. '   ' → logprob: -16.60778045654297

Token 368: ' not' (ID: 625)
  Prédit: ' not'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.16035988926887512
    2. 'not' → logprob: -1.9103598594665527
    3. '(not' → logprob: -9.160360336303711
    4. '   ' → logprob: -10.785360336303711
    5. '	not' → logprob: -13.035360336303711
    6. 'True' → logprob: -13.410360336303711
    7. 'q' → logprob: -13.660360336303711
    8. ' (' → logprob: -13.910360336303711
    9. 'n' → logprob: -14.410360336303711
    10. '!' → logprob: -14.410360336303711

Token 369: ' q' (ID: 2335)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.42886680364608765
    2. ' q' → logprob: -1.0538668632507324
    3. 'queue' → logprob: -9.428866386413574
    4. '	q' → logprob: -10.678866386413574
    5. ' queue' → logprob: -11.178866386413574
    6. '(q' → logprob: -11.553866386413574
    7. '   ' → logprob: -12.053866386413574
    8. ' ' → logprob: -12.178866386413574
    9. '_q' → logprob: -12.303866386413574
    10. ' ' → logprob: -12.366366386413574

Token 370: '.empty' (ID: 18962)
  Prédit: '.empty'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.empty' → logprob: -0.00021390743495430797
    2. '.' → logprob: -8.500213623046875
    3. ' .' → logprob: -12.125213623046875
    4. '.q' → logprob: -13.125213623046875
    5. '.em' → logprob: -13.750213623046875
    6. 'empty' → logprob: -13.750213623046875
    7. '.emp' → logprob: -15.000213623046875
    8. '.Empty' → logprob: -16.125213623046875
    9. '.e' → logprob: -16.625213623046875
    10. '.EMPTY' → logprob: -17.125213623046875

Token 371: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.001183204003609717
    2. '():
' → logprob: -6.751183032989502
    3. '()' → logprob: -11.50118350982666
    4. '():
' → logprob: -13.37618350982666
    5. ' ():' → logprob: -14.25118350982666
    6. '():

' → logprob: -14.75118350982666
    7. ':' → logprob: -15.25118350982666
    8. '(),' → logprob: -17.751182556152344
    9. '()):
' → logprob: -18.626182556152344
    10. '(' → logprob: -18.876182556152344

Token 372: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.20256303250789642
    2. '   ' → logprob: -1.7025630474090576
    3. '	   ' → logprob: -7.8275628089904785
    4. '    ' → logprob: -8.452563285827637
    5. '	a' → logprob: -9.327563285827637
    6. '	' → logprob: -9.327563285827637
    7. 'a' → logprob: -9.702563285827637
    8. '```' → logprob: -9.827563285827637
    9. '   ' → logprob: -10.202563285827637
    10. ' a' → logprob: -10.452563285827637

Token 373: ' a' (ID: 261)
  Prédit: 'node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'node' → logprob: -0.7438734173774719
    2. 'a' (adapté à ' a') → logprob: -0.9938734173774719
    3. 'current' → logprob: -2.618873357772827
    4. 'curr' → logprob: -2.993873357772827
    5. '   ' → logprob: -4.868873596191406
    6. 'cur' → logprob: -5.118873596191406
    7. ' node' → logprob: -5.243873596191406
    8. 'item' → logprob: -5.993873596191406
    9. 'x' → logprob: -6.118873596191406
    10. 'u' → logprob: -6.243873596191406

Token 374: '_item' (ID: 12070)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.7216082215309143
    2. ',' → logprob: -0.8466082215309143
    3. ' =' → logprob: -2.4716081619262695
    4. ')' → logprob: -8.72160816192627
    5. ' ,' → logprob: -8.72160816192627
    6. '   ' → logprob: -8.72160816192627
    7. '[' → logprob: -10.09660816192627
    8. ')=' → logprob: -10.34660816192627
    9. ',q' → logprob: -11.09660816192627
    10. ']' → logprob: -11.09660816192627

Token 375: ' =' (ID: 314)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.03065633401274681
    2. '=' → logprob: -3.530656337738037
    3. ' =' → logprob: -7.405656337738037
    4. ' ,' → logprob: -8.780655860900879
    5. 'a' → logprob: -9.530655860900879
    6. '[' → logprob: -11.155655860900879
    7. ',q' → logprob: -11.530655860900879
    8. 's' → logprob: -11.905655860900879
    9. ',a' → logprob: -12.030655860900879
    10. ')' → logprob: -12.280655860900879

Token 376: ' dequeue' (ID: 118122)
  Prédit: ' dequeue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' dequeue' → logprob: -0.2815735936164856
    2. 'de' → logprob: -1.4065735340118408
    3. 'deque' → logprob: -8.656573295593262
    4. '.dequeue' → logprob: -8.656573295593262
    5. ' deque' → logprob: -10.656573295593262
    6. 'q' → logprob: -11.156573295593262
    7. 'enqueue' → logprob: -11.281573295593262
    8. 'queue' → logprob: -11.406573295593262
    9. ' de' → logprob: -12.031573295593262
    10. ' queue' → logprob: -13.406573295593262

Token 377: '(q' (ID: 21479)
  Prédit: '(q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(q' → logprob: -1.5048530030981055e-06
    2. '(' → logprob: -13.625001907348633
    3. '[q' → logprob: -16.000001907348633
    4. '(queue' → logprob: -16.250001907348633
    5. ' (' → logprob: -17.750001907348633
    6. '(
' → logprob: -17.750001907348633
    7. '(u' → logprob: -18.500001907348633
    8. 'q' → logprob: -19.000001907348633
    9. '<|end|>' → logprob: -19.000001907348633
    10. '?q' → logprob: -19.125001907348633

Token 378: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.04873906075954437
    2. ')' → logprob: -3.048738956451416
    3. ')
' → logprob: -9.173739433288574
    4. ' )
' → logprob: -11.048739433288574
    5. '   ' → logprob: -11.548739433288574
    6. ')[' → logprob: -11.798739433288574
    7. '(q' → logprob: -11.923739433288574
    8. '       ' → logprob: -13.173739433288574
    9. '[q' → logprob: -13.173739433288574
    10. ')

' → logprob: -13.423739433288574

Token 379: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.748972475528717
    2. '[' → logprob: -1.6239724159240723
    3. '       ' → logprob: -1.7489724159240723
    4. '
' → logprob: -2.7489724159240723
    5. ',' → logprob: -3.2489724159240723
    6. ' a' → logprob: -4.373972415924072
    7. 'a' → logprob: -4.498972415924072
    8. ' 
' → logprob: -4.623972415924072
    9. '[a' → logprob: -4.998972415924072
    10. '[
' → logprob: -5.373972415924072

Token 380: ' node' (ID: 4596)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.03030366636812687
    2. 'node' (adapté à ' node') → logprob: -4.280303478240967
    3. ' a' → logprob: -4.780303478240967
    4. 'for' → logprob: -5.530303478240967
    5. ' node' → logprob: -6.655303478240967
    6. '   ' → logprob: -7.155303478240967
    7. ' for' → logprob: -7.280303478240967
    8. 'current' → logprob: -7.905303478240967
    9. '[a' → logprob: -8.155303955078125
    10. '[node' → logprob: -9.155303955078125

Token 381: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.15685339272022247
    2. '=' → logprob: -2.406853437423706
    3. ' =' → logprob: -2.906853437423706
    4. ' ,' → logprob: -8.406853675842285
    5. ',index' → logprob: -10.406853675842285
    6. '[' → logprob: -10.781853675842285
    7. ',node' → logprob: -10.781853675842285
    8. '   ' → logprob: -10.906853675842285
    9. ')' → logprob: -11.156853675842285
    10. '=node' → logprob: -11.781853675842285

Token 382: ' depth' (ID: 13636)
  Prédit: 'dist'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dist' → logprob: -0.7626075744628906
    2. 'depth' → logprob: -0.8876075744628906
    3. 'distance' → logprob: -3.0126075744628906
    4. ' dist' → logprob: -3.5126075744628906
    5. 'length' → logprob: -4.137607574462891
    6. 'level' → logprob: -4.637607574462891
    7. ' depth' → logprob: -4.637607574462891
    8. ' distance' → logprob: -6.137607574462891
    9. 'd' → logprob: -6.137607574462891
    10. ' length' → logprob: -6.887607574462891

Token 383: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.06197318062186241
    2. ' =' → logprob: -2.8119730949401855
    3. ',' → logprob: -12.436973571777344
    4. ')' → logprob: -15.186973571777344
    5. ' ' → logprob: -15.186973571777344
    6. ')=' → logprob: -15.311973571777344
    7. '=a' → logprob: -16.061973571777344
    8. '=

' → logprob: -16.686973571777344
    9. '=user' → logprob: -16.811973571777344
    10. '[' → logprob: -17.061973571777344

Token 384: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.1269282102584839
    2. ' a' → logprob: -2.1269283294677734
    3. '	a' → logprob: -15.751928329467773
    4. ' 
' → logprob: -18.501928329467773
    5. '*a' → logprob: -18.501928329467773
    6. '
' → logprob: -19.126928329467773
    7. '(a' → logprob: -19.376928329467773
    8. ' ' → logprob: -19.501928329467773
    9. ' ' → logprob: -19.626928329467773
    10. '_a' → logprob: -19.626928329467773

Token 385: '_item' (ID: 12070)
  Prédit: '_item'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_item' → logprob: -6.749814019713085e-06
    2. ' _' → logprob: -13.125006675720215
    3. '[' → logprob: -13.500006675720215
    4. '_items' → logprob: -14.250006675720215
    5. 'item' → logprob: -14.250006675720215
    6. '_ITEM' → logprob: -14.750006675720215
    7. '_' → logprob: -15.125006675720215
    8. 'Item' → logprob: -15.250006675720215
    9. '_
' → logprob: -15.625006675720215
    10. '_Item' → logprob: -16.00000762939453

Token 386: '[' (ID: 58)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 387: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00010485442908247933
    2. ' ' → logprob: -9.250104904174805
    3. '1' → logprob: -12.250104904174805
    4. '
' → logprob: -13.250104904174805
    5. ' 
' → logprob: -13.750104904174805
    6. ',' → logprob: -14.750104904174805
    7. ' ,' → logprob: -16.500104904174805
    8. ' ' → logprob: -16.500104904174805
    9. ']' → logprob: -16.875104904174805
    10. '   ' → logprob: -16.875104904174805

Token 388: '],' (ID: 2155)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.25706782937049866
    2. ',' → logprob: -1.5070677995681763
    3. '],' → logprob: -6.007067680358887
    4. ' ]' → logprob: -6.132067680358887
    5. ' ,' → logprob: -8.382067680358887
    6. '<|end|>' → logprob: -8.757067680358887
    7. ' ' → logprob: -10.507067680358887
    8. ',
' → logprob: -10.632067680358887
    9. ' ],' → logprob: -11.132067680358887
    10. ')' → logprob: -11.382067680358887

Token 389: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.5759396553039551
    2. ' a' → logprob: -0.8259396553039551
    3. '	a' → logprob: -16.825939178466797
    4. ' ' → logprob: -16.950939178466797
    5. ' ' → logprob: -16.950939178466797
    6. '1' → logprob: -18.825939178466797
    7. ' 
' → logprob: -19.200939178466797
    8. '_a' → logprob: -19.325939178466797
    9. '    ' → logprob: -20.200939178466797
    10. '   ' → logprob: -20.450939178466797

Token 390: '_item' (ID: 12070)
  Prédit: '_item'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_item' → logprob: -0.0010466240346431732
    2. '1' → logprob: -7.251046657562256
    3. 'item' → logprob: -9.126046180725098
    4. '_' → logprob: -9.251046180725098
    5. '[' → logprob: -9.751046180725098
    6. ' ' → logprob: -10.376046180725098
    7. '_ITEM' → logprob: -11.126046180725098
    8. 'Item' → logprob: -11.376046180725098
    9. 'tem' → logprob: -12.126046180725098
    10. '_Item' → logprob: -12.501046180725098

Token 391: '[' (ID: 58)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.05524975061416626
    2. '[' → logprob: -2.9302496910095215
    3. ' ' → logprob: -7.9302496910095215
    4. ' [' → logprob: -12.43025016784668
    5. '[
' → logprob: -13.18025016784668
    6. '```' → logprob: -13.93025016784668
    7. ']' → logprob: -14.93025016784668
    8. '   ' → logprob: -15.30525016784668
    9. '`' → logprob: -16.55525016784668
    10. '-' → logprob: -16.55525016784668

Token 392: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.512236498361744e-07
    2. ' ' → logprob: -14.625000953674316
    3. '```' → logprob: -17.375
    4. '[' → logprob: -18.0
    5. '-' → logprob: -18.125
    6. '   ' → logprob: -18.25
    7. ']' → logprob: -18.375
    8. '
' → logprob: -18.6875
    9. '۱' → logprob: -18.9375
    10. '' → logprob: -18.9375

Token 393: ']
' (ID: 1592)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.20537292957305908
    2. ']' → logprob: -1.705372929573059
    3. '<|end|>' → logprob: -5.8303728103637695
    4. '}' → logprob: -7.3303728103637695
    5. ')
' → logprob: -8.95537281036377
    6. '<|end|>' → logprob: -9.33037281036377
    7. ']
' → logprob: -9.58037281036377
    8. ')]' → logprob: -10.08037281036377
    9. '```' → logprob: -12.08037281036377
    10. '   ' → logprob: -12.20537281036377

Token 394: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 395: ' last' (ID: 2174)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5245742797851562
    2. 'last' (adapté à ' last') → logprob: -1.2745742797851562
    3. 'if' → logprob: -2.2745742797851562
    4. '   ' → logprob: -3.7745742797851562
    5. ' for' → logprob: -6.274574279785156
    6. ' last' → logprob: -7.899574279785156
    7. ' if' → logprob: -8.024574279785156
    8. '
' → logprob: -9.774574279785156
    9. 'result' → logprob: -10.024574279785156
    10. '       ' → logprob: -10.149574279785156

Token 396: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.34902966022491455
    2. ' =' → logprob: -1.2240296602249146
    3. ',' → logprob: -7.474029541015625
    4. ' ' → logprob: -11.474029541015625
    5. ' ,' → logprob: -12.474029541015625
    6. '=node' → logprob: -13.474029541015625
    7. ')' → logprob: -14.599029541015625
    8. ' =
' → logprob: -15.224029541015625
    9. '[' → logprob: -15.724029541015625
    10. ')=' → logprob: -16.224029541015625

Token 397: ' a' (ID: 261)
  Prédit: '(node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(node' → logprob: -0.4292182922363281
    2. '[node' → logprob: -1.6792182922363281
    3. 'node' → logprob: -2.554218292236328
    4. ' (' → logprob: -2.679218292236328
    5. ' node' → logprob: -4.804218292236328
    6. '[' → logprob: -5.804218292236328
    7. ' [' → logprob: -5.929218292236328
    8. 'a' → logprob: -6.804218292236328
    9. '(a' → logprob: -7.554218292236328
    10. '[a' → logprob: -8.054218292236328

Token 398: '_item' (ID: 12070)
  Prédit: '_item'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_item' → logprob: -0.00115796213503927
    2. 'item' → logprob: -7.501157760620117
    3. '_' → logprob: -8.626157760620117
    4. '[' → logprob: -9.376157760620117
    5. '_node' → logprob: -9.626157760620117
    6. '_token' → logprob: -10.251157760620117
    7. '[node' → logprob: -10.251157760620117
    8. 'Item' → logprob: -10.376157760620117
    9. '[item' → logprob: -10.626157760620117
    10. ' _' → logprob: -11.126157760620117

Token 399: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.06522861123085022
    2. '<|end|>' → logprob: -2.8152287006378174
    3. '<|end|>' → logprob: -6.315228462219238
    4. '[' → logprob: -7.315228462219238
    5. ' 
' → logprob: -8.190228462219238
    6. '  
' → logprob: -8.815228462219238
    7. '[
' → logprob: -9.065228462219238
    8. ')' → logprob: -9.440228462219238
    9. '
' → logprob: -9.940228462219238
    10. ' ' → logprob: -11.190228462219238

Token 400: '       ' (ID: 309)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.08887337148189545
    2. '        
' → logprob: -3.8388733863830566
    3. '<|end|>' → logprob: -3.9638733863830566
    4. ' 
' → logprob: -4.088873386383057
    5. '       ' → logprob: -4.213873386383057
    6. '  
' → logprob: -4.588873386383057
    7. '    
' → logprob: -6.713873386383057
    8. '		
' → logprob: -8.213872909545898
    9. '<|end|>' → logprob: -8.338872909545898
    10. '
' → logprob: -8.713872909545898

Token 401: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.004696407355368137
    2. '   ' → logprob: -5.754696369171143
    3. ' for' → logprob: -6.504696369171143
    4. '       ' → logprob: -11.2546968460083
    5. 'if' → logprob: -12.7546968460083
    6. '	for' → logprob: -13.0046968460083
    7. '
' → logprob: -13.3796968460083
    8. '```' → logprob: -14.3796968460083
    9. '    
' → logprob: -14.5046968460083
    10. ' ' → logprob: -15.6296968460083

Token 402: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.3872591257095337
    2. ' b' → logprob: -1.2622591257095337
    3. 'neighbor' → logprob: -3.762259006500244
    4. ' neighbor' → logprob: -4.637259006500244
    5. ' child' → logprob: -6.012259006500244
    6. 'child' → logprob: -6.512259006500244
    7. 'adj' → logprob: -8.762259483337402
    8. 'ne' → logprob: -9.137259483337402
    9. 'n' → logprob: -9.387259483337402
    10. 'next' → logprob: -9.637259483337402

Token 403: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.026306336745619774
    2. 'in' → logprob: -3.651306390762329
    3. '	in' → logprob: -12.27630615234375
    4. ' ' → logprob: -14.15130615234375
    5. '<|end|>' → logprob: -16.02630615234375
    6. 'In' → logprob: -16.65130615234375
    7. '  ' → logprob: -16.77630615234375
    8. ' ' → logprob: -16.90130615234375
    9. 'import' → logprob: -16.90130615234375
    10. '[' → logprob: -17.02630615234375

Token 404: ' tree' (ID: 8165)
  Prédit: 'tree'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tree' → logprob: -0.34851324558258057
    2. ' tree' → logprob: -1.2235132455825806
    3. '(tree' → logprob: -10.22351360321045
    4. '	tree' → logprob: -10.72351360321045
    5. ' ' → logprob: -12.84851360321045
    6. '   ' → logprob: -13.84851360321045
    7. '.tree' → logprob: -13.97351360321045
    8. 'queue' → logprob: -14.09851360321045
    9. 'range' → logprob: -14.09851360321045
    10. '-tree' → logprob: -14.22351360321045

Token 405: '[node' (ID: 67268)
  Prédit: '[a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[a' → logprob: -0.06223520636558533
    2. '[node' → logprob: -2.812235116958618
    3. 'a' → logprob: -8.312234878540039
    4. '[' → logprob: -10.937234878540039
    5. '[
' → logprob: -13.312234878540039
    6. ' [' → logprob: -14.687234878540039
    7. '[n' → logprob: -14.812234878540039
    8. '   ' → logprob: -15.562234878540039
    9. '```' → logprob: -15.812234878540039
    10. ' a' → logprob: -15.937234878540039

Token 406: ']:
' (ID: 22152)
  Prédit: ']:'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']:' → logprob: -0.4755982458591461
    2. ']:
' → logprob: -0.9755982160568237
    3. ']' → logprob: -7.100598335266113
    4. ':' → logprob: -8.100598335266113
    5. ']:
' → logprob: -8.100598335266113
    6. ':
' → logprob: -9.850598335266113
    7. ']:

' → logprob: -10.850598335266113
    8. ']>' → logprob: -11.975598335266113
    9. ']:


' → logprob: -13.100598335266113
    10. ' ]' → logprob: -13.350598335266113

Token 407: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0013767797499895096
    2. ':' → logprob: -7.626376628875732
    3. ' if' → logprob: -7.876376628875732
    4. ':
' → logprob: -8.37637710571289
    5. '       ' → logprob: -9.50137710571289
    6. 'if' → logprob: -10.00137710571289
    7. '   ' → logprob: -10.25137710571289
    8. '
' → logprob: -10.37637710571289
    9. ',' → logprob: -10.75137710571289
    10. '0' → logprob: -11.00137710571289

Token 408: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.04442952573299408
    2. ' ' → logprob: -4.419429302215576
    3. '           ' → logprob: -4.419429302215576
    4. '               ' → logprob: -4.419429302215576
    5. '       ' → logprob: -5.294429302215576
    6. 'if' (adapté à ' if') → logprob: -6.794429302215576
    7. '        ' → logprob: -7.669429302215576
    8. '            ' → logprob: -8.419429779052734
    9. '   ' → logprob: -8.794429779052734
    10. '    ' → logprob: -9.169429779052734

Token 409: ' v' (ID: 323)
  Prédit: ' v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' v' → logprob: -0.3805134892463684
    2. 'v' → logprob: -1.2555134296417236
    3. ' not' → logprob: -3.7555134296417236
    4. 'not' → logprob: -4.880513668060303
    5. '           ' → logprob: -9.130513191223145
    6. '   ' → logprob: -9.255513191223145
    7. 'b' → logprob: -9.568013191223145
    8. ' has' → logprob: -9.943013191223145
    9. '    ' → logprob: -10.380513191223145
    10. 'has' → logprob: -10.568013191223145

Token 410: '[b' (ID: 40800)
  Prédit: '[b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[b' → logprob: -2.696889623621246e-06
    2. 'b' → logprob: -13.62500286102295
    3. '[' → logprob: -13.87500286102295
    4. ' [' → logprob: -15.75000286102295
    5. '[v' → logprob: -16.125001907348633
    6. '[
' → logprob: -17.125001907348633
    7. '
' → logprob: -17.250001907348633
    8. '```' → logprob: -17.500001907348633
    9. ')[' → logprob: -18.125001907348633
    10. '\b' → logprob: -18.375001907348633

Token 411: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.071839839220047
    2. ' ==' → logprob: -3.0718398094177246
    3. ']==' → logprob: -4.321839809417725
    4. ' ]' → logprob: -5.321839809417725
    5. '==' → logprob: -5.696839809417725
    6. '[' → logprob: -6.571839809417725
    7. ' ' → logprob: -10.196840286254883
    8. '[]' → logprob: -11.571840286254883
    9. ')' → logprob: -12.071840286254883
    10. '=' → logprob: -12.946840286254883

Token 412: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.029800137504935265
    2. '==' → logprob: -3.5298001766204834
    3. ' ' → logprob: -10.154800415039062
    4. '[' → logprob: -12.779800415039062
    5. '=' → logprob: -13.154800415039062
    6. ']==' → logprob: -13.279800415039062
    7. ' =' → logprob: -13.404800415039062
    8. '0' → logprob: -14.154800415039062
    9. '==
' → logprob: -14.279800415039062
    10. ')==' → logprob: -15.029800415039062

Token 413: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.016034720465540886
    2. ' ' → logprob: -4.1410346031188965
    3. '   ' → logprob: -15.266035079956055
    4. '  ' → logprob: -16.391035079956055
    5. '
' → logprob: -17.516035079956055
    6. '<|end|>' → logprob: -17.516035079956055
    7. '۰' → logprob: -17.703535079956055
    8. ' ' → logprob: -17.766035079956055
    9. '=' → logprob: -17.891035079956055
    10. ' 
' → logprob: -18.078535079956055

Token 414: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.001171652227640152
    2. ' ' → logprob: -6.751171588897705
    3. '   ' → logprob: -14.126172065734863
    4. '
' → logprob: -15.688672065734863
    5. '  ' → logprob: -15.813672065734863
    6. '1' → logprob: -16.813671112060547
    7. '=' → logprob: -16.938671112060547
    8. '۰' → logprob: -17.501171112060547
    9. '    ' → logprob: -17.563671112060547
    10. '

' → logprob: -17.688671112060547

Token 415: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.03264864161610603
    2. '               ' → logprob: -3.6576485633850098
    3. 'and' → logprob: -5.28264856338501
    4. ':' → logprob: -7.78264856338501
    5. '           ' → logprob: -7.90764856338501
    6. ':
' → logprob: -8.032649040222168
    7. '              ' → logprob: -9.907649040222168
    8. ',' → logprob: -10.407649040222168
    9. '<|end|>' → logprob: -11.157649040222168
    10. '            ' → logprob: -11.532649040222168

Token 416: ' has' (ID: 853)
  Prédit: ' has'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' has' → logprob: -0.9866340160369873
    2. 'len' → logprob: -1.6116340160369873
    3. 'has' → logprob: -1.7366340160369873
    4. ' not' → logprob: -1.9866340160369873
    5. ' len' → logprob: -2.9866340160369873
    6. 'not' → logprob: -3.2366340160369873
    7. 'True' → logprob: -5.111634254455566
    8. ' True' → logprob: -5.736634254455566
    9. '(has' → logprob: -5.861634254455566
    10. '(len' → logprob: -6.111634254455566

Token 417: '_children' (ID: 78282)
  Prédit: '_children'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_children' → logprob: -3.404745439183898e-05
    2. '(tree' → logprob: -11.25003433227539
    3. '_' → logprob: -11.87503433227539
    4. 'children' → logprob: -12.12503433227539
    5. '_child' → logprob: -12.50003433227539
    6. ' _' → logprob: -13.50003433227539
    7. 'tree' → logprob: -13.87503433227539
    8. '```' → logprob: -14.87503433227539
    9. '_
' → logprob: -15.37503433227539
    10. ' children' → logprob: -15.37503433227539

Token 418: '(tree' (ID: 44909)
  Prédit: '(tree'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(tree' → logprob: -0.0015565206995233893
    2. '(' → logprob: -6.501556396484375
    3. ' (' → logprob: -10.501556396484375
    4. '(
' → logprob: -10.626556396484375
    5. '```' → logprob: -14.251556396484375
    6. '(queue' → logprob: -14.501556396484375
    7. '(Tree' → logprob: -15.376556396484375
    8. '(

' → logprob: -15.376556396484375
    9. '(space' → logprob: -15.626556396484375
    10. '<Tree' → logprob: -16.126556396484375

Token 419: ',' (ID: 11)
  Prédit: '(tree'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(tree' → logprob: -0.6328656077384949
    2. ',' → logprob: -0.7578656077384949
    3. '(' → logprob: -9.757865905761719
    4. ')' → logprob: -9.882865905761719
    5. '),' → logprob: -10.257865905761719
    6. ',
' → logprob: -10.382865905761719
    7. ' (' → logprob: -10.382865905761719
    8. '[' → logprob: -11.132865905761719
    9. ' ,' → logprob: -11.757865905761719
    10. '',' → logprob: -11.757865905761719

Token 420: ' b' (ID: 287)
  Prédit: ' tree'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tree' → logprob: -0.43952691555023193
    2. 'tree' → logprob: -1.064526915550232
    3. '(tree' → logprob: -4.5645270347595215
    4. ' b' → logprob: -9.189526557922363
    5. 'b' → logprob: -9.314526557922363
    6. '	tree' → logprob: -9.689526557922363
    7. ' ' → logprob: -10.689526557922363
    8. 't' → logprob: -11.189526557922363
    9. ')' → logprob: -11.189526557922363
    10. '```' → logprob: -11.314526557922363

Token 421: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.2373943328857422
    2. '):' → logprob: -1.6123943328857422
    3. '               ' → logprob: -4.487394332885742
    4. ':' → logprob: -8.487394332885742
    5. ':
' → logprob: -8.987394332885742
    6. ')' → logprob: -9.362394332885742
    7. '):
' → logprob: -9.487394332885742
    8. '           ' → logprob: -9.862394332885742
    9. '):

' → logprob: -9.862394332885742
    10. '():
' → logprob: -10.987394332885742

Token 422: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.00019865304057020694
    2. 'enqueue' → logprob: -9.750198364257812
    3. '           ' → logprob: -10.375198364257812
    4. ' enqueue' → logprob: -10.625198364257812
    5. '                
' → logprob: -10.750198364257812
    6. '              ' → logprob: -11.125198364257812
    7. '```' → logprob: -11.750198364257812
    8. '.enqueue' → logprob: -11.875198364257812
    9. ':' → logprob: -12.125198364257812
    10. ' and' → logprob: -12.625198364257812

Token 423: ' enqueue' (ID: 117229)
  Prédit: ' enqueue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' enqueue' → logprob: -0.4904446601867676
    2. 'enqueue' (adapté à ' enqueue') → logprob: -1.7404446601867676
    3. '               ' → logprob: -2.2404446601867676
    4. '                ' → logprob: -2.4904446601867676
    5. '                   ' → logprob: -4.365444660186768
    6. ' ' → logprob: -6.365444660186768
    7. '_enqueue' → logprob: -6.365444660186768
    8. '.enqueue' → logprob: -6.490444660186768
    9. ' 
' → logprob: -6.740444660186768
    10. '                
' → logprob: -7.365444660186768

Token 424: '(q' (ID: 21479)
  Prédit: '(q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(q' → logprob: -1.0280383548888494e-06
    2. '(' → logprob: -14.125000953674316
    3. '[q' → logprob: -16.750001907348633
    4. '(queue' → logprob: -17.000001907348633
    5. '(
' → logprob: -17.250001907348633
    6. ' (' → logprob: -17.375001907348633
    7. '```' → logprob: -17.375001907348633
    8. 'q' → logprob: -18.250001907348633
    9. '(s' → logprob: -19.875001907348633
    10. '<|end|>' → logprob: -20.250001907348633

Token 425: ',' (ID: 11)
  Prédit: '(q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(q' → logprob: -5.657694418914616e-05
    2. ',' → logprob: -10.500056266784668
    3. '(' → logprob: -10.750056266784668
    4. ' (' → logprob: -12.875056266784668
    5. ',q' → logprob: -12.875056266784668
    6. '               ' → logprob: -14.000056266784668
    7. '(
' → logprob: -14.250056266784668
    8. ')' → logprob: -14.500056266784668
    9. '[q' → logprob: -15.875056266784668
    10. '),' → logprob: -16.500057220458984

Token 426: ' [' (ID: 723)
  Prédit: ' ['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.899897575378418
    2. '[q' → logprob: -1.149897575378418
    3. '[b' → logprob: -1.524897575378418
    4. 'q' → logprob: -3.024897575378418
    5. '[' → logprob: -5.024897575378418
    6. ' q' → logprob: -5.649897575378418
    7. '[node' → logprob: -8.774897575378418
    8. '[a' → logprob: -9.024897575378418
    9. '   ' → logprob: -10.274897575378418
    10. '[(' → logprob: -11.149897575378418

Token 427: 'b' (ID: 65)
  Prédit: 'b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -9.729906196298543e-06
    2. ' b' → logprob: -11.625009536743164
    3. '               ' → logprob: -15.750009536743164
    4. '   ' → logprob: -15.750009536743164
    5. '```' → logprob: -16.500009536743164
    6. '                   ' → logprob: -16.750009536743164
    7. ',' → logprob: -16.875009536743164
    8. '<|end|>' → logprob: -17.000009536743164
    9. '	b' → logprob: -17.625009536743164
    10. '           ' → logprob: -17.750009536743164

Token 428: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -5.049755782238208e-05
    2. ' ,' → logprob: -10.00005054473877
    3. ',
' → logprob: -12.37505054473877
    4. 'depth' → logprob: -14.50005054473877
    5. '(depth' → logprob: -15.87505054473877
    6. ',d' → logprob: -15.87505054473877
    7. ',b' → logprob: -17.250049591064453
    8. '```' → logprob: -17.625049591064453
    9. '   ' → logprob: -17.750049591064453
    10. '
' → logprob: -17.875049591064453

Token 429: ' depth' (ID: 13636)
  Prédit: ' depth'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' depth' → logprob: -0.693181574344635
    2. 'depth' → logprob: -0.693181574344635
    3. '(depth' → logprob: -10.693181991577148
    4. ' ' → logprob: -12.193181991577148
    5. '   ' → logprob: -13.193181991577148
    6. '               ' → logprob: -13.693181991577148
    7. '                   ' → logprob: -14.193181991577148
    8. '    ' → logprob: -14.568181991577148
    9. '           ' → logprob: -15.068181991577148
    10. '            ' → logprob: -15.193181991577148

Token 430: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.2014213353395462
    2. ' +' → logprob: -1.7014213800430298
    3. '+
' → logprob: -12.326421737670898
    4. ' +
' → logprob: -13.951421737670898
    5. ' ' → logprob: -14.326421737670898
    6. ' plus' → logprob: -14.326421737670898
    7. ' ' → logprob: -14.451421737670898
    8. '＋' → logprob: -14.826421737670898
    9. '+]' → logprob: -15.451421737670898
    10. '+

' → logprob: -16.3264217376709

Token 431: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00014025058771949261
    2. ' ' → logprob: -8.875140190124512
    3. '   ' → logprob: -15.125140190124512
    4. '```' → logprob: -17.500141143798828
    5. '  ' → logprob: -18.125141143798828
    6. '۱' → logprob: -18.500141143798828
    7. '-' → logprob: -18.750141143798828
    8. '１' → logprob: -18.750141143798828
    9. '
' → logprob: -18.875141143798828
    10. ' ' → logprob: -19.062641143798828

Token 432: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -4.961759259458631e-06
    2. ' ' → logprob: -12.250004768371582
    3. '   ' → logprob: -16.7500057220459
    4. '
' → logprob: -17.5000057220459
    5. '-' → logprob: -18.2500057220459
    6. '```' → logprob: -18.3125057220459
    7. ']' → logprob: -19.7500057220459
    8. '  ' → logprob: -19.9375057220459
    9. '[' → logprob: -20.0625057220459
    10. '１' → logprob: -20.1250057220459

Token 433: '])
' (ID: 5169)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.0024994369596242905
    2. '])
' → logprob: -6.002499580383301
    3. ')' → logprob: -11.3774995803833
    4. ' ])' → logprob: -12.3774995803833
    5. '])

' → logprob: -12.6274995803833
    6. '])
' → logprob: -13.3774995803833
    7. ')])' → logprob: -13.6274995803833
    8. ''])' → logprob: -14.6274995803833
    9. ']' → logprob: -14.8774995803833
    10. ')]' → logprob: -15.6274995803833

Token 434: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -4.246537173457909e-06
    2. '                
' → logprob: -13.625003814697266
    3. '```' → logprob: -14.125003814697266
    4. '              ' → logprob: -14.375003814697266
    5. '<|end|>' → logprob: -14.625003814697266
    6. '
' → logprob: -14.750003814697266
    7. '           ' → logprob: -15.500003814697266
    8. '                   ' → logprob: -15.625003814697266
    9. '                ' → logprob: -16.125003814697266
    10. ',' → logprob: -17.375003814697266

Token 435: ' mark' (ID: 1983)
  Prédit: 'mark'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'mark' (adapté à ' mark') → logprob: -0.023251768201589584
    2. ' mark' → logprob: -3.77325177192688
    3. '               ' → logprob: -12.0232515335083
    4. '                   ' → logprob: -16.148252487182617
    5. '           ' → logprob: -16.523252487182617
    6. '```' → logprob: -17.273252487182617
    7. ' ' → logprob: -17.523252487182617
    8. '   ' → logprob: -17.898252487182617
    9. 'mask' → logprob: -18.523252487182617
    10. '
' → logprob: -18.773252487182617

Token 436: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -6.704273118884885e-07
    2. '(' → logprob: -15.500000953674316
    3. '_vis' → logprob: -15.500000953674316
    4. 'visited' → logprob: -16.0
    5. '_v' → logprob: -18.25
    6. 'Visited' → logprob: -18.375
    7. '_visit' → logprob: -18.375
    8. '(v' → logprob: -18.875
    9. 'v' → logprob: -19.0
    10. '_visible' → logprob: -19.125

Token 437: 'visited' (ID: 52453)
  Prédit: 'visited'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.0003312937042210251
    2. 'v' → logprob: -8.375330924987793
    3. ' visited' → logprob: -9.750330924987793
    4. '_' → logprob: -10.875330924987793
    5. 'Visited' → logprob: -11.000330924987793
    6. 'vist' → logprob: -12.625330924987793
    7. 'vis' → logprob: -13.375330924987793
    8. 'visit' → logprob: -14.125330924987793
    9. '```' → logprob: -15.250330924987793
    10. ' v' → logprob: -15.875330924987793

Token 438: '(v' (ID: 6932)
  Prédit: '(v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(v' → logprob: -0.00010986098641296849
    2. '(' → logprob: -9.125109672546387
    3. ' (' → logprob: -14.750109672546387
    4. 'v' → logprob: -15.000109672546387
    5. '```' → logprob: -16.750110626220703
    6. '(
' → logprob: -17.250110626220703
    7. '[v' → logprob: -18.500110626220703
    8. '<|end|>' → logprob: -18.750110626220703
    9. '	v' → logprob: -19.500110626220703
    10. '?v' → logprob: -19.500110626220703

Token 439: ',' (ID: 11)
  Prédit: '(v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(v' → logprob: -0.013913370668888092
    2. ',' → logprob: -4.388913154602051
    3. '(' → logprob: -6.638913154602051
    4. ',v' → logprob: -10.01391315460205
    5. ')' → logprob: -10.76391315460205
    6. ' (' → logprob: -11.01391315460205
    7. 'v' → logprob: -12.63891315460205
    8. '```' → logprob: -13.38891315460205
    9. '[v' → logprob: -13.63891315460205
    10. '),' → logprob: -13.76391315460205

Token 440: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.011058199219405651
    2. ' b' → logprob: -4.511058330535889
    3. 'v' → logprob: -11.51105785369873
    4. ' v' → logprob: -14.88605785369873
    5. '	b' → logprob: -17.761058807373047
    6. '[b' → logprob: -19.011058807373047
    7. ')b' → logprob: -19.761058807373047
    8. '(b' → logprob: -19.886058807373047
    9. ' ' → logprob: -20.261058807373047
    10. '```' → logprob: -20.761058807373047

Token 441: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00010008628305513412
    2. ')
' → logprob: -9.250100135803223
    3. ')b' → logprob: -13.125100135803223
    4. ' )' → logprob: -15.000100135803223
    5. '())' → logprob: -15.125100135803223
    6. '])' → logprob: -15.250100135803223
    7. '`)' → logprob: -15.500100135803223
    8. ')

' → logprob: -15.625100135803223
    9. ']' → logprob: -16.000099182128906
    10. ')`' → logprob: -16.375099182128906

Token 442: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0010652014752849936
    2. 'return' → logprob: -7.376065254211426
    3. ' return' → logprob: -8.626065254211426
    4. '```' → logprob: -9.501065254211426
    5. ')' → logprob: -9.751065254211426
    6. '
' → logprob: -9.751065254211426
    7. '<|end|>' → logprob: -10.126065254211426
    8. '	return' → logprob: -11.501065254211426
    9. '    
' → logprob: -12.751065254211426
    10. ':return' → logprob: -13.001065254211426

Token 443: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03453054651618004
    2. 'return' (adapté à ' return') → logprob: -3.6595306396484375
    3. ' return' → logprob: -6.0345306396484375
    4. '<|end|>' → logprob: -6.0345306396484375
    5. ')' → logprob: -6.1595306396484375
    6. '	return' → logprob: -8.284530639648438
    7. '```' → logprob: -8.659530639648438
    8. '
' → logprob: -8.784530639648438
    9. '#' → logprob: -9.159530639648438
    10. '    
' → logprob: -9.159530639648438

Token 444: ' last' (ID: 2174)
  Prédit: ' last'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' last' → logprob: -0.4741084575653076
    2. 'last' → logprob: -0.9741084575653076
    3. '(last' → logprob: -11.224108695983887
    4. '[last' → logprob: -12.099108695983887
    5. 'len' → logprob: -12.474108695983887
    6. ' max' → logprob: -13.224108695983887
    7. ' len' → logprob: -13.849108695983887
    8. 'max' → logprob: -14.224108695983887
    9. 'int' → logprob: -14.224108695983887
    10. ' [' → logprob: -14.349108695983887

Token 445: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0024409317411482334
    2. '<|end|>' → logprob: -6.377440929412842
    3. 'if' → logprob: -8.37744140625
    4. '#' → logprob: -8.75244140625
    5. '```' → logprob: -9.50244140625
    6. '[' → logprob: -9.62744140625
    7. ')' → logprob: -9.87744140625
    8. '
' → logprob: -10.00244140625
    9. '<|end|>' → logprob: -10.87744140625
    10. '(' → logprob: -11.25244140625

Token 446: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.04382285103201866
    2. 'if' → logprob: -3.168822765350342
    3. 'print' → logprob: -7.668822765350342
    4. '#' → logprob: -8.7938232421875
    5. '```' → logprob: -9.2938232421875
    6. 'n' → logprob: -10.0438232421875
    7. 'a' → logprob: -10.7938232421875
    8. '\' → logprob: -10.7938232421875
    9. ' if' → logprob: -12.4188232421875
    10. ')' → logprob: -12.4188232421875

Token 447: ' compute' (ID: 23864)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.03643343970179558
    2. 'def' → logprob: -3.411433458328247
    3. ' main' → logprob: -5.911433219909668
    4. 'get' → logprob: -10.536433219909668
    5. 'find' → logprob: -11.036433219909668
    6. 'calculate' → logprob: -11.536433219909668
    7. 'if' → logprob: -12.036433219909668
    8. ' def' → logprob: -12.161433219909668
    9. 'build' → logprob: -12.911433219909668
    10. 'max' → logprob: -12.911433219909668

Token 448: '_l' (ID: 1478)
  Prédit: '_max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_max' → logprob: -1.413339376449585
    2. '()' → logprob: -1.663339376449585
    3. '_d' → logprob: -1.663339376449585
    4. '_depth' → logprob: -2.163339376449585
    5. '_tree' → logprob: -2.163339376449585
    6. '_distance' → logprob: -2.163339376449585
    7. '_long' → logprob: -4.038339614868164
    8. '_dist' → logprob: -5.413339614868164
    9. '(tree' → logprob: -6.163339614868164
    10. '_height' → logprob: -6.288339614868164

Token 449: '(n' (ID: 2406)
  Prédit: 'ength'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ength' → logprob: -0.6685616374015808
    2. 'ong' → logprob: -0.7935616374015808
    3. 'eft' → logprob: -4.4185614585876465
    4. 'argest' → logprob: -4.9185614585876465
    5. 'e' → logprob: -5.0435614585876465
    6. 'eng' → logprob: -5.6685614585876465
    7. 'ast' → logprob: -6.0435614585876465
    8. 'engt' → logprob: -6.5435614585876465
    9. 'en' → logprob: -7.2935614585876465
    10. 'ca' → logprob: -7.6685614585876465

Token 450: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00582356471568346
    2. '):' → logprob: -5.255823612213135
    3. ')' → logprob: -7.755823612213135
    4. ',n' → logprob: -10.130823135375977
    5. ',
' → logprob: -10.380823135375977
    6. '):
' → logprob: -10.505823135375977
    7. '=' → logprob: -11.005823135375977
    8. ' ,' → logprob: -11.380823135375977
    9. ',u' → logprob: -12.130823135375977
    10. ',node' → logprob: -12.755823135375977

Token 451: ' second' (ID: 3099)
  Prédit: 'tree'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tree' → logprob: -0.012424180284142494
    2. ' tree' → logprob: -4.512423992156982
    3. 'a' → logprob: -7.262423992156982
    4. 't' → logprob: -8.63742446899414
    5. 'n' → logprob: -9.26242446899414
    6. 'l' → logprob: -9.38742446899414
    7. '   ' → logprob: -9.63742446899414
    8. ')' → logprob: -10.51242446899414
    9. '	tree' → logprob: -10.51242446899414
    10. '(tree' → logprob: -10.88742446899414

Token 452: '_b' (ID: 1535)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0415451526641846
    2. '_node' → logprob: -1.4165451526641846
    3. ')_' → logprob: -1.7915451526641846
    4. '_' → logprob: -2.7915451526641846
    5. ',' → logprob: -3.4165451526641846
    6. '_tree' → logprob: -3.6665451526641846
    7. '_a' → logprob: -3.6665451526641846
    8. '_parent' → logprob: -4.4165449142456055
    9. '_l' → logprob: -4.5415449142456055
    10. '_b' → logprob: -4.6665449142456055

Token 453: 'fs' (ID: 6469)
  Prédit: 'fs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fs' → logprob: -2.45848218582978e-06
    2. '_fs' → logprob: -14.12500286102295
    3. 'f' → logprob: -14.50000286102295
    4. 'FS' → logprob: -14.75000286102295
    5. ' fs' → logprob: -15.00000286102295
    6. 'fst' → logprob: -15.75000286102295
    7. 'fsp' → logprob: -16.375001907348633
    8. 'sf' → logprob: -17.125001907348633
    9. '(fs' → logprob: -17.750001907348633
    10. 'fsi' → logprob: -18.125001907348633

Token 454: '_result' (ID: 11623)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.44502687454223633
    2. '(tree' → logprob: -1.3200268745422363
    3. '):
' → logprob: -3.1950268745422363
    4. '_tree' → logprob: -3.5700268745422363
    5. ',' → logprob: -5.070026874542236
    6. 'tree' → logprob: -5.195026874542236
    7. '_result' → logprob: -5.445026874542236
    8. ')' → logprob: -5.570026874542236
    9. '):

' → logprob: -7.445026874542236
    10. '(' → logprob: -8.195026397705078

Token 455: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.43175724148750305
    2. ',' → logprob: -1.3067572116851807
    3. '):
' → logprob: -2.5567572116851807
    4. ')' → logprob: -6.18175745010376
    5. '   ' → logprob: -9.431756973266602
    6. '):

' → logprob: -9.431756973266602
    7. '):
' → logprob: -10.181756973266602
    8. '[' → logprob: -10.306756973266602
    9. ',
' → logprob: -11.306756973266602
    10. 's' → logprob: -11.806756973266602

Token 456: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1617775857448578
    2. '=' → logprob: -3.0367774963378906
    3. ':' → logprob: -3.5367774963378906
    4. ' =' → logprob: -3.7867774963378906
    5. ',' → logprob: -4.411777496337891
    6. '(a' → logprob: -5.161777496337891
    7. 'depth' → logprob: -5.536777496337891
    8. '(depth' → logprob: -5.536777496337891
    9. '):' → logprob: -5.786777496337891
    10. '[' → logprob: -5.911777496337891

Token 457: ' if' (ID: 538)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.0382733978331089
    2. '_,' → logprob: -3.913273334503174
    3. '   ' → logprob: -4.413273334503174
    4. 'depth' → logprob: -6.663273334503174
    5. 'l' → logprob: -6.788273334503174
    6. ' return' → logprob: -7.038273334503174
    7. 'if' (adapté à ' if') → logprob: -7.288273334503174
    8. 'last' → logprob: -7.288273334503174
    9. 'node' → logprob: -7.538273334503174
    10. 'a' → logprob: -9.038273811340332

Token 458: ' n' (ID: 297)
  Prédit: ' second'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' second' → logprob: -0.2288074791431427
    2. 'second' → logprob: -1.6038074493408203
    3. ' len' → logprob: -6.60380744934082
    4. ' n' → logprob: -6.97880744934082
    5. ' not' → logprob: -7.85380744934082
    6. 'len' → logprob: -7.97880744934082
    7. 'n' → logprob: -8.22880744934082
    8. '(second' → logprob: -9.85380744934082
    9. 'not' → logprob: -11.10380744934082
    10. ' isinstance' → logprob: -11.22880744934082

Token 459: ' <=' (ID: 5017)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.7043633460998535
    2. '>' → logprob: -1.9543633460998535
    3. ' ==' → logprob: -1.9543633460998535
    4. ' >' → logprob: -2.2043633460998535
    5. '=' → logprob: -3.5793633460998535
    6. ' <=' → logprob: -3.7043633460998535
    7. '<=' → logprob: -3.7043633460998535
    8. ' <' → logprob: -4.4543633460998535
    9. '<' → logprob: -4.5793633460998535
    10. '[' → logprob: -4.9543633460998535

Token 460: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.06325940787792206
    2. '2' → logprob: -2.8132593631744385
    3. ' ' → logprob: -6.688259601593018
    4. '0' → logprob: -11.18825912475586
    5. '3' → logprob: -11.56325912475586
    6. '   ' → logprob: -12.93825912475586
    7. '
' → logprob: -12.93825912475586
    8. '4' → logprob: -13.18825912475586
    9. '```' → logprob: -13.37575912475586
    10. '10' → logprob: -13.87575912475586

Token 461: '3' (ID: 18)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.252127468585968
    2. '2' → logprob: -1.5021274089813232
    3. ' ' → logprob: -9.127127647399902
    4. '3' → logprob: -10.377127647399902
    5. '0' → logprob: -11.002127647399902
    6. '4' → logprob: -12.127127647399902
    7. '
' → logprob: -12.314627647399902
    8. '```' → logprob: -12.814627647399902
    9. '   ' → logprob: -13.127127647399902
    10. '5' → logprob: -13.252127647399902

Token 462: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5483253002166748
    2. ':
' → logprob: -0.9233253002166748
    3. ':return' → logprob: -4.298325538635254
    4. '   ' → logprob: -4.548325538635254
    5. ' or' → logprob: -8.173325538635254
    6. ' :
' → logprob: -8.673325538635254
    7. ' :' → logprob: -9.298325538635254
    8. ' return' → logprob: -10.048325538635254
    9. ' and' → logprob: -10.548325538635254
    10. ':
' → logprob: -10.548325538635254

Token 463: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.028626402840018272
    2. '   ' → logprob: -4.028626441955566
    3. 'return' → logprob: -5.153626441955566
    4. ' return' → logprob: -5.403626441955566
    5. ',' → logprob: -10.903626441955566
    6. '	return' → logprob: -11.278626441955566
    7. ':return' → logprob: -11.278626441955566
    8. ' l' → logprob: -11.403626441955566
    9. ' ' → logprob: -11.528626441955566
    10. ':
' → logprob: -11.653626441955566

Token 464: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.13765883445739746
    2. '   ' → logprob: -2.3876588344573975
    3. 'print' → logprob: -3.3876588344573975
    4. '       ' → logprob: -6.262659072875977
    5. ' return' → logprob: -7.637659072875977
    6. 'l' → logprob: -8.137659072875977
    7. 'n' → logprob: -9.762659072875977
    8. '1' → logprob: -9.762659072875977
    9. '0' → logprob: -10.012659072875977
    10. '
' → logprob: -10.512659072875977

Token 465: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.1634591817855835
    2. ' n' → logprob: -1.4134591817855835
    3. '0' → logprob: -1.7884591817855835
    4. '1' → logprob: -2.038459300994873
    5. ' ' → logprob: -2.413459300994873
    6. '2' → logprob: -3.663459300994873
    7. 'second' → logprob: -4.663459300994873
    8. ' second' → logprob: -4.788459300994873
    9. ' -' → logprob: -5.788459300994873
    10. '3' → logprob: -5.788459300994873

Token 466: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.799278199672699
    2. '*' → logprob: -1.4242782592773438
    3. '-' → logprob: -2.6742782592773438
    4. 'else' → logprob: -2.6742782592773438
    5. '
' → logprob: -3.0492782592773438
    6. '+' → logprob: -3.1742782592773438
    7. '    
' → logprob: -4.174278259277344
    8. 'elif' → logprob: -4.299278259277344
    9. '<|end|>' → logprob: -4.549278259277344
    10. ' else' → logprob: -5.049278259277344

Token 467: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0038824998773634434
    2. '
' → logprob: -5.75388240814209
    3. '    
' → logprob: -8.12888240814209
    4. 'l' → logprob: -8.50388240814209
    5. 'return' → logprob: -9.37888240814209
    6. 'if' → logprob: -10.62888240814209
    7. 'else' → logprob: -10.62888240814209
    8. 'elif' → logprob: -11.37888240814209
    9. 'a' → logprob: -11.50388240814209
    10. '```' → logprob: -11.62888240814209

Token 468: ' else' (ID: 1203)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.5217092037200928
    2. 'depth' → logprob: -2.0217092037200928
    3. 'l' → logprob: -2.3967092037200928
    4. 'if' → logprob: -3.2717092037200928
    5. 'else' (adapté à ' else') → logprob: -3.2717092037200928
    6. 'd' → logprob: -3.7717092037200928
    7. 'last' → logprob: -3.8967092037200928
    8. '   ' → logprob: -3.8967092037200928
    9. '_,' → logprob: -4.146709442138672
    10. 'length' → logprob: -5.146709442138672

Token 469: ':
' (ID: 734)
  Prédit: ':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':
' → logprob: -0.9583253264427185
    2. '   ' → logprob: -1.5833253860473633
    3. '       ' → logprob: -1.7083253860473633
    4. ':' → logprob: -2.0833253860473633
    5. ' return' → logprob: -2.8333253860473633
    6. 'return' → logprob: -3.8333253860473633
    7. ' if' → logprob: -4.833325386047363
    8. ' second' → logprob: -4.958325386047363
    9. 'second' → logprob: -5.708325386047363
    10. ':return' → logprob: -6.708325386047363

Token 470: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -1.1994671821594238
    2. '   ' → logprob: -1.3244671821594238
    3. 'return' → logprob: -1.6994671821594238
    4. ' return' → logprob: -2.199467182159424
    5. 'second' → logprob: -2.324467182159424
    6. ' second' → logprob: -3.199467182159424
    7. ' ' → logprob: -9.574466705322266
    8. '           ' → logprob: -10.074466705322266
    9. ' n' → logprob: -10.574466705322266
    10. '(second' → logprob: -10.699466705322266

Token 471: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.01947762817144394
    2. 'second' → logprob: -4.144477844238281
    3. ' return' → logprob: -5.894477844238281
    4. '   ' → logprob: -7.519477844238281
    5. '       ' → logprob: -9.644477844238281
    6. 'depth' → logprob: -10.394477844238281
    7. ' second' → logprob: -10.644477844238281
    8. 'last' → logprob: -13.144477844238281
    9. 'l' → logprob: -13.144477844238281
    10. '        
' → logprob: -13.144477844238281

Token 472: ' second' (ID: 3099)
  Prédit: 'second'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'second' → logprob: -0.0485910028219223
    2. ' second' → logprob: -3.048590898513794
    3. 'int' → logprob: -13.673590660095215
    4. '(second' → logprob: -13.798590660095215
    5. '	second' → logprob: -15.048590660095215
    6. 'max' → logprob: -15.173590660095215
    7. '   ' → logprob: -15.298590660095215
    8. 'n' → logprob: -15.798590660095215
    9. ' max' → logprob: -16.17359161376953
    10. ' int' → logprob: -16.29859161376953

Token 473: '_b' (ID: 1535)
  Prédit: '_b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_b' → logprob: -1.8624639324116288e-06
    2. '_second' → logprob: -14.375001907348633
    3. '_first' → logprob: -14.500001907348633
    4. '_' → logprob: -15.750001907348633
    5. '_a' → logprob: -16.125001907348633
    6. '```' → logprob: -16.250001907348633
    7. '_s' → logprob: -16.625001907348633
    8. '_B' → logprob: -17.000001907348633
    9. '[' → logprob: -17.250001907348633
    10. '\' → logprob: -17.375001907348633

Token 474: 'fs' (ID: 6469)
  Prédit: 'fs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fs' → logprob: -2.696889623621246e-06
    2. '_fs' → logprob: -13.50000286102295
    3. 'f' → logprob: -14.12500286102295
    4. 'FS' → logprob: -14.87500286102295
    5. 'sf' → logprob: -15.87500286102295
    6. ' fs' → logprob: -17.125001907348633
    7. 'fsi' → logprob: -17.625001907348633
    8. 'fsm' → logprob: -17.875001907348633
    9. 'fst' → logprob: -18.000001907348633
    10. '_f' → logprob: -19.375001907348633

Token 475: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -2.2200749754119897e-06
    2. '_results' → logprob: -13.875001907348633
    3. 'result' → logprob: -14.250001907348633
    4. '_second' → logprob: -15.250001907348633
    5. '_first' → logprob: -15.875001907348633
    6. '_res' → logprob: -16.125001907348633
    7. 'Result' → logprob: -16.750001907348633
    8. ''_' → logprob: -17.750001907348633
    9. '._' → logprob: -18.000001907348633
    10. '_' → logprob: -18.250001907348633

Token 476: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0002465582510922104
    2. '[-' → logprob: -8.37524700164795
    3. ' [' → logprob: -11.25024700164795
    4. '[
' → logprob: -13.62524700164795
    5. '[len' → logprob: -14.50024700164795
    6. '[][' → logprob: -15.75024700164795
    7. '[[' → logprob: -16.000246047973633
    8. '\[' → logprob: -16.000246047973633
    9. '[last' → logprob: -16.125246047973633
    10. ' ' → logprob: -16.250246047973633

Token 477: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.7697225252486533e-06
    2. ' ' → logprob: -12.750003814697266
    3. '   ' → logprob: -14.500003814697266
    4. '```' → logprob: -16.500003814697266
    5. '
' → logprob: -16.562503814697266
    6. ']' → logprob: -16.750003814697266
    7. '0' → logprob: -16.875003814697266
    8. '-' → logprob: -17.000003814697266
    9. '[' → logprob: -17.187503814697266
    10. '  ' → logprob: -18.187503814697266

Token 478: ']' (ID: 60)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.9338160157203674
    2. ')' → logprob: -1.1838159561157227
    3. '-' → logprob: -2.1838159561157227
    4. ' +' → logprob: -2.1838159561157227
    5. ' -' → logprob: -3.4338159561157227
    6. ']' → logprob: -4.058815956115723
    7. '<|end|>' → logprob: -4.933815956115723
    8. ')+' → logprob: -5.058815956115723
    9. ' )' → logprob: -5.183815956115723
    10. ']+' → logprob: -6.183815956115723

Token 479: ' +' (ID: 659)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.10803500562906265
    2. 'n' → logprob: -2.483035087585449
    3. '<|end|>' → logprob: -4.608035087585449
    4. '
' → logprob: -5.858035087585449
    5. 'if' → logprob: -6.108035087585449
    6. '#' → logprob: -6.608035087585449
    7. '```' → logprob: -7.358035087585449
    8. 'print' → logprob: -7.733035087585449
    9. '\n' → logprob: -7.983035087585449
    10. 'a' → logprob: -8.85803508758545

Token 480: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.02077544294297695
    2. ' ' → logprob: -4.145775318145752
    3. '2' → logprob: -5.520775318145752
    4. '3' → logprob: -7.645775318145752
    5. 'n' → logprob: -9.39577579498291
    6. '4' → logprob: -9.64577579498291
    7. '0' → logprob: -9.77077579498291
    8. '5' → logprob: -11.83327579498291
    9. ' n' → logprob: -12.08327579498291
    10. ' ' → logprob: -12.14577579498291

Token 481: '2' (ID: 17)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.014312290586531162
    2. '2' → logprob: -4.389312267303467
    3. '3' → logprob: -6.639312267303467
    4. 'n' → logprob: -8.014312744140625
    5. '4' → logprob: -9.389312744140625
    6. ' ' → logprob: -10.514312744140625
    7. '(n' → logprob: -10.889312744140625
    8. '0' → logprob: -11.139312744140625
    9. '(' → logprob: -11.764312744140625
    10. '5' → logprob: -13.014312744140625

Token 482: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.013570987619459629
    2. 'if' → logprob: -4.513570785522461
    3. 'n' → logprob: -6.013570785522461
    4. 'print' → logprob: -9.763570785522461
    5. '#' → logprob: -11.138570785522461
    6. '```' → logprob: -13.638570785522461
    7. 'a' → logprob: -15.138570785522461
    8. 'ndef' → logprob: -15.263570785522461
    9. ' if' → logprob: -15.638570785522461
    10. 'import' → logprob: -15.763570785522461

Token 483: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.04873066395521164
    2. '```' → logprob: -4.298730850219727
    3. '<|end|>' → logprob: -4.423730850219727
    4. 'n' → logprob: -4.423730850219727
    5. '#' → logprob: -5.048730850219727
    6. 'print' → logprob: -6.048730850219727
    7. 'a' → logprob: -7.173730850219727
    8. 'if' → logprob: -9.173730850219727
    9. '<|end|>' → logprob: -9.548730850219727
    10. ')' → logprob: -9.673730850219727

Token 484: ' output' (ID: 4733)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.47839000821113586
    2. ' def' → logprob: -0.9783899784088135
    3. ' main' → logprob: -6.478390216827393
    4. 'if' → logprob: -6.603390216827393
    5. '
' → logprob: -7.603390216827393
    6. ' if' → logprob: -7.853390216827393
    7. 'n' → logprob: -8.603389739990234
    8. ' 
' → logprob: -9.478389739990234
    9. 'main' → logprob: -9.478389739990234
    10. '```' → logprob: -9.728389739990234

Token 485: '_result' (ID: 11623)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3373708724975586
    2. '()' → logprob: -1.3373708724975586
    3. '_' → logprob: -3.9623708724975586
    4. '(n' → logprob: -6.462370872497559
    5. '_l' → logprob: -7.087370872497559
    6. '('' → logprob: -8.087370872497559
    7. '("")' → logprob: -8.337370872497559
    8. '("("' → logprob: -8.587370872497559
    9. '_length' → logprob: -8.712370872497559
    10. '_(' → logprob: -8.712370872497559

Token 486: '(l' (ID: 4179)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.32427507638931274
    2. '()' → logprob: -1.324275016784668
    3. '(n' → logprob: -4.949275016784668
    4. '():' → logprob: -5.824275016784668
    5. '(()' → logprob: -8.449275016784668
    6. '('' → logprob: -8.699275016784668
    7. '("("' → logprob: -8.824275016784668
    8. ' ()' → logprob: -9.449275016784668
    9. '("")' → logprob: -10.074275016784668
    10. ':' → logprob: -10.199275016784668

Token 487: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.044839486479759216
    2. '):' → logprob: -3.169839382171631
    3. ',' → logprob: -6.544839382171631
    4. '):
' → logprob: -7.919839382171631
    5. '_' → logprob: -11.794839859008789
    6. '),' → logprob: -12.169839859008789
    7. ')
' → logprob: -12.169839859008789
    8. ',)' → logprob: -12.794839859008789
    9. '):

' → logprob: -12.919839859008789
    10. ').' → logprob: -12.919839859008789

Token 488: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0032007659319788218
    2. ' print' → logprob: -6.003200531005859
    3. '   ' → logprob: -7.253200531005859
    4. '```' → logprob: -11.00320053100586
    5. '	print' → logprob: -16.62820053100586
    6. '    
' → logprob: -16.75320053100586
    7. '``' → logprob: -17.50320053100586
    8. '
' → logprob: -17.75320053100586
    9. 'return' → logprob: -18.25320053100586
    10. ' 
' → logprob: -18.37820053100586

Token 489: ' if' (ID: 538)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -5.512236498361744e-07
    2. ' print' → logprob: -14.500000953674316
    3. '   ' → logprob: -18.0
    4. '```' → logprob: -19.25
    5. '	print' → logprob: -24.75
    6. '
' → logprob: -25.25
    7. '`' → logprob: -25.5
    8. 'pr' → logprob: -25.625
    9. 'if' (adapté à ' if') → logprob: -25.625
    10. '``' → logprob: -25.75

Token 490: ' l' (ID: 305)
  Prédit: ' l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.016060292720794678
    2. 'l' → logprob: -4.1410603523254395
    3. '_' → logprob: -11.391059875488281
    4. ' ' → logprob: -11.641059875488281
    5. '_l' → logprob: -13.141059875488281
    6. ' ' → logprob: -13.766059875488281
    7. 'n' → logprob: -14.016059875488281
    8. ' n' → logprob: -14.016059875488281
    9. '	l' → logprob: -15.641059875488281
    10. ' isinstance' → logprob: -15.766059875488281

Token 491: ' %' (ID: 1851)
  Prédit: ' <='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.6970774531364441
    2. ' >=' → logprob: -1.6970775127410889
    3. ' <' → logprob: -1.6970775127410889
    4. ' >' → logprob: -3.322077512741089
    5. '<=' → logprob: -3.447077512741089
    6. ' ==' → logprob: -3.697077512741089
    7. '>' → logprob: -4.44707727432251
    8. '<' → logprob: -4.44707727432251
    9. '>=' → logprob: -4.57207727432251
    10. '==' → logprob: -4.94707727432251

Token 492: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.021626602858304977
    2. ' ' → logprob: -3.8966267108917236
    3. '3' → logprob: -7.5216264724731445
    4. '==' → logprob: -8.521626472473145
    5. '4' → logprob: -8.646626472473145
    6. '=' → logprob: -9.396626472473145
    7. '6' → logprob: -10.771626472473145
    8. '```' → logprob: -11.146626472473145
    9. '1' → logprob: -11.521626472473145
    10. ' ==' → logprob: -11.771626472473145

Token 493: '3' (ID: 18)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0014390426222234964
    2. '3' → logprob: -6.626439094543457
    3. '4' → logprob: -9.751439094543457
    4. ' ' → logprob: -10.626439094543457
    5. '6' → logprob: -12.001439094543457
    6. '1' → logprob: -12.251439094543457
    7. '```' → logprob: -12.501439094543457
    8. '7' → logprob: -13.001439094543457
    9. '10' → logprob: -13.126439094543457
    10. '5' → logprob: -13.563939094543457

Token 494: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.02385677769780159
    2. ' ==' → logprob: -3.7738568782806396
    3. '!=' → logprob: -7.5238566398620605
    4. ' !=' → logprob: -10.273857116699219
    5. ':' → logprob: -11.398857116699219
    6. '==
' → logprob: -11.523857116699219
    7. '=' → logprob: -12.273857116699219
    8. '()==' → logprob: -13.148857116699219
    9. '>' → logprob: -13.523857116699219
    10. '===' → logprob: -13.898857116699219

Token 495: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0021735779009759426
    2. '2' → logprob: -7.12717342376709
    3. ' ' → logprob: -7.25217342376709
    4. '1' → logprob: -7.37717342376709
    5. '=' → logprob: -10.37717342376709
    6. '
' → logprob: -13.62717342376709
    7. '```' → logprob: -14.00217342376709
    8. '==' → logprob: -14.37717342376709
    9. '=
' → logprob: -16.502174377441406
    10. '==
' → logprob: -16.939674377441406

Token 496: '2' (ID: 17)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0025506927631795406
    2. '2' → logprob: -6.6275506019592285
    3. '1' → logprob: -7.1275506019592285
    4. '=' → logprob: -8.377551078796387
    5. ' ' → logprob: -8.627551078796387
    6. '==' → logprob: -11.877551078796387
    7. '
' → logprob: -13.252551078796387
    8. '```' → logprob: -13.627551078796387
    9. '=
' → logprob: -13.877551078796387
    10. '==
' → logprob: -15.252551078796387

Token 497: ':
' (ID: 734)
  Prédit: ':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':
' → logprob: -0.5761926770210266
    2. ':' → logprob: -0.8261926770210266
    3. '   ' → logprob: -9.451192855834961
    4. '==' → logprob: -9.951192855834961
    5. ' :
' → logprob: -10.076192855834961
    6. ' and' → logprob: -10.576192855834961
    7. ' or' → logprob: -10.826192855834961
    8. ' :' → logprob: -11.076192855834961
    9. ' ==' → logprob: -11.826192855834961
    10. ':
' → logprob: -12.826192855834961

Token 498: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5503515005111694
    2. '       ' → logprob: -0.9253515005111694
    3. ':' → logprob: -4.300351619720459
    4. ':
' → logprob: -4.425351619720459
    5. ' print' → logprob: -8.1753511428833
    6. ' ' → logprob: -8.8003511428833
    7. ',' → logprob: -9.0503511428833
    8. ' and' → logprob: -9.1753511428833
    9. '.' → logprob: -9.1753511428833
    10. '    ' → logprob: -9.6753511428833

Token 499: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.08590774983167648
    2. ' print' → logprob: -2.8359076976776123
    3. '   ' → logprob: -3.9609076976776123
    4. '
' → logprob: -6.335907936096191
    5. ' l' → logprob: -6.585907936096191
    6. 'l' → logprob: -6.835907936096191
    7. ' ' → logprob: -9.085907936096191
    8. 'return' → logprob: -9.835907936096191
    9. '       ' → logprob: -9.960907936096191
    10. '	print' → logprob: -10.335907936096191

Token 500: '("' (ID: 568)
  Prédit: '(l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(l' → logprob: -0.8876689672470093
    2. 'l' → logprob: -1.2626689672470093
    3. '(' → logprob: -1.7626689672470093
    4. '((' → logprob: -2.512669086456299
    5. '2' → logprob: -3.637669086456299
    6. '1' → logprob: -4.387669086456299
    7. '3' → logprob: -5.012669086456299
    8. '0' → logprob: -6.012669086456299
    9. '4' → logprob: -6.887669086456299
    10. '("' → logprob: -7.512669086456299

Token 501: 'Second' (ID: 17422)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '2' → logprob: -0.6581858396530151
    2. '1' → logprob: -1.9081858396530151
    3. '-' → logprob: -2.4081859588623047
    4. '3' → logprob: -2.6581859588623047
    5. 'l' → logprob: -3.0331859588623047
    6. '"' → logprob: -3.4081859588623047
    7. '(l' → logprob: -3.6581859588623047
    8. '((' → logprob: -4.158185958862305
    9. '0' → logprob: -4.408185958862305
    10. ' ' → logprob: -4.908185958862305

Token 502: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -0.46651697158813477
    2. 'Player' → logprob: -1.4665169715881348
    3. ' Player' → logprob: -2.5915169715881348
    4. ' player' → logprob: -3.0915169715881348
    5. 'player' → logprob: -4.966516971588135
    6. '_player' → logprob: -5.341516971588135
    7. ')' → logprob: -6.216516971588135
    8. '"' → logprob: -6.466516971588135
    9. '_Player' → logprob: -6.466516971588135
    10. '-player' → logprob: -7.091516971588135

Token 503: '   ' (ID: 271)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.05599047243595123
    2. 'elif' → logprob: -2.93099045753479
    3. '   ' → logprob: -7.430990695953369
    4. ' else' → logprob: -7.805990695953369
    5. '<|end|>' → logprob: -9.680990219116211
    6. ' elif' → logprob: -11.180990219116211
    7. 'if' → logprob: -11.805990219116211
    8. '```' → logprob: -12.555990219116211
    9. 'el' → logprob: -12.555990219116211
    10. 'def' → logprob: -12.805990219116211

Token 504: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.16275686025619507
    2. 'elif' → logprob: -1.9127569198608398
    3. ' else' → logprob: -6.03775691986084
    4. ' elif' → logprob: -9.03775691986084
    5. 'el' → logprob: -10.78775691986084
    6. ' ' → logprob: -13.66275691986084
    7. 'e' → logprob: -14.91275691986084
    8. '   ' → logprob: -15.41275691986084
    9. 'lse' → logprob: -15.53775691986084
    10. '	elif' → logprob: -15.66275691986084

Token 505: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.29773658514022827
    2. ':
' → logprob: -1.422736644744873
    3. '       ' → logprob: -4.172736644744873
    4. ' :
' → logprob: -7.547736644744873
    5. '   ' → logprob: -8.172736167907715
    6. ' :' → logprob: -8.672736167907715
    7. '    ' → logprob: -10.797736167907715
    8. '      ' → logprob: -11.422736167907715
    9. ':
' → logprob: -11.797736167907715
    10. '     ' → logprob: -12.172736167907715

Token 506: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.6011030673980713
    2. ' print' → logprob: -1.4761030673980713
    3. 'print' → logprob: -1.7261030673980713
    4. '   ' → logprob: -3.1011030673980713
    5. '	print' → logprob: -8.601102828979492
    6. '    ' → logprob: -9.601102828979492
    7. ' ' → logprob: -11.101102828979492
    8. '     ' → logprob: -12.101102828979492
    9. '```' → logprob: -12.851102828979492
    10. '	' → logprob: -13.101102828979492

Token 507: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.1002078503370285
    2. ' print' → logprob: -2.350207805633545
    3. '   ' → logprob: -14.225208282470703
    4. '    ' → logprob: -15.475208282470703
    5. '       ' → logprob: -15.725208282470703
    6. '	print' → logprob: -15.725208282470703
    7. '.print' → logprob: -18.100208282470703
    8. ' ' → logprob: -18.100208282470703
    9. '        ' → logprob: -18.850208282470703
    10. '
' → logprob: -18.975208282470703

Token 508: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.023290548473596573
    2. '(' → logprob: -3.7732906341552734
    3. '("("' → logprob: -10.898290634155273
    4. '("")' → logprob: -11.148290634155273
    5. '('' → logprob: -12.148290634155273
    6. '()' → logprob: -12.523290634155273
    7. '(
' → logprob: -13.398290634155273
    8. '(""' → logprob: -14.398290634155273
    9. '(None' → logprob: -15.023290634155273
    10. '(("' → logprob: -15.148290634155273

Token 509: 'First' (ID: 7127)
  Prédit: 'First'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'First' → logprob: -0.03367140144109726
    2. '"' → logprob: -3.4086713790893555
    3. 'first' → logprob: -11.908671379089355
    4. 'Second' → logprob: -12.408671379089355
    5. ''' → logprob: -12.908671379089355
    6. '"D' → logprob: -13.033671379089355
    7. ' First' → logprob: -13.158671379089355
    8. 'Third' → logprob: -13.408671379089355
    9. 'F' → logprob: -13.658671379089355
    10. '"A' → logprob: -14.408671379089355

Token 510: '")

' (ID: 10822)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -8.180258191714529e-06
    2. '")
' → logprob: -12.625008583068848
    3. ')' → logprob: -13.125008583068848
    4. '()' → logprob: -13.375008583068848
    5. '')' → logprob: -14.375008583068848
    6. ' ")' → logprob: -15.000008583068848
    7. ')")' → logprob: -15.625008583068848
    8. '```' → logprob: -16.75000762939453
    9. '!")' → logprob: -17.00000762939453
    10. '}")' → logprob: -17.62500762939453

Token 511: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.16042254865169525
    2. 'n' → logprob: -1.9104225635528564
    3. '#' → logprob: -9.660422325134277
    4. 'a' → logprob: -9.910422325134277
    5. 'if' → logprob: -10.035422325134277
    6. '```' → logprob: -10.660422325134277
    7. 'ndef' → logprob: -12.160422325134277
    8. 'print' → logprob: -12.285422325134277
    9. ' n' → logprob: -12.785422325134277
    10. 'import' → logprob: -13.035422325134277

Token 512: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.0006093903793953359
    2. ' main' → logprob: -7.500609397888184
    3. 'def' → logprob: -9.875609397888184
    4. 'run' → logprob: -12.375609397888184
    5. '__' → logprob: -15.125609397888184
    6. 'if' → logprob: -15.375609397888184
    7. 'solve' → logprob: -15.750609397888184
    8. 'process' → logprob: -16.625608444213867
    9. 'root' → logprob: -17.750608444213867
    10. 'play' → logprob: -17.750608444213867

Token 513: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -7.107425062713446e-06
    2. '():
' → logprob: -12.375006675720215
    3. ' ():' → logprob: -12.875006675720215
    4. '()' → logprob: -16.00000762939453
    5. '_' → logprob: -16.87500762939453
    6. '(' → logprob: -17.37500762939453
    7. '():
' → logprob: -17.50000762939453
    8. '().' → logprob: -19.37500762939453
    9. '():

' → logprob: -19.87500762939453
    10. '()>' → logprob: -20.25000762939453

Token 514: '   ' (ID: 271)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.2751356363296509
    2. '   ' → logprob: -1.5251356363296509
    3. ' n' → logprob: -3.7751355171203613
    4. '	n' → logprob: -12.40013599395752
    5. '```' → logprob: -13.65013599395752
    6. ',n' → logprob: -17.525135040283203
    7. '_n' → logprob: -17.525135040283203
    8. ' ' → logprob: -18.025135040283203
    9. '(n' → logprob: -18.275135040283203
    10. '  ' → logprob: -18.775135040283203

Token 515: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.0005535095697268844
    2. ' n' → logprob: -7.500553607940674
    3. '   ' → logprob: -14.625553131103516
    4. '	n' → logprob: -17.375553131103516
    5. '
' → logprob: -18.250553131103516
    6. '```' → logprob: -19.250553131103516
    7. ' ' → logprob: -19.375553131103516
    8. '    
' → logprob: -20.375553131103516
    9. '  ' → logprob: -21.125553131103516
    10. 'num' → logprob: -21.375553131103516

Token 516: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.12692968547344208
    2. '=' → logprob: -2.126929759979248
    3. ' ' → logprob: -14.50192928314209
    4. ',' → logprob: -15.00192928314209
    5. ')' → logprob: -15.25192928314209
    6. '=int' → logprob: -15.25192928314209
    7. ' ' → logprob: -16.251930236816406
    8. '   ' → logprob: -16.376930236816406
    9. ' =
' → logprob: -16.626930236816406
    10. '_' → logprob: -17.251930236816406

Token 517: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.25192955136299133
    2. ' get' → logprob: -1.501929521560669
    3. 'int' → logprob: -15.00192928314209
    4. ' int' → logprob: -16.126930236816406
    5. '_get' → logprob: -17.501930236816406
    6. '=get' → logprob: -17.751930236816406
    7. '(get' → logprob: -18.376930236816406
    8. '	get' → logprob: -18.751930236816406
    9. ' ' → logprob: -19.001930236816406
    10. '[get' → logprob: -20.001930236816406

Token 518: '_node' (ID: 11390)
  Prédit: '_node'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_node' → logprob: -9.186122770188376e-05
    2. '_' → logprob: -9.625091552734375
    3. '_n' → logprob: -11.125091552734375
    4. '_token' → logprob: -12.375091552734375
    5. '_nodes' → logprob: -13.125091552734375
    6. 'node' → logprob: -13.375091552734375
    7. '_user' → logprob: -14.250091552734375
    8. '_code' → logprob: -14.250091552734375
    9. ' _' → logprob: -14.875091552734375
    10. '_Node' → logprob: -15.000091552734375

Token 519: '_count' (ID: 7536)
  Prédit: '_count'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_count' → logprob: -0.0011593853123486042
    2. 'count' → logprob: -7.126159191131592
    3. '()' → logprob: -8.00115966796875
    4. 's' → logprob: -11.62615966796875
    5. '_' → logprob: -12.00115966796875
    6. '_counts' → logprob: -13.25115966796875
    7. '_co' → logprob: -14.25115966796875
    8. 'Count' → logprob: -14.62615966796875
    9. '(' → logprob: -15.25115966796875
    10. ' count' → logprob: -15.37615966796875

Token 520: '()
' (ID: 1234)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.43512824177742004
    2. '
' → logprob: -1.0601282119750977
    3. '<|end|>' → logprob: -5.560128211975098
    4. '    
' → logprob: -7.435128211975098
    5. 'n' → logprob: -7.560128211975098
    6. '	tree' → logprob: -7.685128211975098
    7. '```' → logprob: -8.310128211975098
    8. '  
' → logprob: -9.060128211975098
    9. '<|end|>' → logprob: -9.185128211975098
    10. '
' → logprob: -9.310128211975098

Token 521: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04560066759586334
    2. 'tree' → logprob: -3.670600652694702
    3. '	tree' → logprob: -4.420600891113281
    4. ' tree' → logprob: -5.795600891113281
    5. '<|end|>' → logprob: -6.170600891113281
    6. '```' → logprob: -6.545600891113281
    7. '(tree' → logprob: -8.295600891113281
    8. ' ' → logprob: -9.545600891113281
    9. '  ' → logprob: -10.170600891113281
    10. '    
' → logprob: -10.295600891113281

Token 522: ' tree' (ID: 8165)
  Prédit: 'tree'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tree' (adapté à ' tree') → logprob: -0.0033488208428025246
    2. ' tree' → logprob: -5.7533488273620605
    3. '   ' → logprob: -8.878348350524902
    4. 't' → logprob: -11.128348350524902
    5. '	tree' → logprob: -11.128348350524902
    6. '```' → logprob: -14.128348350524902
    7. 'tre' → logprob: -14.753348350524902
    8. '(tree' → logprob: -15.003348350524902
    9. '
' → logprob: -16.25334930419922
    10. '/tree' → logprob: -16.25334930419922

Token 523: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3132622241973877
    2. '=' → logprob: -1.3132622241973877
    3. ',' → logprob: -14.813261985778809
    4. ' ' → logprob: -16.813262939453125
    5. ')' → logprob: -18.188262939453125
    6. '.' → logprob: -18.688262939453125
    7. '＝' → logprob: -18.813262939453125
    8. 's' → logprob: -19.188262939453125
    9. '   ' → logprob: -19.688262939453125
    10. '=create' → logprob: -19.688262939453125

Token 524: ' build' (ID: 3024)
  Prédit: ' build'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' build' → logprob: -0.061967797577381134
    2. 'build' → logprob: -2.8119678497314453
    3. '(build' → logprob: -16.811967849731445
    4. '	build' → logprob: -16.811967849731445
    5. ' buil' → logprob: -17.936967849731445
    6. '_build' → logprob: -18.436967849731445
    7. ' building' → logprob: -18.561967849731445
    8. '.build' → logprob: -19.061967849731445
    9. ' buildup' → logprob: -19.436967849731445
    10. '   ' → logprob: -20.061967849731445

Token 525: '_tree' (ID: 27118)
  Prédit: '_tree'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_tree' → logprob: -0.00022094044834375381
    2. '(tree' → logprob: -8.500221252441406
    3. 'tree' → logprob: -11.000221252441406
    4. '_' → logprob: -15.250221252441406
    5. '(_' → logprob: -15.875221252441406
    6. ' tree' → logprob: -16.375221252441406
    7. '_TREE' → logprob: -16.500221252441406
    8. '	tree' → logprob: -17.000221252441406
    9. '_t' → logprob: -17.125221252441406
    10. ' _' → logprob: -17.250221252441406

Token 526: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -2.7014437364414334e-05
    2. '(' → logprob: -11.00002670288086
    3. ' (' → logprob: -11.50002670288086
    4. ',' → logprob: -16.75002670288086
    5. '```' → logprob: -18.00002670288086
    6. '(node' → logprob: -18.75002670288086
    7. '(len' → logprob: -19.00002670288086
    8. '   ' → logprob: -19.12502670288086
    9. '(noun' → logprob: -19.12502670288086
    10. ')(' → logprob: -19.25002670288086

Token 527: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.584861744660884e-05
    2. ')
' → logprob: -10.000045776367188
    3. '   ' → logprob: -14.750045776367188
    4. ' )' → logprob: -16.875045776367188
    5. ')n' → logprob: -18.250045776367188
    6. ')
' → logprob: -18.375045776367188
    7. '),' → logprob: -18.625045776367188
    8. ')

' → logprob: -19.250045776367188
    9. ').' → logprob: -20.375045776367188
    10. '))' → logprob: -20.375045776367188

Token 528: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0473635196685791
    2. 'a' → logprob: -3.172363519668579
    3. ' a' → logprob: -5.54736328125
    4. 'l' → logprob: -8.42236328125
    5. 'second' → logprob: -9.29736328125
    6. ' l' → logprob: -9.79736328125
    7. ' second' → logprob: -10.92236328125
    8. 'first' → logprob: -11.42236328125
    9. 's' → logprob: -11.54736328125
    10. 'b' → logprob: -11.54736328125

Token 529: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' (adapté à ' a') → logprob: -0.009801419451832771
    2. ' a' → logprob: -4.759801387786865
    3. 'first' → logprob: -6.884801387786865
    4. ' first' → logprob: -9.634801864624023
    5. 'start' → logprob: -10.009801864624023
    6. '   ' → logprob: -10.634801864624023
    7. 'node' → logprob: -12.009801864624023
    8. 'f' → logprob: -12.759801864624023
    9. 'second' → logprob: -12.884801864624023
    10. 'x' → logprob: -13.259801864624023

Token 530: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.003600901924073696
    2. '=' → logprob: -5.62860107421875
    3. ',' → logprob: -14.25360107421875
    4. '_' → logprob: -16.25360107421875
    5. ' ' → logprob: -16.50360107421875
    6. ' ' → logprob: -18.12860107421875
    7. '_first' → logprob: -19.00360107421875
    8. 'a' → logprob: -19.12860107421875
    9. '_=' → logprob: -19.12860107421875
    10. '1' → logprob: -19.62860107421875

Token 531: ' bfs' (ID: 147571)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.02975199744105339
    2. ' bfs' → logprob: -3.529752016067505
    3. '   ' → logprob: -13.904751777648926
    4. ' b' → logprob: -15.904751777648926
    5. ' ' → logprob: -15.904751777648926
    6. 'f' → logprob: -16.779752731323242
    7. 'bf' → logprob: -16.779752731323242
    8. '	b' → logprob: -17.279752731323242
    9. 'bs' → logprob: -17.404752731323242
    10. '[b' → logprob: -17.779752731323242

Token 532: '_first' (ID: 29347)
  Prédit: '_first'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_first' → logprob: -1.981667537620524e-06
    2. '_second' → logprob: -13.250001907348633
    3. '_' → logprob: -16.375001907348633
    4. '_f' → logprob: -17.625001907348633
    5. ''_' → logprob: -18.250001907348633
    6. '_FIRST' → logprob: -18.500001907348633
    7. 'first' → logprob: -18.625001907348633
    8. ' _' → logprob: -18.625001907348633
    9. '```' → logprob: -18.875001907348633
    10. 'First' → logprob: -19.625001907348633

Token 533: '(tree' (ID: 44909)
  Prédit: '(tree'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(tree' → logprob: -3.054500666621607e-06
    2. '(' → logprob: -13.25000286102295
    3. ' (' → logprob: -13.75000286102295
    4. '(
' → logprob: -16.250003814697266
    5. '(Tree' → logprob: -16.500003814697266
    6. '(train' → logprob: -17.625003814697266
    7. '(t' → logprob: -18.375003814697266
    8. '(table' → logprob: -18.750003814697266
    9. '(team' → logprob: -19.875003814697266
    10. '```' → logprob: -19.875003814697266

Token 534: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.0564331205387134e-05
    2. ',n' → logprob: -11.62501049041748
    3. ' ,' → logprob: -14.00001049041748
    4. ',
' → logprob: -14.50001049041748
    5. ')' → logprob: -16.125011444091797
    6. '   ' → logprob: -16.625011444091797
    7. '‌,' → logprob: -18.000011444091797
    8. ',t' → logprob: -18.625011444091797
    9. ',node' → logprob: -19.000011444091797
    10. ',user' → logprob: -19.750011444091797

Token 535: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.07889000326395035
    2. ' n' → logprob: -2.578890085220337
    3. '   ' → logprob: -16.453889846801758
    4. ')n' → logprob: -16.453889846801758
    5. '	n' → logprob: -17.203889846801758
    6. ')' → logprob: -17.453889846801758
    7. ' ' → logprob: -18.703889846801758
    8. '_n' → logprob: -18.953889846801758
    9. '(n' → logprob: -19.453889846801758
    10. ',n' → logprob: -19.953889846801758

Token 536: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.8961017202818766e-05
    2. ')
' → logprob: -9.750059127807617
    3. ' )' → logprob: -15.250059127807617
    4. '   ' → logprob: -15.500059127807617
    5. ')

' → logprob: -16.250059127807617
    6. ')
' → logprob: -17.125059127807617
    7. '),' → logprob: -17.625059127807617
    8. '))' → logprob: -18.250059127807617
    9. ')#' → logprob: -18.750059127807617
    10. ')}' → logprob: -18.875059127807617

Token 537: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004425132647156715
    2. 'second' → logprob: -5.754425048828125
    3. ' second' → logprob: -6.754425048828125
    4. '	second' → logprob: -10.379425048828125
    5. 'b' → logprob: -10.754425048828125
    6. '
' → logprob: -11.379425048828125
    7. '    
' → logprob: -12.254425048828125
    8. '```' → logprob: -12.629425048828125
    9. '_second' → logprob: -12.879425048828125
    10. 'a' → logprob: -13.004425048828125

Token 538: ' result' (ID: 1534)
  Prédit: 'second'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'second' → logprob: -0.003230829257518053
    2. ' second' → logprob: -6.378231048583984
    3. '   ' → logprob: -6.503231048583984
    4. 'b' → logprob: -11.003231048583984
    5. 'result' (adapté à ' result') → logprob: -12.253231048583984
    6. '	second' → logprob: -12.378231048583984
    7. '```' → logprob: -14.128231048583984
    8. ' ' → logprob: -14.253231048583984
    9. '
' → logprob: -14.878231048583984
    10. '  ' → logprob: -15.128231048583984

Token 539: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.25412219762802124
    2. ' =' → logprob: -1.504122257232666
    3. '_' → logprob: -6.129122257232666
    4. ',' → logprob: -11.879121780395508
    5. 's' → logprob: -13.254121780395508
    6. '_=' → logprob: -14.004121780395508
    7. ' ' → logprob: -14.379121780395508
    8. ' ' → logprob: -14.754121780395508
    9. ')' → logprob: -15.254121780395508
    10. '   ' → logprob: -15.379121780395508

Token 540: ' bfs' (ID: 147571)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.2811680734157562
    2. ' bfs' → logprob: -1.4061681032180786
    3. '   ' → logprob: -12.156167984008789
    4. ' b' → logprob: -12.406167984008789
    5. ' ' → logprob: -12.906167984008789
    6. 'bf' → logprob: -13.906167984008789
    7. '	b' → logprob: -14.156167984008789
    8. '(b' → logprob: -14.156167984008789
    9. 'f' → logprob: -14.531167984008789
    10. '[b' → logprob: -14.906167984008789

Token 541: '_second' (ID: 67724)
  Prédit: '_second'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_second' → logprob: -5.512236498361744e-07
    2. '_first' → logprob: -14.750000953674316
    3. 'second' → logprob: -16.375
    4. '_' → logprob: -20.125
    5. '_secondary' → logprob: -21.125
    6. '```' → logprob: -21.375
    7. '"_' → logprob: -21.625
    8. '(second' → logprob: -21.75
    9. '_se' → logprob: -22.0
    10. ''_' → logprob: -22.0

Token 542: '(tree' (ID: 44909)
  Prédit: '(tree'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(tree' → logprob: -2.2200749754119897e-06
    2. '(' → logprob: -13.125001907348633
    3. ' (' → logprob: -16.875001907348633
    4. '(
' → logprob: -17.875001907348633
    5. '```' → logprob: -18.000001907348633
    6. '(Tree' → logprob: -18.625001907348633
    7. '(team' → logprob: -19.375001907348633
    8. '(t' → logprob: -19.500001907348633
    9. '(table' → logprob: -19.625001907348633
    10. '(tile' → logprob: -20.000001907348633

Token 543: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.006011033430695534
    2. '(tree' → logprob: -5.131011009216309
    3. ',
' → logprob: -9.756011009216309
    4. ')' → logprob: -11.256011009216309
    5. ' ,' → logprob: -12.381011009216309
    6. '   ' → logprob: -12.631011009216309
    7. '(' → logprob: -13.756011009216309
    8. '[' → logprob: -14.881011009216309
    9. '```' → logprob: -14.881011009216309
    10. '<Tree' → logprob: -15.006011009216309

Token 544: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.4740825295448303
    2. 'n' → logprob: -0.9740825295448303
    3. '   ' → logprob: -13.474082946777344
    4. 'tree' → logprob: -13.474082946777344
    5. '	n' → logprob: -14.349082946777344
    6. ' tree' → logprob: -14.599082946777344
    7. ')n' → logprob: -14.599082946777344
    8. ')' → logprob: -15.224082946777344
    9. ' ' → logprob: -15.349082946777344
    10. '```' → logprob: -15.974082946777344

Token 545: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.0921942703134846e-05
    2. ' ,' → logprob: -11.87501049041748
    3. ',
' → logprob: -13.62501049041748
    4. '   ' → logprob: -13.75001049041748
    5. ',a' → logprob: -14.12501049041748
    6. '(tree' → logprob: -14.50001049041748
    7. ')' → logprob: -15.00001049041748
    8. 'a' → logprob: -16.375011444091797
    9. '(),' → logprob: -18.125011444091797
    10. '```' → logprob: -18.125011444091797

Token 546: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.00015860427811276168
    2. ' a' → logprob: -8.750158309936523
    3. ')a' → logprob: -16.375158309936523
    4. ')' → logprob: -17.375158309936523
    5. '   ' → logprob: -18.125158309936523
    6. '	a' → logprob: -18.750158309936523
    7. ' ' → logprob: -20.875158309936523
    8. '[a' → logprob: -21.250158309936523
    9. 'а' → logprob: -21.375158309936523
    10. '(a' → logprob: -21.625158309936523

Token 547: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0007107630372047424
    2. ')
' → logprob: -7.250710964202881
    3. ' )' → logprob: -15.000710487365723
    4. ')
' → logprob: -15.375710487365723
    5. '   ' → logprob: -16.00071144104004
    6. ')[' → logprob: -17.25071144104004
    7. ')

' → logprob: -17.75071144104004
    8. ' ' → logprob: -19.37571144104004
    9. ')`' → logprob: -19.62571144104004
    10. ')a' → logprob: -19.75071144104004

Token 548: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.32339876890182495
    2. 'l' → logprob: -1.3233988285064697
    3. ' l' → logprob: -4.823398590087891
    4. '	l' → logprob: -6.823398590087891
    5. '
' → logprob: -7.073398590087891
    6. '```' → logprob: -9.82339859008789
    7. '    
' → logprob: -11.19839859008789
    8. '  ' → logprob: -11.57339859008789
    9. '_l' → logprob: -11.82339859008789
    10. 'L' → logprob: -11.94839859008789

Token 549: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' (adapté à ' l') → logprob: -0.01858287677168846
    2. ' l' → logprob: -4.018582820892334
    3. '   ' → logprob: -7.768582820892334
    4. '	l' → logprob: -11.893583297729492
    5. 'L' → logprob: -13.518583297729492
    6. '
' → logprob: -14.393583297729492
    7. '```' → logprob: -14.893583297729492
    8. '  ' → logprob: -15.143583297729492
    9. ' ' → logprob: -15.143583297729492
    10. '_l' → logprob: -15.393583297729492

Token 550: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.20144140720367432
    2. '=' → logprob: -1.7014414072036743
    3. '_' → logprob: -10.701441764831543
    4. ' ' → logprob: -12.701441764831543
    5. ',' → logprob: -13.451441764831543
    6. ' =
' → logprob: -14.576441764831543
    7. '	' → logprob: -15.951441764831543
    8. '_=' → logprob: -16.326440811157227
    9. ' ' → logprob: -16.576440811157227
    10. ' _' → logprob: -16.701440811157227

Token 551: ' compute' (ID: 23864)
  Prédit: 'compute'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'compute' → logprob: -0.3868710398674011
    2. ' compute' → logprob: -1.136871099472046
    3. '_compute' → logprob: -19.511871337890625
    4. '.compute' → logprob: -20.386871337890625
    5. ' ' → logprob: -20.886871337890625
    6. '   ' → logprob: -21.261871337890625
    7. 'computer' → logprob: -21.511871337890625
    8. 'comput' → logprob: -21.886871337890625
    9. ' ' → logprob: -23.011871337890625
    10. 'calculate' → logprob: -23.636871337890625

Token 552: '_l' (ID: 1478)
  Prédit: '_l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_l' → logprob: -2.696889623621246e-06
    2. '_' → logprob: -13.00000286102295
    3. '(' → logprob: -16.250001907348633
    4. '_length' → logprob: -16.375001907348633
    5. 'l' → logprob: -16.625001907348633
    6. ' _' → logprob: -16.875001907348633
    7. '(l' → logprob: -17.375001907348633
    8. '(n' → logprob: -17.500001907348633
    9. '(_' → logprob: -18.125001907348633
    10. '_(' → logprob: -18.375001907348633

Token 553: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0028137899935245514
    2. '(' → logprob: -5.877813816070557
    3. ' (' → logprob: -12.127813339233398
    4. '(
' → logprob: -12.752813339233398
    5. '(len' → logprob: -14.502813339233398
    6. '```' → logprob: -17.6278133392334
    7. '（' → logprob: -17.8778133392334
    8. '(
' → logprob: -18.0028133392334
    9. '(

' → logprob: -18.1278133392334
    10. '(l' → logprob: -18.7528133392334

Token 554: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -2.8206473871250637e-05
    2. ',result' → logprob: -10.500028610229492
    3. ' ,' → logprob: -15.125028610229492
    4. ')' → logprob: -16.500028610229492
    5. ',n' → logprob: -16.750028610229492
    6. ',
' → logprob: -16.875028610229492
    7. '(result' → logprob: -16.875028610229492
    8. '(' → logprob: -17.500028610229492
    9. 'result' → logprob: -17.750028610229492
    10. ',l' → logprob: -18.625028610229492

Token 555: ' result' (ID: 1534)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.023245712742209435
    2. ' result' → logprob: -3.7732458114624023
    3. '(result' → logprob: -15.273245811462402
    4. ')' → logprob: -18.898244857788086
    5. '	result' → logprob: -19.523244857788086
    6. '_result' → logprob: -19.523244857788086
    7. '[result' → logprob: -19.648244857788086
    8. '=result' → logprob: -19.898244857788086
    9. '$result' → logprob: -20.898244857788086
    10. '
' → logprob: -20.898244857788086

Token 556: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -8.2994620242971e-06
    2. ')
' → logprob: -11.750008583068848
    3. ' )' → logprob: -15.500008583068848
    4. '   ' → logprob: -17.12500762939453
    5. ')
' → logprob: -18.75000762939453
    6. ')

' → logprob: -19.37500762939453
    7. ' ' → logprob: -19.50000762939453
    8. '),' → logprob: -19.75000762939453
    9. '))' → logprob: -20.12500762939453
    10. ')`' → logprob: -20.12500762939453

Token 557: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6987225413322449
    2. 'output' → logprob: -0.6987225413322449
    3. ' output' → logprob: -5.1987223625183105
    4. '	output' → logprob: -10.573722839355469
    5. '(output' → logprob: -12.823722839355469
    6. '_output' → logprob: -13.073722839355469
    7. '  ' → logprob: -13.198722839355469
    8. '
' → logprob: -13.448722839355469
    9. ' ' → logprob: -13.698722839355469
    10. '```' → logprob: -14.073722839355469

Token 558: ' output' (ID: 4733)
  Prédit: 'output'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'output' (adapté à ' output') → logprob: -0.00016027313540689647
    2. ' output' → logprob: -8.750160217285156
    3. '   ' → logprob: -13.250160217285156
    4. '	output' → logprob: -17.750160217285156
    5. '(output' → logprob: -18.625160217285156
    6. '_output' → logprob: -19.500160217285156
    7. ' ' → logprob: -20.500160217285156
    8. '  ' → logprob: -21.375160217285156
    9. '$output' → logprob: -21.625160217285156
    10. 'Output' → logprob: -21.750160217285156

Token 559: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -2.2200749754119897e-06
    2. '_' → logprob: -13.750001907348633
    3. '_results' → logprob: -15.250001907348633
    4. 'result' → logprob: -15.250001907348633
    5. '_RESULT' → logprob: -16.125001907348633
    6. '```' → logprob: -16.125001907348633
    7. '_res' → logprob: -16.375001907348633
    8. '\' → logprob: -16.875001907348633
    9. '_output' → logprob: -16.875001907348633
    10. ' _' → logprob: -17.000001907348633

Token 560: '(l' (ID: 4179)
  Prédit: '(l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(l' → logprob: -0.008615635335445404
    2. '(' → logprob: -4.758615493774414
    3. ' (' → logprob: -14.883615493774414
    4. '(ll' → logprob: -15.258615493774414
    5. '(s' → logprob: -15.883615493774414
    6. '(ls' → logprob: -16.633615493774414
    7. '(n' → logprob: -16.883615493774414
    8. '(
' → logprob: -17.008615493774414
    9. '(L' → logprob: -17.008615493774414
    10. '(lp' → logprob: -17.508615493774414

Token 561: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.816093228830141e-06
    2. ')
' → logprob: -13.00000286102295
    3. ' )' → logprob: -15.00000286102295
    4. '())' → logprob: -17.125001907348633
    5. '()' → logprob: -18.000001907348633
    6. ')`' → logprob: -18.375001907348633
    7. '   ' → logprob: -18.625001907348633
    8. ')#' → logprob: -18.875001907348633
    9. ')

' → logprob: -19.375001907348633
    10. '))' → logprob: -19.500001907348633

Token 562: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.008782025426626205
    2. 'main' → logprob: -4.758781909942627
    3. '
' → logprob: -9.508782386779785
    4. '```' → logprob: -9.883782386779785
    5. '\n' → logprob: -10.508782386779785
    6. '\' → logprob: -12.008782386779785
    7. ' if' → logprob: -12.133782386779785
    8. '#' → logprob: -13.758782386779785
    9. '(main' → logprob: -14.008782386779785
    10. ' main' → logprob: -14.383782386779785

Token 563: '()' (ID: 416)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 561
Tokens correctement prédits (1ère position, stricte): 265
Tokens correctement prédits (1ère position, avec adaptation): 299
Tokens correctement prédits (top 10): 502
Précision stricte (1ère position): 47.24%
Précision adaptée (1ère position): 53.30%
Précision (top 10): 89.48%
================================================================================
