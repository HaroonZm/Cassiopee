================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:43:30
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n, k = map(int, input().split())
h = list(map(int, input().split()))
h.sort()
i = 0
while i < n:
    if h[i] >= k:
        print(n - i)
        exit()
    i += 1
print(0)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' k' (ID: 372)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.025784850120544434
    2. ' =' → logprob: -3.775784969329834
    3. ',' → logprob: -6.025784969329834
    4. ' ' → logprob: -10.775784492492676
    5. '=
' → logprob: -10.775784492492676
    6. ')' → logprob: -11.150784492492676
    7. ''' → logprob: -11.525784492492676
    8. '=

' → logprob: -11.900784492492676
    9. '```' → logprob: -11.900784492492676
    10. ';' → logprob: -12.025784492492676

Token 4: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.08417297154664993
    2. '0' → logprob: -3.4591729640960693
    3. ' map' → logprob: -3.5841729640960693
    4. 'map' → logprob: -5.084173202514648
    5. 'input' → logprob: -5.209173202514648
    6. '10' → logprob: -5.459173202514648
    7. ' input' → logprob: -5.709173202514648
    8. ' int' → logprob: -6.834173202514648
    9. 'int' → logprob: -7.834173202514648
    10. ' n' → logprob: -7.959173202514648

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7028917074203491
    2. '<|end|>' → logprob: -0.8278917074203491
    3. '```' → logprob: -3.7028918266296387
    4. '(int' → logprob: -4.452891826629639
    5. '<|end|>' → logprob: -4.702891826629639
    6. '(lambda' → logprob: -4.827891826629639
    7. ')' → logprob: -6.077891826629639
    8. '(str' → logprob: -6.702891826629639
    9. '(user' → logprob: -7.077891826629639
    10. '(input' → logprob: -7.327891826629639

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.09442338347434998
    2. ')' → logprob: -2.844423294067383
    3. '(' → logprob: -3.719423294067383
    4. 'input' → logprob: -5.969423294067383
    5. '(str' → logprob: -6.719423294067383
    6. '(int' → logprob: -6.719423294067383
    7. '```' → logprob: -8.094423294067383
    8. '(raw' → logprob: -8.344423294067383
    9. '<|end|>' → logprob: -8.344423294067383
    10. '`)' → logprob: -8.469423294067383

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.38694268465042114
    2. ' input' → logprob: -1.1369426250457764
    3. '(input' → logprob: -9.636942863464355
    4. ')' → logprob: -12.261942863464355
    5. ',input' → logprob: -13.636942863464355
    6. '=input' → logprob: -15.761942863464355
    7. '[input' → logprob: -16.63694190979004
    8. '	input' → logprob: -17.01194190979004
    9. '<input' → logprob: -17.13694190979004
    10. '```' → logprob: -17.13694190979004

Token 8: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.36879536509513855
    2. '()' → logprob: -1.493795394897461
    3. '(' → logprob: -3.618795394897461
    4. ')' → logprob: -3.868795394897461
    5. '().' → logprob: -4.368795394897461
    6. '`()' → logprob: -5.118795394897461
    7. '`)' → logprob: -6.118795394897461
    8. '```' → logprob: -6.118795394897461
    9. '();)' → logprob: -6.243795394897461
    10. '(""))' → logprob: -6.493795394897461

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0025116894394159317
    2. 'strip' → logprob: -6.002511501312256
    3. 'rstrip' → logprob: -10.877511978149414
    4. ' split' → logprob: -11.752511978149414
    5. 'read' → logprob: -12.252511978149414
    6. ')' → logprob: -12.502511978149414
    7. '(split' → logprob: -15.127511978149414
    8. 'spl' → logprob: -15.877511978149414
    9. ' strip' → logprob: -16.627511978149414
    10. 'startswith' → logprob: -16.752511978149414

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08386377990245819
    2. '())' → logprob: -2.9588637351989746
    3. '))' → logprob: -3.5838637351989746
    4. '()' → logprob: -7.708863735198975
    5. '()))' → logprob: -8.583864212036133
    6. '`)' → logprob: -9.458864212036133
    7. '(' → logprob: -10.958864212036133
    8. ')`' → logprob: -11.333864212036133
    9. '')' → logprob: -11.833864212036133
    10. ')))' → logprob: -11.833864212036133

Token 11: 'h' (ID: 71)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.16001112759113312
    2. '```' → logprob: -3.285011053085327
    3. '
' → logprob: -3.785011053085327
    4. 'if' → logprob: -3.785011053085327
    5. '\' → logprob: -4.410011291503906
    6. 'for' → logprob: -4.535011291503906
    7. '#' → logprob: -5.160011291503906
    8. '`' → logprob: -5.410011291503906
    9. 'n' → logprob: -5.410011291503906
    10. ')' → logprob: -5.535011291503906

Token 12: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.040198374539613724
    2. 'e' → logprob: -3.91519832611084
    3. '[i' → logprob: -4.54019832611084
    4. ' =' → logprob: -5.54019832611084
    5. '=' → logprob: -6.91519832611084
    6. '[e' → logprob: -7.16519832611084
    7. '[]' → logprob: -7.41519832611084
    8. '_' → logprob: -7.66519832611084
    9. '[:]' → logprob: -7.79019832611084
    10. 'a' → logprob: -7.79019832611084

Token 13: ' list' (ID: 1562)
  Prédit: ' ['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.6082995533943176
    2. ' list' → logprob: -1.4832994937896729
    3. '[int' → logprob: -2.358299493789673
    4. ' []' → logprob: -2.858299493789673
    5. 'list' → logprob: -3.108299493789673
    6. '[' → logprob: -3.983299493789673
    7. '[]' → logprob: -4.733299732208252
    8. '[list' → logprob: -5.983299732208252
    9. '[n' → logprob: -7.108299732208252
    10. ' int' → logprob: -8.358299255371094

Token 14: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.018755685538053513
    2. '(range' → logprob: -4.393755912780762
    3. '(h' → logprob: -5.518755912780762
    4. '()' → logprob: -7.643755912780762
    5. '(map' → logprob: -7.643755912780762
    6. '(int' → logprob: -8.143755912780762
    7. '(n' → logprob: -8.518755912780762
    8. '(np' → logprob: -9.018755912780762
    9. '(input' → logprob: -9.393755912780762
    10. '```' → logprob: -9.393755912780762

Token 15: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.023430535569787025
    2. '(' → logprob: -3.773430585861206
    3. '<int' → logprob: -9.523430824279785
    4. '[int' → logprob: -10.648430824279785
    5. 'int' → logprob: -10.898430824279785
    6. '(input' → logprob: -11.273430824279785
    7. ')(' → logprob: -11.398430824279785
    8. '=int' → logprob: -11.648430824279785
    9. '(str' → logprob: -11.898430824279785
    10. '```' → logprob: -12.148430824279785

Token 16: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0470559298992157
    2. ',input' → logprob: -3.547055959701538
    3. ',' → logprob: -4.172055721282959
    4. '(' → logprob: -6.547055721282959
    5. '(int' → logprob: -8.422056198120117
    6. '=input' → logprob: -11.172056198120117
    7. ' ,' → logprob: -11.172056198120117
    8. 'input' → logprob: -11.297056198120117
    9. '(),' → logprob: -11.422056198120117
    10. ',int' → logprob: -11.922056198120117

Token 17: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.07889904081821442
    2. ' input' → logprob: -2.5788991451263428
    3. '(input' → logprob: -11.703899383544922
    4. ',input' → logprob: -14.203899383544922
    5. '<input' → logprob: -15.953899383544922
    6. '=input' → logprob: -16.078899383544922
    7. '	input' → logprob: -16.953899383544922
    8. '[input' → logprob: -17.953899383544922
    9. ')' → logprob: -18.078899383544922
    10. '_input' → logprob: -18.078899383544922

Token 18: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.004994294140487909
    2. '()' → logprob: -5.3799943923950195
    3. '()))' → logprob: -8.75499439239502
    4. '(' → logprob: -9.37999439239502
    5. '())' → logprob: -10.00499439239502
    6. '(),' → logprob: -10.50499439239502
    7. ' ().' → logprob: -11.50499439239502
    8. '()));' → logprob: -11.50499439239502
    9. '(.' → logprob: -12.25499439239502
    10. '()-' → logprob: -12.37999439239502

Token 19: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -1.1472419600977446e-06
    2. ' split' → logprob: -14.375000953674316
    3. 'strip' → logprob: -15.000000953674316
    4. 'rstrip' → logprob: -16.625001907348633
    5. '(split' → logprob: -16.750001907348633
    6. 'spl' → logprob: -18.125001907348633
    7. ')' → logprob: -21.375001907348633
    8. 'plit' → logprob: -22.000001907348633
    9. 's' → logprob: -22.250001907348633
    10. '.split' → logprob: -22.375001907348633

Token 20: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.1203124150633812
    2. '))' → logprob: -2.245312452316284
    3. '())' → logprob: -5.120312213897705
    4. '()' → logprob: -7.120312213897705
    5. ')' → logprob: -7.620312213897705
    6. '(' → logprob: -8.745312690734863
    7. '()));' → logprob: -11.745312690734863
    8. '()))
' → logprob: -11.870312690734863
    9. '()))

' → logprob: -12.870312690734863
    10. '()),' → logprob: -13.245312690734863

Token 21: 'h' (ID: 71)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.7004494071006775
    2. 'count' → logprob: -2.4504494667053223
    3. 'c' → logprob: -2.5754494667053223
    4. 'h' → logprob: -2.8254494667053223
    5. 'dp' → logprob: -3.0754494667053223
    6. 'max' → logprob: -3.2004494667053223
    7. 'for' → logprob: -3.3254494667053223
    8. 'result' → logprob: -3.4504494667053223
    9. 's' → logprob: -3.4504494667053223
    10. 'm' → logprob: -3.7004494667053223

Token 22: '.sort' (ID: 19551)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.005502914544194937
    2. '.' → logprob: -5.630502700805664
    3. '[n' → logprob: -7.380502700805664
    4. '[h' → logprob: -7.880502700805664
    5. '<|end|>' → logprob: -8.130502700805664
    6. '\[' → logprob: -9.130502700805664
    7. '```' → logprob: -9.255502700805664
    8. '[
' → logprob: -9.255502700805664
    9. '[:]' → logprob: -9.505502700805664
    10. '[token' → logprob: -10.255502700805664

Token 23: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.28126418590545654
    2. '(' → logprob: -1.4062641859054565
    3. '(h' → logprob: -10.656264305114746
    4. '().' → logprob: -10.781264305114746
    5. '.' → logprob: -11.156264305114746
    6. '()`' → logprob: -11.531264305114746
    7. '```' → logprob: -12.031264305114746
    8. ')' → logprob: -12.031264305114746
    9. '(
' → logprob: -12.531264305114746
    10. '(.)' → logprob: -12.531264305114746

Token 24: 'i' (ID: 72)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.06921687722206116
    2. 'd' → logprob: -3.0692169666290283
    3. 'import' → logprob: -5.069216728210449
    4. 'diff' → logprob: -5.444216728210449
    5. 'for' → logprob: -5.819216728210449
    6. 'ans' → logprob: -5.819216728210449
    7. 'from' → logprob: -7.069216728210449
    8. 'inf' → logprob: -7.444216728210449
    9. 'cost' → logprob: -8.06921672821045
    10. 'l' → logprob: -8.19421672821045

Token 25: ' =' (ID: 314)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.02615351602435112
    2. 'n' → logprob: -4.526153564453125
    3. '+' → logprob: -5.401153564453125
    4. 'nd' → logprob: -6.026153564453125
    5. '=' → logprob: -6.151153564453125
    6. ' =' → logprob: -6.401153564453125
    7. 'm' → logprob: -6.901153564453125
    8. 's' → logprob: -7.026153564453125
    9. '[' → logprob: -7.526153564453125
    10. ' +=' → logprob: -7.651153564453125

Token 26: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.030173566192388535
    2. '1' → logprob: -3.9051735401153564
    3. ' ' → logprob: -4.9051737785339355
    4. 'k' → logprob: -6.6551737785339355
    5. '2' → logprob: -8.030173301696777
    6. 'n' → logprob: -8.155173301696777
    7. ' k' → logprob: -8.905173301696777
    8. ' n' → logprob: -9.905173301696777
    9. 'len' → logprob: -10.155173301696777
    10. '-' → logprob: -10.780173301696777

Token 27: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.03141344338655472
    2. '1' → logprob: -4.281413555145264
    3. 'k' → logprob: -4.656413555145264
    4. 'n' → logprob: -5.156413555145264
    5. 'len' → logprob: -7.031413555145264
    6. '2' → logprob: -7.906413555145264
    7. ' ' → logprob: -8.031413078308105
    8. '-' → logprob: -8.656413078308105
    9. '3' → logprob: -10.906413078308105
    10. ' n' → logprob: -11.156413078308105

Token 28: '
' (ID: 198)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.3281823396682739
    2. ' while' → logprob: -1.328182339668274
    3. ' ' → logprob: -5.453182220458984
    4. 'n' → logprob: -5.953182220458984
    5. ',' → logprob: -6.078182220458984
    6. ' ,' → logprob: -6.578182220458984
    7. 'j' → logprob: -6.953182220458984
    8. 'd' → logprob: -7.328182220458984
    9. '\' → logprob: -7.578182220458984
    10. ' n' → logprob: -8.078182220458984

Token 29: 'while' (ID: 7032)
  Prédit: 'while'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.44783782958984375
    2. ' while' → logprob: -1.1978378295898438
    3. 'j' → logprob: -3.9478378295898438
    4. 'n' → logprob: -4.697837829589844
    5. 'd' → logprob: -5.197837829589844
    6. ' ' → logprob: -5.322837829589844
    7. 'k' → logprob: -5.697837829589844
    8. 'max' → logprob: -5.947837829589844
    9. '```' → logprob: -5.947837829589844
    10. 'for' → logprob: -6.447837829589844

Token 30: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.003302954835817218
    2. 'i' → logprob: -5.753303050994873
    3. ' n' → logprob: -9.253302574157715
    4. ' h' → logprob: -11.253302574157715
    5. ' k' → logprob: -12.753302574157715
    6. '(i' → logprob: -12.878302574157715
    7. 'n' → logprob: -12.878302574157715
    8. ' ' → logprob: -12.878302574157715
    9. ' True' → logprob: -13.003302574157715
    10. ' (' → logprob: -14.003302574157715

Token 31: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.022947147488594055
    2. '<' → logprob: -3.897947072982788
    3. '<len' → logprob: -6.522947311401367
    4. '<n' → logprob: -7.772947311401367
    5. ' <=' → logprob: -8.147947311401367
    6. '+' → logprob: -8.772947311401367
    7. ' ' → logprob: -10.647947311401367
    8. '<=' → logprob: -10.647947311401367
    9. ' +' → logprob: -12.272947311401367
    10. '<size' → logprob: -12.522947311401367

Token 32: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.5268827676773071
    2. 'n' → logprob: -1.4018827676773071
    3. 'k' → logprob: -2.2768826484680176
    4. ' k' → logprob: -2.9018826484680176
    5. ' len' → logprob: -5.776882648468018
    6. 'len' → logprob: -6.026882648468018
    7. ' ' → logprob: -8.026883125305176
    8. 'i' → logprob: -11.526883125305176
    9. '(' → logprob: -11.651883125305176
    10. '(n' → logprob: -11.651883125305176

Token 33: ':
' (ID: 734)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.02063169702887535
    2. 'and' → logprob: -4.395631790161133
    3. ':' → logprob: -5.270631790161133
    4. ' ' → logprob: -6.645631790161133
    5. '-' → logprob: -7.645631790161133
    6. ' :' → logprob: -7.770631790161133
    7. ' -' → logprob: -7.895631790161133
    8. '+' → logprob: -8.770631790161133
    9. '   ' → logprob: -9.895631790161133
    10. '1' → logprob: -10.270631790161133

Token 34: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.27393829822540283
    2. ' if' → logprob: -1.6489382982254028
    3. '    ' → logprob: -4.273938179016113
    4. ' ' → logprob: -4.523938179016113
    5. ' i' → logprob: -4.523938179016113
    6. 'if' → logprob: -5.648938179016113
    7. ' j' → logprob: -6.398938179016113
    8. 'j' → logprob: -6.398938179016113
    9. 'i' → logprob: -7.023938179016113
    10. '    
' → logprob: -7.148938179016113

Token 35: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.710712730884552
    2. 'if' (adapté à ' if') → logprob: -0.960712730884552
    3. 'j' → logprob: -2.7107126712799072
    4. '   ' → logprob: -3.7107126712799072
    5. ' j' → logprob: -4.835712909698486
    6. 'i' → logprob: -4.835712909698486
    7. 'k' → logprob: -5.210712909698486
    8. ' break' → logprob: -5.585712909698486
    9. ' for' → logprob: -6.085712909698486
    10. 'break' → logprob: -6.335712909698486

Token 36: ' h' (ID: 312)
  Prédit: ' h'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' h' → logprob: -0.797865629196167
    2. ' i' → logprob: -0.922865629196167
    3. 'i' → logprob: -2.672865629196167
    4. 'h' → logprob: -2.922865629196167
    5. ' k' → logprob: -3.797865629196167
    6. 'k' → logprob: -5.422865867614746
    7. ' n' → logprob: -6.922865867614746
    8. ' abs' → logprob: -7.047865867614746
    9. ' (' → logprob: -8.422865867614746
    10. 'n' → logprob: -8.797865867614746

Token 37: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.004780880641192198
    2. ' +' → logprob: -6.1297807693481445
    3. '+' → logprob: -6.6297807693481445
    4. '[' → logprob: -6.8797807693481445
    5. '+i' → logprob: -8.879780769348145
    6. ' [' → logprob: -10.379780769348145
    7. ' ' → logprob: -11.254780769348145
    8. '[j' → logprob: -12.004780769348145
    9. ' <=' → logprob: -12.004780769348145
    10. '[k' → logprob: -12.379780769348145

Token 38: ']' (ID: 60)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -1.0054333209991455
    2. ' +' → logprob: -1.5054333209991455
    3. ' >=' → logprob: -1.8804333209991455
    4. ' >' → logprob: -2.5054333209991455
    5. ' <' → logprob: -3.1304333209991455
    6. '>' → logprob: -3.3804333209991455
    7. ' ==' → logprob: -3.3804333209991455
    8. ' <=' → logprob: -3.7554333209991455
    9. ' ' → logprob: -4.255433082580566
    10. '==' → logprob: -4.755433082580566

Token 39: ' >=' (ID: 5064)
  Prédit: ' >='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >=' → logprob: -1.4262961149215698
    2. ' <' → logprob: -1.6762961149215698
    3. ' +' → logprob: -2.0512962341308594
    4. ' ==' → logprob: -2.0512962341308594
    5. ' >' → logprob: -2.3012962341308594
    6. ' <=' → logprob: -2.5512962341308594
    7. '+' → logprob: -2.6762962341308594
    8. '==' → logprob: -3.8012962341308594
    9. ' ' → logprob: -4.051296234130859
    10. '>=' → logprob: -4.676296234130859

Token 40: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.1432223916053772
    2. ' k' → logprob: -2.0182223320007324
    3. 'h' → logprob: -8.64322280883789
    4. ' ' → logprob: -9.51822280883789
    5. 'i' → logprob: -9.89322280883789
    6. '0' → logprob: -9.89322280883789
    7. ' h' → logprob: -10.01822280883789
    8. '1' → logprob: -10.39322280883789
    9. '100' → logprob: -10.76822280883789
    10. ' i' → logprob: -11.14322280883789

Token 41: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0035815376322716475
    2. ':
' → logprob: -5.753581523895264
    3. ' :' → logprob: -7.878581523895264
    4. ' :
' → logprob: -11.628582000732422
    5. '-' → logprob: -12.628582000732422
    6. ':
' → logprob: -12.628582000732422
    7. '):' → logprob: -13.253582000732422
    8. ':return' → logprob: -13.253582000732422
    9. '   ' → logprob: -13.628582000732422
    10. '+' → logprob: -13.878582000732422

Token 42: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.2543431520462036
    2. ':' → logprob: -1.5043431520462036
    3. ' break' → logprob: -7.004343032836914
    4. ':
' → logprob: -7.254343032836914
    5. '   ' → logprob: -8.254343032836914
    6. ' :' → logprob: -9.129343032836914
    7. 'break' → logprob: -9.504343032836914
    8. '           ' → logprob: -9.629343032836914
    9. '	break' → logprob: -9.754343032836914
    10. '    ' → logprob: -10.129343032836914

Token 43: ' print' (ID: 2123)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' → logprob: -0.9110915660858154
    2. ' break' → logprob: -1.1610915660858154
    3. '       ' → logprob: -1.2860915660858154
    4. '   ' → logprob: -5.1610918045043945
    5. '           ' → logprob: -7.1610918045043945
    6. '	break' → logprob: -7.4110918045043945
    7. 'b' → logprob: -7.6610918045043945
    8. 'print' (adapté à ' print') → logprob: -7.9110918045043945
    9. '```' → logprob: -8.911091804504395
    10. 'i' → logprob: -9.786091804504395

Token 44: '(n' (ID: 2406)
  Prédit: '(i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(i' → logprob: -1.3593617677688599
    2. 'h' → logprob: -1.4843617677688599
    3. '(' → logprob: -1.8593617677688599
    4. '(k' → logprob: -2.2343616485595703
    5. '(h' → logprob: -2.3593616485595703
    6. 'k' → logprob: -2.7343616485595703
    7. 'i' → logprob: -3.1093616485595703
    8. '0' → logprob: -4.10936164855957
    9. '("' → logprob: -4.85936164855957
    10. ' h' → logprob: -4.98436164855957

Token 45: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.5780074596405029
    2. ')' → logprob: -1.203007459640503
    3. '-i' → logprob: -2.203007459640503
    4. ' -' → logprob: -3.578007459640503
    5. '   ' → logprob: -8.953007698059082
    6. ')
' → logprob: -9.578007698059082
    7. '-end' → logprob: -10.953007698059082
    8. ',' → logprob: -11.578007698059082
    9. '-n' → logprob: -11.703007698059082
    10. '-k' → logprob: -11.953007698059082

Token 46: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.0009226576657965779
    2. ' i' → logprob: -7.000922679901123
    3. '   ' → logprob: -11.500922203063965
    4. ' ' → logprob: -14.625922203063965
    5. '1' → logprob: -16.00092315673828
    6. '	i' → logprob: -16.00092315673828
    7. ')' → logprob: -16.12592315673828
    8. '  ' → logprob: -16.12592315673828
    9. ')i' → logprob: -17.12592315673828
    10. '    ' → logprob: -18.25092315673828

Token 47: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3134504556655884
    2. ')
' → logprob: -1.3134504556655884
    3. ')
' → logprob: -8.688450813293457
    4. ')`
' → logprob: -12.188450813293457
    5. ' )
' → logprob: -12.563450813293457
    6. ' )' → logprob: -12.688450813293457
    7. ')

' → logprob: -13.188450813293457
    8. '`)' → logprob: -13.938450813293457
    9. ')`' → logprob: -14.063450813293457
    10. '')' → logprob: -14.313450813293457

Token 48: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00042923877481371164
    2. '   ' → logprob: -8.500429153442383
    3. 'break' → logprob: -9.375429153442383
    4. ' break' → logprob: -10.125429153442383
    5. '
' → logprob: -10.250429153442383
    6. '```' → logprob: -11.125429153442383
    7. '        
' → logprob: -11.250429153442383
    8. '\n' → logprob: -11.375429153442383
    9. '	break' → logprob: -11.625429153442383
    10. '           ' → logprob: -12.125429153442383

Token 49: ' exit' (ID: 10654)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' → logprob: -0.007459558080881834
    2. ' break' → logprob: -5.00745964050293
    3. '       ' → logprob: -7.25745964050293
    4. '	break' → logprob: -10.63245964050293
    5. '   ' → logprob: -11.63245964050293
    6. '```' → logprob: -12.13245964050293
    7. '           ' → logprob: -15.63245964050293
    8. '_break' → logprob: -16.50745964050293
    9. '``' → logprob: -16.75745964050293
    10. 'exit' (adapté à ' exit') → logprob: -16.75745964050293

Token 50: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00020246754866093397
    2. '(' → logprob: -8.625202178955078
    3. '()
' → logprob: -10.875202178955078
    4. '()`' → logprob: -13.000202178955078
    5. '()

' → logprob: -14.500202178955078
    6. '()\' → logprob: -15.125202178955078
    7. ' ()' → logprob: -15.750202178955078
    8. '();' → logprob: -15.750202178955078
    9. '())' → logprob: -15.875202178955078
    10. '()]' → logprob: -16.500202178955078

Token 51: '   ' (ID: 271)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.6952851414680481
    2. '   ' → logprob: -0.6952851414680481
    3. ' i' → logprob: -6.195285320281982
    4. '```' → logprob: -10.070284843444824
    5. ' ' → logprob: -10.570284843444824
    6. '	i' → logprob: -10.945284843444824
    7. '  ' → logprob: -12.070284843444824
    8. '``' → logprob: -13.195284843444824
    9. '[i' → logprob: -13.820284843444824
    10. '    
' → logprob: -14.320284843444824

Token 52: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' (adapté à ' i') → logprob: -0.0011755822924897075
    2. '   ' → logprob: -6.751175403594971
    3. ' i' → logprob: -12.626175880432129
    4. '```' → logprob: -13.501175880432129
    5. 'else' → logprob: -15.626175880432129
    6. '	i' → logprob: -15.751175880432129
    7. ' ' → logprob: -15.751175880432129
    8. '  ' → logprob: -15.876175880432129
    9. '++' → logprob: -16.376174926757812
    10. '    
' → logprob: -17.001174926757812

Token 53: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.07151394337415695
    2. '+' → logprob: -3.0715138912200928
    3. ' +=' → logprob: -3.8215138912200928
    4. '=' → logprob: -7.196514129638672
    5. '++' → logprob: -11.196514129638672
    6. ' +' → logprob: -12.696514129638672
    7. '1' → logprob: -13.571514129638672
    8. '+='' → logprob: -14.071514129638672
    9. '+++' → logprob: -14.196514129638672
    10. ']+=' → logprob: -14.321514129638672

Token 54: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.5597102396423e-05
    2. ' ' → logprob: -10.250035285949707
    3. '```' → logprob: -16.375036239624023
    4. '   ' → logprob: -17.625036239624023
    5. '+' → logprob: -17.625036239624023
    6. '１' → logprob: -19.437536239624023
    7. '`' → logprob: -19.625036239624023
    8. '  ' → logprob: -19.625036239624023
    9. '2' → logprob: -19.687536239624023
    10. '0' → logprob: -19.875036239624023

Token 55: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.8325677703833207e-05
    2. ' ' → logprob: -10.500028610229492
    3. '```' → logprob: -15.125028610229492
    4. '   ' → logprob: -16.187528610229492
    5. '2' → logprob: -16.812528610229492
    6. '0' → logprob: -17.312528610229492
    7. '１' → logprob: -17.312528610229492
    8. '+' → logprob: -17.375028610229492
    9. '  ' → logprob: -17.875028610229492
    10. 'a' → logprob: -18.000028610229492

Token 56: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.005035575479269028
    2. '0' → logprob: -5.505035400390625
    3. 'if' → logprob: -7.130035400390625
    4. '```' → logprob: -9.505035400390625
    5. '<|end|>' → logprob: -10.505035400390625
    6. 'else' → logprob: -10.630035400390625
    7. 'n' → logprob: -11.255035400390625
    8. '1' → logprob: -12.505035400390625
    9. 'i' → logprob: -12.755035400390625
    10. '#' → logprob: -12.880035400390625

Token 57: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -2.570319702499546e-05
    2. 'else' → logprob: -11.375025749206543
    3. 'if' → logprob: -11.875025749206543
    4. '```' → logprob: -12.750025749206543
    5. '0' → logprob: -12.875025749206543
    6. ' print' → logprob: -14.375025749206543
    7. '#' → logprob: -14.625025749206543
    8. '#print' → logprob: -14.625025749206543
    9. '<|end|>' → logprob: -16.500024795532227
    10. 'n' → logprob: -17.000024795532227

Token 58: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0013354785041883588
    2. '0' → logprob: -6.626335620880127
    3. '(n' → logprob: -12.126335144042969
    4. ' (' → logprob: -13.251335144042969
    5. '()' → logprob: -14.126335144042969
    6. '((' → logprob: -14.626335144042969
    7. '(
' → logprob: -15.001335144042969
    8. '`' → logprob: -15.626335144042969
    9. '('' → logprob: -15.876335144042969
    10. '(i' → logprob: -16.37633514404297

Token 59: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.0087516784551553e-05
    2. ' ' → logprob: -11.62501049041748
    3. 'n' → logprob: -14.62501049041748
    4. ')' → logprob: -16.125009536743164
    5. '`' → logprob: -16.375009536743164
    6. '00' → logprob: -16.375009536743164
    7. '(' → logprob: -16.375009536743164
    8. '"' → logprob: -16.750009536743164
    9. '   ' → logprob: -17.000009536743164
    10. ''' → logprob: -17.125009536743164

Token 60: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9361264946837764e-07
    2. '))' → logprob: -16.625
    3. ')
' → logprob: -16.875
    4. ' )' → logprob: -17.0
    5. ')`' → logprob: -18.25
    6. '`)' → logprob: -19.75
    7. '')' → logprob: -19.875
    8. '）' → logprob: -19.875
    9. '```' → logprob: -20.875
    10. '()' → logprob: -21.0


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 58
Tokens correctement prédits (1ère position, stricte): 21
Tokens correctement prédits (1ère position, avec adaptation): 22
Tokens correctement prédits (top 10): 47
Précision stricte (1ère position): 36.21%
Précision adaptée (1ère position): 37.93%
Précision (top 10): 81.03%
================================================================================
