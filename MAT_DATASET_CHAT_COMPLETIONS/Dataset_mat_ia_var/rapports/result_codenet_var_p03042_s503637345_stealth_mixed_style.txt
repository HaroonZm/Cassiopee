================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:00:45
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from sys import stdin

get_in = lambda: stdin.readline().strip()

def judge(s):
    res = None
    mm = int(s[:2]) in range(1, 13)
    yy = int(s[2:]) >= 1 and int(s[2:]) <= 12
    def check():
        if mm and yy:
            return 'AMBIGUOUS'
        if mm:
            return 'MMYY'
        if yy:
            return 'YYMM'
        return 'NA'
    return check()

def EXEC():
    ans = judge(get_in())
    print(ans)

EXEC()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' stdin' (ID: 75143)
  Prédit: 'argv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'argv' → logprob: -0.08562316000461578
    2. ' argv' → logprob: -2.585623264312744
    3. 'exit' → logprob: -5.960623264312744
    4. ' exit' → logprob: -6.710623264312744
    5. 'import' → logprob: -6.960623264312744
    6. 'stdout' → logprob: -6.960623264312744
    7. 'path' → logprob: -7.835623264312744
    8. 'stdin' → logprob: -7.960623264312744
    9. 'version' → logprob: -9.710622787475586
    10. ' path' → logprob: -10.085622787475586

Token 4: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0006454797694459558
    2. '.readline' → logprob: -8.250645637512207
    3. '\n' → logprob: -8.500645637512207
    4. '.
' → logprob: -10.125645637512207
    5. 'import' → logprob: -10.250645637512207
    6. '\' → logprob: -10.375645637512207
    7. '```' → logprob: -10.875645637512207
    8. '.read' → logprob: -10.875645637512207
    9. '' → logprob: -12.000645637512207
    10. ',' → logprob: -12.125645637512207

Token 5: 'get' (ID: 522)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.026680389419198036
    2. '.readline' → logprob: -3.9016804695129395
    3. '.read' → logprob: -6.2766804695129395
    4. '\n' → logprob: -7.0266804695129395
    5. ',' → logprob: -7.4016804695129395
    6. 'for' → logprob: -7.5266804695129395
    7. 'print' → logprob: -7.7766804695129395
    8. 'import' → logprob: -7.9016804695129395
    9. '
' → logprob: -8.151679992675781
    10. '```' → logprob: -8.276679992675781

Token 6: '_in' (ID: 2267)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.058299627155065536
    2. 's' → logprob: -3.1832995414733887
    3. 'l' → logprob: -5.433299541473389
    4. 'input' → logprob: -5.558299541473389
    5. 'li' → logprob: -5.808299541473389
    6. '_line' → logprob: -6.433299541473389
    7. 'lin' → logprob: -7.183299541473389
    8. '_input' → logprob: -7.808299541473389
    9. '```' → logprob: -7.933299541473389
    10. 'attr' → logprob: -8.558300018310547

Token 7: ' =' (ID: 314)
  Prédit: 'put'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'put' → logprob: -0.0005620885640382767
    2. 't' → logprob: -7.5005621910095215
    3. 'p' → logprob: -11.750561714172363
    4. 'pt' → logprob: -14.375561714172363
    5. 'puts' → logprob: -15.250561714172363
    6. ' put' → logprob: -16.62556266784668
    7. '(t' → logprob: -16.75056266784668
    8. 'pute' → logprob: -16.75056266784668
    9. '.put' → logprob: -17.25056266784668
    10. '()' → logprob: -17.62556266784668

Token 8: ' lambda' (ID: 27871)
  Prédit: ' stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stdin' → logprob: -0.4746960997581482
    2. 'stdin' → logprob: -0.9746960997581482
    3. ' lambda' → logprob: -8.224696159362793
    4. '(stdin' → logprob: -8.849696159362793
    5. 'lambda' → logprob: -9.349696159362793
    6. '.stdin' → logprob: -9.724696159362793
    7. 'input' → logprob: -10.474696159362793
    8. ' input' → logprob: -10.974696159362793
    9. 'stdout' → logprob: -12.349696159362793
    10. ' ' → logprob: -13.349696159362793

Token 9: ':' (ID: 25)
  Prédit: ' stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' stdin' → logprob: -0.33782845735549927
    2. ' x' → logprob: -2.2128283977508545
    3. 'stdin' → logprob: -2.8378283977508545
    4. ' line' → logprob: -3.2128283977508545
    5. ' lambda' → logprob: -3.3378283977508545
    6. ' input' → logprob: -3.9628283977508545
    7. 'lambda' → logprob: -4.962828636169434
    8. ' s' → logprob: -5.837828636169434
    9. 'input' → logprob: -5.962828636169434
    10. ' ' → logprob: -6.087828636169434

Token 10: ' stdin' (ID: 75143)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.0986754298210144
    2. ' stdin' → logprob: -2.473675489425659
    3. '(stdin' → logprob: -5.34867525100708
    4. 'list' → logprob: -5.84867525100708
    5. 'int' → logprob: -6.59867525100708
    6. ' list' → logprob: -7.97367525100708
    7. 'map' → logprob: -9.098675727844238
    8. '.stdin' → logprob: -9.223675727844238
    9. ' map' → logprob: -9.723675727844238
    10. 'stdout' → logprob: -10.848675727844238

Token 11: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.0008672756957821548
    2. '.read' → logprob: -7.2508673667907715
    3. '.' → logprob: -8.875866889953613
    4. '.readlines' → logprob: -11.125866889953613
    5. '().' → logprob: -13.750866889953613
    6. 'read' → logprob: -13.875866889953613
    7. ' readline' → logprob: -14.750866889953613
    8. '.write' → logprob: -15.625866889953613
    9. '```' → logprob: -16.50086784362793
    10. '.Read' → logprob: -16.75086784362793

Token 12: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0005436192732304335
    2. '().' → logprob: -8.125543594360352
    3. '(' → logprob: -9.000543594360352
    4. '()\' → logprob: -9.750543594360352
    5. '()
' → logprob: -10.500543594360352
    6. '())' → logprob: -11.125543594360352
    7. ' ()' → logprob: -11.875543594360352
    8. '()

' → logprob: -12.750543594360352
    9. '()`' → logprob: -13.000543594360352
    10. '()<' → logprob: -13.250543594360352

Token 13: 'strip' (ID: 23905)
  Prédit: 'strip'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.006722826045006514
    2. 'rstrip' → logprob: -5.006722927093506
    3. '_strip' → logprob: -12.506722450256348
    4. ' strip' → logprob: -12.881722450256348
    5. '-strip' → logprob: -14.756722450256348
    6. 'str' → logprob: -15.006722450256348
    7. '```' → logprob: -15.631722450256348
    8. 'decode' → logprob: -16.006723403930664
    9. 'read' → logprob: -16.381723403930664
    10. 'split' → logprob: -16.381723403930664

Token 14: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.033733759075403214
    2. '(' → logprob: -3.40873384475708
    3. '()
' → logprob: -11.033733367919922
    4. '()\' → logprob: -11.658733367919922
    5. '()

' → logprob: -11.783733367919922
    6. '(
' → logprob: -11.783733367919922
    7. '()`' → logprob: -12.033733367919922
    8. ')' → logprob: -12.033733367919922
    9. ' ()' → logprob: -12.408733367919922
    10. '()<' → logprob: -12.658733367919922

Token 15: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.4108670949935913
    2. 'n' → logprob: -2.035867214202881
    3. '#' → logprob: -2.410867214202881
    4. 'a' → logprob: -3.535867214202881
    5. 'd' → logprob: -3.660867214202881
    6. '\n' → logprob: -3.660867214202881
    7. '
' → logprob: -4.160867214202881
    8. 'x' → logprob: -5.535867214202881
    9. 'for' → logprob: -5.785867214202881
    10. '\' → logprob: -6.285867214202881

Token 16: ' judge' (ID: 23319)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.8730641007423401
    2. ' ' → logprob: -1.1230640411376953
    3. ' process' → logprob: -2.4980640411376953
    4. ' calculate' → logprob: -3.3730640411376953
    5. ' get' → logprob: -3.4980640411376953
    6. ' read' → logprob: -3.8730640411376953
    7. ' solve' → logprob: -4.123064041137695
    8. ' space' → logprob: -4.623064041137695
    9. ' test' → logprob: -4.623064041137695
    10. ' func' → logprob: -4.748064041137695

Token 17: '(s' (ID: 1858)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.024558663368225098
    2. '_' → logprob: -3.7745585441589355
    3. '("("' → logprob: -8.524559020996094
    4. '_parent' → logprob: -8.649559020996094
    5. '(_)' → logprob: -8.774559020996094
    6. ')' → logprob: -10.149559020996094
    7. '_case' → logprob: -10.274559020996094
    8. '```' → logprob: -10.524559020996094
    9. '()' → logprob: -10.649559020996094
    10. '(a' → logprob: -10.649559020996094

Token 18: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0041504609398543835
    2. ')' → logprob: -5.879150390625
    3. ',' → logprob: -8.129150390625
    4. ' ):' → logprob: -8.129150390625
    5. 's' → logprob: -8.629150390625
    6. ':' → logprob: -8.629150390625
    7. '[' → logprob: -8.754150390625
    8. '):
' → logprob: -9.879150390625
    9. '[]):' → logprob: -10.629150390625
    10. 'e' → logprob: -11.004150390625

Token 19: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3523915410041809
    2. ':' → logprob: -1.3523914813995361
    3. ' ' → logprob: -4.102391719818115
    4. ' :' → logprob: -5.102391719818115
    5. '(' → logprob: -5.477391719818115
    6. ' return' → logprob: -5.852391719818115
    7. '):' → logprob: -6.227391719818115
    8. ':return' → logprob: -6.352391719818115
    9. '    ' → logprob: -6.477391719818115
    10. ')' → logprob: -6.977391719818115

Token 20: ' res' (ID: 694)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.8301435708999634
    2. ' if' → logprob: -1.4551435708999634
    3. '   ' → logprob: -1.9551435708999634
    4. ' for' → logprob: -2.830143451690674
    5. '    ' → logprob: -2.955143451690674
    6. 'return' → logprob: -3.205143451690674
    7. 'if' → logprob: -4.580143451690674
    8. ' s' → logprob: -4.830143451690674
    9. ' ' → logprob: -5.080143451690674
    10. 'for' → logprob: -5.705143451690674

Token 21: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.08479829132556915
    2. '=' → logprob: -2.7097983360290527
    3. 'ult' → logprob: -4.334798336029053
    4. ' ' → logprob: -7.459798336029053
    5. 'ults' → logprob: -8.334797859191895
    6. ' +=' → logprob: -8.459797859191895
    7. '=[]' → logprob: -8.709797859191895
    8. ' ==' → logprob: -8.834797859191895
    9. 's' → logprob: -10.209797859191895
    10. '=""' → logprob: -10.709797859191895

Token 22: ' None' (ID: 4662)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.648621678352356
    2. ' ' → logprob: -1.523621678352356
    3. '0' → logprob: -2.0236215591430664
    4. ' ""' → logprob: -3.2736215591430664
    5. '[]' → logprob: -3.5236215591430664
    6. ' True' → logprob: -4.398621559143066
    7. '""' → logprob: -4.648621559143066
    8. ' set' → logprob: -5.023621559143066
    9. ' ''' → logprob: -5.023621559143066
    10. '"' → logprob: -5.523621559143066

Token 23: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.016188738867640495
    2. ' ' → logprob: -5.141188621520996
    3. '    
' → logprob: -6.391188621520996
    4. ' if' → logprob: -6.391188621520996
    5. ',' → logprob: -6.891188621520996
    6. ':' → logprob: -7.016188621520996
    7. ' for' → logprob: -7.266188621520996
    8. '    ' → logprob: -7.266188621520996
    9. '  ' → logprob: -7.391188621520996
    10. '[' → logprob: -8.016188621520996

Token 24: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.049960676580667496
    2. ' ' → logprob: -3.9249606132507324
    3. ' if' → logprob: -4.424960613250732
    4. ' for' → logprob: -5.424960613250732
    5. '  ' → logprob: -5.799960613250732
    6. ':' → logprob: -6.049960613250732
    7. '    ' → logprob: -6.049960613250732
    8. ',' → logprob: -6.424960613250732
    9. 'for' → logprob: -7.549960613250732
    10. '[' → logprob: -7.924960613250732

Token 25: ' mm' (ID: 8957)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.5817835330963135
    2. ' for' → logprob: -1.7067835330963135
    3. '   ' → logprob: -1.8317835330963135
    4. ' ' → logprob: -2.9567835330963135
    5. 'for' → logprob: -3.9567835330963135
    6. 'if' → logprob: -4.456783294677734
    7. '    ' → logprob: -5.706783294677734
    8. ' s' → logprob: -6.081783294677734
    9. ' 
' → logprob: -6.081783294677734
    10. '  ' → logprob: -6.456783294677734

Token 26: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.0944923162460327
    2. 'ax' → logprob: -1.7194923162460327
    3. '=' → logprob: -2.0944924354553223
    4. 'ap' → logprob: -2.0944924354553223
    5. 'p' → logprob: -2.9694924354553223
    6. '=len' → logprob: -3.5944924354553223
    7. 's' → logprob: -3.7194924354553223
    8. '   ' → logprob: -3.8444924354553223
    9. 'a' → logprob: -4.094492435455322
    10. 'i' → logprob: -4.844492435455322

Token 27: ' int' (ID: 677)
  Prédit: '{}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '{}' → logprob: -0.3212072551250458
    2. ' {}' → logprob: -1.3212072849273682
    3. 'len' → logprob: -6.571207046508789
    4. ' []' → logprob: -6.696207046508789
    5. 'dict' → logprob: -7.071207046508789
    6. ' ' → logprob: -7.071207046508789
    7. ' float' → logprob: -7.696207046508789
    8. '[]' → logprob: -7.696207046508789
    9. ' defaultdict' → logprob: -7.946207046508789
    10. ' dict' → logprob: -8.196207046508789

Token 28: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.004675169009715319
    2. '(' → logprob: -5.879675388336182
    3. 's' → logprob: -7.129675388336182
    4. '(max' → logprob: -7.379675388336182
    5. '(min' → logprob: -8.629674911499023
    6. '(len' → logprob: -9.379674911499023
    7. '()' → logprob: -9.754674911499023
    8. 'max' → logprob: -9.754674911499023
    9. '('' → logprob: -11.254674911499023
    10. '(float' → logprob: -11.629674911499023

Token 29: '[:' (ID: 7808)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.48481661081314087
    2. ')' → logprob: -0.9848166108131409
    3. '[-' → logprob: -5.484816551208496
    4. '[len' → logprob: -6.359816551208496
    5. '.split' → logprob: -7.359816551208496
    6. '[])' → logprob: -7.609816551208496
    7. '[:' → logprob: -7.609816551208496
    8. ')+' → logprob: -7.609816551208496
    9. '())' → logprob: -7.859816551208496
    10. '[]' → logprob: -8.359816551208496

Token 30: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.07304662466049194
    2. '3' → logprob: -3.3230466842651367
    3. '1' → logprob: -4.073046684265137
    4. '4' → logprob: -4.198046684265137
    5. '5' → logprob: -7.323046684265137
    6. '6' → logprob: -7.448046684265137
    7. '8' → logprob: -7.948046684265137
    8. ' ' → logprob: -8.698046684265137
    9. '9' → logprob: -8.698046684265137
    10. '7' → logprob: -8.823046684265137

Token 31: '])' (ID: 4636)
  Prédit: '])'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.0007612687186338007
    2. '])
' → logprob: -7.375761032104492
    3. ' ])' → logprob: -10.375761032104492
    4. '])-' → logprob: -10.375761032104492
    5. '])*' → logprob: -10.750761032104492
    6. ']' → logprob: -10.875761032104492
    7. '])+' → logprob: -11.750761032104492
    8. ']);' → logprob: -11.875761032104492
    9. ' ' → logprob: -12.250761032104492
    10. '])

' → logprob: -12.750761032104492

Token 32: ' in' (ID: 306)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.13332562148571014
    2. 'if' → logprob: -2.8833255767822266
    3. ' if' → logprob: -3.7583255767822266
    4. '<|end|>' → logprob: -4.008325576782227
    5. ' ' → logprob: -4.758325576782227
    6. ',' → logprob: -5.758325576782227
    7. '%' → logprob: -6.133325576782227
    8. 'def' → logprob: -6.258325576782227
    9. '>' → logprob: -6.383325576782227
    10. '   ' → logprob: -6.633325576782227

Token 33: ' range' (ID: 3352)
  Prédit: '{'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '{' → logprob: -0.5863414406776428
    2. ' range' → logprob: -1.586341381072998
    3. ' {' → logprob: -1.836341381072998
    4. '[' → logprob: -3.211341381072998
    5. 'range' → logprob: -3.836341381072998
    6. ' [' → logprob: -4.586341381072998
    7. '(' → logprob: -5.461341381072998
    8. ' (' → logprob: -6.086341381072998
    9. ' ' → logprob: -7.461341381072998
    10. '(range' → logprob: -8.461341857910156

Token 34: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -8.602024900028482e-05
    2. '1' → logprob: -9.375085830688477
    3. ' (' → logprob: -14.250085830688477
    4. '(
' → logprob: -15.125085830688477
    5. '[' → logprob: -16.250085830688477
    6. '   ' → logprob: -16.625085830688477
    7. '((' → logprob: -17.250085830688477
    8. ' ' → logprob: -17.375085830688477
    9. '12' → logprob: -17.625085830688477
    10. '  ' → logprob: -18.000085830688477

Token 35: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.843177233240567e-05
    2. '(' → logprob: -11.125018119812012
    3. ' ' → logprob: -12.625018119812012
    4. '[' → logprob: -15.750018119812012
    5. '0' → logprob: -16.375019073486328
    6. '13' → logprob: -17.750019073486328
    7. '-' → logprob: -18.000019073486328
    8. '`' → logprob: -18.000019073486328
    9. '   ' → logprob: -18.375019073486328
    10. '01' → logprob: -18.500019073486328

Token 36: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00047190272016450763
    2. ' ,' → logprob: -8.125472068786621
    3. '1' → logprob: -8.750472068786621
    4. '2' → logprob: -11.500472068786621
    5. '7' → logprob: -12.500472068786621
    6. ' ' → logprob: -13.125472068786621
    7. '3' → logprob: -14.750472068786621
    8. ',
' → logprob: -15.500472068786621
    9. '12' → logprob: -15.625472068786621
    10. '  ' → logprob: -15.875472068786621

Token 37: ' ' (ID: 220)
  Prédit: '13'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '13' → logprob: -0.0004172065819147974
    2. ' ' → logprob: -7.875417232513428
    3. '```' → logprob: -11.25041675567627
    4. '1' → logprob: -11.75041675567627
    5. '   ' → logprob: -12.50041675567627
    6. '>' → logprob: -12.75041675567627
    7. '3' → logprob: -12.87541675567627
    8. '    ' → logprob: -13.62541675567627
    9. '  ' → logprob: -13.87541675567627
    10. '=' → logprob: -13.87541675567627

Token 38: '13' (ID: 1311)
  Prédit: '13'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '13' → logprob: -0.0007124318508431315
    2. ' ' → logprob: -7.8757123947143555
    3. '1' → logprob: -8.625712394714355
    4. '```' → logprob: -9.625712394714355
    5. '3' → logprob: -10.250712394714355
    6. '   ' → logprob: -11.125712394714355
    7. '>' → logprob: -11.250712394714355
    8. '=' → logprob: -12.000712394714355
    9. '    ' → logprob: -12.750712394714355
    10. '  ' → logprob: -12.875712394714355

Token 39: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0008178464486263692
    2. ' )' → logprob: -7.875817775726318
    3. ' and' → logprob: -9.125818252563477
    4. ')
' → logprob: -9.750818252563477
    5. '   ' → logprob: -9.875818252563477
    6. '))' → logprob: -10.375818252563477
    7. '):' → logprob: -10.625818252563477
    8. '+' → logprob: -10.875818252563477
    9. '7' → logprob: -11.125818252563477
    10. '1' → logprob: -11.125818252563477

Token 40: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09386765211820602
    2. ' and' → logprob: -2.593867540359497
    3. 'and' → logprob: -5.218867778778076
    4. ')' → logprob: -5.593867778778076
    5. '    ' → logprob: -6.218867778778076
    6. ' ' → logprob: -6.468867778778076
    7. '  ' → logprob: -7.718867778778076
    8. ',' → logprob: -7.718867778778076
    9. ' if' → logprob: -8.218867301940918
    10. '<|end|>' → logprob: -8.218867301940918

Token 41: ' yy' (ID: 31344)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.29893672466278076
    2. ' and' → logprob: -1.6739367246627808
    3. 'and' → logprob: -3.0489368438720703
    4. ' ' → logprob: -4.67393684387207
    5. '  ' → logprob: -5.54893684387207
    6. ' if' → logprob: -5.92393684387207
    7. '    ' → logprob: -6.42393684387207
    8. ')' → logprob: -6.92393684387207
    9. 'if' → logprob: -6.92393684387207
    10. ',' → logprob: -7.04893684387207

Token 42: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.47436273097991943
    2. '=' → logprob: -0.9743627309799194
    3. '=int' → logprob: -8.22436237335205
    4. ' ' → logprob: -11.34936237335205
    5. 'int' → logprob: -13.34936237335205
    6. '   ' → logprob: -13.97436237335205
    7. '  ' → logprob: -14.59936237335205
    8. 's' → logprob: -14.59936237335205
    9. '==' → logprob: -14.84936237335205
    10. 'f' → logprob: -15.22436237335205

Token 43: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.07113432884216309
    2. ' int' → logprob: -2.696134328842163
    3. 'len' → logprob: -7.196134567260742
    4. ' len' → logprob: -9.071134567260742
    5. 's' → logprob: -9.446134567260742
    6. ' ' → logprob: -9.696134567260742
    7. '(int' → logprob: -10.196134567260742
    8. ' s' → logprob: -10.446134567260742
    9. 'True' → logprob: -10.696134567260742
    10. '0' → logprob: -10.696134567260742

Token 44: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -2.165027217415627e-05
    2. 's' → logprob: -11.375021934509277
    3. '(' → logprob: -12.125021934509277
    4. ' (' → logprob: -12.375021934509277
    5. '((' → logprob: -15.125021934509277
    6. ' ' → logprob: -17.37502098083496
    7. ')' → logprob: -18.12502098083496
    8. '(
' → logprob: -18.50002098083496
    9. '(ss' → logprob: -18.62502098083496
    10. '```' → logprob: -18.75002098083496

Token 45: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.005383637733757496
    2. '[:' → logprob: -5.380383491516113
    3. '[-' → logprob: -7.255383491516113
    4. '(' → logprob: -11.005383491516113
    5. ')' → logprob: -11.005383491516113
    6. '```' → logprob: -12.630383491516113
    7. ':' → logprob: -12.755383491516113
    8. ')[' → logprob: -13.067883491516113
    9. '[
' → logprob: -13.130383491516113
    10. ' [' → logprob: -13.192883491516113

Token 46: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.03322766721248627
    2. '3' → logprob: -3.5332276821136475
    3. ':' → logprob: -6.908227443695068
    4. ' ' → logprob: -6.908227443695068
    5. '4' → logprob: -7.658227443695068
    6. '0' → logprob: -7.783227443695068
    7. '6' → logprob: -8.158227920532227
    8. '-' → logprob: -9.033227920532227
    9. '1' → logprob: -10.158227920532227
    10. '   ' → logprob: -10.783227920532227

Token 47: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00195384887047112
    2. '2' → logprob: -6.751954078674316
    3. '4' → logprob: -7.376954078674316
    4. ' ' → logprob: -10.001954078674316
    5. '6' → logprob: -10.126954078674316
    6. '])' → logprob: -10.626954078674316
    7. '   ' → logprob: -11.251954078674316
    8. '3' → logprob: -11.376954078674316
    9. '0' → logprob: -12.126954078674316
    10. ' :' → logprob: -12.751954078674316

Token 48: '])' (ID: 4636)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.03277761861681938
    2. '])' → logprob: -4.032777786254883
    3. '6' → logprob: -4.282777786254883
    4. ' ' → logprob: -7.657777786254883
    5. ']' → logprob: -9.282777786254883
    6. ']))' → logprob: -10.532777786254883
    7. ']])' → logprob: -10.657777786254883
    8. '8' → logprob: -11.157777786254883
    9. '])/' → logprob: -11.282777786254883
    10. '])]' → logprob: -11.407777786254883

Token 49: ' >=' (ID: 5064)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.1433286815881729
    2. 'in' → logprob: -2.0183286666870117
    3. ' ' → logprob: -7.643328666687012
    4. '>' → logprob: -9.643328666687012
    5. '>=' → logprob: -10.018328666687012
    6. '<|end|>' → logprob: -11.268328666687012
    7. ' >=' → logprob: -11.893328666687012
    8. ')' → logprob: -12.143328666687012
    9. 'int' → logprob: -12.268328666687012
    10. 'isdigit' → logprob: -12.268328666687012

Token 50: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.2602611482143402
    2. '23' → logprob: -2.010261058807373
    3. '22' → logprob: -3.385261058807373
    4. ' ' → logprob: -3.635261058807373
    5. '20' → logprob: -4.510261058807373
    6. '19' → logprob: -5.010261058807373
    7. '00' → logprob: -5.135261058807373
    8. '24' → logprob: -5.510261058807373
    9. '21' → logprob: -5.760261058807373
    10. '18' → logprob: -6.010261058807373

Token 51: '1' (ID: 16)
  Prédit: '23'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '23' → logprob: -0.6841645836830139
    2. '0' → logprob: -0.8091645836830139
    3. '22' → logprob: -3.309164524078369
    4. '24' → logprob: -4.934164524078369
    5. '21' → logprob: -6.434164524078369
    6. '20' → logprob: -6.434164524078369
    7. '18' → logprob: -6.934164524078369
    8. '19' → logprob: -7.059164524078369
    9. '1' → logprob: -7.684164524078369
    10. '00' → logprob: -8.434165000915527

Token 52: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.1818726509809494
    2. 'and' → logprob: -2.056872606277466
    3. '0' → logprob: -3.931872606277466
    4. '   ' → logprob: -4.806872844696045
    5. ' ' → logprob: -5.681872844696045
    6. '<|end|>' → logprob: -5.806872844696045
    7. '4' → logprob: -6.431872844696045
    8. '2' → logprob: -7.181872844696045
    9. '00' → logprob: -8.056872367858887
    10. '6' → logprob: -8.056872367858887

Token 53: ' int' (ID: 677)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.7148829102516174
    2. 'int' → logprob: -1.3398828506469727
    3. ' ' → logprob: -2.0898828506469727
    4. '1' → logprob: -2.4648828506469727
    5. ' int' → logprob: -3.5898828506469727
    6. '00' → logprob: -5.339882850646973
    7. '01' → logprob: -6.339882850646973
    8. 'True' → logprob: -6.839882850646973
    9. '  ' → logprob: -7.214882850646973
    10. ' True' → logprob: -7.589882850646973

Token 54: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -4.842555426876061e-06
    2. '(' → logprob: -12.375004768371582
    3. 's' → logprob: -14.625004768371582
    4. ' (' → logprob: -15.750004768371582
    5. '(ss' → logprob: -17.3750057220459
    6. '(user' → logprob: -19.0000057220459
    7. '('' → logprob: -19.0000057220459
    8. '((' → logprob: -19.0000057220459
    9. '<|end|>' → logprob: -19.2500057220459
    10. '(str' → logprob: -19.7500057220459

Token 55: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -3.309382373117842e-05
    2. '(' → logprob: -11.500033378601074
    3. '[:' → logprob: -11.750033378601074
    4. '[
' → logprob: -11.750033378601074
    5. ')' → logprob: -12.625033378601074
    6. '[-' → logprob: -14.750033378601074
    7. '()[' → logprob: -14.750033378601074
    8. 's' → logprob: -14.750033378601074
    9. ' [' → logprob: -14.875033378601074
    10. '```' → logprob: -15.125033378601074

Token 56: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0015871046343818307
    2. '[' → logprob: -7.7515869140625
    3. ' ' → logprob: -8.0015869140625
    4. '4' → logprob: -8.2515869140625
    5. '(' → logprob: -8.8765869140625
    6. ':' → logprob: -9.1265869140625
    7. '3' → logprob: -9.1265869140625
    8. '   ' → logprob: -10.1265869140625
    9. '```' → logprob: -10.1265869140625
    10. '-' → logprob: -10.3140869140625

Token 57: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.025949686765670776
    2. '4' → logprob: -4.400949478149414
    3. '3' → logprob: -5.400949478149414
    4. '2' → logprob: -5.400949478149414
    5. ':]' → logprob: -5.775949478149414
    6. '0' → logprob: -8.275949478149414
    7. '[' → logprob: -8.525949478149414
    8. '])' → logprob: -8.525949478149414
    9. '6' → logprob: -8.900949478149414
    10. '(' → logprob: -9.275949478149414

Token 58: '])' (ID: 4636)
  Prédit: '])'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.010790417902171612
    2. '2' → logprob: -5.5107903480529785
    3. '4' → logprob: -5.5107903480529785
    4. '3' → logprob: -6.6357903480529785
    5. ')' → logprob: -7.6357903480529785
    6. ' ' → logprob: -7.8857903480529785
    7. '6' → logprob: -9.135790824890137
    8. ']' → logprob: -9.635790824890137
    9. ' ])' → logprob: -9.885790824890137
    10. '5' → logprob: -10.135790824890137

Token 59: ' <=' (ID: 5017)
  Prédit: '<='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<=' → logprob: -0.11004753410816193
    2. ' <=' → logprob: -2.3600475788116455
    3. '<' → logprob: -4.735047340393066
    4. ' <' → logprob: -7.110047340393066
    5. '<len' → logprob: -9.485047340393066
    6. ')<=' → logprob: -10.110047340393066
    7. ']<=' → logprob: -10.860047340393066
    8. ')' → logprob: -11.360047340393066
    9. ' in' → logprob: -11.610047340393066
    10. '<|end|>' → logprob: -11.985047340393066

Token 60: ' ' (ID: 220)
  Prédit: '99'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '99' → logprob: -0.01773287169635296
    2. ' ' → logprob: -4.142733097076416
    3. '49' → logprob: -7.642733097076416
    4. '50' → logprob: -7.767733097076416
    5. '39' → logprob: -8.267732620239258
    6. '31' → logprob: -8.767732620239258
    7. '69' → logprob: -8.892732620239258
    8. '29' → logprob: -10.517732620239258
    9. '12' → logprob: -10.767732620239258
    10. '59' → logprob: -10.767732620239258

Token 61: '12' (ID: 899)
  Prédit: '99'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '99' → logprob: -0.0006303519476205111
    2. ' ' → logprob: -8.125630378723145
    3. '39' → logprob: -9.125630378723145
    4. '49' → logprob: -9.625630378723145
    5. '50' → logprob: -9.875630378723145
    6. '69' → logprob: -11.000630378723145
    7. '31' → logprob: -11.000630378723145
    8. '999' → logprob: -11.250630378723145
    9. '29' → logprob: -11.625630378723145
    10. '59' → logprob: -12.000630378723145

Token 62: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.003186147892847657
    2. '
' → logprob: -6.378186225891113
    3. '<|end|>' → logprob: -6.628186225891113
    4. '    
' → logprob: -10.003186225891113
    5. ')' → logprob: -10.128186225891113
    6. ' if' → logprob: -10.753186225891113
    7. '<|end|>' → logprob: -11.128186225891113
    8. '       ' → logprob: -12.003186225891113
    9. ',' → logprob: -12.253186225891113
    10. ' ' → logprob: -12.253186225891113

Token 63: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0001261845463886857
    2. '<|end|>' → logprob: -9.750125885009766
    3. ')' → logprob: -10.000125885009766
    4. ' if' → logprob: -12.250125885009766
    5. '    
' → logprob: -12.375125885009766
    6. '       ' → logprob: -12.750125885009766
    7. '
' → logprob: -12.875125885009766
    8. '<|end|>' → logprob: -13.750125885009766
    9. ' ' → logprob: -13.875125885009766
    10. ',' → logprob: -13.875125885009766

Token 64: ' def' (ID: 1056)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -8.721228368813172e-05
    2. 'if' → logprob: -10.000086784362793
    3. ' if' → logprob: -10.500086784362793
    4. '
' → logprob: -12.625086784362793
    5. '<|end|>' → logprob: -12.750086784362793
    6. '    ' → logprob: -13.375086784362793
    7. ')' → logprob: -13.500086784362793
    8. '  ' → logprob: -13.625086784362793
    9. '    
' → logprob: -13.875086784362793
    10. ' ' → logprob: -14.000086784362793

Token 65: ' check' (ID: 2371)
  Prédit: ' helper'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' helper' → logprob: -0.9781811237335205
    2. ' month' → logprob: -1.7281811237335205
    3. ' inner' → logprob: -2.3531811237335205
    4. ' check' → logprob: -2.4781811237335205
    5. ' valid' → logprob: -2.8531811237335205
    6. ' is' → logprob: -2.8531811237335205
    7. ' date' → logprob: -3.2281811237335205
    8. ' s' → logprob: -3.9781811237335205
    9. ' validate' → logprob: -4.353180885314941
    10. ' test' → logprob: -4.478180885314941

Token 66: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.09581191092729568
    2. '(s' → logprob: -2.7208118438720703
    3. '_date' → logprob: -4.72081184387207
    4. '():
' → logprob: -5.59581184387207
    5. '_month' → logprob: -6.09581184387207
    6. '(date' → logprob: -6.22081184387207
    7. '(' → logprob: -6.59581184387207
    8. 'date' → logprob: -6.72081184387207
    9. '(month' → logprob: -6.84581184387207
    10. '()' → logprob: -6.97081184387207

Token 67: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0066533260978758335
    2. '    ' → logprob: -6.006653308868408
    3. '<|end|>' → logprob: -6.256653308868408
    4. '   ' → logprob: -7.131653308868408
    5. ' return' → logprob: -7.881653308868408
    6. '...' → logprob: -8.381653785705566
    7. '        ' → logprob: -8.381653785705566
    8. ' ' → logprob: -8.506653785705566
    9. '      ' → logprob: -9.631653785705566
    10. '     ' → logprob: -10.006653785705566

Token 68: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.2635289430618286
    2. ' return' → logprob: -2.013528823852539
    3. 'return' → logprob: -3.138528823852539
    4. '   ' → logprob: -3.888528823852539
    5. ' for' → logprob: -4.263528823852539
    6. ' if' → logprob: -4.388528823852539
    7. ' non' → logprob: -6.513528823852539
    8. '           ' → logprob: -6.638528823852539
    9. 'if' (adapté à ' if') → logprob: -6.638528823852539
    10. ' pass' → logprob: -6.888528823852539

Token 69: ' mm' (ID: 8957)
  Prédit: ' mm'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' mm' → logprob: -0.030729159712791443
    2. 'mm' → logprob: -4.030729293823242
    3. ' res' → logprob: -4.905729293823242
    4. ' not' → logprob: -5.655729293823242
    5. ' ' → logprob: -7.280729293823242
    6. 'res' → logprob: -7.780729293823242
    7. '(mm' → logprob: -9.155729293823242
    8. ' yy' → logprob: -9.405729293823242
    9. ' len' → logprob: -9.780729293823242
    10. '   ' → logprob: -10.155729293823242

Token 70: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.11411023885011673
    2. 'and' → logprob: -2.239110231399536
    3. ':' → logprob: -6.989110469818115
    4. '==' → logprob: -8.614109992980957
    5. ' or' → logprob: -9.364109992980957
    6. ' ' → logprob: -9.864109992980957
    7. ' ==' → logprob: -11.239109992980957
    8. ':
' → logprob: -12.364109992980957
    9. ')' → logprob: -12.489109992980957
    10. '   ' → logprob: -12.801609992980957

Token 71: ' yy' (ID: 31344)
  Prédit: ' yy'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' yy' → logprob: -0.012732958421111107
    2. 'yy' → logprob: -4.387732982635498
    3. '	yy' → logprob: -9.13773250579834
    4. ' ' → logprob: -9.51273250579834
    5. ' not' → logprob: -11.26273250579834
    6. ' yyyy' → logprob: -12.01273250579834
    7. '(' → logprob: -12.63773250579834
    8. ' (' → logprob: -12.76273250579834
    9. 's' → logprob: -12.76273250579834
    10. '   ' → logprob: -13.13773250579834

Token 72: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.04973192140460014
    2. ':
' → logprob: -4.049731731414795
    3. '           ' → logprob: -4.174731731414795
    4. ' and' → logprob: -4.549731731414795
    5. ':return' → logprob: -5.674731731414795
    6. '       ' → logprob: -7.424731731414795
    7. '():' → logprob: -7.924731731414795
    8. '():
' → logprob: -8.424732208251953
    9. ' :' → logprob: -9.299732208251953
    10. ' return' → logprob: -9.424732208251953

Token 73: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.016082465648651123
    2. ' return' → logprob: -4.641082286834717
    3. 'return' → logprob: -5.266082286834717
    4. '               ' → logprob: -8.141082763671875
    5. '
' → logprob: -8.641082763671875
    6. ':return' → logprob: -8.641082763671875
    7. ':' → logprob: -8.891082763671875
    8. '       ' → logprob: -9.391082763671875
    9. ':
' → logprob: -9.391082763671875
    10. '            
' → logprob: -10.516082763671875

Token 74: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.7454460263252258
    2. 'return' (adapté à ' return') → logprob: -1.245445966720581
    3. '               ' → logprob: -1.495445966720581
    4. '           ' → logprob: -4.62044620513916
    5. '       ' → logprob: -5.99544620513916
    6. '   ' → logprob: -6.99544620513916
    7. ' ' → logprob: -9.49544620513916
    8. '              ' → logprob: -10.12044620513916
    9. '	return' → logprob: -10.87044620513916
    10. '                   ' → logprob: -10.99544620513916

Token 75: ' '' (ID: 461)
  Prédit: ' True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.3162640929222107
    2. '"' → logprob: -2.0662641525268555
    3. 'True' → logprob: -2.4412641525268555
    4. ' "' → logprob: -3.6912641525268555
    5. ''' → logprob: -3.8162641525268555
    6. ' '' → logprob: -5.4412641525268555
    7. ' ' → logprob: -6.3162641525268555
    8. ''s' → logprob: -6.4412641525268555
    9. '1' → logprob: -7.0662641525268555
    10. 's' → logprob: -8.441264152526855

Token 76: 'AMB' (ID: 89274)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.517662763595581
    2. 'YES' → logprob: -2.142662763595581
    3. ' True' → logprob: -2.767662763595581
    4. 'Yes' → logprob: -3.392662763595581
    5. 'MM' → logprob: -3.517662763595581
    6. ''' → logprob: -3.517662763595581
    7. 'valid' → logprob: -4.14266300201416
    8. 'YY' → logprob: -4.39266300201416
    9. 'VALID' → logprob: -4.39266300201416
    10. '"' → logprob: -4.51766300201416

Token 77: 'IG' (ID: 3205)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.04759872332215309
    2. 'I' → logprob: -3.7975988388061523
    3. '')' → logprob: -4.547598838806152
    4. 'IG' → logprob: -4.672598838806152
    5. ''||' → logprob: -6.797598838806152
    6. ''I' → logprob: -7.297598838806152
    7. ''*' → logprob: -7.672598838806152
    8. ''''' → logprob: -8.047598838806152
    9. 'iguous' → logprob: -8.047598838806152
    10. '''' → logprob: -8.797598838806152

Token 78: 'U' (ID: 52)
  Prédit: 'U'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'U' → logprob: -0.0912725105881691
    2. ''' → logprob: -2.4662725925445557
    3. '')' → logprob: -6.341272354125977
    4. 'IOUS' → logprob: -8.341272354125977
    5. ''U' → logprob: -8.716272354125977
    6. ''}' → logprob: -9.966272354125977
    7. '']' → logprob: -10.716272354125977
    8. 'u' → logprob: -10.841272354125977
    9. '')
' → logprob: -11.341272354125977
    10. '''' → logprob: -11.841272354125977

Token 79: 'OUS' (ID: 101154)
  Prédit: 'OUS'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'OUS' → logprob: -0.003903500037267804
    2. 'O' → logprob: -5.878903388977051
    3. '```' → logprob: -7.753903388977051
    4. '_' → logprob: -9.25390338897705
    5. '**' → logprob: -9.62890338897705
    6. '\' → logprob: -10.00390338897705
    7. '0' → logprob: -10.12890338897705
    8. '"' → logprob: -10.25390338897705
    9. '

' → logprob: -10.50390338897705
    10. '   ' → logprob: -10.50390338897705

Token 80: ''
' (ID: 2207)
  Prédit: ''
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''
' → logprob: -0.04911843687295914
    2. ''' → logprob: -3.0491185188293457
    3. ''
' → logprob: -7.674118518829346
    4. '')' → logprob: -10.674118041992188
    5. ')'
' → logprob: -11.049118041992188
    6. '')
' → logprob: -12.049118041992188
    7. '\n' → logprob: -12.174118041992188
    8. ''

' → logprob: -12.549118041992188
    9. ''''
' → logprob: -13.424118041992188
    10. '''
' → logprob: -13.549118041992188

Token 81: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.001126167830079794
    2. '<|end|>' → logprob: -7.001126289367676
    3. '   ' → logprob: -9.876126289367676
    4. 'else' → logprob: -10.626126289367676
    5. '<|end|>' → logprob: -10.626126289367676
    6. 'elif' → logprob: -10.751126289367676
    7. ' else' → logprob: -10.876126289367676
    8. '           ' → logprob: -10.876126289367676
    9. 'return' → logprob: -11.376126289367676
    10. ' return' → logprob: -11.876126289367676

Token 82: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.032714854925870895
    2. 'elif' → logprob: -3.65771484375
    3. ' elif' → logprob: -5.28271484375
    4. '   ' → logprob: -7.40771484375
    5. '           ' → logprob: -8.78271484375
    6. 'else' → logprob: -9.15771484375
    7. ' else' → logprob: -9.15771484375
    8. 'return' → logprob: -9.65771484375
    9. '<|end|>' → logprob: -10.03271484375
    10. ' if' → logprob: -10.15771484375

Token 83: ' mm' (ID: 8957)
  Prédit: ' mm'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' mm' → logprob: -0.0011417650384828448
    2. 'mm' → logprob: -7.376141548156738
    3. ' not' → logprob: -8.001141548156738
    4. ' yy' → logprob: -9.126141548156738
    5. ' ' → logprob: -10.126141548156738
    6. ' res' → logprob: -11.251141548156738
    7. '(mm' → logprob: -12.751141548156738
    8. 'not' → logprob: -13.126141548156738
    9. 'yy' → logprob: -13.251141548156738
    10. ' mx' → logprob: -13.626141548156738

Token 84: ':
' (ID: 734)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.09737232327461243
    2. 'and' → logprob: -2.72237229347229
    3. ':' → logprob: -3.72237229347229
    4. ' or' → logprob: -6.722372531890869
    5. '==' → logprob: -7.472372531890869
    6. ' ' → logprob: -7.847372531890869
    7. ' ==' → logprob: -8.847372055053711
    8. ':
' → logprob: -9.097372055053711
    9. 'else' → logprob: -9.347372055053711
    10. ' else' → logprob: -9.472372055053711

Token 85: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.06287942826747894
    2. '       ' → logprob: -3.5628793239593506
    3. ':' → logprob: -3.8128793239593506
    4. ' return' → logprob: -5.43787956237793
    5. ':return' → logprob: -5.81287956237793
    6. 'return' → logprob: -6.06287956237793
    7. ':
' → logprob: -7.81287956237793
    8. '   ' → logprob: -8.06287956237793
    9. ' ' → logprob: -10.31287956237793
    10. '	       ' → logprob: -11.18787956237793

Token 86: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.30178195238113403
    2. 'return' (adapté à ' return') → logprob: -1.5517818927764893
    3. '       ' → logprob: -3.4267818927764893
    4. '           ' → logprob: -4.176782131195068
    5. '   ' → logprob: -8.17678165435791
    6. 'eturn' → logprob: -8.80178165435791
    7. '	return' → logprob: -9.17678165435791
    8. '               ' → logprob: -9.30178165435791
    9. ':return' → logprob: -9.30178165435791
    10. ' ' → logprob: -10.30178165435791

Token 87: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.05520756170153618
    2. ' '' → logprob: -2.9302074909210205
    3. '"' → logprob: -8.430207252502441
    4. ''M' → logprob: -10.180207252502441
    5. ''S' → logprob: -10.305207252502441
    6. ''US' → logprob: -11.680207252502441
    7. ''A' → logprob: -12.055207252502441
    8. ' ' → logprob: -12.180207252502441
    9. ' "' → logprob: -12.805207252502441
    10. ''T' → logprob: -13.305207252502441

Token 88: 'MM' (ID: 12365)
  Prédit: 'MM'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'MM' → logprob: -0.10357958823442459
    2. ''' → logprob: -2.478579521179199
    3. 'YY' → logprob: -4.728579521179199
    4. ' MM' → logprob: -5.853579521179199
    5. 'VALID' → logprob: -7.103579521179199
    6. 'YES' → logprob: -7.353579521179199
    7. ''M' → logprob: -7.853579521179199
    8. '''' → logprob: -8.3535795211792
    9. 'M' → logprob: -8.6035795211792
    10. 'YYYY' → logprob: -9.2285795211792

Token 89: 'YY' (ID: 17848)
  Prédit: '/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '/' → logprob: -0.6027003526687622
    2. 'YY' → logprob: -1.6027003526687622
    3. ''' → logprob: -1.9777003526687622
    4. '/YYYY' → logprob: -2.6027002334594727
    5. '')' → logprob: -4.477700233459473
    6. 'YYYY' → logprob: -5.227700233459473
    7. '/DD' → logprob: -5.352700233459473
    8. '/Y' → logprob: -5.602700233459473
    9. '-' → logprob: -5.727700233459473
    10. 'Y' → logprob: -5.852700233459473

Token 90: ''
' (ID: 2207)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.3134807050228119
    2. ''
' → logprob: -1.3134807348251343
    3. ''
' → logprob: -8.688480377197266
    4. '''
' → logprob: -10.938480377197266
    5. '''' → logprob: -11.813480377197266
    6. '       ' → logprob: -12.188480377197266
    7. ''

' → logprob: -12.188480377197266
    8. '"' → logprob: -12.688480377197266
    9. '   ' → logprob: -12.813480377197266
    10. ''''
' → logprob: -12.938480377197266

Token 91: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.004901062231510878
    2. '   ' → logprob: -5.629900932312012
    3. '<|end|>' → logprob: -7.754900932312012
    4. 'if' → logprob: -8.379900932312012
    5. 'elif' → logprob: -8.379900932312012
    6. ' if' → logprob: -8.879900932312012
    7. '           ' → logprob: -9.879900932312012
    8. '
' → logprob: -10.004900932312012
    9. 's' → logprob: -10.754900932312012
    10. '        
' → logprob: -10.754900932312012

Token 92: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.24392937123775482
    2. 'if' (adapté à ' if') → logprob: -2.243929386138916
    3. ' if' → logprob: -2.243929386138916
    4. '   ' → logprob: -5.868929386138916
    5. 'elif' → logprob: -7.118929386138916
    6. ' elif' → logprob: -7.868929386138916
    7. 'else' → logprob: -8.868928909301758
    8. ' else' → logprob: -9.243928909301758
    9. '    ' → logprob: -10.118928909301758
    10. '      ' → logprob: -10.868928909301758

Token 93: ' yy' (ID: 31344)
  Prédit: 'yy'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'yy' → logprob: -0.016162583604454994
    2. ' yy' → logprob: -4.141162395477295
    3. '	yy' → logprob: -9.516162872314453
    4. ' ' → logprob: -10.391162872314453
    5. '   ' → logprob: -11.516162872314453
    6. '    ' → logprob: -12.391162872314453
    7. '  ' → logprob: -12.891162872314453
    8. 'yyyy' → logprob: -13.891162872314453
    9. '.yy' → logprob: -13.891162872314453
    10. '       ' → logprob: -14.141162872314453

Token 94: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.01791449449956417
    2. '           ' → logprob: -4.142914295196533
    3. ':return' → logprob: -7.392914295196533
    4. '       ' → logprob: -7.642914295196533
    5. 'and' → logprob: -8.767914772033691
    6. ')' → logprob: -8.767914772033691
    7. '<|end|>' → logprob: -9.017914772033691
    8. ' and' → logprob: -9.392914772033691
    9. '   ' → logprob: -9.642914772033691
    10. '```' → logprob: -10.267914772033691

Token 95: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.019321197643876076
    2. ' return' → logprob: -4.394320964813232
    3. 'return' → logprob: -5.019320964813232
    4. ':return' → logprob: -9.51932144165039
    5. '   ' → logprob: -9.64432144165039
    6. '       ' → logprob: -10.76932144165039
    7. '	return' → logprob: -12.14432144165039
    8. '               ' → logprob: -12.26932144165039
    9. '	       ' → logprob: -12.89432144165039
    10. '{return' → logprob: -13.14432144165039

Token 96: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.4786061644554138
    2. 'return' (adapté à ' return') → logprob: -0.9786061644554138
    3. '           ' → logprob: -5.478606224060059
    4. '   ' → logprob: -8.478606224060059
    5. '       ' → logprob: -8.978606224060059
    6. '	return' → logprob: -11.853606224060059
    7. ' ' → logprob: -13.728606224060059
    8. ':return' → logprob: -13.978606224060059
    9. '               ' → logprob: -15.353606224060059
    10. '{return' → logprob: -15.603606224060059

Token 97: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.004898211918771267
    2. ' '' → logprob: -5.3798980712890625
    3. ''M' → logprob: -8.504898071289062
    4. ' ' → logprob: -9.879898071289062
    5. '  ' → logprob: -11.879898071289062
    6. ''S' → logprob: -12.004898071289062
    7. '   ' → logprob: -12.004898071289062
    8. ''US' → logprob: -13.254898071289062
    9. ''T' → logprob: -13.629898071289062
    10. '`' → logprob: -14.379898071289062

Token 98: 'YY' (ID: 17848)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -2.8802491215174086e-05
    2. ' '' → logprob: -11.125028610229492
    3. 'YY' → logprob: -12.125028610229492
    4. ''M' → logprob: -12.250028610229492
    5. '   ' → logprob: -14.000028610229492
    6. '`' → logprob: -14.500028610229492
    7. ''US' → logprob: -14.750028610229492
    8. ' ' → logprob: -14.875028610229492
    9. '"' → logprob: -15.000028610229492
    10. ''S' → logprob: -15.125028610229492

Token 99: 'MM' (ID: 12365)
  Prédit: 'MM'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'MM' → logprob: -5.085517113911919e-05
    2. 'YY' → logprob: -10.12505054473877
    3. 'mm' → logprob: -11.50005054473877
    4. 'MMdd' → logprob: -15.00005054473877
    5. '_MM' → logprob: -16.250051498413086
    6. '-MM' → logprob: -17.000051498413086
    7. 'M' → logprob: -17.500051498413086
    8. '```' → logprob: -17.500051498413086
    9. 'XX' → logprob: -17.625051498413086
    10. 'MMM' → logprob: -18.000051498413086

Token 100: ''
' (ID: 2207)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.18252429366111755
    2. ''' → logprob: -1.93252432346344
    3. '')' → logprob: -4.05752420425415
    4. '   ' → logprob: -5.93252420425415
    5. ')' → logprob: -7.43252420425415
    6. 'return' → logprob: -7.93252420425415
    7. ''
' → logprob: -8.182524681091309
    8. '')
' → logprob: -8.432524681091309
    9. '<|end|>' → logprob: -8.432524681091309
    10. ' return' → logprob: -9.182524681091309

Token 101: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16073615849018097
    2. '       ' → logprob: -1.9107362031936646
    3. '    
' → logprob: -8.035736083984375
    4. '
' → logprob: -9.785736083984375
    5. '<|end|>' → logprob: -10.285736083984375
    6. '        
' → logprob: -10.785736083984375
    7. '           ' → logprob: -11.410736083984375
    8. '	return' → logprob: -11.660736083984375
    9. '```' → logprob: -11.660736083984375
    10. ' return' → logprob: -11.785736083984375

Token 102: ' return' (ID: 622)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.013918785378336906
    2. ' return' → logprob: -4.888918876647949
    3. 'return' (adapté à ' return') → logprob: -5.763918876647949
    4. '   ' → logprob: -5.763918876647949
    5. ' else' → logprob: -12.01391887664795
    6. '           ' → logprob: -12.38891887664795
    7. '	return' → logprob: -13.38891887664795
    8. 'else' → logprob: -13.76391887664795
    9. ' ' → logprob: -14.51391887664795
    10. '    ' → logprob: -15.01391887664795

Token 103: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.01981334574520588
    2. ' '' → logprob: -4.019813537597656
    3. ' None' → logprob: -7.019813537597656
    4. 'None' → logprob: -8.269813537597656
    5. '''' → logprob: -8.394813537597656
    6. '"' → logprob: -8.519813537597656
    7. ' ' → logprob: -9.519813537597656
    8. ' ''' → logprob: -12.394813537597656
    9. ''s' → logprob: -13.144813537597656
    10. ' "' → logprob: -13.644813537597656

Token 104: 'NA' (ID: 9555)
  Prédit: 'INVALID'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'INVALID' → logprob: -0.434784471988678
    2. 'NA' → logprob: -1.3097844123840332
    3. '''' → logprob: -3.309784412384033
    4. ''' → logprob: -3.809784412384033
    5. 'INVAL' → logprob: -5.434784412384033
    6. 'invalid' → logprob: -5.809784412384033
    7. 'Invalid' → logprob: -5.809784412384033
    8. 'IMP' → logprob: -5.809784412384033
    9. 'NONE' → logprob: -5.934784412384033
    10. ' INVALID' → logprob: -6.559784412384033

Token 105: ''
' (ID: 2207)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0005611348897218704
    2. '')' → logprob: -8.250560760498047
    3. ''
' → logprob: -8.500560760498047
    4. ')'' → logprob: -10.250560760498047
    5. ''''' → logprob: -10.625560760498047
    6. ')' → logprob: -11.125560760498047
    7. '"' → logprob: -12.000560760498047
    8. '''' → logprob: -12.750560760498047
    9. ''

' → logprob: -13.250560760498047
    10. '()' → logprob: -13.250560760498047

Token 106: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11243343353271484
    2. '
' → logprob: -3.112433433532715
    3. '<|end|>' → logprob: -3.112433433532715
    4. '	return' → logprob: -5.237433433532715
    5. ' return' → logprob: -5.987433433532715
    6. '    
' → logprob: -6.112433433532715
    7. ' ' → logprob: -6.487433433532715
    8. 'return' → logprob: -6.487433433532715
    9. '  ' → logprob: -7.112433433532715
    10. ')' → logprob: -7.237433433532715

Token 107: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2489491105079651
    2. '
' → logprob: -1.6239490509033203
    3. 'return' (adapté à ' return') → logprob: -4.74894905090332
    4. ' return' → logprob: -5.24894905090332
    5. '<|end|>' → logprob: -5.99894905090332
    6. ' ' → logprob: -6.37394905090332
    7. '	return' → logprob: -6.62394905090332
    8. '\n' → logprob: -6.62394905090332
    9. '    
' → logprob: -7.12394905090332
    10. '  ' → logprob: -7.87394905090332

Token 108: ' check' (ID: 2371)
  Prédit: 'check'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'check' → logprob: -0.16022463142871857
    2. ' check' → logprob: -1.9102246761322021
    3. '(check' → logprob: -14.910224914550781
    4. '	check' → logprob: -16.91022491455078
    5. ' ' → logprob: -17.53522491455078
    6. '   ' → logprob: -18.91022491455078
    7. ' ' → logprob: -19.03522491455078
    8. 'chec' → logprob: -19.66022491455078
    9. '  ' → logprob: -20.28522491455078
    10. '.check' → logprob: -20.53522491455078

Token 109: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.005322466138750315
    2. '(' → logprob: -5.255322456359863
    3. '()
' → logprob: -10.255322456359863
    4. '()(' → logprob: -10.755322456359863
    5. ' ()' → logprob: -11.255322456359863
    6. '<|end|>' → logprob: -12.255322456359863
    7. '(
' → logprob: -12.755322456359863
    8. '()

' → logprob: -12.880322456359863
    9. '();' → logprob: -13.255322456359863
    10. '()\' → logprob: -13.380322456359863

Token 110: 'def' (ID: 1314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.019002629444003105
    2. '(
' → logprob: -4.269002437591553
    3. '<|end|>' → logprob: -6.019002437591553
    4. '(s' → logprob: -7.269002437591553
    5. '()' → logprob: -8.019002914428711
    6. ')' → logprob: -8.144002914428711
    7. ''' → logprob: -8.269002914428711
    8. 's' → logprob: -8.769002914428711
    9. ' ' → logprob: -9.019002914428711
    10. '   ' → logprob: -9.394002914428711

Token 111: ' EXEC' (ID: 134235)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.003058165078982711
    2. 'main' → logprob: -6.503057956695557
    3. ' solve' → logprob: -7.503057956695557
    4. ' judge' → logprob: -8.628058433532715
    5. '_' → logprob: -8.878058433532715
    6. ' s' → logprob: -9.128058433532715
    7. '_main' → logprob: -9.628058433532715
    8. ' ' → logprob: -9.753058433532715
    9. ' get' → logprob: -9.753058433532715
    10. ' __' → logprob: -9.878058433532715

Token 112: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.6452755928039551
    2. 'UTE' → logprob: -0.7702755928039551
    3. '():
' → logprob: -5.395275592803955
    4. '()' → logprob: -5.770275592803955
    5. '(' → logprob: -6.395275592803955
    6. 'ute' → logprob: -6.645275592803955
    7. 'UTOR' → logprob: -7.145275592803955
    8. '():
' → logprob: -7.270275592803955
    9. 'UTION' → logprob: -9.395275115966797
    10. 'UT' → logprob: -9.770275115966797

Token 113: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02960340678691864
    2. 'n' → logprob: -4.779603481292725
    3. ' s' → logprob: -5.154603481292725
    4. ' n' → logprob: -5.654603481292725
    5. 's' → logprob: -5.779603481292725
    6. ' line' → logprob: -6.154603481292725
    7. ' while' → logprob: -6.904603481292725
    8. '    
' → logprob: -7.154603481292725
    9. ' for' → logprob: -7.404603481292725
    10. 'input' → logprob: -7.904603481292725

Token 114: ' ans' (ID: 3345)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.5725164413452148
    2. '   ' → logprob: -1.5725164413452148
    3. 't' → logprob: -2.197516441345215
    4. ' n' → logprob: -3.072516441345215
    5. 'for' → logprob: -3.322516441345215
    6. ' t' → logprob: -4.322516441345215
    7. 's' → logprob: -5.197516441345215
    8. ' for' → logprob: -5.447516441345215
    9. 'N' → logprob: -5.447516441345215
    10. 'T' → logprob: -5.572516441345215

Token 115: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.03391273692250252
    2. '=' → logprob: -3.4089126586914062
    3. 's' → logprob: -8.908912658691406
    4. ',' → logprob: -10.533912658691406
    5. '=[]' → logprob: -11.158912658691406
    6. ' ' → logprob: -11.408912658691406
    7. ':' → logprob: -11.533912658691406
    8. '=input' → logprob: -11.533912658691406
    9. '   ' → logprob: -11.783912658691406
    10. '_' → logprob: -12.033912658691406

Token 116: ' judge' (ID: 23319)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.3446460962295532
    2. '[get' → logprob: -1.4696460962295532
    3. ' get' → logprob: -2.9696459770202637
    4. '[]' → logprob: -4.844645977020264
    5. ' []' → logprob: -7.219645977020264
    6. '(get' → logprob: -7.219645977020264
    7. '[' → logprob: -7.719645977020264
    8. ' [' → logprob: -8.344646453857422
    9. ' ' → logprob: -10.469646453857422
    10. 'input' → logprob: -10.969646453857422

Token 117: '(get' (ID: 7119)
  Prédit: '(get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(get' → logprob: -0.00042102107545360923
    2. '(input' → logprob: -8.375420570373535
    3. '(' → logprob: -8.750420570373535
    4. '(stdin' → logprob: -11.125420570373535
    5. '(next' → logprob: -12.000420570373535
    6. '(
' → logprob: -12.500420570373535
    7. ' (' → logprob: -13.250420570373535
    8. '(in' → logprob: -13.250420570373535
    9. '('' → logprob: -13.625420570373535
    10. '((' → logprob: -14.250420570373535

Token 118: '_in' (ID: 2267)
  Prédit: '_in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_in' → logprob: -1.981667537620524e-06
    2. 'in' → logprob: -14.000001907348633
    3. ')' → logprob: -14.500001907348633
    4. '_' → logprob: -14.875001907348633
    5. '_)' → logprob: -17.375001907348633
    6. ' in' → logprob: -17.500001907348633
    7. '(in' → logprob: -17.625001907348633
    8. ' _' → logprob: -17.625001907348633
    9. '_ing' → logprob: -17.875001907348633
    10. '_line' → logprob: -17.875001907348633

Token 119: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.003959786146879196
    2. '()' → logprob: -5.628959655761719
    3. ')' → logprob: -8.878959655761719
    4. '())
' → logprob: -9.503959655761719
    5. ' ())' → logprob: -9.503959655761719
    6. '()))' → logprob: -9.628959655761719
    7. '())

' → logprob: -13.253959655761719
    8. '();)' → logprob: -14.253959655761719
    9. '))' → logprob: -14.503959655761719
    10. '(' → logprob: -14.628959655761719

Token 120: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.049373552203178406
    2. '
' → logprob: -3.2993736267089844
    3. '<|end|>' → logprob: -4.674373626708984
    4. 'print' → logprob: -6.674373626708984
    5. '    
' → logprob: -8.674373626708984
    6. '[' → logprob: -9.424373626708984
    7. 'return' → logprob: -9.424373626708984
    8. '<|end|>' → logprob: -9.549373626708984
    9. '[
' → logprob: -10.049373626708984
    10. ' return' → logprob: -10.049373626708984

Token 121: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.03017425537109375
    2. '   ' → logprob: -3.9051742553710938
    3. ' print' → logprob: -4.655174255371094
    4. '
' → logprob: -10.405174255371094
    5. 'if' → logprob: -10.905174255371094
    6. '	print' → logprob: -11.280174255371094
    7. ' if' → logprob: -12.030174255371094
    8. '```' → logprob: -12.655174255371094
    9. '    
' → logprob: -13.780174255371094
    10. 'return' → logprob: -14.155174255371094

Token 122: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -0.00016265720478259027
    2. '(' → logprob: -8.750163078308105
    3. '(f' → logprob: -12.625163078308105
    4. '('' → logprob: -14.625163078308105
    5. 'ans' → logprob: -15.625163078308105
    6. '()' → logprob: -16.50016212463379
    7. '(answer' → logprob: -16.50016212463379
    8. '(an' → logprob: -17.75016212463379
    9. ' (' → logprob: -17.87516212463379
    10. '((' → logprob: -18.00016212463379

Token 123: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -7.896309739408025e-07
    2. ' )' → logprob: -15.375000953674316
    3. '`)' → logprob: -15.875000953674316
    4. ')`' → logprob: -15.875000953674316
    5. ')
' → logprob: -16.25
    6. '()' → logprob: -16.5
    7. '')' → logprob: -16.5
    8. '))' → logprob: -16.875
    9. '())' → logprob: -17.375
    10. '")' → logprob: -18.75

Token 124: 'EXEC' (ID: 112880)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 125: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.02151903696358204
    2. '(' → logprob: -4.021519184112549
    3. '()
' → logprob: -5.771519184112549
    4. '(
' → logprob: -8.77151870727539
    5. '()

' → logprob: -9.77151870727539
    6. '()\' → logprob: -11.77151870727539
    7. '()`' → logprob: -12.02151870727539
    8. '#' → logprob: -12.02151870727539
    9. '();' → logprob: -12.27151870727539
    10. '(

' → logprob: -12.52151870727539


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 123
Tokens correctement prédits (1ère position, stricte): 53
Tokens correctement prédits (1ère position, avec adaptation): 54
Tokens correctement prédits (top 10): 98
Précision stricte (1ère position): 43.09%
Précision adaptée (1ère position): 43.90%
Précision (top 10): 79.67%
================================================================================
