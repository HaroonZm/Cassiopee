================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:24:57
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def f(n, k):
    r = 0
    while True:
        if n == 0:
            break
        n //= k
        r += 1
    return r

class C:
    def __init__(self):
        a, b = list(map(int, input().split()))
        self.res = f(a, b)
    def show(self):
        print(self.res)

obj = C(); obj.show()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' f' (ID: 285)
  → Token d'amorce (pas de prédiction)

Token 2: '(n' (ID: 2406)
  → Token d'amorce (pas de prédiction)

Token 3: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.16031764447689056
    2. ')' → logprob: -1.9103176593780518
    3. ':' → logprob: -10.035317420959473
    4. '):
' → logprob: -11.785317420959473
    5. ')n' → logprob: -11.785317420959473
    6. '*' → logprob: -12.410317420959473
    7. ')>' → logprob: -12.410317420959473
    8. ',' → logprob: -12.660317420959473
    9. '+' → logprob: -12.660317420959473
    10. '=' → logprob: -13.285317420959473

Token 4: ' k' (ID: 372)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -1.5498751401901245
    2. ' x' → logprob: -1.5498751401901245
    3. ' m' → logprob: -1.7998751401901245
    4. 'm' → logprob: -1.7998751401901245
    5. ')' → logprob: -2.924875259399414
    6. 'k' → logprob: -3.174875259399414
    7. ' )' → logprob: -3.299875259399414
    8. ' k' → logprob: -3.424875259399414
    9. '):' → logprob: -4.174875259399414
    10. 'a' → logprob: -4.549875259399414

Token 5: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.002235543681308627
    2. ')' → logprob: -6.127235412597656
    3. ',' → logprob: -10.627235412597656
    4. ':' → logprob: -11.377235412597656
    5. ''):' → logprob: -12.377235412597656
    6. '):
' → logprob: -13.002235412597656
    7. '```' → logprob: -13.252235412597656
    8. '=' → logprob: -13.502235412597656
    9. '),' → logprob: -14.002235412597656
    10. '**' → logprob: -14.002235412597656

Token 6: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.21480432152748108
    2. ':' → logprob: -1.7148042917251587
    3. '    ' → logprob: -5.589804172515869
    4. '```' → logprob: -5.839804172515869
    5. ' ' → logprob: -6.089804172515869
    6. ' return' → logprob: -7.214804172515869
    7. ' if' → logprob: -7.339804172515869
    8. '\' → logprob: -7.839804172515869
    9. ':return' → logprob: -7.964804172515869
    10. '	return' → logprob: -8.089804649353027

Token 7: ' r' (ID: 428)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4457308351993561
    2. '   ' → logprob: -2.0707309246063232
    3. ' if' → logprob: -2.4457309246063232
    4. '    ' → logprob: -3.3207309246063232
    5. '```' → logprob: -3.5707309246063232
    6. 'i' → logprob: -4.445730686187744
    7. '\' → logprob: -4.445730686187744
    8. ' return' → logprob: -4.570730686187744
    9. '`' → logprob: -4.945730686187744
    10. ''' → logprob: -5.070730686187744

Token 8: ' =' (ID: 314)
  Prédit: 'eturn'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'eturn' → logprob: -0.6333615183830261
    2. '=' → logprob: -1.133361577987671
    3. ' =' → logprob: -2.508361577987671
    4. 'e' → logprob: -3.133361577987671
    5. 'ange' → logprob: -4.258361339569092
    6. ',' → logprob: -6.133361339569092
    7. 'a' → logprob: -6.508361339569092
    8. ' ' → logprob: -6.633361339569092
    9. 'es' → logprob: -7.133361339569092
    10. 'et' → logprob: -7.258361339569092

Token 9: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5281608700752258
    2. ' []' → logprob: -1.278160810470581
    3. '0' → logprob: -2.153160810470581
    4. ' n' → logprob: -4.90316104888916
    5. '[]' → logprob: -5.77816104888916
    6. '1' → logprob: -6.15316104888916
    7. ' [' → logprob: -6.40316104888916
    8. 'n' → logprob: -7.15316104888916
    9. ' range' → logprob: -8.65316104888916
    10. 'range' → logprob: -9.27816104888916

Token 10: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.03743455931544304
    2. '1' → logprob: -4.0374345779418945
    3. '[]' → logprob: -4.2874345779418945
    4. 'n' → logprob: -5.7874345779418945
    5. 'range' → logprob: -6.4124345779418945
    6. '[n' → logprob: -8.412434577941895
    7. '[' → logprob: -8.912434577941895
    8. ' ' → logprob: -9.537434577941895
    9. 'k' → logprob: -9.787434577941895
    10. '[]
' → logprob: -10.037434577941895

Token 11: '
' (ID: 198)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.2059756964445114
    2. 'for' → logprob: -2.2059757709503174
    3. ' ' → logprob: -3.4559757709503174
    4. '\n' → logprob: -3.8309757709503174
    5. '
' → logprob: -5.455975532531738
    6. '\' → logprob: -5.705975532531738
    7. '   ' → logprob: -5.830975532531738
    8. '```' → logprob: -5.955975532531738
    9. '`' → logprob: -6.955975532531738
    10. '' → logprob: -7.080975532531738

Token 12: '   ' (ID: 271)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.21795965731143951
    2. 'for' → logprob: -2.2179596424102783
    3. '
' → logprob: -3.3429596424102783
    4. '   ' → logprob: -3.9679596424102783
    5. '```' → logprob: -4.467959880828857
    6. '\n' → logprob: -4.717959880828857
    7. ' ' → logprob: -5.217959880828857
    8. '+' → logprob: -7.092959880828857
    9. ':' → logprob: -7.092959880828857
    10. '\' → logprob: -7.217959880828857

Token 13: ' while' (ID: 2049)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.09740152209997177
    2. 'for' → logprob: -2.8474016189575195
    3. '   ' → logprob: -3.4724016189575195
    4. '```' → logprob: -6.3474016189575195
    5. ' ' → logprob: -6.5974016189575195
    6. '\n' → logprob: -8.09740161895752
    7. '	for' → logprob: -9.34740161895752
    8. '
' → logprob: -9.47240161895752
    9. '``' → logprob: -10.09740161895752
    10. '`' → logprob: -10.09740161895752

Token 14: ' True' (ID: 6432)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.005540377926081419
    2. 'n' → logprob: -5.380540370941162
    3. ' ' → logprob: -7.255540370941162
    4. ' k' → logprob: -8.75554084777832
    5. ' r' → logprob: -10.38054084777832
    6. ' ' → logprob: -11.63054084777832
    7. '_' → logprob: -12.50554084777832
    8. 'k' → logprob: -12.88054084777832
    9. 'r' → logprob: -13.13054084777832
    10. '	n' → logprob: -13.25554084777832

Token 15: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0011364045785740018
    2. '       ' → logprob: -7.376136302947998
    3. ':
' → logprob: -8.751136779785156
    4. '   ' → logprob: -8.751136779785156
    5. ',' → logprob: -9.251136779785156
    6. ' :' → logprob: -10.876136779785156
    7. '):' → logprob: -10.876136779785156
    8. '<|end|>' → logprob: -11.251136779785156
    9. '():' → logprob: -12.001136779785156
    10. '    ' → logprob: -12.001136779785156

Token 16: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.018093634396791458
    2. 'n' → logprob: -5.268093585968018
    3. '   ' → logprob: -5.268093585968018
    4. '    ' → logprob: -6.018093585968018
    5. ' n' → logprob: -6.518093585968018
    6. '```' → logprob: -6.643093585968018
    7. 'r' → logprob: -7.018093585968018
    8. ' if' → logprob: -7.643093585968018
    9. ' ' → logprob: -8.143094062805176
    10. '`' → logprob: -9.268094062805176

Token 17: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -1.16005539894104
    2. 'n' → logprob: -1.53505539894104
    3. ' if' → logprob: -1.78505539894104
    4. '```' → logprob: -2.03505539894104
    5. '   ' → logprob: -3.28505539894104
    6. ' n' → logprob: -3.53505539894104
    7. 'if' (adapté à ' if') → logprob: -3.78505539894104
    8. 'i' → logprob: -3.91005539894104
    9. '    ' → logprob: -4.160055160522461
    10. ' ' → logprob: -4.660055160522461

Token 18: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.006360539235174656
    2. 'n' → logprob: -5.6313605308532715
    3. ' k' → logprob: -6.0063605308532715
    4. ' not' → logprob: -9.00636100769043
    5. 'k' → logprob: -9.63136100769043
    6. ' r' → logprob: -10.00636100769043
    7. '(n' → logprob: -10.88136100769043
    8. ' (' → logprob: -11.25636100769043
    9. ' ' → logprob: -11.50636100769043
    10. ' ' → logprob: -12.00636100769043

Token 19: ' ==' (ID: 951)
  Prédit: ' %'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.39776256680488586
    2. '%' → logprob: -1.2727625370025635
    3. ' ==' → logprob: -4.147762775421143
    4. ' <=' → logprob: -4.772762775421143
    5. '==' → logprob: -5.272762775421143
    6. ' ' → logprob: -5.397762775421143
    7. ' >=' → logprob: -5.397762775421143
    8. ' <' → logprob: -5.647762775421143
    9. '>' → logprob: -5.897762775421143
    10. '<' → logprob: -7.022762775421143

Token 20: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1830221563577652
    2. '0' → logprob: -1.933022141456604
    3. ' k' → logprob: -4.1830220222473145
    4. 'k' → logprob: -4.9330220222473145
    5. '1' → logprob: -9.558022499084473
    6. '  ' → logprob: -12.433022499084473
    7. '2' → logprob: -13.308022499084473
    8. ' ' → logprob: -13.433022499084473
    9. '   ' → logprob: -14.495522499084473
    10. '    ' → logprob: -14.495522499084473

Token 21: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.1800151914358139
    2. 'k' → logprob: -1.805015206336975
    3. '1' → logprob: -8.805015563964844
    4. ' ' → logprob: -9.305015563964844
    5. 'r' → logprob: -10.805015563964844
    6. ' k' → logprob: -12.430015563964844
    7. '   ' → logprob: -13.055015563964844
    8. '2' → logprob: -14.680015563964844
    9. '    ' → logprob: -14.805015563964844
    10. '  ' → logprob: -14.805015563964844

Token 22: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.031151410192251205
    2. ' or' → logprob: -3.531151294708252
    3. ' and' → logprob: -7.281151294708252
    4. '       ' → logprob: -7.781151294708252
    5. ':
' → logprob: -9.65615177154541
    6. ':return' → logprob: -9.65615177154541
    7. '           ' → logprob: -9.78115177154541
    8. ' :' → logprob: -10.40615177154541
    9. '   ' → logprob: -10.53115177154541
    10. ',' → logprob: -11.28115177154541

Token 23: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5696811676025391
    2. '           ' → logprob: -0.9446811676025391
    3. ':' → logprob: -3.194681167602539
    4. '\n' → logprob: -6.819681167602539
    5. '\' → logprob: -7.194681167602539
    6. '   ' → logprob: -7.319681167602539
    7. '        ' → logprob: -8.069681167602539
    8. ':
' → logprob: -8.444681167602539
    9. '```' → logprob: -8.569681167602539
    10. ':return' → logprob: -8.569681167602539

Token 24: ' break' (ID: 2338)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.2492913454771042
    2. '\n' → logprob: -2.37429141998291
    3. ' return' → logprob: -3.37429141998291
    4. '       ' → logprob: -3.62429141998291
    5. ' break' → logprob: -3.62429141998291
    6. ' ' → logprob: -4.24929141998291
    7. '            ' → logprob: -5.12429141998291
    8. '\' → logprob: -5.24929141998291
    9. '        ' → logprob: -5.74929141998291
    10. ' \' → logprob: -5.74929141998291

Token 25: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.36038491129875183
    2. '\n' → logprob: -1.3603849411010742
    3. '        
' → logprob: -4.235384941101074
    4. '
' → logprob: -4.610384941101074
    5. ' 
' → logprob: -5.610384941101074
    6. '    
' → logprob: -5.735384941101074
    7. '\' → logprob: -5.985384941101074
    8. '  
' → logprob: -6.110384941101074
    9. ' ' → logprob: -6.235384941101074
    10. '   ' → logprob: -6.360384941101074

Token 26: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.23297207057476044
    2. '        
' → logprob: -2.8579721450805664
    3. '\n' → logprob: -3.3579721450805664
    4. '
' → logprob: -3.4829721450805664
    5. ' 
' → logprob: -3.4829721450805664
    6. '```' → logprob: -3.9829721450805664
    7. '  
' → logprob: -4.857972145080566
    8. '    
' → logprob: -4.982972145080566
    9. '\' → logprob: -5.107972145080566
    10. '' → logprob: -5.982972145080566

Token 27: ' n' (ID: 297)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.9432557225227356
    2. '       ' → logprob: -1.5682556629180908
    3. 'n' (adapté à ' n') → logprob: -1.6932556629180908
    4. ' r' → logprob: -2.318255662918091
    5. '    ' → logprob: -3.693255662918091
    6. ' n' → logprob: -3.818255662918091
    7. '   ' → logprob: -3.818255662918091
    8. '-' → logprob: -4.31825590133667
    9. ' ' → logprob: -4.31825590133667
    10. 't' → logprob: -5.19325590133667

Token 28: ' //' (ID: 602)
  Prédit: ' -='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -=' → logprob: -0.7420448660850525
    2. ' %' → logprob: -1.3670449256896973
    3. ' %=' → logprob: -1.9920449256896973
    4. '%' → logprob: -2.3670449256896973
    5. ' ' → logprob: -3.9920449256896973
    6. '-' → logprob: -4.742044925689697
    7. ' //' → logprob: -5.492044925689697
    8. '-=' → logprob: -6.617044925689697
    9. '```' → logprob: -6.742044925689697
    10. ' >>=' → logprob: -7.242044925689697

Token 29: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -1.8624639324116288e-06
    2. '=}' → logprob: -13.500001907348633
    3. ' ' → logprob: -15.750001907348633
    4. ' =' → logprob: -15.750001907348633
    5. '2' → logprob: -16.625001907348633
    6. '=k' → logprob: -16.875001907348633
    7. '=
' → logprob: -17.250001907348633
    8. '=*/' → logprob: -17.875001907348633
    9. '=

' → logprob: -18.000001907348633
    10. '='' → logprob: -19.125001907348633

Token 30: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.015221655368804932
    2. '2' → logprob: -4.51522159576416
    3. ' k' → logprob: -6.01522159576416
    4. '10' → logprob: -6.39022159576416
    5. ' ' → logprob: -10.64022159576416
    6. '1' → logprob: -11.39022159576416
    7. '   ' → logprob: -12.89022159576416
    8. '3' → logprob: -13.14022159576416
    9. '```' → logprob: -13.26522159576416
    10. '5' → logprob: -13.64022159576416

Token 31: '
' (ID: 198)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.7599388957023621
    2. '\n' → logprob: -1.6349389553070068
    3. '       ' → logprob: -1.7599389553070068
    4. '
' → logprob: -2.884938955307007
    5. '        
' → logprob: -3.134938955307007
    6. '\' → logprob: -4.509938716888428
    7. ' 
' → logprob: -5.009938716888428
    8. '+
' → logprob: -5.009938716888428
    9. '<|end|>' → logprob: -5.259938716888428
    10. '```' → logprob: -5.509938716888428

Token 32: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5171823501586914
    2. '+' → logprob: -1.0171823501586914
    3. '\n' → logprob: -4.517182350158691
    4. '+
' → logprob: -4.517182350158691
    5. 'r' → logprob: -5.017182350158691
    6. '   ' → logprob: -5.767182350158691
    7. '        
' → logprob: -6.267182350158691
    8. '
' → logprob: -6.767182350158691
    9. '```' → logprob: -6.767182350158691
    10. ' +' → logprob: -6.767182350158691

Token 33: ' r' (ID: 428)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' (adapté à ' r') → logprob: -0.10569170862436295
    2. ' r' → logprob: -2.35569167137146
    3. '       ' → logprob: -5.855691909790039
    4. '1' → logprob: -6.855691909790039
    5. '   ' → logprob: -7.230691909790039
    6. ' ' → logprob: -8.355691909790039
    7. '+' → logprob: -9.105691909790039
    8. '```' → logprob: -9.230691909790039
    9. '    ' → logprob: -9.480691909790039
    10. ' 
' → logprob: -10.230691909790039

Token 34: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.4742472171783447
    2. '+=' → logprob: -0.9742472171783447
    3. '=' → logprob: -8.974246978759766
    4. '+' → logprob: -10.474246978759766
    5. ' =' → logprob: -11.349246978759766
    6. '++' → logprob: -13.474246978759766
    7. ']+=' → logprob: -14.724246978759766
    8. ' +' → logprob: -14.974246978759766
    9. '+=(' → logprob: -15.099246978759766
    10. ' ' → logprob: -15.349246978759766

Token 35: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.005988401360809803
    2. 'n' → logprob: -5.630988597869873
    3. ' ' → logprob: -6.130988597869873
    4. ' n' → logprob: -8.505988121032715
    5. '(n' → logprob: -12.005988121032715
    6. ' (' → logprob: -14.130988121032715
    7. '(' → logprob: -14.255988121032715
    8. 'k' → logprob: -14.755988121032715
    9. '+' → logprob: -16.13098907470703
    10. 'r' → logprob: -16.25598907470703

Token 36: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.006675351411104202
    2. 'n' → logprob: -5.1316752433776855
    3. ' ' → logprob: -7.3816752433776855
    4. ' n' → logprob: -9.256675720214844
    5. 'k' → logprob: -10.881675720214844
    6. '(n' → logprob: -12.006675720214844
    7. '(' → logprob: -13.381675720214844
    8. ' (' → logprob: -14.506675720214844
    9. ' k' → logprob: -14.881675720214844
    10. '(k' → logprob: -15.381675720214844

Token 37: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.923456072807312
    2. '   ' → logprob: -1.048456072807312
    3. '<|end|>' → logprob: -1.673456072807312
    4. '\n' → logprob: -4.048456192016602
    5. ' ' → logprob: -4.173456192016602
    6. ' 
' → logprob: -4.923456192016602
    7. ':return' → logprob: -5.673456192016602
    8. '       ' → logprob: -5.798456192016602
    9. '```' → logprob: -5.923456192016602
    10. '    
' → logprob: -6.173456192016602

Token 38: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0016056748572736979
    2. 'return' → logprob: -7.00160551071167
    3. ' return' → logprob: -7.50160551071167
    4. '       ' → logprob: -9.876605987548828
    5. '<|end|>' → logprob: -10.626605987548828
    6. ' ' → logprob: -10.876605987548828
    7. ':return' → logprob: -11.501605987548828
    8. '    
' → logprob: -11.876605987548828
    9. ',' → logprob: -12.376605987548828
    10. ')' → logprob: -12.376605987548828

Token 39: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.24851231276988983
    2. 'return' (adapté à ' return') → logprob: -1.8735122680664062
    3. ' return' → logprob: -2.8735122680664062
    4. ' ' → logprob: -5.373512268066406
    5. ':return' → logprob: -6.623512268066406
    6. '       ' → logprob: -7.123512268066406
    7. '<|end|>' → logprob: -7.123512268066406
    8. ')' → logprob: -7.873512268066406
    9. 'r' → logprob: -7.998512268066406
    10. '(' → logprob: -8.123512268066406

Token 40: ' r' (ID: 428)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.023245712742209435
    2. ' r' → logprob: -3.7732458114624023
    3. 'n' → logprob: -16.398244857788086
    4. '(r' → logprob: -17.148244857788086
    5. ' ' → logprob: -17.398244857788086
    6. '_r' → logprob: -17.898244857788086
    7. 'space' → logprob: -18.023244857788086
    8. 'k' → logprob: -18.273244857788086
    9. ' ' → logprob: -18.398244857788086
    10. '```' → logprob: -18.523244857788086

Token 41: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5829173922538757
    2. '<|end|>' → logprob: -1.2079174518585205
    3. ')' → logprob: -2.8329174518585205
    4. '#' → logprob: -4.082917213439941
    5. '+' → logprob: -4.207917213439941
    6. '
' → logprob: -4.332917213439941
    7. '*' → logprob: -4.582917213439941
    8. '```' → logprob: -4.707917213439941
    9. ' ' → logprob: -5.582917213439941
    10. '\n' → logprob: -6.082917213439941

Token 42: 'class' (ID: 1444)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5171109437942505
    2. ')' → logprob: -1.8921109437942505
    3. '<|end|>' → logprob: -2.892110824584961
    4. '#' → logprob: -3.267110824584961
    5. ' ' → logprob: -3.267110824584961
    6. '
' → logprob: -3.892110824584961
    7. '*' → logprob: -3.892110824584961
    8. '\n' → logprob: -4.017110824584961
    9. '+' → logprob: -4.517110824584961
    10. '```' → logprob: -4.517110824584961

Token 43: ' C' (ID: 363)
  Prédit: ' My'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' My' → logprob: -1.0084657669067383
    2. ' Factor' → logprob: -1.1334657669067383
    3. ' ' → logprob: -2.6334657669067383
    4. ' Counter' → logprob: -3.2584657669067383
    5. ' Space' → logprob: -3.6334657669067383
    6. ' Node' → logprob: -3.8834657669067383
    7. ' Count' → logprob: -4.133465766906738
    8. ' Trie' → logprob: -4.258465766906738
    9. ' Code' → logprob: -4.383465766906738
    10. ' A' → logprob: -4.633465766906738

Token 44: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.011554433964192867
    2. ' :' → logprob: -5.26155424118042
    3. 'al' → logprob: -6.88655424118042
    4. '():' → logprob: -7.01155424118042
    5. '(' → logprob: -7.13655424118042
    6. '1' → logprob: -7.38655424118042
    7. 'C' → logprob: -7.63655424118042
    8. 'ounter' → logprob: -8.136554718017578
    9. 'ont' → logprob: -8.136554718017578
    10. ' ' → logprob: -8.386554718017578

Token 45: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5131196975708008
    2. '    ' → logprob: -1.3881196975708008
    3. '   ' → logprob: -2.638119697570801
    4. ' def' → logprob: -3.513119697570801
    5. ' pass' → logprob: -4.388119697570801
    6. ' 
' → logprob: -4.513119697570801
    7. '    
' → logprob: -5.013119697570801
    8. '<|end|>' → logprob: -5.388119697570801
    9. '(n' → logprob: -5.638119697570801
    10. '     
' → logprob: -5.638119697570801

Token 46: ' def' (ID: 1056)
  Prédit: ' def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' def' → logprob: -0.025031274184584618
    2. 'def' (adapté à ' def') → logprob: -4.275031089782715
    3. ' __' → logprob: -5.150031089782715
    4. ' d' → logprob: -6.525031089782715
    5. ' pass' → logprob: -7.275031089782715
    6. ' _' → logprob: -7.275031089782715
    7. '   ' → logprob: -7.650031089782715
    8. 'd' → logprob: -7.775031089782715
    9. '_' → logprob: -7.900031089782715
    10. '    ' → logprob: -8.275031089782715

Token 47: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.08699639141559601
    2. ' ' → logprob: -2.58699631690979
    3. '__' → logprob: -5.961996555328369
    4. ' _' → logprob: -5.961996555328369
    5. '_' → logprob: -6.336996555328369
    6. ' init' → logprob: -7.336996555328369
    7. ' ' → logprob: -8.586996078491211
    8. '_init' → logprob: -9.086996078491211
    9. ' ___' → logprob: -10.086996078491211
    10. ' f' → logprob: -10.586996078491211

Token 48: 'init' (ID: 3287)
  Prédit: 'init'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'init' → logprob: -4.961759259458631e-06
    2. ' init' → logprob: -12.875004768371582
    3. 'ini' → logprob: -13.375004768371582
    4. 'i' → logprob: -15.000004768371582
    5. 'in' → logprob: -15.375004768371582
    6. 'iter' → logprob: -16.2500057220459
    7. 'int' → logprob: -16.2500057220459
    8. 'new' → logprob: -16.5000057220459
    9. 'call' → logprob: -17.2500057220459
    10. 'inite' → logprob: -17.2500057220459

Token 49: '__(' (ID: 8241)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.3133489489555359
    2. '__(' → logprob: -1.3133490085601807
    3. '__(
' → logprob: -10.313348770141602
    4. '__((' → logprob: -10.813348770141602
    5. '__('' → logprob: -11.188348770141602
    6. '___' → logprob: -11.313348770141602
    7. '__(*' → logprob: -12.813348770141602
    8. '__("' → logprob: -13.688348770141602
    9. '__.__' → logprob: -13.813348770141602
    10. '_' → logprob: -13.938348770141602

Token 50: 'self' (ID: 1156)
  Prédit: 'self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' → logprob: -0.004628888331353664
    2. ' self' → logprob: -5.379628658294678
    3. ' ' → logprob: -12.504629135131836
    4. ')' → logprob: -13.129629135131836
    5. 's' → logprob: -13.754629135131836
    6. '   ' → logprob: -14.754629135131836
    7. '0' → logprob: -15.004629135131836
    8. 'n' → logprob: -15.379629135131836
    9. '
' → logprob: -15.754629135131836
    10. '	self' → logprob: -15.879629135131836

Token 51: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.014287383295595646
    2. ' ,' → logprob: -4.38928747177124
    3. 'self' → logprob: -6.63928747177124
    4. ' self' → logprob: -8.014286994934082
    5. ',self' → logprob: -9.889286994934082
    6. ')' → logprob: -10.139286994934082
    7. ' ' → logprob: -10.889286994934082
    8. '(self' → logprob: -11.014286994934082
    9. ' (' → logprob: -12.639286994934082
    10. '   ' → logprob: -13.264286994934082

Token 52: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5065726637840271
    2. '   ' → logprob: -1.3815727233886719
    3. '    ' → logprob: -2.881572723388672
    4. ' ' → logprob: -4.131572723388672
    5. 'self' → logprob: -4.131572723388672
    6. ' pass' → logprob: -4.506572723388672
    7. ' 
' → logprob: -4.631572723388672
    8. '    
' → logprob: -4.881572723388672
    9. ' self' → logprob: -5.006572723388672
    10. '0' → logprob: -5.631572723388672

Token 53: ' a' (ID: 261)
  Prédit: 'self'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'self' → logprob: -0.29095399379730225
    2. ' self' → logprob: -1.4159539937973022
    3. ' pass' → logprob: -5.165954113006592
    4. '   ' → logprob: -6.415954113006592
    5. 'pass' → logprob: -6.540954113006592
    6. ' ' → logprob: -7.790954113006592
    7. 's' → logprob: -8.540953636169434
    8. '       ' → logprob: -8.915953636169434
    9. '0' → logprob: -9.290953636169434
    10. '  ' → logprob: -9.915953636169434

Token 54: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.34065908193588257
    2. ' ' → logprob: -1.8406591415405273
    3. '=' → logprob: -2.9656591415405273
    4. '_' → logprob: -3.4656591415405273
    5. 'r' → logprob: -4.465659141540527
    6. 'rray' → logprob: -4.840659141540527
    7. '.' → logprob: -5.090659141540527
    8. 't' → logprob: -5.715659141540527
    9. '  ' → logprob: -5.965659141540527
    10. '   ' → logprob: -5.965659141540527

Token 55: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.5245115756988525
    2. 'b' → logprob: -0.8995115756988525
    3. ' =' → logprob: -6.899511337280273
    4. ' ' → logprob: -9.399511337280273
    5. ' self' → logprob: -9.649511337280273
    6. '=' → logprob: -9.774511337280273
    7. '_' → logprob: -9.774511337280273
    8. 'self' → logprob: -10.024511337280273
    9. ' _' → logprob: -10.774511337280273
    10. 's' → logprob: -11.649511337280273

Token 56: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.04365716874599457
    2. '=' → logprob: -3.168657064437866
    3. ',' → logprob: -7.543657302856445
    4. ' ' → logprob: -9.293657302856445
    5. '<|end|>' → logprob: -11.168657302856445
    6. '  ' → logprob: -11.293657302856445
    7. '   ' → logprob: -12.918657302856445
    8. ' ,' → logprob: -13.168657302856445
    9. '<|end|>' → logprob: -13.543657302856445
    10. ')' → logprob: -13.543657302856445

Token 57: ' list' (ID: 1562)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.29266124963760376
    2. '0' → logprob: -1.667661190032959
    3. '1' → logprob: -2.792661190032959
    4. '10' → logprob: -6.917661190032959
    5. ' self' → logprob: -7.542661190032959
    6. ' (' → logprob: -7.542661190032959
    7. ' [' → logprob: -7.917661190032959
    8. 'self' → logprob: -8.042661666870117
    9. '[' → logprob: -8.417661666870117
    10. '(' → logprob: -8.542661666870117

Token 58: '(map' (ID: 16946)
  Prédit: '(range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(range' → logprob: -0.0793878361582756
    2. '(' → logprob: -2.954387903213501
    3. '[' → logprob: -4.704387664794922
    4. '(map' → logprob: -4.829387664794922
    5. '()' → logprob: -5.329387664794922
    6. '<|end|>' → logprob: -7.204387664794922
    7. '([]' → logprob: -8.079387664794922
    8. '[]' → logprob: -8.579387664794922
    9. '([' → logprob: -8.704387664794922
    10. '[int' → logprob: -9.079387664794922

Token 59: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0007424455252476037
    2. '(' → logprob: -7.625742435455322
    3. '(str' → logprob: -8.62574291229248
    4. '(lambda' → logprob: -9.62574291229248
    5. '<int' → logprob: -13.00074291229248
    6. 'int' → logprob: -13.62574291229248
    7. '=int' → logprob: -13.75074291229248
    8. '(
' → logprob: -14.00074291229248
    9. '[int' → logprob: -14.00074291229248
    10. ')' → logprob: -14.37574291229248

Token 60: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 61: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.314037024974823
    2. 'input' → logprob: -1.3140370845794678
    3. ')' → logprob: -7.439036846160889
    4. '(input' → logprob: -9.439037322998047
    5. ',input' → logprob: -10.064037322998047
    6. ' )' → logprob: -10.439037322998047
    7. '	input' → logprob: -11.064037322998047
    8. '=input' → logprob: -11.814037322998047
    9. '))' → logprob: -12.814037322998047
    10. '   ' → logprob: -13.064037322998047

Token 62: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.008921222761273384
    2. '()' → logprob: -4.883921146392822
    3. '()))' → logprob: -6.758921146392822
    4. '(' → logprob: -9.88392162322998
    5. '())' → logprob: -10.00892162322998
    6. '()));' → logprob: -10.50892162322998
    7. '())))' → logprob: -11.63392162322998
    8. '(),' → logprob: -12.88392162322998
    9. '())).' → logprob: -13.13392162322998
    10. '());' → logprob: -13.25892162322998

Token 63: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -4.3822154111694545e-05
    2. 'strip' → logprob: -10.125043869018555
    3. ' split' → logprob: -12.875043869018555
    4. 'rstrip' → logprob: -14.125043869018555
    5. '().' → logprob: -16.000043869018555
    6. 'spl' → logprob: -16.125043869018555
    7. '(split' → logprob: -16.375043869018555
    8. ' ' → logprob: -18.000043869018555
    9. ')' → logprob: -18.375043869018555
    10. 's' → logprob: -18.500043869018555

Token 64: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.04723242297768593
    2. '()' → logprob: -3.1722323894500732
    3. '))' → logprob: -6.172232627868652
    4. '())' → logprob: -6.922232627868652
    5. '(' → logprob: -7.047232627868652
    6. '())))' → logprob: -8.797232627868652
    7. '()));' → logprob: -9.797232627868652
    8. '()))
' → logprob: -10.422232627868652
    9. '('' → logprob: -11.172232627868652
    10. '())).' → logprob: -12.297232627868652

Token 65: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 66: ' self' (ID: 1051)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6827456951141357
    2. '<|end|>' → logprob: -1.4327456951141357
    3. ' ' → logprob: -2.4327456951141357
    4. '\' → logprob: -3.1827456951141357
    5. 'self' (adapté à ' self') → logprob: -3.1827456951141357
    6. '\n' → logprob: -3.4327456951141357
    7. '       ' → logprob: -3.8077456951141357
    8. 'n' → logprob: -4.432745933532715
    9. ' 
' → logprob: -5.932745933532715
    10. ' self' → logprob: -6.182745933532715

Token 67: '.res' (ID: 8279)
  Prédit: '.a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.a' → logprob: -0.004169221967458725
    2. '.' → logprob: -6.12916898727417
    3. '.b' → logprob: -6.87916898727417
    4. '.n' → logprob: -8.004169464111328
    5. '.x' → logprob: -9.254169464111328
    6. ' .' → logprob: -9.379169464111328
    7. '.i' → logprob: -9.879169464111328
    8. '.r' → logprob: -10.129169464111328
    9. '.k' → logprob: -10.129169464111328
    10. '.c' → logprob: -10.129169464111328

Token 68: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.04889403656125069
    2. '=' → logprob: -3.048893928527832
    3. 's' → logprob: -9.423893928527832
    4. ' ' → logprob: -9.673893928527832
    5. ',' → logprob: -10.423893928527832
    6. '=[]' → logprob: -10.923893928527832
    7. '<|end|>' → logprob: -11.173893928527832
    8. '_' → logprob: -11.298893928527832
    9. ')' → logprob: -11.423893928527832
    10. '  ' → logprob: -11.423893928527832

Token 69: ' f' (ID: 285)
  Prédit: ' f'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' f' → logprob: -0.6657309532165527
    2. 'f' → logprob: -1.1657309532165527
    3. 'a' → logprob: -2.5407309532165527
    4. ' a' → logprob: -3.2907309532165527
    5. ' max' → logprob: -3.6657309532165527
    6. '0' → logprob: -4.415730953216553
    7. 'max' → logprob: -4.540730953216553
    8. ' ' → logprob: -5.290730953216553
    9. 'b' → logprob: -7.165730953216553
    10. ' abs' → logprob: -7.290730953216553

Token 70: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.0029922015964984894
    2. '(' → logprob: -6.002992153167725
    3. '(b' → logprob: -8.002992630004883
    4. '(n' → logprob: -9.252992630004883
    5. ' (' → logprob: -9.502992630004883
    6. '(s' → logprob: -13.127992630004883
    7. '(k' → logprob: -13.502992630004883
    8. 'a' → logprob: -13.502992630004883
    9. ' ' → logprob: -13.752992630004883
    10. '(abs' → logprob: -13.877992630004883

Token 71: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0006979000172577798
    2. ',b' → logprob: -7.500698089599609
    3. ' ,' → logprob: -8.87569808959961
    4. 'b' → logprob: -12.50069808959961
    5. ' ' → logprob: -14.12569808959961
    6. ',
' → logprob: -15.12569808959961
    7. ' b' → logprob: -16.62569808959961
    8. 'a' → logprob: -16.75069808959961
    9. ',a' → logprob: -16.87569808959961
    10. '2' → logprob: -17.12569808959961

Token 72: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.4287779927253723
    2. ' b' → logprob: -1.0537779331207275
    3. ')b' → logprob: -9.928777694702148
    4. ')' → logprob: -11.178777694702148
    5. ' ' → logprob: -11.678777694702148
    6. 'k' → logprob: -13.928777694702148
    7. '<|end|>' → logprob: -14.053777694702148
    8. '    ' → logprob: -14.803777694702148
    9. '2' → logprob: -14.803777694702148
    10. '>b' → logprob: -15.053777694702148

Token 73: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.6047699318733066e-05
    2. '))' → logprob: -11.500016212463379
    3. ')
' → logprob: -12.375016212463379
    4. ')))' → logprob: -14.375016212463379
    5. ' )' → logprob: -15.000016212463379
    6. ')}' → logprob: -15.250016212463379
    7. ')`' → logprob: -16.500015258789062
    8. ')}}' → logprob: -16.625015258789062
    9. '),' → logprob: -16.625015258789062
    10. ')

' → logprob: -17.000015258789062

Token 74: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 75: ' def' (ID: 1056)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 76: ' show' (ID: 2356)
  Prédit: ' __'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.3603851795196533
    2. ' get' → logprob: -1.9853851795196533
    3. ' g' → logprob: -3.2353851795196533
    4. ' ' → logprob: -3.6103851795196533
    5. ' show' → logprob: -3.7353851795196533
    6. ' run' → logprob: -3.9853851795196533
    7. ' print' → logprob: -4.485384941101074
    8. ' display' → logprob: -4.485384941101074
    9. ' solve' → logprob: -4.610384941101074
    10. ' _' → logprob: -5.610384941101074

Token 77: '(self' (ID: 2402)
  Prédit: '(self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(self' → logprob: -0.34535807371139526
    2. '(' → logprob: -1.34535813331604
    3. '():' → logprob: -3.72035813331604
    4. '()' → logprob: -4.970357894897461
    5. ' (' → logprob: -8.845357894897461
    6. '(s' → logprob: -9.095357894897461
    7. ':' → logprob: -9.970357894897461
    8. 'self' → logprob: -11.220357894897461
    9. '()(' → logprob: -11.220357894897461
    10. '(Self' → logprob: -11.220357894897461

Token 78: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.05566297471523285
    2. ')' → logprob: -2.9306628704071045
    3. '():' → logprob: -7.805663108825684
    4. '):
' → logprob: -8.555663108825684
    5. '()' → logprob: -9.555663108825684
    6. ':' → logprob: -10.055663108825684
    7. ' ):' → logprob: -10.305663108825684
    8. '):

' → logprob: -12.180663108825684
    9. ')):' → logprob: -12.555663108825684
    10. ')：' → logprob: -12.680663108825684

Token 79: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.016428807750344276
    2. ' print' → logprob: -4.5164289474487305
    3. 'print' → logprob: -5.2664289474487305
    4. '   ' → logprob: -9.01642894744873
    5. '```' → logprob: -10.26642894744873
    6. ' 
' → logprob: -11.76642894744873
    7. ' ' → logprob: -11.76642894744873
    8. '    ' → logprob: -12.01642894744873
    9. '        
' → logprob: -12.14142894744873
    10. ' return' → logprob: -12.64142894744873

Token 80: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0009148012613877654
    2. ' print' → logprob: -7.000914573669434
    3. '       ' → logprob: -13.000914573669434
    4. '   ' → logprob: -14.375914573669434
    5. '```' → logprob: -14.625914573669434
    6. '	print' → logprob: -18.87591552734375
    7. 'pr' → logprob: -19.12591552734375
    8. ' ' → logprob: -21.00091552734375
    9. '    ' → logprob: -21.00091552734375
    10. '``' → logprob: -21.25091552734375

Token 81: '(self' (ID: 2402)
  Prédit: '(self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(self' → logprob: -0.1602339744567871
    2. '(' → logprob: -1.910233974456787
    3. 'self' → logprob: -12.035234451293945
    4. '(f' → logprob: -13.410234451293945
    5. ' (' → logprob: -13.910234451293945
    6. '()' → logprob: -14.035234451293945
    7. '(
' → logprob: -15.035234451293945
    8. '((' → logprob: -16.785234451293945
    9. '(s' → logprob: -16.910234451293945
    10. '('' → logprob: -16.910234451293945

Token 82: '.res' (ID: 8279)
  Prédit: '.res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.res' → logprob: -0.006853904575109482
    2. '.' → logprob: -5.006854057312012
    3. '.r' → logprob: -9.006854057312012
    4. ' .' → logprob: -12.006854057312012
    5. ').' → logprob: -12.631854057312012
    6. '.s' → logprob: -13.256854057312012
    7. '.re' → logprob: -13.256854057312012
    8. 'res' → logprob: -14.506854057312012
    9. '.rs' → logprob: -14.631854057312012
    10. '.)' → logprob: -14.881854057312012

Token 83: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -5.512236498361744e-07
    2. ')
' → logprob: -14.875000953674316
    3. '()' → logprob: -16.625
    4. ' )' → logprob: -16.875
    5. '))' → logprob: -18.0
    6. '   ' → logprob: -18.875
    7. '')' → logprob: -19.125
    8. '}' → logprob: -19.125
    9. ')`' → logprob: -19.125
    10. '())' → logprob: -19.25

Token 84: 'obj' (ID: 4264)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.015425442717969418
    2. '#' → logprob: -5.015425205230713
    3. 'C' → logprob: -6.015425205230713
    4. 'a' → logprob: -6.265425205230713
    5. 'n' → logprob: -7.265425205230713
    6. '.' → logprob: -7.265425205230713
    7. '
' → logprob: -7.390425205230713
    8. '<|end|>' → logprob: -7.515425205230713
    9. '\' → logprob: -8.015425682067871
    10. '\n' → logprob: -8.140425682067871

Token 85: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -1.1279553291387856e-05
    2. ' .' → logprob: -12.625011444091797
    3. '.show' → logprob: -13.125011444091797
    4. '.​' → logprob: -13.750011444091797
    5. '<|end|>' → logprob: -13.875011444091797
    6. '.)' → logprob: -14.375011444091797
    7. '​.' → logprob: -14.625011444091797
    8. ').' → logprob: -15.000011444091797
    9. '‌.' → logprob: -15.125011444091797
    10. '.

' → logprob: -15.375011444091797

Token 86: ' C' (ID: 363)
  Prédit: ' C'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' C' → logprob: -0.2014182209968567
    2. 'C' → logprob: -1.701418161392212
    3. ' ' → logprob: -12.326417922973633
    4. ' ' → logprob: -14.701417922973633
    5. '	C' → logprob: -16.576417922973633
    6. '<|end|>' → logprob: -17.451417922973633
    7. '>C' → logprob: -18.451417922973633
    8. '​' → logprob: -19.201417922973633
    9. '‌' → logprob: -19.451417922973633
    10. ' 
' → logprob: -19.451417922973633

Token 87: '();' (ID: 4177)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.21701879799365997
    2. '.show' → logprob: -1.8420188426971436
    3. '
' → logprob: -3.5920188426971436
    4. '.
' → logprob: -4.9670186042785645
    5. '<|end|>' → logprob: -7.2170186042785645
    6. '' → logprob: -8.092019081115723
    7. '.readline' → logprob: -8.842019081115723
    8. '
' → logprob: -9.092019081115723
    9. '.mainloop' → logprob: -9.592019081115723
    10. '```' → logprob: -9.717019081115723

Token 88: ' obj' (ID: 4099)
  Prédit: 'obj'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'obj' → logprob: -9.014684110297821e-06
    2. ' obj' → logprob: -11.750008583068848
    3. 'objc' → logprob: -14.250008583068848
    4. '$obj' → logprob: -15.750008583068848
    5. '	obj' → logprob: -16.250009536743164
    6. 'object' → logprob: -16.500009536743164
    7. '[obj' → logprob: -16.875009536743164
    8. '(obj' → logprob: -17.000009536743164
    9. '_obj' → logprob: -19.000009536743164
    10. '```' → logprob: -19.000009536743164

Token 89: '.show' (ID: 8871)
  Prédit: '.show'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.show' → logprob: -0.014179266057908535
    2. '.' → logprob: -4.264179229736328
    3. '.mainloop' → logprob: -12.264179229736328
    4. '.savefig' → logprob: -13.139179229736328
    5. ' .' → logprob: -13.639179229736328
    6. '.groupby' → logprob: -14.264179229736328
    7. '.run' → logprob: -14.389179229736328
    8. '.findall' → logprob: -14.389179229736328
    9. '.Show' → logprob: -14.389179229736328
    10. '.pyplot' → logprob: -14.639179229736328

Token 90: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0001129602751461789
    2. '(' → logprob: -9.250112533569336
    3. '()
' → logprob: -12.250112533569336
    4. ' ()' → logprob: -12.625112533569336
    5. '`()' → logprob: -12.625112533569336
    6. '()`' → logprob: -13.250112533569336
    7. '();' → logprob: -13.500112533569336
    8. '()

' → logprob: -14.750112533569336
    9. '()</' → logprob: -15.375112533569336
    10. '()<' → logprob: -15.500112533569336


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 88
Tokens correctement prédits (1ère position, stricte): 36
Tokens correctement prédits (1ère position, avec adaptation): 38
Tokens correctement prédits (top 10): 68
Précision stricte (1ère position): 40.91%
Précision adaptée (1ère position): 43.18%
Précision (top 10): 77.27%
================================================================================
