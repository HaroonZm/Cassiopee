================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:14:29
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from functools import reduce
from operator import mul

a = int(input())

def is_even(n):
    # via all, any and unorthodox boolean logic
    return all(map(lambda x: x==0, [n%2]))

def double_if_odd(n):
    return reduce(mul, [n, 2]) if not is_even(n) else n

print([double_if_odd(a), a][is_even(a)])
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' functools' (ID: 142636)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' reduce' (ID: 10389)
  Prédit: 'partial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'partial' → logprob: -0.612085223197937
    2. 'wrap' → logprob: -0.862085223197937
    3. 'reduce' → logprob: -3.4870853424072266
    4. 'l' → logprob: -6.112085342407227
    5. ' wraps' → logprob: -6.487085342407227
    6. 'cached' → logprob: -7.612085342407227
    7. 'cache' → logprob: -8.112085342407227
    8. 'cmp' → logprob: -9.237085342407227
    9. '```' → logprob: -9.237085342407227
    10. ' partial' → logprob: -9.612085342407227

Token 4: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.010317044332623482
    2. '(lambda' → logprob: -4.760316848754883
    3. ' (' → logprob: -7.385316848754883
    4. ',' → logprob: -7.885316848754883
    5. 'def' → logprob: -8.135316848754883
    6. '.' → logprob: -8.635316848754883
    7. '```' → logprob: -10.135316848754883
    8. '(
' → logprob: -10.385316848754883
    9. 'lambda' → logprob: -10.635316848754883
    10. ' ' → logprob: -10.760316848754883

Token 5: 'from' (ID: 2845)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01442087721079588
    2. '(
' → logprob: -5.139420986175537
    3. '(lambda' → logprob: -5.389420986175537
    4. 'def' → logprob: -6.639420986175537
    5. ',' → logprob: -7.139420986175537
    6. '\' → logprob: -8.139420509338379
    7. ' ' → logprob: -8.264420509338379
    8. ' (' → logprob: -8.389420509338379
    9. '' → logprob: -9.139420509338379
    10. '
' → logprob: -9.139420509338379

Token 6: ' operator' (ID: 11019)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.9289020299911499
    2. ' operator' → logprob: -1.42890202999115
    3. ' itertools' → logprob: -1.55390202999115
    4. ' collections' → logprob: -1.92890202999115
    5. ' os' → logprob: -4.9289021492004395
    6. 'operator' → logprob: -7.4289021492004395
    7. ' sys' → logprob: -8.553901672363281
    8. ' typing' → logprob: -8.553901672363281
    9. 'collections' → logprob: -8.928901672363281
    10. 'math' → logprob: -9.053901672363281

Token 7: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.044668834656476974
    2. 'import' → logprob: -3.6696689128875732
    3. '.' → logprob: -4.169668674468994
    4. ' ' → logprob: -6.044668674468994
    5. ' .' → logprob: -8.419669151306152
    6. '.import' → logprob: -9.169669151306152
    7. '	import' → logprob: -11.419669151306152
    8. '_import' → logprob: -11.544669151306152
    9. '<|end|>' → logprob: -11.794669151306152
    10. ' Import' → logprob: -13.169669151306152

Token 8: ' mul' (ID: 9975)
  Prédit: ' add'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' add' → logprob: -0.31903505325317383
    2. ' import' → logprob: -1.9440350532531738
    3. 'add' → logprob: -2.444035053253174
    4. ' ' → logprob: -4.069035053253174
    5. ' mul' → logprob: -4.194035053253174
    6. 'import' → logprob: -4.819035053253174
    7. 'mul' → logprob: -6.194035053253174
    8. ' item' → logprob: -8.694034576416016
    9. 'item' → logprob: -9.569034576416016
    10. ' ad' → logprob: -9.819034576416016

Token 9: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.13796253502368927
    2. '*' → logprob: -2.762962579727173
    3. '\' → logprob: -3.512962579727173
    4. '\n' → logprob: -4.512962341308594
    5. '(
' → logprob: -4.762962341308594
    6. ',' → logprob: -5.137962341308594
    7. '`' → logprob: -6.012962341308594
    8. '#' → logprob: -6.512962341308594
    9. 'a' → logprob: -6.637962341308594
    10. '\(' → logprob: -6.762962341308594

Token 10: 'a' (ID: 64)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.12955497205257416
    2. '*' → logprob: -3.1295549869537354
    3. '#' → logprob: -3.6295549869537354
    4. 'def' → logprob: -4.504554748535156
    5. '(
' → logprob: -4.754554748535156
    6. 'result' → logprob: -4.879554748535156
    7. '\' → logprob: -5.504554748535156
    8. 'a' → logprob: -5.504554748535156
    9. '`' → logprob: -5.754554748535156
    10. ')' → logprob: -5.754554748535156

Token 11: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -1.2692899703979492
    2. '[' → logprob: -1.6442899703979492
    3. '=' → logprob: -1.6442899703979492
    4. ',' → logprob: -2.519289970397949
    5. '_' → logprob: -3.144289970397949
    6. 'b' → logprob: -3.144289970397949
    7. 'r' → logprob: -3.394289970397949
    8. '*' → logprob: -3.644289970397949
    9. ' ' → logprob: -3.644289970397949
    10. '.' → logprob: -3.769289970397949

Token 12: ' int' (ID: 677)
  Prédit: ' ['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.35897740721702576
    2. ' ' → logprob: -1.6089774370193481
    3. '[' → logprob: -2.3589773178100586
    4. '1' → logprob: -5.233977317810059
    5. ' []' → logprob: -7.483977317810059
    6. '[int' → logprob: -7.983977317810059
    7. '2' → logprob: -8.733977317810059
    8. '5' → logprob: -8.858977317810059
    9. '10' → logprob: -9.108977317810059
    10. '0' → logprob: -9.358977317810059

Token 13: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0012755923671647906
    2. 'a' → logprob: -7.501275539398193
    3. '(a' → logprob: -7.501275539398193
    4. '(input' → logprob: -9.501276016235352
    5. '('' → logprob: -10.376276016235352
    6. '(
' → logprob: -11.751276016235352
    7. ' (' → logprob: -11.876276016235352
    8. '```' → logprob: -12.001276016235352
    9. '(user' → logprob: -12.251276016235352
    10. ')' → logprob: -12.501276016235352

Token 14: '())

' (ID: 27654)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.08756785094738007
    2. '()' → logprob: -2.8375678062438965
    3. ')' → logprob: -3.8375678062438965
    4. '())' → logprob: -6.0875678062438965
    5. '('' → logprob: -7.4625678062438965
    6. '(
' → logprob: -8.087568283081055
    7. '(a' → logprob: -8.837568283081055
    8. 'a' → logprob: -9.337568283081055
    9. '(

' → logprob: -9.462568283081055
    10. '(()' → logprob: -9.712568283081055

Token 15: 'def' (ID: 1314)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.3069341480731964
    2. 'factor' → logprob: -1.681934118270874
    3. 'print' → logprob: -3.431934118270874
    4. 'fact' → logprob: -3.681934118270874
    5. 'f' → logprob: -5.056934356689453
    6. 'n' → logprob: -5.181934356689453
    7. 'b' → logprob: -6.056934356689453
    8. 'res' → logprob: -6.431934356689453
    9. ')' → logprob: -7.056934356689453
    10. 'product' → logprob: -7.431934356689453

Token 16: ' is' (ID: 382)
  Prédit: ' factorial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' factorial' → logprob: -0.006742015480995178
    2. ' factor' → logprob: -6.131742000579834
    3. ' product' → logprob: -6.381742000579834
    4. ' fact' → logprob: -6.881742000579834
    5. 'factor' → logprob: -7.381742000579834
    6. ' f' → logprob: -7.631742000579834
    7. ' prod' → logprob: -8.256742477416992
    8. ' reduce' → logprob: -8.881742477416992
    9. ' multiply' → logprob: -9.006742477416992
    10. '_factor' → logprob: -10.006742477416992

Token 17: '_even' (ID: 186029)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.526910662651062
    2. '_prime' → logprob: -1.151910662651062
    3. '_pal' → logprob: -2.9019107818603516
    4. ' ' → logprob: -4.026910781860352
    5. ' _' → logprob: -4.526910781860352
    6. '_even' → logprob: -6.151910781860352
    7. ' prime' → logprob: -6.276910781860352
    8. '_p' → logprob: -6.526910781860352
    9. ' even' → logprob: -7.151910781860352
    10. ' a' → logprob: -7.401910781860352

Token 18: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0017179005080834031
    2. '_' → logprob: -7.001718044281006
    3. '(n' → logprob: -7.876718044281006
    4. '(a' → logprob: -8.626717567443848
    5. '(num' → logprob: -10.001717567443848
    6. '(_' → logprob: -10.001717567443848
    7. 's' → logprob: -10.376717567443848
    8. '(x' → logprob: -10.751717567443848
    9. '(number' → logprob: -10.876717567443848
    10. '(token' → logprob: -11.501717567443848

Token 19: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.01128630992025137
    2. ')' → logprob: -4.51128625869751
    3. '(n' → logprob: -9.386286735534668
    4. '):
' → logprob: -9.761286735534668
    5. 'u' → logprob: -10.386286735534668
    6. 'e' → logprob: -11.386286735534668
    7. '):

' → logprob: -11.386286735534668
    8. '=' → logprob: -12.011286735534668
    9. ' ):' → logprob: -12.136286735534668
    10. '(' → logprob: -12.136286735534668

Token 20: '   ' (ID: 271)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.34153422713279724
    2. '   ' → logprob: -1.3415342569351196
    3. 'return' → logprob: -4.84153413772583
    4. ' ' → logprob: -4.84153413772583
    5. ' (' → logprob: -5.96653413772583
    6. ' n' → logprob: -6.21653413772583
    7. ':return' → logprob: -6.34153413772583
    8. '(' → logprob: -6.71653413772583
    9. '    ' → logprob: -7.21653413772583
    10. ':' → logprob: -7.34153413772583

Token 21: ' #' (ID: 1069)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.15242613852024078
    2. '   ' → logprob: -2.152426242828369
    3. 'return' → logprob: -3.777426242828369
    4. ' n' → logprob: -6.277426242828369
    5. 'n' → logprob: -8.402425765991211
    6. ' ' → logprob: -9.527425765991211
    7. '    ' → logprob: -9.652425765991211
    8. ')' → logprob: -11.152425765991211
    9. '	return' → logprob: -11.777425765991211
    10. ' (' → logprob: -11.902425765991211

Token 22: ' via' (ID: 4493)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.1777675449848175
    2. 'return' → logprob: -1.9277675151824951
    3. '   ' → logprob: -4.052767753601074
    4. ' ' → logprob: -11.677767753601074
    5. '	return' → logprob: -13.052767753601074
    6. ' ' → logprob: -13.677767753601074
    7. '    ' → logprob: -13.927767753601074
    8. '  ' → logprob: -14.427767753601074
    9. ':return' → logprob: -14.427767753601074
    10. '```' → logprob: -14.677767753601074

Token 23: ' all' (ID: 722)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.6795635223388672
    2. ' n' → logprob: -0.8045635223388672
    3. ' ' → logprob: -3.554563522338867
    4. 'return' → logprob: -4.804563522338867
    5. 'n' → logprob: -5.179563522338867
    6. '   ' → logprob: -7.554563522338867
    7. ' %' → logprob: -7.679563522338867
    8. ' a' → logprob: -8.054563522338867
    9. '```' → logprob: -8.054563522338867
    10. ' modulo' → logprob: -8.554563522338867

Token 24: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003384580137208104
    2. ' (' → logprob: -6.253384590148926
    3. '(
' → logprob: -7.503384590148926
    4. '(lambda' → logprob: -7.878384590148926
    5. '('' → logprob: -9.003384590148926
    6. ')' → logprob: -9.628384590148926
    7. '   ' → logprob: -10.253384590148926
    8. '(n' → logprob: -10.253384590148926
    9. 'def' → logprob: -10.378384590148926
    10. ' ' → logprob: -10.378384590148926

Token 25: ' any' (ID: 1062)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.47959035634994507
    2. '   ' → logprob: -1.6045904159545898
    3. ' n' → logprob: -2.10459041595459
    4. ' lambda' → logprob: -3.97959041595459
    5. 'return' → logprob: -4.47959041595459
    6. ' all' → logprob: -4.72959041595459
    7. ' a' → logprob: -5.85459041595459
    8. 'n' → logprob: -6.10459041595459
    9. ' ' → logprob: -6.10459041595459
    10. 'lambda' → logprob: -6.35459041595459

Token 26: ' and' (ID: 326)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.604027271270752
    2. '   ' → logprob: -0.854027271270752
    3. ' return' → logprob: -4.229027271270752
    4. 'return' → logprob: -5.104027271270752
    5. '(
' → logprob: -5.479027271270752
    6. ' ' → logprob: -7.604027271270752
    7. ' (' → logprob: -7.604027271270752
    8. ')' → logprob: -7.854027271270752
    9. '(return' → logprob: -7.979027271270752
    10. ':return' → logprob: -8.604026794433594

Token 27: ' un' (ID: 537)
  Prédit: ' not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.6931807994842529
    2. ' lambda' → logprob: -2.568180799484253
    3. 'not' → logprob: -2.693180799484253
    4. ' ' → logprob: -3.193180799484253
    5. 'map' → logprob: -3.193180799484253
    6. ' map' → logprob: -3.193180799484253
    7. 'lambda' → logprob: -3.193180799484253
    8. ' bin' → logprob: -3.818180799484253
    9. ' (' → logprob: -3.943180799484253
    10. '(lambda' → logprob: -4.068181037902832

Token 28: 'orth' (ID: 2909)
  Prédit: 'der'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'der' → logprob: -0.11950226128101349
    2. 'def' → logprob: -2.869502305984497
    3. 'dert' → logprob: -3.994502305984497
    4. 'ique' → logprob: -4.744502067565918
    5. 'd' → logprob: -4.869502067565918
    6. 'ders' → logprob: -5.744502067565918
    7. 'defined' → logprob: -5.994502067565918
    8. 'less' → logprob: -6.494502067565918
    9. 'even' → logprob: -6.619502067565918
    10. 'pack' → logprob: -6.744502067565918

Token 29: 'odox' (ID: 52131)
  Prédit: 'ogonal'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ogonal' → logprob: -0.08964482694864273
    2. 'ogon' → logprob: -2.7146449089050293
    3. '```' → logprob: -5.214644908905029
    4. 'og' → logprob: -5.589644908905029
    5. 'odox' → logprob: -5.839644908905029
    6. 'g' → logprob: -6.089644908905029
    7. '``' → logprob: -7.214644908905029
    8. 'ox' → logprob: -7.214644908905029
    9. '`' → logprob: -7.464644908905029
    10. '   ' → logprob: -7.589644908905029

Token 30: ' boolean' (ID: 3870)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.05755286663770676
    2. ' return' → logprob: -4.557552814483643
    3. '(n' → logprob: -4.557552814483643
    4. 'return' → logprob: -4.682552814483643
    5. ' (' → logprob: -5.182552814483643
    6. ' ' → logprob: -6.057552814483643
    7. '   ' → logprob: -6.057552814483643
    8. '(
' → logprob: -6.182552814483643
    9. '(s' → logprob: -6.432552814483643
    10. 's' → logprob: -6.432552814483643

Token 31: ' logic' (ID: 18485)
  Prédit: ' logic'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' logic' → logprob: -1.3073303699493408
    2. '_' → logprob: -1.8073303699493408
    3. ' return' → logprob: -2.057330369949341
    4. ' ' → logprob: -2.307330369949341
    5. 's' → logprob: -2.432330369949341
    6. '(' → logprob: -2.557330369949341
    7. ' operators' → logprob: -3.057330369949341
    8. ')' → logprob: -3.432330369949341
    9. ' not' → logprob: -3.932330369949341
    10. '(not' → logprob: -4.682330131530762

Token 32: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07037907093763351
    2. '(' → logprob: -3.6953790187835693
    3. ':' → logprob: -3.6953790187835693
    4. ':return' → logprob: -5.695379257202148
    5. ' return' → logprob: -5.820379257202148
    6. '):' → logprob: -6.070379257202148
    7. ' ' → logprob: -6.195379257202148
    8. 'return' → logprob: -6.195379257202148
    9. ')' → logprob: -6.820379257202148
    10. ' (' → logprob: -7.195379257202148

Token 33: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0026585354935377836
    2. ' return' → logprob: -7.377658367156982
    3. '(' → logprob: -7.752658367156982
    4. '    ' → logprob: -7.752658367156982
    5. ' ' → logprob: -8.12765884399414
    6. ':' → logprob: -8.12765884399414
    7. '       ' → logprob: -9.12765884399414
    8. ' :' → logprob: -9.37765884399414
    9. 'return' → logprob: -9.50265884399414
    10. '    
' → logprob: -10.00265884399414

Token 34: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.48422324657440186
    2. ' return' → logprob: -0.9842232465744019
    3. 'return' (adapté à ' return') → logprob: -4.609223365783691
    4. '```' → logprob: -10.609223365783691
    5. ' ' → logprob: -11.109223365783691
    6. '    ' → logprob: -11.234223365783691
    7. '   ' → logprob: -11.484223365783691
    8. ' ' → logprob: -11.609223365783691
    9. ' `' → logprob: -11.734223365783691
    10. ')' → logprob: -11.734223365783691

Token 35: ' all' (ID: 722)
  Prédit: 'all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'all' → logprob: -0.20174144208431244
    2. ' all' → logprob: -2.4517414569854736
    3. 'not' → logprob: -3.0767414569854736
    4. 'any' → logprob: -3.3267414569854736
    5. ' not' → logprob: -4.9517412185668945
    6. 'n' → logprob: -6.2017412185668945
    7. ' any' → logprob: -6.8267412185668945
    8. 'a' → logprob: -6.9517412185668945
    9. 'bool' → logprob: -6.9517412185668945
    10. 'False' → logprob: -7.3267412185668945

Token 36: '(map' (ID: 16946)
  Prédit: '(('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '((' → logprob: -0.9858584403991699
    2. '([' → logprob: -1.11085844039917
    3. '(x' → logprob: -2.48585844039917
    4. '([(' → logprob: -2.73585844039917
    5. '(' → logprob: -3.11085844039917
    6. '(n' → logprob: -3.23585844039917
    7. '(not' → logprob: -3.48585844039917
    8. '(((' → logprob: -4.36085844039917
    9. '(map' → logprob: -4.73585844039917
    10. '(i' → logprob: -4.86085844039917

Token 37: '(lambda' (ID: 43341)
  Prédit: '(lambda'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.0007086210534907877
    2. '(' → logprob: -7.87570858001709
    3. '(bool' → logprob: -8.12570858001709
    4. '(is' → logprob: -11.37570858001709
    5. '(str' → logprob: -12.00070858001709
    6. '(int' → logprob: -12.12570858001709
    7. 'lambda' → logprob: -12.50070858001709
    8. '(None' → logprob: -13.37570858001709
    9. '   ' → logprob: -13.75070858001709
    10. '(operator' → logprob: -14.00070858001709

Token 38: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.08220341056585312
    2. ' x' → logprob: -2.5822033882141113
    3. 'lambda' → logprob: -5.832203388214111
    4. ' lambda' → logprob: -8.58220386505127
    5. ' ' → logprob: -10.08220386505127
    6. '(lambda' → logprob: -10.45720386505127
    7. 'z' → logprob: -10.45720386505127
    8. '   ' → logprob: -10.83220386505127
    9. 'k' → logprob: -11.45720386505127
    10. 'xi' → logprob: -11.70720386505127

Token 39: ':' (ID: 25)
  Prédit: '=lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=lambda' → logprob: -0.4966437518596649
    2. ':' → logprob: -0.9966437816619873
    3. 'lambda' → logprob: -4.871643543243408
    4. '=' → logprob: -5.621643543243408
    5. '(lambda' → logprob: -5.996643543243408
    6. 'ambda' → logprob: -6.121643543243408
    7. 'x' → logprob: -6.121643543243408
    8. ' :' → logprob: -7.496643543243408
    9. ' x' → logprob: -7.621643543243408
    10. ')' → logprob: -7.746643543243408

Token 40: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.04305502772331238
    2. ' x' → logprob: -4.168055057525635
    3. '(x' → logprob: -4.418055057525635
    4. 'not' → logprob: -4.543055057525635
    5. ' not' → logprob: -6.543055057525635
    6. '(not' → logprob: -6.543055057525635
    7. ' (' → logprob: -8.418054580688477
    8. 'n' → logprob: -8.418054580688477
    9. 'lambda' → logprob: -8.668054580688477
    10. '(lambda' → logprob: -9.293054580688477

Token 41: '==' (ID: 560)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -0.17986999452114105
    2. ' %' → logprob: -2.0548698902130127
    3. '==' → logprob: -3.4298698902130127
    4. ' ==' → logprob: -6.304870128631592
    5. '%x' → logprob: -7.429870128631592
    6. '!=' → logprob: -8.304869651794434
    7. ' ' → logprob: -8.429869651794434
    8. ')' → logprob: -8.679869651794434
    9. 'x' → logprob: -8.804869651794434
    10. '=' → logprob: -9.304869651794434

Token 42: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.014420284889638424
    2. ' ' → logprob: -4.889420509338379
    3. ''' → logprob: -5.639420509338379
    4. '"' → logprob: -7.139420509338379
    5. '1' → logprob: -7.514420509338379
    6. ''a' → logprob: -8.139420509338379
    7. 'n' → logprob: -8.264420509338379
    8. 'a' → logprob: -8.389420509338379
    9. '(' → logprob: -8.514420509338379
    10. 'True' → logprob: -8.764420509338379

Token 43: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0369291789829731
    2. ' or' → logprob: -3.536929130554199
    3. ' ,' → logprob: -5.286929130554199
    4. 'or' → logprob: -7.036929130554199
    5. ',n' → logprob: -8.4119291305542
    6. ' ' → logprob: -8.5369291305542
    7. ',x' → logprob: -8.9119291305542
    8. 'x' → logprob: -9.1619291305542
    9. ' if' → logprob: -9.2869291305542
    10. ' for' → logprob: -9.2869291305542

Token 44: ' [' (ID: 723)
  Prédit: '[n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[n' → logprob: -0.3754168152809143
    2. ' [' → logprob: -1.7504167556762695
    3. '[' → logprob: -2.2504167556762695
    4. ' n' → logprob: -5.1254167556762695
    5. '[x' → logprob: -5.3754167556762695
    6. 'n' → logprob: -5.3754167556762695
    7. '[a' → logprob: -5.3754167556762695
    8. 'div' → logprob: -5.7504167556762695
    9. '   ' → logprob: -5.8754167556762695
    10. '[i' → logprob: -6.5004167556762695

Token 45: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.0299393143504858
    2. ' n' → logprob: -3.9049394130706787
    3. '   ' → logprob: -5.0299391746521
    4. '(n' → logprob: -6.2799391746521
    5. 'x' → logprob: -8.279939651489258
    6. 'a' → logprob: -9.029939651489258
    7. ' (' → logprob: -9.029939651489258
    8. ' ' → logprob: -9.529939651489258
    9. '       ' → logprob: -9.654939651489258
    10. 'i' → logprob: -9.904939651489258

Token 46: '%' (ID: 4)
  Prédit: '%'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -0.11370845139026642
    2. ' %' → logprob: -2.23870849609375
    3. '%x' → logprob: -8.23870849609375
    4. '%i' → logprob: -8.23870849609375
    5. ' ' → logprob: -8.61370849609375
    6. '&' → logprob: -8.98870849609375
    7. ' &' → logprob: -10.86370849609375
    8. '%b' → logprob: -11.86370849609375
    9. '%n' → logprob: -11.98870849609375
    10. ' ' → logprob: -12.48870849609375

Token 47: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0004947714623995125
    2. ' ' → logprob: -7.625494956970215
    3. '  ' → logprob: -13.625494956970215
    4. '1' → logprob: -13.625494956970215
    5. '   ' → logprob: -13.625494956970215
    6. '4' → logprob: -14.375494956970215
    7. ')' → logprob: -15.062994956970215
    8. '10' → logprob: -15.312994956970215
    9. '(' → logprob: -15.562994956970215
    10. ',' → logprob: -15.687994956970215

Token 48: ']))

' (ID: 92947)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.1411362886428833
    2. ']))' → logprob: -2.1411361694335938
    3. ']' → logprob: -5.016136169433594
    4. ' ,' → logprob: -6.141136169433594
    5. '==' → logprob: -6.266136169433594
    6. ' for' → logprob: -7.141136169433594
    7. '])))' → logprob: -7.266136169433594
    8. ']==' → logprob: -7.516136169433594
    9. '])' → logprob: -8.266136169433594
    10. ' ]' → logprob: -8.641136169433594

Token 49: 'def' (ID: 1314)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.012846175581216812
    2. '<|end|>' → logprob: -5.512845993041992
    3. '
' → logprob: -6.137845993041992
    4. '+' → logprob: -6.637845993041992
    5. ':' → logprob: -7.012845993041992
    6. '   ' → logprob: -7.262845993041992
    7. '()' → logprob: -7.387845993041992
    8. ' ' → logprob: -7.387845993041992
    9. '*' → logprob: -7.762845993041992
    10. 'def' → logprob: -8.387845993041992

Token 50: ' double' (ID: 3503)
  Prédit: 'is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'is' → logprob: -0.4735810160636902
    2. ' is' → logprob: -1.723581075668335
    3. 'factor' → logprob: -2.098581075668335
    4. 'multiply' → logprob: -4.098580837249756
    5. ' factorial' → logprob: -4.723580837249756
    6. 'reduce' → logprob: -4.848580837249756
    7. 'product' → logprob: -4.973580837249756
    8. 'prod' → logprob: -5.098580837249756
    9. 'mul' → logprob: -5.223580837249756
    10. 'odd' → logprob: -5.723580837249756

Token 51: '_if' (ID: 25821)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1133456751704216
    2. '(n' → logprob: -2.8633456230163574
    3. '(x' → logprob: -3.2383456230163574
    4. 'd' → logprob: -5.738345623016357
    5. '(a' → logprob: -5.988345623016357
    6. '(s' → logprob: -6.863345623016357
    7. ' (' → logprob: -7.113345623016357
    8. '_' → logprob: -7.363345623016357
    9. 'a' → logprob: -7.738345623016357
    10. '(d' → logprob: -7.988345623016357

Token 52: '_' (ID: 62)
  Prédit: 'is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'is' → logprob: -0.27739161252975464
    2. '_even' → logprob: -1.5273916721343994
    3. 'even' → logprob: -3.7773916721343994
    4. '(is' → logprob: -6.40239143371582
    5. ' is' → logprob: -7.90239143371582
    6. '_is' → logprob: -9.90239143371582
    7. '_' → logprob: -10.15239143371582
    8. 'Even' → logprob: -10.27739143371582
    9. ' even' → logprob: -10.52739143371582
    10. 'def' → logprob: -10.77739143371582

Token 53: 'odd' (ID: 18303)
  Prédit: 'even'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'even' → logprob: -1.664371848164592e-05
    2. '_even' → logprob: -11.500016212463379
    3. 'is' → logprob: -13.125016212463379
    4. 'eve' → logprob: -13.500016212463379
    5. 'Even' → logprob: -13.875016212463379
    6. ' even' → logprob: -14.125016212463379
    7. 'odd' → logprob: -15.000016212463379
    8. 'ev' → logprob: -15.375016212463379
    9. 'evenodd' → logprob: -15.500016212463379
    10. 'e' → logprob: -15.875016212463379

Token 54: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.22569851577281952
    2. '(' → logprob: -1.600698471069336
    3. ' (' → logprob: -8.350698471069336
    4. '(lambda' → logprob: -10.975698471069336
    5. '(a' → logprob: -11.600698471069336
    6. ',' → logprob: -12.475698471069336
    7. '(x' → logprob: -12.725698471069336
    8. 'def' → logprob: -13.100698471069336
    9. ':' → logprob: -13.350698471069336
    10. '(i' → logprob: -13.475698471069336

Token 55: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0013042837381362915
    2. ')' → logprob: -7.3763041496276855
    3. '):
' → logprob: -7.3763041496276855
    4. ' ):' → logprob: -10.251304626464844
    5. ':' → logprob: -12.126304626464844
    6. '(n' → logprob: -12.376304626464844
    7. '   ' → logprob: -12.751304626464844
    8. '):

' → logprob: -13.751304626464844
    9. '):
' → logprob: -14.376304626464844
    10. ' ' → logprob: -14.876304626464844

Token 56: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.34058767557144165
    2. ' return' → logprob: -1.3405876159667969
    3. ' if' → logprob: -4.590587615966797
    4. 'return' → logprob: -4.715587615966797
    5. ':' → logprob: -5.340587615966797
    6. 'if' → logprob: -7.090587615966797
    7. ' n' → logprob: -7.715587615966797
    8. '    ' → logprob: -7.840587615966797
    9. ' :' → logprob: -7.965587615966797
    10. ':return' → logprob: -8.590587615966797

Token 57: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.9967037439346313
    2. '   ' → logprob: -1.2467037439346313
    3. ' n' → logprob: -1.4967037439346313
    4. 'return' (adapté à ' return') → logprob: -2.746703624725342
    5. ' if' → logprob: -3.496703624725342
    6. 'n' → logprob: -4.121703624725342
    7. 'if' → logprob: -4.746703624725342
    8. ' ' → logprob: -9.6217041015625
    9. '```' → logprob: -9.9967041015625
    10. '    ' → logprob: -10.2467041015625

Token 58: ' reduce' (ID: 10389)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.525287926197052
    2. ' n' → logprob: -0.900287926197052
    3. '0' → logprob: -7.275288105010986
    4. ' ' → logprob: -8.150287628173828
    5. '(n' → logprob: -8.150287628173828
    6. '2' → logprob: -8.275287628173828
    7. ' (' → logprob: -8.400287628173828
    8. '1' → logprob: -8.650287628173828
    9. '   ' → logprob: -9.025287628173828
    10. '(' → logprob: -9.775287628173828

Token 59: '(m' (ID: 2145)
  Prédit: '(m'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(m' → logprob: -0.02736520580947399
    2. '(' → logprob: -3.777365207672119
    3. '(lambda' → logprob: -5.527365207672119
    4. '(operator' → logprob: -9.027364730834961
    5. '((' → logprob: -12.902364730834961
    6. '(mu' → logprob: -13.027364730834961
    7. ' (' → logprob: -13.527364730834961
    8. '(
' → logprob: -13.527364730834961
    9. 'mul' → logprob: -13.652364730834961
    10. ' ' → logprob: -13.777364730834961

Token 60: 'ul' (ID: 361)
  Prédit: 'ul'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ul' → logprob: -8.061054359131958e-06
    2. '<ul' → logprob: -12.500007629394531
    3. 'u' → logprob: -13.500007629394531
    4. ' ul' → logprob: -13.625007629394531
    5. 'ult' → logprob: -14.375007629394531
    6. 'ultiply' → logprob: -15.500007629394531
    7. 'mul' → logprob: -16.00000762939453
    8. '```' → logprob: -16.12500762939453
    9. '-ul' → logprob: -16.25000762939453
    10. '   ' → logprob: -16.50000762939453

Token 61: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.34942835569381714
    2. '([' → logprob: -1.349428415298462
    3. '(' → logprob: -4.224428176879883
    4. ',[' → logprob: -4.224428176879883
    5. ')' → logprob: -6.599428176879883
    6. '[' → logprob: -6.724428176879883
    7. ',n' → logprob: -7.224428176879883
    8. '),' → logprob: -7.474428176879883
    9. '(n' → logprob: -7.599428176879883
    10. ' ,' → logprob: -8.099428176879883

Token 62: ' [' (ID: 723)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.4355245530605316
    2. '[n' → logprob: -1.435524582862854
    3. '([' → logprob: -3.3105244636535645
    4. ' [' → logprob: -3.8105244636535645
    5. '(range' → logprob: -4.4355244636535645
    6. '(' → logprob: -4.6855244636535645
    7. '(n' → logprob: -4.6855244636535645
    8. '[(' → logprob: -5.1855244636535645
    9. '[a' → logprob: -5.1855244636535645
    10. '[str' → logprob: -5.6855244636535645

Token 63: 'n' (ID: 77)
  Prédit: '[n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[n' → logprob: -0.9824326634407043
    2. 'n' → logprob: -1.4824326038360596
    3. '2' → logprob: -1.6074326038360596
    4. '[' → logprob: -2.3574326038360596
    5. '([' → logprob: -3.4824326038360596
    6. '(n' → logprob: -3.6074326038360596
    7. '(' → logprob: -4.857432842254639
    8. '1' → logprob: -4.982432842254639
    9. '[i' → logprob: -4.982432842254639
    10. '[int' → logprob: -5.482432842254639

Token 64: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.04936889186501503
    2. ' ,' → logprob: -3.7993688583374023
    3. ' if' → logprob: -4.424368858337402
    4. '2' → logprob: -5.174368858337402
    5. '*' → logprob: -5.549368858337402
    6. 'if' → logprob: -6.674368858337402
    7. '   ' → logprob: -6.924368858337402
    8. ' *' → logprob: -7.049368858337402
    9. ']' → logprob: -8.549368858337402
    10. '1' → logprob: -8.799368858337402

Token 65: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.01716718077659607
    2. ' ' → logprob: -4.267167091369629
    3. '3' → logprob: -6.392167091369629
    4. '1' → logprob: -7.142167091369629
    5. '   ' → logprob: -8.392167091369629
    6. 'n' → logprob: -9.767167091369629
    7. '  ' → logprob: -9.892167091369629
    8. '(' → logprob: -10.267167091369629
    9. 'is' → logprob: -10.392167091369629
    10. ' n' → logprob: -10.392167091369629

Token 66: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.012062188237905502
    2. '3' → logprob: -5.137062072753906
    3. ' ' → logprob: -5.262062072753906
    4. '1' → logprob: -7.512062072753906
    5. '(' → logprob: -9.137062072753906
    6. '   ' → logprob: -9.262062072753906
    7. 'n' → logprob: -10.137062072753906
    8. '  ' → logprob: -10.387062072753906
    9. '(n' → logprob: -10.512062072753906
    10. 'is' → logprob: -10.762062072753906

Token 67: '])' (ID: 4636)
  Prédit: '])'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.35398393869400024
    2. '],' → logprob: -1.2289838790893555
    3. ']' → logprob: -5.2289838790893555
    4. ' if' → logprob: -9.728983879089355
    5. ' ])' → logprob: -10.103983879089355
    6. 'if' → logprob: -10.603983879089355
    7. ' ],' → logprob: -11.478983879089355
    8. ')' → logprob: -12.103983879089355
    9. 'n' → logprob: -12.728983879089355
    10. '   ' → logprob: -12.978983879089355

Token 68: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.3002510070800781
    2. ' ' → logprob: -1.9252510070800781
    3. 'if' → logprob: -2.425251007080078
    4. '   ' → logprob: -5.175251007080078
    5. '<|end|>' → logprob: -5.925251007080078
    6. '
' → logprob: -6.050251007080078
    7. '\n' → logprob: -6.050251007080078
    8. ' else' → logprob: -6.175251007080078
    9. ' 
' → logprob: -7.050251007080078
    10. ')' → logprob: -7.050251007080078

Token 69: ' not' (ID: 625)
  Prédit: ' not'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.4460647404193878
    2. ' n' → logprob: -1.1960647106170654
    3. 'n' → logprob: -3.4460647106170654
    4. 'not' → logprob: -3.6960647106170654
    5. ' is' → logprob: -7.6960649490356445
    6. '(not' → logprob: -9.446064949035645
    7. ' ' → logprob: -9.696064949035645
    8. '(n' → logprob: -9.946064949035645
    9. '   ' → logprob: -10.383564949035645
    10. ' (' → logprob: -10.446064949035645

Token 70: ' is' (ID: 382)
  Prédit: ' is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.01177216973155737
    2. 'is' → logprob: -4.511772155761719
    3. ' (' → logprob: -7.386772155761719
    4. '<|end|>' → logprob: -10.261772155761719
    5. ' ' → logprob: -10.511772155761719
    6. '(is' → logprob: -10.636772155761719
    7. '<|end|>' → logprob: -12.136772155761719
    8. '(' → logprob: -12.511772155761719
    9. ' n' → logprob: -13.261772155761719
    10. 'n' → logprob: -13.386772155761719

Token 71: '_even' (ID: 186029)
  Prédit: '_even'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_even' → logprob: -0.0028096288442611694
    2. '_' → logprob: -5.877809524536133
    3. ' _' → logprob: -13.252809524536133
    4. '(n' → logprob: -14.627809524536133
    5. 'even' → logprob: -14.627809524536133
    6. '_is' → logprob: -14.877809524536133
    7. '_equal' → logprob: -15.377809524536133
    8. '_ev' → logprob: -15.502809524536133
    9. '_every' → logprob: -15.627809524536133
    10. '(_' → logprob: -15.627809524536133

Token 72: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.35628268122673035
    2. '(' → logprob: -1.2312827110290527
    3. ' (' → logprob: -4.856282711029053
    4. '(
' → logprob: -11.356282234191895
    5. ' ' → logprob: -12.481282234191895
    6. '<|end|>' → logprob: -12.606282234191895
    7. '(

' → logprob: -12.856282234191895
    8. '((' → logprob: -14.106282234191895
    9. '(space' → logprob: -14.606282234191895
    10. '('' → logprob: -14.856282234191895

Token 73: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0003566767554730177
    2. ' else' → logprob: -8.375356674194336
    3. 'else' → logprob: -9.500356674194336
    4. ' )' → logprob: -10.000356674194336
    5. ' ' → logprob: -13.125356674194336
    6. '   ' → logprob: -13.375356674194336
    7. ')
' → logprob: -14.250356674194336
    8. '`)' → logprob: -15.000356674194336
    9. '})' → logprob: -15.750356674194336
    10. ')

' → logprob: -15.750356674194336

Token 74: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.029796196147799492
    2. 'else' → logprob: -3.5297961235046387
    3. ' ' → logprob: -10.654796600341797
    4. '	else' → logprob: -11.654796600341797
    5. '(n' → logprob: -12.279796600341797
    6. 'n' → logprob: -13.154796600341797
    7. '   ' → logprob: -13.404796600341797
    8. ' n' → logprob: -14.029796600341797
    9. '<|end|>' → logprob: -14.154796600341797
    10. '  ' → logprob: -14.154796600341797

Token 75: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.04859759286046028
    2. 'n' → logprob: -3.048597574234009
    3. '	n' → logprob: -12.04859733581543
    4. ' ' → logprob: -13.17359733581543
    5. ' ' → logprob: -13.67359733581543
    6. ' 
' → logprob: -14.67359733581543
    7. '    ' → logprob: -15.54859733581543
    8. ' None' → logprob: -15.67359733581543
    9. '<|end|>' → logprob: -15.79859733581543
    10. '(n' → logprob: -16.67359733581543

Token 76: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.27648550271987915
    2. '<|end|>' → logprob: -2.0264854431152344
    3. 'a' → logprob: -4.026485443115234
    4. 'n' → logprob: -4.151485443115234
    5. '```' → logprob: -4.276485443115234
    6. '\n' → logprob: -4.401485443115234
    7. '#' → logprob: -4.526485443115234
    8. ')' → logprob: -5.026485443115234
    9. '' → logprob: -5.776485443115234
    10. ' ' → logprob: -5.776485443115234

Token 77: 'print' (ID: 1598)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.457742691040039
    2. 'd' → logprob: -1.582742691040039
    3. '#' → logprob: -2.207742691040039
    4. '
' → logprob: -2.207742691040039
    5. ')' → logprob: -2.332742691040039
    6. 'n' → logprob: -2.957742691040039
    7. '<|end|>' → logprob: -3.207742691040039
    8. '(' → logprob: -3.457742691040039
    9. 'print' → logprob: -3.582742691040039
    10. '.' → logprob: -4.457742691040039

Token 78: '([' (ID: 5194)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0025412975810468197
    2. '(double' → logprob: -6.3775410652160645
    3. '(print' → logprob: -7.1275410652160645
    4. '(a' → logprob: -12.002541542053223
    5. ' (' → logprob: -12.002541542053223
    6. '((' → logprob: -12.627541542053223
    7. '()' → logprob: -13.377541542053223
    8. '(+' → logprob: -13.627541542053223
    9. '(Double' → logprob: -13.627541542053223
    10. '(open' → logprob: -13.752541542053223

Token 79: 'double' (ID: 9489)
  Prédit: 'double'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'double' → logprob: -0.0017073206836357713
    2. ' double' → logprob: -6.376707553863525
    3. '   ' → logprob: -13.126707077026367
    4. ' ' → logprob: -13.251707077026367
    5. '(double' → logprob: -14.876707077026367
    6. 'x' → logprob: -15.626707077026367
    7. 'int' → logprob: -15.876707077026367
    8. '`' → logprob: -16.376707077026367
    9. '  ' → logprob: -16.501707077026367
    10. '	double' → logprob: -16.501707077026367

Token 80: '_if' (ID: 25821)
  Prédit: '_if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_if' → logprob: -2.2200749754119897e-06
    2. 'if' → logprob: -14.000001907348633
    3. '_' → logprob: -14.375001907348633
    4. '_i' → logprob: -15.875001907348633
    5. '(' → logprob: -16.000001907348633
    6. 'If' → logprob: -16.250001907348633
    7. '(if' → logprob: -16.375001907348633
    8. ' if' → logprob: -16.625001907348633
    9. '(x' → logprob: -17.000001907348633
    10. '_IF' → logprob: -17.250001907348633

Token 81: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -2.696889623621246e-06
    2. '_o' → logprob: -13.62500286102295
    3. '_od' → logprob: -14.62500286102295
    4. 'odd' → logprob: -15.00000286102295
    5. ' odd' → logprob: -15.62500286102295
    6. 'o' → logprob: -16.375001907348633
    7. '_if' → logprob: -16.500001907348633
    8. '_even' → logprob: -16.750001907348633
    9. '(' → logprob: -17.125001907348633
    10. '_oc' → logprob: -18.125001907348633

Token 82: 'odd' (ID: 18303)
  Prédit: 'odd'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'odd' → logprob: -0.00036204091156832874
    2. 'od' → logprob: -8.500362396240234
    3. 'o' → logprob: -9.375362396240234
    4. ' odd' → logprob: -10.625362396240234
    5. 'n' → logprob: -11.875362396240234
    6. 'x' → logprob: -12.125362396240234
    7. 'old' → logprob: -12.250362396240234
    8. 'i' → logprob: -12.375362396240234
    9. '   ' → logprob: -12.750362396240234
    10. '  ' → logprob: -13.000362396240234

Token 83: '(a' (ID: 6271)
  Prédit: '(i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -1.0497992038726807
    2. '(a' → logprob: -1.0497992038726807
    3. '(x' → logprob: -1.5497992038726807
    4. '(n' → logprob: -2.5497992038726807
    5. '(' → logprob: -4.799798965454102
    6. '(num' → logprob: -6.674798965454102
    7. ' (' → logprob: -10.299798965454102
    8. '(int' → logprob: -10.424798965454102
    9. 'a' → logprob: -11.924798965454102
    10. '(number' → logprob: -12.174798965454102

Token 84: '),' (ID: 936)
  Prédit: ')])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')])' → logprob: -0.0011583197629079223
    2. ')' → logprob: -7.001158237457275
    3. ')]' → logprob: -9.001158714294434
    4. '])' → logprob: -9.251158714294434
    5. '))' → logprob: -11.376158714294434
    6. ')])
' → logprob: -11.876158714294434
    7. ' )' → logprob: -12.751158714294434
    8. ')])

' → logprob: -13.876158714294434
    9. ']))' → logprob: -14.001158714294434
    10. ')))' → logprob: -14.376158714294434

Token 85: ' a' (ID: 261)
  Prédit: 'double'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'double' → logprob: -0.6808880567550659
    2. 'a' → logprob: -0.9308880567550659
    3. ' double' → logprob: -2.6808881759643555
    4. ' a' → logprob: -3.6808881759643555
    5. ' ' → logprob: -5.9308881759643555
    6. '2' → logprob: -6.6808881759643555
    7. '0' → logprob: -7.5558881759643555
    8. '3' → logprob: -8.555888175964355
    9. '1' → logprob: -8.680888175964355
    10. 'is' → logprob: -8.805888175964355

Token 86: '][' (ID: 2696)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '])' → logprob: -0.0006139091565273702
    2. ')' → logprob: -7.625613689422607
    3. ')])' → logprob: -9.500614166259766
    4. ' ])' → logprob: -10.875614166259766
    5. ']' → logprob: -11.250614166259766
    6. ',' → logprob: -12.125614166259766
    7. '))' → logprob: -12.750614166259766
    8. ')]' → logprob: -13.250614166259766
    9. '})' → logprob: -13.500614166259766
    10. ']])' → logprob: -13.500614166259766

Token 87: 'is' (ID: 276)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '])' → logprob: -0.3259367346763611
    2. '==' → logprob: -1.9509367942810059
    3. '0' → logprob: -3.325936794281006
    4. ']' → logprob: -3.700936794281006
    5. ')' → logprob: -3.825936794281006
    6. ']==' → logprob: -4.575936794281006
    7. '-' → logprob: -4.950936794281006
    8. '!=' → logprob: -4.950936794281006
    9. ' ==' → logprob: -5.325936794281006
    10. '1' → logprob: -5.450936794281006

Token 88: '_even' (ID: 186029)
  Prédit: '_even'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_even' → logprob: -3.531315314830863e-06
    2. '_' → logprob: -13.250003814697266
    3. 'even' → logprob: -14.000003814697266
    4. '_e' → logprob: -14.125003814697266
    5. '_ev' → logprob: -16.375003814697266
    6. ' _' → logprob: -17.375003814697266
    7. ' even' → logprob: -17.375003814697266
    8. '_equal' → logprob: -17.625003814697266
    9. 'Even' → logprob: -18.250003814697266
    10. '_a' → logprob: -18.250003814697266

Token 89: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.0013808291405439377
    2. '(' → logprob: -6.626380920410156
    3. ')' → logprob: -10.501380920410156
    4. ' (' → logprob: -11.376380920410156
    5. '(n' → logprob: -12.251380920410156
    6. ')]' → logprob: -12.876380920410156
    7. '(
' → logprob: -12.876380920410156
    8. 'a' → logprob: -12.876380920410156
    9. '(

' → logprob: -14.376380920410156
    10. '((' → logprob: -14.751380920410156

Token 90: ')])' (ID: 99066)
  Prédit: ')])'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')])' → logprob: -0.004145591985434294
    2. ')' → logprob: -5.879145622253418
    3. ')]' → logprob: -7.629145622253418
    4. ' )' → logprob: -8.254145622253418
    5. '(a' → logprob: -8.754145622253418
    6. ')])
' → logprob: -9.004145622253418
    7. '())' → logprob: -9.004145622253418
    8. ')])

' → logprob: -9.504145622253418
    9. '(' → logprob: -10.004145622253418
    10. 'a' → logprob: -11.129145622253418


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 88
Tokens correctement prédits (1ère position, stricte): 33
Tokens correctement prédits (1ère position, avec adaptation): 33
Tokens correctement prédits (top 10): 60
Précision stricte (1ère position): 37.50%
Précision adaptée (1ère position): 37.50%
Précision (top 10): 68.18%
================================================================================
