================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:47:51
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
a = list(map(int, input().split()))
sum = 0
for i in range(n):
    sum += 1 / a[i]
print(1 / sum)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00010807292710524052
    2. '(n' → logprob: -10.250107765197754
    3. ''' → logprob: -10.625107765197754
    4. '('' → logprob: -11.375107765197754
    5. '```' → logprob: -11.625107765197754
    6. '(
' → logprob: -12.000107765197754
    7. '()' → logprob: -12.375107765197754
    8. '("("' → logprob: -12.375107765197754
    9. '`' → logprob: -12.500107765197754
    10. ')' → logprob: -13.125107765197754

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03871168941259384
    2. ')' → logprob: -3.5387117862701416
    3. '()' → logprob: -4.9137115478515625
    4. '())' → logprob: -7.1637115478515625
    5. '(
' → logprob: -8.663711547851562
    6. '```' → logprob: -9.163711547851562
    7. '(()' → logprob: -9.413711547851562
    8. '("("' → logprob: -9.663711547851562
    9. '('' → logprob: -9.913711547851562
    10. '`' → logprob: -10.163711547851562

Token 5: 'a' (ID: 64)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -1.0505870580673218
    2. 'for' → logprob: -1.3005870580673218
    3. 'if' → logprob: -1.4255870580673218
    4. 's' → logprob: -3.1755871772766113
    5. 'f' → logprob: -4.175587177276611
    6. 'x' → logprob: -4.300587177276611
    7. 'a' → logprob: -4.550587177276611
    8. ')' → logprob: -4.675587177276611
    9. ' ' → logprob: -4.675587177276611
    10. '*' → logprob: -4.925587177276611

Token 6: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.030097683891654015
    2. ' =' → logprob: -4.405097484588623
    3. '=' → logprob: -5.405097484588623
    4. '[i' → logprob: -5.905097484588623
    5. 'r' → logprob: -6.030097484588623
    6. '.' → logprob: -6.655097484588623
    7. 'a' → logprob: -6.780097484588623
    8. '[a' → logprob: -7.030097484588623
    9. 'rray' → logprob: -7.280097484588623
    10. '[:]' → logprob: -7.530097484588623

Token 7: ' list' (ID: 1562)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.6180571913719177
    2. ' []' → logprob: -1.1180572509765625
    3. 'list' → logprob: -2.7430572509765625
    4. ' [' → logprob: -3.4930572509765625
    5. ' list' → logprob: -4.1180572509765625
    6. '[' → logprob: -4.6180572509765625
    7. '[input' → logprob: -5.6180572509765625
    8. '[int' → logprob: -6.1180572509765625
    9. 'input' → logprob: -6.3680572509765625
    10. '[n' → logprob: -6.3680572509765625

Token 8: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0002942287246696651
    2. '(a' → logprob: -8.50029468536377
    3. '(range' → logprob: -9.62529468536377
    4. '(
' → logprob: -12.75029468536377
    5. '```' → logprob: -12.87529468536377
    6. '()' → logprob: -13.00029468536377
    7. '[' → logprob: -13.37529468536377
    8. '(input' → logprob: -13.37529468536377
    9. '((' → logprob: -13.62529468536377
    10. '(n' → logprob: -13.62529468536377

Token 9: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.11733400821685791
    2. '(' → logprob: -2.3673338890075684
    3. '(str' → logprob: -4.242333889007568
    4. '(lambda' → logprob: -6.992333889007568
    5. '(input' → logprob: -7.242333889007568
    6. 'int' → logprob: -8.117334365844727
    7. ')' → logprob: -8.867334365844727
    8. '```' → logprob: -8.867334365844727
    9. '<int' → logprob: -9.367334365844727
    10. '(eval' → logprob: -9.617334365844727

Token 10: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0224057137966156
    2. '(' → logprob: -3.8974056243896484
    3. ',input' → logprob: -6.897405624389648
    4. ')' → logprob: -8.397405624389648
    5. '))' → logprob: -8.522405624389648
    6. 'input' → logprob: -9.147405624389648
    7. '=input' → logprob: -10.022405624389648
    8. ',' → logprob: -10.147405624389648
    9. '(eval' → logprob: -10.147405624389648
    10. '```' → logprob: -10.522405624389648

Token 11: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.02977536804974079
    2. ' input' → logprob: -3.529775381088257
    3. '(input' → logprob: -10.654775619506836
    4. ',input' → logprob: -14.654775619506836
    5. ')' → logprob: -15.029775619506836
    6. '=input' → logprob: -15.279775619506836
    7. '	input' → logprob: -15.779775619506836
    8. '<input' → logprob: -16.529775619506836
    9. '[input' → logprob: -17.029775619506836
    10. ' ' → logprob: -17.779775619506836

Token 12: '().' (ID: 1454)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.8747535943984985
    2. '().' → logprob: -1.1247535943984985
    3. '()' → logprob: -1.6247535943984985
    4. '())' → logprob: -2.874753475189209
    5. '()));' → logprob: -5.749753475189209
    6. '(' → logprob: -7.624753475189209
    7. '())))' → logprob: -7.624753475189209
    8. '()>' → logprob: -8.874753952026367
    9. '());' → logprob: -8.874753952026367
    10. '))' → logprob: -9.374753952026367

Token 13: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0004727371269837022
    2. 'strip' → logprob: -7.750472545623779
    3. 'rstrip' → logprob: -10.125473022460938
    4. ' split' → logprob: -13.375473022460938
    5. '(split' → logprob: -15.125473022460938
    6. 'spl' → logprob: -15.750473022460938
    7. ')' → logprob: -17.125473022460938
    8. 's' → logprob: -17.875473022460938
    9. 'sp' → logprob: -18.250473022460938
    10. '.split' → logprob: -18.875473022460938

Token 14: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.6303409337997437
    2. '))' → logprob: -0.8803409337997437
    3. ')' → logprob: -3.630341053009033
    4. '())' → logprob: -3.880341053009033
    5. '()' → logprob: -5.255341053009033
    6. '(' → logprob: -7.630341053009033
    7. ')))' → logprob: -10.505340576171875
    8. ''))' → logprob: -10.880340576171875
    9. '())))' → logprob: -11.630340576171875
    10. '()));' → logprob: -11.755340576171875

Token 15: 'sum' (ID: 12298)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.5533328056335449
    2. 's' → logprob: -1.178332805633545
    3. 'c' → logprob: -3.178332805633545
    4. 'for' → logprob: -3.553332805633545
    5. 'sum' → logprob: -3.928332805633545
    6. 'b' → logprob: -5.303332805633545
    7. 'm' → logprob: -5.303332805633545
    8. 'count' → logprob: -5.678332805633545
    9. 'max' → logprob: -5.803332805633545
    10. 'd' → logprob: -6.303332805633545

Token 16: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004778872709721327
    2. '(a' → logprob: -5.754778861999512
    3. '_' → logprob: -6.754778861999512
    4. 'a' → logprob: -8.629778861999512
    5. '_a' → logprob: -9.504778861999512
    6. 's' → logprob: -9.504778861999512
    7. ')' → logprob: -10.504778861999512
    8. '(sum' → logprob: -10.504778861999512
    9. '()' → logprob: -11.504778861999512
    10. '_sum' → logprob: -11.754778861999512

Token 17: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.34248438477516174
    2. ' ' → logprob: -1.3424843549728394
    3. 'a' → logprob: -4.092484474182129
    4. ' a' → logprob: -4.467484474182129
    5. ' sum' → logprob: -8.092484474182129
    6. 'sum' → logprob: -8.467484474182129
    7. '(' → logprob: -10.592484474182129
    8. '(a' → logprob: -10.592484474182129
    9. '(sum' → logprob: -10.592484474182129
    10. ')' → logprob: -11.092484474182129

Token 18: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.050548940896987915
    2. 'a' → logprob: -3.050549030303955
    3. 'sum' → logprob: -6.300549030303955
    4. ' ' → logprob: -9.800548553466797
    5. 'max' → logprob: -10.550548553466797
    6. '(sum' → logprob: -11.175548553466797
    7. ')' → logprob: -11.925548553466797
    8. ' sum' → logprob: -12.050548553466797
    9. '(a' → logprob: -12.300548553466797
    10. ' a' → logprob: -12.425548553466797

Token 19: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.03138652443885803
    2. '
' → logprob: -4.656386375427246
    3. '_' → logprob: -5.031386375427246
    4. ' for' → logprob: -5.031386375427246
    5. '\n' → logprob: -5.281386375427246
    6. '\' → logprob: -7.406386375427246
    7. ')' → logprob: -7.531386375427246
    8. '' → logprob: -7.656386375427246
    9. '+' → logprob: -8.281386375427246
    10. ' ' → logprob: -8.656386375427246

Token 20: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0007481599459424615
    2. '```' → logprob: -7.750748157501221
    3. ' for' → logprob: -8.875748634338379
    4. '
' → logprob: -10.000748634338379
    5. 'n' → logprob: -10.000748634338379
    6. 'a' → logprob: -10.125748634338379
    7. 'i' → logprob: -11.000748634338379
    8. '+' → logprob: -12.375748634338379
    9. '``' → logprob: -12.375748634338379
    10. '<|end|>' → logprob: -12.750748634338379

Token 21: ' i' (ID: 575)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4351211488246918
    2. ' i' → logprob: -1.0601211786270142
    3. '  ' → logprob: -5.435121059417725
    4. 'i' → logprob: -6.685121059417725
    5. '_' → logprob: -8.185121536254883
    6. ' ‌' → logprob: -8.810121536254883
    7. ' n' → logprob: -8.935121536254883
    8. ' a' → logprob: -9.185121536254883
    9. ' _' → logprob: -10.810121536254883
    10. ')' → logprob: -10.935121536254883

Token 22: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.04028426110744476
    2. 'in' → logprob: -3.2902841567993164
    3. ' ' → logprob: -6.665284156799316
    4. '[' → logprob: -7.790284156799316
    5. '  ' → logprob: -8.040284156799316
    6. ')' → logprob: -10.540284156799316
    7. '<|end|>' → logprob: -10.540284156799316
    8. '<' → logprob: -10.665284156799316
    9. '_' → logprob: -10.665284156799316
    10. ' <' → logprob: -11.165284156799316

Token 23: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.06881477683782578
    2. 'range' → logprob: -2.818814754486084
    3. ' a' → logprob: -5.193814754486084
    4. 'a' → logprob: -6.693814754486084
    5. ' ' → logprob: -11.068815231323242
    6. ' n' → logprob: -12.318815231323242
    7. '	range' → logprob: -12.443815231323242
    8. 'n' → logprob: -12.693815231323242
    9. ')' → logprob: -13.193815231323242
    10. ' xrange' → logprob: -13.818815231323242

Token 24: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.055427055805921555
    2. '(n' → logprob: -2.930427074432373
    3. ' (' → logprob: -7.805427074432373
    4. '(len' → logprob: -9.055426597595215
    5. '(
' → logprob: -12.180426597595215
    6. ' ' → logprob: -12.305426597595215
    7. '(range' → logprob: -12.680426597595215
    8. '(i' → logprob: -12.805426597595215
    9. ' n' → logprob: -13.930426597595215
    10. '(

' → logprob: -14.305426597595215

Token 25: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0037472255062311888
    2. ')' → logprob: -6.003747463226318
    3. ' ):' → logprob: -6.878747463226318
    4. '+' → logprob: -8.75374698638916
    5. '):
' → logprob: -10.25374698638916
    6. ':' → logprob: -10.50374698638916
    7. ' )' → logprob: -12.12874698638916
    8. '-' → logprob: -12.37874698638916
    9. '**' → logprob: -12.87874698638916
    10. ' ' → logprob: -13.12874698638916

Token 26: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.11280356347560883
    2. 'a' → logprob: -2.8628034591674805
    3. 'sum' → logprob: -4.1128034591674805
    4. ' a' → logprob: -4.6128034591674805
    5. ' sum' → logprob: -4.6128034591674805
    6. '    ' → logprob: -4.8628034591674805
    7. ''' → logprob: -6.1128034591674805
    8. '   ' → logprob: -6.7378034591674805
    9. '<|end|>' → logprob: -8.23780345916748
    10. ' '' → logprob: -8.36280345916748

Token 27: ' sum' (ID: 4215)
  Prédit: ' sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sum' → logprob: -0.7554348707199097
    2. 'sum' (adapté à ' sum') → logprob: -0.7554348707199097
    3. ' ' → logprob: -3.880434989929199
    4. 'a' → logprob: -4.005434989929199
    5. ' a' → logprob: -4.130434989929199
    6. '    ' → logprob: -6.005434989929199
    7. ' if' → logprob: -6.755434989929199
    8. '   ' → logprob: -7.255434989929199
    9. 'if' → logprob: -8.1304349899292
    10. '(sum' → logprob: -8.6304349899292

Token 28: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.0062586660496890545
    2. '+=' → logprob: -5.256258487701416
    3. '+' → logprob: -7.256258487701416
    4. ' ' → logprob: -8.506258964538574
    5. ' +' → logprob: -9.881258964538574
    6. '<|end|>' → logprob: -11.256258964538574
    7. '+='' → logprob: -11.506258964538574
    8. ')' → logprob: -12.131258964538574
    9. '=' → logprob: -12.131258964538574
    10. ']+=' → logprob: -12.131258964538574

Token 29: ' ' (ID: 220)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.12693051993846893
    2. ' a' → logprob: -2.1269304752349854
    3. ' ' → logprob: -13.501930236816406
    4. '	a' → logprob: -14.751930236816406
    5. '(a' → logprob: -15.376930236816406
    6. ' ' → logprob: -16.001930236816406
    7. '_a' → logprob: -16.251930236816406
    8. '   ' → logprob: -16.376930236816406
    9. 'ai' → logprob: -16.751930236816406
    10. '```' → logprob: -17.126930236816406

Token 30: '1' (ID: 16)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.306760805164231e-05
    2. ' a' → logprob: -11.25001335144043
    3. '   ' → logprob: -18.25001335144043
    4. '```' → logprob: -18.50001335144043
    5. 'ai' → logprob: -19.00001335144043
    6. 'а' → logprob: -19.12501335144043
    7. '	a' → logprob: -19.12501335144043
    8. '(a' → logprob: -19.12501335144043
    9. ' ' → logprob: -19.25001335144043
    10. '`' → logprob: -19.37501335144043

Token 31: ' /' (ID: 820)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.7707565426826477
    2. ' ' → logprob: -1.020756483078003
    3. '[' → logprob: -2.020756483078003
    4. ' a' → logprob: -3.895756483078003
    5. '[a' → logprob: -4.645756721496582
    6. '[i' → logprob: -4.770756721496582
    7. '   ' → logprob: -6.145756721496582
    8. '  ' → logprob: -6.520756721496582
    9. '	a' → logprob: -8.145756721496582
    10. ' *' → logprob: -8.145756721496582

Token 32: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -3.0948158382670954e-05
    2. ' a' → logprob: -10.875030517578125
    3. '(a' → logprob: -11.750030517578125
    4. '(' → logprob: -12.625030517578125
    5. '2' → logprob: -15.125030517578125
    6. 'max' → logprob: -15.875030517578125
    7. '10' → logprob: -16.250030517578125
    8. ' (' → logprob: -16.250030517578125
    9. 'i' → logprob: -16.875030517578125
    10. ' ' → logprob: -16.875030517578125

Token 33: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.0009125363430939615
    2. '[' → logprob: -7.000912666320801
    3. 'i' → logprob: -14.7509126663208
    4. '\[' → logprob: -15.1259126663208
    5. '[a' → logprob: -15.7509126663208
    6. ' [' → logprob: -16.000911712646484
    7. '```' → logprob: -17.250911712646484
    8. '[n' → logprob: -17.500911712646484
    9. '[
' → logprob: -17.500911712646484
    10. '[I' → logprob: -18.000911712646484

Token 34: ']
' (ID: 1592)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -9.662937372922897e-05
    2. ']' → logprob: -10.125096321105957
    3. '[' → logprob: -11.000096321105957
    4. '])' → logprob: -11.250096321105957
    5. '[i' → logprob: -11.250096321105957
    6. ' )' → logprob: -12.125096321105957
    7. '）' → logprob: -13.375096321105957
    8. '))' → logprob: -13.500096321105957
    9. ')]' → logprob: -13.500096321105957
    10. ')])' → logprob: -14.000096321105957

Token 35: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.8607892394065857
    2. 'result' → logprob: -2.1107892990112305
    3. '
' → logprob: -2.1107892990112305
    4. 's' → logprob: -2.3607892990112305
    5. ')' → logprob: -2.8607892990112305
    6. 'r' → logprob: -2.8607892990112305
    7. '1' → logprob: -3.4857892990112305
    8. 'sum' → logprob: -3.6107892990112305
    9. 'b' → logprob: -4.2357892990112305
    10. 'total' → logprob: -4.4857892990112305

Token 36: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00014036978245712817
    2. '(sum' → logprob: -9.125140190124512
    3. '("("' → logprob: -11.125140190124512
    4. '('' → logprob: -12.250140190124512
    5. '()' → logprob: -12.750140190124512
    6. '((' → logprob: -13.125140190124512
    7. '(
' → logprob: -13.375140190124512
    8. '(round' → logprob: -13.500140190124512
    9. '(

' → logprob: -13.625140190124512
    10. '(a' → logprob: -13.875140190124512

Token 37: '1' (ID: 16)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.15363577008247375
    2. '1' → logprob: -2.6536357402801514
    3. ')' → logprob: -2.9036357402801514
    4. 'n' → logprob: -4.6536359786987305
    5. '3' → logprob: -5.4036359786987305
    6. '(sum' → logprob: -6.2786359786987305
    7. '(' → logprob: -7.7786359786987305
    8. '")' → logprob: -8.40363597869873
    9. 'a' → logprob: -9.27863597869873
    10. ' )' → logprob: -9.40363597869873

Token 38: ' /' (ID: 820)
  Prédit: '/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '/' → logprob: -0.027610961347818375
    2. ' /' → logprob: -3.777611017227173
    3. ')' → logprob: -5.527610778808594
    4. '/)' → logprob: -8.152610778808594
    5. '/s' → logprob: -9.402610778808594
    6. ' )' → logprob: -11.902610778808594
    7. '/(' → logprob: -14.402610778808594
    8. '/')' → logprob: -14.402610778808594
    9. ')/' → logprob: -15.027610778808594
    10. '(' → logprob: -15.402610778808594

Token 39: ' sum' (ID: 4215)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sum' → logprob: -4.572941179503687e-05
    2. ' sum' → logprob: -10.000045776367188
    3. 'su' → logprob: -15.625045776367188
    4. 's' → logprob: -16.000045776367188
    5. '(sum' → logprob: -17.375045776367188
    6. 'summ' → logprob: -18.375045776367188
    7. '	sum' → logprob: -19.500045776367188
    8. '_sum' → logprob: -19.625045776367188
    9. ')' → logprob: -20.625045776367188
    10. 'Sum' → logprob: -21.000045776367188

Token 40: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.173704271830502e-06
    2. '))' → logprob: -12.87500286102295
    3. ' )' → logprob: -14.87500286102295
    4. ')`' → logprob: -16.000003814697266
    5. ')
' → logprob: -16.750003814697266
    6. '`)' → logprob: -16.875003814697266
    7. '')' → logprob: -17.625003814697266
    8. '）' → logprob: -18.125003814697266
    9. ')))' → logprob: -18.625003814697266
    10. '")' → logprob: -19.500003814697266


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 38
Tokens correctement prédits (1ère position, stricte): 12
Tokens correctement prédits (1ère position, avec adaptation): 12
Tokens correctement prédits (top 10): 30
Précision stricte (1ère position): 31.58%
Précision adaptée (1ère position): 31.58%
Précision (top 10): 78.95%
================================================================================
