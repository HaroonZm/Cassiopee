================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:19:08
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def get_input():
    return input().split()

def to_int_list(str_list):
    return list(map(int, str_list))

def get_x(values):
    return values[0]

def get_y(values):
    return values[1]

def get_z(values):
    return values[2]

def get_d(values):
    return values[3]

def calc_abs(a, b):
    return abs(a - b)

def check_direct(x, z, d):
    return calc_abs(x, z) <= d

def check_indirect(x, y, z, d):
    return calc_abs(x, y) <= d and calc_abs(y, z) <= d

def output_yes():
    print("Yes")

def output_no():
    print("No")

def main():
    inp = get_input()
    values = to_int_list(inp)
    x = get_x(values)
    y = get_y(values)
    z = get_z(values)
    d = get_d(values)
    if check_direct(x, z, d):
        output_yes()
    elif check_indirect(x, y, z, d):
        output_yes()
    else:
        output_no()

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' get' (ID: 717)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002158825984224677
    2. '_' → logprob: -6.2521586418151855
    3. '():' → logprob: -9.252159118652344
    4. ' (' → logprob: -10.252159118652344
    5. '()' → logprob: -10.627159118652344
    6. '```' → logprob: -10.627159118652344
    7. '(_' → logprob: -11.502159118652344
    8. '(:' → logprob: -11.627159118652344
    9. '(_:' → logprob: -12.127159118652344
    10. ':' → logprob: -12.502159118652344

Token 4: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.5172414183616638
    2. '\' → logprob: -1.3922414779663086
    3. '\n' → logprob: -3.3922414779663086
    4. '   ' → logprob: -3.5172414779663086
    5. '(' → logprob: -3.7672414779663086
    6. '    
' → logprob: -4.517241477966309
    7. ':' → logprob: -4.642241477966309
    8. ''' → logprob: -5.392241477966309
    9. '()' → logprob: -5.392241477966309
    10. ''\' → logprob: -5.517241477966309

Token 5: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.25762099027633667
    2. '   ' → logprob: -2.3826210498809814
    3. 'input' → logprob: -2.3826210498809814
    4. ' ' → logprob: -4.757620811462402
    5. '```' → logprob: -4.882620811462402
    6. ' return' → logprob: -4.882620811462402
    7. 'user' → logprob: -5.382620811462402
    8. 'i' → logprob: -5.632620811462402
    9. 'x' → logprob: -5.757620811462402
    10. '    ' → logprob: -6.507620811462402

Token 6: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5008310079574585
    2. ' input' → logprob: -1.1258310079574585
    3. 'input' → logprob: -3.000831127166748
    4. '"' → logprob: -4.375831127166748
    5. ''' → logprob: -5.750831127166748
    6. ' "' → logprob: -6.375831127166748
    7. '  ' → logprob: -7.000831127166748
    8. ' '' → logprob: -7.750831127166748
    9. ' None' → logprob: -8.37583065032959
    10. '(input' → logprob: -8.62583065032959

Token 7: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0015279557555913925
    2. '()' → logprob: -6.876527786254883
    3. '('' → logprob: -8.251527786254883
    4. '("("' → logprob: -9.126527786254883
    5. ' (' → logprob: -10.376527786254883
    6. '(
' → logprob: -10.626527786254883
    7. ''' → logprob: -10.751527786254883
    8. '("")' → logprob: -11.376527786254883
    9. ' ' → logprob: -11.501527786254883
    10. '"' → logprob: -12.001527786254883

Token 8: 'split' (ID: 13627)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.002309527015313506
    2. 'rstrip' → logprob: -6.752309322357178
    3. 'split' → logprob: -6.877309322357178
    4. 'replace' → logprob: -9.877309799194336
    5. '()' → logprob: -10.877309799194336
    6. '(' → logprob: -11.377309799194336
    7. '```' → logprob: -12.377309799194336
    8. 'lower' → logprob: -12.377309799194336
    9. '-strip' → logprob: -12.502309799194336
    10. ' strip' → logprob: -12.877309799194336

Token 9: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.010069949552416801
    2. '()' → logprob: -4.635069847106934
    3. '('' → logprob: -9.635069847106934
    4. '("("' → logprob: -9.885069847106934
    5. '```' → logprob: -10.260069847106934
    6. '`' → logprob: -10.385069847106934
    7. '`()' → logprob: -10.635069847106934
    8. ' (' → logprob: -10.760069847106934
    9. '(`' → logprob: -11.010069847106934
    10. '(

' → logprob: -11.135069847106934

Token 10: 'def' (ID: 1314)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -1.1012836694717407
    2. '(' → logprob: -1.8512836694717407
    3. '[' → logprob: -1.9762836694717407
    4. '<|end|>' → logprob: -1.9762836694717407
    5. 'def' → logprob: -2.351283550262451
    6. '```' → logprob: -3.601283550262451
    7. '\n' → logprob: -3.976283550262451
    8. 'newline' → logprob: -3.976283550262451
    9. 'a' → logprob: -4.351283550262451
    10. '
' → logprob: -4.476283550262451

Token 11: ' to' (ID: 316)
  Prédit: ' get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.9335078597068787
    2. ' calculate' → logprob: -1.0585079193115234
    3. ' main' → logprob: -1.5585079193115234
    4. ' process' → logprob: -3.6835079193115234
    5. ' compute' → logprob: -5.433507919311523
    6. ' space' → logprob: -5.433507919311523
    7. ' user' → logprob: -5.683507919311523
    8. ' add' → logprob: -6.183507919311523
    9. ' print' → logprob: -6.683507919311523
    10. ' my' → logprob: -6.683507919311523

Token 12: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.16532306373119354
    2. '_lower' → logprob: -2.54032301902771
    3. '_list' → logprob: -3.54032301902771
    4. 'int' → logprob: -4.915323257446289
    5. '_' → logprob: -5.165323257446289
    6. 'ken' → logprob: -5.165323257446289
    7. '_upper' → logprob: -5.165323257446289
    8. '_float' → logprob: -5.415323257446289
    9. '_string' → logprob: -5.540323257446289
    10. '_str' → logprob: -5.540323257446289

Token 13: '_list' (ID: 4162)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.02878057025372982
    2. '_' → logprob: -4.778780460357666
    3. '("("' → logprob: -4.778780460357666
    4. '(_' → logprob: -6.528780460357666
    5. '()' → logprob: -6.653780460357666
    6. 's' → logprob: -6.903780460357666
    7. '```' → logprob: -6.903780460357666
    8. ' (' → logprob: -7.153780460357666
    9. '():' → logprob: -7.153780460357666
    10. '_list' → logprob: -7.528780460357666

Token 14: '(str' (ID: 7946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0011112819192931056
    2. '("("' → logprob: -7.3761115074157715
    3. ' (' → logprob: -9.376111030578613
    4. '()' → logprob: -10.001111030578613
    5. '<|end|>' → logprob: -10.001111030578613
    6. '(user' → logprob: -10.126111030578613
    7. '('' → logprob: -10.126111030578613
    8. '```' → logprob: -10.501111030578613
    9. '<|end|>' → logprob: -11.001111030578613
    10. '_' → logprob: -11.501111030578613

Token 15: '_list' (ID: 4162)
  Prédit: 'ing'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ing' → logprob: -0.11803793162107468
    2. ')' → logprob: -2.6180379390716553
    3. '):' → logprob: -4.743037700653076
    4. 'ings' → logprob: -4.868037700653076
    5. '_)' → logprob: -5.118037700653076
    6. 's' → logprob: -5.368037700653076
    7. '_list' → logprob: -5.493037700653076
    8. ')_' → logprob: -5.868037700653076
    9. '_' → logprob: -6.368037700653076
    10. '_ing' → logprob: -6.868037700653076

Token 16: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0026420066133141518
    2. ')' → logprob: -6.0026421546936035
    3. ' ):' → logprob: -9.252641677856445
    4. '):
' → logprob: -10.002641677856445
    5. '):

' → logprob: -11.752641677856445
    6. '[]):' → logprob: -12.377641677856445
    7. '>):' → logprob: -13.252641677856445
    8. '）：' → logprob: -13.502641677856445
    9. '   ' → logprob: -13.627641677856445
    10. ')):' → logprob: -13.752641677856445

Token 17: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08735289424657822
    2. '[' → logprob: -2.587352991104126
    3. '(' → logprob: -5.837352752685547
    4. ' return' → logprob: -5.962352752685547
    5. 'return' → logprob: -7.212352752685547
    6. '[int' → logprob: -7.587352752685547
    7. '[
' → logprob: -7.962352752685547
    8. '[]' → logprob: -8.837352752685547
    9. '    ' → logprob: -8.837352752685547
    10. 'def' → logprob: -8.962352752685547

Token 18: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05646321550011635
    2. ' return' → logprob: -3.3064632415771484
    3. 'return' (adapté à ' return') → logprob: -4.306463241577148
    4. '[' → logprob: -5.556463241577148
    5. '[int' → logprob: -7.306463241577148
    6. ' [' → logprob: -8.556463241577148
    7. '	return' → logprob: -11.306463241577148
    8. ' ' → logprob: -11.556463241577148
    9. '[i' → logprob: -12.431463241577148
    10. '  ' → logprob: -12.431463241577148

Token 19: ' list' (ID: 1562)
  Prédit: ' ['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.5670508742332458
    2. '[list' → logprob: -1.3170509338378906
    3. ' list' → logprob: -2.0670509338378906
    4. '[' → logprob: -3.3170509338378906
    5. 'list' → logprob: -6.317050933837891
    6. '[int' → logprob: -8.44205093383789
    7. '[List' → logprob: -10.44205093383789
    8. '[len' → logprob: -12.44205093383789
    9. '[type' → logprob: -13.81705093383789
    10. '(list' → logprob: -14.06705093383789

Token 20: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.01819770224392414
    2. '(' → logprob: -4.018197536468506
    3. '(int' → logprob: -10.018198013305664
    4. '(
' → logprob: -13.268198013305664
    5. '(

' → logprob: -14.643198013305664
    6. '	map' → logprob: -15.893198013305664
    7. ',map' → logprob: -16.018198013305664
    8. 'map' → logprob: -16.143198013305664
    9. '(str' → logprob: -16.143198013305664
    10. '(m' → logprob: -16.143198013305664

Token 21: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0004309076175559312
    2. 'int' → logprob: -8.375431060791016
    3. '(' → logprob: -9.000431060791016
    4. ' int' → logprob: -9.750431060791016
    5. '<int' → logprob: -12.000431060791016
    6. ',int' → logprob: -12.250431060791016
    7. '   ' → logprob: -12.750431060791016
    8. '=int' → logprob: -13.000431060791016
    9. ')' → logprob: -14.375431060791016
    10. '[int' → logprob: -14.625431060791016

Token 22: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.007988685742020607
    2. ',str' → logprob: -5.382988452911377
    3. ' ,' → logprob: -6.132988452911377
    4. '(str' → logprob: -7.132988452911377
    5. '(' → logprob: -8.382988929748535
    6. ')' → logprob: -10.132988929748535
    7. '<|end|>' → logprob: -10.507988929748535
    8. '))' → logprob: -10.507988929748535
    9. ',
' → logprob: -10.757988929748535
    10. ' ' → logprob: -10.757988929748535

Token 23: ' str' (ID: 989)
  Prédit: ' str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' str' → logprob: -0.38687485456466675
    2. 'str' → logprob: -1.1368749141693115
    3. '(str' → logprob: -13.76187515258789
    4. '	str' → logprob: -14.13687515258789
    5. ')' → logprob: -14.26187515258789
    6. ' ' → logprob: -14.51187515258789
    7. '_str' → logprob: -15.13687515258789
    8. ',str' → logprob: -15.88687515258789
    9. '   ' → logprob: -16.01187515258789
    10. '[str' → logprob: -16.76187515258789

Token 24: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -8.77627644513268e-06
    2. '_' → logprob: -11.750008583068848
    3. ')' → logprob: -15.500008583068848
    4. '_)' → logprob: -15.750008583068848
    5. '_l' → logprob: -16.125009536743164
    6. 'list' → logprob: -16.375009536743164
    7. '_lst' → logprob: -16.375009536743164
    8. ')_' → logprob: -16.625009536743164
    9. 'List' → logprob: -17.125009536743164
    10. '_List' → logprob: -17.375009536743164

Token 25: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0002533528604544699
    2. ')))' → logprob: -8.375253677368164
    3. ')' → logprob: -10.875253677368164
    4. '))
' → logprob: -12.875253677368164
    5. '()))' → logprob: -14.750253677368164
    6. ' ))' → logprob: -15.125253677368164
    7. '   ' → logprob: -15.125253677368164
    8. '))))' → logprob: -16.875253677368164
    9. '));' → logprob: -17.000253677368164
    10. ''))' → logprob: -17.000253677368164

Token 26: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0005972352810204029
    2. '
' → logprob: -8.12559700012207
    3. '

' → logprob: -9.25059700012207
    4. '```' → logprob: -9.50059700012207
    5. '\' → logprob: -9.62559700012207
    6. '<|end|>' → logprob: -10.25059700012207
    7. '<|end|>' → logprob: -11.75059700012207
    8. '\n' → logprob: -12.50059700012207
    9. '[' → logprob: -12.87559700012207
    10. '#' → logprob: -13.12559700012207

Token 27: ' get' (ID: 717)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -1.0194610357284546
    2. ' calculate' → logprob: -1.1444610357284546
    3. ' process' → logprob: -2.644461154937744
    4. ' solve' → logprob: -2.769461154937744
    5. ' factorial' → logprob: -2.769461154937744
    6. ' sum' → logprob: -3.519461154937744
    7. ' compute' → logprob: -3.894461154937744
    8. ' count' → logprob: -4.144461154937744
    9. ' find' → logprob: -4.394461154937744
    10. ' add' → logprob: -5.269461154937744

Token 28: '_x' (ID: 7054)
  Prédit: '_input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_input' → logprob: -1.012770652770996
    2. '_sum' → logprob: -1.512770652770996
    3. '_max' → logprob: -1.887770652770996
    4. '_user' → logprob: -2.887770652770996
    5. '_data' → logprob: -3.262770652770996
    6. '_output' → logprob: -3.387770652770996
    7. '_' → logprob: -3.387770652770996
    8. '_total' → logprob: -4.137770652770996
    9. '_numbers' → logprob: -4.512770652770996
    10. '_list' → logprob: -4.637770652770996

Token 29: '(values' (ID: 40883)
  Prédit: '_y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_y' → logprob: -1.3473989963531494
    2. '_value' → logprob: -1.7223989963531494
    3. '_values' → logprob: -2.0973989963531494
    4. 'or' → logprob: -2.3473989963531494
    5. '()' → logprob: -2.4723989963531494
    6. '():' → logprob: -3.2223989963531494
    7. '_input' → logprob: -3.7223989963531494
    8. '_' → logprob: -3.8473989963531494
    9. '_range' → logprob: -3.8473989963531494
    10. '_and' → logprob: -3.9723989963531494

Token 30: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.005116584710776806
    2. ',' → logprob: -6.0051164627075195
    3. '[' → logprob: -6.2551164627075195
    4. ')' → logprob: -8.38011646270752
    5. '):
' → logprob: -8.38011646270752
    6. '   ' → logprob: -10.00511646270752
    7. '[i' → logprob: -10.13011646270752
    8. '[]):' → logprob: -10.25511646270752
    9. '[index' → logprob: -10.50511646270752
    10. ' ):' → logprob: -10.88011646270752

Token 31: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.430157333612442
    2. '[' → logprob: -1.5551573038101196
    3. ':' → logprob: -2.305157423019409
    4. 'values' → logprob: -3.555157423019409
    5. 'return' → logprob: -5.80515718460083
    6. '(' → logprob: -6.05515718460083
    7. '(values' → logprob: -7.05515718460083
    8. ':
' → logprob: -7.18015718460083
    9. ' values' → logprob: -7.80515718460083
    10. '[:]' → logprob: -7.93015718460083

Token 32: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.6630052924156189
    2. '   ' → logprob: -1.5380053520202637
    3. ' values' → logprob: -1.5380053520202637
    4. 'return' (adapté à ' return') → logprob: -3.4130053520202637
    5. 'values' → logprob: -3.9130053520202637
    6. ' sum' → logprob: -7.163005352020264
    7. ' for' → logprob: -8.038004875183105
    8. 'sum' → logprob: -8.413004875183105
    9. ' max' → logprob: -8.538004875183105
    10. ' if' → logprob: -8.788004875183105

Token 33: ' values' (ID: 4824)
  Prédit: ' values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' values' → logprob: -0.1966191530227661
    2. 'values' → logprob: -2.1966190338134766
    3. ' sum' → logprob: -3.1966190338134766
    4. ' max' → logprob: -3.8216190338134766
    5. 'sum' → logprob: -6.196619033813477
    6. 'max' → logprob: -6.696619033813477
    7. ' min' → logprob: -7.946619033813477
    8. ' ' → logprob: -8.071619033813477
    9. ' int' → logprob: -8.821619033813477
    10. ' len' → logprob: -9.571619033813477

Token 34: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0008737052557989955
    2. '[-' → logprob: -7.375873565673828
    3. ' [' → logprob: -8.875873565673828
    4. ' ' → logprob: -10.375873565673828
    5. '0' → logprob: -11.250873565673828
    6. '\[' → logprob: -11.500873565673828
    7. '[len' → logprob: -11.625873565673828
    8. '[
' → logprob: -12.000873565673828
    9. '   ' → logprob: -12.250873565673828
    10. '```' → logprob: -12.500873565673828

Token 35: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.009518777951598167
    2. '-' → logprob: -4.884518623352051
    3. '1' → logprob: -6.384518623352051
    4. ' ' → logprob: -8.75951862335205
    5. '2' → logprob: -10.25951862335205
    6. ' -' → logprob: -10.88451862335205
    7. '3' → logprob: -13.13451862335205
    8. ']' → logprob: -13.19701862335205
    9. ':' → logprob: -13.19701862335205
    10. '4' → logprob: -13.69701862335205

Token 36: ']

' (ID: 3144)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0012613063445314765
    2. ' ]' → logprob: -7.001261234283447
    3. '])' → logprob: -8.876261711120605
    4. ')' → logprob: -8.876261711120605
    5. ')]' → logprob: -10.751261711120605
    6. '+' → logprob: -10.876261711120605
    7. '],' → logprob: -11.501261711120605
    8. ']+' → logprob: -13.001261711120605
    9. ' +' → logprob: -13.251261711120605
    10. ':' → logprob: -13.251261711120605

Token 37: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.015065963380038738
    2. '<|end|>' → logprob: -4.265066146850586
    3. '
' → logprob: -7.890066146850586
    4. '<|end|>' → logprob: -8.265066146850586
    5. '*' → logprob: -9.515066146850586
    6. '

' → logprob: -9.640066146850586
    7. ' def' → logprob: -10.140066146850586
    8. '```' → logprob: -10.515066146850586
    9. '+' → logprob: -11.265066146850586
    10. '#' → logprob: -11.640066146850586

Token 38: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.022939691320061684
    2. 'get' → logprob: -4.147939682006836
    3. ' y' → logprob: -6.147939682006836
    4. ' def' → logprob: -6.272939682006836
    5. ' ' → logprob: -7.147939682006836
    6. 'def' → logprob: -7.397939682006836
    7. ' main' → logprob: -8.022939682006836
    8. '_y' → logprob: -8.022939682006836
    9. '_get' → logprob: -8.272939682006836
    10. '_' → logprob: -8.522939682006836

Token 39: '_y' (ID: 9410)
  Prédit: '_y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_y' → logprob: -0.0033685388043522835
    2. '_x' → logprob: -6.003368377685547
    3. '_' → logprob: -8.003368377685547
    4. '_values' → logprob: -8.503368377685547
    5. 'y' → logprob: -9.753368377685547
    6. '_value' → logprob: -10.003368377685547
    7. '_length' → logprob: -10.128368377685547
    8. ' y' → logprob: -10.503368377685547
    9. '_sum' → logprob: -10.878368377685547
    10. '_input' → logprob: -11.003368377685547

Token 40: '(values' (ID: 40883)
  Prédit: '(values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(values' → logprob: -9.126521035796031e-05
    2. '(' → logprob: -9.375091552734375
    3. ' (' → logprob: -12.625091552734375
    4. 'values' → logprob: -13.500091552734375
    5. '(vals' → logprob: -14.500091552734375
    6. '_values' → logprob: -14.875091552734375
    7. ' values' → logprob: -15.250091552734375
    8. '	values' → logprob: -15.750091552734375
    9. '.values' → logprob: -15.875091552734375
    10. '(points' → logprob: -16.750091552734375

Token 41: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0013776143314316869
    2. '):
' → logprob: -7.126377582550049
    3. '[' → logprob: -7.876377582550049
    4. ')' → logprob: -8.626378059387207
    5. '[]):' → logprob: -12.251378059387207
    6. '   ' → logprob: -12.751378059387207
    7. '):

' → logprob: -13.251378059387207
    8. ' ):' → logprob: -13.376378059387207
    9. '):
' → logprob: -13.626378059387207
    10. ':' → logprob: -14.376378059387207

Token 42: '   ' (ID: 271)
  Prédit: ' values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' values' → logprob: -0.00539561128243804
    2. 'values' → logprob: -5.255395412445068
    3. '   ' → logprob: -9.630395889282227
    4. ' return' → logprob: -9.880395889282227
    5. '(values' → logprob: -10.255395889282227
    6. '	values' → logprob: -11.880395889282227
    7. '.values' → logprob: -13.130395889282227
    8. 'return' → logprob: -14.505395889282227
    9. ' ' → logprob: -16.130395889282227
    10. '_values' → logprob: -16.255395889282227

Token 43: ' return' (ID: 622)
  Prédit: ' values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' values' → logprob: -0.2570001780986786
    2. ' return' → logprob: -1.507000207901001
    3. 'values' → logprob: -5.631999969482422
    4. 'return' (adapté à ' return') → logprob: -6.881999969482422
    5. '   ' → logprob: -7.756999969482422
    6. '.values' → logprob: -11.506999969482422
    7. '	values' → logprob: -12.506999969482422
    8. ' ' → logprob: -12.756999969482422
    9. '    ' → logprob: -12.756999969482422
    10. ' returns' → logprob: -13.756999969482422

Token 44: ' values' (ID: 4824)
  Prédit: ' values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' values' → logprob: -0.008617172949016094
    2. 'values' → logprob: -4.758617401123047
    3. '(values' → logprob: -13.133617401123047
    4. '	values' → logprob: -14.758617401123047
    5. '.values' → logprob: -15.133617401123047
    6. '   ' → logprob: -17.258617401123047
    7. '_values' → logprob: -18.008617401123047
    8. ' ' → logprob: -18.008617401123047
    9. ' valores' → logprob: -19.133617401123047
    10. ' return' → logprob: -19.133617401123047

Token 45: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -5.200166469876422e-06
    2. '1' → logprob: -12.500004768371582
    3. '[-' → logprob: -13.875004768371582
    4. ' [' → logprob: -15.375004768371582
    5. '```' → logprob: -16.0000057220459
    6. '   ' → logprob: -16.8750057220459
    7. '[len' → logprob: -17.3750057220459
    8. '0' → logprob: -17.8750057220459
    9. '\[' → logprob: -18.3750057220459
    10. '2' → logprob: -18.3750057220459

Token 46: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -6.749814019713085e-06
    2. '0' → logprob: -12.000006675720215
    3. ' ' → logprob: -15.125006675720215
    4. ')' → logprob: -16.00000762939453
    5. ']' → logprob: -18.00000762939453
    6. '-' → logprob: -18.00000762939453
    7. '```' → logprob: -18.25000762939453
    8. '])' → logprob: -18.50000762939453
    9. '   ' → logprob: -18.75000762939453
    10. ')]' → logprob: -19.25000762939453

Token 47: ']

' (ID: 3144)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.3856492842023727e-06
    2. '}' → logprob: -14.625000953674316
    3. ')
' → logprob: -14.625000953674316
    4. ']' → logprob: -15.375000953674316
    5. ')return' → logprob: -16.625001907348633
    6. '()' → logprob: -17.000001907348633
    7. ')}' → logprob: -17.000001907348633
    8. '))' → logprob: -17.500001907348633
    9. '),' → logprob: -17.750001907348633
    10. ' )' → logprob: -17.750001907348633

Token 48: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0012241550721228123
    2. '
' → logprob: -7.376224040985107
    3. '\' → logprob: -8.376224517822266
    4. '```' → logprob: -9.001224517822266
    5. '

' → logprob: -10.001224517822266
    6. '#' → logprob: -10.126224517822266
    7. '<|end|>' → logprob: -10.501224517822266
    8. 'n' → logprob: -10.626224517822266
    9. '\n' → logprob: -10.876224517822266
    10. 'x' → logprob: -11.001224517822266

Token 49: ' get' (ID: 717)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.7664093971252441
    2. ' get' → logprob: -1.0164093971252441
    3. ' main' → logprob: -2.391409397125244
    4. ' is' → logprob: -3.391409397125244
    5. ' process' → logprob: -4.516409397125244
    6. ' compute' → logprob: -4.891409397125244
    7. ' solve' → logprob: -5.266409397125244
    8. ' multiply' → logprob: -5.391409397125244
    9. 'calculate' → logprob: -6.016409397125244
    10. ' set' → logprob: -6.141409397125244

Token 50: '_z' (ID: 18252)
  Prédit: '_z'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_z' → logprob: -0.599588930606842
    2. '_x' → logprob: -1.7245888710021973
    3. '_sum' → logprob: -2.5995888710021973
    4. '_n' → logprob: -3.7245888710021973
    5. '_' → logprob: -3.8495888710021973
    6. '_values' → logprob: -3.9745888710021973
    7. '_result' → logprob: -3.9745888710021973
    8. '_max' → logprob: -4.099588871002197
    9. '_value' → logprob: -4.224588871002197
    10. '_area' → logprob: -4.474588871002197

Token 51: '(values' (ID: 40883)
  Prédit: '(values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(values' → logprob: -0.020432686433196068
    2. '(' → logprob: -4.020432472229004
    3. '_values' → logprob: -6.145432472229004
    4. 'values' → logprob: -9.270432472229004
    5. '(vals' → logprob: -11.395432472229004
    6. '_' → logprob: -11.520432472229004
    7. '(_' → logprob: -12.770432472229004
    8. '	values' → logprob: -13.020432472229004
    9. '(def' → logprob: -13.395432472229004
    10. '(s' → logprob: -13.770432472229004

Token 52: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0003373694489710033
    2. ')' → logprob: -8.625337600708008
    3. '):
' → logprob: -8.875337600708008
    4. '[' → logprob: -11.750337600708008
    5. ' ):' → logprob: -12.000337600708008
    6. '[]):' → logprob: -13.250337600708008
    7. '   ' → logprob: -14.750337600708008
    8. '):

' → logprob: -15.500337600708008
    9. ']:' → logprob: -15.500337600708008
    10. '(' → logprob: -15.875337600708008

Token 53: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.027117537334561348
    2. ' return' → logprob: -4.152117729187012
    3. 'return' → logprob: -5.277117729187012
    4. ' values' → logprob: -5.777117729187012
    5. 'values' → logprob: -5.902117729187012
    6. '    ' → logprob: -10.402117729187012
    7. '```' → logprob: -11.277117729187012
    8. ' ' → logprob: -11.652117729187012
    9. '(values' → logprob: -11.652117729187012
    10. '  ' → logprob: -12.027117729187012

Token 54: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2419857680797577
    2. ' return' → logprob: -2.11698579788208
    3. 'return' (adapté à ' return') → logprob: -2.36698579788208
    4. 'values' → logprob: -7.74198579788208
    5. ' values' → logprob: -8.491985321044922
    6. '```' → logprob: -9.366985321044922
    7. ' ' → logprob: -10.866985321044922
    8. '    ' → logprob: -11.491985321044922
    9. '  ' → logprob: -11.741985321044922
    10. '	return' → logprob: -12.991985321044922

Token 55: ' values' (ID: 4824)
  Prédit: ' values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' values' → logprob: -0.835465133190155
    2. 'values' → logprob: -0.835465133190155
    3. ' get' → logprob: -2.8354651927948
    4. '0' → logprob: -3.0854651927948
    5. 'get' → logprob: -4.085464954376221
    6. ' ' → logprob: -4.960464954376221
    7. ' None' → logprob: -6.085464954376221
    8. 'None' → logprob: -7.960464954376221
    9. ' len' → logprob: -8.210465431213379
    10. '(values' → logprob: -8.210465431213379

Token 56: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.19168712198734283
    2. '[-' → logprob: -2.0666871070861816
    3. '.' → logprob: -3.3166871070861816
    4. '2' → logprob: -4.691687107086182
    5. '-' → logprob: -6.566687107086182
    6. '0' → logprob: -7.816687107086182
    7. '```' → logprob: -8.44168758392334
    8. '[:]' → logprob: -9.31668758392334
    9. '[len' → logprob: -9.94168758392334
    10. '(' → logprob: -10.94168758392334

Token 57: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.00024048985505942255
    2. '1' → logprob: -8.500240325927734
    3. '0' → logprob: -10.375240325927734
    4. '-' → logprob: -12.875240325927734
    5. '])' → logprob: -14.000240325927734
    6. ']' → logprob: -14.250240325927734
    7. '```' → logprob: -14.250240325927734
    8. ')' → logprob: -14.625240325927734
    9. '   ' → logprob: -15.750240325927734
    10. ' ' → logprob: -15.812740325927734

Token 58: ']

' (ID: 3144)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -6.704273118884885e-07
    2. ')
' → logprob: -14.625000953674316
    3. '}' → logprob: -17.0
    4. ']' → logprob: -17.625
    5. '))' → logprob: -17.75
    6. '),' → logprob: -18.125
    7. '()' → logprob: -18.5
    8. ' )' → logprob: -18.625
    9. '')' → logprob: -18.625
    10. ')`' → logprob: -18.75

Token 59: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -2.6060808522743173e-05
    2. '```' → logprob: -11.375025749206543
    3. '\' → logprob: -12.250025749206543
    4. '
' → logprob: -13.250025749206543
    5. 'class' → logprob: -13.375025749206543
    6. 'for' → logprob: -13.375025749206543
    7. '#' → logprob: -14.125025749206543
    8. 'x' → logprob: -14.500025749206543
    9. 'import' → logprob: -14.500025749206543
    10. 'n' → logprob: -14.625025749206543

Token 60: ' get' (ID: 717)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.22303500771522522
    2. ' calculate' → logprob: -1.8480349779129028
    3. ' compute' → logprob: -4.723034858703613
    4. ' is' → logprob: -5.098034858703613
    5. ' process' → logprob: -5.223034858703613
    6. ' solve' → logprob: -5.223034858703613
    7. ' multiply' → logprob: -5.723034858703613
    8. ' check' → logprob: -5.973034858703613
    9. 'calculate' → logprob: -6.223034858703613
    10. ' get' → logprob: -6.723034858703613

Token 61: '_d' (ID: 1565)
  Prédit: '_sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_sum' → logprob: -1.1983922719955444
    2. '_w' → logprob: -1.8233922719955444
    3. '_values' → logprob: -1.9483922719955444
    4. '_x' → logprob: -2.573392391204834
    5. '_xyz' → logprob: -2.823392391204834
    6. '_value' → logprob: -3.073392391204834
    7. '_result' → logprob: -3.073392391204834
    8. '_max' → logprob: -3.448392391204834
    9. '_a' → logprob: -3.448392391204834
    10. '_z' → logprob: -3.948392391204834

Token 62: '(values' (ID: 40883)
  Prédit: '(values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(values' → logprob: -0.0448388047516346
    2. '_values' → logprob: -3.9198389053344727
    3. 'istance' → logprob: -4.419838905334473
    4. 'ist' → logprob: -5.294838905334473
    5. '(' → logprob: -5.794838905334473
    6. 'values' → logprob: -6.294838905334473
    7. 'ef' → logprob: -6.544838905334473
    8. 'iv' → logprob: -9.044838905334473
    9. 'elta' → logprob: -9.294838905334473
    10. ' values' → logprob: -10.044838905334473

Token 63: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00038682064041495323
    2. '):
' → logprob: -7.875386714935303
    3. ')' → logprob: -12.375387191772461
    4. ' ):' → logprob: -13.625387191772461
    5. '[]):' → logprob: -15.250387191772461
    6. ''):' → logprob: -15.750387191772461
    7. '   ' → logprob: -16.00038719177246
    8. '):
' → logprob: -16.25038719177246
    9. '):

' → logprob: -16.37538719177246
    10. '():' → logprob: -16.62538719177246

Token 64: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3267037868499756
    2. ' values' → logprob: -1.5767037868499756
    3. ' return' → logprob: -2.7017037868499756
    4. 'values' → logprob: -5.451704025268555
    5. 'return' → logprob: -7.951704025268555
    6. '(values' → logprob: -8.576704025268555
    7. '	values' → logprob: -9.576704025268555
    8. '    ' → logprob: -10.576704025268555
    9. ' ' → logprob: -11.826704025268555
    10. '  ' → logprob: -11.951704025268555

Token 65: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.5895803570747375
    2. 'return' (adapté à ' return') → logprob: -1.9645802974700928
    3. 'values' → logprob: -2.0895802974700928
    4. '   ' → logprob: -2.3395802974700928
    5. ' values' → logprob: -2.4645802974700928
    6. ' ' → logprob: -11.089580535888672
    7. '(values' → logprob: -11.464580535888672
    8. '  ' → logprob: -11.589580535888672
    9. '	values' → logprob: -11.589580535888672
    10. '    ' → logprob: -12.214580535888672

Token 66: ' values' (ID: 4824)
  Prédit: ' values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' values' → logprob: -0.12707646191120148
    2. 'values' → logprob: -2.1270763874053955
    3. ' int' → logprob: -9.127076148986816
    4. 'int' → logprob: -10.627076148986816
    5. '(values' → logprob: -11.502076148986816
    6. ' len' → logprob: -12.752076148986816
    7. '	values' → logprob: -13.752076148986816
    8. 'len' → logprob: -15.002076148986816
    9. '0' → logprob: -15.002076148986816
    10. ' ' → logprob: -15.377076148986816

Token 67: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.024014251306653023
    2. '.' → logprob: -4.274014472961426
    3. '[-' → logprob: -5.524014472961426
    4. '3' → logprob: -5.649014472961426
    5. '0' → logprob: -7.274014472961426
    6. '```' → logprob: -7.649014472961426
    7. '4' → logprob: -8.149014472961426
    8. '[len' → logprob: -8.649014472961426
    9. '(' → logprob: -9.149014472961426
    10. '.[' → logprob: -9.399014472961426

Token 68: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.0003384422743692994
    2. '0' → logprob: -8.125338554382324
    3. '-' → logprob: -11.125338554382324
    4. '2' → logprob: -11.250338554382324
    5. '4' → logprob: -12.625338554382324
    6. '1' → logprob: -12.750338554382324
    7. ')' → logprob: -12.750338554382324
    8. ']' → logprob: -12.875338554382324
    9. ' ' → logprob: -13.875338554382324
    10. '])' → logprob: -14.000338554382324

Token 69: ']

' (ID: 3144)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -5.512236498361744e-07
    2. '}' → logprob: -15.500000953674316
    3. '):' → logprob: -16.5
    4. ')return' → logprob: -17.0
    5. ')
' → logprob: -17.125
    6. ')}' → logprob: -17.375
    7. ' )' → logprob: -17.375
    8. '))' → logprob: -17.5
    9. ']' → logprob: -17.875
    10. '),' → logprob: -18.125

Token 70: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -5.145118848304264e-05
    2. '
' → logprob: -10.625051498413086
    3. '```' → logprob: -11.625051498413086
    4. '\' → logprob: -12.000051498413086
    5. '

' → logprob: -12.125051498413086
    6. 'import' → logprob: -13.500051498413086
    7. 'class' → logprob: -14.375051498413086
    8. '\n' → logprob: -14.500051498413086
    9. '<|end|>' → logprob: -14.500051498413086
    10. '  
' → logprob: -14.625051498413086

Token 71: ' calc' (ID: 25691)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.746422290802002
    2. ' calculate' → logprob: -0.871422290802002
    3. ' solve' → logprob: -2.996422290802002
    4. ' compute' → logprob: -4.121422290802002
    5. ' is' → logprob: -4.871422290802002
    6. ' check' → logprob: -5.121422290802002
    7. ' get' → logprob: -5.246422290802002
    8. ' find' → logprob: -5.496422290802002
    9. ' process' → logprob: -5.746422290802002
    10. 'calculate' → logprob: -5.996422290802002

Token 72: '_abs' (ID: 81310)
  Prédit: '_distance'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_distance' → logprob: -0.26667672395706177
    2. '_sum' → logprob: -1.891676664352417
    3. '_' → logprob: -4.141676902770996
    4. '_d' → logprob: -4.141676902770996
    5. '_dist' → logprob: -4.766676902770996
    6. '_area' → logprob: -5.141676902770996
    7. '_value' → logprob: -5.391676902770996
    8. '_x' → logprob: -5.391676902770996
    9. '_difference' → logprob: -5.391676902770996
    10. '_diff' → logprob: -5.641676902770996

Token 73: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.04565305635333061
    2. '_val' → logprob: -4.170652866363525
    3. '(value' → logprob: -5.170652866363525
    4. '_' → logprob: -5.295652866363525
    5. '_value' → logprob: -5.670652866363525
    6. '_diff' → logprob: -5.670652866363525
    7. '(x' → logprob: -6.295652866363525
    8. '(_' → logprob: -6.795652866363525
    9. 'ence' → logprob: -6.920652866363525
    10. 'ul' → logprob: -7.170652866363525

Token 74: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2343730628490448
    2. '(a' → logprob: -2.484373092651367
    3. '_val' → logprob: -3.234373092651367
    4. 'ol' → logprob: -3.984373092651367
    5. 'a' → logprob: -4.109373092651367
    6. '_value' → logprob: -4.109373092651367
    7. '):' → logprob: -5.109373092651367
    8. '(' → logprob: -5.234373092651367
    9. 'b' → logprob: -5.609373092651367
    10. '_b' → logprob: -5.609373092651367

Token 75: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.054966121912002563
    2. ' b' → logprob: -2.9299662113189697
    3. ' ' → logprob: -9.67996597290039
    4. ')' → logprob: -11.55496597290039
    5. '   ' → logprob: -12.80496597290039
    6. ')b' → logprob: -13.42996597290039
    7. '  ' → logprob: -13.55496597290039
    8. ' )' → logprob: -13.67996597290039
    9. '	b' → logprob: -13.80496597290039
    10. 'a' → logprob: -14.17996597290039

Token 76: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0010698467958718538
    2. ')' → logprob: -6.876070022583008
    3. '):
' → logprob: -10.376070022583008
    4. ' ):' → logprob: -12.376070022583008
    5. '=' → logprob: -15.501070022583008
    6. '-' → logprob: -15.501070022583008
    7. '_' → logprob: -15.501070022583008
    8. ':' → logprob: -15.751070022583008
    9. ')):' → logprob: -16.001070022583008
    10. '):
' → logprob: -16.501070022583008

Token 77: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.21695420145988464
    2. ' abs' → logprob: -2.216954231262207
    3. 'abs' → logprob: -2.591954231262207
    4. ' return' → logprob: -4.716954231262207
    5. 'return' → logprob: -6.841954231262207
    6. '    ' → logprob: -6.841954231262207
    7. ' ' → logprob: -10.216954231262207
    8. '	return' → logprob: -10.591954231262207
    9. '(abs' → logprob: -10.716954231262207
    10. '    
' → logprob: -11.466954231262207

Token 78: ' return' (ID: 622)
  Prédit: 'abs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'abs' → logprob: -0.7143954634666443
    2. ' abs' → logprob: -1.089395523071289
    3. '   ' → logprob: -1.964395523071289
    4. ' return' → logprob: -3.964395523071289
    5. 'return' (adapté à ' return') → logprob: -4.214395523071289
    6. 'a' → logprob: -10.339395523071289
    7. ' a' → logprob: -11.214395523071289
    8. '    ' → logprob: -11.339395523071289
    9. ' ' → logprob: -11.339395523071289
    10. '(abs' → logprob: -11.589395523071289

Token 79: ' abs' (ID: 8443)
  Prédit: ' abs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' abs' → logprob: -0.014218512922525406
    2. 'abs' → logprob: -4.264218330383301
    3. ' a' → logprob: -10.2642183303833
    4. 'a' → logprob: -11.3892183303833
    5. '(abs' → logprob: -11.8892183303833
    6. '   ' → logprob: -14.0142183303833
    7. ' ' → logprob: -15.1392183303833
    8. ' ' → logprob: -15.6392183303833
    9. ' max' → logprob: -15.7642183303833
    10. '.abs' → logprob: -16.014219284057617

Token 80: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.2014150768518448
    2. '(' → logprob: -1.7014150619506836
    3. 'a' → logprob: -14.076415061950684
    4. '(
' → logprob: -14.701415061950684
    5. '((' → logprob: -14.701415061950684
    6. '(b' → logprob: -16.576416015625
    7. '(

' → logprob: -17.201416015625
    8. '(A' → logprob: -17.576416015625
    9. '(ai' → logprob: -18.576416015625
    10. ' (' → logprob: -18.701416015625

Token 81: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.3516020178794861
    2. ' -' → logprob: -1.2266020774841309
    3. '-b' → logprob: -5.851602077484131
    4. ' ' → logprob: -8.226601600646973
    5. ',' → logprob: -12.351601600646973
    6. ')' → logprob: -12.976601600646973
    7. ' b' → logprob: -13.851601600646973
    8. ',b' → logprob: -14.476601600646973
    9. ' ,' → logprob: -15.226601600646973
    10. 'b' → logprob: -15.226601600646973

Token 82: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.0015023599844425917
    2. ' b' → logprob: -6.501502513885498
    3. ' ' → logprob: -18.376502990722656
    4. ')b' → logprob: -18.501502990722656
    5. '   ' → logprob: -19.376502990722656
    6. '	b' → logprob: -20.626502990722656
    7. '  ' → logprob: -21.626502990722656
    8. '>b' → logprob: -21.751502990722656
    9. '<|end|>' → logprob: -22.001502990722656
    10. ')' → logprob: -22.376502990722656

Token 83: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. ')
' → logprob: -15.75
    3. ' )' → logprob: -15.875
    4. '))' → logprob: -18.375
    5. ')return' → logprob: -18.75
    6. ')

' → logprob: -19.125
    7. '}' → logprob: -19.125
    8. ' ' → logprob: -19.75
    9. '),' → logprob: -20.125
    10. ')`' → logprob: -20.375

Token 84: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00027254095766693354
    2. '

' → logprob: -8.750272750854492
    3. '
' → logprob: -10.250272750854492
    4. '<|end|>' → logprob: -10.250272750854492
    5. '\' → logprob: -10.875272750854492
    6. '```' → logprob: -11.750272750854492
    7. '<|end|>' → logprob: -12.125272750854492
    8. ' def' → logprob: -13.000272750854492
    9. '\n' → logprob: -13.125272750854492
    10. '#' → logprob: -14.000272750854492

Token 85: ' check' (ID: 2371)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.4307471513748169
    2. ' calc' → logprob: -2.1807470321655273
    3. 'main' → logprob: -2.1807470321655273
    4. 'calc' → logprob: -2.3057470321655273
    5. ' calculate' → logprob: -5.305747032165527
    6. 'calculate' → logprob: -5.555747032165527
    7. ' is' → logprob: -5.680747032165527
    8. 'distance' → logprob: -6.430747032165527
    9. 'def' → logprob: -6.680747032165527
    10. ' get' → logprob: -6.680747032165527

Token 86: '_direct' (ID: 80120)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -1.2453701496124268
    2. '_distance' → logprob: -1.8703701496124268
    3. '(' → logprob: -2.6203701496124268
    4. '_dist' → logprob: -2.8703701496124268
    5. '_d' → logprob: -2.9953701496124268
    6. '_(' → logprob: -2.9953701496124268
    7. '_diff' → logprob: -3.2453701496124268
    8. '_equal' → logprob: -3.3703701496124268
    9. '_value' → logprob: -3.6203701496124268
    10. '_div' → logprob: -3.6203701496124268

Token 87: '(x' (ID: 4061)
  Prédit: 'ion'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ion' → logprob: -0.035434290766716
    2. '_' → logprob: -3.6604342460632324
    3. 'ions' → logprob: -5.785434246063232
    4. '()' → logprob: -5.910434246063232
    5. 'ly' → logprob: -7.160434246063232
    6. '(' → logprob: -7.285434246063232
    7. '_connection' → logprob: -8.41043472290039
    8. 'ed' → logprob: -8.53543472290039
    9. '_path' → logprob: -8.53543472290039
    10. '_collision' → logprob: -8.91043472290039

Token 88: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.012969860807061195
    2. ' ,' → logprob: -4.512969970703125
    3. ')' → logprob: -7.387969970703125
    4. ',y' → logprob: -7.637969970703125
    5. '):' → logprob: -7.762969970703125
    6. ',x' → logprob: -9.637969970703125
    7. ',d' → logprob: -10.137969970703125
    8. '==' → logprob: -10.512969970703125
    9. '+' → logprob: -10.512969970703125
    10. '_,' → logprob: -10.637969970703125

Token 89: ' z' (ID: 579)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.21522705256938934
    2. ' y' → logprob: -1.7152270078659058
    3. 'z' → logprob: -4.590227127075195
    4. 'd' → logprob: -6.465227127075195
    5. ' z' → logprob: -6.840227127075195
    6. 'x' → logprob: -7.965227127075195
    7. ' d' → logprob: -8.090227127075195
    8. ' ' → logprob: -9.340227127075195
    9. '   ' → logprob: -9.965227127075195
    10. 'a' → logprob: -10.090227127075195

Token 90: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.2927132844924927
    2. ',' → logprob: -1.4177132844924927
    3. ')' → logprob: -4.667713165283203
    4. ' ):' → logprob: -7.042713165283203
    5. '):
' → logprob: -7.417713165283203
    6. ' ,' → logprob: -8.292713165283203
    7. '   ' → logprob: -10.417713165283203
    8. '=' → logprob: -10.417713165283203
    9. 'd' → logprob: -10.542713165283203
    10. ' ' → logprob: -10.667713165283203

Token 91: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.047685787081718445
    2. ' d' → logprob: -3.2976858615875244
    3. 'y' → logprob: -4.922685623168945
    4. ' y' → logprob: -6.172685623168945
    5. ' ' → logprob: -9.297685623168945
    6. '   ' → logprob: -10.047685623168945
    7. 'z' → logprob: -10.672685623168945
    8. ')' → logprob: -11.172685623168945
    9. '  ' → logprob: -11.172685623168945
    10. 'x' → logprob: -11.860185623168945

Token 92: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.05571731552481651
    2. ',' → logprob: -3.4307172298431396
    3. ')' → logprob: -3.9307172298431396
    4. ' ):' → logprob: -6.430717468261719
    5. '_' → logprob: -8.555717468261719
    6. '=' → logprob: -8.930717468261719
    7. '):
' → logprob: -10.305717468261719
    8. ' ,' → logprob: -10.430717468261719
    9. ' )' → logprob: -10.680717468261719
    10. '-' → logprob: -10.805717468261719

Token 93: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.027495229616761208
    2. '   ' → logprob: -4.277495384216309
    3. '):' → logprob: -4.527495384216309
    4. ' :' → logprob: -6.777495384216309
    5. ':return' → logprob: -7.652495384216309
    6. ':
' → logprob: -8.027495384216309
    7. ',' → logprob: -9.027495384216309
    8. ' return' → logprob: -9.652495384216309
    9. '():' → logprob: -9.777495384216309
    10. '):
' → logprob: -9.777495384216309

Token 94: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.613979160785675
    2. '   ' → logprob: -1.2389791011810303
    3. ' return' → logprob: -1.8639791011810303
    4. ' if' → logprob: -4.863979339599609
    5. 'if' → logprob: -5.113979339599609
    6. 'def' → logprob: -9.36397933959961
    7. ')' → logprob: -10.23897933959961
    8. 'for' → logprob: -10.23897933959961
    9. ' for' → logprob: -10.36397933959961
    10. ' ' → logprob: -10.61397933959961

Token 95: ' calc' (ID: 25691)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.7902151942253113
    2. 'x' → logprob: -1.040215253829956
    3. 'z' → logprob: -2.415215253829956
    4. '(x' → logprob: -3.165215253829956
    5. ' d' → logprob: -4.290215015411377
    6. '(z' → logprob: -4.290215015411377
    7. 'abs' → logprob: -4.415215015411377
    8. ' x' → logprob: -5.040215015411377
    9. '(d' → logprob: -5.040215015411377
    10. ' z' → logprob: -6.165215015411377

Token 96: '_abs' (ID: 81310)
  Prédit: '_abs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_abs' → logprob: -9.088346359931165e-07
    2. 'abs' → logprob: -14.250000953674316
    3. '_ab' → logprob: -15.125000953674316
    4. '(abs' → logprob: -17.5
    5. '_absolute' → logprob: -19.25
    6. ' abs' → logprob: -20.125
    7. 'Abs' → logprob: -20.25
    8. '.abs' → logprob: -20.625
    9. '_' → logprob: -21.25
    10. '_a' → logprob: -21.5

Token 97: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.023362061008810997
    2. '(z' → logprob: -3.773362159729004
    3. '(' → logprob: -9.148362159729004
    4. '(d' → logprob: -11.648362159729004
    5. 'x' → logprob: -14.023362159729004
    6. ' (' → logprob: -15.773362159729004
    7. '((' → logprob: -16.148361206054688
    8. '(a' → logprob: -16.148361206054688
    9. '(y' → logprob: -16.398361206054688
    10. 'd' → logprob: -16.523361206054688

Token 98: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0011745095252990723
    2. ' ,' → logprob: -7.376174449920654
    3. ',z' → logprob: -7.626174449920654
    4. 'z' → logprob: -10.626174926757812
    5. ')' → logprob: -11.876174926757812
    6. ',
' → logprob: -12.126174926757812
    7. 'd' → logprob: -12.376174926757812
    8. '-' → logprob: -13.126174926757812
    9. '   ' → logprob: -13.126174926757812
    10. ' ' → logprob: -13.126174926757812

Token 99: ' z' (ID: 579)
  Prédit: 'z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'z' → logprob: -0.28614482283592224
    2. 'd' → logprob: -1.4111448526382446
    3. ' z' → logprob: -5.661144733428955
    4. ' d' → logprob: -6.536144733428955
    5. ' ' → logprob: -11.036145210266113
    6. '	z' → logprob: -11.786145210266113
    7. '(z' → logprob: -12.036145210266113
    8. 'x' → logprob: -12.286145210266113
    9. '   ' → logprob: -12.661145210266113
    10. '0' → logprob: -13.223645210266113

Token 100: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.40998875699006e-05
    2. ')<=' → logprob: -9.87507438659668
    3. ' )' → logprob: -10.75007438659668
    4. ')==' → logprob: -14.62507438659668
    5. '<=' → logprob: -16.25007438659668
    6. 'd' → logprob: -16.25007438659668
    7. ' ' → logprob: -16.75007438659668
    8. '')' → logprob: -16.87507438659668
    9. ' <=' → logprob: -17.00007438659668
    10. ')<' → logprob: -17.25007438659668

Token 101: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.4867432415485382
    2. '<=' → logprob: -0.9867432117462158
    3. '<' → logprob: -5.236743450164795
    4. '==' → logprob: -5.611743450164795
    5. ' ==' → logprob: -6.361743450164795
    6. ' <' → logprob: -7.736743450164795
    7. ')' → logprob: -7.986743450164795
    8. '>' → logprob: -8.111742973327637
    9. ' ' → logprob: -8.361742973327637
    10. '=' → logprob: -8.861742973327637

Token 102: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.4740849733352661
    2. ' d' → logprob: -0.9740849733352661
    3. ' ' → logprob: -12.099084854125977
    4. '   ' → logprob: -14.224084854125977
    5. '	d' → logprob: -14.224084854125977
    6. '1' → logprob: -14.599084854125977
    7. ' ' → logprob: -15.349084854125977
    8. '  ' → logprob: -16.349084854125977
    9. '(d' → logprob: -16.474084854125977
    10. '2' → logprob: -17.349084854125977

Token 103: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.7201806902885437
    2. '<|end|>' → logprob: -0.7201806902885437
    3. '
' → logprob: -4.345180511474609
    4. 'and' → logprob: -5.095180511474609
    5. ' and' → logprob: -6.220180511474609
    6. '\n' → logprob: -6.345180511474609
    7. '<|end|>' → logprob: -6.595180511474609
    8. '

' → logprob: -7.095180511474609
    9. '\' → logprob: -8.09518051147461
    10. ' def' → logprob: -8.34518051147461

Token 104: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0013319060672074556
    2. '<|end|>' → logprob: -7.501331806182861
    3. '_' → logprob: -7.876331806182861
    4. '```' → logprob: -9.00133228302002
    5. '\' → logprob: -9.37633228302002
    6. '(' → logprob: -10.25133228302002
    7. 'and' → logprob: -10.37633228302002
    8. ' def' → logprob: -10.75133228302002
    9. '
' → logprob: -11.25133228302002
    10. '-' → logprob: -11.75133228302002

Token 105: ' check' (ID: 2371)
  Prédit: ' check'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' check' → logprob: -0.08049121499061584
    2. 'check' → logprob: -2.580491304397583
    3. ' main' → logprob: -6.705491065979004
    4. ' get' → logprob: -9.080491065979004
    5. 'main' → logprob: -10.080491065979004
    6. 'def' → logprob: -10.205491065979004
    7. '_check' → logprob: -10.205491065979004
    8. ' ' → logprob: -10.455491065979004
    9. ' calc' → logprob: -10.455491065979004
    10. ' def' → logprob: -10.705491065979004

Token 106: '_ind' (ID: 20261)
  Prédit: '_ind'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_ind' → logprob: -0.1529911905527115
    2. '_direct' → logprob: -2.02799129486084
    3. '_x' → logprob: -6.15299129486084
    4. '_y' → logprob: -6.15299129486084
    5. '_' → logprob: -6.52799129486084
    6. 'ind' → logprob: -7.27799129486084
    7. '_abs' → logprob: -7.65299129486084
    8. '_between' → logprob: -7.77799129486084
    9. '_diff' → logprob: -8.40299129486084
    10. '_dist' → logprob: -8.52799129486084

Token 107: 'irect' (ID: 1681)
  Prédit: 'irect'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'irect' → logprob: -0.003929979633539915
    2. 'ire' → logprob: -5.87893009185791
    3. '_' → logprob: -7.37893009185791
    4. 'ir' → logprob: -9.37893009185791
    5. 'iret' → logprob: -9.75393009185791
    6. 'irection' → logprob: -10.25393009185791
    7. 'ex' → logprob: -10.25393009185791
    8. 'i' → logprob: -10.37893009185791
    9. 'rect' → logprob: -10.37893009185791
    10. '(' → logprob: -10.50393009185791

Token 108: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.01030866801738739
    2. '(y' → logprob: -5.385308742523193
    3. ' (' → logprob: -5.760308742523193
    4. '(' → logprob: -6.010308742523193
    5. '(z' → logprob: -9.760308265686035
    6. '(a' → logprob: -12.760308265686035
    7. '(
' → logprob: -13.885308265686035
    8. 'def' → logprob: -13.885308265686035
    9. '(d' → logprob: -14.135308265686035
    10. '(s' → logprob: -14.135308265686035

Token 109: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00020056030189152807
    2. ' ,' → logprob: -8.875200271606445
    3. ',z' → logprob: -10.000200271606445
    4. ',
' → logprob: -12.375200271606445
    5. ',x' → logprob: -12.750200271606445
    6. 'z' → logprob: -12.875200271606445
    7. ',y' → logprob: -13.625200271606445
    8. 'def' → logprob: -14.000200271606445
    9. ' ' → logprob: -14.125200271606445
    10. ')' → logprob: -15.125200271606445

Token 110: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.8540396094322205
    2. ' y' → logprob: -0.8540396094322205
    3. 'z' → logprob: -2.2290396690368652
    4. ' z' → logprob: -3.2290396690368652
    5. 'd' → logprob: -7.104039669036865
    6. ' d' → logprob: -7.979039669036865
    7. ' ' → logprob: -10.104039192199707
    8. '<|end|>' → logprob: -10.104039192199707
    9. ')' → logprob: -10.479039192199707
    10. 'x' → logprob: -10.979039192199707

Token 111: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00019376569252926856
    2. ' ,' → logprob: -8.75019359588623
    3. ',z' → logprob: -10.87519359588623
    4. ',y' → logprob: -12.37519359588623
    5. 'z' → logprob: -13.00019359588623
    6. ')' → logprob: -13.12519359588623
    7. ',
' → logprob: -13.12519359588623
    8. ',x' → logprob: -13.62519359588623
    9. '   ' → logprob: -14.50019359588623
    10. 'y' → logprob: -14.50019359588623

Token 112: ' z' (ID: 579)
  Prédit: 'z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'z' → logprob: -0.06246189773082733
    2. ' z' → logprob: -2.8124618530273438
    3. 'd' → logprob: -7.937461853027344
    4. ' d' → logprob: -10.062461853027344
    5. ' ' → logprob: -10.812461853027344
    6. '	z' → logprob: -11.187461853027344
    7. ',z' → logprob: -11.312461853027344
    8. '   ' → logprob: -11.562461853027344
    9. 'y' → logprob: -11.937461853027344
    10. ')' → logprob: -11.937461853027344

Token 113: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00032354547875002027
    2. ' ,' → logprob: -8.125323295593262
    3. ',d' → logprob: -10.625323295593262
    4. 'd' → logprob: -13.875323295593262
    5. '   ' → logprob: -14.500323295593262
    6. ',y' → logprob: -14.750323295593262
    7. ',
' → logprob: -15.125323295593262
    8. '):
' → logprob: -15.500323295593262
    9. ')' → logprob: -15.500323295593262
    10. ' ' → logprob: -15.875323295593262

Token 114: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.11286777257919312
    2. ' d' → logprob: -2.237867832183838
    3. ' ' → logprob: -11.48786735534668
    4. ')' → logprob: -11.73786735534668
    5. '
' → logprob: -12.11286735534668
    6. ' y' → logprob: -12.73786735534668
    7. '   ' → logprob: -12.73786735534668
    8. ',' → logprob: -12.86286735534668
    9. 'y' → logprob: -12.98786735534668
    10. 'def' → logprob: -13.36286735534668

Token 115: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.02140153758227825
    2. ',' → logprob: -3.8964016437530518
    3. ')' → logprob: -7.646401405334473
    4. '):
' → logprob: -8.271401405334473
    5. ' ):' → logprob: -9.396401405334473
    6. '   ' → logprob: -10.271401405334473
    7. ':' → logprob: -13.146401405334473
    8. ' ,' → logprob: -13.646401405334473
    9. ' ' → logprob: -14.146401405334473
    10. '  ' → logprob: -14.771401405334473

Token 116: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012943380512297153
    2. 'return' → logprob: -5.012943267822266
    3. ' return' → logprob: -5.137943267822266
    4. ' and' → logprob: -9.512943267822266
    5. 'abs' → logprob: -10.387943267822266
    6. ')' → logprob: -10.637943267822266
    7. 'def' → logprob: -11.012943267822266
    8. 'and' → logprob: -11.012943267822266
    9. ' x' → logprob: -11.137943267822266
    10. ':' → logprob: -11.137943267822266

Token 117: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.02516542747616768
    2. '   ' → logprob: -4.150165557861328
    3. ' return' → logprob: -4.900165557861328
    4. 'calc' → logprob: -6.775165557861328
    5. 'abs' → logprob: -9.025165557861328
    6. '(calc' → logprob: -9.025165557861328
    7. 'def' → logprob: -9.775165557861328
    8. '(abs' → logprob: -10.150165557861328
    9. 'x' → logprob: -10.650165557861328
    10. 'y' → logprob: -10.775165557861328

Token 118: ' calc' (ID: 25691)
  Prédit: 'calc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'calc' → logprob: -0.7533026933670044
    2. '(calc' → logprob: -0.7533026933670044
    3. ' calc' → logprob: -4.003302574157715
    4. '(y' → logprob: -5.128302574157715
    5. '(x' → logprob: -5.128302574157715
    6. 'abs' → logprob: -5.378302574157715
    7. 'y' → logprob: -5.878302574157715
    8. 'check' → logprob: -5.878302574157715
    9. '(abs' → logprob: -6.003302574157715
    10. '(check' → logprob: -6.003302574157715

Token 119: '_abs' (ID: 81310)
  Prédit: '_abs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_abs' → logprob: -2.3199920178740285e-05
    2. 'abs' → logprob: -10.750022888183594
    3. '_ab' → logprob: -13.625022888183594
    4. '_' → logprob: -16.000022888183594
    5. '(abs' → logprob: -16.125022888183594
    6. 'Abs' → logprob: -16.250022888183594
    7. '_absolute' → logprob: -16.250022888183594
    8. ' abs' → logprob: -17.500022888183594
    9. '.abs' → logprob: -18.500022888183594
    10. '_ind' → logprob: -18.625022888183594

Token 120: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.28197136521339417
    2. '(y' → logprob: -1.4069713354110718
    3. '(z' → logprob: -7.656971454620361
    4. '(' → logprob: -8.281970977783203
    5. 'x' → logprob: -10.031970977783203
    6. 'y' → logprob: -10.156970977783203
    7. ')' → logprob: -13.156970977783203
    8. ' (' → logprob: -13.531970977783203
    9. '(get' → logprob: -14.219470977783203
    10. ')(' → logprob: -14.219470977783203

Token 121: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0025691180489957333
    2. ',y' → logprob: -6.002569198608398
    3. ' ,' → logprob: -9.752569198608398
    4. 'y' → logprob: -10.502569198608398
    5. ' ' → logprob: -13.377569198608398
    6. '(' → logprob: -13.627569198608398
    7. '   ' → logprob: -13.877569198608398
    8. ')' → logprob: -14.127569198608398
    9. ' y' → logprob: -14.377569198608398
    10. '(y' → logprob: -15.002569198608398

Token 122: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.0017258725129067898
    2. ' y' → logprob: -6.376725673675537
    3. 'z' → logprob: -10.876726150512695
    4. ''y' → logprob: -13.626726150512695
    5. ' ' → logprob: -13.876726150512695
    6. ')' → logprob: -14.126726150512695
    7. '	y' → logprob: -14.251726150512695
    8. ')y' → logprob: -15.001726150512695
    9. '<|end|>' → logprob: -15.126726150512695
    10. 'd' → logprob: -16.126726150512695

Token 123: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00011474833445390686
    2. ' )' → logprob: -10.000114440917969
    3. ')+' → logprob: -10.125114440917969
    4. ')<=' → logprob: -10.625114440917969
    5. '<=' → logprob: -13.625114440917969
    6. '')' → logprob: -13.875114440917969
    7. '）' → logprob: -14.500114440917969
    8. '")' → logprob: -14.875114440917969
    9. ' <=' → logprob: -14.875114440917969
    10. '   ' → logprob: -15.812614440917969

Token 124: ' <=' (ID: 5017)
  Prédit: '<='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<=' → logprob: -0.6403073668479919
    2. ' <=' → logprob: -0.8903073668479919
    3. '+' → logprob: -2.8903074264526367
    4. ' +' → logprob: -5.015307426452637
    5. ' ' → logprob: -9.765307426452637
    6. '>' → logprob: -10.515307426452637
    7. ')' → logprob: -11.015307426452637
    8. '=' → logprob: -12.015307426452637
    9. ')<=' → logprob: -12.015307426452637
    10. '==' → logprob: -12.640307426452637

Token 125: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.003602917306125164
    2. ' d' → logprob: -5.628602981567383
    3. ' ' → logprob: -13.878602981567383
    4. '	d' → logprob: -14.003602981567383
    5. '(' → logprob: -15.128602981567383
    6. '<|end|>' → logprob: -15.378602981567383
    7. '(d' → logprob: -15.878602981567383
    8. '   ' → logprob: -16.128602981567383
    9. '1' → logprob: -16.253602981567383
    10. '  ' → logprob: -16.253602981567383

Token 126: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.3018549680709839
    2. 'and' → logprob: -1.4268549680709839
    3. ' or' → logprob: -3.9268550872802734
    4. 'or' → logprob: -7.176855087280273
    5. ' ' → logprob: -11.176855087280273
    6. '<|end|>' → logprob: -13.051855087280273
    7. '   ' → logprob: -13.676855087280273
    8. '    ' → logprob: -13.676855087280273
    9. ')' → logprob: -13.676855087280273
    10. '	and' → logprob: -14.426855087280273

Token 127: ' calc' (ID: 25691)
  Prédit: 'calc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'calc' → logprob: -0.008636199869215488
    2. ' calc' → logprob: -4.758635997772217
    3. '   ' → logprob: -11.758636474609375
    4. '(calc' → logprob: -11.883636474609375
    5. 'cal' → logprob: -13.133636474609375
    6. ' ' → logprob: -13.508636474609375
    7. '  ' → logprob: -13.758636474609375
    8. 'abs' → logprob: -13.758636474609375
    9. '.calc' → logprob: -13.883636474609375
    10. '    ' → logprob: -15.633636474609375

Token 128: '_abs' (ID: 81310)
  Prédit: '_abs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_abs' → logprob: -1.3306015716807451e-05
    2. 'abs' → logprob: -11.25001335144043
    3. '_' → logprob: -16.00001335144043
    4. '_(' → logprob: -17.50001335144043
    5. '(abs' → logprob: -17.75001335144043
    6. '_ab' → logprob: -18.00001335144043
    7. 'Abs' → logprob: -19.37501335144043
    8. ' abs' → logprob: -19.87501335144043
    9. '__' → logprob: -19.87501335144043
    10. '_absolute' → logprob: -20.62501335144043

Token 129: '(y' (ID: 14684)
  Prédit: '(y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(y' → logprob: -2.558399319241289e-05
    2. '(' → logprob: -11.000025749206543
    3. 'y' → logprob: -12.875025749206543
    4. ')(' → logprob: -13.000025749206543
    5. ')' → logprob: -13.625025749206543
    6. '(z' → logprob: -13.750025749206543
    7. ' (' → logprob: -14.125025749206543
    8. '(x' → logprob: -15.500025749206543
    9. ''(' → logprob: -16.125024795532227
    10. '(d' → logprob: -16.250024795532227

Token 130: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00046975704026408494
    2. ',z' → logprob: -7.75046968460083
    3. ' ,' → logprob: -10.250470161437988
    4. 'z' → logprob: -13.625470161437988
    5. ' z' → logprob: -14.875470161437988
    6. '(' → logprob: -15.000470161437988
    7. ' ' → logprob: -15.125470161437988
    8. '2' → logprob: -15.437970161437988
    9. ')' → logprob: -15.437970161437988
    10. ',
' → logprob: -16.062969207763672

Token 131: ' z' (ID: 579)
  Prédit: 'z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'z' → logprob: -8.888114098226652e-05
    2. ' z' → logprob: -9.375088691711426
    3. '   ' → logprob: -13.750088691711426
    4. '	z' → logprob: -14.000088691711426
    5. ' ' → logprob: -14.250088691711426
    6. ',z' → logprob: -14.750088691711426
    7. '[z' → logprob: -14.750088691711426
    8. ',' → logprob: -15.375088691711426
    9. ''z' → logprob: -15.500088691711426
    10. ')' → logprob: -15.875088691711426

Token 132: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.88418151892256e-05
    2. ' )' → logprob: -9.875059127807617
    3. ')<=' → logprob: -11.875059127807617
    4. '')' → logprob: -16.500059127807617
    5. '<=' → logprob: -16.625059127807617
    6. ' <=' → logprob: -16.875059127807617
    7. '`)' → logprob: -17.625059127807617
    8. '）' → logprob: -17.625059127807617
    9. '   ' → logprob: -18.500059127807617
    10. '")' → logprob: -18.625059127807617

Token 133: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.03804837539792061
    2. '<=' → logprob: -3.288048267364502
    3. ')' → logprob: -12.41304874420166
    4. ' ' → logprob: -13.66304874420166
    5. ')<=' → logprob: -14.03804874420166
    6. '()' → logprob: -14.28804874420166
    7. ']<=' → logprob: -17.163047790527344
    8. '   ' → logprob: -17.163047790527344
    9. ' )' → logprob: -17.288047790527344
    10. '>' → logprob: -17.413047790527344

Token 134: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.31326326727867126
    2. ' d' → logprob: -1.3132632970809937
    3. '	d' → logprob: -13.938262939453125
    4. ' ' → logprob: -15.188262939453125
    5. ' ' → logprob: -15.813262939453125
    6. '(d' → logprob: -17.188262939453125
    7. '_d' → logprob: -17.188262939453125
    8. '   ' → logprob: -17.188262939453125
    9. ')d' → logprob: -17.688262939453125
    10. '>d' → logprob: -17.688262939453125

Token 135: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.02143549732863903
    2. '
' → logprob: -4.271435260772705
    3. '<|end|>' → logprob: -5.271435260772705
    4. '

' → logprob: -6.271435260772705
    5. '#' → logprob: -10.146435737609863
    6. '  
' → logprob: -10.521435737609863
    7. '\' → logprob: -10.646435737609863
    8. '
' → logprob: -11.021435737609863
    9. '<|end|>' → logprob: -11.021435737609863
    10. '\n' → logprob: -11.271435737609863

Token 136: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0012676131445914507
    2. 'values' → logprob: -7.751267433166504
    3. 'x' → logprob: -8.126267433166504
    4. 'd' → logprob: -8.626267433166504
    5. 'if' → logprob: -8.876267433166504
    6. 'for' → logprob: -9.626267433166504
    7. '#' → logprob: -10.001267433166504
    8. 'print' → logprob: -11.001267433166504
    9. '
' → logprob: -11.126267433166504
    10. 'n' → logprob: -11.126267433166504

Token 137: ' output' (ID: 4733)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.6628651022911072
    2. ' main' → logprob: -0.7878651022911072
    3. 'can' → logprob: -5.037865161895752
    4. 'check' → logprob: -5.162865161895752
    5. 'def' → logprob: -5.287865161895752
    6. ' check' → logprob: -5.662865161895752
    7. ' can' → logprob: -6.037865161895752
    8. 'solve' → logprob: -6.162865161895752
    9. ' solve' → logprob: -6.912865161895752
    10. 'is' → logprob: -6.912865161895752

Token 138: '_yes' (ID: 151898)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.04214422032237053
    2. '()' → logprob: -3.292144298553467
    3. '(s' → logprob: -6.917144298553467
    4. '(value' → logprob: -7.542144298553467
    5. '("")' → logprob: -7.917144298553467
    6. '(data' → logprob: -8.042143821716309
    7. '(values' → logprob: -8.667143821716309
    8. '(text' → logprob: -8.667143821716309
    9. '():' → logprob: -8.792143821716309
    10. '("("' → logprob: -9.042143821716309

Token 139: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0026125209406018257
    2. '():
' → logprob: -6.002612590789795
    3. '()' → logprob: -9.127612113952637
    4. ' ():' → logprob: -10.502612113952637
    5. '():
' → logprob: -14.752612113952637
    6. '():

' → logprob: -16.002613067626953
    7. ' ()' → logprob: -16.377613067626953
    8. ':' → logprob: -17.127613067626953
    9. '(' → logprob: -17.127613067626953
    10. 'def' → logprob: -18.627613067626953

Token 140: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10059752315282822
    2. 'print' → logprob: -2.350597620010376
    3. ' print' → logprob: -7.850597381591797
    4. 'return' → logprob: -14.475597381591797
    5. '   ' → logprob: -15.100597381591797
    6. '	print' → logprob: -15.725597381591797
    7. '```' → logprob: -16.600597381591797
    8. '  ' → logprob: -16.975597381591797
    9. ' ' → logprob: -17.225597381591797
    10. '    ' → logprob: -17.600597381591797

Token 141: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -5.512236498361744e-07
    2. '   ' → logprob: -14.875000953674316
    3. ' print' → logprob: -16.125
    4. '```' → logprob: -18.75
    5. 'def' → logprob: -20.0
    6. 'pr' → logprob: -20.5
    7. 'return' → logprob: -21.5
    8. '	print' → logprob: -21.875
    9. 'prin' → logprob: -21.875
    10. '
' → logprob: -23.0

Token 142: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.03372085466980934
    2. '(' → logprob: -3.5337209701538086
    3. '('' → logprob: -5.533720970153809
    4. '("("' → logprob: -11.533720970153809
    5. ' ("' → logprob: -15.158720970153809
    6. '(True' → logprob: -15.408720970153809
    7. '(
' → logprob: -15.658720970153809
    8. '"' → logprob: -15.783720970153809
    9. '()' → logprob: -16.033720016479492
    10. '("""' → logprob: -16.158720016479492

Token 143: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.03406380116939545
    2. 'YES' → logprob: -3.4090638160705566
    3. 'yes' → logprob: -8.159063339233398
    4. 'Y' → logprob: -9.659063339233398
    5. ' Yes' → logprob: -10.034063339233398
    6. '"' → logprob: -11.409063339233398
    7. ' yes' → logprob: -11.909063339233398
    8. '_yes' → logprob: -12.909063339233398
    9. 'Possible' → logprob: -13.534063339233398
    10. '
' → logprob: -15.159063339233398

Token 144: '")

' (ID: 10822)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -9.13388703338569e-06
    2. '")
' → logprob: -11.875009536743164
    3. ')' → logprob: -13.875009536743164
    4. ')")' → logprob: -14.125009536743164
    5. '")

' → logprob: -15.125009536743164
    6. 'def' → logprob: -17.375009536743164
    7. '"' → logprob: -17.500009536743164
    8. '!")' → logprob: -18.125009536743164
    9. '()' → logprob: -18.625009536743164
    10. ' ")' → logprob: -19.125009536743164

Token 145: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: 0.0
    2. ' def' → logprob: -20.875
    3. '	def' → logprob: -22.875
    4. 'ndef' → logprob: -23.0
    5. '
' → logprob: -23.25
    6. '<|end|>' → logprob: -23.625
    7. '-def' → logprob: -24.5
    8. '```' → logprob: -24.75
    9. '_def' → logprob: -25.25
    10. '    
' → logprob: -25.75

Token 146: ' output' (ID: 4733)
  Prédit: 'output'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'output' → logprob: -0.018150413408875465
    2. ' output' → logprob: -4.018150329589844
    3. 'def' → logprob: -14.893150329589844
    4. '_output' → logprob: -16.643150329589844
    5. '	output' → logprob: -17.893150329589844
    6. '(output' → logprob: -18.143150329589844
    7. 'out' → logprob: -19.018150329589844
    8. 'input' → logprob: -19.143150329589844
    9. ' def' → logprob: -19.518150329589844
    10. 'Output' → logprob: -20.143150329589844

Token 147: '_no' (ID: 13575)
  Prédit: '_no'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_no' → logprob: -1.6047699318733066e-05
    2. '_n' → logprob: -11.375016212463379
    3. '_none' → logprob: -13.375016212463379
    4. '_' → logprob: -14.250016212463379
    5. '_No' → logprob: -14.375016212463379
    6. '_NO' → logprob: -14.625016212463379
    7. '_not' → logprob: -14.625016212463379
    8. '_na' → logprob: -15.250016212463379
    9. '_non' → logprob: -16.625015258789062
    10. '_false' → logprob: -16.750015258789062

Token 148: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -8.137130498653278e-05
    2. '():
' → logprob: -9.750081062316895
    3. '()' → logprob: -10.750081062316895
    4. ' ():' → logprob: -13.375081062316895
    5. ':' → logprob: -17.12508201599121
    6. '():
' → logprob: -17.62508201599121
    7. '():

' → logprob: -17.87508201599121
    8. '()>' → logprob: -19.00008201599121
    9. '(' → logprob: -19.12508201599121
    10. '()">' → logprob: -19.87508201599121

Token 149: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.38768360018730164
    2. 'print' → logprob: -1.137683629989624
    3. ' print' → logprob: -7.137683391571045
    4. '(print' → logprob: -11.262683868408203
    5. '	print' → logprob: -12.512683868408203
    6. '(' → logprob: -14.887683868408203
    7. '```' → logprob: -15.512683868408203
    8. '  ' → logprob: -15.512683868408203
    9. '       ' → logprob: -15.887683868408203
    10. '.print' → logprob: -16.637683868408203

Token 150: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -5.512236498361744e-07
    2. ' print' → logprob: -15.000000953674316
    3. '   ' → logprob: -16.0
    4. '	print' → logprob: -21.875
    5. '```' → logprob: -23.625
    6. '(print' → logprob: -24.75
    7. '.print' → logprob: -25.875
    8. 'printf' → logprob: -26.75
    9. '#print' → logprob: -27.0
    10. 'pr' → logprob: -27.0

Token 151: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.0018048917409032583
    2. '()' → logprob: -6.501804828643799
    3. '(' → logprob: -8.126805305480957
    4. '("")' → logprob: -12.751805305480957
    5. '('' → logprob: -13.126805305480957
    6. '(No' → logprob: -15.001805305480957
    7. '(no' → logprob: -15.126805305480957
    8. '()"' → logprob: -15.126805305480957
    9. '("""' → logprob: -15.251805305480957
    10. ' ("' → logprob: -15.376805305480957

Token 152: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.0009120595059357584
    2. '"No' → logprob: -7.000912189483643
    3. '"' → logprob: -14.500911712646484
    4. 'NO' → logprob: -16.500911712646484
    5. ' No' → logprob: -17.125911712646484
    6. '“No' → logprob: -18.375911712646484
    7. '"N' → logprob: -19.250911712646484
    8. 'N' → logprob: -19.875911712646484
    9. '")' → logprob: -20.250911712646484
    10. '>No' → logprob: -20.625911712646484

Token 153: '")

' (ID: 10822)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -0.38733476400375366
    2. '()' → logprob: -1.1373348236083984
    3. ')' → logprob: -8.262334823608398
    4. ')")' → logprob: -8.637334823608398
    5. '")
' → logprob: -10.762334823608398
    6. '())' → logprob: -12.262334823608398
    7. '()
' → logprob: -14.262334823608398
    8. '()"' → logprob: -14.512334823608398
    9. '"' → logprob: -14.887334823608398
    10. '("' → logprob: -15.387334823608398

Token 154: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0959169790148735
    2. 'values' → logprob: -2.470916986465454
    3. 'if' → logprob: -4.970916748046875
    4. 'vals' → logprob: -12.095916748046875
    5. '#' → logprob: -12.470916748046875
    6. ' values' → logprob: -13.220916748046875
    7. 'input' → logprob: -14.095916748046875
    8. 'VALUES' → logprob: -14.345916748046875
    9. 'inputs' → logprob: -14.345916748046875
    10. '    
' → logprob: -14.720916748046875

Token 155: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.10044852644205093
    2. ' main' → logprob: -2.3504486083984375
    3. 'def' → logprob: -8.600448608398438
    4. 'solve' → logprob: -10.225448608398438
    5. 'is' → logprob: -11.975448608398438
    6. '	main' → logprob: -12.850448608398438
    7. '_main' → logprob: -13.225448608398438
    8. ' solve' → logprob: -13.225448608398438
    9. 'process' → logprob: -13.350448608398438
    10. 'solution' → logprob: -13.850448608398438

Token 156: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -1.4140441635390744e-05
    2. ' ():' → logprob: -11.625014305114746
    3. '():
' → logprob: -12.250014305114746
    4. '()' → logprob: -15.625014305114746
    5. '(' → logprob: -16.75001335144043
    6. '_' → logprob: -18.00001335144043
    7. '():
' → logprob: -18.37501335144043
    8. ':' → logprob: -18.87501335144043
    9. '(":' → logprob: -19.12501335144043
    10. '().' → logprob: -20.00001335144043

Token 157: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.25444769859313965
    2. 'values' → logprob: -1.5044476985931396
    3. ' values' → logprob: -6.129447937011719
    4. '	values' → logprob: -9.629447937011719
    5. '    
' → logprob: -9.879447937011719
    6. 'def' → logprob: -10.004447937011719
    7. 'vals' → logprob: -10.254447937011719
    8. '_values' → logprob: -10.629447937011719
    9. '(values' → logprob: -10.629447937011719
    10. 'inputs' → logprob: -10.754447937011719

Token 158: ' inp' (ID: 64450)
  Prédit: 'values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'values' → logprob: -0.0008564318413846195
    2. 'vals' → logprob: -8.125856399536133
    3. ' values' → logprob: -8.500856399536133
    4. '   ' → logprob: -8.500856399536133
    5. 'inputs' → logprob: -9.375856399536133
    6. 'input' → logprob: -10.375856399536133
    7. 'def' → logprob: -12.000856399536133
    8. 'x' → logprob: -12.250856399536133
    9. '    
' → logprob: -12.375856399536133
    10. ' ' → logprob: -12.500856399536133

Token 159: ' =' (ID: 314)
  Prédit: 'ut'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ut' → logprob: -0.016237881034612656
    2. ' =' → logprob: -4.391237735748291
    3. '=' → logprob: -6.141237735748291
    4. '_values' → logprob: -7.266237735748291
    5. '_vals' → logprob: -8.14123821258545
    6. 'uts' → logprob: -8.89123821258545
    7. '_' → logprob: -9.01623821258545
    8. '_ut' → logprob: -9.14123821258545
    9. '   ' → logprob: -9.64123821258545
    10. 'u' → logprob: -10.76623821258545

Token 160: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.03298110142350197
    2. ' get' → logprob: -3.7829811573028564
    3. 'to' → logprob: -4.657980918884277
    4. ' to' → logprob: -8.532980918884277
    5. '(get' → logprob: -12.407980918884277
    6. ' ' → logprob: -14.532980918884277
    7. '	get' → logprob: -14.532980918884277
    8. '   ' → logprob: -14.657980918884277
    9. '  ' → logprob: -15.657980918884277
    10. '[get' → logprob: -15.657980918884277

Token 161: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -3.531315314830863e-06
    2. 'input' → logprob: -12.625003814697266
    3. '_output' → logprob: -17.000003814697266
    4. '_inputs' → logprob: -17.125003814697266
    5. '_in' → logprob: -17.375003814697266
    6. '_' → logprob: -17.375003814697266
    7. '_x' → logprob: -17.750003814697266
    8. 'Input' → logprob: -18.000003814697266
    9. '()' → logprob: -18.750003814697266
    10. '_line' → logprob: -18.875003814697266

Token 162: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -6.2729995988775045e-06
    2. '()
' → logprob: -12.375006675720215
    3. '()

' → logprob: -13.750006675720215
    4. ' ()' → logprob: -15.250006675720215
    5. '();' → logprob: -16.0000057220459
    6. '()]' → logprob: -16.1250057220459
    7. '().' → logprob: -16.2500057220459
    8. '()<' → logprob: -16.2500057220459
    9. '()`' → logprob: -16.2500057220459
    10. '())' → logprob: -16.6250057220459

Token 163: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7713950276374817
    2. 'values' → logprob: -1.396394968032837
    3. 'vals' → logprob: -1.896394968032837
    4. ' values' → logprob: -2.396394968032837
    5. ' vals' → logprob: -3.146394968032837
    6. 'val' → logprob: -5.646395206451416
    7. '	values' → logprob: -7.021395206451416
    8. ' val' → logprob: -7.521395206451416
    9. '    
' → logprob: -7.646395206451416
    10. 'v' → logprob: -8.646394729614258

Token 164: ' values' (ID: 4824)
  Prédit: 'values'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'values' (adapté à ' values') → logprob: -0.5491074919700623
    2. 'vals' → logprob: -0.9241074919700623
    3. ' values' → logprob: -4.299107551574707
    4. ' vals' → logprob: -4.674107551574707
    5. 'val' → logprob: -6.549107551574707
    6. '   ' → logprob: -7.424107551574707
    7. 'v' → logprob: -8.674107551574707
    8. 'ints' → logprob: -8.674107551574707
    9. 'nums' → logprob: -8.799107551574707
    10. 'lst' → logprob: -9.549107551574707

Token 165: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.12692853808403015
    2. '=' → logprob: -2.1269285678863525
    3. ')' → logprob: -15.501928329467773
    4. '＝' → logprob: -15.751928329467773
    5. '_' → logprob: -16.751928329467773
    6. ',' → logprob: -17.126928329467773
    7. '=int' → logprob: -17.376928329467773
    8. ' =)' → logprob: -17.376928329467773
    9. ' ' → logprob: -18.001928329467773
    10. '	' → logprob: -18.001928329467773

Token 166: ' to' (ID: 316)
  Prédit: 'to'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'to' → logprob: -0.5759395360946655
    2. ' to' → logprob: -0.8259395360946655
    3. '(to' → logprob: -16.575939178466797
    4. '	to' → logprob: -18.200939178466797
    5. 't' → logprob: -18.325939178466797
    6. ' ' → logprob: -19.200939178466797
    7. '   ' → logprob: -19.450939178466797
    8. '[to' → logprob: -19.825939178466797
    9. '_to' → logprob: -19.950939178466797
    10. '.to' → logprob: -20.075939178466797

Token 167: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -2.15310683415737e-05
    2. 'int' → logprob: -10.750021934509277
    3. '<int' → logprob: -17.62502098083496
    4. '_' → logprob: -18.00002098083496
    5. '_integer' → logprob: -18.62502098083496
    6. '_uint' → logprob: -19.25002098083496
    7. '_in' → logprob: -19.37502098083496
    8. '_INT' → logprob: -19.50002098083496
    9. ' int' → logprob: -19.50002098083496
    10. '[int' → logprob: -20.00002098083496

Token 168: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -1.9361264946837764e-07
    2. '_int' → logprob: -17.0
    3. '_values' → logprob: -17.75
    4. 'list' → logprob: -17.75
    5. '_lists' → logprob: -17.75
    6. '_' → logprob: -18.375
    7. 'int' → logprob: -18.75
    8. '_lst' → logprob: -20.375
    9. '_LIST' → logprob: -20.5
    10. '_value' → logprob: -21.125

Token 169: '(inp' (ID: 141645)
  Prédit: '(inp'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(inp' → logprob: -0.0002338144404347986
    2. '(' → logprob: -8.37523365020752
    3. '(inv' → logprob: -13.62523365020752
    4. '(instr' → logprob: -13.62523365020752
    5. '(inplace' → logprob: -15.50023365020752
    6. ' (' → logprob: -15.50023365020752
    7. '(
' → logprob: -16.250234603881836
    8. '(ans' → logprob: -16.250234603881836
    9. '(input' → logprob: -16.375234603881836
    10. '(ip' → logprob: -17.375234603881836

Token 170: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.8325677703833207e-05
    2. ')
' → logprob: -10.625028610229492
    3. '())' → logprob: -12.625028610229492
    4. '()' → logprob: -15.000028610229492
    5. ' )' → logprob: -15.250028610229492
    6. '))' → logprob: -16.250028610229492
    7. ')

' → logprob: -16.875028610229492
    8. '(' → logprob: -17.750028610229492
    9. ')`' → logprob: -18.375028610229492
    10. '[' → logprob: -18.625028610229492

Token 171: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05215189978480339
    2. 'x' → logprob: -3.677151918411255
    3. '
' → logprob: -3.802151918411255
    4. ' x' → logprob: -6.552151679992676
    5. '    
' → logprob: -6.802151679992676
    6. 'if' → logprob: -8.802151679992676
    7. ' if' → logprob: -9.427151679992676
    8. '(' → logprob: -10.052151679992676
    9. '  ' → logprob: -10.052151679992676
    10. '(x' → logprob: -10.052151679992676

Token 172: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' (adapté à ' x') → logprob: -0.0006419036653824151
    2. '   ' → logprob: -7.750641822814941
    3. ' x' → logprob: -9.000641822814941
    4. 'if' → logprob: -9.375641822814941
    5. '```' → logprob: -14.125641822814941
    6. ' if' → logprob: -14.500641822814941
    7. 'd' → logprob: -14.625641822814941
    8. '    
' → logprob: -15.250641822814941
    9. '_x' → logprob: -15.500641822814941
    10. 'X' → logprob: -15.500641822814941

Token 173: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.02061779983341694
    2. '=' → logprob: -4.145617961883545
    3. ',' → logprob: -5.395617961883545
    4. ')' → logprob: -10.645617485046387
    5. ' ,' → logprob: -12.020617485046387
    6. ' ' → logprob: -13.270617485046387
    7. '(' → logprob: -13.395617485046387
    8. '   ' → logprob: -14.020617485046387
    9. ' =)' → logprob: -14.645617485046387
    10. ' )' → logprob: -14.770617485046387

Token 174: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.01416738796979189
    2. ' get' → logprob: -4.264167308807373
    3. '(get' → logprob: -12.889167785644531
    4. ')get' → logprob: -15.014167785644531
    5. '=get' → logprob: -15.139167785644531
    6. '[get' → logprob: -15.139167785644531
    7. '	get' → logprob: -15.389167785644531
    8. '_get' → logprob: -16.01416778564453
    9. 'values' → logprob: -16.51416778564453
    10. '.get' → logprob: -17.13916778564453

Token 175: '_x' (ID: 7054)
  Prédit: '_x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_x' → logprob: -1.318681188422488e-05
    2. 'x' → logprob: -11.25001335144043
    3. '(x' → logprob: -16.37501335144043
    4. '_' → logprob: -18.37501335144043
    5. 'values' → logprob: -19.00001335144043
    6. '_y' → logprob: -19.37501335144043
    7. '_values' → logprob: -19.75001335144043
    8. '(' → logprob: -20.87501335144043
    9. '(values' → logprob: -21.37501335144043
    10. ' x' → logprob: -21.62501335144043

Token 176: '(values' (ID: 40883)
  Prédit: '(values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(values' → logprob: -3.380904672667384e-05
    2. '(' → logprob: -10.500033378601074
    3. 'values' → logprob: -12.000033378601074
    4. ' (' → logprob: -17.00003433227539
    5. ' values' → logprob: -17.25003433227539
    6. '	values' → logprob: -18.75003433227539
    7. '.values' → logprob: -19.37503433227539
    8. '_values' → logprob: -19.75003433227539
    9. 'Values' → logprob: -20.62503433227539
    10. '(vals' → logprob: -20.62503433227539

Token 177: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.006716079078614712
    2. ')
' → logprob: -5.006716251373291
    3. ' )' → logprob: -15.131715774536133
    4. '   ' → logprob: -15.381715774536133
    5. ')
' → logprob: -15.756715774536133
    6. ')

' → logprob: -16.381715774536133
    7. '),' → logprob: -16.881715774536133
    8. ' )
' → logprob: -17.506715774536133
    9. ' ' → logprob: -17.756715774536133
    10. ')x' → logprob: -18.631715774536133

Token 178: '   ' (ID: 271)
  Prédit: ' y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.2598072290420532
    2. 'y' → logprob: -2.0098071098327637
    3. '   ' → logprob: -2.6348071098327637
    4. '	y' → logprob: -4.634807109832764
    5. ',y' → logprob: -5.009807109832764
    6. ' ' → logprob: -5.509807109832764
    7. ',' → logprob: -7.134807109832764
    8. '
' → logprob: -7.509807109832764
    9. '<|end|>' → logprob: -8.009807586669922
    10. '    
' → logprob: -8.634807586669922

Token 179: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' (adapté à ' y') → logprob: -0.0001514557225164026
    2. ' y' → logprob: -8.875151634216309
    3. '   ' → logprob: -11.375151634216309
    4. ' ' → logprob: -17.250150680541992
    5. '  ' → logprob: -17.625150680541992
    6. '	y' → logprob: -17.625150680541992
    7. '    ' → logprob: -18.500150680541992
    8. 'z' → logprob: -19.125150680541992
    9. '
' → logprob: -19.375150680541992
    10. ''y' → logprob: -19.750150680541992

Token 180: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.03390178829431534
    2. '=' → logprob: -3.4089016914367676
    3. '(values' → logprob: -8.658902168273926
    4. ',' → logprob: -10.408902168273926
    5. ' ' → logprob: -10.658902168273926
    6. ')' → logprob: -11.033902168273926
    7. '<|end|>' → logprob: -12.283902168273926
    8. '[' → logprob: -13.533902168273926
    9. ' values' → logprob: -13.658902168273926
    10. '=get' → logprob: -13.783902168273926

Token 181: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.0788951888680458
    2. ' get' → logprob: -2.578895092010498
    3. '(get' → logprob: -12.453895568847656
    4. 'values' → logprob: -14.453895568847656
    5. '_get' → logprob: -15.203895568847656
    6. ' values' → logprob: -15.703895568847656
    7. '.get' → logprob: -15.703895568847656
    8. '=get' → logprob: -15.703895568847656
    9. '	get' → logprob: -15.953895568847656
    10. '[get' → logprob: -16.328895568847656

Token 182: '_y' (ID: 9410)
  Prédit: '_y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_y' → logprob: -0.6947630643844604
    2. '(values' → logprob: -0.6947630643844604
    3. 'values' → logprob: -7.44476318359375
    4. 'get' → logprob: -7.69476318359375
    5. '[' → logprob: -8.44476318359375
    6. '(get' → logprob: -8.69476318359375
    7. '_get' → logprob: -9.56976318359375
    8. 'y' → logprob: -9.56976318359375
    9. '(' → logprob: -10.81976318359375
    10. '_' → logprob: -11.81976318359375

Token 183: '(values' (ID: 40883)
  Prédit: '(values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(values' → logprob: -9.729906196298543e-06
    2. 'values' → logprob: -11.750009536743164
    3. '(' → logprob: -13.625009536743164
    4. ' values' → logprob: -14.625009536743164
    5. '.values' → logprob: -17.000009536743164
    6. '	values' → logprob: -17.250009536743164
    7. ' (' → logprob: -17.625009536743164
    8. '<|end|>' → logprob: -18.625009536743164
    9. ')' → logprob: -18.750009536743164
    10. '(value' → logprob: -19.375009536743164

Token 184: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.014165864326059818
    2. ')
' → logprob: -4.264165878295898
    3. '   ' → logprob: -13.514165878295898
    4. ')
' → logprob: -15.014165878295898
    5. '),' → logprob: -15.514165878295898
    6. ')

' → logprob: -16.0141658782959
    7. ',' → logprob: -16.5141658782959
    8. '(values' → logprob: -16.6391658782959
    9. ' )' → logprob: -17.0141658782959
    10. ')`
' → logprob: -17.1391658782959

Token 185: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6453846096992493
    2. 'z' → logprob: -0.8953846096992493
    3. ' z' → logprob: -2.7703845500946045
    4. '	z' → logprob: -5.770384788513184
    5. ',z' → logprob: -7.270384788513184
    6. '(z' → logprob: -8.520384788513184
    7. ' ' → logprob: -8.895384788513184
    8. '```' → logprob: -9.145384788513184
    9. '
' → logprob: -9.770384788513184
    10. ',' → logprob: -10.020384788513184

Token 186: ' z' (ID: 579)
  Prédit: 'z'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'z' (adapté à ' z') → logprob: -0.00015860427811276168
    2. ' z' → logprob: -8.750158309936523
    3. '	z' → logprob: -17.375158309936523
    4. '   ' → logprob: -17.500158309936523
    5. 'def' → logprob: -18.500158309936523
    6. 'get' → logprob: -18.625158309936523
    7. '_z' → logprob: -19.000158309936523
    8. '```' → logprob: -19.250158309936523
    9. 'x' → logprob: -20.375158309936523
    10. ' ' → logprob: -20.375158309936523

Token 187: ' =' (ID: 314)
  Prédit: '(values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(values' → logprob: -0.8748889565467834
    2. ' =' → logprob: -1.1248888969421387
    3. '=' → logprob: -1.3748888969421387
    4. ',' → logprob: -5.749888896942139
    5. '(' → logprob: -6.999888896942139
    6. ')' → logprob: -7.374888896942139
    7. '<|end|>' → logprob: -7.874888896942139
    8. 'values' → logprob: -8.874889373779297
    9. '	values' → logprob: -9.624889373779297
    10. '[' → logprob: -9.749889373779297

Token 188: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.12694217264652252
    2. ' get' → logprob: -2.1269421577453613
    3. ' values' → logprob: -12.00194263458252
    4. 'values' → logprob: -12.00194263458252
    5. '(get' → logprob: -13.50194263458252
    6. '(values' → logprob: -15.62694263458252
    7. '.get' → logprob: -16.001941680908203
    8. '_get' → logprob: -16.251941680908203
    9. '	get' → logprob: -16.251941680908203
    10. '[get' → logprob: -17.001941680908203

Token 189: '_z' (ID: 18252)
  Prédit: '_z'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_z' → logprob: -0.0007837798330001533
    2. '(values' → logprob: -7.250783920288086
    3. 'values' → logprob: -9.875783920288086
    4. 'z' → logprob: -11.500783920288086
    5. '_x' → logprob: -11.875783920288086
    6. '(z' → logprob: -13.500783920288086
    7. '[' → logprob: -13.625783920288086
    8. '[z' → logprob: -13.625783920288086
    9. '_y' → logprob: -14.125783920288086
    10. '_values' → logprob: -15.625783920288086

Token 190: '(values' (ID: 40883)
  Prédit: '(values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(values' → logprob: -2.8802491215174086e-05
    2. 'values' → logprob: -10.500028610229492
    3. ' values' → logprob: -14.000028610229492
    4. ')' → logprob: -15.625028610229492
    5. '(' → logprob: -16.125028610229492
    6. '	values' → logprob: -16.500028610229492
    7. '.values' → logprob: -17.125028610229492
    8. ' (' → logprob: -18.375028610229492
    9. '```' → logprob: -18.750028610229492
    10. '[' → logprob: -19.625028610229492

Token 191: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.201422318816185
    2. ')' → logprob: -1.7014223337173462
    3. '   ' → logprob: -12.701422691345215
    4. ')
' → logprob: -12.701422691345215
    5. ' )
' → logprob: -13.326422691345215
    6. ')

' → logprob: -14.201422691345215
    7. ')`
' → logprob: -15.451422691345215
    8. 'values' → logprob: -16.2014217376709
    9. ' )' → logprob: -16.2014217376709
    10. '),' → logprob: -16.5764217376709

Token 192: '   ' (ID: 271)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.1756601184606552
    2. '   ' → logprob: -1.9256601333618164
    3. ' d' → logprob: -4.925660133361816
    4. '	d' → logprob: -4.925660133361816
    5. 'def' → logprob: -7.550660133361816
    6. '```' → logprob: -9.425660133361816
    7. '[' → logprob: -9.800660133361816
    8. '    
' → logprob: -10.175660133361816
    9. '(d' → logprob: -10.550660133361816
    10. '
' → logprob: -10.550660133361816

Token 193: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' (adapté à ' d') → logprob: -1.1472419600977446e-06
    2. ' d' → logprob: -13.750000953674316
    3. '   ' → logprob: -19.000001907348633
    4. '	d' → logprob: -20.750001907348633
    5. '_d' → logprob: -20.750001907348633
    6. 'def' → logprob: -22.375001907348633
    7. '```' → logprob: -22.375001907348633
    8. '[' → logprob: -23.000001907348633
    9. '
' → logprob: -23.125001907348633
    10. 'D' → logprob: -23.250001907348633

Token 194: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.12694543600082397
    2. '=' → logprob: -2.1269454956054688
    3. '=get' → logprob: -11.001945495605469
    4. ')' → logprob: -15.626945495605469
    5. ' ' → logprob: -16.12694549560547
    6. '   ' → logprob: -16.50194549560547
    7. '(get' → logprob: -16.87694549560547
    8. '(' → logprob: -17.12694549560547
    9. '＝' → logprob: -17.50194549560547
    10. '(values' → logprob: -17.62694549560547

Token 195: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.000553151941858232
    2. ' get' → logprob: -7.500553131103516
    3. '(get' → logprob: -16.750553131103516
    4. '	get' → logprob: -19.250553131103516
    5. '[get' → logprob: -19.375553131103516
    6. '=get' → logprob: -19.625553131103516
    7. '_get' → logprob: -20.750553131103516
    8. '.get' → logprob: -20.875553131103516
    9. ')get' → logprob: -22.875553131103516
    10. '/get' → logprob: -23.875553131103516

Token 196: '_d' (ID: 1565)
  Prédit: '_d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_d' → logprob: -1.6240566083070007e-06
    2. 'd' → logprob: -13.500001907348633
    3. '_x' → logprob: -16.875001907348633
    4. 'values' → logprob: -17.250001907348633
    5. '_z' → logprob: -18.500001907348633
    6. 'get' → logprob: -19.000001907348633
    7. '_values' → logprob: -19.375001907348633
    8. '_' → logprob: -19.750001907348633
    9. 'value' → logprob: -20.125001907348633
    10. 'def' → logprob: -20.375001907348633

Token 197: '(values' (ID: 40883)
  Prédit: '(values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(values' → logprob: -0.00045557913836091757
    2. 'values' → logprob: -7.750455379486084
    3. ' values' → logprob: -10.625455856323242
    4. '	values' → logprob: -14.875455856323242
    5. '.values' → logprob: -16.000455856323242
    6. '(' → logprob: -16.875455856323242
    7. ' (' → logprob: -17.125455856323242
    8. '_values' → logprob: -17.375455856323242
    9. 'Values' → logprob: -18.625455856323242
    10. ')' → logprob: -19.625455856323242

Token 198: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0802738870552275e-05
    2. ')
' → logprob: -11.50001049041748
    3. '   ' → logprob: -14.62501049041748
    4. ' )' → logprob: -16.125011444091797
    5. ')`' → logprob: -18.125011444091797
    6. ')

' → logprob: -18.750011444091797
    7. '))' → logprob: -18.750011444091797
    8. ' ' → logprob: -19.000011444091797
    9. '()' → logprob: -19.250011444091797
    10. '}' → logprob: -19.375011444091797

Token 199: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7633369565010071
    2. '
' → logprob: -0.8883369565010071
    3. 'if' → logprob: -2.2633368968963623
    4. ' if' → logprob: -4.138337135314941
    5. '    
' → logprob: -6.263337135314941
    6. '  
' → logprob: -8.388337135314941
    7. ' 
' → logprob: -9.013337135314941
    8. ' ' → logprob: -9.138337135314941
    9. '<|end|>' → logprob: -9.888337135314941
    10. '```' → logprob: -9.888337135314941

Token 200: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.0020586655009537935
    2. '   ' → logprob: -6.502058506011963
    3. ' if' → logprob: -7.502058506011963
    4. '```' → logprob: -12.502058982849121
    5. '	if' → logprob: -15.252058982849121
    6. '    
' → logprob: -16.252058029174805
    7. '
' → logprob: -16.877058029174805
    8. 'If' → logprob: -16.877058029174805
    9. '``' → logprob: -17.377058029174805
    10. ' ' → logprob: -17.627058029174805

Token 201: ' check' (ID: 2371)
  Prédit: ' check'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' check' → logprob: -0.0025068165268749
    2. 'check' → logprob: -6.002506732940674
    3. '(check' → logprob: -10.377507209777832
    4. '	check' → logprob: -17.377506256103516
    5. '   ' → logprob: -17.502506256103516
    6. ' (' → logprob: -18.002506256103516
    7. '_check' → logprob: -19.252506256103516
    8. '.check' → logprob: -19.627506256103516
    9. '(' → logprob: -20.377506256103516
    10. ' ' → logprob: -20.502506256103516

Token 202: '_direct' (ID: 80120)
  Prédit: '_direct'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_direct' → logprob: -3.547789674485102e-05
    2. 'direct' → logprob: -10.250035285949707
    3. '_' → logprob: -16.750036239624023
    4. '_DIRECT' → logprob: -19.000036239624023
    5. 'Direct' → logprob: -19.000036239624023
    6. '_ind' → logprob: -19.000036239624023
    7. '_d' → logprob: -19.375036239624023
    8. 'irect' → logprob: -19.500036239624023
    9. '__' → logprob: -19.500036239624023
    10. '(' → logprob: -19.875036239624023

Token 203: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.00043233807082287967
    2. '(' → logprob: -7.75043249130249
    3. ' (' → logprob: -13.375432014465332
    4. '(X' → logprob: -17.25043296813965
    5. '(
' → logprob: -17.62543296813965
    6. '(z' → logprob: -17.62543296813965
    7. '(y' → logprob: -18.62543296813965
    8. '(

' → logprob: -19.25043296813965
    9. '(i' → logprob: -19.37543296813965
    10. '((' → logprob: -19.37543296813965

Token 204: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00010366239439463243
    2. ' ,' → logprob: -9.625103950500488
    3. ',z' → logprob: -10.250103950500488
    4. ',x' → logprob: -14.000103950500488
    5. ',
' → logprob: -14.375103950500488
    6. '   ' → logprob: -15.125103950500488
    7. ',y' → logprob: -16.625102996826172
    8. '```' → logprob: -16.750102996826172
    9. ')' → logprob: -16.875102996826172
    10. '_,' → logprob: -16.875102996826172

Token 205: ' z' (ID: 579)
  Prédit: 'z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'z' → logprob: -0.00023107275774236768
    2. ' z' → logprob: -8.37523078918457
    3. '   ' → logprob: -14.87523078918457
    4. '	z' → logprob: -16.00023078918457
    5. ' ' → logprob: -17.37523078918457
    6. ')' → logprob: -17.50023078918457
    7. '
' → logprob: -18.37523078918457
    8. '(z' → logprob: -18.37523078918457
    9. ',z' → logprob: -18.75023078918457
    10. '  ' → logprob: -18.87523078918457

Token 206: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -4.513339445111342e-05
    2. ' ,' → logprob: -10.125044822692871
    3. ',d' → logprob: -12.500044822692871
    4. 'd' → logprob: -14.500044822692871
    5. '   ' → logprob: -14.500044822692871
    6. ',
' → logprob: -16.000045776367188
    7. ')' → logprob: -16.375045776367188
    8. '),' → logprob: -16.750045776367188
    9. '```' → logprob: -17.750045776367188
    10. '‌,' → logprob: -18.750045776367188

Token 207: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.5759534239768982
    2. 'd' → logprob: -0.8259534239768982
    3. ')' → logprob: -11.700953483581543
    4. ')d' → logprob: -12.325953483581543
    5. '	d' → logprob: -14.825953483581543
    6. ' ' → logprob: -14.950953483581543
    7. ' )' → logprob: -14.950953483581543
    8. ' ' → logprob: -16.575952529907227
    9. '   ' → logprob: -16.575952529907227
    10. '_d' → logprob: -17.200952529907227

Token 208: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.38703447580337524
    2. ')' → logprob: -1.1370344161987305
    3. '):
' → logprob: -9.38703441619873
    4. ' or' → logprob: -10.01203441619873
    5. 'or' → logprob: -10.63703441619873
    6. ' ):' → logprob: -12.51203441619873
    7. '   ' → logprob: -13.01203441619873
    8. ':' → logprob: -13.01203441619873
    9. ' )' → logprob: -13.88703441619873
    10. '):

' → logprob: -14.51203441619873

Token 209: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0033121041487902403
    2. 'output' → logprob: -6.628312110900879
    3. ':' → logprob: -7.128312110900879
    4. ':
' → logprob: -7.503312110900879
    5. '(output' → logprob: -8.378312110900879
    6. '   ' → logprob: -9.003312110900879
    7. '):
' → logprob: -9.253312110900879
    8. '
' → logprob: -9.753312110900879
    9. ' output' → logprob: -9.878312110900879
    10. ')' → logprob: -11.003312110900879

Token 210: ' output' (ID: 4733)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.4381308853626251
    2. 'output' (adapté à ' output') → logprob: -1.0631308555603027
    3. ' output' → logprob: -4.813130855560303
    4. '
' → logprob: -7.438130855560303
    5. '(output' → logprob: -7.563130855560303
    6. '        
' → logprob: -10.813131332397461
    7. ')' → logprob: -10.938131332397461
    8. '   ' → logprob: -11.063131332397461
    9. '\n' → logprob: -11.188131332397461
    10. '$output' → logprob: -11.313131332397461

Token 211: '_yes' (ID: 151898)
  Prédit: '_yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_yes' → logprob: -4.644463479053229e-05
    2. '_no' → logprob: -10.375046730041504
    3. '_' → logprob: -11.125046730041504
    4. '_you' → logprob: -15.500046730041504
    5. 'yes' → logprob: -15.875046730041504
    6. '```' → logprob: -17.250045776367188
    7. '_y' → logprob: -17.875045776367188
    8. 'Yes' → logprob: -18.250045776367188
    9. '_is' → logprob: -18.750045776367188
    10. '_here' → logprob: -18.750045776367188

Token 212: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.008615635335445404
    2. '()
' → logprob: -4.758615493774414
    3. '()

' → logprob: -14.508615493774414
    4. '(' → logprob: -15.508615493774414
    5. '()
' → logprob: -15.758615493774414
    6. '()`' → logprob: -15.883615493774414
    7. ' ()' → logprob: -17.008615493774414
    8. '()"' → logprob: -17.383615493774414
    9. '()\' → logprob: -17.383615493774414
    10. '();' → logprob: -17.883615493774414

Token 213: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -8.061054359131958e-06
    2. 'elif' → logprob: -12.500007629394531
    3. '       ' → logprob: -13.250007629394531
    4. 'else' → logprob: -13.625007629394531
    5. ' elif' → logprob: -14.500007629394531
    6. '    
' → logprob: -15.000007629394531
    7. ' else' → logprob: -15.125007629394531
    8. '```' → logprob: -16.62500762939453
    9. '  ' → logprob: -17.75000762939453
    10. '	elif' → logprob: -18.00000762939453

Token 214: ' elif' (ID: 9497)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4917864501476288
    2. 'elif' (adapté à ' elif') → logprob: -0.9917864799499512
    3. ' elif' → logprob: -4.491786479949951
    4. 'else' → logprob: -5.116786479949951
    5. ' else' → logprob: -7.991786479949951
    6. 'el' → logprob: -11.491786003112793
    7. ' ' → logprob: -12.866786003112793
    8. '  ' → logprob: -13.241786003112793
    9. '    
' → logprob: -13.366786003112793
    10. '    ' → logprob: -14.116786003112793

Token 215: ' check' (ID: 2371)
  Prédit: ' check'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' check' → logprob: -0.02975129522383213
    2. 'check' → logprob: -3.5297513008117676
    3. '(check' → logprob: -14.15475082397461
    4. '	check' → logprob: -16.90475082397461
    5. ' ' → logprob: -18.52975082397461
    6. '.check' → logprob: -18.77975082397461
    7. '   ' → logprob: -19.15475082397461
    8. ' ' → logprob: -19.27975082397461
    9. '_check' → logprob: -19.27975082397461
    10. ' not' → logprob: -20.52975082397461

Token 216: '_ind' (ID: 20261)
  Prédit: '_ind'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_ind' → logprob: -5.7053759519476444e-05
    2. '_direct' → logprob: -9.875057220458984
    3. '_' → logprob: -12.375057220458984
    4. '_indent' → logprob: -14.000057220458984
    5. ' _' → logprob: -16.000057220458984
    6. '(_' → logprob: -16.250057220458984
    7. '```' → logprob: -16.875057220458984
    8. '_under' → logprob: -17.250057220458984
    9. '('_' → logprob: -17.375057220458984
    10. '("_' → logprob: -17.750057220458984

Token 217: 'irect' (ID: 1681)
  Prédit: 'irect'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'irect' → logprob: -3.333223139634356e-05
    2. '(' → logprob: -10.750033378601074
    3. '[' → logprob: -12.875033378601074
    4. 'rect' → logprob: -13.375033378601074
    5. '_' → logprob: -13.625033378601074
    6. 'ire' → logprob: -13.875033378601074
    7. '
' → logprob: -13.875033378601074
    8. 'IRECT' → logprob: -14.000033378601074
    9. '`' → logprob: -14.500033378601074
    10. '   ' → logprob: -14.625033378601074

Token 218: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.029773399233818054
    2. '(' → logprob: -3.529773473739624
    3. ' (' → logprob: -10.904773712158203
    4. '(
' → logprob: -12.529773712158203
    5. ')' → logprob: -15.654773712158203
    6. '(X' → logprob: -15.904773712158203
    7. '(y' → logprob: -15.904773712158203
    8. 'x' → logprob: -16.279773712158203
    9. '(

' → logprob: -16.529773712158203
    10. '(xs' → logprob: -17.154773712158203

Token 219: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0002491807099431753
    2. ',y' → logprob: -8.750248908996582
    3. ' ,' → logprob: -9.375248908996582
    4. '   ' → logprob: -13.250248908996582
    5. '(' → logprob: -14.125248908996582
    6. ',
' → logprob: -14.125248908996582
    7. ',x' → logprob: -14.125248908996582
    8. 'y' → logprob: -14.500248908996582
    9. ')' → logprob: -15.000248908996582
    10. '(y' → logprob: -15.125248908996582

Token 220: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.0013269031187519431
    2. ' y' → logprob: -6.626327037811279
    3. 'x' → logprob: -14.751326560974121
    4. '   ' → logprob: -15.126326560974121
    5. ' ' → logprob: -15.626326560974121
    6. '	y' → logprob: -16.626327514648438
    7. ',' → logprob: -16.751327514648438
    8. 'z' → logprob: -17.501327514648438
    9. ',y' → logprob: -18.001327514648438
    10. '  ' → logprob: -18.126327514648438

Token 221: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00010711929644457996
    2. ' ,' → logprob: -9.375106811523438
    3. ',z' → logprob: -11.500106811523438
    4. ',x' → logprob: -12.000106811523438
    5. '   ' → logprob: -12.750106811523438
    6. ',y' → logprob: -14.250106811523438
    7. '```' → logprob: -14.375106811523438
    8. '(x' → logprob: -14.750106811523438
    9. ')' → logprob: -15.000106811523438
    10. 'z' → logprob: -15.625106811523438

Token 222: ' z' (ID: 579)
  Prédit: 'z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'z' → logprob: -6.074907287256792e-05
    2. ' z' → logprob: -10.00006103515625
    3. 'x' → logprob: -11.62506103515625
    4. ',' → logprob: -13.00006103515625
    5. '   ' → logprob: -13.37506103515625
    6. ',z' → logprob: -14.25006103515625
    7. 'y' → logprob: -14.50006103515625
    8. '(z' → logprob: -14.62506103515625
    9. ')' → logprob: -15.12506103515625
    10. '	z' → logprob: -15.62506103515625

Token 223: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0005118065746501088
    2. ',d' → logprob: -7.750511646270752
    3. ' ,' → logprob: -9.50051212310791
    4. 'd' → logprob: -12.25051212310791
    5. ')' → logprob: -14.62551212310791
    6. '   ' → logprob: -15.12551212310791
    7. '),' → logprob: -15.37551212310791
    8. ',
' → logprob: -15.62551212310791
    9. '(d' → logprob: -15.87551212310791
    10. ' d' → logprob: -16.250511169433594

Token 224: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.004622253589332104
    2. ' d' → logprob: -5.379622459411621
    3. '   ' → logprob: -13.254622459411621
    4. ' ' → logprob: -16.254621505737305
    5. ')' → logprob: -17.379621505737305
    6. ',' → logprob: -17.504621505737305
    7. '  ' → logprob: -17.629621505737305
    8. '
' → logprob: -17.879621505737305
    9. 'def' → logprob: -17.879621505737305
    10. '       ' → logprob: -18.004621505737305

Token 225: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.003191970521584153
    2. '):
' → logprob: -5.753191947937012
    3. ':' → logprob: -12.003191947937012
    4. ')' → logprob: -12.003191947937012
    5. '():' → logprob: -13.753191947937012
    6. '   ' → logprob: -14.753191947937012
    7. ' ):' → logprob: -15.378191947937012
    8. '):

' → logprob: -16.128192901611328
    9. '):
' → logprob: -17.128192901611328
    10. '():
' → logprob: -17.128192901611328

Token 226: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0003944496565964073
    2. 'output' → logprob: -7.875394344329834
    3. '(output' → logprob: -11.500394821166992
    4. '   ' → logprob: -13.250394821166992
    5. ' output' → logprob: -13.375394821166992
    6. '	output' → logprob: -15.375394821166992
    7. '
' → logprob: -16.250394821166992
    8. '           ' → logprob: -16.625394821166992
    9. '()' → logprob: -16.625394821166992
    10. '```' → logprob: -16.625394821166992

Token 227: ' output' (ID: 4733)
  Prédit: 'output'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'output' (adapté à ' output') → logprob: -0.003741767955943942
    2. '       ' → logprob: -5.75374174118042
    3. ' output' → logprob: -7.50374174118042
    4. '   ' → logprob: -11.878742218017578
    5. '(output' → logprob: -12.753742218017578
    6. '	output' → logprob: -12.753742218017578
    7. '$output' → logprob: -17.128742218017578
    8. ' ' → logprob: -17.628742218017578
    9. '
' → logprob: -17.628742218017578
    10. '.output' → logprob: -17.753742218017578

Token 228: '_yes' (ID: 151898)
  Prédit: '_yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_yes' → logprob: -0.0031777136027812958
    2. '_no' → logprob: -5.753177642822266
    3. 'Yes' → logprob: -18.003177642822266
    4. 'yes' → logprob: -18.003177642822266
    5. '_' → logprob: -18.628177642822266
    6. '```' → logprob: -19.628177642822266
    7. '_you' → logprob: -20.128177642822266
    8. ' yes' → logprob: -20.503177642822266
    9. '_ok' → logprob: -20.503177642822266
    10. '_y' → logprob: -20.753177642822266

Token 229: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.31328853964805603
    2. '()
' → logprob: -1.3132885694503784
    3. '   ' → logprob: -10.688288688659668
    4. '()
' → logprob: -13.688288688659668
    5. '()

' → logprob: -13.813288688659668
    6. 'else' → logprob: -13.938288688659668
    7. '())' → logprob: -15.313288688659668
    8. '())
' → logprob: -16.06328773498535
    9. '()\' → logprob: -16.06328773498535
    10. '():
' → logprob: -16.18828773498535

Token 230: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0063072387129068375
    2. 'else' → logprob: -5.131307125091553
    3. ' else' → logprob: -7.881307125091553
    4. '	else' → logprob: -14.506307601928711
    5. '<|end|>' → logprob: -16.00630760192871
    6. '_else' → logprob: -16.88130760192871
    7. '  ' → logprob: -17.63130760192871
    8. 'elif' → logprob: -17.75630760192871
    9. ' ' → logprob: -18.13130760192871
    10. '<|end|>' → logprob: -18.38130760192871

Token 231: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.4027361273765564
    2. '   ' → logprob: -1.1527361869812012
    3. ' else' → logprob: -4.152736186981201
    4. '	else' → logprob: -11.027735710144043
    5. '_else' → logprob: -13.652735710144043
    6. ' ' → logprob: -14.902735710144043
    7. 'elser' → logprob: -15.027735710144043
    8. '```' → logprob: -15.527735710144043
    9. '  ' → logprob: -16.02773666381836
    10. 'elif' → logprob: -17.27773666381836

Token 232: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.016052667051553726
    2. ':
' → logprob: -4.141052722930908
    3. '   ' → logprob: -11.76605224609375
    4. '():' → logprob: -12.51605224609375
    5. '():
' → logprob: -12.76605224609375
    6. '       ' → logprob: -13.14105224609375
    7. ' :' → logprob: -14.64105224609375
    8. '(' → logprob: -14.89105224609375
    9. ':

' → logprob: -15.26605224609375
    10. ' :
' → logprob: -15.51605224609375

Token 233: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -7.3458322731312364e-06
    2. '   ' → logprob: -12.500007629394531
    3. 'output' → logprob: -12.625007629394531
    4. ' output' → logprob: -15.375007629394531
    5. '     ' → logprob: -18.50000762939453
    6. '           ' → logprob: -19.12500762939453
    7. '      ' → logprob: -19.37500762939453
    8. '    ' → logprob: -20.25000762939453
    9. '    ' → logprob: -20.25000762939453
    10. '	output' → logprob: -20.37500762939453

Token 234: ' output' (ID: 4733)
  Prédit: 'output'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'output' (adapté à ' output') → logprob: -0.002476135268807411
    2. ' output' → logprob: -6.002476215362549
    3. '       ' → logprob: -14.75247573852539
    4. '   ' → logprob: -16.00247573852539
    5. '	output' → logprob: -18.50247573852539
    6. '(output' → logprob: -19.62747573852539
    7. '_output' → logprob: -21.12747573852539
    8. ' ' → logprob: -21.50247573852539
    9. '.output' → logprob: -21.50247573852539
    10. '$output' → logprob: -22.12747573852539

Token 235: '_no' (ID: 13575)
  Prédit: '_no'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_no' → logprob: 0.0
    2. '_n' → logprob: -18.5
    3. '_' → logprob: -18.75
    4. '_none' → logprob: -19.5
    5. '_NO' → logprob: -19.625
    6. '_No' → logprob: -20.875
    7. 'no' → logprob: -21.0
    8. 'No' → logprob: -21.25
    9. '_false' → logprob: -21.5
    10. '_yes' → logprob: -21.5

Token 236: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0005614925175905228
    2. '()
' → logprob: -7.500561714172363
    3. '(' → logprob: -12.375561714172363
    4. '()

' → logprob: -13.375561714172363
    5. '()\' → logprob: -14.125561714172363
    6. '()`' → logprob: -14.375561714172363
    7. ' ()' → logprob: -14.500561714172363
    8. '()"' → logprob: -15.500561714172363
    9. '()<' → logprob: -15.750561714172363
    10. '()
' → logprob: -15.875561714172363

Token 237: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.07946226745843887
    2. 'main' → logprob: -2.5794622898101807
    3. '
' → logprob: -7.579462051391602
    4. '\n' → logprob: -10.454462051391602
    5. '(main' → logprob: -11.454462051391602
    6. '```' → logprob: -11.454462051391602
    7. ' if' → logprob: -12.204462051391602
    8. ' main' → logprob: -12.829462051391602
    9. '\' → logprob: -13.579462051391602
    10. '#' → logprob: -13.704462051391602

Token 238: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.004095143172889948
    2. '(' → logprob: -5.504095077514648
    3. '()
' → logprob: -11.754095077514648
    4. '()`' → logprob: -13.129095077514648
    5. '();' → logprob: -13.504095077514648
    6. ' ()' → logprob: -13.754095077514648
    7. '(
' → logprob: -14.004095077514648
    8. '#' → logprob: -14.379095077514648
    9. '()">' → logprob: -14.379095077514648
    10. '()"' → logprob: -14.629095077514648


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 236
Tokens correctement prédits (1ère position, stricte): 118
Tokens correctement prédits (1ère position, avec adaptation): 132
Tokens correctement prédits (top 10): 210
Précision stricte (1ère position): 50.00%
Précision adaptée (1ère position): 55.93%
Précision (top 10): 88.98%
================================================================================
