================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:52:23
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
NAB = input().split()
N = int(NAB[0])
A = int(NAB[1])
B = int(NAB[2])

cost = A * N
if cost < B:
    print(cost)
else:
    print(B)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: 'AB' (ID: 2912)
  → Token d'amorce (pas de prédiction)

Token 2: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 3: ' input' (ID: 3422)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.20004676282405853
    2. ''' → logprob: -2.3250467777252197
    3. ' ' → logprob: -3.0750467777252197
    4. '[' → logprob: -4.450046539306641
    5. '`' → logprob: -5.575046539306641
    6. ' []' → logprob: -5.575046539306641
    7. ' "' → logprob: -5.575046539306641
    8. '[]' → logprob: -5.950046539306641
    9. '  ' → logprob: -6.450046539306641
    10. '32' → logprob: -6.575046539306641

Token 4: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006405789405107498
    2. '.' → logprob: -5.881405830383301
    3. '[' → logprob: -5.881405830383301
    4. ''' → logprob: -8.3814058303833
    5. '('' → logprob: -9.1314058303833
    6. '(
' → logprob: -9.2564058303833
    7. '"' → logprob: -9.5064058303833
    8. '("("' → logprob: -10.0064058303833
    9. ' (' → logprob: -10.2564058303833
    10. '()' → logprob: -10.5064058303833

Token 5: 'split' (ID: 13627)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0349939726293087
    2. '+' → logprob: -3.784993886947632
    3. '(' → logprob: -5.409994125366211
    4. '.strip' → logprob: -6.534994125366211
    5. '*' → logprob: -6.659994125366211
    6. '()' → logprob: -6.659994125366211
    7. ')' → logprob: -6.659994125366211
    8. '=' → logprob: -7.909994125366211
    9. ' ' → logprob: -8.034994125366211
    10. '#' → logprob: -8.534994125366211

Token 6: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0012109491508454084
    2. '()' → logprob: -7.251211166381836
    3. '("("' → logprob: -8.376211166381836
    4. '('' → logprob: -8.501211166381836
    5. '((' → logprob: -10.751211166381836
    6. '(
' → logprob: -11.751211166381836
    7. '(`' → logprob: -12.001211166381836
    8. '(

' → logprob: -12.001211166381836
    9. '`' → logprob: -12.001211166381836
    10. '```' → logprob: -12.501211166381836

Token 7: 'N' (ID: 45)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.5220738649368286
    2. 'for' → logprob: -1.3970738649368286
    3. 'if' → logprob: -3.397073745727539
    4. 'N' → logprob: -3.397073745727539
    5. 'n' → logprob: -3.772073745727539
    6. 'a' → logprob: -4.022073745727539
    7. 'print' → logprob: -4.272073745727539
    8. 'x' → logprob: -4.772073745727539
    9. '#' → logprob: -5.147073745727539
    10. 'A' → logprob: -5.272073745727539

Token 8: ' =' (ID: 314)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.746553897857666
    2. '[' → logprob: -0.871553897857666
    3. '_' → logprob: -2.746553897857666
    4. 'AB' → logprob: -3.996553897857666
    5. 'B' → logprob: -4.621553897857666
    6. '<|end|>' → logprob: -5.871553897857666
    7. '[A' → logprob: -6.621553897857666
    8. '_A' → logprob: -6.621553897857666
    9. '  ' → logprob: -6.746553897857666
    10. '.' → logprob: -6.871553897857666

Token 9: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.22553515434265137
    2. ' int' → logprob: -1.6005351543426514
    3. 'len' → logprob: -10.35053539276123
    4. '[int' → logprob: -10.72553539276123
    5. ' ' → logprob: -10.85053539276123
    6. 'N' → logprob: -11.10053539276123
    7. '(int' → logprob: -11.60053539276123
    8. ' len' → logprob: -11.72553539276123
    9. '=int' → logprob: -12.22553539276123
    10. ' NAB' → logprob: -13.10053539276123

Token 10: '(N' (ID: 10564)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.043134842067956924
    2. '(N' → logprob: -3.168134927749634
    3. '('' → logprob: -9.418134689331055
    4. '()' → logprob: -10.668134689331055
    5. '("("' → logprob: -11.543134689331055
    6. '(`' → logprob: -12.043134689331055
    7. '(
' → logprob: -12.293134689331055
    8. '(

' → logprob: -12.418134689331055
    9. '(B' → logprob: -14.043134689331055
    10. '("' → logprob: -14.293134689331055

Token 11: 'AB' (ID: 2912)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.850271463394165
    2. 'B' → logprob: -1.475271463394165
    3. ')' → logprob: -1.600271463394165
    4. 'AB' → logprob: -1.975271463394165
    5. 'A' → logprob: -6.475271224975586
    6. '_AB' → logprob: -7.475271224975586
    7. ' ' → logprob: -8.600271224975586
    8. '_B' → logprob: -8.725271224975586
    9. ' )' → logprob: -9.100271224975586
    10. 'BA' → logprob: -9.225271224975586

Token 12: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0009747094009071589
    2. '[N' → logprob: -7.125974655151367
    3. ')' → logprob: -8.750974655151367
    4. '[
' → logprob: -12.125974655151367
    5. '['' → logprob: -12.875974655151367
    6. '[A' → logprob: -14.000974655151367
    7. '```' → logprob: -14.625974655151367
    8. '[]' → logprob: -15.125974655151367
    9. '[B' → logprob: -15.250974655151367
    10. '\[' → logprob: -15.250974655151367

Token 13: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -8.327856630785391e-05
    2. '1' → logprob: -9.875082969665527
    3. ''' → logprob: -10.625082969665527
    4. '2' → logprob: -12.250082969665527
    5. ' ' → logprob: -13.375082969665527
    6. '"' → logprob: -14.250082969665527
    7. '```' → logprob: -15.875082969665527
    8. '`' → logprob: -16.000083923339844
    9. '   ' → logprob: -17.000083923339844
    10. ')' → logprob: -17.000083923339844

Token 14: '])
' (ID: 5169)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002555092331022024
    2. '])' → logprob: -6.377554893493652
    3. ' )' → logprob: -7.627554893493652
    4. ']' → logprob: -8.752554893493652
    5. ')]' → logprob: -9.502554893493652
    6. ')
' → logprob: -10.502554893493652
    7. ' ])' → logprob: -10.752554893493652
    8. ')])' → logprob: -11.002554893493652
    9. '[' → logprob: -11.127554893493652
    10. '`)' → logprob: -11.752554893493652

Token 15: 'A' (ID: 32)
  Prédit: 'A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.377903014421463
    2. 'M' → logprob: -1.3779029846191406
    3. 'B' → logprob: -2.8779029846191406
    4. 'K' → logprob: -5.752902984619141
    5. ' A' → logprob: -7.252902984619141
    6. ',' → logprob: -7.377902984619141
    7. 'a' → logprob: -8.00290298461914
    8. 'space' → logprob: -8.25290298461914
    9. ' M' → logprob: -8.62790298461914
    10. '<|end|>' → logprob: -8.75290298461914

Token 16: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.14994807541370392
    2. ' =' → logprob: -2.1499481201171875
    3. '=' → logprob: -4.6499481201171875
    4. '[' → logprob: -5.1499481201171875
    5. ',' → logprob: -5.2749481201171875
    6. ' ' → logprob: -7.7749481201171875
    7. '_=' → logprob: -8.524948120117188
    8. 'B' → logprob: -8.649948120117188
    9. ')' → logprob: -8.899948120117188
    10. '<|end|>' → logprob: -9.024948120117188

Token 17: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.13328327238559723
    2. ' int' → logprob: -2.1332833766937256
    3. 'input' → logprob: -5.3832831382751465
    4. ' input' → logprob: -7.5082831382751465
    5. 'list' → logprob: -7.5082831382751465
    6. '[int' → logprob: -8.008283615112305
    7. ' list' → logprob: -9.008283615112305
    8. 'N' → logprob: -9.258283615112305
    9. '[]' → logprob: -10.133283615112305
    10. ' N' → logprob: -10.758283615112305

Token 18: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.16038741171360016
    2. '(' → logprob: -1.910387396812439
    3. '(A' → logprob: -9.41038703918457
    4. '('' → logprob: -10.53538703918457
    5. '("("' → logprob: -11.41038703918457
    6. '(

' → logprob: -11.53538703918457
    7. '((' → logprob: -11.66038703918457
    8. '(`' → logprob: -12.03538703918457
    9. ' (' → logprob: -12.66038703918457
    10. '(
' → logprob: -12.78538703918457

Token 19: 'AB' (ID: 2912)
  Prédit: 'AB'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'AB' → logprob: -0.001441899803467095
    2. 'B' → logprob: -7.001441955566406
    3. '[' → logprob: -8.001441955566406
    4. 'A' → logprob: -9.376441955566406
    5. ')' → logprob: -9.501441955566406
    6. '_AB' → logprob: -11.751441955566406
    7. 'ab' → logprob: -11.876441955566406
    8. '[A' → logprob: -12.126441955566406
    9. ' AB' → logprob: -12.626441955566406
    10. ']' → logprob: -13.251441955566406

Token 20: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.00010568885772954673
    2. 'B' → logprob: -9.375105857849121
    3. '1' → logprob: -11.125105857849121
    4. ')' → logprob: -13.125105857849121
    5. '```' → logprob: -13.750105857849121
    6. ' [' → logprob: -14.000105857849121
    7. '[B' → logprob: -14.375105857849121
    8. '(' → logprob: -14.375105857849121
    9. ' ' → logprob: -15.625105857849121
    10. '\[' → logprob: -15.750105857849121

Token 21: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.5213274309644476e-05
    2. '2' → logprob: -11.625015258789062
    3. ' ' → logprob: -12.875015258789062
    4. '0' → logprob: -13.000015258789062
    5. '])' → logprob: -13.625015258789062
    6. '```' → logprob: -16.000015258789062
    7. ']' → logprob: -17.000015258789062
    8. '   ' → logprob: -17.562515258789062
    9. ')' → logprob: -17.750015258789062
    10. '3' → logprob: -18.000015258789062

Token 22: '])
' (ID: 5169)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.013392206281423569
    2. '])' → logprob: -4.513391971588135
    3. ']' → logprob: -6.263391971588135
    4. '[' → logprob: -9.013392448425293
    5. ')
' → logprob: -9.763392448425293
    6. ')]' → logprob: -9.888392448425293
    7. '`)' → logprob: -10.138392448425293
    8. '）' → logprob: -10.263392448425293
    9. ''])' → logprob: -10.388392448425293
    10. ')])' → logprob: -10.513392448425293

Token 23: 'B' (ID: 33)
  Prédit: 'B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.0040140533819794655
    2. ' B' → logprob: -5.629014015197754
    3. 'N' → logprob: -8.629014015197754
    4. ' ' → logprob: -9.254014015197754
    5. ',' → logprob: -10.129014015197754
    6. ' 
' → logprob: -10.254014015197754
    7. '[' → logprob: -11.254014015197754
    8. ')' → logprob: -11.379014015197754
    9. '#' → logprob: -11.629014015197754
    10. '```' → logprob: -12.879014015197754

Token 24: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.058058273047208786
    2. ')' → logprob: -3.183058261871338
    3. '=' → logprob: -5.183058261871338
    4. '<|end|>' → logprob: -5.558058261871338
    5. ''' → logprob: -6.058058261871338
    6. ' =' → logprob: -6.808058261871338
    7. ']' → logprob: -7.933058261871338
    8. ' ' → logprob: -8.058058738708496
    9. '```' → logprob: -8.308058738708496
    10. '<|end|>' → logprob: -8.308058738708496

Token 25: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.2519373297691345
    2. 'int' → logprob: -1.5019373893737793
    3. ' ' → logprob: -12.751936912536621
    4. ' N' → logprob: -12.751936912536621
    5. 'N' → logprob: -14.126936912536621
    6. '=int' → logprob: -15.001936912536621
    7. ' A' → logprob: -15.126936912536621
    8. '(int' → logprob: -15.376936912536621
    9. ' in' → logprob: -15.626936912536621
    10. '0' → logprob: -16.001937866210938

Token 26: '(N' (ID: 10564)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07031696289777756
    2. '(N' → logprob: -2.695317029953003
    3. '(B' → logprob: -8.570317268371582
    4. '(A' → logprob: -9.320317268371582
    5. '('' → logprob: -10.070317268371582
    6. '`' → logprob: -11.820317268371582
    7. ' (' → logprob: -11.945317268371582
    8. '((' → logprob: -11.945317268371582
    9. '(n' → logprob: -12.070317268371582
    10. '"' → logprob: -12.195317268371582

Token 27: 'AB' (ID: 2912)
  Prédit: 'AB'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'AB' → logprob: -0.0008717980235815048
    2. 'A' → logprob: -7.625871658325195
    3. '[' → logprob: -8.125871658325195
    4. 'B' → logprob: -10.000871658325195
    5. ')' → logprob: -10.500871658325195
    6. '2' → logprob: -12.500871658325195
    7. '[A' → logprob: -12.500871658325195
    8. '_AB' → logprob: -13.500871658325195
    9. 'ab' → logprob: -13.500871658325195
    10. '1' → logprob: -13.750871658325195

Token 28: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -7.922563963802531e-05
    2. '2' → logprob: -9.500079154968262
    3. ')' → logprob: -12.875079154968262
    4. ')[' → logprob: -15.000079154968262
    5. '[
' → logprob: -15.125079154968262
    6. '(' → logprob: -15.125079154968262
    7. '```' → logprob: -15.250079154968262
    8. '][' → logprob: -15.375079154968262
    9. ']' → logprob: -15.500079154968262
    10. '])' → logprob: -16.375080108642578

Token 29: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -3.128163257315464e-07
    2. '])' → logprob: -16.25
    3. ' ' → logprob: -16.5
    4. '0' → logprob: -17.375
    5. '```' → logprob: -17.625
    6. '1' → logprob: -17.875
    7. '[' → logprob: -18.125
    8. '   ' → logprob: -19.0
    9. '-' → logprob: -19.25
    10. ']' → logprob: -19.5

Token 30: '])

' (ID: 21045)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -7.896309739408025e-07
    2. '）' → logprob: -15.500000953674316
    3. '')' → logprob: -15.750000953674316
    4. ']' → logprob: -15.875000953674316
    5. '`)' → logprob: -16.625
    6. ' )' → logprob: -16.625
    7. '))' → logprob: -16.625
    8. ')#' → logprob: -17.25
    9. ')
' → logprob: -17.375
    10. '#' → logprob: -17.5

Token 31: 'cost' (ID: 33457)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.8099750280380249
    2. 's' → logprob: -1.434975028038025
    3. 'for' → logprob: -2.9349751472473145
    4. 'S' → logprob: -3.4349751472473145
    5. 'a' → logprob: -3.4349751472473145
    6. 'sum' → logprob: -3.8099751472473145
    7. 'total' → logprob: -3.8099751472473145
    8. 'n' → logprob: -3.9349751472473145
    9. 'x' → logprob: -4.0599751472473145
    10. 'count' → logprob: -4.1849751472473145

Token 32: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.8103845715522766
    2. '_' → logprob: -1.0603845119476318
    3. 's' → logprob: -2.060384511947632
    4. '=' → logprob: -2.935384511947632
    5. '[' → logprob: -3.810384511947632
    6. '_sum' → logprob: -6.435384750366211
    7. '(' → logprob: -6.560384750366211
    8. ' ' → logprob: -6.935384750366211
    9. '_s' → logprob: -7.185384750366211
    10. '_total' → logprob: -8.185384750366211

Token 33: ' A' (ID: 355)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.18052197992801666
    2. '[]' → logprob: -3.1805219650268555
    3. 'A' → logprob: -3.3055219650268555
    4. ' ' → logprob: -3.6805219650268555
    5. 'min' → logprob: -4.1805219650268555
    6. 'N' → logprob: -4.3055219650268555
    7. '100' → logprob: -4.6805219650268555
    8. ' A' → logprob: -5.4305219650268555
    9. 'float' → logprob: -5.4305219650268555
    10. ' []' → logprob: -5.6805219650268555

Token 34: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.2932858467102051
    2. '+' → logprob: -1.418285846710205
    3. ' *' → logprob: -4.668285846710205
    4. ' +' → logprob: -7.668285846710205
    5. 'for' → logprob: -8.168285369873047
    6. 'if' → logprob: -8.293285369873047
    7. '<|end|>' → logprob: -8.293285369873047
    8. ' ' → logprob: -8.418285369873047
    9. '*N' → logprob: -8.543285369873047
    10. '*n' → logprob: -8.543285369873047

Token 35: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.00424294313415885
    2. ' N' → logprob: -5.879242897033691
    3. '100' → logprob: -7.879242897033691
    4. 'B' → logprob: -8.254242897033691
    5. '1' → logprob: -8.629242897033691
    6. '10' → logprob: -9.004242897033691
    7. ' ' → logprob: -9.129242897033691
    8. '2' → logprob: -9.254242897033691
    9. '(N' → logprob: -9.754242897033691
    10. '5' → logprob: -10.379242897033691

Token 36: '
' (ID: 198)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.030359527096152306
    2. ' +' → logprob: -3.7803595066070557
    3. '*' → logprob: -5.655359745025635
    4. 'if' → logprob: -6.905359745025635
    5. '-' → logprob: -7.030359745025635
    6. ' ' → logprob: -7.280359745025635
    7. '<|end|>' → logprob: -8.030359268188477
    8. ')' → logprob: -9.405359268188477
    9. ' if' → logprob: -9.530359268188477
    10. 'for' → logprob: -9.905359268188477

Token 37: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.604712724685669
    2. '\n' → logprob: -1.729712724685669
    3. '+' → logprob: -1.979712724685669
    4. ' if' → logprob: -2.979712724685669
    5. '
' → logprob: -3.479712724685669
    6. '\' → logprob: -4.22971248626709
    7. '' → logprob: -4.72971248626709
    8. '*' → logprob: -5.10471248626709
    9. 'for' → logprob: -5.60471248626709
    10. ' +' → logprob: -5.85471248626709

Token 38: ' cost' (ID: 3097)
  Prédit: ' cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cost' → logprob: -0.7933428287506104
    2. ' B' → logprob: -1.4183428287506104
    3. ' N' → logprob: -1.6683428287506104
    4. 'N' → logprob: -3.1683428287506104
    5. 'cost' → logprob: -3.2933428287506104
    6. 'B' → logprob: -3.5433428287506104
    7. ' ' → logprob: -5.168342590332031
    8. ' A' → logprob: -7.043342590332031
    9. ' (' → logprob: -7.293342590332031
    10. '(cost' → logprob: -8.543342590332031

Token 39: ' <' (ID: 464)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.5793736577033997
    2. '>' → logprob: -0.8293736577033997
    3. ' >=' → logprob: -6.329373836517334
    4. '>=' → logprob: -6.829373836517334
    5. '>B' → logprob: -9.079373359680176
    6. '<' → logprob: -9.079373359680176
    7. ' <' → logprob: -9.579373359680176
    8. ' <=' → logprob: -9.579373359680176
    9. ' ' → logprob: -9.829373359680176
    10. '<=' → logprob: -10.204373359680176

Token 40: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.006806910037994385
    2. ' B' → logprob: -5.00680685043335
    3. '100' → logprob: -10.756807327270508
    4. '=' → logprob: -11.131807327270508
    5. ' ' → logprob: -11.256807327270508
    6. '=B' → logprob: -11.381807327270508
    7. '	B' → logprob: -12.256807327270508
    8. '10' → logprob: -12.506807327270508
    9. '>B' → logprob: -12.506807327270508
    10. '(' → logprob: -13.381807327270508

Token 41: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0008932363707572222
    2. ' :' → logprob: -7.1258931159973145
    3. '*' → logprob: -9.625893592834473
    4. ' *' → logprob: -11.500893592834473
    5. '*:' → logprob: -11.750893592834473
    6. '*N' → logprob: -14.375893592834473
    7. ':
' → logprob: -14.500893592834473
    8. ' and' → logprob: -14.625893592834473
    9. '.' → logprob: -14.875893592834473
    10. '):' → logprob: -15.000893592834473

Token 42: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.1520594209432602
    2. 'cost' → logprob: -2.277059316635132
    3. ' cost' → logprob: -3.902059316635132
    4. ' print' → logprob: -4.527059555053711
    5. '
' → logprob: -5.527059555053711
    6. '   ' → logprob: -6.277059555053711
    7. '\n' → logprob: -6.902059555053711
    8. '(cost' → logprob: -8.527059555053711
    9. ':' → logprob: -9.527059555053711
    10. ')' → logprob: -9.652059555053711

Token 43: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.029899979010224342
    2. 'cost' → logprob: -3.529900074005127
    3. ' print' → logprob: -9.154899597167969
    4. ' cost' → logprob: -10.529899597167969
    5. 'pr' → logprob: -11.779899597167969
    6. '   ' → logprob: -12.029899597167969
    7. 'result' → logprob: -14.279899597167969
    8. 'price' → logprob: -14.529899597167969
    9. '(cost' → logprob: -14.654899597167969
    10. '```' → logprob: -15.154899597167969

Token 44: '(cost' (ID: 133554)
  Prédit: '(cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(cost' → logprob: -0.0077567496336996555
    2. '(' → logprob: -4.88275671005249
    3. 'cost' → logprob: -8.882757186889648
    4. '(A' → logprob: -11.632757186889648
    5. ' cost' → logprob: -14.507757186889648
    6. '(N' → logprob: -14.507757186889648
    7. '(c' → logprob: -14.882757186889648
    8. '(price' → logprob: -15.007757186889648
    9. '()' → logprob: -15.507757186889648
    10. ' (' → logprob: -15.757757186889648

Token 45: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0007187459850683808
    2. ')
' → logprob: -7.500718593597412
    3. 'else' → logprob: -8.75071907043457
    4. ' else' → logprob: -12.37571907043457
    5. ' )' → logprob: -13.00071907043457
    6. '')' → logprob: -16.12571907043457
    7. '))' → logprob: -16.25071907043457
    8. '```' → logprob: -16.50071907043457
    9. '")' → logprob: -16.75071907043457
    10. '*' → logprob: -16.75071907043457

Token 46: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0017111169872805476
    2. ' else' → logprob: -6.376710891723633
    3. '<|end|>' → logprob: -12.751710891723633
    4. 'elif' → logprob: -12.876710891723633
    5. ')' → logprob: -13.251710891723633
    6. '_else' → logprob: -13.876710891723633
    7. '	else' → logprob: -15.751710891723633
    8. '```' → logprob: -16.001710891723633
    9. '#else' → logprob: -16.251710891723633
    10. '    
' → logprob: -17.001710891723633

Token 47: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0001637300301808864
    2. ' :' → logprob: -9.125164031982422
    3. '   ' → logprob: -10.375164031982422
    4. ':
' → logprob: -11.000164031982422
    5. 'print' → logprob: -12.500164031982422
    6. ' print' → logprob: -13.500164031982422
    7. '():' → logprob: -14.750164031982422
    8. ',' → logprob: -15.625164031982422
    9. '[' → logprob: -15.750164031982422
    10. '```' → logprob: -16.125164031982422

Token 48: '   ' (ID: 271)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.01170783955603838
    2. '   ' → logprob: -4.886707782745361
    3. 'print' → logprob: -5.636707782745361
    4. ' B' → logprob: -7.636707782745361
    5. '	B' → logprob: -10.51170825958252
    6. ' ' → logprob: -12.76170825958252
    7. ' print' → logprob: -12.88670825958252
    8. '    
' → logprob: -13.01170825958252
    9. '```' → logprob: -13.38670825958252
    10. '(B' → logprob: -13.51170825958252

Token 49: ' print' (ID: 2123)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.00978678185492754
    2. 'print' (adapté à ' print') → logprob: -4.634786605834961
    3. ' B' → logprob: -10.634786605834961
    4. '   ' → logprob: -12.259786605834961
    5. ' print' → logprob: -14.009786605834961
    6. ' ' → logprob: -15.634786605834961
    7. '(' → logprob: -15.884786605834961
    8. 'printf' → logprob: -15.884786605834961
    9. '```' → logprob: -16.13478660583496
    10. '	B' → logprob: -16.38478660583496

Token 50: '(B' (ID: 8409)
  Prédit: '(B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(B' → logprob: -0.011070695705711842
    2. '(' → logprob: -4.511070728302002
    3. '((' → logprob: -11.261070251464844
    4. 'B' → logprob: -11.761070251464844
    5. '()' → logprob: -14.386070251464844
    6. ' (' → logprob: -14.636070251464844
    7. '('' → logprob: -15.011070251464844
    8. '(b' → logprob: -15.386070251464844
    9. '(N' → logprob: -15.761070251464844
    10. '(A' → logprob: -15.886070251464844

Token 51: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.896309739408025e-07
    2. '))' → logprob: -14.750000953674316
    3. ' )' → logprob: -15.750000953674316
    4. ')
' → logprob: -16.375
    5. ')`' → logprob: -17.125
    6. '`)' → logprob: -17.75
    7. '）' → logprob: -18.25
    8. '')' → logprob: -18.625
    9. ')")' → logprob: -19.0
    10. '```' → logprob: -19.25


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 49
Tokens correctement prédits (1ère position, stricte): 19
Tokens correctement prédits (1ère position, avec adaptation): 20
Tokens correctement prédits (top 10): 39
Précision stricte (1ère position): 38.78%
Précision adaptée (1ère position): 40.82%
Précision (top 10): 79.59%
================================================================================
