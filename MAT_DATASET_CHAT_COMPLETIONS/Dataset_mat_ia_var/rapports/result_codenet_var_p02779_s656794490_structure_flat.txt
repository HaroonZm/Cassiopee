================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:26:59
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N = int(input())
A = list(map(int, input().split()))
A.sort()
res = "YES"
for i in range(N-1):
    if A[i] == A[i+1]:
        res = "NO"
print(res)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0003567959647625685
    2. '(N' → logprob: -9.000356674194336
    3. '('' → logprob: -9.500356674194336
    4. ''' → logprob: -9.875356674194336
    5. '`' → logprob: -10.500356674194336
    6. '```' → logprob: -10.500356674194336
    7. '("("' → logprob: -11.375356674194336
    8. '()' → logprob: -11.500356674194336
    9. '(input' → logprob: -11.625356674194336
    10. '(
' → logprob: -12.250356674194336

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2323538064956665
    2. ')' → logprob: -1.6073538064956665
    3. '()' → logprob: -5.232353687286377
    4. '())' → logprob: -7.107353687286377
    5. '(
' → logprob: -8.232354164123535
    6. '```' → logprob: -9.357354164123535
    7. '(

' → logprob: -10.107354164123535
    8. '))' → logprob: -10.107354164123535
    9. '")' → logprob: -10.607354164123535
    10. '("("' → logprob: -10.732354164123535

Token 5: 'A' (ID: 32)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.35095393657684326
    2. 'if' → logprob: -1.4759539365768433
    3. 'x' → logprob: -4.350954055786133
    4. 's' → logprob: -4.475954055786133
    5. 'i' → logprob: -4.600954055786133
    6. 'a' → logprob: -5.225954055786133
    7. 'f' → logprob: -5.850954055786133
    8. 'print' → logprob: -6.100954055786133
    9. 'result' → logprob: -6.100954055786133
    10. '`' → logprob: -6.225954055786133

Token 6: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0009187239338643849
    2. '\[' → logprob: -8.2509183883667
    3. '[]' → logprob: -8.3759183883667
    4. '[A' → logprob: -9.2509183883667
    5. '[:]' → logprob: -9.2509183883667
    6. '[i' → logprob: -9.6259183883667
    7. '.' → logprob: -9.8759183883667
    8. '[a' → logprob: -10.7509183883667
    9. '=' → logprob: -11.2509183883667
    10. '[...]' → logprob: -11.2509183883667

Token 7: ' list' (ID: 1562)
  Prédit: ' list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.5184847712516785
    2. 'list' → logprob: -1.5184848308563232
    3. ' []' → logprob: -2.2684848308563232
    4. '[]' → logprob: -2.8934848308563232
    5. ' [' → logprob: -3.8934848308563232
    6. '[' → logprob: -5.518484592437744
    7. '[input' → logprob: -7.018484592437744
    8. '[list' → logprob: -7.518484592437744
    9. '[int' → logprob: -7.643484592437744
    10. 'input' → logprob: -8.643485069274902

Token 8: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00011546355381142348
    2. '```' → logprob: -10.250115394592285
    3. ' (' → logprob: -10.875115394592285
    4. '(
' → logprob: -11.000115394592285
    5. '(range' → logprob: -11.375115394592285
    6. '[' → logprob: -11.875115394592285
    7. '("("' → logprob: -12.375115394592285
    8. ')' → logprob: -12.625115394592285
    9. ''s' → logprob: -12.875115394592285
    10. '`' → logprob: -13.375115394592285

Token 9: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.719504177570343
    2. '(int' → logprob: -0.719504177570343
    3. '(str' → logprob: -3.9695041179656982
    4. '(input' → logprob: -5.219504356384277
    5. '(lambda' → logprob: -7.469504356384277
    6. ')' → logprob: -7.719504356384277
    7. '(
' → logprob: -8.969504356384277
    8. 'int' → logprob: -9.094504356384277
    9. '(eval' → logprob: -9.094504356384277
    10. '```' → logprob: -9.344504356384277

Token 10: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.19793032109737396
    2. '(' → logprob: -1.8229303359985352
    3. ',input' → logprob: -4.822930335998535
    4. ',' → logprob: -5.322930335998535
    5. '))' → logprob: -5.822930335998535
    6. ')' → logprob: -7.197930335998535
    7. '(int' → logprob: -8.322930335998535
    8. '<|end|>' → logprob: -8.947930335998535
    9. '(eval' → logprob: -9.072930335998535
    10. 'input' → logprob: -9.197930335998535

Token 11: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.0789729580283165
    2. ' input' → logprob: -2.5789730548858643
    3. '(input' → logprob: -9.453972816467285
    4. ',input' → logprob: -12.578972816467285
    5. ')' → logprob: -14.828972816467285
    6. '=input' → logprob: -14.953972816467285
    7. '<input' → logprob: -15.453972816467285
    8. ' ' → logprob: -15.703972816467285
    9. '	input' → logprob: -15.953972816467285
    10. '```' → logprob: -15.953972816467285

Token 12: '().' (ID: 1454)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.8688179850578308
    2. '())' → logprob: -1.1188180446624756
    3. '()' → logprob: -1.4938180446624756
    4. '().' → logprob: -3.7438180446624756
    5. '(' → logprob: -6.3688178062438965
    6. ')' → logprob: -6.4938178062438965
    7. '()));' → logprob: -6.8688178062438965
    8. '))' → logprob: -7.6188178062438965
    9. '()>' → logprob: -8.368818283081055
    10. '(),' → logprob: -8.993818283081055

Token 13: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00044103997061029077
    2. 'strip' → logprob: -7.750441074371338
    3. 'rstrip' → logprob: -11.62544059753418
    4. ' split' → logprob: -13.62544059753418
    5. '(split' → logprob: -15.75044059753418
    6. ')' → logprob: -16.87544059753418
    7. 'spl' → logprob: -17.12544059753418
    8. 'replace' → logprob: -18.50044059753418
    9. 'read' → logprob: -19.12544059753418
    10. 'startswith' → logprob: -19.25044059753418

Token 14: '()))
' (ID: 24521)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.5542117953300476
    2. '()))' → logprob: -1.0542118549346924
    3. ')' → logprob: -2.9292118549346924
    4. '())' → logprob: -4.054211616516113
    5. '()' → logprob: -5.929211616516113
    6. '(' → logprob: -6.054211616516113
    7. '('' → logprob: -7.804211616516113
    8. ''))' → logprob: -7.804211616516113
    9. ')))' → logprob: -8.679211616516113
    10. '())))' → logprob: -9.929211616516113

Token 15: 'A' (ID: 32)
  Prédit: 'A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.15198221802711487
    2. 'dp' → logprob: -2.776982307434082
    3. 's' → logprob: -3.776982307434082
    4. 'for' → logprob: -4.901982307434082
    5. 'count' → logprob: -4.901982307434082
    6. 'sum' → logprob: -5.151982307434082
    7. 'result' → logprob: -5.151982307434082
    8. 'max' → logprob: -5.526982307434082
    9. 'print' → logprob: -6.026982307434082
    10. 'ans' → logprob: -6.151982307434082

Token 16: '.sort' (ID: 19551)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.06367558985948563
    2. '.' → logprob: -3.18867564201355
    3. '```' → logprob: -4.563675403594971
    4. '<|end|>' → logprob: -5.688675403594971
    5. '\[' → logprob: -5.813675403594971
    6. '[
' → logprob: -7.813675403594971
    7. '#' → logprob: -7.938675403594971
    8. '\n' → logprob: -8.063675880432129
    9. ')' → logprob: -8.063675880432129
    10. '[:]' → logprob: -8.063675880432129

Token 17: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.314220666885376
    2. '(' → logprob: -1.314220666885376
    3. '())' → logprob: -7.439220428466797
    4. '(()' → logprob: -8.939220428466797
    5. '((' → logprob: -9.939220428466797
    6. '()`' → logprob: -10.314220428466797
    7. '(
' → logprob: -10.939220428466797
    8. '('' → logprob: -11.064220428466797
    9. '("("' → logprob: -11.314220428466797
    10. '`()' → logprob: -11.314220428466797

Token 18: 'res' (ID: 430)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -1.105465292930603
    2. 'k' → logprob: -1.730465292930603
    3. 'print' → logprob: -2.3554654121398926
    4. 'for' → logprob: -2.6054654121398926
    5. 'c' → logprob: -2.9804654121398926
    6. 's' → logprob: -3.1054654121398926
    7. 'd' → logprob: -3.4804654121398926
    8. 'm' → logprob: -3.6054654121398926
    9. 'a' → logprob: -3.9804654121398926
    10. 'K' → logprob: -3.9804654121398926

Token 19: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.2768941819667816
    2. '(' → logprob: -1.776894211769104
    3. '=' → logprob: -3.7768940925598145
    4. ' =' → logprob: -3.7768940925598145
    5. '_' → logprob: -4.1518940925598145
    6. '[:]' → logprob: -5.0268940925598145
    7. '[]' → logprob: -6.0268940925598145
    8. ' ' → logprob: -7.5268940925598145
    9. '()' → logprob: -7.9018940925598145
    10. 's' → logprob: -7.9018940925598145

Token 20: ' "' (ID: 392)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.2617284655570984
    2. ' ' → logprob: -1.7617285251617432
    3. 'A' → logprob: -3.136728525161743
    4. ' A' → logprob: -4.261728286743164
    5. '1' → logprob: -7.761728286743164
    6. '100' → logprob: -9.011728286743164
    7. '10' → logprob: -9.136728286743164
    8. 'float' → logprob: -9.261728286743164
    9. ' float' → logprob: -9.761728286743164
    10. 'len' → logprob: -10.011728286743164

Token 21: 'YES' (ID: 31958)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.5477620363235474
    2. 'NO' → logprob: -2.297761917114258
    3. 'No' → logprob: -2.672761917114258
    4. '-' → logprob: -3.047761917114258
    5. 'YES' → logprob: -3.172761917114258
    6. 'Yes' → logprob: -3.547761917114258
    7. 'A' → logprob: -3.922761917114258
    8. '0' → logprob: -4.422761917114258
    9. 'IMP' → logprob: -4.422761917114258
    10. '1' → logprob: -4.547761917114258

Token 22: '"
' (ID: 1092)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.004368290305137634
    2. 'if' → logprob: -6.254368305206299
    3. '
' → logprob: -6.379368305206299
    4. 'for' → logprob: -8.87936782836914
    5. '\' → logprob: -9.00436782836914
    6. '"' → logprob: -9.12936782836914
    7. ' if' → logprob: -9.25436782836914
    8. '<|end|>' → logprob: -9.75436782836914
    9. ')' → logprob: -10.00436782836914
    10. '\r' → logprob: -10.37936782836914

Token 23: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.48566120862960815
    2. '\n' → logprob: -1.235661268234253
    3. '
' → logprob: -2.735661268234253
    4. 'if' → logprob: -3.735661268234253
    5. ' for' → logprob: -5.485661029815674
    6. '```' → logprob: -7.485661029815674
    7. '\' → logprob: -8.735661506652832
    8. '<|end|>' → logprob: -8.985661506652832
    9. '' → logprob: -9.235661506652832
    10. ' 
' → logprob: -9.860661506652832

Token 24: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.09105781465768814
    2. ' ' → logprob: -2.466057777404785
    3. 'i' → logprob: -6.591057777404785
    4. ' _' → logprob: -7.841057777404785
    5. '_' → logprob: -8.841057777404785
    6. '  ' → logprob: -9.466057777404785
    7. ' x' → logprob: -9.841057777404785
    8. ' ' → logprob: -10.591057777404785
    9. ' ‌' → logprob: -11.216057777404785
    10. ' A' → logprob: -11.341057777404785

Token 25: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.03490659222006798
    2. 'in' → logprob: -3.4099066257476807
    3. ' ' → logprob: -6.784906387329102
    4. '  ' → logprob: -9.534906387329102
    5. ' range' → logprob: -11.409906387329102
    6. '	in' → logprob: -11.659906387329102
    7. 'range' → logprob: -11.784906387329102
    8. ' i' → logprob: -11.909906387329102
    9. 'n' → logprob: -12.284906387329102
    10. ' n' → logprob: -13.159906387329102

Token 26: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.004568134900182486
    2. 'range' → logprob: -5.504568099975586
    3. ' ' → logprob: -7.629568099975586
    4. ' xrange' → logprob: -13.379568099975586
    5. '	range' → logprob: -13.629568099975586
    6. '(range' → logprob: -14.754568099975586
    7. '  ' → logprob: -15.254568099975586
    8. ' in' → logprob: -16.129568099975586
    9. ' ' → logprob: -16.504568099975586
    10. ' r' → logprob: -17.504568099975586

Token 27: '(N' (ID: 10564)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004131353460252285
    2. '(N' → logprob: -5.504131317138672
    3. '(len' → logprob: -10.629131317138672
    4. ' (' → logprob: -11.129131317138672
    5. '(
' → logprob: -12.004131317138672
    6. '(n' → logprob: -12.129131317138672
    7. ' ' → logprob: -13.629131317138672
    8. '(

' → logprob: -15.379131317138672
    9. '()' → logprob: -15.504131317138672
    10. '(range' → logprob: -16.004131317138672

Token 28: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.5428950786590576
    2. '):' → logprob: -0.9178950786590576
    3. ' -' → logprob: -4.167895317077637
    4. ' ):' → logprob: -6.417895317077637
    5. '):
' → logprob: -6.792895317077637
    6. ' ' → logprob: -7.042895317077637
    7. ')' → logprob: -8.292895317077637
    8. '1' → logprob: -8.792895317077637
    9. ' ):
' → logprob: -11.667895317077637
    10. '>' → logprob: -11.667895317077637

Token 29: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00025788258062675595
    2. ' ' → logprob: -8.37525749206543
    3. '2' → logprob: -10.62525749206543
    4. '-' → logprob: -13.87525749206543
    5. ')' → logprob: -14.62525749206543
    6. '１' → logprob: -15.18775749206543
    7. '```' → logprob: -15.31275749206543
    8. '   ' → logprob: -15.43775749206543
    9. '3' → logprob: -15.50025749206543
    10. '  ' → logprob: -15.68775749206543

Token 30: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.03181525319814682
    2. '):
' → logprob: -3.65681529045105
    3. ':' → logprob: -6.031815052032471
    4. ')' → logprob: -6.281815052032471
    5. ' ):' → logprob: -7.156815052032471
    6. ',' → logprob: -8.281815528869629
    7. '):
' → logprob: -9.406815528869629
    8. ' ):
' → logprob: -10.531815528869629
    9. '>' → logprob: -11.281815528869629
    10. ' ' → logprob: -11.406815528869629

Token 31: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.017433367669582367
    2. ' if' → logprob: -4.142433166503906
    3. ' ' → logprob: -7.142433166503906
    4. '```' → logprob: -8.642433166503906
    5. '<|end|>' → logprob: -9.017433166503906
    6. ' 
' → logprob: -9.142433166503906
    7. '    
' → logprob: -9.142433166503906
    8. '	if' → logprob: -10.517433166503906
    9. '    ' → logprob: -11.267433166503906
    10. '  ' → logprob: -11.517433166503906

Token 32: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.04646847024559975
    2. '   ' → logprob: -3.546468496322632
    3. 'if' (adapté à ' if') → logprob: -4.171468257904053
    4. '```' → logprob: -7.296468257904053
    5. ' ' → logprob: -8.421468734741211
    6. '    ' → logprob: -9.171468734741211
    7. ' 
' → logprob: -10.046468734741211
    8. '	if' → logprob: -10.546468734741211
    9. '       ' → logprob: -10.671468734741211
    10. '``' → logprob: -11.296468734741211

Token 33: ' A' (ID: 355)
  Prédit: ' A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.011111720465123653
    2. 'A' → logprob: -4.511111736297607
    3. ' ' → logprob: -9.76111125946045
    4. ' not' → logprob: -12.76111125946045
    5. ' ' → logprob: -13.76111125946045
    6. '   ' → logprob: -14.01111125946045
    7. '	A' → logprob: -14.26111125946045
    8. '    ' → logprob: -15.01111125946045
    9. '  ' → logprob: -15.26111125946045
    10. ' abs' → logprob: -16.011112213134766

Token 34: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.0017119476106017828
    2. '[' → logprob: -6.376711845397949
    3. '>' → logprob: -11.87671184539795
    4. '[
' → logprob: -13.62671184539795
    5. '[-' → logprob: -15.25171184539795
    6. ' [' → logprob: -15.37671184539795
    7. '>[' → logprob: -15.62671184539795
    8. '[index' → logprob: -15.87671184539795
    9. '\[' → logprob: -16.251712799072266
    10. '``' → logprob: -16.501712799072266

Token 35: ']' (ID: 60)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.15048837661743164
    2. '>=' → logprob: -2.5254883766174316
    3. '==' → logprob: -3.0254883766174316
    4. ']' → logprob: -5.275488376617432
    5. ' >' → logprob: -6.400488376617432
    6. '+' → logprob: -6.525488376617432
    7. ']>=' → logprob: -7.025488376617432
    8. ' >=' → logprob: -7.650488376617432
    9. ']>' → logprob: -7.775488376617432
    10. ' ==' → logprob: -7.900488376617432

Token 36: ' ==' (ID: 951)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.1300400197505951
    2. '>' → logprob: -2.505039930343628
    3. '==' → logprob: -4.130040168762207
    4. '!=' → logprob: -4.130040168762207
    5. ' +' → logprob: -5.380040168762207
    6. ' >' → logprob: -6.630040168762207
    7. '-' → logprob: -7.505040168762207
    8. ' ==' → logprob: -7.755040168762207
    9. ' !=' → logprob: -7.755040168762207
    10. '>=' → logprob: -8.380040168762207

Token 37: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.5761637687683105
    2. ' A' → logprob: -0.8261637687683105
    3. ' ' → logprob: -8.701164245605469
    4. '	A' → logprob: -10.701164245605469
    5. '   ' → logprob: -10.826164245605469
    6. '  ' → logprob: -11.826164245605469
    7. '    ' → logprob: -13.326164245605469
    8. '0' → logprob: -13.326164245605469
    9. ' ' → logprob: -13.826164245605469
    10. 'a' → logprob: -13.951164245605469

Token 38: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.0001967457792488858
    2. '[' → logprob: -8.62519645690918
    3. ' [' → logprob: -12.50019645690918
    4. 'i' → logprob: -12.75019645690918
    5. '[I' → logprob: -13.50019645690918
    6. '[
' → logprob: -13.62519645690918
    7. '```' → logprob: -13.62519645690918
    8. '   ' → logprob: -14.12519645690918
    9. '[j' → logprob: -14.43769645690918
    10. 'A' → logprob: -14.50019645690918

Token 39: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.0007741317385807633
    2. '[i' → logprob: -7.875773906707764
    3. ' +' → logprob: -8.625774383544922
    4. ']+' → logprob: -9.125774383544922
    5. ']' → logprob: -10.000774383544922
    6. '+i' → logprob: -11.125774383544922
    7. '-' → logprob: -11.250774383544922
    8. '   ' → logprob: -11.500774383544922
    9. '1' → logprob: -11.625774383544922
    10. '```' → logprob: -12.500774383544922

Token 40: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0332413911819458
    2. '0' → logprob: -3.7832412719726562
    3. ']' → logprob: -4.908241271972656
    4. '-' → logprob: -6.783241271972656
    5. ' ' → logprob: -7.908241271972656
    6. ']:' → logprob: -8.283241271972656
    7. 'i' → logprob: -8.283241271972656
    8. ']+' → logprob: -8.533241271972656
    9. ']-' → logprob: -9.408241271972656
    10. '```' → logprob: -9.908241271972656

Token 41: ']:
' (ID: 22152)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.004943289794027805
    2. ' :' → logprob: -5.879943370819092
    3. '):' → logprob: -6.504943370819092
    4. '-' → logprob: -8.004942893981934
    5. ')' → logprob: -9.754942893981934
    6. '+:' → logprob: -10.129942893981934
    7. ':
' → logprob: -10.379942893981934
    8. '+' → logprob: -10.379942893981934
    9. 'and' → logprob: -10.629942893981934
    10. '>:' → logprob: -10.754942893981934

Token 42: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.02171444706618786
    2. '   ' → logprob: -4.146714210510254
    3. ':' → logprob: -6.146714210510254
    4. ' and' → logprob: -6.271714210510254
    5. ' res' → logprob: -7.146714210510254
    6. ' or' → logprob: -8.646714210510254
    7. '           ' → logprob: -9.021714210510254
    8. ' ' → logprob: -9.146714210510254
    9. '    ' → logprob: -9.771714210510254
    10. 'res' → logprob: -9.771714210510254

Token 43: ' res' (ID: 694)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' (adapté à ' res') → logprob: -0.3369332253932953
    2. '   ' → logprob: -1.3369332551956177
    3. ' res' → logprob: -3.836933135986328
    4. '       ' → logprob: -7.211933135986328
    5. '```' → logprob: -7.336933135986328
    6. '
' → logprob: -8.961933135986328
    7. ' ' → logprob: -9.461933135986328
    8. '	res' → logprob: -9.586933135986328
    9. '           ' → logprob: -10.336933135986328
    10. '``' → logprob: -10.711933135986328

Token 44: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.42870670557022095
    2. ' =' → logprob: -1.0537066459655762
    3. '+=' → logprob: -12.803707122802734
    4. ' ' → logprob: -13.428707122802734
    5. ' +=' → logprob: -14.053707122802734
    6. ' ="' → logprob: -15.053707122802734
    7. '```' → logprob: -15.678707122802734
    8. '＝' → logprob: -15.803707122802734
    9. '="' → logprob: -16.303707122802734
    10. '   ' → logprob: -16.803707122802734

Token 45: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0016319748247042298
    2. ' "' → logprob: -6.626631736755371
    3. '"No' → logprob: -8.376631736755371
    4. ' ' → logprob: -10.126631736755371
    5. '"N' → logprob: -10.876631736755371
    6. ''' → logprob: -12.126631736755371
    7. 'NO' → logprob: -12.751631736755371
    8. ' NO' → logprob: -12.876631736755371
    9. '   ' → logprob: -13.251631736755371
    10. '"D' → logprob: -13.751631736755371

Token 46: 'NO' (ID: 14695)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.4753641188144684
    2. 'NO' → logprob: -0.975364089012146
    3. '"No' → logprob: -7.1003642082214355
    4. '"N' → logprob: -8.600363731384277
    5. ''' → logprob: -8.850363731384277
    6. 'N' → logprob: -10.350363731384277
    7. 'YES' → logprob: -10.350363731384277
    8. ' NO' → logprob: -11.225363731384277
    9. '   ' → logprob: -11.475363731384277
    10. ' "' → logprob: -11.600363731384277

Token 47: '"
' (ID: 1092)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.26505526900291443
    2. '       ' → logprob: -2.0150551795959473
    3. '           ' → logprob: -2.5150551795959473
    4. '```' → logprob: -5.015055179595947
    5. '   ' → logprob: -6.015055179595947
    6. ')' → logprob: -6.390055179595947
    7. '
' → logprob: -6.515055179595947
    8. '               ' → logprob: -6.515055179595947
    9. 'print' → logprob: -6.765055179595947
    10. '\n' → logprob: -7.265055179595947

Token 48: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.049606237560510635
    2. '       ' → logprob: -3.1746063232421875
    3. '
' → logprob: -5.5496063232421875
    4. '```' → logprob: -6.1746063232421875
    5. '   ' → logprob: -8.799606323242188
    6. '        
' → logprob: -9.174606323242188
    7. '           ' → logprob: -9.299606323242188
    8. ' print' → logprob: -9.424606323242188
    9. '\n' → logprob: -10.049606323242188
    10. 'break' → logprob: -10.174606323242188

Token 49: '(res' (ID: 8331)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1271241307258606
    2. '(res' → logprob: -2.127124071121216
    3. '("("' → logprob: -8.752123832702637
    4. '('' → logprob: -10.627123832702637
    5. '()' → logprob: -11.877123832702637
    6. 'res' → logprob: -12.877123832702637
    7. '(
' → logprob: -13.377123832702637
    8. '("' → logprob: -14.252123832702637
    9. '(

' → logprob: -14.252123832702637
    10. '(`' → logprob: -15.127123832702637

Token 50: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. '))' → logprob: -16.25
    3. ')`' → logprob: -17.0
    4. '`)' → logprob: -17.125
    5. '")' → logprob: -17.75
    6. ' )' → logprob: -17.875
    7. ')
' → logprob: -18.0
    8. '')' → logprob: -18.0
    9. '）' → logprob: -19.75
    10. ')**' → logprob: -19.75


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 48
Tokens correctement prédits (1ère position, stricte): 19
Tokens correctement prédits (1ère position, avec adaptation): 20
Tokens correctement prédits (top 10): 36
Précision stricte (1ère position): 39.58%
Précision adaptée (1ère position): 41.67%
Précision (top 10): 75.00%
================================================================================
