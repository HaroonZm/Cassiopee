================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:28:38
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
a = 1
while a <= n:
    a = a * 2
print(a - 1)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00010807292710524052
    2. '(n' → logprob: -10.250107765197754
    3. ''' → logprob: -10.625107765197754
    4. '('' → logprob: -11.375107765197754
    5. '```' → logprob: -11.625107765197754
    6. '(
' → logprob: -12.000107765197754
    7. '("("' → logprob: -12.375107765197754
    8. '()' → logprob: -12.375107765197754
    9. '`' → logprob: -12.500107765197754
    10. ')' → logprob: -13.125107765197754

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0733630508184433
    2. ')' → logprob: -2.8233630657196045
    3. '()' → logprob: -4.698362827301025
    4. '())' → logprob: -6.948362827301025
    5. '```' → logprob: -8.198363304138184
    6. '(
' → logprob: -8.448363304138184
    7. '('' → logprob: -8.948363304138184
    8. '(()' → logprob: -9.073363304138184
    9. '`' → logprob: -9.198363304138184
    10. '("("' → logprob: -9.698363304138184

Token 5: 'a' (ID: 64)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -1.0521364212036133
    2. 'for' → logprob: -1.3021364212036133
    3. 'if' → logprob: -1.4271364212036133
    4. 's' → logprob: -3.1771364212036133
    5. 'f' → logprob: -4.177136421203613
    6. 'x' → logprob: -4.177136421203613
    7. 'a' → logprob: -4.552136421203613
    8. ')' → logprob: -4.677136421203613
    9. ' ' → logprob: -4.677136421203613
    10. '*' → logprob: -4.927136421203613

Token 6: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.009366204030811787
    2. '[a' → logprob: -6.009366035461426
    3. '[i' → logprob: -6.634366035461426
    4. '.' → logprob: -6.634366035461426
    5. ' =' → logprob: -7.009366035461426
    6. 'a' → logprob: -7.509366035461426
    7. '+' → logprob: -7.634366035461426
    8. '=' → logprob: -7.759366035461426
    9. '[:]' → logprob: -8.134366035461426
    10. '.append' → logprob: -8.134366035461426

Token 7: ' ' (ID: 220)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.5740121603012085
    2. '[]' → logprob: -1.1990121603012085
    3. ' [' → logprob: -2.449012279510498
    4. '[' → logprob: -4.324012279510498
    5. '[int' → logprob: -4.449012279510498
    6. ' list' → logprob: -4.824012279510498
    7. 'list' → logprob: -4.949012279510498
    8. '[input' → logprob: -5.824012279510498
    9. '0' → logprob: -6.449012279510498
    10. '[n' → logprob: -7.074012279510498

Token 8: '1' (ID: 16)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.7663756608963013
    2. 'list' → logprob: -1.5163756608963013
    3. 'int' → logprob: -2.0163755416870117
    4. 'input' → logprob: -2.0163755416870117
    5. '[int' → logprob: -4.016375541687012
    6. 'n' → logprob: -4.016375541687012
    7. '0' → logprob: -4.891375541687012
    8. '[input' → logprob: -5.766375541687012
    9. '[' → logprob: -6.516375541687012
    10. '[n' → logprob: -7.266375541687012

Token 9: '
' (ID: 198)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.1742560863494873
    2. '*' → logprob: -2.6742560863494873
    3. '0' → logprob: -2.7992560863494873
    4. '\n' → logprob: -4.799256324768066
    5. ',' → logprob: -5.424256324768066
    6. '\' → logprob: -5.549256324768066
    7. '+
' → logprob: -5.799256324768066
    8. '#' → logprob: -5.924256324768066
    9. '
' → logprob: -6.424256324768066
    10. 'while' → logprob: -6.674256324768066

Token 10: 'while' (ID: 7032)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.21005070209503174
    2. '
' → logprob: -2.585050582885742
    3. '*' → logprob: -2.960050582885742
    4. '\n' → logprob: -3.835050582885742
    5. '0' → logprob: -4.710050582885742
    6. 'while' → logprob: -4.835050582885742
    7. '' → logprob: -5.085050582885742
    8. '+
' → logprob: -5.335050582885742
    9. '```' → logprob: -5.960050582885742
    10. '\' → logprob: -6.085050582885742

Token 11: ' a' (ID: 261)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.4899846017360687
    2. ' ' → logprob: -1.1149846315383911
    3. ' a' → logprob: -2.8649845123291016
    4. 'n' → logprob: -6.489984512329102
    5. 'a' → logprob: -7.364984512329102
    6. '  ' → logprob: -8.864984512329102
    7. ' ' → logprob: -9.364984512329102
    8. ' (' → logprob: -10.739984512329102
    9. ' not' → logprob: -10.739984512329102
    10. ' )' → logprob: -12.114984512329102

Token 12: ' <=' (ID: 5017)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.6614203453063965
    2. ' <=' → logprob: -0.7864203453063965
    3. '<' → logprob: -3.6614203453063965
    4. '<=' → logprob: -6.1614203453063965
    5. ' ' → logprob: -7.5364203453063965
    6. '+' → logprob: -11.286420822143555
    7. ' ≤' → logprob: -11.286420822143555
    8. ' ' → logprob: -11.786420822143555
    9. ' <<=' → logprob: -11.786420822143555
    10. '*' → logprob: -12.786420822143555

Token 13: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.2519338130950928
    2. 'n' → logprob: -1.5019338130950928
    3. ' ' → logprob: -12.376934051513672
    4. ' ' → logprob: -14.626934051513672
    5. 'a' → logprob: -16.876934051513672
    6. '	n' → logprob: -17.376934051513672
    7. ' a' → logprob: -17.751934051513672
    8. '_n' → logprob: -17.876934051513672
    9. '(n' → logprob: -19.001934051513672
    10. ')n' → logprob: -19.126934051513672

Token 14: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -3.941161776310764e-05
    2. ' :' → logprob: -11.000039100646973
    3. ':
' → logprob: -11.125039100646973
    4. ':**' → logprob: -12.625039100646973
    5. '':' → logprob: -14.000039100646973
    6. '):' → logprob: -14.250039100646973
    7. '':'' → logprob: -14.625039100646973
    8. '":' → logprob: -14.625039100646973
    9. '":"' → logprob: -14.875039100646973
    10. '+:' → logprob: -15.375039100646973

Token 15: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.30539318919181824
    2. ':' → logprob: -1.4303932189941406
    3. '    ' → logprob: -5.305393218994141
    4. 'print' → logprob: -5.430393218994141
    5. '    
' → logprob: -5.680393218994141
    6. ':
' → logprob: -6.055393218994141
    7. '```' → logprob: -6.180393218994141
    8. ' print' → logprob: -6.305393218994141
    9. ' ' → logprob: -6.305393218994141
    10. '\' → logprob: -7.180393218994141

Token 16: ' a' (ID: 261)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.3721029460430145
    2. '   ' → logprob: -1.247102975845337
    3. ' print' → logprob: -4.247102737426758
    4. ' ' → logprob: -5.122102737426758
    5. '    ' → logprob: -6.247102737426758
    6. '    
' → logprob: -7.872102737426758
    7. '```' → logprob: -9.122102737426758
    8. 'a' (adapté à ' a') → logprob: -9.372102737426758
    9. '  ' → logprob: -9.497102737426758
    10. 'b' → logprob: -9.747102737426758

Token 17: ' =' (ID: 314)
  Prédit: ' +='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.9743401408195496
    2. '+=' → logprob: -1.3493402004241943
    3. '*' → logprob: -2.4743402004241943
    4. '**' → logprob: -2.4743402004241943
    5. '+' → logprob: -2.5993402004241943
    6. '=' → logprob: -3.2243402004241943
    7. ' ' → logprob: -3.4743402004241943
    8. '   ' → logprob: -4.474339962005615
    9. ' **' → logprob: -5.099339962005615
    10. ' *=' → logprob: -5.099339962005615

Token 18: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.11297862231731415
    2. ' a' → logprob: -2.23797869682312
    3. '2' → logprob: -9.6129789352417
    4. ' ' → logprob: -9.8629789352417
    5. '1' → logprob: -10.8629789352417
    6. '	a' → logprob: -12.3629789352417
    7. '*a' → logprob: -13.2379789352417
    8. '   ' → logprob: -13.4879789352417
    9. '```' → logprob: -13.4879789352417
    10. '_a' → logprob: -13.6129789352417

Token 19: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.11558797955513
    2. ' *' → logprob: -2.2405879497528076
    3. '+' → logprob: -6.865588188171387
    4. ' ' → logprob: -7.740588188171387
    5. 'a' → logprob: -7.865588188171387
    6. ' +' → logprob: -8.115588188171387
    7. '2' → logprob: -8.240588188171387
    8. ' a' → logprob: -8.365588188171387
    9. '*a' → logprob: -9.740588188171387
    10. '1' → logprob: -10.865588188171387

Token 20: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0005020392127335072
    2. ' ' → logprob: -8.50050163269043
    3. 'a' → logprob: -8.75050163269043
    4. '3' → logprob: -9.25050163269043
    5. '5' → logprob: -10.87550163269043
    6. '10' → logprob: -11.50050163269043
    7. '7' → logprob: -11.87550163269043
    8. '6' → logprob: -12.12550163269043
    9. '   ' → logprob: -13.62550163269043
    10. '4' → logprob: -14.62550163269043

Token 21: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.00048072010395117104
    2. '3' → logprob: -8.125480651855469
    3. 'a' → logprob: -9.250480651855469
    4. '5' → logprob: -10.375480651855469
    5. '10' → logprob: -10.625480651855469
    6. '7' → logprob: -11.250480651855469
    7. ' ' → logprob: -11.375480651855469
    8. '6' → logprob: -12.500480651855469
    9. '4' → logprob: -13.125480651855469
    10. '   ' → logprob: -13.375480651855469

Token 22: '
' (ID: 198)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.5481839776039124
    2. '   ' → logprob: -1.1731839179992676
    3. ' ' → logprob: -2.7981839179992676
    4. '    ' → logprob: -4.173183917999268
    5. '\' → logprob: -4.673183917999268
    6. '<|end|>' → logprob: -4.673183917999268
    7. '    
' → logprob: -5.298183917999268
    8. ' 
' → logprob: -5.923183917999268
    9. '```' → logprob: -6.423183917999268
    10. '  ' → logprob: -6.423183917999268

Token 23: 'print' (ID: 1598)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7429019808769226
    2. '\n' → logprob: -1.6179020404815674
    3. ' ' → logprob: -2.7429020404815674
    4. 'print' → logprob: -2.7429020404815674
    5. '\' → logprob: -2.9929020404815674
    6. '    
' → logprob: -3.3679020404815674
    7. '<|end|>' → logprob: -3.7429020404815674
    8. '```' → logprob: -3.8679020404815674
    9. 'if' → logprob: -4.492901802062988
    10. '    ' → logprob: -4.617901802062988

Token 24: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10049078613519669
    2. '(a' → logprob: -2.3504908084869385
    3. '()' → logprob: -8.60049057006836
    4. '('' → logprob: -9.47549057006836
    5. '("' → logprob: -12.10049057006836
    6. 'a' → logprob: -12.10049057006836
    7. '("("' → logprob: -12.35049057006836
    8. '(n' → logprob: -12.60049057006836
    9. '(end' → logprob: -13.47549057006836
    10. '((' → logprob: -13.85049057006836

Token 25: ' -' (ID: 533)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0280383548888494e-06
    2. ' )' → logprob: -14.500000953674316
    3. '')' → logprob: -15.375000953674316
    4. '))' → logprob: -16.000001907348633
    5. '`)' → logprob: -16.750001907348633
    6. '**' → logprob: -17.500001907348633
    7. '*' → logprob: -17.500001907348633
    8. ')
' → logprob: -17.625001907348633
    9. '}' → logprob: -17.750001907348633
    10. '```' → logprob: -18.000001907348633

Token 26: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.06993910670280457
    2. ' ' → logprob: -2.694939136505127
    3. ' ' → logprob: -12.944938659667969
    4. ')' → logprob: -16.06993865966797
    5. '<|end|>' → logprob: -16.31993865966797
    6. 'a' → logprob: -17.06993865966797
    7. '_' → logprob: -17.31993865966797
    8. ' a' → logprob: -17.31993865966797
    9. ' n' → logprob: -17.56993865966797
    10. 'space' → logprob: -17.81993865966797

Token 27: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.4121114822482923e-06
    2. ' ' → logprob: -12.625003814697266
    3. '<|end|>' → logprob: -17.875003814697266
    4. '2' → logprob: -19.875003814697266
    5. 'n' → logprob: -20.250003814697266
    6. ')' → logprob: -20.750003814697266
    7. '   ' → logprob: -20.875003814697266
    8. '  ' → logprob: -21.875003814697266
    9. '۱' → logprob: -21.875003814697266
    10. '１' → logprob: -22.125003814697266

Token 28: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9361264946837764e-07
    2. ' )' → logprob: -16.625
    3. '')' → logprob: -17.625
    4. '))' → logprob: -18.0
    5. ')
' → logprob: -18.25
    6. '`)' → logprob: -18.625
    7. '}' → logprob: -18.875
    8. '）' → logprob: -19.0
    9. ')`' → logprob: -19.125
    10. '")' → logprob: -20.25


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 26
Tokens correctement prédits (1ère position, stricte): 5
Tokens correctement prédits (1ère position, avec adaptation): 5
Tokens correctement prédits (top 10): 19
Précision stricte (1ère position): 19.23%
Précision adaptée (1ère position): 19.23%
Précision (top 10): 73.08%
================================================================================
