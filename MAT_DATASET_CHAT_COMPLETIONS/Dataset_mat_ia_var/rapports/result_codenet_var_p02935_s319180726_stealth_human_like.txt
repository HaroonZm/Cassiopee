================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:47:55
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
v = input().split() # Bon, sépare comme ça, c'est plus simple
valeurs = []
for elem in v:
    valeurs.append(int(elem))
valeurs = sorted(valeurs)  # l'ordre a priori important
min_val = valeurs[0]  # On prend la première comme mini
for j in range(1, len(valeurs)):
    # je pense qu'il faut moyenner
    min_val = (min_val + valeurs[j]) / 2 # moyenne progressive
 
print(min_val)  # affichage final, j'espère que c'est ça
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00038134094211272895
    2. '(n' → logprob: -9.000381469726562
    3. ''' → logprob: -9.500381469726562
    4. '('' → logprob: -10.125381469726562
    5. '```' → logprob: -10.125381469726562
    6. '`' → logprob: -10.750381469726562
    7. '("("' → logprob: -10.750381469726562
    8. '()' → logprob: -11.250381469726562
    9. 'n' → logprob: -11.625381469726562
    10. ')' → logprob: -12.000381469726562

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7217576503753662
    2. ')' → logprob: -0.7217576503753662
    3. '()' → logprob: -3.846757650375366
    4. '())' → logprob: -5.221757888793945
    5. '(
' → logprob: -8.096757888793945
    6. '```' → logprob: -8.721757888793945
    7. '(()' → logprob: -9.346757888793945
    8. '[' → logprob: -9.346757888793945
    9. '))' → logprob: -9.346757888793945
    10. '")' → logprob: -9.471757888793945

Token 5: 'v' (ID: 85)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.3530406951904297
    2. 'i' → logprob: -1.4780406951904297
    3. 'if' → logprob: -1.8530406951904297
    4. 's' → logprob: -2.2280406951904297
    5. ' ' → logprob: -3.1030406951904297
    6. ''' → logprob: -3.1030406951904297
    7. 'f' → logprob: -3.8530406951904297
    8. '`' → logprob: -3.9780406951904297
    9. 'a' → logprob: -3.9780406951904297
    10. 'x' → logprob: -4.10304069519043

Token 6: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.4559345543384552
    2. 'a' → logprob: -1.3309345245361328
    3. 'al' → logprob: -2.830934524536133
    4. ' =' → logprob: -4.080934524536133
    5. '[a' → logprob: -4.705934524536133
    6. '=' → logprob: -4.955934524536133
    7. '[:]' → logprob: -5.830934524536133
    8. '[i' → logprob: -6.205934524536133
    9. 'v' → logprob: -6.580934524536133
    10. 'alue' → logprob: -7.705934524536133

Token 7: ' input' (ID: 3422)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.5332788825035095
    2. '[]' → logprob: -1.0332789421081543
    3. ' [' → logprob: -3.6582789421081543
    4. '[int' → logprob: -4.408278942108154
    5. '[' → logprob: -5.408278942108154
    6. '0' → logprob: -5.783278942108154
    7. 'list' → logprob: -5.908278942108154
    8. '[n' → logprob: -6.033278942108154
    9. 'n' → logprob: -6.158278942108154
    10. 'int' → logprob: -6.533278942108154

Token 8: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0005244385101832449
    2. '()' → logprob: -8.125524520874023
    3. '('' → logprob: -9.375524520874023
    4. ')' → logprob: -10.250524520874023
    5. '```' → logprob: -10.750524520874023
    6. '(
' → logprob: -10.875524520874023
    7. '(

' → logprob: -10.875524520874023
    8. '("("' → logprob: -11.250524520874023
    9. ''' → logprob: -11.750524520874023
    10. ' (' → logprob: -11.750524520874023

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.011175490915775299
    2. 'strip' → logprob: -4.511175632476807
    3. ' split' → logprob: -9.136175155639648
    4. 'rstrip' → logprob: -11.386175155639648
    5. 'replace' → logprob: -12.011175155639648
    6. ' strip' → logprob: -13.636175155639648
    7. 'spl' → logprob: -14.761175155639648
    8. 'rs' → logprob: -15.011175155639648
    9. 's' → logprob: -15.136175155639648
    10. '```' → logprob: -16.01117515563965

Token 10: '()' (ID: 416)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.02110348455607891
    2. '('' → logprob: -4.146103382110596
    3. '("("' → logprob: -5.521103382110596
    4. '()' → logprob: -7.646103382110596
    5. '(
' → logprob: -9.021103858947754
    6. '((' → logprob: -9.396103858947754
    7. '(

' → logprob: -9.396103858947754
    8. ''' → logprob: -9.771103858947754
    9. '"' → logprob: -10.021103858947754
    10. '`' → logprob: -10.021103858947754

Token 11: ' #' (ID: 1069)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.3325079679489136
    2. 'v' → logprob: -1.9575079679489136
    3. 'n' → logprob: -3.332508087158203
    4. 'for' → logprob: -3.582508087158203
    5. '=' → logprob: -4.082508087158203
    6. ',' → logprob: -4.582508087158203
    7. '#' → logprob: -4.957508087158203
    8. '.' → logprob: -4.957508087158203
    9. 'a' → logprob: -5.082508087158203
    10. 'i' → logprob: -5.457508087158203

Token 12: ' Bon' (ID: 12658)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.0213667154312134
    2. 'v' → logprob: -1.1463667154312134
    3. ')' → logprob: -2.646366596221924
    4. '[' → logprob: -2.896366596221924
    5. 'n' → logprob: -3.021366596221924
    6. ' v' → logprob: -3.521366596221924
    7. '[int' → logprob: -3.646366596221924
    8. '[n' → logprob: -3.896366596221924
    9. '<|end|>' → logprob: -3.896366596221924
    10. 'for' → logprob: -4.771366596221924

Token 13: ',' (ID: 11)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.07462727278470993
    2. 'ds' → logprob: -2.824627161026001
    3. 'g' → logprob: -6.44962739944458
    4. 'de' → logprob: -6.94962739944458
    5. 'du' → logprob: -7.07462739944458
    6. 's' → logprob: -7.19962739944458
    7. 'д' → logprob: -7.57462739944458
    8. '.' → logprob: -7.57462739944458
    9. 'j' → logprob: -7.69962739944458
    10. 'v' → logprob: -7.69962739944458

Token 14: ' sé' (ID: 7462)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.5599279999732971
    2. ' ' → logprob: -1.8099279403686523
    3. ''' → logprob: -2.5599279403686523
    4. ' v' → logprob: -2.8099279403686523
    5. ' n' → logprob: -3.5599279403686523
    6. 'n' → logprob: -3.6849279403686523
    7. '_' → logprob: -4.059927940368652
    8. '[' → logprob: -4.559927940368652
    9. '=' → logprob: -4.684927940368652
    10. ')' → logprob: -4.809927940368652

Token 15: 'pare' (ID: 6900)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.8696850538253784
    2. 'quence' → logprob: -1.1196850538253784
    3. 'quences' → logprob: -1.6196850538253784
    4. 'p' → logprob: -3.994685173034668
    5. 'v' → logprob: -5.369685173034668
    6. 'rie' → logprob: -5.494685173034668
    7. 'quent' → logprob: -5.619685173034668
    8. 'u' → logprob: -5.744685173034668
    9. 'qu' → logprob: -5.744685173034668
    10. 'que' → logprob: -5.869685173034668

Token 16: ' comme' (ID: 7971)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.6148271560668945
    2. ' ' → logprob: -2.3648271560668945
    3. 'v' → logprob: -2.4898271560668945
    4. '[' → logprob: -2.6148271560668945
    5. 's' → logprob: -2.8648271560668945
    6. ')' → logprob: -2.9898271560668945
    7. '('' → logprob: -3.8648271560668945
    8. '(' → logprob: -3.8648271560668945
    9. '<|end|>' → logprob: -4.4898271560668945
    10. '[]' → logprob: -5.2398271560668945

Token 17: ' ça' (ID: 13590)
  Prédit: ' des'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' des' → logprob: -1.4203259944915771
    2. '['' → logprob: -1.7953259944915771
    3. 'des' → logprob: -1.9203259944915771
    4. ''' → logprob: -2.170325994491577
    5. 'tokens' → logprob: -2.295325994491577
    6. '[]' → logprob: -3.295325994491577
    7. '```' → logprob: -3.295325994491577
    8. ' tokens' → logprob: -3.545325994491577
    9. '"' → logprob: -3.795325994491577
    10. '('' → logprob: -4.420326232910156

Token 18: ',' (ID: 11)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.2741425931453705
    2. 'for' → logprob: -2.2741425037384033
    3. '[' → logprob: -2.6491425037384033
    4. 'n' → logprob: -3.7741425037384033
    5. ')' → logprob: -4.774142742156982
    6. '#' → logprob: -5.399142742156982
    7. ' for' → logprob: -5.399142742156982
    8. ' ' → logprob: -5.649142742156982
    9. 's' → logprob: -6.024142742156982
    10. 'a' → logprob: -6.149142742156982

Token 19: ' c' (ID: 274)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.49991992115974426
    2. 'n' → logprob: -2.249919891357422
    3. '[' → logprob: -2.374919891357422
    4. ')' → logprob: -2.874919891357422
    5. ' v' → logprob: -3.374919891357422
    6. ' ' → logprob: -3.749919891357422
    7. 'for' → logprob: -3.749919891357422
    8. ' n' → logprob: -4.499919891357422
    9. '[n' → logprob: -4.749919891357422
    10. ''' → logprob: -5.124919891357422

Token 20: ''est' (ID: 6616)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.669671356678009
    2. 's' → logprob: -1.6696712970733643
    3. ''est' → logprob: -2.6696712970733643
    4. '['' → logprob: -3.1696712970733643
    5. 'est' → logprob: -3.7946712970733643
    6. 'u' → logprob: -4.044671535491943
    7. ')' → logprob: -4.169671535491943
    8. '[' → logprob: -4.294671535491943
    9. ''s' → logprob: -4.294671535491943
    10. 'n' → logprob: -4.294671535491943

Token 21: ' plus' (ID: 2932)
  Prédit: 'bien'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bien' → logprob: -1.0286660194396973
    2. ' bien' → logprob: -1.5286660194396973
    3. ' mieux' → logprob: -2.4036660194396973
    4. 'par' → logprob: -2.5286660194396973
    5. 'pas' → logprob: -2.7786660194396973
    6. ' correct' → logprob: -3.5286660194396973
    7. ' parfait' → logprob: -3.6536660194396973
    8. '```' → logprob: -4.028666019439697
    9. ' pas' → logprob: -4.403666019439697
    10. 'correct' → logprob: -4.528666019439697

Token 22: ' simple' (ID: 4705)
  Prédit: 'pr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pr' → logprob: -0.44997212290763855
    2. 'pro' → logprob: -1.449972152709961
    3. 'simple' → logprob: -2.949972152709961
    4. '```' → logprob: -4.074972152709961
    5. ' simple' → logprob: -4.199972152709961
    6. 'fac' → logprob: -4.324972152709961
    7. ' pratique' → logprob: -4.699972152709961
    8. 'comm' → logprob: -5.949972152709961
    9. ' facile' → logprob: -6.324972152709961
    10. 'com' → logprob: -6.449972152709961

Token 23: '
' (ID: 198)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.909866988658905
    2. 'for' → logprob: -1.4098670482635498
    3. '[' → logprob: -2.03486704826355
    4. '.' → logprob: -2.90986704826355
    5. 'i' → logprob: -3.65986704826355
    6. 'a' → logprob: -4.034866809844971
    7. '#' → logprob: -4.159866809844971
    8. 's' → logprob: -4.159866809844971
    9. 'f' → logprob: -4.534866809844971
    10. 'n' → logprob: -4.534866809844971

Token 24: 'val' (ID: 1105)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.840400755405426
    2. 'for' → logprob: -0.965400755405426
    3. 's' → logprob: -2.7154006958007812
    4. 'a' → logprob: -3.0904006958007812
    5. 'c' → logprob: -3.5904006958007812
    6. 'result' → logprob: -4.590400695800781
    7. 'count' → logprob: -4.840400695800781
    8. 't' → logprob: -5.715400695800781
    9. 'f' → logprob: -5.840400695800781
    10. 'i' → logprob: -5.965400695800781

Token 25: 'eurs' (ID: 17634)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.06924512982368469
    2. 'eurs' → logprob: -2.9442451000213623
    3. 'ues' → logprob: -4.819245338439941
    4. '[' → logprob: -5.944245338439941
    5. 'es' → logprob: -6.694245338439941
    6. '=' → logprob: -6.694245338439941
    7. 'eur' → logprob: -7.819245338439941
    8. 'e' → logprob: -7.944245338439941
    9. 'v' → logprob: -9.569245338439941
    10. '_' → logprob: -10.069245338439941

Token 26: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.7807335257530212
    2. '[' → logprob: -0.9057335257530212
    3. ' =' → logprob: -2.405733585357666
    4. '=' → logprob: -3.905733585357666
    5. '[:]' → logprob: -4.155733585357666
    6. 's' → logprob: -6.280733585357666
    7. ')' → logprob: -6.780733585357666
    8. '.' → logprob: -6.780733585357666
    9. '[]' → logprob: -7.155733585357666
    10. '_val' → logprob: -7.155733585357666

Token 27: ' []
' (ID: 8911)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -1.4251878261566162
    2. ' [' → logprob: -1.6751878261566162
    3. ' []' → logprob: -1.9251878261566162
    4. ' list' → logprob: -2.050187826156616
    5. '[]' → logprob: -2.300187826156616
    6. '[' → logprob: -2.425187826156616
    7. '[list' → logprob: -2.800187826156616
    8. '[v' → logprob: -3.175187826156616
    9. '[int' → logprob: -5.675188064575195
    10. 'v' → logprob: -7.175188064575195

Token 28: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0015117661096155643
    2. ' for' → logprob: -6.501511573791504
    3. '=' → logprob: -12.751511573791504
    4. 'f' → logprob: -13.251511573791504
    5. ')' → logprob: -14.001511573791504
    6. '_' → logprob: -14.126511573791504
    7. 'i' → logprob: -14.126511573791504
    8. '[' → logprob: -14.251511573791504
    9. 'v' → logprob: -15.251511573791504
    10. '	for' → logprob: -15.376511573791504

Token 29: ' elem' (ID: 23108)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.47863492369651794
    2. ' ' → logprob: -1.2286349534988403
    3. ' _' → logprob: -2.478634834289551
    4. ' v' → logprob: -6.228634834289551
    5. '_' → logprob: -7.103634834289551
    6. ' val' → logprob: -7.478634834289551
    7. 'i' → logprob: -8.72863483428955
    8. ' ' → logprob: -8.97863483428955
    9. '  ' → logprob: -9.85363483428955
    10. ' valeur' → logprob: -10.60363483428955

Token 30: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.04349830374121666
    2. 'in' → logprob: -3.1684982776641846
    3. ' ' → logprob: -7.918498516082764
    4. '  ' → logprob: -9.918498039245605
    5. '_' → logprob: -10.543498039245605
    6. 's' → logprob: -10.918498039245605
    7. ' i' → logprob: -11.543498039245605
    8. '	in' → logprob: -12.543498039245605
    9. ',' → logprob: -12.668498039245605
    10. ' ' → logprob: -12.793498039245605

Token 31: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.3868785798549652
    2. ' v' → logprob: -1.1368786096572876
    3. ' range' → logprob: -12.886878967285156
    4. 'range' → logprob: -13.261878967285156
    5. ' ' → logprob: -13.886878967285156
    6. '	v' → logprob: -14.386878967285156
    7. ')v' → logprob: -14.761878967285156
    8. '?v' → logprob: -15.136878967285156
    9. 'input' → logprob: -15.886878967285156
    10. '(v' → logprob: -15.886878967285156

Token 32: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0007442336063832045
    2. ' :' → logprob: -7.250744342803955
    3. ':**' → logprob: -11.500743865966797
    4. ':
' → logprob: -12.000743865966797
    5. '[:]' → logprob: -12.250743865966797
    6. '[:' → logprob: -12.875743865966797
    7. '):' → logprob: -13.125743865966797
    8. '[' → logprob: -13.500743865966797
    9. ' in' → logprob: -13.875743865966797
    10. '<|end|>' → logprob: -14.000743865966797

Token 33: '   ' (ID: 271)
  Prédit: ' valeurs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' valeurs' → logprob: -0.46188127994537354
    2. '   ' → logprob: -1.2118812799453735
    3. ' val' → logprob: -3.086881160736084
    4. '    
' → logprob: -4.711881160736084
    5. 'val' → logprob: -4.961881160736084
    6. '    ' → logprob: -5.461881160736084
    7. ' 
' → logprob: -6.461881160736084
    8. ' valeur' → logprob: -7.086881160736084
    9. '```' → logprob: -7.336881160736084
    10. ' vaut' → logprob: -7.711881160736084

Token 34: ' valeurs' (ID: 73668)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.053843915462493896
    2. ' valeurs' → logprob: -3.0538439750671387
    3. ' val' → logprob: -5.803843975067139
    4. '   ' → logprob: -6.303843975067139
    5. ' vale' → logprob: -9.05384349822998
    6. ' valeur' → logprob: -9.67884349822998
    7. '```' → logprob: -10.05384349822998
    8. 'int' → logprob: -10.67884349822998
    9. 'v' → logprob: -10.80384349822998
    10. ' ' → logprob: -10.80384349822998

Token 35: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.5759534239768982
    2. '.' → logprob: -0.8259534239768982
    3. '.extend' → logprob: -12.575953483581543
    4. '.add' → logprob: -12.950953483581543
    5. ' .' → logprob: -13.450953483581543
    6. '.app' → logprob: -13.450953483581543
    7. 'append' → logprob: -13.700953483581543
    8. '.Append' → logprob: -14.200953483581543
    9. '.push' → logprob: -14.325953483581543
    10. '.setdefault' → logprob: -14.700953483581543

Token 36: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.12740500271320343
    2. '(' → logprob: -2.1274049282073975
    3. '(elem' → logprob: -8.002405166625977
    4. '(float' → logprob: -9.377405166625977
    5. '(
' → logprob: -10.752405166625977
    6. 'int' → logprob: -11.377405166625977
    7. '(eval' → logprob: -11.877405166625977
    8. '((' → logprob: -12.752405166625977
    9. '(

' → logprob: -13.002405166625977
    10. ' (' → logprob: -13.002405166625977

Token 37: '(elem' (ID: 61564)
  Prédit: '(elem'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(elem' → logprob: -0.5760495066642761
    2. '(' → logprob: -0.8260495066642761
    3. ' (' → logprob: -9.8260498046875
    4. ')' → logprob: -11.0760498046875
    5. '(
' → logprob: -11.3260498046875
    6. 'elem' → logprob: -11.8260498046875
    7. ' )' → logprob: -11.9510498046875
    8. ' ' → logprob: -12.7010498046875
    9. '(ele' → logprob: -13.3260498046875
    10. '	elem' → logprob: -13.3260498046875

Token 38: '))
' (ID: 2210)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5759585499763489
    2. '))' → logprob: -0.8259585499763489
    3. ')))' → logprob: -11.700958251953125
    4. ' ))' → logprob: -12.575958251953125
    5. ')
' → logprob: -13.075958251953125
    6. '))
' → logprob: -13.075958251953125
    7. ' )' → logprob: -13.700958251953125
    8. '),' → logprob: -14.575958251953125
    9. '   ' → logprob: -15.075958251953125
    10. ' ' → logprob: -15.450958251953125

Token 39: 'val' (ID: 1105)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.048375129699707
    2. '[' → logprob: -1.173375129699707
    3. ' ' → logprob: -2.548375129699707
    4. 'n' → logprob: -2.923375129699707
    5. '.' → logprob: -3.173375129699707
    6. ')' → logprob: -3.298375129699707
    7. 'for' → logprob: -3.298375129699707
    8. '<|end|>' → logprob: -3.548375129699707
    9. '```' → logprob: -4.673375129699707
    10. 'print' → logprob: -4.923375129699707

Token 40: 'eurs' (ID: 17634)
  Prédit: 'eurs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'eurs' → logprob: -0.00020616286201402545
    2. 'e' → logprob: -8.500205993652344
    3. 'eur' → logprob: -14.375205993652344
    4. 'eux' → logprob: -14.500205993652344
    5. '(e' → logprob: -14.875205993652344
    6. 'eu' → logprob: -15.000205993652344
    7. 'ers' → logprob: -15.250205993652344
    8. '_e' → logprob: -15.875205993652344
    9. 'uers' → logprob: -15.875205993652344
    10. '```' → logprob: -15.875205993652344

Token 41: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.39503559470176697
    2. '.' → logprob: -1.5200356245040894
    3. '<|end|>' → logprob: -2.3950355052948
    4. '```' → logprob: -5.270035743713379
    5. '[
' → logprob: -6.270035743713379
    6. '[:]' → logprob: -6.770035743713379
    7. ')' → logprob: -6.895035743713379
    8. '[len' → logprob: -6.895035743713379
    9. '
' → logprob: -7.020035743713379
    10. '\[' → logprob: -7.020035743713379

Token 42: ' sorted' (ID: 20099)
  Prédit: ' sorted'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sorted' → logprob: -0.010582122020423412
    2. 'sorted' → logprob: -4.635581970214844
    3. ' list' → logprob: -7.260581970214844
    4. ' [' → logprob: -9.760581970214844
    5. ' []' → logprob: -10.885581970214844
    6. ' sort' → logprob: -11.635581970214844
    7. '[' → logprob: -11.760581970214844
    8. 'list' → logprob: -11.760581970214844
    9. ' ' → logprob: -12.010581970214844
    10. ' val' → logprob: -12.135581970214844

Token 43: '(val' (ID: 17391)
  Prédit: '(val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(val' → logprob: -0.1602601855993271
    2. '(' → logprob: -1.9102602005004883
    3. '(values' → logprob: -11.785260200500488
    4. '(v' → logprob: -12.160260200500488
    5. '(vals' → logprob: -12.410260200500488
    6. '(valor' → logprob: -12.535260200500488
    7. '((' → logprob: -12.785260200500488
    8. '(`' → logprob: -13.035260200500488
    9. '(
' → logprob: -13.160260200500488
    10. '(

' → logprob: -13.410260200500488

Token 44: 'eurs' (ID: 17634)
  Prédit: 'eurs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'eurs' → logprob: -0.00010640407708706334
    2. 'e' → logprob: -9.375106811523438
    3. 'eur' → logprob: -11.125106811523438
    4. 'uers' → logprob: -12.875106811523438
    5. '(e' → logprob: -13.500106811523438
    6. 'reurs' → logprob: -13.625106811523438
    7. 'leurs' → logprob: -14.750106811523438
    8. 'ue' → logprob: -15.375106811523438
    9. '(' → logprob: -15.500106811523438
    10. 'œurs' → logprob: -15.500106811523438

Token 45: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1398757123970427e-05
    2. '))' → logprob: -11.875011444091797
    3. ' )' → logprob: -13.500011444091797
    4. ',' → logprob: -13.500011444091797
    5. '())' → logprob: -14.375011444091797
    6. '()' → logprob: -14.750011444091797
    7. ')
' → logprob: -15.250011444091797
    8. '(' → logprob: -15.375011444091797
    9. ',)' → logprob: -16.875011444091797
    10. ')`' → logprob: -17.125011444091797

Token 46: ' ' (ID: 220)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.561011552810669
    2. '#' → logprob: -2.311011552810669
    3. 'for' → logprob: -2.311011552810669
    4. '
' → logprob: -2.686011552810669
    5. '<|end|>' → logprob: -2.936011552810669
    6. '.' → logprob: -4.18601131439209
    7. ')' → logprob: -4.18601131439209
    8. '(' → logprob: -4.31101131439209
    9. ',' → logprob: -4.81101131439209
    10. 'print' → logprob: -4.93601131439209

Token 47: ' #' (ID: 1069)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.6441935300827026
    2. '
' → logprob: -1.8941935300827026
    3. '#' → logprob: -2.644193649291992
    4. '.' → logprob: -3.019193649291992
    5. 'for' → logprob: -3.019193649291992
    6. '<|end|>' → logprob: -3.019193649291992
    7. '(' → logprob: -3.769193649291992
    8. ')' → logprob: -4.269193649291992
    9. ',' → logprob: -4.519193649291992
    10. '\n' → logprob: -4.769193649291992

Token 48: ' l' (ID: 305)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.17894043028354645
    2. '(' → logprob: -3.428940534591675
    3. 'print' → logprob: -3.678940534591675
    4. ')' → logprob: -4.053940296173096
    5. ' 
' → logprob: -4.053940296173096
    6. '[' → logprob: -4.178940296173096
    7. '<|end|>' → logprob: -4.803940296173096
    8. '  
' → logprob: -5.053940296173096
    9. ' (' → logprob: -5.178940296173096
    10. ' for' → logprob: -5.303940296173096

Token 49: ''ordre' (ID: 124753)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.5574333667755127
    2. 'e' → logprob: -1.0574333667755127
    3. ''' → logprob: -3.0574333667755127
    4. ''a' → logprob: -4.807433128356934
    5. '')' → logprob: -5.557433128356934
    6. 'iste' → logprob: -5.557433128356934
    7. 'i' → logprob: -6.057433128356934
    8. 'es' → logprob: -6.057433128356934
    9. ''i' → logprob: -6.182433128356934
    10. ''e' → logprob: -6.182433128356934

Token 50: ' a' (ID: 261)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.2930937111377716
    2. ' ' → logprob: -2.543093681335449
    3. '.' → logprob: -2.668093681335449
    4. ')' → logprob: -4.293093681335449
    5. ',' → logprob: -4.543093681335449
    6. '#' → logprob: -4.793093681335449
    7. ' 
' → logprob: -5.043093681335449
    8. '```' → logprob: -5.043093681335449
    9. '  
' → logprob: -5.293093681335449
    10. '\' → logprob: -5.418093681335449

Token 51: ' priori' (ID: 125681)
  Prédit: 'rr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'rr' → logprob: -0.34606218338012695
    2. 'pp' → logprob: -2.096062183380127
    3. 'ide' → logprob: -3.221062183380127
    4. 'ss' → logprob: -3.471062183380127
    5. 'j' → logprob: -3.846062183380127
    6. 'cc' → logprob: -4.096062183380127
    7. 'ff' → logprob: -5.221062183380127
    8. 'p' → logprob: -5.471062183380127
    9. 'rg' → logprob: -5.471062183380127
    10. 'ssi' → logprob: -5.471062183380127

Token 52: ' important' (ID: 3378)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.39747437834739685
    2. '.' → logprob: -2.5224742889404297
    3. ' ' → logprob: -3.0224742889404297
    4. '<|end|>' → logprob: -3.1474742889404297
    5. ',' → logprob: -3.6474742889404297
    6. ')' → logprob: -3.6474742889404297
    7. 'for' → logprob: -4.02247428894043
    8. '#' → logprob: -4.02247428894043
    9. ':' → logprob: -4.27247428894043
    10. 's' → logprob: -4.77247428894043

Token 53: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.6972558498382568
    2. 'n' → logprob: -2.572255849838257
    3. '[' → logprob: -2.697255849838257
    4. '#' → logprob: -2.947255849838257
    5. ',' → logprob: -3.322255849838257
    6. '
' → logprob: -3.447255849838257
    7. 'i' → logprob: -3.572255849838257
    8. 's' → logprob: -3.697255849838257
    9. 'v' → logprob: -3.822255849838257
    10. ')' → logprob: -3.947255849838257

Token 54: 'min' (ID: 1493)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.1106282472610474
    2. 'i' → logprob: -2.110628128051758
    3. 'a' → logprob: -2.360628128051758
    4. 'n' → logprob: -2.485628128051758
    5. '#' → logprob: -2.610628128051758
    6. 's' → logprob: -3.110628128051758
    7. '[' → logprob: -3.735628128051758
    8. 'v' → logprob: -3.860628128051758
    9. ' 
' → logprob: -3.985628128051758
    10. 'f' → logprob: -4.110628128051758

Token 55: '_val' (ID: 13694)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.22836773097515106
    2. '_val' → logprob: -1.6033676862716675
    3. '_value' → logprob: -7.103367805480957
    4. '_v' → logprob: -7.353367805480957
    5. 'imum' → logprob: -7.978367805480957
    6. '(' → logprob: -8.728367805480957
    7. 'Val' → logprob: -9.353367805480957
    8. '_e' → logprob: -9.478367805480957
    9. 'val' → logprob: -9.603367805480957
    10. '_=' → logprob: -9.603367805480957

Token 56: ' =' (ID: 314)
  Prédit: 'eur'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'eur' → logprob: -0.4058142900466919
    2. ' =' → logprob: -1.405814290046692
    3. '=' → logprob: -3.2808141708374023
    4. '_' → logprob: -4.405814170837402
    5. 'eurs' → logprob: -4.530814170837402
    6. 'ueur' → logprob: -4.655814170837402
    7. 'or' → logprob: -5.030814170837402
    8. '_e' → logprob: -5.655814170837402
    9. 'e' → logprob: -6.155814170837402
    10. 'uer' → logprob: -6.405814170837402

Token 57: ' valeurs' (ID: 73668)
  Prédit: ' valeurs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' valeurs' → logprob: -0.2552715241909027
    2. 'val' → logprob: -1.505271553993225
    3. ' float' → logprob: -6.7552714347839355
    4. ' min' → logprob: -7.5052714347839355
    5. 'float' → logprob: -7.6302714347839355
    6. 'min' → logprob: -7.7552714347839355
    7. ' ' → logprob: -8.380271911621094
    8. ' val' → logprob: -9.130271911621094
    9. ' max' → logprob: -9.130271911621094
    10. 'max' → logprob: -9.880271911621094

Token 58: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.00013095269969198853
    2. '[-' → logprob: -9.750130653381348
    3. '[:]' → logprob: -11.000130653381348
    4. '.' → logprob: -11.250130653381348
    5. ' [' → logprob: -11.750130653381348
    6. '[:' → logprob: -11.875130653381348
    7. '[min' → logprob: -12.250130653381348
    8. '[]' → logprob: -12.500130653381348
    9. '[
' → logprob: -12.500130653381348
    10. '[:-' → logprob: -13.000130653381348

Token 59: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00021259987261146307
    2. ' ' → logprob: -8.750212669372559
    3. '1' → logprob: -10.000212669372559
    4. '-' → logprob: -12.500212669372559
    5. ']' → logprob: -13.375212669372559
    6. '   ' → logprob: -14.375212669372559
    7. '00' → logprob: -15.062712669372559
    8. ')' → logprob: -15.437712669372559
    9. ':' → logprob: -15.437712669372559
    10. '2' → logprob: -15.500212669372559

Token 60: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.44814735651016235
    2. ')' → logprob: -1.0731472969055176
    3. '<|end|>' → logprob: -4.323147296905518
    4. ' ]' → logprob: -5.698147296905518
    5. '+' → logprob: -6.823147296905518
    6. ' )' → logprob: -7.073147296905518
    7. ')]' → logprob: -8.948147773742676
    8. ' ' → logprob: -9.073147773742676
    9. '<|end|>' → logprob: -9.323147773742676
    10. ',' → logprob: -10.198147773742676

Token 61: ' ' (ID: 220)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 62: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 63: ' On' (ID: 2160)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.3400076627731323
    2. ' valeurs' → logprob: -2.215007781982422
    3. ' val' → logprob: -3.215007781982422
    4. ' ' → logprob: -3.465007781982422
    5. 'max' → logprob: -3.965007781982422
    6. 'min' → logprob: -4.090007781982422
    7. 'values' → logprob: -4.340007781982422
    8. ' min' → logprob: -4.590007781982422
    9. '0' → logprob: -4.715007781982422
    10. 'v' → logprob: -4.715007781982422

Token 64: ' prend' (ID: 37463)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -2.0809543132781982
    2. 'a' → logprob: -2.2059543132781982
    3. ' n' → logprob: -2.2059543132781982
    4. ' pense' → logprob: -2.3309543132781982
    5. ' ' → logprob: -2.4559543132781982
    6. '_' → logprob: -2.9559543132781982
    7. 'n' → logprob: -2.9559543132781982
    8. ' suppose' → logprob: -3.4559543132781982
    9. 's' → logprob: -3.7059543132781982
    10. ' veut' → logprob: -3.9559543132781982

Token 65: ' la' (ID: 557)
  Prédit: ' la'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.5167937874794006
    2. '<|end|>' → logprob: -1.6417937278747559
    3. ' le' → logprob: -2.641793727874756
    4. ' ' → logprob: -3.016793727874756
    5. 'le' → logprob: -3.016793727874756
    6. ' l' → logprob: -4.891793727874756
    7. 'la' → logprob: -5.141793727874756
    8. 'the' → logprob: -5.266793727874756
    9. ' ' → logprob: -5.391793727874756
    10. 'l' → logprob: -5.516793727874756

Token 66: ' première' (ID: 23423)
  Prédit: ' plus'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' plus' → logprob: -0.19714303314685822
    2. 'plus' → logprob: -2.572143077850342
    3. 'prem' → logprob: -2.572143077850342
    4. ' premier' → logprob: -4.447143077850342
    5. ' même' → logprob: -6.072143077850342
    6. ' minimum' → logprob: -6.072143077850342
    7. 'minimum' → logprob: -6.572143077850342
    8. 'val' → logprob: -6.822143077850342
    9. ' première' → logprob: -6.947143077850342
    10. 'm' → logprob: -7.072143077850342

Token 67: ' comme' (ID: 7971)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 68: ' mini' (ID: 15065)
  Prédit: 'ré'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ré' → logprob: -0.8436573147773743
    2. ' référence' → logprob: -1.4686572551727295
    3. 'minimum' → logprob: -2.7186572551727295
    4. 'point' → logprob: -2.8436572551727295
    5. 'la' → logprob: -2.9686572551727295
    6. 'base' → logprob: -3.5936572551727295
    7. 'min' → logprob: -3.7186572551727295
    8. 'le' → logprob: -4.093657493591309
    9. 'val' → logprob: -4.093657493591309
    10. ' minimum' → logprob: -4.468657493591309

Token 69: '
' (ID: 198)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.5141289830207825
    2. ' ' → logprob: -1.7641289234161377
    3. 'e' → logprob: -3.6391289234161377
    4. ',' → logprob: -3.7641289234161377
    5. 's' → logprob: -3.7641289234161377
    6. ' for' → logprob: -3.8891289234161377
    7. 'for' → logprob: -3.8891289234161377
    8. ' _' → logprob: -4.264129161834717
    9. '_val' → logprob: -4.264129161834717
    10. '\' → logprob: -4.514129161834717

Token 70: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.1463152915239334
    2. '
' → logprob: -3.271315336227417
    3. 'max' → logprob: -3.396315336227417
    4. ' for' → logprob: -3.521315336227417
    5. 'min' → logprob: -4.021315097808838
    6. '  
' → logprob: -5.646315097808838
    7. 's' → logprob: -6.021315097808838
    8. '_' → logprob: -6.771315097808838
    9. 'i' → logprob: -6.771315097808838
    10. 'diff' → logprob: -6.771315097808838

Token 71: ' j' (ID: 441)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.11806822568178177
    2. ' val' → logprob: -2.743068218231201
    3. 'i' → logprob: -3.743068218231201
    4. 'val' → logprob: -4.618068218231201
    5. ' elem' → logprob: -4.868068218231201
    6. ' v' → logprob: -6.368068218231201
    7. ' valeur' → logprob: -6.493068218231201
    8. 'elem' → logprob: -7.118068218231201
    9. ' value' → logprob: -7.993068218231201
    10. ' idx' → logprob: -8.36806869506836

Token 72: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.03848562389612198
    2. 'in' → logprob: -3.288485527038574
    3. ' ' → logprob: -8.038485527038574
    4. ',' → logprob: -9.663485527038574
    5. 'n' → logprob: -11.413485527038574
    6. '+' → logprob: -11.663485527038574
    7. 'range' → logprob: -11.663485527038574
    8. '	in' → logprob: -12.913485527038574
    9. '_' → logprob: -13.100985527038574
    10. '  ' → logprob: -13.100985527038574

Token 73: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.031961433589458466
    2. 'range' → logprob: -4.156961441040039
    3. ' valeurs' → logprob: -4.156961441040039
    4. ' ' → logprob: -10.156961441040039
    5. '  ' → logprob: -11.281961441040039
    6. '   ' → logprob: -11.281961441040039
    7. 'val' → logprob: -11.281961441040039
    8. '[' → logprob: -11.406961441040039
    9. '(range' → logprob: -12.031961441040039
    10. ' valeur' → logprob: -12.281961441040039

Token 74: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.08437951654195786
    2. '(n' → logprob: -2.5843794345855713
    3. '(len' → logprob: -5.20937967300415
    4. ' (' → logprob: -12.334379196166992
    5. '(
' → logprob: -13.584379196166992
    6. '(i' → logprob: -13.959379196166992
    7. '(s' → logprob: -14.334379196166992
    8. '(length' → logprob: -14.459379196166992
    9. '(min' → logprob: -14.709379196166992
    10. '(l' → logprob: -14.709379196166992

Token 75: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.013550751842558384
    2. 'n' → logprob: -4.888550758361816
    3. 'len' → logprob: -5.388550758361816
    4. ' ' → logprob: -7.263550758361816
    5. ' n' → logprob: -8.263550758361816
    6. '   ' → logprob: -8.638550758361816
    7. ' len' → logprob: -9.013550758361816
    8. '(' → logprob: -9.638550758361816
    9. '(n' → logprob: -11.388550758361816
    10. '0' → logprob: -11.513550758361816

Token 76: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.020505573600530624
    2. ',n' → logprob: -4.270505428314209
    3. ',len' → logprob: -5.645505428314209
    4. ' ,' → logprob: -5.895505428314209
    5. ' n' → logprob: -10.770505905151367
    6. 'n' → logprob: -11.645505905151367
    7. 'len' → logprob: -13.145505905151367
    8. ' len' → logprob: -13.395505905151367
    9. ',length' → logprob: -14.020505905151367
    10. ' ' → logprob: -14.145505905151367

Token 77: ' len' (ID: 4631)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.08928687125444412
    2. ' n' → logprob: -2.5892868041992188
    3. 'len' → logprob: -4.714286804199219
    4. ' len' → logprob: -6.589286804199219
    5. '   ' → logprob: -14.214286804199219
    6. ' ' → logprob: -14.589286804199219
    7. '	n' → logprob: -14.714286804199219
    8. ' ' → logprob: -16.08928680419922
    9. '  ' → logprob: -16.21428680419922
    10. '    ' → logprob: -16.33928680419922

Token 78: '(val' (ID: 17391)
  Prédit: '(val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(val' → logprob: -0.001173321157693863
    2. '(' → logprob: -6.751173496246338
    3. 'val' → logprob: -13.50117301940918
    4. '(vals' → logprob: -13.62617301940918
    5. ' (' → logprob: -16.12617301940918
    6. ')' → logprob: -16.62617301940918
    7. '(

' → logprob: -16.75117301940918
    8. '(values' → logprob: -16.87617301940918
    9. ',val' → logprob: -16.87617301940918
    10. '(
' → logprob: -17.25117301940918

Token 79: 'eurs' (ID: 17634)
  Prédit: 'eurs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'eurs' → logprob: -0.380016565322876
    2. '_val' → logprob: -1.505016565322876
    3. 'val' → logprob: -2.630016565322876
    4. '(val' → logprob: -4.380016326904297
    5. 'urs' → logprob: -5.880016326904297
    6. 'ues' → logprob: -6.130016326904297
    7. 'eur' → logprob: -6.255016326904297
    8. 's' → logprob: -7.255016326904297
    9. 'al' → logprob: -7.880016326904297
    10. 'ur' → logprob: -8.380016326904297

Token 80: ')):
' (ID: 22530)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.004043137189000845
    2. ')):' → logprob: -5.629043102264404
    3. ')' → logprob: -8.504043579101562
    4. ' ):' → logprob: -8.504043579101562
    5. '):
' → logprob: -10.754043579101562
    6. '))' → logprob: -11.379043579101562
    7. '():' → logprob: -13.754043579101562
    8. ']):' → logprob: -13.754043579101562
    9. ')):
' → logprob: -14.129043579101562
    10. ':' → logprob: -14.254043579101562

Token 81: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.021762622520327568
    2. ':
' → logprob: -4.896762847900391
    3. ' ' → logprob: -5.271762847900391
    4. '   ' → logprob: -5.396762847900391
    5. ' :' → logprob: -5.771762847900391
    6. ' :
' → logprob: -7.521762847900391
    7. ' 
' → logprob: -9.14676284790039
    8. ' ' → logprob: -9.27176284790039
    9. ' if' → logprob: -9.39676284790039
    10. '<|end|>' → logprob: -9.52176284790039

Token 82: ' #' (ID: 1069)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.7860901951789856
    2. ' ' → logprob: -1.2860901355743408
    3. ':' → logprob: -1.9110901355743408
    4. '   ' → logprob: -3.036090135574341
    5. 'if' → logprob: -3.786090135574341
    6. ' ' → logprob: -4.28609037399292
    7. '    ' → logprob: -4.78609037399292
    8. '<|end|>' → logprob: -4.78609037399292
    9. ' :' → logprob: -5.53609037399292
    10. ' 
' → logprob: -5.78609037399292

Token 83: ' je' (ID: 1264)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.22937269508838654
    2. ' if' → logprob: -1.7293727397918701
    3. '   ' → logprob: -3.60437273979187
    4. ' ' → logprob: -9.47937297821045
    5. '```' → logprob: -9.85437297821045
    6. '  ' → logprob: -9.97937297821045
    7. 'val' → logprob: -10.22937297821045
    8. 'min' → logprob: -10.72937297821045
    9. 'diff' → logprob: -11.10437297821045
    10. '    ' → logprob: -11.22937297821045

Token 84: ' pense' (ID: 29077)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.2688264846801758
    2. ' if' → logprob: -2.143826484680176
    3. 'if' → logprob: -2.268826484680176
    4. 'n' → logprob: -5.268826484680176
    5. 's' → logprob: -6.268826484680176
    6. ' f' → logprob: -6.268826484680176
    7. '_' → logprob: -6.268826484680176
    8. 'for' → logprob: -7.018826484680176
    9. '   ' → logprob: -7.768826484680176
    10. ' ' → logprob: -8.143826484680176

Token 85: ' qu' (ID: 474)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.659531831741333
    2. ' ' → logprob: -1.784531831741333
    3. ' if' → logprob: -2.159531831741333
    4. '    ' → logprob: -2.284531831741333
    5. 'if' → logprob: -3.909531831741333
    6. ':' → logprob: -4.034531593322754
    7. '  ' → logprob: -4.159531593322754
    8. ' ' → logprob: -4.659531593322754
    9. ' :' → logprob: -4.784531593322754
    10. '       ' → logprob: -5.534531593322754

Token 86: ''il' (ID: 14683)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.690732479095459
    2. 'if' → logprob: -0.815732479095459
    3. ' val' → logprob: -4.190732479095459
    4. '   ' → logprob: -4.690732479095459
    5. 'val' → logprob: -4.690732479095459
    6. ' ' → logprob: -4.940732479095459
    7. ' abs' → logprob: -5.690732479095459
    8. 'e' → logprob: -6.315732479095459
    9. '  ' → logprob: -6.440732479095459
    10. 'abs' → logprob: -6.690732479095459

Token 87: ' faut' (ID: 17821)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.10306453704833984
    2. ' manque' → logprob: -3.10306453704834
    3. ' faut' → logprob: -4.10306453704834
    4. ' faudrait' → logprob: -4.22806453704834
    5. ' f' → logprob: -5.10306453704834
    6. 's' → logprob: -6.10306453704834
    7. 'man' → logprob: -6.10306453704834
    8. 'fa' → logprob: -6.10306453704834
    9. ' faud' → logprob: -6.10306453704834
    10. 'n' → logprob: -6.85306453704834

Token 88: ' moyen' (ID: 46111)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.045780934393405914
    2. ' if' → logprob: -3.795780897140503
    3. ' vérifier' → logprob: -5.295781135559082
    4. 'min' → logprob: -5.670781135559082
    5. 'v' → logprob: -5.795781135559082
    6. ' comparer' → logprob: -6.170781135559082
    7. 'contin' → logprob: -6.670781135559082
    8. 'calcul' → logprob: -6.920781135559082
    9. 'val' → logprob: -7.170781135559082
    10. 'faire' → logprob: -7.170781135559082

Token 89: 'ner' (ID: 1247)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.7421395778656006
    2. '_' → logprob: -0.8671395778656006
    3. '   ' → logprob: -3.1171395778656006
    4. ' ' → logprob: -4.36713981628418
    5. '_val' → logprob: -4.61713981628418
    6. 'e' → logprob: -4.74213981628418
    7. 'iser' → logprob: -5.49213981628418
    8. 'à' → logprob: -5.74213981628418
    9. '```' → logprob: -6.24213981628418
    10. 'a' → logprob: -6.36713981628418

Token 90: '
' (ID: 198)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.9822933673858643
    2. '_' → logprob: -1.1072933673858643
    3. '+' → logprob: -2.3572933673858643
    4. ',' → logprob: -2.7322933673858643
    5. '=' → logprob: -3.2322933673858643
    6. ')' → logprob: -4.357293128967285
    7. '   ' → logprob: -4.357293128967285
    8. 'val' → logprob: -4.482293128967285
    9. '*' → logprob: -5.107293128967285
    10. '-' → logprob: -5.107293128967285

Token 91: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0595109462738037
    2. '_' → logprob: -1.1845109462738037
    3. ' ' → logprob: -2.5595109462738037
    4. '    ' → logprob: -2.6845109462738037
    5. ' if' → logprob: -2.6845109462738037
    6. ',' → logprob: -3.8095109462738037
    7. 'if' → logprob: -4.184511184692383
    8. 'min' → logprob: -4.184511184692383
    9. 'val' → logprob: -4.434511184692383
    10. ' ,' → logprob: -4.434511184692383

Token 92: ' min' (ID: 1349)
  Prédit: ' min'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' min' → logprob: -1.2782248258590698
    2. 'min' (adapté à ' min') → logprob: -1.2782248258590698
    3. ' if' → logprob: -1.5282248258590698
    4. '   ' → logprob: -1.7782248258590698
    5. 'if' → logprob: -3.5282249450683594
    6. 'val' → logprob: -4.278224945068359
    7. '    ' → logprob: -5.153224945068359
    8. ' val' → logprob: -5.653224945068359
    9. ' ' → logprob: -7.028224945068359
    10. '    
' → logprob: -7.778224945068359

Token 93: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.201494038105011
    2. '_' → logprob: -1.7014939785003662
    3. '_=' → logprob: -10.576494216918945
    4. '_diff' → logprob: -11.201494216918945
    5. 'Val' → logprob: -11.326494216918945
    6. 'val' → logprob: -11.451494216918945
    7. '_VAL' → logprob: -12.826494216918945
    8. '_value' → logprob: -13.201494216918945
    9. '_-' → logprob: -13.451494216918945
    10. '__' → logprob: -13.451494216918945

Token 94: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2880486249923706
    2. '=' → logprob: -1.4130486249923706
    3. ' +=' → logprob: -5.53804874420166
    4. '+=' → logprob: -5.91304874420166
    5. '+' → logprob: -9.16304874420166
    6. '=min' → logprob: -9.78804874420166
    7. ',' → logprob: -10.78804874420166
    8. ' +' → logprob: -11.03804874420166
    9. ' -=' → logprob: -11.03804874420166
    10. '-' → logprob: -12.28804874420166

Token 95: ' (' (ID: 350)
  Prédit: ' min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.08002947270870209
    2. '(min' → logprob: -3.5800294876098633
    3. 'min' → logprob: -3.8300294876098633
    4. ' max' → logprob: -3.9550294876098633
    5. ' (' → logprob: -4.955029487609863
    6. '(max' → logprob: -7.455029487609863
    7. 'max' → logprob: -7.830029487609863
    8. '(' → logprob: -9.955029487609863
    9. ' ' → logprob: -10.330029487609863
    10. ' ' → logprob: -10.580029487609863

Token 96: 'min' (ID: 1493)
  Prédit: 'min'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.010022268630564213
    2. ' min' → logprob: -4.635022163391113
    3. 'val' → logprob: -8.385022163391113
    4. '(min' → logprob: -10.635022163391113
    5. '	min' → logprob: -12.510022163391113
    6. 'max' → logprob: -12.635022163391113
    7. ' val' → logprob: -12.885022163391113
    8. '   ' → logprob: -14.135022163391113
    9. '[min' → logprob: -14.510022163391113
    10. ',min' → logprob: -14.635022163391113

Token 97: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -4.961759259458631e-06
    2. '_' → logprob: -12.500004768371582
    3. '(_' → logprob: -14.625004768371582
    4. '_min' → logprob: -15.125004768371582
    5. 'val' → logprob: -15.250004768371582
    6. ' _' → logprob: -16.3750057220459
    7. '(val' → logprob: -16.8750057220459
    8. ')_' → logprob: -17.2500057220459
    9. '_va' → logprob: -17.3750057220459
    10. '(min' → logprob: -17.6250057220459

Token 98: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.08894240111112595
    2. '+' → logprob: -2.463942289352417
    3. ' ' → logprob: -13.338942527770996
    4. '+j' → logprob: -14.588942527770996
    5. ' ' → logprob: -15.088942527770996
    6. '+n' → logprob: -16.33894157409668
    7. ' plus' → logprob: -16.71394157409668
    8. ' -' → logprob: -16.83894157409668
    9. ' *' → logprob: -17.08894157409668
    10. '*' → logprob: -17.21394157409668

Token 99: ' valeurs' (ID: 73668)
  Prédit: ' valeurs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' valeurs' → logprob: -0.2812712788581848
    2. 'val' → logprob: -1.40627121925354
    3. ' val' → logprob: -10.031270980834961
    4. ' ' → logprob: -11.031270980834961
    5. 'values' → logprob: -11.031270980834961
    6. ' valores' → logprob: -11.781270980834961
    7. '_val' → logprob: -12.281270980834961
    8. '[val' → logprob: -12.281270980834961
    9. ' ' → logprob: -12.406270980834961
    10. ' valeur' → logprob: -12.406270980834961

Token 100: '[j' (ID: 7895)
  Prédit: '[j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[j' → logprob: -6.2729995988775045e-06
    2. '[' → logprob: -12.000006675720215
    3. '[i' → logprob: -17.6250057220459
    4. ' [' → logprob: -19.1250057220459
    5. '[val' → logprob: -19.1250057220459
    6. '[js' → logprob: -19.8750057220459
    7. '[
' → logprob: -20.1250057220459
    8. '[J' → logprob: -20.1250057220459
    9. '[v' → logprob: -20.3750057220459
    10. '[q' → logprob: -20.6250057220459

Token 101: '])' (ID: 4636)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0014770099660381675
    2. ')//' → logprob: -6.876477241516113
    3. ' )' → logprob: -7.751477241516113
    4. ')/' → logprob: -11.251477241516113
    5. '）' → logprob: -15.376477241516113
    6. ')#' → logprob: -15.626477241516113
    7. '//' → logprob: -15.876477241516113
    8. ']' → logprob: -16.126476287841797
    9. '))' → logprob: -16.126476287841797
    10. ' ' → logprob: -16.876476287841797

Token 102: ' /' (ID: 820)
  Prédit: ' //'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.843130886554718
    2. ')' → logprob: -1.0931308269500732
    3. '//' → logprob: -2.0931308269500732
    4. ' /' → logprob: -2.8431308269500732
    5. '/' → logprob: -3.4681308269500732
    6. '2' → logprob: -4.843131065368652
    7. ' ' → logprob: -5.593131065368652
    8. ')//' → logprob: -5.968131065368652
    9. ' j' → logprob: -6.468131065368652
    10. ' )' → logprob: -6.843131065368652

Token 103: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.007581897545605898
    2. ' ' → logprob: -5.38258171081543
    3. '(j' → logprob: -6.00758171081543
    4. '(' → logprob: -7.88258171081543
    5. ' (' → logprob: -9.38258171081543
    6. 'j' → logprob: -10.50758171081543
    7. '   ' → logprob: -13.13258171081543
    8. '(len' → logprob: -13.25758171081543
    9. ' j' → logprob: -13.75758171081543
    10. '[j' → logprob: -14.13258171081543

Token 104: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.3071362376213074
    2. '(j' → logprob: -1.4321362972259521
    3. '(' → logprob: -3.807136297225952
    4. 'j' → logprob: -5.932136058807373
    5. ' (' → logprob: -8.057136535644531
    6. ' ' → logprob: -8.182136535644531
    7. '(len' → logprob: -9.057136535644531
    8. 'len' → logprob: -11.182136535644531
    9. '[j' → logprob: -11.182136535644531
    10. '   ' → logprob: -11.932136535644531

Token 105: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 106: ' moyenne' (ID: 57480)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.8226075768470764
    2. '<|end|>' → logprob: -0.8226075768470764
    3. '
' → logprob: -2.5726075172424316
    4. ' ' → logprob: -3.6976075172424316
    5. '\n' → logprob: -4.947607517242432
    6. '*' → logprob: -5.447607517242432
    7. '+' → logprob: -5.822607517242432
    8. '```' → logprob: -6.947607517242432
    9. '#' → logprob: -7.197607517242432
    10. '<|end|>' → logprob: -7.197607517242432

Token 107: ' progressive' (ID: 35678)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.1514737606048584
    2. ')' → logprob: -2.5264737606048584
    3. '<|end|>' → logprob: -3.0264737606048584
    4. '
' → logprob: -5.7764739990234375
    5. ' ' → logprob: -5.7764739990234375
    6. '#' → logprob: -6.1514739990234375
    7. '\n' → logprob: -7.1514739990234375
    8. ' print' → logprob: -7.4014739990234375
    9. '```' → logprob: -8.026473999023438
    10. '*' → logprob: -8.151473999023438

Token 108: '
 
' (ID: 47812)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00034535606391727924
    2. ')' → logprob: -8.625345230102539
    3. ' print' → logprob: -9.000345230102539
    4. '<|end|>' → logprob: -10.500345230102539
    5. '
' → logprob: -12.250345230102539
    6. '#' → logprob: -12.875345230102539
    7. '#print' → logprob: -13.750345230102539
    8. '(print' → logprob: -14.000345230102539
    9. 'min' → logprob: -14.250345230102539
    10. '```' → logprob: -14.250345230102539

Token 109: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0013104787794873118
    2. ')' → logprob: -7.251310348510742
    3. '#' → logprob: -8.376310348510742
    4. 'min' → logprob: -9.251310348510742
    5. 'for' → logprob: -9.501310348510742
    6. 'if' → logprob: -9.876310348510742
    7. ' print' → logprob: -10.626310348510742
    8. 'n' → logprob: -10.876310348510742
    9. '.' → logprob: -11.251310348510742
    10. '```' → logprob: -11.376310348510742

Token 110: '(min' (ID: 26035)
  Prédit: '(min'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(min' → logprob: -0.10025196522474289
    2. '(' → logprob: -2.3502519130706787
    3. '("("' → logprob: -11.225252151489258
    4. '("' → logprob: -11.475252151489258
    5. '(round' → logprob: -11.725252151489258
    6. '('' → logprob: -12.100252151489258
    7. '(int' → logprob: -12.600252151489258
    8. '(max' → logprob: -13.600252151489258
    9. '((' → logprob: -14.225252151489258
    10. '(sum' → logprob: -14.225252151489258

Token 111: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -2.339278580620885e-06
    2. '_' → logprob: -13.375001907348633
    3. 'val' → logprob: -15.375001907348633
    4. '_VAL' → logprob: -15.375001907348633
    5. '_va' → logprob: -16.125001907348633
    6. '_v' → logprob: -16.625001907348633
    7. '_var' → logprob: -17.250001907348633
    8. '_)' → logprob: -18.125001907348633
    9. ')_' → logprob: -18.250001907348633
    10. ' _' → logprob: -18.375001907348633

Token 112: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.512236498361744e-07
    2. ' )' → logprob: -15.125000953674316
    3. ')`' → logprob: -16.0
    4. '))' → logprob: -16.375
    5. '(' → logprob: -18.25
    6. ')}' → logprob: -19.125
    7. ')
' → logprob: -19.25
    8. '`)' → logprob: -19.875
    9. '）' → logprob: -20.0
    10. '}' → logprob: -20.375

Token 113: ' ' (ID: 220)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6316046118736267
    2. '<|end|>' → logprob: -0.8816046118736267
    3. ' ' → logprob: -4.0066046714782715
    4. '
' → logprob: -4.1316046714782715
    5. '\n' → logprob: -5.1316046714782715
    6. '+' → logprob: -5.7566046714782715
    7. '#' → logprob: -5.8816046714782715
    8. '*' → logprob: -6.1316046714782715
    9. '```' → logprob: -6.6316046714782715
    10. '\' → logprob: -6.7566046714782715

Token 114: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 115: ' affich' (ID: 90179)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7274544835090637
    2. '<|end|>' → logprob: -0.8524544835090637
    3. '\n' → logprob: -3.102454423904419
    4. ' ' → logprob: -3.852454423904419
    5. '
' → logprob: -4.602454662322998
    6. '```' → logprob: -5.352454662322998
    7. '<|end|>' → logprob: -5.977454662322998
    8. '#' → logprob: -6.352454662322998
    9. ' )' → logprob: -6.852454662322998
    10. '\' → logprob: -6.977454662322998

Token 116: 'age' (ID: 477)
  Prédit: 'é'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'é' → logprob: -1.050822138786316
    2. 'e' → logprob: -1.175822138786316
    3. 'er' → logprob: -1.300822138786316
    4. 'age' → logprob: -3.1758222579956055
    5. ')' → logprob: -4.5508222579956055
    6. '(' → logprob: -4.6758222579956055
    7. '()' → logprob: -5.8008222579956055
    8. '(e' → logprob: -6.0508222579956055
    9. 'a' → logprob: -6.6758222579956055
    10. '#' → logprob: -7.6758222579956055

Token 117: ' final' (ID: 1721)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.483135461807251
    2. '<|end|>' → logprob: -1.108135461807251
    3. '
' → logprob: -3.608135461807251
    4. ' ' → logprob: -4.358135223388672
    5. '*' → logprob: -5.983135223388672
    6. '+' → logprob: -6.108135223388672
    7. ' )' → logprob: -6.233135223388672
    8. '#' → logprob: -6.358135223388672
    9. '```' → logprob: -6.483135223388672
    10. '\n' → logprob: -7.233135223388672

Token 118: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3635697066783905
    2. '<|end|>' → logprob: -1.613569736480713
    3. '
' → logprob: -3.113569736480713
    4. ' ' → logprob: -3.613569736480713
    5. '+' → logprob: -4.113569736480713
    6. '*' → logprob: -5.113569736480713
    7. '#' → logprob: -5.613569736480713
    8. '\n' → logprob: -6.613569736480713
    9. '```' → logprob: -6.738569736480713
    10. ' )' → logprob: -7.113569736480713

Token 119: ' j' (ID: 441)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0029173342045396566
    2. '<|end|>' → logprob: -6.002917289733887
    3. ' )' → logprob: -9.127917289733887
    4. '```' → logprob: -9.502917289733887
    5. '\n' → logprob: -9.752917289733887
    6. '
' → logprob: -10.002917289733887
    7. ')
' → logprob: -10.002917289733887
    8. ' ' → logprob: -10.627917289733887
    9. '#' → logprob: -11.002917289733887
    10. '')' → logprob: -11.127917289733887

Token 120: ''espère' (ID: 116557)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 121: ' que' (ID: 661)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 122: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.06844603270292282
    2. 'cela' → logprob: -3.193445920944214
    3. ' c' → logprob: -4.443446159362793
    4. 'ça' → logprob: -4.443446159362793
    5. 'ce' → logprob: -7.318446159362793
    6. ' ça' → logprob: -7.568446159362793
    7. 'vous' → logprob: -9.068446159362793
    8. 'tu' → logprob: -9.443446159362793
    9. ' ce' → logprob: -10.068446159362793
    10. ' cela' → logprob: -10.068446159362793

Token 123: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -1.074376106262207
    2. 'a' → logprob: -1.449376106262207
    3. 'e' → logprob: -1.949376106262207
    4. 'est' → logprob: -1.949376106262207
    5. ''' → logprob: -2.449376106262207
    6. ''a' → logprob: -3.574376106262207
    7. ''s' → logprob: -4.449376106262207
    8. ''ai' → logprob: -5.824376106262207
    9. '#' → logprob: -6.699376106262207
    10. 'ela' → logprob: -7.074376106262207

Token 124: ' ça' (ID: 13590)
  Prédit: 'correct'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'correct' → logprob: -1.0705727338790894
    2. 'ce' → logprob: -1.9455727338790894
    3. 'cela' → logprob: -2.195572853088379
    4. 'tout' → logprob: -2.320572853088379
    5. 'ça' → logprob: -2.445572853088379
    6. 'bon' → logprob: -2.445572853088379
    7. 'bien' → logprob: -3.070572853088379
    8. 'exact' → logprob: -3.570572853088379
    9. 'ok' → logprob: -4.070572853088379
    10. ' ça' → logprob: -4.070572853088379


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 122
Tokens correctement prédits (1ère position, stricte): 39
Tokens correctement prédits (1ère position, avec adaptation): 39
Tokens correctement prédits (top 10): 65
Précision stricte (1ère position): 31.97%
Précision adaptée (1ère position): 31.97%
Précision (top 10): 53.28%
================================================================================
