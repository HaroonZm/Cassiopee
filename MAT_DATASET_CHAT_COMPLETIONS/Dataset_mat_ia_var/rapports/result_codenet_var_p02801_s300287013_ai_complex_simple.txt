================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:30:28
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from functools import reduce
from itertools import chain

c = reduce(lambda x, _: x, chain((input(),), ()), None)
advance = lambda ch: ''.join(map(chr, [(lambda code: code + 1)(ord(ch))]))
print(reduce(str.__add__, map(advance, c)))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' functools' (ID: 142636)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' reduce' (ID: 10389)
  Prédit: 'wrap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'wrap' → logprob: -0.3606022894382477
    2. 'partial' → logprob: -1.3606022596359253
    3. 'reduce' → logprob: -3.610602378845215
    4. ' wraps' → logprob: -4.110602378845215
    5. 'l' → logprob: -6.735602378845215
    6. ' partial' → logprob: -7.610602378845215
    7. 'cached' → logprob: -7.985602378845215
    8. 'cmp' → logprob: -8.235602378845215
    9. 'cache' → logprob: -8.485602378845215
    10. '```' → logprob: -8.985602378845215

Token 4: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.020487118512392044
    2. '(lambda' → logprob: -4.645487308502197
    3. '.' → logprob: -5.270487308502197
    4. ',' → logprob: -5.895487308502197
    5. '\' → logprob: -7.145487308502197
    6. ' (' → logprob: -7.520487308502197
    7. '```' → logprob: -8.020486831665039
    8. 'def' → logprob: -8.645486831665039
    9. 'lambda' → logprob: -8.895486831665039
    10. '`' → logprob: -8.895486831665039

Token 5: 'from' (ID: 2845)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03125377744436264
    2. 'def' → logprob: -4.156253814697266
    3. '\' → logprob: -4.781253814697266
    4. ' ' → logprob: -5.906253814697266
    5. '(
' → logprob: -6.906253814697266
    6. ',' → logprob: -7.156253814697266
    7. '(lambda' → logprob: -7.906253814697266
    8. '```' → logprob: -8.281253814697266
    9. ' (' → logprob: -8.406253814697266
    10. 'd' → logprob: -8.781253814697266

Token 6: ' itertools' (ID: 103178)
  Prédit: ' operator'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' operator' → logprob: -0.2411840558052063
    2. ' itertools' → logprob: -2.1161839962005615
    3. ' math' → logprob: -2.7411839962005615
    4. ' collections' → logprob: -3.8661839962005615
    5. 'operator' → logprob: -4.991184234619141
    6. ' os' → logprob: -7.116184234619141
    7. 'math' → logprob: -7.991184234619141
    8. ' typing' → logprob: -8.49118423461914
    9. 'collections' → logprob: -8.99118423461914
    10. ' ' → logprob: -10.49118423461914

Token 7: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.034414686262607574
    2. 'import' → logprob: -3.409414768218994
    3. '.' → logprob: -7.659414768218994
    4. ' .' → logprob: -9.034414291381836
    5. '.import' → logprob: -9.034414291381836
    6. ' ' → logprob: -10.784414291381836
    7. '	import' → logprob: -10.909414291381836
    8. ' itertools' → logprob: -12.659414291381836
    9. '_import' → logprob: -12.659414291381836
    10. '.im' → logprob: -13.159414291381836

Token 8: ' chain' (ID: 13464)
  Prédit: ' group'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' group' → logprob: -0.8000409603118896
    2. 'group' → logprob: -2.0500409603118896
    3. 'acc' → logprob: -2.3000409603118896
    4. 'count' → logprob: -2.4250409603118896
    5. ' cycle' → logprob: -2.6750409603118896
    6. ' accumulate' → logprob: -3.1750409603118896
    7. 'cycle' → logprob: -3.3000409603118896
    8. ' chain' → logprob: -3.6750409603118896
    9. 'chain' → logprob: -4.175041198730469
    10. 'com' → logprob: -4.300041198730469

Token 9: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.24307125806808472
    2. '.' → logprob: -2.7430713176727295
    3. ',' → logprob: -2.8680713176727295
    4. '(
' → logprob: -3.6180713176727295
    5. '\n' → logprob: -3.7430713176727295
    6. 'def' → logprob: -3.9930713176727295
    7. '\' → logprob: -4.49307107925415
    8. 'import' → logprob: -4.99307107925415
    9. '```' → logprob: -6.36807107925415
    10. ')' → logprob: -6.86807107925415

Token 10: 'c' (ID: 66)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -1.1832228899002075
    2. 'def' → logprob: -1.1832228899002075
    3. '.' → logprob: -1.9332228899002075
    4. ',' → logprob: -2.808222770690918
    5. 'd' → logprob: -3.183222770690918
    6. '```' → logprob: -3.308222770690918
    7. '\' → logprob: -3.558222770690918
    8. '`' → logprob: -3.808222770690918
    9. '\n' → logprob: -4.558222770690918
    10. '(
' → logprob: -4.683222770690918

Token 11: ' =' (ID: 314)
  Prédit: 'hain'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'hain' → logprob: -0.2935590147972107
    2. 'h' → logprob: -1.4185590744018555
    3. 'hai' → logprob: -5.2935590744018555
    4. 'ha' → logprob: -5.4185590744018555
    5. 'ham' → logprob: -7.5435590744018555
    6. 'han' → logprob: -7.6685590744018555
    7. 'ounter' → logprob: -7.6685590744018555
    8. 'hang' → logprob: -8.418559074401855
    9. 'hao' → logprob: -8.918559074401855
    10. 'hair' → logprob: -8.918559074401855

Token 12: ' reduce' (ID: 10389)
  Prédit: ' chain'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' chain' → logprob: -0.20487140119075775
    2. 'chain' → logprob: -1.704871416091919
    3. ' list' → logprob: -6.82987117767334
    4. ' []' → logprob: -7.20487117767334
    5. ' [' → logprob: -7.32987117767334
    6. '[]' → logprob: -8.70487117767334
    7. 'list' → logprob: -9.07987117767334
    8. '(chain' → logprob: -9.32987117767334
    9. '.chain' → logprob: -9.45487117767334
    10. '[' → logprob: -9.57987117767334

Token 13: '(lambda' (ID: 43341)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.390974223613739
    2. '(lambda' → logprob: -1.1409742832183838
    3. '(chain' → logprob: -5.515974044799805
    4. '(operator' → logprob: -10.640974044799805
    5. '(
' → logprob: -10.765974044799805
    6. '((' → logprob: -11.640974044799805
    7. 'lambda' → logprob: -12.890974044799805
    8. '(ch' → logprob: -13.140974044799805
    9. 'chain' → logprob: -13.265974044799805
    10. ' (' → logprob: -13.390974044799805

Token 14: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.0868137776851654
    2. ' a' → logprob: -3.0868136882781982
    3. ' acc' → logprob: -3.7118136882781982
    4. ' ' → logprob: -4.836813926696777
    5. 'x' → logprob: -5.836813926696777
    6. 'a' → logprob: -6.836813926696777
    7. ' lambda' → logprob: -7.836813926696777
    8. 'acc' → logprob: -8.461813926696777
    9. ' c' → logprob: -8.961813926696777
    10. ',' → logprob: -9.586813926696777

Token 15: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.06998434662818909
    2. ' ,' → logprob: -2.6949844360351562
    3. ',y' → logprob: -11.319984436035156
    4. ' +' → logprob: -11.819984436035156
    5. '+' → logprob: -12.319984436035156
    6. ' ' → logprob: -12.444984436035156
    7. '=lambda' → logprob: -12.444984436035156
    8. ',c' → logprob: -12.944984436035156
    9. ',x' → logprob: -12.944984436035156
    10. ' :' → logprob: -13.694984436035156

Token 16: ' _:' (ID: 133568)
  Prédit: ' y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.22547179460525513
    2. 'y' → logprob: -1.6004717350006104
    3. ' ' → logprob: -9.850471496582031
    4. '	y' → logprob: -13.600471496582031
    5. '  ' → logprob: -13.975471496582031
    6. ' ' → logprob: -14.225471496582031
    7. 'x' → logprob: -14.350471496582031
    8. 'a' → logprob: -14.600471496582031
    9. '_y' → logprob: -14.725471496582031
    10. ',y' → logprob: -15.100471496582031

Token 17: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.1442776769399643
    2. ' x' → logprob: -2.019277572631836
    3. 'chain' → logprob: -7.769277572631836
    4. 'list' → logprob: -8.269277572631836
    5. ' chain' → logprob: -8.394277572631836
    6. '{x' → logprob: -8.519277572631836
    7. 'lambda' → logprob: -9.394277572631836
    8. 'set' → logprob: -9.644277572631836
    9. ' list' → logprob: -9.644277572631836
    10. '{' → logprob: -9.769277572631836

Token 18: ',' (ID: 11)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.6095155477523804
    2. ' +' → logprob: -0.8595155477523804
    3. ' |' → logprob: -3.98451566696167
    4. '.union' → logprob: -4.98451566696167
    5. ')' → logprob: -6.10951566696167
    6. '*' → logprob: -6.35951566696167
    7. '|' → logprob: -6.48451566696167
    8. ' *' → logprob: -6.85951566696167
    9. '+c' → logprob: -8.484515190124512
    10. ',' → logprob: -8.984515190124512

Token 19: ' chain' (ID: 13464)
  Prédit: ' chain'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chain' → logprob: -1.2677814960479736
    2. 'chain' → logprob: -1.5177814960479736
    3. ' range' → logprob: -1.7677814960479736
    4. ' [' → logprob: -2.0177814960479736
    5. 'range' → logprob: -2.5177814960479736
    6. '[' → logprob: -2.6427814960479736
    7. ')' → logprob: -5.2677812576293945
    8. ' [])' → logprob: -5.7677812576293945
    9. ' map' → logprob: -5.8927812576293945
    10. ' c' → logprob: -5.8927812576293945

Token 20: '((' (ID: 2054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.514165997505188
    2. '([' → logprob: -1.139165997505188
    3. '((' → logprob: -3.0141658782958984
    4. '(range' → logprob: -4.639165878295898
    5. '([(' → logprob: -4.764165878295898
    6. '(()' → logprob: -5.764165878295898
    7. '([]' → logprob: -6.014165878295898
    8. '(([' → logprob: -6.139165878295898
    9. '([{' → logprob: -6.764165878295898
    10. '({' → logprob: -7.139165878295898

Token 21: 'input' (ID: 2586)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.653719425201416
    2. 'range' → logprob: -1.028719425201416
    3. '[]' → logprob: -2.778719425201416
    4. '['' → logprob: -4.403719425201416
    5. '[],' → logprob: -5.028719425201416
    6. '(' → logprob: -5.028719425201416
    7. '1' → logprob: -5.403719425201416
    8. '(range' → logprob: -5.653719425201416
    9. '["' → logprob: -5.778719425201416
    10. '[(' → logprob: -6.028719425201416

Token 22: '(),' (ID: 2547)
  Prédit: '()),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()),' → logprob: -0.5227615237236023
    2. '(),' → logprob: -1.272761583328247
    3. '()' → logprob: -2.772761583328247
    4. '(' → logprob: -3.397761583328247
    5. '(()' → logprob: -4.022761344909668
    6. '()))' → logprob: -5.647761344909668
    7. '('' → logprob: -5.772761344909668
    8. '())' → logprob: -5.897761344909668
    9. ',' → logprob: -7.147761344909668
    10. '().' → logprob: -7.772761344909668

Token 23: '),' (ID: 936)
  Prédit: ')),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')),' → logprob: -1.1973272562026978
    2. '),' → logprob: -1.3223272562026978
    3. ' ),' → logprob: -2.572327136993408
    4. ' range' → logprob: -2.697327136993408
    5. 'range' → logprob: -3.197327136993408
    6. ')' → logprob: -3.322327136993408
    7. 'input' → logprob: -3.322327136993408
    8. ' ' → logprob: -3.572327136993408
    9. ' input' → logprob: -3.697327136993408
    10. ')))' → logprob: -3.697327136993408

Token 24: ' (' (ID: 350)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'range' → logprob: -1.069920539855957
    2. 'input' → logprob: -1.819920539855957
    3. 'chain' → logprob: -1.944920539855957
    4. ' range' → logprob: -2.319920539855957
    5. ' chain' → logprob: -3.444920539855957
    6. ' input' → logprob: -3.569920539855957
    7. 'map' → logprob: -3.694920539855957
    8. 'iter' → logprob: -4.069920539855957
    9. '(range' → logprob: -4.069920539855957
    10. '[' → logprob: -4.194920539855957

Token 25: ')),' (ID: 12098)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.2227928191423416
    2. 'range' → logprob: -1.8477928638458252
    3. 'map' → logprob: -4.972792625427246
    4. 'iter' → logprob: -5.847792625427246
    5. '()' → logprob: -5.972792625427246
    6. '[]' → logprob: -6.097792625427246
    7. '(input' → logprob: -6.097792625427246
    8. 'int' → logprob: -6.222792625427246
    9. '['' → logprob: -6.347792625427246
    10. '[' → logprob: -6.347792625427246

Token 26: ' None' (ID: 4662)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8692998290061951
    2. '0' → logprob: -2.11929988861084
    3. '3' → logprob: -2.36929988861084
    4. '2' → logprob: -2.49429988861084
    5. '1' → logprob: -2.74429988861084
    6. ' None' → logprob: -2.99429988861084
    7. ')' → logprob: -3.24429988861084
    8. '10' → logprob: -3.61929988861084
    9. '5' → logprob: -3.86929988861084
    10. '100' → logprob: -3.86929988861084

Token 27: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.371605948312208e-05
    2. '))' → logprob: -10.000053405761719
    3. ' )' → logprob: -12.125053405761719
    4. ',' → logprob: -14.250053405761719
    5. ')))' → logprob: -14.375053405761719
    6. ')`' → logprob: -14.500053405761719
    7. '`)' → logprob: -14.750053405761719
    8. ',)' → logprob: -15.750053405761719
    9. '),' → logprob: -15.750053405761719
    10. ')
' → logprob: -16.37505340576172

Token 28: 'advance' (ID: 75456)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.010298165492713451
    2. '<|end|>' → logprob: -5.260298252105713
    3. '(' → logprob: -6.510298252105713
    4. ' ' → logprob: -6.635298252105713
    5. '#' → logprob: -6.885298252105713
    6. ' )' → logprob: -8.010297775268555
    7. '()' → logprob: -8.510297775268555
    8. '(
' → logprob: -9.260297775268555
    9. '```' → logprob: -9.510297775268555
    10. '
' → logprob: -9.635297775268555

Token 29: ' =' (ID: 314)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.12076183408498764
    2. '_' → logprob: -2.6207618713378906
    3. '(' → logprob: -3.4957618713378906
    4. '_token' → logprob: -5.245761871337891
    5. '_tokens' → logprob: -6.745761871337891
    6. '_count' → logprob: -7.495761871337891
    7. 's' → logprob: -7.620761871337891
    8. '(_)' → logprob: -7.995761871337891
    9. 'd' → logprob: -8.49576187133789
    10. ' ()' → logprob: -8.62076187133789

Token 30: ' lambda' (ID: 27871)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'lambda' → logprob: -0.03328174725174904
    2. 'c' → logprob: -5.0332818031311035
    3. '(lambda' → logprob: -5.0332818031311035
    4. 'iter' → logprob: -5.1582818031311035
    5. 'int' → logprob: -5.7832818031311035
    6. 'next' → logprob: -5.9082818031311035
    7. '1' → logprob: -6.2832818031311035
    8. 'print' → logprob: -6.6582818031311035
    9. 'len' → logprob: -6.6582818031311035
    10. '0' → logprob: -7.1582818031311035

Token 31: ' ch' (ID: 549)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.8555644750595093
    2. ' x' → logprob: -1.3555644750595093
    3. 'c' → logprob: -1.9805644750595093
    4. 'x' → logprob: -2.730564594268799
    5. ':' → logprob: -3.480564594268799
    6. ' lambda' → logprob: -3.980564594268799
    7. ' n' → logprob: -4.230564594268799
    8. 'lambda' → logprob: -4.605564594268799
    9. ' s' → logprob: -5.230564594268799
    10. 'n' → logprob: -5.355564594268799

Token 32: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.14056707918643951
    2. ' :' → logprob: -2.1405670642852783
    3. ',' → logprob: -4.390567302703857
    4. '=' → logprob: -7.890567302703857
    5. ' ,' → logprob: -8.6405668258667
    6. ',ch' → logprob: -9.3905668258667
    7. ',:' → logprob: -10.0155668258667
    8. '_:' → logprob: -10.0155668258667
    9. ':,' → logprob: -10.3905668258667
    10. ' ' → logprob: -10.5155668258667

Token 33: ' ''.' (ID: 105941)
  Prédit: 'chr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'chr' → logprob: -0.010569384321570396
    2. ' chr' → logprob: -5.2605695724487305
    3. '(chr' → logprob: -5.7605695724487305
    4. 'ord' → logprob: -6.6355695724487305
    5. 'str' → logprob: -8.01056957244873
    6. '(ord' → logprob: -8.38556957244873
    7. ' ord' → logprob: -9.01056957244873
    8. 'ch' → logprob: -9.76056957244873
    9. ' ' → logprob: -10.88556957244873
    10. 'None' → logprob: -11.01056957244873

Token 34: 'join' (ID: 10891)
  Prédit: 'join'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'join' → logprob: -7.612634362885728e-05
    2. 'chr' → logprob: -10.375076293945312
    3. ' join' → logprob: -11.000076293945312
    4. 'j' → logprob: -11.500076293945312
    5. 'replace' → logprob: -12.375076293945312
    6. 'mak' → logprob: -13.125076293945312
    7. 'format' → logprob: -13.250076293945312
    8. '.join' → logprob: -13.750076293945312
    9. 'ascii' → logprob: -13.750076293945312
    10. 'strip' → logprob: -13.875076293945312

Token 35: '(map' (ID: 16946)
  Prédit: '(chr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(chr' → logprob: -0.07756461203098297
    2. '([' → logprob: -3.3275647163391113
    3. 'chr' → logprob: -4.202564716339111
    4. '(' → logprob: -4.327564716339111
    5. '(map' → logprob: -5.202564716339111
    6. '(['' → logprob: -6.202564716339111
    7. '((' → logprob: -7.202564716339111
    8. '(sorted' → logprob: -7.452564716339111
    9. '(ord' → logprob: -8.077564239501953
    10. '(
' → logprob: -8.577564239501953

Token 36: '(chr' (ID: 185847)
  Prédit: '(chr'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(chr' → logprob: -0.5932542681694031
    2. '(lambda' → logprob: -0.8432542681694031
    3. '(ord' → logprob: -4.093254089355469
    4. '(' → logprob: -8.343254089355469
    5. 'chr' → logprob: -8.843254089355469
    6. '(str' → logprob: -9.343254089355469
    7. 'lambda' → logprob: -11.843254089355469
    8. '(
' → logprob: -13.968254089355469
    9. '(operator' → logprob: -14.468254089355469
    10. '_chr' → logprob: -14.718254089355469

Token 37: ',' (ID: 11)
  Prédit: '(lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.05844637751579285
    2. ',' → logprob: -3.6834464073181152
    3. '(ord' → logprob: -4.058446407318115
    4. '(' → logprob: -5.558446407318115
    5. '<|end|>' → logprob: -5.683446407318115
    6. 'lambda' → logprob: -6.308446407318115
    7. ')' → logprob: -6.433446407318115
    8. ' (' → logprob: -6.683446407318115
    9. ' lambda' → logprob: -6.933446407318115
    10. '((' → logprob: -8.433445930480957

Token 38: ' [(' (ID: 43900)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'map' → logprob: -1.0251333713531494
    2. '[' → logprob: -1.1501333713531494
    3. 'chain' → logprob: -2.4001333713531494
    4. ' [' → logprob: -2.5251333713531494
    5. ' map' → logprob: -3.1501333713531494
    6. '(chain' → logprob: -3.2751333713531494
    7. '(map' → logprob: -4.02513313293457
    8. ' chain' → logprob: -4.27513313293457
    9. '[(' → logprob: -4.65013313293457
    10. 'range' → logprob: -4.65013313293457

Token 39: 'lambda' (ID: 35280)
  Prédit: 'ord'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ord' → logprob: -0.04944378137588501
    2. '(ord' → logprob: -3.0494437217712402
    3. 'x' → logprob: -8.924444198608398
    4. '(' → logprob: -8.924444198608398
    5. ' ord' → logprob: -9.049444198608398
    6. 'ch' → logprob: -9.549444198608398
    7. 'lambda' → logprob: -9.674444198608398
    8. '((' → logprob: -9.799444198608398
    9. 'o' → logprob: -10.299444198608398
    10. 'chr' → logprob: -10.799444198608398

Token 40: ' code' (ID: 3490)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.9277796149253845
    2. ' x' → logprob: -1.0527796745300293
    3. ' ord' → logprob: -2.1777796745300293
    4. 'ord' → logprob: -2.3027796745300293
    5. 'c' → logprob: -4.552779674530029
    6. ' c' → logprob: -4.927779674530029
    7. 'a' → logprob: -5.427779674530029
    8. ' i' → logprob: -5.927779674530029
    9. 'ch' → logprob: -5.927779674530029
    10. ' a' → logprob: -6.302779674530029

Token 41: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.7642877697944641
    2. 'code' → logprob: -2.0142877101898193
    3. ' code' → logprob: -2.2642877101898193
    4. ' :' → logprob: -2.7642877101898193
    5. 'ch' → logprob: -3.1392877101898193
    6. ' x' → logprob: -3.2642877101898193
    7. ' ' → logprob: -3.6392877101898193
    8. ' i' → logprob: -3.6392877101898193
    9. 's' → logprob: -4.139287948608398
    10. '_' → logprob: -4.514287948608398

Token 42: ' code' (ID: 3490)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.31090328097343445
    2. ' code' → logprob: -1.6859033107757568
    3. '(code' → logprob: -3.560903310775757
    4. ' ord' → logprob: -3.810903310775757
    5. ' (' → logprob: -4.435903072357178
    6. 'ord' → logprob: -4.935903072357178
    7. '(ord' → logprob: -5.060903072357178
    8. 'chr' → logprob: -5.935903072357178
    9. 'lambda' → logprob: -7.560903072357178
    10. 'ch' → logprob: -7.685903072357178

Token 43: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.38770592212677
    2. ' +' → logprob: -1.13770592212677
    3. '-' → logprob: -8.01270580291748
    4. ' -' → logprob: -8.26270580291748
    5. '()+' → logprob: -9.38770580291748
    6. ' if' → logprob: -10.13770580291748
    7. ' ' → logprob: -10.63770580291748
    8. ' :=' → logprob: -10.88770580291748
    9. '+c' → logprob: -11.01270580291748
    10. ':=' → logprob: -11.51270580291748

Token 44: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.010731677524745464
    2. ' ' → logprob: -5.2607316970825195
    3. '(' → logprob: -6.1357316970825195
    4. '32' → logprob: -6.6357316970825195
    5. '(ord' → logprob: -7.6357316970825195
    6. '2' → logprob: -8.26073169708252
    7. ' (' → logprob: -8.38573169708252
    8. '{' → logprob: -8.76073169708252
    9. 'ord' → logprob: -9.13573169708252
    10. 'int' → logprob: -9.76073169708252

Token 45: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00115486653521657
    2. ' ' → logprob: -7.126154899597168
    3. '2' → logprob: -9.001154899597168
    4. '32' → logprob: -9.751154899597168
    5. '-' → logprob: -10.626154899597168
    6. '(' → logprob: -11.126154899597168
    7. '   ' → logprob: -11.188654899597168
    8. 'ord' → logprob: -11.188654899597168
    9. '+' → logprob: -11.376154899597168
    10. '3' → logprob: -11.438654899597168

Token 46: ')(' (ID: 4898)
  Prédit: '(ord'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ord' → logprob: -0.008983965963125229
    2. ')(' → logprob: -5.258984088897705
    3. '(' → logprob: -6.758984088897705
    4. ')' → logprob: -6.883984088897705
    5. ' (' → logprob: -7.508984088897705
    6. '(ch' → logprob: -7.758984088897705
    7. '(chr' → logprob: -8.383983612060547
    8. '((' → logprob: -9.508983612060547
    9. '(c' → logprob: -10.258983612060547
    10. ')(
' → logprob: -10.258983612060547

Token 47: 'ord' (ID: 604)
  Prédit: 'ord'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ord' → logprob: -0.0707896500825882
    2. ' ord' → logprob: -2.6957895755767822
    3. '   ' → logprob: -7.695789813995361
    4. '(ord' → logprob: -8.445789337158203
    5. ' ' → logprob: -9.570789337158203
    6. '  ' → logprob: -10.570789337158203
    7. '```' → logprob: -10.570789337158203
    8. 'ords' → logprob: -11.570789337158203
    9. '    ' → logprob: -11.695789337158203
    10. '`' → logprob: -11.945789337158203

Token 48: '(ch' (ID: 15574)
  Prédit: '(ch'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ch' → logprob: -0.0020688986405730247
    2. 'ch' → logprob: -6.252068996429443
    3. '(' → logprob: -9.252068519592285
    4. '(c' → logprob: -11.002068519592285
    5. ')' → logprob: -11.127068519592285
    6. ')(' → logprob: -13.252068519592285
    7. '	ch' → logprob: -13.377068519592285
    8. ' ch' → logprob: -13.752068519592285
    9. '[ch' → logprob: -13.877068519592285
    10. '(
' → logprob: -14.002068519592285

Token 49: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.5843181014060974
    2. ')' → logprob: -1.2093181610107422
    3. ')+' → logprob: -1.9593181610107422
    4. '))+' → logprob: -6.334318161010742
    5. ')))' → logprob: -7.709318161010742
    6. '[' → logprob: -7.959318161010742
    7. ')])' → logprob: -8.459318161010742
    8. ')-' → logprob: -9.834318161010742
    9. ')]' → logprob: -9.834318161010742
    10. '[i' → logprob: -9.959318161010742

Token 50: ']))
' (ID: 24801)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.048267316073179245
    2. ']))' → logprob: -3.798267364501953
    3. ')])' → logprob: -3.798267364501953
    4. ')' → logprob: -6.673267364501953
    5. '])' → logprob: -8.173267364501953
    6. '))' → logprob: -8.298267364501953
    7. '])))' → logprob: -8.298267364501953
    8. ']' → logprob: -9.548267364501953
    9. '[' → logprob: -10.048267364501953
    10. '])]' → logprob: -10.548267364501953

Token 51: 'print' (ID: 1598)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.23027701675891876
    2. '<|end|>' → logprob: -1.8552770614624023
    3. '(' → logprob: -3.7302770614624023
    4. '
' → logprob: -4.605277061462402
    5. '[' → logprob: -4.980277061462402
    6. ' ' → logprob: -5.105277061462402
    7. '(
' → logprob: -7.855277061462402
    8. '\n' → logprob: -7.980277061462402
    9. '```' → logprob: -8.480277061462402
    10. '<|end|>' → logprob: -8.480277061462402

Token 52: '(re' (ID: 8178)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004604334011673927
    2. '(c' → logprob: -5.879604339599609
    3. '('' → logprob: -6.754604339599609
    4. '(end' → logprob: -8.62960433959961
    5. '("("' → logprob: -9.12960433959961
    6. ')' → logprob: -10.12960433959961
    7. '((' → logprob: -10.25460433959961
    8. ' (' → logprob: -10.62960433959961
    9. '()' → logprob: -10.62960433959961
    10. '("' → logprob: -10.75460433959961

Token 53: 'duce' (ID: 21375)
  Prédit: 'verse'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'verse' → logprob: -0.8337062001228333
    2. 'v' → logprob: -1.5837061405181885
    3. 'advance' → logprob: -1.5837061405181885
    4. 'pr' → logprob: -2.3337061405181885
    5. 'place' → logprob: -3.5837061405181885
    6. 'duce' → logprob: -3.5837061405181885
    7. 'vive' → logprob: -7.208706378936768
    8. 'ad' → logprob: -7.208706378936768
    9. 'adv' → logprob: -8.08370590209961
    10. 'f' → logprob: -8.58370590209961

Token 54: '(str' (ID: 7946)
  Prédit: '(lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.524163544178009
    2. '(' → logprob: -0.899163544178009
    3. ' (' → logprob: -7.274163722991943
    4. ')' → logprob: -9.024163246154785
    5. '((' → logprob: -9.899163246154785
    6. '(s' → logprob: -10.524163246154785
    7. '(operator' → logprob: -10.774163246154785
    8. '('' → logprob: -11.024163246154785
    9. '(
' → logprob: -11.024163246154785
    10. '(ord' → logprob: -11.774163246154785

Token 55: '.__' (ID: 10210)
  Prédit: '.__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.__' → logprob: -0.00653205718845129
    2. '.add' → logprob: -6.131532192230225
    3. '.join' → logprob: -6.506532192230225
    4. '.upper' → logprob: -7.131532192230225
    5. '.capitalize' → logprob: -7.506532192230225
    6. '.' → logprob: -7.881532192230225
    7. '.replace' → logprob: -8.256531715393066
    8. '.strip' → logprob: -8.256531715393066
    9. '.cat' → logprob: -8.756531715393066
    10. '.rstrip' → logprob: -8.881531715393066

Token 56: 'add' (ID: 964)
  Prédit: 'add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'add' → logprob: -0.0007463791989721358
    2. 'mul' → logprob: -8.125746726989746
    3. 'contains' → logprob: -8.625746726989746
    4. 'mod' → logprob: -8.750746726989746
    5. '
' → logprob: -10.875746726989746
    6. ' add' → logprob: -11.000746726989746
    7. 'getitem' → logprob: -11.000746726989746
    8. 'eq' → logprob: -11.250746726989746
    9. '

' → logprob: -12.125746726989746
    10. '   ' → logprob: -12.250746726989746

Token 57: '__,' (ID: 23783)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0007267289329320192
    2. ' ,' → logprob: -8.000726699829102
    3. ',c' → logprob: -8.375726699829102
    4. ',ch' → logprob: -11.000726699829102
    5. ',a' → logprob: -11.125726699829102
    6. '))' → logprob: -11.125726699829102
    7. '__,' → logprob: -11.500726699829102
    8. '_,' → logprob: -11.625726699829102
    9. '),' → logprob: -11.875726699829102
    10. ')' → logprob: -12.188226699829102

Token 58: ' map' (ID: 4014)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -1.0554295778274536
    2. 'advance' → logprob: -1.4304295778274536
    3. '[c' → logprob: -1.8054295778274536
    4. '[' → logprob: -2.305429458618164
    5. 'c' → logprob: -3.055429458618164
    6. 'list' → logprob: -3.680429458618164
    7. ' map' → logprob: -3.805429458618164
    8. ' advance' → logprob: -4.430429458618164
    9. '['' → logprob: -4.680429458618164
    10. '(map' → logprob: -5.055429458618164

Token 59: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002937048440799117
    2. '(lambda' → logprob: -5.877936840057373
    3. 'advance' → logprob: -9.627937316894531
    4. ' (' → logprob: -10.252937316894531
    5. '(ord' → logprob: -11.877937316894531
    6. ' advance' → logprob: -12.377937316894531
    7. '(str' → logprob: -12.377937316894531
    8. ')' → logprob: -12.502937316894531
    9. '(chr' → logprob: -12.752937316894531
    10. '('' → logprob: -14.252937316894531

Token 60: 'advance' (ID: 75456)
  Prédit: 'advance'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'advance' → logprob: -0.024154942482709885
    2. ' advance' → logprob: -3.7741549015045166
    3. 'lambda' → logprob: -7.774155139923096
    4. 'adv' → logprob: -8.149154663085938
    5. ' lambda' → logprob: -9.899154663085938
    6. '   ' → logprob: -10.149154663085938
    7. 'advanced' → logprob: -11.274154663085938
    8. 'ord' → logprob: -11.274154663085938
    9. 'str' → logprob: -11.399154663085938
    10. '(lambda' → logprob: -11.649154663085938

Token 61: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.016810426488518715
    2. ',c' → logprob: -4.391810417175293
    3. ',input' → logprob: -5.766810417175293
    4. ' ,' → logprob: -7.641810417175293
    5. ',(' → logprob: -8.516810417175293
    6. '(c' → logprob: -9.016810417175293
    7. '(' → logprob: -9.391810417175293
    8. 'c' → logprob: -10.141810417175293
    9. ',list' → logprob: -10.391810417175293
    10. '(input' → logprob: -10.766810417175293

Token 62: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.08265448361635208
    2. 'input' → logprob: -3.0826544761657715
    3. ' c' → logprob: -4.0826544761657715
    4. 'list' → logprob: -5.3326544761657715
    5. '"' → logprob: -5.4576544761657715
    6. ''' → logprob: -5.7076544761657715
    7. '(c' → logprob: -6.4576544761657715
    8. ' input' → logprob: -7.0826544761657715
    9. ' ' → logprob: -8.52015495300293
    10. ' list' → logprob: -8.64515495300293

Token 63: ')))' (ID: 15975)
  Prédit: ')))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.009497996419668198
    2. '))' → logprob: -5.259498119354248
    3. '),' → logprob: -5.759498119354248
    4. ')' → logprob: -7.009498119354248
    5. '))))' → logprob: -8.88449764251709
    6. ')))
' → logprob: -10.38449764251709
    7. ' ' → logprob: -11.13449764251709
    8. ')),' → logprob: -12.50949764251709
    9. ')));' → logprob: -12.88449764251709
    10. '')))' → logprob: -13.00949764251709


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 61
Tokens correctement prédits (1ère position, stricte): 18
Tokens correctement prédits (1ère position, avec adaptation): 18
Tokens correctement prédits (top 10): 39
Précision stricte (1ère position): 29.51%
Précision adaptée (1ère position): 29.51%
Précision (top 10): 63.93%
================================================================================
