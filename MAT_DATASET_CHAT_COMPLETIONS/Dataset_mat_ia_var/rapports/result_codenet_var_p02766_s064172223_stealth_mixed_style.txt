================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:24:48
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def count_digits(number: int, base: int):
    res = 0
    while True:
        res += 1
        number = number // base
        if number == 0:
            break
    return res

from sys import stdin

lines = stdin.readline
lst = lines().split()
a = int(lst[0])
b = int(lst[1])

def main():
    print(count_digits(a, b))

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' count' (ID: 3605)
  → Token d'amorce (pas de prédiction)

Token 2: '_digits' (ID: 108638)
  → Token d'amorce (pas de prédiction)

Token 3: '(number' (ID: 32955)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0016157961217686534
    2. '_' → logprob: -6.75161600112915
    3. '```' → logprob: -8.501615524291992
    4. '(:' → logprob: -9.876615524291992
    5. ':' → logprob: -10.126615524291992
    6. '(_:' → logprob: -10.626615524291992
    7. '():' → logprob: -10.876615524291992
    8. '(_' → logprob: -10.876615524291992
    9. '('' → logprob: -11.501615524291992
    10. ' (' → logprob: -11.751615524291992

Token 4: ':' (ID: 25)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.023510770872235298
    2. ')' → logprob: -3.773510694503784
    3. ':' → logprob: -8.523510932922363
    4. '):
' → logprob: -11.023510932922363
    5. '```' → logprob: -11.273510932922363
    6. ''):' → logprob: -12.023510932922363
    7. ''s' → logprob: -12.273510932922363
    8. '(' → logprob: -12.398510932922363
    9. 's' → logprob: -12.648510932922363
    10. '[' → logprob: -12.773510932922363

Token 5: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.255652517080307
    2. 'int' → logprob: -1.5056525468826294
    3. ')' → logprob: -5.75565242767334
    4. ' ' → logprob: -8.50565242767334
    5. ' str' → logprob: -8.75565242767334
    6. ' )' → logprob: -9.13065242767334
    7. ':int' → logprob: -10.25565242767334
    8. '   ' → logprob: -10.75565242767334
    9. '<int' → logprob: -12.25565242767334
    10. '[int' → logprob: -12.25565242767334

Token 6: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1129591315984726
    2. '):' → logprob: -2.237959146499634
    3. ')->' → logprob: -10.237958908081055
    4. ')>' → logprob: -10.737958908081055
    5. '```' → logprob: -10.862958908081055
    6. '):
' → logprob: -10.987958908081055
    7. ')=' → logprob: -12.112958908081055
    8. ':' → logprob: -12.237958908081055
    9. '`)' → logprob: -12.362958908081055
    10. ')>>' → logprob: -13.112958908081055

Token 7: ' base' (ID: 3611)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.3109573125839233
    2. ' digit' → logprob: -1.3109573125839233
    3. ' digits' → logprob: -1.5609573125839233
    4. ' n' → logprob: -1.6859573125839233
    5. ' )' → logprob: -3.935957431793213
    6. ' number' → logprob: -4.060957431793213
    7. ' num' → logprob: -4.935957431793213
    8. ' string' → logprob: -5.060957431793213
    9. ' count' → logprob: -5.560957431793213
    10. 'n' → logprob: -6.060957431793213

Token 8: ':' (ID: 25)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.04735135659575462
    2. '):' → logprob: -3.297351360321045
    3. ':' → logprob: -4.922351360321045
    4. ')' → logprob: -6.422351360321045
    5. ')=' → logprob: -8.797350883483887
    6. ',' → logprob: -9.172350883483887
    7. '=int' → logprob: -10.297350883483887
    8. '):
' → logprob: -10.297350883483887
    9. '```' → logprob: -11.172350883483887
    10. ':int' → logprob: -12.297350883483887

Token 9: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.2981818914413452
    2. 'int' → logprob: -1.6731818914413452
    3. ' ' → logprob: -2.7981820106506348
    4. '32' → logprob: -5.048182010650635
    5. ' ' → logprob: -7.173182010650635
    6. ' )' → logprob: -7.798182010650635
    7. ')' → logprob: -7.798182010650635
    8. ''' → logprob: -8.298181533813477
    9. '<int' → logprob: -8.673181533813477
    10. '```' → logprob: -9.048181533813477

Token 10: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.07004613429307938
    2. '):' → logprob: -2.6950461864471436
    3. ')->' → logprob: -9.695046424865723
    4. '):
' → logprob: -10.695046424865723
    5. ':' → logprob: -11.570046424865723
    6. '`)' → logprob: -12.695046424865723
    7. ')=' → logprob: -12.945046424865723
    8. '```' → logprob: -13.195046424865723
    9. ')>' → logprob: -13.695046424865723
    10. '   ' → logprob: -13.695046424865723

Token 11: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.07029929757118225
    2. '   ' → logprob: -3.8202993869781494
    3. '():' → logprob: -3.8202993869781494
    4. '```' → logprob: -4.32029914855957
    5. '(' → logprob: -5.07029914855957
    6. ''' → logprob: -6.82029914855957
    7. '):' → logprob: -7.19529914855957
    8. '':' → logprob: -7.82029914855957
    9. '(:' → logprob: -8.07029914855957
    10. '`:' → logprob: -8.32029914855957

Token 12: ' res' (ID: 694)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6082422733306885
    2. ''' → logprob: -2.3582422733306885
    3. ' ' → logprob: -2.4832422733306885
    4. ':' → logprob: -2.6082422733306885
    5. '```' → logprob: -2.7332422733306885
    6. '\' → logprob: -3.1082422733306885
    7. '_' → logprob: -3.9832422733306885
    8. ' 
' → logprob: -4.108242034912109
    9. '\n' → logprob: -4.858242034912109
    10. '"' → logprob: -4.858242034912109

Token 13: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.18147413432598114
    2. ' =' → logprob: -2.056474208831787
    3. 'u' → logprob: -3.931474208831787
    4. 'ult' → logprob: -4.931474208831787
    5. 't' → logprob: -5.056474208831787
    6. 's' → logprob: -5.431474208831787
    7. ' ' → logprob: -8.681473731994629
    8. 'ults' → logprob: -9.181473731994629
    9. ' +=' → logprob: -9.931473731994629
    10. '_' → logprob: -10.181473731994629

Token 14: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4741232693195343
    2. '0' → logprob: -0.9741232395172119
    3. ' []' → logprob: -11.474123001098633
    4. ' {}' → logprob: -11.599123001098633
    5. '1' → logprob: -11.849123001098633
    6. 'number' → logprob: -12.099123001098633
    7. ' number' → logprob: -12.599123001098633
    8. ' ' → logprob: -12.599123001098633
    9. '{}' → logprob: -12.974123001098633
    10. '[]' → logprob: -13.474123001098633

Token 15: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.10142356157302856
    2. '1' → logprob: -2.351423501968384
    3. ' ' → logprob: -6.726423740386963
    4. '`' → logprob: -12.226423263549805
    5. 'number' → logprob: -12.476423263549805
    6. '   ' → logprob: -13.476423263549805
    7. '```' → logprob: -13.476423263549805
    8. ''' → logprob: -13.476423263549805
    9. 'len' → logprob: -13.976423263549805
    10. '"' → logprob: -14.226423263549805

Token 16: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.325091004371643
    2. '```' → logprob: -1.575091004371643
    3. '\' → logprob: -1.700091004371643
    4. '\n' → logprob: -2.3250908851623535
    5. ':' → logprob: -2.7000908851623535
    6. '    
' → logprob: -2.9500908851623535
    7. '   ' → logprob: -2.9500908851623535
    8. '  
' → logprob: -3.5750908851623535
    9. ':
' → logprob: -4.2000908851623535
    10. ' 
' → logprob: -5.2000908851623535

Token 17: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0357578992843628
    2. '\n' → logprob: -1.5357578992843628
    3. ' while' → logprob: -2.4107580184936523
    4. '\' → logprob: -2.9107580184936523
    5. '    
' → logprob: -2.9107580184936523
    6. '  
' → logprob: -2.9107580184936523
    7. '```' → logprob: -3.1607580184936523
    8. ':' → logprob: -3.5357580184936523
    9. '
' → logprob: -3.6607580184936523
    10. ' 
' → logprob: -3.9107580184936523

Token 18: ' while' (ID: 2049)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.30695414543151855
    2. '    
' → logprob: -2.4319541454315186
    3. '``' → logprob: -2.8069541454315186
    4. ' while' → logprob: -3.0569541454315186
    5. '   ' → logprob: -3.8069541454315186
    6. 'while' (adapté à ' while') → logprob: -4.056954383850098
    7. '\n' → logprob: -4.806954383850098
    8. '`' → logprob: -5.056954383850098
    9. '     
' → logprob: -5.306954383850098
    10. '\' → logprob: -6.306954383850098

Token 19: ' True' (ID: 6432)
  Prédit: ' number'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' number' → logprob: -0.009636259637773037
    2. 'number' → logprob: -5.009636402130127
    3. ' ' → logprob: -5.884636402130127
    4. ' (' → logprob: -10.134635925292969
    5. ' abs' → logprob: -10.259635925292969
    6. '(number' → logprob: -10.634635925292969
    7. 'abs' → logprob: -10.884635925292969
    8. ' ' → logprob: -12.259635925292969
    9. '	number' → logprob: -12.884635925292969
    10. ' not' → logprob: -13.009635925292969

Token 20: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.13821879029273987
    2. '       ' → logprob: -2.138218879699707
    3. '    ' → logprob: -5.138218879699707
    4. ':
' → logprob: -6.763218879699707
    5. ' :' → logprob: -6.763218879699707
    6. '   ' → logprob: -7.138218879699707
    7. '```' → logprob: -7.263218879699707
    8. '        ' → logprob: -8.138218879699707
    9. '<|end|>' → logprob: -8.513218879699707
    10. '      ' → logprob: -8.763218879699707

Token 21: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.05261810123920441
    2. '    ' → logprob: -3.0526180267333984
    3. '   ' → logprob: -6.302618026733398
    4. ' ' → logprob: -7.177618026733398
    5. '        ' → logprob: -8.177618026733398
    6. '<|end|>' → logprob: -8.302618026733398
    7. '```' → logprob: -8.802618026733398
    8. '     ' → logprob: -8.927618026733398
    9. '      ' → logprob: -9.427618026733398
    10. '        
' → logprob: -9.552618026733398

Token 22: ' res' (ID: 694)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5523871779441833
    2. ' number' → logprob: -1.6773872375488281
    3. ' if' → logprob: -2.177387237548828
    4. 'number' → logprob: -2.427387237548828
    5. '```' → logprob: -4.052387237548828
    6. 'if' → logprob: -4.802387237548828
    7. '   ' → logprob: -5.927387237548828
    8. 'n' → logprob: -6.552387237548828
    9. '    ' → logprob: -6.802387237548828
    10. '`' → logprob: -6.802387237548828

Token 23: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.00380281126126647
    2. ' =' → logprob: -6.12880277633667
    3. '+=' → logprob: -7.25380277633667
    4. '=' → logprob: -7.87880277633667
    5. ' ' → logprob: -8.753803253173828
    6. ' <<=' → logprob: -9.378803253173828
    7. '+' → logprob: -9.628803253173828
    8. ' -=' → logprob: -9.878803253173828
    9. ' +' → logprob: -10.878803253173828
    10. '    ' → logprob: -10.878803253173828

Token 24: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5759832859039307
    2. '1' → logprob: -0.8259832859039307
    3. 'number' → logprob: -10.325983047485352
    4. ' number' → logprob: -11.575983047485352
    5. ' ' → logprob: -15.075983047485352
    6. '```' → logprob: -15.575983047485352
    7. '-' → logprob: -15.700983047485352
    8. '+' → logprob: -15.825983047485352
    9. '[number' → logprob: -16.07598304748535
    10. '   ' → logprob: -16.13848304748535

Token 25: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0007217261008918285
    2. 'number' → logprob: -7.3757219314575195
    3. ' ' → logprob: -9.37572193145752
    4. ' number' → logprob: -11.87572193145752
    5. '(number' → logprob: -13.37572193145752
    6. '   ' → logprob: -14.12572193145752
    7. '[number' → logprob: -15.00072193145752
    8. '```' → logprob: -15.62572193145752
    9. '`' → logprob: -16.000720977783203
    10. '(' → logprob: -16.375720977783203

Token 26: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.01782621070742607
    2. '<|end|>' → logprob: -4.642826080322266
    3. '        
' → logprob: -5.892826080322266
    4. '\n' → logprob: -6.642826080322266
    5. '
' → logprob: -7.392826080322266
    6. '#' → logprob: -7.392826080322266
    7. '<|end|>' → logprob: -7.642826080322266
    8. '    
' → logprob: -7.642826080322266
    9. '   ' → logprob: -8.142826080322266
    10. ')' → logprob: -8.517826080322266

Token 27: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0023379470221698284
    2. '        
' → logprob: -7.50233793258667
    3. 'if' → logprob: -7.75233793258667
    4. '   ' → logprob: -7.87733793258667
    5. ' if' → logprob: -8.377338409423828
    6. '```' → logprob: -8.502338409423828
    7. '    
' → logprob: -9.252338409423828
    8. '\n' → logprob: -9.377338409423828
    9. '<|end|>' → logprob: -9.627338409423828
    10. '\' → logprob: -9.877338409423828

Token 28: ' number' (ID: 2086)
  Prédit: ' number'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' number' → logprob: -0.4477337598800659
    2. 'number' (adapté à ' number') → logprob: -1.697733759880066
    3. ' if' → logprob: -1.822733759880066
    4. 'if' → logprob: -4.1977338790893555
    5. '       ' → logprob: -6.8227338790893555
    6. '   ' → logprob: -9.322733879089355
    7. '```' → logprob: -10.572733879089355
    8. '        
' → logprob: -13.072733879089355
    9. '``' → logprob: -13.322733879089355
    10. '	number' → logprob: -13.822733879089355

Token 29: ' =' (ID: 314)
  Prédit: ' //'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.039735518395900726
    2. '//=' → logprob: -3.7897355556488037
    3. '=' → logprob: -4.914735317230225
    4. ' =' → logprob: -5.039735317230225
    5. '//' → logprob: -7.414735317230225
    6. ' >>=' → logprob: -7.539735317230225
    7. '<|end|>' → logprob: -8.039735794067383
    8. ' ' → logprob: -8.414735794067383
    9. ' /=' → logprob: -8.414735794067383
    10. 'div' → logprob: -8.539735794067383

Token 30: ' number' (ID: 2086)
  Prédit: 'number'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'number' → logprob: -0.3132631778717041
    2. ' number' → logprob: -1.313263177871704
    3. '	number' → logprob: -14.563262939453125
    4. ' ' → logprob: -14.813262939453125
    5. '(number' → logprob: -14.813262939453125
    6. 'div' → logprob: -16.813262939453125
    7. 'int' → logprob: -16.813262939453125
    8. 'Number' → logprob: -17.313262939453125
    9. '[number' → logprob: -17.438262939453125
    10. '```' → logprob: -17.938262939453125

Token 31: ' //' (ID: 602)
  Prédit: ' //'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.007200513035058975
    2. '//' → logprob: -5.757200717926025
    3. '<|end|>' → logprob: -6.257200717926025
    4. ' ' → logprob: -6.757200717926025
    5. 'div' → logprob: -7.757200717926025
    6. ' ' → logprob: -8.632200241088867
    7. '`' → logprob: -9.882200241088867
    8. '<|end|>' → logprob: -10.132200241088867
    9. '"' → logprob: -10.507200241088867
    10. ')' → logprob: -10.632200241088867

Token 32: ' base' (ID: 3611)
  Prédit: 'base'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'base' → logprob: -0.0009114635176956654
    2. ' base' → logprob: -7.000911235809326
    3. ' ' → logprob: -20.500911712646484
    4. '   ' → logprob: -21.000911712646484
    5. '(base' → logprob: -21.000911712646484
    6. 'basis' → logprob: -21.500911712646484
    7. 'bas' → logprob: -21.625911712646484
    8. '	base' → logprob: -21.625911712646484
    9. 'Base' → logprob: -21.875911712646484
    10. 'b' → logprob: -21.875911712646484

Token 33: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0034600140061229467
    2. ' if' → logprob: -6.378459930419922
    3. '<|end|>' → logprob: -6.503459930419922
    4. '        
' → logprob: -9.003459930419922
    5. '```' → logprob: -10.503459930419922
    6. 'if' → logprob: -10.628459930419922
    7. '   ' → logprob: -10.753459930419922
    8. ' 
' → logprob: -11.628459930419922
    9. '<|end|>' → logprob: -11.628459930419922
    10. '  
' → logprob: -11.878459930419922

Token 34: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.03756982088088989
    2. '<|end|>' → logprob: -3.537569761276245
    3. '        
' → logprob: -6.037569999694824
    4. '```' → logprob: -6.912569999694824
    5. ' if' → logprob: -7.037569999694824
    6. '
' → logprob: -7.162569999694824
    7. '   ' → logprob: -7.412569999694824
    8. '\n' → logprob: -7.537569999694824
    9. '  
' → logprob: -7.537569999694824
    10. ' 
' → logprob: -7.662569999694824

Token 35: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.23688079416751862
    2. '       ' → logprob: -1.7368807792663574
    3. 'if' (adapté à ' if') → logprob: -3.3618807792663574
    4. '```' → logprob: -8.736881256103516
    5. '``' → logprob: -12.236881256103516
    6. '        
' → logprob: -12.611881256103516
    7. '   ' → logprob: -12.861881256103516
    8. ' ' → logprob: -13.861881256103516
    9. '`' → logprob: -14.236881256103516
    10. '0' → logprob: -14.486881256103516

Token 36: ' number' (ID: 2086)
  Prédit: ' number'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' number' → logprob: -0.004079470410943031
    2. 'number' → logprob: -5.504079341888428
    3. ' not' → logprob: -14.254079818725586
    4. ' ' → logprob: -14.879079818725586
    5. '	number' → logprob: -17.254079818725586
    6. '(number' → logprob: -17.629079818725586
    7. ' ' → logprob: -18.754079818725586
    8. 'not' → logprob: -19.254079818725586
    9. '[number' → logprob: -19.879079818725586
    10. ' num' → logprob: -20.129079818725586

Token 37: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.02719051204621792
    2. '==' → logprob: -4.027190685272217
    3. ' <=' → logprob: -4.777190685272217
    4. ' <' → logprob: -7.902190685272217
    5. '<=' → logprob: -9.027190208435059
    6. '<|end|>' → logprob: -9.902190208435059
    7. ' ' → logprob: -10.777190208435059
    8. '<' → logprob: -11.527190208435059
    9. '0' → logprob: -12.777190208435059
    10. '<|end|>' → logprob: -13.152190208435059

Token 38: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4740772247314453
    2. '0' → logprob: -0.9740772247314453
    3. ' ' → logprob: -15.599077224731445
    4. '   ' → logprob: -17.724077224731445
    5. '۰' → logprob: -18.349077224731445
    6. '```' → logprob: -18.724077224731445
    7. '  ' → logprob: -18.849077224731445
    8. '    ' → logprob: -19.724077224731445
    9. '<|end|>' → logprob: -20.286577224731445
    10. '٠' → logprob: -21.286577224731445

Token 39: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0040785204619169235
    2. ' ' → logprob: -5.504078388214111
    3. '۰' → logprob: -16.629077911376953
    4. '```' → logprob: -17.754077911376953
    5. '   ' → logprob: -18.129077911376953
    6. '  ' → logprob: -18.379077911376953
    7. ' ' → logprob: -18.879077911376953
    8. '٠' → logprob: -19.129077911376953
    9. '00' → logprob: -19.504077911376953
    10. '<|end|>' → logprob: -19.629077911376953

Token 40: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.001020663301460445
    2. ':
' → logprob: -7.251020431518555
    3. '           ' → logprob: -8.126020431518555
    4. '       ' → logprob: -11.626020431518555
    5. ':return' → logprob: -12.251020431518555
    6. ':

' → logprob: -15.251020431518555
    7. '):' → logprob: -15.751020431518555
    8. '<|end|>' → logprob: -16.126020431518555
    9. '   ' → logprob: -16.251020431518555
    10. ',' → logprob: -16.376020431518555

Token 41: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.00011999329581158236
    2. ':' → logprob: -9.500120162963867
    3. ' break' → logprob: -10.750120162963867
    4. '       ' → logprob: -11.625120162963867
    5. '               ' → logprob: -12.500120162963867
    6. ':
' → logprob: -13.250120162963867
    7. '          ' → logprob: -13.250120162963867
    8. '		' → logprob: -13.250120162963867
    9. '   ' → logprob: -14.375120162963867
    10. '	       ' → logprob: -14.375120162963867

Token 42: ' break' (ID: 2338)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.11128752678632736
    2. ' break' → logprob: -2.3612875938415527
    3. ' return' → logprob: -4.861287593841553
    4. 'break' (adapté à ' break') → logprob: -6.111287593841553
    5. 'return' → logprob: -7.111287593841553
    6. '               ' → logprob: -8.861287117004395
    7. '```' → logprob: -10.236287117004395
    8. '	break' → logprob: -10.861287117004395
    9. '\n' → logprob: -11.486287117004395
    10. '   ' → logprob: -11.861287117004395

Token 43: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.000667640648316592
    2. '\n' → logprob: -8.375667572021484
    3. '    
' → logprob: -8.625667572021484
    4. ' return' → logprob: -9.375667572021484
    5. '
' → logprob: -9.875667572021484
    6. '\' → logprob: -10.125667572021484
    7. '       ' → logprob: -11.000667572021484
    8. '<|end|>' → logprob: -11.500667572021484
    9. '	return' → logprob: -11.625667572021484
    10. '' → logprob: -11.625667572021484

Token 44: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04392610490322113
    2. '\n' → logprob: -3.9189260005950928
    3. '
' → logprob: -4.793926239013672
    4. ' ' → logprob: -5.543926239013672
    5. '    
' → logprob: -5.918926239013672
    6. ' return' → logprob: -5.918926239013672
    7. '\' → logprob: -5.918926239013672
    8. '' → logprob: -7.418926239013672
    9. ' 
' → logprob: -7.793926239013672
    10. '	return' → logprob: -8.043926239013672

Token 45: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0642976388335228
    2. '\n' → logprob: -2.939297676086426
    3. ' return' → logprob: -5.439297676086426
    4. '\' → logprob: -6.314297676086426
    5. ' ' → logprob: -6.689297676086426
    6. 'return' (adapté à ' return') → logprob: -7.314297676086426
    7. '    
' → logprob: -7.939297676086426
    8. '\r' → logprob: -8.314297676086426
    9. ':return' → logprob: -8.939297676086426
    10. '	return' → logprob: -8.939297676086426

Token 46: ' res' (ID: 694)
  Prédit: ' res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' res' → logprob: -0.000804745068307966
    2. 'res' → logprob: -7.125804901123047
    3. ' ' → logprob: -15.875804901123047
    4. ' ' → logprob: -16.625804901123047
    5. '	res' → logprob: -17.500804901123047
    6. '(res' → logprob: -18.125804901123047
    7. 's' → logprob: -19.500804901123047
    8. ' ress' → logprob: -20.125804901123047
    9. '$res' → logprob: -20.375804901123047
    10. '_res' → logprob: -20.375804901123047

Token 47: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 48: 'from' (ID: 2845)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -1.027896761894226
    2. '#' → logprob: -1.652896761894226
    3. ')' → logprob: -2.0278968811035156
    4. '<|end|>' → logprob: -2.0278968811035156
    5. '```' → logprob: -2.9028968811035156
    6. 'def' → logprob: -3.4028968811035156
    7. ':' → logprob: -3.5278968811035156
    8. '\n' → logprob: -3.7778968811035156
    9. '(' → logprob: -4.777896881103516
    10. '\' → logprob: -5.027896881103516

Token 49: ' sys' (ID: 12228)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.013579318299889565
    2. ' typing' → logprob: -4.763579368591309
    3. ' collections' → logprob: -6.013579368591309
    4. ' ' → logprob: -6.263579368591309
    5. ' functools' → logprob: -8.263579368591309
    6. 'math' → logprob: -9.013579368591309
    7. ' itertools' → logprob: -9.263579368591309
    8. ' ' → logprob: -9.763579368591309
    9. 'collections' → logprob: -10.388579368591309
    10. 'typing' → logprob: -11.638579368591309

Token 50: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.0008239185553975403
    2. 'import' → logprob: -7.125823974609375
    3. ' ' → logprob: -12.000823974609375
    4. '	import' → logprob: -12.250823974609375
    5. ' im' → logprob: -12.500823974609375
    6. ' impor' → logprob: -14.000823974609375
    7. '.' → logprob: -14.125823974609375
    8. ' importar' → logprob: -14.125823974609375
    9. '<|end|>' → logprob: -14.500823974609375
    10. ' imports' → logprob: -14.500823974609375

Token 51: ' stdin' (ID: 75143)
  Prédit: 'argv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'argv' → logprob: -0.34032562375068665
    2. 'stdin' → logprob: -1.3403255939483643
    3. ' stdin' → logprob: -3.9653255939483643
    4. ' argv' → logprob: -5.340325832366943
    5. 'exit' → logprob: -5.965325832366943
    6. ' exit' → logprob: -8.840325355529785
    7. 'stdout' → logprob: -8.840325355529785
    8. 'stderr' → logprob: -9.590325355529785
    9. '.argv' → logprob: -11.965325355529785
    10. 'argc' → logprob: -12.590325355529785

Token 52: '

' (ID: 279)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.4112880825996399
    2. '
' → logprob: -1.1612880229949951
    3. '\n' → logprob: -4.411288261413574
    4. '

' → logprob: -5.161288261413574
    5. 'stdin' → logprob: -5.911288261413574
    6. ' for' → logprob: -6.911288261413574
    7. 'input' → logprob: -7.536288261413574
    8. 'data' → logprob: -8.036288261413574
    9. '  
' → logprob: -8.536288261413574
    10. '
' → logprob: -8.661288261413574

Token 53: 'lines' (ID: 10105)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.017070619389414787
    2. 'n' → logprob: -4.267070770263672
    3. 'data' → logprob: -6.267070770263672
    4. 'input' → logprob: -7.392070770263672
    5. 'lines' → logprob: -8.517070770263672
    6. 'number' → logprob: -9.392070770263672
    7. 'num' → logprob: -10.267070770263672
    8. 'def' → logprob: -10.767070770263672
    9. 'numbers' → logprob: -10.767070770263672
    10. ' for' → logprob: -11.892070770263672

Token 54: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.38853397965431213
    2. ' =' → logprob: -1.1385339498519897
    3. '.readline' → logprob: -6.888534069061279
    4. '.' → logprob: -7.513534069061279
    5. '.readlines' → logprob: -10.763533592224121
    6. '_' → logprob: -11.263533592224121
    7. '=input' → logprob: -11.763533592224121
    8. ':' → logprob: -11.888533592224121
    9. '.=' → logprob: -12.138533592224121
    10. '=line' → logprob: -12.263533592224121

Token 55: ' stdin' (ID: 75143)
  Prédit: ' stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stdin' → logprob: -0.5761129260063171
    2. 'stdin' → logprob: -0.8261129260063171
    3. '(stdin' → logprob: -8.826112747192383
    4. '.stdin' → logprob: -10.826112747192383
    5. ' [' → logprob: -12.951112747192383
    6. ' list' → logprob: -13.701112747192383
    7. '[' → logprob: -13.951112747192383
    8. 'list' → logprob: -14.076112747192383
    9. 'stdout' → logprob: -14.451112747192383
    10. '[]' → logprob: -14.826112747192383

Token 56: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.6974869966506958
    2. '.readlines' → logprob: -0.6974869966506958
    3. '.' → logprob: -5.572486877441406
    4. '.read' → logprob: -7.572486877441406
    5. '```' → logprob: -12.072486877441406
    6. '.buffer' → logprob: -13.697486877441406
    7. '<|end|>' → logprob: -13.697486877441406
    8. '._' → logprob: -13.822486877441406
    9. '.lines' → logprob: -14.072486877441406
    10. ' .' → logprob: -14.572486877441406

Token 57: '
' (ID: 198)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.2519713342189789
    2. 's' → logprob: -1.5019713640213013
    3. '(' → logprob: -11.376971244812012
    4. '().' → logprob: -11.626971244812012
    5. '()

' → logprob: -11.876971244812012
    6. ' ()' → logprob: -12.626971244812012
    7. '()
' → logprob: -12.626971244812012
    8. '()`' → logprob: -12.876971244812012
    9. ' s' → logprob: -14.001971244812012
    10. ')' → logprob: -14.376971244812012

Token 58: 'lst' (ID: 65430)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.001897582784295082
    2. 's' → logprob: -6.751897811889648
    3. '().' → logprob: -8.001897811889648
    4. '()
' → logprob: -8.501897811889648
    5. '()

' → logprob: -8.626897811889648
    6. ' ()' → logprob: -12.751897811889648
    7. '()]' → logprob: -13.626897811889648
    8. '()\' → logprob: -13.876897811889648
    9. '())' → logprob: -14.001897811889648
    10. 'lines' → logprob: -14.251897811889648

Token 59: ' =' (ID: 314)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.2845896780490875
    2. 'ines' → logprob: -1.7845896482467651
    3. '=' → logprob: -2.9095897674560547
    4. '()' → logprob: -4.284589767456055
    5. ' =' → logprob: -4.659589767456055
    6. '(' → logprob: -6.909589767456055
    7. 'ine' → logprob: -7.284589767456055
    8. 'es' → logprob: -9.159589767456055
    9. 'ues' → logprob: -9.409589767456055
    10. '_lines' → logprob: -10.034589767456055

Token 60: ' lines' (ID: 8698)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -1.0404298305511475
    2. '[' → logprob: -1.2904298305511475
    3. '[list' → logprob: -1.7904298305511475
    4. 'lines' → logprob: -2.2904298305511475
    5. '(lines' → logprob: -3.5404298305511475
    6. '[int' → logprob: -3.5404298305511475
    7. '[]' → logprob: -3.5404298305511475
    8. ' [' → logprob: -5.040430068969727
    9. '(list' → logprob: -5.790430068969727
    10. ' list' → logprob: -6.415430068969727

Token 61: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.16037289798259735
    2. '().' → logprob: -1.9103728532791138
    3. '(' → logprob: -9.285372734069824
    4. ' ()' → logprob: -10.785372734069824
    5. '()
' → logprob: -12.035372734069824
    6. '())' → logprob: -12.160372734069824
    7. '.strip' → logprob: -12.660372734069824
    8. '.split' → logprob: -12.910372734069824
    9. ' ().' → logprob: -13.035372734069824
    10. '()

' → logprob: -13.160372734069824

Token 62: 'split' (ID: 13627)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.04878118634223938
    2. 'split' → logprob: -3.048781156539917
    3. 'rstrip' → logprob: -8.548781394958496
    4. ' strip' → logprob: -18.04878044128418
    5. ' split' → logprob: -18.79878044128418
    6. 'read' → logprob: -18.92378044128418
    7. 'str' → logprob: -20.29878044128418
    8. 'startswith' → logprob: -20.67378044128418
    9. 'replace' → logprob: -20.79878044128418
    10. '.strip' → logprob: -21.17378044128418

Token 63: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.018322722986340523
    2. '(' → logprob: -4.018322944641113
    3. '('' → logprob: -8.893322944641113
    4. '()]' → logprob: -11.893322944641113
    5. '())' → logprob: -12.018322944641113
    6. '()
' → logprob: -12.393322944641113
    7. '(
' → logprob: -12.518322944641113
    8. '("("' → logprob: -12.643322944641113
    9. ' ()' → logprob: -13.393322944641113
    10. '()

' → logprob: -13.893322944641113

Token 64: 'a' (ID: 64)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.8693487644195557
    2. 'for' → logprob: -1.2443487644195557
    3. 'lst' → logprob: -2.6193487644195557
    4. ')' → logprob: -3.2443487644195557
    5. 'number' → logprob: -3.4943487644195557
    6. ' for' → logprob: -3.8693487644195557
    7. '<|end|>' → logprob: -4.119348526000977
    8. '=' → logprob: -4.119348526000977
    9. ' ' → logprob: -4.369348526000977
    10. '[int' → logprob: -4.744348526000977

Token 65: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.04649589955806732
    2. ',' → logprob: -3.5464959144592285
    3. '=' → logprob: -4.7964959144592285
    4. ' ' → logprob: -5.2964959144592285
    5. 'pp' → logprob: -7.5464959144592285
    6. ',b' → logprob: -7.6714959144592285
    7. '[' → logprob: -8.04649543762207
    8. 'dd' → logprob: -8.42149543762207
    9. 'rg' → logprob: -8.42149543762207
    10. '_' → logprob: -8.67149543762207

Token 66: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0006581080378964543
    2. ' int' → logprob: -7.50065803527832
    3. '[int' → logprob: -9.50065803527832
    4. 'lst' → logprob: -10.50065803527832
    5. 'len' → logprob: -13.25065803527832
    6. '1' → logprob: -15.75065803527832
    7. 'list' → logprob: -15.75065803527832
    8. '0' → logprob: -15.75065803527832
    9. ' lst' → logprob: -15.87565803527832
    10. '(int' → logprob: -16.00065803527832

Token 67: '(lst' (ID: 95688)
  Prédit: '(lst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lst' → logprob: -0.023254677653312683
    2. '(' → logprob: -3.773254632949829
    3. '(ls' → logprob: -12.02325439453125
    4. '(a' → logprob: -14.27325439453125
    5. '(l' → logprob: -14.39825439453125
    6. '(
' → logprob: -14.77325439453125
    7. '(lhs' → logprob: -15.02325439453125
    8. '(lines' → logprob: -15.27325439453125
    9. '(lista' → logprob: -15.64825439453125
    10. 'lst' → logprob: -15.77325439453125

Token 68: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -7.584239938296378e-06
    2. '0' → logprob: -12.500007629394531
    3. '(' → logprob: -12.875007629394531
    4. ' [' → logprob: -13.875007629394531
    5. ')' → logprob: -15.750007629394531
    6. ' ' → logprob: -15.875007629394531
    7. '   ' → logprob: -17.62500762939453
    8. '[-' → logprob: -17.87500762939453
    9. '1' → logprob: -18.50000762939453
    10. '[
' → logprob: -19.00000762939453

Token 69: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -9.014684110297821e-06
    2. '1' → logprob: -12.625008583068848
    3. ' ' → logprob: -12.625008583068848
    4. '[' → logprob: -13.000008583068848
    5. ')' → logprob: -16.500009536743164
    6. '2' → logprob: -17.250009536743164
    7. '   ' → logprob: -17.500009536743164
    8. '3' → logprob: -18.375009536743164
    9. '-' → logprob: -18.625009536743164
    10. ']' → logprob: -19.125009536743164

Token 70: '])
' (ID: 5169)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.006564741022884846
    2. ')' → logprob: -5.131564617156982
    3. ']' → logprob: -8.25656509399414
    4. '])
' → logprob: -8.50656509399414
    5. ' ])' → logprob: -8.88156509399414
    6. '],' → logprob: -11.13156509399414
    7. ''])' → logprob: -12.13156509399414
    8. ')
' → logprob: -12.88156509399414
    9. ')])' → logprob: -13.00656509399414
    10. ')]' → logprob: -13.00656509399414

Token 71: 'b' (ID: 65)
  Prédit: 'b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.029040101915597916
    2. ' ' → logprob: -4.154040336608887
    3. ' b' → logprob: -4.529040336608887
    4. '<|end|>' → logprob: -6.779040336608887
    5. '_' → logprob: -8.404040336608887
    6. 's' → logprob: -8.529040336608887
    7. 'int' → logprob: -8.779040336608887
    8. 'a' → logprob: -9.529040336608887
    9. '  ' → logprob: -9.904040336608887
    10. ',' → logprob: -10.029040336608887

Token 72: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.023274600505828857
    2. '=' → logprob: -3.7732746601104736
    3. ' ' → logprob: -10.773274421691895
    4. '=int' → logprob: -11.898274421691895
    5. '  ' → logprob: -14.898274421691895
    6. ')' → logprob: -15.148274421691895
    7. ':' → logprob: -16.02327537536621
    8. ',' → logprob: -16.14827537536621
    9. '    ' → logprob: -16.52327537536621
    10. ' ' → logprob: -16.52327537536621

Token 73: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.029753148555755615
    2. ' int' → logprob: -3.5297532081604004
    3. ' ' → logprob: -13.904752731323242
    4. 'lst' → logprob: -14.529752731323242
    5. 'a' → logprob: -14.904752731323242
    6. '  ' → logprob: -15.654752731323242
    7. '(int' → logprob: -15.904752731323242
    8. '   ' → logprob: -16.029752731323242
    9. '[int' → logprob: -16.404752731323242
    10. '0' → logprob: -16.529752731323242

Token 74: '(lst' (ID: 95688)
  Prédit: '(lst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lst' → logprob: -1.1041145626222715e-05
    2. '(' → logprob: -11.750011444091797
    3. 'lst' → logprob: -13.250011444091797
    4. '(l' → logprob: -14.625011444091797
    5. '(ls' → logprob: -14.625011444091797
    6. ' (' → logprob: -16.250011444091797
    7. '(lines' → logprob: -17.000011444091797
    8. '(list' → logprob: -17.250011444091797
    9. ' lst' → logprob: -17.375011444091797
    10. '(
' → logprob: -17.875011444091797

Token 75: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.08997271209955215
    2. '1' → logprob: -2.464972734451294
    3. '(' → logprob: -6.964972496032715
    4. ' [' → logprob: -10.964972496032715
    5. ' ' → logprob: -10.964972496032715
    6. '])' → logprob: -11.339972496032715
    7. '```' → logprob: -11.589972496032715
    8. '2' → logprob: -11.714972496032715
    9. ')' → logprob: -11.839972496032715
    10. '0' → logprob: -12.339972496032715

Token 76: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0011889220913872123
    2. '0' → logprob: -6.7511887550354
    3. '])' → logprob: -11.876189231872559
    4. ' ' → logprob: -12.251189231872559
    5. '[' → logprob: -13.376189231872559
    6. ')' → logprob: -13.626189231872559
    7. '(' → logprob: -13.876189231872559
    8. '-' → logprob: -14.126189231872559
    9. '```' → logprob: -14.126189231872559
    10. '2' → logprob: -14.501189231872559

Token 77: '])

' (ID: 21045)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -7.226628895296017e-06
    2. '])' → logprob: -12.250007629394531
    3. '))' → logprob: -13.875007629394531
    4. ')
' → logprob: -14.875007629394531
    5. ' )' → logprob: -14.875007629394531
    6. '）' → logprob: -15.625007629394531
    7. ']' → logprob: -15.750007629394531
    8. ')])' → logprob: -16.00000762939453
    9. '),' → logprob: -16.75000762939453
    10. '})' → logprob: -17.12500762939453

Token 78: 'def' (ID: 1314)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.22387266159057617
    2. 'c' → logprob: -2.848872661590576
    3. 'if' → logprob: -2.848872661590576
    4. 'result' → logprob: -3.473872661590576
    5. 'count' → logprob: -3.598872661590576
    6. 'n' → logprob: -4.973872661590576
    7. 'res' → logprob: -5.098872661590576
    8. ' if' → logprob: -5.723872661590576
    9. 's' → logprob: -6.723872661590576
    10. '
' → logprob: -6.723872661590576

Token 79: ' main' (ID: 2758)
  Prédit: ' count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' count' → logprob: -0.2770615518093109
    2. ' convert' → logprob: -2.1520614624023438
    3. ' gcd' → logprob: -2.4020614624023438
    4. ' is' → logprob: -5.277061462402344
    5. ' main' → logprob: -5.402061462402344
    6. ' power' → logprob: -5.652061462402344
    7. ' pow' → logprob: -5.777061462402344
    8. ' find' → logprob: -6.027061462402344
    9. ' calculate' → logprob: -6.152061462402344
    10. ' sum' → logprob: -6.277061462402344

Token 80: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.00011999329581158236
    2. '(' → logprob: -9.750120162963867
    3. ' ():' → logprob: -10.125120162963867
    4. '()' → logprob: -10.875120162963867
    5. ':' → logprob: -13.375120162963867
    6. '():
' → logprob: -14.875120162963867
    7. '(:' → logprob: -15.500120162963867
    8. '_' → logprob: -16.125120162963867
    9. '):' → logprob: -16.375120162963867
    10. '()>' → logprob: -16.750120162963867

Token 81: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0014774868031963706
    2. 'print' → logprob: -8.001477241516113
    3. ' for' → logprob: -8.251477241516113
    4. 'result' → logprob: -8.376477241516113
    5. 'for' → logprob: -8.751477241516113
    6. 'n' → logprob: -9.501477241516113
    7. ' if' → logprob: -9.626477241516113
    8. 'if' → logprob: -9.751477241516113
    9. 'count' → logprob: -10.001477241516113
    10. '    
' → logprob: -10.001477241516113

Token 82: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -2.045964241027832
    2. ' for' → logprob: -2.170964241027832
    3. 'result' → logprob: -2.420964241027832
    4. ' res' → logprob: -2.420964241027832
    5. ' if' → logprob: -2.670964241027832
    6. '   ' → logprob: -2.795964241027832
    7. 'count' → logprob: -2.795964241027832
    8. 'digits' → logprob: -2.795964241027832
    9. ' print' → logprob: -2.920964241027832
    10. ' result' → logprob: -3.045964241027832

Token 83: '(count' (ID: 25892)
  Prédit: '(count'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(count' → logprob: -0.0016914885491132736
    2. '(' → logprob: -6.6266913414001465
    3. '(a' → logprob: -8.376691818237305
    4. 'count' → logprob: -9.376691818237305
    5. '(max' → logprob: -10.626691818237305
    6. '(f' → logprob: -11.876691818237305
    7. '((' → logprob: -12.001691818237305
    8. '(abs' → logprob: -12.751691818237305
    9. '(pow' → logprob: -13.251691818237305
    10. '(b' → logprob: -13.376691818237305

Token 84: '_digits' (ID: 108638)
  Prédit: '_digits'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_digits' → logprob: -6.749814019713085e-06
    2. '_' → logprob: -12.000006675720215
    3. '_chars' → logprob: -15.625006675720215
    4. '_tokens' → logprob: -15.750006675720215
    5. ')_' → logprob: -16.87500762939453
    6. '_div' → logprob: -17.12500762939453
    7. 'digits' → logprob: -17.37500762939453
    8. '_digit' → logprob: -17.75000762939453
    9. ' _' → logprob: -18.00000762939453
    10. '_a' → logprob: -18.12500762939453

Token 85: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.0016350740334019065
    2. '(b' → logprob: -6.6266350746154785
    3. '(' → logprob: -8.12663459777832
    4. '(abs' → logprob: -12.00163459777832
    5. ')' → logprob: -12.62663459777832
    6. ' (' → logprob: -14.00163459777832
    7. '(ab' → logprob: -14.37663459777832
    8. ')a' → logprob: -14.50163459777832
    9. ')(' → logprob: -14.87663459777832
    10. 'a' → logprob: -15.12663459777832

Token 86: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.059147294610738754
    2. ',b' → logprob: -3.059147357940674
    3. ' ,' → logprob: -4.559147357940674
    4. 'b' → logprob: -11.184146881103516
    5. ' ' → logprob: -11.309146881103516
    6. ' b' → logprob: -12.684146881103516
    7. ',
' → logprob: -14.559146881103516
    8. '  ' → logprob: -14.746646881103516
    9. '，' → logprob: -14.809146881103516
    10. '   ' → logprob: -15.059146881103516

Token 87: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.3868776261806488
    2. 'b' → logprob: -1.1368776559829712
    3. ')' → logprob: -12.88687801361084
    4. ' ' → logprob: -13.26187801361084
    5. ')b' → logprob: -14.13687801361084
    6. '10' → logprob: -14.76187801361084
    7. ' 
' → logprob: -15.76187801361084
    8. ' ' → logprob: -16.011877059936523
    9. '2' → logprob: -16.136877059936523
    10. 'base' → logprob: -16.386877059936523

Token 88: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.16022950410842896
    2. ')' → logprob: -1.9102294445037842
    3. ')))' → logprob: -13.035229682922363
    4. '))
' → logprob: -13.535229682922363
    5. ' ))' → logprob: -14.160229682922363
    6. ' )' → logprob: -14.660229682922363
    7. ')
' → logprob: -15.285229682922363
    8. '),' → logprob: -15.660229682922363
    9. ' ' → logprob: -16.535228729248047
    10. ')}' → logprob: -17.035228729248047

Token 89: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.17693041265010834
    2. '
' → logprob: -2.5519304275512695
    3. '\n' → logprob: -2.5519304275512695
    4. '<|end|>' → logprob: -5.6769304275512695
    5. '\' → logprob: -6.5519304275512695
    6. ' if' → logprob: -6.9269304275512695
    7. '```' → logprob: -8.92693042755127
    8. '  
' → logprob: -9.42693042755127
    9. '\
' → logprob: -10.17693042755127
    10. '    
' → logprob: -10.30193042755127

Token 90: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -2.963691804325208e-05
    2. '()
' → logprob: -10.625029563903809
    3. '(' → logprob: -13.125029563903809
    4. '()`' → logprob: -13.375029563903809
    5. '()

' → logprob: -14.500029563903809
    6. '();' → logprob: -15.250029563903809
    7. ' ()' → logprob: -15.500029563903809
    8. '()\' → logprob: -15.625029563903809
    9. '())' → logprob: -16.250030517578125
    10. '`()' → logprob: -16.375030517578125


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 88
Tokens correctement prédits (1ère position, stricte): 41
Tokens correctement prédits (1ère position, avec adaptation): 42
Tokens correctement prédits (top 10): 70
Précision stricte (1ère position): 46.59%
Précision adaptée (1ère position): 47.73%
Précision (top 10): 79.55%
================================================================================
