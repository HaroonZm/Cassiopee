================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:43:28
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n, k = map(int, input().split())
h = list(map(int, input().split()))
ans = 0
for i in h:
    if i >= k:
        ans += 1
print(ans)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' k' (ID: 372)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.025784850120544434
    2. ' =' → logprob: -3.775784969329834
    3. ',' → logprob: -6.025784969329834
    4. ' ' → logprob: -10.775784492492676
    5. '=
' → logprob: -10.775784492492676
    6. ')' → logprob: -11.150784492492676
    7. ''' → logprob: -11.525784492492676
    8. '=

' → logprob: -11.900784492492676
    9. '```' → logprob: -11.900784492492676
    10. ';' → logprob: -12.025784492492676

Token 4: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.2964531481266022
    2. ' ' → logprob: -1.7964531183242798
    3. 'map' → logprob: -2.6714532375335693
    4. ' input' → logprob: -4.67145299911499
    5. '0' → logprob: -4.92145299911499
    6. 'input' → logprob: -5.79645299911499
    7. ' n' → logprob: -7.29645299911499
    8. ' int' → logprob: -7.54645299911499
    9. '10' → logprob: -8.421453475952148
    10. 'int' → logprob: -9.296453475952148

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10975809395313263
    2. '<|end|>' → logprob: -2.359758138656616
    3. '```' → logprob: -5.734757900238037
    4. '<|end|>' → logprob: -5.984757900238037
    5. ')' → logprob: -7.359757900238037
    6. '(lambda' → logprob: -7.484757900238037
    7. '(user' → logprob: -7.609757900238037
    8. 'user' → logprob: -8.484758377075195
    9. '(int' → logprob: -8.609758377075195
    10. '[' → logprob: -9.109758377075195

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0447302907705307
    2. 'input' → logprob: -3.5447301864624023
    3. ')' → logprob: -4.419730186462402
    4. '(' → logprob: -6.294730186462402
    5. ' input' → logprob: -8.044730186462402
    6. '```' → logprob: -8.169730186462402
    7. ',input' → logprob: -9.669730186462402
    8. '`' → logprob: -9.669730186462402
    9. '(int' → logprob: -9.794730186462402
    10. '[input' → logprob: -10.294730186462402

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.3133276700973511
    2. ' input' → logprob: -1.313327670097351
    3. '(input' → logprob: -9.68832778930664
    4. ')' → logprob: -12.81332778930664
    5. ',input' → logprob: -14.18832778930664
    6. '=input' → logprob: -16.06332778930664
    7. '```' → logprob: -16.18832778930664
    8. '[input' → logprob: -16.56332778930664
    9. '<input' → logprob: -17.06332778930664
    10. '	input' → logprob: -17.81332778930664

Token 8: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6984857320785522
    2. '()' → logprob: -1.6984857320785522
    3. '().' → logprob: -2.198485851287842
    4. '('' → logprob: -2.448485851287842
    5. ')' → logprob: -2.948485851287842
    6. '())' → logprob: -3.198485851287842
    7. '`()' → logprob: -5.448485851287842
    8. '(
' → logprob: -5.573485851287842
    9. '```' → logprob: -5.698485851287842
    10. '("("' → logprob: -6.073485851287842

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0011941560078412294
    2. 'strip' → logprob: -6.751194000244141
    3. 'rstrip' → logprob: -11.12619400024414
    4. ' split' → logprob: -11.75119400024414
    5. ')' → logprob: -14.62619400024414
    6. 'spl' → logprob: -15.12619400024414
    7. 'read' → logprob: -15.12619400024414
    8. '(split' → logprob: -15.37619400024414
    9. 'startswith' → logprob: -16.75119400024414
    10. 'replace' → logprob: -18.00119400024414

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.009710654616355896
    2. '))' → logprob: -5.009710788726807
    3. '())' → logprob: -5.884710788726807
    4. '`)' → logprob: -9.634710311889648
    5. '()' → logprob: -9.884710311889648
    6. '(' → logprob: -10.009710311889648
    7. ')`' → logprob: -10.634710311889648
    8. ')))' → logprob: -12.634710311889648
    9. ' )' → logprob: -12.759710311889648
    10. '()))' → logprob: -12.884710311889648

Token 11: 'h' (ID: 71)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.132415771484375
    2. '```' → logprob: -1.632415771484375
    3. '\n' → logprob: -2.382415771484375
    4. ''' → logprob: -2.507415771484375
    5. '\' → logprob: -2.882415771484375
    6. '<|end|>' → logprob: -3.257415771484375
    7. '[' → logprob: -3.632415771484375
    8. 'if' → logprob: -4.007415771484375
    9. 'for' → logprob: -4.007415771484375
    10. '*' → logprob: -4.132415771484375

Token 12: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0501495823264122
    2. 'e' → logprob: -3.42514967918396
    3. '[i' → logprob: -4.425149440765381
    4. '[e' → logprob: -6.425149440765381
    5. ' =' → logprob: -6.675149440765381
    6. 's' → logprob: -7.425149440765381
    7. '=' → logprob: -8.675149917602539
    8. '[]' → logprob: -8.675149917602539
    9. '_' → logprob: -9.050149917602539
    10. 't' → logprob: -9.800149917602539

Token 13: ' list' (ID: 1562)
  Prédit: ' ['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.6082995533943176
    2. ' list' → logprob: -1.4832994937896729
    3. '[int' → logprob: -2.358299493789673
    4. ' []' → logprob: -2.858299493789673
    5. 'list' → logprob: -3.108299493789673
    6. '[' → logprob: -3.983299493789673
    7. '[]' → logprob: -4.733299732208252
    8. '[list' → logprob: -5.983299732208252
    9. '[n' → logprob: -7.108299732208252
    10. ' int' → logprob: -8.358299255371094

Token 14: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.018755685538053513
    2. '(range' → logprob: -4.393755912780762
    3. '(h' → logprob: -5.518755912780762
    4. '()' → logprob: -7.643755912780762
    5. '(map' → logprob: -7.643755912780762
    6. '(int' → logprob: -8.143755912780762
    7. '(n' → logprob: -8.518755912780762
    8. '(np' → logprob: -9.018755912780762
    9. '(input' → logprob: -9.393755912780762
    10. '```' → logprob: -9.393755912780762

Token 15: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.005381741560995579
    2. '(' → logprob: -5.2553815841674805
    3. '<int' → logprob: -10.38038158416748
    4. 'int' → logprob: -10.50538158416748
    5. '[int' → logprob: -10.50538158416748
    6. '(input' → logprob: -11.00538158416748
    7. '=int' → logprob: -11.13038158416748
    8. ')' → logprob: -11.38038158416748
    9. '```' → logprob: -12.25538158416748
    10. ',int' → logprob: -12.38038158416748

Token 16: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.1621694266796112
    2. ',' → logprob: -2.5371694564819336
    3. ',input' → logprob: -3.0371694564819336
    4. '(' → logprob: -4.162169456481934
    5. '(int' → logprob: -5.037169456481934
    6. ',int' → logprob: -8.412169456481934
    7. ' ,' → logprob: -9.287169456481934
    8. '(),' → logprob: -9.287169456481934
    9. '```' → logprob: -10.162169456481934
    10. 'input' → logprob: -10.787169456481934

Token 17: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.07889155298471451
    2. ' input' → logprob: -2.5788915157318115
    3. '(input' → logprob: -13.32889175415039
    4. ',input' → logprob: -16.07889175415039
    5. '=input' → logprob: -17.70389175415039
    6. '	input' → logprob: -18.20389175415039
    7. '<input' → logprob: -18.45389175415039
    8. '_input' → logprob: -18.70389175415039
    9. ')' → logprob: -19.32889175415039
    10. 'list' → logprob: -19.57889175415039

Token 18: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.004994294140487909
    2. '()' → logprob: -5.3799943923950195
    3. '()))' → logprob: -8.75499439239502
    4. '(' → logprob: -9.37999439239502
    5. '())' → logprob: -10.00499439239502
    6. '(),' → logprob: -10.50499439239502
    7. ' ().' → logprob: -11.50499439239502
    8. '()));' → logprob: -11.50499439239502
    9. '(.' → logprob: -12.25499439239502
    10. '()-' → logprob: -12.37999439239502

Token 19: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -1.7432603272027336e-06
    2. 'strip' → logprob: -13.625001907348633
    3. ' split' → logprob: -14.875001907348633
    4. 'rstrip' → logprob: -16.500001907348633
    5. '(split' → logprob: -16.875001907348633
    6. 'spl' → logprob: -17.500001907348633
    7. '_split' → logprob: -20.875001907348633
    8. 'plit' → logprob: -21.000001907348633
    9. 's' → logprob: -21.875001907348633
    10. ')' → logprob: -22.000001907348633

Token 20: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.1203124150633812
    2. '))' → logprob: -2.245312452316284
    3. '())' → logprob: -5.120312213897705
    4. '()' → logprob: -7.120312213897705
    5. ')' → logprob: -7.620312213897705
    6. '(' → logprob: -8.745312690734863
    7. '()));' → logprob: -11.745312690734863
    8. '()))
' → logprob: -11.870312690734863
    9. '()))

' → logprob: -12.870312690734863
    10. '()),' → logprob: -13.245312690734863

Token 21: 'ans' (ID: 616)
  Prédit: 'h'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'h' → logprob: -1.1060370206832886
    2. 'dp' → logprob: -1.1060370206832886
    3. 'd' → logprob: -2.356037139892578
    4. 'result' → logprob: -2.981037139892578
    5. 'count' → logprob: -3.106037139892578
    6. 's' → logprob: -3.481037139892578
    7. 'c' → logprob: -3.606037139892578
    8. 'res' → logprob: -4.481037139892578
    9. 'ans' → logprob: -4.481037139892578
    10. 'sorted' → logprob: -4.731037139892578

Token 22: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.012017780914902687
    2. '=' → logprob: -4.637017726898193
    3. '_' → logprob: -6.387017726898193
    4. '[' → logprob: -7.637017726898193
    5. ' ' → logprob: -10.512018203735352
    6. '[:]' → logprob: -11.262018203735352
    7. '[]' → logprob: -11.637018203735352
    8. 's' → logprob: -11.887018203735352
    9. ' +=' → logprob: -12.012018203735352
    10. ',' → logprob: -12.137018203735352

Token 23: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.7747467756271362
    2. ' ' → logprob: -1.6497467756271362
    3. ' max' → logprob: -1.8997467756271362
    4. 'max' → logprob: -2.524746894836426
    5. '10' → logprob: -3.149746894836426
    6. ' float' → logprob: -3.899746894836426
    7. 'float' → logprob: -4.274746894836426
    8. ' h' → logprob: -4.274746894836426
    9. ' sum' → logprob: -5.024746894836426
    10. ' min' → logprob: -5.399746894836426

Token 24: '0' (ID: 15)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.5700636506080627
    2. '0' → logprob: -1.070063591003418
    3. '10' → logprob: -3.445063591003418
    4. 'min' → logprob: -3.695063591003418
    5. 'float' → logprob: -4.445063591003418
    6. '100' → logprob: -5.570063591003418
    7. 'k' → logprob: -5.570063591003418
    8. 'h' → logprob: -5.695063591003418
    9. 'sum' → logprob: -5.695063591003418
    10. '1' → logprob: -5.945063591003418

Token 25: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.27267900109291077
    2. '\n' → logprob: -1.7726789712905884
    3. '
' → logprob: -3.397679090499878
    4. ' for' → logprob: -3.647679090499878
    5. '\' → logprob: -5.647678852081299
    6. '' → logprob: -6.647678852081299
    7. '<|end|>' → logprob: -7.147678852081299
    8. ' 
' → logprob: -7.397678852081299
    9. 'n' → logprob: -7.647678852081299
    10. ' ' → logprob: -7.897678852081299

Token 26: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0046644918620586395
    2. ' for' → logprob: -5.629664421081543
    3. 'h' → logprob: -7.379664421081543
    4. 'f' → logprob: -9.129664421081543
    5. '
' → logprob: -9.379664421081543
    6. '\n' → logprob: -9.629664421081543
    7. 'if' → logprob: -10.129664421081543
    8. 'i' → logprob: -10.129664421081543
    9. '```' → logprob: -10.504664421081543
    10. '\' → logprob: -11.254664421081543

Token 27: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.08915146440267563
    2. ' ' → logprob: -2.464151382446289
    3. ' _' → logprob: -9.214151382446289
    4. 'i' → logprob: -9.464151382446289
    5. '_' → logprob: -10.714151382446289
    6. ' h' → logprob: -12.089151382446289
    7. ' ' → logprob: -12.964151382446289
    8. '  ' → logprob: -13.089151382446289
    9. ' ‌' → logprob: -14.089151382446289
    10. ' x' → logprob: -14.339151382446289

Token 28: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.06302550435066223
    2. 'in' → logprob: -2.81302547454834
    3. ' ' → logprob: -6.93802547454834
    4. '  ' → logprob: -10.06302547454834
    5. 'range' → logprob: -11.81302547454834
    6. ' i' → logprob: -12.06302547454834
    7. '	in' → logprob: -12.18802547454834
    8. '+' → logprob: -12.81302547454834
    9. 'n' → logprob: -12.93802547454834
    10. ')' → logprob: -12.93802547454834

Token 29: ' h' (ID: 312)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.5232570171356201
    2. ' range' → logprob: -0.8982570171356201
    3. ' ' → logprob: -9.7732572555542
    4. ' h' → logprob: -9.8982572555542
    5. 'n' → logprob: -11.8982572555542
    6. 'h' → logprob: -12.6482572555542
    7. ' n' → logprob: -12.8982572555542
    8. ')' → logprob: -13.0232572555542
    9. 'r' → logprob: -13.1482572555542
    10. '	range' → logprob: -13.3982572555542

Token 30: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.000519312743563205
    2. '[' → logprob: -8.125519752502441
    3. '[:' → logprob: -9.500519752502441
    4. ' :' → logprob: -10.000519752502441
    5. ':
' → logprob: -10.500519752502441
    6. '>' → logprob: -10.500519752502441
    7. '[:]' → logprob: -11.000519752502441
    8. '):' → logprob: -12.000519752502441
    9. '>:' → logprob: -12.750519752502441
    10. '[:-' → logprob: -12.875519752502441

Token 31: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.17702068388462067
    2. ' if' → logprob: -2.052020788192749
    3. ' ' → logprob: -4.55202054977417
    4. '    ' → logprob: -4.67702054977417
    5. '    
' → logprob: -5.92702054977417
    6. ' 
' → logprob: -6.05202054977417
    7. '```' → logprob: -6.05202054977417
    8. 'if' → logprob: -6.17702054977417
    9. '<|end|>' → logprob: -6.92702054977417
    10. '``' → logprob: -7.67702054977417

Token 32: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.15992499887943268
    2. ' ans' → logprob: -2.0349249839782715
    3. 'if' (adapté à ' if') → logprob: -4.2849249839782715
    4. '   ' → logprob: -6.2849249839782715
    5. 'ans' → logprob: -7.4099249839782715
    6. ' i' → logprob: -8.40992546081543
    7. '```' → logprob: -8.53492546081543
    8. ' ' → logprob: -9.03492546081543
    9. '    ' → logprob: -9.65992546081543
    10. ' max' → logprob: -10.28492546081543

Token 33: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.0337473563849926
    2. 'i' → logprob: -3.408747434616089
    3. '   ' → logprob: -10.033747673034668
    4. ' ' → logprob: -10.283747673034668
    5. '    ' → logprob: -11.658747673034668
    6. '  ' → logprob: -12.533747673034668
    7. '	i' → logprob: -12.908747673034668
    8. '>' → logprob: -13.033747673034668
    9. '(i' → logprob: -13.158747673034668
    10. ' k' → logprob: -13.908747673034668

Token 34: ' >=' (ID: 5064)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.6051625609397888
    2. '>=' → logprob: -1.2301626205444336
    3. ' >=' → logprob: -2.4801626205444336
    4. ' >' → logprob: -2.6051626205444336
    5. '<' → logprob: -6.230162620544434
    6. '%' → logprob: -7.105162620544434
    7. ' ' → logprob: -7.605162620544434
    8. '<=' → logprob: -8.230162620544434
    9. ' <' → logprob: -8.230162620544434
    10. ' <=' → logprob: -9.230162620544434

Token 35: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.6932206153869629
    2. ' k' → logprob: -0.6932206153869629
    3. ' ' → logprob: -9.818220138549805
    4. '10' → logprob: -12.693220138549805
    5. '100' → logprob: -12.943220138549805
    6. '20' → logprob: -13.693220138549805
    7. '50' → logprob: -13.818220138549805
    8. '=k' → logprob: -13.943220138549805
    9. '   ' → logprob: -14.068220138549805
    10. '5' → logprob: -14.068220138549805

Token 36: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.004083266947418451
    2. ':
' → logprob: -5.504083156585693
    3. ' :' → logprob: -13.254083633422852
    4. '   ' → logprob: -13.879083633422852
    5. ':
' → logprob: -14.504083633422852
    6. '       ' → logprob: -14.879083633422852
    7. '):' → logprob: -15.254083633422852
    8. '+:' → logprob: -15.254083633422852
    9. '.' → logprob: -16.00408363342285
    10. '-' → logprob: -16.00408363342285

Token 37: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0007474447484128177
    2. '   ' → logprob: -7.6257476806640625
    3. 'ans' → logprob: -8.875747680664062
    4. ' ans' → logprob: -9.750747680664062
    5. '\n' → logprob: -11.625747680664062
    6. '      ' → logprob: -11.750747680664062
    7. '     ' → logprob: -11.750747680664062
    8. '	ans' → logprob: -11.875747680664062
    9. '           ' → logprob: -12.500747680664062
    10. ':' → logprob: -12.500747680664062

Token 38: ' ans' (ID: 3345)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' (adapté à ' ans') → logprob: -0.05002304166555405
    2. ' ans' → logprob: -3.050023078918457
    3. '   ' → logprob: -6.800023078918457
    4. '	ans' → logprob: -8.800023078918457
    5. '       ' → logprob: -9.050023078918457
    6. '(ans' → logprob: -10.800023078918457
    7. ' ' → logprob: -11.675023078918457
    8. 'answer' → logprob: -12.050023078918457
    9. '_ans' → logprob: -12.550023078918457
    10. '           ' → logprob: -12.675023078918457

Token 39: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.38693323731422424
    2. ' +=' → logprob: -1.1369332075119019
    3. '=' → logprob: -10.511933326721191
    4. '+' → logprob: -11.136933326721191
    5. '   ' → logprob: -11.261933326721191
    6. ']+=' → logprob: -12.761933326721191
    7. ' =' → logprob: -13.136933326721191
    8. '    ' → logprob: -14.136933326721191
    9. '```' → logprob: -14.386933326721191
    10. '+='' → logprob: -15.136933326721191

Token 40: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0010762764140963554
    2. ' ' → logprob: -7.0010762214660645
    3. 'i' → logprob: -8.751076698303223
    4. '100' → logprob: -12.876076698303223
    5. ' i' → logprob: -13.001076698303223
    6. '   ' → logprob: -13.876076698303223
    7. '10' → logprob: -15.376076698303223
    8. '2' → logprob: -16.376075744628906
    9. '500' → logprob: -16.876075744628906
    10. '  ' → logprob: -17.001075744628906

Token 41: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.005393364932388067
    2. 'i' → logprob: -5.2553935050964355
    3. ' ' → logprob: -9.380393028259277
    4. '(i' → logprob: -10.130393028259277
    5. '(' → logprob: -10.505393028259277
    6. '100' → logprob: -12.505393028259277
    7. ' i' → logprob: -13.005393028259277
    8. 'k' → logprob: -15.255393028259277
    9. '500' → logprob: -15.255393028259277
    10. '((' → logprob: -15.380393028259277

Token 42: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.5048530030981055e-06
    2. '
' → logprob: -14.000001907348633
    3. ' print' → logprob: -14.500001907348633
    4. '```' → logprob: -17.250001907348633
    5. '(print' → logprob: -17.875001907348633
    6. '\n' → logprob: -17.875001907348633
    7. '-print' → logprob: -18.375001907348633
    8. '.print' → logprob: -19.375001907348633
    9. '#print' → logprob: -19.750001907348633
    10. '
' → logprob: -19.750001907348633

Token 43: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.8624639324116288e-06
    2. ' print' → logprob: -13.250001907348633
    3. '-print' → logprob: -17.000001907348633
    4. '```' → logprob: -18.250001907348633
    5. '(print' → logprob: -18.875001907348633
    6. '.print' → logprob: -20.000001907348633
    7. '
' → logprob: -20.125001907348633
    8. 'Print' → logprob: -20.250001907348633
    9. '#print' → logprob: -20.750001907348633
    10. '_print' → logprob: -20.750001907348633

Token 44: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -0.4741169512271881
    2. '(' → logprob: -0.9741169214248657
    3. '()' → logprob: -10.474117279052734
    4. '('' → logprob: -12.474117279052734
    5. 'ans' → logprob: -12.974117279052734
    6. '(answer' → logprob: -13.474117279052734
    7. '(len' → logprob: -14.099117279052734
    8. '(
' → logprob: -14.724117279052734
    9. '(abs' → logprob: -14.724117279052734
    10. '(

' → logprob: -14.849117279052734

Token 45: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1472419600977446e-06
    2. '))' → logprob: -14.625000953674316
    3. '`)' → logprob: -15.375000953674316
    4. ')`' → logprob: -15.500000953674316
    5. ' )' → logprob: -15.875000953674316
    6. '')' → logprob: -17.375001907348633
    7. '）' → logprob: -17.750001907348633
    8. ')
' → logprob: -18.000001907348633
    9. '```' → logprob: -18.875001907348633
    10. ')}' → logprob: -18.875001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 43
Tokens correctement prédits (1ère position, stricte): 17
Tokens correctement prédits (1ère position, avec adaptation): 18
Tokens correctement prédits (top 10): 40
Précision stricte (1ère position): 39.53%
Précision adaptée (1ère position): 41.86%
Précision (top 10): 93.02%
================================================================================
